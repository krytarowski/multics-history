ASSEMBLY LISTING OF SEGMENT >spec>install>MR12.2-1209>fort_opt_macros_.alm                                                                                                                          
ASSEMBLED ON:	11/10/88  1341.7 mst Thu
OPTIONS USED:	-target l68                              list symbols 
ASSEMBLED BY:	ALM Version 8.13 September 1988 
ASSEMBLER CREATED:	10/24/88  1635.1 mst Mon

                                     1  " ******************************************************
                                     2  " *                                                    *
                                     3  " * Copyright, (C) Honeywell Limited, 1983             *
                                     4  " *                                                    *
                                     5  " * Copyright (c) 1972 by Massachusetts Institute of   *
                                     6  " * Technology and Honeywell Information Systems, Inc. *
                                     7  " *                                                    *
                                     8  " ******************************************************
                                     9  
                                    10  " HISTORY COMMENTS:
                                    11  "  1) change(86-07-14,BWong), approve(86-07-14,MCR7286),
                                    12  "     audit(86-07-17,Ginter), install(86-07-28,MR12.0-1105):
                                    13  "     Fix fortran bugs 430 and 463.
                                    14  "  2) change(86-07-14,BWong), approve(86-07-14,MCR7442),
                                    15  "     audit(86-07-17,Ginter), install(86-07-28,MR12.0-1105):
                                    16  "     Fix fortran bug 410.
                                    17  "  3) change(88-04-28,RWaters), approve(88-04-28,MCR7875),
                                    18  "     audit(88-07-13,Huen), install(88-11-10,MR12.2-1209):
                                    19  "     Implement SCP 6339: Removed the special case code for constants since
                                    20  "     they can now be up to 128K characters long.
                                    21  "                                                      END HISTORY COMMENTS
                                    22  
                                    23  
                                    24  " Written:	January 1976, by G. D. Chang
                                    25  " Rewritten:	November 1977, by D. S. Levin for optimizing code generator.
                                    26  "
                                    27  " Modified:
                                    28  "         08 Mar 86, SH - 410: Fix bug in cv_bif_to_external where offsets 
                                    29  "		into vector for dtan, asin, dasin and acos were out
                                    30  "		of order.
                                    31  "	08 Aug 85, BW - 430: Prevent emission of deallocation code for
                                    32  "		automatic LA's and VLA's when they don't exist in the
                                    33  "		compilation unit.
                                    34  "	02 Aug 85, BW - 463: Removed code to save and restore stack
                                    35  "		extents in 'quick_return' and 'make_quick_entry'.
                                    36  "		This was only done when char star-extent variables
                                    37  "		were concatenated.
                                    38  "         12 May 95, BW - 452: Fix looping problem when a vla array is
                                    39  "		incorrectly used as a format in a write statement.
                                    40  "	16 Jan 85, MM - 446: Computed GOTO must save state before branching
                                    41  "		but after loading the Q register and setting indicators.
                                    42  "	10 Oct 84, MM - Change "fno" to "fad =0.0,du".
                                    43  "	22 Jun 84, MM - Install typeless functions support.
                                    44  "	28 Mar 84, HH - Install HFP support.
                                    45  "	27 Jul 83, HH - 390: Computed GOTO must save state before branching.
                                    46  "	17 Jun 83, HH - 383: Replace 'scan_parameter_list' subroutine with
                                    47  "		'prepare_for_namelists' subr and 'process_param_list' proc.
                                    48  "	 7 June 83, TO: 381 - Fix pr0|shorten_stack for registers pr1,x1.
                                    49  "	14 Apr 83, HH - 376: Add support for 'len' builtin.
                                    50  "	31 Jan 83, TO & HH - Install LA/VLA support.
                                    51  "	10 January  1982, TO - Add 'emit_entry_defs' call to entries.
                                    52  "	18 Dec 82, TO - Add 'emit_profile_entry' simple operator.
                                    53  "	27 July 1982, TO - Fix check in relational operators to permit
                                    54  "	     temporary nodes, such as expressions and function returns in
                                    55  "	     relationals with character constants.
                                    56  "	13 May 1982, HH - Add "fixedoverflow" check for multiplies.
                                    57  "	 6 May 1982, TO - Add shorten stack to return from char*(*) function.
                                    58  "	 3 May 1982, TO - Add arithmetic 'if' optimization for constant
                                    59  "		expressions.
                                    60  "	 1 April   1982, TO  - External intrinsic references to builtins.
                                    61  "	29 October 1981, CRD - Inquire statement.
                                    62  "	20 October 1981, CRD - Internal files.
                                    63  "	4 September 1981, CRD - Fix bug 339.
                                    64  "	27 August 1981, CRD - More general UNIT field in OPEN/CLOSE stmts.
                                    65  "	21 August 1981, CRD - Blank field in OPEN statement.
                                    66  "	31 July 1981, CRD - Add code to optimize jump_true and jump_false
                                    67  "		operators with constant inputs.
                                    68  "	28 July 1981, CRD - Allow format labels in assign_label operator,
                                    69  "		and allow integer scalars in format operator.
                                    70  "	10 June 1981, CRD - New polish for backspace/endfile/rewind.
                                    71  "	12 May 1981, CRD - Add equiv_op, not_equiv_op.
                                    72  "	23 April 1981, CRD - Fix bug 317.
                                    73  "	13 March 1981, CRD - Modifications for assumed size arrays.
                                    74  "	9 December 1980, CRD - Modifications for Fortran 77 block IF.  Also
                                    75  "		moved error 330's to end of segment.
                                    76  "	19 November 1980, CRD - Change several I/O routines to issue load_pr
                                    77  "		macros BEFORE loading the A or Q.  This is necessary as
                                    78  "		loading a pointer to a character array element may use the
                                    79  "		A or Q.
                                    80  "	28 October 1980, CRD - Add new intrinsics for Fortran 77.
                                    81  "	24 September 1980, CRD - Change make_quick_entry to assert that pr1
                                    82  "		contains the arg list ptr.
                                    83  "	15 August 1980, CRD - Fix ref count bugs in variable length I/O.
                                    84  "	13 August 1980, CRD - Add error_macro segdef.
                                    85  "	16 July 1980, CRD - Key argument list consistency checking off
                                    86  "		variable_arglist bit, not needs_descriptors bit.
                                    87  "	15 July 1980, CRD - Centralize call-side descriptor checking in
                                    88  "		descriptor_check subroutine.  Change logic so that
                                    89  "		descriptors are automatically generated for calls with
                                    90  "		character mode arguments in ansi77 mode.
                                    91  "	27 June 1980, CRD - Add code to allow I/O of strings of variable
                                    92  "		length.  Also insert check to make sure character valued
                                    93  "		functions are not of *-length.
                                    94  "	17 April 1980, CRD - Add code to implement concatenation.
                                    95  "	26 March 1980, CRD - Fix bug in xmit_scalar - temps in Q not getting saved.
                                    96  "	23 Feb 1980, RAB - improve code for conversion from float to integer,
                                    97  "		add code to use ADE in multiply/divide by power of two for
                                    98  "		floating point, fix glitch in open.
                                    99  "	11 Feb 1980, CRD - add code for eight new builtins: CHAR, ICHAR,
                                   100  "		INDEX, LEN, LGE, LGT, LLE, and LLT.
                                   101  "	4 Feb 1980, CRD - add support for entries requiring descriptors.
                                   102  "	27 Jan 1980, RAB - to improve code for jump_computed.
                                   103  "	27 Jan 1980, RAB - to change most conversions from integer to float
                                   104  "		from calls to pl1_operators_ to inline code.
                                   105  "	27 Dec 1979, RAB - load pr2 before pr1 in the exponentiation operators,
                                   106  "		add refresh_regs_if_next_is_jump and note_eligible_ind_var_use
                                   107  "		in the relational operators, add note_eligible_ind_var_use
                                   108  "		in the incrementing operators.  These changes will improve
                                   109  "		object code generated by the register optimizer.
                                   110  "	30 Nov 1979, RAB - Add support for certain operations in index registers
                                   111  "		for the register optimizer.
                                   112  "	03 Nov 1979, RAB - Add load_xreg, load_preg procs; use refresh_regs
                                   113  "		macros for register optimizer.
                                   114  "	03 Nov 1979, RAB - Remove lots of set_inds_valid macros having
                                   115  "		changed return eaq_name to do the job.
                                   116  "	31 Oct 1979, CRD - Add mpy to single_inst table.
                                   117  "	17 Oct 1979, CRD - Insert lots of set_inds_valid macros, change
                                   118  "		jump_true and jump_false to use ind_to_a.
                                   119  "	09 Aug 1979, CRD - Fix bug 221 (dmod implemented incorrectly)
                                   120  "	18 Jul 1979, CRD - Fix bug 226 re reference counts of complex temps.
                                   121  "		convert_to_cmpx macro was erroneously swapping its operands
                                   122  "		in the real and dp cases.
                                   123  "	12 Jul 1979, PES - More forgiving encode/decode statement.  The string may
                                   124  "		now be an array, simple variable, or array element of any type
                                   125  "		but logical.
                                   126  "	09 Jul 1979, CRD - Changes to fix bug 220, in which files do not
                                   127  "		get closed if there is no STOP or CALL EXIT statement in the
                                   128  "		main program.
                                   129  "	02 May 1979, RAB - adds adwpn instructions to single_inst to support new
                                   130  "		scheme for dealing with addresses >= 16K by using ptr regs.
                                   131  "	18 Nov 1978, RAB - Centralizes rounding decisions in "round" and
                                   132  "		"store" macros.  Precedes many floating compares
                                   133  "		with rounds.
                                   134  "	13 Sep 1978, PES - Changes to fix bug 183, in which fortran sometimes decides that
                                   135  "		external subroutine names passed out as arguments in a call should be
                                   136  "		treated as character strings.
                                   137  "	05 Sep 1978, PES - Don't round in real & dp assignments if source was in storage.
                                   138  "	27 Jul 1978, PES - Fix bug in handling of character function return args.
                                   139  "	05 Apr 1978, DSL - Implement save_state,protect_indicators, fix bugs in
                                   140  "		jump_true/jump_false.
                                   141  "	30 Mar 1978, DSL - Use new macro, free_temp, to free arg list temp after
                                   142  "		func ref.
                                   143  "	22 Mar 1978, DSL - Bug fixes and min/max ref count changes.
                                   144  "	15 Feb 1978, DSL - Changes for push_operand macro.
                                   145  "	13 Feb 1978, DSL - Fix bug in atan2 bifs in which a "load_pr pr1"
                                   146  "		made other operand references impossible.
                                   147  "	02 Feb 1978, DSL - Fix jump_true/jump_false inversion. Add drop_counts
                                   148  "		around (if unless)_ind. Make round_dp_to_real a function. Have assign_i
                                   149  "		and assign_l perform stz optimization when appropriate.
                                   150  "	05 Jan 1978, DSL - Implement double precision to complex conversion for
                                   151  "		arithmetic infix oprs and for assignment.
                                   152  "	04 Jan 1978, DSL - Implement rel ops for one char const opnd and one
                                   153  "		arith opnd. Fix bug in func ref (unreported) in which no warning is
                                   154  "		printed if return value is char and may need descriptors.
                                   155  "	27 Dec 1977, DSL - fix bug in cv_bif_to_external (136); use new macros
                                   156  "		pad_char_const_to_(word dw) in assign, fix bug in func_ref (130),
                                   157  "		change macros to truncate on store when appropriate, introduce use
                                   158  "		of new macro, dt_jump1.
                                   159  "	15 Sep 1977, DSL - interim fix to abs bif until load_for_test macro
                                   160  "		is available.
                                   161  "	19 Jul 1977, DSL - fix bugs in open/close.
                                   162  "	14 Jul 1977, DSL - 1) fix sf def for simple references.
                                   163  "		2) change implementation of open/close. 3) fix sf ref for
                                   164  "		logical sf. 4) prevent parameters from reaching
                                   165  "		make_external_variable.
                                   166  "	26 May 1977, GDC - allow statement functions to take character
                                   167  "		arguments with character data-types.
                                   168  "
    012661                         169  	maclist	object
                                   170  	include		fort_macros
                                   1-1  " BEGIN fort_macros.incl.alm
                                   1-2  "
                                   1-3  " Written: June 1976, R. A. Barnes
                                   1-4  "
                                   1-5  " Modified:
                                   1-6  "	22 June 84, MM - Install typeless functions support.
                                   1-7  "	28 Mar 84, HH - Install HFP support.
                                   1-8  "	10 January   1982, TO - Add 'emit_entry_defs' (simple).
                                   1-9  "	 3 January   1982, TO - Add 'even' pseudo for ext_cg optimization
                                  1-10  "		of DO-loop top label.
                                  1-11  "         29 Nov 82, HH - 361:  Remove 'get_format_var'.
                                  1-12  "	21 September 1982, TO - Add emit_storage_args.
                                  1-13  "	 7 September 1982, TO - Add emit_cleanup_args.
                                  1-14  "	 1 September 1982, TO - Add if/unless_cleanup.
                                  1-15  "	 1 September 1982, TO - Add if/unless_storage_created, if/unless_VLA.
                                  1-16  "	 3 May  1982, TO - Add (if/unless)_char_star_function.
                                  1-17  "	 3 May  1982, TO - Add (if/unless)_check_multiply.
                                  1-18  "	27 July 1981, CRD - Add get_format_var.
                                  1-19  "	2 June 1981, CRD - Add push_sf_arg_count.
                                  1-20  "	24 September 1980, CRD - Change desc_ptr_in_base to be a simple
                                  1-21  "		macro (desc_ptr_in_pr3), and add arg_ptr_in_pr1.
                                  1-22  "	16 July 1980, CRD - Add (if unless)_variable_arglist.
                                  1-23  "	15 July 1980, CRD - Add set_needs_descriptors
                                  1-24  "	23 June 1980, CRD - Add (if unless)_ansi77.
                                  1-25  "	11 June 1980, CRD - add push_operand_count.
                                  1-26  "	17 April 1980, CRD - add set_next_operand.
                                  1-27  "	4 March 1980, CRD - add many new macros for concatenation.
                                  1-28  "	23 February 1980, RAB - add float_power_of_two
                                  1-29  "	7 February 1980, CRD - Add int_to_char1 and char1_to_int.
                                  1-30  "	27 January 1980, RAB -  Add force_ql.
                                  1-31  "	24 January 1980, CRD - Add desc_ptr_in_base.
                                  1-32  "	18 January 1980, CRD - Add free_descriptors.
                                  1-33  "	27 December 1979, RAB - Add refresh_regs_if_next_is_jump and
                                  1-34  "		note_eligible_ind_var_use for register optimizer
                                  1-35  "	30 November 1979, RAB - Add (if unless)_global,
                                  1-36  "		(if unless)_induction_var, (if unless)_fb17,
                                  1-37  "		(if unless)_global_ind_var, assign_index, compare_index,
                                  1-38  "		test_index, increment_index, and decrement_index
                                  1-39  "		macros for the register optimizer.
                                  1-40  "	3 November 1979, RAB - Remove obsolete version 1 macros indirect_scan
                                  1-41  "		and finish_indirect_scan.  Add load_xreg, load_preg, and
                                  1-42  "		refresh_regs macros for the register optimizer.
                                  1-43  "	16 October 1979, CRD - add two new macros, set_inds_valid and
                                  1-44  "		ind_to_a.  set_inds_valid is used to update the
                                  1-45  "		machine state when an instruction has been emitted that
                                  1-46  "		(1) set the indicators, (2) modifies the eaq, and (3)
                                  1-47  "		leaves the indicators valid for some register other than
                                  1-48  "		the one it modifies.  ind_to_a is used to force logical
                                  1-49  "		temporaries from the indicators to the A register without
                                  1-50  "		losing the fact that indicators are valid for the A, as
                                  1-51  "		use_ind does.
                                  1-52  "	15 October 1979, CRD - change if_ind and unless_ind to take an
                                  1-53  "		eaq_name.
                                  1-54  "	25 July 1979, CRD - add tables of opcodes in comments.
                                  1-55  "	25 July 1979, CRD - add many more meta macros.
                                  1-56  "	24 July 1979, CRD - add def_left, def_1op, and def_1op_left meta
                                  1-57  "		macros.  This localizes macro definitions and reduces the
                                  1-58  "		possibility of misdefining a macro instruction.
                                  1-59  "	23 July 1979, CRD - add def_simple_cond, def_1op_cond meta macros.
                                  1-60  "		Use if_bit to compress some if/unless pairs into a single
                                  1-61  "		opcode.
                                  1-62  "	23 July 1979, CRD - add def_simple meta macro, move opcodes of simple
                                  1-63  "		macro instructions to left half.
                                  1-64  "	20 July 1979, CRD - remove obsolete version 1 optimizer macros
                                  1-65  "	18 Nov 1978, RAB - macros to support centralized rounding:
                                  1-66  "		round, set_rounded, store  no_update.
                                  1-67  "	29 March 1978, DSL - Change insert_bits to free_temp (39)
                                  1-68  "	January, February 1978 DSL - Add new macros for version II optimizer.
                                  1-69  "	20 December 1977 DSL - have v1opt and v2opt macros use the same
                                  1-70  "	macro numbers.
                                  1-71  "	1 December 1977, D. S. Levin to add macros for v2 optimizer and
                                  1-72  "	restructure.
                                  1-73  "	1 May 1977, R.A. Barnes to add store macro
                                  1-74  "	April 1976, G. D. Chang  to add the save_state macro.
                                  1-75  
                                  1-76  "	META MACROS USED TO CREATE LANGUAGE MACROS
                                  1-77  "
                                  1-78  "					int_dat_var
                                  1-79  "
                                  1-80  	macro int_dat_var
                              1   1-81  	ife &1,var
                              2   1-82  	zero -1,inhibit+&2
                              3   1-83  	ifend_exit
                              4   1-84  	ifint &1
                              5   1-85  	zero &1,inhibit+&2
                              6   1-86  	ifend_exit
                              7   1-87  	zero 0,&1n+inhibit+&2
                              8   1-88  	&end
                                  1-89  "
                                  1-90  "					array
                                  1-91  "
                                  1-92  	macro array
                              1   1-93  	&(&=&x,1&[	vfd &;,&]18/&i&)
                              2   1-94  	equ &2,&x-1
                              3   1-95  	&end
                                  1-96  "
                                  1-97  "					scan_label
                                  1-98  "
                                  1-99  	macro scan_label
                              1  1-100  	ife &1,next
                              2  1-101  	zero &3,&2
                              3  1-102  	ifend_exit
                              4  1-103  	ife &1,continue
                              5  1-104  	zero &4,&2
                              6  1-105  	ifend_exit
                              7  1-106  	zero &1,&2
                              8  1-107  	&end
                                 1-108  "
                                 1-109  "					if_mac2
                                 1-110  "
                                 1-111  	macro if_mac2
                              1  1-112  	ife &3,op1
                              2  1-113  	zero &4,&1+2048*&2+768+inhibit+&5
                              3  1-114  	ifend
                              4  1-115  	ine &3,op1
                              5  1-116  	zero &4,&1+2048*&2+256*&3+inhibit+&5
                              6  1-117  	ifend
                              7  1-118  	&end
                                 1-119  "
                                 1-120  "					if_mac1
                                 1-121  "
                                 1-122  	macro if_mac1
                              1  1-123  	ife &2,<
                              2  1-124  	if_mac2 &1,0,&3,&4,&5
                              3  1-125  	ifend_exit
                              4  1-126  	ife &2,>
                              5  1-127  	if_mac2 &1,1,&3,&4,&5
                              6  1-128  	ifend_exit
                              7  1-129  	ife &2,=
                              8  1-130  	if_mac2 &1,2,&3,&4,&5
                              9  1-131  	ifend_exit
                             10  1-132  	ife &2,^=
                             11  1-133  	if_mac2 &1,3,&3,&4,&5
                             12  1-134  	ifend_exit
                             13  1-135  	ife &2,<=
                             14  1-136  	if_mac2 &1,4,&3,&4,&5
                             15  1-137  	ifend_exit
                             16  1-138  	ife &2,>=
                             17  1-139  	if_mac2 &1,5,&3,&4,&5
                             18  1-140  	ifend_exit
                             19  1-141  	&end
                                 1-142  "
                                 1-143  "					rest_of_error
                                 1-144  "
                                 1-145  	macro rest_of_error
                              1  1-146  	ife &1,()
                              2  1-147  	ifend_exit
                              3  1-148  	ife &1,ascii
                              4  1-149  	vfd 18/&U,10/&l2,1/1,7/67
                              5  1-150  	use .strings.
                              6  1-151  &U:	aci "&2"
                              7  1-152  	use .text.
                              8  1-153  	rest_of_error &FQ3
                              9  1-154  	ifend_exit
                             10  1-155  	zero 0,&1+inhibit+67
                             11  1-156  	rest_of_error &FQ2
                             12  1-157  	&end
                                 1-158  "
                                 1-159  "					def_simple
                                 1-160  "
                                 1-161  	macro def_simple
                              1  1-162  	macro &1
                              2  1-163  	zero &2,inhibit+6
                              3  1-164  	&&end
                              4  1-165  	&end
                                 1-166  "
                                 1-167  "					def_simple_cond
                                 1-168  "
                                 1-169  	macro def_simple_cond
                              1  1-170  	macro if_&1
                              2  1-171  	zero &&1,if_bit+inhibit+&2
                              3  1-172  	&&end
                              4  1-173  	macro unless_&1
                              5  1-174  	zero &&1,inhibit+&2
                              6  1-175  	&&end
                              7  1-176  	&end
                                 1-177  "
                                 1-178  "					def_1op_cond
                                 1-179  "
                                 1-180  	macro def_1op_cond
                              1  1-181  	macro if_&1
                              2  1-182  	zero &&2,&&1+if_bit+inhibit+&2
                              3  1-183  	&&end
                              4  1-184  	macro unless_&1
                              5  1-185  	zero &&2,&&1+inhibit+&2
                              6  1-186  	&&end
                              7  1-187  	&end
                                 1-188  "
                                 1-189  "					def_1op
                                 1-190  "
                                 1-191  	macro def_1op
                              1  1-192  	macro &1
                              2  1-193  	zero 0,&&1+inhibit+&2
                              3  1-194  	&&end
                              4  1-195  	&end
                                 1-196  "
                                 1-197  "					def_left
                                 1-198  "
                                 1-199  	macro def_left
                              1  1-200  	macro &1
                              2  1-201  	zero &&1,inhibit+&2
                              3  1-202  	&&end
                              4  1-203  	&end
                                 1-204  "
                                 1-205  "					def_leftn
                                 1-206  "
                                 1-207  	macro def_leftn
                              1  1-208  	macro &1
                              2  1-209  	zero &&1n,inhibit+&2
                              3  1-210  	&&end
                              4  1-211  	&end
                                 1-212  "
                                 1-213  "					def_1op_left
                                 1-214  "
                                 1-215  	macro def_1op_left
                              1  1-216  	macro &1
                              2  1-217  	zero &&2,&&1+inhibit+&2
                              3  1-218  	&&end
                              4  1-219  	&end
                                 1-220  "
                                 1-221  "					def_1op_left_flag
                                 1-222  "
                                 1-223  	macro def_1op_left_flag
                              1  1-224  	macro &1
                              2  1-225  	ife &&3,()
                              3  1-226  	zero &&2,&&1+inhibit+&2
                              4  1-227  	ifend_exit
                              5  1-228  	zero &&2,&&1+&&3+inhibit+&2
                              6  1-229  	&&end
                              7  1-230  	&end
                                 1-231  "
                                 1-232  "					def_int_dat_var
                                 1-233  "
                                 1-234  	macro def_int_dat_var
                              1  1-235  	macro &1
                              2  1-236  	int_dat_var &&1,&2
                              3  1-237  	&&end
                              4  1-238  	&end
                                 1-239  "
                                 1-240  "					def_type_cond
                                 1-241  "
                                 1-242  	macro def_type_cond
                              1  1-243  	macro &1
                              2  1-244  	zero &&2,&&(1&&i+&&)inhibit+&2
                              3  1-245  	&&end
                              4  1-246  	&end
                                 1-247  "
                                 1-248  "					def_2op_left
                                 1-249  "
                                 1-250  	macro def_2op_left
                              1  1-251  	macro &1
                              2  1-252  	zero &&3,&&2+&&1+inhibit+&2
                              3  1-253  	&&end
                              4  1-254  	&end
                                 1-255  "
                                 1-256  "					def_array1
                                 1-257  "
                                 1-258  	macro def_array1
                              1  1-259  	macro &1
                              2  1-260  	zero &&U,inhibit+&2
                              3  1-261  	array (&&1),&&U
                              4  1-262  	&&end
                              5  1-263  	&end
                                 1-264  "
                                 1-265  "					def_array2
                                 1-266  "
                                 1-267  	macro def_array2
                              1  1-268  	macro &1
                              2  1-269  	zero &&U,&&1+inhibit+&2
                              3  1-270  	array (&&2),&&U
                              4  1-271  	&&end
                              5  1-272  	&end
                                 1-273  "
                                 1-274  "					def_2op
                                 1-275  "
                                 1-276  	macro def_2op
                              1  1-277  	macro &1
                              2  1-278  	zero 0,&&1+&&2+inhibit+&2
                              3  1-279  	&&end
                              4  1-280  	&end
                                 1-281  "
                                 1-282  "					def_1op_optleft
                                 1-283  "
                                 1-284  	macro def_1op_optleft
                              1  1-285  	macro &1
                              2  1-286  	ine &&2,()
                              3  1-287  	zero &&2,&&1+inhibit+&2
                              4  1-288  	ifend_exit
                              5  1-289  	zero 0,&&1+inhibit+&2
                              6  1-290  	&&end
                              7  1-291  	&end
                                 1-292  "
                                 1-293  "					def_1op_flag
                                 1-294  "
                                 1-295  	macro def_1op_flag
                              1  1-296  	macro &1
                              2  1-297  	ife &&1,()
                              3  1-298  	zero 0,inhibit+&2
                              4  1-299  	ifend_exit
                              5  1-300  	zero 1,&&1+inhibit+&2
                              6  1-301  	&&end
                              7  1-302  	&end
                                 1-303  "
                                 1-304  "					def_general_cond
                                 1-305  "
                                 1-306  	macro def_general_cond
                              1  1-307  	macro &1
                              2  1-308  	if_mac1 &&1,&&2,&&3,&&4,&2
                              3  1-309  	&&end
                              4  1-310  	&end
                                 1-311  "
                                 1-312  "					def_1op_name
                                 1-313  "
                                 1-314  	macro def_1op_name
                              1  1-315  	macro &1
                              2  1-316  	zero 0,&&1n+inhibit+&2
                              3  1-317  	&&end
                              4  1-318  	&end
                                 1-319  "
                                 1-320  "					def_2op_name
                                 1-321  "
                                 1-322  	macro def_2op_name
                              1  1-323  	macro &1
                              2  1-324  	zero &&1n,&&2+inhibit+&2
                              3  1-325  	&&end
                              4  1-326  	&end
                                 1-327  
                                 1-328  "	TABLE OF OPCODE ASSIGNMENTS
                                 1-329  "
                                 1-330  "	NOTE: If you change any of these opcode assignments, be sure to
                                 1-331  "	change BOTH ext_code_generator and fort_optimizing_cg!!!
                                 1-332  "
                                 1-333  "
                                 1-334  "	1	copy
                                 1-335  "	2	swap
                                 1-336  "	3	pop
                                 1-337  "	4	push_temp
                                 1-338  "	5	push_variable
                                 1-339  "	6	used for extended opcode dispatch
                                 1-340  "	7	emit_eis
                                 1-341  "	8	push_constant
                                 1-342  "	9	convert_constant
                                 1-343  "	10	push_count_indexed
                                 1-344  "	11	push_builtin
                                 1-345  "	12	proc
                                 1-346  "	13	func
                                 1-347  "	14	call
                                 1-348  "	15	return
                                 1-349  "	16	jump
                                 1-350  "	17	scan
                                 1-351  "	18	exit
                                 1-352  "	19	s_call
                                 1-353  "	20	set_inds_valid
                                 1-354  "	21	if_dt
                                 1-355  "	22	unless_dt
                                 1-356  "	23	if_optype
                                 1-357  "	24	unless_optype
                                 1-358  "	25	(if unless)_array
                                 1-359  "	26	(if unless)_aligned
                                 1-360  "	27	if_eaq
                                 1-361  "	28	unless_eaq
                                 1-362  "	29	dt_jump
                                 1-363  "	30	ind_jump
                                 1-364  "	31	if
                                 1-365  "	32	unless
                                 1-366  "	33	jump_indexed
                                 1-367  "	34	emit, emit_data, emit_inst
                                 1-368  "	35	label
                                 1-369  "	36	rel_con
                                 1-370  "	37	set_rel_constant
                                 1-371  "	38	add_to_address
                                 1-372  "	39	free_temp
                                 1-373  "	40	reserve_regs
                                 1-374  "	41	load_pr
                                 1-375  "	42	use_a
                                 1-376  "	43	use_q
                                 1-377  "	44	make_addressable
                                 1-378  "	45	use_eaq
                                 1-379  "	46	load
                                 1-380  "	47	load_top
                                 1-381  "	48	in_reg
                                 1-382  "	49	refresh_regs
                                 1-383  "	50	push_sf_arg_count
                                 1-384  "	51	increment
                                 1-385  "	52	decrement
                                 1-386  "	53	multiply
                                 1-387  "	54	push_count
                                 1-388  "	55	push_bif_index
                                 1-389  "	56	(if unless)_saving_stack_extent
                                 1-390  "	57	start_cat
                                 1-391  "	58	shorten_stack
                                 1-392  "	59	set_next_operand
                                 1-393  "	60	(if unless)_ansi77
                                 1-394  "	61	s_func_label
                                 1-395  "	62	push_s_func_label
                                 1-396  "	63	push_s_func_var
                                 1-397  "	64	push_array_size
                                 1-398  "	65	print
                                 1-399  "	66	error
                                 1-400  "	67	used by rest_of_error
                                 1-401  "	68	push_length
                                 1-402  "	69	(if unless)_variable_arglist
                                 1-403  "	70	used by call
                                 1-404  "	71	used by make_addressable
                                 1-405  "	72	if_ind
                                 1-406  "	73	unless_ind
                                 1-407  "	74	(if unless)_char_star_function
                                 1-408  "	75	(if unless)_check_multiply
                                 1-409  "	76	make_io_desc
                                 1-410  "	77	(if unless)_one_word_dt
                                 1-411  "	78	assign_entry
                                 1-412  "	79	(if unless)_storage_created
                                 1-413  "	80	push_char_temp
                                 1-414  "	81	(if unless)_parameter
                                 1-415  "	82	(if unless)_global
                                 1-416  "	83	(if unless)_induction_var
                                 1-417  "	84	(if unless)_fb17
                                 1-418  "	85	(if unless)_negative
                                 1-419  "	86	(if unless)_global_ind_var
                                 1-420  "	87	(if unless)_local
                                 1-421  "	88	(if unless)_VLA
                                 1-422  "	89	(if unless)_main
                                 1-423  "	90	(if unless)_cleanup
                                 1-424  "	91	(if unless)_constant_addrs
                                 1-425  "	92	(if unless)_hfp
                                 1-426  "	93	get_quick_label
                                 1-427  "	94	UNUSED
                                 1-428  "	95	(if unless)_needs_descriptors
                                 1-429  "	96	UNUSED
                                 1-430  "	97	UNUSED
                                 1-431  "	98	UNUSED
                                 1-432  "	99	(if unless)_namelist_used
                                 1-433  "	100	UNUSED
                                 1-434  "	101	if_next_statement
                                 1-435  "	102	unless_next_statement
                                 1-436  "	103	UNUSED
                                 1-437  "	104	push_operand
                                 1-438  "	105	compare
                                 1-439  "	106	UNUSED
                                 1-440  "	107	UNUSED
                                 1-441  "	108	round
                                 1-442  "	109	flush_ref
                                 1-443  "	110	save_state
                                 1-444  "	111	store
                                 1-445  "	112	load_pr_value
                                 1-446  "	113	load_for_test
                                 1-447  "	114	set_in_storage
                                 1-448  "	115	bump
                                 1-449  "	116	drop
                                 1-450  "	117	UNUSED
                                 1-451  "	118	(if unless)_zero
                                 1-452  "	119	UNUSED
                                 1-453  "	120	UNUSED
                                 1-454  "	121	push_ref_count
                                 1-455  "	122	UNUSED
                                 1-456  "	123	float_power_of_fpbase
                                 1-457  "	124	dt_jump1
                                 1-458  "	125	pad_char_const_to_word
                                 1-459  "	126	pad_char_const_to_dw
                                 1-460  "	127	power_of_two
                                 1-461  
                                 1-462  "	LANGUAGE MACROS
                                 1-463  "
                                 1-464  "
                                 1-465  	def_1op copy,1			" copy opname
                                 1-466  	def_1op swap,2			" swap opname
                                 1-467  	def_1op pop,3			" pop opname
                                 1-468  	def_int_dat_var push_temp,4		" push_temp {int|dt_name|var}
                                 1-469  	def_1op_name push_variable,5		" push_variable dt_name <NON-OPT ONLY>
                                 1-470  	def_left emit_eis,7			" emit_eis [equal_lengths]
                                 1-471  	def_int_dat_var push_constant,8	" push_constant {int|dt_name|var}
                                 1-472  	def_1op_name convert_constant,9	" convert_constant dt_name
                                 1-473  	def_array2 push_count_indexed,10	" push_count_indexed opname,(count,...)
                                 1-474  	def_left push_builtin,11		" push_builtin builtin_name
                                 1-475  
                                 1-476  	macro proc			" proc {int|var} [,error_lbl]
                              1  1-477  	vfd 18/&2,10/&1,1/1,7/12
                              2  1-478  	&end
                                 1-479  
                                 1-480  	macro func			" func {int|var} [,error_lbl]
                              1  1-481  	vfd 18/&2,10/&1,1/1,7/13
                              2  1-482  	&end
                                 1-483  
                                 1-484  	macro call			" call lbl,[error_lbl]
                              1  1-485  	ife &2,()
                              2  1-486  	zero &1,inhibit+14
                              3  1-487  	ifend_exit
                              4  1-488  	zero &1,inhibit+70
                              5  1-489  	zero &2
                              6  1-490  	&end
                                 1-491  
                                 1-492  	def_1op_flag return,15		" return [eaq_name|opname]
                                 1-493  	def_left jump,16			" jump lbl
                                 1-494  
                                 1-495  	macro scan			" scan err_lbl,(exit_lbl...)
                              1  1-496  &u:
                              2  1-497  	ife &1,continue
                              3  1-498  	zero *,inhibit+17
                              4  1-499  	ifend
                              5  1-500  	ine &1,continue
                              6  1-501  	scan_label &1,inhibit+17,&U,&p
                              7  1-502  	ifend
                              8  1-503  	&(2	scan_label &i,inhibit+16,&U,&p
                              9  1-504  	&)
                             10  1-505  &U:
                             11  1-506  	&end
                                 1-507  
                                 1-508  	def_left exit,18			" exit integer <NON-OPT ONLY>
                                 1-509  	def_left s_call,19			" s_call lbl
                                 1-510  	def_1op set_inds_valid,20		" set_inds_valid eaq_name
                                 1-511  	def_type_cond if_dt,21		" if_dt (dt_name...),lbl
                                 1-512  	def_type_cond unless_dt,22		" unless_dt (dt_name...),lbl
                                 1-513  	def_type_cond if_optype,23		" if_optype (dt_name...),lbl
                                 1-514  	def_type_cond unless_optype,24	" unless_optype (dt_name...),lbl
                                 1-515  	def_simple_cond array,25		" (if unless)_array lbl
                                 1-516  	def_1op_cond aligned,26		" (if unless)_aligned opname,lbl
                                 1-517  	def_2op_left if_eaq,27		" if_eaq eaq_name,opname,lbl
                                 1-518  	def_2op_left unless_eaq,28		" unless_eaq eaq_name,opname,lbl
                                 1-519  	def_array1 dt_jump,29		" dt_jump (lbl,...)
                                 1-520  	def_array1 ind_jump,30		" ind_jump (lbl,...)
                                 1-521  	def_general_cond if,31		" if opname,relop,opname,lbl
                                 1-522  	def_general_cond unless,32		" unless opname,relop,opname,lbl
                                 1-523  	def_array2 jump_indexed,33		" jump_indexed opname,(lbl,...)
                                 1-524  	def_left emit,34			" emit integer
                                 1-525  	def_left emit_data,34		" emit_data integer
                                 1-526  
                                 1-527  	macro emit_inst			" emit_inst integer
                              1  1-528  	zero &1,inst_word+inhibit+34
                              2  1-529  	&end
                                 1-530  
                                 1-531  	def_1op label,35			" label opname
                                 1-532  	def_1op rel_con,36			" rel_con opname
                                 1-533  	def_1op set_rel_constant,37		" set_rel_constant opname
                                 1-534  	def_1op_flag add_to_address,38	" add_to_address [opname]
                                 1-535  	def_1op free_temp,39		" free_temp opname
                                 1-536  
                                 1-537  	macro reserve_regs			" reserve_regs (xpr_name,...)
                              1  1-538  	&(&=&x,1&[zero &;+&]&i&),inhibit+40
                              2  1-539  	&end
                                 1-540  
                                 1-541  	def_2op_name load_pr,41		" load_pr pr_name,opname
                                 1-542  	def_left use_a,42			" use_a [protect_indicators] <OPT ONLY>
                                 1-543  	def_left use_q,43			" use_q [protect_indicators] <OPT ONLY>
                                 1-544  
                                 1-545  	macro make_addressable		" make_addressable opname[,opname]
                              1  1-546  	ife &2,()
                              2  1-547  	zero 0,&1+inhibit+44
                              3  1-548  	ifend_exit
                              4  1-549  	zero &2,&1+inhibit+71
                              5  1-550  	&end
                                 1-551  
                                 1-552  	def_left use_eaq,45			" use_eaq [protect_indicators]
                                 1-553  	def_2op load,46			" load eaq_name,opname
                                 1-554  	def_1op_optleft load_top,47		" load_top eaq_name[,lbl]
                                 1-555  	def_2op in_reg,48			" in_reg eaq_name,opname
                                 1-556  	def_left refresh_regs,49		" refresh_regs [protect_indicators] <OPT ONLY>
                                 1-557  	def_1op push_sf_arg_count,50		" push_sf_arg_count opname <NON-OPT ONLY>
                                 1-558  	def_1op_left increment,51		" increment opname,int
                                 1-559  	def_1op_left decrement,52		" decrement opname,int
                                 1-560  	def_1op_left multiply,53		" multiply opname,int
                                 1-561  	def_left push_count,54		" push_count integer
                                 1-562  	def_1op push_bif_index,55		" push_bif_index opname
                                 1-563  	def_simple_cond saving_stack_extent,56	" (if unless)_saving_stack_extent lbl
                                 1-564  	def_left start_cat,57		" start_cat lbl
                                 1-565  	def_left shorten_stack,58		" shorten_stack [protect_indicators]
                                 1-566  	def_left set_next_operand,59		" set_next_operand opno <OPT ONLY>
                                 1-567  	def_simple_cond ansi77,60		" (if unless)_ansi77 lbl
                                 1-568  	def_1op s_func_label,61		" s_func_label opname <NON-OPT ONLY>
                                 1-569  	def_1op push_s_func_label,62		" push_s_func_label opname <NON-OPT ONLY>
                                 1-570  	def_1op_left push_s_func_var,63	" push_s_func_var opname,lbl <NON-OPT ONLY>
                                 1-571  	def_1op push_array_size,64		" push_array_size opname
                                 1-572  
                                 1-573  	macro print			" print errno,opname,...
                              1  1-574  &u:	vfd 18/&1,10/&U,1/1,7/65
                              2  1-575  	rest_of_error &FQ2
                              3  1-576  	equ &U,*-&p-1
                              4  1-577  	&end
                                 1-578  
                                 1-579  	macro error			" error errno,opname,...
                              1  1-580  	ine &1,()
                              2  1-581  &u:	vfd 18/&1,10/&U,1/1,7/66
                              3  1-582  	rest_of_error &FQ2
                              4  1-583  	equ &U,*-&p-1
                              5  1-584  	ifend_exit
                              6  1-585  	zero 0,inhibit+66
                              7  1-586  	&end
                                 1-587  
                                 1-588  	def_1op push_length,68		" push_length opname
                                 1-589  	def_1op_cond variable_arglist,69	" (if unless)_variable_arglist opname,lbl
                                 1-590  	def_1op_left if_ind,72		" if_ind eaq_name,lbl
                                 1-591  	def_1op_left unless_ind,73		" unless_ind eaq_name,lbl
                                 1-592   	def_simple_cond char_star_function,74	" (if unless)_char_star_function
                                 1-593  	def_simple_cond check_multiply,75	" (if unless)_check_multiply
                                 1-594  	def_left make_io_desc,76		" make_io_desc bits
                                 1-595  	def_1op_cond one_word_dt,77		" (if unless)_one_word_dt,lbl
                                 1-596  	def_1op assign_entry,78		" assign_entry opname
                                 1-597  	def_simple_cond storage_created,79	" (if unless)_storage_created lbl
                                 1-598  	def_int_dat_var push_char_temp,80	" push_char_temp {int|dt_name|var}
                                 1-599  	def_1op_cond parameter,81		" (if unless)_parameter opname,lbl
                                 1-600  	def_1op_cond global,82		" (if unless)_global opname,lbl <OPT ONLY>
                                 1-601  	def_1op_cond induction_var,83		" (if unless)_induction_var opname,lbl <OPT ONLY>
                                 1-602  	def_1op_cond fb17,84		" (if unless)_fb17 opname,lbl <OPT ONLY>
                                 1-603  	def_1op_cond negative,85		" (if unless)_negative opname,lbl
                                 1-604  	def_1op_cond global_ind_var,86	" (if unless)_global_ind_var opname,lbl <OPT ONLY>
                                 1-605  	def_1op_cond local,87		" (if unless)_local opname,lbl
                                 1-606  	def_1op_cond VLA,88			" (if unless)_VLA opname,lbl
                                 1-607  	def_simple_cond main,89		" (if unless)_main lbl
                                 1-608  	def_simple_cond cleanup,90		" (if unless)_cleanup lbl
                                 1-609  	def_simple_cond constant_addrs,91	" (if unless)_constant_addrs lbl
                                 1-610  	def_simple_cond hfp,92		" (if unless)_hfp lbl
                                 1-611  	def_1op get_quick_label,93		" get_quick_label opname
                                 1-612  	def_1op_cond needs_descriptors,95	" (if unless)_needs_descriptors opname,lbl
                                 1-613  	def_simple_cond namelist_used,99	" (if unless)_namelist_used lbl
                                 1-614  	def_1op_left if_next_statement,101	" if_next_statement opname,lbl <OPT ONLY>
                                 1-615  	def_1op_left unless_next_statement,102	" unless_next_statement opname,lbl <OPT ONLY>
                                 1-616  	def_left push_operand,104		" push_operand lbl
                                 1-617  	def_2op compare,105			" compare eaq_name,opname
                                 1-618  	def_1op round,108			" round eaq_name
                                 1-619  	def_1op flush_ref,109		" flush_ref opname
                                 1-620  	def_1op_optleft save_state,110	" save_state opname[,discard] <OPT ONLY>
                                 1-621  
                                 1-622  	macro store			" store eaq_name,opname[,??]
                              1  1-623  	zero &=&3,no_update&[1&;0&],&1+&2+inhibit+111
                              2  1-624  	&end
                                 1-625  
                                 1-626  	def_2op_name load_pr_value,112	" load_pr_value eaq_name,opname
                                 1-627  	def_2op load_for_test,113		" load_for_test eaq_name,opname
                                 1-628  	def_1op set_in_storage,114		" set_in_storage opname
                                 1-629  
                                 1-630  	macro bump			" bump opname[,integer] <OPT ONLY>
                              1  1-631  	zero &=&2,&[1&;&2&],&1+inhibit+115
                              2  1-632  	&end
                                 1-633  
                                 1-634  	macro drop			" drop opname[,integer] <OPT ONLY>
                              1  1-635  	zero &=&2,&[1&;&2&],&1+inhibit+116
                              2  1-636  	&end
                                 1-637  
                                 1-638  	def_1op_cond zero,118		" (if unless)_zero opname,lbl
                                 1-639  	def_1op push_ref_count,121		" push_ref_count opname <OPT ONLY>
                                 1-640  	def_1op_left_flag float_power_of_fpbase,123
                                 1-641  	def_array2 dt_jump1,124		" dt_jump1 opname,(lbl,...)
                                 1-642  	def_1op pad_char_const_to_word,125	" pad_char_const_to_word opname
                                 1-643  	def_1op pad_char_const_to_dw,126	" pad_char_const_to_dw opname
                                 1-644  	def_1op_left power_of_two,127		" power_of_two opname,lbl <OPT ONLY>
                                 1-645  "
                                 1-646  "
                                 1-647  "	Macro numbers cannot exceed 127.
                                 1-648  
                                 1-649  "	TABLE OF SIMPLE OPCODES
                                 1-650  "
                                 1-651  "	NOTE: If you add to or change any of these opcode assignments, be
                                 1-652  "	sure to change BOTH ext_code_generator and fort_optimizing_cg!!!
                                 1-653  "
                                 1-654  "
                                 1-655  "	1	push_label
                                 1-656  "	2	push_rel_constant
                                 1-657  "	3	s_return
                                 1-658  "	4	free_regs
                                 1-659  "	5	reset_regs
                                 1-660  "	6	reset_eaq
                                 1-661  "	7	use_ind
                                 1-662  "	8	start_subscript
                                 1-663  "	9	next_subscript
                                 1-664  "	10	finish_subscript
                                 1-665  "	11	subscript_error
                                 1-666  "	12	s_func_finish
                                 1-667  "	13	end_unit
                                 1-668  "	14	stat
                                 1-669  "	15	check_parameters
                                 1-670  "	16	check_arg_list
                                 1-671  "	17	store_arg_addrs
                                 1-672  "	18	gen_itp_list
                                 1-673  "	19	make_descriptors
                                 1-674  "	20	set_runtime_block_loc
                                 1-675  "	21	optimized_subscript
                                 1-676  "	22	sub_index
                                 1-677  "	23	discard_state
                                 1-678  "	24	push_output
                                 1-679  "	25	bump_args
                                 1-680  "	26	drop_args
                                 1-681  "	27	push_operand_count
                                 1-682  "	28	skip_data
                                 1-683  "	29	set_rounded
                                 1-684  "	30	load_xreg
                                 1-685  "	31	load_preg
                                 1-686  "	32	drop_all_counts
                                 1-687  "	33	ind_to_a
                                 1-688  "	34	assign_index
                                 1-689  "	35	compare_index
                                 1-690  "	36	test_index
                                 1-691  "	37	increment_index
                                 1-692  "	38	decrement_index
                                 1-693  "	39	make_substring
                                 1-694  "	40	refresh_regs_if_next_is_jump
                                 1-695  "	41	note_eligible_ind_var_use
                                 1-696  "	42	free_descriptors
                                 1-697  "	43	force_ql
                                 1-698  "	44	int_to_char1
                                 1-699  "	45	char1_to_int
                                 1-700  "	46	continue_cat
                                 1-701  "	47	finish_cat
                                 1-702  "	48	set_needs_descriptors
                                 1-703  "	49	desc_ptr_in_pr3
                                 1-704  "	50	arg_ptr_in_pr1
                                 1-705  "	52	emit_cleanup_args
                                 1-706  "	53	emit_storage_args
                                 1-707  "	54	emit_profile_entry
                                 1-708  "	55	force_even
                                 1-709  "	56	emit_entry_defs
                                 1-710  "	57	rhs_fld
                                 1-711  "	58	lhs_fld
                                 1-712  
                                 1-713  "	SIMPLE LANGUAGE MACROS
                                 1-714  "
                                 1-715  	def_simple push_label,1
                                 1-716  	def_simple push_rel_constant,2
                                 1-717  	def_simple s_return,3
                                 1-718  	def_simple free_regs,4
                                 1-719  	def_simple reset_regs,5		" <NON-OPT ONLY>
                                 1-720  	def_simple reset_eaq,6
                                 1-721  	def_simple use_ind,7
                                 1-722  	def_simple start_subscript,8		" <NON-OPT ONLY>
                                 1-723  	def_simple next_subscript,9		" <NON-OPT ONLY>
                                 1-724  	def_simple finish_subscript,10	" <NON-OPT ONLY>
                                 1-725  	def_simple subscript_error,11		" <NON-OPT ONLY>
                                 1-726  	def_simple s_func_finish,12		" <NON-OPT ONLY>
                                 1-727  	def_simple end_unit,13
                                 1-728  	def_simple stat,14
                                 1-729  	def_simple check_parameters,15
                                 1-730  	def_simple check_arg_list,16
                                 1-731  	def_simple store_arg_addrs,17
                                 1-732  	def_simple gen_itp_list,18
                                 1-733  	def_simple make_descriptors,19
                                 1-734  	def_simple set_runtime_block_loc,20
                                 1-735  	def_simple optimized_subscript,21	" <OPT ONLY>
                                 1-736  	def_simple sub_index,22		" <OPT ONLY>
                                 1-737  	def_simple discard_state,23		" <OPT ONLY>
                                 1-738  	def_simple push_output,24		" <OPT ONLY>
                                 1-739  	def_simple bump_args,25		" <OPT ONLY>
                                 1-740  	def_simple drop_args,26		" <OPT ONLY>
                                 1-741  	def_simple push_operand_count,27	" <OPT ONLY>
                                 1-742  	def_simple skip_data,28		" <NON-OPT ONLY>
                                 1-743  	def_simple set_rounded,29		" <OPT ONLY>
                                 1-744  	def_simple load_xreg,30		" <OPT ONLY>
                                 1-745  	def_simple load_preg,31		" <OPT ONLY>
                                 1-746  	def_simple drop_all_counts,32		" <OPT ONLY>
                                 1-747  	def_simple ind_to_a,33		" <OPT ONLY>
                                 1-748  	def_simple assign_index,34		" <OPT ONLY>
                                 1-749  	def_simple compare_index,35		" <OPT ONLY>
                                 1-750  	def_simple test_index,36		" <OPT ONLY>
                                 1-751  	def_simple increment_index,37		" <OPT ONLY>
                                 1-752  	def_simple decrement_index,38		" <OPT ONLY>
                                 1-753  	def_simple make_substring,39		" <NON-OPT ONLY>
                                 1-754  	def_simple refresh_regs_if_next_is_jump,40 " <OPT ONLY>
                                 1-755  	def_simple note_eligible_ind_var_use,41	" <OPT ONLY>
                                 1-756  	def_simple free_descriptors,42
                                 1-757  	def_simple force_ql,43		" <OPT ONLY>
                                 1-758  	def_simple int_to_char1,44
                                 1-759  	def_simple char1_to_int,45
                                 1-760  	def_simple continue_cat,46
                                 1-761  	def_simple finish_cat,47
                                 1-762  	def_simple set_needs_descriptors,48
                                 1-763  	def_simple desc_ptr_in_pr3,49
                                 1-764  	def_simple arg_ptr_in_pr1,50
                                 1-765  	def_simple emit_cleanup_args,52
                                 1-766  	def_simple emit_storage_args,53
                                 1-767  	def_simple emit_profile_entry,54
                                 1-768  	def_simple force_even,55
                                 1-769  	def_simple emit_entry_defs,56
                                 1-770  	def_simple rhs_fld,57
                                 1-771  	def_simple lhs_fld,58
                                 1-772  "
                                 1-773  " END   fort_macros.incl.alm
                                   171  	include		fort_equs
                                   2-1  " BEGIN fort_equs.incl.alm
                                   2-2  "
                                   2-3  " Written: June 1976, R. A. Barnes
                                   2-4  "
                                   2-5  " Modified:
                                   2-6  "	22 June 84, MM - Install typeless functions support.
                                   2-7  "	28 Mar 84, HH - Install HFP support.
                                   2-8  "	 8 November 1982,  TO - pl1_operators_ special addition 'VLA_words_per_seg'.
                                   2-9  "	21 September 1982, TO - pl1_operators_ addition 'fort_storage'.
                                  2-10  "	 1 September 1982, TO - pl1_operators_ additions 'fort_return_mac',
                                  2-11  "		'fort_cleanup'.
                                  2-12  "	12 May 1982, HH - Add mpy_overflow_check.
                                  2-13  "	 5 May 1982, TO - Add shorten_stack.
                                  2-14  "	24 October 1980, CRD - add symbols for new operators needed by
                                  2-15  "		Fortran 77 intrinsics.
                                  2-16  "	24 September 1980, CRD - change order of base registers in making pr1
                                  2-17  "		part of the register pool.
                                  2-18  "	4 March 1980, CRD - add equal_lengths (for emit_eis macro).
                                  2-19  "	23 February 1980 RAB - add almost_ones and for_divide
                                  2-20  "	14 December 1979, CRD - add ext_entry_desc operator offset.
                                  2-21  "	30 November 1979, RAB - add j_le_s, j_g_s indicator substates for
                                  2-22  "		register optimizer.  Also, change xq substate to ia, and
                                  2-23  "		add some comments.
                                  2-24  "	9 August 1979, CRD - add new operator fort_dmod.
                                  2-25  "	23 July 1979, CRD - add if_bit for def_simple_cond, etc. macros
                                  2-26  "	9 July 1979 CRD - add new operator fortran_end.
                                  2-27  "	4 April 1976 DSL - add new bifs tan, dtan, asin, dasin, acos, dacos.
                                  2-28  "
                        040000    2-29  	equ	opf,16384		operand factor
                        040000    2-30  	equ	arg1,1*opf
                        100000    2-31  	equ	arg2,2*opf
                        140000    2-32  	equ	arg3,3*opf
                        200000    2-33  	equ	arg4,4*opf
                        240000    2-34  	equ	arg5,5*opf
                        300000    2-35  	equ	arg6,6*opf
                        340000    2-36  	equ	arg7,7*opf
                                  2-37  "
                        000000    2-38  	equ	opv,0*opf
                                  2-39  "
                 777777 740000    2-40  	equ	op1,-1*opf
                 777777 700000    2-41  	equ	op2,-2*opf
                 777777 640000    2-42  	equ	op3,-3*opf
                 777777 600000    2-43  	equ	op4,-4*opf
                 777777 540000    2-44  	equ	op5,-5*opf
                 777777 500000    2-45  	equ	op6,-6*opf
                 777777 440000    2-46  	equ	op7,-7*opf
                                  2-47  "
                        000200    2-48  	equ	inhibit,128	this bit necessary for all macros
                                  2-49  "
                        000400    2-50  	equ	if_bit,256	used to differentiate if/unless
                                  2-51  "
                        400000    2-52  	bool	int,400000
                        200000    2-53  	bool	real,200000
                        100000    2-54  	bool	dp,100000
                        040000    2-55  	bool	cmpx,40000
                        020000    2-56  	bool	logical,20000
                        010000    2-57  	bool	char,10000
                        004000    2-58  	bool	typeless,4000
                        002000    2-59  	bool	label,2000
                                  2-60  "
                        000400    2-61  	equ	intn,1*256
                        001000    2-62  	equ	realn,2*256
                        001400    2-63  	equ	dpn,3*256
                        002000    2-64  	equ	cmpxn,4*256
                        002400    2-65  	equ	logicaln,5*256
                        003000    2-66  	equ	charn,6*256
                        003400    2-67  	equ	typelessn,7*256
                        004000    2-68  	equ	labeln,8*256
                                  2-69  "
                 777777 777777    2-70  	equ	var,-1
                                  2-71  "
                        000000    2-72  	equ	empty,0*256
                        000400    2-73  	equ	q,1*256
                        001000    2-74  	equ	a,2*256
                        001400    2-75  	equ	aq,3*256
                        002000    2-76  	equ	eaq,4*256
                        002400    2-77  	equ	deaq,5*256
                        003000    2-78  	equ	ieaq,6*256
                        003400    2-79  	equ	iq,7*256
                        004000    2-80  	equ	ia,8*256
                        004400    2-81  	equ	tq,9*256
                        005000    2-82  	equ	ind,10*256
                        005400    2-83  	equ	tze,11*256
                        006000    2-84  	equ	tnz,12*256
                        006400    2-85  	equ	tmi,13*256
                        007000    2-86  	equ	tpl,14*256
                        007400    2-87  	equ	tmoz,15*256
                        010000    2-88  	equ	tpnz,16*256
                        010400    2-89  	equ	tnc,17*256
                        011000    2-90  	equ	trc,18*256
                        011400    2-91  	equ	j_le_s,19*256
                        012000    2-92  	equ	j_g_s,20*256
                                  2-93  "
                        400000    2-94  	bool	variable,400000
                        200000    2-95  	bool	constant,200000
                        100000    2-96  	bool	array_ref,100000
                        040000    2-97  	bool	temp,40000
                        020000    2-98  	bool	count,20000
                        010000    2-99  	bool	rel_constant,10000
                        004000   2-100  	bool	bif,4000
                        002000   2-101  	bool	statement_function,2000
                        001000   2-102  	bool	external,1000
                        000400   2-103  	bool	entry,400
                        000200   2-104  	bool	dummy,200
                        000100   2-105  	bool	error,100
                        000040   2-106  	bool	substr_ref,40
                                 2-107  "
                        400000   2-108  	bool	x0,400000
                        200000   2-109  	bool	x1,200000
                        100000   2-110  	bool	x2,100000
                        040000   2-111  	bool	x3,40000
                        020000   2-112  	bool	x4,20000
                        010000   2-113  	bool	x5,10000
                        004000   2-114  	bool	x6,4000
                        002000   2-115  	bool	x7,2000
                        001000   2-116  	bool	pr4,1000
                        000400   2-117  	bool	pr1,400
                        000200   2-118  	bool	pr2,200
                        000100   2-119  	bool	pr3,100
                        000040   2-120  	bool	pr5,40
                        000020   2-121  	bool	pr7,20
                        776000   2-122  	bool	indices,x0+x1+x2+x3+x4+x5+x6+x7
                        001760   2-123  	bool	bases,pr1+pr4+pr2+pr3+pr5+pr7
                        777760   2-124  	bool	all,indices+bases
                                 2-125  "
                        000001   2-126  	equ	pr4n,1
                        000002   2-127  	equ	pr1n,2
                        000003   2-128  	equ	pr2n,3
                        000004   2-129  	equ	pr3n,4
                        000005   2-130  	equ	pr5n,5
                        000006   2-131  	equ	pr7n,6
                                 2-132  
                        000001   2-133  	equ	equal_lengths,1
                        000001   2-134  	equ	protect_indicators,1
                        000002   2-135  	equ	discard,2
                        040000   2-136  	bool	inst_word,040000
                                 2-137  "
                        000400   2-138  	equ	for_divide,256
                                 2-139  "
                                 2-140  "	builtin operands
                                 2-141  "
                        000000   2-142  	equ	zero,0		"integer constant zero
                        000001   2-143  	equ	one,1		"integer constant one
                        000002   2-144  	equ	ps,2		"symbol for Fortran I/O arglist
                        000003   2-145  	equ	auto_template,3	"init template for automatic storage
                        000004   2-146  	equ	auto_overlay,4	"overlay of automatic storage
                        000005   2-147  	equ	null_ptr,5	"constant null ITS pointer
                        000006   2-148  	equ	null,6		"null operand
                        000007   2-149  	equ	two,7		"integer constant two
                        000010   2-150  	equ	entry_info,8	"place to store quick proc info
                        000011   2-151  	equ	star_symbol,9	"<*symbol>|0
                        000012   2-152  	equ	ps_area_ptr,10	"symbol for ps.buffer_p
                        000013   2-153  	equ	desc_overlay,11	"symbol for accessing a descriptor
                                 2-154  "
                        000052   2-155  	equ		ps_ptr,42
                        000006   2-156  	equ		format_slot,6
                        000014   2-157  	equ		end_label_slot,12
                        000012   2-158  	equ		error_label_slot,10
                        000034   2-159  	equ		margin_slot,28
                        000011   2-160  	equ		record_number_slot,9
                        000020   2-161  	equ		string_slot,16
                        000025   2-162  	equ		string_length_slot,21
                        000036   2-163  	equ		file_name_slot,30
                        000040   2-164  	equ		file_type_slot,32
                        000022   2-165  	equ		namelist_slot,18
                        000056   2-166  	equ		iostat_slot,46
                        000033   2-167  	equ		buffer_size_slot,27
                                 2-168  
                        000042   2-169  	equ		descriptor_ptr,34
                        000056   2-170  	equ		double_temp,46
                                 2-171  
                        000050   2-172  	equ		temp_pt,40
                        000070   2-173  	equ		complex,56
                                 2-174  
                        000551   2-175  	equ		op_base,361	=o733-o162=o551	000
                                 2-176  
                        000110   2-177  	equ		all_ones,op_base-289		072
                        000440   2-178  	equ		blanks,op_base-73			288
                                 2-179  
                        001045   2-180  	equ		ext_entry,op_base+188		549
                        001046   2-181  	equ		ext_entry_desc,op_base+189		550
                        000631   2-182  	equ		return_op,op_base+48
                        001447   2-183  	equ		fortran_end,op_base+446
                        001450   2-184  	equ		fort_dmod,op_base+447
                        001375   2-185  	equ		signal_stringrange,op_base+404
                        000465   2-186  	equ		integer_to_real,op_base-52		309
                        000465   2-187  	equ		integer_to_double,op_base-52		309
                        000654   2-188  	equ		real_to_integer,op_base+67		428
                        000654   2-189  	equ		double_to_integer,op_base+67		428
                        000773   2-190  	equ		complex_multiply,op_base+146		507
                        000775   2-191  	equ		complex_divide,op_base+148		509
                        000477   2-192  	equ		r_g_s,op_base-42			319
                        000532   2-193  	equ		r_le_s,op_base-15			346
                        001351   2-194  	equ		int_p_int,op_base+384		745
                        001350   2-195  	equ		real_p_int,op_base+383		744
                        001347   2-196  	equ		real_p_real,op_base+382		743
                        001346   2-197  	equ		dbl_p_int,op_base+381		742
                        001344   2-198  	equ		dbl_p_real,op_base+379		740
                        001345   2-199  	equ		dbl_p_dbl,op_base+380		741
                        001416   2-200  	equ		cmpx_p_cmpx,op_base+421		782
                        001246   2-201  	equ		ftn_read,op_base+317		678
                        001247   2-202  	equ		ftn_write,op_base+318		679
                        001251   2-203  	equ		ftn_scalar_xmit,op_base+320		681
                        001252   2-204  	equ		ftn_array_xmit,op_base+321		682
                        001250   2-205  	equ		ftn_manip,op_base+319		680
                        001253   2-206  	equ		ftn_terminate,op_base+322		683
                        001406   2-207  	equ		cabs_,op_base+413			774
                        001312   2-208  	equ		log_,op_base+353			714
                        001333   2-209  	equ		dlog_,op_base+370			731
                        001411   2-210  	equ		clog_,op_base+416			777
                        001313   2-211  	equ		alog10_,op_base+354			715
                        001334   2-212  	equ		dlog10_,op_base+371			732
                        001307   2-213  	equ		atan_,op_base+350			711
                        001330   2-214  	equ		datan_,op_base+367			728
                        001336   2-215  	equ		atan2_,op_base+373			734
                        001340   2-216  	equ		datan2_,op_base+375			736
                        001277   2-217  	equ		cos_,op_base+342			703
                        001320   2-218  	equ		dcos_,op_base+359			720
                        001407   2-219  	equ		ccos_,op_base+414			775
                        001314   2-220  	equ		exp_,op_base+355			716
                        001335   2-221  	equ		dexp_,op_base+372			733
                        001410   2-222  	equ		cexp_,op_base+415			776
                        000767   2-223  	equ		fort_modfl,op_base+142		503
                        001415   2-224  	equ		dmod_,op_base+420			781
                        000666   2-225  	equ		sign_fx,op_base+77			438
                        000667   2-226  	equ		sign_fl,op_base+78			439
                        001275   2-227  	equ		sin_,op_base+340			701
                        001316   2-228  	equ		dsin_,op_base+357			718
                        001412   2-229  	equ		csin_,op_base+417			778
                        001274   2-230  	equ		sqrt_,op_base+339			700
                        001315   2-231  	equ		dsqrt_,op_base+356			717
                        001413   2-232  	equ		csqrt_,op_base+418			780
                        001414   2-233  	equ		tanh_,op_base+419			781
                        001301   2-234  	equ		tan_,op_base+344			705
                        001322   2-235  	equ		dtan_,op_base+361			722
                        001303   2-236  	equ		asin_,op_base+346			707
                        001324   2-237  	equ		dasin_,op_base+363			724
                        001305   2-238  	equ		acos_,op_base+348			709
                        001326   2-239  	equ		dacos_,op_base+365			726
                        001124   2-240  	equ		trunc_fl,op_base+235		596
                        001417   2-241  	equ		get_math_entry,op_base+422		783
                        001420   2-242  	equ		fortran_pause,op_base+423		784
                        001421   2-243  	equ		fortran_stop,op_base+424		785
                        001422   2-244  	equ		fortran_chain,op_base+425		786
                        000623   2-245  	equ		call_ext_out,op_base+42
                        000622   2-246  	equ		call_ext_out_desc,op_base+41
                        000617   2-247  	equ		call_var,op_base+38
                        000616   2-248  	equ		call_var_desc,op_base+37
                        001437   2-249  	equ		ftn_open_element,op_base+438		799
                        001440   2-250  	equ		ftn_get_area_ptr,op_base+439		800
                        001227   2-251  	equ		set_cs_eis,op_base+302		663
                        001231   2-252  	equ		index_cs_eis,op_base+304		665
                        001455   2-253  	equ		save_stack_quick,op_base+452		813
                        001456   2-254  	equ		restore_stack_quick,op_base+453	814
                        001014   2-255  	equ		shorten_stack,op_base+163		524
                        001457   2-256  	equ		dtanh_,op_base+454			815
                        001460   2-257  	equ		sinh_,op_base+455			816
                        001461   2-258  	equ		dsinh_,op_base+456			817
                        001462   2-259  	equ		cosh_,op_base+457			818
                        001463   2-260  	equ		dcosh_,op_base+458			819
                        001464   2-261  	equ		nearest_whole_number,op_base+459	820
                        001465   2-262  	equ		nearest_integer,op_base+460		821
                        001466   2-263  	equ		ftn_inquire_element,op_base+461	822
                        001467   2-264  	equ		mpy_overflow_check,op_base+462	823
                        001470   2-265  	equ		fort_return_mac,op_base+463		824
                        001471   2-266  	equ		fort_cleanup,op_base+464		825
                        001472   2-267  	equ		fort_storage,op_base+465		826
                        001473   2-268  	equ		enter_BFP_mode,op_base+466		827
                        001474   2-269  	equ		enter_HFP_mode,op_base+467		828
                                 2-270  
                        000474   2-271  	bool	r_l_a,474
                        000503   2-272  	bool	r_g_a,503
                        000512   2-273  	bool	r_e_as,512
                        000515   2-274  	bool	r_ne_as,515
                        000520   2-275  	bool	r_le_a,520
                        000527   2-276  	bool	r_ge_a,527
                        000507   2-277  	bool	r_l_s,507
                        000524   2-278  	bool	r_ge_s,524
                        000665   2-279  	equ	bound_ck_signal,op_base+76
                        000242   2-280  	bool	almost_one,242
                 777777 777615   2-281  	equ	VLA_words_per_seg,op_base-476
                                 2-282  "
                                 2-283  "	Symbols for upper 18 bits of some common hfp values whose lower
                                 2-284  "	18 bits are zeroes (i.e. values suitable for 'du' modification).
                                 2-285  "
                        000400   2-286  	bool	P0.5H,000400	= +0.5h,du
                        002040   2-287  	bool	P1.0H,002040	= +1.0h,du
                        002100   2-288  	bool	P2.0H,002100	= +2.0h,du
                                 2-289  "
                                 2-290  " END   fort_equs.incl.alm
                                   172  
                                   173  	include		stack_header
                                   3-1  "	BEGIN INCLUDE FILE ... stack_header.incl.alm  3/72  Bill Silver
                                   3-2  "
                                   3-3  "	modified 7/76 by M. Weaver for *system links and more system use of areas
                                   3-4  "	modified 3/77 by M. Weaver  to add rnt_ptr
                                   3-5  "	modified 7/77 by S. Webber to add run_unit_depth and assign_linkage_ptr
                                   3-6  "	modified 6/83 by J. Ives to add trace_frames and in_trace.
                                   3-7  
                                   3-8  " HISTORY COMMENTS:
                                   3-9  "  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
                                  3-10  "     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
                                  3-11  "     added the heap_header_ptr definition
                                  3-12  "  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
                                  3-13  "     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
                                  3-14  "     Modified to support control point management.  These changes were
                                  3-15  "     actually made in February 1985 by G. Palter.
                                  3-16  "  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
                                  3-17  "     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
                                  3-18  "     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
                                  3-19  "     bit pad after cur_lot_size for the cpm_enabled. This was done to save
                                  3-20  "     some space int the stack header and change the cpd_ptr unal to
                                  3-21  "     cpm_data_ptr (ITS pair).
                                  3-22  "                                                      END HISTORY COMMENTS
                                  3-23  
                        000004    3-24  	equ	stack_header.cpm_data_ptr,4		ptr to control point for this stack
                        000006    3-25  	equ	stack_header.combined_stat_ptr,6	ptr to separate static area
                                  3-26  
                        000010    3-27  	equ	stack_header.clr_ptr,8		ptr to area containing linkage sections
                        000012    3-28  	equ	stack_header.max_lot_size,10		number of words allowed in lot (DU)
                        000012    3-29  	equ	stack_header.main_proc_invoked,10	nonzero if main proc was invoked in run unit (DL)
                        000012    3-30  	equ	stack_header.run_unit_depth,10	number of active run units stacked (DL)
                        000013    3-31  	equ	stack_header.cur_lot_size,11		DU number of words (entries) in lot
                        000013    3-32            equ	stack_header.cpm_enabled,11		DL  non-zero if control point management is enabled
                        000014    3-33  	equ	stack_header.system_free_ptr,12	ptr to system storage area
                        000016    3-34  	equ	stack_header.user_free_ptr,14		ptr to user storage area
                                  3-35  
                        000020    3-36  	equ	stack_header.parent_ptr,16		ptr to parent stack or null
                        000022    3-37  	equ	stack_header.stack_begin_ptr,18	ptr to first stack frame
                        000024    3-38  	equ	stack_header.stack_end_ptr,20		ptr to next useable stack frame
                        000026    3-39  	equ	stack_header.lot_ptr,22		ptr to the lot for the current ring
                                  3-40  
                        000030    3-41  	equ	stack_header.signal_ptr,24		ptr to signal proc for current ring
                        000032    3-42  	equ	stack_header.bar_mode_sp,26		value of sp before entering bar mode
                        000034    3-43  	equ	stack_header.pl1_operators_ptr,28	ptr: pl1_operators_$operator_table
                        000036    3-44  	equ	stack_header.call_op_ptr,30		ptr to standard call operator
                                  3-45  
                        000040    3-46  	equ	stack_header.push_op_ptr,32		ptr to standard push operator
                        000042    3-47  	equ	stack_header.return_op_ptr,34		ptr to standard return operator
                        000044    3-48  	equ	stack_header.ret_no_pop_op_ptr,36	ptr: stand. return/ no pop operator
                        000046    3-49  	equ	stack_header.entry_op_ptr,38		ptr to standard entry operator
                                  3-50  
                        000050    3-51  	equ	stack_header.trans_op_tv_ptr,40	ptr to table of translator operator ptrs
                        000052    3-52  	equ	stack_header.isot_ptr,42		pointer to ISOT
                        000054    3-53  	equ	stack_header.sct_ptr,44		pointer to System Condition Table
                        000056    3-54  	equ	stack_header.unwinder_ptr,46		pointer to unwinder for current ring
                                  3-55  
                        000060    3-56  	equ	stack_header.sys_link_info_ptr,48	ptr to *system link name table
                        000062    3-57  	equ	stack_header.rnt_ptr,50		ptr to reference name table
                        000064    3-58  	equ	stack_header.ect_ptr,52		ptr to event channel table
                        000066    3-59  	equ	stack_header.assign_linkage_ptr,54	ptr to area for hcs_$assign_linkage calls
                        000070    3-60  	equ	stack_header.heap_header_ptr,56	ptr to heap header.
                        000072    3-61  	equ	stack_header.trace_frames,58		stack of trace_catch_ frames
                        000073    3-62  	equ	stach_header.trace_top_ptr,59		trace pointer
                        000074    3-63  	equ	stack_header.in_trace,60		trace antirecurse bit
                        000100    3-64  	equ	stack_header_end,64			length of stack header
                                  3-65  
                                  3-66  
                                  3-67  
                                  3-68  
                        000000    3-69  	equ	trace_frames.count,0		number of trace frames on stack
                        000001    3-70  	equ	trace_frames.top_ptr,1		packed pointer to top one
                                  3-71  
                                  3-72  "	The  following constant is an offset within the  pl1  operators table.
                                  3-73  "	It  references a  transfer vector table.
                                  3-74  
                        000551    3-75  	bool	tv_offset,551
                                  3-76  
                                  3-77  
                                  3-78  "	The  following constants are offsets within this transfer vector table.
                                  3-79  
                        001170    3-80  	equ	call_offset,tv_offset+271
                        001171    3-81  	equ	push_offset,tv_offset+272
                        001172    3-82  	equ	return_offset,tv_offset+273
                        001173    3-83  	equ	return_no_pop_offset,tv_offset+274
                        001174    3-84  	equ	entry_offset,tv_offset+275
                                  3-85  
                                  3-86  
                                  3-87  " 	END INCLUDE FILE stack_header.incl.alm
                                   174  	include		stack_frame
                                   4-1  "
                                   4-2  "	BEGIN INCLUDE FILE ... stack_frame.incl.alm   6/72 RBS
                                   4-3  "
                                   4-4  " Modified: 16 Dec 1977, D. Levin - to add fio_ps_ptr
                                   4-5  " Modified:  3 Feb 1978, P. Krupp - to add run_unit_manager_bit & main_proc_bit
                                   4-6  " Modified: 21 March 1978, D. Levin - change fio_ps_ptr to support_ptr
                                   4-7  "
                        000020     4-8  	equ	stack_frame.prev_sp,16
                        000020     4-9  	equ	stack_frame.condition_word,16
                        000022    4-10  	equ	stack_frame.next_sp,18
                        000022    4-11  	equ	stack_frame.signaller_word,18
                        000024    4-12  	equ	stack_frame.return_ptr,20
                        000026    4-13  	equ	stack_frame.entry_ptr,22
                        000030    4-14  	equ	stack_frame.operator_ptr,24
                        000030    4-15  	equ	stack_frame.lp_ptr,24
                        000032    4-16  	equ	stack_frame.arg_ptr,26
                        000034    4-17  	equ	stack_frame.static_ptr,28
                        000035    4-18  	equ	stack_frame.support_ptr,29	" only used by fortran I/O
                        000036    4-19  	equ	stack_frame.on_unit_rel_ptrs,30
                        000037    4-20  	equ	stack_frame.operator_ret_ptr,31
                        000037    4-21  	equ	stack_frame.translator_id,31
                        000040    4-22  	equ	stack_frame.regs,32
                        000060    4-23  	equ	stack_frame.min_length,48
                        000020    4-24  	equ	stack_frame.flag_word,16
                        020000    4-25  	bool	stack_frame.main_proc_bit,020000	(DL)
                        010000    4-26  	bool	stack_frame.run_unit_manager,010000	(DL)
                        004000    4-27  	bool	stack_frame.signal_bit,004000		(DL)
                        002000    4-28  	bool	stack_frame.crawl_out_bit,002000	(DL)
                        001000    4-29  	bool	stack_frame.signaller_bit,001000	(DL)
                        000400    4-30  	bool	stack_frame.link_trap_bit,000400	(DL)
                        000200    4-31  	bool	stack_frame.support_bit,000200	(DL)
                        000100    4-32  	bool	stack_frame.condition_bit,000100	(DL)
                                  4-33  
                                  4-34  "
                                  4-35  "	END INCLUDE FILE  ... stack_frame.incl.alm
                                  4-36  "
                                   175  
    012661                         176  	name		fort_opt_macros_
                                   177  
                        000000     178  	segdef		operator_table
                        000155     179  	segdef		single_inst
                        000413     180  	segdef		interpreter_macros
                        000450     181  	segdef		first_scan
                        000452     182  	segdef		abort_list
                        000455     183  	segdef		error_macro
                                   184  	use		.text.
                                   185  
                                   186  	include	fort_operator_table
                                   5-1  " BEGIN INCLUDE FILE fort_operator_table.incl.alm
                                   5-2  "
                                   5-3  " Extracted from fort_cg_macros_.alm and fort_opt_macros_.alm
                                   5-4  " on 7 February 1980 by C R Davis
                                   5-5  "
                                   5-6  " Modified:
                                   5-7  "	22 Jun 84, MM - Install typeless functions support.
                                   5-8  "	17 Jun 83, HH - 383: Add 'process_param_list'.
                                   5-9  "	12 Jan 83, HH - Add 'form_VLA_packed_ptr'.
                                  5-10  "	28 October 1981, C R Davis - add inquire.
                                  5-11  "	20 October 1981, C R Davis - add (read write)_internal_file.
                                  5-12  "	11 May 1981, C R Davis - add equiv, not_equiv.
                                  5-13  "	8 December 1980, C R Davis - add block_if, else_if, and else.
                                  5-14  "
                                  5-15  "
    000000                        5-16  operator_table:
    000000  0a   000456 000000    5-17  	zero		assign			1
    000001  0a   000713 000000    5-18  	zero		add			2
    000002  0a   001077 000000    5-19  	zero		sub			3
    000003  0a   001451 000000    5-20  	zero		mult			4
    000004  0a   001716 000000    5-21  	zero		div			5
    000005  0a   002422 000000    5-22  	zero		exponentiation		6
    000006  0a   002676 000000    5-23  	zero		negate			7
    000007  0a   006421 000000    5-24  	zero		less			8
    000010  0a   006635 000000    5-25  	zero		less_or_equal		9
    000011  0a   007051 000000    5-26  	zero		equal			10
    000012  0a   007237 000000    5-27  	zero		not_equal			11
    000013  0a   007425 000000    5-28  	zero		greater_or_equal		12
    000014  0a   007641 000000    5-29  	zero		greater			13
    000015  0a   010055 000000    5-30  	zero		or			14
    000016  0a   010070 000000    5-31  	zero		and			15
    000017  0a   010103 000000    5-32  	zero		not			16
    000020  0a   010155 000000    5-33  	zero		jump			17
    000021  0a   012625 000000    5-34  	zero		jump_logical		18
    000022  0a   010317 000000    5-35  	zero		jump_arithmetic		19
    000023  0a   010467 000000    5-36  	zero		jump_computed		20
    000024  0a   010545 000000    5-37  	zero		jump_assigned		21
    000025  0a   010564 000000    5-38  	zero		assign_label		22
    000026  0a   010610 000000    5-39  	zero		read			23
    000027  0a   010625 000000    5-40  	zero		write			24
    000030  0a   010642 000000    5-41  	zero		format			25
    000031  0a   010666 000000    5-42  	zero		end_label			26
    000032  0a   010674 000000    5-43  	zero		error_label		27
    000033  0a   012627 000000    5-44  	zero		xmit_scalar		28
    000034  0a   012631 000000    5-45  	zero		xmit_array		29
    000035  0a   012633 000000    5-46  	zero		xmit_vector		30
    000036  0a   011112 000000    5-47  	zero		endfile			31
    000037  0a   011126 000000    5-48  	zero		rewind			32
    000040  0a   011142 000000    5-49  	zero		backspace			33
    000041  0a   011156 000000    5-50  	zero		margin			34
    000042  0a   011202 000000    5-51  	zero		openfile			35
    000043  0a   011512 000000    5-52  	zero		closefile			36
    000044  0a   011540 000000    5-53  	zero		record_number		37
    000045  0a   011554 000000    5-54  	zero		string			38
    000046  0a   011565 000000    5-55  	zero		string_length		39
    000047  0a   011621 000000    5-56  	zero		terminate			40
    000050  0a   011626 000000    5-57  	zero		return			41
    000051  0a   011637 000000    5-58  	zero		pause			42
    000052  0a   011653 000000    5-59  	zero		stop			43
    000053  0a   012641 000000    5-60  	zero		item			44
    000054  0a   012643 000000    5-61  	zero		exit			45
    000055  0a   012645 000000    5-62  	zero		eol			46
    000056  0a   012623 000000    5-63  	zero		do			47
    000057  0a   002745 000000    5-64  	zero		builtin			48
    000060  0a   012637 000000    5-65  	zero		sf			49
    000061  0a   012635 000000    5-66  	zero		sf_def			50
    000062  0a   012647 000000    5-67  	zero		subscript			51
    000063  0a   011667 000000    5-68  	zero		func_ref			52
    000064  0a   011735 000000    5-69  	zero		block_data		53
    000065  0a   012070 000000    5-70  	zero		increment_polish		54
    000066  0a   011706 000000    5-71  	zero		main			55
    000067  0a   011725 000000    5-72  	zero		func			56
    000070  0a   011715 000000    5-73  	zero		subr			57
    000071  0a   012076 000000    5-74  	zero		stat			58
    000072  0a   012073 000000    5-75  	zero		label_operator		59
    000073  0a   012102 000000    5-76  	zero		call			60
    000074  0a   012340 000000    5-77  	zero		chain			61
    000075  0a   012414 000000    5-78  	zero		endunit			62
    000076  0a   012417 000000    5-79  	zero		non_executable		63
    000077  0a   012421 000000    5-80  	zero		no_op			64
    000100  0a   012423 000000    5-81  	zero		form_VLA_packed_ptr		65
    000101  0a   012432 000000    5-82  	zero		opt_subscript		66
    000102  0a   012435 000000    5-83  	zero		left_shift		67
    000103  0a   012441 000000    5-84  	zero		right_shift		68
    000104  0a   012445 000000    5-85  	zero		store_zero		69
    000105  0a   012452 000000    5-86  	zero		storage_add		70
    000106  0a   012464 000000    5-87  	zero		storage_sub		71
    000107  0a   012472 000000    5-88  	zero		neg_storage_add		72
    000110  0a   012504 000000    5-89  	zero		storage_add_one		73
    000111  0a   012517 000000    5-90  	zero		namelist			74
    000112  0a   011243 000000    5-91  	zero		open			75
    000113  0a   011243 000000    5-92  	zero		close			76
    000114  0a   011525 000000    5-93  	zero		iostat			77
    000115  0a   002322 000000    5-94  	zero		convert_to_int		78
    000116  0a   002336 000000    5-95  	zero		convert_to_real		79
    000117  0a   002353 000000    5-96  	zero		convert_to_dp		80
    000120  0a   002370 000000    5-97  	zero		convert_to_cmpx		81
    000121  0a   010702 000000    5-98  	zero		read_scalar		82
    000122  0a   010744 000000    5-99  	zero		read_array		83
    000123  0a   011026 000000   5-100  	zero		read_vector		84
    000124  0a   010706 000000   5-101  	zero		write_scalar		85
    000125  0a   010750 000000   5-102  	zero		write_array		86
    000126  0a   011033 000000   5-103  	zero		write_vector		87
    000127  0a   010256 000000   5-104  	zero		jump_true			88
    000130  0a   010164 000000   5-105  	zero		jump_false		89
    000131  0a   012525 000000   5-106  	zero		sub_index			90
    000132  0a   012533 000000   5-107  	zero		loop_end			91
    000133  0a   012517 000000   5-108  	zero		read_namelist		92
    000134  0a   012517 000000   5-109  	zero		write_namelist		93
    000135  0a   011554 000000   5-110  	zero		decode_string		94
    000136  0a   011551 000000   5-111  	zero		encode_string		95
    000137  0a   012536 000000   5-112  	zero		cat			96
    000140  0a   012651 000000   5-113  	zero		substr			97
    000141  0a   012615 000000   5-114  	zero		load_xreg			98
    000142  0a   012620 000000   5-115  	zero		load_preg			99
    000143  0a   012653 000000   5-116  	zero		block_if			100
    000144  0a   012655 000000   5-117  	zero		else_if			101
    000145  0a   012657 000000   5-118  	zero		else			102
    000146  0a   010133 000000   5-119  	zero		equiv			103
    000147  0a   010143 000000   5-120  	zero		not_equiv			104
    000150  0a   011575 000000   5-121  	zero		read_internal_file		105
    000151  0a   011572 000000   5-122  	zero		write_internal_file		106
    000152  0a   011361 000000   5-123  	zero		inquire			107
    000153  0a   012053 000000   5-124  	zero		process_param_list		108
    000154  0a   012601 000000   5-125  	zero		lhs_fld			109
                                 5-126  
                                 5-127  "
                                 5-128  "	NOTE: If you add entries to this table, you must change
                                 5-129  "	both fort_cg_macros_ and fort_opt_macros_!!
                                 5-130  "
                                 5-131  " END INCLUDE FILE fort_operator_table.incl.alm
                                   187  
                                   188  	include	fort_single_inst
                                   6-1  " BEGIN fort_single_inst.incl.alm
                                   6-2  "
                                   6-3  " Modified: 22 June 1984, M Mabey - Install typeless functions support.
                                   6-4  "	Added: era, erq, ersa, ersq, alr, ana, lrs, qls, lca
                                   6-5  " Modified: 06 Jan 83, HH: Add 'lcq'.
                                   6-6  " Modified:  1 October 1982, T G Oke: add load packed pointers, easp, eawp,
                                   6-7  "	llr, als, div.
                                   6-8  " Modified: 20 September 1982, T G Oke: add store of packed pointers, epaq,
                                   6-9  "	qrl and lrl.
                                  6-10  " Modified: 25 September 1980, C R Davis: exchange pr1 and pr4 instructions.
                                  6-11  " Modified: 18 March 1980, C R Davis: add instruction to load lp.
                                  6-12  " Modified: 28 December 1979, R A Barnes: add nop instruction.
                                  6-13  " Modified: 17 December 1979, C R Davis: added anq, orq, and orsq instructions.
                                  6-14  " Extracted: 30 November 1979 by R. A. Barnes from fort_opt_macros_.alm
                                  6-15  "
    000155                        6-16  single_inst:
    000155  aa   000000 6200 00   6-17  	eax0	0		eax0		1
    000156  aa   000000 6210 00   6-18  	eax1	0		eax1		2
    000157  aa   000000 6220 00   6-19  	eax2	0		eax2		3
    000160  aa   000000 6230 00   6-20  	eax3	0		eax3		4
    000161  aa   000000 6240 00   6-21  	eax4	0		eax4		5
    000162  aa   000000 6250 00   6-22  	eax5	0		eax5		6
    000163  aa   000000 6260 00   6-23  	eax6	0		eax6		7
    000164  aa   000000 6270 00   6-24  	eax7	0		eax7		8
    000165  aa   000000 7200 00   6-25  	lxl0	0		lxl0		9
    000166  aa   000000 7210 00   6-26  	lxl1	0		lxl1		10
    000167  aa   000000 7220 00   6-27  	lxl2	0		lxl2		11
    000170  aa   000000 7230 00   6-28  	lxl3	0		lxl3		12
    000171  aa   000000 7240 00   6-29  	lxl4	0		lxl4		13
    000172  aa   000000 7250 00   6-30  	lxl5	0		lxl5		14
    000173  aa   000000 7260 00   6-31  	lxl6	0		lxl6		15
    000174  aa   000000 7270 00   6-32  	lxl7	0		lxl7		16
    000175  aa   000000 4400 00   6-33  	sxl0	0		sxl0		17
    000176  aa   000000 4410 00   6-34  	sxl1	0		sxl1		18
    000177  aa   000000 4420 00   6-35  	sxl2	0		sxl2		19
    000200  aa   000000 4430 00   6-36  	sxl3	0		sxl3		20
    000201  aa   000000 4440 00   6-37  	sxl4	0		sxl4		21
    000202  aa   000000 4450 00   6-38  	sxl5	0		sxl5		22
    000203  aa   000000 4460 00   6-39  	sxl6	0		sxl6		23
    000204  aa   000000 4470 00   6-40  	sxl7	0		sxl7		24
    000205  aa   000000 3700 00   6-41  	epp4	0		epp4		25
    000206  aa   000000 3514 00   6-42  	epp1	0		epp1		26
    000207  aa   000000 3520 00   6-43  	epp2	0		epp2		27
    000210  aa   000000 3534 00   6-44  	epp3	0		epp3		28
    000211  aa   000000 3714 00   6-45  	epp5	0		epp5		29
    000212  aa   000000 3734 00   6-46  	epp7	0		epp7		30
    000213  aa   000000 2360 00   6-47  	ldq	0		ldq		31
    000214  aa   000000 2350 00   6-48  	lda	0		lda		32
    000215  aa   000000 2370 00   6-49  	ldaq	0		ldaq		33
    000216  aa   000000 4310 00   6-50  	fld	0		ldeaq		34
    000217  aa   000000 4330 00   6-51  	dfld	0		lddeaq		35
    000220  aa   000001 4310 00   6-52  	fld	1		ldieaq		36
    000221  aa   000001 2360 00   6-53  	ldq	1		ldiq		37
    000222  aa   000000 7560 00   6-54  	stq	0		stq		38
    000223  aa   000000 7550 00   6-55  	sta	0		sta		39
    000224  aa   000000 7570 00   6-56  	staq	0		staq		40
    000225  aa   000000 4700 00   6-57  	fstr	0		steaq		41
    000226  aa   000000 4720 00   6-58  	dfstr	0		stdeaq		42
    000227  aa   000001 4700 00   6-59  	fstr	1		stieaq		43
    000230  aa   000001 7560 00   6-60  	stq	1		stiq		44
    000231  aa  0 00512 7001 00   6-61  	tsx0	pr0|r_e_as	r_e_as		45
    000232  aa  0 00515 7001 00   6-62  	tsx0	pr0|r_ne_as	r_ne_as		46
    000233  aa  0 00474 7001 00   6-63  	tsx0	pr0|r_l_a		r_l_a		47
    000234  aa  0 00527 7001 00   6-64  	tsx0	pr0|r_ge_a	r_ge_a		48
    000235  aa  0 00520 7001 00   6-65  	tsx0	pr0|r_le_a	r_le_a		49
    000236  aa  0 00503 7001 00   6-66  	tsx0	pr0|r_g_a		r_g_a		50
    000237  aa  0 00507 7001 00   6-67  	tsx0	pr0|r_l_s		r_l_s		51
    000240  aa  0 00524 7001 00   6-68  	tsx0	pr0|r_ge_s	r_ge_s		52
    000241  aa   000000 0760 00   6-69  	adq	0		adfx1		53
    000242  aa   000000 1760 00   6-70  	sbq	0		sbfx1		54
    000243  aa   000000 4500 00   6-71  	stz	0		stz		55
    000244  aa   000000 0560 00   6-72  	asq	0		asq		56
    000245  aa   000000 6500 00   6-73  	spri4	0		spri4		57
    000246  aa   000000 2514 00   6-74  	spri1	0		spri1		58
    000247  aa   000000 2520 00   6-75  	spri2	0		spri2		59
    000250  aa   000000 2534 00   6-76  	spri3	0		spri3		60
    000251  aa   000000 6514 00   6-77  	spri5	0		spri5		61
    000252  aa   000000 6534 00   6-78  	spri7	0		spri7		62
    000253  aa  0 00000 5005 00   6-79  	a9bd	pr0|0		a9bd		63
    000254  aa   000000 0540 00   6-80  	aos	0		aos		64
    000255  aa   000000 1160 00   6-81  	cmpq	0		cmpq		65
    000256  aa   000000 1150 00   6-82  	cmpa	0		cmpa		66
    000257  aa   000000 1170 00   6-83  	cmpaq	0		cmpaq		67
    000260  aa   000000 5150 00   6-84  	fcmp	0		cmpeaq		68
    000261  aa   000000 5170 00   6-85  	dfcmp	0		cmpdeaq		69
    000262  aa   000001 5150 00   6-86  	fcmp	1		cmpieaq		70
    000263  aa   000001 1160 00   6-87  	cmpq	1		cmpiq		71
    000264  aa   000000 4550 00   6-88  	fst	0		steaq	^rounded	72
    000265  aa   000000 4570 00   6-89  	dfst	0		stdeaq	^rounded	73
    000266  aa   000001 4550 00   6-90  	fst	1		stieaq	^rounded	74
    000267  aa   000000 6340 00   6-91  	ldi	0		load_ind		75
    000270  aa   000000 7540 00   6-92  	sti	0		store_ind		76
    000271  aa   000000 4710 00   6-93  	frd	0		frd		77
    000272  aa   000000 4730 00   6-94  	dfrd	0		dfrd		78
    000273  aa   000000 1500 00   6-95  	adwp4	0		adwp4		79
    000274  aa   000000 0510 00   6-96  	adwp1	0		adwp1		80
    000275  aa   000000 0520 00   6-97  	adwp2	0		adwp2		81
    000276  aa   000000 0530 00   6-98  	adwp3	0		adwp3		82
    000277  aa   000000 1510 00   6-99  	adwp5	0		adwp5		83
    000300  aa   000000 1530 00  6-100  	adwp7	0		adwp7		84
    000301  aa   000000 4020 00  6-101  	mpy	0		mpy		85
    000302  aa  0 00532 7001 00  6-102  	tsx0	pr0|r_le_s	r_le_s		86
    000303  aa  0 00477 7001 00  6-103  	tsx0	pr0|r_g_s		r_g_s		87
    000304  aa   000000 0200 00  6-104  	adlx0	0		adlx0		88
    000305  aa   000000 0210 00  6-105  	adlx1	0		adlx1		89
    000306  aa   000000 0220 00  6-106  	adlx2	0		adlx2		90
    000307  aa   000000 0230 00  6-107  	adlx3	0		adlx3		91
    000310  aa   000000 0240 00  6-108  	adlx4	0		adlx4		92
    000311  aa   000000 0250 00  6-109  	adlx5	0		adlx5		93
    000312  aa   000000 0260 00  6-110  	adlx6	0		adlx6		94
    000313  aa   000000 0270 00  6-111  	adlx7	0		adlx7		95
    000314  aa   000000 1200 00  6-112  	sblx0	0		sblx0		96
    000315  aa   000000 1210 00  6-113  	sblx1	0		sblx1		97
    000316  aa   000000 1220 00  6-114  	sblx2	0		sblx2		98
    000317  aa   000000 1230 00  6-115  	sblx3	0		sblx3		99
    000320  aa   000000 1240 00  6-116  	sblx4	0		sblx4		100
    000321  aa   000000 1250 00  6-117  	sblx5	0		sblx5		101
    000322  aa   000000 1260 00  6-118  	sblx6	0		sblx6		102
    000323  aa   000000 1270 00  6-119  	sblx7	0		sblx7		103
    000324  aa   000000 1000 00  6-120  	cmpx0	0		cmpx0		104
    000325  aa   000000 1010 00  6-121  	cmpx1	0		cmpx1		105
    000326  aa   000000 1020 00  6-122  	cmpx2	0		cmpx2		106
    000327  aa   000000 1030 00  6-123  	cmpx3	0		cmpx3		107
    000330  aa   000000 1040 00  6-124  	cmpx4	0		cmpx4		108
    000331  aa   000000 1050 00  6-125  	cmpx5	0		cmpx5		109
    000332  aa   000000 1060 00  6-126  	cmpx6	0		cmpx6		110
    000333  aa   000000 1070 00  6-127  	cmpx7	0		cmpx7		111
    000334  aa   000000 6360 00  6-128  	eaq	0		eaq		112
    000335  aa   000000 7320 00  6-129  	qrs	0		qrs		113
    000336  aa   000000 3760 00  6-130  	anq	0		anq		114
    000337  aa   000000 2760 00  6-131  	orq	0		orq		115
    000340  aa   000000 2560 00  6-132  	orsq	0		orsq		116
    000341  aa   000000 0110 03  6-133  	nop	0,du		nop		117
    000342  aa  6 00044 3701 20  6-134  	epp4	pr6|36,*		getlp		118
    000343  aa   000000 5440 00  6-135  	sprp4	0		sprp4		119
    000344  aa   000000 5410 00  6-136  	sprp1	0		sprp1		120
    000345  aa   000000 5420 00  6-137  	sprp2	0		sprp2		121
    000346  aa   000000 5430 00  6-138  	sprp3	0		sprp3		122
    000347  aa   000000 5450 00  6-139  	sprp5	0		sprp5		123
    000350  aa   000000 5470 00  6-140  	sprp7	0		sprp7		124
    000351  aa   000000 2130 00  6-141  	epaq	0		epaq		125
    000352  aa   000000 7730 00  6-142  	lrl	0		lrl		126
    000353  aa   000000 7720 00  6-143  	qrl	0		qrl		127
    000354  aa   000000 7640 00  6-144  	lprp4	0		lprp4		128
    000355  aa   000000 7610 00  6-145  	lprp1	0		lprp1		129
    000356  aa   000000 7620 00  6-146  	lprp2	0		lprp2		130
    000357  aa   000000 7630 00  6-147  	lprp3	0		lprp3		131
    000360  aa   000000 7650 00  6-148  	lprp5	0		lprp5		132
    000361  aa   000000 7670 00  6-149  	lprp7	0		lprp7		133
    000362  aa   000000 3310 00  6-150  	easp4	0		easp4		134
    000363  aa   000000 3104 00  6-151  	easp1	0		easp1		135
    000364  aa   000000 3130 00  6-152  	easp2	0		easp2		136
    000365  aa   000000 3124 00  6-153  	easp3	0		easp3		137
    000366  aa   000000 3304 00  6-154  	easp5	0		easp5		138
    000367  aa   000000 3324 00  6-155  	easp7	0		easp7		139
    000370  aa   000000 3300 00  6-156  	eawp4	0		eawp4		140
    000371  aa   000000 3114 00  6-157  	eawp1	0		eawp1		141
    000372  aa   000000 3120 00  6-158  	eawp2	0		eawp2		142
    000373  aa   000000 3134 00  6-159  	eawp3	0		eawp3		143
    000374  aa   000000 3314 00  6-160  	eawp5	0		eawp5		144
    000375  aa   000000 3334 00  6-161  	eawp7	0		eawp7		145
    000376  aa   000000 7770 00  6-162  	llr	0		llr		146
    000377  aa   000000 7350 00  6-163  	als	0		als		147
    000400  aa   000000 5060 00  6-164  	div	0		div		148
    000401  aa   000000 3360 00  6-165  	lcq	0		lcq		149
    000402  aa   000000 6750 00  6-166  	era	0		era		150
    000403  aa   000000 6760 00  6-167  	erq	0		erq		151
    000404  aa   000000 6550 00  6-168  	ersa	0		ersa		152
    000405  aa   000000 6560 00  6-169  	ersq	0		ersq		153
    000406  aa   000000 7750 00  6-170  	alr       0		alr		154
    000407  aa   000000 3750 00  6-171  	ana	0		ana		155
    000410  aa   000000 7330 00  6-172  	lrs	0		lrs		156
    000411  aa   000000 7360 00  6-173  	qls	0		qls		157
    000412  aa   000000 3350 00  6-174  	lca	0		lca		158
                                 6-175  "
                                 6-176  "	NOTE:  If you add anything to this table, be sure to change the
                                 6-177  "	declarations of fort_cg_macros_$single_inst in ext_code_generator,
                                 6-178  "	fort_opt_macros_$single_inst in fort_optimizing_cg, and 
                                 6-179  "	fort_single_inst_names.incl.pl1.
                                 6-180  "
                                 6-181  " END fort_single_inst.incl.alm
                                   189  
    000413                         190  interpreter_macros:
    000413  0a   000416 000000     191  	zero	check_subscript			1
    000414  0a   000426 000000     192  	zero	subscript_mpy			2
    000415  0a   000442 000000     193  	zero	move_eis				3
                                   194  
                                   195  
    000416                         196  check_subscript:
                                   197  	func	2
    000416  aa   000000 001215 
                                   198  
                                   199  	if	arg1,=,op1,ret_sub
    000417  0a   000425 051637 
                                   200  
                                   201  	load	q,arg2
    000420  aa   000000 100656 
                                   202  
    000421  aa   000001 2350 07    203  	lda	1,dl
    000422  aa   040000 1110 00    204  	cwl	arg1
    000423  aa   000002 6000 04    205  	tze	2,ic
    000424  aa  0 00665 7001 00    206  	tsx0	pr0|bound_ck_signal
                                   207  
    000425                         208  ret_sub:
                                   209  	return	arg1
    000425  aa   000001 040217 
                                   210  
                                   211  
    000426                         212  subscript_mpy:
                                   213  	proc	1
    000426  aa   000000 000614 
                                   214  
                                   215  
                                   216  	if	arg1,=,1,ret_mpy
    000427  0a   000436 050637 
                                   217  
                                   218  	if_check_multiply	subscript_mpy.1
    000430  0a   000432 000713 
                                   219  
                                   220  	if	arg1,=,2,qls1
    000431  0a   000437 051237 
                                   221  
    000432                         222  subscript_mpy.1:
    000432  aa   040000 4020 00    223  	mpy	arg1
                                   224  
                                   225  	unless_check_multiply	subscript_mpy.2
    000433  0a   000435 000313 
    000434  aa  0 01467 7001 00    226  	tsx0		pr0|mpy_overflow_check
                                   227  
    000435                         228  subscript_mpy.2:
                                   229  	set_inds_valid	q
    000435  aa   000000 000624 
                                   230  
                                   231  ret_mpy:	return
    000436  aa   000000 000217 
                                   232  
                                   233  qls1:	emit_inst	1
    000437  aa   000001 040242 
                                   234  
    000440  aa   000001 7360 00    235  	qls	1
                                   236  
                                   237  	return
    000441  aa   000000 000217 
                                   238  
                                   239  
    000442                         240  move_eis:
                                   241  	proc	2
    000442  aa   000000 001214 
                                   242  
                                   243  	emit_eis
    000443  aa   000000 000207 
    000444  aa   040100 1004 00    244  	mlr	(),(pr),fill(040)
    000445  aa   040000 000000     245  	desc9a	arg1
    000446  aa   100000 000000     246  	desc9a	arg2
                                   247  
                                   248  	return
    000447  aa   000000 000217 
                                   249  
                                   250  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                   251  
    000450                         252  first_scan:
                                   253  	scan		continue,continue
    000450                     
    000450  0a   000450 000221 
    000451  0a   000450 000220 
    000452                     
                                   254  
                                   255  
    000452                         256  abort_list:
                                   257  	scan		continue,(continue,next)
    000452                     
    000452  0a   000452 000221 
    000453  0a   000452 000220 
    000454  0a   000455 000220 
    000455                     
                                   258  
                                   259  
    000455                         260  error_macro:
                                   261  	error
    000455  aa   000000 000302 
                                   262  
                                   263  assign:	proc		1
    000456  aa   000000 000614 
                                   264  
                                   265  	push_output
    000457  aa   000030 000206 
                                   266  	swap		op2	" Put in expected order.
    000460  aa   000000 700202 
                                   267  
                                   268  	dt_jump		(assign_ii,assign_ri,assign_di,assign_ci,assign_ir,assign_rr,assign_dr,assign_cr,assign_id,assign_rd,assign_dd,assign_cd,assign_ic,assign_rc,assign_dc,assign_cc,assign_e2,assign_e1,assign_t,assign_t)
    000461  aa   000024 000235 
    000462  00   000474 000523 
    000463  00   000532 000555 
    000464  00   000512 000535 
    000465  00   000546 000562 
    000466  00   000526 000543 
    000467  00   000540 000573 
    000470  00   000551 000557 
    000471  00   000570 000575 
    000472  00   000600 000652 
    000473  00   000655 000655 
                        000024 
                                   269  
    000474                         270  assign_ii:
                                   271  	unless_optype	constant,assign_ii.not_zero
    000474  0a   000501 200230 
                                   272  	unless_zero	op1,assign_ii.not_zero
    000475  0a   000501 740366 
    000476  aa   040000 4500 00    273  	stz		arg1
                                   274  	flush_ref		arg1
    000477  aa   000000 040355 
                                   275  	return
    000500  aa   000000 000217 
                                   276  
    000501                         277  assign_ii.not_zero:
                                   278  	if_global		arg1,assign_ii.check_induction_var
    000501  0a   000506 040722 
                                   279  	if_global		arg2,assign_ii.check_induction_var
    000502  0a   000506 100722 
                                   280  
    000503                         281  assign_ii.normal:
                                   282  	load		q,arg2
    000503  aa   000000 100656 
                                   283  	store		q,arg1
    000504  aa   000000 040757 
                                   284  	return
    000505  aa   000000 000217 
                                   285  
    000506                         286  assign_ii.check_induction_var:
                                   287  	unless_induction_var	arg1,assign_ii.normal
    000506  0a   000503 040323 
                                   288  	unless_induction_var	arg2,assign_ii.normal
    000507  0a   000503 100323 
                                   289  
                                   290  	assign_index
    000510  aa   000042 000206 
                                   291  	return
    000511  aa   000000 000217 
                                   292  
    000512                         293  assign_ir:
                                   294  	unless_optype	constant,assign_ir.not_const
    000512  0a   000520 200230 
                                   295  
    000513                         296  assign_i.check_zero:
                                   297  	convert_constant	int
    000513  aa   000000 000611 
                                   298  	unless_zero	op1,assign_ii.not_zero
    000514  0a   000501 740366 
    000515  aa   040000 4500 00    299  	stz		arg1
                                   300  	flush_ref		arg1
    000516  aa   000000 040355 
                                   301  	return
    000517  aa   000000 000217 
                                   302  
    000520                         303  assign_ir.not_const:
                                   304  	s_call		cv_load.ri_not_const
    000520  0a   002204 000223 
                                   305  	store		q,arg1
    000521  aa   000000 040757 
                                   306  	return
    000522  aa   000000 000217 
                                   307  
    000523                         308  assign_ri:
                                   309  	s_call		cv_load.ir
    000523  0a   002174 000223 
                                   310  	store		eaq,arg1
    000524  aa   000000 042357 
                                   311  	return
    000525  aa   000000 000217 
                                   312  
    000526                         313  assign_id:
                                   314  	if_optype		constant,assign_i.check_zero
    000526  0a   000513 200227 
                                   315  	s_call		cv_load.di_not_const
    000527  0a   002224 000223 
                                   316  	store		q,arg1
    000530  aa   000000 040757 
                                   317  	return
    000531  aa   000000 000217 
                                   318  
    000532                         319  assign_di:
                                   320  	s_call		cv_load.id
    000532  0a   002214 000223 
                                   321  	store		deaq,arg1
    000533  aa   000000 042757 
                                   322  	return
    000534  aa   000000 000217 
                                   323  
    000535                         324  assign_rr:
                                   325  	load		eaq,arg2
    000535  aa   000000 102256 
                                   326  	store		eaq,arg1
    000536  aa   000000 042357 
                                   327  	return
    000537  aa   000000 000217 
                                   328  
    000540                         329  assign_dd:
                                   330  	load		deaq,arg2
    000540  aa   000000 102656 
                                   331  	store		deaq,arg1
    000541  aa   000000 042757 
                                   332  	return
    000542  aa   000000 000217 
                                   333  
    000543                         334  assign_rd:
                                   335  	load		deaq,arg2
    000543  aa   000000 102656 
    000544  aa   040000 4700 00    336  	fstr		arg1
                                   337  	return
    000545  aa   000000 000217 
                                   338  
    000546                         339  assign_dr:
                                   340  	load		eaq,arg2
    000546  aa   000000 102256 
                                   341  	store		deaq,arg1,no_update
    000547  aa   000001 042757 
                                   342  	return
    000550  aa   000000 000217 
                                   343  
    000551                         344  assign_ic:
                                   345  	if_optype		constant,assign_i.check_zero
    000551  0a   000513 200227 
                                   346  	s_call		cv_load.ri_not_const
    000552  0a   002204 000223 
                                   347  	store		q,arg1
    000553  aa   000000 040757 
                                   348  	return
    000554  aa   000000 000217 
                                   349  
    000555                         350  assign_ci:
                                   351  	s_call		cv_load.ir
    000555  0a   002174 000223 
                                   352  	jump		assign_cr.01
    000556  0a   000563 000220 
                                   353  
    000557                         354  assign_rc:
                                   355  	load		eaq,arg2
    000557  aa   000000 102256 
                                   356  	store		eaq,arg1
    000560  aa   000000 042357 
                                   357  	return
    000561  aa   000000 000217 
                                   358  
    000562                         359  assign_cr:
                                   360  	load		eaq,arg2
    000562  aa   000000 102256 
    000563                         361  assign_cr.01:
                                   362  	bump		arg1
    000563  aa   000001 040363 
                                   363  	store		eaq,arg1,no_update
    000564  aa   000001 042357 
    000565  aa   400000 4310 03    364  	fld		=0.,du
    000566  aa   040001 4550 00    365  	fst		arg1+1
                                   366  	return
    000567  aa   000000 000217 
                                   367  
    000570                         368  assign_dc:
                                   369  	load		eaq,arg2
    000570  aa   000000 102256 
                                   370  	store		deaq,arg1,no_update
    000571  aa   000001 042757 
                                   371  	return
    000572  aa   000000 000217 
                                   372  
    000573                         373  assign_cd:
                                   374  	load		deaq,arg2
    000573  aa   000000 102656 
                                   375  	jump		assign_cr.01
    000574  0a   000563 000220 
                                   376  
    000575                         377  assign_cc:
                                   378  	load		aq,arg2
    000575  aa   000000 101656 
                                   379  	store		aq,arg1
    000576  aa   000000 041757 
                                   380  	return
    000577  aa   000000 000217 
                                   381  
    000600                         382  assign_e2:
                                   383  	if_dt		logical,assign_l
    000600  0a   000604 020225 
                                   384  	if_dt		char,assign_h
    000601  0a   000617 010225 
                                   385  	error		310,op1
    000602  aa   000466 000702 
    000603  aa   000000 740303 
                        000001 
                                   386  
    000604                         387  assign_l:
                                   388  	swap		arg1
    000604  aa   000000 040202 
                                   389  	unless_dt		logical,logical.p
    000605  0a   000643 020226 
                                   390  	swap		arg1
    000606  aa   000000 040202 
                                   391  	unless_optype	constant,assign_l.not_zero
    000607  0a   000614 200230 
                                   392  	unless_zero	arg2,assign_l.not_zero
    000610  0a   000614 100366 
    000611  aa   040000 4500 00    393  	stz		arg1
                                   394  	flush_ref		arg1
    000612  aa   000000 040355 
                                   395  	return
    000613  aa   000000 000217 
                                   396  
    000614                         397  assign_l.not_zero:
                                   398  	load		a,arg2
    000614  aa   000000 101256 
                                   399  	store		a,arg1
    000615  aa   000000 041357 
                                   400  	return
    000616  aa   000000 000217 
                                   401  
    000617                         402  assign_h:		" Modified 12/27/77 to allow char consts for all arith data types
                                   403  	dt_jump1		arg1,(assign_ih,assign_rh,assign_dh,assign_ch,assign_lh,assign_hh,assign_th)
    000617  aa   000007 040374 
    000620  00   000624 000624 
    000621  00   000631 000631 
    000622  00   000624 000636 
    000623  0a   000624 000000 
                        000007 
                                   404  
    000624                         405  assign_ih:
    000624                         406  assign_rh:
    000624                         407  assign_lh:
    000624                         408  assign_th:
                                   409  	unless_optype	constant,char2.p
    000624  0a   000647 200230 
                                   410  	pad_char_const_to_word	op1
    000625  aa   000000 740375 
                                   411  	load		a,op1
    000626  aa   000000 741256 
                                   412  	store		a,op2
    000627  aa   000000 701357 
                                   413  	return
    000630  aa   000000 000217 
                                   414  
    000631                         415  assign_dh:
    000631                         416  assign_ch:
                                   417  	unless_optype	constant,char2.p
    000631  0a   000647 200230 
                                   418  	pad_char_const_to_dw	op1
    000632  aa   000000 740376 
                                   419  	load		aq,op1
    000633  aa   000000 741656 
                                   420  	store		aq,op2
    000634  aa   000000 701757 
                                   421  	return
    000635  aa   000000 000217 
                                   422  
                                   423  
    000636                         424  assign_hh:
                                   425  	emit_eis
    000636  aa   000000 000207 
    000637  aa  0 40100 1005 00    426  	mlr		(pr),(pr),fill(040)
    000640  aa   100000 000000     427  	desc9a		arg2
    000641  aa   040000 000000     428  	desc9a		arg1
                                   429  
                                   430  	return
    000642  aa   000000 000217 
                                   431  
    000643                         432  logical.p:
                                   433  	print		338,arg1,op1
    000643  aa   000522 001301 
    000644  aa   000000 040303 
    000645  aa   000000 740303 
                        000002 
                                   434  	return
    000646  aa   000000 000217 
                                   435  
    000647                         436  char2.p:
                                   437  	print		337,op1
    000647  aa   000521 000701 
    000650  aa   000000 740303 
                        000001 
                                   438  	return
    000651  aa   000000 000217 
                                   439  
    000652                         440  assign_e1:
                                   441  	print		309,arg1
    000652  aa   000465 000701 
    000653  aa   000000 040303 
                        000001 
                                   442  	return
    000654  aa   000000 000217 
                                   443  
    000655                         444  assign_t:
                                   445  	dt_jump1		arg1,(assign_t.normal,assign_t.normal,assign_e1,assign_e1,assign_t.to_logical,assign_t.normal)
    000655  aa   000006 040374 
    000656  00   000661 000661 
    000657  00   000652 000652 
    000660  00   000672 000661 
                        000006 
                                   446  
    000661                         447  assign_t.normal:
                                   448  	unless_optype	constant,assign_t.not_zero
    000661  0a   000666 200230 
                                   449  	unless_zero	op1,assign_t.not_zero
    000662  0a   000666 740366 
    000663  aa   040000 4500 00    450  	stz		arg1
                                   451  	flush_ref		arg1
    000664  aa   000000 040355 
                                   452  	return
    000665  aa   000000 000217 
                                   453  
    000666                         454  assign_t.not_zero:
                                   455  	unless_one_word_dt	arg1,assign_e1		"trap assignments to invalid character vars
    000666  0a   000652 040315 
                                   456  	load		tq,arg2
    000667  aa   000000 104656 
                                   457  	store		tq,arg1
    000670  aa   000000 044757 
                                   458  	return
    000671  aa   000000 000217 
                                   459  
    000672                         460  assign_t.to_logical:
                                   461  	unless_optype	constant,assign_t.logical.var
    000672  0a   000677 200230 
                                   462  	unless_zero	op1,assign_t.logical.not_zero
    000673  0a   000705 740366 
    000674  aa   040000 4500 00    463  	stz		arg1
                                   464  	flush_ref		arg1
    000675  aa   000000 040355 
                                   465  	return
    000676  aa   000000 000217 
                                   466  
    000677                         467  assign_t.logical.var:
                                   468  	load_for_test	tq,arg2
    000677  aa   000000 104761 
                                   469  	emit		2
    000700  aa   000002 000242 
    000701  aa   000002 6000 04    470  	tze		2,ic
    000702  aa   400000 2360 03    471  	ldq		131072,du
                                   472  	store		tq,arg1
    000703  aa   000000 044757 
                                   473  	return
    000704  aa   000000 000217 
                                   474  
    000705                         475  assign_t.logical.not_zero:
                                   476  	use_q
    000705  aa   000000 000253 
                                   477  	emit		1
    000706  aa   000001 000242 
    000707  aa   400000 2360 03    478  	ldq		131072,du
    000710  aa   040000 7560 00    479  	stq		arg1
                                   480  	flush_ref		arg1
    000711  aa   000000 040355 
                                   481  	return
    000712  aa   000000 000217 
                                   482  
                                   483  add:	func		2
    000713  aa   000000 001215 
                                   484  
                                   485  	dt_jump		(add_ii,add_ri,add_di,add_ci,add_ir,add_rr,add_dr,add_cr,add_id,add_rd,add_dd,add_cd,add_ic,add_rc,add_dc,add_cc,add_e2,add_e1,add_tl,add_tl)
    000714  aa   000024 000235 
    000715  00   000727 000733 
    000716  00   000737 000760 
    000717  00   000732 000742 
    000720  00   000751 000766 
    000721  00   000736 000750 
    000722  00   000745 001011 
    000723  00   000757 000765 
    000724  00   001010 001033 
    000725  00   001065 001063 
    000726  00   001067 001067 
                        000024 
                                   486  
    000727                         487  add_ii:
                                   488  	load_top		q
    000727  aa   000000 000657 
    000730  aa   040000 0760 00    489  	adq		arg1
                                   490  	return		q
    000731  aa   000001 000617 
                                   491  
    000732                         492  add_ir:
                                   493  	swap		arg1
    000732  aa   000000 040202 
                                   494  
    000733                         495  add_ri:
                                   496  	s_call		cv_load.ir
    000733  0a   002174 000223 
    000734  aa   040000 4750 00    497  	fad		arg1
                                   498  	return		eaq
    000735  aa   000001 002217 
                                   499  
    000736                         500  add_id:
                                   501  	swap		arg1
    000736  aa   000000 040202 
                                   502  
    000737                         503  add_di:
                                   504  	s_call		cv_load.id
    000737  0a   002214 000223 
    000740  aa   040000 4770 00    505  	dfad		arg1
                                   506  	return		deaq
    000741  aa   000001 002617 
                                   507  
    000742                         508  add_rr:
                                   509  	load_top		eaq
    000742  aa   000000 002257 
    000743  aa   040000 4750 00    510  	fad		arg1
                                   511  	return		eaq
    000744  aa   000001 002217 
                                   512  
    000745                         513  add_dd:
                                   514  	load_top		deaq
    000745  aa   000000 002657 
    000746  aa   040000 4770 00    515  	dfad		arg1
                                   516  	return		deaq
    000747  aa   000001 002617 
                                   517  
    000750                         518  add_rd:
                                   519  	swap		arg1
    000750  aa   000000 040202 
                                   520  
    000751                         521  add_dr:
                                   522  	if_eaq		eaq,arg2,add_dr.1
    000751  0a   000755 102233 
                                   523  
                                   524  	load		deaq,arg1
    000752  aa   000000 042656 
    000753  aa   100000 4750 00    525  	fad		arg2
                                   526  	return		deaq
    000754  aa   000001 002617 
                                   527  
    000755                         528  add_dr.1:
    000755  aa   040000 4770 00    529  	dfad		arg1
                                   530  	return		deaq
    000756  aa   000001 002617 
                                   531  
    000757                         532  add_ic:
                                   533  	swap		arg1
    000757  aa   000000 040202 
                                   534  
    000760                         535  add_ci:
                                   536  	bump		arg1
    000760  aa   000001 040363 
                                   537  	s_call		cv_load.ir
    000761  0a   002174 000223 
                                   538  	push_output
    000762  aa   000030 000206 
                                   539  	bump		op1
    000763  aa   000001 740363 
                                   540  	jump		add_cr.1
    000764  0a   001001 000220 
                                   541  
    000765                         542  add_rc:
                                   543  	swap		arg1
    000765  aa   000000 040202 
                                   544  
    000766                         545  add_cr:
                                   546  	bump		arg1
    000766  aa   000001 040363 
                                   547  	push_output
    000767  aa   000030 000206 
                                   548  	bump		op1
    000770  aa   000001 740363 
                                   549  
                                   550  	if_eaq		eaq,arg2,add_cr.1
    000771  0a   001001 102233 
                                   551  	if_eaq		eaq,arg1,add_cr.2
    000772  0a   001006 042233 
                                   552  
                                   553  	load		ieaq,arg1
    000773  aa   000000 043256 
                                   554  	store		ieaq,op1,no_update
    000774  aa   000001 743357 
    000775  aa   040000 4310 00    555  	fld		arg1
    000776  aa   100000 4750 00    556  	fad		arg2
                                   557  	in_reg		eaq,op1
    000777  aa   000000 742260 
                                   558  	return		op1
    001000  aa   000001 740217 
                                   559  
    001001                         560  add_cr.1:
    001001  aa   040000 4750 00    561  	fad		arg1
    001002                         562  add_cr.11:
                                   563  	store		eaq,op1,no_update
    001002  aa   000001 742357 
    001003  aa   040001 4310 00    564  	fld		arg1+1
                                   565  	in_reg		ieaq,op1
    001004  aa   000000 743260 
                                   566  	return		op1
    001005  aa   000001 740217 
                                   567  
    001006                         568  add_cr.2:
    001006  aa   100000 4750 00    569  	fad		arg2
                                   570  	jump		add_cr.11
    001007  0a   001002 000220 
                                   571  
    001010                         572  add_dc:
                                   573  	swap		arg1
    001010  aa   000000 040202 
                                   574  
    001011                         575  add_cd:
                                   576  	bump		arg1
    001011  aa   000001 040363 
                                   577  	push_output
    001012  aa   000030 000206 
                                   578  	bump		op1
    001013  aa   000001 740363 
                                   579  
                                   580  	if_eaq		deaq,arg2,add_cd.1
    001014  0a   001024 102633 
                                   581  	if_eaq		eaq,arg1,add_cd.2
    001015  0a   001031 042233 
                                   582  
                                   583  	load		ieaq,arg1
    001016  aa   000000 043256 
                                   584  	store		ieaq,op1,no_update
    001017  aa   000001 743357 
    001020  aa   040000 4310 00    585  	fld		arg1
    001021  aa   100000 4770 00    586  	dfad		arg2
                                   587  	in_reg		eaq,op1
    001022  aa   000000 742260 
                                   588  	return		op1
    001023  aa   000001 740217 
                                   589  
    001024                         590  add_cd.1:
    001024  aa   040000 4750 00    591  	fad		arg1
    001025                         592  add_cd.11:
                                   593  	store		eaq,op1,no_update
    001025  aa   000001 742357 
    001026  aa   040001 4310 00    594  	fld		arg1+1
                                   595  	in_reg		ieaq,op1
    001027  aa   000000 743260 
                                   596  	return		op1
    001030  aa   000001 740217 
                                   597  
    001031                         598  add_cd.2:
    001031  aa   100000 4770 00    599  	dfad		arg2
                                   600  	jump		add_cd.11
    001032  0a   001025 000220 
                                   601  
    001033                         602  add_cc:
                                   603  	bump		arg1
    001033  aa   000001 040363 
                                   604  	bump		arg2
    001034  aa   000001 100363 
                                   605  	push_output
    001035  aa   000030 000206 
                                   606  	bump		op1
    001036  aa   000001 740363 
                                   607  	if_eaq		eaq,arg2,add_cc.1
    001037  0a   001051 102233 
                                   608  	if_eaq		ieaq,arg2,add_cc.2
    001040  0a   001057 103233 
                                   609  	if_eaq		eaq,arg1,add_cc.3
    001041  0a   001061 042233 
                                   610  
                                   611  	load		ieaq,arg1
    001042  aa   000000 043256 
    001043  aa   100001 4750 00    612  	fad		arg2+1
    001044                         613  add_cc.01:
                                   614  	store		ieaq,op1,no_update
    001044  aa   000001 743357 
    001045  aa   040000 4310 00    615  	fld		arg1
    001046  aa   100000 4750 00    616  	fad		arg2
                                   617  	in_reg		eaq,op1
    001047  aa   000000 742260 
                                   618  	return		op1
    001050  aa   000001 740217 
                                   619  
    001051                         620  add_cc.1:
    001051  aa   040000 4750 00    621  	fad		arg1
    001052                         622  add_cc.11:
                                   623  	store		eaq,op1,no_update
    001052  aa   000001 742357 
    001053  aa   040001 4310 00    624  	fld		arg1+1
    001054  aa   100001 4750 00    625  	fad		arg2+1
                                   626  	in_reg		ieaq,op1
    001055  aa   000000 743260 
                                   627  	return		op1
    001056  aa   000001 740217 
                                   628  
    001057                         629  add_cc.2:
    001057  aa   040001 4750 00    630  	fad		arg1+1
                                   631  	jump		add_cc.01
    001060  0a   001044 000220 
                                   632  
    001061                         633  add_cc.3:
    001061  aa   100000 4750 00    634  	fad		arg2
                                   635  	jump		add_cc.11
    001062  0a   001052 000220 
                                   636  
    001063                         637  add_e1:
                                   638  	error		309,arg1
    001063  aa   000465 000702 
    001064  aa   000000 040303 
                        000001 
                                   639  
    001065                         640  add_e2:
                                   641  	error		310,arg2
    001065  aa   000466 000702 
    001066  aa   000000 100303 
                        000001 
                                   642  
    001067                         643  add_tl:
                                   644  	load_top		tq
    001067  aa   000000 004657 
                                   645  	dt_jump1		arg1,(add_tl.1,add_e1,add_e1,add_e1,add_e1,add_e1,add_tl.1)
    001070  aa   000007 040374 
    001071  00   001075 001063 
    001072  00   001063 001063 
    001073  00   001063 001063 
    001074  0a   001075 000000 
                        000007 
                                   646  
    001075                         647  add_tl.1:
    001075  aa   040000 0760 00    648  	adq		arg1
                                   649  	return		tq
    001076  aa   000001 004617 
                                   650  
                                   651  sub:	func		2
    001077  aa   000000 001215 
                                   652  
                                   653  	dt_jump		(sub_ii,sub_ri,sub_di,sub_ci,sub_ir,sub_rr,sub_dr,sub_cr,sub_id,sub_rd,sub_dd,sub_cd,sub_ic,sub_rc,sub_dc,sub_cc,sub_e2,sub_e1,sub_tl,sub_tl)
    001100  aa   000024 000235 
    001101  00   001113 001122 
    001102  00   001145 001233 
    001103  00   001116 001164 
    001104  00   001214 001300 
    001105  00   001141 001204 
    001106  00   001174 001354 
    001107  00   001224 001250 
    001110  00   001324 001400 
    001111  00   001436 001434 
    001112  00   001440 001440 
                        000024 
                                   654  
    001113                         655  sub_ii:
                                   656  	load		q,arg1
    001113  aa   000000 040656 
    001114  aa   100000 1760 00    657  	sbq		arg2
                                   658  	return		q
    001115  aa   000001 000617 
                                   659  
    001116                         660  sub_ir:
                                   661  	swap		arg1
    001116  aa   000000 040202 
                                   662  
                                   663  	s_call		cv_load.ir
    001117  0a   002174 000223 
    001120  aa   040000 5750 00    664  	fsb		arg1
                                   665  	return		eaq
    001121  aa   000001 002217 
                                   666  
    001122                         667  sub_ri:
                                   668  	if_eaq		q,arg2,sub_ri.1
    001122  0a   001134 100633 
                                   669  
                                   670  	if_optype		constant,conv_sub_ri
    001123  0a   001130 200227 
                                   671  
    001124  aa   100000 3360 00    672  	lcq		arg2
                                   673  	s_call		cv_q_to_real
    001125  0a   002253 000223 
    001126  aa   040000 4750 00    674  	fad		arg1
                                   675  	return		eaq
    001127  aa   000001 002217 
                                   676  
    001130                         677  conv_sub_ri:
                                   678  	convert_constant	real
    001130  aa   000000 001211 
                                   679  	load		eaq,arg1
    001131  aa   000000 042256 
    001132  aa   100000 5750 00    680  	fsb		arg2
                                   681  	return		eaq
    001133  aa   000001 002217 
                                   682  
    001134                         683  sub_ri.1:
                                   684  	s_call		cv_q_to_real
    001134  0a   002253 000223 
                                   685  	emit_inst		1
    001135  aa   000001 040242 
    001136  aa   000000 5130 00    686  	fneg
    001137  aa   040000 4750 00    687  	fad		arg1
                                   688  	return		eaq
    001140  aa   000001 002217 
                                   689  
    001141                         690  sub_id:
                                   691  	swap		arg1
    001141  aa   000000 040202 
                                   692  
                                   693  	s_call		cv_load.id
    001142  0a   002214 000223 
    001143  aa   040000 5770 00    694  	dfsb		arg1
                                   695  	return		deaq
    001144  aa   000001 002617 
                                   696  
    001145                         697  sub_di:
                                   698  	if_eaq		q,arg2,sub_di.1
    001145  0a   001157 100633 
                                   699  
                                   700  	if_optype		constant,conv_sub_di
    001146  0a   001153 200227 
                                   701  
    001147  aa   100000 3360 00    702  	lcq		arg2
                                   703  	s_call		cv_q_to_dp
    001150  0a   002253 000223 
    001151  aa   040000 4770 00    704  	dfad		arg1
                                   705  	return		deaq
    001152  aa   000001 002617 
                                   706  
    001153                         707  conv_sub_di:
                                   708  	convert_constant	dp
    001153  aa   000000 001611 
                                   709  	load		deaq,arg1
    001154  aa   000000 042656 
    001155  aa   100000 5770 00    710  	dfsb		arg2
                                   711  	return		deaq
    001156  aa   000001 002617 
                                   712  
    001157                         713  sub_di.1:
                                   714  	s_call		cv_q_to_dp
    001157  0a   002253 000223 
                                   715  	emit_inst		1
    001160  aa   000001 040242 
    001161  aa   000000 5130 00    716  	fneg
    001162  aa   040000 4770 00    717  	dfad		arg1
                                   718  	return		deaq
    001163  aa   000001 002617 
                                   719  
    001164                         720  sub_rr:
                                   721  	if_eaq		eaq,arg2,sub_rr.1
    001164  0a   001170 102233 
                                   722  
                                   723  	load		eaq,arg1
    001165  aa   000000 042256 
    001166  aa   100000 5750 00    724  	fsb		arg2
                                   725  	return		eaq
    001167  aa   000001 002217 
                                   726  
    001170                         727  sub_rr.1:
                                   728  	emit_inst		1
    001170  aa   000001 040242 
    001171  aa   000000 5130 00    729  	fneg
    001172  aa   040000 4750 00    730  	fad		arg1
                                   731  	return		eaq
    001173  aa   000001 002217 
                                   732  
    001174                         733  sub_dd:
                                   734  	if_eaq		deaq,arg2,sub_dd.1
    001174  0a   001200 102633 
                                   735  
                                   736  	load		deaq,arg1
    001175  aa   000000 042656 
    001176  aa   100000 5770 00    737  	dfsb		arg2
                                   738  	return		deaq
    001177  aa   000001 002617 
                                   739  
    001200                         740  sub_dd.1:
                                   741  	emit_inst		1
    001200  aa   000001 040242 
    001201  aa   000000 5130 00    742  	fneg
    001202  aa   040000 4770 00    743  	dfad		arg1
                                   744  	return		deaq
    001203  aa   000001 002617 
                                   745  
    001204                         746  sub_rd:
                                   747  	if_eaq		deaq,arg2,sub_rd.1
    001204  0a   001210 102633 
                                   748  
                                   749  	load		eaq,arg1
    001205  aa   000000 042256 
    001206  aa   100000 5770 00    750  	dfsb		arg2
                                   751  	return		deaq
    001207  aa   000001 002617 
                                   752  
    001210                         753  sub_rd.1:
                                   754  	emit_inst		1
    001210  aa   000001 040242 
    001211  aa   000000 5130 00    755  	fneg
    001212  aa   040000 4750 00    756  	fad		arg1
                                   757  	return		deaq
    001213  aa   000001 002617 
                                   758  
    001214                         759  sub_dr:
                                   760  	if_eaq		eaq,arg2,sub_dr.1
    001214  0a   001220 102233 
                                   761  
                                   762  	load		deaq,arg1
    001215  aa   000000 042656 
    001216  aa   100000 5750 00    763  	fsb		arg2
                                   764  	return		deaq
    001217  aa   000001 002617 
                                   765  
    001220                         766  sub_dr.1:
                                   767  	emit_inst		1
    001220  aa   000001 040242 
    001221  aa   000000 5130 00    768  	fneg
    001222  aa   040000 4770 00    769  	dfad		arg1
                                   770  	return		deaq
    001223  aa   000001 002617 
                                   771  
    001224                         772  sub_ic:
                                   773  	bump		arg2
    001224  aa   000001 100363 
                                   774  	push_output
    001225  aa   000030 000206 
                                   775  	bump		op1
    001226  aa   000001 740363 
                                   776  
                                   777  	swap		arg1
    001227  aa   000000 040202 
                                   778  	s_call		cv_load.ir
    001230  0a   002174 000223 
                                   779  	swap		arg1
    001231  aa   000000 040202 
                                   780  	jump		sub_rc.1
    001232  0a   001265 000220 
                                   781  
    001233                         782  sub_ci:
                                   783  	bump		arg1
    001233  aa   000001 040363 
                                   784  	push_output
    001234  aa   000030 000206 
                                   785  	bump		op1
    001235  aa   000001 740363 
                                   786  
                                   787  	swap		arg2
    001236  aa   000000 100202 
                                   788  
                                   789  	if_optype		constant,conv_sub_ci
    001237  0a   001244 200227 
                                   790  
                                   791  	swap		arg2
    001240  aa   000000 100202 
    001241  aa   100000 3360 00    792  	lcq		arg2
                                   793  	s_call		cv_q_to_real
    001242  0a   002253 000223 
                                   794  	jump		sub_cr.10
    001243  0a   001315 000220 
                                   795  
    001244                         796  conv_sub_ci:
                                   797  	convert_constant	real
    001244  aa   000000 001211 
                                   798  
                                   799  	swap		arg2
    001245  aa   000000 100202 
                                   800  	load		eaq,arg2
    001246  aa   000000 102256 
                                   801  	jump		sub_cr.1
    001247  0a   001313 000220 
                                   802  
    001250                         803  sub_rc:
                                   804  	bump		arg2
    001250  aa   000001 100363 
                                   805  	push_output
    001251  aa   000030 000206 
                                   806  	bump		op1
    001252  aa   000001 740363 
                                   807  
                                   808  	if_eaq		eaq,arg1,sub_rc.1
    001253  0a   001265 042233 
                                   809  	if_eaq		eaq,arg2,sub_rc.2
    001254  0a   001274 102233 
                                   810  
                                   811  	load		ieaq,arg2
    001255  aa   000000 103256 
                                   812  	emit_inst		1
    001256  aa   000001 040242 
    001257  aa   000000 5130 00    813  	fneg
                                   814  	store		ieaq,op1,no_update
    001260  aa   000001 743357 
    001261  aa   040000 4310 00    815  	fld		arg1
    001262  aa   100000 5750 00    816  	fsb		arg2
                                   817  	in_reg		eaq,op1
    001263  aa   000000 742260 
                                   818  	return		op1
    001264  aa   000001 740217 
                                   819  
    001265                         820  sub_rc.1:
    001265  aa   100000 5750 00    821  	fsb		arg2
    001266                         822  sub_rc.11:
                                   823  	store		eaq,op1,no_update
    001266  aa   000001 742357 
    001267  aa   100001 4310 00    824  	fld		arg2+1
                                   825  	emit_inst		1
    001270  aa   000001 040242 
    001271  aa   000000 5130 00    826  	fneg
                                   827  	in_reg		ieaq,op1
    001272  aa   000000 743260 
                                   828  	return		op1
    001273  aa   000001 740217 
                                   829  
    001274                         830  sub_rc.2:
                                   831  	emit_inst		1
    001274  aa   000001 040242 
    001275  aa   000000 5130 00    832  	fneg
    001276  aa   040000 4750 00    833  	fad		arg1
                                   834  	jump		sub_rc.11
    001277  0a   001266 000220 
                                   835  
    001300                         836  sub_cr:
                                   837  	bump		arg1
    001300  aa   000001 040363 
                                   838  	push_output
    001301  aa   000030 000206 
                                   839  	bump		op1
    001302  aa   000001 740363 
                                   840  
                                   841  	if_eaq		eaq,arg2,sub_cr.1
    001303  0a   001313 102233 
                                   842  	if_eaq		eaq,arg1,sub_cr.2
    001304  0a   001322 042233 
                                   843  
                                   844  	load		ieaq,arg1
    001305  aa   000000 043256 
                                   845  	store		ieaq,op1,no_update
    001306  aa   000001 743357 
    001307  aa   040000 4310 00    846  	fld		arg1
    001310  aa   100000 5750 00    847  	fsb		arg2
                                   848  	in_reg		eaq,op1
    001311  aa   000000 742260 
                                   849  	return		op1
    001312  aa   000001 740217 
                                   850  
    001313                         851  sub_cr.1:
                                   852  	emit_inst		1
    001313  aa   000001 040242 
    001314  aa   000000 5130 00    853  	fneg
    001315                         854  sub_cr.10:
    001315  aa   040000 4750 00    855  	fad		arg1
    001316                         856  sub_cr.11:
                                   857  	store		eaq,op1,no_update
    001316  aa   000001 742357 
    001317  aa   040001 4310 00    858  	fld		arg1+1
                                   859  	in_reg		ieaq,op1
    001320  aa   000000 743260 
                                   860  	return		op1
    001321  aa   000001 740217 
                                   861  
    001322                         862  sub_cr.2:
    001322  aa   100000 5750 00    863  	fsb		arg2
                                   864  	jump		sub_cr.11
    001323  0a   001316 000220 
                                   865  
    001324                         866  sub_dc:
                                   867  	bump		arg2
    001324  aa   000001 100363 
                                   868  	push_output
    001325  aa   000030 000206 
                                   869  	bump		op1
    001326  aa   000001 740363 
                                   870  
                                   871  	if_eaq		deaq,arg1,sub_dc.1
    001327  0a   001341 042633 
                                   872  	if_eaq		eaq,arg2,sub_dc.2
    001330  0a   001350 102233 
                                   873  
                                   874  	load		ieaq,arg2
    001331  aa   000000 103256 
                                   875  	emit_inst		1
    001332  aa   000001 040242 
    001333  aa   000000 5130 00    876  	fneg
                                   877  	store		ieaq,op1,no_update
    001334  aa   000001 743357 
    001335  aa   040000 4330 00    878  	dfld		arg1
    001336  aa   100000 5750 00    879  	fsb		arg2
                                   880  	in_reg		eaq,op1
    001337  aa   000000 742260 
                                   881  	return		op1
    001340  aa   000001 740217 
                                   882  
    001341                         883  sub_dc.1:
    001341  aa   100000 5750 00    884  	fsb		arg2
    001342                         885  sub_dc.11:
                                   886  	store		eaq,op1,no_update
    001342  aa   000001 742357 
    001343  aa   100001 4310 00    887  	fld		arg2+1
                                   888  	emit_inst		1
    001344  aa   000001 040242 
    001345  aa   000000 5130 00    889  	fneg
                                   890  	in_reg		ieaq,op1
    001346  aa   000000 743260 
                                   891  	return		op1
    001347  aa   000001 740217 
                                   892  
    001350                         893  sub_dc.2:
                                   894  	emit_inst		1
    001350  aa   000001 040242 
    001351  aa   000000 5130 00    895  	fneg
    001352  aa   040000 4770 00    896  	dfad		arg1
                                   897  	jump		sub_dc.11
    001353  0a   001342 000220 
                                   898  
    001354                         899  sub_cd:
                                   900  	bump		arg1
    001354  aa   000001 040363 
                                   901  	push_output
    001355  aa   000030 000206 
                                   902  	bump		op1
    001356  aa   000001 740363 
                                   903  
                                   904  	if_eaq		deaq,arg2,sub_cd.1
    001357  0a   001367 102633 
                                   905  	if_eaq		eaq,arg1,sub_cd.2
    001360  0a   001376 042233 
                                   906  
                                   907  	load		ieaq,arg1
    001361  aa   000000 043256 
                                   908  	store		ieaq,op1,no_update
    001362  aa   000001 743357 
    001363  aa   040000 4310 00    909  	fld		arg1
    001364  aa   100000 5770 00    910  	dfsb		arg2
                                   911  	in_reg		eaq,op1
    001365  aa   000000 742260 
                                   912  	return		op1
    001366  aa   000001 740217 
                                   913  
    001367                         914  sub_cd.1:
                                   915  	emit_inst		1
    001367  aa   000001 040242 
    001370  aa   000000 5130 00    916  	fneg
    001371                         917  sub_cd.10:
    001371  aa   040000 4750 00    918  	fad		arg1
    001372                         919  sub_cd.11:
                                   920  	store		eaq,op1,no_update
    001372  aa   000001 742357 
    001373  aa   040001 4310 00    921  	fld		arg1+1
                                   922  	in_reg		ieaq,op1
    001374  aa   000000 743260 
                                   923  	return		op1
    001375  aa   000001 740217 
                                   924  
    001376                         925  sub_cd.2:
    001376  aa   100000 5770 00    926  	dfsb		arg2
                                   927  	jump		sub_cd.11
    001377  0a   001372 000220 
                                   928  
    001400                         929  sub_cc:
                                   930  	bump		arg1
    001400  aa   000001 040363 
                                   931  	bump		arg2
    001401  aa   000001 100363 
                                   932  	push_output
    001402  aa   000030 000206 
                                   933  	bump		op1
    001403  aa   000001 740363 
                                   934  
                                   935  	if_eaq		eaq,arg2,sub_cc.1
    001404  0a   001416 102233 
                                   936  	if_eaq		ieaq,arg2,sub_cc.2
    001405  0a   001426 103233 
                                   937  	if_eaq		eaq,arg1,sub_cc.3
    001406  0a   001432 042233 
                                   938  
                                   939  	load		ieaq,arg1
    001407  aa   000000 043256 
    001410  aa   100001 5750 00    940  	fsb		arg2+1
    001411                         941  sub_cc.01:
                                   942  	store		ieaq,op1,no_update
    001411  aa   000001 743357 
    001412  aa   040000 4310 00    943  	fld		arg1
    001413  aa   100000 5750 00    944  	fsb		arg2
                                   945  	in_reg		eaq,op1
    001414  aa   000000 742260 
                                   946  	return		op1
    001415  aa   000001 740217 
                                   947  
    001416                         948  sub_cc.1:
                                   949  	emit_inst		1
    001416  aa   000001 040242 
    001417  aa   000000 5130 00    950  	fneg
    001420  aa   040000 4750 00    951  	fad		arg1
    001421                         952  sub_cc.11:
                                   953  	store		eaq,op1,no_update
    001421  aa   000001 742357 
    001422  aa   040001 4310 00    954  	fld		arg1+1
    001423  aa   100001 5750 00    955  	fsb		arg2+1
                                   956  	in_reg		ieaq,op1
    001424  aa   000000 743260 
                                   957  	return		op1
    001425  aa   000001 740217 
                                   958  
    001426                         959  sub_cc.2:
                                   960  	emit_inst		1
    001426  aa   000001 040242 
    001427  aa   000000 5130 00    961  	fneg
    001430  aa   040001 4750 00    962  	fad		arg1+1
                                   963  	jump		sub_cc.01
    001431  0a   001411 000220 
                                   964  
    001432                         965  sub_cc.3:
    001432  aa   100000 5750 00    966  	fsb		arg2
                                   967  	jump		sub_cc.11
    001433  0a   001421 000220 
                                   968  
    001434                         969  sub_e1:
                                   970  	error		309,arg1
    001434  aa   000465 000702 
    001435  aa   000000 040303 
                        000001 
                                   971  
    001436                         972  sub_e2:
                                   973  	error		310,arg2
    001436  aa   000466 000702 
    001437  aa   000000 100303 
                        000001 
                                   974  
    001440                         975  sub_tl:
                                   976  	unless_dt		(int,typeless),sub_e2
    001440  0a   001436 404226 
                                   977  	dt_jump1		arg1,(sub_tl.1,sub_e1,sub_e1,sub_e1,sub_e1,sub_e1,sub_tl.1)
    001441  aa   000007 040374 
    001442  00   001446 001434 
    001443  00   001434 001434 
    001444  00   001434 001434 
    001445  0a   001446 000000 
                        000007 
                                   978  
    001446                         979  sub_tl.1:
                                   980  	load		tq,arg1
    001446  aa   000000 044656 
    001447  aa   100000 1760 00    981  	sbq		arg2
                                   982  	return		tq
    001450  aa   000001 004617 
                                   983  
                                   984  mult:	func		2
    001451  aa   000000 001215 
                                   985  
                                   986  	dt_jump		(mult_ii,mult_ri,mult_di,mult_ci,mult_ir,mult_rr,mult_dr,mult_cr,mult_id,mult_rd,mult_dd,mult_cd,mult_ic,mult_rc,mult_dc,mult_cc,mult_e2,mult_e1,mult_tl,mult_tl)
    001452  aa   000024 000235 
    001453  00   001465 001504 
    001454  00   001510 001556 
    001455  00   001503 001513 
    001456  00   001542 001602 
    001457  00   001507 001541 
    001460  00   001526 001630 
    001461  00   001555 001601 
    001462  00   001627 001655 
    001463  00   001670 001666 
    001464  00   001672 001672 
                        000024 
                                   987  
    001465                         988  mult_ii:
                                   989  	if_check_multiply	mult_ii.1
    001465  0a   001470 000713 
                                   990  	power_of_two	arg1,mult_ii.one_is
    001466  0a   001475 040377 
                                   991  	power_of_two	arg2,mult_ii.two_is
    001467  0a   001500 100377 
                                   992  
    001470                         993  mult_ii.1:
                                   994  	load_top		q
    001470  aa   000000 000657 
    001471  aa   040000 4020 00    995  	mpy		arg1
                                   996  
                                   997  	unless_check_multiply	mult_ii.2
    001472  0a   001474 000313 
    001473  aa  0 01467 7001 00    998  	tsx0		pr0|mpy_overflow_check
                                   999  
    001474                        1000  mult_ii.2:
                                  1001  	return		q
    001474  aa   000001 000617 
                                  1002  
    001475                        1003  mult_ii.one_is:
                                  1004  	load		q,arg2
    001475  aa   000000 100656 
    001476  aa   040000 7360 00   1005  	qls		arg1
                                  1006  	return		q
    001477  aa   000001 000617 
                                  1007  
    001500                        1008  mult_ii.two_is:
                                  1009  	load		q,arg1
    001500  aa   000000 040656 
    001501  aa   100000 7360 00   1010  	qls		arg2
                                  1011  	return		q
    001502  aa   000001 000617 
                                  1012  
    001503                        1013  mult_ir:
                                  1014  	swap		arg1
    001503  aa   000000 040202 
                                  1015  
    001504                        1016  mult_ri:
                                  1017  	s_call		cv_load.ir
    001504  0a   002174 000223 
    001505  aa   040000 4610 00   1018  	fmp		arg1
                                  1019  	return		eaq
    001506  aa   000001 002217 
                                  1020  
    001507                        1021  mult_id:
                                  1022  	swap		arg1
    001507  aa   000000 040202 
                                  1023  
    001510                        1024  mult_di:
                                  1025  	s_call		cv_load.id
    001510  0a   002214 000223 
    001511  aa   040000 4630 00   1026  	dfmp		arg1
                                  1027  	return		deaq
    001512  aa   000001 002617 
                                  1028  
    001513                        1029  mult_rr:
                                  1030  	float_power_of_fpbase	arg1,mult_rr.one_is
    001513  0a   001520 040373 
                                  1031  	float_power_of_fpbase	arg2,mult_rr.two_is
    001514  0a   001521 100373 
                                  1032  	load_top		eaq
    001515  aa   000000 002257 
    001516  aa   040000 4610 00   1033  	fmp		arg1
                                  1034  	return		eaq
    001517  aa   000001 002217 
                                  1035  
    001520                        1036  mult_rr.one_is:
                                  1037  	swap		arg1
    001520  aa   000000 040202 
                                  1038  
    001521                        1039  mult_rr.two_is:
                                  1040  	load_for_test	eaq,arg1
    001521  aa   000000 042361 
                                  1041  	use_eaq
    001522  aa   000000 000255 
    001523  aa   000002 6000 04   1042  	tze		2,ic
    001524  aa   100000 4150 00   1043  	ade		arg2
                                  1044  	jump		mm_ret_eaq
    001525  0a   003121 000220 
                                  1045  
    001526                        1046  mult_dd:
                                  1047  	float_power_of_fpbase	arg1,mult_dd.one_is
    001526  0a   001533 040373 
                                  1048  	float_power_of_fpbase	arg2,mult_dd.two_is
    001527  0a   001534 100373 
                                  1049  	load_top		deaq
    001530  aa   000000 002657 
    001531  aa   040000 4630 00   1050  	dfmp		arg1
                                  1051  	return		deaq
    001532  aa   000001 002617 
                                  1052  
    001533                        1053  mult_dd.one_is:
                                  1054  	swap		arg1
    001533  aa   000000 040202 
                                  1055  
    001534                        1056  mult_dd.two_is:
                                  1057  	load_for_test	deaq,arg1
    001534  aa   000000 042761 
                                  1058  
    001535                        1059  use_ade.dd:
                                  1060  	use_eaq
    001535  aa   000000 000255 
    001536  aa   000002 6000 04   1061  	tze		2,ic
    001537  aa   100000 4150 00   1062  	ade		arg2
                                  1063  	jump		mm_ret_deaq
    001540  0a   003125 000220 
                                  1064  
    001541                        1065  mult_rd:
                                  1066  	swap		arg1
    001541  aa   000000 040202 
                                  1067  
    001542                        1068  mult_dr:
                                  1069  	float_power_of_fpbase	arg1,mult_dr.one_is
    001542  0a   001552 040373 
                                  1070  	float_power_of_fpbase	arg2,mult_dd.two_is
    001543  0a   001534 100373 
                                  1071  	if_eaq		eaq,arg2,mult_dr.1
    001544  0a   001550 102233 
                                  1072  
                                  1073  	load		deaq,arg1
    001545  aa   000000 042656 
    001546  aa   100000 4610 00   1074  	fmp		arg2
                                  1075  	return		deaq
    001547  aa   000001 002617 
                                  1076  
    001550                        1077  mult_dr.1:
    001550  aa   040000 4630 00   1078  	dfmp		arg1
                                  1079  	return		deaq
    001551  aa   000001 002617 
                                  1080  
    001552                        1081  mult_dr.one_is:
                                  1082  	load_for_test	eaq,arg2
    001552  aa   000000 102361 
                                  1083  	swap		arg1
    001553  aa   000000 040202 
                                  1084  	jump		use_ade.dd
    001554  0a   001535 000220 
                                  1085  
    001555                        1086  mult_ic:
                                  1087  	swap		arg1
    001555  aa   000000 040202 
                                  1088  
    001556                        1089  mult_ci:
                                  1090  	bump		arg1
    001556  aa   000001 040363 
                                  1091  	push_output
    001557  aa   000030 000206 
                                  1092  	bump		op1
    001560  aa   000001 740363 
                                  1093  
                                  1094  	swap		arg2
    001561  aa   000000 100202 
                                  1095  
                                  1096  	if_optype		constant,conv_mult_ci
    001562  0a   001575 200227 
                                  1097  
                                  1098  	swap		arg2
    001563  aa   000000 100202 
                                  1099  	push_temp		real
    001564  aa   000000 001204 
                                  1100  	bump		op1	" temp becomes arg2
    001565  aa   000001 740363 
                                  1101  
                                  1102  	load		q,arg2
    001566  aa   000000 100656 
                                  1103  	use_eaq
    001567  aa   000000 000255 
    001570  aa  0 00465 7001 00   1104  	tsx0		pr0|integer_to_real
                                  1105  
                                  1106  	swap		arg2
    001571  aa   000000 100202 
                                  1107  	store		eaq,arg2,no_update
    001572  aa   000001 102357 
                                  1108  	pop		op1
    001573  aa   000000 740203 
                                  1109  	jump		mult_cr.1
    001574  0a   001617 000220 
                                  1110  
    001575                        1111  conv_mult_ci:
                                  1112  	convert_constant	real
    001575  aa   000000 001211 
                                  1113  
                                  1114  	swap		arg2
    001576  aa   000000 100202 
                                  1115  	load		eaq,arg2
    001577  aa   000000 102256 
                                  1116  	jump		mult_cr.1
    001600  0a   001617 000220 
                                  1117  
    001601                        1118  mult_rc:
                                  1119  	swap		arg1
    001601  aa   000000 040202 
                                  1120  
    001602                        1121  mult_cr:
                                  1122  	bump		arg1
    001602  aa   000001 040363 
                                  1123  	bump		arg2
    001603  aa   000001 100363 
                                  1124  	push_output
    001604  aa   000030 000206 
                                  1125  	bump		op1
    001605  aa   000001 740363 
                                  1126  
                                  1127  	if_eaq		eaq,arg2,mult_cr.1
    001606  0a   001617 102233 
                                  1128  	if_eaq		eaq,arg1,mult_cr.2
    001607  0a   001625 042233 
                                  1129  
                                  1130  	load		ieaq,arg1
    001610  aa   000000 043256 
    001611  aa   100000 4610 00   1131  	fmp		arg2
                                  1132  	store		ieaq,op1,no_update
    001612  aa   000001 743357 
    001613  aa   040000 4310 00   1133  	fld		arg1
    001614  aa   100000 4610 00   1134  	fmp		arg2
                                  1135  	in_reg		eaq,op1
    001615  aa   000000 742260 
                                  1136  	return		op1
    001616  aa   000001 740217 
                                  1137  
    001617                        1138  mult_cr.1:
    001617  aa   040000 4610 00   1139  	fmp		arg1
    001620                        1140  mult_cr.11:
                                  1141  	store		eaq,op1,no_update
    001620  aa   000001 742357 
    001621  aa   100000 4310 00   1142  	fld		arg2
    001622  aa   040001 4610 00   1143  	fmp		arg1+1
                                  1144  	in_reg		ieaq,op1
    001623  aa   000000 743260 
                                  1145  	return		op1
    001624  aa   000001 740217 
                                  1146  
    001625                        1147  mult_cr.2:
    001625  aa   100000 4610 00   1148  	fmp		arg2
                                  1149  	jump		mult_cr.11
    001626  0a   001620 000220 
                                  1150  
    001627                        1151  mult_dc:
                                  1152  	swap		arg1
    001627  aa   000000 040202 
                                  1153  
    001630                        1154  mult_cd:
                                  1155  	bump		arg1
    001630  aa   000001 040363 
                                  1156  	bump		arg2
    001631  aa   000001 100363 
                                  1157  	push_output
    001632  aa   000030 000206 
                                  1158  	bump		op1
    001633  aa   000001 740363 
                                  1159  
                                  1160  	if_eaq		deaq,arg2,mult_cd.1
    001634  0a   001645 102633 
                                  1161  	if_eaq		eaq,arg1,mult_cd.2
    001635  0a   001653 042233 
                                  1162  
                                  1163  	load		ieaq,arg1
    001636  aa   000000 043256 
    001637  aa   100000 4630 00   1164  	dfmp		arg2
                                  1165  	store		ieaq,op1,no_update
    001640  aa   000001 743357 
    001641  aa   040000 4310 00   1166  	fld		arg1
    001642  aa   100000 4630 00   1167  	dfmp		arg2
                                  1168  	in_reg		eaq,op1
    001643  aa   000000 742260 
                                  1169  	return		op1
    001644  aa   000001 740217 
                                  1170  
    001645                        1171  mult_cd.1:
    001645  aa   040000 4610 00   1172  	fmp		arg1
    001646                        1173  mult_cd.11:
                                  1174  	store		eaq,op1,no_update
    001646  aa   000001 742357 
    001647  aa   100000 4330 00   1175  	dfld		arg2
    001650  aa   040001 4610 00   1176  	fmp		arg1+1
                                  1177  	in_reg		ieaq,op1
    001651  aa   000000 743260 
                                  1178  	return		op1
    001652  aa   000001 740217 
                                  1179  
    001653                        1180  mult_cd.2:
    001653  aa   100000 4630 00   1181  	dfmp		arg2
                                  1182  	jump		mult_cd.11
    001654  0a   001646 000220 
                                  1183  
    001655                        1184  mult_cc:
                                  1185  	load		aq,arg1
    001655  aa   000000 041656 
                                  1186  	bump		arg2
    001656  aa   000001 100363 
                                  1187  	load_pr		pr2,arg2
    001657  aa   000003 100251 
                                  1188  	use_eaq
    001660  aa   000000 000255 
    001661  aa  0 00773 7001 00   1189  	tsx0		pr0|complex_multiply
                                  1190  	drop		arg2
    001662  aa   000001 100364 
    001663  aa  6 00070 2371 00   1191  	ldaq		pr6|complex
                                  1192  	free_regs
    001664  aa   000004 000206 
                                  1193  	return		aq
    001665  aa   000001 001617 
                                  1194  
    001666                        1195  mult_e1:
                                  1196  	error		309,arg1
    001666  aa   000465 000702 
    001667  aa   000000 040303 
                        000001 
                                  1197  
    001670                        1198  mult_e2:
                                  1199  	error		310,arg2
    001670  aa   000466 000702 
    001671  aa   000000 100303 
                        000001 
                                  1200  
    001672                        1201  mult_tl:
                                  1202  	unless_dt		(int,typeless),mult_e2
    001672  0a   001670 404226 
                                  1203  	dt_jump1		arg1,(mult_tl.1,mult_e1,mult_e1,mult_e1,mult_e1,mult_e1,mult_tl.1)
    001673  aa   000007 040374 
    001674  00   001700 001666 
    001675  00   001666 001666 
    001676  00   001666 001666 
    001677  0a   001700 000000 
                        000007 
                                  1204  
    001700                        1205  mult_tl.1:
                                  1206  	if_check_multiply	mult_tl.2
    001700  0a   001703 000713 
                                  1207  	power_of_two	arg1,mult_tl.one_is
    001701  0a   001710 040377 
                                  1208  	power_of_two	arg2,mult_tl.two_is
    001702  0a   001713 100377 
                                  1209  
    001703                        1210  mult_tl.2:
                                  1211  	load_top		tq
    001703  aa   000000 004657 
    001704  aa   040000 4020 00   1212  	mpy		arg1
                                  1213  
                                  1214  	unless_check_multiply	mult_tl.3
    001705  0a   001707 000313 
    001706  aa  0 01467 7001 00   1215  	tsx0		pr0|mpy_overflow_check
                                  1216  
    001707                        1217  mult_tl.3:
                                  1218  	return		tq
    001707  aa   000001 004617 
                                  1219  
    001710                        1220  mult_tl.one_is:
                                  1221  	load		tq,arg2
    001710  aa   000000 104656 
    001711  aa   040000 7360 00   1222  	qls		arg1
                                  1223  	return		tq
    001712  aa   000001 004617 
                                  1224  
    001713                        1225  mult_tl.two_is:
                                  1226  	load		tq,arg1
    001713  aa   000000 044656 
    001714  aa   100000 7360 00   1227  	qls		arg2
                                  1228  	return		tq
    001715  aa   000001 004617 
                                  1229  
                                  1230  div:	func		2
    001716  aa   000000 001215 
                                  1231  
                                  1232  	dt_jump		(div_ii,div_ri,div_di,div_ci,div_ir,div_rr,div_dr,div_cr,div_id,div_rd,div_dd,div_cd,div_ic,div_rc,div_dc,div_cc,div_e2,div_e1,div_tl,div_tl)
    001717  aa   000024 000235 
    001720  00   001732 001741 
    001721  00   001750 002032 
    001722  00   001735 001753 
    001723  00   002014 002067 
    001724  00   001744 002003 
    001725  00   001767 002120 
    001726  00   002020 002055 
    001727  00   002114 002145 
    001730  00   002160 002156 
    001731  00   002162 002162 
                        000024 
                                  1233  
    001732                        1234  div_ii:
                                  1235  	load		q,arg1
    001732  aa   000000 040656 
    001733  aa   100000 5060 00   1236  	div		arg2
                                  1237  	return		q
    001734  aa   000001 000617 
                                  1238  
    001735                        1239  div_ir:
                                  1240  	swap		arg1
    001735  aa   000000 040202 
                                  1241  
                                  1242  	s_call		cv_load.ir
    001736  0a   002174 000223 
    001737  aa   040000 5650 00   1243  	fdv		arg1
                                  1244  	return		eaq
    001740  aa   000001 002217 
                                  1245  
    001741                        1246  div_ri:
                                  1247  	s_call		cv_load.ir
    001741  0a   002174 000223 
    001742  aa   040000 5250 00   1248  	fdi		arg1
                                  1249  	return		eaq
    001743  aa   000001 002217 
                                  1250  
    001744                        1251  div_id:
                                  1252  	swap		arg1
    001744  aa   000000 040202 
                                  1253  
                                  1254  	s_call		cv_load.id
    001745  0a   002214 000223 
    001746  aa   040000 5670 00   1255  	dfdv		arg1
                                  1256  	return		deaq
    001747  aa   000001 002617 
                                  1257  
    001750                        1258  div_di:
                                  1259  	s_call		cv_load.id
    001750  0a   002214 000223 
    001751  aa   040000 5270 00   1260  	dfdi		arg1
                                  1261  	return		deaq
    001752  aa   000001 002617 
                                  1262  
    001753                        1263  div_rr:
                                  1264  	float_power_of_fpbase	arg2,div_r.power_of_two,for_divide
    001753  0a   001762 100773 
                                  1265  	if_eaq		eaq,arg2,div_rr.1
    001754  0a   001760 102233 
                                  1266  
                                  1267  	load		eaq,arg1
    001755  aa   000000 042256 
    001756  aa   100000 5650 00   1268  	fdv		arg2
                                  1269  	return		eaq
    001757  aa   000001 002217 
                                  1270  
    001760                        1271  div_rr.1:
    001760  aa   040000 5250 00   1272  	fdi		arg1
                                  1273  	return		eaq
    001761  aa   000001 002217 
                                  1274  
    001762                        1275  div_r.power_of_two:
                                  1276  	load_for_test	eaq,arg1
    001762  aa   000000 042361 
                                  1277  	use_eaq
    001763  aa   000000 000255 
    001764  aa   000002 6000 04   1278  	tze		2,ic
    001765  aa   100000 4150 00   1279  	ade		arg2
                                  1280  	jump		mm_ret_eaq
    001766  0a   003121 000220 
                                  1281  
    001767                        1282  div_dd:
                                  1283  	float_power_of_fpbase	arg2,div_d.power_of_two,for_divide
    001767  0a   001776 100773 
                                  1284  	if_eaq		deaq,arg2,div_dd.1
    001770  0a   001774 102633 
                                  1285  
                                  1286  	load		deaq,arg1
    001771  aa   000000 042656 
    001772  aa   100000 5670 00   1287  	dfdv		arg2
                                  1288  	return		deaq
    001773  aa   000001 002617 
                                  1289  
    001774                        1290  div_dd.1:
    001774  aa   040000 5270 00   1291  	dfdi		arg1
                                  1292  	return		deaq
    001775  aa   000001 002617 
                                  1293  
                                  1294  
    001776                        1295  div_d.power_of_two:
                                  1296  	load_for_test	deaq,arg1
    001776  aa   000000 042761 
                                  1297  	use_eaq
    001777  aa   000000 000255 
    002000  aa   000002 6000 04   1298  	tze		2,ic
    002001  aa   100000 4150 00   1299  	ade		arg2
                                  1300  	jump		mm_ret_deaq
    002002  0a   003125 000220 
                                  1301  
    002003                        1302  div_rd:
                                  1303  	float_power_of_fpbase	arg2,div_rd.power_of_two,for_divide
    002003  0a   002007 100773 
                                  1304  	load		eaq,arg1
    002004  aa   000000 042256 
    002005  aa   100000 5670 00   1305  	dfdv		arg2
                                  1306  	return		deaq
    002006  aa   000001 002617 
                                  1307  
    002007                        1308  div_rd.power_of_two:
                                  1309  	load_for_test	eaq,arg1
    002007  aa   000000 042361 
                                  1310  	use_eaq
    002010  aa   000000 000255 
    002011  aa   000002 6000 04   1311  	tze		2,ic
    002012  aa   100000 4150 00   1312  	ade		arg2
                                  1313  	jump		mm_ret_deaq
    002013  0a   003125 000220 
                                  1314  
    002014                        1315  div_dr:
                                  1316  	float_power_of_fpbase	arg2,div_d.power_of_two,for_divide
    002014  0a   001776 100773 
                                  1317  	load		eaq,arg2
    002015  aa   000000 102256 
    002016  aa   040000 5270 00   1318  	dfdi		arg1
                                  1319  	return		deaq
    002017  aa   000001 002617 
                                  1320  
    002020                        1321  div_ic:
                                  1322  	swap		arg1
    002020  aa   000000 040202 
                                  1323  
                                  1324  	if_optype		constant,conv_div_ic
    002021  0a   002027 200227 
                                  1325  
                                  1326  	s_call		cv_load.ir
    002022  0a   002174 000223 
                                  1327  
                                  1328  	swap		arg1
    002023  aa   000000 040202 
    002024  aa  6 00056 4701 00   1329  	fstr		sp|double_temp
    002025  aa  6 00056 2351 00   1330  	lda		sp|double_temp
                                  1331  	jump		div_rc.01
    002026  0a   002056 000220 
                                  1332  
    002027                        1333  conv_div_ic:
                                  1334  	convert_constant	real
    002027  aa   000000 001211 
                                  1335  	swap		arg1
    002030  aa   000000 040202 
                                  1336  	jump		div_rc
    002031  0a   002055 000220 
                                  1337  
    002032                        1338  div_ci:
                                  1339  	bump		arg1
    002032  aa   000001 040363 
                                  1340  	push_output
    002033  aa   000030 000206 
                                  1341  	bump		op1
    002034  aa   000001 740363 
                                  1342  
                                  1343  	swap		arg2
    002035  aa   000000 100202 
                                  1344  
                                  1345  	if_optype		constant,conv_div_ci
    002036  0a   002051 200227 
                                  1346  
                                  1347  	swap		arg2
    002037  aa   000000 100202 
                                  1348  	push_temp		real
    002040  aa   000000 001204 
                                  1349  	bump		op1	" temp becomes arg2
    002041  aa   000001 740363 
                                  1350  
                                  1351  	load		q,arg2
    002042  aa   000000 100656 
                                  1352  	use_eaq
    002043  aa   000000 000255 
    002044  aa  0 00465 7001 00   1353  	tsx0		pr0|integer_to_real
                                  1354  
                                  1355  	swap		arg2
    002045  aa   000000 100202 
                                  1356  	store		eaq,arg2,no_update
    002046  aa   000001 102357 
                                  1357  	pop		op1
    002047  aa   000000 740203 
                                  1358  	jump		div_cr.1
    002050  0a   002104 000220 
                                  1359  
    002051                        1360  conv_div_ci:
                                  1361  	convert_constant	real
    002051  aa   000000 001211 
                                  1362  
                                  1363  	swap		arg2
    002052  aa   000000 100202 
                                  1364  	load		eaq,arg2
    002053  aa   000000 102256 
                                  1365  	jump		div_cr.1
    002054  0a   002104 000220 
                                  1366  
    002055                        1367  div_rc:
                                  1368  	load		a,arg1
    002055  aa   000000 041256 
    002056                        1369  div_rc.01:
    002056  aa   400000 2360 03   1370  	ldq		=0.,du
                                  1371  	bump		arg2
    002057  aa   000001 100363 
                                  1372  	load_pr		pr2,arg2
    002060  aa   000003 100251 
                                  1373  	use_eaq
    002061  aa   000000 000255 
    002062  aa  0 00775 7001 00   1374  	tsx0		pr0|complex_divide
                                  1375  	drop		arg2
    002063  aa   000001 100364 
    002064  aa  6 00070 2371 00   1376  	ldaq		pr6|complex
                                  1377  	free_regs
    002065  aa   000004 000206 
                                  1378  	return		aq
    002066  aa   000001 001617 
                                  1379  
    002067                        1380  div_cr:
                                  1381  	bump		arg1
    002067  aa   000001 040363 
                                  1382  	bump		arg2
    002070  aa   000001 100363 
                                  1383  	push_output
    002071  aa   000030 000206 
                                  1384  	bump		op1
    002072  aa   000001 740363 
                                  1385  
                                  1386  	if_eaq		eaq,arg2,div_cr.1
    002073  0a   002104 102233 
                                  1387  	if_eaq		eaq,arg1,div_cr.2
    002074  0a   002106 042233 
                                  1388  
                                  1389  	load		ieaq,arg1
    002075  aa   000000 043256 
    002076  aa   100000 5650 00   1390  	fdv		arg2
    002077                        1391  div_cr.01:
                                  1392  	store		ieaq,op1,no_update
    002077  aa   000001 743357 
    002100  aa   040000 4310 00   1393  	fld		arg1
    002101  aa   100000 5650 00   1394  	fdv		arg2
                                  1395  	in_reg		eaq,op1
    002102  aa   000000 742260 
                                  1396  	return		op1
    002103  aa   000001 740217 
                                  1397  
    002104                        1398  div_cr.1:
    002104  aa   040001 5250 00   1399  	fdi		arg1+1
                                  1400  	jump		div_cr.01
    002105  0a   002077 000220 
                                  1401  
    002106                        1402  div_cr.2:
    002106  aa   100000 5650 00   1403  	fdv		arg2
                                  1404  	store		eaq,op1,no_update
    002107  aa   000001 742357 
    002110  aa   040001 4310 00   1405  	fld		arg1+1
    002111  aa   100000 5650 00   1406  	fdv		arg2
                                  1407  	in_reg		ieaq,op1
    002112  aa   000000 743260 
                                  1408  	return		op1
    002113  aa   000001 740217 
                                  1409  
    002114                        1410  div_dc:
                                  1411  	swap		arg1
    002114  aa   000000 040202 
                                  1412  	call		round_dp_to_real
    002115  0a   002307 000216 
                                  1413  	swap		arg1
    002116  aa   000000 040202 
                                  1414  	jump		div_rc
    002117  0a   002055 000220 
                                  1415  
    002120                        1416  div_cd:
                                  1417  	bump		arg1
    002120  aa   000001 040363 
                                  1418  	bump		arg2
    002121  aa   000001 100363 
                                  1419  	push_output
    002122  aa   000030 000206 
                                  1420  	bump		op1
    002123  aa   000001 740363 
                                  1421  
                                  1422  	if_eaq		deaq,arg2,div_cd.1
    002124  0a   002135 102633 
                                  1423  	if_eaq		eaq,arg1,div_cd.2
    002125  0a   002137 042233 
                                  1424  
                                  1425  	load		ieaq,arg1
    002126  aa   000000 043256 
    002127  aa   100000 5670 00   1426  	dfdv		arg2
    002130                        1427  div_cd.01:
                                  1428  	store		ieaq,op1,no_update
    002130  aa   000001 743357 
    002131  aa   040000 4310 00   1429  	fld		arg1
    002132  aa   100000 5670 00   1430  	dfdv		arg2
                                  1431  	in_reg		eaq,op1
    002133  aa   000000 742260 
                                  1432  	return		op1
    002134  aa   000001 740217 
                                  1433  
    002135                        1434  div_cd.1:
    002135  aa   040001 5250 00   1435  	fdi		arg1+1
                                  1436  	jump		div_cd.01
    002136  0a   002130 000220 
                                  1437  
    002137                        1438  div_cd.2:
    002137  aa   100000 5670 00   1439  	dfdv		arg2
                                  1440  	store		eaq,op1,no_update
    002140  aa   000001 742357 
    002141  aa   040001 4310 00   1441  	fld		arg1+1
    002142  aa   100000 5670 00   1442  	dfdv		arg2
                                  1443  	in_reg		ieaq,op1
    002143  aa   000000 743260 
                                  1444  	return		op1
    002144  aa   000001 740217 
                                  1445  
    002145                        1446  div_cc:
                                  1447  	load		aq,arg1
    002145  aa   000000 041656 
                                  1448  	bump		arg2
    002146  aa   000001 100363 
                                  1449  	load_pr		pr2,arg2
    002147  aa   000003 100251 
                                  1450  	use_eaq
    002150  aa   000000 000255 
    002151  aa  0 00775 7001 00   1451  	tsx0		pr0|complex_divide
                                  1452  	drop		arg2
    002152  aa   000001 100364 
    002153  aa  6 00070 2371 00   1453  	ldaq		pr6|complex
                                  1454  	free_regs
    002154  aa   000004 000206 
                                  1455  	return		aq
    002155  aa   000001 001617 
                                  1456  
    002156                        1457  div_e1:
                                  1458  	error		309,arg1
    002156  aa   000465 000702 
    002157  aa   000000 040303 
                        000001 
                                  1459  
    002160                        1460  div_e2:
                                  1461  	error		310,arg2
    002160  aa   000466 000702 
    002161  aa   000000 100303 
                        000001 
                                  1462  
    002162                        1463  div_tl:
                                  1464  	unless_dt		(int,typeless),div_e2
    002162  0a   002160 404226 
                                  1465  	dt_jump1		arg1,(div_tl.1,div_e1,div_e1,div_e1,div_e1,div_e1,div_tl.1)
    002163  aa   000007 040374 
    002164  00   002171 002156 
    002165  00   002156 002156 
    002166  00   002156 002156 
    002167  0a   002171 000000 
                        000007 
                                  1466  	load		tq,arg1
    002170  aa   000000 044656 
                                  1467  
    002171                        1468  div_tl.1:
                                  1469  	use_eaq
    002171  aa   000000 000255 
    002172  aa   100000 5060 00   1470  	div		arg2
                                  1471  	return		tq
    002173  aa   000001 004617 
                                  1472  
    002174                        1473  cv_load.ir:
                                  1474  	if_optype		constant,conv_ir
    002174  0a   002200 200227 
                                  1475  
                                  1476  	s_call		cv_int_to_float
    002175  0a   002234 000223 
                                  1477  
                                  1478  	set_inds_valid	eaq
    002176  aa   000000 002224 
                                  1479  	s_return
    002177  aa   000003 000206 
                                  1480  
    002200                        1481  conv_ir:
                                  1482  	convert_constant	real
    002200  aa   000000 001211 
                                  1483  	load		eaq,op1
    002201  aa   000000 742256 
                                  1484  	s_return
    002202  aa   000003 000206 
                                  1485  
                                  1486  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  1487  
    002203                        1488  cv_load.ri:
                                  1489  	if_optype		constant,conv_ri
    002203  0a   002211 200227 
                                  1490  
    002204                        1491  cv_load.ri_not_const:
                                  1492  	load		eaq,op1
    002204  aa   000000 742256 
                                  1493  	round		eaq
    002205  aa   000000 002354 
                                  1494  	s_call		cv_real_to_int
    002206  0a   002266 000223 
                                  1495  	set_inds_valid	q
    002207  aa   000000 000624 
                                  1496  	s_return
    002210  aa   000003 000206 
                                  1497  
    002211                        1498  conv_ri:
                                  1499  	convert_constant	int
    002211  aa   000000 000611 
                                  1500  	load		q,op1
    002212  aa   000000 740656 
                                  1501  	s_return
    002213  aa   000003 000206 
                                  1502  
                                  1503  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  1504  
    002214                        1505  cv_load.id:
                                  1506  	if_optype		constant,conv_id
    002214  0a   002220 200227 
                                  1507  
                                  1508  	s_call		cv_int_to_float
    002215  0a   002234 000223 
                                  1509  
                                  1510  	set_inds_valid	deaq
    002216  aa   000000 002624 
                                  1511  	s_return
    002217  aa   000003 000206 
                                  1512  
    002220                        1513  conv_id:
                                  1514  	convert_constant	dp
    002220  aa   000000 001611 
                                  1515  	load		deaq,op1
    002221  aa   000000 742656 
                                  1516  	s_return
    002222  aa   000003 000206 
                                  1517  
                                  1518  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  1519  
    002223                        1520  cv_load.di:
                                  1521  	if_optype		constant,conv_di
    002223  0a   002231 200227 
                                  1522  
    002224                        1523  cv_load.di_not_const:
                                  1524  	load		deaq,op1
    002224  aa   000000 742656 
                                  1525  	round		deaq
    002225  aa   000000 002754 
                                  1526  	s_call		cv_dp_to_int
    002226  0a   002271 000223 
                                  1527  	set_inds_valid	q
    002227  aa   000000 000624 
                                  1528  	s_return
    002230  aa   000003 000206 
                                  1529  
    002231                        1530  conv_di:
                                  1531  	convert_constant	int
    002231  aa   000000 000611 
                                  1532  	load		q,op1
    002232  aa   000000 740656 
                                  1533  	s_return
    002233  aa   000003 000206 
                                  1534  
                                  1535  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  1536  
    002234                        1537  cv_int_to_float:
                                  1538  	if_eaq		q,op1,cv_int_to_float.q_loaded
    002234  0a   002253 740633 
                                  1539  	if_hfp		cv_int_to_hfp
    002235  0a   002244 000734 
                                  1540  
    002236                        1541  cv_int_to_bfp:
    002236  aa   740000 2350 00   1542  	lda		op1
                                  1543  	emit_inst		3
    002237  aa   000003 040242 
    002240  aa   000044 7330 00   1544  	lrs		36
    002241  aa   216000 4110 03   1545  	lde		=71b25,du
    002242  aa   400000 4750 03   1546  	fad		=0.,du
                                  1547  
                                  1548  	s_return
    002243  aa   000003 000206 
                                  1549  
    002244                        1550  cv_int_to_hfp:
    002244  aa   740000 2350 00   1551  	lda		op1
                                  1552  	emit_inst		4
    002245  aa   000004 040242 
    002246  aa   000044 7330 00   1553  	lrs		36
    002247  aa   044000 4110 03   1554  	lde		=18b25,du
    002250  aa   400000 4750 03   1555  	fad		=0.,du
    002251  aa   000400 4610 03   1556  	fmp		P0.5H,du
                                  1557  
                                  1558  	s_return
    002252  aa   000003 000206 
                                  1559  
    002253                        1560  cv_q_to_real:
    002253                        1561  cv_q_to_dp:
    002253                        1562  cv_int_to_float.q_loaded:
                                  1563  	if_hfp		cv_int_to_hfp.q_loaded
    002253  0a   002261 000734 
                                  1564  
    002254                        1565  cv_int_to_bfp.q_loaded:
                                  1566  	emit_inst		3
    002254  aa   000003 040242 
    002255  aa   000044 7370 00   1567  	lls		36
    002256  aa   106000 4110 03   1568  	lde		=35b25,du
    002257  aa   400000 4750 03   1569  	fad		=0.,du
                                  1570  
                                  1571  	s_return
    002260  aa   000003 000206 
                                  1572  
    002261                        1573  cv_int_to_hfp.q_loaded:
                                  1574  	emit_inst		3
    002261  aa   000003 040242 
    002262  aa   000044 7370 00   1575  	lls		36
    002263  aa   022000 4110 03   1576  	lde		=9b25,du
    002264  aa   000400 4610 03   1577  	fmp		P0.5H,du
                                  1578  
                                  1579  	s_return
    002265  aa   000003 000206 
                                  1580  
                                  1581  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  1582  
    002266                        1583  cv_real_to_int:
                                  1584  	if_ind		eaq,cv_float_to_int
    002266  0a   002273 002310 
    002267  aa   400000 5150 03   1585  	fcmp		=0.,du
                                  1586  	jump		cv_float_to_int
    002270  0a   002273 000220 
                                  1587  
    002271                        1588  cv_dp_to_int:
                                  1589  	if_ind		deaq,cv_float_to_int
    002271  0a   002273 002710 
    002272  aa   400000 5150 03   1590  	fcmp		=0.,du
                                  1591  
    002273                        1592  cv_float_to_int:
                                  1593  	if_hfp		cv_hfp_to_int
    002273  0a   002301 000734 
                                  1594  
    002274                        1595  cv_bfp_to_int:
                                  1596  	use_eaq
    002274  aa   000000 000255 
    002275  aa   000002 6050 04   1597  	tpl		2,ic
    002276  aa  0 00242 4371 00   1598  	dufa		pr0|almost_one
    002277  aa   216000 4350 03   1599  	ufa		=71b25,du
                                  1600  
                                  1601  	s_return
    002300  aa   000003 000206 
                                  1602  
    002301                        1603  cv_hfp_to_int:
                                  1604  	use_eaq
    002301  aa   000000 000255 
    002302  aa   000002 6050 04   1605  	tpl		2,ic
    002303  aa  0 00242 4371 00   1606  	dufa		pr0|almost_one
    002304  aa   002100 4210 03   1607  	ufm		P2.0H,du
    002305  aa   044000 4350 03   1608  	ufa		=18b25,du
                                  1609  
                                  1610  	s_return
    002306  aa   000003 000206 
                                  1611  
                                  1612  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  1613  
                                  1614  "	This function expects the top of the stack to be a dp operand. The top of the stack
                                  1615  "	is replaced by a real constant derived from the dp one. If the dp operand is not a
                                  1616  "	constant, a real temp is created. Ref count should be such that use of eaq causes the
                                  1617  "	temp to be stored.
                                  1618  
    002307                        1619  round_dp_to_real:
                                  1620  	func		1
    002307  aa   000000 000615 
                                  1621  
                                  1622  	if_optype		constant,round_dp_const
    002310  0a   002314 200227 
                                  1623  	push_temp		real
    002311  aa   000000 001204 
                                  1624  	load		deaq,op2
    002312  aa   000000 702656 
                                  1625  	return		eaq
    002313  aa   000001 002217 
                                  1626  
    002314                        1627  round_dp_const:
                                  1628  	convert_constant	real
    002314  aa   000000 001211 
                                  1629  	return		op1
    002315  aa   000001 740217 
                                  1630  
    002316                        1631  from_logical:
                                  1632  	error		309,arg1
    002316  aa   000465 000702 
    002317  aa   000000 040303 
                        000001 
                                  1633  
    002320                        1634  from_char:
                                  1635  	error		310,arg1
    002320  aa   000466 000702 
    002321  aa   000000 040303 
                        000001 
                                  1636  
                                  1637  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  1638  
    002322                        1639  convert_to_int:
                                  1640  	func		1
    002322  aa   000000 000615 
                                  1641  
                                  1642  	dt_jump1		arg1,(to_int.int,to_int.real,to_int.dp,to_int.cmpx,from_logical,from_char,to_int.tl)
    002323  aa   000007 040374 
    002324  00   002330 002332 
    002325  00   002334 002332 
    002326  00   002316 002320 
    002327  0a   002330 000000 
                        000007 
                                  1643  
    002330                        1644  to_int.tl:
    002330                        1645  to_int.int:
                                  1646  	load		q,arg1
    002330  aa   000000 040656 
                                  1647  	return		q
    002331  aa   000001 000617 
                                  1648  
    002332                        1649  to_int.real:
    002332                        1650  to_int.cmpx:
                                  1651  	s_call		cv_load.ri
    002332  0a   002203 000223 
                                  1652  	return		q
    002333  aa   000001 000617 
                                  1653  
    002334                        1654  to_int.dp:
                                  1655  	s_call		cv_load.di
    002334  0a   002223 000223 
                                  1656  	return		q
    002335  aa   000001 000617 
                                  1657  
    002336                        1658  convert_to_real:
                                  1659  	func		1
    002336  aa   000000 000615 
                                  1660  
                                  1661  	dt_jump1		arg1,(to_real.int,to_real.real,to_real.dp,to_real.cmpx,from_logical,from_char)
    002337  aa   000006 040374 
    002340  00   002343 002345 
    002341  00   002347 002351 
    002342  00   002316 002320 
                        000006 
                                  1662  
    002343                        1663  to_real.int:
                                  1664  	s_call		cv_load.ir
    002343  0a   002174 000223 
                                  1665  	return		eaq
    002344  aa   000001 002217 
                                  1666  
    002345                        1667  to_real.real:
                                  1668  	load		eaq,arg1
    002345  aa   000000 042256 
                                  1669  	return		eaq
    002346  aa   000001 002217 
                                  1670  
    002347                        1671  to_real.dp:
                                  1672  	load		deaq,arg1
    002347  aa   000000 042656 
                                  1673  	return		eaq
    002350  aa   000001 002217 
                                  1674  
    002351                        1675  to_real.cmpx:
                                  1676  	load		eaq,arg1
    002351  aa   000000 042256 
                                  1677  	return		eaq
    002352  aa   000001 002217 
                                  1678  
    002353                        1679  convert_to_dp:
                                  1680  	func		1
    002353  aa   000000 000615 
                                  1681  
                                  1682  	dt_jump1		arg1,(to_dp.int,to_dp.real,to_dp.dp,to_dp.cmpx,from_logical,from_char)
    002354  aa   000006 040374 
    002355  00   002360 002362 
    002356  00   002364 002366 
    002357  00   002316 002320 
                        000006 
                                  1683  
    002360                        1684  to_dp.int:
                                  1685  	s_call		cv_load.id
    002360  0a   002214 000223 
                                  1686  	return		deaq
    002361  aa   000001 002617 
                                  1687  
    002362                        1688  to_dp.real:
                                  1689  	load		eaq,arg1
    002362  aa   000000 042256 
                                  1690  	return		deaq
    002363  aa   000001 002617 
                                  1691  
    002364                        1692  to_dp.dp:
                                  1693  	load		deaq,arg1
    002364  aa   000000 042656 
                                  1694  	return		deaq
    002365  aa   000001 002617 
                                  1695  
    002366                        1696  to_dp.cmpx:
                                  1697  	load		eaq,arg1
    002366  aa   000000 042256 
                                  1698  	return		deaq
    002367  aa   000001 002617 
                                  1699  
    002370                        1700  convert_to_cmpx:
                                  1701  	func		1
    002370  aa   000000 000615 
                                  1702  
                                  1703  	dt_jump1		arg1,(to_cmpx.int,to_cmpx.real,to_cmpx.dp,to_cmpx.cmpx,from_logical,from_char)
    002371  aa   000006 040374 
    002372  00   002375 002404 
    002373  00   002412 002420 
    002374  00   002316 002320 
                        000006 
                                  1704  
    002375                        1705  to_cmpx.int:
                                  1706  	push_output
    002375  aa   000030 000206 
                                  1707  	bump		op1
    002376  aa   000001 740363 
    002377  aa   400000 4310 03   1708  	fld		=0.0,du
    002400  aa   740001 4550 00   1709  	fst		op1+1
                                  1710  	swap		op2
    002401  aa   000000 700202 
                                  1711  	s_call		cv_load.ir
    002402  0a   002174 000223 
                                  1712  	return		eaq
    002403  aa   000001 002217 
                                  1713  
    002404                        1714  to_cmpx.real:
                                  1715  	push_output
    002404  aa   000030 000206 
                                  1716  	bump		op1
    002405  aa   000001 740363 
    002406  aa   400000 4310 03   1717  	fld		=0.0,du
    002407  aa   740001 4550 00   1718  	fst		op1+1
                                  1719  	load		eaq,arg1
    002410  aa   000000 042256 
                                  1720  	return		eaq
    002411  aa   000001 002217 
                                  1721  
    002412                        1722  to_cmpx.dp:
                                  1723  	push_output
    002412  aa   000030 000206 
                                  1724  	bump		op1
    002413  aa   000001 740363 
    002414  aa   400000 4310 03   1725  	fld		=0.0,du
    002415  aa   740001 4550 00   1726  	fst		op1+1
                                  1727  	load		deaq,arg1
    002416  aa   000000 042656 
                                  1728  	return		eaq
    002417  aa   000001 002217 
                                  1729  
    002420                        1730  to_cmpx.cmpx:
                                  1731  	load		aq,arg1
    002420  aa   000000 041656 
                                  1732  	return		aq
    002421  aa   000001 001617 
                                  1733  
    002422                        1734  exponentiation:
                                  1735  	func		2
    002422  aa   000000 001215 
                                  1736  
                                  1737  	dt_jump		(exponentiation_ii,exponentiation_ri,exponentiation_di,exponentiation_ci,exponentiation_ir,exponentiation_rr,exponentiation_dr,exponentiation_cr,exponentiation_id,exponentiation_rd,exponentiation_dd,exponentiation_cd,exponentiation_ic,exponentiation_rc,exponentiation_dc,exponentiation_cc,exponentiation_e2,exponentiation_e1,exponentiation_e2,exponentiation_e1)
    002423  aa   000024 000235 
    002424  00   002436 002456 
    002425  00   002476 002600 
    002426  00   002451 002511 
    002427  00   002542 002635 
    002430  00   002471 002537 
    002431  00   002524 002634 
    002432  00   002555 002627 
    002433  00   002624 002656 
    002434  00   002674 002672 
    002435  00   002674 002672 
                        000024 
                                  1738  
    002436                        1739  exponentiation_ii:
                                  1740  	push_temp		32
    002436  aa   000040 000204 
                                  1741  
                                  1742  	load		q,arg1
    002437  aa   000000 040656 
                                  1743  	bump		arg2
    002440  aa   000001 100363 
                                  1744  	load_pr		pr2,op1
    002441  aa   000003 740251 
                                  1745  	load_pr		pr1,arg2
    002442  aa   000002 100251 
                                  1746  	use_eaq
    002443  aa   000000 000255 
                                  1747  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr3,pr4,pr5,pr7)
    002444  aa   377160 000250 
    002445  aa  0 01351 2731 00   1748  	tsp3		pr0|int_p_int
                                  1749  	drop		arg2
    002446  aa   000001 100364 
                                  1750  	free_regs
    002447  aa   000004 000206 
                                  1751  	return		q
    002450  aa   000001 000617 
                                  1752  
    002451                        1753  exponentiation_ir:
                                  1754  	push_temp		32
    002451  aa   000040 000204 
                                  1755  
                                  1756  	swap		arg1
    002452  aa   000000 040202 
                                  1757  
                                  1758  	s_call		cv_load.ir
    002453  0a   002174 000223 
                                  1759  
                                  1760  	swap		arg1
    002454  aa   000000 040202 
                                  1761  
                                  1762  	jump		exponentiation_rr.02
    002455  0a   002513 000220 
                                  1763  
    002456                        1764  exponentiation_ri:
                                  1765  	push_temp		32
    002456  aa   000040 000204 
                                  1766  
                                  1767  	load		eaq,arg1
    002457  aa   000000 042256 
                                  1768  	bump		arg2
    002460  aa   000001 100363 
                                  1769  	load_pr		pr2,op1
    002461  aa   000003 740251 
                                  1770  	load_pr		pr1,arg2
    002462  aa   000002 100251 
                                  1771  	use_eaq
    002463  aa   000000 000255 
                                  1772  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr3,pr4,pr5,pr7)
    002464  aa   377160 000250 
    002465  aa  0 01350 2731 00   1773  	tsp3		pr0|real_p_int
                                  1774  	drop		arg2
    002466  aa   000001 100364 
                                  1775  	free_regs
    002467  aa   000004 000206 
                                  1776  	return		eaq
    002470  aa   000001 002217 
                                  1777  
    002471                        1778  exponentiation_id:
                                  1779  	push_temp		32
    002471  aa   000040 000204 
                                  1780  
                                  1781  	swap		arg1
    002472  aa   000000 040202 
                                  1782  
                                  1783  	s_call		cv_load.id
    002473  0a   002214 000223 
                                  1784  
                                  1785  	swap		arg1
    002474  aa   000000 040202 
                                  1786  
                                  1787  	jump		exponentiation_dd.02
    002475  0a   002526 000220 
                                  1788  
    002476                        1789  exponentiation_di:
                                  1790  	push_temp		32
    002476  aa   000040 000204 
                                  1791  
                                  1792  	load		deaq,arg1
    002477  aa   000000 042656 
                                  1793  	bump		arg2
    002500  aa   000001 100363 
                                  1794  	load_pr		pr2,op1
    002501  aa   000003 740251 
                                  1795  	load_pr		pr1,arg2
    002502  aa   000002 100251 
                                  1796  	use_eaq
    002503  aa   000000 000255 
                                  1797  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr3,pr4,pr5,pr7)
    002504  aa   377160 000250 
    002505  aa  0 01346 2731 00   1798  	tsp3		pr0|dbl_p_int
                                  1799  	drop		arg2
    002506  aa   000001 100364 
                                  1800  	free_regs
    002507  aa   000004 000206 
                                  1801  	return		deaq
    002510  aa   000001 002617 
                                  1802  
    002511                        1803  exponentiation_rr:
                                  1804  	push_temp		32
    002511  aa   000040 000204 
                                  1805  
                                  1806  	load		eaq,arg1
    002512  aa   000000 042256 
    002513                        1807  exponentiation_rr.02:
                                  1808  	bump		arg2
    002513  aa   000001 100363 
                                  1809  	load_pr		pr2,op1
    002514  aa   000003 740251 
                                  1810  	load_pr		pr1,arg2
    002515  aa   000002 100251 
                                  1811  	use_eaq
    002516  aa   000000 000255 
                                  1812  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr3,pr4,pr5,pr7)
    002517  aa   377160 000250 
    002520  aa  0 01347 2731 00   1813  	tsp3		pr0|real_p_real
                                  1814  	drop		arg2
    002521  aa   000001 100364 
                                  1815  	free_regs
    002522  aa   000004 000206 
                                  1816  	return		eaq
    002523  aa   000001 002217 
                                  1817  
    002524                        1818  exponentiation_dd:
                                  1819  	push_temp		32
    002524  aa   000040 000204 
                                  1820  
                                  1821  	load		deaq,arg1
    002525  aa   000000 042656 
    002526                        1822  exponentiation_dd.02:
                                  1823  	bump		arg2
    002526  aa   000001 100363 
                                  1824  	load_pr		pr2,op1
    002527  aa   000003 740251 
                                  1825  	load_pr		pr1,arg2
    002530  aa   000002 100251 
                                  1826  	use_eaq
    002531  aa   000000 000255 
                                  1827  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr3,pr4,pr5,pr7)
    002532  aa   377160 000250 
    002533  aa  0 01345 2731 00   1828  	tsp3		pr0|dbl_p_dbl
                                  1829  	drop		arg2
    002534  aa   000001 100364 
                                  1830  	free_regs
    002535  aa   000004 000206 
                                  1831  	return		deaq
    002536  aa   000001 002617 
                                  1832  
    002537                        1833  exponentiation_rd:
                                  1834  	push_temp		32
    002537  aa   000040 000204 
                                  1835  
                                  1836  	load		eaq,arg1
    002540  aa   000000 042256 
                                  1837  	jump		exponentiation_dd.02
    002541  0a   002526 000220 
                                  1838  
    002542                        1839  exponentiation_dr:
                                  1840  	push_temp		32
    002542  aa   000040 000204 
                                  1841  
                                  1842  	load		deaq,arg1
    002543  aa   000000 042656 
                                  1843  	bump		arg2
    002544  aa   000001 100363 
                                  1844  	load_pr		pr2,op1
    002545  aa   000003 740251 
                                  1845  	load_pr		pr1,arg2
    002546  aa   000002 100251 
                                  1846  	use_eaq
    002547  aa   000000 000255 
                                  1847  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr3,pr4,pr5,pr7)
    002550  aa   377160 000250 
    002551  aa  0 01344 2731 00   1848  	tsp3		pr0|dbl_p_real
                                  1849  	drop		arg2
    002552  aa   000001 100364 
                                  1850  	free_regs
    002553  aa   000004 000206 
                                  1851  	return		deaq
    002554  aa   000001 002617 
                                  1852  
    002555                        1853  exponentiation_ic:
                                  1854  	push_temp		32
    002555  aa   000040 000204 
                                  1855  	load_pr		pr2,op1
    002556  aa   000003 740251 
                                  1856  	swap		arg1
    002557  aa   000000 040202 
                                  1857  
                                  1858  	if_optype		constant,conv_exponentiation_ic
    002560  0a   002574 200227 
                                  1859  
                                  1860  	swap		arg1
    002561  aa   000000 040202 
                                  1861  	push_output
    002562  aa   000030 000206 
                                  1862  	bump		op1,3		" temp becomes arg1 and is used 3 times
    002563  aa   000003 740363 
                                  1863  	load		q,arg1
    002564  aa   000000 040656 
                                  1864  	use_eaq
    002565  aa   000000 000255 
    002566  aa  0 00465 7001 00   1865  	tsx0		pr0|integer_to_real
                                  1866  	store		eaq,op1,no_update
    002567  aa   000001 742357 
    002570  aa   400000 4310 03   1867  	fld		=0.,du
    002571  aa   740001 4550 00   1868  	fst		op1+1
    002572  aa   740000 2370 00   1869  	ldaq		op1
                                  1870  	jump		exponentiation_cc.01
    002573  0a   002661 000220 
                                  1871  
    002574                        1872  conv_exponentiation_ic:
                                  1873  	convert_constant	cmpx
    002574  aa   000000 002211 
                                  1874  
                                  1875  	swap		arg1
    002575  aa   000000 040202 
                                  1876  	load		aq,arg1
    002576  aa   000000 041656 
                                  1877  	jump		exponentiation_cc.01
    002577  0a   002661 000220 
                                  1878  
    002600                        1879  exponentiation_ci:
                                  1880  	push_temp		32
    002600  aa   000040 000204 
                                  1881  	load_pr		pr2,op1
    002601  aa   000003 740251 
                                  1882  	push_output
    002602  aa   000030 000206 
                                  1883  	bump		op1,2		" temp is used at least twice
    002603  aa   000002 740363 
                                  1884  
                                  1885  	swap		arg2
    002604  aa   000000 100202 
                                  1886  
                                  1887  	if_optype		constant,conv_exponentiation_ci
    002605  0a   002617 200227 
                                  1888  
                                  1889  	swap		arg2
    002606  aa   000000 100202 
                                  1890  	bump		op1,2		" conversion requires 2 more refs
    002607  aa   000002 740363 
                                  1891  	load		q,arg2
    002610  aa   000000 100656 
                                  1892  	use_eaq
    002611  aa   000000 000255 
    002612  aa  0 00465 7001 00   1893  	tsx0		pr0|integer_to_real
                                  1894  	store		eaq,op1,no_update
    002613  aa   000001 742357 
    002614  aa   400000 4310 03   1895  	fld		=0.,du
    002615  aa   740001 4550 00   1896  	fst		op1+1
                                  1897  	jump		exponentiation_cr.01
    002616  0a   002644 000220 
                                  1898  
    002617                        1899  conv_exponentiation_ci:
                                  1900  	convert_constant	cmpx
    002617  aa   000000 002211 
                                  1901  
                                  1902  	swap		arg2
    002620  aa   000000 100202 
                                  1903  	load		aq,arg2
    002621  aa   000000 101656 
    002622  aa   740000 7570 00   1904  	staq		op1
                                  1905  	jump		exponentiation_cr.01
    002623  0a   002644 000220 
                                  1906  
    002624                        1907  exponentiation_dc:
                                  1908  	swap		arg1
    002624  aa   000000 040202 
                                  1909  	call		round_dp_to_real
    002625  0a   002307 000216 
                                  1910  	swap		arg1
    002626  aa   000000 040202 
                                  1911  
    002627                        1912  exponentiation_rc:
                                  1913  	push_temp		32
    002627  aa   000040 000204 
                                  1914  	load_pr		pr2,op1
    002630  aa   000003 740251 
                                  1915  
                                  1916  	load		a,arg1
    002631  aa   000000 041256 
    002632  aa   400000 2360 03   1917  	ldq		=0.,du
                                  1918  	jump		exponentiation_cc.01
    002633  0a   002661 000220 
                                  1919  
    002634                        1920  exponentiation_cd:
                                  1921  	call		round_dp_to_real
    002634  0a   002307 000216 
                                  1922  
    002635                        1923  exponentiation_cr:
                                  1924  	push_temp		32
    002635  aa   000040 000204 
                                  1925  	load_pr		pr2,op1
    002636  aa   000003 740251 
                                  1926  	push_output
    002637  aa   000030 000206 
                                  1927  	bump		op1,2		" temp is used twice
    002640  aa   000002 740363 
                                  1928  
                                  1929  	load		a,arg2
    002641  aa   000000 101256 
    002642  aa   400000 2360 03   1930  	ldq		=0.,du
    002643  aa   740000 7570 00   1931  	staq		op1
    002644                        1932  exponentiation_cr.01:
    002644  aa   040000 2370 00   1933  	ldaq		arg1
                                  1934  	bump		op1
    002645  aa   000001 740363 
                                  1935  	load_pr		pr1,op1
    002646  aa   000002 740251 
                                  1936  	use_eaq
    002647  aa   000000 000255 
                                  1937  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr3,pr4,pr5,pr7)
    002650  aa   377160 000250 
    002651  aa  0 01416 2731 00   1938  	tsp3		pr0|cmpx_p_cmpx
                                  1939  	drop		op1
    002652  aa   000001 740364 
    002653  aa  6 00050 2371 00   1940  	ldaq		pr6|temp_pt
                                  1941  	free_regs
    002654  aa   000004 000206 
                                  1942  	return		aq
    002655  aa   000001 001617 
                                  1943  
    002656                        1944  exponentiation_cc:
                                  1945  	push_temp		32
    002656  aa   000040 000204 
                                  1946  	load_pr		pr2,op1
    002657  aa   000003 740251 
                                  1947  	load		aq,arg1
    002660  aa   000000 041656 
    002661                        1948  exponentiation_cc.01:
                                  1949  	bump		arg2
    002661  aa   000001 100363 
                                  1950  	load_pr		pr1,arg2
    002662  aa   000002 100251 
                                  1951  	use_eaq
    002663  aa   000000 000255 
                                  1952  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr3,pr4,pr5,pr7)
    002664  aa   377160 000250 
    002665  aa  0 01416 2731 00   1953  	tsp3		pr0|cmpx_p_cmpx
                                  1954  	drop		arg2
    002666  aa   000001 100364 
    002667  aa  6 00050 2371 00   1955  	ldaq		pr6|temp_pt
                                  1956  	free_regs
    002670  aa   000004 000206 
                                  1957  	return		aq
    002671  aa   000001 001617 
                                  1958  
    002672                        1959  exponentiation_e1:
                                  1960  	error		309,arg1
    002672  aa   000465 000702 
    002673  aa   000000 040303 
                        000001 
                                  1961  
    002674                        1962  exponentiation_e2:
                                  1963  	error		310,arg2
    002674  aa   000466 000702 
    002675  aa   000000 100303 
                        000001 
                                  1964  
                                  1965  negate:	func		1
    002676  aa   000000 000615 
                                  1966  
                                  1967  	dt_jump1		op1,(negate_i,negate_r,negate_d,negate_c,negate_l,negate_h,negate_t)
    002677  aa   000007 740374 
    002700  00   002706 002710 
    002701  00   002714 002720 
    002702  00   002704 002704 
    002703  0a   002706 000000 
                        000007 
                                  1968  
    002704                        1969  negate_l:
    002704                        1970  negate_h:
                                  1971  	error		315,op1
    002704  aa   000473 000702 
    002705  aa   000000 740303 
                        000001 
                                  1972  
    002706                        1973  negate_i:
    002706                        1974  negate_t:
    002706  aa   740000 3360 00   1975  	lcq		op1
                                  1976  	return		q
    002707  aa   000001 000617 
                                  1977  
    002710                        1978  negate_r:
                                  1979  	load		eaq,op1
    002710  aa   000000 742256 
                                  1980  	emit_inst		1
    002711  aa   000001 040242 
    002712  aa   000000 5130 00   1981  	fneg
                                  1982  	return		eaq
    002713  aa   000001 002217 
                                  1983  
    002714                        1984  negate_d:
                                  1985  	load		deaq,op1
    002714  aa   000000 742656 
                                  1986  	emit_inst		1
    002715  aa   000001 040242 
    002716  aa   000000 5130 00   1987  	fneg
                                  1988  	return		deaq
    002717  aa   000001 002617 
                                  1989  
    002720                        1990  negate_c:
                                  1991  	push_output
    002720  aa   000030 000206 
                                  1992  	bump		op1
    002721  aa   000001 740363 
                                  1993  	bump		op2
    002722  aa   000001 700363 
                                  1994  
                                  1995  	if_eaq		eaq,op2,negate_c.1
    002723  0a   002735 702233 
                                  1996  
                                  1997  	load		ieaq,op2
    002724  aa   000000 703256 
                                  1998  	emit_inst		1
    002725  aa   000001 040242 
    002726  aa   000000 5130 00   1999  	fneg
                                  2000  	store		ieaq,op1,no_update
    002727  aa   000001 743357 
                                  2001  	load		eaq,op2
    002730  aa   000000 702256 
                                  2002  	emit_inst		1
    002731  aa   000001 040242 
    002732  aa   000000 5130 00   2003  	fneg
                                  2004  	in_reg		eaq,op1
    002733  aa   000000 742260 
                                  2005  	return		op1
    002734  aa   000001 740217 
                                  2006  
    002735                        2007  negate_c.1:
                                  2008  	emit_inst		1
    002735  aa   000001 040242 
    002736  aa   000000 5130 00   2009  	fneg
                                  2010  	store		eaq,op1,no_update
    002737  aa   000001 742357 
                                  2011  	load		ieaq,op2
    002740  aa   000000 703256 
                                  2012  	emit_inst		1
    002741  aa   000001 040242 
    002742  aa   000000 5130 00   2013  	fneg
                                  2014  	in_reg		ieaq,op1
    002743  aa   000000 743260 
                                  2015  	return		op1
    002744  aa   000001 740217 
                                  2016  
                                  2017  builtin:	func		2			last assigned number = 93
    002745  aa   000000 001215 
                                  2018  "
                                  2019  "	The builtin code depends on 3 indexed operators. Two uses are here. The other
                                  2020  "	appears in the cv_bif_to_external code. Remember to change ALL three.
                                  2021  "
                                  2022  
                                  2023  	push_bif_index	arg1
    002746  aa   000000 040267 
                                  2024  	push_count_indexed	arg3,(1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,2,2,2,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,2,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,2,-1,1,1,3,2,2,2,2,-1,-1)
    002747  aa   000135 140212 
    002750  aa   000001 000001 
    002751  aa   000001 000001 
    002752  aa   000001 000001 
    002753  aa   000001 000001 
    002754  aa   000001 000001 
    002755  aa   000001 000002 
    002756  aa   000002 000001 
    002757  aa   000001 000001 
    002760  aa   000002 000002 
    002761  aa   000002 000001 
    002762  aa   000001 000001 
    002763  aa   777777 777777 
    002764  aa   777777 777777 
    002765  aa   777777 777777 
    002766  aa   777777 777777 
    002767  aa   777777 777777 
    002770  aa   777777 777777 
    002771  aa   000002 000002 
    002772  aa   000002 000002 
    002773  aa   000002 000002 
    002774  aa   000001 000001 
    002775  aa   000001 000001 
    002776  aa   000001 000001 
    002777  aa   000001 000001 
    003000  aa   000001 000001 
    003001  aa   000001 000001 
    003002  aa   000001 000001 
    003003  aa   000001 000001 
    003004  aa   777777 000001 
    003005  aa   000001 000001 
    003006  aa   000001 000001 
    003007  aa   000001 000001 
    003010  aa   000001 000001 
    003011  aa   000002 000001 
    003012  aa   000002 000002 
    003013  aa   000002 000002 
    003014  aa   000001 000001 
    003015  aa   000001 000001 
    003016  aa   000001 000001 
    003017  aa   000001 000001 
    003020  aa   000001 000001 
    003021  aa   000002 777777 
    003022  aa   000001 000001 
    003023  aa   000003 000002 
    003024  aa   000002 000002 
    003025  aa   000002 777777 
    003026  aa   777777 000000 
                        000135 
                                  2025  
                                  2026  	if		arg4,<,0,builtin_var
    003027  0a   003033 200237 
                                  2027  	if		arg2,=,op1,builtin2
    003030  0a   003033 111637 
                                  2028  
    003031                        2029  wrong_number.p:
                                  2030  	error		319,arg1
    003031  aa   000477 000702 
    003032  aa   000000 040303 
                        000001 
                                  2031  
    003033                        2032  builtin_var:
    003033                        2033  builtin2:
                                  2034  	push_operand	builtin3
    003033  0a   003035 000350 
                                  2035  	jump		builtin2
    003034  0a   003033 000220 
                                  2036  
    003035                        2037  builtin3:
                                  2038  	jump_indexed	arg3,(abs,iabs,dabs,cabs,alog,dlog,clog,alog10,dlog10,atan,datan,atan2,datan2,cos,dcos,ccos,dim,idim,ddim,exp,dexp,cexp,max,amax0,amax1,max0,max1,dmax1,min,amin0,amin1,min0,min1,dmin1,mod,amod,dmod,sign,isign,dsign,sin,dsin,csin,sqrt,dsqrt,csqrt,tanh,int_builtin,aint,idint,float,ifix,sngl,real_builtin,aimag,dble,cmplx,conjg,tan,dtan,asin,dasin,acos,dacos,char_builtin,ichar,index,len,lge,lgt,lle,llt,cosh,sinh,dcosh,dsinh,dtanh,dint,anint,dnint,nint,idnint,dprod,and.tl,bool.tl,compl.tl,fld.tl,ilr.tl,ils.tl,irl.tl,irs.tl,or.tl,xor.tl)
    003035  aa   000135 140241 
    003036  00   003137 003144 
    003037  00   003161 003170 
    003040  00   003205 003224 
    003041  00   003235 003247 
    003042  00   003266 003277 
    003043  00   003316 003327 
    003044  00   003416 003436 
    003045  00   003455 003466 
    003046  00   003502 003515 
    003047  00   003577 003645 
    003050  00   003663 003674 
    003051  00   003710 004104 
    003052  00   004130 004155 
    003053  00   004176 004230 
    003054  00   004255 004451 
    003055  00   004475 004522 
    003056  00   004543 004575 
    003057  00   004622 004670 
    003060  00   004704 004723 
    003061  00   004736 005007 
    003062  00   005142 005161 
    003063  00   005172 005205 
    003064  00   005224 005235 
    003065  00   005250 005374 
    003066  00   005420 005415 
    003067  00   005525 005413 
    003070  00   005527 005506 
    003071  00   005532 005536 
    003072  00   005554 005706 
    003073  00   005731 005750 
    003074  00   005761 006000 
    003075  00   006011 006030 
    003076  00   006041 006054 
    003077  00   006073 006141 
    003100  00   006144 006155 
    003101  00   006166 006177 
    003102  00   005340 005304 
    003103  00   005371 005335 
    003104  00   005301 005437 
    003105  00   005442 005461 
    003106  00   005464 005503 
    003107  00   006210 006220 
    003110  00   006235 006240 
    003111  00   006245 006247 
    003112  00   006265 006303 
    003113  00   006321 006337 
    003114  0a   006354 000000 
                        000135 
                                  2039  
    003115                        2040  mm_ret_q:
                                  2041  	push_output
    003115  aa   000030 000206 
                                  2042  	in_reg		q,op1
    003116  aa   000000 740660 
                                  2043  	use_ind
    003117  aa   000007 000206 
                                  2044  	return		op1
    003120  aa   000001 740217 
                                  2045  
    003121                        2046  mm_ret_eaq:
                                  2047  	push_output
    003121  aa   000030 000206 
                                  2048  	in_reg		eaq,op1
    003122  aa   000000 742260 
                                  2049  	use_ind
    003123  aa   000007 000206 
                                  2050  	return		op1
    003124  aa   000001 740217 
                                  2051  
    003125                        2052  mm_ret_deaq:
                                  2053  	push_output
    003125  aa   000030 000206 
                                  2054  	in_reg		deaq,op1
    003126  aa   000000 742660 
                                  2055  	use_ind
    003127  aa   000007 000206 
                                  2056  	return		op1
    003130  aa   000001 740217 
                                  2057  
    003131                        2058  mm_ret_tq:
                                  2059  	push_output
    003131  aa   000030 000206 
                                  2060  	in_reg		tq,op1
    003132  aa   000000 744660 
                                  2061  	return		op1
    003133  aa   000001 740217 
                                  2062  
    003134                        2063  wrong_type.p:
                                  2064  	error		320,arg1,op1
    003134  aa   000500 001302 
    003135  aa   000000 040303 
    003136  aa   000000 740303 
                        000002 
                                  2065  
    003137                        2066  abs:						" builtin 01
                                  2067  	dt_jump1		op1,(iabs.1,abs.1,dabs.1,cabs.1,wrong_type.p,wrong_type.p,wrong_type.p)
    003137  aa   000007 740374 
    003140  00   003145 003153 
    003141  00   003162 003171 
    003142  00   003134 003134 
    003143  0a   003134 000000 
                        000007 
                                  2068  
    003144                        2069  iabs:						" builtin 02
                                  2070  	unless_dt		int,iabs.p
    003144  0a   003202 400226 
    003145                        2071  iabs.1:
                                  2072  	load_for_test	q,arg5
    003145  aa   000000 240761 
                                  2073  	use_eaq		protect_indicators		" save all temps before transfer
    003146  aa   000001 000255 
    003147  aa   000003 6050 04   2074  	tpl		3,ic
    003150  aa  0 00110 6761 00   2075  	erq		pr0|all_ones
    003151  aa   000001 0760 07   2076  	adq		1,dl
                                  2077  	return		q
    003152  aa   000001 000617 
                                  2078  
    003153                        2079  abs.1:
                                  2080  	load_for_test	eaq,arg5
    003153  aa   000000 242361 
                                  2081  	use_eaq		protect_indicators		" save all temps before transfer
    003154  aa   000001 000255 
    003155  aa   000002 6050 04   2082  	tpl		2,ic
                                  2083  	emit_inst		1
    003156  aa   000001 040242 
    003157  aa   000000 5130 00   2084  	fneg
                                  2085  	return		eaq
    003160  aa   000001 002217 
                                  2086  
    003161                        2087  dabs:						" builtin 03
                                  2088  	unless_dt		dp,dabs.p
    003161  0a   003203 100226 
    003162                        2089  dabs.1:
                                  2090  	load_for_test	deaq,arg5
    003162  aa   000000 242761 
                                  2091  	use_eaq		protect_indicators		" save all temps before transfer
    003163  aa   000001 000255 
    003164  aa   000002 6050 04   2092  	tpl		2,ic
                                  2093  	emit_inst		1
    003165  aa   000001 040242 
    003166  aa   000000 5130 00   2094  	fneg
                                  2095  	return		deaq
    003167  aa   000001 002617 
                                  2096  
    003170                        2097  cabs:						" builtin 04
                                  2098  	unless_dt		cmpx,cabs.p
    003170  0a   003204 040226 
    003171                        2099  cabs.1:
                                  2100  	load		aq,arg5
    003171  aa   000000 241656 
                                  2101  	push_temp		32
    003172  aa   000040 000204 
                                  2102  	load_pr		pr2,op1
    003173  aa   000003 740251 
                                  2103  	use_eaq
    003174  aa   000000 000255 
                                  2104  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    003175  aa   377560 000250 
    003176  aa  0 01406 2731 00   2105  	tsp3		pr0|cabs_
    003177  aa  6 00050 4311 00   2106  	fld		pr6|temp_pt
                                  2107  	free_regs
    003200  aa   000004 000206 
                                  2108  	return		eaq
    003201  aa   000001 002217 
                                  2109  
    003202                        2110  iabs.p:
                                  2111  	jump		bu_dt5.p
    003202  0a   006371 000220 
                                  2112  
    003203                        2113  dabs.p:
                                  2114  	jump		bu_dt5.p
    003203  0a   006371 000220 
                                  2115  
    003204                        2116  cabs.p:
                                  2117  	jump		bu_dt5.p
    003204  0a   006371 000220 
                                  2118  
    003205                        2119  alog:						" builtin 05
                                  2120  	dt_jump1		op1,(alog_i,alog.1,dlog.1,clog.1,wrong_type.p,wrong_type.p,wrong_type.p)
    003205  aa   000007 740374 
    003206  00   003214 003212 
    003207  00   003225 003236 
    003210  00   003134 003134 
    003211  0a   003134 000000 
                        000007 
                                  2121  
    003212                        2122  alog.1:
                                  2123  	load		eaq,arg5
    003212  aa   000000 242256 
                                  2124  	jump		alog.2
    003213  0a   003215 000220 
                                  2125  
    003214                        2126  alog_i:
                                  2127  	s_call		cv_load.ir
    003214  0a   002174 000223 
                                  2128  
    003215                        2129  alog.2:
                                  2130  	push_temp		32
    003215  aa   000040 000204 
                                  2131  	load_pr		pr2,op1
    003216  aa   000003 740251 
                                  2132  	use_eaq
    003217  aa   000000 000255 
                                  2133  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    003220  aa   377560 000250 
    003221  aa  0 01312 2731 00   2134  	tsp3		pr0|log_
                                  2135  	free_regs
    003222  aa   000004 000206 
                                  2136  	return		eaq
    003223  aa   000001 002217 
                                  2137  
    003224                        2138  dlog:						" builtin 06
                                  2139  	unless_dt		dp,bu_dt5.p
    003224  0a   006371 100226 
    003225                        2140  dlog.1:
                                  2141  	load		deaq,arg5
    003225  aa   000000 242656 
                                  2142  	push_temp		32
    003226  aa   000040 000204 
                                  2143  	load_pr		pr2,op1
    003227  aa   000003 740251 
                                  2144  	use_eaq
    003230  aa   000000 000255 
                                  2145  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    003231  aa   377560 000250 
    003232  aa  0 01333 2731 00   2146  	tsp3		pr0|dlog_
                                  2147  	free_regs
    003233  aa   000004 000206 
                                  2148  	return		deaq
    003234  aa   000001 002617 
                                  2149  
    003235                        2150  clog:						" builtin 07
                                  2151  	unless_dt		cmpx,bu_dt5.p
    003235  0a   006371 040226 
    003236                        2152  clog.1:
                                  2153  	load		aq,arg5
    003236  aa   000000 241656 
                                  2154  	push_temp		32
    003237  aa   000040 000204 
                                  2155  	load_pr		pr2,op1
    003240  aa   000003 740251 
                                  2156  	use_eaq
    003241  aa   000000 000255 
                                  2157  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    003242  aa   377560 000250 
    003243  aa  0 01411 2731 00   2158  	tsp3		pr0|clog_
    003244  aa  6 00050 2371 00   2159  	ldaq		pr6|temp_pt
                                  2160  	free_regs
    003245  aa   000004 000206 
                                  2161  	return		aq
    003246  aa   000001 001617 
                                  2162  
    003247                        2163  alog10:						" builtin 08
                                  2164  	dt_jump1		op1,(alog10_i,alog10.1,dlog10.1,bu_dt5.p,wrong_type.p,wrong_type.p,wrong_type.p)
    003247  aa   000007 740374 
    003250  00   003256 003254 
    003251  00   003267 006371 
    003252  00   003134 003134 
    003253  0a   003134 000000 
                        000007 
                                  2165  
    003254                        2166  alog10.1:
                                  2167  	load		eaq,arg5
    003254  aa   000000 242256 
                                  2168  	jump		alog10.2
    003255  0a   003257 000220 
                                  2169  
    003256                        2170  alog10_i:
                                  2171  	s_call		cv_load.ir
    003256  0a   002174 000223 
                                  2172  
    003257                        2173  alog10.2:
                                  2174  	push_temp		32
    003257  aa   000040 000204 
                                  2175  	load_pr		pr2,op1
    003260  aa   000003 740251 
                                  2176  	use_eaq
    003261  aa   000000 000255 
                                  2177  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    003262  aa   377560 000250 
    003263  aa  0 01313 2731 00   2178  	tsp3		pr0|alog10_
                                  2179  	free_regs
    003264  aa   000004 000206 
                                  2180  	return		eaq
    003265  aa   000001 002217 
                                  2181  
    003266                        2182  dlog10:						" builtin 09
                                  2183  	unless_dt		dp,bu_dt5.p
    003266  0a   006371 100226 
    003267                        2184  dlog10.1:
                                  2185  	load		deaq,arg5
    003267  aa   000000 242656 
                                  2186  	push_temp		32
    003270  aa   000040 000204 
                                  2187  	load_pr		pr2,op1
    003271  aa   000003 740251 
                                  2188  	use_eaq
    003272  aa   000000 000255 
                                  2189  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    003273  aa   377560 000250 
    003274  aa  0 01334 2731 00   2190  	tsp3		pr0|dlog10_
                                  2191  	free_regs
    003275  aa   000004 000206 
                                  2192  	return		deaq
    003276  aa   000001 002617 
                                  2193  
    003277                        2194  atan:						" builtin 10
                                  2195  	dt_jump1		op1,(atan_i,atan.1,datan.1,bu_dt5.p,wrong_type.p,wrong_type.p,wrong_type.p)
    003277  aa   000007 740374 
    003300  00   003306 003304 
    003301  00   003317 006371 
    003302  00   003134 003134 
    003303  0a   003134 000000 
                        000007 
                                  2196  
    003304                        2197  atan.1:
                                  2198  	load		eaq,arg5
    003304  aa   000000 242256 
                                  2199  	jump		atan.2
    003305  0a   003307 000220 
                                  2200  
    003306                        2201  atan_i:
                                  2202  	s_call		cv_load.ir
    003306  0a   002174 000223 
                                  2203  
    003307                        2204  atan.2:
                                  2205  	push_temp		32
    003307  aa   000040 000204 
                                  2206  	load_pr		pr2,op1
    003310  aa   000003 740251 
                                  2207  	use_eaq
    003311  aa   000000 000255 
                                  2208  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    003312  aa   377560 000250 
    003313  aa  0 01307 2731 00   2209  	tsp3		pr0|atan_
                                  2210  	free_regs
    003314  aa   000004 000206 
                                  2211  	return		eaq
    003315  aa   000001 002217 
                                  2212  
    003316                        2213  datan:						" builtin 11
                                  2214  	unless_dt		dp,bu_dt5.p
    003316  0a   006371 100226 
    003317                        2215  datan.1:
                                  2216  	load		deaq,arg5
    003317  aa   000000 242656 
                                  2217  	push_temp		32
    003320  aa   000040 000204 
                                  2218  	load_pr		pr2,op1
    003321  aa   000003 740251 
                                  2219  	use_eaq
    003322  aa   000000 000255 
                                  2220  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    003323  aa   377560 000250 
    003324  aa  0 01330 2731 00   2221  	tsp3		pr0|datan_
                                  2222  	free_regs
    003325  aa   000004 000206 
                                  2223  	return		deaq
    003326  aa   000001 002617 
                                  2224  
    003327                        2225  atan2:						" builtin 12
                                  2226  	dt_jump		(atan2_ii,atan2_ri,atan2_di,atan2_ci,atan2_ir,atan2_rr,atan2_dr,atan2_cr,atan2_id,atan2_rd,atan2_dd,atan2_cd,atan2_ic,atan2_rc,atan2_dc,atan2_cc,atan2_e2,atan2_e1,atan2_e2,atan2_e1)
    003327  aa   000024 000235 
    003330  00   003342 003346 
    003331  00   003352 003373 
    003332  00   003344 003354 
    003333  00   003364 003375 
    003334  00   003350 003356 
    003335  00   003355 003377 
    003336  00   003372 003374 
    003337  00   003376 003400 
    003340  00   003402 003401 
    003341  00   003402 003401 
                        000024 
                                  2227  
    003342                        2228  atan2_ii:
                                  2229  	s_call		builtin_2args_ii
    003342  0a   005030 000223 
                                  2230  	jump		atan2.1
    003343  0a   003403 000220 
                                  2231  
    003344                        2232  atan2_ir:
                                  2233  	s_call		builtin_2args_ir
    003344  0a   005060 000223 
                                  2234  	jump		atan2.1
    003345  0a   003403 000220 
                                  2235  
    003346                        2236  atan2_ri:
                                  2237  	s_call		builtin_2args_ri
    003346  0a   005076 000223 
                                  2238  	jump		atan2.1
    003347  0a   003403 000220 
                                  2239  
    003350                        2240  atan2_id:
                                  2241  	s_call		builtin_2args_id
    003350  0a   005111 000223 
                                  2242  	jump		datan2.1
    003351  0a   003422 000220 
                                  2243  
    003352                        2244  atan2_di:
                                  2245  	s_call		builtin_2args_di
    003352  0a   005127 000223 
                                  2246  	jump		datan2.1
    003353  0a   003422 000220 
                                  2247  
    003354                        2248  atan2_rr:
                                  2249  	jump		atan2.1
    003354  0a   003403 000220 
                                  2250  
    003355                        2251  atan2_dd:
                                  2252  	jump		datan2.1
    003355  0a   003422 000220 
                                  2253  
    003356                        2254  atan2_rd:
                                  2255  	load		eaq,arg5
    003356  aa   000000 242256 
                                  2256  	push_temp		32
    003357  aa   000040 000204 
                                  2257  	load_pr		pr2,op1
    003360  aa   000003 740251 
                                  2258  	bump		arg6
    003361  aa   000001 300363 
                                  2259  	load_pr		pr1,arg6
    003362  aa   000002 300251 
                                  2260  	jump		datan2.2
    003363  0a   003427 000220 
                                  2261  
    003364                        2262  atan2_dr:
                                  2263  	push_temp		dp
    003364  aa   000000 001604 
                                  2264  	load		eaq,arg6
    003365  aa   000000 302256 
                                  2265  	store		deaq,op1,no_update
    003366  aa   000001 742757 
                                  2266  	swap		arg6
    003367  aa   000000 300202 
                                  2267  	pop		op1
    003370  aa   000000 740203 
                                  2268  	jump		datan2.1
    003371  0a   003422 000220 
                                  2269  
    003372                        2270  atan2_ic:
                                  2271  	jump		bu_dt6.p
    003372  0a   006374 000220 
                                  2272  
    003373                        2273  atan2_ci:
                                  2274  	jump		bu_dt5.p
    003373  0a   006371 000220 
                                  2275  
    003374                        2276  atan2_rc:
                                  2277  	jump		bu_dt6.p
    003374  0a   006374 000220 
                                  2278  
    003375                        2279  atan2_cr:
                                  2280  	jump		bu_dt5.p
    003375  0a   006371 000220 
                                  2281  
    003376                        2282  atan2_dc:
                                  2283  	jump		bu_dt6.p
    003376  0a   006374 000220 
                                  2284  
    003377                        2285  atan2_cd:
                                  2286  	jump		bu_dt5.p
    003377  0a   006371 000220 
                                  2287  
    003400                        2288  atan2_cc:
                                  2289  	jump		bu_dt5.p
    003400  0a   006371 000220 
                                  2290  
    003401                        2291  atan2_e1:
                                  2292  	jump		bu_dt5.p
    003401  0a   006371 000220 
                                  2293  
    003402                        2294  atan2_e2:
                                  2295  	jump		bu_dt6.p
    003402  0a   006374 000220 
                                  2296  
    003403                        2297  atan2.1:
                                  2298  	load		eaq,arg5
    003403  aa   000000 242256 
                                  2299  	push_temp		32
    003404  aa   000040 000204 
                                  2300  	load_pr		pr2,op1
    003405  aa   000003 740251 
                                  2301  	bump		arg6
    003406  aa   000001 300363 
                                  2302  	load_pr		pr1,arg6
    003407  aa   000002 300251 
                                  2303  	use_eaq
    003410  aa   000000 000255 
                                  2304  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr3,pr4,pr5,pr7)
    003411  aa   377160 000250 
    003412  aa  0 01336 2731 00   2305  	tsp3		pr0|atan2_
                                  2306  	drop		arg6
    003413  aa   000001 300364 
                                  2307  	free_regs
    003414  aa   000004 000206 
                                  2308  	return		eaq
    003415  aa   000001 002217 
                                  2309  
    003416                        2310  datan2:						" builtin 13
                                  2311  	swap		arg5
    003416  aa   000000 240202 
                                  2312  	unless_dt		dp,atan2.p
    003417  0a   003435 100226 
                                  2313  	swap		arg5
    003420  aa   000000 240202 
                                  2314  	unless_dt		dp,atan2_ee
    003421  0a   003435 100226 
                                  2315  
    003422                        2316  datan2.1:
                                  2317  	load		deaq,arg5
    003422  aa   000000 242656 
                                  2318  	push_temp		32
    003423  aa   000040 000204 
                                  2319  	load_pr		pr2,op1
    003424  aa   000003 740251 
                                  2320  	bump		arg6
    003425  aa   000001 300363 
                                  2321  	load_pr		pr1,arg6
    003426  aa   000002 300251 
    003427                        2322  datan2.2:
                                  2323  	use_eaq
    003427  aa   000000 000255 
                                  2324  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr3,pr4,pr5,pr7)
    003430  aa   377160 000250 
    003431  aa  0 01340 2731 00   2325  	tsp3		pr0|datan2_
                                  2326  	drop		arg6
    003432  aa   000001 300364 
                                  2327  	free_regs
    003433  aa   000004 000206 
                                  2328  	return		deaq
    003434  aa   000001 002617 
                                  2329  
    003435                        2330  atan2.p:
    003435                        2331  atan2_ee:
                                  2332  	jump		bu_dt6.p
    003435  0a   006374 000220 
                                  2333  
    003436                        2334  cos:						" builtin 14
                                  2335  	dt_jump1		op1,(cos_i,cos.1,dcos.1,ccos.1,wrong_type.p,wrong_type.p,wrong_type.p)
    003436  aa   000007 740374 
    003437  00   003445 003443 
    003440  00   003456 003467 
    003441  00   003134 003134 
    003442  0a   003134 000000 
                        000007 
                                  2336  
    003443                        2337  cos.1:
                                  2338  	load		eaq,arg5
    003443  aa   000000 242256 
                                  2339  	jump		cos.2
    003444  0a   003446 000220 
                                  2340  
    003445                        2341  cos_i:
                                  2342  	s_call		cv_load.ir
    003445  0a   002174 000223 
                                  2343  
    003446                        2344  cos.2:
                                  2345  	push_temp		32
    003446  aa   000040 000204 
                                  2346  	load_pr		pr2,op1
    003447  aa   000003 740251 
                                  2347  	use_eaq
    003450  aa   000000 000255 
                                  2348  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    003451  aa   377560 000250 
    003452  aa  0 01277 2731 00   2349  	tsp3		pr0|cos_
                                  2350  	free_regs
    003453  aa   000004 000206 
                                  2351  	return		eaq
    003454  aa   000001 002217 
                                  2352  
    003455                        2353  dcos:						" builtin 15
                                  2354  	unless_dt		dp,dcos.p
    003455  0a   003500 100226 
    003456                        2355  dcos.1:
                                  2356  	load		deaq,arg5
    003456  aa   000000 242656 
                                  2357  	push_temp		32
    003457  aa   000040 000204 
                                  2358  	load_pr		pr2,op1
    003460  aa   000003 740251 
                                  2359  	use_eaq
    003461  aa   000000 000255 
                                  2360  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    003462  aa   377560 000250 
    003463  aa  0 01320 2731 00   2361  	tsp3		pr0|dcos_
                                  2362  	free_regs
    003464  aa   000004 000206 
                                  2363  	return		deaq
    003465  aa   000001 002617 
                                  2364  
    003466                        2365  ccos:						" builtin 16
                                  2366  	unless_dt		cmpx,ccos.p
    003466  0a   003501 040226 
    003467                        2367  ccos.1:
                                  2368  	load		aq,arg5
    003467  aa   000000 241656 
                                  2369  	push_temp		32
    003470  aa   000040 000204 
                                  2370  	load_pr		pr2,op1
    003471  aa   000003 740251 
                                  2371  	use_eaq
    003472  aa   000000 000255 
                                  2372  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    003473  aa   377560 000250 
    003474  aa  0 01407 2731 00   2373  	tsp3		pr0|ccos_
    003475  aa  6 00050 2371 00   2374  	ldaq		pr6|temp_pt
                                  2375  	free_regs
    003476  aa   000004 000206 
                                  2376  	return		aq
    003477  aa   000001 001617 
                                  2377  
    003500                        2378  dcos.p:
                                  2379  	jump		bu_dt5.p
    003500  0a   006371 000220 
                                  2380  
    003501                        2381  ccos.p:
                                  2382  	jump		bu_dt5.p
    003501  0a   006371 000220 
                                  2383  
    003502                        2384  dim:						" builtin 17
                                  2385  	dt_jump		(dim_ii,dim_ri,dim_di,dim_ci,dim_ir,dim_rr,dim_dr,dim_cr,dim_id,dim_rd,dim_dd,dim_cd,dim_ic,dim_rc,dim_dc,dim_cc,dim_e2,dim_e1,dim_e2,dim_e1)
    003502  aa   000024 000235 
    003503  00   003521 003541 
    003504  00   003545 003554 
    003505  00   003537 003547 
    003506  00   003552 003556 
    003507  00   003543 003551 
    003510  00   003550 003560 
    003511  00   003553 003555 
    003512  00   003557 003561 
    003513  00   003563 003562 
    003514  00   003563 003562 
                        000024 
                                  2386  
    003515                        2387  idim:						" builtin 18
                                  2388  	swap		arg5
    003515  aa   000000 240202 
                                  2389  	unless_dt		int,idim.p
    003516  0a   003644 400226 
                                  2390  	swap		arg5
    003517  aa   000000 240202 
                                  2391  	unless_dt		int,idim.p
    003520  0a   003644 400226 
                                  2392  
    003521                        2393  dim_ii:
                                  2394  	push_temp		int
    003521  aa   000000 000604 
                                  2395  	bump		op1		" temp is freed after 2nd ref
    003522  aa   000001 740363 
                                  2396  	bump		arg5
    003523  aa   000001 240363 
                                  2397  	bump		arg6
    003524  aa   000001 300363 
                                  2398  
                                  2399  	load		q,arg5
    003525  aa   000000 240656 
                                  2400  	use_eaq
    003526  aa   000000 000255 
                                  2401  	make_addressable	arg5,arg6
    003527  aa   300000 240307 
                                  2402  	compare		q,arg6
    003530  aa   000000 300751 
    003531  aa   000002 6040 04   2403  	tmi		2,ic
    003532  aa   300000 2360 00   2404  	ldq		arg6
    003533  aa   740000 7560 00   2405  	stq		op1
    003534  aa   240000 2360 00   2406  	ldq		arg5
    003535  aa   740000 1760 00   2407  	sbq		op1
                                  2408  	return		q
    003536  aa   000001 000617 
                                  2409  
    003537                        2410  dim_ir:
                                  2411  	s_call		builtin_2args_ir
    003537  0a   005060 000223 
                                  2412  	jump		dim.1
    003540  0a   003564 000220 
                                  2413  
    003541                        2414  dim_ri:
                                  2415  	s_call		builtin_2args_ri
    003541  0a   005076 000223 
                                  2416  	jump		dim.1
    003542  0a   003564 000220 
                                  2417  
    003543                        2418  dim_id:
                                  2419  	s_call		builtin_2args_id
    003543  0a   005111 000223 
                                  2420  	jump		ddim.1
    003544  0a   003603 000220 
                                  2421  
    003545                        2422  dim_di:
                                  2423  	s_call		builtin_2args_di
    003545  0a   005127 000223 
                                  2424  	jump		ddim.1
    003546  0a   003603 000220 
                                  2425  
    003547                        2426  dim_rr:
                                  2427  	jump		dim.1
    003547  0a   003564 000220 
                                  2428  
    003550                        2429  dim_dd:
                                  2430  	jump		ddim.1
    003550  0a   003603 000220 
                                  2431  
    003551                        2432  dim_rd:
                                  2433  	jump		rddim.1
    003551  0a   003616 000220 
                                  2434  
    003552                        2435  dim_dr:
                                  2436  	jump		drdim.1
    003552  0a   003631 000220 
                                  2437  
    003553                        2438  dim_ic:
                                  2439  	jump		bu_dt6.p
    003553  0a   006374 000220 
                                  2440  
    003554                        2441  dim_ci:
                                  2442  	jump		bu_dt5.p
    003554  0a   006371 000220 
                                  2443  
    003555                        2444  dim_rc:
                                  2445  	jump		bu_dt6.p
    003555  0a   006374 000220 
                                  2446  
    003556                        2447  dim_cr:
                                  2448  	jump		bu_dt5.p
    003556  0a   006371 000220 
                                  2449  
    003557                        2450  dim_dc:
                                  2451  	jump		bu_dt6.p
    003557  0a   006374 000220 
                                  2452  
    003560                        2453  dim_cd:
                                  2454  	jump		bu_dt5.p
    003560  0a   006371 000220 
                                  2455  
    003561                        2456  dim_cc:
                                  2457  	jump		bu_dt5.p
    003561  0a   006371 000220 
                                  2458  
    003562                        2459  dim_e1:
                                  2460  	jump		bu_dt5.p
    003562  0a   006371 000220 
                                  2461  
    003563                        2462  dim_e2:
                                  2463  	jump		bu_dt6.p
    003563  0a   006374 000220 
                                  2464  
    003564                        2465  dim.1:
                                  2466  	bump		arg5
    003564  aa   000001 240363 
                                  2467  	bump		arg6
    003565  aa   000001 300363 
                                  2468  	load		eaq,arg5
    003566  aa   000000 242256 
                                  2469  	make_addressable	arg5,arg6
    003567  aa   300000 240307 
                                  2470  	compare		eaq,arg6		"saves arg5, if necessary
    003570  aa   000000 302351 
    003571  aa   000002 6040 04   2471  	tmi		2,ic
    003572  aa   300000 4310 00   2472  	fld		arg6
                                  2473  	emit_inst		1
    003573  aa   000001 040242 
    003574  aa   000000 5130 00   2474  	fneg
    003575  aa   240000 4750 00   2475  	fad		arg5
                                  2476  	return		eaq
    003576  aa   000001 002217 
                                  2477  
    003577                        2478  ddim:						" builtin 19
                                  2479  	swap		arg5
    003577  aa   000000 240202 
                                  2480  	unless_dt		dp,ddim.p
    003600  0a   003644 100226 
                                  2481  	swap		arg5
    003601  aa   000000 240202 
                                  2482  	unless_dt		dp,ddim.p
    003602  0a   003644 100226 
                                  2483  
    003603                        2484  ddim.1:
                                  2485  	bump		arg5
    003603  aa   000001 240363 
                                  2486  	bump		arg6
    003604  aa   000001 300363 
                                  2487  	load		deaq,arg5
    003605  aa   000000 242656 
                                  2488  	make_addressable	arg5,arg6
    003606  aa   300000 240307 
                                  2489  	compare		deaq,arg6		"saves arg5, if necessary
    003607  aa   000000 302751 
    003610  aa   000002 6040 04   2490  	tmi		2,ic
    003611  aa   300000 4330 00   2491  	dfld		arg6
                                  2492  	emit_inst		1
    003612  aa   000001 040242 
    003613  aa   000000 5130 00   2493  	fneg
    003614  aa   240000 4770 00   2494  	dfad		arg5
                                  2495  	return		deaq
    003615  aa   000001 002617 
                                  2496  
    003616                        2497  rddim.1:
                                  2498  	bump		arg5
    003616  aa   000001 240363 
                                  2499  	bump		arg6
    003617  aa   000001 300363 
                                  2500  	load		eaq,arg5
    003620  aa   000000 242256 
                                  2501  	make_addressable	arg5,arg6
    003621  aa   300000 240307 
                                  2502  	compare		deaq,arg6		"saves arg5, if necessary
    003622  aa   000000 302751 
    003623  aa   000002 6040 04   2503  	tmi		2,ic
    003624  aa   300000 4330 00   2504  	dfld		arg6
                                  2505  	emit_inst		1
    003625  aa   000001 040242 
    003626  aa   000000 5130 00   2506  	fneg
    003627  aa   240000 4750 00   2507  	fad		arg5
                                  2508  	return		deaq
    003630  aa   000001 002617 
                                  2509  
    003631                        2510  drdim.1:
                                  2511  	bump		arg5
    003631  aa   000001 240363 
                                  2512  	bump		arg6
    003632  aa   000001 300363 
                                  2513  	load		deaq,arg5
    003633  aa   000000 242656 
                                  2514  	make_addressable	arg5,arg6
    003634  aa   300000 240307 
                                  2515  	compare		eaq,arg6		"saves arg5, if necessary
    003635  aa   000000 302351 
    003636  aa   000002 6040 04   2516  	tmi		2,ic
    003637  aa   300000 4310 00   2517  	fld		arg6
                                  2518  	emit_inst		1
    003640  aa   000001 040242 
    003641  aa   000000 5130 00   2519  	fneg
    003642  aa   240000 4770 00   2520  	dfad		arg5
                                  2521  	return		deaq
    003643  aa   000001 002617 
                                  2522  
    003644                        2523  idim.p:
    003644                        2524  ddim.p:
                                  2525  	jump		bu_dt6.p
    003644  0a   006374 000220 
                                  2526  
    003645                        2527  exp:						" builtin 20
                                  2528  	dt_jump1		op1,(exp_i,exp.1,dexp.1,cexp.1,wrong_type.p,wrong_type.p)
    003645  aa   000006 740374 
    003646  00   003653 003651 
    003647  00   003664 003675 
    003650  00   003134 003134 
                        000006 
                                  2529  
    003651                        2530  exp.1:
                                  2531  	load		eaq,arg5
    003651  aa   000000 242256 
                                  2532  	jump		exp.2
    003652  0a   003654 000220 
                                  2533  
    003653                        2534  exp_i:
                                  2535  	s_call		cv_load.ir
    003653  0a   002174 000223 
                                  2536  
    003654                        2537  exp.2:
                                  2538  	push_temp		32
    003654  aa   000040 000204 
                                  2539  	load_pr		pr2,op1
    003655  aa   000003 740251 
                                  2540  	use_eaq
    003656  aa   000000 000255 
                                  2541  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    003657  aa   377560 000250 
    003660  aa  0 01314 2731 00   2542  	tsp3		pr0|exp_
                                  2543  	free_regs
    003661  aa   000004 000206 
                                  2544  	return		eaq
    003662  aa   000001 002217 
                                  2545  
    003663                        2546  dexp:						" builtin 21
                                  2547  	unless_dt		dp,dexp.p
    003663  0a   003706 100226 
                                  2548  
    003664                        2549  dexp.1:
                                  2550  	load		deaq,arg5
    003664  aa   000000 242656 
                                  2551  	push_temp		32
    003665  aa   000040 000204 
                                  2552  	load_pr		pr2,op1
    003666  aa   000003 740251 
                                  2553  	use_eaq
    003667  aa   000000 000255 
                                  2554  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    003670  aa   377560 000250 
    003671  aa  0 01335 2731 00   2555  	tsp3		pr0|dexp_
                                  2556  	free_regs
    003672  aa   000004 000206 
                                  2557  	return		deaq
    003673  aa   000001 002617 
                                  2558  
    003674                        2559  cexp:						" builtin 22
                                  2560  	unless_dt		cmpx,cexp.p
    003674  0a   003707 040226 
                                  2561  
    003675                        2562  cexp.1:
                                  2563  	load		aq,arg5
    003675  aa   000000 241656 
                                  2564  	push_temp		32
    003676  aa   000040 000204 
                                  2565  	load_pr		pr2,op1
    003677  aa   000003 740251 
                                  2566  	use_eaq
    003700  aa   000000 000255 
                                  2567  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    003701  aa   377560 000250 
    003702  aa  0 01410 2731 00   2568  	tsp3		pr0|cexp_
    003703  aa  6 00050 2371 00   2569  	ldaq		pr6|temp_pt
                                  2570  	free_regs
    003704  aa   000004 000206 
                                  2571  	return		aq
    003705  aa   000001 001617 
                                  2572  
    003706                        2573  dexp.p:
                                  2574  	jump		bu_dt5.p
    003706  0a   006371 000220 
                                  2575  
    003707                        2576  cexp.p:
                                  2577  	jump		bu_dt5.p
    003707  0a   006371 000220 
                                  2578  
    003710                        2579  max:						" builtin 23
                                  2580  	unless		arg2,>,1,wrong_number.p
    003710  0a   003031 104640 
                                  2581  	dt_jump		(max_ii,max_ri,max_di,max_ci,max_ir,max_rr,max_dr,max_cr,max_id,max_rd,max_dd,max_cd,max_ic,max_rc,max_dc,max_cc,max_e2,max_e1,max_e2,max_e1)
    003711  aa   000024 000235 
    003712  00   003724 003727 
    003713  00   003733 003750 
    003714  00   003725 003735 
    003715  00   003745 003752 
    003716  00   003731 003737 
    003717  00   003736 003754 
    003720  00   003747 003751 
    003721  00   003753 003755 
    003722  00   003757 003756 
    003723  00   003757 003756 
                        000024 
                                  2582  
    003724                        2583  max_ii:
                                  2584  	jump		g.max0
    003724  0a   003760 000220 
                                  2585  
    003725                        2586  max_ir:
                                  2587  	s_call		builtin_2args_ir
    003725  0a   005060 000223 
                                  2588  	jump		g.amax1
    003726  0a   004006 000220 
                                  2589  
    003727                        2590  max_ri:
                                  2591  	s_call		builtin_2args_ri
    003727  0a   005076 000223 
                                  2592  	jump		g.amax1
    003730  0a   004006 000220 
                                  2593  
    003731                        2594  max_id:
                                  2595  	s_call		builtin_2args_id
    003731  0a   005111 000223 
                                  2596  	jump		g.dmax1
    003732  0a   004043 000220 
                                  2597  
    003733                        2598  max_di:
                                  2599  	s_call		builtin_2args_di
    003733  0a   005127 000223 
                                  2600  	jump		g.dmax1
    003734  0a   004043 000220 
                                  2601  
    003735                        2602  max_rr:
                                  2603  	jump		g.amax1
    003735  0a   004006 000220 
                                  2604  
    003736                        2605  max_dd:
                                  2606  	jump		g.dmax1
    003736  0a   004043 000220 
                                  2607  
    003737                        2608  max_rd:
                                  2609  	swap		op2
    003737  aa   000000 700202 
                                  2610  	load		eaq,op1
    003740  aa   000000 742256 
                                  2611  	pop		op1
    003741  aa   000000 740203 
                                  2612  	unless		arg2,>,2,g.dmax1.loop.1
    003742  0a   004073 105240 
                                  2613  	round		deaq
    003743  aa   000000 002754 
                                  2614  	jump		g.dmax1.loop.1
    003744  0a   004073 000220 
                                  2615  
    003745                        2616  max_dr:
                                  2617  	swap		op2
    003745  aa   000000 700202 
                                  2618  	jump		max_rd
    003746  0a   003737 000220 
                                  2619  
    003747                        2620  max_ic:
                                  2621  	jump		mm_dt1.p
    003747  0a   006377 000220 
                                  2622  
    003750                        2623  max_ci:
                                  2624  	jump		mm_dt2.p
    003750  0a   006402 000220 
                                  2625  
    003751                        2626  max_rc:
                                  2627  	jump		mm_dt1.p
    003751  0a   006377 000220 
                                  2628  
    003752                        2629  max_cr:
                                  2630  	jump		mm_dt2.p
    003752  0a   006402 000220 
                                  2631  
    003753                        2632  max_dc:
                                  2633  	jump		mm_dt1.p
    003753  0a   006377 000220 
                                  2634  
    003754                        2635  max_cd:
                                  2636  	jump		mm_dt2.p
    003754  0a   006402 000220 
                                  2637  
    003755                        2638  max_cc:
                                  2639  	jump		mm_dt1.p
    003755  0a   006377 000220 
                                  2640  
    003756                        2641  max_e1:
                                  2642  	jump		mm_dt2.p
    003756  0a   006402 000220 
                                  2643  
    003757                        2644  max_e2:
                                  2645  	jump		mm_dt1.p
    003757  0a   006377 000220 
                                  2646  
    003760                        2647  g.max0:
                                  2648  	load_top		q
    003760  aa   000000 000657 
                                  2649  	pop		op1
    003761  aa   000000 740203 
                                  2650  	jump		g.max0.loop.1
    003762  0a   003775 000220 
                                  2651  
    003763                        2652  g.max0.loop:
                                  2653  	use_eaq				" save temps before test and transfer
    003763  aa   000000 000255 
                                  2654  	dt_jump1		op1,(g.max0.loop.1,g.max0.real,g.max0.dp,mm_dt1.p,wrong_type.p,wrong_type.p,wrong_type.p)
    003764  aa   000007 740374 
    003765  00   003775 003771 
    003766  00   003773 006377 
    003767  00   003134 003134 
    003770  0a   003134 000000 
                        000007 
                                  2655  
    003771                        2656  g.max0.real:
                                  2657  	s_call		cv_q_to_real
    003771  0a   002253 000223 
                                  2658  	jump		g.amax1.loop.1
    003772  0a   004032 000220 
                                  2659  
    003773                        2660  g.max0.dp:
                                  2661  	s_call		cv_q_to_dp
    003773  0a   002253 000223 
                                  2662  	jump		g.dmax1.loop.1
    003774  0a   004073 000220 
                                  2663  
    003775                        2664  g.max0.loop.1:
                                  2665  	bump		op1		" because it is ref'd twice
    003775  aa   000001 740363 
                                  2666  	compare		q,op1
    003776  aa   000000 740751 
    003777  aa   000002 6050 04   2667  	tpl		2,ic
    004000  aa   740000 2360 00   2668  	ldq		op1
                                  2669  	pop		op1
    004001  aa   000000 740203 
                                  2670  	use_ind				" invalidate indicators
    004002  aa   000007 000206 
                                  2671  
                                  2672  	if		arg2,=,2,mm_ret_q
    004003  0a   003115 111237 
                                  2673  	decrement		arg2,1
    004004  aa   000001 100264 
                                  2674  	jump		g.max0.loop
    004005  0a   003763 000220 
                                  2675  
    004006                        2676  g.amax1:
                                  2677  	load_top		eaq
    004006  aa   000000 002257 
                                  2678  	pop		op1
    004007  aa   000000 740203 
                                  2679  	unless		arg2,>,2,g.amax1.loop.1
    004010  0a   004032 105240 
                                  2680  	round		eaq
    004011  aa   000000 002354 
                                  2681  	jump		g.amax1.loop.1
    004012  0a   004032 000220 
                                  2682  
    004013                        2683  g.amax1.loop:
                                  2684  	use_eaq				" save temps before test and transfer
    004013  aa   000000 000255 
                                  2685  	set_rounded
    004014  aa   000035 000206 
                                  2686  	dt_jump1		op1,(g.amax1.int,g.amax1.loop.1,g.amax1.dp,mm_dt1.p,wrong_type.p,wrong_type.p,wrong_type.p)
    004015  aa   000007 740374 
    004016  00   004022 004032 
    004017  00   004031 006377 
    004020  00   003134 003134 
    004021  0a   003134 000000 
                        000007 
                                  2687  
    004022                        2688  g.amax1.int:
                                  2689  	push_temp		real
    004022  aa   000000 001204 
                                  2690  	bump		op1
    004023  aa   000001 740363 
                                  2691  	store		eaq,op1,no_update
    004024  aa   000001 742357 
                                  2692  	swap		op2
    004025  aa   000000 700202 
                                  2693  	s_call		cv_load.ir
    004026  0a   002174 000223 
                                  2694  	pop		op1		" remove int and use real temp
    004027  aa   000000 740203 
                                  2695  	jump		g.amax1.loop.1
    004030  0a   004032 000220 
                                  2696  
    004031                        2697  g.amax1.dp:
                                  2698  	jump		g.dmax1.loop.1
    004031  0a   004073 000220 
                                  2699  
    004032                        2700  g.amax1.loop.1:
                                  2701  	bump		op1		" because it is ref'd twice
    004032  aa   000001 740363 
                                  2702  	compare		eaq,op1
    004033  aa   000000 742351 
    004034  aa   000002 6050 04   2703  	tpl		2,ic
    004035  aa   740000 4310 00   2704  	fld		op1
                                  2705  	pop		op1
    004036  aa   000000 740203 
                                  2706  	use_ind				" invalidate indicators
    004037  aa   000007 000206 
                                  2707  
                                  2708  	if		arg2,=,2,mm_ret_eaq
    004040  0a   003121 111237 
                                  2709  	decrement		arg2,1
    004041  aa   000001 100264 
                                  2710  	jump		g.amax1.loop
    004042  0a   004013 000220 
                                  2711  
    004043                        2712  g.dmax1:
                                  2713  	load_top		deaq
    004043  aa   000000 002657 
                                  2714  	pop		op1
    004044  aa   000000 740203 
                                  2715  	unless		arg2,>,2,g.dmax1.loop.1
    004045  0a   004073 105240 
                                  2716  	round		deaq
    004046  aa   000000 002754 
                                  2717  	jump		g.dmax1.loop.1
    004047  0a   004073 000220 
                                  2718  
    004050                        2719  g.dmax1.loop:
                                  2720  	use_eaq				" save temps before test and transfer
    004050  aa   000000 000255 
                                  2721  	set_rounded
    004051  aa   000035 000206 
                                  2722  	dt_jump1		op1,(g.dmax1.int,g.dmax1.real,g.dmax1.loop.1,mm_dt1.p,wrong_type.p,wrong_type.p,wrong_type.p)
    004052  aa   000007 740374 
    004053  00   004057 004066 
    004054  00   004073 006377 
    004055  00   003134 003134 
    004056  0a   003134 000000 
                        000007 
                                  2723  
    004057                        2724  g.dmax1.int:
                                  2725  	push_temp		dp
    004057  aa   000000 001604 
                                  2726  	bump		op1
    004060  aa   000001 740363 
                                  2727  	store		deaq,op1,no_update
    004061  aa   000001 742757 
                                  2728  	swap		op2
    004062  aa   000000 700202 
                                  2729  	s_call		cv_load.id
    004063  0a   002214 000223 
                                  2730  	pop		op1		" remove int and use dp temp
    004064  aa   000000 740203 
                                  2731  	jump		g.dmax1.loop.1
    004065  0a   004073 000220 
                                  2732  
    004066                        2733  g.dmax1.real:
                                  2734  	bump		op1		" because it is ref'd twice
    004066  aa   000001 740363 
                                  2735  	compare		eaq,op1
    004067  aa   000000 742351 
    004070  aa   000002 6050 04   2736  	tpl		2,ic
    004071  aa   740000 4310 00   2737  	fld		op1
                                  2738  	jump		g.dmax1.loop.2
    004072  0a   004077 000220 
                                  2739  
    004073                        2740  g.dmax1.loop.1:
                                  2741  	bump		op1
    004073  aa   000001 740363 
                                  2742  	compare		deaq,op1
    004074  aa   000000 742751 
    004075  aa   000002 6050 04   2743  	tpl		2,ic
    004076  aa   740000 4330 00   2744  	dfld		op1
                                  2745  
    004077                        2746  g.dmax1.loop.2:
                                  2747  	pop		op1
    004077  aa   000000 740203 
                                  2748  	use_ind				" invalidate indicators
    004100  aa   000007 000206 
                                  2749  
                                  2750  	if		arg2,=,2,mm_ret_deaq
    004101  0a   003125 111237 
                                  2751  	decrement		arg2,1
    004102  aa   000001 100264 
                                  2752  	jump		g.dmax1.loop
    004103  0a   004050 000220 
                                  2753  
    004104                        2754  amax0:						" builtin 24
                                  2755  	unless		arg2,>,1,wrong_number.p
    004104  0a   003031 104640 
                                  2756  	unless_dt		int,amax0.p
    004105  0a   004127 400226 
                                  2757  	swap		op2
    004106  aa   000000 700202 
                                  2758  	unless_dt		int,amax0.p
    004107  0a   004127 400226 
                                  2759  
                                  2760  	load_top		q
    004110  aa   000000 000657 
                                  2761  	pop		op1
    004111  aa   000000 740203 
                                  2762  
    004112                        2763  amax0.loop:
                                  2764  	bump		op1		" because it is ref'd twice
    004112  aa   000001 740363 
                                  2765  	use_eaq				" save temps before test and transfer
    004113  aa   000000 000255 
                                  2766  	compare		q,op1
    004114  aa   000000 740751 
    004115  aa   000002 6050 04   2767  	tpl		2,ic
    004116  aa   740000 2360 00   2768  	ldq		op1
                                  2769  	pop		op1
    004117  aa   000000 740203 
                                  2770  	use_ind				" invalidate indicators
    004120  aa   000007 000206 
                                  2771  
                                  2772  	if		arg2,=,2,amax0.r
    004121  0a   004125 111237 
                                  2773  	decrement		arg2,1
    004122  aa   000001 100264 
                                  2774  	if_dt		int,amax0.loop
    004123  0a   004112 400225 
                                  2775  	jump		amax0.p
    004124  0a   004127 000220 
                                  2776  
    004125                        2777  amax0.r:
                                  2778  	s_call		cv_q_to_real
    004125  0a   002253 000223 
                                  2779  	jump		mm_ret_eaq
    004126  0a   003121 000220 
                                  2780  
    004127                        2781  amax0.p:
                                  2782  	jump		mm_dt1.p
    004127  0a   006377 000220 
                                  2783  
    004130                        2784  amax1:						" builtin 25
                                  2785  	unless		arg2,>,1,wrong_number.p
    004130  0a   003031 104640 
                                  2786  	unless_dt		real,amax1.p
    004131  0a   004154 200226 
                                  2787  	swap		op2
    004132  aa   000000 700202 
                                  2788  	unless_dt		real,amax1.p
    004133  0a   004154 200226 
                                  2789  
                                  2790  	load_top		eaq
    004134  aa   000000 002257 
                                  2791  	pop		op1
    004135  aa   000000 740203 
                                  2792  	unless		arg2,>,2,amax1.loop.1
    004136  0a   004143 105240 
                                  2793  	round		eaq
    004137  aa   000000 002354 
                                  2794  	jump		amax1.loop.1
    004140  0a   004143 000220 
                                  2795  
    004141                        2796  amax1.loop:
                                  2797  	use_eaq				"save temps before test and transfer
    004141  aa   000000 000255 
                                  2798  	set_rounded
    004142  aa   000035 000206 
                                  2799  
    004143                        2800  amax1.loop.1:
                                  2801  	bump		op1		" because it is ref'd twice
    004143  aa   000001 740363 
                                  2802  	compare		eaq,op1
    004144  aa   000000 742351 
    004145  aa   000002 6050 04   2803  	tpl		2,ic
    004146  aa   740000 4310 00   2804  	fld		op1
                                  2805  	pop		op1
    004147  aa   000000 740203 
                                  2806  	use_ind				" invalidate indicators
    004150  aa   000007 000206 
                                  2807  
                                  2808  	if		arg2,=,2,mm_ret_eaq
    004151  0a   003121 111237 
                                  2809  	decrement		arg2,1
    004152  aa   000001 100264 
                                  2810  	if_dt		real,amax1.loop
    004153  0a   004141 200225 
                                  2811  
    004154                        2812  amax1.p:
                                  2813  	jump		mm_dt1.p
    004154  0a   006377 000220 
                                  2814  
    004155                        2815  max0:						" builtin 26
                                  2816  	unless		arg2,>,1,wrong_number.p
    004155  0a   003031 104640 
                                  2817  	unless_dt		int,max0.p
    004156  0a   004175 400226 
                                  2818  	swap		op2
    004157  aa   000000 700202 
                                  2819  	unless_dt		int,max0.p
    004160  0a   004175 400226 
                                  2820  
                                  2821  	load_top		q
    004161  aa   000000 000657 
                                  2822  	pop		op1
    004162  aa   000000 740203 
                                  2823  
    004163                        2824  max0.loop:
                                  2825  	bump		op1		" because it is ref'd twice
    004163  aa   000001 740363 
                                  2826  	use_eaq				" save temps before test and transfer
    004164  aa   000000 000255 
                                  2827  	compare		q,op1
    004165  aa   000000 740751 
    004166  aa   000002 6050 04   2828  	tpl		2,ic
    004167  aa   740000 2360 00   2829  	ldq		op1
                                  2830  	pop		op1
    004170  aa   000000 740203 
                                  2831  	use_ind				" invalidate indicators
    004171  aa   000007 000206 
                                  2832  
                                  2833  	if		arg2,=,2,mm_ret_q
    004172  0a   003115 111237 
                                  2834  	decrement		arg2,1
    004173  aa   000001 100264 
                                  2835  	if_dt		int,max0.loop
    004174  0a   004163 400225 
                                  2836  
    004175                        2837  max0.p:
                                  2838  	jump		mm_dt1.p
    004175  0a   006377 000220 
                                  2839  
    004176                        2840  max1:						" builtin 27
                                  2841  	unless		arg2,>,1,wrong_number.p
    004176  0a   003031 104640 
                                  2842  	unless_dt		real,max1.p
    004177  0a   004227 200226 
                                  2843  	swap		op2
    004200  aa   000000 700202 
                                  2844  	unless_dt		real,max1.p
    004201  0a   004227 200226 
                                  2845  
                                  2846  	load_top		eaq
    004202  aa   000000 002257 
                                  2847  	pop		op1
    004203  aa   000000 740203 
                                  2848  	unless		arg2,>,2,max1.loop.1
    004204  0a   004211 105240 
                                  2849  	round		eaq
    004205  aa   000000 002354 
                                  2850  	jump		max1.loop.1
    004206  0a   004211 000220 
                                  2851  
    004207                        2852  max1.loop:
                                  2853  	use_eaq				"save temps before test and transfer
    004207  aa   000000 000255 
                                  2854  	set_rounded
    004210  aa   000035 000206 
                                  2855  
    004211                        2856  max1.loop.1:
                                  2857  	bump		op1		" because it is ref'd twice
    004211  aa   000001 740363 
                                  2858  	compare		eaq,op1
    004212  aa   000000 742351 
    004213  aa   000002 6050 04   2859  	tpl		2,ic
    004214  aa   740000 4310 00   2860  	fld		op1
                                  2861  	pop		op1
    004215  aa   000000 740203 
                                  2862  	use_ind				" invalidate indicators
    004216  aa   000007 000206 
                                  2863  
                                  2864  	if		arg2,=,2,max1.r
    004217  0a   004223 111237 
                                  2865  	decrement		arg2,1
    004220  aa   000001 100264 
                                  2866  	if_dt		real,max1.loop
    004221  0a   004207 200225 
                                  2867  	jump		max1.p
    004222  0a   004227 000220 
                                  2868  
    004223                        2869  max1.r:
                                  2870  	use_ind
    004223  aa   000007 000206 
                                  2871  	round		eaq
    004224  aa   000000 002354 
                                  2872  	s_call		cv_real_to_int
    004225  0a   002266 000223 
                                  2873  	jump		mm_ret_q
    004226  0a   003115 000220 
                                  2874  
    004227                        2875  max1.p:
                                  2876  	jump		mm_dt1.p
    004227  0a   006377 000220 
                                  2877  
    004230                        2878  dmax1:						" builtin 28
                                  2879  	unless		arg2,>,1,wrong_number.p
    004230  0a   003031 104640 
                                  2880  	unless_dt		dp,dmax1.p
    004231  0a   004254 100226 
                                  2881  	swap		op2
    004232  aa   000000 700202 
                                  2882  	unless_dt		dp,dmax1.p
    004233  0a   004254 100226 
                                  2883  
                                  2884  	load_top		deaq
    004234  aa   000000 002657 
                                  2885  	pop		op1
    004235  aa   000000 740203 
                                  2886  	unless		arg2,>,2,dmax1.loop.1
    004236  0a   004243 105240 
                                  2887  	round		deaq
    004237  aa   000000 002754 
                                  2888  	jump		dmax1.loop.1
    004240  0a   004243 000220 
                                  2889  
    004241                        2890  dmax1.loop:
                                  2891  	use_eaq				"save temps before test and transfer
    004241  aa   000000 000255 
                                  2892  	set_rounded
    004242  aa   000035 000206 
                                  2893  
    004243                        2894  dmax1.loop.1:
                                  2895  	bump		op1		" because it is ref'd twice
    004243  aa   000001 740363 
                                  2896  	compare		deaq,op1
    004244  aa   000000 742751 
    004245  aa   000002 6050 04   2897  	tpl		2,ic
    004246  aa   740000 4330 00   2898  	dfld		op1
                                  2899  	pop		op1
    004247  aa   000000 740203 
                                  2900  	use_ind				" invalidate indicators
    004250  aa   000007 000206 
                                  2901  
                                  2902  	if		arg2,=,2,mm_ret_deaq
    004251  0a   003125 111237 
                                  2903  	decrement		arg2,1
    004252  aa   000001 100264 
                                  2904  	if_dt		dp,dmax1.loop
    004253  0a   004241 100225 
                                  2905  
    004254                        2906  dmax1.p:
                                  2907  	jump		mm_dt1.p
    004254  0a   006377 000220 
                                  2908  
    004255                        2909  min:						" builtin 29
                                  2910  	unless		arg2,>,1,wrong_number.p
    004255  0a   003031 104640 
                                  2911  	dt_jump		(min_ii,min_ri,min_di,min_ci,min_ir,min_rr,min_dr,min_cr,min_id,min_rd,min_dd,min_cd,min_ic,min_rc,min_dc,min_cc,min_e2,min_e1,min_e2,min_e1)
    004256  aa   000024 000235 
    004257  00   004271 004274 
    004260  00   004300 004315 
    004261  00   004272 004302 
    004262  00   004312 004317 
    004263  00   004276 004304 
    004264  00   004303 004321 
    004265  00   004314 004316 
    004266  00   004320 004322 
    004267  00   004324 004323 
    004270  00   004324 004323 
                        000024 
                                  2912  
    004271                        2913  min_ii:
                                  2914  	jump		g.min0
    004271  0a   004325 000220 
                                  2915  
    004272                        2916  min_ir:
                                  2917  	s_call		builtin_2args_ir
    004272  0a   005060 000223 
                                  2918  	jump		g.amin1
    004273  0a   004353 000220 
                                  2919  
    004274                        2920  min_ri:
                                  2921  	s_call		builtin_2args_ri
    004274  0a   005076 000223 
                                  2922  	jump		g.amin1
    004275  0a   004353 000220 
                                  2923  
    004276                        2924  min_id:
                                  2925  	s_call		builtin_2args_id
    004276  0a   005111 000223 
                                  2926  	jump		g.dmin1
    004277  0a   004410 000220 
                                  2927  
    004300                        2928  min_di:
                                  2929  	s_call		builtin_2args_di
    004300  0a   005127 000223 
                                  2930  	jump		g.dmin1
    004301  0a   004410 000220 
                                  2931  
    004302                        2932  min_rr:
                                  2933  	jump		g.amin1
    004302  0a   004353 000220 
                                  2934  
    004303                        2935  min_dd:
                                  2936  	jump		g.dmin1
    004303  0a   004410 000220 
                                  2937  
    004304                        2938  min_rd:
                                  2939  	swap		op2
    004304  aa   000000 700202 
                                  2940  	load		eaq,op1
    004305  aa   000000 742256 
                                  2941  	pop		op1
    004306  aa   000000 740203 
                                  2942  	unless		arg2,>,2,g.dmin1.loop.1
    004307  0a   004440 105240 
                                  2943  	round		deaq
    004310  aa   000000 002754 
                                  2944  	jump		g.dmin1.loop.1
    004311  0a   004440 000220 
                                  2945  
    004312                        2946  min_dr:
                                  2947  	swap		op2
    004312  aa   000000 700202 
                                  2948  	jump		min_rd
    004313  0a   004304 000220 
                                  2949  
    004314                        2950  min_ic:
                                  2951  	jump		mm_dt1.p
    004314  0a   006377 000220 
                                  2952  
    004315                        2953  min_ci:
                                  2954  	jump		mm_dt2.p
    004315  0a   006402 000220 
                                  2955  
    004316                        2956  min_rc:
                                  2957  	jump		mm_dt1.p
    004316  0a   006377 000220 
                                  2958  
    004317                        2959  min_cr:
                                  2960  	jump		mm_dt2.p
    004317  0a   006402 000220 
                                  2961  
    004320                        2962  min_dc:
                                  2963  	jump		mm_dt1.p
    004320  0a   006377 000220 
                                  2964  
    004321                        2965  min_cd:
                                  2966  	jump		mm_dt2.p
    004321  0a   006402 000220 
                                  2967  
    004322                        2968  min_cc:
                                  2969  	jump		mm_dt1.p
    004322  0a   006377 000220 
                                  2970  
    004323                        2971  min_e1:
                                  2972  	jump		mm_dt2.p
    004323  0a   006402 000220 
                                  2973  
    004324                        2974  min_e2:
                                  2975  	jump		mm_dt1.p
    004324  0a   006377 000220 
                                  2976  
    004325                        2977  g.min0:
                                  2978  	load_top		q
    004325  aa   000000 000657 
                                  2979  	pop		op1
    004326  aa   000000 740203 
                                  2980  	jump		g.min0.loop.1
    004327  0a   004342 000220 
                                  2981  
    004330                        2982  g.min0.loop:
                                  2983  	use_eaq				" save temps before test and transfer
    004330  aa   000000 000255 
                                  2984  	dt_jump1		op1,(g.min0.loop.1,g.min0.real,g.min0.dp,mm_dt1.p,wrong_type.p,wrong_type.p,wrong_type.p)
    004331  aa   000007 740374 
    004332  00   004342 004336 
    004333  00   004340 006377 
    004334  00   003134 003134 
    004335  0a   003134 000000 
                        000007 
                                  2985  
    004336                        2986  g.min0.real:
                                  2987  	s_call		cv_q_to_real
    004336  0a   002253 000223 
                                  2988  	jump		g.amin1.loop.1
    004337  0a   004377 000220 
                                  2989  
    004340                        2990  g.min0.dp:
                                  2991  	s_call		cv_q_to_dp
    004340  0a   002253 000223 
                                  2992  	jump		g.dmin1.loop.1
    004341  0a   004440 000220 
                                  2993  
    004342                        2994  g.min0.loop.1:
                                  2995  	bump		op1		" because it is ref'd twice
    004342  aa   000001 740363 
                                  2996  	compare		q,op1
    004343  aa   000000 740751 
    004344  aa   000002 6044 04   2997  	tmoz		2,ic
    004345  aa   740000 2360 00   2998  	ldq		op1
                                  2999  	pop		op1
    004346  aa   000000 740203 
                                  3000  	use_ind				" invalidate indicators
    004347  aa   000007 000206 
                                  3001  
                                  3002  	if		arg2,=,2,mm_ret_q
    004350  0a   003115 111237 
                                  3003  	decrement		arg2,1
    004351  aa   000001 100264 
                                  3004  	jump		g.min0.loop
    004352  0a   004330 000220 
                                  3005  
    004353                        3006  g.amin1:
                                  3007  	load_top		eaq
    004353  aa   000000 002257 
                                  3008  	pop		op1
    004354  aa   000000 740203 
                                  3009  	unless		arg2,>,2,g.amin1.loop.1
    004355  0a   004377 105240 
                                  3010  	round		eaq
    004356  aa   000000 002354 
                                  3011  	jump		g.amin1.loop.1
    004357  0a   004377 000220 
                                  3012  
    004360                        3013  g.amin1.loop:
                                  3014  	use_eaq				" save temps before test and transfer
    004360  aa   000000 000255 
                                  3015  	set_rounded
    004361  aa   000035 000206 
                                  3016  	dt_jump1		op1,(g.amin1.int,g.amin1.loop.1,g.amin1.dp,mm_dt1.p,wrong_type.p,wrong_type.p,wrong_type.p)
    004362  aa   000007 740374 
    004363  00   004367 004377 
    004364  00   004376 006377 
    004365  00   003134 003134 
    004366  0a   003134 000000 
                        000007 
                                  3017  
    004367                        3018  g.amin1.int:
                                  3019  	push_temp		real
    004367  aa   000000 001204 
                                  3020  	bump		op1
    004370  aa   000001 740363 
                                  3021  	store		eaq,op1,no_update
    004371  aa   000001 742357 
                                  3022  	swap		op2
    004372  aa   000000 700202 
                                  3023  	s_call		cv_load.ir
    004373  0a   002174 000223 
                                  3024  	pop		op1		" remove int and use real temp
    004374  aa   000000 740203 
                                  3025  	jump		g.amin1.loop.1
    004375  0a   004377 000220 
                                  3026  
    004376                        3027  g.amin1.dp:
                                  3028  	jump		g.dmin1.loop.1
    004376  0a   004440 000220 
                                  3029  
    004377                        3030  g.amin1.loop.1:
                                  3031  	bump		op1		" because it is ref'd twice
    004377  aa   000001 740363 
                                  3032  	compare		eaq,op1
    004400  aa   000000 742351 
    004401  aa   000002 6044 04   3033  	tmoz		2,ic
    004402  aa   740000 4310 00   3034  	fld		op1
                                  3035  	pop		op1
    004403  aa   000000 740203 
                                  3036  	use_ind				" invalidate indicators
    004404  aa   000007 000206 
                                  3037  
                                  3038  	if		arg2,=,2,mm_ret_eaq
    004405  0a   003121 111237 
                                  3039  	decrement		arg2,1
    004406  aa   000001 100264 
                                  3040  	jump		g.amin1.loop
    004407  0a   004360 000220 
                                  3041  
    004410                        3042  g.dmin1:
                                  3043  	load_top		deaq
    004410  aa   000000 002657 
                                  3044  	pop		op1
    004411  aa   000000 740203 
                                  3045  	unless		arg2,>,2,g.dmin1.loop.1
    004412  0a   004440 105240 
                                  3046  	round		deaq
    004413  aa   000000 002754 
                                  3047  	jump		g.dmin1.loop.1
    004414  0a   004440 000220 
                                  3048  
    004415                        3049  g.dmin1.loop:
                                  3050  	use_eaq				" save temps before test and transfer
    004415  aa   000000 000255 
                                  3051  	set_rounded
    004416  aa   000035 000206 
                                  3052  	dt_jump1		op1,(g.dmin1.int,g.dmin1.real,g.dmin1.loop.1,mm_dt1.p,wrong_type.p,wrong_type.p,wrong_type.p)
    004417  aa   000007 740374 
    004420  00   004424 004433 
    004421  00   004440 006377 
    004422  00   003134 003134 
    004423  0a   003134 000000 
                        000007 
                                  3053  
    004424                        3054  g.dmin1.int:
                                  3055  	push_temp		dp
    004424  aa   000000 001604 
                                  3056  	bump		op1
    004425  aa   000001 740363 
                                  3057  	store		deaq,op1,no_update
    004426  aa   000001 742757 
                                  3058  	swap		op2
    004427  aa   000000 700202 
                                  3059  	s_call		cv_load.id
    004430  0a   002214 000223 
                                  3060  	pop		op1		" remove int and use dp temp
    004431  aa   000000 740203 
                                  3061  	jump		g.dmin1.loop.1
    004432  0a   004440 000220 
                                  3062  
    004433                        3063  g.dmin1.real:
                                  3064  	bump		op1		" because it is ref'd twice
    004433  aa   000001 740363 
                                  3065  	compare		eaq,op1
    004434  aa   000000 742351 
    004435  aa   000002 6044 04   3066  	tmoz		2,ic
    004436  aa   740000 4310 00   3067  	fld		op1
                                  3068  	jump		g.dmin1.loop.2
    004437  0a   004444 000220 
                                  3069  
    004440                        3070  g.dmin1.loop.1:
                                  3071  	bump		op1
    004440  aa   000001 740363 
                                  3072  	compare		deaq,op1
    004441  aa   000000 742751 
    004442  aa   000002 6044 04   3073  	tmoz		2,ic
    004443  aa   740000 4330 00   3074  	dfld		op1
                                  3075  
    004444                        3076  g.dmin1.loop.2:
                                  3077  	pop		op1
    004444  aa   000000 740203 
                                  3078  	use_ind				" invalidate indicators
    004445  aa   000007 000206 
                                  3079  
                                  3080  	if		arg2,=,2,mm_ret_deaq
    004446  0a   003125 111237 
                                  3081  	decrement		arg2,1
    004447  aa   000001 100264 
                                  3082  	jump		g.dmin1.loop
    004450  0a   004415 000220 
                                  3083  
    004451                        3084  amin0:						" builtin 30
                                  3085  	unless		arg2,>,1,wrong_number.p
    004451  0a   003031 104640 
                                  3086  	unless_dt		int,amin0.p
    004452  0a   004474 400226 
                                  3087  	swap		op2
    004453  aa   000000 700202 
                                  3088  	unless_dt		int,amin0.p
    004454  0a   004474 400226 
                                  3089  
                                  3090  	load_top		q
    004455  aa   000000 000657 
                                  3091  	pop		op1
    004456  aa   000000 740203 
                                  3092  
    004457                        3093  amin0.loop:
                                  3094  	bump		op1		" because it is ref'd twice
    004457  aa   000001 740363 
                                  3095  	use_eaq				" save temps before test and transfer
    004460  aa   000000 000255 
                                  3096  	compare		q,op1
    004461  aa   000000 740751 
    004462  aa   000002 6044 04   3097  	tmoz		2,ic
    004463  aa   740000 2360 00   3098  	ldq		op1
                                  3099  	pop		op1
    004464  aa   000000 740203 
                                  3100  	use_ind				" invalidate indicators
    004465  aa   000007 000206 
                                  3101  
                                  3102  	if		arg2,=,2,amin0.r
    004466  0a   004472 111237 
                                  3103  
                                  3104  	decrement		arg2,1
    004467  aa   000001 100264 
                                  3105  	if_dt		int,amin0.loop
    004470  0a   004457 400225 
                                  3106  	jump		amin0.p
    004471  0a   004474 000220 
                                  3107  
    004472                        3108  amin0.r:
                                  3109  	s_call		cv_q_to_real
    004472  0a   002253 000223 
                                  3110  	jump		mm_ret_eaq
    004473  0a   003121 000220 
                                  3111  
    004474                        3112  amin0.p:
                                  3113  	jump		mm_dt1.p
    004474  0a   006377 000220 
                                  3114  
    004475                        3115  amin1:						" builtin 31
                                  3116  	unless		arg2,>,1,wrong_number.p
    004475  0a   003031 104640 
                                  3117  	unless_dt		real,amin1.p
    004476  0a   004521 200226 
                                  3118  	swap		op2
    004477  aa   000000 700202 
                                  3119  	unless_dt		real,amin1.p
    004500  0a   004521 200226 
                                  3120  
                                  3121  	load_top		eaq
    004501  aa   000000 002257 
                                  3122  	pop		op1
    004502  aa   000000 740203 
                                  3123  	unless		arg2,>,2,amin1.loop.1
    004503  0a   004510 105240 
                                  3124  	round		eaq
    004504  aa   000000 002354 
                                  3125  	jump		amin1.loop.1
    004505  0a   004510 000220 
                                  3126  
    004506                        3127  amin1.loop:
                                  3128  	use_eaq				"save temps before test and transfer
    004506  aa   000000 000255 
                                  3129  	set_rounded
    004507  aa   000035 000206 
                                  3130  
    004510                        3131  amin1.loop.1:
                                  3132  	bump		op1		" because it is ref'd twice
    004510  aa   000001 740363 
                                  3133  	compare		eaq,op1
    004511  aa   000000 742351 
    004512  aa   000002 6044 04   3134  	tmoz		2,ic
    004513  aa   740000 4310 00   3135  	fld		op1
                                  3136  	pop		op1
    004514  aa   000000 740203 
                                  3137  	use_ind				" invalidate indicators
    004515  aa   000007 000206 
                                  3138  
                                  3139  	if		arg2,=,2,mm_ret_eaq
    004516  0a   003121 111237 
                                  3140  	decrement		arg2,1
    004517  aa   000001 100264 
                                  3141  	if_dt		real,amin1.loop
    004520  0a   004506 200225 
                                  3142  
    004521                        3143  amin1.p:
                                  3144  	jump		mm_dt1.p
    004521  0a   006377 000220 
                                  3145  
    004522                        3146  min0:						" builtin 32
                                  3147  	unless		arg2,>,1,wrong_number.p
    004522  0a   003031 104640 
                                  3148  	unless_dt		int,min0.p
    004523  0a   004542 400226 
                                  3149  	swap		op2
    004524  aa   000000 700202 
                                  3150  	unless_dt		int,min0.p
    004525  0a   004542 400226 
                                  3151  
                                  3152  	load_top		q
    004526  aa   000000 000657 
                                  3153  	pop		op1
    004527  aa   000000 740203 
                                  3154  
    004530                        3155  min0.loop:
                                  3156  	bump		op1		" because it is ref'd twice
    004530  aa   000001 740363 
                                  3157  	use_eaq				" save temps before test and transfer
    004531  aa   000000 000255 
                                  3158  	compare		q,op1
    004532  aa   000000 740751 
    004533  aa   000002 6044 04   3159  	tmoz		2,ic
    004534  aa   740000 2360 00   3160  	ldq		op1
                                  3161  	pop		op1
    004535  aa   000000 740203 
                                  3162  	use_ind				" invalidate indicators
    004536  aa   000007 000206 
                                  3163  
                                  3164  	if		arg2,=,2,mm_ret_q
    004537  0a   003115 111237 
                                  3165  	decrement		arg2,1
    004540  aa   000001 100264 
                                  3166  	if_dt		int,min0.loop
    004541  0a   004530 400225 
                                  3167  
    004542                        3168  min0.p:
                                  3169  	jump		mm_dt1.p
    004542  0a   006377 000220 
                                  3170  
    004543                        3171  min1:						" builtin 33
                                  3172  	unless		arg2,>,1,wrong_number.p
    004543  0a   003031 104640 
                                  3173  	unless_dt		real,min1.p
    004544  0a   004574 200226 
                                  3174  	swap		op2
    004545  aa   000000 700202 
                                  3175  	unless_dt		real,min1.p
    004546  0a   004574 200226 
                                  3176  
                                  3177  	load_top		eaq
    004547  aa   000000 002257 
                                  3178  	pop		op1
    004550  aa   000000 740203 
                                  3179  	unless		arg2,>,2,min1.loop.1
    004551  0a   004556 105240 
                                  3180  	round		eaq
    004552  aa   000000 002354 
                                  3181  	jump		min1.loop.1
    004553  0a   004556 000220 
                                  3182  
    004554                        3183  min1.loop:
                                  3184  	use_eaq				"save temps before test and transfer
    004554  aa   000000 000255 
                                  3185  	set_rounded
    004555  aa   000035 000206 
                                  3186  
    004556                        3187  min1.loop.1:
                                  3188  	bump		op1		" because it is ref'd twice
    004556  aa   000001 740363 
                                  3189  	compare		eaq,op1
    004557  aa   000000 742351 
    004560  aa   000002 6044 04   3190  	tmoz		2,ic
    004561  aa   740000 4310 00   3191  	fld		op1
                                  3192  	pop		op1
    004562  aa   000000 740203 
                                  3193  	use_ind				" invalidate indicators
    004563  aa   000007 000206 
                                  3194  
                                  3195  	if		arg2,=,2,min1.r
    004564  0a   004570 111237 
                                  3196  	decrement		arg2,1
    004565  aa   000001 100264 
                                  3197  	if_dt		real,min1.loop
    004566  0a   004554 200225 
                                  3198  	jump		min1.p
    004567  0a   004574 000220 
                                  3199  
    004570                        3200  min1.r:
                                  3201  	use_ind
    004570  aa   000007 000206 
                                  3202  	round		eaq
    004571  aa   000000 002354 
                                  3203  	s_call		cv_real_to_int
    004572  0a   002266 000223 
                                  3204  	jump		mm_ret_q
    004573  0a   003115 000220 
                                  3205  
    004574                        3206  min1.p:
                                  3207  	jump		mm_dt1.p
    004574  0a   006377 000220 
                                  3208  
    004575                        3209  dmin1:						" builtin 34
                                  3210  	unless		arg2,>,1,wrong_number.p
    004575  0a   003031 104640 
                                  3211  	unless_dt		dp,dmin1.p
    004576  0a   004621 100226 
                                  3212  	swap		op2
    004577  aa   000000 700202 
                                  3213  	unless_dt		dp,dmin1.p
    004600  0a   004621 100226 
                                  3214  
                                  3215  	load_top		deaq
    004601  aa   000000 002657 
                                  3216  	pop		op1
    004602  aa   000000 740203 
                                  3217  	unless		arg2,>,2,dmin1.loop.1
    004603  0a   004610 105240 
                                  3218  	round		deaq
    004604  aa   000000 002754 
                                  3219  	jump		dmin1.loop.1
    004605  0a   004610 000220 
                                  3220  
    004606                        3221  dmin1.loop:
                                  3222  	use_eaq				"save temps before test and transfer
    004606  aa   000000 000255 
                                  3223  	set_rounded
    004607  aa   000035 000206 
                                  3224  
    004610                        3225  dmin1.loop.1:
                                  3226  	bump		op1		" because it is ref'd twice
    004610  aa   000001 740363 
                                  3227  	compare		deaq,op1
    004611  aa   000000 742751 
    004612  aa   000002 6044 04   3228  	tmoz		2,ic
    004613  aa   740000 4330 00   3229  	dfld		op1
                                  3230  	pop		op1
    004614  aa   000000 740203 
                                  3231  	use_ind				" invalidate indicators
    004615  aa   000007 000206 
                                  3232  
                                  3233  	if		arg2,=,2,mm_ret_deaq
    004616  0a   003125 111237 
                                  3234  	decrement		arg2,1
    004617  aa   000001 100264 
                                  3235  	if_dt		dp,dmin1.loop
    004620  0a   004606 100225 
                                  3236  
    004621                        3237  dmin1.p:
                                  3238  	jump		mm_dt1.p
    004621  0a   006377 000220 
                                  3239  
    004622                        3240  mod:						" builtin 35
                                  3241  	dt_jump		(mod_ii,mod_ri,mod_di,mod_ci,mod_ir,mod_rr,mod_dr,mod_cr,mod_id,mod_rd,mod_dd,mod_cd,mod_ic,mod_rc,mod_dc,mod_cc,mod_e2,mod_e1,mod_e2,mod_e1)
    004622  aa   000024 000235 
    004623  00   004635 004640 
    004624  00   004644 004653 
    004625  00   004636 004646 
    004626  00   004651 004655 
    004627  00   004642 004650 
    004630  00   004647 004657 
    004631  00   004652 004654 
    004632  00   004656 004660 
    004633  00   004662 004661 
    004634  00   004662 004661 
                        000024 
                                  3242  
    004635                        3243  mod_ii:
                                  3244  	jump		mod.1
    004635  0a   004663 000220 
                                  3245  
    004636                        3246  mod_ir:
                                  3247  	s_call		builtin_2args_ir
    004636  0a   005060 000223 
                                  3248  	jump		amod.1
    004637  0a   004674 000220 
                                  3249  
    004640                        3250  mod_ri:
                                  3251  	s_call		builtin_2args_ri
    004640  0a   005076 000223 
                                  3252  	jump		amod.1
    004641  0a   004674 000220 
                                  3253  
    004642                        3254  mod_id:
                                  3255  	s_call		builtin_2args_id
    004642  0a   005111 000223 
                                  3256  	jump		dmod.1
    004643  0a   004710 000220 
                                  3257  
    004644                        3258  mod_di:
                                  3259  	s_call		builtin_2args_di
    004644  0a   005127 000223 
                                  3260  	jump		dmod.1
    004645  0a   004710 000220 
                                  3261  
    004646                        3262  mod_rr:
                                  3263  	jump		amod.1
    004646  0a   004674 000220 
                                  3264  
    004647                        3265  mod_dd:
                                  3266  	jump		dmod.1
    004647  0a   004710 000220 
                                  3267  
    004650                        3268  mod_rd:
                                  3269  	jump		rdmod.1
    004650  0a   004720 000220 
                                  3270  
    004651                        3271  mod_dr:
                                  3272  	jump		dmod.1
    004651  0a   004710 000220 
                                  3273  
    004652                        3274  mod_ic:
                                  3275  	jump		bu_dt6.p
    004652  0a   006374 000220 
                                  3276  
    004653                        3277  mod_ci:
                                  3278  	jump		bu_dt5.p
    004653  0a   006371 000220 
                                  3279  
    004654                        3280  mod_rc:
                                  3281  	jump		bu_dt6.p
    004654  0a   006374 000220 
                                  3282  
    004655                        3283  mod_cr:
                                  3284  	jump		bu_dt5.p
    004655  0a   006371 000220 
                                  3285  
    004656                        3286  mod_dc:
                                  3287  	jump		bu_dt6.p
    004656  0a   006374 000220 
                                  3288  
    004657                        3289  mod_cd:
                                  3290  	jump		bu_dt5.p
    004657  0a   006371 000220 
                                  3291  
    004660                        3292  mod_cc:
                                  3293  	jump		bu_dt5.p
    004660  0a   006371 000220 
                                  3294  
    004661                        3295  mod_e1:
                                  3296  	jump		bu_dt5.p
    004661  0a   006371 000220 
                                  3297  
    004662                        3298  mod_e2:
                                  3299  	jump		bu_dt6.p
    004662  0a   006374 000220 
                                  3300  
    004663                        3301  mod.1:
                                  3302  	load		q,arg5
    004663  aa   000000 240656 
    004664  aa   300000 5060 00   3303  	div		arg6
                                  3304  	emit_inst		1
    004665  aa   000001 040242 
    004666  aa   000044 7330 00   3305  	lrs		36
                                  3306  	return		q
    004667  aa   000001 000617 
                                  3307  
    004670                        3308  amod:						" builtin 36
                                  3309  	swap		arg5
    004670  aa   000000 240202 
                                  3310  	unless_dt		real,amod.p
    004671  0a   004722 200226 
                                  3311  	swap		arg5
    004672  aa   000000 240202 
                                  3312  	unless_dt		real,amod.p
    004673  0a   004722 200226 
                                  3313  
    004674                        3314  amod.1:
                                  3315  	load		eaq,arg5
    004674  aa   000000 242256 
                                  3316  	bump		arg6
    004675  aa   000001 300363 
                                  3317  	load_pr		pr2,arg6
    004676  aa   000003 300251 
                                  3318  	use_eaq
    004677  aa   000000 000255 
    004700  aa  0 00767 7001 00   3319  	tsx0		pr0|fort_modfl
                                  3320  	drop		arg6
    004701  aa   000001 300364 
                                  3321  	free_regs
    004702  aa   000004 000206 
                                  3322  	return		eaq
    004703  aa   000001 002217 
                                  3323  
    004704                        3324  dmod:						" builtin 37
                                  3325  	swap		arg5
    004704  aa   000000 240202 
                                  3326  	unless_dt		dp,dmod.p
    004705  0a   004722 100226 
                                  3327  	swap		arg5
    004706  aa   000000 240202 
                                  3328  	unless_dt		dp,dmod.p
    004707  0a   004722 100226 
                                  3329  
    004710                        3330  dmod.1:
                                  3331  	load		deaq,arg5
    004710  aa   000000 242656 
    004711                        3332  dmod.2:
                                  3333  	use_eaq
    004711  aa   000000 000255 
                                  3334  	bump		arg6
    004712  aa   000001 300363 
                                  3335  	load_pr		pr2,arg6
    004713  aa   000003 300251 
    004714  aa  0 01450 7001 00   3336  	tsx0		pr0|fort_dmod
                                  3337  	drop		arg6
    004715  aa   000001 300364 
                                  3338  	free_regs
    004716  aa   000004 000206 
                                  3339  	return		deaq
    004717  aa   000001 002617 
                                  3340  
    004720                        3341  rdmod.1:
                                  3342  	load		eaq,arg5
    004720  aa   000000 242256 
                                  3343  	jump		dmod.2
    004721  0a   004711 000220 
                                  3344  
    004722                        3345  amod.p:
    004722                        3346  dmod.p:
                                  3347  	jump		bu_dt6.p
    004722  0a   006374 000220 
                                  3348  
    004723                        3349  sign:						" builtin 38
                                  3350  	dt_jump		(sign_ii,sign_ri,sign_di,sign_ci,sign_ir,sign_rr,sign_dr,sign_cr,sign_id,sign_rd,sign_dd,sign_cd,sign_ic,sign_rc,sign_dc,sign_cc,sign_e2,sign_e1,sign_e2,sign_e1)
    004723  aa   000024 000235 
    004724  00   004742 004754 
    004725  00   004760 004767 
    004726  00   004752 004762 
    004727  00   004765 004771 
    004730  00   004756 004764 
    004731  00   004763 004773 
    004732  00   004766 004770 
    004733  00   004772 004774 
    004734  00   004776 004775 
    004735  00   004776 004775 
                        000024 
                                  3351  
    004736                        3352  isign:						" builtin 39
                                  3353  	swap		arg5
    004736  aa   000000 240202 
                                  3354  	unless_dt		int,isign.p
    004737  0a   005027 400226 
                                  3355  	swap		arg5
    004740  aa   000000 240202 
                                  3356  	unless_dt		int,isign.p
    004741  0a   005027 400226 
                                  3357  
    004742                        3358  sign_ii:
                                  3359  	bump		arg6
    004742  aa   000001 300363 
                                  3360  	load_pr		pr2,arg6
    004743  aa   000003 300251 
                                  3361  	load_for_test	q,arg5
    004744  aa   000000 240761 
                                  3362  	use_eaq		protect_indicators
    004745  aa   000001 000255 
    004746  aa  0 00666 7001 00   3363  	tsx0		pr0|sign_fx
                                  3364  	drop		arg6
    004747  aa   000001 300364 
                                  3365  	free_regs
    004750  aa   000004 000206 
                                  3366  	return		q
    004751  aa   000001 000617 
                                  3367  
    004752                        3368  sign_ir:
                                  3369  	s_call		builtin_2args_ir
    004752  0a   005060 000223 
                                  3370  	jump		sign.1
    004753  0a   004777 000220 
                                  3371  
    004754                        3372  sign_ri:
                                  3373  	s_call		builtin_2args_ri
    004754  0a   005076 000223 
                                  3374  	jump		sign.1
    004755  0a   004777 000220 
                                  3375  
    004756                        3376  sign_id:
                                  3377  	s_call		builtin_2args_id
    004756  0a   005111 000223 
                                  3378  	jump		dsign.1
    004757  0a   005013 000220 
                                  3379  
    004760                        3380  sign_di:
                                  3381  	s_call		builtin_2args_di
    004760  0a   005127 000223 
                                  3382  	jump		dsign.1
    004761  0a   005013 000220 
                                  3383  
    004762                        3384  sign_rr:
                                  3385  	jump		sign.1
    004762  0a   004777 000220 
                                  3386  
    004763                        3387  sign_dd:
                                  3388  	jump		dsign.1
    004763  0a   005013 000220 
                                  3389  
    004764                        3390  sign_rd:
                                  3391  	jump		rdsign.1
    004764  0a   005023 000220 
                                  3392  
    004765                        3393  sign_dr:
                                  3394  	jump		dsign.1
    004765  0a   005013 000220 
                                  3395  
    004766                        3396  sign_ic:
                                  3397  	jump		bu_dt6.p
    004766  0a   006374 000220 
                                  3398  
    004767                        3399  sign_ci:
                                  3400  	jump		bu_dt5.p
    004767  0a   006371 000220 
                                  3401  
    004770                        3402  sign_rc:
                                  3403  	jump		bu_dt6.p
    004770  0a   006374 000220 
                                  3404  
    004771                        3405  sign_cr:
                                  3406  	jump		bu_dt5.p
    004771  0a   006371 000220 
                                  3407  
    004772                        3408  sign_dc:
                                  3409  	jump		bu_dt6.p
    004772  0a   006374 000220 
                                  3410  
    004773                        3411  sign_cd:
                                  3412  	jump		bu_dt5.p
    004773  0a   006371 000220 
                                  3413  
    004774                        3414  sign_cc:
                                  3415  	jump		bu_dt5.p
    004774  0a   006371 000220 
                                  3416  
    004775                        3417  sign_e1:
                                  3418  	jump		bu_dt5.p
    004775  0a   006371 000220 
                                  3419  
    004776                        3420  sign_e2:
                                  3421  	jump		bu_dt6.p
    004776  0a   006374 000220 
                                  3422  
    004777                        3423  sign.1:
                                  3424  	bump		arg6
    004777  aa   000001 300363 
                                  3425  	load_pr		pr2,arg6
    005000  aa   000003 300251 
                                  3426  	load_for_test	eaq,arg5
    005001  aa   000000 242361 
                                  3427  	use_eaq		protect_indicators
    005002  aa   000001 000255 
    005003  aa  0 00667 7001 00   3428  	tsx0		pr0|sign_fl
                                  3429  	drop		arg6
    005004  aa   000001 300364 
                                  3430  	free_regs
    005005  aa   000004 000206 
                                  3431  	return		eaq
    005006  aa   000001 002217 
                                  3432  
    005007                        3433  dsign:						" builtin 40
                                  3434  	swap		arg5
    005007  aa   000000 240202 
                                  3435  	unless_dt		dp,dsign.p
    005010  0a   005027 100226 
                                  3436  	swap		arg5
    005011  aa   000000 240202 
                                  3437  	unless_dt		dp,dsign.p
    005012  0a   005027 100226 
                                  3438  
    005013                        3439  dsign.1:
                                  3440  	bump		arg6
    005013  aa   000001 300363 
                                  3441  	load_pr		pr2,arg6
    005014  aa   000003 300251 
                                  3442  	load_for_test	deaq,arg5
    005015  aa   000000 242761 
    005016                        3443  dsign.2:
                                  3444  	use_eaq		protect_indicators
    005016  aa   000001 000255 
    005017  aa  0 00667 7001 00   3445  	tsx0		pr0|sign_fl
                                  3446  	drop		arg6
    005020  aa   000001 300364 
                                  3447  	free_regs
    005021  aa   000004 000206 
                                  3448  	return		deaq
    005022  aa   000001 002617 
                                  3449  
    005023                        3450  rdsign.1:
                                  3451  	bump		arg6
    005023  aa   000001 300363 
                                  3452  	load_pr		pr2,arg6
    005024  aa   000003 300251 
                                  3453  	load_for_test	eaq,arg5
    005025  aa   000000 242361 
                                  3454  	jump		dsign.2
    005026  0a   005016 000220 
                                  3455  
    005027                        3456  isign.p:
    005027                        3457  dsign.p:
                                  3458  	jump		bu_dt6.p
    005027  0a   006374 000220 
                                  3459  
    005030                        3460  builtin_2args_ii:
                                  3461  	swap		op2
    005030  aa   000000 700202 
                                  3462  
                                  3463  	if_optype		constant,conv_bu_ii.1
    005031  0a   005043 200227 
                                  3464  
                                  3465  	push_temp		real
    005032  aa   000000 001204 
                                  3466  
                                  3467  	load		q,op2
    005033  aa   000000 700656 
                                  3468  	use_eaq
    005034  aa   000000 000255 
    005035  aa  0 00465 7001 00   3469  	tsx0		pr0|integer_to_real
                                  3470  	in_reg		eaq,op1
    005036  aa   000000 742260 
                                  3471  	swap		op2
    005037  aa   000000 700202 
                                  3472  	pop		op1
    005040  aa   000000 740203 
                                  3473  	swap		op2
    005041  aa   000000 700202 
                                  3474  	jump		builtin_2args_ii.1
    005042  0a   005045 000220 
                                  3475  
    005043                        3476  conv_bu_ii.1:
                                  3477  	convert_constant	real
    005043  aa   000000 001211 
                                  3478  
                                  3479  	swap		op2
    005044  aa   000000 700202 
                                  3480  
    005045                        3481  builtin_2args_ii.1:
                                  3482  	if_optype		constant,conv_bu_ii.2
    005045  0a   005056 200227 
                                  3483  
                                  3484  	push_temp		real
    005046  aa   000000 001204 
                                  3485  
                                  3486  	load		q,op2
    005047  aa   000000 700656 
                                  3487  	use_eaq
    005050  aa   000000 000255 
    005051  aa  0 00465 7001 00   3488  	tsx0		pr0|integer_to_real
                                  3489  	in_reg		eaq,op1
    005052  aa   000000 742260 
                                  3490  	swap		op2
    005053  aa   000000 700202 
                                  3491  	pop		op1
    005054  aa   000000 740203 
                                  3492  	s_return
    005055  aa   000003 000206 
                                  3493  
    005056                        3494  conv_bu_ii.2:
                                  3495  	convert_constant	real
    005056  aa   000000 001211 
                                  3496  
                                  3497  	s_return
    005057  aa   000003 000206 
                                  3498  
    005060                        3499  builtin_2args_ir:
                                  3500  	swap		op2
    005060  aa   000000 700202 
                                  3501  
                                  3502  	if_optype		constant,conv_bu_ir
    005061  0a   005073 200227 
                                  3503  
                                  3504  	push_temp		real
    005062  aa   000000 001204 
                                  3505  
                                  3506  	load		q,op2
    005063  aa   000000 700656 
                                  3507  	use_eaq
    005064  aa   000000 000255 
    005065  aa  0 00465 7001 00   3508  	tsx0		pr0|integer_to_real
                                  3509  	in_reg		eaq,op1
    005066  aa   000000 742260 
                                  3510  	swap		op2
    005067  aa   000000 700202 
                                  3511  	pop		op1
    005070  aa   000000 740203 
                                  3512  	swap		op2
    005071  aa   000000 700202 
                                  3513  	s_return
    005072  aa   000003 000206 
                                  3514  
    005073                        3515  conv_bu_ir:
                                  3516  	convert_constant	real
    005073  aa   000000 001211 
                                  3517  
                                  3518  	swap		op2
    005074  aa   000000 700202 
                                  3519  	s_return
    005075  aa   000003 000206 
                                  3520  
    005076                        3521  builtin_2args_ri:
                                  3522  	if_optype		constant,conv_bu_ri
    005076  0a   005107 200227 
                                  3523  
                                  3524  	push_temp		real
    005077  aa   000000 001204 
                                  3525  
                                  3526  	load		q,op2
    005100  aa   000000 700656 
                                  3527  	use_eaq
    005101  aa   000000 000255 
    005102  aa  0 00465 7001 00   3528  	tsx0		pr0|integer_to_real
                                  3529  	in_reg		eaq,op1
    005103  aa   000000 742260 
                                  3530  	swap		op2
    005104  aa   000000 700202 
                                  3531  	pop		op1
    005105  aa   000000 740203 
                                  3532  	s_return
    005106  aa   000003 000206 
                                  3533  
    005107                        3534  conv_bu_ri:
                                  3535  	convert_constant	real
    005107  aa   000000 001211 
                                  3536  
                                  3537  	s_return
    005110  aa   000003 000206 
                                  3538  
    005111                        3539  builtin_2args_id:
                                  3540  	swap		op2
    005111  aa   000000 700202 
                                  3541  
                                  3542  	if_optype		constant,conv_bu_id
    005112  0a   005124 200227 
                                  3543  
                                  3544  	push_temp		dp
    005113  aa   000000 001604 
                                  3545  
                                  3546  	load		q,op2
    005114  aa   000000 700656 
                                  3547  	use_eaq
    005115  aa   000000 000255 
    005116  aa  0 00465 7001 00   3548  	tsx0		pr0|integer_to_double
                                  3549  	in_reg		deaq,op1
    005117  aa   000000 742660 
                                  3550  	swap		op2
    005120  aa   000000 700202 
                                  3551  	pop		op1
    005121  aa   000000 740203 
                                  3552  	swap		op2
    005122  aa   000000 700202 
                                  3553  	s_return
    005123  aa   000003 000206 
                                  3554  
    005124                        3555  conv_bu_id:
                                  3556  	convert_constant	dp
    005124  aa   000000 001611 
                                  3557  
                                  3558  	swap		op2
    005125  aa   000000 700202 
                                  3559  	s_return
    005126  aa   000003 000206 
                                  3560  
    005127                        3561  builtin_2args_di:
                                  3562  	if_optype		constant,conv_bu_di
    005127  0a   005140 200227 
                                  3563  
                                  3564  	push_temp		dp
    005130  aa   000000 001604 
                                  3565  
                                  3566  	load		q,op2
    005131  aa   000000 700656 
                                  3567  	use_eaq
    005132  aa   000000 000255 
    005133  aa  0 00465 7001 00   3568  	tsx0		pr0|integer_to_double
                                  3569  	in_reg		deaq,op1
    005134  aa   000000 742660 
                                  3570  	swap		op2
    005135  aa   000000 700202 
                                  3571  	pop		op1
    005136  aa   000000 740203 
                                  3572  	s_return
    005137  aa   000003 000206 
                                  3573  
    005140                        3574  conv_bu_di:
                                  3575  	convert_constant	dp
    005140  aa   000000 001611 
                                  3576  
                                  3577  	s_return
    005141  aa   000003 000206 
                                  3578  
    005142                        3579  sin:						" builtin 41
                                  3580  	dt_jump1		op1,(sin_i,sin.1,dsin.1,csin.1,wrong_type.p,wrong_type.p,wrong_type.p)
    005142  aa   000007 740374 
    005143  00   005151 005147 
    005144  00   005162 005173 
    005145  00   003134 003134 
    005146  0a   003134 000000 
                        000007 
                                  3581  
    005147                        3582  sin.1:
                                  3583  	load		eaq,arg5
    005147  aa   000000 242256 
                                  3584  	jump		sin.2
    005150  0a   005152 000220 
                                  3585  
    005151                        3586  sin_i:
                                  3587  	s_call		cv_load.ir
    005151  0a   002174 000223 
                                  3588  
    005152                        3589  sin.2:
                                  3590  	push_temp		32
    005152  aa   000040 000204 
                                  3591  	load_pr		pr2,op1
    005153  aa   000003 740251 
                                  3592  	use_eaq
    005154  aa   000000 000255 
                                  3593  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    005155  aa   377560 000250 
    005156  aa  0 01275 2731 00   3594  	tsp3		pr0|sin_
                                  3595  	free_regs
    005157  aa   000004 000206 
                                  3596  	return		eaq
    005160  aa   000001 002217 
                                  3597  
    005161                        3598  dsin:						" builtin 42
                                  3599  	unless_dt		dp,dsin.p
    005161  0a   005204 100226 
    005162                        3600  dsin.1:
                                  3601  	load		deaq,arg5
    005162  aa   000000 242656 
                                  3602  	push_temp		32
    005163  aa   000040 000204 
                                  3603  	load_pr		pr2,op1
    005164  aa   000003 740251 
                                  3604  	use_eaq
    005165  aa   000000 000255 
                                  3605  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    005166  aa   377560 000250 
    005167  aa  0 01316 2731 00   3606  	tsp3		pr0|dsin_
                                  3607  	free_regs
    005170  aa   000004 000206 
                                  3608  	return		deaq
    005171  aa   000001 002617 
                                  3609  
    005172                        3610  csin:						" builtin 43
                                  3611  	unless_dt		cmpx,csin.p
    005172  0a   005204 040226 
    005173                        3612  csin.1:
                                  3613  	load		aq,arg5
    005173  aa   000000 241656 
                                  3614  	push_temp		32
    005174  aa   000040 000204 
                                  3615  	load_pr		pr2,op1
    005175  aa   000003 740251 
                                  3616  	use_eaq
    005176  aa   000000 000255 
                                  3617  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    005177  aa   377560 000250 
    005200  aa  0 01412 2731 00   3618  	tsp3		pr0|csin_
    005201  aa  6 00050 2371 00   3619  	ldaq		pr6|temp_pt
                                  3620  	free_regs
    005202  aa   000004 000206 
                                  3621  	return		aq
    005203  aa   000001 001617 
                                  3622  
    005204                        3623  dsin.p:
    005204                        3624  csin.p:
                                  3625  	jump		bu_dt5.p
    005204  0a   006371 000220 
                                  3626  
    005205                        3627  sqrt:						" builtin 44
                                  3628  	dt_jump1  	op1,(sqrt_i,sqrt.1,dsqrt.1,csqrt.1,wrong_type.p,wrong_type.p,wrong_type.p)
    005205  aa   000007 740374 
    005206  00   005214 005212 
    005207  00   005225 005236 
    005210  00   003134 003134 
    005211  0a   003134 000000 
                        000007 
                                  3629  
    005212                        3630  sqrt.1:
                                  3631  	load		eaq,arg5
    005212  aa   000000 242256 
                                  3632  	jump		sqrt.2
    005213  0a   005215 000220 
                                  3633  
    005214                        3634  sqrt_i:
                                  3635  	s_call		cv_load.ir
    005214  0a   002174 000223 
                                  3636  
    005215                        3637  sqrt.2:
                                  3638  	push_temp		32
    005215  aa   000040 000204 
                                  3639  	load_pr		pr2,op1
    005216  aa   000003 740251 
                                  3640  	use_eaq
    005217  aa   000000 000255 
                                  3641  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    005220  aa   377560 000250 
    005221  aa  0 01274 2731 00   3642  	tsp3		pr0|sqrt_
                                  3643  	free_regs
    005222  aa   000004 000206 
                                  3644  	return		eaq
    005223  aa   000001 002217 
                                  3645  
    005224                        3646  dsqrt:						" builtin 45
                                  3647  	unless_dt		dp,dsqrt.p
    005224  0a   005247 100226 
    005225                        3648  dsqrt.1:
                                  3649  	load		deaq,arg5
    005225  aa   000000 242656 
                                  3650  	push_temp		32
    005226  aa   000040 000204 
                                  3651  	load_pr		pr2,op1
    005227  aa   000003 740251 
                                  3652  	use_eaq
    005230  aa   000000 000255 
                                  3653  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    005231  aa   377560 000250 
    005232  aa  0 01315 2731 00   3654  	tsp3		pr0|dsqrt_
                                  3655  	free_regs
    005233  aa   000004 000206 
                                  3656  	return		deaq
    005234  aa   000001 002617 
                                  3657  
    005235                        3658  csqrt:						" builtin 46
                                  3659  	unless_dt		cmpx,csqrt.p
    005235  0a   005247 040226 
    005236                        3660  csqrt.1:
                                  3661  	load		aq,arg5
    005236  aa   000000 241656 
                                  3662  	push_temp		32
    005237  aa   000040 000204 
                                  3663  	load_pr		pr2,op1
    005240  aa   000003 740251 
                                  3664  	use_eaq
    005241  aa   000000 000255 
                                  3665  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    005242  aa   377560 000250 
    005243  aa  0 01413 2731 00   3666  	tsp3		pr0|csqrt_
    005244  aa  6 00050 2371 00   3667  	ldaq		pr6|temp_pt
                                  3668  	free_regs
    005245  aa   000004 000206 
                                  3669  	return		aq
    005246  aa   000001 001617 
                                  3670  
    005247                        3671  dsqrt.p:
    005247                        3672  csqrt.p:
                                  3673  	jump		bu_dt5.p
    005247  0a   006371 000220 
                                  3674  
    005250                        3675  tanh:						" builtin 47
                                  3676  	dt_jump1		arg5,(tanh.int,tanh.real,tanh.dp,tanh.p,tanh.p,tanh.p,tanh.p)
    005250  aa   000007 240374 
    005251  00   005255 005257 
    005252  00   005270 005303 
    005253  00   005303 005303 
    005254  0a   005303 000000 
                        000007 
                                  3677  
    005255                        3678  tanh.int:
                                  3679  	s_call		cv_load.ir
    005255  0a   002174 000223 
                                  3680  	jump		tanh.1
    005256  0a   005260 000220 
                                  3681  
    005257                        3682  tanh.real:
                                  3683  	load		eaq,arg5
    005257  aa   000000 242256 
                                  3684  
    005260                        3685  tanh.1:
                                  3686  	push_temp		32
    005260  aa   000040 000204 
                                  3687  	load_pr		pr2,op1
    005261  aa   000003 740251 
                                  3688  	use_eaq
    005262  aa   000000 000255 
                                  3689  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    005263  aa   377560 000250 
    005264  aa  0 01414 2731 00   3690  	tsp3		pr0|tanh_
    005265  aa  6 00050 4311 00   3691  	fld		pr6|temp_pt
                                  3692  	free_regs
    005266  aa   000004 000206 
                                  3693  	return		eaq
    005267  aa   000001 002217 
                                  3694  
    005270                        3695  tanh.dp:
                                  3696  	load		deaq,arg5
    005270  aa   000000 242656 
                                  3697  	push_temp		32
    005271  aa   000040 000204 
                                  3698  	load_pr		pr2,op1
    005272  aa   000003 740251 
                                  3699  	use_eaq
    005273  aa   000000 000255 
                                  3700  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    005274  aa   377560 000250 
    005275  aa  0 01457 2731 00   3701  	tsp3		pr0|dtanh_
    005276  aa  6 00050 4331 00   3702  	dfld		pr6|temp_pt
                                  3703  	free_regs
    005277  aa   000004 000206 
                                  3704  	return		deaq
    005300  aa   000001 002617 
                                  3705  
                                  3706  
    005301                        3707  dtanh:						" builtin 77
                                  3708  	unless_dt		dp,dtanh.p
    005301  0a   005303 100226 
                                  3709  	jump		tanh.dp
    005302  0a   005270 000220 
                                  3710  
                                  3711  
    005303                        3712  tanh.p:
    005303                        3713  dtanh.p:
                                  3714  	jump		bu_dt5.p
    005303  0a   006371 000220 
                                  3715  
    005304                        3716  sinh:						" builtin 74
                                  3717  	dt_jump1		arg5,(sinh.int,sinh.real,sinh.dp,sinh.p,sinh.p,sinh.p,sinh.p)
    005304  aa   000007 240374 
    005305  00   005311 005313 
    005306  00   005324 005337 
    005307  00   005337 005337 
    005310  0a   005337 000000 
                        000007 
                                  3718  
    005311                        3719  sinh.int:
                                  3720  	s_call		cv_load.ir
    005311  0a   002174 000223 
                                  3721  	jump		sinh.1
    005312  0a   005314 000220 
                                  3722  
    005313                        3723  sinh.real:
                                  3724  	load		eaq,arg5
    005313  aa   000000 242256 
                                  3725  
    005314                        3726  sinh.1:
                                  3727  	push_temp		32
    005314  aa   000040 000204 
                                  3728  	load_pr		pr2,op1
    005315  aa   000003 740251 
                                  3729  	use_eaq
    005316  aa   000000 000255 
                                  3730  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    005317  aa   377560 000250 
    005320  aa  0 01460 2731 00   3731  	tsp3		pr0|sinh_
    005321  aa  6 00050 4311 00   3732  	fld		pr6|temp_pt
                                  3733  	free_regs
    005322  aa   000004 000206 
                                  3734  	return		eaq
    005323  aa   000001 002217 
                                  3735  
    005324                        3736  sinh.dp:
                                  3737  	load		deaq,arg5
    005324  aa   000000 242656 
                                  3738  	push_temp		32
    005325  aa   000040 000204 
                                  3739  	load_pr		pr2,op1
    005326  aa   000003 740251 
                                  3740  	use_eaq
    005327  aa   000000 000255 
                                  3741  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    005330  aa   377560 000250 
    005331  aa  0 01461 2731 00   3742  	tsp3		pr0|dsinh_
    005332  aa  6 00050 4331 00   3743  	dfld		pr6|temp_pt
                                  3744  	free_regs
    005333  aa   000004 000206 
                                  3745  	return		deaq
    005334  aa   000001 002617 
                                  3746  
                                  3747  
    005335                        3748  dsinh:						" builtin 76
                                  3749  	unless_dt		dp,dsinh.p
    005335  0a   005337 100226 
                                  3750  	jump		sinh.dp
    005336  0a   005324 000220 
                                  3751  
                                  3752  
    005337                        3753  sinh.p:
    005337                        3754  dsinh.p:
                                  3755  	jump		bu_dt5.p
    005337  0a   006371 000220 
                                  3756  
    005340                        3757  cosh:						" builtin 73
                                  3758  	dt_jump1		arg5,(cosh.int,cosh.real,cosh.dp,cosh.p,cosh.p,cosh.p,cosh.p)
    005340  aa   000007 240374 
    005341  00   005345 005347 
    005342  00   005360 005373 
    005343  00   005373 005373 
    005344  0a   005373 000000 
                        000007 
                                  3759  
    005345                        3760  cosh.int:
                                  3761  	s_call		cv_load.ir
    005345  0a   002174 000223 
                                  3762  	jump		cosh.1
    005346  0a   005350 000220 
                                  3763  
    005347                        3764  cosh.real:
                                  3765  	load		eaq,arg5
    005347  aa   000000 242256 
                                  3766  
    005350                        3767  cosh.1:
                                  3768  	push_temp		32
    005350  aa   000040 000204 
                                  3769  	load_pr		pr2,op1
    005351  aa   000003 740251 
                                  3770  	use_eaq
    005352  aa   000000 000255 
                                  3771  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    005353  aa   377560 000250 
    005354  aa  0 01462 2731 00   3772  	tsp3		pr0|cosh_
    005355  aa  6 00050 4311 00   3773  	fld		pr6|temp_pt
                                  3774  	free_regs
    005356  aa   000004 000206 
                                  3775  	return		eaq
    005357  aa   000001 002217 
                                  3776  
    005360                        3777  cosh.dp:
                                  3778  	load		deaq,arg5
    005360  aa   000000 242656 
                                  3779  	push_temp		32
    005361  aa   000040 000204 
                                  3780  	load_pr		pr2,op1
    005362  aa   000003 740251 
                                  3781  	use_eaq
    005363  aa   000000 000255 
                                  3782  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    005364  aa   377560 000250 
    005365  aa  0 01463 2731 00   3783  	tsp3		pr0|dcosh_
    005366  aa  6 00050 4331 00   3784  	dfld		pr6|temp_pt
                                  3785  	free_regs
    005367  aa   000004 000206 
                                  3786  	return		deaq
    005370  aa   000001 002617 
                                  3787  
                                  3788  
    005371                        3789  dcosh:						" builtin 75
                                  3790  	unless_dt		dp,dcosh.p
    005371  0a   005373 100226 
                                  3791  	jump		cosh.dp
    005372  0a   005360 000220 
                                  3792  
                                  3793  
    005373                        3794  cosh.p:
    005373                        3795  dcosh.p:
                                  3796  	jump		bu_dt5.p
    005373  0a   006371 000220 
                                  3797  
    005374                        3798  int_builtin:					" builtin 48
                                  3799  	dt_jump1		arg5,(int_builtin.int,int_builtin.real,int_builtin.dp,int_builtin.cmpx,int.p,int.p,int_builtin.tl)
    005374  aa   000007 240374 
    005375  00   005401 005403 
    005376  00   005405 005407 
    005377  00   005417 005417 
    005400  0a   005411 000000 
                        000007 
                                  3800  
    005401                        3801  int_builtin.int:
                                  3802  	load		q,arg5
    005401  aa   000000 240656 
                                  3803  	return		q
    005402  aa   000001 000617 
                                  3804  
    005403                        3805  int_builtin.real:
                                  3806  	s_call		cv_load.ri
    005403  0a   002203 000223 
                                  3807  	return		q
    005404  aa   000001 000617 
                                  3808  
    005405                        3809  int_builtin.dp:
                                  3810  	s_call		cv_load.di
    005405  0a   002223 000223 
                                  3811  	return		q
    005406  aa   000001 000617 
                                  3812  
    005407                        3813  int_builtin.cmpx:
                                  3814  	s_call		cv_load.ri
    005407  0a   002203 000223 
                                  3815  	return		q
    005410  aa   000001 000617 
                                  3816  
    005411                        3817  int_builtin.tl:
                                  3818  	load		q,arg5
    005411  aa   000000 240656 
                                  3819  	return		q
    005412  aa   000001 000617 
                                  3820  
                                  3821  
    005413                        3822  ifix:						" builtin 52
                                  3823  	unless_dt		real,ifix.p
    005413  0a   005417 200226 
                                  3824  	jump		int_builtin.real
    005414  0a   005403 000220 
                                  3825  
                                  3826  
    005415                        3827  idint:						" builtin 50
                                  3828  	unless_dt		dp,idint.p
    005415  0a   005417 100226 
                                  3829  	jump		int_builtin.dp
    005416  0a   005405 000220 
                                  3830  
                                  3831  
    005417                        3832  int.p:
    005417                        3833  ifix.p:
    005417                        3834  idint.p:
                                  3835  	jump		bu_dt5.p
    005417  0a   006371 000220 
                                  3836  
    005420                        3837  aint:						" builtin 49
                                  3838  	dt_jump1		arg5,(aint.int,aint.real,aint.dp,aint.p,aint.p,aint.p,aint.p)
    005420  aa   000007 240374 
    005421  00   005425 005427 
    005422  00   005433 005441 
    005423  00   005441 005441 
    005424  0a   005441 000000 
                        000007 
                                  3839  
    005425                        3840  aint.int:
                                  3841  	s_call		cv_load.ir
    005425  0a   002174 000223 
                                  3842  	return		eaq
    005426  aa   000001 002217 
                                  3843  
    005427                        3844  aint.real:
                                  3845  	load_for_test	eaq,arg5
    005427  aa   000000 242361 
                                  3846  	use_eaq		protect_indicators
    005430  aa   000001 000255 
    005431  aa  0 01124 7001 00   3847  	tsx0		pr0|trunc_fl
                                  3848  	return		eaq
    005432  aa   000001 002217 
                                  3849  
    005433                        3850  aint.dp:
                                  3851  	load_for_test	deaq,arg5
    005433  aa   000000 242761 
                                  3852  	use_eaq		protect_indicators
    005434  aa   000001 000255 
    005435  aa  0 01124 7001 00   3853  	tsx0		pr0|trunc_fl
                                  3854  	return		deaq
    005436  aa   000001 002617 
                                  3855  
                                  3856  
    005437                        3857  dint:						" builtin 78
                                  3858  	unless_dt		dp,dint.p
    005437  0a   005441 100226 
                                  3859  	jump		aint.dp
    005440  0a   005433 000220 
                                  3860  
                                  3861  
    005441                        3862  aint.p:
    005441                        3863  dint.p:
                                  3864  	jump		bu_dt5.p
    005441  0a   006371 000220 
                                  3865  
    005442                        3866  anint:						" builtin 79
                                  3867  	dt_jump1		arg5,(anint.int,anint.real,anint.dp,anint.p,anint.p,anint.p,anint.p)
    005442  aa   000007 240374 
    005443  00   005447 005451 
    005444  00   005455 005463 
    005445  00   005463 005463 
    005446  0a   005463 000000 
                        000007 
                                  3868  
    005447                        3869  anint.int:
                                  3870  	s_call		cv_load.ir
    005447  0a   002174 000223 
                                  3871  	return		eaq
    005450  aa   000001 002217 
                                  3872  
    005451                        3873  anint.real:
                                  3874  	load_for_test	eaq,arg5
    005451  aa   000000 242361 
                                  3875  	use_eaq		protect_indicators
    005452  aa   000001 000255 
    005453  aa  0 01464 7001 00   3876  	tsx0		pr0|nearest_whole_number
                                  3877  	return		eaq
    005454  aa   000001 002217 
                                  3878  
    005455                        3879  anint.dp:
                                  3880  	load_for_test	deaq,arg5
    005455  aa   000000 242761 
                                  3881  	use_eaq		protect_indicators
    005456  aa   000001 000255 
    005457  aa  0 01464 7001 00   3882  	tsx0		pr0|nearest_whole_number
                                  3883  	return		deaq
    005460  aa   000001 002617 
                                  3884  
                                  3885  
    005461                        3886  dnint:						" builtin 80
                                  3887  	unless_dt		dp,dnint.p
    005461  0a   005463 100226 
                                  3888  	jump		anint.dp
    005462  0a   005455 000220 
                                  3889  
                                  3890  
    005463                        3891  anint.p:
    005463                        3892  dnint.p:
                                  3893  	jump		bu_dt5.p
    005463  0a   006371 000220 
                                  3894  
    005464                        3895  nint:						" builtin 81
                                  3896  	dt_jump1		arg5,(nint.int,nint.real,nint.dp,nint.p,nint.p,nint.p,nint.p)
    005464  aa   000007 240374 
    005465  00   005471 005473 
    005466  00   005477 005505 
    005467  00   005505 005505 
    005470  0a   005505 000000 
                        000007 
                                  3897  
    005471                        3898  nint.int:
                                  3899  	load		q,arg5
    005471  aa   000000 240656 
                                  3900  	return		q
    005472  aa   000001 000617 
                                  3901  
    005473                        3902  nint.real:
                                  3903  	load_for_test	eaq,arg5
    005473  aa   000000 242361 
                                  3904  	use_eaq		protect_indicators
    005474  aa   000001 000255 
    005475  aa  0 01465 7001 00   3905  	tsx0		pr0|nearest_integer
                                  3906  	return		q
    005476  aa   000001 000617 
                                  3907  
    005477                        3908  nint.dp:
                                  3909  	load_for_test	deaq,arg5
    005477  aa   000000 242761 
                                  3910  	use_eaq		protect_indicators
    005500  aa   000001 000255 
    005501  aa  0 01465 7001 00   3911  	tsx0		pr0|nearest_integer
                                  3912  	return		q
    005502  aa   000001 000617 
                                  3913  
                                  3914  
    005503                        3915  idnint:						" builtin 82
                                  3916  	unless_dt		dp,idnint.p
    005503  0a   005505 100226 
                                  3917  	jump		nint.dp
    005504  0a   005477 000220 
                                  3918  
                                  3919  
    005505                        3920  nint.p:
    005505                        3921  idnint.p:
                                  3922  	jump		bu_dt5.p
    005505  0a   006371 000220 
                                  3923  
    005506                        3924  real_builtin:					" builtin 54
                                  3925  	dt_jump1		arg5,(real_builtin.int,real_builtin.real,real_builtin.dp,real_builtin.cmpx,real.p,real.p,real.p)
    005506  aa   000007 240374 
    005507  00   005513 005515 
    005510  00   005517 005523 
    005511  00   005531 005531 
    005512  0a   005531 000000 
                        000007 
                                  3926  
    005513                        3927  real_builtin.int:
                                  3928  	s_call		cv_load.ir
    005513  0a   002174 000223 
                                  3929  	return		eaq
    005514  aa   000001 002217 
                                  3930  
    005515                        3931  real_builtin.real:
                                  3932  	load		eaq,arg5
    005515  aa   000000 242256 
                                  3933  	return		eaq
    005516  aa   000001 002217 
                                  3934  
    005517                        3935  real_builtin.dp:
                                  3936  	load		deaq,arg5
    005517  aa   000000 242656 
                                  3937  	emit_inst		1
    005520  aa   000001 040242 
    005521  aa   000000 4710 00   3938  	frd		0
                                  3939  	return		eaq
    005522  aa   000001 002217 
                                  3940  
    005523                        3941  real_builtin.cmpx:
                                  3942  	load		eaq,arg5
    005523  aa   000000 242256 
                                  3943  	return		eaq
    005524  aa   000001 002217 
                                  3944  
                                  3945  
    005525                        3946  float:						" builtin 51
                                  3947  	unless_dt		int,float.p
    005525  0a   005531 400226 
                                  3948  	jump		real_builtin.int
    005526  0a   005513 000220 
                                  3949  
                                  3950  
    005527                        3951  sngl:						" builtin 53
                                  3952  	unless_dt		dp,sngl.p
    005527  0a   005531 100226 
                                  3953  	jump		real_builtin.dp
    005530  0a   005517 000220 
                                  3954  
                                  3955  
    005531                        3956  real.p:
    005531                        3957  float.p:
    005531                        3958  sngl.p:
                                  3959  	jump		bu_dt5.p
    005531  0a   006371 000220 
                                  3960  
    005532                        3961  aimag:						" builtin 55
                                  3962  	unless_dt		cmpx,aimag.p
    005532  0a   005535 040226 
                                  3963  
                                  3964  	load		ieaq,arg5
    005533  aa   000000 243256 
                                  3965  	return		eaq
    005534  aa   000001 002217 
                                  3966  
    005535                        3967  aimag.p:
                                  3968  	jump		bu_dt5.p
    005535  0a   006371 000220 
                                  3969  
    005536                        3970  dble:						" builtin 56
                                  3971  	dt_jump1		arg5,(dble.int,dble.real,dble.dp,dble.cmpx,dble.p,dble.p,dble.p)
    005536  aa   000007 240374 
    005537  00   005543 005545 
    005540  00   005547 005551 
    005541  00   005553 005553 
    005542  0a   005553 000000 
                        000007 
                                  3972  
    005543                        3973  dble.int:
                                  3974  	s_call		cv_load.id
    005543  0a   002214 000223 
                                  3975  	return		deaq
    005544  aa   000001 002617 
                                  3976  
    005545                        3977  dble.real:
                                  3978  	load		eaq,arg5
    005545  aa   000000 242256 
                                  3979  	return		deaq
    005546  aa   000001 002617 
                                  3980  
    005547                        3981  dble.dp:
                                  3982  	load		deaq,arg5
    005547  aa   000000 242656 
                                  3983  	return		deaq
    005550  aa   000001 002617 
                                  3984  
    005551                        3985  dble.cmpx:
                                  3986  	load		eaq,arg5
    005551  aa   000000 242256 
                                  3987  	return		deaq
    005552  aa   000001 002617 
                                  3988  
    005553                        3989  dble.p:
                                  3990  	jump		bu_dt5.p
    005553  0a   006371 000220 
                                  3991  
    005554                        3992  cmplx:						" builtin 57
                                  3993  	if		arg2,=,1,cmplx.one
    005554  0a   005556 110637 
                                  3994  	if		arg2,=,2,cmplx.two
    005555  0a   005604 111237 
                                  3995  
    005556                        3996  cmplx.one:
                                  3997  	dt_jump1		arg5,(cmplx.one.int,cmplx.one.real,cmplx.one.dp,cmplx.one.cmpx,cmplx.one.p,cmplx.one.p,cmplx.one.p)
    005556  aa   000007 240374 
    005557  00   005563 005565 
    005560  00   005567 005573 
    005561  00   005603 005603 
    005562  0a   005603 000000 
                        000007 
                                  3998  
    005563                        3999  cmplx.one.int:
                                  4000  	s_call		cv_load.ir
    005563  0a   002174 000223 
                                  4001  	jump		cmplx.one.join
    005564  0a   005575 000220 
                                  4002  
    005565                        4003  cmplx.one.real:
                                  4004  	load		eaq,arg5
    005565  aa   000000 242256 
                                  4005  	jump		cmplx.one.join
    005566  0a   005575 000220 
                                  4006  
    005567                        4007  cmplx.one.dp:
                                  4008  	load		deaq,arg5
    005567  aa   000000 242656 
                                  4009  	emit_inst		1
    005570  aa   000001 040242 
    005571  aa   000000 4710 00   4010  	frd		0
                                  4011  	jump		cmplx.one.join
    005572  0a   005575 000220 
                                  4012  
    005573                        4013  cmplx.one.cmpx:
                                  4014  	load		aq,arg5
    005573  aa   000000 241656 
                                  4015  	return		aq
    005574  aa   000001 001617 
                                  4016  
    005575                        4017  cmplx.one.join:
                                  4018  	push_output
    005575  aa   000030 000206 
                                  4019  	store		eaq,op1,no_update
    005576  aa   000001 742357 
                                  4020  	bump		op1
    005577  aa   000001 740363 
    005600  aa   400000 4310 03   4021  	fld		=0.0,du
    005601  aa   740001 4550 00   4022  	fst		op1+1
                                  4023  	return		op1
    005602  aa   000001 740217 
                                  4024  
    005603                        4025  cmplx.one.p:
                                  4026  	jump		bu_dt5.p
    005603  0a   006371 000220 
                                  4027  
    005604                        4028  cmplx.two:
                                  4029  	dt_jump		(cmplx.two.ii,cmplx.two.ri,cmplx.two.di,cmplx.two.e1,cmplx.two.ir,cmplx.two.rr,cmplx.two.dr,cmplx.two.e1,cmplx.two.id,cmplx.two.rd,cmplx.two.dd,cmplx.two.e1,cmplx.two.e2,cmplx.two.e2,cmplx.two.e2,cmplx.two.e1,cmplx.two.e2,cmplx.two.e1,cmplx.two.e2,cmplx.two.e1)
    005604  aa   000024 000235 
    005605  00   005617 005704 
    005606  00   005704 005702 
    005607  00   005704 005644 
    005610  00   005704 005702 
    005611  00   005704 005704 
    005612  00   005657 005702 
    005613  00   005703 005703 
    005614  00   005703 005702 
    005615  00   005703 005702 
    005616  00   005703 005702 
                        000024 
                                  4030  
    005617                        4031  cmplx.two.ii:
                                  4032  	push_output
    005617  aa   000030 000206 
                                  4033  	if_eaq		q,arg6,cmplx.two.ii.1
    005620  0a   005632 300633 
                                  4034  	swap		arg5
    005621  aa   000000 240202 
                                  4035  	s_call		cv_load.ir
    005622  0a   002174 000223 
                                  4036  	swap		arg5
    005623  aa   000000 240202 
                                  4037  	store		eaq,op1,no_update
    005624  aa   000001 742357 
                                  4038  	swap		arg6
    005625  aa   000000 300202 
                                  4039  	s_call		cv_load.ir
    005626  0a   002174 000223 
                                  4040  	swap		arg6
    005627  aa   000000 300202 
                                  4041  	in_reg		ieaq,op1
    005630  aa   000000 743260 
                                  4042  	return		op1
    005631  aa   000001 740217 
                                  4043  
    005632                        4044  cmplx.two.ii.1:
                                  4045  	bump		arg6
    005632  aa   000001 300363 
                                  4046  	swap		arg6
    005633  aa   000000 300202 
                                  4047  	s_call		cv_load.ir
    005634  0a   002174 000223 
                                  4048  	swap		arg6
    005635  aa   000000 300202 
                                  4049  	store		ieaq,op1,no_update
    005636  aa   000001 743357 
                                  4050  	swap		arg5
    005637  aa   000000 240202 
                                  4051  	s_call		cv_load.ir
    005640  0a   002174 000223 
                                  4052  	swap		arg5
    005641  aa   000000 240202 
                                  4053  	in_reg		eaq,op1
    005642  aa   000000 742260 
                                  4054  	return		op1
    005643  aa   000001 740217 
                                  4055  
    005644                        4056  cmplx.two.rr:
                                  4057  	push_output
    005644  aa   000030 000206 
                                  4058  	if_eaq		eaq,arg6,cmplx.two.rr.1
    005645  0a   005653 302233 
                                  4059  	load		eaq,arg5
    005646  aa   000000 242256 
                                  4060  	store		eaq,op1,no_update
    005647  aa   000001 742357 
    005650  aa   300000 4310 00   4061  	fld		arg6
                                  4062  	in_reg		ieaq,op1
    005651  aa   000000 743260 
                                  4063  	return		op1
    005652  aa   000001 740217 
                                  4064  
    005653                        4065  cmplx.two.rr.1:
                                  4066  	store		ieaq,op1,no_update
    005653  aa   000001 743357 
    005654  aa   240000 4310 00   4067  	fld		arg5
                                  4068  	in_reg		eaq,op1
    005655  aa   000000 742260 
                                  4069  	return		op1
    005656  aa   000001 740217 
                                  4070  
    005657                        4071  cmplx.two.dd:
                                  4072  	push_output
    005657  aa   000030 000206 
                                  4073  	if_eaq		deaq,arg6,cmplx.two.dd.1
    005660  0a   005672 302633 
                                  4074  	load		deaq,arg5
    005661  aa   000000 242656 
                                  4075  	emit_inst		1
    005662  aa   000001 040242 
    005663  aa   000000 4710 00   4076  	frd		0
                                  4077  	store		eaq,op1,no_update
    005664  aa   000001 742357 
    005665  aa   300000 4330 00   4078  	dfld		arg6
                                  4079  	emit_inst		1
    005666  aa   000001 040242 
    005667  aa   000000 4710 00   4080  	frd		0
                                  4081  	in_reg		ieaq,op1
    005670  aa   000000 743260 
                                  4082  	return		op1
    005671  aa   000001 740217 
                                  4083  
    005672                        4084  cmplx.two.dd.1:
                                  4085  	emit_inst		1
    005672  aa   000001 040242 
    005673  aa   000000 4710 00   4086  	frd		0
                                  4087  	store		ieaq,op1,no_update
    005674  aa   000001 743357 
    005675  aa   240000 4330 00   4088  	dfld		arg5
                                  4089  	emit_inst		1
    005676  aa   000001 040242 
    005677  aa   000000 4710 00   4090  	frd		0
                                  4091  	in_reg		eaq,op1
    005700  aa   000000 742260 
                                  4092  	return		op1
    005701  aa   000001 740217 
                                  4093  
    005702                        4094  cmplx.two.e1:
                                  4095  	jump		bu_dt5.p
    005702  0a   006371 000220 
                                  4096  
    005703                        4097  cmplx.two.e2:
                                  4098  	jump		bu_dt6.p
    005703  0a   006374 000220 
                                  4099  
    005704                        4100  cmplx.two.ri:
    005704                        4101  cmplx.two.di:
    005704                        4102  cmplx.two.ir:
    005704                        4103  cmplx.two.dr:
    005704                        4104  cmplx.two.id:
    005704                        4105  cmplx.two.rd:
                                  4106  	error		314,arg1
    005704  aa   000472 000702 
    005705  aa   000000 040303 
                        000001 
                                  4107  
    005706                        4108  conjg:						" builtin 58
                                  4109  	bump		arg5
    005706  aa   000001 240363 
                                  4110  	unless_dt		cmpx,conjg.p
    005707  0a   005730 040226 
                                  4111  
                                  4112  	push_output
    005710  aa   000030 000206 
                                  4113  	bump		op1
    005711  aa   000001 740363 
                                  4114  
                                  4115  	if_eaq		ieaq,arg5,conjg.1
    005712  0a   005722 243233 
                                  4116  
                                  4117  	load		eaq,arg5
    005713  aa   000000 242256 
                                  4118  	store		eaq,op1,no_update
    005714  aa   000001 742357 
    005715  aa   240001 4310 00   4119  	fld		arg5+1
                                  4120  	emit_inst		1
    005716  aa   000001 040242 
    005717  aa   000000 5130 00   4121  	fneg
                                  4122  	in_reg		ieaq,op1
    005720  aa   000000 743260 
                                  4123  
                                  4124  	return		op1
    005721  aa   000001 740217 
                                  4125  
    005722                        4126  conjg.1:
                                  4127  	emit_inst		1
    005722  aa   000001 040242 
    005723  aa   000000 5130 00   4128  	fneg
                                  4129  	store		ieaq,op1,no_update
    005724  aa   000001 743357 
    005725  aa   240000 4310 00   4130  	fld		arg5
                                  4131  	in_reg		eaq,op1
    005726  aa   000000 742260 
                                  4132  
                                  4133  	return		op1
    005727  aa   000001 740217 
                                  4134  
    005730                        4135  conjg.p:
                                  4136  	jump		bu_dt5.p
    005730  0a   006371 000220 
                                  4137  
    005731                        4138  tan:						" builtin 59
                                  4139  	dt_jump1		op1,(tan_i,tan.1,dtan.1,bu_dt5.p,wrong_type.p,wrong_type.p,wrong_type.p)
    005731  aa   000007 740374 
    005732  00   005740 005736 
    005733  00   005751 006371 
    005734  00   003134 003134 
    005735  0a   003134 000000 
                        000007 
                                  4140  
    005736                        4141  tan.1:
                                  4142  	load		eaq,arg5
    005736  aa   000000 242256 
                                  4143  	jump		tan.2
    005737  0a   005741 000220 
                                  4144  
    005740                        4145  tan_i:
                                  4146  	s_call		cv_load.ir
    005740  0a   002174 000223 
                                  4147  
    005741                        4148  tan.2:
                                  4149  	push_temp		32
    005741  aa   000040 000204 
                                  4150  	load_pr		pr2,op1
    005742  aa   000003 740251 
                                  4151  	use_eaq
    005743  aa   000000 000255 
                                  4152  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    005744  aa   377560 000250 
    005745  aa  0 01301 2731 00   4153  	tsp3		pr0|tan_
                                  4154  	free_regs
    005746  aa   000004 000206 
                                  4155  	return		eaq
    005747  aa   000001 002217 
                                  4156  
    005750                        4157  dtan:						" builtin 60
                                  4158  	unless_dt		dp,bu_dt5.p
    005750  0a   006371 100226 
    005751                        4159  dtan.1:
                                  4160  	load		deaq,arg5
    005751  aa   000000 242656 
                                  4161  	push_temp		32
    005752  aa   000040 000204 
                                  4162  	load_pr		pr2,op1
    005753  aa   000003 740251 
                                  4163  	use_eaq
    005754  aa   000000 000255 
                                  4164  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    005755  aa   377560 000250 
    005756  aa  0 01322 2731 00   4165  	tsp3		pr0|dtan_
                                  4166  	free_regs
    005757  aa   000004 000206 
                                  4167  	return		deaq
    005760  aa   000001 002617 
                                  4168  
    005761                        4169  asin:						" builtin 61
                                  4170  	dt_jump1		op1,(asin_i,asin.1,dasin.1,bu_dt5.p,wrong_type.p,wrong_type.p,wrong_type.p)
    005761  aa   000007 740374 
    005762  00   005770 005766 
    005763  00   006001 006371 
    005764  00   003134 003134 
    005765  0a   003134 000000 
                        000007 
                                  4171  
    005766                        4172  asin.1:
                                  4173  	load		eaq,arg5
    005766  aa   000000 242256 
                                  4174  	jump		asin.2
    005767  0a   005771 000220 
                                  4175  
    005770                        4176  asin_i:
                                  4177  	s_call		cv_load.ir
    005770  0a   002174 000223 
                                  4178  
    005771                        4179  asin.2:
                                  4180  	push_temp		32
    005771  aa   000040 000204 
                                  4181  	load_pr		pr2,op1
    005772  aa   000003 740251 
                                  4182  	use_eaq
    005773  aa   000000 000255 
                                  4183  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    005774  aa   377560 000250 
    005775  aa  0 01303 2731 00   4184  	tsp3		pr0|asin_
                                  4185  	free_regs
    005776  aa   000004 000206 
                                  4186  	return		eaq
    005777  aa   000001 002217 
                                  4187  
    006000                        4188  dasin:						" builtin 62
                                  4189  	unless_dt		dp,bu_dt5.p
    006000  0a   006371 100226 
    006001                        4190  dasin.1:
                                  4191  	load		deaq,arg5
    006001  aa   000000 242656 
                                  4192  	push_temp		32
    006002  aa   000040 000204 
                                  4193  	load_pr		pr2,op1
    006003  aa   000003 740251 
                                  4194  	use_eaq
    006004  aa   000000 000255 
                                  4195  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    006005  aa   377560 000250 
    006006  aa  0 01324 2731 00   4196  	tsp3		pr0|dasin_
                                  4197  	free_regs
    006007  aa   000004 000206 
                                  4198  	return		deaq
    006010  aa   000001 002617 
                                  4199  
    006011                        4200  acos:						" builtin 63
                                  4201  	dt_jump1		op1,(acos_i,acos.1,dacos.1,bu_dt5.p,wrong_type.p,wrong_type.p,wrong_type.p)
    006011  aa   000007 740374 
    006012  00   006020 006016 
    006013  00   006031 006371 
    006014  00   003134 003134 
    006015  0a   003134 000000 
                        000007 
                                  4202  
    006016                        4203  acos.1:
                                  4204  	load		eaq,arg5
    006016  aa   000000 242256 
                                  4205  	jump		acos.2
    006017  0a   006021 000220 
                                  4206  
    006020                        4207  acos_i:
                                  4208  	s_call		cv_load.ir
    006020  0a   002174 000223 
                                  4209  
    006021                        4210  acos.2:
                                  4211  	push_temp		32
    006021  aa   000040 000204 
                                  4212  	load_pr		pr2,op1
    006022  aa   000003 740251 
                                  4213  	use_eaq
    006023  aa   000000 000255 
                                  4214  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    006024  aa   377560 000250 
    006025  aa  0 01305 2731 00   4215  	tsp3		pr0|acos_
                                  4216  	free_regs
    006026  aa   000004 000206 
                                  4217  	return		eaq
    006027  aa   000001 002217 
                                  4218  
    006030                        4219  dacos:						" builtin 64
                                  4220  	unless_dt		dp,bu_dt5.p
    006030  0a   006371 100226 
    006031                        4221  dacos.1:
                                  4222  	load		deaq,arg5
    006031  aa   000000 242656 
                                  4223  	push_temp		32
    006032  aa   000040 000204 
                                  4224  	load_pr		pr2,op1
    006033  aa   000003 740251 
                                  4225  	use_eaq
    006034  aa   000000 000255 
                                  4226  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    006035  aa   377560 000250 
    006036  aa  0 01326 2731 00   4227  	tsp3		pr0|dacos_
                                  4228  	free_regs
    006037  aa   000004 000206 
                                  4229  	return		deaq
    006040  aa   000001 002617 
                                  4230  
    006041                        4231  char_builtin:					" builtin 65
                                  4232  	unless_dt		int,bu_dt5.p
    006041  0a   006371 400226 
                                  4233  
                                  4234  	if_optype		constant,char.constant
    006042  0a   006052 200227 
                                  4235  
                                  4236  	push_output
    006043  aa   000030 000206 
                                  4237  
                                  4238  	load		q,op2
    006044  aa   000000 700656 
                                  4239  
                                  4240  	emit_inst		1
    006045  aa   000001 040242 
    006046  aa   000033 7360 00   4241  	qls		27
                                  4242  
                                  4243  	bump		op1,1
    006047  aa   000001 740363 
                                  4244  
    006050  aa   740000 7560 00   4245  	stq		op1
                                  4246  
                                  4247  	return		op1
    006051  aa   000001 740217 
                                  4248  
    006052                        4249  char.constant:
                                  4250  	int_to_char1
    006052  aa   000054 000206 
                                  4251  	return		op1
    006053  aa   000001 740217 
                                  4252  
    006054                        4253  ichar:						" builtin 66
                                  4254  	unless_dt		char,bu_dt5.p
    006054  0a   006371 010226 
                                  4255  
                                  4256  	if_optype		constant,ichar.constant
    006055  0a   006071 200227 
                                  4257  
                                  4258  	push_output
    006056  aa   000030 000206 
                                  4259  
                                  4260  	if_aligned	op2,ichar.aligned
    006057  0a   006065 700632 
                                  4261  
                                  4262  	emit_eis
    006060  aa   000000 000207 
    006061  aa  0 00100 1015 00   4263  	mrl		(pr),(pr),fill(0)
    006062  aa   700000 000001    4264  	desc9a		op2,1
    006063  aa   740000 000004    4265  	desc9a		op1,4
                                  4266  
                                  4267  	return		op1
    006064  aa   000001 740217 
                                  4268  
    006065                        4269  ichar.aligned:
    006065  aa   700000 2360 00   4270  	ldq		op2
                                  4271  
                                  4272  	emit_inst		1
    006066  aa   000001 040242 
    006067  aa   000033 7720 00   4273  	qrl		27
                                  4274  
                                  4275  	return		q
    006070  aa   000001 000617 
                                  4276  
    006071                        4277  ichar.constant:
                                  4278  	char1_to_int
    006071  aa   000055 000206 
                                  4279  	return		op1
    006072  aa   000001 740217 
                                  4280  
    006073                        4281  index:						" builtin 67
                                  4282  	unless_dt		char,bu_dt5.p
    006073  0a   006371 010226 
                                  4283  	swap		op2
    006074  aa   000000 700202 
                                  4284  	unless_dt		char,bu_dt5.p
    006075  0a   006371 010226 
                                  4285  
                                  4286  	push_length	op2
    006076  aa   000000 700304 
                                  4287  	if		op1,=,1,index.1
    006077  0a   006115 750637 
                                  4288  	if		op1,=,2,index.2
    006100  0a   006127 751237 
                                  4289  
                                  4290  	" Length of second string is not known to be 1 or 2
                                  4291  
                                  4292  	push_length	op2
    006101  aa   000000 700304 
                                  4293  
                                  4294  	load_pr		pr2,op3
    006102  aa   000003 640251 
                                  4295  	load		q,op1
    006103  aa   000000 740656 
                                  4296  	use_a
    006104  aa   000000 000252 
    006105  aa  0 01227 7001 00   4297  	tsx0		pr0|set_cs_eis
                                  4298  
                                  4299  	free_regs
    006106  aa   000004 000206 
                                  4300  
                                  4301  	load_pr		pr2,op4
    006107  aa   000003 600251 
                                  4302  	load		q,op2
    006110  aa   000000 700656 
                                  4303  	use_eaq
    006111  aa   000000 000255 
    006112  aa  0 01231 7001 00   4304  	tsx0		pr0|index_cs_eis
                                  4305  
                                  4306  	free_regs
    006113  aa   000004 000206 
                                  4307  
                                  4308  	return		q
    006114  aa   000001 000617 
                                  4309  
    006115                        4310  index.1:
                                  4311  
                                  4312  	" Length of second string is known to be 1
                                  4313  
                                  4314  	emit_eis
    006115  aa   000000 000207 
    006116  aa  0 00100 1245 00   4315  	scm		(pr),(pr),mask(0)
    006117  aa   700000 000000    4316  	desc9a		op2
    006120  aa   640000 000001    4317  	desc9a		op3,1
                                  4318  
    006121  aa  6 00056 0001 00   4319  	arg		pr6|double_temp
                                  4320  
    006122  aa  6 00056 2361 00   4321  	ldq		pr6|double_temp
    006123  aa   000002 6070 04   4322  	ttf		2,ic
    006124  aa   000001 3360 07   4323  	lcq		1,dl
    006125  aa   000001 0760 07   4324  	adq		1,dl
                                  4325  
                                  4326  	return		q
    006126  aa   000001 000617 
                                  4327  
    006127                        4328  index.2:
                                  4329  
                                  4330  	" Length of second string is known to be 2
                                  4331  
                                  4332  	emit_eis
    006127  aa   000000 000207 
    006130  aa  0 00100 1205 00   4333  	scd		(pr),(pr)
    006131  aa   700000 000000    4334  	desc9a		op2
    006132  aa   640000 000002    4335  	desc9a		op3,2
                                  4336  
    006133  aa  6 00056 0001 00   4337  	arg		pr6|double_temp
                                  4338  
    006134  aa  6 00056 2361 00   4339  	ldq		pr6|double_temp
    006135  aa   000002 6070 04   4340  	ttf		2,ic
    006136  aa   000001 3360 07   4341  	lcq		1,dl
    006137  aa   000001 0760 07   4342  	adq		1,dl
                                  4343  
                                  4344  	return		q
    006140  aa   000001 000617 
                                  4345  
    006141                        4346  len:						" builtin 68
                                  4347  	unless_dt		char,bu_dt5.p
    006141  0a   006371 010226 
                                  4348  	push_length	op1
    006142  aa   000000 740304 
                                  4349  	return		op1
    006143  aa   000001 740217 
                                  4350  
    006144                        4351  lge:						" builtin 69
                                  4352  	unless_dt		char,bu_dt5.p
    006144  0a   006371 010226 
                                  4353  	swap		op2
    006145  aa   000000 700202 
                                  4354  	unless_dt		char,bu_dt5.p
    006146  0a   006371 010226 
                                  4355  
                                  4356  	use_ind
    006147  aa   000007 000206 
                                  4357  
                                  4358  	emit_eis
    006150  aa   000000 000207 
    006151  aa  0 40100 1065 00   4359  	cmpc		(pr),(pr),fill(040)
    006152  aa   740000 000000    4360  	desc9a		op1
    006153  aa   700000 000000    4361  	desc9a		op2
                                  4362  
                                  4363  	return		trc
    006154  aa   000001 011217 
                                  4364  
    006155                        4365  lgt:						" builtin 70
                                  4366  	unless_dt		char,bu_dt5.p
    006155  0a   006371 010226 
                                  4367  	swap		op2
    006156  aa   000000 700202 
                                  4368  	unless_dt		char,bu_dt5.p
    006157  0a   006371 010226 
                                  4369  
                                  4370  	use_ind
    006160  aa   000007 000206 
                                  4371  
                                  4372  	emit_eis
    006161  aa   000000 000207 
    006162  aa  0 40100 1065 00   4373  	cmpc		(pr),(pr),fill(040)
    006163  aa   700000 000000    4374  	desc9a		op2
    006164  aa   740000 000000    4375  	desc9a		op1
                                  4376  
                                  4377  	return		tnc
    006165  aa   000001 010617 
                                  4378  
    006166                        4379  lle:						" builtin 71
                                  4380  	unless_dt		char,bu_dt5.p
    006166  0a   006371 010226 
                                  4381  	swap		op2
    006167  aa   000000 700202 
                                  4382  	unless_dt		char,bu_dt5.p
    006170  0a   006371 010226 
                                  4383  
                                  4384  	use_ind
    006171  aa   000007 000206 
                                  4385  
                                  4386  	emit_eis
    006172  aa   000000 000207 
    006173  aa  0 40100 1065 00   4387  	cmpc		(pr),(pr),fill(040)
    006174  aa   700000 000000    4388  	desc9a		op2
    006175  aa   740000 000000    4389  	desc9a		op1
                                  4390  
                                  4391  	return		trc
    006176  aa   000001 011217 
                                  4392  
    006177                        4393  llt:						" builtin 72
                                  4394  	unless_dt		char,bu_dt5.p
    006177  0a   006371 010226 
                                  4395  	swap		op2
    006200  aa   000000 700202 
                                  4396  	unless_dt		char,bu_dt5.p
    006201  0a   006371 010226 
                                  4397  
                                  4398  	use_ind
    006202  aa   000007 000206 
                                  4399  
                                  4400  	emit_eis
    006203  aa   000000 000207 
    006204  aa  0 40100 1065 00   4401  	cmpc		(pr),(pr),fill(040)
    006205  aa   740000 000000    4402  	desc9a		op1
    006206  aa   700000 000000    4403  	desc9a		op2
                                  4404  
                                  4405  	return		tnc
    006207  aa   000001 010617 
                                  4406  
    006210                        4407  dprod:						" builtin 83
                                  4408  	swap		arg5
    006210  aa   000000 240202 
                                  4409  	unless_dt		real,dprod.p
    006211  0a   006217 200226 
                                  4410  	swap		arg5
    006212  aa   000000 240202 
                                  4411  	unless_dt		real,dprod.p
    006213  0a   006217 200226 
                                  4412  
                                  4413  	load_top		eaq
    006214  aa   000000 002257 
    006215  aa   700000 4610 00   4414  	fmp		op2
                                  4415  	return		deaq
    006216  aa   000001 002617 
                                  4416  
    006217                        4417  dprod.p:
                                  4418  	jump		bu_dt6.p
    006217  0a   006374 000220 
                                  4419  
    006220                        4420  and.tl:						" builtin 84
                                  4421  	unless		arg2,>,1,wrong_number.p
    006220  0a   003031 104640 
                                  4422  	unless_one_word_dt	op1,mm_dt1.p
    006221  0a   006377 740315 
                                  4423  	load_top		tq
    006222  aa   000000 004657 
                                  4424  	copy		op2
    006223  aa   000000 700201 
                                  4425  
    006224                        4426  and.tl.loop:
                                  4427  	unless_one_word_dt	op1,mm_dt1.p
    006224  0a   006377 740315 
    006225  aa   740000 3760 00   4428  	anq		op1
                                  4429  	pop		op1
    006226  aa   000000 740203 
                                  4430  	if		arg2,=,2,and.tl.r
    006227  0a   006234 111237 
                                  4431  	copy		arg2
    006230  aa   000000 100201 
                                  4432  	copy		opv
    006231  aa   000000 000201 
                                  4433  	decrement		arg2,1
    006232  aa   000001 100264 
                                  4434  	jump		and.tl.loop
    006233  0a   006224 000220 
                                  4435  
    006234                        4436  and.tl.r:
                                  4437  	jump		mm_ret_tq
    006234  0a   003131 000220 
                                  4438  
    006235                        4439  bool.tl:						" builtin 85
                                  4440  	unless_one_word_dt	arg5,bu_dt5.p
    006235  0a   006371 240315 
                                  4441  	load		tq,arg5
    006236  aa   000000 244656 
                                  4442  	jump		mm_ret_tq
    006237  0a   003131 000220 
                                  4443  
    006240                        4444  compl.tl:						" builtin 86
                                  4445  	unless_one_word_dt	arg5,bu_dt5.p
    006240  0a   006371 240315 
                                  4446  	use_eaq
    006241  aa   000000 000255 
    006242  aa   000001 3360 07   4447  	lcq		1,dl
    006243  aa   240000 6760 00   4448  	erq		arg5
                                  4449  	jump		mm_ret_tq
    006244  0a   003131 000220 
                                  4450  
    006245                        4451  fld.tl:						" builtin 87
                                  4452  	rhs_fld
    006245  aa   000071 000206 
                                  4453  	jump		mm_ret_tq
    006246  0a   003131 000220 
                                  4454  
    006247                        4455  ilr.tl:						" builtin 88
                                  4456  	dt_jump1		arg5,(ilr.1,bu_dt5.p,bu_dt5.p,bu_dt5.p,bu_dt5.p,bu_dt5.p,ilr.1)
    006247  aa   000007 240374 
    006250  00   006254 006371 
    006251  00   006371 006371 
    006252  00   006371 006371 
    006253  0a   006254 000000 
                        000007 
                                  4457  
    006254                        4458  ilr.1:
                                  4459  	dt_jump1		arg6,(ilr.2,bu_dt6.p,bu_dt6.p,bu_dt6.p,bu_dt6.p,bu_dt6.p,bu_dt6.p)
    006254  aa   000007 300374 
    006255  00   006261 006374 
    006256  00   006374 006374 
    006257  00   006374 006374 
    006260  0a   006374 000000 
                        000007 
                                  4460  
    006261                        4461  ilr.2:
                                  4462  	load		q,arg5
    006261  aa   000000 240656 
                                  4463  	load		ia,arg6
    006262  aa   000000 304256 
    006263  aa   000000 7760 05   4464  	qlr		0,al
                                  4465  	jump		mm_ret_q
    006264  0a   003115 000220 
                                  4466  
    006265                        4467  ils.tl:						" builtin 89
                                  4468  	dt_jump1		arg5,(ils.1,bu_dt5.p,bu_dt5.p,bu_dt5.p,bu_dt5.p,bu_dt5.p,ils.1)
    006265  aa   000007 240374 
    006266  00   006272 006371 
    006267  00   006371 006371 
    006270  00   006371 006371 
    006271  0a   006272 000000 
                        000007 
                                  4469  
    006272                        4470  ils.1:
                                  4471  	dt_jump1		arg6,(ils.2,bu_dt6.p,bu_dt6.p,bu_dt6.p,bu_dt6.p,bu_dt6.p,bu_dt6.p)
    006272  aa   000007 300374 
    006273  00   006277 006374 
    006274  00   006374 006374 
    006275  00   006374 006374 
    006276  0a   006374 000000 
                        000007 
                                  4472  
    006277                        4473  ils.2:
                                  4474  	load		q,arg5
    006277  aa   000000 240656 
                                  4475  	load		ia,arg6
    006300  aa   000000 304256 
    006301  aa   000000 7360 05   4476  	qls		0,al
                                  4477  	jump		mm_ret_q
    006302  0a   003115 000220 
                                  4478  
    006303                        4479  irl.tl:						" builtin 90
                                  4480  	dt_jump1		arg5,(irl.1,bu_dt5.p,bu_dt5.p,bu_dt5.p,bu_dt5.p,bu_dt5.p,irl.1)
    006303  aa   000007 240374 
    006304  00   006310 006371 
    006305  00   006371 006371 
    006306  00   006371 006371 
    006307  0a   006310 000000 
                        000007 
                                  4481  
    006310                        4482  irl.1:
                                  4483  	dt_jump1		arg6,(irl.2,bu_dt6.p,bu_dt6.p,bu_dt6.p,bu_dt6.p,bu_dt6.p,bu_dt6.p)
    006310  aa   000007 300374 
    006311  00   006315 006374 
    006312  00   006374 006374 
    006313  00   006374 006374 
    006314  0a   006374 000000 
                        000007 
                                  4484  
    006315                        4485  irl.2:
                                  4486  	load		q,arg5
    006315  aa   000000 240656 
                                  4487  	load		ia,arg6
    006316  aa   000000 304256 
    006317  aa   000000 7720 05   4488  	qrl		0,al
                                  4489  	jump		mm_ret_q
    006320  0a   003115 000220 
                                  4490  
    006321                        4491  irs.tl:						" builtin 91
                                  4492  	dt_jump1		arg5,(irs.1,bu_dt5.p,bu_dt5.p,bu_dt5.p,bu_dt5.p,bu_dt5.p,irs.1)
    006321  aa   000007 240374 
    006322  00   006326 006371 
    006323  00   006371 006371 
    006324  00   006371 006371 
    006325  0a   006326 000000 
                        000007 
                                  4493  
    006326                        4494  irs.1:
                                  4495  	dt_jump1		arg6,(irs.2,bu_dt6.p,bu_dt6.p,bu_dt6.p,bu_dt6.p,bu_dt6.p,bu_dt6.p)
    006326  aa   000007 300374 
    006327  00   006333 006374 
    006330  00   006374 006374 
    006331  00   006374 006374 
    006332  0a   006374 000000 
                        000007 
                                  4496  
    006333                        4497  irs.2:
                                  4498  	load		q,arg5
    006333  aa   000000 240656 
                                  4499  	load		ia,arg6
    006334  aa   000000 304256 
    006335  aa   000000 7320 05   4500  	qrs		0,al
                                  4501  	jump		mm_ret_q
    006336  0a   003115 000220 
                                  4502  
    006337                        4503  or.tl:						" builtin 92
                                  4504  	unless		arg2,>,1,wrong_number.p
    006337  0a   003031 104640 
                                  4505  	unless_one_word_dt	op1,mm_dt1.p
    006340  0a   006377 740315 
                                  4506  	load_top		tq
    006341  aa   000000 004657 
                                  4507  	copy		op2
    006342  aa   000000 700201 
                                  4508  
    006343                        4509  or.tl.loop:
                                  4510  	unless_one_word_dt	op1,mm_dt1.p
    006343  0a   006377 740315 
    006344  aa   740000 2760 00   4511  	orq		op1
                                  4512  	pop		op1
    006345  aa   000000 740203 
                                  4513  	if		arg2,=,2,or.tl.r
    006346  0a   006353 111237 
                                  4514  	copy		arg2
    006347  aa   000000 100201 
                                  4515  	copy		opv
    006350  aa   000000 000201 
                                  4516  	decrement		arg2,1
    006351  aa   000001 100264 
                                  4517  	jump		or.tl.loop
    006352  0a   006343 000220 
                                  4518  
    006353                        4519  or.tl.r:
                                  4520  	jump		mm_ret_tq
    006353  0a   003131 000220 
                                  4521  
    006354                        4522  xor.tl:						" builtin 93
                                  4523  	unless		arg2,>,1,wrong_number.p
    006354  0a   003031 104640 
                                  4524  	unless_one_word_dt	op1,mm_dt1.p
    006355  0a   006377 740315 
                                  4525  	load_top		tq
    006356  aa   000000 004657 
                                  4526  	copy		op2
    006357  aa   000000 700201 
                                  4527  
    006360                        4528  xor.tl.loop:
                                  4529  	unless_one_word_dt	op1,mm_dt1.p
    006360  0a   006377 740315 
    006361  aa   740000 6760 00   4530  	erq		op1
                                  4531  	pop		op1
    006362  aa   000000 740203 
                                  4532  	if		arg2,=,2,xor.tl.r
    006363  0a   006370 111237 
                                  4533  	copy		arg2
    006364  aa   000000 100201 
                                  4534  	copy		opv
    006365  aa   000000 000201 
                                  4535  	decrement		arg2,1
    006366  aa   000001 100264 
                                  4536  	jump		xor.tl.loop
    006367  0a   006360 000220 
                                  4537  
    006370                        4538  xor.tl.r:
                                  4539  	jump		mm_ret_tq
    006370  0a   003131 000220 
                                  4540  
    006371                        4541  bu_dt5.p:
                                  4542  	error		321,arg1,arg5
    006371  aa   000501 001302 
    006372  aa   000000 040303 
    006373  aa   000000 240303 
                        000002 
                                  4543  
    006374                        4544  bu_dt6.p:
                                  4545  	error		321,arg1,arg6
    006374  aa   000501 001302 
    006375  aa   000000 040303 
    006376  aa   000000 300303 
                        000002 
                                  4546  
    006377                        4547  mm_dt1.p:
                                  4548  	error		321,arg1,op1
    006377  aa   000501 001302 
    006400  aa   000000 040303 
    006401  aa   000000 740303 
                        000002 
                                  4549  
    006402                        4550  mm_dt2.p:
                                  4551  	error		321,arg1,op2
    006402  aa   000501 001302 
    006403  aa   000000 040303 
    006404  aa   000000 700303 
                        000002 
                                  4552  
                                  4553  "		Errors common to all relational operators.
    006405                        4554  logical_op1:
                                  4555  	error		339,op1
    006405  aa   000523 000702 
    006406  aa   000000 740303 
                        000001 
                                  4556  
    006407                        4557  logical_op2:
                                  4558  	error		339,op2
    006407  aa   000523 000702 
    006410  aa   000000 700303 
                        000001 
                                  4559  
    006411                        4560  typeless_op1:
                                  4561  	error		362,op1
    006411  aa   000552 000702 
    006412  aa   000000 740303 
                        000001 
                                  4562  
    006413                        4563  typeless_op2:
                                  4564  	error		362,op2
    006413  aa   000552 000702 
    006414  aa   000000 700303 
                        000001 
                                  4565  
    006415                        4566  invalid_opnd:
                                  4567  	error		340,op2
    006415  aa   000524 000702 
    006416  aa   000000 700303 
                        000001 
                                  4568  
    006417                        4569  not_scalar:
                                  4570  	error		340,op1
    006417  aa   000524 000702 
    006420  aa   000000 740303 
                        000001 
                                  4571  "
                                  4572  "		Begin relational operators.
                                  4573  "
                                  4574  less:	func		2
    006421  aa   000000 001215 
                                  4575  
                                  4576  	refresh_regs_if_next_is_jump
    006422  aa   000050 000206 
                                  4577  
                                  4578  	dt_jump		(less_ii,less_ri,less_di,less_ci,less_ir,less_rr,less_dr,less_cr,less_id,less_rd,less_dd,less_cd,less_ic,less_rc,less_dc,less_cc,less_e2,less_e1,less_tl,less_tl)
    006423  aa   000024 000235 
    006424  00   006436 006464 
    006425  00   006473 006530 
    006426  00   006460 006476 
    006427  00   006520 006534 
    006430  00   006467 006512 
    006431  00   006504 006541 
    006432  00   006526 006532 
    006433  00   006536 006544 
    006434  00   006547 006601 
    006435  00   006621 006621 
                        000024 
                                  4579  
    006436                        4580  less_ii:
                                  4581  	note_eligible_ind_var_use
    006436  aa   000051 000206 
                                  4582  	if_global_ind_var	arg1,less_ii.global
    006437  0a   006447 040726 
                                  4583  	if_global_ind_var	arg2,less_ii.global.1
    006440  0a   006453 100726 
                                  4584  
                                  4585  	if_eaq		q,arg2,less_ii.1
    006441  0a   006445 100633 
                                  4586  
                                  4587  	load		q,arg1
    006442  aa   000000 040656 
                                  4588  	compare		q,arg2
    006443  aa   000000 100751 
                                  4589  	return		tmi
    006444  aa   000001 006617 
                                  4590  
    006445                        4591  less_ii.1:
                                  4592  	compare		q,arg1
    006445  aa   000000 040751 
                                  4593  	return		tpnz
    006446  aa   000001 010217 
                                  4594  
    006447                        4595  less_ii.global:
                                  4596  	compare_index
    006447  aa   000043 000206 
                                  4597  	if_fb17		arg1,less_ii.global.fb17
    006450  0a   006452 040724 
                                  4598  	return		tnc
    006451  aa   000001 010617 
    006452                        4599  less_ii.global.fb17:
                                  4600  	return		tmi
    006452  aa   000001 006617 
                                  4601  
    006453                        4602  less_ii.global.1:
                                  4603  	swap		arg1
    006453  aa   000000 040202 
                                  4604  	compare_index
    006454  aa   000043 000206 
                                  4605  	if_fb17		arg1,less_ii.global.1.fb17
    006455  0a   006457 040724 
                                  4606  	return		j_g_s
    006456  aa   000001 012217 
    006457                        4607  less_ii.global.1.fb17:
                                  4608  	return		tpnz
    006457  aa   000001 010217 
                                  4609  
    006460                        4610  less_ir:
                                  4611  	swap		arg1
    006460  aa   000000 040202 
                                  4612  
                                  4613  	s_call		cv_load.ir
    006461  0a   002174 000223 
                                  4614  	compare		eaq,arg1
    006462  aa   000000 042351 
                                  4615  	return		tmi
    006463  aa   000001 006617 
                                  4616  
    006464                        4617  less_ri:
                                  4618  	s_call		cv_load.ir
    006464  0a   002174 000223 
                                  4619  	compare		eaq,arg1
    006465  aa   000000 042351 
                                  4620  	return		tpnz
    006466  aa   000001 010217 
                                  4621  
    006467                        4622  less_id:
                                  4623  	swap		arg1
    006467  aa   000000 040202 
                                  4624  
                                  4625  	s_call		cv_load.id
    006470  0a   002214 000223 
                                  4626  	compare		deaq,arg1
    006471  aa   000000 042751 
                                  4627  	return		tmi
    006472  aa   000001 006617 
                                  4628  
    006473                        4629  less_di:
                                  4630  	s_call		cv_load.id
    006473  0a   002214 000223 
                                  4631  	compare		deaq,arg1
    006474  aa   000000 042751 
                                  4632  	return		tpnz
    006475  aa   000001 010217 
                                  4633  
    006476                        4634  less_rr:
                                  4635  	if_eaq		eaq,arg2,less_rr.1
    006476  0a   006502 102233 
                                  4636  
                                  4637  	load		eaq,arg1
    006477  aa   000000 042256 
                                  4638  	compare		eaq,arg2
    006500  aa   000000 102351 
                                  4639  	return		tmi
    006501  aa   000001 006617 
                                  4640  
    006502                        4641  less_rr.1:
                                  4642  	compare		eaq,arg1
    006502  aa   000000 042351 
                                  4643  	return		tpnz
    006503  aa   000001 010217 
                                  4644  
    006504                        4645  less_dd:
                                  4646  	if_eaq		deaq,arg2,less_dd.1
    006504  0a   006510 102633 
                                  4647  
                                  4648  	load		deaq,arg1
    006505  aa   000000 042656 
                                  4649  	compare		deaq,arg2
    006506  aa   000000 102751 
                                  4650  	return		tmi
    006507  aa   000001 006617 
                                  4651  
    006510                        4652  less_dd.1:
                                  4653  	compare		deaq,arg1
    006510  aa   000000 042751 
                                  4654  	return		tpnz
    006511  aa   000001 010217 
                                  4655  
    006512                        4656  less_rd:
                                  4657  	if_eaq		deaq,arg2,less_rd.1
    006512  0a   006516 102633 
                                  4658  
                                  4659  	load		eaq,arg1
    006513  aa   000000 042256 
                                  4660  	compare		deaq,arg2
    006514  aa   000000 102751 
                                  4661  	return		tmi
    006515  aa   000001 006617 
                                  4662  
    006516                        4663  less_rd.1:
                                  4664  	compare		eaq,arg1
    006516  aa   000000 042351 
                                  4665  	return		tpnz
    006517  aa   000001 010217 
                                  4666  
    006520                        4667  less_dr:
                                  4668  	if_eaq		eaq,arg2,less_dr.1
    006520  0a   006524 102233 
                                  4669  
                                  4670  	load		deaq,arg1
    006521  aa   000000 042656 
                                  4671  	compare		eaq,arg2
    006522  aa   000000 102351 
                                  4672  	return		tmi
    006523  aa   000001 006617 
                                  4673  
    006524                        4674  less_dr.1:
                                  4675  	compare		deaq,arg1
    006524  aa   000000 042751 
                                  4676  	return		tpnz
    006525  aa   000001 010217 
                                  4677  
    006526                        4678  less_ic:
                                  4679  	error		323,arg2
    006526  aa   000503 000702 
    006527  aa   000000 100303 
                        000001 
                                  4680  
    006530                        4681  less_ci:
                                  4682  	error		323,arg1
    006530  aa   000503 000702 
    006531  aa   000000 040303 
                        000001 
                                  4683  
    006532                        4684  less_rc:
                                  4685  	error		323,arg2
    006532  aa   000503 000702 
    006533  aa   000000 100303 
                        000001 
                                  4686  
    006534                        4687  less_cr:
                                  4688  	error		323,arg1
    006534  aa   000503 000702 
    006535  aa   000000 040303 
                        000001 
                                  4689  
    006536                        4690  less_dc:
                                  4691  	error		312,arg1,arg2
    006536  aa   000470 001302 
    006537  aa   000000 040303 
    006540  aa   000000 100303 
                        000002 
                                  4692  
    006541                        4693  less_cd:
                                  4694  	error		311,arg1,arg2
    006541  aa   000467 001302 
    006542  aa   000000 040303 
    006543  aa   000000 100303 
                        000002 
                                  4695  
    006544                        4696  less_cc:
                                  4697  	error		328,arg1,arg2
    006544  aa   000510 001302 
    006545  aa   000000 040303 
    006546  aa   000000 100303 
                        000002 
                                  4698  
    006547                        4699  less_e2:
                                  4700  	if_dt		logical,logical_op1
    006547  0a   006405 020225 
                                  4701  	dt_jump1		arg1,(less_ih,less_rh,less_dh,less_ch,logical_op2,less_hh,less_th)
    006550  aa   000007 040374 
    006551  00   006555 006555 
    006552  00   006564 006564 
    006553  00   006407 006573 
    006554  0a   006555 000000 
                        000007 
                                  4702  
    006555                        4703  less_ih:
    006555                        4704  less_rh:
    006555                        4705  less_th:
                                  4706  	unless_optype	constant,invalid_opnd
    006555  0a   006415 200230 
                                  4707  
                                  4708  	swap		arg1
    006556  aa   000000 040202 
                                  4709  	unless_optype	(variable,array_ref,temp),not_scalar
    006557  0a   006417 540230 
                                  4710  
                                  4711  	pad_char_const_to_word	arg1	" the two operands remain swapped
    006560  aa   000000 040375 
                                  4712  
                                  4713  	load		a,arg2
    006561  aa   000000 101256 
    006562  aa   040000 1150 00   4714  	cmpa		arg1
                                  4715  	return		tnc
    006563  aa   000001 010617 
                                  4716  
    006564                        4717  less_dh:
    006564                        4718  less_ch:
                                  4719  	unless_optype	constant,invalid_opnd
    006564  0a   006415 200230 
                                  4720  
                                  4721  	swap		arg1
    006565  aa   000000 040202 
                                  4722  	unless_optype	(variable,array_ref,temp),not_scalar
    006566  0a   006417 540230 
                                  4723  
                                  4724  	pad_char_const_to_dw	arg1	" the two operands remain swapped
    006567  aa   000000 040376 
                                  4725  
                                  4726  	load		aq,arg2
    006570  aa   000000 101656 
    006571  aa   040000 1170 00   4727  	cmpaq		arg1
                                  4728  	return		tnc
    006572  aa   000001 010617 
                                  4729  
    006573                        4730  less_hh:
                                  4731  	use_eaq
    006573  aa   000000 000255 
                                  4732  
                                  4733  	emit_eis
    006574  aa   000000 000207 
    006575  aa  0 40100 1065 00   4734  	cmpc		(pr),(pr),fill(040)
    006576  aa   040000 000000    4735  	desc9a		arg1
    006577  aa   100000 000000    4736  	desc9a		arg2
                                  4737  
                                  4738  	return		tnc
    006600  aa   000001 010617 
                                  4739  
    006601                        4740  less_e1:
                                  4741  	unless_optype	(variable,array_ref,temp),not_scalar
    006601  0a   006417 540230 
                                  4742  
                                  4743  	swap		arg1
    006602  aa   000000 040202 
                                  4744  	unless_optype	constant,invalid_opnd
    006603  0a   006415 200230 
                                  4745  "				Operands remain swapped.
                                  4746  	dt_jump1		arg2,(less_hi,less_hr,less_hd,less_hc,logical_op1,less_hh,less_ht)
    006604  aa   000007 100374 
    006605  00   006611 006611 
    006606  00   006615 006615 
    006607  00   006405 006573 
    006610  0a   006611 000000 
                        000007 
                                  4747  
    006611                        4748  less_hi:
    006611                        4749  less_hr:
    006611                        4750  less_ht:
                                  4751  	pad_char_const_to_word	arg2
    006611  aa   000000 100375 
                                  4752  
                                  4753  	load		a,arg2
    006612  aa   000000 101256 
    006613  aa   040000 1150 00   4754  	cmpa		arg1
                                  4755  	return		tnc
    006614  aa   000001 010617 
                                  4756  
    006615                        4757  less_hd:
    006615                        4758  less_hc:
                                  4759  	pad_char_const_to_dw	arg2
    006615  aa   000000 100376 
                                  4760  
                                  4761  	load		aq,arg2
    006616  aa   000000 101656 
    006617  aa   040000 1170 00   4762  	cmpaq		arg1
                                  4763  	return		tnc
    006620  aa   000001 010617 
                                  4764  
    006621                        4765  less_tl:
                                  4766  	unless_dt		(int,typeless),typeless_op1
    006621  0a   006411 404226 
                                  4767  	dt_jump1		op2,(less_tl.1,typeless_op2,typeless_op2,typeless_op2,typeless_op2,typeless_op2,less_tl.1)
    006622  aa   000007 700374 
    006623  00   006627 006413 
    006624  00   006413 006413 
    006625  00   006413 006413 
    006626  0a   006627 000000 
                        000007 
                                  4768  
    006627                        4769  less_tl.1:
                                  4770  	if_eaq		tq,arg2,less_tl.2
    006627  0a   006633 104633 
                                  4771  
                                  4772  	load		tq,arg1
    006630  aa   000000 044656 
                                  4773  	compare		tq,arg2
    006631  aa   000000 104751 
                                  4774  	return		tmi
    006632  aa   000001 006617 
                                  4775  
    006633                        4776  less_tl.2:
                                  4777  	compare		tq,arg1
    006633  aa   000000 044751 
                                  4778  	return		tpnz
    006634  aa   000001 010217 
                                  4779  
                                  4780  
    006635                        4781  less_or_equal:
                                  4782  	func		2
    006635  aa   000000 001215 
                                  4783  
                                  4784  	refresh_regs_if_next_is_jump
    006636  aa   000050 000206 
                                  4785  
                                  4786  	dt_jump		(less_or_equal_ii,less_or_equal_ri,less_or_equal_di,less_or_equal_ci,less_or_equal_ir,less_or_equal_rr,less_or_equal_dr,less_or_equal_cr,less_or_equal_id,less_or_equal_rd,less_or_equal_dd,less_or_equal_cd,less_or_equal_ic,less_or_equal_rc,less_or_equal_dc,less_or_equal_cc,less_or_equal_e2,less_or_equal_e1,less_or_equal_tl,less_or_equal_tl)
    006637  aa   000024 000235 
    006640  00   006652 006700 
    006641  00   006707 006744 
    006642  00   006674 006712 
    006643  00   006734 006750 
    006644  00   006703 006726 
    006645  00   006720 006755 
    006646  00   006742 006746 
    006647  00   006752 006760 
    006650  00   006763 007015 
    006651  00   007035 007035 
                        000024 
                                  4787  
    006652                        4788  less_or_equal_ii:
                                  4789  	note_eligible_ind_var_use
    006652  aa   000051 000206 
                                  4790  	if_global_ind_var	arg1,less_or_equal_ii.global
    006653  0a   006663 040726 
                                  4791  	if_global_ind_var	arg2,less_or_equal_ii.global.1
    006654  0a   006667 100726 
                                  4792  
                                  4793  	if_eaq		q,arg2,less_or_equal_ii.1
    006655  0a   006661 100633 
                                  4794  
                                  4795  	load		q,arg1
    006656  aa   000000 040656 
                                  4796  	compare		q,arg2
    006657  aa   000000 100751 
                                  4797  	return		tmoz
    006660  aa   000001 007617 
                                  4798  
    006661                        4799  less_or_equal_ii.1:
                                  4800  	compare		q,arg1
    006661  aa   000000 040751 
                                  4801  	return		tpl
    006662  aa   000001 007217 
                                  4802  
    006663                        4803  less_or_equal_ii.global:
                                  4804  	compare_index
    006663  aa   000043 000206 
                                  4805  	if_fb17		arg1,less_or_equal_ii.global.fb17
    006664  0a   006666 040724 
                                  4806  	return		j_le_s
    006665  aa   000001 011617 
    006666                        4807  less_or_equal_ii.global.fb17:
                                  4808  	return		tmoz
    006666  aa   000001 007617 
                                  4809  
    006667                        4810  less_or_equal_ii.global.1:
                                  4811  	swap		arg1
    006667  aa   000000 040202 
                                  4812  	compare_index
    006670  aa   000043 000206 
                                  4813  	if_fb17		arg1,less_or_equal_ii.global.1.fb17
    006671  0a   006673 040724 
                                  4814  	return		trc
    006672  aa   000001 011217 
    006673                        4815  less_or_equal_ii.global.1.fb17:
                                  4816  	return		tpl
    006673  aa   000001 007217 
                                  4817  
    006674                        4818  less_or_equal_ir:
                                  4819  	swap		arg1
    006674  aa   000000 040202 
                                  4820  
                                  4821  	s_call		cv_load.ir
    006675  0a   002174 000223 
                                  4822  	compare		eaq,arg1
    006676  aa   000000 042351 
                                  4823  	return		tmoz
    006677  aa   000001 007617 
                                  4824  
    006700                        4825  less_or_equal_ri:
                                  4826  	s_call		cv_load.ir
    006700  0a   002174 000223 
                                  4827  	compare		eaq,arg1
    006701  aa   000000 042351 
                                  4828  	return		tpl
    006702  aa   000001 007217 
                                  4829  
    006703                        4830  less_or_equal_id:
                                  4831  	swap		arg1
    006703  aa   000000 040202 
                                  4832  
                                  4833  	s_call		cv_load.id
    006704  0a   002214 000223 
                                  4834  	compare		deaq,arg1
    006705  aa   000000 042751 
                                  4835  	return		tmoz
    006706  aa   000001 007617 
                                  4836  
    006707                        4837  less_or_equal_di:
                                  4838  	s_call		cv_load.id
    006707  0a   002214 000223 
                                  4839  	compare		deaq,arg1
    006710  aa   000000 042751 
                                  4840  	return		tpl
    006711  aa   000001 007217 
                                  4841  
    006712                        4842  less_or_equal_rr:
                                  4843  	if_eaq		eaq,arg2,less_or_equal_rr.1
    006712  0a   006716 102233 
                                  4844  
                                  4845  	load		eaq,arg1
    006713  aa   000000 042256 
                                  4846  	compare		eaq,arg2
    006714  aa   000000 102351 
                                  4847  	return		tmoz
    006715  aa   000001 007617 
                                  4848  
    006716                        4849  less_or_equal_rr.1:
                                  4850  	compare		eaq,arg1
    006716  aa   000000 042351 
                                  4851  	return		tpl
    006717  aa   000001 007217 
                                  4852  
    006720                        4853  less_or_equal_dd:
                                  4854  	if_eaq		deaq,arg2,less_or_equal_dd.1
    006720  0a   006724 102633 
                                  4855  
                                  4856  	load		deaq,arg1
    006721  aa   000000 042656 
                                  4857  	compare		deaq,arg2
    006722  aa   000000 102751 
                                  4858  	return		tmoz
    006723  aa   000001 007617 
                                  4859  
    006724                        4860  less_or_equal_dd.1:
                                  4861  	compare		deaq,arg1
    006724  aa   000000 042751 
                                  4862  	return		tpl
    006725  aa   000001 007217 
                                  4863  
    006726                        4864  less_or_equal_rd:
                                  4865  	if_eaq		deaq,arg2,less_or_equal_rd.1
    006726  0a   006732 102633 
                                  4866  
                                  4867  	load		eaq,arg1
    006727  aa   000000 042256 
                                  4868  	compare		deaq,arg2
    006730  aa   000000 102751 
                                  4869  	return		tmoz
    006731  aa   000001 007617 
                                  4870  
    006732                        4871  less_or_equal_rd.1:
                                  4872  	compare		eaq,arg1
    006732  aa   000000 042351 
                                  4873  	return		tpl
    006733  aa   000001 007217 
                                  4874  
    006734                        4875  less_or_equal_dr:
                                  4876  	if_eaq		eaq,arg2,less_or_equal_dr.1
    006734  0a   006740 102233 
                                  4877  
                                  4878  	load		deaq,arg1
    006735  aa   000000 042656 
                                  4879  	compare		eaq,arg2
    006736  aa   000000 102351 
                                  4880  	return		tmoz
    006737  aa   000001 007617 
                                  4881  
    006740                        4882  less_or_equal_dr.1:
                                  4883  	compare		deaq,arg1
    006740  aa   000000 042751 
                                  4884  	return		tpl
    006741  aa   000001 007217 
                                  4885  
    006742                        4886  less_or_equal_ic:
                                  4887  	error		323,arg2
    006742  aa   000503 000702 
    006743  aa   000000 100303 
                        000001 
                                  4888  
    006744                        4889  less_or_equal_ci:
                                  4890  	error		323,arg1
    006744  aa   000503 000702 
    006745  aa   000000 040303 
                        000001 
                                  4891  
    006746                        4892  less_or_equal_rc:
                                  4893  	error		323,arg2
    006746  aa   000503 000702 
    006747  aa   000000 100303 
                        000001 
                                  4894  
    006750                        4895  less_or_equal_cr:
                                  4896  	error		323,arg1
    006750  aa   000503 000702 
    006751  aa   000000 040303 
                        000001 
                                  4897  
    006752                        4898  less_or_equal_dc:
                                  4899  	error		312,arg1,arg2
    006752  aa   000470 001302 
    006753  aa   000000 040303 
    006754  aa   000000 100303 
                        000002 
                                  4900  
    006755                        4901  less_or_equal_cd:
                                  4902  	error		311,arg1,arg2
    006755  aa   000467 001302 
    006756  aa   000000 040303 
    006757  aa   000000 100303 
                        000002 
                                  4903  
    006760                        4904  less_or_equal_cc:
                                  4905  	error		328,arg1,arg2
    006760  aa   000510 001302 
    006761  aa   000000 040303 
    006762  aa   000000 100303 
                        000002 
                                  4906  
    006763                        4907  less_or_equal_e2:
                                  4908  	if_dt		logical,logical_op1
    006763  0a   006405 020225 
                                  4909  	dt_jump1		arg1,(less_or_equal_ih,less_or_equal_rh,less_or_equal_dh,less_or_equal_ch,logical_op2,less_or_equal_hh,less_or_equal_th)
    006764  aa   000007 040374 
    006765  00   006771 006771 
    006766  00   007000 007000 
    006767  00   006407 007007 
    006770  0a   006771 000000 
                        000007 
                                  4910  
    006771                        4911  less_or_equal_ih:
    006771                        4912  less_or_equal_rh:
    006771                        4913  less_or_equal_th:
                                  4914  	unless_optype	constant,invalid_opnd
    006771  0a   006415 200230 
                                  4915  
                                  4916  	swap		arg1
    006772  aa   000000 040202 
                                  4917  	unless_optype	(variable,array_ref,temp),not_scalar
    006773  0a   006417 540230 
                                  4918  
                                  4919  	pad_char_const_to_word	arg1	" the two operands remain swapped
    006774  aa   000000 040375 
                                  4920  
                                  4921  	load		a,arg1
    006775  aa   000000 041256 
    006776  aa   100000 1150 00   4922  	cmpa		arg2
                                  4923  	return		trc
    006777  aa   000001 011217 
                                  4924  
    007000                        4925  less_or_equal_dh:
    007000                        4926  less_or_equal_ch:
                                  4927  	unless_optype	constant,invalid_opnd
    007000  0a   006415 200230 
                                  4928  
                                  4929  	swap		arg1
    007001  aa   000000 040202 
                                  4930  	unless_optype	(variable,array_ref,temp),not_scalar
    007002  0a   006417 540230 
                                  4931  
                                  4932  	pad_char_const_to_dw	arg1	" the two operands remain swapped
    007003  aa   000000 040376 
                                  4933  
                                  4934  	load		aq,arg1
    007004  aa   000000 041656 
    007005  aa   100000 1170 00   4935  	cmpaq		arg2
                                  4936  	return		trc
    007006  aa   000001 011217 
                                  4937  
    007007                        4938  less_or_equal_hh:
                                  4939  	use_eaq
    007007  aa   000000 000255 
                                  4940  
                                  4941  	emit_eis
    007010  aa   000000 000207 
    007011  aa  0 40100 1065 00   4942  	cmpc		(pr),(pr),fill(040)
    007012  aa   100000 000000    4943  	desc9a		arg2
    007013  aa   040000 000000    4944  	desc9a		arg1
                                  4945  
                                  4946  	return		trc
    007014  aa   000001 011217 
                                  4947  
    007015                        4948  less_or_equal_e1:
                                  4949  	unless_optype	(variable,array_ref,temp),not_scalar
    007015  0a   006417 540230 
                                  4950  
                                  4951  	swap		arg1
    007016  aa   000000 040202 
                                  4952  	unless_optype	constant,invalid_opnd
    007017  0a   006415 200230 
                                  4953  "				Operands remain swapped.
                                  4954  	dt_jump1		arg2,(less_or_equal_hi,less_or_equal_hr,less_or_equal_hd,less_or_equal_hc,logical_op1,less_or_equal_hh,less_or_equal_ht)
    007020  aa   000007 100374 
    007021  00   007025 007025 
    007022  00   007031 007031 
    007023  00   006405 007007 
    007024  0a   007025 000000 
                        000007 
                                  4955  
    007025                        4956  less_or_equal_hi:
    007025                        4957  less_or_equal_hr:
    007025                        4958  less_or_equal_ht:
                                  4959  	pad_char_const_to_word	arg2
    007025  aa   000000 100375 
                                  4960  
                                  4961  	load		a,arg1
    007026  aa   000000 041256 
    007027  aa   100000 1150 00   4962  	cmpa		arg2
                                  4963  	return		trc
    007030  aa   000001 011217 
                                  4964  
    007031                        4965  less_or_equal_hd:
    007031                        4966  less_or_equal_hc:
                                  4967  	pad_char_const_to_dw	arg2
    007031  aa   000000 100376 
                                  4968  
                                  4969  	load		aq,arg1
    007032  aa   000000 041656 
    007033  aa   100000 1170 00   4970  	cmpaq		arg2
                                  4971  	return		trc
    007034  aa   000001 011217 
                                  4972  
    007035                        4973  less_or_equal_tl:
                                  4974  	unless_dt		(int,typeless),typeless_op1
    007035  0a   006411 404226 
                                  4975  	dt_jump1		op2,(less_or_equal_tl.1,typeless_op2,typeless_op2,typeless_op2,typeless_op2,typeless_op2,less_or_equal_tl.1)
    007036  aa   000007 700374 
    007037  00   007043 006413 
    007040  00   006413 006413 
    007041  00   006413 006413 
    007042  0a   007043 000000 
                        000007 
                                  4976  
    007043                        4977  less_or_equal_tl.1:
                                  4978  	if_eaq		tq,arg2,less_or_equal_tl.2
    007043  0a   007047 104633 
                                  4979  
                                  4980  	load		tq,arg1
    007044  aa   000000 044656 
                                  4981  	compare		tq,arg2
    007045  aa   000000 104751 
                                  4982  	return		tmoz
    007046  aa   000001 007617 
                                  4983  
    007047                        4984  less_or_equal_tl.2:
                                  4985  	compare		tq,arg1
    007047  aa   000000 044751 
                                  4986  	return		tpl
    007050  aa   000001 007217 
                                  4987  
                                  4988  equal:	func		2
    007051  aa   000000 001215 
                                  4989  
                                  4990  	refresh_regs_if_next_is_jump
    007052  aa   000050 000206 
                                  4991  
                                  4992  	dt_jump		(equal_ii,equal_ri,equal_di,equal_ci,equal_ir,equal_rr,equal_dr,equal_cr,equal_id,equal_rd,equal_dd,equal_cd,equal_ic,equal_rc,equal_dc,equal_cc,equal_e2,equal_e1,equal_tl,equal_tl)
    007053  aa   000024 000235 
    007054  00   007066 007100 
    007055  00   007104 007126 
    007056  00   007077 007107 
    007057  00   007116 007132 
    007060  00   007103 007115 
    007061  00   007112 007137 
    007062  00   007124 007130 
    007063  00   007134 007142 
    007064  00   007145 007206 
    007065  00   007226 007226 
                        000024 
                                  4993  
    007066                        4994  equal_ii:
                                  4995  	note_eligible_ind_var_use
    007066  aa   000051 000206 
                                  4996  	if_global_ind_var	arg1,equal_ii.global
    007067  0a   007075 040726 
                                  4997  	if_global_ind_var	arg2,equal_ii.global.1
    007070  0a   007074 100726 
                                  4998  
                                  4999  	load_top		q
    007071  aa   000000 000657 
                                  5000  	compare		q,arg1
    007072  aa   000000 040751 
                                  5001  	return		tze
    007073  aa   000001 005617 
                                  5002  
    007074                        5003  equal_ii.global.1:
                                  5004  	swap		arg1
    007074  aa   000000 040202 
                                  5005  
    007075                        5006  equal_ii.global:
                                  5007  	compare_index
    007075  aa   000043 000206 
                                  5008  	return		tze
    007076  aa   000001 005617 
                                  5009  
    007077                        5010  equal_ir:
                                  5011  	swap		arg1
    007077  aa   000000 040202 
                                  5012  
    007100                        5013  equal_ri:
                                  5014  	s_call		cv_load.ir
    007100  0a   002174 000223 
                                  5015  	compare		eaq,arg1
    007101  aa   000000 042351 
                                  5016  	return		tze
    007102  aa   000001 005617 
                                  5017  
    007103                        5018  equal_id:
                                  5019  	swap		arg1
    007103  aa   000000 040202 
                                  5020  
    007104                        5021  equal_di:
                                  5022  	s_call		cv_load.id
    007104  0a   002214 000223 
                                  5023  	compare		deaq,arg1
    007105  aa   000000 042751 
                                  5024  	return		tze
    007106  aa   000001 005617 
                                  5025  
    007107                        5026  equal_rr:
                                  5027  	load_top		eaq
    007107  aa   000000 002257 
                                  5028  	compare		eaq,arg1
    007110  aa   000000 042351 
                                  5029  	return		tze
    007111  aa   000001 005617 
                                  5030  
    007112                        5031  equal_dd:
                                  5032  	load_top		deaq
    007112  aa   000000 002657 
                                  5033  	compare		deaq,arg1
    007113  aa   000000 042751 
                                  5034  	return		tze
    007114  aa   000001 005617 
                                  5035  
    007115                        5036  equal_rd:
                                  5037  	swap		arg1
    007115  aa   000000 040202 
                                  5038  
    007116                        5039  equal_dr:
                                  5040  	if_eaq		eaq,arg2,equal_dr.1
    007116  0a   007122 102233 
                                  5041  
                                  5042  	load		deaq,arg1
    007117  aa   000000 042656 
                                  5043  	compare		eaq,arg2
    007120  aa   000000 102351 
                                  5044  	return		tze
    007121  aa   000001 005617 
                                  5045  
    007122                        5046  equal_dr.1:
                                  5047  	compare		deaq,arg1
    007122  aa   000000 042751 
                                  5048  	return		tze
    007123  aa   000001 005617 
                                  5049  
    007124                        5050  equal_ic:
                                  5051  	error		323,arg2
    007124  aa   000503 000702 
    007125  aa   000000 100303 
                        000001 
                                  5052  
    007126                        5053  equal_ci:
                                  5054  	error		323,arg1
    007126  aa   000503 000702 
    007127  aa   000000 040303 
                        000001 
                                  5055  
    007130                        5056  equal_rc:
                                  5057  	error		323,arg2
    007130  aa   000503 000702 
    007131  aa   000000 100303 
                        000001 
                                  5058  
    007132                        5059  equal_cr:
                                  5060  	error		323,arg1
    007132  aa   000503 000702 
    007133  aa   000000 040303 
                        000001 
                                  5061  
    007134                        5062  equal_dc:
                                  5063  	error		312,arg1,arg2
    007134  aa   000470 001302 
    007135  aa   000000 040303 
    007136  aa   000000 100303 
                        000002 
                                  5064  
    007137                        5065  equal_cd:
                                  5066  	error		311,arg1,arg2
    007137  aa   000467 001302 
    007140  aa   000000 040303 
    007141  aa   000000 100303 
                        000002 
                                  5067  
    007142                        5068  equal_cc:
                                  5069  	load_top		aq
    007142  aa   000000 001657 
    007143  aa   040000 1170 00   5070  	cmpaq		arg1
                                  5071  	return		tze
    007144  aa   000001 005617 
                                  5072  
    007145                        5073  equal_e2:
                                  5074  	if_dt		char,equal_ah
    007145  0a   007155 010225 
                                  5075  	swap		arg1	" top is logical, so swap and test
    007146  aa   000000 040202 
                                  5076  
                                  5077  	if_dt		logical,equal_ll
    007147  0a   007152 020225 
                                  5078  	error		313,op1
    007150  aa   000471 000702 
    007151  aa   000000 740303 
                        000001 
                                  5079  
    007152                        5080  equal_ll:
                                  5081  	load_top		a
    007152  aa   000000 001257 
                                  5082  	compare		a,arg1
    007153  aa   000000 041351 
                                  5083  	return		tze
    007154  aa   000001 005617 
                                  5084  
    007155                        5085  equal_ah:
                                  5086  	dt_jump1		arg1,(equal_ih,equal_rh,equal_dh,equal_ch,logical_op2,equal_hh,equal_th)
    007155  aa   000007 040374 
    007156  00   007162 007162 
    007157  00   007171 007171 
    007160  00   006407 007200 
    007161  0a   007162 000000 
                        000007 
                                  5087  
    007162                        5088  equal_ih:
    007162                        5089  equal_rh:
    007162                        5090  equal_th:
                                  5091  	unless_optype	constant,invalid_opnd
    007162  0a   006415 200230 
                                  5092  
                                  5093  	swap		arg1
    007163  aa   000000 040202 
                                  5094  	unless_optype	(variable,array_ref,temp),not_scalar
    007164  0a   006417 540230 
                                  5095  
                                  5096  	pad_char_const_to_word	arg1	" the two operands remain swapped
    007165  aa   000000 040375 
                                  5097  
                                  5098  	load_top		a
    007166  aa   000000 001257 
    007167  aa   040000 1150 00   5099  	cmpa		arg1
                                  5100  	return		tze
    007170  aa   000001 005617 
                                  5101  
    007171                        5102  equal_dh:
    007171                        5103  equal_ch:
                                  5104  	unless_optype	constant,invalid_opnd
    007171  0a   006415 200230 
                                  5105  
                                  5106  	swap		arg1
    007172  aa   000000 040202 
                                  5107  	unless_optype	(variable,array_ref,temp),not_scalar
    007173  0a   006417 540230 
                                  5108  
                                  5109  	pad_char_const_to_dw	arg1	" the two operands remain swapped
    007174  aa   000000 040376 
                                  5110  
                                  5111  	load_top		aq
    007175  aa   000000 001657 
    007176  aa   040000 1170 00   5112  	cmpaq		arg1
                                  5113  	return		tze
    007177  aa   000001 005617 
                                  5114  
    007200                        5115  equal_hh:
                                  5116  	use_eaq
    007200  aa   000000 000255 
                                  5117  
                                  5118  	emit_eis
    007201  aa   000000 000207 
    007202  aa  0 40100 1065 00   5119  	cmpc		(pr),(pr),fill(040)
    007203  aa   040000 000000    5120  	desc9a		arg1
    007204  aa   100000 000000    5121  	desc9a		arg2
                                  5122  
                                  5123  	return		tze
    007205  aa   000001 005617 
                                  5124  
    007206                        5125  equal_e1:
                                  5126  	unless_optype	(variable,array_ref,temp),not_scalar
    007206  0a   006417 540230 
                                  5127  
                                  5128  	swap		arg1
    007207  aa   000000 040202 
                                  5129  	unless_optype	constant,invalid_opnd
    007210  0a   006415 200230 
                                  5130  "				Operands remain swapped.
                                  5131  	dt_jump1		arg2,(equal_hi,equal_hr,equal_hd,equal_hc,logical_op1,equal_hh,equal_ht)
    007211  aa   000007 100374 
    007212  00   007216 007216 
    007213  00   007222 007222 
    007214  00   006405 007200 
    007215  0a   007216 000000 
                        000007 
                                  5132  
    007216                        5133  equal_hi:
    007216                        5134  equal_hr:
    007216                        5135  equal_ht:
                                  5136  	pad_char_const_to_word	arg2
    007216  aa   000000 100375 
                                  5137  
                                  5138  	load_top		a
    007217  aa   000000 001257 
    007220  aa   040000 1150 00   5139  	cmpa		arg1
                                  5140  	return		tze
    007221  aa   000001 005617 
                                  5141  
    007222                        5142  equal_hd:
    007222                        5143  equal_hc:
                                  5144  	pad_char_const_to_dw	arg2
    007222  aa   000000 100376 
                                  5145  
                                  5146  	load_top		aq
    007223  aa   000000 001657 
    007224  aa   040000 1170 00   5147  	cmpaq		arg1
                                  5148  	return		tze
    007225  aa   000001 005617 
                                  5149  
    007226                        5150  equal_tl:
                                  5151  	unless_dt		(int,typeless),typeless_op1
    007226  0a   006411 404226 
                                  5152  	dt_jump1		op2,(equal_tl.1,typeless_op2,typeless_op2,typeless_op2,typeless_op2,typeless_op2,equal_tl.1)
    007227  aa   000007 700374 
    007230  00   007234 006413 
    007231  00   006413 006413 
    007232  00   006413 006413 
    007233  0a   007234 000000 
                        000007 
                                  5153  
    007234                        5154  equal_tl.1:
                                  5155  	load_top		tq
    007234  aa   000000 004657 
                                  5156  	compare		tq,arg1
    007235  aa   000000 044751 
                                  5157  	return		tze
    007236  aa   000001 005617 
                                  5158  
    007237                        5159  not_equal:
                                  5160  	func		2
    007237  aa   000000 001215 
                                  5161  
                                  5162  	refresh_regs_if_next_is_jump
    007240  aa   000050 000206 
                                  5163  
                                  5164  	dt_jump		(not_equal_ii,not_equal_ri,not_equal_di,not_equal_ci,not_equal_ir,not_equal_rr,not_equal_dr,not_equal_cr,not_equal_id,not_equal_rd,not_equal_dd,not_equal_cd,not_equal_ic,not_equal_rc,not_equal_dc,not_equal_cc,not_equal_e2,not_equal_e1,not_equal_tl,not_equal_tl)
    007241  aa   000024 000235 
    007242  00   007254 007266 
    007243  00   007272 007314 
    007244  00   007265 007275 
    007245  00   007304 007320 
    007246  00   007271 007303 
    007247  00   007300 007325 
    007250  00   007312 007316 
    007251  00   007322 007330 
    007252  00   007333 007374 
    007253  00   007414 007414 
                        000024 
                                  5165  
    007254                        5166  not_equal_ii:
                                  5167  	note_eligible_ind_var_use
    007254  aa   000051 000206 
                                  5168  	if_global_ind_var	arg1,not_equal_ii.global
    007255  0a   007263 040726 
                                  5169  	if_global_ind_var	arg2,not_equal_ii.global.1
    007256  0a   007262 100726 
                                  5170  
                                  5171  	load_top		q
    007257  aa   000000 000657 
                                  5172  	compare		q,arg1
    007260  aa   000000 040751 
                                  5173  	return		tnz
    007261  aa   000001 006217 
                                  5174  
    007262                        5175  not_equal_ii.global.1:
                                  5176  	swap		arg1
    007262  aa   000000 040202 
                                  5177  
    007263                        5178  not_equal_ii.global:
                                  5179  	compare_index
    007263  aa   000043 000206 
                                  5180  	return		tnz
    007264  aa   000001 006217 
                                  5181  
    007265                        5182  not_equal_ir:
                                  5183  	swap		arg1
    007265  aa   000000 040202 
                                  5184  
    007266                        5185  not_equal_ri:
                                  5186  	s_call		cv_load.ir
    007266  0a   002174 000223 
                                  5187  	compare		eaq,arg1
    007267  aa   000000 042351 
                                  5188  	return		tnz
    007270  aa   000001 006217 
                                  5189  
    007271                        5190  not_equal_id:
                                  5191  	swap		arg1
    007271  aa   000000 040202 
                                  5192  
    007272                        5193  not_equal_di:
                                  5194  	s_call		cv_load.id
    007272  0a   002214 000223 
                                  5195  	compare		deaq,arg1
    007273  aa   000000 042751 
                                  5196  	return		tnz
    007274  aa   000001 006217 
                                  5197  
    007275                        5198  not_equal_rr:
                                  5199  	load_top		eaq
    007275  aa   000000 002257 
                                  5200  	compare		eaq,arg1
    007276  aa   000000 042351 
                                  5201  	return		tnz
    007277  aa   000001 006217 
                                  5202  
    007300                        5203  not_equal_dd:
                                  5204  	load_top		deaq
    007300  aa   000000 002657 
                                  5205  	compare		deaq,arg1
    007301  aa   000000 042751 
                                  5206  	return		tnz
    007302  aa   000001 006217 
                                  5207  
    007303                        5208  not_equal_rd:
                                  5209  	swap		arg1
    007303  aa   000000 040202 
                                  5210  
    007304                        5211  not_equal_dr:
                                  5212  	if_eaq		eaq,arg2,not_equal_dr.1
    007304  0a   007310 102233 
                                  5213  
                                  5214  	load		deaq,arg1
    007305  aa   000000 042656 
                                  5215  	compare		eaq,arg2
    007306  aa   000000 102351 
                                  5216  	return		tnz
    007307  aa   000001 006217 
                                  5217  
    007310                        5218  not_equal_dr.1:
                                  5219  	compare		deaq,arg1
    007310  aa   000000 042751 
                                  5220  	return		tnz
    007311  aa   000001 006217 
                                  5221  
    007312                        5222  not_equal_ic:
                                  5223  	error		323,arg2
    007312  aa   000503 000702 
    007313  aa   000000 100303 
                        000001 
                                  5224  
    007314                        5225  not_equal_ci:
                                  5226  	error		323,arg1
    007314  aa   000503 000702 
    007315  aa   000000 040303 
                        000001 
                                  5227  
    007316                        5228  not_equal_rc:
                                  5229  	error		323,arg2
    007316  aa   000503 000702 
    007317  aa   000000 100303 
                        000001 
                                  5230  
    007320                        5231  not_equal_cr:
                                  5232  	error		323,arg1
    007320  aa   000503 000702 
    007321  aa   000000 040303 
                        000001 
                                  5233  
    007322                        5234  not_equal_dc:
                                  5235  	error		312,arg1,arg2
    007322  aa   000470 001302 
    007323  aa   000000 040303 
    007324  aa   000000 100303 
                        000002 
                                  5236  
    007325                        5237  not_equal_cd:
                                  5238  	error		311,arg1,arg2
    007325  aa   000467 001302 
    007326  aa   000000 040303 
    007327  aa   000000 100303 
                        000002 
                                  5239  
    007330                        5240  not_equal_cc:
                                  5241  	load_top		aq
    007330  aa   000000 001657 
    007331  aa   040000 1170 00   5242  	cmpaq		arg1
                                  5243  	return		tnz
    007332  aa   000001 006217 
                                  5244  
    007333                        5245  not_equal_e2:
                                  5246  	if_dt		char,not_equal_ah
    007333  0a   007343 010225 
                                  5247  	swap		arg1	" top is logical, so swap and test other
    007334  aa   000000 040202 
                                  5248  
                                  5249  	if_dt		logical,not_equal_ll
    007335  0a   007340 020225 
                                  5250  	error		313,op1
    007336  aa   000471 000702 
    007337  aa   000000 740303 
                        000001 
                                  5251  
    007340                        5252  not_equal_ll:
                                  5253  	load_top		a
    007340  aa   000000 001257 
                                  5254  	compare		a,arg1
    007341  aa   000000 041351 
                                  5255  	return		tnz
    007342  aa   000001 006217 
                                  5256  
    007343                        5257  not_equal_ah:
                                  5258  	dt_jump1		arg1,(not_equal_ih,not_equal_rh,not_equal_dh,not_equal_ch,logical_op2,not_equal_hh,not_equal_th)
    007343  aa   000007 040374 
    007344  00   007350 007350 
    007345  00   007357 007357 
    007346  00   006407 007366 
    007347  0a   007350 000000 
                        000007 
                                  5259  
    007350                        5260  not_equal_ih:
    007350                        5261  not_equal_rh:
    007350                        5262  not_equal_th:
                                  5263  	unless_optype	constant,invalid_opnd
    007350  0a   006415 200230 
                                  5264  
                                  5265  	swap		arg1
    007351  aa   000000 040202 
                                  5266  	unless_optype	(variable,array_ref,temp),not_scalar
    007352  0a   006417 540230 
                                  5267  
                                  5268  	pad_char_const_to_word	arg1	" the two operands remain swapped
    007353  aa   000000 040375 
                                  5269  
                                  5270  	load_top		a
    007354  aa   000000 001257 
    007355  aa   040000 1150 00   5271  	cmpa		arg1
                                  5272  	return		tnz
    007356  aa   000001 006217 
                                  5273  
    007357                        5274  not_equal_dh:
    007357                        5275  not_equal_ch:
                                  5276  	unless_optype	constant,invalid_opnd
    007357  0a   006415 200230 
                                  5277  
                                  5278  	swap		arg1
    007360  aa   000000 040202 
                                  5279  	unless_optype	(variable,array_ref,temp),not_scalar
    007361  0a   006417 540230 
                                  5280  
                                  5281  	pad_char_const_to_dw	arg1	" the two operands remain swapped
    007362  aa   000000 040376 
                                  5282  
                                  5283  	load_top		aq
    007363  aa   000000 001657 
    007364  aa   040000 1170 00   5284  	cmpaq		arg1
                                  5285  	return		tnz
    007365  aa   000001 006217 
                                  5286  
    007366                        5287  not_equal_hh:
                                  5288  	use_eaq
    007366  aa   000000 000255 
                                  5289  
                                  5290  	emit_eis
    007367  aa   000000 000207 
    007370  aa  0 40100 1065 00   5291  	cmpc		(pr),(pr),fill(040)
    007371  aa   040000 000000    5292  	desc9a		arg1
    007372  aa   100000 000000    5293  	desc9a		arg2
                                  5294  
                                  5295  	return		tnz
    007373  aa   000001 006217 
                                  5296  
    007374                        5297  not_equal_e1:
                                  5298  	unless_optype	(variable,array_ref,temp),not_scalar
    007374  0a   006417 540230 
                                  5299  
                                  5300  	swap		arg1
    007375  aa   000000 040202 
                                  5301  	unless_optype	constant,invalid_opnd
    007376  0a   006415 200230 
                                  5302  "				Operands remain swapped.
                                  5303  	dt_jump1		arg2,(not_equal_hi,not_equal_hr,not_equal_hd,not_equal_hc,logical_op1,not_equal_hh,not_equal_ht)
    007377  aa   000007 100374 
    007400  00   007404 007404 
    007401  00   007410 007410 
    007402  00   006405 007366 
    007403  0a   007404 000000 
                        000007 
                                  5304  
    007404                        5305  not_equal_hi:
    007404                        5306  not_equal_hr:
    007404                        5307  not_equal_ht:
                                  5308  	pad_char_const_to_word	arg2
    007404  aa   000000 100375 
                                  5309  
                                  5310  	load_top		a
    007405  aa   000000 001257 
    007406  aa   040000 1150 00   5311  	cmpa		arg1
                                  5312  	return		tnz
    007407  aa   000001 006217 
                                  5313  
    007410                        5314  not_equal_hd:
    007410                        5315  not_equal_hc:
                                  5316  	pad_char_const_to_dw	arg2
    007410  aa   000000 100376 
                                  5317  
                                  5318  	load_top		aq
    007411  aa   000000 001657 
    007412  aa   040000 1170 00   5319  	cmpaq		arg1
                                  5320  	return		tnz
    007413  aa   000001 006217 
                                  5321  
    007414                        5322  not_equal_tl:
                                  5323  	unless_dt		(int,typeless),typeless_op1
    007414  0a   006411 404226 
                                  5324  	dt_jump1		op2,(not_equal_tl.1,typeless_op2,typeless_op2,typeless_op2,typeless_op2,typeless_op2,not_equal_tl.1)
    007415  aa   000007 700374 
    007416  00   007422 006413 
    007417  00   006413 006413 
    007420  00   006413 006413 
    007421  0a   007422 000000 
                        000007 
                                  5325  
    007422                        5326  not_equal_tl.1:
                                  5327  	load_top		tq
    007422  aa   000000 004657 
                                  5328  	compare		tq,arg1
    007423  aa   000000 044751 
                                  5329  	return		tnz
    007424  aa   000001 006217 
                                  5330  
    007425                        5331  greater_or_equal:
                                  5332  	func		2
    007425  aa   000000 001215 
                                  5333  
                                  5334  	refresh_regs_if_next_is_jump
    007426  aa   000050 000206 
                                  5335  
                                  5336  	dt_jump		(greater_or_equal_ii,greater_or_equal_ri,greater_or_equal_di,greater_or_equal_ci,greater_or_equal_ir,greater_or_equal_rr,greater_or_equal_dr,greater_or_equal_cr,greater_or_equal_id,greater_or_equal_rd,greater_or_equal_dd,greater_or_equal_cd,greater_or_equal_ic,greater_or_equal_rc,greater_or_equal_dc,greater_or_equal_cc,greater_or_equal_e2,greater_or_equal_e1,greater_or_equal_tl,greater_or_equal_tl)
    007427  aa   000024 000235 
    007430  00   007442 007470 
    007431  00   007477 007534 
    007432  00   007464 007502 
    007433  00   007524 007540 
    007434  00   007473 007516 
    007435  00   007510 007545 
    007436  00   007532 007536 
    007437  00   007542 007550 
    007440  00   007553 007605 
    007441  00   007625 007625 
                        000024 
                                  5337  
    007442                        5338  greater_or_equal_ii:
                                  5339  	note_eligible_ind_var_use
    007442  aa   000051 000206 
                                  5340  	if_global_ind_var	arg1,greater_or_equal_ii.global
    007443  0a   007453 040726 
                                  5341  	if_global_ind_var	arg2,greater_or_equal_ii.global.1
    007444  0a   007457 100726 
                                  5342  
                                  5343  	if_eaq		q,arg2,greater_or_equal_ii.1
    007445  0a   007451 100633 
                                  5344  
                                  5345  	load		q,arg1
    007446  aa   000000 040656 
                                  5346  	compare		q,arg2
    007447  aa   000000 100751 
                                  5347  	return		tpl
    007450  aa   000001 007217 
                                  5348  
    007451                        5349  greater_or_equal_ii.1:
                                  5350  	compare		q,arg1
    007451  aa   000000 040751 
                                  5351  	return		tmoz
    007452  aa   000001 007617 
                                  5352  
    007453                        5353  greater_or_equal_ii.global:
                                  5354  	compare_index
    007453  aa   000043 000206 
                                  5355  	if_fb17		arg1,greater_or_equal_ii.global.fb17
    007454  0a   007456 040724 
                                  5356  	return		trc
    007455  aa   000001 011217 
    007456                        5357  greater_or_equal_ii.global.fb17:
                                  5358  	return		tpl
    007456  aa   000001 007217 
                                  5359  
    007457                        5360  greater_or_equal_ii.global.1:
                                  5361  	swap		arg1
    007457  aa   000000 040202 
                                  5362  	compare_index
    007460  aa   000043 000206 
                                  5363  	if_fb17		arg1,greater_or_equal_ii.glob.1.fb17
    007461  0a   007463 040724 
                                  5364  	return		j_le_s
    007462  aa   000001 011617 
    007463                        5365  greater_or_equal_ii.glob.1.fb17:	"ALM won't handle symbols longer than 32 chars
                                  5366  	return		tmoz
    007463  aa   000001 007617 
                                  5367  
    007464                        5368  greater_or_equal_ir:
                                  5369  	swap		arg1
    007464  aa   000000 040202 
                                  5370  
                                  5371  	s_call		cv_load.ir
    007465  0a   002174 000223 
                                  5372  	compare		eaq,arg1
    007466  aa   000000 042351 
                                  5373  	return		tpl
    007467  aa   000001 007217 
                                  5374  
    007470                        5375  greater_or_equal_ri:
                                  5376  	s_call		cv_load.ir
    007470  0a   002174 000223 
                                  5377  	compare		eaq,arg1
    007471  aa   000000 042351 
                                  5378  	return		tmoz
    007472  aa   000001 007617 
                                  5379  
    007473                        5380  greater_or_equal_id:
                                  5381  	swap		arg1
    007473  aa   000000 040202 
                                  5382  
                                  5383  	s_call		cv_load.id
    007474  0a   002214 000223 
                                  5384  	compare		deaq,arg1
    007475  aa   000000 042751 
                                  5385  	return		tpl
    007476  aa   000001 007217 
                                  5386  
    007477                        5387  greater_or_equal_di:
                                  5388  	s_call		cv_load.id
    007477  0a   002214 000223 
                                  5389  	compare		deaq,arg1
    007500  aa   000000 042751 
                                  5390  	return		tmoz
    007501  aa   000001 007617 
                                  5391  
    007502                        5392  greater_or_equal_rr:
                                  5393  	if_eaq		eaq,arg2,greater_or_equal_rr.1
    007502  0a   007506 102233 
                                  5394  
                                  5395  	load		eaq,arg1
    007503  aa   000000 042256 
                                  5396  	compare		eaq,arg2
    007504  aa   000000 102351 
                                  5397  	return		tpl
    007505  aa   000001 007217 
                                  5398  
    007506                        5399  greater_or_equal_rr.1:
                                  5400  	compare		eaq,arg1
    007506  aa   000000 042351 
                                  5401  	return		tmoz
    007507  aa   000001 007617 
                                  5402  
    007510                        5403  greater_or_equal_dd:
                                  5404  	if_eaq		deaq,arg2,greater_or_equal_dd.1
    007510  0a   007514 102633 
                                  5405  
                                  5406  	load		deaq,arg1
    007511  aa   000000 042656 
                                  5407  	compare		deaq,arg2
    007512  aa   000000 102751 
                                  5408  	return		tpl
    007513  aa   000001 007217 
                                  5409  
    007514                        5410  greater_or_equal_dd.1:
                                  5411  	compare		deaq,arg1
    007514  aa   000000 042751 
                                  5412  	return		tmoz
    007515  aa   000001 007617 
                                  5413  
    007516                        5414  greater_or_equal_rd:
                                  5415  	if_eaq		deaq,arg2,greater_or_equal_rd.1
    007516  0a   007522 102633 
                                  5416  
                                  5417  	load		eaq,arg1
    007517  aa   000000 042256 
                                  5418  	compare		deaq,arg2
    007520  aa   000000 102751 
                                  5419  	return		tpl
    007521  aa   000001 007217 
                                  5420  
    007522                        5421  greater_or_equal_rd.1:
                                  5422  	compare		eaq,arg1
    007522  aa   000000 042351 
                                  5423  	return		tmoz
    007523  aa   000001 007617 
                                  5424  
    007524                        5425  greater_or_equal_dr:
                                  5426  	if_eaq		eaq,arg2,greater_or_equal_dr.1
    007524  0a   007530 102233 
                                  5427  
                                  5428  	load		deaq,arg1
    007525  aa   000000 042656 
                                  5429  	compare		eaq,arg2
    007526  aa   000000 102351 
                                  5430  	return		tpl
    007527  aa   000001 007217 
                                  5431  
    007530                        5432  greater_or_equal_dr.1:
                                  5433  	compare		deaq,arg1
    007530  aa   000000 042751 
                                  5434  	return		tmoz
    007531  aa   000001 007617 
                                  5435  
    007532                        5436  greater_or_equal_ic:
                                  5437  	error		323,arg2
    007532  aa   000503 000702 
    007533  aa   000000 100303 
                        000001 
                                  5438  
    007534                        5439  greater_or_equal_ci:
                                  5440  	error		323,arg1
    007534  aa   000503 000702 
    007535  aa   000000 040303 
                        000001 
                                  5441  
    007536                        5442  greater_or_equal_rc:
                                  5443  	error		323,arg2
    007536  aa   000503 000702 
    007537  aa   000000 100303 
                        000001 
                                  5444  
    007540                        5445  greater_or_equal_cr:
                                  5446  	error		323,arg1
    007540  aa   000503 000702 
    007541  aa   000000 040303 
                        000001 
                                  5447  
    007542                        5448  greater_or_equal_dc:
                                  5449  	error		312,arg1,arg2
    007542  aa   000470 001302 
    007543  aa   000000 040303 
    007544  aa   000000 100303 
                        000002 
                                  5450  
    007545                        5451  greater_or_equal_cd:
                                  5452  	error		311,arg1,arg2
    007545  aa   000467 001302 
    007546  aa   000000 040303 
    007547  aa   000000 100303 
                        000002 
                                  5453  
    007550                        5454  greater_or_equal_cc:
                                  5455  	error		328,arg1,arg2
    007550  aa   000510 001302 
    007551  aa   000000 040303 
    007552  aa   000000 100303 
                        000002 
                                  5456  
    007553                        5457  greater_or_equal_e2:
                                  5458  	if_dt		logical,logical_op1
    007553  0a   006405 020225 
                                  5459  	dt_jump1		arg1,(greater_or_equal_ih,greater_or_equal_rh,greater_or_equal_dh,greater_or_equal_ch,logical_op2,greater_or_equal_hh,greater_or_equal_th)
    007554  aa   000007 040374 
    007555  00   007561 007561 
    007556  00   007570 007570 
    007557  00   006407 007577 
    007560  0a   007561 000000 
                        000007 
                                  5460  
    007561                        5461  greater_or_equal_ih:
    007561                        5462  greater_or_equal_rh:
    007561                        5463  greater_or_equal_th:
                                  5464  	unless_optype	constant,invalid_opnd
    007561  0a   006415 200230 
                                  5465  
                                  5466  	swap		arg1
    007562  aa   000000 040202 
                                  5467  	unless_optype	(variable,array_ref,temp),not_scalar
    007563  0a   006417 540230 
                                  5468  
                                  5469  	pad_char_const_to_word	arg1	" the two operands remain swapped
    007564  aa   000000 040375 
                                  5470  
                                  5471  	load		a,arg2
    007565  aa   000000 101256 
    007566  aa   040000 1150 00   5472  	cmpa		arg1
                                  5473  	return		trc
    007567  aa   000001 011217 
                                  5474  
    007570                        5475  greater_or_equal_dh:
    007570                        5476  greater_or_equal_ch:
                                  5477  	unless_optype	constant,invalid_opnd
    007570  0a   006415 200230 
                                  5478  
                                  5479  	swap		arg1
    007571  aa   000000 040202 
                                  5480  	unless_optype	(variable,array_ref,temp),not_scalar
    007572  0a   006417 540230 
                                  5481  
                                  5482  	pad_char_const_to_dw	arg1	" the two operands remain swapped
    007573  aa   000000 040376 
                                  5483  
                                  5484  	load		aq,arg2
    007574  aa   000000 101656 
    007575  aa   040000 1170 00   5485  	cmpaq		arg1
                                  5486  	return		trc
    007576  aa   000001 011217 
                                  5487  
    007577                        5488  greater_or_equal_hh:
                                  5489  	use_eaq
    007577  aa   000000 000255 
                                  5490  
                                  5491  	emit_eis
    007600  aa   000000 000207 
    007601  aa  0 40100 1065 00   5492  	cmpc		(pr),(pr),fill(040)
    007602  aa   040000 000000    5493  	desc9a		arg1
    007603  aa   100000 000000    5494  	desc9a		arg2
                                  5495  
                                  5496  	return		trc
    007604  aa   000001 011217 
                                  5497  
    007605                        5498  greater_or_equal_e1:
                                  5499  	unless_optype	(variable,array_ref,temp),not_scalar
    007605  0a   006417 540230 
                                  5500  
                                  5501  	swap		arg1
    007606  aa   000000 040202 
                                  5502  	unless_optype	constant,invalid_opnd
    007607  0a   006415 200230 
                                  5503  "				Operands remain swapped.
                                  5504  	dt_jump1		arg2,(greater_or_equal_hi,greater_or_equal_hr,greater_or_equal_hd,greater_or_equal_hc,logical_op1,greater_or_equal_hh,greater_or_equal_ht)
    007610  aa   000007 100374 
    007611  00   007615 007615 
    007612  00   007621 007621 
    007613  00   006405 007577 
    007614  0a   007615 000000 
                        000007 
                                  5505  
    007615                        5506  greater_or_equal_hi:
    007615                        5507  greater_or_equal_hr:
    007615                        5508  greater_or_equal_ht:
                                  5509  	pad_char_const_to_word	arg2
    007615  aa   000000 100375 
                                  5510  
                                  5511  	load		a,arg2
    007616  aa   000000 101256 
    007617  aa   040000 1150 00   5512  	cmpa		arg1
                                  5513  	return		trc
    007620  aa   000001 011217 
                                  5514  
    007621                        5515  greater_or_equal_hd:
    007621                        5516  greater_or_equal_hc:
                                  5517  	pad_char_const_to_dw	arg2
    007621  aa   000000 100376 
                                  5518  
                                  5519  	load		aq,arg2
    007622  aa   000000 101656 
    007623  aa   040000 1170 00   5520  	cmpaq		arg1
                                  5521  	return		trc
    007624  aa   000001 011217 
                                  5522  
    007625                        5523  greater_or_equal_tl:
                                  5524  	unless_dt		(int,typeless),typeless_op1
    007625  0a   006411 404226 
                                  5525  	dt_jump1		op2,(greater_or_equal_tl.1,typeless_op2,typeless_op2,typeless_op2,typeless_op2,typeless_op2,greater_or_equal_tl.1)
    007626  aa   000007 700374 
    007627  00   007633 006413 
    007630  00   006413 006413 
    007631  00   006413 006413 
    007632  0a   007633 000000 
                        000007 
                                  5526  
    007633                        5527  greater_or_equal_tl.1:
                                  5528  	if_eaq		tq,arg2,greater_or_equal_tl.2
    007633  0a   007637 104633 
                                  5529  
                                  5530  	load		tq,arg1
    007634  aa   000000 044656 
                                  5531  	compare		tq,arg2
    007635  aa   000000 104751 
                                  5532  	return		tpl
    007636  aa   000001 007217 
                                  5533  
    007637                        5534  greater_or_equal_tl.2:
                                  5535  	compare		tq,arg1
    007637  aa   000000 044751 
                                  5536  	return		tmoz
    007640  aa   000001 007617 
                                  5537  
                                  5538  greater:	func		2
    007641  aa   000000 001215 
                                  5539  
                                  5540  	refresh_regs_if_next_is_jump
    007642  aa   000050 000206 
                                  5541  
                                  5542  	dt_jump		(greater_ii,greater_ri,greater_di,greater_ci,greater_ir,greater_rr,greater_dr,greater_cr,greater_id,greater_rd,greater_dd,greater_cd,greater_ic,greater_rc,greater_dc,greater_cc,greater_e2,greater_e1,greater_tl,greater_tl)
    007643  aa   000024 000235 
    007644  00   007656 007704 
    007645  00   007713 007750 
    007646  00   007700 007716 
    007647  00   007740 007754 
    007650  00   007707 007732 
    007651  00   007724 007761 
    007652  00   007746 007752 
    007653  00   007756 007764 
    007654  00   007767 010021 
    007655  00   010041 010041 
                        000024 
                                  5543  
    007656                        5544  greater_ii:
                                  5545  	note_eligible_ind_var_use
    007656  aa   000051 000206 
                                  5546  	if_global_ind_var	arg1,greater_ii.global
    007657  0a   007667 040726 
                                  5547  	if_global_ind_var	arg2,greater_ii.global.1
    007660  0a   007673 100726 
                                  5548  
                                  5549  	if_eaq		q,arg2,greater_ii.1
    007661  0a   007665 100633 
                                  5550  
                                  5551  	load		q,arg1
    007662  aa   000000 040656 
                                  5552  	compare		q,arg2
    007663  aa   000000 100751 
                                  5553  	return		tpnz
    007664  aa   000001 010217 
                                  5554  
    007665                        5555  greater_ii.1:
                                  5556  	compare		q,arg1
    007665  aa   000000 040751 
                                  5557  	return		tmi
    007666  aa   000001 006617 
                                  5558  
    007667                        5559  greater_ii.global:
                                  5560  	compare_index
    007667  aa   000043 000206 
                                  5561  	if_fb17		arg1,greater_ii.global.fb17
    007670  0a   007672 040724 
                                  5562  	return		j_g_s
    007671  aa   000001 012217 
    007672                        5563  greater_ii.global.fb17:
                                  5564  	return		tpnz
    007672  aa   000001 010217 
                                  5565  
    007673                        5566  greater_ii.global.1:
                                  5567  	swap		arg1
    007673  aa   000000 040202 
                                  5568  	compare_index
    007674  aa   000043 000206 
                                  5569  	if_fb17		arg1,greater_ii.global.1.fb17
    007675  0a   007677 040724 
                                  5570  	return		tnc
    007676  aa   000001 010617 
    007677                        5571  greater_ii.global.1.fb17:
                                  5572  	return		tmi
    007677  aa   000001 006617 
                                  5573  
    007700                        5574  greater_ir:
                                  5575  	swap		arg1
    007700  aa   000000 040202 
                                  5576  
                                  5577  	s_call		cv_load.ir
    007701  0a   002174 000223 
                                  5578  	compare		eaq,arg1
    007702  aa   000000 042351 
                                  5579  	return		tpnz
    007703  aa   000001 010217 
                                  5580  
    007704                        5581  greater_ri:
                                  5582  	s_call		cv_load.ir
    007704  0a   002174 000223 
                                  5583  	compare		eaq,arg1
    007705  aa   000000 042351 
                                  5584  	return		tmi
    007706  aa   000001 006617 
                                  5585  
    007707                        5586  greater_id:
                                  5587  	swap		arg1
    007707  aa   000000 040202 
                                  5588  
                                  5589  	s_call		cv_load.id
    007710  0a   002214 000223 
                                  5590  	compare		deaq,arg1
    007711  aa   000000 042751 
                                  5591  	return		tpnz
    007712  aa   000001 010217 
                                  5592  
    007713                        5593  greater_di:
                                  5594  	s_call		cv_load.id
    007713  0a   002214 000223 
                                  5595  	compare		deaq,arg1
    007714  aa   000000 042751 
                                  5596  	return		tmi
    007715  aa   000001 006617 
                                  5597  
    007716                        5598  greater_rr:
                                  5599  	if_eaq		eaq,arg2,greater_rr.1
    007716  0a   007722 102233 
                                  5600  
                                  5601  	load		eaq,arg1
    007717  aa   000000 042256 
                                  5602  	compare		eaq,arg2
    007720  aa   000000 102351 
                                  5603  	return		tpnz
    007721  aa   000001 010217 
                                  5604  
    007722                        5605  greater_rr.1:
                                  5606  	compare		eaq,arg1
    007722  aa   000000 042351 
                                  5607  	return		tmi
    007723  aa   000001 006617 
                                  5608  
    007724                        5609  greater_dd:
                                  5610  	if_eaq		deaq,arg2,greater_dd.1
    007724  0a   007730 102633 
                                  5611  
                                  5612  	load		deaq,arg1
    007725  aa   000000 042656 
                                  5613  	compare		deaq,arg2
    007726  aa   000000 102751 
                                  5614  	return		tpnz
    007727  aa   000001 010217 
                                  5615  
    007730                        5616  greater_dd.1:
                                  5617  	compare		deaq,arg1
    007730  aa   000000 042751 
                                  5618  	return		tmi
    007731  aa   000001 006617 
                                  5619  
    007732                        5620  greater_rd:
                                  5621  	if_eaq		deaq,arg2,greater_rd.1
    007732  0a   007736 102633 
                                  5622  
                                  5623  	load		eaq,arg1
    007733  aa   000000 042256 
                                  5624  	compare		deaq,arg2
    007734  aa   000000 102751 
                                  5625  	return		tpnz
    007735  aa   000001 010217 
                                  5626  
    007736                        5627  greater_rd.1:
                                  5628  	compare		eaq,arg1
    007736  aa   000000 042351 
                                  5629  	return		tmi
    007737  aa   000001 006617 
                                  5630  
    007740                        5631  greater_dr:
                                  5632  	if_eaq		eaq,arg2,greater_dr.1
    007740  0a   007744 102233 
                                  5633  
                                  5634  	load		deaq,arg1
    007741  aa   000000 042656 
                                  5635  	compare		eaq,arg2
    007742  aa   000000 102351 
                                  5636  	return		tpnz
    007743  aa   000001 010217 
                                  5637  
    007744                        5638  greater_dr.1:
                                  5639  	compare		deaq,arg1
    007744  aa   000000 042751 
                                  5640  	return		tmi
    007745  aa   000001 006617 
                                  5641  
    007746                        5642  greater_ic:
                                  5643  	error		323,arg2
    007746  aa   000503 000702 
    007747  aa   000000 100303 
                        000001 
                                  5644  
    007750                        5645  greater_ci:
                                  5646  	error		323,arg1
    007750  aa   000503 000702 
    007751  aa   000000 040303 
                        000001 
                                  5647  
    007752                        5648  greater_rc:
                                  5649  	error		323,arg2
    007752  aa   000503 000702 
    007753  aa   000000 100303 
                        000001 
                                  5650  
    007754                        5651  greater_cr:
                                  5652  	error		323,arg1
    007754  aa   000503 000702 
    007755  aa   000000 040303 
                        000001 
                                  5653  
    007756                        5654  greater_dc:
                                  5655  	error		312,arg1,arg2
    007756  aa   000470 001302 
    007757  aa   000000 040303 
    007760  aa   000000 100303 
                        000002 
                                  5656  
    007761                        5657  greater_cd:
                                  5658  	error		311,arg1,arg2
    007761  aa   000467 001302 
    007762  aa   000000 040303 
    007763  aa   000000 100303 
                        000002 
                                  5659  
    007764                        5660  greater_cc:
                                  5661  	error		328,arg1,arg2
    007764  aa   000510 001302 
    007765  aa   000000 040303 
    007766  aa   000000 100303 
                        000002 
                                  5662  
    007767                        5663  greater_e2:
                                  5664  	if_dt		logical,logical_op1
    007767  0a   006405 020225 
                                  5665  	dt_jump1		arg1,(greater_ih,greater_rh,greater_dh,greater_ch,logical_op2,greater_hh,greater_th)
    007770  aa   000007 040374 
    007771  00   007775 007775 
    007772  00   010004 010004 
    007773  00   006407 010013 
    007774  0a   007775 000000 
                        000007 
                                  5666  
    007775                        5667  greater_ih:
    007775                        5668  greater_rh:
    007775                        5669  greater_th:
                                  5670  	unless_optype	constant,invalid_opnd
    007775  0a   006415 200230 
                                  5671  
                                  5672  	swap		arg1
    007776  aa   000000 040202 
                                  5673  	unless_optype	(variable,array_ref,temp),not_scalar
    007777  0a   006417 540230 
                                  5674  
                                  5675  	pad_char_const_to_word	arg1	" the two operands remain swapped
    010000  aa   000000 040375 
                                  5676  
                                  5677  	load		a,arg1
    010001  aa   000000 041256 
    010002  aa   100000 1150 00   5678  	cmpa		arg2
                                  5679  	return		tnc
    010003  aa   000001 010617 
                                  5680  
    010004                        5681  greater_dh:
    010004                        5682  greater_ch:
                                  5683  	unless_optype	constant,invalid_opnd
    010004  0a   006415 200230 
                                  5684  
                                  5685  	swap		arg1
    010005  aa   000000 040202 
                                  5686  	unless_optype	(variable,array_ref,temp),not_scalar
    010006  0a   006417 540230 
                                  5687  
                                  5688  	pad_char_const_to_dw	arg1	" the two operands remain swapped
    010007  aa   000000 040376 
                                  5689  
                                  5690  	load		aq,arg1
    010010  aa   000000 041656 
    010011  aa   100000 1170 00   5691  	cmpaq		arg2
                                  5692  	return		tnc
    010012  aa   000001 010617 
                                  5693  
    010013                        5694  greater_hh:
                                  5695  	use_eaq
    010013  aa   000000 000255 
                                  5696  
                                  5697  	emit_eis
    010014  aa   000000 000207 
    010015  aa  0 40100 1065 00   5698  	cmpc		(pr),(pr),fill(040)
    010016  aa   100000 000000    5699  	desc9a		arg2
    010017  aa   040000 000000    5700  	desc9a		arg1
                                  5701  
                                  5702  	return		tnc
    010020  aa   000001 010617 
                                  5703  
    010021                        5704  greater_e1:
                                  5705  	unless_optype	(variable,array_ref,temp),not_scalar
    010021  0a   006417 540230 
                                  5706  
                                  5707  	swap		arg1
    010022  aa   000000 040202 
                                  5708  	unless_optype	constant,invalid_opnd
    010023  0a   006415 200230 
                                  5709  "				Operands remain swapped.
                                  5710  	dt_jump1		arg2,(greater_hi,greater_hr,greater_hd,greater_hc,logical_op1,greater_hh,greater_ht)
    010024  aa   000007 100374 
    010025  00   010031 010031 
    010026  00   010035 010035 
    010027  00   006405 010013 
    010030  0a   010031 000000 
                        000007 
                                  5711  
    010031                        5712  greater_hi:
    010031                        5713  greater_hr:
    010031                        5714  greater_ht:
                                  5715  	pad_char_const_to_word	arg2
    010031  aa   000000 100375 
                                  5716  
                                  5717  	load		a,arg1
    010032  aa   000000 041256 
    010033  aa   100000 1150 00   5718  	cmpa		arg2
                                  5719  	return		tnc
    010034  aa   000001 010617 
                                  5720  
    010035                        5721  greater_hd:
    010035                        5722  greater_hc:
                                  5723  	pad_char_const_to_dw	arg2
    010035  aa   000000 100376 
                                  5724  
                                  5725  	load		aq,arg1
    010036  aa   000000 041656 
    010037  aa   100000 1170 00   5726  	cmpaq		arg2
                                  5727  	return		tnc
    010040  aa   000001 010617 
                                  5728  
    010041                        5729  greater_tl:
                                  5730  	unless_dt		(int,typeless),typeless_op1
    010041  0a   006411 404226 
                                  5731  	dt_jump1		op2,(greater_tl.1,typeless_op2,typeless_op2,typeless_op2,typeless_op2,typeless_op2,greater_tl.1)
    010042  aa   000007 700374 
    010043  00   010047 006413 
    010044  00   006413 006413 
    010045  00   006413 006413 
    010046  0a   010047 000000 
                        000007 
                                  5732  
    010047                        5733  greater_tl.1:
                                  5734  	if_eaq		tq,arg2,greater_tl.2
    010047  0a   010053 104633 
                                  5735  
                                  5736  	load		tq,arg1
    010050  aa   000000 044656 
                                  5737  	compare		tq,arg2
    010051  aa   000000 104751 
                                  5738  	return		tpnz
    010052  aa   000001 010217 
                                  5739  
    010053                        5740  greater_tl.2:
                                  5741  	compare		tq,arg1
    010053  aa   000000 044751 
                                  5742  	return		tmi
    010054  aa   000001 006617 
                                  5743  
                                  5744  or:	func		2
    010055  aa   000000 001215 
                                  5745  
                                  5746  	unless_dt		logical,or_e2
    010056  0a   010066 020226 
                                  5747  	swap		arg1
    010057  aa   000000 040202 
                                  5748  	unless_dt		logical,or_e1
    010060  0a   010064 020226 
                                  5749  
                                  5750  	load_top		a
    010061  aa   000000 001257 
    010062  aa   040000 2750 00   5751  	ora		arg1
                                  5752  	return		a
    010063  aa   000001 001217 
                                  5753  
    010064                        5754  or_e1:
                                  5755  	error		313,arg1
    010064  aa   000471 000702 
    010065  aa   000000 040303 
                        000001 
                                  5756  
    010066                        5757  or_e2:
                                  5758  	error		313,arg2
    010066  aa   000471 000702 
    010067  aa   000000 100303 
                        000001 
                                  5759  
                                  5760  and:	func		2
    010070  aa   000000 001215 
                                  5761  
                                  5762  	unless_dt		logical,and_e2
    010071  0a   010101 020226 
                                  5763  	swap		arg1
    010072  aa   000000 040202 
                                  5764  	unless_dt		logical,and_e1
    010073  0a   010077 020226 
                                  5765  
                                  5766  	load_top		a
    010074  aa   000000 001257 
    010075  aa   040000 3750 00   5767  	ana		arg1
                                  5768  	return		a
    010076  aa   000001 001217 
                                  5769  
    010077                        5770  and_e1:
                                  5771  	error		313,arg1
    010077  aa   000471 000702 
    010100  aa   000000 040303 
                        000001 
                                  5772  
    010101                        5773  and_e2:
                                  5774  	error		313,arg2
    010101  aa   000471 000702 
    010102  aa   000000 100303 
                        000001 
                                  5775  
                                  5776  not:	func		1
    010103  aa   000000 000615 
                                  5777  
                                  5778  	unless_dt		logical,not.e
    010104  0a   010131 020226 
                                  5779  
                                  5780  	if_eaq		ind,op1,not_ind
    010105  0a   010111 745233 
                                  5781  
                                  5782  	load		a,op1
    010106  aa   000000 741256 
    010107  aa   400000 6750 03   5783  	era		=o400000,du
                                  5784  	return		a
    010110  aa   000001 001217 
                                  5785  
    010111                        5786  not_ind:
                                  5787  	ind_jump		(not_tze,not_tnz,not_tmi,not_tpl,not_tmoz,not_tpnz,not_tnc,not_trc,not_j_le_s,not_j_g_s)
    010111  aa   000012 000236 
    010112  00   010117 010120 
    010113  00   010121 010122 
    010114  00   010123 010124 
    010115  00   010125 010126 
    010116  00   010127 010130 
                        000012 
                                  5788  
    010117                        5789  not_tze:
                                  5790  	return		tnz
    010117  aa   000001 006217 
                                  5791  
    010120                        5792  not_tnz:
                                  5793  	return		tze
    010120  aa   000001 005617 
                                  5794  
    010121                        5795  not_tmi:
                                  5796  	return		tpl
    010121  aa   000001 007217 
                                  5797  
    010122                        5798  not_tpl:
                                  5799  	return		tmi
    010122  aa   000001 006617 
                                  5800  
    010123                        5801  not_tmoz:
                                  5802  	return		tpnz
    010123  aa   000001 010217 
                                  5803  
    010124                        5804  not_tpnz:
                                  5805  	return		tmoz
    010124  aa   000001 007617 
                                  5806  
    010125                        5807  not_tnc:
                                  5808  	return		trc
    010125  aa   000001 011217 
                                  5809  
    010126                        5810  not_trc:
                                  5811  	return		tnc
    010126  aa   000001 010617 
                                  5812  
    010127                        5813  not_j_le_s:
                                  5814  	return		j_g_s
    010127  aa   000001 012217 
                                  5815  
    010130                        5816  not_j_g_s:
                                  5817  	return		j_le_s
    010130  aa   000001 011617 
                                  5818  
    010131                        5819  not.e:
                                  5820  	error		313,op1
    010131  aa   000471 000702 
    010132  aa   000000 740303 
                        000001 
                                  5821  
                                  5822  equiv:	func		2
    010133  aa   000000 001215 
                                  5823  
                                  5824  	unless_dt		logical,equiv.p
    010134  0a   010153 020226 
                                  5825  	swap		arg1
    010135  aa   000000 040202 
                                  5826  	unless_dt		logical,equiv.p
    010136  0a   010153 020226 
                                  5827  
                                  5828  	refresh_regs_if_next_is_jump
    010137  aa   000050 000206 
                                  5829  
                                  5830  	load_top		a
    010140  aa   000000 001257 
                                  5831  	compare		a,arg1
    010141  aa   000000 041351 
                                  5832  	return		tze
    010142  aa   000001 005617 
                                  5833  
                                  5834  
    010143                        5835  not_equiv:
                                  5836  	func		2
    010143  aa   000000 001215 
                                  5837  
                                  5838  	unless_dt		logical,not_equiv.p
    010144  0a   010153 020226 
                                  5839  	swap		arg1
    010145  aa   000000 040202 
                                  5840  	unless_dt		logical,not_equiv.p
    010146  0a   010153 020226 
                                  5841  
                                  5842  	refresh_regs_if_next_is_jump
    010147  aa   000050 000206 
                                  5843  
                                  5844  	load_top		a
    010150  aa   000000 001257 
                                  5845  	compare		a,arg1
    010151  aa   000000 041351 
                                  5846  	return		tnz
    010152  aa   000001 006217 
                                  5847  
                                  5848  
    010153                        5849  equiv.p:
    010153                        5850  not_equiv.p:
                                  5851  	error		313,op1
    010153  aa   000471 000702 
    010154  aa   000000 740303 
                        000001 
                                  5852  
                                  5853  jump:	proc		1
    010155  aa   000000 000614 
                                  5854  
                                  5855  	if_next_statement	arg1,jump_is_nop
    010156  0a   010163 040345 
                                  5856  	shorten_stack
    010157  aa   000000 000272 
                                  5857  	refresh_regs
    010160  aa   000000 000261 
                                  5858  	save_state	arg1,discard
    010161  aa   000002 040356 
    010162  aa   040000 7100 00   5859  	tra		arg1
                                  5860  
    010163                        5861  jump_is_nop:
                                  5862  	return
    010163  aa   000000 000217 
                                  5863  
    010164                        5864  jump_false:
                                  5865  	proc		2
    010164  aa   000000 001214 
                                  5866  
                                  5867  	swap		op2
    010165  aa   000000 700202 
                                  5868  
                                  5869  	unless_dt		logical,jump_false.p
    010166  0a   010253 020226 
                                  5870  
                                  5871  	if_optype		constant,jump_false_const
    010167  0a   010177 200227 
                                  5872  	if_eaq		ind,op1,jump_false_ind
    010170  0a   010205 745233 
                                  5873  
                                  5874  	shorten_stack
    010171  aa   000000 000272 
                                  5875  	refresh_regs
    010172  aa   000000 000261 
                                  5876  
                                  5877  	load_for_test	a,op1
    010173  aa   000000 741361 
                                  5878  
    010174                        5879  jump_false_using_a:
                                  5880  	save_state	arg1
    010174  aa   000000 040356 
    010175  aa   040000 6000 00   5881  	tze		arg1
                                  5882  	return
    010176  aa   000000 000217 
                                  5883  
    010177                        5884  jump_false_const:
                                  5885  	unless_zero	op1,jump_false_is_nop
    010177  0a   010204 740366 
                                  5886  
                                  5887  	shorten_stack
    010200  aa   000000 000272 
                                  5888  	refresh_regs
    010201  aa   000000 000261 
                                  5889  	save_state	arg1
    010202  aa   000000 040356 
    010203  aa   040000 7100 00   5890  	tra		arg1
                                  5891  
    010204                        5892  jump_false_is_nop:
                                  5893  	return
    010204  aa   000000 000217 
                                  5894  
    010205                        5895  jump_false_ind:
                                  5896  	unless_optype	temp,jump_false_using_ind " not a temp, so only used once
    010205  0a   010214 040230 
                                  5897  	push_ref_count	arg2		" if value is to be used again, put it in A
    010206  aa   000000 100371 
                                  5898  	unless		op1,>,0,jump_false_using_ind " last ref so dont change it
    010207  0a   010214 744240 
                                  5899  	ind_to_a				" forces value to A
    010210  aa   000041 000206 
                                  5900  	shorten_stack	protect_indicators
    010211  aa   000001 000272 
                                  5901  	refresh_regs	protect_indicators
    010212  aa   000001 000261 
                                  5902  	jump		jump_false_using_a
    010213  0a   010174 000220 
                                  5903  
    010214                        5904  jump_false_using_ind:
                                  5905  	shorten_stack	protect_indicators
    010214  aa   000001 000272 
                                  5906  	refresh_regs	protect_indicators
    010215  aa   000001 000261 
                                  5907  	save_state	arg1
    010216  aa   000000 040356 
                                  5908  
                                  5909  	ind_jump		(jump_false_tze,jump_false_tnz,jump_false_tmi,jump_false_tpl,jump_false_tmoz,jump_false_tpnz,jump_false_tnc,jump_false_trc,jump_false_j_le_s,jump_false_j_g_s)
    010217  aa   000012 000236 
    010220  00   010225 010227 
    010221  00   010231 010233 
    010222  00   010235 010237 
    010223  00   010241 010243 
    010224  00   010245 010250 
                        000012 
                                  5910  
    010225                        5911  jump_false_tze:
    010225  aa   040000 6010 00   5912  	tnz		arg1
                                  5913  	return
    010226  aa   000000 000217 
                                  5914  
    010227                        5915  jump_false_tnz:
    010227  aa   040000 6000 00   5916  	tze		arg1
                                  5917  	return
    010230  aa   000000 000217 
                                  5918  
    010231                        5919  jump_false_tmi:
    010231  aa   040000 6050 00   5920  	tpl		arg1
                                  5921  	return
    010232  aa   000000 000217 
                                  5922  
    010233                        5923  jump_false_tpl:
    010233  aa   040000 6040 00   5924  	tmi		arg1
                                  5925  	return
    010234  aa   000000 000217 
                                  5926  
    010235                        5927  jump_false_tmoz:
    010235  aa   040000 6054 00   5928  	tpnz		arg1
                                  5929  	return
    010236  aa   000000 000217 
                                  5930  
    010237                        5931  jump_false_tpnz:
    010237  aa   040000 6044 00   5932  	tmoz		arg1
                                  5933  	return
    010240  aa   000000 000217 
                                  5934  
    010241                        5935  jump_false_tnc:
    010241  aa   040000 6030 00   5936  	trc		arg1
                                  5937  	return
    010242  aa   000000 000217 
                                  5938  
    010243                        5939  jump_false_trc:
    010243  aa   040000 6020 00   5940  	tnc		arg1
                                  5941  	return
    010244  aa   000000 000217 
                                  5942  
    010245                        5943  jump_false_j_le_s:
    010245  aa   000002 6000 04   5944  	tze		2,ic
    010246  aa   040000 6030 00   5945  	trc		arg1
                                  5946  	return
    010247  aa   000000 000217 
                                  5947  
    010250                        5948  jump_false_j_g_s:
    010250  aa   040000 6020 00   5949  	tnc		arg1
    010251  aa   040000 6000 00   5950  	tze		arg1
                                  5951  	return
    010252  aa   000000 000217 
                                  5952  
    010253                        5953  jump_false.p:
                                  5954  	print		324,op1
    010253  aa   000504 000701 
    010254  aa   000000 740303 
                        000001 
                                  5955  	return
    010255  aa   000000 000217 
                                  5956  
                                  5957  
                                  5958  
    010256                        5959  jump_true:
                                  5960  	proc		2
    010256  aa   000000 001214 
                                  5961  
                                  5962  	swap		op2
    010257  aa   000000 700202 
                                  5963  
                                  5964  	unless_dt		logical,jump_false.p
    010260  0a   010253 020226 
                                  5965  
                                  5966  	if_optype		constant,jump_true_const
    010261  0a   010271 200227 
                                  5967  	if_eaq		ind,op1,jump_true_ind
    010262  0a   010277 745233 
                                  5968  
                                  5969  	shorten_stack
    010263  aa   000000 000272 
                                  5970  	refresh_regs
    010264  aa   000000 000261 
                                  5971  
                                  5972  	load_for_test	a,op1
    010265  aa   000000 741361 
                                  5973  
    010266                        5974  jump_true_using_a:
                                  5975  	save_state	arg1
    010266  aa   000000 040356 
    010267  aa   040000 6010 00   5976  	tnz		arg1
                                  5977  	return
    010270  aa   000000 000217 
                                  5978  
    010271                        5979  jump_true_const:
                                  5980  	if_zero		op1,jump_true_is_nop
    010271  0a   010276 740766 
                                  5981  
                                  5982  	shorten_stack
    010272  aa   000000 000272 
                                  5983  	refresh_regs
    010273  aa   000000 000261 
                                  5984  	save_state	arg1
    010274  aa   000000 040356 
    010275  aa   040000 7100 00   5985  	tra		arg1
                                  5986  
    010276                        5987  jump_true_is_nop:
                                  5988  	return
    010276  aa   000000 000217 
                                  5989  
    010277                        5990  jump_true_ind:
                                  5991  	unless_optype	temp,jump_true_using_ind " not a temp, so only used once
    010277  0a   010306 040230 
                                  5992  	push_ref_count	arg2		" if value is to be used again, put it in A
    010300  aa   000000 100371 
                                  5993  	unless		op1,>,0,jump_true_using_ind " last ref so dont change it
    010301  0a   010306 744240 
                                  5994  	ind_to_a				" forces value to A
    010302  aa   000041 000206 
                                  5995  	shorten_stack	protect_indicators
    010303  aa   000001 000272 
                                  5996  	refresh_regs	protect_indicators
    010304  aa   000001 000261 
                                  5997  	jump		jump_true_using_a
    010305  0a   010266 000220 
                                  5998  
    010306                        5999  jump_true_using_ind:
                                  6000  	shorten_stack	protect_indicators
    010306  aa   000001 000272 
                                  6001  	refresh_regs	protect_indicators
    010307  aa   000001 000261 
                                  6002  	save_state	arg1
    010310  aa   000000 040356 
                                  6003  	ind_jump		(jump_false_tnz,jump_false_tze,jump_false_tpl,jump_false_tmi,jump_false_tpnz,jump_false_tmoz,jump_false_trc,jump_false_tnc,jump_false_j_g_s,jump_false_j_le_s)
    010311  aa   000012 000236 
    010312  00   010227 010225 
    010313  00   010233 010231 
    010314  00   010237 010235 
    010315  00   010243 010241 
    010316  00   010250 010245 
                        000012 
                                  6004  
    010317                        6005  jump_arithmetic:
                                  6006  	proc		4
    010317  aa   000000 002214 
                                  6007  
                                  6008  	shorten_stack
    010320  aa   000000 000272 
                                  6009  	refresh_regs
    010321  aa   000000 000261 
                                  6010  
                                  6011  	swap	arg1	" optimize for consants
    010322  aa   000000 040202 
                                  6012  	if_optype	constant,jump_arith_const
    010323  0a   010446 200227 
                                  6013  	swap	arg1
    010324  aa   000000 040202 
                                  6014  	
                                  6015  	dt_jump1		arg1,(jump_arithmetic_i,jump_arithmetic_r,jump_arithmetic_d,jump_arithmetic.e,jump_arithmetic.e,jump_arithmetic.e,jump_arithmetic.e)
    010325  aa   000007 040374 
    010326  00   010337 010351 
    010327  00   010332 010465 
    010330  00   010465 010465 
    010331  0a   010465 000000 
                        000007 
                                  6016  
    010332                        6017  jump_arithmetic_d:
                                  6018  	unless_eaq	deaq,arg1,jump_arithmetic_r.1
    010332  0a   010356 042634 
                                  6019  	if_ind		deaq,jump_arithmetic.01
    010333  0a   010361 002710 
    010334  aa   400000 5150 03   6020  	fcmp		=0.0,du
                                  6021  	set_inds_valid	deaq
    010335  aa   000000 002624 
                                  6022  	jump		jump_arithmetic.01
    010336  0a   010361 000220 
                                  6023  
    010337                        6024  jump_arithmetic_i:
                                  6025  	unless_global_ind_var	arg1,jump_arithmetic_i.check_eaq
    010337  0a   010342 040326 
                                  6026  	test_index
    010340  aa   000044 000206 
                                  6027  	jump		jump_arithmetic.01
    010341  0a   010361 000220 
                                  6028  
    010342                        6029  jump_arithmetic_i.check_eaq:
                                  6030  	unless_eaq	q,arg1,jump_arithmetic_i.1
    010342  0a   010347 040634 
                                  6031  	if_ind		q,jump_arithmetic.01
    010343  0a   010361 000710 
    010344  aa   000000 1160 07   6032  	cmpq		0,dl
                                  6033  	set_inds_valid	q
    010345  aa   000000 000624 
                                  6034  	jump		jump_arithmetic.01
    010346  0a   010361 000220 
                                  6035  
    010347                        6036  jump_arithmetic_i.1:
    010347  aa   040000 2340 00   6037  	szn		arg1
                                  6038  	jump		jump_arithmetic.01
    010350  0a   010361 000220 
                                  6039  
    010351                        6040  jump_arithmetic_r:
                                  6041  
                                  6042  	unless_eaq	eaq,arg1,jump_arithmetic_r.1
    010351  0a   010356 042234 
                                  6043  	if_ind		eaq,jump_arithmetic.01
    010352  0a   010361 002310 
    010353  aa   400000 5150 03   6044  	fcmp		=0.0,du
                                  6045  	set_inds_valid	eaq
    010354  aa   000000 002224 
                                  6046  	jump		jump_arithmetic.01
    010355  0a   010361 000220 
                                  6047  
    010356                        6048  jump_arithmetic_r.1:
                                  6049  	use_ind
    010356  aa   000007 000206 
                                  6050  	use_eaq			" so we dont have to invent use_eaq protect_indicators
    010357  aa   000000 000255 
    010360  aa   040000 4300 00   6051  	fszn		arg1
                                  6052  
    010361                        6053  jump_arithmetic.01:
                                  6054  	swap		arg3			" order is now 1 3 2
    010361  aa   000000 140202 
                                  6055  	if		arg2,=,op1,jump_arith_12	" 1 & 2 are the same label
    010362  0a   010417 111637 
                                  6056  	swap		arg3			" order is now 1 2 3
    010363  aa   000000 140202 
                                  6057  	if		arg2,=,op1,jump_arith_13	" 1 & 3 are the same label
    010364  0a   010430 111637 
                                  6058  	if		arg3,=,op1,jump_arith_23	" 2 & 3 are the same label
    010365  0a   010437 151637 
                                  6059  
                                  6060  "				All labels are different
                                  6061  "
                                  6062  	if_next_statement	arg2,jump_arith_1next	" 1st label is next statement
    010366  0a   010400 100345 
                                  6063  	if_next_statement	arg3,jump_arith_2next	" 2nd label is next statement
    010367  0a   010405 140345 
                                  6064  	if_next_statement	arg4,jump_arith_3next	" 3rd label is next statement
    010370  0a   010412 200345 
                                  6065  
                                  6066  	save_state	arg2			" all labels are different and none
    010371  aa   000000 100356 
    010372  aa   100000 6040 00   6067  	tmi		arg2			" is next statement
                                  6068  	save_state	arg3
    010373  aa   000000 140356 
    010374  aa   140000 6000 00   6069  	tze		arg3
                                  6070  
    010375                        6071  jump_arith_all:					" all labels are the same but not
                                  6072  	save_state	arg4,discard		" the next statement
    010375  aa   000002 200356 
    010376  aa   200000 7100 00   6073  	tra		arg4
                                  6074  	return
    010377  aa   000000 000217 
                                  6075  
    010400                        6076  jump_arith_1next:					" all labels are different and 1st
                                  6077  	save_state	arg3			" is next statement
    010400  aa   000000 140356 
    010401  aa   140000 6000 00   6078  	tze		arg3
                                  6079  
    010402                        6080  jump_arith_to3:					" 1 & 2 are the next statement, but
                                  6081  	save_state	arg4			" 3 is not
    010402  aa   000000 200356 
    010403  aa   200000 6054 00   6082  	tpnz		arg4
                                  6083  	return
    010404  aa   000000 000217 
                                  6084  
    010405                        6085  jump_arith_2next:					" all labels are different and 2nd
                                  6086  	save_state	arg4			" is next_statement
    010405  aa   000000 200356 
    010406  aa   200000 6054 00   6087  	tpnz		arg4
                                  6088  
    010407                        6089  jump_arith_to1:					" 2 & 3 are the next statement, but
                                  6090  	save_state	arg2			" 1 is not
    010407  aa   000000 100356 
    010410  aa   100000 6040 00   6091  	tmi		arg2
                                  6092  	return
    010411  aa   000000 000217 
                                  6093  
    010412                        6094  jump_arith_3next:					" all labels are different and 3rd
                                  6095  	save_state	arg2			" is next statement
    010412  aa   000000 100356 
    010413  aa   100000 6040 00   6096  	tmi		arg2
                                  6097  
    010414                        6098  jump_arith_to2:					" 1 & 3 are the next statement, but
                                  6099  	save_state	arg3			" 2 is not
    010414  aa   000000 140356 
    010415  aa   140000 6000 00   6100  	tze		arg3
                                  6101  	return
    010416  aa   000000 000217 
                                  6102  
    010417                        6103  jump_arith_12:					" order is now 1 3 2
                                  6104  	swap		arg3			" restore order to 1 2 3
    010417  aa   000000 140202 
                                  6105  	unless		arg2,=,op1,jump_arith_12.c	" compare 1 and 3
    010420  0a   010423 111640 
                                  6106  	unless_next_statement	arg2,jump_arith_all
    010421  0a   010375 100346 
                                  6107  	return					" all jump to next statement
    010422  aa   000000 000217 
                                  6108  
    010423                        6109  jump_arith_12.c:
                                  6110  	if_next_statement	arg2,jump_arith_to3
    010423  0a   010402 100345 
                                  6111  
                                  6112  	save_state	arg2
    010424  aa   000000 100356 
    010425  aa   100000 6044 00   6113  	tmoz		arg2
                                  6114  	unless_next_statement	arg4,jump_arith_all
    010426  0a   010375 200346 
                                  6115  	return
    010427  aa   000000 000217 
                                  6116  
    010430                        6117  jump_arith_13:
                                  6118  	if_next_statement	arg2,jump_arith_to2
    010430  0a   010414 100345 
                                  6119  
                                  6120  	save_state	arg2
    010431  aa   000000 100356 
    010432  aa   100000 6010 00   6121  	tnz		arg2
                                  6122  	if_next_statement	arg3,jump_arith_return
    010433  0a   010464 140345 
                                  6123  
                                  6124  	save_state	arg3,discard
    010434  aa   000002 140356 
    010435  aa   140000 7100 00   6125  	tra		arg3
                                  6126  	return
    010436  aa   000000 000217 
                                  6127  
    010437                        6128  jump_arith_23:
                                  6129  	if_next_statement	arg3,jump_arith_to1
    010437  0a   010407 140345 
                                  6130  
                                  6131  	save_state	arg3
    010440  aa   000000 140356 
    010441  aa   140000 6050 00   6132  	tpl		arg3
                                  6133  
                                  6134  	if_next_statement	arg2,jump_arith_return
    010442  0a   010464 100345 
                                  6135  
                                  6136  	save_state	arg2,discard
    010443  aa   000002 100356 
    010444  aa   100000 7100 00   6137  	tra		arg2
                                  6138  	return
    010445  aa   000000 000217 
                                  6139  
                                  6140  
    010446                        6141  jump_arith_const:
                                  6142  	if_zero		op1,jump_arith_const2
    010446  0a   010460 740766 
                                  6143  	if_negative	op1,jump_arith_const1
    010447  0a   010454 740725 
                                  6144  	swap		arg1
    010450  aa   000000 040202 
                                  6145  	if_next_statement	arg4,jump_arith_return
    010451  0a   010464 200345 
    010452  aa   200000 7100 00   6146  	tra		arg4		" simple transfer
                                  6147  	return
    010453  aa   000000 000217 
                                  6148  
    010454                        6149  jump_arith_const1:
                                  6150  	swap		arg1
    010454  aa   000000 040202 
                                  6151  	if_next_statement	arg2,jump_arith_return
    010455  0a   010464 100345 
    010456  aa   100000 7100 00   6152  	tra		arg2
                                  6153  	return
    010457  aa   000000 000217 
                                  6154  
    010460                        6155  jump_arith_const2:
                                  6156  	swap		arg1
    010460  aa   000000 040202 
                                  6157  	if_next_statement	arg3,jump_arith_return
    010461  0a   010464 140345 
    010462  aa   140000 7100 00   6158  	tra		arg3
                                  6159  	return
    010463  aa   000000 000217 
                                  6160  	
    010464                        6161  jump_arith_return:
                                  6162  	return
    010464  aa   000000 000217 
                                  6163  
    010465                        6164  jump_arithmetic.e:
                                  6165  	error		325,op1
    010465  aa   000505 000702 
    010466  aa   000000 740303 
                        000001 
                                  6166  
    010467                        6167  jump_computed:
                                  6168  	proc		1		" <count>
    010467  aa   000000 000614 
                                  6169  "					Rest of operands are: label list, expre
                                  6170  
                                  6171  	shorten_stack
    010470  aa   000000 000272 
                                  6172  	refresh_regs
    010471  aa   000000 000261 
                                  6173  
                                  6174  	if		arg1,<,1,jc_list.p
    010472  0a   010540 040637 
                                  6175  
                                  6176  	push_label		" arg2 - label to skip goto, expre out-of-range
    010473  aa   000001 000206 
                                  6177  	push_label		" arg3 - address of transfer vector
    010474  aa   000001 000206 
                                  6178  
    010475                        6179  jump_computed.get_operands:		" loop to pick up label list and jump expression
                                  6180  	push_operand	jump_computed.stack_ready
    010475  0a   010477 000350 
                                  6181  	jump		jump_computed.get_operands
    010476  0a   010475 000220 
                                  6182  
    010477                        6183  jump_computed.stack_ready:		" <# lbls> <skip lbl> <vect lbl> <lbl list> <expre>
                                  6184  	dt_jump1		op1,(jump_computed_i,jump_computed_r,jump_computed_d,jump_computed_r,jump_computed.p,jump_computed.p,jump_computed.p)
    010477  aa   000007 740374 
    010500  00   010504 010506 
    010501  00   010510 010506 
    010502  00   010542 010542 
    010503  0a   010542 000000 
                        000007 
                                  6185  
    010504                        6186  jump_computed_i:
                                  6187  	load		q,op1
    010504  aa   000000 740656 
                                  6188  	jump		jc_transfer
    010505  0a   010511 000220 
                                  6189  
    010506                        6190  jump_computed_r:
                                  6191  	s_call		cv_load.ri
    010506  0a   002203 000223 
                                  6192  	jump		jc_transfer
    010507  0a   010511 000220 
                                  6193  
    010510                        6194  jump_computed_d:
                                  6195  	s_call		cv_load.di
    010510  0a   002223 000223 
                                  6196  
    010511                        6197  jc_transfer:
                                  6198  
                                  6199  	use_eaq		protect_indicators		" save all temps before transfer
    010511  aa   000001 000255 
                                  6200  
                                  6201  	increment		arg1,1	" adjust count so that compare is against
    010512  aa   000001 040263 
                                  6202  "				   arg1+1 and so that loops exclude <count copy>
                                  6203  
                                  6204  	compare		q,arg1
    010513  aa   000000 040751 
                                  6205  
                                  6206  	pop		op1		" expre no longer needed
    010514  aa   000000 740203 
                                  6207  
                                  6208  	copy		arg1	" <# lbls> <skip lbl> <vect lbl> <lbl list> <count>
    010515  aa   000000 040201 
                                  6209  
    010516                        6210  jc_save_state:
                                  6211  	copy		op1
    010516  aa   000000 740201 
                                  6212  	copy		opv
    010517  aa   000000 000201 
                                  6213  	save_state	op1
    010520  aa   000000 740356 
                                  6214  	pop		op1
    010521  aa   000000 740203 
                                  6215  	decrement		op1,1		" arg1 is saved for the next loop
    010522  aa   000001 740264 
                                  6216  	if		op1,>,1,jc_save_state
    010523  0a   010516 744637 
                                  6217  
    010524  aa   140000 6020 00   6218  	tnc		arg3
                                  6219  	force_ql			"forces last inst to be tnc  arg3,ql
    010525  aa   000053 000206 
                                  6220  
                                  6221  	label		arg3	" define beginning of transfer vector
    010526  aa   000000 140243 
    010527  aa   100000 7100 00   6222  	tra		arg2	" first word in transfer vector
                                  6223  
    010530                        6224  jc_labels:
                                  6225  	copy		arg1
    010530  aa   000000 040201 
                                  6226  
                                  6227  	copy		opv
    010531  aa   000000 000201 
    010532  aa   740000 7100 00   6228  	tra		op1
                                  6229  	pop		op1
    010533  aa   000000 740203 
                                  6230  
                                  6231  	decrement		arg1,1
    010534  aa   000001 040264 
                                  6232  	if		arg1,>,1,jc_labels
    010535  0a   010530 044637 
                                  6233  
    010536                        6234  jc_ret:
                                  6235  	label		arg2	" define skip label after computed goto code
    010536  aa   000000 100243 
                                  6236  	return
    010537  aa   000000 000217 
                                  6237  
    010540                        6238  jc_list.p:
                                  6239  	print		327
    010540  aa   000507 000301 
                        000000 
                                  6240  
                                  6241  	jump		jc_ret
    010541  0a   010536 000220 
                                  6242  
    010542                        6243  jump_computed.p:
                                  6244  	print		326,arg1
    010542  aa   000506 000701 
    010543  aa   000000 040303 
                        000001 
                                  6245  	return
    010544  aa   000000 000217 
                                  6246  
    010545                        6247  jump_assigned:
                                  6248  	proc		1
    010545  aa   000000 000614 
                                  6249  
                                  6250  	shorten_stack
    010546  aa   000000 000272 
                                  6251  	refresh_regs
    010547  aa   000000 000261 
                                  6252  
                                  6253  	unless_dt		int,jump_assigned.e
    010550  0a   010561 400226 
                                  6254  
                                  6255  	unless_array	jump_assigned.1
    010551  0a   010554 000231 
                                  6256  
                                  6257  	print		300,op1
    010552  aa   000454 000701 
    010553  aa   000000 740303 
                        000001 
                                  6258  
    010554                        6259  jump_assigned.1:
                                  6260  	use_eaq			" save all temps now
    010554  aa   000000 000255 
                                  6261  
    010555  aa   040000 2200 00   6262  	ldx0		arg1
                                  6263  
    010556  aa   000000 7100 10   6264  	tra		0,0
                                  6265  	discard_state
    010557  aa   000027 000206 
                                  6266  	return
    010560  aa   000000 000217 
                                  6267  
    010561                        6268  jump_assigned.e:
                                  6269  	print		301,op1
    010561  aa   000455 000701 
    010562  aa   000000 740303 
                        000001 
                                  6270  	return
    010563  aa   000000 000217 
                                  6271  
    010564                        6272  assign_label:
                                  6273  	proc		1
    010564  aa   000000 000614 
                                  6274  
                                  6275  	push_output
    010565  aa   000030 000206 
                                  6276  	unless_dt		int,assign_label.e
    010566  0a   010605 400226 
                                  6277  	unless_array	assign_label.1
    010567  0a   010572 000231 
                                  6278  
                                  6279  	print		300,op1
    010570  aa   000454 000701 
    010571  aa   000000 740303 
                        000001 
                                  6280  
    010572                        6281  assign_label.1:
                                  6282  	swap		arg1
    010572  aa   000000 040202 
                                  6283  	if_optype		rel_constant,assign_label.2
    010573  0a   010601 010227 
                                  6284  
                                  6285  	" The label is on a format statement.
                                  6286  
                                  6287  	load_pr		pr2,arg2
    010574  aa   000003 100251 
    010575  aa   040000 5420 00   6288  	sprp2		arg1
                                  6289  	flush_ref		arg1
    010576  aa   000000 040355 
                                  6290  	free_regs
    010577  aa   000004 000206 
                                  6291  	return
    010600  aa   000000 000217 
                                  6292  
                                  6293  	" The label is on an executable statement.
                                  6294  
    010601                        6295  assign_label.2:
    010601  aa   100000 6200 00   6296  	eax0		arg2
    010602  aa   040000 7400 00   6297  	stx0		arg1
                                  6298  	flush_ref		arg1
    010603  aa   000000 040355 
                                  6299  	return
    010604  aa   000000 000217 
                                  6300  
    010605                        6301  assign_label.e:
                                  6302  	print		301,op1
    010605  aa   000455 000701 
    010606  aa   000000 740303 
                        000001 
                                  6303  	return
    010607  aa   000000 000217 
                                  6304  
                                  6305  read:	proc		2
    010610  aa   000000 001214 
                                  6306  
                                  6307  	swap		arg1
    010611  aa   000000 040202 
                                  6308  
                                  6309  	unless_dt		int,read.p
    010612  0a   010622 400226 
                                  6310  
                                  6311  	swap		arg1
    010613  aa   000000 040202 
                                  6312  	load		q,arg1
    010614  aa   000000 040656 
    010615  aa   100000 2350 00   6313  	lda		arg2
                                  6314  	reserve_regs	(x6,pr1,pr2,pr3,pr4,pr5,pr7)
    010616  aa   005760 000250 
    010617  aa  0 01246 7001 00   6315  	tsx0		pr0|ftn_read
                                  6316  	free_regs
    010620  aa   000004 000206 
                                  6317  	return
    010621  aa   000000 000217 
                                  6318  
    010622                        6319  read.p:
                                  6320  	print		302,op1
    010622  aa   000456 000701 
    010623  aa   000000 740303 
                        000001 
                                  6321  	return
    010624  aa   000000 000217 
                                  6322  
                                  6323  write:	proc		2
    010625  aa   000000 001214 
                                  6324  
                                  6325  	swap		arg1
    010626  aa   000000 040202 
                                  6326  
                                  6327  	unless_dt		int,write.p
    010627  0a   010637 400226 
                                  6328  
                                  6329  	swap		arg1
    010630  aa   000000 040202 
                                  6330  	load		q,arg1
    010631  aa   000000 040656 
    010632  aa   100000 2350 00   6331  	lda		arg2
                                  6332  	reserve_regs	(x6,pr1,pr2,pr3,pr4,pr5,pr7)
    010633  aa   005760 000250 
    010634  aa  0 01247 7001 00   6333  	tsx0		pr0|ftn_write
                                  6334  	free_regs
    010635  aa   000004 000206 
                                  6335  	return
    010636  aa   000000 000217 
                                  6336  
    010637                        6337  write.p:
                                  6338  	print		302,op1
    010637  aa   000456 000701 
    010640  aa   000000 740303 
                        000001 
                                  6339  	return
    010641  aa   000000 000217 
                                  6340  
                                  6341  format:	proc		1
    010642  aa   000000 000614 
                                  6342  
                                  6343  	if_dt		char,format_c
    010643  0a   010660 010225 
                                  6344  	unless_dt		int,format.pp
    010644  0a   010654 400226 
                                  6345  	if_array		format_c
    010645  0a   010660 000631 
                                  6346  
                                  6347  	" Must be an integer variable defined with a format value in an
                                  6348  	" ASSIGN statement.  The variable will contain a packed pointer
                                  6349  	" which locates the format string.
                                  6350  
                                  6351  	reserve_regs	pr2
    010646  aa   000200 000250 
    010647  aa   040000 7620 00   6352  	lprp2		arg1
                                  6353  	push_builtin	ps
    010650  aa   000002 000213 
    010651  aa   740006 2520 00   6354  	spri2		op1+format_slot
                                  6355  	free_regs
    010652  aa   000004 000206 
                                  6356  	return
    010653  aa   000000 000217 
                                  6357  
    010654                        6358  format.pp:
                                  6359  	error		329,arg1
    010654  aa   000511 000702 
    010655  aa   000000 040303 
                        000001 
                                  6360  
    010656                        6361  format.pv:
                                  6362  	error		358,arg1
    010656  aa   000546 000702 
    010657  aa   000000 040303 
                        000001 
                                  6363  
    010660                        6364  format_c:
                                  6365  	if_VLA		arg1,format.pv	" cannot be a Very Large Array
    010660  0a   010656 040730 
                                  6366  	load_pr		pr2,arg1
    010661  aa   000003 040251 
                                  6367  	push_builtin	ps
    010662  aa   000002 000213 
    010663  aa   740006 2520 00   6368  	spri2		op1+format_slot
                                  6369  	free_regs
    010664  aa   000004 000206 
                                  6370  	return
    010665  aa   000000 000217 
                                  6371  
                                  6372  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  6373  
    010666                        6374  end_label:
                                  6375  	proc		1
    010666  aa   000000 000614 
                                  6376  	load_pr		pr5,arg1
    010667  aa   000005 040251 
                                  6377  	push_builtin	ps
    010670  aa   000002 000213 
    010671  aa   740014 6514 00   6378  	spri5		op1+end_label_slot
                                  6379  	free_regs
    010672  aa   000004 000206 
                                  6380  	return
    010673  aa   000000 000217 
                                  6381  
                                  6382  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  6383  
    010674                        6384  error_label:
                                  6385  	proc		1
    010674  aa   000000 000614 
                                  6386  
                                  6387  	load_pr		pr5,arg1
    010675  aa   000005 040251 
                                  6388  	push_builtin	ps
    010676  aa   000002 000213 
    010677  aa   740012 6514 00   6389  	spri5		op1+error_label_slot
                                  6390  	free_regs
    010700  aa   000004 000206 
                                  6391  	return
    010701  aa   000000 000217 
                                  6392  
    010702                        6393  read_scalar:
                                  6394  	proc		0
    010702  aa   000000 000214 
                                  6395  
                                  6396  	push_output
    010703  aa   000030 000206 
                                  6397  	flush_ref		arg1
    010704  aa   000000 040355 
                                  6398  	jump		scalar_common
    010705  0a   010707 000220 
                                  6399  
    010706                        6400  write_scalar:
                                  6401  	proc		1
    010706  aa   000000 000614 
                                  6402  
    010707                        6403  scalar_common:
                                  6404  
                                  6405  	use_eaq
    010707  aa   000000 000255 
                                  6406  
                                  6407  	bump		arg1
    010710  aa   000001 040363 
                                  6408  	load_pr		pr2,arg1
    010711  aa   000003 040251 
                                  6409  
                                  6410  	dt_jump1		op1,(xs_i,xs_r,xs_d,xs_c,xs_l,xs_h,xs_t)
    010712  aa   000007 740374 
    010713  00   010717 010721 
    010714  00   010723 010725 
    010715  00   010727 010731 
    010716  0a   010717 000000 
                        000007 
                                  6411  
    010717                        6412  xs_i:
    010717                        6413  xs_t:
    010717  aa   400000 2350 03   6414  	lda		=1b18,du		=o400000
                                  6415  	jump		xs_transfer
    010720  0a   010737 000220 
                                  6416  
    010721                        6417  xs_r:
    010721  aa   200000 2350 03   6418  	lda		=1b19,du		=o200000
                                  6419  	jump		xs_transfer
    010722  0a   010737 000220 
                                  6420  
    010723                        6421  xs_d:
    010723  aa   100000 2350 03   6422  	lda		=1b20,du		=o100000
                                  6423  	jump		xs_transfer
    010724  0a   010737 000220 
                                  6424  
    010725                        6425  xs_c:
    010725  aa   040000 2350 03   6426  	lda		=1b21,du		=o040000
                                  6427  	jump		xs_transfer
    010726  0a   010737 000220 
                                  6428  
    010727                        6429  xs_l:
    010727  aa   020000 2350 03   6430  	lda		=1b22,du		=o020000
                                  6431  	jump		xs_transfer
    010730  0a   010737 000220 
                                  6432  
    010731                        6433  xs_h:
                                  6434  	push_length	arg1
    010731  aa   000000 040304 
                                  6435  
                                  6436  	bump		op1
    010732  aa   000001 740363 
    010733  aa   740000 2350 00   6437  	lda		op1
                                  6438  
                                  6439  	emit_inst		1
    010734  aa   000001 040242 
    010735  aa   000004 7350 00   6440  	als		4
                                  6441  
    010736  aa   010000 2750 03   6442  	ora		4096,du		=o010000
                                  6443  
    010737                        6444  xs_transfer:
                                  6445  	reserve_regs	(x6,pr1,pr3,pr4,pr5,pr7)
    010737  aa   005560 000250 
    010740  aa  0 01251 7001 00   6446  	tsx0		pr0|ftn_scalar_xmit
                                  6447  	free_regs
    010741  aa   000004 000206 
                                  6448  	drop		arg1
    010742  aa   000001 040364 
                                  6449  	return
    010743  aa   000000 000217 
                                  6450  
    010744                        6451  read_array:
                                  6452  	proc		0
    010744  aa   000000 000214 
                                  6453  
                                  6454  	push_output
    010745  aa   000030 000206 
                                  6455  	flush_ref		op1
    010746  aa   000000 740355 
                                  6456  	jump		array_common
    010747  0a   010751 000220 
                                  6457  
    010750                        6458  write_array:
                                  6459  	proc		1
    010750  aa   000000 000614 
                                  6460  
    010751                        6461  array_common:
                                  6462  
                                  6463  	dt_jump1		op1,(xa_i,xa_r,xa_d,xa_c,xa_l,xa_h,xa_t)
    010751  aa   000007 740374 
    010752  00   010756 010763 
    010753  00   010770 010775 
    010754  00   011002 011007 
    010755  0a   010756 000000 
                        000007 
                                  6464  
    010756                        6465  xa_i:
    010756                        6466  xa_t:
                                  6467  	if_VLA		op1,xa_i_VLA
    010756  0a   010761 740730 
    010757  aa   404000 2350 03   6468  	lda		=65b24,du		=o404000
                                  6469  	jump		xa_transfer
    010760  0a   011015 000220 
                                  6470  
    010761                        6471  xa_i_VLA:
    010761  aa   406000 2350 03   6472  	lda		=o406000,du
                                  6473  	jump		xa_transfer
    010762  0a   011015 000220 
                                  6474  
    010763                        6475  xa_r:
                                  6476  	if_VLA		op1,xa_r_VLA
    010763  0a   010766 740730 
    010764  aa   204000 2350 03   6477  	lda		=33b24,du		=o204000
                                  6478  	jump		xa_transfer
    010765  0a   011015 000220 
                                  6479  
    010766                        6480  xa_r_VLA:
    010766  aa   206000 2350 03   6481  	lda		=o206000,du
                                  6482  	jump		xa_transfer
    010767  0a   011015 000220 
                                  6483  
    010770                        6484  xa_d:
                                  6485  	if_VLA		op1,xa_d_VLA
    010770  0a   010773 740730 
    010771  aa   104000 2350 03   6486  	lda		=17b24,du		=o104000
                                  6487  	jump		xa_transfer
    010772  0a   011015 000220 
                                  6488  
    010773                        6489  xa_d_VLA:
    010773  aa   106000 2350 03   6490  	lda		=o106000,du
                                  6491  	jump		xa_transfer
    010774  0a   011015 000220 
                                  6492  
    010775                        6493  xa_c:
                                  6494  	if_VLA		op1,xa_c_VLA
    010775  0a   011000 740730 
    010776  aa   044000 2350 03   6495  	lda		=9b24,du		=o044000
                                  6496  	jump		xa_transfer
    010777  0a   011015 000220 
                                  6497  
    011000                        6498  xa_c_VLA:
    011000  aa   046000 2350 03   6499  	lda		=o046000,du
                                  6500  	jump		xa_transfer
    011001  0a   011015 000220 
                                  6501  
    011002                        6502  xa_l:
                                  6503  	if_VLA		op1,xa_l_VLA
    011002  0a   011005 740730 
    011003  aa   024000 2350 03   6504  	lda		=5b24,du		=o024000
                                  6505  	jump		xa_transfer
    011004  0a   011015 000220 
                                  6506  
    011005                        6507  xa_l_VLA:
    011005  aa   026000 2350 03   6508  	lda		=o026000,du
                                  6509  	jump		xa_transfer
    011006  0a   011015 000220 
                                  6510  
    011007                        6511  xa_h:
                                  6512  	push_length	arg1
    011007  aa   000000 040304 
                                  6513  
                                  6514  	bump		op1
    011010  aa   000001 740363 
    011011  aa   740000 2350 00   6515  	lda		op1
                                  6516  
                                  6517  	emit_inst		1
    011012  aa   000001 040242 
    011013  aa   000004 7350 00   6518  	als		4
                                  6519  
    011014  aa   014000 2750 03   6520  	ora		6144,du		=o014000
                                  6521  
    011015                        6522  xa_transfer:
                                  6523  	push_array_size	arg1
    011015  aa   000000 040300 
                                  6524  	bump		arg1
    011016  aa   000001 040363 
                                  6525  	load_pr		pr2,arg1
    011017  aa   000003 040251 
    011020  aa   740000 2360 00   6526  	ldq		op1
                                  6527  
                                  6528  	reserve_regs	(x6,pr1,pr3,pr4,pr5,pr7)
    011021  aa   005560 000250 
    011022  aa  0 01252 7001 00   6529  	tsx0		pr0|ftn_array_xmit
                                  6530  	free_regs
    011023  aa   000004 000206 
                                  6531  	drop		arg1
    011024  aa   000001 040364 
                                  6532  	return
    011025  aa   000000 000217 
                                  6533  
    011026                        6534  read_vector:
                                  6535  	proc		1
    011026  aa   000000 000614 
                                  6536  
                                  6537  	push_output
    011027  aa   000030 000206 
                                  6538  	flush_ref		op1
    011030  aa   000000 740355 
                                  6539  	swap		arg1		"make consistent with write_vector
    011031  aa   000000 040202 
                                  6540  	jump		vector_common
    011032  0a   011034 000220 
                                  6541  
    011033                        6542  write_vector:
                                  6543  	proc		2
    011033  aa   000000 001214 
                                  6544  
    011034                        6545  vector_common:
                                  6546  	bump		arg1
    011034  aa   000001 040363 
                                  6547  
                                  6548  	load_pr		pr2,arg1
    011035  aa   000003 040251 
                                  6549  
                                  6550  	load		q,arg2		" collapsed implied loop provides the count
    011036  aa   000000 100656 
                                  6551  
                                  6552  	swap		arg1		"Note arguments remain swapped
    011037  aa   000000 040202 
                                  6553  
                                  6554  	dt_jump1		op1,(xv_i,xv_r,xv_d,xv_c,xv_l,xv_h,xv_t)
    011040  aa   000007 740374 
    011041  00   011045 011052 
    011042  00   011057 011064 
    011043  00   011071 011076 
    011044  0a   011045 000000 
                        000007 
                                  6555  
    011045                        6556  xv_i:
    011045                        6557  xv_t:
                                  6558  	if_VLA		op1,xv_i_VLA
    011045  0a   011050 740730 
    011046  aa   404000 2350 03   6559  	lda		=65b24,du		=o404000
                                  6560  	jump		xv_transfer
    011047  0a   011105 000220 
                                  6561  
    011050                        6562  xv_i_VLA:
    011050  aa   406000 2350 03   6563  	lda		=o406000,du
                                  6564  	jump		xv_transfer
    011051  0a   011105 000220 
                                  6565  
    011052                        6566  xv_r:
                                  6567  	if_VLA		op1,xv_r_VLA
    011052  0a   011055 740730 
    011053  aa   204000 2350 03   6568  	lda		=33b24,du		=o204000
                                  6569  	jump		xv_transfer
    011054  0a   011105 000220 
                                  6570  
    011055                        6571  xv_r_VLA:
    011055  aa   206000 2350 03   6572  	lda		=o206000,du
                                  6573  	jump		xv_transfer
    011056  0a   011105 000220 
                                  6574  
    011057                        6575  xv_d:
                                  6576  	if_VLA		op1,xv_d_VLA
    011057  0a   011062 740730 
    011060  aa   104000 2350 03   6577  	lda		=17b24,du		=o104000
                                  6578  	jump		xv_transfer
    011061  0a   011105 000220 
                                  6579  
    011062                        6580  xv_d_VLA:
    011062  aa   106000 2350 03   6581  	lda		=o106000,du
                                  6582  	jump		xv_transfer
    011063  0a   011105 000220 
                                  6583  
    011064                        6584  xv_c:
                                  6585  	if_VLA		op1,xv_c_VLA
    011064  0a   011067 740730 
    011065  aa   044000 2350 03   6586  	lda		=9b24,du		=o044000
                                  6587  	jump		xv_transfer
    011066  0a   011105 000220 
                                  6588  
    011067                        6589  xv_c_VLA:
    011067  aa   046000 2350 03   6590  	lda		=o046000,du
                                  6591  	jump		xv_transfer
    011070  0a   011105 000220 
                                  6592  
    011071                        6593  xv_l:
                                  6594  	if_VLA		op1,xv_l_VLA
    011071  0a   011074 740730 
    011072  aa   024000 2350 03   6595  	lda		=5b24,du		=o024000
                                  6596  	jump		xv_transfer
    011073  0a   011105 000220 
                                  6597  
    011074                        6598  xv_l_VLA:
    011074  aa   026000 2350 03   6599  	lda		=o026000,du
                                  6600  	jump		xv_transfer
    011075  0a   011105 000220 
                                  6601  
    011076                        6602  xv_h:
                                  6603  	push_length	arg2
    011076  aa   000000 100304 
                                  6604  
                                  6605  	bump		op1
    011077  aa   000001 740363 
    011100  aa   740000 2350 00   6606  	lda		op1
                                  6607  
                                  6608  	emit_inst		1
    011101  aa   000001 040242 
    011102  aa   000004 7350 00   6609  	als		4
                                  6610  
    011103  aa   014000 2750 03   6611  	ora		6144,du		=o014000
                                  6612  	pop		op1
    011104  aa   000000 740203 
                                  6613  
    011105                        6614  xv_transfer:
                                  6615  
                                  6616  	reserve_regs	(x6,pr1,pr3,pr4,pr5,pr7)
    011105  aa   005560 000250 
    011106  aa  0 01252 7001 00   6617  	tsx0		pr0|ftn_array_xmit
                                  6618  	free_regs
    011107  aa   000004 000206 
                                  6619  	drop		op1
    011110  aa   000001 740364 
                                  6620  	return
    011111  aa   000000 000217 
                                  6621  
                                  6622  endfile:	proc		2
    011112  aa   000000 001214 
                                  6623  
                                  6624  	swap		arg1
    011113  aa   000000 040202 
                                  6625  	unless_dt		int,endfile.p
    011114  0a   011123 400226 
                                  6626  
                                  6627  	load		q,arg2
    011115  aa   000000 100656 
    011116  aa   040000 2350 00   6628  	lda		arg1
                                  6629  	reserve_regs	(x6,pr1,pr2,pr3,pr4,pr5,pr7)
    011117  aa   005760 000250 
    011120  aa  0 01250 7001 00   6630  	tsx0		pr0|ftn_manip
                                  6631  	free_regs
    011121  aa   000004 000206 
                                  6632  	return
    011122  aa   000000 000217 
                                  6633  
    011123                        6634  endfile.p:
                                  6635  	print		302,op1
    011123  aa   000456 000701 
    011124  aa   000000 740303 
                        000001 
                                  6636  	return
    011125  aa   000000 000217 
                                  6637  
                                  6638  rewind:	proc		2
    011126  aa   000000 001214 
                                  6639  
                                  6640  	swap		arg1
    011127  aa   000000 040202 
                                  6641  	unless_dt		int,rewind.p
    011130  0a   011137 400226 
                                  6642  
                                  6643  	load		q,arg2
    011131  aa   000000 100656 
    011132  aa   040000 2350 00   6644  	lda		arg1
                                  6645  	reserve_regs	(x6,pr1,pr2,pr3,pr4,pr5,pr7)
    011133  aa   005760 000250 
    011134  aa  0 01250 7001 00   6646  	tsx0		pr0|ftn_manip
                                  6647  	free_regs
    011135  aa   000004 000206 
                                  6648  	return
    011136  aa   000000 000217 
                                  6649  
    011137                        6650  rewind.p:
                                  6651  	print		302,op1
    011137  aa   000456 000701 
    011140  aa   000000 740303 
                        000001 
                                  6652  	return
    011141  aa   000000 000217 
                                  6653  
    011142                        6654  backspace:
                                  6655  	proc		2
    011142  aa   000000 001214 
                                  6656  
                                  6657  	swap		arg1
    011143  aa   000000 040202 
                                  6658  	unless_dt		int,backspace.p
    011144  0a   011153 400226 
                                  6659  
                                  6660  	load		q,arg2
    011145  aa   000000 100656 
    011146  aa   040000 2350 00   6661  	lda		arg1
                                  6662  	reserve_regs	(x6,pr1,pr2,pr3,pr4,pr5,pr7)
    011147  aa   005760 000250 
    011150  aa  0 01250 7001 00   6663  	tsx0		pr0|ftn_manip
                                  6664  	free_regs
    011151  aa   000004 000206 
                                  6665  	return
    011152  aa   000000 000217 
                                  6666  
    011153                        6667  backspace.p:
                                  6668  	print		302,op1
    011153  aa   000456 000701 
    011154  aa   000000 740303 
                        000001 
                                  6669  	return
    011155  aa   000000 000217 
                                  6670  
                                  6671  margin:	proc		2
    011156  aa   000000 001214 
                                  6672  
                                  6673  	unless_dt		int,margin2.p
    011157  0a   011177 400226 
                                  6674  	swap		arg1
    011160  aa   000000 040202 
                                  6675  	unless_dt		int,margin1.p
    011161  0a   011174 400226 
                                  6676  	swap		arg1
    011162  aa   000000 040202 
                                  6677  
                                  6678  	load		q,arg1
    011163  aa   000000 040656 
                                  6679  	push_builtin	ps
    011164  aa   000002 000213 
    011165  aa   100000 2350 00   6680  	lda		arg2
    011166  aa   740034 7550 00   6681  	sta		op1+margin_slot
    011167  aa   001400 2350 03   6682  	lda		=3b27,du		=o001400
                                  6683  	reserve_regs	(x6,pr1,pr2,pr3,pr4,pr5,pr7)
    011170  aa   005760 000250 
    011171  aa  0 01250 7001 00   6684  	tsx0		pr0|ftn_manip
                                  6685  	free_regs
    011172  aa   000004 000206 
                                  6686  	return
    011173  aa   000000 000217 
                                  6687  
    011174                        6688  margin1.p:
                                  6689  	print		302,op1
    011174  aa   000456 000701 
    011175  aa   000000 740303 
                        000001 
                                  6690  	return
    011176  aa   000000 000217 
                                  6691  
    011177                        6692  margin2.p:
                                  6693  	print		331,op1
    011177  aa   000513 000701 
    011200  aa   000000 740303 
                        000001 
                                  6694  	return
    011201  aa   000000 000217 
                                  6695  
                                  6696  openfile:	proc		3
    011202  aa   000000 001614 
                                  6697  
                                  6698  	swap		arg1
    011203  aa   000000 040202 
                                  6699  	unless_dt		int,openfile1.p
    011204  0a   011232 400226 
                                  6700  	swap		arg1
    011205  aa   000000 040202 
                                  6701  	swap		arg2
    011206  aa   000000 100202 
                                  6702  	unless_dt		char,openfile2.p
    011207  0a   011235 010226 
                                  6703  	if_array		openfile2.p
    011210  0a   011235 000631 
                                  6704  	swap		arg2
    011211  aa   000000 100202 
                                  6705  	unless_dt		char,openfile3.p
    011212  0a   011240 010226 
                                  6706  	if_array		openfile3.p
    011213  0a   011240 000631 
                                  6707  
                                  6708  	push_length	arg2
    011214  aa   000000 100304 
                                  6709  	push_builtin	ps
    011215  aa   000002 000213 
                                  6710  	load_pr		pr2,arg2
    011216  aa   000003 100251 
    011217  aa   740036 2520 00   6711  	spri2		op1+file_name_slot
                                  6712  	load_pr		pr2,arg3
    011220  aa   000003 140251 
    011221  aa   740040 2520 00   6713  	spri2		op1+file_type_slot
    011222  aa   700000 2350 00   6714  	lda		op2
    011223  aa   740025 7550 00   6715  	sta		op1+string_length_slot
    011224  aa   001200 2350 03   6716  	lda		=5b28,du		=o001200
                                  6717  	load		q,arg1
    011225  aa   000000 040656 
                                  6718  	reserve_regs	(x6,pr1,pr3,pr4,pr5,pr7)
    011226  aa   005560 000250 
    011227  aa  0 01250 7001 00   6719  	tsx0		pr0|ftn_manip
                                  6720  	free_regs
    011230  aa   000004 000206 
                                  6721  	return
    011231  aa   000000 000217 
                                  6722  
    011232                        6723  openfile1.p:
                                  6724  	print		302,op1
    011232  aa   000456 000701 
    011233  aa   000000 740303 
                        000001 
                                  6725  	return
    011234  aa   000000 000217 
                                  6726  
    011235                        6727  openfile2.p:
                                  6728  	print		332,op1
    011235  aa   000514 000701 
    011236  aa   000000 740303 
                        000001 
                                  6729  	return
    011237  aa   000000 000217 
                                  6730  
    011240                        6731  openfile3.p:
                                  6732  	print		333,op1
    011240  aa   000515 000701 
    011241  aa   000000 740303 
                        000001 
                                  6733  	return
    011242  aa   000000 000217 
                                  6734  
    011243                        6735  open:
    011243                        6736  close:
                                  6737  	proc		4
    011243  aa   000000 002214 
                                  6738  
                                  6739  "			arg1 - file number expre. must be integer
                                  6740  "			arg2 - job_bits const generated by compiler.
                                  6741  "			arg3 - open/close stmnt const generated by compiler.
                                  6742  "			arg4 - A count. Number of fields that follow. (This count is never used.
                                  6743  "				In fact, it is overwritten by the ps_area_ptr builtin.)
                                  6744  "			arg5 to argN - Pairs of values. They are processed top down and then
                                  6745  "				popped off the stack.
                                  6746  "			     op2 - A value. See individual field (below) for data type, etc.
                                  6747  "			     op1 - A count. Implementation defined index value for the field.
                                  6748  
                                  6749  	use_eaq
    011244  aa   000000 000255 
                                  6750  	reserve_regs	(x6,pr1,pr2,pr3,pr4,pr5,pr7)
    011245  aa   005760 000250 
    011246  aa  0 01440 7001 00   6751  	tsx0		pr0|ftn_get_area_ptr	" returns ptr in PS.buffer_p
                                  6752  	free_regs
    011247  aa   000004 000206 
                                  6753  
                                  6754  "		Make the ps_area_ptr builtin arg4. Pop original arg4.
                                  6755  
                                  6756  	pop		op1
    011250  aa   000000 740203 
                                  6757  	push_builtin	ps_area_ptr
    011251  aa   000012 000213 
                                  6758  
    011252  aa   140000 2350 00   6759  	lda		arg3		" fields-specified bit string
                                  6760  	emit_inst		1
    011253  aa   000001 040242 
    011254  aa   000000 6210 00   6761  	eax1		0		" index value for fields-specified bit string
                                  6762  
                                  6763  	load_pr_value	pr3,arg4		" load pr3
    011255  aa   000004 200360 
    011256  aa  0 01437 7001 00   6764  	tsx0		pr0|ftn_open_element
                                  6765  
                                  6766  "		Note - This loop is order sensitive. As it processes a pair of values on the stack,
                                  6767  "			they are popped. The loop terminates when arg4 is the top of the stack.
                                  6768  
    011257                        6769  open_loop:
                                  6770  	push_operand	open_return	" if no more, then done
    011257  0a   011346 000350 
                                  6771  	push_operand	open_loop.e	" if no more, then error
    011260  0a   011330 000350 
                                  6772  
                                  6773  	jump_indexed	op1,(opencase1,opencase2,opencase3,opencase4,opencase5,opencase6,opencase7,opencase8,opencase9,opencase10,opencase11,opencase12,opencase13,opencase14)
    011261  aa   000016 740241 
    011262  00   011271 011271 
    011263  00   011271 011271 
    011264  00   011271 011271 
    011265  00   011271 011304 
    011266  00   011314 011314 
    011267  00   011314 011314 
    011270  00   011271 011324 
                        000016 
                                  6774  
    011271                        6775  opencase1:		" status
    011271                        6776  opencase2:		" io switch
    011271                        6777  opencase3:		" attach
    011271                        6778  opencase4:		" file
    011271                        6779  opencase5:		" mode
    011271                        6780  opencase6:		" access
    011271                        6781  opencase7:		" form
    011271                        6782  opencase13:		" blank
                                  6783  	swap		op2			" check data type
    011271  aa   000000 700202 
                                  6784  	unless_dt		char,open_loop1.p
    011272  0a   011332 010226 
                                  6785  	push_length	op1
    011273  aa   000000 740304 
                                  6786  	load_pr		pr2,op2			" point to string
    011274  aa   000003 700251 
                                  6787  	load_pr_value	pr3,arg4			" reloads pr3 only if necessary
    011275  aa   000004 200360 
                                  6788  	load		q,op1			" load string length
    011276  aa   000000 740656 
    011277  aa   640000 6210 00   6789  	eax1		op3			" load index value into xr
                                  6790  
    011300  aa  0 01437 7001 00   6791  	tsx0		pr0|ftn_open_element
                                  6792  	free_regs
    011301  aa   000004 000206 
                                  6793  	pop		op3			" pop all three things
    011302  aa   000000 640203 
                                  6794  	jump		open_loop
    011303  0a   011257 000220 
                                  6795  
    011304                        6796  opencase8:		" recl
                                  6797  	swap		op2			" check data type
    011304  aa   000000 700202 
                                  6798  	unless_dt		int,open_loop2.p
    011305  0a   011336 400226 
                                  6799  
                                  6800  	load		q,op1			" load the value
    011306  aa   000000 740656 
                                  6801  
                                  6802  	load_pr_value	pr3,arg4			" reloads pr3 only if necessary
    011307  aa   000004 200360 
                                  6803  
    011310  aa   700000 6210 00   6804  	eax1		op2			" load index value into xr
                                  6805  
    011311  aa  0 01437 7001 00   6806  	tsx0		pr0|ftn_open_element
                                  6807  	pop		op2			" pop value and index
    011312  aa   000000 700203 
                                  6808  	jump		open_loop
    011313  0a   011257 000220 
                                  6809  
    011314                        6810  opencase9:		" binary
    011314                        6811  opencase10:		" prompt
    011314                        6812  opencase11:		" carriage
    011314                        6813  opencase12:		" defer
                                  6814  	swap		op2			" check data type
    011314  aa   000000 700202 
                                  6815  
                                  6816  	unless_dt		logical,open_loop3.p
    011315  0a   011342 020226 
                                  6817  
                                  6818  	load		a,op1
    011316  aa   000000 741256 
                                  6819  
                                  6820  	load_pr_value	pr3,arg4			" reloads pr3 only if necessary
    011317  aa   000004 200360 
                                  6821  
    011320  aa   700000 6210 00   6822  	eax1		op2			" load index value into xr
                                  6823  
    011321  aa  0 01437 7001 00   6824  	tsx0		pr0|ftn_open_element
                                  6825  	pop		op2			" pop value and index
    011322  aa   000000 700203 
                                  6826  	jump		open_loop
    011323  0a   011257 000220 
                                  6827  
    011324                        6828  opencase14:		" unit
                                  6829  	swap		op2
    011324  aa   000000 700202 
                                  6830  	swap		arg1
    011325  aa   000000 040202 
                                  6831  	pop		op2
    011326  aa   000000 700203 
                                  6832  	jump		open_loop
    011327  0a   011257 000220 
                                  6833  
    011330                        6834  open_loop.e:
                                  6835  	print		349
    011330  aa   000535 000301 
                        000000 
                                  6836  	return
    011331  aa   000000 000217 
                                  6837  
    011332                        6838  open_loop1.p:
                                  6839  	print		351,op1
    011332  aa   000537 000701 
    011333  aa   000000 740303 
                        000001 
                                  6840  	pop		op2
    011334  aa   000000 700203 
                                  6841  	jump		open_loop
    011335  0a   011257 000220 
                                  6842  
    011336                        6843  open_loop2.p:
                                  6844  	print		352,op1
    011336  aa   000540 000701 
    011337  aa   000000 740303 
                        000001 
                                  6845  	pop		op2
    011340  aa   000000 700203 
                                  6846  	jump		open_loop
    011341  0a   011257 000220 
                                  6847  
    011342                        6848  open_loop3.p:
                                  6849  	print		353,op1
    011342  aa   000541 000701 
    011343  aa   000000 740303 
                        000001 
                                  6850  	pop		op2
    011344  aa   000000 700203 
                                  6851  	jump		open_loop
    011345  0a   011257 000220 
                                  6852  
    011346                        6853  open_return:
                                  6854  	swap		arg1			" get file number expre.
    011346  aa   000000 040202 
                                  6855  	unless_dt		int,open.p		" must be integer
    011347  0a   011356 400226 
                                  6856  	load		q,op1
    011350  aa   000000 740656 
    011351  aa   100000 2350 00   6857  	lda		arg2
                                  6858  	reserve_regs	(x6,pr1,pr2,pr3,pr4,pr5,pr7)
    011352  aa   005760 000250 
    011353  aa  0 01250 7001 00   6859  	tsx0		pr0|ftn_manip
                                  6860  	free_regs
    011354  aa   000004 000206 
                                  6861  	return
    011355  aa   000000 000217 
                                  6862  
    011356                        6863  open.p:
                                  6864  	print		302,op1
    011356  aa   000456 000701 
    011357  aa   000000 740303 
                        000001 
                                  6865  	return
    011360  aa   000000 000217 
                                  6866  
    011361                        6867  inquire:
                                  6868  	proc		3
    011361  aa   000000 001614 
                                  6869  
                                  6870  	" arg1 - job bits
                                  6871  	" arg2 - fields specified mask
                                  6872  	" arg3 - field count
                                  6873  
                                  6874  	" First get pointer to work area.
                                  6875  
                                  6876  	use_eaq
    011362  aa   000000 000255 
                                  6877  	reserve_regs	(x6,pr1,pr2,pr3,pr4,pr5,pr7)
    011363  aa   005760 000250 
    011364  aa  0 01440 7001 00   6878  	tsx0		pr0|ftn_get_area_ptr
                                  6879  	free_regs
    011365  aa   000004 000206 
                                  6880  
                                  6881  	pop		op1		" Pop field count
    011366  aa   000000 740203 
                                  6882  	push_builtin	ps_area_ptr	" This becomes arg3
    011367  aa   000012 000213 
                                  6883  
                                  6884  	" Next emit fields-specified mask.
                                  6885  
    011370  aa   100000 2350 00   6886  	lda		arg2		" The mask
                                  6887  	emit_inst		1
    011371  aa   000001 040242 
    011372  aa   000000 6210 00   6888  	eax1		0		" The field index
                                  6889  
                                  6890  	load_pr_value	pr3,arg3		" Load pr3 with area pointer
    011373  aa   000004 140360 
    011374  aa  0 01466 7001 00   6891  	tsx0		pr0|ftn_inquire_element
                                  6892  
                                  6893  	" Loop over the remaining operand pairs, of the form (datum, index).
                                  6894  	" As each pair is processed, it is popped from the stack.
                                  6895  
    011375                        6896  inquire_loop:
                                  6897  	push_operand	inquire_return	" Done if no more opnds
    011375  0a   011503 000350 
                                  6898  	push_operand	inquire_loop.e	" Error if no more opnds
    011376  0a   011465 000350 
                                  6899  
                                  6900  	jump_indexed	op1,(inquire_case_1,inquire_case_2,inquire_case_3,inquire_case_4,inquire_case_5,inquire_case_6,inquire_case_7,inquire_case_8,inquire_case_9,inquire_case_10,inquire_case_11,inquire_case_12,inquire_case_13,inquire_case_14,inquire_case_15,inquire_case_16,inquire_case_17,inquire_case_18,inquire_case_19,inquire_case_20,inquire_case_21,inquire_case_22,inquire_case_23,inquire_case_24,inquire_case_25,inquire_case_26)
    011377  aa   000032 740241 
    011400  00   011462 011462 
    011401  00   011462 011415 
    011402  00   011462 011415 
    011403  00   011415 011430 
    011404  00   011462 011462 
    011405  00   011462 011462 
    011406  00   011415 011441 
    011407  00   011462 011462 
    011410  00   011451 011451 
    011411  00   011430 011451 
    011412  00   011415 011415 
    011413  00   011415 011415 
    011414  00   011430 011415 
                        000032 
                                  6901  
                                  6902  
    011415                        6903  inquire_case_4:		" file
    011415                        6904  inquire_case_6:		" access
    011415                        6905  inquire_case_7:		" form
    011415                        6906  inquire_case_13:		" blank
    011415                        6907  inquire_case_21:		" name
    011415                        6908  inquire_case_22:		" sequential
    011415                        6909  inquire_case_23:		" formatted
    011415                        6910  inquire_case_24:		" unformatted
    011415                        6911  inquire_case_26:		" direct
                                  6912  
                                  6913  	" First check data type.
                                  6914  
                                  6915  	swap		op2
    011415  aa   000000 700202 
                                  6916  	unless_dt		char,inquire_loop.not_char
    011416  0a   011467 010226 
                                  6917  
                                  6918  	" Load pointer to string in pr2, length of string in Q.
                                  6919  
                                  6920  	push_length	op1
    011417  aa   000000 740304 
                                  6921  	load_pr		pr2,op2
    011420  aa   000003 700251 
                                  6922  	load		q,op1
    011421  aa   000000 740656 
                                  6923  
                                  6924  	load_pr_value	pr3,arg3		" Reload pr3 if necessary
    011422  aa   000004 140360 
    011423  aa   640000 6210 00   6925  	eax1		op3		" Load field index
    011424  aa  0 01466 7001 00   6926  	tsx0		pr0|ftn_inquire_element
                                  6927  	free_regs
    011425  aa   000004 000206 
                                  6928  
                                  6929  	pop		op3		" Pop all three operands
    011426  aa   000000 640203 
                                  6930  	jump		inquire_loop
    011427  0a   011375 000220 
                                  6931  
                                  6932  
    011430                        6933  inquire_case_8:		" recl
    011430                        6934  inquire_case_19:		" number
    011430                        6935  inquire_case_25:		" nextrec
                                  6936  
                                  6937  	" First check data type.
                                  6938  
                                  6939  	swap		op2
    011430  aa   000000 700202 
                                  6940  	unless_dt		int,inquire_loop.not_int
    011431  0a   011473 400226 
                                  6941  
                                  6942  	load_pr		pr2,op1		" Load pointer to datum
    011432  aa   000003 740251 
                                  6943  
                                  6944  	load_pr_value	pr3,arg3		" Reload pr3 if necessary
    011433  aa   000004 140360 
    011434  aa   700000 6210 00   6945  	eax1		op2		" Load field index
    011435  aa  0 01466 7001 00   6946  	tsx0		pr0|ftn_inquire_element
                                  6947  	free_regs
    011436  aa   000004 000206 
                                  6948  
                                  6949  	pop		op2		" Pop both operands
    011437  aa   000000 700203 
                                  6950  	jump		inquire_loop
    011440  0a   011375 000220 
                                  6951  
                                  6952  
    011441                        6953  inquire_case_14:		" unit
                                  6954  
                                  6955  	" First check data type.
                                  6956  
                                  6957  	swap		op2
    011441  aa   000000 700202 
                                  6958  	unless_dt		int,inquire_loop.not_int
    011442  0a   011473 400226 
                                  6959  
                                  6960  	load		q,op1		" Load unit number in Q
    011443  aa   000000 740656 
                                  6961  
                                  6962  	load_pr_value	pr3,arg3		" Reload pr3 if necessary
    011444  aa   000004 140360 
    011445  aa   700000 6210 00   6963  	eax1		op2		" Load field index
    011446  aa  0 01466 7001 00   6964  	tsx0		pr0|ftn_inquire_element
                                  6965  
                                  6966  	pop		op2		" Pop both operands
    011447  aa   000000 700203 
                                  6967  	jump		inquire_loop
    011450  0a   011375 000220 
                                  6968  
                                  6969  
    011451                        6970  inquire_case_17:		" exist
    011451                        6971  inquire_case_18:		" opened
    011451                        6972  inquire_case_20:		" named
                                  6973  
                                  6974  	" First check data type.
                                  6975  
                                  6976  	swap		op2
    011451  aa   000000 700202 
                                  6977  	unless_dt		logical,inquire_loop.not_logical
    011452  0a   011477 020226 
                                  6978  
                                  6979  	load_pr		pr2,op1		" Load pointer to datum
    011453  aa   000003 740251 
                                  6980  
                                  6981  	load_pr_value	pr3,arg3		" Reload pr3 if necessary
    011454  aa   000004 140360 
    011455  aa   700000 6210 00   6982  	eax1		op2		" Load field index
    011456  aa  0 01466 7001 00   6983  	tsx0		pr0|ftn_inquire_element
                                  6984  	free_regs
    011457  aa   000004 000206 
                                  6985  
                                  6986  	pop		op2		" Pop both operands
    011460  aa   000000 700203 
                                  6987  	jump		inquire_loop
    011461  0a   011375 000220 
                                  6988  
                                  6989  
    011462                        6990  inquire_case_1:		" Invalid inquire fields
    011462                        6991  inquire_case_2:
    011462                        6992  inquire_case_3:
    011462                        6993  inquire_case_5:
    011462                        6994  inquire_case_9:
    011462                        6995  inquire_case_10:
    011462                        6996  inquire_case_11:
    011462                        6997  inquire_case_12:
    011462                        6998  inquire_case_15:
    011462                        6999  inquire_case_16:
                                  7000  	print		357,op1
    011462  aa   000545 000701 
    011463  aa   000000 740303 
                        000001 
                                  7001  	return
    011464  aa   000000 000217 
                                  7002  
                                  7003  
    011465                        7004  inquire_loop.e:
                                  7005  	print		356
    011465  aa   000544 000301 
                        000000 
                                  7006  	return
    011466  aa   000000 000217 
                                  7007  
                                  7008  
    011467                        7009  inquire_loop.not_char:
                                  7010  	print		351,op1
    011467  aa   000537 000701 
    011470  aa   000000 740303 
                        000001 
                                  7011  	pop		op2
    011471  aa   000000 700203 
                                  7012  	jump		inquire_loop
    011472  0a   011375 000220 
                                  7013  
                                  7014  
    011473                        7015  inquire_loop.not_int:
                                  7016  	print		352,op1
    011473  aa   000540 000701 
    011474  aa   000000 740303 
                        000001 
                                  7017  	pop		op2
    011475  aa   000000 700203 
                                  7018  	jump		inquire_loop
    011476  0a   011375 000220 
                                  7019  
                                  7020  
    011477                        7021  inquire_loop.not_logical:
                                  7022  	print		353,op1
    011477  aa   000541 000701 
    011500  aa   000000 740303 
                        000001 
                                  7023  	pop		op2
    011501  aa   000000 700203 
                                  7024  	jump		inquire_loop
    011502  0a   011375 000220 
                                  7025  
                                  7026  
    011503                        7027  inquire_return:
                                  7028  	push_count	0		" Dummy unit number
    011503  aa   000000 000266 
                                  7029  	load		q,op1		" Get unit in Q
    011504  aa   000000 740656 
    011505  aa   040000 2350 00   7030  	lda		arg1		" Get job bits in A
                                  7031  	reserve_regs	(x6,pr1,pr2,pr3,pr4,pr5,pr7)
    011506  aa   005760 000250 
    011507  aa  0 01250 7001 00   7032  	tsx0		pr0|ftn_manip
                                  7033  	free_regs
    011510  aa   000004 000206 
                                  7034  	return
    011511  aa   000000 000217 
                                  7035  
    011512                        7036  closefile:
                                  7037  	proc		1
    011512  aa   000000 000614 
                                  7038  
                                  7039  	unless_dt		int,closefile.p
    011513  0a   011522 400226 
                                  7040  
                                  7041  	load		q,arg1
    011514  aa   000000 040656 
    011515  aa   000600 2350 03   7042  	lda		=3b28,du		=o000600
                                  7043  	reserve_regs	(x6,pr1,pr2,pr3,pr4,pr5,pr7)
    011516  aa   005760 000250 
    011517  aa  0 01250 7001 00   7044  	tsx0		pr0|ftn_manip
                                  7045  	free_regs
    011520  aa   000004 000206 
                                  7046  	return
    011521  aa   000000 000217 
                                  7047  
    011522                        7048  closefile.p:
                                  7049  	print		302,arg1
    011522  aa   000456 000701 
    011523  aa   000000 040303 
                        000001 
                                  7050  	return
    011524  aa   000000 000217 
                                  7051  
    011525                        7052  iostat:
                                  7053  	proc		0
    011525  aa   000000 000214 
                                  7054  
                                  7055  	push_output
    011526  aa   000030 000206 
                                  7056  	unless_dt		int,iostat.p
    011527  0a   011535 400226 
                                  7057  
                                  7058  	push_builtin	ps
    011530  aa   000002 000213 
                                  7059  	load_pr		pr2,arg1
    011531  aa   000003 040251 
    011532  aa   740056 2520 00   7060  	spri2		op1+iostat_slot
                                  7061  	free_regs
    011533  aa   000004 000206 
                                  7062  
                                  7063  	return
    011534  aa   000000 000217 
                                  7064  
    011535                        7065  iostat.p:
                                  7066  	print		350,op1
    011535  aa   000536 000701 
    011536  aa   000000 740303 
                        000001 
                                  7067  	return
    011537  aa   000000 000217 
                                  7068  
    011540                        7069  record_number:
                                  7070  	proc		1
    011540  aa   000000 000614 
                                  7071  
                                  7072  	unless_dt		int,record_number.p
    011541  0a   011546 400226 
                                  7073  
                                  7074  	load		q,arg1
    011542  aa   000000 040656 
                                  7075  	push_builtin	ps
    011543  aa   000002 000213 
    011544  aa   740011 7560 00   7076  	stq		op1+record_number_slot
                                  7077  	return
    011545  aa   000000 000217 
                                  7078  
    011546                        7079  record_number.p:
                                  7080  	print		304,arg1
    011546  aa   000460 000701 
    011547  aa   000000 040303 
                        000001 
                                  7081  	return
    011550  aa   000000 000217 
                                  7082  
    011551                        7083  encode_string:
                                  7084  	proc		0
    011551  aa   000000 000214 
                                  7085  	push_output
    011552  aa   000030 000206 
                                  7086  	jump		string_common
    011553  0a   011555 000220 
                                  7087  
    011554                        7088  decode_string:
    011554                        7089  string:
                                  7090  	proc		1
    011554  aa   000000 000614 
                                  7091  
    011555                        7092  string_common:
                                  7093  	unless_dt		logical,string_c
    011555  0a   011560 020226 
                                  7094  
                                  7095  	print		305,arg1
    011556  aa   000461 000701 
    011557  aa   000000 040303 
                        000001 
                                  7096  
    011560                        7097  string_c:
                                  7098  	load_pr		pr2,arg1
    011560  aa   000003 040251 
                                  7099  	push_builtin	ps
    011561  aa   000002 000213 
    011562  aa   740020 2520 00   7100  	spri2		op1+string_slot
                                  7101  	free_regs
    011563  aa   000004 000206 
                                  7102  	return
    011564  aa   000000 000217 
                                  7103  
                                  7104  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  7105  
    011565                        7106  string_length:
                                  7107  	proc		1
    011565  aa   000000 000614 
                                  7108  
                                  7109  	load		q,arg1
    011566  aa   000000 040656 
                                  7110  	push_builtin	ps
    011567  aa   000002 000213 
    011570  aa   740025 7560 00   7111  	stq		op1+string_length_slot
                                  7112  	return
    011571  aa   000000 000217 
                                  7113  
    011572                        7114  write_internal_file:
                                  7115  	proc		0
    011572  aa   000000 000214 
                                  7116  
                                  7117  	push_output
    011573  aa   000030 000206 
                                  7118  	jump		internal_file_common
    011574  0a   011576 000220 
                                  7119  
                                  7120  
    011575                        7121  read_internal_file:
                                  7122  	proc		1
    011575  aa   000000 000614 
                                  7123  
                                  7124  
    011576                        7125  internal_file_common:
                                  7126  	unless_dt		char,internal_file.p
    011576  0a   011620 010226 
                                  7127  
                                  7128  	push_builtin	ps
    011577  aa   000002 000213 
                                  7129  
                                  7130  	load_pr		pr2,arg1
    011600  aa   000003 040251 
    011601  aa   100020 2520 00   7131  	spri2		arg2+string_slot
                                  7132  
                                  7133  	push_length	arg1
    011602  aa   000000 040304 
                                  7134  	bump		op1
    011603  aa   000001 740363 
                                  7135  	load		q,op1
    011604  aa   000000 740656 
    011605  aa   100025 7560 00   7136  	stq		arg2+string_length_slot
                                  7137  	pop		op1
    011606  aa   000000 740203 
                                  7138  
                                  7139  	swap		arg1
    011607  aa   000000 040202 
                                  7140  	if_array		internal_file.array
    011610  0a   011613 000631 
                                  7141  
    011611  aa   040033 4500 00   7142  	stz		arg1+buffer_size_slot
                                  7143  	jump		internal_file.ret
    011612  0a   011616 000220 
                                  7144  
    011613                        7145  internal_file.array:
                                  7146  	push_array_size	op1
    011613  aa   000000 740300 
                                  7147  	load		q,op1
    011614  aa   000000 740656 
    011615  aa   040033 7560 00   7148  	stq		arg1+buffer_size_slot
                                  7149  
    011616                        7150  internal_file.ret:
                                  7151  	free_regs
    011616  aa   000004 000206 
                                  7152  	return
    011617  aa   000000 000217 
                                  7153  
                                  7154  
    011620                        7155  internal_file.p:
                                  7156  	error		303
    011620  aa   000457 000302 
                        000000 
                                  7157  
    011621                        7158  terminate:
                                  7159  	proc		0
    011621  aa   000000 000214 
                                  7160  
                                  7161  	reserve_regs	(x6,pr1,pr2,pr3,pr4,pr5,pr7)
    011622  aa   005760 000250 
    011623  aa  0 01253 7001 00   7162  	tsx0		pr0|ftn_terminate
                                  7163  	free_regs
    011624  aa   000004 000206 
                                  7164  	return
    011625  aa   000000 000217 
                                  7165  
                                  7166  return:	proc		0
    011626  aa   000000 000214 
                                  7167  
                                  7168  	unless_main	quick_return
    011627  0a   011633 000331 
                                  7169  
    011630  aa  0 01447 7101 00   7170  	tra	pr0|fortran_end
                                  7171  
                                  7172  	discard_state
    011631  aa   000027 000206 
                                  7173  	return
    011632  aa   000000 000217 
                                  7174  
    011633                        7175  quick_return:
                                  7176  	push_builtin entry_info
    011633  aa   000010 000213 
                                  7177  
    011634  aa   740000 6100 00   7178  	rtcd		op1
                                  7179  
                                  7180  	discard_state
    011635  aa   000027 000206 
                                  7181  	return
    011636  aa   000000 000217 
                                  7182  
                                  7183  pause:	proc		1
    011637  aa   000000 000614 
                                  7184  
                                  7185  	push_length	arg1
    011640  aa   000000 040304 
                                  7186  	if		op1,=,0,short_pause
    011641  0a   011650 750237 
                                  7187  
                                  7188  	load_pr		pr2,arg1
    011642  aa   000003 040251 
    011643  aa   740000 2360 00   7189  	ldq		op1
                                  7190  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    011644  aa   377560 000250 
                                  7191  
    011645                        7192  pause.1:
    011645  aa  0 01420 7001 00   7193  	tsx0		pr0|fortran_pause
                                  7194  	free_regs
    011646  aa   000004 000206 
                                  7195  	return
    011647  aa   000000 000217 
                                  7196  
    011650                        7197  short_pause:
    011650  aa   740000 2360 00   7198  	ldq		op1
                                  7199  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr2,pr3,pr4,pr5,pr7)
    011651  aa   377760 000250 
                                  7200  	jump		pause.1
    011652  0a   011645 000220 
                                  7201  
                                  7202  stop:	proc		1
    011653  aa   000000 000614 
                                  7203  
                                  7204  	push_length	arg1
    011654  aa   000000 040304 
                                  7205  	if		op1,=,0,short_stop
    011655  0a   011664 750237 
                                  7206  
                                  7207  	load_pr		pr2,arg1
    011656  aa   000003 040251 
    011657  aa   740000 2360 00   7208  	ldq		op1
                                  7209  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    011660  aa   377560 000250 
                                  7210  
    011661                        7211  stop.1:
    011661  aa  0 01421 7001 00   7212  	tsx0		pr0|fortran_stop
                                  7213  	discard_state
    011662  aa   000027 000206 
                                  7214  	return
    011663  aa   000000 000217 
                                  7215  
    011664                        7216  short_stop:
    011664  aa   740000 2360 00   7217  	ldq		op1
                                  7218  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr2,pr3,pr4,pr5,pr7)
    011665  aa   377760 000250 
                                  7219  	jump		stop.1
    011666  0a   011661 000220 
                                  7220  
                                  7221  func_ref:	func		2
    011667  aa   000000 001215 
                                  7222  
                                  7223  	s_call		evaluate_arglist
    011670  0a   012106 000223 
                                  7224  
                                  7225  	push_output
    011671  aa   000030 000206 
                                  7226  	bump		op1
    011672  aa   000001 740363 
                                  7227  	set_in_storage	op1
    011673  aa   000000 740362 
                                  7228  
                                  7229  	increment		arg2,1	function result becomes last arg
    011674  aa   000001 100263 
                                  7230  
                                  7231  	unless_dt		char,func_join
    011675  0a   011702 010226 
                                  7232  	push_length	op1
    011676  aa   000000 740304 
                                  7233  	unless_optype	count,func_ref.star_extent
    011677  0a   011704 020230 
                                  7234  	pop		op1
    011700  aa   000000 740203 
                                  7235  
                                  7236  	s_call		descriptor_check
    011701  0a   012060 000223 
                                  7237  
    011702                        7238  func_join:
                                  7239  
                                  7240  	s_call		make_call
    011702  0a   012227 000223 
                                  7241  
                                  7242  	return		op2		arglist temp is now op1
    011703  aa   000001 700217 
                                  7243  
    011704                        7244  func_ref.star_extent:
                                  7245  	error		355,arg1
    011704  aa   000543 000702 
    011705  aa   000000 040303 
                        000001 
                                  7246  
                                  7247  main:	proc		2
    011706  aa   000000 001214 
                                  7248  
                                  7249  	emit_entry_defs
    011707  aa   000070 000206 
                                  7250  	emit_data		1
    011710  aa   000001 000242 
    011711  aa   000000 300000    7251  	oct		000000300000	" revision_1, entry_defs
                                  7252  
                                  7253  	s_call		make_entry
    011712  0a   011737 000223 
                                  7254  	s_call		prepare_for_namelists
    011713  0a   012005 000223 
                                  7255  	return
    011714  aa   000000 000217 
                                  7256  
                                  7257  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  7258  
                                  7259  subr:	proc		2
    011715  aa   000000 001214 
                                  7260  
                                  7261  	emit_entry_defs
    011716  aa   000070 000206 
                                  7262  	emit_data		1
    011717  aa   000001 000242 
    011720  aa   000000 300000    7263  	oct		000000300000	" revision_1, entry_defs
                                  7264  
                                  7265  	s_call		make_entry
    011721  0a   011737 000223 
                                  7266  	s_call		make_quick_entry
    011722  0a   012032 000223 
                                  7267  	s_call		prepare_for_namelists
    011723  0a   012005 000223 
                                  7268  	return
    011724  aa   000000 000217 
                                  7269  
                                  7270  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  7271  
                                  7272  func:	proc		2
    011725  aa   000000 001214 
                                  7273  
                                  7274  	emit_entry_defs
    011726  aa   000070 000206 
                                  7275  	emit_data		1
    011727  aa   000001 000242 
    011730  aa   000000 320000    7276  	oct		000000320000	" revision_1, entry_defs, func
                                  7277  
                                  7278  	s_call		make_entry
    011731  0a   011737 000223 
                                  7279  	s_call		make_quick_entry
    011732  0a   012032 000223 
                                  7280  	s_call		prepare_for_namelists
    011733  0a   012005 000223 
                                  7281  	return
    011734  aa   000000 000217 
                                  7282  
                                  7283  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  7284  
    011735                        7285  block_data:
                                  7286  	proc		0
    011735  aa   000000 000214 
                                  7287  
                                  7288  	return
    011736  aa   000000 000217 
                                  7289  
    011737                        7290  make_entry:
                                  7291  	assign_entry	arg1
    011737  aa   000000 040316 
                                  7292  
                                  7293  	emit_inst		1
    011740  aa   000001 040242 
    011741  aa   000000 6270 00   7294  	eax7		0
                                  7295  
    011742  aa  7 00034 3521 20   7296  	epp2		pr7|stack_header.pl1_operators_ptr,*
                                  7297  
                                  7298  	if_needs_descriptors arg1,make_et_desc
    011743  0a   011746 040737 
    011744  aa  2 01045 2721 00   7299  	tsp2		pr2|ext_entry
                                  7300  	jump		make_et_join
    011745  0a   011747 000220 
                                  7301  
    011746                        7302  make_et_desc:
    011746  aa  2 01046 2721 00   7303  	tsp2		pr2|ext_entry_desc
                                  7304  
    011747                        7305  make_et_join:
                                  7306  	copy		arg2
    011747  aa   000000 100201 
                                  7307  	multiply		op1,2
    011750  aa   000002 740265 
    011751  aa   740000 000000    7308  	zero		op1
                                  7309  	pop		op1
    011752  aa   000000 740203 
                                  7310  
                                  7311  	emit_data		1
    011753  aa   000001 000242 
    011754  aa   000000 000000    7312  	zero
                                  7313  
                                  7314  	emit_profile_entry		" if we will do long_profile set it up
    011755  aa   000066 000206 
                                  7315  
                                  7316  	unless_hfp	make_et_init_auto
    011756  0a   011760 000334 
    011757  aa  0 01474 7001 00   7317  	tsx0		pr0|enter_HFP_mode
                                  7318  
    011760                        7319  make_et_init_auto:
                                  7320  	call		init_auto
    011760  0a   012020 000216 
                                  7321  
                                  7322  	unless_cleanup	make_et_no_cleanup	"no cleanup needed
    011761  0a   011764 000332 
                                  7323  
    011762  aa  0 01471 7001 00   7324  	tsx0		pr0|fort_cleanup
                                  7325  	emit_cleanup_args
    011763  aa   000064 000206 
                                  7326  
    011764                        7327  make_et_no_cleanup:
                                  7328  	push_builtin	null
    011764  aa   000006 000213 
                                  7329  	push_builtin	ps
    011765  aa   000002 000213 
                                  7330  
                                  7331  	if		op2,=,op1,pop_ps
    011766  0a   011773 711637 
                                  7332  
                                  7333  	load_pr		pr2,op1
    011767  aa   000003 740251 
    011770  aa  6 00052 2521 00   7334  	spri2		pr6|ps_ptr
    011771  aa  2 00000 6521 00   7335  	spri6		pr2|0
                                  7336  	free_regs
    011772  aa   000004 000206 
                                  7337  
                                  7338  pop_ps:	pop		op2
    011773  aa   000000 700203 
                                  7339  	unless_storage_created make_et_descp		is there external storage?
    011774  0a   012001 000317 
                                  7340  	reserve_regs	all			calling external routines
    011775  aa   777760 000250 
    011776  aa  0 01472 7001 00   7341  	tsx0		pr0|fort_storage		request storage create/init
                                  7342  	emit_storage_args
    011777  aa   000065 000206 
                                  7343  	free_regs
    012000  aa   000004 000206 
                                  7344  
    012001                        7345  make_et_descp:
                                  7346  
    012001  aa  6 00032 3515 20   7347  	epp1		pr6|stack_frame.arg_ptr,*
                                  7348  
                                  7349  	unless_needs_descriptors arg1,make_et_ret
    012002  0a   012004 040337 
                                  7350  
    012003  aa  6 00042 3535 20   7351  	epp3		pr6|descriptor_ptr,*	Load desc ptr
                                  7352  
    012004                        7353  make_et_ret:
                                  7354  	s_return
    012004  aa   000003 000206 
                                  7355  
    012005                        7356  prepare_for_namelists:
                                  7357  	unless_namelist_used  pfn_ret
    012005  0a   012017 000343 
                                  7358  
                                  7359  	push_builtin	star_symbol
    012006  aa   000011 000213 
                                  7360  	push_builtin	ps
    012007  aa   000002 000213 
                                  7361  
                                  7362  	load_pr		pr2,op2
    012010  aa   000003 700251 
    012011  aa   740002 2520 00   7363  	spri2		op1+2
                                  7364  
                                  7365  	set_runtime_block_loc
    012012  aa   000024 000206 
                                  7366  
    012013  aa   000000 0520 03   7367  	adwp2		0,du
    012014  aa   740004 2520 00   7368  	spri2		op1+4
                                  7369  
                                  7370  	free_regs
    012015  aa   000004 000206 
                                  7371  	pop		op2
    012016  aa   000000 700203 
                                  7372  
    012017                        7373  pfn_ret:
                                  7374  
                                  7375  	s_return
    012017  aa   000003 000206 
                                  7376  
    012020                        7377  init_auto:
                                  7378  	proc		0
    012020  aa   000000 000214 
                                  7379  
                                  7380  	push_builtin	auto_overlay
    012021  aa   000004 000213 
                                  7381  
                                  7382  	push_length	op1
    012022  aa   000000 740304 
                                  7383  
                                  7384  	if		op1,=,0,init_return
    012023  0a   012031 750237 
                                  7385  
                                  7386  	push_builtin	auto_template
    012024  aa   000003 000213 
                                  7387  
                                  7388  	emit_eis
    012025  aa   000000 000207 
                                  7389  
    012026  aa  0 00100 1005 00   7390  	mlr		(pr),(pr),fill(0)
    012027  aa   740000 000000    7391  	desc9a		op1
    012030  aa   640000 000000    7392  	desc9a		op3
                                  7393  
    012031                        7394  init_return:
                                  7395  	return
    012031  aa   000000 000217 
                                  7396  
    012032                        7397  make_quick_entry:
                                  7398  	copy		arg1	Copy original symbol for entry
    012032  aa   000000 040201 
                                  7399  	get_quick_label	arg1	replace arg1 with label for quick entry pt
    012033  aa   000000 040335 
                                  7400  
                                  7401  "If storage space needs to be created then we substitute fort_return_mac for
                                  7402  "return_op to get the storage released at the end of the external call.
                                  7403  
                                  7404  	unless_cleanup	mqe_no_storage
    012034  0a   012037 000332 
    012035  aa  0 01470 3521 00   7405  	epp2		pr0|fort_return_mac
                                  7406  	jump		mqe_end_storage
    012036  0a   012040 000220 
                                  7407  
    012037                        7408  mqe_no_storage:
    012037  aa  0 00631 3521 00   7409  	epp2		pr0|return_op
                                  7410  
    012040                        7411  mqe_end_storage:
                                  7412  
                                  7413  	label		arg1
    012040  aa   000000 040243 
                                  7414  	push_builtin	entry_info
    012041  aa   000010 000213 
                                  7415  
    012042  aa   740000 2520 00   7416  	spri2		op1
    012043  aa   740002 2514 00   7417  	spri1		op1+2	Store arg pointer
                                  7418  	arg_ptr_in_pr1		Update machine state
    012044  aa   000062 000206 
                                  7419  
                                  7420  	unless_needs_descriptors op2,mqe_no_desc
    012045  0a   012050 700337 
    012046  aa   740004 2534 00   7421  	spri3		op1+4	Store descriptor pointer
                                  7422  	desc_ptr_in_pr3		Update machine state
    012047  aa   000061 000206 
                                  7423  
    012050                        7424  mqe_no_desc:
                                  7425  	swap		op2	Get original entry symbol on top
    012050  aa   000000 700202 
                                  7426  	pop		op1	Pop it off
    012051  aa   000000 740203 
                                  7427  
                                  7428  	s_return
    012052  aa   000003 000206 
                                  7429  
    012053                        7430  process_param_list:
                                  7431  	proc		1
    012053  aa   000000 000614 
                                  7432  
    012054                        7433  ppl.loop:
                                  7434  	push_operand	ppl.done
    012054  0a   012056 000350 
                                  7435  	jump		ppl.loop
    012055  0a   012054 000220 
                                  7436  
    012056                        7437  ppl.done:
                                  7438  	check_parameters
    012056  aa   000017 000206 
                                  7439  	return
    012057  aa   000000 000217 
                                  7440  
    012060                        7441  descriptor_check:
                                  7442  
                                  7443  	" Subroutine to check to see whether or not descriptors might be
                                  7444  	" required for a subroutine call or function reference.  In ansi66
                                  7445  	" mode, we print a message warning the user that descriptors might
                                  7446  	" be necessary.  In ansi77 mode, we go ahead and cause descriptors
                                  7447  	" to be used (silently).  In either mode, if the called subprogram
                                  7448  	" is local to this compilation, then it will already have been taken
                                  7449  	" care of by the storage allocator.
                                  7450  
                                  7451  	" Called from func_ref (to check the function return value of
                                  7452  	" character valued functions) and from evaluate_arglist.
                                  7453  
                                  7454  	" Assumes that arg1 is the external symbol.
                                  7455  
                                  7456  	if_local		arg1,descriptor_check.return
    012060  0a   012067 040727 
                                  7457  	if_needs_descriptors arg1,descriptor_check.return
    012061  0a   012067 040737 
                                  7458  	if_ansi77		descriptor_check.set
    012062  0a   012066 000674 
                                  7459  
                                  7460  	" Print a warning that this call might need descriptors
                                  7461  
                                  7462  	print		348,arg1
    012063  aa   000534 000701 
    012064  aa   000000 040303 
                        000001 
                                  7463  	jump		descriptor_check.return
    012065  0a   012067 000220 
                                  7464  
    012066                        7465  descriptor_check.set:
                                  7466  
                                  7467  	" Cause descriptors to be generated for this call
                                  7468  
                                  7469  	set_needs_descriptors		" arg1 implied
    012066  aa   000060 000206 
                                  7470  
    012067                        7471  descriptor_check.return:
                                  7472  	s_return
    012067  aa   000003 000206 
                                  7473  
    012070                        7474  increment_polish:
                                  7475  	proc		0
    012070  aa   000000 000214 
                                  7476  
                                  7477  	skip_data
    012071  aa   000034 000206 
                                  7478  
                                  7479  	return
    012072  aa   000000 000217 
                                  7480  
                                  7481  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  7482  
    012073                        7483  label_operator:
                                  7484  	proc		1
    012073  aa   000000 000614 
                                  7485  
                                  7486  	label		arg1
    012074  aa   000000 040243 
                                  7487  
                                  7488  	return
    012075  aa   000000 000217 
                                  7489  
                                  7490  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  7491  
                                  7492  stat:	proc		0
    012076  aa   000000 000214 
                                  7493  
                                  7494  	shorten_stack
    012077  aa   000000 000272 
                                  7495  
                                  7496  	stat
    012100  aa   000016 000206 
                                  7497  
                                  7498  	return
    012101  aa   000000 000217 
                                  7499  
                                  7500  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  7501  
                                  7502  call:	proc		2
    012102  aa   000000 001214 
                                  7503  
                                  7504  "
                                  7505  	s_call		evaluate_arglist
    012103  0a   012106 000223 
                                  7506  	s_call		make_call
    012104  0a   012227 000223 
                                  7507  
                                  7508  	return
    012105  aa   000000 000217 
                                  7509  
    012106                        7510  evaluate_arglist:
                                  7511  	push_operand	check_args
    012106  0a   012121 000350 
                                  7512  	if_optype		bif,conv_bif
    012107  0a   012114 004227 
                                  7513  	if_optype		external,conv_external
    012110  0a   012116 001227 
                                  7514  
                                  7515  	unless_dt		char,evaluate_arglist
    012111  0a   012106 010226 
                                  7516  
                                  7517  	" If argument is of data type character, check to see if we should
                                  7518  	" warn the user about descriptors or just use them.
                                  7519  
                                  7520  	s_call		descriptor_check
    012112  0a   012060 000223 
                                  7521  
                                  7522  	jump		evaluate_arglist
    012113  0a   012106 000220 
                                  7523  
    012114                        7524  conv_bif:
                                  7525  	call		cv_bif_to_external
    012114  0a   012123 000216 
                                  7526  	jump		evaluate_arglist
    012115  0a   012106 000220 
                                  7527  
    012116                        7528  conv_external:
                                  7529  	if_parameter	op1,evaluate_arglist " parameters already are external variables
    012116  0a   012106 740721 
                                  7530  
                                  7531  	call		make_external_variable
    012117  0a   012214 000216 
                                  7532  	jump		evaluate_arglist
    012120  0a   012106 000220 
                                  7533  
    012121                        7534  check_args:
                                  7535  	check_arg_list
    012121  aa   000020 000206 
                                  7536  	s_return
    012122  aa   000003 000206 
                                  7537  
    012123                        7538  cv_bif_to_external:
                                  7539  	func		1
    012123  aa   000000 000615 
                                  7540  
                                  7541  	push_bif_index	arg1	" get index into big table
    012124  aa   000000 040267 
                                  7542  "				now get offset into vector
                                  7543  	push_count_indexed	op1,(38,39,40,19,2,12,21,3,13,4,14,5,15,7,17,23,41,42,43,1,11,20,0,0,0,0,0,0,0,0,0,0,0,0,57,58,10,44,45,46,6,16,22,9,18,24,8,0,47,0,0,0,0,0,48,0,0,49,26,27,28,29,30,31,0,0,32,50,0,0,0,0,36,34,37,35,33,51,52,53,54,55,56,0,0,0,0,59,60,61,62,0,0)
    012125  aa   000135 740212 
    012126  aa   000046 000047 
    012127  aa   000050 000023 
    012130  aa   000002 000014 
    012131  aa   000025 000003 
    012132  aa   000015 000004 
    012133  aa   000016 000005 
    012134  aa   000017 000007 
    012135  aa   000021 000027 
    012136  aa   000051 000052 
    012137  aa   000053 000001 
    012140  aa   000013 000024 
    012141  aa   000000 000000 
    012142  aa   000000 000000 
    012143  aa   000000 000000 
    012144  aa   000000 000000 
    012145  aa   000000 000000 
    012146  aa   000000 000000 
    012147  aa   000071 000072 
    012150  aa   000012 000054 
    012151  aa   000055 000056 
    012152  aa   000006 000020 
    012153  aa   000026 000011 
    012154  aa   000022 000030 
    012155  aa   000010 000000 
    012156  aa   000057 000000 
    012157  aa   000000 000000 
    012160  aa   000000 000000 
    012161  aa   000060 000000 
    012162  aa   000000 000061 
    012163  aa   000032 000033 
    012164  aa   000034 000035 
    012165  aa   000036 000037 
    012166  aa   000000 000000 
    012167  aa   000040 000062 
    012170  aa   000000 000000 
    012171  aa   000000 000000 
    012172  aa   000044 000042 
    012173  aa   000045 000043 
    012174  aa   000041 000063 
    012175  aa   000064 000065 
    012176  aa   000066 000067 
    012177  aa   000070 000000 
    012200  aa   000000 000000 
    012201  aa   000000 000073 
    012202  aa   000074 000075 
    012203  aa   000076 000000 
    012204  aa   000000 000000 
                        000135 
                                  7544  
                                  7545  	if		op1,=,0,not_external_bif
    012205  0a   012212 750237 
                                  7546  
                                  7547  	reserve_regs	(x2,pr2,pr4)
    012206  aa   101200 000250 
    012207  aa   740000 6220 00   7548  	eax2		op1
    012210  aa  0 01417 7001 00   7549  	tsx0		pr0|get_math_entry
                                  7550  
                                  7551  	jump		ext_join
    012211  0a   012216 000220 
                                  7552  
    012212                        7553  not_external_bif:
                                  7554  	error		461,arg1
    012212  aa   000715 000702 
    012213  aa   000000 040303 
                        000001 
                                  7555  
    012214                        7556  make_external_variable:
                                  7557  	func		1
    012214  aa   000000 000615 
                                  7558  
                                  7559  	load_pr		pr2,arg1
    012215  aa   000003 040251 
                                  7560  
    012216                        7561  ext_join:
                                  7562  	push_builtin	null_ptr
    012216  aa   000005 000213 
                                  7563  	push_temp		4
    012217  aa   000004 000204 
                                  7564  	bump		op1
    012220  aa   000001 740363 
                                  7565  	bump		op1
    012221  aa   000001 740363 
                                  7566  
    012222  aa   740000 2520 00   7567  	spri2		op1
                                  7568  	load		aq,op2
    012223  aa   000000 701656 
    012224  aa   740002 7570 00   7569  	staq		op1+2
                                  7570  
                                  7571  	free_regs
    012225  aa   000004 000206 
                                  7572  	return		op1
    012226  aa   000001 740217 
                                  7573  
    012227                        7574  make_call:
                                  7575  	copy		arg2		get nargs
    012227  aa   000000 100201 
                                  7576  
                                  7577  	unless_needs_descriptors	arg1,inc_for_hdr
    012230  0a   012232 040337 
                                  7578  	multiply		op1,2
    012231  aa   000002 740265 
                                  7579  
    012232                        7580  inc_for_hdr:
                                  7581  	increment		op1,1		(for header)
    012232  aa   000001 740263 
                                  7582  
                                  7583  	unless_parameter	arg1,double_count
    012233  0a   012235 040321 
                                  7584  	increment		op1,1		for display pointer
    012234  aa   000001 740263 
                                  7585  
    012235                        7586  double_count:
                                  7587  	multiply		op1,2		double to get size of temp
    012235  aa   000002 740265 
                                  7588  
                                  7589  	if_local		arg1,local_call
    012236  0a   012274 040727 
                                  7590  
                                  7591  	push_temp		var
    012237  aa   777777 000204 
                                  7592  
                                  7593  	bump_args
    012240  aa   000031 000206 
                                  7594  
                                  7595  	store_arg_addrs
    012241  aa   000021 000206 
                                  7596  
                                  7597  	make_descriptors
    012242  aa   000023 000206 
                                  7598  
                                  7599  	use_eaq				" any temps that need to be saved...
    012243  aa   000000 000255 
                                  7600  	reserve_regs	indices		... must be saved now
    012244  aa   776000 000250 
                                  7601  	free_regs				we still might need xregs for > 16K addressing
    012245  aa   000004 000206 
                                  7602  
    012246  aa   740000 6210 00   7603  	eax1		op1
                                  7604  
                                  7605  	copy		arg2
    012247  aa   000000 100201 
                                  7606  	multiply		op1,2048
    012250  aa   004000 740265 
    012251  aa   740000 4310 00   7607  	fld		op1
                                  7608  	pop		op1
    012252  aa   000000 740203 
                                  7609  
                                  7610  	load_pr		pr2,arg1
    012253  aa   000003 040251 
                                  7611  
                                  7612  	reserve_regs	all		all regs may be used by the call programs
    012254  aa   777760 000250 
                                  7613  
                                  7614  	if_parameter	arg1,call_variable
    012255  0a   012263 040721 
                                  7615  
                                  7616  	if_needs_descriptors	arg1,call_ext_desc
    012256  0a   012261 040737 
                                  7617  
    012257  aa  0 00623 7001 00   7618  	tsx0		pr0|call_ext_out
                                  7619  	jump		call_join
    012260  0a   012267 000220 
                                  7620  
    012261                        7621  call_ext_desc:
    012261  aa  0 00622 7001 00   7622  	tsx0		pr0|call_ext_out_desc
                                  7623  	jump		call_join
    012262  0a   012267 000220 
                                  7624  
    012263                        7625  call_variable:
                                  7626  	if_needs_descriptors	arg1,call_variable_desc
    012263  0a   012266 040737 
                                  7627  
    012264  aa  0 00617 7001 00   7628  	tsx0		pr0|call_var
                                  7629  	jump		call_join
    012265  0a   012267 000220 
                                  7630  
    012266                        7631  call_variable_desc:
    012266  aa  0 00616 7001 00   7632  	tsx0		pr0|call_var_desc
                                  7633  
    012267                        7634  call_join:
                                  7635  	free_regs
    012267  aa   000004 000206 
                                  7636  	free_temp		op1		" free argument list temporary
    012270  aa   000000 740247 
                                  7637  	free_descriptors
    012271  aa   000052 000206 
                                  7638  	drop_args
    012272  aa   000032 000206 
                                  7639  	s_return
    012273  aa   000003 000206 
                                  7640  
                                  7641  
    012274                        7642  local_call:
                                  7643  	bump_args
    012274  aa   000031 000206 
                                  7644  
                                  7645  	if_constant_addrs	use_itp
    012275  0a   012323 000733 
                                  7646  
                                  7647  	push_temp		var
    012276  aa   777777 000204 
                                  7648  
                                  7649  	store_arg_addrs
    012277  aa   000021 000206 
                                  7650  
                                  7651  	make_descriptors
    012300  aa   000023 000206 
                                  7652  
                                  7653  	use_eaq
    012301  aa   000000 000255 
                                  7654  
                                  7655  	copy		arg2
    012302  aa   000000 100201 
                                  7656  	multiply		op1,2048
    012303  aa   004000 740265 
    012304  aa   740000 4310 00   7657  	fld		op1
                                  7658  	pop		op1
    012305  aa   000000 740203 
                                  7659  
    012306  aa   740000 7570 00   7660  	staq		op1
                                  7661  	load_pr		pr1,op1
    012307  aa   000002 740251 
                                  7662  
                                  7663  	unless_needs_descriptors arg1,lc_no_desc
    012310  0a   012313 040337 
                                  7664  
    012311  aa  1 00000 2351 00   7665  	lda		pr1|0	Get 2*nargs in au
    012312  aa  1 00002 3535 01   7666  	epp3		pr1|2,au	Load descriptor pointer
                                  7667  
    012313                        7668  lc_no_desc:
                                  7669  	get_quick_label	arg1	replace external ref with label for quick entry point
    012313  aa   000000 040335 
                                  7670  
                                  7671  	reserve_regs	all-pr4
    012314  aa   776760 000250 
                                  7672  
    012315  aa   040000 2720 00   7673  	tsp2		arg1
                                  7674  
                                  7675  	free_regs
    012316  aa   000004 000206 
                                  7676   	free_temp		op1		" free argument list temporary
    012317  aa   000000 740247 
                                  7677  	free_descriptors
    012320  aa   000052 000206 
                                  7678  	drop_args
    012321  aa   000032 000206 
                                  7679  	s_return
    012322  aa   000003 000206 
                                  7680  
    012323                        7681  use_itp:
                                  7682  	gen_itp_list		replaces top of stack with constant arg list
    012323  aa   000022 000206 
                                  7683  	use_eaq
    012324  aa   000000 000255 
                                  7684  	load_pr		pr1,op1
    012325  aa   000002 740251 
                                  7685  
                                  7686  	unless_needs_descriptors arg1,itp_no_desc
    012326  0a   012331 040337 
                                  7687  
    012327  aa  1 00000 2351 00   7688  	lda		pr1|0	Get 2*nargs in au
    012330  aa  1 00002 3535 01   7689  	epp3		pr1|2,au	Load descriptor pointer
                                  7690  
    012331                        7691  itp_no_desc:
                                  7692  	get_quick_label	arg1	replace external ref with label for quick entry point
    012331  aa   000000 040335 
                                  7693  	reserve_regs	all-pr4
    012332  aa   776760 000250 
    012333  aa   040000 2720 00   7694  	tsp2		arg1
                                  7695  	free_regs
    012334  aa   000004 000206 
                                  7696  	free_descriptors
    012335  aa   000052 000206 
                                  7697  	drop_args
    012336  aa   000032 000206 
                                  7698  	s_return
    012337  aa   000003 000206 
                                  7699  
                                  7700  chain:	proc		3
    012340  aa   000000 001614 
                                  7701  
                                  7702  	swap		arg1
    012341  aa   000000 040202 
                                  7703  
                                  7704  	if_dt		char,chain2
    012342  0a   012345 010225 
                                  7705  	unless_dt		int,chain_path.p
    012343  0a   012406 400226 
                                  7706  	unless_array	chain_path.p
    012344  0a   012406 000231 
                                  7707  
    012345                        7708  chain2:
                                  7709  	swap		arg1
    012345  aa   000000 040202 
                                  7710  
                                  7711  	swap		arg2
    012346  aa   000000 100202 
                                  7712  
                                  7713  	if_dt		char,chain3
    012347  0a   012352 010225 
                                  7714  	unless_dt		int,chain_sys.p
    012350  0a   012411 400226 
                                  7715  	unless_array	chain_sys.p
    012351  0a   012411 000231 
                                  7716  
    012352                        7717  chain3:
                                  7718  	swap		arg2
    012352  aa   000000 100202 
                                  7719  
                                  7720  	copy		arg3
    012353  aa   000000 140201 
                                  7721  	increment		op1,47
    012354  aa   000057 740263 
                                  7722  	push_temp		var
    012355  aa   777777 000204 
                                  7723  
    012356                        7724  chain_fill:
                                  7725  	use_eaq
    012356  aa   000000 000255 
                                  7726  
    012357  aa   140000 2360 00   7727  	ldq		arg3
    012360  aa   740000 7560 00   7728  	stq		op1
                                  7729  
                                  7730  	emit_eis
    012361  aa   000000 000207 
    012362  aa  0 00100 1005 00   7731  	mlr		(pr),(pr)
    012363  aa   040000 000250    7732  	desc9a		arg1,168
    012364  aa   740001 000250    7733  	desc9a		op1+1,168
                                  7734  
    012365  aa   100000 2370 00   7735  	ldaq		arg2
    012366  aa   740055 7570 00   7736  	staq		op1+45
                                  7737  
                                  7738  	load_pr		pr2,op1
    012367  aa   000003 740251 
                                  7739  	emit_inst		1
    012370  aa   000001 040242 
    012371  aa   000000 6200 00   7740  	eax0		0
                                  7741  
    012372                        7742  chain_next_file:
                                  7743  
                                  7744  	push_operand	chain_ret
    012372  0a   012400 000350 
    012373  aa   740000 2360 00   7745  	ldq		op1
    012374  aa   700057 7560 10   7746  	stq		op2+47,0
                                  7747  	pop		op1
    012375  aa   000000 740203 
    012376  aa   000001 6200 10   7748  	eax0		1,0
                                  7749  	jump		chain_next_file
    012377  0a   012372 000220 
                                  7750  
    012400                        7751  chain_ret:
                                  7752  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr2,pr3,pr4,pr5,pr7)
    012400  aa   377760 000250 
                                  7753  
    012401  aa  0 01422 7001 00   7754  	tsx0		pr0|fortran_chain
                                  7755  	free_regs
    012402  aa   000004 000206 
                                  7756  	free_temp		op2		" free arglist temp
    012403  aa   000000 700247 
                                  7757  	reset_eaq
    012404  aa   000006 000206 
                                  7758  
                                  7759  	return
    012405  aa   000000 000217 
                                  7760  
    012406                        7761  chain_path.p:
                                  7762  	print		335,op1
    012406  aa   000517 000701 
    012407  aa   000000 740303 
                        000001 
                                  7763  	return
    012410  aa   000000 000217 
                                  7764  
    012411                        7765  chain_sys.p:
                                  7766  	print		336,op1
    012411  aa   000520 000701 
    012412  aa   000000 740303 
                        000001 
                                  7767  	return
    012413  aa   000000 000217 
                                  7768  
                                  7769  endunit:	proc		0
    012414  aa   000000 000214 
                                  7770  
                                  7771  	end_unit
    012415  aa   000015 000206 
                                  7772  	return
    012416  aa   000000 000217 
                                  7773  
                                  7774  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  7775  
    012417                        7776  non_executable:
                                  7777  	proc		0
    012417  aa   000000 000214 
                                  7778  	return
    012420  aa   000000 000217 
                                  7779  
                                  7780  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  7781  
                                  7782  no_op:	proc		0
    012421  aa   000000 000214 
                                  7783  	return
    012422  aa   000000 000217 
                                  7784  
                                  7785  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  7786  
    012423                        7787  form_VLA_packed_ptr:
                                  7788  	func		1
    012423  aa   000000 000615 
                                  7789  	load		q,arg1
    012424  aa   000000 040656 
    012425  aa  0 77615 5061 00   7790  	div		pr0|VLA_words_per_seg
                                  7791  	emit_inst		2
    012426  aa   000002 040242 
    012427  aa   000022 7350 00   7792  	als		18
    012430  aa   000022 7770 00   7793  	llr		18
                                  7794  	return		q
    012431  aa   000001 000617 
                                  7795  
                                  7796  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  7797  
    012432                        7798  opt_subscript:
                                  7799  	proc		3
    012432  aa   000000 001614 
                                  7800  
                                  7801  	optimized_subscript
    012433  aa   000025 000206 
                                  7802  	return
    012434  aa   000000 000217 
                                  7803  
    012435                        7804  left_shift:
                                  7805  	func		2
    012435  aa   000000 001215 
                                  7806  
                                  7807  	load		q,arg1
    012436  aa   000000 040656 
    012437  aa   100000 7360 00   7808  	qls		arg2
                                  7809  
                                  7810  	return		q
    012440  aa   000001 000617 
                                  7811  
                                  7812  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  7813  
    012441                        7814  right_shift:
                                  7815  	func		2
    012441  aa   000000 001215 
                                  7816  
                                  7817  	load		q,arg1
    012442  aa   000000 040656 
    012443  aa   100000 7320 00   7818  	qrs		arg2
                                  7819  
                                  7820  	return		q
    012444  aa   000001 000617 
                                  7821  
                                  7822  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  7823  
    012445                        7824  store_zero:
                                  7825  	proc		0
    012445  aa   000000 000214 
                                  7826  
                                  7827  	push_output
    012446  aa   000030 000206 
                                  7828  
    012447  aa   040000 4500 00   7829  	stz		arg1
                                  7830  	flush_ref		arg1
    012450  aa   000000 040355 
                                  7831  
                                  7832  	return
    012451  aa   000000 000217 
                                  7833  
    012452                        7834  storage_add:
                                  7835  	proc		1
    012452  aa   000000 000614 
                                  7836  
                                  7837  	push_output
    012453  aa   000030 000206 
                                  7838  
                                  7839  	note_eligible_ind_var_use
    012454  aa   000051 000206 
                                  7840  
                                  7841  	if_global		arg2,storage_add.global
    012455  0a   012462 100722 
                                  7842  
                                  7843  	load		q,arg1
    012456  aa   000000 040656 
    012457  aa   100000 0560 00   7844  	asq		arg2
                                  7845  	flush_ref		arg2
    012460  aa   000000 100355 
                                  7846  
                                  7847  	return
    012461  aa   000000 000217 
                                  7848  
    012462                        7849  storage_add.global:
                                  7850  	increment_index
    012462  aa   000045 000206 
                                  7851  	return
    012463  aa   000000 000217 
                                  7852  
                                  7853  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  7854  
    012464                        7855  storage_sub:
                                  7856  	proc		1
    012464  aa   000000 000614 
                                  7857  
                                  7858  	push_output
    012465  aa   000030 000206 
                                  7859  
                                  7860  	load		q,arg1
    012466  aa   000000 040656 
    012467  aa   100000 1560 00   7861  	ssq		arg2
                                  7862  	flush_ref		arg2
    012470  aa   000000 100355 
                                  7863  
                                  7864  	return
    012471  aa   000000 000217 
                                  7865  
                                  7866  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  7867  
    012472                        7868  neg_storage_add:
                                  7869  	proc		1
    012472  aa   000000 000614 
                                  7870  
                                  7871  	push_output
    012473  aa   000030 000206 
                                  7872  
                                  7873  	note_eligible_ind_var_use
    012474  aa   000051 000206 
                                  7874  
                                  7875  	if_global		arg2,neg_storage_add.global
    012475  0a   012502 100722 
                                  7876  
    012476  aa   040000 3360 00   7877  	lcq		arg1
    012477  aa   100000 0560 00   7878  	asq		arg2
                                  7879  	flush_ref		arg2
    012500  aa   000000 100355 
                                  7880  
                                  7881  	return
    012501  aa   000000 000217 
                                  7882  
    012502                        7883  neg_storage_add.global:
                                  7884  	decrement_index
    012502  aa   000046 000206 
                                  7885  	return
    012503  aa   000000 000217 
                                  7886  
    012504                        7887  storage_add_one:
                                  7888  	proc		0
    012504  aa   000000 000214 
                                  7889  
                                  7890  	push_output
    012505  aa   000030 000206 
                                  7891  
                                  7892  	note_eligible_ind_var_use
    012506  aa   000051 000206 
                                  7893  
                                  7894  	if_global		arg1,storage_add_one.global
    012507  0a   012513 040722 
                                  7895  
                                  7896  
    012510  aa   740000 0540 00   7897  	aos		op1
                                  7898  	flush_ref		op1
    012511  aa   000000 740355 
                                  7899  
                                  7900  	return
    012512  aa   000000 000217 
                                  7901  
    012513                        7902  storage_add_one.global:
                                  7903  	push_builtin	one
    012513  aa   000001 000213 
                                  7904  	swap		arg1
    012514  aa   000000 040202 
                                  7905  	increment_index
    012515  aa   000045 000206 
                                  7906  	return
    012516  aa   000000 000217 
                                  7907  
    012517                        7908  read_namelist:
    012517                        7909  write_namelist:
                                  7910  namelist:	proc		1
    012517  aa   000000 000614 
                                  7911  
                                  7912  	push_builtin	ps
    012520  aa   000002 000213 
                                  7913  	load_pr		pr2,arg1
    012521  aa   000003 040251 
    012522  aa   740022 2520 00   7914  	spri2		op1+namelist_slot
                                  7915  
                                  7916  	free_regs
    012523  aa   000004 000206 
                                  7917  	return
    012524  aa   000000 000217 
                                  7918  
                                  7919  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  7920  
    012525                        7921  sub_index:
                                  7922  	func		1
    012525  aa   000000 000615 
                                  7923  	if_eaq		q,arg1,subscript_in_q	" easy, subscript is already in q
    012526  0a   012532 040633 
                                  7924  	push_output
    012527  aa   000030 000206 
                                  7925  
                                  7926  	sub_index					" loads op1 into any xr, sets
    012530  aa   000026 000206 
                                  7927  						" output.value_in.x
                                  7928  	return		op1
    012531  aa   000001 740217 
                                  7929  
    012532                        7930  subscript_in_q:
                                  7931  	return		q
    012532  aa   000001 000617 
                                  7932  
                                  7933  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  7934  
    012533                        7935  loop_end:
                                  7936  	proc		var
    012533  aa   000000 777614 
                                  7937  
                                  7938  	drop_all_counts
    012534  aa   000040 000206 
                                  7939  	return
    012535  aa   000000 000217 
                                  7940  
                                  7941  cat:	func		var
    012536  aa   000000 777615 
                                  7942  
                                  7943  	pop		arg1
    012537  aa   000000 040203 
                                  7944  	set_next_operand	1
    012540  aa   000001 000273 
                                  7945  
                                  7946  	push_operand_count
    012541  aa   000033 000206 
                                  7947  	decrement		arg1,1
    012542  aa   000001 040264 
                                  7948  
                                  7949  	" arg1 is now the number of strings to be moved.  Push all operands
                                  7950  	" next, so start_cat can look at them.
                                  7951  
    012543                        7952  cat.push_all_operands:
                                  7953  	push_operand	cat.all_operands_pushed
    012543  0a   012545 000350 
                                  7954  	jump		cat.push_all_operands
    012544  0a   012543 000220 
                                  7955  
    012545                        7956  cat.all_operands_pushed:
                                  7957  	start_cat		cat.dont_move_op1
    012545  0a   012553 000271 
                                  7958  
                                  7959  	" Move all operands, starting with the first one.  Get the result
                                  7960  	" temp (which was pushed by start_cat) on the stack as arg1.  Get
                                  7961  	" the count of operands to move on the stack as arg2.
                                  7962  
                                  7963  	swap		arg2
    012546  aa   000000 100202 
                                  7964  	pop		arg3
    012547  aa   000000 140203 
                                  7965  	swap		arg1
    012550  aa   000000 040202 
                                  7966  	set_next_operand	1
    012551  aa   000001 000273 
                                  7967  	jump		cat.process_next_operand
    012552  0a   012563 000220 
                                  7968  
    012553                        7969  cat.dont_move_op1:
                                  7970  
                                  7971  	" Move all operands EXCEPT the first one.  Get the result temp on
                                  7972  	" the stack as arg1.  Get the first operand on the top of the
                                  7973  	" stack for data type checking and address manipulation.  Get the
                                  7974  	" count of operands to move on the stack as arg2.
                                  7975  
                                  7976  	swap		arg3
    012553  aa   000000 140202 
                                  7977  	pop		arg4
    012554  aa   000000 200203 
                                  7978  	swap		arg1
    012555  aa   000000 040202 
                                  7979  	swap		arg2
    012556  aa   000000 100202 
                                  7980  	unless_dt		char,cat.bad_data_type
    012557  0a   012577 010226 
                                  7981  	set_next_operand	2
    012560  aa   000002 000273 
                                  7982  	decrement		arg2,1
    012561  aa   000001 100264 
                                  7983  	jump		cat.adjust_result_address
    012562  0a   012573 000220 
                                  7984  
    012563                        7985  cat.process_next_operand:
                                  7986  
                                  7987  	" Get the next operand on top of the stack, check its data type,
                                  7988  	" and emit code to move it to the end of the result temp.
                                  7989  
                                  7990  	push_operand
    012563  aa   000000 000350 
                                  7991  	unless_dt		char,cat.bad_data_type
    012564  0a   012577 010226 
                                  7992  
                                  7993  	emit_eis		equal_lengths
    012565  aa   000001 000207 
    012566  aa  0 40100 1005 00   7994  	mlr		(pr),(pr),fill(040)
    012567  aa   740000 000000    7995  	desc9a		op1
    012570  aa   040000 000000    7996  	desc9a		arg1
                                  7997  
                                  7998  	" If that was the last operand to be moved, quit.
                                  7999  
                                  8000  	decrement		arg2,1
    012571  aa   000001 100264 
                                  8001  	if		arg2,=,0,cat.moved_last_operand
    012572  0a   012575 110237 
                                  8002  
    012573                        8003  cat.adjust_result_address:
                                  8004  	continue_cat
    012573  aa   000056 000206 
                                  8005  	jump		cat.process_next_operand
    012574  0a   012563 000220 
                                  8006  
    012575                        8007  cat.moved_last_operand:
                                  8008  
                                  8009  	" All operands have been moved.  Clean up, and return the temp.
                                  8010  
                                  8011  	finish_cat
    012575  aa   000057 000206 
                                  8012  	return		arg1
    012576  aa   000001 040217 
                                  8013  
    012577                        8014  cat.bad_data_type:
                                  8015  	error		354,op1
    012577  aa   000542 000702 
    012600  aa   000000 740303 
                        000001 
                                  8016  
    012601                        8017  lhs_fld:
                                  8018  	proc		3
    012601  aa   000000 001614 
                                  8019  
                                  8020  	push_output
    012602  aa   000030 000206 
                                  8021  	swap		arg3		"put the stack in expected order
    012603  aa   000000 140202 
                                  8022  	lhs_fld
    012604  aa   000072 000206 
                                  8023            return
    012605  aa   000000 000217 
                                  8024  
    012606                        8025  lhs_.p1:
                                  8026  	error		359,arg1
    012606  aa   000547 000702 
    012607  aa   000000 040303 
                        000001 
                                  8027  
    012610                        8028  lhs_.p2:
                                  8029  	error		359,arg2
    012610  aa   000547 000702 
    012611  aa   000000 100303 
                        000001 
                                  8030  
    012612                        8031  lhs_.p3:
                                  8032  	error		360,arg3
    012612  aa   000550 000702 
    012613  aa   000000 140303 
                        000001 
                                  8033  
    012614                        8034  lhs_.p4:
                                  8035  	error		361
    012614  aa   000551 000302 
                        000000 
                                  8036  
    012615                        8037  load_xreg:
                                  8038  	proc		2
    012615  aa   000000 001214 
                                  8039  
                                  8040  	load_xreg
    012616  aa   000036 000206 
                                  8041  	return
    012617  aa   000000 000217 
                                  8042  
                                  8043  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  8044  
    012620                        8045  load_preg:
                                  8046  	proc		1
    012620  aa   000000 000614 
                                  8047  
                                  8048  	load_preg
    012621  aa   000037 000206 
                                  8049  
                                  8050  	return
    012622  aa   000000 000217 
                                  8051  
                                  8052  do:	error	330,ascii,do
    012623  aa   000512 000702 
    012624  0a   012661 001303 
    012661  aa  144 157 000 000
                        000001 
    012625                        8053  jump_logical:
                                  8054  	error	330,ascii,jump_logical
    012625  aa   000512 000702 
    012626  0a   012662 006303 
    012662  aa  152 165 155 160
    012663  aa  137 154 157 147
    012664  aa  151 143 141 154
                        000001 
    012627                        8055  xmit_scalar:
                                  8056  	error	330,ascii,xmit_scalar
    012627  aa   000512 000702 
    012630  0a   012665 005703 
    012665  aa  170 155 151 164
    012666  aa  137 163 143 141
    012667  aa  154 141 162 000
                        000001 
    012631                        8057  xmit_array:
                                  8058  	error	330,ascii,xmit_array
    012631  aa   000512 000702 
    012632  0a   012670 005303 
    012670  aa  170 155 151 164
    012671  aa  137 141 162 162
    012672  aa  141 171 000 000
                        000001 
    012633                        8059  xmit_vector:
                                  8060  	error	330,ascii,xmit_vector
    012633  aa   000512 000702 
    012634  0a   012673 005703 
    012673  aa  170 155 151 164
    012674  aa  137 166 145 143
    012675  aa  164 157 162 000
                        000001 
                                  8061  sf_def:	error	330,ascii,sf_def
    012635  aa   000512 000702 
    012636  0a   012676 003303 
    012676  aa  163 146 137 144
    012677  aa  145 146 000 000
                        000001 
                                  8062  sf:	error	330,ascii,sf
    012637  aa   000512 000702 
    012640  0a   012700 001303 
    012700  aa  163 146 000 000
                        000001 
                                  8063  item:	error	330,ascii,item
    012641  aa   000512 000702 
    012642  0a   012701 002303 
    012701  aa  151 164 145 155
                        000001 
                                  8064  exit:	error	330,ascii,exit
    012643  aa   000512 000702 
    012644  0a   012702 002303 
    012702  aa  145 170 151 164
                        000001 
                                  8065  eol:	error	330,ascii,eol
    012645  aa   000512 000702 
    012646  0a   012703 001703 
    012703  aa  145 157 154 000
                        000001 
    012647                        8066  subscript:
                                  8067  	error	330,ascii,subscript
    012647  aa   000512 000702 
    012650  0a   012704 004703 
    012704  aa  163 165 142 163
    012705  aa  143 162 151 160
    012706  aa  164 000 000 000
                        000001 
                                  8068  substr:	error	330,ascii,substr
    012651  aa   000512 000702 
    012652  0a   012707 003303 
    012707  aa  163 165 142 163
    012710  aa  164 162 000 000
                        000001 
                                  8069  block_if:	error	330,ascii,block_if
    012653  aa   000512 000702 
    012654  0a   012711 004303 
    012711  aa  142 154 157 143
    012712  aa  153 137 151 146
                        000001 
                                  8070  else_if:	error	330,ascii,else_if
    012655  aa   000512 000702 
    012656  0a   012713 003703 
    012713  aa  145 154 163 145
    012714  aa  137 151 146 000
                        000001 
                                  8071  else:	error	330,ascii,else
    012657  aa   000512 000702 
    012660  0a   012715 002303 
    012715  aa  145 154 163 145
                        000001 
                                  8072  
                                  8073  	end

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    012716  5a   000003 000000 
    012717  5a   000071 600000 
    012720  aa   000000 000000 
    012721  55   000013 000002 
    012722  5a   000002 400003 
    012723  55   000006 000013 
    012724  aa  020 146 157 162
    012725  aa  164 137 157 160
    012726  aa  164 137 155 141
    012727  aa  143 162 157 163
    012730  aa  137 000 000 000
    012731  55   000021 000003 
    012732  0a   000455 400000 
    012733  55   000016 000003 
    012734  aa  013 145 162 162         error_macro
    012735  aa  157 162 137 155
    012736  aa  141 143 162 157
    012737  55   000027 000013 
    012740  0a   000452 400000 
    012741  55   000024 000003 
    012742  aa  012 141 142 157         abort_list
    012743  aa  162 164 137 154
    012744  aa  151 163 164 000
    012745  55   000035 000021 
    012746  0a   000450 400000 
    012747  55   000032 000003 
    012750  aa  012 146 151 162         first_scan
    012751  aa  163 164 137 163
    012752  aa  143 141 156 000
    012753  55   000045 000027 
    012754  0a   000413 400000 
    012755  55   000040 000003 
    012756  aa  022 151 156 164         interpreter_macros
    012757  aa  145 162 160 162
    012760  aa  145 164 145 162
    012761  aa  137 155 141 143
    012762  aa  162 157 163 000
    012763  55   000053 000035 
    012764  0a   000155 400000 
    012765  55   000050 000003 
    012766  aa  013 163 151 156         single_inst
    012767  aa  147 154 145 137
    012770  aa  151 156 163 164
    012771  55   000062 000045 
    012772  0a   000000 400000 
    012773  55   000056 000003 
    012774  aa  016 157 160 145         operator_table
    012775  aa  162 141 164 157
    012776  aa  162 137 164 141
    012777  aa  142 154 145 000
    013000  55   000002 000053 
    013001  6a   000000 400002 
    013002  55   000065 000003 
    013003  aa  014 163 171 155         symbol_table
    013004  aa  142 157 154 137
    013005  aa  164 141 142 154
    013006  aa  145 000 000 000

DEFINITIONS HASH TABLE

    013007  aa   000000 000015 
    013010  5a   000053 000000 
    013011  aa   000000 000000 
    013012  aa   000000 000000 
    013013  5a   000035 000000 
    013014  aa   000000 000000 
    013015  aa   000000 000000 
    013016  5a   000027 000000 
    013017  5a   000062 000000 
    013020  5a   000013 000000 
    013021  aa   000000 000000 
    013022  5a   000045 000000 
    013023  aa   000000 000000 
    013024  5a   000021 000000 

NO EXTERNAL NAMES

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    013025  aa   000001 000000 
    013026  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    013027  aa   000000 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   012716 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000010 
    000007  a2   000000 000000 
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000010 
    000004  aa   000000 116606 
    000005  aa   116110 132154 
    000006  aa   000000 116633 
    000007  aa   300024 625666 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 001327 
    000020  aa   000000 000226 
    000021  aa   001300 001275 
    000022  aa   001314 000226 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   070056 061063 
    000030  aa   040123 145160 
    000031  aa   164145 155142 
    000032  aa   145162 040061 
    000033  aa   071070 070040 
    000034  aa   115141 162164 
    000035  aa   151156 163157 
    000036  aa   156056 123171 
    000037  aa   163115 141151 
    000040  aa   156164 056141 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   055164 141162 
    000045  aa   147145 164040 
    000046  aa   154066 070040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040154 151163 
    000057  aa   164040 163171 
    000060  aa   155142 157154 
    000061  aa   163040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000007 
    000066  aa   000122 000056 
    000067  aa   166313 020551 
    000070  aa   000000 116633 
    000071  aa   263574 600000 
    000072  aa   000136 000041 
    000073  aa   132413 665137 
    000074  aa   000000 113241 
    000075  aa   762522 000000 
    000076  aa   000147 000037 
    000077  aa   132413 665122 
    000100  aa   000000 113241 
    000101  aa   762516 600000 
    000102  aa   000157 000042 
    000103  aa   147777 464111 
    000104  aa   000000 115000 
    000105  aa   507463 000000 
    000106  aa   000170 000041 
    000107  aa   052721 247134 
    000110  aa   000000 105272 
    000111  aa   317215 400000 
    000112  aa   000201 000051 
    000113  aa   132413 665143 
    000114  aa   000000 113241 
    000115  aa   762524 000000 
    000116  aa   000214 000046 
    000117  aa   132413 665156 
    000120  aa   000000 113241 
    000121  aa   762525 200000 
    000122  aa   076163 160145          >spec>install>MR12.2-1209>fort_opt_macros_.alm
    000123  aa   143076 151156 
    000124  aa   163164 141154 
    000125  aa   154076 115122 
    000126  aa   061062 056062 
    000127  aa   055061 062060 
    000130  aa   071076 146157 
    000131  aa   162164 137157 
    000132  aa   160164 137155 
    000133  aa   141143 162157 
    000134  aa   163137 056141 
    000135  aa   154155 040040 
    000136  aa   076154 144144          >ldd>include>fort_macros.incl.alm
    000137  aa   076151 156143 
    000140  aa   154165 144145 
    000141  aa   076146 157162 
    000142  aa   164137 155141 
    000143  aa   143162 157163 
    000144  aa   056151 156143 
    000145  aa   154056 141154 
    000146  aa   155040 040040 
    000147  aa   076154 144144          >ldd>include>fort_equs.incl.alm
    000150  aa   076151 156143 
    000151  aa   154165 144145 
    000152  aa   076146 157162 
    000153  aa   164137 145161 
    000154  aa   165163 056151 
    000155  aa   156143 154056 
    000156  aa   141154 155040 
    000157  aa   076154 144144          >ldd>include>stack_header.incl.alm
    000160  aa   076151 156143 
    000161  aa   154165 144145 
    000162  aa   076163 164141 
    000163  aa   143153 137150 
    000164  aa   145141 144145 
    000165  aa   162056 151156 
    000166  aa   143154 056141 
    000167  aa   154155 040040 
    000170  aa   076154 144144          >ldd>include>stack_frame.incl.alm
    000171  aa   076151 156143 
    000172  aa   154165 144145 
    000173  aa   076163 164141 
    000174  aa   143153 137146 
    000175  aa   162141 155145 
    000176  aa   056151 156143 
    000177  aa   154056 141154 
    000200  aa   155040 040040 
    000201  aa   076154 144144          >ldd>include>fort_operator_table.incl.alm
    000202  aa   076151 156143 
    000203  aa   154165 144145 
    000204  aa   076146 157162 
    000205  aa   164137 157160 
    000206  aa   145162 141164 
    000207  aa   157162 137164 
    000210  aa   141142 154145 
    000211  aa   056151 156143 
    000212  aa   154056 141154 
    000213  aa   155040 040040 
    000214  aa   076154 144144          >ldd>include>fort_single_inst.incl.alm
    000215  aa   076151 156143 
    000216  aa   154165 144145 
    000217  aa   076146 157162 
    000220  aa   164137 163151 
    000221  aa   156147 154145 
    000222  aa   137151 156163 
    000223  aa   164056 151156 
    000224  aa   143154 056141 
    000225  aa   154155 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

         450    ...00001                 fort_opt_macros_:   253.
         452    ...00002                 fort_opt_macros_:   257.
         602    ...00004                 fort_opt_macros_:   385.
         643    ...00005                 fort_opt_macros_:   433.
         647    ...00006                 fort_opt_macros_:   437.
         652    ...00007                 fort_opt_macros_:   441.
        1063    ...00010                 fort_opt_macros_:   638.
        1065    ...00011                 fort_opt_macros_:   641.
        1434    ...00012                 fort_opt_macros_:   970.
        1436    ...00013                 fort_opt_macros_:   973.
        1666    ...00014                 fort_opt_macros_:  1196.
        1670    ...00015                 fort_opt_macros_:  1199.
        2156    ...00016                 fort_opt_macros_:  1458.
        2160    ...00017                 fort_opt_macros_:  1461.
        2316    ...00020                 fort_opt_macros_:  1632.
        2320    ...00021                 fort_opt_macros_:  1635.
        2672    ...00022                 fort_opt_macros_:  1960.
        2674    ...00023                 fort_opt_macros_:  1963.
        2704    ...00024                 fort_opt_macros_:  1971.
        3031    ...00025                 fort_opt_macros_:  2030.
        3134    ...00026                 fort_opt_macros_:  2064.
        5704    ...00027                 fort_opt_macros_:  4106.
        6371    ...00030                 fort_opt_macros_:  4542.
        6374    ...00031                 fort_opt_macros_:  4545.
        6377    ...00032                 fort_opt_macros_:  4548.
        6402    ...00033                 fort_opt_macros_:  4551.
        6405    ...00034                 fort_opt_macros_:  4555.
        6407    ...00035                 fort_opt_macros_:  4558.
        6411    ...00036                 fort_opt_macros_:  4561.
        6413    ...00037                 fort_opt_macros_:  4564.
        6415    ...00040                 fort_opt_macros_:  4567.
        6417    ...00041                 fort_opt_macros_:  4570.
        6526    ...00042                 fort_opt_macros_:  4679.
        6530    ...00043                 fort_opt_macros_:  4682.
        6532    ...00044                 fort_opt_macros_:  4685.
        6534    ...00045                 fort_opt_macros_:  4688.
        6536    ...00046                 fort_opt_macros_:  4691.
        6541    ...00047                 fort_opt_macros_:  4694.
        6544    ...00050                 fort_opt_macros_:  4697.
        6742    ...00051                 fort_opt_macros_:  4887.
        6744    ...00052                 fort_opt_macros_:  4890.
        6746    ...00053                 fort_opt_macros_:  4893.
        6750    ...00054                 fort_opt_macros_:  4896.
        6752    ...00055                 fort_opt_macros_:  4899.
        6755    ...00056                 fort_opt_macros_:  4902.
        6760    ...00057                 fort_opt_macros_:  4905.
        7124    ...00060                 fort_opt_macros_:  5051.
        7126    ...00061                 fort_opt_macros_:  5054.
        7130    ...00062                 fort_opt_macros_:  5057.
        7132    ...00063                 fort_opt_macros_:  5060.
        7134    ...00064                 fort_opt_macros_:  5063.
        7137    ...00065                 fort_opt_macros_:  5066.
        7150    ...00066                 fort_opt_macros_:  5078.
        7312    ...00067                 fort_opt_macros_:  5223.
        7314    ...00070                 fort_opt_macros_:  5226.
        7316    ...00071                 fort_opt_macros_:  5229.
        7320    ...00072                 fort_opt_macros_:  5232.
        7322    ...00073                 fort_opt_macros_:  5235.
        7325    ...00074                 fort_opt_macros_:  5238.
        7336    ...00075                 fort_opt_macros_:  5250.
        7532    ...00076                 fort_opt_macros_:  5437.
        7534    ...00077                 fort_opt_macros_:  5440.
        7536    ...00100                 fort_opt_macros_:  5443.
        7540    ...00101                 fort_opt_macros_:  5446.
        7542    ...00102                 fort_opt_macros_:  5449.
        7545    ...00103                 fort_opt_macros_:  5452.
        7550    ...00104                 fort_opt_macros_:  5455.
        7746    ...00105                 fort_opt_macros_:  5643.
        7750    ...00106                 fort_opt_macros_:  5646.
        7752    ...00107                 fort_opt_macros_:  5649.
        7754    ...00110                 fort_opt_macros_:  5652.
        7756    ...00111                 fort_opt_macros_:  5655.
        7761    ...00112                 fort_opt_macros_:  5658.
        7764    ...00113                 fort_opt_macros_:  5661.
       10064    ...00114                 fort_opt_macros_:  5755.
       10066    ...00115                 fort_opt_macros_:  5758.
       10077    ...00116                 fort_opt_macros_:  5771.
       10101    ...00117                 fort_opt_macros_:  5774.
       10131    ...00120                 fort_opt_macros_:  5820.
       10153    ...00121                 fort_opt_macros_:  5851.
       10253    ...00122                 fort_opt_macros_:  5954.
       10465    ...00123                 fort_opt_macros_:  6165.
       10540    ...00124                 fort_opt_macros_:  6239.
       10542    ...00125                 fort_opt_macros_:  6244.
       10552    ...00126                 fort_opt_macros_:  6257.
       10561    ...00127                 fort_opt_macros_:  6269.
       10570    ...00130                 fort_opt_macros_:  6279.
       10605    ...00131                 fort_opt_macros_:  6302.
       10622    ...00132                 fort_opt_macros_:  6320.
       10637    ...00133                 fort_opt_macros_:  6338.
       10654    ...00134                 fort_opt_macros_:  6359.
       10656    ...00135                 fort_opt_macros_:  6362.
       11123    ...00136                 fort_opt_macros_:  6635.
       11137    ...00137                 fort_opt_macros_:  6651.
       11153    ...00140                 fort_opt_macros_:  6668.
       11174    ...00141                 fort_opt_macros_:  6689.
       11177    ...00142                 fort_opt_macros_:  6693.
       11232    ...00143                 fort_opt_macros_:  6724.
       11235    ...00144                 fort_opt_macros_:  6728.
       11240    ...00145                 fort_opt_macros_:  6732.
       11330    ...00146                 fort_opt_macros_:  6835.
       11332    ...00147                 fort_opt_macros_:  6839.
       11336    ...00150                 fort_opt_macros_:  6844.
       11342    ...00151                 fort_opt_macros_:  6849.
       11356    ...00152                 fort_opt_macros_:  6864.
       11462    ...00153                 fort_opt_macros_:  7000.
       11465    ...00154                 fort_opt_macros_:  7005.
       11467    ...00155                 fort_opt_macros_:  7010.
       11473    ...00156                 fort_opt_macros_:  7016.
       11477    ...00157                 fort_opt_macros_:  7022.
       11522    ...00160                 fort_opt_macros_:  7049.
       11535    ...00161                 fort_opt_macros_:  7066.
       11546    ...00162                 fort_opt_macros_:  7080.
       11556    ...00163                 fort_opt_macros_:  7095.
       11620    ...00164                 fort_opt_macros_:  7156.
       11704    ...00165                 fort_opt_macros_:  7245.
       12063    ...00166                 fort_opt_macros_:  7462.
       12212    ...00167                 fort_opt_macros_:  7554.
       12406    ...00170                 fort_opt_macros_:  7762.
       12411    ...00171                 fort_opt_macros_:  7766.
       12577    ...00172                 fort_opt_macros_:  8015.
       12606    ...00173                 fort_opt_macros_:  8026.
       12610    ...00174                 fort_opt_macros_:  8029.
       12612    ...00175                 fort_opt_macros_:  8032.
       12614    ...00176                 fort_opt_macros_:  8035.
       12623    ...00177                 fort_opt_macros_:  8052.
       12625    ...00200                 fort_opt_macros_:  8054.
       12627    ...00201                 fort_opt_macros_:  8056.
       12631    ...00202                 fort_opt_macros_:  8058.
       12633    ...00203                 fort_opt_macros_:  8060.
       12635    ...00204                 fort_opt_macros_:  8061.
       12637    ...00205                 fort_opt_macros_:  8062.
       12641    ...00206                 fort_opt_macros_:  8063.
       12643    ...00207                 fort_opt_macros_:  8064.
       12645    ...00210                 fort_opt_macros_:  8065.
       12647    ...00211                 fort_opt_macros_:  8067.
       12651    ...00212                 fort_opt_macros_:  8068.
       12653    ...00213                 fort_opt_macros_:  8069.
       12655    ...00214                 fort_opt_macros_:  8070.
       12657    ...00215                 fort_opt_macros_:  8071.
         452    .._00000                 fort_opt_macros_:   253.
         455    .._00001                 fort_opt_macros_:   257.
          24    .._00003                 fort_opt_macros_:   268.
           1    .._00004                 fort_opt_macros_:   385.
           7    .._00007                 fort_opt_macros_:   403.
           2    .._00010                 fort_opt_macros_:   433.
           1    .._00014                 fort_opt_macros_:   437.
           1    .._00017                 fort_opt_macros_:   441.
           6    .._00022                 fort_opt_macros_:   445.
          24    .._00023                 fort_opt_macros_:   485.
           1    .._00024                 fort_opt_macros_:   638.
           1    .._00027                 fort_opt_macros_:   641.
           7    .._00032                 fort_opt_macros_:   645.
          24    .._00033                 fort_opt_macros_:   653.
           1    .._00034                 fort_opt_macros_:   970.
           1    .._00037                 fort_opt_macros_:   973.
           7    .._00042                 fort_opt_macros_:   977.
          24    .._00043                 fort_opt_macros_:   986.
           1    .._00044                 fort_opt_macros_:  1196.
           1    .._00047                 fort_opt_macros_:  1199.
           7    .._00052                 fort_opt_macros_:  1203.
          24    .._00053                 fort_opt_macros_:  1232.
           1    .._00054                 fort_opt_macros_:  1458.
           1    .._00057                 fort_opt_macros_:  1461.
           7    .._00062                 fort_opt_macros_:  1465.
           1    .._00063                 fort_opt_macros_:  1632.
           1    .._00066                 fort_opt_macros_:  1635.
           7    .._00071                 fort_opt_macros_:  1642.
           6    .._00072                 fort_opt_macros_:  1661.
           6    .._00073                 fort_opt_macros_:  1682.
           6    .._00074                 fort_opt_macros_:  1703.
          24    .._00075                 fort_opt_macros_:  1737.
           1    .._00076                 fort_opt_macros_:  1960.
           1    .._00101                 fort_opt_macros_:  1963.
           7    .._00104                 fort_opt_macros_:  1967.
           1    .._00105                 fort_opt_macros_:  1971.
         135    .._00110                 fort_opt_macros_:  2024.
           1    .._00111                 fort_opt_macros_:  2030.
         135    .._00114                 fort_opt_macros_:  2038.
           2    .._00115                 fort_opt_macros_:  2064.
           7    .._00121                 fort_opt_macros_:  2067.
           7    .._00122                 fort_opt_macros_:  2120.
           7    .._00123                 fort_opt_macros_:  2164.
           7    .._00124                 fort_opt_macros_:  2195.
          24    .._00125                 fort_opt_macros_:  2226.
           7    .._00126                 fort_opt_macros_:  2335.
          24    .._00127                 fort_opt_macros_:  2385.
           6    .._00130                 fort_opt_macros_:  2528.
          24    .._00131                 fort_opt_macros_:  2581.
           7    .._00132                 fort_opt_macros_:  2654.
           7    .._00133                 fort_opt_macros_:  2686.
           7    .._00134                 fort_opt_macros_:  2722.
          24    .._00135                 fort_opt_macros_:  2911.
           7    .._00136                 fort_opt_macros_:  2984.
           7    .._00137                 fort_opt_macros_:  3016.
           7    .._00140                 fort_opt_macros_:  3052.
          24    .._00141                 fort_opt_macros_:  3241.
          24    .._00142                 fort_opt_macros_:  3350.
           7    .._00143                 fort_opt_macros_:  3580.
           7    .._00144                 fort_opt_macros_:  3628.
           7    .._00145                 fort_opt_macros_:  3676.
           7    .._00146                 fort_opt_macros_:  3717.
           7    .._00147                 fort_opt_macros_:  3758.
           7    .._00150                 fort_opt_macros_:  3799.
           7    .._00151                 fort_opt_macros_:  3838.
           7    .._00152                 fort_opt_macros_:  3867.
           7    .._00153                 fort_opt_macros_:  3896.
           7    .._00154                 fort_opt_macros_:  3925.
           7    .._00155                 fort_opt_macros_:  3971.
           7    .._00156                 fort_opt_macros_:  3997.
          24    .._00157                 fort_opt_macros_:  4029.
           1    .._00160                 fort_opt_macros_:  4106.
           7    .._00163                 fort_opt_macros_:  4139.
           7    .._00164                 fort_opt_macros_:  4170.
           7    .._00165                 fort_opt_macros_:  4201.
           7    .._00166                 fort_opt_macros_:  4456.
           7    .._00167                 fort_opt_macros_:  4459.
           7    .._00170                 fort_opt_macros_:  4468.
           7    .._00171                 fort_opt_macros_:  4471.
           7    .._00172                 fort_opt_macros_:  4480.
           7    .._00173                 fort_opt_macros_:  4483.
           7    .._00174                 fort_opt_macros_:  4492.
           7    .._00175                 fort_opt_macros_:  4495.
           2    .._00176                 fort_opt_macros_:  4542.
           2    .._00202                 fort_opt_macros_:  4545.
           2    .._00206                 fort_opt_macros_:  4548.
           2    .._00212                 fort_opt_macros_:  4551.
           1    .._00216                 fort_opt_macros_:  4555.
           1    .._00221                 fort_opt_macros_:  4558.
           1    .._00224                 fort_opt_macros_:  4561.
           1    .._00227                 fort_opt_macros_:  4564.
           1    .._00232                 fort_opt_macros_:  4567.
           1    .._00235                 fort_opt_macros_:  4570.
          24    .._00240                 fort_opt_macros_:  4578.
           1    .._00241                 fort_opt_macros_:  4679.
           1    .._00244                 fort_opt_macros_:  4682.
           1    .._00247                 fort_opt_macros_:  4685.
           1    .._00252                 fort_opt_macros_:  4688.
           2    .._00255                 fort_opt_macros_:  4691.
           2    .._00261                 fort_opt_macros_:  4694.
           2    .._00265                 fort_opt_macros_:  4697.
           7    .._00271                 fort_opt_macros_:  4701.
           7    .._00272                 fort_opt_macros_:  4746.
           7    .._00273                 fort_opt_macros_:  4767.
          24    .._00274                 fort_opt_macros_:  4786.
           1    .._00275                 fort_opt_macros_:  4887.
           1    .._00300                 fort_opt_macros_:  4890.
           1    .._00303                 fort_opt_macros_:  4893.
           1    .._00306                 fort_opt_macros_:  4896.
           2    .._00311                 fort_opt_macros_:  4899.
           2    .._00315                 fort_opt_macros_:  4902.
           2    .._00321                 fort_opt_macros_:  4905.
           7    .._00325                 fort_opt_macros_:  4909.
           7    .._00326                 fort_opt_macros_:  4954.
           7    .._00327                 fort_opt_macros_:  4975.
          24    .._00330                 fort_opt_macros_:  4992.
           1    .._00331                 fort_opt_macros_:  5051.
           1    .._00334                 fort_opt_macros_:  5054.
           1    .._00337                 fort_opt_macros_:  5057.
           1    .._00342                 fort_opt_macros_:  5060.
           2    .._00345                 fort_opt_macros_:  5063.
           2    .._00351                 fort_opt_macros_:  5066.
           1    .._00355                 fort_opt_macros_:  5078.
           7    .._00360                 fort_opt_macros_:  5086.
           7    .._00361                 fort_opt_macros_:  5131.
           7    .._00362                 fort_opt_macros_:  5152.
          24    .._00363                 fort_opt_macros_:  5164.
           1    .._00364                 fort_opt_macros_:  5223.
           1    .._00367                 fort_opt_macros_:  5226.
           1    .._00372                 fort_opt_macros_:  5229.
           1    .._00375                 fort_opt_macros_:  5232.
           2    .._00400                 fort_opt_macros_:  5235.
           2    .._00404                 fort_opt_macros_:  5238.
           1    .._00410                 fort_opt_macros_:  5250.
           7    .._00413                 fort_opt_macros_:  5258.
           7    .._00414                 fort_opt_macros_:  5303.
           7    .._00415                 fort_opt_macros_:  5324.
          24    .._00416                 fort_opt_macros_:  5336.
           1    .._00417                 fort_opt_macros_:  5437.
           1    .._00422                 fort_opt_macros_:  5440.
           1    .._00425                 fort_opt_macros_:  5443.
           1    .._00430                 fort_opt_macros_:  5446.
           2    .._00433                 fort_opt_macros_:  5449.
           2    .._00437                 fort_opt_macros_:  5452.
           2    .._00443                 fort_opt_macros_:  5455.
           7    .._00447                 fort_opt_macros_:  5459.
           7    .._00450                 fort_opt_macros_:  5504.
           7    .._00451                 fort_opt_macros_:  5525.
          24    .._00452                 fort_opt_macros_:  5542.
           1    .._00453                 fort_opt_macros_:  5643.
           1    .._00456                 fort_opt_macros_:  5646.
           1    .._00461                 fort_opt_macros_:  5649.
           1    .._00464                 fort_opt_macros_:  5652.
           2    .._00467                 fort_opt_macros_:  5655.
           2    .._00473                 fort_opt_macros_:  5658.
           2    .._00477                 fort_opt_macros_:  5661.
           7    .._00503                 fort_opt_macros_:  5665.
           7    .._00504                 fort_opt_macros_:  5710.
           7    .._00505                 fort_opt_macros_:  5731.
           1    .._00506                 fort_opt_macros_:  5755.
           1    .._00511                 fort_opt_macros_:  5758.
           1    .._00514                 fort_opt_macros_:  5771.
           1    .._00517                 fort_opt_macros_:  5774.
          12    .._00522                 fort_opt_macros_:  5787.
           1    .._00523                 fort_opt_macros_:  5820.
           1    .._00526                 fort_opt_macros_:  5851.
          12    .._00531                 fort_opt_macros_:  5909.
           1    .._00532                 fort_opt_macros_:  5954.
          12    .._00535                 fort_opt_macros_:  6003.
           7    .._00536                 fort_opt_macros_:  6015.
           1    .._00537                 fort_opt_macros_:  6165.
           7    .._00542                 fort_opt_macros_:  6184.
           0    .._00543                 fort_opt_macros_:  6239.
           1    .._00545                 fort_opt_macros_:  6244.
           1    .._00550                 fort_opt_macros_:  6257.
           1    .._00553                 fort_opt_macros_:  6269.
           1    .._00556                 fort_opt_macros_:  6279.
           1    .._00561                 fort_opt_macros_:  6302.
           1    .._00564                 fort_opt_macros_:  6320.
           1    .._00567                 fort_opt_macros_:  6338.
           1    .._00572                 fort_opt_macros_:  6359.
           1    .._00575                 fort_opt_macros_:  6362.
           7    .._00600                 fort_opt_macros_:  6410.
           7    .._00601                 fort_opt_macros_:  6463.
           7    .._00602                 fort_opt_macros_:  6554.
           1    .._00603                 fort_opt_macros_:  6635.
           1    .._00606                 fort_opt_macros_:  6651.
           1    .._00611                 fort_opt_macros_:  6668.
           1    .._00614                 fort_opt_macros_:  6689.
           1    .._00617                 fort_opt_macros_:  6693.
           1    .._00622                 fort_opt_macros_:  6724.
           1    .._00625                 fort_opt_macros_:  6728.
           1    .._00630                 fort_opt_macros_:  6732.
          16    .._00633                 fort_opt_macros_:  6773.
           0    .._00634                 fort_opt_macros_:  6835.
           1    .._00636                 fort_opt_macros_:  6839.
           1    .._00641                 fort_opt_macros_:  6844.
           1    .._00644                 fort_opt_macros_:  6849.
           1    .._00647                 fort_opt_macros_:  6864.
          32    .._00652                 fort_opt_macros_:  6900.
           1    .._00653                 fort_opt_macros_:  7000.
           0    .._00656                 fort_opt_macros_:  7005.
           1    .._00660                 fort_opt_macros_:  7010.
           1    .._00663                 fort_opt_macros_:  7016.
           1    .._00666                 fort_opt_macros_:  7022.
           1    .._00671                 fort_opt_macros_:  7049.
           1    .._00674                 fort_opt_macros_:  7066.
           1    .._00677                 fort_opt_macros_:  7080.
           1    .._00702                 fort_opt_macros_:  7095.
           0    .._00705                 fort_opt_macros_:  7156.
           1    .._00707                 fort_opt_macros_:  7245.
           1    .._00712                 fort_opt_macros_:  7462.
         135    .._00715                 fort_opt_macros_:  7543.
           1    .._00716                 fort_opt_macros_:  7554.
           1    .._00721                 fort_opt_macros_:  7762.
           1    .._00724                 fort_opt_macros_:  7766.
           1    .._00727                 fort_opt_macros_:  8015.
           1    .._00732                 fort_opt_macros_:  8026.
           1    .._00735                 fort_opt_macros_:  8029.
           1    .._00740                 fort_opt_macros_:  8032.
           0    .._00743                 fort_opt_macros_:  8035.
           1    .._00745                 fort_opt_macros_:  8052.
       12661    .._00746                 fort_opt_macros_:  8052.
           1    .._00750                 fort_opt_macros_:  8054.
       12662    .._00751                 fort_opt_macros_:  8054.
           1    .._00753                 fort_opt_macros_:  8056.
       12665    .._00754                 fort_opt_macros_:  8056.
           1    .._00756                 fort_opt_macros_:  8058.
       12670    .._00757                 fort_opt_macros_:  8058.
           1    .._00761                 fort_opt_macros_:  8060.
       12673    .._00762                 fort_opt_macros_:  8060.
           1    .._00764                 fort_opt_macros_:  8061.
       12676    .._00765                 fort_opt_macros_:  8061.
           1    .._00767                 fort_opt_macros_:  8062.
       12700    .._00770                 fort_opt_macros_:  8062.
           1    .._00772                 fort_opt_macros_:  8063.
       12701    .._00773                 fort_opt_macros_:  8063.
           1    .._00775                 fort_opt_macros_:  8064.
       12702    .._00776                 fort_opt_macros_:  8064.
           1    .._01000                 fort_opt_macros_:  8065.
       12703    .._01001                 fort_opt_macros_:  8065.
           1    .._01003                 fort_opt_macros_:  8067.
       12704    .._01004                 fort_opt_macros_:  8067.
           1    .._01006                 fort_opt_macros_:  8068.
       12707    .._01007                 fort_opt_macros_:  8068.
           1    .._01011                 fort_opt_macros_:  8069.
       12711    .._01012                 fort_opt_macros_:  8069.
           1    .._01014                 fort_opt_macros_:  8070.
       12713    .._01015                 fort_opt_macros_:  8070.
           1    .._01017                 fort_opt_macros_:  8071.
       12715    .._01020                 fort_opt_macros_:  8071.
       12661    .strings.                fort_opt_macros_:  8052, 8054, 8056, 8058, 8060, 8061, 8062, 8063, 8064, 8065, 8067,
                                                            8068, 8069, 8070, 8071.
           0    .text.                   fort_opt_macros_:   184, 8052, 8054, 8056, 8058, 8060, 8061, 8062, 8063, 8064, 8065,
                                                            8067, 8068, 8069, 8070, 8071.
        1000    a                        fort_opt_macros_:   398,  399,  411,  412, 1368, 1916, 1929, 4713, 4753, 4921, 4961,
                                                            5081, 5082, 5098, 5138, 5253, 5254, 5270, 5310, 5471, 5511, 5677,
                                                            5717, 5750, 5752, 5766, 5768, 5782, 5784, 5830, 5831, 5844, 5845,
                                                            5877, 5972, 6818,
                                         fort_equs:     74.
         452    abort_list               fort_opt_macros_:   182,  256.
        3137    abs                      fort_opt_macros_:  2038, 2066.
        3153    abs.1                    fort_opt_macros_:  2067, 2079.
        6011    acos                     fort_opt_macros_:  2038, 4200.
        6016    acos.1                   fort_opt_macros_:  4201, 4203.
        6021    acos.2                   fort_opt_macros_:  4205, 4210.
        1305    acos_                    fort_opt_macros_:  4215,
                                         fort_equs:    238.
        6020    acos_i                   fort_opt_macros_:  4201, 4207.
         713    add                      fort_opt_macros_:   483,
                                         fort_operator_table:       18.
        1033    add_cc                   fort_opt_macros_:   485,  602.
        1044    add_cc.01                fort_opt_macros_:   613,  631.
        1051    add_cc.1                 fort_opt_macros_:   607,  620.
        1052    add_cc.11                fort_opt_macros_:   622,  635.
        1057    add_cc.2                 fort_opt_macros_:   608,  629.
        1061    add_cc.3                 fort_opt_macros_:   609,  633.
        1011    add_cd                   fort_opt_macros_:   485,  575.
        1024    add_cd.1                 fort_opt_macros_:   580,  590.
        1025    add_cd.11                fort_opt_macros_:   592,  600.
        1031    add_cd.2                 fort_opt_macros_:   581,  598.
         760    add_ci                   fort_opt_macros_:   485,  535.
         766    add_cr                   fort_opt_macros_:   485,  545.
        1001    add_cr.1                 fort_opt_macros_:   540,  550,  560.
        1002    add_cr.11                fort_opt_macros_:   562,  570.
        1006    add_cr.2                 fort_opt_macros_:   551,  568.
        1010    add_dc                   fort_opt_macros_:   485,  572.
         745    add_dd                   fort_opt_macros_:   485,  513.
         737    add_di                   fort_opt_macros_:   485,  503.
         751    add_dr                   fort_opt_macros_:   485,  521.
         755    add_dr.1                 fort_opt_macros_:   522,  528.
        1063    add_e1                   fort_opt_macros_:   485,  637,  645.
        1065    add_e2                   fort_opt_macros_:   485,  640.
         757    add_ic                   fort_opt_macros_:   485,  532.
         736    add_id                   fort_opt_macros_:   485,  500.
         727    add_ii                   fort_opt_macros_:   485,  487.
         732    add_ir                   fort_opt_macros_:   485,  492.
         765    add_rc                   fort_opt_macros_:   485,  542.
         750    add_rd                   fort_opt_macros_:   485,  518.
         733    add_ri                   fort_opt_macros_:   485,  495.
         742    add_rr                   fort_opt_macros_:   485,  508.
        1067    add_tl                   fort_opt_macros_:   485,  643.
        1075    add_tl.1                 fort_opt_macros_:   645,  647.
        5532    aimag                    fort_opt_macros_:  2038, 3961.
        5535    aimag.p                  fort_opt_macros_:  3962, 3967.
        5420    aint                     fort_opt_macros_:  2038, 3837.
        5433    aint.dp                  fort_opt_macros_:  3838, 3850, 3859.
        5425    aint.int                 fort_opt_macros_:  3838, 3840.
        5441    aint.p                   fort_opt_macros_:  3838, 3862.
        5427    aint.real                fort_opt_macros_:  3838, 3844.
      777760    all                      fort_opt_macros_:  7340, 7612, 7671, 7693,
                                         fort_equs:    124.
         110    all_ones                 fort_opt_macros_:  2075,
                                         fort_equs:    177.
         242    almost_one               fort_opt_macros_:  1598, 1606,
                                         fort_equs:    280.
        3205    alog                     fort_opt_macros_:  2038, 2119.
        3212    alog.1                   fort_opt_macros_:  2120, 2122.
        3215    alog.2                   fort_opt_macros_:  2124, 2129.
        3247    alog10                   fort_opt_macros_:  2038, 2163.
        3254    alog10.1                 fort_opt_macros_:  2164, 2166.
        3257    alog10.2                 fort_opt_macros_:  2168, 2173.
        1313    alog10_                  fort_opt_macros_:  2178,
                                         fort_equs:    211.
        3256    alog10_i                 fort_opt_macros_:  2164, 2170.
        3214    alog_i                   fort_opt_macros_:  2120, 2126.
        4104    amax0                    fort_opt_macros_:  2038, 2754.
        4112    amax0.loop               fort_opt_macros_:  2763, 2774.
        4127    amax0.p                  fort_opt_macros_:  2756, 2758, 2775, 2781.
        4125    amax0.r                  fort_opt_macros_:  2772, 2777.
        4130    amax1                    fort_opt_macros_:  2038, 2784.
        4141    amax1.loop               fort_opt_macros_:  2796, 2810.
        4143    amax1.loop.1             fort_opt_macros_:  2792, 2794, 2800.
        4154    amax1.p                  fort_opt_macros_:  2786, 2788, 2812.
        4451    amin0                    fort_opt_macros_:  2038, 3084.
        4457    amin0.loop               fort_opt_macros_:  3093, 3105.
        4474    amin0.p                  fort_opt_macros_:  3086, 3088, 3106, 3112.
        4472    amin0.r                  fort_opt_macros_:  3102, 3108.
        4475    amin1                    fort_opt_macros_:  2038, 3115.
        4506    amin1.loop               fort_opt_macros_:  3127, 3141.
        4510    amin1.loop.1             fort_opt_macros_:  3123, 3125, 3131.
        4521    amin1.p                  fort_opt_macros_:  3117, 3119, 3143.
        4670    amod                     fort_opt_macros_:  2038, 3308.
        4674    amod.1                   fort_opt_macros_:  3248, 3252, 3263, 3314.
        4722    amod.p                   fort_opt_macros_:  3310, 3312, 3345.
       10070    and                      fort_opt_macros_:  5760,
                                         fort_operator_table:       31.
        6220    and.tl                   fort_opt_macros_:  2038, 4420.
        6224    and.tl.loop              fort_opt_macros_:  4426, 4434.
        6234    and.tl.r                 fort_opt_macros_:  4430, 4436.
       10077    and_e1                   fort_opt_macros_:  5764, 5770.
       10101    and_e2                   fort_opt_macros_:  5762, 5773.
        5442    anint                    fort_opt_macros_:  2038, 3866.
        5455    anint.dp                 fort_opt_macros_:  3867, 3879, 3888.
        5447    anint.int                fort_opt_macros_:  3867, 3869.
        5463    anint.p                  fort_opt_macros_:  3867, 3891.
        5451    anint.real               fort_opt_macros_:  3867, 3873.
        1400    aq                       fort_opt_macros_:   378,  379,  419,  420, 1185, 1193, 1378, 1447, 1455, 1731, 1732,
                                                            1876, 1903, 1942, 1947, 1957, 2100, 2153, 2161, 2368, 2376, 2563,
                                                            2571, 3613, 3621, 3661, 3669, 4014, 4015, 4726, 4761, 4934, 4969,
                                                            5069, 5111, 5146, 5241, 5283, 5318, 5484, 5519, 5690, 5725, 7568,
                                         fort_equs:     75.
       40000    arg1                     fort_opt_macros_:   199,  204,  209,  216,  220,  223,  245,  273,  274,  278,  283,
                                                             287,  299,  300,  305,  310,  316,  321,  326,  331,  336,  341,
                                                             347,  356,  362,  363,  365,  370,  379,  388,  390,  393,  394,
                                                             399,  403,  428,  433,  441,  445,  450,  451,  455,  457,  463,
                                                             464,  472,  479,  480,  489,  493,  497,  501,  505,  510,  515,
                                                             519,  524,  529,  533,  536,  543,  546,  551,  553,  555,  561,
                                                             564,  573,  576,  581,  583,  585,  591,  594,  603,  609,  611,
                                                             615,  621,  624,  630,  638,  645,  648,  656,  661,  664,  674,
                                                             679,  687,  691,  694,  704,  709,  717,  723,  730,  736,  743,
                                                             749,  756,  762,  769,  777,  779,  783,  808,  815,  833,  837,
                                                             842,  844,  846,  855,  858,  871,  878,  896,  900,  905,  907,
                                                             909,  918,  921,  930,  937,  939,  943,  951,  954,  962,  970,
                                                             977,  980,  990,  995, 1005, 1009, 1014, 1018, 1022, 1026, 1030,
                                                            1033, 1037, 1040, 1047, 1050, 1054, 1057, 1066, 1069, 1073, 1078,
                                                            1083, 1087, 1090, 1119, 1122, 1128, 1130, 1133, 1139, 1143, 1152,
                                                            1155, 1161, 1163, 1166, 1172, 1176, 1185, 1196, 1203, 1207, 1212,
                                                            1222, 1226, 1235, 1240, 1243, 1248, 1252, 1255, 1260, 1267, 1272,
                                                            1276, 1286, 1291, 1296, 1304, 1309, 1318, 1322, 1328, 1335, 1339,
                                                            1368, 1381, 1387, 1389, 1393, 1399, 1405, 1411, 1413, 1417, 1423,
                                                            1425, 1429, 1435, 1441, 1447, 1458, 1465, 1466, 1632, 1635, 1642,
                                                            1646, 1661, 1668, 1672, 1676, 1682, 1689, 1693, 1697, 1703, 1719,
                                                            1727, 1731, 1742, 1756, 1760, 1767, 1781, 1785, 1792, 1806, 1821,
                                                            1836, 1842, 1856, 1860, 1863, 1875, 1876, 1908, 1910, 1916, 1933,
                                                            1947, 1960, 2023, 2030, 2064, 4106, 4542, 4545, 4548, 4551, 4582,
                                                            4587, 4592, 4597, 4603, 4605, 4611, 4614, 4619, 4623, 4626, 4631,
                                                            4637, 4642, 4648, 4653, 4659, 4664, 4670, 4675, 4682, 4688, 4691,
                                                            4694, 4697, 4701, 4708, 4711, 4714, 4721, 4724, 4727, 4735, 4743,
                                                            4754, 4762, 4772, 4777, 4790, 4795, 4800, 4805, 4811, 4813, 4819,
                                                            4822, 4827, 4831, 4834, 4839, 4845, 4850, 4856, 4861, 4867, 4872,
                                                            4878, 4883, 4890, 4896, 4899, 4902, 4905, 4909, 4916, 4919, 4921,
                                                            4929, 4932, 4934, 4944, 4951, 4961, 4969, 4980, 4985, 4996, 5000,
                                                            5004, 5011, 5015, 5019, 5023, 5028, 5033, 5037, 5042, 5047, 5054,
                                                            5060, 5063, 5066, 5070, 5075, 5082, 5086, 5093, 5096, 5099, 5106,
                                                            5109, 5112, 5120, 5128, 5139, 5147, 5156, 5168, 5172, 5176, 5183,
                                                            5187, 5191, 5195, 5200, 5205, 5209, 5214, 5219, 5226, 5232, 5235,
                                                            5238, 5242, 5247, 5254, 5258, 5265, 5268, 5271, 5278, 5281, 5284,
                                                            5292, 5300, 5311, 5319, 5328, 5340, 5345, 5350, 5355, 5361, 5363,
                                                            5369, 5372, 5377, 5381, 5384, 5389, 5395, 5400, 5406, 5411, 5417,
                                                            5422, 5428, 5433, 5440, 5446, 5449, 5452, 5455, 5459, 5466, 5469,
                                                            5472, 5479, 5482, 5485, 5493, 5501, 5512, 5520, 5530, 5535, 5546,
                                                            5551, 5556, 5561, 5567, 5569, 5575, 5578, 5583, 5587, 5590, 5595,
                                                            5601, 5606, 5612, 5617, 5623, 5628, 5634, 5639, 5646, 5652, 5655,
                                                            5658, 5661, 5665, 5672, 5675, 5677, 5685, 5688, 5690, 5700, 5707,
                                                            5717, 5725, 5736, 5741, 5747, 5751, 5755, 5763, 5767, 5771, 5825,
                                                            5831, 5839, 5845, 5855, 5858, 5859, 5880, 5881, 5889, 5890, 5907,
                                                            5912, 5916, 5920, 5924, 5928, 5932, 5936, 5940, 5945, 5949, 5950,
                                                            5975, 5976, 5984, 5985, 6002, 6011, 6013, 6015, 6018, 6025, 6030,
                                                            6037, 6042, 6051, 6144, 6150, 6156, 6174, 6201, 6204, 6208, 6225,
                                                            6231, 6232, 6244, 6262, 6282, 6288, 6289, 6297, 6298, 6307, 6311,
                                                            6312, 6325, 6329, 6330, 6352, 6359, 6362, 6365, 6366, 6376, 6387,
                                                            6397, 6407, 6408, 6434, 6448, 6512, 6523, 6524, 6525, 6531, 6539,
                                                            6546, 6548, 6552, 6624, 6628, 6640, 6644, 6657, 6661, 6674, 6676,
                                                            6678, 6698, 6700, 6717, 6830, 6854, 7030, 7041, 7049, 7059, 7074,
                                                            7080, 7095, 7098, 7109, 7130, 7133, 7139, 7142, 7148, 7185, 7188,
                                                            7204, 7207, 7245, 7291, 7298, 7349, 7398, 7399, 7413, 7456, 7457,
                                                            7462, 7486, 7541, 7554, 7559, 7577, 7583, 7589, 7610, 7614, 7616,
                                                            7626, 7663, 7669, 7673, 7686, 7692, 7694, 7702, 7709, 7732, 7789,
                                                            7807, 7817, 7829, 7830, 7843, 7860, 7877, 7894, 7904, 7913, 7923,
                                                            7943, 7947, 7965, 7978, 7996, 8012, 8026,
                                         fort_equs:     30.
      100000    arg2                     fort_opt_macros_:   201,  246,  279,  282,  288,  325,  330,  335,  340,  355,  360,
                                                             369,  374,  378,  392,  398,  427,  456,  468,  522,  525,  550,
                                                             556,  569,  580,  586,  599,  604,  607,  608,  612,  616,  625,
                                                             634,  641,  657,  668,  672,  680,  698,  702,  710,  721,  724,
                                                             734,  737,  747,  750,  760,  763,  773,  787,  791,  792,  799,
                                                             800,  804,  809,  811,  816,  821,  824,  841,  847,  863,  867,
                                                             872,  874,  879,  884,  887,  904,  910,  926,  931,  935,  936,
                                                             940,  944,  955,  966,  973,  981,  991, 1004, 1010, 1031, 1043,
                                                            1048, 1062, 1070, 1071, 1074, 1082, 1094, 1098, 1102, 1106, 1107,
                                                            1114, 1115, 1123, 1127, 1131, 1134, 1142, 1148, 1156, 1160, 1164,
                                                            1167, 1175, 1181, 1186, 1187, 1190, 1199, 1208, 1221, 1227, 1236,
                                                            1264, 1265, 1268, 1279, 1283, 1284, 1287, 1299, 1303, 1305, 1312,
                                                            1316, 1317, 1343, 1347, 1351, 1355, 1356, 1363, 1364, 1371, 1372,
                                                            1375, 1382, 1386, 1390, 1394, 1403, 1406, 1418, 1422, 1426, 1430,
                                                            1439, 1442, 1448, 1449, 1452, 1461, 1470, 1743, 1745, 1749, 1768,
                                                            1770, 1774, 1793, 1795, 1799, 1808, 1810, 1814, 1823, 1825, 1829,
                                                            1843, 1845, 1849, 1885, 1889, 1891, 1902, 1903, 1929, 1949, 1950,
                                                            1954, 1963, 2027, 2580, 2612, 2672, 2673, 2679, 2708, 2709, 2715,
                                                            2750, 2751, 2755, 2772, 2773, 2785, 2792, 2808, 2809, 2816, 2833,
                                                            2834, 2841, 2848, 2864, 2865, 2879, 2886, 2902, 2903, 2910, 2942,
                                                            3002, 3003, 3009, 3038, 3039, 3045, 3080, 3081, 3085, 3102, 3104,
                                                            3116, 3123, 3139, 3140, 3147, 3164, 3165, 3172, 3179, 3195, 3196,
                                                            3210, 3217, 3233, 3234, 3993, 3994, 4421, 4430, 4431, 4433, 4504,
                                                            4513, 4514, 4516, 4523, 4532, 4533, 4535, 4583, 4585, 4588, 4635,
                                                            4638, 4646, 4649, 4657, 4660, 4668, 4671, 4679, 4685, 4691, 4694,
                                                            4697, 4713, 4726, 4736, 4746, 4751, 4753, 4759, 4761, 4770, 4773,
                                                            4791, 4793, 4796, 4843, 4846, 4854, 4857, 4865, 4868, 4876, 4879,
                                                            4887, 4893, 4899, 4902, 4905, 4922, 4935, 4943, 4954, 4959, 4962,
                                                            4967, 4970, 4978, 4981, 4997, 5040, 5043, 5051, 5057, 5063, 5066,
                                                            5121, 5131, 5136, 5144, 5169, 5212, 5215, 5223, 5229, 5235, 5238,
                                                            5293, 5303, 5308, 5316, 5341, 5343, 5346, 5393, 5396, 5404, 5407,
                                                            5415, 5418, 5426, 5429, 5437, 5443, 5449, 5452, 5455, 5471, 5484,
                                                            5494, 5504, 5509, 5511, 5517, 5519, 5528, 5531, 5547, 5549, 5552,
                                                            5599, 5602, 5610, 5613, 5621, 5624, 5632, 5635, 5643, 5649, 5655,
                                                            5658, 5661, 5678, 5691, 5699, 5710, 5715, 5718, 5723, 5726, 5734,
                                                            5737, 5758, 5774, 5897, 5992, 6055, 6057, 6062, 6066, 6067, 6090,
                                                            6091, 6095, 6096, 6105, 6106, 6110, 6112, 6113, 6118, 6120, 6121,
                                                            6134, 6136, 6137, 6151, 6152, 6222, 6235, 6287, 6296, 6313, 6331,
                                                            6550, 6603, 6627, 6643, 6660, 6680, 6701, 6704, 6708, 6710, 6857,
                                                            6886, 7131, 7136, 7229, 7306, 7575, 7605, 7655, 7711, 7718, 7735,
                                                            7808, 7818, 7841, 7844, 7845, 7861, 7862, 7875, 7878, 7879, 7963,
                                                            7979, 7982, 8000, 8001, 8029,
                                         fort_equs:     31.
      140000    arg3                     fort_opt_macros_:  2024, 2038, 6054, 6056, 6058, 6063, 6068, 6069, 6077, 6078, 6099,
                                                            6100, 6104, 6122, 6124, 6125, 6129, 6131, 6132, 6157, 6158, 6218,
                                                            6221, 6712, 6759, 6890, 6924, 6944, 6962, 6981, 7720, 7727, 7964,
                                                            7976, 8021, 8032,
                                         fort_equs:     32.
      200000    arg4                     fort_opt_macros_:  2026, 6064, 6072, 6073, 6081, 6082, 6086, 6087, 6114, 6145, 6146,
                                                            6763, 6787, 6802, 6820, 7977,
                                         fort_equs:     33.
      240000    arg5                     fort_opt_macros_:  2072, 2080, 2090, 2100, 2123, 2141, 2153, 2167, 2185, 2198, 2216,
                                                            2255, 2298, 2311, 2313, 2317, 2338, 2356, 2368, 2388, 2390, 2396,
                                                            2399, 2401, 2406, 2466, 2468, 2469, 2475, 2479, 2481, 2485, 2487,
                                                            2488, 2494, 2498, 2500, 2501, 2507, 2511, 2513, 2514, 2520, 2531,
                                                            2550, 2563, 3302, 3309, 3311, 3315, 3325, 3327, 3331, 3342, 3353,
                                                            3355, 3361, 3426, 3434, 3436, 3442, 3453, 3583, 3601, 3613, 3631,
                                                            3649, 3661, 3676, 3683, 3696, 3717, 3724, 3737, 3758, 3765, 3778,
                                                            3799, 3802, 3818, 3838, 3845, 3851, 3867, 3874, 3880, 3896, 3899,
                                                            3903, 3909, 3925, 3932, 3936, 3942, 3964, 3971, 3978, 3982, 3986,
                                                            3997, 4004, 4008, 4014, 4034, 4036, 4050, 4052, 4059, 4067, 4074,
                                                            4088, 4109, 4115, 4117, 4119, 4130, 4142, 4160, 4173, 4191, 4204,
                                                            4222, 4408, 4410, 4440, 4441, 4445, 4448, 4456, 4462, 4468, 4474,
                                                            4480, 4486, 4492, 4498, 4542,
                                         fort_equs:     34.
      300000    arg6                     fort_opt_macros_:  2258, 2259, 2264, 2266, 2301, 2302, 2306, 2320, 2321, 2326, 2397,
                                                            2401, 2402, 2404, 2467, 2469, 2470, 2472, 2486, 2488, 2489, 2491,
                                                            2499, 2501, 2502, 2504, 2512, 2514, 2515, 2517, 3303, 3316, 3317,
                                                            3320, 3334, 3335, 3337, 3359, 3360, 3364, 3424, 3425, 3429, 3440,
                                                            3441, 3446, 3451, 3452, 4033, 4038, 4040, 4045, 4046, 4048, 4058,
                                                            4061, 4073, 4078, 4459, 4463, 4471, 4475, 4483, 4487, 4495, 4499,
                                                            4545,
                                         fort_equs:     35.
      340000    arg7                     fort_equs:     36.
       10751    array_common             fort_opt_macros_:  6456, 6461.
      100000    array_ref                fort_opt_macros_:  4709, 4722, 4741, 4917, 4930, 4949, 5094, 5107, 5126, 5266, 5279,
                                                            5298, 5467, 5480, 5499, 5673, 5686, 5705,
                                         fort_equs:     96.
        5761    asin                     fort_opt_macros_:  2038, 4169.
        5766    asin.1                   fort_opt_macros_:  4170, 4172.
        5771    asin.2                   fort_opt_macros_:  4174, 4179.
        1303    asin_                    fort_opt_macros_:  4184,
                                         fort_equs:    236.
        5770    asin_i                   fort_opt_macros_:  4170, 4176.
         456    assign                   fort_opt_macros_:   263,
                                         fort_operator_table:       17.
         575    assign_cc                fort_opt_macros_:   268,  377.
         573    assign_cd                fort_opt_macros_:   268,  373.
         631    assign_ch                fort_opt_macros_:   403,  416.
         555    assign_ci                fort_opt_macros_:   268,  350.
         562    assign_cr                fort_opt_macros_:   268,  359.
         563    assign_cr.01             fort_opt_macros_:   352,  361,  375.
         570    assign_dc                fort_opt_macros_:   268,  368.
         540    assign_dd                fort_opt_macros_:   268,  329.
         631    assign_dh                fort_opt_macros_:   403,  415.
         532    assign_di                fort_opt_macros_:   268,  319.
         546    assign_dr                fort_opt_macros_:   268,  339.
         652    assign_e1                fort_opt_macros_:   268,  440,  445,  455.
         600    assign_e2                fort_opt_macros_:   268,  382.
         617    assign_h                 fort_opt_macros_:   384,  402.
         636    assign_hh                fort_opt_macros_:   403,  424.
         513    assign_i.check_zero      fort_opt_macros_:   296,  314,  345.
         551    assign_ic                fort_opt_macros_:   268,  344.
         526    assign_id                fort_opt_macros_:   268,  313.
         624    assign_ih                fort_opt_macros_:   403,  405.
         474    assign_ii                fort_opt_macros_:   268,  270.
         506    assign_ii.check_induction_var  fort_opt_macros_:   278,  279,  286.
         503    assign_ii.normal         fort_opt_macros_:   281,  287,  288.
         501    assign_ii.not_zero       fort_opt_macros_:   271,  272,  277,  298.
         512    assign_ir                fort_opt_macros_:   268,  293.
         520    assign_ir.not_const      fort_opt_macros_:   294,  303.
         604    assign_l                 fort_opt_macros_:   383,  387.
         614    assign_l.not_zero        fort_opt_macros_:   391,  392,  397.
       10564    assign_label             fort_opt_macros_:  6272,
                                         fort_operator_table:       38.
       10572    assign_label.1           fort_opt_macros_:  6277, 6281.
       10601    assign_label.2           fort_opt_macros_:  6283, 6295.
       10605    assign_label.e           fort_opt_macros_:  6276, 6301.
         624    assign_lh                fort_opt_macros_:   403,  407.
         557    assign_rc                fort_opt_macros_:   268,  354.
         543    assign_rd                fort_opt_macros_:   268,  334.
         624    assign_rh                fort_opt_macros_:   403,  406.
         523    assign_ri                fort_opt_macros_:   268,  308.
         535    assign_rr                fort_opt_macros_:   268,  324.
         655    assign_t                 fort_opt_macros_:   268,  444.
         705    assign_t.logical.not_zero      fort_opt_macros_:   462,  475.
         677    assign_t.logical.var     fort_opt_macros_:   461,  467.
         661    assign_t.normal          fort_opt_macros_:   445,  447.
         666    assign_t.not_zero        fort_opt_macros_:   448,  449,  454.
         672    assign_t.to_logical      fort_opt_macros_:   445,  460.
         624    assign_th                fort_opt_macros_:   403,  408.
        3277    atan                     fort_opt_macros_:  2038, 2194.
        3304    atan.1                   fort_opt_macros_:  2195, 2197.
        3307    atan.2                   fort_opt_macros_:  2199, 2204.
        3327    atan2                    fort_opt_macros_:  2038, 2225.
        3403    atan2.1                  fort_opt_macros_:  2230, 2234, 2238, 2249, 2297.
        3435    atan2.p                  fort_opt_macros_:  2312, 2330.
        1336    atan2_                   fort_opt_macros_:  2305,
                                         fort_equs:    215.
        3400    atan2_cc                 fort_opt_macros_:  2226, 2288.
        3377    atan2_cd                 fort_opt_macros_:  2226, 2285.
        3373    atan2_ci                 fort_opt_macros_:  2226, 2273.
        3375    atan2_cr                 fort_opt_macros_:  2226, 2279.
        3376    atan2_dc                 fort_opt_macros_:  2226, 2282.
        3355    atan2_dd                 fort_opt_macros_:  2226, 2251.
        3352    atan2_di                 fort_opt_macros_:  2226, 2244.
        3364    atan2_dr                 fort_opt_macros_:  2226, 2262.
        3401    atan2_e1                 fort_opt_macros_:  2226, 2291.
        3402    atan2_e2                 fort_opt_macros_:  2226, 2294.
        3435    atan2_ee                 fort_opt_macros_:  2314, 2331.
        3372    atan2_ic                 fort_opt_macros_:  2226, 2270.
        3350    atan2_id                 fort_opt_macros_:  2226, 2240.
        3342    atan2_ii                 fort_opt_macros_:  2226, 2228.
        3344    atan2_ir                 fort_opt_macros_:  2226, 2232.
        3374    atan2_rc                 fort_opt_macros_:  2226, 2276.
        3356    atan2_rd                 fort_opt_macros_:  2226, 2254.
        3346    atan2_ri                 fort_opt_macros_:  2226, 2236.
        3354    atan2_rr                 fort_opt_macros_:  2226, 2248.
        1307    atan_                    fort_opt_macros_:  2209,
                                         fort_equs:    213.
        3306    atan_i                   fort_opt_macros_:  2195, 2201.
           4    auto_overlay             fort_opt_macros_:  7380,
                                         fort_equs:    146.
           3    auto_template            fort_opt_macros_:  7386,
                                         fort_equs:    145.
       11142    backspace                fort_opt_macros_:  6654,
                                         fort_operator_table:       49.
       11153    backspace.p              fort_opt_macros_:  6658, 6667.
        1760    bases                    fort_equs:    123,  124.
        4000    bif                      fort_opt_macros_:  7512,
                                         fort_equs:    100.
         440    blanks                   fort_equs:    178.
       11735    block_data               fort_opt_macros_:  7285,
                                         fort_operator_table:       69.
       12653    block_if                 fort_opt_macros_:  8069,
                                         fort_operator_table:      116.
        6235    bool.tl                  fort_opt_macros_:  2038, 4439.
         665    bound_ck_signal          fort_opt_macros_:   206,
                                         fort_equs:    279.
          33    buffer_size_slot         fort_opt_macros_:  7142, 7148,
                                         fort_equs:    167.
        2745    builtin                  fort_opt_macros_:  2017,
                                         fort_operator_table:       64.
        3033    builtin2                 fort_opt_macros_:  2027, 2033, 2035.
        3035    builtin3                 fort_opt_macros_:  2034, 2037.
        5127    builtin_2args_di         fort_opt_macros_:  2245, 2423, 2599, 2929, 3259, 3381, 3561.
        5111    builtin_2args_id         fort_opt_macros_:  2241, 2419, 2595, 2925, 3255, 3377, 3539.
        5030    builtin_2args_ii         fort_opt_macros_:  2229, 3460.
        5045    builtin_2args_ii.1       fort_opt_macros_:  3474, 3481.
        5060    builtin_2args_ir         fort_opt_macros_:  2233, 2411, 2587, 2917, 3247, 3369, 3499.
        5076    builtin_2args_ri         fort_opt_macros_:  2237, 2415, 2591, 2921, 3251, 3373, 3521.
        3033    builtin_var              fort_opt_macros_:  2026, 2032.
        6371    bu_dt5.p                 fort_opt_macros_:  2111, 2114, 2117, 2139, 2151, 2164, 2183, 2195, 2214, 2274, 2280,
                                                            2286, 2289, 2292, 2379, 2382, 2442, 2448, 2454, 2457, 2460, 2574,
                                                            2577, 3278, 3284, 3290, 3293, 3296, 3400, 3406, 3412, 3415, 3418,
                                                            3625, 3673, 3714, 3755, 3796, 3835, 3864, 3893, 3922, 3959, 3968,
                                                            3990, 4026, 4095, 4136, 4139, 4158, 4170, 4189, 4201, 4220, 4232,
                                                            4254, 4282, 4284, 4347, 4352, 4354, 4366, 4368, 4380, 4382, 4394,
                                                            4396, 4440, 4445, 4456, 4468, 4480, 4492, 4541.
        6374    bu_dt6.p                 fort_opt_macros_:  2271, 2277, 2283, 2295, 2332, 2439, 2445, 2451, 2463, 2525, 3275,
                                                            3281, 3287, 3299, 3347, 3397, 3403, 3409, 3421, 3458, 4098, 4418,
                                                            4459, 4471, 4483, 4495, 4544.
        3170    cabs                     fort_opt_macros_:  2038, 2097.
        3171    cabs.1                   fort_opt_macros_:  2067, 2099.
        3204    cabs.p                   fort_opt_macros_:  2098, 2116.
        1406    cabs_                    fort_opt_macros_:  2105,
                                         fort_equs:    207.
       12102    call                     fort_opt_macros_:  7502,
                                         fort_operator_table:       76.
       12261    call_ext_desc            fort_opt_macros_:  7616, 7621.
         623    call_ext_out             fort_opt_macros_:  7618,
                                         fort_equs:    245.
         622    call_ext_out_desc        fort_opt_macros_:  7622,
                                         fort_equs:    246.
       12267    call_join                fort_opt_macros_:  7619, 7623, 7629, 7634.
        1170    call_offset              stack_header:        80.
         617    call_var                 fort_opt_macros_:  7628,
                                         fort_equs:    247.
       12263    call_variable            fort_opt_macros_:  7614, 7625.
       12266    call_variable_desc       fort_opt_macros_:  7626, 7631.
         616    call_var_desc            fort_opt_macros_:  7632,
                                         fort_equs:    248.
       12536    cat                      fort_opt_macros_:  7941,
                                         fort_operator_table:      112.
       12573    cat.adjust_result_address      fort_opt_macros_:  7983, 8003.
       12545    cat.all_operands_pushed  fort_opt_macros_:  7953, 7956.
       12577    cat.bad_data_type        fort_opt_macros_:  7980, 7991, 8014.
       12553    cat.dont_move_op1        fort_opt_macros_:  7957, 7969.
       12575    cat.moved_last_operand   fort_opt_macros_:  8001, 8007.
       12563    cat.process_next_operand       fort_opt_macros_:  7967, 7985, 8005.
       12543    cat.push_all_operands    fort_opt_macros_:  7952, 7954.
        3466    ccos                     fort_opt_macros_:  2038, 2365.
        3467    ccos.1                   fort_opt_macros_:  2335, 2367.
        3501    ccos.p                   fort_opt_macros_:  2366, 2381.
        1407    ccos_                    fort_opt_macros_:  2373,
                                         fort_equs:    219.
        3674    cexp                     fort_opt_macros_:  2038, 2559.
        3675    cexp.1                   fort_opt_macros_:  2528, 2562.
        3707    cexp.p                   fort_opt_macros_:  2560, 2576.
        1410    cexp_                    fort_opt_macros_:  2568,
                                         fort_equs:    222.
       12340    chain                    fort_opt_macros_:  7700,
                                         fort_operator_table:       77.
       12345    chain2                   fort_opt_macros_:  7704, 7708.
       12352    chain3                   fort_opt_macros_:  7713, 7717.
       12356    chain_fill               fort_opt_macros_:  7724.
       12372    chain_next_file          fort_opt_macros_:  7742, 7749.
       12406    chain_path.p             fort_opt_macros_:  7705, 7706, 7761.
       12400    chain_ret                fort_opt_macros_:  7744, 7751.
       12411    chain_sys.p              fort_opt_macros_:  7714, 7715, 7765.
       10000    char                     fort_opt_macros_:   384, 4254, 4282, 4284, 4347, 4352, 4354, 4366, 4368, 4380, 4382,
                                                            4394, 4396, 5074, 5246, 6343, 6702, 6705, 6784, 6916, 7126, 7231,
                                                            7515, 7704, 7713, 7980, 7991,
                                         fort_equs:     57.
        6052    char.constant            fort_opt_macros_:  4234, 4249.
         647    char2.p                  fort_opt_macros_:   409,  417,  436.
        3000    charn                    fort_equs:     66.
        6041    char_builtin             fort_opt_macros_:  2038, 4231.
       12121    check_args               fort_opt_macros_:  7511, 7534.
         416    check_subscript          fort_opt_macros_:   191,  196.
        3235    clog                     fort_opt_macros_:  2038, 2150.
        3236    clog.1                   fort_opt_macros_:  2120, 2152.
        1411    clog_                    fort_opt_macros_:  2158,
                                         fort_equs:    210.
       11243    close                    fort_opt_macros_:  6736,
                                         fort_operator_table:       92.
       11512    closefile                fort_opt_macros_:  7036,
                                         fort_operator_table:       52.
       11522    closefile.p              fort_opt_macros_:  7039, 7048.
        5554    cmplx                    fort_opt_macros_:  2038, 3992.
        5556    cmplx.one                fort_opt_macros_:  3993, 3996.
        5573    cmplx.one.cmpx           fort_opt_macros_:  3997, 4013.
        5567    cmplx.one.dp             fort_opt_macros_:  3997, 4007.
        5563    cmplx.one.int            fort_opt_macros_:  3997, 3999.
        5575    cmplx.one.join           fort_opt_macros_:  4001, 4005, 4011, 4017.
        5603    cmplx.one.p              fort_opt_macros_:  3997, 4025.
        5565    cmplx.one.real           fort_opt_macros_:  3997, 4003.
        5604    cmplx.two                fort_opt_macros_:  3994, 4028.
        5657    cmplx.two.dd             fort_opt_macros_:  4029, 4071.
        5672    cmplx.two.dd.1           fort_opt_macros_:  4073, 4084.
        5704    cmplx.two.di             fort_opt_macros_:  4029, 4101.
        5704    cmplx.two.dr             fort_opt_macros_:  4029, 4103.
        5702    cmplx.two.e1             fort_opt_macros_:  4029, 4094.
        5703    cmplx.two.e2             fort_opt_macros_:  4029, 4097.
        5704    cmplx.two.id             fort_opt_macros_:  4029, 4104.
        5617    cmplx.two.ii             fort_opt_macros_:  4029, 4031.
        5632    cmplx.two.ii.1           fort_opt_macros_:  4033, 4044.
        5704    cmplx.two.ir             fort_opt_macros_:  4029, 4102.
        5704    cmplx.two.rd             fort_opt_macros_:  4029, 4105.
        5704    cmplx.two.ri             fort_opt_macros_:  4029, 4100.
        5644    cmplx.two.rr             fort_opt_macros_:  4029, 4056.
        5653    cmplx.two.rr.1           fort_opt_macros_:  4058, 4065.
       40000    cmpx                     fort_opt_macros_:  2098, 2151, 2366, 2560, 3611, 3659, 3962, 4110,
                                         fort_equs:     55.
        2000    cmpxn                    fort_opt_macros_:  1873, 1900,
                                         fort_equs:     64.
        1416    cmpx_p_cmpx              fort_opt_macros_:  1938, 1953,
                                         fort_equs:    200.
        6240    compl.tl                 fort_opt_macros_:  2038, 4444.
          70    complex                  fort_opt_macros_:  1191, 1376, 1453,
                                         fort_equs:    173.
         775    complex_divide           fort_opt_macros_:  1374, 1451,
                                         fort_equs:    191.
         773    complex_multiply         fort_opt_macros_:  1189,
                                         fort_equs:    190.
        5706    conjg                    fort_opt_macros_:  2038, 4108.
        5722    conjg.1                  fort_opt_macros_:  4115, 4126.
        5730    conjg.p                  fort_opt_macros_:  4110, 4135.
      200000    constant                 fort_opt_macros_:   271,  294,  314,  345,  391,  409,  417,  448,  461,  670,  700,
                                                             789, 1096, 1324, 1345, 1474, 1489, 1506, 1521, 1622, 1858, 1887,
                                                            3463, 3482, 3502, 3522, 3542, 3562, 4234, 4256, 4706, 4719, 4744,
                                                            4914, 4927, 4952, 5091, 5104, 5129, 5263, 5276, 5301, 5464, 5477,
                                                            5502, 5670, 5683, 5708, 5871, 5966, 6012,
                                         fort_equs:     95.
        2370    convert_to_cmpx          fort_opt_macros_:  1700,
                                         fort_operator_table:       97.
        2353    convert_to_dp            fort_opt_macros_:  1679,
                                         fort_operator_table:       96.
        2322    convert_to_int           fort_opt_macros_:  1639,
                                         fort_operator_table:       94.
        2336    convert_to_real          fort_opt_macros_:  1658,
                                         fort_operator_table:       95.
       12114    conv_bif                 fort_opt_macros_:  7512, 7524.
        5140    conv_bu_di               fort_opt_macros_:  3562, 3574.
        5124    conv_bu_id               fort_opt_macros_:  3542, 3555.
        5043    conv_bu_ii.1             fort_opt_macros_:  3463, 3476.
        5056    conv_bu_ii.2             fort_opt_macros_:  3482, 3494.
        5073    conv_bu_ir               fort_opt_macros_:  3502, 3515.
        5107    conv_bu_ri               fort_opt_macros_:  3522, 3534.
        2231    conv_di                  fort_opt_macros_:  1521, 1530.
        2051    conv_div_ci              fort_opt_macros_:  1345, 1360.
        2027    conv_div_ic              fort_opt_macros_:  1324, 1333.
        2617    conv_exponentiation_ci   fort_opt_macros_:  1887, 1899.
        2574    conv_exponentiation_ic   fort_opt_macros_:  1858, 1872.
       12116    conv_external            fort_opt_macros_:  7513, 7528.
        2220    conv_id                  fort_opt_macros_:  1506, 1513.
        2200    conv_ir                  fort_opt_macros_:  1474, 1481.
        1575    conv_mult_ci             fort_opt_macros_:  1096, 1111.
        2211    conv_ri                  fort_opt_macros_:  1489, 1498.
        1244    conv_sub_ci              fort_opt_macros_:   789,  796.
        1153    conv_sub_di              fort_opt_macros_:   700,  707.
        1130    conv_sub_ri              fort_opt_macros_:   670,  677.
        3436    cos                      fort_opt_macros_:  2038, 2334.
        3443    cos.1                    fort_opt_macros_:  2335, 2337.
        3446    cos.2                    fort_opt_macros_:  2339, 2344.
        5340    cosh                     fort_opt_macros_:  2038, 3757.
        5350    cosh.1                   fort_opt_macros_:  3762, 3767.
        5360    cosh.dp                  fort_opt_macros_:  3758, 3777, 3791.
        5345    cosh.int                 fort_opt_macros_:  3758, 3760.
        5373    cosh.p                   fort_opt_macros_:  3758, 3794.
        5347    cosh.real                fort_opt_macros_:  3758, 3764.
        1462    cosh_                    fort_opt_macros_:  3772,
                                         fort_equs:    259.
        1277    cos_                     fort_opt_macros_:  2349,
                                         fort_equs:    217.
        3445    cos_i                    fort_opt_macros_:  2335, 2341.
       20000    count                    fort_opt_macros_:  7233,
                                         fort_equs:     98.
        5172    csin                     fort_opt_macros_:  2038, 3610.
        5173    csin.1                   fort_opt_macros_:  3580, 3612.
        5204    csin.p                   fort_opt_macros_:  3611, 3624.
        1412    csin_                    fort_opt_macros_:  3618,
                                         fort_equs:    229.
        5235    csqrt                    fort_opt_macros_:  2038, 3658.
        5236    csqrt.1                  fort_opt_macros_:  3628, 3660.
        5247    csqrt.p                  fort_opt_macros_:  3659, 3672.
        1413    csqrt_                   fort_opt_macros_:  3666,
                                         fort_equs:    232.
        2274    cv_bfp_to_int            fort_opt_macros_:  1595.
       12123    cv_bif_to_external       fort_opt_macros_:  7525, 7538.
        2271    cv_dp_to_int             fort_opt_macros_:  1526, 1588.
        2273    cv_float_to_int          fort_opt_macros_:  1584, 1586, 1589, 1592.
        2301    cv_hfp_to_int            fort_opt_macros_:  1593, 1603.
        2236    cv_int_to_bfp            fort_opt_macros_:  1541.
        2254    cv_int_to_bfp.q_loaded   fort_opt_macros_:  1565.
        2234    cv_int_to_float          fort_opt_macros_:  1476, 1508, 1537.
        2253    cv_int_to_float.q_loaded       fort_opt_macros_:  1538, 1562.
        2244    cv_int_to_hfp            fort_opt_macros_:  1539, 1550.
        2261    cv_int_to_hfp.q_loaded   fort_opt_macros_:  1563, 1573.
        2223    cv_load.di               fort_opt_macros_:  1520, 1655, 3810, 6195.
        2224    cv_load.di_not_const     fort_opt_macros_:   315, 1523.
        2214    cv_load.id               fort_opt_macros_:   320,  504,  693, 1025, 1254, 1259, 1505, 1685, 1783, 2729, 3059,
                                                            3974, 4625, 4630, 4833, 4838, 5022, 5194, 5383, 5388, 5589, 5594.
        2174    cv_load.ir               fort_opt_macros_:   309,  351,  496,  537,  663,  778, 1017, 1242, 1247, 1326, 1473,
                                                            1664, 1711, 1758, 2127, 2171, 2202, 2342, 2535, 2693, 3023, 3587,
                                                            3635, 3679, 3720, 3761, 3841, 3870, 3928, 4000, 4035, 4039, 4047,
                                                            4051, 4146, 4177, 4208, 4613, 4618, 4821, 4826, 5014, 5186, 5371,
                                                            5376, 5577, 5582.
        2203    cv_load.ri               fort_opt_macros_:  1488, 1651, 3806, 3814, 6191.
        2204    cv_load.ri_not_const     fort_opt_macros_:   304,  346, 1491.
        2253    cv_q_to_dp               fort_opt_macros_:   703,  714, 1561, 2661, 2991.
        2253    cv_q_to_real             fort_opt_macros_:   673,  684,  793, 1560, 2657, 2778, 2987, 3109.
        2266    cv_real_to_int           fort_opt_macros_:  1494, 1583, 2872, 3203.
        3161    dabs                     fort_opt_macros_:  2038, 2087.
        3162    dabs.1                   fort_opt_macros_:  2067, 2089.
        3203    dabs.p                   fort_opt_macros_:  2088, 2113.
        6030    dacos                    fort_opt_macros_:  2038, 4219.
        6031    dacos.1                  fort_opt_macros_:  4201, 4221.
        1326    dacos_                   fort_opt_macros_:  4227,
                                         fort_equs:    239.
        6000    dasin                    fort_opt_macros_:  2038, 4188.
        6001    dasin.1                  fort_opt_macros_:  4170, 4190.
        1324    dasin_                   fort_opt_macros_:  4196,
                                         fort_equs:    237.
        3316    datan                    fort_opt_macros_:  2038, 2213.
        3317    datan.1                  fort_opt_macros_:  2195, 2215.
        3416    datan2                   fort_opt_macros_:  2038, 2310.
        3422    datan2.1                 fort_opt_macros_:  2242, 2246, 2252, 2268, 2316.
        3427    datan2.2                 fort_opt_macros_:  2260, 2322.
        1340    datan2_                  fort_opt_macros_:  2325,
                                         fort_equs:    216.
        1330    datan_                   fort_opt_macros_:  2221,
                                         fort_equs:    214.
        5536    dble                     fort_opt_macros_:  2038, 3970.
        5551    dble.cmpx                fort_opt_macros_:  3971, 3985.
        5547    dble.dp                  fort_opt_macros_:  3971, 3981.
        5543    dble.int                 fort_opt_macros_:  3971, 3973.
        5553    dble.p                   fort_opt_macros_:  3971, 3989.
        5545    dble.real                fort_opt_macros_:  3971, 3977.
        1345    dbl_p_dbl                fort_opt_macros_:  1828,
                                         fort_equs:    199.
        1346    dbl_p_int                fort_opt_macros_:  1798,
                                         fort_equs:    197.
        1344    dbl_p_real               fort_opt_macros_:  1848,
                                         fort_equs:    198.
        3455    dcos                     fort_opt_macros_:  2038, 2353.
        3456    dcos.1                   fort_opt_macros_:  2335, 2355.
        3500    dcos.p                   fort_opt_macros_:  2354, 2378.
        5371    dcosh                    fort_opt_macros_:  2038, 3789.
        5373    dcosh.p                  fort_opt_macros_:  3790, 3795.
        1463    dcosh_                   fort_opt_macros_:  3783,
                                         fort_equs:    260.
        1320    dcos_                    fort_opt_macros_:  2361,
                                         fort_equs:    218.
        3577    ddim                     fort_opt_macros_:  2038, 2478.
        3603    ddim.1                   fort_opt_macros_:  2420, 2424, 2430, 2484.
        3644    ddim.p                   fort_opt_macros_:  2480, 2482, 2524.
        2400    deaq                     fort_opt_macros_:   321,  330,  331,  335,  341,  370,  374,  506,  514,  516,  524,
                                                             526,  530,  580,  695,  705,  709,  711,  718,  734,  736,  738,
                                                             744,  747,  751,  757,  762,  764,  770,  871,  904, 1027, 1049,
                                                            1051, 1057, 1073, 1075, 1079, 1160, 1256, 1261, 1284, 1286, 1288,
                                                            1292, 1296, 1306, 1319, 1422, 1510, 1515, 1524, 1525, 1589, 1624,
                                                            1672, 1686, 1690, 1693, 1694, 1698, 1727, 1792, 1801, 1821, 1831,
                                                            1842, 1851, 1985, 1988, 2054, 2090, 2095, 2141, 2148, 2185, 2192,
                                                            2216, 2223, 2265, 2317, 2328, 2356, 2363, 2487, 2489, 2495, 2502,
                                                            2508, 2513, 2521, 2550, 2557, 2613, 2713, 2716, 2727, 2742, 2884,
                                                            2887, 2896, 2943, 3043, 3046, 3057, 3072, 3215, 3218, 3227, 3331,
                                                            3339, 3442, 3448, 3549, 3569, 3601, 3608, 3649, 3656, 3696, 3704,
                                                            3737, 3745, 3778, 3786, 3851, 3854, 3880, 3883, 3909, 3936, 3975,
                                                            3979, 3982, 3983, 3987, 4008, 4073, 4074, 4160, 4167, 4191, 4198,
                                                            4222, 4229, 4415, 4626, 4631, 4646, 4648, 4649, 4653, 4657, 4660,
                                                            4670, 4675, 4834, 4839, 4854, 4856, 4857, 4861, 4865, 4868, 4878,
                                                            4883, 5023, 5032, 5033, 5042, 5047, 5195, 5204, 5205, 5214, 5219,
                                                            5384, 5389, 5404, 5406, 5407, 5411, 5415, 5418, 5428, 5433, 5590,
                                                            5595, 5610, 5612, 5613, 5617, 5621, 5624, 5634, 5639, 6018, 6019,
                                                            6021,
                                         fort_equs:     77.
       11554    decode_string            fort_opt_macros_:  7088,
                                         fort_operator_table:      110.
       12060    descriptor_check         fort_opt_macros_:  7236, 7441, 7520.
       12067    descriptor_check.return  fort_opt_macros_:  7456, 7457, 7463, 7471.
       12066    descriptor_check.set     fort_opt_macros_:  7458, 7465.
          42    descriptor_ptr           fort_opt_macros_:  7351,
                                         fort_equs:    169.
          13    desc_overlay             fort_equs:    153.
        3663    dexp                     fort_opt_macros_:  2038, 2546.
        3664    dexp.1                   fort_opt_macros_:  2528, 2549.
        3706    dexp.p                   fort_opt_macros_:  2547, 2573.
        1335    dexp_                    fort_opt_macros_:  2555,
                                         fort_equs:    221.
        3502    dim                      fort_opt_macros_:  2038, 2384.
        3564    dim.1                    fort_opt_macros_:  2412, 2416, 2427, 2465.
        3561    dim_cc                   fort_opt_macros_:  2385, 2456.
        3560    dim_cd                   fort_opt_macros_:  2385, 2453.
        3554    dim_ci                   fort_opt_macros_:  2385, 2441.
        3556    dim_cr                   fort_opt_macros_:  2385, 2447.
        3557    dim_dc                   fort_opt_macros_:  2385, 2450.
        3550    dim_dd                   fort_opt_macros_:  2385, 2429.
        3545    dim_di                   fort_opt_macros_:  2385, 2422.
        3552    dim_dr                   fort_opt_macros_:  2385, 2435.
        3562    dim_e1                   fort_opt_macros_:  2385, 2459.
        3563    dim_e2                   fort_opt_macros_:  2385, 2462.
        3553    dim_ic                   fort_opt_macros_:  2385, 2438.
        3543    dim_id                   fort_opt_macros_:  2385, 2418.
        3521    dim_ii                   fort_opt_macros_:  2385, 2393.
        3537    dim_ir                   fort_opt_macros_:  2385, 2410.
        3555    dim_rc                   fort_opt_macros_:  2385, 2444.
        3551    dim_rd                   fort_opt_macros_:  2385, 2432.
        3541    dim_ri                   fort_opt_macros_:  2385, 2414.
        3547    dim_rr                   fort_opt_macros_:  2385, 2426.
        5437    dint                     fort_opt_macros_:  2038, 3857.
        5441    dint.p                   fort_opt_macros_:  3858, 3863.
           2    discard                  fort_opt_macros_:  5858, 6072, 6124, 6136,
                                         fort_equs:    135.
        1716    div                      fort_opt_macros_:  1230,
                                         fort_operator_table:       21.
        2145    div_cc                   fort_opt_macros_:  1232, 1446.
        2120    div_cd                   fort_opt_macros_:  1232, 1416.
        2130    div_cd.01                fort_opt_macros_:  1427, 1436.
        2135    div_cd.1                 fort_opt_macros_:  1422, 1434.
        2137    div_cd.2                 fort_opt_macros_:  1423, 1438.
        2032    div_ci                   fort_opt_macros_:  1232, 1338.
        2067    div_cr                   fort_opt_macros_:  1232, 1380.
        2077    div_cr.01                fort_opt_macros_:  1391, 1400.
        2104    div_cr.1                 fort_opt_macros_:  1358, 1365, 1386, 1398.
        2106    div_cr.2                 fort_opt_macros_:  1387, 1402.
        1776    div_d.power_of_two       fort_opt_macros_:  1283, 1295, 1316.
        2114    div_dc                   fort_opt_macros_:  1232, 1410.
        1767    div_dd                   fort_opt_macros_:  1232, 1282.
        1774    div_dd.1                 fort_opt_macros_:  1284, 1290.
        1750    div_di                   fort_opt_macros_:  1232, 1258.
        2014    div_dr                   fort_opt_macros_:  1232, 1315.
        2156    div_e1                   fort_opt_macros_:  1232, 1457, 1465.
        2160    div_e2                   fort_opt_macros_:  1232, 1460, 1464.
        2020    div_ic                   fort_opt_macros_:  1232, 1321.
        1744    div_id                   fort_opt_macros_:  1232, 1251.
        1732    div_ii                   fort_opt_macros_:  1232, 1234.
        1735    div_ir                   fort_opt_macros_:  1232, 1239.
        1762    div_r.power_of_two       fort_opt_macros_:  1264, 1275.
        2055    div_rc                   fort_opt_macros_:  1232, 1336, 1367, 1414.
        2056    div_rc.01                fort_opt_macros_:  1331, 1369.
        2003    div_rd                   fort_opt_macros_:  1232, 1302.
        2007    div_rd.power_of_two      fort_opt_macros_:  1303, 1308.
        1741    div_ri                   fort_opt_macros_:  1232, 1246.
        1753    div_rr                   fort_opt_macros_:  1232, 1263.
        1760    div_rr.1                 fort_opt_macros_:  1265, 1271.
        2162    div_tl                   fort_opt_macros_:  1232, 1463.
        2171    div_tl.1                 fort_opt_macros_:  1465, 1468.
        3224    dlog                     fort_opt_macros_:  2038, 2138.
        3225    dlog.1                   fort_opt_macros_:  2120, 2140.
        3266    dlog10                   fort_opt_macros_:  2038, 2182.
        3267    dlog10.1                 fort_opt_macros_:  2164, 2184.
        1334    dlog10_                  fort_opt_macros_:  2190,
                                         fort_equs:    212.
        1333    dlog_                    fort_opt_macros_:  2146,
                                         fort_equs:    209.
        4230    dmax1                    fort_opt_macros_:  2038, 2878.
        4241    dmax1.loop               fort_opt_macros_:  2890, 2904.
        4243    dmax1.loop.1             fort_opt_macros_:  2886, 2888, 2894.
        4254    dmax1.p                  fort_opt_macros_:  2880, 2882, 2906.
        4575    dmin1                    fort_opt_macros_:  2038, 3209.
        4606    dmin1.loop               fort_opt_macros_:  3221, 3235.
        4610    dmin1.loop.1             fort_opt_macros_:  3217, 3219, 3225.
        4621    dmin1.p                  fort_opt_macros_:  3211, 3213, 3237.
        4704    dmod                     fort_opt_macros_:  2038, 3324.
        4710    dmod.1                   fort_opt_macros_:  3256, 3260, 3266, 3272, 3330.
        4711    dmod.2                   fort_opt_macros_:  3332, 3343.
        4722    dmod.p                   fort_opt_macros_:  3326, 3328, 3346.
        1415    dmod_                    fort_equs:    224.
        5461    dnint                    fort_opt_macros_:  2038, 3886.
        5463    dnint.p                  fort_opt_macros_:  3887, 3892.
       12623    do                       fort_opt_macros_:  8052,
                                         fort_operator_table:       63.
       12235    double_count             fort_opt_macros_:  7583, 7586.
          56    double_temp              fort_opt_macros_:  1329, 1330, 4319, 4321, 4337, 4339,
                                         fort_equs:    170.
         654    double_to_integer        fort_equs:    189.
      100000    dp                       fort_opt_macros_:  2088, 2139, 2183, 2214, 2312, 2314, 2354, 2480, 2482, 2547, 2880,
                                                            2882, 2904, 3211, 3213, 3235, 3326, 3328, 3435, 3437, 3599, 3647,
                                                            3708, 3749, 3790, 3828, 3858, 3887, 3916, 3952, 4158, 4189, 4220,
                                         fort_equs:     54.
        1400    dpn                      fort_opt_macros_:   708, 1514, 2263, 2725, 3055, 3544, 3556, 3564, 3575,
                                         fort_equs:     63.
        6210    dprod                    fort_opt_macros_:  2038, 4407.
        6217    dprod.p                  fort_opt_macros_:  4409, 4411, 4417.
        3631    drdim.1                  fort_opt_macros_:  2436, 2510.
        5007    dsign                    fort_opt_macros_:  2038, 3433.
        5013    dsign.1                  fort_opt_macros_:  3378, 3382, 3388, 3394, 3439.
        5016    dsign.2                  fort_opt_macros_:  3443, 3454.
        5027    dsign.p                  fort_opt_macros_:  3435, 3437, 3457.
        5161    dsin                     fort_opt_macros_:  2038, 3598.
        5162    dsin.1                   fort_opt_macros_:  3580, 3600.
        5204    dsin.p                   fort_opt_macros_:  3599, 3623.
        5335    dsinh                    fort_opt_macros_:  2038, 3748.
        5337    dsinh.p                  fort_opt_macros_:  3749, 3754.
        1461    dsinh_                   fort_opt_macros_:  3742,
                                         fort_equs:    258.
        1316    dsin_                    fort_opt_macros_:  3606,
                                         fort_equs:    228.
        5224    dsqrt                    fort_opt_macros_:  2038, 3646.
        5225    dsqrt.1                  fort_opt_macros_:  3628, 3648.
        5247    dsqrt.p                  fort_opt_macros_:  3647, 3671.
        1315    dsqrt_                   fort_opt_macros_:  3654,
                                         fort_equs:    231.
        5750    dtan                     fort_opt_macros_:  2038, 4157.
        5751    dtan.1                   fort_opt_macros_:  4139, 4159.
        5301    dtanh                    fort_opt_macros_:  2038, 3707.
        5303    dtanh.p                  fort_opt_macros_:  3708, 3713.
        1457    dtanh_                   fort_opt_macros_:  3701,
                                         fort_equs:    256.
        1322    dtan_                    fort_opt_macros_:  4165,
                                         fort_equs:    235.
         200    dummy                    fort_equs:    104.
        2000    eaq                      fort_opt_macros_:   310,  325,  326,  340,  355,  356,  360,  363,  369,  498,  509,
                                                             511,  522,  550,  551,  557,  563,  581,  587,  593,  607,  609,
                                                             617,  623,  665,  675,  679,  681,  688,  721,  723,  725,  731,
                                                             749,  760,  800,  808,  809,  817,  823,  841,  842,  848,  857,
                                                             872,  880,  886,  905,  911,  920,  935,  937,  945,  953, 1019,
                                                            1032, 1034, 1040, 1071, 1082, 1107, 1115, 1127, 1128, 1135, 1141,
                                                            1161, 1168, 1174, 1244, 1249, 1265, 1267, 1269, 1273, 1276, 1304,
                                                            1309, 1317, 1356, 1364, 1386, 1387, 1395, 1404, 1423, 1431, 1440,
                                                            1478, 1483, 1492, 1493, 1584, 1625, 1665, 1668, 1669, 1673, 1676,
                                                            1677, 1689, 1697, 1712, 1719, 1720, 1728, 1767, 1776, 1806, 1816,
                                                            1836, 1866, 1894, 1979, 1982, 1995, 2001, 2004, 2010, 2048, 2080,
                                                            2085, 2108, 2123, 2136, 2167, 2180, 2198, 2211, 2255, 2264, 2298,
                                                            2308, 2338, 2351, 2468, 2470, 2476, 2500, 2515, 2531, 2544, 2610,
                                                            2677, 2680, 2691, 2702, 2735, 2790, 2793, 2802, 2846, 2849, 2858,
                                                            2871, 2940, 3007, 3010, 3021, 3032, 3065, 3121, 3124, 3133, 3177,
                                                            3180, 3189, 3202, 3315, 3322, 3342, 3426, 3431, 3453, 3470, 3489,
                                                            3509, 3529, 3583, 3596, 3631, 3644, 3683, 3693, 3724, 3734, 3765,
                                                            3775, 3842, 3845, 3848, 3871, 3874, 3877, 3903, 3929, 3932, 3933,
                                                            3939, 3942, 3943, 3965, 3978, 3986, 4004, 4019, 4037, 4053, 4058,
                                                            4059, 4060, 4068, 4077, 4091, 4117, 4118, 4131, 4142, 4155, 4173,
                                                            4186, 4204, 4217, 4413, 4614, 4619, 4635, 4637, 4638, 4642, 4659,
                                                            4664, 4668, 4671, 4822, 4827, 4843, 4845, 4846, 4850, 4867, 4872,
                                                            4876, 4879, 5015, 5027, 5028, 5040, 5043, 5187, 5199, 5200, 5212,
                                                            5215, 5372, 5377, 5393, 5395, 5396, 5400, 5417, 5422, 5426, 5429,
                                                            5578, 5583, 5599, 5601, 5602, 5606, 5623, 5628, 5632, 5635, 6042,
                                                            6043, 6045,
                                         fort_equs:     76.
       12657    else                     fort_opt_macros_:  8071,
                                         fort_operator_table:      118.
       12655    else_if                  fort_opt_macros_:  8070,
                                         fort_operator_table:      117.
           0    empty                    fort_equs:     72.
       11551    encode_string            fort_opt_macros_:  7083,
                                         fort_operator_table:      111.
       11112    endfile                  fort_opt_macros_:  6622,
                                         fort_operator_table:       47.
       11123    endfile.p                fort_opt_macros_:  6625, 6634.
       12414    endunit                  fort_opt_macros_:  7769,
                                         fort_operator_table:       78.
       10666    end_label                fort_opt_macros_:  6374,
                                         fort_operator_table:       42.
          14    end_label_slot           fort_opt_macros_:  6378,
                                         fort_equs:    157.
        1473    enter_BFP_mode           fort_equs:    268.
        1474    enter_HFP_mode           fort_opt_macros_:  7317,
                                         fort_equs:    269.
         400    entry                    fort_equs:    103.
          10    entry_info               fort_opt_macros_:  7176, 7414,
                                         fort_equs:    150.
        1174    entry_offset             stack_header:        84.
       12645    eol                      fort_opt_macros_:  8065,
                                         fort_operator_table:       62.
        7051    equal                    fort_opt_macros_:  4988,
                                         fort_operator_table:       26.
        7155    equal_ah                 fort_opt_macros_:  5074, 5085.
        7142    equal_cc                 fort_opt_macros_:  4992, 5068.
        7137    equal_cd                 fort_opt_macros_:  4992, 5065.
        7171    equal_ch                 fort_opt_macros_:  5086, 5103.
        7126    equal_ci                 fort_opt_macros_:  4992, 5053.
        7132    equal_cr                 fort_opt_macros_:  4992, 5059.
        7134    equal_dc                 fort_opt_macros_:  4992, 5062.
        7112    equal_dd                 fort_opt_macros_:  4992, 5031.
        7171    equal_dh                 fort_opt_macros_:  5086, 5102.
        7104    equal_di                 fort_opt_macros_:  4992, 5021.
        7116    equal_dr                 fort_opt_macros_:  4992, 5039.
        7122    equal_dr.1               fort_opt_macros_:  5040, 5046.
        7206    equal_e1                 fort_opt_macros_:  4992, 5125.
        7145    equal_e2                 fort_opt_macros_:  4992, 5073.
        7222    equal_hc                 fort_opt_macros_:  5131, 5143.
        7222    equal_hd                 fort_opt_macros_:  5131, 5142.
        7200    equal_hh                 fort_opt_macros_:  5086, 5115, 5131.
        7216    equal_hi                 fort_opt_macros_:  5131, 5133.
        7216    equal_hr                 fort_opt_macros_:  5131, 5134.
        7216    equal_ht                 fort_opt_macros_:  5131, 5135.
        7124    equal_ic                 fort_opt_macros_:  4992, 5050.
        7103    equal_id                 fort_opt_macros_:  4992, 5018.
        7162    equal_ih                 fort_opt_macros_:  5086, 5088.
        7066    equal_ii                 fort_opt_macros_:  4992, 4994.
        7075    equal_ii.global          fort_opt_macros_:  4996, 5006.
        7074    equal_ii.global.1        fort_opt_macros_:  4997, 5003.
        7077    equal_ir                 fort_opt_macros_:  4992, 5010.
           1    equal_lengths            fort_opt_macros_:  7993,
                                         fort_equs:    133.
        7152    equal_ll                 fort_opt_macros_:  5077, 5080.
        7130    equal_rc                 fort_opt_macros_:  4992, 5056.
        7115    equal_rd                 fort_opt_macros_:  4992, 5036.
        7162    equal_rh                 fort_opt_macros_:  5086, 5089.
        7100    equal_ri                 fort_opt_macros_:  4992, 5013.
        7107    equal_rr                 fort_opt_macros_:  4992, 5026.
        7162    equal_th                 fort_opt_macros_:  5086, 5090.
        7226    equal_tl                 fort_opt_macros_:  4992, 5150.
        7234    equal_tl.1               fort_opt_macros_:  5152, 5154.
       10133    equiv                    fort_opt_macros_:  5822,
                                         fort_operator_table:      119.
       10153    equiv.p                  fort_opt_macros_:  5824, 5826, 5849.
         100    error                    fort_equs:    105.
       10674    error_label              fort_opt_macros_:  6384,
                                         fort_operator_table:       43.
          12    error_label_slot         fort_opt_macros_:  6389,
                                         fort_equs:    158.
         455    error_macro              fort_opt_macros_:   183,  260.
       12106    evaluate_arglist         fort_opt_macros_:  7223, 7505, 7510, 7515, 7522, 7526, 7529, 7532.
       12643    exit                     fort_opt_macros_:  8064,
                                         fort_operator_table:       61.
        3645    exp                      fort_opt_macros_:  2038, 2527.
        3651    exp.1                    fort_opt_macros_:  2528, 2530.
        3654    exp.2                    fort_opt_macros_:  2532, 2537.
        2422    exponentiation           fort_opt_macros_:  1734,
                                         fort_operator_table:       22.
        2656    exponentiation_cc        fort_opt_macros_:  1737, 1944.
        2661    exponentiation_cc.01     fort_opt_macros_:  1870, 1877, 1918, 1948.
        2634    exponentiation_cd        fort_opt_macros_:  1737, 1920.
        2600    exponentiation_ci        fort_opt_macros_:  1737, 1879.
        2635    exponentiation_cr        fort_opt_macros_:  1737, 1923.
        2644    exponentiation_cr.01     fort_opt_macros_:  1897, 1905, 1932.
        2624    exponentiation_dc        fort_opt_macros_:  1737, 1907.
        2524    exponentiation_dd        fort_opt_macros_:  1737, 1818.
        2526    exponentiation_dd.02     fort_opt_macros_:  1787, 1822, 1837.
        2476    exponentiation_di        fort_opt_macros_:  1737, 1789.
        2542    exponentiation_dr        fort_opt_macros_:  1737, 1839.
        2672    exponentiation_e1        fort_opt_macros_:  1737, 1959.
        2674    exponentiation_e2        fort_opt_macros_:  1737, 1962.
        2555    exponentiation_ic        fort_opt_macros_:  1737, 1853.
        2471    exponentiation_id        fort_opt_macros_:  1737, 1778.
        2436    exponentiation_ii        fort_opt_macros_:  1737, 1739.
        2451    exponentiation_ir        fort_opt_macros_:  1737, 1753.
        2627    exponentiation_rc        fort_opt_macros_:  1737, 1912.
        2537    exponentiation_rd        fort_opt_macros_:  1737, 1833.
        2456    exponentiation_ri        fort_opt_macros_:  1737, 1764.
        2511    exponentiation_rr        fort_opt_macros_:  1737, 1803.
        2513    exponentiation_rr.02     fort_opt_macros_:  1762, 1807.
        1314    exp_                     fort_opt_macros_:  2542,
                                         fort_equs:    220.
        3653    exp_i                    fort_opt_macros_:  2528, 2534.
        1000    external                 fort_opt_macros_:  7513,
                                         fort_equs:    102.
        1045    ext_entry                fort_opt_macros_:  7299,
                                         fort_equs:    180.
        1046    ext_entry_desc           fort_opt_macros_:  7303,
                                         fort_equs:    181.
       12216    ext_join                 fort_opt_macros_:  7551, 7561.
          36    file_name_slot           fort_opt_macros_:  6711,
                                         fort_equs:    163.
          40    file_type_slot           fort_opt_macros_:  6713,
                                         fort_equs:    164.
         450    first_scan               fort_opt_macros_:   181,  252.
        6245    fld.tl                   fort_opt_macros_:  2038, 4451.
        5525    float                    fort_opt_macros_:  2038, 3946.
        5531    float.p                  fort_opt_macros_:  3947, 3957.
       10642    format                   fort_opt_macros_:  6341,
                                         fort_operator_table:       41.
       10654    format.pp                fort_opt_macros_:  6344, 6358.
       10656    format.pv                fort_opt_macros_:  6361, 6365.
       10660    format_c                 fort_opt_macros_:  6343, 6345, 6364.
           6    format_slot              fort_opt_macros_:  6354, 6368,
                                         fort_equs:    156.
       12423    form_VLA_packed_ptr      fort_opt_macros_:  7787,
                                         fort_operator_table:       81.
        1422    fortran_chain            fort_opt_macros_:  7754,
                                         fort_equs:    244.
        1447    fortran_end              fort_opt_macros_:  7170,
                                         fort_equs:    183.
        1420    fortran_pause            fort_opt_macros_:  7193,
                                         fort_equs:    242.
        1421    fortran_stop             fort_opt_macros_:  7212,
                                         fort_equs:    243.
        1471    fort_cleanup             fort_opt_macros_:  7324,
                                         fort_equs:    266.
        1450    fort_dmod                fort_opt_macros_:  3336,
                                         fort_equs:    184.
         767    fort_modfl               fort_opt_macros_:  3319,
                                         fort_equs:    223.
        1470    fort_return_mac          fort_opt_macros_:  7405,
                                         fort_equs:    265.
        1472    fort_storage             fort_opt_macros_:  7341,
                                         fort_equs:    267.
         400    for_divide               fort_opt_macros_:  1264, 1283, 1303, 1316,
                                         fort_equs:    138.
        2320    from_char                fort_opt_macros_:  1634, 1642, 1661, 1682, 1703.
        2316    from_logical             fort_opt_macros_:  1631, 1642, 1661, 1682, 1703.
        1252    ftn_array_xmit           fort_opt_macros_:  6529, 6617,
                                         fort_equs:    204.
        1440    ftn_get_area_ptr         fort_opt_macros_:  6751, 6878,
                                         fort_equs:    250.
        1466    ftn_inquire_element      fort_opt_macros_:  6891, 6926, 6946, 6964, 6983,
                                         fort_equs:    263.
        1250    ftn_manip                fort_opt_macros_:  6630, 6646, 6663, 6684, 6719, 6859, 7032, 7044,
                                         fort_equs:    205.
        1437    ftn_open_element         fort_opt_macros_:  6764, 6791, 6806, 6824,
                                         fort_equs:    249.
        1246    ftn_read                 fort_opt_macros_:  6315,
                                         fort_equs:    201.
        1251    ftn_scalar_xmit          fort_opt_macros_:  6446,
                                         fort_equs:    203.
        1253    ftn_terminate            fort_opt_macros_:  7162,
                                         fort_equs:    206.
        1247    ftn_write                fort_opt_macros_:  6333,
                                         fort_equs:    202.
       11725    func                     fort_opt_macros_:  7272,
                                         fort_operator_table:       72.
       11702    func_join                fort_opt_macros_:  7231, 7238.
       11667    func_ref                 fort_opt_macros_:  7221,
                                         fort_operator_table:       68.
       11704    func_ref.star_extent     fort_opt_macros_:  7233, 7244.
        4006    g.amax1                  fort_opt_macros_:  2588, 2592, 2603, 2676.
        4031    g.amax1.dp               fort_opt_macros_:  2686, 2697.
        4022    g.amax1.int              fort_opt_macros_:  2686, 2688.
        4013    g.amax1.loop             fort_opt_macros_:  2683, 2710.
        4032    g.amax1.loop.1           fort_opt_macros_:  2658, 2679, 2681, 2686, 2695, 2700.
        4353    g.amin1                  fort_opt_macros_:  2918, 2922, 2933, 3006.
        4376    g.amin1.dp               fort_opt_macros_:  3016, 3027.
        4367    g.amin1.int              fort_opt_macros_:  3016, 3018.
        4360    g.amin1.loop             fort_opt_macros_:  3013, 3040.
        4377    g.amin1.loop.1           fort_opt_macros_:  2988, 3009, 3011, 3016, 3025, 3030.
        4043    g.dmax1                  fort_opt_macros_:  2596, 2600, 2606, 2712.
        4057    g.dmax1.int              fort_opt_macros_:  2722, 2724.
        4050    g.dmax1.loop             fort_opt_macros_:  2719, 2752.
        4073    g.dmax1.loop.1           fort_opt_macros_:  2612, 2614, 2662, 2698, 2715, 2717, 2722, 2731, 2740.
        4077    g.dmax1.loop.2           fort_opt_macros_:  2738, 2746.
        4066    g.dmax1.real             fort_opt_macros_:  2722, 2733.
        4410    g.dmin1                  fort_opt_macros_:  2926, 2930, 2936, 3042.
        4424    g.dmin1.int              fort_opt_macros_:  3052, 3054.
        4415    g.dmin1.loop             fort_opt_macros_:  3049, 3082.
        4440    g.dmin1.loop.1           fort_opt_macros_:  2942, 2944, 2992, 3028, 3045, 3047, 3052, 3061, 3070.
        4444    g.dmin1.loop.2           fort_opt_macros_:  3068, 3076.
        4433    g.dmin1.real             fort_opt_macros_:  3052, 3063.
        3760    g.max0                   fort_opt_macros_:  2584, 2647.
        3773    g.max0.dp                fort_opt_macros_:  2654, 2660.
        3763    g.max0.loop              fort_opt_macros_:  2652, 2674.
        3775    g.max0.loop.1            fort_opt_macros_:  2650, 2654, 2664.
        3771    g.max0.real              fort_opt_macros_:  2654, 2656.
        4325    g.min0                   fort_opt_macros_:  2914, 2977.
        4340    g.min0.dp                fort_opt_macros_:  2984, 2990.
        4330    g.min0.loop              fort_opt_macros_:  2982, 3004.
        4342    g.min0.loop.1            fort_opt_macros_:  2980, 2984, 2994.
        4336    g.min0.real              fort_opt_macros_:  2984, 2986.
        1417    get_math_entry           fort_opt_macros_:  7549,
                                         fort_equs:    241.
        7641    greater                  fort_opt_macros_:  5538,
                                         fort_operator_table:       29.
        7764    greater_cc               fort_opt_macros_:  5542, 5660.
        7761    greater_cd               fort_opt_macros_:  5542, 5657.
       10004    greater_ch               fort_opt_macros_:  5665, 5682.
        7750    greater_ci               fort_opt_macros_:  5542, 5645.
        7754    greater_cr               fort_opt_macros_:  5542, 5651.
        7756    greater_dc               fort_opt_macros_:  5542, 5654.
        7724    greater_dd               fort_opt_macros_:  5542, 5609.
        7730    greater_dd.1             fort_opt_macros_:  5610, 5616.
       10004    greater_dh               fort_opt_macros_:  5665, 5681.
        7713    greater_di               fort_opt_macros_:  5542, 5593.
        7740    greater_dr               fort_opt_macros_:  5542, 5631.
        7744    greater_dr.1             fort_opt_macros_:  5632, 5638.
       10021    greater_e1               fort_opt_macros_:  5542, 5704.
        7767    greater_e2               fort_opt_macros_:  5542, 5663.
       10035    greater_hc               fort_opt_macros_:  5710, 5722.
       10035    greater_hd               fort_opt_macros_:  5710, 5721.
       10013    greater_hh               fort_opt_macros_:  5665, 5694, 5710.
       10031    greater_hi               fort_opt_macros_:  5710, 5712.
       10031    greater_hr               fort_opt_macros_:  5710, 5713.
       10031    greater_ht               fort_opt_macros_:  5710, 5714.
        7746    greater_ic               fort_opt_macros_:  5542, 5642.
        7707    greater_id               fort_opt_macros_:  5542, 5586.
        7775    greater_ih               fort_opt_macros_:  5665, 5667.
        7656    greater_ii               fort_opt_macros_:  5542, 5544.
        7665    greater_ii.1             fort_opt_macros_:  5549, 5555.
        7667    greater_ii.global        fort_opt_macros_:  5546, 5559.
        7673    greater_ii.global.1      fort_opt_macros_:  5547, 5566.
        7677    greater_ii.global.1.fb17       fort_opt_macros_:  5569, 5571.
        7672    greater_ii.global.fb17   fort_opt_macros_:  5561, 5563.
        7700    greater_ir               fort_opt_macros_:  5542, 5574.
        7425    greater_or_equal         fort_opt_macros_:  5331,
                                         fort_operator_table:       28.
        7550    greater_or_equal_cc      fort_opt_macros_:  5336, 5454.
        7545    greater_or_equal_cd      fort_opt_macros_:  5336, 5451.
        7570    greater_or_equal_ch      fort_opt_macros_:  5459, 5476.
        7534    greater_or_equal_ci      fort_opt_macros_:  5336, 5439.
        7540    greater_or_equal_cr      fort_opt_macros_:  5336, 5445.
        7542    greater_or_equal_dc      fort_opt_macros_:  5336, 5448.
        7510    greater_or_equal_dd      fort_opt_macros_:  5336, 5403.
        7514    greater_or_equal_dd.1    fort_opt_macros_:  5404, 5410.
        7570    greater_or_equal_dh      fort_opt_macros_:  5459, 5475.
        7477    greater_or_equal_di      fort_opt_macros_:  5336, 5387.
        7524    greater_or_equal_dr      fort_opt_macros_:  5336, 5425.
        7530    greater_or_equal_dr.1    fort_opt_macros_:  5426, 5432.
        7605    greater_or_equal_e1      fort_opt_macros_:  5336, 5498.
        7553    greater_or_equal_e2      fort_opt_macros_:  5336, 5457.
        7621    greater_or_equal_hc      fort_opt_macros_:  5504, 5516.
        7621    greater_or_equal_hd      fort_opt_macros_:  5504, 5515.
        7577    greater_or_equal_hh      fort_opt_macros_:  5459, 5488, 5504.
        7615    greater_or_equal_hi      fort_opt_macros_:  5504, 5506.
        7615    greater_or_equal_hr      fort_opt_macros_:  5504, 5507.
        7615    greater_or_equal_ht      fort_opt_macros_:  5504, 5508.
        7532    greater_or_equal_ic      fort_opt_macros_:  5336, 5436.
        7473    greater_or_equal_id      fort_opt_macros_:  5336, 5380.
        7561    greater_or_equal_ih      fort_opt_macros_:  5459, 5461.
        7442    greater_or_equal_ii      fort_opt_macros_:  5336, 5338.
        7451    greater_or_equal_ii.1    fort_opt_macros_:  5343, 5349.
        7463    greater_or_equal_ii.glob.1.fb17      fort_opt_macros_:  5363, 5365.
        7453    greater_or_equal_ii.global     fort_opt_macros_:  5340, 5353.
        7457    greater_or_equal_ii.global.1   fort_opt_macros_:  5341, 5360.
        7456    greater_or_equal_ii.global.fb17      fort_opt_macros_:  5355, 5357.
        7464    greater_or_equal_ir      fort_opt_macros_:  5336, 5368.
        7536    greater_or_equal_rc      fort_opt_macros_:  5336, 5442.
        7516    greater_or_equal_rd      fort_opt_macros_:  5336, 5414.
        7522    greater_or_equal_rd.1    fort_opt_macros_:  5415, 5421.
        7561    greater_or_equal_rh      fort_opt_macros_:  5459, 5462.
        7470    greater_or_equal_ri      fort_opt_macros_:  5336, 5375.
        7502    greater_or_equal_rr      fort_opt_macros_:  5336, 5392.
        7506    greater_or_equal_rr.1    fort_opt_macros_:  5393, 5399.
        7561    greater_or_equal_th      fort_opt_macros_:  5459, 5463.
        7625    greater_or_equal_tl      fort_opt_macros_:  5336, 5523.
        7633    greater_or_equal_tl.1    fort_opt_macros_:  5525, 5527.
        7637    greater_or_equal_tl.2    fort_opt_macros_:  5528, 5534.
        7752    greater_rc               fort_opt_macros_:  5542, 5648.
        7732    greater_rd               fort_opt_macros_:  5542, 5620.
        7736    greater_rd.1             fort_opt_macros_:  5621, 5627.
        7775    greater_rh               fort_opt_macros_:  5665, 5668.
        7704    greater_ri               fort_opt_macros_:  5542, 5581.
        7716    greater_rr               fort_opt_macros_:  5542, 5598.
        7722    greater_rr.1             fort_opt_macros_:  5599, 5605.
        7775    greater_th               fort_opt_macros_:  5665, 5669.
       10041    greater_tl               fort_opt_macros_:  5542, 5729.
       10047    greater_tl.1             fort_opt_macros_:  5731, 5733.
       10053    greater_tl.2             fort_opt_macros_:  5734, 5740.
        4000    ia                       fort_opt_macros_:  4463, 4475, 4487, 4499,
                                         fort_equs:     80.
        3144    iabs                     fort_opt_macros_:  2038, 2069.
        3145    iabs.1                   fort_opt_macros_:  2067, 2071.
        3202    iabs.p                   fort_opt_macros_:  2070, 2110.
        6054    ichar                    fort_opt_macros_:  2038, 4253.
        6065    ichar.aligned            fort_opt_macros_:  4260, 4269.
        6071    ichar.constant           fort_opt_macros_:  4256, 4277.
        3515    idim                     fort_opt_macros_:  2038, 2387.
        3644    idim.p                   fort_opt_macros_:  2389, 2391, 2523.
        5415    idint                    fort_opt_macros_:  2038, 3827.
        5417    idint.p                  fort_opt_macros_:  3828, 3834.
        5503    idnint                   fort_opt_macros_:  2038, 3915.
        5505    idnint.p                 fort_opt_macros_:  3916, 3921.
        3000    ieaq                     fort_opt_macros_:   553,  554,  565,  583,  584,  595,  608,  611,  614,  626,  811,
                                                             814,  827,  844,  845,  859,  874,  877,  890,  907,  908,  922,
                                                             936,  939,  942,  956, 1130, 1132, 1144, 1163, 1165, 1177, 1389,
                                                            1392, 1407, 1425, 1428, 1443, 1997, 2000, 2011, 2014, 3964, 4041,
                                                            4049, 4062, 4066, 4081, 4087, 4115, 4122, 4129,
                                         fort_equs:     78.
        5413    ifix                     fort_opt_macros_:  2038, 3822.
        5417    ifix.p                   fort_opt_macros_:  3823, 3833.
         400    if_bit                   fort_opt_macros_:   218,  278,  279,  989, 1206, 1539, 1563, 1593, 4260, 4582, 4583,
                                                            4597, 4605, 4790, 4791, 4805, 4813, 4996, 4997, 5168, 5169, 5340,
                                                            5341, 5355, 5363, 5546, 5547, 5561, 5569, 5980, 6142, 6143, 6345,
                                                            6365, 6467, 6476, 6485, 6494, 6503, 6558, 6567, 6576, 6585, 6594,
                                                            6703, 6706, 7140, 7298, 7456, 7457, 7458, 7529, 7589, 7614, 7616,
                                                            7626, 7645, 7841, 7875, 7894,
                                         fort_equs:     50.
        6254    ilr.1                    fort_opt_macros_:  4456, 4458.
        6261    ilr.2                    fort_opt_macros_:  4459, 4461.
        6247    ilr.tl                   fort_opt_macros_:  2038, 4455.
        6272    ils.1                    fort_opt_macros_:  4468, 4470.
        6277    ils.2                    fort_opt_macros_:  4471, 4473.
        6265    ils.tl                   fort_opt_macros_:  2038, 4467.
       12070    increment_polish         fort_opt_macros_:  7474,
                                         fort_operator_table:       70.
       12232    inc_for_hdr              fort_opt_macros_:  7577, 7580.
        5000    ind                      fort_opt_macros_:  5780, 5872, 5967,
                                         fort_equs:     82.
        6073    index                    fort_opt_macros_:  2038, 4281.
        6115    index.1                  fort_opt_macros_:  4287, 4310.
        6127    index.2                  fort_opt_macros_:  4288, 4328.
        1231    index_cs_eis             fort_opt_macros_:  4304,
                                         fort_equs:    252.
      776000    indices                  fort_opt_macros_:  7600,
                                         fort_equs:    122,  124.
         200    inhibit                  fort_opt_macros_:   199,  201,  209,  216,  218,  220,  225,  229,  231,  233,  237,
                                                             243,  248,  253,  257,  261,  265,  266,  268,  271,  272,  274,
                                                             275,  278,  279,  282,  283,  284,  287,  288,  290,  291,  294,
                                                             297,  298,  300,  301,  304,  305,  306,  309,  310,  311,  314,
                                                             315,  316,  317,  320,  321,  322,  325,  326,  327,  330,  331,
                                                             332,  335,  337,  340,  341,  342,  345,  346,  347,  348,  351,
                                                             352,  355,  356,  357,  360,  362,  363,  366,  369,  370,  371,
                                                             374,  375,  378,  379,  380,  383,  384,  385,  388,  389,  390,
                                                             391,  392,  394,  395,  398,  399,  400,  403,  409,  410,  411,
                                                             412,  413,  417,  418,  419,  420,  421,  425,  430,  433,  434,
                                                             437,  438,  441,  442,  445,  448,  449,  451,  452,  455,  456,
                                                             457,  458,  461,  462,  464,  465,  468,  469,  472,  473,  476,
                                                             477,  480,  481,  485,  488,  490,  493,  496,  498,  501,  504,
                                                             506,  509,  511,  514,  516,  519,  522,  524,  526,  530,  533,
                                                             536,  537,  538,  539,  540,  543,  546,  547,  548,  550,  551,
                                                             553,  554,  557,  558,  563,  565,  566,  570,  573,  576,  577,
                                                             578,  580,  581,  583,  584,  587,  588,  593,  595,  596,  600,
                                                             603,  604,  605,  606,  607,  608,  609,  611,  614,  617,  618,
                                                             623,  626,  627,  631,  635,  638,  641,  644,  645,  649,  653,
                                                             656,  658,  661,  663,  665,  668,  670,  673,  675,  678,  679,
                                                             681,  684,  685,  688,  691,  693,  695,  698,  700,  703,  705,
                                                             708,  709,  711,  714,  715,  718,  721,  723,  725,  728,  731,
                                                             734,  736,  738,  741,  744,  747,  749,  751,  754,  757,  760,
                                                             762,  764,  767,  770,  773,  774,  775,  777,  778,  779,  780,
                                                             783,  784,  785,  787,  789,  791,  793,  794,  797,  799,  800,
                                                             801,  804,  805,  806,  808,  809,  811,  812,  814,  817,  818,
                                                             823,  825,  827,  828,  831,  834,  837,  838,  839,  841,  842,
                                                             844,  845,  848,  849,  852,  857,  859,  860,  864,  867,  868,
                                                             869,  871,  872,  874,  875,  877,  880,  881,  886,  888,  890,
                                                             891,  894,  897,  900,  901,  902,  904,  905,  907,  908,  911,
                                                             912,  915,  920,  922,  923,  927,  930,  931,  932,  933,  935,
                                                             936,  937,  939,  942,  945,  946,  949,  953,  956,  957,  960,
                                                             963,  967,  970,  973,  976,  977,  980,  982,  986,  989,  990,
                                                             991,  994,  997, 1001, 1004, 1006, 1009, 1011, 1014, 1017, 1019,
                                                            1022, 1025, 1027, 1030, 1031, 1032, 1034, 1037, 1040, 1041, 1044,
                                                            1047, 1048, 1049, 1051, 1054, 1057, 1060, 1063, 1066, 1069, 1070,
                                                            1071, 1073, 1075, 1079, 1082, 1083, 1084, 1087, 1090, 1091, 1092,
                                                            1094, 1096, 1098, 1099, 1100, 1102, 1103, 1106, 1107, 1108, 1109,
                                                            1112, 1114, 1115, 1116, 1119, 1122, 1123, 1124, 1125, 1127, 1128,
                                                            1130, 1132, 1135, 1136, 1141, 1144, 1145, 1149, 1152, 1155, 1156,
                                                            1157, 1158, 1160, 1161, 1163, 1165, 1168, 1169, 1174, 1177, 1178,
                                                            1182, 1185, 1186, 1187, 1188, 1190, 1192, 1193, 1196, 1199, 1202,
                                                            1203, 1206, 1207, 1208, 1211, 1214, 1218, 1221, 1223, 1226, 1228,
                                                            1232, 1235, 1237, 1240, 1242, 1244, 1247, 1249, 1252, 1254, 1256,
                                                            1259, 1261, 1264, 1265, 1267, 1269, 1273, 1276, 1277, 1280, 1283,
                                                            1284, 1286, 1288, 1292, 1296, 1297, 1300, 1303, 1304, 1306, 1309,
                                                            1310, 1313, 1316, 1317, 1319, 1322, 1324, 1326, 1328, 1331, 1334,
                                                            1335, 1336, 1339, 1340, 1341, 1343, 1345, 1347, 1348, 1349, 1351,
                                                            1352, 1355, 1356, 1357, 1358, 1361, 1363, 1364, 1365, 1368, 1371,
                                                            1372, 1373, 1375, 1377, 1378, 1381, 1382, 1383, 1384, 1386, 1387,
                                                            1389, 1392, 1395, 1396, 1400, 1404, 1407, 1408, 1411, 1412, 1413,
                                                            1414, 1417, 1418, 1419, 1420, 1422, 1423, 1425, 1428, 1431, 1432,
                                                            1436, 1440, 1443, 1444, 1447, 1448, 1449, 1450, 1452, 1454, 1455,
                                                            1458, 1461, 1464, 1465, 1466, 1469, 1471, 1474, 1476, 1478, 1479,
                                                            1482, 1483, 1484, 1489, 1492, 1493, 1494, 1495, 1496, 1499, 1500,
                                                            1501, 1506, 1508, 1510, 1511, 1514, 1515, 1516, 1521, 1524, 1525,
                                                            1526, 1527, 1528, 1531, 1532, 1533, 1538, 1539, 1543, 1548, 1552,
                                                            1558, 1563, 1566, 1571, 1574, 1579, 1584, 1586, 1589, 1593, 1596,
                                                            1601, 1604, 1610, 1622, 1623, 1624, 1625, 1628, 1629, 1632, 1635,
                                                            1642, 1646, 1647, 1651, 1652, 1655, 1656, 1661, 1664, 1665, 1668,
                                                            1669, 1672, 1673, 1676, 1677, 1682, 1685, 1686, 1689, 1690, 1693,
                                                            1694, 1697, 1698, 1703, 1706, 1707, 1710, 1711, 1712, 1715, 1716,
                                                            1719, 1720, 1723, 1724, 1727, 1728, 1731, 1732, 1737, 1740, 1742,
                                                            1743, 1744, 1745, 1746, 1747, 1749, 1750, 1751, 1754, 1756, 1758,
                                                            1760, 1762, 1765, 1767, 1768, 1769, 1770, 1771, 1772, 1774, 1775,
                                                            1776, 1779, 1781, 1783, 1785, 1787, 1790, 1792, 1793, 1794, 1795,
                                                            1796, 1797, 1799, 1800, 1801, 1804, 1806, 1808, 1809, 1810, 1811,
                                                            1812, 1814, 1815, 1816, 1819, 1821, 1823, 1824, 1825, 1826, 1827,
                                                            1829, 1830, 1831, 1834, 1836, 1837, 1840, 1842, 1843, 1844, 1845,
                                                            1846, 1847, 1849, 1850, 1851, 1854, 1855, 1856, 1858, 1860, 1861,
                                                            1862, 1863, 1864, 1866, 1870, 1873, 1875, 1876, 1877, 1880, 1881,
                                                            1882, 1883, 1885, 1887, 1889, 1890, 1891, 1892, 1894, 1897, 1900,
                                                            1902, 1903, 1905, 1908, 1909, 1910, 1913, 1914, 1916, 1918, 1921,
                                                            1924, 1925, 1926, 1927, 1929, 1934, 1935, 1936, 1937, 1939, 1941,
                                                            1942, 1945, 1946, 1947, 1949, 1950, 1951, 1952, 1954, 1956, 1957,
                                                            1960, 1963, 1967, 1971, 1976, 1979, 1980, 1982, 1985, 1986, 1988,
                                                            1991, 1992, 1993, 1995, 1997, 1998, 2000, 2001, 2002, 2004, 2005,
                                                            2008, 2010, 2011, 2012, 2014, 2015, 2023, 2024, 2026, 2027, 2030,
                                                            2034, 2035, 2038, 2041, 2042, 2043, 2044, 2047, 2048, 2049, 2050,
                                                            2053, 2054, 2055, 2056, 2059, 2060, 2061, 2064, 2067, 2070, 2072,
                                                            2073, 2077, 2080, 2081, 2083, 2085, 2088, 2090, 2091, 2093, 2095,
                                                            2098, 2100, 2101, 2102, 2103, 2104, 2107, 2108, 2111, 2114, 2117,
                                                            2120, 2123, 2124, 2127, 2130, 2131, 2132, 2133, 2135, 2136, 2139,
                                                            2141, 2142, 2143, 2144, 2145, 2147, 2148, 2151, 2153, 2154, 2155,
                                                            2156, 2157, 2160, 2161, 2164, 2167, 2168, 2171, 2174, 2175, 2176,
                                                            2177, 2179, 2180, 2183, 2185, 2186, 2187, 2188, 2189, 2191, 2192,
                                                            2195, 2198, 2199, 2202, 2205, 2206, 2207, 2208, 2210, 2211, 2214,
                                                            2216, 2217, 2218, 2219, 2220, 2222, 2223, 2226, 2229, 2230, 2233,
                                                            2234, 2237, 2238, 2241, 2242, 2245, 2246, 2249, 2252, 2255, 2256,
                                                            2257, 2258, 2259, 2260, 2263, 2264, 2265, 2266, 2267, 2268, 2271,
                                                            2274, 2277, 2280, 2283, 2286, 2289, 2292, 2295, 2298, 2299, 2300,
                                                            2301, 2302, 2303, 2304, 2306, 2307, 2308, 2311, 2312, 2313, 2314,
                                                            2317, 2318, 2319, 2320, 2321, 2323, 2324, 2326, 2327, 2328, 2332,
                                                            2335, 2338, 2339, 2342, 2345, 2346, 2347, 2348, 2350, 2351, 2354,
                                                            2356, 2357, 2358, 2359, 2360, 2362, 2363, 2366, 2368, 2369, 2370,
                                                            2371, 2372, 2375, 2376, 2379, 2382, 2385, 2388, 2389, 2390, 2391,
                                                            2394, 2395, 2396, 2397, 2399, 2400, 2401, 2402, 2408, 2411, 2412,
                                                            2415, 2416, 2419, 2420, 2423, 2424, 2427, 2430, 2433, 2436, 2439,
                                                            2442, 2445, 2448, 2451, 2454, 2457, 2460, 2463, 2466, 2467, 2468,
                                                            2469, 2470, 2473, 2476, 2479, 2480, 2481, 2482, 2485, 2486, 2487,
                                                            2488, 2489, 2492, 2495, 2498, 2499, 2500, 2501, 2502, 2505, 2508,
                                                            2511, 2512, 2513, 2514, 2515, 2518, 2521, 2525, 2528, 2531, 2532,
                                                            2535, 2538, 2539, 2540, 2541, 2543, 2544, 2547, 2550, 2551, 2552,
                                                            2553, 2554, 2556, 2557, 2560, 2563, 2564, 2565, 2566, 2567, 2570,
                                                            2571, 2574, 2577, 2580, 2581, 2584, 2587, 2588, 2591, 2592, 2595,
                                                            2596, 2599, 2600, 2603, 2606, 2609, 2610, 2611, 2612, 2613, 2614,
                                                            2617, 2618, 2621, 2624, 2627, 2630, 2633, 2636, 2639, 2642, 2645,
                                                            2648, 2649, 2650, 2653, 2654, 2657, 2658, 2661, 2662, 2665, 2666,
                                                            2669, 2670, 2672, 2673, 2674, 2677, 2678, 2679, 2680, 2681, 2684,
                                                            2685, 2686, 2689, 2690, 2691, 2692, 2693, 2694, 2695, 2698, 2701,
                                                            2702, 2705, 2706, 2708, 2709, 2710, 2713, 2714, 2715, 2716, 2717,
                                                            2720, 2721, 2722, 2725, 2726, 2727, 2728, 2729, 2730, 2731, 2734,
                                                            2735, 2738, 2741, 2742, 2747, 2748, 2750, 2751, 2752, 2755, 2756,
                                                            2757, 2758, 2760, 2761, 2764, 2765, 2766, 2769, 2770, 2772, 2773,
                                                            2774, 2775, 2778, 2779, 2782, 2785, 2786, 2787, 2788, 2790, 2791,
                                                            2792, 2793, 2794, 2797, 2798, 2801, 2802, 2805, 2806, 2808, 2809,
                                                            2810, 2813, 2816, 2817, 2818, 2819, 2821, 2822, 2825, 2826, 2827,
                                                            2830, 2831, 2833, 2834, 2835, 2838, 2841, 2842, 2843, 2844, 2846,
                                                            2847, 2848, 2849, 2850, 2853, 2854, 2857, 2858, 2861, 2862, 2864,
                                                            2865, 2866, 2867, 2870, 2871, 2872, 2873, 2876, 2879, 2880, 2881,
                                                            2882, 2884, 2885, 2886, 2887, 2888, 2891, 2892, 2895, 2896, 2899,
                                                            2900, 2902, 2903, 2904, 2907, 2910, 2911, 2914, 2917, 2918, 2921,
                                                            2922, 2925, 2926, 2929, 2930, 2933, 2936, 2939, 2940, 2941, 2942,
                                                            2943, 2944, 2947, 2948, 2951, 2954, 2957, 2960, 2963, 2966, 2969,
                                                            2972, 2975, 2978, 2979, 2980, 2983, 2984, 2987, 2988, 2991, 2992,
                                                            2995, 2996, 2999, 3000, 3002, 3003, 3004, 3007, 3008, 3009, 3010,
                                                            3011, 3014, 3015, 3016, 3019, 3020, 3021, 3022, 3023, 3024, 3025,
                                                            3028, 3031, 3032, 3035, 3036, 3038, 3039, 3040, 3043, 3044, 3045,
                                                            3046, 3047, 3050, 3051, 3052, 3055, 3056, 3057, 3058, 3059, 3060,
                                                            3061, 3064, 3065, 3068, 3071, 3072, 3077, 3078, 3080, 3081, 3082,
                                                            3085, 3086, 3087, 3088, 3090, 3091, 3094, 3095, 3096, 3099, 3100,
                                                            3102, 3104, 3105, 3106, 3109, 3110, 3113, 3116, 3117, 3118, 3119,
                                                            3121, 3122, 3123, 3124, 3125, 3128, 3129, 3132, 3133, 3136, 3137,
                                                            3139, 3140, 3141, 3144, 3147, 3148, 3149, 3150, 3152, 3153, 3156,
                                                            3157, 3158, 3161, 3162, 3164, 3165, 3166, 3169, 3172, 3173, 3174,
                                                            3175, 3177, 3178, 3179, 3180, 3181, 3184, 3185, 3188, 3189, 3192,
                                                            3193, 3195, 3196, 3197, 3198, 3201, 3202, 3203, 3204, 3207, 3210,
                                                            3211, 3212, 3213, 3215, 3216, 3217, 3218, 3219, 3222, 3223, 3226,
                                                            3227, 3230, 3231, 3233, 3234, 3235, 3238, 3241, 3244, 3247, 3248,
                                                            3251, 3252, 3255, 3256, 3259, 3260, 3263, 3266, 3269, 3272, 3275,
                                                            3278, 3281, 3284, 3287, 3290, 3293, 3296, 3299, 3302, 3304, 3306,
                                                            3309, 3310, 3311, 3312, 3315, 3316, 3317, 3318, 3320, 3321, 3322,
                                                            3325, 3326, 3327, 3328, 3331, 3333, 3334, 3335, 3337, 3338, 3339,
                                                            3342, 3343, 3347, 3350, 3353, 3354, 3355, 3356, 3359, 3360, 3361,
                                                            3362, 3364, 3365, 3366, 3369, 3370, 3373, 3374, 3377, 3378, 3381,
                                                            3382, 3385, 3388, 3391, 3394, 3397, 3400, 3403, 3406, 3409, 3412,
                                                            3415, 3418, 3421, 3424, 3425, 3426, 3427, 3429, 3430, 3431, 3434,
                                                            3435, 3436, 3437, 3440, 3441, 3442, 3444, 3446, 3447, 3448, 3451,
                                                            3452, 3453, 3454, 3458, 3461, 3463, 3465, 3467, 3468, 3470, 3471,
                                                            3472, 3473, 3474, 3477, 3479, 3482, 3484, 3486, 3487, 3489, 3490,
                                                            3491, 3492, 3495, 3497, 3500, 3502, 3504, 3506, 3507, 3509, 3510,
                                                            3511, 3512, 3513, 3516, 3518, 3519, 3522, 3524, 3526, 3527, 3529,
                                                            3530, 3531, 3532, 3535, 3537, 3540, 3542, 3544, 3546, 3547, 3549,
                                                            3550, 3551, 3552, 3553, 3556, 3558, 3559, 3562, 3564, 3566, 3567,
                                                            3569, 3570, 3571, 3572, 3575, 3577, 3580, 3583, 3584, 3587, 3590,
                                                            3591, 3592, 3593, 3595, 3596, 3599, 3601, 3602, 3603, 3604, 3605,
                                                            3607, 3608, 3611, 3613, 3614, 3615, 3616, 3617, 3620, 3621, 3625,
                                                            3628, 3631, 3632, 3635, 3638, 3639, 3640, 3641, 3643, 3644, 3647,
                                                            3649, 3650, 3651, 3652, 3653, 3655, 3656, 3659, 3661, 3662, 3663,
                                                            3664, 3665, 3668, 3669, 3673, 3676, 3679, 3680, 3683, 3686, 3687,
                                                            3688, 3689, 3692, 3693, 3696, 3697, 3698, 3699, 3700, 3703, 3704,
                                                            3708, 3709, 3714, 3717, 3720, 3721, 3724, 3727, 3728, 3729, 3730,
                                                            3733, 3734, 3737, 3738, 3739, 3740, 3741, 3744, 3745, 3749, 3750,
                                                            3755, 3758, 3761, 3762, 3765, 3768, 3769, 3770, 3771, 3774, 3775,
                                                            3778, 3779, 3780, 3781, 3782, 3785, 3786, 3790, 3791, 3796, 3799,
                                                            3802, 3803, 3806, 3807, 3810, 3811, 3814, 3815, 3818, 3819, 3823,
                                                            3824, 3828, 3829, 3835, 3838, 3841, 3842, 3845, 3846, 3848, 3851,
                                                            3852, 3854, 3858, 3859, 3864, 3867, 3870, 3871, 3874, 3875, 3877,
                                                            3880, 3881, 3883, 3887, 3888, 3893, 3896, 3899, 3900, 3903, 3904,
                                                            3906, 3909, 3910, 3912, 3916, 3917, 3922, 3925, 3928, 3929, 3932,
                                                            3933, 3936, 3937, 3939, 3942, 3943, 3947, 3948, 3952, 3953, 3959,
                                                            3962, 3964, 3965, 3968, 3971, 3974, 3975, 3978, 3979, 3982, 3983,
                                                            3986, 3987, 3990, 3993, 3994, 3997, 4000, 4001, 4004, 4005, 4008,
                                                            4009, 4011, 4014, 4015, 4018, 4019, 4020, 4023, 4026, 4029, 4032,
                                                            4033, 4034, 4035, 4036, 4037, 4038, 4039, 4040, 4041, 4042, 4045,
                                                            4046, 4047, 4048, 4049, 4050, 4051, 4052, 4053, 4054, 4057, 4058,
                                                            4059, 4060, 4062, 4063, 4066, 4068, 4069, 4072, 4073, 4074, 4075,
                                                            4077, 4079, 4081, 4082, 4085, 4087, 4089, 4091, 4092, 4095, 4098,
                                                            4106, 4109, 4110, 4112, 4113, 4115, 4117, 4118, 4120, 4122, 4124,
                                                            4127, 4129, 4131, 4133, 4136, 4139, 4142, 4143, 4146, 4149, 4150,
                                                            4151, 4152, 4154, 4155, 4158, 4160, 4161, 4162, 4163, 4164, 4166,
                                                            4167, 4170, 4173, 4174, 4177, 4180, 4181, 4182, 4183, 4185, 4186,
                                                            4189, 4191, 4192, 4193, 4194, 4195, 4197, 4198, 4201, 4204, 4205,
                                                            4208, 4211, 4212, 4213, 4214, 4216, 4217, 4220, 4222, 4223, 4224,
                                                            4225, 4226, 4228, 4229, 4232, 4234, 4236, 4238, 4240, 4243, 4247,
                                                            4250, 4251, 4254, 4256, 4258, 4260, 4262, 4267, 4272, 4275, 4278,
                                                            4279, 4282, 4283, 4284, 4286, 4287, 4288, 4292, 4294, 4295, 4296,
                                                            4299, 4301, 4302, 4303, 4306, 4308, 4314, 4326, 4332, 4344, 4347,
                                                            4348, 4349, 4352, 4353, 4354, 4356, 4358, 4363, 4366, 4367, 4368,
                                                            4370, 4372, 4377, 4380, 4381, 4382, 4384, 4386, 4391, 4394, 4395,
                                                            4396, 4398, 4400, 4405, 4408, 4409, 4410, 4411, 4413, 4415, 4418,
                                                            4421, 4422, 4423, 4424, 4427, 4429, 4430, 4431, 4432, 4433, 4434,
                                                            4437, 4440, 4441, 4442, 4445, 4446, 4449, 4452, 4453, 4456, 4459,
                                                            4462, 4463, 4465, 4468, 4471, 4474, 4475, 4477, 4480, 4483, 4486,
                                                            4487, 4489, 4492, 4495, 4498, 4499, 4501, 4504, 4505, 4506, 4507,
                                                            4510, 4512, 4513, 4514, 4515, 4516, 4517, 4520, 4523, 4524, 4525,
                                                            4526, 4529, 4531, 4532, 4533, 4534, 4535, 4536, 4539, 4542, 4545,
                                                            4548, 4551, 4555, 4558, 4561, 4564, 4567, 4570, 4576, 4578, 4581,
                                                            4582, 4583, 4585, 4587, 4588, 4589, 4592, 4593, 4596, 4597, 4598,
                                                            4600, 4603, 4604, 4605, 4606, 4608, 4611, 4613, 4614, 4615, 4618,
                                                            4619, 4620, 4623, 4625, 4626, 4627, 4630, 4631, 4632, 4635, 4637,
                                                            4638, 4639, 4642, 4643, 4646, 4648, 4649, 4650, 4653, 4654, 4657,
                                                            4659, 4660, 4661, 4664, 4665, 4668, 4670, 4671, 4672, 4675, 4676,
                                                            4679, 4682, 4685, 4688, 4691, 4694, 4697, 4700, 4701, 4706, 4708,
                                                            4709, 4711, 4713, 4715, 4719, 4721, 4722, 4724, 4726, 4728, 4731,
                                                            4733, 4738, 4741, 4743, 4744, 4746, 4751, 4753, 4755, 4759, 4761,
                                                            4763, 4766, 4767, 4770, 4772, 4773, 4774, 4777, 4778, 4784, 4786,
                                                            4789, 4790, 4791, 4793, 4795, 4796, 4797, 4800, 4801, 4804, 4805,
                                                            4806, 4808, 4811, 4812, 4813, 4814, 4816, 4819, 4821, 4822, 4823,
                                                            4826, 4827, 4828, 4831, 4833, 4834, 4835, 4838, 4839, 4840, 4843,
                                                            4845, 4846, 4847, 4850, 4851, 4854, 4856, 4857, 4858, 4861, 4862,
                                                            4865, 4867, 4868, 4869, 4872, 4873, 4876, 4878, 4879, 4880, 4883,
                                                            4884, 4887, 4890, 4893, 4896, 4899, 4902, 4905, 4908, 4909, 4914,
                                                            4916, 4917, 4919, 4921, 4923, 4927, 4929, 4930, 4932, 4934, 4936,
                                                            4939, 4941, 4946, 4949, 4951, 4952, 4954, 4959, 4961, 4963, 4967,
                                                            4969, 4971, 4974, 4975, 4978, 4980, 4981, 4982, 4985, 4986, 4990,
                                                            4992, 4995, 4996, 4997, 4999, 5000, 5001, 5004, 5007, 5008, 5011,
                                                            5014, 5015, 5016, 5019, 5022, 5023, 5024, 5027, 5028, 5029, 5032,
                                                            5033, 5034, 5037, 5040, 5042, 5043, 5044, 5047, 5048, 5051, 5054,
                                                            5057, 5060, 5063, 5066, 5069, 5071, 5074, 5075, 5077, 5078, 5081,
                                                            5082, 5083, 5086, 5091, 5093, 5094, 5096, 5098, 5100, 5104, 5106,
                                                            5107, 5109, 5111, 5113, 5116, 5118, 5123, 5126, 5128, 5129, 5131,
                                                            5136, 5138, 5140, 5144, 5146, 5148, 5151, 5152, 5155, 5156, 5157,
                                                            5162, 5164, 5167, 5168, 5169, 5171, 5172, 5173, 5176, 5179, 5180,
                                                            5183, 5186, 5187, 5188, 5191, 5194, 5195, 5196, 5199, 5200, 5201,
                                                            5204, 5205, 5206, 5209, 5212, 5214, 5215, 5216, 5219, 5220, 5223,
                                                            5226, 5229, 5232, 5235, 5238, 5241, 5243, 5246, 5247, 5249, 5250,
                                                            5253, 5254, 5255, 5258, 5263, 5265, 5266, 5268, 5270, 5272, 5276,
                                                            5278, 5279, 5281, 5283, 5285, 5288, 5290, 5295, 5298, 5300, 5301,
                                                            5303, 5308, 5310, 5312, 5316, 5318, 5320, 5323, 5324, 5327, 5328,
                                                            5329, 5334, 5336, 5339, 5340, 5341, 5343, 5345, 5346, 5347, 5350,
                                                            5351, 5354, 5355, 5356, 5358, 5361, 5362, 5363, 5364, 5366, 5369,
                                                            5371, 5372, 5373, 5376, 5377, 5378, 5381, 5383, 5384, 5385, 5388,
                                                            5389, 5390, 5393, 5395, 5396, 5397, 5400, 5401, 5404, 5406, 5407,
                                                            5408, 5411, 5412, 5415, 5417, 5418, 5419, 5422, 5423, 5426, 5428,
                                                            5429, 5430, 5433, 5434, 5437, 5440, 5443, 5446, 5449, 5452, 5455,
                                                            5458, 5459, 5464, 5466, 5467, 5469, 5471, 5473, 5477, 5479, 5480,
                                                            5482, 5484, 5486, 5489, 5491, 5496, 5499, 5501, 5502, 5504, 5509,
                                                            5511, 5513, 5517, 5519, 5521, 5524, 5525, 5528, 5530, 5531, 5532,
                                                            5535, 5536, 5540, 5542, 5545, 5546, 5547, 5549, 5551, 5552, 5553,
                                                            5556, 5557, 5560, 5561, 5562, 5564, 5567, 5568, 5569, 5570, 5572,
                                                            5575, 5577, 5578, 5579, 5582, 5583, 5584, 5587, 5589, 5590, 5591,
                                                            5594, 5595, 5596, 5599, 5601, 5602, 5603, 5606, 5607, 5610, 5612,
                                                            5613, 5614, 5617, 5618, 5621, 5623, 5624, 5625, 5628, 5629, 5632,
                                                            5634, 5635, 5636, 5639, 5640, 5643, 5646, 5649, 5652, 5655, 5658,
                                                            5661, 5664, 5665, 5670, 5672, 5673, 5675, 5677, 5679, 5683, 5685,
                                                            5686, 5688, 5690, 5692, 5695, 5697, 5702, 5705, 5707, 5708, 5710,
                                                            5715, 5717, 5719, 5723, 5725, 5727, 5730, 5731, 5734, 5736, 5737,
                                                            5738, 5741, 5742, 5746, 5747, 5748, 5750, 5752, 5755, 5758, 5762,
                                                            5763, 5764, 5766, 5768, 5771, 5774, 5778, 5780, 5782, 5784, 5787,
                                                            5790, 5793, 5796, 5799, 5802, 5805, 5808, 5811, 5814, 5817, 5820,
                                                            5824, 5825, 5826, 5828, 5830, 5831, 5832, 5838, 5839, 5840, 5842,
                                                            5844, 5845, 5846, 5851, 5855, 5856, 5857, 5858, 5862, 5867, 5869,
                                                            5871, 5872, 5874, 5875, 5877, 5880, 5882, 5885, 5887, 5888, 5889,
                                                            5893, 5896, 5897, 5898, 5899, 5900, 5901, 5902, 5905, 5906, 5907,
                                                            5909, 5913, 5917, 5921, 5925, 5929, 5933, 5937, 5941, 5946, 5951,
                                                            5954, 5955, 5962, 5964, 5966, 5967, 5969, 5970, 5972, 5975, 5977,
                                                            5980, 5982, 5983, 5984, 5988, 5991, 5992, 5993, 5994, 5995, 5996,
                                                            5997, 6000, 6001, 6002, 6003, 6008, 6009, 6011, 6012, 6013, 6015,
                                                            6018, 6019, 6021, 6022, 6025, 6026, 6027, 6030, 6031, 6033, 6034,
                                                            6038, 6042, 6043, 6045, 6046, 6049, 6050, 6054, 6055, 6056, 6057,
                                                            6058, 6062, 6063, 6064, 6066, 6068, 6072, 6074, 6077, 6081, 6083,
                                                            6086, 6090, 6092, 6095, 6099, 6101, 6104, 6105, 6106, 6107, 6110,
                                                            6112, 6114, 6115, 6118, 6120, 6122, 6124, 6126, 6129, 6131, 6134,
                                                            6136, 6138, 6142, 6143, 6144, 6145, 6147, 6150, 6151, 6153, 6156,
                                                            6157, 6159, 6162, 6165, 6171, 6172, 6174, 6176, 6177, 6180, 6181,
                                                            6184, 6187, 6188, 6191, 6192, 6195, 6199, 6201, 6204, 6206, 6208,
                                                            6211, 6212, 6213, 6214, 6215, 6216, 6219, 6221, 6225, 6227, 6229,
                                                            6231, 6232, 6235, 6236, 6241, 6244, 6245, 6250, 6251, 6253, 6255,
                                                            6257, 6260, 6265, 6266, 6269, 6270, 6275, 6276, 6277, 6279, 6282,
                                                            6283, 6287, 6289, 6290, 6291, 6298, 6299, 6302, 6303, 6307, 6309,
                                                            6311, 6312, 6314, 6316, 6317, 6320, 6321, 6325, 6327, 6329, 6330,
                                                            6332, 6334, 6335, 6338, 6339, 6343, 6344, 6345, 6351, 6353, 6355,
                                                            6356, 6359, 6362, 6365, 6366, 6367, 6369, 6370, 6376, 6377, 6379,
                                                            6380, 6387, 6388, 6390, 6391, 6396, 6397, 6398, 6405, 6407, 6408,
                                                            6410, 6415, 6419, 6423, 6427, 6431, 6434, 6436, 6439, 6445, 6447,
                                                            6448, 6449, 6454, 6455, 6456, 6463, 6467, 6469, 6473, 6476, 6478,
                                                            6482, 6485, 6487, 6491, 6494, 6496, 6500, 6503, 6505, 6509, 6512,
                                                            6514, 6517, 6523, 6524, 6525, 6528, 6530, 6531, 6532, 6537, 6538,
                                                            6539, 6540, 6546, 6548, 6550, 6552, 6554, 6558, 6560, 6564, 6567,
                                                            6569, 6573, 6576, 6578, 6582, 6585, 6587, 6591, 6594, 6596, 6600,
                                                            6603, 6605, 6608, 6612, 6616, 6618, 6619, 6620, 6624, 6625, 6627,
                                                            6629, 6631, 6632, 6635, 6636, 6640, 6641, 6643, 6645, 6647, 6648,
                                                            6651, 6652, 6657, 6658, 6660, 6662, 6664, 6665, 6668, 6669, 6673,
                                                            6674, 6675, 6676, 6678, 6679, 6683, 6685, 6686, 6689, 6690, 6693,
                                                            6694, 6698, 6699, 6700, 6701, 6702, 6703, 6704, 6705, 6706, 6708,
                                                            6709, 6710, 6712, 6717, 6718, 6720, 6721, 6724, 6725, 6728, 6729,
                                                            6732, 6733, 6749, 6750, 6752, 6756, 6757, 6760, 6763, 6770, 6771,
                                                            6773, 6783, 6784, 6785, 6786, 6787, 6788, 6792, 6793, 6794, 6797,
                                                            6798, 6800, 6802, 6807, 6808, 6814, 6816, 6818, 6820, 6825, 6826,
                                                            6829, 6830, 6831, 6832, 6836, 6839, 6840, 6841, 6844, 6845, 6846,
                                                            6849, 6850, 6851, 6854, 6855, 6856, 6858, 6860, 6861, 6864, 6865,
                                                            6876, 6877, 6879, 6881, 6882, 6887, 6890, 6897, 6898, 6900, 6915,
                                                            6916, 6920, 6921, 6922, 6924, 6927, 6929, 6930, 6939, 6940, 6942,
                                                            6944, 6947, 6949, 6950, 6957, 6958, 6960, 6962, 6966, 6967, 6976,
                                                            6977, 6979, 6981, 6984, 6986, 6987, 7000, 7001, 7006, 7010, 7011,
                                                            7012, 7016, 7017, 7018, 7022, 7023, 7024, 7028, 7029, 7031, 7033,
                                                            7034, 7039, 7041, 7043, 7045, 7046, 7049, 7050, 7055, 7056, 7058,
                                                            7059, 7061, 7063, 7066, 7067, 7072, 7074, 7075, 7077, 7080, 7081,
                                                            7085, 7086, 7093, 7095, 7098, 7099, 7101, 7102, 7109, 7110, 7112,
                                                            7117, 7118, 7126, 7128, 7130, 7133, 7134, 7135, 7137, 7139, 7140,
                                                            7143, 7146, 7147, 7151, 7152, 7161, 7163, 7164, 7168, 7172, 7173,
                                                            7176, 7180, 7181, 7185, 7186, 7188, 7190, 7194, 7195, 7199, 7200,
                                                            7204, 7205, 7207, 7209, 7213, 7214, 7218, 7219, 7223, 7225, 7226,
                                                            7227, 7229, 7231, 7232, 7233, 7234, 7236, 7240, 7242, 7245, 7249,
                                                            7250, 7253, 7254, 7255, 7261, 7262, 7265, 7266, 7267, 7268, 7274,
                                                            7275, 7278, 7279, 7280, 7281, 7288, 7291, 7293, 7298, 7300, 7306,
                                                            7307, 7309, 7311, 7314, 7316, 7320, 7322, 7325, 7328, 7329, 7331,
                                                            7333, 7336, 7338, 7339, 7340, 7342, 7343, 7349, 7354, 7357, 7359,
                                                            7360, 7362, 7365, 7370, 7371, 7375, 7380, 7382, 7384, 7386, 7388,
                                                            7395, 7398, 7399, 7404, 7406, 7413, 7414, 7418, 7420, 7422, 7425,
                                                            7426, 7428, 7434, 7435, 7438, 7439, 7456, 7457, 7458, 7462, 7463,
                                                            7469, 7472, 7477, 7479, 7486, 7488, 7494, 7496, 7498, 7505, 7506,
                                                            7508, 7511, 7512, 7513, 7515, 7520, 7522, 7525, 7526, 7529, 7531,
                                                            7532, 7535, 7536, 7541, 7543, 7545, 7547, 7551, 7554, 7559, 7562,
                                                            7563, 7564, 7565, 7568, 7571, 7572, 7575, 7577, 7578, 7581, 7583,
                                                            7584, 7587, 7589, 7591, 7593, 7595, 7597, 7599, 7600, 7601, 7605,
                                                            7606, 7608, 7610, 7612, 7614, 7616, 7619, 7623, 7626, 7629, 7635,
                                                            7636, 7637, 7638, 7639, 7643, 7645, 7647, 7649, 7651, 7653, 7655,
                                                            7656, 7658, 7661, 7663, 7669, 7671, 7675, 7676, 7677, 7678, 7679,
                                                            7682, 7683, 7684, 7686, 7692, 7693, 7695, 7696, 7697, 7698, 7702,
                                                            7704, 7705, 7706, 7709, 7711, 7713, 7714, 7715, 7718, 7720, 7721,
                                                            7722, 7725, 7730, 7738, 7739, 7744, 7747, 7749, 7752, 7755, 7756,
                                                            7757, 7759, 7762, 7763, 7766, 7767, 7771, 7772, 7778, 7783, 7789,
                                                            7791, 7794, 7801, 7802, 7807, 7810, 7817, 7820, 7827, 7830, 7832,
                                                            7837, 7839, 7841, 7843, 7845, 7847, 7850, 7851, 7858, 7860, 7862,
                                                            7864, 7871, 7873, 7875, 7879, 7881, 7884, 7885, 7890, 7892, 7894,
                                                            7898, 7900, 7903, 7904, 7905, 7906, 7912, 7913, 7916, 7917, 7923,
                                                            7924, 7926, 7928, 7931, 7938, 7939, 7943, 7944, 7946, 7947, 7953,
                                                            7954, 7957, 7963, 7964, 7965, 7966, 7967, 7976, 7977, 7978, 7979,
                                                            7980, 7981, 7982, 7983, 7990, 7991, 7993, 8000, 8001, 8004, 8005,
                                                            8011, 8012, 8015, 8020, 8021, 8022, 8023, 8026, 8029, 8032, 8040,
                                                            8041, 8048, 8050,
                                         fort_equs:     48.
       12020    init_auto                fort_opt_macros_:  7320, 7377.
       12031    init_return              fort_opt_macros_:  7384, 7394.
       11361    inquire                  fort_opt_macros_:  6867,
                                         fort_operator_table:      123.
       11462    inquire_case_1           fort_opt_macros_:  6900, 6990.
       11462    inquire_case_10          fort_opt_macros_:  6900, 6995.
       11462    inquire_case_11          fort_opt_macros_:  6900, 6996.
       11462    inquire_case_12          fort_opt_macros_:  6900, 6997.
       11415    inquire_case_13          fort_opt_macros_:  6900, 6906.
       11441    inquire_case_14          fort_opt_macros_:  6900, 6953.
       11462    inquire_case_15          fort_opt_macros_:  6900, 6998.
       11462    inquire_case_16          fort_opt_macros_:  6900, 6999.
       11451    inquire_case_17          fort_opt_macros_:  6900, 6970.
       11451    inquire_case_18          fort_opt_macros_:  6900, 6971.
       11430    inquire_case_19          fort_opt_macros_:  6900, 6934.
       11462    inquire_case_2           fort_opt_macros_:  6900, 6991.
       11451    inquire_case_20          fort_opt_macros_:  6900, 6972.
       11415    inquire_case_21          fort_opt_macros_:  6900, 6907.
       11415    inquire_case_22          fort_opt_macros_:  6900, 6908.
       11415    inquire_case_23          fort_opt_macros_:  6900, 6909.
       11415    inquire_case_24          fort_opt_macros_:  6900, 6910.
       11430    inquire_case_25          fort_opt_macros_:  6900, 6935.
       11415    inquire_case_26          fort_opt_macros_:  6900, 6911.
       11462    inquire_case_3           fort_opt_macros_:  6900, 6992.
       11415    inquire_case_4           fort_opt_macros_:  6900, 6903.
       11462    inquire_case_5           fort_opt_macros_:  6900, 6993.
       11415    inquire_case_6           fort_opt_macros_:  6900, 6904.
       11415    inquire_case_7           fort_opt_macros_:  6900, 6905.
       11430    inquire_case_8           fort_opt_macros_:  6900, 6933.
       11462    inquire_case_9           fort_opt_macros_:  6900, 6994.
       11375    inquire_loop             fort_opt_macros_:  6896, 6930, 6950, 6967, 6987, 7012, 7018, 7024.
       11465    inquire_loop.e           fort_opt_macros_:  6898, 7004.
       11467    inquire_loop.not_char    fort_opt_macros_:  6916, 7009.
       11473    inquire_loop.not_int     fort_opt_macros_:  6940, 6958, 7015.
       11477    inquire_loop.not_logical       fort_opt_macros_:  6977, 7021.
       11503    inquire_return           fort_opt_macros_:  6897, 7027.
       40000    inst_word                fort_opt_macros_:   233,  685,  715,  728,  741,  754,  767,  812,  825,  831,  852,
                                                             875,  888,  894,  915,  949,  960, 1543, 1552, 1566, 1574, 1980,
                                                            1986, 1998, 2002, 2008, 2012, 2083, 2093, 2473, 2492, 2505, 2518,
                                                            3304, 3937, 4009, 4075, 4079, 4085, 4089, 4120, 4127, 4240, 4272,
                                                            6439, 6517, 6608, 6760, 6887, 7293, 7739, 7791,
                                         fort_equs:    136.
      400000    int                      fort_opt_macros_:   976, 1202, 1464, 2070, 2389, 2391, 2756, 2758, 2774, 2817, 2819,
                                                            2835, 3086, 3088, 3105, 3148, 3150, 3166, 3354, 3356, 3947, 4232,
                                                            4766, 4974, 5151, 5323, 5524, 5730, 6253, 6276, 6309, 6327, 6344,
                                                            6625, 6641, 6658, 6673, 6675, 6699, 6798, 6855, 6940, 6958, 7039,
                                                            7056, 7072, 7705, 7714,
                                         fort_equs:     52.
        5417    int.p                    fort_opt_macros_:  3799, 3832.
         465    integer_to_double        fort_opt_macros_:  3548, 3568,
                                         fort_equs:    187.
         465    integer_to_real          fort_opt_macros_:  1104, 1353, 1865, 1893, 3469, 3488, 3508, 3528,
                                         fort_equs:    186.
       11613    internal_file.array      fort_opt_macros_:  7140, 7145.
       11620    internal_file.p          fort_opt_macros_:  7126, 7155.
       11616    internal_file.ret        fort_opt_macros_:  7143, 7150.
       11576    internal_file_common     fort_opt_macros_:  7118, 7125.
         413    interpreter_macros       fort_opt_macros_:   180,  190.
         400    intn                     fort_opt_macros_:   297, 1499, 1531, 2394,
                                         fort_equs:     61.
        5374    int_builtin              fort_opt_macros_:  2038, 3798.
        5407    int_builtin.cmpx         fort_opt_macros_:  3799, 3813.
        5405    int_builtin.dp           fort_opt_macros_:  3799, 3809, 3829.
        5401    int_builtin.int          fort_opt_macros_:  3799, 3801.
        5403    int_builtin.real         fort_opt_macros_:  3799, 3805, 3824.
        5411    int_builtin.tl           fort_opt_macros_:  3799, 3817.
        1351    int_p_int                fort_opt_macros_:  1748,
                                         fort_equs:    194.
        6415    invalid_opnd             fort_opt_macros_:  4566, 4706, 4719, 4744, 4914, 4927, 4952, 5091, 5104, 5129, 5263,
                                                            5276, 5301, 5464, 5477, 5502, 5670, 5683, 5708.
       11525    iostat                   fort_opt_macros_:  7052,
                                         fort_operator_table:       93.
       11535    iostat.p                 fort_opt_macros_:  7056, 7065.
          56    iostat_slot              fort_opt_macros_:  7060,
                                         fort_equs:    166.
        3400    iq                       fort_equs:     79.
        6310    irl.1                    fort_opt_macros_:  4480, 4482.
        6315    irl.2                    fort_opt_macros_:  4483, 4485.
        6303    irl.tl                   fort_opt_macros_:  2038, 4479.
        6326    irs.1                    fort_opt_macros_:  4492, 4494.
        6333    irs.2                    fort_opt_macros_:  4495, 4497.
        6321    irs.tl                   fort_opt_macros_:  2038, 4491.
        4736    isign                    fort_opt_macros_:  2038, 3352.
        5027    isign.p                  fort_opt_macros_:  3354, 3356, 3456.
       12641    item                     fort_opt_macros_:  8063,
                                         fort_operator_table:       60.
       12331    itp_no_desc              fort_opt_macros_:  7686, 7691.
       10530    jc_labels                fort_opt_macros_:  6224, 6232.
       10540    jc_list.p                fort_opt_macros_:  6174, 6238.
       10536    jc_ret                   fort_opt_macros_:  6234, 6241.
       10516    jc_save_state            fort_opt_macros_:  6210, 6216.
       10511    jc_transfer              fort_opt_macros_:  6188, 6192, 6197.
       10155    jump                     fort_opt_macros_:  5853,
                                         fort_operator_table:       33.
       10317    jump_arithmetic          fort_opt_macros_:  6005,
                                         fort_operator_table:       35.
       10361    jump_arithmetic.01       fort_opt_macros_:  6019, 6022, 6027, 6031, 6034, 6038, 6043, 6046, 6053.
       10465    jump_arithmetic.e        fort_opt_macros_:  6015, 6164.
       10332    jump_arithmetic_d        fort_opt_macros_:  6015, 6017.
       10337    jump_arithmetic_i        fort_opt_macros_:  6015, 6024.
       10347    jump_arithmetic_i.1      fort_opt_macros_:  6030, 6036.
       10342    jump_arithmetic_i.check_eaq    fort_opt_macros_:  6025, 6029.
       10351    jump_arithmetic_r        fort_opt_macros_:  6015, 6040.
       10356    jump_arithmetic_r.1      fort_opt_macros_:  6018, 6042, 6048.
       10417    jump_arith_12            fort_opt_macros_:  6055, 6103.
       10423    jump_arith_12.c          fort_opt_macros_:  6105, 6109.
       10430    jump_arith_13            fort_opt_macros_:  6057, 6117.
       10400    jump_arith_1next         fort_opt_macros_:  6062, 6076.
       10437    jump_arith_23            fort_opt_macros_:  6058, 6128.
       10405    jump_arith_2next         fort_opt_macros_:  6063, 6085.
       10412    jump_arith_3next         fort_opt_macros_:  6064, 6094.
       10375    jump_arith_all           fort_opt_macros_:  6071, 6106, 6114.
       10446    jump_arith_const         fort_opt_macros_:  6012, 6141.
       10454    jump_arith_const1        fort_opt_macros_:  6143, 6149.
       10460    jump_arith_const2        fort_opt_macros_:  6142, 6155.
       10464    jump_arith_return        fort_opt_macros_:  6122, 6134, 6145, 6151, 6157, 6161.
       10407    jump_arith_to1           fort_opt_macros_:  6089, 6129.
       10414    jump_arith_to2           fort_opt_macros_:  6098, 6118.
       10402    jump_arith_to3           fort_opt_macros_:  6080, 6110.
       10545    jump_assigned            fort_opt_macros_:  6247,
                                         fort_operator_table:       37.
       10554    jump_assigned.1          fort_opt_macros_:  6255, 6259.
       10561    jump_assigned.e          fort_opt_macros_:  6253, 6268.
       10467    jump_computed            fort_opt_macros_:  6167,
                                         fort_operator_table:       36.
       10475    jump_computed.get_operands     fort_opt_macros_:  6179, 6181.
       10542    jump_computed.p          fort_opt_macros_:  6184, 6243.
       10477    jump_computed.stack_ready      fort_opt_macros_:  6180, 6183.
       10510    jump_computed_d          fort_opt_macros_:  6184, 6194.
       10504    jump_computed_i          fort_opt_macros_:  6184, 6186.
       10506    jump_computed_r          fort_opt_macros_:  6184, 6190.
       10164    jump_false               fort_opt_macros_:  5864,
                                         fort_operator_table:      105.
       10253    jump_false.p             fort_opt_macros_:  5869, 5953, 5964.
       10177    jump_false_const         fort_opt_macros_:  5871, 5884.
       10205    jump_false_ind           fort_opt_macros_:  5872, 5895.
       10204    jump_false_is_nop        fort_opt_macros_:  5885, 5892.
       10250    jump_false_j_g_s         fort_opt_macros_:  5909, 5948, 6003.
       10245    jump_false_j_le_s        fort_opt_macros_:  5909, 5943, 6003.
       10231    jump_false_tmi           fort_opt_macros_:  5909, 5919, 6003.
       10235    jump_false_tmoz          fort_opt_macros_:  5909, 5927, 6003.
       10241    jump_false_tnc           fort_opt_macros_:  5909, 5935, 6003.
       10227    jump_false_tnz           fort_opt_macros_:  5909, 5915, 6003.
       10233    jump_false_tpl           fort_opt_macros_:  5909, 5923, 6003.
       10237    jump_false_tpnz          fort_opt_macros_:  5909, 5931, 6003.
       10243    jump_false_trc           fort_opt_macros_:  5909, 5939, 6003.
       10225    jump_false_tze           fort_opt_macros_:  5909, 5911, 6003.
       10174    jump_false_using_a       fort_opt_macros_:  5879, 5902.
       10214    jump_false_using_ind     fort_opt_macros_:  5896, 5898, 5904.
       10163    jump_is_nop              fort_opt_macros_:  5855, 5861.
       12625    jump_logical             fort_opt_macros_:  8053,
                                         fort_operator_table:       34.
       10256    jump_true                fort_opt_macros_:  5959,
                                         fort_operator_table:      104.
       10271    jump_true_const          fort_opt_macros_:  5966, 5979.
       10277    jump_true_ind            fort_opt_macros_:  5967, 5990.
       10276    jump_true_is_nop         fort_opt_macros_:  5980, 5987.
       10266    jump_true_using_a        fort_opt_macros_:  5974, 5997.
       10306    jump_true_using_ind      fort_opt_macros_:  5991, 5993, 5999.
       12000    j_g_s                    fort_opt_macros_:  4606, 5562, 5814,
                                         fort_equs:     92.
       11400    j_le_s                   fort_opt_macros_:  4806, 5364, 5817,
                                         fort_equs:     91.
        2000    label                    fort_equs:     59.
        4000    labeln                   fort_equs:     68.
       12073    label_operator           fort_opt_macros_:  7483,
                                         fort_operator_table:       75.
       12313    lc_no_desc               fort_opt_macros_:  7663, 7668.
       12435    left_shift               fort_opt_macros_:  7804,
                                         fort_operator_table:       83.
        6141    len                      fort_opt_macros_:  2038, 4346.
        6421    less                     fort_opt_macros_:  4574,
                                         fort_operator_table:       24.
        6544    less_cc                  fort_opt_macros_:  4578, 4696.
        6541    less_cd                  fort_opt_macros_:  4578, 4693.
        6564    less_ch                  fort_opt_macros_:  4701, 4718.
        6530    less_ci                  fort_opt_macros_:  4578, 4681.
        6534    less_cr                  fort_opt_macros_:  4578, 4687.
        6536    less_dc                  fort_opt_macros_:  4578, 4690.
        6504    less_dd                  fort_opt_macros_:  4578, 4645.
        6510    less_dd.1                fort_opt_macros_:  4646, 4652.
        6564    less_dh                  fort_opt_macros_:  4701, 4717.
        6473    less_di                  fort_opt_macros_:  4578, 4629.
        6520    less_dr                  fort_opt_macros_:  4578, 4667.
        6524    less_dr.1                fort_opt_macros_:  4668, 4674.
        6601    less_e1                  fort_opt_macros_:  4578, 4740.
        6547    less_e2                  fort_opt_macros_:  4578, 4699.
        6615    less_hc                  fort_opt_macros_:  4746, 4758.
        6615    less_hd                  fort_opt_macros_:  4746, 4757.
        6573    less_hh                  fort_opt_macros_:  4701, 4730, 4746.
        6611    less_hi                  fort_opt_macros_:  4746, 4748.
        6611    less_hr                  fort_opt_macros_:  4746, 4749.
        6611    less_ht                  fort_opt_macros_:  4746, 4750.
        6526    less_ic                  fort_opt_macros_:  4578, 4678.
        6467    less_id                  fort_opt_macros_:  4578, 4622.
        6555    less_ih                  fort_opt_macros_:  4701, 4703.
        6436    less_ii                  fort_opt_macros_:  4578, 4580.
        6445    less_ii.1                fort_opt_macros_:  4585, 4591.
        6447    less_ii.global           fort_opt_macros_:  4582, 4595.
        6453    less_ii.global.1         fort_opt_macros_:  4583, 4602.
        6457    less_ii.global.1.fb17    fort_opt_macros_:  4605, 4607.
        6452    less_ii.global.fb17      fort_opt_macros_:  4597, 4599.
        6460    less_ir                  fort_opt_macros_:  4578, 4610.
        6635    less_or_equal            fort_opt_macros_:  4781,
                                         fort_operator_table:       25.
        6760    less_or_equal_cc         fort_opt_macros_:  4786, 4904.
        6755    less_or_equal_cd         fort_opt_macros_:  4786, 4901.
        7000    less_or_equal_ch         fort_opt_macros_:  4909, 4926.
        6744    less_or_equal_ci         fort_opt_macros_:  4786, 4889.
        6750    less_or_equal_cr         fort_opt_macros_:  4786, 4895.
        6752    less_or_equal_dc         fort_opt_macros_:  4786, 4898.
        6720    less_or_equal_dd         fort_opt_macros_:  4786, 4853.
        6724    less_or_equal_dd.1       fort_opt_macros_:  4854, 4860.
        7000    less_or_equal_dh         fort_opt_macros_:  4909, 4925.
        6707    less_or_equal_di         fort_opt_macros_:  4786, 4837.
        6734    less_or_equal_dr         fort_opt_macros_:  4786, 4875.
        6740    less_or_equal_dr.1       fort_opt_macros_:  4876, 4882.
        7015    less_or_equal_e1         fort_opt_macros_:  4786, 4948.
        6763    less_or_equal_e2         fort_opt_macros_:  4786, 4907.
        7031    less_or_equal_hc         fort_opt_macros_:  4954, 4966.
        7031    less_or_equal_hd         fort_opt_macros_:  4954, 4965.
        7007    less_or_equal_hh         fort_opt_macros_:  4909, 4938, 4954.
        7025    less_or_equal_hi         fort_opt_macros_:  4954, 4956.
        7025    less_or_equal_hr         fort_opt_macros_:  4954, 4957.
        7025    less_or_equal_ht         fort_opt_macros_:  4954, 4958.
        6742    less_or_equal_ic         fort_opt_macros_:  4786, 4886.
        6703    less_or_equal_id         fort_opt_macros_:  4786, 4830.
        6771    less_or_equal_ih         fort_opt_macros_:  4909, 4911.
        6652    less_or_equal_ii         fort_opt_macros_:  4786, 4788.
        6661    less_or_equal_ii.1       fort_opt_macros_:  4793, 4799.
        6663    less_or_equal_ii.global  fort_opt_macros_:  4790, 4803.
        6667    less_or_equal_ii.global.1      fort_opt_macros_:  4791, 4810.
        6673    less_or_equal_ii.global.1.fb17       fort_opt_macros_:  4813, 4815.
        6666    less_or_equal_ii.global.fb17   fort_opt_macros_:  4805, 4807.
        6674    less_or_equal_ir         fort_opt_macros_:  4786, 4818.
        6746    less_or_equal_rc         fort_opt_macros_:  4786, 4892.
        6726    less_or_equal_rd         fort_opt_macros_:  4786, 4864.
        6732    less_or_equal_rd.1       fort_opt_macros_:  4865, 4871.
        6771    less_or_equal_rh         fort_opt_macros_:  4909, 4912.
        6700    less_or_equal_ri         fort_opt_macros_:  4786, 4825.
        6712    less_or_equal_rr         fort_opt_macros_:  4786, 4842.
        6716    less_or_equal_rr.1       fort_opt_macros_:  4843, 4849.
        6771    less_or_equal_th         fort_opt_macros_:  4909, 4913.
        7035    less_or_equal_tl         fort_opt_macros_:  4786, 4973.
        7043    less_or_equal_tl.1       fort_opt_macros_:  4975, 4977.
        7047    less_or_equal_tl.2       fort_opt_macros_:  4978, 4984.
        6532    less_rc                  fort_opt_macros_:  4578, 4684.
        6512    less_rd                  fort_opt_macros_:  4578, 4656.
        6516    less_rd.1                fort_opt_macros_:  4657, 4663.
        6555    less_rh                  fort_opt_macros_:  4701, 4704.
        6464    less_ri                  fort_opt_macros_:  4578, 4617.
        6476    less_rr                  fort_opt_macros_:  4578, 4634.
        6502    less_rr.1                fort_opt_macros_:  4635, 4641.
        6555    less_th                  fort_opt_macros_:  4701, 4705.
        6621    less_tl                  fort_opt_macros_:  4578, 4765.
        6627    less_tl.1                fort_opt_macros_:  4767, 4769.
        6633    less_tl.2                fort_opt_macros_:  4770, 4776.
        6144    lge                      fort_opt_macros_:  2038, 4351.
        6155    lgt                      fort_opt_macros_:  2038, 4365.
       12606    lhs_.p1                  fort_opt_macros_:  8025.
       12610    lhs_.p2                  fort_opt_macros_:  8028.
       12612    lhs_.p3                  fort_opt_macros_:  8031.
       12614    lhs_.p4                  fort_opt_macros_:  8034.
       12601    lhs_fld                  fort_opt_macros_:  8017,
                                         fort_operator_table:      125.
        6166    lle                      fort_opt_macros_:  2038, 4379.
        6177    llt                      fort_opt_macros_:  2038, 4393.
       12620    load_preg                fort_opt_macros_:  8045,
                                         fort_operator_table:      115.
       12615    load_xreg                fort_opt_macros_:  8037,
                                         fort_operator_table:      114.
       12274    local_call               fort_opt_macros_:  7589, 7642.
       20000    logical                  fort_opt_macros_:   383,  389, 4700, 4908, 5077, 5249, 5458, 5664, 5746, 5748, 5762,
                                                            5764, 5778, 5824, 5826, 5838, 5840, 5869, 5964, 6816, 6977, 7093,
                                         fort_equs:     56.
         643    logical.p                fort_opt_macros_:   389,  432.
        2400    logicaln                 fort_equs:     65.
        6405    logical_op1              fort_opt_macros_:  4554, 4700, 4746, 4908, 4954, 5131, 5303, 5458, 5504, 5664, 5710.
        6407    logical_op2              fort_opt_macros_:  4557, 4701, 4909, 5086, 5258, 5459, 5665.
        1312    log_                     fort_opt_macros_:  2134,
                                         fort_equs:    208.
       12533    loop_end                 fort_opt_macros_:  7935,
                                         fort_operator_table:      107.
       11706    main                     fort_opt_macros_:  7247,
                                         fort_operator_table:       71.
       12227    make_call                fort_opt_macros_:  7240, 7506, 7574.
       11737    make_entry               fort_opt_macros_:  7253, 7265, 7278, 7290.
       11746    make_et_desc             fort_opt_macros_:  7298, 7302.
       12001    make_et_descp            fort_opt_macros_:  7339, 7345.
       11760    make_et_init_auto        fort_opt_macros_:  7316, 7319.
       11747    make_et_join             fort_opt_macros_:  7300, 7305.
       11764    make_et_no_cleanup       fort_opt_macros_:  7322, 7327.
       12004    make_et_ret              fort_opt_macros_:  7349, 7353.
       12214    make_external_variable   fort_opt_macros_:  7531, 7556.
       12032    make_quick_entry         fort_opt_macros_:  7266, 7279, 7397.
       11156    margin                   fort_opt_macros_:  6671,
                                         fort_operator_table:       50.
       11174    margin1.p                fort_opt_macros_:  6675, 6688.
       11177    margin2.p                fort_opt_macros_:  6673, 6692.
          34    margin_slot              fort_opt_macros_:  6681,
                                         fort_equs:    159.
        3710    max                      fort_opt_macros_:  2038, 2579.
        4155    max0                     fort_opt_macros_:  2038, 2815.
        4163    max0.loop                fort_opt_macros_:  2824, 2835.
        4175    max0.p                   fort_opt_macros_:  2817, 2819, 2837.
        4176    max1                     fort_opt_macros_:  2038, 2840.
        4207    max1.loop                fort_opt_macros_:  2852, 2866.
        4211    max1.loop.1              fort_opt_macros_:  2848, 2850, 2856.
        4227    max1.p                   fort_opt_macros_:  2842, 2844, 2867, 2875.
        4223    max1.r                   fort_opt_macros_:  2864, 2869.
        3755    max_cc                   fort_opt_macros_:  2581, 2638.
        3754    max_cd                   fort_opt_macros_:  2581, 2635.
        3750    max_ci                   fort_opt_macros_:  2581, 2623.
        3752    max_cr                   fort_opt_macros_:  2581, 2629.
        3753    max_dc                   fort_opt_macros_:  2581, 2632.
        3736    max_dd                   fort_opt_macros_:  2581, 2605.
        3733    max_di                   fort_opt_macros_:  2581, 2598.
        3745    max_dr                   fort_opt_macros_:  2581, 2616.
        3756    max_e1                   fort_opt_macros_:  2581, 2641.
        3757    max_e2                   fort_opt_macros_:  2581, 2644.
        3747    max_ic                   fort_opt_macros_:  2581, 2620.
        3731    max_id                   fort_opt_macros_:  2581, 2594.
        3724    max_ii                   fort_opt_macros_:  2581, 2583.
        3725    max_ir                   fort_opt_macros_:  2581, 2586.
        3751    max_rc                   fort_opt_macros_:  2581, 2626.
        3737    max_rd                   fort_opt_macros_:  2581, 2608, 2618.
        3727    max_ri                   fort_opt_macros_:  2581, 2590.
        3735    max_rr                   fort_opt_macros_:  2581, 2602.
        4255    min                      fort_opt_macros_:  2038, 2909.
        4522    min0                     fort_opt_macros_:  2038, 3146.
        4530    min0.loop                fort_opt_macros_:  3155, 3166.
        4542    min0.p                   fort_opt_macros_:  3148, 3150, 3168.
        4543    min1                     fort_opt_macros_:  2038, 3171.
        4554    min1.loop                fort_opt_macros_:  3183, 3197.
        4556    min1.loop.1              fort_opt_macros_:  3179, 3181, 3187.
        4574    min1.p                   fort_opt_macros_:  3173, 3175, 3198, 3206.
        4570    min1.r                   fort_opt_macros_:  3195, 3200.
        4322    min_cc                   fort_opt_macros_:  2911, 2968.
        4321    min_cd                   fort_opt_macros_:  2911, 2965.
        4315    min_ci                   fort_opt_macros_:  2911, 2953.
        4317    min_cr                   fort_opt_macros_:  2911, 2959.
        4320    min_dc                   fort_opt_macros_:  2911, 2962.
        4303    min_dd                   fort_opt_macros_:  2911, 2935.
        4300    min_di                   fort_opt_macros_:  2911, 2928.
        4312    min_dr                   fort_opt_macros_:  2911, 2946.
        4323    min_e1                   fort_opt_macros_:  2911, 2971.
        4324    min_e2                   fort_opt_macros_:  2911, 2974.
        4314    min_ic                   fort_opt_macros_:  2911, 2950.
        4276    min_id                   fort_opt_macros_:  2911, 2924.
        4271    min_ii                   fort_opt_macros_:  2911, 2913.
        4272    min_ir                   fort_opt_macros_:  2911, 2916.
        4316    min_rc                   fort_opt_macros_:  2911, 2956.
        4304    min_rd                   fort_opt_macros_:  2911, 2938, 2948.
        4274    min_ri                   fort_opt_macros_:  2911, 2920.
        4302    min_rr                   fort_opt_macros_:  2911, 2932.
        6377    mm_dt1.p                 fort_opt_macros_:  2621, 2627, 2633, 2639, 2645, 2654, 2686, 2722, 2782, 2813, 2838,
                                                            2876, 2907, 2951, 2957, 2963, 2969, 2975, 2984, 3016, 3052, 3113,
                                                            3144, 3169, 3207, 3238, 4422, 4427, 4505, 4510, 4524, 4529, 4547.
        6402    mm_dt2.p                 fort_opt_macros_:  2624, 2630, 2636, 2642, 2954, 2960, 2966, 2972, 4550.
        3125    mm_ret_deaq              fort_opt_macros_:  1063, 1300, 1313, 2052, 2750, 2902, 3080, 3233.
        3121    mm_ret_eaq               fort_opt_macros_:  1044, 1280, 2046, 2708, 2779, 2808, 3038, 3110, 3139.
        3115    mm_ret_q                 fort_opt_macros_:  2040, 2672, 2833, 2873, 3002, 3164, 3204, 4465, 4477, 4489, 4501.
        3131    mm_ret_tq                fort_opt_macros_:  2058, 4437, 4442, 4449, 4453, 4520, 4539.
        4622    mod                      fort_opt_macros_:  2038, 3240.
        4663    mod.1                    fort_opt_macros_:  3244, 3301.
        4660    mod_cc                   fort_opt_macros_:  3241, 3292.
        4657    mod_cd                   fort_opt_macros_:  3241, 3289.
        4653    mod_ci                   fort_opt_macros_:  3241, 3277.
        4655    mod_cr                   fort_opt_macros_:  3241, 3283.
        4656    mod_dc                   fort_opt_macros_:  3241, 3286.
        4647    mod_dd                   fort_opt_macros_:  3241, 3265.
        4644    mod_di                   fort_opt_macros_:  3241, 3258.
        4651    mod_dr                   fort_opt_macros_:  3241, 3271.
        4661    mod_e1                   fort_opt_macros_:  3241, 3295.
        4662    mod_e2                   fort_opt_macros_:  3241, 3298.
        4652    mod_ic                   fort_opt_macros_:  3241, 3274.
        4642    mod_id                   fort_opt_macros_:  3241, 3254.
        4635    mod_ii                   fort_opt_macros_:  3241, 3243.
        4636    mod_ir                   fort_opt_macros_:  3241, 3246.
        4654    mod_rc                   fort_opt_macros_:  3241, 3280.
        4650    mod_rd                   fort_opt_macros_:  3241, 3268.
        4640    mod_ri                   fort_opt_macros_:  3241, 3250.
        4646    mod_rr                   fort_opt_macros_:  3241, 3262.
         442    move_eis                 fort_opt_macros_:   193,  240.
        1467    mpy_overflow_check       fort_opt_macros_:   226,  998, 1215,
                                         fort_equs:    264.
       12040    mqe_end_storage          fort_opt_macros_:  7406, 7411.
       12050    mqe_no_desc              fort_opt_macros_:  7420, 7424.
       12037    mqe_no_storage           fort_opt_macros_:  7404, 7408.
        1451    mult                     fort_opt_macros_:   984,
                                         fort_operator_table:       20.
        1655    mult_cc                  fort_opt_macros_:   986, 1184.
        1630    mult_cd                  fort_opt_macros_:   986, 1154.
        1645    mult_cd.1                fort_opt_macros_:  1160, 1171.
        1646    mult_cd.11               fort_opt_macros_:  1173, 1182.
        1653    mult_cd.2                fort_opt_macros_:  1161, 1180.
        1556    mult_ci                  fort_opt_macros_:   986, 1089.
        1602    mult_cr                  fort_opt_macros_:   986, 1121.
        1617    mult_cr.1                fort_opt_macros_:  1109, 1116, 1127, 1138.
        1620    mult_cr.11               fort_opt_macros_:  1140, 1149.
        1625    mult_cr.2                fort_opt_macros_:  1128, 1147.
        1627    mult_dc                  fort_opt_macros_:   986, 1151.
        1526    mult_dd                  fort_opt_macros_:   986, 1046.
        1533    mult_dd.one_is           fort_opt_macros_:  1047, 1053.
        1534    mult_dd.two_is           fort_opt_macros_:  1048, 1056, 1070.
        1510    mult_di                  fort_opt_macros_:   986, 1024.
        1542    mult_dr                  fort_opt_macros_:   986, 1068.
        1550    mult_dr.1                fort_opt_macros_:  1071, 1077.
        1552    mult_dr.one_is           fort_opt_macros_:  1069, 1081.
        1666    mult_e1                  fort_opt_macros_:   986, 1195, 1203.
        1670    mult_e2                  fort_opt_macros_:   986, 1198, 1202.
        1555    mult_ic                  fort_opt_macros_:   986, 1086.
        1507    mult_id                  fort_opt_macros_:   986, 1021.
        1465    mult_ii                  fort_opt_macros_:   986,  988.
        1470    mult_ii.1                fort_opt_macros_:   989,  993.
        1474    mult_ii.2                fort_opt_macros_:   997, 1000.
        1475    mult_ii.one_is           fort_opt_macros_:   990, 1003.
        1500    mult_ii.two_is           fort_opt_macros_:   991, 1008.
        1503    mult_ir                  fort_opt_macros_:   986, 1013.
        1601    mult_rc                  fort_opt_macros_:   986, 1118.
        1541    mult_rd                  fort_opt_macros_:   986, 1065.
        1504    mult_ri                  fort_opt_macros_:   986, 1016.
        1513    mult_rr                  fort_opt_macros_:   986, 1029.
        1520    mult_rr.one_is           fort_opt_macros_:  1030, 1036.
        1521    mult_rr.two_is           fort_opt_macros_:  1031, 1039.
        1672    mult_tl                  fort_opt_macros_:   986, 1201.
        1700    mult_tl.1                fort_opt_macros_:  1203, 1205.
        1703    mult_tl.2                fort_opt_macros_:  1206, 1210.
        1707    mult_tl.3                fort_opt_macros_:  1214, 1217.
        1710    mult_tl.one_is           fort_opt_macros_:  1207, 1220.
        1713    mult_tl.two_is           fort_opt_macros_:  1208, 1225.
       12517    namelist                 fort_opt_macros_:  7910,
                                         fort_operator_table:       90.
          22    namelist_slot            fort_opt_macros_:  7914,
                                         fort_equs:    165.
        1465    nearest_integer          fort_opt_macros_:  3905, 3911,
                                         fort_equs:    262.
        1464    nearest_whole_number     fort_opt_macros_:  3876, 3882,
                                         fort_equs:    261.
        2676    negate                   fort_opt_macros_:  1965,
                                         fort_operator_table:       23.
        2720    negate_c                 fort_opt_macros_:  1967, 1990.
        2735    negate_c.1               fort_opt_macros_:  1995, 2007.
        2714    negate_d                 fort_opt_macros_:  1967, 1984.
        2704    negate_h                 fort_opt_macros_:  1967, 1970.
        2706    negate_i                 fort_opt_macros_:  1967, 1973.
        2704    negate_l                 fort_opt_macros_:  1967, 1969.
        2710    negate_r                 fort_opt_macros_:  1967, 1978.
        2706    negate_t                 fort_opt_macros_:  1967, 1974.
       12472    neg_storage_add          fort_opt_macros_:  7868,
                                         fort_operator_table:       88.
       12502    neg_storage_add.global   fort_opt_macros_:  7875, 7883.
       12661    new                      fort_opt_macros_:   155.
        5464    nint                     fort_opt_macros_:  2038, 3895.
        5477    nint.dp                  fort_opt_macros_:  3896, 3908, 3917.
        5471    nint.int                 fort_opt_macros_:  3896, 3898.
        5505    nint.p                   fort_opt_macros_:  3896, 3920.
        5473    nint.real                fort_opt_macros_:  3896, 3902.
       12417    non_executable           fort_opt_macros_:  7776,
                                         fort_operator_table:       79.
       10103    not                      fort_opt_macros_:  5776,
                                         fort_operator_table:       32.
       10131    not.e                    fort_opt_macros_:  5778, 5819.
        7237    not_equal                fort_opt_macros_:  5159,
                                         fort_operator_table:       27.
        7343    not_equal_ah             fort_opt_macros_:  5246, 5257.
        7330    not_equal_cc             fort_opt_macros_:  5164, 5240.
        7325    not_equal_cd             fort_opt_macros_:  5164, 5237.
        7357    not_equal_ch             fort_opt_macros_:  5258, 5275.
        7314    not_equal_ci             fort_opt_macros_:  5164, 5225.
        7320    not_equal_cr             fort_opt_macros_:  5164, 5231.
        7322    not_equal_dc             fort_opt_macros_:  5164, 5234.
        7300    not_equal_dd             fort_opt_macros_:  5164, 5203.
        7357    not_equal_dh             fort_opt_macros_:  5258, 5274.
        7272    not_equal_di             fort_opt_macros_:  5164, 5193.
        7304    not_equal_dr             fort_opt_macros_:  5164, 5211.
        7310    not_equal_dr.1           fort_opt_macros_:  5212, 5218.
        7374    not_equal_e1             fort_opt_macros_:  5164, 5297.
        7333    not_equal_e2             fort_opt_macros_:  5164, 5245.
        7410    not_equal_hc             fort_opt_macros_:  5303, 5315.
        7410    not_equal_hd             fort_opt_macros_:  5303, 5314.
        7366    not_equal_hh             fort_opt_macros_:  5258, 5287, 5303.
        7404    not_equal_hi             fort_opt_macros_:  5303, 5305.
        7404    not_equal_hr             fort_opt_macros_:  5303, 5306.
        7404    not_equal_ht             fort_opt_macros_:  5303, 5307.
        7312    not_equal_ic             fort_opt_macros_:  5164, 5222.
        7271    not_equal_id             fort_opt_macros_:  5164, 5190.
        7350    not_equal_ih             fort_opt_macros_:  5258, 5260.
        7254    not_equal_ii             fort_opt_macros_:  5164, 5166.
        7263    not_equal_ii.global      fort_opt_macros_:  5168, 5178.
        7262    not_equal_ii.global.1    fort_opt_macros_:  5169, 5175.
        7265    not_equal_ir             fort_opt_macros_:  5164, 5182.
        7340    not_equal_ll             fort_opt_macros_:  5249, 5252.
        7316    not_equal_rc             fort_opt_macros_:  5164, 5228.
        7303    not_equal_rd             fort_opt_macros_:  5164, 5208.
        7350    not_equal_rh             fort_opt_macros_:  5258, 5261.
        7266    not_equal_ri             fort_opt_macros_:  5164, 5185.
        7275    not_equal_rr             fort_opt_macros_:  5164, 5198.
        7350    not_equal_th             fort_opt_macros_:  5258, 5262.
        7414    not_equal_tl             fort_opt_macros_:  5164, 5322.
        7422    not_equal_tl.1           fort_opt_macros_:  5324, 5326.
       10143    not_equiv                fort_opt_macros_:  5835,
                                         fort_operator_table:      120.
       10153    not_equiv.p              fort_opt_macros_:  5838, 5840, 5850.
       12212    not_external_bif         fort_opt_macros_:  7545, 7553.
       10111    not_ind                  fort_opt_macros_:  5780, 5786.
       10130    not_j_g_s                fort_opt_macros_:  5787, 5816.
       10127    not_j_le_s               fort_opt_macros_:  5787, 5813.
        6417    not_scalar               fort_opt_macros_:  4569, 4709, 4722, 4741, 4917, 4930, 4949, 5094, 5107, 5126, 5266,
                                                            5279, 5298, 5467, 5480, 5499, 5673, 5686, 5705.
       10121    not_tmi                  fort_opt_macros_:  5787, 5795.
       10123    not_tmoz                 fort_opt_macros_:  5787, 5801.
       10125    not_tnc                  fort_opt_macros_:  5787, 5807.
       10120    not_tnz                  fort_opt_macros_:  5787, 5792.
       10122    not_tpl                  fort_opt_macros_:  5787, 5798.
       10124    not_tpnz                 fort_opt_macros_:  5787, 5804.
       10126    not_trc                  fort_opt_macros_:  5787, 5810.
       10117    not_tze                  fort_opt_macros_:  5787, 5789.
       12421    no_op                    fort_opt_macros_:  7782,
                                         fort_operator_table:       80.
           6    null                     fort_opt_macros_:  7328,
                                         fort_equs:    148.
           5    null_ptr                 fort_opt_macros_:  7562,
                                         fort_equs:    147.
           1    one                      fort_opt_macros_:  7903,
                                         fort_equs:    143.
      740000    op1                      fort_opt_macros_:   272,  298,  385,  410,  411,  418,  419,  433,  437,  449,  462,
                                                             539,  548,  554,  557,  558,  563,  565,  566,  578,  584,  587,
                                                             588,  593,  595,  596,  606,  614,  617,  618,  623,  626,  627,
                                                             775,  785,  806,  814,  817,  818,  823,  827,  828,  839,  845,
                                                             848,  849,  857,  859,  860,  869,  877,  880,  881,  886,  890,
                                                             891,  902,  908,  911,  912,  920,  922,  923,  933,  942,  945,
                                                             946,  953,  956,  957, 1092, 1100, 1108, 1125, 1132, 1135, 1136,
                                                            1141, 1144, 1145, 1158, 1165, 1168, 1169, 1174, 1177, 1178, 1341,
                                                            1349, 1357, 1384, 1392, 1395, 1396, 1404, 1407, 1408, 1420, 1428,
                                                            1431, 1432, 1440, 1443, 1444, 1483, 1492, 1500, 1515, 1524, 1532,
                                                            1538, 1542, 1551, 1629, 1707, 1709, 1716, 1718, 1724, 1726, 1744,
                                                            1769, 1794, 1809, 1824, 1844, 1855, 1862, 1866, 1868, 1869, 1881,
                                                            1883, 1890, 1894, 1896, 1904, 1914, 1925, 1927, 1931, 1934, 1935,
                                                            1939, 1946, 1967, 1971, 1975, 1979, 1985, 1992, 2000, 2004, 2005,
                                                            2010, 2014, 2015, 2042, 2044, 2048, 2050, 2054, 2056, 2060, 2061,
                                                            2064, 2067, 2102, 2120, 2131, 2143, 2155, 2164, 2175, 2187, 2195,
                                                            2206, 2218, 2257, 2265, 2267, 2300, 2319, 2335, 2346, 2358, 2370,
                                                            2395, 2405, 2407, 2528, 2539, 2552, 2565, 2610, 2611, 2649, 2654,
                                                            2665, 2666, 2668, 2669, 2678, 2686, 2690, 2691, 2694, 2701, 2702,
                                                            2704, 2705, 2714, 2722, 2726, 2727, 2730, 2734, 2735, 2737, 2741,
                                                            2742, 2744, 2747, 2761, 2764, 2766, 2768, 2769, 2791, 2801, 2802,
                                                            2804, 2805, 2822, 2825, 2827, 2829, 2830, 2847, 2857, 2858, 2860,
                                                            2861, 2885, 2895, 2896, 2898, 2899, 2940, 2941, 2979, 2984, 2995,
                                                            2996, 2998, 2999, 3008, 3016, 3020, 3021, 3024, 3031, 3032, 3034,
                                                            3035, 3044, 3052, 3056, 3057, 3060, 3064, 3065, 3067, 3071, 3072,
                                                            3074, 3077, 3091, 3094, 3096, 3098, 3099, 3122, 3132, 3133, 3135,
                                                            3136, 3153, 3156, 3158, 3160, 3161, 3178, 3188, 3189, 3191, 3192,
                                                            3216, 3226, 3227, 3229, 3230, 3470, 3472, 3489, 3491, 3509, 3511,
                                                            3529, 3531, 3549, 3551, 3569, 3571, 3580, 3591, 3603, 3615, 3628,
                                                            3639, 3651, 3663, 3687, 3698, 3728, 3739, 3769, 3780, 4019, 4020,
                                                            4022, 4023, 4037, 4041, 4042, 4049, 4053, 4054, 4060, 4062, 4063,
                                                            4066, 4068, 4069, 4077, 4081, 4082, 4087, 4091, 4092, 4113, 4118,
                                                            4122, 4124, 4129, 4131, 4133, 4139, 4150, 4162, 4170, 4181, 4193,
                                                            4201, 4212, 4224, 4243, 4245, 4247, 4251, 4265, 4267, 4279, 4287,
                                                            4288, 4295, 4348, 4349, 4360, 4375, 4389, 4402, 4422, 4427, 4428,
                                                            4429, 4505, 4510, 4511, 4512, 4524, 4529, 4530, 4531, 4548, 4555,
                                                            4561, 4570, 5078, 5250, 5780, 5782, 5820, 5851, 5872, 5877, 5885,
                                                            5898, 5954, 5967, 5972, 5980, 5993, 6142, 6143, 6165, 6184, 6187,
                                                            6206, 6211, 6213, 6214, 6215, 6216, 6228, 6229, 6257, 6269, 6279,
                                                            6302, 6320, 6338, 6354, 6368, 6378, 6389, 6410, 6436, 6437, 6455,
                                                            6463, 6467, 6476, 6485, 6494, 6503, 6514, 6515, 6526, 6538, 6554,
                                                            6558, 6567, 6576, 6585, 6594, 6605, 6606, 6612, 6619, 6635, 6651,
                                                            6668, 6681, 6689, 6693, 6711, 6713, 6715, 6724, 6728, 6732, 6756,
                                                            6773, 6785, 6788, 6800, 6818, 6839, 6844, 6849, 6856, 6864, 6881,
                                                            6900, 6920, 6922, 6942, 6960, 6979, 7000, 7010, 7016, 7022, 7029,
                                                            7060, 7066, 7076, 7100, 7111, 7134, 7135, 7137, 7146, 7147, 7178,
                                                            7186, 7189, 7198, 7205, 7208, 7217, 7226, 7227, 7232, 7234, 7307,
                                                            7308, 7309, 7333, 7363, 7368, 7382, 7384, 7391, 7416, 7417, 7421,
                                                            7426, 7529, 7543, 7545, 7548, 7564, 7565, 7567, 7569, 7572, 7578,
                                                            7581, 7584, 7587, 7603, 7606, 7607, 7608, 7636, 7656, 7657, 7658,
                                                            7660, 7661, 7676, 7684, 7721, 7728, 7733, 7736, 7738, 7745, 7747,
                                                            7762, 7766, 7897, 7898, 7914, 7928, 7995, 8015,
                                         fort_equs:     40.
      700000    op2                      fort_opt_macros_:   266,  412,  420, 1624, 1710, 1993, 1995, 1997, 2001, 2011, 2609,
                                                            2617, 2692, 2728, 2757, 2787, 2818, 2843, 2881, 2939, 2947, 3022,
                                                            3058, 3087, 3118, 3149, 3174, 3212, 3461, 3467, 3471, 3473, 3479,
                                                            3486, 3490, 3500, 3506, 3510, 3512, 3518, 3526, 3530, 3540, 3546,
                                                            3550, 3552, 3558, 3566, 3570, 4238, 4260, 4264, 4270, 4283, 4286,
                                                            4292, 4302, 4316, 4334, 4353, 4361, 4367, 4374, 4381, 4388, 4395,
                                                            4403, 4414, 4424, 4507, 4526, 4551, 4558, 4564, 4567, 4767, 4975,
                                                            5152, 5324, 5525, 5731, 5867, 5962, 6714, 6783, 6786, 6797, 6804,
                                                            6807, 6814, 6822, 6825, 6829, 6831, 6840, 6845, 6850, 6915, 6921,
                                                            6939, 6945, 6949, 6957, 6963, 6966, 6976, 6982, 6986, 7011, 7017,
                                                            7023, 7242, 7331, 7338, 7362, 7371, 7420, 7425, 7568, 7746, 7756,
                                         fort_equs:     41.
      640000    op3                      fort_opt_macros_:  4294, 4317, 4335, 6789, 6793, 6925, 6929, 7392,
                                         fort_equs:     42.
      600000    op4                      fort_opt_macros_:  4301,
                                         fort_equs:     43.
      540000    op5                      fort_equs:     44.
      500000    op6                      fort_equs:     45.
      440000    op7                      fort_equs:     46.
       11243    open                     fort_opt_macros_:  6735,
                                         fort_operator_table:       91.
       11356    open.p                   fort_opt_macros_:  6855, 6863.
       11271    opencase1                fort_opt_macros_:  6773, 6775.
       11314    opencase10               fort_opt_macros_:  6773, 6811.
       11314    opencase11               fort_opt_macros_:  6773, 6812.
       11314    opencase12               fort_opt_macros_:  6773, 6813.
       11271    opencase13               fort_opt_macros_:  6773, 6782.
       11324    opencase14               fort_opt_macros_:  6773, 6828.
       11271    opencase2                fort_opt_macros_:  6773, 6776.
       11271    opencase3                fort_opt_macros_:  6773, 6777.
       11271    opencase4                fort_opt_macros_:  6773, 6778.
       11271    opencase5                fort_opt_macros_:  6773, 6779.
       11271    opencase6                fort_opt_macros_:  6773, 6780.
       11271    opencase7                fort_opt_macros_:  6773, 6781.
       11304    opencase8                fort_opt_macros_:  6773, 6796.
       11314    opencase9                fort_opt_macros_:  6773, 6810.
       11202    openfile                 fort_opt_macros_:  6696,
                                         fort_operator_table:       51.
       11232    openfile1.p              fort_opt_macros_:  6699, 6723.
       11235    openfile2.p              fort_opt_macros_:  6702, 6703, 6727.
       11240    openfile3.p              fort_opt_macros_:  6705, 6706, 6731.
       11257    open_loop                fort_opt_macros_:  6769, 6794, 6808, 6826, 6832, 6841, 6846, 6851.
       11330    open_loop.e              fort_opt_macros_:  6771, 6834.
       11332    open_loop1.p             fort_opt_macros_:  6784, 6838.
       11336    open_loop2.p             fort_opt_macros_:  6798, 6843.
       11342    open_loop3.p             fort_opt_macros_:  6816, 6848.
       11346    open_return              fort_opt_macros_:  6770, 6853.
           0    operator_table           fort_opt_macros_:   178,
                                         fort_operator_table:       16.
       40000    opf                      fort_equs:     29,   30,   31,   32,   33,   34,   35,   36,   38,   40,   41,   42,
                                                        43,   44,   45,   46.
       12432    opt_subscript            fort_opt_macros_:  7798,
                                         fort_operator_table:       82.
           0    opv                      fort_opt_macros_:  4432, 4515, 4534, 6212, 6227,
                                         fort_equs:     38.
         551    op_base                  fort_equs:    175,  177,  178,  180,  181,  182,  183,  184,  185,  186,  187,  188,
                                                       189,  190,  191,  192,  193,  194,  195,  196,  197,  198,  199,  200,
                                                       201,  202,  203,  204,  205,  206,  207,  208,  209,  210,  211,  212,
                                                       213,  214,  215,  216,  217,  218,  219,  220,  221,  222,  223,  224,
                                                       225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,
                                                       237,  238,  239,  240,  241,  242,  243,  244,  245,  246,  247,  248,
                                                       249,  250,  251,  252,  253,  254,  255,  256,  257,  258,  259,  260,
                                                       261,  262,  263,  264,  265,  266,  267,  268,  269,  279,  281.
       10055    or                       fort_opt_macros_:  5744,
                                         fort_operator_table:       30.
        6337    or.tl                    fort_opt_macros_:  2038, 4503.
        6343    or.tl.loop               fort_opt_macros_:  4509, 4517.
        6353    or.tl.r                  fort_opt_macros_:  4513, 4519.
       10064    or_e1                    fort_opt_macros_:  5748, 5754.
       10066    or_e2                    fort_opt_macros_:  5746, 5757.
         400    P0.5H                    fort_opt_macros_:  1556, 1577,
                                         fort_equs:    286.
        2040    P1.0H                    fort_equs:    287.
        2100    P2.0H                    fort_opt_macros_:  1607,
                                         fort_equs:    288.
       11637    pause                    fort_opt_macros_:  7183,
                                         fort_operator_table:       58.
       11645    pause.1                  fort_opt_macros_:  7192, 7200.
       12017    pfn_ret                  fort_opt_macros_:  7357, 7373.
       11773    pop_ps                   fort_opt_macros_:  7331, 7338.
       12056    ppl.done                 fort_opt_macros_:  7434, 7437.
       12054    ppl.loop                 fort_opt_macros_:  7433, 7435.
         400    pr1                      fort_opt_macros_:  2104, 2133, 2145, 2157, 2177, 2189, 2208, 2220, 2348, 2360, 2372,
                                                            2541, 2554, 2567, 3593, 3605, 3617, 3641, 3653, 3665, 3689, 3700,
                                                            3730, 3741, 3771, 3782, 4152, 4164, 4183, 4195, 4214, 4226, 6314,
                                                            6332, 6445, 6528, 6616, 6629, 6645, 6662, 6683, 6718, 6750, 6858,
                                                            6877, 7031, 7043, 7161, 7190, 7199, 7209, 7218, 7752,
                                         fort_equs:    117,  123.
           2    pr1n                     fort_opt_macros_:  1745, 1770, 1795, 1810, 1825, 1845, 1935, 1950, 2259, 2302, 2321,
                                                            7661, 7684,
                                         fort_equs:    127.
         200    pr2                      fort_opt_macros_:  6314, 6332, 6351, 6629, 6645, 6662, 6683, 6750, 6858, 6877, 7031,
                                                            7043, 7161, 7199, 7218, 7547, 7752,
                                         fort_equs:    118,  123.
           3    pr2n                     fort_opt_macros_:  1187, 1372, 1449, 1744, 1769, 1794, 1809, 1824, 1844, 1855, 1881,
                                                            1914, 1925, 1946, 2102, 2131, 2143, 2155, 2175, 2187, 2206, 2218,
                                                            2257, 2300, 2319, 2346, 2358, 2370, 2539, 2552, 2565, 3317, 3335,
                                                            3360, 3425, 3441, 3452, 3591, 3603, 3615, 3639, 3651, 3663, 3687,
                                                            3698, 3728, 3739, 3769, 3780, 4150, 4162, 4181, 4193, 4212, 4224,
                                                            4294, 4301, 6287, 6366, 6408, 6525, 6548, 6710, 6712, 6786, 6921,
                                                            6942, 6979, 7059, 7098, 7130, 7188, 7207, 7333, 7362, 7559, 7610,
                                                            7738, 7913,
                                         fort_equs:    128.
         100    pr3                      fort_opt_macros_:  1747, 1772, 1797, 1812, 1827, 1847, 1937, 1952, 2104, 2133, 2145,
                                                            2157, 2177, 2189, 2208, 2220, 2304, 2324, 2348, 2360, 2372, 2541,
                                                            2554, 2567, 3593, 3605, 3617, 3641, 3653, 3665, 3689, 3700, 3730,
                                                            3741, 3771, 3782, 4152, 4164, 4183, 4195, 4214, 4226, 6314, 6332,
                                                            6445, 6528, 6616, 6629, 6645, 6662, 6683, 6718, 6750, 6858, 6877,
                                                            7031, 7043, 7161, 7190, 7199, 7209, 7218, 7752,
                                         fort_equs:    119,  123.
           4    pr3n                     fort_opt_macros_:  6763, 6787, 6802, 6820, 6890, 6924, 6944, 6962, 6981,
                                         fort_equs:    129.
        1000    pr4                      fort_opt_macros_:  1747, 1772, 1797, 1812, 1827, 1847, 1937, 1952, 2104, 2133, 2145,
                                                            2157, 2177, 2189, 2208, 2220, 2304, 2324, 2348, 2360, 2372, 2541,
                                                            2554, 2567, 3593, 3605, 3617, 3641, 3653, 3665, 3689, 3700, 3730,
                                                            3741, 3771, 3782, 4152, 4164, 4183, 4195, 4214, 4226, 6314, 6332,
                                                            6445, 6528, 6616, 6629, 6645, 6662, 6683, 6718, 6750, 6858, 6877,
                                                            7031, 7043, 7161, 7190, 7199, 7209, 7218, 7547, 7671, 7693, 7752,
                                         fort_equs:    116,  123.
           1    pr4n                     fort_equs:    126.
          40    pr5                      fort_opt_macros_:  1747, 1772, 1797, 1812, 1827, 1847, 1937, 1952, 2104, 2133, 2145,
                                                            2157, 2177, 2189, 2208, 2220, 2304, 2324, 2348, 2360, 2372, 2541,
                                                            2554, 2567, 3593, 3605, 3617, 3641, 3653, 3665, 3689, 3700, 3730,
                                                            3741, 3771, 3782, 4152, 4164, 4183, 4195, 4214, 4226, 6314, 6332,
                                                            6445, 6528, 6616, 6629, 6645, 6662, 6683, 6718, 6750, 6858, 6877,
                                                            7031, 7043, 7161, 7190, 7199, 7209, 7218, 7752,
                                         fort_equs:    120,  123.
           5    pr5n                     fort_opt_macros_:  6376, 6387,
                                         fort_equs:    130.
          20    pr7                      fort_opt_macros_:  1747, 1772, 1797, 1812, 1827, 1847, 1937, 1952, 2104, 2133, 2145,
                                                            2157, 2177, 2189, 2208, 2220, 2304, 2324, 2348, 2360, 2372, 2541,
                                                            2554, 2567, 3593, 3605, 3617, 3641, 3653, 3665, 3689, 3700, 3730,
                                                            3741, 3771, 3782, 4152, 4164, 4183, 4195, 4214, 4226, 6314, 6332,
                                                            6445, 6528, 6616, 6629, 6645, 6662, 6683, 6718, 6750, 6858, 6877,
                                                            7031, 7043, 7161, 7190, 7199, 7209, 7218, 7752,
                                         fort_equs:    121,  123.
           6    pr7n                     fort_equs:    131.
       12005    prepare_for_namelists    fort_opt_macros_:  7254, 7267, 7280, 7356.
       12053    process_param_list       fort_opt_macros_:  7430,
                                         fort_operator_table:      124.
           1    protect_indicators       fort_opt_macros_:  2073, 2081, 2091, 3362, 3427, 3444, 3846, 3852, 3875, 3881, 3904,
                                                            3910, 5900, 5901, 5905, 5906, 5995, 5996, 6000, 6001, 6199,
                                         fort_equs:    134.
           2    ps                       fort_opt_macros_:  6353, 6367, 6377, 6388, 6679, 6709, 7058, 7075, 7099, 7110, 7128,
                                                            7329, 7360, 7912,
                                         fort_equs:    144.
          12    ps_area_ptr              fort_opt_macros_:  6757, 6882,
                                         fort_equs:    152.
          52    ps_ptr                   fort_opt_macros_:  7334,
                                         fort_equs:    155.
        1171    push_offset              stack_header:        81.
         400    q                        fort_opt_macros_:   201,  229,  282,  283,  305,  316,  347,  488,  490,  656,  658,
                                                             668,  698,  994, 1001, 1004, 1006, 1009, 1011, 1102, 1235, 1237,
                                                            1351, 1495, 1500, 1527, 1532, 1538, 1646, 1647, 1652, 1656, 1742,
                                                            1751, 1863, 1891, 1976, 2042, 2072, 2077, 2399, 2402, 2408, 2648,
                                                            2666, 2760, 2766, 2821, 2827, 2978, 2996, 3090, 3096, 3152, 3158,
                                                            3302, 3306, 3361, 3366, 3467, 3486, 3506, 3526, 3546, 3566, 3802,
                                                            3803, 3807, 3811, 3815, 3818, 3819, 3899, 3900, 3906, 3912, 4033,
                                                            4238, 4275, 4295, 4302, 4308, 4326, 4344, 4462, 4474, 4486, 4498,
                                                            4585, 4587, 4588, 4592, 4793, 4795, 4796, 4800, 4999, 5000, 5171,
                                                            5172, 5343, 5345, 5346, 5350, 5549, 5551, 5552, 5556, 6030, 6031,
                                                            6033, 6187, 6204, 6312, 6330, 6550, 6627, 6643, 6660, 6678, 6717,
                                                            6788, 6800, 6856, 6922, 6960, 7029, 7041, 7074, 7109, 7135, 7147,
                                                            7789, 7794, 7807, 7810, 7817, 7820, 7843, 7860, 7923, 7931,
                                         fort_equs:     73.
         437    qls1                     fort_opt_macros_:   220,  233.
       11633    quick_return             fort_opt_macros_:  7168, 7175.
        3616    rddim.1                  fort_opt_macros_:  2433, 2497.
        4720    rdmod.1                  fort_opt_macros_:  3269, 3341.
        5023    rdsign.1                 fort_opt_macros_:  3391, 3450.
       10610    read                     fort_opt_macros_:  6305,
                                         fort_operator_table:       39.
       10622    read.p                   fort_opt_macros_:  6309, 6319.
       10744    read_array               fort_opt_macros_:  6451,
                                         fort_operator_table:       99.
       11575    read_internal_file       fort_opt_macros_:  7121,
                                         fort_operator_table:      121.
       12517    read_namelist            fort_opt_macros_:  7908,
                                         fort_operator_table:      108.
       10702    read_scalar              fort_opt_macros_:  6393,
                                         fort_operator_table:       98.
       11026    read_vector              fort_opt_macros_:  6534,
                                         fort_operator_table:      100.
      200000    real                     fort_opt_macros_:  2786, 2788, 2810, 2842, 2844, 2866, 3117, 3119, 3141, 3173, 3175,
                                                            3197, 3310, 3312, 3823, 4409, 4411,
                                         fort_equs:     53.
        5531    real.p                   fort_opt_macros_:  3925, 3956.
        1000    realn                    fort_opt_macros_:   678,  797, 1099, 1112, 1334, 1348, 1361, 1482, 1623, 1628, 2689,
                                                            3019, 3465, 3477, 3484, 3495, 3504, 3516, 3524, 3535,
                                         fort_equs:     62.
        5506    real_builtin             fort_opt_macros_:  2038, 3924.
        5523    real_builtin.cmpx        fort_opt_macros_:  3925, 3941.
        5517    real_builtin.dp          fort_opt_macros_:  3925, 3935, 3953.
        5513    real_builtin.int         fort_opt_macros_:  3925, 3927, 3948.
        5515    real_builtin.real        fort_opt_macros_:  3925, 3931.
        1350    real_p_int               fort_opt_macros_:  1773,
                                         fort_equs:    195.
        1347    real_p_real              fort_opt_macros_:  1813,
                                         fort_equs:    196.
         654    real_to_integer          fort_equs:    188.
       11540    record_number            fort_opt_macros_:  7069,
                                         fort_operator_table:       53.
       11546    record_number.p          fort_opt_macros_:  7072, 7079.
          11    record_number_slot       fort_opt_macros_:  7076,
                                         fort_equs:    160.
       12661    refresh_regs             fort_opt_macros_:   112.
       10000    rel_constant             fort_opt_macros_:  6283,
                                         fort_equs:     99.
        1456    restore_stack_quick      fort_equs:    254.
       11626    return                   fort_opt_macros_:  7166,
                                         fort_operator_table:       57.
        1173    return_no_pop_offset     stack_header:        83.
        1172    return_offset            stack_header:        82.
         631    return_op                fort_opt_macros_:  7409,
                                         fort_equs:    182.
         436    ret_mpy                  fort_opt_macros_:   216,  231.
         425    ret_sub                  fort_opt_macros_:   199,  208.
       11126    rewind                   fort_opt_macros_:  6638,
                                         fort_operator_table:       48.
       11137    rewind.p                 fort_opt_macros_:  6641, 6650.
       12441    right_shift              fort_opt_macros_:  7814,
                                         fort_operator_table:       84.
        2314    round_dp_const           fort_opt_macros_:  1622, 1627.
        2307    round_dp_to_real         fort_opt_macros_:  1412, 1619, 1909, 1921.
         512    r_e_as                   fort_equs:    273,
                                         fort_single_inst:    61.
         527    r_ge_a                   fort_equs:    276,
                                         fort_single_inst:    64.
         524    r_ge_s                   fort_equs:    278,
                                         fort_single_inst:    68.
         503    r_g_a                    fort_equs:    272,
                                         fort_single_inst:    66.
         477    r_g_s                    fort_equs:    192,
                                         fort_single_inst:   103.
         520    r_le_a                   fort_equs:    275,
                                         fort_single_inst:    65.
         532    r_le_s                   fort_equs:    193,
                                         fort_single_inst:   102.
         474    r_l_a                    fort_equs:    271,
                                         fort_single_inst:    63.
         507    r_l_s                    fort_equs:    277,
                                         fort_single_inst:    67.
         515    r_ne_as                  fort_equs:    274,
                                         fort_single_inst:    62.
        1455    save_stack_quick         fort_equs:    253.
       10707    scalar_common            fort_opt_macros_:  6398, 6403.
        1227    set_cs_eis               fort_opt_macros_:  4297,
                                         fort_equs:    251.
       12637    sf                       fort_opt_macros_:  8062,
                                         fort_operator_table:       65.
       12635    sf_def                   fort_opt_macros_:  8061,
                                         fort_operator_table:       66.
        1014    shorten_stack            fort_equs:    255.
       11650    short_pause              fort_opt_macros_:  7186, 7197.
       11664    short_stop               fort_opt_macros_:  7205, 7216.
        4723    sign                     fort_opt_macros_:  2038, 3349.
        4777    sign.1                   fort_opt_macros_:  3370, 3374, 3385, 3423.
        1375    signal_stringrange       fort_equs:    185.
        4774    sign_cc                  fort_opt_macros_:  3350, 3414.
        4773    sign_cd                  fort_opt_macros_:  3350, 3411.
        4767    sign_ci                  fort_opt_macros_:  3350, 3399.
        4771    sign_cr                  fort_opt_macros_:  3350, 3405.
        4772    sign_dc                  fort_opt_macros_:  3350, 3408.
        4763    sign_dd                  fort_opt_macros_:  3350, 3387.
        4760    sign_di                  fort_opt_macros_:  3350, 3380.
        4765    sign_dr                  fort_opt_macros_:  3350, 3393.
        4775    sign_e1                  fort_opt_macros_:  3350, 3417.
        4776    sign_e2                  fort_opt_macros_:  3350, 3420.
         667    sign_fl                  fort_opt_macros_:  3428, 3445,
                                         fort_equs:    226.
         666    sign_fx                  fort_opt_macros_:  3363,
                                         fort_equs:    225.
        4766    sign_ic                  fort_opt_macros_:  3350, 3396.
        4756    sign_id                  fort_opt_macros_:  3350, 3376.
        4742    sign_ii                  fort_opt_macros_:  3350, 3358.
        4752    sign_ir                  fort_opt_macros_:  3350, 3368.
        4770    sign_rc                  fort_opt_macros_:  3350, 3402.
        4764    sign_rd                  fort_opt_macros_:  3350, 3390.
        4754    sign_ri                  fort_opt_macros_:  3350, 3372.
        4762    sign_rr                  fort_opt_macros_:  3350, 3384.
        5142    sin                      fort_opt_macros_:  2038, 3579.
        5147    sin.1                    fort_opt_macros_:  3580, 3582.
        5152    sin.2                    fort_opt_macros_:  3584, 3589.
         155    single_inst              fort_opt_macros_:   179,
                                         fort_single_inst:    16.
        5304    sinh                     fort_opt_macros_:  2038, 3716.
        5314    sinh.1                   fort_opt_macros_:  3721, 3726.
        5324    sinh.dp                  fort_opt_macros_:  3717, 3736, 3750.
        5311    sinh.int                 fort_opt_macros_:  3717, 3719.
        5337    sinh.p                   fort_opt_macros_:  3717, 3753.
        5313    sinh.real                fort_opt_macros_:  3717, 3723.
        1460    sinh_                    fort_opt_macros_:  3731,
                                         fort_equs:    257.
        1275    sin_                     fort_opt_macros_:  3594,
                                         fort_equs:    227.
        5151    sin_i                    fort_opt_macros_:  3580, 3586.
        5527    sngl                     fort_opt_macros_:  2038, 3951.
        5531    sngl.p                   fort_opt_macros_:  3952, 3958.
        5205    sqrt                     fort_opt_macros_:  2038, 3627.
        5212    sqrt.1                   fort_opt_macros_:  3628, 3630.
        5215    sqrt.2                   fort_opt_macros_:  3632, 3637.
        1274    sqrt_                    fort_opt_macros_:  3642,
                                         fort_equs:    230.
        5214    sqrt_i                   fort_opt_macros_:  3628, 3634.
          73    stach_header.trace_top_ptr     stack_header:        62.
          32    stack_frame.arg_ptr      fort_opt_macros_:  7347,
                                         stack_frame:   16.
         100    stack_frame.condition_bit      stack_frame:   32.
          20    stack_frame.condition_word     stack_frame:    9.
        2000    stack_frame.crawl_out_bit      stack_frame:   28.
          26    stack_frame.entry_ptr    stack_frame:   13.
          20    stack_frame.flag_word    stack_frame:   24.
         400    stack_frame.link_trap_bit      stack_frame:   30.
          30    stack_frame.lp_ptr       stack_frame:   15.
       20000    stack_frame.main_proc_bit      stack_frame:   25.
          60    stack_frame.min_length   stack_frame:   23.
          22    stack_frame.next_sp      stack_frame:   10.
          36    stack_frame.on_unit_rel_ptrs   stack_frame:   19.
          30    stack_frame.operator_ptr       stack_frame:   14.
          37    stack_frame.operator_ret_ptr   stack_frame:   20.
          20    stack_frame.prev_sp      stack_frame:    8.
          40    stack_frame.regs         stack_frame:   22.
          24    stack_frame.return_ptr   stack_frame:   12.
       10000    stack_frame.run_unit_manager   stack_frame:   26.
        1000    stack_frame.signaller_bit      stack_frame:   29.
          22    stack_frame.signaller_word     stack_frame:   11.
        4000    stack_frame.signal_bit   stack_frame:   27.
          34    stack_frame.static_ptr   stack_frame:   17.
         200    stack_frame.support_bit  stack_frame:   31.
          35    stack_frame.support_ptr  stack_frame:   18.
          37    stack_frame.translator_id      stack_frame:   21.
          66    stack_header.assign_linkage_ptr      stack_header:        59.
          32    stack_header.bar_mode_sp       stack_header:        42.
          36    stack_header.call_op_ptr       stack_header:        44.
          10    stack_header.clr_ptr     stack_header:        27.
           6    stack_header.combined_stat_ptr       stack_header:        25.
           4    stack_header.cpm_data_ptr      stack_header:        24.
          13    stack_header.cpm_enabled       stack_header:        32.
          13    stack_header.cur_lot_size      stack_header:        31.
          64    stack_header.ect_ptr     stack_header:        58.
          46    stack_header.entry_op_ptr      stack_header:        49.
          70    stack_header.heap_header_ptr   stack_header:        60.
          74    stack_header.in_trace    stack_header:        63.
          52    stack_header.isot_ptr    stack_header:        52.
          26    stack_header.lot_ptr     stack_header:        39.
          12    stack_header.main_proc_invoked       stack_header:        29.
          12    stack_header.max_lot_size      stack_header:        28.
          20    stack_header.parent_ptr  stack_header:        36.
          34    stack_header.pl1_operators_ptr       fort_opt_macros_:  7296,
                                                     stack_header:        43.
          40    stack_header.push_op_ptr       stack_header:        46.
          42    stack_header.return_op_ptr     stack_header:        47.
          44    stack_header.ret_no_pop_op_ptr       stack_header:        48.
          62    stack_header.rnt_ptr     stack_header:        57.
          12    stack_header.run_unit_depth    stack_header:        30.
          54    stack_header.sct_ptr     stack_header:        53.
          30    stack_header.signal_ptr  stack_header:        41.
          22    stack_header.stack_begin_ptr   stack_header:        37.
          24    stack_header.stack_end_ptr     stack_header:        38.
          14    stack_header.system_free_ptr   stack_header:        33.
          60    stack_header.sys_link_info_ptr       stack_header:        56.
          72    stack_header.trace_frames      stack_header:        61.
          50    stack_header.trans_op_tv_ptr   stack_header:        51.
          56    stack_header.unwinder_ptr      stack_header:        54.
          16    stack_header.user_free_ptr     stack_header:        34.
         100    stack_header_end         stack_header:        64.
          11    star_symbol              fort_opt_macros_:  7359,
                                         fort_equs:    151.
       12076    stat                     fort_opt_macros_:  7492,
                                         fort_operator_table:       74.
        2000    statement_function       fort_equs:    101.
       11653    stop                     fort_opt_macros_:  7202,
                                         fort_operator_table:       59.
       11661    stop.1                   fort_opt_macros_:  7211, 7219.
       12452    storage_add              fort_opt_macros_:  7834,
                                         fort_operator_table:       86.
       12462    storage_add.global       fort_opt_macros_:  7841, 7849.
       12504    storage_add_one          fort_opt_macros_:  7887,
                                         fort_operator_table:       89.
       12513    storage_add_one.global   fort_opt_macros_:  7894, 7902.
       12464    storage_sub              fort_opt_macros_:  7855,
                                         fort_operator_table:       87.
       12445    store_zero               fort_opt_macros_:  7824,
                                         fort_operator_table:       85.
       11554    string                   fort_opt_macros_:  7089,
                                         fort_operator_table:       54.
       11560    string_c                 fort_opt_macros_:  7093, 7097.
       11555    string_common            fort_opt_macros_:  7086, 7092.
       11565    string_length            fort_opt_macros_:  7106,
                                         fort_operator_table:       55.
          25    string_length_slot       fort_opt_macros_:  6715, 7111, 7136,
                                         fort_equs:    162.
          20    string_slot              fort_opt_macros_:  7100, 7131,
                                         fort_equs:    161.
        1077    sub                      fort_opt_macros_:   651,
                                         fort_operator_table:       19.
       11715    subr                     fort_opt_macros_:  7259,
                                         fort_operator_table:       73.
       12647    subscript                fort_opt_macros_:  8066,
                                         fort_operator_table:       67.
       12532    subscript_in_q           fort_opt_macros_:  7923, 7930.
         426    subscript_mpy            fort_opt_macros_:   192,  212.
         432    subscript_mpy.1          fort_opt_macros_:   218,  222.
         435    subscript_mpy.2          fort_opt_macros_:   225,  228.
       12651    substr                   fort_opt_macros_:  8068,
                                         fort_operator_table:      113.
          40    substr_ref               fort_equs:    106.
        1400    sub_cc                   fort_opt_macros_:   653,  929.
        1411    sub_cc.01                fort_opt_macros_:   941,  963.
        1416    sub_cc.1                 fort_opt_macros_:   935,  948.
        1421    sub_cc.11                fort_opt_macros_:   952,  967.
        1426    sub_cc.2                 fort_opt_macros_:   936,  959.
        1432    sub_cc.3                 fort_opt_macros_:   937,  965.
        1354    sub_cd                   fort_opt_macros_:   653,  899.
        1367    sub_cd.1                 fort_opt_macros_:   904,  914.
        1371    sub_cd.10                fort_opt_macros_:   917.
        1372    sub_cd.11                fort_opt_macros_:   919,  927.
        1376    sub_cd.2                 fort_opt_macros_:   905,  925.
        1233    sub_ci                   fort_opt_macros_:   653,  782.
        1300    sub_cr                   fort_opt_macros_:   653,  836.
        1313    sub_cr.1                 fort_opt_macros_:   801,  841,  851.
        1315    sub_cr.10                fort_opt_macros_:   794,  854.
        1316    sub_cr.11                fort_opt_macros_:   856,  864.
        1322    sub_cr.2                 fort_opt_macros_:   842,  862.
        1324    sub_dc                   fort_opt_macros_:   653,  866.
        1341    sub_dc.1                 fort_opt_macros_:   871,  883.
        1342    sub_dc.11                fort_opt_macros_:   885,  897.
        1350    sub_dc.2                 fort_opt_macros_:   872,  893.
        1174    sub_dd                   fort_opt_macros_:   653,  733.
        1200    sub_dd.1                 fort_opt_macros_:   734,  740.
        1145    sub_di                   fort_opt_macros_:   653,  697.
        1157    sub_di.1                 fort_opt_macros_:   698,  713.
        1214    sub_dr                   fort_opt_macros_:   653,  759.
        1220    sub_dr.1                 fort_opt_macros_:   760,  766.
        1434    sub_e1                   fort_opt_macros_:   653,  969,  977.
        1436    sub_e2                   fort_opt_macros_:   653,  972,  976.
        1224    sub_ic                   fort_opt_macros_:   653,  772.
        1141    sub_id                   fort_opt_macros_:   653,  690.
        1113    sub_ii                   fort_opt_macros_:   653,  655.
       12525    sub_index                fort_opt_macros_:  7921,
                                         fort_operator_table:      106.
        1116    sub_ir                   fort_opt_macros_:   653,  660.
        1250    sub_rc                   fort_opt_macros_:   653,  803.
        1265    sub_rc.1                 fort_opt_macros_:   780,  808,  820.
        1266    sub_rc.11                fort_opt_macros_:   822,  834.
        1274    sub_rc.2                 fort_opt_macros_:   809,  830.
        1204    sub_rd                   fort_opt_macros_:   653,  746.
        1210    sub_rd.1                 fort_opt_macros_:   747,  753.
        1122    sub_ri                   fort_opt_macros_:   653,  667.
        1134    sub_ri.1                 fort_opt_macros_:   668,  683.
        1164    sub_rr                   fort_opt_macros_:   653,  720.
        1170    sub_rr.1                 fort_opt_macros_:   721,  727.
        1440    sub_tl                   fort_opt_macros_:   653,  975.
        1446    sub_tl.1                 fort_opt_macros_:   977,  979.
        5731    tan                      fort_opt_macros_:  2038, 4138.
        5736    tan.1                    fort_opt_macros_:  4139, 4141.
        5741    tan.2                    fort_opt_macros_:  4143, 4148.
        5250    tanh                     fort_opt_macros_:  2038, 3675.
        5260    tanh.1                   fort_opt_macros_:  3680, 3685.
        5270    tanh.dp                  fort_opt_macros_:  3676, 3695, 3709.
        5255    tanh.int                 fort_opt_macros_:  3676, 3678.
        5303    tanh.p                   fort_opt_macros_:  3676, 3712.
        5257    tanh.real                fort_opt_macros_:  3676, 3682.
        1414    tanh_                    fort_opt_macros_:  3690,
                                         fort_equs:    233.
        1301    tan_                     fort_opt_macros_:  4153,
                                         fort_equs:    234.
        5740    tan_i                    fort_opt_macros_:  4139, 4145.
       40000    temp                     fort_opt_macros_:  4709, 4722, 4741, 4917, 4930, 4949, 5094, 5107, 5126, 5266, 5279,
                                                            5298, 5467, 5480, 5499, 5673, 5686, 5705, 5896, 5991,
                                         fort_equs:     97.
          50    temp_pt                  fort_opt_macros_:  1940, 1955, 2106, 2159, 2374, 2569, 3619, 3667, 3691, 3702, 3732,
                                                            3743, 3773, 3784,
                                         fort_equs:    172.
       11621    terminate                fort_opt_macros_:  7158,
                                         fort_operator_table:       56.
        6400    tmi                      fort_opt_macros_:  4589, 4600, 4615, 4627, 4639, 4650, 4661, 4672, 4774, 5557, 5572,
                                                            5584, 5596, 5607, 5618, 5629, 5640, 5742, 5799,
                                         fort_equs:     85.
        7400    tmoz                     fort_opt_macros_:  4797, 4808, 4823, 4835, 4847, 4858, 4869, 4880, 4982, 5351, 5366,
                                                            5378, 5390, 5401, 5412, 5423, 5434, 5536, 5805,
                                         fort_equs:     87.
       10400    tnc                      fort_opt_macros_:  4377, 4405, 4598, 4715, 4728, 4738, 4755, 4763, 5570, 5679, 5692,
                                                            5702, 5719, 5727, 5811,
                                         fort_equs:     89.
        6000    tnz                      fort_opt_macros_:  5173, 5180, 5188, 5196, 5201, 5206, 5216, 5220, 5243, 5255, 5272,
                                                            5285, 5295, 5312, 5320, 5329, 5790, 5846,
                                         fort_equs:     84.
        2420    to_cmpx.cmpx             fort_opt_macros_:  1703, 1730.
        2412    to_cmpx.dp               fort_opt_macros_:  1703, 1722.
        2375    to_cmpx.int              fort_opt_macros_:  1703, 1705.
        2404    to_cmpx.real             fort_opt_macros_:  1703, 1714.
        2366    to_dp.cmpx               fort_opt_macros_:  1682, 1696.
        2364    to_dp.dp                 fort_opt_macros_:  1682, 1692.
        2360    to_dp.int                fort_opt_macros_:  1682, 1684.
        2362    to_dp.real               fort_opt_macros_:  1682, 1688.
        2332    to_int.cmpx              fort_opt_macros_:  1642, 1650.
        2334    to_int.dp                fort_opt_macros_:  1642, 1654.
        2330    to_int.int               fort_opt_macros_:  1642, 1645.
        2332    to_int.real              fort_opt_macros_:  1642, 1649.
        2330    to_int.tl                fort_opt_macros_:  1642, 1644.
        2351    to_real.cmpx             fort_opt_macros_:  1661, 1675.
        2347    to_real.dp               fort_opt_macros_:  1661, 1671.
        2343    to_real.int              fort_opt_macros_:  1661, 1663.
        2345    to_real.real             fort_opt_macros_:  1661, 1667.
        7000    tpl                      fort_opt_macros_:  4801, 4816, 4828, 4840, 4851, 4862, 4873, 4884, 4986, 5347, 5358,
                                                            5373, 5385, 5397, 5408, 5419, 5430, 5532, 5796,
                                         fort_equs:     86.
       10000    tpnz                     fort_opt_macros_:  4593, 4608, 4620, 4632, 4643, 4654, 4665, 4676, 4778, 5553, 5564,
                                                            5579, 5591, 5603, 5614, 5625, 5636, 5738, 5802,
                                         fort_equs:     88.
        4400    tq                       fort_opt_macros_:   456,  457,  468,  472,  644,  649,  980,  982, 1211, 1218, 1221,
                                                            1223, 1226, 1228, 1466, 1471, 2060, 4423, 4441, 4506, 4525, 4770,
                                                            4772, 4773, 4777, 4978, 4980, 4981, 4985, 5155, 5156, 5327, 5328,
                                                            5528, 5530, 5531, 5535, 5734, 5736, 5737, 5741,
                                         fort_equs:     81.
           0    trace_frames.count       stack_header:        69.
           1    trace_frames.top_ptr     stack_header:        70.
       11000    trc                      fort_opt_macros_:  4363, 4391, 4814, 4923, 4936, 4946, 4963, 4971, 5356, 5473, 5486,
                                                            5496, 5513, 5521, 5808,
                                         fort_equs:     90.
        1124    trunc_fl                 fort_opt_macros_:  3847, 3853,
                                         fort_equs:    240.
         551    tv_offset                stack_header:        75,   80,   81,   82,   83,   84.
           7    two                      fort_equs:    149.
        4000    typeless                 fort_opt_macros_:   976, 1202, 1464, 4766, 4974, 5151, 5323, 5524, 5730,
                                         fort_equs:     58.
        3400    typelessn                fort_equs:     67.
        6411    typeless_op1             fort_opt_macros_:  4560, 4766, 4974, 5151, 5323, 5524, 5730.
        6413    typeless_op2             fort_opt_macros_:  4563, 4767, 4975, 5152, 5324, 5525, 5731.
        5400    tze                      fort_opt_macros_:  5001, 5008, 5016, 5024, 5029, 5034, 5044, 5048, 5071, 5083, 5100,
                                                            5113, 5123, 5140, 5148, 5157, 5793, 5832,
                                         fort_equs:     83.
        1535    use_ade.dd               fort_opt_macros_:  1059, 1084.
       12323    use_itp                  fort_opt_macros_:  7645, 7681.
      777777    var                      fort_opt_macros_:  7936, 7941,
                                         fort_equs:     70.
      400000    variable                 fort_opt_macros_:  4709, 4722, 4741, 4917, 4930, 4949, 5094, 5107, 5126, 5266, 5279,
                                                            5298, 5467, 5480, 5499, 5673, 5686, 5705,
                                         fort_equs:     94.
       11034    vector_common            fort_opt_macros_:  6540, 6545.
      777615    VLA_words_per_seg        fort_opt_macros_:  7790,
                                         fort_equs:    281.
       10625    write                    fort_opt_macros_:  6323,
                                         fort_operator_table:       40.
       10637    write.p                  fort_opt_macros_:  6327, 6337.
       10750    write_array              fort_opt_macros_:  6458,
                                         fort_operator_table:      102.
       11572    write_internal_file      fort_opt_macros_:  7114,
                                         fort_operator_table:      122.
       12517    write_namelist           fort_opt_macros_:  7909,
                                         fort_operator_table:      109.
       10706    write_scalar             fort_opt_macros_:  6400,
                                         fort_operator_table:      101.
       11033    write_vector             fort_opt_macros_:  6542,
                                         fort_operator_table:      103.
        3031    wrong_number.p           fort_opt_macros_:  2029, 2580, 2755, 2785, 2816, 2841, 2879, 2910, 3085, 3116, 3147,
                                                            3172, 3210, 4421, 4504, 4523.
        3134    wrong_type.p             fort_opt_macros_:  2063, 2067, 2120, 2164, 2195, 2335, 2528, 2654, 2686, 2722, 2984,
                                                            3016, 3052, 3580, 3628, 4139, 4170, 4201.
      400000    x0                       fort_equs:    108,  122.
      200000    x1                       fort_opt_macros_:  1747, 1772, 1797, 1812, 1827, 1847, 1937, 1952, 2104, 2133, 2145,
                                                            2157, 2177, 2189, 2208, 2220, 2304, 2324, 2348, 2360, 2372, 2541,
                                                            2554, 2567, 3593, 3605, 3617, 3641, 3653, 3665, 3689, 3700, 3730,
                                                            3741, 3771, 3782, 4152, 4164, 4183, 4195, 4214, 4226, 7190, 7199,
                                                            7209, 7218, 7752,
                                         fort_equs:    109,  122.
      100000    x2                       fort_opt_macros_:  1747, 1772, 1797, 1812, 1827, 1847, 1937, 1952, 2104, 2133, 2145,
                                                            2157, 2177, 2189, 2208, 2220, 2304, 2324, 2348, 2360, 2372, 2541,
                                                            2554, 2567, 3593, 3605, 3617, 3641, 3653, 3665, 3689, 3700, 3730,
                                                            3741, 3771, 3782, 4152, 4164, 4183, 4195, 4214, 4226, 7190, 7199,
                                                            7209, 7218, 7547, 7752,
                                         fort_equs:    110,  122.
       40000    x3                       fort_opt_macros_:  1747, 1772, 1797, 1812, 1827, 1847, 1937, 1952, 2104, 2133, 2145,
                                                            2157, 2177, 2189, 2208, 2220, 2304, 2324, 2348, 2360, 2372, 2541,
                                                            2554, 2567, 3593, 3605, 3617, 3641, 3653, 3665, 3689, 3700, 3730,
                                                            3741, 3771, 3782, 4152, 4164, 4183, 4195, 4214, 4226, 7190, 7199,
                                                            7209, 7218, 7752,
                                         fort_equs:    111,  122.
       20000    x4                       fort_opt_macros_:  1747, 1772, 1797, 1812, 1827, 1847, 1937, 1952, 2104, 2133, 2145,
                                                            2157, 2177, 2189, 2208, 2220, 2304, 2324, 2348, 2360, 2372, 2541,
                                                            2554, 2567, 3593, 3605, 3617, 3641, 3653, 3665, 3689, 3700, 3730,
                                                            3741, 3771, 3782, 4152, 4164, 4183, 4195, 4214, 4226, 7190, 7199,
                                                            7209, 7218, 7752,
                                         fort_equs:    112,  122.
       10000    x5                       fort_opt_macros_:  1747, 1772, 1797, 1812, 1827, 1847, 1937, 1952, 2104, 2133, 2145,
                                                            2157, 2177, 2189, 2208, 2220, 2304, 2324, 2348, 2360, 2372, 2541,
                                                            2554, 2567, 3593, 3605, 3617, 3641, 3653, 3665, 3689, 3700, 3730,
                                                            3741, 3771, 3782, 4152, 4164, 4183, 4195, 4214, 4226, 7190, 7199,
                                                            7209, 7218, 7752,
                                         fort_equs:    113,  122.
        4000    x6                       fort_opt_macros_:  1747, 1772, 1797, 1812, 1827, 1847, 1937, 1952, 2104, 2133, 2145,
                                                            2157, 2177, 2189, 2208, 2220, 2304, 2324, 2348, 2360, 2372, 2541,
                                                            2554, 2567, 3593, 3605, 3617, 3641, 3653, 3665, 3689, 3700, 3730,
                                                            3741, 3771, 3782, 4152, 4164, 4183, 4195, 4214, 4226, 6314, 6332,
                                                            6445, 6528, 6616, 6629, 6645, 6662, 6683, 6718, 6750, 6858, 6877,
                                                            7031, 7043, 7161, 7190, 7199, 7209, 7218, 7752,
                                         fort_equs:    114,  122.
        2000    x7                       fort_opt_macros_:  1747, 1772, 1797, 1812, 1827, 1847, 1937, 1952, 2104, 2133, 2145,
                                                            2157, 2177, 2189, 2208, 2220, 2304, 2324, 2348, 2360, 2372, 2541,
                                                            2554, 2567, 3593, 3605, 3617, 3641, 3653, 3665, 3689, 3700, 3730,
                                                            3741, 3771, 3782, 4152, 4164, 4183, 4195, 4214, 4226, 7190, 7199,
                                                            7209, 7218, 7752,
                                         fort_equs:    115,  122.
       10775    xa_c                     fort_opt_macros_:  6463, 6493.
       11000    xa_c_VLA                 fort_opt_macros_:  6494, 6498.
       10770    xa_d                     fort_opt_macros_:  6463, 6484.
       10773    xa_d_VLA                 fort_opt_macros_:  6485, 6489.
       11007    xa_h                     fort_opt_macros_:  6463, 6511.
       10756    xa_i                     fort_opt_macros_:  6463, 6465.
       10761    xa_i_VLA                 fort_opt_macros_:  6467, 6471.
       11002    xa_l                     fort_opt_macros_:  6463, 6502.
       11005    xa_l_VLA                 fort_opt_macros_:  6503, 6507.
       10763    xa_r                     fort_opt_macros_:  6463, 6475.
       10766    xa_r_VLA                 fort_opt_macros_:  6476, 6480.
       10756    xa_t                     fort_opt_macros_:  6463, 6466.
       11015    xa_transfer              fort_opt_macros_:  6469, 6473, 6478, 6482, 6487, 6491, 6496, 6500, 6505, 6509, 6522.
       12631    xmit_array               fort_opt_macros_:  8057,
                                         fort_operator_table:       45.
       12627    xmit_scalar              fort_opt_macros_:  8055,
                                         fort_operator_table:       44.
       12633    xmit_vector              fort_opt_macros_:  8059,
                                         fort_operator_table:       46.
        6354    xor.tl                   fort_opt_macros_:  2038, 4522.
        6360    xor.tl.loop              fort_opt_macros_:  4528, 4536.
        6370    xor.tl.r                 fort_opt_macros_:  4532, 4538.
       10725    xs_c                     fort_opt_macros_:  6410, 6425.
       10723    xs_d                     fort_opt_macros_:  6410, 6421.
       10731    xs_h                     fort_opt_macros_:  6410, 6433.
       10717    xs_i                     fort_opt_macros_:  6410, 6412.
       10727    xs_l                     fort_opt_macros_:  6410, 6429.
       10721    xs_r                     fort_opt_macros_:  6410, 6417.
       10717    xs_t                     fort_opt_macros_:  6410, 6413.
       10737    xs_transfer              fort_opt_macros_:  6415, 6419, 6423, 6427, 6431, 6444.
       11064    xv_c                     fort_opt_macros_:  6554, 6584.
       11067    xv_c_VLA                 fort_opt_macros_:  6585, 6589.
       11057    xv_d                     fort_opt_macros_:  6554, 6575.
       11062    xv_d_VLA                 fort_opt_macros_:  6576, 6580.
       11076    xv_h                     fort_opt_macros_:  6554, 6602.
       11045    xv_i                     fort_opt_macros_:  6554, 6556.
       11050    xv_i_VLA                 fort_opt_macros_:  6558, 6562.
       11071    xv_l                     fort_opt_macros_:  6554, 6593.
       11074    xv_l_VLA                 fort_opt_macros_:  6594, 6598.
       11052    xv_r                     fort_opt_macros_:  6554, 6566.
       11055    xv_r_VLA                 fort_opt_macros_:  6567, 6571.
       11045    xv_t                     fort_opt_macros_:  6554, 6557.
       11105    xv_transfer              fort_opt_macros_:  6560, 6564, 6569, 6573, 6578, 6582, 6587, 6591, 6596, 6600, 6614.
           0    zero                     fort_equs:    142.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
