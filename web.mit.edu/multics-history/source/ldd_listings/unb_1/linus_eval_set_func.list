	COMPILATION LISTING OF SEGMENT linus_eval_set_func
	Compiled by: Multics PL/I Compiler, Release 33e, of October 6, 1992
	Compiled at: CGI                             
	Compiled on: 2000-04-18_1113.12_Tue_mdt
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 
       14 
       15 /****^  HISTORY COMMENTS:
       16*  1) change(90-04-23,Leskiw), approve(90-10-05,MCR8202),
       17*     audit(90-10-11,Bubric), install(90-10-14,MR12.4-1039):
       18*     Changed calls from assign_ to assign_round_.
       19*                                                   END HISTORY COMMENTS */
       20 
       21 
       22 linus_eval_set_func:
       23      proc (lcb_ptr, linus_set_fn_ptr, icode);
       24 
       25 
       26 /* DESCRIPTION:
       27*
       28*   Evaluate LINUS set functions.
       29*
       30*
       31*
       32*   HISTORY:
       33*
       34*   77-07-01 J. C. C. Jagernauth: Initially written.
       35*
       36*   81-02-03 Rickie E. Brinegar: The addr builtin was added to the declarations.
       37*   
       38*   81-07-13  Rickie E.  Brinegar: The trapping of the conversion condition was
       39*   removed.  This is now relegated to higher level routines.
       40*
       41*   81-09-17 Rickie E.  Brinegar: Changed the initialization of num_ptrs from 0
       42*   to arg_list.arg_count to eliminate subscript range conditions.
       43*   
       44*   82-10-13 Dave Schimke: Added call to linus_table$async_retrieval before the
       45*   retrieve to keep linus_table from getting lost when loading in the 
       46*   incremental mode. 
       47*
       48**/
       49 
  1     1 /* BEGIN INCLUDE FILE linus_lcb.incl.pl1 -- jaw 8/30/77 */
  1     2    
  1     3 
  1     4 
  1     5 /****^  HISTORY COMMENTS:
  1     6*  1) change(86-04-23,Dupuis), approve(86-05-23,MCR7188), audit(86-07-23,GWMay),
  1     7*     install(86-07-29,MR12.0-1106):
  1     8*     Added general_work_area_ptr and renamed sfr_ptr to
  1     9*     force_retrieve_scope_ptr.
  1    10*                                                   END HISTORY COMMENTS */
  1    11 
  1    12 
  1    13 /* HISTORY:
  1    14*
  1    15*   78-09-29 J. C. C. Jagernauth: Modified for MR7.0.
  1    16*
  1    17*   81-05-11  Rickie E.  Brinegar: added security bit and andministrator bit as
  1    18*   a part of the attribute level control work.
  1    19*   
  1    20*   81-06-17  Rickie E.  Brinegar: deleted the sd_ptr as a part of removing the
  1    21*   scope_data  structure  from  LINUS.   LINUS now depends totally on MRDS for
  1    22*   scope information.
  1    23*   
  1    24*   81-11-11  Rickie  E.   Brinegar:  added the timing bit and three fields for
  1    25*   retaining  various  vcpu  times  to  be collected when in timing mode.  The
  1    26*   times  to  be collected are: LINUS parsing time, LINUS processing time, and
  1    27*   MRDS processing time.
  1    28*
  1    29*   82-01-15  DJ  Schimke:  Added the build_increment and build_start fields as
  1    30*   part of the line numbering implementation.  This allows for possible  later
  1    31*   LINUS control of the build defaults.
  1    32* 
  1    33*   82-03-01 Paul W. Benjamin: Removed linus_prompt_chars_ptr, as that 
  1    34*   information is now retained by ssu_.  Removed parse_timer as no longer
  1    35*   meaningful.  Added linus_version.  Added iteration bit.  Added 6 entry 
  1    36*   variables for ssu_ replaceable procedures.  Added actual_input_iocbp.
  1    37*
  1    38*   82-06-23 Al Dupuis: Added subsystem_control_info_ptr, 
  1    39*   subsystem_invocation_level, and selection_expression_identifier.
  1    40*
  1    41*   82-08-26 DJ Schimke: Added report_control_info_ptr, and
  1    42*   table_control_info_ptr. 
  1    43*
  1    44*   82-10-19 DJ Schimke: Added ssu_abort_line.
  1    45*
  1    46*   83-06-06 Bert Moberg: Added print_search_order (pso) and no_optimize (no_ot)
  1    47*
  1    48*   83-04-07 DJ Schimke: Added temp_seg_info_ptr.
  1    49*
  1    50*   83-08-26 Al Dupuis: Added query_temp_segment_ptr.
  1    51**/
  1    52     
  1    53 dcl 1 lcb aligned based (lcb_ptr),			/* LINUS control block */
  1    54     2 db_index fixed bin (35),			/* index of open data base, or 0 */
  1    55     2 rb_len fixed bin (21),				/* length of request buffer */
  1    56     2 lila_count fixed bin (35),			/* number of LILA text lines */
  1    57     2 lila_chars fixed bin (35),			/* number of LILA source test chars */
  1    58     2 trans_id fixed bin (35),			/* used by checkpoint and rollback facilities (MR7.0) */
  1    59     2 lila_fn char (32) unal,				/* entry name of lila data file */
  1    60     2 prompt_flag bit (1) unal,			/* on if in prompt mode */
  1    61     2 test_flag bit (1) unal,				/* on if in test mode */
  1    62     2 new_version bit (1) unal init (1),		/* on for new version data base (MR7.0) */
  1    63     2 secured_db bit (1) unal,                              /* on if the db is in a secure state */
  1    64     2 administrator bit (1) unal,                           /* on if the user is a db administrator */
  1    65     2 timing_mode bit (1) unal,                             /* on if timing is to be done */
  1    66     2 iteration bit (1) unal,				/* interpret parens as iteration sets */
  1    67     2 pso_flag bit (1) unal,				/* add print_search_order to select */
  1    68     2 no_ot_flag bit (1) unal,			/* add no_optimize to select */
  1    69     2 reserved bit (27) unal,
  1    70     2 liocb_ptr ptr,				/* iocb ptr for lila file */
  1    71     2 rb_ptr ptr,					/* ptr to request buffer */
  1    72     2 is_ptr ptr,					/* iocb ptr for currentinput stream switch */
  1    73     2 cal_ptr ptr,					/* ptr to current arg list for invoke (or null) */
  1    74     2 ttn_ptr ptr,					/* pointer to table info structure */
  1    75     2 force_retrieve_scope_info_ptr ptr,		/* structure pointer to force retrieve scope operation */
  1    76     2 lv_ptr ptr,					/* pointer linus variables */
  1    77     2 si_ptr ptr,					/* pointer to select_info structure */
  1    78     2 setfi_ptr ptr,				/* pointer to set function information */
  1    79     2 sclfi_ptr ptr,				/* pointer to user declared scalar fun. names */
  1    80     2 ivs_ptr ptr,					/* pointer to stack of invoke iocb pointers */
  1    81     2 lit_ptr ptr,					/* pointer to literal pool */
  1    82     2 lvv_ptr ptr,					/* pointer to linus variable alloc. pool  */
  1    83     2 rd_ptr ptr,					/* point to readied files mode information (MR7.0) */
  1    84     2 rt_ptr ptr,                                           /* point to table of relation names and their readied modes
  1    85*                                                               (MR7.0) */
  1    86     2 actual_input_iocbp ptr,				/* ptr to input while in macros */
  1    87     2 lila_promp_chars_ptr ptr,			/* pointer to the prompt characters for lila */
  1    88     2 linus_area_ptr ptr,				/* LINUS temporary segment pointer */
  1    89     2 lila_area_ptr ptr,				/* LILA temporary segment pointer */
  1    90     2 i_o_area_ptr ptr,				/* temporary segment pointer used by write, print, create_list */
  1    91     2 rel_array_ptr ptr,                                    /* ptr to array of names rslt info structure
  1    92*                                                               for current lila expression */
  1    93     2 unused_timer float bin (63),			/* future expansion */
  1    94     2 request_time float bin (63),                          /* How much request time was spent
  1    95*                                                                in LINUS. (-1 = user has just enabled 
  1    96*						    timing, do not report) */
  1    97     2 mrds_time float bin (63),                             /* How much time was spent in MRDS */
  1    98     2 build_increment fixed bin,			/* default increment for build mode */
  1    99     2 build_start fixed bin,				/* default start count for build mode */
  1   100     2 linus_version char (4),				/* current version of LINUS */
  1   101     2 subsystem_control_info_ptr ptr,                       /* the same ptr passed by ssu_ to each request procedure */
  1   102     2 subsystem_invocation_level fixed bin,                 /* identifies this invocation of LINUS */
  1   103     2 selection_expression_identifier fixed bin,            /* identifies the current processed selection expression */
  1   104     2 report_control_info_ptr ptr,			/* pointer to linus_report_control_info structure */
  1   105     2 table_control_info_ptr ptr,			/* pointer to linus_table control structure */
  1   106     2 temp_seg_info_ptr ptr,				/* pointer to linus_temp_seg_mgr control structure */
  1   107     2 query_temp_segment_ptr ptr,			/* points to temp seg used for manipulating query */
  1   108     2 general_work_area_ptr ptr,			/* a freeing area for general use */
  1   109     2 word_pad (6) bit (36) unal,
  1   110 						/* procedures that will be optionally */
  1   111 						/* replaced by the user.  Saved so they */
  1   112 						/* can be reinstated if desired. */
  1   113     2 ssu_abort_line entry options (variable),
  1   114     2 ssu_post_request_line variable entry (ptr),
  1   115     2 ssu_pre_request_line variable entry (ptr),
  1   116 
  1   117     2 curr_lit_offset fixed bin (35),			/* index of first free bit in lit. pool */
  1   118     2 curr_lv_val_offset fixed bin (35),		/* index of first free bit lv. val. pool */
  1   119     2 static_area area (sys_info$max_seg_size - fixed (rel (addr (lcb.static_area))) + 1);
  1   120 
  1   121 dcl  lcb_ptr ptr;
  1   122 
  1   123 /* END INCLUDE FILE linus_lcb.incl.pl1 */
       50 
       51 
  2     1 /* BEGIN INCLUDE FILE linus_set_fn.incl.pl1 -- jaw 7/13/77 
  2     2*
  2     3*   81-10-26  Rickie  E.  Brinegar: Modified to have entry variables instead of
  2     4*   entry  pointers.  This change included the addition of bit switches inorder
  2     5*   to  be  able  to tell if the entry variable had been set yet.  Also changed
  2     6*   the  name  of the structure from set_fn to linus_set_fn and the name of the
  2     7*   variable that it was based on from setf_ptr to linus_set_fn_ptr.
  2     8*   
  2     9*   81-11-05 Rickie E.  Brinegar: Changed the entry pointers to entry variables
  2    10*   and  added bit switches to determine when the entries have or have not been
  2    11*   set.     Renamed    set_fn   sturcture   to   linus_set_fn,   setf_ptr   to
  2    12*   linus_set_fn_ptr,            and            nset_fn_init_args            to
  2    13*   initial_number_of_linus_set_fn_args.
  2    14*   
  2    15**/
  2    16 
  2    17 dcl 1 linus_set_fn aligned based (linus_set_fn_ptr),	/* internal rep. of set fun. */
  2    18     2 fwd_ptr ptr,					/* pointer to next set function to be eval.
  2    19*						   at this level */
  2    20     2 prior_ptr ptr,				/* pointer to head of list of set functions
  2    21*						   to be evaluated prior to this one */
  2    22     2 assign_entry entry variable,			/* pointer to assign entry */
  2    23     2 calc_entry entry variable,			/* pointer to calc entry */
  2    24     2 init_entry entry variable,			/* pointer to initialization entry */
  2    25     2 assign_al_ptr ptr,				/* pointer to assign entry arg list */
  2    26     2 calc_al_ptr ptr,                                      /* pointer to calc entry arg list */
  2    27     2 rtrv_al_ptr ptr,				/* pointer to arg list for dsl_$retrieve */
  2    28     2 flags,
  2    29       3 assign_entry_set bit (1) unaligned,                 /* 0 => null, 1 => not null */
  2    30       3 calc_entry_set bit (1) unaligned,                   /* 0 => null, 1 => not null */
  2    31       3 init_entry_set bit (1) unaligned,                   /* 0 => null, 1 => not null */
  2    32       3 pad_bits bit (33) unaligned,
  2    33     2 rslt_desc bit (36),				/* descriptor for result */
  2    34     2 nargs fixed bin,				/* number of input args to calc entry */
  2    35     2 arg (initial_number_of_linus_set_fn_args refer (linus_set_fn.nargs)),
  2    36       3 type fixed bin (4) unal,			/* 1 => constant
  2    37*						   2 => linus variable
  2    38*						   3 => scalar function
  2    39*						   4 => set function
  2    40*						   5 => expression
  2    41*						   6 => data base item */
  2    42       3 must_convert bit (1) unal,			/* on if must convert prior to call */
  2    43       3 reserved bit (30) unal,
  2    44       3 desc bit (36),				/* descriptor of source data */
  2    45       3 assn_ptr ptr,				/* assign_ ptr for source data */
  2    46       3 assn_type fixed bin,				/* assign_ type for source data */
  2    47       3 assn_len fixed bin (35),			/* assign_ length for source data */
  2    48       3 arg_desc bit (36),				/* descriptor for converted arg */
  2    49       3 arg_assn_ptr ptr,				/* assign_ ptr for converted arg */
  2    50       3 arg_assn_type fixed bin,			/* assign_ type code for converted arg */
  2    51       3 arg_assn_len fixed bin (35),			/* assign_ length for converted arg */
  2    52       3 ef_ptr ptr;					/* pointer to express. or function structure */
  2    53 
  2    54 dcl  initial_number_of_linus_set_fn_args fixed bin;
  2    55 dcl  linus_set_fn_ptr ptr;
  2    56 
  2    57 /* END INCLUDE FILE linus_set_fn.incl.pl1 */
       52 
       53 
  3     1 /* BEGIN mdbm_arg_list.incl.pl1 -- jaw 5/31/78 */
  3     2 /* the duplicate mrds_arg_list.incl.pl1 was eliminated by Jim Gray, Nov. 1979 */
  3     3 
  3     4 /* layout of argument list for IDS and DBM entries with options (variable) */
  3     5 
  3     6 dcl 1 arg_list based (al_ptr),
  3     7     2 arg_count fixed bin (17) unal,			/* 2 * no. of args. */
  3     8     2 code fixed bin (17) unal,			/* 4 => normal, 8 => special */
  3     9     2 desc_count fixed bin (17) unal,			/* 2 * no. of descriptors */
  3    10     2 pad fixed bin (17) unal,			/* must be 0 */
  3    11     2 arg_des_ptr (num_ptrs) ptr;			/* argument/descriptor pointer */
  3    12 
  3    13 dcl  al_ptr ptr;
  3    14 dcl  num_ptrs fixed bin;
  3    15 
  3    16 /* END mdbm_arg_list.incl.pl1  */
  3    17 
       54 
       55 
       56 	dcl     err_flag		 bit (1);
       57 
       58 	dcl     (caller, i)		 fixed bin;
       59 
       60 	dcl     icode		 fixed bin (35);
       61 
       62 	dcl     func_code		 fixed bin (35)
       63 				 based (arg_list.arg_des_ptr (arg_list.arg_count / 2));
       64 
       65 	dcl     initial_mrds_vclock	 float bin (63);
       66 
       67 
       68 	dcl     (
       69 	        destination_ptr	 init (null),
       70 	        save_se_desc_ptr	 init (null),
       71 	        save_se_ptr		 init (null)
       72 	        )			 ptr;
       73 
       74 	dcl     (addr, null, vclock)	 builtin;
       75 
       76 	dcl     (
       77 	        linus_data_$eval_set_func_id,
       78 	        mrds_error_$tuple_not_found,
       79 	        sys_info$max_seg_size
       80 	        )			 fixed bin (35) ext;
       81 
       82 	dcl     ANOTHER		 char (8) int static options (constant) init ("-another");
       83 	dcl     another_len		 bit (36) int static options (constant)
       84 				 init ("101010110000000000000000000000001000"b);
       85 
       86 	dcl     1 null_arg_list	 aligned,
       87 		2 arg_count	 fixed bin (17) unsigned unal init (0),
       88 		2 pad1		 bit (1) unal init ("0"b),
       89 		2 call_type	 fixed bin (18) unsigned unal init (4),
       90 		2 desc_count	 fixed bin (17) unsigned unal init (0),
       91 		2 pad2		 bit (19) unal init ("0"b);
       92 
       93 	dcl     assign_round_
       94 				 entry (ptr, fixed bin, fixed bin (35), ptr, fixed bin, fixed bin (35));
       95 	dcl     cu_$generate_call	 entry (entry, ptr);
       96 	dcl     dsl_$retrieve	 entry options (variable);
       97 	dcl     linus_table$async_retrieval
       98 				 entry (ptr, fixed bin (35));
       99 	dcl     linus_eval_expr
      100 				 entry (ptr, ptr, ptr, fixed bin, fixed bin, fixed bin (35));
      101 	dcl     linus_eval_scal_func	 entry (ptr, ptr, fixed bin (35));
      102 
      103 	al_ptr = linus_set_fn.rtrv_al_ptr;		/* Get arg list for retrieve */
      104 	num_ptrs = arg_list.arg_count;
      105 	save_se_ptr = arg_list.arg_des_ptr (2);
      106 	save_se_desc_ptr = arg_list.arg_des_ptr (arg_list.arg_count / 2 + 2);
      107 
      108 	caller = 3;				/* Inform eval_expr that a set function called */
      109 	destination_ptr = linus_set_fn_ptr;		/* The result of eval_expr must be placed in the
      110*						   set function structure */
      111 	icode, func_code = 0;
      112 	err_flag = "0"b;
      113 
      114 	if linus_set_fn.prior_ptr ^= null () then
      115 	     call linus_eval_set_func (lcb_ptr, linus_set_fn.prior_ptr, icode);
      116 	if icode ^= 0 then
      117 	     call error (icode);
      118 
      119 	call linus_table$async_retrieval (lcb_ptr, icode);
      120 	if icode ^= 0 then
      121 	     call error (icode);
      122 
      123 	if lcb.timing_mode then
      124 	     initial_mrds_vclock = vclock;
      125 	call cu_$generate_call (dsl_$retrieve, linus_set_fn.rtrv_al_ptr);
      126 						/* Retrieve data */
      127 	if lcb.timing_mode then
      128 	     lcb.mrds_time = lcb.mrds_time + (vclock - initial_mrds_vclock);
      129 	if func_code = mrds_error_$tuple_not_found then
      130 	     err_flag = "1"b;
      131 	arg_list.arg_des_ptr (2) = addr (ANOTHER);	/* Set up for another retrieve */
      132 	arg_list.arg_des_ptr (arg_list.arg_count / 2 + 2) = addr (another_len);
      133 
      134 	if linus_set_fn.init_entry_set then
      135 	     call
      136 		cu_$generate_call (linus_set_fn.init_entry, addr (null_arg_list));
      137 
      138 	do while (func_code = 0 & icode = 0);
      139 	     do i = 1 to linus_set_fn.nargs;
      140 
      141 		go to case (linus_set_fn.arg.type (i));
      142 
      143 case (3):
      144 		call
      145 		     linus_eval_scal_func (lcb_ptr, linus_set_fn.arg.ef_ptr (i),
      146 		     icode);			/* Process scalar function */
      147 		go to case (6);
      148 
      149 case (4):
      150 		call
      151 		     linus_eval_set_func (lcb_ptr, linus_set_fn.arg.ef_ptr (i), icode)
      152 		     ;				/* Process set function */
      153 		go to case (6);
      154 
      155 case (5):
      156 		call
      157 		     linus_eval_expr (lcb_ptr, linus_set_fn.arg.ef_ptr (i),
      158 		     destination_ptr, caller, i, icode);/* expr */
      159 
      160 case (1):
      161 case (2):
      162 case (6):
      163 		if icode = 0 then
      164 		     if linus_set_fn.arg.must_convert (i) then
      165 			call
      166 			     assign_round_ (linus_set_fn.arg.arg_assn_ptr (i),
      167 			     linus_set_fn.arg.arg_assn_type (i),
      168 			     linus_set_fn.arg.arg_assn_len (i),
      169 			     linus_set_fn.arg.assn_ptr (i),
      170 			     linus_set_fn.arg.assn_type (i),
      171 			     linus_set_fn.arg.assn_len (i)); /* Convert */
      172 	     end;
      173 
      174 	     call
      175 		cu_$generate_call (linus_set_fn.calc_entry,
      176 		linus_set_fn.calc_al_ptr);		/* call calc entry of set function */
      177 	     if lcb.timing_mode then
      178 		initial_mrds_vclock = vclock;
      179 	     call cu_$generate_call (dsl_$retrieve, linus_set_fn.rtrv_al_ptr);
      180 						/* Retrieve another */
      181 	     if lcb.timing_mode then
      182 		lcb.mrds_time = lcb.mrds_time + (vclock - initial_mrds_vclock);
      183 	end;
      184 
      185 	if func_code = mrds_error_$tuple_not_found then
      186 	     func_code = 0;
      187 
      188 	if func_code ^= 0 then
      189 	     call error (func_code);
      190 	if icode ^= 0 then
      191 	     call error (icode);
      192 	call
      193 	     cu_$generate_call (linus_set_fn.assign_entry,
      194 	     linus_set_fn.assign_al_ptr);		/* call assign entry of set function */
      195 
      196 	if linus_set_fn.fwd_ptr ^= null () then
      197 	     call linus_eval_set_func (lcb_ptr, linus_set_fn.fwd_ptr, icode);
      198 						/* evaluate set function at this level */
      199 	if icode ^= 0 then
      200 	     call error (icode);
      201 
      202 exit:
      203 	;
      204 	arg_list.arg_des_ptr (2) = save_se_ptr;
      205 	arg_list.arg_des_ptr (arg_list.arg_count / 2 + 2) = save_se_desc_ptr;
      206 
      207 
      208 
      209 
      210 error:
      211      proc (err_code);
      212 
      213 	dcl     (err_code, out_code)	 fixed bin (35);
      214 
      215 	dcl     linus_convert_code	 entry (fixed bin (35), fixed bin (35), fixed bin (35));
      216 	dcl     linus_print_error	 entry (fixed bin (35), char (*));
      217 
      218 	if err_flag then
      219 	     icode = mrds_error_$tuple_not_found;
      220 	else do;
      221 		call
      222 		     linus_convert_code (err_code, out_code,
      223 		     linus_data_$eval_set_func_id);
      224 		call linus_print_error (out_code, "");
      225 		icode = 0;
      226 	     end;
      227 
      228 	go to exit;
      229 
      230      end error;
      231 
      232 
      233      end linus_eval_set_func;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/18/00  1113.1  linus_eval_set_func.pl1           >udd>sm>ds>w>ml>linus_eval_set_func.pl1
50           1    07/29/86  1248.4  linus_lcb.incl.pl1                >ldd>incl>linus_lcb.incl.pl1
52           2    11/23/82  1427.2  linus_set_fn.incl.pl1             >ldd>incl>linus_set_fn.incl.pl1
54           3    10/14/83  1709.0  mdbm_arg_list.incl.pl1            >ldd>incl>mdbm_arg_list.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ANOTHER                         000010 constant        char(8)                  initial packed unaligned dcl 82 set ref 131
addr                                                   builtin function         dcl 74 ref 131 132 134 134
al_ptr                          000100 automatic       pointer                  dcl 3-13 set ref 103* 104 105 106 106 111 111 129
                                                                                  129 131 132 132 138 138 185 185 185 185 188 188
                                                                                  188 188 204 205 205
another_len                     000006 constant        bit(36)                  initial packed unaligned dcl 83 set ref 132
arg                      32            based           structure                array level 2 dcl 2-17
arg_assn_len             45            based           fixed bin(35,0)          array level 3 dcl 2-17 set ref 160*
arg_assn_ptr             42            based           pointer                  array level 3 dcl 2-17 set ref 160*
arg_assn_type            44            based           fixed bin(17,0)          array level 3 dcl 2-17 set ref 160*
arg_count                              based           fixed bin(17,0)          level 2 in structure "arg_list" packed packed
                                                                                  unaligned dcl 3-6 in procedure
                                                                                  "linus_eval_set_func" ref 104 106 111 129 132 138
                                                                                  185 185 188 188 205
arg_count                       000116 automatic       fixed bin(17,0)          initial level 2 in structure "null_arg_list" packed
                                                                                  packed unsigned unaligned dcl 86 in procedure
                                                                                  "linus_eval_set_func" set ref 86*
arg_des_ptr               2            based           pointer                  array level 2 dcl 3-6 set ref 105 106 111 129 131*
                                                                                  132* 138 185 185 188 188 204* 205*
arg_list                               based           structure                level 1 unaligned dcl 3-6
assign_al_ptr            20            based           pointer                  level 2 dcl 2-17 set ref 192*
assign_entry              4            based           entry variable           level 2 dcl 2-17 set ref 192*
assign_round_                   000014 constant        entry                    external dcl 93 ref 160
assn_len                 37            based           fixed bin(35,0)          array level 3 dcl 2-17 set ref 160*
assn_ptr                 34            based           pointer                  array level 3 dcl 2-17 set ref 160*
assn_type                36            based           fixed bin(17,0)          array level 3 dcl 2-17 set ref 160*
calc_al_ptr              22            based           pointer                  level 2 dcl 2-17 set ref 174*
calc_entry               10            based           entry variable           level 2 dcl 2-17 set ref 174*
call_type                 0(18) 000116 automatic       fixed bin(18,0)          initial level 2 packed packed unsigned unaligned
                                                                                  dcl 86 set ref 86*
caller                          000104 automatic       fixed bin(17,0)          dcl 58 set ref 108* 155*
cu_$generate_call               000016 constant        entry                    external dcl 95 ref 125 134 174 179 192
desc_count                1     000116 automatic       fixed bin(17,0)          initial level 2 packed packed unsigned unaligned
                                                                                  dcl 86 set ref 86*
destination_ptr                 000110 automatic       pointer                  initial dcl 68 set ref 68* 109* 155*
dsl_$retrieve                   000020 constant        entry                    external dcl 96 ref 125 125 179 179
ef_ptr                   46            based           pointer                  array level 3 dcl 2-17 set ref 143* 149* 155*
err_code                               parameter       fixed bin(35,0)          dcl 213 set ref 210 221*
err_flag                        000103 automatic       bit(1)                   packed unaligned dcl 56 set ref 112* 129* 218
flags                    26            based           structure                level 2 dcl 2-17
func_code                              based           fixed bin(35,0)          dcl 62 set ref 111* 129 138 185 185* 188 188*
fwd_ptr                                based           pointer                  level 2 dcl 2-17 set ref 196 196*
i                               000105 automatic       fixed bin(17,0)          dcl 58 set ref 139* 141 143 149 155 155* 160 160 160
                                                                                  160 160 160 160*
icode                                  parameter       fixed bin(35,0)          dcl 60 set ref 22 111* 114* 116 116* 119* 120 120*
                                                                                  138 143* 149* 155* 160 190 190* 196* 199 199* 218*
                                                                                  225*
init_entry               14            based           entry variable           level 2 dcl 2-17 set ref 134*
init_entry_set           26(02)        based           bit(1)                   level 3 packed packed unaligned dcl 2-17 ref 134
initial_mrds_vclock             000106 automatic       float bin(63)            dcl 65 set ref 123* 127 177* 181
lcb                                    based           structure                level 1 dcl 1-53
lcb_ptr                                parameter       pointer                  dcl 1-121 set ref 22 114* 119* 123 127 127 127 143*
                                                                                  149* 155* 177 181 181 181 196*
linus_convert_code              000030 constant        entry                    external dcl 215 ref 221
linus_data_$eval_set_func_id    000010 external static fixed bin(35,0)          dcl 76 set ref 221*
linus_eval_expr                 000024 constant        entry                    external dcl 99 ref 155
linus_eval_scal_func            000026 constant        entry                    external dcl 101 ref 143
linus_print_error               000032 constant        entry                    external dcl 216 ref 224
linus_set_fn                           based           structure                level 1 dcl 2-17
linus_set_fn_ptr                       parameter       pointer                  dcl 2-55 ref 22 103 109 114 114 125 134 134 139 141
                                                                                  143 149 155 160 160 160 160 160 160 160 174 174
                                                                                  179 192 192 196 196
linus_table$async_retrieval     000022 constant        entry                    external dcl 97 ref 119
mrds_error_$tuple_not_found     000012 external static fixed bin(35,0)          dcl 76 ref 129 185 218
mrds_time                74            based           float bin(63)            level 2 dcl 1-53 set ref 127* 127 181* 181
must_convert             32(05)        based           bit(1)                   array level 3 packed packed unaligned dcl 2-17 ref
                                                                                  160
nargs                    30            based           fixed bin(17,0)          level 2 dcl 2-17 ref 139
null                                                   builtin function         dcl 74 ref 68 68 68 114 196
null_arg_list                   000116 automatic       structure                level 1 dcl 86 set ref 134 134
num_ptrs                        000102 automatic       fixed bin(17,0)          dcl 3-14 set ref 104*
out_code                        000130 automatic       fixed bin(35,0)          dcl 213 set ref 221* 224*
pad1                      0(17) 000116 automatic       bit(1)                   initial level 2 packed packed unaligned dcl 86 set
                                                                                  ref 86*
pad2                      1(17) 000116 automatic       bit(19)                  initial level 2 packed packed unaligned dcl 86 set
                                                                                  ref 86*
prior_ptr                 2            based           pointer                  level 2 dcl 2-17 set ref 114 114*
rtrv_al_ptr              24            based           pointer                  level 2 dcl 2-17 set ref 103 125* 179*
save_se_desc_ptr                000112 automatic       pointer                  initial dcl 68 set ref 68* 106* 205
save_se_ptr                     000114 automatic       pointer                  initial dcl 68 set ref 68* 105* 204
timing_mode              15(05)        based           bit(1)                   level 2 packed packed unaligned dcl 1-53 ref 123 127
                                                                                  177 181
type                     32            based           fixed bin(4,0)           array level 3 packed packed unaligned dcl 2-17 ref
                                                                                  141
vclock                                                 builtin function         dcl 74 ref 123 127 177 181

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
initial_number_of_linus_set_fn_args    automatic       fixed bin(17,0)          dcl 2-54
sys_info$max_seg_size                  external static fixed bin(35,0)          dcl 76

NAMES DECLARED BY EXPLICIT CONTEXT.
case                            000000 constant        label                    array(6) dcl 143 ref 141 147 153
error                           000663 constant        entry                    internal dcl 210 ref 116 120 188 190 199
exit                            000640 constant        label                    dcl 202 ref 228
linus_eval_set_func             000024 constant        entry                    external dcl 22 ref 114 149 196

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1110        1144     734        1120
Length      1376     734        34         216     154           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
linus_eval_set_func                 144 external procedure  is an external procedure.  
error                                   internal procedure  shares stack frame of external procedure linus_eval_set_func.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
linus_eval_set_func      000100 al_ptr                      linus_eval_set_func
                         000102 num_ptrs                    linus_eval_set_func
                         000103 err_flag                    linus_eval_set_func
                         000104 caller                      linus_eval_set_func
                         000105 i                           linus_eval_set_func
                         000106 initial_mrds_vclock         linus_eval_set_func
                         000110 destination_ptr             linus_eval_set_func
                         000112 save_se_desc_ptr            linus_eval_set_func
                         000114 save_se_ptr                 linus_eval_set_func
                         000116 null_arg_list               linus_eval_set_func
                         000130 out_code                    error

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_in         call_ext_out_desc   call_ext_out        return_mac          ext_entry           trunc_fx2
divide_fx1          vclock_mac

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
assign_round_                 cu_$generate_call             dsl_$retrieve                 linus_convert_code
linus_eval_expr               linus_eval_scal_func          linus_print_error             linus_table$async_retrieval

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
linus_data_$eval_set_func_id  mrds_error_$tuple_not_found




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     22 000020        68 000031        86 000035       103 000053       104 000060       105 000063       106 000065
    108 000104       109 000106       111 000107       112 000114       114 000115       116 000133       119 000144
    120 000156       123 000167       125 000201       127 000221       129 000235       131 000256       132 000261
    134 000270       138 000310       139 000327       141 000341       143 000351       147 000365       149 000366
    153 000401       155 000402       160 000424       172 000460       174 000462       177 000476       179 000510
    181 000530       183 000544       185 000545       188 000552       190 000562       192 000573       196 000607
    199 000627       202 000640       204 000641       205 000644       233 000662       210 000663       218 000665
    221 000674       224 000707       225 000724       228 000726


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
