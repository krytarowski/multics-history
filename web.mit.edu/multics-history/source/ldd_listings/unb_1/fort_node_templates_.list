	COMPILATION LISTING OF SEGMENT !BBBJPNdcQzGhwp
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 12/27/84  0756.4 mst Thu
	    Options: table map

        1 /* ******************************************************
        2*   *                                                    *
        3*   * Copyright, (C) Honeywell Limited, 1983             *
        4*   *                                                    *
        5*   * Copyright (c) 1972 by Massachusetts Institute of   *
        6*   * Technology and Honeywell Information Systems, Inc. *
        7*   *                                                    *
        8*   ****************************************************** */
        9 
       10 /* format: style3,^delnl,linecom */
       11 fort_node_templates_:
       12      proc;
       13 
       14 /* Written 28 September 1977 by Richard A. Barnes
       15*	Modified:	25 September 1978 by RAB to help fix 187
       16*	Modified:	2 June 1979 by RAB to add flow_unit.is_active_operator
       17*	Modified:	28 June 1979 by RAB to add flow_unit.dim_or_alias_or_not_set.
       18*	Modified:	2 July 1979 by RAB to fix 218 by moving loop_end_chain stuff
       19*		from loop node to flow_unit node.
       20*	Modified:	14 August 1979 by RAB to replace flow_unit.dim_or_alias_or_not_set
       21*		with flow_unit.always_completely_set.	*/
       22 
       23 dcl	me		char (20) int static options (constant) init ("fort_node_templates_");
       24 dcl	code		fixed bin (35);
       25 
       26 dcl	1 my_cds_args	aligned like cds_args;
       27 
       28 dcl	1 auto_fort_node_templates_
       29 			auto aligned,
       30 	  2 flow_unit_template
       31 			like flow_unit aligned;
       32 
       33 dcl	com_err_		entry options (variable);
       34 dcl	create_data_segment_
       35 			entry (ptr, fixed bin (35));
       36 
       37 dcl	(addr, null, size, unspec)
       38 			builtin;
       39 
  1     1 /* BEGIN INCLUDE FILE cds_args.incl.pl1 */
  1     2 
  1     3 dcl 1 cds_args based aligned,
  1     4     2 sections (2),
  1     5       3 p ptr,					/* pointer to data for text/static section */
  1     6       3 len fixed bin (18),				/* size of text/static section */
  1     7       3 struct_name char (32),			/* name of declared structure for this section */
  1     8     2 seg_name char (32),				/* name to create segment by */
  1     9     2 num_exclude_names fixed bin,			/* number of names in exclude array */
  1    10     2 exclude_array_ptr ptr,				/* pointer to array of exclude names */
  1    11     2 switches,					/* control switches */
  1    12       3 defs_in_link bit (1) unal,			/* says put defs in linkage */
  1    13       3 separate_static bit (1) unal,			/* says separate static section is wanted */
  1    14       3 have_text bit (1) unal,			/* ON if text section given */
  1    15       3 have_static bit (1) unal,			/* ON if static section given */
  1    16       3 pad bit (32) unal;
  1    17 
  1    18 dcl  exclude_names (1) char (32) based;			/* pointed to be cds_args.exclude_array_ptr */
  1    19 
  1    20 /* END INCLUDE FILE cds_args.incl.pl1 */
       40 
  2     1 /* BEGIN fort_opt_nodes.incl.pl1 */
  2     2 
  2     3 /* Created:	22 November 1977 by Richard A. Barnes for the optimizing Fortran compiler */
  2     4 
  2     5 /* Modified:	09 October 1978 by Paul E. Smee for larger common and arrays.
  2     6*   Modified:	2 June 1979 by RAB to speed up intersection of optimizer
  2     7*		machine states by adding operator.coordinate and
  2     8*		flow_unit.is_active_operator
  2     9*   Modified:	28 June 1979 by RAB to speed up compute_busy_on_exit by
  2    10*		adding flow_unit.dim_or_alias_or_not_set.
  2    11*   Modified:	02 July 1979 by RAB to fix 218 by moving loop_end_chain stuff
  2    12*		to flow_unit node from loop node.
  2    13*   Modified:	14 August 1979 by RAB to change flow_unit.dim_or_alias_or_not_set
  2    14*		to flow_unit.always_completely_set.
  2    15*   Modified:	17 September 1979 by RAB in preparation for register optimizer.
  2    16*   Modified:	20 September 1979 by RAB for index_value_analysis of register optimizer.
  2    17*   Modified:	03 November 1979 by RAB for flow_unit.refreshed for register optimizer.
  2    18*   Modified:	30 November 1979 by RAB to add more info to the loop node
  2    19*		for the register optimizer.
  2    20*   Modified:	18 December 1979 by RAB to make remainder of register
  2    21*		optimizer changes.
  2    22*   Modified:	17 December 1980 by CRD to add opt_statement.removable.
  2    23**/
  2    24 
  2    25 	/* CHAIN (2 words) */
  2    26 
  2    27 dcl	1 chain			based aligned,
  2    28 	2 next			pointer unaligned,
  2    29 	2 value			pointer unaligned;
  2    30 
  2    31 	/* EDGE (6 words) */
  2    32 
  2    33 dcl	1 edge			based aligned,
  2    34 	2 from			structure,
  2    35 	  3 value			ptr unal,
  2    36 	  3 next			ptr unal,
  2    37 	  3 back			ptr unal,
  2    38 	2 to			structure,
  2    39 	  3 value			ptr unal,
  2    40 	  3 next			ptr unal,
  2    41 	  3 back 			ptr unal;
  2    42 
  2    43 
  2    44 	/* FLOW_UNIT (22 words) */
  2    45 
  2    46 dcl	1 flow_unit		based aligned,
  2    47 	2 next			ptr unal,
  2    48 	2 back			ptr unal,
  2    49 	2 successors		ptr unal,
  2    50 	2 predecessors		ptr unal,
  2    51 	2 dominator		ptr unal,
  2    52 	2 loop			ptr unal,
  2    53 	2 next_in_loop		ptr unal,
  2    54 	2 loop_end_chain		ptr unal,
  2    55 	2 position		fixed bin(17) aligned,
  2    56 	2 number			fixed bin(17) unal,
  2    57 	2 n_in_loop_end		fixed bin(17) unal,
  2    58 	2 level_number		fixed bin(17) aligned,
  2    59 	2 first_statement		fixed bin (18) unsigned unal,
  2    60 	2 last_statement		fixed bin (18) unsigned unal,
  2    61 	2 insert_statement		fixed bin (18) unsigned unal,
  2    62 	2 insert_operator		fixed bin (18) unsigned unal,
  2    63 	2 info			structure unal,
  2    64 	  3 processed		bit(1),
  2    65 	  3 loop_entry		bit(1),
  2    66 	  3 falls_through		bit(1),
  2    67 	  3 has_label		bit(1),
  2    68 	  3 entry_pt		bit(1),
  2    69 	  3 in_queue		bit(1),
  2    70 	  3 is_back_target		bit(1),
  2    71 	  3 has_side_effects	bit(1),
  2    72 	  3 removed		bit(1),
  2    73 	  3 refreshed		bit(1),
  2    74 	  3 pad			bit(26),
  2    75 	2 used			ptr unal,
  2    76 	2 set			ptr unal,
  2    77 	2 busy_on_entry		ptr unal,
  2    78 	2 set_multiple		ptr unal,
  2    79 	2 busy_on_exit		ptr unal,
  2    80 	2 dominated_by		ptr unal,
  2    81 	2 is_active_operator	ptr unal,
  2    82 	2 always_completely_set	ptr unal;
  2    83 
  2    84 
  2    85 	/* INPUT_TO (3 words) */
  2    86 
  2    87 dcl	1 input_to		based aligned,
  2    88 	2 next			pointer unaligned,
  2    89 	2 operator		pointer unaligned,
  2    90 	2 which			fixed bin aligned;
  2    91 
  2    92 	/* LCHAIN (2 words) */
  2    93 
  2    94 dcl	1 lchain			based aligned,
  2    95 	2 next			pointer unaligned,
  2    96 	2 value			fixed bin(18) aligned;
  2    97 
  2    98 	/* LOOP (33 words) */
  2    99 
  2   100 dcl	1 loop			based aligned,
  2   101 	2 number			fixed bin(18),
  2   102 	2 depth			fixed bin(18),
  2   103 	2 father			pointer unaligned,
  2   104 	2 brother			pointer unaligned,
  2   105 	2 prev_brother		pointer unaligned,
  2   106 	2 son			pointer unaligned,
  2   107 	2 last_son		pointer unaligned,
  2   108 	2 entry_unit		pointer unaligned,
  2   109 	2 members			pointer unaligned,
  2   110 	2 back_target		pointer unaligned,
  2   111 	2 exits			pointer unaligned,
  2   112 	2 first_unit		pointer unaligned,
  2   113 	2 last_unit		pointer unaligned,
  2   114 	2 is_member		pointer unaligned,
  2   115 	2 is_exit			pointer unaligned,
  2   116 	2 articulation_blocks	pointer unaligned,
  2   117 	2 used			pointer unaligned,
  2   118 	2 set			pointer unaligned,
  2   119 	2 busy_on_exit		pointer unaligned,
  2   120 	2 set_multiple		pointer unaligned,
  2   121 	2 ancestors_and_me		pointer unaligned,
  2   122 	2 bits			structure unaligned,
  2   123 	  3 has_side_effects	bit(1),
  2   124 	  3 erases		structure unaligned,
  2   125 	    4 xr(0:7)		bit(1),
  2   126 	    4 pr(6)		bit(1),
  2   127 	  3 avoid_pr(6)		bit(1),
  2   128 	  3 all_xrs_globally_assigned	bit(1),
  2   129 	  3 pad			bit(14),
  2   130 	2 induction_var		pointer unaligned,
  2   131 	2 may_keep_in_xr		pointer unaligned,
  2   132 	2 computed		pointer unaligned,
  2   133 	2 xregs_used		fixed bin(4),
  2   134 	2 pregs_used		fixed bin(4),
  2   135 	2 global_xr_items		pointer unaligned,
  2   136 	2 global_pr_items		pointer unaligned,
  2   137 	2 range_list		pointer unaligned,
  2   138 	2 msp			pointer unaligned,
  2   139 	2 eligible_ind_var_op_var	pointer unaligned,
  2   140 	2 left_shift_chain		pointer unaligned;
  2   141 
  2   142 	/* OPERATOR */
  2   143 
  2   144 dcl	1 operator		based aligned,
  2   145 
  2   146 	/* WORD 1 */
  2   147 
  2   148 	  2 op_code		fixed bin(8) unal,
  2   149 	  2 assigns_constant_to_symbol bit(1) unal,
  2   150 	  2 freed			bit(1) unal,
  2   151 	  2 number		fixed bin(7) unsigned unal,
  2   152 	  2 coordinate		fixed bin(18) unsigned unal,
  2   153 
  2   154 	/* WORD 2 */
  2   155 
  2   156 	  2 next			fixed bin(18) unsigned unal,
  2   157 	  2 back			fixed bin(18) unsigned unal,
  2   158 
  2   159 	/* WORD 3 */
  2   160 
  2   161 	  2 primary		pointer unal,
  2   162 
  2   163 	/* WORD 4 */
  2   164 
  2   165 	  2 output		fixed bin(18) aligned,
  2   166 
  2   167 	/* WORDS 5 - n */
  2   168 
  2   169 	  2 operand(n_operands refer (operator.number))	fixed bin (18) aligned;
  2   170 
  2   171 dcl	n_operands		fixed bin;
  2   172 
  2   173 
  2   174 	/* OPT_STATEMENT */
  2   175 
  2   176 dcl	1 opt_statement		based aligned structure,
  2   177 
  2   178 	/* WORD 1 */
  2   179 
  2   180 	  2 op_code		fixed bin(8) unal,	/* must be stat_op */
  2   181 	  2 number		fixed bin(8) unal,	/* must be 0 */
  2   182 	  2 label 		fixed bin (18) unsigned unal,
  2   183 
  2   184 	/* WORD 2 */
  2   185 
  2   186 	  2 first_operator 		fixed bin (18) unsigned unal,
  2   187 	  2 prev_operator		fixed bin (18) unsigned unal,
  2   188 
  2   189 	/* WORD 3 */
  2   190 
  2   191 	  2 next			bit(18) unal,	/* "0"b = no next statement */
  2   192 	  2 back			bit(18) unal,	/* "0"b = no prev statement */
  2   193 
  2   194 	/* WORD 4 */
  2   195 
  2   196 	  2 source_id		structure unaligned,
  2   197 	    3 file		fixed bin (8) unsigned,	/* 0 = first file */
  2   198 	    3 line		bit(14),
  2   199 	    3 statement		bit(5),	/* 1 = first statement */
  2   200 
  2   201 	  2 length		bit(9) unaligned,
  2   202 
  2   203 	/* WORD 5 */
  2   204 
  2   205 	  2 bits			structure unaligned,
  2   206 	    3 put_in_map		bit(1),
  2   207 	    3 put_in_profile	bit(1),
  2   208 	    3 processed_by_converter	bit(1),
  2   209 	    3 referenced_backwards	bit(1),
  2   210 	    3 referenced_by_assign	bit(1),
  2   211 	    3 has_operator_list	bit(1),
  2   212 	    3 moved		bit(1),
  2   213 	    3 removable		bit(1),
  2   214 	    3 pad			bit(1),
  2   215 
  2   216 	  2 start			fixed bin(26) unaligned,
  2   217 
  2   218 	/* WORD 6 */
  2   219 
  2   220 	  2 location		bit(18) unaligned,	/* (18)"1"b = no code */
  2   221 	  2 machine_state		fixed bin (18) unsigned unaligned,
  2   222 
  2   223 	/* WORD 7 */
  2   224 
  2   225 	  2 flow_unit		pointer unaligned,
  2   226 
  2   227 	/* WORD 8 */
  2   228 
  2   229 	  2 operator_list		pointer unaligned;
  2   230 
  2   231 
  2   232 	/* PRIMARY (4 words) */
  2   233 
  2   234 dcl	1 primary			based aligned,
  2   235 	2 next			pointer unaligned,
  2   236 	2 last			pointer unaligned,
  2   237 	2 data			structure aligned,
  2   238 	  3 expression		pointer unaligned,
  2   239 	  3 flow_unit		pointer unaligned;
  2   240 
  2   241 	/* RANGE (3 words) */
  2   242 
  2   243 dcl	1 range			based aligned,
  2   244 	2 next			pointer unaligned,
  2   245 	2 variable		pointer unaligned,
  2   246 	2 bits			structure unaligned,
  2   247 	  3 range_bits		structure unaligned,
  2   248 	    4 fb17		bit(1),
  2   249 	    4 fb18_uns		bit(1),
  2   250 	  3 mbz			bit(34);
  2   251 
  2   252 
  2   253 /* END fort_opt_nodes.incl.pl1 */
       41 
       42 
       43 	unspec (my_cds_args) = "0"b;
       44 
       45 	unspec (auto_fort_node_templates_) = "0"b;
       46 
       47 	my_cds_args.have_text = "1"b;
       48 	my_cds_args.num_exclude_names = 0;
       49 	my_cds_args.exclude_array_ptr = null;
       50 
       51 	my_cds_args.seg_name = me;
       52 	my_cds_args.sections (1).struct_name = "auto_" || me;
       53 	my_cds_args.sections (1).len = size (auto_fort_node_templates_);
       54 	my_cds_args.sections (1).p = addr (auto_fort_node_templates_);
       55 
       56 	flow_unit_template.next,
       57 	     flow_unit_template.back,
       58 	     flow_unit_template.successors,
       59 	     flow_unit_template.predecessors,
       60 	     flow_unit_template.dominator,
       61 	     flow_unit_template.loop,
       62 	     flow_unit_template.next_in_loop,
       63 	     flow_unit_template.loop_end_chain,
       64 	     flow_unit_template.used,
       65 	     flow_unit_template.set,
       66 	     flow_unit_template.busy_on_entry,
       67 	     flow_unit_template.set_multiple,
       68 	     flow_unit_template.busy_on_exit,
       69 	     flow_unit_template.dominated_by,
       70 	     flow_unit_template.is_active_operator,
       71 	     flow_unit_template.always_completely_set = null;
       72 
       73 	call create_data_segment_ (addr (my_cds_args), code);
       74 
       75 	if code ^= 0
       76 	then call com_err_ (code, me);
       77 
       78      end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    12/27/84  0751.8  !BBBJPNdcQzGhwp.pl1               >spec>online>fort_recompile>fort_node_templates_.cds
40           1    04/01/76  2209.5  cds_args.incl.pl1                 >ldd>include>cds_args.incl.pl1
41           2    03/27/82  0424.8  fort_opt_nodes.incl.pl1           >ldd>include>fort_opt_nodes.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
addr                                                   builtin function         dcl 37 ref 54 73 73
always_completely_set
                         25     000147 automatic       pointer                  level 3 packed unaligned dcl 28 set ref 56*
auto_fort_node_templates_       000147 automatic       structure                level 1 dcl 28 set ref 45* 53 54
back                      1     000147 automatic       pointer                  level 3 packed unaligned dcl 28 set ref 56*
busy_on_entry            20     000147 automatic       pointer                  level 3 packed unaligned dcl 28 set ref 56*
busy_on_exit             22     000147 automatic       pointer                  level 3 packed unaligned dcl 28 set ref 56*
cds_args                               based           structure                level 1 dcl 1-3
code                            000100 automatic       fixed bin(35,0)          dcl 24 set ref 73* 75 75*
com_err_                        000012 constant        entry                    external dcl 33 ref 75
create_data_segment_            000014 constant        entry                    external dcl 34 ref 73
dominated_by             23     000147 automatic       pointer                  level 3 packed unaligned dcl 28 set ref 56*
dominator                 4     000147 automatic       pointer                  level 3 packed unaligned dcl 28 set ref 56*
exclude_array_ptr        42     000102 automatic       pointer                  level 2 dcl 26 set ref 49*
flow_unit                              based           structure                level 1 dcl 2-46
flow_unit_template              000147 automatic       structure                level 2 dcl 28
have_text                44(02) 000102 automatic       bit(1)                   level 3 packed unaligned dcl 26 set ref 47*
is_active_operator       24     000147 automatic       pointer                  level 3 packed unaligned dcl 28 set ref 56*
len                       2     000102 automatic       fixed bin(18,0)          array level 3 dcl 26 set ref 53*
loop                      5     000147 automatic       pointer                  level 3 packed unaligned dcl 28 set ref 56*
loop_end_chain            7     000147 automatic       pointer                  level 3 packed unaligned dcl 28 set ref 56*
me                              000000 constant        char(20)                 initial unaligned dcl 23 set ref 51 52 75*
my_cds_args                     000102 automatic       structure                level 1 dcl 26 set ref 43* 73 73
next                            000147 automatic       pointer                  level 3 packed unaligned dcl 28 set ref 56*
next_in_loop              6     000147 automatic       pointer                  level 3 packed unaligned dcl 28 set ref 56*
null                                                   builtin function         dcl 37 ref 49 56
num_exclude_names        40     000102 automatic       fixed bin(17,0)          level 2 dcl 26 set ref 48*
p                               000102 automatic       pointer                  array level 3 dcl 26 set ref 54*
predecessors              3     000147 automatic       pointer                  level 3 packed unaligned dcl 28 set ref 56*
sections                        000102 automatic       structure                array level 2 dcl 26
seg_name                 30     000102 automatic       char(32)                 level 2 dcl 26 set ref 51*
set                      17     000147 automatic       pointer                  level 3 packed unaligned dcl 28 set ref 56*
set_multiple             21     000147 automatic       pointer                  level 3 packed unaligned dcl 28 set ref 56*
size                                                   builtin function         dcl 37 ref 53
struct_name               3     000102 automatic       char(32)                 array level 3 dcl 26 set ref 52*
successors                2     000147 automatic       pointer                  level 3 packed unaligned dcl 28 set ref 56*
switches                 44     000102 automatic       structure                level 2 dcl 26
unspec                                                 builtin function         dcl 37 set ref 43* 45*
used                     16     000147 automatic       pointer                  level 3 packed unaligned dcl 28 set ref 56*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
chain                                  based           structure                level 1 dcl 2-27
edge                                   based           structure                level 1 dcl 2-33
exclude_names                          based           char(32)                 array unaligned dcl 1-18
input_to                               based           structure                level 1 dcl 2-87
lchain                                 based           structure                level 1 dcl 2-94
loop                                   based           structure                level 1 dcl 2-100
n_operands                      000175 automatic       fixed bin(17,0)          dcl 2-171
operator                               based           structure                level 1 dcl 2-144
opt_statement                          based           structure                level 1 dcl 2-176
primary                                based           structure                level 1 dcl 2-234
range                                  based           structure                level 1 dcl 2-243

NAME DECLARED BY EXPLICIT CONTEXT.
fort_node_templates_            000015 constant        entry                    external dcl 11

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       210         226     133         220
Length      2326     133        16        2063      55           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
fort_node_templates_                144 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
fort_node_templates_     000100 code                        fort_node_templates_
                         000102 my_cds_args                 fort_node_templates_
                         000147 auto_fort_node_templates_   fort_node_templates_
                         000175 n_operands                  fort_node_templates_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_cs            call_ext_out_desc   call_ext_out        return              shorten_stack       ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      create_data_segment_

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000014        43 000022        45 000025        47 000030        48 000032        49 000033        51 000035
     52 000040        53 000053        54 000056        56 000060        73 000101        75 000113        78 000132


Object Segment >spec>online>fort_recompile>fort_node_templates_
Created on 12/27/84  0756.5 mst Thu
by GJohnson.SysMaint.m
using create_data_segment_, Version II of Friday, November 30, 1984

        Object    Text    Defs    Link    Symb  Static
Start        0       0      26      62      72      72
Length     257      26      34      10     151       0


3 Definitions:


segname:    fort_node_templates_

text|0          flow_unit_template
symb|0          symbol_table


No Links.





                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
