	COMPILATION LISTING OF SEGMENT speedtype_index_
	Compiled by: Multics PL/I Compiler, Release 26a, of September 3, 1980
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 01/06/81  1250.9 mst Tue
	    Options: optimize map

        1 /* ******************************************************
        2*   *                                                    *
        3*   *                                                    *
        4*   *    Copyright, (C) Honeywell Information Systems    *
        5*   *    Inc., 1980.                                     *
        6*   *                                                    *
        7*   *                                                    *
        8*   ****************************************************** */
        9 
       10 speedtype_index_: procedure (arg_symbol, arg_ssd_ptr, arg_sbx, arg_ecode);
       11 
       12 /*	This procedure is an internal interface of the Speedtype subsystem.
       13*   *	Created on 10/13/75 by Bill Silver as notescript_index_.
       14*   *	Changed on 06/13/77 by Bill Silver to speedtype_symbol_.
       15*   *
       16*   *	This procedure takes a symbol and returns the index in the current
       17*   *	Speedtype symbol dictionary that corresponds to this symbol.
       18**/
       19 
       20 dcl  arg_ecode fixed bin (35);			/* (O) Error table code. */
       21 dcl  arg_symbol char (*);				/* (I) A symbol token. */
       22 dcl  arg_ssd_ptr ptr;				/* (I) Pointer to current symbol dictionary. */
       23 dcl  arg_sbx fixed bin;				/* (O) Index of symbol entry. */
       24 
       25 
       26 dcl  ecode fixed bin (35);
       27 dcl  sb_tab_len fixed bin;				/* Length of actual symbol array. */
       28 dcl  sb_tab_ptr ptr;				/* Pointer to symbol table. */
       29 dcl  sbx fixed bin;					/* Symbol index. */
       30 dcl  symbol_len fixed bin;				/* Length of test symbol. */
       31 dcl  symbol_ptr ptr;				/* Pointer to test symbol. */
       32 
       33 dcl  symbol_buffer char (8);				/* Used to copy symbol argument. */
       34 
       35 
       36 dcl  symbol char (symbol_len) based (symbol_ptr);		/* Overlay of the test symbol. */
       37 
       38 dcl  sb_table char (sb_tab_len) based (sb_tab_ptr);	/* Symbol table as a string. */
       39 
       40 
       41 dcl  caps char (26) aligned				/* Uppercase letters. */
       42      internal static init ("EAIOUSTCYHNLMRWFGPBDJQKXVZ");
       43 
       44 
       45 dcl (addr, index, length, search, substr) builtin;
       46 
       47 dcl  error_table_$bad_arg fixed bin (35) external;
       48 dcl  error_table_$bigarg fixed bin (35) external;
       49 
       50 dcl  com_err_ entry options (variable);
       51 						/* 	*/
  1     1 /*	Begin include file ... speedtype_symbols.incl.pl1
  1     2**	Created on 09/06/76 by Bill Silver.
  1     3**         Modified   06/03/80 by Paul Benjamin to allow special suffixing.
  1     4**
  1     5**	This include file defines the format of a Speedtype Symbol Dictionary.
  1     6**	The default Speedtype options are:
  1     7**
  1     8**	     ESCAPES:
  1     9**		temp "~"  pad (Octal 177)  perm "`"  trans ":"  space ";"
  1    10**	     PREFIXES:
  1    11**		under "_"  upper "+"
  1    12**	     SUFFIXES:
  1    13**		plural "+"  ed "-"  ing "*"  er "="  ly "|"
  1    14**	     DELIMITERS:
  1    15**		,"()?!<>[]{}
  1    16**/
  1    17 dcl	ssd_ptr		ptr;		/* Pointer to the base of a Speedtype Symbol Dictionary. */
  1    18 dcl	exp_ptr		ptr;		/* Pointer to an expansion entry. */
  1    19 dcl	sb_ptr		ptr;		/* Pointer to a symbol entry. */
  1    20 dcl       spc_ptr             ptr;                /* Pointer to a special entry. */
  1    21 dcl	delim_ptr		ptr;		/* Pointer to delimiter characters. */
  1    22 
  1    23 dcl	ssd_version_2	fixed bin		/* Version of this include file. */
  1    24 	internal static	init (2);
  1    25 
  1    26 dcl    1	ssd  based(ssd_ptr) aligned,		/* Format of a Speedtype Symbol Dictionary. */
  1    27 	2  version	fixed bin,	/* Version number.  Currently = 2. */
  1    28 	2  identifier	char(12),		/* "Seedtype_SD" => this is a Speedtype Symbol Dictionary. */
  1    29 	2  flags		bit(36),		/* Not used, all zero. */
  1    30 	2  delimiters	char(24),		/* Blank, New Line, Tab, Escapes, Others. */
  1    31 	2  escapes	char(5), 		/* Pad, Perm, Temp, Trans, Space */
  1    32 	2  prefixes	char(2),		/* Under, Upper. */
  1    33 	2  suffixes	char(5),		/* Plural, ed, ing, er, ly. */
  1    34 	2  num_symbols	fixed bin,	/* Number of defined symbols. */
  1    35 	2  table_size       fixed bin,          /* Size of the 3 tables to follow. */
  1    36 	2  pad(14)	bit(36),		/* Round out header to 32 words. */
  1    37 	2  spec_tab(table_size) like  spc,      /* Special entries. */
  1    38 	2  exp_tab(table_size) like  exp,	/* Expansion entries. */
  1    39 	2  sb_tab(table_size) like  sb;         /* Symbol entries. */
  1    40 
  1    41 dcl    1	delim_chars  based(delim_ptr)  aligned,	/* Overlay of ssd.delimiters. */
  1    42         (	2  blank		char(1),
  1    43 	2  new_line	char(1),
  1    44 	2  tab		char(1),
  1    45 	2  escapes	char(5),
  1    46 	2  others		char(16)) unaligned;
  1    47 
  1    48 dcl    1	sb  based(sb_ptr)   aligned,		/* Symbol entry. */
  1    49         (	2  new_line	char(1),		/* Needed to make index functions work. */
  1    50 	2  symbol		char(7)) unal;	/* Actual symbol string. */
  1    51 
  1    52 dcl    1	exp  based(exp_ptr) aligned,		/* Expansion entry. */
  1    53         (	2  actionx(5)	fixed bin(8),	/* Action index for each suffix. */
  1    54 	2  pad		fixed bin(17),	/* Reserved for additional suffixes, flags, etc.. */
  1    55 	2  len		fixed bin(8),	/* Actual length of expansion. */
  1    56 	2  expansion	char(56)) unal;	/* Expansion of string (56 => size(exp) = 16 words). */
  1    57 dcl    1  spc  based(spc_ptr) aligned,            /* Special entry. */
  1    58 	2  special (5)      char(56) unal;      /* One for each possible suffix. */
  1    59 
  1    60 /*	End include file ... speedtype_symbols.incl.pl1	*/
       52 
       53 /* 	*/
       54 	ssd_ptr = arg_ssd_ptr;			/* Get pointer to symbol dictionary. */
       55 	sb_ptr = addr (symbol_buffer);		/* Build a test symbol entry. */
       56 	sb.new_line = "
       57 ";						/* Set it up like an entry in the sb_tab array. */
       58 	sb.symbol = arg_symbol;			/* Copy symbol argument. */
       59 	sbx = 0;					/* Initialize to not found. */
       60 
       61 	symbol_ptr = addr (sb.symbol);		/* Set up overlay of symbol. */
       62 	symbol_len = length (arg_symbol);
       63 
       64 	if symbol_len > 7				/* Is symbol too long? */
       65 	then do;					/* Yes, illegal symbol. */
       66 	     ecode = error_table_$bigarg;
       67 	     call com_err_ (ecode, "Speedtype", "Symbol ""^a"" longer than 7 characters.", arg_symbol);
       68 	     goto RETURN;
       69 	end;
       70 
       71 	ecode = error_table_$bad_arg;			/* Set error until symbol validated. */
       72 
       73 	if search (symbol, ssd.delimiters) ^= 0		/* Check for delimiters in symbol. */
       74 	then do;
       75 	     call com_err_ (ecode, "Speedtype", "Symbol ""^a"" contains a delimiter character.", symbol);
       76 	     goto RETURN;
       77 	end;
       78 	if index (caps, substr (symbol, 1, 1)) ^= 0	/* Check for leading capital letter. */
       79 	then do;
       80 	     call com_err_ (ecode, "Speedtype", "Symbol ""^a"" contains a leading capital letter.", symbol);
       81 	     goto RETURN;
       82 	end;
       83 	if index (ssd.prefixes, substr (symbol, 1, 1)) ^= 0
       84 	then do;					/* Symbol begins with a prefix character. */
       85 	     call com_err_ (ecode, "Speedtype", "Symbol ""^a"" begins with a prefix character.", symbol);
       86 	     goto RETURN;
       87 	end;
       88 	if index (ssd.suffixes, substr (symbol, symbol_len, 1)) ^= 0
       89 	then do;
       90 	     call com_err_ (ecode, "Speedtype", "Symbol ""^a"" ends with a suffix character.", symbol);
       91 	     goto RETURN;
       92 	end;
       93 	if substr (symbol, symbol_len, 1) = "."
       94 	then do;
       95 	     call com_err_ (ecode, "Speedtype", "Symbol ""^a"" ends with a period.", symbol);
       96 	     goto RETURN;
       97 	end;
       98 
       99 	ecode = 0;				/* Now reset to good error code. */
      100 
      101 	sb_tab_len = ssd.num_symbols * (2 * 4);		/* Use symbol table as a string. */
      102 	sb_tab_ptr = addr (ssd.sb_tab);
      103 
      104 	sbx = index (sb_table, symbol_buffer);		/* Look for symbol in table. */
      105 	if sbx ^= 0				/* Did we find it? */
      106 	then sbx = ((sbx-1) / 8) + 1;			/* Yes, convert to table index. */
      107 
      108 RETURN:
      109 	arg_sbx = sbx;				/* Return index. */
      110 	arg_ecode = ecode;
      111 
      112      end speedtype_index_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    01/06/81  1247.7  speedtype_index_.pl1              >spec>on>speed>speedtype_index_.pl1
52           1    11/14/80  1152.8  speedtype_symbols.incl.pl1        >ldd>include_1>speedtype_symbols.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
addr                                                   builtin function         dcl 45 ref 55 61 102
arg_ecode                              parameter       fixed bin(35,0)          dcl 20 set ref 10 110*
arg_sbx                                parameter       fixed bin(17,0)          dcl 23 set ref 10 108*
arg_ssd_ptr                            parameter       pointer                  dcl 22 ref 10 54
arg_symbol                             parameter       char                     unaligned dcl 21 set ref 10 58 62 67*
caps                            000000 constant        char(26)                 initial dcl 41 ref 78
com_err_                        000014 constant        entry                    external dcl 50 ref 67 75 80 85 90 95
delimiters                5            based           char(24)                 level 2 dcl 1-26 ref 73
ecode                           000100 automatic       fixed bin(35,0)          dcl 26 set ref 66* 67* 71* 75* 80* 85* 90* 95* 99*
                                                                                  110
error_table_$bad_arg            000010 external static fixed bin(35,0)          dcl 47 ref 71
error_table_$bigarg             000012 external static fixed bin(35,0)          dcl 48 ref 66
exp                                    based           structure                level 1 dcl 1-52
index                                                  builtin function         dcl 45 ref 78 83 88 104
length                                                 builtin function         dcl 45 ref 62
new_line                               based           char(1)                  level 2 packed unaligned dcl 1-48 set ref 56*
num_symbols              20            based           fixed bin(17,0)          level 2 dcl 1-26 ref 101
prefixes                 15            based           char(2)                  level 2 dcl 1-26 ref 83
sb                                     based           structure                level 1 dcl 1-48
sb_ptr                          000114 automatic       pointer                  dcl 1-19 set ref 55* 56 58 61
sb_tab                                 based           structure                array level 2 dcl 1-26 set ref 102
sb_tab_len                      000101 automatic       fixed bin(17,0)          dcl 27 set ref 101* 104
sb_tab_ptr                      000102 automatic       pointer                  dcl 28 set ref 102* 104
sb_table                               based           char                     unaligned dcl 38 ref 104
sbx                             000104 automatic       fixed bin(17,0)          dcl 29 set ref 59* 104* 105 105* 105 108
search                                                 builtin function         dcl 45 ref 73
spc                                    based           structure                level 1 dcl 1-57
ssd                                    based           structure                level 1 dcl 1-26
ssd_ptr                         000112 automatic       pointer                  dcl 1-17 set ref 54* 73 83 88 101 102 102 102
substr                                                 builtin function         dcl 45 ref 78 83 88 93
suffixes                 16            based           char(5)                  level 2 dcl 1-26 ref 88
symbol                                 based           char                     unaligned dcl 36 in procedure "speedtype_index_" set
                                                                                  ref 73 75* 78 80* 83 85* 88 90* 93 95*
symbol                    0(09)        based           char(7)                  level 2 in structure "sb" packed unaligned dcl 1-48
                                                                                  in procedure "speedtype_index_" set ref 58* 61
symbol_buffer                   000110 automatic       char(8)                  unaligned dcl 33 set ref 55 104
symbol_len                      000105 automatic       fixed bin(17,0)          dcl 30 set ref 62* 64 73 75 75 78 80 80 83 85 85 88
                                                                                  88 90 90 93 93 95 95
symbol_ptr                      000106 automatic       pointer                  dcl 31 set ref 61* 73 75 78 80 83 85 88 90 93 95
table_size               21            based           fixed bin(17,0)          level 2 dcl 1-26 ref 102 102

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
delim_chars                            based           structure                level 1 dcl 1-41
delim_ptr                              automatic       pointer                  dcl 1-21
exp_ptr                                automatic       pointer                  dcl 1-18
spc_ptr                                automatic       pointer                  dcl 1-20
ssd_version_2                          internal static fixed bin(17,0)          initial dcl 1-23

NAMES DECLARED BY EXPLICIT CONTEXT.
RETURN                          000575 constant        label                    dcl 108 ref 68 76 81 86 91 96
speedtype_index_                000131 constant        entry                    external dcl 10

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       656         674     604         666
Length      1064     604        16         153      52           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
speedtype_index_                    132 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
speedtype_index_         000100 ecode                       speedtype_index_
                         000101 sb_tab_len                  speedtype_index_
                         000102 sb_tab_ptr                  speedtype_index_
                         000104 sbx                         speedtype_index_
                         000105 symbol_len                  speedtype_index_
                         000106 symbol_ptr                  speedtype_index_
                         000110 symbol_buffer               speedtype_index_
                         000112 ssd_ptr                     speedtype_index_
                         000114 sb_ptr                      speedtype_index_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   return              ext_entry_desc      trunc_fx2           set_cs_eis          index_cs_eis
search_eis          divide_fx1

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$bad_arg          error_table_$bigarg




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     10 000124        54 000144        55 000150        56 000152        58 000154        59 000160        61 000161
     62 000164        64 000165        66 000167        67 000171        68 000224        71 000225        73 000227
     75 000234        76 000272        78 000273        80 000310        81 000346        83 000347        85 000360
     86 000416        88 000417        90 000434        91 000472        93 000473        95 000476        96 000534
     99 000535       101 000536       102 000541       104 000552       105 000560       108 000575       110 000600
    112 000602


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
