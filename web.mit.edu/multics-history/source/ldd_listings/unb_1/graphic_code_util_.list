ASSEMBLY LISTING OF SEGMENT >udd>sm>ds>w>ml>graphic_code_util_.alm                                                                                                                                  
ASSEMBLED ON:	04/18/00  1112.2 mdt Tue
OPTIONS USED:	list symbols 
ASSEMBLED BY:	ALM Version 8.14 March 1989     
ASSEMBLER CREATED:	06/09/89  1102.3 mdt Fri

                                     1  "  ***********************************************************
                                     2  "  *                                                         *
                                     3  "  *                                                         *
                                     4  "  * Copyright, (C) Honeywell Information Systems Inc., 1981 *
                                     5  "  *                                                         *
                                     6  "  *                                                         *
                                     7  "  ***********************************************************
                                     8  
    000000                           9  	name	graphic_code_util_
                                    10  
                                    11  " This module performs format translations between Multics standard
                                    12  " graphics code and common numeric argument formats.
                                    13  "
                                    14  " Written 11/15/80 by C. D. Tavares as a replacement for
                                    15  " a former PL/I version that ran half as fast.
                                    16  
                        000025      17  	entry	decode_spi,decode_dpi,decode_uid,decode_scl
                        000027      18  	entry	decode_scl_nozero
                        000066      19  	entry	encode_spi,encode_dpi,encode_uid,encode_scl
                                    20  "
                                    21  	include	stack_frame
                                   1-1  "
                                   1-2  "	BEGIN INCLUDE FILE ... stack_frame.incl.alm   6/72 RBS
                                   1-3  "
                                   1-4  " Modified: 16 Dec 1977, D. Levin - to add fio_ps_ptr
                                   1-5  " Modified:  3 Feb 1978, P. Krupp - to add run_unit_manager_bit & main_proc_bit
                                   1-6  " Modified: 21 March 1978, D. Levin - change fio_ps_ptr to support_ptr
                                   1-7  "
                        000020     1-8  	equ	stack_frame.prev_sp,16
                        000020     1-9  	equ	stack_frame.condition_word,16
                        000022    1-10  	equ	stack_frame.next_sp,18
                        000022    1-11  	equ	stack_frame.signaller_word,18
                        000024    1-12  	equ	stack_frame.return_ptr,20
                        000026    1-13  	equ	stack_frame.entry_ptr,22
                        000030    1-14  	equ	stack_frame.operator_ptr,24
                        000030    1-15  	equ	stack_frame.lp_ptr,24
                        000032    1-16  	equ	stack_frame.arg_ptr,26
                        000034    1-17  	equ	stack_frame.static_ptr,28
                        000035    1-18  	equ	stack_frame.support_ptr,29	" only used by fortran I/O
                        000036    1-19  	equ	stack_frame.on_unit_rel_ptrs,30
                        000037    1-20  	equ	stack_frame.operator_ret_ptr,31
                        000037    1-21  	equ	stack_frame.translator_id,31
                        000040    1-22  	equ	stack_frame.regs,32
                        000060    1-23  	equ	stack_frame.min_length,48
                        000020    1-24  	equ	stack_frame.flag_word,16
                        020000    1-25  	bool	stack_frame.main_proc_bit,020000	(DL)
                        010000    1-26  	bool	stack_frame.run_unit_manager,010000	(DL)
                        004000    1-27  	bool	stack_frame.signal_bit,004000		(DL)
                        002000    1-28  	bool	stack_frame.crawl_out_bit,002000	(DL)
                        001000    1-29  	bool	stack_frame.signaller_bit,001000	(DL)
                        000400    1-30  	bool	stack_frame.link_trap_bit,000400	(DL)
                        000200    1-31  	bool	stack_frame.support_bit,000200	(DL)
                        000100    1-32  	bool	stack_frame.condition_bit,000100	(DL)
                                  1-33  
                                  1-34  "
                                  1-35  "	END INCLUDE FILE  ... stack_frame.incl.alm
                                  1-36  "
                                    22  "
                                    23  " decode_spi: entry (arg_stringp, count, fixed_array);
                                    24  
    000000                          25  decode_spi:
    000000  0a   000120 7000 00     26  	tsx0	decode_setup	get args
    000001  aa   000001 6270 00     27  	eax7	1		spi format is 1 char
    000002  0a   000125 7000 00     28  	tsx0	decode		process it
    000003  aa  7 00044 7101 20     29  	short_return
                                    30  "
                                    31  " decode_dpi: entry (arg_stringp, count, fixed_array);
                                    32  
    000004                          33  decode_dpi:
    000004  0a   000120 7000 00     34  	tsx0	decode_setup	get args
    000005  aa   000000 6220 11     35  	eax2	0,x1		save count
    000006  aa  3 00000 3521 00     36  	epp2	pr3|0		and array ptr
    000007  aa   000002 6270 00     37  	eax7	2		dpi format is 2 chars
    000010  0a   000125 7000 00     38  	tsx0	decode		process it
                                    39  
    000011  aa   004000 2350 07     40  	lda	=o4000,dl		high order dpi bit
    000012  aa   010000 3360 07     41  	lcq	=o10000,dl	loads sign bits 777777770000
                                    42  
    000013                          43  dd_neg_loop:
    000013  aa  2 77777 3151 12     44  	cana	pr2|-1,x2		is "negative" bit on
    000014  aa   000002 6000 04     45  	tze	2,ic		no, skip
    000015  aa  2 77777 2561 12     46  	orsq	pr2|-1,x2		yes, or in extended negative sign
    000016  aa   000001 1220 03     47  	sblx2	1,du		are we done
    000017  0a   000013 6054 00     48  	tpnz	dd_neg_loop	no, loop
                                    49  
    000020  aa  7 00044 7101 20     50  	short_return
                                    51  "
                                    52  " decode_uid: entry (arg_stringp, count, fixed_array);
                                    53  
    000021                          54  decode_uid:
    000021  0a   000120 7000 00     55  	tsx0	decode_setup	get args
    000022  aa   000003 6270 00     56  	eax7	3		uid format is 3 chars
    000023  0a   000125 7000 00     57  	tsx0	decode		do it
    000024  aa  7 00044 7101 20     58  	short_return
                                    59  "
                                    60  " decode_scl: entry (arg_stringp, count, float_array);
                                    61  
    000025                          62  decode_scl:
    000025  aa   000000 6230 00     63  	eax3	0		indicator
    000026  0a   000030 7100 00     64  	tra	decode_scl_common
                                    65  
                                    66  " decode_scl_nozero: entry (arg_stringp, count, fixed_array);
                                    67  
    000027                          68  decode_scl_nozero:
    000027  aa   000001 6230 00     69  	eax3	1		indicator
                                    70  
    000030                          71  decode_scl_common:
    000030  0a   000120 7000 00     72  	tsx0	decode_setup	get args
    000031  aa   000000 6220 11     73  	eax2	0,x1		save count
    000032  aa  3 00000 3521 00     74  	epp2	pr3|0		and array ptr
    000033  aa   000003 6270 00     75  	eax7	3		scl format is 3 chars
    000034  0a   000125 7000 00     76  	tsx0	decode		do it
                                    77  
    000035                          78  ds_float_loop:	null		turn fixed (17,6) into float
    000035  aa  2 77777 2351 12     79  	lda	pr2|-1,x2		load intermediate result word
    000036  aa   000022 7350 00     80  	als	18		shift to left 18
    000037  aa   000066 7330 00     81  	lrs	54		extend sign bit and occupy aq
    000040  aa   202000 4110 03     82  	lde	=o202000,du	load proper exponent
    000041  aa   400000 4750 03     83  	fad	=0.0,du		normalize
    000042  0a   000046 6010 00     84  	tnz	ds_storit		if nonzero, store it
    000043  aa   000000 1030 03     85  	cmpx3	0,du		were we called at nozero entry
    000044  0a   000046 6000 00     86  	tze	ds_storit		no, store the zero
    000045  0a   000252 4310 00     87  	fld	=1e-6		load small nonzero value
    000046                          88  ds_storit:
    000046  aa  2 77777 4551 12     89  	fst	pr2|-1,x2		store as float bin
    000047  aa   000001 1220 03     90  	sblx2	1,du		are we done
    000050  0a   000035 6054 00     91  	tpnz	ds_float_loop	no, loop
                                    92  
    000051  aa  7 00044 7101 20     93  	short_return
                                    94  "
                                    95  " encode_spi: entry (fixed_array, count, arg_stringp);
                                    96  
    000052                          97  encode_spi:
    000052  0a   000140 7000 00     98  	tsx0	encode_setup	get args
    000053  aa   000001 6270 00     99  	eax7	1		spi format is 1 char
    000054  0a   000145 7000 00    100  	tsx0	encode		do it
    000055  aa  7 00044 7101 20    101  	short_return
                                   102  "
                                   103  " encode_dpi: entry (fixed_array, count, arg_stringp);
                                   104  
    000056                         105  encode_dpi:
    000056  0a   000140 7000 00    106  	tsx0	encode_setup	get args
    000057  aa   000002 6270 00    107  	eax7	2		dpi format is 2 chars
    000060  0a   000145 7000 00    108  	tsx0	encode		do it
    000061  aa  7 00044 7101 20    109  	short_return
                                   110  "
                                   111  " encode_uid: entry (fixed_array, count, arg_stringp);
                                   112  
    000062                         113  encode_uid:
    000062  0a   000140 7000 00    114  	tsx0	encode_setup	get args
    000063  aa   000003 6270 00    115  	eax7	3		uid format is 3 chars
    000064  0a   000145 7000 00    116  	tsx0	encode		do it
    000065  aa  7 00044 7101 20    117  	short_return
                                   118  "
                                   119  " encode_scl: entry (float_array, count, arg_stringp);
                                   120  
    000066                         121  encode_scl:
    000066  0a   000140 7000 00    122  	tsx0	encode_setup	get args
    000067  aa   000003 6270 00    123  	eax7	3		scl format is 3 chars
    000070  aa   000000 6220 00    124  	eax2	0		x2 is index counter
    000071  aa  6 00022 3515 20    125  	epp1	pr6|stack_frame.next_sp,*
    000072                         126  	null			need a temp, this is cheap
                                   127  
    000072                         128  e_scl_loop:	null		algorithm courtesy pl1 operators
    000072                         129  	null			turns float bin into fixed (17,6)
    000072  aa  3 00000 4311 12    130  	fld	pr3|0,x2		pick up float bin
    000073  0a   000100 6040 00    131  	tmi	e_scl_neg_case	if result negative
                                   132  
    000074                         133  e_scl_pos_case:
    000074  aa   176000 4350 03    134  	ufa	=o176000,du	fixify by forcing exp to proper scale
    000075  aa   000002 0760 07    135  	adq	2,dl		1/2 at proper scale
    000076  aa   000002 7320 00    136  	qrs	2		wipe out fractional bits
    000077  0a   000105 7100 00    137  	tra	e_scl_common
                                   138  
    000100                         139  e_scl_neg_case:
    000100  aa   000000 5130 00    140  	fneg	0		perform operation on abs value
    000101  aa   176000 4350 03    141  	ufa	=o176000,du	see above
    000102  aa   000002 0760 07    142  	adq	2,dl
    000103  aa   000002 7320 00    143  	qrs	2
    000104  aa   000000 5330 00    144  	negl	0		re-negate
                                   145  
    000105                         146  e_scl_common:
    000105  aa  1 00000 7561 00    147  	stq	pr1|0		handy temp
    000106  aa  0 00100 1605 00    148  	mvt	(pr),(pr),fill(0)	translate it
    000107  aa   100000 320003     149  	desc6a	pr1|0(3),3
    000110  aa   500000 000003     150  	desc9a	pr5|0,3
    000111  0a   000157 0000 00    151  	arg	trans_table
                                   152  
    000112  aa   000001 1210 03    153  	sblx1	1,du		are we done
    000113  0a   000117 6000 00    154  	tze	do_short_return	yes
                                   155  
    000114  aa  3 00001 3535 00    156  	epp3	pr3|1		bump index ptr
    000115  aa  5 00000 5005 17    157  	a9bd	pr5|0,x7		and string ptr
    000116  0a   000072 7100 00    158  	tra	e_scl_loop
                                   159  
    000117                         160  do_short_return:
    000117  aa  7 00044 7101 20    161  	short_return
                                   162  "
    000120                         163  decode_setup:
    000120  aa  0 00006 3535 20    164  	epp3	ap|6,*		get ptr to array
                                   165  
    000121  aa  0 00004 7211 20    166  	lxl1	ap|4,*		get count
                                   167  
    000122  aa  0 00002 3715 20    168  	epp5 	ap|2,*		get string ptr
    000123  aa  5 00000 3715 20    169  	epp5	pr5|0,*
                                   170  
    000124  aa   000000 7100 10    171  	tra	0,0
                                   172  "
    000125  aa  3 00000 5215 17    173  decode:	s6bd	pr3|0,x7		adjust array ptr to proper offset
                                   174  
    000126  aa  3 00001 4501 00    175  d_loop:	stz	pr3|1			clear garbage in word
    000127  aa  0 00140 1605 40    176  	mvt	(pr,rl),(pr,rl),fill(0)	decode it		
    000130  aa   500000 000017     177  	desc9a	pr5|0,x7
    000131  aa   300001 020017     178  	desc6a	pr3|1,x7
    000132  0a   000157 0000 00    179  	arg	trans_table
                                   180  
    000133  aa   000001 1210 03    181  	sblx1	1,du		are we done
    000134  aa   000000 6000 10    182  	tze	0,0		done, return
                                   183  
    000135  aa  3 00001 3535 00    184  	epp3	pr3|1		bump array ptr
    000136  aa  5 00000 5005 17    185  	a9bd	pr5|0,x7		and char ptr
    000137  0a   000126 7100 00    186  	tra	d_loop
                                   187  "
    000140                         188  encode_setup:
    000140  aa  0 00002 3535 20    189  	epp3	ap|2,*		get ptr to array
                                   190  
    000141  aa  0 00004 7211 20    191  	lxl1	ap|4,*		get count
                                   192  
    000142  aa  0 00006 3715 20    193  	epp5	ap|6,*		get string ptr
    000143  aa  5 00000 3715 20    194  	epp5	pr5|0,*
                                   195  
    000144  aa   000000 7100 10    196  	tra	0,0
                                   197  "
    000145  aa  3 00000 5215 17    198  encode:	s6bd	pr3|0,x7		adjust array ptr to proper offset
                                   199  
    000146  aa  0 00140 1605 40    200  e_loop:	mvt	(pr,rl),(pr,rl),fill(0)	encode it
    000147  aa   300001 020017     201  	desc6a	pr3|1,x7
    000150  aa   500000 000017     202  	desc9a	pr5|0,x7
    000151  0a   000157 0000 00    203  	arg	trans_table
                                   204  
    000152  aa   000001 1210 03    205  	sblx1	1,du		are we done
    000153  aa   000000 6000 10    206  	tze	0,0		yes, return
                                   207  
    000154  aa  3 00001 3535 00    208  	epp3	pr3|1		bump array ptr
    000155  aa  5 00000 5005 17    209  	a9bd	pr5|0,x7		bump string ptr
    000156  0a   000146 7100 00    210  	tra	e_loop
                                   211  "
    000157                         212  trans_table:
    000157  aa   100101 102103     213  	oct	100101102103,104105106107,110111112113,114115116117
    000160  aa   104105 106107 
    000161  aa   110111 112113 
    000162  aa   114115 116117 
    000163  aa   120121 122123     214  	oct	120121122123,124125126127,130131132133,134135136137
    000164  aa   124125 126127 
    000165  aa   130131 132133 
    000166  aa   134135 136137 
    000167  aa   140141 142143     215  	oct	140141142143,144145146147,150151152153,154155156157
    000170  aa   144145 146147 
    000171  aa   150151 152153 
    000172  aa   154155 156157 
    000173  aa   160161 162163     216  	oct	160161162163,164165166167,170171172173,174175176177
    000174  aa   164165 166167 
    000175  aa   170171 172173 
    000176  aa   174175 176177 
    000177  aa   000001 002003     217  	oct	000001002003,004005006007,010011012013,014015016017
    000200  aa   004005 006007 
    000201  aa   010011 012013 
    000202  aa   014015 016017 
    000203  aa   020021 022023     218  	oct	020021022023,024025026027,030031032033,034035036037
    000204  aa   024025 026027 
    000205  aa   030031 032033 
    000206  aa   034035 036037 
    000207  aa   040041 042043     219  	oct	040041042043,044045046047,050051052053,054055056057
    000210  aa   044045 046047 
    000211  aa   050051 052053 
    000212  aa   054055 056057 
    000213  aa   060061 062063     220  	oct	060061062063,064065066067,070071072073,074075076077
    000214  aa   064065 066067 
    000215  aa   070071 072073 
    000216  aa   074075 076077 
                                   221  
                                   222  	end
ENTRY SEQUENCES
     
    000217  5a   000075 0000 00
    000220  aa  7 00046 2721 20
    000221  0a   000000 7100 00
    000222  5a   000067 0000 00
    000223  aa  7 00046 2721 20
    000224  0a   000004 7100 00
    000225  5a   000061 0000 00
    000226  aa  7 00046 2721 20
    000227  0a   000021 7100 00
    000230  5a   000053 0000 00
    000231  aa  7 00046 2721 20
    000232  0a   000025 7100 00
    000233  5a   000043 0000 00
    000234  aa  7 00046 2721 20
    000235  0a   000027 7100 00
    000236  5a   000035 0000 00
    000237  aa  7 00046 2721 20
    000240  0a   000052 7100 00
    000241  5a   000027 0000 00
    000242  aa  7 00046 2721 20
    000243  0a   000056 7100 00
    000244  5a   000021 0000 00
    000245  aa  7 00046 2721 20
    000246  0a   000062 7100 00
    000247  5a   000013 0000 00
    000250  aa  7 00046 2721 20
    000251  0a   000066 7100 00
LITERALS
     
    000252  aa   732414 336750 
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000253  5a   000003 000000 
    000254  5a   000112 600000 
    000255  aa   000000 000000 
    000256  55   000013 000002 
    000257  5a   000002 400003 
    000260  55   000006 000013 
    000261  aa  022 147 162 141
    000262  aa  160 150 151 143
    000263  aa  137 143 157 144
    000264  aa  145 137 165 164
    000265  aa  151 154 137 000
    000266  55   000021 000003 
    000267  0a   000250 500000 
    000270  55   000016 000003 
    000271  aa  012 145 156 143         encode_scl
    000272  aa  157 144 145 137
    000273  aa  163 143 154 000
    000274  55   000027 000013 
    000275  0a   000245 500000 
    000276  55   000024 000003 
    000277  aa  012 145 156 143         encode_uid
    000300  aa  157 144 145 137
    000301  aa  165 151 144 000
    000302  55   000035 000021 
    000303  0a   000242 500000 
    000304  55   000032 000003 
    000305  aa  012 145 156 143         encode_dpi
    000306  aa  157 144 145 137
    000307  aa  144 160 151 000
    000310  55   000043 000027 
    000311  0a   000237 500000 
    000312  55   000040 000003 
    000313  aa  012 145 156 143         encode_spi
    000314  aa  157 144 145 137
    000315  aa  163 160 151 000
    000316  55   000053 000035 
    000317  0a   000234 500000 
    000320  55   000046 000003 
    000321  aa  021 144 145 143         decode_scl_nozero
    000322  aa  157 144 145 137
    000323  aa  163 143 154 137
    000324  aa  156 157 172 145
    000325  aa  162 157 000 000
    000326  55   000061 000043 
    000327  0a   000231 500000 
    000330  55   000056 000003 
    000331  aa  012 144 145 143         decode_scl
    000332  aa  157 144 145 137
    000333  aa  163 143 154 000
    000334  55   000067 000053 
    000335  0a   000226 500000 
    000336  55   000064 000003 
    000337  aa  012 144 145 143         decode_uid
    000340  aa  157 144 145 137
    000341  aa  165 151 144 000
    000342  55   000075 000061 
    000343  0a   000223 500000 
    000344  55   000072 000003 
    000345  aa  012 144 145 143         decode_dpi
    000346  aa  157 144 145 137
    000347  aa  144 160 151 000
    000350  55   000103 000067 
    000351  0a   000220 500000 
    000352  55   000100 000003 
    000353  aa  012 144 145 143         decode_spi
    000354  aa  157 144 145 137
    000355  aa  163 160 151 000
    000356  55   000002 000075 
    000357  6a   000000 400002 
    000360  55   000106 000003 
    000361  aa  014 163 171 155         symbol_table
    000362  aa  142 157 154 137
    000363  aa  164 141 142 154
    000364  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000365  aa   000000 000015 
    000366  5a   000061 000000 
    000367  5a   000067 000000 
    000370  5a   000075 000000 
    000371  5a   000043 000000 
    000372  5a   000013 000000 
    000373  5a   000021 000000 
    000374  5a   000027 000000 
    000375  5a   000035 000000 
    000376  5a   000103 000000 
    000377  aa   000000 000000 
    000400  aa   000000 000000 
    000401  aa   000000 000000 
    000402  5a   000053 000000 

NO EXTERNAL NAMES

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000403  aa   000001 000000 
    000404  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    000405  aa   000000 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000253 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000010 
    000007  a2   000000 000000 
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000010 
    000004  aa   000000 117244 
    000005  aa   361023 525721 
    000006  aa   000000 131036 
    000007  aa   677215 561453 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000172 
    000020  aa   000000 000120 
    000021  aa   000144 000141 
    000022  aa   000163 000120 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   070056 061064 
    000030  aa   040115 141162 
    000031  aa   143150 040061 
    000032  aa   071070 071040 
    000033  aa   040040 040040 
    000034  aa   123143 150162 
    000035  aa   157164 150056 
    000036  aa   123171 163115 
    000037  aa   141151 156164 
    000040  aa   056155 040040 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   154151 163164 
    000045  aa   040163 171155 
    000046  aa   142157 154163 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040040 040040 
    000057  aa   040040 040040 
    000060  aa   040040 040040 
    000061  aa   040040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000002 
    000066  aa   000076 000046 
    000067  aa   310157 125042 
    000070  aa   000000 131036 
    000071  aa   677215 600000 
    000072  aa   000110 000036 
    000073  aa   305736 051524 
    000074  aa   000000 105272 
    000075  aa   317215 400000 
    000076  aa   076165 144144          >udd>sm>ds>w>ml>graphic_code_util_.alm
    000077  aa   076163 155076 
    000100  aa   144163 076167 
    000101  aa   076155 154076 
    000102  aa   147162 141160 
    000103  aa   150151 143137 
    000104  aa   143157 144145 
    000105  aa   137165 164151 
    000106  aa   154137 056141 
    000107  aa   154155 040040 
    000110  aa   076154 144144          >ldd>incl>stack_frame.incl.alm
    000111  aa   076151 156143 
    000112  aa   154076 163164 
    000113  aa   141143 153137 
    000114  aa   146162 141155 
    000115  aa   145056 151156 
    000116  aa   143154 056141 
    000117  aa   154155 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

          13    dd_neg_loop              graphic_code_util_:        43,   48.
         125    decode                   graphic_code_util_:        28,   38,   57,   76,  173.
           4    decode_dpi               graphic_code_util_:        17,   33.
          25    decode_scl               graphic_code_util_:        17,   62.
          30    decode_scl_common        graphic_code_util_:        64,   71.
          27    decode_scl_nozero        graphic_code_util_:        18,   68.
         120    decode_setup             graphic_code_util_:        26,   34,   55,   72,  163.
           0    decode_spi               graphic_code_util_:        17,   25.
          21    decode_uid               graphic_code_util_:        17,   54.
         117    do_short_return          graphic_code_util_:       154,  160.
          35    ds_float_loop            graphic_code_util_:        78,   91.
          46    ds_storit                graphic_code_util_:        84,   86,   88.
         126    d_loop                   graphic_code_util_:       175,  186.
         145    encode                   graphic_code_util_:       100,  108,  116,  198.
          56    encode_dpi               graphic_code_util_:        19,  105.
          66    encode_scl               graphic_code_util_:        19,  121.
         140    encode_setup             graphic_code_util_:        98,  106,  114,  122,  188.
          52    encode_spi               graphic_code_util_:        19,   97.
          62    encode_uid               graphic_code_util_:        19,  113.
         146    e_loop                   graphic_code_util_:       200,  210.
         105    e_scl_common             graphic_code_util_:       137,  146.
          72    e_scl_loop               graphic_code_util_:       128,  158.
         100    e_scl_neg_case           graphic_code_util_:       131,  139.
          74    e_scl_pos_case           graphic_code_util_:       133.
          32    stack_frame.arg_ptr      stack_frame:   16.
         100    stack_frame.condition_bit      stack_frame:   32.
          20    stack_frame.condition_word     stack_frame:    9.
        2000    stack_frame.crawl_out_bit      stack_frame:   28.
          26    stack_frame.entry_ptr    stack_frame:   13.
          20    stack_frame.flag_word    stack_frame:   24.
         400    stack_frame.link_trap_bit      stack_frame:   30.
          30    stack_frame.lp_ptr       stack_frame:   15.
       20000    stack_frame.main_proc_bit      stack_frame:   25.
          60    stack_frame.min_length   stack_frame:   23.
          22    stack_frame.next_sp      graphic_code_util_:       125,
                                         stack_frame:   10.
          36    stack_frame.on_unit_rel_ptrs   stack_frame:   19.
          30    stack_frame.operator_ptr       stack_frame:   14.
          37    stack_frame.operator_ret_ptr   stack_frame:   20.
          20    stack_frame.prev_sp      stack_frame:    8.
          40    stack_frame.regs         stack_frame:   22.
          24    stack_frame.return_ptr   stack_frame:   12.
       10000    stack_frame.run_unit_manager   stack_frame:   26.
        1000    stack_frame.signaller_bit      stack_frame:   29.
          22    stack_frame.signaller_word     stack_frame:   11.
        4000    stack_frame.signal_bit   stack_frame:   27.
          34    stack_frame.static_ptr   stack_frame:   17.
         200    stack_frame.support_bit  stack_frame:   31.
          35    stack_frame.support_ptr  stack_frame:   18.
          37    stack_frame.translator_id      stack_frame:   21.
         157    trans_table              graphic_code_util_:       151,  179,  203,  212.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
