	COMPILATION LISTING OF SEGMENT startup_parser_
	Compiled by: Multics PL/I Compiler, Release 29, of July 28, 1986
	Compiled at: Honeywell Bull, Phx. Az., Sys-M 
	Compiled on: 08/07/87  1504.9 mst Fri
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        6*        *                                                         *
        7*        *********************************************************** */
        8 
        9 /****^  HISTORY COMMENTS:
       10*  1) change(86-08-07,Smith), approve(87-07-15,MCR7580),
       11*     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
       12*     Created to parse through command line options.
       13*  2) change(86-09-19,Flegel), approve(87-07-15,MCR7580),
       14*     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
       15*     Support to accept up to 32 capabilities to be autoloaded (-start_up).
       16*  3) change(86-11-27,Flegel), approve(86-11-27,MCR7580),
       17*     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
       18*     Approved.
       19*  4) change(87-02-25,Flegel), approve(87-02-25,MCR7580),
       20*     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
       21*     Added the force and no_force arguments.
       22*  5) change(87-03-24,Flegel), approve(87-03-24,MCR7580),
       23*     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
       24*     Added -escape (-esc) and -network (-net) arguments.
       25*                                                   END HISTORY COMMENTS */
       26 
       27 /* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
       28 startup_parser_:
       29      proc (p_mowse_arg_list_ptr, p_arg_count, p_init_mowse_info_ptr,
       30 	p_string, p_code);
       31 
       32 /* : PROGRAM FUNCTION
       33*
       34*Parse command line arguements and fills out a structure containing
       35*information gathered from the command line.
       36**/
       37 
       38 /* NOTES
       39**/
       40 
       41 /* INPUT PARAMETERS */
       42 dcl p_mowse_arg_list_ptr   ptr;		    /* Pointer to command line arguement list */
       43 dcl p_arg_count	       fixed bin;		    /* Number of command line arguements */
       44 dcl p_init_mowse_info_ptr  ptr;		    /* Pointer to structure containing initialization information */
       45 
       46 
       47 
       48 /* OUTPUT PARAMETERS */
       49 dcl p_code	       fixed bin (35) parameter;  /* return code */
       50 dcl p_string	       char (*) var parameter;    /* return string for error message */
       51 
       52 /* MISC VARIABLES */
       53 dcl esc_index	       fixed bin (35);	    /* Octal conversion result */
       54 dcl startup_indx	       fixed bin;		    /* Next available slot in startup list */
       55 dcl system_free_area_ptr   ptr;
       56 dcl system_free_area       area based (system_free_area_ptr);
       57 dcl arg_str	       char (arg_len) based (arg_ptr);
       58 					    /* argument in command line */
       59 dcl arg_ptr	       ptr;		    /* Pointer to an arguement */
       60 dcl arg_len	       fixed bin (21);	    /* length of a command line arguement */
       61 dcl arg_num	       fixed bin;		    /* mowse arguement number */
       62 
       63 /* SYSTEM CALLS */
       64 dcl cv_oct_check_	       entry (char (*), fixed bin (35)) returns (fixed bin (35));
       65 dcl get_system_free_area_  entry () returns (ptr);
       66 dcl cu_$arg_ptr_rel	       entry (fixed bin, ptr, fixed bin (21),
       67 		       fixed bin (35), ptr);
       68 
       69 
       70 /* SYSTEM CALL SUPPORT */
       71 dcl ws_error_$invalid_escape_char fixed bin (35) ext static;
       72 dcl error_table_$badopt    fixed bin (35) ext static;
       73 dcl error_table_$noarg     fixed bin (35) ext static;
       74 
       75 
       76 /* BUILTINS */
       77 dcl null		       builtin;
       78 dcl substr	       builtin;
       79 
       80 /**/
       81 
       82 /* INITIALIZATION */
       83 	p_string = "";
       84 	startup_indx = 1;
       85 	p_code = 0;
       86 	system_free_area_ptr = get_system_free_area_ ();
       87 
       88 /* MAIN */
       89 /* : Allocate init_mowse_info structure */
       90 
       91 	allocate init_mowse_info in (system_free_area)
       92 	     set (p_init_mowse_info_ptr);
       93 	init_mowse_info_ptr = p_init_mowse_info_ptr;
       94 
       95 	init_mowse_info.version = MOWSE_VERSION_;
       96 	init_mowse_info.flags.trace_sw = "0"b;
       97 	init_mowse_info.flags.debug_sw = "0"b;
       98 	init_mowse_info.flags.io_switch_sw = "0"b;
       99 	init_mowse_info.flags.force_sw = "0"b;
      100 	init_mowse_info.flags.start_up_sw = "0"b;
      101 	init_mowse_info.flags.escape_sw = "0"b;
      102 	init_mowse_info.flags.network_sw = "0"b;
      103 	init_mowse_info.escape.chars (*) = "0"b;
      104 	init_mowse_info.trace = "";
      105 	init_mowse_info.debug = "";
      106 	init_mowse_info.io_switch = "";
      107 	init_mowse_info.startup (*) = "";
      108 
      109 	if p_mowse_arg_list_ptr = null then
      110 	     return;
      111 
      112 	if p_arg_count <= 0 then
      113 	     return;
      114 
      115 /* : Parse command line arguements and fill out strucure accordingly
      116*     Return with error code set if there was an error in the arguements */
      117 
      118 	arg_num = 1;
      119 	do while (arg_num <= p_arg_count);
      120 	     call cu_$arg_ptr_rel (arg_num, arg_ptr, arg_len, p_code,
      121 		p_mowse_arg_list_ptr);
      122 
      123 /* : - debug */
      124 
      125 	     if substr (arg_str, 1, arg_len) = "-debug" then do;
      126 		init_mowse_info.debug = "debug.mowse_io_";
      127 		init_mowse_info.flags.debug_sw = "1"b;
      128 
      129 		if arg_num < p_arg_count then do;
      130 		     call cu_$arg_ptr_rel ((arg_num + 1), arg_ptr,
      131 			arg_len, p_code, p_mowse_arg_list_ptr);
      132 
      133 		     if substr (arg_str, 1, 1) ^= "-" then do;
      134 			init_mowse_info.debug
      135 			     = substr (arg_str, 1, arg_len)
      136 			     || ".mowse_io_";
      137 			arg_num = arg_num + 1;
      138 		     end;
      139 		end;
      140 	     end;
      141 
      142 /* : - no_debug */
      143 
      144 	     else if substr (arg_str, 1, arg_len) = "-no_debug" then do;
      145 		init_mowse_info.flags.debug_sw = "0"b;
      146 		init_mowse_info.debug = "";
      147 	     end;
      148 
      149 /* : - escape */
      150 
      151 	     else if substr (arg_str, 1, arg_len) = "-escape"
      152 		| substr (arg_str, 1, arg_len) = "-esc"
      153 	     then do;
      154 		call cu_$arg_ptr_rel ((arg_num + 1), arg_ptr,
      155 		     arg_len, p_code, p_mowse_arg_list_ptr);
      156 		if p_code ^= 0 then
      157 		     return;
      158 		if arg_ptr = null then do;
      159 		     p_code = error_table_$noarg;
      160 		     return;
      161 		end;
      162 		if substr (arg_str, 1, 1) = "-" then do;
      163 		     p_code = error_table_$noarg;
      164 		     return;
      165 		end;
      166 
      167 		esc_index = cv_oct_check_ (arg_str, p_code);
      168 		if p_code ^= 0 then do;
      169 		     p_string = arg_str;
      170 		     return;
      171 		end;
      172 		if esc_index < 0 | esc_index > 255 then do;
      173 		     p_code = ws_error_$invalid_escape_char;
      174 		     p_string = arg_str;
      175 		     return;
      176 		end;
      177 
      178 		p_init_mowse_info_ptr
      179 		     -> init_mowse_info.escape.chars (esc_index) = "1"b;
      180 		p_init_mowse_info_ptr -> init_mowse_info.flags.escape_sw
      181 		     = "1"b;
      182 		arg_num = arg_num + 1;
      183 	     end;
      184 
      185 /* : - network */
      186 
      187 	     else if substr (arg_str, 1, arg_len) = "-network"
      188 		| substr (arg_str, 1, arg_len) = "-net"
      189 	     then do;
      190 		p_init_mowse_info_ptr -> init_mowse_info.flags.network_sw
      191 		     = "1"b;
      192 	     end;
      193 
      194 /* : - trace */
      195 
      196 	     else if substr (arg_str, 1, arg_len) = "-trace" then do;
      197 		init_mowse_info.trace = "trace.mowse_io_";
      198 		init_mowse_info.flags.trace_sw = "1"b;
      199 
      200 		if arg_num < p_arg_count then do;
      201 		     call cu_$arg_ptr_rel ((arg_num + 1), arg_ptr,
      202 			arg_len, p_code, p_mowse_arg_list_ptr);
      203 
      204 		     if substr (arg_str, 1, 1) ^= "-" then do;
      205 			p_init_mowse_info_ptr -> init_mowse_info.trace =
      206 			     substr (arg_str, 1, arg_len)
      207 			     || ".mowse_io_";
      208 			arg_num = arg_num + 1;
      209 		     end;
      210 		end;
      211 	     end;
      212 
      213 /* : - no_trace */
      214 
      215 	     else if substr (arg_str, 1, arg_len) = "-no_trace" then do;
      216 		init_mowse_info.flags.trace_sw = "0"b;
      217 		init_mowse_info.trace = "";
      218 	     end;
      219 
      220 /* : - io_switch */
      221 
      222 	     else if substr (arg_str, 1, arg_len) = "-io_switch"
      223 		| substr (arg_str, 1, arg_len) = "-iosw" then do;
      224 
      225 		arg_num = arg_num + 1;
      226 		call cu_$arg_ptr_rel (arg_num, arg_ptr, arg_len,
      227 		     p_code, p_mowse_arg_list_ptr);
      228 
      229 		if arg_ptr = null then do;
      230 		     p_code = error_table_$noarg;
      231 		     p_string = "";
      232 		     return;
      233 		end;
      234 		else if substr (arg_str, 1, 1) = "-" then do;
      235 		     p_code = error_table_$noarg;
      236 		     p_string = "";
      237 		     return;
      238 		end;
      239 
      240 		init_mowse_info.flags.io_switch_sw = "1"b;
      241 		init_mowse_info.io_switch = substr (arg_str, 1, arg_len);
      242 	     end;
      243 
      244 /* : - start_up */
      245 
      246 	     else if substr (arg_str, 1, arg_len) = "-start_up"
      247 		| substr (arg_str, 1, arg_len) = "-su" then do;
      248 
      249 		arg_num = arg_num + 1;
      250 		call cu_$arg_ptr_rel (arg_num, arg_ptr, arg_len,
      251 		     p_code, p_mowse_arg_list_ptr);
      252 
      253 		if arg_ptr = null then do;
      254 		     p_code = error_table_$noarg;
      255 		     p_string = "";
      256 		     return;
      257 		end;
      258 
      259 		if substr (arg_str, 1, 1) = "-" then do;
      260 		     p_code = error_table_$noarg;
      261 		     p_string = "";
      262 		     return;
      263 		end;
      264 
      265 		init_mowse_info.flags.start_up_sw = "1"b;
      266 		if startup_indx
      267 		     <= MAXIMUM_CAT_ENTRY - MINIMUM_CAT_ENTRY + 1
      268 		then do;
      269 		     init_mowse_info.startup (startup_indx) =
      270 			substr (arg_str, 1, arg_len);
      271 		     startup_indx = startup_indx + 1;
      272 		end;
      273 	     end;
      274 
      275 /* : - no_start_up */
      276 
      277 	     else if substr (arg_str, 1, arg_len) = "-no_start_up"
      278 		| substr (arg_str, 1, arg_len) = "-nsu"
      279 	     then do;
      280 		init_mowse_info.flags.start_up_sw = "0"b;
      281 		init_mowse_info.startup (1) = "";
      282 	     end;
      283 
      284 /* : - force */
      285 
      286 	     else if substr (arg_str, 1, arg_len) = "-force"
      287 		| substr (arg_str, 1, arg_len) = "-fc"
      288 	     then do;
      289 		init_mowse_info.flags.force_sw = "1"b;
      290 	     end;
      291 
      292 /* : -no_force */
      293 
      294 	     else if substr (arg_str, 1, arg_len) = "-no_force"
      295 		| substr (arg_str, 1, arg_len) = "-nfc"
      296 	     then do;
      297 		init_mowse_info.flags.force_sw = "0"b;
      298 	     end;
      299 
      300 /* : - Default */
      301 
      302 	     else do;
      303 		p_code = error_table_$badopt;
      304 		p_string = substr (arg_str, 1, arg_len);
      305 		return;
      306 	     end;
      307 
      308 	     arg_num = arg_num + 1;
      309 	end;
      310 
      311 
      312 /* INCLUDE FILES */
  1     1 /*  BEGIN INCLUDE FILE:	mowse.incl.pl1			  *  *  *  *  *  *  *  *  *  *  *  *  */
  1     2 
  1     3 /****^  HISTORY COMMENTS:
  1     4*  1) change(86-09-17,Flegel), approve(86-12-16,MCR7580),
  1     5*     audit(86-12-15,Gilcrease), install(87-01-06,MR12.0-1255):
  1     6*     Created.
  1     7*  2) change(86-10-03,Flegel), approve(86-12-16,MCR7580),
  1     8*     audit(86-12-15,Gilcrease), install(87-01-06,MR12.0-1255):
  1     9*     Combined mowse_minor_caps.incl.pl1 and
  1    10*     mowse.incl.pl1 so that programmer only needs include mowse.incl.pl1
  1    11*  3) change(86-11-27,Flegel), approve(86-11-27,MCR7580),
  1    12*     audit(86-12-15,Gilcrease), install(87-01-06,MR12.0-1255):
  1    13*     Approved.
  1    14*  4) change(87-07-31,Flegel), approve(87-07-31,MCR7580),
  1    15*     audit(87-07-31,RBarstad), install(87-08-07,MR12.1-1075):
  1    16*     Changes to support async call channels.
  1    17*                                                   END HISTORY COMMENTS */
  1    18 
  1    19 /* Name of MOWSE temp seg for data */
  1    20 
  1    21 /* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
  1    22 dcl temp_seg_name	       char (6) init ("MOWSE_");
  1    23 
  1    24 /* Version number */
  1    25 
  1    26 dcl MOWSE_VERSION_	       char (8) int static options (constant) init ("version1");
  1    27 
  1    28 /* System identification */
  1    29 
  1    30 dcl LOCAL_SYSTEM	       fixed bin int static options (constant) init (32);
  1    31 dcl REMOTE_SYSTEM	       fixed bin int static options (constant) init (33);
  1    32 
  1    33 /* Status request return codes */
  1    34 
  1    35 dcl STATUS_SUCCESS	       fixed bin (8) int static options (constant)
  1    36 		       init (32);
  1    37 dcl STATUS_FAILED	       fixed bin (8) int static options (constant)
  1    38 		       init (33);
  1    39 
  1    40 /* Input/output capability buffer size limits */
  1    41 
  1    42 dcl MINIMUM_BUFFER_SIZE    fixed bin int static options (constant) init (128);
  1    43 dcl MAXIMUM_BUFFER_SIZE    fixed bin int static options (constant) init (65536);
  1    44 dcl MAXIMUM_BG_SIZE	       fixed bin int static options (constant) init (512);
  1    45 
  1    46 /* Packet size (communication) constants */
  1    47 
  1    48 dcl PACKET_SIZE	       fixed bin int static options (constant) init (124);
  1    49 dcl MAXIMUM_PACKET_SIZE    fixed bin int static options (constant) init (118);
  1    50 
  1    51 /* Query message constants */
  1    52 
  1    53 dcl SEND_QUERY	       fixed bin int static options (constant) init (128);
  1    54 dcl ACCEPT	       fixed bin int static options (constant) init (32);
  1    55 dcl REJECT	       fixed bin int static options (constant) init (33);
  1    56 
  1    57 /* Trace information constants */
  1    58 
  1    59 dcl RECEIVE	       fixed bin int static options (constant) init (1);
  1    60 dcl SEND		       fixed bin int static options (constant) init (0);
  1    61 
  1    62 /* Limits on dedicated minor capabilities */
  1    63 
  1    64 dcl MINIMUM_SYSTEM_MINOR   fixed bin int static options (constant) init (32);
  1    65 dcl MAXIMUM_SYSTEM_MINOR   fixed bin int static options (constant) init (63);
  1    66 dcl MINIMUM_USER_MINOR     fixed bin int static options (constant) init (64);
  1    67 dcl MAXIMUM_USER_MINOR     fixed bin int static options (constant) init (127);
  1    68 
  1    69 /* Dedicated Minor Capabilities */
  1    70 
  1    71 dcl LAST		       fixed bin int static options (constant) init (0);
  1    72 dcl EXECUTE_COMMAND_REPLY  fixed bin int static options (constant) init (32);
  1    73 dcl EXECUTE_CAPABILITY_REPLY
  1    74 		       fixed bin int static options (constant) init (33);
  1    75 dcl FAIL_CAPABILITY	       fixed bin int static options (constant) init (33);
  1    76 dcl INTERNAL	       fixed bin int static options (constant) init (32);
  1    77 dcl EXECUTE_COMMAND	       fixed bin int static options (constant) init (34);
  1    78 dcl ADD_TO_REMOTE_CAT      fixed bin int static options (constant) init (35);
  1    79 dcl DELETE_FROM_REMOTE_CAT fixed bin int static options (constant) init (36);
  1    80 dcl SUSPEND_APPLICATION    fixed bin int static options (constant) init (37);
  1    81 dcl RESUME_APPLICATION     fixed bin int static options (constant) init (38);
  1    82 dcl TERMINATE_APPLICATION  fixed bin int static options (constant) init (39);
  1    83 dcl RESET_APPLICATION      fixed bin int static options (constant) init (40);
  1    84 dcl RESET_REPLY	       fixed bin int static options (constant) init (41);
  1    85 dcl WAKE_UP	       fixed bin int static options (constant) init (42);
  1    86 dcl STATUS	       fixed bin int static options (constant) init (43);
  1    87 dcl OVERFLOWED_BUFFER      fixed bin int static options (constant) init (44);
  1    88 dcl SYSTEM_ERROR	       fixed bin int static options (constant) init (45);
  1    89 dcl QUERY_REPLY	       fixed bin int static options (constant) init (46);
  1    90 dcl RESPONSE_CONNECT       fixed bin int static options (constant) init (47);
  1    91 dcl RESPONSE_DISCONNECT    fixed bin int static options (constant) init (48);
  1    92 dcl REQUEST_CONNECT	       fixed bin int static options (constant) init (49);
  1    93 dcl REQUEST_DISCONNECT     fixed bin int static options (constant) init (50);
  1    94 dcl CONTINUE	       fixed bin int static options (constant) init (51);
  1    95 dcl MORE		       fixed bin int static options (constant) init (52);
  1    96 dcl SET_SLEEP_FLAG	       fixed bin int static options (constant) init (53);
  1    97 dcl RESET_SLEEP_FLAG       fixed bin int static options (constant) init (54);
  1    98 dcl SET_SUSPEND	       fixed bin int static options (constant) init (55);
  1    99 dcl RESET_SUSPEND	       fixed bin int static options (constant) init (56);
  1   100 dcl STATUS_REPLY	       fixed bin int static options (constant) init (57);
  1   101 
  1   102 /* Foreground */
  1   103 
  1   104 dcl FG_CONTROL_MESSAGE     fixed bin int static options (constant) init (33);
  1   105 dcl FG_BREAK	       fixed bin int static options (constant) init (34);
  1   106 dcl FG_TERMINAL_DATA       fixed bin int static options (constant) init (35);
  1   107 dcl FG_MORE_DATA	       fixed bin int static options (constant) init (36);
  1   108 dcl PUT_TO_BACKGROUND_BUFFER
  1   109 		       fixed bin int static options (constant) init (37);
  1   110 dcl PUT_TO_QUERY_MESSAGE_BUFFER
  1   111 		       fixed bin int static options (constant) init (38);
  1   112 
  1   113 /*  END INCLUDE FILE:	mowse.incl.pl1			  *  *  *  *  *  *  *  *  *  *  *  *  */
      313 
  2     1 /*  BEGIN INCLUDE FILE:	mowse_info.incl.pl1			  *  *  *  *  *  *  *  *  *  *  *  *  */
  2     2 
  2     3 /****^  HISTORY COMMENTS:
  2     4*  1) change(86-07-19,Smith), approve(87-07-15,MCR7580),
  2     5*     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
  2     6*     Created to define MOWSE information to be
  2     7*     placed into a temp segment.
  2     8*  2) change(86-11-27,Flegel), approve(86-11-27,MCR7580),
  2     9*     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
  2    10*     Approved.
  2    11*  3) change(87-02-25,Flegel), approve(87-02-25,MCR7580),
  2    12*     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
  2    13*     Added bit switches to the init_mowse_info structure as well as the force
  2    14*     flag.
  2    15*  4) change(87-03-24,Flegel), approve(87-03-24,MCR7580),
  2    16*     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
  2    17*     Added open_struc for passing EOP and escape char info from attach_mowse
  2    18*     to mowse_io_.
  2    19*                                                   END HISTORY COMMENTS */
  2    20 
  2    21 /* CAT index limits */
  2    22 
  2    23 /* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
  2    24 dcl MINIMUM_CAT_ENTRY      fixed bin int static options (constant) init (33);
  2    25 dcl MAXIMUM_CAT_ENTRY      fixed bin int static options (constant) init (64);
  2    26 
  2    27 dcl CAPABILITY_NAME_LENGTH fixed bin int static options (constant) init (32);
  2    28 
  2    29 /* Mowse information structure */
  2    30 
  2    31 dcl 01 mowse_info	       based aligned,
  2    32        02 version	       char (8),
  2    33        02 local_cat	       dimension (33:64),	    /* Multics CAT table */
  2    34 	03 flags,
  2    35 	   04 reset      bit (1) unal,	    /* Reset in progress */
  2    36 	   04 suspended  bit (1) unal,	    /* Suspended applciation */
  2    37 	   04 status     bit (1) unal,	    /* Status pending */
  2    38 	   04 mbz1       bit (33) unal,
  2    39 	03 sleep_time    fixed bin,		    /* Time application is sleeping */
  2    40 	03 mcb_ptr       ptr,		    /* Capability MCB */
  2    41        02 remote_cat       dimension (33:64),	    /* PC CAT table */
  2    42 	03 major_capability
  2    43 		       fixed bin,		    /* Capability number */
  2    44 	03 capability_name char (32),		    /* Name of capability */
  2    45 	03 flags,
  2    46 	   04 reset      bit (1) unal,	    /* Reset in progress */
  2    47 	   04 suspended  bit (1) unal,	    /* Suspended capability */
  2    48 	   04 sleep_time bit (1) unal,	    /* Application sleeping */
  2    49 	   04 mbz2       bit (33) unal,
  2    50        02 message_manager_info,		    /* Info for processing messages */
  2    51 	03 head_list_ptr ptr,		    /* Head of message list */
  2    52 	03 tail_list_ptr ptr,		    /* Tail of message list */
  2    53 	03 pending_messages
  2    54 		       fixed bin,		    /* Number of pending messages */
  2    55        02 mowse_flags,
  2    56 	03 trace	       bit (1) unal,	    /* Message tracing facility active */
  2    57 	03 debug	       bit (1) unal,	    /* Debugging packets facility active */
  2    58 	03 error_handled bit (1) unal,	    /* In mowse_error_handler procedure */
  2    59 	03 mbz1	       bit (33) unal,
  2    60 	03 trace_file_iocb ptr,		    /* Trace file iocb */
  2    61 	03 debug_file_iocb ptr,		    /* Debug file iocb */
  2    62        02 init_mowse_info_ptr
  2    63 		       ptr;		    /* Initialization information */
  2    64 
  2    65 /* MOWSE initialization information */
  2    66 
  2    67 dcl init_mowse_info_ptr    ptr;
  2    68 dcl 01 init_mowse_info     based (init_mowse_info_ptr),
  2    69        02 version	       char (8),
  2    70        02 flags,				    /* Bit switches */
  2    71 	03 trace_sw      bit (1) unal,
  2    72 	03 debug_sw      bit (1) unal,
  2    73 	03 io_switch_sw  bit (1) unal,
  2    74 	03 force_sw      bit (1) unal,
  2    75 	03 start_up_sw   bit (1) unal,
  2    76 	03 escape_sw     bit (1) unal,
  2    77 	03 network_sw    bit (1) unal,
  2    78 	03 pad	       bit (29) unal,
  2    79        02 escape,
  2    80 	03 chars	       (0:255) bit (1) unal,	    /* Character escapes */
  2    81 	03 pad	       bit (32) unal,
  2    82        02 trace	       char (512) var,	    /* Trace file name */
  2    83        02 debug	       char (512) var,	    /* Debug file name */
  2    84        02 io_switch	       char (512) var,	    /* Io switch name of mowse_io_ attachment */
  2    85        02 startup	       (MAXIMUM_CAT_ENTRY - MINIMUM_CAT_ENTRY + 1)
  2    86 		       char (168) var;	    /* Capability to be autoloaded */
  2    87 
  2    88 /* Open description structure (this is padded to character bounds as it
  2    89*   is a character overlay structure - passed as a character string) */
  2    90 
  2    91 dcl open_struc_ptr	       ptr;
  2    92 dcl 01 open_struc	       based (open_struc_ptr),
  2    93        02 flags,
  2    94 	03 network_sw    bit (1) unal,
  2    95 	03 escape_sw     bit (1) unal,
  2    96 	03 pad	       bit (7) unal,
  2    97        02 escape,
  2    98 	03 switches      (0:255) bit (1) unal,
  2    99 	03 pad	       bit (32) unal,
  2   100        02 mbz	       bit (16) unal;
  2   101 
  2   102 /*  END INCLUDE FILE:	mowse_info.incl.pl1			  *  *  *  *  *  *  *  *  *  *  *  *  */
      314 
      315 
      316 /* : END */
      317      end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    08/07/87  1453.4  startup_parser_.pl1               >special_ldd>install>MR12.1-1075>startup_parser_.pl1
313          1    08/07/87  1445.8  mowse.incl.pl1                    >special_ldd>install>MR12.1-1075>mowse.incl.pl1
314          2    08/07/87  1445.8  mowse_info.incl.pl1               >special_ldd>install>MR12.1-1075>mowse_info.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
MAXIMUM_CAT_ENTRY                      constant        fixed bin(17,0)          initial dcl 2-25 ref 91 107 266
MINIMUM_CAT_ENTRY                      constant        fixed bin(17,0)          initial dcl 2-24 ref 91 107 266
MOWSE_VERSION_                  000000 constant        char(8)                  initial unaligned dcl 1-26 ref 95
arg_len                         000106 automatic       fixed bin(21,0)          dcl 60 set ref 120* 125 125 130* 133 134 134 144 144
                                                                                  151 151 151 151 154* 162 167 167 169 174 187 187
                                                                                  187 187 196 196 201* 204 205 205 215 215 222 222
                                                                                  222 222 226* 234 241 241 246 246 246 246 250* 259
                                                                                  269 269 277 277 277 277 286 286 286 286 294 294
                                                                                  294 294 304 304
arg_num                         000107 automatic       fixed bin(17,0)          dcl 61 set ref 118* 119 120* 129 130 137* 137 154
                                                                                  182* 182 200 201 208* 208 225* 225 226* 249* 249
                                                                                  250* 308* 308
arg_ptr                         000104 automatic       pointer                  dcl 59 set ref 120* 125 130* 133 134 144 151 151
                                                                                  154* 158 162 167 169 174 187 187 196 201* 204 205
                                                                                  215 222 222 226* 229 234 241 246 246 250* 253 259
                                                                                  269 277 277 286 286 294 294 304
arg_str                                based           char                     unaligned dcl 57 set ref 125 133 134 144 151 151 162
                                                                                  167* 169 174 187 187 196 204 205 215 222 222 234
                                                                                  241 246 246 259 269 277 277 286 286 294 294 304
chars                     3            based           bit(1)                   array level 3 packed unaligned dcl 2-68 set ref 103*
                                                                                  178*
cu_$arg_ptr_rel                 000014 constant        entry                    external dcl 66 ref 120 130 154 201 226 250
cv_oct_check_                   000010 constant        entry                    external dcl 64 ref 167
debug                   214            based           varying char(512)        level 2 dcl 2-68 set ref 105* 126* 134* 146*
debug_sw                  2(01)        based           bit(1)                   level 3 packed unaligned dcl 2-68 set ref 97* 127*
                                                                                  145*
error_table_$badopt             000020 external static fixed bin(35,0)          dcl 72 ref 303
error_table_$noarg              000022 external static fixed bin(35,0)          dcl 73 ref 159 163 230 235 254 260
esc_index                       000100 automatic       fixed bin(35,0)          dcl 53 set ref 167* 172 172 178
escape                    3            based           structure                level 2 packed unaligned dcl 2-68
escape_sw                 2(05)        based           bit(1)                   level 3 packed unaligned dcl 2-68 set ref 101* 180*
flags                     2            based           structure                level 2 packed unaligned dcl 2-68
force_sw                  2(03)        based           bit(1)                   level 3 packed unaligned dcl 2-68 set ref 99* 289*
                                                                                  297*
get_system_free_area_           000012 constant        entry                    external dcl 65 ref 86
init_mowse_info                        based           structure                level 1 unaligned dcl 2-68 set ref 91
init_mowse_info_ptr             000112 automatic       pointer                  dcl 2-67 set ref 93* 95 96 97 98 99 100 101 102 103
                                                                                  104 105 106 107 126 127 134 145 146 197 198 216
                                                                                  217 240 241 265 269 280 281 289 297
io_switch               415            based           varying char(512)        level 2 dcl 2-68 set ref 106* 241*
io_switch_sw              2(02)        based           bit(1)                   level 3 packed unaligned dcl 2-68 set ref 98* 240*
network_sw                2(06)        based           bit(1)                   level 3 packed unaligned dcl 2-68 set ref 102* 190*
null                                                   builtin function         dcl 77 ref 109 158 229 253
p_arg_count                            parameter       fixed bin(17,0)          dcl 43 ref 28 112 119 129 200
p_code                                 parameter       fixed bin(35,0)          dcl 49 set ref 28 85* 120* 130* 154* 156 159* 163*
                                                                                  167* 168 173* 201* 226* 230* 235* 250* 254* 260*
                                                                                  303*
p_init_mowse_info_ptr                  parameter       pointer                  dcl 44 set ref 28 91* 93 178 180 190 205
p_mowse_arg_list_ptr                   parameter       pointer                  dcl 42 set ref 28 109 120* 130* 154* 201* 226* 250*
p_string                               parameter       varying char             dcl 50 set ref 28 83* 169* 174* 231* 236* 255* 261*
                                                                                  304*
start_up_sw               2(04)        based           bit(1)                   level 3 packed unaligned dcl 2-68 set ref 100* 265*
                                                                                  280*
startup                 616            based           varying char(168)        array level 2 dcl 2-68 set ref 107* 269* 281*
startup_indx                    000101 automatic       fixed bin(17,0)          dcl 54 set ref 84* 266 269 271* 271
substr                                                 builtin function         dcl 78 ref 125 133 134 144 151 151 162 187 187 196
                                                                                  204 205 215 222 222 234 241 246 246 259 269 277
                                                                                  277 286 286 294 294 304
system_free_area                       based           area(1024)               dcl 56 ref 91
system_free_area_ptr            000102 automatic       pointer                  dcl 55 set ref 86* 91
temp_seg_name                   000110 automatic       char(6)                  initial unaligned dcl 1-22 set ref 1-22*
trace                    13            based           varying char(512)        level 2 dcl 2-68 set ref 104* 197* 205* 217*
trace_sw                  2            based           bit(1)                   level 3 packed unaligned dcl 2-68 set ref 96* 198*
                                                                                  216*
version                                based           char(8)                  level 2 packed unaligned dcl 2-68 set ref 95*
ws_error_$invalid_escape_char   000016 external static fixed bin(35,0)          dcl 71 ref 173

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ACCEPT                                 internal static fixed bin(17,0)          initial dcl 1-54
ADD_TO_REMOTE_CAT                      internal static fixed bin(17,0)          initial dcl 1-78
CAPABILITY_NAME_LENGTH                 internal static fixed bin(17,0)          initial dcl 2-27
CONTINUE                               internal static fixed bin(17,0)          initial dcl 1-94
DELETE_FROM_REMOTE_CAT                 internal static fixed bin(17,0)          initial dcl 1-79
EXECUTE_CAPABILITY_REPLY               internal static fixed bin(17,0)          initial dcl 1-73
EXECUTE_COMMAND                        internal static fixed bin(17,0)          initial dcl 1-77
EXECUTE_COMMAND_REPLY                  internal static fixed bin(17,0)          initial dcl 1-72
FAIL_CAPABILITY                        internal static fixed bin(17,0)          initial dcl 1-75
FG_BREAK                               internal static fixed bin(17,0)          initial dcl 1-105
FG_CONTROL_MESSAGE                     internal static fixed bin(17,0)          initial dcl 1-104
FG_MORE_DATA                           internal static fixed bin(17,0)          initial dcl 1-107
FG_TERMINAL_DATA                       internal static fixed bin(17,0)          initial dcl 1-106
INTERNAL                               internal static fixed bin(17,0)          initial dcl 1-76
LAST                                   internal static fixed bin(17,0)          initial dcl 1-71
LOCAL_SYSTEM                           internal static fixed bin(17,0)          initial dcl 1-30
MAXIMUM_BG_SIZE                        internal static fixed bin(17,0)          initial dcl 1-44
MAXIMUM_BUFFER_SIZE                    internal static fixed bin(17,0)          initial dcl 1-43
MAXIMUM_PACKET_SIZE                    internal static fixed bin(17,0)          initial dcl 1-49
MAXIMUM_SYSTEM_MINOR                   internal static fixed bin(17,0)          initial dcl 1-65
MAXIMUM_USER_MINOR                     internal static fixed bin(17,0)          initial dcl 1-67
MINIMUM_BUFFER_SIZE                    internal static fixed bin(17,0)          initial dcl 1-42
MINIMUM_SYSTEM_MINOR                   internal static fixed bin(17,0)          initial dcl 1-64
MINIMUM_USER_MINOR                     internal static fixed bin(17,0)          initial dcl 1-66
MORE                                   internal static fixed bin(17,0)          initial dcl 1-95
OVERFLOWED_BUFFER                      internal static fixed bin(17,0)          initial dcl 1-87
PACKET_SIZE                            internal static fixed bin(17,0)          initial dcl 1-48
PUT_TO_BACKGROUND_BUFFER               internal static fixed bin(17,0)          initial dcl 1-108
PUT_TO_QUERY_MESSAGE_BUFFER            internal static fixed bin(17,0)          initial dcl 1-110
QUERY_REPLY                            internal static fixed bin(17,0)          initial dcl 1-89
RECEIVE                                internal static fixed bin(17,0)          initial dcl 1-59
REJECT                                 internal static fixed bin(17,0)          initial dcl 1-55
REMOTE_SYSTEM                          internal static fixed bin(17,0)          initial dcl 1-31
REQUEST_CONNECT                        internal static fixed bin(17,0)          initial dcl 1-92
REQUEST_DISCONNECT                     internal static fixed bin(17,0)          initial dcl 1-93
RESET_APPLICATION                      internal static fixed bin(17,0)          initial dcl 1-83
RESET_REPLY                            internal static fixed bin(17,0)          initial dcl 1-84
RESET_SLEEP_FLAG                       internal static fixed bin(17,0)          initial dcl 1-97
RESET_SUSPEND                          internal static fixed bin(17,0)          initial dcl 1-99
RESPONSE_CONNECT                       internal static fixed bin(17,0)          initial dcl 1-90
RESPONSE_DISCONNECT                    internal static fixed bin(17,0)          initial dcl 1-91
RESUME_APPLICATION                     internal static fixed bin(17,0)          initial dcl 1-81
SEND                                   internal static fixed bin(17,0)          initial dcl 1-60
SEND_QUERY                             internal static fixed bin(17,0)          initial dcl 1-53
SET_SLEEP_FLAG                         internal static fixed bin(17,0)          initial dcl 1-96
SET_SUSPEND                            internal static fixed bin(17,0)          initial dcl 1-98
STATUS                                 internal static fixed bin(17,0)          initial dcl 1-86
STATUS_FAILED                          internal static fixed bin(8,0)           initial dcl 1-37
STATUS_REPLY                           internal static fixed bin(17,0)          initial dcl 1-100
STATUS_SUCCESS                         internal static fixed bin(8,0)           initial dcl 1-35
SUSPEND_APPLICATION                    internal static fixed bin(17,0)          initial dcl 1-80
SYSTEM_ERROR                           internal static fixed bin(17,0)          initial dcl 1-88
TERMINATE_APPLICATION                  internal static fixed bin(17,0)          initial dcl 1-82
WAKE_UP                                internal static fixed bin(17,0)          initial dcl 1-85
mowse_info                             based           structure                level 1 dcl 2-31
open_struc                             based           structure                level 1 packed unaligned dcl 2-92
open_struc_ptr                         automatic       pointer                  dcl 2-91

NAME DECLARED BY EXPLICIT CONTEXT.
startup_parser_                 000076 constant        entry                    external dcl 28

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1260        1304    1152        1270
Length      1532    1152        24         211     105           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
startup_parser_                     110 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
startup_parser_          000100 esc_index                   startup_parser_
                         000101 startup_indx                startup_parser_
                         000102 system_free_area_ptr        startup_parser_
                         000104 arg_ptr                     startup_parser_
                         000106 arg_len                     startup_parser_
                         000107 arg_num                     startup_parser_
                         000110 temp_seg_name               startup_parser_
                         000112 init_mowse_info_ptr         startup_parser_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_char_temp     call_ext_out_desc   call_ext_out        return_mac          shorten_stack       ext_entry_desc
op_alloc_

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
cu_$arg_ptr_rel               cv_oct_check_                 get_system_free_area_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$badopt           error_table_$noarg            ws_error_$invalid_escape_char




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     28 000071    1   22 000111        83 000113        84 000116        85 000120        86 000121        91 000127
     93 000140        95 000141        96 000144        97 000146        98 000150        99 000152       100 000154
    101 000156       102 000160       103 000162       104 000175       105 000176       106 000177       107 000200
    109 000212       112 000217       118 000221       119 000223       120 000230       125 000247       126 000255
    127 000263       129 000265       130 000271       133 000312       134 000317       137 000341       140 000343
    144 000344       145 000350       146 000353       147 000354       151 000355       154 000365       156 000410
    158 000413       159 000417       160 000422       162 000423       163 000430       164 000433       167 000434
    168 000457       169 000462       170 000474       172 000475       173 000501       174 000504       175 000516
    178 000517       180 000524       182 000526       183 000527       187 000530       190 000540       192 000545
    196 000546       197 000552       198 000560       200 000562       201 000566       204 000607       205 000614
    208 000640       211 000642       215 000643       216 000647       217 000652       218 000653       222 000654
    225 000664       226 000665       229 000705       230 000711       231 000715       232 000717       234 000720
    235 000725       236 000731       237 000733       240 000734       241 000737       242 000747       246 000750
    249 000760       250 000761       253 001001       254 001005       255 001011       256 001013       259 001014
    260 001021       261 001025       262 001027       265 001030       266 001033       269 001036       271 001052
    273 001053       277 001054       280 001064       281 001067       282 001070       286 001071       289 001101
    290 001104       294 001105       297 001115       298 001120       303 001121       304 001125       305 001136
    308 001137       309 001140       317 001141


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
