	COMPILATION LISTING OF SEGMENT linus_assign_data
	Compiled by: Multics PL/I Compiler, Release 28b, of April 11, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 09/16/83  1744.6 mst Fri
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   *                                                         *
        4*   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        5*   *                                                         *
        6*   *                                                         *
        7*   *********************************************************** */
        8 
        9 /* ******************************************************
       10*   *                                                    *
       11*   *                                                    *
       12*   * Copyright (c) 1972 by Massachusetts Institute of   *
       13*   * Technology and Honeywell Information Systems, Inc. *
       14*   *                                                    *
       15*   *                                                    *
       16*   ****************************************************** */
       17 
       18 linus_assign_data:
       19      proc (desc, type, length);
       20 
       21 /* DESCRIPTION:
       22*
       23*   This procedure returns the assign_ type code and length, given a descriptor.
       24*
       25*
       26*
       27*   HISTORY:
       28*
       29*   77-07-01 J. A. Weeldreyer: Initially written.
       30*
       31*   80-01-07  Rickie  E.  Brinegar: Modified to use mdbm_util_$string_data_class
       32*   to determine which algorithm to use for the descriptor length.
       33*
       34*   80-06-24  Jim  Gray  : Modified to correctly extract negative scale factors
       35*   from the descriptor.
       36*
       37**/
       38 
  1     1 /* BEGIN mdbm_descriptor.incl.pl1 -- jaw 5/31/78 */
  1     2 /* modified by Jim Gray - - Nov. 1979, to change type from fixed bin(5) to
  1     3*   unsigned fixed bin(6), so new packed decimal data types could be handled.
  1     4*   also the duplicate mrds_descriptor.incl.pl1 was eliminated. */
  1     5 
  1     6 dcl 1 descriptor based (desc_ptr),			/* map of Multics descriptor */
  1     7     2 version bit (1) unal,				/* DBM handles vers. 1 only */
  1     8     2 type unsigned fixed bin (6) unal,			/* data type */
  1     9     2 packed bit (1) unal,				/* on if data item is packed */
  1    10     2 number_dims bit (4) unal,			/* dimensions */
  1    11     2 size,					/* size for string data */
  1    12       3 scale bit (12) unal,				/* scale for num. data */
  1    13       3 precision bit (12) unal,			/* prec. for num. data */
  1    14     2 array_info (num_dims),
  1    15       3 lower_bound fixed bin (35),			/* lower bound of dimension */
  1    16       3 upper_bound fixed bin (35),			/* upper bound of dimension */
  1    17       3 multiplier fixed bin (35);			/*  element separation */
  1    18 
  1    19 dcl  desc_ptr ptr;
  1    20 dcl  num_dims fixed bin init (0) ;			/* more useful form of number_dims */
  1    21 
  1    22 /* END mdbm_descriptor.incl.pl1 */
  1    23 
  1    24 
       39 
       40 
       41 	dcl     (
       42 	        a_len_ptr		 init (null),
       43 	        fbl_ptr		 init (null)
       44 	        )			 ptr;
       45 
       46 	dcl     desc		 bit (36);
       47 
       48 	dcl     type		 fixed bin;
       49 
       50 	dcl     length		 fixed bin (35);
       51 
       52 	dcl     fixed_bin_11_ovrly	 fixed bin (11) unal based;
       53 
       54 	dcl     1 arith_len		 aligned based (a_len_ptr),
       55 		2 scale		 fixed bin (17) unal,
       56 		2 prec		 fixed bin (17) unal;
       57 
       58 	dcl     1 fb_len		 unal based (fbl_ptr),
       59 		2 q		 fixed bin (11) unal,
       60 		2 p		 fixed bin (11) unal;
       61 
       62 	dcl     (addr, fixed, null, string, substr) builtin;
       63 
       64 	dcl     mdbm_util_$string_data_class entry (ptr) returns (bit (1));
       65 
       66 	a_len_ptr = addr (length);			/* initialize */
       67 	num_dims = 0;
       68 	desc_ptr = addr (desc);
       69 
       70 	type = 2 * descriptor.type + fixed (descriptor.packed);
       71 	if ^mdbm_util_$string_data_class (desc_ptr) then do;
       72 		fbl_ptr = addr (descriptor.size);
       73 		arith_len.scale = addr (descriptor.size.scale) -> fixed_bin_11_ovrly;
       74 		arith_len.prec = fixed (descriptor.size.precision);
       75 	     end;
       76 	else length = fixed (string (descriptor.size));	/* if string data */
       77 
       78 
       79 	return;
       80 
       81      end linus_assign_data;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    09/16/83  1739.3  linus_assign_data.pl1             >spec>on>09/16/83-linus>linus_assign_data.pl1
39           1    03/27/82  0431.9  mdbm_descriptor.incl.pl1          >ldd>include>mdbm_descriptor.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
a_len_ptr                       000104 automatic       pointer                  initial dcl 41 set ref 41* 66* 73 74
addr                                                   builtin function         dcl 62 ref 66 68 72 73
arith_len                              based           structure                level 1 dcl 54
desc                                   parameter       bit(36)                  unaligned dcl 46 set ref 18 68
desc_ptr                        000100 automatic       pointer                  dcl 1-19 set ref 68* 70 70 71* 72 73 74 76
descriptor                             based           structure                level 1 unaligned dcl 1-6
fbl_ptr                         000106 automatic       pointer                  initial dcl 41 set ref 41* 72*
fixed                                                  builtin function         dcl 62 ref 70 74 76
fixed_bin_11_ovrly                     based           fixed bin(11,0)          unaligned dcl 52 ref 73
length                                 parameter       fixed bin(35,0)          dcl 50 set ref 18 66 76*
mdbm_util_$string_data_class    000010 constant        entry                    external dcl 64 ref 71
null                                                   builtin function         dcl 62 ref 41 41
num_dims                        000102 automatic       fixed bin(17,0)          initial dcl 1-20 set ref 67* 1-20*
packed                    0(07)        based           bit(1)                   level 2 packed unaligned dcl 1-6 ref 70
prec                      0(18)        based           fixed bin(17,0)          level 2 packed unaligned dcl 54 set ref 74*
precision                 0(24)        based           bit(12)                  level 3 packed unaligned dcl 1-6 set ref 74
scale                     0(12)        based           bit(12)                  level 3 in structure "descriptor" packed unaligned
                                                                                  dcl 1-6 in procedure "linus_assign_data" set ref
                                                                                  73
scale                                  based           fixed bin(17,0)          level 2 in structure "arith_len" packed unaligned
                                                                                  dcl 54 in procedure "linus_assign_data" set ref
                                                                                  73*
size                      0(12)        based           structure                level 2 packed unaligned dcl 1-6 set ref 72 76
string                                                 builtin function         dcl 62 ref 76
type                                   parameter       fixed bin(17,0)          dcl 48 in procedure "linus_assign_data" set ref 18
                                                                                  70*
type                      0(01)        based           fixed bin(6,0)           level 2 in structure "descriptor" packed unsigned
                                                                                  unaligned dcl 1-6 in procedure "linus_assign_data"
                                                                                  ref 70

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
fb_len                                 based           structure                level 1 packed unaligned dcl 58
substr                                                 builtin function         dcl 62

NAME DECLARED BY EXPLICIT CONTEXT.
linus_assign_data               000012 constant        entry                    external dcl 18

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       142         154     101         152
Length       340     101        12         150      41           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
linus_assign_data                    80 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
linus_assign_data        000100 desc_ptr                    linus_assign_data
                         000102 num_dims                    linus_assign_data
                         000104 a_len_ptr                   linus_assign_data
                         000106 fbl_ptr                     linus_assign_data

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
mdbm_util_$string_data_class

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     18 000006    1   20 000017        41 000020        66 000023        67 000026        68 000027        70 000031
     71 000043        72 000056        73 000062        74 000067        75 000073        76 000074        79 000100


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
