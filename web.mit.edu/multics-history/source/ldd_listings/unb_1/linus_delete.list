	COMPILATION LISTING OF SEGMENT linus_delete
	Compiled by: Multics PL/I Compiler, Release 28e, of February 14, 1985
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 07/29/86  1000.4 mst Tue
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   *                                                         *
        4*   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        5*   *                                                         *
        6*   *                                                         *
        7*   *********************************************************** */
        8 
        9 /* ******************************************************
       10*   *                                                    *
       11*   *                                                    *
       12*   * Copyright (c) 1972 by Massachusetts Institute of   *
       13*   * Technology and Honeywell Information Systems, Inc. *
       14*   *                                                    *
       15*   *                                                    *
       16*   ****************************************************** */
       17 
       18 linus_delete:
       19      proc (sci_ptr, lcb_ptr);
       20 
       21 /* DESCRIPTION:
       22*
       23*   Selected rows are deleted from a single table in the data base.
       24*
       25*
       26*
       27*   HISTORY:
       28*
       29*   77-05-14 J. C. C. Jagernauth: Intially written.
       30*
       31*   80-03-14  Rickie  E.   Brinegar:  Modified  to  use  a work area defined on
       32*   lcb.linus_area_ptr instead of getting system free area.
       33*
       34*   81-06-04  Rickie  E.   Brinegar:  Modified to not pass arguments for return
       35*   values to dsl_$delete.
       36*   
       37*   81-07-15 Rickie E. Brinegar: Removed useless cleanup condition handler.
       38*   
       39*   81-11-13  Rickie  E.  Brinegar: Added timing of dsl_$delete and changed the
       40*   cu_$gen_call to cu_$generate_call.
       41*
       42*   82-02-10 Paul W. Benjamin: ssu_ conversion
       43*
       44*   82-09-03 Dave J. Schimke: Added a call to dsl_$get_pn to get the opening
       45*   mode and report an error if user tries to delete with a retrieval opening.
       46*   Declared mode, db_path, dsl_$get_path, and linus_error_$update_not_valid.
       47*   This is in response to phx 13742.
       48*
       49*   82-11-15 Dave Schimke: Declared fixed and rel builtins.
       50*
       51*   83-08-30  Bert Moberg:  Added call to linus_translate_query$auto if no current
       52*   select expression is available
       53**/
       54 
  1     1 /* BEGIN INCLUDE FILE linus_lcb.incl.pl1 -- jaw 8/30/77 */
  1     2    
  1     3 
  1     4 
  1     5 /****^  HISTORY COMMENTS:
  1     6*  1) change(86-04-23,Dupuis), approve(86-05-23,MCR7188), audit(86-07-23,GWMay),
  1     7*     install(86-07-29,MR12.0-1106):
  1     8*     Added general_work_area_ptr and renamed sfr_ptr to
  1     9*     force_retrieve_scope_ptr.
  1    10*                                                   END HISTORY COMMENTS */
  1    11 
  1    12 
  1    13 /* HISTORY:
  1    14*
  1    15*   78-09-29 J. C. C. Jagernauth: Modified for MR7.0.
  1    16*
  1    17*   81-05-11  Rickie E.  Brinegar: added security bit and andministrator bit as
  1    18*   a part of the attribute level control work.
  1    19*   
  1    20*   81-06-17  Rickie E.  Brinegar: deleted the sd_ptr as a part of removing the
  1    21*   scope_data  structure  from  LINUS.   LINUS now depends totally on MRDS for
  1    22*   scope information.
  1    23*   
  1    24*   81-11-11  Rickie  E.   Brinegar:  added the timing bit and three fields for
  1    25*   retaining  various  vcpu  times  to  be collected when in timing mode.  The
  1    26*   times  to  be collected are: LINUS parsing time, LINUS processing time, and
  1    27*   MRDS processing time.
  1    28*
  1    29*   82-01-15  DJ  Schimke:  Added the build_increment and build_start fields as
  1    30*   part of the line numbering implementation.  This allows for possible  later
  1    31*   LINUS control of the build defaults.
  1    32* 
  1    33*   82-03-01 Paul W. Benjamin: Removed linus_prompt_chars_ptr, as that 
  1    34*   information is now retained by ssu_.  Removed parse_timer as no longer
  1    35*   meaningful.  Added linus_version.  Added iteration bit.  Added 6 entry 
  1    36*   variables for ssu_ replaceable procedures.  Added actual_input_iocbp.
  1    37*
  1    38*   82-06-23 Al Dupuis: Added subsystem_control_info_ptr, 
  1    39*   subsystem_invocation_level, and selection_expression_identifier.
  1    40*
  1    41*   82-08-26 DJ Schimke: Added report_control_info_ptr, and
  1    42*   table_control_info_ptr. 
  1    43*
  1    44*   82-10-19 DJ Schimke: Added ssu_abort_line.
  1    45*
  1    46*   83-06-06 Bert Moberg: Added print_search_order (pso) and no_optimize (no_ot)
  1    47*
  1    48*   83-04-07 DJ Schimke: Added temp_seg_info_ptr.
  1    49*
  1    50*   83-08-26 Al Dupuis: Added query_temp_segment_ptr.
  1    51**/
  1    52     
  1    53 dcl 1 lcb aligned based (lcb_ptr),			/* LINUS control block */
  1    54     2 db_index fixed bin (35),			/* index of open data base, or 0 */
  1    55     2 rb_len fixed bin (21),				/* length of request buffer */
  1    56     2 lila_count fixed bin (35),			/* number of LILA text lines */
  1    57     2 lila_chars fixed bin (35),			/* number of LILA source test chars */
  1    58     2 trans_id fixed bin (35),			/* used by checkpoint and rollback facilities (MR7.0) */
  1    59     2 lila_fn char (32) unal,				/* entry name of lila data file */
  1    60     2 prompt_flag bit (1) unal,			/* on if in prompt mode */
  1    61     2 test_flag bit (1) unal,				/* on if in test mode */
  1    62     2 new_version bit (1) unal init (1),		/* on for new version data base (MR7.0) */
  1    63     2 secured_db bit (1) unal,                              /* on if the db is in a secure state */
  1    64     2 administrator bit (1) unal,                           /* on if the user is a db administrator */
  1    65     2 timing_mode bit (1) unal,                             /* on if timing is to be done */
  1    66     2 iteration bit (1) unal,				/* interpret parens as iteration sets */
  1    67     2 pso_flag bit (1) unal,				/* add print_search_order to select */
  1    68     2 no_ot_flag bit (1) unal,			/* add no_optimize to select */
  1    69     2 reserved bit (27) unal,
  1    70     2 liocb_ptr ptr,				/* iocb ptr for lila file */
  1    71     2 rb_ptr ptr,					/* ptr to request buffer */
  1    72     2 is_ptr ptr,					/* iocb ptr for currentinput stream switch */
  1    73     2 cal_ptr ptr,					/* ptr to current arg list for invoke (or null) */
  1    74     2 ttn_ptr ptr,					/* pointer to table info structure */
  1    75     2 force_retrieve_scope_info_ptr ptr,		/* structure pointer to force retrieve scope operation */
  1    76     2 lv_ptr ptr,					/* pointer linus variables */
  1    77     2 si_ptr ptr,					/* pointer to select_info structure */
  1    78     2 setfi_ptr ptr,				/* pointer to set function information */
  1    79     2 sclfi_ptr ptr,				/* pointer to user declared scalar fun. names */
  1    80     2 ivs_ptr ptr,					/* pointer to stack of invoke iocb pointers */
  1    81     2 lit_ptr ptr,					/* pointer to literal pool */
  1    82     2 lvv_ptr ptr,					/* pointer to linus variable alloc. pool  */
  1    83     2 rd_ptr ptr,					/* point to readied files mode information (MR7.0) */
  1    84     2 rt_ptr ptr,                                           /* point to table of relation names and their readied modes
  1    85*                                                               (MR7.0) */
  1    86     2 actual_input_iocbp ptr,				/* ptr to input while in macros */
  1    87     2 lila_promp_chars_ptr ptr,			/* pointer to the prompt characters for lila */
  1    88     2 linus_area_ptr ptr,				/* LINUS temporary segment pointer */
  1    89     2 lila_area_ptr ptr,				/* LILA temporary segment pointer */
  1    90     2 i_o_area_ptr ptr,				/* temporary segment pointer used by write, print, create_list */
  1    91     2 rel_array_ptr ptr,                                    /* ptr to array of names rslt info structure
  1    92*                                                               for current lila expression */
  1    93     2 unused_timer float bin (63),			/* future expansion */
  1    94     2 request_time float bin (63),                          /* How much request time was spent
  1    95*                                                                in LINUS. (-1 = user has just enabled 
  1    96*						    timing, do not report) */
  1    97     2 mrds_time float bin (63),                             /* How much time was spent in MRDS */
  1    98     2 build_increment fixed bin,			/* default increment for build mode */
  1    99     2 build_start fixed bin,				/* default start count for build mode */
  1   100     2 linus_version char (4),				/* current version of LINUS */
  1   101     2 subsystem_control_info_ptr ptr,                       /* the same ptr passed by ssu_ to each request procedure */
  1   102     2 subsystem_invocation_level fixed bin,                 /* identifies this invocation of LINUS */
  1   103     2 selection_expression_identifier fixed bin,            /* identifies the current processed selection expression */
  1   104     2 report_control_info_ptr ptr,			/* pointer to linus_report_control_info structure */
  1   105     2 table_control_info_ptr ptr,			/* pointer to linus_table control structure */
  1   106     2 temp_seg_info_ptr ptr,				/* pointer to linus_temp_seg_mgr control structure */
  1   107     2 query_temp_segment_ptr ptr,			/* points to temp seg used for manipulating query */
  1   108     2 general_work_area_ptr ptr,			/* a freeing area for general use */
  1   109     2 word_pad (6) bit (36) unal,
  1   110 						/* procedures that will be optionally */
  1   111 						/* replaced by the user.  Saved so they */
  1   112 						/* can be reinstated if desired. */
  1   113     2 ssu_abort_line entry options (variable),
  1   114     2 ssu_post_request_line variable entry (ptr),
  1   115     2 ssu_pre_request_line variable entry (ptr),
  1   116 
  1   117     2 curr_lit_offset fixed bin (35),			/* index of first free bit in lit. pool */
  1   118     2 curr_lv_val_offset fixed bin (35),		/* index of first free bit lv. val. pool */
  1   119     2 static_area area (sys_info$max_seg_size - fixed (rel (addr (lcb.static_area))) + 1);
  1   120 
  1   121 dcl  lcb_ptr ptr;
  1   122 
  1   123 /* END INCLUDE FILE linus_lcb.incl.pl1 */
       55 
       56 
  2     1 /* BEGIN INCLUDE FILE linus_select_info.incl.pl1 */
  2     2 /* History:  77-07-29 J. A. Weeldreyer: Originally written.
  2     3*   Modified: 82-18-82 Dave Schimke: Added user_item.table_name
  2     4**/
  2     5 dcl 1 select_info aligned based (si_ptr),		/* info from LILA select clause */
  2     6     2 set_fn bit (1) unal,				/* on if  set fn to be applied */
  2     7     2 se_flags unal,				/* flags pertaining to selection expr. */
  2     8       3 val_ret bit (1) unal,				/* valid for retrieval */
  2     9       3 val_dtt bit (1) unal,				/* valid for define_temp_table */
  2    10       3 val_del bit (1) unal,				/* valid for delete */
  2    11       3 val_mod bit (1) unal,				/* valid for modify */
  2    12     2 dup_flag bit (1) unal,				/* on if dup explic. spec. somewhere */
  2    13     2 unique_flag bit (1) unal,			/* on if unique explic. spec. somewhere */
  2    14     2 pad bit (29) unal,				/* reserved */
  2    15     2 prior_sf_ptr ptr,				/* pointer to set fns for prior eval. */
  2    16     2 se_ptr ptr,					/* pointer to mrds selection expression */
  2    17     2 sel_items_ptr ptr,				/* pointer to list of selected items */
  2    18     2 sel_items_len fixed bin,			/* length in characters of list of selected items */
  2    19     2 se_len fixed bin (35),				/* length of mrds sel. expr. */
  2    20     2 nsv_alloc fixed bin,				/* no. of se. vals aloc. */
  2    21     2 nmi_alloc fixed bin,				/* no. of mrds items alloc. */
  2    22     2 nui_alloc fixed bin,				/* no. of user items alloc. */
  2    23     2 nsevals fixed bin,				/* number of selection expr. vaules */
  2    24     2 n_mrds_items fixed bin,				/* no. of items in mrds select list */
  2    25     2 n_user_items fixed bin,				/* no. of items user will see */
  2    26     2 se_vals (nsv_init refer (select_info.nsv_alloc)),
  2    27       3 arg_ptr ptr,
  2    28       3 desc_ptr ptr,
  2    29     2 mrds_item (nmi_init refer (select_info.nmi_alloc)),	/* mrds select items */
  2    30       3 arg_ptr ptr,				/* pointer to receiving field */
  2    31       3 bit_len fixed bin (35),			/* bit length of receiving field */
  2    32       3 desc bit (36),				/* descriptor for receiving field */
  2    33       3 assn_type fixed bin,				/* type code for assign_ */
  2    34       3 assn_len fixed bin (35),			/* length for assign_ */
  2    35     2 user_item (nui_init refer (select_info.nui_alloc)),	/* user select item */
  2    36       3 name char (32) var,				/* name for col. header */
  2    37       3 table_name char (32) var,                           /* name of containing linus table */
  2    38       3 item_type fixed bin,				/* indicates type of item:
  2    39*						   1 => raw mrds,
  2    40*						   2 => expr.  */
  2    41       3 rslt_desc bit (36),				/* descriptor for expr. result */
  2    42       3 rslt_bit_len fixed bin (35),			/* bit length of expr. result */
  2    43       3 rslt_assn_ptr ptr,				/* pointer to expr. result storage loc. */
  2    44       3 rslt_assn_type fixed bin,			/* assign_ type code of expr. result */
  2    45       3 rslt_assn_len fixed bin (35),			/* assign_ length for expr. result */
  2    46       3 item_ptr ptr;				/* pointer to item or expr. or applied set_func. structure */
  2    47 
  2    48 dcl (nsv_init, nmi_init, nui_init) fixed bin;
  2    49 dcl  si_ptr ptr;
  2    50 
  2    51 /* END INCLUDE FILE linus_select_info.incl.pl1 */
       57 
       58 
  3     1 /* BEGIN mdbm_arg_list.incl.pl1 -- jaw 5/31/78 */
  3     2 /* the duplicate mrds_arg_list.incl.pl1 was eliminated by Jim Gray, Nov. 1979 */
  3     3 
  3     4 /* layout of argument list for IDS and DBM entries with options (variable) */
  3     5 
  3     6 dcl 1 arg_list based (al_ptr),
  3     7     2 arg_count fixed bin (17) unal,			/* 2 * no. of args. */
  3     8     2 code fixed bin (17) unal,			/* 4 => normal, 8 => special */
  3     9     2 desc_count fixed bin (17) unal,			/* 2 * no. of descriptors */
  3    10     2 pad fixed bin (17) unal,			/* must be 0 */
  3    11     2 arg_des_ptr (num_ptrs) ptr;			/* argument/descriptor pointer */
  3    12 
  3    13 dcl  al_ptr ptr;
  3    14 dcl  num_ptrs fixed bin;
  3    15 
  3    16 /* END mdbm_arg_list.incl.pl1  */
  3    17 
       59 
       60 
  4     1 /* BEGIN INCLUDE FILE linus_arg_list.incl.pl1 -- jccj 4/15/77 */
  4     2 
  4     3 dcl 1 char_desc aligned based (char_ptr),		/* Structure for character descriptors */
  4     4     2 fb_desc bit (36) aligned init ("100000100000000000000000000000100011"b), /* Fixed bin descriptor */
  4     5     2 n_chars fixed bin,
  4     6     2 arr (n_chars_init refer (char_desc.n_chars)),
  4     7       3 const bit (12) unal init ("101010100000"b),	/* Constant part */
  4     8       3 var bit (24) unal;				/* Variable part */
  4     9 
  4    10 dcl  char_ptr ptr;
  4    11 dcl  n_chars_init fixed bin;
  4    12 
  4    13 /* END INCLUDE FILE linus_arg_list.incl.pl1 */
       61 
       62 
       63 	dcl     sci_ptr		 ptr;		/* for ssu_ */
       64 
       65 	dcl     nargs		 fixed;
       66 
       67 	dcl     (addr, fixed, null, rel, substr, vclock) builtin;
       68 
       69 	dcl     (desc, l)		 fixed bin;
       70 
       71 	dcl     (icode, out_code)	 fixed bin (35);
       72 
       73 	dcl     initial_mrds_vclock	 float bin (63);
       74 
       75 	dcl     1 arg_len_bits	 based,
       76 		2 pad		 bit (12) unal,
       77 		2 length		 bit (24) unal;
       78 
       79 	dcl     db_path		 char (168) var;
       80 	dcl     mode		 char (20);
       81 	dcl     sel_expr		 char (select_info.se_len) based (select_info.se_ptr);
       82 
       83 	dcl     (
       84 	        linus_data_$d_id,
       85 	        linus_error_$inv_for_delete,
       86 	        linus_error_$no_db,
       87 	        linus_error_$no_input_arg_reqd,
       88 	        linus_error_$update_not_allowed,
       89 	        sys_info$max_seg_size
       90 	        )			 fixed bin (35) ext;
       91 
       92 	dcl     cu_$generate_call	 entry (entry, ptr);
       93 	dcl     dsl_$delete		 entry options (variable);
       94 	dcl     dsl_$get_pn		 entry (fixed bin (35), char (168) var, char (20), fixed bin (35));
       95 	dcl     linus_convert_code	 entry (fixed bin (35), fixed bin (35), fixed bin (35));
       96 	dcl     linus_translate_query$auto	 entry (ptr, ptr);
       97 	dcl     ssu_$abort_line	 entry options (variable);
       98 	dcl     ssu_$arg_count	 entry (ptr, fixed bin);
       99 	dcl     work_area		 area (sys_info$max_seg_size) based (lcb.linus_area_ptr);
      100 
      101 	al_ptr, char_ptr = null;
      102 	icode = 0;
      103 
      104 	if lcb.db_index = 0 then
      105 	     call error (linus_error_$no_db, "");
      106 	call dsl_$get_pn (lcb.db_index, db_path, mode, icode);
      107 	if substr (mode, 1, 9) = "retrieval" | substr (mode, 11, 9) = "retrieval" then
      108 	     call error (linus_error_$update_not_allowed, "");
      109 
      110 	call ssu_$arg_count (sci_ptr, nargs);
      111 	if nargs ^= 0 then
      112 	     call error (linus_error_$no_input_arg_reqd, "");
      113 	if lcb.si_ptr = null then call linus_translate_query$auto (sci_ptr, lcb_ptr); /* try translating it */
      114 	if lcb.si_ptr = null then return; /* No good?  Oh, well */
      115 	si_ptr = lcb.si_ptr;
      116 	if ^select_info.se_flags.val_del then
      117 	     call error (linus_error_$inv_for_delete, "");
      118 	if select_info.nsevals = 0 then do;
      119 		if lcb.timing_mode then
      120 		     initial_mrds_vclock = vclock;
      121 		call dsl_$delete (lcb.db_index, sel_expr, icode);
      122 		if lcb.timing_mode then
      123 		     lcb.mrds_time = lcb.mrds_time + vclock - initial_mrds_vclock;
      124 	     end;
      125 	else do;
      126 		n_chars_init = 1;
      127 		allocate char_desc in (work_area);
      128 
      129 /* 81-06-04 Rickie E. Brinegar: Start changed code ************************* */
      130 
      131 		desc = select_info.nsevals + 3;
      132 
      133 /* 81-06-04 Rickie E. Brinegar: End changed code *************************** */
      134 
      135 		num_ptrs = desc * 2;
      136 		allocate arg_list in (work_area);
      137 
      138 		arg_list.arg_des_ptr (num_ptrs) = addr (char_desc.fb_desc);
      139 						/* Return code descriptor */
      140 		arg_list.arg_des_ptr (1) = addr (lcb.db_index); /* Data base index */
      141 		arg_list.arg_des_ptr (desc + 1) = addr (char_desc.fb_desc);
      142 						/* Data base index descriptor */
      143 		arg_list.arg_count, arg_list.desc_count = num_ptrs; /* Initialize argument list header */
      144 		arg_list.code = 4;
      145 		arg_list.pad = 0;
      146 
      147 		arg_list.arg_des_ptr (desc) = addr (icode);
      148 		char_desc.arr.var (1) =
      149 		     addr (select_info.se_len) -> arg_len_bits.length;
      150 		arg_list.arg_des_ptr (2) = select_info.se_ptr;
      151 		arg_list.arg_des_ptr (desc + 2) = addr (char_desc.arr (1));
      152 		do l = 1 to select_info.nsevals;
      153 		     arg_list.arg_des_ptr (2 + l) = select_info.se_vals.arg_ptr (l);
      154 		     arg_list.arg_des_ptr (2 + l + desc) =
      155 			select_info.se_vals.desc_ptr (l);
      156 		end;
      157 
      158 		if lcb.timing_mode then
      159 		     initial_mrds_vclock = vclock;
      160 		call cu_$generate_call (dsl_$delete, al_ptr);
      161 		if lcb.timing_mode then
      162 		     lcb.mrds_time = lcb.mrds_time + vclock - initial_mrds_vclock;
      163 
      164 	     end;
      165 	if icode ^= 0 then
      166 	     call error (icode, "");
      167 
      168 	return;
      169 
      170 error:
      171      proc (err_code, string);
      172 
      173 	dcl     err_code		 fixed bin (35);
      174 	dcl     string		 char (*);
      175 
      176 	call linus_convert_code (err_code, out_code, linus_data_$d_id);
      177 	call ssu_$abort_line (sci_ptr, out_code);
      178 
      179      end error;
      180 
      181      end linus_delete;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/29/86  0939.8  linus_delete.pl1                  >special_ldd>install>MR12.0-1106>linus_delete.pl1
55           1    07/29/86  0937.8  linus_lcb.incl.pl1                >special_ldd>install>MR12.0-1106>linus_lcb.incl.pl1
57           2    09/16/83  1338.0  linus_select_info.incl.pl1        >ldd>include>linus_select_info.incl.pl1
59           3    10/14/83  1609.0  mdbm_arg_list.incl.pl1            >ldd>include>mdbm_arg_list.incl.pl1
61           4    03/27/82  0434.5  linus_arg_list.incl.pl1           >ldd>include>linus_arg_list.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
addr                                                   builtin function         dcl 67 ref 138 140 141 147 148 151
al_ptr                          000102 automatic       pointer                  dcl 3-13 set ref 101* 136* 138 140 141 143 143 144
                                                                                  145 147 150 151 153 154 160*
arg_count                              based           fixed bin(17,0)          level 2 packed unaligned dcl 3-6 set ref 143*
arg_des_ptr               2            based           pointer                  array level 2 dcl 3-6 set ref 138* 140* 141* 147*
                                                                                  150* 151* 153* 154*
arg_len_bits                           based           structure                level 1 packed unaligned dcl 75
arg_list                               based           structure                level 1 unaligned dcl 3-6 set ref 136
arg_ptr                  20            based           pointer                  array level 3 dcl 2-5 ref 153
arr                       2            based           structure                array level 2 dcl 4-3 set ref 151
char_desc                              based           structure                level 1 dcl 4-3 set ref 127
char_ptr                        000106 automatic       pointer                  dcl 4-10 set ref 101* 127* 138 141 148 151
code                      0(18)        based           fixed bin(17,0)          level 2 packed unaligned dcl 3-6 set ref 144*
const                     2            based           bit(12)                  initial array level 3 packed unaligned dcl 4-3 set
                                                                                  ref 127*
cu_$generate_call               000022 constant        entry                    external dcl 92 ref 160
db_index                               based           fixed bin(35,0)          level 2 dcl 1-53 set ref 104 106* 121* 140
db_path                         000120 automatic       varying char(168)        dcl 79 set ref 106*
desc                            000112 automatic       fixed bin(17,0)          dcl 69 set ref 131* 135 141 147 151 154
desc_count                1            based           fixed bin(17,0)          level 2 packed unaligned dcl 3-6 set ref 143*
desc_ptr                 22            based           pointer                  array level 3 dcl 2-5 ref 154
dsl_$delete                     000024 constant        entry                    external dcl 93 ref 121 160 160
dsl_$get_pn                     000026 constant        entry                    external dcl 94 ref 106
err_code                               parameter       fixed bin(35,0)          dcl 173 set ref 170 176*
fb_desc                                based           bit(36)                  initial level 2 dcl 4-3 set ref 127* 138 141
icode                           000114 automatic       fixed bin(35,0)          dcl 71 set ref 102* 106* 121* 147 165 165*
initial_mrds_vclock             000116 automatic       float bin(63)            dcl 73 set ref 119* 122 158* 161
l                               000113 automatic       fixed bin(17,0)          dcl 69 set ref 152* 153 153 154 154*
lcb                                    based           structure                level 1 dcl 1-53
lcb_ptr                                parameter       pointer                  dcl 1-121 set ref 18 104 106 113 113* 114 115 119
                                                                                  121 122 122 122 127 136 140 158 161 161 161
length                    0(12)        based           bit(24)                  level 2 packed unaligned dcl 75 ref 148
linus_area_ptr           60            based           pointer                  level 2 dcl 1-53 ref 127 136
linus_convert_code              000030 constant        entry                    external dcl 95 ref 176
linus_data_$d_id                000010 external static fixed bin(35,0)          dcl 83 set ref 176*
linus_error_$inv_for_delete     000012 external static fixed bin(35,0)          dcl 83 set ref 116*
linus_error_$no_db              000014 external static fixed bin(35,0)          dcl 83 set ref 104*
linus_error_$no_input_arg_reqd  000016 external static fixed bin(35,0)          dcl 83 set ref 111*
linus_error_$update_not_allowed 000020 external static fixed bin(35,0)          dcl 83 set ref 107*
linus_translate_query$auto      000032 constant        entry                    external dcl 96 ref 113
mode                            000173 automatic       char(20)                 unaligned dcl 80 set ref 106* 107 107
mrds_time                74            based           float bin(63)            level 2 dcl 1-53 set ref 122* 122 161* 161
n_chars                   1            based           fixed bin(17,0)          level 2 dcl 4-3 set ref 127*
n_chars_init                    000110 automatic       fixed bin(17,0)          dcl 4-11 set ref 126* 127 127
nargs                           000111 automatic       fixed bin(17,0)          dcl 65 set ref 110* 111
nsevals                  15            based           fixed bin(17,0)          level 2 dcl 2-5 ref 118 131 152
null                                                   builtin function         dcl 67 ref 101 113 114
num_ptrs                        000104 automatic       fixed bin(17,0)          dcl 3-14 set ref 135* 136 138 143
out_code                        000115 automatic       fixed bin(35,0)          dcl 71 set ref 176* 177*
pad                       1(18)        based           fixed bin(17,0)          level 2 packed unaligned dcl 3-6 set ref 145*
sci_ptr                                parameter       pointer                  dcl 63 set ref 18 110* 113* 177*
se_flags                  0(01)        based           structure                level 2 packed unaligned dcl 2-5
se_len                   11            based           fixed bin(35,0)          level 2 dcl 2-5 set ref 121 121 148
se_ptr                    4            based           pointer                  level 2 dcl 2-5 ref 121 150
se_vals                  20            based           structure                array level 2 dcl 2-5
sel_expr                               based           char                     unaligned dcl 81 set ref 121*
select_info                            based           structure                level 1 dcl 2-5
si_ptr                          000100 automatic       pointer                  dcl 2-49 in procedure "linus_delete" set ref 115*
                                                                                  116 118 121 121 121 131 148 150 152 153 154
si_ptr                   34            based           pointer                  level 2 in structure "lcb" dcl 1-53 in procedure
                                                                                  "linus_delete" ref 113 114 115
ssu_$abort_line                 000034 constant        entry                    external dcl 97 ref 177
ssu_$arg_count                  000036 constant        entry                    external dcl 98 ref 110
string                                 parameter       char                     unaligned dcl 174 ref 170
substr                                                 builtin function         dcl 67 ref 107 107
timing_mode              15(05)        based           bit(1)                   level 2 packed unaligned dcl 1-53 ref 119 122 158
                                                                                  161
val_del                   0(03)        based           bit(1)                   level 3 packed unaligned dcl 2-5 ref 116
var                       2(12)        based           bit(24)                  array level 3 packed unaligned dcl 4-3 set ref 148*
vclock                                                 builtin function         dcl 67 ref 119 122 158 161
work_area                              based           area                     dcl 99 ref 127 136

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
fixed                                                  builtin function         dcl 67
nmi_init                               automatic       fixed bin(17,0)          dcl 2-48
nsv_init                               automatic       fixed bin(17,0)          dcl 2-48
nui_init                               automatic       fixed bin(17,0)          dcl 2-48
rel                                                    builtin function         dcl 67
sys_info$max_seg_size                  external static fixed bin(35,0)          dcl 83

NAMES DECLARED BY EXPLICIT CONTEXT.
error                           000506 constant        entry                    internal dcl 170 ref 104 107 111 116 165
linus_delete                    000017 constant        entry                    external dcl 18

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       750        1010     566         760
Length      1270     566        40         244     162           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
linus_delete                        186 external procedure  is an external procedure.  
error                                   internal procedure  shares stack frame of external procedure linus_delete.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
linus_delete             000100 si_ptr                      linus_delete
                         000102 al_ptr                      linus_delete
                         000104 num_ptrs                    linus_delete
                         000106 char_ptr                    linus_delete
                         000110 n_chars_init                linus_delete
                         000111 nargs                       linus_delete
                         000112 desc                        linus_delete
                         000113 l                           linus_delete
                         000114 icode                       linus_delete
                         000115 out_code                    linus_delete
                         000116 initial_mrds_vclock         linus_delete
                         000120 db_path                     linus_delete
                         000173 mode                        linus_delete

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              ext_entry           alloc_based         vclock

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
cu_$generate_call             dsl_$delete                   dsl_$get_pn                   linus_convert_code
linus_translate_query$auto    ssu_$abort_line               ssu_$arg_count

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
linus_data_$d_id              linus_error_$inv_for_delete   linus_error_$no_db
linus_error_$no_input_arg_reqd                              linus_error_$update_not_allowed




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     18 000013       101 000024       102 000027       104 000030       106 000050       107 000067       110 000114
    111 000126       113 000145       114 000165       115 000174       116 000176       118 000216       119 000221
    121 000233       122 000257       124 000273       126 000274       127 000276       131 000321       135 000325
    136 000327       138 000341       140 000345       141 000351       143 000355       144 000365       145 000367
    147 000371       148 000373       150 000377       151 000401       152 000403       153 000413       154 000423
    156 000433       158 000435       160 000447       161 000464       165 000500       168 000505       170 000506
    176 000517       177 000533       179 000551


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
