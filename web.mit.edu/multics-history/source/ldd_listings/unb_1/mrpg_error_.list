	COMPILATION LISTING OF SEGMENT mrpg_error_
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 02/14/84  0850.8 mst Tue
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 /**** format: ind3,ll80,initcol6,indattr,^inddcls,dclind4,idind16	       */
       12 /**** format: struclvlind2,^ifthenstmt,^ifthendo,^ifthen,^indnoniterdo       */
       13 /**** format: ^inditerdo,^indnoniterend,^indthenelse,case,^indproc,^indend   */
       14 /**** format: ^delnl,^insnl,comcol41,^indcom,^indblkcom,linecom,^indcomtxt   */
       15 
       16 mrpg_error_: proc (severity, line) options (variable);
       17 
       18 dcl (severity, line) fixed bin;
       19 
       20       LINE = "LINE";
       21       SEP = ".";
       22       call cu_$arg_list_ptr (alp);
       23       lineno = line;
       24       call ioa_$general_rs (alp, 3, 4, ret, retl, "1"b, "1"b);
       25       SEV = LEVEL (severity);
       26       if (line = 0)
       27       then LINE, SEP = "";
       28       i = 1;
       29       do while (i ^= 0);
       30          i = index (ret, ",_");
       31          if (i > 0)
       32          then substr (ret, i, 2) = " ,";
       33       end;
       34       call iox_$put_chars (iox_$user_output, addr (reta), retl + 19, 0);
       35       errct (severity) = errct (severity) + 1;
       36       if severity = 3
       37       then signal condition (mrpg_fatal);
       38       return;
       39 
       40 dcl ioa_$general_rs entry (ptr, fixed bin (24), fixed bin (24), char (*),
       41 		fixed bin (24), bit (1) aligned, bit (1) aligned);
       42 dcl alp		ptr;
       43 dcl LEVEL		(0:3) char (8) int static
       44 		init ("", "*WARN:", "ERROR:", "FATAL:");
       45 dcl errct		(0:3) fixed bin (24) int static;
       46 dcl 1 reta,
       47       2 SEV	char (8),
       48       2 LINE	char (4),
       49       2 lineno	pic "zzzzz",
       50       2 SEP	char (2),
       51       2 ret	char (150);
       52 dcl retl		fixed bin (24);
       53 dcl com_err_	entry options (variable);
       54 dcl iox_$user_output ptr ext static;
       55 dcl iox_$put_chars	entry (ptr, ptr, fixed bin (24), fixed bin (24));
       56 dcl cu_$arg_list_ptr entry (ptr);
       57 dcl retv		bit (1);
       58 dcl i		fixed bin;
       59 dcl mrpg_fatal	condition;
       60 dcl error_table_$translation_failed fixed bin (35) ext static;
       61 dcl code		fixed bin (35);
       62 
       63 init: entry;
       64       errct = 0;
       65       return;
       66 
       67 stat: entry returns (bit (1));
       68 
       69       retv = errct (2) > 0;
       70       if (errct (1) + errct (2) > 0)
       71       then do;
       72          if retv
       73          then code = error_table_$translation_failed;
       74          else code = 0;
       75          call com_err_ (code, "mrpg", "^/^-Summary: ^i WARN, ^i ERROR",
       76 	  errct (1), errct (2));
       77       end;
       78       errct = 0;
       79       return (retv);
       80 
  1     1 /* BEGIN INCLUDE FILE ... arg_list.incl.pl1
  1     2*
  1     3*   James R. Davis 10 May 79 */
  1     4 
  1     5      dcl	   1 arg_list	      aligned based,
  1     6 	     2 header,
  1     7 	       3 arg_count	      fixed bin (17) unsigned unal,
  1     8 	       3 pad1	      bit (1) unal,
  1     9 	       3 call_type	      fixed bin (18) unsigned unal,
  1    10 	       3 desc_count	      fixed bin (17) unsigned unal,
  1    11 	       3 pad2	      bit (19) unal,
  1    12 	     2 arg_ptrs	      (arg_list_arg_count refer (arg_list.arg_count)) ptr,
  1    13 	     2 desc_ptrs	      (arg_list_arg_count refer (arg_list.arg_count)) ptr;
  1    14 
  1    15 
  1    16 
  1    17      dcl	   1 arg_list_with_envptr aligned based,	/* used with non-quick int and entry-var calls */
  1    18 	     2 header,
  1    19 	       3 arg_count	      fixed bin (17) unsigned unal,
  1    20 	       3 pad1	      bit (1) unal,
  1    21 	       3 call_type	      fixed bin (18) unsigned unal,
  1    22 	       3 desc_count	      fixed bin (17) unsigned unal,
  1    23 	       3 pad2	      bit (19) unal,
  1    24 	     2 arg_ptrs	      (arg_list_arg_count refer (arg_list_with_envptr.arg_count)) ptr,
  1    25 	     2 envptr	      ptr,
  1    26 	     2 desc_ptrs	      (arg_list_arg_count refer (arg_list_with_envptr.arg_count)) ptr;
  1    27 
  1    28 
  1    29      dcl	   (
  1    30 	   Quick_call_type	      init (0),
  1    31 	   Interseg_call_type     init (4),
  1    32 	   Envptr_supplied_call_type
  1    33 			      init (8)
  1    34 	   )		      fixed bin (18) unsigned unal int static options (constant);
  1    35 
  1    36 /* The user must declare arg_list_arg_count - if an adjustable automatic structure
  1    37*   is being "liked" then arg_list_arg_count may be a parameter, in order to allocate
  1    38*   an argument list of the proper size in the user's stack
  1    39*
  1    40**/
  1    41 /* END INCLUDE FILE ... arg_list.incl.pl1 */
       81 
       82 
       83    end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    02/14/84  0844.1  mrpg_error_.pl1                   >special_ldd>on>6591>mrpg_error_.pl1
81           1    10/23/81  1948.6  arg_list.incl.pl1                 >ldd>include>arg_list.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
LEVEL                           000000 constant        char(8)                  initial array unaligned dcl 43 ref 25
LINE                      2     000102 automatic       char(4)                  level 2 packed unaligned dcl 46 set ref 20* 26*
SEP                       4(09) 000102 automatic       char(2)                  level 2 packed unaligned dcl 46 set ref 21* 26*
SEV                             000102 automatic       char(8)                  level 2 packed unaligned dcl 46 set ref 25*
alp                             000100 automatic       pointer                  dcl 42 set ref 22* 24*
code                            000166 automatic       fixed bin(35,0)          dcl 61 set ref 72* 74* 75*
com_err_                        000016 constant        entry                    external dcl 53 ref 75
cu_$arg_list_ptr                000024 constant        entry                    external dcl 56 ref 22
errct                           000010 internal static fixed bin(24,0)          array dcl 45 set ref 35* 35 64* 69 70 70 75* 75* 78*
error_table_$translation_failed 000026 external static fixed bin(35,0)          dcl 60 ref 72
i                               000157 automatic       fixed bin(17,0)          dcl 58 set ref 28* 29 30* 31 31
ioa_$general_rs                 000014 constant        entry                    external dcl 40 ref 24
iox_$put_chars                  000022 constant        entry                    external dcl 55 ref 34
iox_$user_output                000020 external static pointer                  dcl 54 set ref 34*
line                                   parameter       fixed bin(17,0)          dcl 18 ref 16 23 26
lineno                    3     000102 automatic       picture(5)               level 2 packed unaligned dcl 46 set ref 23*
mrpg_fatal                      000160 stack reference condition                dcl 59 ref 36
ret                       4(27) 000102 automatic       char(150)                level 2 packed unaligned dcl 46 set ref 24* 30 31*
reta                            000102 automatic       structure                level 1 packed unaligned dcl 46 set ref 34 34
retl                            000155 automatic       fixed bin(24,0)          dcl 52 set ref 24* 34
retv                            000156 automatic       bit(1)                   unaligned dcl 57 set ref 69* 72 79
severity                               parameter       fixed bin(17,0)          dcl 18 ref 16 25 35 35 36

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
Envptr_supplied_call_type              internal static fixed bin(18,0)          initial unsigned unaligned dcl 1-29
Interseg_call_type                     internal static fixed bin(18,0)          initial unsigned unaligned dcl 1-29
Quick_call_type                        internal static fixed bin(18,0)          initial unsigned unaligned dcl 1-29
arg_list                               based           structure                level 1 dcl 1-5
arg_list_with_envptr                   based           structure                level 1 dcl 1-17

NAMES DECLARED BY EXPLICIT CONTEXT.
init                            000255 constant        entry                    external dcl 63
mrpg_error_                     000050 constant        entry                    external dcl 16
stat                            000307 constant        entry                    external dcl 67

NAMES DECLARED BY CONTEXT OR IMPLICATION.
addr                                                   builtin function         ref 34 34
index                                                  builtin function         ref 30
substr                                                 builtin function         ref 31

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       536         566     417         546
Length       762     417        30         160     116           4

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
mrpg_error_                         184 external procedure  is an external procedure.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 errct                       mrpg_error_

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
mrpg_error_              000100 alp                         mrpg_error_
                         000102 reta                        mrpg_error_
                         000155 retl                        mrpg_error_
                         000156 retv                        mrpg_error_
                         000157 i                           mrpg_error_
                         000166 code                        mrpg_error_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_g_a               call_ext_out_desc   call_ext_out        return              signal              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      cu_$arg_list_ptr              ioa_$general_rs               iox_$put_chars

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$translation_failed                             iox_$user_output




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     16 000044        20 000057        21 000061        22 000063        23 000071        24 000102        25 000151
     26 000157        28 000165        29 000167        30 000172        31 000203        33 000207        34 000210
     35 000233        36 000237        38 000245        63 000254        64 000264        65 000275        67 000304
     69 000315        70 000321        72 000323        74 000330        75 000331        78 000366        79 000377


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
