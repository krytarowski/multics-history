	COMPILATION LISTING OF SEGMENT send_msg_
	Compiled by: Multics PL/I Compiler, Release 29, of July 28, 1986
	Compiled at: Honeywell Bull, Phx. Az., Sys-M 
	Compiled on: 08/07/87  1504.6 mst Fri
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        6*        *                                                         *
        7*        *********************************************************** */
        8 
        9 /****^  HISTORY COMMENTS:
       10*  1) change(86-07-01,Smith), approve(87-07-15,MCR7580),
       11*     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
       12*     Created.
       13*  2) change(86-11-27,Flegel), approve(86-11-27,MCR7580),
       14*     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
       15*     Approved.
       16*                                                   END HISTORY COMMENTS */
       17 
       18 /* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
       19 send_msg_:
       20      proc (p_mcb_ptr, p_major, p_minor, p_arg, p_arg_len, p_channel, p_ecode);
       21 
       22 /* : PROGRAM FUNCTION
       23*
       24*Send a message to the specified application.
       25**/
       26 
       27 /* : NOTES
       28**/
       29 
       30 
       31 /* INPUT PARAMETERS */
       32 dcl p_mcb_ptr	       ptr parameter;	    /* Pointer to callers mcb */
       33 dcl p_major	       fixed bin (17) parameter;  /* Destination major */
       34 dcl p_minor	       fixed bin (17) parameter;  /* Destination minor */
       35 dcl p_arg		       ptr parameter;	    /* Message pointer */
       36 dcl p_arg_len	       fixed bin (17) parameter;  /* Message length */
       37 dcl p_channel	       fixed bin (17) parameter;  /* Channel (FG,BG) */
       38 dcl p_ecode	       fixed bin (35) parameter;  /* Error code */
       39 
       40 /* MISC VARIABLES */
       41 dcl source_system	       fixed bin (17);
       42 dcl source_p_major	       fixed bin (17);
       43 dcl dest_system	       fixed bin (17);
       44 dcl dest_p_major	       fixed bin (17);
       45 
       46 
       47 /* EXTERNAL CALLS */
       48 dcl put_application_outbuff_
       49 		       entry (ptr, fixed bin, fixed bin, fixed bin,
       50 		       ptr, fixed bin, fixed bin (35));
       51 dcl send_mowse_message_    entry (ptr, fixed bin, fixed bin, fixed bin,
       52 		       fixed bin, fixed bin, fixed bin, ptr,
       53 		       fixed bin, fixed bin, fixed bin (35));
       54 dcl send_outbuff_data_     entry (ptr, fixed bin, fixed bin, fixed bin,
       55 		       fixed bin (35));
       56 dcl capability_$unpack     entry (fixed bin, fixed bin, fixed bin, fixed
       57 		       bin (35));
       58 
       59 
       60 /* SYSTEM CALL SUPPORT */
       61 dcl ws_error_$invalid_data_ptr
       62 		       fixed bin (35) ext static;
       63 dcl ws_error_$invalid_mcb  fixed bin (35) ext static;
       64 dcl ws_error_$invalid_capability_number
       65 		       fixed bin (35) ext static;
       66 
       67 /* BUILTINS */
       68 dcl null		       builtin;
       69 
       70 /**/
       71 
       72 /* INITIALIZATION */
       73 
       74 /* MAIN */
       75 
       76 /* : Null message then return */
       77 
       78 	if (p_arg = null) & (p_arg_len ^= 0) then do;
       79 	     p_ecode = ws_error_$invalid_data_ptr;
       80 	     return;
       81 	end;
       82 
       83 /* : Check the mcb pointer */
       84 
       85 	if p_mcb_ptr = null then do;
       86 	     p_ecode = ws_error_$invalid_mcb;
       87 	     return;
       88 	end;
       89 
       90 /* : Unpack the source and destination */
       91 
       92 	call capability_$unpack (source_system, source_p_major,
       93 	     p_mcb_ptr -> mcb.major_capability, p_ecode);
       94 	if p_ecode ^= 0 then
       95 	     return;
       96 
       97 	call capability_$unpack (dest_system, dest_p_major, p_major,
       98 	     p_ecode);
       99 	if p_ecode ^= 0 then
      100 	     return;
      101 
      102 /* : If the message is large, use the outbuffer */
      103 
      104 	if (p_arg_len > MAXIMUM_PACKET_SIZE) then do;
      105 	     if (dest_p_major < MINIMUM_CAT_ENTRY |
      106 		dest_p_major > MAXIMUM_CAT_ENTRY) then do;
      107 		p_ecode = ws_error_$invalid_capability_number;
      108 		return;
      109 	     end;
      110 
      111 	     call put_application_outbuff_ (p_mcb_ptr, dest_system,
      112 		dest_p_major, p_minor, p_arg, p_arg_len, p_ecode);
      113 	     if p_ecode ^= 0 then
      114 		return;
      115 	     call send_outbuff_data_ (p_mcb_ptr, dest_system, dest_p_major,
      116 		p_minor, p_ecode);
      117 	     return;
      118 	end;
      119 
      120 /* : Send the message */
      121 
      122 	call send_mowse_message_ (p_mcb_ptr, source_system,
      123 	     source_p_major, dest_system, dest_p_major, p_minor, LAST,
      124 	     p_arg, p_arg_len, p_channel, p_ecode);
      125 
      126 
      127 
      128 /* INCLUDE FILES */
  1     1 /*  BEGIN INCLUDE FILE:	mowse.incl.pl1			  *  *  *  *  *  *  *  *  *  *  *  *  */
  1     2 
  1     3 /****^  HISTORY COMMENTS:
  1     4*  1) change(86-09-17,Flegel), approve(86-12-16,MCR7580),
  1     5*     audit(86-12-15,Gilcrease), install(87-01-06,MR12.0-1255):
  1     6*     Created.
  1     7*  2) change(86-10-03,Flegel), approve(86-12-16,MCR7580),
  1     8*     audit(86-12-15,Gilcrease), install(87-01-06,MR12.0-1255):
  1     9*     Combined mowse_minor_caps.incl.pl1 and
  1    10*     mowse.incl.pl1 so that programmer only needs include mowse.incl.pl1
  1    11*  3) change(86-11-27,Flegel), approve(86-11-27,MCR7580),
  1    12*     audit(86-12-15,Gilcrease), install(87-01-06,MR12.0-1255):
  1    13*     Approved.
  1    14*  4) change(87-07-31,Flegel), approve(87-07-31,MCR7580),
  1    15*     audit(87-07-31,RBarstad), install(87-08-07,MR12.1-1075):
  1    16*     Changes to support async call channels.
  1    17*                                                   END HISTORY COMMENTS */
  1    18 
  1    19 /* Name of MOWSE temp seg for data */
  1    20 
  1    21 /* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
  1    22 dcl temp_seg_name	       char (6) init ("MOWSE_");
  1    23 
  1    24 /* Version number */
  1    25 
  1    26 dcl MOWSE_VERSION_	       char (8) int static options (constant) init ("version1");
  1    27 
  1    28 /* System identification */
  1    29 
  1    30 dcl LOCAL_SYSTEM	       fixed bin int static options (constant) init (32);
  1    31 dcl REMOTE_SYSTEM	       fixed bin int static options (constant) init (33);
  1    32 
  1    33 /* Status request return codes */
  1    34 
  1    35 dcl STATUS_SUCCESS	       fixed bin (8) int static options (constant)
  1    36 		       init (32);
  1    37 dcl STATUS_FAILED	       fixed bin (8) int static options (constant)
  1    38 		       init (33);
  1    39 
  1    40 /* Input/output capability buffer size limits */
  1    41 
  1    42 dcl MINIMUM_BUFFER_SIZE    fixed bin int static options (constant) init (128);
  1    43 dcl MAXIMUM_BUFFER_SIZE    fixed bin int static options (constant) init (65536);
  1    44 dcl MAXIMUM_BG_SIZE	       fixed bin int static options (constant) init (512);
  1    45 
  1    46 /* Packet size (communication) constants */
  1    47 
  1    48 dcl PACKET_SIZE	       fixed bin int static options (constant) init (124);
  1    49 dcl MAXIMUM_PACKET_SIZE    fixed bin int static options (constant) init (118);
  1    50 
  1    51 /* Query message constants */
  1    52 
  1    53 dcl SEND_QUERY	       fixed bin int static options (constant) init (128);
  1    54 dcl ACCEPT	       fixed bin int static options (constant) init (32);
  1    55 dcl REJECT	       fixed bin int static options (constant) init (33);
  1    56 
  1    57 /* Trace information constants */
  1    58 
  1    59 dcl RECEIVE	       fixed bin int static options (constant) init (1);
  1    60 dcl SEND		       fixed bin int static options (constant) init (0);
  1    61 
  1    62 /* Limits on dedicated minor capabilities */
  1    63 
  1    64 dcl MINIMUM_SYSTEM_MINOR   fixed bin int static options (constant) init (32);
  1    65 dcl MAXIMUM_SYSTEM_MINOR   fixed bin int static options (constant) init (63);
  1    66 dcl MINIMUM_USER_MINOR     fixed bin int static options (constant) init (64);
  1    67 dcl MAXIMUM_USER_MINOR     fixed bin int static options (constant) init (127);
  1    68 
  1    69 /* Dedicated Minor Capabilities */
  1    70 
  1    71 dcl LAST		       fixed bin int static options (constant) init (0);
  1    72 dcl EXECUTE_COMMAND_REPLY  fixed bin int static options (constant) init (32);
  1    73 dcl EXECUTE_CAPABILITY_REPLY
  1    74 		       fixed bin int static options (constant) init (33);
  1    75 dcl FAIL_CAPABILITY	       fixed bin int static options (constant) init (33);
  1    76 dcl INTERNAL	       fixed bin int static options (constant) init (32);
  1    77 dcl EXECUTE_COMMAND	       fixed bin int static options (constant) init (34);
  1    78 dcl ADD_TO_REMOTE_CAT      fixed bin int static options (constant) init (35);
  1    79 dcl DELETE_FROM_REMOTE_CAT fixed bin int static options (constant) init (36);
  1    80 dcl SUSPEND_APPLICATION    fixed bin int static options (constant) init (37);
  1    81 dcl RESUME_APPLICATION     fixed bin int static options (constant) init (38);
  1    82 dcl TERMINATE_APPLICATION  fixed bin int static options (constant) init (39);
  1    83 dcl RESET_APPLICATION      fixed bin int static options (constant) init (40);
  1    84 dcl RESET_REPLY	       fixed bin int static options (constant) init (41);
  1    85 dcl WAKE_UP	       fixed bin int static options (constant) init (42);
  1    86 dcl STATUS	       fixed bin int static options (constant) init (43);
  1    87 dcl OVERFLOWED_BUFFER      fixed bin int static options (constant) init (44);
  1    88 dcl SYSTEM_ERROR	       fixed bin int static options (constant) init (45);
  1    89 dcl QUERY_REPLY	       fixed bin int static options (constant) init (46);
  1    90 dcl RESPONSE_CONNECT       fixed bin int static options (constant) init (47);
  1    91 dcl RESPONSE_DISCONNECT    fixed bin int static options (constant) init (48);
  1    92 dcl REQUEST_CONNECT	       fixed bin int static options (constant) init (49);
  1    93 dcl REQUEST_DISCONNECT     fixed bin int static options (constant) init (50);
  1    94 dcl CONTINUE	       fixed bin int static options (constant) init (51);
  1    95 dcl MORE		       fixed bin int static options (constant) init (52);
  1    96 dcl SET_SLEEP_FLAG	       fixed bin int static options (constant) init (53);
  1    97 dcl RESET_SLEEP_FLAG       fixed bin int static options (constant) init (54);
  1    98 dcl SET_SUSPEND	       fixed bin int static options (constant) init (55);
  1    99 dcl RESET_SUSPEND	       fixed bin int static options (constant) init (56);
  1   100 dcl STATUS_REPLY	       fixed bin int static options (constant) init (57);
  1   101 
  1   102 /* Foreground */
  1   103 
  1   104 dcl FG_CONTROL_MESSAGE     fixed bin int static options (constant) init (33);
  1   105 dcl FG_BREAK	       fixed bin int static options (constant) init (34);
  1   106 dcl FG_TERMINAL_DATA       fixed bin int static options (constant) init (35);
  1   107 dcl FG_MORE_DATA	       fixed bin int static options (constant) init (36);
  1   108 dcl PUT_TO_BACKGROUND_BUFFER
  1   109 		       fixed bin int static options (constant) init (37);
  1   110 dcl PUT_TO_QUERY_MESSAGE_BUFFER
  1   111 		       fixed bin int static options (constant) init (38);
  1   112 
  1   113 /*  END INCLUDE FILE:	mowse.incl.pl1			  *  *  *  *  *  *  *  *  *  *  *  *  */
      129 
  2     1 /*  BEGIN INCLUDE FILE:	mowse_messages.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  */
  2     2 
  2     3 /****^  HISTORY COMMENTS:
  2     4*  1) change(86-05-17,Smith), approve(86-12-16,MCR7580),
  2     5*     audit(86-12-15,Gilcrease), install(87-01-06,MR12.0-1255):
  2     6*     Created to define MOWSE message formats.
  2     7*  2) change(86-11-27,Flegel), approve(86-11-27,MCR7580),
  2     8*     audit(86-12-15,Gilcrease), install(87-01-06,MR12.0-1255):
  2     9*     Approved.
  2    10*  3) change(87-07-31,Flegel), approve(87-07-31,MCR7580),
  2    11*     audit(87-07-31,RBarstad), install(87-08-07,MR12.1-1075):
  2    12*     Changes to support async call channels.
  2    13*                                                   END HISTORY COMMENTS */
  2    14 
  2    15 /* Message Channels */
  2    16 /* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
  2    17 dcl BG		       fixed bin int static options (constant) init (0);
  2    18 					    /* Fore ground */
  2    19 dcl FG		       fixed bin int static options (constant) init (1);
  2    20 					    /* Back ground */
  2    21 
  2    22 /* Message types: 
  2    23*
  2    24*Each intersystem message is labelled with one of the following types.  Upon
  2    25*reciept of the message suitable action is undertaken.  This scheme was
  2    26*introduced to allow the transmission of messsages longer than the maximum
  2    27*packet size.
  2    28**/
  2    29 
  2    30 /* Templates for the various messages used throughout the mowse environment.
  2    31*   Non-allocatable */
  2    32 
  2    33 dcl message_len	       fixed bin init (6);
  2    34 dcl message_ptr	       ptr;
  2    35 
  2    36 /* expected format of message */
  2    37 
  2    38 dcl 01 input_message       based (message_ptr),
  2    39        02 header,
  2    40 	03 system	       char (1) unal,
  2    41 	03 major	       char (1) unal,
  2    42 	03 minor	       char (1) unal,
  2    43 	03 source_system char (1) unal,
  2    44 	03 source_major  char (1) unal,
  2    45        02 data	       char (message_len - 5) unal;
  2    46 
  2    47 /* expected format of message to be handled by mowse internal execute command */
  2    48 
  2    49 dcl 01 execom_message      based (message_ptr),
  2    50        02 header,
  2    51 	03 system	       char (1) unal,
  2    52 	03 major	       char (1) unal,
  2    53 	03 minor	       char (1) unal,
  2    54 	03 source_system char (1) unal,
  2    55 	03 source_major  char (1) unal,
  2    56        02 data,
  2    57 	03 cmd_id	       fixed bin (17) unal,
  2    58 	03 command       char (message_len - 7) unal;
  2    59 
  2    60 /* expected format of message recieved when a request to alter a CAT table
  2    61*   is made by a remote system */
  2    62 
  2    63 dcl 01 alter_cat_message   based (message_ptr),
  2    64        02 header,
  2    65 	03 system	       char (1) unal,
  2    66 	03 major	       char (1) unal,
  2    67 	03 minor	       char (1) unal,
  2    68 	03 source_system char (1) unal,
  2    69 	03 source_major  char (1) unal,
  2    70        02 data,
  2    71 	03 major	       char unal,
  2    72 	03 major_name    char (CAPABILITY_NAME_LENGTH) unal;
  2    73 
  2    74 /* Template used to parse message recieved from some remote system. */
  2    75 
  2    76 dcl 01 event_message       based (message_ptr),
  2    77        02 header,
  2    78 	03 system	       char (1) unal,
  2    79 	03 major	       char (1) unal,
  2    80 	03 msg_type      char (1) unal;
  2    81 
  2    82 /* format of message of MORE type */
  2    83 
  2    84 dcl 01 request_more_message
  2    85 		       based (message_ptr),
  2    86        02 header,
  2    87 	03 system	       char (1) unal,
  2    88 	03 major	       char (1) unal,
  2    89 	03 more	       char (1) unal,
  2    90 	03 source_system char (1) unal,
  2    91 	03 source_major  char (1) unal,
  2    92 	03 source_minor  char (1) unal;
  2    93 
  2    94 /* format of message of CONTINUE type */
  2    95 
  2    96 dcl 01 more_remaining_message
  2    97 		       based (message_ptr),
  2    98        02 header,
  2    99 	03 system	       char (1) unal,
  2   100 	03 major	       char (1) unal,
  2   101 	03 continue      char (1) unal,
  2   102 	03 minor	       char (1) unal,
  2   103 	03 source_system char (1) unal,
  2   104 	03 source_major  char (1) unal,
  2   105        02 data,
  2   106 	03 data_buf      char (message_len - 6) unal;
  2   107 
  2   108 /* format of message of LAST type */
  2   109 
  2   110 dcl 01 last_message	       based (message_ptr),
  2   111        02 header,
  2   112 	03 system	       char (1) unal,
  2   113 	03 major	       char (1) unal,
  2   114 	03 minor	       char (1) unal,
  2   115 	03 source_system char (1) unal,
  2   116 	03 source_major  char (1) unal,
  2   117        02 data,
  2   118 	03 data_buf      char (message_len - 5) unal;
  2   119 
  2   120 /* Execute_command_reply message format */
  2   121 
  2   122 dcl 01 execom_reply_msg    based (message_ptr),
  2   123        02 header,
  2   124 	03 system	       char (1) unal,
  2   125 	03 major	       char (1) unal,
  2   126 	03 minor	       char (1) unal,
  2   127 	03 source_system char (1) unal,
  2   128 	03 source_major  char (1) unal,
  2   129        02 data,
  2   130 	03 cmd_id	       fixed bin unal,
  2   131 	03 status	       char unal;
  2   132 
  2   133 /* Used to manage partial messages destined for any application */
  2   134 
  2   135 dcl msg_node_ptr	       ptr;
  2   136 dcl 01 message_node	       based (msg_node_ptr),
  2   137        02 major	       fixed bin,
  2   138        02 partial_msg_list_ptr
  2   139 		       ptr,
  2   140        02 next_node	       ptr,
  2   141        02 prev_node	       ptr,
  2   142        02 last_part_msg    ptr;
  2   143 
  2   144 dcl part_msg_ptr	       ptr;
  2   145 dcl 01 partial_message     based (part_msg_ptr),
  2   146        02 msg_ptr	       ptr,
  2   147        02 msg_len	       fixed bin,
  2   148        02 next_msg	       ptr;
  2   149 
  2   150 
  2   151 dcl part_msg_length	       fixed bin;
  2   152 dcl part_msg	       char (part_msg_length) based;
  2   153 
  2   154 /* Trace information structure */
  2   155 dcl 01 trace_message_info,
  2   156        02 direction	       fixed bin,
  2   157        02 from_system      fixed bin,
  2   158        02 from_major       fixed bin,
  2   159        02 dest_system      fixed bin,
  2   160        02 dest_major       fixed bin,
  2   161        02 dest_minor       fixed bin,
  2   162        02 msg_type	       fixed bin,
  2   163        02 message	       char (PACKET_SIZE) var;
  2   164 
  2   165 /*  END INCLUDE FILE:	mowse_messages.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  */
      130 
  3     1 /*  BEGIN INCLUDE FILE:	mowse_info.incl.pl1			  *  *  *  *  *  *  *  *  *  *  *  *  */
  3     2 
  3     3 /****^  HISTORY COMMENTS:
  3     4*  1) change(86-07-19,Smith), approve(87-07-15,MCR7580),
  3     5*     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
  3     6*     Created to define MOWSE information to be
  3     7*     placed into a temp segment.
  3     8*  2) change(86-11-27,Flegel), approve(86-11-27,MCR7580),
  3     9*     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
  3    10*     Approved.
  3    11*  3) change(87-02-25,Flegel), approve(87-02-25,MCR7580),
  3    12*     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
  3    13*     Added bit switches to the init_mowse_info structure as well as the force
  3    14*     flag.
  3    15*  4) change(87-03-24,Flegel), approve(87-03-24,MCR7580),
  3    16*     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
  3    17*     Added open_struc for passing EOP and escape char info from attach_mowse
  3    18*     to mowse_io_.
  3    19*                                                   END HISTORY COMMENTS */
  3    20 
  3    21 /* CAT index limits */
  3    22 
  3    23 /* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
  3    24 dcl MINIMUM_CAT_ENTRY      fixed bin int static options (constant) init (33);
  3    25 dcl MAXIMUM_CAT_ENTRY      fixed bin int static options (constant) init (64);
  3    26 
  3    27 dcl CAPABILITY_NAME_LENGTH fixed bin int static options (constant) init (32);
  3    28 
  3    29 /* Mowse information structure */
  3    30 
  3    31 dcl 01 mowse_info	       based aligned,
  3    32        02 version	       char (8),
  3    33        02 local_cat	       dimension (33:64),	    /* Multics CAT table */
  3    34 	03 flags,
  3    35 	   04 reset      bit (1) unal,	    /* Reset in progress */
  3    36 	   04 suspended  bit (1) unal,	    /* Suspended applciation */
  3    37 	   04 status     bit (1) unal,	    /* Status pending */
  3    38 	   04 mbz1       bit (33) unal,
  3    39 	03 sleep_time    fixed bin,		    /* Time application is sleeping */
  3    40 	03 mcb_ptr       ptr,		    /* Capability MCB */
  3    41        02 remote_cat       dimension (33:64),	    /* PC CAT table */
  3    42 	03 major_capability
  3    43 		       fixed bin,		    /* Capability number */
  3    44 	03 capability_name char (32),		    /* Name of capability */
  3    45 	03 flags,
  3    46 	   04 reset      bit (1) unal,	    /* Reset in progress */
  3    47 	   04 suspended  bit (1) unal,	    /* Suspended capability */
  3    48 	   04 sleep_time bit (1) unal,	    /* Application sleeping */
  3    49 	   04 mbz2       bit (33) unal,
  3    50        02 message_manager_info,		    /* Info for processing messages */
  3    51 	03 head_list_ptr ptr,		    /* Head of message list */
  3    52 	03 tail_list_ptr ptr,		    /* Tail of message list */
  3    53 	03 pending_messages
  3    54 		       fixed bin,		    /* Number of pending messages */
  3    55        02 mowse_flags,
  3    56 	03 trace	       bit (1) unal,	    /* Message tracing facility active */
  3    57 	03 debug	       bit (1) unal,	    /* Debugging packets facility active */
  3    58 	03 error_handled bit (1) unal,	    /* In mowse_error_handler procedure */
  3    59 	03 mbz1	       bit (33) unal,
  3    60 	03 trace_file_iocb ptr,		    /* Trace file iocb */
  3    61 	03 debug_file_iocb ptr,		    /* Debug file iocb */
  3    62        02 init_mowse_info_ptr
  3    63 		       ptr;		    /* Initialization information */
  3    64 
  3    65 /* MOWSE initialization information */
  3    66 
  3    67 dcl init_mowse_info_ptr    ptr;
  3    68 dcl 01 init_mowse_info     based (init_mowse_info_ptr),
  3    69        02 version	       char (8),
  3    70        02 flags,				    /* Bit switches */
  3    71 	03 trace_sw      bit (1) unal,
  3    72 	03 debug_sw      bit (1) unal,
  3    73 	03 io_switch_sw  bit (1) unal,
  3    74 	03 force_sw      bit (1) unal,
  3    75 	03 start_up_sw   bit (1) unal,
  3    76 	03 escape_sw     bit (1) unal,
  3    77 	03 network_sw    bit (1) unal,
  3    78 	03 pad	       bit (29) unal,
  3    79        02 escape,
  3    80 	03 chars	       (0:255) bit (1) unal,	    /* Character escapes */
  3    81 	03 pad	       bit (32) unal,
  3    82        02 trace	       char (512) var,	    /* Trace file name */
  3    83        02 debug	       char (512) var,	    /* Debug file name */
  3    84        02 io_switch	       char (512) var,	    /* Io switch name of mowse_io_ attachment */
  3    85        02 startup	       (MAXIMUM_CAT_ENTRY - MINIMUM_CAT_ENTRY + 1)
  3    86 		       char (168) var;	    /* Capability to be autoloaded */
  3    87 
  3    88 /* Open description structure (this is padded to character bounds as it
  3    89*   is a character overlay structure - passed as a character string) */
  3    90 
  3    91 dcl open_struc_ptr	       ptr;
  3    92 dcl 01 open_struc	       based (open_struc_ptr),
  3    93        02 flags,
  3    94 	03 network_sw    bit (1) unal,
  3    95 	03 escape_sw     bit (1) unal,
  3    96 	03 pad	       bit (7) unal,
  3    97        02 escape,
  3    98 	03 switches      (0:255) bit (1) unal,
  3    99 	03 pad	       bit (32) unal,
  3   100        02 mbz	       bit (16) unal;
  3   101 
  3   102 /*  END INCLUDE FILE:	mowse_info.incl.pl1			  *  *  *  *  *  *  *  *  *  *  *  *  */
      131 
  4     1 /*  BEGIN INCLUDE FILE:	mowse_mcb.incl.pl1			  *  *  *  *  *  *  *  *  *  *  *  *  */
  4     2 
  4     3 /****^  HISTORY COMMENTS:
  4     4*  1) change(86-05-17,Smith), approve(87-07-15,MCR7580),
  4     5*     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
  4     6*     Created to define the mcb (Mowse Control Block)
  4     7*     for information on capabilities.
  4     8*  2) change(86-11-27,Flegel), approve(86-11-27,MCR7580),
  4     9*     audit(87-07-30,RBarstad), install(87-08-07,MR12.1-1075):
  4    10*     Approved.
  4    11*                                                   END HISTORY COMMENTS */
  4    12 /* MOWSE control block */
  4    13 /* format: style4,indattr,ifthen,^indcomtxt,thendo,^indproc,^indblkcom,initcol1,declareind8,dclind4,struclvlind3,comcol55 */
  4    14 dcl 01 mcb	       based,
  4    15        02 version	       char (8),
  4    16        02 capability_name  char (32),		    /* Name of capability */
  4    17        02 major_capability fixed bin (17),	    /* Capability number */
  4    18        02 inbuff_length    fixed bin (17),	    /* Length of buffer */
  4    19        02 inbuff_position_index
  4    20 		       fixed bin (17),	    /* Current position in inbuffer */
  4    21        02 inbuff_data_length
  4    22 		       fixed bin (17),	    /* Amoiunt of data in inbuffer */
  4    23        02 outbuff_length   fixed bin (17),	    /* Length of outbuffer */
  4    24        02 mbz1	       bit (36) unal,
  4    25        02 entry_var	       entry options (variable),  /* Message processor entry point of capability */
  4    26        02 data_block_ptr   ptr,		    /* Capability  data */
  4    27        02 inbuff	       ptr,		    /* Message input buffer */
  4    28        02 outbuff_list_start
  4    29 		       ptr,		    /* Pointer to outbuffer data */
  4    30        02 outbuff_list_end ptr,		    /* Last node in outbuffer data */
  4    31        02 iocb_ptr	       ptr,		    /* IOCB to mowse_io_ */
  4    32        02 mowse_info_ptr   ptr;		    /* MOWSE information */
  4    33 					    /* Output buffer linked list node */
  4    34 dcl 01 output_buffer       based,
  4    35        02 destination_system
  4    36 		       char,		    /* Destination of message */
  4    37        02 destination_major char,
  4    38        02 destination_minor char,
  4    39        02 buffer_position  fixed bin,		    /* Position in buffer of message */
  4    40        02 buffer_length    fixed bin,		    /* Length of buffer */
  4    41        02 next_buffer      ptr,		    /* Next buffer of message */
  4    42        02 data	       ptr;		    /* Pointer to message */
  4    43 
  4    44 /*  END INCLUDE FILE:	mowse_mcb.incl.pl1			  *  *  *  *  *  *  *  *  *  *  *  *  */
      132 
      133 
      134 /* : END */
      135      end send_msg_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    08/07/87  1454.3  send_msg_.pl1                     >special_ldd>install>MR12.1-1075>send_msg_.pl1
129          1    08/07/87  1445.8  mowse.incl.pl1                    >special_ldd>install>MR12.1-1075>mowse.incl.pl1
130          2    08/07/87  1447.1  mowse_messages.incl.pl1           >special_ldd>install>MR12.1-1075>mowse_messages.incl.pl1
131          3    08/07/87  1445.8  mowse_info.incl.pl1               >special_ldd>install>MR12.1-1075>mowse_info.incl.pl1
132          4    08/07/87  1447.6  mowse_mcb.incl.pl1                >special_ldd>install>MR12.1-1075>mowse_mcb.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
LAST                            000000 constant        fixed bin(17,0)          initial dcl 1-71 set ref 122*
MAXIMUM_CAT_ENTRY                      constant        fixed bin(17,0)          initial dcl 3-25 ref 105
MAXIMUM_PACKET_SIZE                    constant        fixed bin(17,0)          initial dcl 1-49 ref 104
MINIMUM_CAT_ENTRY                      constant        fixed bin(17,0)          initial dcl 3-24 ref 105
PACKET_SIZE                            constant        fixed bin(17,0)          initial dcl 1-48 ref 2-155
capability_$unpack              000016 constant        entry                    external dcl 56 ref 92 97
dest_p_major                    000103 automatic       fixed bin(17,0)          dcl 44 set ref 97* 105 105 111* 115* 122*
dest_system                     000102 automatic       fixed bin(17,0)          dcl 43 set ref 97* 111* 115* 122*
major_capability         12            based           fixed bin(17,0)          level 2 dcl 4-14 set ref 92*
mcb                                    based           structure                level 1 unaligned dcl 4-14
message_len                     000106 automatic       fixed bin(17,0)          initial dcl 2-33 set ref 2-33*
null                                                   builtin function         dcl 68 ref 78 85
p_arg                                  parameter       pointer                  dcl 35 set ref 19 78 111* 122*
p_arg_len                              parameter       fixed bin(17,0)          dcl 36 set ref 19 78 104 111* 122*
p_channel                              parameter       fixed bin(17,0)          dcl 37 set ref 19 122*
p_ecode                                parameter       fixed bin(35,0)          dcl 38 set ref 19 79* 86* 92* 94 97* 99 107* 111*
                                                                                  113 115* 122*
p_major                                parameter       fixed bin(17,0)          dcl 33 set ref 19 97*
p_mcb_ptr                              parameter       pointer                  dcl 32 set ref 19 85 92 111* 115* 122*
p_minor                                parameter       fixed bin(17,0)          dcl 34 set ref 19 111* 115* 122*
put_application_outbuff_        000010 constant        entry                    external dcl 48 ref 111
send_mowse_message_             000012 constant        entry                    external dcl 51 ref 122
send_outbuff_data_              000014 constant        entry                    external dcl 54 ref 115
source_p_major                  000101 automatic       fixed bin(17,0)          dcl 42 set ref 92* 122*
source_system                   000100 automatic       fixed bin(17,0)          dcl 41 set ref 92* 122*
temp_seg_name                   000104 automatic       char(6)                  initial unaligned dcl 1-22 set ref 1-22*
ws_error_$invalid_capability_number
                                000024 external static fixed bin(35,0)          dcl 64 ref 107
ws_error_$invalid_data_ptr      000020 external static fixed bin(35,0)          dcl 61 ref 79
ws_error_$invalid_mcb           000022 external static fixed bin(35,0)          dcl 63 ref 86

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ACCEPT                                 internal static fixed bin(17,0)          initial dcl 1-54
ADD_TO_REMOTE_CAT                      internal static fixed bin(17,0)          initial dcl 1-78
BG                                     internal static fixed bin(17,0)          initial dcl 2-17
CAPABILITY_NAME_LENGTH                 internal static fixed bin(17,0)          initial dcl 3-27
CONTINUE                               internal static fixed bin(17,0)          initial dcl 1-94
DELETE_FROM_REMOTE_CAT                 internal static fixed bin(17,0)          initial dcl 1-79
EXECUTE_CAPABILITY_REPLY               internal static fixed bin(17,0)          initial dcl 1-73
EXECUTE_COMMAND                        internal static fixed bin(17,0)          initial dcl 1-77
EXECUTE_COMMAND_REPLY                  internal static fixed bin(17,0)          initial dcl 1-72
FAIL_CAPABILITY                        internal static fixed bin(17,0)          initial dcl 1-75
FG                                     internal static fixed bin(17,0)          initial dcl 2-19
FG_BREAK                               internal static fixed bin(17,0)          initial dcl 1-105
FG_CONTROL_MESSAGE                     internal static fixed bin(17,0)          initial dcl 1-104
FG_MORE_DATA                           internal static fixed bin(17,0)          initial dcl 1-107
FG_TERMINAL_DATA                       internal static fixed bin(17,0)          initial dcl 1-106
INTERNAL                               internal static fixed bin(17,0)          initial dcl 1-76
LOCAL_SYSTEM                           internal static fixed bin(17,0)          initial dcl 1-30
MAXIMUM_BG_SIZE                        internal static fixed bin(17,0)          initial dcl 1-44
MAXIMUM_BUFFER_SIZE                    internal static fixed bin(17,0)          initial dcl 1-43
MAXIMUM_SYSTEM_MINOR                   internal static fixed bin(17,0)          initial dcl 1-65
MAXIMUM_USER_MINOR                     internal static fixed bin(17,0)          initial dcl 1-67
MINIMUM_BUFFER_SIZE                    internal static fixed bin(17,0)          initial dcl 1-42
MINIMUM_SYSTEM_MINOR                   internal static fixed bin(17,0)          initial dcl 1-64
MINIMUM_USER_MINOR                     internal static fixed bin(17,0)          initial dcl 1-66
MORE                                   internal static fixed bin(17,0)          initial dcl 1-95
MOWSE_VERSION_                         internal static char(8)                  initial unaligned dcl 1-26
OVERFLOWED_BUFFER                      internal static fixed bin(17,0)          initial dcl 1-87
PUT_TO_BACKGROUND_BUFFER               internal static fixed bin(17,0)          initial dcl 1-108
PUT_TO_QUERY_MESSAGE_BUFFER            internal static fixed bin(17,0)          initial dcl 1-110
QUERY_REPLY                            internal static fixed bin(17,0)          initial dcl 1-89
RECEIVE                                internal static fixed bin(17,0)          initial dcl 1-59
REJECT                                 internal static fixed bin(17,0)          initial dcl 1-55
REMOTE_SYSTEM                          internal static fixed bin(17,0)          initial dcl 1-31
REQUEST_CONNECT                        internal static fixed bin(17,0)          initial dcl 1-92
REQUEST_DISCONNECT                     internal static fixed bin(17,0)          initial dcl 1-93
RESET_APPLICATION                      internal static fixed bin(17,0)          initial dcl 1-83
RESET_REPLY                            internal static fixed bin(17,0)          initial dcl 1-84
RESET_SLEEP_FLAG                       internal static fixed bin(17,0)          initial dcl 1-97
RESET_SUSPEND                          internal static fixed bin(17,0)          initial dcl 1-99
RESPONSE_CONNECT                       internal static fixed bin(17,0)          initial dcl 1-90
RESPONSE_DISCONNECT                    internal static fixed bin(17,0)          initial dcl 1-91
RESUME_APPLICATION                     internal static fixed bin(17,0)          initial dcl 1-81
SEND                                   internal static fixed bin(17,0)          initial dcl 1-60
SEND_QUERY                             internal static fixed bin(17,0)          initial dcl 1-53
SET_SLEEP_FLAG                         internal static fixed bin(17,0)          initial dcl 1-96
SET_SUSPEND                            internal static fixed bin(17,0)          initial dcl 1-98
STATUS                                 internal static fixed bin(17,0)          initial dcl 1-86
STATUS_FAILED                          internal static fixed bin(8,0)           initial dcl 1-37
STATUS_REPLY                           internal static fixed bin(17,0)          initial dcl 1-100
STATUS_SUCCESS                         internal static fixed bin(8,0)           initial dcl 1-35
SUSPEND_APPLICATION                    internal static fixed bin(17,0)          initial dcl 1-80
SYSTEM_ERROR                           internal static fixed bin(17,0)          initial dcl 1-88
TERMINATE_APPLICATION                  internal static fixed bin(17,0)          initial dcl 1-82
WAKE_UP                                internal static fixed bin(17,0)          initial dcl 1-85
alter_cat_message                      based           structure                level 1 packed unaligned dcl 2-63
event_message                          based           structure                level 1 packed unaligned dcl 2-76
execom_message                         based           structure                level 1 packed unaligned dcl 2-49
execom_reply_msg                       based           structure                level 1 packed unaligned dcl 2-122
init_mowse_info                        based           structure                level 1 unaligned dcl 3-68
init_mowse_info_ptr                    automatic       pointer                  dcl 3-67
input_message                          based           structure                level 1 packed unaligned dcl 2-38
last_message                           based           structure                level 1 packed unaligned dcl 2-110
message_node                           based           structure                level 1 unaligned dcl 2-136
message_ptr                            automatic       pointer                  dcl 2-34
more_remaining_message                 based           structure                level 1 packed unaligned dcl 2-96
mowse_info                             based           structure                level 1 dcl 3-31
msg_node_ptr                           automatic       pointer                  dcl 2-135
open_struc                             based           structure                level 1 packed unaligned dcl 3-92
open_struc_ptr                         automatic       pointer                  dcl 3-91
output_buffer                          based           structure                level 1 unaligned dcl 4-34
part_msg                               based           char                     unaligned dcl 2-152
part_msg_length                        automatic       fixed bin(17,0)          dcl 2-151
part_msg_ptr                           automatic       pointer                  dcl 2-144
partial_message                        based           structure                level 1 unaligned dcl 2-145
request_more_message                   based           structure                level 1 packed unaligned dcl 2-84
trace_message_info                     automatic       structure                level 1 unaligned dcl 2-155

NAME DECLARED BY EXPLICIT CONTEXT.
send_msg_                       000016 constant        entry                    external dcl 19

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       356         404     235         366
Length       670     235        26         247     121           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
send_msg_                           124 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
send_msg_                000100 source_system               send_msg_
                         000101 source_p_major              send_msg_
                         000102 dest_system                 send_msg_
                         000103 dest_p_major                send_msg_
                         000104 temp_seg_name               send_msg_
                         000106 message_len                 send_msg_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return_mac          alloc_auto_adj      ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
capability_$unpack            put_application_outbuff_      send_mowse_message_           send_outbuff_data_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
ws_error_$invalid_capability_number                         ws_error_$invalid_data_ptr    ws_error_$invalid_mcb




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     19 000010    1   22 000023    2   33 000025    2  155 000027        78 000035        79 000044        80 000046
     85 000047        86 000053        87 000055        92 000056        94 000074        97 000077        99 000114
    104 000117       105 000122       107 000127       108 000132       111 000133       113 000156       115 000161
    117 000200       122 000201       135 000234


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
