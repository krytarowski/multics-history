	COMPILATION LISTING OF SEGMENT !BBBJPNdcQMgwLg
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 12/27/84  0756.0 mst Thu
	    Options: table map

        1 /* ******************************************************
        2*   *                                                    *
        3*   * Copyright, (C) Honeywell Limited, 1983             *
        4*   *                                                    *
        5*   * Copyright (c) 1972 by Massachusetts Institute of   *
        6*   * Technology and Honeywell Information Systems, Inc. *
        7*   *                                                    *
        8*   ****************************************************** */
        9 
       10 /* format: style3,^delnl,linecom */
       11 fort_data:
       12      procedure;
       13 
       14 /* This procedure exists in order to create the builtin function data base for
       15*   the fortran optimizing compiler.  It is based on an earlier version by
       16*   Jayne Keller.
       17*
       18*Written:	04 Apr 78, PES
       19*
       20*Modified:
       21*	22 Jun 84, MHM -- Install typeless functions support.
       22*	28 Oct 80, CRD -- Add rest of Fortran 77 intrinsics.
       23*	26 Dec 79, PES -- Add new ANSI77 character-string diddling functions.
       24**/
       25 
       26 dcl	create_data_segment_
       27 			ext entry (ptr, fixed bin (35) aligned);
       28 dcl	com_err_		entry options (variable);
       29 dcl	1 cdsa		like cds_args aligned;
       30 dcl	(get_temp_segments_, release_temp_segments_)
       31 			entry (char (*), (*) ptr, fixed bin (35));
       32 dcl	cleanup		condition;
       33 dcl	code		fixed bin (35);
       34 dcl	myname		char (12) init ("fort_data") static internal options (constant);
       35 dcl	segptrs		(1) ptr init (null ());
       36 
       37 dcl	addr		builtin;
       38 dcl	hbound		builtin;
       39 
       40 dcl	(
       41 	intr		init (1),
       42 	real		init (2),
       43 	dp		init (3),
       44 	cmpx		init (4),
       45 	logical		init (5),
       46 	character		init (6),
       47 	typeless		init (7)
       48 	)		internal static options (constant) fixed bin;
       49 
       50 dcl	(i, abs, alog, alog10, amax1, amin1, amod, atan, atan2, cabs, ccos,
       51 	cexp, cchar, clog, cos, cosh, csin, csqrt, dabs, datan, tan, dtan,
       52 	dtanh, asin, dasin, acos, dacos, datan2, dcos, dcosh, ddim, dexp,
       53 	dim, dlog, dlog10, dmax1, dmin1, dmod, dsign, dsin, dsinh, dsqrt,
       54 	exp, iabs, ichar, idim, iindex, isign, len, lge, lgt, lle, llt, max,
       55 	max0, min, min0, mod, sign, sin, sinh, sqrt, tanh, aint, dint,
       56 	anint, dnint, nint, idnint, and, bool, compl, fld, ilr, ils, irl,
       57 	irs, or, xor
       58 	)		fixed bin;
       59 
  1     1 /* BEGIN INCLUDE FILE cds_args.incl.pl1 */
  1     2 
  1     3 dcl 1 cds_args based aligned,
  1     4     2 sections (2),
  1     5       3 p ptr,					/* pointer to data for text/static section */
  1     6       3 len fixed bin (18),				/* size of text/static section */
  1     7       3 struct_name char (32),			/* name of declared structure for this section */
  1     8     2 seg_name char (32),				/* name to create segment by */
  1     9     2 num_exclude_names fixed bin,			/* number of names in exclude array */
  1    10     2 exclude_array_ptr ptr,				/* pointer to array of exclude names */
  1    11     2 switches,					/* control switches */
  1    12       3 defs_in_link bit (1) unal,			/* says put defs in linkage */
  1    13       3 separate_static bit (1) unal,			/* says separate static section is wanted */
  1    14       3 have_text bit (1) unal,			/* ON if text section given */
  1    15       3 have_static bit (1) unal,			/* ON if static section given */
  1    16       3 pad bit (32) unal;
  1    17 
  1    18 dcl  exclude_names (1) char (32) based;			/* pointed to be cds_args.exclude_array_ptr */
  1    19 
  1    20 /* END INCLUDE FILE cds_args.incl.pl1 */
       60 
       61 
       62 /* The structure fort_data$ explains to the compiler about all acceptable
       63*   builtin functions, both internal and external.  The fields have the
       64*   following meanings:
       65*
       66*   generic_name - On if this is the name of a generic function.
       67*
       68*   generic_func - An array of indices referencing this table. One entry for
       69*   each data type. A zero entry indicates no builtin for that data type.
       70*
       71*   result_type - Specify attributes for result.
       72**/
       73 dcl	p		ptr;
       74 
       75 dcl	1 fort_data	based (p),
       76 	  2 builtin_name,
       77 	    3 number_of_names
       78 			fixed bin (15),
       79 	    3 description	(93),
       80 	      4 name	char (8) aligned,
       81 	      4 generic_name
       82 			bit (1) unaligned,
       83 	      4 reserved	bit (35) unaligned,
       84 	      4 generic_func
       85 			(4) fixed bin,
       86 	      4 result_type fixed bin;
       87 
       88 	on cleanup
       89 	     call release_temp_segments_ (myname, segptrs, (0));
       90 	call get_temp_segments_ (myname, segptrs, code);
       91 	if code ^= 0
       92 	then do;
       93 		call com_err_ (code, myname, "Getting temp segments");
       94 		return;
       95 	     end;
       96 
       97 	p = segptrs (1);
       98 
       99 /* Initialize and create the data base. */
      100 
      101 	i = 0;
      102 
      103 	call build_entry ("abs     ", real);
      104 	abs = i;
      105 	call build_entry ("iabs    ", intr);
      106 	iabs = i;
      107 	call build_entry ("dabs    ", dp);
      108 	dabs = i;
      109 	call build_entry ("cabs    ", real);
      110 	cabs = i;
      111 	call build_entry ("alog    ", real);
      112 	alog = i;
      113 	call build_entry ("dlog    ", dp);
      114 	dlog = i;
      115 	call build_entry ("clog    ", cmpx);
      116 	clog = i;
      117 	call build_entry ("alog10  ", real);
      118 	alog10 = i;
      119 	call build_entry ("dlog10  ", dp);
      120 	dlog10 = i;
      121 	call build_entry ("atan    ", real);
      122 	atan = i;
      123 	call build_entry ("datan   ", dp);
      124 	datan = i;
      125 	call build_entry ("atan2   ", real);
      126 	atan2 = i;
      127 	call build_entry ("datan2  ", dp);
      128 	datan2 = i;
      129 	call build_entry ("cos     ", real);
      130 	cos = i;
      131 	call build_entry ("dcos    ", dp);
      132 	dcos = i;
      133 	call build_entry ("ccos    ", cmpx);
      134 	ccos = i;
      135 	call build_entry ("dim     ", real);
      136 	dim = i;
      137 	call build_entry ("idim    ", intr);
      138 	idim = i;
      139 	call build_entry ("ddim    ", dp);
      140 	ddim = i;
      141 	call build_entry ("exp     ", real);
      142 	exp = i;
      143 	call build_entry ("dexp    ", dp);
      144 	dexp = i;
      145 	call build_entry ("cexp    ", cmpx);
      146 	cexp = i;
      147 	call build_entry ("max     ", real);
      148 	max = i;
      149 	call build_entry ("amax0   ", real);
      150 	call build_entry ("amax1   ", real);
      151 	amax1 = i;
      152 	call build_entry ("max0    ", intr);
      153 	max0 = i;
      154 	call build_entry ("max1    ", intr);
      155 	call build_entry ("dmax1   ", dp);
      156 	dmax1 = i;
      157 	call build_entry ("min     ", real);
      158 	min = i;
      159 	call build_entry ("amin0   ", real);
      160 	call build_entry ("amin1   ", real);
      161 	amin1 = i;
      162 	call build_entry ("min0    ", intr);
      163 	min0 = i;
      164 	call build_entry ("min1    ", intr);
      165 	call build_entry ("dmin1   ", dp);
      166 	dmin1 = i;
      167 	call build_entry ("mod     ", intr);
      168 	mod = i;
      169 	call build_entry ("amod    ", real);
      170 	amod = i;
      171 	call build_entry ("dmod    ", dp);
      172 	dmod = i;
      173 	call build_entry ("sign    ", real);
      174 	sign = i;
      175 	call build_entry ("isign   ", intr);
      176 	isign = i;
      177 	call build_entry ("dsign   ", dp);
      178 	dsign = i;
      179 	call build_entry ("sin     ", real);
      180 	sin = i;
      181 	call build_entry ("dsin    ", dp);
      182 	dsin = i;
      183 	call build_entry ("csin    ", cmpx);
      184 	csin = i;
      185 	call build_entry ("sqrt    ", real);
      186 	sqrt = i;
      187 	call build_entry ("dsqrt   ", dp);
      188 	dsqrt = i;
      189 	call build_entry ("csqrt   ", cmpx);
      190 	csqrt = i;
      191 	call build_entry ("tanh    ", real);
      192 	tanh = i;
      193 	call build_entry ("int     ", intr);
      194 	call build_entry ("aint    ", real);
      195 	aint = i;
      196 	call build_entry ("idint   ", intr);
      197 	call build_entry ("float   ", real);
      198 	call build_entry ("ifix    ", intr);
      199 	call build_entry ("sngl    ", real);
      200 	call build_entry ("real    ", real);
      201 	call build_entry ("aimag   ", real);
      202 	call build_entry ("dble    ", dp);
      203 	call build_entry ("cmplx   ", cmpx);
      204 	call build_entry ("conjg   ", cmpx);
      205 	call build_entry ("tan     ", real);
      206 	tan = i;
      207 	call build_entry ("dtan    ", dp);
      208 	dtan = i;
      209 	call build_entry ("asin    ", real);
      210 	asin = i;
      211 	call build_entry ("dasin   ", dp);
      212 	dasin = i;
      213 	call build_entry ("acos    ", real);
      214 	acos = i;
      215 	call build_entry ("dacos   ", dp);
      216 	dacos = i;
      217 	call build_entry ("char    ", character);
      218 	cchar = i;
      219 	call build_entry ("ichar   ", intr);
      220 	ichar = i;
      221 	call build_entry ("index   ", intr);
      222 	iindex = i;
      223 	call build_entry ("len     ", intr);
      224 	len = i;
      225 	call build_entry ("lge     ", logical);
      226 	lge = i;
      227 	call build_entry ("lgt     ", logical);
      228 	lgt = i;
      229 	call build_entry ("lle     ", logical);
      230 	lle = i;
      231 	call build_entry ("llt     ", logical);
      232 	llt = i;
      233 	call build_entry ("cosh    ", real);
      234 	cosh = i;
      235 	call build_entry ("sinh    ", real);
      236 	sinh = i;
      237 	call build_entry ("dcosh   ", dp);
      238 	dcosh = i;
      239 	call build_entry ("dsinh   ", dp);
      240 	dsinh = i;
      241 	call build_entry ("dtanh   ", dp);
      242 	dtanh = i;
      243 	call build_entry ("dint    ", dp);
      244 	dint = i;
      245 	call build_entry ("anint   ", real);
      246 	anint = i;
      247 	call build_entry ("dnint   ", dp);
      248 	dnint = i;
      249 	call build_entry ("nint    ", intr);
      250 	nint = i;
      251 	call build_entry ("idnint  ", intr);
      252 	idnint = i;
      253 	call build_entry ("dprod   ", dp);
      254 	and = i;
      255 	call build_entry ("and     ", typeless);
      256 	bool = i;
      257 	call build_entry ("bool    ", typeless);
      258 	compl = i;
      259 	call build_entry ("compl   ", typeless);
      260 	fld = i;
      261 	call build_entry ("fld     ", typeless);
      262 	ilr = i;
      263 	call build_entry ("ilr     ", intr);
      264 	ils = i;
      265 	call build_entry ("ils     ", intr);
      266 	irl = i;
      267 	call build_entry ("irl     ", intr);
      268 	irs = i;
      269 	call build_entry ("irs     ", intr);
      270 	or = i;
      271 	call build_entry ("or      ", typeless);
      272 	xor = i;
      273 	call build_entry ("xor     ", typeless);
      274 
      275 	p -> fort_data.number_of_names = i;
      276 
      277 /* format: off */
      278 /* Define the generic functions. */
      279 /*			name	int	real	dp	complex */
      280 
      281 	call create_generic (abs,	iabs,	abs,	dabs,	cabs);
      282 	call create_generic (alog,	alog,	alog,	dlog,	clog);
      283 	call create_generic (alog10,	alog10,	alog10,	dlog10,	0);
      284 	call create_generic (atan,	0,	atan,	datan,	0);
      285 	call create_generic (atan2,	0,	atan2,	datan2,	0);
      286 	call create_generic (cos,	cos,	cos,	dcos,	ccos);
      287 	call create_generic (dim,	idim,	dim,	ddim,	0);
      288 	call create_generic (exp,	exp,	exp,	dexp,	cexp);
      289 	call create_generic (max,	max0,	amax1,	dmax1,	0);
      290 	call create_generic (min,	min0,	amin1,	dmin1,	0);
      291 	call create_generic (mod,	mod,	amod,	dmod,	0);
      292 	call create_generic (sign,	isign,	sign,	dsign,	0);
      293 	call create_generic (sin,	sin,	sin,	dsin,	csin);
      294 	call create_generic (sqrt,	sqrt,	sqrt,	dsqrt,	csqrt);
      295 	call create_generic (tanh,	tanh,	tanh,	dtanh,	0);
      296 	call create_generic (tan,	tan,	tan,	dtan,	0);
      297 	call create_generic (asin,	asin,	asin,	dasin,	0);
      298 	call create_generic (acos,	acos,	acos,	dacos,	0);
      299 	call create_generic (cosh,	cosh,	cosh,	dcosh,	0);
      300 	call create_generic (sinh,	sinh,	sinh,	dsinh,	0);
      301 	call create_generic (aint,	aint,	aint,	dint,	0);
      302 	call create_generic (anint,	anint,	anint,	dnint,	0);
      303 	call create_generic (nint,	nint,	nint,	idnint,	0);
      304 
      305 /* format: on */
      306 
      307 build_entry:
      308      procedure (name, result_mode);
      309 dcl	name		char (8) aligned,
      310 	result_mode	fixed bin;
      311 
      312 	i = i + 1;
      313 
      314 	if i > hbound (p -> fort_data.description, 1)
      315 	then do;
      316 		call com_err_ (0, myname, "Builtin table overflow.");
      317 		go to ABORT;
      318 	     end;
      319 
      320 	unspec (p -> fort_data.description (i)) = "0"b;
      321 	p -> fort_data.description (i).name = name;
      322 	p -> fort_data.description (i).result_type = result_mode;
      323 
      324      end build_entry;
      325 
      326 
      327 /* this sets up the generic functions as needed. */
      328 create_generic:
      329      proc (table_offset, int_func_offset, real_func_offset, dp_func_offset, complx_func_offset);
      330 dcl
      331 	(table_offset, int_func_offset, real_func_offset, dp_func_offset, complx_func_offset)
      332 			fixed bin;
      333 
      334 	p -> fort_data.description (table_offset).generic_name = "1"b;
      335 	p -> fort_data.description (table_offset).generic_func (intr) = int_func_offset;
      336 	p -> fort_data.description (table_offset).generic_func (real) = real_func_offset;
      337 	p -> fort_data.description (table_offset).generic_func (dp) = dp_func_offset;
      338 	p -> fort_data.description (table_offset).generic_func (cmpx) = complx_func_offset;
      339      end;
      340 
      341 /* now call create_data_segment_ */
      342 
      343 	unspec (cdsa) = "0"b;
      344 	cdsa.have_text = "1"b;
      345 	cdsa.sections (1).p = p;
      346 	cdsa.sections (1).len = divide (length (unspec (fort_data)), 36, 17, 0);
      347 	cdsa.sections (1).struct_name = "fort_data";
      348 	cdsa.seg_name = myname;
      349 
      350 	call create_data_segment_ (addr (cdsa), code);
      351 	if code ^= 0
      352 	then
      353 	     call com_err_ (code, myname, "Creating ^a data segment", myname);
      354 
      355 ABORT:
      356 	call release_temp_segments_ (myname, segptrs, (0));
      357 
      358      end fort_data;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    12/27/84  0751.7  !BBBJPNdcQMgwLg.pl1               >spec>online>fort_recompile>fort_data.cds
60           1    04/01/76  2209.5  cds_args.incl.pl1                 >ldd>include>cds_args.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
abs                             000161 automatic       fixed bin(17,0)          dcl 50 set ref 104* 281* 281*
acos                            000211 automatic       fixed bin(17,0)          dcl 50 set ref 214* 298* 298* 298*
addr                                                   builtin function         dcl 37 ref 350 350
aint                            000257 automatic       fixed bin(17,0)          dcl 50 set ref 195* 301* 301* 301*
alog                            000162 automatic       fixed bin(17,0)          dcl 50 set ref 112* 282* 282* 282*
alog10                          000163 automatic       fixed bin(17,0)          dcl 50 set ref 118* 283* 283* 283*
amax1                           000164 automatic       fixed bin(17,0)          dcl 50 set ref 151* 289*
amin1                           000165 automatic       fixed bin(17,0)          dcl 50 set ref 161* 290*
amod                            000166 automatic       fixed bin(17,0)          dcl 50 set ref 170* 291*
and                             000265 automatic       fixed bin(17,0)          dcl 50 set ref 254*
anint                           000261 automatic       fixed bin(17,0)          dcl 50 set ref 246* 302* 302* 302*
asin                            000207 automatic       fixed bin(17,0)          dcl 50 set ref 210* 297* 297* 297*
atan                            000167 automatic       fixed bin(17,0)          dcl 50 set ref 122* 284* 284*
atan2                           000170 automatic       fixed bin(17,0)          dcl 50 set ref 126* 285* 285*
bool                            000266 automatic       fixed bin(17,0)          dcl 50 set ref 256*
builtin_name                           based           structure                level 2 unaligned dcl 75
cabs                            000171 automatic       fixed bin(17,0)          dcl 50 set ref 110* 281*
cchar                           000174 automatic       fixed bin(17,0)          dcl 50 set ref 218*
ccos                            000172 automatic       fixed bin(17,0)          dcl 50 set ref 134* 286*
cds_args                               based           structure                level 1 dcl 1-3
cdsa                            000100 automatic       structure                level 1 dcl 29 set ref 343* 350 350
cexp                            000173 automatic       fixed bin(17,0)          dcl 50 set ref 146* 288*
character                       000001 constant        fixed bin(17,0)          initial dcl 40 set ref 217*
cleanup                         000146 stack reference condition                dcl 32 ref 88
clog                            000175 automatic       fixed bin(17,0)          dcl 50 set ref 116* 282*
cmpx                            000006 constant        fixed bin(17,0)          initial dcl 40 set ref 115* 133* 145* 183* 189* 203*
                                                                                  204* 338
code                            000154 automatic       fixed bin(35,0)          dcl 33 set ref 90* 91 93* 350* 351 351*
com_err_                        000014 constant        entry                    external dcl 28 ref 93 316 351
compl                           000267 automatic       fixed bin(17,0)          dcl 50 set ref 258*
complx_func_offset                     parameter       fixed bin(17,0)          dcl 330 ref 328 338
cos                             000176 automatic       fixed bin(17,0)          dcl 50 set ref 130* 286* 286* 286*
cosh                            000177 automatic       fixed bin(17,0)          dcl 50 set ref 234* 299* 299* 299*
create_data_segment_            000012 constant        entry                    external dcl 26 ref 350
csin                            000200 automatic       fixed bin(17,0)          dcl 50 set ref 184* 293*
csqrt                           000201 automatic       fixed bin(17,0)          dcl 50 set ref 190* 294*
dabs                            000202 automatic       fixed bin(17,0)          dcl 50 set ref 108* 281*
dacos                           000212 automatic       fixed bin(17,0)          dcl 50 set ref 216* 298*
dasin                           000210 automatic       fixed bin(17,0)          dcl 50 set ref 212* 297*
datan                           000203 automatic       fixed bin(17,0)          dcl 50 set ref 124* 284*
datan2                          000213 automatic       fixed bin(17,0)          dcl 50 set ref 128* 285*
dcos                            000214 automatic       fixed bin(17,0)          dcl 50 set ref 132* 286*
dcosh                           000215 automatic       fixed bin(17,0)          dcl 50 set ref 238* 299*
ddim                            000216 automatic       fixed bin(17,0)          dcl 50 set ref 140* 287*
description               1            based           structure                array level 3 unaligned dcl 75 set ref 314 320*
dexp                            000217 automatic       fixed bin(17,0)          dcl 50 set ref 144* 288*
dim                             000220 automatic       fixed bin(17,0)          dcl 50 set ref 136* 287* 287*
dint                            000260 automatic       fixed bin(17,0)          dcl 50 set ref 244* 301*
dlog                            000221 automatic       fixed bin(17,0)          dcl 50 set ref 114* 282*
dlog10                          000222 automatic       fixed bin(17,0)          dcl 50 set ref 120* 283*
dmax1                           000223 automatic       fixed bin(17,0)          dcl 50 set ref 156* 289*
dmin1                           000224 automatic       fixed bin(17,0)          dcl 50 set ref 166* 290*
dmod                            000225 automatic       fixed bin(17,0)          dcl 50 set ref 172* 291*
dnint                           000262 automatic       fixed bin(17,0)          dcl 50 set ref 248* 302*
dp                              000007 constant        fixed bin(17,0)          initial dcl 40 set ref 107* 113* 119* 123* 127* 131*
                                                                                  139* 143* 155* 165* 171* 177* 181* 187* 202* 207*
                                                                                  211* 215* 237* 239* 241* 243* 247* 253* 337
dp_func_offset                         parameter       fixed bin(17,0)          dcl 330 ref 328 337
dsign                           000226 automatic       fixed bin(17,0)          dcl 50 set ref 178* 292*
dsin                            000227 automatic       fixed bin(17,0)          dcl 50 set ref 182* 293*
dsinh                           000230 automatic       fixed bin(17,0)          dcl 50 set ref 240* 300*
dsqrt                           000231 automatic       fixed bin(17,0)          dcl 50 set ref 188* 294*
dtan                            000205 automatic       fixed bin(17,0)          dcl 50 set ref 208* 296*
dtanh                           000206 automatic       fixed bin(17,0)          dcl 50 set ref 242* 295*
exp                             000232 automatic       fixed bin(17,0)          dcl 50 set ref 142* 288* 288* 288*
fld                             000270 automatic       fixed bin(17,0)          dcl 50 set ref 260*
fort_data                              based           structure                level 1 unaligned dcl 75 set ref 346
generic_func              4            based           fixed bin(17,0)          array level 4 dcl 75 set ref 335* 336* 337* 338*
generic_name              3            based           bit(1)                   array level 4 packed unaligned dcl 75 set ref 334*
get_temp_segments_              000016 constant        entry                    external dcl 30 ref 90
have_text                44(02) 000100 automatic       bit(1)                   level 3 packed unaligned dcl 29 set ref 344*
hbound                                                 builtin function         dcl 38 ref 314
i                               000160 automatic       fixed bin(17,0)          dcl 50 set ref 101* 104 106 108 110 112 114 116 118
                                                                                  120 122 124 126 128 130 132 134 136 138 140 142
                                                                                  144 146 148 151 153 156 158 161 163 166 168 170
                                                                                  172 174 176 178 180 182 184 186 188 190 192 195
                                                                                  206 208 210 212 214 216 218 220 222 224 226 228
                                                                                  230 232 234 236 238 240 242 244 246 248 250 252
                                                                                  254 256 258 260 262 264 266 268 270 272 275 312*
                                                                                  312 314 320 321 322
iabs                            000233 automatic       fixed bin(17,0)          dcl 50 set ref 106* 281*
ichar                           000234 automatic       fixed bin(17,0)          dcl 50 set ref 220*
idim                            000235 automatic       fixed bin(17,0)          dcl 50 set ref 138* 287*
idnint                          000264 automatic       fixed bin(17,0)          dcl 50 set ref 252* 303*
iindex                          000236 automatic       fixed bin(17,0)          dcl 50 set ref 222*
ilr                             000271 automatic       fixed bin(17,0)          dcl 50 set ref 262*
ils                             000272 automatic       fixed bin(17,0)          dcl 50 set ref 264*
int_func_offset                        parameter       fixed bin(17,0)          dcl 330 ref 328 335
intr                            000020 constant        fixed bin(17,0)          initial dcl 40 set ref 105* 137* 152* 154* 162* 164*
                                                                                  167* 175* 193* 196* 198* 219* 221* 223* 249* 251*
                                                                                  263* 265* 267* 269* 335
irl                             000273 automatic       fixed bin(17,0)          dcl 50 set ref 266*
irs                             000274 automatic       fixed bin(17,0)          dcl 50 set ref 268*
isign                           000237 automatic       fixed bin(17,0)          dcl 50 set ref 176* 292*
len                             000240 automatic       fixed bin(17,0)          dcl 50 in procedure "fort_data" set ref 224*
len                       2     000100 automatic       fixed bin(18,0)          array level 3 in structure "cdsa" dcl 29
                                                                                  in procedure "fort_data" set ref 346*
lge                             000241 automatic       fixed bin(17,0)          dcl 50 set ref 226*
lgt                             000242 automatic       fixed bin(17,0)          dcl 50 set ref 228*
lle                             000243 automatic       fixed bin(17,0)          dcl 50 set ref 230*
llt                             000244 automatic       fixed bin(17,0)          dcl 50 set ref 232*
logical                         000005 constant        fixed bin(17,0)          initial dcl 40 set ref 225* 227* 229* 231*
max                             000245 automatic       fixed bin(17,0)          dcl 50 set ref 148* 289*
max0                            000246 automatic       fixed bin(17,0)          dcl 50 set ref 153* 289*
min                             000247 automatic       fixed bin(17,0)          dcl 50 set ref 158* 290*
min0                            000250 automatic       fixed bin(17,0)          dcl 50 set ref 163* 290*
mod                             000251 automatic       fixed bin(17,0)          dcl 50 set ref 168* 291* 291*
myname                          000002 constant        char(12)                 initial unaligned dcl 34 set ref 88* 90* 93* 316*
                                                                                  348 351* 351* 355*
name                      1            based           char(8)                  array level 4 in structure "fort_data" dcl 75
                                                                                  in procedure "fort_data" set ref 321*
name                                   parameter       char(8)                  dcl 309 in procedure "build_entry" ref 307 321
nint                            000263 automatic       fixed bin(17,0)          dcl 50 set ref 250* 303* 303* 303*
number_of_names                        based           fixed bin(15,0)          level 3 dcl 75 set ref 275*
or                              000275 automatic       fixed bin(17,0)          dcl 50 set ref 270*
p                               000300 automatic       pointer                  dcl 73 in procedure "fort_data" set ref 75 75 75 75
                                                                                  75 75 75 75 75 97* 275 314 320 321 322 334 335 336
                                                                                  337 338 345 346
p                               000100 automatic       pointer                  array level 3 in structure "cdsa" dcl 29
                                                                                  in procedure "fort_data" set ref 345*
real                            000021 constant        fixed bin(17,0)          initial dcl 40 set ref 103* 109* 111* 117* 121* 125*
                                                                                  129* 135* 141* 147* 149* 150* 157* 159* 160* 169*
                                                                                  173* 179* 185* 191* 194* 197* 199* 200* 201* 205*
                                                                                  209* 213* 233* 235* 245* 336
real_func_offset                       parameter       fixed bin(17,0)          dcl 330 ref 328 336
release_temp_segments_          000020 constant        entry                    external dcl 30 ref 88 355
result_mode                            parameter       fixed bin(17,0)          dcl 309 ref 307 322
result_type              10            based           fixed bin(17,0)          array level 4 dcl 75 set ref 322*
sections                        000100 automatic       structure                array level 2 dcl 29
seg_name                 30     000100 automatic       char(32)                 level 2 dcl 29 set ref 348*
segptrs                         000156 automatic       pointer                  initial array dcl 35 set ref 35* 88* 90* 97 355*
sign                            000252 automatic       fixed bin(17,0)          dcl 50 set ref 174* 292* 292*
sin                             000253 automatic       fixed bin(17,0)          dcl 50 set ref 180* 293* 293* 293*
sinh                            000254 automatic       fixed bin(17,0)          dcl 50 set ref 236* 300* 300* 300*
sqrt                            000255 automatic       fixed bin(17,0)          dcl 50 set ref 186* 294* 294* 294*
struct_name               3     000100 automatic       char(32)                 array level 3 dcl 29 set ref 347*
switches                 44     000100 automatic       structure                level 2 dcl 29
table_offset                           parameter       fixed bin(17,0)          dcl 330 ref 328 334 335 336 337 338
tan                             000204 automatic       fixed bin(17,0)          dcl 50 set ref 206* 296* 296* 296*
tanh                            000256 automatic       fixed bin(17,0)          dcl 50 set ref 192* 295* 295* 295*
typeless                        000000 constant        fixed bin(17,0)          initial dcl 40 set ref 255* 257* 259* 261* 271* 273*
xor                             000276 automatic       fixed bin(17,0)          dcl 50 set ref 272*

NAME DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
exclude_names                          based           char(32)                 array unaligned dcl 1-18

NAMES DECLARED BY EXPLICIT CONTEXT.
ABORT                           001707 constant        label                    dcl 355 ref 317
build_entry                     001732 constant        entry                    internal dcl 307 ref 103 105 107 109 111 113 115 117
                                                                                  119 121 123 125 127 129 131 133 135 137 139 141
                                                                                  143 145 147 149 150 152 154 155 157 159 160 162
                                                                                  164 165 167 169 171 173 175 177 179 181 183 185
                                                                                  187 189 191 193 194 196 197 198 199 200 201 202
                                                                                  203 204 205 207 209 211 213 215 217 219 221 223
                                                                                  225 227 229 231 233 235 237 239 241 243 245 247
                                                                                  249 251 253 255 257 259 261 263 265 267 269 271
                                                                                  273
create_generic                  002013 constant        entry                    internal dcl 328 ref 281 282 283 284 285 286 287 288
                                                                                  289 290 291 292 293 294 295 296 297 298 299 300
                                                                                  301 302 303
fort_data                       000352 constant        entry                    external dcl 11

NAMES DECLARED BY CONTEXT OR IMPLICATION.
divide                                                 builtin function         ref 346
length                                                 builtin function         ref 346
null                                                   builtin function         ref 35
unspec                                                 builtin function         set ref 320* 343 346

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      2654        2676    2552        2664
Length      6414    2552        22        3502     101           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
fort_data                           281 external procedure  is an external procedure.  
on unit on line 88                   80 on unit               
build_entry                             internal procedure  shares stack frame of external procedure fort_data.  
create_generic                          internal procedure  shares stack frame of external procedure fort_data.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
fort_data                000100 cdsa                        fort_data
                         000154 code                        fort_data
                         000156 segptrs                     fort_data
                         000160 i                           fort_data
                         000161 abs                         fort_data
                         000162 alog                        fort_data
                         000163 alog10                      fort_data
                         000164 amax1                       fort_data
                         000165 amin1                       fort_data
                         000166 amod                        fort_data
                         000167 atan                        fort_data
                         000170 atan2                       fort_data
                         000171 cabs                        fort_data
                         000172 ccos                        fort_data
                         000173 cexp                        fort_data
                         000174 cchar                       fort_data
                         000175 clog                        fort_data
                         000176 cos                         fort_data
                         000177 cosh                        fort_data
                         000200 csin                        fort_data
                         000201 csqrt                       fort_data
                         000202 dabs                        fort_data
                         000203 datan                       fort_data
                         000204 tan                         fort_data
                         000205 dtan                        fort_data
                         000206 dtanh                       fort_data
                         000207 asin                        fort_data
                         000210 dasin                       fort_data
                         000211 acos                        fort_data
                         000212 dacos                       fort_data
                         000213 datan2                      fort_data
                         000214 dcos                        fort_data
                         000215 dcosh                       fort_data
                         000216 ddim                        fort_data
                         000217 dexp                        fort_data
                         000220 dim                         fort_data
                         000221 dlog                        fort_data
                         000222 dlog10                      fort_data
                         000223 dmax1                       fort_data
                         000224 dmin1                       fort_data
                         000225 dmod                        fort_data
                         000226 dsign                       fort_data
                         000227 dsin                        fort_data
                         000230 dsinh                       fort_data
                         000231 dsqrt                       fort_data
                         000232 exp                         fort_data
                         000233 iabs                        fort_data
                         000234 ichar                       fort_data
                         000235 idim                        fort_data
                         000236 iindex                      fort_data
                         000237 isign                       fort_data
                         000240 len                         fort_data
                         000241 lge                         fort_data
                         000242 lgt                         fort_data
                         000243 lle                         fort_data
                         000244 llt                         fort_data
                         000245 max                         fort_data
                         000246 max0                        fort_data
                         000247 min                         fort_data
                         000250 min0                        fort_data
                         000251 mod                         fort_data
                         000252 sign                        fort_data
                         000253 sin                         fort_data
                         000254 sinh                        fort_data
                         000255 sqrt                        fort_data
                         000256 tanh                        fort_data
                         000257 aint                        fort_data
                         000260 dint                        fort_data
                         000261 anint                       fort_data
                         000262 dnint                       fort_data
                         000263 nint                        fort_data
                         000264 idnint                      fort_data
                         000265 and                         fort_data
                         000266 bool                        fort_data
                         000267 compl                       fort_data
                         000270 fld                         fort_data
                         000271 ilr                         fort_data
                         000272 ils                         fort_data
                         000273 irl                         fort_data
                         000274 irs                         fort_data
                         000275 or                          fort_data
                         000276 xor                         fort_data
                         000300 p                           fort_data

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              enable              ext_entry           int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      create_data_segment_          get_temp_segments_            release_temp_segments_

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000351        35 000357        88 000366        90 000425        91 000446        93 000450        94 000474
     97 000475       101 000477       103 000500       104 000504       105 000506       106 000512       107 000514
    108 000520       109 000522       110 000526       111 000530       112 000534       113 000536       114 000542
    115 000544       116 000550       117 000552       118 000556       119 000560       120 000564       121 000566
    122 000572       123 000574       124 000600       125 000602       126 000606       127 000610       128 000614
    129 000616       130 000622       131 000624       132 000630       133 000632       134 000636       135 000640
    136 000644       137 000646       138 000652       139 000654       140 000660       141 000662       142 000666
    143 000670       144 000674       145 000676       146 000702       147 000704       148 000710       149 000712
    150 000716       151 000722       152 000724       153 000730       154 000732       155 000736       156 000742
    157 000744       158 000750       159 000752       160 000756       161 000762       162 000764       163 000770
    164 000772       165 000776       166 001002       167 001004       168 001010       169 001012       170 001016
    171 001020       172 001024       173 001026       174 001032       175 001034       176 001040       177 001042
    178 001046       179 001050       180 001054       181 001056       182 001062       183 001064       184 001070
    185 001072       186 001076       187 001100       188 001104       189 001106       190 001112       191 001114
    192 001120       193 001122       194 001126       195 001132       196 001134       197 001140       198 001144
    199 001150       200 001154       201 001160       202 001164       203 001170       204 001174       205 001200
    206 001204       207 001206       208 001212       209 001214       210 001220       211 001222       212 001226
    213 001230       214 001234       215 001236       216 001242       217 001244       218 001250       219 001252
    220 001256       221 001260       222 001264       223 001266       224 001272       225 001274       226 001300
    227 001302       228 001306       229 001310       230 001314       231 001316       232 001322       233 001324
    234 001330       235 001332       236 001336       237 001340       238 001344       239 001346       240 001352
    241 001354       242 001360       243 001362       244 001366       245 001370       246 001374       247 001376
    248 001402       249 001404       250 001410       251 001412       252 001416       253 001420       254 001424
    255 001426       256 001432       257 001434       258 001440       259 001442       260 001446       261 001450
    262 001454       263 001456       264 001462       265 001464       266 001470       267 001472       268 001476
    269 001500       270 001504       271 001506       272 001512       273 001514       275 001520       281 001522
    282 001524       283 001526       284 001531       285 001535       286 001541       287 001543       288 001546
    289 001550       290 001553       291 001556       292 001561       293 001564       294 001566       295 001570
    296 001573       297 001576       298 001601       299 001604       300 001607       301 001612       302 001615
    303 001620       343 001623       344 001626       345 001630       346 001632       347 001635       348 001640
    350 001643       351 001656       355 001707       358 001731       307 001732       312 001734       314 001735
    316 001740       317 001765       320 001766       321 001774       322 002005       324 002012       328 002013
    334 002015       335 002022       336 002030       337 002036       338 002044       339 002052


Object Segment >spec>online>fort_recompile>fort_data
Created on 12/27/84  0756.3 mst Thu
by GJohnson.SysMaint.m
using create_data_segment_, Version II of Friday, November 30, 1984

        Object    Text    Defs    Link    Symb  Static
Start        0       0    1352    1402    1412    1412
Length    1631    1352      30      10     203       0


3 Definitions:


segname:    fort_data

text|0          builtin_name
symb|0          symbol_table


No Links.





                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
