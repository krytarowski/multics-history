	COMPILATION LISTING OF SEGMENT linus_retrieve
	Compiled by: Multics PL/I Compiler, Release 28e, of February 14, 1985
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 07/29/86  1007.3 mst Tue
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   *                                                         *
        4*   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        5*   *                                                         *
        6*   *                                                         *
        7*   *********************************************************** */
        8 
        9 /* ******************************************************
       10*   *                                                    *
       11*   *                                                    *
       12*   * Copyright (c) 1972 by Massachusetts Institute of   *
       13*   * Technology and Honeywell Information Systems, Inc. *
       14*   *                                                    *
       15*   *                                                    *
       16*   ****************************************************** */
       17 
       18 
       19 linus_retrieve:
       20      proc (lcb_ptr, ca_ptr, char_ptr, al_ptr, e_ptr, icode);
       21 
       22 
       23 /* DESCRIPTION:
       24*
       25*   Data  is  retrieved  from  the  currently open data base and used by various
       26*   linus  request procedures.  This procedure does the first retrieval and sets
       27*   up  the  system  standard  arg  list  for  subsequent  retrievals  using the
       28*   "-another"   selection   expression.   Therefore  the  "char_desc"  and  the
       29*   "arg_list" structures must be released by the calling procedure.
       30*
       31*
       32*
       33*   HISTORY:
       34*
       35*   77-05-01 J. C. C. Jagernauth: Initially written.
       36*
       37*   80-03-14  Rickie  E.   Brinegar:  Modified  to  use  a  work area defined on
       38*   lcb.linus_area_ptr instead of getting system free area.
       39*
       40*   81-02-02  Rickie  E.  Brinegar: The internal static debug switch declaration
       41*   was moved from the db_on entry to the main entry.
       42*
       43*   81-02-11  Rickie  E.   Brinegar: Modified to set the argument list only when
       44*   the  al_ptr  is  null  and to do the work of preparing the argument list for
       45*   another  processing  as  was advertised in the notes above (something it did
       46*   not do).
       47*
       48*   81-02-20  Rickie  E.   Brinegar: changed the call to mdb_display_value_ to a
       49*   call to mdb_display_data_value$ptr to allow for selection expressions longer
       50*   that 256 characters.
       51*   
       52*   81-07-15 Rickie E. Brinegar: Removed useless cleanup condition handler.
       53*   
       54*   81-09-17  Rickie E.  Brinegar: Removed the is_var bit array for determining
       55*   if  a  descriptor  is  a  varying data type.  This use of the bit array was
       56*   replaced with a call to mdbm_util_$varying_data_class with a pointer to the
       57*   appropriate descriptor.
       58*   
       59*   81-11-12 Rickie E. Brinegar: Added timing of dsl_$retrieve call.
       60*
       61**/
       62 
  1     1 /* BEGIN INCLUDE FILE linus_lcb.incl.pl1 -- jaw 8/30/77 */
  1     2    
  1     3 
  1     4 
  1     5 /****^  HISTORY COMMENTS:
  1     6*  1) change(86-04-23,Dupuis), approve(86-05-23,MCR7188), audit(86-07-23,GWMay),
  1     7*     install(86-07-29,MR12.0-1106):
  1     8*     Added general_work_area_ptr and renamed sfr_ptr to
  1     9*     force_retrieve_scope_ptr.
  1    10*                                                   END HISTORY COMMENTS */
  1    11 
  1    12 
  1    13 /* HISTORY:
  1    14*
  1    15*   78-09-29 J. C. C. Jagernauth: Modified for MR7.0.
  1    16*
  1    17*   81-05-11  Rickie E.  Brinegar: added security bit and andministrator bit as
  1    18*   a part of the attribute level control work.
  1    19*   
  1    20*   81-06-17  Rickie E.  Brinegar: deleted the sd_ptr as a part of removing the
  1    21*   scope_data  structure  from  LINUS.   LINUS now depends totally on MRDS for
  1    22*   scope information.
  1    23*   
  1    24*   81-11-11  Rickie  E.   Brinegar:  added the timing bit and three fields for
  1    25*   retaining  various  vcpu  times  to  be collected when in timing mode.  The
  1    26*   times  to  be collected are: LINUS parsing time, LINUS processing time, and
  1    27*   MRDS processing time.
  1    28*
  1    29*   82-01-15  DJ  Schimke:  Added the build_increment and build_start fields as
  1    30*   part of the line numbering implementation.  This allows for possible  later
  1    31*   LINUS control of the build defaults.
  1    32* 
  1    33*   82-03-01 Paul W. Benjamin: Removed linus_prompt_chars_ptr, as that 
  1    34*   information is now retained by ssu_.  Removed parse_timer as no longer
  1    35*   meaningful.  Added linus_version.  Added iteration bit.  Added 6 entry 
  1    36*   variables for ssu_ replaceable procedures.  Added actual_input_iocbp.
  1    37*
  1    38*   82-06-23 Al Dupuis: Added subsystem_control_info_ptr, 
  1    39*   subsystem_invocation_level, and selection_expression_identifier.
  1    40*
  1    41*   82-08-26 DJ Schimke: Added report_control_info_ptr, and
  1    42*   table_control_info_ptr. 
  1    43*
  1    44*   82-10-19 DJ Schimke: Added ssu_abort_line.
  1    45*
  1    46*   83-06-06 Bert Moberg: Added print_search_order (pso) and no_optimize (no_ot)
  1    47*
  1    48*   83-04-07 DJ Schimke: Added temp_seg_info_ptr.
  1    49*
  1    50*   83-08-26 Al Dupuis: Added query_temp_segment_ptr.
  1    51**/
  1    52     
  1    53 dcl 1 lcb aligned based (lcb_ptr),			/* LINUS control block */
  1    54     2 db_index fixed bin (35),			/* index of open data base, or 0 */
  1    55     2 rb_len fixed bin (21),				/* length of request buffer */
  1    56     2 lila_count fixed bin (35),			/* number of LILA text lines */
  1    57     2 lila_chars fixed bin (35),			/* number of LILA source test chars */
  1    58     2 trans_id fixed bin (35),			/* used by checkpoint and rollback facilities (MR7.0) */
  1    59     2 lila_fn char (32) unal,				/* entry name of lila data file */
  1    60     2 prompt_flag bit (1) unal,			/* on if in prompt mode */
  1    61     2 test_flag bit (1) unal,				/* on if in test mode */
  1    62     2 new_version bit (1) unal init (1),		/* on for new version data base (MR7.0) */
  1    63     2 secured_db bit (1) unal,                              /* on if the db is in a secure state */
  1    64     2 administrator bit (1) unal,                           /* on if the user is a db administrator */
  1    65     2 timing_mode bit (1) unal,                             /* on if timing is to be done */
  1    66     2 iteration bit (1) unal,				/* interpret parens as iteration sets */
  1    67     2 pso_flag bit (1) unal,				/* add print_search_order to select */
  1    68     2 no_ot_flag bit (1) unal,			/* add no_optimize to select */
  1    69     2 reserved bit (27) unal,
  1    70     2 liocb_ptr ptr,				/* iocb ptr for lila file */
  1    71     2 rb_ptr ptr,					/* ptr to request buffer */
  1    72     2 is_ptr ptr,					/* iocb ptr for currentinput stream switch */
  1    73     2 cal_ptr ptr,					/* ptr to current arg list for invoke (or null) */
  1    74     2 ttn_ptr ptr,					/* pointer to table info structure */
  1    75     2 force_retrieve_scope_info_ptr ptr,		/* structure pointer to force retrieve scope operation */
  1    76     2 lv_ptr ptr,					/* pointer linus variables */
  1    77     2 si_ptr ptr,					/* pointer to select_info structure */
  1    78     2 setfi_ptr ptr,				/* pointer to set function information */
  1    79     2 sclfi_ptr ptr,				/* pointer to user declared scalar fun. names */
  1    80     2 ivs_ptr ptr,					/* pointer to stack of invoke iocb pointers */
  1    81     2 lit_ptr ptr,					/* pointer to literal pool */
  1    82     2 lvv_ptr ptr,					/* pointer to linus variable alloc. pool  */
  1    83     2 rd_ptr ptr,					/* point to readied files mode information (MR7.0) */
  1    84     2 rt_ptr ptr,                                           /* point to table of relation names and their readied modes
  1    85*                                                               (MR7.0) */
  1    86     2 actual_input_iocbp ptr,				/* ptr to input while in macros */
  1    87     2 lila_promp_chars_ptr ptr,			/* pointer to the prompt characters for lila */
  1    88     2 linus_area_ptr ptr,				/* LINUS temporary segment pointer */
  1    89     2 lila_area_ptr ptr,				/* LILA temporary segment pointer */
  1    90     2 i_o_area_ptr ptr,				/* temporary segment pointer used by write, print, create_list */
  1    91     2 rel_array_ptr ptr,                                    /* ptr to array of names rslt info structure
  1    92*                                                               for current lila expression */
  1    93     2 unused_timer float bin (63),			/* future expansion */
  1    94     2 request_time float bin (63),                          /* How much request time was spent
  1    95*                                                                in LINUS. (-1 = user has just enabled 
  1    96*						    timing, do not report) */
  1    97     2 mrds_time float bin (63),                             /* How much time was spent in MRDS */
  1    98     2 build_increment fixed bin,			/* default increment for build mode */
  1    99     2 build_start fixed bin,				/* default start count for build mode */
  1   100     2 linus_version char (4),				/* current version of LINUS */
  1   101     2 subsystem_control_info_ptr ptr,                       /* the same ptr passed by ssu_ to each request procedure */
  1   102     2 subsystem_invocation_level fixed bin,                 /* identifies this invocation of LINUS */
  1   103     2 selection_expression_identifier fixed bin,            /* identifies the current processed selection expression */
  1   104     2 report_control_info_ptr ptr,			/* pointer to linus_report_control_info structure */
  1   105     2 table_control_info_ptr ptr,			/* pointer to linus_table control structure */
  1   106     2 temp_seg_info_ptr ptr,				/* pointer to linus_temp_seg_mgr control structure */
  1   107     2 query_temp_segment_ptr ptr,			/* points to temp seg used for manipulating query */
  1   108     2 general_work_area_ptr ptr,			/* a freeing area for general use */
  1   109     2 word_pad (6) bit (36) unal,
  1   110 						/* procedures that will be optionally */
  1   111 						/* replaced by the user.  Saved so they */
  1   112 						/* can be reinstated if desired. */
  1   113     2 ssu_abort_line entry options (variable),
  1   114     2 ssu_post_request_line variable entry (ptr),
  1   115     2 ssu_pre_request_line variable entry (ptr),
  1   116 
  1   117     2 curr_lit_offset fixed bin (35),			/* index of first free bit in lit. pool */
  1   118     2 curr_lv_val_offset fixed bin (35),		/* index of first free bit lv. val. pool */
  1   119     2 static_area area (sys_info$max_seg_size - fixed (rel (addr (lcb.static_area))) + 1);
  1   120 
  1   121 dcl  lcb_ptr ptr;
  1   122 
  1   123 /* END INCLUDE FILE linus_lcb.incl.pl1 */
       63 
       64 
  2     1 /* BEGIN INCLUDE FILE linus_char_argl.incl.pl1 -- jaw 2/11/77 */
  2     2 
  2     3 /* HISTORY:
  2     4*
  2     5*   82-02-05  Paul W. Benjamin:  Changed arg_len to fixed bin (21).
  2     6*
  2     7**/
  2     8 
  2     9 dcl 1 char_argl aligned based (ca_ptr),			/* structure for general char. arg. list */
  2    10     2 nargs fixed bin,				/* number of args */
  2    11     2 arg (nargs_init refer (char_argl.nargs)),
  2    12       3 arg_ptr ptr,				/* ptr to first char. of arg */
  2    13       3 arg_len fixed bin (21);			/* no. of chars. in arg */
  2    14 
  2    15 dcl  ca_ptr ptr;
  2    16 dcl  nargs_init fixed bin;
  2    17 
  2    18 /* END INCLUDE FILE linus_char_argl.incl.pl1 */
       65 
       66 
  3     1 /* BEGIN INCLUDE FILE linus_arg_list.incl.pl1 -- jccj 4/15/77 */
  3     2 
  3     3 dcl 1 char_desc aligned based (char_ptr),		/* Structure for character descriptors */
  3     4     2 fb_desc bit (36) aligned init ("100000100000000000000000000000100011"b), /* Fixed bin descriptor */
  3     5     2 n_chars fixed bin,
  3     6     2 arr (n_chars_init refer (char_desc.n_chars)),
  3     7       3 const bit (12) unal init ("101010100000"b),	/* Constant part */
  3     8       3 var bit (24) unal;				/* Variable part */
  3     9 
  3    10 dcl  char_ptr ptr;
  3    11 dcl  n_chars_init fixed bin;
  3    12 
  3    13 /* END INCLUDE FILE linus_arg_list.incl.pl1 */
       67 
       68 
  4     1 /* BEGIN INCLUDE FILE linus_select_info.incl.pl1 */
  4     2 /* History:  77-07-29 J. A. Weeldreyer: Originally written.
  4     3*   Modified: 82-18-82 Dave Schimke: Added user_item.table_name
  4     4**/
  4     5 dcl 1 select_info aligned based (si_ptr),		/* info from LILA select clause */
  4     6     2 set_fn bit (1) unal,				/* on if  set fn to be applied */
  4     7     2 se_flags unal,				/* flags pertaining to selection expr. */
  4     8       3 val_ret bit (1) unal,				/* valid for retrieval */
  4     9       3 val_dtt bit (1) unal,				/* valid for define_temp_table */
  4    10       3 val_del bit (1) unal,				/* valid for delete */
  4    11       3 val_mod bit (1) unal,				/* valid for modify */
  4    12     2 dup_flag bit (1) unal,				/* on if dup explic. spec. somewhere */
  4    13     2 unique_flag bit (1) unal,			/* on if unique explic. spec. somewhere */
  4    14     2 pad bit (29) unal,				/* reserved */
  4    15     2 prior_sf_ptr ptr,				/* pointer to set fns for prior eval. */
  4    16     2 se_ptr ptr,					/* pointer to mrds selection expression */
  4    17     2 sel_items_ptr ptr,				/* pointer to list of selected items */
  4    18     2 sel_items_len fixed bin,			/* length in characters of list of selected items */
  4    19     2 se_len fixed bin (35),				/* length of mrds sel. expr. */
  4    20     2 nsv_alloc fixed bin,				/* no. of se. vals aloc. */
  4    21     2 nmi_alloc fixed bin,				/* no. of mrds items alloc. */
  4    22     2 nui_alloc fixed bin,				/* no. of user items alloc. */
  4    23     2 nsevals fixed bin,				/* number of selection expr. vaules */
  4    24     2 n_mrds_items fixed bin,				/* no. of items in mrds select list */
  4    25     2 n_user_items fixed bin,				/* no. of items user will see */
  4    26     2 se_vals (nsv_init refer (select_info.nsv_alloc)),
  4    27       3 arg_ptr ptr,
  4    28       3 desc_ptr ptr,
  4    29     2 mrds_item (nmi_init refer (select_info.nmi_alloc)),	/* mrds select items */
  4    30       3 arg_ptr ptr,				/* pointer to receiving field */
  4    31       3 bit_len fixed bin (35),			/* bit length of receiving field */
  4    32       3 desc bit (36),				/* descriptor for receiving field */
  4    33       3 assn_type fixed bin,				/* type code for assign_ */
  4    34       3 assn_len fixed bin (35),			/* length for assign_ */
  4    35     2 user_item (nui_init refer (select_info.nui_alloc)),	/* user select item */
  4    36       3 name char (32) var,				/* name for col. header */
  4    37       3 table_name char (32) var,                           /* name of containing linus table */
  4    38       3 item_type fixed bin,				/* indicates type of item:
  4    39*						   1 => raw mrds,
  4    40*						   2 => expr.  */
  4    41       3 rslt_desc bit (36),				/* descriptor for expr. result */
  4    42       3 rslt_bit_len fixed bin (35),			/* bit length of expr. result */
  4    43       3 rslt_assn_ptr ptr,				/* pointer to expr. result storage loc. */
  4    44       3 rslt_assn_type fixed bin,			/* assign_ type code of expr. result */
  4    45       3 rslt_assn_len fixed bin (35),			/* assign_ length for expr. result */
  4    46       3 item_ptr ptr;				/* pointer to item or expr. or applied set_func. structure */
  4    47 
  4    48 dcl (nsv_init, nmi_init, nui_init) fixed bin;
  4    49 dcl  si_ptr ptr;
  4    50 
  4    51 /* END INCLUDE FILE linus_select_info.incl.pl1 */
       69 
       70 
  5     1 /* BEGIN mdbm_arg_list.incl.pl1 -- jaw 5/31/78 */
  5     2 /* the duplicate mrds_arg_list.incl.pl1 was eliminated by Jim Gray, Nov. 1979 */
  5     3 
  5     4 /* layout of argument list for IDS and DBM entries with options (variable) */
  5     5 
  5     6 dcl 1 arg_list based (al_ptr),
  5     7     2 arg_count fixed bin (17) unal,			/* 2 * no. of args. */
  5     8     2 code fixed bin (17) unal,			/* 4 => normal, 8 => special */
  5     9     2 desc_count fixed bin (17) unal,			/* 2 * no. of descriptors */
  5    10     2 pad fixed bin (17) unal,			/* must be 0 */
  5    11     2 arg_des_ptr (num_ptrs) ptr;			/* argument/descriptor pointer */
  5    12 
  5    13 dcl  al_ptr ptr;
  5    14 dcl  num_ptrs fixed bin;
  5    15 
  5    16 /* END mdbm_arg_list.incl.pl1  */
  5    17 
       71 
       72 
       73 
       74 	dcl     1 arg_len_bits	 based,
       75 		2 pad		 bit (12) unal,
       76 		2 length		 bit (24);	/* Length of argument to be passed in arg_list */
       77 
       78 	dcl     debug_switch	 bit (1) int static init ("0"b);
       79 
       80 	dcl     icode		 fixed bin (35);
       81 
       82 	dcl     (desc, l, loop)	 fixed bin;
       83 
       84 	dcl     initial_vclock	 float bin (63);
       85 
       86 	dcl     (addr, addrel, fixed, null, rel, vclock) builtin;
       87 
       88 	dcl     (
       89 	        e_ptr,
       90 	        env_ptr		 init (null),
       91 	        temp_ptr		 init (null)
       92 	        )			 ptr;
       93 
       94 	dcl     ANOTHER		 char (8) init ("-another") int static options (constant);
       95 	dcl     ANOTHER_LEN		 bit (24) init ("000000000000000000001000"b) int static
       96 				 options (constant);
       97 	dcl     ANOTHER_PTR		 ptr init (null) int static;
       98 
       99 	dcl     cu_$generate_call	 entry (entry, ptr);
      100 	dcl     dsl_$retrieve	 entry options (variable); /* MRDS subroutine */
      101 	dcl     ioa_		 entry options (variable);
      102 	dcl     mdb_display_data_value$ptr entry (ptr, ptr);
      103 	dcl     mdbm_util_$varying_data_class entry (ptr) returns (bit (1) aligned);
      104 	dcl     sys_info$max_seg_size	 fixed bin (35) ext;/* Used in linus control block */
      105 	dcl     work_area		 area (sys_info$max_seg_size) based (lcb.linus_area_ptr);
      106 
      107 
      108 /* assure ANOTHER_PTR is not null and that the arg_list is only
      109*   when the al_ptr is null */
      110 
      111 	if ANOTHER_PTR = null then
      112 	     ANOTHER_PTR = addr (ANOTHER);
      113 
      114 	si_ptr = lcb.si_ptr;			/* Init */
      115 	desc = select_info.n_mrds_items + 3 + select_info.nsevals;
      116 						/* Offset for descriptors */
      117 	if al_ptr = null then do;
      118 		num_ptrs = desc * 2;		/* Number of pointers in arg_list */
      119 		allocate arg_list in (work_area);	/* System standard argument list */
      120 		arg_list.arg_des_ptr (desc) = addr (icode); /* Pointer to return code */
      121 		if char_ptr = null then do;
      122 			n_chars_init = 1;		/* Number to allocate */
      123 			allocate char_desc in (work_area); /* Character descriptors */
      124 		     end;
      125 		arg_list.arg_des_ptr (num_ptrs) = addr (char_desc.fb_desc);
      126 						/* Return code descriptor */
      127 		arg_list.arg_des_ptr (1) = addr (lcb.db_index); /* Data base index */
      128 		arg_list.arg_des_ptr (desc + 1) = addr (char_desc.fb_desc);
      129 						/* Data base index descriptor */
      130 		arg_list.arg_count, arg_list.desc_count = num_ptrs; /* Initialize argument list header */
      131 		arg_list.code = 4;
      132 		arg_list.pad = 0;
      133 
      134 /* Fill in rest of standard arg_list */
      135 		char_desc.arr.var (1) =
      136 		     addr (select_info.se_len) -> arg_len_bits.length;
      137 		arg_list.arg_des_ptr (2) = select_info.se_ptr;
      138 		arg_list.arg_des_ptr (desc + 2) = addr (char_desc.arr (1));
      139 		if select_info.nsevals ^= 0 then
      140 		     do l = 1 to select_info.nsevals;
      141 			arg_list.arg_des_ptr (2 + l) = select_info.se_vals.arg_ptr (l);
      142 			arg_list.arg_des_ptr (2 + desc + l) =
      143 			     select_info.se_vals.desc_ptr (l);
      144 		     end;
      145 		l = 1;
      146 		do loop = 3 + select_info.nsevals
      147 		     to 2 + select_info.n_mrds_items + select_info.nsevals;
      148 						/* Use pointers and descriptors from select_info structure */
      149 		     arg_list.arg_des_ptr (loop) = select_info.mrds_item.arg_ptr (l);
      150 		     arg_list.arg_des_ptr (desc + loop) =
      151 			addr (select_info.mrds_item.desc (l));
      152 		     if mdbm_util_$varying_data_class (
      153 			addr (select_info.mrds_item.desc (l))) then do;
      154 			     temp_ptr = select_info.mrds_item.arg_ptr (l);
      155 			     arg_list.arg_des_ptr (loop) = addrel (temp_ptr, 1);
      156 			end;
      157 		     l = l + 1;
      158 		end;
      159 	     end;
      160 
      161 	if debug_switch then do;
      162 		call ioa_ ("Selection expression:");
      163 		call
      164 		     mdb_display_data_value$ptr (select_info.se_ptr,
      165 		     addr (char_desc.arr (1)));
      166 	     end;					/* if debug_switch */
      167 
      168 	if lcb.timing_mode then
      169 	     initial_vclock = vclock;
      170 
      171 	call cu_$generate_call (dsl_$retrieve, al_ptr);	/* Call retrieve */
      172 
      173 	if lcb.timing_mode then
      174 	     lcb.mrds_time = lcb.mrds_time + vclock - initial_vclock;
      175 
      176 /* Insure that we are now set up for -another processing */
      177 
      178 	if arg_list.arg_des_ptr (2) ^= ANOTHER_PTR then do;
      179 		arg_list.arg_des_ptr (2) = ANOTHER_PTR;
      180 		char_desc.arr (1).var = ANOTHER_LEN;
      181 	     end;
      182 
      183 	return;
      184 
      185 db_on:
      186      entry;
      187 
      188 /* Usage:
      189*   linus_retrieve$db_on
      190*
      191*   Turns on a switch which causes the value of the current
      192*   selection expression to be displayed at the terminal.
      193**/
      194 
      195 	debug_switch = "1"b;
      196 	return;
      197 
      198 db_off:
      199      entry;
      200 
      201 /* Usage:
      202*   linus_retrieve$db_off
      203*
      204*   Turns off the switch which causes the value of the current
      205*   selection expression to be displayed at the terminal.
      206**/
      207 
      208 	debug_switch = "0"b;
      209 	return;
      210 
      211      end linus_retrieve;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/29/86  0940.0  linus_retrieve.pl1                >special_ldd>install>MR12.0-1106>linus_retrieve.pl1
63           1    07/29/86  0937.8  linus_lcb.incl.pl1                >special_ldd>install>MR12.0-1106>linus_lcb.incl.pl1
65           2    11/23/82  1327.3  linus_char_argl.incl.pl1          >ldd>include>linus_char_argl.incl.pl1
67           3    03/27/82  0434.5  linus_arg_list.incl.pl1           >ldd>include>linus_arg_list.incl.pl1
69           4    09/16/83  1338.0  linus_select_info.incl.pl1        >ldd>include>linus_select_info.incl.pl1
71           5    10/14/83  1609.0  mdbm_arg_list.incl.pl1            >ldd>include>mdbm_arg_list.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ANOTHER                         000000 constant        char(8)                  initial unaligned dcl 94 set ref 111
ANOTHER_LEN                            constant        bit(24)                  initial unaligned dcl 95 ref 180
ANOTHER_PTR                     000012 internal static pointer                  initial dcl 97 set ref 111 111* 178 179
addr                                                   builtin function         dcl 86 ref 111 120 125 127 128 135 138 150 152 152
                                                                                  163 163
addrel                                                 builtin function         dcl 86 ref 155
al_ptr                                 parameter       pointer                  dcl 5-13 set ref 19 117 119* 120 125 127 128 130 130
                                                                                  131 132 137 138 141 142 149 150 155 171* 178 179
arg_count                              based           fixed bin(17,0)          level 2 packed unaligned dcl 5-6 set ref 130*
arg_des_ptr               2            based           pointer                  array level 2 dcl 5-6 set ref 120* 125* 127* 128*
                                                                                  137* 138* 141* 142* 149* 150* 155* 178 179*
arg_len_bits                           based           structure                level 1 packed unaligned dcl 74
arg_list                               based           structure                level 1 unaligned dcl 5-6 set ref 119
arg_ptr                  20            based           pointer                  array level 3 in structure "select_info" dcl 4-5
                                                                                  in procedure "linus_retrieve" ref 141
arg_ptr                                based           pointer                  array level 3 in structure "select_info" dcl 4-5
                                                                                  in procedure "linus_retrieve" ref 149 154
arr                       2            based           structure                array level 2 dcl 3-3 set ref 138 163 163
ca_ptr                                 parameter       pointer                  dcl 2-15 ref 19
char_desc                              based           structure                level 1 dcl 3-3 set ref 123
char_ptr                               parameter       pointer                  dcl 3-10 set ref 19 121 123* 125 128 135 138 163 163
                                                                                  180
code                      0(18)        based           fixed bin(17,0)          level 2 packed unaligned dcl 5-6 set ref 131*
const                     2            based           bit(12)                  initial array level 3 packed unaligned dcl 3-3 set
                                                                                  ref 123*
cu_$generate_call               000014 constant        entry                    external dcl 99 ref 171
db_index                               based           fixed bin(35,0)          level 2 dcl 1-53 set ref 127
debug_switch                    000010 internal static bit(1)                   initial unaligned dcl 78 set ref 161 195* 208*
desc                            000105 automatic       fixed bin(17,0)          dcl 82 in procedure "linus_retrieve" set ref 115*
                                                                                  118 120 128 138 142 150
desc                                   based           bit(36)                  array level 3 in structure "select_info" dcl 4-5
                                                                                  in procedure "linus_retrieve" set ref 150 152 152
desc_count                1            based           fixed bin(17,0)          level 2 packed unaligned dcl 5-6 set ref 130*
desc_ptr                 22            based           pointer                  array level 3 dcl 4-5 ref 142
dsl_$retrieve                   000016 constant        entry                    external dcl 100 ref 171 171
e_ptr                                  parameter       pointer                  dcl 88 ref 19
env_ptr                         000112 automatic       pointer                  initial dcl 88 set ref 88*
fb_desc                                based           bit(36)                  initial level 2 dcl 3-3 set ref 123* 125 128
icode                                  parameter       fixed bin(35,0)          dcl 80 set ref 19 120
initial_vclock                  000110 automatic       float bin(63)            dcl 84 set ref 168* 173
ioa_                            000020 constant        entry                    external dcl 101 ref 162
l                               000106 automatic       fixed bin(17,0)          dcl 82 set ref 139* 141 141 142 142* 145* 149 150
                                                                                  152 152 154 157* 157
lcb                                    based           structure                level 1 dcl 1-53
lcb_ptr                                parameter       pointer                  dcl 1-121 ref 19 114 119 123 127 168 173 173 173
length                    0(12)        based           bit(24)                  level 2 packed unaligned dcl 74 ref 135
linus_area_ptr           60            based           pointer                  level 2 dcl 1-53 ref 119 123
loop                            000107 automatic       fixed bin(17,0)          dcl 82 set ref 146* 149 150 155*
mdb_display_data_value$ptr      000022 constant        entry                    external dcl 102 ref 163
mdbm_util_$varying_data_class   000024 constant        entry                    external dcl 103 ref 152
mrds_item                              based           structure                array level 2 dcl 4-5
mrds_time                74            based           float bin(63)            level 2 dcl 1-53 set ref 173* 173
n_chars                   1            based           fixed bin(17,0)          level 2 dcl 3-3 set ref 123*
n_chars_init                    000100 automatic       fixed bin(17,0)          dcl 3-11 set ref 122* 123 123
n_mrds_items             16            based           fixed bin(17,0)          level 2 dcl 4-5 ref 115 146
nsevals                  15            based           fixed bin(17,0)          level 2 dcl 4-5 ref 115 139 139 146 146
nsv_alloc                12            based           fixed bin(17,0)          level 2 dcl 4-5 ref 149 150 152 152 154
null                                                   builtin function         dcl 86 ref 88 88 111 117 121
num_ptrs                        000104 automatic       fixed bin(17,0)          dcl 5-14 set ref 118* 119 125 130
pad                       1(18)        based           fixed bin(17,0)          level 2 packed unaligned dcl 5-6 set ref 132*
se_len                   11            based           fixed bin(35,0)          level 2 dcl 4-5 set ref 135
se_ptr                    4            based           pointer                  level 2 dcl 4-5 set ref 137 163*
se_vals                  20            based           structure                array level 2 dcl 4-5
select_info                            based           structure                level 1 dcl 4-5
si_ptr                   34            based           pointer                  level 2 in structure "lcb" dcl 1-53 in procedure
                                                                                  "linus_retrieve" ref 114
si_ptr                          000102 automatic       pointer                  dcl 4-49 in procedure "linus_retrieve" set ref 114*
                                                                                  115 115 135 137 139 139 141 142 146 146 146 149
                                                                                  150 152 152 154 163
temp_ptr                        000114 automatic       pointer                  initial dcl 88 set ref 88* 154* 155
timing_mode              15(05)        based           bit(1)                   level 2 packed unaligned dcl 1-53 ref 168 173
var                       2(12)        based           bit(24)                  array level 3 packed unaligned dcl 3-3 set ref 135*
                                                                                  180*
vclock                                                 builtin function         dcl 86 ref 168 173
work_area                              based           area                     dcl 105 ref 119 123

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
char_argl                              based           structure                level 1 dcl 2-9
fixed                                                  builtin function         dcl 86
nargs_init                             automatic       fixed bin(17,0)          dcl 2-16
nmi_init                               automatic       fixed bin(17,0)          dcl 4-48
nsv_init                               automatic       fixed bin(17,0)          dcl 4-48
nui_init                               automatic       fixed bin(17,0)          dcl 4-48
rel                                                    builtin function         dcl 86
sys_info$max_seg_size                  external static fixed bin(35,0)          dcl 104

NAMES DECLARED BY EXPLICIT CONTEXT.
db_off                          000520 constant        entry                    external dcl 198
db_on                           000505 constant        entry                    external dcl 185
linus_retrieve                  000032 constant        entry                    external dcl 19

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       646         674     534         656
Length      1166     534        26         256     111           4

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
linus_retrieve                      100 external procedure  is an external procedure.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 debug_switch                linus_retrieve
000012 ANOTHER_PTR                 linus_retrieve

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
linus_retrieve           000100 n_chars_init                linus_retrieve
                         000102 si_ptr                      linus_retrieve
                         000104 num_ptrs                    linus_retrieve
                         000105 desc                        linus_retrieve
                         000106 l                           linus_retrieve
                         000107 loop                        linus_retrieve
                         000110 initial_vclock              linus_retrieve
                         000112 env_ptr                     linus_retrieve
                         000114 temp_ptr                    linus_retrieve

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              ext_entry           alloc_based         vclock

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
cu_$generate_call             dsl_$retrieve                 ioa_                          mdb_display_data_value$ptr
mdbm_util_$varying_data_class

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     88 000017        19 000024       111 000040       114 000047       115 000054       117 000060       118 000064
    119 000067       120 000102       121 000106       122 000113       123 000115       125 000141       127 000147
    128 000154       130 000162       131 000174       132 000176       135 000200       137 000205       138 000210
    139 000216       141 000227       142 000241       144 000252       145 000254       146 000256       149 000271
    150 000310       152 000322       154 000341       155 000350       157 000356       158 000357       161 000361
    162 000364       163 000402       168 000421       171 000433       173 000451       178 000465       179 000475
    180 000477       183 000503       185 000504       195 000513       196 000516       198 000517       208 000526
    209 000530


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
