	COMPILATION LISTING OF SEGMENT fort_cleanup_
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 12/27/84  0842.0 mst Thu
	    Options: optimize map

        1 /* ******************************************************
        2*   *                                                    *
        3*   * Copyright, (C) Honeywell Limited, 1983             *
        4*   *                                                    *
        5*   * Copyright (c) 1972 by Massachusetts Institute of   *
        6*   * Technology and Honeywell Information Systems, Inc. *
        7*   *                                                    *
        8*   ****************************************************** */
        9 
       10 /* format: style3,^delnl,linecom */
       11 fort_cleanup_:
       12      proc (dp1, dc1, dp2, dp3, db1, sp);
       13 
       14 /* This procedure is the cleanup controller for Fortran Large and Very Large
       15*   arrays, and for fortran_io_ cleanup.  It is called by 'unwind_stack_' when
       16*   'cleanup' is signaled to a fortran program. */
       17 
       18 /* Modification History.
       19*
       20*   Created:	August 30, 1982 by Tom Oke (UNCA). 
       21*
       22*   Modified: 15 Novemeber 1982, TO - Change to 'fortran_storage_' and
       23*	'fortran_storage_manager_' from 'fsd_' and 'fsm_'.
       24**/
       25 
       26 /* SPECIAL ENTRY CONDITIONS REQUIRED FROM 'unwind_stack_'. */
       27 
       28 /* 'unwind_stack_' uses an entry variable in which the label has been set to
       29*   this routine, and the descripter pointer is set to the stack pointer
       30*   of the frame in which the cleanup handler exists.  If this stack pointer
       31*   functionality is changed then we have no way of knowing what the stack
       32*   frame pointer is to do the cleanup with.
       33*
       34*   The unwind_stack_ definition is:
       35*dcl  entry_variable variable entry (ptr, char (*), ptr, ptr, bit (1) aligned);
       36*
       37*   By adding an additional pointer to the expected parameters, we can find
       38*   the address of this pointer (the argument block pointer) and thus find the
       39*   stack pointer value left by unwind_stack_.  A bit kludgy, but functional and
       40*   fast.
       41**/
       42 
       43 dcl	(dp1, dp2, dp3)	ptr;			/* Dummy Pointers */
       44 dcl	dc1		char (*);			/* Dummy Characters */
       45 dcl	db1		bit (1) aligned;		/* Dummy bit */
       46 
       47 dcl	sp		ptr;			/* stack pointer deferred */
       48 
       49 dcl	fortran_storage_manager_$free
       50 			entry (ptr);		/* Passed 'owning' stack ptr */
       51 
       52 
       53 /* Find the stack frame pointer of the cleanup handler, then pass it to both
       54*   the fortran_storage_manager_$free entry to free up Large and Very Large
       55*   Arrays, and to fortran_io_$cleanup to free up files associated with that
       56*   level. */
       57 
       58 
       59 	call fortran_storage_manager_$free (addr (sp));
       60 
       61      end fort_cleanup_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    12/27/84  0838.6  fort_cleanup_.pl1                 >spec>online>fort_recompile>fort_cleanup_.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
db1                                    parameter       bit(1)                   dcl 45 ref 11
dc1                                    parameter       char                     unaligned dcl 44 ref 11
dp1                                    parameter       pointer                  dcl 43 ref 11
dp2                                    parameter       pointer                  dcl 43 ref 11
dp3                                    parameter       pointer                  dcl 43 ref 11
fortran_storage_manager_$free   000010 constant        entry                    external dcl 49 ref 59
sp                                     parameter       pointer                  dcl 47 set ref 11 59 59

NAME DECLARED BY EXPLICIT CONTEXT.
fort_cleanup_                   000011 constant        entry                    external dcl 11

NAME DECLARED BY CONTEXT OR IMPLICATION.
addr                                                   builtin function         ref 59 59

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       100         112      36         110
Length       260      36        12         131      41           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
fort_cleanup_                        72 external procedure  is an external procedure.  

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return              ext_entry_desc

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
fortran_storage_manager_$free

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000003        59 000024        61 000035


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
