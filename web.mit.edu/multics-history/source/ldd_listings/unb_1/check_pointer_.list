	COMPILATION LISTING OF SEGMENT check_pointer_
	Compiled by: Multics PL/I Compiler, Release 25c, of February 18, 1980
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 05/20/80  1924.4 mst Tue
	    Options: optimize map

        1 /* ******************************************************
        2*   *                                                    *
        3*   *                                                    *
        4*   * Copyright (c) 1972 by Massachusetts Institute of   *
        5*   * Technology and Honeywell Information Systems, Inc. *
        6*   *                                                    *
        7*   *                                                    *
        8*   ****************************************************** */
        9 
       10 check_pointer_: proc (pptr, msg);
       11 
       12 dcl  pptr ptr,
       13      msg char (32);
       14 
       15 dcl  uppt ptr based (pptr);
       16 dcl  ch char (1);
       17 dcl  upch char (1) unal based (uppt);
       18 dcl  any_other condition;
       19 dcl  code fixed bin (35);
       20 dcl  continue_to_signal_ entry (fixed bin (35));
       21 dcl  find_condition_info_ entry (ptr, ptr, fixed bin (35));
       22 
       23 	msg = "";
       24 	on condition (any_other) call handler;
       25 	ch = upch;
       26 quit:
       27 	return;
       28 
       29 packed:	entry (pptr, msg);
       30 
       31 dcl  pch char (1) based (ppt);
       32 dcl  ppt ptr unal based (pptr);
       33 
       34 	msg = "";
       35 	on condition (any_other) call handler;
       36 	ch = pch;
       37 	return;
       38 
       39 handler:	proc;
       40 
       41 dcl 1 cond_info,
  1     1 	/* BEGIN INCLUDE FILE ... cond_info.incl.pl1
  1     2*	   coded by M. Weaver 12 July 1973 */
  1     3 
  1     4 	  2 mcptr ptr,				/* ptr to machine conditions at time of fault */
  1     5 	  2 version fixed bin,			/* version of this structure (now=1) */
  1     6 	  2 condition_name char(32) var,		/* name of condition */
  1     7 	  2 infoptr ptr,				/* ptr to software info structure */
  1     8 	  2 wcptr ptr,				/* ptr to wall crossing machine conditions */
  1     9 	  2 loc_ptr ptr,				/* ptr to location where condition occurred */
  1    10 	  2 flags aligned,
  1    11 	    3 crawlout bit(1) unal,			/* = "1"b if condition occurred in inner ring */
  1    12 	    3 pad1 bit(35) unal,
  1    13 	  2 pad_word bit(36) aligned,
  1    14 	  2 user_loc_ptr ptr,			/* ptr to last non-support loc before condition */
  1    15 	  2 pad (4) bit(36) aligned;
  1    16 
  1    17 	/* END INCLUDE FILE ... cond_info.incl.pl1 */
       42 
       43 
       44 	     call find_condition_info_ (null (), addr (cond_info), code);
       45 	     if (condition_name = "quit")
       46 	     | (condition_name = "alrm")
       47 	     | (condition_name = "cput")
       48 	     then do;
       49 		call continue_to_signal_ (code);
       50 		return;
       51 	     end;
       52 	     msg = condition_name;
       53 	     goto quit;
       54 	end;
       55      end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    05/20/80  1924.4  check_pointer_.pl1                >spec>online>mrpg0520>check_pointer_.pl1
42           1    05/06/74  1741.0  cond_info.incl.pl1                >ldd>include>cond_info.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
any_other                       000102 stack reference condition                dcl 18 ref 24 35
ch                              000100 automatic       char(1)                  unaligned dcl 16 set ref 25* 36*
code                            000110 automatic       fixed bin(35,0)          dcl 19 set ref 44* 49*
cond_info                       000100 automatic       structure                level 1 unaligned dcl 41 set ref 44 44
condition_name            3     000100 automatic       varying char(32)         level 2 dcl 41 set ref 45 45 45 52
continue_to_signal_             000010 constant        entry                    external dcl 20 ref 49
find_condition_info_            000012 constant        entry                    external dcl 21 ref 44
msg                                    parameter       char(32)                 unaligned dcl 12 set ref 10 23* 29 34* 52*
pch                                    based           char(1)                  unaligned dcl 31 ref 36
ppt                                    based           pointer                  unaligned dcl 32 ref 36
pptr                                   parameter       pointer                  dcl 12 ref 10 25 29 36
upch                                   based           char(1)                  unaligned dcl 17 ref 25
uppt                                   based           pointer                  dcl 15 ref 25

NAMES DECLARED BY EXPLICIT CONTEXT.
check_pointer_                  000017 constant        entry                    external dcl 10
handler                         000137 constant        entry                    internal dcl 39 ref 24 35
packed                          000066 constant        entry                    external dcl 29
quit                            000063 constant        label                    dcl 26 ref 53

NAMES DECLARED BY CONTEXT OR IMPLICATION.
addr                                                   builtin function         ref 44 44
null                                                   builtin function         ref 44 44

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       322         336     225         332
Length       524     225        14         152      74           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
check_pointer_                       74 external procedure  is an external procedure.  
on unit on line 24                   64 on unit               
on unit on line 35                   64 on unit               
handler                             102 internal procedure  is called by several nonquick procedures.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
check_pointer_           000100 ch                          check_pointer_
                         000110 code                        check_pointer_
handler                  000100 cond_info                   handler

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        call_int_other      return              tra_ext             enable              ext_entry
int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
continue_to_signal_           find_condition_info_

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     10 000013        23 000024        24 000031        25 000053        26 000063        29 000064        34 000073
     35 000100        36 000122        37 000135        39 000136        44 000144        45 000163        49 000202
     50 000212        52 000213        53 000222


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
