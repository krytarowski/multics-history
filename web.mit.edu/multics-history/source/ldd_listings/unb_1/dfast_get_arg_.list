	COMPILATION LISTING OF SEGMENT dfast_get_arg_
	Compiled by: Multics PL/I Compiler, Release 27d, of October 11, 1982
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 11/04/82  1554.8 mst Thu
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 dfast_get_arg_: proc (line, argument) returns (bit (1));
        7 
        8 /*   This procedure is used to find the next argument on the line.  It expects the form:
        9*   *
       10*   *	[blank | tab] [argument] [blank | tab | comma | semi-colon]
       11*   *
       12*   * Any of the fields may be null.  If no argument and no delimitor is found, then the procedure returns "0"b.
       13*   * Otherwise "1"b is returned.
       14**/
       15 
       16 dcl  argument char (256) var;				/* next argument (output) */
       17 
       18 dcl  line char (256) var;				/* input buffer */
       19 dcl  line_length fixed bin;				/* length of line on input */
       20 dcl  argument_length fixed bin;			/* length of argument */
       21 dcl  start fixed bin;				/* index in line of start of argument */
       22 
       23 dcl (length, search, substr, verify) builtin;
       24 
       25 /* constants */
       26 
       27 dcl  white_space char (2) int static options (constant) init ("	 "); /* <tab> <blank> */
       28 dcl  arg_delimit char (4) int static options (constant) init ("	 ,;"); /* <tab> <blank> <,> <;> */
       29 
       30 	line_length = length (line);
       31 
       32 	if line_length > 0 then do;
       33 
       34 	     start = verify (line, white_space);
       35 	     if start > 0 then do;
       36 		argument_length = search (substr (line, start), arg_delimit);
       37 
       38 		if argument_length = 0 then argument_length = line_length - start + 1;
       39 		else argument_length = argument_length - 1;
       40 		argument = substr (line, start, argument_length);
       41 		start = start + argument_length + 1;	/* move beyond the argument delimitor */
       42 		if start > line_length then line = "";
       43 		else line = substr (line, start, line_length - start + 1);
       44 
       45 		return ("1"b);
       46 	     end;
       47 	end;
       48 	return ("0"b);
       49      end dfast_get_arg_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/04/82  1552.4  dfast_get_arg_.pl1                >spec>on>comp-dir>dfast_get_arg_.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
arg_delimit                     000000 constant        char(4)                  initial unaligned dcl 28 ref 36
argument                               parameter       varying char(256)        dcl 16 set ref 6 40*
argument_length                 000101 automatic       fixed bin(17,0)          dcl 20 set ref 36* 38 38* 39* 39 40 41
length                                                 builtin function         dcl 23 ref 30
line                                   parameter       varying char(256)        dcl 18 set ref 6 30 34 36 40 42* 43* 43
line_length                     000100 automatic       fixed bin(17,0)          dcl 19 set ref 30* 32 38 42 43
search                                                 builtin function         dcl 23 ref 36
start                           000102 automatic       fixed bin(17,0)          dcl 21 set ref 34* 35 36 38 40 41* 41 42 43 43
substr                                                 builtin function         dcl 23 ref 36 40 43
verify                                                 builtin function         dcl 23 ref 34
white_space                            constant        char(2)                  initial unaligned dcl 27 ref 34

NAME DECLARED BY EXPLICIT CONTEXT.
dfast_get_arg_                  000007 constant        entry                    external dcl 6

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       560         570     532         570
Length       730     532        10         124      25           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
dfast_get_arg_                       68 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
dfast_get_arg_           000100 line_length                 dfast_get_arg_
                         000101 argument_length             dfast_get_arg_
                         000102 start                       dfast_get_arg_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
return              ext_entry

NO EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
      6 000003        30 000014        32 000020        34 000021        35 000034        36 000035        38 000054
     39 000062        40 000064        41 000075        42 000101        43 000105        45 000120        48 000125


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
