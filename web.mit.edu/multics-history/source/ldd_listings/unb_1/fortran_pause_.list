	COMPILATION LISTING OF SEGMENT fortran_pause_
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 12/27/84  0844.4 mst Thu
	    Options: optimize map

        1 /* ******************************************************
        2*   *                                                    *
        3*   * Copyright, (C) Honeywell Limited, 1983             *
        4*   *                                                    *
        5*   * Copyright (c) 1972 by Massachusetts Institute of   *
        6*   * Technology and Honeywell Information Systems, Inc. *
        7*   *                                                    *
        8*   ****************************************************** */
        9 
       10 /* format: style3,^delnl,linecom */
       11 fortran_pause_:
       12      procedure (string) options (support);
       13 
       14 /* This procedure is called to perform the function of the Fortran PAUSE statement. */
       15 
       16 /* Modification History:
       17*
       18*83-05-16 HH - 117: Implement a pause by signalling 'fortran_pause' rather
       19*	than printing a message and entering a new command level.
       20*83-06-16 TO - Implement options (support) and only force signal catching if
       21*	interactive.  Also add "PAUSE" to output string.
       22**/
       23 
       24 
       25 dcl	string		char (*);
       26 
       27 dcl	fast_related_data_$in_fast_or_dfast
       28 			bit (1) aligned ext static;
       29 
       30 dcl	INTERACTIVE	fixed bin (17) static options (constant) initial (1);
       31 
       32 dcl	process_type	fixed bin (17);
       33 
       34 dcl	ioa_		external entry options (variable),
       35 	signal_		entry options (variable),
       36 	user_info_$process_type
       37 			entry (fixed bin (17));
       38 
       39 dcl	length		builtin,
       40 	null		builtin;
       41 
  1     1 /* BEGIN INCLUDE FILE condition_info_header.incl.pl1 BIM 1981 */
  1     2 /* format: style2 */
  1     3 
  1     4      declare condition_info_header_ptr
  1     5 			      pointer;
  1     6      declare 1 condition_info_header
  1     7 			      aligned based (condition_info_header_ptr),
  1     8 	     2 length	      fixed bin,		/* length in words of this structure */
  1     9 	     2 version	      fixed bin,		/* version number of this structure */
  1    10 	     2 action_flags	      aligned,		/* tell handler how to proceed */
  1    11 	       3 cant_restart     bit (1) unaligned,	/* caller doesn't ever want to be returned to */
  1    12 	       3 default_restart  bit (1) unaligned,	/* caller can be returned to with no further action */
  1    13 	       3 quiet_restart    bit (1) unaligned,	/* return, and print no message */
  1    14 	       3 support_signal   bit (1) unaligned,	/* treat this signal as if the signalling procedure had the support bit set */
  1    15 						/* if the signalling procedure had the support bit set, do the same for its caller */
  1    16 	       3 pad	      bit (32) unaligned,
  1    17 	     2 info_string	      char (256) varying,	/* may contain printable message */
  1    18 	     2 status_code	      fixed bin (35);	/* if^=0, code interpretable by com_err_ */
  1    19 
  1    20 /* END INCLUDE FILE condition_info_header.incl.pl1 */
       42 
       43 
       44 dcl	01 condition_info	aligned like condition_info_header;
       45 
       46 	if fast_related_data_$in_fast_or_dfast
       47 	then call ioa_ ("^/PAUSE ^a", string);
       48 	else do;					/*  Signal 'fortran_pause' condition.  */
       49 		condition_info.length = size (condition_info);
       50 		condition_info.version = 1;
       51 		unspec (condition_info.action_flags) = ""b;
       52 
       53 /* If we are not interactive then permit a default restart to let an absentee
       54*   continue. */
       55 		call user_info_$process_type (process_type);
       56 		if process_type ^= INTERACTIVE
       57 		then condition_info.default_restart = "1"b;
       58 
       59 		condition_info.info_string = "PAUSE " ||
       60 		     substr (string, 1, min (length (string), maxlength (condition_info.info_string)));
       61 		condition_info.status_code = 0;
       62 		call signal_ ("fortran_pause", null, addr (condition_info));
       63 	     end;
       64      end fortran_pause_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    12/27/84  0838.7  fortran_pause_.pl1                >spec>online>fort_recompile>fortran_pause_.pl1
42           1    03/24/82  1347.2  condition_info_header.incl.pl1    >ldd>include>condition_info_header.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
INTERACTIVE                            constant        fixed bin(17,0)          initial dcl 30 ref 56
action_flags              2     000101 automatic       structure                level 2 dcl 44 set ref 51*
condition_info                  000101 automatic       structure                level 1 dcl 44 set ref 49 62 62
condition_info_header                  based           structure                level 1 dcl 1-6
default_restart           2(01) 000101 automatic       bit(1)                   level 3 packed unaligned dcl 44 set ref 56*
fast_related_data_$in_fast_or_dfast
                                000010 external static bit(1)                   dcl 27 ref 46
info_string               3     000101 automatic       varying char(256)        level 2 dcl 44 set ref 59* 59
ioa_                            000012 constant        entry                    external dcl 34 ref 46
length                                                 builtin function         dcl 39 in procedure "fortran_pause_" ref 59
length                          000101 automatic       fixed bin(17,0)          level 2 in structure "condition_info" dcl 44
                                                                                  in procedure "fortran_pause_" set ref 49*
null                                                   builtin function         dcl 39 ref 62 62
process_type                    000100 automatic       fixed bin(17,0)          dcl 32 set ref 55* 56
signal_                         000014 constant        entry                    external dcl 34 ref 62
status_code             104     000101 automatic       fixed bin(35,0)          level 2 dcl 44 set ref 61*
string                                 parameter       char                     unaligned dcl 25 set ref 11 46* 59 59
user_info_$process_type         000016 constant        entry                    external dcl 34 ref 55
version                   1     000101 automatic       fixed bin(17,0)          level 2 dcl 44 set ref 50*

NAME DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
condition_info_header_ptr              automatic       pointer                  dcl 1-4

NAME DECLARED BY EXPLICIT CONTEXT.
fortran_pause_                  000022 constant        entry                    external dcl 11

NAMES DECLARED BY CONTEXT OR IMPLICATION.
addr                                                   builtin function         ref 62 62
maxlength                                              builtin function         ref 59
min                                                    builtin function         ref 59
size                                                   builtin function         ref 49
substr                                                 builtin function         ref 59
unspec                                                 builtin function         ref 51

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       254         274     166         264
Length       464     166        20         154      66           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
fortran_pause_                      168 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
fortran_pause_           000100 process_type                fortran_pause_
                         000101 condition_info              fortran_pause_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_cs            call_ext_out_desc   call_ext_out        return              shorten_stack       ext_entry_desc
set_support

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
ioa_                          signal_                       user_info_$process_type

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
fast_related_data_$in_fast_or_dfast




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000017        46 000036        49 000062        50 000064        51 000066        55 000067        56 000075
     59 000102        61 000131        62 000133        64 000165


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
