ASSEMBLY LISTING OF SEGMENT >dumps>old>recomp>ascii_to_abcdef_.alm            
ASSEMBLED ON:	11/18/82  1704.5 mst Thu
OPTIONS USED:	list 
ASSEMBLED BY:	ALM Version  6.4  April 1981    
ASSEMBLER CREATED:	11/03/82  1423.6 mst Wed

                                     1  "  ***********************************************************
                                     2  "  *                                                         *
                                     3  "  *                                                         *
                                     4  "  * Copyright, (C) Honeywell Information Systems Inc., 1981 *
                                     5  "  *                                                         *
                                     6  "  *                                                         *
                                     7  "  ***********************************************************
                                     8  
                                     9  "ALM subroutine to convert from 9 bit ASCII to 9 bit ABCDEF
                                    10  "ABCDEF is identical to ASCII except that the 400 bit is on for all non-alphabetic chars
                                    11  "input bytes must be valid ASCII characters whose octal values
                                    12  "fall in the range 000 <_ octal_value <_ 177
                                    13  "
                                    14  "ARG 1: pointer to source string - data to be converted
                                    15  "ARG 2: pointer to target string - converted data
                                    16  "
                                    17  "PL/I Usage:
                                    18  "
                                    19  "dcl  ascii_to_abcdef_ ext entry (char (*), char (*));
                                    20  "    call ascii_to_abcdef_ (input_string, output_string);
                                    21  "
                                    22  "
                                    23  "Note: the ASCII to ABCDEF mapping used is defined in the
                                    24  "      text of this procedure.  It is available to a user
                                    25  "      program through the following declaration.
                                    26  "
                                    27  "dcl  ascii_to_abcdef_$aa_table char (128) external static;
                                    28  "
                                    29  "The table consists of 128 ABCDEF characters which
                                    30  "correspond to the 128 ASCII characters.  The first character
                                    31  "corresponds to 000, the 2nd to 001, ....., the 128th
                                    32  "to 177.
                                    33  "
                                    34  "Converted from ascii_to_ebcdic_ by J. Stern 11/2/77
    000000                          35                      name      ascii_to_abcdef_
                        000000      36  		segdef	ascii_to_abcdef_
                        000022      37  		segdef	aa_table
    000000  aa  0 00002 3515 20     38  ascii_to_abcdef_:	epp1	ap|2,*		address of source string to pr1
    000001  aa  0 00004 3535 20     39  		epp3	ap|4,*		address of target string to pr3
    000002  aa   000000 2230 03     40  		ldx3	0,du		set x3 not to skip parent pointer if none
    000003  aa  0 00000 7221 00     41  		lxl2	ap|0		load argument list code value
    000004  aa   000004 3020 03     42  		canx2	=o000004,du	check for code 4 - no parent pointer
    000005  0a   000007 6010 00     43  		tnz	*+2		transfer if no parent pointer
    000006  aa   000002 2230 03     44  		ldx3	2,du		parent pointer - set x3 to skip it
    000007  aa  0 00006 2351 33     45  		lda	ap|6,x3*		load source string descriptor
    000010  aa  0 00010 2361 33     46  		ldq	ap|8,x3*		load target string descriptor
    000011  0a   000021 3750 00     47  		ana	mask		drop all but string size bits
    000012  0a   000021 3760 00     48  		anq	mask		ditto
    000013  aa   000000 0110 03     49  		even
    000014  aa  0 40140 1605 40     50  		mvt	(pr,rl),(pr,rl),fill(040)	translate ascii to abcdef
    000015  aa   100000 000005      51  		desc9a	1|0,al		source string
    000016  aa   300000 000006      52  		desc9a	3|0,ql		target string
    000017  0a   000022 0000 00     53  		arg	aa_table
    000020  aa  7 00044 7101 20     54  		short_return		"exit
                                    55  
    000021  aa   000077 777777      56  mask:		oct	000077777777
                                    57  		even
    000022  aa   400401 402403      58  aa_table:		oct	400401402403,404405406407
    000023  aa   404405 406407 
    000024  aa   410411 412413      59  		oct	410411412413,414415416417
    000025  aa   414415 416417 
    000026  aa   420421 422423      60  		oct	420421422423,424425426427
    000027  aa   424425 426427 
    000030  aa   430431 432433      61  		oct	430431432433,434435436437
    000031  aa   434435 436437 
    000032  aa   000441 442443      62  		oct	000441442443,444445446447
    000033  aa   444445 446447 
    000034  aa   450451 452453      63  		oct	450451452453,454455456457
    000035  aa   454455 456457 
    000036  aa   460461 462463      64  		oct	460461462463,464465466467
    000037  aa   464465 466467 
    000040  aa   470471 472473      65  		oct	470471472473,474475476477
    000041  aa   474475 476477 
    000042  aa   500101 102103      66  		oct	500101102103,104105106107
    000043  aa   104105 106107 
    000044  aa   110111 112113      67  		oct	110111112113,114115116117
    000045  aa   114115 116117 
    000046  aa   120121 122123      68  		oct	120121122123,124125126127
    000047  aa   124125 126127 
    000050  aa   130131 132533      69  		oct	130131132533,534535536537
    000051  aa   534535 536537 
    000052  aa   540141 142143      70  		oct	540141142143,144145146147
    000053  aa   144145 146147 
    000054  aa   150151 152153      71  		oct	150151152153,154155156157
    000055  aa   154155 156157 
    000056  aa   160161 162163      72  		oct	160161162163,164165166167
    000057  aa   164165 166167 
    000060  aa   170171 172573      73  		oct	170171172573,574575576577
    000061  aa   574575 576577 
    000062                          74  		bss	,96			codes > 177 translate to 000
                                    75  
                                    76  		end

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000222  5a   000003 000000 
    000223  5a   000040 600000 
    000224  aa   000000 000000 
    000225  55   000013 000002 
    000226  5a   000002 400003 
    000227  55   000006 000013 
    000230  aa  020 141 163 143
    000231  aa  151 151 137 164
    000232  aa  157 137 141 142
    000233  aa  143 144 145 146
    000234  aa  137 000 000 000
    000235  55   000021 000003 
    000236  0a   000022 400000 
    000237  55   000016 000003 
    000240  aa  010 141 141 137         aa_table
    000241  aa  164 141 142 154
    000242  aa  145 000 000 000
    000243  55   000031 000013 
    000244  0a   000000 400000 
    000245  55   000024 000003 
    000246  aa  020 141 163 143         ascii_to_abcdef_
    000247  aa  151 151 137 164
    000250  aa  157 137 141 142
    000251  aa  143 144 145 146
    000252  aa  137 000 000 000
    000253  55   000002 000021 
    000254  6a   000000 400002 
    000255  55   000034 000003 
    000256  aa  014 163 171 155         symbol_table
    000257  aa  142 157 154 137
    000260  aa  164 141 142 154
    000261  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000262  aa   000000 000015 
    000263  aa   000000 000000 
    000264  5a   000013 000000 
    000265  aa   000000 000000 
    000266  5a   000021 000000 
    000267  aa   000000 000000 
    000270  aa   000000 000000 
    000271  5a   000031 000000 
    000272  aa   000000 000000 
    000273  aa   000000 000000 
    000274  aa   000000 000000 
    000275  aa   000000 000000 
    000276  aa   000000 000000 
    000277  aa   000000 000000 

NO EXTERNAL NAMES

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000300  aa   000001 000000 
    000301  aa   000000 000000 

INTERNAL EXPRESSION WORDS

LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000222 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000010 
    000007  a2   000000 000000 
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000004 
    000004  aa   000000 111316 
    000005  aa   510113 575622 
    000006  aa   000000 111341 
    000007  aa   510007 016747 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000130 
    000020  aa   000000 000104 
    000021  aa   000000 000117 
    000022  aa   000122 000104 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   040066 056064 
    000030  aa   040040 101160 
    000031  aa   162151 154040 
    000032  aa   061071 070061 
    000033  aa   040040 040040 
    000034  aa   110157 154155 
    000035  aa   163164 145144 
    000036  aa   164056 123171 
    000037  aa   163115 141151 
    000040  aa   156164 056155 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   154151 163164 
    000045  aa   040040 040040 
    000046  aa   040040 040040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040040 040040 
    000057  aa   040040 040040 
    000060  aa   040040 040040 
    000061  aa   040040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000001 
    000066  aa   000072 000046 
    000067  aa   113400 472101 
    000070  aa   000000 111341 
    000071  aa   466740 200000 
    000072  aa   076144 165155          >dumps>old>recomp>ascii_to_abcdef_.alm
    000073  aa   160163 076157 
    000074  aa   154144 076162 
    000075  aa   145143 157155 
    000076  aa   160076 141163 
    000077  aa   143151 151137 
    000100  aa   164157 137141 
    000101  aa   142143 144145 
    000102  aa   146137 056141 
    000103  aa   154155 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

          22    aa_table                 ascii_to_abcdef_:    37,   53,   58.
           0    ascii_to_abcdef_         ascii_to_abcdef_:    36,   38.
          21    mask                     ascii_to_abcdef_:    47,   48,   56.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
