ASSEMBLY LISTING OF SEGMENT >spec>on>basic>basic_data.alm                  
ASSEMBLED ON:	09/11/84  1241.4 mst Tue
OPTIONS USED:	list 
ASSEMBLED BY:	ALM Version  6.6  November 1982 
ASSEMBLER CREATED:	09/21/83  1227.3 mst Wed

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Information Systems Inc., 1982 *
                                     4  " *                                                         *
                                     5  " * Copyright (c) 1972 by Massachusetts Institute of        *
                                     6  " * Technology and Honeywell Information Systems, Inc.      *
                                     7  " *                                                         *
                                     8  " ***********************************************************
                                     9  
                                    10  "	Modified: 15 May 1984 by DWL to add new string function mid$
                                    11  "	Modified: 19 May 1984 by D. Leskiw to add new string function left$
                                    12  "	Modified: 23 May 1984 by D. Leskiw to add new string function right$
                                    13  "	Modified: 23 May 1984 by D. Leskiw to allow pos to have optional # of args
                                    14  "	Modified: 25 May 1984 by D. Leskiw to fix problem when left$, right$, or pos is passed
                                    15  "	          as functions argument, as on page 5-3 of basic manual
                                    16  "
                                    17  "	Table of valid BASIC statements
                                    18  "
                        000000      19  	segdef	statement_spelling
    000000                          20  statement_spelling:
    000000  aa   000000 000000      21  	dec	0,-1		a
    000001  aa   777777 777777 
    000002  aa   000000 000000      22  	dec	0,-1		b
    000003  aa   777777 777777 
    000004  aa   000000 000001      23  	dec	1,3		c
    000005  aa   000000 000003 
    000006  aa   000000 000004      24  	dec	4,6		d
    000007  aa   000000 000006 
    000010  aa   000000 000007      25  	dec	7,7		e
    000011  aa   000000 000007 
    000012  aa   000000 000010      26  	dec	8,10		f
    000013  aa   000000 000012 
    000014  aa   000000 000013      27  	dec	11,12		g
    000015  aa   000000 000014 
    000016  aa   000000 000000      28  	dec	0,-1		h
    000017  aa   777777 777777 
    000020  aa   000000 000015      29  	dec	13,14		i
    000021  aa   000000 000016 
    000022  aa   000000 000000      30  	dec	0,-1		j
    000023  aa   777777 777777 
    000024  aa   000000 000000      31  	dec	0,-1		k
    000025  aa   777777 777777 
    000026  aa   000000 000017      32  	dec	15,17		l
    000027  aa   000000 000021 
    000030  aa   000000 000022      33  	dec	18,19		m
    000031  aa   000000 000023 
    000032  aa   000000 000024      34  	dec	20,20		n
    000033  aa   000000 000024 
    000034  aa   000000 000025      35  	dec	21,21		o
    000035  aa   000000 000025 
    000036  aa   000000 000026      36  	dec	22,22		p
    000037  aa   000000 000026 
    000040  aa   000000 000000      37  	dec	0,-1		q
    000041  aa   777777 777777 
    000042  aa   000000 000027      38  	dec	23,27		r
    000043  aa   000000 000033 
    000044  aa   000000 000034      39  	dec	28,32		s
    000045  aa   000000 000040 
    000046  aa   000000 000041      40  	dec	33,34		t
    000047  aa   000000 000042 
    000050  aa   000000 000000      41  	dec	0,-1		u
    000051  aa   777777 777777 
    000052  aa   000000 000000      42  	dec	0,-1		v
    000053  aa   777777 777777 
    000054  aa   000000 000043      43  	dec	35,35		w
    000055  aa   000000 000043 
    000056  aa   000000 000000      44  	dec	0,-1		x
    000057  aa   777777 777777 
    000060  aa   000000 000000      45  	dec	0,-1		y
    000061  aa   777777 777777 
    000062  aa   000000 000000      46  	dec	0,-1		z
    000063  aa   777777 777777 
                                    47  "
                        000064      48  	segdef	statement_list
    000064                          49  statement_list:
    000064  aa  143 141 154 040     50  	aci	"cal "		call
    000065  aa  154 040 040 040     51  	aci	"l       "
    000066  aa  040 040 040 040
    000067  aa   000000 000001      52  	dec	1
    000070  aa  143 150 141 040     53  	aci	"cha "		chain
    000071  aa  151 156 040 040     54  	aci	"in      "
    000072  aa  040 040 040 040
    000073  aa   000000 000002      55  	dec	2
    000074  aa  143 150 141 040     56  	aci	"cha "		change
    000075  aa  156 147 145 040     57  	aci	"nge     "
    000076  aa  040 040 040 040
    000077  aa   000000 000003      58  	dec	3
    000100  aa  144 141 164 040     59  	aci	"dat "		data
    000101  aa  141 040 040 040     60  	aci	"a       "
    000102  aa  040 040 040 040
    000103  aa   000000 000001      61  	dec	1
    000104  aa  144 145 146 040     62  	aci	"def "		def
    000105  aa  040 040 040 040     63  	aci	"        "
    000106  aa  040 040 040 040
    000107  aa   000000 000000      64  	dec	0
    000110  aa  144 151 155 040     65  	aci	"dim "		dim
    000111  aa  040 040 040 040     66  	aci	"        "
    000112  aa  040 040 040 040
    000113  aa   000000 000000      67  	dec	0
    000114  aa  145 156 144 040     68  	aci	"end "		end
    000115  aa  040 040 040 040     69  	aci	"        "
    000116  aa  040 040 040 040
    000117  aa   000000 000000      70  	dec	0
    000120  aa  146 151 154 040     71  	aci	"fil "		file
    000121  aa  145 040 040 040     72  	aci	"e       "
    000122  aa  040 040 040 040
    000123  aa   000000 000001      73  	dec	1
    000124  aa  146 156 145 040     74  	aci	"fne "		fnend
    000125  aa  156 144 040 040     75  	aci	"nd      "
    000126  aa  040 040 040 040
    000127  aa   000000 000002      76  	dec	2
    000130  aa  146 157 162 040     77  	aci	"for "		for
    000131  aa  040 040 040 040     78  	aci	"        "
    000132  aa  040 040 040 040
    000133  aa   000000 000000      79  	dec	0
    000134  aa  147 157 164 040     80  	aci	"got "		goto
    000135  aa  157 040 040 040     81  	aci	"o       "
    000136  aa  040 040 040 040
    000137  aa   000000 000001      82  	dec	1
    000140  aa  147 157 163 040     83  	aci	"gos "		gosub
    000141  aa  165 142 040 040     84  	aci	"ub      "
    000142  aa  040 040 040 040
    000143  aa   000000 000002      85  	dec	2
    000144  aa  151 146 040 040     86  	aci	"if  "		if
    000145  aa  040 040 040 040     87  	aci	"        "
    000146  aa  040 040 040 040
    000147  aa   000000 000000      88  	dec	0
    000150  aa  151 156 160 040     89  	aci	"inp "		input
    000151  aa  165 164 040 040     90  	aci	"ut      "
    000152  aa  040 040 040 040
    000153  aa   000000 000002      91  	dec	2
    000154  aa  154 145 164 040     92  	aci	"let "		let
    000155  aa  040 040 040 040     93  	aci	"        "
    000156  aa  040 040 040 040
    000157  aa   000000 000000      94  	dec	0
    000160  aa  154 151 142 040     95  	aci	"lib "		library
    000161  aa  162 141 162 171     96  	aci	"rary    "
    000162  aa  040 040 040 040
    000163  aa   000000 000004      97  	dec	4
    000164  aa  154 151 156 040     98  	aci	"lin "		linput
    000165  aa  160 165 164 040     99  	aci	"put     "
    000166  aa  040 040 040 040
    000167  aa   000000 000003     100  	dec	3
    000170  aa  155 141 162 040    101  	aci	"mar "		margin
    000171  aa  147 151 156 040    102  	aci	"gin     "
    000172  aa  040 040 040 040
    000173  aa   000000 000003     103  	dec	3
    000174  aa  155 141 164 040    104  	aci	"mat "		mat
    000175  aa  040 040 040 040    105  	aci	"        "
    000176  aa  040 040 040 040
    000177  aa   000000 000000     106  	dec	0
    000200  aa  156 145 170 040    107  	aci	"nex "		next
    000201  aa  164 040 040 040    108  	aci	"t       "
    000202  aa  040 040 040 040
    000203  aa   000000 000001     109  	dec	1
    000204  aa  157 156 040 040    110  	aci	"on  "		on
    000205  aa  040 040 040 040    111  	aci	"        "
    000206  aa  040 040 040 040
    000207  aa   000000 000000     112  	dec	0
    000210  aa  160 162 151 040    113  	aci	"pri "		print
    000211  aa  156 164 040 040    114  	aci	"nt      "
    000212  aa  040 040 040 040
    000213  aa   000000 000002     115  	dec	2
    000214  aa  162 141 156 040    116  	aci	"ran "		randomize
    000215  aa  144 157 155 151    117  	aci	"domize  "
    000216  aa  172 145 040 040
    000217  aa   000000 000006     118  	dec	6
    000220  aa  162 145 141 040    119  	aci	"rea "		read
    000221  aa  144 040 040 040    120  	aci	"d       "
    000222  aa  040 040 040 040
    000223  aa   000000 000001     121  	dec	1
    000224  aa  162 145 155 040    122  	aci	"rem "		rem
    000225  aa  040 040 040 040    123  	aci	"        "
    000226  aa  040 040 040 040
    000227  aa   000000 000000     124  	dec	0
    000230  aa  162 145 163 040    125  	aci	"res "		reset
    000231  aa  145 164 040 040    126  	aci	"et      "
    000232  aa  040 040 040 040
    000233  aa   000000 000002     127  	dec	2
    000234  aa  162 145 164 040    128  	aci	"ret "		return
    000235  aa  165 162 156 040    129  	aci	"urn     "
    000236  aa  040 040 040 040
    000237  aa   000000 000003     130  	dec	3
    000240  aa  163 143 162 040    131  	aci	"scr "		scratch
    000241  aa  141 164 143 150    132  	aci	"atch    "
    000242  aa  040 040 040 040
    000243  aa   000000 000004     133  	dec	4
    000244  aa  163 145 164 040    134  	aci	"set "		setdigits
    000245  aa  144 151 147 151    135  	aci	"digits  "
    000246  aa  164 163 040 040
    000247  aa   000000 000006     136  	dec	6
    000250  aa  163 164 157 040    137  	aci	"sto "		stop
    000251  aa  160 040 040 040    138  	aci	"p       "
    000252  aa  040 040 040 040
    000253  aa   000000 000001     139  	dec	1
    000254  aa  163 165 142 040    140  	aci	"sub "		sub
    000255  aa  040 040 040 040    141  	aci	"        "
    000256  aa  040 040 040 040
    000257  aa   000000 000000     142  	dec	0
    000260  aa  163 165 142 040    143  	aci	"sub "		subend
    000261  aa  145 156 144 040    144  	aci	"end     "
    000262  aa  040 040 040 040
    000263  aa   000000 000003     145  	dec	3
    000264  aa  164 145 141 040    146  	aci	"tea "		teach
    000265  aa  143 150 040 040    147  	aci	"ch      "
    000266  aa  040 040 040 040
    000267  aa   000000 000002     148  	dec	2
    000270  aa  164 151 155 040    149  	aci	"tim "		time
    000271  aa  145 040 040 040    150  	aci	"e       "
    000272  aa  040 040 040 040
    000273  aa   000000 000001     151  	dec	1
    000274  aa  167 162 151 040    152  	aci	"wri "		write
    000275  aa  164 145 040 040    153  	aci	"te      "
    000276  aa  040 040 040 040
    000277  aa   000000 000002     154  	dec	2
                                   155  "
                                   156  	include	basic_xfer_vector
                                   1-1  "	BEGIN INCLUDE FILE -- basic_xfer_vector.incl.alm
                                   1-2  "
                                   1-3  "	Written by B. Wolman 1973
                                   1-4  "	Modified by M. Weaver 1975
                                   1-5  "	Modified by M. Weaver 1981 for new function operators
                                   1-6  "	Modified by M. Weaver 9/81 for new string_data_read operator
                                   1-7  "	Modified by D. Leskiw, May 1984 for new string operator mid$
                                   1-8  "	            to use code from sst$
                                   1-9  "	Modified by D. Leskiw, May 1984 for new string operator left$
                                  1-10  "	Modified by D. Leskiw, May 1984 for new string operator right$
                                  1-11  "
                                  1-12  "	Offsets in run-time transfer vector
                                  1-13  "
                        000001    1-14  	equ	string_assign_op,1
                        000002    1-15  	equ	string_concatenate_op,2
                        000003    1-16  	equ	string_compare_op,3
                        000004    1-17  	equ	len_fun,4
                        000005    1-18  	equ	pos_fun,5
                        000006    1-19  	equ	chr_fun,6
                        000007    1-20  	equ	clk_fun,7
                        000010    1-21  	equ	dat_fun,8
                        000011    1-22  	equ	usr_fun,9
                        000012    1-23  	equ	str_fun,10
                        000013    1-24  	equ	seg_fun,11
                        000014    1-25  	equ	sst_fun,12
                        000014    1-26  	equ	mid_fun,12	mid$ uses sst$ routine
                        000015    1-27  	equ	max_fun,13
                        000016    1-28  	equ	min_fun,14
                        000017    1-29  	equ	change_from_string,15
                        000020    1-30  	equ	change_to_string,16
                        000021    1-31  	equ	argcnt_fun,17
                        000022    1-32  	equ	argval_fun,18
                                  1-33  "
                        000024    1-34  	equ	stop_op,20
                        000025    1-35  	equ	on_op,21
                        000026    1-36  	equ	gosub_op,22
                        000027    1-37  	equ	on_gosub_op,23
                        000030    1-38  	equ	sub_call_op,24
                        000031    1-39  	equ	std_sub_call_op,25
                        000032    1-40  	equ	return_op,26
                        000033    1-41  	equ	sub_exit_op,27
                        000221    1-42  	equ	fun_call_op,145
                        000222    1-43  	equ	global_fun_call_op,146
                        000223    1-44  	equ	fun_return_op,147
                        000037    1-45  	equ	list_sub_op,31
                        000040    1-46  	equ	table_sub_op,32
                        000041    1-47  	equ	inv_table_sub_op,33
                        000042    1-48  	equ	error_in_statement,34
                        000043    1-49  	equ	missing_line,35
                        000044    1-50  	equ	unclosed_for,36
                        000046    1-51  	equ	undefined_function,38
                        000047    1-52  	equ	subend_op,39
                                  1-53  "
                        000050    1-54  	equ	use_tty_op,40
                        000051    1-55  	equ	setup_fcb_op,41
                        000052    1-56  	equ	scratch_op,42
                        000053    1-57  	equ	margin_op,43
                        000054    1-58  	equ	reset_op,44
                        000055    1-59  	equ	numeric_write_op,45
                        000056    1-60  	equ	string_write_op,46
                        000057    1-61  	equ	numeric_read_op,47
                        000060    1-62  	equ	string_read_op,48
                        000061    1-63  	equ	numeric_print_op,49
                        000062    1-64  	equ	string_print_op,50
                        000063    1-65  	equ	print_new_line_op,51
                        000064    1-66  	equ	tab_for_comma_op,52
                        000065    1-67  	equ	tab_fun,53
                        000066    1-68  	equ	spc_fun,54
                        000067    1-69  	equ	check_eof_op,55
                        000070    1-70  	equ	numeric_input_op,56
                        000071    1-71  	equ	string_input_op,57
                        000072    1-72  	equ	linput_op,58
                        000073    1-73  	equ	end_input_op,59
                        000074    1-74  	equ	lof_fun,60
                        000075    1-75  	equ	loc_fun,61
                        000076    1-76  	equ	mar_fun,62
                        000077    1-77  	equ	numeric_data_read,63
                        000224    1-78  	equ	string_data_read,148
                        000101    1-79  	equ	per_fun,65
                        000102    1-80  	equ	typ_fun,66
                        000103    1-81  	equ	use_fcb_op,67
                        000104    1-82  	equ	print_using_start_op,68
                        000105    1-83  	equ	print_using_end_op,69
                        000106    1-84  	equ	print_using_numeric_op,70
                        000107    1-85  	equ	print_using_string_op,71
                        000110    1-86  	equ	hps_fun,72
                        000111    1-87  	equ	lin_fun,73
                        000112    1-88  	equ	tst_fun,74
                        000113    1-89  	equ	num_fun,75
                        000114    1-90  	equ	file_fun,76
                        000115    1-91  	equ	end_print_op,77
                        000116    1-92  	equ	reset_ascii_op,78
                        000117    1-93  	equ	reset_random_op,79
                                  1-94  "
                        000120    1-95  	equ	abs_fun,80
                        000121    1-96  	equ	int_fun,81
                        000122    1-97  	equ	mod_fun,82
                        000123    1-98  	equ	randomize_fun,83
                        000124    1-99  	equ	rnd_fun,84
                        000125   1-100  	equ	sgn_fun,85
                        000126   1-101  	equ	tim_fun,86
                        000127   1-102  	equ	val_fun,87
                        000130   1-103  	equ	sqr_fun,88
                        000131   1-104  	equ	cos_fun,89
                        000132   1-105  	equ	sin_fun,90
                        000133   1-106  	equ	cot_fun,91
                        000134   1-107  	equ	tan_fun,92
                        000135   1-108  	equ	atn_fun,93
                        000136   1-109  	equ	exp_fun,94
                        000137   1-110  	equ	log_fun,95
                        000140   1-111  	equ	clg_fun,96
                        000141   1-112  	equ	pwr_fun,97
                        000142   1-113  	equ	pwri_fun,98
                                 1-114  "
                        000144   1-115  	equ	det_fun,100
                        000145   1-116  	equ	con_fun,101
                        000146   1-117  	equ	idn_fun,102
                        000147   1-118  	equ	inv_fun,103
                        000150   1-119  	equ	trn_fun,104
                        000151   1-120  	equ	zer_fun,105
                        000152   1-121  	equ	nul_fun,106
                                 1-122  "
                        000153   1-123  	equ	list_redim_op,107
                        000154   1-124  	equ	table_redim_op,108
                        000155   1-125  	equ	inv_table_redim_op,109
                                 1-126  "
                        000156   1-127  	equ	mat_numeric_input_op,110
                        000157   1-128  	equ	mat_string_input_op,111
                        000160   1-129  	equ	mat_numeric_print_op,112
                        000161   1-130  	equ	mat_string_print_op,113
                        000162   1-131  	equ	mat_numeric_read_op,114
                        000163   1-132  	equ	mat_string_read_op,115
                        000164   1-133  	equ	mat_numeric_write_op,116
                        000165   1-134  	equ	mat_string_write_op,117
                        000166   1-135  	equ	mat_linput_op,118
                        000167   1-136  	equ	mat_numeric_data_read,119
                        000170   1-137  	equ	mat_string_data_read,120
                        000171   1-138  	equ	mat_print_using_numeric,121
                        000172   1-139  	equ	mat_print_using_string,122
                        000173   1-140  	equ	mat_assign_numeric,123
                        000174   1-141  	equ	mat_add,124
                        000175   1-142  	equ	mat_sub,125
                        000176   1-143  	equ	mat_scalar_mult,126
                        000177   1-144  	equ	dot_product,127
                        000200   1-145  	equ	mat_assign_string,128
                        000201   1-146  	equ	mat_mult_vm,129
                        000202   1-147  	equ	mat_mult_mv,130
                        000203   1-148  	equ	mat_mult_mm,131
                                 1-149  "
                        000204   1-150  	equ	setdigits_op,132
                        000225   1-151  	equ	left_fun,149
                        000226   1-152  	equ	right_fun,150
                                 1-153  "
                                 1-154  "	END INCLUDE FILE -- basic_xfer_vector.incl.alm
                                   157  "
                                   158  "	Information tables giving predefined BASIC functions
                                   159  "
                        000001     160  	equ	n.0,1		numeric	no arguments
                        000002     161  	equ	n.n,2		numeric	one numeric arg
                        000003     162  	equ	n.s,3		numeric	one string arg
                        000004     163  	equ	n.f,4		numeric	one file arg
                        000005     164  	equ	s.0,5		string	no arguments
                        000006     165  	equ	s.n,6		string	one numeric arg
                        000007     166  	equ	s.nn,7		string	two numeric args
                        000010     167  	equ	n.nn,8		numeric	two numeric args
                        000011     168  	equ	n.fs,9		numeric	one file arg, one string arg
                        000012     169  	equ	n.ssn,10		numeric	two string args, one numeric arg
                        000013     170  	equ	s.snn,11		string	one string arg, two numeric args
                        000014     171  	equ	n.var,12		numeric	variable number of args
                        000015     172  	equ	matrix,13		matrix function
                        000016     173  	equ	print_fun,14	print function (tab & spc)
                        000017     174  	equ	matrix_constant,15	con, idn, zer, nul$
                        000020     175  	equ	s.sn,16		string	one string arg, one numeric arg
                        000021     176  	equ	pos_args,17	pos$(a$,b$,[i])
                                   177  "
                                   178  "	Table of basic functions
                                   179  "
                        000300     180  	segdef	functions
                                   181  "
                                   182  "	Numeric valued functions
                                   183  "
    000300                         184  functions:
    000300  aa  141 142 163 040    185  	aci	"abs "		abs(x)
    000301  aa   000000 000002     186  	vfd	36/n.n
    000302  aa  0 00120 7071 00    187  	tsx7	ap|abs_fun
    000303  aa  141 164 156 040    188  	aci	"atn "		atn(x)
    000304  aa   000000 000002     189  	vfd	36/n.n
    000305  aa  0 00135 7071 00    190  	tsx7	ap|atn_fun
    000306  aa  143 154 147 040    191  	aci	"clg "		clg(x)
    000307  aa   000000 000002     192  	vfd	36/n.n
    000310  aa  0 00140 7071 00    193  	tsx7	ap|clg_fun
    000311  aa  143 156 164 040    194  	aci	"cnt "		cnt
    000312  aa   000000 000001     195  	vfd	36/n.0
    000313  aa  0 00021 7071 00    196  	tsx7	ap|argcnt_fun
    000314  aa  143 157 156 040    197  	aci	"con "		con
    000315  aa   000000 000017     198  	vfd	36/matrix_constant
    000316  aa  0 00145 7071 00    199  	tsx7	ap|con_fun
    000317  aa  143 157 163 040    200  	aci	"cos "		cos(x)
    000320  aa   000000 000002     201  	vfd	36/n.n
    000321  aa  0 00131 7071 00    202  	tsx7	ap|cos_fun
    000322  aa  143 157 164 040    203  	aci	"cot "		cot(x)
    000323  aa   000000 000002     204  	vfd	36/n.n
    000324  aa  0 00133 7071 00    205  	tsx7	ap|cot_fun
    000325  aa  144 145 164 040    206  	aci	"det "		det
    000326  aa   000000 000001     207  	vfd	36/n.0
    000327  aa  0 00144 7071 00    208  	tsx7	ap|det_fun
    000330  aa  145 170 160 040    209  	aci	"exp "		exp(x)
    000331  aa   000000 000002     210  	vfd	36/n.n
    000332  aa  0 00136 7071 00    211  	tsx7	ap|exp_fun
    000333  aa  150 160 163 040    212  	aci	"hps "		hps(#f)
    000334  aa   000000 000004     213  	vfd	36/n.f
    000335  aa  0 00110 7071 00    214  	tsx7	ap|hps_fun
    000336  aa  151 144 156 040    215  	aci	"idn "		idn
    000337  aa   000000 000017     216  	vfd	36/matrix_constant
    000340  aa  0 00146 7071 00    217  	tsx7	ap|idn_fun
    000341  aa  151 156 164 040    218  	aci	"int "		int(x)
    000342  aa   000000 000002     219  	vfd	36/n.n
    000343  aa  0 00121 7071 00    220  	tsx7	ap|int_fun
    000344  aa  151 156 166 040    221  	aci	"inv "		inv
    000345  aa   000000 000015     222  	vfd	36/matrix
    000346  aa  0 00147 7071 00    223  	tsx7	ap|inv_fun
    000347  aa  154 145 156 040    224  	aci	"len "		len(a$)
    000350  aa   000000 000003     225  	vfd	36/n.s
    000351  aa  0 00004 7071 00    226  	tsx7	ap|len_fun
    000352  aa  154 151 156 040    227  	aci	"lin "		lin(#f)
    000353  aa   000000 000004     228  	vfd	36/n.f
    000354  aa  0 00111 7071 00    229  	tsx7	ap|lin_fun
    000355  aa  154 157 143 040    230  	aci	"loc "		loc(#f)
    000356  aa   000000 000004     231  	vfd	36/n.f
    000357  aa  0 00075 7071 00    232  	tsx7	ap|loc_fun
    000360  aa  154 157 146 040    233  	aci	"lof "		lof(#f)
    000361  aa   000000 000004     234  	vfd	36/n.f
    000362  aa  0 00074 7071 00    235  	tsx7	ap|lof_fun
    000363  aa  154 157 147 040    236  	aci	"log "		log(x)
    000364  aa   000000 000002     237  	vfd	36/n.n
    000365  aa  0 00137 7071 00    238  	tsx7	ap|log_fun
    000366  aa  155 141 162 040    239  	aci	"mar "		mar(#f)
    000367  aa   000000 000004     240  	vfd	36/n.f
    000370  aa  0 00076 7071 00    241  	tsx7	ap|mar_fun
    000371  aa  155 141 170 040    242  	aci	"max "		max(x,y,...,z)
    000372  aa   000000 000014     243  	vfd	36/n.var
    000373  aa  0 00015 7071 00    244  	tsx7	ap|max_fun
    000374  aa  155 151 156 040    245  	aci	"min "		min(x,y,...,z)
    000375  aa   000000 000014     246  	vfd	36/n.var
    000376  aa  0 00016 7071 00    247  	tsx7	ap|min_fun
    000377  aa  155 157 144 040    248  	aci	"mod "		mod(x,y)
    000400  aa   000000 000010     249  	vfd	36/n.nn
    000401  aa  0 00122 7071 00    250  	tsx7	ap|mod_fun
    000402  aa  156 165 155 040    251  	aci	"num "		num
    000403  aa   000000 000001     252  	vfd	36/n.0
    000404  aa  0 00113 7071 00    253  	tsx7	ap|num_fun
    000405  aa  160 145 162 040    254  	aci	"per "		per(#f,a$)
    000406  aa   000000 000011     255  	vfd	36/n.fs
    000407  aa  0 00101 7071 00    256  	tsx7	ap|per_fun
    000410  aa  160 157 163 040    257  	aci	"pos "		pos(a$,b$,x)
    000411  aa   000000 000021     258  	vfd	36/pos_args
    000412  aa  0 00005 7071 00    259  	tsx7	ap|pos_fun
    000413  aa  162 156 144 040    260  	aci	"rnd "		rnd
    000414  aa   000000 000001     261  	vfd	36/n.0
    000415  aa  0 00124 7071 00    262  	tsx7	ap|rnd_fun
    000416  aa  163 147 156 040    263  	aci	"sgn "		sgn(x)
    000417  aa   000000 000002     264  	vfd	36/n.n
    000420  aa  0 00125 7071 00    265  	tsx7	ap|sgn_fun
    000421  aa  163 151 156 040    266  	aci	"sin "		sin(x)
    000422  aa   000000 000002     267  	vfd	36/n.n
    000423  aa  0 00132 7071 00    268  	tsx7	ap|sin_fun
    000424  aa  163 160 143 040    269  	aci	"spc "		spc(x)
    000425  aa   000000 000016     270  	vfd	36/print_fun
    000426  aa  0 00066 7071 00    271  	tsx7	ap|spc_fun
    000427  aa  163 161 162 040    272  	aci	"sqr "		sqr(x)
    000430  aa   000000 000002     273  	vfd	36/n.n
    000431  aa  0 00130 7071 00    274  	tsx7	ap|sqr_fun
    000432  aa  164 141 142 040    275  	aci	"tab "		tab(x)
    000433  aa   000000 000016     276  	vfd	36/print_fun
    000434  aa  0 00065 7071 00    277  	tsx7	ap|tab_fun
    000435  aa  164 141 156 040    278  	aci	"tan "		tan(x)
    000436  aa   000000 000002     279  	vfd	36/n.n
    000437  aa  0 00134 7071 00    280  	tsx7	ap|tan_fun
    000440  aa  164 151 155 040    281  	aci	"tim "		tim
    000441  aa   000000 000001     282  	vfd	36/n.0
    000442  aa  0 00126 7071 00    283  	tsx7	ap|tim_fun
    000443  aa  164 162 156 040    284  	aci	"trn "		trn
    000444  aa   000000 000015     285  	vfd	36/matrix
    000445  aa  0 00150 7071 00    286  	tsx7	ap|trn_fun
    000446  aa  164 163 164 040    287  	aci	"tst "		tst(a$)
    000447  aa   000000 000003     288  	vfd	36/n.s
    000450  aa  0 00112 7071 00    289  	tsx7	ap|tst_fun
    000451  aa  164 171 160 040    290  	aci	"typ "		typ(#f,a$)
    000452  aa   000000 000011     291  	vfd	36/n.fs
    000453  aa  0 00102 7071 00    292  	tsx7	ap|typ_fun
    000454  aa  166 141 154 040    293  	aci	"val "		val(a$)
    000455  aa   000000 000003     294  	vfd	36/n.s
    000456  aa  0 00127 7071 00    295  	tsx7	ap|val_fun
    000457  aa  172 145 162 040    296  	aci	"zer "		zer
    000460  aa   000000 000017     297  	vfd	36/matrix_constant
    000461  aa  0 00151 7071 00    298  	tsx7	ap|zer_fun
                                   299  "
                                   300  "	string valued functions
                                   301  "
    000462  aa  141 162 147 040    302  	aci	"arg "		arg$(x)
    000463  aa   000000 000006     303  	vfd	36/s.n
    000464  aa  0 00022 7071 00    304  	tsx7	ap|argval_fun
    000465  aa  143 150 162 040    305  	aci	"chr "		chr$(x)
    000466  aa   000000 000006     306  	vfd	36/s.n
    000467  aa  0 00006 7071 00    307  	tsx7	ap|chr_fun
    000470  aa  143 154 153 040    308  	aci	"clk "		clk$
    000471  aa   000000 000005     309  	vfd	36/s.0
    000472  aa  0 00007 7071 00    310  	tsx7	ap|clk_fun
    000473  aa  144 141 164 040    311  	aci	"dat "		dat$
    000474  aa   000000 000005     312  	vfd	36/s.0
    000475  aa  0 00010 7071 00    313  	tsx7	ap|dat_fun
    000476  aa  156 165 154 040    314  	aci	"nul "		nul$
    000477  aa   000000 000017     315  	vfd	36/matrix_constant
    000500  aa  0 00152 7071 00    316  	tsx7	ap|nul_fun
    000501  aa  163 145 147 040    317  	aci	"seg "		seg$(a$,x,y)
    000502  aa   000000 000013     318  	vfd	36/s.snn
    000503  aa  0 00013 7071 00    319  	tsx7	ap|seg_fun
    000504  aa  163 163 164 040    320  	aci	"sst "		sst$(a$,x,y)
    000505  aa   000000 000013     321  	vfd	36/s.snn
    000506  aa  0 00014 7071 00    322  	tsx7	ap|sst_fun
    000507  aa  163 164 162 040    323  	aci	"str "		str$(x)
    000510  aa   000000 000006     324  	vfd	36/s.n
    000511  aa  0 00012 7071 00    325  	tsx7	ap|str_fun
    000512  aa  165 163 162 040    326  	aci	"usr "		usr$
    000513  aa   000000 000005     327  	vfd	36/s.0
    000514  aa  0 00011 7071 00    328  	tsx7	ap|usr_fun
    000515  aa  155 151 144 040    329  	aci	"mid "		mid$(a$,x,y)
    000516  aa   000000 000013     330  	vfd	36/s.snn
    000517  aa  0 00014 7071 00    331  	tsx7	ap|mid_fun
    000520  aa  154 145 146 164    332  	aci	"left"		left$(a$,n)
    000521  aa   000000 000020     333  	vfd	36/s.sn
    000522  aa  0 00225 7071 00    334  	tsx7	ap|left_fun
    000523  aa  162 151 147 150    335  	aci	"righ"		right$(a$,n)
    000524  aa   000000 000020     336  	vfd	36/s.sn
    000525  aa  0 00226 7071 00    337  	tsx7	ap|right_fun
                                   338  "
                                   339  "	Spelling table for numeric functions
                                   340  "
                        000526     341  	segdef	numeric_spelling
    000526                         342  numeric_spelling:
    000526  aa   000000 000001     343  	dec	1,2		a
    000527  aa   000000 000002 
    000530  aa   000000 000000     344  	dec	0,-1		b
    000531  aa   777777 777777 
    000532  aa   000000 000003     345  	dec	3,7		c
    000533  aa   000000 000007 
    000534  aa   000000 000010     346  	dec	8,8		d
    000535  aa   000000 000010 
    000536  aa   000000 000011     347  	dec	9,9		e
    000537  aa   000000 000011 
    000540  aa   000000 000000     348  	dec	0,-1		f
    000541  aa   777777 777777 
    000542  aa   000000 000000     349  	dec	0,-1		g
    000543  aa   777777 777777 
    000544  aa   000000 000012     350  	dec	10,10		h
    000545  aa   000000 000012 
    000546  aa   000000 000013     351  	dec	11,13		i
    000547  aa   000000 000015 
    000550  aa   000000 000000     352  	dec	0,-1		j
    000551  aa   777777 777777 
    000552  aa   000000 000000     353  	dec	0,-1		k
    000553  aa   777777 777777 
    000554  aa   000000 000016     354  	dec	14,18		l
    000555  aa   000000 000022 
    000556  aa   000000 000023     355  	dec	19,22		m
    000557  aa   000000 000026 
    000560  aa   000000 000027     356  	dec	23,23		n
    000561  aa   000000 000027 
    000562  aa   000000 000000     357  	dec	0,-1		o
    000563  aa   777777 777777 
    000564  aa   000000 000030     358  	dec	24,25		p
    000565  aa   000000 000031 
    000566  aa   000000 000000     359  	dec	0,-1		q
    000567  aa   777777 777777 
    000570  aa   000000 000032     360  	dec	26,26		r
    000571  aa   000000 000032 
    000572  aa   000000 000033     361  	dec	27,30		s
    000573  aa   000000 000036 
    000574  aa   000000 000037     362  	dec	31,36		t
    000575  aa   000000 000044 
    000576  aa   000000 000000     363  	dec	0,-1		u
    000577  aa   777777 777777 
    000600  aa   000000 000045     364  	dec	37,37		v
    000601  aa   000000 000045 
    000602  aa   000000 000000     365  	dec	0,-1		w
    000603  aa   777777 777777 
    000604  aa   000000 000000     366  	dec	0,-1		x
    000605  aa   777777 777777 
    000606  aa   000000 000000     367  	dec	0,-1		y
    000607  aa   777777 777777 
    000610  aa   000000 000046     368  	dec	38,38		z
    000611  aa   000000 000046 
                                   369  "
                                   370  "	Spelling table for string functions
                                   371  "
                        000612     372  	segdef	string_spelling
    000612                         373  string_spelling:
    000612  aa   000000 000047     374  	dec	39,39		a
    000613  aa   000000 000047 
    000614  aa   000000 000000     375  	dec	0,-1		b
    000615  aa   777777 777777 
    000616  aa   000000 000050     376  	dec	40,41		c
    000617  aa   000000 000051 
    000620  aa   000000 000052     377  	dec	42,42		d
    000621  aa   000000 000052 
    000622  aa   000000 000000     378  	dec	0,-1		e
    000623  aa   777777 777777 
    000624  aa   000000 000000     379  	dec	0,-1		f
    000625  aa   777777 777777 
    000626  aa   000000 000000     380  	dec	0,-1		g
    000627  aa   777777 777777 
    000630  aa   000000 000000     381  	dec	0,-1		h
    000631  aa   777777 777777 
    000632  aa   000000 000000     382  	dec	0,-1		i
    000633  aa   777777 777777 
    000634  aa   000000 000000     383  	dec	0,-1		j
    000635  aa   777777 777777 
    000636  aa   000000 000000     384  	dec	0,-1		k
    000637  aa   777777 777777 
    000640  aa   000000 000061     385  	dec	49,49		l, used for left$
    000641  aa   000000 000061 
    000642  aa   000000 000060     386  	dec	48,48		m, used for mid$
    000643  aa   000000 000060 
    000644  aa   000000 000053     387  	dec	43,43		n
    000645  aa   000000 000053 
    000646  aa   000000 000000     388  	dec	0,-1		o
    000647  aa   777777 777777 
    000650  aa   000000 000000     389  	dec	0,-1		p
    000651  aa   777777 777777 
    000652  aa   000000 000000     390  	dec	0,-1		q
    000653  aa   777777 777777 
    000654  aa   000000 000062     391  	dec	50,50		r, used for right$
    000655  aa   000000 000062 
    000656  aa   000000 000054     392  	dec	44,46		s, used for seg$,sst$,str$
    000657  aa   000000 000056 
    000660  aa   000000 000000     393  	dec	0,-1		t
    000661  aa   777777 777777 
    000662  aa   000000 000057     394  	dec	47,47		u
    000663  aa   000000 000057 
    000664  aa   000000 000000     395  	dec	0,-1		v
    000665  aa   777777 777777 
    000666  aa   000000 000000     396  	dec	0,-1		w
    000667  aa   777777 777777 
    000670  aa   000000 000000     397  	dec	0,-1		x
    000671  aa   777777 777777 
    000672  aa   000000 000000     398  	dec	0,-1		y
    000673  aa   777777 777777 
    000674  aa   000000 000000     399  	dec	0,-1		z
    000675  aa   777777 777777 
                                   400  "
                        000676     401  	segdef	function_templates
                                   402  "
                                   403  "	code templates for functions passed as subprogram arguments
                                   404  "
    000676                         405  function_templates:
    000676  0a   000740 0000 00    406  	arg	numeric_0		n.0
    000677  0a   000747 0000 00    407  	arg	numeric_n		n.n
    000700  0a   000757 0000 00    408  	arg	numeric_s		n.s
    000701  0a   000747 0000 00    409  	arg	numeric_f		n.f
    000702  0a   000767 0000 00    410  	arg	string_0		s.0
    000703  0a   000777 0000 00    411  	arg	string_n		s.n
    000704  aa   000000 0000 00    412  	arg	0		s.nn
    000705  0a   001010 0000 00    413  	arg	numeric_nn	n.nn
    000706  0a   001021 0000 00    414  	arg	numeric_fs	n.fs
    000707  0a   001032 0000 00    415  	arg	numeric_ssn	n.ssn
    000710  0a   001044 0000 00    416  	arg	string_snn	s.snn
    000711  aa   000000 0000 00    417  	arg	0		n.var
    000712  aa   000000 0000 00    418  	arg	0		matrix
    000713  aa   000000 0000 00    419  	arg	0		print_fun
    000714  aa   000000 0000 00    420  	arg	0		matrix_constant
    000715  0a   001057 0000 00    421  	arg	string_sn		s.sn
    000716  aa   000000 0000 00    422  	arg	0		pos_args
    000717  0a   001071 0000 00    423  	arg	d_numeric_0	n.0
    000720  0a   001100 0000 00    424  	arg	d_numeric_n	n.n
    000721  0a   001110 0000 00    425  	arg	d_numeric_s	n.s
    000722  0a   001100 0000 00    426  	arg	d_numeric_f	n.f
    000723  0a   000767 0000 00    427  	arg	string_0	s.0
    000724  0a   001120 0000 00    428  	arg	d_string_n	s.n
    000725  aa   000000 0000 00    429  	arg	0		s.nn
    000726  0a   001131 0000 00    430  	arg	d_numeric_nn	n.nn
    000727  0a   001142 0000 00    431  	arg	d_numeric_fs	n.fs
    000730  0a   001153 0000 00    432  	arg	d_numeric_ssn	n.ssn
    000731  0a   001165 0000 00    433  	arg	d_string_snn	s.snn
    000732  aa   000000 0000 00    434  	arg	0		n.var
    000733  aa   000000 0000 00    435  	arg	0		matrix
    000734  aa   000000 0000 00    436  	arg	0		print_fun
    000735  aa   000000 0000 00    437  	arg	0		matrix_constant
    000736  0a   001200 0000 00    438  	arg	d_string_sn	s.sn
    000737  aa   000000 0000 00    439  	arg	0		pos_args
                                   440  "	numeric	no arguments
                                   441  "
    000740                         442  numeric_0:
    000740  aa   000007 7100 04    443  	tra	7,ic
    000741  aa   000000 000000     444  	oct	0
    000742  aa   000000 000000     445  	oct	0
    000743  aa   000000 7070 00    446  	tsx7	0
    000744  aa  6 00000 4551 16    447  	fst	sp|0,6
    000745  aa   777774 3534 04    448  	epp3	-4,ic
    000746  aa  0 00223 7071 00    449  	tsx7	ap|fun_return_op
                                   450  "
                                   451  "	numeric	one numeric arg
                                   452  "	numeric	one file arg
                                   453  "
    000747                         454  numeric_n:
    000747                         455  numeric_f:
    000747  aa   000010 7100 04    456  	tra	8,ic
    000750  aa   020000 000000     457  	oct	020000000000
    000751  aa   000000 000000     458  	oct	0
    000752  aa  6 00001 4311 16    459  	fld	sp|1,6
    000753  aa   000000 7070 00    460  	tsx7	0
    000754  aa  6 00000 4551 16    461  	fst	sp|0,6
    000755  aa   777773 3534 04    462  	epp3	-5,ic
    000756  aa  0 00223 7071 00    463  	tsx7	ap|fun_return_op
                                   464  "
                                   465  "	numeric	one string arg
                                   466  "
    000757                         467  numeric_s:
    000757  aa   000010 7100 04    468  	tra	8,ic
    000760  aa   024000 000000     469  	oct	024000000000
    000761  aa   000000 000000     470  	oct	0
    000762  aa  6 00001 3515 16    471  	epp1	sp|1,6
    000763  aa   000000 7070 00    472  	tsx7	0
    000764  aa  6 00000 4551 16    473  	fst	sp|0,6
    000765  aa   777773 3534 04    474  	epp3	-5,ic
    000766  aa  0 00223 7071 00    475  	tsx7	ap|fun_return_op
                                   476  "
                                   477  "	string	no arguments
                                   478  "
    000767                         479  string_0:
    000767  aa   000010 7100 04    480  	tra	8,ic
    000770  aa   010000 000000     481  	oct	010000000000
    000771  aa   000000 000000     482  	oct	0
    000772  aa   000000 7070 00    483  	tsx7	0
    000773  aa  6 00000 3535 16    484  	epp3	sp|0,6
    000774  aa  0 00001 7071 00    485  	tsx7	ap|string_assign_op
    000775  aa   777773 3534 04    486  	epp3	-5,ic
    000776  aa  0 00223 7071 00    487  	tsx7	ap|fun_return_op
                                   488  "
                                   489  "	string	one numeric arg
                                   490  "
    000777                         491  string_n:
    000777  aa   000011 7100 04    492  	tra	9,ic
    001000  aa   030000 000000     493  	oct	030000000000
    001001  aa   000000 000000     494  	oct	0
    001002  aa  6 00001 4311 16    495  	fld	sp|1,6
    001003  aa   000000 7070 00    496  	tsx7	0
    001004  aa  6 00000 3535 16    497  	epp3	sp|0,6
    001005  aa  0 00001 7071 00    498  	tsx7	ap|string_assign_op
    001006  aa   777772 3534 04    499  	epp3	-6,ic
    001007  aa  0 00223 7071 00    500  	tsx7	ap|fun_return_op
                                   501  "
                                   502  "	numeric	two numeric args
                                   503  "
    001010                         504  numeric_nn:
    001010  aa   000011 7100 04    505  	tra	9,ic
    001011  aa   040000 000000     506  	oct	040000000000
    001012  aa   000000 000000     507  	oct	0
    001013  aa  6 00001 4311 16    508  	fld	sp|1,6
    001014  aa   000000 7070 00    509  	tsx7	0
    001015  aa  6 00002 4311 16    510  	fld	sp|2,6
    001016  aa  6 00000 4551 16    511  	fst	sp|0,6
    001017  aa   777772 3534 04    512  	epp3	-6,ic
    001020  aa  0 00223 7071 00    513  	tsx7	ap|fun_return_op
                                   514  "
                                   515  "	numeric one file arg, one string arg
                                   516  "
    001021                         517  numeric_fs:
    001021  aa   000011 7100 04    518  	tra	9,ic
    001022  aa   042000 000000     519  	oct	042000000000
    001023  aa   000000 000000     520  	oct	0
    001024  aa  6 00001 4311 16    521  	fld	sp|1,6
    001025  aa  6 00002 3515 16    522  	epp1	sp|2,6
    001026  aa   000000 7070 00    523  	tsx7	0
    001027  aa  6 00000 4551 16    524  	fst	sp|0,6
    001030  aa   777772 3534 04    525  	epp3	-6,ic
    001031  aa  0 00223 7071 00    526  	tsx7	ap|fun_return_op
                                   527  "
                                   528  "	numeric	two string args, one numeric arg
                                   529  "
    001032                         530  numeric_ssn:
    001032  aa   000012 7100 04    531  	tra	10,ic
    001033  aa   066000 000000     532  	oct	066000000000
    001034  aa   000000 000000     533  	oct	0
    001035  aa  6 00003 4311 16    534  	fld	sp|3,6
    001036  aa  6 00001 3515 16    535  	epp1	sp|1,6
    001037  aa  6 00002 3535 16    536  	epp3	sp|2,6
    001040  aa   000000 7070 00    537  	tsx7	0
    001041  aa  6 00000 4551 16    538  	fst	sp|0,6
    001042  aa   777771 3534 04    539  	epp3	-7,ic
    001043  aa  0 00223 7071 00    540  	tsx7	ap|fun_return_op
                                   541  "
                                   542  "	string	one string arg, tw numeric args
                                   543  "
    001044                         544  string_snn:
    001044  aa   000013 7100 04    545  	tra	11,ic
    001045  aa   074000 000000     546  	oct	074000000000
    001046  aa   000000 000000     547  	oct	0
    001047  aa  6 00002 4311 16    548  	fld	sp|2,6
    001050  aa  6 00001 3515 16    549  	epp1	sp|1,6
    001051  aa   000000 7070 00    550  	tsx7	0
    001052  aa  6 00003 4311 16    551  	fld	sp|3,6
    001053  aa  6 00000 3535 16    552  	epp3	sp|0,6
    001054  aa  0 00001 7071 00    553  	tsx7	ap|string_assign_op
    001055  aa   777770 3534 04    554  	epp3	-8,ic
    001056  aa  0 00223 7071 00    555  	tsx7	ap|fun_return_op
                                   556  "	
                                   557  "	string	string arg, numeric arg
                                   558  "
    001057                         559  string_sn:
    001057  aa   000012 7100 04    560  	tra 	10,ic
    001060  aa   054000 000000     561  	oct	054000000000
    001061  aa   000000 000000     562  	oct	0
    001062  aa  6 00002 4311 16    563  	fld	sp|2,6
    001063  aa  6 00001 3515 16    564  	epp1	sp|1,6
    001064  aa   000000 7070 00    565  	tsx7	0
    001065  aa  6 00000 3535 16    566  	epp3 	sp|0,6
    001066  aa  0 00001 7071 00    567  	tsx7	ap|string_assign_op
    001067  aa   777771 3534 04    568  	epp3	-7,ic
    001070  aa  0 00223 7071 00    569  	tsx7	ap|fun_return_op
                                   570  	
                                   571  "
                                   572  "	numeric	no arguments
                                   573  "
    001071                         574  d_numeric_0:
    001071  aa   000007 7100 04    575  	tra	7,ic
    001072  aa   000000 000000     576  	oct	0
    001073  aa   000000 000000     577  	oct	0
    001074  aa   000000 7070 00    578  	tsx7	0
    001075  aa  6 00000 4571 16    579  	dfst	sp|0,6
    001076  aa   777774 3534 04    580  	epp3	-4,ic
    001077  aa  0 00223 7071 00    581  	tsx7	ap|fun_return_op
                                   582  "
                                   583  "	numeric	one numeric arg
                                   584  "	numeric	one file arg
                                   585  "
    001100                         586  d_numeric_n:
    001100                         587  d_numeric_f:
    001100  aa   000010 7100 04    588  	tra	8,ic
    001101  aa   020000 000000     589  	oct	020000000000
    001102  aa   000000 000000     590  	oct	0
    001103  aa  6 00002 4331 16    591  	dfld	sp|2,6
    001104  aa   000000 7070 00    592  	tsx7	0
    001105  aa  6 00000 4571 16    593  	dfst	sp|0,6
    001106  aa   777773 3534 04    594  	epp3	-5,ic
    001107  aa  0 00223 7071 00    595  	tsx7	ap|fun_return_op
                                   596  "
                                   597  "	numeric	one string arg
                                   598  "
    001110                         599  d_numeric_s:
    001110  aa   000010 7100 04    600  	tra	8,ic
    001111  aa   024000 000000     601  	oct	024000000000
    001112  aa   000000 000000     602  	oct	0
    001113  aa  6 00002 3515 16    603  	epp1	sp|2,6
    001114  aa   000000 7070 00    604  	tsx7	0
    001115  aa  6 00000 4571 16    605  	dfst	sp|0,6
    001116  aa   777773 3534 04    606  	epp3	-5,ic
    001117  aa  0 00223 7071 00    607  	tsx7	ap|fun_return_op
                                   608  "
                                   609  "	string	one numeric arg
                                   610  "
    001120                         611  d_string_n:
    001120  aa   000011 7100 04    612  	tra	9,ic
    001121  aa   030000 000000     613  	oct	030000000000
    001122  aa   000000 000000     614  	oct	0
    001123  aa  6 00002 4331 16    615  	dfld	sp|2,6
    001124  aa   000000 7070 00    616  	tsx7	0
    001125  aa  6 00000 3535 16    617  	epp3	sp|0,6
    001126  aa  0 00001 7071 00    618  	tsx7	ap|string_assign_op
    001127  aa   777772 3534 04    619  	epp3	-6,ic
    001130  aa  0 00223 7071 00    620  	tsx7	ap|fun_return_op
                                   621  "
                                   622  "	numeric	two numeric args
                                   623  "
    001131                         624  d_numeric_nn:
    001131  aa   000011 7100 04    625  	tra	9,ic
    001132  aa   040000 000000     626  	oct	040000000000
    001133  aa   000000 000000     627  	oct	0
    001134  aa  6 00002 4331 16    628  	dfld	sp|2,6
    001135  aa   000000 7070 00    629  	tsx7	0
    001136  aa  6 00004 4331 16    630  	dfld	sp|4,6
    001137  aa  6 00000 4571 16    631  	dfst	sp|0,6
    001140  aa   777772 3534 04    632  	epp3	-6,ic
    001141  aa  0 00223 7071 00    633  	tsx7	ap|fun_return_op
                                   634  "
                                   635  "	numeric one file arg, one string arg
                                   636  "
    001142                         637  d_numeric_fs:
    001142  aa   000011 7100 04    638  	tra	9,ic
    001143  aa   042000 000000     639  	oct	042000000000
    001144  aa   000000 000000     640  	oct	0
    001145  aa  6 00002 4331 16    641  	dfld	sp|2,6
    001146  aa  6 00004 3515 16    642  	epp1	sp|4,6
    001147  aa   000000 7070 00    643  	tsx7	0
    001150  aa  6 00000 4571 16    644  	dfst	sp|0,6
    001151  aa   777772 3534 04    645  	epp3	-6,ic
    001152  aa  0 00223 7071 00    646  	tsx7	ap|fun_return_op
                                   647  "
                                   648  "	numeric	two string args, one numeric arg
                                   649  "
    001153                         650  d_numeric_ssn:
    001153  aa   000012 7100 04    651  	tra	10,ic
    001154  aa   066000 000000     652  	oct	066000000000
    001155  aa   000000 000000     653  	oct	0
    001156  aa  6 00006 4331 16    654  	dfld	sp|6,6
    001157  aa  6 00002 3515 16    655  	epp1	sp|2,6
    001160  aa  6 00004 3535 16    656  	epp3	sp|4,6
    001161  aa   000000 7070 00    657  	tsx7	0
    001162  aa  6 00000 4571 16    658  	dfst	sp|0,6
    001163  aa   777771 3534 04    659  	epp3	-7,ic
    001164  aa  0 00223 7071 00    660  	tsx7	ap|fun_return_op
                                   661  "
                                   662  "	string	one string arg, tw numeric args
                                   663  "
    001165                         664  d_string_snn:
    001165  aa   000013 7100 04    665  	tra	11,ic
    001166  aa   074000 000000     666  	oct	074000000000
    001167  aa   000000 000000     667  	oct	0
    001170  aa  6 00004 4331 16    668  	dfld	sp|4,6
    001171  aa  6 00002 3515 16    669  	epp1	sp|2,6
    001172  aa   000000 7070 00    670  	tsx7	0
    001173  aa  6 00006 4331 16    671  	dfld	sp|6,6
    001174  aa  6 00000 3535 16    672  	epp3	sp|0,6
    001175  aa  0 00001 7071 00    673  	tsx7	ap|string_assign_op
    001176  aa   777770 3534 04    674  	epp3	-8,ic
    001177  aa  0 00223 7071 00    675  	tsx7	ap|fun_return_op
                                   676  "
                                   677  "	string	one string args, one numeric arg
                                   678  "
    001200                         679  d_string_sn:
    001200  aa   000012 7100 04    680  	tra 	10,ic
    001201  aa   054000 000000     681  	oct	054000000000
    001202  aa   000000 000000     682  	oct	0
    001203  aa  6 00004 4331 16    683  	dfld	sp|4,6
    001204  aa  6 00002 3515 16    684  	epp1	sp|2,6
    001205  aa   000000 7070 00    685  	tsx7	0
    001206  aa  6 00000 3535 16    686  	epp3 	sp|0,6
    001207  aa  0 00001 7071 00    687  	tsx7	ap|string_assign_op
    001210  aa   777771 3534 04    688  	epp3	-7,ic
    001211  aa  0 00223 7071 00    689  	tsx7	ap|fun_return_op
                                   690  	
                                   691  "
                                   692  "	Information table for use by ASC function
                                   693  "
                        001212     694  	segdef	ascii_table
    001212                         695  ascii_table:
    001212  aa   000000 000000     696  	vfd	9/0
    001213  aa  156 165 154 040    697  	aci	"nul "
    001214  aa   001000 000000     698  	vfd	9/1
    001215  aa  163 157 150 040    699  	aci	"soh "
    001216  aa   002000 000000     700  	vfd	9/2
    001217  aa  163 164 170 040    701  	aci	"stx "
    001220  aa   003000 000000     702  	vfd	9/3
    001221  aa  145 164 170 040    703  	aci	"etx "
    001222  aa   004000 000000     704  	vfd	9/4
    001223  aa  145 157 164 040    705  	aci	"eot "
    001224  aa   005000 000000     706  	vfd	9/5
    001225  aa  145 156 161 040    707  	aci	"enq "
    001226  aa   006000 000000     708  	vfd	9/6
    001227  aa  141 143 153 040    709  	aci	"ack "
    001230  aa   007000 000000     710  	vfd	9/7
    001231  aa  142 145 154 040    711  	aci	"bel "
    001232  aa   010000 000000     712  	vfd	9/8
    001233  aa  142 163 040 040    713  	aci	"bs  "
    001234  aa   011000 000000     714  	vfd	9/9
    001235  aa  150 164 040 040    715  	aci	"ht  "
    001236  aa   012000 000000     716  	vfd	9/10
    001237  aa  154 146 040 040    717  	aci	"lf  "
    001240  aa   013000 000000     718  	vfd	9/11
    001241  aa  166 164 040 040    719  	aci	"vt  "
    001242  aa   014000 000000     720  	vfd	9/12
    001243  aa  146 146 040 040    721  	aci	"ff  "
    001244  aa   015000 000000     722  	vfd	9/13
    001245  aa  143 162 040 040    723  	aci	"cr  "
    001246  aa   016000 000000     724  	vfd	9/14
    001247  aa  163 157 040 040    725  	aci	"so  "
    001250  aa   017000 000000     726  	vfd	9/15
    001251  aa  163 151 040 040    727  	aci	"si  "
    001252  aa   020000 000000     728  	vfd	9/16
    001253  aa  144 154 145 040    729  	aci	"dle "
    001254  aa   021000 000000     730  	vfd	9/17
    001255  aa  144 143 061 040    731  	aci	"dc1 "
    001256  aa   022000 000000     732  	vfd	9/18
    001257  aa  144 143 062 040    733  	aci	"dc2 "
    001260  aa   023000 000000     734  	vfd	9/19
    001261  aa  144 143 063 040    735  	aci	"dc3 "
    001262  aa   024000 000000     736  	vfd	9/20
    001263  aa  144 143 064 040    737  	aci	"dc4 "
    001264  aa   025000 000000     738  	vfd	9/21
    001265  aa  156 141 153 040    739  	aci	"nak "
    001266  aa   026000 000000     740  	vfd	9/22
    001267  aa  163 171 156 040    741  	aci	"syn "
    001270  aa   027000 000000     742  	vfd	9/23
    001271  aa  145 164 142 040    743  	aci	"etb "
    001272  aa   030000 000000     744  	vfd	9/24
    001273  aa  143 141 156 040    745  	aci	"can "
    001274  aa   031000 000000     746  	vfd	9/25
    001275  aa  145 155 040 040    747  	aci	"em  "
    001276  aa   032000 000000     748  	vfd	9/26
    001277  aa  163 165 142 040    749  	aci	"sub "
    001300  aa   033000 000000     750  	vfd	9/27
    001301  aa  145 163 143 040    751  	aci	"esc "
    001302  aa   034000 000000     752  	vfd	9/28
    001303  aa  146 163 040 040    753  	aci	"fs  "
    001304  aa   035000 000000     754  	vfd	9/29
    001305  aa  147 163 040 040    755  	aci	"gs  "
    001306  aa   036000 000000     756  	vfd	9/30
    001307  aa  162 163 040 040    757  	aci	"rs  "
    001310  aa   037000 000000     758  	vfd	9/31
    001311  aa  165 163 040 040    759  	aci	"us  "
    001312  aa   040000 000000     760  	vfd	9/32
    001313  aa  163 160 040 040    761  	aci	"sp  "
    001314  aa   137000 000000     762  	vfd	9/95
    001315  aa  142 153 162 040    763  	aci	"bkr "
    001316  aa   137000 000000     764  	vfd	9/95
    001317  aa  165 156 144 040    765  	aci	"und "
    001320  aa   140000 000000     766  	vfd	9/96
    001321  aa  147 162 141 040    767  	aci	"gra "
    001322  aa   173000 000000     768  	vfd	9/123
    001323  aa  154 142 162 040    769  	aci	"lbr "
    001324  aa   174000 000000     770  	vfd	9/124
    001325  aa  166 154 156 040    771  	aci	"vln "
    001326  aa   175000 000000     772  	vfd	9/125
    001327  aa  162 142 162 040    773  	aci	"rbr "
    001330  aa   176000 000000     774  	vfd	9/126
    001331  aa  164 151 154 040    775  	aci	"til "
    001332  aa   042000 000000     776  	vfd	9/34
    001333  aa  161 165 157 040    777  	aci	"quo "
    001334  aa   042000 000000     778  	vfd	9/34
    001335  aa  161 164 040 040    779  	aci	"qt  "
    001336  aa   047000 000000     780  	vfd	9/39
    001337  aa  141 160 157 040    781  	aci	"apo "
                                   782  "
                        001340     783  	segdef	ascii_table_length
    001340                         784  ascii_table_length:
    001340  aa   000000 000053     785  	vfd	36/(*-ascii_table)/2
                                   786  "
                                   787  "	Table of valid relational operators
                                   788  "
                        001341     789  	segdef	relational_table
    001341                         790  relational_table:
    001341  aa  075 040 040 040    791  	aci	"=   "
    001342  aa  074 040 040 040    792  	aci	"<   "
    001343  aa  074 075 040 040    793  	aci	"<=  "
    001344  aa  075 074 040 040    794  	aci	"=<  "
    001345  aa  074 076 040 040    795  	aci	"<>  "
    001346  aa  076 074 040 040    796  	aci	"><  "
    001347  aa  076 075 040 040    797  	aci	">=  "
    001350  aa  075 076 040 040    798  	aci	"=>  "
    001351  aa  076 040 040 040    799  	aci	">   "
                                   800  "
                        001352     801  	segdef	relational_table_length
    001352                         802  relational_table_length:
    001352  aa   000000 000011     803  	vfd	36/*-relational_table
                                   804  "
                        001353     805  	segdef	normal_relational
    001353                         806  normal_relational:
    001353  aa   000000 6000 00    807  	tze	0		=
    001354  aa   000000 6040 00    808  	tmi	0		<
    001355  aa   000000 6044 00    809  	tmoz	0		<=
    001356  aa   000000 6044 00    810  	tmoz	0		=<
    001357  aa   000000 6010 00    811  	tnz	0		<>
    001360  aa   000000 6010 00    812  	tnz	0		><
    001361  aa   000000 6050 00    813  	tpl	0		>=
    001362  aa   000000 6050 00    814  	tpl	0		=>
    001363  aa   000000 6054 00    815  	tpnz	0		>
                                   816  "
                        001364     817  	segdef	inverse_relational
    001364                         818  inverse_relational:
    001364  aa   000000 6000 00    819  	tze	0		=
    001365  aa   000000 6054 00    820  	tpnz	0		<
    001366  aa   000000 6050 00    821  	tpl	0		<=
    001367  aa   000000 6050 00    822  	tpl	0		>=
    001370  aa   000000 6010 00    823  	tnz	0		<>
    001371  aa   000000 6010 00    824  	tnz	0		><
    001372  aa   000000 6044 00    825  	tmoz	0		>=
    001373  aa   000000 6044 00    826  	tmoz	0		=>
    001374  aa   000000 6040 00    827  	tmi	0		>
                                   828  "
                                   829  "	Addressing prototypes
                                   830  "
                        001375     831  	segdef	array_prototype
    001375                         832  array_prototype:
    001375  aa  2 00000 0001 00    833  	arg	bp|0
                                   834  "
                        001376     835  	segdef	constant_prototype
    001376                         836  constant_prototype:
    001376  aa  4 00000 0001 00    837  	arg	lp|0
                                   838  "
                        001377     839  	segdef	scalar_prototype
    001377                         840  scalar_prototype:
    001377  aa  6 00000 0001 00    841  	arg	sp|0		numeric
    001400  aa  5 00000 0001 00    842  	arg	pr5|0		string
                                   843  "
                        001401     844  	segdef	param_prototype
    001401                         845  param_prototype:
    001401  aa  6 00000 0001 20    846  	arg	sp|0,*
                                   847  "
                        001402     848  	segdef	function_dummy
    001402                         849  function_dummy:
    001402  aa   000000 7070 00    850  	tsx7	0
                                   851  "
                        001403     852  	segdef	instruction_sequences
    001403                         853  instruction_sequences:
    001403  aa   000000 4750 00    854  add:	fad	0
                                   855  "
    001404  aa  0 00017 7071 00    856  change:	tsx7	ap|change_from_string
    001405  aa  0 00020 7071 00    857  	tsx7	ap|change_to_string
                                   858  "
    001406                         859  check_eof:
    001406  aa  0 00067 7071 00    860  	tsx7	ap|check_eof_op
                                   861  "
    001407  aa   000000 5150 00    862  compare:	fcmp	0
                                   863  "
    001410                         864  data_read:
    001410  aa  0 00077 7071 00    865  	tsx7	ap|numeric_data_read
    001411  aa  0 00224 7071 00    866  	tsx7	ap|string_data_read
                                   867  "
    001412  aa   000000 5650 00    868  divide:	fdv	0
                                   869  "
    001413                         870  divide_inv:
    001413  aa   000000 5250 00    871  	fdi	0
                                   872  "
    001414                         873  end_input:
    001414  aa  0 00073 7071 00    874  	tsx7	ap|end_input_op
                                   875  "
    001415                         876  end_print:
    001415  aa  0 00115 7071 00    877  	tsx7	0|end_print_op
                                   878  "
    001416                         879  enter_main:
    001416  aa  2 00000 2721 20    880  	tsp2	2|0,*
                                   881  "
    001417                         882  enter_proc:
    001417  aa  2 00002 2721 20    883  	tsp2	2|2,*
                                   884  "
    001420  aa  0 00042 7071 00    885  error:	tsx7	ap|error_in_statement
    001421  aa  0 00043 7071 00    886  	tsx7	ap|missing_line
    001422  aa  0 00044 7071 00    887  	tsx7	ap|unclosed_for
    001423  aa  0 00046 7071 00    888  	tsx7	ap|undefined_function
                                   889  "
    001424  aa  0 00114 7071 00    890  file:	tsx7	ap|file_fun
                                   891  "
    001425  aa   000000 5130 00    892  fneg:	fneg	0
                                   893  "
    001426  aa   000000 4300 00    894  fszn:	fszn	0
                                   895  "
    001427                         896  function_arg:
    001427  aa   000000 3520 00    897  	epp2	0
    001430  aa   000000 5420 00    898  	sprp2	0
    001431  aa   000000 5460 00    899  	sprp6	0
    001432  aa   000000 2370 00    900  	ldaq	0
    001433  aa   000000 7570 00    901  	staq	0
                                   902  "
    001434                         903  function_call:
    001434  aa   000000 3534 00    904  	epp3	0
    001435  aa  0 00221 7071 00    905  	tsx7	0|fun_call_op
    001436  aa  0 00222 7071 00    906  	tsx7	0|global_fun_call_op
                                   907  "
    001437                         908  function_return:
    001437  aa   000000 3534 00    909  	epp3	0
    001440  aa  0 00223 7071 00    910  	tsx7	0|fun_return_op
                                   911  "
    001441                         912  get_fcb_pt:
    001441  aa   000000 7620 00    913  	lprp2	0
                                   914  "
    001442  aa  0 00026 7071 00    915  gosub:	tsx7	ap|gosub_op
                                   916  "
    001443                         917  inner_product:
    001443  aa  0 00177 7071 00    918  	tsx7	0|dot_product
                                   919  "
    001444  aa  0 00070 7071 00    920  input:	tsx7	ap|numeric_input_op
    001445  aa  0 00071 7071 00    921  	tsx7	ap|string_input_op
                                   922  "
    001446  aa   000000 000000     923  linput:	zero
    001447  aa  0 00072 7071 00    924  	tsx7	0|linput_op
                                   925  "
    001450  aa   000000 4310 00    926  load:	fld	0		numeric
    001451  aa   000000 3514 00    927  	epp1	0		string
    001452  aa   000000 3520 00    928  	epp2	0		addressing
    001453  aa   000000 3534 00    929  	epp3	0		string 2nd arg
    001454  aa   000000 2360 07    930  	ldq	0,dl		used for variable arg functions
                                   931  "
    001455  aa  0 00053 7071 00    932  margin:	tsx7	ap|margin_op
                                   933  "
    001456                         934  mat_data_read:
    001456  aa  0 00167 7071 00    935  	tsx7	0|mat_numeric_data_read
    001457  aa  0 00170 7071 00    936  	tsx7	0|mat_string_data_read
                                   937  "
    001460                         938  mat_input:
    001460  aa  0 00156 7071 00    939  	tsx7	0|mat_numeric_input_op
    001461  aa  0 00157 7071 00    940  	tsx7	0|mat_string_input_op
                                   941  "
    001462                         942  mat_linput:
    001462  aa   000000 000000     943  	zero
    001463  aa  0 00166 7071 00    944  	tsx7	0|mat_linput_op
                                   945  "
    001464                         946  mat_print:
    001464  aa  0 00160 7071 00    947  	tsx7	0|mat_numeric_print_op
    001465  aa  0 00161 7071 00    948  	tsx7	0|mat_string_print_op
                                   949  "
    001466                         950  mat_print_using:
    001466  aa  0 00171 7071 00    951  	tsx7	0|mat_print_using_numeric
    001467  aa  0 00172 7071 00    952  	tsx7	0|mat_print_using_string
                                   953  "
    001470                         954  mat_read:
    001470  aa  0 00162 7071 00    955  	tsx7	0|mat_numeric_read_op
    001471  aa  0 00163 7071 00    956  	tsx7	0|mat_string_read_op
                                   957  "
    001472                         958  mat_write:
    001472  aa  0 00164 7071 00    959  	tsx7	0|mat_numeric_write_op
    001473  aa  0 00165 7071 00    960  	tsx7	0|mat_string_write_op
                                   961  "
    001474                         962  matrix_add_sub:
    001474  aa  0 00174 7071 00    963  	tsx7	0|mat_add
    001475  aa  0 00175 7071 00    964  	tsx7	0|mat_sub
                                   965  "
    001476                         966  matrix_assign_numeric:
    001476  aa  0 00173 7071 00    967  	tsx7	0|mat_assign_numeric
                                   968  "
    001477                         969  matrix_assign_string:
    001477  aa  0 00200 7071 00    970  	tsx7	0|mat_assign_string
                                   971  "
    001500                         972  matrix_mult:
    001500  aa  0 00201 7071 00    973  	tsx7	0|mat_mult_vm
    001501  aa  0 00202 7071 00    974  	tsx7	0|mat_mult_mv
    001502  aa  0 00203 7071 00    975  	tsx7	0|mat_mult_mm
                                   976  "
    001503                         977  matrix_scalar_mult:
    001503  aa  0 00176 7071 00    978  	tsx7	0|mat_scalar_mult
                                   979  "
    001504  aa   000000 4610 00    980  multiply:	fmp	0
                                   981  "
    001505  aa  0 00025 7071 00    982  on:	tsx7	ap|on_op
                                   983  "
    001506  aa  0 00027 7071 00    984  on_gosub:	tsx7	ap|on_gosub_op
                                   985  "
    001507  aa  0 00141 7071 00    986  power:	tsx7	ap|pwr_fun
                                   987  "
    001510                         988  power_inverse:
    001510  aa  0 00142 7071 00    989  	tsx7	0|pwri_fun
                                   990  "
    001511  aa  0 00061 7071 00    991  print:	tsx7	ap|numeric_print_op
    001512  aa  0 00062 7071 00    992  	tsx7	0|string_print_op
                                   993  "
    001513                         994  print_new_line:
    001513  aa  0 00063 7071 00    995  	tsx7	0|print_new_line_op
                                   996  "
    001514                         997  print_using:
    001514  aa  0 00106 7071 00    998  	tsx7	0|print_using_numeric_op
    001515  aa  0 00107 7071 00    999  	tsx7	0|print_using_string_op
                                  1000  "
    001516                        1001  print_using_start:
    001516  aa  0 00104 7071 00   1002  	tsx7	0|print_using_start_op
                                  1003  "
    001517                        1004  print_using_end:
    001517  aa  0 00105 7071 00   1005  	tsx7	0|print_using_end_op
                                  1006  "
    001520                        1007  randomize:
    001520  aa  0 00123 7071 00   1008  	tsx7	0|randomize_fun
                                  1009  "
    001521  aa  0 00057 7071 00   1010  read:	tsx7	ap|numeric_read_op
    001522  aa  0 00060 7071 00   1011  	tsx7	0|string_read_op
                                  1012  "
    001523                        1013  redimension:
    001523  aa  0 00153 7071 00   1014  	tsx7	0|list_redim_op
    001524  aa  0 00154 7071 00   1015  	tsx7	0|table_redim_op
    001525  aa  0 00155 7071 00   1016  	tsx7	0|inv_table_redim_op
                                  1017  "
    001526                        1018  reset_ascii:
    001526  aa  0 00116 7071 00   1019  	tsx7	0|reset_ascii_op
                                  1020  "
    001527                        1021  reset_data:
    001527  aa  0 00054 7071 00   1022  	tsx7	0|reset_op
                                  1023  "
    001530                        1024  reset_random:
    001530  aa  0 00117 7071 00   1025  	tsx7	0|reset_random_op
                                  1026  "
    001531  aa  0 00032 7071 00   1027  return:	tsx7	ap|return_op
                                  1028  "
    001532                        1029  save_fcb_pt:
    001532  aa   000000 5420 00   1030  	sprpbp	0
                                  1031  "
    001533  aa  0 00052 7071 00   1032  scratch:	tsx7	ap|scratch_op
                                  1033  "
    001534                        1034  setdigits:
    001534  aa  0 00204 7071 00   1035  	tsx7	0|setdigits_op
                                  1036  "
    001535  aa  0 00024 7071 00   1037  stop:	tsx7	ap|stop_op
                                  1038  "
    001536  aa   000000 4550 00   1039  store:	fst	0		numeric
    001537  aa   000000 2514 00   1040  	spriab	0		string
    001540  aa   000000 2520 00   1041  	spribp	0		addressing
                                  1042  "
    001541                        1043  string_assign:
    001541  aa   000000 3534 00   1044  	eppbb	0
    001542  aa  0 00001 7071 00   1045  	tsx7	0|string_assign_op
                                  1046  "
    001543                        1047  string_compare:
    001543  aa   000000 3534 00   1048  	eppbb	0
    001544  aa  0 00003 7071 00   1049  	tsx7	0|string_compare_op
                                  1050  "
    001545                        1051  string_concatenate:
    001545  aa   000000 3534 00   1052  	eppbb	0
    001546  aa  0 00002 7071 00   1053  	tsx7	0|string_concatenate_op
                                  1054  "
    001547  aa  0 00047 7071 00   1055  subend:	tsx7	ap|subend_op
                                  1056  "
    001550                        1057  subprogram_call:
    001550  aa  0 00030 7071 00   1058  	tsx7	0|sub_call_op
                                  1059  "
    001551                        1060  subscript:
    001551  aa  0 00037 7071 00   1061  	tsx7	0|list_sub_op
    001552  aa  0 00040 7071 00   1062  	tsx7	0|table_sub_op
    001553  aa  0 00041 7071 00   1063  	tsx7	0|inv_table_sub_op
                                  1064  "
    001554  aa   000000 5750 00   1065  subtract:	fsb	0
                                  1066  "
    001555                        1067  tab_for_comma:
    001555  aa  0 00064 7071 00   1068  	tsx7	0|tab_for_comma_op
                                  1069  "
    001556  aa   000000 6040 00   1070  tmi:	tmi	0
                                  1071  "
    001557  aa   000000 6010 00   1072  tnz:	tnz	0
                                  1073  "
    001560  aa   000000 6050 00   1074  tpl:	tpl	0
                                  1075  "
    001561  aa   000000 6054 00   1076  tpnz:	tpnz	0
                                  1077  "
    001562  aa   000000 7100 00   1078  tra:	tra	0
                                  1079  "
    001563  aa   000000 6000 00   1080  tze:	tze	0
                                  1081  "
    001564  aa  0 00103 7071 00   1082  use_fcb:	tsx7	ap|use_fcb_op
                                  1083  "
    001565  aa  0 00051 7071 00   1084  use_file:	tsx7	ap|setup_fcb_op
                                  1085  "
    001566  aa  0 00050 7071 00   1086  use_tty:	tsx7	ap|use_tty_op
                                  1087  "
    001567  aa  0 00055 7071 00   1088  write:	tsx7	ap|numeric_write_op
    001570  aa  0 00056 7071 00   1089  	tsx7	0|string_write_op
                                  1090  "
    001571  aa   000000 4770 00   1091  d_add:	dfad	0
                                  1092  "
    001572  aa  0 00017 7071 00   1093  d_change:	tsx7	ap|change_from_string
    001573  aa  0 00020 7071 00   1094  	tsx7	ap|change_to_string
                                  1095  "
    001574                        1096  d_check_eof:
    001574  aa  0 00067 7071 00   1097  	tsx7	ap|check_eof_op
                                  1098  "
    001575                        1099  d_compare:
    001575  aa   000000 5170 00   1100  	dfcmp	0
                                  1101  "
    001576                        1102  d_data_read:
    001576  aa  0 00077 7071 00   1103  	tsx7	ap|numeric_data_read
    001577  aa  0 00224 7071 00   1104  	tsx7	ap|string_data_read
                                  1105  "
    001600  aa   000000 5670 00   1106  d_divide:	dfdv	0
                                  1107  "
    001601                        1108  d_divide_inv:
    001601  aa   000000 5270 00   1109  	dfdi	0
                                  1110  "
    001602                        1111  d_end_input:
    001602  aa  0 00073 7071 00   1112  	tsx7	ap|end_input_op
                                  1113  "
    001603                        1114  d_end_print:
    001603  aa  0 00115 7071 00   1115  	tsx7	0|end_print_op
                                  1116  "
    001604                        1117  d_enter_main:
    001604  aa  2 00000 2721 20   1118  	tsp2	2|0,*
                                  1119  "
    001605                        1120  d_enter_proc:
    001605  aa  2 00002 2721 20   1121  	tsp2	2|2,*
                                  1122  "
    001606  aa  0 00042 7071 00   1123  d_error:	tsx7	ap|error_in_statement
    001607  aa  0 00043 7071 00   1124  	tsx7	ap|missing_line
    001610  aa  0 00044 7071 00   1125  	tsx7	ap|unclosed_for
    001611  aa  0 00046 7071 00   1126  	tsx7	ap|undefined_function
                                  1127  "
    001612  aa  0 00114 7071 00   1128  d_file:	tsx7	ap|file_fun
                                  1129  "
    001613  aa   000000 5130 00   1130  d_fneg:	fneg	0
                                  1131  "
    001614  aa   000000 4300 00   1132  d_fszn:	fszn	0
                                  1133  "
    001615                        1134  d_function_arg:
    001615  aa   000000 3520 00   1135  	epp2	0
    001616  aa   000000 5420 00   1136  	sprp2	0
    001617  aa   000000 5460 00   1137  	sprp6	0
    001620  aa   000000 2370 00   1138  	ldaq	0
    001621  aa   000000 7570 00   1139  	staq	0
                                  1140  "
    001622                        1141  d_function_call:
    001622  aa   000000 3534 00   1142  	epp3	0
    001623  aa  0 00221 7071 00   1143  	tsx7	0|fun_call_op
    001624  aa  0 00222 7071 00   1144  	tsx7	0|global_fun_call_op
                                  1145  "
    001625                        1146  d_function_return:
    001625  aa   000000 3534 00   1147  	epp3	0
    001626  aa  0 00223 7071 00   1148  	tsx7	0|fun_return_op
                                  1149  "
    001627                        1150  d_get_fcb_pt:
    001627  aa   000000 7620 00   1151  	lprp2	0
                                  1152  "
    001630  aa  0 00026 7071 00   1153  d_gosub:	tsx7	ap|gosub_op
                                  1154  "
    001631                        1155  d_inner_product:
    001631  aa  0 00177 7071 00   1156  	tsx7	0|dot_product
                                  1157  "
    001632  aa  0 00070 7071 00   1158  d_input:	tsx7	ap|numeric_input_op
    001633  aa  0 00071 7071 00   1159  	tsx7	ap|string_input_op
                                  1160  "
    001634  aa   000000 000000    1161  d_linput:	zero
    001635  aa  0 00072 7071 00   1162  	tsx7	0|linput_op
                                  1163  "
    001636  aa   000000 4330 00   1164  d_load:	dfld	0		numeric
    001637  aa   000000 3514 00   1165  	epp1	0
    001640  aa   000000 3520 00   1166  	epp2	0
    001641  aa   000000 3534 00   1167  	epp3	0
    001642  aa   000000 2360 07   1168  	ldq	0,dl
                                  1169  "
    001643  aa  0 00053 7071 00   1170  d_margin:	tsx7	ap|margin_op
                                  1171  "
    001644                        1172  d_mat_data_read:
    001644  aa  0 00167 7071 00   1173  	tsx7	0|mat_numeric_data_read
    001645  aa  0 00170 7071 00   1174  	tsx7	0|mat_string_data_read
                                  1175  "
    001646                        1176  d_mat_input:
    001646  aa  0 00156 7071 00   1177  	tsx7	0|mat_numeric_input_op
    001647  aa  0 00157 7071 00   1178  	tsx7	0|mat_string_input_op
                                  1179  "
    001650                        1180  d_mat_linput:
    001650  aa   000000 000000    1181  	zero
    001651  aa  0 00166 7071 00   1182  	tsx7	0|mat_linput_op
                                  1183  "
    001652                        1184  d_mat_print:
    001652  aa  0 00160 7071 00   1185  	tsx7	0|mat_numeric_print_op
    001653  aa  0 00161 7071 00   1186  	tsx7	0|mat_string_print_op
                                  1187  "
    001654                        1188  d_mat_print_using:
    001654  aa  0 00171 7071 00   1189  	tsx7	0|mat_print_using_numeric
    001655  aa  0 00172 7071 00   1190  	tsx7	0|mat_print_using_string
                                  1191  "
    001656                        1192  d_mat_read:
    001656  aa  0 00162 7071 00   1193  	tsx7	0|mat_numeric_read_op
    001657  aa  0 00163 7071 00   1194  	tsx7	0|mat_string_read_op
                                  1195  "
    001660                        1196  d_mat_write:
    001660  aa  0 00164 7071 00   1197  	tsx7	0|mat_numeric_write_op
    001661  aa  0 00165 7071 00   1198  	tsx7	0|mat_string_write_op
                                  1199  "
    001662                        1200  d_matrix_add_sub:
    001662  aa  0 00174 7071 00   1201  	tsx7	0|mat_add
    001663  aa  0 00175 7071 00   1202  	tsx7	0|mat_sub
                                  1203  "
    001664                        1204  d_matrix_assign_numeric:
    001664  aa  0 00173 7071 00   1205  	tsx7	0|mat_assign_numeric
                                  1206  "
    001665                        1207  d_matrix_assign_string:
    001665  aa  0 00200 7071 00   1208  	tsx7	0|mat_assign_string
                                  1209  "
    001666                        1210  d_matrix_mult:
    001666  aa  0 00201 7071 00   1211  	tsx7	0|mat_mult_vm
    001667  aa  0 00202 7071 00   1212  	tsx7	0|mat_mult_mv
    001670  aa  0 00203 7071 00   1213  	tsx7	0|mat_mult_mm
                                  1214  "
    001671                        1215  d_matrix_scalar_mult:
    001671  aa  0 00176 7071 00   1216  	tsx7	0|mat_scalar_mult
                                  1217  "
    001672                        1218  d_multiply:
    001672  aa   000000 4630 00   1219  	dfmp	0
                                  1220  "
    001673  aa  0 00025 7071 00   1221  d_on:	tsx7	ap|on_op
                                  1222  "
    001674                        1223  d_on_gosub:
    001674  aa  0 00027 7071 00   1224  	tsx7	ap|on_gosub_op
                                  1225  "
    001675  aa  0 00141 7071 00   1226  d_power:	tsx7	ap|pwr_fun
                                  1227  "
    001676                        1228  d_power_inverse:
    001676  aa  0 00142 7071 00   1229  	tsx7	0|pwri_fun
                                  1230  "
    001677  aa  0 00061 7071 00   1231  d_print:	tsx7	ap|numeric_print_op
    001700  aa  0 00062 7071 00   1232  	tsx7	0|string_print_op
                                  1233  "
    001701                        1234  d_print_new_line:
    001701  aa  0 00063 7071 00   1235  	tsx7	0|print_new_line_op
                                  1236  "
    001702                        1237  d_print_using:
    001702  aa  0 00106 7071 00   1238  	tsx7	0|print_using_numeric_op
    001703  aa  0 00107 7071 00   1239  	tsx7	0|print_using_string_op
                                  1240  "
    001704                        1241  d_print_using_start:
    001704  aa  0 00104 7071 00   1242  	tsx7	0|print_using_start_op
                                  1243  "
    001705                        1244  d_print_using_end:
    001705  aa  0 00105 7071 00   1245  	tsx7	0|print_using_end_op
                                  1246  "
    001706                        1247  d_randomize:
    001706  aa  0 00123 7071 00   1248  	tsx7	0|randomize_fun
                                  1249  "
    001707  aa  0 00057 7071 00   1250  d_read:	tsx7	ap|numeric_read_op
    001710  aa  0 00060 7071 00   1251  	tsx7	0|string_read_op
                                  1252  "
    001711                        1253  d_redimension:
    001711  aa  0 00153 7071 00   1254  	tsx7	0|list_redim_op
    001712  aa  0 00154 7071 00   1255  	tsx7	0|table_redim_op
    001713  aa  0 00155 7071 00   1256  	tsx7	0|inv_table_redim_op
                                  1257  "
    001714                        1258  d_reset_ascii:
    001714  aa  0 00116 7071 00   1259  	tsx7	0|reset_ascii_op
                                  1260  "
    001715                        1261  d_reset_data:
    001715  aa  0 00054 7071 00   1262  	tsx7	0|reset_op
                                  1263  "
    001716                        1264  d_reset_random:
    001716  aa  0 00117 7071 00   1265  	tsx7	0|reset_random_op
                                  1266  "
    001717  aa  0 00032 7071 00   1267  d_return:	tsx7	ap|return_op
                                  1268  "
    001720                        1269  d_save_fcb_pt:
    001720  aa   000000 5420 00   1270  	sprpbp	0
                                  1271  "
    001721                        1272  d_scratch:
    001721  aa  0 00052 7071 00   1273  	tsx7	ap|scratch_op
                                  1274  "
    001722                        1275  d_setdigits:
    001722  aa  0 00204 7071 00   1276  	tsx7	0|setdigits_op
                                  1277  "
    001723  aa  0 00024 7071 00   1278  d_stop:	tsx7	ap|stop_op
                                  1279  "
    001724  aa   000000 4570 00   1280  d_store:	dfst	0		numeric
    001725  aa   000000 2514 00   1281  	spriab	0
    001726  aa   000000 2520 00   1282  	spribp	0
                                  1283  "
    001727                        1284  d_string_assign:
    001727  aa   000000 3534 00   1285  	eppbb	0
    001730  aa  0 00001 7071 00   1286  	tsx7	0|string_assign_op
                                  1287  "
    001731                        1288  d_string_compare:
    001731  aa   000000 3534 00   1289  	eppbb	0
    001732  aa  0 00003 7071 00   1290  	tsx7	0|string_compare_op
                                  1291  "
    001733                        1292  d_string_concatenate:
    001733  aa   000000 3534 00   1293  	eppbb	0
    001734  aa  0 00002 7071 00   1294  	tsx7	0|string_concatenate_op
                                  1295  "
    001735  aa  0 00047 7071 00   1296  d_subend:	tsx7	ap|subend_op
                                  1297  "
    001736                        1298  d_subprogram_call:
    001736  aa  0 00030 7071 00   1299  	tsx7	0|sub_call_op
                                  1300  "
    001737                        1301  d_subscript:
    001737  aa  0 00037 7071 00   1302  	tsx7	0|list_sub_op
    001740  aa  0 00040 7071 00   1303  	tsx7	0|table_sub_op
    001741  aa  0 00041 7071 00   1304  	tsx7	0|inv_table_sub_op
                                  1305  "
    001742                        1306  d_subtract:
    001742  aa   000000 5770 00   1307  	dfsb	0
                                  1308  "
    001743                        1309  d_tab_for_comma:
    001743  aa  0 00064 7071 00   1310  	tsx7	0|tab_for_comma_op
                                  1311  "
    001744  aa   000000 6040 00   1312  d_tmi:	tmi	0
                                  1313  "
    001745  aa   000000 6010 00   1314  d_tnz:	tnz	0
                                  1315  "
    001746  aa   000000 6050 00   1316  d_tpl:	tpl	0
                                  1317  "
    001747  aa   000000 6054 00   1318  d_tpnz:	tpnz	0
                                  1319  "
    001750  aa   000000 7100 00   1320  d_tra:	tra	0
                                  1321  "
    001751  aa   000000 6000 00   1322  d_tze:	tze	0
                                  1323  "
    001752                        1324  d_use_fcb:
    001752  aa  0 00103 7071 00   1325  	tsx7	ap|use_fcb_op
                                  1326  "
    001753                        1327  d_use_file:
    001753  aa  0 00051 7071 00   1328  	tsx7	ap|setup_fcb_op
                                  1329  "
    001754                        1330  d_use_tty:
    001754  aa  0 00050 7071 00   1331  	tsx7	ap|use_tty_op
                                  1332  "
    001755  aa  0 00055 7071 00   1333  d_write:	tsx7	ap|numeric_write_op
    001756  aa  0 00056 7071 00   1334  	tsx7	0|string_write_op
                                  1335  "
                                  1336  	use	internal_static
                                  1337  	join	/static/internal_static
                        000000    1338  	segdef	precision_length
    000000                        1339  precision_length:
    000000  aa   000000 000001    1340  	dec	1
                                  1341  "
                                  1342  	end

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    001760  5a   000003 000000 
    001761  5a   000241 600000 
    001762  aa   000000 000000 
    001763  55   000011 000002 
    001764  5a   000002 400003 
    001765  55   000006 000011 
    001766  aa  012 142 141 163
    001767  aa  151 143 137 144
    001770  aa  141 164 141 000
    001771  55   000021 000003 
    001772  4a   000000 400004 
    001773  55   000014 000003 
    001774  aa  020 160 162 145         precision_length
    001775  aa  143 151 163 151
    001776  aa  157 156 137 154
    001777  aa  145 156 147 164
    002000  aa  150 000 000 000
    002001  55   000032 000011 
    002002  0a   001403 400000 
    002003  55   000024 000003 
    002004  aa  025 151 156 163         instruction_sequences
    002005  aa  164 162 165 143
    002006  aa  164 151 157 156
    002007  aa  137 163 145 161
    002010  aa  165 145 156 143
    002011  aa  145 163 000 000
    002012  55   000041 000021 
    002013  0a   001402 400000 
    002014  55   000035 000003 
    002015  aa  016 146 165 156         function_dummy
    002016  aa  143 164 151 157
    002017  aa  156 137 144 165
    002020  aa  155 155 171 000
    002021  55   000050 000032 
    002022  0a   001401 400000 
    002023  55   000044 000003 
    002024  aa  017 160 141 162         param_prototype
    002025  aa  141 155 137 160
    002026  aa  162 157 164 157
    002027  aa  164 171 160 145
    002030  55   000060 000041 
    002031  0a   001377 400000 
    002032  55   000053 000003 
    002033  aa  020 163 143 141         scalar_prototype
    002034  aa  154 141 162 137
    002035  aa  160 162 157 164
    002036  aa  157 164 171 160
    002037  aa  145 000 000 000
    002040  55   000070 000050 
    002041  0a   001376 400000 
    002042  55   000063 000003 
    002043  aa  022 143 157 156         constant_prototype
    002044  aa  163 164 141 156
    002045  aa  164 137 160 162
    002046  aa  157 164 157 164
    002047  aa  171 160 145 000
    002050  55   000077 000060 
    002051  0a   001375 400000 
    002052  55   000073 000003 
    002053  aa  017 141 162 162         array_prototype
    002054  aa  141 171 137 160
    002055  aa  162 157 164 157
    002056  aa  164 171 160 145
    002057  55   000107 000070 
    002060  0a   001364 400000 
    002061  55   000102 000003 
    002062  aa  022 151 156 166         inverse_relational
    002063  aa  145 162 163 145
    002064  aa  137 162 145 154
    002065  aa  141 164 151 157
    002066  aa  156 141 154 000
    002067  55   000117 000077 
    002070  0a   001353 400000 
    002071  55   000112 000003 
    002072  aa  021 156 157 162         normal_relational
    002073  aa  155 141 154 137
    002074  aa  162 145 154 141
    002075  aa  164 151 157 156
    002076  aa  141 154 000 000
    002077  55   000130 000107 
    002100  0a   001352 400000 
    002101  55   000122 000003 
    002102  aa  027 162 145 154         relational_table_length
    002103  aa  141 164 151 157
    002104  aa  156 141 154 137
    002105  aa  164 141 142 154
    002106  aa  145 137 154 145
    002107  aa  156 147 164 150
    002110  55   000140 000117 
    002111  0a   001341 400000 
    002112  55   000133 000003 
    002113  aa  020 162 145 154         relational_table
    002114  aa  141 164 151 157
    002115  aa  156 141 154 137
    002116  aa  164 141 142 154
    002117  aa  145 000 000 000
    002120  55   000150 000130 
    002121  0a   001340 400000 
    002122  55   000143 000003 
    002123  aa  022 141 163 143         ascii_table_length
    002124  aa  151 151 137 164
    002125  aa  141 142 154 145
    002126  aa  137 154 145 156
    002127  aa  147 164 150 000
    002130  55   000156 000140 
    002131  0a   001212 400000 
    002132  55   000153 000003 
    002133  aa  013 141 163 143         ascii_table
    002134  aa  151 151 137 164
    002135  aa  141 142 154 145
    002136  55   000166 000150 
    002137  0a   000676 400000 
    002140  55   000161 000003 
    002141  aa  022 146 165 156         function_templates
    002142  aa  143 164 151 157
    002143  aa  156 137 164 145
    002144  aa  155 160 154 141
    002145  aa  164 145 163 000
    002146  55   000175 000156 
    002147  0a   000612 400000 
    002150  55   000171 000003 
    002151  aa  017 163 164 162         string_spelling
    002152  aa  151 156 147 137
    002153  aa  163 160 145 154
    002154  aa  154 151 156 147
    002155  55   000205 000166 
    002156  0a   000526 400000 
    002157  55   000200 000003 
    002160  aa  020 156 165 155         numeric_spelling
    002161  aa  145 162 151 143
    002162  aa  137 163 160 145
    002163  aa  154 154 151 156
    002164  aa  147 000 000 000
    002165  55   000213 000175 
    002166  0a   000300 400000 
    002167  55   000210 000003 
    002170  aa  011 146 165 156         functions
    002171  aa  143 164 151 157
    002172  aa  156 163 000 000
    002173  55   000222 000205 
    002174  0a   000064 400000 
    002175  55   000216 000003 
    002176  aa  016 163 164 141         statement_list
    002177  aa  164 145 155 145
    002200  aa  156 164 137 154
    002201  aa  151 163 164 000
    002202  55   000232 000213 
    002203  0a   000000 400000 
    002204  55   000225 000003 
    002205  aa  022 163 164 141         statement_spelling
    002206  aa  164 145 155 145
    002207  aa  156 164 137 163
    002210  aa  160 145 154 154
    002211  aa  151 156 147 000
    002212  55   000002 000222 
    002213  6a   000000 400002 
    002214  55   000235 000003 
    002215  aa  014 163 171 155         symbol_table
    002216  aa  142 157 154 137
    002217  aa  164 141 142 154
    002220  aa  145 000 000 000

DEFINITIONS HASH TABLE

    002221  aa   000000 000033 
    002222  5a   000032 000000 
    002223  5a   000070 000000 
    002224  5a   000011 000000 
    002225  5a   000213 000000 
    002226  aa   000000 000000 
    002227  5a   000175 000000 
    002230  5a   000041 000000 
    002231  5a   000205 000000 
    002232  5a   000021 000000 
    002233  5a   000140 000000 
    002234  5a   000232 000000 
    002235  aa   000000 000000 
    002236  aa   000000 000000 
    002237  aa   000000 000000 
    002240  5a   000077 000000 
    002241  5a   000107 000000 
    002242  5a   000050 000000 
    002243  5a   000117 000000 
    002244  5a   000150 000000 
    002245  5a   000166 000000 
    002246  aa   000000 000000 
    002247  aa   000000 000000 
    002250  aa   000000 000000 
    002251  5a   000156 000000 
    002252  5a   000130 000000 
    002253  5a   000222 000000 
    002254  5a   000060 000000 

NO EXTERNAL NAMES

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    002255  aa   000001 000000 
    002256  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    002257  aa   000000 000000 
LINKAGE INFORMATION
      
    000002  aa   000000 000000 
    000003  0a   001760 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  aa   000000 000000 
    000007  aa   000000 000000 
    000010  22   000010 000010 
    000011  a2   000000 000002 
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000004 
    000004  aa   000000 112143 
    000005  aa   305203 523135 
    000006  aa   000000 113042 
    000007  aa   773410 070565 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000230 
    000020  aa   000000 000121 
    000021  aa   000000 000216 
    000022  aa   000221 000121 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   040066 056066 
    000030  aa   040040 116157 
    000031  aa   166145 155142 
    000032  aa   145162 040061 
    000033  aa   071070 062040 
    000034  aa   107112 157150 
    000035  aa   156163 157156 
    000036  aa   056123 171163 
    000037  aa   115141 151156 
    000040  aa   164056 141040 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   154151 163164 
    000045  aa   040040 040040 
    000046  aa   040040 040040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040040 040040 
    000057  aa   040040 040040 
    000060  aa   040040 040040 
    000061  aa   040040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000002 
    000066  aa   000076 000035 
    000067  aa   130366 501107 
    000070  aa   000000 113042 
    000071  aa   764637 600000 
    000072  aa   000106 000051 
    000073  aa   130366 503032 
    000074  aa   000000 113042 
    000075  aa   773132 200000 
    000076  aa   076163 160145          >spec>on>basic>basic_data.alm
    000077  aa   143076 157156 
    000100  aa   076142 141163 
    000101  aa   151143 076142 
    000102  aa   141163 151143 
    000103  aa   137144 141164 
    000104  aa   141056 141154 
    000105  aa   155040 040040 
    000106  aa   076163 160145          >spec>on>basic>basic_xfer_vector.incl.alm
    000107  aa   143076 157156 
    000110  aa   076142 141163 
    000111  aa   151143 076142 
    000112  aa   141163 151143 
    000113  aa   137170 146145 
    000114  aa   162137 166145 
    000115  aa   143164 157162 
    000116  aa   056151 156143 
    000117  aa   154056 141154 
    000120  aa   155040 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

         120    abs_fun                  basic_data:   187,
                                         basic_xfer_vector:   95.
        1403    add                      basic_data:   854.
          21    argcnt_fun               basic_data:   196,
                                         basic_xfer_vector:   31.
          22    argval_fun               basic_data:   304,
                                         basic_xfer_vector:   32.
        1375    array_prototype          basic_data:   831,  832.
        1212    ascii_table              basic_data:   694,  695,  785.
        1340    ascii_table_length       basic_data:   783,  784.
         135    atn_fun                  basic_data:   190,
                                         basic_xfer_vector:  108.
        1404    change                   basic_data:   856.
          17    change_from_string       basic_data:   856, 1093,
                                         basic_xfer_vector:   29.
          20    change_to_string         basic_data:   857, 1094,
                                         basic_xfer_vector:   30.
        1406    check_eof                basic_data:   859.
          67    check_eof_op             basic_data:   860, 1097,
                                         basic_xfer_vector:   69.
           6    chr_fun                  basic_data:   307,
                                         basic_xfer_vector:   19.
         140    clg_fun                  basic_data:   193,
                                         basic_xfer_vector:  111.
           7    clk_fun                  basic_data:   310,
                                         basic_xfer_vector:   20.
        1407    compare                  basic_data:   862.
        1376    constant_prototype       basic_data:   835,  836.
         145    con_fun                  basic_data:   199,
                                         basic_xfer_vector:  116.
         131    cos_fun                  basic_data:   202,
                                         basic_xfer_vector:  104.
         133    cot_fun                  basic_data:   205,
                                         basic_xfer_vector:  106.
        1410    data_read                basic_data:   864.
          10    dat_fun                  basic_data:   313,
                                         basic_xfer_vector:   21.
         144    det_fun                  basic_data:   208,
                                         basic_xfer_vector:  115.
        1412    divide                   basic_data:   868.
        1413    divide_inv               basic_data:   870.
         177    dot_product              basic_data:   918, 1156,
                                         basic_xfer_vector:  144.
        1571    d_add                    basic_data:  1091.
        1572    d_change                 basic_data:  1093.
        1574    d_check_eof              basic_data:  1096.
        1575    d_compare                basic_data:  1099.
        1576    d_data_read              basic_data:  1102.
        1600    d_divide                 basic_data:  1106.
        1601    d_divide_inv             basic_data:  1108.
        1602    d_end_input              basic_data:  1111.
        1603    d_end_print              basic_data:  1114.
        1604    d_enter_main             basic_data:  1117.
        1605    d_enter_proc             basic_data:  1120.
        1606    d_error                  basic_data:  1123.
        1612    d_file                   basic_data:  1128.
        1613    d_fneg                   basic_data:  1130.
        1614    d_fszn                   basic_data:  1132.
        1615    d_function_arg           basic_data:  1134.
        1622    d_function_call          basic_data:  1141.
        1625    d_function_return        basic_data:  1146.
        1627    d_get_fcb_pt             basic_data:  1150.
        1630    d_gosub                  basic_data:  1153.
        1631    d_inner_product          basic_data:  1155.
        1632    d_input                  basic_data:  1158.
        1634    d_linput                 basic_data:  1161.
        1636    d_load                   basic_data:  1164.
        1643    d_margin                 basic_data:  1170.
        1662    d_matrix_add_sub         basic_data:  1200.
        1664    d_matrix_assign_numeric  basic_data:  1204.
        1665    d_matrix_assign_string   basic_data:  1207.
        1666    d_matrix_mult            basic_data:  1210.
        1671    d_matrix_scalar_mult     basic_data:  1215.
        1644    d_mat_data_read          basic_data:  1172.
        1646    d_mat_input              basic_data:  1176.
        1650    d_mat_linput             basic_data:  1180.
        1652    d_mat_print              basic_data:  1184.
        1654    d_mat_print_using        basic_data:  1188.
        1656    d_mat_read               basic_data:  1192.
        1660    d_mat_write              basic_data:  1196.
        1672    d_multiply               basic_data:  1218.
        1071    d_numeric_0              basic_data:   423,  574.
        1100    d_numeric_f              basic_data:   426,  587.
        1142    d_numeric_fs             basic_data:   431,  637.
        1100    d_numeric_n              basic_data:   424,  586.
        1131    d_numeric_nn             basic_data:   430,  624.
        1110    d_numeric_s              basic_data:   425,  599.
        1153    d_numeric_ssn            basic_data:   432,  650.
        1673    d_on                     basic_data:  1221.
        1674    d_on_gosub               basic_data:  1223.
        1675    d_power                  basic_data:  1226.
        1676    d_power_inverse          basic_data:  1228.
        1677    d_print                  basic_data:  1231.
        1701    d_print_new_line         basic_data:  1234.
        1702    d_print_using            basic_data:  1237.
        1705    d_print_using_end        basic_data:  1244.
        1704    d_print_using_start      basic_data:  1241.
        1706    d_randomize              basic_data:  1247.
        1707    d_read                   basic_data:  1250.
        1711    d_redimension            basic_data:  1253.
        1714    d_reset_ascii            basic_data:  1258.
        1715    d_reset_data             basic_data:  1261.
        1716    d_reset_random           basic_data:  1264.
        1717    d_return                 basic_data:  1267.
        1720    d_save_fcb_pt            basic_data:  1269.
        1721    d_scratch                basic_data:  1272.
        1722    d_setdigits              basic_data:  1275.
        1723    d_stop                   basic_data:  1278.
        1724    d_store                  basic_data:  1280.
        1727    d_string_assign          basic_data:  1284.
        1731    d_string_compare         basic_data:  1288.
        1733    d_string_concatenate     basic_data:  1292.
        1120    d_string_n               basic_data:   428,  611.
        1200    d_string_sn              basic_data:   438,  679.
        1165    d_string_snn             basic_data:   433,  664.
        1735    d_subend                 basic_data:  1296.
        1736    d_subprogram_call        basic_data:  1298.
        1737    d_subscript              basic_data:  1301.
        1742    d_subtract               basic_data:  1306.
        1743    d_tab_for_comma          basic_data:  1309.
        1744    d_tmi                    basic_data:  1312.
        1745    d_tnz                    basic_data:  1314.
        1746    d_tpl                    basic_data:  1316.
        1747    d_tpnz                   basic_data:  1318.
        1750    d_tra                    basic_data:  1320.
        1751    d_tze                    basic_data:  1322.
        1752    d_use_fcb                basic_data:  1324.
        1753    d_use_file               basic_data:  1327.
        1754    d_use_tty                basic_data:  1330.
        1755    d_write                  basic_data:  1333.
        1414    end_input                basic_data:   873.
          73    end_input_op             basic_data:   874, 1112,
                                         basic_xfer_vector:   73.
        1415    end_print                basic_data:   876.
         115    end_print_op             basic_data:   877, 1115,
                                         basic_xfer_vector:   91.
        1416    enter_main               basic_data:   879.
        1417    enter_proc               basic_data:   882.
        1420    error                    basic_data:   885.
          42    error_in_statement       basic_data:   885, 1123,
                                         basic_xfer_vector:   48.
         136    exp_fun                  basic_data:   211,
                                         basic_xfer_vector:  109.
        1424    file                     basic_data:   890.
         114    file_fun                 basic_data:   890, 1128,
                                         basic_xfer_vector:   90.
        1425    fneg                     basic_data:   892.
        1426    fszn                     basic_data:   894.
         300    functions                basic_data:   180,  184.
        1427    function_arg             basic_data:   896.
        1434    function_call            basic_data:   903.
        1402    function_dummy           basic_data:   848,  849.
        1437    function_return          basic_data:   908.
         676    function_templates       basic_data:   401,  405.
         221    fun_call_op              basic_data:   905, 1143,
                                         basic_xfer_vector:   42.
         223    fun_return_op            basic_data:   449,  463,  475,  487,  500,  513,  526,  540,  555,  569,  581,  595,
                                                       607,  620,  633,  646,  660,  675,  689,  910, 1148,
                                         basic_xfer_vector:   44.
        1441    get_fcb_pt               basic_data:   912.
         222    global_fun_call_op       basic_data:   906, 1144,
                                         basic_xfer_vector:   43.
        1442    gosub                    basic_data:   915.
          26    gosub_op                 basic_data:   915, 1153,
                                         basic_xfer_vector:   36.
         110    hps_fun                  basic_data:   214,
                                         basic_xfer_vector:   86.
         146    idn_fun                  basic_data:   217,
                                         basic_xfer_vector:  117.
        1443    inner_product            basic_data:   917.
        1444    input                    basic_data:   920.
        1403    instruction_sequences    basic_data:   852,  853.
           0    internal_static          basic_data:  1336, 1337.
         121    int_fun                  basic_data:   220,
                                         basic_xfer_vector:   96.
        1364    inverse_relational       basic_data:   817,  818.
         147    inv_fun                  basic_data:   223,
                                         basic_xfer_vector:  118.
         155    inv_table_redim_op       basic_data:  1016, 1256,
                                         basic_xfer_vector:  125.
          41    inv_table_sub_op         basic_data:  1063, 1304,
                                         basic_xfer_vector:   47.
         225    left_fun                 basic_data:   334,
                                         basic_xfer_vector:  151.
           4    len_fun                  basic_data:   226,
                                         basic_xfer_vector:   17.
        1446    linput                   basic_data:   923.
          72    linput_op                basic_data:   924, 1162,
                                         basic_xfer_vector:   72.
         111    lin_fun                  basic_data:   229,
                                         basic_xfer_vector:   87.
         153    list_redim_op            basic_data:  1014, 1254,
                                         basic_xfer_vector:  123.
          37    list_sub_op              basic_data:  1061, 1302,
                                         basic_xfer_vector:   45.
        1450    load                     basic_data:   926.
          75    loc_fun                  basic_data:   232,
                                         basic_xfer_vector:   75.
          74    lof_fun                  basic_data:   235,
                                         basic_xfer_vector:   74.
         137    log_fun                  basic_data:   238,
                                         basic_xfer_vector:  110.
        1455    margin                   basic_data:   932.
          53    margin_op                basic_data:   932, 1170,
                                         basic_xfer_vector:   57.
          76    mar_fun                  basic_data:   241,
                                         basic_xfer_vector:   76.
          15    matrix                   basic_data:   172,  222,  285.
        1474    matrix_add_sub           basic_data:   962.
        1476    matrix_assign_numeric    basic_data:   966.
        1477    matrix_assign_string     basic_data:   969.
          17    matrix_constant          basic_data:   174,  198,  216,  297,  315.
        1500    matrix_mult              basic_data:   972.
        1503    matrix_scalar_mult       basic_data:   977.
         174    mat_add                  basic_data:   963, 1201,
                                         basic_xfer_vector:  141.
         173    mat_assign_numeric       basic_data:   967, 1205,
                                         basic_xfer_vector:  140.
         200    mat_assign_string        basic_data:   970, 1208,
                                         basic_xfer_vector:  145.
        1456    mat_data_read            basic_data:   934.
        1460    mat_input                basic_data:   938.
        1462    mat_linput               basic_data:   942.
         166    mat_linput_op            basic_data:   944, 1182,
                                         basic_xfer_vector:  135.
         203    mat_mult_mm              basic_data:   975, 1213,
                                         basic_xfer_vector:  148.
         202    mat_mult_mv              basic_data:   974, 1212,
                                         basic_xfer_vector:  147.
         201    mat_mult_vm              basic_data:   973, 1211,
                                         basic_xfer_vector:  146.
         167    mat_numeric_data_read    basic_data:   935, 1173,
                                         basic_xfer_vector:  136.
         156    mat_numeric_input_op     basic_data:   939, 1177,
                                         basic_xfer_vector:  127.
         160    mat_numeric_print_op     basic_data:   947, 1185,
                                         basic_xfer_vector:  129.
         162    mat_numeric_read_op      basic_data:   955, 1193,
                                         basic_xfer_vector:  131.
         164    mat_numeric_write_op     basic_data:   959, 1197,
                                         basic_xfer_vector:  133.
        1464    mat_print                basic_data:   946.
        1466    mat_print_using          basic_data:   950.
         171    mat_print_using_numeric  basic_data:   951, 1189,
                                         basic_xfer_vector:  138.
         172    mat_print_using_string   basic_data:   952, 1190,
                                         basic_xfer_vector:  139.
        1470    mat_read                 basic_data:   954.
         176    mat_scalar_mult          basic_data:   978, 1216,
                                         basic_xfer_vector:  143.
         170    mat_string_data_read     basic_data:   936, 1174,
                                         basic_xfer_vector:  137.
         157    mat_string_input_op      basic_data:   940, 1178,
                                         basic_xfer_vector:  128.
         161    mat_string_print_op      basic_data:   948, 1186,
                                         basic_xfer_vector:  130.
         163    mat_string_read_op       basic_data:   956, 1194,
                                         basic_xfer_vector:  132.
         165    mat_string_write_op      basic_data:   960, 1198,
                                         basic_xfer_vector:  134.
         175    mat_sub                  basic_data:   964, 1202,
                                         basic_xfer_vector:  142.
        1472    mat_write                basic_data:   958.
          15    max_fun                  basic_data:   244,
                                         basic_xfer_vector:   27.
          14    mid_fun                  basic_data:   331,
                                         basic_xfer_vector:   26.
          16    min_fun                  basic_data:   247,
                                         basic_xfer_vector:   28.
          43    missing_line             basic_data:   886, 1124,
                                         basic_xfer_vector:   49.
         122    mod_fun                  basic_data:   250,
                                         basic_xfer_vector:   97.
        1504    multiply                 basic_data:   980.
           1    n.0                      basic_data:   160,  195,  207,  252,  261,  282.
           4    n.f                      basic_data:   163,  213,  228,  231,  234,  240.
          11    n.fs                     basic_data:   168,  255,  291.
           2    n.n                      basic_data:   161,  186,  189,  192,  201,  204,  210,  219,  237,  264,  267,  273,  279.
          10    n.nn                     basic_data:   167,  249.
           3    n.s                      basic_data:   162,  225,  288,  294.
          12    n.ssn                    basic_data:   169.
          14    n.var                    basic_data:   171,  243,  246.
        1353    normal_relational        basic_data:   805,  806.
         152    nul_fun                  basic_data:   316,
                                         basic_xfer_vector:  121.
         740    numeric_0                basic_data:   406,  442.
          77    numeric_data_read        basic_data:   865, 1103,
                                         basic_xfer_vector:   77.
         747    numeric_f                basic_data:   409,  455.
        1021    numeric_fs               basic_data:   414,  517.
          70    numeric_input_op         basic_data:   920, 1158,
                                         basic_xfer_vector:   70.
         747    numeric_n                basic_data:   407,  454.
        1010    numeric_nn               basic_data:   413,  504.
          61    numeric_print_op         basic_data:   991, 1231,
                                         basic_xfer_vector:   63.
          57    numeric_read_op          basic_data:  1010, 1250,
                                         basic_xfer_vector:   61.
         757    numeric_s                basic_data:   408,  467.
         526    numeric_spelling         basic_data:   341,  342.
        1032    numeric_ssn              basic_data:   415,  530.
          55    numeric_write_op         basic_data:  1088, 1333,
                                         basic_xfer_vector:   59.
         113    num_fun                  basic_data:   253,
                                         basic_xfer_vector:   89.
        1505    on                       basic_data:   982.
        1506    on_gosub                 basic_data:   984.
          27    on_gosub_op              basic_data:   984, 1224,
                                         basic_xfer_vector:   37.
          25    on_op                    basic_data:   982, 1221,
                                         basic_xfer_vector:   35.
        1401    param_prototype          basic_data:   844,  845.
         101    per_fun                  basic_data:   256,
                                         basic_xfer_vector:   79.
          21    pos_args                 basic_data:   176,  258.
           5    pos_fun                  basic_data:   259,
                                         basic_xfer_vector:   18.
        1507    power                    basic_data:   986.
        1510    power_inverse            basic_data:   988.
           0    precision_length         basic_data:  1338, 1339.
        1511    print                    basic_data:   991.
          16    print_fun                basic_data:   173,  270,  276.
        1513    print_new_line           basic_data:   994.
          63    print_new_line_op        basic_data:   995, 1235,
                                         basic_xfer_vector:   65.
        1514    print_using              basic_data:   997.
        1517    print_using_end          basic_data:  1004.
         105    print_using_end_op       basic_data:  1005, 1245,
                                         basic_xfer_vector:   83.
         106    print_using_numeric_op   basic_data:   998, 1238,
                                         basic_xfer_vector:   84.
        1516    print_using_start        basic_data:  1001.
         104    print_using_start_op     basic_data:  1002, 1242,
                                         basic_xfer_vector:   82.
         107    print_using_string_op    basic_data:   999, 1239,
                                         basic_xfer_vector:   85.
         142    pwri_fun                 basic_data:   989, 1229,
                                         basic_xfer_vector:  113.
         141    pwr_fun                  basic_data:   986, 1226,
                                         basic_xfer_vector:  112.
        1520    randomize                basic_data:  1007.
         123    randomize_fun            basic_data:  1008, 1248,
                                         basic_xfer_vector:   98.
        1521    read                     basic_data:  1010.
        1523    redimension              basic_data:  1013.
        1341    relational_table         basic_data:   789,  790,  803.
        1352    relational_table_length  basic_data:   801,  802.
        1526    reset_ascii              basic_data:  1018.
         116    reset_ascii_op           basic_data:  1019, 1259,
                                         basic_xfer_vector:   92.
        1527    reset_data               basic_data:  1021.
          54    reset_op                 basic_data:  1022, 1262,
                                         basic_xfer_vector:   58.
        1530    reset_random             basic_data:  1024.
         117    reset_random_op          basic_data:  1025, 1265,
                                         basic_xfer_vector:   93.
        1531    return                   basic_data:  1027.
          32    return_op                basic_data:  1027, 1267,
                                         basic_xfer_vector:   40.
         226    right_fun                basic_data:   337,
                                         basic_xfer_vector:  152.
         124    rnd_fun                  basic_data:   262,
                                         basic_xfer_vector:   99.
           5    s.0                      basic_data:   164,  309,  312,  327.
           6    s.n                      basic_data:   165,  303,  306,  324.
           7    s.nn                     basic_data:   166.
          20    s.sn                     basic_data:   175,  333,  336.
          13    s.snn                    basic_data:   170,  318,  321,  330.
        1532    save_fcb_pt              basic_data:  1029.
        1377    scalar_prototype         basic_data:   839,  840.
        1533    scratch                  basic_data:  1032.
          52    scratch_op               basic_data:  1032, 1273,
                                         basic_xfer_vector:   56.
          13    seg_fun                  basic_data:   319,
                                         basic_xfer_vector:   24.
        1534    setdigits                basic_data:  1034.
         204    setdigits_op             basic_data:  1035, 1276,
                                         basic_xfer_vector:  150.
          51    setup_fcb_op             basic_data:  1084, 1328,
                                         basic_xfer_vector:   55.
         125    sgn_fun                  basic_data:   265,
                                         basic_xfer_vector:  100.
         132    sin_fun                  basic_data:   268,
                                         basic_xfer_vector:  105.
          66    spc_fun                  basic_data:   271,
                                         basic_xfer_vector:   68.
         130    sqr_fun                  basic_data:   274,
                                         basic_xfer_vector:  103.
          14    sst_fun                  basic_data:   322,
                                         basic_xfer_vector:   25.
          64    statement_list           basic_data:    48,   49.
           0    statement_spelling       basic_data:    19,   20.
          31    std_sub_call_op          basic_xfer_vector:   39.
        1535    stop                     basic_data:  1037.
          24    stop_op                  basic_data:  1037, 1278,
                                         basic_xfer_vector:   34.
        1536    store                    basic_data:  1039.
         767    string_0                 basic_data:   410,  427,  479.
        1541    string_assign            basic_data:  1043.
           1    string_assign_op         basic_data:   485,  498,  553,  567,  618,  673,  687, 1045, 1286,
                                         basic_xfer_vector:   14.
        1543    string_compare           basic_data:  1047.
           3    string_compare_op        basic_data:  1049, 1290,
                                         basic_xfer_vector:   16.
        1545    string_concatenate       basic_data:  1051.
           2    string_concatenate_op    basic_data:  1053, 1294,
                                         basic_xfer_vector:   15.
         224    string_data_read         basic_data:   866, 1104,
                                         basic_xfer_vector:   78.
          71    string_input_op          basic_data:   921, 1159,
                                         basic_xfer_vector:   71.
         777    string_n                 basic_data:   411,  491.
          62    string_print_op          basic_data:   992, 1232,
                                         basic_xfer_vector:   64.
          60    string_read_op           basic_data:  1011, 1251,
                                         basic_xfer_vector:   62.
        1057    string_sn                basic_data:   421,  559.
        1044    string_snn               basic_data:   416,  544.
         612    string_spelling          basic_data:   372,  373.
          56    string_write_op          basic_data:  1089, 1334,
                                         basic_xfer_vector:   60.
          12    str_fun                  basic_data:   325,
                                         basic_xfer_vector:   23.
        1547    subend                   basic_data:  1055.
          47    subend_op                basic_data:  1055, 1296,
                                         basic_xfer_vector:   52.
        1550    subprogram_call          basic_data:  1057.
        1551    subscript                basic_data:  1060.
        1554    subtract                 basic_data:  1065.
          30    sub_call_op              basic_data:  1058, 1299,
                                         basic_xfer_vector:   38.
          33    sub_exit_op              basic_xfer_vector:   41.
         154    table_redim_op           basic_data:  1015, 1255,
                                         basic_xfer_vector:  124.
          40    table_sub_op             basic_data:  1062, 1303,
                                         basic_xfer_vector:   46.
        1555    tab_for_comma            basic_data:  1067.
          64    tab_for_comma_op         basic_data:  1068, 1310,
                                         basic_xfer_vector:   66.
          65    tab_fun                  basic_data:   277,
                                         basic_xfer_vector:   67.
         134    tan_fun                  basic_data:   280,
                                         basic_xfer_vector:  107.
         126    tim_fun                  basic_data:   283,
                                         basic_xfer_vector:  101.
        1556    tmi                      basic_data:  1070.
        1557    tnz                      basic_data:  1072.
        1560    tpl                      basic_data:  1074.
        1561    tpnz                     basic_data:  1076.
        1562    tra                      basic_data:  1078.
         150    trn_fun                  basic_data:   286,
                                         basic_xfer_vector:  119.
         112    tst_fun                  basic_data:   289,
                                         basic_xfer_vector:   88.
         102    typ_fun                  basic_data:   292,
                                         basic_xfer_vector:   80.
        1563    tze                      basic_data:  1080.
          44    unclosed_for             basic_data:   887, 1125,
                                         basic_xfer_vector:   50.
          46    undefined_function       basic_data:   888, 1126,
                                         basic_xfer_vector:   51.
        1564    use_fcb                  basic_data:  1082.
         103    use_fcb_op               basic_data:  1082, 1325,
                                         basic_xfer_vector:   81.
        1565    use_file                 basic_data:  1084.
        1566    use_tty                  basic_data:  1086.
          50    use_tty_op               basic_data:  1086, 1331,
                                         basic_xfer_vector:   54.
          11    usr_fun                  basic_data:   328,
                                         basic_xfer_vector:   22.
         127    val_fun                  basic_data:   295,
                                         basic_xfer_vector:  102.
        1567    write                    basic_data:  1088.
         151    zer_fun                  basic_data:   298,
                                         basic_xfer_vector:  120.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
