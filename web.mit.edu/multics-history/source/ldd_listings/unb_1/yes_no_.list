	COMPILATION LISTING OF SEGMENT yes_no_
	Compiled by: Multics PL/I Compiler, Release 27d, of October 11, 1982
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 11/19/82  1005.9 mst Fri
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 yes_no_: proc (answer);
        7 
        8 /* to accept the next line from "user_input" and test it for any legitimate yes/no response.
        9*   Responses may be any of the following: yes, no, y or n. */
       10 
       11 /* Bob May 12/20/72 */
       12 
       13 dcl  answer char (*);
       14 
       15 dcl  buffer char (8),				/* buffer for user_input */
       16      nelemt fixed bin,
       17      io_status bit (72) aligned,
       18      sp ptr,
       19      1 phake_io_status aligned based (sp),
       20      2 io_stat_1 bit (36),
       21      2 io_stat_2 bit (36),
       22      bp ptr,
       23      yes_mask char (3) based (bp),
       24      no_mask char (2) based (bp),
       25      y_n_mask char (1) based (bp);
       26 
       27 dcl  yes char (3) init ("yes"),
       28      no char (2) init ("no"),
       29      y char (1) init ("y"),
       30      n char (1) init ("n");
       31 
       32 dcl  ios_$read_ptr entry (ptr, fixed bin, fixed bin),
       33      ios_$resetread entry (char (*), bit (72) aligned),
       34      com_err_ entry options (variable),
       35      com_err_$suppress_name entry (fixed bin, char (*), char (*));
       36 
       37 /* * * * * * * * * * * * * * * * * * * */
       38 
       39 start:
       40 	sp = addr (io_status);
       41 	bp = addr (buffer);
       42 	call ios_$read_ptr (bp, 8, nelemt);
       43 	if nelemt = 2 then do;
       44 	     if y_n_mask = y | y_n_mask = n then go to good;
       45 	end;
       46 	else if nelemt = 3 then do;
       47 	     if no_mask = no then go to good;
       48 	end;
       49 	else if nelemt = 4 then do;
       50 	     if yes_mask = yes then go to good;
       51 	end;
       52 
       53 bad:
       54 	call com_err_$suppress_name (0, "yes_no_", "please answer:yes, no, y or n");
       55 	call ios_$resetread ("user_input", io_status);
       56 	if io_stat_1 ^= "0"b then do;
       57 	     call com_err_ (fixed (io_stat_1, 35), "yes_no_");
       58 	     go to bad;
       59 	end;
       60 	go to start;
       61 
       62 good:
       63 	answer = y_n_mask;
       64 ret:	return;
       65      end yes_no_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/19/82  0931.0  yes_no_.pl1                       >spec>on>11/19/82>yes_no_.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
answer                                 parameter       char                     unaligned dcl 13 set ref 6 62*
bp                              000110 automatic       pointer                  dcl 15 set ref 41* 42* 44 44 47 50 62
buffer                          000100 automatic       char(8)                  unaligned dcl 15 set ref 41
com_err_                        000014 constant        entry                    external dcl 32 ref 57
com_err_$suppress_name          000016 constant        entry                    external dcl 32 ref 53
io_stat_1                              based           bit(36)                  level 2 dcl 15 ref 56 57 57
io_status                       000104 automatic       bit(72)                  dcl 15 set ref 39 55*
ios_$read_ptr                   000010 constant        entry                    external dcl 32 ref 42
ios_$resetread                  000012 constant        entry                    external dcl 32 ref 55
n                               000115 automatic       char(1)                  initial unaligned dcl 27 set ref 27* 44
nelemt                          000102 automatic       fixed bin(17,0)          dcl 15 set ref 42* 43 46 49
no                              000113 automatic       char(2)                  initial unaligned dcl 27 set ref 27* 47
no_mask                                based           char(2)                  unaligned dcl 15 ref 47
phake_io_status                        based           structure                level 1 dcl 15
sp                              000106 automatic       pointer                  dcl 15 set ref 39* 56 57 57
y                               000114 automatic       char(1)                  initial unaligned dcl 27 set ref 27* 44
y_n_mask                               based           char(1)                  unaligned dcl 15 ref 44 44 62
yes                             000112 automatic       char(3)                  initial unaligned dcl 27 set ref 27* 50
yes_mask                               based           char(3)                  unaligned dcl 15 ref 50

NAMES DECLARED BY EXPLICIT CONTEXT.
bad                             000130 constant        label                    dcl 53 ref 58
good                            000225 constant        label                    dcl 62 ref 44 47 50
ret                             000233 constant        label                    dcl 64
start                           000053 constant        label                    dcl 39 ref 60
yes_no_                         000030 constant        entry                    external dcl 6

NAMES DECLARED BY CONTEXT OR IMPLICATION.
addr                                                   builtin function         ref 39 41
fixed                                                  builtin function         ref 57 57

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       312         332     234         322
Length       476     234        20         127      56           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
yes_no_                             104 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
yes_no_                  000100 buffer                      yes_no_
                         000102 nelemt                      yes_no_
                         000104 io_status                   yes_no_
                         000106 sp                          yes_no_
                         000110 bp                          yes_no_
                         000112 yes                         yes_no_
                         000113 no                          yes_no_
                         000114 y                           yes_no_
                         000115 n                           yes_no_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              ext_entry_desc

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      com_err_$suppress_name        ios_$read_ptr                 ios_$resetread

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
      6 000025        27 000043        39 000053        41 000055        42 000057        43 000074        44 000077
     45 000110        46 000111        47 000113        48 000120        49 000121        50 000123        53 000130
     55 000157        56 000200        57 000202        58 000223        60 000224        62 000225        64 000233


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
