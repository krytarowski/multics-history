	COMPILATION LISTING OF SEGMENT linus_abort_line
	Compiled by: Multics PL/I Compiler, Release 31a, of October 12, 1988
	Compiled at: Honeywell Bull, Phoenix AZ, SysM
	Compiled on: 10/24/88  1526.2 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   *                                                         *
        4*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        5*   *                                                         *
        6*   *                                                         *
        7*   *********************************************************** */
        8 
        9 /* ******************************************************
       10*   *                                                    *
       11*   *                                                    *
       12*   * Copyright (c) 1972 by Massachusetts Institute of   *
       13*   * Technology and Honeywell Information Systems, Inc. *
       14*   *                                                    *
       15*   *                                                    *
       16*   ****************************************************** */
       17 
       18 
       19 linus_abort_line:
       20      proc () options (variable);
       21 
       22 /*
       23*     This module replaces the standard ssu_$abort_line called from
       24*     linus modules. It calls linus_convert_code to change appropriate
       25*     error_codes to more meaningful linus error_codes and then calls 
       26*     ssu_$error_ with the new code. This allows the linus modules 
       27*     to simple call abort_line and any conversion can be done here.
       28* 
       29*     Known Bugs:
       30* 
       31*     Other Problems:
       32* 
       33*     History:
       34*
       35*     Written - 08/19/82 - Dave Schimke
       36*
       37**/
       38 
       39 	call cu_$arg_count (arg_count);
       40 	if arg_count = 0 then do;			/* there must be arguments */
       41 RESIGNAL_NULL_POINTER:
       42 	     call sub_err_ (error_table_$null_info_ptr, "linus_abort_line", CANT_RESTART, null (), (0), "sci_ptr");
       43 	     go to RESIGNAL_NULL_POINTER;
       44 	     end;
       45 
       46 	call cu_$arg_list_ptr (arg_list_ptr);
       47 
       48 /* Get the sci_ptr, first argument */
       49 	call cu_$arg_ptr (1, arg_ptr, (0), (0));
       50 
       51 	call decode_descriptor_ (arg_list_ptr, 1, arg_type, arg_packed, arg_ndims, arg_size, arg_scale);
       52 
       53 	if (arg_type ^= pointer_dtype) | (arg_packed ^= "0"b) | (arg_ndims ^= 0)
       54 	     then go to RESIGNAL_NULL_POINTER;		/* not a pointer */
       55 
       56 	sci_ptr = arg_ptr -> based_pointer;		/* got it */
       57 
       58           lcb_ptr = ssu_$get_info_ptr (sci_ptr);
       59 		
       60 	if arg_count < 2 then			/* no error code given */
       61 	     goto EXIT;
       62 
       63 /* Pick up the error code argument */
       64 
       65 	call cu_$arg_ptr (2, arg_ptr, (0), (0));
       66 	call decode_descriptor_ (arg_list_ptr, 2, arg_type, arg_packed, arg_ndims, arg_size, arg_scale);
       67 
       68 	if (arg_type = real_fix_bin_1_dtype) & (arg_packed = "0"b) then
       69 	     error_code = arg_ptr -> based_fb35;	/* caller's code is a single-word fixed binary value */
       70 
       71 	else do;					/* caller's code is something else: try to convert it */
       72 	     if (arg_type >= bit_dtype) & (arg_type <= varying_char_dtype) then
       73 		from_size = arg_size;
       74 	     else from_size = (262144 * arg_scale) + arg_size;
       75 	     to_size = 35;				/* target is fixed binary (35) */
       76 	     call assign_ (arg_ptr, (2 * arg_type + binary (arg_packed, 1)), from_size, addr (error_code),
       77 		(2 * real_fix_bin_1_dtype), to_size);
       78 	end;
       79 
       80 /* linus error code conversion */
       81 	if (error_code ^= 0) then do;
       82 	     call linus_convert_code (error_code, user_code, linus_data_$p_id);
       83 	     if error_code ^= user_code		/* need to make new arg_list */
       84 		then do;
       85                     arg_list_arg_count = arg_count;
       86 		allocate arg_list set (new_arg_list_ptr);
       87 		new_arg_list_ptr -> arg_list = arg_list_ptr -> old_arg_list;
       88                     new_arg_list_ptr -> arg_list.arg_ptrs(2) = addr(user_code);
       89 		arg_list_ptr = new_arg_list_ptr;
       90 		end;
       91 	     end;
       92 
       93 EXIT:	
       94 	call cu_$generate_call (lcb.ssu_abort_line, arg_list_ptr);
       95 	return;
       96 
       97 
       98 dcl 1 old_arg_list like arg_list based (arg_list_ptr);
       99 dcl  CANT_RESTART character (1) static options (constant) initial ("s");
      100 dcl  (new_arg_list_ptr, arg_list_ptr, arg_ptr) pointer;
      101 dcl  arg_count fixed binary;
      102 
      103 dcl  arg_list_arg_count fixed bin;
      104 dcl  arg_type fixed binary;
      105 dcl  arg_packed bit (1) aligned;
      106 dcl  arg_ndims fixed binary;
      107 dcl  arg_size fixed binary;
      108 dcl  arg_scale fixed binary;
      109 
      110 dcl  based_fb35 fixed binary (35) aligned based;
      111 dcl  based_pointer pointer aligned based;
      112 
      113 dcl  error_code fixed binary (35);
      114 dcl  (from_size, to_size) fixed bin (35);
      115 dcl  sci_ptr ptr;
      116 dcl  user_code fixed binary (35);
      117 
      118 /* Entries */
      119 dcl  assign_ entry (pointer, fixed binary, fixed binary (35), pointer, fixed binary, fixed binary (35));
      120 dcl  cu_$arg_count entry (fixed binary);
      121 dcl  cu_$arg_ptr entry (fixed binary, pointer, fixed binary (21), fixed binary (35));
      122 dcl  cu_$arg_list_ptr entry (pointer);
      123 dcl  cu_$generate_call entry (entry, ptr);
      124 dcl  decode_descriptor_
      125 	entry (pointer, fixed binary, fixed binary, bit (1) aligned, fixed binary, fixed binary, fixed binary);
      126 dcl  error_table_$null_info_ptr fixed bin(35) ext static;
      127 dcl  linus_convert_code entry (fixed bin(35), fixed bin(35), fixed bin(35));
      128 dcl  linus_data_$p_id fixed bin (35);
      129 dcl  ssu_$get_info_ptr entry (ptr) returns(ptr);
      130 dcl  sub_err_ entry() options(variable);
      131 dcl  sys_info$max_seg_size fixed bin(35) ext static;
      132 dcl  (addr, binary, fixed, null, rel) builtin;
      133 
      134 /**/
      135 
  1     1 /* BEGIN INCLUDE FILE ... arg_list.incl.pl1
  1     2*
  1     3*   James R. Davis 10 May 79 */
  1     4 
  1     5 
  1     6      
  1     7 /****^  HISTORY COMMENTS:
  1     8*  1) change(86-05-15,DGHowe), approve(86-05-15,MCR7375),
  1     9*     audit(86-07-15,Schroth):
  1    10*     added command_name_arglist declaration to allow the storage of the
  1    11*     command name given to the command processor
  1    12*                                                   END HISTORY COMMENTS */
  1    13 
  1    14      dcl	   1 arg_list	      aligned based,
  1    15 	     2 header,
  1    16 	       3 arg_count	      fixed bin (17) unsigned unal,
  1    17 	       3 pad1	      bit (1) unal,
  1    18 	       3 call_type	      fixed bin (18) unsigned unal,
  1    19 	       3 desc_count	      fixed bin (17) unsigned unal,
  1    20 	       3 pad2	      bit (19) unal,
  1    21 	     2 arg_ptrs	      (arg_list_arg_count refer (arg_list.arg_count)) ptr,
  1    22 	     2 desc_ptrs	      (arg_list_arg_count refer (arg_list.arg_count)) ptr;
  1    23 
  1    24 
  1    25      dcl	   1 command_name_arglist	      aligned based,
  1    26 	     2 header,
  1    27 	       3 arg_count	      fixed bin (17) unsigned unal,
  1    28 	       3 pad1	      bit (1) unal,
  1    29 	       3 call_type	      fixed bin (18) unsigned unal,
  1    30 	       3 desc_count	      fixed bin (17) unsigned unal,
  1    31 	       3 mbz              bit(1) unal,
  1    32                  3 has_command_name bit(1) unal,
  1    33 	       3 pad2	      bit (17) unal,
  1    34 	     2 arg_ptrs	      (arg_list_arg_count refer (command_name_arglist.arg_count)) ptr,
  1    35 	     2 desc_ptrs	      (arg_list_arg_count refer (command_name_arglist.arg_count)) ptr,
  1    36 	     2 name,
  1    37                  3 command_name_ptr         pointer,
  1    38                  3 command_name_length      fixed bin (21);
  1    39 	
  1    40 
  1    41 
  1    42      dcl	   1 arg_list_with_envptr aligned based,	/* used with non-quick int and entry-var calls */
  1    43 	     2 header,
  1    44 	       3 arg_count	      fixed bin (17) unsigned unal,
  1    45 	       3 pad1	      bit (1) unal,
  1    46 	       3 call_type	      fixed bin (18) unsigned unal,
  1    47 	       3 desc_count	      fixed bin (17) unsigned unal,
  1    48 	       3 pad2	      bit (19) unal,
  1    49 	     2 arg_ptrs	      (arg_list_arg_count refer (arg_list_with_envptr.arg_count)) ptr,
  1    50 	     2 envptr	      ptr,
  1    51 	     2 desc_ptrs	      (arg_list_arg_count refer (arg_list_with_envptr.arg_count)) ptr;
  1    52 
  1    53 
  1    54      dcl	   (
  1    55 	   Quick_call_type	      init (0),
  1    56 	   Interseg_call_type     init (4),
  1    57 	   Envptr_supplied_call_type
  1    58 			      init (8)
  1    59 	   )		      fixed bin (18) unsigned unal int static options (constant);
  1    60 
  1    61 /* The user must declare arg_list_arg_count - if an adjustable automatic structure
  1    62*   is being "liked" then arg_list_arg_count may be a parameter, in order to allocate
  1    63*   an argument list of the proper size in the user's stack
  1    64*
  1    65**/
  1    66 /* END INCLUDE FILE ... arg_list.incl.pl1 */
      136 
      137 
  2     1 /* BEGIN INCLUDE FILE ... std_descriptor_types.incl.pl1 */
  2     2 
  2     3 
  2     4 /****^  HISTORY COMMENTS:
  2     5*  1) change(86-09-05,JMAthane), approve(86-09-05,MCR7525),
  2     6*     audit(86-09-11,Martinson), install(86-11-12,MR12.0-1208):
  2     7*     Added pascal_string_type_dtype descriptor type.  Its number is 87.
  2     8*     Objects of this type are PASCAL string types.
  2     9*  2) change(88-09-20,WAAnderson), approve(88-09-20,MCR7952),
  2    10*     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
  2    11*     Added the new C types.
  2    12*                                                   END HISTORY COMMENTS */
  2    13 
  2    14 /* This include file defines mnemonic names for the Multics
  2    15*   standard descriptor types, using both pl1 and cobol terminology.
  2    16*   PG 780613
  2    17*   JRD 790530
  2    18*   JRD 791016
  2    19*   MBW 810731
  2    20*   TGO 830614 Add hex types.
  2    21*   Modified June 83 JMAthane to add PASCAL data types
  2    22*   TGO 840120 Add float dec extended and generic, float binary generic
  2    23**/
  2    24 
  2    25      dcl	   (real_fix_bin_1_dtype  init (1),
  2    26 	   real_fix_bin_2_dtype   init (2),
  2    27 	   real_flt_bin_1_dtype   init (3),
  2    28 	   real_flt_bin_2_dtype   init (4),
  2    29 	   cplx_fix_bin_1_dtype   init (5),
  2    30 	   cplx_fix_bin_2_dtype   init (6),
  2    31 	   cplx_flt_bin_1_dtype   init (7),
  2    32 	   cplx_flt_bin_2_dtype   init (8),
  2    33 	   real_fix_dec_9bit_ls_dtype init (9),
  2    34 	   real_flt_dec_9bit_dtype init (10),
  2    35 	   cplx_fix_dec_9bit_ls_dtype init (11),
  2    36 	   cplx_flt_dec_9bit_dtype init (12),
  2    37 	   pointer_dtype	      init (13),
  2    38 	   offset_dtype	      init (14),
  2    39 	   label_dtype	      init (15),
  2    40 	   entry_dtype	      init (16),
  2    41 	   structure_dtype	      init (17),
  2    42 	   area_dtype	      init (18),
  2    43 	   bit_dtype	      init (19),
  2    44 	   varying_bit_dtype      init (20),
  2    45 	   char_dtype	      init (21),
  2    46 	   varying_char_dtype     init (22),
  2    47 	   file_dtype	      init (23),
  2    48 	   real_fix_dec_9bit_ls_overp_dtype init (29),
  2    49 	   real_fix_dec_9bit_ts_overp_dtype init (30),
  2    50 	   real_fix_bin_1_uns_dtype init (33),
  2    51 	   real_fix_bin_2_uns_dtype init (34),
  2    52 	   real_fix_dec_9bit_uns_dtype init (35),
  2    53 	   real_fix_dec_9bit_ts_dtype init (36),
  2    54 	   real_fix_dec_4bit_uns_dtype init (38),	/* digit-aligned */
  2    55 	   real_fix_dec_4bit_ts_dtype init (39),	/* byte-aligned */
  2    56 	   real_fix_dec_4bit_bytealigned_uns_dtype init (40), /* COBOL */
  2    57 	   real_fix_dec_4bit_ls_dtype init (41),	/* digit-aligned */
  2    58 	   real_flt_dec_4bit_dtype init (42),		/* digit-aligned */
  2    59 	   real_fix_dec_4bit_bytealigned_ls_dtype init (43),
  2    60 	   real_flt_dec_4bit_bytealigned_dtype init (44),
  2    61 	   cplx_fix_dec_4bit_bytealigned_ls_dtype init (45),
  2    62 	   cplx_flt_dec_4bit_bytealigned_dtype init (46),
  2    63 	   real_flt_hex_1_dtype   init (47),
  2    64 	   real_flt_hex_2_dtype   init (48),
  2    65 	   cplx_flt_hex_1_dtype   init (49),
  2    66 	   cplx_flt_hex_2_dtype   init (50),
  2    67 	   c_typeref_dtype        init (54),
  2    68 	   c_enum_dtype           init (55),
  2    69              c_enum_const_dtype     init (56),
  2    70 	   c_union_dtype          init (57),
  2    71 	   algol68_straight_dtype init (59),
  2    72 	   algol68_format_dtype   init (60),
  2    73 	   algol68_array_descriptor_dtype init (61),
  2    74 	   algol68_union_dtype    init (62),
  2    75 
  2    76 	   cobol_comp_6_dtype     init (1),
  2    77 	   cobol_comp_7_dtype     init (1),
  2    78 	   cobol_display_ls_dtype init (9),
  2    79 	   cobol_structure_dtype  init (17),
  2    80 	   cobol_char_string_dtype init (21),
  2    81 	   cobol_display_ls_overp_dtype init (29),
  2    82 	   cobol_display_ts_overp_dtype init (30),
  2    83 	   cobol_display_uns_dtype init (35),
  2    84 	   cobol_display_ts_dtype init (36),
  2    85 	   cobol_comp_8_uns_dtype init (38),		/* digit aligned */
  2    86 	   cobol_comp_5_ts_dtype  init (39),		/* byte aligned */
  2    87 	   cobol_comp_5_uns_dtype init (40),
  2    88 	   cobol_comp_8_ls_dtype  init (41),		/* digit aligned */
  2    89 	   real_flt_dec_extended_dtype init (81),	/* 9-bit exponent */
  2    90 	   cplx_flt_dec_extended_dtype init (82),	/* 9-bit exponent */
  2    91 	   real_flt_dec_generic_dtype init (83),	/* generic float decimal */
  2    92 	   cplx_flt_dec_generic_dtype init (84),
  2    93 	   real_flt_bin_generic_dtype init (85),	/* generic float binary */
  2    94 	   cplx_flt_bin_generic_dtype init (86)) fixed bin internal static options (constant);
  2    95 
  2    96      dcl	   (ft_integer_dtype      init (1),
  2    97 	   ft_real_dtype	      init (3),
  2    98 	   ft_double_dtype	      init (4),
  2    99 	   ft_complex_dtype	      init (7),
  2   100 	   ft_complex_double_dtype init (8),
  2   101 	   ft_external_dtype      init (16),
  2   102 	   ft_logical_dtype	      init (19),
  2   103 	   ft_char_dtype	      init (21),
  2   104 	   ft_hex_real_dtype      init (47),
  2   105 	   ft_hex_double_dtype    init (48),
  2   106 	   ft_hex_complex_dtype   init (49),
  2   107 	   ft_hex_complex_double_dtype init (50)
  2   108 	   )		      fixed bin internal static options (constant);
  2   109 
  2   110      dcl	   (algol68_short_int_dtype init (1),
  2   111 	   algol68_int_dtype      init (1),
  2   112 	   algol68_long_int_dtype init (2),
  2   113 	   algol68_real_dtype     init (3),
  2   114 	   algol68_long_real_dtype init (4),
  2   115 	   algol68_compl_dtype    init (7),
  2   116 	   algol68_long_compl_dtype init (8),
  2   117 	   algol68_bits_dtype     init (19),
  2   118 	   algol68_bool_dtype     init (19),
  2   119 	   algol68_char_dtype     init (21),
  2   120 	   algol68_byte_dtype     init (21),
  2   121 	   algol68_struct_struct_char_dtype init (22),
  2   122 	   algol68_struct_struct_bool_dtype init (20)
  2   123 	   )		      fixed bin internal static options (constant);
  2   124 
  2   125      dcl	   (label_constant_runtime_dtype init (24),
  2   126 	   int_entry_runtime_dtype init (25),
  2   127 	   ext_entry_runtime_dtype init (26),
  2   128 	   ext_procedure_runtime_dtype init (27),
  2   129 	   picture_runtime_dtype  init (63)
  2   130 	   )		      fixed bin internal static options (constant);
  2   131 
  2   132      dcl	   (pascal_integer_dtype  init (1),
  2   133 	   pascal_real_dtype      init (4),
  2   134 	   pascal_label_dtype     init (24),
  2   135 	   pascal_internal_procedure_dtype init (25),
  2   136 	   pascal_exportable_procedure_dtype init (26),
  2   137 	   pascal_imported_procedure_dtype init (27),
  2   138 	   pascal_typed_pointer_type_dtype init (64),
  2   139 	   pascal_char_dtype      init (65),
  2   140 	   pascal_boolean_dtype   init (66),
  2   141 	   pascal_record_file_type_dtype init (67),
  2   142 	   pascal_record_type_dtype init (68),
  2   143 	   pascal_set_dtype	      init (69),
  2   144 	   pascal_enumerated_type_dtype init (70),
  2   145 	   pascal_enumerated_type_element_dtype init (71),
  2   146 	   pascal_enumerated_type_instance_dtype init (72),
  2   147 	   pascal_user_defined_type_dtype init (73),
  2   148 	   pascal_user_defined_type_instance_dtype init (74),
  2   149 	   pascal_text_file_dtype init (75),
  2   150 	   pascal_procedure_type_dtype init (76),
  2   151 	   pascal_variable_formal_parameter_dtype init (77),
  2   152 	   pascal_value_formal_parameter_dtype init (78),
  2   153 	   pascal_entry_formal_parameter_dtype init (79),
  2   154 	   pascal_parameter_procedure_dtype init (80),
  2   155 	   pascal_string_type_dtype init (87)) fixed bin int static options (constant);
  2   156 
  2   157 
  2   158 /* END INCLUDE FILE ... std_descriptor_types.incl.pl1 */
      138 
      139 
  3     1 /* BEGIN INCLUDE FILE linus_lcb.incl.pl1 -- jaw 8/30/77 */
  3     2    
  3     3 
  3     4 
  3     5 /****^  HISTORY COMMENTS:
  3     6*  1) change(86-04-23,Dupuis), approve(86-05-23,MCR7188), audit(86-07-23,GWMay),
  3     7*     install(86-07-29,MR12.0-1106):
  3     8*     Added general_work_area_ptr and renamed sfr_ptr to
  3     9*     force_retrieve_scope_ptr.
  3    10*                                                   END HISTORY COMMENTS */
  3    11 
  3    12 
  3    13 /* HISTORY:
  3    14*
  3    15*   78-09-29 J. C. C. Jagernauth: Modified for MR7.0.
  3    16*
  3    17*   81-05-11  Rickie E.  Brinegar: added security bit and andministrator bit as
  3    18*   a part of the attribute level control work.
  3    19*   
  3    20*   81-06-17  Rickie E.  Brinegar: deleted the sd_ptr as a part of removing the
  3    21*   scope_data  structure  from  LINUS.   LINUS now depends totally on MRDS for
  3    22*   scope information.
  3    23*   
  3    24*   81-11-11  Rickie  E.   Brinegar:  added the timing bit and three fields for
  3    25*   retaining  various  vcpu  times  to  be collected when in timing mode.  The
  3    26*   times  to  be collected are: LINUS parsing time, LINUS processing time, and
  3    27*   MRDS processing time.
  3    28*
  3    29*   82-01-15  DJ  Schimke:  Added the build_increment and build_start fields as
  3    30*   part of the line numbering implementation.  This allows for possible  later
  3    31*   LINUS control of the build defaults.
  3    32* 
  3    33*   82-03-01 Paul W. Benjamin: Removed linus_prompt_chars_ptr, as that 
  3    34*   information is now retained by ssu_.  Removed parse_timer as no longer
  3    35*   meaningful.  Added linus_version.  Added iteration bit.  Added 6 entry 
  3    36*   variables for ssu_ replaceable procedures.  Added actual_input_iocbp.
  3    37*
  3    38*   82-06-23 Al Dupuis: Added subsystem_control_info_ptr, 
  3    39*   subsystem_invocation_level, and selection_expression_identifier.
  3    40*
  3    41*   82-08-26 DJ Schimke: Added report_control_info_ptr, and
  3    42*   table_control_info_ptr. 
  3    43*
  3    44*   82-10-19 DJ Schimke: Added ssu_abort_line.
  3    45*
  3    46*   83-06-06 Bert Moberg: Added print_search_order (pso) and no_optimize (no_ot)
  3    47*
  3    48*   83-04-07 DJ Schimke: Added temp_seg_info_ptr.
  3    49*
  3    50*   83-08-26 Al Dupuis: Added query_temp_segment_ptr.
  3    51**/
  3    52     
  3    53 dcl 1 lcb aligned based (lcb_ptr),			/* LINUS control block */
  3    54     2 db_index fixed bin (35),			/* index of open data base, or 0 */
  3    55     2 rb_len fixed bin (21),				/* length of request buffer */
  3    56     2 lila_count fixed bin (35),			/* number of LILA text lines */
  3    57     2 lila_chars fixed bin (35),			/* number of LILA source test chars */
  3    58     2 trans_id fixed bin (35),			/* used by checkpoint and rollback facilities (MR7.0) */
  3    59     2 lila_fn char (32) unal,				/* entry name of lila data file */
  3    60     2 prompt_flag bit (1) unal,			/* on if in prompt mode */
  3    61     2 test_flag bit (1) unal,				/* on if in test mode */
  3    62     2 new_version bit (1) unal init (1),		/* on for new version data base (MR7.0) */
  3    63     2 secured_db bit (1) unal,                              /* on if the db is in a secure state */
  3    64     2 administrator bit (1) unal,                           /* on if the user is a db administrator */
  3    65     2 timing_mode bit (1) unal,                             /* on if timing is to be done */
  3    66     2 iteration bit (1) unal,				/* interpret parens as iteration sets */
  3    67     2 pso_flag bit (1) unal,				/* add print_search_order to select */
  3    68     2 no_ot_flag bit (1) unal,			/* add no_optimize to select */
  3    69     2 reserved bit (27) unal,
  3    70     2 liocb_ptr ptr,				/* iocb ptr for lila file */
  3    71     2 rb_ptr ptr,					/* ptr to request buffer */
  3    72     2 is_ptr ptr,					/* iocb ptr for currentinput stream switch */
  3    73     2 cal_ptr ptr,					/* ptr to current arg list for invoke (or null) */
  3    74     2 ttn_ptr ptr,					/* pointer to table info structure */
  3    75     2 force_retrieve_scope_info_ptr ptr,		/* structure pointer to force retrieve scope operation */
  3    76     2 lv_ptr ptr,					/* pointer linus variables */
  3    77     2 si_ptr ptr,					/* pointer to select_info structure */
  3    78     2 setfi_ptr ptr,				/* pointer to set function information */
  3    79     2 sclfi_ptr ptr,				/* pointer to user declared scalar fun. names */
  3    80     2 ivs_ptr ptr,					/* pointer to stack of invoke iocb pointers */
  3    81     2 lit_ptr ptr,					/* pointer to literal pool */
  3    82     2 lvv_ptr ptr,					/* pointer to linus variable alloc. pool  */
  3    83     2 rd_ptr ptr,					/* point to readied files mode information (MR7.0) */
  3    84     2 rt_ptr ptr,                                           /* point to table of relation names and their readied modes
  3    85*                                                               (MR7.0) */
  3    86     2 actual_input_iocbp ptr,				/* ptr to input while in macros */
  3    87     2 lila_promp_chars_ptr ptr,			/* pointer to the prompt characters for lila */
  3    88     2 linus_area_ptr ptr,				/* LINUS temporary segment pointer */
  3    89     2 lila_area_ptr ptr,				/* LILA temporary segment pointer */
  3    90     2 i_o_area_ptr ptr,				/* temporary segment pointer used by write, print, create_list */
  3    91     2 rel_array_ptr ptr,                                    /* ptr to array of names rslt info structure
  3    92*                                                               for current lila expression */
  3    93     2 unused_timer float bin (63),			/* future expansion */
  3    94     2 request_time float bin (63),                          /* How much request time was spent
  3    95*                                                                in LINUS. (-1 = user has just enabled 
  3    96*						    timing, do not report) */
  3    97     2 mrds_time float bin (63),                             /* How much time was spent in MRDS */
  3    98     2 build_increment fixed bin,			/* default increment for build mode */
  3    99     2 build_start fixed bin,				/* default start count for build mode */
  3   100     2 linus_version char (4),				/* current version of LINUS */
  3   101     2 subsystem_control_info_ptr ptr,                       /* the same ptr passed by ssu_ to each request procedure */
  3   102     2 subsystem_invocation_level fixed bin,                 /* identifies this invocation of LINUS */
  3   103     2 selection_expression_identifier fixed bin,            /* identifies the current processed selection expression */
  3   104     2 report_control_info_ptr ptr,			/* pointer to linus_report_control_info structure */
  3   105     2 table_control_info_ptr ptr,			/* pointer to linus_table control structure */
  3   106     2 temp_seg_info_ptr ptr,				/* pointer to linus_temp_seg_mgr control structure */
  3   107     2 query_temp_segment_ptr ptr,			/* points to temp seg used for manipulating query */
  3   108     2 general_work_area_ptr ptr,			/* a freeing area for general use */
  3   109     2 word_pad (6) bit (36) unal,
  3   110 						/* procedures that will be optionally */
  3   111 						/* replaced by the user.  Saved so they */
  3   112 						/* can be reinstated if desired. */
  3   113     2 ssu_abort_line entry options (variable),
  3   114     2 ssu_post_request_line variable entry (ptr),
  3   115     2 ssu_pre_request_line variable entry (ptr),
  3   116 
  3   117     2 curr_lit_offset fixed bin (35),			/* index of first free bit in lit. pool */
  3   118     2 curr_lv_val_offset fixed bin (35),		/* index of first free bit lv. val. pool */
  3   119     2 static_area area (sys_info$max_seg_size - fixed (rel (addr (lcb.static_area))) + 1);
  3   120 
  3   121 dcl  lcb_ptr ptr;
  3   122 
  3   123 /* END INCLUDE FILE linus_lcb.incl.pl1 */
      140 
      141 
      142      end linus_abort_line;
      143 
      144 
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/24/88  1400.4  linus_abort_line.pl1              >special_ldd>install>MR12.2-1184>linus_abort_line.pl1
136          1    08/05/86  0856.8  arg_list.incl.pl1                 >ldd>include>arg_list.incl.pl1
138          2    10/24/88  1336.9  std_descriptor_types.incl.pl1     >special_ldd>install>MR12.2-1184>std_descriptor_types.incl.pl1
140          3    07/29/86  1148.4  linus_lcb.incl.pl1                >ldd>include>linus_lcb.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
CANT_RESTART                    000000 constant        char(1)                  initial packed unaligned dcl 99 set ref 41*
addr                                                   builtin function         dcl 132 ref 76 76 88
arg_count                       000106 automatic       fixed bin(17,0)          dcl 101 in procedure "linus_abort_line" set ref 39*
                                                                                  40 60 85
arg_count                              based           fixed bin(17,0)          level 3 in structure "arg_list" packed packed
                                                                                  unsigned unaligned dcl 1-14 in procedure
                                                                                  "linus_abort_line" set ref 86* 87 87 87 87 87 87
arg_list                               based           structure                level 1 dcl 1-14 set ref 86 87*
arg_list_arg_count              000107 automatic       fixed bin(17,0)          dcl 103 set ref 85* 86 86 86
arg_list_ptr                    000102 automatic       pointer                  dcl 100 set ref 46* 51* 66* 87 89* 93*
arg_ndims                       000112 automatic       fixed bin(17,0)          dcl 106 set ref 51* 53 66*
arg_packed                      000111 automatic       bit(1)                   dcl 105 set ref 51* 53 66* 68 76
arg_ptr                         000104 automatic       pointer                  dcl 100 set ref 49* 56 65* 68 76*
arg_ptrs                  2            based           pointer                  array level 2 dcl 1-14 set ref 88*
arg_scale                       000114 automatic       fixed bin(17,0)          dcl 108 set ref 51* 66* 74
arg_size                        000113 automatic       fixed bin(17,0)          dcl 107 set ref 51* 66* 72 74
arg_type                        000110 automatic       fixed bin(17,0)          dcl 104 set ref 51* 53 66* 68 72 72 76
assign_                         000010 constant        entry                    external dcl 119 ref 76
based_fb35                             based           fixed bin(35,0)          dcl 110 ref 68
based_pointer                          based           pointer                  dcl 111 ref 56
binary                                                 builtin function         dcl 132 ref 76
bit_dtype                              constant        fixed bin(17,0)          initial dcl 2-25 ref 72
cu_$arg_count                   000012 constant        entry                    external dcl 120 ref 39
cu_$arg_list_ptr                000016 constant        entry                    external dcl 122 ref 46
cu_$arg_ptr                     000014 constant        entry                    external dcl 121 ref 49 65
cu_$generate_call               000020 constant        entry                    external dcl 123 ref 93
decode_descriptor_              000022 constant        entry                    external dcl 124 ref 51 66
error_code                      000115 automatic       fixed bin(35,0)          dcl 113 set ref 68* 76 76 81 82* 83
error_table_$null_info_ptr      000024 external static fixed bin(35,0)          dcl 126 set ref 41*
from_size                       000116 automatic       fixed bin(35,0)          dcl 114 set ref 72* 74* 76*
header                                 based           structure                level 2 dcl 1-14
lcb                                    based           structure                level 1 dcl 3-53
lcb_ptr                         000124 automatic       pointer                  dcl 3-121 set ref 58* 93
linus_convert_code              000026 constant        entry                    external dcl 127 ref 82
linus_data_$p_id                000123 automatic       fixed bin(35,0)          dcl 128 set ref 82*
new_arg_list_ptr                000100 automatic       pointer                  dcl 100 set ref 86* 87 88 89
null                                                   builtin function         dcl 132 ref 41 41
old_arg_list                           based           structure                level 1 unaligned dcl 98 ref 87
pointer_dtype                          constant        fixed bin(17,0)          initial dcl 2-25 ref 53
real_fix_bin_1_dtype                   constant        fixed bin(17,0)          initial dcl 2-25 ref 68 76
sci_ptr                         000120 automatic       pointer                  dcl 115 set ref 56* 58*
ssu_$get_info_ptr               000030 constant        entry                    external dcl 129 ref 58
ssu_abort_line          126            based           entry variable           level 2 dcl 3-53 set ref 93*
sub_err_                        000032 constant        entry                    external dcl 130 ref 41
to_size                         000117 automatic       fixed bin(35,0)          dcl 114 set ref 75* 76*
user_code                       000122 automatic       fixed bin(35,0)          dcl 116 set ref 82* 83 88
varying_char_dtype                     constant        fixed bin(17,0)          initial dcl 2-25 ref 72

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
Envptr_supplied_call_type              internal static fixed bin(18,0)          initial packed unsigned unaligned dcl 1-54
Interseg_call_type                     internal static fixed bin(18,0)          initial packed unsigned unaligned dcl 1-54
Quick_call_type                        internal static fixed bin(18,0)          initial packed unsigned unaligned dcl 1-54
algol68_array_descriptor_dtype         internal static fixed bin(17,0)          initial dcl 2-25
algol68_bits_dtype                     internal static fixed bin(17,0)          initial dcl 2-110
algol68_bool_dtype                     internal static fixed bin(17,0)          initial dcl 2-110
algol68_byte_dtype                     internal static fixed bin(17,0)          initial dcl 2-110
algol68_char_dtype                     internal static fixed bin(17,0)          initial dcl 2-110
algol68_compl_dtype                    internal static fixed bin(17,0)          initial dcl 2-110
algol68_format_dtype                   internal static fixed bin(17,0)          initial dcl 2-25
algol68_int_dtype                      internal static fixed bin(17,0)          initial dcl 2-110
algol68_long_compl_dtype               internal static fixed bin(17,0)          initial dcl 2-110
algol68_long_int_dtype                 internal static fixed bin(17,0)          initial dcl 2-110
algol68_long_real_dtype                internal static fixed bin(17,0)          initial dcl 2-110
algol68_real_dtype                     internal static fixed bin(17,0)          initial dcl 2-110
algol68_short_int_dtype                internal static fixed bin(17,0)          initial dcl 2-110
algol68_straight_dtype                 internal static fixed bin(17,0)          initial dcl 2-25
algol68_struct_struct_bool_dtype       internal static fixed bin(17,0)          initial dcl 2-110
algol68_struct_struct_char_dtype       internal static fixed bin(17,0)          initial dcl 2-110
algol68_union_dtype                    internal static fixed bin(17,0)          initial dcl 2-25
area_dtype                             internal static fixed bin(17,0)          initial dcl 2-25
arg_list_with_envptr                   based           structure                level 1 dcl 1-42
c_enum_const_dtype                     internal static fixed bin(17,0)          initial dcl 2-25
c_enum_dtype                           internal static fixed bin(17,0)          initial dcl 2-25
c_typeref_dtype                        internal static fixed bin(17,0)          initial dcl 2-25
c_union_dtype                          internal static fixed bin(17,0)          initial dcl 2-25
char_dtype                             internal static fixed bin(17,0)          initial dcl 2-25
cobol_char_string_dtype                internal static fixed bin(17,0)          initial dcl 2-25
cobol_comp_5_ts_dtype                  internal static fixed bin(17,0)          initial dcl 2-25
cobol_comp_5_uns_dtype                 internal static fixed bin(17,0)          initial dcl 2-25
cobol_comp_6_dtype                     internal static fixed bin(17,0)          initial dcl 2-25
cobol_comp_7_dtype                     internal static fixed bin(17,0)          initial dcl 2-25
cobol_comp_8_ls_dtype                  internal static fixed bin(17,0)          initial dcl 2-25
cobol_comp_8_uns_dtype                 internal static fixed bin(17,0)          initial dcl 2-25
cobol_display_ls_dtype                 internal static fixed bin(17,0)          initial dcl 2-25
cobol_display_ls_overp_dtype           internal static fixed bin(17,0)          initial dcl 2-25
cobol_display_ts_dtype                 internal static fixed bin(17,0)          initial dcl 2-25
cobol_display_ts_overp_dtype           internal static fixed bin(17,0)          initial dcl 2-25
cobol_display_uns_dtype                internal static fixed bin(17,0)          initial dcl 2-25
cobol_structure_dtype                  internal static fixed bin(17,0)          initial dcl 2-25
command_name_arglist                   based           structure                level 1 dcl 1-25
cplx_fix_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 2-25
cplx_fix_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 2-25
cplx_fix_dec_4bit_bytealigned_ls_dtype internal static fixed bin(17,0)          initial dcl 2-25
cplx_fix_dec_9bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 2-25
cplx_flt_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 2-25
cplx_flt_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 2-25
cplx_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 2-25
cplx_flt_dec_4bit_bytealigned_dtype    internal static fixed bin(17,0)          initial dcl 2-25
cplx_flt_dec_9bit_dtype                internal static fixed bin(17,0)          initial dcl 2-25
cplx_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 2-25
cplx_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 2-25
cplx_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 2-25
cplx_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 2-25
entry_dtype                            internal static fixed bin(17,0)          initial dcl 2-25
ext_entry_runtime_dtype                internal static fixed bin(17,0)          initial dcl 2-125
ext_procedure_runtime_dtype            internal static fixed bin(17,0)          initial dcl 2-125
file_dtype                             internal static fixed bin(17,0)          initial dcl 2-25
fixed                                                  builtin function         dcl 132
ft_char_dtype                          internal static fixed bin(17,0)          initial dcl 2-96
ft_complex_double_dtype                internal static fixed bin(17,0)          initial dcl 2-96
ft_complex_dtype                       internal static fixed bin(17,0)          initial dcl 2-96
ft_double_dtype                        internal static fixed bin(17,0)          initial dcl 2-96
ft_external_dtype                      internal static fixed bin(17,0)          initial dcl 2-96
ft_hex_complex_double_dtype            internal static fixed bin(17,0)          initial dcl 2-96
ft_hex_complex_dtype                   internal static fixed bin(17,0)          initial dcl 2-96
ft_hex_double_dtype                    internal static fixed bin(17,0)          initial dcl 2-96
ft_hex_real_dtype                      internal static fixed bin(17,0)          initial dcl 2-96
ft_integer_dtype                       internal static fixed bin(17,0)          initial dcl 2-96
ft_logical_dtype                       internal static fixed bin(17,0)          initial dcl 2-96
ft_real_dtype                          internal static fixed bin(17,0)          initial dcl 2-96
int_entry_runtime_dtype                internal static fixed bin(17,0)          initial dcl 2-125
label_constant_runtime_dtype           internal static fixed bin(17,0)          initial dcl 2-125
label_dtype                            internal static fixed bin(17,0)          initial dcl 2-25
offset_dtype                           internal static fixed bin(17,0)          initial dcl 2-25
pascal_boolean_dtype                   internal static fixed bin(17,0)          initial dcl 2-132
pascal_char_dtype                      internal static fixed bin(17,0)          initial dcl 2-132
pascal_entry_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 2-132
pascal_enumerated_type_dtype           internal static fixed bin(17,0)          initial dcl 2-132
pascal_enumerated_type_element_dtype   internal static fixed bin(17,0)          initial dcl 2-132
pascal_enumerated_type_instance_dtype  internal static fixed bin(17,0)          initial dcl 2-132
pascal_exportable_procedure_dtype      internal static fixed bin(17,0)          initial dcl 2-132
pascal_imported_procedure_dtype        internal static fixed bin(17,0)          initial dcl 2-132
pascal_integer_dtype                   internal static fixed bin(17,0)          initial dcl 2-132
pascal_internal_procedure_dtype        internal static fixed bin(17,0)          initial dcl 2-132
pascal_label_dtype                     internal static fixed bin(17,0)          initial dcl 2-132
pascal_parameter_procedure_dtype       internal static fixed bin(17,0)          initial dcl 2-132
pascal_procedure_type_dtype            internal static fixed bin(17,0)          initial dcl 2-132
pascal_real_dtype                      internal static fixed bin(17,0)          initial dcl 2-132
pascal_record_file_type_dtype          internal static fixed bin(17,0)          initial dcl 2-132
pascal_record_type_dtype               internal static fixed bin(17,0)          initial dcl 2-132
pascal_set_dtype                       internal static fixed bin(17,0)          initial dcl 2-132
pascal_string_type_dtype               internal static fixed bin(17,0)          initial dcl 2-132
pascal_text_file_dtype                 internal static fixed bin(17,0)          initial dcl 2-132
pascal_typed_pointer_type_dtype        internal static fixed bin(17,0)          initial dcl 2-132
pascal_user_defined_type_dtype         internal static fixed bin(17,0)          initial dcl 2-132
pascal_user_defined_type_instance_dtype
                                       internal static fixed bin(17,0)          initial dcl 2-132
pascal_value_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 2-132
pascal_variable_formal_parameter_dtype internal static fixed bin(17,0)          initial dcl 2-132
picture_runtime_dtype                  internal static fixed bin(17,0)          initial dcl 2-125
real_fix_bin_1_uns_dtype               internal static fixed bin(17,0)          initial dcl 2-25
real_fix_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 2-25
real_fix_bin_2_uns_dtype               internal static fixed bin(17,0)          initial dcl 2-25
real_fix_dec_4bit_bytealigned_ls_dtype internal static fixed bin(17,0)          initial dcl 2-25
real_fix_dec_4bit_bytealigned_uns_dtype
                                       internal static fixed bin(17,0)          initial dcl 2-25
real_fix_dec_4bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 2-25
real_fix_dec_4bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 2-25
real_fix_dec_4bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 2-25
real_fix_dec_9bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 2-25
real_fix_dec_9bit_ls_overp_dtype       internal static fixed bin(17,0)          initial dcl 2-25
real_fix_dec_9bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 2-25
real_fix_dec_9bit_ts_overp_dtype       internal static fixed bin(17,0)          initial dcl 2-25
real_fix_dec_9bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 2-25
real_flt_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 2-25
real_flt_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 2-25
real_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 2-25
real_flt_dec_4bit_bytealigned_dtype    internal static fixed bin(17,0)          initial dcl 2-25
real_flt_dec_4bit_dtype                internal static fixed bin(17,0)          initial dcl 2-25
real_flt_dec_9bit_dtype                internal static fixed bin(17,0)          initial dcl 2-25
real_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 2-25
real_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 2-25
real_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 2-25
real_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 2-25
rel                                                    builtin function         dcl 132
structure_dtype                        internal static fixed bin(17,0)          initial dcl 2-25
sys_info$max_seg_size                  external static fixed bin(35,0)          dcl 131
varying_bit_dtype                      internal static fixed bin(17,0)          initial dcl 2-25

NAMES DECLARED BY EXPLICIT CONTEXT.
EXIT                            000507 constant        label                    dcl 93 ref 60
RESIGNAL_NULL_POINTER           000036 constant        label                    dcl 41 ref 43 53
linus_abort_line                000021 constant        entry                    external dcl 19

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       662         716     523         672
Length      1160     523        34         226     137           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
linus_abort_line                    124 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
linus_abort_line         000100 new_arg_list_ptr            linus_abort_line
                         000102 arg_list_ptr                linus_abort_line
                         000104 arg_ptr                     linus_abort_line
                         000106 arg_count                   linus_abort_line
                         000107 arg_list_arg_count          linus_abort_line
                         000110 arg_type                    linus_abort_line
                         000111 arg_packed                  linus_abort_line
                         000112 arg_ndims                   linus_abort_line
                         000113 arg_size                    linus_abort_line
                         000114 arg_scale                   linus_abort_line
                         000115 error_code                  linus_abort_line
                         000116 from_size                   linus_abort_line
                         000117 to_size                     linus_abort_line
                         000120 sci_ptr                     linus_abort_line
                         000122 user_code                   linus_abort_line
                         000123 linus_data_$p_id            linus_abort_line
                         000124 lcb_ptr                     linus_abort_line

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return_mac          bound_ck_signal     ext_entry           alloc_storage

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
assign_                       cu_$arg_count                 cu_$arg_list_ptr              cu_$arg_ptr
cu_$generate_call             decode_descriptor_            linus_convert_code            ssu_$get_info_ptr
sub_err_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$null_info_ptr




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     19 000020        39 000026        40 000034        41 000036        43 000104        46 000105        49 000114
     51 000135        53 000162        56 000172        58 000175        60 000206        65 000211        66 000232
     68 000257        72 000270        74 000277        75 000303        76 000305        81 000341        82 000343
     83 000356        85 000361        86 000363        87 000400        88 000504        89 000506        93 000507
     95 000521


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
