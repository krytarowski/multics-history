	COMPILATION LISTING OF SEGMENT set_cc
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 12/27/84  0845.3 mst Thu
	    Options: optimize map

        1 /* ******************************************************
        2*   *                                                    *
        3*   * Copyright, (C) Honeywell Limited, 1983             *
        4*   *                                                    *
        5*   * Copyright (c) 1972 by Massachusetts Institute of   *
        6*   * Technology and Honeywell Information Systems, Inc. *
        7*   *                                                    *
        8*   ****************************************************** */
        9 
       10 /* Coded by A. Downing to turn carriage control
       11*   off/on for fortran files. */
       12 
       13 /* Modified:
       14*	14 July 1983, Michael Mabey - add the control args: -defer, -no_defer
       15*	22 April 1977, David Levin -change to just act as command interface
       16*		and not attempt to validate its input
       17**/
       18 
       19 /* format: style3,^delnl,linecom */
       20 set_cc:
       21      proc;
       22 
       23 dcl	cu_$arg_count	entry (fixed bin);
       24 dcl	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin, fixed bin (35));
       25 dcl	com_err_		entry options (variable);
       26 dcl	error_table_$wrong_no_of_args
       27 			ext static fixed bin (35);
       28 dcl	file_num		fixed bin;
       29 dcl	fortran_io_$set_cc	entry (fixed bin, bit (1) aligned, fixed bin (35));
       30 dcl	fortran_io_$set_cc_defer
       31 			entry (fixed bin, bit (1) aligned, bit (1) aligned, bit (1) aligned, fixed bin (35));
       32 dcl	arg		char (n) based (argp);
       33 dcl	argp		ptr;
       34 dcl	n		fixed bin;
       35 dcl	i		fixed bin;
       36 dcl	number_of_args	fixed bin;
       37 dcl	cc		bit (1) aligned init ("1"b);
       38 dcl	defer		bit (1) aligned init ("0"b);
       39 dcl	defer_specified	bit (1) aligned init ("0"b);
       40 dcl	code		fixed bin (35);
       41 dcl	(verify, substr)	builtin;
       42 
       43 	call cu_$arg_count (number_of_args);			/* get number of args */
       44 	if number_of_args < 2
       45 	then do;
       46 		call com_err_ (error_table_$wrong_no_of_args, "set_cc", "^/Usage: set_cc filenn -control_args");
       47 		return;
       48 	     end;
       49 
       50 	call cu_$arg_ptr (1, argp, n, code);		/* Get first one, file name. */
       51 	if code ^= 0
       52 	then do;
       53 		call com_err_ (code, "set_cc");
       54 		return;
       55 	     end;
       56 
       57 /* validate it */
       58 
       59 	if substr (arg, 1, 4) ^= "file" | verify (substr (arg, 5, 2), "0123456789") ^= 0 | substr (arg, 7) ^= ""
       60 	then do;
       61 		call com_err_ (0, "set_cc", "filenn is filename, where nn is two digit value of file number. ""^a""",
       62 		     arg);
       63 		return;
       64 	     end;
       65 
       66 	file_num = convert (file_num, substr (arg, 5));	/* convert to binary */
       67 
       68 	do i = 2 to number_of_args;			/* process the remaining arguments */
       69 	     call cu_$arg_ptr (i, argp, n, code);
       70 	     if code ^= 0
       71 	     then do;
       72 		     call com_err_ (code, "set_cc");
       73 		     return;
       74 		end;
       75 	     if arg = "-on"
       76 	     then cc = "1"b;
       77 	     else if arg = "-off"
       78 	     then cc = "0"b;
       79 	     else if arg = "-defer"
       80 	     then defer, defer_specified = "1"b;
       81 	     else if arg = "-no_defer"
       82 	     then do;
       83 		     defer = "0"b;
       84 		     defer_specified = "1"b;
       85 		end;
       86 	     else do;
       87 		     call com_err_ (0, "set_cc", "Valid arguments are: -on; -off; -defer; -no_defer.  Not ""^a"".", arg);
       88 		     return;
       89 		end;
       90 	     end /* of while loop */;
       91 
       92 	call fortran_io_$set_cc_defer (file_num, cc, defer, defer_specified, code);
       93 	if code ^= 0
       94 	then call com_err_ (code, "set_cc", "File number ^d", file_num);
       95 
       96      end /* set_cc */;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    12/27/84  0838.8  set_cc.pl1                        >spec>online>fort_recompile>set_cc.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
arg                                    based           char                     unaligned dcl 32 set ref 59 59 59 61* 66 75 77 79 81
                                                                                  87*
argp                            000102 automatic       pointer                  dcl 33 set ref 50* 59 59 59 61 66 69* 75 77 79 81 87
cc                              000107 automatic       bit(1)                   initial dcl 37 set ref 37* 75* 77* 92*
code                            000112 automatic       fixed bin(35,0)          dcl 40 set ref 50* 51 53* 69* 70 72* 92* 93 93*
com_err_                        000014 constant        entry                    external dcl 25 ref 46 53 61 72 87 93
cu_$arg_count                   000010 constant        entry                    external dcl 23 ref 43
cu_$arg_ptr                     000012 constant        entry                    external dcl 24 ref 50 69
defer                           000110 automatic       bit(1)                   initial dcl 38 set ref 38* 79* 83* 92*
defer_specified                 000111 automatic       bit(1)                   initial dcl 39 set ref 39* 79* 84* 92*
error_table_$wrong_no_of_args   000016 external static fixed bin(35,0)          dcl 26 set ref 46*
file_num                        000100 automatic       fixed bin(17,0)          dcl 28 set ref 66* 66 92* 93*
fortran_io_$set_cc_defer        000020 constant        entry                    external dcl 30 ref 92
i                               000105 automatic       fixed bin(17,0)          dcl 35 set ref 68* 69*
n                               000104 automatic       fixed bin(17,0)          dcl 34 set ref 50* 59 59 59 61 61 66 69* 75 77 79 81
                                                                                  87 87
number_of_args                  000106 automatic       fixed bin(17,0)          dcl 36 set ref 43* 44 68
substr                                                 builtin function         dcl 41 ref 59 59 59 66
verify                                                 builtin function         dcl 41 ref 59

NAME DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
fortran_io_$set_cc              000000 constant        entry                    external dcl 29

NAME DECLARED BY EXPLICIT CONTEXT.
set_cc                          000105 constant        entry                    external dcl 20

NAME DECLARED BY CONTEXT OR IMPLICATION.
convert                                                builtin function         ref 66

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1032        1054     737        1042
Length      1230     737        22         137      73           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
set_cc                              302 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
set_cc                   000100 file_num                    set_cc
                         000102 argp                        set_cc
                         000104 n                           set_cc
                         000105 i                           set_cc
                         000106 number_of_args              set_cc
                         000107 cc                          set_cc
                         000110 defer                       set_cc
                         000111 defer_specified             set_cc
                         000112 code                        set_cc

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              ext_entry           any_to_any_tr

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      cu_$arg_count                 cu_$arg_ptr                   fortran_io_$set_cc_defer

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$wrong_no_of_args




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     20 000104        37 000112        38 000114        39 000115        43 000116        44 000124        46 000127
     47 000155        50 000156        51 000175        53 000177        54 000216        59 000217        61 000244
     63 000302        66 000303        68 000314        69 000323        70 000340        72 000342        73 000361
     75 000362        77 000373        79 000401        81 000411        83 000415        84 000416        85 000420
     87 000421        88 000457        90 000460        92 000462        93 000501        96 000536


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
