	COMPILATION LISTING OF SEGMENT ibm3780_io_call_control_
	Compiled by: Multics PL/I Compiler, Release 28e, of February 14, 1985
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 04/02/85  1514.8 mst Tue
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 /* Module called to handle io_call control orders. */
        7 
        8 /* Written:  March 1984 by Allan Haggett. */
        9 
       10 ibm3780_io_call_control_:
       11      procedure (P_attach_data_ptr, P_iocb_ptr, P_info_ptr, P_code);
       12 
       13 /**** Parameters */
       14 
       15 dcl  P_attach_data_ptr      pointer;
       16 dcl  P_iocb_ptr	        pointer parameter;
       17 dcl  P_info_ptr	        pointer parameter;	     /* To io_call_info */
       18 dcl  P_code	        fixed bin (35);
       19 
       20 /**** Automatic */
       21 
       22 dcl  arg_count	        fixed bin;
       23 dcl  caller	        character (32);
       24 dcl  code		        fixed bin (35);
       25 dcl  device	        character (32);	     /* For select_device */
       26 dcl  idx		        fixed bin;
       27 dcl  iocb_ptr	        pointer;
       28 dcl  multi_record_count     fixed bin (35);
       29 dcl  order	        character (32);	     /* From io_call_info. */
       30 dcl  (report,
       31      error)	        entry variable options (variable);
       32 dcl  1 set_bsc_modes        automatic,
       33        2 transparent        bit (1) unaligned,
       34        2 ebcdic_sw	        bit (1) unaligned,
       35        2 pad	        bit (34) unaligned;
       36 
       37 /**** Constant */
       38 
       39 dcl  SIMPLE_ORDERS	        (5) character (32) internal static options (constant)
       40 		        init ("runout", "end_write_mode", "resetread", "resetwrite", "reset");
       41 
       42 /**** Entries and external. */
       43 
       44 dcl  cv_dec_check_	        entry (character (*), fixed bin (35)) returns (fixed bin (35));
       45 dcl  iox_$control	        entry (ptr, character (*), ptr, fixed bin (35));
       46 
       47 dcl  (error_table_$badopt,
       48      error_table_$noarg,
       49      error_table_$no_operation) fixed bin (35) external static;
       50 
       51 dcl (addr, hbound, null) builtin;
       52 
       53 	/* Copy parameters. */
       54 	adp = P_attach_data_ptr;		     /* Attach Data Ptr */
       55 	iocb_ptr = P_iocb_ptr;
       56 	io_call_infop = P_info_ptr;		     /* See io_call_info.incl.pl1 */
       57 	P_code = 0;
       58 
       59 	/* Get a pointer to the CommInfoBlock for this switch. This is */
       60 	/* a block of information about the single "bisync_" attachment. */
       61 	cib_ptr = ad.cib_ptr;
       62 
       63 	order = io_call_info.order_name;
       64 	arg_count = io_call_info.nargs;
       65 	caller = io_call_info.caller_name;
       66 	error = io_call_info.error;
       67 	report = io_call_info.report;
       68 	code = 0;				     /* Pass this back at the very end. */
       69 
       70 	/* Check to see if this order can simply be passed on without any */
       71 	/* further processing. Should we check the argument count? */
       72 	do idx = 1 to hbound (SIMPLE_ORDERS, 1)
       73 	     while (order ^= SIMPLE_ORDERS (idx));
       74 	end;
       75 
       76 	if (idx <= hbound (SIMPLE_ORDERS, 1)) then
       77 	     call iox_$control (iocb_ptr, order, null (), code);
       78 
       79 	else if (order = "set_bsc_modes") then do;
       80 
       81 	     /* No arguments means we just make sure bisync_ is in sync. */
       82 	     set_bsc_modes.ebcdic_sw = (ad.char_mode = EBCDIC);
       83 	     set_bsc_modes.transparent = ad.transparent;
       84 
       85 	     do idx = 1 to arg_count;
       86 
       87 		if (io_call_info.args (idx) = "ascii") then
       88 		     set_bsc_modes.ebcdic_sw = "0"b;
       89 		else if (io_call_info.args (idx) = "ebcdic") then
       90 		     set_bsc_modes.ebcdic_sw = "1"b;
       91 		else if (io_call_info.args (idx) = "transparent") then
       92 		     set_bsc_modes.transparent = "1"b;
       93 		else if (io_call_info.args (idx) = "nontransparent") then
       94 		     set_bsc_modes.transparent = "0"b;
       95 		else do;			     /* Unknown keyword. */
       96 		     call error (error_table_$badopt, caller, "Invalid BISYNC mode: ^a", io_call_info.args (idx));
       97 		     goto ERROR_RETURN;	     /* code = 0 */
       98 		end;
       99 	     end;
      100 
      101 	     /* Keywords are processed, pass it to ourself. */
      102 	     call iox_$control (iocb_ptr, order, addr (set_bsc_modes), code);
      103 
      104 	end;
      105 
      106 	/* Debugging order. */
      107 	else if (order = "ibm3780_info") then do;
      108 
      109 	     call report ("Bisync modes:^21t^[non^]transparent,^[ascii^;ebcdic^]",
      110 		^ad.transparent, (ad.char_mode = ASCII));
      111 	     call report ("Multi-record:^21t^[ON^;OFF^] (count=^d)",
      112 		ad.multi_record, ad.multi_record_count);
      113 	     call report ("Record length:^21t^d", ad.record_len);
      114 
      115 	end;
      116 
      117 	else if (order = "select_device") then do;
      118 	     if (arg_count < 1) then do;
      119 		call error (error_table_$noarg, caller, "No device name for ^a order.", order);
      120 		goto ERROR_RETURN;
      121 	     end;
      122 
      123 	     /* Copy device string and pass pointer. */
      124 	     device = io_call_info.args (1);
      125 	     call iox_$control (iocb_ptr, order, addr (device), code);
      126 
      127 	     /* Interpret code returned by ibm3780_. */
      128 	     if (code = error_table_$no_operation) then do;
      129 		call error (0, caller, "Invalid device name: ^a", device);
      130 		code = 0;			     /* So io_call does not try again. */
      131 	     end;
      132 	end;
      133 
      134 	else if (order = "set_multi_record_mode") then do;
      135 
      136 	     if (arg_count = 0) then
      137 		call iox_$control (iocb_ptr, order, null (), code);
      138 	     else do;			     /* Get number. */
      139 		multi_record_count = get_numeric_arg (1, "record count");
      140 		call iox_$control (iocb_ptr, order, addr (multi_record_count), code);
      141 	     end;
      142 	end;
      143 
      144 	/* See if bisync_ will accommodate. */
      145 	else call iox_$control (cib.comm_iocb_ptr, "io_call", io_call_infop, code);
      146 
      147 ERROR_RETURN:
      148 	P_code = code;			     /* Pass it back. */
      149 
      150 	return;
      151 
      152 get_numeric_arg:
      153      procedure (P_idx, P_what) returns (fixed bin (35));
      154 
      155 dcl  P_idx	        fixed bin parameter;
      156 dcl  P_what	        character (*) parameter;
      157 
      158 dcl  bad_pos	        fixed bin (35);	     /* From cv_deck_check_. */
      159 dcl  result	        fixed bin (35);
      160 
      161 	if (P_idx > arg_count) then do;
      162 	     call error (error_table_$noarg, caller, "No ^a for ^a order.",
      163 		P_what, order);
      164 	     goto ERROR_RETURN;
      165 	end;
      166 
      167 	result = cv_dec_check_ ((io_call_info.args (P_idx)), bad_pos);
      168 	if (bad_pos ^= 0) then do;
      169 	     call error (0, caller, "Bad integer value for ^a: ^a", P_what, io_call_info.args (P_idx));
      170 	     goto ERROR_RETURN;
      171 	end;
      172 
      173 	if (result < 0) then do;
      174 	     call error (0, caller, "Value for ^a cannot be less than zero: ^d",
      175 		P_what, result);
      176 	     goto ERROR_RETURN;
      177 	end;
      178 
      179 	return (result);
      180 
      181      end get_numeric_arg;
      182 
      183  /* BEGIN INCLUDE FILE ... ibm3780_data.incl.pl1 ... 3/77 */
  1     2 
  1     3 /* Reworked February 1984 by Allan Haggett for new ibm3780_. */
  1     4 
  1     5 dcl  adp		        ptr;		         /* local copy of pointer to attach data */
  1     6 
  1     7 dcl  1 ad		        aligned based (adp),
  1     8        2 ttt_info	        like remote_ttt_info,
  1     9        2 fixed,
  1    10          3 phys_line_length fixed,
  1    11          3 char_mode        fixed bin,		         /* translation mode ascii or ebcdic */
  1    12          3 record_len       fixed bin,		         /* length of output record in characters */
  1    13          3 line_length      fixed bin,		         /* length of printer line */
  1    14          3 multi_record_count fixed bin,	         /* If multirecord, then this is records/block. */
  1    15        2 bits,
  1    16          3 has_tabs	        bit (1),		         /* on if terminal has tab option */
  1    17          3 multi_record     bit (1),		         /* enable multi record mode if on */
  1    18          3 auto_turnaround  bit (1),		         /* enable auto turnaround if on */
  1    19          3 transparent      bit (1),		         /* Set if in transparent mode */
  1    20        2 ptrs,
  1    21          3 comm_info_ptr    pointer,
  1    22          3 cib_ptr	        pointer,		         /* Comm Info Block */
  1    23        2 chars,
  1    24          3 printer_select   char (1),
  1    25          3 punch_select     char (1),
  1    26          3 terminal_id      char (5),		         /* terminal id string of terminal */
  1    27          3 device_type      char (32),		         /* Current device type. */
  1    28          3 last_selected_device char (32),	         /* Via select_device */
  1    29          3 attach_desc      char (256) var,
  1    30          3 input_buf        char (512) var,
  1    31          3 output_buf       char (512) var,
  1    32          3 open_description char (24) var,
  1    33          3 carriage_ctl_table (4) char (4) aligned,        /* These are used by */
  1    34          3 slew_ctl_table   (6) char (4) aligned;	         /*    ibm3780_conv_. */
  1    35 
  1    36 dcl  cib_ptr	        pointer;
  1    37 dcl  1 cib	        aligned based (cib_ptr),       /* Information about the comm switch for each attachment. */
  1    38        2 device_channel     char (32),		         /* Channel name. */
  1    39        2 comm_iocb_ptr      pointer,		         /* ptr to bisync_ IOCB. */
  1    40        2 last_selected_iocb_ptr pointer,	         /* Via select_device. */
  1    41        2 n_attached	        fixed bin,		         /* Count of ibm3780_ switches attached to this one? */
  1    42        2 flags,
  1    43          3 attached_sw      bit (1) unaligned,
  1    44          3 opened_sw        bit (1) unaligned,
  1    45          3 in_quit_state_sw bit (1) unaligned,
  1    46          3 pad_flags        bit (33) unaligned,
  1    47        2 chain,				         /* Thread pointers. */
  1    48          3 next_cib_ptr     pointer,
  1    49          3 prev_cib_ptr     pointer;
  1    50 
  1    51 
  1    52 dcl  ASCII	        fixed bin int static init (1) options (constant);
  1    53 dcl  EBCDIC	        fixed bin int static init (2) options (constant);
  1    54 
  1    55 /* There are three supported device types. There names: */
  1    56 dcl  (PUNCH	        init ("punch"),
  1    57      PRINTER	        init ("printer"),
  1    58      TELEPRINTER	        init ("teleprinter")) char (32) internal static options (constant);
  1    59 
  1    60 
  1    61 dcl  HT		        char (1) int static options (constant) init ("	");
  1    62 dcl  ENQ		        char (1) int static options (constant) init ("");
  1    63 dcl  ESC		        char (1) int static options (constant) init ("");
  1    64 
  1    65 /* END INCLUDE FILE ... ibm3780_data.incl.pl1 */
      183 
      184  /* BEGIN...   remote_ttt_info.incl.pl1 ... 5/78 */
  2     2 
  2     3 dcl  rttp ptr;					/* ptr to data structure */
  2     4 
  2     5 
  2     6 dcl 1 remote_ttt_info based (rttp) aligned,		/* data */
  2     7     2 ttt_bits,					/* control bits */
  2     8      (3 escape_output bit (1),			/* if on enables output escape processing */
  2     9       3 translate_output bit (1),			/* if on enables output translation */
  2    10       3 translate_input bit (1),			/* if on enables input translation */
  2    11       3 escape_input bit (1),				/* if on enables input escape processing */
  2    12       3 erase_input bit (1),				/* if on enables input erase processing */
  2    13       3 canonicalize_input bit (1),			/* if on enables input canonicalization */
  2    14       3 edited bit (1)) unal,				/* if on enables edited escape processing */
  2    15     2 terminal_type char (32),			/* terminal type in TTT */
  2    16     2 kill_char char (1),				/* specified kil character */
  2    17     2 erase_char char (1),				/* and erase character */
  2    18     2 ttt_ptrs,					/* ptr to various ttt tables */
  2    19       3 input_mvtp ptr,				/* input translation table */
  2    20       3 output_mvtp ptr,				/* output translation table */
  2    21       3 input_tctp ptr,				/* input escape table */
  2    22       3 output_tctp ptr,				/* output escape table */
  2    23       3 specp ptr;					/* special table */
  2    24 
  2    25 /* END remote_ttt_info.incl.pl1 */
      184 
      185  /* Begin include file ..... io_call_info.incl.pl1 */
  3     2 
  3     3 /* This include file defines the info_structure used by an I/O module to perform an "io_call" order
  3     4*   on behalf of the io_call command. */
  3     5 /* Coded April 1976 by Larry Johnson */
  3     6 /* Changed June 1977 by Larry Johnson for "io_call_af" order */
  3     7 
  3     8      dcl	   io_call_infop	      ptr;
  3     9 
  3    10      dcl	   1 io_call_info	      aligned based (io_call_infop),
  3    11 	     2 version	      fixed bin,
  3    12 	     2 caller_name	      char (32),		/* Caller name for error messages */
  3    13 	     2 order_name	      char (32),		/* Actual name of the order to be performed */
  3    14 	     2 report	      entry variable options (variable),
  3    15 						/* Entry to ioa_ like procedure to report results */
  3    16 	     2 error	      entry variable options (variable),
  3    17 						/* Entry to com_err_ like procedure to report results */
  3    18 	     2 af_returnp	      ptr,		/* Pointer to return string if "io_call_af"  order */
  3    19 	     2 af_returnl	      fixed bin,		/* Length of string */
  3    20 	     2 fill	      (5) bit (36) aligned,
  3    21 	     2 nargs	      fixed bin,		/* Number of additional command arguments provided */
  3    22 	     2 max_arglen	      fixed bin,		/* Length of longest argument (used to define array) */
  3    23 	     2 args	      (0 refer (io_call_info.nargs)) char (0 refer (io_call_info.max_arglen)) varying;
  3    24 
  3    25      dcl	   io_call_af_ret	      char (io_call_info.af_returnl) based (io_call_info.af_returnp) varying;
  3    26 						/* Return string for active function */
  3    27 
  3    28 /* End include file ..... io_call_info.incl.pl1 */
      185 
      186 
      187      end ibm3780_io_call_control_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/02/85  1514.5  ibm3780_io_call_control_.pl1      >spec>on>7191>ibm3780_io_call_control_.pl1
183          1    04/02/85  1453.0  ibm3780_data.incl.pl1             >spec>on>7191>ibm3780_data.incl.pl1
184          2    08/03/78  2021.0  remote_ttt_info.incl.pl1          >ldd>include>remote_ttt_info.incl.pl1
185          3    07/19/79  1547.1  io_call_info.incl.pl1             >ldd>include>io_call_info.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ASCII                                  constant        fixed bin(17,0)          initial dcl 1-52 ref 109
EBCDIC                                 constant        fixed bin(17,0)          initial dcl 1-53 ref 82
P_attach_data_ptr                      parameter       pointer                  dcl 15 ref 10 54
P_code                                 parameter       fixed bin(35,0)          dcl 18 set ref 10 57* 147*
P_idx                                  parameter       fixed bin(17,0)          dcl 155 ref 152 161 167 169
P_info_ptr                             parameter       pointer                  dcl 17 ref 10 56
P_iocb_ptr                             parameter       pointer                  dcl 16 ref 10 55
P_what                                 parameter       char                     unaligned dcl 156 set ref 152 162* 169* 174*
SIMPLE_ORDERS                   000000 constant        char(32)                 initial array unaligned dcl 39 ref 72 72 76
ad                                     based           structure                level 1 dcl 1-7
addr                                                   builtin function         dcl 51 ref 102 102 125 125 140 140
adp                             000152 automatic       pointer                  dcl 1-5 set ref 54* 61 82 83 109 109 111 111 113
arg_count                       000100 automatic       fixed bin(17,0)          dcl 22 set ref 64* 85 118 136 161
args                     44            based           varying char             array level 2 dcl 3-10 set ref 87 89 91 93 96* 124
                                                                                  167 169*
bad_pos                         000170 automatic       fixed bin(35,0)          dcl 158 set ref 167* 168
bits                     33            based           structure                level 2 dcl 1-7
caller                          000101 automatic       char(32)                 unaligned dcl 23 set ref 65* 96* 119* 129* 162* 169*
                                                                                  174*
caller_name               1            based           char(32)                 level 2 dcl 3-10 ref 65
char_mode                27            based           fixed bin(17,0)          level 3 dcl 1-7 ref 82 109
cib                                    based           structure                level 1 dcl 1-37
cib_ptr                         000154 automatic       pointer                  dcl 1-36 in procedure "ibm3780_io_call_control_" set
                                                                                  ref 61* 145
cib_ptr                  42            based           pointer                  level 3 in structure "ad" dcl 1-7 in procedure
                                                                                  "ibm3780_io_call_control_" ref 61
code                            000111 automatic       fixed bin(35,0)          dcl 24 set ref 68* 76* 102* 125* 128 130* 136* 140*
                                                                                  145* 147
comm_iocb_ptr            10            based           pointer                  level 2 dcl 1-37 set ref 145*
cv_dec_check_                   000010 constant        entry                    external dcl 44 ref 167
device                          000112 automatic       char(32)                 unaligned dcl 25 set ref 124* 125 125 129*
ebcdic_sw                 0(01) 000150 automatic       bit(1)                   level 2 packed unaligned dcl 32 set ref 82* 87* 89*
error                    26            based           entry variable           level 2 in structure "io_call_info" dcl 3-10
                                                                                  in procedure "ibm3780_io_call_control_" ref 66
error                           000144 automatic       entry variable           dcl 30 in procedure "ibm3780_io_call_control_" set
                                                                                  ref 66* 96 119 129 162 169 174
error_table_$badopt             000014 external static fixed bin(35,0)          dcl 47 set ref 96*
error_table_$no_operation       000020 external static fixed bin(35,0)          dcl 47 ref 128
error_table_$noarg              000016 external static fixed bin(35,0)          dcl 47 set ref 119* 162*
fixed                    26            based           structure                level 2 dcl 1-7
hbound                                                 builtin function         dcl 51 ref 72 76
idx                             000122 automatic       fixed bin(17,0)          dcl 26 set ref 72* 72* 76 85* 87 89 91 93 96*
io_call_info                           based           structure                level 1 dcl 3-10
io_call_infop                   000156 automatic       pointer                  dcl 3-8 set ref 56* 63 64 65 66 67 87 89 91 93 96
                                                                                  124 145* 167 169
iocb_ptr                        000124 automatic       pointer                  dcl 27 set ref 55* 76* 102* 125* 136* 140*
iox_$control                    000012 constant        entry                    external dcl 45 ref 76 102 125 136 140 145
max_arglen               43            based           fixed bin(17,0)          level 2 dcl 3-10 ref 87 87 89 89 91 91 93 93 96 96
                                                                                  96 124 124 167 167 169 169 169
multi_record             34            based           bit(1)                   level 3 dcl 1-7 set ref 111*
multi_record_count       32            based           fixed bin(17,0)          level 3 in structure "ad" dcl 1-7 in procedure
                                                                                  "ibm3780_io_call_control_" set ref 111*
multi_record_count              000126 automatic       fixed bin(35,0)          dcl 28 in procedure "ibm3780_io_call_control_" set
                                                                                  ref 139* 140 140
nargs                    42            based           fixed bin(17,0)          level 2 dcl 3-10 ref 64
null                                                   builtin function         dcl 51 ref 76 76 136 136
order                           000127 automatic       char(32)                 unaligned dcl 29 set ref 63* 72 76* 79 102* 107 117
                                                                                  119* 125* 134 136* 140* 162*
order_name               11            based           char(32)                 level 2 dcl 3-10 ref 63
ptrs                     40            based           structure                level 2 dcl 1-7
record_len               30            based           fixed bin(17,0)          level 3 dcl 1-7 set ref 113*
remote_ttt_info                        based           structure                level 1 dcl 2-6
report                          000140 automatic       entry variable           dcl 30 in procedure "ibm3780_io_call_control_" set
                                                                                  ref 67* 109 111 113
report                   22            based           entry variable           level 2 in structure "io_call_info" dcl 3-10
                                                                                  in procedure "ibm3780_io_call_control_" ref 67
result                          000171 automatic       fixed bin(35,0)          dcl 159 set ref 167* 173 174* 179
set_bsc_modes                   000150 automatic       structure                level 1 packed unaligned dcl 32 set ref 102 102
transparent                     000150 automatic       bit(1)                   level 2 in structure "set_bsc_modes" packed
                                                                                  unaligned dcl 32 in procedure
                                                                                  "ibm3780_io_call_control_" set ref 83* 91* 93*
transparent              36            based           bit(1)                   level 3 in structure "ad" dcl 1-7 in procedure
                                                                                  "ibm3780_io_call_control_" ref 83 109

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ENQ                                    internal static char(1)                  initial unaligned dcl 1-62
ESC                                    internal static char(1)                  initial unaligned dcl 1-63
HT                                     internal static char(1)                  initial unaligned dcl 1-61
PRINTER                                internal static char(32)                 initial unaligned dcl 1-56
PUNCH                                  internal static char(32)                 initial unaligned dcl 1-56
TELEPRINTER                            internal static char(32)                 initial unaligned dcl 1-56
io_call_af_ret                         based           varying char             dcl 3-25
rttp                                   automatic       pointer                  dcl 2-3

NAMES DECLARED BY EXPLICIT CONTEXT.
ERROR_RETURN                    001135 constant        label                    dcl 147 set ref 97 120 164 170 176
get_numeric_arg                 001141 constant        entry                    internal dcl 152 ref 139
ibm3780_io_call_control_        000251 constant        entry                    external dcl 10

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1514        1536    1420        1524
Length      1770    1420        22         215      73           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
ibm3780_io_call_control_            224 external procedure  is an external procedure.  
get_numeric_arg                         internal procedure  shares stack frame of external procedure ibm3780_io_call_control_.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
ibm3780_io_call_control_ 000100 arg_count                   ibm3780_io_call_control_
                         000101 caller                      ibm3780_io_call_control_
                         000111 code                        ibm3780_io_call_control_
                         000112 device                      ibm3780_io_call_control_
                         000122 idx                         ibm3780_io_call_control_
                         000124 iocb_ptr                    ibm3780_io_call_control_
                         000126 multi_record_count          ibm3780_io_call_control_
                         000127 order                       ibm3780_io_call_control_
                         000140 report                      ibm3780_io_call_control_
                         000144 error                       ibm3780_io_call_control_
                         000150 set_bsc_modes               ibm3780_io_call_control_
                         000152 adp                         ibm3780_io_call_control_
                         000154 cib_ptr                     ibm3780_io_call_control_
                         000156 io_call_infop               ibm3780_io_call_control_
                         000170 bad_pos                     get_numeric_arg
                         000171 result                      get_numeric_arg

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_e_as              alloc_cs            call_var_desc       call_ext_out_desc   return              shorten_stack
ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
cv_dec_check_                 iox_$control

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$badopt           error_table_$no_operation     error_table_$noarg




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     10 000244        54 000256        55 000262        56 000265        57 000270        61 000271        63 000273
     64 000276        65 000300        66 000303        67 000307        68 000313        72 000314        74 000327
     76 000331        79 000363        82 000367        83 000377        85 000403        87 000413        89 000436
     91 000446        93 000456        96 000466        97 000522        99 000523       102 000525       104 000553
    107 000554       109 000560       111 000612       113 000636       115 000661       117 000662       118 000666
    119 000671       120 000720       124 000721       125 000726       128 000754       129 000760       130 001007
    132 001010       134 001011       136 001015       139 001046       140 001057       142 001105       145 001106
    147 001135       150 001140       152 001141       161 001152       162 001156       164 001212       167 001213
    168 001256       169 001261       170 001333       173 001334       174 001336       176 001374       179 001375


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
