	COMPILATION LISTING OF SEGMENT linus_qedx
	Compiled by: Multics PL/I Compiler, Release 28e, of February 14, 1985
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 07/29/86  0958.2 mst Tue
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 /* format: off */



        7 
        8 /*   This is the main level procedure called by ssu_ to implement the
        9*     linus qedx request. Description and usage follows.
       10*
       11*     Description:
       12*
       13*     This request allows a user to edit the current query or a new query
       14*     through the qedx editor.
       15*     
       16*     Usage: qedx -new | -old
       17*
       18*     The control argument -new specifies that the user should start off with
       19*     an empty query. The control argument -old specifies that the user should
       20*     use the existing query. -old is the default.
       21*
       22*     Both parameters are passed to this request by ssu_.
       23*
       24*     Known Bugs:
       25*
       26*     Other Problems:
       27*
       28*     History:
       29*
       30*     Written - Al Dupuis - August 1983
       31*
       32**/
       33 
       34 linus_qedx: proc (
       35 
       36 	sci_ptr_parm,   /* input: ptr to the subsystem control info structure */
       37 	lcb_ptr_parm    /* input: ptr to the linus control block info structure */
       38 		     );

       39 
       40 dcl sci_ptr_parm ptr parm;
       41 dcl lcb_ptr_parm ptr parm;

       42 
       43 /*
       44*     Mainline Processing Overview:
       45*
       46*     (1) Check to make sure a data base is open. Process control args.
       47*
       48*     (2) Get the subroutine to qedx the query.
       49**/

       50 
       51 	call initialize;

       52 
       53 	call linus_qedx_the_query (lcb_ptr, new_or_old_query_flag);

       54 
       55 	return;
       56 
       57 initialize: proc;



       58 
       59 	sci_ptr = sci_ptr_parm;
       60 	lcb_ptr = lcb_ptr_parm;

       61 
       62 	if lcb.db_index = 0
       63 	then call ssu_$abort_line (sci_ptr, linus_error_$no_db);

       64 
       65 	new_or_old_query_flag = OFF;

       66 
       67 	call ssu_$arg_count (sci_ptr, number_of_args_supplied);
       68 	if number_of_args_supplied = 0
       69 	then return;

       70 
       71 	do current_arg_number = 1 to number_of_args_supplied;
       72 	     call ssu_$arg_ptr (sci_ptr, current_arg_number, arg_ptr, arg_length);
       73 	     if arg = "-new"
       74 	     then new_or_old_query_flag = ON;
       75 	     else if arg = "-old"
       76 		then new_or_old_query_flag = OFF;
       77 	          else call ssu_$abort_line (sci_ptr, error_table_$badopt,
       78 		     "^/Unrecognized control argument ^a.", arg);
       79 	end;

       80 
       81           return;

       82 
       83      end initialize;
       84 
       85 dcl OFF bit (1) aligned static internal options (constant) init ("0"b);
       86 dcl ON bit (1) aligned static internal options (constant) init ("1"b);

       87 
       88 dcl addr builtin;
       89 dcl arg char (arg_length) based (arg_ptr);
       90 dcl arg_length fixed bin (21);
       91 dcl arg_ptr ptr;

       92 
       93 dcl current_arg_number fixed bin;

       94 
       95 dcl error_table_$badopt fixed bin(35) ext static;

       96 
       97 dcl fixed builtin;

       98 
       99 dcl linus_error_$no_db fixed bin(35) ext static;
      100 dcl linus_qedx_the_query entry (ptr, bit(1) aligned);

      101 
      102 dcl new_or_old_query_flag bit (1) aligned;
      103 dcl number_of_args_supplied fixed bin;

      104 
      105 dcl rel builtin;

      106 
      107 dcl sci_ptr ptr;
      108 dcl ssu_$abort_line entry() options(variable);
      109 dcl ssu_$arg_count entry (ptr, fixed bin);
      110 dcl ssu_$arg_ptr entry (ptr, fixed bin, ptr, fixed bin(21));
      111 dcl sys_info$max_seg_size fixed bin(35) ext static;
      112 
  1     1 /* BEGIN INCLUDE FILE linus_lcb.incl.pl1 -- jaw 8/30/77 */
  1     2    
  1     3 
  1     4 
  1     5 /****^  HISTORY COMMENTS:
  1     6*  1) change(86-04-23,Dupuis), approve(86-05-23,MCR7188), audit(86-07-23,GWMay),
  1     7*     install(86-07-29,MR12.0-1106):
  1     8*     Added general_work_area_ptr and renamed sfr_ptr to
  1     9*     force_retrieve_scope_ptr.
  1    10*                                                   END HISTORY COMMENTS */
  1    11 
  1    12 
  1    13 /* HISTORY:
  1    14*
  1    15*   78-09-29 J. C. C. Jagernauth: Modified for MR7.0.
  1    16*
  1    17*   81-05-11  Rickie E.  Brinegar: added security bit and andministrator bit as
  1    18*   a part of the attribute level control work.
  1    19*   
  1    20*   81-06-17  Rickie E.  Brinegar: deleted the sd_ptr as a part of removing the
  1    21*   scope_data  structure  from  LINUS.   LINUS now depends totally on MRDS for
  1    22*   scope information.
  1    23*   
  1    24*   81-11-11  Rickie  E.   Brinegar:  added the timing bit and three fields for
  1    25*   retaining  various  vcpu  times  to  be collected when in timing mode.  The
  1    26*   times  to  be collected are: LINUS parsing time, LINUS processing time, and
  1    27*   MRDS processing time.
  1    28*
  1    29*   82-01-15  DJ  Schimke:  Added the build_increment and build_start fields as
  1    30*   part of the line numbering implementation.  This allows for possible  later
  1    31*   LINUS control of the build defaults.
  1    32* 
  1    33*   82-03-01 Paul W. Benjamin: Removed linus_prompt_chars_ptr, as that 
  1    34*   information is now retained by ssu_.  Removed parse_timer as no longer
  1    35*   meaningful.  Added linus_version.  Added iteration bit.  Added 6 entry 
  1    36*   variables for ssu_ replaceable procedures.  Added actual_input_iocbp.
  1    37*
  1    38*   82-06-23 Al Dupuis: Added subsystem_control_info_ptr, 
  1    39*   subsystem_invocation_level, and selection_expression_identifier.
  1    40*
  1    41*   82-08-26 DJ Schimke: Added report_control_info_ptr, and
  1    42*   table_control_info_ptr. 
  1    43*
  1    44*   82-10-19 DJ Schimke: Added ssu_abort_line.
  1    45*
  1    46*   83-06-06 Bert Moberg: Added print_search_order (pso) and no_optimize (no_ot)
  1    47*
  1    48*   83-04-07 DJ Schimke: Added temp_seg_info_ptr.
  1    49*
  1    50*   83-08-26 Al Dupuis: Added query_temp_segment_ptr.
  1    51**/
  1    52     
  1    53 dcl 1 lcb aligned based (lcb_ptr),			/* LINUS control block */
  1    54     2 db_index fixed bin (35),			/* index of open data base, or 0 */
  1    55     2 rb_len fixed bin (21),				/* length of request buffer */
  1    56     2 lila_count fixed bin (35),			/* number of LILA text lines */
  1    57     2 lila_chars fixed bin (35),			/* number of LILA source test chars */
  1    58     2 trans_id fixed bin (35),			/* used by checkpoint and rollback facilities (MR7.0) */
  1    59     2 lila_fn char (32) unal,				/* entry name of lila data file */
  1    60     2 prompt_flag bit (1) unal,			/* on if in prompt mode */
  1    61     2 test_flag bit (1) unal,				/* on if in test mode */
  1    62     2 new_version bit (1) unal init (1),		/* on for new version data base (MR7.0) */
  1    63     2 secured_db bit (1) unal,                              /* on if the db is in a secure state */
  1    64     2 administrator bit (1) unal,                           /* on if the user is a db administrator */
  1    65     2 timing_mode bit (1) unal,                             /* on if timing is to be done */
  1    66     2 iteration bit (1) unal,				/* interpret parens as iteration sets */
  1    67     2 pso_flag bit (1) unal,				/* add print_search_order to select */
  1    68     2 no_ot_flag bit (1) unal,			/* add no_optimize to select */
  1    69     2 reserved bit (27) unal,
  1    70     2 liocb_ptr ptr,				/* iocb ptr for lila file */
  1    71     2 rb_ptr ptr,					/* ptr to request buffer */
  1    72     2 is_ptr ptr,					/* iocb ptr for currentinput stream switch */
  1    73     2 cal_ptr ptr,					/* ptr to current arg list for invoke (or null) */
  1    74     2 ttn_ptr ptr,					/* pointer to table info structure */
  1    75     2 force_retrieve_scope_info_ptr ptr,		/* structure pointer to force retrieve scope operation */
  1    76     2 lv_ptr ptr,					/* pointer linus variables */
  1    77     2 si_ptr ptr,					/* pointer to select_info structure */
  1    78     2 setfi_ptr ptr,				/* pointer to set function information */
  1    79     2 sclfi_ptr ptr,				/* pointer to user declared scalar fun. names */
  1    80     2 ivs_ptr ptr,					/* pointer to stack of invoke iocb pointers */
  1    81     2 lit_ptr ptr,					/* pointer to literal pool */
  1    82     2 lvv_ptr ptr,					/* pointer to linus variable alloc. pool  */
  1    83     2 rd_ptr ptr,					/* point to readied files mode information (MR7.0) */
  1    84     2 rt_ptr ptr,                                           /* point to table of relation names and their readied modes
  1    85*                                                               (MR7.0) */
  1    86     2 actual_input_iocbp ptr,				/* ptr to input while in macros */
  1    87     2 lila_promp_chars_ptr ptr,			/* pointer to the prompt characters for lila */
  1    88     2 linus_area_ptr ptr,				/* LINUS temporary segment pointer */
  1    89     2 lila_area_ptr ptr,				/* LILA temporary segment pointer */
  1    90     2 i_o_area_ptr ptr,				/* temporary segment pointer used by write, print, create_list */
  1    91     2 rel_array_ptr ptr,                                    /* ptr to array of names rslt info structure
  1    92*                                                               for current lila expression */
  1    93     2 unused_timer float bin (63),			/* future expansion */
  1    94     2 request_time float bin (63),                          /* How much request time was spent
  1    95*                                                                in LINUS. (-1 = user has just enabled 
  1    96*						    timing, do not report) */
  1    97     2 mrds_time float bin (63),                             /* How much time was spent in MRDS */
  1    98     2 build_increment fixed bin,			/* default increment for build mode */
  1    99     2 build_start fixed bin,				/* default start count for build mode */
  1   100     2 linus_version char (4),				/* current version of LINUS */
  1   101     2 subsystem_control_info_ptr ptr,                       /* the same ptr passed by ssu_ to each request procedure */
  1   102     2 subsystem_invocation_level fixed bin,                 /* identifies this invocation of LINUS */
  1   103     2 selection_expression_identifier fixed bin,            /* identifies the current processed selection expression */
  1   104     2 report_control_info_ptr ptr,			/* pointer to linus_report_control_info structure */
  1   105     2 table_control_info_ptr ptr,			/* pointer to linus_table control structure */
  1   106     2 temp_seg_info_ptr ptr,				/* pointer to linus_temp_seg_mgr control structure */
  1   107     2 query_temp_segment_ptr ptr,			/* points to temp seg used for manipulating query */
  1   108     2 general_work_area_ptr ptr,			/* a freeing area for general use */
  1   109     2 word_pad (6) bit (36) unal,
  1   110 						/* procedures that will be optionally */
  1   111 						/* replaced by the user.  Saved so they */
  1   112 						/* can be reinstated if desired. */
  1   113     2 ssu_abort_line entry options (variable),
  1   114     2 ssu_post_request_line variable entry (ptr),
  1   115     2 ssu_pre_request_line variable entry (ptr),
  1   116 
  1   117     2 curr_lit_offset fixed bin (35),			/* index of first free bit in lit. pool */
  1   118     2 curr_lv_val_offset fixed bin (35),		/* index of first free bit lv. val. pool */
  1   119     2 static_area area (sys_info$max_seg_size - fixed (rel (addr (lcb.static_area))) + 1);
  1   120 
  1   121 dcl  lcb_ptr ptr;
  1   122 
  1   123 /* END INCLUDE FILE linus_lcb.incl.pl1 */
      113 



      114 
      115      end linus_qedx;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/29/86  0939.6  linus_qedx.pl1                    >special_ldd>install>MR12.0-1106>linus_qedx.pl1
113          1    07/29/86  0937.8  linus_lcb.incl.pl1                >special_ldd>install>MR12.0-1106>linus_lcb.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
OFF                                    constant        bit(1)                   initial dcl 85 ref 65 75
ON                                     constant        bit(1)                   initial dcl 86 ref 73
arg                                    based           char                     unaligned dcl 89 set ref 73 75 77*
arg_length                      000100 automatic       fixed bin(21,0)          dcl 90 set ref 72* 73 75 77 77
arg_ptr                         000102 automatic       pointer                  dcl 91 set ref 72* 73 75 77
current_arg_number              000104 automatic       fixed bin(17,0)          dcl 93 set ref 71* 72*
db_index                               based           fixed bin(35,0)          level 2 dcl 1-53 ref 62
error_table_$badopt             000010 external static fixed bin(35,0)          dcl 95 set ref 77*
lcb                                    based           structure                level 1 dcl 1-53
lcb_ptr                         000112 automatic       pointer                  dcl 1-121 set ref 53* 60* 62
lcb_ptr_parm                           parameter       pointer                  dcl 41 ref 34 60
linus_error_$no_db              000012 external static fixed bin(35,0)          dcl 99 set ref 62*
linus_qedx_the_query            000014 constant        entry                    external dcl 100 ref 53
new_or_old_query_flag           000105 automatic       bit(1)                   dcl 102 set ref 53* 65* 73* 75*
number_of_args_supplied         000106 automatic       fixed bin(17,0)          dcl 103 set ref 67* 68 71
sci_ptr                         000110 automatic       pointer                  dcl 107 set ref 59* 62* 67* 72* 77*
sci_ptr_parm                           parameter       pointer                  dcl 40 ref 34 59
ssu_$abort_line                 000016 constant        entry                    external dcl 108 ref 62 77
ssu_$arg_count                  000020 constant        entry                    external dcl 109 ref 67
ssu_$arg_ptr                    000022 constant        entry                    external dcl 110 ref 72

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
addr                                                   builtin function         dcl 88
fixed                                                  builtin function         dcl 97
rel                                                    builtin function         dcl 105
sys_info$max_seg_size                  external static fixed bin(35,0)          dcl 111

NAMES DECLARED BY EXPLICIT CONTEXT.
initialize                      000043 constant        entry                    internal dcl 57 ref 51
linus_qedx                      000023 constant        entry                    external dcl 34

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       312         336     207         322
Length       534     207        24         162     102           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
linus_qedx                          120 external procedure  is an external procedure.  
initialize                              internal procedure  shares stack frame of external procedure linus_qedx.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
linus_qedx               000100 arg_length                  linus_qedx
                         000102 arg_ptr                     linus_qedx
                         000104 current_arg_number          linus_qedx
                         000105 new_or_old_query_flag       linus_qedx
                         000106 number_of_args_supplied     linus_qedx
                         000110 sci_ptr                     linus_qedx
                         000112 lcb_ptr                     linus_qedx

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
linus_qedx_the_query          ssu_$abort_line               ssu_$arg_count                ssu_$arg_ptr

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$badopt           linus_error_$no_db




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     34 000017        51 000030        53 000031        55 000042        57 000043        59 000044        60 000050
     62 000053        65 000072        67 000073        68 000104        71 000107        72 000115        73 000132
     75 000143        77 000151        79 000204        81 000206


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
