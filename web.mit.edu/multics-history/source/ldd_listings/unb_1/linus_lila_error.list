	COMPILATION LISTING OF SEGMENT linus_lila_error
	Compiled by: Multics PL/I Compiler, Release 28e, of February 14, 1985
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 07/29/86  1002.9 mst Tue
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   *                                                         *
        4*   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        5*   *                                                         *
        6*   *                                                         *
        7*   *********************************************************** */
        8 
        9 /* ******************************************************
       10*   *                                                    *
       11*   *                                                    *
       12*   * Copyright (c) 1972 by Massachusetts Institute of   *
       13*   * Technology and Honeywell Information Systems, Inc. *
       14*   *                                                    *
       15*   *                                                    *
       16*   ****************************************************** */
       17 
       18 linus_lila_error:
       19      proc (lcb_ptr, lsh_ptr, code, message);
       20 
       21 /* DESCRIPTION:
       22*
       23*   This procedure prints an error diagnostic and signals the linus_lila_error_
       24*   condition, allowing linus_lila_translate to cleanup and terminate.  
       25*   
       26*   
       27*
       28*   HISTORY:
       29*
       30*   77-07-01 J. A. Weeldreyer: Initially written.
       31*   
       32**/
       33 
  1     1 /* BEGIN INCLUDE FILE linus_lcb.incl.pl1 -- jaw 8/30/77 */
  1     2    
  1     3 
  1     4 
  1     5 /****^  HISTORY COMMENTS:
  1     6*  1) change(86-04-23,Dupuis), approve(86-05-23,MCR7188), audit(86-07-23,GWMay),
  1     7*     install(86-07-29,MR12.0-1106):
  1     8*     Added general_work_area_ptr and renamed sfr_ptr to
  1     9*     force_retrieve_scope_ptr.
  1    10*                                                   END HISTORY COMMENTS */
  1    11 
  1    12 
  1    13 /* HISTORY:
  1    14*
  1    15*   78-09-29 J. C. C. Jagernauth: Modified for MR7.0.
  1    16*
  1    17*   81-05-11  Rickie E.  Brinegar: added security bit and andministrator bit as
  1    18*   a part of the attribute level control work.
  1    19*   
  1    20*   81-06-17  Rickie E.  Brinegar: deleted the sd_ptr as a part of removing the
  1    21*   scope_data  structure  from  LINUS.   LINUS now depends totally on MRDS for
  1    22*   scope information.
  1    23*   
  1    24*   81-11-11  Rickie  E.   Brinegar:  added the timing bit and three fields for
  1    25*   retaining  various  vcpu  times  to  be collected when in timing mode.  The
  1    26*   times  to  be collected are: LINUS parsing time, LINUS processing time, and
  1    27*   MRDS processing time.
  1    28*
  1    29*   82-01-15  DJ  Schimke:  Added the build_increment and build_start fields as
  1    30*   part of the line numbering implementation.  This allows for possible  later
  1    31*   LINUS control of the build defaults.
  1    32* 
  1    33*   82-03-01 Paul W. Benjamin: Removed linus_prompt_chars_ptr, as that 
  1    34*   information is now retained by ssu_.  Removed parse_timer as no longer
  1    35*   meaningful.  Added linus_version.  Added iteration bit.  Added 6 entry 
  1    36*   variables for ssu_ replaceable procedures.  Added actual_input_iocbp.
  1    37*
  1    38*   82-06-23 Al Dupuis: Added subsystem_control_info_ptr, 
  1    39*   subsystem_invocation_level, and selection_expression_identifier.
  1    40*
  1    41*   82-08-26 DJ Schimke: Added report_control_info_ptr, and
  1    42*   table_control_info_ptr. 
  1    43*
  1    44*   82-10-19 DJ Schimke: Added ssu_abort_line.
  1    45*
  1    46*   83-06-06 Bert Moberg: Added print_search_order (pso) and no_optimize (no_ot)
  1    47*
  1    48*   83-04-07 DJ Schimke: Added temp_seg_info_ptr.
  1    49*
  1    50*   83-08-26 Al Dupuis: Added query_temp_segment_ptr.
  1    51**/
  1    52     
  1    53 dcl 1 lcb aligned based (lcb_ptr),			/* LINUS control block */
  1    54     2 db_index fixed bin (35),			/* index of open data base, or 0 */
  1    55     2 rb_len fixed bin (21),				/* length of request buffer */
  1    56     2 lila_count fixed bin (35),			/* number of LILA text lines */
  1    57     2 lila_chars fixed bin (35),			/* number of LILA source test chars */
  1    58     2 trans_id fixed bin (35),			/* used by checkpoint and rollback facilities (MR7.0) */
  1    59     2 lila_fn char (32) unal,				/* entry name of lila data file */
  1    60     2 prompt_flag bit (1) unal,			/* on if in prompt mode */
  1    61     2 test_flag bit (1) unal,				/* on if in test mode */
  1    62     2 new_version bit (1) unal init (1),		/* on for new version data base (MR7.0) */
  1    63     2 secured_db bit (1) unal,                              /* on if the db is in a secure state */
  1    64     2 administrator bit (1) unal,                           /* on if the user is a db administrator */
  1    65     2 timing_mode bit (1) unal,                             /* on if timing is to be done */
  1    66     2 iteration bit (1) unal,				/* interpret parens as iteration sets */
  1    67     2 pso_flag bit (1) unal,				/* add print_search_order to select */
  1    68     2 no_ot_flag bit (1) unal,			/* add no_optimize to select */
  1    69     2 reserved bit (27) unal,
  1    70     2 liocb_ptr ptr,				/* iocb ptr for lila file */
  1    71     2 rb_ptr ptr,					/* ptr to request buffer */
  1    72     2 is_ptr ptr,					/* iocb ptr for currentinput stream switch */
  1    73     2 cal_ptr ptr,					/* ptr to current arg list for invoke (or null) */
  1    74     2 ttn_ptr ptr,					/* pointer to table info structure */
  1    75     2 force_retrieve_scope_info_ptr ptr,		/* structure pointer to force retrieve scope operation */
  1    76     2 lv_ptr ptr,					/* pointer linus variables */
  1    77     2 si_ptr ptr,					/* pointer to select_info structure */
  1    78     2 setfi_ptr ptr,				/* pointer to set function information */
  1    79     2 sclfi_ptr ptr,				/* pointer to user declared scalar fun. names */
  1    80     2 ivs_ptr ptr,					/* pointer to stack of invoke iocb pointers */
  1    81     2 lit_ptr ptr,					/* pointer to literal pool */
  1    82     2 lvv_ptr ptr,					/* pointer to linus variable alloc. pool  */
  1    83     2 rd_ptr ptr,					/* point to readied files mode information (MR7.0) */
  1    84     2 rt_ptr ptr,                                           /* point to table of relation names and their readied modes
  1    85*                                                               (MR7.0) */
  1    86     2 actual_input_iocbp ptr,				/* ptr to input while in macros */
  1    87     2 lila_promp_chars_ptr ptr,			/* pointer to the prompt characters for lila */
  1    88     2 linus_area_ptr ptr,				/* LINUS temporary segment pointer */
  1    89     2 lila_area_ptr ptr,				/* LILA temporary segment pointer */
  1    90     2 i_o_area_ptr ptr,				/* temporary segment pointer used by write, print, create_list */
  1    91     2 rel_array_ptr ptr,                                    /* ptr to array of names rslt info structure
  1    92*                                                               for current lila expression */
  1    93     2 unused_timer float bin (63),			/* future expansion */
  1    94     2 request_time float bin (63),                          /* How much request time was spent
  1    95*                                                                in LINUS. (-1 = user has just enabled 
  1    96*						    timing, do not report) */
  1    97     2 mrds_time float bin (63),                             /* How much time was spent in MRDS */
  1    98     2 build_increment fixed bin,			/* default increment for build mode */
  1    99     2 build_start fixed bin,				/* default start count for build mode */
  1   100     2 linus_version char (4),				/* current version of LINUS */
  1   101     2 subsystem_control_info_ptr ptr,                       /* the same ptr passed by ssu_ to each request procedure */
  1   102     2 subsystem_invocation_level fixed bin,                 /* identifies this invocation of LINUS */
  1   103     2 selection_expression_identifier fixed bin,            /* identifies the current processed selection expression */
  1   104     2 report_control_info_ptr ptr,			/* pointer to linus_report_control_info structure */
  1   105     2 table_control_info_ptr ptr,			/* pointer to linus_table control structure */
  1   106     2 temp_seg_info_ptr ptr,				/* pointer to linus_temp_seg_mgr control structure */
  1   107     2 query_temp_segment_ptr ptr,			/* points to temp seg used for manipulating query */
  1   108     2 general_work_area_ptr ptr,			/* a freeing area for general use */
  1   109     2 word_pad (6) bit (36) unal,
  1   110 						/* procedures that will be optionally */
  1   111 						/* replaced by the user.  Saved so they */
  1   112 						/* can be reinstated if desired. */
  1   113     2 ssu_abort_line entry options (variable),
  1   114     2 ssu_post_request_line variable entry (ptr),
  1   115     2 ssu_pre_request_line variable entry (ptr),
  1   116 
  1   117     2 curr_lit_offset fixed bin (35),			/* index of first free bit in lit. pool */
  1   118     2 curr_lv_val_offset fixed bin (35),		/* index of first free bit lv. val. pool */
  1   119     2 static_area area (sys_info$max_seg_size - fixed (rel (addr (lcb.static_area))) + 1);
  1   120 
  1   121 dcl  lcb_ptr ptr;
  1   122 
  1   123 /* END INCLUDE FILE linus_lcb.incl.pl1 */
       34 
       35 
  2     1 /* BEGIN INCLUDE FILE linus_ls_header.incl.pl1 -- jaw 7/28/77 */
  2     2 
  2     3 dcl 1 ls_header aligned based (lsh_ptr),		/* header for LILA stack */
  3     1 /* BEGIN INCLUDE FILE linus_ls_common.incl.pl1 -- jaw 7/12/77 */
  3     2 
  3     3     2 type fixed bin,				/* type of frame:
  3     4*						   1 => header,
  3     5*						   2 => set value,
  3     6*						   3 => lila set,
  3     7*						   4 => lila block */
  3     8     2 back_ptr ptr,					/* pointer to previous frame */
  3     9     2 fwd_ptr ptr,					/* pointer to next frame */
  3    10 
  3    11 /* END INCLUDE FILE linus_ls_common.incl.pl1 */
  2     4 
  2     5     2 cur_ptr ptr,					/* pointer to current frame */
  2     6     2 src_ptr ptr,					/* pointer to LILA source string */
  2     7     2 trans_failed bit (1) unal,			/* on if translate failed */
  2     8     2 from_token bit (1) unal,                              /* on if the calling routine is  linus_lila_from */
  2     9     2 reserved bit (34) unal,
  2    10     2 cur_pos fixed bin (35),				/* current position in source string */
  2    11     2 line_data (0 : lcb.lila_count),			/* data for each source line */
  2    12       3 lno char (4),				/* line number */
  2    13       3 last_char fixed bin (35);			/* index of last char */
  2    14 
  2    15 dcl  lsh_ptr ptr;
  2    16 
  2    17 /* END INCLUDE FILE linus_ls_header.incl.pl1 */
       36 
       37 
  4     1 /* BEGIN INCLUDE FILE linus_source.incl.pl1 -- jaw 7/12/77 */
  4     2 
  4     3 dcl  source_str char (lcb.lila_chars) based (ls_header.src_ptr);
  4     4 dcl  source_array (lcb.lila_chars) char (1) based (ls_header.src_ptr);
  4     5 
  4     6 /* END INCLUDE FILE linus_source.incl.pl1 */
       38 
       39 
       40 	dcl     (code, sbeg, slen)	 fixed bin (35);
       41 	dcl     lno		 fixed bin;
       42 	dcl     message		 char (*);
       43 	dcl     shorti		 char (8) aligned;
       44 	dcl     msg		 char (100) aligned;
       45 
       46 	dcl     iox_$error_output	 ptr ext;
       47 	dcl     sys_info$max_seg_size	 fixed bin (35) ext;
       48 
       49 	dcl     substr		 builtin;
       50 
       51 	dcl     linus_lila_error_	 condition;
       52 
       53 	dcl     convert_status_code_
       54 				 entry (fixed bin (35), char (8) aligned, char (100) aligned);
       55 	dcl     ioa_$ioa_switch	 entry options (variable);
       56 
       57 	ls_header.trans_failed = "1"b;		/* if we ever handle more than 1 error */
       58 
       59 	do lno = 1 to lcb.lila_count - 1
       60 	     while (ls_header.cur_pos > ls_header.line_data.last_char (lno));
       61 	end;					/* determine line number of error line */
       62 	sbeg = ls_header.line_data.last_char (lno - 1) + 1;
       63 	slen =
       64 	     ls_header.line_data.last_char (lno)
       65 	     - ls_header.line_data.last_char (lno - 1);
       66 
       67 	call convert_status_code_ (code, shorti, msg);
       68 
       69 	call
       70 	     ioa_$ioa_switch (iox_$error_output, "^/ERROR IN LINE ^a.^/^a^/^a^/^a",
       71 	     ls_header.line_data.lno (lno), msg, message,
       72 	     substr (source_str, sbeg, slen));
       73 
       74 	signal linus_lila_error_;
       75 	return;
       76 
       77      end linus_lila_error;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/29/86  0939.8  linus_lila_error.pl1              >special_ldd>install>MR12.0-1106>linus_lila_error.pl1
34           1    07/29/86  0937.8  linus_lcb.incl.pl1                >special_ldd>install>MR12.0-1106>linus_lcb.incl.pl1
36           2    11/23/82  1327.2  linus_ls_header.incl.pl1          >ldd>include>linus_ls_header.incl.pl1
2-4          3    03/27/82  0434.5  linus_ls_common.incl.pl1          >ldd>include>linus_ls_common.incl.pl1
38           4    03/27/82  0434.5  linus_source.incl.pl1             >ldd>include>linus_source.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
code                                   parameter       fixed bin(35,0)          dcl 40 set ref 18 67*
convert_status_code_            000012 constant        entry                    external dcl 53 ref 67
cur_pos                  13            based           fixed bin(35,0)          level 2 dcl 2-3 ref 59
ioa_$ioa_switch                 000014 constant        entry                    external dcl 55 ref 69
iox_$error_output               000010 external static pointer                  dcl 46 set ref 69*
last_char                15            based           fixed bin(35,0)          array level 3 dcl 2-3 ref 59 62 63 63
lcb                                    based           structure                level 1 dcl 1-53
lcb_ptr                                parameter       pointer                  dcl 1-121 ref 18 59 69 69
lila_chars                3            based           fixed bin(35,0)          level 2 dcl 1-53 ref 69 69
lila_count                2            based           fixed bin(35,0)          level 2 dcl 1-53 ref 59
line_data                14            based           structure                array level 2 dcl 2-3
linus_lila_error_               000140 stack reference condition                dcl 51 ref 74
lno                             000102 automatic       fixed bin(17,0)          dcl 41 in procedure "linus_lila_error" set ref 59*
                                                                                  59* 62 63 63 69
lno                      14            based           char(4)                  array level 3 in structure "ls_header" dcl 2-3
                                                                                  in procedure "linus_lila_error" set ref 69*
ls_header                              based           structure                level 1 dcl 2-3
lsh_ptr                                parameter       pointer                  dcl 2-15 ref 18 57 59 59 62 63 63 69 69 69
message                                parameter       char                     unaligned dcl 42 set ref 18 69*
msg                             000106 automatic       char(100)                dcl 44 set ref 67* 69*
sbeg                            000100 automatic       fixed bin(35,0)          dcl 40 set ref 62* 69 69
shorti                          000104 automatic       char(8)                  dcl 43 set ref 67*
slen                            000101 automatic       fixed bin(35,0)          dcl 40 set ref 63* 69 69
source_str                             based           char                     unaligned dcl 4-3 ref 69 69
src_ptr                  10            based           pointer                  level 2 dcl 2-3 ref 69 69
substr                                                 builtin function         dcl 49 ref 69 69
trans_failed             12            based           bit(1)                   level 2 packed unaligned dcl 2-3 set ref 57*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
source_array                           based           char(1)                  array unaligned dcl 4-4
sys_info$max_seg_size                  external static fixed bin(35,0)          dcl 47

NAME DECLARED BY EXPLICIT CONTEXT.
linus_lila_error                000031 constant        entry                    external dcl 18

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       304         322     224         314
Length       570     224        16         231      60           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
linus_lila_error                    144 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
linus_lila_error         000100 sbeg                        linus_lila_error
                         000101 slen                        linus_lila_error
                         000102 lno                         linus_lila_error
                         000104 shorti                      linus_lila_error
                         000106 msg                         linus_lila_error

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_cs            call_ext_out_desc   call_ext_out        return              signal              shorten_stack
ext_entry_desc

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
convert_status_code_          ioa_$ioa_switch

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
iox_$error_output




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     18 000024        57 000044        59 000051        61 000101        62 000103        63 000115        67 000123
     69 000137        74 000217        75 000223


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
