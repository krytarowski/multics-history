	COMPILATION LISTING OF SEGMENT gr_print_
	Compiled by: Multics PL/I Compiler, Release 27d, of October 11, 1982
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 11/18/82  1634.2 mst Thu
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   *                                                         *
        4*   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        5*   *                                                         *
        6*   *                                                         *
        7*   *********************************************************** */
        8 
        9 /* ******************************************************
       10*   *                                                    *
       11*   *                                                    *
       12*   * Copyright (c) 1972 by Massachusetts Institute of   *
       13*   * Technology and Honeywell Information Systems, Inc. *
       14*   *                                                    *
       15*   *                                                    *
       16*   ****************************************************** */
       17 
       18 gr_print_: proc (charstring);
       19 
       20 /* Written long, long ago, in a galaxy far, far away, by C. D. Tavares */
       21 /* Last modified 08/29/80 by CDT to un-reverse blinking and sensitivity */
       22 
       23 dcl  charstring char (*) parameter;
       24 
       25 dcl  len fixed bin;
       26 
  1     1 /* -------- BEGIN include file graphic_code_dcl.incl.pl1 ---------- */
  1     2 
  1     3 /* The following structure maintains a nonobvious positional relationship
  1     4*  with respect to the LSM block types as defined by the graphic compiler.
  1     5*  It therefore has an intimiate and delicate relationship with certain tables
  1     6*  defined in graphic_comp_specs.incl.pl1. */
  1     7 
  1     8 dcl 1 Graphic_Code_Structure aligned static options (constant),
  1     9     2 Dynamic_and_structural_effectors aligned,
  1    10       3 (Pause_char initial ("$"),
  1    11          Reference_char initial ("%"),
  1    12          Increment_char initial ("&"),
  1    13          Alter_char initial ("'"),
  1    14          Node_begin_char initial ("("),
  1    15          Node_end_char initial (")"),
  1    16          Control_char initial ("*"),
  1    17          Display_char initial ("+"),
  1    18          Query_char initial (","),
  1    19          Erase_char initial ("-"),
  1    20          Synchronize_char initial ("."),
  1    21          Delete_char initial ("/")) char (1) unaligned,
  1    22     2 Graphic_effectors aligned,
  1    23       3 (Setposition_char initial ("0"),
  1    24          Setpoint_char initial ("1"),
  1    25          Vector_char initial ("2"),
  1    26          Shift_char initial ("3"),
  1    27          Point_char initial ("4")) char (1) unaligned,
  1    28       3 Illegal_pad char (3) unaligned initial ((3)"U"),
  1    29     2 Mapping_effectors aligned,
  1    30       3 (Scaling_char initial ("5"),
  1    31          Rotation_char initial ("6"),
  1    32          Clipping_char initial ("7")) char (1) unaligned,
  1    33       3 Illegal_pad char (5) unaligned initial ((5)"U"),
  1    34     2 Mode_effectors aligned,
  1    35       3 (Intensity_char initial ("8"),
  1    36          Linetype_char initial ("9"),
  1    37          Sensitivity_char initial (";"),
  1    38          Blinking_char initial (":"),
  1    39          Color_char initial ("<")) char (1) unaligned,
  1    40       3 Illegal_pad char (3) unaligned initial ((3)"U"),
  1    41     2 Special_effectors aligned,
  1    42       3 (Symbol_char initial ("="),
  1    43          Text_char initial (">"),
  1    44          Datablock_char initial ("?")) char (1) unaligned,
  1    45       3 Illegal_pad char (9) unaligned initial ((9)"U");
  1    46 
  1    47 dcl 1 Graphic_Defaults aligned static options (constant),
  1    48     2 Mode_defaults aligned,
  1    49       3 Intensity_default fixed bin initial (7),
  1    50       3 Linetype_default fixed bin initial (0),
  1    51       3 Blinking_default fixed bin initial (0),
  1    52       3 Sensitivity_default fixed bin initial (0),
  1    53       3 Color_default (3) fixed bin initial ((3)16),
  1    54     2 Mapping_defaults aligned,
  1    55       3 Scaling_default (3) float bin initial ((3)1e0),
  1    56       3 Rotation_default (3) fixed bin initial ((3)0),
  1    57       3 Clipping_default (3, 2) fixed bin initial ((3) (-2048, 2048)),
  1    58     2 Identity_matrix (3, 3) float bin initial (1e0, (3)0e0, 1e0, (3)0e0, 1e0);
  1    59 
  1    60 dcl  Graphic_Element_Lengths (32 : 63) aligned static options (constant) initial
  1    61      ((4)-1,									/* not used */
  1    62      1,	/* pause */	4,	/* reference */	9,	/* increment */	9,	/* alter */
  1    63      5,	/* node begin */	1,	/* node end */	4,	/* control */	4,	/* display */
  1    64      3,	/* query */	1,	/* erase */	1,	/* synchronize */	4,	/* delete */
  1    65      10,	/* setposition */	10,	/* setpoint */	10, 	/* vector */	10,	/* shift */
  1    66      10,	/* point */	10,	/* scaling */	7,	/* rotation */	13,	/* clipping */
  1    67      2,	/* intensity */	2,	/* line type */	2,	/* blinking */	2,	/* sensitivity */
  1    68      4, 	/* color */	0,	/* symbol */	0,	/* text */	0	/* data */);
  1    69 
  1    70 dcl  zero_node_id char (3) static initial ("@@@") options (constant);
  1    71 
  1    72 dcl  request_for_status char (1) static aligned initial ("") options (constant);
  1    73 
  1    74 dcl (List_char initial ("@"),
  1    75      Array_char initial ("A")) char (1) aligned static options (constant);
  1    76 
  1    77 /* --------- END include file graphic_code_dcl.incl.pl1 ----------- */
       27 
       28 
       29 dcl (i, j) fixed bin,
       30      prefix_length fixed bin initial (0),
       31     (index, length, substr, string, abs) builtin,
       32      ch char (1) aligned,
       33      ioa_$nnl ext entry options (variable),
       34      ioa_ ext entry options (variable);
       35 
       36 dcl (xyz (3), float_array (6)) float bin,
       37      node fixed bin (18),
       38      just_ended bit (1) aligned,
       39      fixed_array (3) fixed bin,
       40      temp char (16) aligned,
       41      off_on (0:1) char (4) aligned initial ("off ", "on  ") static,
       42      Query_type (3) char (8) aligned static initial ("where", "which", "what"),
       43      Alignments (9) char (16) static initial
       44     ("upper left",
       45      "upper center",
       46      "upper right",
       47      "left",
       48      "center",
       49      "right",
       50      "lower left",
       51      "lower center",
       52      "lower right"),
       53      Graphic_names (5) char (12) static initial
       54     ("setposition", "setpoint", "vector", "shift", "point"),
       55      Input_device (0:63) static char (12) initial
       56     ("processor", "keyboard", "mouse", "joystick", "pen/tablet",
       57      "lightpen", "trackball", (56) (1) "undefined", "any device"),
       58      Line_Types (0 : 4) char (12) aligned static initial ("solid", "dashed", "dotted", "dash-dotted", "long-dashed");
       59 
       60 dcl (graphic_code_util_$decode_spi,
       61      graphic_code_util_$decode_dpi) ext entry (pointer, fixed bin, fixed bin dimension (*)),
       62      graphic_code_util_$decode_uid ext entry (pointer, fixed bin, fixed bin (18) dimension (*)),
       63      graphic_code_util_$decode_scl ext entry (pointer, fixed bin, float bin dimension (*));
       64 
       65 dcl  charstring_array (len) char (1) unaligned based (addr (charstring));
       66 
       67 
       68 	len = length (charstring);
       69 
       70 	call ioa_ ("");
       71 	just_ended = "1"b;
       72 
       73 	do i = 1 by 1 while (i <= len);
       74 
       75 	     ch = substr (charstring, i, 1);
       76 	     j = index (string (Graphic_Code_Structure.Dynamic_and_structural_effectors), ch);
       77 	     if j > 0 then goto Dyn_Struc (j);
       78 
       79 	     j = index (string (Graphic_Code_Structure.Graphic_effectors), ch);
       80 	     if j > 0 then do;
       81 		call get_xyz;
       82 		call ioa_ ("^vx^12a ^9.3f ^9.3f ^9.3f", prefix_length, Graphic_names (j), xyz (1), xyz (2), xyz (3));
       83 		goto loopend;
       84 	     end;
       85 
       86 	     j = index (string (Graphic_Code_Structure.Mapping_effectors), ch);
       87 	     if j > 0 then goto Mapping (j);
       88 
       89 	     j = index (string (Graphic_Code_Structure.Mode_effectors), ch);
       90 	     if j > 0 then goto Mode (j);
       91 
       92 	     j = index (string (Graphic_Code_Structure.Special_effectors), ch);
       93 	     if j > 0 then goto Special (j);
       94 
       95 	     call ioa_ ("^vxNON-GRAPHIC: ^a", prefix_length, ch);
       96 	     goto loopend;
       97 
       98 
       99 Dyn_Struc (1): call ioa_ ("pause");
      100 	     goto loopend;
      101 
      102 Dyn_Struc (2): call ioa_ ("reference ^o", get_uid ());
      103 	     goto loopend;
      104 
      105 Dyn_Struc (3): node = get_uid ();
      106 	     call graphic_code_util_$decode_dpi (addr (charstring_array (i + 1)), 1, fixed_array);
      107 	     call graphic_code_util_$decode_scl (addr (charstring_array (i + 3)), 1, float_array);
      108 	     i = i + 5;
      109 	     call ioa_$nnl ("increment  ^o  ^d times, ^8.4f second delay^/	by: ", node, fixed_array (1), float_array (1));
      110 	     goto loopend;
      111 
      112 Dyn_Struc (4): node = get_uid ();
      113 	     call graphic_code_util_$decode_dpi (addr (charstring_array (i + 1)), 1, fixed_array);
      114 	     i = i + 2;
      115 	     call ioa_ ("alter  ^o element ^d to ^o", node, fixed_array (1), get_uid ());
      116 	     goto loopend;
      117 
      118 Dyn_Struc (5): i = i + 1;
      119 	     if substr (charstring, i, 1) = List_char then temp = "list";
      120 	     else temp = "array";
      121 	     if just_ended then call ioa_ ("^vxnode_begin ^5a ^o", prefix_length, temp, get_uid ());
      122 	     else call ioa_ ("^/^vxnode_begin ^5a ^o", prefix_length, temp, get_uid ());
      123 	     prefix_length = prefix_length + 5;
      124 	     goto loopend;
      125 
      126 Dyn_Struc (6): prefix_length = max (0, prefix_length - 5);
      127 	     call ioa_ ("^vxnode_end^/", prefix_length);
      128 	     just_ended = "1"b;
      129 	     goto loopend_no_reset;
      130 
      131 Dyn_Struc (7): call ioa_ ("^vxcontrol ^o", prefix_length, get_uid ());
      132 	     goto loopend;
      133 
      134 Dyn_Struc (8): call ioa_ ("display  ^o", get_uid ());
      135 	     goto loopend;
      136 
      137 Dyn_Struc (9): call graphic_code_util_$decode_spi (addr (charstring_array (i + 1)), 2, fixed_array);
      138 	     i = i + 2;
      139 	     call ioa_ ("query  ^a from ^a", Query_type (fixed_array (1)), Input_device (fixed_array (2)));
      140 	     goto loopend;
      141 
      142 Dyn_Struc (10): call ioa_ ("erase");
      143 	     goto loopend;
      144 
      145 Dyn_Struc (11): call ioa_ ("synchronize");
      146 	     goto loopend;
      147 
      148 Dyn_Struc (12): call ioa_ ("delete ^o", get_uid ());
      149 	     goto loopend;
      150 
      151 
      152 Mapping (1):   call get_xyz;
      153 	     call ioa_ ("^vxscaling   ^9.3f ^9.3f ^9.3f", prefix_length, xyz (1), xyz (2), xyz (3));
      154 	     goto loopend;
      155 
      156 Mapping (2):   call graphic_code_util_$decode_dpi (addr (charstring_array (i + 1)), 3, fixed_array);
      157 	     call ioa_ ("^vxrotation  ^3d ^3d ^3d", prefix_length, fixed_array (1), fixed_array (2), fixed_array (3));
      158 	     i = i + 6;
      159 	     goto loopend;
      160 
      161 Mapping (3):   call graphic_code_util_$decode_scl (addr (charstring_array (i + 1)), 6, float_array);
      162 	     call ioa_ ("^vxclipping  ^9.3f ^9.3f (x)^/^vx^10x^9.3f ^9.3f (y)^/^vx^10x^9.3f ^9.3f (z)",
      163 		prefix_length, float_array (1), float_array (2), prefix_length, float_array (3), float_array (4),
      164 		prefix_length, float_array (5), float_array (6));
      165 
      166 	     i = i + 12;
      167 	     goto loopend;
      168 
      169 
      170 Mode (1):	     call ioa_ ("^vxintensity ^d", prefix_length, get_spi ());
      171 	     goto loopend;
      172 
      173 Mode (2):	     call ioa_ ("^vxline_type ^a", prefix_length, Line_Types (get_spi ()));
      174 	     goto loopend;
      175 
      176 Mode (3):	     call ioa_ ("^vxsensitivity ^a", prefix_length, off_on (get_spi ()));
      177 	     goto loopend;
      178 
      179 Mode (4):	     call ioa_ ("^vxblinking ^a", prefix_length, off_on (get_spi ()));
      180 	     goto loopend;
      181 
      182 Mode (5):	     call graphic_code_util_$decode_spi (addr (charstring_array (i + 1)), 3, fixed_array);
      183 	     i = i + 3;
      184 	     call ioa_ ("^vxcolor   ^d red  ^d green  ^d blue",
      185 		prefix_length, fixed_array (1), fixed_array (2), fixed_array (3));
      186 	     goto loopend;
      187 
      188 
      189 Special (1):   call graphic_code_util_$decode_dpi (addr (charstring_array (i + 1)), 1, fixed_array);
      190 	     i = i + 2;
      191 	     call ioa_ ("^vxsymbol  ""^a""", prefix_length, substr (charstring, i+1, fixed_array (1)));
      192 	     i = i + fixed_array (1);
      193 	     goto loopend;
      194 
      195 Special (2):   call graphic_code_util_$decode_spi (addr (charstring_array (i + 1)), 1, fixed_array);
      196 	     temp = Alignments (fixed_array (1));
      197 	     i = i + 1;
      198 	     call graphic_code_util_$decode_dpi (addr (charstring_array (i + 1)), 1, fixed_array);
      199 	     i = i + 2;
      200 	     call ioa_ ("^vxtext  (by ^a) ""^a""", prefix_length, temp, substr (charstring, i+1, fixed_array (1)));
      201 	     i = i + fixed_array (1);
      202 	     goto loopend;
      203 
      204 Special (3):   call graphic_code_util_$decode_dpi (addr (charstring_array (i + 1)), 1, fixed_array);
      205 	     i = i + 2;
      206 	     call ioa_ ("^vxdatablock", prefix_length);
      207 	     i = i + divide (fixed_array (1) + 5, 6, 17, 0);
      208 	     goto loopend;
      209 
      210 
      211 loopend:
      212 	     just_ended = ""b;
      213 
      214 loopend_no_reset:
      215 	end;
      216 
      217 	return;
      218 
      219 /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
      220 
      221 get_uid:	proc returns (fixed bin (18));
      222 
      223 dcl  uid fixed bin (18) dimension (1);
      224 
      225 	     call graphic_code_util_$decode_uid (addr (charstring_array (i + 1)), 1, uid);
      226 	     i = i + 3;
      227 	     return (uid (1));
      228 	end get_uid;
      229 
      230 get_xyz:	proc;
      231 
      232 dcl  k fixed bin;
      233 
      234 	     call graphic_code_util_$decode_scl (addr (charstring_array (i + 1)), 3, xyz);
      235 	     i = i + 9;
      236 
      237 	     do k = 1 to 3;
      238 		if abs (xyz (k)) <= 1e-6 then xyz (k) = 0e0;
      239 	     end;
      240 
      241 	     return;
      242 	end get_xyz;
      243 
      244 get_spi:	proc returns (fixed bin);
      245 
      246 dcl  spi fixed bin dimension (1);
      247 
      248 	     call graphic_code_util_$decode_spi (addr (charstring_array (i + 1)), 1, spi);
      249 	     i = i + 1;
      250 	     return (spi (1));
      251 	end get_spi;
      252 
      253      end gr_print_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/18/82  1625.3  gr_print_.pl1                     >dumps>old>recomp>gr_print_.pl1
27           1    03/27/82  0439.2  graphic_code_dcl.incl.pl1         >ldd>include>graphic_code_dcl.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
Alignments                      000043 constant        char(16)                 initial array unaligned dcl 36 ref 196
Dynamic_and_structural_effectors
                                000000 constant        structure                level 2 dcl 1-8 ref 76
Graphic_Code_Structure          000000 constant        structure                level 1 dcl 1-8
Graphic_effectors         3     000000 constant        structure                level 2 dcl 1-8 ref 79
Graphic_names                   000020 internal static char(12)                 initial array unaligned dcl 36 set ref 82*
Input_device                    000037 internal static char(12)                 initial array unaligned dcl 36 set ref 139*
Line_Types                      000337 internal static char(12)                 initial array dcl 36 set ref 173*
List_char                       002676 constant        char(1)                  initial dcl 1-74 ref 119
Mapping_effectors         5     000000 constant        structure                level 2 dcl 1-8 ref 86
Mode_effectors            7     000000 constant        structure                level 2 dcl 1-8 ref 89
Query_type                      000012 internal static char(8)                  initial array dcl 36 set ref 139*
Special_effectors        11     000000 constant        structure                level 2 dcl 1-8 ref 92
abs                                                    builtin function         dcl 29 ref 238
ch                              000104 automatic       char(1)                  dcl 29 set ref 75* 76 79 86 89 92 95*
charstring                             parameter       char                     unaligned dcl 23 set ref 18 68 75 106 106 107 107
                                                                                  113 113 119 137 137 156 156 161 161 182 182 189
                                                                                  189 191 191 195 195 198 198 200 200 204 204 225
                                                                                  225 234 234 248 248
charstring_array                       based           char(1)                  array unaligned dcl 65 set ref 106 106 107 107 113
                                                                                  113 137 137 156 156 161 161 182 182 189 189 195
                                                                                  195 198 198 204 204 225 225 234 234 248 248
fixed_array                     000120 automatic       fixed bin(17,0)          array dcl 36 set ref 106* 109* 113* 115* 137* 139
                                                                                  139 156* 157* 157* 157* 182* 184* 184* 184* 189*
                                                                                  191 191 192 195* 196 198* 200 200 201 204* 207
float_array                     000110 automatic       float bin(27)            array dcl 36 set ref 107* 109* 161* 162* 162* 162*
                                                                                  162* 162* 162*
graphic_code_util_$decode_dpi   000364 constant        entry                    external dcl 60 ref 106 113 156 189 198 204
graphic_code_util_$decode_scl   000370 constant        entry                    external dcl 60 ref 107 161 234
graphic_code_util_$decode_spi   000362 constant        entry                    external dcl 60 ref 137 182 195 248
graphic_code_util_$decode_uid   000366 constant        entry                    external dcl 60 ref 225
i                               000101 automatic       fixed bin(17,0)          dcl 29 set ref 73* 73* 75 106 106 107 107 108* 108
                                                                                  113 113 114* 114 118* 118 119 137 137 138* 138 156
                                                                                  156 158* 158 161 161 166* 166 182 182 183* 183 189
                                                                                  189 190* 190 191 191 192* 192 195 195 197* 197 198
                                                                                  198 199* 199 200 200 201* 201 204 204 205* 205
                                                                                  207* 207* 225 225 226* 226 234 234 235* 235 248
                                                                                  248 249* 249
index                                                  builtin function         dcl 29 ref 76 79 86 89 92
ioa_                            000360 constant        entry                    external dcl 29 ref 70 82 95 99 102 115 121 122 127
                                                                                  131 134 139 142 145 148 153 157 162 170 173 176
                                                                                  179 184 191 200 206
ioa_$nnl                        000356 constant        entry                    external dcl 29 ref 109
j                               000102 automatic       fixed bin(17,0)          dcl 29 set ref 76* 77 77 79* 80 82 86* 87 87 89* 90
                                                                                  90 92* 93 93
just_ended                      000117 automatic       bit(1)                   dcl 36 set ref 71* 121 128* 211*
k                               000146 automatic       fixed bin(17,0)          dcl 232 set ref 237* 238 238*
len                             000100 automatic       fixed bin(17,0)          dcl 25 set ref 68* 73
length                                                 builtin function         dcl 29 ref 68
node                            000116 automatic       fixed bin(18,0)          dcl 36 set ref 105* 109* 112* 115*
off_on                          000010 internal static char(4)                  initial array dcl 36 set ref 176* 179*
prefix_length                   000103 automatic       fixed bin(17,0)          initial dcl 29 set ref 29* 82* 95* 121* 122* 123*
                                                                                  123 126* 126 127* 131* 153* 157* 162* 162* 162*
                                                                                  170* 173* 176* 179* 184* 191* 200* 206*
spi                             000156 automatic       fixed bin(17,0)          array dcl 246 set ref 248* 250
string                                                 builtin function         dcl 29 ref 76 79 86 89 92
substr                                                 builtin function         dcl 29 ref 75 119 191 191 200 200
temp                            000123 automatic       char(16)                 dcl 36 set ref 119* 120* 121* 122* 196* 200*
uid                             000136 automatic       fixed bin(18,0)          array dcl 223 set ref 225* 227
xyz                             000105 automatic       float bin(27)            array dcl 36 set ref 82* 82* 82* 153* 153* 153* 234*
                                                                                  238 238*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
Array_char                             internal static char(1)                  initial dcl 1-74
Graphic_Defaults                       internal static structure                level 1 dcl 1-47
Graphic_Element_Lengths                internal static fixed bin(17,0)          initial array dcl 1-60
request_for_status                     internal static char(1)                  initial dcl 1-72
zero_node_id                           internal static char(3)                  initial unaligned dcl 1-70

NAMES DECLARED BY EXPLICIT CONTEXT.
Dyn_Struc                       000014 constant        label                    array(12) dcl 99 ref 77
Mapping                         000030 constant        label                    array(3) dcl 152 set ref 87
Mode                            000033 constant        label                    array(5) dcl 170 ref 90
Special                         000040 constant        label                    array(3) dcl 189 set ref 93
get_spi                         002626 constant        entry                    internal dcl 244 ref 170 170 173 176 179
get_uid                         002511 constant        entry                    internal dcl 221 ref 102 102 105 112 115 115 121 121
                                                                                  122 122 131 131 134 134 148 148
get_xyz                         002552 constant        entry                    internal dcl 230 ref 81 152
gr_print_                       000421 constant        entry                    external dcl 18
loopend                         002505 constant        label                    dcl 211 ref 83 96 100 103 110 116 124 132 135 140
                                                                                  143 146 149 154 159 167 171 174 177 180 186 193
                                                                                  202 208
loopend_no_reset                002506 constant        label                    dcl 214 ref 129

NAMES DECLARED BY CONTEXT OR IMPLICATION.
addr                                                   builtin function         ref 106 106 106 106 107 107 107 107 113 113 113 113
                                                                                  137 137 137 137 156 156 156 156 161 161 161 161
                                                                                  182 182 182 182 189 189 189 189 195 195 195 195
                                                                                  198 198 198 198 204 204 204 204 225 225 225 225
                                                                                  234 234 234 234 248 248 248 248
divide                                                 builtin function         ref 207
max                                                    builtin function         ref 126

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      2772        3364    2677        3002
Length      3602    2677       372         202      72         346

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
gr_print_                           270 external procedure  is an external procedure.  
get_uid                                 internal procedure  shares stack frame of external procedure gr_print_.  
get_xyz                                 internal procedure  shares stack frame of external procedure gr_print_.  
get_spi                                 internal procedure  shares stack frame of external procedure gr_print_.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 off_on                      gr_print_
000012 Query_type                  gr_print_
000020 Graphic_names               gr_print_
000037 Input_device                gr_print_
000337 Line_Types                  gr_print_

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
gr_print_                000100 len                         gr_print_
                         000101 i                           gr_print_
                         000102 j                           gr_print_
                         000103 prefix_length               gr_print_
                         000104 ch                          gr_print_
                         000105 xyz                         gr_print_
                         000110 float_array                 gr_print_
                         000116 node                        gr_print_
                         000117 just_ended                  gr_print_
                         000120 fixed_array                 gr_print_
                         000123 temp                        gr_print_
                         000136 uid                         get_uid
                         000146 k                           get_xyz
                         000156 spi                         get_spi

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_cs            call_ext_out_desc   return              shorten_stack       ext_entry_desc

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
graphic_code_util_$decode_dpi graphic_code_util_$decode_scl graphic_code_util_$decode_spi graphic_code_util_$decode_uid
ioa_                          ioa_$nnl

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     18 000416        29 000434        68 000435        70 000436        71 000446        73 000450        75 000455
     76 000463        77 000474        79 000476        80 000507        81 000510        82 000511        83 000552
     86 000553        87 000564        89 000566        90 000577        92 000601        93 000612        95 000614
     96 000643        99 000644       100 000657       102 000660       103 000703       105 000704       106 000706
    107 000737       108 000771       109 000773       110 001023       112 001024       113 001026       114 001057
    115 001061       116 001112       118 001113       119 001114       120 001125       121 001130       122 001165
    123 001217       124 001221       126 001222       127 001230       128 001253       129 001255       131 001256
    132 001307       134 001310       135 001334       137 001335       138 001365       139 001367       140 001423
    142 001424       143 001437       145 001440       146 001455       148 001456       149 001502       152 001503
    153 001504       154 001536       156 001537       157 001567       158 001621       159 001623       161 001624
    162 001654       166 001725       167 001727       170 001730       171 001760       173 001761       174 002014
    176 002015       177 002044       179 002045       180 002077       182 002100       183 002130       184 002132
    186 002164       189 002165       190 002215       191 002217       192 002260       193 002263       195 002264
    196 002314       197 002323       198 002324       199 002355       200 002357       201 002421       202 002424
    204 002425       205 002455       206 002457       207 002500       208 002504       211 002505       214 002506
    217 002510       221 002511       225 002513       226 002544       227 002546       230 002552       234 002553
    235 002604       237 002606       238 002613       239 002623       241 002625       244 002626       248 002630
    249 002661       250 002662


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
