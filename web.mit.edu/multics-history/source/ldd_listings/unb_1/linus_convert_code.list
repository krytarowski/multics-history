	COMPILATION LISTING OF SEGMENT linus_convert_code
	Compiled by: Multics PL/I Compiler, Release 28b, of April 11, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 09/16/83  1745.3 mst Fri
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   *                                                         *
        4*   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        5*   *                                                         *
        6*   *                                                         *
        7*   *********************************************************** */
        8 
        9 /* ******************************************************
       10*   *                                                    *
       11*   *                                                    *
       12*   * Copyright (c) 1972 by Massachusetts Institute of   *
       13*   * Technology and Honeywell Information Systems, Inc. *
       14*   *                                                    *
       15*   *                                                    *
       16*   ****************************************************** */
       17 
       18 linus_convert_code:
       19      proc (sys_code, user_code, caller_id);
       20 
       21 /* DESCRIPTION:
       22*
       23*   This  procedure  translates  certain  error_table_ and mrds_error_ codes to
       24*   more  appropriate  linus_error_ codes which would be more understandable to
       25*   the LINUS user.  
       26*   
       27*   
       28*
       29*   HISTORY:
       30*
       31*   77-03-01 J. A. Weeldreyer: Initially written
       32*   82-10-19 D. J. Schimke: Added linus_error_$update_not_allowed and
       33*	        linus_error_$no_data.
       34*
       35**/
       36 
       37 	dcl     (
       38 	        sys_code,				/* code to be converted */
       39 	        user_code,				/* converted code value */
       40 	        caller_id
       41 	        )			 fixed bin (35);	/* id of caller */
       42 
       43 	dcl     (
       44 	        linus_error_$cant_open,
       45 	        linus_error_$mod_key_col,
       46 	        linus_error_$mult_updt_rows,
       47 	        linus_error_$no_data,
       48 	        linus_error_$upd_temp_tab,
       49 	        linus_error_$update_not_allowed,
       50 	        mrds_error_$mod_key_attr,
       51 	        mrds_error_$multiple_tuples_found,
       52 	        mrds_error_$upd_temp_rel,
       53 	        mrds_error_$update_not_allowed,
       54 	        mrds_error_$tuple_not_found,
       55 	        error_table_$noentry,
       56 	        mrds_error_$non_scope_ready,
       57 	        linus_error_$table_not_ready,
       58 	        linus_data_$o_id
       59 	        )			 ext fixed bin (35);
       60 
       61 	if sys_code = mrds_error_$non_scope_ready then
       62 	     user_code = linus_error_$table_not_ready;
       63 	else if sys_code = error_table_$noentry & caller_id = linus_data_$o_id
       64 	then user_code = linus_error_$cant_open;
       65 	else if sys_code = mrds_error_$mod_key_attr then
       66 	     user_code = linus_error_$mod_key_col;
       67 	else if sys_code = mrds_error_$multiple_tuples_found then
       68 	     user_code = linus_error_$mult_updt_rows;
       69 	else if sys_code = mrds_error_$upd_temp_rel then
       70 	     user_code = linus_error_$upd_temp_tab;
       71 	else if sys_code = mrds_error_$update_not_allowed then
       72 	     user_code = linus_error_$update_not_allowed;
       73 	else if sys_code = mrds_error_$tuple_not_found then 
       74 	     user_code = linus_error_$no_data;
       75 	else user_code = sys_code;
       76 
       77 	return;
       78 
       79      end linus_convert_code;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    09/16/83  1739.3  linus_convert_code.pl1            >spec>on>09/16/83-linus>linus_convert_code.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
caller_id                              parameter       fixed bin(35,0)          dcl 37 ref 18 63
error_table_$noentry            000036 external static fixed bin(35,0)          dcl 43 ref 63
linus_data_$o_id                000044 external static fixed bin(35,0)          dcl 43 ref 63
linus_error_$cant_open          000010 external static fixed bin(35,0)          dcl 43 ref 63
linus_error_$mod_key_col        000012 external static fixed bin(35,0)          dcl 43 ref 65
linus_error_$mult_updt_rows     000014 external static fixed bin(35,0)          dcl 43 ref 67
linus_error_$no_data            000016 external static fixed bin(35,0)          dcl 43 ref 73
linus_error_$table_not_ready    000042 external static fixed bin(35,0)          dcl 43 ref 61
linus_error_$upd_temp_tab       000020 external static fixed bin(35,0)          dcl 43 ref 69
linus_error_$update_not_allowed 000022 external static fixed bin(35,0)          dcl 43 ref 71
mrds_error_$mod_key_attr        000024 external static fixed bin(35,0)          dcl 43 ref 65
mrds_error_$multiple_tuples_found
                                000026 external static fixed bin(35,0)          dcl 43 ref 67
mrds_error_$non_scope_ready     000040 external static fixed bin(35,0)          dcl 43 ref 61
mrds_error_$tuple_not_found     000034 external static fixed bin(35,0)          dcl 43 ref 73
mrds_error_$upd_temp_rel        000030 external static fixed bin(35,0)          dcl 43 ref 69
mrds_error_$update_not_allowed  000032 external static fixed bin(35,0)          dcl 43 ref 71
sys_code                               parameter       fixed bin(35,0)          dcl 37 ref 18 61 63 65 67 69 71 73 75
user_code                              parameter       fixed bin(35,0)          dcl 37 set ref 18 61* 63* 65* 67* 69* 71* 73* 75*

NAME DECLARED BY EXPLICIT CONTEXT.
linus_convert_code              000005 constant        entry                    external dcl 18

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       272         340      65         302
Length       532      65        46         155     204           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
linus_convert_code                   64 external procedure  is an external procedure.  

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
return              ext_entry

NO EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$noentry          linus_data_$o_id              linus_error_$cant_open        linus_error_$mod_key_col
linus_error_$mult_updt_rows   linus_error_$no_data          linus_error_$table_not_ready  linus_error_$upd_temp_tab
linus_error_$update_not_allowed                             mrds_error_$mod_key_attr
mrds_error_$multiple_tuples_found                           mrds_error_$non_scope_ready   mrds_error_$tuple_not_found
mrds_error_$upd_temp_rel      mrds_error_$update_not_allowed




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     18 000001        61 000012        63 000021        65 000031        67 000037        69 000044        71 000051
     73 000056        75 000063        77 000064


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
