ASSEMBLY LISTING OF SEGMENT >spec>install>MR12.2-1209>fort_cg_macros_.alm                                                                                                                           
ASSEMBLED ON:	11/10/88  1339.8 mst Thu
OPTIONS USED:	-target l68                              list symbols 
ASSEMBLED BY:	ALM Version 8.13 September 1988 
ASSEMBLER CREATED:	10/24/88  1635.1 mst Mon

                                     1  
                                     2  " ******************************************************
                                     3  " *                                                    *
                                     4  " * Copyright, (C) Honeywell Limited, 1983             *
                                     5  " *                                                    *
                                     6  " * Copyright (c) 1972 by Massachusetts Institute of   *
                                     7  " * Technology and Honeywell Information Systems, Inc. *
                                     8  " *                                                    *
                                     9  " ******************************************************
                                    10  
                                    11  " HISTORY COMMENTS:
                                    12  "  1) change(86-07-14,BWong), approve(86-07-14,MCR7286),
                                    13  "     audit(86-07-17,Ginter), install(86-07-28,MR12.0-1105):
                                    14  "     Fix fortran bugs 430, 452, and 463.
                                    15  "  2) change(86-07-14,BWong), approve(86-07-14,MCR7442),
                                    16  "     audit(86-07-17,Ginter), install(86-07-28,MR12.0-1105):
                                    17  "     Fix fortran bug 410.
                                    18  "  3) change(88-04-28,RWaters), approve(88-04-28,MCR7875),
                                    19  "     audit(88-07-13,Huen), install(88-11-10,MR12.2-1209):
                                    20  "     Implement SCP 6339:  removed the special case code for constants since
                                    21  "     they can now be up to 128K chars long.
                                    22  "                                                      END HISTORY COMMENTS
                                    23  
                                    24  
                                    25  " Written:	January 1976, by G. D. Chang
                                    26  "
                                    27  " Modified:
                                    28  "         08 Mar 86, SH - 410: Fix bug in cv_bif_to_external where offsets
                                    29  "		into vector for dtan, asin, dasin and acos were out
                                    30  "		of order.
                                    31  "	08 Aug 85, BW - 430: Prevent emission of deallocation code for
                                    32  "		automatic LA's and VLA's when they don't exist in the
                                    33  "		compilation unit.
                                    34  "	02 Aug 85, BW - 463: Removed code to save and restore stack
                                    35  "		extents in 'quick_return' and 'make_quick_entry'.
                                    36  "		This was only done when char star-extent variables
                                    37  "		were concatenated.
                                    38  "         12 May 95, BW - 452: Fix looping problem when a vla array is
                                    39  "		incorrectly used as a format in a write statement.
                                    40  "	22 Jun 84, MM - Install typeless functions support.
                                    41  "	28 Mar 84, MM - Install HFP support.
                                    42  "	12 Sep 83, HH - 388: Insure any logical value in the indicators
                                    43  "		is stored before issuing an 'fneg'.
                                    44  "	17 Jun 83, HH - 383: Replace 'scan_parameter_list' subroutine with
                                    45  "		'prepare_for_namelists' subr and 'process_param_list' proc.
                                    46  "	 7 June 83, TO: 381 - Fix pr0|shorten_stack for registers pr1,x1.
                                    47  "	31 Jan 83, TO & HH - Install LA/VLA support.
                                    48  "	10 January  1982, TO - Add 'emit_entry_defs' call to entries.
                                    49  "	 3 January  1982, TO - Add DO-loop optimization of forcing 'even'
                                    50  "		address of top label of loop.
                                    51  "	17 Dec 82, TO - Add 'emit_profile_entry' simple operator.
                                    52  "         17 Nov 82, HH - 361:  'get_format_var' operator no longer needed.
                                    53  "	27 July 1982, TO - Fix check in relational operators to permit
                                    54  "	     temporary nodes, such as expressions and function returns in
                                    55  "	     relationals with character constants.
                                    56  "	12 May 1982, HH - Add "fixedoverflow" check for multiplies.
                                    57  "	 5 May 1982, TO - Add shorten stack to return from char*(*) function.
                                    58  "	 1 April   1982, TO  - Add intrinsic externals for builtins.
                                    59  "	28 October 1981, CRD - Inquire statement.
                                    60  "	20 October 1981, CRD - Internal files.
                                    61  "	27 August 1981, CRD - More general UNIT field in OPEN/CLOSE stmts.
                                    62  "	21 August 1981, CRD - Blank field in OPEN statement.
                                    63  "	27 July 1981, CRD - Allow format labels in assign_label operator,
                                    64  "		and allow integer scalars in format operator.
                                    65  "	18 June 1981, CRD - Fix unnumbered bug in complex exponentiation.
                                    66  "	10 June 1981, CRD - New polish for backspace/endfile/rewind.
                                    67  "	2 June 1981, CRD - Handle statement functions with 0 arguments.
                                    68  "	12 May 1981, CRD - Add equiv_op, not_equiv_op.
                                    69  "	23 April 1981, CRD - Fix bug 317.
                                    70  "	18 March 1981, CRD - Fix bug 310.
                                    71  "	13 March 1981, CRD - Modifications for assumed size arrays.
                                    72  "	19 February 1981, CRD - Change check_subscript for variable lower
                                    73  "		array bounds.
                                    74  "	9 December 1980, CRD - Fix bug 298.
                                    75  "	8 December 1980, CRD - Implement Fortran 77 block IF statement.
                                    76  "	24 November 1980, CRD - Implement Fortran 77 zero trip DO loops.
                                    77  "	24 November 1980, CRD - Change several I/O routines to issue load_pr
                                    78  "		macros BEFORE loading the A or Q.  This is necessary as
                                    79  "		loading a pointer to a character array element may use the
                                    80  "		A or Q.
                                    81  "	31 October 1980, CRD - Fix bug in div_rc.
                                    82  "	24 October 1980, CRD - Add code for new Fortran 77 intrinsics.
                                    83  "	13 October 1980, CRD - As a result of the change to manage the A, Q,
                                    84  "		and EAQ separately, in_reg and return eaq_name macros no
                                    85  "		longer erase the machine state entirely.  Therefore, it is
                                    86  "		necessary to issue a use_eaq macro before emitting a call
                                    87  "		to one of the type conversion operators.
                                    88  "	10 October 1980, CRD - Fix bug whereby real and dp DO loops  did not
                                    89  "		truncate loop count to integer.
                                    90  "	26 September 1980, CRD - Change make_quick_entry to asert that pr1
                                    91  "		contains the arg list ptr.
                                    92  "	17 September 1980, CRD - Fix bug 278.  The AMAX0, MAX1, AMIN0, and
                                    93  "		MIN1 intrinsics got incorrect code because of improper
                                    94  "		EAQ management.
                                    95  "	22 August 1980, CRD - Fix error handling for open statement.
                                    96  "	13 August 1980, CRD - Add error_macro segdef.
                                    97  "	24 July 1980, CRD - Fix bug in subscript processing which caused
                                    98  "		non-integer subscripts to confuse the machine state.
                                    99  "	16 July 1980, CRD - Key argument list consistency checking off of
                                   100  "		variable_arglist bit, not needs_descriptors bit.
                                   101  "	15 July 1980, CRD - Centralize call-side descriptor checking in
                                   102  "		descriptor_check subroutine.  Change logic so that
                                   103  "		descriptors are automatically generated for calls with
                                   104  "		character mode arguments in ansi77 mode.
                                   105  "	27 June 1980, CRD - Modify I/O routines to allow I/O of character
                                   106  "		strings of variable length.  Put check in func_ref to
                                   107  "		ensure that function is not *-length.
                                   108  "	26 June 1980, CRD - Check data type of parent in substr.
                                   109  "	23 June 1980, CRD - Check ansi77 mode for concatenation.
                                   110  "	14 May 1980, CRD - Fix bug in ICHAR intrinsic.
                                   111  "	7 March 1980, CRD - Implement concatenation.
                                   112  "	1 February 1980, CRD - Fix bug in which subscripts with bad data
                                   113  "		types get no error messages.  Make a similar change for
                                   114  "		substring expressions.
                                   115  "	24 January 1980, CRD - Add code to make_entry, make_quick_entry,
                                   116  "		and make_call to allow for Fortran entries which
                                   117  "		require descriptors.
                                   118  "	14 Dec 1979, CRD - Add use_ind macros to relational operators, and
                                   119  "		change make_entry and make_quick_entry to allow for entries
                                   120  "		that require descriptors.
                                   121  "	1 Nov 1979, CRD - Add mpy to single_inst table, change if_ind and
                                   122  "		unless_ind macros to have eaq_name.
                                   123  "	09 Aug 1979, CRD - Fix bug 221 (dmod implemented incorrectly)
                                   124  "	12 Jul 1979, PES - More forgiving encode/decode statement.  The string
                                   125  "		may now be an array, simple variable, or array element of any type
                                   126  "		but logical.
                                   127  "	09 Jul 1979, CRD - Changes to fix bug 220, in which files do not
                                   128  "		get closed if there is no STOP or CALL EXIT statement in the
                                   129  "		main program.
                                   130  "	17 Nov 1978, RAB - Centralizes rounding decisions in "round" and
                                   131  "		"store" macros.  Precedes many floating compares
                                   132  "		with rounds.
                                   133  "	13 Sep 1978, PES - Changes to fix bug 183, in which fortran sometimes decides that
                                   134  "		external subroutine names passed out as arguments in a call should be
                                   135  "		treated as character strings.
                                   136  "	05 Sep 1978, PES - Changes to fix bug 179, in which real/dp function results are
                                   137  "		rounded before being stored.
                                   138  "	27 Jul 1978, PES - Changes to fix min and max bug. audit changes.
                                   139  "	20 Jun 1978, DSL - Clean up and bug fixes from loop optimizer audit.
                                   140  "		Fix macros for sign builtin functions.
                                   141  "	25 May 1978, DSL - Minor bug fixes in open/close. Fix bug 159 in which
                                   142  "		indicators are not set correctly before calls to "sign" BIFs
                                   143  "		and for aint BIF. Fix bug 156 in which "frd" or "dfrd" is
                                   144  "		required before conversion to integer.
                                   145  "	02 May 1978, DSL - fix bug 153 in which macros contained a
                                   146  "		dfcmp	=0.,du.
                                   147  "	13 Feb 1978, DSL - Fix bug 140 in which "load_pr pr1" destroys the
                                   148  "		addressability of subsequent operands. Also, changed fst to fstr in
                                   149  "		div_ic code. Also converted round_dp_to_real to a function.
                                   150  "	03 Feb 1978, DSL - Emergency fix to negate complex.
                                   151  "	05 Jan 1978, DSL - Implement double precision to complex conversion for
                                   152  "		arithmetic infix oprs and for assignment.
                                   153  "	04 Jan 1978, DSL - Implement rel ops for one char const opnd and one
                                   154  "		arith opnd. Fix bug in func ref (unreported) in which no warning is
                                   155  "		printed if return value is char and may need descriptors.
                                   156  "	27 Dec 1977, DSL - fix bug in cv_bif_to_external (136); use new macros
                                   157  "		pad_char_const_to_(word dw) in assign, fix bug in func_ref (130),
                                   158  "		change macros to truncate on store when appropriate, introduce use
                                   159  "		of new macro, dt_jump1.
                                   160  "	15 Sep 1977, DSL - interim fix to abs bif until load_for_test macro
                                   161  "		is available.
                                   162  "	19 Jul 1977, DSL - fix bugs in open/close.
                                   163  "	14 Jul 1977, DSL - 1) fix sf def for simple references.
                                   164  "		2) change implementation of open/close. 3) fix sf ref for
                                   165  "		logical sf. 4) prevent parameters from reaching make_external_variable.
                                   166  "	26 May 1977, GDC - allow statement functions to take character
                                   167  "		arguments with character data-types.
                                   168  "
    013357                         169  	maclist	object
                                   170  	include		fort_macros
                                   1-1  " BEGIN fort_macros.incl.alm
                                   1-2  "
                                   1-3  " Written: June 1976, R. A. Barnes
                                   1-4  "
                                   1-5  " Modified:
                                   1-6  "	22 June 84, MM - Install typeless functions support.
                                   1-7  "	28 Mar 84, HH - Install HFP support.
                                   1-8  "	10 January   1982, TO - Add 'emit_entry_defs' (simple).
                                   1-9  "	 3 January   1982, TO - Add 'even' pseudo for ext_cg optimization
                                  1-10  "		of DO-loop top label.
                                  1-11  "         29 Nov 82, HH - 361:  Remove 'get_format_var'.
                                  1-12  "	21 September 1982, TO - Add emit_storage_args.
                                  1-13  "	 7 September 1982, TO - Add emit_cleanup_args.
                                  1-14  "	 1 September 1982, TO - Add if/unless_cleanup.
                                  1-15  "	 1 September 1982, TO - Add if/unless_storage_created, if/unless_VLA.
                                  1-16  "	 3 May  1982, TO - Add (if/unless)_char_star_function.
                                  1-17  "	 3 May  1982, TO - Add (if/unless)_check_multiply.
                                  1-18  "	27 July 1981, CRD - Add get_format_var.
                                  1-19  "	2 June 1981, CRD - Add push_sf_arg_count.
                                  1-20  "	24 September 1980, CRD - Change desc_ptr_in_base to be a simple
                                  1-21  "		macro (desc_ptr_in_pr3), and add arg_ptr_in_pr1.
                                  1-22  "	16 July 1980, CRD - Add (if unless)_variable_arglist.
                                  1-23  "	15 July 1980, CRD - Add set_needs_descriptors
                                  1-24  "	23 June 1980, CRD - Add (if unless)_ansi77.
                                  1-25  "	11 June 1980, CRD - add push_operand_count.
                                  1-26  "	17 April 1980, CRD - add set_next_operand.
                                  1-27  "	4 March 1980, CRD - add many new macros for concatenation.
                                  1-28  "	23 February 1980, RAB - add float_power_of_two
                                  1-29  "	7 February 1980, CRD - Add int_to_char1 and char1_to_int.
                                  1-30  "	27 January 1980, RAB -  Add force_ql.
                                  1-31  "	24 January 1980, CRD - Add desc_ptr_in_base.
                                  1-32  "	18 January 1980, CRD - Add free_descriptors.
                                  1-33  "	27 December 1979, RAB - Add refresh_regs_if_next_is_jump and
                                  1-34  "		note_eligible_ind_var_use for register optimizer
                                  1-35  "	30 November 1979, RAB - Add (if unless)_global,
                                  1-36  "		(if unless)_induction_var, (if unless)_fb17,
                                  1-37  "		(if unless)_global_ind_var, assign_index, compare_index,
                                  1-38  "		test_index, increment_index, and decrement_index
                                  1-39  "		macros for the register optimizer.
                                  1-40  "	3 November 1979, RAB - Remove obsolete version 1 macros indirect_scan
                                  1-41  "		and finish_indirect_scan.  Add load_xreg, load_preg, and
                                  1-42  "		refresh_regs macros for the register optimizer.
                                  1-43  "	16 October 1979, CRD - add two new macros, set_inds_valid and
                                  1-44  "		ind_to_a.  set_inds_valid is used to update the
                                  1-45  "		machine state when an instruction has been emitted that
                                  1-46  "		(1) set the indicators, (2) modifies the eaq, and (3)
                                  1-47  "		leaves the indicators valid for some register other than
                                  1-48  "		the one it modifies.  ind_to_a is used to force logical
                                  1-49  "		temporaries from the indicators to the A register without
                                  1-50  "		losing the fact that indicators are valid for the A, as
                                  1-51  "		use_ind does.
                                  1-52  "	15 October 1979, CRD - change if_ind and unless_ind to take an
                                  1-53  "		eaq_name.
                                  1-54  "	25 July 1979, CRD - add tables of opcodes in comments.
                                  1-55  "	25 July 1979, CRD - add many more meta macros.
                                  1-56  "	24 July 1979, CRD - add def_left, def_1op, and def_1op_left meta
                                  1-57  "		macros.  This localizes macro definitions and reduces the
                                  1-58  "		possibility of misdefining a macro instruction.
                                  1-59  "	23 July 1979, CRD - add def_simple_cond, def_1op_cond meta macros.
                                  1-60  "		Use if_bit to compress some if/unless pairs into a single
                                  1-61  "		opcode.
                                  1-62  "	23 July 1979, CRD - add def_simple meta macro, move opcodes of simple
                                  1-63  "		macro instructions to left half.
                                  1-64  "	20 July 1979, CRD - remove obsolete version 1 optimizer macros
                                  1-65  "	18 Nov 1978, RAB - macros to support centralized rounding:
                                  1-66  "		round, set_rounded, store  no_update.
                                  1-67  "	29 March 1978, DSL - Change insert_bits to free_temp (39)
                                  1-68  "	January, February 1978 DSL - Add new macros for version II optimizer.
                                  1-69  "	20 December 1977 DSL - have v1opt and v2opt macros use the same
                                  1-70  "	macro numbers.
                                  1-71  "	1 December 1977, D. S. Levin to add macros for v2 optimizer and
                                  1-72  "	restructure.
                                  1-73  "	1 May 1977, R.A. Barnes to add store macro
                                  1-74  "	April 1976, G. D. Chang  to add the save_state macro.
                                  1-75  
                                  1-76  "	META MACROS USED TO CREATE LANGUAGE MACROS
                                  1-77  "
                                  1-78  "					int_dat_var
                                  1-79  "
                                  1-80  	macro int_dat_var
                              1   1-81  	ife &1,var
                              2   1-82  	zero -1,inhibit+&2
                              3   1-83  	ifend_exit
                              4   1-84  	ifint &1
                              5   1-85  	zero &1,inhibit+&2
                              6   1-86  	ifend_exit
                              7   1-87  	zero 0,&1n+inhibit+&2
                              8   1-88  	&end
                                  1-89  "
                                  1-90  "					array
                                  1-91  "
                                  1-92  	macro array
                              1   1-93  	&(&=&x,1&[	vfd &;,&]18/&i&)
                              2   1-94  	equ &2,&x-1
                              3   1-95  	&end
                                  1-96  "
                                  1-97  "					scan_label
                                  1-98  "
                                  1-99  	macro scan_label
                              1  1-100  	ife &1,next
                              2  1-101  	zero &3,&2
                              3  1-102  	ifend_exit
                              4  1-103  	ife &1,continue
                              5  1-104  	zero &4,&2
                              6  1-105  	ifend_exit
                              7  1-106  	zero &1,&2
                              8  1-107  	&end
                                 1-108  "
                                 1-109  "					if_mac2
                                 1-110  "
                                 1-111  	macro if_mac2
                              1  1-112  	ife &3,op1
                              2  1-113  	zero &4,&1+2048*&2+768+inhibit+&5
                              3  1-114  	ifend
                              4  1-115  	ine &3,op1
                              5  1-116  	zero &4,&1+2048*&2+256*&3+inhibit+&5
                              6  1-117  	ifend
                              7  1-118  	&end
                                 1-119  "
                                 1-120  "					if_mac1
                                 1-121  "
                                 1-122  	macro if_mac1
                              1  1-123  	ife &2,<
                              2  1-124  	if_mac2 &1,0,&3,&4,&5
                              3  1-125  	ifend_exit
                              4  1-126  	ife &2,>
                              5  1-127  	if_mac2 &1,1,&3,&4,&5
                              6  1-128  	ifend_exit
                              7  1-129  	ife &2,=
                              8  1-130  	if_mac2 &1,2,&3,&4,&5
                              9  1-131  	ifend_exit
                             10  1-132  	ife &2,^=
                             11  1-133  	if_mac2 &1,3,&3,&4,&5
                             12  1-134  	ifend_exit
                             13  1-135  	ife &2,<=
                             14  1-136  	if_mac2 &1,4,&3,&4,&5
                             15  1-137  	ifend_exit
                             16  1-138  	ife &2,>=
                             17  1-139  	if_mac2 &1,5,&3,&4,&5
                             18  1-140  	ifend_exit
                             19  1-141  	&end
                                 1-142  "
                                 1-143  "					rest_of_error
                                 1-144  "
                                 1-145  	macro rest_of_error
                              1  1-146  	ife &1,()
                              2  1-147  	ifend_exit
                              3  1-148  	ife &1,ascii
                              4  1-149  	vfd 18/&U,10/&l2,1/1,7/67
                              5  1-150  	use .strings.
                              6  1-151  &U:	aci "&2"
                              7  1-152  	use .text.
                              8  1-153  	rest_of_error &FQ3
                              9  1-154  	ifend_exit
                             10  1-155  	zero 0,&1+inhibit+67
                             11  1-156  	rest_of_error &FQ2
                             12  1-157  	&end
                                 1-158  "
                                 1-159  "					def_simple
                                 1-160  "
                                 1-161  	macro def_simple
                              1  1-162  	macro &1
                              2  1-163  	zero &2,inhibit+6
                              3  1-164  	&&end
                              4  1-165  	&end
                                 1-166  "
                                 1-167  "					def_simple_cond
                                 1-168  "
                                 1-169  	macro def_simple_cond
                              1  1-170  	macro if_&1
                              2  1-171  	zero &&1,if_bit+inhibit+&2
                              3  1-172  	&&end
                              4  1-173  	macro unless_&1
                              5  1-174  	zero &&1,inhibit+&2
                              6  1-175  	&&end
                              7  1-176  	&end
                                 1-177  "
                                 1-178  "					def_1op_cond
                                 1-179  "
                                 1-180  	macro def_1op_cond
                              1  1-181  	macro if_&1
                              2  1-182  	zero &&2,&&1+if_bit+inhibit+&2
                              3  1-183  	&&end
                              4  1-184  	macro unless_&1
                              5  1-185  	zero &&2,&&1+inhibit+&2
                              6  1-186  	&&end
                              7  1-187  	&end
                                 1-188  "
                                 1-189  "					def_1op
                                 1-190  "
                                 1-191  	macro def_1op
                              1  1-192  	macro &1
                              2  1-193  	zero 0,&&1+inhibit+&2
                              3  1-194  	&&end
                              4  1-195  	&end
                                 1-196  "
                                 1-197  "					def_left
                                 1-198  "
                                 1-199  	macro def_left
                              1  1-200  	macro &1
                              2  1-201  	zero &&1,inhibit+&2
                              3  1-202  	&&end
                              4  1-203  	&end
                                 1-204  "
                                 1-205  "					def_leftn
                                 1-206  "
                                 1-207  	macro def_leftn
                              1  1-208  	macro &1
                              2  1-209  	zero &&1n,inhibit+&2
                              3  1-210  	&&end
                              4  1-211  	&end
                                 1-212  "
                                 1-213  "					def_1op_left
                                 1-214  "
                                 1-215  	macro def_1op_left
                              1  1-216  	macro &1
                              2  1-217  	zero &&2,&&1+inhibit+&2
                              3  1-218  	&&end
                              4  1-219  	&end
                                 1-220  "
                                 1-221  "					def_1op_left_flag
                                 1-222  "
                                 1-223  	macro def_1op_left_flag
                              1  1-224  	macro &1
                              2  1-225  	ife &&3,()
                              3  1-226  	zero &&2,&&1+inhibit+&2
                              4  1-227  	ifend_exit
                              5  1-228  	zero &&2,&&1+&&3+inhibit+&2
                              6  1-229  	&&end
                              7  1-230  	&end
                                 1-231  "
                                 1-232  "					def_int_dat_var
                                 1-233  "
                                 1-234  	macro def_int_dat_var
                              1  1-235  	macro &1
                              2  1-236  	int_dat_var &&1,&2
                              3  1-237  	&&end
                              4  1-238  	&end
                                 1-239  "
                                 1-240  "					def_type_cond
                                 1-241  "
                                 1-242  	macro def_type_cond
                              1  1-243  	macro &1
                              2  1-244  	zero &&2,&&(1&&i+&&)inhibit+&2
                              3  1-245  	&&end
                              4  1-246  	&end
                                 1-247  "
                                 1-248  "					def_2op_left
                                 1-249  "
                                 1-250  	macro def_2op_left
                              1  1-251  	macro &1
                              2  1-252  	zero &&3,&&2+&&1+inhibit+&2
                              3  1-253  	&&end
                              4  1-254  	&end
                                 1-255  "
                                 1-256  "					def_array1
                                 1-257  "
                                 1-258  	macro def_array1
                              1  1-259  	macro &1
                              2  1-260  	zero &&U,inhibit+&2
                              3  1-261  	array (&&1),&&U
                              4  1-262  	&&end
                              5  1-263  	&end
                                 1-264  "
                                 1-265  "					def_array2
                                 1-266  "
                                 1-267  	macro def_array2
                              1  1-268  	macro &1
                              2  1-269  	zero &&U,&&1+inhibit+&2
                              3  1-270  	array (&&2),&&U
                              4  1-271  	&&end
                              5  1-272  	&end
                                 1-273  "
                                 1-274  "					def_2op
                                 1-275  "
                                 1-276  	macro def_2op
                              1  1-277  	macro &1
                              2  1-278  	zero 0,&&1+&&2+inhibit+&2
                              3  1-279  	&&end
                              4  1-280  	&end
                                 1-281  "
                                 1-282  "					def_1op_optleft
                                 1-283  "
                                 1-284  	macro def_1op_optleft
                              1  1-285  	macro &1
                              2  1-286  	ine &&2,()
                              3  1-287  	zero &&2,&&1+inhibit+&2
                              4  1-288  	ifend_exit
                              5  1-289  	zero 0,&&1+inhibit+&2
                              6  1-290  	&&end
                              7  1-291  	&end
                                 1-292  "
                                 1-293  "					def_1op_flag
                                 1-294  "
                                 1-295  	macro def_1op_flag
                              1  1-296  	macro &1
                              2  1-297  	ife &&1,()
                              3  1-298  	zero 0,inhibit+&2
                              4  1-299  	ifend_exit
                              5  1-300  	zero 1,&&1+inhibit+&2
                              6  1-301  	&&end
                              7  1-302  	&end
                                 1-303  "
                                 1-304  "					def_general_cond
                                 1-305  "
                                 1-306  	macro def_general_cond
                              1  1-307  	macro &1
                              2  1-308  	if_mac1 &&1,&&2,&&3,&&4,&2
                              3  1-309  	&&end
                              4  1-310  	&end
                                 1-311  "
                                 1-312  "					def_1op_name
                                 1-313  "
                                 1-314  	macro def_1op_name
                              1  1-315  	macro &1
                              2  1-316  	zero 0,&&1n+inhibit+&2
                              3  1-317  	&&end
                              4  1-318  	&end
                                 1-319  "
                                 1-320  "					def_2op_name
                                 1-321  "
                                 1-322  	macro def_2op_name
                              1  1-323  	macro &1
                              2  1-324  	zero &&1n,&&2+inhibit+&2
                              3  1-325  	&&end
                              4  1-326  	&end
                                 1-327  
                                 1-328  "	TABLE OF OPCODE ASSIGNMENTS
                                 1-329  "
                                 1-330  "	NOTE: If you change any of these opcode assignments, be sure to
                                 1-331  "	change BOTH ext_code_generator and fort_optimizing_cg!!!
                                 1-332  "
                                 1-333  "
                                 1-334  "	1	copy
                                 1-335  "	2	swap
                                 1-336  "	3	pop
                                 1-337  "	4	push_temp
                                 1-338  "	5	push_variable
                                 1-339  "	6	used for extended opcode dispatch
                                 1-340  "	7	emit_eis
                                 1-341  "	8	push_constant
                                 1-342  "	9	convert_constant
                                 1-343  "	10	push_count_indexed
                                 1-344  "	11	push_builtin
                                 1-345  "	12	proc
                                 1-346  "	13	func
                                 1-347  "	14	call
                                 1-348  "	15	return
                                 1-349  "	16	jump
                                 1-350  "	17	scan
                                 1-351  "	18	exit
                                 1-352  "	19	s_call
                                 1-353  "	20	set_inds_valid
                                 1-354  "	21	if_dt
                                 1-355  "	22	unless_dt
                                 1-356  "	23	if_optype
                                 1-357  "	24	unless_optype
                                 1-358  "	25	(if unless)_array
                                 1-359  "	26	(if unless)_aligned
                                 1-360  "	27	if_eaq
                                 1-361  "	28	unless_eaq
                                 1-362  "	29	dt_jump
                                 1-363  "	30	ind_jump
                                 1-364  "	31	if
                                 1-365  "	32	unless
                                 1-366  "	33	jump_indexed
                                 1-367  "	34	emit, emit_data, emit_inst
                                 1-368  "	35	label
                                 1-369  "	36	rel_con
                                 1-370  "	37	set_rel_constant
                                 1-371  "	38	add_to_address
                                 1-372  "	39	free_temp
                                 1-373  "	40	reserve_regs
                                 1-374  "	41	load_pr
                                 1-375  "	42	use_a
                                 1-376  "	43	use_q
                                 1-377  "	44	make_addressable
                                 1-378  "	45	use_eaq
                                 1-379  "	46	load
                                 1-380  "	47	load_top
                                 1-381  "	48	in_reg
                                 1-382  "	49	refresh_regs
                                 1-383  "	50	push_sf_arg_count
                                 1-384  "	51	increment
                                 1-385  "	52	decrement
                                 1-386  "	53	multiply
                                 1-387  "	54	push_count
                                 1-388  "	55	push_bif_index
                                 1-389  "	56	(if unless)_saving_stack_extent
                                 1-390  "	57	start_cat
                                 1-391  "	58	shorten_stack
                                 1-392  "	59	set_next_operand
                                 1-393  "	60	(if unless)_ansi77
                                 1-394  "	61	s_func_label
                                 1-395  "	62	push_s_func_label
                                 1-396  "	63	push_s_func_var
                                 1-397  "	64	push_array_size
                                 1-398  "	65	print
                                 1-399  "	66	error
                                 1-400  "	67	used by rest_of_error
                                 1-401  "	68	push_length
                                 1-402  "	69	(if unless)_variable_arglist
                                 1-403  "	70	used by call
                                 1-404  "	71	used by make_addressable
                                 1-405  "	72	if_ind
                                 1-406  "	73	unless_ind
                                 1-407  "	74	(if unless)_char_star_function
                                 1-408  "	75	(if unless)_check_multiply
                                 1-409  "	76	make_io_desc
                                 1-410  "	77	(if unless)_one_word_dt
                                 1-411  "	78	assign_entry
                                 1-412  "	79	(if unless)_storage_created
                                 1-413  "	80	push_char_temp
                                 1-414  "	81	(if unless)_parameter
                                 1-415  "	82	(if unless)_global
                                 1-416  "	83	(if unless)_induction_var
                                 1-417  "	84	(if unless)_fb17
                                 1-418  "	85	(if unless)_negative
                                 1-419  "	86	(if unless)_global_ind_var
                                 1-420  "	87	(if unless)_local
                                 1-421  "	88	(if unless)_VLA
                                 1-422  "	89	(if unless)_main
                                 1-423  "	90	(if unless)_cleanup
                                 1-424  "	91	(if unless)_constant_addrs
                                 1-425  "	92	(if unless)_hfp
                                 1-426  "	93	get_quick_label
                                 1-427  "	94	UNUSED
                                 1-428  "	95	(if unless)_needs_descriptors
                                 1-429  "	96	UNUSED
                                 1-430  "	97	UNUSED
                                 1-431  "	98	UNUSED
                                 1-432  "	99	(if unless)_namelist_used
                                 1-433  "	100	UNUSED
                                 1-434  "	101	if_next_statement
                                 1-435  "	102	unless_next_statement
                                 1-436  "	103	UNUSED
                                 1-437  "	104	push_operand
                                 1-438  "	105	compare
                                 1-439  "	106	UNUSED
                                 1-440  "	107	UNUSED
                                 1-441  "	108	round
                                 1-442  "	109	flush_ref
                                 1-443  "	110	save_state
                                 1-444  "	111	store
                                 1-445  "	112	load_pr_value
                                 1-446  "	113	load_for_test
                                 1-447  "	114	set_in_storage
                                 1-448  "	115	bump
                                 1-449  "	116	drop
                                 1-450  "	117	UNUSED
                                 1-451  "	118	(if unless)_zero
                                 1-452  "	119	UNUSED
                                 1-453  "	120	UNUSED
                                 1-454  "	121	push_ref_count
                                 1-455  "	122	UNUSED
                                 1-456  "	123	float_power_of_fpbase
                                 1-457  "	124	dt_jump1
                                 1-458  "	125	pad_char_const_to_word
                                 1-459  "	126	pad_char_const_to_dw
                                 1-460  "	127	power_of_two
                                 1-461  
                                 1-462  "	LANGUAGE MACROS
                                 1-463  "
                                 1-464  "
                                 1-465  	def_1op copy,1			" copy opname
                                 1-466  	def_1op swap,2			" swap opname
                                 1-467  	def_1op pop,3			" pop opname
                                 1-468  	def_int_dat_var push_temp,4		" push_temp {int|dt_name|var}
                                 1-469  	def_1op_name push_variable,5		" push_variable dt_name <NON-OPT ONLY>
                                 1-470  	def_left emit_eis,7			" emit_eis [equal_lengths]
                                 1-471  	def_int_dat_var push_constant,8	" push_constant {int|dt_name|var}
                                 1-472  	def_1op_name convert_constant,9	" convert_constant dt_name
                                 1-473  	def_array2 push_count_indexed,10	" push_count_indexed opname,(count,...)
                                 1-474  	def_left push_builtin,11		" push_builtin builtin_name
                                 1-475  
                                 1-476  	macro proc			" proc {int|var} [,error_lbl]
                              1  1-477  	vfd 18/&2,10/&1,1/1,7/12
                              2  1-478  	&end
                                 1-479  
                                 1-480  	macro func			" func {int|var} [,error_lbl]
                              1  1-481  	vfd 18/&2,10/&1,1/1,7/13
                              2  1-482  	&end
                                 1-483  
                                 1-484  	macro call			" call lbl,[error_lbl]
                              1  1-485  	ife &2,()
                              2  1-486  	zero &1,inhibit+14
                              3  1-487  	ifend_exit
                              4  1-488  	zero &1,inhibit+70
                              5  1-489  	zero &2
                              6  1-490  	&end
                                 1-491  
                                 1-492  	def_1op_flag return,15		" return [eaq_name|opname]
                                 1-493  	def_left jump,16			" jump lbl
                                 1-494  
                                 1-495  	macro scan			" scan err_lbl,(exit_lbl...)
                              1  1-496  &u:
                              2  1-497  	ife &1,continue
                              3  1-498  	zero *,inhibit+17
                              4  1-499  	ifend
                              5  1-500  	ine &1,continue
                              6  1-501  	scan_label &1,inhibit+17,&U,&p
                              7  1-502  	ifend
                              8  1-503  	&(2	scan_label &i,inhibit+16,&U,&p
                              9  1-504  	&)
                             10  1-505  &U:
                             11  1-506  	&end
                                 1-507  
                                 1-508  	def_left exit,18			" exit integer <NON-OPT ONLY>
                                 1-509  	def_left s_call,19			" s_call lbl
                                 1-510  	def_1op set_inds_valid,20		" set_inds_valid eaq_name
                                 1-511  	def_type_cond if_dt,21		" if_dt (dt_name...),lbl
                                 1-512  	def_type_cond unless_dt,22		" unless_dt (dt_name...),lbl
                                 1-513  	def_type_cond if_optype,23		" if_optype (dt_name...),lbl
                                 1-514  	def_type_cond unless_optype,24	" unless_optype (dt_name...),lbl
                                 1-515  	def_simple_cond array,25		" (if unless)_array lbl
                                 1-516  	def_1op_cond aligned,26		" (if unless)_aligned opname,lbl
                                 1-517  	def_2op_left if_eaq,27		" if_eaq eaq_name,opname,lbl
                                 1-518  	def_2op_left unless_eaq,28		" unless_eaq eaq_name,opname,lbl
                                 1-519  	def_array1 dt_jump,29		" dt_jump (lbl,...)
                                 1-520  	def_array1 ind_jump,30		" ind_jump (lbl,...)
                                 1-521  	def_general_cond if,31		" if opname,relop,opname,lbl
                                 1-522  	def_general_cond unless,32		" unless opname,relop,opname,lbl
                                 1-523  	def_array2 jump_indexed,33		" jump_indexed opname,(lbl,...)
                                 1-524  	def_left emit,34			" emit integer
                                 1-525  	def_left emit_data,34		" emit_data integer
                                 1-526  
                                 1-527  	macro emit_inst			" emit_inst integer
                              1  1-528  	zero &1,inst_word+inhibit+34
                              2  1-529  	&end
                                 1-530  
                                 1-531  	def_1op label,35			" label opname
                                 1-532  	def_1op rel_con,36			" rel_con opname
                                 1-533  	def_1op set_rel_constant,37		" set_rel_constant opname
                                 1-534  	def_1op_flag add_to_address,38	" add_to_address [opname]
                                 1-535  	def_1op free_temp,39		" free_temp opname
                                 1-536  
                                 1-537  	macro reserve_regs			" reserve_regs (xpr_name,...)
                              1  1-538  	&(&=&x,1&[zero &;+&]&i&),inhibit+40
                              2  1-539  	&end
                                 1-540  
                                 1-541  	def_2op_name load_pr,41		" load_pr pr_name,opname
                                 1-542  	def_left use_a,42			" use_a [protect_indicators] <OPT ONLY>
                                 1-543  	def_left use_q,43			" use_q [protect_indicators] <OPT ONLY>
                                 1-544  
                                 1-545  	macro make_addressable		" make_addressable opname[,opname]
                              1  1-546  	ife &2,()
                              2  1-547  	zero 0,&1+inhibit+44
                              3  1-548  	ifend_exit
                              4  1-549  	zero &2,&1+inhibit+71
                              5  1-550  	&end
                                 1-551  
                                 1-552  	def_left use_eaq,45			" use_eaq [protect_indicators]
                                 1-553  	def_2op load,46			" load eaq_name,opname
                                 1-554  	def_1op_optleft load_top,47		" load_top eaq_name[,lbl]
                                 1-555  	def_2op in_reg,48			" in_reg eaq_name,opname
                                 1-556  	def_left refresh_regs,49		" refresh_regs [protect_indicators] <OPT ONLY>
                                 1-557  	def_1op push_sf_arg_count,50		" push_sf_arg_count opname <NON-OPT ONLY>
                                 1-558  	def_1op_left increment,51		" increment opname,int
                                 1-559  	def_1op_left decrement,52		" decrement opname,int
                                 1-560  	def_1op_left multiply,53		" multiply opname,int
                                 1-561  	def_left push_count,54		" push_count integer
                                 1-562  	def_1op push_bif_index,55		" push_bif_index opname
                                 1-563  	def_simple_cond saving_stack_extent,56	" (if unless)_saving_stack_extent lbl
                                 1-564  	def_left start_cat,57		" start_cat lbl
                                 1-565  	def_left shorten_stack,58		" shorten_stack [protect_indicators]
                                 1-566  	def_left set_next_operand,59		" set_next_operand opno <OPT ONLY>
                                 1-567  	def_simple_cond ansi77,60		" (if unless)_ansi77 lbl
                                 1-568  	def_1op s_func_label,61		" s_func_label opname <NON-OPT ONLY>
                                 1-569  	def_1op push_s_func_label,62		" push_s_func_label opname <NON-OPT ONLY>
                                 1-570  	def_1op_left push_s_func_var,63	" push_s_func_var opname,lbl <NON-OPT ONLY>
                                 1-571  	def_1op push_array_size,64		" push_array_size opname
                                 1-572  
                                 1-573  	macro print			" print errno,opname,...
                              1  1-574  &u:	vfd 18/&1,10/&U,1/1,7/65
                              2  1-575  	rest_of_error &FQ2
                              3  1-576  	equ &U,*-&p-1
                              4  1-577  	&end
                                 1-578  
                                 1-579  	macro error			" error errno,opname,...
                              1  1-580  	ine &1,()
                              2  1-581  &u:	vfd 18/&1,10/&U,1/1,7/66
                              3  1-582  	rest_of_error &FQ2
                              4  1-583  	equ &U,*-&p-1
                              5  1-584  	ifend_exit
                              6  1-585  	zero 0,inhibit+66
                              7  1-586  	&end
                                 1-587  
                                 1-588  	def_1op push_length,68		" push_length opname
                                 1-589  	def_1op_cond variable_arglist,69	" (if unless)_variable_arglist opname,lbl
                                 1-590  	def_1op_left if_ind,72		" if_ind eaq_name,lbl
                                 1-591  	def_1op_left unless_ind,73		" unless_ind eaq_name,lbl
                                 1-592   	def_simple_cond char_star_function,74	" (if unless)_char_star_function
                                 1-593  	def_simple_cond check_multiply,75	" (if unless)_check_multiply
                                 1-594  	def_left make_io_desc,76		" make_io_desc bits
                                 1-595  	def_1op_cond one_word_dt,77		" (if unless)_one_word_dt,lbl
                                 1-596  	def_1op assign_entry,78		" assign_entry opname
                                 1-597  	def_simple_cond storage_created,79	" (if unless)_storage_created lbl
                                 1-598  	def_int_dat_var push_char_temp,80	" push_char_temp {int|dt_name|var}
                                 1-599  	def_1op_cond parameter,81		" (if unless)_parameter opname,lbl
                                 1-600  	def_1op_cond global,82		" (if unless)_global opname,lbl <OPT ONLY>
                                 1-601  	def_1op_cond induction_var,83		" (if unless)_induction_var opname,lbl <OPT ONLY>
                                 1-602  	def_1op_cond fb17,84		" (if unless)_fb17 opname,lbl <OPT ONLY>
                                 1-603  	def_1op_cond negative,85		" (if unless)_negative opname,lbl
                                 1-604  	def_1op_cond global_ind_var,86	" (if unless)_global_ind_var opname,lbl <OPT ONLY>
                                 1-605  	def_1op_cond local,87		" (if unless)_local opname,lbl
                                 1-606  	def_1op_cond VLA,88			" (if unless)_VLA opname,lbl
                                 1-607  	def_simple_cond main,89		" (if unless)_main lbl
                                 1-608  	def_simple_cond cleanup,90		" (if unless)_cleanup lbl
                                 1-609  	def_simple_cond constant_addrs,91	" (if unless)_constant_addrs lbl
                                 1-610  	def_simple_cond hfp,92		" (if unless)_hfp lbl
                                 1-611  	def_1op get_quick_label,93		" get_quick_label opname
                                 1-612  	def_1op_cond needs_descriptors,95	" (if unless)_needs_descriptors opname,lbl
                                 1-613  	def_simple_cond namelist_used,99	" (if unless)_namelist_used lbl
                                 1-614  	def_1op_left if_next_statement,101	" if_next_statement opname,lbl <OPT ONLY>
                                 1-615  	def_1op_left unless_next_statement,102	" unless_next_statement opname,lbl <OPT ONLY>
                                 1-616  	def_left push_operand,104		" push_operand lbl
                                 1-617  	def_2op compare,105			" compare eaq_name,opname
                                 1-618  	def_1op round,108			" round eaq_name
                                 1-619  	def_1op flush_ref,109		" flush_ref opname
                                 1-620  	def_1op_optleft save_state,110	" save_state opname[,discard] <OPT ONLY>
                                 1-621  
                                 1-622  	macro store			" store eaq_name,opname[,??]
                              1  1-623  	zero &=&3,no_update&[1&;0&],&1+&2+inhibit+111
                              2  1-624  	&end
                                 1-625  
                                 1-626  	def_2op_name load_pr_value,112	" load_pr_value eaq_name,opname
                                 1-627  	def_2op load_for_test,113		" load_for_test eaq_name,opname
                                 1-628  	def_1op set_in_storage,114		" set_in_storage opname
                                 1-629  
                                 1-630  	macro bump			" bump opname[,integer] <OPT ONLY>
                              1  1-631  	zero &=&2,&[1&;&2&],&1+inhibit+115
                              2  1-632  	&end
                                 1-633  
                                 1-634  	macro drop			" drop opname[,integer] <OPT ONLY>
                              1  1-635  	zero &=&2,&[1&;&2&],&1+inhibit+116
                              2  1-636  	&end
                                 1-637  
                                 1-638  	def_1op_cond zero,118		" (if unless)_zero opname,lbl
                                 1-639  	def_1op push_ref_count,121		" push_ref_count opname <OPT ONLY>
                                 1-640  	def_1op_left_flag float_power_of_fpbase,123
                                 1-641  	def_array2 dt_jump1,124		" dt_jump1 opname,(lbl,...)
                                 1-642  	def_1op pad_char_const_to_word,125	" pad_char_const_to_word opname
                                 1-643  	def_1op pad_char_const_to_dw,126	" pad_char_const_to_dw opname
                                 1-644  	def_1op_left power_of_two,127		" power_of_two opname,lbl <OPT ONLY>
                                 1-645  "
                                 1-646  "
                                 1-647  "	Macro numbers cannot exceed 127.
                                 1-648  
                                 1-649  "	TABLE OF SIMPLE OPCODES
                                 1-650  "
                                 1-651  "	NOTE: If you add to or change any of these opcode assignments, be
                                 1-652  "	sure to change BOTH ext_code_generator and fort_optimizing_cg!!!
                                 1-653  "
                                 1-654  "
                                 1-655  "	1	push_label
                                 1-656  "	2	push_rel_constant
                                 1-657  "	3	s_return
                                 1-658  "	4	free_regs
                                 1-659  "	5	reset_regs
                                 1-660  "	6	reset_eaq
                                 1-661  "	7	use_ind
                                 1-662  "	8	start_subscript
                                 1-663  "	9	next_subscript
                                 1-664  "	10	finish_subscript
                                 1-665  "	11	subscript_error
                                 1-666  "	12	s_func_finish
                                 1-667  "	13	end_unit
                                 1-668  "	14	stat
                                 1-669  "	15	check_parameters
                                 1-670  "	16	check_arg_list
                                 1-671  "	17	store_arg_addrs
                                 1-672  "	18	gen_itp_list
                                 1-673  "	19	make_descriptors
                                 1-674  "	20	set_runtime_block_loc
                                 1-675  "	21	optimized_subscript
                                 1-676  "	22	sub_index
                                 1-677  "	23	discard_state
                                 1-678  "	24	push_output
                                 1-679  "	25	bump_args
                                 1-680  "	26	drop_args
                                 1-681  "	27	push_operand_count
                                 1-682  "	28	skip_data
                                 1-683  "	29	set_rounded
                                 1-684  "	30	load_xreg
                                 1-685  "	31	load_preg
                                 1-686  "	32	drop_all_counts
                                 1-687  "	33	ind_to_a
                                 1-688  "	34	assign_index
                                 1-689  "	35	compare_index
                                 1-690  "	36	test_index
                                 1-691  "	37	increment_index
                                 1-692  "	38	decrement_index
                                 1-693  "	39	make_substring
                                 1-694  "	40	refresh_regs_if_next_is_jump
                                 1-695  "	41	note_eligible_ind_var_use
                                 1-696  "	42	free_descriptors
                                 1-697  "	43	force_ql
                                 1-698  "	44	int_to_char1
                                 1-699  "	45	char1_to_int
                                 1-700  "	46	continue_cat
                                 1-701  "	47	finish_cat
                                 1-702  "	48	set_needs_descriptors
                                 1-703  "	49	desc_ptr_in_pr3
                                 1-704  "	50	arg_ptr_in_pr1
                                 1-705  "	52	emit_cleanup_args
                                 1-706  "	53	emit_storage_args
                                 1-707  "	54	emit_profile_entry
                                 1-708  "	55	force_even
                                 1-709  "	56	emit_entry_defs
                                 1-710  "	57	rhs_fld
                                 1-711  "	58	lhs_fld
                                 1-712  
                                 1-713  "	SIMPLE LANGUAGE MACROS
                                 1-714  "
                                 1-715  	def_simple push_label,1
                                 1-716  	def_simple push_rel_constant,2
                                 1-717  	def_simple s_return,3
                                 1-718  	def_simple free_regs,4
                                 1-719  	def_simple reset_regs,5		" <NON-OPT ONLY>
                                 1-720  	def_simple reset_eaq,6
                                 1-721  	def_simple use_ind,7
                                 1-722  	def_simple start_subscript,8		" <NON-OPT ONLY>
                                 1-723  	def_simple next_subscript,9		" <NON-OPT ONLY>
                                 1-724  	def_simple finish_subscript,10	" <NON-OPT ONLY>
                                 1-725  	def_simple subscript_error,11		" <NON-OPT ONLY>
                                 1-726  	def_simple s_func_finish,12		" <NON-OPT ONLY>
                                 1-727  	def_simple end_unit,13
                                 1-728  	def_simple stat,14
                                 1-729  	def_simple check_parameters,15
                                 1-730  	def_simple check_arg_list,16
                                 1-731  	def_simple store_arg_addrs,17
                                 1-732  	def_simple gen_itp_list,18
                                 1-733  	def_simple make_descriptors,19
                                 1-734  	def_simple set_runtime_block_loc,20
                                 1-735  	def_simple optimized_subscript,21	" <OPT ONLY>
                                 1-736  	def_simple sub_index,22		" <OPT ONLY>
                                 1-737  	def_simple discard_state,23		" <OPT ONLY>
                                 1-738  	def_simple push_output,24		" <OPT ONLY>
                                 1-739  	def_simple bump_args,25		" <OPT ONLY>
                                 1-740  	def_simple drop_args,26		" <OPT ONLY>
                                 1-741  	def_simple push_operand_count,27	" <OPT ONLY>
                                 1-742  	def_simple skip_data,28		" <NON-OPT ONLY>
                                 1-743  	def_simple set_rounded,29		" <OPT ONLY>
                                 1-744  	def_simple load_xreg,30		" <OPT ONLY>
                                 1-745  	def_simple load_preg,31		" <OPT ONLY>
                                 1-746  	def_simple drop_all_counts,32		" <OPT ONLY>
                                 1-747  	def_simple ind_to_a,33		" <OPT ONLY>
                                 1-748  	def_simple assign_index,34		" <OPT ONLY>
                                 1-749  	def_simple compare_index,35		" <OPT ONLY>
                                 1-750  	def_simple test_index,36		" <OPT ONLY>
                                 1-751  	def_simple increment_index,37		" <OPT ONLY>
                                 1-752  	def_simple decrement_index,38		" <OPT ONLY>
                                 1-753  	def_simple make_substring,39		" <NON-OPT ONLY>
                                 1-754  	def_simple refresh_regs_if_next_is_jump,40 " <OPT ONLY>
                                 1-755  	def_simple note_eligible_ind_var_use,41	" <OPT ONLY>
                                 1-756  	def_simple free_descriptors,42
                                 1-757  	def_simple force_ql,43		" <OPT ONLY>
                                 1-758  	def_simple int_to_char1,44
                                 1-759  	def_simple char1_to_int,45
                                 1-760  	def_simple continue_cat,46
                                 1-761  	def_simple finish_cat,47
                                 1-762  	def_simple set_needs_descriptors,48
                                 1-763  	def_simple desc_ptr_in_pr3,49
                                 1-764  	def_simple arg_ptr_in_pr1,50
                                 1-765  	def_simple emit_cleanup_args,52
                                 1-766  	def_simple emit_storage_args,53
                                 1-767  	def_simple emit_profile_entry,54
                                 1-768  	def_simple force_even,55
                                 1-769  	def_simple emit_entry_defs,56
                                 1-770  	def_simple rhs_fld,57
                                 1-771  	def_simple lhs_fld,58
                                 1-772  "
                                 1-773  " END   fort_macros.incl.alm
                                   171  	include		fort_equs
                                   2-1  " BEGIN fort_equs.incl.alm
                                   2-2  "
                                   2-3  " Written: June 1976, R. A. Barnes
                                   2-4  "
                                   2-5  " Modified:
                                   2-6  "	22 June 84, MM - Install typeless functions support.
                                   2-7  "	28 Mar 84, HH - Install HFP support.
                                   2-8  "	 8 November 1982,  TO - pl1_operators_ special addition 'VLA_words_per_seg'.
                                   2-9  "	21 September 1982, TO - pl1_operators_ addition 'fort_storage'.
                                  2-10  "	 1 September 1982, TO - pl1_operators_ additions 'fort_return_mac',
                                  2-11  "		'fort_cleanup'.
                                  2-12  "	12 May 1982, HH - Add mpy_overflow_check.
                                  2-13  "	 5 May 1982, TO - Add shorten_stack.
                                  2-14  "	24 October 1980, CRD - add symbols for new operators needed by
                                  2-15  "		Fortran 77 intrinsics.
                                  2-16  "	24 September 1980, CRD - change order of base registers in making pr1
                                  2-17  "		part of the register pool.
                                  2-18  "	4 March 1980, CRD - add equal_lengths (for emit_eis macro).
                                  2-19  "	23 February 1980 RAB - add almost_ones and for_divide
                                  2-20  "	14 December 1979, CRD - add ext_entry_desc operator offset.
                                  2-21  "	30 November 1979, RAB - add j_le_s, j_g_s indicator substates for
                                  2-22  "		register optimizer.  Also, change xq substate to ia, and
                                  2-23  "		add some comments.
                                  2-24  "	9 August 1979, CRD - add new operator fort_dmod.
                                  2-25  "	23 July 1979, CRD - add if_bit for def_simple_cond, etc. macros
                                  2-26  "	9 July 1979 CRD - add new operator fortran_end.
                                  2-27  "	4 April 1976 DSL - add new bifs tan, dtan, asin, dasin, acos, dacos.
                                  2-28  "
                        040000    2-29  	equ	opf,16384		operand factor
                        040000    2-30  	equ	arg1,1*opf
                        100000    2-31  	equ	arg2,2*opf
                        140000    2-32  	equ	arg3,3*opf
                        200000    2-33  	equ	arg4,4*opf
                        240000    2-34  	equ	arg5,5*opf
                        300000    2-35  	equ	arg6,6*opf
                        340000    2-36  	equ	arg7,7*opf
                                  2-37  "
                        000000    2-38  	equ	opv,0*opf
                                  2-39  "
                 777777 740000    2-40  	equ	op1,-1*opf
                 777777 700000    2-41  	equ	op2,-2*opf
                 777777 640000    2-42  	equ	op3,-3*opf
                 777777 600000    2-43  	equ	op4,-4*opf
                 777777 540000    2-44  	equ	op5,-5*opf
                 777777 500000    2-45  	equ	op6,-6*opf
                 777777 440000    2-46  	equ	op7,-7*opf
                                  2-47  "
                        000200    2-48  	equ	inhibit,128	this bit necessary for all macros
                                  2-49  "
                        000400    2-50  	equ	if_bit,256	used to differentiate if/unless
                                  2-51  "
                        400000    2-52  	bool	int,400000
                        200000    2-53  	bool	real,200000
                        100000    2-54  	bool	dp,100000
                        040000    2-55  	bool	cmpx,40000
                        020000    2-56  	bool	logical,20000
                        010000    2-57  	bool	char,10000
                        004000    2-58  	bool	typeless,4000
                        002000    2-59  	bool	label,2000
                                  2-60  "
                        000400    2-61  	equ	intn,1*256
                        001000    2-62  	equ	realn,2*256
                        001400    2-63  	equ	dpn,3*256
                        002000    2-64  	equ	cmpxn,4*256
                        002400    2-65  	equ	logicaln,5*256
                        003000    2-66  	equ	charn,6*256
                        003400    2-67  	equ	typelessn,7*256
                        004000    2-68  	equ	labeln,8*256
                                  2-69  "
                 777777 777777    2-70  	equ	var,-1
                                  2-71  "
                        000000    2-72  	equ	empty,0*256
                        000400    2-73  	equ	q,1*256
                        001000    2-74  	equ	a,2*256
                        001400    2-75  	equ	aq,3*256
                        002000    2-76  	equ	eaq,4*256
                        002400    2-77  	equ	deaq,5*256
                        003000    2-78  	equ	ieaq,6*256
                        003400    2-79  	equ	iq,7*256
                        004000    2-80  	equ	ia,8*256
                        004400    2-81  	equ	tq,9*256
                        005000    2-82  	equ	ind,10*256
                        005400    2-83  	equ	tze,11*256
                        006000    2-84  	equ	tnz,12*256
                        006400    2-85  	equ	tmi,13*256
                        007000    2-86  	equ	tpl,14*256
                        007400    2-87  	equ	tmoz,15*256
                        010000    2-88  	equ	tpnz,16*256
                        010400    2-89  	equ	tnc,17*256
                        011000    2-90  	equ	trc,18*256
                        011400    2-91  	equ	j_le_s,19*256
                        012000    2-92  	equ	j_g_s,20*256
                                  2-93  "
                        400000    2-94  	bool	variable,400000
                        200000    2-95  	bool	constant,200000
                        100000    2-96  	bool	array_ref,100000
                        040000    2-97  	bool	temp,40000
                        020000    2-98  	bool	count,20000
                        010000    2-99  	bool	rel_constant,10000
                        004000   2-100  	bool	bif,4000
                        002000   2-101  	bool	statement_function,2000
                        001000   2-102  	bool	external,1000
                        000400   2-103  	bool	entry,400
                        000200   2-104  	bool	dummy,200
                        000100   2-105  	bool	error,100
                        000040   2-106  	bool	substr_ref,40
                                 2-107  "
                        400000   2-108  	bool	x0,400000
                        200000   2-109  	bool	x1,200000
                        100000   2-110  	bool	x2,100000
                        040000   2-111  	bool	x3,40000
                        020000   2-112  	bool	x4,20000
                        010000   2-113  	bool	x5,10000
                        004000   2-114  	bool	x6,4000
                        002000   2-115  	bool	x7,2000
                        001000   2-116  	bool	pr4,1000
                        000400   2-117  	bool	pr1,400
                        000200   2-118  	bool	pr2,200
                        000100   2-119  	bool	pr3,100
                        000040   2-120  	bool	pr5,40
                        000020   2-121  	bool	pr7,20
                        776000   2-122  	bool	indices,x0+x1+x2+x3+x4+x5+x6+x7
                        001760   2-123  	bool	bases,pr1+pr4+pr2+pr3+pr5+pr7
                        777760   2-124  	bool	all,indices+bases
                                 2-125  "
                        000001   2-126  	equ	pr4n,1
                        000002   2-127  	equ	pr1n,2
                        000003   2-128  	equ	pr2n,3
                        000004   2-129  	equ	pr3n,4
                        000005   2-130  	equ	pr5n,5
                        000006   2-131  	equ	pr7n,6
                                 2-132  
                        000001   2-133  	equ	equal_lengths,1
                        000001   2-134  	equ	protect_indicators,1
                        000002   2-135  	equ	discard,2
                        040000   2-136  	bool	inst_word,040000
                                 2-137  "
                        000400   2-138  	equ	for_divide,256
                                 2-139  "
                                 2-140  "	builtin operands
                                 2-141  "
                        000000   2-142  	equ	zero,0		"integer constant zero
                        000001   2-143  	equ	one,1		"integer constant one
                        000002   2-144  	equ	ps,2		"symbol for Fortran I/O arglist
                        000003   2-145  	equ	auto_template,3	"init template for automatic storage
                        000004   2-146  	equ	auto_overlay,4	"overlay of automatic storage
                        000005   2-147  	equ	null_ptr,5	"constant null ITS pointer
                        000006   2-148  	equ	null,6		"null operand
                        000007   2-149  	equ	two,7		"integer constant two
                        000010   2-150  	equ	entry_info,8	"place to store quick proc info
                        000011   2-151  	equ	star_symbol,9	"<*symbol>|0
                        000012   2-152  	equ	ps_area_ptr,10	"symbol for ps.buffer_p
                        000013   2-153  	equ	desc_overlay,11	"symbol for accessing a descriptor
                                 2-154  "
                        000052   2-155  	equ		ps_ptr,42
                        000006   2-156  	equ		format_slot,6
                        000014   2-157  	equ		end_label_slot,12
                        000012   2-158  	equ		error_label_slot,10
                        000034   2-159  	equ		margin_slot,28
                        000011   2-160  	equ		record_number_slot,9
                        000020   2-161  	equ		string_slot,16
                        000025   2-162  	equ		string_length_slot,21
                        000036   2-163  	equ		file_name_slot,30
                        000040   2-164  	equ		file_type_slot,32
                        000022   2-165  	equ		namelist_slot,18
                        000056   2-166  	equ		iostat_slot,46
                        000033   2-167  	equ		buffer_size_slot,27
                                 2-168  
                        000042   2-169  	equ		descriptor_ptr,34
                        000056   2-170  	equ		double_temp,46
                                 2-171  
                        000050   2-172  	equ		temp_pt,40
                        000070   2-173  	equ		complex,56
                                 2-174  
                        000551   2-175  	equ		op_base,361	=o733-o162=o551	000
                                 2-176  
                        000110   2-177  	equ		all_ones,op_base-289		072
                        000440   2-178  	equ		blanks,op_base-73			288
                                 2-179  
                        001045   2-180  	equ		ext_entry,op_base+188		549
                        001046   2-181  	equ		ext_entry_desc,op_base+189		550
                        000631   2-182  	equ		return_op,op_base+48
                        001447   2-183  	equ		fortran_end,op_base+446
                        001450   2-184  	equ		fort_dmod,op_base+447
                        001375   2-185  	equ		signal_stringrange,op_base+404
                        000465   2-186  	equ		integer_to_real,op_base-52		309
                        000465   2-187  	equ		integer_to_double,op_base-52		309
                        000654   2-188  	equ		real_to_integer,op_base+67		428
                        000654   2-189  	equ		double_to_integer,op_base+67		428
                        000773   2-190  	equ		complex_multiply,op_base+146		507
                        000775   2-191  	equ		complex_divide,op_base+148		509
                        000477   2-192  	equ		r_g_s,op_base-42			319
                        000532   2-193  	equ		r_le_s,op_base-15			346
                        001351   2-194  	equ		int_p_int,op_base+384		745
                        001350   2-195  	equ		real_p_int,op_base+383		744
                        001347   2-196  	equ		real_p_real,op_base+382		743
                        001346   2-197  	equ		dbl_p_int,op_base+381		742
                        001344   2-198  	equ		dbl_p_real,op_base+379		740
                        001345   2-199  	equ		dbl_p_dbl,op_base+380		741
                        001416   2-200  	equ		cmpx_p_cmpx,op_base+421		782
                        001246   2-201  	equ		ftn_read,op_base+317		678
                        001247   2-202  	equ		ftn_write,op_base+318		679
                        001251   2-203  	equ		ftn_scalar_xmit,op_base+320		681
                        001252   2-204  	equ		ftn_array_xmit,op_base+321		682
                        001250   2-205  	equ		ftn_manip,op_base+319		680
                        001253   2-206  	equ		ftn_terminate,op_base+322		683
                        001406   2-207  	equ		cabs_,op_base+413			774
                        001312   2-208  	equ		log_,op_base+353			714
                        001333   2-209  	equ		dlog_,op_base+370			731
                        001411   2-210  	equ		clog_,op_base+416			777
                        001313   2-211  	equ		alog10_,op_base+354			715
                        001334   2-212  	equ		dlog10_,op_base+371			732
                        001307   2-213  	equ		atan_,op_base+350			711
                        001330   2-214  	equ		datan_,op_base+367			728
                        001336   2-215  	equ		atan2_,op_base+373			734
                        001340   2-216  	equ		datan2_,op_base+375			736
                        001277   2-217  	equ		cos_,op_base+342			703
                        001320   2-218  	equ		dcos_,op_base+359			720
                        001407   2-219  	equ		ccos_,op_base+414			775
                        001314   2-220  	equ		exp_,op_base+355			716
                        001335   2-221  	equ		dexp_,op_base+372			733
                        001410   2-222  	equ		cexp_,op_base+415			776
                        000767   2-223  	equ		fort_modfl,op_base+142		503
                        001415   2-224  	equ		dmod_,op_base+420			781
                        000666   2-225  	equ		sign_fx,op_base+77			438
                        000667   2-226  	equ		sign_fl,op_base+78			439
                        001275   2-227  	equ		sin_,op_base+340			701
                        001316   2-228  	equ		dsin_,op_base+357			718
                        001412   2-229  	equ		csin_,op_base+417			778
                        001274   2-230  	equ		sqrt_,op_base+339			700
                        001315   2-231  	equ		dsqrt_,op_base+356			717
                        001413   2-232  	equ		csqrt_,op_base+418			780
                        001414   2-233  	equ		tanh_,op_base+419			781
                        001301   2-234  	equ		tan_,op_base+344			705
                        001322   2-235  	equ		dtan_,op_base+361			722
                        001303   2-236  	equ		asin_,op_base+346			707
                        001324   2-237  	equ		dasin_,op_base+363			724
                        001305   2-238  	equ		acos_,op_base+348			709
                        001326   2-239  	equ		dacos_,op_base+365			726
                        001124   2-240  	equ		trunc_fl,op_base+235		596
                        001417   2-241  	equ		get_math_entry,op_base+422		783
                        001420   2-242  	equ		fortran_pause,op_base+423		784
                        001421   2-243  	equ		fortran_stop,op_base+424		785
                        001422   2-244  	equ		fortran_chain,op_base+425		786
                        000623   2-245  	equ		call_ext_out,op_base+42
                        000622   2-246  	equ		call_ext_out_desc,op_base+41
                        000617   2-247  	equ		call_var,op_base+38
                        000616   2-248  	equ		call_var_desc,op_base+37
                        001437   2-249  	equ		ftn_open_element,op_base+438		799
                        001440   2-250  	equ		ftn_get_area_ptr,op_base+439		800
                        001227   2-251  	equ		set_cs_eis,op_base+302		663
                        001231   2-252  	equ		index_cs_eis,op_base+304		665
                        001455   2-253  	equ		save_stack_quick,op_base+452		813
                        001456   2-254  	equ		restore_stack_quick,op_base+453	814
                        001014   2-255  	equ		shorten_stack,op_base+163		524
                        001457   2-256  	equ		dtanh_,op_base+454			815
                        001460   2-257  	equ		sinh_,op_base+455			816
                        001461   2-258  	equ		dsinh_,op_base+456			817
                        001462   2-259  	equ		cosh_,op_base+457			818
                        001463   2-260  	equ		dcosh_,op_base+458			819
                        001464   2-261  	equ		nearest_whole_number,op_base+459	820
                        001465   2-262  	equ		nearest_integer,op_base+460		821
                        001466   2-263  	equ		ftn_inquire_element,op_base+461	822
                        001467   2-264  	equ		mpy_overflow_check,op_base+462	823
                        001470   2-265  	equ		fort_return_mac,op_base+463		824
                        001471   2-266  	equ		fort_cleanup,op_base+464		825
                        001472   2-267  	equ		fort_storage,op_base+465		826
                        001473   2-268  	equ		enter_BFP_mode,op_base+466		827
                        001474   2-269  	equ		enter_HFP_mode,op_base+467		828
                                 2-270  
                        000474   2-271  	bool	r_l_a,474
                        000503   2-272  	bool	r_g_a,503
                        000512   2-273  	bool	r_e_as,512
                        000515   2-274  	bool	r_ne_as,515
                        000520   2-275  	bool	r_le_a,520
                        000527   2-276  	bool	r_ge_a,527
                        000507   2-277  	bool	r_l_s,507
                        000524   2-278  	bool	r_ge_s,524
                        000665   2-279  	equ	bound_ck_signal,op_base+76
                        000242   2-280  	bool	almost_one,242
                 777777 777615   2-281  	equ	VLA_words_per_seg,op_base-476
                                 2-282  "
                                 2-283  "	Symbols for upper 18 bits of some common hfp values whose lower
                                 2-284  "	18 bits are zeroes (i.e. values suitable for 'du' modification).
                                 2-285  "
                        000400   2-286  	bool	P0.5H,000400	= +0.5h,du
                        002040   2-287  	bool	P1.0H,002040	= +1.0h,du
                        002100   2-288  	bool	P2.0H,002100	= +2.0h,du
                                 2-289  "
                                 2-290  " END   fort_equs.incl.alm
                                   172  
                                   173  	include		stack_header
                                   3-1  "	BEGIN INCLUDE FILE ... stack_header.incl.alm  3/72  Bill Silver
                                   3-2  "
                                   3-3  "	modified 7/76 by M. Weaver for *system links and more system use of areas
                                   3-4  "	modified 3/77 by M. Weaver  to add rnt_ptr
                                   3-5  "	modified 7/77 by S. Webber to add run_unit_depth and assign_linkage_ptr
                                   3-6  "	modified 6/83 by J. Ives to add trace_frames and in_trace.
                                   3-7  
                                   3-8  " HISTORY COMMENTS:
                                   3-9  "  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
                                  3-10  "     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
                                  3-11  "     added the heap_header_ptr definition
                                  3-12  "  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
                                  3-13  "     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
                                  3-14  "     Modified to support control point management.  These changes were
                                  3-15  "     actually made in February 1985 by G. Palter.
                                  3-16  "  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
                                  3-17  "     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
                                  3-18  "     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
                                  3-19  "     bit pad after cur_lot_size for the cpm_enabled. This was done to save
                                  3-20  "     some space int the stack header and change the cpd_ptr unal to
                                  3-21  "     cpm_data_ptr (ITS pair).
                                  3-22  "                                                      END HISTORY COMMENTS
                                  3-23  
                        000004    3-24  	equ	stack_header.cpm_data_ptr,4		ptr to control point for this stack
                        000006    3-25  	equ	stack_header.combined_stat_ptr,6	ptr to separate static area
                                  3-26  
                        000010    3-27  	equ	stack_header.clr_ptr,8		ptr to area containing linkage sections
                        000012    3-28  	equ	stack_header.max_lot_size,10		number of words allowed in lot (DU)
                        000012    3-29  	equ	stack_header.main_proc_invoked,10	nonzero if main proc was invoked in run unit (DL)
                        000012    3-30  	equ	stack_header.run_unit_depth,10	number of active run units stacked (DL)
                        000013    3-31  	equ	stack_header.cur_lot_size,11		DU number of words (entries) in lot
                        000013    3-32            equ	stack_header.cpm_enabled,11		DL  non-zero if control point management is enabled
                        000014    3-33  	equ	stack_header.system_free_ptr,12	ptr to system storage area
                        000016    3-34  	equ	stack_header.user_free_ptr,14		ptr to user storage area
                                  3-35  
                        000020    3-36  	equ	stack_header.parent_ptr,16		ptr to parent stack or null
                        000022    3-37  	equ	stack_header.stack_begin_ptr,18	ptr to first stack frame
                        000024    3-38  	equ	stack_header.stack_end_ptr,20		ptr to next useable stack frame
                        000026    3-39  	equ	stack_header.lot_ptr,22		ptr to the lot for the current ring
                                  3-40  
                        000030    3-41  	equ	stack_header.signal_ptr,24		ptr to signal proc for current ring
                        000032    3-42  	equ	stack_header.bar_mode_sp,26		value of sp before entering bar mode
                        000034    3-43  	equ	stack_header.pl1_operators_ptr,28	ptr: pl1_operators_$operator_table
                        000036    3-44  	equ	stack_header.call_op_ptr,30		ptr to standard call operator
                                  3-45  
                        000040    3-46  	equ	stack_header.push_op_ptr,32		ptr to standard push operator
                        000042    3-47  	equ	stack_header.return_op_ptr,34		ptr to standard return operator
                        000044    3-48  	equ	stack_header.ret_no_pop_op_ptr,36	ptr: stand. return/ no pop operator
                        000046    3-49  	equ	stack_header.entry_op_ptr,38		ptr to standard entry operator
                                  3-50  
                        000050    3-51  	equ	stack_header.trans_op_tv_ptr,40	ptr to table of translator operator ptrs
                        000052    3-52  	equ	stack_header.isot_ptr,42		pointer to ISOT
                        000054    3-53  	equ	stack_header.sct_ptr,44		pointer to System Condition Table
                        000056    3-54  	equ	stack_header.unwinder_ptr,46		pointer to unwinder for current ring
                                  3-55  
                        000060    3-56  	equ	stack_header.sys_link_info_ptr,48	ptr to *system link name table
                        000062    3-57  	equ	stack_header.rnt_ptr,50		ptr to reference name table
                        000064    3-58  	equ	stack_header.ect_ptr,52		ptr to event channel table
                        000066    3-59  	equ	stack_header.assign_linkage_ptr,54	ptr to area for hcs_$assign_linkage calls
                        000070    3-60  	equ	stack_header.heap_header_ptr,56	ptr to heap header.
                        000072    3-61  	equ	stack_header.trace_frames,58		stack of trace_catch_ frames
                        000073    3-62  	equ	stach_header.trace_top_ptr,59		trace pointer
                        000074    3-63  	equ	stack_header.in_trace,60		trace antirecurse bit
                        000100    3-64  	equ	stack_header_end,64			length of stack header
                                  3-65  
                                  3-66  
                                  3-67  
                                  3-68  
                        000000    3-69  	equ	trace_frames.count,0		number of trace frames on stack
                        000001    3-70  	equ	trace_frames.top_ptr,1		packed pointer to top one
                                  3-71  
                                  3-72  "	The  following constant is an offset within the  pl1  operators table.
                                  3-73  "	It  references a  transfer vector table.
                                  3-74  
                        000551    3-75  	bool	tv_offset,551
                                  3-76  
                                  3-77  
                                  3-78  "	The  following constants are offsets within this transfer vector table.
                                  3-79  
                        001170    3-80  	equ	call_offset,tv_offset+271
                        001171    3-81  	equ	push_offset,tv_offset+272
                        001172    3-82  	equ	return_offset,tv_offset+273
                        001173    3-83  	equ	return_no_pop_offset,tv_offset+274
                        001174    3-84  	equ	entry_offset,tv_offset+275
                                  3-85  
                                  3-86  
                                  3-87  " 	END INCLUDE FILE stack_header.incl.alm
                                   174  	include		stack_frame
                                   4-1  "
                                   4-2  "	BEGIN INCLUDE FILE ... stack_frame.incl.alm   6/72 RBS
                                   4-3  "
                                   4-4  " Modified: 16 Dec 1977, D. Levin - to add fio_ps_ptr
                                   4-5  " Modified:  3 Feb 1978, P. Krupp - to add run_unit_manager_bit & main_proc_bit
                                   4-6  " Modified: 21 March 1978, D. Levin - change fio_ps_ptr to support_ptr
                                   4-7  "
                        000020     4-8  	equ	stack_frame.prev_sp,16
                        000020     4-9  	equ	stack_frame.condition_word,16
                        000022    4-10  	equ	stack_frame.next_sp,18
                        000022    4-11  	equ	stack_frame.signaller_word,18
                        000024    4-12  	equ	stack_frame.return_ptr,20
                        000026    4-13  	equ	stack_frame.entry_ptr,22
                        000030    4-14  	equ	stack_frame.operator_ptr,24
                        000030    4-15  	equ	stack_frame.lp_ptr,24
                        000032    4-16  	equ	stack_frame.arg_ptr,26
                        000034    4-17  	equ	stack_frame.static_ptr,28
                        000035    4-18  	equ	stack_frame.support_ptr,29	" only used by fortran I/O
                        000036    4-19  	equ	stack_frame.on_unit_rel_ptrs,30
                        000037    4-20  	equ	stack_frame.operator_ret_ptr,31
                        000037    4-21  	equ	stack_frame.translator_id,31
                        000040    4-22  	equ	stack_frame.regs,32
                        000060    4-23  	equ	stack_frame.min_length,48
                        000020    4-24  	equ	stack_frame.flag_word,16
                        020000    4-25  	bool	stack_frame.main_proc_bit,020000	(DL)
                        010000    4-26  	bool	stack_frame.run_unit_manager,010000	(DL)
                        004000    4-27  	bool	stack_frame.signal_bit,004000		(DL)
                        002000    4-28  	bool	stack_frame.crawl_out_bit,002000	(DL)
                        001000    4-29  	bool	stack_frame.signaller_bit,001000	(DL)
                        000400    4-30  	bool	stack_frame.link_trap_bit,000400	(DL)
                        000200    4-31  	bool	stack_frame.support_bit,000200	(DL)
                        000100    4-32  	bool	stack_frame.condition_bit,000100	(DL)
                                  4-33  
                                  4-34  "
                                  4-35  "	END INCLUDE FILE  ... stack_frame.incl.alm
                                  4-36  "
                                   175  
    013357                         176  	name		fort_cg_macros_
                                   177  
                        000000     178  	segdef		operator_table
                        000155     179  	segdef		single_inst
                        000413     180  	segdef		interpreter_macros
                        000470     181  	segdef		first_scan
                        000472     182  	segdef		abort_list
                        000475     183  	segdef		error_macro
                                   184  
                                   185  	use		.text.
                                   186  
                                   187  	include	fort_operator_table
                                   5-1  " BEGIN INCLUDE FILE fort_operator_table.incl.alm
                                   5-2  "
                                   5-3  " Extracted from fort_cg_macros_.alm and fort_opt_macros_.alm
                                   5-4  " on 7 February 1980 by C R Davis
                                   5-5  "
                                   5-6  " Modified:
                                   5-7  "	22 Jun 84, MM - Install typeless functions support.
                                   5-8  "	17 Jun 83, HH - 383: Add 'process_param_list'.
                                   5-9  "	12 Jan 83, HH - Add 'form_VLA_packed_ptr'.
                                  5-10  "	28 October 1981, C R Davis - add inquire.
                                  5-11  "	20 October 1981, C R Davis - add (read write)_internal_file.
                                  5-12  "	11 May 1981, C R Davis - add equiv, not_equiv.
                                  5-13  "	8 December 1980, C R Davis - add block_if, else_if, and else.
                                  5-14  "
                                  5-15  "
    000000                        5-16  operator_table:
    000000  0a   000476 000000    5-17  	zero		assign			1
    000001  0a   000660 000000    5-18  	zero		add			2
    000002  0a   001037 000000    5-19  	zero		sub			3
    000003  0a   001431 000000    5-20  	zero		mult			4
    000004  0a   001622 000000    5-21  	zero		div			5
    000005  0a   002121 000000    5-22  	zero		exponentiation		6
    000006  0a   002357 000000    5-23  	zero		negate			7
    000007  0a   006624 000000    5-24  	zero		less			8
    000010  0a   007032 000000    5-25  	zero		less_or_equal		9
    000011  0a   007240 000000    5-26  	zero		equal			10
    000012  0a   007423 000000    5-27  	zero		not_equal			11
    000013  0a   007606 000000    5-28  	zero		greater_or_equal		12
    000014  0a   010014 000000    5-29  	zero		greater			13
    000015  0a   010222 000000    5-30  	zero		or			14
    000016  0a   010235 000000    5-31  	zero		and			15
    000017  0a   010250 000000    5-32  	zero		not			16
    000020  0a   010317 000000    5-33  	zero		jump			17
    000021  0a   010323 000000    5-34  	zero		jump_logical		18
    000022  0a   010375 000000    5-35  	zero		jump_arithmetic		19
    000023  0a   010521 000000    5-36  	zero		jump_computed		20
    000024  0a   010611 000000    5-37  	zero		jump_assigned		21
    000025  0a   010626 000000    5-38  	zero		assign_label		22
    000026  0a   011005 000000    5-39  	zero		read			23
    000027  0a   011023 000000    5-40  	zero		write			24
    000030  0a   011041 000000    5-41  	zero		format			25
    000031  0a   011065 000000    5-42  	zero		end_label			26
    000032  0a   011073 000000    5-43  	zero		error_label		27
    000033  0a   011101 000000    5-44  	zero		xmit_scalar		28
    000034  0a   011135 000000    5-45  	zero		xmit_array		29
    000035  0a   011212 000000    5-46  	zero		xmit_vector		30
    000036  0a   011266 000000    5-47  	zero		endfile			31
    000037  0a   011303 000000    5-48  	zero		rewind			32
    000040  0a   011320 000000    5-49  	zero		backspace			33
    000041  0a   011335 000000    5-50  	zero		margin			34
    000042  0a   011362 000000    5-51  	zero		openfile			35
    000043  0a   011641 000000    5-52  	zero		closefile			36
    000044  0a   011667 000000    5-53  	zero		record_number		37
    000045  0a   011700 000000    5-54  	zero		string			38
    000046  0a   011711 000000    5-55  	zero		string_length		39
    000047  0a   011741 000000    5-56  	zero		terminate			40
    000050  0a   012327 000000    5-57  	zero		return			41
    000051  0a   012336 000000    5-58  	zero		pause			42
    000052  0a   012354 000000    5-59  	zero		stop			43
    000053  0a   012316 000000    5-60  	zero		item			44
    000054  0a   012321 000000    5-61  	zero		exit			45
    000055  0a   012324 000000    5-62  	zero		eol			46
    000056  0a   002425 000000    5-63  	zero		do			47
    000057  0a   002766 000000    5-64  	zero		builtin			48
    000060  0a   012071 000000    5-65  	zero		sf			49
    000061  0a   011747 000000    5-66  	zero		sf_def			50
    000062  0a   012372 000000    5-67  	zero		subscript			51
    000063  0a   012507 000000    5-68  	zero		func_ref			52
    000064  0a   012571 000000    5-69  	zero		block_data		53
    000065  0a   012725 000000    5-70  	zero		increment_polish		54
    000066  0a   012542 000000    5-71  	zero		main			55
    000067  0a   012561 000000    5-72  	zero		func			56
    000070  0a   012551 000000    5-73  	zero		subr			57
    000071  0a   012733 000000    5-74  	zero		stat			58
    000072  0a   012730 000000    5-75  	zero		label_operator		59
    000073  0a   012737 000000    5-76  	zero		call			60
    000074  0a   013152 000000    5-77  	zero		chain			61
    000075  0a   013234 000000    5-78  	zero		endunit			62
    000076  0a   013237 000000    5-79  	zero		non_executable		63
    000077  0a   013241 000000    5-80  	zero		no_op			64
    000100  0a   013243 000000    5-81  	zero		form_VLA_packed_ptr		65
    000101  0a   013252 000000    5-82  	zero		opt_subscript		66
    000102  0a   013255 000000    5-83  	zero		left_shift		67
    000103  0a   013261 000000    5-84  	zero		right_shift		68
    000104  0a   013265 000000    5-85  	zero		store_zero		69
    000105  0a   013271 000000    5-86  	zero		storage_add		70
    000106  0a   013277 000000    5-87  	zero		storage_sub		71
    000107  0a   013305 000000    5-88  	zero		neg_storage_add		72
    000110  0a   013313 000000    5-89  	zero		storage_add_one		73
    000111  0a   013320 000000    5-90  	zero		namelist			74
    000112  0a   011424 000000    5-91  	zero		open			75
    000113  0a   011424 000000    5-92  	zero		close			76
    000114  0a   011655 000000    5-93  	zero		iostat			77
    000115  0a   013356 000000    5-94  	zero		convert_to_int		78
    000116  0a   013356 000000    5-95  	zero		convert_to_real		79
    000117  0a   013356 000000    5-96  	zero		convert_to_dp		80
    000120  0a   013356 000000    5-97  	zero		convert_to_cmpx		81
    000121  0a   013356 000000    5-98  	zero		read_scalar		82
    000122  0a   013356 000000    5-99  	zero		read_array		83
    000123  0a   013356 000000   5-100  	zero		read_vector		84
    000124  0a   013356 000000   5-101  	zero		write_scalar		85
    000125  0a   013356 000000   5-102  	zero		write_array		86
    000126  0a   013356 000000   5-103  	zero		write_vector		87
    000127  0a   013356 000000   5-104  	zero		jump_true			88
    000130  0a   013356 000000   5-105  	zero		jump_false		89
    000131  0a   013356 000000   5-106  	zero		sub_index			90
    000132  0a   013356 000000   5-107  	zero		loop_end			91
    000133  0a   013356 000000   5-108  	zero		read_namelist		92
    000134  0a   013356 000000   5-109  	zero		write_namelist		93
    000135  0a   013356 000000   5-110  	zero		decode_string		94
    000136  0a   013356 000000   5-111  	zero		encode_string		95
    000137  0a   013326 000000   5-112  	zero		cat			96
    000140  0a   012437 000000   5-113  	zero		substr			97
    000141  0a   013356 000000   5-114  	zero		load_xreg			98
    000142  0a   013356 000000   5-115  	zero		load_preg			99
    000143  0a   010652 000000   5-116  	zero		block_if			100
    000144  0a   010743 000000   5-117  	zero		else_if			101
    000145  0a   011003 000000   5-118  	zero		else			102
    000146  0a   010275 000000   5-119  	zero		equiv			103
    000147  0a   010305 000000   5-120  	zero		not_equiv			104
    000150  0a   011716 000000   5-121  	zero		read_internal_file		105
    000151  0a   011716 000000   5-122  	zero		write_internal_file		106
    000152  0a   011527 000000   5-123  	zero		inquire			107
    000153  0a   012707 000000   5-124  	zero		process_param_list		108
    000154  0a   013353 000000   5-125  	zero		lhs_fld			109
                                 5-126  
                                 5-127  "
                                 5-128  "	NOTE: If you add entries to this table, you must change
                                 5-129  "	both fort_cg_macros_ and fort_opt_macros_!!
                                 5-130  "
                                 5-131  " END INCLUDE FILE fort_operator_table.incl.alm
                                   188  
                                   189  	include	fort_single_inst
                                   6-1  " BEGIN fort_single_inst.incl.alm
                                   6-2  "
                                   6-3  " Modified: 22 June 1984, M Mabey - Install typeless functions support.
                                   6-4  "	Added: era, erq, ersa, ersq, alr, ana, lrs, qls, lca
                                   6-5  " Modified: 06 Jan 83, HH: Add 'lcq'.
                                   6-6  " Modified:  1 October 1982, T G Oke: add load packed pointers, easp, eawp,
                                   6-7  "	llr, als, div.
                                   6-8  " Modified: 20 September 1982, T G Oke: add store of packed pointers, epaq,
                                   6-9  "	qrl and lrl.
                                  6-10  " Modified: 25 September 1980, C R Davis: exchange pr1 and pr4 instructions.
                                  6-11  " Modified: 18 March 1980, C R Davis: add instruction to load lp.
                                  6-12  " Modified: 28 December 1979, R A Barnes: add nop instruction.
                                  6-13  " Modified: 17 December 1979, C R Davis: added anq, orq, and orsq instructions.
                                  6-14  " Extracted: 30 November 1979 by R. A. Barnes from fort_opt_macros_.alm
                                  6-15  "
    000155                        6-16  single_inst:
    000155  aa   000000 6200 00   6-17  	eax0	0		eax0		1
    000156  aa   000000 6210 00   6-18  	eax1	0		eax1		2
    000157  aa   000000 6220 00   6-19  	eax2	0		eax2		3
    000160  aa   000000 6230 00   6-20  	eax3	0		eax3		4
    000161  aa   000000 6240 00   6-21  	eax4	0		eax4		5
    000162  aa   000000 6250 00   6-22  	eax5	0		eax5		6
    000163  aa   000000 6260 00   6-23  	eax6	0		eax6		7
    000164  aa   000000 6270 00   6-24  	eax7	0		eax7		8
    000165  aa   000000 7200 00   6-25  	lxl0	0		lxl0		9
    000166  aa   000000 7210 00   6-26  	lxl1	0		lxl1		10
    000167  aa   000000 7220 00   6-27  	lxl2	0		lxl2		11
    000170  aa   000000 7230 00   6-28  	lxl3	0		lxl3		12
    000171  aa   000000 7240 00   6-29  	lxl4	0		lxl4		13
    000172  aa   000000 7250 00   6-30  	lxl5	0		lxl5		14
    000173  aa   000000 7260 00   6-31  	lxl6	0		lxl6		15
    000174  aa   000000 7270 00   6-32  	lxl7	0		lxl7		16
    000175  aa   000000 4400 00   6-33  	sxl0	0		sxl0		17
    000176  aa   000000 4410 00   6-34  	sxl1	0		sxl1		18
    000177  aa   000000 4420 00   6-35  	sxl2	0		sxl2		19
    000200  aa   000000 4430 00   6-36  	sxl3	0		sxl3		20
    000201  aa   000000 4440 00   6-37  	sxl4	0		sxl4		21
    000202  aa   000000 4450 00   6-38  	sxl5	0		sxl5		22
    000203  aa   000000 4460 00   6-39  	sxl6	0		sxl6		23
    000204  aa   000000 4470 00   6-40  	sxl7	0		sxl7		24
    000205  aa   000000 3700 00   6-41  	epp4	0		epp4		25
    000206  aa   000000 3514 00   6-42  	epp1	0		epp1		26
    000207  aa   000000 3520 00   6-43  	epp2	0		epp2		27
    000210  aa   000000 3534 00   6-44  	epp3	0		epp3		28
    000211  aa   000000 3714 00   6-45  	epp5	0		epp5		29
    000212  aa   000000 3734 00   6-46  	epp7	0		epp7		30
    000213  aa   000000 2360 00   6-47  	ldq	0		ldq		31
    000214  aa   000000 2350 00   6-48  	lda	0		lda		32
    000215  aa   000000 2370 00   6-49  	ldaq	0		ldaq		33
    000216  aa   000000 4310 00   6-50  	fld	0		ldeaq		34
    000217  aa   000000 4330 00   6-51  	dfld	0		lddeaq		35
    000220  aa   000001 4310 00   6-52  	fld	1		ldieaq		36
    000221  aa   000001 2360 00   6-53  	ldq	1		ldiq		37
    000222  aa   000000 7560 00   6-54  	stq	0		stq		38
    000223  aa   000000 7550 00   6-55  	sta	0		sta		39
    000224  aa   000000 7570 00   6-56  	staq	0		staq		40
    000225  aa   000000 4700 00   6-57  	fstr	0		steaq		41
    000226  aa   000000 4720 00   6-58  	dfstr	0		stdeaq		42
    000227  aa   000001 4700 00   6-59  	fstr	1		stieaq		43
    000230  aa   000001 7560 00   6-60  	stq	1		stiq		44
    000231  aa  0 00512 7001 00   6-61  	tsx0	pr0|r_e_as	r_e_as		45
    000232  aa  0 00515 7001 00   6-62  	tsx0	pr0|r_ne_as	r_ne_as		46
    000233  aa  0 00474 7001 00   6-63  	tsx0	pr0|r_l_a		r_l_a		47
    000234  aa  0 00527 7001 00   6-64  	tsx0	pr0|r_ge_a	r_ge_a		48
    000235  aa  0 00520 7001 00   6-65  	tsx0	pr0|r_le_a	r_le_a		49
    000236  aa  0 00503 7001 00   6-66  	tsx0	pr0|r_g_a		r_g_a		50
    000237  aa  0 00507 7001 00   6-67  	tsx0	pr0|r_l_s		r_l_s		51
    000240  aa  0 00524 7001 00   6-68  	tsx0	pr0|r_ge_s	r_ge_s		52
    000241  aa   000000 0760 00   6-69  	adq	0		adfx1		53
    000242  aa   000000 1760 00   6-70  	sbq	0		sbfx1		54
    000243  aa   000000 4500 00   6-71  	stz	0		stz		55
    000244  aa   000000 0560 00   6-72  	asq	0		asq		56
    000245  aa   000000 6500 00   6-73  	spri4	0		spri4		57
    000246  aa   000000 2514 00   6-74  	spri1	0		spri1		58
    000247  aa   000000 2520 00   6-75  	spri2	0		spri2		59
    000250  aa   000000 2534 00   6-76  	spri3	0		spri3		60
    000251  aa   000000 6514 00   6-77  	spri5	0		spri5		61
    000252  aa   000000 6534 00   6-78  	spri7	0		spri7		62
    000253  aa  0 00000 5005 00   6-79  	a9bd	pr0|0		a9bd		63
    000254  aa   000000 0540 00   6-80  	aos	0		aos		64
    000255  aa   000000 1160 00   6-81  	cmpq	0		cmpq		65
    000256  aa   000000 1150 00   6-82  	cmpa	0		cmpa		66
    000257  aa   000000 1170 00   6-83  	cmpaq	0		cmpaq		67
    000260  aa   000000 5150 00   6-84  	fcmp	0		cmpeaq		68
    000261  aa   000000 5170 00   6-85  	dfcmp	0		cmpdeaq		69
    000262  aa   000001 5150 00   6-86  	fcmp	1		cmpieaq		70
    000263  aa   000001 1160 00   6-87  	cmpq	1		cmpiq		71
    000264  aa   000000 4550 00   6-88  	fst	0		steaq	^rounded	72
    000265  aa   000000 4570 00   6-89  	dfst	0		stdeaq	^rounded	73
    000266  aa   000001 4550 00   6-90  	fst	1		stieaq	^rounded	74
    000267  aa   000000 6340 00   6-91  	ldi	0		load_ind		75
    000270  aa   000000 7540 00   6-92  	sti	0		store_ind		76
    000271  aa   000000 4710 00   6-93  	frd	0		frd		77
    000272  aa   000000 4730 00   6-94  	dfrd	0		dfrd		78
    000273  aa   000000 1500 00   6-95  	adwp4	0		adwp4		79
    000274  aa   000000 0510 00   6-96  	adwp1	0		adwp1		80
    000275  aa   000000 0520 00   6-97  	adwp2	0		adwp2		81
    000276  aa   000000 0530 00   6-98  	adwp3	0		adwp3		82
    000277  aa   000000 1510 00   6-99  	adwp5	0		adwp5		83
    000300  aa   000000 1530 00  6-100  	adwp7	0		adwp7		84
    000301  aa   000000 4020 00  6-101  	mpy	0		mpy		85
    000302  aa  0 00532 7001 00  6-102  	tsx0	pr0|r_le_s	r_le_s		86
    000303  aa  0 00477 7001 00  6-103  	tsx0	pr0|r_g_s		r_g_s		87
    000304  aa   000000 0200 00  6-104  	adlx0	0		adlx0		88
    000305  aa   000000 0210 00  6-105  	adlx1	0		adlx1		89
    000306  aa   000000 0220 00  6-106  	adlx2	0		adlx2		90
    000307  aa   000000 0230 00  6-107  	adlx3	0		adlx3		91
    000310  aa   000000 0240 00  6-108  	adlx4	0		adlx4		92
    000311  aa   000000 0250 00  6-109  	adlx5	0		adlx5		93
    000312  aa   000000 0260 00  6-110  	adlx6	0		adlx6		94
    000313  aa   000000 0270 00  6-111  	adlx7	0		adlx7		95
    000314  aa   000000 1200 00  6-112  	sblx0	0		sblx0		96
    000315  aa   000000 1210 00  6-113  	sblx1	0		sblx1		97
    000316  aa   000000 1220 00  6-114  	sblx2	0		sblx2		98
    000317  aa   000000 1230 00  6-115  	sblx3	0		sblx3		99
    000320  aa   000000 1240 00  6-116  	sblx4	0		sblx4		100
    000321  aa   000000 1250 00  6-117  	sblx5	0		sblx5		101
    000322  aa   000000 1260 00  6-118  	sblx6	0		sblx6		102
    000323  aa   000000 1270 00  6-119  	sblx7	0		sblx7		103
    000324  aa   000000 1000 00  6-120  	cmpx0	0		cmpx0		104
    000325  aa   000000 1010 00  6-121  	cmpx1	0		cmpx1		105
    000326  aa   000000 1020 00  6-122  	cmpx2	0		cmpx2		106
    000327  aa   000000 1030 00  6-123  	cmpx3	0		cmpx3		107
    000330  aa   000000 1040 00  6-124  	cmpx4	0		cmpx4		108
    000331  aa   000000 1050 00  6-125  	cmpx5	0		cmpx5		109
    000332  aa   000000 1060 00  6-126  	cmpx6	0		cmpx6		110
    000333  aa   000000 1070 00  6-127  	cmpx7	0		cmpx7		111
    000334  aa   000000 6360 00  6-128  	eaq	0		eaq		112
    000335  aa   000000 7320 00  6-129  	qrs	0		qrs		113
    000336  aa   000000 3760 00  6-130  	anq	0		anq		114
    000337  aa   000000 2760 00  6-131  	orq	0		orq		115
    000340  aa   000000 2560 00  6-132  	orsq	0		orsq		116
    000341  aa   000000 0110 03  6-133  	nop	0,du		nop		117
    000342  aa  6 00044 3701 20  6-134  	epp4	pr6|36,*		getlp		118
    000343  aa   000000 5440 00  6-135  	sprp4	0		sprp4		119
    000344  aa   000000 5410 00  6-136  	sprp1	0		sprp1		120
    000345  aa   000000 5420 00  6-137  	sprp2	0		sprp2		121
    000346  aa   000000 5430 00  6-138  	sprp3	0		sprp3		122
    000347  aa   000000 5450 00  6-139  	sprp5	0		sprp5		123
    000350  aa   000000 5470 00  6-140  	sprp7	0		sprp7		124
    000351  aa   000000 2130 00  6-141  	epaq	0		epaq		125
    000352  aa   000000 7730 00  6-142  	lrl	0		lrl		126
    000353  aa   000000 7720 00  6-143  	qrl	0		qrl		127
    000354  aa   000000 7640 00  6-144  	lprp4	0		lprp4		128
    000355  aa   000000 7610 00  6-145  	lprp1	0		lprp1		129
    000356  aa   000000 7620 00  6-146  	lprp2	0		lprp2		130
    000357  aa   000000 7630 00  6-147  	lprp3	0		lprp3		131
    000360  aa   000000 7650 00  6-148  	lprp5	0		lprp5		132
    000361  aa   000000 7670 00  6-149  	lprp7	0		lprp7		133
    000362  aa   000000 3310 00  6-150  	easp4	0		easp4		134
    000363  aa   000000 3104 00  6-151  	easp1	0		easp1		135
    000364  aa   000000 3130 00  6-152  	easp2	0		easp2		136
    000365  aa   000000 3124 00  6-153  	easp3	0		easp3		137
    000366  aa   000000 3304 00  6-154  	easp5	0		easp5		138
    000367  aa   000000 3324 00  6-155  	easp7	0		easp7		139
    000370  aa   000000 3300 00  6-156  	eawp4	0		eawp4		140
    000371  aa   000000 3114 00  6-157  	eawp1	0		eawp1		141
    000372  aa   000000 3120 00  6-158  	eawp2	0		eawp2		142
    000373  aa   000000 3134 00  6-159  	eawp3	0		eawp3		143
    000374  aa   000000 3314 00  6-160  	eawp5	0		eawp5		144
    000375  aa   000000 3334 00  6-161  	eawp7	0		eawp7		145
    000376  aa   000000 7770 00  6-162  	llr	0		llr		146
    000377  aa   000000 7350 00  6-163  	als	0		als		147
    000400  aa   000000 5060 00  6-164  	div	0		div		148
    000401  aa   000000 3360 00  6-165  	lcq	0		lcq		149
    000402  aa   000000 6750 00  6-166  	era	0		era		150
    000403  aa   000000 6760 00  6-167  	erq	0		erq		151
    000404  aa   000000 6550 00  6-168  	ersa	0		ersa		152
    000405  aa   000000 6560 00  6-169  	ersq	0		ersq		153
    000406  aa   000000 7750 00  6-170  	alr       0		alr		154
    000407  aa   000000 3750 00  6-171  	ana	0		ana		155
    000410  aa   000000 7330 00  6-172  	lrs	0		lrs		156
    000411  aa   000000 7360 00  6-173  	qls	0		qls		157
    000412  aa   000000 3350 00  6-174  	lca	0		lca		158
                                 6-175  "
                                 6-176  "	NOTE:  If you add anything to this table, be sure to change the
                                 6-177  "	declarations of fort_cg_macros_$single_inst in ext_code_generator,
                                 6-178  "	fort_opt_macros_$single_inst in fort_optimizing_cg, and 
                                 6-179  "	fort_single_inst_names.incl.pl1.
                                 6-180  "
                                 6-181  " END fort_single_inst.incl.alm
                                   190  
    000413                         191  interpreter_macros:
    000413  0a   000417 000000     192  	zero	check_subscript
    000414  0a   000432 000000     193  	zero	subscript_mpy
    000415  0a   000445 000000     194  	zero	move_eis
    000416  0a   000453 000000     195  	zero	check_stringrange
                                   196  
                                   197  
    000417                         198  check_subscript:
                                   199  	func	3
    000417  aa   000000 001615 
                                   200  
                                   201  	swap	arg1
    000420  aa   000000 040202 
                                   202  
                                   203  	" arg1: upper bound
                                   204  	" arg2: lower bound
                                   205  	" arg3: subscript
                                   206  
                                   207  	if	arg1,=,op1,ret_sub
    000421  0a   000431 051637 
                                   208  	if	arg2,=,op1,ret_sub
    000422  0a   000431 111637 
                                   209  
                                   210  	load	q,arg1
    000423  aa   000000 040656 
                                   211  
                                   212  	use_eaq
    000424  aa   000000 000255 
                                   213  
    000425  aa   100000 2350 00    214  	lda	arg2
    000426  aa   140000 1110 00    215  	cwl	arg3
    000427  aa   000002 6000 04    216  	tze	2,ic
    000430  aa  0 00665 7001 00    217  	tsx0	pr0|bound_ck_signal
                                   218  
    000431                         219  ret_sub:
                                   220  	return	arg3
    000431  aa   000001 140217 
                                   221  
                                   222  
    000432                         223  subscript_mpy:
                                   224  	proc	1
    000432  aa   000000 000614 
                                   225  
                                   226  
                                   227  	if	arg1,=,1,ret_mpy
    000433  0a   000441 050637 
                                   228  
                                   229  	if_check_multiply	subscript_mpy.1
    000434  0a   000436 000713 
                                   230  
                                   231  	if	arg1,=,2,qls1
    000435  0a   000442 051237 
                                   232  
    000436                         233  subscript_mpy.1:
    000436  aa   040000 4020 00    234  	mpy	arg1
                                   235  
                                   236  	unless_check_multiply	ret_mpy
    000437  0a   000441 000313 
    000440  aa  0 01467 7001 00    237  	tsx0	pr0|mpy_overflow_check
                                   238  
                                   239  ret_mpy:	return
    000441  aa   000000 000217 
                                   240  
                                   241  qls1:	emit	1
    000442  aa   000001 000242 
                                   242  
    000443  aa   000001 7360 00    243  	qls	1
                                   244  
                                   245  	return
    000444  aa   000000 000217 
                                   246  
                                   247  
    000445                         248  move_eis:
                                   249  	proc	2
    000445  aa   000000 001214 
                                   250  
                                   251  	emit_eis
    000446  aa   000000 000207 
    000447  aa   040100 1004 00    252  	mlr	(),(pr),fill(040)
    000450  aa   040000 000000     253  	desc9a	arg1
    000451  aa   100000 000000     254  	desc9a	arg2
                                   255  
                                   256  	return
    000452  aa   000000 000217 
                                   257  
                                   258  
    000453                         259  check_stringrange:
                                   260  	proc	3
    000453  aa   000000 001614 
                                   261  
                                   262  	" arg1 is length of parent
                                   263  	" arg2 is index of first char in substring
                                   264  	" arg3 is index of last char in substring
                                   265  
                                   266  	use_eaq
    000454  aa   000000 000255 
                                   267  
    000455  aa   000001 2350 07    268  	lda	1,dl		" Get lower bound in A
                                   269  	load	q,arg1		" Get upper bound in Q
    000456  aa   000000 040656 
    000457  aa   100000 1110 00    270  	cwl	arg2		" Check the first index
    000460  aa   000002 6000 04    271  	tze	2,ic
    000461  aa  0 01375 7001 00    272  	tsx0	pr0|signal_stringrange
                                   273  
    000462  aa   100000 2350 00    274  	lda	arg2		" Get first index in A
                                   275  	load	q,arg1		" Get length of string in Q
    000463  aa   000000 040656 
    000464  aa   140000 1110 00    276  	cwl	arg3		" Check second index
    000465  aa   000002 6000 04    277  	tze	2,ic
    000466  aa  0 01375 7001 00    278  	tsx0	pr0|signal_stringrange
                                   279  
                                   280  	return
    000467  aa   000000 000217 
                                   281  
                                   282  
                                   283  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                   284  
    000470                         285  first_scan:
                                   286  	scan		continue,continue
    000470                     
    000470  0a   000470 000221 
    000471  0a   000470 000220 
    000472                     
                                   287  
    000472                         288  abort_list:
                                   289  	scan		continue,(continue,next)
    000472                     
    000472  0a   000472 000221 
    000473  0a   000472 000220 
    000474  0a   000475 000220 
    000475                     
                                   290  
    000475                         291  error_macro:
                                   292  	error
    000475  aa   000000 000302 
                                   293  
                                   294  assign:	proc		2
    000476  aa   000000 001214 
                                   295  
                                   296  	dt_jump		(assign_ii,assign_ri,assign_di,assign_ci,assign_ir,assign_rr,assign_dr,assign_cr,assign_id,assign_rd,assign_dd,assign_cd,assign_ic,assign_rc,assign_dc,assign_cc,assign_e2,assign_e1,assign_t,assign_t)
    000477  aa   000024 000235 
    000500  00   000512 000520 
    000501  00   000526 000550 
    000502  00   000515 000531 
    000503  00   000542 000555 
    000504  00   000523 000537 
    000505  00   000534 000566 
    000506  00   000545 000552 
    000507  00   000563 000570 
    000510  00   000573 000637 
    000511  00   000642 000642 
                        000024 
                                   297  
    000512                         298  assign_ii:
                                   299  	load		q,arg2
    000512  aa   000000 100656 
                                   300  	store		q,arg1
    000513  aa   000000 040757 
                                   301  	return
    000514  aa   000000 000217 
                                   302  
    000515                         303  assign_ir:
                                   304  	s_call		cv_load.ri
    000515  0a   002060 000223 
                                   305  	store		q,arg1
    000516  aa   000000 040757 
                                   306  	return
    000517  aa   000000 000217 
                                   307  
    000520                         308  assign_ri:
                                   309  	s_call		cv_load.ir
    000520  0a   002050 000223 
                                   310  	store		eaq,arg1
    000521  aa   000000 042357 
                                   311  	return
    000522  aa   000000 000217 
                                   312  
    000523                         313  assign_id:
                                   314  	s_call		cv_load.di
    000523  0a   002101 000223 
                                   315  	store		q,arg1
    000524  aa   000000 040757 
                                   316  	return
    000525  aa   000000 000217 
                                   317  
    000526                         318  assign_di:
                                   319  	s_call		cv_load.id
    000526  0a   002071 000223 
                                   320  	store		deaq,arg1
    000527  aa   000000 042757 
                                   321  	return
    000530  aa   000000 000217 
                                   322  
    000531                         323  assign_rr:
                                   324  	load		eaq,arg2
    000531  aa   000000 102256 
                                   325  	store		eaq,arg1
    000532  aa   000000 042357 
                                   326  	return
    000533  aa   000000 000217 
                                   327  
    000534                         328  assign_dd:
                                   329  	load		deaq,arg2
    000534  aa   000000 102656 
                                   330  	store		deaq,arg1
    000535  aa   000000 042757 
                                   331  	return
    000536  aa   000000 000217 
                                   332  
    000537                         333  assign_rd:
                                   334  	load		deaq,arg2
    000537  aa   000000 102656 
    000540  aa   040000 4700 00    335  	fstr		arg1
                                   336  	return
    000541  aa   000000 000217 
                                   337  
    000542                         338  assign_dr:
                                   339  	load		eaq,arg2
    000542  aa   000000 102256 
                                   340  	store		deaq,arg1,no_update
    000543  aa   000001 042757 
                                   341  	return
    000544  aa   000000 000217 
                                   342  
    000545                         343  assign_ic:
                                   344  	s_call		cv_load.ri
    000545  0a   002060 000223 
                                   345  	store		q,arg1
    000546  aa   000000 040757 
                                   346  	return
    000547  aa   000000 000217 
                                   347  
    000550                         348  assign_ci:
                                   349  	s_call		cv_load.ir
    000550  0a   002050 000223 
                                   350  	jump		assign_cr.01
    000551  0a   000556 000220 
                                   351  
    000552                         352  assign_rc:
                                   353  	load		eaq,arg2
    000552  aa   000000 102256 
                                   354  	store		eaq,arg1
    000553  aa   000000 042357 
                                   355  	return
    000554  aa   000000 000217 
                                   356  
    000555                         357  assign_cr:
                                   358  	load		eaq,arg2
    000555  aa   000000 102256 
    000556                         359  assign_cr.01:
                                   360  	store		eaq,arg1,no_update
    000556  aa   000001 042357 
                                   361  	reset_eaq
    000557  aa   000006 000206 
    000560  aa   400000 4310 03    362  	fld		=0.,du
    000561  aa   040001 4550 00    363  	fst		arg1+1
                                   364  	return
    000562  aa   000000 000217 
                                   365  
    000563                         366  assign_dc:
                                   367  	load		eaq,arg2
    000563  aa   000000 102256 
                                   368  	store		deaq,arg1,no_update
    000564  aa   000001 042757 
                                   369  	return
    000565  aa   000000 000217 
                                   370  
    000566                         371  assign_cd:
                                   372  	load		deaq,arg2
    000566  aa   000000 102656 
                                   373  	jump		assign_cr.01
    000567  0a   000556 000220 
                                   374  
    000570                         375  assign_cc:
                                   376  	load		aq,arg2
    000570  aa   000000 101656 
                                   377  	store		aq,arg1
    000571  aa   000000 041757 
                                   378  	return
    000572  aa   000000 000217 
                                   379  
    000573                         380  assign_e2:
                                   381  	if_dt		logical,assign_l
    000573  0a   000577 020225 
                                   382  	if_dt		char,assign_h
    000574  0a   000604 010225 
                                   383  	error		310,op1
    000575  aa   000466 000702 
    000576  aa   000000 740303 
                        000001 
                                   384  
    000577                         385  assign_l:
                                   386  	swap		arg1
    000577  aa   000000 040202 
                                   387  
                                   388  	unless_dt		logical,logical.p
    000600  0a   000630 020226 
                                   389  
                                   390  	load		a,arg1
    000601  aa   000000 041256 
                                   391  	store		a,arg2
    000602  aa   000000 101357 
                                   392  	return
    000603  aa   000000 000217 
                                   393  
    000604                         394  assign_h:		" Modified 12/27/77 to allow char consts for all arith data types
                                   395  	dt_jump1		arg1,(assign_ih,assign_rh,assign_dh,assign_ch,assign_lh,assign_hh,assign_th)
    000604  aa   000007 040374 
    000605  00   000611 000611 
    000606  00   000616 000616 
    000607  00   000611 000623 
    000610  0a   000611 000000 
                        000007 
                                   396  
    000611                         397  assign_ih:
    000611                         398  assign_rh:
    000611                         399  assign_lh:
    000611                         400  assign_th:
                                   401  	unless_optype	constant,char2.p
    000611  0a   000634 200230 
                                   402  	pad_char_const_to_word	op1
    000612  aa   000000 740375 
                                   403  	load		a,op1
    000613  aa   000000 741256 
                                   404  	store		a,op2
    000614  aa   000000 701357 
                                   405  	return
    000615  aa   000000 000217 
                                   406  
    000616                         407  assign_dh:
    000616                         408  assign_ch:
                                   409  	unless_optype	constant,char2.p
    000616  0a   000634 200230 
                                   410  	pad_char_const_to_dw	op1
    000617  aa   000000 740376 
                                   411  	load		aq,op1
    000620  aa   000000 741656 
                                   412  	store		aq,op2
    000621  aa   000000 701757 
                                   413  	return
    000622  aa   000000 000217 
                                   414  
                                   415  
    000623                         416  assign_hh:
                                   417  	emit_eis
    000623  aa   000000 000207 
    000624  aa  0 40100 1005 00    418  	mlr		(pr),(pr),fill(040)
    000625  aa   100000 000000     419  	desc9a		arg2
    000626  aa   040000 000000     420  	desc9a		arg1
                                   421  
                                   422  	return
    000627  aa   000000 000217 
                                   423  
    000630                         424  logical.p:
                                   425  	print		338,arg1,op1
    000630  aa   000522 001301 
    000631  aa   000000 040303 
    000632  aa   000000 740303 
                        000002 
                                   426  	return
    000633  aa   000000 000217 
                                   427  
    000634                         428  char2.p:
                                   429  	print		337,op1
    000634  aa   000521 000701 
    000635  aa   000000 740303 
                        000001 
                                   430  	return
    000636  aa   000000 000217 
                                   431  
    000637                         432  assign_e1:
                                   433  	print		309,arg1
    000637  aa   000465 000701 
    000640  aa   000000 040303 
                        000001 
                                   434  	return
    000641  aa   000000 000217 
                                   435  
    000642                         436  assign_t:
                                   437  	dt_jump1		arg1,(assign_t.normal,assign_t.normal,assign_e1,assign_e1,assign_t.to_logical,assign_t.normal)
    000642  aa   000006 040374 
    000643  00   000654 000654 
    000644  00   000637 000637 
    000645  00   000646 000654 
                        000006 
                                   438  
    000646                         439  assign_t.to_logical:
                                   440  	load_for_test	tq,arg2
    000646  aa   000000 104761 
                                   441  	emit		2
    000647  aa   000002 000242 
    000650  aa   000002 6000 04    442  	tze		2,ic
    000651  aa   400000 2360 03    443  	ldq		131072,du
                                   444  	store		tq,arg1
    000652  aa   000000 044757 
                                   445  	jump		assign_t.return
    000653  0a   000657 000220 
                                   446  
    000654                         447  assign_t.normal:
                                   448  	unless_one_word_dt	arg1,assign_e1		" trap assignments to incorrect char variables
    000654  0a   000637 040315 
                                   449  	load		tq,arg2
    000655  aa   000000 104656 
                                   450  	store		tq,arg1
    000656  aa   000000 044757 
                                   451  
    000657                         452  assign_t.return:
                                   453  	return
    000657  aa   000000 000217 
                                   454  
                                   455  
                                   456  add:	func		2
    000660  aa   000000 001215 
                                   457  
                                   458  	dt_jump		(add_ii,add_ri,add_di,add_ci,add_ir,add_rr,add_dr,add_cr,add_id,add_rd,add_dd,add_cd,add_ic,add_rc,add_dc,add_cc,add_e2,add_e1,add_tl,add_tl)
    000661  aa   000024 000235 
    000662  00   000674 000700 
    000663  00   000704 000725 
    000664  00   000677 000707 
    000665  00   000716 000731 
    000666  00   000703 000715 
    000667  00   000712 000753 
    000670  00   000724 000730 
    000671  00   000752 000774 
    000672  00   001025 001023 
    000673  00   001027 001027 
                        000024 
                                   459  
    000674                         460  add_ii:
                                   461  	load_top		q
    000674  aa   000000 000657 
    000675  aa   040000 0760 00    462  	adq		arg1
                                   463  	return		q
    000676  aa   000001 000617 
                                   464  
    000677                         465  add_ir:
                                   466  	swap		arg1
    000677  aa   000000 040202 
                                   467  
    000700                         468  add_ri:
                                   469  	s_call		cv_load.ir
    000700  0a   002050 000223 
    000701  aa   040000 4750 00    470  	fad		arg1
                                   471  	return		eaq
    000702  aa   000001 002217 
                                   472  
    000703                         473  add_id:
                                   474  	swap		arg1
    000703  aa   000000 040202 
                                   475  
    000704                         476  add_di:
                                   477  	s_call		cv_load.id
    000704  0a   002071 000223 
    000705  aa   040000 4770 00    478  	dfad		arg1
                                   479  	return		deaq
    000706  aa   000001 002617 
                                   480  
    000707                         481  add_rr:
                                   482  	load_top		eaq
    000707  aa   000000 002257 
    000710  aa   040000 4750 00    483  	fad		arg1
                                   484  	return		eaq
    000711  aa   000001 002217 
                                   485  
    000712                         486  add_dd:
                                   487  	load_top		deaq
    000712  aa   000000 002657 
    000713  aa   040000 4770 00    488  	dfad		arg1
                                   489  	return		deaq
    000714  aa   000001 002617 
                                   490  
    000715                         491  add_rd:
                                   492  	swap		arg1
    000715  aa   000000 040202 
                                   493  
    000716                         494  add_dr:
                                   495  	if_eaq		eaq,arg2,add_dr.1
    000716  0a   000722 102233 
                                   496  
                                   497  	load		deaq,arg1
    000717  aa   000000 042656 
    000720  aa   100000 4750 00    498  	fad		arg2
                                   499  	return		deaq
    000721  aa   000001 002617 
                                   500  
    000722                         501  add_dr.1:
    000722  aa   040000 4770 00    502  	dfad		arg1
                                   503  	return		deaq
    000723  aa   000001 002617 
                                   504  
    000724                         505  add_ic:
                                   506  	swap		arg1
    000724  aa   000000 040202 
                                   507  
    000725                         508  add_ci:
                                   509  	s_call		cv_load.ir
    000725  0a   002050 000223 
                                   510  	push_temp		cmpx
    000726  aa   000000 002204 
                                   511  	jump		add_cr.1
    000727  0a   000742 000220 
                                   512  
    000730                         513  add_rc:
                                   514  	swap		arg1
    000730  aa   000000 040202 
                                   515  
    000731                         516  add_cr:
                                   517  	push_temp		cmpx
    000731  aa   000000 002204 
                                   518  
                                   519  	if_eaq		eaq,arg2,add_cr.1
    000732  0a   000742 102233 
                                   520  	if_eaq		eaq,arg1,add_cr.2
    000733  0a   000750 042233 
                                   521  
                                   522  	load		ieaq,arg1
    000734  aa   000000 043256 
                                   523  	store		ieaq,op1,no_update
    000735  aa   000001 743357 
    000736  aa   040000 4310 00    524  	fld		arg1
    000737  aa   100000 4750 00    525  	fad		arg2
                                   526  	in_reg		eaq,op1
    000740  aa   000000 742260 
                                   527  	return		op1
    000741  aa   000001 740217 
                                   528  
    000742                         529  add_cr.1:
    000742  aa   040000 4750 00    530  	fad		arg1
    000743                         531  add_cr.11:
                                   532  	reset_eaq				"so store sees no rounded state
    000743  aa   000006 000206 
                                   533  	store		eaq,op1,no_update
    000744  aa   000001 742357 
    000745  aa   040001 4310 00    534  	fld		arg1+1
                                   535  	in_reg		ieaq,op1
    000746  aa   000000 743260 
                                   536  	return		op1
    000747  aa   000001 740217 
                                   537  
    000750                         538  add_cr.2:
    000750  aa   100000 4750 00    539  	fad		arg2
                                   540  	jump		add_cr.11
    000751  0a   000743 000220 
                                   541  
    000752                         542  add_dc:
                                   543  	swap		arg1
    000752  aa   000000 040202 
                                   544  
    000753                         545  add_cd:
                                   546  	push_temp		cmpx
    000753  aa   000000 002204 
                                   547  
                                   548  	if_eaq		deaq,arg2,add_cd.1
    000754  0a   000764 102633 
                                   549  	if_eaq		eaq,arg1,add_cd.2
    000755  0a   000772 042233 
                                   550  
                                   551  	load		ieaq,arg1
    000756  aa   000000 043256 
                                   552  	store		ieaq,op1,no_update
    000757  aa   000001 743357 
    000760  aa   040000 4310 00    553  	fld		arg1
    000761  aa   100000 4770 00    554  	dfad		arg2
                                   555  	in_reg		eaq,op1
    000762  aa   000000 742260 
                                   556  	return		op1
    000763  aa   000001 740217 
                                   557  
    000764                         558  add_cd.1:
    000764  aa   040000 4750 00    559  	fad		arg1
    000765                         560  add_cd.11:
                                   561  	reset_eaq					"so store sees ^ round
    000765  aa   000006 000206 
                                   562  	store		eaq,op1,no_update
    000766  aa   000001 742357 
    000767  aa   040001 4310 00    563  	fld		arg1+1
                                   564  	in_reg		ieaq,op1
    000770  aa   000000 743260 
                                   565  	return		op1
    000771  aa   000001 740217 
                                   566  
    000772                         567  add_cd.2:
    000772  aa   100000 4770 00    568  	dfad		arg2
                                   569  	jump		add_cd.11
    000773  0a   000765 000220 
                                   570  
    000774                         571  add_cc:
                                   572  	push_temp		cmpx
    000774  aa   000000 002204 
                                   573  
                                   574  	if_eaq		eaq,arg2,add_cc.1
    000775  0a   001010 102233 
                                   575  	if_eaq		ieaq,arg2,add_cc.2
    000776  0a   001017 103233 
                                   576  	if_eaq		eaq,arg1,add_cc.3
    000777  0a   001021 042233 
                                   577  
                                   578  	load		ieaq,arg1
    001000  aa   000000 043256 
    001001  aa   100001 4750 00    579  	fad		arg2+1
    001002                         580  add_cc.01:
                                   581  	reset_eaq					"set ^rounded
    001002  aa   000006 000206 
                                   582  	store		ieaq,op1,no_update
    001003  aa   000001 743357 
    001004  aa   040000 4310 00    583  	fld		arg1
    001005  aa   100000 4750 00    584  	fad		arg2
                                   585  	in_reg		eaq,op1
    001006  aa   000000 742260 
                                   586  	return		op1
    001007  aa   000001 740217 
                                   587  
    001010                         588  add_cc.1:
    001010  aa   040000 4750 00    589  	fad		arg1
    001011                         590  add_cc.11:
                                   591  	reset_eaq					"set ^rounded
    001011  aa   000006 000206 
                                   592  	store		eaq,op1,no_update
    001012  aa   000001 742357 
    001013  aa   040001 4310 00    593  	fld		arg1+1
    001014  aa   100001 4750 00    594  	fad		arg2+1
                                   595  	in_reg		ieaq,op1
    001015  aa   000000 743260 
                                   596  	return		op1
    001016  aa   000001 740217 
                                   597  
    001017                         598  add_cc.2:
    001017  aa   040001 4750 00    599  	fad		arg1+1
                                   600  	jump		add_cc.01
    001020  0a   001002 000220 
                                   601  
    001021                         602  add_cc.3:
    001021  aa   100000 4750 00    603  	fad		arg2
                                   604  	jump		add_cc.11
    001022  0a   001011 000220 
                                   605  
    001023                         606  add_e1:
                                   607  	error		309,arg1
    001023  aa   000465 000702 
    001024  aa   000000 040303 
                        000001 
                                   608  
    001025                         609  add_e2:
                                   610  	error		310,arg2
    001025  aa   000466 000702 
    001026  aa   000000 100303 
                        000001 
                                   611  
    001027                         612  add_tl:
                                   613  	load_top		tq
    001027  aa   000000 004657 
                                   614  	dt_jump1		arg1,(add_tl.1,add_e1,add_e1,add_e1,add_e1,add_e1,add_tl.1)
    001030  aa   000007 040374 
    001031  00   001035 001023 
    001032  00   001023 001023 
    001033  00   001023 001023 
    001034  0a   001035 000000 
                        000007 
                                   615  
    001035                         616  add_tl.1:
    001035  aa   040000 0760 00    617  	adq		arg1
                                   618  	return		tq
    001036  aa   000001 004617 
                                   619  
                                   620  sub:	func		2
    001037  aa   000000 001215 
                                   621  
                                   622  	dt_jump		(sub_ii,sub_ri,sub_di,sub_ci,sub_ir,sub_rr,sub_dr,sub_cr,sub_id,sub_rd,sub_dd,sub_cd,sub_ic,sub_rc,sub_dc,sub_cc,sub_e2,sub_e1,sub_tl,sub_tl)
    001040  aa   000024 000235 
    001041  00   001053 001062 
    001042  00   001111 001214 
    001043  00   001056 001134 
    001044  00   001167 001260 
    001045  00   001105 001156 
    001046  00   001145 001334 
    001047  00   001200 001230 
    001050  00   001304 001360 
    001051  00   001416 001414 
    001052  00   001420 001420 
                        000024 
                                   623  
    001053                         624  sub_ii:
                                   625  	load		q,arg1
    001053  aa   000000 040656 
    001054  aa   100000 1760 00    626  	sbq		arg2
                                   627  	return		q
    001055  aa   000001 000617 
                                   628  
    001056                         629  sub_ir:
                                   630  	swap		arg1
    001056  aa   000000 040202 
                                   631  
                                   632  	s_call		cv_load.ir
    001057  0a   002050 000223 
    001060  aa   040000 5750 00    633  	fsb		arg1
                                   634  	return		eaq
    001061  aa   000001 002217 
                                   635  
    001062                         636  sub_ri:
                                   637  	if_eaq		q,arg2,sub_ri.1
    001062  0a   001077 100633 
                                   638  
                                   639  	if_optype		constant,conv_sub_ri
    001063  0a   001071 200227 
                                   640  
                                   641  	use_eaq
    001064  aa   000000 000255 
    001065  aa   100000 3360 00    642  	lcq		arg2
    001066  aa  0 00465 7001 00    643  	tsx0		pr0|integer_to_real
    001067  aa   040000 4750 00    644  	fad		arg1
                                   645  	return		eaq
    001070  aa   000001 002217 
                                   646  
    001071                         647  conv_sub_ri:
                                   648  	convert_constant	real
    001071  aa   000000 001211 
                                   649  	load		eaq,arg2
    001072  aa   000000 102256 
                                   650  	emit		1
    001073  aa   000001 000242 
    001074  aa   000000 5130 00    651  	fneg
    001075  aa   040000 4750 00    652  	fad		arg1
                                   653  	return		eaq
    001076  aa   000001 002217 
                                   654  
    001077                         655  sub_ri.1:
                                   656  	use_eaq
    001077  aa   000000 000255 
    001100  aa  0 00465 7001 00    657  	tsx0		pr0|integer_to_real
                                   658  	emit		1
    001101  aa   000001 000242 
    001102  aa   000000 5130 00    659  	fneg
    001103  aa   040000 4750 00    660  	fad		arg1
                                   661  	return		eaq
    001104  aa   000001 002217 
                                   662  
    001105                         663  sub_id:
                                   664  	swap		arg1
    001105  aa   000000 040202 
                                   665  
                                   666  	s_call		cv_load.id
    001106  0a   002071 000223 
    001107  aa   040000 5770 00    667  	dfsb		arg1
                                   668  	return		deaq
    001110  aa   000001 002617 
                                   669  
    001111                         670  sub_di:
                                   671  	if_eaq		q,arg2,sub_di.1
    001111  0a   001126 100633 
                                   672  
                                   673  	if_optype		constant,conv_sub_di
    001112  0a   001120 200227 
                                   674  
                                   675  	use_eaq
    001113  aa   000000 000255 
    001114  aa   100000 3360 00    676  	lcq		arg2
    001115  aa  0 00465 7001 00    677  	tsx0		pr0|integer_to_double
    001116  aa   040000 4770 00    678  	dfad		arg1
                                   679  	return		deaq
    001117  aa   000001 002617 
                                   680  
    001120                         681  conv_sub_di:
                                   682  	convert_constant	dp
    001120  aa   000000 001611 
                                   683  	load		deaq,arg2
    001121  aa   000000 102656 
                                   684  	emit		1
    001122  aa   000001 000242 
    001123  aa   000000 5130 00    685  	fneg
    001124  aa   040000 4770 00    686  	dfad		arg1
                                   687  	return		deaq
    001125  aa   000001 002617 
                                   688  
    001126                         689  sub_di.1:
                                   690  	use_eaq
    001126  aa   000000 000255 
    001127  aa  0 00465 7001 00    691  	tsx0		pr0|integer_to_double
                                   692  	emit		1
    001130  aa   000001 000242 
    001131  aa   000000 5130 00    693  	fneg
    001132  aa   040000 4770 00    694  	dfad		arg1
                                   695  	return		deaq
    001133  aa   000001 002617 
                                   696  
    001134                         697  sub_rr:
                                   698  	use_ind
    001134  aa   000007 000206 
                                   699  	if_eaq		eaq,arg2,sub_rr.1
    001135  0a   001141 102233 
                                   700  
                                   701  	load		eaq,arg1
    001136  aa   000000 042256 
    001137  aa   100000 5750 00    702  	fsb		arg2
                                   703  	return		eaq
    001140  aa   000001 002217 
                                   704  
    001141                         705  sub_rr.1:
                                   706  	emit		1
    001141  aa   000001 000242 
    001142  aa   000000 5130 00    707  	fneg
    001143  aa   040000 4750 00    708  	fad		arg1
                                   709  	return		eaq
    001144  aa   000001 002217 
                                   710  
    001145                         711  sub_dd:
                                   712  	use_ind
    001145  aa   000007 000206 
                                   713  	if_eaq		deaq,arg2,sub_dd.1
    001146  0a   001152 102633 
                                   714  
                                   715  	load		deaq,arg1
    001147  aa   000000 042656 
    001150  aa   100000 5770 00    716  	dfsb		arg2
                                   717  	return		deaq
    001151  aa   000001 002617 
                                   718  
    001152                         719  sub_dd.1:
                                   720  	emit		1
    001152  aa   000001 000242 
    001153  aa   000000 5130 00    721  	fneg
    001154  aa   040000 4770 00    722  	dfad		arg1
                                   723  	return		deaq
    001155  aa   000001 002617 
                                   724  
    001156                         725  sub_rd:
                                   726  	use_ind
    001156  aa   000007 000206 
                                   727  	if_eaq		deaq,arg2,sub_rd.1
    001157  0a   001163 102633 
                                   728  
                                   729  	load		eaq,arg1
    001160  aa   000000 042256 
    001161  aa   100000 5770 00    730  	dfsb		arg2
                                   731  	return		deaq
    001162  aa   000001 002617 
                                   732  
    001163                         733  sub_rd.1:
                                   734  	emit		1
    001163  aa   000001 000242 
    001164  aa   000000 5130 00    735  	fneg
    001165  aa   040000 4750 00    736  	fad		arg1
                                   737  	return		deaq
    001166  aa   000001 002617 
                                   738  
    001167                         739  sub_dr:
                                   740  	use_ind
    001167  aa   000007 000206 
                                   741  	if_eaq		eaq,arg2,sub_dr.1
    001170  0a   001174 102233 
                                   742  
                                   743  	load		deaq,arg1
    001171  aa   000000 042656 
    001172  aa   100000 5750 00    744  	fsb		arg2
                                   745  	return		deaq
    001173  aa   000001 002617 
                                   746  
    001174                         747  sub_dr.1:
                                   748  	emit		1
    001174  aa   000001 000242 
    001175  aa   000000 5130 00    749  	fneg
    001176  aa   040000 4770 00    750  	dfad		arg1
                                   751  	return		deaq
    001177  aa   000001 002617 
                                   752  
    001200                         753  sub_ic:
                                   754  	push_temp		cmpx
    001200  aa   000000 002204 
                                   755  
                                   756  	swap		arg1
    001201  aa   000000 040202 
                                   757  
                                   758  	if_optype		constant,conv_sub_ic
    001202  0a   001210 200227 
                                   759  
                                   760  	swap		arg1
    001203  aa   000000 040202 
                                   761  	load		q,arg1
    001204  aa   000000 040656 
                                   762  	use_eaq
    001205  aa   000000 000255 
    001206  aa  0 00465 7001 00    763  	tsx0		pr0|integer_to_real
                                   764  	jump		sub_rc.1
    001207  0a   001244 000220 
                                   765  
    001210                         766  conv_sub_ic:
                                   767  	convert_constant	real
    001210  aa   000000 001211 
                                   768  	swap		arg1
    001211  aa   000000 040202 
                                   769  	load		eaq,arg1
    001212  aa   000000 042256 
                                   770  	jump		sub_rc.1
    001213  0a   001244 000220 
                                   771  
    001214                         772  sub_ci:
                                   773  	push_temp		cmpx
    001214  aa   000000 002204 
                                   774  
                                   775  	swap		arg2
    001215  aa   000000 100202 
                                   776  
                                   777  	if_optype		constant,conv_sub_ci
    001216  0a   001224 200227 
                                   778  
                                   779  	swap		arg2
    001217  aa   000000 100202 
                                   780  	use_eaq
    001220  aa   000000 000255 
    001221  aa   100000 3360 00    781  	lcq		arg2
    001222  aa  0 00465 7001 00    782  	tsx0		pr0|integer_to_real
                                   783  	jump		sub_cr.10
    001223  0a   001274 000220 
                                   784  
    001224                         785  conv_sub_ci:
                                   786  	convert_constant	real
    001224  aa   000000 001211 
                                   787  
                                   788  	swap		arg2
    001225  aa   000000 100202 
                                   789  	load		eaq,arg2
    001226  aa   000000 102256 
                                   790  	jump		sub_cr.1
    001227  0a   001272 000220 
                                   791  
    001230                         792  sub_rc:
                                   793  	push_temp		cmpx
    001230  aa   000000 002204 
                                   794  
                                   795  	use_ind
    001231  aa   000007 000206 
                                   796  	if_eaq		eaq,arg1,sub_rc.1
    001232  0a   001244 042233 
                                   797  	if_eaq		eaq,arg2,sub_rc.2
    001233  0a   001254 102233 
                                   798  
                                   799  	load		ieaq,arg2
    001234  aa   000000 103256 
                                   800  	emit		1
    001235  aa   000001 000242 
    001236  aa   000000 5130 00    801  	fneg
                                   802  	store		ieaq,op1,no_update
    001237  aa   000001 743357 
    001240  aa   040000 4310 00    803  	fld		arg1
    001241  aa   100000 5750 00    804  	fsb		arg2
                                   805  	in_reg		eaq,op1
    001242  aa   000000 742260 
                                   806  	return		op1
    001243  aa   000001 740217 
                                   807  
    001244                         808  sub_rc.1:
    001244  aa   100000 5750 00    809  	fsb		arg2
    001245                         810  sub_rc.11:
                                   811  	reset_eaq					"set ^ rounded
    001245  aa   000006 000206 
                                   812  	store		eaq,op1,no_update
    001246  aa   000001 742357 
    001247  aa   100001 4310 00    813  	fld		arg2+1
                                   814  	emit		1
    001250  aa   000001 000242 
    001251  aa   000000 5130 00    815  	fneg
                                   816  	in_reg		ieaq,op1
    001252  aa   000000 743260 
                                   817  	return		op1
    001253  aa   000001 740217 
                                   818  
    001254                         819  sub_rc.2:
                                   820  	emit		1
    001254  aa   000001 000242 
    001255  aa   000000 5130 00    821  	fneg
    001256  aa   040000 4750 00    822  	fad		arg1
                                   823  	jump		sub_rc.11
    001257  0a   001245 000220 
                                   824  
    001260                         825  sub_cr:
                                   826  	push_temp		cmpx
    001260  aa   000000 002204 
                                   827  
                                   828  	use_ind
    001261  aa   000007 000206 
                                   829  	if_eaq		eaq,arg2,sub_cr.1
    001262  0a   001272 102233 
                                   830  	if_eaq		eaq,arg1,sub_cr.2
    001263  0a   001302 042233 
                                   831  
                                   832  	load		ieaq,arg1
    001264  aa   000000 043256 
                                   833  	store		ieaq,op1,no_update
    001265  aa   000001 743357 
    001266  aa   040000 4310 00    834  	fld		arg1
    001267  aa   100000 5750 00    835  	fsb		arg2
                                   836  	in_reg		eaq,op1
    001270  aa   000000 742260 
                                   837  	return		op1
    001271  aa   000001 740217 
                                   838  
    001272                         839  sub_cr.1:
                                   840  	emit		1
    001272  aa   000001 000242 
    001273  aa   000000 5130 00    841  	fneg
    001274                         842  sub_cr.10:
    001274  aa   040000 4750 00    843  	fad		arg1
    001275                         844  sub_cr.11:
                                   845  	reset_eaq					"set ^rounded
    001275  aa   000006 000206 
                                   846  	store		eaq,op1,no_update
    001276  aa   000001 742357 
    001277  aa   040001 4310 00    847  	fld		arg1+1
                                   848  	in_reg		ieaq,op1
    001300  aa   000000 743260 
                                   849  	return		op1
    001301  aa   000001 740217 
                                   850  
    001302                         851  sub_cr.2:
    001302  aa   100000 5750 00    852  	fsb		arg2
                                   853  	jump		sub_cr.11
    001303  0a   001275 000220 
                                   854  
    001304                         855  sub_dc:
                                   856  	push_temp		cmpx
    001304  aa   000000 002204 
                                   857  
                                   858  	use_ind
    001305  aa   000007 000206 
                                   859  	if_eaq		deaq,arg1,sub_dc.1
    001306  0a   001320 042633 
                                   860  	if_eaq		eaq,arg2,sub_dc.2
    001307  0a   001330 102233 
                                   861  
                                   862  	load		ieaq,arg2
    001310  aa   000000 103256 
                                   863  	emit		1
    001311  aa   000001 000242 
    001312  aa   000000 5130 00    864  	fneg
                                   865  	store		ieaq,op1,no_update
    001313  aa   000001 743357 
    001314  aa   040000 4330 00    866  	dfld		arg1
    001315  aa   100000 5750 00    867  	fsb		arg2
                                   868  	in_reg		eaq,op1
    001316  aa   000000 742260 
                                   869  	return		op1
    001317  aa   000001 740217 
                                   870  
    001320                         871  sub_dc.1:
    001320  aa   100000 5750 00    872  	fsb		arg2
    001321                         873  sub_dc.11:
                                   874  	reset_eaq					"set ^rounded
    001321  aa   000006 000206 
                                   875  	store		eaq,op1,no_update
    001322  aa   000001 742357 
    001323  aa   100001 4310 00    876  	fld		arg2+1
                                   877  	emit		1
    001324  aa   000001 000242 
    001325  aa   000000 5130 00    878  	fneg
                                   879  	in_reg		ieaq,op1
    001326  aa   000000 743260 
                                   880  	return		op1
    001327  aa   000001 740217 
                                   881  
    001330                         882  sub_dc.2:
                                   883  	emit		1
    001330  aa   000001 000242 
    001331  aa   000000 5130 00    884  	fneg
    001332  aa   040000 4770 00    885  	dfad		arg1
                                   886  	jump		sub_dc.11
    001333  0a   001321 000220 
                                   887  
    001334                         888  sub_cd:
                                   889  	push_temp		cmpx
    001334  aa   000000 002204 
                                   890  
                                   891  	use_ind
    001335  aa   000007 000206 
                                   892  	if_eaq		deaq,arg2,sub_cd.1
    001336  0a   001346 102633 
                                   893  	if_eaq		eaq,arg1,sub_cd.2
    001337  0a   001356 042233 
                                   894  
                                   895  	load		ieaq,arg1
    001340  aa   000000 043256 
                                   896  	store		ieaq,op1,no_update
    001341  aa   000001 743357 
    001342  aa   040000 4310 00    897  	fld		arg1
    001343  aa   100000 5770 00    898  	dfsb		arg2
                                   899  	in_reg		eaq,op1
    001344  aa   000000 742260 
                                   900  	return		op1
    001345  aa   000001 740217 
                                   901  
    001346                         902  sub_cd.1:
                                   903  	emit		1
    001346  aa   000001 000242 
    001347  aa   000000 5130 00    904  	fneg
    001350                         905  sub_cd.10:
    001350  aa   040000 4750 00    906  	fad		arg1
    001351                         907  sub_cd.11:
                                   908  	reset_eaq					"set ^rounded
    001351  aa   000006 000206 
                                   909  	store		eaq,op1,no_update
    001352  aa   000001 742357 
    001353  aa   040001 4310 00    910  	fld		arg1+1
                                   911  	in_reg		ieaq,op1
    001354  aa   000000 743260 
                                   912  	return		op1
    001355  aa   000001 740217 
                                   913  
    001356                         914  sub_cd.2:
    001356  aa   100000 5770 00    915  	dfsb		arg2
                                   916  	jump		sub_cd.11
    001357  0a   001351 000220 
                                   917  
    001360                         918  sub_cc:
                                   919  	push_temp		cmpx
    001360  aa   000000 002204 
                                   920  
                                   921  	use_ind
    001361  aa   000007 000206 
                                   922  	if_eaq		eaq,arg2,sub_cc.1
    001362  0a   001375 102233 
                                   923  	if_eaq		ieaq,arg2,sub_cc.2
    001363  0a   001406 103233 
                                   924  	if_eaq		eaq,arg1,sub_cc.3
    001364  0a   001412 042233 
                                   925  
                                   926  	load		ieaq,arg1
    001365  aa   000000 043256 
    001366  aa   100001 5750 00    927  	fsb		arg2+1
    001367                         928  sub_cc.01:
                                   929  	reset_eaq					"set ^rounded
    001367  aa   000006 000206 
                                   930  	store		ieaq,op1,no_update
    001370  aa   000001 743357 
    001371  aa   040000 4310 00    931  	fld		arg1
    001372  aa   100000 5750 00    932  	fsb		arg2
                                   933  	in_reg		eaq,op1
    001373  aa   000000 742260 
                                   934  	return		op1
    001374  aa   000001 740217 
                                   935  
    001375                         936  sub_cc.1:
                                   937  	emit		1
    001375  aa   000001 000242 
    001376  aa   000000 5130 00    938  	fneg
    001377  aa   040000 4750 00    939  	fad		arg1
    001400                         940  sub_cc.11:
                                   941  	reset_eaq					"set ^rounded
    001400  aa   000006 000206 
                                   942  	store		eaq,op1,no_update
    001401  aa   000001 742357 
    001402  aa   040001 4310 00    943  	fld		arg1+1
    001403  aa   100001 5750 00    944  	fsb		arg2+1
                                   945  	in_reg		ieaq,op1
    001404  aa   000000 743260 
                                   946  	return		op1
    001405  aa   000001 740217 
                                   947  
    001406                         948  sub_cc.2:
                                   949  	emit		1
    001406  aa   000001 000242 
    001407  aa   000000 5130 00    950  	fneg
    001410  aa   040001 4750 00    951  	fad		arg1+1
                                   952  	jump		sub_cc.01
    001411  0a   001367 000220 
                                   953  
    001412                         954  sub_cc.3:
    001412  aa   100000 5750 00    955  	fsb		arg2
                                   956  	jump		sub_cc.11
    001413  0a   001400 000220 
                                   957  
    001414                         958  sub_e1:
                                   959  	error		309,arg1
    001414  aa   000465 000702 
    001415  aa   000000 040303 
                        000001 
                                   960  
    001416                         961  sub_e2:
                                   962  	error		310,arg2
    001416  aa   000466 000702 
    001417  aa   000000 100303 
                        000001 
                                   963  
    001420                         964  sub_tl:
                                   965  	unless_dt		(int,typeless),sub_e2
    001420  0a   001416 404226 
                                   966  	dt_jump1		arg1,(sub_tl.1,sub_e1,sub_e1,sub_e1,sub_e1,sub_e1,sub_tl.1)
    001421  aa   000007 040374 
    001422  00   001427 001414 
    001423  00   001414 001414 
    001424  00   001414 001414 
    001425  0a   001427 000000 
                        000007 
                                   967  	load		tq,arg1
    001426  aa   000000 044656 
                                   968  
    001427                         969  sub_tl.1:
    001427  aa   100000 1760 00    970  	sbq		arg2
                                   971  	return		tq
    001430  aa   000001 004617 
                                   972  
                                   973  mult:	func		2
    001431  aa   000000 001215 
                                   974  
                                   975  	dt_jump		(mult_ii,mult_ri,mult_di,mult_ci,mult_ir,mult_rr,mult_dr,mult_cr,mult_id,mult_rd,mult_dd,mult_cd,mult_ic,mult_rc,mult_dc,mult_cc,mult_e2,mult_e1,mult_tl,mult_tl)
    001432  aa   000024 000235 
    001433  00   001445 001454 
    001434  00   001460 001501 
    001435  00   001453 001463 
    001436  00   001472 001522 
    001437  00   001457 001471 
    001440  00   001466 001550 
    001441  00   001500 001521 
    001442  00   001547 001575 
    001443  00   001620 001616 
    001444  00   001603 001603 
                        000024 
                                   976  
    001445                         977  mult_ii:
                                   978  	use_eaq
    001445  aa   000000 000255 
                                   979  	load_top		q
    001446  aa   000000 000657 
    001447  aa   040000 4020 00    980  	mpy		arg1
                                   981  
                                   982  	unless_check_multiply	mult_ii.1
    001450  0a   001452 000313 
    001451  aa  0 01467 7001 00    983  	tsx0		pr0|mpy_overflow_check
                                   984  
    001452                         985  mult_ii.1:
                                   986  	return		q
    001452  aa   000001 000617 
                                   987  
    001453                         988  mult_ir:
                                   989  	swap		arg1
    001453  aa   000000 040202 
                                   990  
    001454                         991  mult_ri:
                                   992  	s_call		cv_load.ir
    001454  0a   002050 000223 
    001455  aa   040000 4610 00    993  	fmp		arg1
                                   994  	return		eaq
    001456  aa   000001 002217 
                                   995  
    001457                         996  mult_id:
                                   997  	swap		arg1
    001457  aa   000000 040202 
                                   998  
    001460                         999  mult_di:
                                  1000  	s_call		cv_load.id
    001460  0a   002071 000223 
    001461  aa   040000 4630 00   1001  	dfmp		arg1
                                  1002  	return		deaq
    001462  aa   000001 002617 
                                  1003  
    001463                        1004  mult_rr:
                                  1005  	load_top		eaq
    001463  aa   000000 002257 
    001464  aa   040000 4610 00   1006  	fmp		arg1
                                  1007  	return		eaq
    001465  aa   000001 002217 
                                  1008  
    001466                        1009  mult_dd:
                                  1010  	load_top		deaq
    001466  aa   000000 002657 
    001467  aa   040000 4630 00   1011  	dfmp		arg1
                                  1012  	return		deaq
    001470  aa   000001 002617 
                                  1013  
    001471                        1014  mult_rd:
                                  1015  	swap		arg1
    001471  aa   000000 040202 
                                  1016  
    001472                        1017  mult_dr:
                                  1018  	if_eaq		eaq,arg2,mult_dr.1
    001472  0a   001476 102233 
                                  1019  
                                  1020  	load		deaq,arg1
    001473  aa   000000 042656 
    001474  aa   100000 4610 00   1021  	fmp		arg2
                                  1022  	return		deaq
    001475  aa   000001 002617 
                                  1023  
    001476                        1024  mult_dr.1:
    001476  aa   040000 4630 00   1025  	dfmp		arg1
                                  1026  	return		deaq
    001477  aa   000001 002617 
                                  1027  
    001500                        1028  mult_ic:
                                  1029  	swap		arg1
    001500  aa   000000 040202 
                                  1030  
    001501                        1031  mult_ci:
                                  1032  	push_temp		cmpx
    001501  aa   000000 002204 
                                  1033  
                                  1034  	swap		arg2
    001502  aa   000000 100202 
                                  1035  
                                  1036  	if_optype		constant,conv_mult_ci
    001503  0a   001515 200227 
                                  1037  
                                  1038  	swap		arg2
    001504  aa   000000 100202 
                                  1039  	push_temp		real
    001505  aa   000000 001204 
                                  1040  
                                  1041  	load		q,arg2
    001506  aa   000000 100656 
                                  1042  	use_eaq
    001507  aa   000000 000255 
    001510  aa  0 00465 7001 00   1043  	tsx0		pr0|integer_to_real
                                  1044  
                                  1045  	swap		arg2
    001511  aa   000000 100202 
                                  1046  	store		eaq,arg2,no_update
    001512  aa   000001 102357 
                                  1047  	pop		op1
    001513  aa   000000 740203 
                                  1048  	jump		mult_cr.1
    001514  0a   001535 000220 
                                  1049  
    001515                        1050  conv_mult_ci:
                                  1051  	convert_constant	real
    001515  aa   000000 001211 
                                  1052  
                                  1053  	swap		arg2
    001516  aa   000000 100202 
                                  1054  	load		eaq,arg2
    001517  aa   000000 102256 
                                  1055  	jump		mult_cr.1
    001520  0a   001535 000220 
                                  1056  
    001521                        1057  mult_rc:
                                  1058  	swap		arg1
    001521  aa   000000 040202 
                                  1059  
    001522                        1060  mult_cr:
                                  1061  	push_temp		cmpx
    001522  aa   000000 002204 
                                  1062  
                                  1063  	if_eaq		eaq,arg2,mult_cr.1
    001523  0a   001535 102233 
                                  1064  	if_eaq		eaq,arg1,mult_cr.2
    001524  0a   001544 042233 
                                  1065  
                                  1066  	load		ieaq,arg1
    001525  aa   000000 043256 
    001526  aa   100000 4610 00   1067  	fmp		arg2
                                  1068  	reset_eaq					"set ^rounded
    001527  aa   000006 000206 
                                  1069  	store		ieaq,op1,no_update
    001530  aa   000001 743357 
    001531  aa   040000 4310 00   1070  	fld		arg1
    001532  aa   100000 4610 00   1071  	fmp		arg2
                                  1072  	in_reg		eaq,op1
    001533  aa   000000 742260 
                                  1073  	return		op1
    001534  aa   000001 740217 
                                  1074  
    001535                        1075  mult_cr.1:
                                  1076  	use_eaq
    001535  aa   000000 000255 
    001536  aa   040000 4610 00   1077  	fmp		arg1
    001537                        1078  mult_cr.11:
                                  1079  	store		eaq,op1,no_update
    001537  aa   000001 742357 
    001540  aa   100000 4310 00   1080  	fld		arg2
    001541  aa   040001 4610 00   1081  	fmp		arg1+1
                                  1082  	in_reg		ieaq,op1
    001542  aa   000000 743260 
                                  1083  	return		op1
    001543  aa   000001 740217 
                                  1084  
    001544                        1085  mult_cr.2:
                                  1086  	reset_eaq					"set ^rounded (operand needn't be saved)
    001544  aa   000006 000206 
    001545  aa   100000 4610 00   1087  	fmp		arg2
                                  1088  	jump		mult_cr.11
    001546  0a   001537 000220 
                                  1089  
    001547                        1090  mult_dc:
                                  1091  	swap		arg1
    001547  aa   000000 040202 
                                  1092  
    001550                        1093  mult_cd:
                                  1094  	push_temp		cmpx
    001550  aa   000000 002204 
                                  1095  
                                  1096  	if_eaq		deaq,arg2,mult_cd.1
    001551  0a   001563 102633 
                                  1097  	if_eaq		eaq,arg1,mult_cd.2
    001552  0a   001572 042233 
                                  1098  
                                  1099  	load		ieaq,arg1
    001553  aa   000000 043256 
    001554  aa   100000 4630 00   1100  	dfmp		arg2
                                  1101  	reset_eaq					"set ^rounded
    001555  aa   000006 000206 
                                  1102  	store		ieaq,op1,no_update
    001556  aa   000001 743357 
    001557  aa   040000 4310 00   1103  	fld		arg1
    001560  aa   100000 4630 00   1104  	dfmp		arg2
                                  1105  	in_reg		eaq,op1
    001561  aa   000000 742260 
                                  1106  	return		op1
    001562  aa   000001 740217 
                                  1107  
    001563                        1108  mult_cd.1:
                                  1109  	use_eaq
    001563  aa   000000 000255 
    001564  aa   040000 4610 00   1110  	fmp		arg1
    001565                        1111  mult_cd.11:
                                  1112  	store		eaq,op1,no_update
    001565  aa   000001 742357 
    001566  aa   100000 4330 00   1113  	dfld		arg2
    001567  aa   040001 4610 00   1114  	fmp		arg1+1
                                  1115  	in_reg		ieaq,op1
    001570  aa   000000 743260 
                                  1116  	return		op1
    001571  aa   000001 740217 
                                  1117  
    001572                        1118  mult_cd.2:
                                  1119  	reset_eaq					"set ^rounded (operand needn't be saved)
    001572  aa   000006 000206 
    001573  aa   100000 4630 00   1120  	dfmp		arg2
                                  1121  	jump		mult_cd.11
    001574  0a   001565 000220 
                                  1122  
    001575                        1123  mult_cc:
                                  1124  	load		aq,arg1
    001575  aa   000000 041656 
                                  1125  	load_pr		pr2,arg2
    001576  aa   000003 100251 
    001577  aa  0 00773 7001 00   1126  	tsx0		pr0|complex_multiply
    001600  aa  6 00070 2371 00   1127  	ldaq		pr6|complex
                                  1128  	free_regs
    001601  aa   000004 000206 
                                  1129  	return		aq
    001602  aa   000001 001617 
                                  1130  
                                  1131  
    001603                        1132  mult_tl:
                                  1133  	load_top		tq
    001603  aa   000000 004657 
                                  1134  	dt_jump1		arg1,(mult_tl.1,mult_e1,mult_e1,mult_e1,mult_e1,mult_e1,mult_tl.1)
    001604  aa   000007 040374 
    001605  00   001611 001616 
    001606  00   001616 001616 
    001607  00   001616 001616 
    001610  0a   001611 000000 
                        000007 
                                  1135  
    001611                        1136  mult_tl.1:
                                  1137  	use_eaq
    001611  aa   000000 000255 
    001612  aa   040000 4020 00   1138  	mpy		arg1
                                  1139  
                                  1140  	unless_check_multiply	mult_tl.2
    001613  0a   001615 000313 
    001614  aa  0 01467 7001 00   1141  	tsx0		pr0|mpy_overflow_check
                                  1142  
    001615                        1143  mult_tl.2:
                                  1144  	return		tq
    001615  aa   000001 004617 
                                  1145  
    001616                        1146  mult_e1:
                                  1147  	error		309,arg1
    001616  aa   000465 000702 
    001617  aa   000000 040303 
                        000001 
                                  1148  
    001620                        1149  mult_e2:
                                  1150  	error		310,arg2
    001620  aa   000466 000702 
    001621  aa   000000 100303 
                        000001 
                                  1151  
                                  1152  div:	func		2
    001622  aa   000000 001215 
                                  1153  
                                  1154  	dt_jump		(div_ii,div_ri,div_di,div_ci,div_ir,div_rr,div_dr,div_cr,div_id,div_rd,div_dd,div_cd,div_ic,div_rc,div_dc,div_cc,div_e2,div_e1,div_tl,div_tl)
    001623  aa   000024 000235 
    001624  00   001636 001646 
    001625  00   001655 001716 
    001626  00   001642 001660 
    001627  00   001677 001746 
    001630  00   001651 001674 
    001631  00   001666 001777 
    001632  00   001702 001736 
    001633  00   001773 002024 
    001634  00   002046 002044 
    001635  00   002032 002032 
                        000024 
                                  1155  
    001636                        1156  div_ii:
                                  1157  	use_eaq
    001636  aa   000000 000255 
                                  1158  	load		q,arg1
    001637  aa   000000 040656 
    001640  aa   100000 5060 00   1159  	div		arg2
                                  1160  	return		q
    001641  aa   000001 000617 
                                  1161  
    001642                        1162  div_ir:
                                  1163  	swap		arg1
    001642  aa   000000 040202 
                                  1164  
                                  1165  	s_call		cv_load.ir
    001643  0a   002050 000223 
    001644  aa   040000 5650 00   1166  	fdv		arg1
                                  1167  	return		eaq
    001645  aa   000001 002217 
                                  1168  
    001646                        1169  div_ri:
                                  1170  	s_call		cv_load.ir
    001646  0a   002050 000223 
    001647  aa   040000 5250 00   1171  	fdi		arg1
                                  1172  	return		eaq
    001650  aa   000001 002217 
                                  1173  
    001651                        1174  div_id:
                                  1175  	swap		arg1
    001651  aa   000000 040202 
                                  1176  
                                  1177  	s_call		cv_load.id
    001652  0a   002071 000223 
    001653  aa   040000 5670 00   1178  	dfdv		arg1
                                  1179  	return		deaq
    001654  aa   000001 002617 
                                  1180  
    001655                        1181  div_di:
                                  1182  	s_call		cv_load.id
    001655  0a   002071 000223 
    001656  aa   040000 5270 00   1183  	dfdi		arg1
                                  1184  	return		deaq
    001657  aa   000001 002617 
                                  1185  
    001660                        1186  div_rr:
                                  1187  	if_eaq		eaq,arg2,div_rr.1
    001660  0a   001664 102233 
                                  1188  
                                  1189  	load		eaq,arg1
    001661  aa   000000 042256 
    001662  aa   100000 5650 00   1190  	fdv		arg2
                                  1191  	return		eaq
    001663  aa   000001 002217 
                                  1192  
    001664                        1193  div_rr.1:
    001664  aa   040000 5250 00   1194  	fdi		arg1
                                  1195  	return		eaq
    001665  aa   000001 002217 
                                  1196  
    001666                        1197  div_dd:
                                  1198  	if_eaq		deaq,arg2,div_dd.1
    001666  0a   001672 102633 
                                  1199  
                                  1200  	load		deaq,arg1
    001667  aa   000000 042656 
    001670  aa   100000 5670 00   1201  	dfdv		arg2
                                  1202  	return		deaq
    001671  aa   000001 002617 
                                  1203  
    001672                        1204  div_dd.1:
    001672  aa   040000 5270 00   1205  	dfdi		arg1
                                  1206  	return		deaq
    001673  aa   000001 002617 
                                  1207  
    001674                        1208  div_rd:
                                  1209  	load		eaq,arg1
    001674  aa   000000 042256 
    001675  aa   100000 5670 00   1210  	dfdv		arg2
                                  1211  	return		deaq
    001676  aa   000001 002617 
                                  1212  
    001677                        1213  div_dr:
                                  1214  	load		eaq,arg2
    001677  aa   000000 102256 
    001700  aa   040000 5270 00   1215  	dfdi		arg1
                                  1216  	return		deaq
    001701  aa   000001 002617 
                                  1217  
    001702                        1218  div_ic:
                                  1219  	swap		arg1
    001702  aa   000000 040202 
                                  1220  
                                  1221  	if_optype		constant,conv_div_ic
    001703  0a   001713 200227 
                                  1222  
                                  1223  	swap		arg1
    001704  aa   000000 040202 
                                  1224  	load		q,arg1
    001705  aa   000000 040656 
                                  1225  	use_eaq
    001706  aa   000000 000255 
    001707  aa  0 00465 7001 00   1226  	tsx0		pr0|integer_to_real
    001710  aa  6 00056 4701 00   1227  	fstr		sp|double_temp
    001711  aa  6 00056 2351 00   1228  	lda		sp|double_temp
                                  1229  	jump		div_rc.01
    001712  0a   001737 000220 
                                  1230  
    001713                        1231  conv_div_ic:
                                  1232  	convert_constant	real
    001713  aa   000000 001211 
                                  1233  	swap		arg1
    001714  aa   000000 040202 
                                  1234  	jump		div_rc
    001715  0a   001736 000220 
                                  1235  
    001716                        1236  div_ci:
                                  1237  	push_temp		cmpx
    001716  aa   000000 002204 
                                  1238  
                                  1239  	swap		arg2
    001717  aa   000000 100202 
                                  1240  
                                  1241  	if_optype		constant,conv_div_ci
    001720  0a   001732 200227 
                                  1242  
                                  1243  	swap		arg2
    001721  aa   000000 100202 
                                  1244  	push_temp		real
    001722  aa   000000 001204 
                                  1245  
                                  1246  	load		q,arg2
    001723  aa   000000 100656 
                                  1247  	use_eaq
    001724  aa   000000 000255 
    001725  aa  0 00465 7001 00   1248  	tsx0		pr0|integer_to_real
                                  1249  
                                  1250  	swap		arg2
    001726  aa   000000 100202 
                                  1251  	store		eaq,arg2,no_update
    001727  aa   000001 102357 
                                  1252  	pop		op1
    001730  aa   000000 740203 
                                  1253  	jump		div_cr.1
    001731  0a   001761 000220 
                                  1254  
    001732                        1255  conv_div_ci:
                                  1256  	convert_constant	real
    001732  aa   000000 001211 
                                  1257  
                                  1258  	swap		arg2
    001733  aa   000000 100202 
                                  1259  	load		eaq,arg2
    001734  aa   000000 102256 
                                  1260  	jump		div_cr.1
    001735  0a   001761 000220 
                                  1261  
    001736                        1262  div_rc:
                                  1263  	load		a,arg1
    001736  aa   000000 041256 
    001737                        1264  div_rc.01:
    001737  aa   400000 2360 03   1265  	ldq		=0.,du
                                  1266  	load_pr		pr2,arg2
    001740  aa   000003 100251 
                                  1267  	use_eaq
    001741  aa   000000 000255 
    001742  aa  0 00775 7001 00   1268  	tsx0		pr0|complex_divide
    001743  aa  6 00070 2371 00   1269  	ldaq		pr6|complex
                                  1270  	free_regs
    001744  aa   000004 000206 
                                  1271  	return		aq
    001745  aa   000001 001617 
                                  1272  
    001746                        1273  div_cr:
                                  1274  	push_temp		cmpx
    001746  aa   000000 002204 
                                  1275  
                                  1276  	if_eaq		eaq,arg2,div_cr.1
    001747  0a   001761 102233 
                                  1277  	if_eaq		eaq,arg1,div_cr.2
    001750  0a   001764 042233 
                                  1278  
                                  1279  	load		ieaq,arg1
    001751  aa   000000 043256 
                                  1280  	reset_eaq					"set ^ rounded (operand not saved)
    001752  aa   000006 000206 
    001753  aa   100000 5650 00   1281  	fdv		arg2
    001754                        1282  div_cr.01:
                                  1283  	store		ieaq,op1,no_update
    001754  aa   000001 743357 
    001755  aa   040000 4310 00   1284  	fld		arg1
    001756  aa   100000 5650 00   1285  	fdv		arg2
                                  1286  	in_reg		eaq,op1
    001757  aa   000000 742260 
                                  1287  	return		op1
    001760  aa   000001 740217 
                                  1288  
    001761                        1289  div_cr.1:
                                  1290  	use_eaq
    001761  aa   000000 000255 
    001762  aa   040001 5250 00   1291  	fdi		arg1+1
                                  1292  	jump		div_cr.01
    001763  0a   001754 000220 
                                  1293  
    001764                        1294  div_cr.2:
    001764  aa   100000 5650 00   1295  	fdv		arg2
                                  1296  	reset_eaq					"set ^rounded
    001765  aa   000006 000206 
                                  1297  	store		eaq,op1,no_update
    001766  aa   000001 742357 
    001767  aa   040001 4310 00   1298  	fld		arg1+1
    001770  aa   100000 5650 00   1299  	fdv		arg2
                                  1300  	in_reg		ieaq,op1
    001771  aa   000000 743260 
                                  1301  	return		op1
    001772  aa   000001 740217 
                                  1302  
    001773                        1303  div_dc:
                                  1304  	swap		arg1
    001773  aa   000000 040202 
                                  1305  	call		round_dp_to_real
    001774  0a   002112 000216 
                                  1306  	swap		arg1
    001775  aa   000000 040202 
                                  1307  	jump		div_rc
    001776  0a   001736 000220 
                                  1308  
    001777                        1309  div_cd:
                                  1310  	push_temp		cmpx
    001777  aa   000000 002204 
                                  1311  
                                  1312  	if_eaq		deaq,arg2,div_cd.1
    002000  0a   002012 102633 
                                  1313  	if_eaq		eaq,arg1,div_cd.2
    002001  0a   002015 042233 
                                  1314  
                                  1315  	load		ieaq,arg1
    002002  aa   000000 043256 
                                  1316  	reset_eaq
    002003  aa   000006 000206 
    002004  aa   100000 5670 00   1317  	dfdv		arg2
    002005                        1318  div_cd.01:
                                  1319  	store		ieaq,op1,no_update
    002005  aa   000001 743357 
    002006  aa   040000 4310 00   1320  	fld		arg1
    002007  aa   100000 5670 00   1321  	dfdv		arg2
                                  1322  	in_reg		eaq,op1
    002010  aa   000000 742260 
                                  1323  	return		op1
    002011  aa   000001 740217 
                                  1324  
    002012                        1325  div_cd.1:
                                  1326  	use_eaq
    002012  aa   000000 000255 
    002013  aa   040001 5250 00   1327  	fdi		arg1+1
                                  1328  	jump		div_cd.01
    002014  0a   002005 000220 
                                  1329  
    002015                        1330  div_cd.2:
    002015  aa   100000 5670 00   1331  	dfdv		arg2
                                  1332  	reset_eaq
    002016  aa   000006 000206 
                                  1333  	store		eaq,op1,no_update
    002017  aa   000001 742357 
    002020  aa   040001 4310 00   1334  	fld		arg1+1
    002021  aa   100000 5670 00   1335  	dfdv		arg2
                                  1336  	in_reg		ieaq,op1
    002022  aa   000000 743260 
                                  1337  	return		op1
    002023  aa   000001 740217 
                                  1338  
    002024                        1339  div_cc:
                                  1340  	load		aq,arg1
    002024  aa   000000 041656 
                                  1341  	load_pr		pr2,arg2
    002025  aa   000003 100251 
    002026  aa  0 00775 7001 00   1342  	tsx0		pr0|complex_divide
    002027  aa  6 00070 2371 00   1343  	ldaq		pr6|complex
                                  1344  	free_regs
    002030  aa   000004 000206 
                                  1345  	return		aq
    002031  aa   000001 001617 
                                  1346  
    002032                        1347  div_tl:
                                  1348  	unless_dt		(int,typeless),div_e2
    002032  0a   002046 404226 
                                  1349  	dt_jump1		arg1,(div_tl.1,div_e1,div_e1,div_e1,div_e1,div_e1,div_tl.1)
    002033  aa   000007 040374 
    002034  00   002041 002044 
    002035  00   002044 002044 
    002036  00   002044 002044 
    002037  0a   002041 000000 
                        000007 
                                  1350  	load		tq,arg1
    002040  aa   000000 044656 
                                  1351  
    002041                        1352  div_tl.1:
                                  1353  	use_eaq
    002041  aa   000000 000255 
    002042  aa   100000 5060 00   1354  	div		arg2
                                  1355  	return		tq
    002043  aa   000001 004617 
                                  1356  
    002044                        1357  div_e1:
                                  1358  	error		309,arg1
    002044  aa   000465 000702 
    002045  aa   000000 040303 
                        000001 
                                  1359  
    002046                        1360  div_e2:
                                  1361  	error		310,arg2
    002046  aa   000466 000702 
    002047  aa   000000 100303 
                        000001 
                                  1362  
    002050                        1363  cv_load.ir:
                                  1364  	if_optype		constant,conv_ir
    002050  0a   002055 200227 
                                  1365  
                                  1366  	load		q,op1
    002051  aa   000000 740656 
                                  1367  	use_eaq
    002052  aa   000000 000255 
    002053  aa  0 00465 7001 00   1368  	tsx0		pr0|integer_to_real
                                  1369  	s_return
    002054  aa   000003 000206 
                                  1370  
    002055                        1371  conv_ir:
                                  1372  	convert_constant	real
    002055  aa   000000 001211 
                                  1373  	load		eaq,op1
    002056  aa   000000 742256 
                                  1374  	s_return
    002057  aa   000003 000206 
                                  1375  
                                  1376  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  1377  
    002060                        1378  cv_load.ri:
                                  1379  	if_optype		constant,conv_ri
    002060  0a   002066 200227 
                                  1380  	load		eaq,op1
    002061  aa   000000 742256 
                                  1381  	round		eaq
    002062  aa   000000 002354 
                                  1382  	use_eaq
    002063  aa   000000 000255 
    002064  aa  0 00654 7001 00   1383  	tsx0		pr0|real_to_integer
                                  1384  	s_return
    002065  aa   000003 000206 
                                  1385  
    002066                        1386  conv_ri:
                                  1387  	convert_constant	int
    002066  aa   000000 000611 
                                  1388  	load		q,op1
    002067  aa   000000 740656 
                                  1389  	s_return
    002070  aa   000003 000206 
                                  1390  
                                  1391  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  1392  
    002071                        1393  cv_load.id:
                                  1394  	if_optype		constant,conv_id
    002071  0a   002076 200227 
                                  1395  
                                  1396  	load		q,op1
    002072  aa   000000 740656 
                                  1397  	use_eaq
    002073  aa   000000 000255 
    002074  aa  0 00465 7001 00   1398  	tsx0		pr0|integer_to_double
                                  1399  	s_return
    002075  aa   000003 000206 
                                  1400  
    002076                        1401  conv_id:
                                  1402  	convert_constant	dp
    002076  aa   000000 001611 
                                  1403  	load		deaq,op1
    002077  aa   000000 742656 
                                  1404  	s_return
    002100  aa   000003 000206 
                                  1405  
                                  1406  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  1407  
    002101                        1408  cv_load.di:
                                  1409  	if_optype		constant,conv_di
    002101  0a   002107 200227 
                                  1410  	load		deaq,op1
    002102  aa   000000 742656 
                                  1411  	round		deaq
    002103  aa   000000 002754 
                                  1412  	use_eaq
    002104  aa   000000 000255 
    002105  aa  0 00654 7001 00   1413  	tsx0		pr0|double_to_integer
                                  1414  	s_return
    002106  aa   000003 000206 
                                  1415  
    002107                        1416  conv_di:
                                  1417  	convert_constant	int
    002107  aa   000000 000611 
                                  1418  	load		q,op1
    002110  aa   000000 740656 
                                  1419  	s_return
    002111  aa   000003 000206 
                                  1420  
                                  1421  
                                  1422  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  1423  
                                  1424  "	This function expects a dp operand on the top of the stack. It "converts" it to single
                                  1425  "	precision by using convert_constant or indicating its value is now in the eaq. The
                                  1426  "	value in the eaq is not explicitly stored into a sp temp because it is assumed that
                                  1427  "	the next use of the eaq will force the store.
                                  1428  
    002112                        1429  round_dp_to_real:
                                  1430  	func		1
    002112  aa   000000 000615 
                                  1431  
                                  1432  	if_optype		constant,round_dp_const
    002113  0a   002117 200227 
                                  1433  	push_temp		real
    002114  aa   000000 001204 
                                  1434  	load		deaq,op2
    002115  aa   000000 702656 
                                  1435  	return		eaq
    002116  aa   000001 002217 
                                  1436  
    002117                        1437  round_dp_const:
                                  1438  	convert_constant	real
    002117  aa   000000 001211 
                                  1439  	return		op1
    002120  aa   000001 740217 
                                  1440  
    002121                        1441  exponentiation:
                                  1442  	func		2
    002121  aa   000000 001215 
                                  1443  
                                  1444  	dt_jump		(exponentiation_ii,exponentiation_ri,exponentiation_di,exponentiation_ci,exponentiation_ir,exponentiation_rr,exponentiation_dr,exponentiation_cr,exponentiation_id,exponentiation_rd,exponentiation_dd,exponentiation_cd,exponentiation_ic,exponentiation_rc,exponentiation_dc,exponentiation_cc,exponentiation_e2,exponentiation_e1,exponentiation_e2,exponentiation_e1)
    002122  aa   000024 000235 
    002123  00   002135 002160 
    002124  00   002203 002270 
    002125  00   002145 002213 
    002126  00   002236 002324 
    002127  00   002170 002233 
    002130  00   002223 002323 
    002131  00   002246 002315 
    002132  00   002312 002342 
    002133  00   002355 002353 
    002134  00   002355 002353 
                        000024 
                                  1445  
    002135                        1446  exponentiation_ii:
                                  1447  	push_temp		32
    002135  aa   000040 000204 
                                  1448  
                                  1449  	load		q,arg1
    002136  aa   000000 040656 
                                  1450  	load_pr		pr1,arg2
    002137  aa   000002 100251 
                                  1451  	load_pr		pr2,op1
    002140  aa   000003 740251 
                                  1452  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr3,pr4,pr5,pr7)
    002141  aa   377160 000250 
    002142  aa  0 01351 2731 00   1453  	tsp3		pr0|int_p_int
                                  1454  	free_regs
    002143  aa   000004 000206 
                                  1455  	return		q
    002144  aa   000001 000617 
                                  1456  
    002145                        1457  exponentiation_ir:
                                  1458  	push_temp		32
    002145  aa   000040 000204 
                                  1459  
                                  1460  	swap		arg1
    002146  aa   000000 040202 
                                  1461  
                                  1462  	if_optype		constant,conv_exponentiation_ir
    002147  0a   002155 200227 
                                  1463  
                                  1464  	swap		arg1
    002150  aa   000000 040202 
                                  1465  	load		q,arg1
    002151  aa   000000 040656 
                                  1466  	use_eaq
    002152  aa   000000 000255 
    002153  aa  0 00465 7001 00   1467  	tsx0		pr0|integer_to_real
                                  1468  	jump		exponentiation_rr.02
    002154  0a   002215 000220 
                                  1469  
    002155                        1470  conv_exponentiation_ir:
                                  1471  	convert_constant	real
    002155  aa   000000 001211 
                                  1472  
                                  1473  	swap		arg1
    002156  aa   000000 040202 
                                  1474  	jump		exponentiation_rr.01
    002157  0a   002214 000220 
                                  1475  
    002160                        1476  exponentiation_ri:
                                  1477  	push_temp		32
    002160  aa   000040 000204 
                                  1478  
                                  1479  	load		eaq,arg1
    002161  aa   000000 042256 
                                  1480  	load_pr		pr1,arg2
    002162  aa   000002 100251 
                                  1481  	load_pr		pr2,op1
    002163  aa   000003 740251 
                                  1482  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr3,pr4,pr5,pr7)
    002164  aa   377160 000250 
    002165  aa  0 01350 2731 00   1483  	tsp3		pr0|real_p_int
                                  1484  	free_regs
    002166  aa   000004 000206 
                                  1485  	return		eaq
    002167  aa   000001 002217 
                                  1486  
    002170                        1487  exponentiation_id:
                                  1488  	push_temp		32
    002170  aa   000040 000204 
                                  1489  
                                  1490  	swap		arg1
    002171  aa   000000 040202 
                                  1491  
                                  1492  	if_optype		constant,conv_exponentiation_id
    002172  0a   002200 200227 
                                  1493  
                                  1494  	swap		arg1
    002173  aa   000000 040202 
                                  1495  	load		q,arg1
    002174  aa   000000 040656 
                                  1496  	use_eaq
    002175  aa   000000 000255 
    002176  aa  0 00465 7001 00   1497  	tsx0		pr0|integer_to_double
                                  1498  	jump		exponentiation_dd.02
    002177  0a   002225 000220 
                                  1499  
    002200                        1500  conv_exponentiation_id:
                                  1501  	convert_constant	dp
    002200  aa   000000 001611 
                                  1502  
                                  1503  	swap		arg1
    002201  aa   000000 040202 
                                  1504  	jump		exponentiation_dd.01
    002202  0a   002224 000220 
                                  1505  
    002203                        1506  exponentiation_di:
                                  1507  	push_temp		32
    002203  aa   000040 000204 
                                  1508  
                                  1509  	load		deaq,arg1
    002204  aa   000000 042656 
                                  1510  	load_pr		pr1,arg2
    002205  aa   000002 100251 
                                  1511  	load_pr		pr2,op1
    002206  aa   000003 740251 
                                  1512  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr3,pr4,pr5,pr7)
    002207  aa   377160 000250 
    002210  aa  0 01346 2731 00   1513  	tsp3		pr0|dbl_p_int
                                  1514  	free_regs
    002211  aa   000004 000206 
                                  1515  	return		deaq
    002212  aa   000001 002617 
                                  1516  
    002213                        1517  exponentiation_rr:
                                  1518  	push_temp		32
    002213  aa   000040 000204 
                                  1519  
    002214                        1520  exponentiation_rr.01:
                                  1521  	load		eaq,arg1
    002214  aa   000000 042256 
    002215                        1522  exponentiation_rr.02:
                                  1523  	load_pr		pr1,arg2
    002215  aa   000002 100251 
                                  1524  	load_pr		pr2,op1
    002216  aa   000003 740251 
                                  1525  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr3,pr4,pr5,pr7)
    002217  aa   377160 000250 
    002220  aa  0 01347 2731 00   1526  	tsp3		pr0|real_p_real
                                  1527  	free_regs
    002221  aa   000004 000206 
                                  1528  	return		eaq
    002222  aa   000001 002217 
                                  1529  
    002223                        1530  exponentiation_dd:
                                  1531  	push_temp		32
    002223  aa   000040 000204 
                                  1532  
    002224                        1533  exponentiation_dd.01:
                                  1534  	load		deaq,arg1
    002224  aa   000000 042656 
    002225                        1535  exponentiation_dd.02:
                                  1536  	load_pr		pr1,arg2
    002225  aa   000002 100251 
                                  1537  	load_pr		pr2,op1
    002226  aa   000003 740251 
                                  1538  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr3,pr4,pr5,pr7)
    002227  aa   377160 000250 
    002230  aa  0 01345 2731 00   1539  	tsp3		pr0|dbl_p_dbl
                                  1540  	free_regs
    002231  aa   000004 000206 
                                  1541  	return		deaq
    002232  aa   000001 002617 
                                  1542  
    002233                        1543  exponentiation_rd:
                                  1544  	push_temp		32
    002233  aa   000040 000204 
                                  1545  
                                  1546  	load		eaq,arg1
    002234  aa   000000 042256 
                                  1547  	jump		exponentiation_dd.02
    002235  0a   002225 000220 
                                  1548  
    002236                        1549  exponentiation_dr:
                                  1550  	push_temp		32
    002236  aa   000040 000204 
                                  1551  
                                  1552  	load		deaq,arg1
    002237  aa   000000 042656 
                                  1553  	load_pr		pr1,arg2
    002240  aa   000002 100251 
                                  1554  	load_pr		pr2,op1
    002241  aa   000003 740251 
                                  1555  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr3,pr4,pr5,pr7)
    002242  aa   377160 000250 
    002243  aa  0 01344 2731 00   1556  	tsp3		pr0|dbl_p_real
                                  1557  	free_regs
    002244  aa   000004 000206 
                                  1558  	return		deaq
    002245  aa   000001 002617 
                                  1559  
    002246                        1560  exponentiation_ic:
                                  1561  	push_temp		32
    002246  aa   000040 000204 
                                  1562  	load_pr		pr2,op1
    002247  aa   000003 740251 
                                  1563  	swap		arg1
    002250  aa   000000 040202 
                                  1564  
                                  1565  	if_optype		constant,conv_exponentiation_ic
    002251  0a   002264 200227 
                                  1566  
                                  1567  	swap		arg1
    002252  aa   000000 040202 
                                  1568  	push_temp		cmpx
    002253  aa   000000 002204 
                                  1569  	load		q,arg1
    002254  aa   000000 040656 
                                  1570  	use_eaq
    002255  aa   000000 000255 
    002256  aa  0 00465 7001 00   1571  	tsx0		pr0|integer_to_real
                                  1572  	store		eaq,op1,no_update
    002257  aa   000001 742357 
    002260  aa   400000 4310 03   1573  	fld		=0.,du
    002261  aa   740001 4550 00   1574  	fst		op1+1
    002262  aa   740000 2370 00   1575  	ldaq		op1
                                  1576  	jump		exponentiation_cc.01
    002263  0a   002345 000220 
                                  1577  
    002264                        1578  conv_exponentiation_ic:
                                  1579  	convert_constant	cmpx
    002264  aa   000000 002211 
                                  1580  
                                  1581  	swap		arg1
    002265  aa   000000 040202 
                                  1582  	load		aq,arg1
    002266  aa   000000 041656 
                                  1583  	jump		exponentiation_cc.01
    002267  0a   002345 000220 
                                  1584  
    002270                        1585  exponentiation_ci:
                                  1586  	push_temp		32
    002270  aa   000040 000204 
                                  1587  	load_pr		pr2,op1
    002271  aa   000003 740251 
                                  1588  	push_temp		cmpx
    002272  aa   000000 002204 
                                  1589  
                                  1590  	swap		arg2
    002273  aa   000000 100202 
                                  1591  
                                  1592  	if_optype		constant,conv_exponentiation_ci
    002274  0a   002305 200227 
                                  1593  
                                  1594  	swap		arg2
    002275  aa   000000 100202 
                                  1595  	load		q,arg2
    002276  aa   000000 100656 
                                  1596  	use_eaq
    002277  aa   000000 000255 
    002300  aa  0 00465 7001 00   1597  	tsx0		pr0|integer_to_real
                                  1598  	store		eaq,op1,no_update
    002301  aa   000001 742357 
    002302  aa   400000 4310 03   1599  	fld		=0.,du
    002303  aa   740001 4550 00   1600  	fst		op1+1
                                  1601  	jump		exponentiation_cr.01
    002304  0a   002333 000220 
                                  1602  
    002305                        1603  conv_exponentiation_ci:
                                  1604  	convert_constant	cmpx
    002305  aa   000000 002211 
                                  1605  
                                  1606  	swap		arg2
    002306  aa   000000 100202 
                                  1607  	load		aq,arg2
    002307  aa   000000 101656 
    002310  aa   740000 7570 00   1608  	staq		op1
                                  1609  	jump		exponentiation_cr.01
    002311  0a   002333 000220 
                                  1610  
    002312                        1611  exponentiation_dc:
                                  1612  	swap		arg1
    002312  aa   000000 040202 
                                  1613  	call		round_dp_to_real
    002313  0a   002112 000216 
                                  1614  	swap		arg1
    002314  aa   000000 040202 
                                  1615  
    002315                        1616  exponentiation_rc:
                                  1617  	push_temp		32
    002315  aa   000040 000204 
                                  1618  	load_pr		pr2,op1
    002316  aa   000003 740251 
                                  1619  
                                  1620  	load		a,arg1
    002317  aa   000000 041256 
                                  1621  	use_eaq
    002320  aa   000000 000255 
    002321  aa   400000 2360 03   1622  	ldq		=0.,du
                                  1623  	jump		exponentiation_cc.01
    002322  0a   002345 000220 
                                  1624  
    002323                        1625  exponentiation_cd:
                                  1626  	call		round_dp_to_real
    002323  0a   002112 000216 
                                  1627  
    002324                        1628  exponentiation_cr:
                                  1629  	push_temp		32
    002324  aa   000040 000204 
                                  1630  	load_pr		pr2,op1
    002325  aa   000003 740251 
                                  1631  	push_temp		cmpx
    002326  aa   000000 002204 
                                  1632  
                                  1633  	load		a,arg2
    002327  aa   000000 101256 
                                  1634  	use_eaq
    002330  aa   000000 000255 
    002331  aa   400000 2360 03   1635  	ldq		=0.,du
    002332  aa   740000 7570 00   1636  	staq		op1
    002333                        1637  exponentiation_cr.01:
    002333  aa   040000 2370 00   1638  	ldaq		arg1
                                  1639  	load_pr		pr1,op1
    002334  aa   000002 740251 
                                  1640  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr3,pr4,pr5,pr7)
    002335  aa   377160 000250 
    002336  aa  0 01416 2731 00   1641  	tsp3		pr0|cmpx_p_cmpx
    002337  aa  6 00050 2371 00   1642  	ldaq		pr6|temp_pt
                                  1643  	free_regs
    002340  aa   000004 000206 
                                  1644  	return		aq
    002341  aa   000001 001617 
                                  1645  
    002342                        1646  exponentiation_cc:
                                  1647  	push_temp		32
    002342  aa   000040 000204 
                                  1648  	load_pr		pr2,op1
    002343  aa   000003 740251 
                                  1649  	load		aq,arg1
    002344  aa   000000 041656 
    002345                        1650  exponentiation_cc.01:
                                  1651  	load_pr		pr1,arg2
    002345  aa   000002 100251 
                                  1652  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr3,pr4,pr5,pr7)
    002346  aa   377160 000250 
    002347  aa  0 01416 2731 00   1653  	tsp3		pr0|cmpx_p_cmpx
    002350  aa  6 00050 2371 00   1654  	ldaq		pr6|temp_pt
                                  1655  	free_regs
    002351  aa   000004 000206 
                                  1656  	return		aq
    002352  aa   000001 001617 
                                  1657  
    002353                        1658  exponentiation_e1:
                                  1659  	error		309,arg1
    002353  aa   000465 000702 
    002354  aa   000000 040303 
                        000001 
                                  1660  
    002355                        1661  exponentiation_e2:
                                  1662  	error		310,arg2
    002355  aa   000466 000702 
    002356  aa   000000 100303 
                        000001 
                                  1663  
                                  1664  negate:	func		1		
    002357  aa   000000 000615 
                                  1665  
                                  1666  	if_dt		int,negate_i
    002360  0a   002366 400225 
                                  1667  	if_dt		real,negate_r
    002361  0a   002371 200225 
                                  1668  	if_dt		dp,negate_d
    002362  0a   002375 100225 
                                  1669  	if_dt		cmpx,negate_c
    002363  0a   002401 040225 
                                  1670  
                                  1671  	error		315,op1
    002364  aa   000473 000702 
    002365  aa   000000 740303 
                        000001 
                                  1672  
    002366                        1673  negate_i:
                                  1674  	use_eaq
    002366  aa   000000 000255 
    002367  aa   740000 3360 00   1675  	lcq		op1
                                  1676  	return		q
    002370  aa   000001 000617 
                                  1677  
    002371                        1678  negate_r:
                                  1679  	load		eaq,op1
    002371  aa   000000 742256 
                                  1680  	emit		1
    002372  aa   000001 000242 
    002373  aa   000000 5130 00   1681  	fneg
                                  1682  	return		eaq
    002374  aa   000001 002217 
                                  1683  
    002375                        1684  negate_d:
                                  1685  	load		deaq,op1
    002375  aa   000000 742656 
                                  1686  	emit		1
    002376  aa   000001 000242 
    002377  aa   000000 5130 00   1687  	fneg
                                  1688  	return		deaq
    002400  aa   000001 002617 
                                  1689  
    002401                        1690  negate_c:
                                  1691  	push_temp		cmpx
    002401  aa   000000 002204 
                                  1692  
                                  1693  	use_ind
    002402  aa   000007 000206 
                                  1694  	if_eaq		eaq,op2,negate_c.1
    002403  0a   002415 702233 
                                  1695  
                                  1696  	load		ieaq,op2
    002404  aa   000000 703256 
                                  1697  	emit		1
    002405  aa   000001 000242 
    002406  aa   000000 5130 00   1698  	fneg
                                  1699  	store		ieaq,op1,no_update
    002407  aa   000001 743357 
                                  1700  	load		eaq,op2
    002410  aa   000000 702256 
                                  1701  	emit		1
    002411  aa   000001 000242 
    002412  aa   000000 5130 00   1702  	fneg
                                  1703  	in_reg		eaq,op1
    002413  aa   000000 742260 
                                  1704  	return		op1
    002414  aa   000001 740217 
                                  1705  
    002415                        1706  negate_c.1:
                                  1707  	emit		1
    002415  aa   000001 000242 
    002416  aa   000000 5130 00   1708  	fneg
                                  1709  	store		eaq,op1,no_update
    002417  aa   000001 742357 
                                  1710  	load		ieaq,op2
    002420  aa   000000 703256 
                                  1711  	emit		1
    002421  aa   000001 000242 
    002422  aa   000000 5130 00   1712  	fneg
                                  1713  	in_reg		ieaq,op1
    002423  aa   000000 743260 
                                  1714  	return		op1
    002424  aa   000001 740217 
                                  1715  
                                  1716  "push_var used rather than push_temp in this block to permit non-standard
                                  1717  "construction of do-loop in the extended range of an extended range do-loop.
                                  1718  do:	proc		4
    002425  aa   000000 002214 
                                  1719  
                                  1720  	swap		arg2
    002426  aa   000000 100202 
                                  1721  	copy		arg1
    002427  aa   000000 040201 
                                  1722  	call		convert_to_cv_type
    002430  0a   002677 000216 
                                  1723  	swap		arg2
    002431  aa   000000 100202 
                                  1724  
                                  1725  	swap		arg3
    002432  aa   000000 140202 
                                  1726  	copy		arg1
    002433  aa   000000 040201 
                                  1727  	call		convert_to_cv_type
    002434  0a   002677 000216 
                                  1728  	swap		arg3
    002435  aa   000000 140202 
                                  1729  
                                  1730  	copy		arg1
    002436  aa   000000 040201 
                                  1731  	call		convert_to_cv_type
    002437  0a   002677 000216 
                                  1732  
                                  1733  	push_label			" arg5 is label for top of loop
    002440  aa   000001 000206 
                                  1734  	push_label			" arg6 is label for end of loop
    002441  aa   000001 000206 
                                  1735  
                                  1736  	swap		arg1
    002442  aa   000000 040202 
                                  1737  
                                  1738  	if_dt		int,do_i
    002443  0a   002446 400225 
                                  1739  	if_dt		real,do_r
    002444  0a   002567 200225 
                                  1740  	jump		do_d
    002445  0a   002633 000220 
                                  1741  
    002446                        1742  do_i:
                                  1743  	swap		arg1
    002446  aa   000000 040202 
                                  1744  	swap		arg4		" get incre on top of stack
    002447  aa   000000 200202 
                                  1745  	unless_ansi77	do_i.no_save_incre
    002450  0a   002457 000274 
                                  1746  	if_optype		constant,do_i.no_save_incre
    002451  0a   002457 200227 
                                  1747  	load		q,op1
    002452  aa   000000 740656 
                                  1748  	push_variable	int
    002453  aa   000000 000605 
                                  1749  	store		q,op1
    002454  aa   000000 740757 
                                  1750  	swap		op2
    002455  aa   000000 700202 
                                  1751  	pop		op1		" replace incre with variable
    002456  aa   000000 740203 
                                  1752  
    002457                        1753  do_i.no_save_incre:
                                  1754  	swap		arg4		" restore correct order
    002457  aa   000000 200202 
                                  1755  
                                  1756  	load		q,arg2
    002460  aa   000000 100656 
                                  1757  	store		q,arg1
    002461  aa   000000 040757 
                                  1758  
                                  1759  	use_eaq
    002462  aa   000000 000255 
                                  1760  
                                  1761  	swap		arg4
    002463  aa   000000 200202 
                                  1762  	if_optype		constant,do_i_constant
    002464  0a   002513 200227 
                                  1763  	swap		arg4
    002465  aa   000000 200202 
                                  1764  
    002466  aa   140000 2360 00   1765  	ldq		arg3
    002467  aa   100000 1760 00   1766  	sbq		arg2
    002470  aa   200000 5060 00   1767  	div		arg4
    002471  aa   000001 0760 07   1768  	adq		1,dl
                                  1769  
                                  1770  	push_variable	int
    002472  aa   000000 000605 
                                  1771  	store		q,arg7
    002473  aa   000000 340757 
                                  1772  
                                  1773  	unless_ansi77	do_i.one_trip
    002474  0a   002476 000274 
    002475  aa   300000 6044 00   1774  	tmoz		arg6
                                  1775  
    002476                        1776  do_i.one_trip:
                                  1777  	force_even		" optimize even address for loop
    002476  aa   000067 000206 
                                  1778  	label		arg5
    002477  aa   000000 240243 
                                  1779  
                                  1780  	scan		continue,next
    002500                     
    002500  0a   002500 000221 
    002501  0a   002502 000220 
    002502                     
                                  1781  
                                  1782  	shorten_stack
    002502  aa   000000 000272 
                                  1783  
                                  1784  	load		q,arg4
    002503  aa   000000 200656 
    002504  aa   040000 0560 00   1785  	asq		arg1
                                  1786  
                                  1787  	use_eaq
    002505  aa   000000 000255 
                                  1788  
    002506  aa   000001 3360 07   1789  	lcq		1,dl
    002507  aa   340000 0560 00   1790  	asq		arg7
    002510  aa   240000 6054 00   1791  	tpnz		arg5
                                  1792  
                                  1793  	label		arg6
    002511  aa   000000 300243 
                                  1794  
                                  1795  	return
    002512  aa   000000 000217 
                                  1796  
    002513                        1797  do_i_constant:
                                  1798  	swap		arg4
    002513  aa   000000 200202 
                                  1799  
                                  1800  "	If final (to) is not a constant, it is saved before the label macro flushes it
                                  1801  
                                  1802  	swap		arg3
    002514  aa   000000 140202 
                                  1803  	if_optype		constant,to_is_constant	" no need to save, it is a constant
    002515  0a   002522 200227 
                                  1804  
                                  1805  	load		q,op1			" load value and put in temp
    002516  aa   000000 740656 
                                  1806  	pop		op1			" will replace expre with temp
    002517  aa   000000 740203 
                                  1807  	push_variable	int
    002520  aa   000000 000605 
                                  1808  	store		q,op1
    002521  aa   000000 740757 
                                  1809  
    002522                        1810  to_is_constant:
                                  1811  	swap		arg3			" restore stack to correct order
    002522  aa   000000 140202 
                                  1812  
                                  1813  	unless_ansi77	do_i_constant.one_trip
    002523  0a   002532 000274 
                                  1814  
                                  1815  	load		q,arg2
    002524  aa   000000 100656 
                                  1816  	compare		q,arg3
    002525  aa   000000 140751 
                                  1817  
                                  1818  	if_negative	arg4,do_i.zero_trip.negative
    002526  0a   002531 200725 
    002527  aa   300000 6054 00   1819  	tpnz		arg6
                                  1820  	jump		do_i_constant.one_trip
    002530  0a   002532 000220 
                                  1821  
    002531                        1822  do_i.zero_trip.negative:
    002531  aa   300000 6040 00   1823  	tmi		arg6
                                  1824  
    002532                        1825  do_i_constant.one_trip:
                                  1826  	force_even		" optimize even address for loop
    002532  aa   000067 000206 
                                  1827  	label		arg5
    002533  aa   000000 240243 
                                  1828  
                                  1829  	scan		continue,next
    002534                     
    002534  0a   002534 000221 
    002535  0a   002536 000220 
    002536                     
                                  1830  
                                  1831  	shorten_stack
    002536  aa   000000 000272 
                                  1832  
                                  1833  	load		q,arg1
    002537  aa   000000 040656 
                                  1834  
                                  1835  	use_eaq
    002540  aa   000000 000255 
                                  1836  
                                  1837  	if_negative	arg4,do_i_negative
    002541  0a   002560 200725 
                                  1838  
                                  1839  	push_builtin	one
    002542  aa   000001 000213 
                                  1840  	if		arg4,=,op1,do_i_1
    002543  0a   002553 211637 
                                  1841  
    002544  aa   200000 0760 00   1842  	adq		arg4
                                  1843  	store		q,arg1
    002545  aa   000000 040757 
                                  1844  	use_ind
    002546  aa   000007 000206 
    002547  aa   140000 1160 00   1845  	cmpq		arg3
    002550  aa   240000 6044 00   1846  	tmoz		arg5
                                  1847  
                                  1848  	label		arg6
    002551  aa   000000 300243 
                                  1849  
                                  1850  	return
    002552  aa   000000 000217 
                                  1851  
    002553                        1852  do_i_1:
                                  1853  
    002553  aa   040000 0540 00   1854  	aos		arg1
    002554  aa   140000 1160 00   1855  	cmpq		arg3
    002555  aa   240000 6040 00   1856  	tmi		arg5
                                  1857  
                                  1858  	label		arg6
    002556  aa   000000 300243 
                                  1859  
                                  1860  	return
    002557  aa   000000 000217 
                                  1861  
    002560                        1862  do_i_negative:
    002560  aa   200000 0760 00   1863  	adq		arg4
                                  1864  	store		q,arg1
    002561  aa   000000 040757 
                                  1865  	use_ind
    002562  aa   000007 000206 
    002563  aa   140000 1160 00   1866  	cmpq		arg3
    002564  aa   240000 6050 00   1867  	tpl		arg5
                                  1868  
                                  1869  	label		arg6
    002565  aa   000000 300243 
                                  1870  
                                  1871  	return
    002566  aa   000000 000217 
                                  1872  
    002567                        1873  do_r:
                                  1874  	swap		arg1
    002567  aa   000000 040202 
                                  1875  	swap		arg4		" get incre on top of stack
    002570  aa   000000 200202 
                                  1876  	unless_ansi77	do_r.no_save_incre
    002571  0a   002600 000274 
                                  1877  	if_optype		constant,do_r.no_save_incre
    002572  0a   002600 200227 
                                  1878  	load		eaq,op1
    002573  aa   000000 742256 
                                  1879  	push_variable	real
    002574  aa   000000 001205 
                                  1880  	store		eaq,op1
    002575  aa   000000 742357 
                                  1881  	swap		op2
    002576  aa   000000 700202 
                                  1882  	pop		op1		" replace incre with variable
    002577  aa   000000 740203 
                                  1883  
    002600                        1884  do_r.no_save_incre:
                                  1885  	swap		arg4		" restore correct order
    002600  aa   000000 200202 
                                  1886  
                                  1887  	load		eaq,arg2
    002601  aa   000000 102256 
                                  1888  	store		eaq,arg1
    002602  aa   000000 042357 
                                  1889  
                                  1890  	use_eaq
    002603  aa   000000 000255 
                                  1891  
    002604  aa   140000 4310 00   1892  	fld		arg3
    002605  aa   100000 5750 00   1893  	fsb		arg2
    002606  aa   200000 5650 00   1894  	fdv		arg4		" subtracting -1 is the same as adding
    002607  aa   001000 5750 03   1895  	fsb		=-1.0,du		" +1, but -1 is the same in hex
    002610  aa  0 00654 7001 00   1896  	tsx0		pr0|real_to_integer
                                  1897  
                                  1898  	push_variable	int
    002611  aa   000000 000605 
                                  1899  	store		q,arg7
    002612  aa   000000 340757 
                                  1900  
                                  1901  	unless_ansi77	do_r.one_trip
    002613  0a   002615 000274 
    002614  aa   300000 6044 00   1902  	tmoz		arg6
                                  1903  
    002615                        1904  do_r.one_trip:
                                  1905  	force_even		" optimize even address for loop
    002615  aa   000067 000206 
                                  1906  	label		arg5
    002616  aa   000000 240243 
                                  1907  
                                  1908  	scan		continue,next
    002617                     
    002617  0a   002617 000221 
    002620  0a   002621 000220 
    002621                     
                                  1909  
                                  1910  	shorten_stack
    002621  aa   000000 000272 
                                  1911  
                                  1912  	load		eaq,arg1
    002622  aa   000000 042256 
                                  1913  	use_eaq
    002623  aa   000000 000255 
    002624  aa   200000 4750 00   1914  	fad		arg4
                                  1915  	store		eaq,arg1,no_update
    002625  aa   000001 042357 
                                  1916  
    002626  aa   000001 3360 07   1917  	lcq		1,dl
    002627  aa   340000 0560 00   1918  	asq		arg7
    002630  aa   240000 6054 00   1919  	tpnz		arg5
                                  1920  
                                  1921  	label		arg6
    002631  aa   000000 300243 
                                  1922  
                                  1923  	return
    002632  aa   000000 000217 
                                  1924  
    002633                        1925  do_d:
                                  1926  	swap		arg1
    002633  aa   000000 040202 
                                  1927  	swap		arg4		" get incre on top of stack
    002634  aa   000000 200202 
                                  1928  	unless_ansi77	do_d.no_save_incre
    002635  0a   002644 000274 
                                  1929  	if_optype		constant,do_d.no_save_incre
    002636  0a   002644 200227 
                                  1930  	load		deaq,op1
    002637  aa   000000 742656 
                                  1931  	push_variable	dp
    002640  aa   000000 001605 
                                  1932  	store		deaq,op1
    002641  aa   000000 742757 
                                  1933  	swap		op2
    002642  aa   000000 700202 
                                  1934  	pop		op1		" replace incre with variable
    002643  aa   000000 740203 
                                  1935  
    002644                        1936  do_d.no_save_incre:
                                  1937  	swap		arg4		" restore correct order
    002644  aa   000000 200202 
                                  1938  
                                  1939  	load		deaq,arg2
    002645  aa   000000 102656 
                                  1940  	store		deaq,arg1
    002646  aa   000000 042757 
                                  1941  
                                  1942  	use_eaq
    002647  aa   000000 000255 
                                  1943  
    002650  aa   140000 4330 00   1944  	dfld		arg3
    002651  aa   100000 5770 00   1945  	dfsb		arg2
    002652  aa   200000 5670 00   1946  	dfdv		arg4		" subtracting -1 is the same as adding
    002653  aa   001000 5750 03   1947  	fsb		=-1.0,du		" +1, but -1 is the same in hex
    002654  aa  0 00654 7001 00   1948  	tsx0		pr0|double_to_integer
                                  1949  
                                  1950  	push_variable	int
    002655  aa   000000 000605 
                                  1951  	store		q,arg7
    002656  aa   000000 340757 
                                  1952  
                                  1953  	unless_ansi77	do_d.one_trip
    002657  0a   002661 000274 
    002660  aa   300000 6044 00   1954  	tmoz		arg6
                                  1955  
    002661                        1956  do_d.one_trip:
                                  1957  	force_even		" optimize even address for loop
    002661  aa   000067 000206 
                                  1958  	label		arg5
    002662  aa   000000 240243 
                                  1959  
                                  1960  	scan		continue,next
    002663                     
    002663  0a   002663 000221 
    002664  0a   002665 000220 
    002665                     
                                  1961  
                                  1962  	shorten_stack
    002665  aa   000000 000272 
                                  1963  
                                  1964  	load		deaq,arg1
    002666  aa   000000 042656 
                                  1965  	use_eaq
    002667  aa   000000 000255 
    002670  aa   200000 4770 00   1966  	dfad		arg4
                                  1967  	store		deaq,arg1,no_update
    002671  aa   000001 042757 
                                  1968  
    002672  aa   000001 3360 07   1969  	lcq		1,dl
    002673  aa   340000 0560 00   1970  	asq		arg7
    002674  aa   240000 6054 00   1971  	tpnz		arg5
                                  1972  
                                  1973  	label		arg6
    002675  aa   000000 300243 
                                  1974  
                                  1975  	return
    002676  aa   000000 000217 
                                  1976  
    002677                        1977  convert_to_cv_type:
                                  1978  	func		2
    002677  aa   000000 001215 
                                  1979  
                                  1980  	dt_jump		(ccv_ii,ccv_ri,ccv_di,ccv_ci,ccv_ir,ccv_rr,ccv_dr,ccv_cr,ccv_id,ccv_rd,ccv_dd,ccv_cd,ccv_ic,ccv_rc,ccv_dc,ccv_cc,ccv_e2,ccv_e1,ccv_e2,ccv_e1)
    002700  aa   000024 000235 
    002701  00   002713 002717 
    002702  00   002725 002740 
    002703  00   002714 002730 
    002704  00   002734 002747 
    002705  00   002722 002732 
    002706  00   002731 002753 
    002707  00   002736 002745 
    002710  00   002751 002755 
    002711  00   002763 002760 
    002712  00   002763 002760 
                        000024 
                                  1981  
    002713                        1982  ccv_ii:
                                  1983  	return		arg1
    002713  aa   000001 040217 
                                  1984  
    002714                        1985  ccv_ir:
                                  1986  	swap		arg1
    002714  aa   000000 040202 
                                  1987  
                                  1988  	s_call		cv_load.ir
    002715  0a   002050 000223 
                                  1989  	return		eaq
    002716  aa   000001 002217 
                                  1990  
    002717                        1991  ccv_ri:
                                  1992  	swap		arg1
    002717  aa   000000 040202 
                                  1993  
                                  1994  	s_call		cv_load.ri
    002720  0a   002060 000223 
                                  1995  	return		q
    002721  aa   000001 000617 
                                  1996  
    002722                        1997  ccv_id:
                                  1998  	swap		arg1
    002722  aa   000000 040202 
                                  1999  
                                  2000  	s_call		cv_load.id
    002723  0a   002071 000223 
                                  2001  	return		deaq
    002724  aa   000001 002617 
                                  2002  
    002725                        2003  ccv_di:
                                  2004  	swap		arg1
    002725  aa   000000 040202 
                                  2005  
                                  2006  	s_call		cv_load.di
    002726  0a   002101 000223 
                                  2007  	return		q
    002727  aa   000001 000617 
                                  2008  
    002730                        2009  ccv_rr:
                                  2010  	return		arg1
    002730  aa   000001 040217 
                                  2011  
    002731                        2012  ccv_dd:
                                  2013  	return		arg1
    002731  aa   000001 040217 
                                  2014  
    002732                        2015  ccv_rd:
                                  2016  	load		eaq,arg1
    002732  aa   000000 042256 
                                  2017  	return		deaq
    002733  aa   000001 002617 
                                  2018  
    002734                        2019  ccv_dr:
                                  2020  	load		deaq,arg1
    002734  aa   000000 042656 
                                  2021  	return		eaq
    002735  aa   000001 002217 
                                  2022  
    002736                        2023  ccv_ic:
                                  2024  	error		316,op1
    002736  aa   000474 000702 
    002737  aa   000000 740303 
                        000001 
                                  2025  
    002740                        2026  ccv_ci:
                                  2027  	load		eaq,arg1
    002740  aa   000000 042256 
                                  2028  	round		eaq
    002741  aa   000000 002354 
                                  2029  	use_eaq
    002742  aa   000000 000255 
    002743  aa  0 00654 7001 00   2030  	tsx0		pr0|real_to_integer
                                  2031  	return		q
    002744  aa   000001 000617 
                                  2032  
    002745                        2033  ccv_rc:
                                  2034  	error		316,op1
    002745  aa   000474 000702 
    002746  aa   000000 740303 
                        000001 
                                  2035  
    002747                        2036  ccv_cr:
                                  2037  	load		eaq,arg1
    002747  aa   000000 042256 
                                  2038  	return		eaq
    002750  aa   000001 002217 
                                  2039  
    002751                        2040  ccv_dc:
                                  2041  	error		316,op1
    002751  aa   000474 000702 
    002752  aa   000000 740303 
                        000001 
                                  2042  
    002753                        2043  ccv_cd:
                                  2044  	load		eaq,arg1
    002753  aa   000000 042256 
                                  2045  	return		deaq
    002754  aa   000001 002617 
                                  2046  
    002755                        2047  ccv_cc:
                                  2048  	print		316,op1
    002755  aa   000474 000701 
    002756  aa   000000 740303 
                        000001 
                                  2049  	return
    002757  aa   000000 000217 
                                  2050  
    002760                        2051  ccv_e1:
                                  2052  	print		317,arg1
    002760  aa   000475 000701 
    002761  aa   000000 040303 
                        000001 
                                  2053  	return
    002762  aa   000000 000217 
                                  2054  
    002763                        2055  ccv_e2:
                                  2056  	print		318,op1
    002763  aa   000476 000701 
    002764  aa   000000 740303 
                        000001 
                                  2057  	return
    002765  aa   000000 000217 
                                  2058  
                                  2059  builtin:	func		2,abort_list_op		last assigned number = 93
    002766  0a   003401 001215 
                                  2060  "
                                  2061  "	The builtin code depends on 5 indexed operators. Four uses are here. The other
                                  2062  "	appears in the cv_bif_to_external code. Remember to change ALL five.
                                  2063  "
                                  2064  
                                  2065  	push_bif_index	arg1
    002767  aa   000000 040267 
                                  2066  	push_count_indexed	arg3,(1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,2,2,2,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,2,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,2,-1,1,1,3,2,2,2,2,-1,-1)
    002770  aa   000135 140212 
    002771  aa   000001 000001 
    002772  aa   000001 000001 
    002773  aa   000001 000001 
    002774  aa   000001 000001 
    002775  aa   000001 000001 
    002776  aa   000001 000002 
    002777  aa   000002 000001 
    003000  aa   000001 000001 
    003001  aa   000002 000002 
    003002  aa   000002 000001 
    003003  aa   000001 000001 
    003004  aa   777777 777777 
    003005  aa   777777 777777 
    003006  aa   777777 777777 
    003007  aa   777777 777777 
    003010  aa   777777 777777 
    003011  aa   777777 777777 
    003012  aa   000002 000002 
    003013  aa   000002 000002 
    003014  aa   000002 000002 
    003015  aa   000001 000001 
    003016  aa   000001 000001 
    003017  aa   000001 000001 
    003020  aa   000001 000001 
    003021  aa   000001 000001 
    003022  aa   000001 000001 
    003023  aa   000001 000001 
    003024  aa   000001 000001 
    003025  aa   777777 000001 
    003026  aa   000001 000001 
    003027  aa   000001 000001 
    003030  aa   000001 000001 
    003031  aa   000001 000001 
    003032  aa   000002 000001 
    003033  aa   000002 000002 
    003034  aa   000002 000002 
    003035  aa   000001 000001 
    003036  aa   000001 000001 
    003037  aa   000001 000001 
    003040  aa   000001 000001 
    003041  aa   000001 000001 
    003042  aa   000002 777777 
    003043  aa   000001 000001 
    003044  aa   000003 000002 
    003045  aa   000002 000002 
    003046  aa   000002 777777 
    003047  aa   777777 000000 
                        000135 
                                  2067  
                                  2068  	if		arg4,<,0,builtin_var
    003050  0a   003230 200237 
                                  2069  	if		arg2,=,op1,builtin2
    003051  0a   003055 111637 
                                  2070  
                                  2071  	print		319,arg1
    003052  aa   000477 000701 
    003053  aa   000000 040303 
                        000001 
                                  2072  
                                  2073  	jump		bu_abort_list
    003054  0a   003402 000220 
                                  2074  
    003055                        2075  builtin2:
                                  2076  	decrement		arg2,1
    003055  aa   000001 100264 
                                  2077  	scan		bu_abort_list,next
    003056                     
    003056  0a   003402 000221 
    003057  0a   003060 000220 
    003060                     
                                  2078  
                                  2079  	jump_indexed	arg3,(builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.tl,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.char_ok,builtin2.char_ok,builtin2.char_ok,builtin2.char_ok,builtin2.char_ok,builtin2.char_ok,builtin2.char_ok,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.nc,builtin2.one_word,builtin2.one_word,builtin2.one_word,builtin2.one_word,builtin2.one_word,builtin2.one_word,builtin2.one_word,builtin2.one_word,builtin2.one_word,builtin2.one_word)
    003060  aa   000135 140241 
    003061  00   003146 003146 
    003062  00   003146 003146 
    003063  00   003146 003146 
    003064  00   003146 003146 
    003065  00   003146 003146 
    003066  00   003146 003146 
    003067  00   003146 003146 
    003070  00   003146 003146 
    003071  00   003146 003146 
    003072  00   003146 003146 
    003073  00   003146 003146 
    003074  00   003146 003146 
    003075  00   003146 003146 
    003076  00   003146 003146 
    003077  00   003146 003146 
    003100  00   003146 003146 
    003101  00   003146 003146 
    003102  00   003146 003146 
    003103  00   003146 003146 
    003104  00   003146 003146 
    003105  00   003146 003146 
    003106  00   003146 003146 
    003107  00   003146 003146 
    003110  00   003146 003144 
    003111  00   003146 003146 
    003112  00   003146 003146 
    003113  00   003146 003146 
    003114  00   003146 003146 
    003115  00   003146 003146 
    003116  00   003146 003146 
    003117  00   003146 003146 
    003120  00   003146 003146 
    003121  00   003146 003140 
    003122  00   003140 003140 
    003123  00   003140 003140 
    003124  00   003140 003140 
    003125  00   003146 003146 
    003126  00   003146 003146 
    003127  00   003146 003146 
    003130  00   003146 003146 
    003131  00   003146 003146 
    003132  00   003146 003142 
    003133  00   003142 003142 
    003134  00   003142 003142 
    003135  00   003142 003142 
    003136  00   003142 003142 
    003137  0a   003142 000000 
                        000135 
                                  2080  
    003140                        2081  builtin2.char_ok:
                                  2082  	unless_dt		(int,real,dp,cmpx,char),wrong_type.p
    003140  0a   003411 750226 
                                  2083  	jump		builtin2.join
    003141  0a   003147 000220 
                                  2084  
    003142                        2085  builtin2.one_word:
                                  2086  	unless_one_word_dt	op1,bu_dt1.p
    003142  0a   006562 740315 
                                  2087  	jump		builtin2.join
    003143  0a   003147 000220 
                                  2088  
    003144                        2089  builtin2.tl:
                                  2090  	unless_dt		(int,real,dp,cmpx,typeless),wrong_type.p
    003144  0a   003411 744226 
                                  2091  	jump		builtin2.join
    003145  0a   003147 000220 
                                  2092  
    003146                        2093  builtin2.nc:
                                  2094  	unless_dt		(int,real,dp,cmpx),wrong_type.p
    003146  0a   003411 740226 
                                  2095  
    003147                        2096  builtin2.join:
                                  2097  	unless		arg2,=,0,builtin2
    003147  0a   003055 110240 
                                  2098  
    003150                        2099  builtin3:
                                  2100  	jump_indexed	arg3,(abs,iabs,dabs,cabs,alog,dlog,clog,alog10,dlog10,atan,datan,atan2,datan2,cos,dcos,ccos,dim,idim,ddim,exp,dexp,cexp,max,amax0,amax1,max0,max1,dmax1,min,amin0,amin1,min0,min1,dmin1,mod,amod,dmod,sign,isign,dsign,sin,dsin,csin,sqrt,dsqrt,csqrt,tanh,int_builtin,aint,idint,float,ifix,sngl,real_builtin,aimag,dble,cmplx,conjg,tan,dtan,asin,dasin,acos,dacos,char_builtin,ichar,index,len,lge,lgt,lle,llt,cosh,sinh,dcosh,dsinh,dtanh,dint,anint,dnint,nint,idnint,dprod,and.tl,bool.tl,compl.tl,fld.tl,ilr.tl,ils.tl,irl.tl,irs.tl,or.tl,xor.tl)
    003150  aa   000135 140241 
    003151  00   003420 003424 
    003152  00   003437 003445 
    003153  00   003462 003500 
    003154  00   003511 003525 
    003155  00   003543 003556 
    003156  00   003574 003607 
    003157  00   003674 003712 
    003160  00   003730 003741 
    003161  00   003755 003770 
    003162  00   004047 004114 
    003163  00   004132 004143 
    003164  00   004157 004341 
    003165  00   004366 004411 
    003166  00   004434 004462 
    003167  00   004506 004670 
    003170  00   004715 004741 
    003171  00   004764 005012 
    003172  00   005036 005105 
    003173  00   005116 005133 
    003174  00   005146 005211 
    003175  00   005341 005356 
    003176  00   005367 005401 
    003177  00   005416 005427 
    003200  00   005441 005557 
    003201  00   005603 005600 
    003202  00   005704 005576 
    003203  00   005706 005665 
    003204  00   005711 005715 
    003205  00   005733 006066 
    003206  00   006116 006133 
    003207  00   006146 006163 
    003210  00   006176 006213 
    003211  00   006226 006242 
    003212  00   006264 006335 
    003213  00   006341 006353 
    003214  00   006365 006377 
    003215  00   005525 005473 
    003216  00   005554 005522 
    003217  00   005470 005620 
    003220  00   005623 005640 
    003221  00   005643 005662 
    003222  00   006411 006421 
    003223  00   006434 006436 
    003224  00   006442 006444 
    003225  00   006462 006500 
    003226  00   006516 006534 
    003227  0a   006547 000000 
                        000135 
                                  2101  
    003230                        2102  builtin_var:
                                  2103  	jump_indexed	arg3,(builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.1,builtin_var.2,builtin_var.2,builtin_var.2,builtin_var.2,builtin_var.2,builtin_var.2,builtin_var.2,builtin_var.2,builtin_var.2,builtin_var.2)
    003230  aa   000135 140241 
    003231  00   003310 003310 
    003232  00   003310 003310 
    003233  00   003310 003310 
    003234  00   003310 003310 
    003235  00   003310 003310 
    003236  00   003310 003310 
    003237  00   003310 003310 
    003240  00   003310 003310 
    003241  00   003310 003310 
    003242  00   003310 003310 
    003243  00   003310 003310 
    003244  00   003310 003310 
    003245  00   003310 003310 
    003246  00   003310 003310 
    003247  00   003310 003310 
    003250  00   003310 003310 
    003251  00   003310 003310 
    003252  00   003310 003310 
    003253  00   003310 003310 
    003254  00   003310 003310 
    003255  00   003310 003310 
    003256  00   003310 003310 
    003257  00   003310 003310 
    003260  00   003310 003310 
    003261  00   003310 003310 
    003262  00   003310 003310 
    003263  00   003310 003310 
    003264  00   003310 003310 
    003265  00   003310 003310 
    003266  00   003310 003310 
    003267  00   003310 003310 
    003270  00   003310 003310 
    003271  00   003310 003310 
    003272  00   003310 003310 
    003273  00   003310 003310 
    003274  00   003310 003310 
    003275  00   003310 003310 
    003276  00   003310 003310 
    003277  00   003310 003310 
    003300  00   003310 003310 
    003301  00   003310 003310 
    003302  00   003310 003315 
    003303  00   003315 003315 
    003304  00   003315 003315 
    003305  00   003315 003315 
    003306  00   003315 003315 
    003307  0a   003315 000000 
                        000135 
                                  2104  
                                  2105  
    003310                        2106  builtin_var.1:
                                  2107  	scan		bu_abort_list,(next,builtin3)
    003310                     
    003310  0a   003402 000221 
    003311  0a   003313 000220 
    003312  0a   003150 000220 
    003313                     
                                  2108  
                                  2109  	" NOTE: There are no non typeless builtins which take a variable
                                  2110  	" number of arguments and which also take character mode arguments.
                                  2111  
                                  2112  	unless_dt		(int,real,dp,cmpx),wrong_type.p
    003313  0a   003411 740226 
                                  2113  	jump		builtin_var.1
    003314  0a   003310 000220 
                                  2114  
    003315                        2115  builtin_var.2:
                                  2116  	scan		bu_abort_list,(next,builtin3)
    003315                     
    003315  0a   003402 000221 
    003316  0a   003320 000220 
    003317  0a   003150 000220 
    003320                     
                                  2117  	unless_one_word_dt	op1,bu_dt1.p
    003320  0a   006562 740315 
                                  2118  	jump		builtin_var.2
    003321  0a   003315 000220 
                                  2119  
    003322                        2120  bu_ret_q:
                                  2121  	scan		continue,(continue,next)
    003322                     
    003322  0a   003322 000221 
    003323  0a   003322 000220 
    003324  0a   003325 000220 
    003325                     
                                  2122  
                                  2123  	return		q
    003325  aa   000001 000617 
                                  2124  
    003326                        2125  bu_ret_eaq:
                                  2126  	scan		continue,(continue,next)
    003326                     
    003326  0a   003326 000221 
    003327  0a   003326 000220 
    003330  0a   003331 000220 
    003331                     
                                  2127  
                                  2128  	return		eaq
    003331  aa   000001 002217 
                                  2129  
    003332                        2130  bu_ret_deaq:
                                  2131  	scan		continue,(continue,next)
    003332                     
    003332  0a   003332 000221 
    003333  0a   003332 000220 
    003334  0a   003335 000220 
    003335                     
                                  2132  
                                  2133  	return		deaq
    003335  aa   000001 002617 
                                  2134  
    003336                        2135  bu_ret_aq:
                                  2136  	scan		continue,(continue,next)
    003336                     
    003336  0a   003336 000221 
    003337  0a   003336 000220 
    003340  0a   003341 000220 
    003341                     
                                  2137  
                                  2138  	return		aq
    003341  aa   000001 001617 
                                  2139  
    003342                        2140  bu_ret_tq:
                                  2141  	scan		continue,(continue,next)
    003342                     
    003342  0a   003342 000221 
    003343  0a   003342 000220 
    003344  0a   003345 000220 
    003345                     
                                  2142  
                                  2143  	return		tq
    003345  aa   000001 004617 
                                  2144  
    003346                        2145  bu_ret_trc:
                                  2146  	scan		continue,(continue,next)
    003346                     
    003346  0a   003346 000221 
    003347  0a   003346 000220 
    003350  0a   003351 000220 
    003351                     
                                  2147  
                                  2148  	return		trc
    003351  aa   000001 011217 
                                  2149  
    003352                        2150  bu_ret_tnc:
                                  2151  	scan		continue,(continue,next)
    003352                     
    003352  0a   003352 000221 
    003353  0a   003352 000220 
    003354  0a   003355 000220 
    003355                     
                                  2152  
                                  2153  	return		tnc
    003355  aa   000001 010617 
                                  2154  
    003356                        2155  bu_ret_op1:
                                  2156  	scan		continue,(continue,next)
    003356                     
    003356  0a   003356 000221 
    003357  0a   003356 000220 
    003360  0a   003361 000220 
    003361                     
                                  2157  
                                  2158  	return		op1
    003361  aa   000001 740217 
                                  2159  
    003362                        2160  mm_ret_q:
                                  2161  	push_temp		int
    003362  aa   000000 000604 
                                  2162  	in_reg		q,op1
    003363  aa   000000 740660 
                                  2163  	use_ind
    003364  aa   000007 000206 
                                  2164  	return		op1
    003365  aa   000001 740217 
                                  2165  
    003366                        2166  mm_ret_eaq:
                                  2167  	push_temp		real
    003366  aa   000000 001204 
                                  2168  	in_reg		eaq,op1
    003367  aa   000000 742260 
                                  2169  	use_ind
    003370  aa   000007 000206 
                                  2170  	return		op1
    003371  aa   000001 740217 
                                  2171  
    003372                        2172  mm_ret_deaq:
                                  2173  	push_temp		dp
    003372  aa   000000 001604 
                                  2174  	in_reg		deaq,op1
    003373  aa   000000 742660 
                                  2175  	use_ind
    003374  aa   000007 000206 
                                  2176  	return		op1
    003375  aa   000001 740217 
                                  2177  
    003376                        2178  mm_ret_tq:
                                  2179  	push_temp		typeless
    003376  aa   000000 003604 
                                  2180  	in_reg		tq,op1
    003377  aa   000000 744660 
                                  2181  	return		op1
    003400  aa   000001 740217 
                                  2182  
    003401                        2183  abort_list_op:
                                  2184  	proc		0
    003401  aa   000000 000214 
                                  2185  
    003402                        2186  bu_abort_list:
                                  2187  	scan		continue,(continue,next)
    003402                     
    003402  0a   003402 000221 
    003403  0a   003402 000220 
    003404  0a   003405 000220 
    003405                     
                                  2188  
                                  2189  	error
    003405  aa   000000 000302 
                                  2190  
    003406                        2191  wrong_number.p:
                                  2192  	print		319,arg1
    003406  aa   000477 000701 
    003407  aa   000000 040303 
                        000001 
                                  2193  
                                  2194  	error
    003410  aa   000000 000302 
                                  2195  
    003411                        2196  wrong_type.p:
                                  2197  	print		320,arg1,op1
    003411  aa   000500 001301 
    003412  aa   000000 040303 
    003413  aa   000000 740303 
                        000002 
                                  2198  
                                  2199  	jump		bu_abort_list
    003414  0a   003402 000220 
                                  2200  
    003415                        2201  wrong_char_length.p:
                                  2202  	print		359,op2
    003415  aa   000547 000701 
    003416  aa   000000 700303 
                        000001 
                                  2203  
                                  2204  	jump		bu_abort_list
    003417  0a   003402 000220 
                                  2205  
    003420                        2206  abs:						" builtin 01
                                  2207  	if_dt		int,iabs.1
    003420  0a   003425 400225 
                                  2208  	if_dt		real,abs.1
    003421  0a   003432 200225 
                                  2209  	if_dt		dp,dabs.1
    003422  0a   003440 100225 
                                  2210  	jump		cabs.1
    003423  0a   003446 000220 
                                  2211  
    003424                        2212  iabs:						" builtin 02
                                  2213  	unless_dt		int,iabs.p
    003424  0a   003457 400226 
    003425                        2214  iabs.1:
                                  2215  	load_for_test	q,arg5
    003425  aa   000000 240761 
    003426  aa   000003 6050 04   2216  	tpl		3,ic
    003427  aa  0 00110 6761 00   2217  	erq		pr0|all_ones
    003430  aa   000001 0760 07   2218  	adq		1,dl
                                  2219  	jump		bu_ret_q
    003431  0a   003322 000220 
                                  2220  
    003432                        2221  abs.1:
                                  2222  	load_for_test	eaq,arg5
    003432  aa   000000 242361 
    003433  aa   000002 6050 04   2223  	tpl		2,ic
                                  2224  	emit		1
    003434  aa   000001 000242 
    003435  aa   000000 5130 00   2225  	fneg
                                  2226  	jump		bu_ret_eaq
    003436  0a   003326 000220 
                                  2227  
    003437                        2228  dabs:						" builtin 03
                                  2229  	unless_dt		dp,dabs.p
    003437  0a   003460 100226 
    003440                        2230  dabs.1:
                                  2231  	load_for_test	deaq,arg5
    003440  aa   000000 242761 
    003441  aa   000002 6050 04   2232  	tpl		2,ic
                                  2233  	emit		1
    003442  aa   000001 000242 
    003443  aa   000000 5130 00   2234  	fneg
                                  2235  	jump		bu_ret_deaq
    003444  0a   003332 000220 
                                  2236  
    003445                        2237  cabs:						" builtin 04
                                  2238  	unless_dt		cmpx,cabs.p
    003445  0a   003461 040226 
    003446                        2239  cabs.1:
                                  2240  	load		aq,arg5
    003446  aa   000000 241656 
                                  2241  	use_eaq
    003447  aa   000000 000255 
                                  2242  	push_temp		32
    003450  aa   000040 000204 
                                  2243  	load_pr		pr2,op1
    003451  aa   000003 740251 
                                  2244  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    003452  aa   377560 000250 
    003453  aa  0 01406 2731 00   2245  	tsp3		pr0|cabs_
    003454  aa  6 00050 4311 00   2246  	fld		pr6|temp_pt
                                  2247  	free_regs
    003455  aa   000004 000206 
                                  2248  	jump		bu_ret_eaq
    003456  0a   003326 000220 
                                  2249  
    003457                        2250  iabs.p:
                                  2251  	jump		bu_dt5.p
    003457  0a   006572 000220 
                                  2252  
    003460                        2253  dabs.p:
                                  2254  	jump		bu_dt5.p
    003460  0a   006572 000220 
                                  2255  
    003461                        2256  cabs.p:
                                  2257  	jump		bu_dt5.p
    003461  0a   006572 000220 
                                  2258  
    003462                        2259  alog:						" builtin 05
                                  2260  	if_dt		int,alog_i
    003462  0a   003470 400225 
                                  2261  	if_dt		real,alog.1
    003463  0a   003466 200225 
                                  2262  	if_dt		dp,dlog.1
    003464  0a   003501 100225 
                                  2263  	jump		clog.1
    003465  0a   003512 000220 
                                  2264  
    003466                        2265  alog.1:
                                  2266  	load		eaq,arg5
    003466  aa   000000 242256 
                                  2267  	jump		alog.2
    003467  0a   003471 000220 
                                  2268  
    003470                        2269  alog_i:
                                  2270  	s_call		cv_load.ir
    003470  0a   002050 000223 
                                  2271  
    003471                        2272  alog.2:
                                  2273  	use_eaq
    003471  aa   000000 000255 
                                  2274  	push_temp		32
    003472  aa   000040 000204 
                                  2275  	load_pr		pr2,op1
    003473  aa   000003 740251 
                                  2276  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    003474  aa   377560 000250 
    003475  aa  0 01312 2731 00   2277  	tsp3		pr0|log_
                                  2278  	free_regs
    003476  aa   000004 000206 
                                  2279  	jump		bu_ret_eaq
    003477  0a   003326 000220 
                                  2280  
    003500                        2281  dlog:						" builtin 06
                                  2282  	unless_dt		dp,dlog.p
    003500  0a   003523 100226 
    003501                        2283  dlog.1:
                                  2284  	load		deaq,arg5
    003501  aa   000000 242656 
                                  2285  	use_eaq
    003502  aa   000000 000255 
                                  2286  	push_temp		32
    003503  aa   000040 000204 
                                  2287  	load_pr		pr2,op1
    003504  aa   000003 740251 
                                  2288  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    003505  aa   377560 000250 
    003506  aa  0 01333 2731 00   2289  	tsp3		pr0|dlog_
                                  2290  	free_regs
    003507  aa   000004 000206 
                                  2291  	jump		bu_ret_deaq
    003510  0a   003332 000220 
                                  2292  
    003511                        2293  clog:						" builtin 07
                                  2294  	unless_dt		cmpx,clog.p
    003511  0a   003524 040226 
    003512                        2295  clog.1:
                                  2296  	load		aq,arg5
    003512  aa   000000 241656 
                                  2297  	use_eaq
    003513  aa   000000 000255 
                                  2298  	push_temp		32
    003514  aa   000040 000204 
                                  2299  	load_pr		pr2,op1
    003515  aa   000003 740251 
                                  2300  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    003516  aa   377560 000250 
    003517  aa  0 01411 2731 00   2301  	tsp3		pr0|clog_
    003520  aa  6 00050 2371 00   2302  	ldaq		pr6|temp_pt
                                  2303  	free_regs
    003521  aa   000004 000206 
                                  2304  	jump		bu_ret_aq
    003522  0a   003336 000220 
                                  2305  
    003523                        2306  dlog.p:
                                  2307  	jump		bu_dt5.p
    003523  0a   006572 000220 
                                  2308  
    003524                        2309  clog.p:
                                  2310  	jump		bu_dt5.p
    003524  0a   006572 000220 
                                  2311  
    003525                        2312  alog10:						" builtin 08
                                  2313  	if_dt		int,alog10_i
    003525  0a   003533 400225 
                                  2314  	if_dt		real,alog10.1
    003526  0a   003531 200225 
                                  2315  	if_dt		dp,dlog10.1
    003527  0a   003544 100225 
                                  2316  	jump		alog10.p
    003530  0a   003554 000220 
                                  2317  
    003531                        2318  alog10.1:
                                  2319  	load		eaq,arg5
    003531  aa   000000 242256 
                                  2320  	jump		alog10.2
    003532  0a   003534 000220 
                                  2321  
    003533                        2322  alog10_i:
                                  2323  	s_call		cv_load.ir
    003533  0a   002050 000223 
                                  2324  
    003534                        2325  alog10.2:
                                  2326  	use_eaq
    003534  aa   000000 000255 
                                  2327  	push_temp		32
    003535  aa   000040 000204 
                                  2328  	load_pr		pr2,op1
    003536  aa   000003 740251 
                                  2329  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    003537  aa   377560 000250 
    003540  aa  0 01313 2731 00   2330  	tsp3		pr0|alog10_
                                  2331  	free_regs
    003541  aa   000004 000206 
                                  2332  	jump		bu_ret_eaq
    003542  0a   003326 000220 
                                  2333  
    003543                        2334  dlog10:						" builtin 09
                                  2335  	unless_dt		dp,dlog10.p
    003543  0a   003555 100226 
    003544                        2336  dlog10.1:
                                  2337  	load		deaq,arg5
    003544  aa   000000 242656 
                                  2338  	use_eaq
    003545  aa   000000 000255 
                                  2339  	push_temp		32
    003546  aa   000040 000204 
                                  2340  	load_pr		pr2,op1
    003547  aa   000003 740251 
                                  2341  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    003550  aa   377560 000250 
    003551  aa  0 01334 2731 00   2342  	tsp3		pr0|dlog10_
                                  2343  	free_regs
    003552  aa   000004 000206 
                                  2344  	jump		bu_ret_deaq
    003553  0a   003332 000220 
                                  2345  
    003554                        2346  alog10.p:
                                  2347  	jump		bu_dt5.p
    003554  0a   006572 000220 
                                  2348  
    003555                        2349  dlog10.p:
                                  2350  	jump		bu_dt5.p
    003555  0a   006572 000220 
                                  2351  
    003556                        2352  atan:						" builtin 10
                                  2353  	if_dt		int,atan_i
    003556  0a   003564 400225 
                                  2354  	if_dt		real,atan.1
    003557  0a   003562 200225 
                                  2355  	if_dt		dp,datan.1
    003560  0a   003575 100225 
                                  2356  	jump		atan.p
    003561  0a   003605 000220 
                                  2357  
    003562                        2358  atan.1:
                                  2359  	load		eaq,arg5
    003562  aa   000000 242256 
                                  2360  	jump		atan.2
    003563  0a   003565 000220 
                                  2361  
    003564                        2362  atan_i:
                                  2363  	s_call		cv_load.ir
    003564  0a   002050 000223 
                                  2364  
    003565                        2365  atan.2:
                                  2366  	use_eaq
    003565  aa   000000 000255 
                                  2367  	push_temp		32
    003566  aa   000040 000204 
                                  2368  	load_pr		pr2,op1
    003567  aa   000003 740251 
                                  2369  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    003570  aa   377560 000250 
    003571  aa  0 01307 2731 00   2370  	tsp3		pr0|atan_
                                  2371  	free_regs
    003572  aa   000004 000206 
                                  2372  	jump		bu_ret_eaq
    003573  0a   003326 000220 
                                  2373  
    003574                        2374  datan:						" builtin 11
                                  2375  	unless_dt		dp,datan.p
    003574  0a   003606 100226 
    003575                        2376  datan.1:
                                  2377  	load		deaq,arg5
    003575  aa   000000 242656 
                                  2378  	use_eaq
    003576  aa   000000 000255 
                                  2379  	push_temp		32
    003577  aa   000040 000204 
                                  2380  	load_pr		pr2,op1
    003600  aa   000003 740251 
                                  2381  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    003601  aa   377560 000250 
    003602  aa  0 01330 2731 00   2382  	tsp3		pr0|datan_
                                  2383  	free_regs
    003603  aa   000004 000206 
                                  2384  	jump		bu_ret_deaq
    003604  0a   003332 000220 
                                  2385  
    003605                        2386  atan.p:
                                  2387  	jump		bu_dt5.p
    003605  0a   006572 000220 
                                  2388  
    003606                        2389  datan.p:
                                  2390  	jump		bu_dt5.p
    003606  0a   006572 000220 
                                  2391  
    003607                        2392  atan2:						" builtin 12
                                  2393  	dt_jump		(atan2_ii,atan2_ri,atan2_di,atan2_ci,atan2_ir,atan2_rr,atan2_dr,atan2_cr,atan2_id,atan2_rd,atan2_dd,atan2_cd,atan2_ic,atan2_rc,atan2_dc,atan2_cc,atan2_e2,atan2_e1,atan2_e2,atan2_e1)
    003607  aa   000024 000235 
    003610  00   003622 003626 
    003611  00   003632 003653 
    003612  00   003624 003634 
    003613  00   003644 003655 
    003614  00   003630 003636 
    003615  00   003635 003657 
    003616  00   003652 003654 
    003617  00   003656 003660 
    003620  00   003662 003661 
    003621  00   003662 003661 
                        000024 
                                  2394  
    003622                        2395  atan2_ii:
                                  2396  	s_call		builtin_2args_ii
    003622  0a   005226 000223 
                                  2397  	jump		atan2.1
    003623  0a   003663 000220 
                                  2398  
    003624                        2399  atan2_ir:
                                  2400  	s_call		builtin_2args_ir
    003624  0a   005257 000223 
                                  2401  	jump		atan2.1
    003625  0a   003663 000220 
                                  2402  
    003626                        2403  atan2_ri:
                                  2404  	s_call		builtin_2args_ri
    003626  0a   005275 000223 
                                  2405  	jump		atan2.1
    003627  0a   003663 000220 
                                  2406  
    003630                        2407  atan2_id:
                                  2408  	s_call		builtin_2args_id
    003630  0a   005310 000223 
                                  2409  	jump		datan2.1
    003631  0a   003700 000220 
                                  2410  
    003632                        2411  atan2_di:
                                  2412  	s_call		builtin_2args_di
    003632  0a   005326 000223 
                                  2413  	jump		datan2.1
    003633  0a   003700 000220 
                                  2414  
    003634                        2415  atan2_rr:
                                  2416  	jump		atan2.1
    003634  0a   003663 000220 
                                  2417  
    003635                        2418  atan2_dd:
                                  2419  	jump		datan2.1
    003635  0a   003700 000220 
                                  2420  
    003636                        2421  atan2_rd:
                                  2422  	load		eaq,arg5
    003636  aa   000000 242256 
                                  2423  	use_eaq
    003637  aa   000000 000255 
                                  2424  	push_temp		32
    003640  aa   000040 000204 
                                  2425  	load_pr		pr2,op1
    003641  aa   000003 740251 
                                  2426  	load_pr		pr1,arg6
    003642  aa   000002 300251 
                                  2427  	jump		datan2.2
    003643  0a   003705 000220 
                                  2428  
    003644                        2429  atan2_dr:
                                  2430  	push_temp		dp
    003644  aa   000000 001604 
                                  2431  	load		eaq,arg6
    003645  aa   000000 302256 
                                  2432  	store		deaq,op1,no_update
    003646  aa   000001 742757 
                                  2433  	swap		arg6
    003647  aa   000000 300202 
                                  2434  	pop		op1
    003650  aa   000000 740203 
                                  2435  	jump		datan2.1
    003651  0a   003700 000220 
                                  2436  
    003652                        2437  atan2_ic:
                                  2438  	jump		bu_dt6.p
    003652  0a   006576 000220 
                                  2439  
    003653                        2440  atan2_ci:
                                  2441  	jump		bu_dt5.p
    003653  0a   006572 000220 
                                  2442  
    003654                        2443  atan2_rc:
                                  2444  	jump		bu_dt6.p
    003654  0a   006576 000220 
                                  2445  
    003655                        2446  atan2_cr:
                                  2447  	jump		bu_dt5.p
    003655  0a   006572 000220 
                                  2448  
    003656                        2449  atan2_dc:
                                  2450  	jump		bu_dt6.p
    003656  0a   006576 000220 
                                  2451  
    003657                        2452  atan2_cd:
                                  2453  	jump		bu_dt5.p
    003657  0a   006572 000220 
                                  2454  
    003660                        2455  atan2_cc:
                                  2456  	jump		bu_dt5.p
    003660  0a   006572 000220 
                                  2457  
    003661                        2458  atan2_e1:
                                  2459  	jump		bu_dt5.p
    003661  0a   006572 000220 
                                  2460  
    003662                        2461  atan2_e2:
                                  2462  	jump		bu_dt6.p
    003662  0a   006576 000220 
                                  2463  
    003663                        2464  atan2.1:
                                  2465  	load		eaq,arg5
    003663  aa   000000 242256 
                                  2466  	use_eaq
    003664  aa   000000 000255 
                                  2467  	push_temp		32
    003665  aa   000040 000204 
                                  2468  	load_pr		pr2,op1
    003666  aa   000003 740251 
                                  2469  	load_pr		pr1,arg6
    003667  aa   000002 300251 
                                  2470  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr3,pr4,pr5,pr7)
    003670  aa   377160 000250 
    003671  aa  0 01336 2731 00   2471  	tsp3		pr0|atan2_
                                  2472  	free_regs
    003672  aa   000004 000206 
                                  2473  	jump		bu_ret_eaq
    003673  0a   003326 000220 
                                  2474  
    003674                        2475  datan2:						" builtin 13
                                  2476  	swap		arg5
    003674  aa   000000 240202 
                                  2477  	unless_dt		dp,atan2.p
    003675  0a   003711 100226 
                                  2478  	swap		arg5
    003676  aa   000000 240202 
                                  2479  	unless_dt		dp,atan2_ee
    003677  0a   003711 100226 
                                  2480  
    003700                        2481  datan2.1:
                                  2482  	load		deaq,arg5
    003700  aa   000000 242656 
                                  2483  	use_eaq
    003701  aa   000000 000255 
                                  2484  	push_temp		32
    003702  aa   000040 000204 
                                  2485  	load_pr		pr2,op1
    003703  aa   000003 740251 
                                  2486  	load_pr		pr1,arg6
    003704  aa   000002 300251 
    003705                        2487  datan2.2:
                                  2488  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr3,pr4,pr5,pr7)
    003705  aa   377160 000250 
    003706  aa  0 01340 2731 00   2489  	tsp3		pr0|datan2_
                                  2490  	free_regs
    003707  aa   000004 000206 
                                  2491  	jump		bu_ret_deaq
    003710  0a   003332 000220 
                                  2492  
    003711                        2493  atan2.p:
    003711                        2494  atan2_ee:
                                  2495  	jump		bu_dt6.p
    003711  0a   006576 000220 
                                  2496  
    003712                        2497  cos:						" builtin 14
                                  2498  	if_dt		int,cos_i
    003712  0a   003720 400225 
                                  2499  	if_dt		real,cos.1
    003713  0a   003716 200225 
                                  2500  	if_dt		dp,dcos.1
    003714  0a   003731 100225 
                                  2501  	jump		ccos.1
    003715  0a   003742 000220 
                                  2502  
    003716                        2503  cos.1:
                                  2504  	load		eaq,arg5
    003716  aa   000000 242256 
                                  2505  	jump		cos.2
    003717  0a   003721 000220 
                                  2506  
    003720                        2507  cos_i:
                                  2508  	s_call		cv_load.ir
    003720  0a   002050 000223 
                                  2509  
    003721                        2510  cos.2:
                                  2511  	use_eaq
    003721  aa   000000 000255 
                                  2512  	push_temp		32
    003722  aa   000040 000204 
                                  2513  	load_pr		pr2,op1
    003723  aa   000003 740251 
                                  2514  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    003724  aa   377560 000250 
    003725  aa  0 01277 2731 00   2515  	tsp3		pr0|cos_
                                  2516  	free_regs
    003726  aa   000004 000206 
                                  2517  	jump		bu_ret_eaq
    003727  0a   003326 000220 
                                  2518  
    003730                        2519  dcos:						" builtin 15
                                  2520  	unless_dt		dp,dcos.p
    003730  0a   003753 100226 
    003731                        2521  dcos.1:
                                  2522  	load		deaq,arg5
    003731  aa   000000 242656 
                                  2523  	use_eaq
    003732  aa   000000 000255 
                                  2524  	push_temp		32
    003733  aa   000040 000204 
                                  2525  	load_pr		pr2,op1
    003734  aa   000003 740251 
                                  2526  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    003735  aa   377560 000250 
    003736  aa  0 01320 2731 00   2527  	tsp3		pr0|dcos_
                                  2528  	free_regs
    003737  aa   000004 000206 
                                  2529  	jump		bu_ret_deaq
    003740  0a   003332 000220 
                                  2530  
    003741                        2531  ccos:						" builtin 16
                                  2532  	unless_dt		cmpx,ccos.p
    003741  0a   003754 040226 
    003742                        2533  ccos.1:
                                  2534  	load		aq,arg5
    003742  aa   000000 241656 
                                  2535  	use_eaq
    003743  aa   000000 000255 
                                  2536  	push_temp		32
    003744  aa   000040 000204 
                                  2537  	load_pr		pr2,op1
    003745  aa   000003 740251 
                                  2538  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    003746  aa   377560 000250 
    003747  aa  0 01407 2731 00   2539  	tsp3		pr0|ccos_
    003750  aa  6 00050 2371 00   2540  	ldaq		pr6|temp_pt
                                  2541  	free_regs
    003751  aa   000004 000206 
                                  2542  	jump		bu_ret_aq
    003752  0a   003336 000220 
                                  2543  
    003753                        2544  dcos.p:
                                  2545  	jump		bu_dt5.p
    003753  0a   006572 000220 
                                  2546  
    003754                        2547  ccos.p:
                                  2548  	jump		bu_dt5.p
    003754  0a   006572 000220 
                                  2549  
    003755                        2550  dim:						" builtin 17
                                  2551  	dt_jump		(dim_ii,dim_ri,dim_di,dim_ci,dim_ir,dim_rr,dim_dr,dim_cr,dim_id,dim_rd,dim_dd,dim_cd,dim_ic,dim_rc,dim_dc,dim_cc,dim_e2,dim_e1,dim_e2,dim_e1)
    003755  aa   000024 000235 
    003756  00   003774 004011 
    003757  00   004015 004024 
    003760  00   004007 004017 
    003761  00   004022 004026 
    003762  00   004013 004021 
    003763  00   004020 004030 
    003764  00   004023 004025 
    003765  00   004027 004031 
    003766  00   004033 004032 
    003767  00   004033 004032 
                        000024 
                                  2552  
    003770                        2553  idim:						" builtin 18
                                  2554  	swap		arg5
    003770  aa   000000 240202 
                                  2555  	unless_dt		int,idim.p
    003771  0a   004113 400226 
                                  2556  	swap		arg5
    003772  aa   000000 240202 
                                  2557  	unless_dt		int,idim.p
    003773  0a   004113 400226 
                                  2558  
    003774                        2559  dim_ii:
                                  2560  	push_temp		int
    003774  aa   000000 000604 
                                  2561  
                                  2562  	load		q,arg5
    003775  aa   000000 240656 
                                  2563  	use_eaq
    003776  aa   000000 000255 
                                  2564  	make_addressable	arg5,arg6
    003777  aa   300000 240307 
    004000  aa   300000 1160 00   2565  	cmpq		arg6
    004001  aa   000002 6040 04   2566  	tmi		2,ic
    004002  aa   300000 2360 00   2567  	ldq		arg6
    004003  aa   740000 7560 00   2568  	stq		op1
    004004  aa   240000 2360 00   2569  	ldq		arg5
    004005  aa   740000 1760 00   2570  	sbq		op1
                                  2571  	jump		bu_ret_q
    004006  0a   003322 000220 
                                  2572  
    004007                        2573  dim_ir:
                                  2574  	s_call		builtin_2args_ir
    004007  0a   005257 000223 
                                  2575  	jump		dim.1
    004010  0a   004034 000220 
                                  2576  
    004011                        2577  dim_ri:
                                  2578  	s_call		builtin_2args_ri
    004011  0a   005275 000223 
                                  2579  	jump		dim.1
    004012  0a   004034 000220 
                                  2580  
    004013                        2581  dim_id:
                                  2582  	s_call		builtin_2args_id
    004013  0a   005310 000223 
                                  2583  	jump		ddim.1
    004014  0a   004053 000220 
                                  2584  
    004015                        2585  dim_di:
                                  2586  	s_call		builtin_2args_di
    004015  0a   005326 000223 
                                  2587  	jump		ddim.1
    004016  0a   004053 000220 
                                  2588  
    004017                        2589  dim_rr:
                                  2590  	jump		dim.1
    004017  0a   004034 000220 
                                  2591  
    004020                        2592  dim_dd:
                                  2593  	jump		ddim.1
    004020  0a   004053 000220 
                                  2594  
    004021                        2595  dim_rd:
                                  2596  	jump		rddim.1
    004021  0a   004066 000220 
                                  2597  
    004022                        2598  dim_dr:
                                  2599  	jump		drdim.1
    004022  0a   004101 000220 
                                  2600  
    004023                        2601  dim_ic:
                                  2602  	jump		bu_dt6.p
    004023  0a   006576 000220 
                                  2603  
    004024                        2604  dim_ci:
                                  2605  	jump		bu_dt5.p
    004024  0a   006572 000220 
                                  2606  
    004025                        2607  dim_rc:
                                  2608  	jump		bu_dt6.p
    004025  0a   006576 000220 
                                  2609  
    004026                        2610  dim_cr:
                                  2611  	jump		bu_dt5.p
    004026  0a   006572 000220 
                                  2612  
    004027                        2613  dim_dc:
                                  2614  	jump		bu_dt6.p
    004027  0a   006576 000220 
                                  2615  
    004030                        2616  dim_cd:
                                  2617  	jump		bu_dt5.p
    004030  0a   006572 000220 
                                  2618  
    004031                        2619  dim_cc:
                                  2620  	jump		bu_dt5.p
    004031  0a   006572 000220 
                                  2621  
    004032                        2622  dim_e1:
                                  2623  	jump		bu_dt5.p
    004032  0a   006572 000220 
                                  2624  
    004033                        2625  dim_e2:
                                  2626  	jump		bu_dt6.p
    004033  0a   006576 000220 
                                  2627  
    004034                        2628  dim.1:
                                  2629  	load		eaq,arg5
    004034  aa   000000 242256 
                                  2630  	use_eaq
    004035  aa   000000 000255 
                                  2631  	make_addressable	arg5,arg6
    004036  aa   300000 240307 
                                  2632  	round		eaq
    004037  aa   000000 002354 
    004040  aa   300000 5150 00   2633  	fcmp		arg6
    004041  aa   000002 6040 04   2634  	tmi		2,ic
    004042  aa   300000 4310 00   2635  	fld		arg6
                                  2636  	emit		1
    004043  aa   000001 000242 
    004044  aa   000000 5130 00   2637  	fneg
    004045  aa   240000 4750 00   2638  	fad		arg5
                                  2639  	jump		bu_ret_eaq
    004046  0a   003326 000220 
                                  2640  
    004047                        2641  ddim:						" builtin 19
                                  2642  	swap		arg5
    004047  aa   000000 240202 
                                  2643  	unless_dt		dp,ddim.p
    004050  0a   004113 100226 
                                  2644  	swap		arg5
    004051  aa   000000 240202 
                                  2645  	unless_dt		dp,ddim.p
    004052  0a   004113 100226 
                                  2646  
    004053                        2647  ddim.1:
                                  2648  	load		deaq,arg5
    004053  aa   000000 242656 
                                  2649  	use_eaq
    004054  aa   000000 000255 
                                  2650  	make_addressable	arg5,arg6
    004055  aa   300000 240307 
                                  2651  	round		deaq
    004056  aa   000000 002754 
    004057  aa   300000 5170 00   2652  	dfcmp		arg6
    004060  aa   000002 6040 04   2653  	tmi		2,ic
    004061  aa   300000 4330 00   2654  	dfld		arg6
                                  2655  	emit		1
    004062  aa   000001 000242 
    004063  aa   000000 5130 00   2656  	fneg
    004064  aa   240000 4770 00   2657  	dfad		arg5
                                  2658  	jump		bu_ret_deaq
    004065  0a   003332 000220 
                                  2659  
    004066                        2660  rddim.1:
                                  2661  	load		eaq,arg5
    004066  aa   000000 242256 
                                  2662  	use_eaq
    004067  aa   000000 000255 
                                  2663  	make_addressable	arg5,arg6
    004070  aa   300000 240307 
                                  2664  	round		deaq
    004071  aa   000000 002754 
    004072  aa   300000 5170 00   2665  	dfcmp		arg6
    004073  aa   000002 6040 04   2666  	tmi		2,ic
    004074  aa   300000 4330 00   2667  	dfld		arg6
                                  2668  	emit		1
    004075  aa   000001 000242 
    004076  aa   000000 5130 00   2669  	fneg
    004077  aa   240000 4750 00   2670  	fad		arg5
                                  2671  	jump		bu_ret_deaq
    004100  0a   003332 000220 
                                  2672  
    004101                        2673  drdim.1:
                                  2674  	load		deaq,arg5
    004101  aa   000000 242656 
                                  2675  	use_eaq
    004102  aa   000000 000255 
                                  2676  	make_addressable	arg5,arg6
    004103  aa   300000 240307 
    004104  aa   300000 5150 00   2677  	fcmp		arg6
    004105  aa   000002 6040 04   2678  	tmi		2,ic
    004106  aa   300000 4310 00   2679  	fld		arg6
                                  2680  	emit		1
    004107  aa   000001 000242 
    004110  aa   000000 5130 00   2681  	fneg
    004111  aa   240000 4770 00   2682  	dfad		arg5
                                  2683  	jump		bu_ret_deaq
    004112  0a   003332 000220 
                                  2684  
    004113                        2685  idim.p:
    004113                        2686  ddim.p:
                                  2687  	jump		bu_dt6.p
    004113  0a   006576 000220 
                                  2688  
    004114                        2689  exp:						" builtin 20
                                  2690  	if_dt		int,exp_i
    004114  0a   004122 400225 
                                  2691  	if_dt		real,exp.1
    004115  0a   004120 200225 
                                  2692  	if_dt		dp,dexp.1
    004116  0a   004133 100225 
                                  2693  	jump		cexp.1
    004117  0a   004144 000220 
                                  2694  
    004120                        2695  exp.1:
                                  2696  	load		eaq,arg5
    004120  aa   000000 242256 
                                  2697  	jump		exp.2
    004121  0a   004123 000220 
                                  2698  
    004122                        2699  exp_i:
                                  2700  	s_call		cv_load.ir
    004122  0a   002050 000223 
                                  2701  
    004123                        2702  exp.2:
                                  2703  	use_eaq
    004123  aa   000000 000255 
                                  2704  	push_temp		32
    004124  aa   000040 000204 
                                  2705  	load_pr		pr2,op1
    004125  aa   000003 740251 
                                  2706  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    004126  aa   377560 000250 
    004127  aa  0 01314 2731 00   2707  	tsp3		pr0|exp_
                                  2708  	free_regs
    004130  aa   000004 000206 
                                  2709  	jump		bu_ret_eaq
    004131  0a   003326 000220 
                                  2710  
    004132                        2711  dexp:						" builtin 21
                                  2712  	unless_dt		dp,dexp.p
    004132  0a   004155 100226 
                                  2713  
    004133                        2714  dexp.1:
                                  2715  	load		deaq,arg5
    004133  aa   000000 242656 
                                  2716  	use_eaq
    004134  aa   000000 000255 
                                  2717  	push_temp		32
    004135  aa   000040 000204 
                                  2718  	load_pr		pr2,op1
    004136  aa   000003 740251 
                                  2719  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    004137  aa   377560 000250 
    004140  aa  0 01335 2731 00   2720  	tsp3		pr0|dexp_
                                  2721  	free_regs
    004141  aa   000004 000206 
                                  2722  	jump		bu_ret_deaq
    004142  0a   003332 000220 
                                  2723  
    004143                        2724  cexp:						" builtin 22
                                  2725  	unless_dt		cmpx,cexp.p
    004143  0a   004156 040226 
                                  2726  
    004144                        2727  cexp.1:
                                  2728  	load		aq,arg5
    004144  aa   000000 241656 
                                  2729  	use_eaq
    004145  aa   000000 000255 
                                  2730  	push_temp		32
    004146  aa   000040 000204 
                                  2731  	load_pr		pr2,op1
    004147  aa   000003 740251 
                                  2732  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    004150  aa   377560 000250 
    004151  aa  0 01410 2731 00   2733  	tsp3		pr0|cexp_
    004152  aa  6 00050 2371 00   2734  	ldaq		pr6|temp_pt
                                  2735  	free_regs
    004153  aa   000004 000206 
                                  2736  	jump		bu_ret_aq
    004154  0a   003336 000220 
                                  2737  
    004155                        2738  dexp.p:
                                  2739  	jump		bu_dt5.p
    004155  0a   006572 000220 
                                  2740  
    004156                        2741  cexp.p:
                                  2742  	jump		bu_dt5.p
    004156  0a   006572 000220 
                                  2743  
    004157                        2744  max:						" builtin 23
                                  2745  	unless		arg2,>,1,wrong_number.p
    004157  0a   003406 104640 
                                  2746  	dt_jump		(max_ii,max_ri,max_di,max_ci,max_ir,max_rr,max_dr,max_cr,max_id,max_rd,max_dd,max_cd,max_ic,max_rc,max_dc,max_cc,max_e2,max_e1,max_e2,max_e1)
    004160  aa   000024 000235 
    004161  00   004173 004176 
    004162  00   004202 004216 
    004163  00   004174 004204 
    004164  00   004213 004220 
    004165  00   004200 004206 
    004166  00   004205 004222 
    004167  00   004215 004217 
    004170  00   004221 004223 
    004171  00   004225 004224 
    004172  00   004225 004224 
                        000024 
                                  2747  
    004173                        2748  max_ii:
                                  2749  	jump		g.max0
    004173  0a   004226 000220 
                                  2750  
    004174                        2751  max_ir:
                                  2752  	s_call		builtin_2args_ir
    004174  0a   005257 000223 
                                  2753  	jump		g.amax1
    004175  0a   004254 000220 
                                  2754  
    004176                        2755  max_ri:
                                  2756  	s_call		builtin_2args_ri
    004176  0a   005275 000223 
                                  2757  	jump		g.amax1
    004177  0a   004254 000220 
                                  2758  
    004200                        2759  max_id:
                                  2760  	s_call		builtin_2args_id
    004200  0a   005310 000223 
                                  2761  	jump		g.dmax1
    004201  0a   004305 000220 
                                  2762  
    004202                        2763  max_di:
                                  2764  	s_call		builtin_2args_di
    004202  0a   005326 000223 
                                  2765  	jump		g.dmax1
    004203  0a   004305 000220 
                                  2766  
    004204                        2767  max_rr:
                                  2768  	jump		g.amax1
    004204  0a   004254 000220 
                                  2769  
    004205                        2770  max_dd:
                                  2771  	jump		g.dmax1
    004205  0a   004305 000220 
                                  2772  
    004206                        2773  max_rd:
                                  2774  	swap		op2
    004206  aa   000000 700202 
                                  2775  	load		eaq,op1
    004207  aa   000000 742256 
                                  2776  	round		eaq
    004210  aa   000000 002354 
                                  2777  	copy		op2
    004211  aa   000000 700201 
                                  2778  	jump		g.dmax1.loop.1
    004212  0a   004327 000220 
                                  2779  
    004213                        2780  max_dr:
                                  2781  	swap		op2
    004213  aa   000000 700202 
                                  2782  	jump		max_rd
    004214  0a   004206 000220 
                                  2783  
    004215                        2784  max_ic:
                                  2785  	jump		mm_dt1.p
    004215  0a   006602 000220 
                                  2786  
    004216                        2787  max_ci:
                                  2788  	jump		mm_dt2.p
    004216  0a   006605 000220 
                                  2789  
    004217                        2790  max_rc:
                                  2791  	jump		mm_dt1.p
    004217  0a   006602 000220 
                                  2792  
    004220                        2793  max_cr:
                                  2794  	jump		mm_dt2.p
    004220  0a   006605 000220 
                                  2795  
    004221                        2796  max_dc:
                                  2797  	jump		mm_dt1.p
    004221  0a   006602 000220 
                                  2798  
    004222                        2799  max_cd:
                                  2800  	jump		mm_dt2.p
    004222  0a   006605 000220 
                                  2801  
    004223                        2802  max_cc:
                                  2803  	jump		mm_dt1.p
    004223  0a   006602 000220 
                                  2804  
    004224                        2805  max_e1:
                                  2806  	jump		mm_dt2.p
    004224  0a   006605 000220 
                                  2807  
    004225                        2808  max_e2:
                                  2809  	jump		mm_dt1.p
    004225  0a   006602 000220 
                                  2810  
    004226                        2811  g.max0:
                                  2812  	load_top		q
    004226  aa   000000 000657 
                                  2813  	use_eaq
    004227  aa   000000 000255 
                                  2814  	copy		op2
    004230  aa   000000 700201 
                                  2815  	jump		g.max0.loop.1
    004231  0a   004242 000220 
                                  2816  
    004232                        2817  g.max0.loop:
                                  2818  	if_dt		int,g.max0.loop.1
    004232  0a   004242 400225 
                                  2819  	if_dt		real,g.max0.real
    004233  0a   004236 200225 
                                  2820  	if_dt		dp,g.max0.dp
    004234  0a   004240 100225 
                                  2821  
                                  2822  	jump		mm_dt1.p
    004235  0a   006602 000220 
                                  2823  
    004236                        2824  g.max0.real:
    004236  aa  0 00465 7001 00   2825  	tsx0		pr0|integer_to_real
                                  2826  	jump		g.amax1.loop.1
    004237  0a   004273 000220 
                                  2827  
    004240                        2828  g.max0.dp:
    004240  aa  0 00465 7001 00   2829  	tsx0		pr0|integer_to_double
                                  2830  	jump		g.dmax1.loop.1
    004241  0a   004327 000220 
                                  2831  
    004242                        2832  g.max0.loop.1:
    004242  aa   740000 1160 00   2833  	cmpq		op1
    004243  aa   000002 6050 04   2834  	tpl		2,ic
    004244  aa   740000 2360 00   2835  	ldq		op1
                                  2836  	pop		op1
    004245  aa   000000 740203 
                                  2837  
                                  2838  	if		arg2,=,2,g.max0.r
    004246  0a   004253 111237 
                                  2839  
                                  2840  	copy		arg2
    004247  aa   000000 100201 
                                  2841  	copy		opv
    004250  aa   000000 000201 
                                  2842  	decrement		arg2,1
    004251  aa   000001 100264 
                                  2843  	jump		g.max0.loop
    004252  0a   004232 000220 
                                  2844  
    004253                        2845  g.max0.r:
                                  2846  	jump		mm_ret_q
    004253  0a   003362 000220 
                                  2847  
    004254                        2848  g.amax1:
                                  2849  	load_top		eaq
    004254  aa   000000 002257 
                                  2850  	round		eaq
    004255  aa   000000 002354 
                                  2851  	copy		op2
    004256  aa   000000 700201 
                                  2852  	jump		g.amax1.loop.1
    004257  0a   004273 000220 
                                  2853  
    004260                        2854  g.amax1.loop:
                                  2855  	if_dt		real,g.amax1.loop.1
    004260  0a   004273 200225 
                                  2856  	if_dt		int,g.amax1.int
    004261  0a   004264 400225 
                                  2857  	if_dt		dp,g.amax1.dp
    004262  0a   004272 100225 
                                  2858  
                                  2859  	jump		mm_dt1.p
    004263  0a   006602 000220 
                                  2860  
    004264                        2861  g.amax1.int:
                                  2862  	push_temp		real
    004264  aa   000000 001204 
                                  2863  	store		eaq,op1,no_update
    004265  aa   000001 742357 
                                  2864  	swap		op2
    004266  aa   000000 700202 
                                  2865  
                                  2866  	s_call		cv_load.ir
    004267  0a   002050 000223 
                                  2867  	pop		op1
    004270  aa   000000 740203 
                                  2868  	jump		g.amax1.loop.1
    004271  0a   004273 000220 
                                  2869  
    004272                        2870  g.amax1.dp:
                                  2871  	jump		g.dmax1.loop.1
    004272  0a   004327 000220 
                                  2872  
    004273                        2873  g.amax1.loop.1:
    004273  aa   740000 5150 00   2874  	fcmp		op1
    004274  aa   000002 6050 04   2875  	tpl		2,ic
    004275  aa   740000 4310 00   2876  	fld		op1
                                  2877  	pop		op1
    004276  aa   000000 740203 
                                  2878  
                                  2879  	if		arg2,=,2,g.amax1.r
    004277  0a   004304 111237 
                                  2880  
                                  2881  	copy		arg2
    004300  aa   000000 100201 
                                  2882  	copy		opv
    004301  aa   000000 000201 
                                  2883  	decrement		arg2,1
    004302  aa   000001 100264 
                                  2884  	jump		g.amax1.loop
    004303  0a   004260 000220 
                                  2885  
    004304                        2886  g.amax1.r:
                                  2887  	jump		mm_ret_eaq
    004304  0a   003366 000220 
                                  2888  
    004305                        2889  g.dmax1:
                                  2890  	load_top		deaq
    004305  aa   000000 002657 
                                  2891  	round		deaq
    004306  aa   000000 002754 
                                  2892  	copy		op2
    004307  aa   000000 700201 
                                  2893  	jump		g.dmax1.loop.1
    004310  0a   004327 000220 
                                  2894  
    004311                        2895  g.dmax1.loop:
                                  2896  	if_dt		dp,g.dmax1.loop.1
    004311  0a   004327 100225 
                                  2897  	if_dt		int,g.dmax1.int
    004312  0a   004315 400225 
                                  2898  	if_dt		real,g.dmax1.real
    004313  0a   004323 200225 
                                  2899  
                                  2900  	jump		mm_dt1.p
    004314  0a   006602 000220 
                                  2901  
    004315                        2902  g.dmax1.int:
                                  2903  	push_temp		dp
    004315  aa   000000 001604 
                                  2904  	store		deaq,op1,no_update
    004316  aa   000001 742757 
                                  2905  	swap		op2
    004317  aa   000000 700202 
                                  2906  
                                  2907  	s_call		cv_load.id
    004320  0a   002071 000223 
                                  2908  	pop		op1
    004321  aa   000000 740203 
                                  2909  	jump		g.dmax1.loop.1
    004322  0a   004327 000220 
                                  2910  
    004323                        2911  g.dmax1.real:
    004323  aa   740000 5150 00   2912  	fcmp		op1
    004324  aa   000002 6050 04   2913  	tpl		2,ic
    004325  aa   740000 4310 00   2914  	fld		op1
                                  2915  	jump		g.dmax1.loop.2
    004326  0a   004332 000220 
                                  2916  
    004327                        2917  g.dmax1.loop.1:
    004327  aa   740000 5170 00   2918  	dfcmp		op1
    004330  aa   000002 6050 04   2919  	tpl		2,ic
    004331  aa   740000 4330 00   2920  	dfld		op1
                                  2921  
    004332                        2922  g.dmax1.loop.2:
                                  2923  	pop		op1
    004332  aa   000000 740203 
                                  2924  
                                  2925  	if		arg2,=,2,g.dmax1.r
    004333  0a   004340 111237 
                                  2926  
                                  2927  	copy		arg2
    004334  aa   000000 100201 
                                  2928  	copy		opv
    004335  aa   000000 000201 
                                  2929  	decrement		arg2,1
    004336  aa   000001 100264 
                                  2930  	jump		g.dmax1.loop
    004337  0a   004311 000220 
                                  2931  
    004340                        2932  g.dmax1.r:
                                  2933  	jump		mm_ret_deaq
    004340  0a   003372 000220 
                                  2934  
    004341                        2935  amax0:						" builtin 24
                                  2936  	unless		arg2,>,1,wrong_number.p
    004341  0a   003406 104640 
                                  2937  	swap		op2
    004342  aa   000000 700202 
                                  2938  	unless_dt		int,amax0.p
    004343  0a   004365 400226 
                                  2939  	swap		op2
    004344  aa   000000 700202 
                                  2940  	unless_dt		int,amax0.p
    004345  0a   004365 400226 
                                  2941  
                                  2942  	load_top		q
    004346  aa   000000 000657 
                                  2943  	use_eaq
    004347  aa   000000 000255 
                                  2944  	copy		op2
    004350  aa   000000 700201 
                                  2945  
    004351                        2946  amax0.loop:
    004351  aa   740000 1160 00   2947  	cmpq		op1
    004352  aa   000002 6050 04   2948  	tpl		2,ic
    004353  aa   740000 2360 00   2949  	ldq		op1
                                  2950  	pop		op1
    004354  aa   000000 740203 
                                  2951  
                                  2952  	if		arg2,=,2,amax0.r
    004355  0a   004363 111237 
                                  2953  
                                  2954  	copy		arg2
    004356  aa   000000 100201 
                                  2955  	copy		opv
    004357  aa   000000 000201 
                                  2956  	decrement		arg2,1
    004360  aa   000001 100264 
                                  2957  	unless_dt		int,amax0.p
    004361  0a   004365 400226 
                                  2958  	jump		amax0.loop
    004362  0a   004351 000220 
                                  2959  
    004363                        2960  amax0.r:
    004363  aa  0 00465 7001 00   2961  	tsx0		pr0|integer_to_real
                                  2962  	jump		mm_ret_eaq
    004364  0a   003366 000220 
                                  2963  
    004365                        2964  amax0.p:
                                  2965  	jump		mm_dt1.p
    004365  0a   006602 000220 
                                  2966  
    004366                        2967  amax1:						" builtin 25
                                  2968  	unless		arg2,>,1,wrong_number.p
    004366  0a   003406 104640 
                                  2969  	swap		op2
    004367  aa   000000 700202 
                                  2970  	unless_dt		real,amax1.p
    004370  0a   004410 200226 
                                  2971  	swap		op2
    004371  aa   000000 700202 
                                  2972  	unless_dt		real,amax1.p
    004372  0a   004410 200226 
                                  2973  
                                  2974  	load_top		eaq
    004373  aa   000000 002257 
                                  2975  	copy		op2
    004374  aa   000000 700201 
                                  2976  
    004375                        2977  amax1.loop:
    004375  aa   740000 5150 00   2978  	fcmp		op1
    004376  aa   000002 6050 04   2979  	tpl		2,ic
    004377  aa   740000 4310 00   2980  	fld		op1
                                  2981  	pop		op1
    004400  aa   000000 740203 
                                  2982  
                                  2983  	if		arg2,=,2,amax1.r
    004401  0a   004407 111237 
                                  2984  
                                  2985  	copy		arg2
    004402  aa   000000 100201 
                                  2986  	copy		opv
    004403  aa   000000 000201 
                                  2987  	decrement		arg2,1
    004404  aa   000001 100264 
                                  2988  	unless_dt		real,amax1.p
    004405  0a   004410 200226 
                                  2989  	jump		amax1.loop
    004406  0a   004375 000220 
                                  2990  
    004407                        2991  amax1.r:
                                  2992  	jump		mm_ret_eaq
    004407  0a   003366 000220 
                                  2993  
    004410                        2994  amax1.p:
                                  2995  	jump		mm_dt1.p
    004410  0a   006602 000220 
                                  2996  
    004411                        2997  max0:						" builtin 26
                                  2998  	unless		arg2,>,1,wrong_number.p
    004411  0a   003406 104640 
                                  2999  	swap		op2
    004412  aa   000000 700202 
                                  3000  	unless_dt		int,max0.p
    004413  0a   004433 400226 
                                  3001  	swap		op2
    004414  aa   000000 700202 
                                  3002  	unless_dt		int,max0.p
    004415  0a   004433 400226 
                                  3003  
                                  3004  	load_top		q
    004416  aa   000000 000657 
                                  3005  	copy		op2
    004417  aa   000000 700201 
                                  3006  
    004420                        3007  max0.loop:
    004420  aa   740000 1160 00   3008  	cmpq		op1
    004421  aa   000002 6050 04   3009  	tpl		2,ic
    004422  aa   740000 2360 00   3010  	ldq		op1
                                  3011  	pop		op1
    004423  aa   000000 740203 
                                  3012  
                                  3013  	if		arg2,=,2,max0.r
    004424  0a   004432 111237 
                                  3014  
                                  3015  	copy		arg2
    004425  aa   000000 100201 
                                  3016  	copy		opv
    004426  aa   000000 000201 
                                  3017  	decrement		arg2,1
    004427  aa   000001 100264 
                                  3018  	unless_dt		int,max0.p
    004430  0a   004433 400226 
                                  3019  	jump		max0.loop
    004431  0a   004420 000220 
                                  3020  
    004432                        3021  max0.r:
                                  3022  	jump		mm_ret_q
    004432  0a   003362 000220 
                                  3023  
    004433                        3024  max0.p:
                                  3025  	jump		mm_dt1.p
    004433  0a   006602 000220 
                                  3026  
    004434                        3027  max1:						" builtin 27
                                  3028  	unless		arg2,>,1,wrong_number.p
    004434  0a   003406 104640 
                                  3029  	swap		op2
    004435  aa   000000 700202 
                                  3030  	unless_dt		real,max1.p
    004436  0a   004461 200226 
                                  3031  	swap		op2
    004437  aa   000000 700202 
                                  3032  	unless_dt		real,max1.p
    004440  0a   004461 200226 
                                  3033  
                                  3034  	load_top		eaq
    004441  aa   000000 002257 
                                  3035  	round		eaq
    004442  aa   000000 002354 
                                  3036  	use_eaq
    004443  aa   000000 000255 
                                  3037  	copy		op2
    004444  aa   000000 700201 
                                  3038  
    004445                        3039  max1.loop:
    004445  aa   740000 5150 00   3040  	fcmp		op1
    004446  aa   000002 6050 04   3041  	tpl		2,ic
    004447  aa   740000 4310 00   3042  	fld		op1
                                  3043  	pop		op1
    004450  aa   000000 740203 
                                  3044  
                                  3045  	if		arg2,=,2,max1.r
    004451  0a   004457 111237 
                                  3046  
                                  3047  	copy		arg2
    004452  aa   000000 100201 
                                  3048  	copy		opv
    004453  aa   000000 000201 
                                  3049  	decrement		arg2,1
    004454  aa   000001 100264 
                                  3050  	unless_dt		real,max1.p
    004455  0a   004461 200226 
                                  3051  	jump		max1.loop
    004456  0a   004445 000220 
                                  3052  
    004457                        3053  max1.r:
    004457  aa  0 00654 7001 00   3054  	tsx0		pr0|real_to_integer
                                  3055  	jump		mm_ret_q
    004460  0a   003362 000220 
                                  3056  
    004461                        3057  max1.p:
                                  3058  	jump		mm_dt1.p
    004461  0a   006602 000220 
                                  3059  
    004462                        3060  dmax1:						" builtin 28
                                  3061  	unless		arg2,>,1,wrong_number.p
    004462  0a   003406 104640 
                                  3062  	swap		op2
    004463  aa   000000 700202 
                                  3063  	unless_dt		dp,dmax1.p
    004464  0a   004505 100226 
                                  3064  	swap		op2
    004465  aa   000000 700202 
                                  3065  	unless_dt		dp,dmax1.p
    004466  0a   004505 100226 
                                  3066  
                                  3067  	load_top		deaq
    004467  aa   000000 002657 
                                  3068  	round		deaq
    004470  aa   000000 002754 
                                  3069  	copy		op2
    004471  aa   000000 700201 
                                  3070  
    004472                        3071  dmax1.loop:
    004472  aa   740000 5170 00   3072  	dfcmp		op1
    004473  aa   000002 6050 04   3073  	tpl		2,ic
    004474  aa   740000 4330 00   3074  	dfld		op1
                                  3075  	pop		op1
    004475  aa   000000 740203 
                                  3076  
                                  3077  	if		arg2,=,2,dmax1.r
    004476  0a   004504 111237 
                                  3078  
                                  3079  	copy		arg2
    004477  aa   000000 100201 
                                  3080  	copy		opv
    004500  aa   000000 000201 
                                  3081  	decrement		arg2,1
    004501  aa   000001 100264 
                                  3082  	unless_dt		dp,dmax1.p
    004502  0a   004505 100226 
                                  3083  	jump		dmax1.loop
    004503  0a   004472 000220 
                                  3084  
    004504                        3085  dmax1.r:
                                  3086  	jump		mm_ret_deaq
    004504  0a   003372 000220 
                                  3087  
    004505                        3088  dmax1.p:
                                  3089  	jump		mm_dt1.p
    004505  0a   006602 000220 
                                  3090  
    004506                        3091  min:						" builtin 29
                                  3092  	unless		arg2,>,1,wrong_number.p
    004506  0a   003406 104640 
                                  3093  	dt_jump		(min_ii,min_ri,min_di,min_ci,min_ir,min_rr,min_dr,min_cr,min_id,min_rd,min_dd,min_cd,min_ic,min_rc,min_dc,min_cc,min_e2,min_e1,min_e2,min_e1)
    004507  aa   000024 000235 
    004510  00   004522 004525 
    004511  00   004531 004545 
    004512  00   004523 004533 
    004513  00   004542 004547 
    004514  00   004527 004535 
    004515  00   004534 004551 
    004516  00   004544 004546 
    004517  00   004550 004552 
    004520  00   004554 004553 
    004521  00   004554 004553 
                        000024 
                                  3094  
    004522                        3095  min_ii:
                                  3096  	jump		g.min0
    004522  0a   004555 000220 
                                  3097  
    004523                        3098  min_ir:
                                  3099  	s_call		builtin_2args_ir
    004523  0a   005257 000223 
                                  3100  	jump		g.amin1
    004524  0a   004603 000220 
                                  3101  
    004525                        3102  min_ri:
                                  3103  	s_call		builtin_2args_ri
    004525  0a   005275 000223 
                                  3104  	jump		g.amin1
    004526  0a   004603 000220 
                                  3105  
    004527                        3106  min_id:
                                  3107  	s_call		builtin_2args_id
    004527  0a   005310 000223 
                                  3108  	jump		g.dmin1
    004530  0a   004634 000220 
                                  3109  
    004531                        3110  min_di:
                                  3111  	s_call		builtin_2args_di
    004531  0a   005326 000223 
                                  3112  	jump		g.dmin1
    004532  0a   004634 000220 
                                  3113  
    004533                        3114  min_rr:
                                  3115  	jump		g.amin1
    004533  0a   004603 000220 
                                  3116  
    004534                        3117  min_dd:
                                  3118  	jump		g.dmin1
    004534  0a   004634 000220 
                                  3119  
    004535                        3120  min_rd:
                                  3121  	swap		op2
    004535  aa   000000 700202 
                                  3122  	load		eaq,op1
    004536  aa   000000 742256 
                                  3123  	round		eaq
    004537  aa   000000 002354 
                                  3124  	copy		op2
    004540  aa   000000 700201 
                                  3125  	jump		g.dmin1.loop.1
    004541  0a   004656 000220 
                                  3126  
    004542                        3127  min_dr:
                                  3128  	swap		op2
    004542  aa   000000 700202 
                                  3129  	jump		min_rd
    004543  0a   004535 000220 
                                  3130  
    004544                        3131  min_ic:
                                  3132  	jump		mm_dt1.p
    004544  0a   006602 000220 
                                  3133  
    004545                        3134  min_ci:
                                  3135  	jump		mm_dt2.p
    004545  0a   006605 000220 
                                  3136  
    004546                        3137  min_rc:
                                  3138  	jump		mm_dt1.p
    004546  0a   006602 000220 
                                  3139  
    004547                        3140  min_cr:
                                  3141  	jump		mm_dt2.p
    004547  0a   006605 000220 
                                  3142  
    004550                        3143  min_dc:
                                  3144  	jump		mm_dt1.p
    004550  0a   006602 000220 
                                  3145  
    004551                        3146  min_cd:
                                  3147  	jump		mm_dt2.p
    004551  0a   006605 000220 
                                  3148  
    004552                        3149  min_cc:
                                  3150  	jump		mm_dt1.p
    004552  0a   006602 000220 
                                  3151  
    004553                        3152  min_e1:
                                  3153  	jump		mm_dt2.p
    004553  0a   006605 000220 
                                  3154  
    004554                        3155  min_e2:
                                  3156  	jump		mm_dt1.p
    004554  0a   006602 000220 
                                  3157  
    004555                        3158  g.min0:
                                  3159  	load_top		q
    004555  aa   000000 000657 
                                  3160  	use_eaq
    004556  aa   000000 000255 
                                  3161  	copy		op2
    004557  aa   000000 700201 
                                  3162  	jump		g.min0.loop.1
    004560  0a   004571 000220 
                                  3163  
    004561                        3164  g.min0.loop:
                                  3165  	if_dt		int,g.min0.loop.1
    004561  0a   004571 400225 
                                  3166  	if_dt		real,g.min0.real
    004562  0a   004565 200225 
                                  3167  	if_dt		dp,g.min0.dp
    004563  0a   004567 100225 
                                  3168  
                                  3169  	jump		mm_dt1.p
    004564  0a   006602 000220 
                                  3170  
    004565                        3171  g.min0.real:
    004565  aa  0 00465 7001 00   3172  	tsx0		pr0|integer_to_real
                                  3173  	jump		g.amin1.loop.1
    004566  0a   004622 000220 
                                  3174  
    004567                        3175  g.min0.dp:
    004567  aa  0 00465 7001 00   3176  	tsx0		pr0|integer_to_double
                                  3177  	jump		g.dmin1.loop.1
    004570  0a   004656 000220 
                                  3178  
    004571                        3179  g.min0.loop.1:
    004571  aa   740000 1160 00   3180  	cmpq		op1
    004572  aa   000002 6044 04   3181  	tmoz		2,ic
    004573  aa   740000 2360 00   3182  	ldq		op1
                                  3183  	pop		op1
    004574  aa   000000 740203 
                                  3184  
                                  3185  	if		arg2,=,2,g.min0.r
    004575  0a   004602 111237 
                                  3186  
                                  3187  	copy		arg2
    004576  aa   000000 100201 
                                  3188  	copy		opv
    004577  aa   000000 000201 
                                  3189  	decrement		arg2,1
    004600  aa   000001 100264 
                                  3190  	jump		g.min0.loop
    004601  0a   004561 000220 
                                  3191  
    004602                        3192  g.min0.r:
                                  3193  	jump		mm_ret_q
    004602  0a   003362 000220 
                                  3194  
    004603                        3195  g.amin1:
                                  3196  	load_top		eaq
    004603  aa   000000 002257 
                                  3197  	round		eaq
    004604  aa   000000 002354 
                                  3198  	copy		op2
    004605  aa   000000 700201 
                                  3199  	jump		g.amin1.loop.1
    004606  0a   004622 000220 
                                  3200  
    004607                        3201  g.amin1.loop:
                                  3202  	if_dt		real,g.amin1.loop.1
    004607  0a   004622 200225 
                                  3203  	if_dt		int,g.amin1.int
    004610  0a   004613 400225 
                                  3204  	if_dt		dp,g.amin1.dp
    004611  0a   004621 100225 
                                  3205  
                                  3206  	jump		mm_dt1.p
    004612  0a   006602 000220 
                                  3207  
    004613                        3208  g.amin1.int:
                                  3209  	push_temp		real
    004613  aa   000000 001204 
                                  3210  	store		eaq,op1,no_update
    004614  aa   000001 742357 
                                  3211  	swap		op2
    004615  aa   000000 700202 
                                  3212  
                                  3213  	s_call		cv_load.ir
    004616  0a   002050 000223 
                                  3214  	pop		op1
    004617  aa   000000 740203 
                                  3215  	jump		g.amin1.loop.1
    004620  0a   004622 000220 
                                  3216  
    004621                        3217  g.amin1.dp:
                                  3218  	jump		g.dmin1.loop.1
    004621  0a   004656 000220 
                                  3219  
    004622                        3220  g.amin1.loop.1:
    004622  aa   740000 5150 00   3221  	fcmp		op1
    004623  aa   000002 6044 04   3222  	tmoz		2,ic
    004624  aa   740000 4310 00   3223  	fld		op1
                                  3224  	pop		op1
    004625  aa   000000 740203 
                                  3225  
                                  3226  	if		arg2,=,2,g.amin1.r
    004626  0a   004633 111237 
                                  3227  
                                  3228  	copy		arg2
    004627  aa   000000 100201 
                                  3229  	copy		opv
    004630  aa   000000 000201 
                                  3230  	decrement		arg2,1
    004631  aa   000001 100264 
                                  3231  	jump		g.amin1.loop
    004632  0a   004607 000220 
                                  3232  
    004633                        3233  g.amin1.r:
                                  3234  	jump		mm_ret_eaq
    004633  0a   003366 000220 
                                  3235  
    004634                        3236  g.dmin1:
                                  3237  	load_top		deaq
    004634  aa   000000 002657 
                                  3238  	round		deaq
    004635  aa   000000 002754 
                                  3239  	copy		op2
    004636  aa   000000 700201 
                                  3240  	jump		g.dmin1.loop.1
    004637  0a   004656 000220 
                                  3241  
    004640                        3242  g.dmin1.loop:
                                  3243  	if_dt		dp,g.dmin1.loop.1
    004640  0a   004656 100225 
                                  3244  	if_dt		int,g.dmin1.int
    004641  0a   004644 400225 
                                  3245  	if_dt		real,g.dmin1.real
    004642  0a   004652 200225 
                                  3246  
                                  3247  	jump		mm_dt1.p
    004643  0a   006602 000220 
                                  3248  
    004644                        3249  g.dmin1.int:
                                  3250  	push_temp		dp
    004644  aa   000000 001604 
                                  3251  	store		deaq,op1,no_update
    004645  aa   000001 742757 
                                  3252  	swap		op2
    004646  aa   000000 700202 
                                  3253  
                                  3254  	s_call		cv_load.id
    004647  0a   002071 000223 
                                  3255  	pop		op1
    004650  aa   000000 740203 
                                  3256  	jump		g.dmin1.loop.1
    004651  0a   004656 000220 
                                  3257  
    004652                        3258  g.dmin1.real:
    004652  aa   740000 5150 00   3259  	fcmp		op1
    004653  aa   000002 6044 04   3260  	tmoz		2,ic
    004654  aa   740000 4310 00   3261  	fld		op1
                                  3262  	jump		g.dmin1.loop.2
    004655  0a   004661 000220 
                                  3263  
    004656                        3264  g.dmin1.loop.1:
    004656  aa   740000 5170 00   3265  	dfcmp		op1
    004657  aa   000002 6044 04   3266  	tmoz		2,ic
    004660  aa   740000 4330 00   3267  	dfld		op1
                                  3268  
    004661                        3269  g.dmin1.loop.2:
                                  3270  	pop		op1
    004661  aa   000000 740203 
                                  3271  
                                  3272  	if		arg2,=,2,g.dmin1.r
    004662  0a   004667 111237 
                                  3273  
                                  3274  	copy		arg2
    004663  aa   000000 100201 
                                  3275  	copy		opv
    004664  aa   000000 000201 
                                  3276  	decrement		arg2,1
    004665  aa   000001 100264 
                                  3277  	jump		g.dmin1.loop
    004666  0a   004640 000220 
                                  3278  
    004667                        3279  g.dmin1.r:
                                  3280  	jump		mm_ret_deaq
    004667  0a   003372 000220 
                                  3281  
    004670                        3282  amin0:						" builtin 30
                                  3283  	unless		arg2,>,1,wrong_number.p
    004670  0a   003406 104640 
                                  3284  	swap		op2
    004671  aa   000000 700202 
                                  3285  	unless_dt		int,amin0.p
    004672  0a   004714 400226 
                                  3286  	swap		op2
    004673  aa   000000 700202 
                                  3287  	unless_dt		int,amin0.p
    004674  0a   004714 400226 
                                  3288  
                                  3289  	load_top		q
    004675  aa   000000 000657 
                                  3290  	use_eaq
    004676  aa   000000 000255 
                                  3291  	copy		op2
    004677  aa   000000 700201 
                                  3292  
    004700                        3293  amin0.loop:
    004700  aa   740000 1160 00   3294  	cmpq		op1
    004701  aa   000002 6044 04   3295  	tmoz		2,ic
    004702  aa   740000 2360 00   3296  	ldq		op1
                                  3297  	pop		op1
    004703  aa   000000 740203 
                                  3298  
                                  3299  	if		arg2,=,2,amin0.r
    004704  0a   004712 111237 
                                  3300  
                                  3301  	copy		arg2
    004705  aa   000000 100201 
                                  3302  	copy		opv
    004706  aa   000000 000201 
                                  3303  	decrement		arg2,1
    004707  aa   000001 100264 
                                  3304  	unless_dt		int,amin0.p
    004710  0a   004714 400226 
                                  3305  	jump		amin0.loop
    004711  0a   004700 000220 
                                  3306  
    004712                        3307  amin0.r:
    004712  aa  0 00465 7001 00   3308  	tsx0		pr0|integer_to_real
                                  3309  	jump		mm_ret_eaq
    004713  0a   003366 000220 
                                  3310  
    004714                        3311  amin0.p:
                                  3312  	jump		mm_dt1.p
    004714  0a   006602 000220 
                                  3313  
    004715                        3314  amin1:						" builtin 31
                                  3315  	unless		arg2,>,1,wrong_number.p
    004715  0a   003406 104640 
                                  3316  	swap		op2
    004716  aa   000000 700202 
                                  3317  	unless_dt		real,amin1.p
    004717  0a   004740 200226 
                                  3318  	swap		op2
    004720  aa   000000 700202 
                                  3319  	unless_dt		real,amin1.p
    004721  0a   004740 200226 
                                  3320  
                                  3321  	load_top		eaq
    004722  aa   000000 002257 
                                  3322  	round		eaq
    004723  aa   000000 002354 
                                  3323  	copy		op2
    004724  aa   000000 700201 
                                  3324  
    004725                        3325  amin1.loop:
    004725  aa   740000 5150 00   3326  	fcmp		op1
    004726  aa   000002 6044 04   3327  	tmoz		2,ic
    004727  aa   740000 4310 00   3328  	fld		op1
                                  3329  	pop		op1
    004730  aa   000000 740203 
                                  3330  
                                  3331  	if		arg2,=,2,amin1.r
    004731  0a   004737 111237 
                                  3332  
                                  3333  	copy		arg2
    004732  aa   000000 100201 
                                  3334  	copy		opv
    004733  aa   000000 000201 
                                  3335  	decrement		arg2,1
    004734  aa   000001 100264 
                                  3336  	unless_dt		real,amin1.p
    004735  0a   004740 200226 
                                  3337  	jump		amin1.loop
    004736  0a   004725 000220 
                                  3338  
    004737                        3339  amin1.r:
                                  3340  	jump		mm_ret_eaq
    004737  0a   003366 000220 
                                  3341  
    004740                        3342  amin1.p:
                                  3343  	jump		mm_dt1.p
    004740  0a   006602 000220 
                                  3344  
    004741                        3345  min0:						" builtin 32
                                  3346  	unless		arg2,>,1,wrong_number.p
    004741  0a   003406 104640 
                                  3347  	swap		op2
    004742  aa   000000 700202 
                                  3348  	unless_dt		int,min0.p
    004743  0a   004763 400226 
                                  3349  	swap		op2
    004744  aa   000000 700202 
                                  3350  	unless_dt		int,min0.p
    004745  0a   004763 400226 
                                  3351  
                                  3352  	load_top		q
    004746  aa   000000 000657 
                                  3353  	copy		op2
    004747  aa   000000 700201 
                                  3354  
    004750                        3355  min0.loop:
    004750  aa   740000 1160 00   3356  	cmpq		op1
    004751  aa   000002 6044 04   3357  	tmoz		2,ic
    004752  aa   740000 2360 00   3358  	ldq		op1
                                  3359  	pop		op1
    004753  aa   000000 740203 
                                  3360  
                                  3361  	if		arg2,=,2,min0.r
    004754  0a   004762 111237 
                                  3362  
                                  3363  	copy		arg2
    004755  aa   000000 100201 
                                  3364  	copy		opv
    004756  aa   000000 000201 
                                  3365  	decrement		arg2,1
    004757  aa   000001 100264 
                                  3366  	unless_dt		int,min0.p
    004760  0a   004763 400226 
                                  3367  	jump		min0.loop
    004761  0a   004750 000220 
                                  3368  
    004762                        3369  min0.r:
                                  3370  	jump		mm_ret_q
    004762  0a   003362 000220 
                                  3371  
    004763                        3372  min0.p:
                                  3373  	jump		mm_dt1.p
    004763  0a   006602 000220 
                                  3374  
    004764                        3375  min1:						" builtin 33
                                  3376  	unless		arg2,>,1,wrong_number.p
    004764  0a   003406 104640 
                                  3377  	swap		op2
    004765  aa   000000 700202 
                                  3378  	unless_dt		real,min1.p
    004766  0a   005011 200226 
                                  3379  	swap		op2
    004767  aa   000000 700202 
                                  3380  	unless_dt		real,min1.p
    004770  0a   005011 200226 
                                  3381  
                                  3382  	load_top		eaq
    004771  aa   000000 002257 
                                  3383  	round		eaq
    004772  aa   000000 002354 
                                  3384  	use_eaq
    004773  aa   000000 000255 
                                  3385  	copy		op2
    004774  aa   000000 700201 
                                  3386  
    004775                        3387  min1.loop:
    004775  aa   740000 5150 00   3388  	fcmp		op1
    004776  aa   000002 6044 04   3389  	tmoz		2,ic
    004777  aa   740000 4310 00   3390  	fld		op1
                                  3391  	pop		op1
    005000  aa   000000 740203 
                                  3392  
                                  3393  	if		arg2,=,2,min1.r
    005001  0a   005007 111237 
                                  3394  
                                  3395  	copy		arg2
    005002  aa   000000 100201 
                                  3396  	copy		opv
    005003  aa   000000 000201 
                                  3397  	decrement		arg2,1
    005004  aa   000001 100264 
                                  3398  	unless_dt		real,min1.p
    005005  0a   005011 200226 
                                  3399  	jump		min1.loop
    005006  0a   004775 000220 
                                  3400  
    005007                        3401  min1.r:
    005007  aa  0 00654 7001 00   3402  	tsx0		pr0|real_to_integer
                                  3403  	jump		mm_ret_q
    005010  0a   003362 000220 
                                  3404  
    005011                        3405  min1.p:
                                  3406  	jump		mm_dt1.p
    005011  0a   006602 000220 
                                  3407  
    005012                        3408  dmin1:						" builtin 34
                                  3409  	unless		arg2,>,1,wrong_number.p
    005012  0a   003406 104640 
                                  3410  	swap		op2
    005013  aa   000000 700202 
                                  3411  	unless_dt		dp,dmin1.p
    005014  0a   005035 100226 
                                  3412  	swap		op2
    005015  aa   000000 700202 
                                  3413  	unless_dt		dp,dmin1.p
    005016  0a   005035 100226 
                                  3414  
                                  3415  	load_top		deaq
    005017  aa   000000 002657 
                                  3416  	round		deaq
    005020  aa   000000 002754 
                                  3417  	copy		op2
    005021  aa   000000 700201 
                                  3418  
    005022                        3419  dmin1.loop:
    005022  aa   740000 5170 00   3420  	dfcmp		op1
    005023  aa   000002 6044 04   3421  	tmoz		2,ic
    005024  aa   740000 4330 00   3422  	dfld		op1
                                  3423  	pop		op1
    005025  aa   000000 740203 
                                  3424  
                                  3425  	if		arg2,=,2,dmin1.r
    005026  0a   005034 111237 
                                  3426  
                                  3427  	copy		arg2
    005027  aa   000000 100201 
                                  3428  	copy		opv
    005030  aa   000000 000201 
                                  3429  	decrement		arg2,1
    005031  aa   000001 100264 
                                  3430  	unless_dt		dp,dmin1.p
    005032  0a   005035 100226 
                                  3431  	jump		dmin1.loop
    005033  0a   005022 000220 
                                  3432  
    005034                        3433  dmin1.r:
                                  3434  	jump		mm_ret_deaq
    005034  0a   003372 000220 
                                  3435  
    005035                        3436  dmin1.p:
                                  3437  	jump		mm_dt1.p
    005035  0a   006602 000220 
                                  3438  
    005036                        3439  mod:						" builtin 35
                                  3440  	dt_jump		(mod_ii,mod_ri,mod_di,mod_ci,mod_ir,mod_rr,mod_dr,mod_cr,mod_id,mod_rd,mod_dd,mod_cd,mod_ic,mod_rc,mod_dc,mod_cc,mod_e2,mod_e1,mod_e2,mod_e1)
    005036  aa   000024 000235 
    005037  00   005051 005054 
    005040  00   005060 005067 
    005041  00   005052 005062 
    005042  00   005065 005071 
    005043  00   005056 005064 
    005044  00   005063 005073 
    005045  00   005066 005070 
    005046  00   005072 005074 
    005047  00   005076 005075 
    005050  00   005076 005075 
                        000024 
                                  3441  
    005051                        3442  mod_ii:
                                  3443  	jump		mod.1
    005051  0a   005077 000220 
                                  3444  
    005052                        3445  mod_ir:
                                  3446  	s_call		builtin_2args_ir
    005052  0a   005257 000223 
                                  3447  	jump		amod.1
    005053  0a   005111 000220 
                                  3448  
    005054                        3449  mod_ri:
                                  3450  	s_call		builtin_2args_ri
    005054  0a   005275 000223 
                                  3451  	jump		amod.1
    005055  0a   005111 000220 
                                  3452  
    005056                        3453  mod_id:
                                  3454  	s_call		builtin_2args_id
    005056  0a   005310 000223 
                                  3455  	jump		dmod.1
    005057  0a   005122 000220 
                                  3456  
    005060                        3457  mod_di:
                                  3458  	s_call		builtin_2args_di
    005060  0a   005326 000223 
                                  3459  	jump		dmod.1
    005061  0a   005122 000220 
                                  3460  
    005062                        3461  mod_rr:
                                  3462  	jump		amod.1
    005062  0a   005111 000220 
                                  3463  
    005063                        3464  mod_dd:
                                  3465  	jump		dmod.1
    005063  0a   005122 000220 
                                  3466  
    005064                        3467  mod_rd:
                                  3468  	jump		rdmod.1
    005064  0a   005130 000220 
                                  3469  
    005065                        3470  mod_dr:
                                  3471  	jump		dmod.1
    005065  0a   005122 000220 
                                  3472  
    005066                        3473  mod_ic:
                                  3474  	jump		bu_dt6.p
    005066  0a   006576 000220 
                                  3475  
    005067                        3476  mod_ci:
                                  3477  	jump		bu_dt5.p
    005067  0a   006572 000220 
                                  3478  
    005070                        3479  mod_rc:
                                  3480  	jump		bu_dt6.p
    005070  0a   006576 000220 
                                  3481  
    005071                        3482  mod_cr:
                                  3483  	jump		bu_dt5.p
    005071  0a   006572 000220 
                                  3484  
    005072                        3485  mod_dc:
                                  3486  	jump		bu_dt6.p
    005072  0a   006576 000220 
                                  3487  
    005073                        3488  mod_cd:
                                  3489  	jump		bu_dt5.p
    005073  0a   006572 000220 
                                  3490  
    005074                        3491  mod_cc:
                                  3492  	jump		bu_dt5.p
    005074  0a   006572 000220 
                                  3493  
    005075                        3494  mod_e1:
                                  3495  	jump		bu_dt5.p
    005075  0a   006572 000220 
                                  3496  
    005076                        3497  mod_e2:
                                  3498  	jump		bu_dt6.p
    005076  0a   006576 000220 
                                  3499  
    005077                        3500  mod.1:
                                  3501  	load		q,arg5
    005077  aa   000000 240656 
                                  3502  	use_eaq
    005100  aa   000000 000255 
    005101  aa   300000 5060 00   3503  	div		arg6
                                  3504  	emit		1
    005102  aa   000001 000242 
    005103  aa   000044 7330 00   3505  	lrs		36
                                  3506  	jump		bu_ret_q
    005104  0a   003322 000220 
                                  3507  
    005105                        3508  amod:						" builtin 36
                                  3509  	swap		arg5
    005105  aa   000000 240202 
                                  3510  	unless_dt		real,amod.p
    005106  0a   005132 200226 
                                  3511  	swap		arg5
    005107  aa   000000 240202 
                                  3512  	unless_dt		real,amod.p
    005110  0a   005132 200226 
                                  3513  
    005111                        3514  amod.1:
                                  3515  	load		eaq,arg5
    005111  aa   000000 242256 
                                  3516  	load_pr		pr2,arg6
    005112  aa   000003 300251 
    005113  aa  0 00767 7001 00   3517  	tsx0		pr0|fort_modfl
                                  3518  	free_regs
    005114  aa   000004 000206 
                                  3519  	jump		bu_ret_eaq
    005115  0a   003326 000220 
                                  3520  
    005116                        3521  dmod:						" builtin 37
                                  3522  	swap		arg5
    005116  aa   000000 240202 
                                  3523  	unless_dt		dp,dmod.p
    005117  0a   005132 100226 
                                  3524  	swap		arg5
    005120  aa   000000 240202 
                                  3525  	unless_dt		dp,dmod.p
    005121  0a   005132 100226 
                                  3526  
    005122                        3527  dmod.1:
                                  3528  	load		deaq,arg5
    005122  aa   000000 242656 
    005123                        3529  dmod.2:
                                  3530  	use_eaq
    005123  aa   000000 000255 
                                  3531  	load_pr		pr2,arg6
    005124  aa   000003 300251 
    005125  aa  0 01450 7001 00   3532  	tsx0		pr0|fort_dmod
                                  3533  	free_regs
    005126  aa   000004 000206 
                                  3534  	jump		bu_ret_deaq
    005127  0a   003332 000220 
                                  3535  
    005130                        3536  rdmod.1:
                                  3537  	load		eaq,arg5
    005130  aa   000000 242256 
                                  3538  	jump		dmod.2
    005131  0a   005123 000220 
                                  3539  
    005132                        3540  amod.p:
    005132                        3541  dmod.p:
                                  3542  	jump		bu_dt6.p
    005132  0a   006576 000220 
                                  3543  
    005133                        3544  sign:						" builtin 38
                                  3545  	dt_jump		(sign_ii,sign_ri,sign_di,sign_ci,sign_ir,sign_rr,sign_dr,sign_cr,sign_id,sign_rd,sign_dd,sign_cd,sign_ic,sign_rc,sign_dc,sign_cc,sign_e2,sign_e1,sign_e2,sign_e1)
    005133  aa   000024 000235 
    005134  00   005152 005161 
    005135  00   005165 005174 
    005136  00   005157 005167 
    005137  00   005172 005176 
    005140  00   005163 005171 
    005141  00   005170 005200 
    005142  00   005173 005175 
    005143  00   005177 005201 
    005144  00   005203 005202 
    005145  00   005203 005202 
                        000024 
                                  3546  
    005146                        3547  isign:						" builtin 39
                                  3548  	swap		arg5
    005146  aa   000000 240202 
                                  3549  	unless_dt		int,isign.p
    005147  0a   005225 400226 
                                  3550  	swap		arg5
    005150  aa   000000 240202 
                                  3551  	unless_dt		int,isign.p
    005151  0a   005225 400226 
                                  3552  
    005152                        3553  sign_ii:
                                  3554  	load_pr		pr2,arg6
    005152  aa   000003 300251 
                                  3555  	load_for_test	q,arg5
    005153  aa   000000 240761 
    005154  aa  0 00666 7001 00   3556  	tsx0		pr0|sign_fx
                                  3557  	free_regs
    005155  aa   000004 000206 
                                  3558  	jump		bu_ret_q
    005156  0a   003322 000220 
                                  3559  
    005157                        3560  sign_ir:
                                  3561  	s_call		builtin_2args_ir
    005157  0a   005257 000223 
                                  3562  	jump		sign.1
    005160  0a   005204 000220 
                                  3563  
    005161                        3564  sign_ri:
                                  3565  	s_call		builtin_2args_ri
    005161  0a   005275 000223 
                                  3566  	jump		sign.1
    005162  0a   005204 000220 
                                  3567  
    005163                        3568  sign_id:
                                  3569  	s_call		builtin_2args_id
    005163  0a   005310 000223 
                                  3570  	jump		dsign.1
    005164  0a   005215 000220 
                                  3571  
    005165                        3572  sign_di:
                                  3573  	s_call		builtin_2args_di
    005165  0a   005326 000223 
                                  3574  	jump		dsign.1
    005166  0a   005215 000220 
                                  3575  
    005167                        3576  sign_rr:
                                  3577  	jump		sign.1
    005167  0a   005204 000220 
                                  3578  
    005170                        3579  sign_dd:
                                  3580  	jump		dsign.1
    005170  0a   005215 000220 
                                  3581  
    005171                        3582  sign_rd:
                                  3583  	jump		rdsign.1
    005171  0a   005222 000220 
                                  3584  
    005172                        3585  sign_dr:
                                  3586  	jump		dsign.1
    005172  0a   005215 000220 
                                  3587  
    005173                        3588  sign_ic:
                                  3589  	jump		bu_dt6.p
    005173  0a   006576 000220 
                                  3590  
    005174                        3591  sign_ci:
                                  3592  	jump		bu_dt5.p
    005174  0a   006572 000220 
                                  3593  
    005175                        3594  sign_rc:
                                  3595  	jump		bu_dt6.p
    005175  0a   006576 000220 
                                  3596  
    005176                        3597  sign_cr:
                                  3598  	jump		bu_dt5.p
    005176  0a   006572 000220 
                                  3599  
    005177                        3600  sign_dc:
                                  3601  	jump		bu_dt6.p
    005177  0a   006576 000220 
                                  3602  
    005200                        3603  sign_cd:
                                  3604  	jump		bu_dt5.p
    005200  0a   006572 000220 
                                  3605  
    005201                        3606  sign_cc:
                                  3607  	jump		bu_dt5.p
    005201  0a   006572 000220 
                                  3608  
    005202                        3609  sign_e1:
                                  3610  	jump		bu_dt5.p
    005202  0a   006572 000220 
                                  3611  
    005203                        3612  sign_e2:
                                  3613  	jump		bu_dt6.p
    005203  0a   006576 000220 
                                  3614  
    005204                        3615  sign.1:
                                  3616  	load_pr		pr2,arg6
    005204  aa   000003 300251 
                                  3617  	load_for_test	eaq,arg5
    005205  aa   000000 242361 
    005206  aa  0 00667 7001 00   3618  	tsx0		pr0|sign_fl
                                  3619  	free_regs
    005207  aa   000004 000206 
                                  3620  	jump		bu_ret_eaq
    005210  0a   003326 000220 
                                  3621  
    005211                        3622  dsign:						" builtin 40
                                  3623  	swap		arg5
    005211  aa   000000 240202 
                                  3624  	unless_dt		dp,dsign.p
    005212  0a   005225 100226 
                                  3625  	swap		arg5
    005213  aa   000000 240202 
                                  3626  	unless_dt		dp,dsign.p
    005214  0a   005225 100226 
                                  3627  
    005215                        3628  dsign.1:
                                  3629  	load_pr		pr2,arg6
    005215  aa   000003 300251 
                                  3630  	load_for_test	deaq,arg5
    005216  aa   000000 242761 
    005217                        3631  dsign.2:
    005217  aa  0 00667 7001 00   3632  	tsx0		pr0|sign_fl
                                  3633  	free_regs
    005220  aa   000004 000206 
                                  3634  	jump		bu_ret_deaq
    005221  0a   003332 000220 
                                  3635  
    005222                        3636  rdsign.1:
                                  3637  	load_pr		pr2,arg6
    005222  aa   000003 300251 
                                  3638  	load_for_test	eaq,arg5
    005223  aa   000000 242361 
                                  3639  	jump		dsign.2
    005224  0a   005217 000220 
                                  3640  
    005225                        3641  isign.p:
    005225                        3642  dsign.p:
                                  3643  	jump		bu_dt6.p
    005225  0a   006576 000220 
                                  3644  
    005226                        3645  builtin_2args_ii:
                                  3646  	swap		op2
    005226  aa   000000 700202 
                                  3647  
                                  3648  	if_optype		constant,conv_bu_ii.1
    005227  0a   005241 200227 
                                  3649  
                                  3650  	push_temp		real
    005230  aa   000000 001204 
                                  3651  
                                  3652  	load		q,op2
    005231  aa   000000 700656 
                                  3653  	use_eaq
    005232  aa   000000 000255 
    005233  aa  0 00465 7001 00   3654  	tsx0		pr0|integer_to_real
                                  3655  	in_reg		eaq,op1
    005234  aa   000000 742260 
                                  3656  	swap		op2
    005235  aa   000000 700202 
                                  3657  	pop		op1
    005236  aa   000000 740203 
                                  3658  	swap		op2
    005237  aa   000000 700202 
                                  3659  	jump		builtin_2args_ii.1
    005240  0a   005244 000220 
                                  3660  
    005241                        3661  conv_bu_ii.1:
                                  3662  	convert_constant	real
    005241  aa   000000 001211 
                                  3663  
                                  3664  	swap		op2
    005242  aa   000000 700202 
                                  3665  	jump		builtin_2args_ii.1
    005243  0a   005244 000220 
                                  3666  
    005244                        3667  builtin_2args_ii.1:
                                  3668  	if_optype		constant,conv_bu_ii.2
    005244  0a   005255 200227 
                                  3669  
                                  3670  	push_temp		real
    005245  aa   000000 001204 
                                  3671  
                                  3672  	load		q,op2
    005246  aa   000000 700656 
                                  3673  	use_eaq
    005247  aa   000000 000255 
    005250  aa  0 00465 7001 00   3674  	tsx0		pr0|integer_to_real
                                  3675  	in_reg		eaq,op1
    005251  aa   000000 742260 
                                  3676  	swap		op2
    005252  aa   000000 700202 
                                  3677  	pop		op1
    005253  aa   000000 740203 
                                  3678  	s_return
    005254  aa   000003 000206 
                                  3679  
    005255                        3680  conv_bu_ii.2:
                                  3681  	convert_constant	real
    005255  aa   000000 001211 
                                  3682  
                                  3683  	s_return
    005256  aa   000003 000206 
                                  3684  
    005257                        3685  builtin_2args_ir:
                                  3686  	swap		op2
    005257  aa   000000 700202 
                                  3687  
                                  3688  	if_optype		constant,conv_bu_ir
    005260  0a   005272 200227 
                                  3689  
                                  3690  	push_temp		real
    005261  aa   000000 001204 
                                  3691  
                                  3692  	load		q,op2
    005262  aa   000000 700656 
                                  3693  	use_eaq
    005263  aa   000000 000255 
    005264  aa  0 00465 7001 00   3694  	tsx0		pr0|integer_to_real
                                  3695  	in_reg		eaq,op1
    005265  aa   000000 742260 
                                  3696  	swap		op2
    005266  aa   000000 700202 
                                  3697  	pop		op1
    005267  aa   000000 740203 
                                  3698  	swap		op2
    005270  aa   000000 700202 
                                  3699  	s_return
    005271  aa   000003 000206 
                                  3700  
    005272                        3701  conv_bu_ir:
                                  3702  	convert_constant	real
    005272  aa   000000 001211 
                                  3703  
                                  3704  	swap		op2
    005273  aa   000000 700202 
                                  3705  	s_return
    005274  aa   000003 000206 
                                  3706  
    005275                        3707  builtin_2args_ri:
                                  3708  	if_optype		constant,conv_bu_ri
    005275  0a   005306 200227 
                                  3709  
                                  3710  	push_temp		real
    005276  aa   000000 001204 
                                  3711  
                                  3712  	load		q,op2
    005277  aa   000000 700656 
                                  3713  	use_eaq
    005300  aa   000000 000255 
    005301  aa  0 00465 7001 00   3714  	tsx0		pr0|integer_to_real
                                  3715  	in_reg		eaq,op1
    005302  aa   000000 742260 
                                  3716  	swap		op2
    005303  aa   000000 700202 
                                  3717  	pop		op1
    005304  aa   000000 740203 
                                  3718  	s_return
    005305  aa   000003 000206 
                                  3719  
    005306                        3720  conv_bu_ri:
                                  3721  	convert_constant	real
    005306  aa   000000 001211 
                                  3722  
                                  3723  	s_return
    005307  aa   000003 000206 
                                  3724  
    005310                        3725  builtin_2args_id:
                                  3726  	swap		op2
    005310  aa   000000 700202 
                                  3727  
                                  3728  	if_optype		constant,conv_bu_id
    005311  0a   005323 200227 
                                  3729  
                                  3730  	push_temp		dp
    005312  aa   000000 001604 
                                  3731  
                                  3732  	load		q,op2
    005313  aa   000000 700656 
                                  3733  	use_eaq
    005314  aa   000000 000255 
    005315  aa  0 00465 7001 00   3734  	tsx0		pr0|integer_to_double
                                  3735  	in_reg		deaq,op1
    005316  aa   000000 742660 
                                  3736  	swap		op2
    005317  aa   000000 700202 
                                  3737  	pop		op1
    005320  aa   000000 740203 
                                  3738  	swap		op2
    005321  aa   000000 700202 
                                  3739  	s_return
    005322  aa   000003 000206 
                                  3740  
    005323                        3741  conv_bu_id:
                                  3742  	convert_constant	dp
    005323  aa   000000 001611 
                                  3743  
                                  3744  	swap		op2
    005324  aa   000000 700202 
                                  3745  	s_return
    005325  aa   000003 000206 
                                  3746  
    005326                        3747  builtin_2args_di:
                                  3748  	if_optype		constant,conv_bu_di
    005326  0a   005337 200227 
                                  3749  
                                  3750  	push_temp		dp
    005327  aa   000000 001604 
                                  3751  
                                  3752  	load		q,op2
    005330  aa   000000 700656 
                                  3753  	use_eaq
    005331  aa   000000 000255 
    005332  aa  0 00465 7001 00   3754  	tsx0		pr0|integer_to_double
                                  3755  	in_reg		deaq,op1
    005333  aa   000000 742660 
                                  3756  	swap		op2
    005334  aa   000000 700202 
                                  3757  	pop		op1
    005335  aa   000000 740203 
                                  3758  	s_return
    005336  aa   000003 000206 
                                  3759  
    005337                        3760  conv_bu_di:
                                  3761  	convert_constant	dp
    005337  aa   000000 001611 
                                  3762  
                                  3763  	s_return
    005340  aa   000003 000206 
                                  3764  
    005341                        3765  sin:						" builtin 41
                                  3766  	if_dt		int,sin_i
    005341  0a   005347 400225 
                                  3767  	if_dt		real,sin.1
    005342  0a   005345 200225 
                                  3768  	if_dt		dp,dsin.1
    005343  0a   005357 100225 
                                  3769  	jump		csin.1
    005344  0a   005370 000220 
                                  3770  
    005345                        3771  sin.1:
                                  3772  	load		eaq,arg5
    005345  aa   000000 242256 
                                  3773  	jump		sin.2
    005346  0a   005350 000220 
                                  3774  
    005347                        3775  sin_i:
                                  3776  	s_call		cv_load.ir
    005347  0a   002050 000223 
                                  3777  
    005350                        3778  sin.2:
                                  3779  	push_temp		32
    005350  aa   000040 000204 
                                  3780  	load_pr		pr2,op1
    005351  aa   000003 740251 
                                  3781  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    005352  aa   377560 000250 
    005353  aa  0 01275 2731 00   3782  	tsp3		pr0|sin_
                                  3783  	free_regs
    005354  aa   000004 000206 
                                  3784  	jump		bu_ret_eaq
    005355  0a   003326 000220 
                                  3785  
    005356                        3786  dsin:						" builtin 42
                                  3787  	unless_dt		dp,dsin.p
    005356  0a   005400 100226 
    005357                        3788  dsin.1:
                                  3789  	load		deaq,arg5
    005357  aa   000000 242656 
                                  3790  	use_eaq
    005360  aa   000000 000255 
                                  3791  	push_temp		32
    005361  aa   000040 000204 
                                  3792  	load_pr		pr2,op1
    005362  aa   000003 740251 
                                  3793  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    005363  aa   377560 000250 
    005364  aa  0 01316 2731 00   3794  	tsp3		pr0|dsin_
                                  3795  	free_regs
    005365  aa   000004 000206 
                                  3796  	jump		bu_ret_deaq
    005366  0a   003332 000220 
                                  3797  
    005367                        3798  csin:						" builtin 43
                                  3799  	unless_dt		cmpx,csin.p
    005367  0a   005400 040226 
    005370                        3800  csin.1:
                                  3801  	load		aq,arg5
    005370  aa   000000 241656 
                                  3802  	push_temp		32
    005371  aa   000040 000204 
                                  3803  	load_pr		pr2,op1
    005372  aa   000003 740251 
                                  3804  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    005373  aa   377560 000250 
    005374  aa  0 01412 2731 00   3805  	tsp3		pr0|csin_
    005375  aa  6 00050 2371 00   3806  	ldaq		pr6|temp_pt
                                  3807  	free_regs
    005376  aa   000004 000206 
                                  3808  	jump		bu_ret_aq
    005377  0a   003336 000220 
                                  3809  
    005400                        3810  dsin.p:
    005400                        3811  csin.p:
                                  3812  	jump		bu_dt5.p
    005400  0a   006572 000220 
                                  3813  
    005401                        3814  sqrt:						" builtin 44
                                  3815  	if_dt		int,sqrt_i
    005401  0a   005407 400225 
                                  3816  	if_dt		real,sqrt.1
    005402  0a   005405 200225 
                                  3817  	if_dt		dp,dsqrt.1
    005403  0a   005417 100225 
                                  3818  	jump		csqrt.1
    005404  0a   005430 000220 
                                  3819  
    005405                        3820  sqrt.1:
                                  3821  	load		eaq,arg5
    005405  aa   000000 242256 
                                  3822  	jump		sqrt.2
    005406  0a   005410 000220 
                                  3823  
    005407                        3824  sqrt_i:
                                  3825  	s_call		cv_load.ir
    005407  0a   002050 000223 
                                  3826  
    005410                        3827  sqrt.2:
                                  3828  	push_temp		32
    005410  aa   000040 000204 
                                  3829  	load_pr		pr2,op1
    005411  aa   000003 740251 
                                  3830  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    005412  aa   377560 000250 
    005413  aa  0 01274 2731 00   3831  	tsp3		pr0|sqrt_
                                  3832  	free_regs
    005414  aa   000004 000206 
                                  3833  	jump		bu_ret_eaq
    005415  0a   003326 000220 
                                  3834  
    005416                        3835  dsqrt:						" builtin 45
                                  3836  	unless_dt		dp,dsqrt.p
    005416  0a   005440 100226 
    005417                        3837  dsqrt.1:
                                  3838  	load		deaq,arg5
    005417  aa   000000 242656 
                                  3839  	use_eaq
    005420  aa   000000 000255 
                                  3840  	push_temp		32
    005421  aa   000040 000204 
                                  3841  	load_pr		pr2,op1
    005422  aa   000003 740251 
                                  3842  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    005423  aa   377560 000250 
    005424  aa  0 01315 2731 00   3843  	tsp3		pr0|dsqrt_
                                  3844  	free_regs
    005425  aa   000004 000206 
                                  3845  	jump		bu_ret_deaq
    005426  0a   003332 000220 
                                  3846  
    005427                        3847  csqrt:						" builtin 46
                                  3848  	unless_dt		cmpx,csqrt.p
    005427  0a   005440 040226 
    005430                        3849  csqrt.1:
                                  3850  	load		aq,arg5
    005430  aa   000000 241656 
                                  3851  	push_temp		32
    005431  aa   000040 000204 
                                  3852  	load_pr		pr2,op1
    005432  aa   000003 740251 
                                  3853  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    005433  aa   377560 000250 
    005434  aa  0 01413 2731 00   3854  	tsp3		pr0|csqrt_
    005435  aa  6 00050 2371 00   3855  	ldaq		pr6|temp_pt
                                  3856  	free_regs
    005436  aa   000004 000206 
                                  3857  	jump		bu_ret_aq
    005437  0a   003336 000220 
                                  3858  
    005440                        3859  dsqrt.p:
    005440                        3860  csqrt.p:
                                  3861  	jump		bu_dt5.p
    005440  0a   006572 000220 
                                  3862  
    005441                        3863  tanh:						" builtin 47
                                  3864  	dt_jump1		arg5,(tanh.int,tanh.real,tanh.dp,tanh.p,tanh.p,tanh.p,tanh.p)
    005441  aa   000007 240374 
    005442  00   005446 005450 
    005443  00   005460 005472 
    005444  00   005472 005472 
    005445  0a   005472 000000 
                        000007 
                                  3865  
    005446                        3866  tanh.int:
                                  3867  	s_call		cv_load.ir
    005446  0a   002050 000223 
                                  3868  	jump		tanh.1
    005447  0a   005451 000220 
                                  3869  
    005450                        3870  tanh.real:
                                  3871  	load		eaq,arg5
    005450  aa   000000 242256 
                                  3872  
    005451                        3873  tanh.1:
                                  3874  	push_temp		32
    005451  aa   000040 000204 
                                  3875  	load_pr		pr2,op1
    005452  aa   000003 740251 
                                  3876  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    005453  aa   377560 000250 
    005454  aa  0 01414 2731 00   3877  	tsp3		pr0|tanh_
    005455  aa  6 00050 4311 00   3878  	fld		pr6|temp_pt
                                  3879  	free_regs
    005456  aa   000004 000206 
                                  3880  	jump		bu_ret_eaq
    005457  0a   003326 000220 
                                  3881  
    005460                        3882  tanh.dp:
                                  3883  	load		deaq,arg5
    005460  aa   000000 242656 
                                  3884  	push_temp		32
    005461  aa   000040 000204 
                                  3885  	load_pr		pr2,op1
    005462  aa   000003 740251 
                                  3886  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    005463  aa   377560 000250 
    005464  aa  0 01457 2731 00   3887  	tsp3		pr0|dtanh_
    005465  aa  6 00050 4331 00   3888  	dfld		pr6|temp_pt
                                  3889  	free_regs
    005466  aa   000004 000206 
                                  3890  	jump		bu_ret_deaq
    005467  0a   003332 000220 
                                  3891  
                                  3892  
    005470                        3893  dtanh:						" builtin 77
                                  3894  	unless_dt		dp,dtanh.p
    005470  0a   005472 100226 
                                  3895  	jump		tanh.dp
    005471  0a   005460 000220 
                                  3896  
                                  3897  
    005472                        3898  tanh.p:
    005472                        3899  dtanh.p:
                                  3900  	jump		bu_dt5.p
    005472  0a   006572 000220 
                                  3901  
    005473                        3902  sinh:						" builtin 74
                                  3903  	dt_jump1		arg5,(sinh.int,sinh.real,sinh.dp,sinh.p,sinh.p,sinh.p,sinh.p)
    005473  aa   000007 240374 
    005474  00   005500 005502 
    005475  00   005512 005524 
    005476  00   005524 005524 
    005477  0a   005524 000000 
                        000007 
                                  3904  
    005500                        3905  sinh.int:
                                  3906  	s_call		cv_load.ir
    005500  0a   002050 000223 
                                  3907  	jump		sinh.1
    005501  0a   005503 000220 
                                  3908  
    005502                        3909  sinh.real:
                                  3910  	load		eaq,arg5
    005502  aa   000000 242256 
                                  3911  
    005503                        3912  sinh.1:
                                  3913  	push_temp		32
    005503  aa   000040 000204 
                                  3914  	load_pr		pr2,op1
    005504  aa   000003 740251 
                                  3915  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    005505  aa   377560 000250 
    005506  aa  0 01460 2731 00   3916  	tsp3		pr0|sinh_
    005507  aa  6 00050 4311 00   3917  	fld		pr6|temp_pt
                                  3918  	free_regs
    005510  aa   000004 000206 
                                  3919  	jump		bu_ret_eaq
    005511  0a   003326 000220 
                                  3920  
    005512                        3921  sinh.dp:
                                  3922  	load		deaq,arg5
    005512  aa   000000 242656 
                                  3923  	push_temp		32
    005513  aa   000040 000204 
                                  3924  	load_pr		pr2,op1
    005514  aa   000003 740251 
                                  3925  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    005515  aa   377560 000250 
    005516  aa  0 01461 2731 00   3926  	tsp3		pr0|dsinh_
    005517  aa  6 00050 4331 00   3927  	dfld		pr6|temp_pt
                                  3928  	free_regs
    005520  aa   000004 000206 
                                  3929  	jump		bu_ret_deaq
    005521  0a   003332 000220 
                                  3930  
                                  3931  
    005522                        3932  dsinh:						" builtin 76
                                  3933  	unless_dt		dp,dsinh.p
    005522  0a   005524 100226 
                                  3934  	jump		sinh.dp
    005523  0a   005512 000220 
                                  3935  
                                  3936  
    005524                        3937  sinh.p:
    005524                        3938  dsinh.p:
                                  3939  	jump		bu_dt5.p
    005524  0a   006572 000220 
                                  3940  
    005525                        3941  cosh:						" builtin 73
                                  3942  	dt_jump1		arg5,(cosh.int,cosh.real,cosh.dp,cosh.p,cosh.p,cosh.p,cosh.p)
    005525  aa   000007 240374 
    005526  00   005532 005534 
    005527  00   005544 005556 
    005530  00   005556 005556 
    005531  0a   005556 000000 
                        000007 
                                  3943  
    005532                        3944  cosh.int:
                                  3945  	s_call		cv_load.ir
    005532  0a   002050 000223 
                                  3946  	jump		cosh.1
    005533  0a   005535 000220 
                                  3947  
    005534                        3948  cosh.real:
                                  3949  	load		eaq,arg5
    005534  aa   000000 242256 
                                  3950  
    005535                        3951  cosh.1:
                                  3952  	push_temp		32
    005535  aa   000040 000204 
                                  3953  	load_pr		pr2,op1
    005536  aa   000003 740251 
                                  3954  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    005537  aa   377560 000250 
    005540  aa  0 01462 2731 00   3955  	tsp3		pr0|cosh_
    005541  aa  6 00050 4311 00   3956  	fld		pr6|temp_pt
                                  3957  	free_regs
    005542  aa   000004 000206 
                                  3958  	jump		bu_ret_eaq
    005543  0a   003326 000220 
                                  3959  
    005544                        3960  cosh.dp:
                                  3961  	load		deaq,arg5
    005544  aa   000000 242656 
                                  3962  	push_temp		32
    005545  aa   000040 000204 
                                  3963  	load_pr		pr2,op1
    005546  aa   000003 740251 
                                  3964  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    005547  aa   377560 000250 
    005550  aa  0 01463 2731 00   3965  	tsp3		pr0|dcosh_
    005551  aa  6 00050 4331 00   3966  	dfld		pr6|temp_pt
                                  3967  	free_regs
    005552  aa   000004 000206 
                                  3968  	jump		bu_ret_deaq
    005553  0a   003332 000220 
                                  3969  
                                  3970  
    005554                        3971  dcosh:						" builtin 75
                                  3972  	unless_dt		dp,dcosh.p
    005554  0a   005556 100226 
                                  3973  	jump		cosh.dp
    005555  0a   005544 000220 
                                  3974  
                                  3975  
    005556                        3976  cosh.p:
    005556                        3977  dcosh.p:
                                  3978  	jump		bu_dt5.p
    005556  0a   006572 000220 
                                  3979  
    005557                        3980  int_builtin:					" builtin 48
                                  3981  	dt_jump1		arg5,(int_builtin.int,int_builtin.real,int_builtin.dp,int_builtin.cmpx,int.p,int.p,int_builtin.tl)
    005557  aa   000007 240374 
    005560  00   005564 005566 
    005561  00   005570 005572 
    005562  00   005602 005602 
    005563  0a   005574 000000 
                        000007 
                                  3982  
    005564                        3983  int_builtin.int:
                                  3984  	load		q,arg5
    005564  aa   000000 240656 
                                  3985  	jump		bu_ret_q
    005565  0a   003322 000220 
                                  3986  
    005566                        3987  int_builtin.real:
                                  3988  	s_call		cv_load.ri
    005566  0a   002060 000223 
                                  3989  	jump		bu_ret_q
    005567  0a   003322 000220 
                                  3990  
    005570                        3991  int_builtin.dp:
                                  3992  	s_call		cv_load.di
    005570  0a   002101 000223 
                                  3993  	jump		bu_ret_q
    005571  0a   003322 000220 
                                  3994  
    005572                        3995  int_builtin.cmpx:
                                  3996  	s_call		cv_load.ri
    005572  0a   002060 000223 
                                  3997  	jump		bu_ret_q
    005573  0a   003322 000220 
                                  3998  
    005574                        3999  int_builtin.tl:
                                  4000  	load		q,arg5
    005574  aa   000000 240656 
                                  4001  	jump		bu_ret_q
    005575  0a   003322 000220 
                                  4002  
                                  4003  
    005576                        4004  ifix:						" builtin 52
                                  4005  	unless_dt		real,ifix.p
    005576  0a   005602 200226 
                                  4006  	jump		int_builtin.real
    005577  0a   005566 000220 
                                  4007  
                                  4008  
    005600                        4009  idint:						" builtin 50
                                  4010  	unless_dt		dp,idint.p
    005600  0a   005602 100226 
                                  4011  	jump		int_builtin.dp
    005601  0a   005570 000220 
                                  4012  
                                  4013  
    005602                        4014  int.p:
    005602                        4015  ifix.p:
    005602                        4016  idint.p:
                                  4017  	jump		bu_dt5.p
    005602  0a   006572 000220 
                                  4018  
    005603                        4019  aint:						" builtin 49
                                  4020  	dt_jump1		arg5,(aint.int,aint.real,aint.dp,aint.p,aint.p,aint.p,aint.p)
    005603  aa   000007 240374 
    005604  00   005610 005612 
    005605  00   005615 005622 
    005606  00   005622 005622 
    005607  0a   005622 000000 
                        000007 
                                  4021  
    005610                        4022  aint.int:
                                  4023  	s_call		cv_load.ir
    005610  0a   002050 000223 
                                  4024  	jump		bu_ret_eaq
    005611  0a   003326 000220 
                                  4025  
    005612                        4026  aint.real:
                                  4027  	load_for_test	eaq,arg5
    005612  aa   000000 242361 
    005613  aa  0 01124 7001 00   4028  	tsx0		pr0|trunc_fl
                                  4029  	jump		bu_ret_eaq
    005614  0a   003326 000220 
                                  4030  
    005615                        4031  aint.dp:
                                  4032  	load_for_test	deaq,arg5
    005615  aa   000000 242761 
    005616  aa  0 01124 7001 00   4033  	tsx0		pr0|trunc_fl
                                  4034  	jump		bu_ret_deaq
    005617  0a   003332 000220 
                                  4035  
                                  4036  
    005620                        4037  dint:						" builtin 78
                                  4038  	unless_dt		dp,dint.p
    005620  0a   005622 100226 
                                  4039  	jump		aint.dp
    005621  0a   005615 000220 
                                  4040  
                                  4041  
    005622                        4042  aint.p:
    005622                        4043  dint.p:
                                  4044  	jump		bu_dt5.p
    005622  0a   006572 000220 
                                  4045  
    005623                        4046  anint:						" builtin 79
                                  4047  	dt_jump1		arg5,(anint.int,anint.real,anint.dp,anint.p,anint.p,anint.p,anint.p)
    005623  aa   000007 240374 
    005624  00   005630 005632 
    005625  00   005635 005642 
    005626  00   005642 005642 
    005627  0a   005642 000000 
                        000007 
                                  4048  
    005630                        4049  anint.int:
                                  4050  	s_call		cv_load.ir
    005630  0a   002050 000223 
                                  4051  	jump		bu_ret_eaq
    005631  0a   003326 000220 
                                  4052  
    005632                        4053  anint.real:
                                  4054  	load_for_test	eaq,arg5
    005632  aa   000000 242361 
    005633  aa  0 01464 7001 00   4055  	tsx0		pr0|nearest_whole_number
                                  4056  	jump		bu_ret_eaq
    005634  0a   003326 000220 
                                  4057  
    005635                        4058  anint.dp:
                                  4059  	load_for_test	deaq,arg5
    005635  aa   000000 242761 
    005636  aa  0 01464 7001 00   4060  	tsx0		pr0|nearest_whole_number
                                  4061  	jump		bu_ret_deaq
    005637  0a   003332 000220 
                                  4062  
                                  4063  
    005640                        4064  dnint:						" builtin 80
                                  4065  	unless_dt		dp,dnint.p
    005640  0a   005642 100226 
                                  4066  	jump		anint.dp
    005641  0a   005635 000220 
                                  4067  
                                  4068  
    005642                        4069  anint.p:
    005642                        4070  dnint.p:
                                  4071  	jump		bu_dt5.p
    005642  0a   006572 000220 
                                  4072  
    005643                        4073  nint:						" builtin 81
                                  4074  	dt_jump1		arg5,(nint.int,nint.real,nint.dp,nint.p,nint.p,nint.p,nint.p)
    005643  aa   000007 240374 
    005644  00   005650 005652 
    005645  00   005656 005664 
    005646  00   005664 005664 
    005647  0a   005664 000000 
                        000007 
                                  4075  
    005650                        4076  nint.int:
                                  4077  	load		q,arg5
    005650  aa   000000 240656 
                                  4078  	jump		bu_ret_q
    005651  0a   003322 000220 
                                  4079  
    005652                        4080  nint.real:
                                  4081  	load_for_test	eaq,arg5
    005652  aa   000000 242361 
                                  4082  	use_eaq
    005653  aa   000000 000255 
    005654  aa  0 01465 7001 00   4083  	tsx0		pr0|nearest_integer
                                  4084  	jump		bu_ret_q
    005655  0a   003322 000220 
                                  4085  
    005656                        4086  nint.dp:
                                  4087  	load_for_test	deaq,arg5
    005656  aa   000000 242761 
                                  4088  	use_eaq
    005657  aa   000000 000255 
    005660  aa  0 01465 7001 00   4089  	tsx0		pr0|nearest_integer
                                  4090  	jump		bu_ret_q
    005661  0a   003322 000220 
                                  4091  
                                  4092  
    005662                        4093  idnint:						" builtin 82
                                  4094  	unless_dt		dp,idnint.p
    005662  0a   005664 100226 
                                  4095  	jump		nint.dp
    005663  0a   005656 000220 
                                  4096  
                                  4097  
    005664                        4098  nint.p:
    005664                        4099  idnint.p:
                                  4100  	jump		bu_dt5.p
    005664  0a   006572 000220 
                                  4101  
    005665                        4102  real_builtin:					" builtin 54
                                  4103  	dt_jump1		arg5,(real_builtin.int,real_builtin.real,real_builtin.dp,real_builtin.cmpx,real.p,real.p,real.p)
    005665  aa   000007 240374 
    005666  00   005672 005674 
    005667  00   005676 005702 
    005670  00   005710 005710 
    005671  0a   005710 000000 
                        000007 
                                  4104  
    005672                        4105  real_builtin.int:
                                  4106  	s_call		cv_load.ir
    005672  0a   002050 000223 
                                  4107  	jump		bu_ret_eaq
    005673  0a   003326 000220 
                                  4108  
    005674                        4109  real_builtin.real:
                                  4110  	load		eaq,arg5
    005674  aa   000000 242256 
                                  4111  	jump		bu_ret_eaq
    005675  0a   003326 000220 
                                  4112  
    005676                        4113  real_builtin.dp:
                                  4114  	load		deaq,arg5
    005676  aa   000000 242656 
                                  4115  	emit		1
    005677  aa   000001 000242 
    005700  aa   000000 4710 00   4116  	frd		0
                                  4117  	jump		bu_ret_eaq
    005701  0a   003326 000220 
                                  4118  
    005702                        4119  real_builtin.cmpx:
                                  4120  	load		eaq,arg5
    005702  aa   000000 242256 
                                  4121  	jump		bu_ret_eaq
    005703  0a   003326 000220 
                                  4122  
                                  4123  
    005704                        4124  float:						" builtin 51
                                  4125  	unless_dt		int,float.p
    005704  0a   005710 400226 
                                  4126  	jump		real_builtin.int
    005705  0a   005672 000220 
                                  4127  
                                  4128  
    005706                        4129  sngl:						" builtin 53
                                  4130  	unless_dt		dp,sngl.p
    005706  0a   005710 100226 
                                  4131  	jump		real_builtin.dp
    005707  0a   005676 000220 
                                  4132  
                                  4133  
    005710                        4134  real.p:
    005710                        4135  float.p:
    005710                        4136  sngl.p:
                                  4137  	jump		bu_dt5.p
    005710  0a   006572 000220 
                                  4138  
    005711                        4139  aimag:						" builtin 55
                                  4140  	unless_dt		cmpx,aimag.p
    005711  0a   005714 040226 
                                  4141  
                                  4142  	load		ieaq,arg5
    005712  aa   000000 243256 
                                  4143  	jump		bu_ret_eaq
    005713  0a   003326 000220 
                                  4144  
    005714                        4145  aimag.p:
                                  4146  	jump		bu_dt5.p
    005714  0a   006572 000220 
                                  4147  
    005715                        4148  dble:						" builtin 56
                                  4149  	dt_jump1		arg5,(dble.int,dble.real,dble.dp,dble.cmpx,dble.p,dble.p,dble.p)
    005715  aa   000007 240374 
    005716  00   005722 005724 
    005717  00   005726 005730 
    005720  00   005732 005732 
    005721  0a   005732 000000 
                        000007 
                                  4150  
    005722                        4151  dble.int:
                                  4152  	s_call		cv_load.id
    005722  0a   002071 000223 
                                  4153  	jump		bu_ret_deaq
    005723  0a   003332 000220 
                                  4154  
    005724                        4155  dble.real:
                                  4156  	load		eaq,arg5
    005724  aa   000000 242256 
                                  4157  	jump		bu_ret_deaq
    005725  0a   003332 000220 
                                  4158  
    005726                        4159  dble.dp:
                                  4160  	load		deaq,arg5
    005726  aa   000000 242656 
                                  4161  	jump		bu_ret_deaq
    005727  0a   003332 000220 
                                  4162  
    005730                        4163  dble.cmpx:
                                  4164  	load		eaq,arg5
    005730  aa   000000 242256 
                                  4165  	jump		bu_ret_deaq
    005731  0a   003332 000220 
                                  4166  
    005732                        4167  dble.p:
                                  4168  	jump		bu_dt5.p
    005732  0a   006572 000220 
                                  4169  
    005733                        4170  cmplx:						" builtin 57
                                  4171  	if		arg2,=,1,cmplx.one
    005733  0a   005737 110637 
                                  4172  	if		arg2,=,2,cmplx.two
    005734  0a   005765 111237 
                                  4173  	error		319,arg1
    005735  aa   000477 000702 
    005736  aa   000000 040303 
                        000001 
                                  4174  
    005737                        4175  cmplx.one:
                                  4176  	dt_jump1		arg5,(cmplx.one.int,cmplx.one.real,cmplx.one.dp,cmplx.one.cmpx,cmplx.one.p,cmplx.one.p,cmplx.one.p)
    005737  aa   000007 240374 
    005740  00   005744 005746 
    005741  00   005750 005754 
    005742  00   005764 005764 
    005743  0a   005764 000000 
                        000007 
                                  4177  
    005744                        4178  cmplx.one.int:
                                  4179  	s_call		cv_load.ir
    005744  0a   002050 000223 
                                  4180  	jump		cmplx.one.join
    005745  0a   005756 000220 
                                  4181  
    005746                        4182  cmplx.one.real:
                                  4183  	load		eaq,arg5
    005746  aa   000000 242256 
                                  4184  	jump		cmplx.one.join
    005747  0a   005756 000220 
                                  4185  
    005750                        4186  cmplx.one.dp:
                                  4187  	load		deaq,arg5
    005750  aa   000000 242656 
                                  4188  	emit		1
    005751  aa   000001 000242 
    005752  aa   000000 4710 00   4189  	frd		0
                                  4190  	jump		cmplx.one.join
    005753  0a   005756 000220 
                                  4191  
    005754                        4192  cmplx.one.cmpx:
                                  4193  	load		aq,arg5
    005754  aa   000000 241656 
                                  4194  	return		aq
    005755  aa   000001 001617 
                                  4195  
    005756                        4196  cmplx.one.join:
                                  4197  	reset_eaq
    005756  aa   000006 000206 
                                  4198  	push_temp		cmpx
    005757  aa   000000 002204 
                                  4199  	store		eaq,op1,no_update
    005760  aa   000001 742357 
    005761  aa   400000 4310 03   4200  	fld		=0.0,du
    005762  aa   740001 4550 00   4201  	fst		op1+1
                                  4202  	return		op1
    005763  aa   000001 740217 
                                  4203  
    005764                        4204  cmplx.one.p:
                                  4205  	jump		mm_dt1.p
    005764  0a   006602 000220 
                                  4206  
    005765                        4207  cmplx.two:
                                  4208  	dt_jump		(cmplx.two.ii,cmplx.two.ri,cmplx.two.di,cmplx.two.e1,cmplx.two.ir,cmplx.two.rr,cmplx.two.dr,cmplx.two.e1,cmplx.two.id,cmplx.two.rd,cmplx.two.dd,cmplx.two.e1,cmplx.two.e2,cmplx.two.e2,cmplx.two.e2,cmplx.two.e1,cmplx.two.e2,cmplx.two.e1,cmplx.two.e2,cmplx.two.e1)
    005765  aa   000024 000235 
    005766  00   006000 006064 
    005767  00   006064 006062 
    005770  00   006064 006024 
    005771  00   006064 006062 
    005772  00   006064 006064 
    005773  00   006037 006062 
    005774  00   006063 006063 
    005775  00   006063 006062 
    005776  00   006063 006062 
    005777  00   006063 006062 
                        000024 
                                  4209  
    006000                        4210  cmplx.two.ii:
                                  4211  	push_temp		cmpx
    006000  aa   000000 002204 
                                  4212  	if_eaq		q,arg6,cmplx.two.ii.1
    006001  0a   006013 300633 
                                  4213  	swap		arg5
    006002  aa   000000 240202 
                                  4214  	s_call		cv_load.ir
    006003  0a   002050 000223 
                                  4215  	swap		arg5
    006004  aa   000000 240202 
                                  4216  	store		eaq,op1,no_update
    006005  aa   000001 742357 
                                  4217  	swap		arg6
    006006  aa   000000 300202 
                                  4218  	s_call		cv_load.ir
    006007  0a   002050 000223 
                                  4219  	swap		arg6
    006010  aa   000000 300202 
                                  4220  	in_reg		ieaq,op1
    006011  aa   000000 743260 
                                  4221  	return		op1
    006012  aa   000001 740217 
                                  4222  
    006013                        4223  cmplx.two.ii.1:
                                  4224  	swap		arg6
    006013  aa   000000 300202 
                                  4225  	s_call		cv_load.ir
    006014  0a   002050 000223 
                                  4226  	swap		arg6
    006015  aa   000000 300202 
                                  4227  	store		ieaq,op1,no_update
    006016  aa   000001 743357 
                                  4228  	swap		arg5
    006017  aa   000000 240202 
                                  4229  	s_call		cv_load.ir
    006020  0a   002050 000223 
                                  4230  	swap		arg5
    006021  aa   000000 240202 
                                  4231  	in_reg		eaq,op1
    006022  aa   000000 742260 
                                  4232  	return		op1
    006023  aa   000001 740217 
                                  4233  
    006024                        4234  cmplx.two.rr:
                                  4235  	push_temp		cmpx
    006024  aa   000000 002204 
                                  4236  	if_eaq		eaq,arg6,cmplx.two.rr.1
    006025  0a   006033 302233 
                                  4237  	load		eaq,arg5
    006026  aa   000000 242256 
                                  4238  	store		eaq,op1,no_update
    006027  aa   000001 742357 
    006030  aa   300000 4310 00   4239  	fld		arg6
                                  4240  	in_reg		ieaq,op1
    006031  aa   000000 743260 
                                  4241  	return		op1
    006032  aa   000001 740217 
                                  4242  
    006033                        4243  cmplx.two.rr.1:
                                  4244  	store		ieaq,op1,no_update
    006033  aa   000001 743357 
    006034  aa   240000 4310 00   4245  	fld		arg5
                                  4246  	in_reg		eaq,op1
    006035  aa   000000 742260 
                                  4247  	return		op1
    006036  aa   000001 740217 
                                  4248  
    006037                        4249  cmplx.two.dd:
                                  4250  	push_temp		cmpx
    006037  aa   000000 002204 
                                  4251  	if_eaq		deaq,arg6,cmplx.two.dd.1
    006040  0a   006052 302633 
                                  4252  	load		deaq,arg5
    006041  aa   000000 242656 
                                  4253  	emit		1
    006042  aa   000001 000242 
    006043  aa   000000 4710 00   4254  	frd		0
                                  4255  	store		eaq,op1,no_update
    006044  aa   000001 742357 
    006045  aa   300000 4330 00   4256  	dfld		arg6
                                  4257  	emit		1
    006046  aa   000001 000242 
    006047  aa   000000 4710 00   4258  	frd		0
                                  4259  	in_reg		ieaq,op1
    006050  aa   000000 743260 
                                  4260  	return		op1
    006051  aa   000001 740217 
                                  4261  
    006052                        4262  cmplx.two.dd.1:
                                  4263  	emit		1
    006052  aa   000001 000242 
    006053  aa   000000 4710 00   4264  	frd		0
                                  4265  	store		ieaq,op1,no_update
    006054  aa   000001 743357 
    006055  aa   240000 4330 00   4266  	dfld		arg5
                                  4267  	emit		1
    006056  aa   000001 000242 
    006057  aa   000000 4710 00   4268  	frd		0
                                  4269  	in_reg		eaq,op1
    006060  aa   000000 742260 
                                  4270  	return		op1
    006061  aa   000001 740217 
                                  4271  
    006062                        4272  cmplx.two.e1:
                                  4273  	jump		mm_dt2.p
    006062  0a   006605 000220 
                                  4274  
    006063                        4275  cmplx.two.e2:
                                  4276  	jump		mm_dt1.p
    006063  0a   006602 000220 
                                  4277  
    006064                        4278  cmplx.two.ri:
    006064                        4279  cmplx.two.di:
    006064                        4280  cmplx.two.ir:
    006064                        4281  cmplx.two.dr:
    006064                        4282  cmplx.two.id:
    006064                        4283  cmplx.two.rd:
                                  4284  	error		314,arg1
    006064  aa   000472 000702 
    006065  aa   000000 040303 
                        000001 
                                  4285  
    006066                        4286  conjg:						" builtin 58
                                  4287  	unless_dt		cmpx,conjg.p
    006066  0a   006115 040226 
                                  4288  
                                  4289  	push_temp		cmpx
    006067  aa   000000 002204 
                                  4290  
                                  4291  	use_ind
    006070  aa   000007 000206 
                                  4292  	if_eaq		ieaq,arg5,conjg.1
    006071  0a   006104 243233 
                                  4293  
                                  4294  	load		eaq,arg5
    006072  aa   000000 242256 
                                  4295  	store		eaq,op1,no_update
    006073  aa   000001 742357 
    006074  aa   240001 4310 00   4296  	fld		arg5+1
                                  4297  	emit		1
    006075  aa   000001 000242 
    006076  aa   000000 5130 00   4298  	fneg
                                  4299  	in_reg		ieaq,op1
    006077  aa   000000 743260 
                                  4300  
                                  4301  	scan		continue,(continue,next)
    006100                     
    006100  0a   006100 000221 
    006101  0a   006100 000220 
    006102  0a   006103 000220 
    006103                     
                                  4302  	return		op1
    006103  aa   000001 740217 
                                  4303  
    006104                        4304  conjg.1:
                                  4305  	emit		1
    006104  aa   000001 000242 
    006105  aa   000000 5130 00   4306  	fneg
                                  4307  	store		ieaq,op1,no_update
    006106  aa   000001 743357 
    006107  aa   240000 4310 00   4308  	fld		arg5
                                  4309  	in_reg		eaq,op1
    006110  aa   000000 742260 
                                  4310  
                                  4311  	scan		continue,(continue,next)
    006111                     
    006111  0a   006111 000221 
    006112  0a   006111 000220 
    006113  0a   006114 000220 
    006114                     
                                  4312  	return		op1
    006114  aa   000001 740217 
                                  4313  
    006115                        4314  conjg.p:
                                  4315  	jump		bu_dt5.p
    006115  0a   006572 000220 
                                  4316  
    006116                        4317  tan:						" builtin 59
                                  4318  	if_dt		int,tan_i
    006116  0a   006124 400225 
                                  4319  	if_dt		real,tan.1
    006117  0a   006122 200225 
                                  4320  	if_dt		dp,dtan.1
    006120  0a   006134 100225 
                                  4321  	jump		tan.p
    006121  0a   006144 000220 
                                  4322  
    006122                        4323  tan.1:
                                  4324  	load		eaq,arg5
    006122  aa   000000 242256 
                                  4325  	jump		tan.2
    006123  0a   006125 000220 
                                  4326  
    006124                        4327  tan_i:
                                  4328  	s_call		cv_load.ir
    006124  0a   002050 000223 
                                  4329  
    006125                        4330  tan.2:
                                  4331  	push_temp		32
    006125  aa   000040 000204 
                                  4332  	load_pr		pr2,op1
    006126  aa   000003 740251 
                                  4333  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    006127  aa   377560 000250 
    006130  aa  0 01301 2731 00   4334  	tsp3		pr0|tan_
                                  4335  	free_regs
    006131  aa   000004 000206 
                                  4336  	jump		bu_ret_eaq
    006132  0a   003326 000220 
                                  4337  
    006133                        4338  dtan:						" builtin 60
                                  4339  	unless_dt		dp,dtan.p
    006133  0a   006145 100226 
    006134                        4340  dtan.1:
                                  4341  	load		deaq,arg5
    006134  aa   000000 242656 
                                  4342  	use_eaq
    006135  aa   000000 000255 
                                  4343  	push_temp		32
    006136  aa   000040 000204 
                                  4344  	load_pr		pr2,op1
    006137  aa   000003 740251 
                                  4345  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    006140  aa   377560 000250 
    006141  aa  0 01322 2731 00   4346  	tsp3		pr0|dtan_
                                  4347  	free_regs
    006142  aa   000004 000206 
                                  4348  	jump		bu_ret_deaq
    006143  0a   003332 000220 
                                  4349  
    006144                        4350  tan.p:
                                  4351  	jump		bu_dt5.p
    006144  0a   006572 000220 
                                  4352  
    006145                        4353  dtan.p:
                                  4354  	jump		bu_dt5.p
    006145  0a   006572 000220 
                                  4355  
    006146                        4356  asin:						" builtin 61
                                  4357  	if_dt		int,asin_i
    006146  0a   006154 400225 
                                  4358  	if_dt		real,asin.1
    006147  0a   006152 200225 
                                  4359  	if_dt		dp,dasin.1
    006150  0a   006164 100225 
                                  4360  	jump		asin.p
    006151  0a   006174 000220 
                                  4361  
    006152                        4362  asin.1:
                                  4363  	load		eaq,arg5
    006152  aa   000000 242256 
                                  4364  	jump		asin.2
    006153  0a   006155 000220 
                                  4365  
    006154                        4366  asin_i:
                                  4367  	s_call		cv_load.ir
    006154  0a   002050 000223 
                                  4368  
    006155                        4369  asin.2:
                                  4370  	push_temp		32
    006155  aa   000040 000204 
                                  4371  	load_pr		pr2,op1
    006156  aa   000003 740251 
                                  4372  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    006157  aa   377560 000250 
    006160  aa  0 01303 2731 00   4373  	tsp3		pr0|asin_
                                  4374  	free_regs
    006161  aa   000004 000206 
                                  4375  	jump		bu_ret_eaq
    006162  0a   003326 000220 
                                  4376  
    006163                        4377  dasin:						" builtin 62
                                  4378  	unless_dt		dp,dasin.p
    006163  0a   006175 100226 
    006164                        4379  dasin.1:
                                  4380  	load		deaq,arg5
    006164  aa   000000 242656 
                                  4381  	use_eaq
    006165  aa   000000 000255 
                                  4382  	push_temp		32
    006166  aa   000040 000204 
                                  4383  	load_pr		pr2,op1
    006167  aa   000003 740251 
                                  4384  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    006170  aa   377560 000250 
    006171  aa  0 01324 2731 00   4385  	tsp3		pr0|dasin_
                                  4386  	free_regs
    006172  aa   000004 000206 
                                  4387  	jump		bu_ret_deaq
    006173  0a   003332 000220 
                                  4388  
    006174                        4389  asin.p:
                                  4390  	jump		bu_dt5.p
    006174  0a   006572 000220 
                                  4391  
    006175                        4392  dasin.p:
                                  4393  	jump		bu_dt5.p
    006175  0a   006572 000220 
                                  4394  
    006176                        4395  acos:						" builtin 63
                                  4396  	if_dt		int,acos_i
    006176  0a   006204 400225 
                                  4397  	if_dt		real,acos.1
    006177  0a   006202 200225 
                                  4398  	if_dt		dp,dacos.1
    006200  0a   006214 100225 
                                  4399  	jump		acos.p
    006201  0a   006224 000220 
                                  4400  
    006202                        4401  acos.1:
                                  4402  	load		eaq,arg5
    006202  aa   000000 242256 
                                  4403  	jump		acos.2
    006203  0a   006205 000220 
                                  4404  
    006204                        4405  acos_i:
                                  4406  	s_call		cv_load.ir
    006204  0a   002050 000223 
                                  4407  
    006205                        4408  acos.2:
                                  4409  	push_temp		32
    006205  aa   000040 000204 
                                  4410  	load_pr		pr2,op1
    006206  aa   000003 740251 
                                  4411  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    006207  aa   377560 000250 
    006210  aa  0 01305 2731 00   4412  	tsp3		pr0|acos_
                                  4413  	free_regs
    006211  aa   000004 000206 
                                  4414  	jump		bu_ret_eaq
    006212  0a   003326 000220 
                                  4415  
    006213                        4416  dacos:						" builtin 64
                                  4417  	unless_dt		dp,dacos.p
    006213  0a   006225 100226 
    006214                        4418  dacos.1:
                                  4419  	load		deaq,arg5
    006214  aa   000000 242656 
                                  4420  	use_eaq
    006215  aa   000000 000255 
                                  4421  	push_temp		32
    006216  aa   000040 000204 
                                  4422  	load_pr		pr2,op1
    006217  aa   000003 740251 
                                  4423  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    006220  aa   377560 000250 
    006221  aa  0 01326 2731 00   4424  	tsp3		pr0|dacos_
                                  4425  	free_regs
    006222  aa   000004 000206 
                                  4426  	jump		bu_ret_deaq
    006223  0a   003332 000220 
                                  4427  
    006224                        4428  acos.p:
                                  4429  	jump		bu_dt5.p
    006224  0a   006572 000220 
                                  4430  
    006225                        4431  dacos.p:
                                  4432  	jump		bu_dt5.p
    006225  0a   006572 000220 
                                  4433  
    006226                        4434  char_builtin:						" builtin 65
                                  4435  	unless_dt		int,char.p
    006226  0a   006241 400226 
                                  4436  
                                  4437  	if_optype		constant,char.constant
    006227  0a   006237 200227 
                                  4438  
                                  4439  	push_char_temp	1
    006230  aa   000001 000320 
                                  4440  
                                  4441  	load		q,op2
    006231  aa   000000 700656 
                                  4442  
                                  4443  	emit_inst		1
    006232  aa   000001 040242 
    006233  aa   000033 7360 00   4444  	qls		27
                                  4445  
    006234  aa   740000 7560 00   4446  	stq		op1
                                  4447  
                                  4448  	reset_eaq
    006235  aa   000006 000206 
                                  4449  
                                  4450  	jump		bu_ret_op1
    006236  0a   003356 000220 
                                  4451  
    006237                        4452  char.constant:
                                  4453  	int_to_char1
    006237  aa   000054 000206 
                                  4454  	jump		bu_ret_op1
    006240  0a   003356 000220 
                                  4455  
    006241                        4456  char.p:
                                  4457  	jump		bu_dt1.p
    006241  0a   006562 000220 
                                  4458  
    006242                        4459  ichar:						" builtin 66
                                  4460  	unless_dt		char,ichar.p
    006242  0a   006263 010226 
                                  4461  
                                  4462  	if_optype		constant,ichar.constant
    006243  0a   006261 200227 
                                  4463  
                                  4464  	push_temp		int
    006244  aa   000000 000604 
                                  4465  
                                  4466  	if_aligned	op2,ichar.aligned
    006245  0a   006254 700632 
                                  4467  
                                  4468  	emit_eis
    006246  aa   000000 000207 
    006247  aa  0 00100 1015 00   4469  	mrl		(pr),(pr),fill(0)
    006250  aa   700000 000001    4470  	desc9a		op2,1
    006251  aa   740000 000004    4471  	desc9a		op1,4
                                  4472  
                                  4473  	set_in_storage	op1
    006252  aa   000000 740362 
                                  4474  
                                  4475  	jump		bu_ret_op1
    006253  0a   003356 000220 
                                  4476  
    006254                        4477  ichar.aligned:
                                  4478  	use_eaq
    006254  aa   000000 000255 
                                  4479  
    006255  aa   700000 2360 00   4480  	ldq		op2
                                  4481  
                                  4482  	emit_inst		1
    006256  aa   000001 040242 
    006257  aa   000033 7720 00   4483  	qrl		27
                                  4484  
                                  4485  	jump		bu_ret_q
    006260  0a   003322 000220 
                                  4486  
    006261                        4487  ichar.constant:
                                  4488  	char1_to_int
    006261  aa   000055 000206 
                                  4489  	jump		bu_ret_op1
    006262  0a   003356 000220 
                                  4490  
    006263                        4491  ichar.p:
                                  4492  	jump		bu_dt1.p
    006263  0a   006562 000220 
                                  4493  
    006264                        4494  index:						" builtin 67
                                  4495  	unless_dt		char,index.p
    006264  0a   006334 010226 
                                  4496  	swap		op2
    006265  aa   000000 700202 
                                  4497  	unless_dt		char,index.p
    006266  0a   006334 010226 
                                  4498  
                                  4499  	push_length	op2
    006267  aa   000000 700304 
                                  4500  	if		op1,=,1,index.1
    006270  0a   006306 750637 
                                  4501  	if		op1,=,2,index.2
    006271  0a   006321 751237 
                                  4502  
                                  4503  	" Length of second string is not known to be 1 or 2
                                  4504  
                                  4505  	push_length	op2
    006272  aa   000000 700304 
                                  4506  
                                  4507  	use_eaq
    006273  aa   000000 000255 
                                  4508  
                                  4509  	load_pr		pr2,op3
    006274  aa   000003 640251 
                                  4510  	load		q,op1
    006275  aa   000000 740656 
    006276  aa  0 01227 7001 00   4511  	tsx0		pr0|set_cs_eis
                                  4512  
                                  4513  	free_regs
    006277  aa   000004 000206 
                                  4514  
                                  4515  	use_eaq
    006300  aa   000000 000255 
                                  4516  
                                  4517  	load_pr		pr2,op4
    006301  aa   000003 600251 
                                  4518  	load		q,op2
    006302  aa   000000 700656 
    006303  aa  0 01231 7001 00   4519  	tsx0		pr0|index_cs_eis
                                  4520  
                                  4521  	free_regs
    006304  aa   000004 000206 
                                  4522  
                                  4523  	jump		bu_ret_q
    006305  0a   003322 000220 
                                  4524  
    006306                        4525  index.1:
                                  4526  
                                  4527  	" Length of second string is known to be 1
                                  4528  
                                  4529  	use_eaq
    006306  aa   000000 000255 
                                  4530  
                                  4531  	emit_eis
    006307  aa   000000 000207 
    006310  aa  0 00100 1245 00   4532  	scm		(pr),(pr),mask(0)
    006311  aa   700000 000000    4533  	desc9a		op2
    006312  aa   640000 000001    4534  	desc9a		op3,1
                                  4535  
    006313  aa  6 00056 0001 00   4536  	arg		pr6|double_temp
                                  4537  
    006314  aa  6 00056 2361 00   4538  	ldq		pr6|double_temp
    006315  aa   000002 6070 04   4539  	ttf		2,ic
    006316  aa   000001 3360 07   4540  	lcq		1,dl
    006317  aa   000001 0760 07   4541  	adq		1,dl
                                  4542  
                                  4543  	jump		bu_ret_q
    006320  0a   003322 000220 
                                  4544  
    006321                        4545  index.2:
                                  4546  
                                  4547  	" Length of second string is known to be 2
                                  4548  
                                  4549  	use_eaq
    006321  aa   000000 000255 
                                  4550  
                                  4551  	emit_eis
    006322  aa   000000 000207 
    006323  aa  0 00100 1205 00   4552  	scd		(pr),(pr)
    006324  aa   700000 000000    4553  	desc9a		op2
    006325  aa   640000 000002    4554  	desc9a		op3,2
                                  4555  
    006326  aa  6 00056 0001 00   4556  	arg		pr6|double_temp
                                  4557  
    006327  aa  6 00056 2361 00   4558  	ldq		pr6|double_temp
    006330  aa   000002 6070 04   4559  	ttf		2,ic
    006331  aa   000001 3360 07   4560  	lcq		1,dl
    006332  aa   000001 0760 07   4561  	adq		1,dl
                                  4562  
                                  4563  	jump		bu_ret_q
    006333  0a   003322 000220 
                                  4564  
    006334                        4565  index.p:
                                  4566  	jump		bu_dt1.p
    006334  0a   006562 000220 
                                  4567  
    006335                        4568  len:						" builtin 68
                                  4569  	unless_dt		char,len.p
    006335  0a   006340 010226 
                                  4570  
                                  4571  	push_length	op1
    006336  aa   000000 740304 
                                  4572  
                                  4573  	jump		bu_ret_op1
    006337  0a   003356 000220 
                                  4574  
    006340                        4575  len.p:
                                  4576  	jump		bu_dt1.p
    006340  0a   006562 000220 
                                  4577  
    006341                        4578  lge:						" builtin 69
                                  4579  	unless_dt		char,lge.p
    006341  0a   006352 010226 
                                  4580  	swap		op2
    006342  aa   000000 700202 
                                  4581  	unless_dt		char,lge.p
    006343  0a   006352 010226 
                                  4582  
                                  4583  	use_ind
    006344  aa   000007 000206 
                                  4584  
                                  4585  	emit_eis
    006345  aa   000000 000207 
    006346  aa  0 40100 1065 00   4586  	cmpc		(pr),(pr),fill(040)
    006347  aa   740000 000000    4587  	desc9a		op1
    006350  aa   700000 000000    4588  	desc9a		op2
                                  4589  
                                  4590  	jump		bu_ret_trc
    006351  0a   003346 000220 
                                  4591  
    006352                        4592  lge.p:
                                  4593  	jump		bu_dt1.p
    006352  0a   006562 000220 
                                  4594  
    006353                        4595  lgt:						" builtin 70
                                  4596  	unless_dt		char,lgt.p
    006353  0a   006364 010226 
                                  4597  	swap		op2
    006354  aa   000000 700202 
                                  4598  	unless_dt		char,lgt.p
    006355  0a   006364 010226 
                                  4599  
                                  4600  	use_ind
    006356  aa   000007 000206 
                                  4601  
                                  4602  	emit_eis
    006357  aa   000000 000207 
    006360  aa  0 40100 1065 00   4603  	cmpc		(pr),(pr),fill(040)
    006361  aa   700000 000000    4604  	desc9a		op2
    006362  aa   740000 000000    4605  	desc9a		op1
                                  4606  
                                  4607  	jump		bu_ret_tnc
    006363  0a   003352 000220 
                                  4608  
    006364                        4609  lgt.p:
                                  4610  	jump		bu_dt1.p
    006364  0a   006562 000220 
                                  4611  
    006365                        4612  lle:						" builtin 71
                                  4613  	unless_dt		char,lle.p
    006365  0a   006376 010226 
                                  4614  	swap		op2
    006366  aa   000000 700202 
                                  4615  	unless_dt		char,lle.p
    006367  0a   006376 010226 
                                  4616  
                                  4617  	use_ind
    006370  aa   000007 000206 
                                  4618  
                                  4619  	emit_eis
    006371  aa   000000 000207 
    006372  aa  0 40100 1065 00   4620  	cmpc		(pr),(pr),fill(040)
    006373  aa   700000 000000    4621  	desc9a		op2
    006374  aa   740000 000000    4622  	desc9a		op1
                                  4623  
                                  4624  	jump		bu_ret_trc
    006375  0a   003346 000220 
                                  4625  
    006376                        4626  lle.p:
                                  4627  	jump		bu_dt1.p
    006376  0a   006562 000220 
                                  4628  
    006377                        4629  llt:						"builtin 72
                                  4630  	unless_dt		char,llt.p
    006377  0a   006410 010226 
                                  4631  	swap		op2
    006400  aa   000000 700202 
                                  4632  	unless_dt		char,llt.p
    006401  0a   006410 010226 
                                  4633  
                                  4634  	use_ind
    006402  aa   000007 000206 
                                  4635  
                                  4636  	emit_eis
    006403  aa   000000 000207 
    006404  aa  0 40100 1065 00   4637  	cmpc		(pr),(pr),fill(040)
    006405  aa   740000 000000    4638  	desc9a		op1
    006406  aa   700000 000000    4639  	desc9a		op2
                                  4640  
                                  4641  	jump		bu_ret_tnc
    006407  0a   003352 000220 
                                  4642  
    006410                        4643  llt.p:
                                  4644  	jump		bu_dt1.p
    006410  0a   006562 000220 
                                  4645  
    006411                        4646  dprod:						" builtin 83
                                  4647  	swap		arg5
    006411  aa   000000 240202 
                                  4648  	unless_dt		real,dprod.p
    006412  0a   006420 200226 
                                  4649  	swap		arg5
    006413  aa   000000 240202 
                                  4650  	unless_dt		real,dprod.p
    006414  0a   006420 200226 
                                  4651  	load_top		eaq
    006415  aa   000000 002257 
    006416  aa   700000 4610 00   4652  	fmp		op2
                                  4653  	jump		bu_ret_deaq
    006417  0a   003332 000220 
                                  4654  
    006420                        4655  dprod.p:
                                  4656  	jump		bu_dt6.p
    006420  0a   006576 000220 
                                  4657  
    006421                        4658  and.tl:						" builtin 84
                                  4659  	unless		arg2,>,1,wrong_number.p
    006421  0a   003406 104640 
                                  4660  	load_top		tq
    006422  aa   000000 004657 
                                  4661  	copy		op2
    006423  aa   000000 700201 
                                  4662  
    006424                        4663  and.tl.loop:
    006424  aa   740000 3760 00   4664  	anq		op1
                                  4665  	pop		op1
    006425  aa   000000 740203 
                                  4666  	if		arg2,=,2,and.tl.r
    006426  0a   006433 111237 
                                  4667  	copy		arg2
    006427  aa   000000 100201 
                                  4668  	copy		opv
    006430  aa   000000 000201 
                                  4669  	decrement		arg2,1
    006431  aa   000001 100264 
                                  4670  	jump		and.tl.loop
    006432  0a   006424 000220 
                                  4671  
    006433                        4672  and.tl.r:
                                  4673  	jump		mm_ret_tq
    006433  0a   003376 000220 
                                  4674  
    006434                        4675  bool.tl:						" builtin 85
                                  4676  	load		tq,arg5
    006434  aa   000000 244656 
                                  4677  	jump		bu_ret_tq
    006435  0a   003342 000220 
                                  4678  
    006436                        4679  compl.tl:						" builtin 86
                                  4680  	use_eaq
    006436  aa   000000 000255 
    006437  aa   000001 3360 07   4681  	lcq		1,dl
    006440  aa   240000 6760 00   4682  	erq		arg5
                                  4683  	jump		bu_ret_tq
    006441  0a   003342 000220 
                                  4684  
    006442                        4685  fld.tl:						" builtin 87
                                  4686  	rhs_fld
    006442  aa   000071 000206 
                                  4687  	jump		bu_ret_tq
    006443  0a   003342 000220 
                                  4688  
    006444                        4689  ilr.tl:						" builtin 88
                                  4690  	dt_jump1		arg5,(ilr.1,bu_dt5.p,bu_dt5.p,bu_dt5.p,bu_dt5.p,bu_dt5.p,ilr.1)
    006444  aa   000007 240374 
    006445  00   006451 006572 
    006446  00   006572 006572 
    006447  00   006572 006572 
    006450  0a   006451 000000 
                        000007 
                                  4691  
    006451                        4692  ilr.1:
                                  4693  	dt_jump1		arg6,(ilr.2,bu_dt6.p,bu_dt6.p,bu_dt6.p,bu_dt6.p,bu_dt6.p,bu_dt6.p)
    006451  aa   000007 300374 
    006452  00   006456 006576 
    006453  00   006576 006576 
    006454  00   006576 006576 
    006455  0a   006576 000000 
                        000007 
                                  4694  
    006456                        4695  ilr.2:
                                  4696  	load		q,arg5
    006456  aa   000000 240656 
                                  4697  	load		ia,arg6
    006457  aa   000000 304256 
    006460  aa   000000 7760 05   4698  	qlr		0,al
                                  4699  	jump		bu_ret_q
    006461  0a   003322 000220 
                                  4700  
    006462                        4701  ils.tl:						" builtin 89
                                  4702  	dt_jump1		arg5,(ils.1,bu_dt5.p,bu_dt5.p,bu_dt5.p,bu_dt5.p,bu_dt5.p,ils.1)
    006462  aa   000007 240374 
    006463  00   006467 006572 
    006464  00   006572 006572 
    006465  00   006572 006572 
    006466  0a   006467 000000 
                        000007 
                                  4703  
    006467                        4704  ils.1:
                                  4705  	dt_jump1		arg6,(ils.2,bu_dt6.p,bu_dt6.p,bu_dt6.p,bu_dt6.p,bu_dt6.p,bu_dt6.p)
    006467  aa   000007 300374 
    006470  00   006474 006576 
    006471  00   006576 006576 
    006472  00   006576 006576 
    006473  0a   006576 000000 
                        000007 
                                  4706  
    006474                        4707  ils.2:
                                  4708  	load		q,arg5
    006474  aa   000000 240656 
                                  4709  	load		ia,arg6
    006475  aa   000000 304256 
    006476  aa   000000 7360 05   4710  	qls		0,al
                                  4711  	jump		bu_ret_q
    006477  0a   003322 000220 
                                  4712  
    006500                        4713  irl.tl:						" builtin 90
                                  4714  	dt_jump1		arg5,(irl.1,bu_dt5.p,bu_dt5.p,bu_dt5.p,bu_dt5.p,bu_dt5.p,irl.1)
    006500  aa   000007 240374 
    006501  00   006505 006572 
    006502  00   006572 006572 
    006503  00   006572 006572 
    006504  0a   006505 000000 
                        000007 
                                  4715  
    006505                        4716  irl.1:
                                  4717  	dt_jump1		arg6,(irl.2,bu_dt6.p,bu_dt6.p,bu_dt6.p,bu_dt6.p,bu_dt6.p,bu_dt6.p)
    006505  aa   000007 300374 
    006506  00   006512 006576 
    006507  00   006576 006576 
    006510  00   006576 006576 
    006511  0a   006576 000000 
                        000007 
                                  4718  
    006512                        4719  irl.2:
                                  4720  	load		q,arg5
    006512  aa   000000 240656 
                                  4721  	load		ia,arg6
    006513  aa   000000 304256 
    006514  aa   000000 7720 05   4722  	qrl		0,al
                                  4723  	jump		bu_ret_q
    006515  0a   003322 000220 
                                  4724  
    006516                        4725  irs.tl:						" builtin 91
                                  4726  	dt_jump1		arg5,(irs.1,bu_dt5.p,bu_dt5.p,bu_dt5.p,bu_dt5.p,bu_dt5.p,irs.1)
    006516  aa   000007 240374 
    006517  00   006523 006572 
    006520  00   006572 006572 
    006521  00   006572 006572 
    006522  0a   006523 000000 
                        000007 
                                  4727  
    006523                        4728  irs.1:
                                  4729  	dt_jump1		arg6,(irs.2,bu_dt6.p,bu_dt6.p,bu_dt6.p,bu_dt6.p,bu_dt6.p,bu_dt6.p)
    006523  aa   000007 300374 
    006524  00   006530 006576 
    006525  00   006576 006576 
    006526  00   006576 006576 
    006527  0a   006576 000000 
                        000007 
                                  4730  
    006530                        4731  irs.2:
                                  4732  	load		q,arg5
    006530  aa   000000 240656 
                                  4733  	load		ia,arg6
    006531  aa   000000 304256 
    006532  aa   000000 7320 05   4734  	qrs		0,al
                                  4735  	jump		bu_ret_q
    006533  0a   003322 000220 
                                  4736  
    006534                        4737  or.tl:						" builtin 92
                                  4738  	unless		arg2,>,1,wrong_number.p
    006534  0a   003406 104640 
                                  4739  	load_top		tq
    006535  aa   000000 004657 
                                  4740  	copy		op2
    006536  aa   000000 700201 
                                  4741  
    006537                        4742  or.tl.loop:
    006537  aa   740000 2760 00   4743  	orq		op1
                                  4744  	pop		op1
    006540  aa   000000 740203 
                                  4745  	if		arg2,=,2,or.tl.r
    006541  0a   006546 111237 
                                  4746  	copy		arg2
    006542  aa   000000 100201 
                                  4747  	copy		opv
    006543  aa   000000 000201 
                                  4748  	decrement		arg2,1
    006544  aa   000001 100264 
                                  4749  	jump		or.tl.loop
    006545  0a   006537 000220 
                                  4750  
    006546                        4751  or.tl.r:
                                  4752  	jump		mm_ret_tq
    006546  0a   003376 000220 
                                  4753  
    006547                        4754  xor.tl:						" builtin 93
                                  4755  	unless		arg2,>,1,wrong_number.p
    006547  0a   003406 104640 
                                  4756  	load_top		tq
    006550  aa   000000 004657 
                                  4757  	copy		op2
    006551  aa   000000 700201 
                                  4758  
    006552                        4759  xor.tl.loop:
    006552  aa   740000 6760 00   4760  	erq		op1
                                  4761  	pop		op1
    006553  aa   000000 740203 
                                  4762  	if		arg2,=,2,xor.tl.r
    006554  0a   006561 111237 
                                  4763  	copy		arg2
    006555  aa   000000 100201 
                                  4764  	copy		opv
    006556  aa   000000 000201 
                                  4765  	decrement		arg2,1
    006557  aa   000001 100264 
                                  4766  	jump		xor.tl.loop
    006560  0a   006552 000220 
                                  4767  
    006561                        4768  xor.tl.r:
                                  4769  	jump		mm_ret_tq
    006561  0a   003376 000220 
                                  4770  
    006562                        4771  bu_dt1.p:
                                  4772  	print		321,arg1,op1
    006562  aa   000501 001301 
    006563  aa   000000 040303 
    006564  aa   000000 740303 
                        000002 
                                  4773  	jump		bu_abort_list
    006565  0a   003402 000220 
                                  4774  
    006566                        4775  bu_dt2.p:
                                  4776  	print		321,arg1,op2
    006566  aa   000501 001301 
    006567  aa   000000 040303 
    006570  aa   000000 700303 
                        000002 
                                  4777  	jump		bu_abort_list
    006571  0a   003402 000220 
                                  4778  
    006572                        4779  bu_dt5.p:
                                  4780  	print		321,arg1,arg5
    006572  aa   000501 001301 
    006573  aa   000000 040303 
    006574  aa   000000 240303 
                        000002 
                                  4781  	jump		bu_abort_list
    006575  0a   003402 000220 
                                  4782  
    006576                        4783  bu_dt6.p:
                                  4784  	print		321,arg1,arg6
    006576  aa   000501 001301 
    006577  aa   000000 040303 
    006600  aa   000000 300303 
                        000002 
                                  4785  	jump		bu_abort_list
    006601  0a   003402 000220 
                                  4786  
    006602                        4787  mm_dt1.p:
                                  4788  	error		321,arg1,op1
    006602  aa   000501 001302 
    006603  aa   000000 040303 
    006604  aa   000000 740303 
                        000002 
                                  4789  
    006605                        4790  mm_dt2.p:
                                  4791  	error		321,arg1,op2
    006605  aa   000501 001302 
    006606  aa   000000 040303 
    006607  aa   000000 700303 
                        000002 
                                  4792  
                                  4793  "		Errors common to all relational operators.
    006610                        4794  logical_op1:
                                  4795  	error		339,op1
    006610  aa   000523 000702 
    006611  aa   000000 740303 
                        000001 
                                  4796  
    006612                        4797  logical_op2:
                                  4798  	error		339,op2
    006612  aa   000523 000702 
    006613  aa   000000 700303 
                        000001 
                                  4799  
    006614                        4800  invalid_opnd:
                                  4801  	error		340,op2
    006614  aa   000524 000702 
    006615  aa   000000 700303 
                        000001 
                                  4802  
    006616                        4803  not_scalar:
                                  4804  	error		340,op1
    006616  aa   000524 000702 
    006617  aa   000000 740303 
                        000001 
                                  4805  
    006620                        4806  typeless_op1:
                                  4807  	error		362,op1
    006620  aa   000552 000702 
    006621  aa   000000 740303 
                        000001 
                                  4808  
    006622                        4809  typeless_op2:
                                  4810  	error		362,op2
    006622  aa   000552 000702 
    006623  aa   000000 700303 
                        000001 
                                  4811  "
                                  4812  "		Begin relational operators.
                                  4813  "
                                  4814  less:	func		2
    006624  aa   000000 001215 
                                  4815  
                                  4816  	use_ind
    006625  aa   000007 000206 
                                  4817  
                                  4818  	dt_jump		(less_ii,less_ri,less_di,less_ci,less_ir,less_rr,less_dr,less_cr,less_id,less_rd,less_dd,less_cd,less_ic,less_rc,less_dc,less_cc,less_e2,less_e1,less_tl,less_tl)
    006626  aa   000024 000235 
    006627  00   006641 006653 
    006630  00   006662 006725 
    006631  00   006647 006665 
    006632  00   006714 006731 
    006633  00   006656 006705 
    006634  00   006675 006736 
    006635  00   006723 006727 
    006636  00   006733 006741 
    006637  00   006744 006776 
    006640  00   007016 007016 
                        000024 
                                  4819  
    006641                        4820  less_ii:
                                  4821  	if_eaq		q,arg2,less_ii.1
    006641  0a   006645 100633 
                                  4822  
                                  4823  	load		q,arg1
    006642  aa   000000 040656 
    006643  aa   100000 1160 00   4824  	cmpq		arg2
                                  4825  	return		tmi
    006644  aa   000001 006617 
                                  4826  
    006645                        4827  less_ii.1:
    006645  aa   040000 1160 00   4828  	cmpq		arg1
                                  4829  	return		tpnz
    006646  aa   000001 010217 
                                  4830  
    006647                        4831  less_ir:
                                  4832  	swap		arg1
    006647  aa   000000 040202 
                                  4833  
                                  4834  	s_call		cv_load.ir
    006650  0a   002050 000223 
    006651  aa   040000 5150 00   4835  	fcmp		arg1
                                  4836  	return		tmi
    006652  aa   000001 006617 
                                  4837  
    006653                        4838  less_ri:
                                  4839  	s_call		cv_load.ir
    006653  0a   002050 000223 
    006654  aa   040000 5150 00   4840  	fcmp		arg1
                                  4841  	return		tpnz
    006655  aa   000001 010217 
                                  4842  
    006656                        4843  less_id:
                                  4844  	swap		arg1
    006656  aa   000000 040202 
                                  4845  
                                  4846  	s_call		cv_load.id
    006657  0a   002071 000223 
    006660  aa   040000 5170 00   4847  	dfcmp		arg1
                                  4848  	return		tmi
    006661  aa   000001 006617 
                                  4849  
    006662                        4850  less_di:
                                  4851  	s_call		cv_load.id
    006662  0a   002071 000223 
    006663  aa   040000 5170 00   4852  	dfcmp		arg1
                                  4853  	return		tpnz
    006664  aa   000001 010217 
                                  4854  
    006665                        4855  less_rr:
                                  4856  	if_eaq		eaq,arg2,less_rr.1
    006665  0a   006672 102233 
                                  4857  
                                  4858  	load		eaq,arg1
    006666  aa   000000 042256 
                                  4859  	round		eaq
    006667  aa   000000 002354 
    006670  aa   100000 5150 00   4860  	fcmp		arg2
                                  4861  	return		tmi
    006671  aa   000001 006617 
                                  4862  
    006672                        4863  less_rr.1:
                                  4864  	round		eaq
    006672  aa   000000 002354 
    006673  aa   040000 5150 00   4865  	fcmp		arg1
                                  4866  	return		tpnz
    006674  aa   000001 010217 
                                  4867  
    006675                        4868  less_dd:
                                  4869  	if_eaq		deaq,arg2,less_dd.1
    006675  0a   006702 102633 
                                  4870  
                                  4871  	load		deaq,arg1
    006676  aa   000000 042656 
                                  4872  	round		deaq
    006677  aa   000000 002754 
    006700  aa   100000 5170 00   4873  	dfcmp		arg2
                                  4874  	return		tmi
    006701  aa   000001 006617 
                                  4875  
    006702                        4876  less_dd.1:
                                  4877  	round		deaq
    006702  aa   000000 002754 
    006703  aa   040000 5170 00   4878  	dfcmp		arg1
                                  4879  	return		tpnz
    006704  aa   000001 010217 
                                  4880  
    006705                        4881  less_rd:
                                  4882  	if_eaq		deaq,arg2,less_rd.1
    006705  0a   006711 102633 
                                  4883  
                                  4884  	load		eaq,arg1
    006706  aa   000000 042256 
    006707  aa   100000 5170 00   4885  	dfcmp		arg2
                                  4886  	return		tmi
    006710  aa   000001 006617 
                                  4887  
    006711                        4888  less_rd.1:
                                  4889  	round		deaq
    006711  aa   000000 002754 
    006712  aa   040000 5150 00   4890  	fcmp		arg1
                                  4891  	return		tpnz
    006713  aa   000001 010217 
                                  4892  
    006714                        4893  less_dr:
                                  4894  	if_eaq		eaq,arg2,less_dr.1
    006714  0a   006721 102233 
                                  4895  
                                  4896  	load		deaq,arg1
    006715  aa   000000 042656 
                                  4897  	round		deaq
    006716  aa   000000 002754 
    006717  aa   100000 5150 00   4898  	fcmp		arg2
                                  4899  	return		tmi
    006720  aa   000001 006617 
                                  4900  
    006721                        4901  less_dr.1:
    006721  aa   040000 5170 00   4902  	dfcmp		arg1
                                  4903  	return		tpnz
    006722  aa   000001 010217 
                                  4904  
    006723                        4905  less_ic:
                                  4906  	error		323,arg2
    006723  aa   000503 000702 
    006724  aa   000000 100303 
                        000001 
                                  4907  
    006725                        4908  less_ci:
                                  4909  	error		323,arg1
    006725  aa   000503 000702 
    006726  aa   000000 040303 
                        000001 
                                  4910  
    006727                        4911  less_rc:
                                  4912  	error		323,arg2
    006727  aa   000503 000702 
    006730  aa   000000 100303 
                        000001 
                                  4913  
    006731                        4914  less_cr:
                                  4915  	error		323,arg1
    006731  aa   000503 000702 
    006732  aa   000000 040303 
                        000001 
                                  4916  
    006733                        4917  less_dc:
                                  4918  	error		312,arg1,arg2
    006733  aa   000470 001302 
    006734  aa   000000 040303 
    006735  aa   000000 100303 
                        000002 
                                  4919  
    006736                        4920  less_cd:
                                  4921  	error		311,arg1,arg2
    006736  aa   000467 001302 
    006737  aa   000000 040303 
    006740  aa   000000 100303 
                        000002 
                                  4922  
    006741                        4923  less_cc:
                                  4924  	error		328,arg1,arg2
    006741  aa   000510 001302 
    006742  aa   000000 040303 
    006743  aa   000000 100303 
                        000002 
                                  4925  
    006744                        4926  less_e2:
                                  4927  	if_dt		logical,logical_op1
    006744  0a   006610 020225 
                                  4928  	dt_jump1		arg1,(less_ih,less_rh,less_dh,less_ch,logical_op2,less_hh,less_th)
    006745  aa   000007 040374 
    006746  00   006752 006752 
    006747  00   006761 006761 
    006750  00   006612 006770 
    006751  0a   006752 000000 
                        000007 
                                  4929  
    006752                        4930  less_ih:
    006752                        4931  less_rh:
    006752                        4932  less_th:
                                  4933  	unless_optype	constant,invalid_opnd
    006752  0a   006614 200230 
                                  4934  
                                  4935  	swap		arg1
    006753  aa   000000 040202 
                                  4936  	unless_optype	(variable,array_ref,temp),not_scalar
    006754  0a   006616 540230 
                                  4937  
                                  4938  	pad_char_const_to_word	arg1	" the two operands remain swapped
    006755  aa   000000 040375 
                                  4939  
                                  4940  	load		a,arg2
    006756  aa   000000 101256 
    006757  aa   040000 1150 00   4941  	cmpa		arg1
                                  4942  	return		tnc
    006760  aa   000001 010617 
                                  4943  
    006761                        4944  less_dh:
    006761                        4945  less_ch:
                                  4946  	unless_optype	constant,invalid_opnd
    006761  0a   006614 200230 
                                  4947  
                                  4948  	swap		arg1
    006762  aa   000000 040202 
                                  4949  	unless_optype	(variable,array_ref,temp),not_scalar
    006763  0a   006616 540230 
                                  4950  
                                  4951  	pad_char_const_to_dw	arg1	" the two operands remain swapped
    006764  aa   000000 040376 
                                  4952  
                                  4953  	load		aq,arg2
    006765  aa   000000 101656 
    006766  aa   040000 1170 00   4954  	cmpaq		arg1
                                  4955  	return		tnc
    006767  aa   000001 010617 
                                  4956  
    006770                        4957  less_hh:
                                  4958  	use_eaq
    006770  aa   000000 000255 
                                  4959  
                                  4960  	emit_eis
    006771  aa   000000 000207 
    006772  aa  0 40100 1065 00   4961  	cmpc		(pr),(pr),fill(040)
    006773  aa   040000 000000    4962  	desc9a		arg1
    006774  aa   100000 000000    4963  	desc9a		arg2
                                  4964  
                                  4965  	return		tnc
    006775  aa   000001 010617 
                                  4966  
    006776                        4967  less_e1:
                                  4968  	unless_optype	(variable,array_ref,temp),not_scalar
    006776  0a   006616 540230 
                                  4969  
                                  4970  	swap		arg1
    006777  aa   000000 040202 
                                  4971  	unless_optype	constant,invalid_opnd
    007000  0a   006614 200230 
                                  4972  "				Operands remain swapped.
                                  4973  	dt_jump1		arg2,(less_hi,less_hr,less_hd,less_hc,logical_op1,less_hh,less_ht)
    007001  aa   000007 100374 
    007002  00   007006 007006 
    007003  00   007012 007012 
    007004  00   006610 006770 
    007005  0a   007006 000000 
                        000007 
                                  4974  
    007006                        4975  less_hi:
    007006                        4976  less_hr:
    007006                        4977  less_ht:
                                  4978  	pad_char_const_to_word	arg2
    007006  aa   000000 100375 
                                  4979  
                                  4980  	load		a,arg2
    007007  aa   000000 101256 
    007010  aa   040000 1150 00   4981  	cmpa		arg1
                                  4982  	return		tnc
    007011  aa   000001 010617 
                                  4983  
    007012                        4984  less_hd:
    007012                        4985  less_hc:
                                  4986  	pad_char_const_to_dw	arg2
    007012  aa   000000 100376 
                                  4987  
                                  4988  	load		aq,arg2
    007013  aa   000000 101656 
    007014  aa   040000 1170 00   4989  	cmpaq		arg1
                                  4990  	return		tnc
    007015  aa   000001 010617 
                                  4991  
    007016                        4992  less_tl:
                                  4993  	unless_dt		(int,typeless),typeless_op1
    007016  0a   006620 404226 
                                  4994  	dt_jump1		op2,(less_tl.1,typeless_op2,typeless_op2,typeless_op2,typeless_op2,typeless_op2,less_tl.1)
    007017  aa   000007 700374 
    007020  00   007024 006622 
    007021  00   006622 006622 
    007022  00   006622 006622 
    007023  0a   007024 000000 
                        000007 
                                  4995  
    007024                        4996  less_tl.1:
                                  4997  	if_eaq		tq,arg2,less_tl.2
    007024  0a   007030 104633 
                                  4998  
                                  4999  	load		tq,arg1
    007025  aa   000000 044656 
    007026  aa   100000 1160 00   5000  	cmpq		arg2
                                  5001  	return		tmi
    007027  aa   000001 006617 
                                  5002  
    007030                        5003  less_tl.2:
    007030  aa   040000 1160 00   5004  	cmpq		arg1
                                  5005  	return		tpnz
    007031  aa   000001 010217 
                                  5006  
    007032                        5007  less_or_equal:
                                  5008  	func		2
    007032  aa   000000 001215 
                                  5009  
                                  5010  	use_ind
    007033  aa   000007 000206 
                                  5011  
                                  5012  	dt_jump		(less_or_equal_ii,less_or_equal_ri,less_or_equal_di,less_or_equal_ci,less_or_equal_ir,less_or_equal_rr,less_or_equal_dr,less_or_equal_cr,less_or_equal_id,less_or_equal_rd,less_or_equal_dd,less_or_equal_cd,less_or_equal_ic,less_or_equal_rc,less_or_equal_dc,less_or_equal_cc,less_or_equal_e2,less_or_equal_e1,less_or_equal_tl,less_or_equal_tl)
    007034  aa   000024 000235 
    007035  00   007047 007061 
    007036  00   007070 007133 
    007037  00   007055 007073 
    007040  00   007122 007137 
    007041  00   007064 007113 
    007042  00   007103 007144 
    007043  00   007131 007135 
    007044  00   007141 007147 
    007045  00   007152 007204 
    007046  00   007224 007224 
                        000024 
                                  5013  
    007047                        5014  less_or_equal_ii:
                                  5015  	if_eaq		q,arg2,less_or_equal_ii.1
    007047  0a   007053 100633 
                                  5016  
                                  5017  	load		q,arg1
    007050  aa   000000 040656 
    007051  aa   100000 1160 00   5018  	cmpq		arg2
                                  5019  	return		tmoz
    007052  aa   000001 007617 
                                  5020  
    007053                        5021  less_or_equal_ii.1:
    007053  aa   040000 1160 00   5022  	cmpq		arg1
                                  5023  	return		tpl
    007054  aa   000001 007217 
                                  5024  
    007055                        5025  less_or_equal_ir:
                                  5026  	swap		arg1
    007055  aa   000000 040202 
                                  5027  
                                  5028  	s_call		cv_load.ir
    007056  0a   002050 000223 
    007057  aa   040000 5150 00   5029  	fcmp		arg1
                                  5030  	return		tmoz
    007060  aa   000001 007617 
                                  5031  
    007061                        5032  less_or_equal_ri:
                                  5033  	s_call		cv_load.ir
    007061  0a   002050 000223 
    007062  aa   040000 5150 00   5034  	fcmp		arg1
                                  5035  	return		tpl
    007063  aa   000001 007217 
                                  5036  
    007064                        5037  less_or_equal_id:
                                  5038  	swap		arg1
    007064  aa   000000 040202 
                                  5039  
                                  5040  	s_call		cv_load.id
    007065  0a   002071 000223 
    007066  aa   040000 5170 00   5041  	dfcmp		arg1
                                  5042  	return		tmoz
    007067  aa   000001 007617 
                                  5043  
    007070                        5044  less_or_equal_di:
                                  5045  	s_call		cv_load.id
    007070  0a   002071 000223 
    007071  aa   040000 5170 00   5046  	dfcmp		arg1
                                  5047  	return		tpl
    007072  aa   000001 007217 
                                  5048  
    007073                        5049  less_or_equal_rr:
                                  5050  	if_eaq		eaq,arg2,less_or_equal_rr.1
    007073  0a   007100 102233 
                                  5051  
                                  5052  	load		eaq,arg1
    007074  aa   000000 042256 
                                  5053  	round		eaq
    007075  aa   000000 002354 
    007076  aa   100000 5150 00   5054  	fcmp		arg2
                                  5055  	return		tmoz
    007077  aa   000001 007617 
                                  5056  
    007100                        5057  less_or_equal_rr.1:
                                  5058  	round		eaq
    007100  aa   000000 002354 
    007101  aa   040000 5150 00   5059  	fcmp		arg1
                                  5060  	return		tpl
    007102  aa   000001 007217 
                                  5061  
    007103                        5062  less_or_equal_dd:
                                  5063  	if_eaq		deaq,arg2,less_or_equal_dd.1
    007103  0a   007110 102633 
                                  5064  
                                  5065  	load		deaq,arg1
    007104  aa   000000 042656 
                                  5066  	round		deaq
    007105  aa   000000 002754 
    007106  aa   100000 5170 00   5067  	dfcmp		arg2
                                  5068  	return		tmoz
    007107  aa   000001 007617 
                                  5069  
    007110                        5070  less_or_equal_dd.1:
                                  5071  	round		deaq
    007110  aa   000000 002754 
    007111  aa   040000 5170 00   5072  	dfcmp		arg1
                                  5073  	return		tpl
    007112  aa   000001 007217 
                                  5074  
    007113                        5075  less_or_equal_rd:
                                  5076  	if_eaq		deaq,arg2,less_or_equal_rd.1
    007113  0a   007117 102633 
                                  5077  
                                  5078  	load		eaq,arg1
    007114  aa   000000 042256 
    007115  aa   100000 5170 00   5079  	dfcmp		arg2
                                  5080  	return		tmoz
    007116  aa   000001 007617 
                                  5081  
    007117                        5082  less_or_equal_rd.1:
                                  5083  	round		deaq
    007117  aa   000000 002754 
    007120  aa   040000 5150 00   5084  	fcmp		arg1
                                  5085  	return		tpl
    007121  aa   000001 007217 
                                  5086  
    007122                        5087  less_or_equal_dr:
                                  5088  	if_eaq		eaq,arg2,less_or_equal_dr.1
    007122  0a   007127 102233 
                                  5089  
                                  5090  	load		deaq,arg1
    007123  aa   000000 042656 
                                  5091  	round		deaq
    007124  aa   000000 002754 
    007125  aa   100000 5150 00   5092  	fcmp		arg2
                                  5093  	return		tmoz
    007126  aa   000001 007617 
                                  5094  
    007127                        5095  less_or_equal_dr.1:
    007127  aa   040000 5170 00   5096  	dfcmp		arg1
                                  5097  	return		tpl
    007130  aa   000001 007217 
                                  5098  
    007131                        5099  less_or_equal_ic:
                                  5100  	error		323,arg2
    007131  aa   000503 000702 
    007132  aa   000000 100303 
                        000001 
                                  5101  
    007133                        5102  less_or_equal_ci:
                                  5103  	error		323,arg1
    007133  aa   000503 000702 
    007134  aa   000000 040303 
                        000001 
                                  5104  
    007135                        5105  less_or_equal_rc:
                                  5106  	error		323,arg2
    007135  aa   000503 000702 
    007136  aa   000000 100303 
                        000001 
                                  5107  
    007137                        5108  less_or_equal_cr:
                                  5109  	error		323,arg1
    007137  aa   000503 000702 
    007140  aa   000000 040303 
                        000001 
                                  5110  
    007141                        5111  less_or_equal_dc:
                                  5112  	error		312,arg1,arg2
    007141  aa   000470 001302 
    007142  aa   000000 040303 
    007143  aa   000000 100303 
                        000002 
                                  5113  
    007144                        5114  less_or_equal_cd:
                                  5115  	error		311,arg1,arg2
    007144  aa   000467 001302 
    007145  aa   000000 040303 
    007146  aa   000000 100303 
                        000002 
                                  5116  
    007147                        5117  less_or_equal_cc:
                                  5118  	error		328,arg1,arg2
    007147  aa   000510 001302 
    007150  aa   000000 040303 
    007151  aa   000000 100303 
                        000002 
                                  5119  
    007152                        5120  less_or_equal_e2:
                                  5121  	if_dt		logical,logical_op1
    007152  0a   006610 020225 
                                  5122  	dt_jump1		arg1,(less_or_equal_ih,less_or_equal_rh,less_or_equal_dh,less_or_equal_ch,logical_op2,less_or_equal_hh,less_or_equal_th)
    007153  aa   000007 040374 
    007154  00   007160 007160 
    007155  00   007167 007167 
    007156  00   006612 007176 
    007157  0a   007160 000000 
                        000007 
                                  5123  
    007160                        5124  less_or_equal_ih:
    007160                        5125  less_or_equal_rh:
    007160                        5126  less_or_equal_th:
                                  5127  	unless_optype	constant,invalid_opnd
    007160  0a   006614 200230 
                                  5128  
                                  5129  	swap		arg1
    007161  aa   000000 040202 
                                  5130  	unless_optype	(variable,array_ref,temp),not_scalar
    007162  0a   006616 540230 
                                  5131  
                                  5132  	pad_char_const_to_word	arg1	" the two operands remain swapped
    007163  aa   000000 040375 
                                  5133  
                                  5134  	load		a,arg1
    007164  aa   000000 041256 
    007165  aa   100000 1150 00   5135  	cmpa		arg2
                                  5136  	return		trc
    007166  aa   000001 011217 
                                  5137  
    007167                        5138  less_or_equal_dh:
    007167                        5139  less_or_equal_ch:
                                  5140  	unless_optype	constant,invalid_opnd
    007167  0a   006614 200230 
                                  5141  
                                  5142  	swap		arg1
    007170  aa   000000 040202 
                                  5143  	unless_optype	(variable,array_ref,temp),not_scalar
    007171  0a   006616 540230 
                                  5144  
                                  5145  	pad_char_const_to_dw	arg1	" the two operands remain swapped
    007172  aa   000000 040376 
                                  5146  
                                  5147  	load		aq,arg1
    007173  aa   000000 041656 
    007174  aa   100000 1170 00   5148  	cmpaq		arg2
                                  5149  	return		trc
    007175  aa   000001 011217 
                                  5150  
    007176                        5151  less_or_equal_hh:
                                  5152  	use_eaq
    007176  aa   000000 000255 
                                  5153  
                                  5154  	emit_eis
    007177  aa   000000 000207 
    007200  aa  0 40100 1065 00   5155  	cmpc		(pr),(pr),fill(040)
    007201  aa   100000 000000    5156  	desc9a		arg2
    007202  aa   040000 000000    5157  	desc9a		arg1
                                  5158  
                                  5159  	return		trc
    007203  aa   000001 011217 
                                  5160  
    007204                        5161  less_or_equal_e1:
                                  5162  	unless_optype	(variable,array_ref,temp),not_scalar
    007204  0a   006616 540230 
                                  5163  
                                  5164  	swap		arg1
    007205  aa   000000 040202 
                                  5165  	unless_optype	constant,invalid_opnd
    007206  0a   006614 200230 
                                  5166  "				Operands remain swapped.
                                  5167  	dt_jump1		arg2,(less_or_equal_hi,less_or_equal_hr,less_or_equal_hd,less_or_equal_hc,logical_op1,less_or_equal_hh,less_or_equal_ht)
    007207  aa   000007 100374 
    007210  00   007214 007214 
    007211  00   007220 007220 
    007212  00   006610 007176 
    007213  0a   007214 000000 
                        000007 
                                  5168  
    007214                        5169  less_or_equal_hi:
    007214                        5170  less_or_equal_hr:
    007214                        5171  less_or_equal_ht:
                                  5172  	pad_char_const_to_word	arg2
    007214  aa   000000 100375 
                                  5173  
                                  5174  	load		a,arg1
    007215  aa   000000 041256 
    007216  aa   100000 1150 00   5175  	cmpa		arg2
                                  5176  	return		trc
    007217  aa   000001 011217 
                                  5177  
    007220                        5178  less_or_equal_hd:
    007220                        5179  less_or_equal_hc:
                                  5180  	pad_char_const_to_dw	arg2
    007220  aa   000000 100376 
                                  5181  
                                  5182  	load		aq,arg1
    007221  aa   000000 041656 
    007222  aa   100000 1170 00   5183  	cmpaq		arg2
                                  5184  	return		trc
    007223  aa   000001 011217 
                                  5185  
    007224                        5186  less_or_equal_tl:
                                  5187  	unless_dt		(int,typeless),typeless_op1
    007224  0a   006620 404226 
                                  5188  	dt_jump1		op2,(less_or_equal_tl.1,typeless_op2,typeless_op2,typeless_op2,typeless_op2,typeless_op2,less_or_equal_tl.1)
    007225  aa   000007 700374 
    007226  00   007232 006622 
    007227  00   006622 006622 
    007230  00   006622 006622 
    007231  0a   007232 000000 
                        000007 
                                  5189  
    007232                        5190  less_or_equal_tl.1:
                                  5191  	if_eaq		tq,arg2,less_or_equal_tl.2
    007232  0a   007236 104633 
                                  5192  
                                  5193  	load		tq,arg1
    007233  aa   000000 044656 
    007234  aa   100000 1160 00   5194  	cmpq		arg2
                                  5195  	return		tmoz
    007235  aa   000001 007617 
                                  5196  
    007236                        5197  less_or_equal_tl.2:
    007236  aa   040000 1160 00   5198  	cmpq		arg1
                                  5199  	return		tpl
    007237  aa   000001 007217 
                                  5200  
                                  5201  
                                  5202  equal:	func		2
    007240  aa   000000 001215 
                                  5203  
                                  5204  	use_ind
    007241  aa   000007 000206 
                                  5205  
                                  5206  	dt_jump		(equal_ii,equal_ri,equal_di,equal_ci,equal_ir,equal_rr,equal_dr,equal_cr,equal_id,equal_rd,equal_dd,equal_cd,equal_ic,equal_rc,equal_dc,equal_cc,equal_e2,equal_e1,equal_tl,equal_tl)
    007242  aa   000024 000235 
    007243  00   007255 007261 
    007244  00   007265 007312 
    007245  00   007260 007270 
    007246  00   007301 007316 
    007247  00   007264 007300 
    007250  00   007274 007323 
    007251  00   007310 007314 
    007252  00   007320 007326 
    007253  00   007331 007372 
    007254  00   007412 007412 
                        000024 
                                  5207  
    007255                        5208  equal_ii:
                                  5209  	load_top		q
    007255  aa   000000 000657 
    007256  aa   040000 1160 00   5210  	cmpq		arg1
                                  5211  	return		tze
    007257  aa   000001 005617 
                                  5212  
    007260                        5213  equal_ir:
                                  5214  	swap		arg1
    007260  aa   000000 040202 
                                  5215  
    007261                        5216  equal_ri:
                                  5217  	s_call		cv_load.ir
    007261  0a   002050 000223 
    007262  aa   040000 5150 00   5218  	fcmp		arg1
                                  5219  	return		tze
    007263  aa   000001 005617 
                                  5220  
    007264                        5221  equal_id:
                                  5222  	swap		arg1
    007264  aa   000000 040202 
                                  5223  
    007265                        5224  equal_di:
                                  5225  	s_call		cv_load.id
    007265  0a   002071 000223 
    007266  aa   040000 5170 00   5226  	dfcmp		arg1
                                  5227  	return		tze
    007267  aa   000001 005617 
                                  5228  
    007270                        5229  equal_rr:
                                  5230  	load_top		eaq
    007270  aa   000000 002257 
                                  5231  	round		eaq
    007271  aa   000000 002354 
    007272  aa   040000 5150 00   5232  	fcmp		arg1
                                  5233  	return		tze
    007273  aa   000001 005617 
                                  5234  
    007274                        5235  equal_dd:
                                  5236  	load_top		deaq
    007274  aa   000000 002657 
                                  5237  	round		deaq
    007275  aa   000000 002754 
    007276  aa   040000 5170 00   5238  	dfcmp		arg1
                                  5239  	return		tze
    007277  aa   000001 005617 
                                  5240  
    007300                        5241  equal_rd:
                                  5242  	swap		arg1
    007300  aa   000000 040202 
                                  5243  
    007301                        5244  equal_dr:
                                  5245  	if_eaq		eaq,arg2,equal_dr.1
    007301  0a   007306 102233 
                                  5246  
                                  5247  	load		deaq,arg1
    007302  aa   000000 042656 
                                  5248  	round		deaq
    007303  aa   000000 002754 
    007304  aa   100000 5150 00   5249  	fcmp		arg2
                                  5250  	return		tze
    007305  aa   000001 005617 
                                  5251  
    007306                        5252  equal_dr.1:
    007306  aa   040000 5170 00   5253  	dfcmp		arg1
                                  5254  	return		tze
    007307  aa   000001 005617 
                                  5255  
    007310                        5256  equal_ic:
                                  5257  	error		323,arg2
    007310  aa   000503 000702 
    007311  aa   000000 100303 
                        000001 
                                  5258  
    007312                        5259  equal_ci:
                                  5260  	error		323,arg1
    007312  aa   000503 000702 
    007313  aa   000000 040303 
                        000001 
                                  5261  
    007314                        5262  equal_rc:
                                  5263  	error		323,arg2
    007314  aa   000503 000702 
    007315  aa   000000 100303 
                        000001 
                                  5264  
    007316                        5265  equal_cr:
                                  5266  	error		323,arg1
    007316  aa   000503 000702 
    007317  aa   000000 040303 
                        000001 
                                  5267  
    007320                        5268  equal_dc:
                                  5269  	error		312,arg1,arg2
    007320  aa   000470 001302 
    007321  aa   000000 040303 
    007322  aa   000000 100303 
                        000002 
                                  5270  
    007323                        5271  equal_cd:
                                  5272  	error		311,arg1,arg2
    007323  aa   000467 001302 
    007324  aa   000000 040303 
    007325  aa   000000 100303 
                        000002 
                                  5273  
    007326                        5274  equal_cc:
                                  5275  	load_top		aq
    007326  aa   000000 001657 
    007327  aa   040000 1170 00   5276  	cmpaq		arg1
                                  5277  	return		tze
    007330  aa   000001 005617 
                                  5278  
    007331                        5279  equal_e2:
                                  5280  	if_dt		char,equal_ah
    007331  0a   007341 010225 
                                  5281  	swap		arg1	" top is logical, so swap and test
    007332  aa   000000 040202 
                                  5282  
                                  5283  	if_dt		logical,equal_ll
    007333  0a   007336 020225 
                                  5284  	error		313,op1
    007334  aa   000471 000702 
    007335  aa   000000 740303 
                        000001 
                                  5285  
    007336                        5286  equal_ll:
                                  5287  	load_top		a
    007336  aa   000000 001257 
    007337  aa   040000 1150 00   5288  	cmpa		arg1
                                  5289  	return		tze
    007340  aa   000001 005617 
                                  5290  
    007341                        5291  equal_ah:
                                  5292  	dt_jump1		arg1,(equal_ih,equal_rh,equal_dh,equal_ch,logical_op2,equal_hh,equal_th)
    007341  aa   000007 040374 
    007342  00   007346 007346 
    007343  00   007355 007355 
    007344  00   006612 007364 
    007345  0a   007346 000000 
                        000007 
                                  5293  
    007346                        5294  equal_ih:
    007346                        5295  equal_rh:
    007346                        5296  equal_th:
                                  5297  	unless_optype	constant,invalid_opnd
    007346  0a   006614 200230 
                                  5298  
                                  5299  	swap		arg1
    007347  aa   000000 040202 
                                  5300  	unless_optype	(variable,array_ref,temp),not_scalar
    007350  0a   006616 540230 
                                  5301  
                                  5302  	pad_char_const_to_word	arg1	" the two operands remain swapped
    007351  aa   000000 040375 
                                  5303  
                                  5304  	load_top		a
    007352  aa   000000 001257 
    007353  aa   040000 1150 00   5305  	cmpa		arg1
                                  5306  	return		tze
    007354  aa   000001 005617 
                                  5307  
    007355                        5308  equal_dh:
    007355                        5309  equal_ch:
                                  5310  	unless_optype	constant,invalid_opnd
    007355  0a   006614 200230 
                                  5311  
                                  5312  	swap		arg1
    007356  aa   000000 040202 
                                  5313  	unless_optype	(variable,array_ref,temp),not_scalar
    007357  0a   006616 540230 
                                  5314  
                                  5315  	pad_char_const_to_dw	arg1	" the two operands remain swapped
    007360  aa   000000 040376 
                                  5316  
                                  5317  	load_top		aq
    007361  aa   000000 001657 
    007362  aa   040000 1170 00   5318  	cmpaq		arg1
                                  5319  	return		tze
    007363  aa   000001 005617 
                                  5320  
    007364                        5321  equal_hh:
                                  5322  	use_eaq
    007364  aa   000000 000255 
                                  5323  
                                  5324  	emit_eis
    007365  aa   000000 000207 
    007366  aa  0 40100 1065 00   5325  	cmpc		(pr),(pr),fill(040)
    007367  aa   040000 000000    5326  	desc9a		arg1
    007370  aa   100000 000000    5327  	desc9a		arg2
                                  5328  
                                  5329  	return		tze
    007371  aa   000001 005617 
                                  5330  
    007372                        5331  equal_e1:
                                  5332  	unless_optype	(variable,array_ref,temp),not_scalar
    007372  0a   006616 540230 
                                  5333  
                                  5334  	swap		arg1
    007373  aa   000000 040202 
                                  5335  	unless_optype	constant,invalid_opnd
    007374  0a   006614 200230 
                                  5336  "				Operands remain swapped.
                                  5337  	dt_jump1		arg2,(equal_hi,equal_hr,equal_hd,equal_hc,logical_op1,equal_hh,equal_ht)
    007375  aa   000007 100374 
    007376  00   007402 007402 
    007377  00   007406 007406 
    007400  00   006610 007364 
    007401  0a   007402 000000 
                        000007 
                                  5338  
    007402                        5339  equal_hi:
    007402                        5340  equal_hr:
    007402                        5341  equal_ht:
                                  5342  	pad_char_const_to_word	arg2
    007402  aa   000000 100375 
                                  5343  
                                  5344  	load_top		a
    007403  aa   000000 001257 
    007404  aa   040000 1150 00   5345  	cmpa		arg1
                                  5346  	return		tze
    007405  aa   000001 005617 
                                  5347  
    007406                        5348  equal_hd:
    007406                        5349  equal_hc:
                                  5350  	pad_char_const_to_dw	arg2
    007406  aa   000000 100376 
                                  5351  
                                  5352  	load_top		aq
    007407  aa   000000 001657 
    007410  aa   040000 1170 00   5353  	cmpaq		arg1
                                  5354  	return		tze
    007411  aa   000001 005617 
                                  5355  
    007412                        5356  equal_tl:
                                  5357  	unless_dt		(int,typeless),typeless_op1
    007412  0a   006620 404226 
                                  5358  	dt_jump1		op2,(equal_tl.1,typeless_op2,typeless_op2,typeless_op2,typeless_op2,typeless_op2,equal_tl.1)
    007413  aa   000007 700374 
    007414  00   007420 006622 
    007415  00   006622 006622 
    007416  00   006622 006622 
    007417  0a   007420 000000 
                        000007 
                                  5359  
    007420                        5360  equal_tl.1:
                                  5361  	load_top		tq
    007420  aa   000000 004657 
    007421  aa   040000 1160 00   5362  	cmpq		arg1
                                  5363  	return		tze
    007422  aa   000001 005617 
                                  5364  
                                  5365  
    007423                        5366  not_equal:
                                  5367  	func		2
    007423  aa   000000 001215 
                                  5368  
                                  5369  	use_ind
    007424  aa   000007 000206 
                                  5370  
                                  5371  	dt_jump		(not_equal_ii,not_equal_ri,not_equal_di,not_equal_ci,not_equal_ir,not_equal_rr,not_equal_dr,not_equal_cr,not_equal_id,not_equal_rd,not_equal_dd,not_equal_cd,not_equal_ic,not_equal_rc,not_equal_dc,not_equal_cc,not_equal_e2,not_equal_e1,not_equal_tl,not_equal_tl)
    007425  aa   000024 000235 
    007426  00   007440 007444 
    007427  00   007450 007475 
    007430  00   007443 007453 
    007431  00   007464 007501 
    007432  00   007447 007463 
    007433  00   007457 007506 
    007434  00   007473 007477 
    007435  00   007503 007511 
    007436  00   007514 007555 
    007437  00   007575 007575 
                        000024 
                                  5372  
    007440                        5373  not_equal_ii:
                                  5374  	load_top		q
    007440  aa   000000 000657 
    007441  aa   040000 1160 00   5375  	cmpq		arg1
                                  5376  	return		tnz
    007442  aa   000001 006217 
                                  5377  
    007443                        5378  not_equal_ir:
                                  5379  	swap		arg1
    007443  aa   000000 040202 
                                  5380  
    007444                        5381  not_equal_ri:
                                  5382  	s_call		cv_load.ir
    007444  0a   002050 000223 
    007445  aa   040000 5150 00   5383  	fcmp		arg1
                                  5384  	return		tnz
    007446  aa   000001 006217 
                                  5385  
    007447                        5386  not_equal_id:
                                  5387  	swap		arg1
    007447  aa   000000 040202 
                                  5388  
    007450                        5389  not_equal_di:
                                  5390  	s_call		cv_load.id
    007450  0a   002071 000223 
    007451  aa   040000 5170 00   5391  	dfcmp		arg1
                                  5392  	return		tnz
    007452  aa   000001 006217 
                                  5393  
    007453                        5394  not_equal_rr:
                                  5395  	load_top		eaq
    007453  aa   000000 002257 
                                  5396  	round		eaq
    007454  aa   000000 002354 
    007455  aa   040000 5150 00   5397  	fcmp		arg1
                                  5398  	return		tnz
    007456  aa   000001 006217 
                                  5399  
    007457                        5400  not_equal_dd:
                                  5401  	load_top		deaq
    007457  aa   000000 002657 
                                  5402  	round		deaq
    007460  aa   000000 002754 
    007461  aa   040000 5170 00   5403  	dfcmp		arg1
                                  5404  	return		tnz
    007462  aa   000001 006217 
                                  5405  
    007463                        5406  not_equal_rd:
                                  5407  	swap		arg1
    007463  aa   000000 040202 
                                  5408  
    007464                        5409  not_equal_dr:
                                  5410  	if_eaq		eaq,arg2,not_equal_dr.1
    007464  0a   007471 102233 
                                  5411  
                                  5412  	load		deaq,arg1
    007465  aa   000000 042656 
                                  5413  	round		deaq
    007466  aa   000000 002754 
    007467  aa   100000 5150 00   5414  	fcmp		arg2
                                  5415  	return		tnz
    007470  aa   000001 006217 
                                  5416  
    007471                        5417  not_equal_dr.1:
    007471  aa   040000 5170 00   5418  	dfcmp		arg1
                                  5419  	return		tnz
    007472  aa   000001 006217 
                                  5420  
    007473                        5421  not_equal_ic:
                                  5422  	error		323,arg2
    007473  aa   000503 000702 
    007474  aa   000000 100303 
                        000001 
                                  5423  
    007475                        5424  not_equal_ci:
                                  5425  	error		323,arg1
    007475  aa   000503 000702 
    007476  aa   000000 040303 
                        000001 
                                  5426  
    007477                        5427  not_equal_rc:
                                  5428  	error		323,arg2
    007477  aa   000503 000702 
    007500  aa   000000 100303 
                        000001 
                                  5429  
    007501                        5430  not_equal_cr:
                                  5431  	error		323,arg1
    007501  aa   000503 000702 
    007502  aa   000000 040303 
                        000001 
                                  5432  
    007503                        5433  not_equal_dc:
                                  5434  	error		312,arg1,arg2
    007503  aa   000470 001302 
    007504  aa   000000 040303 
    007505  aa   000000 100303 
                        000002 
                                  5435  
    007506                        5436  not_equal_cd:
                                  5437  	error		311,arg1,arg2
    007506  aa   000467 001302 
    007507  aa   000000 040303 
    007510  aa   000000 100303 
                        000002 
                                  5438  
    007511                        5439  not_equal_cc:
                                  5440  	load_top		aq
    007511  aa   000000 001657 
    007512  aa   040000 1170 00   5441  	cmpaq		arg1
                                  5442  	return		tnz
    007513  aa   000001 006217 
                                  5443  
    007514                        5444  not_equal_e2:
                                  5445  	if_dt		char,not_equal_ah
    007514  0a   007524 010225 
                                  5446  	swap		arg1	" top is logical, so swap and test other
    007515  aa   000000 040202 
                                  5447  
                                  5448  	if_dt		logical,not_equal_ll
    007516  0a   007521 020225 
                                  5449  	error		313,op1
    007517  aa   000471 000702 
    007520  aa   000000 740303 
                        000001 
                                  5450  
    007521                        5451  not_equal_ll:
                                  5452  	load_top		a
    007521  aa   000000 001257 
    007522  aa   040000 1150 00   5453  	cmpa		arg1
                                  5454  	return		tnz
    007523  aa   000001 006217 
                                  5455  
    007524                        5456  not_equal_ah:
                                  5457  	dt_jump1		arg1,(not_equal_ih,not_equal_rh,not_equal_dh,not_equal_ch,logical_op2,not_equal_hh,not_equal_th)
    007524  aa   000007 040374 
    007525  00   007531 007531 
    007526  00   007540 007540 
    007527  00   006612 007547 
    007530  0a   007531 000000 
                        000007 
                                  5458  
    007531                        5459  not_equal_ih:
    007531                        5460  not_equal_rh:
    007531                        5461  not_equal_th:
                                  5462  	unless_optype	constant,invalid_opnd
    007531  0a   006614 200230 
                                  5463  
                                  5464  	swap		arg1
    007532  aa   000000 040202 
                                  5465  	unless_optype	(variable,array_ref,temp),not_scalar
    007533  0a   006616 540230 
                                  5466  
                                  5467  	pad_char_const_to_word	arg1	" the two operands remain swapped
    007534  aa   000000 040375 
                                  5468  
                                  5469  	load_top		a
    007535  aa   000000 001257 
    007536  aa   040000 1150 00   5470  	cmpa		arg1
                                  5471  	return		tnz
    007537  aa   000001 006217 
                                  5472  
    007540                        5473  not_equal_dh:
    007540                        5474  not_equal_ch:
                                  5475  	unless_optype	constant,invalid_opnd
    007540  0a   006614 200230 
                                  5476  
                                  5477  	swap		arg1
    007541  aa   000000 040202 
                                  5478  	unless_optype	(variable,array_ref,temp),not_scalar
    007542  0a   006616 540230 
                                  5479  
                                  5480  	pad_char_const_to_dw	arg1	" the two operands remain swapped
    007543  aa   000000 040376 
                                  5481  
                                  5482  	load_top		aq
    007544  aa   000000 001657 
    007545  aa   040000 1170 00   5483  	cmpaq		arg1
                                  5484  	return		tnz
    007546  aa   000001 006217 
                                  5485  
    007547                        5486  not_equal_hh:
                                  5487  	use_eaq
    007547  aa   000000 000255 
                                  5488  
                                  5489  	emit_eis
    007550  aa   000000 000207 
    007551  aa  0 40100 1065 00   5490  	cmpc		(pr),(pr),fill(040)
    007552  aa   040000 000000    5491  	desc9a		arg1
    007553  aa   100000 000000    5492  	desc9a		arg2
                                  5493  
                                  5494  	return		tnz
    007554  aa   000001 006217 
                                  5495  
    007555                        5496  not_equal_e1:
                                  5497  	unless_optype	(variable,array_ref,temp),not_scalar
    007555  0a   006616 540230 
                                  5498  
                                  5499  	swap		arg1
    007556  aa   000000 040202 
                                  5500  	unless_optype	constant,invalid_opnd
    007557  0a   006614 200230 
                                  5501  "				Operands remain swapped.
                                  5502  	dt_jump1		arg2,(not_equal_hi,not_equal_hr,not_equal_hd,not_equal_hc,logical_op1,not_equal_hh,not_equal_ht)
    007560  aa   000007 100374 
    007561  00   007565 007565 
    007562  00   007571 007571 
    007563  00   006610 007547 
    007564  0a   007565 000000 
                        000007 
                                  5503  
    007565                        5504  not_equal_hi:
    007565                        5505  not_equal_hr:
    007565                        5506  not_equal_ht:
                                  5507  	pad_char_const_to_word	arg2
    007565  aa   000000 100375 
                                  5508  
                                  5509  	load_top		a
    007566  aa   000000 001257 
    007567  aa   040000 1150 00   5510  	cmpa		arg1
                                  5511  	return		tnz
    007570  aa   000001 006217 
                                  5512  
    007571                        5513  not_equal_hd:
    007571                        5514  not_equal_hc:
                                  5515  	pad_char_const_to_dw	arg2
    007571  aa   000000 100376 
                                  5516  
                                  5517  	load_top		aq
    007572  aa   000000 001657 
    007573  aa   040000 1170 00   5518  	cmpaq		arg1
                                  5519  	return		tnz
    007574  aa   000001 006217 
                                  5520  
                                  5521  
    007575                        5522  not_equal_tl:
                                  5523  	unless_dt		(int,typeless),typeless_op1
    007575  0a   006620 404226 
                                  5524  	dt_jump1		op2,(not_equal_tl.1,typeless_op2,typeless_op2,typeless_op2,typeless_op2,typeless_op2,not_equal_tl.1)
    007576  aa   000007 700374 
    007577  00   007603 006622 
    007600  00   006622 006622 
    007601  00   006622 006622 
    007602  0a   007603 000000 
                        000007 
                                  5525  
    007603                        5526  not_equal_tl.1:
                                  5527  	load_top		tq
    007603  aa   000000 004657 
    007604  aa   040000 1160 00   5528  	cmpq		arg1
                                  5529  	return		tnz
    007605  aa   000001 006217 
                                  5530  
    007606                        5531  greater_or_equal:
                                  5532  	func		2
    007606  aa   000000 001215 
                                  5533  
                                  5534  	use_ind
    007607  aa   000007 000206 
                                  5535  
                                  5536  	dt_jump		(greater_or_equal_ii,greater_or_equal_ri,greater_or_equal_di,greater_or_equal_ci,greater_or_equal_ir,greater_or_equal_rr,greater_or_equal_dr,greater_or_equal_cr,greater_or_equal_id,greater_or_equal_rd,greater_or_equal_dd,greater_or_equal_cd,greater_or_equal_ic,greater_or_equal_rc,greater_or_equal_dc,greater_or_equal_cc,greater_or_equal_e2,greater_or_equal_e1,greater_or_equal_tl,greater_or_equal_tl)
    007610  aa   000024 000235 
    007611  00   007623 007635 
    007612  00   007644 007707 
    007613  00   007631 007647 
    007614  00   007676 007713 
    007615  00   007640 007667 
    007616  00   007657 007720 
    007617  00   007705 007711 
    007620  00   007715 007723 
    007621  00   007726 007760 
    007622  00   010000 010000 
                        000024 
                                  5537  
    007623                        5538  greater_or_equal_ii:
                                  5539  	if_eaq		q,arg2,greater_or_equal_ii.1
    007623  0a   007627 100633 
                                  5540  
                                  5541  	load		q,arg1
    007624  aa   000000 040656 
    007625  aa   100000 1160 00   5542  	cmpq		arg2
                                  5543  	return		tpl
    007626  aa   000001 007217 
                                  5544  
    007627                        5545  greater_or_equal_ii.1:
    007627  aa   040000 1160 00   5546  	cmpq		arg1
                                  5547  	return		tmoz
    007630  aa   000001 007617 
                                  5548  
    007631                        5549  greater_or_equal_ir:
                                  5550  	swap		arg1
    007631  aa   000000 040202 
                                  5551  
                                  5552  	s_call		cv_load.ir
    007632  0a   002050 000223 
    007633  aa   040000 5150 00   5553  	fcmp		arg1
                                  5554  	return		tpl
    007634  aa   000001 007217 
                                  5555  
    007635                        5556  greater_or_equal_ri:
                                  5557  	s_call		cv_load.ir
    007635  0a   002050 000223 
    007636  aa   040000 5150 00   5558  	fcmp		arg1
                                  5559  	return		tmoz
    007637  aa   000001 007617 
                                  5560  
    007640                        5561  greater_or_equal_id:
                                  5562  	swap		arg1
    007640  aa   000000 040202 
                                  5563  
                                  5564  	s_call		cv_load.id
    007641  0a   002071 000223 
    007642  aa   040000 5170 00   5565  	dfcmp		arg1
                                  5566  	return		tpl
    007643  aa   000001 007217 
                                  5567  
    007644                        5568  greater_or_equal_di:
                                  5569  	s_call		cv_load.id
    007644  0a   002071 000223 
    007645  aa   040000 5170 00   5570  	dfcmp		arg1
                                  5571  	return		tmoz
    007646  aa   000001 007617 
                                  5572  
    007647                        5573  greater_or_equal_rr:
                                  5574  	if_eaq		eaq,arg2,greater_or_equal_rr.1
    007647  0a   007654 102233 
                                  5575  
                                  5576  	load		eaq,arg1
    007650  aa   000000 042256 
                                  5577  	round		eaq
    007651  aa   000000 002354 
    007652  aa   100000 5150 00   5578  	fcmp		arg2
                                  5579  	return		tpl
    007653  aa   000001 007217 
                                  5580  
    007654                        5581  greater_or_equal_rr.1:
                                  5582  	round		eaq
    007654  aa   000000 002354 
    007655  aa   040000 5150 00   5583  	fcmp		arg1
                                  5584  	return		tmoz
    007656  aa   000001 007617 
                                  5585  
    007657                        5586  greater_or_equal_dd:
                                  5587  	if_eaq		deaq,arg2,greater_or_equal_dd.1
    007657  0a   007664 102633 
                                  5588  
                                  5589  	load		deaq,arg1
    007660  aa   000000 042656 
                                  5590  	round		deaq
    007661  aa   000000 002754 
    007662  aa   100000 5170 00   5591  	dfcmp		arg2
                                  5592  	return		tpl
    007663  aa   000001 007217 
                                  5593  
    007664                        5594  greater_or_equal_dd.1:
                                  5595  	round		deaq
    007664  aa   000000 002754 
    007665  aa   040000 5170 00   5596  	dfcmp		arg1
                                  5597  	return		tmoz
    007666  aa   000001 007617 
                                  5598  
    007667                        5599  greater_or_equal_rd:
                                  5600  	if_eaq		deaq,arg2,greater_or_equal_rd.1
    007667  0a   007673 102633 
                                  5601  
                                  5602  	load		eaq,arg1
    007670  aa   000000 042256 
    007671  aa   100000 5170 00   5603  	dfcmp		arg2
                                  5604  	return		tpl
    007672  aa   000001 007217 
                                  5605  
    007673                        5606  greater_or_equal_rd.1:
                                  5607  	round		deaq
    007673  aa   000000 002754 
    007674  aa   040000 5150 00   5608  	fcmp		arg1
                                  5609  	return		tmoz
    007675  aa   000001 007617 
                                  5610  
    007676                        5611  greater_or_equal_dr:
                                  5612  	if_eaq		eaq,arg2,greater_or_equal_dr.1
    007676  0a   007703 102233 
                                  5613  
                                  5614  	load		deaq,arg1
    007677  aa   000000 042656 
                                  5615  	round		deaq
    007700  aa   000000 002754 
    007701  aa   100000 5150 00   5616  	fcmp		arg2
                                  5617  	return		tpl
    007702  aa   000001 007217 
                                  5618  
    007703                        5619  greater_or_equal_dr.1:
    007703  aa   040000 5170 00   5620  	dfcmp		arg1
                                  5621  	return		tmoz
    007704  aa   000001 007617 
                                  5622  
    007705                        5623  greater_or_equal_ic:
                                  5624  	error		323,arg2
    007705  aa   000503 000702 
    007706  aa   000000 100303 
                        000001 
                                  5625  
    007707                        5626  greater_or_equal_ci:
                                  5627  	error		323,arg1
    007707  aa   000503 000702 
    007710  aa   000000 040303 
                        000001 
                                  5628  
    007711                        5629  greater_or_equal_rc:
                                  5630  	error		323,arg2
    007711  aa   000503 000702 
    007712  aa   000000 100303 
                        000001 
                                  5631  
    007713                        5632  greater_or_equal_cr:
                                  5633  	error		323,arg1
    007713  aa   000503 000702 
    007714  aa   000000 040303 
                        000001 
                                  5634  
    007715                        5635  greater_or_equal_dc:
                                  5636  	error		312,arg1,arg2
    007715  aa   000470 001302 
    007716  aa   000000 040303 
    007717  aa   000000 100303 
                        000002 
                                  5637  
    007720                        5638  greater_or_equal_cd:
                                  5639  	error		311,arg1,arg2
    007720  aa   000467 001302 
    007721  aa   000000 040303 
    007722  aa   000000 100303 
                        000002 
                                  5640  
    007723                        5641  greater_or_equal_cc:
                                  5642  	error		328,arg1,arg2
    007723  aa   000510 001302 
    007724  aa   000000 040303 
    007725  aa   000000 100303 
                        000002 
                                  5643  
    007726                        5644  greater_or_equal_e2:
                                  5645  	if_dt		logical,logical_op1
    007726  0a   006610 020225 
                                  5646  	dt_jump1		arg1,(greater_or_equal_ih,greater_or_equal_rh,greater_or_equal_dh,greater_or_equal_ch,logical_op2,greater_or_equal_hh,greater_or_equal_th)
    007727  aa   000007 040374 
    007730  00   007734 007734 
    007731  00   007743 007743 
    007732  00   006612 007752 
    007733  0a   007734 000000 
                        000007 
                                  5647  
    007734                        5648  greater_or_equal_ih:
    007734                        5649  greater_or_equal_rh:
    007734                        5650  greater_or_equal_th:
                                  5651  	unless_optype	constant,invalid_opnd
    007734  0a   006614 200230 
                                  5652  
                                  5653  	swap		arg1
    007735  aa   000000 040202 
                                  5654  	unless_optype	(variable,array_ref,temp),not_scalar
    007736  0a   006616 540230 
                                  5655  
                                  5656  	pad_char_const_to_word	arg1	" the two operands remain swapped
    007737  aa   000000 040375 
                                  5657  
                                  5658  	load		a,arg2
    007740  aa   000000 101256 
    007741  aa   040000 1150 00   5659  	cmpa		arg1
                                  5660  	return		trc
    007742  aa   000001 011217 
                                  5661  
    007743                        5662  greater_or_equal_dh:
    007743                        5663  greater_or_equal_ch:
                                  5664  	unless_optype	constant,invalid_opnd
    007743  0a   006614 200230 
                                  5665  
                                  5666  	swap		arg1
    007744  aa   000000 040202 
                                  5667  	unless_optype	(variable,array_ref,temp),not_scalar
    007745  0a   006616 540230 
                                  5668  
                                  5669  	pad_char_const_to_dw	arg1	" the two operands remain swapped
    007746  aa   000000 040376 
                                  5670  
                                  5671  	load		aq,arg2
    007747  aa   000000 101656 
    007750  aa   040000 1170 00   5672  	cmpaq		arg1
                                  5673  	return		trc
    007751  aa   000001 011217 
                                  5674  
    007752                        5675  greater_or_equal_hh:
                                  5676  	use_eaq
    007752  aa   000000 000255 
                                  5677  
                                  5678  	emit_eis
    007753  aa   000000 000207 
    007754  aa  0 40100 1065 00   5679  	cmpc		(pr),(pr),fill(040)
    007755  aa   040000 000000    5680  	desc9a		arg1
    007756  aa   100000 000000    5681  	desc9a		arg2
                                  5682  
                                  5683  	return		trc
    007757  aa   000001 011217 
                                  5684  
    007760                        5685  greater_or_equal_e1:
                                  5686  	unless_optype	(variable,array_ref,temp),not_scalar
    007760  0a   006616 540230 
                                  5687  
                                  5688  	swap		arg1
    007761  aa   000000 040202 
                                  5689  	unless_optype	constant,invalid_opnd
    007762  0a   006614 200230 
                                  5690  "				Operands remain swapped.
                                  5691  	dt_jump1		arg2,(greater_or_equal_hi,greater_or_equal_hr,greater_or_equal_hd,greater_or_equal_hc,logical_op1,greater_or_equal_hh,greater_or_equal_ht)
    007763  aa   000007 100374 
    007764  00   007770 007770 
    007765  00   007774 007774 
    007766  00   006610 007752 
    007767  0a   007770 000000 
                        000007 
                                  5692  
    007770                        5693  greater_or_equal_hi:
    007770                        5694  greater_or_equal_hr:
    007770                        5695  greater_or_equal_ht:
                                  5696  	pad_char_const_to_word	arg2
    007770  aa   000000 100375 
                                  5697  
                                  5698  	load		a,arg2
    007771  aa   000000 101256 
    007772  aa   040000 1150 00   5699  	cmpa		arg1
                                  5700  	return		trc
    007773  aa   000001 011217 
                                  5701  
    007774                        5702  greater_or_equal_hd:
    007774                        5703  greater_or_equal_hc:
                                  5704  	pad_char_const_to_dw	arg2
    007774  aa   000000 100376 
                                  5705  
                                  5706  	load		aq,arg2
    007775  aa   000000 101656 
    007776  aa   040000 1170 00   5707  	cmpaq		arg1
                                  5708  	return		trc
    007777  aa   000001 011217 
                                  5709  
    010000                        5710  greater_or_equal_tl:
                                  5711  	unless_dt		(int,typeless),typeless_op1
    010000  0a   006620 404226 
                                  5712  	dt_jump1		op2,(greater_or_equal_tl.1,typeless_op2,typeless_op2,typeless_op2,typeless_op2,typeless_op2,greater_or_equal_tl.1)
    010001  aa   000007 700374 
    010002  00   010006 006622 
    010003  00   006622 006622 
    010004  00   006622 006622 
    010005  0a   010006 000000 
                        000007 
                                  5713  
    010006                        5714  greater_or_equal_tl.1:
                                  5715  	if_eaq		tq,arg2,greater_or_equal_tl.2
    010006  0a   010012 104633 
                                  5716  
                                  5717  	load		tq,arg1
    010007  aa   000000 044656 
    010010  aa   100000 1160 00   5718  	cmpq		arg2
                                  5719  	return		tpl
    010011  aa   000001 007217 
                                  5720  
    010012                        5721  greater_or_equal_tl.2:
    010012  aa   040000 1160 00   5722  	cmpq		arg1
                                  5723  	return		tmoz
    010013  aa   000001 007617 
                                  5724  
                                  5725  greater:	func		2
    010014  aa   000000 001215 
                                  5726  
                                  5727  	use_ind
    010015  aa   000007 000206 
                                  5728  
                                  5729  	dt_jump		(greater_ii,greater_ri,greater_di,greater_ci,greater_ir,greater_rr,greater_dr,greater_cr,greater_id,greater_rd,greater_dd,greater_cd,greater_ic,greater_rc,greater_dc,greater_cc,greater_e2,greater_e1,greater_tl,greater_tl)
    010016  aa   000024 000235 
    010017  00   010031 010043 
    010020  00   010052 010115 
    010021  00   010037 010055 
    010022  00   010104 010121 
    010023  00   010046 010075 
    010024  00   010065 010126 
    010025  00   010113 010117 
    010026  00   010123 010131 
    010027  00   010134 010166 
    010030  00   010206 010206 
                        000024 
                                  5730  
    010031                        5731  greater_ii:
                                  5732  	if_eaq		q,arg2,greater_ii.1
    010031  0a   010035 100633 
                                  5733  
                                  5734  	load		q,arg1
    010032  aa   000000 040656 
    010033  aa   100000 1160 00   5735  	cmpq		arg2
                                  5736  	return		tpnz
    010034  aa   000001 010217 
                                  5737  
    010035                        5738  greater_ii.1:
    010035  aa   040000 1160 00   5739  	cmpq		arg1
                                  5740  	return		tmi
    010036  aa   000001 006617 
                                  5741  
    010037                        5742  greater_ir:
                                  5743  	swap		arg1
    010037  aa   000000 040202 
                                  5744  
                                  5745  	s_call		cv_load.ir
    010040  0a   002050 000223 
    010041  aa   040000 5150 00   5746  	fcmp		arg1
                                  5747  	return		tpnz
    010042  aa   000001 010217 
                                  5748  
    010043                        5749  greater_ri:
                                  5750  	s_call		cv_load.ir
    010043  0a   002050 000223 
    010044  aa   040000 5150 00   5751  	fcmp		arg1
                                  5752  	return		tmi
    010045  aa   000001 006617 
                                  5753  
    010046                        5754  greater_id:
                                  5755  	swap		arg1
    010046  aa   000000 040202 
                                  5756  
                                  5757  	s_call		cv_load.id
    010047  0a   002071 000223 
    010050  aa   040000 5170 00   5758  	dfcmp		arg1
                                  5759  	return		tpnz
    010051  aa   000001 010217 
                                  5760  
    010052                        5761  greater_di:
                                  5762  	s_call		cv_load.id
    010052  0a   002071 000223 
    010053  aa   040000 5170 00   5763  	dfcmp		arg1
                                  5764  	return		tmi
    010054  aa   000001 006617 
                                  5765  
    010055                        5766  greater_rr:
                                  5767  	if_eaq		eaq,arg2,greater_rr.1
    010055  0a   010062 102233 
                                  5768  
                                  5769  	load		eaq,arg1
    010056  aa   000000 042256 
                                  5770  	round		eaq
    010057  aa   000000 002354 
    010060  aa   100000 5150 00   5771  	fcmp		arg2
                                  5772  	return		tpnz
    010061  aa   000001 010217 
                                  5773  
    010062                        5774  greater_rr.1:
                                  5775  	round		eaq
    010062  aa   000000 002354 
    010063  aa   040000 5150 00   5776  	fcmp		arg1
                                  5777  	return		tmi
    010064  aa   000001 006617 
                                  5778  
    010065                        5779  greater_dd:
                                  5780  	if_eaq		deaq,arg2,greater_dd.1
    010065  0a   010072 102633 
                                  5781  
                                  5782  	load		deaq,arg1
    010066  aa   000000 042656 
                                  5783  	round		deaq
    010067  aa   000000 002754 
    010070  aa   100000 5170 00   5784  	dfcmp		arg2
                                  5785  	return		tpnz
    010071  aa   000001 010217 
                                  5786  
    010072                        5787  greater_dd.1:
                                  5788  	round		deaq
    010072  aa   000000 002754 
    010073  aa   040000 5170 00   5789  	dfcmp		arg1
                                  5790  	return		tmi
    010074  aa   000001 006617 
                                  5791  
    010075                        5792  greater_rd:
                                  5793  	if_eaq		deaq,arg2,greater_rd.1
    010075  0a   010101 102633 
                                  5794  
                                  5795  	load		eaq,arg1
    010076  aa   000000 042256 
    010077  aa   100000 5170 00   5796  	dfcmp		arg2
                                  5797  	return		tpnz
    010100  aa   000001 010217 
                                  5798  
    010101                        5799  greater_rd.1:
                                  5800  	round		deaq
    010101  aa   000000 002754 
    010102  aa   040000 5150 00   5801  	fcmp		arg1
                                  5802  	return		tmi
    010103  aa   000001 006617 
                                  5803  
    010104                        5804  greater_dr:
                                  5805  	if_eaq		eaq,arg2,greater_dr.1
    010104  0a   010111 102233 
                                  5806  
                                  5807  	load		deaq,arg1
    010105  aa   000000 042656 
                                  5808  	round		deaq
    010106  aa   000000 002754 
    010107  aa   100000 5150 00   5809  	fcmp		arg2
                                  5810  	return		tpnz
    010110  aa   000001 010217 
                                  5811  
    010111                        5812  greater_dr.1:
    010111  aa   040000 5170 00   5813  	dfcmp		arg1
                                  5814  	return		tmi
    010112  aa   000001 006617 
                                  5815  
    010113                        5816  greater_ic:
                                  5817  	error		323,arg2
    010113  aa   000503 000702 
    010114  aa   000000 100303 
                        000001 
                                  5818  
    010115                        5819  greater_ci:
                                  5820  	error		323,arg1
    010115  aa   000503 000702 
    010116  aa   000000 040303 
                        000001 
                                  5821  
    010117                        5822  greater_rc:
                                  5823  	error		323,arg2
    010117  aa   000503 000702 
    010120  aa   000000 100303 
                        000001 
                                  5824  
    010121                        5825  greater_cr:
                                  5826  	error		323,arg1
    010121  aa   000503 000702 
    010122  aa   000000 040303 
                        000001 
                                  5827  
    010123                        5828  greater_dc:
                                  5829  	error		312,arg1,arg2
    010123  aa   000470 001302 
    010124  aa   000000 040303 
    010125  aa   000000 100303 
                        000002 
                                  5830  
    010126                        5831  greater_cd:
                                  5832  	error		311,arg1,arg2
    010126  aa   000467 001302 
    010127  aa   000000 040303 
    010130  aa   000000 100303 
                        000002 
                                  5833  
    010131                        5834  greater_cc:
                                  5835  	error		328,arg1,arg2
    010131  aa   000510 001302 
    010132  aa   000000 040303 
    010133  aa   000000 100303 
                        000002 
                                  5836  
    010134                        5837  greater_e2:
                                  5838  	if_dt		logical,logical_op1
    010134  0a   006610 020225 
                                  5839  	dt_jump1		arg1,(greater_ih,greater_rh,greater_dh,greater_ch,logical_op2,greater_hh,greater_th)
    010135  aa   000007 040374 
    010136  00   010142 010142 
    010137  00   010151 010151 
    010140  00   006612 010160 
    010141  0a   010142 000000 
                        000007 
                                  5840  
    010142                        5841  greater_ih:
    010142                        5842  greater_rh:
    010142                        5843  greater_th:
                                  5844  	unless_optype	constant,invalid_opnd
    010142  0a   006614 200230 
                                  5845  
                                  5846  	swap		arg1
    010143  aa   000000 040202 
                                  5847  	unless_optype	(variable,array_ref,temp),not_scalar
    010144  0a   006616 540230 
                                  5848  
                                  5849  	pad_char_const_to_word	arg1	" the two operands remain swapped
    010145  aa   000000 040375 
                                  5850  
                                  5851  	load		a,arg1
    010146  aa   000000 041256 
    010147  aa   100000 1150 00   5852  	cmpa		arg2
                                  5853  	return		tnc
    010150  aa   000001 010617 
                                  5854  
    010151                        5855  greater_dh:
    010151                        5856  greater_ch:
                                  5857  	unless_optype	constant,invalid_opnd
    010151  0a   006614 200230 
                                  5858  
                                  5859  	swap		arg1
    010152  aa   000000 040202 
                                  5860  	unless_optype	(variable,array_ref,temp),not_scalar
    010153  0a   006616 540230 
                                  5861  
                                  5862  	pad_char_const_to_dw	arg1	" the two operands remain swapped
    010154  aa   000000 040376 
                                  5863  
                                  5864  	load		aq,arg1
    010155  aa   000000 041656 
    010156  aa   100000 1170 00   5865  	cmpaq		arg2
                                  5866  	return		tnc
    010157  aa   000001 010617 
                                  5867  
    010160                        5868  greater_hh:
                                  5869  	use_eaq
    010160  aa   000000 000255 
                                  5870  
                                  5871  	emit_eis
    010161  aa   000000 000207 
    010162  aa  0 40100 1065 00   5872  	cmpc		(pr),(pr),fill(040)
    010163  aa   100000 000000    5873  	desc9a		arg2
    010164  aa   040000 000000    5874  	desc9a		arg1
                                  5875  
                                  5876  	return		tnc
    010165  aa   000001 010617 
                                  5877  
    010166                        5878  greater_e1:
                                  5879  	unless_optype	(variable,array_ref,temp),not_scalar
    010166  0a   006616 540230 
                                  5880  
                                  5881  	swap		arg1
    010167  aa   000000 040202 
                                  5882  	unless_optype	constant,invalid_opnd
    010170  0a   006614 200230 
                                  5883  "				Operands remain swapped.
                                  5884  	dt_jump1		arg2,(greater_hi,greater_hr,greater_hd,greater_hc,logical_op1,greater_hh,greater_ht)
    010171  aa   000007 100374 
    010172  00   010176 010176 
    010173  00   010202 010202 
    010174  00   006610 010160 
    010175  0a   010176 000000 
                        000007 
                                  5885  
    010176                        5886  greater_hi:
    010176                        5887  greater_hr:
    010176                        5888  greater_ht:
                                  5889  	pad_char_const_to_word	arg2
    010176  aa   000000 100375 
                                  5890  
                                  5891  	load		a,arg1
    010177  aa   000000 041256 
    010200  aa   100000 1150 00   5892  	cmpa		arg2
                                  5893  	return		tnc
    010201  aa   000001 010617 
                                  5894  
    010202                        5895  greater_hd:
    010202                        5896  greater_hc:
                                  5897  	pad_char_const_to_dw	arg2
    010202  aa   000000 100376 
                                  5898  
                                  5899  	load		aq,arg1
    010203  aa   000000 041656 
    010204  aa   100000 1170 00   5900  	cmpaq		arg2
                                  5901  	return		tnc
    010205  aa   000001 010617 
                                  5902  
    010206                        5903  greater_tl:
                                  5904  	unless_dt		(int,typeless),typeless_op1
    010206  0a   006620 404226 
                                  5905  	dt_jump1		op2,(greater_tl.1,typeless_op2,typeless_op2,typeless_op2,typeless_op2,typeless_op2,greater_tl.1)
    010207  aa   000007 700374 
    010210  00   010214 006622 
    010211  00   006622 006622 
    010212  00   006622 006622 
    010213  0a   010214 000000 
                        000007 
                                  5906  
    010214                        5907  greater_tl.1:
                                  5908  	if_eaq		tq,arg2,greater_tl.2
    010214  0a   010220 104633 
                                  5909  
                                  5910  	load		tq,arg1
    010215  aa   000000 044656 
    010216  aa   100000 1160 00   5911  	cmpq		arg2
                                  5912  	return		tpnz
    010217  aa   000001 010217 
                                  5913  
    010220                        5914  greater_tl.2:
    010220  aa   040000 1160 00   5915  	cmpq		arg1
                                  5916  	return		tmi
    010221  aa   000001 006617 
                                  5917  
                                  5918  or:	func		2
    010222  aa   000000 001215 
                                  5919  
                                  5920  	unless_dt		logical,or_e2
    010223  0a   010233 020226 
                                  5921  	swap		arg1
    010224  aa   000000 040202 
                                  5922  	unless_dt		logical,or_e1
    010225  0a   010231 020226 
                                  5923  
                                  5924  	load_top		a
    010226  aa   000000 001257 
    010227  aa   040000 2750 00   5925  	ora		arg1
                                  5926  	return		a
    010230  aa   000001 001217 
                                  5927  
    010231                        5928  or_e1:
                                  5929  	error		313,arg1
    010231  aa   000471 000702 
    010232  aa   000000 040303 
                        000001 
                                  5930  
    010233                        5931  or_e2:
                                  5932  	error		313,arg2
    010233  aa   000471 000702 
    010234  aa   000000 100303 
                        000001 
                                  5933  
                                  5934  and:	func		2
    010235  aa   000000 001215 
                                  5935  
                                  5936  	unless_dt		logical,and_e2
    010236  0a   010246 020226 
                                  5937  	swap		arg1
    010237  aa   000000 040202 
                                  5938  	unless_dt		logical,and_e1
    010240  0a   010244 020226 
                                  5939  
                                  5940  	load_top		a
    010241  aa   000000 001257 
    010242  aa   040000 3750 00   5941  	ana		arg1
                                  5942  	return		a
    010243  aa   000001 001217 
                                  5943  
    010244                        5944  and_e1:
                                  5945  	error		313,arg1
    010244  aa   000471 000702 
    010245  aa   000000 040303 
                        000001 
                                  5946  
    010246                        5947  and_e2:
                                  5948  	error		313,arg2
    010246  aa   000471 000702 
    010247  aa   000000 100303 
                        000001 
                                  5949  
                                  5950  not:	func		1		
    010250  aa   000000 000615 
                                  5951  
                                  5952  	unless_dt		logical,not.e
    010251  0a   010273 020226 
                                  5953  
                                  5954  	if_eaq		ind,op1,not_ind
    010252  0a   010256 745233 
                                  5955  
                                  5956  	load		a,op1
    010253  aa   000000 741256 
    010254  aa   400000 6750 03   5957  	era		=o400000,du
                                  5958  	return		a
    010255  aa   000001 001217 
                                  5959  
    010256                        5960  not_ind:
                                  5961  	ind_jump		(not_tze,not_tnz,not_tmi,not_tpl,not_tmoz,not_tpnz,not_tnc,not_trc)
    010256  aa   000010 000236 
    010257  00   010263 010264 
    010260  00   010265 010266 
    010261  00   010267 010270 
    010262  00   010271 010272 
                        000010 
                                  5962  
    010263                        5963  not_tze:
                                  5964  	return		tnz
    010263  aa   000001 006217 
                                  5965  
    010264                        5966  not_tnz:
                                  5967  	return		tze
    010264  aa   000001 005617 
                                  5968  
    010265                        5969  not_tmi:
                                  5970  	return		tpl
    010265  aa   000001 007217 
                                  5971  
    010266                        5972  not_tpl:
                                  5973  	return		tmi
    010266  aa   000001 006617 
                                  5974  
    010267                        5975  not_tmoz:
                                  5976  	return		tpnz
    010267  aa   000001 010217 
                                  5977  
    010270                        5978  not_tpnz:
                                  5979  	return		tmoz
    010270  aa   000001 007617 
                                  5980  
    010271                        5981  not_tnc:
                                  5982  	return		trc
    010271  aa   000001 011217 
                                  5983  
    010272                        5984  not_trc:
                                  5985  	return		tnc
    010272  aa   000001 010617 
                                  5986  
    010273                        5987  not.e:
                                  5988  	error		313,op1
    010273  aa   000471 000702 
    010274  aa   000000 740303 
                        000001 
                                  5989  
                                  5990  equiv:	func		2
    010275  aa   000000 001215 
                                  5991  
                                  5992  	unless_dt		logical,equiv.p
    010276  0a   010315 020226 
                                  5993  	swap		arg1
    010277  aa   000000 040202 
                                  5994  	unless_dt		logical,equiv.p
    010300  0a   010315 020226 
                                  5995  
                                  5996  	use_ind
    010301  aa   000007 000206 
                                  5997  
                                  5998  	load_top		a
    010302  aa   000000 001257 
    010303  aa   040000 1150 00   5999  	cmpa		arg1
                                  6000  	return		tze
    010304  aa   000001 005617 
                                  6001  
                                  6002  
    010305                        6003  not_equiv:
                                  6004  	func		2
    010305  aa   000000 001215 
                                  6005  
                                  6006  	unless_dt		logical,not_equiv.p
    010306  0a   010315 020226 
                                  6007  	swap		arg1
    010307  aa   000000 040202 
                                  6008  	unless_dt		logical,not_equiv.p
    010310  0a   010315 020226 
                                  6009  
                                  6010  	use_ind
    010311  aa   000007 000206 
                                  6011  
                                  6012  	load_top		a
    010312  aa   000000 001257 
    010313  aa   040000 1150 00   6013  	cmpa		arg1
                                  6014  	return		tnz
    010314  aa   000001 006217 
                                  6015  
                                  6016  
    010315                        6017  equiv.p:
    010315                        6018  not_equiv.p:
                                  6019  	error		313,op1
    010315  aa   000471 000702 
    010316  aa   000000 740303 
                        000001 
                                  6020  
                                  6021  jump:	proc		1
    010317  aa   000000 000614 
                                  6022  
                                  6023  
                                  6024  	shorten_stack
    010320  aa   000000 000272 
                                  6025  
    010321  aa   040000 7100 00   6026  	tra		arg1
                                  6027  	return
    010322  aa   000000 000217 
                                  6028  
    010323                        6029  jump_logical:
                                  6030  	proc		1
    010323  aa   000000 000614 
                                  6031  
                                  6032  	unless_dt		logical,jump_logical.p
    010324  0a   010362 020226 
                                  6033  
                                  6034  	shorten_stack	protect_indicators
    010325  aa   000001 000272 
                                  6035  
                                  6036  	push_label
    010326  aa   000001 000206 
                                  6037  
                                  6038  	if_eaq		ind,arg1,jump_logical_ind
    010327  0a   010335 045233 
                                  6039  
                                  6040  	load		a,arg1
    010330  aa   000000 041256 
                                  6041  
                                  6042  
                                  6043  	if_ind		a,emit_tze
    010331  0a   010333 001310 
                                  6044  
    010332  aa   000000 1150 07   6045  	cmpa		0,dl	" set the indicators
                                  6046  
    010333                        6047  emit_tze:
    010333  aa   740000 6000 00   6048  	tze		op1
                                  6049  	jump		jl_statement
    010334  0a   010367 000220 
                                  6050  
    010335                        6051  jump_logical_ind:
                                  6052  
                                  6053  
                                  6054  	ind_jump		(jump_logical_tze,jump_logical_tnz,jump_logical_tmi,jump_logical_tpl,jump_logical_tmoz,jump_logical_tpnz,jump_logical_tnc,jump_logical_trc)
    010335  aa   000010 000236 
    010336  00   010342 010344 
    010337  00   010346 010350 
    010340  00   010352 010354 
    010341  00   010356 010360 
                        000010 
                                  6055  
    010342                        6056  jump_logical_tze:
    010342  aa   740000 6010 00   6057  	tnz		op1
                                  6058  	jump		jl_statement
    010343  0a   010367 000220 
                                  6059  
    010344                        6060  jump_logical_tnz:
    010344  aa   740000 6000 00   6061  	tze		op1
                                  6062  	jump		jl_statement
    010345  0a   010367 000220 
                                  6063  
    010346                        6064  jump_logical_tmi:
    010346  aa   740000 6050 00   6065  	tpl		op1
                                  6066  	jump		jl_statement
    010347  0a   010367 000220 
                                  6067  
    010350                        6068  jump_logical_tpl:
    010350  aa   740000 6040 00   6069  	tmi		op1
                                  6070  	jump		jl_statement
    010351  0a   010367 000220 
                                  6071  
    010352                        6072  jump_logical_tmoz:
    010352  aa   740000 6054 00   6073  	tpnz		op1
                                  6074  	jump		jl_statement
    010353  0a   010367 000220 
                                  6075  
    010354                        6076  jump_logical_tpnz:
    010354  aa   740000 6044 00   6077  	tmoz		op1
                                  6078  	jump		jl_statement
    010355  0a   010367 000220 
                                  6079  
    010356                        6080  jump_logical_tnc:
    010356  aa   740000 6030 00   6081  	trc		op1
                                  6082  	jump		jl_statement
    010357  0a   010367 000220 
                                  6083  
    010360                        6084  jump_logical_trc:
    010360  aa   740000 6020 00   6085  	tnc		op1
                                  6086  	jump		jl_statement
    010361  0a   010367 000220 
                                  6087  
    010362                        6088  jump_logical.p:
                                  6089  	print		324,op1
    010362  aa   000504 000701 
    010363  aa   000000 740303 
                        000001 
                                  6090  	scan		continue,next
    010364                     
    010364  0a   010364 000221 
    010365  0a   010366 000220 
    010366                     
                                  6091  	return
    010366  aa   000000 000217 
                                  6092  
    010367                        6093  jl_statement:
                                  6094  	swap		arg1
    010367  aa   000000 040202 
                                  6095  	pop		op1
    010370  aa   000000 740203 
                                  6096  
                                  6097  	scan		continue,next
    010371                     
    010371  0a   010371 000221 
    010372  0a   010373 000220 
    010373                     
                                  6098  
                                  6099  	label		op1
    010373  aa   000000 740243 
                                  6100  	return
    010374  aa   000000 000217 
                                  6101  
    010375                        6102  jump_arithmetic:
                                  6103  	proc		4
    010375  aa   000000 002214 
                                  6104  
                                  6105  	swap		arg1
    010376  aa   000000 040202 
                                  6106  
                                  6107  	unless_dt		(int,real,dp),jump_arithmetic.e
    010377  0a   010517 700226 
                                  6108  
                                  6109  	shorten_stack
    010400  aa   000000 000272 
                                  6110  
                                  6111  	if_dt		int,jump_arithmetic_i
    010401  0a   010411 400225 
                                  6112  	if_dt		real,jump_arithmetic_r
    010402  0a   010422 200225 
                                  6113  	swap		arg1
    010403  aa   000000 040202 
                                  6114  
                                  6115  	unless_eaq	deaq,arg1,jump_arithmetic_r.1
    010404  0a   010430 042634 
                                  6116  
                                  6117  	if_ind		deaq,jump_arithmetic.01
    010405  0a   010434 002710 
                                  6118  
    010406  aa   400000 5150 03   6119  	fcmp		=0.,du
                                  6120  	in_reg		deaq,arg1
    010407  aa   000000 042660 
                                  6121  
                                  6122  	jump		jump_arithmetic.01
    010410  0a   010434 000220 
                                  6123  
    010411                        6124  jump_arithmetic_i:
                                  6125  	swap		arg1
    010411  aa   000000 040202 
                                  6126  	unless_eaq	q,arg1,jump_arithmetic_i.1
    010412  0a   010417 040634 
                                  6127  
                                  6128  	if_ind		q,jump_arithmetic.01
    010413  0a   010434 000710 
                                  6129  
    010414  aa   000000 1160 07   6130  	cmpq		0,dl
                                  6131  	in_reg		q,arg1
    010415  aa   000000 040660 
                                  6132  
                                  6133  	jump		jump_arithmetic.01
    010416  0a   010434 000220 
                                  6134  
    010417                        6135  jump_arithmetic_i.1:
                                  6136  	use_ind
    010417  aa   000007 000206 
    010420  aa   040000 2340 00   6137  	szn		arg1
                                  6138  	jump		jump_arithmetic.01
    010421  0a   010434 000220 
                                  6139  
    010422                        6140  jump_arithmetic_r:
                                  6141  	swap		arg1
    010422  aa   000000 040202 
                                  6142  
                                  6143  	unless_eaq	eaq,arg1,jump_arithmetic_r.1
    010423  0a   010430 042234 
                                  6144  
                                  6145  	if_ind		eaq,jump_arithmetic.01
    010424  0a   010434 002310 
                                  6146  
    010425  aa   400000 5150 03   6147  	fcmp		=0.,du
                                  6148  	in_reg		eaq,arg1
    010426  aa   000000 042260 
                                  6149  
                                  6150  	jump		jump_arithmetic.01
    010427  0a   010434 000220 
                                  6151  
    010430                        6152  jump_arithmetic_r.1:
                                  6153  	use_ind
    010430  aa   000007 000206 
                                  6154  	use_eaq			" so we dont have to invent use_eaq protect_indicators
    010431  aa   000000 000255 
    010432  aa   040000 4300 00   6155  	fszn		arg1
                                  6156  	jump		jump_arithmetic.01
    010433  0a   010434 000220 
                                  6157  
    010434                        6158  jump_arithmetic.01:
                                  6159  	swap		arg1
    010434  aa   000000 040202 
                                  6160  	pop		arg4
    010435  aa   000000 200203 
                                  6161  
                                  6162  
                                  6163  	swap		arg2
    010436  aa   000000 100202 
                                  6164  	swap		arg1
    010437  aa   000000 040202 
                                  6165  
                                  6166  	push_label
    010440  aa   000001 000206 
                                  6167  
                                  6168  	swap		arg3
    010441  aa   000000 140202 
                                  6169  	if_optype		rel_constant,ja3
    010442  0a   010446 010227 
                                  6170  
                                  6171  	copy		arg3
    010443  aa   000000 140201 
                                  6172  	swap		arg4
    010444  aa   000000 200202 
                                  6173  	pop		arg5
    010445  aa   000000 240203 
                                  6174  
    010446                        6175  ja3:
                                  6176  	swap		arg3
    010446  aa   000000 140202 
                                  6177  
                                  6178  	swap		arg2
    010447  aa   000000 100202 
                                  6179  	if_optype		rel_constant,ja2
    010450  0a   010454 010227 
                                  6180  
                                  6181  	copy		arg2
    010451  aa   000000 100201 
                                  6182  	swap		arg4
    010452  aa   000000 200202 
                                  6183  	pop		arg5
    010453  aa   000000 240203 
                                  6184  
    010454                        6185  ja2:
                                  6186  	swap		arg2
    010454  aa   000000 100202 
                                  6187  
                                  6188  	swap		arg1
    010455  aa   000000 040202 
                                  6189  	if_optype		rel_constant,ja1
    010456  0a   010462 010227 
                                  6190  
                                  6191  	copy		arg1
    010457  aa   000000 040201 
                                  6192  	swap		arg4
    010460  aa   000000 200202 
                                  6193  	pop		arg5
    010461  aa   000000 240203 
                                  6194  
    010462                        6195  ja1:
                                  6196  	swap		arg1
    010462  aa   000000 040202 
                                  6197  
                                  6198  	swap		arg3
    010463  aa   000000 140202 
                                  6199  
                                  6200  	if		arg1,=,op1,jump_arithmetic_13
    010464  0a   010505 051637 
                                  6201  	if		arg2,=,op1,jump_arithmetic_23
    010465  0a   010512 111637 
                                  6202  
                                  6203  	swap		arg1
    010466  aa   000000 040202 
                                  6204  
                                  6205  	if		arg2,=,op1,jump_arithmetic_12
    010467  0a   010477 111637 
                                  6206  
                                  6207  	swap		arg1
    010470  aa   000000 040202 
                                  6208  	swap		arg3
    010471  aa   000000 140202 
                                  6209  
    010472  aa   040000 6040 00   6210  	tmi		arg1
    010473  aa   100000 6000 00   6211  	tze		arg2
    010474  aa   140000 7100 00   6212  	tra		arg3
                                  6213  	label		op1
    010475  aa   000000 740243 
                                  6214  	return
    010476  aa   000000 000217 
                                  6215  
    010477                        6216  jump_arithmetic_12:
                                  6217  	swap		arg1
    010477  aa   000000 040202 
                                  6218  	swap		arg3
    010500  aa   000000 140202 
                                  6219  
    010501  aa   040000 6044 00   6220  	tmoz		arg1
    010502  aa   140000 7100 00   6221  	tra		arg3
                                  6222  	label		op1
    010503  aa   000000 740243 
                                  6223  	return
    010504  aa   000000 000217 
                                  6224  
    010505                        6225  jump_arithmetic_13:
                                  6226  	swap		arg3
    010505  aa   000000 140202 
                                  6227  
    010506  aa   040000 6010 00   6228  	tnz		arg1
    010507  aa   100000 7100 00   6229  	tra		arg2
                                  6230  	label		op1
    010510  aa   000000 740243 
                                  6231  	return
    010511  aa   000000 000217 
                                  6232  
    010512                        6233  jump_arithmetic_23:
                                  6234  	swap		arg3
    010512  aa   000000 140202 
                                  6235  
    010513  aa   100000 6050 00   6236  	tpl		arg2
    010514  aa   040000 7100 00   6237  	tra		arg1
                                  6238  	label		op1
    010515  aa   000000 740243 
                                  6239  	return
    010516  aa   000000 000217 
                                  6240  
    010517                        6241  jump_arithmetic.e:
                                  6242  	error		325,op1
    010517  aa   000505 000702 
    010520  aa   000000 740303 
                        000001 
                                  6243  
    010521                        6244  jump_computed:
                                  6245  	proc		1
    010521  aa   000000 000614 
                                  6246  
                                  6247  	if		arg1,<,1,jc_list.p
    010522  0a   010567 040637 
                                  6248  
                                  6249  	copy		arg1
    010523  aa   000000 040201 
                                  6250  
                                  6251  	push_label		"push fall_through label
    010524  aa   000001 000206 
                                  6252  
                                  6253  	scan		jc_error,(continue,next)
    010525                     
    010525  0a   010601 000221 
    010526  0a   010525 000220 
    010527  0a   010530 000220 
    010530                     
                                  6254  
                                  6255  	scan		continue,next
    010530                     
    010530  0a   010530 000221 
    010531  0a   010532 000220 
    010532                     
                                  6256  
                                  6257  	unless_dt		(int,real,dp,cmpx),jump_computed.p
    010532  0a   010576 740226 
                                  6258  
                                  6259  	shorten_stack
    010533  aa   000000 000272 
                                  6260  
                                  6261  	if_dt		int,jump_computed_i
    010534  0a   010540 400225 
                                  6262  	if_dt		real,jump_computed_r
    010535  0a   010542 200225 
                                  6263  	if_dt		dp,jump_computed_d
    010536  0a   010544 100225 
                                  6264  	jump		jump_computed_r
    010537  0a   010542 000220 
                                  6265  
    010540                        6266  jump_computed_i:
                                  6267  	load		q,op1
    010540  aa   000000 740656 
                                  6268  	jump		jc_transfer
    010541  0a   010546 000220 
                                  6269  
    010542                        6270  jump_computed_r:
                                  6271  	s_call		cv_load.ri
    010542  0a   002060 000223 
                                  6272  	jump		jc_transfer
    010543  0a   010546 000220 
                                  6273  
    010544                        6274  jump_computed_d:
                                  6275  	s_call		cv_load.di
    010544  0a   002101 000223 
                                  6276  	jump		jc_transfer
    010545  0a   010546 000220 
                                  6277  
    010546                        6278  jc_transfer:
                                  6279  	pop		op1
    010546  aa   000000 740203 
                                  6280  
                                  6281  
                                  6282  	if_ind		q,jc_tmoz
    010547  0a   010551 000710 
    010550  aa   000000 1160 07   6283  	cmpq		0,dl
                                  6284  
    010551                        6285  jc_tmoz:
    010551  aa   140000 6044 00   6286  	tmoz		arg3
    010552  aa   040000 1160 00   6287  	cmpq		arg1
    010553  aa   140000 6054 00   6288  	tpnz		arg3
                                  6289  
                                  6290  	push_label
    010554  aa   000001 000206 
    010555  aa   740000 0760 00   6291  	adq		op1
                                  6292  	label		op1
    010556  aa   000000 740243 
                                  6293  
    010557  aa   000000 7100 06   6294  	tra		0,ql
                                  6295  
                                  6296  	pop		op1
    010560  aa   000000 740203 
                                  6297  
    010561                        6298  jc_labels:
                                  6299  	copy		arg2
    010561  aa   000000 100201 
    010562  aa   000000 7100 00   6300  	tra		opv
                                  6301  	decrement		arg2,1
    010563  aa   000001 100264 
                                  6302  	if		arg2,^=,0,jc_labels
    010564  0a   010561 114237 
                                  6303  
    010565                        6304  jc_ret:
                                  6305  	label		arg3	this is fall_through label
    010565  aa   000000 140243 
                                  6306  	return
    010566  aa   000000 000217 
                                  6307  
    010567                        6308  jc_list.p:
                                  6309  	print		327
    010567  aa   000507 000301 
                        000000 
                                  6310  
                                  6311  	scan		continue,(continue,next)
    010570                     
    010570  0a   010570 000221 
    010571  0a   010570 000220 
    010572  0a   010573 000220 
    010573                     
                                  6312  	scan		continue,next
    010573                     
    010573  0a   010573 000221 
    010574  0a   010575 000220 
    010575                     
                                  6313  	jump		jc_ret
    010575  0a   010565 000220 
                                  6314  
    010576                        6315  jump_computed.p:
                                  6316  	print		326,arg1
    010576  aa   000506 000701 
    010577  aa   000000 040303 
                        000001 
                                  6317  	return
    010600  aa   000000 000217 
                                  6318  
    010601                        6319  jc_error:
                                  6320  	print		342,op1
    010601  aa   000526 000701 
    010602  aa   000000 740303 
                        000001 
                                  6321  
                                  6322  	scan		continue,(continue,next)
    010603                     
    010603  0a   010603 000221 
    010604  0a   010603 000220 
    010605  0a   010606 000220 
    010606                     
                                  6323  	scan		continue,next
    010606                     
    010606  0a   010606 000221 
    010607  0a   010610 000220 
    010610                     
                                  6324  	jump		jc_ret
    010610  0a   010565 000220 
                                  6325  
    010611                        6326  jump_assigned:
                                  6327  	proc		1
    010611  aa   000000 000614 
                                  6328  
                                  6329  	unless_dt		int,jump_assigned.e
    010612  0a   010623 400226 
                                  6330  
                                  6331  	unless_array	jump_assigned.1
    010613  0a   010616 000231 
                                  6332  
                                  6333  	print		300,op1
    010614  aa   000454 000701 
    010615  aa   000000 740303 
                        000001 
                                  6334  
    010616                        6335  jump_assigned.1:
                                  6336  	use_ind
    010616  aa   000007 000206 
                                  6337  	shorten_stack
    010617  aa   000000 000272 
                                  6338  
    010620  aa   040000 2200 00   6339  	ldx0		arg1
                                  6340  
    010621  aa   000000 7100 10   6341  	tra		0,0
                                  6342  	return
    010622  aa   000000 000217 
                                  6343  
    010623                        6344  jump_assigned.e:
                                  6345  	print		301,op1
    010623  aa   000455 000701 
    010624  aa   000000 740303 
                        000001 
                                  6346  	return
    010625  aa   000000 000217 
                                  6347  
    010626                        6348  assign_label:
                                  6349  	proc		2
    010626  aa   000000 001214 
                                  6350  
                                  6351  	unless_dt		int,assign_label.e
    010627  0a   010647 400226 
                                  6352  	unless_array	assign_label.1
    010630  0a   010633 000231 
                                  6353  
                                  6354  	print		300,op1
    010631  aa   000454 000701 
    010632  aa   000000 740303 
                        000001 
                                  6355  
    010633                        6356  assign_label.1:
                                  6357  	swap		arg1
    010633  aa   000000 040202 
                                  6358  	if_optype		rel_constant,assign_label.2
    010634  0a   010642 010227 
                                  6359  
                                  6360  	" The label is on a format statement.
                                  6361  
                                  6362  	load_pr		pr2,arg2
    010635  aa   000003 100251 
    010636  aa   040000 5420 00   6363  	sprp2		arg1
                                  6364  	flush_ref		arg1
    010637  aa   000000 040355 
                                  6365  	free_regs
    010640  aa   000004 000206 
                                  6366  	return
    010641  aa   000000 000217 
                                  6367  
                                  6368  	" The label is on an executable statement.
                                  6369  
    010642                        6370  assign_label.2:
                                  6371  	use_ind
    010642  aa   000007 000206 
    010643  aa   100000 6200 00   6372  	eax0		arg2
    010644  aa   040000 7400 00   6373  	stx0		arg1
                                  6374  	flush_ref		arg1
    010645  aa   000000 040355 
                                  6375  	return
    010646  aa   000000 000217 
                                  6376  
    010647                        6377  assign_label.e:
                                  6378  	print		301,op1
    010647  aa   000455 000701 
    010650  aa   000000 740303 
                        000001 
                                  6379  	return
    010651  aa   000000 000217 
                                  6380  
    010652                        6381  block_if:
                                  6382  	proc		2
    010652  aa   000000 001214 
                                  6383  
                                  6384  	swap		arg1
    010653  aa   000000 040202 
                                  6385  	unless_dt		logical,block_if.p
    010654  0a   010735 020226 
                                  6386  	swap		arg1
    010655  aa   000000 040202 
                                  6387  
                                  6388  	shorten_stack	protect_indicators
    010656  aa   000001 000272 
                                  6389  
                                  6390  	push_label
    010657  aa   000001 000206 
                                  6391  	push_label
    010660  aa   000001 000206 
                                  6392  
                                  6393  	" arg1: predicate
                                  6394  	" arg2: clause count
                                  6395  	" arg3: label for end of entire block IF
                                  6396  	" arg4: label for end of current clause
                                  6397  
                                  6398  	if_eaq		ind,arg1,block_if.ind
    010661  0a   010667 045233 
                                  6399  
                                  6400  	load		a,arg1
    010662  aa   000000 041256 
                                  6401  	if_ind		a,block_if.no_cmpa
    010663  0a   010665 001310 
    010664  aa   000000 1150 07   6402  	cmpa		0,dl
                                  6403  
    010665                        6404  block_if.no_cmpa:
    010665  aa   200000 6000 00   6405  	tze		arg4
                                  6406  	jump		block_if.pop_predicate
    010666  0a   010714 000220 
                                  6407  
    010667                        6408  block_if.ind:
                                  6409  	ind_jump		(block_if.tze,block_if.tnz,block_if.tmi,block_if.tpl,block_if.tmoz,block_if.tpnz,block_if.tnc,block_if.trc)
    010667  aa   000010 000236 
    010670  00   010674 010676 
    010671  00   010700 010702 
    010672  00   010704 010706 
    010673  00   010710 010712 
                        000010 
                                  6410  
    010674                        6411  block_if.tze:
    010674  aa   200000 6010 00   6412  	tnz		arg4
                                  6413  	jump		block_if.pop_predicate
    010675  0a   010714 000220 
                                  6414  
    010676                        6415  block_if.tnz:
    010676  aa   200000 6000 00   6416  	tze		arg4
                                  6417  	jump		block_if.pop_predicate
    010677  0a   010714 000220 
                                  6418  
    010700                        6419  block_if.tmi:
    010700  aa   200000 6050 00   6420  	tpl		arg4
                                  6421  	jump		block_if.pop_predicate
    010701  0a   010714 000220 
                                  6422  
    010702                        6423  block_if.tpl:
    010702  aa   200000 6040 00   6424  	tmi		arg4
                                  6425  	jump		block_if.pop_predicate
    010703  0a   010714 000220 
                                  6426  
    010704                        6427  block_if.tmoz:
    010704  aa   200000 6054 00   6428  	tpnz		arg4
                                  6429  	jump		block_if.pop_predicate
    010705  0a   010714 000220 
                                  6430  
    010706                        6431  block_if.tpnz:
    010706  aa   200000 6044 00   6432  	tmoz		arg4
                                  6433  	jump		block_if.pop_predicate
    010707  0a   010714 000220 
                                  6434  
    010710                        6435  block_if.tnc:
    010710  aa   200000 6030 00   6436  	trc		arg4
                                  6437  	jump		block_if.pop_predicate
    010711  0a   010714 000220 
                                  6438  
    010712                        6439  block_if.trc:
    010712  aa   200000 6020 00   6440  	tnc		arg4
                                  6441  	jump		block_if.pop_predicate
    010713  0a   010714 000220 
                                  6442  
    010714                        6443  block_if.pop_predicate:
                                  6444  
                                  6445  	" The predicate is no longer needed, so we can get rid of it now.
                                  6446  	" By doing this, we will avoid storing it.
                                  6447  
                                  6448  	swap		arg1
    010714  aa   000000 040202 
                                  6449  	pop		op1
    010715  aa   000000 740203 
                                  6450  	swap		arg1
    010716  aa   000000 040202 
                                  6451  
                                  6452  	" At this point, the stack format is
                                  6453  	" arg1: label for end of entire block IF
                                  6454  	" arg2: clause count
                                  6455  	" arg3: label for end of current clause
                                  6456  
    010717                        6457  block_if_loop:
                                  6458  	scan		continue,(next,block_if_end)
    010717                     
    010717  0a   010717 000221 
    010720  0a   010722 000220 
    010721  0a   010733 000220 
    010722                     
                                  6459  
                                  6460  	decrement		arg2,1
    010722  aa   000001 100264 
                                  6461  	if		arg2,=,0,block_if.no_tra
    010723  0a   010725 110237 
    010724  aa   040000 7100 00   6462  	tra		arg1
                                  6463  
    010725                        6464  block_if.no_tra:
                                  6465  	label		arg3		" Mark end of clause
    010725  aa   000000 140243 
                                  6466  
                                  6467  	if		arg2,=,0,block_if_loop
    010726  0a   010717 110237 
                                  6468  	pop		arg3
    010727  aa   000000 140203 
                                  6469  	push_label			" Get new end of clause lbl
    010730  aa   000001 000206 
                                  6470  
                                  6471  	" The new end of clause label is passed to the first operator in
                                  6472  	" the new clause, which will either be an ELSE_IF or ELSE operator.
                                  6473  
                                  6474  	copy		arg3
    010731  aa   000000 140201 
                                  6475  	jump		block_if_loop
    010732  0a   010717 000220 
                                  6476  
    010733                        6477  block_if_end:
                                  6478  	label		arg1		" Mark end of block IF
    010733  aa   000000 040243 
                                  6479  	return
    010734  aa   000000 000217 
                                  6480  
    010735                        6481  block_if.p:
                                  6482  	print		324,op1
    010735  aa   000504 000701 
    010736  aa   000000 740303 
                        000001 
                                  6483  	scan		continue,(continue,next)
    010737                     
    010737  0a   010737 000221 
    010740  0a   010737 000220 
    010741  0a   010742 000220 
    010742                     
                                  6484  	return
    010742  aa   000000 000217 
                                  6485  
    010743                        6486  else_if:
                                  6487  	proc		2
    010743  aa   000000 001214 
                                  6488  
                                  6489  	unless_dt		logical,else_if.p
    010744  0a   011001 020226 
                                  6490  
                                  6491  	shorten_stack	protect_indicators
    010745  aa   000001 000272 
                                  6492  
                                  6493  	" arg1: end of clause label
                                  6494  	" arg2: predicate
                                  6495  
                                  6496  	if_eaq		ind,arg2,else_if.ind
    010746  0a   010754 105233 
                                  6497  
                                  6498  	load		a,arg2
    010747  aa   000000 101256 
                                  6499  	if_ind		a,else_if.no_cmpa
    010750  0a   010752 001310 
    010751  aa   000000 1150 07   6500  	cmpa		0,dl
                                  6501  
    010752                        6502  else_if.no_cmpa:
    010752  aa   040000 6000 00   6503  	tze		arg1
                                  6504  	return
    010753  aa   000000 000217 
                                  6505  
    010754                        6506  else_if.ind:
                                  6507  	ind_jump		(else_if.tze,else_if.tnz,else_if.tmi,else_if.tpl,else_if.tmoz,else_if.tpnz,else_if.tnc,else_if.trc)
    010754  aa   000010 000236 
    010755  00   010761 010763 
    010756  00   010765 010767 
    010757  00   010771 010773 
    010760  00   010775 010777 
                        000010 
                                  6508  
    010761                        6509  else_if.tze:
    010761  aa   040000 6010 00   6510  	tnz		arg1
                                  6511  	return
    010762  aa   000000 000217 
                                  6512  
    010763                        6513  else_if.tnz:
    010763  aa   040000 6000 00   6514  	tze		arg1
                                  6515  	return
    010764  aa   000000 000217 
                                  6516  
    010765                        6517  else_if.tmi:
    010765  aa   040000 6050 00   6518  	tpl		arg1
                                  6519  	return
    010766  aa   000000 000217 
                                  6520  
    010767                        6521  else_if.tpl:
    010767  aa   040000 6040 00   6522  	tmi		arg1
                                  6523  	return
    010770  aa   000000 000217 
                                  6524  
    010771                        6525  else_if.tmoz:
    010771  aa   040000 6054 00   6526  	tpnz		arg1
                                  6527  	return
    010772  aa   000000 000217 
                                  6528  
    010773                        6529  else_if.tpnz:
    010773  aa   040000 6044 00   6530  	tmoz		arg1
                                  6531  	return
    010774  aa   000000 000217 
                                  6532  
    010775                        6533  else_if.tnc:
    010775  aa   040000 6030 00   6534  	trc		arg1
                                  6535  	return
    010776  aa   000000 000217 
                                  6536  
    010777                        6537  else_if.trc:
    010777  aa   040000 6020 00   6538  	tnc		arg1
                                  6539  	return
    011000  aa   000000 000217 
                                  6540  
    011001                        6541  else_if.p:
                                  6542  	error		324,op1
    011001  aa   000504 000702 
    011002  aa   000000 740303 
                        000001 
                                  6543  
    011003                        6544  else:
                                  6545  	proc		1
    011003  aa   000000 000614 
                                  6546  
                                  6547  	" arg1: end of clause label
                                  6548  
                                  6549  	" The else operator needn't do anything but pop the end of clause
                                  6550  	" label from the operand stack.
                                  6551  
                                  6552  	return
    011004  aa   000000 000217 
                                  6553  
                                  6554  read:	proc		2
    011005  aa   000000 001214 
                                  6555  
                                  6556  	swap		arg1
    011006  aa   000000 040202 
                                  6557  
                                  6558  	unless_dt		int,read.p
    011007  0a   011020 400226 
                                  6559  
                                  6560  	swap		arg1
    011010  aa   000000 040202 
                                  6561  	load		q,arg1
    011011  aa   000000 040656 
    011012  aa   100000 2350 00   6562  	lda		arg2
                                  6563  	reserve_regs	(x6,pr1,pr2,pr3,pr4,pr5,pr7)
    011013  aa   005760 000250 
    011014  aa  0 01246 7001 00   6564  	tsx0		pr0|ftn_read
                                  6565  	free_regs
    011015  aa   000004 000206 
                                  6566  	reset_eaq
    011016  aa   000006 000206 
                                  6567  	return
    011017  aa   000000 000217 
                                  6568  
    011020                        6569  read.p:
                                  6570  	print		302,op1
    011020  aa   000456 000701 
    011021  aa   000000 740303 
                        000001 
                                  6571  	return
    011022  aa   000000 000217 
                                  6572  
                                  6573  write:	proc		2
    011023  aa   000000 001214 
                                  6574  
                                  6575  	swap		arg1
    011024  aa   000000 040202 
                                  6576  
                                  6577  	unless_dt		int,write.p
    011025  0a   011036 400226 
                                  6578  
                                  6579  	swap		arg1
    011026  aa   000000 040202 
                                  6580  	load		q,arg1
    011027  aa   000000 040656 
    011030  aa   100000 2350 00   6581  	lda		arg2
                                  6582  	reserve_regs	(x6,pr1,pr2,pr3,pr4,pr5,pr7)
    011031  aa   005760 000250 
    011032  aa  0 01247 7001 00   6583  	tsx0		pr0|ftn_write
                                  6584  	free_regs
    011033  aa   000004 000206 
                                  6585  	reset_eaq
    011034  aa   000006 000206 
                                  6586  	return
    011035  aa   000000 000217 
                                  6587  
    011036                        6588  write.p:
                                  6589  	print		302,op1
    011036  aa   000456 000701 
    011037  aa   000000 740303 
                        000001 
                                  6590  	return
    011040  aa   000000 000217 
                                  6591  
                                  6592  format:	proc		1
    011041  aa   000000 000614 
                                  6593  
                                  6594  	if_dt		char,format_c
    011042  0a   011057 010225 
                                  6595  
                                  6596  	unless_dt		int,format.pp
    011043  0a   011053 400226 
                                  6597  
                                  6598  	if_array		format_c
    011044  0a   011057 000631 
                                  6599  
                                  6600  	" Must be an integer variable defined with a format value in an
                                  6601  	" ASSIGN statement.  The variable will contain a packed pointer
                                  6602  	" which locates the format string.
                                  6603  
                                  6604  	reserve_regs	pr2
    011045  aa   000200 000250 
    011046  aa   040000 7620 00   6605  	lprp2		arg1
                                  6606  	push_builtin	ps
    011047  aa   000002 000213 
    011050  aa   740006 2520 00   6607  	spri2		op1+format_slot
                                  6608  	free_regs
    011051  aa   000004 000206 
                                  6609  	return
    011052  aa   000000 000217 
                                  6610  
    011053                        6611  format.pp:
                                  6612  	error		329,arg1
    011053  aa   000511 000702 
    011054  aa   000000 040303 
                        000001 
                                  6613  
    011055                        6614  format.pv:
                                  6615  	error		358,arg1
    011055  aa   000546 000702 
    011056  aa   000000 040303 
                        000001 
                                  6616  
    011057                        6617  format_c:
                                  6618  	if_VLA		arg1,format.pv	" cannot be a Very Large Array
    011057  0a   011055 040730 
                                  6619  	load_pr		pr2,arg1
    011060  aa   000003 040251 
                                  6620  	push_builtin	ps
    011061  aa   000002 000213 
    011062  aa   740006 2520 00   6621  	spri2		op1+format_slot
                                  6622  	free_regs
    011063  aa   000004 000206 
                                  6623  	return
    011064  aa   000000 000217 
                                  6624  
                                  6625  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  6626  
    011065                        6627  end_label:
                                  6628  	proc		1
    011065  aa   000000 000614 
                                  6629  	load_pr		pr5,arg1
    011066  aa   000005 040251 
                                  6630  	push_builtin	ps
    011067  aa   000002 000213 
    011070  aa   740014 6514 00   6631  	spri5		op1+end_label_slot
                                  6632  	free_regs
    011071  aa   000004 000206 
                                  6633  	return
    011072  aa   000000 000217 
                                  6634  
                                  6635  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  6636  
    011073                        6637  error_label:
                                  6638  	proc		1
    011073  aa   000000 000614 
                                  6639  
                                  6640  	load_pr		pr5,arg1
    011074  aa   000005 040251 
                                  6641  	push_builtin	ps
    011075  aa   000002 000213 
    011076  aa   740012 6514 00   6642  	spri5		op1+error_label_slot
                                  6643  	free_regs
    011077  aa   000004 000206 
                                  6644  	return
    011100  aa   000000 000217 
                                  6645  
    011101                        6646  xmit_scalar:
                                  6647  	proc		1
    011101  aa   000000 000614 
                                  6648  
                                  6649  	use_eaq
    011102  aa   000000 000255 
                                  6650  
                                  6651  	load_pr		pr2,arg1
    011103  aa   000003 040251 
                                  6652  
                                  6653  	dt_jump1		op1,(xs_i,xs_r,xs_d,xs_c,xs_l,xs_h,xs_t)
    011104  aa   000007 740374 
    011105  00   011111 011113 
    011106  00   011115 011117 
    011107  00   011121 011123 
    011110  0a   011111 000000 
                        000007 
                                  6654  
    011111                        6655  xs_i:
    011111                        6656  xs_t:
    011111  aa   400000 2350 03   6657  	lda		=1b18,du		=o400000
                                  6658  	jump		xs_transfer
    011112  0a   011130 000220 
                                  6659  
    011113                        6660  xs_r:
    011113  aa   200000 2350 03   6661  	lda		=1b19,du		=o200000
                                  6662  	jump		xs_transfer
    011114  0a   011130 000220 
                                  6663  
    011115                        6664  xs_d:
    011115  aa   100000 2350 03   6665  	lda		=1b20,du		=o100000
                                  6666  	jump		xs_transfer
    011116  0a   011130 000220 
                                  6667  
    011117                        6668  xs_c:
    011117  aa   040000 2350 03   6669  	lda		=1b21,du		=o040000
                                  6670  	jump		xs_transfer
    011120  0a   011130 000220 
                                  6671  
    011121                        6672  xs_l:
    011121  aa   020000 2350 03   6673  	lda		=1b22,du		=o020000
                                  6674  	jump		xs_transfer
    011122  0a   011130 000220 
                                  6675  
    011123                        6676  xs_h:
                                  6677  	push_length	arg1
    011123  aa   000000 040304 
    011124  aa   740000 2350 00   6678  	lda		op1
                                  6679  	emit		1
    011125  aa   000001 000242 
    011126  aa   000004 7350 00   6680  	als		4
    011127  aa   010000 2750 03   6681  	ora		4096,du		=o010000
                                  6682  
    011130                        6683  xs_transfer:
                                  6684  	reserve_regs	(x6,pr1,pr3,pr4,pr5,pr7)
    011130  aa   005560 000250 
    011131  aa  0 01251 7001 00   6685  	tsx0		pr0|ftn_scalar_xmit
                                  6686  	free_regs
    011132  aa   000004 000206 
                                  6687  	reset_eaq
    011133  aa   000006 000206 
                                  6688  	return
    011134  aa   000000 000217 
                                  6689  
    011135                        6690  xmit_array:
                                  6691  	proc		1
    011135  aa   000000 000614 
                                  6692  
                                  6693  	use_eaq
    011136  aa   000000 000255 
                                  6694  
                                  6695  	load_pr		pr2,arg1
    011137  aa   000003 040251 
                                  6696  
                                  6697  	dt_jump1		op1,(xa_i,xa_r,xa_d,xa_c,xa_l,xa_h,xa_t)
    011140  aa   000007 740374 
    011141  00   011145 011152 
    011142  00   011157 011164 
    011143  00   011171 011176 
    011144  0a   011145 000000 
                        000007 
                                  6698  
    011145                        6699  xa_i:
    011145                        6700  xa_t:
                                  6701  	if_VLA		op1,xa_i_VLA
    011145  0a   011150 740730 
    011146  aa   404000 2350 03   6702  	lda		=65b24,du		=o404000
                                  6703  	jump		xa_transfer
    011147  0a   011203 000220 
                                  6704  
    011150                        6705  xa_i_VLA:
    011150  aa   406000 2350 03   6706  	lda		=o406000,du
                                  6707  	jump		xa_transfer
    011151  0a   011203 000220 
                                  6708  
    011152                        6709  xa_r:
                                  6710  	if_VLA		op1,xa_r_VLA
    011152  0a   011155 740730 
    011153  aa   204000 2350 03   6711  	lda		=33b24,du		=o204000
                                  6712  	jump		xa_transfer
    011154  0a   011203 000220 
                                  6713  
    011155                        6714  xa_r_VLA:
    011155  aa   206000 2350 03   6715  	lda		=o206000,du
                                  6716  	jump		xa_transfer
    011156  0a   011203 000220 
                                  6717  
    011157                        6718  xa_d:
                                  6719  	if_VLA		op1,xa_d_VLA
    011157  0a   011162 740730 
    011160  aa   104000 2350 03   6720  	lda		=17b24,du		=o104000
                                  6721  	jump		xa_transfer
    011161  0a   011203 000220 
                                  6722  
    011162                        6723  xa_d_VLA:
    011162  aa   106000 2350 03   6724  	lda		=o106000,du
                                  6725  	jump		xa_transfer
    011163  0a   011203 000220 
                                  6726  
    011164                        6727  xa_c:
                                  6728  	if_VLA		op1,xa_c_VLA
    011164  0a   011167 740730 
    011165  aa   044000 2350 03   6729  	lda		=9b24,du		=o044000
                                  6730  	jump		xa_transfer
    011166  0a   011203 000220 
                                  6731  
    011167                        6732  xa_c_VLA:
    011167  aa   046000 2350 03   6733  	lda		=o046000,du
                                  6734  	jump		xa_transfer
    011170  0a   011203 000220 
                                  6735  
    011171                        6736  xa_l:
                                  6737  	if_VLA		op1,xa_l_VLA
    011171  0a   011174 740730 
    011172  aa   024000 2350 03   6738  	lda		=5b24,du		=o024000
                                  6739  	jump		xa_transfer
    011173  0a   011203 000220 
                                  6740  
    011174                        6741  xa_l_VLA:
    011174  aa   026000 2350 03   6742  	lda		=o026000,du
                                  6743  	jump		xa_transfer
    011175  0a   011203 000220 
                                  6744  
    011176                        6745  xa_h:
                                  6746  	push_length	arg1
    011176  aa   000000 040304 
    011177  aa   740000 2350 00   6747  	lda		op1
                                  6748  	emit		1
    011200  aa   000001 000242 
    011201  aa   000004 7350 00   6749  	als		4
    011202  aa   014000 2750 03   6750  	ora		6144,du		=o014000
                                  6751  
    011203                        6752  xa_transfer:
                                  6753  	push_array_size	arg1
    011203  aa   000000 040300 
    011204  aa   740000 2360 00   6754  	ldq		op1
                                  6755  
                                  6756  	reserve_regs	(x6,pr1,pr3,pr4,pr5,pr7)
    011205  aa   005560 000250 
    011206  aa  0 01252 7001 00   6757  	tsx0		pr0|ftn_array_xmit
                                  6758  	free_regs
    011207  aa   000004 000206 
                                  6759  	reset_eaq
    011210  aa   000006 000206 
                                  6760  	return
    011211  aa   000000 000217 
                                  6761  
    011212                        6762  xmit_vector:
                                  6763  	proc		2
    011212  aa   000000 001214 
                                  6764  
                                  6765  	load_pr		pr2,arg1
    011213  aa   000003 040251 
                                  6766  	load		q,arg2		" collapsed implied loop provides the count
    011214  aa   000000 100656 
                                  6767  
                                  6768  	swap		arg1		"Note arguments remain swapped
    011215  aa   000000 040202 
                                  6769  
                                  6770  	dt_jump1		op1,(xv_i,xv_r,xv_d,xv_c,xv_l,xv_h,xv_t)
    011216  aa   000007 740374 
    011217  00   011223 011230 
    011220  00   011235 011242 
    011221  00   011247 011254 
    011222  0a   011223 000000 
                        000007 
                                  6771  
    011223                        6772  xv_i:
    011223                        6773  xv_t:
                                  6774  	if_VLA		op1,xv_i_VLA
    011223  0a   011226 740730 
    011224  aa   404000 2350 03   6775  	lda		=65b24,du		=o404000
                                  6776  	jump		xv_transfer
    011225  0a   011261 000220 
                                  6777  
    011226                        6778  xv_i_VLA:
    011226  aa   406000 2350 03   6779  	lda		=o406000,du
                                  6780  	jump		xv_transfer
    011227  0a   011261 000220 
                                  6781  
    011230                        6782  xv_r:
                                  6783  	if_VLA		op1,xv_r_VLA
    011230  0a   011233 740730 
    011231  aa   204000 2350 03   6784  	lda		=33b24,du		=o204000
                                  6785  	jump		xv_transfer
    011232  0a   011261 000220 
                                  6786  
    011233                        6787  xv_r_VLA:
    011233  aa   206000 2350 03   6788  	lda		=o206000,du
                                  6789  	jump		xv_transfer
    011234  0a   011261 000220 
                                  6790  
    011235                        6791  xv_d:
                                  6792  	if_VLA		op1,xv_d_VLA
    011235  0a   011240 740730 
    011236  aa   104000 2350 03   6793  	lda		=17b24,du		=o104000
                                  6794  	jump		xv_transfer
    011237  0a   011261 000220 
                                  6795  
    011240                        6796  xv_d_VLA:
    011240  aa   106000 2350 03   6797  	lda		=o106000,du
                                  6798  	jump		xv_transfer
    011241  0a   011261 000220 
                                  6799  
    011242                        6800  xv_c:
                                  6801  	if_VLA		op1,xv_c_VLA
    011242  0a   011245 740730 
    011243  aa   044000 2350 03   6802  	lda		=9b24,du		=o044000
                                  6803  	jump		xv_transfer
    011244  0a   011261 000220 
                                  6804  
    011245                        6805  xv_c_VLA:
    011245  aa   046000 2350 03   6806  	lda		=o046000,du
                                  6807  	jump		xv_transfer
    011246  0a   011261 000220 
                                  6808  
    011247                        6809  xv_l:
                                  6810  	if_VLA		op1,xv_l_VLA
    011247  0a   011252 740730 
    011250  aa   024000 2350 03   6811  	lda		=5b24,du		=o024000
                                  6812  	jump		xv_transfer
    011251  0a   011261 000220 
                                  6813  
    011252                        6814  xv_l_VLA:
    011252  aa   026000 2350 03   6815  	lda		=o026000,du
                                  6816  	jump		xv_transfer
    011253  0a   011261 000220 
                                  6817  
    011254                        6818  xv_h:
                                  6819  	push_length	arg2
    011254  aa   000000 100304 
    011255  aa   740000 2350 00   6820  	lda		op1
                                  6821  	emit		1
    011256  aa   000001 000242 
    011257  aa   000004 7350 00   6822  	als		4
    011260  aa   014000 2750 03   6823  	ora		6144,du		=o014000
                                  6824  
    011261                        6825  xv_transfer:
                                  6826  
                                  6827  	reserve_regs	(x6,pr1,pr3,pr4,pr5,pr7)
    011261  aa   005560 000250 
    011262  aa  0 01252 7001 00   6828  	tsx0		pr0|ftn_array_xmit
                                  6829  	free_regs
    011263  aa   000004 000206 
                                  6830  	reset_eaq
    011264  aa   000006 000206 
                                  6831  	return
    011265  aa   000000 000217 
                                  6832  
                                  6833  endfile:	proc		2
    011266  aa   000000 001214 
                                  6834  
                                  6835  	swap		arg1
    011267  aa   000000 040202 
                                  6836  	unless_dt		int,endfile.p
    011270  0a   011300 400226 
                                  6837  
                                  6838  	load		q,arg2
    011271  aa   000000 100656 
    011272  aa   040000 2350 00   6839  	lda		arg1
                                  6840  	reserve_regs	(x6,pr1,pr2,pr3,pr4,pr5,pr7)
    011273  aa   005760 000250 
    011274  aa  0 01250 7001 00   6841  	tsx0		pr0|ftn_manip
                                  6842  	free_regs
    011275  aa   000004 000206 
                                  6843  	reset_eaq
    011276  aa   000006 000206 
                                  6844  	return
    011277  aa   000000 000217 
                                  6845  
    011300                        6846  endfile.p:
                                  6847  	print		302,op1
    011300  aa   000456 000701 
    011301  aa   000000 740303 
                        000001 
                                  6848  	return
    011302  aa   000000 000217 
                                  6849  
                                  6850  rewind:	proc		2
    011303  aa   000000 001214 
                                  6851  
                                  6852  	swap		arg1
    011304  aa   000000 040202 
                                  6853  	unless_dt		int,rewind.p
    011305  0a   011315 400226 
                                  6854  
                                  6855  	load		q,arg2
    011306  aa   000000 100656 
    011307  aa   040000 2350 00   6856  	lda		arg1
                                  6857  	reserve_regs	(x6,pr1,pr2,pr3,pr4,pr5,pr7)
    011310  aa   005760 000250 
    011311  aa  0 01250 7001 00   6858  	tsx0		pr0|ftn_manip
                                  6859  	free_regs
    011312  aa   000004 000206 
                                  6860  	reset_eaq
    011313  aa   000006 000206 
                                  6861  	return
    011314  aa   000000 000217 
                                  6862  
    011315                        6863  rewind.p:
                                  6864  	print		302,op1
    011315  aa   000456 000701 
    011316  aa   000000 740303 
                        000001 
                                  6865  	return
    011317  aa   000000 000217 
                                  6866  
    011320                        6867  backspace:
                                  6868  	proc		2
    011320  aa   000000 001214 
                                  6869  
                                  6870  	swap		arg1
    011321  aa   000000 040202 
                                  6871  	unless_dt		int,backspace.p
    011322  0a   011332 400226 
                                  6872  
                                  6873  	load		q,arg2
    011323  aa   000000 100656 
    011324  aa   040000 2350 00   6874  	lda		arg1
                                  6875  	reserve_regs	(x6,pr1,pr2,pr3,pr4,pr5,pr7)
    011325  aa   005760 000250 
    011326  aa  0 01250 7001 00   6876  	tsx0		pr0|ftn_manip
                                  6877  	free_regs
    011327  aa   000004 000206 
                                  6878  	reset_eaq
    011330  aa   000006 000206 
                                  6879  	return
    011331  aa   000000 000217 
                                  6880  
    011332                        6881  backspace.p:
                                  6882  	print		302,op1
    011332  aa   000456 000701 
    011333  aa   000000 740303 
                        000001 
                                  6883  	return
    011334  aa   000000 000217 
                                  6884  
                                  6885  margin:	proc		2
    011335  aa   000000 001214 
                                  6886  
                                  6887  	unless_dt		int,margin2.p
    011336  0a   011357 400226 
                                  6888  	swap		arg1
    011337  aa   000000 040202 
                                  6889  	unless_dt		int,margin1.p
    011340  0a   011354 400226 
                                  6890  	swap		arg1
    011341  aa   000000 040202 
                                  6891  
                                  6892  	load		q,arg1
    011342  aa   000000 040656 
                                  6893  	push_builtin	ps
    011343  aa   000002 000213 
    011344  aa   100000 2350 00   6894  	lda		arg2
    011345  aa   740034 7550 00   6895  	sta		op1+margin_slot
    011346  aa   001400 2350 03   6896  	lda		=3b27,du		=o001400
                                  6897  	reserve_regs	(x6,pr1,pr2,pr3,pr4,pr5,pr7)
    011347  aa   005760 000250 
    011350  aa  0 01250 7001 00   6898  	tsx0		pr0|ftn_manip
                                  6899  	free_regs
    011351  aa   000004 000206 
                                  6900  	reset_eaq
    011352  aa   000006 000206 
                                  6901  	return
    011353  aa   000000 000217 
                                  6902  
    011354                        6903  margin1.p:
                                  6904  	print		302,op1
    011354  aa   000456 000701 
    011355  aa   000000 740303 
                        000001 
                                  6905  	return
    011356  aa   000000 000217 
                                  6906  
    011357                        6907  margin2.p:
                                  6908  	print		331,op1
    011357  aa   000513 000701 
    011360  aa   000000 740303 
                        000001 
                                  6909  	return
    011361  aa   000000 000217 
                                  6910  
                                  6911  openfile:	proc		3
    011362  aa   000000 001614 
                                  6912  
                                  6913  	swap		arg1
    011363  aa   000000 040202 
                                  6914  	unless_dt		int,openfile1.p
    011364  0a   011413 400226 
                                  6915  	swap		arg1
    011365  aa   000000 040202 
                                  6916  	swap		arg2
    011366  aa   000000 100202 
                                  6917  	unless_dt		char,openfile2.p
    011367  0a   011416 010226 
                                  6918  	if_array		openfile2.p
    011370  0a   011416 000631 
                                  6919  	swap		arg2
    011371  aa   000000 100202 
                                  6920  	unless_dt		char,openfile3.p
    011372  0a   011421 010226 
                                  6921  	if_array		openfile3.p
    011373  0a   011421 000631 
                                  6922  
                                  6923  	push_length	arg2
    011374  aa   000000 100304 
                                  6924  	push_builtin	ps
    011375  aa   000002 000213 
                                  6925  	load_pr		pr2,arg2
    011376  aa   000003 100251 
    011377  aa   740036 2520 00   6926  	spri2		op1+file_name_slot
                                  6927  	load_pr		pr2,arg3
    011400  aa   000003 140251 
    011401  aa   740040 2520 00   6928  	spri2		op1+file_type_slot
    011402  aa   700000 2350 00   6929  	lda		op2
    011403  aa   740025 7550 00   6930  	sta		op1+string_length_slot
    011404  aa   001200 2350 03   6931  	lda		=5b28,du		=o001200
                                  6932  	load		q,arg1
    011405  aa   000000 040656 
                                  6933  	reserve_regs	(x6,pr1,pr3,pr4,pr5,pr7)
    011406  aa   005560 000250 
    011407  aa  0 01250 7001 00   6934  	tsx0		pr0|ftn_manip
                                  6935  	free_regs
    011410  aa   000004 000206 
                                  6936  	reset_eaq
    011411  aa   000006 000206 
                                  6937  	return
    011412  aa   000000 000217 
                                  6938  
    011413                        6939  openfile1.p:
                                  6940  	print		302,op1
    011413  aa   000456 000701 
    011414  aa   000000 740303 
                        000001 
                                  6941  	return
    011415  aa   000000 000217 
                                  6942  
    011416                        6943  openfile2.p:
                                  6944  	print		332,op1
    011416  aa   000514 000701 
    011417  aa   000000 740303 
                        000001 
                                  6945  	return
    011420  aa   000000 000217 
                                  6946  
    011421                        6947  openfile3.p:
                                  6948  	print		333,op1
    011421  aa   000515 000701 
    011422  aa   000000 740303 
                        000001 
                                  6949  	return
    011423  aa   000000 000217 
                                  6950  
    011424                        6951  open:
    011424                        6952  close:
                                  6953  	proc		4
    011424  aa   000000 002214 
                                  6954  
                                  6955  "			arg1 - file number expre. must be integer
                                  6956  "			arg2 - job_bits const generated by compiler.
                                  6957  "			arg3 - open/close stmnt const generated by compiler.
                                  6958  "			arg4 - A count. Unused in macros.
                                  6959  
                                  6960  	use_eaq
    011425  aa   000000 000255 
                                  6961  	reserve_regs	(x6,pr1,pr2,pr3,pr4,pr5,pr7)
    011426  aa   005760 000250 
    011427  aa  0 01440 7001 00   6962  	tsx0		pr0|ftn_get_area_ptr	" returns ptr in PS.buffer_p
                                  6963  	free_regs
    011430  aa   000004 000206 
                                  6964  
                                  6965  "		Now add a new arg4. Swap existing arg4 with the builtin ps_area_ptr
                                  6966  
                                  6967  	pop		op1		" remove useless count
    011431  aa   000000 740203 
                                  6968  	push_builtin	ps_area_ptr	" area_ptr builtin becomes arg4
    011432  aa   000012 000213 
                                  6969  	push_count	0		" index value for bit-string
    011433  aa   000000 000266 
                                  6970  
                                  6971  
    011434  aa   140000 2350 00   6972  	lda		arg3	" fields-specified bit string
                                  6973  
                                  6974  "		Note - The first time this loop is entered, arg5 is op1.
                                  6975  
    011435                        6976  open_loop:
                                  6977  	load_pr_value	pr3,arg4			" reload pr3 if not already loaded
    011435  aa   000004 200360 
                                  6978  
    011436  aa   740000 6210 00   6979  	eax1		op1	" load value of index into xr1 for runtime code
                                  6980  
    011437  aa  0 01437 7001 00   6981  	tsx0		pr0|ftn_open_element
                                  6982  	reset_eaq
    011440  aa   000006 000206 
                                  6983  
    011441                        6984  open_loop.2:
                                  6985  	scan		open_loop.e,(next,open_return)
    011441                     
    011441  0a   011501 000221 
    011442  0a   011444 000220 
    011443  0a   011514 000220 
    011444                     
                                  6986  
                                  6987  "		Each successful scan adds two operands to the stack.
                                  6988  "		     op2 - A value. See individual field for specifics.
                                  6989  "		     op1 - A count. The index for the individual field.
                                  6990  "		This scan must be executed at least once to insure that existing error_label_op and
                                  6991  "		iostat_op are scanned before the code at label open_return is executed.
                                  6992  
                                  6993  	jump_indexed	op1,(opencase1,opencase2,opencase3,opencase4,opencase5,opencase6,opencase7,opencase8,opencase9,opencase10,opencase11,opencase12,opencase13,opencase14)
    011444  aa   000016 740241 
    011445  00   011454 011454 
    011446  00   011454 011454 
    011447  00   011454 011454 
    011450  00   011454 011463 
    011451  00   011470 011470 
    011452  00   011470 011470 
    011453  00   011454 011475 
                        000016 
                                  6994  
    011454                        6995  opencase1:		" status
    011454                        6996  opencase2:		" io switch
    011454                        6997  opencase3:		" attach
    011454                        6998  opencase4:		" file
    011454                        6999  opencase5:		" mode
    011454                        7000  opencase6:		" access
    011454                        7001  opencase7:		" form
    011454                        7002  opencase13:		" blank
                                  7003  	swap		op2			" check data type
    011454  aa   000000 700202 
                                  7004  	unless_dt		char,open_loop1.p
    011455  0a   011503 010226 
                                  7005  
                                  7006  	push_length	op1
    011456  aa   000000 740304 
                                  7007  	load_pr		pr2,op2			" point to string
    011457  aa   000003 700251 
                                  7008  	load		q,op1			" load string's length
    011460  aa   000000 740656 
                                  7009  	pop		op2			" pop back to count (index)
    011461  aa   000000 700203 
                                  7010  	jump		open_loop
    011462  0a   011435 000220 
                                  7011  
    011463                        7012  opencase8:		" recl
                                  7013  	swap		op2			" check data type
    011463  aa   000000 700202 
                                  7014  	unless_dt		int,open_loop2.p
    011464  0a   011506 400226 
                                  7015  
                                  7016  	load		q,op1			" load the value
    011465  aa   000000 740656 
                                  7017  	pop		op1			" pop back to count (index)
    011466  aa   000000 740203 
                                  7018  	jump		open_loop
    011467  0a   011435 000220 
                                  7019  
    011470                        7020  opencase9:		" binary
    011470                        7021  opencase10:		" prompt
    011470                        7022  opencase11:		" carriage
    011470                        7023  opencase12:		" defer
                                  7024  	swap		op2			" check data type
    011470  aa   000000 700202 
                                  7025  
                                  7026  	unless_dt		logical,open_loop3.p
    011471  0a   011511 020226 
                                  7027  
                                  7028  	load		a,op1
    011472  aa   000000 741256 
                                  7029  	pop		op1			" pop back to count (index)
    011473  aa   000000 740203 
                                  7030  	jump		open_loop
    011474  0a   011435 000220 
                                  7031  
    011475                        7032  opencase14:		" unit
                                  7033  	swap		op2			" get unit number
    011475  aa   000000 700202 
                                  7034  	swap		arg1			" save it
    011476  aa   000000 040202 
                                  7035  	pop		op2			" pop counts
    011477  aa   000000 700203 
                                  7036  	jump		open_loop.2		" no code generated now
    011500  0a   011441 000220 
                                  7037  
    011501                        7038  open_loop.e:
                                  7039  	print		349
    011501  aa   000535 000301 
                        000000 
                                  7040  	jump		abort_list
    011502  0a   000472 000220 
                                  7041  
    011503                        7042  open_loop1.p:
                                  7043  	print		351,op1
    011503  aa   000537 000701 
    011504  aa   000000 740303 
                        000001 
                                  7044  	jump		abort_list
    011505  0a   000472 000220 
                                  7045  
    011506                        7046  open_loop2.p:
                                  7047  	print		352,op1
    011506  aa   000540 000701 
    011507  aa   000000 740303 
                        000001 
                                  7048  	jump		abort_list
    011510  0a   000472 000220 
                                  7049  
    011511                        7050  open_loop3.p:
                                  7051  	print		353,op1
    011511  aa   000541 000701 
    011512  aa   000000 740303 
                        000001 
                                  7052  	jump		abort_list
    011513  0a   000472 000220 
                                  7053  
    011514                        7054  open_return:
                                  7055  	swap		arg1			" get file number expre.
    011514  aa   000000 040202 
                                  7056  	unless_dt		int,open.p		" must be integer
    011515  0a   011525 400226 
                                  7057  	load		q,op1
    011516  aa   000000 740656 
    011517  aa   100000 2350 00   7058  	lda		arg2
                                  7059  	reserve_regs	(x6,pr1,pr2,pr3,pr4,pr5,pr7)
    011520  aa   005760 000250 
    011521  aa  0 01250 7001 00   7060  	tsx0		pr0|ftn_manip
                                  7061  	free_regs
    011522  aa   000004 000206 
                                  7062  	reset_eaq
    011523  aa   000006 000206 
                                  7063  	return
    011524  aa   000000 000217 
                                  7064  
    011525                        7065  open.p:
                                  7066  	error		302,op1
    011525  aa   000456 000702 
    011526  aa   000000 740303 
                        000001 
                                  7067  
    011527                        7068  inquire:
                                  7069  	proc		3
    011527  aa   000000 001614 
                                  7070  
                                  7071  	" arg1 - job bits
                                  7072  	" arg2 - fields specified bit mask
                                  7073  	" arg3 - count (unused in macros)
                                  7074  
                                  7075  	" First get pointer to work area
                                  7076  
                                  7077  	use_eaq
    011530  aa   000000 000255 
                                  7078  	reserve_regs	(x6,pr1,pr2,pr3,pr4,pr5,pr7)
    011531  aa   005760 000250 
    011532  aa  0 01440 7001 00   7079  	tsx0		pr0|ftn_get_area_ptr
                                  7080  	free_regs
    011533  aa   000004 000206 
                                  7081  
                                  7082  	pop		op1		" Pop useless count
    011534  aa   000000 740203 
                                  7083  	push_builtin	ps_area_ptr	" This becomes arg3
    011535  aa   000012 000213 
                                  7084  
                                  7085  	" First pass thru loop is for fields specified mask
                                  7086  
                                  7087  	push_count	0		" Field index
    011536  aa   000000 000266 
    011537  aa   100000 2350 00   7088  	lda		arg2
                                  7089  
    011540                        7090  inquire_loop:
                                  7091  	load_pr_value	pr3,arg3		" Load pr3 if necessary
    011540  aa   000004 140360 
    011541  aa   740000 6210 00   7092  	eax1		op1		" Load field index
    011542  aa  0 01466 7001 00   7093  	tsx0		pr0|ftn_inquire_element
                                  7094  	reset_eaq
    011543  aa   000006 000206 
                                  7095  
                                  7096  	scan		inquire_loop.e,(next,inquire_return)
    011544                     
    011544  0a   011616 000221 
    011545  0a   011547 000220 
    011546  0a   011631 000220 
    011547                     
                                  7097  
                                  7098  	" Each successful scan pushes two operands onto the stack:
                                  7099  	"    op2 - A value (unit or filename) or reference (all others)
                                  7100  	"    op1 - A count (the field index)
                                  7101  
                                  7102  	jump_indexed	op1,(inquire_case_1,inquire_case_2,inquire_case_3,inquire_case_4,inquire_case_5,inquire_case_6,inquire_case_7,inquire_case_8,inquire_case_9,inquire_case_10,inquire_case_11,inquire_case_12,inquire_case_13,inquire_case_14,inquire_case_15,inquire_case_16,inquire_case_17,inquire_case_18,inquire_case_19,inquire_case_20,inquire_case_21,inquire_case_22,inquire_case_23,inquire_case_24,inquire_case_25,inquire_case_26)
    011547  aa   000032 740241 
    011550  00   011613 011613 
    011551  00   011613 011565 
    011552  00   011613 011565 
    011553  00   011565 011574 
    011554  00   011613 011613 
    011555  00   011613 011613 
    011556  00   011565 011601 
    011557  00   011613 011613 
    011560  00   011606 011606 
    011561  00   011574 011606 
    011562  00   011565 011565 
    011563  00   011565 011565 
    011564  00   011574 011565 
                        000032 
                                  7103  
                                  7104  
    011565                        7105  inquire_case_4:		" file
    011565                        7106  inquire_case_6:		" access
    011565                        7107  inquire_case_7:		" form
    011565                        7108  inquire_case_13:		" blank
    011565                        7109  inquire_case_21:		" name
    011565                        7110  inquire_case_22:		" sequential
    011565                        7111  inquire_case_23:		" formatted
    011565                        7112  inquire_case_24:		" unformatted
    011565                        7113  inquire_case_26:		" direct
                                  7114  
                                  7115  	" First check data type.
                                  7116  
                                  7117  	swap		op2
    011565  aa   000000 700202 
                                  7118  	unless_dt		char,inquire_loop.not_char
    011566  0a   011620 010226 
                                  7119  
                                  7120  	" Load pointer in pr2, and length in Q.
                                  7121  
                                  7122  	push_length	op1
    011567  aa   000000 740304 
                                  7123  	load_pr		pr2,op2
    011570  aa   000003 700251 
                                  7124  	load		q,op1
    011571  aa   000000 740656 
                                  7125  
                                  7126  	pop		op2		" Pop back to field index
    011572  aa   000000 700203 
                                  7127  	jump		inquire_loop
    011573  0a   011540 000220 
                                  7128  
                                  7129  
    011574                        7130  inquire_case_8:		" recl
    011574                        7131  inquire_case_19:		" number
    011574                        7132  inquire_case_25:		" nextrec
                                  7133  
                                  7134  	" First check data type.
                                  7135  
                                  7136  	swap		op2
    011574  aa   000000 700202 
                                  7137  	unless_dt		int,inquire_loop.not_int
    011575  0a   011623 400226 
                                  7138  
                                  7139  	" Load pr2 with pointer to integer.
                                  7140  
                                  7141  	load_pr		pr2,op1
    011576  aa   000003 740251 
                                  7142  
                                  7143  	pop		op1		" Pop back to field index
    011577  aa   000000 740203 
                                  7144  	jump		inquire_loop
    011600  0a   011540 000220 
                                  7145  
                                  7146  
    011601                        7147  inquire_case_14:		" unit
                                  7148  
                                  7149  	" First check data type.
                                  7150  
                                  7151  	swap		op2
    011601  aa   000000 700202 
                                  7152  	unless_dt		int,inquire_loop.not_int
    011602  0a   011623 400226 
                                  7153  
                                  7154  	" Load unit number in Q.
                                  7155  
                                  7156  	load		q,op1
    011603  aa   000000 740656 
                                  7157  
                                  7158  	pop		op1		" Pop back to field index
    011604  aa   000000 740203 
                                  7159  	jump		inquire_loop
    011605  0a   011540 000220 
                                  7160  
                                  7161  
    011606                        7162  inquire_case_17:		" exist
    011606                        7163  inquire_case_18:		" opened
    011606                        7164  inquire_case_20:		" named
                                  7165  
                                  7166  	" First check data type.
                                  7167  
                                  7168  	swap		op2
    011606  aa   000000 700202 
                                  7169  	unless_dt		logical,inquire_loop.not_logical
    011607  0a   011626 020226 
                                  7170  
                                  7171  	" Load pr2 with pointer to logical variable.
                                  7172  
                                  7173  	load_pr		pr2,op1
    011610  aa   000003 740251 
                                  7174  
                                  7175  	pop		op1		" Pop back to field index
    011611  aa   000000 740203 
                                  7176  	jump		inquire_loop
    011612  0a   011540 000220 
                                  7177  
                                  7178  
    011613                        7179  inquire_case_1:		" Invalid inquire fields
    011613                        7180  inquire_case_2:
    011613                        7181  inquire_case_3:
    011613                        7182  inquire_case_5:
    011613                        7183  inquire_case_9:
    011613                        7184  inquire_case_10:
    011613                        7185  inquire_case_11:
    011613                        7186  inquire_case_12:
    011613                        7187  inquire_case_15:
    011613                        7188  inquire_case_16:
                                  7189  	print		357,op1
    011613  aa   000545 000701 
    011614  aa   000000 740303 
                        000001 
                                  7190  	jump		abort_list
    011615  0a   000472 000220 
                                  7191  
                                  7192  
    011616                        7193  inquire_loop.e:
                                  7194  	print		356
    011616  aa   000544 000301 
                        000000 
                                  7195  	jump		abort_list
    011617  0a   000472 000220 
                                  7196  
    011620                        7197  inquire_loop.not_char:
                                  7198  	print		351,op1
    011620  aa   000537 000701 
    011621  aa   000000 740303 
                        000001 
                                  7199  	jump		abort_list
    011622  0a   000472 000220 
                                  7200  
    011623                        7201  inquire_loop.not_int:
                                  7202  	print		352,op1
    011623  aa   000540 000701 
    011624  aa   000000 740303 
                        000001 
                                  7203  	jump		abort_list
    011625  0a   000472 000220 
                                  7204  
    011626                        7205  inquire_loop.not_logical:
                                  7206  	print		353,op1
    011626  aa   000541 000701 
    011627  aa   000000 740303 
                        000001 
                                  7207  	jump		abort_list
    011630  0a   000472 000220 
                                  7208  
                                  7209  
    011631                        7210  inquire_return:
                                  7211  	push_count	0		" Dummy unit number
    011631  aa   000000 000266 
                                  7212  	load		q,op1		" Get unit in Q
    011632  aa   000000 740656 
    011633  aa   040000 2350 00   7213  	lda		arg1		" Get job bits in A
                                  7214  	reserve_regs	(x6,pr1,pr2,pr3,pr4,pr5,pr7)
    011634  aa   005760 000250 
    011635  aa  0 01250 7001 00   7215  	tsx0		pr0|ftn_manip
                                  7216  	free_regs
    011636  aa   000004 000206 
                                  7217  	reset_eaq
    011637  aa   000006 000206 
                                  7218  	return
    011640  aa   000000 000217 
                                  7219  
                                  7220  
    011641                        7221  closefile:
                                  7222  	proc		1
    011641  aa   000000 000614 
                                  7223  
                                  7224  	unless_dt		int,closefile.p
    011642  0a   011652 400226 
                                  7225  
                                  7226  	load		q,arg1
    011643  aa   000000 040656 
    011644  aa   000600 2350 03   7227  	lda		=3b28,du		=o000600
                                  7228  	reserve_regs	(x6,pr1,pr2,pr3,pr4,pr5,pr7)
    011645  aa   005760 000250 
    011646  aa  0 01250 7001 00   7229  	tsx0		pr0|ftn_manip
                                  7230  	free_regs
    011647  aa   000004 000206 
                                  7231  	reset_eaq
    011650  aa   000006 000206 
                                  7232  	return
    011651  aa   000000 000217 
                                  7233  
    011652                        7234  closefile.p:
                                  7235  	print		302,arg1
    011652  aa   000456 000701 
    011653  aa   000000 040303 
                        000001 
                                  7236  	return
    011654  aa   000000 000217 
                                  7237  
    011655                        7238  iostat:
                                  7239  	proc		1
    011655  aa   000000 000614 
                                  7240  
                                  7241  	unless_dt		int,iostat.p
    011656  0a   011664 400226 
                                  7242  
                                  7243  	push_builtin	ps
    011657  aa   000002 000213 
                                  7244  	load_pr		pr2,arg1
    011660  aa   000003 040251 
    011661  aa   740056 2520 00   7245  	spri2		op1+iostat_slot
                                  7246  	free_regs
    011662  aa   000004 000206 
                                  7247  
                                  7248  	return
    011663  aa   000000 000217 
                                  7249  
    011664                        7250  iostat.p:
                                  7251  	print		350,op1
    011664  aa   000536 000701 
    011665  aa   000000 740303 
                        000001 
                                  7252  	return
    011666  aa   000000 000217 
                                  7253  
    011667                        7254  record_number:
                                  7255  	proc		1
    011667  aa   000000 000614 
                                  7256  
                                  7257  	unless_dt		int,record_number.p
    011670  0a   011675 400226 
                                  7258  
                                  7259  	load		q,arg1
    011671  aa   000000 040656 
                                  7260  	push_builtin	ps
    011672  aa   000002 000213 
    011673  aa   740011 7560 00   7261  	stq		op1+record_number_slot
                                  7262  	return
    011674  aa   000000 000217 
                                  7263  
    011675                        7264  record_number.p:
                                  7265  	print		304,arg1
    011675  aa   000460 000701 
    011676  aa   000000 040303 
                        000001 
                                  7266  	return
    011677  aa   000000 000217 
                                  7267  
    011700                        7268  string:
                                  7269  	proc		1
    011700  aa   000000 000614 
                                  7270  
                                  7271  	unless_dt		logical,string_c
    011701  0a   011704 020226 
                                  7272  
                                  7273  	print		305,arg1
    011702  aa   000461 000701 
    011703  aa   000000 040303 
                        000001 
                                  7274  
    011704                        7275  string_c:
                                  7276  	load_pr		pr2,arg1
    011704  aa   000003 040251 
                                  7277  	push_builtin	ps
    011705  aa   000002 000213 
    011706  aa   740020 2520 00   7278  	spri2		op1+string_slot
                                  7279  	free_regs
    011707  aa   000004 000206 
                                  7280  	return
    011710  aa   000000 000217 
                                  7281  
    011711                        7282  string_length:
                                  7283  	proc		1
    011711  aa   000000 000614 
                                  7284  
                                  7285  	load		q,arg1
    011712  aa   000000 040656 
                                  7286  	push_builtin	ps
    011713  aa   000002 000213 
    011714  aa   740025 7560 00   7287  	stq		op1+string_length_slot
                                  7288  	return
    011715  aa   000000 000217 
                                  7289  
    011716                        7290  read_internal_file:
    011716                        7291  write_internal_file:
                                  7292  	proc		1
    011716  aa   000000 000614 
                                  7293  
                                  7294  	unless_dt		char,internal_file.p
    011717  0a   011740 010226 
                                  7295  
                                  7296  	push_builtin	ps
    011720  aa   000002 000213 
                                  7297  
                                  7298  	load_pr		pr2,arg1
    011721  aa   000003 040251 
    011722  aa   100020 2520 00   7299  	spri2		arg2+string_slot
                                  7300  
                                  7301  	push_length	arg1
    011723  aa   000000 040304 
                                  7302  	load		q,op1
    011724  aa   000000 740656 
    011725  aa   100025 7560 00   7303  	stq		arg2+string_length_slot
                                  7304  	pop		op1
    011726  aa   000000 740203 
                                  7305  
                                  7306  	swap		arg1
    011727  aa   000000 040202 
                                  7307  	if_array		internal_file.array
    011730  0a   011733 000631 
                                  7308  
    011731  aa   040033 4500 00   7309  	stz		arg1+buffer_size_slot
                                  7310  	jump		internal_file.ret
    011732  0a   011736 000220 
                                  7311  
    011733                        7312  internal_file.array:
                                  7313  	push_array_size	op1
    011733  aa   000000 740300 
                                  7314  	load		q,op1
    011734  aa   000000 740656 
    011735  aa   040033 7560 00   7315  	stq		arg1+buffer_size_slot
                                  7316  
    011736                        7317  internal_file.ret:
                                  7318  	free_regs
    011736  aa   000004 000206 
                                  7319  	return
    011737  aa   000000 000217 
                                  7320  
                                  7321  
    011740                        7322  internal_file.p:
                                  7323  	error		303
    011740  aa   000457 000302 
                        000000 
                                  7324  
                                  7325  
    011741                        7326  terminate:
                                  7327  	proc		0
    011741  aa   000000 000214 
                                  7328  
                                  7329  	reserve_regs	(x6,pr1,pr2,pr3,pr4,pr5,pr7)
    011742  aa   005760 000250 
    011743  aa  0 01253 7001 00   7330  	tsx0		pr0|ftn_terminate
                                  7331  	free_regs
    011744  aa   000004 000206 
                                  7332  	reset_eaq
    011745  aa   000006 000206 
                                  7333  	return
    011746  aa   000000 000217 
                                  7334  
                                  7335  sf_def:	proc		1
    011747  aa   000000 000614 
                                  7336  
                                  7337  	push_label
    011750  aa   000001 000206 
                                  7338  	s_func_label	arg1
    011751  aa   000000 040275 
                                  7339  	label		op1
    011752  aa   000000 740243 
                                  7340  
                                  7341  	push_temp		int
    011753  aa   000000 000604 
    011754  aa   140000 4400 00   7342  	sxl0		arg3
                                  7343  
                                  7344  	scan		sf_def.p,next
    011755                     
    011755  0a   012061 000221 
    011756  0a   011757 000220 
    011757                     
                                  7345  
                                  7346  	copy		arg1
    011757  aa   000000 040201 
                                  7347  
                                  7348  	dt_jump		(sf_def_ii,sf_def_ri,sf_def_di,sf_def_ci,sf_def_ir,sf_def_rr,sf_def_dr,sf_def_cr,sf_def_id,sf_def_rd,sf_def_dd,sf_def_cd,sf_def_ic,sf_def_rc,sf_def_dc,sf_def_cc,sf_def_e2,sf_def_e1,sf_def_e2,sf_def_e1)
    011760  aa   000024 000235 
    011761  00   011773 012000 
    011762  00   012006 012020 
    011763  00   011775 012023 
    011764  00   012025 012035 
    011765  00   012003 012023 
    011766  00   012025 012037 
    011767  00   012011 012032 
    011770  00   012027 012041 
    011771  00   012043 012050 
    011772  00   012043 012050 
                        000024 
                                  7349  
    011773                        7350  sf_def_ii:
                                  7351  	load		q,op2
    011773  aa   000000 700656 
                                  7352  	jump		sf_def_ret
    011774  0a   012053 000220 
                                  7353  
    011775                        7354  sf_def_ir:
                                  7355  	pop		op1
    011775  aa   000000 740203 
                                  7356  	s_call		cv_load.ir
    011776  0a   002050 000223 
                                  7357  	jump		sf_def_ret
    011777  0a   012053 000220 
                                  7358  
    012000                        7359  sf_def_ri:
                                  7360  	pop		op1
    012000  aa   000000 740203 
                                  7361  	s_call		cv_load.ri
    012001  0a   002060 000223 
                                  7362  	jump		sf_def_ret
    012002  0a   012053 000220 
                                  7363  
    012003                        7364  sf_def_id:
                                  7365  	pop		op1
    012003  aa   000000 740203 
                                  7366  	s_call		cv_load.id
    012004  0a   002071 000223 
                                  7367  	jump		sf_def_ret
    012005  0a   012053 000220 
                                  7368  
    012006                        7369  sf_def_di:
                                  7370  	pop		op1
    012006  aa   000000 740203 
                                  7371  	s_call		cv_load.di
    012007  0a   002101 000223 
                                  7372  	jump		sf_def_ret
    012010  0a   012053 000220 
                                  7373  
    012011                        7374  sf_def_ic:
                                  7375  	pop		op1
    012011  aa   000000 740203 
                                  7376  	s_call		cv_load.ir
    012012  0a   002050 000223 
                                  7377  	push_temp		real
    012013  aa   000000 001204 
                                  7378  	store		eaq,op1,no_update
    012014  aa   000001 742357 
                                  7379  	load		a,op1
    012015  aa   000000 741256 
    012016  aa   400000 2360 03   7380  	ldq		=0.,du
                                  7381  	jump		sf_def_ret
    012017  0a   012053 000220 
                                  7382  
    012020                        7383  sf_def_ci:
                                  7384  	pop		op1
    012020  aa   000000 740203 
                                  7385  	s_call		cv_load.ri
    012021  0a   002060 000223 
                                  7386  	jump		sf_def_ret
    012022  0a   012053 000220 
                                  7387  
    012023                        7388  sf_def_rd:
    012023                        7389  sf_def_rr:
                                  7390  	load		eaq,op2
    012023  aa   000000 702256 
                                  7391  	jump		sf_def_ret
    012024  0a   012053 000220 
                                  7392  
    012025                        7393  sf_def_dr:
    012025                        7394  sf_def_dd:
                                  7395  	load		deaq,op2
    012025  aa   000000 702656 
                                  7396  	jump		sf_def_ret
    012026  0a   012053 000220 
                                  7397  
    012027                        7398  sf_def_dc:
                                  7399  	swap		op2
    012027  aa   000000 700202 
                                  7400  	call		round_dp_to_real
    012030  0a   002112 000216 
                                  7401  	swap		op2
    012031  aa   000000 700202 
                                  7402  
    012032                        7403  sf_def_rc:
                                  7404  	load		a,op2
    012032  aa   000000 701256 
    012033  aa   400000 2360 03   7405  	ldq		=0.,du
                                  7406  	jump		sf_def_ret
    012034  0a   012053 000220 
                                  7407  
    012035                        7408  sf_def_cr:
                                  7409  	load		eaq,op2
    012035  aa   000000 702256 
                                  7410  	jump		sf_def_ret
    012036  0a   012053 000220 
                                  7411  
    012037                        7412  sf_def_cd:
                                  7413  	load		deaq,op2
    012037  aa   000000 702656 
                                  7414  	jump		sf_def_ret
    012040  0a   012053 000220 
                                  7415  
    012041                        7416  sf_def_cc:
                                  7417  	load		aq,op2
    012041  aa   000000 701656 
                                  7418  	jump		sf_def_ret
    012042  0a   012053 000220 
                                  7419  
    012043                        7420  sf_def_e2:
                                  7421  	unless_dt		logical,sf_def.p0
    012043  0a   012066 020226 
                                  7422  
                                  7423  	swap		op2
    012044  aa   000000 700202 
                                  7424  	unless_dt		logical,sf_def_e1
    012045  0a   012050 020226 
                                  7425  
                                  7426  	load		a,op1
    012046  aa   000000 741256 
                                  7427  	jump		sf_def_ret
    012047  0a   012053 000220 
                                  7428  
    012050                        7429  sf_def_e1:
                                  7430  	print		346,arg1
    012050  aa   000532 000701 
    012051  aa   000000 040303 
                        000001 
                                  7431  	return
    012052  aa   000000 000217 
                                  7432  
    012053                        7433  sf_def_ret:
                                  7434  	use_ind
    012053  aa   000007 000206 
                                  7435  
    012054  aa   140000 7200 00   7436  	lxl0		arg3
    012055  aa   000000 7100 10   7437  	tra		0,0
                                  7438  
                                  7439  	pop		arg1		" Force all temps to be freed, then s_func_finish makes them go away
    012056  aa   000000 040203 
                                  7440  
                                  7441  	s_func_finish
    012057  aa   000014 000206 
                                  7442  
                                  7443  	return
    012060  aa   000000 000217 
                                  7444  
    012061                        7445  sf_def.p:
                                  7446  	print		306,arg1
    012061  aa   000462 000701 
    012062  aa   000000 040303 
                        000001 
                                  7447  	scan		continue,next
    012063                     
    012063  0a   012063 000221 
    012064  0a   012065 000220 
    012065                     
                                  7448  	return
    012065  aa   000000 000217 
                                  7449  
    012066                        7450  sf_def.p0:
                                  7451  	print		347,arg1
    012066  aa   000533 000701 
    012067  aa   000000 040303 
                        000001 
                                  7452  	return
    012070  aa   000000 000217 
                                  7453  
                                  7454  sf:	func		2
    012071  aa   000000 001215 
                                  7455  
                                  7456  	if		arg2,=,0,sf_no_args
    012072  0a   012237 110237 
                                  7457  
                                  7458  	push_count	1
    012073  aa   000001 000266 
                                  7459  
    012074                        7460  sf_loop:
                                  7461  	push_s_func_var	arg1,sf_too_many.p
    012074  0a   012313 040277 
                                  7462  
                                  7463  	if		op2,=,1,sf_skip
    012075  0a   012101 710637 
                                  7464  
                                  7465  	swap		arg3
    012076  aa   000000 140202 
                                  7466  	swap		op2
    012077  aa   000000 700202 
                                  7467  	swap		arg3
    012100  aa   000000 140202 
                                  7468  
    012101                        7469  sf_skip:
                                  7470  	increment		arg3,1
    012101  aa   000001 140263 
                                  7471  
                                  7472  	scan		sf_error_r,next
    012102                     
    012102  0a   012304 000221 
    012103  0a   012104 000220 
    012104                     
                                  7473  
                                  7474  	dt_jump		(sf_ii,sf_ri,sf_di,sf_ci,sf_ir,sf_rr,sf_dr,sf_cr,sf_id,sf_rd,sf_dd,sf_cd,sf_ic,sf_rc,sf_dc,sf_cc,sf_e2,sf_e1,sf_e2,sf_e1)
    012104  aa   000024 000235 
    012105  00   012117 012125 
    012106  00   012133 012155 
    012107  00   012122 012136 
    012110  00   012147 012165 
    012111  00   012130 012144 
    012112  00   012141 012175 
    012113  00   012152 012162 
    012114  00   012172 012202 
    012115  00   012212 012206 
    012116  00   012212 012206 
                        000024 
                                  7475  
    012117                        7476  sf_ii:
                                  7477  	load		q,op1
    012117  aa   000000 740656 
    012120  aa   700000 7560 00   7478  	stq		op2
                                  7479  	jump		sf_r
    012121  0a   012235 000220 
                                  7480  
    012122                        7481  sf_ir:
                                  7482  	s_call		cv_load.ri
    012122  0a   002060 000223 
    012123  aa   700000 7560 00   7483  	stq		op2
                                  7484  	jump		sf_r
    012124  0a   012235 000220 
                                  7485  
    012125                        7486  sf_ri:
                                  7487  	s_call		cv_load.ir
    012125  0a   002050 000223 
                                  7488  	store		eaq,op2,no_update
    012126  aa   000001 702357 
                                  7489  	jump		sf_r
    012127  0a   012235 000220 
                                  7490  
    012130                        7491  sf_id:
                                  7492  	s_call		cv_load.di
    012130  0a   002101 000223 
    012131  aa   700000 7560 00   7493  	stq		op2
                                  7494  	jump		sf_r
    012132  0a   012235 000220 
                                  7495  
    012133                        7496  sf_di:
                                  7497  	s_call		cv_load.id
    012133  0a   002071 000223 
                                  7498  	store		deaq,op2,no_update
    012134  aa   000001 702757 
                                  7499  	jump		sf_r
    012135  0a   012235 000220 
                                  7500  
    012136                        7501  sf_rr:
                                  7502  	load		eaq,op1
    012136  aa   000000 742256 
                                  7503  	store		eaq,op2,no_update
    012137  aa   000001 702357 
                                  7504  	jump		sf_r
    012140  0a   012235 000220 
                                  7505  
    012141                        7506  sf_dd:
                                  7507  	load		deaq,op1
    012141  aa   000000 742656 
                                  7508  	store		deaq,op2,no_update
    012142  aa   000001 702757 
                                  7509  	jump		sf_r
    012143  0a   012235 000220 
                                  7510  
    012144                        7511  sf_rd:
                                  7512  	load		deaq,op1
    012144  aa   000000 742656 
    012145  aa   700000 4700 00   7513  	fstr		op2
                                  7514  	jump		sf_r
    012146  0a   012235 000220 
                                  7515  
    012147                        7516  sf_dr:
                                  7517  	load		eaq,op1
    012147  aa   000000 742256 
                                  7518  	store		deaq,op2,no_update
    012150  aa   000001 702757 
                                  7519  	jump		sf_r
    012151  0a   012235 000220 
                                  7520  
    012152                        7521  sf_ic:
                                  7522  	s_call		cv_load.ri
    012152  0a   002060 000223 
    012153  aa   700000 7560 00   7523  	stq		op2
                                  7524  	jump		sf_r
    012154  0a   012235 000220 
                                  7525  
    012155                        7526  sf_ci:
                                  7527  	s_call		cv_load.ir
    012155  0a   002050 000223 
                                  7528  	store		eaq,op2,no_update
    012156  aa   000001 702357 
    012157  aa   400000 4310 03   7529  	fld		=0.,du
    012160  aa   700001 4550 00   7530  	fst		op2+1
                                  7531  	jump		sf_r
    012161  0a   012235 000220 
                                  7532  
    012162                        7533  sf_rc:
                                  7534  	load		eaq,op1
    012162  aa   000000 742256 
                                  7535  	store		eaq,op2,no_update
    012163  aa   000001 702357 
                                  7536  	jump		sf_r
    012164  0a   012235 000220 
                                  7537  
    012165                        7538  sf_cr:
                                  7539  	load		eaq,op1
    012165  aa   000000 742256 
                                  7540  	store		eaq,op2,no_update
    012166  aa   000001 702357 
    012167  aa   400000 4310 03   7541  	fld		=0.,du
    012170  aa   700001 4550 00   7542  	fst		op2+1
                                  7543  	jump		sf_r
    012171  0a   012235 000220 
                                  7544  
    012172                        7545  sf_dc:
                                  7546  	load		eaq,op1
    012172  aa   000000 742256 
                                  7547  	store		deaq,op2,no_update
    012173  aa   000001 702757 
                                  7548  	jump		sf_r
    012174  0a   012235 000220 
                                  7549  
    012175                        7550  sf_cd:
                                  7551  	load		deaq,op1
    012175  aa   000000 742656 
                                  7552  	store		eaq,op2,no_update
    012176  aa   000001 702357 
    012177  aa   400000 4310 03   7553  	fld		=0.,du
    012200  aa   700001 4550 00   7554  	fst		op2+1
                                  7555  	jump		sf_r
    012201  0a   012235 000220 
                                  7556  
    012202                        7557  sf_cc:
                                  7558  	use_eaq
    012202  aa   000000 000255 
                                  7559  	load		aq,op1
    012203  aa   000000 741656 
    012204  aa   700000 7570 00   7560  	staq		op2
                                  7561  	jump		sf_r
    012205  0a   012235 000220 
                                  7562  
    012206                        7563  sf_e1:
                                  7564  	print		334,arg1,op2
    012206  aa   000516 001301 
    012207  aa   000000 040303 
    012210  aa   000000 700303 
                        000002 
                                  7565  	jump		sf_error_r
    012211  0a   012304 000220 
                                  7566  
    012212                        7567  sf_e2:
                                  7568  	if_dt		logical,sf_l
    012212  0a   012220 020225 
                                  7569  	if_dt		char,sf_h
    012213  0a   012226 010225 
                                  7570  
                                  7571  	print		334,arg1,op1
    012214  aa   000516 001301 
    012215  aa   000000 040303 
    012216  aa   000000 740303 
                        000002 
                                  7572  	jump		sf_error_r
    012217  0a   012304 000220 
                                  7573  
    012220                        7574  sf_l:
                                  7575  	swap		op2
    012220  aa   000000 700202 
                                  7576  	unless_dt		logical,sf_e1
    012221  0a   012206 020226 
                                  7577  
                                  7578  	swap		op2
    012222  aa   000000 700202 
                                  7579  
                                  7580  	load		a,op1
    012223  aa   000000 741256 
    012224  aa   700000 7550 00   7581  	sta		op2
                                  7582  	jump		sf_r
    012225  0a   012235 000220 
                                  7583  
    012226                        7584  sf_h:
                                  7585  	swap		op2
    012226  aa   000000 700202 
                                  7586  	unless_dt		char,sf_e1
    012227  0a   012206 010226 
                                  7587  
                                  7588  	emit_eis
    012230  aa   000000 000207 
                                  7589  
    012231  aa  0 40100 1005 00   7590  	mlr		(pr),(pr),fill(040)
    012232  aa   700000 000000    7591  	desc9a		op2
    012233  aa   740000 000000    7592  	desc9a		op1
                                  7593  	jump		sf_r
    012234  0a   012235 000220 
                                  7594  
    012235                        7595  sf_r:
                                  7596  	swap		arg3
    012235  aa   000000 140202 
                                  7597  	if		arg2,>=,op1,sf_loop
    012236  0a   012074 125637 
                                  7598  
    012237                        7599  sf_no_args:
                                  7600  	push_sf_arg_count	arg1
    012237  aa   000000 040262 
                                  7601  	if		arg2,<,op1,sf_insuf.p
    012240  0a   012310 101637 
                                  7602  
                                  7603  	push_s_func_label	arg1
    012241  aa   000000 040276 
                                  7604  
                                  7605  	use_eaq
    012242  aa   000000 000255 
                                  7606  	reserve_regs	all-pr4
    012243  aa   776760 000250 
    012244  aa   740000 7000 00   7607  	tsx0		op1
                                  7608  	free_regs
    012245  aa   000004 000206 
                                  7609  
                                  7610  	scan		continue,(continue,next)
    012246                     
    012246  0a   012246 000221 
    012247  0a   012246 000220 
    012250  0a   012251 000220 
    012251                     
                                  7611  
                                  7612  	dt_jump1		arg1,(sf_ret_i,sf_ret_r,sf_ret_d,sf_ret_c,sf_ret_l,sf_ret_h,sf_ret_t)
    012251  aa   000007 040374 
    012252  00   012256 012262 
    012253  00   012266 012272 
    012254  00   012276 012302 
    012255  0a   012256 000000 
                        000007 
                                  7613  
    012256                        7614  sf_ret_i:
    012256                        7615  sf_ret_t:
                                  7616  	push_temp		int
    012256  aa   000000 000604 
                                  7617  	in_reg		q,op1
    012257  aa   000000 740660 
                                  7618  	use_ind
    012260  aa   000007 000206 
                                  7619  	return		op1
    012261  aa   000001 740217 
                                  7620  
    012262                        7621  sf_ret_r:
                                  7622  	push_temp		real
    012262  aa   000000 001204 
                                  7623  	in_reg		eaq,op1
    012263  aa   000000 742260 
                                  7624  	use_ind
    012264  aa   000007 000206 
                                  7625  	return		op1
    012265  aa   000001 740217 
                                  7626  
    012266                        7627  sf_ret_d:
                                  7628  	push_temp		dp
    012266  aa   000000 001604 
                                  7629  	in_reg		deaq,op1
    012267  aa   000000 742660 
                                  7630  	use_ind
    012270  aa   000007 000206 
                                  7631  	return		op1
    012271  aa   000001 740217 
                                  7632  
    012272                        7633  sf_ret_c:
                                  7634  	push_temp		cmpx
    012272  aa   000000 002204 
                                  7635  	in_reg		aq,op1
    012273  aa   000000 741660 
                                  7636  	use_ind
    012274  aa   000007 000206 
                                  7637  	return		op1
    012275  aa   000001 740217 
                                  7638  
    012276                        7639  sf_ret_l:
                                  7640  	push_temp		logical
    012276  aa   000000 002604 
                                  7641  	in_reg		a,op1
    012277  aa   000000 741260 
                                  7642  	use_ind
    012300  aa   000007 000206 
                                  7643  	return		op1
    012301  aa   000001 740217 
                                  7644  
    012302                        7645  sf_ret_h:
                                  7646  	error		343,arg1
    012302  aa   000527 000702 
    012303  aa   000000 040303 
                        000001 
                                  7647  
    012304                        7648  sf_error_r:
                                  7649  	scan		continue,(continue,next)
    012304                     
    012304  0a   012304 000221 
    012305  0a   012304 000220 
    012306  0a   012307 000220 
    012307                     
                                  7650  
                                  7651  	error
    012307  aa   000000 000302 
                                  7652  
    012310                        7653  sf_insuf.p:
                                  7654  	print		307,arg1
    012310  aa   000463 000701 
    012311  aa   000000 040303 
                        000001 
                                  7655  	jump		sf_error_r
    012312  0a   012304 000220 
                                  7656  
    012313                        7657  sf_too_many.p:
                                  7658  	print		308,arg1
    012313  aa   000464 000701 
    012314  aa   000000 040303 
                        000001 
                                  7659  	jump		sf_error_r
    012315  0a   012304 000220 
                                  7660  
                                  7661  item:	proc		0
    012316  aa   000000 000214 
                                  7662  
                                  7663  	exit		1
    012317  aa   000001 000222 
                                  7664  	return
    012320  aa   000000 000217 
                                  7665  
                                  7666  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  7667  
                                  7668  exit:	proc		0
    012321  aa   000000 000214 
                                  7669  
                                  7670  	exit		1
    012322  aa   000001 000222 
                                  7671  	return
    012323  aa   000000 000217 
                                  7672  
                                  7673  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  7674  
                                  7675  eol:	proc		0
    012324  aa   000000 000214 
                                  7676  
                                  7677  	exit		2
    012325  aa   000002 000222 
                                  7678  	return
    012326  aa   000000 000217 
                                  7679  
                                  7680  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  7681  
                                  7682  return:	proc		0
    012327  aa   000000 000214 
                                  7683  
                                  7684  	unless_main	quick_return
    012330  0a   012333 000331 
                                  7685  
    012331  aa  0 01447 7101 00   7686  	tra	pr0|fortran_end
                                  7687  
                                  7688  	return
    012332  aa   000000 000217 
                                  7689  
    012333                        7690  quick_return:
                                  7691  	push_builtin entry_info
    012333  aa   000010 000213 
                                  7692  
    012334  aa   740000 6100 00   7693  	rtcd		op1
                                  7694  
                                  7695  	return
    012335  aa   000000 000217 
                                  7696  
                                  7697  pause:	proc		1
    012336  aa   000000 000614 
                                  7698  
                                  7699  	use_eaq
    012337  aa   000000 000255 
                                  7700  	push_length	arg1
    012340  aa   000000 040304 
                                  7701  	if		op1,=,0,short_pause
    012341  0a   012351 750237 
                                  7702  
                                  7703  	load_pr		pr2,arg1
    012342  aa   000003 040251 
    012343  aa   740000 2360 00   7704  	ldq		op1
                                  7705  
                                  7706  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    012344  aa   377560 000250 
                                  7707  
    012345                        7708  pause.1:
    012345  aa  0 01420 7001 00   7709  	tsx0		pr0|fortran_pause
                                  7710  	free_regs
    012346  aa   000004 000206 
                                  7711  	reset_eaq
    012347  aa   000006 000206 
                                  7712  	return
    012350  aa   000000 000217 
                                  7713  
    012351                        7714  short_pause:
    012351  aa   740000 2360 00   7715  	ldq		op1
                                  7716  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr2,pr3,pr4,pr5,pr7)
    012352  aa   377760 000250 
                                  7717  	jump		pause.1
    012353  0a   012345 000220 
                                  7718  
                                  7719  stop:	proc		1
    012354  aa   000000 000614 
                                  7720  
                                  7721  	use_eaq
    012355  aa   000000 000255 
                                  7722  	push_length	arg1
    012356  aa   000000 040304 
                                  7723  	if		op1,=,0,short_stop
    012357  0a   012367 750237 
                                  7724  
                                  7725  	load_pr		pr2,arg1
    012360  aa   000003 040251 
    012361  aa   740000 2360 00   7726  	ldq		op1
                                  7727  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr3,pr4,pr5,pr7)
    012362  aa   377560 000250 
                                  7728  
    012363                        7729  stop.1:
    012363  aa  0 01421 7001 00   7730  	tsx0		pr0|fortran_stop
                                  7731  	reset_regs
    012364  aa   000005 000206 
                                  7732  	reset_eaq
    012365  aa   000006 000206 
                                  7733  	return
    012366  aa   000000 000217 
                                  7734  
    012367                        7735  short_stop:
    012367  aa   740000 2360 00   7736  	ldq		op1
                                  7737  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr2,pr3,pr4,pr5,pr7)
    012370  aa   377760 000250 
                                  7738  	jump		stop.1
    012371  0a   012363 000220 
                                  7739  
    012372                        7740  subscript:
                                  7741  	func		2
    012372  aa   000000 001215 
                                  7742  
                                  7743  	start_subscript
    012373  aa   000010 000206 
                                  7744  
    012374                        7745  subscript_scan:
                                  7746  	scan		subscript_err,(next,subscript_end)
    012374                     
    012374  0a   012434 000221 
    012375  0a   012377 000220 
    012376  0a   012435 000220 
    012377                     
                                  7747  
                                  7748  	if_dt		int,process_subscript
    012377  0a   012427 400225 
                                  7749  	if_optype		constant,convert_subscript
    012400  0a   012425 200227 
                                  7750  	unless_dt		(real,dp,cmpx),subscript_dt_err
    012401  0a   012431 340226 
                                  7751  
                                  7752  	if_dt		dp,subscript_dp
    012402  0a   012414 100225 
                                  7753  	push_temp		int
    012403  aa   000000 000604 
                                  7754  	load		eaq,op2
    012404  aa   000000 702256 
                                  7755  	round		eaq
    012405  aa   000000 002354 
                                  7756  	use_eaq
    012406  aa   000000 000255 
    012407  aa  0 00654 7001 00   7757  	tsx0		pr0|real_to_integer
                                  7758  	in_reg		q,op1
    012410  aa   000000 740660 
                                  7759  	swap		op2
    012411  aa   000000 700202 
                                  7760  	pop		op1
    012412  aa   000000 740203 
                                  7761  	jump		process_subscript
    012413  0a   012427 000220 
                                  7762  
    012414                        7763  subscript_dp:
                                  7764  	push_temp		int
    012414  aa   000000 000604 
                                  7765  	load		deaq,op2
    012415  aa   000000 702656 
                                  7766  	round		deaq
    012416  aa   000000 002754 
                                  7767  	use_eaq
    012417  aa   000000 000255 
    012420  aa  0 00654 7001 00   7768  	tsx0		pr0|double_to_integer
                                  7769  	in_reg		q,op1
    012421  aa   000000 740660 
                                  7770  	swap		op2
    012422  aa   000000 700202 
                                  7771  	pop		op1
    012423  aa   000000 740203 
                                  7772  	jump		process_subscript
    012424  0a   012427 000220 
                                  7773  
    012425                        7774  convert_subscript:
                                  7775  	convert_constant	int
    012425  aa   000000 000611 
                                  7776  	jump		process_subscript
    012426  0a   012427 000220 
                                  7777  
    012427                        7778  process_subscript:
                                  7779  	next_subscript
    012427  aa   000011 000206 
                                  7780  	jump		subscript_scan
    012430  0a   012374 000220 
                                  7781  
    012431                        7782  subscript_dt_err:
                                  7783  	print		458,op1,arg1
    012431  aa   000712 001301 
    012432  aa   000000 740303 
    012433  aa   000000 040303 
                        000002 
                                  7784  
    012434                        7785  subscript_err:
                                  7786  	subscript_error
    012434  aa   000013 000206 
                                  7787  
    012435                        7788  subscript_end:
                                  7789  	finish_subscript
    012435  aa   000012 000206 
                                  7790  
                                  7791  	return		op1
    012436  aa   000001 740217 
                                  7792  
                                  7793  substr:	func	3
    012437  aa   000000 001615 
                                  7794  
                                  7795  	" arg1 - parent of substring reference
                                  7796  	" arg2 - index of first character in substring
                                  7797  	" arg3 - index of last character in substring
                                  7798  	" value returned is a filled-in array_ref node
                                  7799  
                                  7800  	" Make sure parent is of data type character
                                  7801  
                                  7802  	swap	arg1
    012440  aa   000000 040202 
                                  7803  	unless_dt	char,substr.not_char
    012441  0a   012451 010226 
                                  7804  	swap	arg1
    012442  aa   000000 040202 
                                  7805  
                                  7806  	" Coerce first index to integer
                                  7807  
                                  7808  	swap	arg2
    012443  aa   000000 100202 
                                  7809  	s_call	coerce_substr_exp
    012444  0a   012453 000223 
                                  7810  	swap	arg2
    012445  aa   000000 100202 
                                  7811  
                                  7812  	" Coerce last character index to integer
                                  7813  
                                  7814  	s_call	coerce_substr_exp
    012446  0a   012453 000223 
                                  7815  
                                  7816  	" Now build a substring reference and return it
                                  7817  
                                  7818  	make_substring
    012447  aa   000047 000206 
                                  7819  
                                  7820  	return	op1
    012450  aa   000001 740217 
                                  7821  
    012451                        7822  substr.not_char:
                                  7823  	error	159,op1
    012451  aa   000237 000702 
    012452  aa   000000 740303 
                        000001 
                                  7824  
                                  7825  
    012453                        7826  coerce_substr_exp:
                                  7827  
                                  7828  	if_dt	int,cse_return
    012453  0a   012506 400225 
                                  7829  
                                  7830  	if_optype	constant,cse_convert_constant
    012454  0a   012463 200227 
                                  7831  
                                  7832  	if_dt	(real,cmpx),cse_convert_real
    012455  0a   012465 240225 
                                  7833  
                                  7834  	if_dt	dp,cse_convert_dp
    012456  0a   012476 100225 
                                  7835  
                                  7836  	error	459,op1,arg1
    012457  aa   000713 001302 
    012460  aa   000000 740303 
    012461  aa   000000 040303 
                        000002 
                                  7837  
                                  7838  	s_return
    012462  aa   000003 000206 
                                  7839  
    012463                        7840  cse_convert_constant:
                                  7841  	convert_constant int
    012463  aa   000000 000611 
                                  7842  	s_return
    012464  aa   000003 000206 
                                  7843  
    012465                        7844  cse_convert_real:
                                  7845  	push_temp	int
    012465  aa   000000 000604 
                                  7846  	load	eaq,op2
    012466  aa   000000 702256 
                                  7847  	round	eaq
    012467  aa   000000 002354 
                                  7848  	use_eaq
    012470  aa   000000 000255 
    012471  aa  0 00654 7001 00   7849  	tsx0	pr0|real_to_integer
                                  7850  	in_reg	q,op1
    012472  aa   000000 740660 
                                  7851  	swap	op2
    012473  aa   000000 700202 
                                  7852  	pop	op1
    012474  aa   000000 740203 
                                  7853  	s_return
    012475  aa   000003 000206 
                                  7854  
    012476                        7855  cse_convert_dp:
                                  7856  	push_temp	int
    012476  aa   000000 000604 
                                  7857  	load	deaq,op2
    012477  aa   000000 702656 
                                  7858  	round	deaq
    012500  aa   000000 002754 
                                  7859  	use_eaq
    012501  aa   000000 000255 
    012502  aa  0 00654 7001 00   7860  	tsx0	pr0|double_to_integer
                                  7861  	in_reg	q,op1
    012503  aa   000000 740660 
                                  7862  	swap	op2
    012504  aa   000000 700202 
                                  7863  	pop	op1
    012505  aa   000000 740203 
                                  7864  
    012506                        7865  cse_return:
                                  7866  	s_return
    012506  aa   000003 000206 
                                  7867  
                                  7868  func_ref:	func		2
    012507  aa   000000 001215 
                                  7869  
                                  7870  	s_call		evaluate_arglist
    012510  0a   012743 000223 
                                  7871  
                                  7872  	dt_jump1		arg1,(int_func,real_func,dp_func,cmpx_func,logical_func,char_func,typeless_func)
    012511  aa   000007 040374 
    012512  00   012523 012525 
    012513  00   012527 012531 
    012514  00   012533 012516 
    012515  0a   012523 000000 
                        000007 
                                  7873  
    012516                        7874  char_func:
                                  7875  	push_length	arg1
    012516  aa   000000 040304 
                                  7876  	unless_optype	count,func_ref.star_extent
    012517  0a   012540 020230 
                                  7877  	push_char_temp	var
    012520  aa   777777 000320 
                                  7878  
                                  7879  	s_call		descriptor_check
    012521  0a   012715 000223 
                                  7880  
                                  7881  	jump		func_join
    012522  0a   012534 000220 
                                  7882  
    012523                        7883  int_func:
    012523                        7884  typeless_func:
                                  7885  	push_temp		int
    012523  aa   000000 000604 
                                  7886  	jump		func_join
    012524  0a   012534 000220 
                                  7887  
    012525                        7888  real_func:
                                  7889  	push_temp		real
    012525  aa   000000 001204 
                                  7890  	jump		func_join
    012526  0a   012534 000220 
                                  7891  
    012527                        7892  dp_func:
                                  7893  	push_temp		dp
    012527  aa   000000 001604 
                                  7894  	jump		func_join
    012530  0a   012534 000220 
                                  7895  
    012531                        7896  cmpx_func:
                                  7897  	push_temp		cmpx
    012531  aa   000000 002204 
                                  7898  	jump		func_join
    012532  0a   012534 000220 
                                  7899  
    012533                        7900  logical_func:
                                  7901  	push_temp		logical
    012533  aa   000000 002604 
                                  7902  
    012534                        7903  func_join:
                                  7904  	increment		arg2,1	function result becomes last arg
    012534  aa   000001 100263 
                                  7905  
                                  7906  	set_in_storage	op1	" return value is in storage on return from func
    012535  aa   000000 740362 
                                  7907  
                                  7908  	s_call		make_call
    012536  0a   013065 000223 
                                  7909  
                                  7910  	return		op2		arglist temp is now op1
    012537  aa   000001 700217 
                                  7911  
    012540                        7912  func_ref.star_extent:
                                  7913  	error		355,arg1
    012540  aa   000543 000702 
    012541  aa   000000 040303 
                        000001 
                                  7914  
                                  7915  main:	proc		2
    012542  aa   000000 001214 
                                  7916  
                                  7917  	emit_entry_defs
    012543  aa   000070 000206 
                                  7918  	emit		1
    012544  aa   000001 000242 
    012545  aa   000000 300000    7919  	oct		000000300000	" revision_1, entry_defs
                                  7920  	s_call		make_entry
    012546  0a   012573 000223 
                                  7921  	s_call		prepare_for_namelists
    012547  0a   012641 000223 
                                  7922  	return
    012550  aa   000000 000217 
                                  7923  
                                  7924  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  7925  
                                  7926  subr:	proc		2
    012551  aa   000000 001214 
                                  7927  
                                  7928  	emit_entry_defs
    012552  aa   000070 000206 
                                  7929  	emit		1
    012553  aa   000001 000242 
    012554  aa   000000 300000    7930  	oct		000000300000	" revision_1, entry_defs
                                  7931  	s_call		make_entry
    012555  0a   012573 000223 
                                  7932  	s_call		make_quick_entry
    012556  0a   012666 000223 
                                  7933  	s_call		prepare_for_namelists
    012557  0a   012641 000223 
                                  7934  	return
    012560  aa   000000 000217 
                                  7935  
                                  7936  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  7937  
                                  7938  func:	proc		2
    012561  aa   000000 001214 
                                  7939  
                                  7940  	emit_entry_defs
    012562  aa   000070 000206 
                                  7941  	emit		1
    012563  aa   000001 000242 
    012564  aa   000000 320000    7942  	oct		000000320000	" revision_1, entry_defs, func
                                  7943  	s_call		make_entry
    012565  0a   012573 000223 
                                  7944  	s_call		make_quick_entry
    012566  0a   012666 000223 
                                  7945  	s_call		prepare_for_namelists
    012567  0a   012641 000223 
                                  7946  	return
    012570  aa   000000 000217 
                                  7947  
                                  7948  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  7949  
    012571                        7950  block_data:
                                  7951  	proc		0
    012571  aa   000000 000214 
                                  7952  
                                  7953  	return
    012572  aa   000000 000217 
                                  7954  
    012573                        7955  make_entry:
                                  7956  	assign_entry	arg1
    012573  aa   000000 040316 
                                  7957  
                                  7958  	emit		1
    012574  aa   000001 000242 
    012575  aa   000000 6270 00   7959  	eax7		0
                                  7960  
    012576  aa  7 00034 3521 20   7961  	epp2		pr7|stack_header.pl1_operators_ptr,*
                                  7962  
                                  7963  	if_needs_descriptors arg1,make_et_desc
    012577  0a   012602 040737 
    012600  aa  2 01045 2721 00   7964  	tsp2		pr2|ext_entry
                                  7965  	jump		make_et_join
    012601  0a   012603 000220 
                                  7966  
    012602                        7967  make_et_desc:
    012602  aa  2 01046 2721 00   7968  	tsp2		pr2|ext_entry_desc
                                  7969  
    012603                        7970  make_et_join:
                                  7971  	copy		arg2
    012603  aa   000000 100201 
                                  7972  	multiply		op1,2
    012604  aa   000002 740265 
    012605  aa   740000 000000    7973  	zero		op1
                                  7974  	pop		op1
    012606  aa   000000 740203 
                                  7975  
                                  7976  	emit		1
    012607  aa   000001 000242 
    012610  aa   000000 000000    7977  	zero
                                  7978  
                                  7979  	emit_profile_entry		" if we will do long_profile set it up
    012611  aa   000066 000206 
                                  7980  
                                  7981  	unless_hfp	make_et_init_auto
    012612  0a   012614 000334 
    012613  aa  0 01474 7001 00   7982  	tsx0		pr0|enter_HFP_mode
                                  7983  
    012614                        7984  make_et_init_auto:
                                  7985  	call		init_auto
    012614  0a   012654 000216 
                                  7986  
                                  7987  	unless_cleanup	make_et_no_cleanup	"no cleanup needed
    012615  0a   012620 000332 
                                  7988  
    012616  aa  0 01471 7001 00   7989  	tsx0		pr0|fort_cleanup
                                  7990  	emit_cleanup_args
    012617  aa   000064 000206 
                                  7991  
    012620                        7992  make_et_no_cleanup:
                                  7993  	push_builtin	null
    012620  aa   000006 000213 
                                  7994  	push_builtin	ps
    012621  aa   000002 000213 
                                  7995  
                                  7996  	if		op2,=,op1,pop_ps
    012622  0a   012627 711637 
                                  7997  
                                  7998  	load_pr		pr2,op1
    012623  aa   000003 740251 
    012624  aa  6 00052 2521 00   7999  	spri2		pr6|ps_ptr
    012625  aa  2 00000 6521 00   8000  	spri6		pr2|0
                                  8001  	free_regs
    012626  aa   000004 000206 
                                  8002  
                                  8003  pop_ps:	pop		op2
    012627  aa   000000 700203 
                                  8004  	unless_storage_created make_et_descp		is there external storage?
    012630  0a   012635 000317 
                                  8005  	reserve_regs	all			calling external routines
    012631  aa   777760 000250 
    012632  aa  0 01472 7001 00   8006  	tsx0		pr0|fort_storage		request storage create/init
                                  8007  	emit_storage_args
    012633  aa   000065 000206 
                                  8008  	free_regs
    012634  aa   000004 000206 
                                  8009  
    012635                        8010  make_et_descp:
                                  8011  
    012635  aa  6 00032 3515 20   8012  	epp1		pr6|stack_frame.arg_ptr,*
                                  8013  
                                  8014  	unless_needs_descriptors arg1,make_et_ret
    012636  0a   012640 040337 
                                  8015  
    012637  aa  6 00042 3535 20   8016  	epp3		pr6|descriptor_ptr,*	Load desc ptr
                                  8017  
    012640                        8018  make_et_ret:
                                  8019  	s_return
    012640  aa   000003 000206 
                                  8020  
    012641                        8021  prepare_for_namelists:
                                  8022  	unless_namelist_used  pfn_ret
    012641  0a   012653 000343 
                                  8023  
                                  8024  	push_builtin	star_symbol
    012642  aa   000011 000213 
                                  8025  	push_builtin	ps
    012643  aa   000002 000213 
                                  8026  
                                  8027  	load_pr		pr2,op2
    012644  aa   000003 700251 
    012645  aa   740002 2520 00   8028  	spri2		op1+2
                                  8029  
                                  8030  	set_runtime_block_loc
    012646  aa   000024 000206 
                                  8031  
    012647  aa   000000 0520 03   8032  	adwp2		0,du
    012650  aa   740004 2520 00   8033  	spri2		op1+4
                                  8034  
                                  8035  	free_regs
    012651  aa   000004 000206 
                                  8036  	pop		op2
    012652  aa   000000 700203 
                                  8037  
    012653                        8038  pfn_ret:
                                  8039  
                                  8040  	s_return
    012653  aa   000003 000206 
                                  8041  
    012654                        8042  init_auto:
                                  8043  	proc		0
    012654  aa   000000 000214 
                                  8044  
                                  8045  	push_builtin	auto_overlay
    012655  aa   000004 000213 
                                  8046  
                                  8047  	push_length	op1
    012656  aa   000000 740304 
                                  8048  
                                  8049  	if		op1,=,0,init_return
    012657  0a   012665 750237 
                                  8050  
                                  8051  	push_builtin	auto_template
    012660  aa   000003 000213 
                                  8052  
                                  8053  	emit_eis
    012661  aa   000000 000207 
                                  8054  
    012662  aa  0 00100 1005 00   8055  	mlr		(pr),(pr),fill(0)
    012663  aa   740000 000000    8056  	desc9a		op1
    012664  aa   640000 000000    8057  	desc9a		op3
                                  8058  
    012665                        8059  init_return:
                                  8060  	return
    012665  aa   000000 000217 
                                  8061  
    012666                        8062  make_quick_entry:
                                  8063  	copy		arg1	Copy original symbol for entry
    012666  aa   000000 040201 
                                  8064  	get_quick_label	arg1	Replace arg1 with label for quick entry pt
    012667  aa   000000 040335 
                                  8065  
                                  8066  "If storage space needs to be created then we substitute fort_return_mac for
                                  8067  "return_op to get the storage released at the end of the external call.
                                  8068  
                                  8069  	unless_cleanup	mqe_no_storage
    012670  0a   012673 000332 
    012671  aa  0 01470 3521 00   8070  	epp2		pr0|fort_return_mac
                                  8071  	jump		mqe_end_storage
    012672  0a   012674 000220 
                                  8072  
    012673                        8073  mqe_no_storage:
    012673  aa  0 00631 3521 00   8074  	epp2		pr0|return_op
                                  8075  
    012674                        8076  mqe_end_storage:
                                  8077  	label		arg1
    012674  aa   000000 040243 
                                  8078  	push_builtin	entry_info
    012675  aa   000010 000213 
                                  8079  
    012676  aa   740000 2520 00   8080  	spri2		op1	Store return pointer
    012677  aa   740002 2514 00   8081  	spri1		op1+2	Store arg pointer
                                  8082  	arg_ptr_in_pr1		Update machine state
    012700  aa   000062 000206 
                                  8083  
                                  8084  	unless_needs_descriptors op2,mqe_no_desc
    012701  0a   012704 700337 
    012702  aa   740004 2534 00   8085  	spri3		op1+4	Store descriptor pointer
                                  8086  	desc_ptr_in_pr3		Update machine state
    012703  aa   000061 000206 
                                  8087  
    012704                        8088  mqe_no_desc:
                                  8089  	swap		op2	Get original entry symbol on top
    012704  aa   000000 700202 
                                  8090  	pop		op1	Pop it off
    012705  aa   000000 740203 
                                  8091  
                                  8092  	s_return
    012706  aa   000003 000206 
                                  8093  
    012707                        8094  process_param_list:
                                  8095  	proc		1
    012707  aa   000000 000614 
                                  8096  	scan		abort_list,(continue,next)
    012710                     
    012710  0a   000472 000221 
    012711  0a   012710 000220 
    012712  0a   012713 000220 
    012713                     
                                  8097  
                                  8098  	check_parameters
    012713  aa   000017 000206 
                                  8099  	return
    012714  aa   000000 000217 
                                  8100  
    012715                        8101  descriptor_check:
                                  8102  
                                  8103  	" Subroutine to check to see whether or not descriptors might be
                                  8104  	" required for a subroutine call or function reference.  In ansi66
                                  8105  	" mode, we print a message warning the user that descriptors might
                                  8106  	" be necessary.  In ansi77 mode, we go ahead and cause descriptors
                                  8107  	" to be used (silently).  In either mode, if the called subprogram
                                  8108  	" is local to this compilation, then it will already have been taken
                                  8109  	" care of by the storage allocator.
                                  8110  
                                  8111  	" Called from func_ref (to check the function return value of
                                  8112  	" character valued functions) and from evaluate_arglist.
                                  8113  
                                  8114  	" Assumes that arg1 is the external symbol.
                                  8115  
                                  8116  	if_local		arg1,descriptor_check.return
    012715  0a   012724 040727 
                                  8117  	if_needs_descriptors arg1,descriptor_check.return
    012716  0a   012724 040737 
                                  8118  	if_ansi77		descriptor_check.set
    012717  0a   012723 000674 
                                  8119  
                                  8120  	" Print a warning that this call might need descriptors
                                  8121  
                                  8122  	print		348,arg1
    012720  aa   000534 000701 
    012721  aa   000000 040303 
                        000001 
                                  8123  	jump		descriptor_check.return
    012722  0a   012724 000220 
                                  8124  
    012723                        8125  descriptor_check.set:
                                  8126  
                                  8127  	" Cause descriptors to be generated for this call
                                  8128  
                                  8129  	set_needs_descriptors		" arg1 implied
    012723  aa   000060 000206 
                                  8130  
    012724                        8131  descriptor_check.return:
                                  8132  	s_return
    012724  aa   000003 000206 
                                  8133  
    012725                        8134  increment_polish:
                                  8135  	proc		0
    012725  aa   000000 000214 
                                  8136  
                                  8137  	skip_data
    012726  aa   000034 000206 
                                  8138  
                                  8139  	return
    012727  aa   000000 000217 
                                  8140  
                                  8141  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  8142  
    012730                        8143  label_operator:
                                  8144  	proc		1
    012730  aa   000000 000614 
                                  8145  
                                  8146  	label		arg1
    012731  aa   000000 040243 
                                  8147  
                                  8148  	return
    012732  aa   000000 000217 
                                  8149  
                                  8150  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  8151  
                                  8152  stat:	proc		0
    012733  aa   000000 000214 
                                  8153  
                                  8154  	shorten_stack
    012734  aa   000000 000272 
                                  8155  	stat
    012735  aa   000016 000206 
                                  8156  
                                  8157  	return
    012736  aa   000000 000217 
                                  8158  
                                  8159  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  8160  
                                  8161  call:	proc		2
    012737  aa   000000 001214 
                                  8162  
                                  8163  "
                                  8164  	s_call		evaluate_arglist
    012740  0a   012743 000223 
                                  8165  	s_call		make_call
    012741  0a   013065 000223 
                                  8166  
                                  8167  	return
    012742  aa   000000 000217 
                                  8168  
    012743                        8169  evaluate_arglist:
                                  8170  	scan		abort_list,(next,check_args)
    012743                     
    012743  0a   000472 000221 
    012744  0a   012746 000220 
    012745  0a   012760 000220 
    012746                     
                                  8171  	if_optype		bif,conv_bif
    012746  0a   012753 004227 
                                  8172  	if_optype		external,conv_external
    012747  0a   012755 001227 
                                  8173  
                                  8174  	unless_dt		char,evaluate_arglist
    012750  0a   012743 010226 
                                  8175  
                                  8176  	" If argument is of data type character, check to see if we should
                                  8177  	" warn the user about descriptors or just use them.
                                  8178  
                                  8179  	s_call		descriptor_check
    012751  0a   012715 000223 
                                  8180  
                                  8181  	jump		evaluate_arglist
    012752  0a   012743 000220 
                                  8182  
    012753                        8183  conv_bif:
                                  8184  	call		cv_bif_to_external
    012753  0a   012762 000216 
                                  8185  	jump		evaluate_arglist
    012754  0a   012743 000220 
                                  8186  
    012755                        8187  conv_external:
                                  8188  	if_parameter	op1,evaluate_arglist	" parameters already are external variables
    012755  0a   012743 740721 
                                  8189  
                                  8190  	call		make_external_variable
    012756  0a   013054 000216 
                                  8191  	jump		evaluate_arglist
    012757  0a   012743 000220 
                                  8192  
    012760                        8193  check_args:
                                  8194  	check_arg_list
    012760  aa   000020 000206 
                                  8195  	s_return
    012761  aa   000003 000206 
                                  8196  
    012762                        8197  cv_bif_to_external:
                                  8198  	func		1
    012762  aa   000000 000615 
                                  8199  
                                  8200  	push_bif_index	arg1	" get index into big table
    012763  aa   000000 040267 
                                  8201  "				now get offset into vector
                                  8202  	push_count_indexed	op1,(38,39,40,19,2,12,21,3,13,4,14,5,15,7,17,23,41,42,43,1,11,20,0,0,0,0,0,0,0,0,0,0,0,0,57,58,10,44,45,46,6,16,22,9,18,24,8,0,47,0,0,0,0,0,48,0,0,49,26,27,28,29,30,31,0,0,32,50,0,0,0,0,36,34,37,35,33,51,52,53,54,55,56,0,0,0,0,59,60,61,62,0,0)
    012764  aa   000135 740212 
    012765  aa   000046 000047 
    012766  aa   000050 000023 
    012767  aa   000002 000014 
    012770  aa   000025 000003 
    012771  aa   000015 000004 
    012772  aa   000016 000005 
    012773  aa   000017 000007 
    012774  aa   000021 000027 
    012775  aa   000051 000052 
    012776  aa   000053 000001 
    012777  aa   000013 000024 
    013000  aa   000000 000000 
    013001  aa   000000 000000 
    013002  aa   000000 000000 
    013003  aa   000000 000000 
    013004  aa   000000 000000 
    013005  aa   000000 000000 
    013006  aa   000071 000072 
    013007  aa   000012 000054 
    013010  aa   000055 000056 
    013011  aa   000006 000020 
    013012  aa   000026 000011 
    013013  aa   000022 000030 
    013014  aa   000010 000000 
    013015  aa   000057 000000 
    013016  aa   000000 000000 
    013017  aa   000000 000000 
    013020  aa   000060 000000 
    013021  aa   000000 000061 
    013022  aa   000032 000033 
    013023  aa   000034 000035 
    013024  aa   000036 000037 
    013025  aa   000000 000000 
    013026  aa   000040 000062 
    013027  aa   000000 000000 
    013030  aa   000000 000000 
    013031  aa   000044 000042 
    013032  aa   000045 000043 
    013033  aa   000041 000063 
    013034  aa   000064 000065 
    013035  aa   000066 000067 
    013036  aa   000070 000000 
    013037  aa   000000 000000 
    013040  aa   000000 000073 
    013041  aa   000074 000075 
    013042  aa   000076 000000 
    013043  aa   000000 000000 
                        000135 
                                  8203  
                                  8204  	if		op1,=,0,not_external_bif
    013044  0a   013052 750237 
                                  8205  
                                  8206  	reserve_regs	(x2,pr2,pr4)
    013045  aa   101200 000250 
                                  8207  	use_eaq
    013046  aa   000000 000255 
                                  8208  
    013047  aa   740000 6220 00   8209  	eax2		op1
    013050  aa  0 01417 7001 00   8210  	tsx0		pr0|get_math_entry
                                  8211  
                                  8212  	jump		ext_join
    013051  0a   013056 000220 
                                  8213  
    013052                        8214  not_external_bif:
                                  8215  	error		461,arg1
    013052  aa   000715 000702 
    013053  aa   000000 040303 
                        000001 
                                  8216  
    013054                        8217  make_external_variable:
                                  8218  	func		1
    013054  aa   000000 000615 
                                  8219  
                                  8220  	load_pr		pr2,arg1
    013055  aa   000003 040251 
                                  8221  
    013056                        8222  ext_join:
                                  8223  	push_builtin	null_ptr
    013056  aa   000005 000213 
                                  8224  	push_temp		4
    013057  aa   000004 000204 
                                  8225  
    013060  aa   740000 2520 00   8226  	spri2		op1
                                  8227  	load		aq,op2
    013061  aa   000000 701656 
    013062  aa   740002 7570 00   8228  	staq		op1+2
                                  8229  
                                  8230  	free_regs
    013063  aa   000004 000206 
                                  8231  	return		op1
    013064  aa   000001 740217 
                                  8232  
    013065                        8233  make_call:
                                  8234  	copy		arg2		get nargs
    013065  aa   000000 100201 
                                  8235  
                                  8236  	unless_needs_descriptors	arg1,inc_for_hdr
    013066  0a   013070 040337 
                                  8237  	multiply		op1,2
    013067  aa   000002 740265 
                                  8238  
    013070                        8239  inc_for_hdr:
                                  8240  	increment		op1,1		(for header)
    013070  aa   000001 740263 
                                  8241  
                                  8242  	unless_parameter	arg1,double_count
    013071  0a   013073 040321 
                                  8243  	increment		op1,1		for display pointer
    013072  aa   000001 740263 
                                  8244  
    013073                        8245  double_count:
                                  8246  	multiply		op1,2		double to get size of temp
    013073  aa   000002 740265 
                                  8247  
                                  8248  	if_local		arg1,local_call
    013074  0a   013125 040727 
                                  8249  
                                  8250  	push_temp		var
    013075  aa   777777 000204 
                                  8251  
                                  8252  	store_arg_addrs
    013076  aa   000021 000206 
                                  8253  
                                  8254  	make_descriptors
    013077  aa   000023 000206 
                                  8255  
                                  8256  	use_eaq				" any temps that need to be saved...
    013100  aa   000000 000255 
                                  8257  	reserve_regs	indices		... must be saved now
    013101  aa   776000 000250 
                                  8258  	free_regs				we still might need xregs for > 16K addressing
    013102  aa   000004 000206 
                                  8259  
    013103  aa   740000 6210 00   8260  	eax1		op1
                                  8261  	multiply		arg2,2048
    013104  aa   004000 100265 
    013105  aa   100000 4310 00   8262  	fld		arg2
                                  8263  
                                  8264  	load_pr		pr2,arg1
    013106  aa   000003 040251 
                                  8265  
                                  8266  	reserve_regs	all		all regs may be used by the call programs
    013107  aa   777760 000250 
                                  8267  
                                  8268  	if_parameter	arg1,call_variable
    013110  0a   013116 040721 
                                  8269  
                                  8270  	if_needs_descriptors	arg1,call_ext_desc
    013111  0a   013114 040737 
                                  8271  
    013112  aa  0 00623 7001 00   8272  	tsx0		pr0|call_ext_out
                                  8273  	jump		call_join
    013113  0a   013122 000220 
                                  8274  
    013114                        8275  call_ext_desc:
    013114  aa  0 00622 7001 00   8276  	tsx0		pr0|call_ext_out_desc
                                  8277  	jump		call_join
    013115  0a   013122 000220 
                                  8278  
    013116                        8279  call_variable:
                                  8280  	if_needs_descriptors	arg1,call_variable_desc
    013116  0a   013121 040737 
                                  8281  
    013117  aa  0 00617 7001 00   8282  	tsx0		pr0|call_var
                                  8283  	jump		call_join
    013120  0a   013122 000220 
                                  8284  
    013121                        8285  call_variable_desc:
    013121  aa  0 00616 7001 00   8286  	tsx0		pr0|call_var_desc
                                  8287  
    013122                        8288  call_join:
                                  8289  	free_regs
    013122  aa   000004 000206 
                                  8290  	free_descriptors
    013123  aa   000052 000206 
                                  8291  	s_return
    013124  aa   000003 000206 
                                  8292  
                                  8293  
    013125                        8294  local_call:
                                  8295  	if_constant_addrs	use_itp
    013125  0a   013147 000733 
                                  8296  
                                  8297  	push_temp		var
    013126  aa   777777 000204 
                                  8298  
                                  8299  	store_arg_addrs
    013127  aa   000021 000206 
                                  8300  
                                  8301  	make_descriptors
    013130  aa   000023 000206 
                                  8302  
                                  8303  	multiply		arg2,2048
    013131  aa   004000 100265 
                                  8304  	use_eaq
    013132  aa   000000 000255 
    013133  aa   100000 4310 00   8305  	fld		arg2
    013134  aa   740000 7570 00   8306  	staq		op1
                                  8307  
    013135                        8308  local_join:
                                  8309  	load_pr		pr1,op1
    013135  aa   000002 740251 
                                  8310  
                                  8311  	unless_needs_descriptors arg1,lc_no_desc
    013136  0a   013141 040337 
                                  8312  
    013137  aa  1 00000 2351 00   8313  	lda		pr1|0	Get 2*nargs in au
    013140  aa  1 00002 3535 01   8314  	epp3		pr1|2,au	Load descriptor pointer
                                  8315  
    013141                        8316  lc_no_desc:
                                  8317  	get_quick_label	arg1	replace external ref with label for quick entry point
    013141  aa   000000 040335 
                                  8318  
                                  8319  	reserve_regs	all-pr4
    013142  aa   776760 000250 
                                  8320  
    013143  aa   040000 2720 00   8321  	tsp2		arg1
                                  8322  
                                  8323  	free_regs
    013144  aa   000004 000206 
                                  8324  	free_descriptors
    013145  aa   000052 000206 
                                  8325  	s_return
    013146  aa   000003 000206 
                                  8326  
    013147                        8327  use_itp:
                                  8328  	gen_itp_list		replaces top of stack with constant arg list
    013147  aa   000022 000206 
                                  8329  	use_eaq
    013150  aa   000000 000255 
                                  8330  	jump		local_join
    013151  0a   013135 000220 
                                  8331  
                                  8332  chain:	proc		3
    013152  aa   000000 001614 
                                  8333  
                                  8334  	swap		arg1
    013153  aa   000000 040202 
                                  8335  
                                  8336  	if_dt		char,chain2
    013154  0a   013157 010225 
                                  8337  	unless_dt		int,chain_path.p
    013155  0a   013220 400226 
                                  8338  	unless_array	chain_path.p
    013156  0a   013220 000231 
                                  8339  
    013157                        8340  chain2:
                                  8341  	swap		arg1
    013157  aa   000000 040202 
                                  8342  
                                  8343  	swap		arg2
    013160  aa   000000 100202 
                                  8344  
                                  8345  	if_dt		char,chain3
    013161  0a   013164 010225 
                                  8346  	unless_dt		int,chain_sys.p
    013162  0a   013226 400226 
                                  8347  	unless_array	chain_sys.p
    013163  0a   013226 000231 
                                  8348  
    013164                        8349  chain3:
                                  8350  	swap		arg2
    013164  aa   000000 100202 
                                  8351  
                                  8352  	copy		arg3
    013165  aa   000000 140201 
                                  8353  	increment		op1,47
    013166  aa   000057 740263 
                                  8354  	push_temp		var
    013167  aa   777777 000204 
                                  8355  
    013170                        8356  chain_fill:
                                  8357  	use_eaq
    013170  aa   000000 000255 
                                  8358  
    013171  aa   140000 2360 00   8359  	ldq		arg3
    013172  aa   740000 7560 00   8360  	stq		op1
                                  8361  
                                  8362  	emit_eis
    013173  aa   000000 000207 
    013174  aa  0 00100 1005 00   8363  	mlr		(pr),(pr)
    013175  aa   040000 000250    8364  	desc9a		arg1,168
    013176  aa   740001 000250    8365  	desc9a		op1+1,168
                                  8366  
    013177  aa   100000 2370 00   8367  	ldaq		arg2
    013200  aa   740055 7570 00   8368  	staq		op1+45
                                  8369  
                                  8370  	load_pr		pr2,op1
    013201  aa   000003 740251 
                                  8371  	emit		1
    013202  aa   000001 000242 
    013203  aa   000000 6200 00   8372  	eax0		0
                                  8373  
    013204                        8374  chain_next_file:
                                  8375  	scan		next,(next,chain_ret)
    013204                     
    013204  0a   013207 000221 
    013205  0a   013207 000220 
    013206  0a   013213 000220 
    013207                     
                                  8376  
    013207  aa   740000 2360 00   8377  	ldq		op1
    013210  aa   700057 7560 10   8378  	stq		op2+47,0
    013211  aa   000001 6200 10   8379  	eax0		1,0
                                  8380  	jump		chain_next_file
    013212  0a   013204 000220 
                                  8381  
    013213                        8382  chain_ret:
                                  8383  	reserve_regs	(x1,x2,x3,x4,x5,x6,x7,pr1,pr2,pr3,pr4,pr5,pr7)
    013213  aa   377760 000250 
                                  8384  
    013214  aa  0 01422 7001 00   8385  	tsx0		pr0|fortran_chain
                                  8386  	free_regs
    013215  aa   000004 000206 
                                  8387  	reset_eaq
    013216  aa   000006 000206 
                                  8388  
                                  8389  	return
    013217  aa   000000 000217 
                                  8390  
    013220                        8391  chain_path.p:
                                  8392  	print		335,op1
    013220  aa   000517 000701 
    013221  aa   000000 740303 
                        000001 
                                  8393  	scan		continue,(continue,next)
    013222                     
    013222  0a   013222 000221 
    013223  0a   013222 000220 
    013224  0a   013225 000220 
    013225                     
                                  8394  	return
    013225  aa   000000 000217 
                                  8395  
    013226                        8396  chain_sys.p:
                                  8397  	print		336,op1
    013226  aa   000520 000701 
    013227  aa   000000 740303 
                        000001 
                                  8398  	scan		continue,(continue,next)
    013230                     
    013230  0a   013230 000221 
    013231  0a   013230 000220 
    013232  0a   013233 000220 
    013233                     
                                  8399  	return
    013233  aa   000000 000217 
                                  8400  
                                  8401  endunit:	proc		0
    013234  aa   000000 000214 
                                  8402  
                                  8403  	end_unit
    013235  aa   000015 000206 
                                  8404  	return
    013236  aa   000000 000217 
                                  8405  
                                  8406  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  8407  
    013237                        8408  non_executable:
                                  8409  	proc		0
    013237  aa   000000 000214 
                                  8410  	return
    013240  aa   000000 000217 
                                  8411  
                                  8412  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  8413  
                                  8414  no_op:	proc		0
    013241  aa   000000 000214 
                                  8415  	return
    013242  aa   000000 000217 
                                  8416  
                                  8417  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  8418  
    013243                        8419  form_VLA_packed_ptr:
                                  8420  	func		1
    013243  aa   000000 000615 
                                  8421  	load		q,arg1
    013244  aa   000000 040656 
    013245  aa  0 77615 5061 00   8422  	div		pr0|VLA_words_per_seg
                                  8423  	emit_inst		2
    013246  aa   000002 040242 
    013247  aa   000022 7350 00   8424  	als		18
    013250  aa   000022 7770 00   8425  	llr		18
                                  8426  	return		q
    013251  aa   000001 000617 
                                  8427  
                                  8428  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  8429  
    013252                        8430  opt_subscript:
                                  8431  	proc		2
    013252  aa   000000 001214 
                                  8432  
                                  8433  	optimized_subscript
    013253  aa   000025 000206 
                                  8434  	return
    013254  aa   000000 000217 
                                  8435  
    013255                        8436  left_shift:
                                  8437  	func		2
    013255  aa   000000 001215 
                                  8438  
                                  8439  	load		q,arg1
    013256  aa   000000 040656 
    013257  aa   100000 7360 00   8440  	qls		arg2
                                  8441  
                                  8442  	return		q
    013260  aa   000001 000617 
                                  8443  
                                  8444  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  8445  
    013261                        8446  right_shift:
                                  8447  	func		2
    013261  aa   000000 001215 
                                  8448  
                                  8449  	load		q,arg1
    013262  aa   000000 040656 
    013263  aa   100000 7320 00   8450  	qrs		arg2
                                  8451  
                                  8452  	return		q
    013264  aa   000001 000617 
                                  8453  
                                  8454  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  8455  
    013265                        8456  store_zero:
                                  8457  	proc		1
    013265  aa   000000 000614 
                                  8458  
    013266  aa   040000 4500 00   8459  	stz		arg1
                                  8460  	flush_ref		arg1
    013267  aa   000000 040355 
                                  8461  
                                  8462  	return
    013270  aa   000000 000217 
                                  8463  
    013271                        8464  storage_add:
                                  8465  	proc		2
    013271  aa   000000 001214 
                                  8466  
                                  8467  	load		q,arg2
    013272  aa   000000 100656 
                                  8468  	use_ind
    013273  aa   000007 000206 
    013274  aa   040000 0560 00   8469  	asq		arg1
                                  8470  	flush_ref		arg1
    013275  aa   000000 040355 
                                  8471  
                                  8472  	return
    013276  aa   000000 000217 
                                  8473  
                                  8474  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  8475  
    013277                        8476  storage_sub:
                                  8477  	proc		2
    013277  aa   000000 001214 
                                  8478  
                                  8479  	load		q,arg2
    013300  aa   000000 100656 
                                  8480  	use_ind
    013301  aa   000007 000206 
    013302  aa   040000 1560 00   8481  	ssq		arg1
                                  8482  	flush_ref		arg1
    013303  aa   000000 040355 
                                  8483  
                                  8484  	return
    013304  aa   000000 000217 
                                  8485  
                                  8486  "  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
                                  8487  
    013305                        8488  neg_storage_add:
                                  8489  	proc		2
    013305  aa   000000 001214 
                                  8490  
                                  8491  	use_eaq
    013306  aa   000000 000255 
    013307  aa   100000 3360 00   8492  	lcq		arg2
    013310  aa   040000 0560 00   8493  	asq		arg1
                                  8494  	flush_ref		arg1
    013311  aa   000000 040355 
                                  8495  
                                  8496  	return
    013312  aa   000000 000217 
                                  8497  
    013313                        8498  storage_add_one:
                                  8499  	proc		1
    013313  aa   000000 000614 
                                  8500  
                                  8501  	use_ind
    013314  aa   000007 000206 
                                  8502  
    013315  aa   040000 0540 00   8503  	aos		arg1
                                  8504  	flush_ref		arg1
    013316  aa   000000 040355 
                                  8505  
                                  8506  	return
    013317  aa   000000 000217 
                                  8507  
                                  8508  namelist:	proc		1
    013320  aa   000000 000614 
                                  8509  
                                  8510  	push_builtin	ps
    013321  aa   000002 000213 
                                  8511  	load_pr		pr2,arg1
    013322  aa   000003 040251 
    013323  aa   740022 2520 00   8512  	spri2		op1+namelist_slot
                                  8513  
                                  8514  	free_regs
    013324  aa   000004 000206 
                                  8515  	return
    013325  aa   000000 000217 
                                  8516  
                                  8517  cat:	func		2
    013326  aa   000000 001215 
                                  8518  
                                  8519  	unless_ansi77	cat.not_ansi77
    013327  0a   013352 000274 
                                  8520  
                                  8521  	swap		arg1
    013330  aa   000000 040202 
                                  8522  	unless_dt		char,cat.p
    013331  0a   013350 010226 
                                  8523  	swap		arg1
    013332  aa   000000 040202 
                                  8524  	unless_dt		char,cat.p
    013333  0a   013350 010226 
                                  8525  
                                  8526  	start_cat		cat.dont_copy_arg1
    013334  0a   013341 000271 
                                  8527  
                                  8528  	emit_eis		equal_lengths
    013335  aa   000001 000207 
    013336  aa  0 40100 1005 00   8529  	mlr		(pr),(pr),fill(040)
    013337  aa   040000 000000    8530  	desc9a		arg1
    013340  aa   740000 000000    8531  	desc9a		op1
                                  8532  
    013341                        8533  cat.dont_copy_arg1:
                                  8534  	continue_cat
    013341  aa   000056 000206 
                                  8535  
                                  8536  	emit_eis		equal_lengths
    013342  aa   000001 000207 
    013343  aa  0 40100 1005 00   8537  	mlr		(pr),(pr),fill(040)
    013344  aa   100000 000000    8538  	desc9a		arg2
    013345  aa   740000 000000    8539  	desc9a		op1
                                  8540  
                                  8541  	finish_cat
    013346  aa   000057 000206 
                                  8542  
                                  8543  	return		op1
    013347  aa   000001 740217 
                                  8544  
                                  8545  
    013350                        8546  cat.p:
                                  8547  	error		354,op1
    013350  aa   000542 000702 
    013351  aa   000000 740303 
                        000001 
                                  8548  
    013352                        8549  cat.not_ansi77:
                                  8550  	error		153
    013352  aa   000231 000302 
                        000000 
                                  8551  
    013353                        8552  lhs_fld:
                                  8553  	proc		4
    013353  aa   000000 002214 
                                  8554  	lhs_fld
    013354  aa   000072 000206 
                                  8555  	return
    013355  aa   000000 000217 
                                  8556  
                                  8557  	" These should never appear in the polish.  They are only used on the
                                  8558  	" optimizing side.
                                  8559  
    013356                        8560  convert_to_int: 
    013356                        8561  convert_to_real:
    013356                        8562  convert_to_dp:
    013356                        8563  convert_to_cmpx:
    013356                        8564  read_scalar:
    013356                        8565  read_array:
    013356                        8566  read_vector:
    013356                        8567  write_scalar:
    013356                        8568  write_array:
    013356                        8569  write_vector:
    013356                        8570  jump_true:
    013356                        8571  jump_false:
    013356                        8572  sub_index:
    013356                        8573  loop_end:
    013356                        8574  read_namelist:
    013356                        8575  write_namelist:
    013356                        8576  decode_string:
    013356                        8577  encode_string:
    013356                        8578  load_xreg:
    013356                        8579  load_preg:
                                  8580  	error	455
    013356  aa   000707 000302 
                        000000 
                                  8581  
                                  8582  	end

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    013360  5a   000003 000000 
    013361  5a   000070 600000 
    013362  aa   000000 000000 
    013363  55   000012 000002 
    013364  5a   000002 400003 
    013365  55   000006 000012 
    013366  aa  017 146 157 162
    013367  aa  164 137 143 147
    013370  aa  137 155 141 143
    013371  aa  162 157 163 137
    013372  55   000020 000003 
    013373  0a   000475 400000 
    013374  55   000015 000003 
    013375  aa  013 145 162 162         error_macro
    013376  aa  157 162 137 155
    013377  aa  141 143 162 157
    013400  55   000026 000012 
    013401  0a   000472 400000 
    013402  55   000023 000003 
    013403  aa  012 141 142 157         abort_list
    013404  aa  162 164 137 154
    013405  aa  151 163 164 000
    013406  55   000034 000020 
    013407  0a   000470 400000 
    013410  55   000031 000003 
    013411  aa  012 146 151 162         first_scan
    013412  aa  163 164 137 163
    013413  aa  143 141 156 000
    013414  55   000044 000026 
    013415  0a   000413 400000 
    013416  55   000037 000003 
    013417  aa  022 151 156 164         interpreter_macros
    013420  aa  145 162 160 162
    013421  aa  145 164 145 162
    013422  aa  137 155 141 143
    013423  aa  162 157 163 000
    013424  55   000052 000034 
    013425  0a   000155 400000 
    013426  55   000047 000003 
    013427  aa  013 163 151 156         single_inst
    013430  aa  147 154 145 137
    013431  aa  151 156 163 164
    013432  55   000061 000044 
    013433  0a   000000 400000 
    013434  55   000055 000003 
    013435  aa  016 157 160 145         operator_table
    013436  aa  162 141 164 157
    013437  aa  162 137 164 141
    013440  aa  142 154 145 000
    013441  55   000002 000052 
    013442  6a   000000 400002 
    013443  55   000064 000003 
    013444  aa  014 163 171 155         symbol_table
    013445  aa  142 157 154 137
    013446  aa  164 141 142 154
    013447  aa  145 000 000 000

DEFINITIONS HASH TABLE

    013450  aa   000000 000015 
    013451  5a   000052 000000 
    013452  aa   000000 000000 
    013453  aa   000000 000000 
    013454  5a   000034 000000 
    013455  aa   000000 000000 
    013456  aa   000000 000000 
    013457  5a   000026 000000 
    013460  5a   000061 000000 
    013461  5a   000012 000000 
    013462  aa   000000 000000 
    013463  5a   000044 000000 
    013464  aa   000000 000000 
    013465  5a   000020 000000 

NO EXTERNAL NAMES

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    013466  aa   000001 000000 
    013467  aa   000000 000000 

INTERNAL EXPRESSION WORDS

LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   013360 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000010 
    000007  a2   000000 000000 
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000010 
    000004  aa   000000 116606 
    000005  aa   116110 132154 
    000006  aa   000000 116633 
    000007  aa   277156 411330 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 001423 
    000020  aa   000000 000226 
    000021  aa   001374 001371 
    000022  aa   001410 000226 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   070056 061063 
    000030  aa   040123 145160 
    000031  aa   164145 155142 
    000032  aa   145162 040061 
    000033  aa   071070 070040 
    000034  aa   115141 162164 
    000035  aa   151156 163157 
    000036  aa   156056 123171 
    000037  aa   163115 141151 
    000040  aa   156164 056141 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   055164 141162 
    000045  aa   147145 164040 
    000046  aa   154066 070040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040154 151163 
    000057  aa   164040 163171 
    000060  aa   155142 157154 
    000061  aa   163040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000007 
    000066  aa   000122 000055 
    000067  aa   166313 020556 
    000070  aa   000000 116633 
    000071  aa   263610 600000 
    000072  aa   000136 000041 
    000073  aa   132413 665137 
    000074  aa   000000 113241 
    000075  aa   762522 000000 
    000076  aa   000147 000037 
    000077  aa   132413 665122 
    000100  aa   000000 113241 
    000101  aa   762516 600000 
    000102  aa   000157 000042 
    000103  aa   147777 464111 
    000104  aa   000000 115000 
    000105  aa   507463 000000 
    000106  aa   000170 000041 
    000107  aa   052721 247134 
    000110  aa   000000 105272 
    000111  aa   317215 400000 
    000112  aa   000201 000051 
    000113  aa   132413 665143 
    000114  aa   000000 113241 
    000115  aa   762524 000000 
    000116  aa   000214 000046 
    000117  aa   132413 665156 
    000120  aa   000000 113241 
    000121  aa   762525 200000 
    000122  aa   076163 160145          >spec>install>MR12.2-1209>fort_cg_macros_.alm
    000123  aa   143076 151156 
    000124  aa   163164 141154 
    000125  aa   154076 115122 
    000126  aa   061062 056062 
    000127  aa   055061 062060 
    000130  aa   071076 146157 
    000131  aa   162164 137143 
    000132  aa   147137 155141 
    000133  aa   143162 157163 
    000134  aa   137056 141154 
    000135  aa   155040 040040 
    000136  aa   076154 144144          >ldd>include>fort_macros.incl.alm
    000137  aa   076151 156143 
    000140  aa   154165 144145 
    000141  aa   076146 157162 
    000142  aa   164137 155141 
    000143  aa   143162 157163 
    000144  aa   056151 156143 
    000145  aa   154056 141154 
    000146  aa   155040 040040 
    000147  aa   076154 144144          >ldd>include>fort_equs.incl.alm
    000150  aa   076151 156143 
    000151  aa   154165 144145 
    000152  aa   076146 157162 
    000153  aa   164137 145161 
    000154  aa   165163 056151 
    000155  aa   156143 154056 
    000156  aa   141154 155040 
    000157  aa   076154 144144          >ldd>include>stack_header.incl.alm
    000160  aa   076151 156143 
    000161  aa   154165 144145 
    000162  aa   076163 164141 
    000163  aa   143153 137150 
    000164  aa   145141 144145 
    000165  aa   162056 151156 
    000166  aa   143154 056141 
    000167  aa   154155 040040 
    000170  aa   076154 144144          >ldd>include>stack_frame.incl.alm
    000171  aa   076151 156143 
    000172  aa   154165 144145 
    000173  aa   076163 164141 
    000174  aa   143153 137146 
    000175  aa   162141 155145 
    000176  aa   056151 156143 
    000177  aa   154056 141154 
    000200  aa   155040 040040 
    000201  aa   076154 144144          >ldd>include>fort_operator_table.incl.alm
    000202  aa   076151 156143 
    000203  aa   154165 144145 
    000204  aa   076146 157162 
    000205  aa   164137 157160 
    000206  aa   145162 141164 
    000207  aa   157162 137164 
    000210  aa   141142 154145 
    000211  aa   056151 156143 
    000212  aa   154056 141154 
    000213  aa   155040 040040 
    000214  aa   076154 144144          >ldd>include>fort_single_inst.incl.alm
    000215  aa   076151 156143 
    000216  aa   154165 144145 
    000217  aa   076146 157162 
    000220  aa   164137 163151 
    000221  aa   156147 154145 
    000222  aa   137151 156163 
    000223  aa   164056 151156 
    000224  aa   143154 056141 
    000225  aa   154155 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

         470    ...00001                 fort_cg_macros_:    286.
         472    ...00002                 fort_cg_macros_:    289.
         575    ...00004                 fort_cg_macros_:    383.
         630    ...00005                 fort_cg_macros_:    425.
         634    ...00006                 fort_cg_macros_:    429.
         637    ...00007                 fort_cg_macros_:    433.
        1023    ...00010                 fort_cg_macros_:    607.
        1025    ...00011                 fort_cg_macros_:    610.
        1414    ...00012                 fort_cg_macros_:    959.
        1416    ...00013                 fort_cg_macros_:    962.
        1616    ...00014                 fort_cg_macros_:   1147.
        1620    ...00015                 fort_cg_macros_:   1150.
        2044    ...00016                 fort_cg_macros_:   1358.
        2046    ...00017                 fort_cg_macros_:   1361.
        2353    ...00020                 fort_cg_macros_:   1659.
        2355    ...00021                 fort_cg_macros_:   1662.
        2364    ...00022                 fort_cg_macros_:   1671.
        2500    ...00023                 fort_cg_macros_:   1780.
        2534    ...00024                 fort_cg_macros_:   1829.
        2617    ...00025                 fort_cg_macros_:   1908.
        2663    ...00026                 fort_cg_macros_:   1960.
        2736    ...00027                 fort_cg_macros_:   2024.
        2745    ...00030                 fort_cg_macros_:   2034.
        2751    ...00031                 fort_cg_macros_:   2041.
        2755    ...00032                 fort_cg_macros_:   2048.
        2760    ...00033                 fort_cg_macros_:   2052.
        2763    ...00034                 fort_cg_macros_:   2056.
        3052    ...00035                 fort_cg_macros_:   2071.
        3056    ...00036                 fort_cg_macros_:   2077.
        3310    ...00037                 fort_cg_macros_:   2107.
        3315    ...00040                 fort_cg_macros_:   2116.
        3322    ...00041                 fort_cg_macros_:   2121.
        3326    ...00042                 fort_cg_macros_:   2126.
        3332    ...00043                 fort_cg_macros_:   2131.
        3336    ...00044                 fort_cg_macros_:   2136.
        3342    ...00045                 fort_cg_macros_:   2141.
        3346    ...00046                 fort_cg_macros_:   2146.
        3352    ...00047                 fort_cg_macros_:   2151.
        3356    ...00050                 fort_cg_macros_:   2156.
        3402    ...00051                 fort_cg_macros_:   2187.
        3406    ...00053                 fort_cg_macros_:   2192.
        3411    ...00055                 fort_cg_macros_:   2197.
        3415    ...00056                 fort_cg_macros_:   2202.
        5735    ...00057                 fort_cg_macros_:   4173.
        6064    ...00060                 fort_cg_macros_:   4284.
        6100    ...00061                 fort_cg_macros_:   4301.
        6111    ...00062                 fort_cg_macros_:   4311.
        6562    ...00063                 fort_cg_macros_:   4772.
        6566    ...00064                 fort_cg_macros_:   4776.
        6572    ...00065                 fort_cg_macros_:   4780.
        6576    ...00066                 fort_cg_macros_:   4784.
        6602    ...00067                 fort_cg_macros_:   4788.
        6605    ...00070                 fort_cg_macros_:   4791.
        6610    ...00071                 fort_cg_macros_:   4795.
        6612    ...00072                 fort_cg_macros_:   4798.
        6614    ...00073                 fort_cg_macros_:   4801.
        6616    ...00074                 fort_cg_macros_:   4804.
        6620    ...00075                 fort_cg_macros_:   4807.
        6622    ...00076                 fort_cg_macros_:   4810.
        6723    ...00077                 fort_cg_macros_:   4906.
        6725    ...00100                 fort_cg_macros_:   4909.
        6727    ...00101                 fort_cg_macros_:   4912.
        6731    ...00102                 fort_cg_macros_:   4915.
        6733    ...00103                 fort_cg_macros_:   4918.
        6736    ...00104                 fort_cg_macros_:   4921.
        6741    ...00105                 fort_cg_macros_:   4924.
        7131    ...00106                 fort_cg_macros_:   5100.
        7133    ...00107                 fort_cg_macros_:   5103.
        7135    ...00110                 fort_cg_macros_:   5106.
        7137    ...00111                 fort_cg_macros_:   5109.
        7141    ...00112                 fort_cg_macros_:   5112.
        7144    ...00113                 fort_cg_macros_:   5115.
        7147    ...00114                 fort_cg_macros_:   5118.
        7310    ...00115                 fort_cg_macros_:   5257.
        7312    ...00116                 fort_cg_macros_:   5260.
        7314    ...00117                 fort_cg_macros_:   5263.
        7316    ...00120                 fort_cg_macros_:   5266.
        7320    ...00121                 fort_cg_macros_:   5269.
        7323    ...00122                 fort_cg_macros_:   5272.
        7334    ...00123                 fort_cg_macros_:   5284.
        7473    ...00124                 fort_cg_macros_:   5422.
        7475    ...00125                 fort_cg_macros_:   5425.
        7477    ...00126                 fort_cg_macros_:   5428.
        7501    ...00127                 fort_cg_macros_:   5431.
        7503    ...00130                 fort_cg_macros_:   5434.
        7506    ...00131                 fort_cg_macros_:   5437.
        7517    ...00132                 fort_cg_macros_:   5449.
        7705    ...00133                 fort_cg_macros_:   5624.
        7707    ...00134                 fort_cg_macros_:   5627.
        7711    ...00135                 fort_cg_macros_:   5630.
        7713    ...00136                 fort_cg_macros_:   5633.
        7715    ...00137                 fort_cg_macros_:   5636.
        7720    ...00140                 fort_cg_macros_:   5639.
        7723    ...00141                 fort_cg_macros_:   5642.
       10113    ...00142                 fort_cg_macros_:   5817.
       10115    ...00143                 fort_cg_macros_:   5820.
       10117    ...00144                 fort_cg_macros_:   5823.
       10121    ...00145                 fort_cg_macros_:   5826.
       10123    ...00146                 fort_cg_macros_:   5829.
       10126    ...00147                 fort_cg_macros_:   5832.
       10131    ...00150                 fort_cg_macros_:   5835.
       10231    ...00151                 fort_cg_macros_:   5929.
       10233    ...00152                 fort_cg_macros_:   5932.
       10244    ...00153                 fort_cg_macros_:   5945.
       10246    ...00154                 fort_cg_macros_:   5948.
       10273    ...00155                 fort_cg_macros_:   5988.
       10315    ...00156                 fort_cg_macros_:   6019.
       10362    ...00157                 fort_cg_macros_:   6089.
       10364    ...00160                 fort_cg_macros_:   6090.
       10371    ...00161                 fort_cg_macros_:   6097.
       10517    ...00162                 fort_cg_macros_:   6242.
       10525    ...00163                 fort_cg_macros_:   6253.
       10530    ...00164                 fort_cg_macros_:   6255.
       10567    ...00165                 fort_cg_macros_:   6309.
       10570    ...00166                 fort_cg_macros_:   6311.
       10573    ...00167                 fort_cg_macros_:   6312.
       10576    ...00170                 fort_cg_macros_:   6316.
       10601    ...00171                 fort_cg_macros_:   6320.
       10603    ...00172                 fort_cg_macros_:   6322.
       10606    ...00173                 fort_cg_macros_:   6323.
       10614    ...00174                 fort_cg_macros_:   6333.
       10623    ...00175                 fort_cg_macros_:   6345.
       10631    ...00176                 fort_cg_macros_:   6354.
       10647    ...00177                 fort_cg_macros_:   6378.
       10717    ...00200                 fort_cg_macros_:   6458.
       10735    ...00201                 fort_cg_macros_:   6482.
       10737    ...00202                 fort_cg_macros_:   6483.
       11001    ...00203                 fort_cg_macros_:   6542.
       11020    ...00204                 fort_cg_macros_:   6570.
       11036    ...00205                 fort_cg_macros_:   6589.
       11053    ...00206                 fort_cg_macros_:   6612.
       11055    ...00207                 fort_cg_macros_:   6615.
       11300    ...00210                 fort_cg_macros_:   6847.
       11315    ...00211                 fort_cg_macros_:   6864.
       11332    ...00212                 fort_cg_macros_:   6882.
       11354    ...00213                 fort_cg_macros_:   6904.
       11357    ...00214                 fort_cg_macros_:   6908.
       11413    ...00215                 fort_cg_macros_:   6940.
       11416    ...00216                 fort_cg_macros_:   6944.
       11421    ...00217                 fort_cg_macros_:   6948.
       11441    ...00220                 fort_cg_macros_:   6985.
       11501    ...00221                 fort_cg_macros_:   7039.
       11503    ...00222                 fort_cg_macros_:   7043.
       11506    ...00223                 fort_cg_macros_:   7047.
       11511    ...00224                 fort_cg_macros_:   7051.
       11525    ...00225                 fort_cg_macros_:   7066.
       11544    ...00226                 fort_cg_macros_:   7096.
       11613    ...00227                 fort_cg_macros_:   7189.
       11616    ...00230                 fort_cg_macros_:   7194.
       11620    ...00231                 fort_cg_macros_:   7198.
       11623    ...00232                 fort_cg_macros_:   7202.
       11626    ...00233                 fort_cg_macros_:   7206.
       11652    ...00234                 fort_cg_macros_:   7235.
       11664    ...00235                 fort_cg_macros_:   7251.
       11675    ...00236                 fort_cg_macros_:   7265.
       11702    ...00237                 fort_cg_macros_:   7273.
       11740    ...00240                 fort_cg_macros_:   7323.
       11755    ...00241                 fort_cg_macros_:   7344.
       12050    ...00242                 fort_cg_macros_:   7430.
       12061    ...00243                 fort_cg_macros_:   7446.
       12063    ...00244                 fort_cg_macros_:   7447.
       12066    ...00245                 fort_cg_macros_:   7451.
       12102    ...00246                 fort_cg_macros_:   7472.
       12206    ...00247                 fort_cg_macros_:   7564.
       12214    ...00250                 fort_cg_macros_:   7571.
       12246    ...00251                 fort_cg_macros_:   7610.
       12302    ...00252                 fort_cg_macros_:   7646.
       12304    ...00253                 fort_cg_macros_:   7649.
       12310    ...00255                 fort_cg_macros_:   7654.
       12313    ...00256                 fort_cg_macros_:   7658.
       12374    ...00257                 fort_cg_macros_:   7746.
       12431    ...00260                 fort_cg_macros_:   7783.
       12451    ...00261                 fort_cg_macros_:   7823.
       12457    ...00262                 fort_cg_macros_:   7836.
       12540    ...00263                 fort_cg_macros_:   7913.
       12710    ...00264                 fort_cg_macros_:   8096.
       12720    ...00265                 fort_cg_macros_:   8122.
       12743    ...00266                 fort_cg_macros_:   8170.
       13052    ...00267                 fort_cg_macros_:   8215.
       13204    ...00270                 fort_cg_macros_:   8375.
       13220    ...00271                 fort_cg_macros_:   8392.
       13222    ...00272                 fort_cg_macros_:   8393.
       13226    ...00273                 fort_cg_macros_:   8397.
       13230    ...00274                 fort_cg_macros_:   8398.
       13350    ...00275                 fort_cg_macros_:   8547.
       13352    ...00276                 fort_cg_macros_:   8550.
       13356    ...00277                 fort_cg_macros_:   8580.
         472    .._00000                 fort_cg_macros_:    286.
         475    .._00001                 fort_cg_macros_:    289.
          24    .._00003                 fort_cg_macros_:    296.
           1    .._00004                 fort_cg_macros_:    383.
           7    .._00007                 fort_cg_macros_:    395.
           2    .._00010                 fort_cg_macros_:    425.
           1    .._00014                 fort_cg_macros_:    429.
           1    .._00017                 fort_cg_macros_:    433.
           6    .._00022                 fort_cg_macros_:    437.
          24    .._00023                 fort_cg_macros_:    458.
           1    .._00024                 fort_cg_macros_:    607.
           1    .._00027                 fort_cg_macros_:    610.
           7    .._00032                 fort_cg_macros_:    614.
          24    .._00033                 fort_cg_macros_:    622.
           1    .._00034                 fort_cg_macros_:    959.
           1    .._00037                 fort_cg_macros_:    962.
           7    .._00042                 fort_cg_macros_:    966.
          24    .._00043                 fort_cg_macros_:    975.
           7    .._00044                 fort_cg_macros_:   1134.
           1    .._00045                 fort_cg_macros_:   1147.
           1    .._00050                 fort_cg_macros_:   1150.
          24    .._00053                 fort_cg_macros_:   1154.
           7    .._00054                 fort_cg_macros_:   1349.
           1    .._00055                 fort_cg_macros_:   1358.
           1    .._00060                 fort_cg_macros_:   1361.
          24    .._00063                 fort_cg_macros_:   1444.
           1    .._00064                 fort_cg_macros_:   1659.
           1    .._00067                 fort_cg_macros_:   1662.
           1    .._00072                 fort_cg_macros_:   1671.
        2502    .._00075                 fort_cg_macros_:   1780.
        2536    .._00076                 fort_cg_macros_:   1829.
        2621    .._00077                 fort_cg_macros_:   1908.
        2665    .._00100                 fort_cg_macros_:   1960.
          24    .._00101                 fort_cg_macros_:   1980.
           1    .._00102                 fort_cg_macros_:   2024.
           1    .._00105                 fort_cg_macros_:   2034.
           1    .._00110                 fort_cg_macros_:   2041.
           1    .._00113                 fort_cg_macros_:   2048.
           1    .._00116                 fort_cg_macros_:   2052.
           1    .._00121                 fort_cg_macros_:   2056.
         135    .._00124                 fort_cg_macros_:   2066.
           1    .._00125                 fort_cg_macros_:   2071.
        3060    .._00130                 fort_cg_macros_:   2077.
         135    .._00131                 fort_cg_macros_:   2079.
         135    .._00132                 fort_cg_macros_:   2100.
         135    .._00133                 fort_cg_macros_:   2103.
        3313    .._00134                 fort_cg_macros_:   2107.
        3320    .._00135                 fort_cg_macros_:   2116.
        3325    .._00136                 fort_cg_macros_:   2121.
        3331    .._00137                 fort_cg_macros_:   2126.
        3335    .._00140                 fort_cg_macros_:   2131.
        3341    .._00141                 fort_cg_macros_:   2136.
        3345    .._00142                 fort_cg_macros_:   2141.
        3351    .._00143                 fort_cg_macros_:   2146.
        3355    .._00144                 fort_cg_macros_:   2151.
        3361    .._00145                 fort_cg_macros_:   2156.
        3405    .._00146                 fort_cg_macros_:   2187.
           1    .._00150                 fort_cg_macros_:   2192.
           2    .._00154                 fort_cg_macros_:   2197.
           1    .._00160                 fort_cg_macros_:   2202.
          24    .._00163                 fort_cg_macros_:   2393.
          24    .._00164                 fort_cg_macros_:   2551.
          24    .._00165                 fort_cg_macros_:   2746.
          24    .._00166                 fort_cg_macros_:   3093.
          24    .._00167                 fort_cg_macros_:   3440.
          24    .._00170                 fort_cg_macros_:   3545.
           7    .._00171                 fort_cg_macros_:   3864.
           7    .._00172                 fort_cg_macros_:   3903.
           7    .._00173                 fort_cg_macros_:   3942.
           7    .._00174                 fort_cg_macros_:   3981.
           7    .._00175                 fort_cg_macros_:   4020.
           7    .._00176                 fort_cg_macros_:   4047.
           7    .._00177                 fort_cg_macros_:   4074.
           7    .._00200                 fort_cg_macros_:   4103.
           7    .._00201                 fort_cg_macros_:   4149.
           1    .._00202                 fort_cg_macros_:   4173.
           7    .._00205                 fort_cg_macros_:   4176.
          24    .._00206                 fort_cg_macros_:   4208.
           1    .._00207                 fort_cg_macros_:   4284.
        6103    .._00212                 fort_cg_macros_:   4301.
        6114    .._00213                 fort_cg_macros_:   4311.
           7    .._00214                 fort_cg_macros_:   4690.
           7    .._00215                 fort_cg_macros_:   4693.
           7    .._00216                 fort_cg_macros_:   4702.
           7    .._00217                 fort_cg_macros_:   4705.
           7    .._00220                 fort_cg_macros_:   4714.
           7    .._00221                 fort_cg_macros_:   4717.
           7    .._00222                 fort_cg_macros_:   4726.
           7    .._00223                 fort_cg_macros_:   4729.
           2    .._00224                 fort_cg_macros_:   4772.
           2    .._00230                 fort_cg_macros_:   4776.
           2    .._00234                 fort_cg_macros_:   4780.
           2    .._00240                 fort_cg_macros_:   4784.
           2    .._00244                 fort_cg_macros_:   4788.
           2    .._00250                 fort_cg_macros_:   4791.
           1    .._00254                 fort_cg_macros_:   4795.
           1    .._00257                 fort_cg_macros_:   4798.
           1    .._00262                 fort_cg_macros_:   4801.
           1    .._00265                 fort_cg_macros_:   4804.
           1    .._00270                 fort_cg_macros_:   4807.
           1    .._00273                 fort_cg_macros_:   4810.
          24    .._00276                 fort_cg_macros_:   4818.
           1    .._00277                 fort_cg_macros_:   4906.
           1    .._00302                 fort_cg_macros_:   4909.
           1    .._00305                 fort_cg_macros_:   4912.
           1    .._00310                 fort_cg_macros_:   4915.
           2    .._00313                 fort_cg_macros_:   4918.
           2    .._00317                 fort_cg_macros_:   4921.
           2    .._00323                 fort_cg_macros_:   4924.
           7    .._00327                 fort_cg_macros_:   4928.
           7    .._00330                 fort_cg_macros_:   4973.
           7    .._00331                 fort_cg_macros_:   4994.
          24    .._00332                 fort_cg_macros_:   5012.
           1    .._00333                 fort_cg_macros_:   5100.
           1    .._00336                 fort_cg_macros_:   5103.
           1    .._00341                 fort_cg_macros_:   5106.
           1    .._00344                 fort_cg_macros_:   5109.
           2    .._00347                 fort_cg_macros_:   5112.
           2    .._00353                 fort_cg_macros_:   5115.
           2    .._00357                 fort_cg_macros_:   5118.
           7    .._00363                 fort_cg_macros_:   5122.
           7    .._00364                 fort_cg_macros_:   5167.
           7    .._00365                 fort_cg_macros_:   5188.
          24    .._00366                 fort_cg_macros_:   5206.
           1    .._00367                 fort_cg_macros_:   5257.
           1    .._00372                 fort_cg_macros_:   5260.
           1    .._00375                 fort_cg_macros_:   5263.
           1    .._00400                 fort_cg_macros_:   5266.
           2    .._00403                 fort_cg_macros_:   5269.
           2    .._00407                 fort_cg_macros_:   5272.
           1    .._00413                 fort_cg_macros_:   5284.
           7    .._00416                 fort_cg_macros_:   5292.
           7    .._00417                 fort_cg_macros_:   5337.
           7    .._00420                 fort_cg_macros_:   5358.
          24    .._00421                 fort_cg_macros_:   5371.
           1    .._00422                 fort_cg_macros_:   5422.
           1    .._00425                 fort_cg_macros_:   5425.
           1    .._00430                 fort_cg_macros_:   5428.
           1    .._00433                 fort_cg_macros_:   5431.
           2    .._00436                 fort_cg_macros_:   5434.
           2    .._00442                 fort_cg_macros_:   5437.
           1    .._00446                 fort_cg_macros_:   5449.
           7    .._00451                 fort_cg_macros_:   5457.
           7    .._00452                 fort_cg_macros_:   5502.
           7    .._00453                 fort_cg_macros_:   5524.
          24    .._00454                 fort_cg_macros_:   5536.
           1    .._00455                 fort_cg_macros_:   5624.
           1    .._00460                 fort_cg_macros_:   5627.
           1    .._00463                 fort_cg_macros_:   5630.
           1    .._00466                 fort_cg_macros_:   5633.
           2    .._00471                 fort_cg_macros_:   5636.
           2    .._00475                 fort_cg_macros_:   5639.
           2    .._00501                 fort_cg_macros_:   5642.
           7    .._00505                 fort_cg_macros_:   5646.
           7    .._00506                 fort_cg_macros_:   5691.
           7    .._00507                 fort_cg_macros_:   5712.
          24    .._00510                 fort_cg_macros_:   5729.
           1    .._00511                 fort_cg_macros_:   5817.
           1    .._00514                 fort_cg_macros_:   5820.
           1    .._00517                 fort_cg_macros_:   5823.
           1    .._00522                 fort_cg_macros_:   5826.
           2    .._00525                 fort_cg_macros_:   5829.
           2    .._00531                 fort_cg_macros_:   5832.
           2    .._00535                 fort_cg_macros_:   5835.
           7    .._00541                 fort_cg_macros_:   5839.
           7    .._00542                 fort_cg_macros_:   5884.
           7    .._00543                 fort_cg_macros_:   5905.
           1    .._00544                 fort_cg_macros_:   5929.
           1    .._00547                 fort_cg_macros_:   5932.
           1    .._00552                 fort_cg_macros_:   5945.
           1    .._00555                 fort_cg_macros_:   5948.
          10    .._00560                 fort_cg_macros_:   5961.
           1    .._00561                 fort_cg_macros_:   5988.
           1    .._00564                 fort_cg_macros_:   6019.
          10    .._00567                 fort_cg_macros_:   6054.
           1    .._00570                 fort_cg_macros_:   6089.
       10366    .._00573                 fort_cg_macros_:   6090.
       10373    .._00574                 fort_cg_macros_:   6097.
           1    .._00575                 fort_cg_macros_:   6242.
       10530    .._00600                 fort_cg_macros_:   6253.
       10532    .._00601                 fort_cg_macros_:   6255.
           0    .._00602                 fort_cg_macros_:   6309.
       10573    .._00604                 fort_cg_macros_:   6311.
       10575    .._00605                 fort_cg_macros_:   6312.
           1    .._00606                 fort_cg_macros_:   6316.
           1    .._00611                 fort_cg_macros_:   6320.
       10606    .._00614                 fort_cg_macros_:   6322.
       10610    .._00615                 fort_cg_macros_:   6323.
           1    .._00616                 fort_cg_macros_:   6333.
           1    .._00621                 fort_cg_macros_:   6345.
           1    .._00624                 fort_cg_macros_:   6354.
           1    .._00627                 fort_cg_macros_:   6378.
          10    .._00632                 fort_cg_macros_:   6409.
       10722    .._00633                 fort_cg_macros_:   6458.
           1    .._00634                 fort_cg_macros_:   6482.
       10742    .._00637                 fort_cg_macros_:   6483.
          10    .._00640                 fort_cg_macros_:   6507.
           1    .._00641                 fort_cg_macros_:   6542.
           1    .._00644                 fort_cg_macros_:   6570.
           1    .._00647                 fort_cg_macros_:   6589.
           1    .._00652                 fort_cg_macros_:   6612.
           1    .._00655                 fort_cg_macros_:   6615.
           7    .._00660                 fort_cg_macros_:   6653.
           7    .._00661                 fort_cg_macros_:   6697.
           7    .._00662                 fort_cg_macros_:   6770.
           1    .._00663                 fort_cg_macros_:   6847.
           1    .._00666                 fort_cg_macros_:   6864.
           1    .._00671                 fort_cg_macros_:   6882.
           1    .._00674                 fort_cg_macros_:   6904.
           1    .._00677                 fort_cg_macros_:   6908.
           1    .._00702                 fort_cg_macros_:   6940.
           1    .._00705                 fort_cg_macros_:   6944.
           1    .._00710                 fort_cg_macros_:   6948.
       11444    .._00713                 fort_cg_macros_:   6985.
          16    .._00714                 fort_cg_macros_:   6993.
           0    .._00715                 fort_cg_macros_:   7039.
           1    .._00717                 fort_cg_macros_:   7043.
           1    .._00722                 fort_cg_macros_:   7047.
           1    .._00725                 fort_cg_macros_:   7051.
           1    .._00730                 fort_cg_macros_:   7066.
       11547    .._00733                 fort_cg_macros_:   7096.
          32    .._00734                 fort_cg_macros_:   7102.
           1    .._00735                 fort_cg_macros_:   7189.
           0    .._00740                 fort_cg_macros_:   7194.
           1    .._00742                 fort_cg_macros_:   7198.
           1    .._00745                 fort_cg_macros_:   7202.
           1    .._00750                 fort_cg_macros_:   7206.
           1    .._00753                 fort_cg_macros_:   7235.
           1    .._00756                 fort_cg_macros_:   7251.
           1    .._00761                 fort_cg_macros_:   7265.
           1    .._00764                 fort_cg_macros_:   7273.
           0    .._00767                 fort_cg_macros_:   7323.
       11757    .._00771                 fort_cg_macros_:   7344.
          24    .._00772                 fort_cg_macros_:   7348.
           1    .._00773                 fort_cg_macros_:   7430.
           1    .._00776                 fort_cg_macros_:   7446.
       12065    .._01001                 fort_cg_macros_:   7447.
           1    .._01002                 fort_cg_macros_:   7451.
       12104    .._01005                 fort_cg_macros_:   7472.
          24    .._01006                 fort_cg_macros_:   7474.
           2    .._01007                 fort_cg_macros_:   7564.
           2    .._01013                 fort_cg_macros_:   7571.
       12251    .._01017                 fort_cg_macros_:   7610.
           7    .._01020                 fort_cg_macros_:   7612.
           1    .._01021                 fort_cg_macros_:   7646.
       12307    .._01024                 fort_cg_macros_:   7649.
           1    .._01026                 fort_cg_macros_:   7654.
           1    .._01031                 fort_cg_macros_:   7658.
       12377    .._01034                 fort_cg_macros_:   7746.
           2    .._01035                 fort_cg_macros_:   7783.
           1    .._01041                 fort_cg_macros_:   7823.
           2    .._01044                 fort_cg_macros_:   7836.
           7    .._01050                 fort_cg_macros_:   7872.
           1    .._01051                 fort_cg_macros_:   7913.
       12713    .._01054                 fort_cg_macros_:   8096.
           1    .._01055                 fort_cg_macros_:   8122.
       12746    .._01060                 fort_cg_macros_:   8170.
         135    .._01061                 fort_cg_macros_:   8202.
           1    .._01062                 fort_cg_macros_:   8215.
       13207    .._01065                 fort_cg_macros_:   8375.
           1    .._01066                 fort_cg_macros_:   8392.
       13225    .._01071                 fort_cg_macros_:   8393.
           1    .._01072                 fort_cg_macros_:   8397.
       13233    .._01075                 fort_cg_macros_:   8398.
           1    .._01076                 fort_cg_macros_:   8547.
           0    .._01101                 fort_cg_macros_:   8550.
           0    .._01103                 fort_cg_macros_:   8580.
           0    .text.                   fort_cg_macros_:    185.
        1000    a                        fort_cg_macros_:    390,  391,  403,  404, 1263, 1620, 1633, 4940, 4980, 5134, 5174,
                                                            5287, 5304, 5344, 5452, 5469, 5509, 5658, 5698, 5851, 5891, 5924,
                                                            5926, 5940, 5942, 5956, 5958, 5998, 6012, 6040, 6043, 6400, 6401,
                                                            6498, 6499, 7028, 7379, 7404, 7426, 7580, 7641,
                                         fort_equs:     74.
         472    abort_list               fort_cg_macros_:    182,  288, 7040, 7044, 7048, 7052, 7190, 7195, 7199, 7203, 7207,
                                                            8096, 8170.
        3401    abort_list_op            fort_cg_macros_:   2059, 2183.
        3420    abs                      fort_cg_macros_:   2100, 2206.
        3432    abs.1                    fort_cg_macros_:   2208, 2221.
        6176    acos                     fort_cg_macros_:   2100, 4395.
        6202    acos.1                   fort_cg_macros_:   4397, 4401.
        6205    acos.2                   fort_cg_macros_:   4403, 4408.
        6224    acos.p                   fort_cg_macros_:   4399, 4428.
        1305    acos_                    fort_cg_macros_:   4412,
                                         fort_equs:    238.
        6204    acos_i                   fort_cg_macros_:   4396, 4405.
         660    add                      fort_cg_macros_:    456,
                                         fort_operator_table:       18.
         774    add_cc                   fort_cg_macros_:    458,  571.
        1002    add_cc.01                fort_cg_macros_:    580,  600.
        1010    add_cc.1                 fort_cg_macros_:    574,  588.
        1011    add_cc.11                fort_cg_macros_:    590,  604.
        1017    add_cc.2                 fort_cg_macros_:    575,  598.
        1021    add_cc.3                 fort_cg_macros_:    576,  602.
         753    add_cd                   fort_cg_macros_:    458,  545.
         764    add_cd.1                 fort_cg_macros_:    548,  558.
         765    add_cd.11                fort_cg_macros_:    560,  569.
         772    add_cd.2                 fort_cg_macros_:    549,  567.
         725    add_ci                   fort_cg_macros_:    458,  508.
         731    add_cr                   fort_cg_macros_:    458,  516.
         742    add_cr.1                 fort_cg_macros_:    511,  519,  529.
         743    add_cr.11                fort_cg_macros_:    531,  540.
         750    add_cr.2                 fort_cg_macros_:    520,  538.
         752    add_dc                   fort_cg_macros_:    458,  542.
         712    add_dd                   fort_cg_macros_:    458,  486.
         704    add_di                   fort_cg_macros_:    458,  476.
         716    add_dr                   fort_cg_macros_:    458,  494.
         722    add_dr.1                 fort_cg_macros_:    495,  501.
        1023    add_e1                   fort_cg_macros_:    458,  606,  614.
        1025    add_e2                   fort_cg_macros_:    458,  609.
         724    add_ic                   fort_cg_macros_:    458,  505.
         703    add_id                   fort_cg_macros_:    458,  473.
         674    add_ii                   fort_cg_macros_:    458,  460.
         677    add_ir                   fort_cg_macros_:    458,  465.
         730    add_rc                   fort_cg_macros_:    458,  513.
         715    add_rd                   fort_cg_macros_:    458,  491.
         700    add_ri                   fort_cg_macros_:    458,  468.
         707    add_rr                   fort_cg_macros_:    458,  481.
        1027    add_tl                   fort_cg_macros_:    458,  612.
        1035    add_tl.1                 fort_cg_macros_:    614,  616.
        5711    aimag                    fort_cg_macros_:   2100, 4139.
        5714    aimag.p                  fort_cg_macros_:   4140, 4145.
        5603    aint                     fort_cg_macros_:   2100, 4019.
        5615    aint.dp                  fort_cg_macros_:   4020, 4031, 4039.
        5610    aint.int                 fort_cg_macros_:   4020, 4022.
        5622    aint.p                   fort_cg_macros_:   4020, 4042.
        5612    aint.real                fort_cg_macros_:   4020, 4026.
      777760    all                      fort_cg_macros_:   7606, 8005, 8266, 8319,
                                         fort_equs:    124.
         110    all_ones                 fort_cg_macros_:   2217,
                                         fort_equs:    177.
         242    almost_one               fort_equs:    280.
        3462    alog                     fort_cg_macros_:   2100, 2259.
        3466    alog.1                   fort_cg_macros_:   2261, 2265.
        3471    alog.2                   fort_cg_macros_:   2267, 2272.
        3525    alog10                   fort_cg_macros_:   2100, 2312.
        3531    alog10.1                 fort_cg_macros_:   2314, 2318.
        3534    alog10.2                 fort_cg_macros_:   2320, 2325.
        3554    alog10.p                 fort_cg_macros_:   2316, 2346.
        1313    alog10_                  fort_cg_macros_:   2330,
                                         fort_equs:    211.
        3533    alog10_i                 fort_cg_macros_:   2313, 2322.
        3470    alog_i                   fort_cg_macros_:   2260, 2269.
        4341    amax0                    fort_cg_macros_:   2100, 2935.
        4351    amax0.loop               fort_cg_macros_:   2946, 2958.
        4365    amax0.p                  fort_cg_macros_:   2938, 2940, 2957, 2964.
        4363    amax0.r                  fort_cg_macros_:   2952, 2960.
        4366    amax1                    fort_cg_macros_:   2100, 2967.
        4375    amax1.loop               fort_cg_macros_:   2977, 2989.
        4410    amax1.p                  fort_cg_macros_:   2970, 2972, 2988, 2994.
        4407    amax1.r                  fort_cg_macros_:   2983, 2991.
        4670    amin0                    fort_cg_macros_:   2100, 3282.
        4700    amin0.loop               fort_cg_macros_:   3293, 3305.
        4714    amin0.p                  fort_cg_macros_:   3285, 3287, 3304, 3311.
        4712    amin0.r                  fort_cg_macros_:   3299, 3307.
        4715    amin1                    fort_cg_macros_:   2100, 3314.
        4725    amin1.loop               fort_cg_macros_:   3325, 3337.
        4740    amin1.p                  fort_cg_macros_:   3317, 3319, 3336, 3342.
        4737    amin1.r                  fort_cg_macros_:   3331, 3339.
        5105    amod                     fort_cg_macros_:   2100, 3508.
        5111    amod.1                   fort_cg_macros_:   3447, 3451, 3462, 3514.
        5132    amod.p                   fort_cg_macros_:   3510, 3512, 3540.
       10235    and                      fort_cg_macros_:   5934,
                                         fort_operator_table:       31.
        6421    and.tl                   fort_cg_macros_:   2100, 4658.
        6424    and.tl.loop              fort_cg_macros_:   4663, 4670.
        6433    and.tl.r                 fort_cg_macros_:   4666, 4672.
       10244    and_e1                   fort_cg_macros_:   5938, 5944.
       10246    and_e2                   fort_cg_macros_:   5936, 5947.
        5623    anint                    fort_cg_macros_:   2100, 4046.
        5635    anint.dp                 fort_cg_macros_:   4047, 4058, 4066.
        5630    anint.int                fort_cg_macros_:   4047, 4049.
        5642    anint.p                  fort_cg_macros_:   4047, 4069.
        5632    anint.real               fort_cg_macros_:   4047, 4053.
        1400    aq                       fort_cg_macros_:    376,  377,  411,  412, 1124, 1129, 1271, 1340, 1345, 1582, 1607,
                                                            1644, 1649, 1656, 2138, 2240, 2296, 2534, 2728, 3801, 3850, 4193,
                                                            4194, 4953, 4988, 5147, 5182, 5275, 5317, 5352, 5440, 5482, 5517,
                                                            5671, 5706, 5864, 5899, 7417, 7559, 7635, 8227,
                                         fort_equs:     75.
       40000    arg1                     fort_cg_macros_:    201,  207,  210,  227,  231,  234,  253,  269,  275,  300,  305,
                                                             310,  315,  320,  325,  330,  335,  340,  345,  354,  360,  363,
                                                             368,  377,  386,  390,  395,  420,  425,  433,  437,  444,  448,
                                                             450,  462,  466,  470,  474,  478,  483,  488,  492,  497,  502,
                                                             506,  514,  520,  522,  524,  530,  534,  543,  549,  551,  553,
                                                             559,  563,  576,  578,  583,  589,  593,  599,  607,  614,  617,
                                                             625,  630,  633,  644,  652,  660,  664,  667,  678,  686,  694,
                                                             701,  708,  715,  722,  729,  736,  743,  750,  756,  760,  761,
                                                             768,  769,  796,  803,  822,  830,  832,  834,  843,  847,  859,
                                                             866,  885,  893,  895,  897,  906,  910,  924,  926,  931,  939,
                                                             943,  951,  959,  966,  967,  980,  989,  993,  997, 1001, 1006,
                                                            1011, 1015, 1020, 1025, 1029, 1058, 1064, 1066, 1070, 1077, 1081,
                                                            1091, 1097, 1099, 1103, 1110, 1114, 1124, 1134, 1138, 1147, 1158,
                                                            1163, 1166, 1171, 1175, 1178, 1183, 1189, 1194, 1200, 1205, 1209,
                                                            1215, 1219, 1223, 1224, 1233, 1263, 1277, 1279, 1284, 1291, 1298,
                                                            1304, 1306, 1313, 1315, 1320, 1327, 1334, 1340, 1349, 1350, 1358,
                                                            1449, 1460, 1464, 1465, 1473, 1479, 1490, 1494, 1495, 1503, 1509,
                                                            1521, 1534, 1546, 1552, 1563, 1567, 1569, 1581, 1582, 1612, 1614,
                                                            1620, 1638, 1649, 1659, 1721, 1726, 1730, 1736, 1743, 1757, 1785,
                                                            1833, 1843, 1854, 1864, 1874, 1888, 1912, 1915, 1926, 1940, 1964,
                                                            1967, 1983, 1986, 1992, 1998, 2004, 2010, 2013, 2016, 2020, 2027,
                                                            2037, 2044, 2052, 2065, 2071, 2192, 2197, 4173, 4284, 4772, 4776,
                                                            4780, 4784, 4788, 4791, 4823, 4828, 4832, 4835, 4840, 4844, 4847,
                                                            4852, 4858, 4865, 4871, 4878, 4884, 4890, 4896, 4902, 4909, 4915,
                                                            4918, 4921, 4924, 4928, 4935, 4938, 4941, 4948, 4951, 4954, 4962,
                                                            4970, 4981, 4989, 4999, 5004, 5017, 5022, 5026, 5029, 5034, 5038,
                                                            5041, 5046, 5052, 5059, 5065, 5072, 5078, 5084, 5090, 5096, 5103,
                                                            5109, 5112, 5115, 5118, 5122, 5129, 5132, 5134, 5142, 5145, 5147,
                                                            5157, 5164, 5174, 5182, 5193, 5198, 5210, 5214, 5218, 5222, 5226,
                                                            5232, 5238, 5242, 5247, 5253, 5260, 5266, 5269, 5272, 5276, 5281,
                                                            5288, 5292, 5299, 5302, 5305, 5312, 5315, 5318, 5326, 5334, 5345,
                                                            5353, 5362, 5375, 5379, 5383, 5387, 5391, 5397, 5403, 5407, 5412,
                                                            5418, 5425, 5431, 5434, 5437, 5441, 5446, 5453, 5457, 5464, 5467,
                                                            5470, 5477, 5480, 5483, 5491, 5499, 5510, 5518, 5528, 5541, 5546,
                                                            5550, 5553, 5558, 5562, 5565, 5570, 5576, 5583, 5589, 5596, 5602,
                                                            5608, 5614, 5620, 5627, 5633, 5636, 5639, 5642, 5646, 5653, 5656,
                                                            5659, 5666, 5669, 5672, 5680, 5688, 5699, 5707, 5717, 5722, 5734,
                                                            5739, 5743, 5746, 5751, 5755, 5758, 5763, 5769, 5776, 5782, 5789,
                                                            5795, 5801, 5807, 5813, 5820, 5826, 5829, 5832, 5835, 5839, 5846,
                                                            5849, 5851, 5859, 5862, 5864, 5874, 5881, 5891, 5899, 5910, 5915,
                                                            5921, 5925, 5929, 5937, 5941, 5945, 5993, 5999, 6007, 6013, 6026,
                                                            6038, 6040, 6094, 6105, 6113, 6115, 6120, 6125, 6126, 6131, 6137,
                                                            6141, 6143, 6148, 6155, 6159, 6164, 6188, 6191, 6196, 6200, 6203,
                                                            6207, 6210, 6217, 6220, 6228, 6237, 6247, 6249, 6287, 6316, 6339,
                                                            6357, 6363, 6364, 6373, 6374, 6384, 6386, 6398, 6400, 6448, 6450,
                                                            6462, 6478, 6503, 6510, 6514, 6518, 6522, 6526, 6530, 6534, 6538,
                                                            6556, 6560, 6561, 6575, 6579, 6580, 6605, 6612, 6615, 6618, 6619,
                                                            6629, 6640, 6651, 6677, 6695, 6746, 6753, 6765, 6768, 6835, 6839,
                                                            6852, 6856, 6870, 6874, 6888, 6890, 6892, 6913, 6915, 6932, 7034,
                                                            7055, 7213, 7226, 7235, 7244, 7259, 7265, 7273, 7276, 7285, 7298,
                                                            7301, 7306, 7309, 7315, 7338, 7346, 7430, 7439, 7446, 7451, 7461,
                                                            7564, 7571, 7600, 7603, 7612, 7646, 7654, 7658, 7700, 7703, 7722,
                                                            7725, 7783, 7802, 7804, 7836, 7872, 7875, 7913, 7956, 7963, 8014,
                                                            8063, 8064, 8077, 8116, 8117, 8122, 8146, 8200, 8215, 8220, 8236,
                                                            8242, 8248, 8264, 8268, 8270, 8280, 8311, 8317, 8321, 8334, 8341,
                                                            8364, 8421, 8439, 8449, 8459, 8460, 8469, 8470, 8481, 8482, 8493,
                                                            8494, 8503, 8504, 8511, 8521, 8523, 8530,
                                         fort_equs:     30.
      100000    arg2                     fort_cg_macros_:    208,  214,  254,  270,  274,  299,  324,  329,  334,  339,  353,
                                                             358,  367,  372,  376,  391,  419,  440,  449,  495,  498,  519,
                                                             525,  539,  548,  554,  568,  574,  575,  579,  584,  594,  603,
                                                             610,  626,  637,  642,  649,  671,  676,  683,  699,  702,  713,
                                                             716,  727,  730,  741,  744,  775,  779,  781,  788,  789,  797,
                                                             799,  804,  809,  813,  829,  835,  852,  860,  862,  867,  872,
                                                             876,  892,  898,  915,  922,  923,  927,  932,  944,  955,  962,
                                                             970, 1018, 1021, 1034, 1038, 1041, 1045, 1046, 1053, 1054, 1063,
                                                            1067, 1071, 1080, 1087, 1096, 1100, 1104, 1113, 1120, 1125, 1150,
                                                            1159, 1187, 1190, 1198, 1201, 1210, 1214, 1239, 1243, 1246, 1250,
                                                            1251, 1258, 1259, 1266, 1276, 1281, 1285, 1295, 1299, 1312, 1317,
                                                            1321, 1331, 1335, 1341, 1354, 1361, 1450, 1480, 1510, 1523, 1536,
                                                            1553, 1590, 1594, 1595, 1606, 1607, 1633, 1651, 1662, 1720, 1723,
                                                            1756, 1766, 1815, 1887, 1893, 1939, 1945, 2069, 2076, 2097, 2745,
                                                            2838, 2840, 2842, 2879, 2881, 2883, 2925, 2927, 2929, 2936, 2952,
                                                            2954, 2956, 2968, 2983, 2985, 2987, 2998, 3013, 3015, 3017, 3028,
                                                            3045, 3047, 3049, 3061, 3077, 3079, 3081, 3092, 3185, 3187, 3189,
                                                            3226, 3228, 3230, 3272, 3274, 3276, 3283, 3299, 3301, 3303, 3315,
                                                            3331, 3333, 3335, 3346, 3361, 3363, 3365, 3376, 3393, 3395, 3397,
                                                            3409, 3425, 3427, 3429, 4171, 4172, 4659, 4666, 4667, 4669, 4738,
                                                            4745, 4746, 4748, 4755, 4762, 4763, 4765, 4821, 4824, 4856, 4860,
                                                            4869, 4873, 4882, 4885, 4894, 4898, 4906, 4912, 4918, 4921, 4924,
                                                            4940, 4953, 4963, 4973, 4978, 4980, 4986, 4988, 4997, 5000, 5015,
                                                            5018, 5050, 5054, 5063, 5067, 5076, 5079, 5088, 5092, 5100, 5106,
                                                            5112, 5115, 5118, 5135, 5148, 5156, 5167, 5172, 5175, 5180, 5183,
                                                            5191, 5194, 5245, 5249, 5257, 5263, 5269, 5272, 5327, 5337, 5342,
                                                            5350, 5410, 5414, 5422, 5428, 5434, 5437, 5492, 5502, 5507, 5515,
                                                            5539, 5542, 5574, 5578, 5587, 5591, 5600, 5603, 5612, 5616, 5624,
                                                            5630, 5636, 5639, 5642, 5658, 5671, 5681, 5691, 5696, 5698, 5704,
                                                            5706, 5715, 5718, 5732, 5735, 5767, 5771, 5780, 5784, 5793, 5796,
                                                            5805, 5809, 5817, 5823, 5829, 5832, 5835, 5852, 5865, 5873, 5884,
                                                            5889, 5892, 5897, 5900, 5908, 5911, 5932, 5948, 6163, 6178, 6181,
                                                            6186, 6201, 6205, 6211, 6229, 6236, 6299, 6301, 6302, 6362, 6372,
                                                            6460, 6461, 6467, 6496, 6498, 6562, 6581, 6766, 6819, 6838, 6855,
                                                            6873, 6894, 6916, 6919, 6923, 6925, 7058, 7088, 7299, 7303, 7456,
                                                            7597, 7601, 7808, 7810, 7904, 7971, 8234, 8261, 8262, 8303, 8305,
                                                            8343, 8350, 8367, 8440, 8450, 8467, 8479, 8492, 8538,
                                         fort_equs:     31.
      140000    arg3                     fort_cg_macros_:    215,  220,  276, 1725, 1728, 1765, 1802, 1811, 1816, 1845, 1855,
                                                            1866, 1892, 1944, 2066, 2079, 2100, 2103, 6168, 6171, 6176, 6198,
                                                            6208, 6212, 6218, 6221, 6226, 6234, 6286, 6288, 6305, 6465, 6468,
                                                            6474, 6927, 6972, 7091, 7342, 7436, 7465, 7467, 7470, 7596, 8352,
                                                            8359,
                                         fort_equs:     32.
      200000    arg4                     fort_cg_macros_:   1744, 1754, 1761, 1763, 1767, 1784, 1798, 1818, 1837, 1840, 1842,
                                                            1863, 1875, 1885, 1894, 1914, 1927, 1937, 1946, 1966, 2068, 6160,
                                                            6172, 6182, 6192, 6405, 6412, 6416, 6420, 6424, 6428, 6432, 6436,
                                                            6440, 6977,
                                         fort_equs:     33.
      240000    arg5                     fort_cg_macros_:   1778, 1791, 1827, 1846, 1856, 1867, 1906, 1919, 1958, 1971, 2215,
                                                            2222, 2231, 2240, 2266, 2284, 2296, 2319, 2337, 2359, 2377, 2422,
                                                            2465, 2476, 2478, 2482, 2504, 2522, 2534, 2554, 2556, 2562, 2564,
                                                            2569, 2629, 2631, 2638, 2642, 2644, 2648, 2650, 2657, 2661, 2663,
                                                            2670, 2674, 2676, 2682, 2696, 2715, 2728, 3501, 3509, 3511, 3515,
                                                            3522, 3524, 3528, 3537, 3548, 3550, 3555, 3617, 3623, 3625, 3630,
                                                            3638, 3772, 3789, 3801, 3821, 3838, 3850, 3864, 3871, 3883, 3903,
                                                            3910, 3922, 3942, 3949, 3961, 3981, 3984, 4000, 4020, 4027, 4032,
                                                            4047, 4054, 4059, 4074, 4077, 4081, 4087, 4103, 4110, 4114, 4120,
                                                            4142, 4149, 4156, 4160, 4164, 4176, 4183, 4187, 4193, 4213, 4215,
                                                            4228, 4230, 4237, 4245, 4252, 4266, 4292, 4294, 4296, 4308, 4324,
                                                            4341, 4363, 4380, 4402, 4419, 4647, 4649, 4676, 4682, 4690, 4696,
                                                            4702, 4708, 4714, 4720, 4726, 4732, 4780, 6173, 6183, 6193,
                                         fort_equs:     34.
      300000    arg6                     fort_cg_macros_:   1774, 1793, 1819, 1823, 1848, 1858, 1869, 1902, 1921, 1954, 1973,
                                                            2426, 2431, 2433, 2469, 2486, 2564, 2565, 2567, 2631, 2633, 2635,
                                                            2650, 2652, 2654, 2663, 2665, 2667, 2676, 2677, 2679, 3503, 3516,
                                                            3531, 3554, 3616, 3629, 3637, 4212, 4217, 4219, 4224, 4226, 4236,
                                                            4239, 4251, 4256, 4693, 4697, 4705, 4709, 4717, 4721, 4729, 4733,
                                                            4784,
                                         fort_equs:     35.
      340000    arg7                     fort_cg_macros_:   1771, 1790, 1899, 1918, 1951, 1970,
                                         fort_equs:     36.
      100000    array_ref                fort_cg_macros_:   4936, 4949, 4968, 5130, 5143, 5162, 5300, 5313, 5332, 5465, 5478,
                                                            5497, 5654, 5667, 5686, 5847, 5860, 5879,
                                         fort_equs:     96.
        6146    asin                     fort_cg_macros_:   2100, 4356.
        6152    asin.1                   fort_cg_macros_:   4358, 4362.
        6155    asin.2                   fort_cg_macros_:   4364, 4369.
        6174    asin.p                   fort_cg_macros_:   4360, 4389.
        1303    asin_                    fort_cg_macros_:   4373,
                                         fort_equs:    236.
        6154    asin_i                   fort_cg_macros_:   4357, 4366.
         476    assign                   fort_cg_macros_:    294,
                                         fort_operator_table:       17.
         570    assign_cc                fort_cg_macros_:    296,  375.
         566    assign_cd                fort_cg_macros_:    296,  371.
         616    assign_ch                fort_cg_macros_:    395,  408.
         550    assign_ci                fort_cg_macros_:    296,  348.
         555    assign_cr                fort_cg_macros_:    296,  357.
         556    assign_cr.01             fort_cg_macros_:    350,  359,  373.
         563    assign_dc                fort_cg_macros_:    296,  366.
         534    assign_dd                fort_cg_macros_:    296,  328.
         616    assign_dh                fort_cg_macros_:    395,  407.
         526    assign_di                fort_cg_macros_:    296,  318.
         542    assign_dr                fort_cg_macros_:    296,  338.
         637    assign_e1                fort_cg_macros_:    296,  432,  437,  448.
         573    assign_e2                fort_cg_macros_:    296,  380.
         604    assign_h                 fort_cg_macros_:    382,  394.
         623    assign_hh                fort_cg_macros_:    395,  416.
         545    assign_ic                fort_cg_macros_:    296,  343.
         523    assign_id                fort_cg_macros_:    296,  313.
         611    assign_ih                fort_cg_macros_:    395,  397.
         512    assign_ii                fort_cg_macros_:    296,  298.
         515    assign_ir                fort_cg_macros_:    296,  303.
         577    assign_l                 fort_cg_macros_:    381,  385.
       10626    assign_label             fort_cg_macros_:   6348,
                                         fort_operator_table:       38.
       10633    assign_label.1           fort_cg_macros_:   6352, 6356.
       10642    assign_label.2           fort_cg_macros_:   6358, 6370.
       10647    assign_label.e           fort_cg_macros_:   6351, 6377.
         611    assign_lh                fort_cg_macros_:    395,  399.
         552    assign_rc                fort_cg_macros_:    296,  352.
         537    assign_rd                fort_cg_macros_:    296,  333.
         611    assign_rh                fort_cg_macros_:    395,  398.
         520    assign_ri                fort_cg_macros_:    296,  308.
         531    assign_rr                fort_cg_macros_:    296,  323.
         642    assign_t                 fort_cg_macros_:    296,  436.
         654    assign_t.normal          fort_cg_macros_:    437,  447.
         657    assign_t.return          fort_cg_macros_:    445,  452.
         646    assign_t.to_logical      fort_cg_macros_:    437,  439.
         611    assign_th                fort_cg_macros_:    395,  400.
        3556    atan                     fort_cg_macros_:   2100, 2352.
        3562    atan.1                   fort_cg_macros_:   2354, 2358.
        3565    atan.2                   fort_cg_macros_:   2360, 2365.
        3605    atan.p                   fort_cg_macros_:   2356, 2386.
        3607    atan2                    fort_cg_macros_:   2100, 2392.
        3663    atan2.1                  fort_cg_macros_:   2397, 2401, 2405, 2416, 2464.
        3711    atan2.p                  fort_cg_macros_:   2477, 2493.
        1336    atan2_                   fort_cg_macros_:   2471,
                                         fort_equs:    215.
        3660    atan2_cc                 fort_cg_macros_:   2393, 2455.
        3657    atan2_cd                 fort_cg_macros_:   2393, 2452.
        3653    atan2_ci                 fort_cg_macros_:   2393, 2440.
        3655    atan2_cr                 fort_cg_macros_:   2393, 2446.
        3656    atan2_dc                 fort_cg_macros_:   2393, 2449.
        3635    atan2_dd                 fort_cg_macros_:   2393, 2418.
        3632    atan2_di                 fort_cg_macros_:   2393, 2411.
        3644    atan2_dr                 fort_cg_macros_:   2393, 2429.
        3661    atan2_e1                 fort_cg_macros_:   2393, 2458.
        3662    atan2_e2                 fort_cg_macros_:   2393, 2461.
        3711    atan2_ee                 fort_cg_macros_:   2479, 2494.
        3652    atan2_ic                 fort_cg_macros_:   2393, 2437.
        3630    atan2_id                 fort_cg_macros_:   2393, 2407.
        3622    atan2_ii                 fort_cg_macros_:   2393, 2395.
        3624    atan2_ir                 fort_cg_macros_:   2393, 2399.
        3654    atan2_rc                 fort_cg_macros_:   2393, 2443.
        3636    atan2_rd                 fort_cg_macros_:   2393, 2421.
        3626    atan2_ri                 fort_cg_macros_:   2393, 2403.
        3634    atan2_rr                 fort_cg_macros_:   2393, 2415.
        1307    atan_                    fort_cg_macros_:   2370,
                                         fort_equs:    213.
        3564    atan_i                   fort_cg_macros_:   2353, 2362.
           4    auto_overlay             fort_cg_macros_:   8045,
                                         fort_equs:    146.
           3    auto_template            fort_cg_macros_:   8051,
                                         fort_equs:    145.
       11320    backspace                fort_cg_macros_:   6867,
                                         fort_operator_table:       49.
       11332    backspace.p              fort_cg_macros_:   6871, 6881.
        1760    bases                    fort_equs:    123,  124.
        4000    bif                      fort_cg_macros_:   8171,
                                         fort_equs:    100.
         440    blanks                   fort_equs:    178.
       12571    block_data               fort_cg_macros_:   7950,
                                         fort_operator_table:       69.
       10652    block_if                 fort_cg_macros_:   6381,
                                         fort_operator_table:      116.
       10667    block_if.ind             fort_cg_macros_:   6398, 6408.
       10665    block_if.no_cmpa         fort_cg_macros_:   6401, 6404.
       10725    block_if.no_tra          fort_cg_macros_:   6461, 6464.
       10735    block_if.p               fort_cg_macros_:   6385, 6481.
       10714    block_if.pop_predicate   fort_cg_macros_:   6406, 6413, 6417, 6421, 6425, 6429, 6433, 6437, 6441, 6443.
       10700    block_if.tmi             fort_cg_macros_:   6409, 6419.
       10704    block_if.tmoz            fort_cg_macros_:   6409, 6427.
       10710    block_if.tnc             fort_cg_macros_:   6409, 6435.
       10676    block_if.tnz             fort_cg_macros_:   6409, 6415.
       10702    block_if.tpl             fort_cg_macros_:   6409, 6423.
       10706    block_if.tpnz            fort_cg_macros_:   6409, 6431.
       10712    block_if.trc             fort_cg_macros_:   6409, 6439.
       10674    block_if.tze             fort_cg_macros_:   6409, 6411.
       10733    block_if_end             fort_cg_macros_:   6458, 6477.
       10717    block_if_loop            fort_cg_macros_:   6457, 6467, 6475.
        6434    bool.tl                  fort_cg_macros_:   2100, 4675.
         665    bound_ck_signal          fort_cg_macros_:    217,
                                         fort_equs:    279.
          33    buffer_size_slot         fort_cg_macros_:   7309, 7315,
                                         fort_equs:    167.
        2766    builtin                  fort_cg_macros_:   2059,
                                         fort_operator_table:       64.
        3055    builtin2                 fort_cg_macros_:   2069, 2075, 2097.
        3140    builtin2.char_ok         fort_cg_macros_:   2079, 2081.
        3147    builtin2.join            fort_cg_macros_:   2083, 2087, 2091, 2096.
        3146    builtin2.nc              fort_cg_macros_:   2079, 2093.
        3142    builtin2.one_word        fort_cg_macros_:   2079, 2085.
        3144    builtin2.tl              fort_cg_macros_:   2079, 2089.
        3150    builtin3                 fort_cg_macros_:   2099, 2107, 2116.
        5326    builtin_2args_di         fort_cg_macros_:   2412, 2586, 2764, 3111, 3458, 3573, 3747.
        5310    builtin_2args_id         fort_cg_macros_:   2408, 2582, 2760, 3107, 3454, 3569, 3725.
        5226    builtin_2args_ii         fort_cg_macros_:   2396, 3645.
        5244    builtin_2args_ii.1       fort_cg_macros_:   3659, 3665, 3667.
        5257    builtin_2args_ir         fort_cg_macros_:   2400, 2574, 2752, 3099, 3446, 3561, 3685.
        5275    builtin_2args_ri         fort_cg_macros_:   2404, 2578, 2756, 3103, 3450, 3565, 3707.
        3230    builtin_var              fort_cg_macros_:   2068, 2102.
        3310    builtin_var.1            fort_cg_macros_:   2103, 2106, 2113.
        3315    builtin_var.2            fort_cg_macros_:   2103, 2115, 2118.
        3402    bu_abort_list            fort_cg_macros_:   2073, 2077, 2107, 2116, 2186, 2199, 2204, 4773, 4777, 4781, 4785.
        6562    bu_dt1.p                 fort_cg_macros_:   2086, 2117, 4457, 4492, 4566, 4576, 4593, 4610, 4627, 4644, 4771.
        6566    bu_dt2.p                 fort_cg_macros_:   4775.
        6572    bu_dt5.p                 fort_cg_macros_:   2251, 2254, 2257, 2307, 2310, 2347, 2350, 2387, 2390, 2441, 2447,
                                                            2453, 2456, 2459, 2545, 2548, 2605, 2611, 2617, 2620, 2623, 2739,
                                                            2742, 3477, 3483, 3489, 3492, 3495, 3592, 3598, 3604, 3607, 3610,
                                                            3812, 3861, 3900, 3939, 3978, 4017, 4044, 4071, 4100, 4137, 4146,
                                                            4168, 4315, 4351, 4354, 4390, 4393, 4429, 4432, 4690, 4702, 4714,
                                                            4726, 4779.
        6576    bu_dt6.p                 fort_cg_macros_:   2438, 2444, 2450, 2462, 2495, 2602, 2608, 2614, 2626, 2687, 3474,
                                                            3480, 3486, 3498, 3542, 3589, 3595, 3601, 3613, 3643, 4656, 4693,
                                                            4705, 4717, 4729, 4783.
        3336    bu_ret_aq                fort_cg_macros_:   2135, 2304, 2542, 2736, 3808, 3857.
        3332    bu_ret_deaq              fort_cg_macros_:   2130, 2235, 2291, 2344, 2384, 2491, 2529, 2658, 2671, 2683, 2722,
                                                            3534, 3634, 3796, 3845, 3890, 3929, 3968, 4034, 4061, 4153, 4157,
                                                            4161, 4165, 4348, 4387, 4426, 4653.
        3326    bu_ret_eaq               fort_cg_macros_:   2125, 2226, 2248, 2279, 2332, 2372, 2473, 2517, 2639, 2709, 3519,
                                                            3620, 3784, 3833, 3880, 3919, 3958, 4024, 4029, 4051, 4056, 4107,
                                                            4111, 4117, 4121, 4143, 4336, 4375, 4414.
        3356    bu_ret_op1               fort_cg_macros_:   2155, 4450, 4454, 4475, 4489, 4573.
        3322    bu_ret_q                 fort_cg_macros_:   2120, 2219, 2571, 3506, 3558, 3985, 3989, 3993, 3997, 4001, 4078,
                                                            4084, 4090, 4485, 4523, 4543, 4563, 4699, 4711, 4723, 4735.
        3352    bu_ret_tnc               fort_cg_macros_:   2150, 4607, 4641.
        3342    bu_ret_tq                fort_cg_macros_:   2140, 4677, 4683, 4687.
        3346    bu_ret_trc               fort_cg_macros_:   2145, 4590, 4624.
        3445    cabs                     fort_cg_macros_:   2100, 2237.
        3446    cabs.1                   fort_cg_macros_:   2210, 2239.
        3461    cabs.p                   fort_cg_macros_:   2238, 2256.
        1406    cabs_                    fort_cg_macros_:   2245,
                                         fort_equs:    207.
       12737    call                     fort_cg_macros_:   8161,
                                         fort_operator_table:       76.
       13114    call_ext_desc            fort_cg_macros_:   8270, 8275.
         623    call_ext_out             fort_cg_macros_:   8272,
                                         fort_equs:    245.
         622    call_ext_out_desc        fort_cg_macros_:   8276,
                                         fort_equs:    246.
       13122    call_join                fort_cg_macros_:   8273, 8277, 8283, 8288.
        1170    call_offset              stack_header:        80.
         617    call_var                 fort_cg_macros_:   8282,
                                         fort_equs:    247.
       13116    call_variable            fort_cg_macros_:   8268, 8279.
       13121    call_variable_desc       fort_cg_macros_:   8280, 8285.
         616    call_var_desc            fort_cg_macros_:   8286,
                                         fort_equs:    248.
       13326    cat                      fort_cg_macros_:   8517,
                                         fort_operator_table:      112.
       13341    cat.dont_copy_arg1       fort_cg_macros_:   8526, 8533.
       13352    cat.not_ansi77           fort_cg_macros_:   8519, 8549.
       13350    cat.p                    fort_cg_macros_:   8522, 8524, 8546.
        3741    ccos                     fort_cg_macros_:   2100, 2531.
        3742    ccos.1                   fort_cg_macros_:   2501, 2533.
        3754    ccos.p                   fort_cg_macros_:   2532, 2547.
        1407    ccos_                    fort_cg_macros_:   2539,
                                         fort_equs:    219.
        2755    ccv_cc                   fort_cg_macros_:   1980, 2047.
        2753    ccv_cd                   fort_cg_macros_:   1980, 2043.
        2740    ccv_ci                   fort_cg_macros_:   1980, 2026.
        2747    ccv_cr                   fort_cg_macros_:   1980, 2036.
        2751    ccv_dc                   fort_cg_macros_:   1980, 2040.
        2731    ccv_dd                   fort_cg_macros_:   1980, 2012.
        2725    ccv_di                   fort_cg_macros_:   1980, 2003.
        2734    ccv_dr                   fort_cg_macros_:   1980, 2019.
        2760    ccv_e1                   fort_cg_macros_:   1980, 2051.
        2763    ccv_e2                   fort_cg_macros_:   1980, 2055.
        2736    ccv_ic                   fort_cg_macros_:   1980, 2023.
        2722    ccv_id                   fort_cg_macros_:   1980, 1997.
        2713    ccv_ii                   fort_cg_macros_:   1980, 1982.
        2714    ccv_ir                   fort_cg_macros_:   1980, 1985.
        2745    ccv_rc                   fort_cg_macros_:   1980, 2033.
        2732    ccv_rd                   fort_cg_macros_:   1980, 2015.
        2717    ccv_ri                   fort_cg_macros_:   1980, 1991.
        2730    ccv_rr                   fort_cg_macros_:   1980, 2009.
        4143    cexp                     fort_cg_macros_:   2100, 2724.
        4144    cexp.1                   fort_cg_macros_:   2693, 2727.
        4156    cexp.p                   fort_cg_macros_:   2725, 2741.
        1410    cexp_                    fort_cg_macros_:   2733,
                                         fort_equs:    222.
       13152    chain                    fort_cg_macros_:   8332,
                                         fort_operator_table:       77.
       13157    chain2                   fort_cg_macros_:   8336, 8340.
       13164    chain3                   fort_cg_macros_:   8345, 8349.
       13170    chain_fill               fort_cg_macros_:   8356.
       13204    chain_next_file          fort_cg_macros_:   8374, 8380.
       13220    chain_path.p             fort_cg_macros_:   8337, 8338, 8391.
       13213    chain_ret                fort_cg_macros_:   8375, 8382.
       13226    chain_sys.p              fort_cg_macros_:   8346, 8347, 8396.
       10000    char                     fort_cg_macros_:    382, 2082, 4460, 4495, 4497, 4569, 4579, 4581, 4596, 4598, 4613,
                                                            4615, 4630, 4632, 5280, 5445, 6594, 6917, 6920, 7004, 7118, 7294,
                                                            7569, 7586, 7803, 8174, 8336, 8345, 8522, 8524,
                                         fort_equs:     57.
        6237    char.constant            fort_cg_macros_:   4437, 4452.
        6241    char.p                   fort_cg_macros_:   4435, 4456.
         634    char2.p                  fort_cg_macros_:    401,  409,  428.
        3000    charn                    fort_equs:     66.
        6226    char_builtin             fort_cg_macros_:   2100, 4434.
       12516    char_func                fort_cg_macros_:   7872, 7874.
       12760    check_args               fort_cg_macros_:   8170, 8193.
         453    check_stringrange        fort_cg_macros_:    195,  259.
         417    check_subscript          fort_cg_macros_:    192,  198.
        3511    clog                     fort_cg_macros_:   2100, 2293.
        3512    clog.1                   fort_cg_macros_:   2263, 2295.
        3524    clog.p                   fort_cg_macros_:   2294, 2309.
        1411    clog_                    fort_cg_macros_:   2301,
                                         fort_equs:    210.
       11424    close                    fort_cg_macros_:   6952,
                                         fort_operator_table:       92.
       11641    closefile                fort_cg_macros_:   7221,
                                         fort_operator_table:       52.
       11652    closefile.p              fort_cg_macros_:   7224, 7234.
        5733    cmplx                    fort_cg_macros_:   2100, 4170.
        5737    cmplx.one                fort_cg_macros_:   4171, 4175.
        5754    cmplx.one.cmpx           fort_cg_macros_:   4176, 4192.
        5750    cmplx.one.dp             fort_cg_macros_:   4176, 4186.
        5744    cmplx.one.int            fort_cg_macros_:   4176, 4178.
        5756    cmplx.one.join           fort_cg_macros_:   4180, 4184, 4190, 4196.
        5764    cmplx.one.p              fort_cg_macros_:   4176, 4204.
        5746    cmplx.one.real           fort_cg_macros_:   4176, 4182.
        5765    cmplx.two                fort_cg_macros_:   4172, 4207.
        6037    cmplx.two.dd             fort_cg_macros_:   4208, 4249.
        6052    cmplx.two.dd.1           fort_cg_macros_:   4251, 4262.
        6064    cmplx.two.di             fort_cg_macros_:   4208, 4279.
        6064    cmplx.two.dr             fort_cg_macros_:   4208, 4281.
        6062    cmplx.two.e1             fort_cg_macros_:   4208, 4272.
        6063    cmplx.two.e2             fort_cg_macros_:   4208, 4275.
        6064    cmplx.two.id             fort_cg_macros_:   4208, 4282.
        6000    cmplx.two.ii             fort_cg_macros_:   4208, 4210.
        6013    cmplx.two.ii.1           fort_cg_macros_:   4212, 4223.
        6064    cmplx.two.ir             fort_cg_macros_:   4208, 4280.
        6064    cmplx.two.rd             fort_cg_macros_:   4208, 4283.
        6064    cmplx.two.ri             fort_cg_macros_:   4208, 4278.
        6024    cmplx.two.rr             fort_cg_macros_:   4208, 4234.
        6033    cmplx.two.rr.1           fort_cg_macros_:   4236, 4243.
       40000    cmpx                     fort_cg_macros_:   1669, 2082, 2090, 2094, 2112, 2238, 2294, 2532, 2725, 3799, 3848,
                                                            4140, 4287, 6257, 7750, 7832,
                                         fort_equs:     55.
        2000    cmpxn                    fort_cg_macros_:    510,  517,  546,  572,  754,  773,  793,  826,  856,  889,  919,
                                                            1032, 1061, 1094, 1237, 1274, 1310, 1568, 1579, 1588, 1604, 1631,
                                                            1691, 4198, 4211, 4235, 4250, 4289, 7634, 7897,
                                         fort_equs:     64.
       12531    cmpx_func                fort_cg_macros_:   7872, 7896.
        1416    cmpx_p_cmpx              fort_cg_macros_:   1641, 1653,
                                         fort_equs:    200.
       12453    coerce_substr_exp        fort_cg_macros_:   7809, 7814, 7826.
        6436    compl.tl                 fort_cg_macros_:   2100, 4679.
          70    complex                  fort_cg_macros_:   1127, 1269, 1343,
                                         fort_equs:    173.
         775    complex_divide           fort_cg_macros_:   1268, 1342,
                                         fort_equs:    191.
         773    complex_multiply         fort_cg_macros_:   1126,
                                         fort_equs:    190.
        6066    conjg                    fort_cg_macros_:   2100, 4286.
        6104    conjg.1                  fort_cg_macros_:   4292, 4304.
        6115    conjg.p                  fort_cg_macros_:   4287, 4314.
      200000    constant                 fort_cg_macros_:    401,  409,  639,  673,  758,  777, 1036, 1221, 1241, 1364, 1379,
                                                            1394, 1409, 1432, 1462, 1492, 1565, 1592, 1746, 1762, 1803, 1877,
                                                            1929, 3648, 3668, 3688, 3708, 3728, 3748, 4437, 4462, 4933, 4946,
                                                            4971, 5127, 5140, 5165, 5297, 5310, 5335, 5462, 5475, 5500, 5651,
                                                            5664, 5689, 5844, 5857, 5882, 7749, 7830,
                                         fort_equs:     95.
       12425    convert_subscript        fort_cg_macros_:   7749, 7774.
       13356    convert_to_cmpx          fort_cg_macros_:   8563,
                                         fort_operator_table:       97.
        2677    convert_to_cv_type       fort_cg_macros_:   1722, 1727, 1731, 1977.
       13356    convert_to_dp            fort_cg_macros_:   8562,
                                         fort_operator_table:       96.
       13356    convert_to_int           fort_cg_macros_:   8560,
                                         fort_operator_table:       94.
       13356    convert_to_real          fort_cg_macros_:   8561,
                                         fort_operator_table:       95.
       12753    conv_bif                 fort_cg_macros_:   8171, 8183.
        5337    conv_bu_di               fort_cg_macros_:   3748, 3760.
        5323    conv_bu_id               fort_cg_macros_:   3728, 3741.
        5241    conv_bu_ii.1             fort_cg_macros_:   3648, 3661.
        5255    conv_bu_ii.2             fort_cg_macros_:   3668, 3680.
        5272    conv_bu_ir               fort_cg_macros_:   3688, 3701.
        5306    conv_bu_ri               fort_cg_macros_:   3708, 3720.
        2107    conv_di                  fort_cg_macros_:   1409, 1416.
        1732    conv_div_ci              fort_cg_macros_:   1241, 1255.
        1713    conv_div_ic              fort_cg_macros_:   1221, 1231.
        2305    conv_exponentiation_ci   fort_cg_macros_:   1592, 1603.
        2264    conv_exponentiation_ic   fort_cg_macros_:   1565, 1578.
        2200    conv_exponentiation_id   fort_cg_macros_:   1492, 1500.
        2155    conv_exponentiation_ir   fort_cg_macros_:   1462, 1470.
       12755    conv_external            fort_cg_macros_:   8172, 8187.
        2076    conv_id                  fort_cg_macros_:   1394, 1401.
        2055    conv_ir                  fort_cg_macros_:   1364, 1371.
        1515    conv_mult_ci             fort_cg_macros_:   1036, 1050.
        2066    conv_ri                  fort_cg_macros_:   1379, 1386.
        1224    conv_sub_ci              fort_cg_macros_:    777,  785.
        1120    conv_sub_di              fort_cg_macros_:    673,  681.
        1210    conv_sub_ic              fort_cg_macros_:    758,  766.
        1071    conv_sub_ri              fort_cg_macros_:    639,  647.
        3712    cos                      fort_cg_macros_:   2100, 2497.
        3716    cos.1                    fort_cg_macros_:   2499, 2503.
        3721    cos.2                    fort_cg_macros_:   2505, 2510.
        5525    cosh                     fort_cg_macros_:   2100, 3941.
        5535    cosh.1                   fort_cg_macros_:   3946, 3951.
        5544    cosh.dp                  fort_cg_macros_:   3942, 3960, 3973.
        5532    cosh.int                 fort_cg_macros_:   3942, 3944.
        5556    cosh.p                   fort_cg_macros_:   3942, 3976.
        5534    cosh.real                fort_cg_macros_:   3942, 3948.
        1462    cosh_                    fort_cg_macros_:   3955,
                                         fort_equs:    259.
        1277    cos_                     fort_cg_macros_:   2515,
                                         fort_equs:    217.
        3720    cos_i                    fort_cg_macros_:   2498, 2507.
       20000    count                    fort_cg_macros_:   7876,
                                         fort_equs:     98.
       12463    cse_convert_constant     fort_cg_macros_:   7830, 7840.
       12476    cse_convert_dp           fort_cg_macros_:   7834, 7855.
       12465    cse_convert_real         fort_cg_macros_:   7832, 7844.
       12506    cse_return               fort_cg_macros_:   7828, 7865.
        5367    csin                     fort_cg_macros_:   2100, 3798.
        5370    csin.1                   fort_cg_macros_:   3769, 3800.
        5400    csin.p                   fort_cg_macros_:   3799, 3811.
        1412    csin_                    fort_cg_macros_:   3805,
                                         fort_equs:    229.
        5427    csqrt                    fort_cg_macros_:   2100, 3847.
        5430    csqrt.1                  fort_cg_macros_:   3818, 3849.
        5440    csqrt.p                  fort_cg_macros_:   3848, 3860.
        1413    csqrt_                   fort_cg_macros_:   3854,
                                         fort_equs:    232.
       12762    cv_bif_to_external       fort_cg_macros_:   8184, 8197.
        2101    cv_load.di               fort_cg_macros_:    314, 1408, 2006, 3992, 6275, 7371, 7492.
        2071    cv_load.id               fort_cg_macros_:    319,  477,  666, 1000, 1177, 1182, 1393, 2000, 2907, 3254, 4152,
                                                            4846, 4851, 5040, 5045, 5225, 5390, 5564, 5569, 5757, 5762, 7366, 7497.
        2050    cv_load.ir               fort_cg_macros_:    309,  349,  469,  509,  632,  992, 1165, 1170, 1363, 1988, 2270,
                                                            2323, 2363, 2508, 2700, 2866, 3213, 3776, 3825, 3867, 3906, 3945,
                                                            4023, 4050, 4106, 4179, 4214, 4218, 4225, 4229, 4328, 4367, 4406,
                                                            4834, 4839, 5028, 5033, 5217, 5382, 5552, 5557, 5745, 5750, 7356,
                                                            7376, 7487, 7527.
        2060    cv_load.ri               fort_cg_macros_:    304,  344, 1378, 1994, 3988, 3996, 6271, 7361, 7385, 7482, 7522.
        3437    dabs                     fort_cg_macros_:   2100, 2228.
        3440    dabs.1                   fort_cg_macros_:   2209, 2230.
        3460    dabs.p                   fort_cg_macros_:   2229, 2253.
        6213    dacos                    fort_cg_macros_:   2100, 4416.
        6214    dacos.1                  fort_cg_macros_:   4398, 4418.
        6225    dacos.p                  fort_cg_macros_:   4417, 4431.
        1326    dacos_                   fort_cg_macros_:   4424,
                                         fort_equs:    239.
        6163    dasin                    fort_cg_macros_:   2100, 4377.
        6164    dasin.1                  fort_cg_macros_:   4359, 4379.
        6175    dasin.p                  fort_cg_macros_:   4378, 4392.
        1324    dasin_                   fort_cg_macros_:   4385,
                                         fort_equs:    237.
        3574    datan                    fort_cg_macros_:   2100, 2374.
        3575    datan.1                  fort_cg_macros_:   2355, 2376.
        3606    datan.p                  fort_cg_macros_:   2375, 2389.
        3674    datan2                   fort_cg_macros_:   2100, 2475.
        3700    datan2.1                 fort_cg_macros_:   2409, 2413, 2419, 2435, 2481.
        3705    datan2.2                 fort_cg_macros_:   2427, 2487.
        1340    datan2_                  fort_cg_macros_:   2489,
                                         fort_equs:    216.
        1330    datan_                   fort_cg_macros_:   2382,
                                         fort_equs:    214.
        5715    dble                     fort_cg_macros_:   2100, 4148.
        5730    dble.cmpx                fort_cg_macros_:   4149, 4163.
        5726    dble.dp                  fort_cg_macros_:   4149, 4159.
        5722    dble.int                 fort_cg_macros_:   4149, 4151.
        5732    dble.p                   fort_cg_macros_:   4149, 4167.
        5724    dble.real                fort_cg_macros_:   4149, 4155.
        1345    dbl_p_dbl                fort_cg_macros_:   1539,
                                         fort_equs:    199.
        1346    dbl_p_int                fort_cg_macros_:   1513,
                                         fort_equs:    197.
        1344    dbl_p_real               fort_cg_macros_:   1556,
                                         fort_equs:    198.
        3730    dcos                     fort_cg_macros_:   2100, 2519.
        3731    dcos.1                   fort_cg_macros_:   2500, 2521.
        3753    dcos.p                   fort_cg_macros_:   2520, 2544.
        5554    dcosh                    fort_cg_macros_:   2100, 3971.
        5556    dcosh.p                  fort_cg_macros_:   3972, 3977.
        1463    dcosh_                   fort_cg_macros_:   3965,
                                         fort_equs:    260.
        1320    dcos_                    fort_cg_macros_:   2527,
                                         fort_equs:    218.
        4047    ddim                     fort_cg_macros_:   2100, 2641.
        4053    ddim.1                   fort_cg_macros_:   2583, 2587, 2593, 2647.
        4113    ddim.p                   fort_cg_macros_:   2643, 2645, 2686.
        2400    deaq                     fort_cg_macros_:    320,  329,  330,  334,  340,  368,  372,  479,  487,  489,  497,
                                                             499,  503,  548,  668,  679,  683,  687,  695,  713,  715,  717,
                                                             723,  727,  731,  737,  743,  745,  751,  859,  892, 1002, 1010,
                                                            1012, 1020, 1022, 1026, 1096, 1179, 1184, 1198, 1200, 1202, 1206,
                                                            1211, 1216, 1312, 1403, 1410, 1411, 1434, 1509, 1515, 1534, 1541,
                                                            1552, 1558, 1685, 1688, 1930, 1932, 1939, 1940, 1964, 1967, 2001,
                                                            2017, 2020, 2045, 2133, 2174, 2231, 2284, 2337, 2377, 2432, 2482,
                                                            2522, 2648, 2651, 2664, 2674, 2715, 2890, 2891, 2904, 3067, 3068,
                                                            3237, 3238, 3251, 3415, 3416, 3528, 3630, 3735, 3755, 3789, 3838,
                                                            3883, 3922, 3961, 4032, 4059, 4087, 4114, 4160, 4187, 4251, 4252,
                                                            4341, 4380, 4419, 4869, 4871, 4872, 4877, 4882, 4889, 4896, 4897,
                                                            5063, 5065, 5066, 5071, 5076, 5083, 5090, 5091, 5236, 5237, 5247,
                                                            5248, 5401, 5402, 5412, 5413, 5587, 5589, 5590, 5595, 5600, 5607,
                                                            5614, 5615, 5780, 5782, 5783, 5788, 5793, 5800, 5807, 5808, 6115,
                                                            6117, 6120, 7395, 7413, 7498, 7507, 7508, 7512, 7518, 7547, 7551,
                                                            7629, 7765, 7766, 7857, 7858,
                                         fort_equs:     77.
       13356    decode_string            fort_cg_macros_:   8576,
                                         fort_operator_table:      110.
       12715    descriptor_check         fort_cg_macros_:   7879, 8101, 8179.
       12724    descriptor_check.return  fort_cg_macros_:   8116, 8117, 8123, 8131.
       12723    descriptor_check.set     fort_cg_macros_:   8118, 8125.
          42    descriptor_ptr           fort_cg_macros_:   8016,
                                         fort_equs:    169.
          13    desc_overlay             fort_equs:    153.
        4132    dexp                     fort_cg_macros_:   2100, 2711.
        4133    dexp.1                   fort_cg_macros_:   2692, 2714.
        4155    dexp.p                   fort_cg_macros_:   2712, 2738.
        1335    dexp_                    fort_cg_macros_:   2720,
                                         fort_equs:    221.
        3755    dim                      fort_cg_macros_:   2100, 2550.
        4034    dim.1                    fort_cg_macros_:   2575, 2579, 2590, 2628.
        4031    dim_cc                   fort_cg_macros_:   2551, 2619.
        4030    dim_cd                   fort_cg_macros_:   2551, 2616.
        4024    dim_ci                   fort_cg_macros_:   2551, 2604.
        4026    dim_cr                   fort_cg_macros_:   2551, 2610.
        4027    dim_dc                   fort_cg_macros_:   2551, 2613.
        4020    dim_dd                   fort_cg_macros_:   2551, 2592.
        4015    dim_di                   fort_cg_macros_:   2551, 2585.
        4022    dim_dr                   fort_cg_macros_:   2551, 2598.
        4032    dim_e1                   fort_cg_macros_:   2551, 2622.
        4033    dim_e2                   fort_cg_macros_:   2551, 2625.
        4023    dim_ic                   fort_cg_macros_:   2551, 2601.
        4013    dim_id                   fort_cg_macros_:   2551, 2581.
        3774    dim_ii                   fort_cg_macros_:   2551, 2559.
        4007    dim_ir                   fort_cg_macros_:   2551, 2573.
        4025    dim_rc                   fort_cg_macros_:   2551, 2607.
        4021    dim_rd                   fort_cg_macros_:   2551, 2595.
        4011    dim_ri                   fort_cg_macros_:   2551, 2577.
        4017    dim_rr                   fort_cg_macros_:   2551, 2589.
        5620    dint                     fort_cg_macros_:   2100, 4037.
        5622    dint.p                   fort_cg_macros_:   4038, 4043.
           2    discard                  fort_equs:    135.
        1622    div                      fort_cg_macros_:   1152,
                                         fort_operator_table:       21.
        2024    div_cc                   fort_cg_macros_:   1154, 1339.
        1777    div_cd                   fort_cg_macros_:   1154, 1309.
        2005    div_cd.01                fort_cg_macros_:   1318, 1328.
        2012    div_cd.1                 fort_cg_macros_:   1312, 1325.
        2015    div_cd.2                 fort_cg_macros_:   1313, 1330.
        1716    div_ci                   fort_cg_macros_:   1154, 1236.
        1746    div_cr                   fort_cg_macros_:   1154, 1273.
        1754    div_cr.01                fort_cg_macros_:   1282, 1292.
        1761    div_cr.1                 fort_cg_macros_:   1253, 1260, 1276, 1289.
        1764    div_cr.2                 fort_cg_macros_:   1277, 1294.
        1773    div_dc                   fort_cg_macros_:   1154, 1303.
        1666    div_dd                   fort_cg_macros_:   1154, 1197.
        1672    div_dd.1                 fort_cg_macros_:   1198, 1204.
        1655    div_di                   fort_cg_macros_:   1154, 1181.
        1677    div_dr                   fort_cg_macros_:   1154, 1213.
        2044    div_e1                   fort_cg_macros_:   1154, 1349, 1357.
        2046    div_e2                   fort_cg_macros_:   1154, 1348, 1360.
        1702    div_ic                   fort_cg_macros_:   1154, 1218.
        1651    div_id                   fort_cg_macros_:   1154, 1174.
        1636    div_ii                   fort_cg_macros_:   1154, 1156.
        1642    div_ir                   fort_cg_macros_:   1154, 1162.
        1736    div_rc                   fort_cg_macros_:   1154, 1234, 1262, 1307.
        1737    div_rc.01                fort_cg_macros_:   1229, 1264.
        1674    div_rd                   fort_cg_macros_:   1154, 1208.
        1646    div_ri                   fort_cg_macros_:   1154, 1169.
        1660    div_rr                   fort_cg_macros_:   1154, 1186.
        1664    div_rr.1                 fort_cg_macros_:   1187, 1193.
        2032    div_tl                   fort_cg_macros_:   1154, 1347.
        2041    div_tl.1                 fort_cg_macros_:   1349, 1352.
        3500    dlog                     fort_cg_macros_:   2100, 2281.
        3501    dlog.1                   fort_cg_macros_:   2262, 2283.
        3523    dlog.p                   fort_cg_macros_:   2282, 2306.
        3543    dlog10                   fort_cg_macros_:   2100, 2334.
        3544    dlog10.1                 fort_cg_macros_:   2315, 2336.
        3555    dlog10.p                 fort_cg_macros_:   2335, 2349.
        1334    dlog10_                  fort_cg_macros_:   2342,
                                         fort_equs:    212.
        1333    dlog_                    fort_cg_macros_:   2289,
                                         fort_equs:    209.
        4462    dmax1                    fort_cg_macros_:   2100, 3060.
        4472    dmax1.loop               fort_cg_macros_:   3071, 3083.
        4505    dmax1.p                  fort_cg_macros_:   3063, 3065, 3082, 3088.
        4504    dmax1.r                  fort_cg_macros_:   3077, 3085.
        5012    dmin1                    fort_cg_macros_:   2100, 3408.
        5022    dmin1.loop               fort_cg_macros_:   3419, 3431.
        5035    dmin1.p                  fort_cg_macros_:   3411, 3413, 3430, 3436.
        5034    dmin1.r                  fort_cg_macros_:   3425, 3433.
        5116    dmod                     fort_cg_macros_:   2100, 3521.
        5122    dmod.1                   fort_cg_macros_:   3455, 3459, 3465, 3471, 3527.
        5123    dmod.2                   fort_cg_macros_:   3529, 3538.
        5132    dmod.p                   fort_cg_macros_:   3523, 3525, 3541.
        1415    dmod_                    fort_equs:    224.
        5640    dnint                    fort_cg_macros_:   2100, 4064.
        5642    dnint.p                  fort_cg_macros_:   4065, 4070.
        2425    do                       fort_cg_macros_:   1718,
                                         fort_operator_table:       63.
       13073    double_count             fort_cg_macros_:   8242, 8245.
          56    double_temp              fort_cg_macros_:   1227, 1228, 4536, 4538, 4556, 4558,
                                         fort_equs:    170.
         654    double_to_integer        fort_cg_macros_:   1413, 1948, 7768, 7860,
                                         fort_equs:    189.
        2633    do_d                     fort_cg_macros_:   1740, 1925.
        2644    do_d.no_save_incre       fort_cg_macros_:   1928, 1929, 1936.
        2661    do_d.one_trip            fort_cg_macros_:   1953, 1956.
        2446    do_i                     fort_cg_macros_:   1738, 1742.
        2457    do_i.no_save_incre       fort_cg_macros_:   1745, 1746, 1753.
        2476    do_i.one_trip            fort_cg_macros_:   1773, 1776.
        2531    do_i.zero_trip.negative  fort_cg_macros_:   1818, 1822.
        2553    do_i_1                   fort_cg_macros_:   1840, 1852.
        2513    do_i_constant            fort_cg_macros_:   1762, 1797.
        2532    do_i_constant.one_trip   fort_cg_macros_:   1813, 1820, 1825.
        2560    do_i_negative            fort_cg_macros_:   1837, 1862.
        2567    do_r                     fort_cg_macros_:   1739, 1873.
        2600    do_r.no_save_incre       fort_cg_macros_:   1876, 1877, 1884.
        2615    do_r.one_trip            fort_cg_macros_:   1901, 1904.
      100000    dp                       fort_cg_macros_:   1668, 2082, 2090, 2094, 2112, 2209, 2229, 2262, 2282, 2315, 2335,
                                                            2355, 2375, 2477, 2479, 2500, 2520, 2643, 2645, 2692, 2712, 2820,
                                                            2857, 2896, 3063, 3065, 3082, 3167, 3204, 3243, 3411, 3413, 3430,
                                                            3523, 3525, 3624, 3626, 3768, 3787, 3817, 3836, 3894, 3933, 3972,
                                                            4010, 4038, 4065, 4094, 4130, 4320, 4339, 4359, 4378, 4398, 4417,
                                                            6107, 6257, 6263, 7750, 7752, 7834,
                                         fort_equs:     54.
        1400    dpn                      fort_cg_macros_:    682, 1402, 1501, 1931, 2173, 2430, 2903, 3250, 3730, 3742, 3750,
                                                            3761, 7628, 7893,
                                         fort_equs:     63.
        6411    dprod                    fort_cg_macros_:   2100, 4646.
        6420    dprod.p                  fort_cg_macros_:   4648, 4650, 4655.
       12527    dp_func                  fort_cg_macros_:   7872, 7892.
        4101    drdim.1                  fort_cg_macros_:   2599, 2673.
        5211    dsign                    fort_cg_macros_:   2100, 3622.
        5215    dsign.1                  fort_cg_macros_:   3570, 3574, 3580, 3586, 3628.
        5217    dsign.2                  fort_cg_macros_:   3631, 3639.
        5225    dsign.p                  fort_cg_macros_:   3624, 3626, 3642.
        5356    dsin                     fort_cg_macros_:   2100, 3786.
        5357    dsin.1                   fort_cg_macros_:   3768, 3788.
        5400    dsin.p                   fort_cg_macros_:   3787, 3810.
        5522    dsinh                    fort_cg_macros_:   2100, 3932.
        5524    dsinh.p                  fort_cg_macros_:   3933, 3938.
        1461    dsinh_                   fort_cg_macros_:   3926,
                                         fort_equs:    258.
        1316    dsin_                    fort_cg_macros_:   3794,
                                         fort_equs:    228.
        5416    dsqrt                    fort_cg_macros_:   2100, 3835.
        5417    dsqrt.1                  fort_cg_macros_:   3817, 3837.
        5440    dsqrt.p                  fort_cg_macros_:   3836, 3859.
        1315    dsqrt_                   fort_cg_macros_:   3843,
                                         fort_equs:    231.
        6133    dtan                     fort_cg_macros_:   2100, 4338.
        6134    dtan.1                   fort_cg_macros_:   4320, 4340.
        6145    dtan.p                   fort_cg_macros_:   4339, 4353.
        5470    dtanh                    fort_cg_macros_:   2100, 3893.
        5472    dtanh.p                  fort_cg_macros_:   3894, 3899.
        1457    dtanh_                   fort_cg_macros_:   3887,
                                         fort_equs:    256.
        1322    dtan_                    fort_cg_macros_:   4346,
                                         fort_equs:    235.
         200    dummy                    fort_equs:    104.
        2000    eaq                      fort_cg_macros_:    310,  324,  325,  339,  353,  354,  358,  360,  367,  471,  482,
                                                             484,  495,  519,  520,  526,  533,  549,  555,  562,  574,  576,
                                                             585,  592,  634,  645,  649,  653,  661,  699,  701,  703,  709,
                                                             729,  741,  769,  789,  796,  797,  805,  812,  829,  830,  836,
                                                             846,  860,  868,  875,  893,  899,  909,  922,  924,  933,  942,
                                                             994, 1005, 1007, 1018, 1046, 1054, 1063, 1064, 1072, 1079, 1097,
                                                            1105, 1112, 1167, 1172, 1187, 1189, 1191, 1195, 1209, 1214, 1251,
                                                            1259, 1276, 1277, 1286, 1297, 1313, 1322, 1333, 1373, 1380, 1381,
                                                            1435, 1479, 1485, 1521, 1528, 1546, 1572, 1598, 1679, 1682, 1694,
                                                            1700, 1703, 1709, 1878, 1880, 1887, 1888, 1912, 1915, 1989, 2016,
                                                            2021, 2027, 2028, 2037, 2038, 2044, 2128, 2168, 2222, 2266, 2319,
                                                            2359, 2422, 2431, 2465, 2504, 2629, 2632, 2661, 2696, 2775, 2776,
                                                            2849, 2850, 2863, 2974, 3034, 3035, 3122, 3123, 3196, 3197, 3210,
                                                            3321, 3322, 3382, 3383, 3515, 3537, 3617, 3638, 3655, 3675, 3695,
                                                            3715, 3772, 3821, 3871, 3910, 3949, 4027, 4054, 4081, 4110, 4120,
                                                            4156, 4164, 4183, 4199, 4216, 4231, 4236, 4237, 4238, 4246, 4255,
                                                            4269, 4294, 4295, 4309, 4324, 4363, 4402, 4651, 4856, 4858, 4859,
                                                            4864, 4884, 4894, 5050, 5052, 5053, 5058, 5078, 5088, 5230, 5231,
                                                            5245, 5395, 5396, 5410, 5574, 5576, 5577, 5582, 5602, 5612, 5767,
                                                            5769, 5770, 5775, 5795, 5805, 6143, 6145, 6148, 7378, 7390, 7409,
                                                            7488, 7502, 7503, 7517, 7528, 7534, 7535, 7539, 7540, 7546, 7552,
                                                            7623, 7754, 7755, 7846, 7847,
                                         fort_equs:     76.
       11003    else                     fort_cg_macros_:   6544,
                                         fort_operator_table:      118.
       10743    else_if                  fort_cg_macros_:   6486,
                                         fort_operator_table:      117.
       10754    else_if.ind              fort_cg_macros_:   6496, 6506.
       10752    else_if.no_cmpa          fort_cg_macros_:   6499, 6502.
       11001    else_if.p                fort_cg_macros_:   6489, 6541.
       10765    else_if.tmi              fort_cg_macros_:   6507, 6517.
       10771    else_if.tmoz             fort_cg_macros_:   6507, 6525.
       10775    else_if.tnc              fort_cg_macros_:   6507, 6533.
       10763    else_if.tnz              fort_cg_macros_:   6507, 6513.
       10767    else_if.tpl              fort_cg_macros_:   6507, 6521.
       10773    else_if.tpnz             fort_cg_macros_:   6507, 6529.
       10777    else_if.trc              fort_cg_macros_:   6507, 6537.
       10761    else_if.tze              fort_cg_macros_:   6507, 6509.
       10333    emit_tze                 fort_cg_macros_:   6043, 6047.
           0    empty                    fort_equs:     72.
       13356    encode_string            fort_cg_macros_:   8577,
                                         fort_operator_table:      111.
       11266    endfile                  fort_cg_macros_:   6833,
                                         fort_operator_table:       47.
       11300    endfile.p                fort_cg_macros_:   6836, 6846.
       13234    endunit                  fort_cg_macros_:   8401,
                                         fort_operator_table:       78.
       11065    end_label                fort_cg_macros_:   6627,
                                         fort_operator_table:       42.
          14    end_label_slot           fort_cg_macros_:   6631,
                                         fort_equs:    157.
        1473    enter_BFP_mode           fort_equs:    268.
        1474    enter_HFP_mode           fort_cg_macros_:   7982,
                                         fort_equs:    269.
         400    entry                    fort_equs:    103.
          10    entry_info               fort_cg_macros_:   7691, 8078,
                                         fort_equs:    150.
        1174    entry_offset             stack_header:        84.
       12324    eol                      fort_cg_macros_:   7675,
                                         fort_operator_table:       62.
        7240    equal                    fort_cg_macros_:   5202,
                                         fort_operator_table:       26.
        7341    equal_ah                 fort_cg_macros_:   5280, 5291.
        7326    equal_cc                 fort_cg_macros_:   5206, 5274.
        7323    equal_cd                 fort_cg_macros_:   5206, 5271.
        7355    equal_ch                 fort_cg_macros_:   5292, 5309.
        7312    equal_ci                 fort_cg_macros_:   5206, 5259.
        7316    equal_cr                 fort_cg_macros_:   5206, 5265.
        7320    equal_dc                 fort_cg_macros_:   5206, 5268.
        7274    equal_dd                 fort_cg_macros_:   5206, 5235.
        7355    equal_dh                 fort_cg_macros_:   5292, 5308.
        7265    equal_di                 fort_cg_macros_:   5206, 5224.
        7301    equal_dr                 fort_cg_macros_:   5206, 5244.
        7306    equal_dr.1               fort_cg_macros_:   5245, 5252.
        7372    equal_e1                 fort_cg_macros_:   5206, 5331.
        7331    equal_e2                 fort_cg_macros_:   5206, 5279.
        7406    equal_hc                 fort_cg_macros_:   5337, 5349.
        7406    equal_hd                 fort_cg_macros_:   5337, 5348.
        7364    equal_hh                 fort_cg_macros_:   5292, 5321, 5337.
        7402    equal_hi                 fort_cg_macros_:   5337, 5339.
        7402    equal_hr                 fort_cg_macros_:   5337, 5340.
        7402    equal_ht                 fort_cg_macros_:   5337, 5341.
        7310    equal_ic                 fort_cg_macros_:   5206, 5256.
        7264    equal_id                 fort_cg_macros_:   5206, 5221.
        7346    equal_ih                 fort_cg_macros_:   5292, 5294.
        7255    equal_ii                 fort_cg_macros_:   5206, 5208.
        7260    equal_ir                 fort_cg_macros_:   5206, 5213.
           1    equal_lengths            fort_cg_macros_:   8528, 8536,
                                         fort_equs:    133.
        7336    equal_ll                 fort_cg_macros_:   5283, 5286.
        7314    equal_rc                 fort_cg_macros_:   5206, 5262.
        7300    equal_rd                 fort_cg_macros_:   5206, 5241.
        7346    equal_rh                 fort_cg_macros_:   5292, 5295.
        7261    equal_ri                 fort_cg_macros_:   5206, 5216.
        7270    equal_rr                 fort_cg_macros_:   5206, 5229.
        7346    equal_th                 fort_cg_macros_:   5292, 5296.
        7412    equal_tl                 fort_cg_macros_:   5206, 5356.
        7420    equal_tl.1               fort_cg_macros_:   5358, 5360.
       10275    equiv                    fort_cg_macros_:   5990,
                                         fort_operator_table:      119.
       10315    equiv.p                  fort_cg_macros_:   5992, 5994, 6017.
         100    error                    fort_equs:    105.
       11073    error_label              fort_cg_macros_:   6637,
                                         fort_operator_table:       43.
          12    error_label_slot         fort_cg_macros_:   6642,
                                         fort_equs:    158.
         475    error_macro              fort_cg_macros_:    183,  291.
       12743    evaluate_arglist         fort_cg_macros_:   7870, 8164, 8169, 8174, 8181, 8185, 8188, 8191.
       12321    exit                     fort_cg_macros_:   7668,
                                         fort_operator_table:       61.
        4114    exp                      fort_cg_macros_:   2100, 2689.
        4120    exp.1                    fort_cg_macros_:   2691, 2695.
        4123    exp.2                    fort_cg_macros_:   2697, 2702.
        2121    exponentiation           fort_cg_macros_:   1441,
                                         fort_operator_table:       22.
        2342    exponentiation_cc        fort_cg_macros_:   1444, 1646.
        2345    exponentiation_cc.01     fort_cg_macros_:   1576, 1583, 1623, 1650.
        2323    exponentiation_cd        fort_cg_macros_:   1444, 1625.
        2270    exponentiation_ci        fort_cg_macros_:   1444, 1585.
        2324    exponentiation_cr        fort_cg_macros_:   1444, 1628.
        2333    exponentiation_cr.01     fort_cg_macros_:   1601, 1609, 1637.
        2312    exponentiation_dc        fort_cg_macros_:   1444, 1611.
        2223    exponentiation_dd        fort_cg_macros_:   1444, 1530.
        2224    exponentiation_dd.01     fort_cg_macros_:   1504, 1533.
        2225    exponentiation_dd.02     fort_cg_macros_:   1498, 1535, 1547.
        2203    exponentiation_di        fort_cg_macros_:   1444, 1506.
        2236    exponentiation_dr        fort_cg_macros_:   1444, 1549.
        2353    exponentiation_e1        fort_cg_macros_:   1444, 1658.
        2355    exponentiation_e2        fort_cg_macros_:   1444, 1661.
        2246    exponentiation_ic        fort_cg_macros_:   1444, 1560.
        2170    exponentiation_id        fort_cg_macros_:   1444, 1487.
        2135    exponentiation_ii        fort_cg_macros_:   1444, 1446.
        2145    exponentiation_ir        fort_cg_macros_:   1444, 1457.
        2315    exponentiation_rc        fort_cg_macros_:   1444, 1616.
        2233    exponentiation_rd        fort_cg_macros_:   1444, 1543.
        2160    exponentiation_ri        fort_cg_macros_:   1444, 1476.
        2213    exponentiation_rr        fort_cg_macros_:   1444, 1517.
        2214    exponentiation_rr.01     fort_cg_macros_:   1474, 1520.
        2215    exponentiation_rr.02     fort_cg_macros_:   1468, 1522.
        1314    exp_                     fort_cg_macros_:   2707,
                                         fort_equs:    220.
        4122    exp_i                    fort_cg_macros_:   2690, 2699.
        1000    external                 fort_cg_macros_:   8172,
                                         fort_equs:    102.
        1045    ext_entry                fort_cg_macros_:   7964,
                                         fort_equs:    180.
        1046    ext_entry_desc           fort_cg_macros_:   7968,
                                         fort_equs:    181.
       13056    ext_join                 fort_cg_macros_:   8212, 8222.
          36    file_name_slot           fort_cg_macros_:   6926,
                                         fort_equs:    163.
          40    file_type_slot           fort_cg_macros_:   6928,
                                         fort_equs:    164.
         470    first_scan               fort_cg_macros_:    181,  285.
        6442    fld.tl                   fort_cg_macros_:   2100, 4685.
        5704    float                    fort_cg_macros_:   2100, 4124.
        5710    float.p                  fort_cg_macros_:   4125, 4135.
       11041    format                   fort_cg_macros_:   6592,
                                         fort_operator_table:       41.
       11053    format.pp                fort_cg_macros_:   6596, 6611.
       11055    format.pv                fort_cg_macros_:   6614, 6618.
       11057    format_c                 fort_cg_macros_:   6594, 6598, 6617.
           6    format_slot              fort_cg_macros_:   6607, 6621,
                                         fort_equs:    156.
       13243    form_VLA_packed_ptr      fort_cg_macros_:   8419,
                                         fort_operator_table:       81.
        1422    fortran_chain            fort_cg_macros_:   8385,
                                         fort_equs:    244.
        1447    fortran_end              fort_cg_macros_:   7686,
                                         fort_equs:    183.
        1420    fortran_pause            fort_cg_macros_:   7709,
                                         fort_equs:    242.
        1421    fortran_stop             fort_cg_macros_:   7730,
                                         fort_equs:    243.
        1471    fort_cleanup             fort_cg_macros_:   7989,
                                         fort_equs:    266.
        1450    fort_dmod                fort_cg_macros_:   3532,
                                         fort_equs:    184.
         767    fort_modfl               fort_cg_macros_:   3517,
                                         fort_equs:    223.
        1470    fort_return_mac          fort_cg_macros_:   8070,
                                         fort_equs:    265.
        1472    fort_storage             fort_cg_macros_:   8006,
                                         fort_equs:    267.
         400    for_divide               fort_equs:    138.
        1252    ftn_array_xmit           fort_cg_macros_:   6757, 6828,
                                         fort_equs:    204.
        1440    ftn_get_area_ptr         fort_cg_macros_:   6962, 7079,
                                         fort_equs:    250.
        1466    ftn_inquire_element      fort_cg_macros_:   7093,
                                         fort_equs:    263.
        1250    ftn_manip                fort_cg_macros_:   6841, 6858, 6876, 6898, 6934, 7060, 7215, 7229,
                                         fort_equs:    205.
        1437    ftn_open_element         fort_cg_macros_:   6981,
                                         fort_equs:    249.
        1246    ftn_read                 fort_cg_macros_:   6564,
                                         fort_equs:    201.
        1251    ftn_scalar_xmit          fort_cg_macros_:   6685,
                                         fort_equs:    203.
        1253    ftn_terminate            fort_cg_macros_:   7330,
                                         fort_equs:    206.
        1247    ftn_write                fort_cg_macros_:   6583,
                                         fort_equs:    202.
       12561    func                     fort_cg_macros_:   7938,
                                         fort_operator_table:       72.
       12534    func_join                fort_cg_macros_:   7881, 7886, 7890, 7894, 7898, 7903.
       12507    func_ref                 fort_cg_macros_:   7868,
                                         fort_operator_table:       68.
       12540    func_ref.star_extent     fort_cg_macros_:   7876, 7912.
        4254    g.amax1                  fort_cg_macros_:   2753, 2757, 2768, 2848.
        4272    g.amax1.dp               fort_cg_macros_:   2857, 2870.
        4264    g.amax1.int              fort_cg_macros_:   2856, 2861.
        4260    g.amax1.loop             fort_cg_macros_:   2854, 2884.
        4273    g.amax1.loop.1           fort_cg_macros_:   2826, 2852, 2855, 2868, 2873.
        4304    g.amax1.r                fort_cg_macros_:   2879, 2886.
        4603    g.amin1                  fort_cg_macros_:   3100, 3104, 3115, 3195.
        4621    g.amin1.dp               fort_cg_macros_:   3204, 3217.
        4613    g.amin1.int              fort_cg_macros_:   3203, 3208.
        4607    g.amin1.loop             fort_cg_macros_:   3201, 3231.
        4622    g.amin1.loop.1           fort_cg_macros_:   3173, 3199, 3202, 3215, 3220.
        4633    g.amin1.r                fort_cg_macros_:   3226, 3233.
        4305    g.dmax1                  fort_cg_macros_:   2761, 2765, 2771, 2889.
        4315    g.dmax1.int              fort_cg_macros_:   2897, 2902.
        4311    g.dmax1.loop             fort_cg_macros_:   2895, 2930.
        4327    g.dmax1.loop.1           fort_cg_macros_:   2778, 2830, 2871, 2893, 2896, 2909, 2917.
        4332    g.dmax1.loop.2           fort_cg_macros_:   2915, 2922.
        4340    g.dmax1.r                fort_cg_macros_:   2925, 2932.
        4323    g.dmax1.real             fort_cg_macros_:   2898, 2911.
        4634    g.dmin1                  fort_cg_macros_:   3108, 3112, 3118, 3236.
        4644    g.dmin1.int              fort_cg_macros_:   3244, 3249.
        4640    g.dmin1.loop             fort_cg_macros_:   3242, 3277.
        4656    g.dmin1.loop.1           fort_cg_macros_:   3125, 3177, 3218, 3240, 3243, 3256, 3264.
        4661    g.dmin1.loop.2           fort_cg_macros_:   3262, 3269.
        4667    g.dmin1.r                fort_cg_macros_:   3272, 3279.
        4652    g.dmin1.real             fort_cg_macros_:   3245, 3258.
        4226    g.max0                   fort_cg_macros_:   2749, 2811.
        4240    g.max0.dp                fort_cg_macros_:   2820, 2828.
        4232    g.max0.loop              fort_cg_macros_:   2817, 2843.
        4242    g.max0.loop.1            fort_cg_macros_:   2815, 2818, 2832.
        4253    g.max0.r                 fort_cg_macros_:   2838, 2845.
        4236    g.max0.real              fort_cg_macros_:   2819, 2824.
        4555    g.min0                   fort_cg_macros_:   3096, 3158.
        4567    g.min0.dp                fort_cg_macros_:   3167, 3175.
        4561    g.min0.loop              fort_cg_macros_:   3164, 3190.
        4571    g.min0.loop.1            fort_cg_macros_:   3162, 3165, 3179.
        4602    g.min0.r                 fort_cg_macros_:   3185, 3192.
        4565    g.min0.real              fort_cg_macros_:   3166, 3171.
        1417    get_math_entry           fort_cg_macros_:   8210,
                                         fort_equs:    241.
       10014    greater                  fort_cg_macros_:   5725,
                                         fort_operator_table:       29.
       10131    greater_cc               fort_cg_macros_:   5729, 5834.
       10126    greater_cd               fort_cg_macros_:   5729, 5831.
       10151    greater_ch               fort_cg_macros_:   5839, 5856.
       10115    greater_ci               fort_cg_macros_:   5729, 5819.
       10121    greater_cr               fort_cg_macros_:   5729, 5825.
       10123    greater_dc               fort_cg_macros_:   5729, 5828.
       10065    greater_dd               fort_cg_macros_:   5729, 5779.
       10072    greater_dd.1             fort_cg_macros_:   5780, 5787.
       10151    greater_dh               fort_cg_macros_:   5839, 5855.
       10052    greater_di               fort_cg_macros_:   5729, 5761.
       10104    greater_dr               fort_cg_macros_:   5729, 5804.
       10111    greater_dr.1             fort_cg_macros_:   5805, 5812.
       10166    greater_e1               fort_cg_macros_:   5729, 5878.
       10134    greater_e2               fort_cg_macros_:   5729, 5837.
       10202    greater_hc               fort_cg_macros_:   5884, 5896.
       10202    greater_hd               fort_cg_macros_:   5884, 5895.
       10160    greater_hh               fort_cg_macros_:   5839, 5868, 5884.
       10176    greater_hi               fort_cg_macros_:   5884, 5886.
       10176    greater_hr               fort_cg_macros_:   5884, 5887.
       10176    greater_ht               fort_cg_macros_:   5884, 5888.
       10113    greater_ic               fort_cg_macros_:   5729, 5816.
       10046    greater_id               fort_cg_macros_:   5729, 5754.
       10142    greater_ih               fort_cg_macros_:   5839, 5841.
       10031    greater_ii               fort_cg_macros_:   5729, 5731.
       10035    greater_ii.1             fort_cg_macros_:   5732, 5738.
       10037    greater_ir               fort_cg_macros_:   5729, 5742.
        7606    greater_or_equal         fort_cg_macros_:   5531,
                                         fort_operator_table:       28.
        7723    greater_or_equal_cc      fort_cg_macros_:   5536, 5641.
        7720    greater_or_equal_cd      fort_cg_macros_:   5536, 5638.
        7743    greater_or_equal_ch      fort_cg_macros_:   5646, 5663.
        7707    greater_or_equal_ci      fort_cg_macros_:   5536, 5626.
        7713    greater_or_equal_cr      fort_cg_macros_:   5536, 5632.
        7715    greater_or_equal_dc      fort_cg_macros_:   5536, 5635.
        7657    greater_or_equal_dd      fort_cg_macros_:   5536, 5586.
        7664    greater_or_equal_dd.1    fort_cg_macros_:   5587, 5594.
        7743    greater_or_equal_dh      fort_cg_macros_:   5646, 5662.
        7644    greater_or_equal_di      fort_cg_macros_:   5536, 5568.
        7676    greater_or_equal_dr      fort_cg_macros_:   5536, 5611.
        7703    greater_or_equal_dr.1    fort_cg_macros_:   5612, 5619.
        7760    greater_or_equal_e1      fort_cg_macros_:   5536, 5685.
        7726    greater_or_equal_e2      fort_cg_macros_:   5536, 5644.
        7774    greater_or_equal_hc      fort_cg_macros_:   5691, 5703.
        7774    greater_or_equal_hd      fort_cg_macros_:   5691, 5702.
        7752    greater_or_equal_hh      fort_cg_macros_:   5646, 5675, 5691.
        7770    greater_or_equal_hi      fort_cg_macros_:   5691, 5693.
        7770    greater_or_equal_hr      fort_cg_macros_:   5691, 5694.
        7770    greater_or_equal_ht      fort_cg_macros_:   5691, 5695.
        7705    greater_or_equal_ic      fort_cg_macros_:   5536, 5623.
        7640    greater_or_equal_id      fort_cg_macros_:   5536, 5561.
        7734    greater_or_equal_ih      fort_cg_macros_:   5646, 5648.
        7623    greater_or_equal_ii      fort_cg_macros_:   5536, 5538.
        7627    greater_or_equal_ii.1    fort_cg_macros_:   5539, 5545.
        7631    greater_or_equal_ir      fort_cg_macros_:   5536, 5549.
        7711    greater_or_equal_rc      fort_cg_macros_:   5536, 5629.
        7667    greater_or_equal_rd      fort_cg_macros_:   5536, 5599.
        7673    greater_or_equal_rd.1    fort_cg_macros_:   5600, 5606.
        7734    greater_or_equal_rh      fort_cg_macros_:   5646, 5649.
        7635    greater_or_equal_ri      fort_cg_macros_:   5536, 5556.
        7647    greater_or_equal_rr      fort_cg_macros_:   5536, 5573.
        7654    greater_or_equal_rr.1    fort_cg_macros_:   5574, 5581.
        7734    greater_or_equal_th      fort_cg_macros_:   5646, 5650.
       10000    greater_or_equal_tl      fort_cg_macros_:   5536, 5710.
       10006    greater_or_equal_tl.1    fort_cg_macros_:   5712, 5714.
       10012    greater_or_equal_tl.2    fort_cg_macros_:   5715, 5721.
       10117    greater_rc               fort_cg_macros_:   5729, 5822.
       10075    greater_rd               fort_cg_macros_:   5729, 5792.
       10101    greater_rd.1             fort_cg_macros_:   5793, 5799.
       10142    greater_rh               fort_cg_macros_:   5839, 5842.
       10043    greater_ri               fort_cg_macros_:   5729, 5749.
       10055    greater_rr               fort_cg_macros_:   5729, 5766.
       10062    greater_rr.1             fort_cg_macros_:   5767, 5774.
       10142    greater_th               fort_cg_macros_:   5839, 5843.
       10206    greater_tl               fort_cg_macros_:   5729, 5903.
       10214    greater_tl.1             fort_cg_macros_:   5905, 5907.
       10220    greater_tl.2             fort_cg_macros_:   5908, 5914.
        4000    ia                       fort_cg_macros_:   4697, 4709, 4721, 4733,
                                         fort_equs:     80.
        3424    iabs                     fort_cg_macros_:   2100, 2212.
        3425    iabs.1                   fort_cg_macros_:   2207, 2214.
        3457    iabs.p                   fort_cg_macros_:   2213, 2250.
        6242    ichar                    fort_cg_macros_:   2100, 4459.
        6254    ichar.aligned            fort_cg_macros_:   4466, 4477.
        6261    ichar.constant           fort_cg_macros_:   4462, 4487.
        6263    ichar.p                  fort_cg_macros_:   4460, 4491.
        3770    idim                     fort_cg_macros_:   2100, 2553.
        4113    idim.p                   fort_cg_macros_:   2555, 2557, 2685.
        5600    idint                    fort_cg_macros_:   2100, 4009.
        5602    idint.p                  fort_cg_macros_:   4010, 4016.
        5662    idnint                   fort_cg_macros_:   2100, 4093.
        5664    idnint.p                 fort_cg_macros_:   4094, 4099.
        3000    ieaq                     fort_cg_macros_:    522,  523,  535,  551,  552,  564,  575,  578,  582,  595,  799,
                                                             802,  816,  832,  833,  848,  862,  865,  879,  895,  896,  911,
                                                             923,  926,  930,  945, 1066, 1069, 1082, 1099, 1102, 1115, 1279,
                                                            1283, 1300, 1315, 1319, 1336, 1696, 1699, 1710, 1713, 4142, 4220,
                                                            4227, 4240, 4244, 4259, 4265, 4292, 4299, 4307,
                                         fort_equs:     78.
        5576    ifix                     fort_cg_macros_:   2100, 4004.
        5602    ifix.p                   fort_cg_macros_:   4005, 4015.
         400    if_bit                   fort_cg_macros_:    229, 1818, 1837, 4466, 6598, 6618, 6701, 6710, 6719, 6728, 6737,
                                                            6774, 6783, 6792, 6801, 6810, 6918, 6921, 7307, 7963, 8116, 8117,
                                                            8118, 8188, 8248, 8268, 8270, 8280, 8295,
                                         fort_equs:     50.
        6451    ilr.1                    fort_cg_macros_:   4690, 4692.
        6456    ilr.2                    fort_cg_macros_:   4693, 4695.
        6444    ilr.tl                   fort_cg_macros_:   2100, 4689.
        6467    ils.1                    fort_cg_macros_:   4702, 4704.
        6474    ils.2                    fort_cg_macros_:   4705, 4707.
        6462    ils.tl                   fort_cg_macros_:   2100, 4701.
       12725    increment_polish         fort_cg_macros_:   8134,
                                         fort_operator_table:       70.
       13070    inc_for_hdr              fort_cg_macros_:   8236, 8239.
        5000    ind                      fort_cg_macros_:   5954, 6038, 6398, 6496,
                                         fort_equs:     82.
        6264    index                    fort_cg_macros_:   2100, 4494.
        6306    index.1                  fort_cg_macros_:   4500, 4525.
        6321    index.2                  fort_cg_macros_:   4501, 4545.
        6334    index.p                  fort_cg_macros_:   4495, 4497, 4565.
        1231    index_cs_eis             fort_cg_macros_:   4519,
                                         fort_equs:    252.
      776000    indices                  fort_cg_macros_:   8257,
                                         fort_equs:    122,  124.
         200    inhibit                  fort_cg_macros_:    201,  207,  208,  210,  212,  220,  227,  229,  231,  236,  239,
                                                             241,  245,  251,  256,  266,  269,  275,  280,  286,  289,  292,
                                                             296,  299,  300,  301,  304,  305,  306,  309,  310,  311,  314,
                                                             315,  316,  319,  320,  321,  324,  325,  326,  329,  330,  331,
                                                             334,  336,  339,  340,  341,  344,  345,  346,  349,  350,  353,
                                                             354,  355,  358,  360,  361,  364,  367,  368,  369,  372,  373,
                                                             376,  377,  378,  381,  382,  383,  386,  388,  390,  391,  392,
                                                             395,  401,  402,  403,  404,  405,  409,  410,  411,  412,  413,
                                                             417,  422,  425,  426,  429,  430,  433,  434,  437,  440,  441,
                                                             444,  445,  448,  449,  450,  453,  458,  461,  463,  466,  469,
                                                             471,  474,  477,  479,  482,  484,  487,  489,  492,  495,  497,
                                                             499,  503,  506,  509,  510,  511,  514,  517,  519,  520,  522,
                                                             523,  526,  527,  532,  533,  535,  536,  540,  543,  546,  548,
                                                             549,  551,  552,  555,  556,  561,  562,  564,  565,  569,  572,
                                                             574,  575,  576,  578,  581,  582,  585,  586,  591,  592,  595,
                                                             596,  600,  604,  607,  610,  613,  614,  618,  622,  625,  627,
                                                             630,  632,  634,  637,  639,  641,  645,  648,  649,  650,  653,
                                                             656,  658,  661,  664,  666,  668,  671,  673,  675,  679,  682,
                                                             683,  684,  687,  690,  692,  695,  698,  699,  701,  703,  706,
                                                             709,  712,  713,  715,  717,  720,  723,  726,  727,  729,  731,
                                                             734,  737,  740,  741,  743,  745,  748,  751,  754,  756,  758,
                                                             760,  761,  762,  764,  767,  768,  769,  770,  773,  775,  777,
                                                             779,  780,  783,  786,  788,  789,  790,  793,  795,  796,  797,
                                                             799,  800,  802,  805,  806,  811,  812,  814,  816,  817,  820,
                                                             823,  826,  828,  829,  830,  832,  833,  836,  837,  840,  845,
                                                             846,  848,  849,  853,  856,  858,  859,  860,  862,  863,  865,
                                                             868,  869,  874,  875,  877,  879,  880,  883,  886,  889,  891,
                                                             892,  893,  895,  896,  899,  900,  903,  908,  909,  911,  912,
                                                             916,  919,  921,  922,  923,  924,  926,  929,  930,  933,  934,
                                                             937,  941,  942,  945,  946,  949,  952,  956,  959,  962,  965,
                                                             966,  967,  971,  975,  978,  979,  982,  986,  989,  992,  994,
                                                             997, 1000, 1002, 1005, 1007, 1010, 1012, 1015, 1018, 1020, 1022,
                                                            1026, 1029, 1032, 1034, 1036, 1038, 1039, 1041, 1042, 1045, 1046,
                                                            1047, 1048, 1051, 1053, 1054, 1055, 1058, 1061, 1063, 1064, 1066,
                                                            1068, 1069, 1072, 1073, 1076, 1079, 1082, 1083, 1086, 1088, 1091,
                                                            1094, 1096, 1097, 1099, 1101, 1102, 1105, 1106, 1109, 1112, 1115,
                                                            1116, 1119, 1121, 1124, 1125, 1128, 1129, 1133, 1134, 1137, 1140,
                                                            1144, 1147, 1150, 1154, 1157, 1158, 1160, 1163, 1165, 1167, 1170,
                                                            1172, 1175, 1177, 1179, 1182, 1184, 1187, 1189, 1191, 1195, 1198,
                                                            1200, 1202, 1206, 1209, 1211, 1214, 1216, 1219, 1221, 1223, 1224,
                                                            1225, 1229, 1232, 1233, 1234, 1237, 1239, 1241, 1243, 1244, 1246,
                                                            1247, 1250, 1251, 1252, 1253, 1256, 1258, 1259, 1260, 1263, 1266,
                                                            1267, 1270, 1271, 1274, 1276, 1277, 1279, 1280, 1283, 1286, 1287,
                                                            1290, 1292, 1296, 1297, 1300, 1301, 1304, 1305, 1306, 1307, 1310,
                                                            1312, 1313, 1315, 1316, 1319, 1322, 1323, 1326, 1328, 1332, 1333,
                                                            1336, 1337, 1340, 1341, 1344, 1345, 1348, 1349, 1350, 1353, 1355,
                                                            1358, 1361, 1364, 1366, 1367, 1369, 1372, 1373, 1374, 1379, 1380,
                                                            1381, 1382, 1384, 1387, 1388, 1389, 1394, 1396, 1397, 1399, 1402,
                                                            1403, 1404, 1409, 1410, 1411, 1412, 1414, 1417, 1418, 1419, 1432,
                                                            1433, 1434, 1435, 1438, 1439, 1444, 1447, 1449, 1450, 1451, 1452,
                                                            1454, 1455, 1458, 1460, 1462, 1464, 1465, 1466, 1468, 1471, 1473,
                                                            1474, 1477, 1479, 1480, 1481, 1482, 1484, 1485, 1488, 1490, 1492,
                                                            1494, 1495, 1496, 1498, 1501, 1503, 1504, 1507, 1509, 1510, 1511,
                                                            1512, 1514, 1515, 1518, 1521, 1523, 1524, 1525, 1527, 1528, 1531,
                                                            1534, 1536, 1537, 1538, 1540, 1541, 1544, 1546, 1547, 1550, 1552,
                                                            1553, 1554, 1555, 1557, 1558, 1561, 1562, 1563, 1565, 1567, 1568,
                                                            1569, 1570, 1572, 1576, 1579, 1581, 1582, 1583, 1586, 1587, 1588,
                                                            1590, 1592, 1594, 1595, 1596, 1598, 1601, 1604, 1606, 1607, 1609,
                                                            1612, 1613, 1614, 1617, 1618, 1620, 1621, 1623, 1626, 1629, 1630,
                                                            1631, 1633, 1634, 1639, 1640, 1643, 1644, 1647, 1648, 1649, 1651,
                                                            1652, 1655, 1656, 1659, 1662, 1666, 1667, 1668, 1669, 1671, 1674,
                                                            1676, 1679, 1680, 1682, 1685, 1686, 1688, 1691, 1693, 1694, 1696,
                                                            1697, 1699, 1700, 1701, 1703, 1704, 1707, 1709, 1710, 1711, 1713,
                                                            1714, 1720, 1721, 1722, 1723, 1725, 1726, 1727, 1728, 1730, 1731,
                                                            1733, 1734, 1736, 1738, 1739, 1740, 1743, 1744, 1745, 1746, 1747,
                                                            1748, 1749, 1750, 1751, 1754, 1756, 1757, 1759, 1761, 1762, 1763,
                                                            1770, 1771, 1773, 1777, 1778, 1780, 1782, 1784, 1787, 1793, 1795,
                                                            1798, 1802, 1803, 1805, 1806, 1807, 1808, 1811, 1813, 1815, 1816,
                                                            1818, 1820, 1826, 1827, 1829, 1831, 1833, 1835, 1837, 1839, 1840,
                                                            1843, 1844, 1848, 1850, 1858, 1860, 1864, 1865, 1869, 1871, 1874,
                                                            1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1885, 1887, 1888,
                                                            1890, 1898, 1899, 1901, 1905, 1906, 1908, 1910, 1912, 1913, 1915,
                                                            1921, 1923, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934,
                                                            1937, 1939, 1940, 1942, 1950, 1951, 1953, 1957, 1958, 1960, 1962,
                                                            1964, 1965, 1967, 1973, 1975, 1980, 1983, 1986, 1988, 1989, 1992,
                                                            1994, 1995, 1998, 2000, 2001, 2004, 2006, 2007, 2010, 2013, 2016,
                                                            2017, 2020, 2021, 2024, 2027, 2028, 2029, 2031, 2034, 2037, 2038,
                                                            2041, 2044, 2045, 2048, 2049, 2052, 2053, 2056, 2057, 2065, 2066,
                                                            2068, 2069, 2071, 2073, 2076, 2077, 2079, 2082, 2083, 2086, 2087,
                                                            2090, 2091, 2094, 2097, 2100, 2103, 2107, 2112, 2113, 2116, 2117,
                                                            2118, 2121, 2123, 2126, 2128, 2131, 2133, 2136, 2138, 2141, 2143,
                                                            2146, 2148, 2151, 2153, 2156, 2158, 2161, 2162, 2163, 2164, 2167,
                                                            2168, 2169, 2170, 2173, 2174, 2175, 2176, 2179, 2180, 2181, 2187,
                                                            2189, 2192, 2194, 2197, 2199, 2202, 2204, 2207, 2208, 2209, 2210,
                                                            2213, 2215, 2219, 2222, 2224, 2226, 2229, 2231, 2233, 2235, 2238,
                                                            2240, 2241, 2242, 2243, 2244, 2247, 2248, 2251, 2254, 2257, 2260,
                                                            2261, 2262, 2263, 2266, 2267, 2270, 2273, 2274, 2275, 2276, 2278,
                                                            2279, 2282, 2284, 2285, 2286, 2287, 2288, 2290, 2291, 2294, 2296,
                                                            2297, 2298, 2299, 2300, 2303, 2304, 2307, 2310, 2313, 2314, 2315,
                                                            2316, 2319, 2320, 2323, 2326, 2327, 2328, 2329, 2331, 2332, 2335,
                                                            2337, 2338, 2339, 2340, 2341, 2343, 2344, 2347, 2350, 2353, 2354,
                                                            2355, 2356, 2359, 2360, 2363, 2366, 2367, 2368, 2369, 2371, 2372,
                                                            2375, 2377, 2378, 2379, 2380, 2381, 2383, 2384, 2387, 2390, 2393,
                                                            2396, 2397, 2400, 2401, 2404, 2405, 2408, 2409, 2412, 2413, 2416,
                                                            2419, 2422, 2423, 2424, 2425, 2426, 2427, 2430, 2431, 2432, 2433,
                                                            2434, 2435, 2438, 2441, 2444, 2447, 2450, 2453, 2456, 2459, 2462,
                                                            2465, 2466, 2467, 2468, 2469, 2470, 2472, 2473, 2476, 2477, 2478,
                                                            2479, 2482, 2483, 2484, 2485, 2486, 2488, 2490, 2491, 2495, 2498,
                                                            2499, 2500, 2501, 2504, 2505, 2508, 2511, 2512, 2513, 2514, 2516,
                                                            2517, 2520, 2522, 2523, 2524, 2525, 2526, 2528, 2529, 2532, 2534,
                                                            2535, 2536, 2537, 2538, 2541, 2542, 2545, 2548, 2551, 2554, 2555,
                                                            2556, 2557, 2560, 2562, 2563, 2564, 2571, 2574, 2575, 2578, 2579,
                                                            2582, 2583, 2586, 2587, 2590, 2593, 2596, 2599, 2602, 2605, 2608,
                                                            2611, 2614, 2617, 2620, 2623, 2626, 2629, 2630, 2631, 2632, 2636,
                                                            2639, 2642, 2643, 2644, 2645, 2648, 2649, 2650, 2651, 2655, 2658,
                                                            2661, 2662, 2663, 2664, 2668, 2671, 2674, 2675, 2676, 2680, 2683,
                                                            2687, 2690, 2691, 2692, 2693, 2696, 2697, 2700, 2703, 2704, 2705,
                                                            2706, 2708, 2709, 2712, 2715, 2716, 2717, 2718, 2719, 2721, 2722,
                                                            2725, 2728, 2729, 2730, 2731, 2732, 2735, 2736, 2739, 2742, 2745,
                                                            2746, 2749, 2752, 2753, 2756, 2757, 2760, 2761, 2764, 2765, 2768,
                                                            2771, 2774, 2775, 2776, 2777, 2778, 2781, 2782, 2785, 2788, 2791,
                                                            2794, 2797, 2800, 2803, 2806, 2809, 2812, 2813, 2814, 2815, 2818,
                                                            2819, 2820, 2822, 2826, 2830, 2836, 2838, 2840, 2841, 2842, 2843,
                                                            2846, 2849, 2850, 2851, 2852, 2855, 2856, 2857, 2859, 2862, 2863,
                                                            2864, 2866, 2867, 2868, 2871, 2877, 2879, 2881, 2882, 2883, 2884,
                                                            2887, 2890, 2891, 2892, 2893, 2896, 2897, 2898, 2900, 2903, 2904,
                                                            2905, 2907, 2908, 2909, 2915, 2923, 2925, 2927, 2928, 2929, 2930,
                                                            2933, 2936, 2937, 2938, 2939, 2940, 2942, 2943, 2944, 2950, 2952,
                                                            2954, 2955, 2956, 2957, 2958, 2962, 2965, 2968, 2969, 2970, 2971,
                                                            2972, 2974, 2975, 2981, 2983, 2985, 2986, 2987, 2988, 2989, 2992,
                                                            2995, 2998, 2999, 3000, 3001, 3002, 3004, 3005, 3011, 3013, 3015,
                                                            3016, 3017, 3018, 3019, 3022, 3025, 3028, 3029, 3030, 3031, 3032,
                                                            3034, 3035, 3036, 3037, 3043, 3045, 3047, 3048, 3049, 3050, 3051,
                                                            3055, 3058, 3061, 3062, 3063, 3064, 3065, 3067, 3068, 3069, 3075,
                                                            3077, 3079, 3080, 3081, 3082, 3083, 3086, 3089, 3092, 3093, 3096,
                                                            3099, 3100, 3103, 3104, 3107, 3108, 3111, 3112, 3115, 3118, 3121,
                                                            3122, 3123, 3124, 3125, 3128, 3129, 3132, 3135, 3138, 3141, 3144,
                                                            3147, 3150, 3153, 3156, 3159, 3160, 3161, 3162, 3165, 3166, 3167,
                                                            3169, 3173, 3177, 3183, 3185, 3187, 3188, 3189, 3190, 3193, 3196,
                                                            3197, 3198, 3199, 3202, 3203, 3204, 3206, 3209, 3210, 3211, 3213,
                                                            3214, 3215, 3218, 3224, 3226, 3228, 3229, 3230, 3231, 3234, 3237,
                                                            3238, 3239, 3240, 3243, 3244, 3245, 3247, 3250, 3251, 3252, 3254,
                                                            3255, 3256, 3262, 3270, 3272, 3274, 3275, 3276, 3277, 3280, 3283,
                                                            3284, 3285, 3286, 3287, 3289, 3290, 3291, 3297, 3299, 3301, 3302,
                                                            3303, 3304, 3305, 3309, 3312, 3315, 3316, 3317, 3318, 3319, 3321,
                                                            3322, 3323, 3329, 3331, 3333, 3334, 3335, 3336, 3337, 3340, 3343,
                                                            3346, 3347, 3348, 3349, 3350, 3352, 3353, 3359, 3361, 3363, 3364,
                                                            3365, 3366, 3367, 3370, 3373, 3376, 3377, 3378, 3379, 3380, 3382,
                                                            3383, 3384, 3385, 3391, 3393, 3395, 3396, 3397, 3398, 3399, 3403,
                                                            3406, 3409, 3410, 3411, 3412, 3413, 3415, 3416, 3417, 3423, 3425,
                                                            3427, 3428, 3429, 3430, 3431, 3434, 3437, 3440, 3443, 3446, 3447,
                                                            3450, 3451, 3454, 3455, 3458, 3459, 3462, 3465, 3468, 3471, 3474,
                                                            3477, 3480, 3483, 3486, 3489, 3492, 3495, 3498, 3501, 3502, 3504,
                                                            3506, 3509, 3510, 3511, 3512, 3515, 3516, 3518, 3519, 3522, 3523,
                                                            3524, 3525, 3528, 3530, 3531, 3533, 3534, 3537, 3538, 3542, 3545,
                                                            3548, 3549, 3550, 3551, 3554, 3555, 3557, 3558, 3561, 3562, 3565,
                                                            3566, 3569, 3570, 3573, 3574, 3577, 3580, 3583, 3586, 3589, 3592,
                                                            3595, 3598, 3601, 3604, 3607, 3610, 3613, 3616, 3617, 3619, 3620,
                                                            3623, 3624, 3625, 3626, 3629, 3630, 3633, 3634, 3637, 3638, 3639,
                                                            3643, 3646, 3648, 3650, 3652, 3653, 3655, 3656, 3657, 3658, 3659,
                                                            3662, 3664, 3665, 3668, 3670, 3672, 3673, 3675, 3676, 3677, 3678,
                                                            3681, 3683, 3686, 3688, 3690, 3692, 3693, 3695, 3696, 3697, 3698,
                                                            3699, 3702, 3704, 3705, 3708, 3710, 3712, 3713, 3715, 3716, 3717,
                                                            3718, 3721, 3723, 3726, 3728, 3730, 3732, 3733, 3735, 3736, 3737,
                                                            3738, 3739, 3742, 3744, 3745, 3748, 3750, 3752, 3753, 3755, 3756,
                                                            3757, 3758, 3761, 3763, 3766, 3767, 3768, 3769, 3772, 3773, 3776,
                                                            3779, 3780, 3781, 3783, 3784, 3787, 3789, 3790, 3791, 3792, 3793,
                                                            3795, 3796, 3799, 3801, 3802, 3803, 3804, 3807, 3808, 3812, 3815,
                                                            3816, 3817, 3818, 3821, 3822, 3825, 3828, 3829, 3830, 3832, 3833,
                                                            3836, 3838, 3839, 3840, 3841, 3842, 3844, 3845, 3848, 3850, 3851,
                                                            3852, 3853, 3856, 3857, 3861, 3864, 3867, 3868, 3871, 3874, 3875,
                                                            3876, 3879, 3880, 3883, 3884, 3885, 3886, 3889, 3890, 3894, 3895,
                                                            3900, 3903, 3906, 3907, 3910, 3913, 3914, 3915, 3918, 3919, 3922,
                                                            3923, 3924, 3925, 3928, 3929, 3933, 3934, 3939, 3942, 3945, 3946,
                                                            3949, 3952, 3953, 3954, 3957, 3958, 3961, 3962, 3963, 3964, 3967,
                                                            3968, 3972, 3973, 3978, 3981, 3984, 3985, 3988, 3989, 3992, 3993,
                                                            3996, 3997, 4000, 4001, 4005, 4006, 4010, 4011, 4017, 4020, 4023,
                                                            4024, 4027, 4029, 4032, 4034, 4038, 4039, 4044, 4047, 4050, 4051,
                                                            4054, 4056, 4059, 4061, 4065, 4066, 4071, 4074, 4077, 4078, 4081,
                                                            4082, 4084, 4087, 4088, 4090, 4094, 4095, 4100, 4103, 4106, 4107,
                                                            4110, 4111, 4114, 4115, 4117, 4120, 4121, 4125, 4126, 4130, 4131,
                                                            4137, 4140, 4142, 4143, 4146, 4149, 4152, 4153, 4156, 4157, 4160,
                                                            4161, 4164, 4165, 4168, 4171, 4172, 4173, 4176, 4179, 4180, 4183,
                                                            4184, 4187, 4188, 4190, 4193, 4194, 4197, 4198, 4199, 4202, 4205,
                                                            4208, 4211, 4212, 4213, 4214, 4215, 4216, 4217, 4218, 4219, 4220,
                                                            4221, 4224, 4225, 4226, 4227, 4228, 4229, 4230, 4231, 4232, 4235,
                                                            4236, 4237, 4238, 4240, 4241, 4244, 4246, 4247, 4250, 4251, 4252,
                                                            4253, 4255, 4257, 4259, 4260, 4263, 4265, 4267, 4269, 4270, 4273,
                                                            4276, 4284, 4287, 4289, 4291, 4292, 4294, 4295, 4297, 4299, 4301,
                                                            4302, 4305, 4307, 4309, 4311, 4312, 4315, 4318, 4319, 4320, 4321,
                                                            4324, 4325, 4328, 4331, 4332, 4333, 4335, 4336, 4339, 4341, 4342,
                                                            4343, 4344, 4345, 4347, 4348, 4351, 4354, 4357, 4358, 4359, 4360,
                                                            4363, 4364, 4367, 4370, 4371, 4372, 4374, 4375, 4378, 4380, 4381,
                                                            4382, 4383, 4384, 4386, 4387, 4390, 4393, 4396, 4397, 4398, 4399,
                                                            4402, 4403, 4406, 4409, 4410, 4411, 4413, 4414, 4417, 4419, 4420,
                                                            4421, 4422, 4423, 4425, 4426, 4429, 4432, 4435, 4437, 4439, 4441,
                                                            4443, 4448, 4450, 4453, 4454, 4457, 4460, 4462, 4464, 4466, 4468,
                                                            4473, 4475, 4478, 4482, 4485, 4488, 4489, 4492, 4495, 4496, 4497,
                                                            4499, 4500, 4501, 4505, 4507, 4509, 4510, 4513, 4515, 4517, 4518,
                                                            4521, 4523, 4529, 4531, 4543, 4549, 4551, 4563, 4566, 4569, 4571,
                                                            4573, 4576, 4579, 4580, 4581, 4583, 4585, 4590, 4593, 4596, 4597,
                                                            4598, 4600, 4602, 4607, 4610, 4613, 4614, 4615, 4617, 4619, 4624,
                                                            4627, 4630, 4631, 4632, 4634, 4636, 4641, 4644, 4647, 4648, 4649,
                                                            4650, 4651, 4653, 4656, 4659, 4660, 4661, 4665, 4666, 4667, 4668,
                                                            4669, 4670, 4673, 4676, 4677, 4680, 4683, 4686, 4687, 4690, 4693,
                                                            4696, 4697, 4699, 4702, 4705, 4708, 4709, 4711, 4714, 4717, 4720,
                                                            4721, 4723, 4726, 4729, 4732, 4733, 4735, 4738, 4739, 4740, 4744,
                                                            4745, 4746, 4747, 4748, 4749, 4752, 4755, 4756, 4757, 4761, 4762,
                                                            4763, 4764, 4765, 4766, 4769, 4772, 4773, 4776, 4777, 4780, 4781,
                                                            4784, 4785, 4788, 4791, 4795, 4798, 4801, 4804, 4807, 4810, 4816,
                                                            4818, 4821, 4823, 4825, 4829, 4832, 4834, 4836, 4839, 4841, 4844,
                                                            4846, 4848, 4851, 4853, 4856, 4858, 4859, 4861, 4864, 4866, 4869,
                                                            4871, 4872, 4874, 4877, 4879, 4882, 4884, 4886, 4889, 4891, 4894,
                                                            4896, 4897, 4899, 4903, 4906, 4909, 4912, 4915, 4918, 4921, 4924,
                                                            4927, 4928, 4933, 4935, 4936, 4938, 4940, 4942, 4946, 4948, 4949,
                                                            4951, 4953, 4955, 4958, 4960, 4965, 4968, 4970, 4971, 4973, 4978,
                                                            4980, 4982, 4986, 4988, 4990, 4993, 4994, 4997, 4999, 5001, 5005,
                                                            5010, 5012, 5015, 5017, 5019, 5023, 5026, 5028, 5030, 5033, 5035,
                                                            5038, 5040, 5042, 5045, 5047, 5050, 5052, 5053, 5055, 5058, 5060,
                                                            5063, 5065, 5066, 5068, 5071, 5073, 5076, 5078, 5080, 5083, 5085,
                                                            5088, 5090, 5091, 5093, 5097, 5100, 5103, 5106, 5109, 5112, 5115,
                                                            5118, 5121, 5122, 5127, 5129, 5130, 5132, 5134, 5136, 5140, 5142,
                                                            5143, 5145, 5147, 5149, 5152, 5154, 5159, 5162, 5164, 5165, 5167,
                                                            5172, 5174, 5176, 5180, 5182, 5184, 5187, 5188, 5191, 5193, 5195,
                                                            5199, 5204, 5206, 5209, 5211, 5214, 5217, 5219, 5222, 5225, 5227,
                                                            5230, 5231, 5233, 5236, 5237, 5239, 5242, 5245, 5247, 5248, 5250,
                                                            5254, 5257, 5260, 5263, 5266, 5269, 5272, 5275, 5277, 5280, 5281,
                                                            5283, 5284, 5287, 5289, 5292, 5297, 5299, 5300, 5302, 5304, 5306,
                                                            5310, 5312, 5313, 5315, 5317, 5319, 5322, 5324, 5329, 5332, 5334,
                                                            5335, 5337, 5342, 5344, 5346, 5350, 5352, 5354, 5357, 5358, 5361,
                                                            5363, 5369, 5371, 5374, 5376, 5379, 5382, 5384, 5387, 5390, 5392,
                                                            5395, 5396, 5398, 5401, 5402, 5404, 5407, 5410, 5412, 5413, 5415,
                                                            5419, 5422, 5425, 5428, 5431, 5434, 5437, 5440, 5442, 5445, 5446,
                                                            5448, 5449, 5452, 5454, 5457, 5462, 5464, 5465, 5467, 5469, 5471,
                                                            5475, 5477, 5478, 5480, 5482, 5484, 5487, 5489, 5494, 5497, 5499,
                                                            5500, 5502, 5507, 5509, 5511, 5515, 5517, 5519, 5523, 5524, 5527,
                                                            5529, 5534, 5536, 5539, 5541, 5543, 5547, 5550, 5552, 5554, 5557,
                                                            5559, 5562, 5564, 5566, 5569, 5571, 5574, 5576, 5577, 5579, 5582,
                                                            5584, 5587, 5589, 5590, 5592, 5595, 5597, 5600, 5602, 5604, 5607,
                                                            5609, 5612, 5614, 5615, 5617, 5621, 5624, 5627, 5630, 5633, 5636,
                                                            5639, 5642, 5645, 5646, 5651, 5653, 5654, 5656, 5658, 5660, 5664,
                                                            5666, 5667, 5669, 5671, 5673, 5676, 5678, 5683, 5686, 5688, 5689,
                                                            5691, 5696, 5698, 5700, 5704, 5706, 5708, 5711, 5712, 5715, 5717,
                                                            5719, 5723, 5727, 5729, 5732, 5734, 5736, 5740, 5743, 5745, 5747,
                                                            5750, 5752, 5755, 5757, 5759, 5762, 5764, 5767, 5769, 5770, 5772,
                                                            5775, 5777, 5780, 5782, 5783, 5785, 5788, 5790, 5793, 5795, 5797,
                                                            5800, 5802, 5805, 5807, 5808, 5810, 5814, 5817, 5820, 5823, 5826,
                                                            5829, 5832, 5835, 5838, 5839, 5844, 5846, 5847, 5849, 5851, 5853,
                                                            5857, 5859, 5860, 5862, 5864, 5866, 5869, 5871, 5876, 5879, 5881,
                                                            5882, 5884, 5889, 5891, 5893, 5897, 5899, 5901, 5904, 5905, 5908,
                                                            5910, 5912, 5916, 5920, 5921, 5922, 5924, 5926, 5929, 5932, 5936,
                                                            5937, 5938, 5940, 5942, 5945, 5948, 5952, 5954, 5956, 5958, 5961,
                                                            5964, 5967, 5970, 5973, 5976, 5979, 5982, 5985, 5988, 5992, 5993,
                                                            5994, 5996, 5998, 6000, 6006, 6007, 6008, 6010, 6012, 6014, 6019,
                                                            6024, 6027, 6032, 6034, 6036, 6038, 6040, 6043, 6049, 6054, 6058,
                                                            6062, 6066, 6070, 6074, 6078, 6082, 6086, 6089, 6090, 6091, 6094,
                                                            6095, 6097, 6099, 6100, 6105, 6107, 6109, 6111, 6112, 6113, 6115,
                                                            6117, 6120, 6122, 6125, 6126, 6128, 6131, 6133, 6136, 6138, 6141,
                                                            6143, 6145, 6148, 6150, 6153, 6154, 6156, 6159, 6160, 6163, 6164,
                                                            6166, 6168, 6169, 6171, 6172, 6173, 6176, 6178, 6179, 6181, 6182,
                                                            6183, 6186, 6188, 6189, 6191, 6192, 6193, 6196, 6198, 6200, 6201,
                                                            6203, 6205, 6207, 6208, 6213, 6214, 6217, 6218, 6222, 6223, 6226,
                                                            6230, 6231, 6234, 6238, 6239, 6242, 6247, 6249, 6251, 6253, 6255,
                                                            6257, 6259, 6261, 6262, 6263, 6264, 6267, 6268, 6271, 6272, 6275,
                                                            6276, 6279, 6282, 6290, 6292, 6296, 6299, 6301, 6302, 6305, 6306,
                                                            6311, 6312, 6313, 6316, 6317, 6320, 6322, 6323, 6324, 6329, 6331,
                                                            6333, 6336, 6337, 6342, 6345, 6346, 6351, 6352, 6354, 6357, 6358,
                                                            6362, 6364, 6365, 6366, 6371, 6374, 6375, 6378, 6379, 6384, 6385,
                                                            6386, 6388, 6390, 6391, 6398, 6400, 6401, 6406, 6409, 6413, 6417,
                                                            6421, 6425, 6429, 6433, 6437, 6441, 6448, 6449, 6450, 6458, 6460,
                                                            6461, 6465, 6467, 6468, 6469, 6474, 6475, 6478, 6479, 6482, 6483,
                                                            6484, 6489, 6491, 6496, 6498, 6499, 6504, 6507, 6511, 6515, 6519,
                                                            6523, 6527, 6531, 6535, 6539, 6542, 6552, 6556, 6558, 6560, 6561,
                                                            6563, 6565, 6566, 6567, 6570, 6571, 6575, 6577, 6579, 6580, 6582,
                                                            6584, 6585, 6586, 6589, 6590, 6594, 6596, 6598, 6604, 6606, 6608,
                                                            6609, 6612, 6615, 6618, 6619, 6620, 6622, 6623, 6629, 6630, 6632,
                                                            6633, 6640, 6641, 6643, 6644, 6649, 6651, 6653, 6658, 6662, 6666,
                                                            6670, 6674, 6677, 6679, 6684, 6686, 6687, 6688, 6693, 6695, 6697,
                                                            6701, 6703, 6707, 6710, 6712, 6716, 6719, 6721, 6725, 6728, 6730,
                                                            6734, 6737, 6739, 6743, 6746, 6748, 6753, 6756, 6758, 6759, 6760,
                                                            6765, 6766, 6768, 6770, 6774, 6776, 6780, 6783, 6785, 6789, 6792,
                                                            6794, 6798, 6801, 6803, 6807, 6810, 6812, 6816, 6819, 6821, 6827,
                                                            6829, 6830, 6831, 6835, 6836, 6838, 6840, 6842, 6843, 6844, 6847,
                                                            6848, 6852, 6853, 6855, 6857, 6859, 6860, 6861, 6864, 6865, 6870,
                                                            6871, 6873, 6875, 6877, 6878, 6879, 6882, 6883, 6887, 6888, 6889,
                                                            6890, 6892, 6893, 6897, 6899, 6900, 6901, 6904, 6905, 6908, 6909,
                                                            6913, 6914, 6915, 6916, 6917, 6918, 6919, 6920, 6921, 6923, 6924,
                                                            6925, 6927, 6932, 6933, 6935, 6936, 6937, 6940, 6941, 6944, 6945,
                                                            6948, 6949, 6960, 6961, 6963, 6967, 6968, 6969, 6977, 6982, 6985,
                                                            6993, 7003, 7004, 7006, 7007, 7008, 7009, 7010, 7013, 7014, 7016,
                                                            7017, 7018, 7024, 7026, 7028, 7029, 7030, 7033, 7034, 7035, 7036,
                                                            7040, 7043, 7044, 7047, 7048, 7051, 7052, 7055, 7056, 7057, 7059,
                                                            7061, 7062, 7063, 7066, 7077, 7078, 7080, 7082, 7083, 7087, 7091,
                                                            7094, 7096, 7102, 7117, 7118, 7122, 7123, 7124, 7126, 7127, 7136,
                                                            7137, 7141, 7143, 7144, 7151, 7152, 7156, 7158, 7159, 7168, 7169,
                                                            7173, 7175, 7176, 7189, 7190, 7195, 7198, 7199, 7202, 7203, 7206,
                                                            7207, 7211, 7212, 7214, 7216, 7217, 7218, 7224, 7226, 7228, 7230,
                                                            7231, 7232, 7235, 7236, 7241, 7243, 7244, 7246, 7248, 7251, 7252,
                                                            7257, 7259, 7260, 7262, 7265, 7266, 7271, 7273, 7276, 7277, 7279,
                                                            7280, 7285, 7286, 7288, 7294, 7296, 7298, 7301, 7302, 7304, 7306,
                                                            7307, 7310, 7313, 7314, 7318, 7319, 7329, 7331, 7332, 7333, 7337,
                                                            7338, 7339, 7341, 7344, 7346, 7348, 7351, 7352, 7355, 7356, 7357,
                                                            7360, 7361, 7362, 7365, 7366, 7367, 7370, 7371, 7372, 7375, 7376,
                                                            7377, 7378, 7379, 7381, 7384, 7385, 7386, 7390, 7391, 7395, 7396,
                                                            7399, 7400, 7401, 7404, 7406, 7409, 7410, 7413, 7414, 7417, 7418,
                                                            7421, 7423, 7424, 7426, 7427, 7430, 7431, 7434, 7439, 7441, 7443,
                                                            7446, 7447, 7448, 7451, 7452, 7456, 7458, 7461, 7463, 7465, 7466,
                                                            7467, 7470, 7472, 7474, 7477, 7479, 7482, 7484, 7487, 7488, 7489,
                                                            7492, 7494, 7497, 7498, 7499, 7502, 7503, 7504, 7507, 7508, 7509,
                                                            7512, 7514, 7517, 7518, 7519, 7522, 7524, 7527, 7528, 7531, 7534,
                                                            7535, 7536, 7539, 7540, 7543, 7546, 7547, 7548, 7551, 7552, 7555,
                                                            7558, 7559, 7561, 7564, 7565, 7568, 7569, 7571, 7572, 7575, 7576,
                                                            7578, 7580, 7582, 7585, 7586, 7588, 7593, 7596, 7597, 7600, 7601,
                                                            7603, 7605, 7606, 7608, 7610, 7612, 7616, 7617, 7618, 7619, 7622,
                                                            7623, 7624, 7625, 7628, 7629, 7630, 7631, 7634, 7635, 7636, 7637,
                                                            7640, 7641, 7642, 7643, 7646, 7649, 7651, 7654, 7655, 7658, 7659,
                                                            7663, 7664, 7670, 7671, 7677, 7678, 7684, 7688, 7691, 7695, 7699,
                                                            7700, 7701, 7703, 7706, 7710, 7711, 7712, 7716, 7717, 7721, 7722,
                                                            7723, 7725, 7727, 7731, 7732, 7733, 7737, 7738, 7743, 7746, 7748,
                                                            7749, 7750, 7752, 7753, 7754, 7755, 7756, 7758, 7759, 7760, 7761,
                                                            7764, 7765, 7766, 7767, 7769, 7770, 7771, 7772, 7775, 7776, 7779,
                                                            7780, 7783, 7786, 7789, 7791, 7802, 7803, 7804, 7808, 7809, 7810,
                                                            7814, 7818, 7820, 7823, 7828, 7830, 7832, 7834, 7836, 7838, 7841,
                                                            7842, 7845, 7846, 7847, 7848, 7850, 7851, 7852, 7853, 7856, 7857,
                                                            7858, 7859, 7861, 7862, 7863, 7866, 7870, 7872, 7875, 7876, 7877,
                                                            7879, 7881, 7885, 7886, 7889, 7890, 7893, 7894, 7897, 7898, 7901,
                                                            7904, 7906, 7908, 7910, 7913, 7917, 7918, 7920, 7921, 7922, 7928,
                                                            7929, 7931, 7932, 7933, 7934, 7940, 7941, 7943, 7944, 7945, 7946,
                                                            7953, 7956, 7958, 7963, 7965, 7971, 7972, 7974, 7976, 7979, 7981,
                                                            7985, 7987, 7990, 7993, 7994, 7996, 7998, 8001, 8003, 8004, 8005,
                                                            8007, 8008, 8014, 8019, 8022, 8024, 8025, 8027, 8030, 8035, 8036,
                                                            8040, 8045, 8047, 8049, 8051, 8053, 8060, 8063, 8064, 8069, 8071,
                                                            8077, 8078, 8082, 8084, 8086, 8089, 8090, 8092, 8096, 8098, 8099,
                                                            8116, 8117, 8118, 8122, 8123, 8129, 8132, 8137, 8139, 8146, 8148,
                                                            8154, 8155, 8157, 8164, 8165, 8167, 8170, 8171, 8172, 8174, 8179,
                                                            8181, 8184, 8185, 8188, 8190, 8191, 8194, 8195, 8200, 8202, 8204,
                                                            8206, 8207, 8212, 8215, 8220, 8223, 8224, 8227, 8230, 8231, 8234,
                                                            8236, 8237, 8240, 8242, 8243, 8246, 8248, 8250, 8252, 8254, 8256,
                                                            8257, 8258, 8261, 8264, 8266, 8268, 8270, 8273, 8277, 8280, 8283,
                                                            8289, 8290, 8291, 8295, 8297, 8299, 8301, 8303, 8304, 8309, 8311,
                                                            8317, 8319, 8323, 8324, 8325, 8328, 8329, 8330, 8334, 8336, 8337,
                                                            8338, 8341, 8343, 8345, 8346, 8347, 8350, 8352, 8353, 8354, 8357,
                                                            8362, 8370, 8371, 8375, 8380, 8383, 8386, 8387, 8389, 8392, 8393,
                                                            8394, 8397, 8398, 8399, 8403, 8404, 8410, 8415, 8421, 8423, 8426,
                                                            8433, 8434, 8439, 8442, 8449, 8452, 8460, 8462, 8467, 8468, 8470,
                                                            8472, 8479, 8480, 8482, 8484, 8491, 8494, 8496, 8501, 8504, 8506,
                                                            8510, 8511, 8514, 8515, 8519, 8521, 8522, 8523, 8524, 8526, 8528,
                                                            8534, 8536, 8541, 8543, 8547, 8554, 8555,
                                         fort_equs:     48.
       12654    init_auto                fort_cg_macros_:   7985, 8042.
       12665    init_return              fort_cg_macros_:   8049, 8059.
       11527    inquire                  fort_cg_macros_:   7068,
                                         fort_operator_table:      123.
       11613    inquire_case_1           fort_cg_macros_:   7102, 7179.
       11613    inquire_case_10          fort_cg_macros_:   7102, 7184.
       11613    inquire_case_11          fort_cg_macros_:   7102, 7185.
       11613    inquire_case_12          fort_cg_macros_:   7102, 7186.
       11565    inquire_case_13          fort_cg_macros_:   7102, 7108.
       11601    inquire_case_14          fort_cg_macros_:   7102, 7147.
       11613    inquire_case_15          fort_cg_macros_:   7102, 7187.
       11613    inquire_case_16          fort_cg_macros_:   7102, 7188.
       11606    inquire_case_17          fort_cg_macros_:   7102, 7162.
       11606    inquire_case_18          fort_cg_macros_:   7102, 7163.
       11574    inquire_case_19          fort_cg_macros_:   7102, 7131.
       11613    inquire_case_2           fort_cg_macros_:   7102, 7180.
       11606    inquire_case_20          fort_cg_macros_:   7102, 7164.
       11565    inquire_case_21          fort_cg_macros_:   7102, 7109.
       11565    inquire_case_22          fort_cg_macros_:   7102, 7110.
       11565    inquire_case_23          fort_cg_macros_:   7102, 7111.
       11565    inquire_case_24          fort_cg_macros_:   7102, 7112.
       11574    inquire_case_25          fort_cg_macros_:   7102, 7132.
       11565    inquire_case_26          fort_cg_macros_:   7102, 7113.
       11613    inquire_case_3           fort_cg_macros_:   7102, 7181.
       11565    inquire_case_4           fort_cg_macros_:   7102, 7105.
       11613    inquire_case_5           fort_cg_macros_:   7102, 7182.
       11565    inquire_case_6           fort_cg_macros_:   7102, 7106.
       11565    inquire_case_7           fort_cg_macros_:   7102, 7107.
       11574    inquire_case_8           fort_cg_macros_:   7102, 7130.
       11613    inquire_case_9           fort_cg_macros_:   7102, 7183.
       11540    inquire_loop             fort_cg_macros_:   7090, 7127, 7144, 7159, 7176.
       11616    inquire_loop.e           fort_cg_macros_:   7096, 7193.
       11620    inquire_loop.not_char    fort_cg_macros_:   7118, 7197.
       11623    inquire_loop.not_int     fort_cg_macros_:   7137, 7152, 7201.
       11626    inquire_loop.not_logical       fort_cg_macros_:   7169, 7205.
       11631    inquire_return           fort_cg_macros_:   7096, 7210.
       40000    inst_word                fort_cg_macros_:   4443, 4482, 8423,
                                         fort_equs:    136.
      400000    int                      fort_cg_macros_:    965, 1348, 1666, 1738, 2082, 2090, 2094, 2112, 2207, 2213, 2260,
                                                            2313, 2353, 2498, 2555, 2557, 2690, 2818, 2856, 2897, 2938, 2940,
                                                            2957, 3000, 3002, 3018, 3165, 3203, 3244, 3285, 3287, 3304, 3348,
                                                            3350, 3366, 3549, 3551, 3766, 3815, 4125, 4318, 4357, 4396, 4435,
                                                            4993, 5187, 5357, 5523, 5711, 5904, 6107, 6111, 6257, 6261, 6329,
                                                            6351, 6558, 6577, 6596, 6836, 6853, 6871, 6887, 6889, 6914, 7014,
                                                            7056, 7137, 7152, 7224, 7241, 7257, 7748, 7828, 8337, 8346,
                                         fort_equs:     52.
        5602    int.p                    fort_cg_macros_:   3981, 4014.
         465    integer_to_double        fort_cg_macros_:    677,  691, 1398, 1497, 2829, 3176, 3734, 3754,
                                         fort_equs:    187.
         465    integer_to_real          fort_cg_macros_:    643,  657,  763,  782, 1043, 1226, 1248, 1368, 1467, 1571, 1597,
                                                            2825, 2961, 3172, 3308, 3654, 3674, 3694, 3714,
                                         fort_equs:    186.
       11733    internal_file.array      fort_cg_macros_:   7307, 7312.
       11740    internal_file.p          fort_cg_macros_:   7294, 7322.
       11736    internal_file.ret        fort_cg_macros_:   7310, 7317.
         413    interpreter_macros       fort_cg_macros_:    180,  191.
         400    intn                     fort_cg_macros_:   1387, 1417, 1748, 1770, 1807, 1898, 1950, 2161, 2560, 4464, 7341,
                                                            7616, 7753, 7764, 7775, 7841, 7845, 7856, 7885,
                                         fort_equs:     61.
        5557    int_builtin              fort_cg_macros_:   2100, 3980.
        5572    int_builtin.cmpx         fort_cg_macros_:   3981, 3995.
        5570    int_builtin.dp           fort_cg_macros_:   3981, 3991, 4011.
        5564    int_builtin.int          fort_cg_macros_:   3981, 3983.
        5566    int_builtin.real         fort_cg_macros_:   3981, 3987, 4006.
        5574    int_builtin.tl           fort_cg_macros_:   3981, 3999.
       12523    int_func                 fort_cg_macros_:   7872, 7883.
        1351    int_p_int                fort_cg_macros_:   1453,
                                         fort_equs:    194.
        6614    invalid_opnd             fort_cg_macros_:   4800, 4933, 4946, 4971, 5127, 5140, 5165, 5297, 5310, 5335, 5462,
                                                            5475, 5500, 5651, 5664, 5689, 5844, 5857, 5882.
       11655    iostat                   fort_cg_macros_:   7238,
                                         fort_operator_table:       93.
       11664    iostat.p                 fort_cg_macros_:   7241, 7250.
          56    iostat_slot              fort_cg_macros_:   7245,
                                         fort_equs:    166.
        3400    iq                       fort_equs:     79.
        6505    irl.1                    fort_cg_macros_:   4714, 4716.
        6512    irl.2                    fort_cg_macros_:   4717, 4719.
        6500    irl.tl                   fort_cg_macros_:   2100, 4713.
        6523    irs.1                    fort_cg_macros_:   4726, 4728.
        6530    irs.2                    fort_cg_macros_:   4729, 4731.
        6516    irs.tl                   fort_cg_macros_:   2100, 4725.
        5146    isign                    fort_cg_macros_:   2100, 3547.
        5225    isign.p                  fort_cg_macros_:   3549, 3551, 3641.
       12316    item                     fort_cg_macros_:   7661,
                                         fort_operator_table:       60.
       10462    ja1                      fort_cg_macros_:   6189, 6195.
       10454    ja2                      fort_cg_macros_:   6179, 6185.
       10446    ja3                      fort_cg_macros_:   6169, 6175.
       10601    jc_error                 fort_cg_macros_:   6253, 6319.
       10561    jc_labels                fort_cg_macros_:   6298, 6302.
       10567    jc_list.p                fort_cg_macros_:   6247, 6308.
       10565    jc_ret                   fort_cg_macros_:   6304, 6313, 6324.
       10551    jc_tmoz                  fort_cg_macros_:   6282, 6285.
       10546    jc_transfer              fort_cg_macros_:   6268, 6272, 6276, 6278.
       10367    jl_statement             fort_cg_macros_:   6049, 6058, 6062, 6066, 6070, 6074, 6078, 6082, 6086, 6093.
       10317    jump                     fort_cg_macros_:   6021,
                                         fort_operator_table:       33.
       10375    jump_arithmetic          fort_cg_macros_:   6102,
                                         fort_operator_table:       35.
       10434    jump_arithmetic.01       fort_cg_macros_:   6117, 6122, 6128, 6133, 6138, 6145, 6150, 6156, 6158.
       10517    jump_arithmetic.e        fort_cg_macros_:   6107, 6241.
       10477    jump_arithmetic_12       fort_cg_macros_:   6205, 6216.
       10505    jump_arithmetic_13       fort_cg_macros_:   6200, 6225.
       10512    jump_arithmetic_23       fort_cg_macros_:   6201, 6233.
       10411    jump_arithmetic_i        fort_cg_macros_:   6111, 6124.
       10417    jump_arithmetic_i.1      fort_cg_macros_:   6126, 6135.
       10422    jump_arithmetic_r        fort_cg_macros_:   6112, 6140.
       10430    jump_arithmetic_r.1      fort_cg_macros_:   6115, 6143, 6152.
       10611    jump_assigned            fort_cg_macros_:   6326,
                                         fort_operator_table:       37.
       10616    jump_assigned.1          fort_cg_macros_:   6331, 6335.
       10623    jump_assigned.e          fort_cg_macros_:   6329, 6344.
       10521    jump_computed            fort_cg_macros_:   6244,
                                         fort_operator_table:       36.
       10576    jump_computed.p          fort_cg_macros_:   6257, 6315.
       10544    jump_computed_d          fort_cg_macros_:   6263, 6274.
       10540    jump_computed_i          fort_cg_macros_:   6261, 6266.
       10542    jump_computed_r          fort_cg_macros_:   6262, 6264, 6270.
       13356    jump_false               fort_cg_macros_:   8571,
                                         fort_operator_table:      105.
       10323    jump_logical             fort_cg_macros_:   6029,
                                         fort_operator_table:       34.
       10362    jump_logical.p           fort_cg_macros_:   6032, 6088.
       10335    jump_logical_ind         fort_cg_macros_:   6038, 6051.
       10346    jump_logical_tmi         fort_cg_macros_:   6054, 6064.
       10352    jump_logical_tmoz        fort_cg_macros_:   6054, 6072.
       10356    jump_logical_tnc         fort_cg_macros_:   6054, 6080.
       10344    jump_logical_tnz         fort_cg_macros_:   6054, 6060.
       10350    jump_logical_tpl         fort_cg_macros_:   6054, 6068.
       10354    jump_logical_tpnz        fort_cg_macros_:   6054, 6076.
       10360    jump_logical_trc         fort_cg_macros_:   6054, 6084.
       10342    jump_logical_tze         fort_cg_macros_:   6054, 6056.
       13356    jump_true                fort_cg_macros_:   8570,
                                         fort_operator_table:      104.
       12000    j_g_s                    fort_equs:     92.
       11400    j_le_s                   fort_equs:     91.
        2000    label                    fort_equs:     59.
        4000    labeln                   fort_equs:     68.
       12730    label_operator           fort_cg_macros_:   8143,
                                         fort_operator_table:       75.
       13141    lc_no_desc               fort_cg_macros_:   8311, 8316.
       13255    left_shift               fort_cg_macros_:   8436,
                                         fort_operator_table:       83.
        6335    len                      fort_cg_macros_:   2100, 4568.
        6340    len.p                    fort_cg_macros_:   4569, 4575.
        6624    less                     fort_cg_macros_:   4814,
                                         fort_operator_table:       24.
        6741    less_cc                  fort_cg_macros_:   4818, 4923.
        6736    less_cd                  fort_cg_macros_:   4818, 4920.
        6761    less_ch                  fort_cg_macros_:   4928, 4945.
        6725    less_ci                  fort_cg_macros_:   4818, 4908.
        6731    less_cr                  fort_cg_macros_:   4818, 4914.
        6733    less_dc                  fort_cg_macros_:   4818, 4917.
        6675    less_dd                  fort_cg_macros_:   4818, 4868.
        6702    less_dd.1                fort_cg_macros_:   4869, 4876.
        6761    less_dh                  fort_cg_macros_:   4928, 4944.
        6662    less_di                  fort_cg_macros_:   4818, 4850.
        6714    less_dr                  fort_cg_macros_:   4818, 4893.
        6721    less_dr.1                fort_cg_macros_:   4894, 4901.
        6776    less_e1                  fort_cg_macros_:   4818, 4967.
        6744    less_e2                  fort_cg_macros_:   4818, 4926.
        7012    less_hc                  fort_cg_macros_:   4973, 4985.
        7012    less_hd                  fort_cg_macros_:   4973, 4984.
        6770    less_hh                  fort_cg_macros_:   4928, 4957, 4973.
        7006    less_hi                  fort_cg_macros_:   4973, 4975.
        7006    less_hr                  fort_cg_macros_:   4973, 4976.
        7006    less_ht                  fort_cg_macros_:   4973, 4977.
        6723    less_ic                  fort_cg_macros_:   4818, 4905.
        6656    less_id                  fort_cg_macros_:   4818, 4843.
        6752    less_ih                  fort_cg_macros_:   4928, 4930.
        6641    less_ii                  fort_cg_macros_:   4818, 4820.
        6645    less_ii.1                fort_cg_macros_:   4821, 4827.
        6647    less_ir                  fort_cg_macros_:   4818, 4831.
        7032    less_or_equal            fort_cg_macros_:   5007,
                                         fort_operator_table:       25.
        7147    less_or_equal_cc         fort_cg_macros_:   5012, 5117.
        7144    less_or_equal_cd         fort_cg_macros_:   5012, 5114.
        7167    less_or_equal_ch         fort_cg_macros_:   5122, 5139.
        7133    less_or_equal_ci         fort_cg_macros_:   5012, 5102.
        7137    less_or_equal_cr         fort_cg_macros_:   5012, 5108.
        7141    less_or_equal_dc         fort_cg_macros_:   5012, 5111.
        7103    less_or_equal_dd         fort_cg_macros_:   5012, 5062.
        7110    less_or_equal_dd.1       fort_cg_macros_:   5063, 5070.
        7167    less_or_equal_dh         fort_cg_macros_:   5122, 5138.
        7070    less_or_equal_di         fort_cg_macros_:   5012, 5044.
        7122    less_or_equal_dr         fort_cg_macros_:   5012, 5087.
        7127    less_or_equal_dr.1       fort_cg_macros_:   5088, 5095.
        7204    less_or_equal_e1         fort_cg_macros_:   5012, 5161.
        7152    less_or_equal_e2         fort_cg_macros_:   5012, 5120.
        7220    less_or_equal_hc         fort_cg_macros_:   5167, 5179.
        7220    less_or_equal_hd         fort_cg_macros_:   5167, 5178.
        7176    less_or_equal_hh         fort_cg_macros_:   5122, 5151, 5167.
        7214    less_or_equal_hi         fort_cg_macros_:   5167, 5169.
        7214    less_or_equal_hr         fort_cg_macros_:   5167, 5170.
        7214    less_or_equal_ht         fort_cg_macros_:   5167, 5171.
        7131    less_or_equal_ic         fort_cg_macros_:   5012, 5099.
        7064    less_or_equal_id         fort_cg_macros_:   5012, 5037.
        7160    less_or_equal_ih         fort_cg_macros_:   5122, 5124.
        7047    less_or_equal_ii         fort_cg_macros_:   5012, 5014.
        7053    less_or_equal_ii.1       fort_cg_macros_:   5015, 5021.
        7055    less_or_equal_ir         fort_cg_macros_:   5012, 5025.
        7135    less_or_equal_rc         fort_cg_macros_:   5012, 5105.
        7113    less_or_equal_rd         fort_cg_macros_:   5012, 5075.
        7117    less_or_equal_rd.1       fort_cg_macros_:   5076, 5082.
        7160    less_or_equal_rh         fort_cg_macros_:   5122, 5125.
        7061    less_or_equal_ri         fort_cg_macros_:   5012, 5032.
        7073    less_or_equal_rr         fort_cg_macros_:   5012, 5049.
        7100    less_or_equal_rr.1       fort_cg_macros_:   5050, 5057.
        7160    less_or_equal_th         fort_cg_macros_:   5122, 5126.
        7224    less_or_equal_tl         fort_cg_macros_:   5012, 5186.
        7232    less_or_equal_tl.1       fort_cg_macros_:   5188, 5190.
        7236    less_or_equal_tl.2       fort_cg_macros_:   5191, 5197.
        6727    less_rc                  fort_cg_macros_:   4818, 4911.
        6705    less_rd                  fort_cg_macros_:   4818, 4881.
        6711    less_rd.1                fort_cg_macros_:   4882, 4888.
        6752    less_rh                  fort_cg_macros_:   4928, 4931.
        6653    less_ri                  fort_cg_macros_:   4818, 4838.
        6665    less_rr                  fort_cg_macros_:   4818, 4855.
        6672    less_rr.1                fort_cg_macros_:   4856, 4863.
        6752    less_th                  fort_cg_macros_:   4928, 4932.
        7016    less_tl                  fort_cg_macros_:   4818, 4992.
        7024    less_tl.1                fort_cg_macros_:   4994, 4996.
        7030    less_tl.2                fort_cg_macros_:   4997, 5003.
        6341    lge                      fort_cg_macros_:   2100, 4578.
        6352    lge.p                    fort_cg_macros_:   4579, 4581, 4592.
        6353    lgt                      fort_cg_macros_:   2100, 4595.
        6364    lgt.p                    fort_cg_macros_:   4596, 4598, 4609.
       13353    lhs_fld                  fort_cg_macros_:   8552,
                                         fort_operator_table:      125.
        6365    lle                      fort_cg_macros_:   2100, 4612.
        6376    lle.p                    fort_cg_macros_:   4613, 4615, 4626.
        6377    llt                      fort_cg_macros_:   2100, 4629.
        6410    llt.p                    fort_cg_macros_:   4630, 4632, 4643.
       13356    load_preg                fort_cg_macros_:   8579,
                                         fort_operator_table:      115.
       13356    load_xreg                fort_cg_macros_:   8578,
                                         fort_operator_table:      114.
       13125    local_call               fort_cg_macros_:   8248, 8294.
       13135    local_join               fort_cg_macros_:   8308, 8330.
       20000    logical                  fort_cg_macros_:    381,  388, 4927, 5121, 5283, 5448, 5645, 5838, 5920, 5922, 5936,
                                                            5938, 5952, 5992, 5994, 6006, 6008, 6032, 6385, 6489, 7026, 7169,
                                                            7271, 7421, 7424, 7568, 7576,
                                         fort_equs:     56.
         630    logical.p                fort_cg_macros_:    388,  424.
        2400    logicaln                 fort_cg_macros_:   7640, 7901,
                                         fort_equs:     65.
       12533    logical_func             fort_cg_macros_:   7872, 7900.
        6610    logical_op1              fort_cg_macros_:   4794, 4927, 4973, 5121, 5167, 5337, 5502, 5645, 5691, 5838, 5884.
        6612    logical_op2              fort_cg_macros_:   4797, 4928, 5122, 5292, 5457, 5646, 5839.
        1312    log_                     fort_cg_macros_:   2277,
                                         fort_equs:    208.
       13356    loop_end                 fort_cg_macros_:   8573,
                                         fort_operator_table:      107.
       12542    main                     fort_cg_macros_:   7915,
                                         fort_operator_table:       71.
       13065    make_call                fort_cg_macros_:   7908, 8165, 8233.
       12573    make_entry               fort_cg_macros_:   7920, 7931, 7943, 7955.
       12602    make_et_desc             fort_cg_macros_:   7963, 7967.
       12635    make_et_descp            fort_cg_macros_:   8004, 8010.
       12614    make_et_init_auto        fort_cg_macros_:   7981, 7984.
       12603    make_et_join             fort_cg_macros_:   7965, 7970.
       12620    make_et_no_cleanup       fort_cg_macros_:   7987, 7992.
       12640    make_et_ret              fort_cg_macros_:   8014, 8018.
       13054    make_external_variable   fort_cg_macros_:   8190, 8217.
       12666    make_quick_entry         fort_cg_macros_:   7932, 7944, 8062.
       11335    margin                   fort_cg_macros_:   6885,
                                         fort_operator_table:       50.
       11354    margin1.p                fort_cg_macros_:   6889, 6903.
       11357    margin2.p                fort_cg_macros_:   6887, 6907.
          34    margin_slot              fort_cg_macros_:   6895,
                                         fort_equs:    159.
        4157    max                      fort_cg_macros_:   2100, 2744.
        4411    max0                     fort_cg_macros_:   2100, 2997.
        4420    max0.loop                fort_cg_macros_:   3007, 3019.
        4433    max0.p                   fort_cg_macros_:   3000, 3002, 3018, 3024.
        4432    max0.r                   fort_cg_macros_:   3013, 3021.
        4434    max1                     fort_cg_macros_:   2100, 3027.
        4445    max1.loop                fort_cg_macros_:   3039, 3051.
        4461    max1.p                   fort_cg_macros_:   3030, 3032, 3050, 3057.
        4457    max1.r                   fort_cg_macros_:   3045, 3053.
        4223    max_cc                   fort_cg_macros_:   2746, 2802.
        4222    max_cd                   fort_cg_macros_:   2746, 2799.
        4216    max_ci                   fort_cg_macros_:   2746, 2787.
        4220    max_cr                   fort_cg_macros_:   2746, 2793.
        4221    max_dc                   fort_cg_macros_:   2746, 2796.
        4205    max_dd                   fort_cg_macros_:   2746, 2770.
        4202    max_di                   fort_cg_macros_:   2746, 2763.
        4213    max_dr                   fort_cg_macros_:   2746, 2780.
        4224    max_e1                   fort_cg_macros_:   2746, 2805.
        4225    max_e2                   fort_cg_macros_:   2746, 2808.
        4215    max_ic                   fort_cg_macros_:   2746, 2784.
        4200    max_id                   fort_cg_macros_:   2746, 2759.
        4173    max_ii                   fort_cg_macros_:   2746, 2748.
        4174    max_ir                   fort_cg_macros_:   2746, 2751.
        4217    max_rc                   fort_cg_macros_:   2746, 2790.
        4206    max_rd                   fort_cg_macros_:   2746, 2773, 2782.
        4176    max_ri                   fort_cg_macros_:   2746, 2755.
        4204    max_rr                   fort_cg_macros_:   2746, 2767.
        4506    min                      fort_cg_macros_:   2100, 3091.
        4741    min0                     fort_cg_macros_:   2100, 3345.
        4750    min0.loop                fort_cg_macros_:   3355, 3367.
        4763    min0.p                   fort_cg_macros_:   3348, 3350, 3366, 3372.
        4762    min0.r                   fort_cg_macros_:   3361, 3369.
        4764    min1                     fort_cg_macros_:   2100, 3375.
        4775    min1.loop                fort_cg_macros_:   3387, 3399.
        5011    min1.p                   fort_cg_macros_:   3378, 3380, 3398, 3405.
        5007    min1.r                   fort_cg_macros_:   3393, 3401.
        4552    min_cc                   fort_cg_macros_:   3093, 3149.
        4551    min_cd                   fort_cg_macros_:   3093, 3146.
        4545    min_ci                   fort_cg_macros_:   3093, 3134.
        4547    min_cr                   fort_cg_macros_:   3093, 3140.
        4550    min_dc                   fort_cg_macros_:   3093, 3143.
        4534    min_dd                   fort_cg_macros_:   3093, 3117.
        4531    min_di                   fort_cg_macros_:   3093, 3110.
        4542    min_dr                   fort_cg_macros_:   3093, 3127.
        4553    min_e1                   fort_cg_macros_:   3093, 3152.
        4554    min_e2                   fort_cg_macros_:   3093, 3155.
        4544    min_ic                   fort_cg_macros_:   3093, 3131.
        4527    min_id                   fort_cg_macros_:   3093, 3106.
        4522    min_ii                   fort_cg_macros_:   3093, 3095.
        4523    min_ir                   fort_cg_macros_:   3093, 3098.
        4546    min_rc                   fort_cg_macros_:   3093, 3137.
        4535    min_rd                   fort_cg_macros_:   3093, 3120, 3129.
        4525    min_ri                   fort_cg_macros_:   3093, 3102.
        4533    min_rr                   fort_cg_macros_:   3093, 3114.
        6602    mm_dt1.p                 fort_cg_macros_:   2785, 2791, 2797, 2803, 2809, 2822, 2859, 2900, 2965, 2995, 3025,
                                                            3058, 3089, 3132, 3138, 3144, 3150, 3156, 3169, 3206, 3247, 3312,
                                                            3343, 3373, 3406, 3437, 4205, 4276, 4787.
        6605    mm_dt2.p                 fort_cg_macros_:   2788, 2794, 2800, 2806, 3135, 3141, 3147, 3153, 4273, 4790.
        3372    mm_ret_deaq              fort_cg_macros_:   2172, 2933, 3086, 3280, 3434.
        3366    mm_ret_eaq               fort_cg_macros_:   2166, 2887, 2962, 2992, 3234, 3309, 3340.
        3362    mm_ret_q                 fort_cg_macros_:   2160, 2846, 3022, 3055, 3193, 3370, 3403.
        3376    mm_ret_tq                fort_cg_macros_:   2178, 4673, 4752, 4769.
        5036    mod                      fort_cg_macros_:   2100, 3439.
        5077    mod.1                    fort_cg_macros_:   3443, 3500.
        5074    mod_cc                   fort_cg_macros_:   3440, 3491.
        5073    mod_cd                   fort_cg_macros_:   3440, 3488.
        5067    mod_ci                   fort_cg_macros_:   3440, 3476.
        5071    mod_cr                   fort_cg_macros_:   3440, 3482.
        5072    mod_dc                   fort_cg_macros_:   3440, 3485.
        5063    mod_dd                   fort_cg_macros_:   3440, 3464.
        5060    mod_di                   fort_cg_macros_:   3440, 3457.
        5065    mod_dr                   fort_cg_macros_:   3440, 3470.
        5075    mod_e1                   fort_cg_macros_:   3440, 3494.
        5076    mod_e2                   fort_cg_macros_:   3440, 3497.
        5066    mod_ic                   fort_cg_macros_:   3440, 3473.
        5056    mod_id                   fort_cg_macros_:   3440, 3453.
        5051    mod_ii                   fort_cg_macros_:   3440, 3442.
        5052    mod_ir                   fort_cg_macros_:   3440, 3445.
        5070    mod_rc                   fort_cg_macros_:   3440, 3479.
        5064    mod_rd                   fort_cg_macros_:   3440, 3467.
        5054    mod_ri                   fort_cg_macros_:   3440, 3449.
        5062    mod_rr                   fort_cg_macros_:   3440, 3461.
         445    move_eis                 fort_cg_macros_:    194,  248.
        1467    mpy_overflow_check       fort_cg_macros_:    237,  983, 1141,
                                         fort_equs:    264.
       12674    mqe_end_storage          fort_cg_macros_:   8071, 8076.
       12704    mqe_no_desc              fort_cg_macros_:   8084, 8088.
       12673    mqe_no_storage           fort_cg_macros_:   8069, 8073.
        1431    mult                     fort_cg_macros_:    973,
                                         fort_operator_table:       20.
        1575    mult_cc                  fort_cg_macros_:    975, 1123.
        1550    mult_cd                  fort_cg_macros_:    975, 1093.
        1563    mult_cd.1                fort_cg_macros_:   1096, 1108.
        1565    mult_cd.11               fort_cg_macros_:   1111, 1121.
        1572    mult_cd.2                fort_cg_macros_:   1097, 1118.
        1501    mult_ci                  fort_cg_macros_:    975, 1031.
        1522    mult_cr                  fort_cg_macros_:    975, 1060.
        1535    mult_cr.1                fort_cg_macros_:   1048, 1055, 1063, 1075.
        1537    mult_cr.11               fort_cg_macros_:   1078, 1088.
        1544    mult_cr.2                fort_cg_macros_:   1064, 1085.
        1547    mult_dc                  fort_cg_macros_:    975, 1090.
        1466    mult_dd                  fort_cg_macros_:    975, 1009.
        1460    mult_di                  fort_cg_macros_:    975,  999.
        1472    mult_dr                  fort_cg_macros_:    975, 1017.
        1476    mult_dr.1                fort_cg_macros_:   1018, 1024.
        1616    mult_e1                  fort_cg_macros_:    975, 1134, 1146.
        1620    mult_e2                  fort_cg_macros_:    975, 1149.
        1500    mult_ic                  fort_cg_macros_:    975, 1028.
        1457    mult_id                  fort_cg_macros_:    975,  996.
        1445    mult_ii                  fort_cg_macros_:    975,  977.
        1452    mult_ii.1                fort_cg_macros_:    982,  985.
        1453    mult_ir                  fort_cg_macros_:    975,  988.
        1521    mult_rc                  fort_cg_macros_:    975, 1057.
        1471    mult_rd                  fort_cg_macros_:    975, 1014.
        1454    mult_ri                  fort_cg_macros_:    975,  991.
        1463    mult_rr                  fort_cg_macros_:    975, 1004.
        1603    mult_tl                  fort_cg_macros_:    975, 1132.
        1611    mult_tl.1                fort_cg_macros_:   1134, 1136.
        1615    mult_tl.2                fort_cg_macros_:   1140, 1143.
       13320    namelist                 fort_cg_macros_:   8508,
                                         fort_operator_table:       90.
          22    namelist_slot            fort_cg_macros_:   8512,
                                         fort_equs:    165.
        1465    nearest_integer          fort_cg_macros_:   4083, 4089,
                                         fort_equs:    262.
        1464    nearest_whole_number     fort_cg_macros_:   4055, 4060,
                                         fort_equs:    261.
        2357    negate                   fort_cg_macros_:   1664,
                                         fort_operator_table:       23.
        2401    negate_c                 fort_cg_macros_:   1669, 1690.
        2415    negate_c.1               fort_cg_macros_:   1694, 1706.
        2375    negate_d                 fort_cg_macros_:   1668, 1684.
        2366    negate_i                 fort_cg_macros_:   1666, 1673.
        2371    negate_r                 fort_cg_macros_:   1667, 1678.
       13305    neg_storage_add          fort_cg_macros_:   8488,
                                         fort_operator_table:       88.
       13357    new                      fort_cg_macros_:    156.
        5643    nint                     fort_cg_macros_:   2100, 4073.
        5656    nint.dp                  fort_cg_macros_:   4074, 4086, 4095.
        5650    nint.int                 fort_cg_macros_:   4074, 4076.
        5664    nint.p                   fort_cg_macros_:   4074, 4098.
        5652    nint.real                fort_cg_macros_:   4074, 4080.
       13237    non_executable           fort_cg_macros_:   8408,
                                         fort_operator_table:       79.
       10250    not                      fort_cg_macros_:   5950,
                                         fort_operator_table:       32.
       10273    not.e                    fort_cg_macros_:   5952, 5987.
        7423    not_equal                fort_cg_macros_:   5366,
                                         fort_operator_table:       27.
        7524    not_equal_ah             fort_cg_macros_:   5445, 5456.
        7511    not_equal_cc             fort_cg_macros_:   5371, 5439.
        7506    not_equal_cd             fort_cg_macros_:   5371, 5436.
        7540    not_equal_ch             fort_cg_macros_:   5457, 5474.
        7475    not_equal_ci             fort_cg_macros_:   5371, 5424.
        7501    not_equal_cr             fort_cg_macros_:   5371, 5430.
        7503    not_equal_dc             fort_cg_macros_:   5371, 5433.
        7457    not_equal_dd             fort_cg_macros_:   5371, 5400.
        7540    not_equal_dh             fort_cg_macros_:   5457, 5473.
        7450    not_equal_di             fort_cg_macros_:   5371, 5389.
        7464    not_equal_dr             fort_cg_macros_:   5371, 5409.
        7471    not_equal_dr.1           fort_cg_macros_:   5410, 5417.
        7555    not_equal_e1             fort_cg_macros_:   5371, 5496.
        7514    not_equal_e2             fort_cg_macros_:   5371, 5444.
        7571    not_equal_hc             fort_cg_macros_:   5502, 5514.
        7571    not_equal_hd             fort_cg_macros_:   5502, 5513.
        7547    not_equal_hh             fort_cg_macros_:   5457, 5486, 5502.
        7565    not_equal_hi             fort_cg_macros_:   5502, 5504.
        7565    not_equal_hr             fort_cg_macros_:   5502, 5505.
        7565    not_equal_ht             fort_cg_macros_:   5502, 5506.
        7473    not_equal_ic             fort_cg_macros_:   5371, 5421.
        7447    not_equal_id             fort_cg_macros_:   5371, 5386.
        7531    not_equal_ih             fort_cg_macros_:   5457, 5459.
        7440    not_equal_ii             fort_cg_macros_:   5371, 5373.
        7443    not_equal_ir             fort_cg_macros_:   5371, 5378.
        7521    not_equal_ll             fort_cg_macros_:   5448, 5451.
        7477    not_equal_rc             fort_cg_macros_:   5371, 5427.
        7463    not_equal_rd             fort_cg_macros_:   5371, 5406.
        7531    not_equal_rh             fort_cg_macros_:   5457, 5460.
        7444    not_equal_ri             fort_cg_macros_:   5371, 5381.
        7453    not_equal_rr             fort_cg_macros_:   5371, 5394.
        7531    not_equal_th             fort_cg_macros_:   5457, 5461.
        7575    not_equal_tl             fort_cg_macros_:   5371, 5522.
        7603    not_equal_tl.1           fort_cg_macros_:   5524, 5526.
       10305    not_equiv                fort_cg_macros_:   6003,
                                         fort_operator_table:      120.
       10315    not_equiv.p              fort_cg_macros_:   6006, 6008, 6018.
       13052    not_external_bif         fort_cg_macros_:   8204, 8214.
       10256    not_ind                  fort_cg_macros_:   5954, 5960.
        6616    not_scalar               fort_cg_macros_:   4803, 4936, 4949, 4968, 5130, 5143, 5162, 5300, 5313, 5332, 5465,
                                                            5478, 5497, 5654, 5667, 5686, 5847, 5860, 5879.
       10265    not_tmi                  fort_cg_macros_:   5961, 5969.
       10267    not_tmoz                 fort_cg_macros_:   5961, 5975.
       10271    not_tnc                  fort_cg_macros_:   5961, 5981.
       10264    not_tnz                  fort_cg_macros_:   5961, 5966.
       10266    not_tpl                  fort_cg_macros_:   5961, 5972.
       10270    not_tpnz                 fort_cg_macros_:   5961, 5978.
       10272    not_trc                  fort_cg_macros_:   5961, 5984.
       10263    not_tze                  fort_cg_macros_:   5961, 5963.
       13241    no_op                    fort_cg_macros_:   8414,
                                         fort_operator_table:       80.
           6    null                     fort_cg_macros_:   7993,
                                         fort_equs:    148.
           5    null_ptr                 fort_cg_macros_:   8223,
                                         fort_equs:    147.
           1    one                      fort_cg_macros_:   1839,
                                         fort_equs:    143.
      740000    op1                      fort_cg_macros_:    383,  402,  403,  410,  411,  425,  429,  523,  526,  527,  533,
                                                             535,  536,  552,  555,  556,  562,  564,  565,  582,  585,  586,
                                                             592,  595,  596,  802,  805,  806,  812,  816,  817,  833,  836,
                                                             837,  846,  848,  849,  865,  868,  869,  875,  879,  880,  896,
                                                             899,  900,  909,  911,  912,  930,  933,  934,  942,  945,  946,
                                                            1047, 1069, 1072, 1073, 1079, 1082, 1083, 1102, 1105, 1106, 1112,
                                                            1115, 1116, 1252, 1283, 1286, 1287, 1297, 1300, 1301, 1319, 1322,
                                                            1323, 1333, 1336, 1337, 1366, 1373, 1380, 1388, 1396, 1403, 1410,
                                                            1418, 1439, 1451, 1481, 1511, 1524, 1537, 1554, 1562, 1572, 1574,
                                                            1575, 1587, 1598, 1600, 1608, 1618, 1630, 1636, 1639, 1648, 1671,
                                                            1675, 1679, 1685, 1699, 1703, 1704, 1709, 1713, 1714, 1747, 1749,
                                                            1751, 1805, 1806, 1808, 1878, 1880, 1882, 1930, 1932, 1934, 2024,
                                                            2034, 2041, 2048, 2056, 2086, 2117, 2158, 2162, 2164, 2168, 2170,
                                                            2174, 2176, 2180, 2181, 2197, 2243, 2275, 2287, 2299, 2328, 2340,
                                                            2368, 2380, 2425, 2432, 2434, 2468, 2485, 2513, 2525, 2537, 2568,
                                                            2570, 2705, 2718, 2731, 2775, 2833, 2835, 2836, 2863, 2867, 2874,
                                                            2876, 2877, 2904, 2908, 2912, 2914, 2918, 2920, 2923, 2947, 2949,
                                                            2950, 2978, 2980, 2981, 3008, 3010, 3011, 3040, 3042, 3043, 3072,
                                                            3074, 3075, 3122, 3180, 3182, 3183, 3210, 3214, 3221, 3223, 3224,
                                                            3251, 3255, 3259, 3261, 3265, 3267, 3270, 3294, 3296, 3297, 3326,
                                                            3328, 3329, 3356, 3358, 3359, 3388, 3390, 3391, 3420, 3422, 3423,
                                                            3655, 3657, 3675, 3677, 3695, 3697, 3715, 3717, 3735, 3737, 3755,
                                                            3757, 3780, 3792, 3803, 3829, 3841, 3852, 3875, 3885, 3914, 3924,
                                                            3953, 3963, 4199, 4201, 4202, 4216, 4220, 4221, 4227, 4231, 4232,
                                                            4238, 4240, 4241, 4244, 4246, 4247, 4255, 4259, 4260, 4265, 4269,
                                                            4270, 4295, 4299, 4302, 4307, 4309, 4312, 4332, 4344, 4371, 4383,
                                                            4410, 4422, 4446, 4471, 4473, 4500, 4501, 4510, 4571, 4587, 4605,
                                                            4622, 4638, 4664, 4665, 4743, 4744, 4760, 4761, 4772, 4788, 4795,
                                                            4804, 4807, 5284, 5449, 5954, 5956, 5988, 6019, 6048, 6057, 6061,
                                                            6065, 6069, 6073, 6077, 6081, 6085, 6089, 6095, 6099, 6213, 6222,
                                                            6230, 6238, 6242, 6267, 6279, 6291, 6292, 6296, 6320, 6333, 6345,
                                                            6354, 6378, 6449, 6482, 6542, 6570, 6589, 6607, 6621, 6631, 6642,
                                                            6653, 6678, 6697, 6701, 6710, 6719, 6728, 6737, 6747, 6754, 6770,
                                                            6774, 6783, 6792, 6801, 6810, 6820, 6847, 6864, 6882, 6895, 6904,
                                                            6908, 6926, 6928, 6930, 6940, 6944, 6948, 6967, 6979, 6993, 7006,
                                                            7008, 7016, 7017, 7028, 7029, 7043, 7047, 7051, 7057, 7066, 7082,
                                                            7092, 7102, 7122, 7124, 7141, 7143, 7156, 7158, 7173, 7175, 7189,
                                                            7198, 7202, 7206, 7212, 7245, 7251, 7261, 7278, 7287, 7302, 7304,
                                                            7313, 7314, 7339, 7355, 7360, 7365, 7370, 7375, 7378, 7379, 7384,
                                                            7426, 7477, 7502, 7507, 7512, 7517, 7534, 7539, 7546, 7551, 7559,
                                                            7571, 7580, 7592, 7607, 7617, 7619, 7623, 7625, 7629, 7631, 7635,
                                                            7637, 7641, 7643, 7693, 7701, 7704, 7715, 7723, 7726, 7736, 7758,
                                                            7760, 7769, 7771, 7783, 7791, 7820, 7823, 7836, 7850, 7852, 7861,
                                                            7863, 7906, 7972, 7973, 7974, 7998, 8028, 8033, 8047, 8049, 8056,
                                                            8080, 8081, 8085, 8090, 8188, 8202, 8204, 8209, 8226, 8228, 8231,
                                                            8237, 8240, 8243, 8246, 8260, 8306, 8309, 8353, 8360, 8365, 8368,
                                                            8370, 8377, 8392, 8397, 8512, 8531, 8539, 8543, 8547,
                                         fort_equs:     40.
      700000    op2                      fort_cg_macros_:    404,  412, 1434, 1694, 1696, 1700, 1710, 1750, 1881, 1933, 2202,
                                                            2774, 2777, 2781, 2814, 2851, 2864, 2892, 2905, 2937, 2939, 2944,
                                                            2969, 2971, 2975, 2999, 3001, 3005, 3029, 3031, 3037, 3062, 3064,
                                                            3069, 3121, 3124, 3128, 3161, 3198, 3211, 3239, 3252, 3284, 3286,
                                                            3291, 3316, 3318, 3323, 3347, 3349, 3353, 3377, 3379, 3385, 3410,
                                                            3412, 3417, 3646, 3652, 3656, 3658, 3664, 3672, 3676, 3686, 3692,
                                                            3696, 3698, 3704, 3712, 3716, 3726, 3732, 3736, 3738, 3744, 3752,
                                                            3756, 4441, 4466, 4470, 4480, 4496, 4499, 4505, 4518, 4533, 4553,
                                                            4580, 4588, 4597, 4604, 4614, 4621, 4631, 4639, 4652, 4661, 4740,
                                                            4757, 4776, 4791, 4798, 4801, 4810, 4994, 5188, 5358, 5524, 5712,
                                                            5905, 6929, 7003, 7007, 7009, 7013, 7024, 7033, 7035, 7117, 7123,
                                                            7126, 7136, 7151, 7168, 7351, 7390, 7395, 7399, 7401, 7404, 7409,
                                                            7413, 7417, 7423, 7463, 7466, 7478, 7483, 7488, 7493, 7498, 7503,
                                                            7508, 7513, 7518, 7523, 7528, 7530, 7535, 7540, 7542, 7547, 7552,
                                                            7554, 7560, 7564, 7575, 7578, 7581, 7585, 7591, 7754, 7759, 7765,
                                                            7770, 7846, 7851, 7857, 7862, 7910, 7996, 8003, 8027, 8036, 8084,
                                                            8089, 8227, 8378,
                                         fort_equs:     41.
      640000    op3                      fort_cg_macros_:   4509, 4534, 4554, 8057,
                                         fort_equs:     42.
      600000    op4                      fort_cg_macros_:   4517,
                                         fort_equs:     43.
      540000    op5                      fort_equs:     44.
      500000    op6                      fort_equs:     45.
      440000    op7                      fort_equs:     46.
       11424    open                     fort_cg_macros_:   6951,
                                         fort_operator_table:       91.
       11525    open.p                   fort_cg_macros_:   7056, 7065.
       11454    opencase1                fort_cg_macros_:   6993, 6995.
       11470    opencase10               fort_cg_macros_:   6993, 7021.
       11470    opencase11               fort_cg_macros_:   6993, 7022.
       11470    opencase12               fort_cg_macros_:   6993, 7023.
       11454    opencase13               fort_cg_macros_:   6993, 7002.
       11475    opencase14               fort_cg_macros_:   6993, 7032.
       11454    opencase2                fort_cg_macros_:   6993, 6996.
       11454    opencase3                fort_cg_macros_:   6993, 6997.
       11454    opencase4                fort_cg_macros_:   6993, 6998.
       11454    opencase5                fort_cg_macros_:   6993, 6999.
       11454    opencase6                fort_cg_macros_:   6993, 7000.
       11454    opencase7                fort_cg_macros_:   6993, 7001.
       11463    opencase8                fort_cg_macros_:   6993, 7012.
       11470    opencase9                fort_cg_macros_:   6993, 7020.
       11362    openfile                 fort_cg_macros_:   6911,
                                         fort_operator_table:       51.
       11413    openfile1.p              fort_cg_macros_:   6914, 6939.
       11416    openfile2.p              fort_cg_macros_:   6917, 6918, 6943.
       11421    openfile3.p              fort_cg_macros_:   6920, 6921, 6947.
       11435    open_loop                fort_cg_macros_:   6976, 7010, 7018, 7030.
       11441    open_loop.2              fort_cg_macros_:   6984, 7036.
       11501    open_loop.e              fort_cg_macros_:   6985, 7038.
       11503    open_loop1.p             fort_cg_macros_:   7004, 7042.
       11506    open_loop2.p             fort_cg_macros_:   7014, 7046.
       11511    open_loop3.p             fort_cg_macros_:   7026, 7050.
       11514    open_return              fort_cg_macros_:   6985, 7054.
           0    operator_table           fort_cg_macros_:    178,
                                         fort_operator_table:       16.
       40000    opf                      fort_equs:     29,   30,   31,   32,   33,   34,   35,   36,   38,   40,   41,   42,
                                                        43,   44,   45,   46.
       13252    opt_subscript            fort_cg_macros_:   8430,
                                         fort_operator_table:       82.
           0    opv                      fort_cg_macros_:   2841, 2882, 2928, 2955, 2986, 3016, 3048, 3080, 3188, 3229, 3275,
                                                            3302, 3334, 3364, 3396, 3428, 4668, 4747, 4764, 6300,
                                         fort_equs:     38.
         551    op_base                  fort_equs:    175,  177,  178,  180,  181,  182,  183,  184,  185,  186,  187,  188,
                                                       189,  190,  191,  192,  193,  194,  195,  196,  197,  198,  199,  200,
                                                       201,  202,  203,  204,  205,  206,  207,  208,  209,  210,  211,  212,
                                                       213,  214,  215,  216,  217,  218,  219,  220,  221,  222,  223,  224,
                                                       225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,
                                                       237,  238,  239,  240,  241,  242,  243,  244,  245,  246,  247,  248,
                                                       249,  250,  251,  252,  253,  254,  255,  256,  257,  258,  259,  260,
                                                       261,  262,  263,  264,  265,  266,  267,  268,  269,  279,  281.
       10222    or                       fort_cg_macros_:   5918,
                                         fort_operator_table:       30.
        6534    or.tl                    fort_cg_macros_:   2100, 4737.
        6537    or.tl.loop               fort_cg_macros_:   4742, 4749.
        6546    or.tl.r                  fort_cg_macros_:   4745, 4751.
       10231    or_e1                    fort_cg_macros_:   5922, 5928.
       10233    or_e2                    fort_cg_macros_:   5920, 5931.
         400    P0.5H                    fort_equs:    286.
        2040    P1.0H                    fort_equs:    287.
        2100    P2.0H                    fort_equs:    288.
       12336    pause                    fort_cg_macros_:   7697,
                                         fort_operator_table:       58.
       12345    pause.1                  fort_cg_macros_:   7708, 7717.
       12653    pfn_ret                  fort_cg_macros_:   8022, 8038.
       12627    pop_ps                   fort_cg_macros_:   7996, 8003.
         400    pr1                      fort_cg_macros_:   2244, 2276, 2288, 2300, 2329, 2341, 2369, 2381, 2514, 2526, 2538,
                                                            2706, 2719, 2732, 3781, 3793, 3804, 3830, 3842, 3853, 3876, 3886,
                                                            3915, 3925, 3954, 3964, 4333, 4345, 4372, 4384, 4411, 4423, 6563,
                                                            6582, 6684, 6756, 6827, 6840, 6857, 6875, 6897, 6933, 6961, 7059,
                                                            7078, 7214, 7228, 7329, 7706, 7716, 7727, 7737, 8383,
                                         fort_equs:    117,  123.
           2    pr1n                     fort_cg_macros_:   1450, 1480, 1510, 1523, 1536, 1553, 1639, 1651, 2426, 2469, 2486,
                                                            8309,
                                         fort_equs:    127.
         200    pr2                      fort_cg_macros_:   6563, 6582, 6604, 6840, 6857, 6875, 6897, 6961, 7059, 7078, 7214,
                                                            7228, 7329, 7716, 7737, 8206, 8383,
                                         fort_equs:    118,  123.
           3    pr2n                     fort_cg_macros_:   1125, 1266, 1341, 1451, 1481, 1511, 1524, 1537, 1554, 1562, 1587,
                                                            1618, 1630, 1648, 2243, 2275, 2287, 2299, 2328, 2340, 2368, 2380,
                                                            2425, 2468, 2485, 2513, 2525, 2537, 2705, 2718, 2731, 3516, 3531,
                                                            3554, 3616, 3629, 3637, 3780, 3792, 3803, 3829, 3841, 3852, 3875,
                                                            3885, 3914, 3924, 3953, 3963, 4332, 4344, 4371, 4383, 4410, 4422,
                                                            4509, 4517, 6362, 6619, 6651, 6695, 6765, 6925, 6927, 7007, 7123,
                                                            7141, 7173, 7244, 7276, 7298, 7703, 7725, 7998, 8027, 8220, 8264,
                                                            8370, 8511,
                                         fort_equs:    128.
         100    pr3                      fort_cg_macros_:   1452, 1482, 1512, 1525, 1538, 1555, 1640, 1652, 2244, 2276, 2288,
                                                            2300, 2329, 2341, 2369, 2381, 2470, 2488, 2514, 2526, 2538, 2706,
                                                            2719, 2732, 3781, 3793, 3804, 3830, 3842, 3853, 3876, 3886, 3915,
                                                            3925, 3954, 3964, 4333, 4345, 4372, 4384, 4411, 4423, 6563, 6582,
                                                            6684, 6756, 6827, 6840, 6857, 6875, 6897, 6933, 6961, 7059, 7078,
                                                            7214, 7228, 7329, 7706, 7716, 7727, 7737, 8383,
                                         fort_equs:    119,  123.
           4    pr3n                     fort_cg_macros_:   6977, 7091,
                                         fort_equs:    129.
        1000    pr4                      fort_cg_macros_:   1452, 1482, 1512, 1525, 1538, 1555, 1640, 1652, 2244, 2276, 2288,
                                                            2300, 2329, 2341, 2369, 2381, 2470, 2488, 2514, 2526, 2538, 2706,
                                                            2719, 2732, 3781, 3793, 3804, 3830, 3842, 3853, 3876, 3886, 3915,
                                                            3925, 3954, 3964, 4333, 4345, 4372, 4384, 4411, 4423, 6563, 6582,
                                                            6684, 6756, 6827, 6840, 6857, 6875, 6897, 6933, 6961, 7059, 7078,
                                                            7214, 7228, 7329, 7606, 7706, 7716, 7727, 7737, 8206, 8319, 8383,
                                         fort_equs:    116,  123.
           1    pr4n                     fort_equs:    126.
          40    pr5                      fort_cg_macros_:   1452, 1482, 1512, 1525, 1538, 1555, 1640, 1652, 2244, 2276, 2288,
                                                            2300, 2329, 2341, 2369, 2381, 2470, 2488, 2514, 2526, 2538, 2706,
                                                            2719, 2732, 3781, 3793, 3804, 3830, 3842, 3853, 3876, 3886, 3915,
                                                            3925, 3954, 3964, 4333, 4345, 4372, 4384, 4411, 4423, 6563, 6582,
                                                            6684, 6756, 6827, 6840, 6857, 6875, 6897, 6933, 6961, 7059, 7078,
                                                            7214, 7228, 7329, 7706, 7716, 7727, 7737, 8383,
                                         fort_equs:    120,  123.
           5    pr5n                     fort_cg_macros_:   6629, 6640,
                                         fort_equs:    130.
          20    pr7                      fort_cg_macros_:   1452, 1482, 1512, 1525, 1538, 1555, 1640, 1652, 2244, 2276, 2288,
                                                            2300, 2329, 2341, 2369, 2381, 2470, 2488, 2514, 2526, 2538, 2706,
                                                            2719, 2732, 3781, 3793, 3804, 3830, 3842, 3853, 3876, 3886, 3915,
                                                            3925, 3954, 3964, 4333, 4345, 4372, 4384, 4411, 4423, 6563, 6582,
                                                            6684, 6756, 6827, 6840, 6857, 6875, 6897, 6933, 6961, 7059, 7078,
                                                            7214, 7228, 7329, 7706, 7716, 7727, 7737, 8383,
                                         fort_equs:    121,  123.
           6    pr7n                     fort_equs:    131.
       12641    prepare_for_namelists    fort_cg_macros_:   7921, 7933, 7945, 8021.
       12707    process_param_list       fort_cg_macros_:   8094,
                                         fort_operator_table:      124.
       12427    process_subscript        fort_cg_macros_:   7748, 7761, 7772, 7776, 7778.
           1    protect_indicators       fort_cg_macros_:   6034, 6388, 6491,
                                         fort_equs:    134.
           2    ps                       fort_cg_macros_:   6606, 6620, 6630, 6641, 6893, 6924, 7243, 7260, 7277, 7286, 7296,
                                                            7994, 8025, 8510,
                                         fort_equs:    144.
          12    ps_area_ptr              fort_cg_macros_:   6968, 7083,
                                         fort_equs:    152.
          52    ps_ptr                   fort_cg_macros_:   7999,
                                         fort_equs:    155.
        1171    push_offset              stack_header:        81.
         400    q                        fort_cg_macros_:    210,  269,  275,  299,  300,  305,  315,  345,  461,  463,  625,
                                                             627,  637,  671,  761,  979,  986, 1041, 1158, 1160, 1224, 1246,
                                                            1366, 1388, 1396, 1418, 1449, 1455, 1465, 1495, 1569, 1595, 1676,
                                                            1747, 1749, 1756, 1757, 1771, 1784, 1805, 1808, 1815, 1816, 1833,
                                                            1843, 1864, 1899, 1951, 1995, 2007, 2031, 2123, 2162, 2215, 2562,
                                                            2812, 2942, 3004, 3159, 3289, 3352, 3501, 3555, 3652, 3672, 3692,
                                                            3712, 3732, 3752, 3984, 4000, 4077, 4212, 4441, 4510, 4518, 4696,
                                                            4708, 4720, 4732, 4821, 4823, 5015, 5017, 5209, 5374, 5539, 5541,
                                                            5732, 5734, 6126, 6128, 6131, 6267, 6282, 6561, 6580, 6766, 6838,
                                                            6855, 6873, 6892, 6932, 7008, 7016, 7057, 7124, 7156, 7212, 7226,
                                                            7259, 7285, 7302, 7314, 7351, 7477, 7617, 7758, 7769, 7850, 7861,
                                                            8421, 8426, 8439, 8442, 8449, 8452, 8467, 8479,
                                         fort_equs:     73.
         442    qls1                     fort_cg_macros_:    231,  241.
       12333    quick_return             fort_cg_macros_:   7684, 7690.
        4066    rddim.1                  fort_cg_macros_:   2596, 2660.
        5130    rdmod.1                  fort_cg_macros_:   3468, 3536.
        5222    rdsign.1                 fort_cg_macros_:   3583, 3636.
       11005    read                     fort_cg_macros_:   6554,
                                         fort_operator_table:       39.
       11020    read.p                   fort_cg_macros_:   6558, 6569.
       13356    read_array               fort_cg_macros_:   8565,
                                         fort_operator_table:       99.
       11716    read_internal_file       fort_cg_macros_:   7290,
                                         fort_operator_table:      121.
       13356    read_namelist            fort_cg_macros_:   8574,
                                         fort_operator_table:      108.
       13356    read_scalar              fort_cg_macros_:   8564,
                                         fort_operator_table:       98.
       13356    read_vector              fort_cg_macros_:   8566,
                                         fort_operator_table:      100.
      200000    real                     fort_cg_macros_:   1667, 1739, 2082, 2090, 2094, 2112, 2208, 2261, 2314, 2354, 2499,
                                                            2691, 2819, 2855, 2898, 2970, 2972, 2988, 3030, 3032, 3050, 3166,
                                                            3202, 3245, 3317, 3319, 3336, 3378, 3380, 3398, 3510, 3512, 3767,
                                                            3816, 4005, 4319, 4358, 4397, 4648, 4650, 6107, 6112, 6257, 6262,
                                                            7750, 7832,
                                         fort_equs:     53.
        5710    real.p                   fort_cg_macros_:   4103, 4134.
        1000    realn                    fort_cg_macros_:    648,  767,  786, 1039, 1051, 1232, 1244, 1256, 1372, 1433, 1438,
                                                            1471, 1879, 2167, 2862, 3209, 3650, 3662, 3670, 3681, 3690, 3702,
                                                            3710, 3721, 7377, 7622, 7889,
                                         fort_equs:     62.
        5665    real_builtin             fort_cg_macros_:   2100, 4102.
        5702    real_builtin.cmpx        fort_cg_macros_:   4103, 4119.
        5676    real_builtin.dp          fort_cg_macros_:   4103, 4113, 4131.
        5672    real_builtin.int         fort_cg_macros_:   4103, 4105, 4126.
        5674    real_builtin.real        fort_cg_macros_:   4103, 4109.
       12525    real_func                fort_cg_macros_:   7872, 7888.
        1350    real_p_int               fort_cg_macros_:   1483,
                                         fort_equs:    195.
        1347    real_p_real              fort_cg_macros_:   1526,
                                         fort_equs:    196.
         654    real_to_integer          fort_cg_macros_:   1383, 1896, 2030, 3054, 3402, 7757, 7849,
                                         fort_equs:    188.
       11667    record_number            fort_cg_macros_:   7254,
                                         fort_operator_table:       53.
       11675    record_number.p          fort_cg_macros_:   7257, 7264.
          11    record_number_slot       fort_cg_macros_:   7261,
                                         fort_equs:    160.
       10000    rel_constant             fort_cg_macros_:   6169, 6179, 6189, 6358,
                                         fort_equs:     99.
        1456    restore_stack_quick      fort_equs:    254.
       12327    return                   fort_cg_macros_:   7682,
                                         fort_operator_table:       57.
        1173    return_no_pop_offset     stack_header:        83.
        1172    return_offset            stack_header:        82.
         631    return_op                fort_cg_macros_:   8074,
                                         fort_equs:    182.
         441    ret_mpy                  fort_cg_macros_:    227,  236,  239.
         431    ret_sub                  fort_cg_macros_:    207,  208,  219.
       11303    rewind                   fort_cg_macros_:   6850,
                                         fort_operator_table:       48.
       11315    rewind.p                 fort_cg_macros_:   6853, 6863.
       13261    right_shift              fort_cg_macros_:   8446,
                                         fort_operator_table:       84.
        2117    round_dp_const           fort_cg_macros_:   1432, 1437.
        2112    round_dp_to_real         fort_cg_macros_:   1305, 1429, 1613, 1626, 7400.
         512    r_e_as                   fort_equs:    273,
                                         fort_single_inst:    61.
         527    r_ge_a                   fort_equs:    276,
                                         fort_single_inst:    64.
         524    r_ge_s                   fort_equs:    278,
                                         fort_single_inst:    68.
         503    r_g_a                    fort_equs:    272,
                                         fort_single_inst:    66.
         477    r_g_s                    fort_equs:    192,
                                         fort_single_inst:   103.
         520    r_le_a                   fort_equs:    275,
                                         fort_single_inst:    65.
         532    r_le_s                   fort_equs:    193,
                                         fort_single_inst:   102.
         474    r_l_a                    fort_equs:    271,
                                         fort_single_inst:    63.
         507    r_l_s                    fort_equs:    277,
                                         fort_single_inst:    67.
         515    r_ne_as                  fort_equs:    274,
                                         fort_single_inst:    62.
        1455    save_stack_quick         fort_equs:    253.
        1227    set_cs_eis               fort_cg_macros_:   4511,
                                         fort_equs:    251.
       12071    sf                       fort_cg_macros_:   7454,
                                         fort_operator_table:       65.
       12202    sf_cc                    fort_cg_macros_:   7474, 7557.
       12175    sf_cd                    fort_cg_macros_:   7474, 7550.
       12155    sf_ci                    fort_cg_macros_:   7474, 7526.
       12165    sf_cr                    fort_cg_macros_:   7474, 7538.
       12172    sf_dc                    fort_cg_macros_:   7474, 7545.
       12141    sf_dd                    fort_cg_macros_:   7474, 7506.
       11747    sf_def                   fort_cg_macros_:   7335,
                                         fort_operator_table:       66.
       12061    sf_def.p                 fort_cg_macros_:   7344, 7445.
       12066    sf_def.p0                fort_cg_macros_:   7421, 7450.
       12041    sf_def_cc                fort_cg_macros_:   7348, 7416.
       12037    sf_def_cd                fort_cg_macros_:   7348, 7412.
       12020    sf_def_ci                fort_cg_macros_:   7348, 7383.
       12035    sf_def_cr                fort_cg_macros_:   7348, 7408.
       12027    sf_def_dc                fort_cg_macros_:   7348, 7398.
       12025    sf_def_dd                fort_cg_macros_:   7348, 7394.
       12006    sf_def_di                fort_cg_macros_:   7348, 7369.
       12025    sf_def_dr                fort_cg_macros_:   7348, 7393.
       12050    sf_def_e1                fort_cg_macros_:   7348, 7424, 7429.
       12043    sf_def_e2                fort_cg_macros_:   7348, 7420.
       12011    sf_def_ic                fort_cg_macros_:   7348, 7374.
       12003    sf_def_id                fort_cg_macros_:   7348, 7364.
       11773    sf_def_ii                fort_cg_macros_:   7348, 7350.
       11775    sf_def_ir                fort_cg_macros_:   7348, 7354.
       12032    sf_def_rc                fort_cg_macros_:   7348, 7403.
       12023    sf_def_rd                fort_cg_macros_:   7348, 7388.
       12053    sf_def_ret               fort_cg_macros_:   7352, 7357, 7362, 7367, 7372, 7381, 7386, 7391, 7396, 7406, 7410,
                                                            7414, 7418, 7427, 7433.
       12000    sf_def_ri                fort_cg_macros_:   7348, 7359.
       12023    sf_def_rr                fort_cg_macros_:   7348, 7389.
       12133    sf_di                    fort_cg_macros_:   7474, 7496.
       12147    sf_dr                    fort_cg_macros_:   7474, 7516.
       12206    sf_e1                    fort_cg_macros_:   7474, 7563, 7576, 7586.
       12212    sf_e2                    fort_cg_macros_:   7474, 7567.
       12304    sf_error_r               fort_cg_macros_:   7472, 7565, 7572, 7648, 7655, 7659.
       12226    sf_h                     fort_cg_macros_:   7569, 7584.
       12152    sf_ic                    fort_cg_macros_:   7474, 7521.
       12130    sf_id                    fort_cg_macros_:   7474, 7491.
       12117    sf_ii                    fort_cg_macros_:   7474, 7476.
       12310    sf_insuf.p               fort_cg_macros_:   7601, 7653.
       12122    sf_ir                    fort_cg_macros_:   7474, 7481.
       12220    sf_l                     fort_cg_macros_:   7568, 7574.
       12074    sf_loop                  fort_cg_macros_:   7460, 7597.
       12237    sf_no_args               fort_cg_macros_:   7456, 7599.
       12235    sf_r                     fort_cg_macros_:   7479, 7484, 7489, 7494, 7499, 7504, 7509, 7514, 7519, 7524, 7531,
                                                            7536, 7543, 7548, 7555, 7561, 7582, 7593, 7595.
       12162    sf_rc                    fort_cg_macros_:   7474, 7533.
       12144    sf_rd                    fort_cg_macros_:   7474, 7511.
       12272    sf_ret_c                 fort_cg_macros_:   7612, 7633.
       12266    sf_ret_d                 fort_cg_macros_:   7612, 7627.
       12302    sf_ret_h                 fort_cg_macros_:   7612, 7645.
       12256    sf_ret_i                 fort_cg_macros_:   7612, 7614.
       12276    sf_ret_l                 fort_cg_macros_:   7612, 7639.
       12262    sf_ret_r                 fort_cg_macros_:   7612, 7621.
       12256    sf_ret_t                 fort_cg_macros_:   7612, 7615.
       12125    sf_ri                    fort_cg_macros_:   7474, 7486.
       12136    sf_rr                    fort_cg_macros_:   7474, 7501.
       12101    sf_skip                  fort_cg_macros_:   7463, 7469.
       12313    sf_too_many.p            fort_cg_macros_:   7461, 7657.
        1014    shorten_stack            fort_equs:    255.
       12351    short_pause              fort_cg_macros_:   7701, 7714.
       12367    short_stop               fort_cg_macros_:   7723, 7735.
        5133    sign                     fort_cg_macros_:   2100, 3544.
        5204    sign.1                   fort_cg_macros_:   3562, 3566, 3577, 3615.
        1375    signal_stringrange       fort_cg_macros_:    272,  278,
                                         fort_equs:    185.
        5201    sign_cc                  fort_cg_macros_:   3545, 3606.
        5200    sign_cd                  fort_cg_macros_:   3545, 3603.
        5174    sign_ci                  fort_cg_macros_:   3545, 3591.
        5176    sign_cr                  fort_cg_macros_:   3545, 3597.
        5177    sign_dc                  fort_cg_macros_:   3545, 3600.
        5170    sign_dd                  fort_cg_macros_:   3545, 3579.
        5165    sign_di                  fort_cg_macros_:   3545, 3572.
        5172    sign_dr                  fort_cg_macros_:   3545, 3585.
        5202    sign_e1                  fort_cg_macros_:   3545, 3609.
        5203    sign_e2                  fort_cg_macros_:   3545, 3612.
         667    sign_fl                  fort_cg_macros_:   3618, 3632,
                                         fort_equs:    226.
         666    sign_fx                  fort_cg_macros_:   3556,
                                         fort_equs:    225.
        5173    sign_ic                  fort_cg_macros_:   3545, 3588.
        5163    sign_id                  fort_cg_macros_:   3545, 3568.
        5152    sign_ii                  fort_cg_macros_:   3545, 3553.
        5157    sign_ir                  fort_cg_macros_:   3545, 3560.
        5175    sign_rc                  fort_cg_macros_:   3545, 3594.
        5171    sign_rd                  fort_cg_macros_:   3545, 3582.
        5161    sign_ri                  fort_cg_macros_:   3545, 3564.
        5167    sign_rr                  fort_cg_macros_:   3545, 3576.
        5341    sin                      fort_cg_macros_:   2100, 3765.
        5345    sin.1                    fort_cg_macros_:   3767, 3771.
        5350    sin.2                    fort_cg_macros_:   3773, 3778.
         155    single_inst              fort_cg_macros_:    179,
                                         fort_single_inst:    16.
        5473    sinh                     fort_cg_macros_:   2100, 3902.
        5503    sinh.1                   fort_cg_macros_:   3907, 3912.
        5512    sinh.dp                  fort_cg_macros_:   3903, 3921, 3934.
        5500    sinh.int                 fort_cg_macros_:   3903, 3905.
        5524    sinh.p                   fort_cg_macros_:   3903, 3937.
        5502    sinh.real                fort_cg_macros_:   3903, 3909.
        1460    sinh_                    fort_cg_macros_:   3916,
                                         fort_equs:    257.
        1275    sin_                     fort_cg_macros_:   3782,
                                         fort_equs:    227.
        5347    sin_i                    fort_cg_macros_:   3766, 3775.
        5706    sngl                     fort_cg_macros_:   2100, 4129.
        5710    sngl.p                   fort_cg_macros_:   4130, 4136.
        5401    sqrt                     fort_cg_macros_:   2100, 3814.
        5405    sqrt.1                   fort_cg_macros_:   3816, 3820.
        5410    sqrt.2                   fort_cg_macros_:   3822, 3827.
        1274    sqrt_                    fort_cg_macros_:   3831,
                                         fort_equs:    230.
        5407    sqrt_i                   fort_cg_macros_:   3815, 3824.
          73    stach_header.trace_top_ptr     stack_header:        62.
          32    stack_frame.arg_ptr      fort_cg_macros_:   8012,
                                         stack_frame:   16.
         100    stack_frame.condition_bit      stack_frame:   32.
          20    stack_frame.condition_word     stack_frame:    9.
        2000    stack_frame.crawl_out_bit      stack_frame:   28.
          26    stack_frame.entry_ptr    stack_frame:   13.
          20    stack_frame.flag_word    stack_frame:   24.
         400    stack_frame.link_trap_bit      stack_frame:   30.
          30    stack_frame.lp_ptr       stack_frame:   15.
       20000    stack_frame.main_proc_bit      stack_frame:   25.
          60    stack_frame.min_length   stack_frame:   23.
          22    stack_frame.next_sp      stack_frame:   10.
          36    stack_frame.on_unit_rel_ptrs   stack_frame:   19.
          30    stack_frame.operator_ptr       stack_frame:   14.
          37    stack_frame.operator_ret_ptr   stack_frame:   20.
          20    stack_frame.prev_sp      stack_frame:    8.
          40    stack_frame.regs         stack_frame:   22.
          24    stack_frame.return_ptr   stack_frame:   12.
       10000    stack_frame.run_unit_manager   stack_frame:   26.
        1000    stack_frame.signaller_bit      stack_frame:   29.
          22    stack_frame.signaller_word     stack_frame:   11.
        4000    stack_frame.signal_bit   stack_frame:   27.
          34    stack_frame.static_ptr   stack_frame:   17.
         200    stack_frame.support_bit  stack_frame:   31.
          35    stack_frame.support_ptr  stack_frame:   18.
          37    stack_frame.translator_id      stack_frame:   21.
          66    stack_header.assign_linkage_ptr      stack_header:        59.
          32    stack_header.bar_mode_sp       stack_header:        42.
          36    stack_header.call_op_ptr       stack_header:        44.
          10    stack_header.clr_ptr     stack_header:        27.
           6    stack_header.combined_stat_ptr       stack_header:        25.
           4    stack_header.cpm_data_ptr      stack_header:        24.
          13    stack_header.cpm_enabled       stack_header:        32.
          13    stack_header.cur_lot_size      stack_header:        31.
          64    stack_header.ect_ptr     stack_header:        58.
          46    stack_header.entry_op_ptr      stack_header:        49.
          70    stack_header.heap_header_ptr   stack_header:        60.
          74    stack_header.in_trace    stack_header:        63.
          52    stack_header.isot_ptr    stack_header:        52.
          26    stack_header.lot_ptr     stack_header:        39.
          12    stack_header.main_proc_invoked       stack_header:        29.
          12    stack_header.max_lot_size      stack_header:        28.
          20    stack_header.parent_ptr  stack_header:        36.
          34    stack_header.pl1_operators_ptr       fort_cg_macros_:   7961,
                                                     stack_header:        43.
          40    stack_header.push_op_ptr       stack_header:        46.
          42    stack_header.return_op_ptr     stack_header:        47.
          44    stack_header.ret_no_pop_op_ptr       stack_header:        48.
          62    stack_header.rnt_ptr     stack_header:        57.
          12    stack_header.run_unit_depth    stack_header:        30.
          54    stack_header.sct_ptr     stack_header:        53.
          30    stack_header.signal_ptr  stack_header:        41.
          22    stack_header.stack_begin_ptr   stack_header:        37.
          24    stack_header.stack_end_ptr     stack_header:        38.
          14    stack_header.system_free_ptr   stack_header:        33.
          60    stack_header.sys_link_info_ptr       stack_header:        56.
          72    stack_header.trace_frames      stack_header:        61.
          50    stack_header.trans_op_tv_ptr   stack_header:        51.
          56    stack_header.unwinder_ptr      stack_header:        54.
          16    stack_header.user_free_ptr     stack_header:        34.
         100    stack_header_end         stack_header:        64.
          11    star_symbol              fort_cg_macros_:   8024,
                                         fort_equs:    151.
       12733    stat                     fort_cg_macros_:   8152,
                                         fort_operator_table:       74.
        2000    statement_function       fort_equs:    101.
       12354    stop                     fort_cg_macros_:   7719,
                                         fort_operator_table:       59.
       12363    stop.1                   fort_cg_macros_:   7729, 7738.
       13271    storage_add              fort_cg_macros_:   8464,
                                         fort_operator_table:       86.
       13313    storage_add_one          fort_cg_macros_:   8498,
                                         fort_operator_table:       89.
       13277    storage_sub              fort_cg_macros_:   8476,
                                         fort_operator_table:       87.
       13265    store_zero               fort_cg_macros_:   8456,
                                         fort_operator_table:       85.
       11700    string                   fort_cg_macros_:   7268,
                                         fort_operator_table:       54.
       11704    string_c                 fort_cg_macros_:   7271, 7275.
       11711    string_length            fort_cg_macros_:   7282,
                                         fort_operator_table:       55.
          25    string_length_slot       fort_cg_macros_:   6930, 7287, 7303,
                                         fort_equs:    162.
          20    string_slot              fort_cg_macros_:   7278, 7299,
                                         fort_equs:    161.
        1037    sub                      fort_cg_macros_:    620,
                                         fort_operator_table:       19.
       12551    subr                     fort_cg_macros_:   7926,
                                         fort_operator_table:       73.
       12372    subscript                fort_cg_macros_:   7740,
                                         fort_operator_table:       67.
       12414    subscript_dp             fort_cg_macros_:   7752, 7763.
       12431    subscript_dt_err         fort_cg_macros_:   7750, 7782.
       12435    subscript_end            fort_cg_macros_:   7746, 7788.
       12434    subscript_err            fort_cg_macros_:   7746, 7785.
         432    subscript_mpy            fort_cg_macros_:    193,  223.
         436    subscript_mpy.1          fort_cg_macros_:    229,  233.
       12374    subscript_scan           fort_cg_macros_:   7745, 7780.
       12437    substr                   fort_cg_macros_:   7793,
                                         fort_operator_table:      113.
       12451    substr.not_char          fort_cg_macros_:   7803, 7822.
          40    substr_ref               fort_equs:    106.
        1360    sub_cc                   fort_cg_macros_:    622,  918.
        1367    sub_cc.01                fort_cg_macros_:    928,  952.
        1375    sub_cc.1                 fort_cg_macros_:    922,  936.
        1400    sub_cc.11                fort_cg_macros_:    940,  956.
        1406    sub_cc.2                 fort_cg_macros_:    923,  948.
        1412    sub_cc.3                 fort_cg_macros_:    924,  954.
        1334    sub_cd                   fort_cg_macros_:    622,  888.
        1346    sub_cd.1                 fort_cg_macros_:    892,  902.
        1350    sub_cd.10                fort_cg_macros_:    905.
        1351    sub_cd.11                fort_cg_macros_:    907,  916.
        1356    sub_cd.2                 fort_cg_macros_:    893,  914.
        1214    sub_ci                   fort_cg_macros_:    622,  772.
        1260    sub_cr                   fort_cg_macros_:    622,  825.
        1272    sub_cr.1                 fort_cg_macros_:    790,  829,  839.
        1274    sub_cr.10                fort_cg_macros_:    783,  842.
        1275    sub_cr.11                fort_cg_macros_:    844,  853.
        1302    sub_cr.2                 fort_cg_macros_:    830,  851.
        1304    sub_dc                   fort_cg_macros_:    622,  855.
        1320    sub_dc.1                 fort_cg_macros_:    859,  871.
        1321    sub_dc.11                fort_cg_macros_:    873,  886.
        1330    sub_dc.2                 fort_cg_macros_:    860,  882.
        1145    sub_dd                   fort_cg_macros_:    622,  711.
        1152    sub_dd.1                 fort_cg_macros_:    713,  719.
        1111    sub_di                   fort_cg_macros_:    622,  670.
        1126    sub_di.1                 fort_cg_macros_:    671,  689.
        1167    sub_dr                   fort_cg_macros_:    622,  739.
        1174    sub_dr.1                 fort_cg_macros_:    741,  747.
        1414    sub_e1                   fort_cg_macros_:    622,  958,  966.
        1416    sub_e2                   fort_cg_macros_:    622,  961,  965.
        1200    sub_ic                   fort_cg_macros_:    622,  753.
        1105    sub_id                   fort_cg_macros_:    622,  663.
        1053    sub_ii                   fort_cg_macros_:    622,  624.
       13356    sub_index                fort_cg_macros_:   8572,
                                         fort_operator_table:      106.
        1056    sub_ir                   fort_cg_macros_:    622,  629.
        1230    sub_rc                   fort_cg_macros_:    622,  792.
        1244    sub_rc.1                 fort_cg_macros_:    764,  770,  796,  808.
        1245    sub_rc.11                fort_cg_macros_:    810,  823.
        1254    sub_rc.2                 fort_cg_macros_:    797,  819.
        1156    sub_rd                   fort_cg_macros_:    622,  725.
        1163    sub_rd.1                 fort_cg_macros_:    727,  733.
        1062    sub_ri                   fort_cg_macros_:    622,  636.
        1077    sub_ri.1                 fort_cg_macros_:    637,  655.
        1134    sub_rr                   fort_cg_macros_:    622,  697.
        1141    sub_rr.1                 fort_cg_macros_:    699,  705.
        1420    sub_tl                   fort_cg_macros_:    622,  964.
        1427    sub_tl.1                 fort_cg_macros_:    966,  969.
        6116    tan                      fort_cg_macros_:   2100, 4317.
        6122    tan.1                    fort_cg_macros_:   4319, 4323.
        6125    tan.2                    fort_cg_macros_:   4325, 4330.
        6144    tan.p                    fort_cg_macros_:   4321, 4350.
        5441    tanh                     fort_cg_macros_:   2100, 3863.
        5451    tanh.1                   fort_cg_macros_:   3868, 3873.
        5460    tanh.dp                  fort_cg_macros_:   3864, 3882, 3895.
        5446    tanh.int                 fort_cg_macros_:   3864, 3866.
        5472    tanh.p                   fort_cg_macros_:   3864, 3898.
        5450    tanh.real                fort_cg_macros_:   3864, 3870.
        1414    tanh_                    fort_cg_macros_:   3877,
                                         fort_equs:    233.
        1301    tan_                     fort_cg_macros_:   4334,
                                         fort_equs:    234.
        6124    tan_i                    fort_cg_macros_:   4318, 4327.
       40000    temp                     fort_cg_macros_:   4936, 4949, 4968, 5130, 5143, 5162, 5300, 5313, 5332, 5465, 5478,
                                                            5497, 5654, 5667, 5686, 5847, 5860, 5879,
                                         fort_equs:     97.
          50    temp_pt                  fort_cg_macros_:   1642, 1654, 2246, 2302, 2540, 2734, 3806, 3855, 3878, 3888, 3917,
                                                            3927, 3956, 3966,
                                         fort_equs:    172.
       11741    terminate                fort_cg_macros_:   7326,
                                         fort_operator_table:       56.
        6400    tmi                      fort_cg_macros_:   4825, 4836, 4848, 4861, 4874, 4886, 4899, 5001, 5740, 5752, 5764,
                                                            5777, 5790, 5802, 5814, 5916, 5973,
                                         fort_equs:     85.
        7400    tmoz                     fort_cg_macros_:   5019, 5030, 5042, 5055, 5068, 5080, 5093, 5195, 5547, 5559, 5571,
                                                            5584, 5597, 5609, 5621, 5723, 5979,
                                         fort_equs:     87.
       10400    tnc                      fort_cg_macros_:   2153, 4942, 4955, 4965, 4982, 4990, 5853, 5866, 5876, 5893, 5901,
                                                            5985,
                                         fort_equs:     89.
        6000    tnz                      fort_cg_macros_:   5376, 5384, 5392, 5398, 5404, 5415, 5419, 5442, 5454, 5471, 5484,
                                                            5494, 5511, 5519, 5529, 5964, 6014,
                                         fort_equs:     84.
        2522    to_is_constant           fort_cg_macros_:   1803, 1810.
        7000    tpl                      fort_cg_macros_:   5023, 5035, 5047, 5060, 5073, 5085, 5097, 5199, 5543, 5554, 5566,
                                                            5579, 5592, 5604, 5617, 5719, 5970,
                                         fort_equs:     86.
       10000    tpnz                     fort_cg_macros_:   4829, 4841, 4853, 4866, 4879, 4891, 4903, 5005, 5736, 5747, 5759,
                                                            5772, 5785, 5797, 5810, 5912, 5976,
                                         fort_equs:     88.
        4400    tq                       fort_cg_macros_:    440,  444,  449,  450,  613,  618,  967,  971, 1133, 1144, 1350,
                                                            1355, 2143, 2180, 4660, 4676, 4739, 4756, 4997, 4999, 5191, 5193,
                                                            5361, 5527, 5715, 5717, 5908, 5910,
                                         fort_equs:     81.
           0    trace_frames.count       stack_header:        69.
           1    trace_frames.top_ptr     stack_header:        70.
       11000    trc                      fort_cg_macros_:   2148, 5136, 5149, 5159, 5176, 5184, 5660, 5673, 5683, 5700, 5708,
                                                            5982,
                                         fort_equs:     90.
        1124    trunc_fl                 fort_cg_macros_:   4028, 4033,
                                         fort_equs:    240.
         551    tv_offset                stack_header:        75,   80,   81,   82,   83,   84.
           7    two                      fort_equs:    149.
        4000    typeless                 fort_cg_macros_:    965, 1348, 2090, 4993, 5187, 5357, 5523, 5711, 5904,
                                         fort_equs:     58.
        3400    typelessn                fort_cg_macros_:   2179,
                                         fort_equs:     67.
       12523    typeless_func            fort_cg_macros_:   7872, 7884.
        6620    typeless_op1             fort_cg_macros_:   4806, 4993, 5187, 5357, 5523, 5711, 5904.
        6622    typeless_op2             fort_cg_macros_:   4809, 4994, 5188, 5358, 5524, 5712, 5905.
        5400    tze                      fort_cg_macros_:   5211, 5219, 5227, 5233, 5239, 5250, 5254, 5277, 5289, 5306, 5319,
                                                            5329, 5346, 5354, 5363, 5967, 6000,
                                         fort_equs:     83.
       13147    use_itp                  fort_cg_macros_:   8295, 8327.
      777777    var                      fort_equs:     70.
      400000    variable                 fort_cg_macros_:   4936, 4949, 4968, 5130, 5143, 5162, 5300, 5313, 5332, 5465, 5478,
                                                            5497, 5654, 5667, 5686, 5847, 5860, 5879,
                                         fort_equs:     94.
      777615    VLA_words_per_seg        fort_cg_macros_:   8422,
                                         fort_equs:    281.
       11023    write                    fort_cg_macros_:   6573,
                                         fort_operator_table:       40.
       11036    write.p                  fort_cg_macros_:   6577, 6588.
       13356    write_array              fort_cg_macros_:   8568,
                                         fort_operator_table:      102.
       11716    write_internal_file      fort_cg_macros_:   7291,
                                         fort_operator_table:      122.
       13356    write_namelist           fort_cg_macros_:   8575,
                                         fort_operator_table:      109.
       13356    write_scalar             fort_cg_macros_:   8567,
                                         fort_operator_table:      101.
       13356    write_vector             fort_cg_macros_:   8569,
                                         fort_operator_table:      103.
        3415    wrong_char_length.p      fort_cg_macros_:   2201.
        3406    wrong_number.p           fort_cg_macros_:   2191, 2745, 2936, 2968, 2998, 3028, 3061, 3092, 3283, 3315, 3346,
                                                            3376, 3409, 4659, 4738, 4755.
        3411    wrong_type.p             fort_cg_macros_:   2082, 2090, 2094, 2112, 2196.
      400000    x0                       fort_equs:    108,  122.
      200000    x1                       fort_cg_macros_:   1452, 1482, 1512, 1525, 1538, 1555, 1640, 1652, 2244, 2276, 2288,
                                                            2300, 2329, 2341, 2369, 2381, 2470, 2488, 2514, 2526, 2538, 2706,
                                                            2719, 2732, 3781, 3793, 3804, 3830, 3842, 3853, 3876, 3886, 3915,
                                                            3925, 3954, 3964, 4333, 4345, 4372, 4384, 4411, 4423, 7706, 7716,
                                                            7727, 7737, 8383,
                                         fort_equs:    109,  122.
      100000    x2                       fort_cg_macros_:   1452, 1482, 1512, 1525, 1538, 1555, 1640, 1652, 2244, 2276, 2288,
                                                            2300, 2329, 2341, 2369, 2381, 2470, 2488, 2514, 2526, 2538, 2706,
                                                            2719, 2732, 3781, 3793, 3804, 3830, 3842, 3853, 3876, 3886, 3915,
                                                            3925, 3954, 3964, 4333, 4345, 4372, 4384, 4411, 4423, 7706, 7716,
                                                            7727, 7737, 8206, 8383,
                                         fort_equs:    110,  122.
       40000    x3                       fort_cg_macros_:   1452, 1482, 1512, 1525, 1538, 1555, 1640, 1652, 2244, 2276, 2288,
                                                            2300, 2329, 2341, 2369, 2381, 2470, 2488, 2514, 2526, 2538, 2706,
                                                            2719, 2732, 3781, 3793, 3804, 3830, 3842, 3853, 3876, 3886, 3915,
                                                            3925, 3954, 3964, 4333, 4345, 4372, 4384, 4411, 4423, 7706, 7716,
                                                            7727, 7737, 8383,
                                         fort_equs:    111,  122.
       20000    x4                       fort_cg_macros_:   1452, 1482, 1512, 1525, 1538, 1555, 1640, 1652, 2244, 2276, 2288,
                                                            2300, 2329, 2341, 2369, 2381, 2470, 2488, 2514, 2526, 2538, 2706,
                                                            2719, 2732, 3781, 3793, 3804, 3830, 3842, 3853, 3876, 3886, 3915,
                                                            3925, 3954, 3964, 4333, 4345, 4372, 4384, 4411, 4423, 7706, 7716,
                                                            7727, 7737, 8383,
                                         fort_equs:    112,  122.
       10000    x5                       fort_cg_macros_:   1452, 1482, 1512, 1525, 1538, 1555, 1640, 1652, 2244, 2276, 2288,
                                                            2300, 2329, 2341, 2369, 2381, 2470, 2488, 2514, 2526, 2538, 2706,
                                                            2719, 2732, 3781, 3793, 3804, 3830, 3842, 3853, 3876, 3886, 3915,
                                                            3925, 3954, 3964, 4333, 4345, 4372, 4384, 4411, 4423, 7706, 7716,
                                                            7727, 7737, 8383,
                                         fort_equs:    113,  122.
        4000    x6                       fort_cg_macros_:   1452, 1482, 1512, 1525, 1538, 1555, 1640, 1652, 2244, 2276, 2288,
                                                            2300, 2329, 2341, 2369, 2381, 2470, 2488, 2514, 2526, 2538, 2706,
                                                            2719, 2732, 3781, 3793, 3804, 3830, 3842, 3853, 3876, 3886, 3915,
                                                            3925, 3954, 3964, 4333, 4345, 4372, 4384, 4411, 4423, 6563, 6582,
                                                            6684, 6756, 6827, 6840, 6857, 6875, 6897, 6933, 6961, 7059, 7078,
                                                            7214, 7228, 7329, 7706, 7716, 7727, 7737, 8383,
                                         fort_equs:    114,  122.
        2000    x7                       fort_cg_macros_:   1452, 1482, 1512, 1525, 1538, 1555, 1640, 1652, 2244, 2276, 2288,
                                                            2300, 2329, 2341, 2369, 2381, 2470, 2488, 2514, 2526, 2538, 2706,
                                                            2719, 2732, 3781, 3793, 3804, 3830, 3842, 3853, 3876, 3886, 3915,
                                                            3925, 3954, 3964, 4333, 4345, 4372, 4384, 4411, 4423, 7706, 7716,
                                                            7727, 7737, 8383,
                                         fort_equs:    115,  122.
       11164    xa_c                     fort_cg_macros_:   6697, 6727.
       11167    xa_c_VLA                 fort_cg_macros_:   6728, 6732.
       11157    xa_d                     fort_cg_macros_:   6697, 6718.
       11162    xa_d_VLA                 fort_cg_macros_:   6719, 6723.
       11176    xa_h                     fort_cg_macros_:   6697, 6745.
       11145    xa_i                     fort_cg_macros_:   6697, 6699.
       11150    xa_i_VLA                 fort_cg_macros_:   6701, 6705.
       11171    xa_l                     fort_cg_macros_:   6697, 6736.
       11174    xa_l_VLA                 fort_cg_macros_:   6737, 6741.
       11152    xa_r                     fort_cg_macros_:   6697, 6709.
       11155    xa_r_VLA                 fort_cg_macros_:   6710, 6714.
       11145    xa_t                     fort_cg_macros_:   6697, 6700.
       11203    xa_transfer              fort_cg_macros_:   6703, 6707, 6712, 6716, 6721, 6725, 6730, 6734, 6739, 6743, 6752.
       11135    xmit_array               fort_cg_macros_:   6690,
                                         fort_operator_table:       45.
       11101    xmit_scalar              fort_cg_macros_:   6646,
                                         fort_operator_table:       44.
       11212    xmit_vector              fort_cg_macros_:   6762,
                                         fort_operator_table:       46.
        6547    xor.tl                   fort_cg_macros_:   2100, 4754.
        6552    xor.tl.loop              fort_cg_macros_:   4759, 4766.
        6561    xor.tl.r                 fort_cg_macros_:   4762, 4768.
       11117    xs_c                     fort_cg_macros_:   6653, 6668.
       11115    xs_d                     fort_cg_macros_:   6653, 6664.
       11123    xs_h                     fort_cg_macros_:   6653, 6676.
       11111    xs_i                     fort_cg_macros_:   6653, 6655.
       11121    xs_l                     fort_cg_macros_:   6653, 6672.
       11113    xs_r                     fort_cg_macros_:   6653, 6660.
       11111    xs_t                     fort_cg_macros_:   6653, 6656.
       11130    xs_transfer              fort_cg_macros_:   6658, 6662, 6666, 6670, 6674, 6683.
       11242    xv_c                     fort_cg_macros_:   6770, 6800.
       11245    xv_c_VLA                 fort_cg_macros_:   6801, 6805.
       11235    xv_d                     fort_cg_macros_:   6770, 6791.
       11240    xv_d_VLA                 fort_cg_macros_:   6792, 6796.
       11254    xv_h                     fort_cg_macros_:   6770, 6818.
       11223    xv_i                     fort_cg_macros_:   6770, 6772.
       11226    xv_i_VLA                 fort_cg_macros_:   6774, 6778.
       11247    xv_l                     fort_cg_macros_:   6770, 6809.
       11252    xv_l_VLA                 fort_cg_macros_:   6810, 6814.
       11230    xv_r                     fort_cg_macros_:   6770, 6782.
       11233    xv_r_VLA                 fort_cg_macros_:   6783, 6787.
       11223    xv_t                     fort_cg_macros_:   6770, 6773.
       11261    xv_transfer              fort_cg_macros_:   6776, 6780, 6785, 6789, 6794, 6798, 6803, 6807, 6812, 6816, 6825.
           0    zero                     fort_equs:    142.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
