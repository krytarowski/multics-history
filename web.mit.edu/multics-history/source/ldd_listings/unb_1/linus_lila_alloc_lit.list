	COMPILATION LISTING OF SEGMENT linus_lila_alloc_lit
	Compiled by: Multics PL/I Compiler, Release 28e, of February 14, 1985
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 07/29/86  1002.2 mst Tue
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   *                                                         *
        4*   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        5*   *                                                         *
        6*   *                                                         *
        7*   *********************************************************** */
        8 
        9 /* ******************************************************
       10*   *                                                    *
       11*   *                                                    *
       12*   * Copyright (c) 1972 by Massachusetts Institute of   *
       13*   * Technology and Honeywell Information Systems, Inc. *
       14*   *                                                    *
       15*   *                                                    *
       16*   ****************************************************** */
       17 
       18 linus_lila_alloc_lit:
       19      proc (lcb_ptr, desc_ptr, lit_ptr, bit_len);
       20 
       21 /* DESCRIPTION:
       22*
       23*   Procedure  to  allocate  space  for a literal in the literal string, given a
       24*   descriptor pointer.  A pointer and bit are returned.
       25*
       26*
       27*
       28*   HISTORY:
       29*
       30*   77-07-01 J. A. Weeldreyer: Initially written.
       31*
       32*   80-01-09  Rickie E.  Brinegar: to accept a descriptor pointer rather than an
       33*   assign_ descriptor type, and eliminate the need of a length parameter.
       34*
       35*   81-02-24  Rickie  E.   Brinegar:  the  set  entry  point  was removed.  Both
       36*   linus_set and linus_assign_values (the only two modules that referenced that
       37*   entry point) were modified to do their own allocation and freeing.
       38*   
       39*   81-11-06 Rickie E. Brinegar: Removed unreferenced mod builtin function.
       40*
       41**/
       42 
  1     1 /* BEGIN INCLUDE FILE linus_lcb.incl.pl1 -- jaw 8/30/77 */
  1     2    
  1     3 
  1     4 
  1     5 /****^  HISTORY COMMENTS:
  1     6*  1) change(86-04-23,Dupuis), approve(86-05-23,MCR7188), audit(86-07-23,GWMay),
  1     7*     install(86-07-29,MR12.0-1106):
  1     8*     Added general_work_area_ptr and renamed sfr_ptr to
  1     9*     force_retrieve_scope_ptr.
  1    10*                                                   END HISTORY COMMENTS */
  1    11 
  1    12 
  1    13 /* HISTORY:
  1    14*
  1    15*   78-09-29 J. C. C. Jagernauth: Modified for MR7.0.
  1    16*
  1    17*   81-05-11  Rickie E.  Brinegar: added security bit and andministrator bit as
  1    18*   a part of the attribute level control work.
  1    19*   
  1    20*   81-06-17  Rickie E.  Brinegar: deleted the sd_ptr as a part of removing the
  1    21*   scope_data  structure  from  LINUS.   LINUS now depends totally on MRDS for
  1    22*   scope information.
  1    23*   
  1    24*   81-11-11  Rickie  E.   Brinegar:  added the timing bit and three fields for
  1    25*   retaining  various  vcpu  times  to  be collected when in timing mode.  The
  1    26*   times  to  be collected are: LINUS parsing time, LINUS processing time, and
  1    27*   MRDS processing time.
  1    28*
  1    29*   82-01-15  DJ  Schimke:  Added the build_increment and build_start fields as
  1    30*   part of the line numbering implementation.  This allows for possible  later
  1    31*   LINUS control of the build defaults.
  1    32* 
  1    33*   82-03-01 Paul W. Benjamin: Removed linus_prompt_chars_ptr, as that 
  1    34*   information is now retained by ssu_.  Removed parse_timer as no longer
  1    35*   meaningful.  Added linus_version.  Added iteration bit.  Added 6 entry 
  1    36*   variables for ssu_ replaceable procedures.  Added actual_input_iocbp.
  1    37*
  1    38*   82-06-23 Al Dupuis: Added subsystem_control_info_ptr, 
  1    39*   subsystem_invocation_level, and selection_expression_identifier.
  1    40*
  1    41*   82-08-26 DJ Schimke: Added report_control_info_ptr, and
  1    42*   table_control_info_ptr. 
  1    43*
  1    44*   82-10-19 DJ Schimke: Added ssu_abort_line.
  1    45*
  1    46*   83-06-06 Bert Moberg: Added print_search_order (pso) and no_optimize (no_ot)
  1    47*
  1    48*   83-04-07 DJ Schimke: Added temp_seg_info_ptr.
  1    49*
  1    50*   83-08-26 Al Dupuis: Added query_temp_segment_ptr.
  1    51**/
  1    52     
  1    53 dcl 1 lcb aligned based (lcb_ptr),			/* LINUS control block */
  1    54     2 db_index fixed bin (35),			/* index of open data base, or 0 */
  1    55     2 rb_len fixed bin (21),				/* length of request buffer */
  1    56     2 lila_count fixed bin (35),			/* number of LILA text lines */
  1    57     2 lila_chars fixed bin (35),			/* number of LILA source test chars */
  1    58     2 trans_id fixed bin (35),			/* used by checkpoint and rollback facilities (MR7.0) */
  1    59     2 lila_fn char (32) unal,				/* entry name of lila data file */
  1    60     2 prompt_flag bit (1) unal,			/* on if in prompt mode */
  1    61     2 test_flag bit (1) unal,				/* on if in test mode */
  1    62     2 new_version bit (1) unal init (1),		/* on for new version data base (MR7.0) */
  1    63     2 secured_db bit (1) unal,                              /* on if the db is in a secure state */
  1    64     2 administrator bit (1) unal,                           /* on if the user is a db administrator */
  1    65     2 timing_mode bit (1) unal,                             /* on if timing is to be done */
  1    66     2 iteration bit (1) unal,				/* interpret parens as iteration sets */
  1    67     2 pso_flag bit (1) unal,				/* add print_search_order to select */
  1    68     2 no_ot_flag bit (1) unal,			/* add no_optimize to select */
  1    69     2 reserved bit (27) unal,
  1    70     2 liocb_ptr ptr,				/* iocb ptr for lila file */
  1    71     2 rb_ptr ptr,					/* ptr to request buffer */
  1    72     2 is_ptr ptr,					/* iocb ptr for currentinput stream switch */
  1    73     2 cal_ptr ptr,					/* ptr to current arg list for invoke (or null) */
  1    74     2 ttn_ptr ptr,					/* pointer to table info structure */
  1    75     2 force_retrieve_scope_info_ptr ptr,		/* structure pointer to force retrieve scope operation */
  1    76     2 lv_ptr ptr,					/* pointer linus variables */
  1    77     2 si_ptr ptr,					/* pointer to select_info structure */
  1    78     2 setfi_ptr ptr,				/* pointer to set function information */
  1    79     2 sclfi_ptr ptr,				/* pointer to user declared scalar fun. names */
  1    80     2 ivs_ptr ptr,					/* pointer to stack of invoke iocb pointers */
  1    81     2 lit_ptr ptr,					/* pointer to literal pool */
  1    82     2 lvv_ptr ptr,					/* pointer to linus variable alloc. pool  */
  1    83     2 rd_ptr ptr,					/* point to readied files mode information (MR7.0) */
  1    84     2 rt_ptr ptr,                                           /* point to table of relation names and their readied modes
  1    85*                                                               (MR7.0) */
  1    86     2 actual_input_iocbp ptr,				/* ptr to input while in macros */
  1    87     2 lila_promp_chars_ptr ptr,			/* pointer to the prompt characters for lila */
  1    88     2 linus_area_ptr ptr,				/* LINUS temporary segment pointer */
  1    89     2 lila_area_ptr ptr,				/* LILA temporary segment pointer */
  1    90     2 i_o_area_ptr ptr,				/* temporary segment pointer used by write, print, create_list */
  1    91     2 rel_array_ptr ptr,                                    /* ptr to array of names rslt info structure
  1    92*                                                               for current lila expression */
  1    93     2 unused_timer float bin (63),			/* future expansion */
  1    94     2 request_time float bin (63),                          /* How much request time was spent
  1    95*                                                                in LINUS. (-1 = user has just enabled 
  1    96*						    timing, do not report) */
  1    97     2 mrds_time float bin (63),                             /* How much time was spent in MRDS */
  1    98     2 build_increment fixed bin,			/* default increment for build mode */
  1    99     2 build_start fixed bin,				/* default start count for build mode */
  1   100     2 linus_version char (4),				/* current version of LINUS */
  1   101     2 subsystem_control_info_ptr ptr,                       /* the same ptr passed by ssu_ to each request procedure */
  1   102     2 subsystem_invocation_level fixed bin,                 /* identifies this invocation of LINUS */
  1   103     2 selection_expression_identifier fixed bin,            /* identifies the current processed selection expression */
  1   104     2 report_control_info_ptr ptr,			/* pointer to linus_report_control_info structure */
  1   105     2 table_control_info_ptr ptr,			/* pointer to linus_table control structure */
  1   106     2 temp_seg_info_ptr ptr,				/* pointer to linus_temp_seg_mgr control structure */
  1   107     2 query_temp_segment_ptr ptr,			/* points to temp seg used for manipulating query */
  1   108     2 general_work_area_ptr ptr,			/* a freeing area for general use */
  1   109     2 word_pad (6) bit (36) unal,
  1   110 						/* procedures that will be optionally */
  1   111 						/* replaced by the user.  Saved so they */
  1   112 						/* can be reinstated if desired. */
  1   113     2 ssu_abort_line entry options (variable),
  1   114     2 ssu_post_request_line variable entry (ptr),
  1   115     2 ssu_pre_request_line variable entry (ptr),
  1   116 
  1   117     2 curr_lit_offset fixed bin (35),			/* index of first free bit in lit. pool */
  1   118     2 curr_lv_val_offset fixed bin (35),		/* index of first free bit lv. val. pool */
  1   119     2 static_area area (sys_info$max_seg_size - fixed (rel (addr (lcb.static_area))) + 1);
  1   120 
  1   121 dcl  lcb_ptr ptr;
  1   122 
  1   123 /* END INCLUDE FILE linus_lcb.incl.pl1 */
       43 
       44 
  2     1 /* BEGIN INCLUDE FILE linus_lit_string.incl.pl1 -- jaw 7/1/77 */
  2     2 
  2     3 dcl  lit_string bit (linus_data_$lit_string_size) based (lcb.lit_ptr);
  2     4 
  2     5 dcl  lit_array (0:linus_data_$lit_string_size - 1) bit (1) unal based (lcb.lit_ptr);
  2     6 
  2     7 /* END INCLUDE FILE linus_lit_string.incl.pl1 */
       45 
       46 
       47 	dcl     (desc_ptr, lit_ptr)	 ptr;		/* INPUT POINTERS */
       48 
       49 	dcl     bit_len		 fixed bin (35);
       50 
       51 	dcl     desc		 bit (36) based (desc_ptr);
       52 
       53 	dcl     initial_mrds_vclock	 float bin (63);
       54 
       55 	dcl     mdbm_util_$align_data_item entry (ptr, fixed bin (35))
       56 				 returns (fixed bin (35));
       57 	dcl     mdbm_util_$get_data_bit_length entry (bit (36)) returns (fixed bin (35));
       58 
       59 	dcl     (
       60 	        linus_data_$lit_string_size,
       61 	        sys_info$max_seg_size
       62 	        )			 fixed bin (35) ext;
       63 
       64 	dcl     (null, addr, fixed, rel, vclock) builtin;
       65 
       66 	dcl     work_area		 area (sys_info$max_seg_size) based (lcb.lila_area_ptr);
       67 
       68 	if lcb.lit_ptr = null then do;		/* if literal pool not yet allocated */
       69 		allocate lit_string in (work_area);
       70 		lit_string = "0"b;
       71 		lcb.curr_lit_offset = 0;
       72 	     end;
       73 
       74 	if lcb.timing_mode then
       75 	     initial_mrds_vclock = vclock;
       76 	lcb.curr_lit_offset =
       77 	     lcb.curr_lit_offset
       78 	     + mdbm_util_$align_data_item (desc_ptr, lcb.curr_lit_offset);
       79 	if lcb.timing_mode then
       80 	     lcb.mrds_time = lcb.mrds_time + (vclock - initial_mrds_vclock);
       81 
       82 	lit_ptr = addr (lit_array (lcb.curr_lit_offset));
       83 
       84 	if lcb.timing_mode then
       85 	     initial_mrds_vclock = vclock;
       86 	bit_len = mdbm_util_$get_data_bit_length (desc);
       87 	if lcb.timing_mode then
       88 	     lcb.mrds_time = lcb.mrds_time + (vclock - initial_mrds_vclock);
       89 
       90 	if lcb.curr_lit_offset + bit_len - 1 > linus_data_$lit_string_size then
       91 	     lit_ptr = null;
       92 	else lcb.curr_lit_offset = lcb.curr_lit_offset + bit_len;
       93 						/* keep offset current */
       94 
       95 	return;
       96 
       97      end linus_lila_alloc_lit;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/29/86  0939.8  linus_lila_alloc_lit.pl1          >special_ldd>install>MR12.0-1106>linus_lila_alloc_lit.pl1
43           1    07/29/86  0937.8  linus_lcb.incl.pl1                >special_ldd>install>MR12.0-1106>linus_lcb.incl.pl1
45           2    03/27/82  0434.5  linus_lit_string.incl.pl1         >ldd>include>linus_lit_string.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
addr                                                   builtin function         dcl 64 ref 82
bit_len                                parameter       fixed bin(35,0)          dcl 49 set ref 18 86* 90 92
curr_lit_offset         142            based           fixed bin(35,0)          level 2 dcl 1-53 set ref 71* 76* 76 76* 82 90 92* 92
desc                                   based           bit(36)                  unaligned dcl 51 set ref 86*
desc_ptr                               parameter       pointer                  dcl 47 set ref 18 76* 86
initial_mrds_vclock             000100 automatic       float bin(63)            dcl 53 set ref 74* 79 84* 87
lcb                                    based           structure                level 1 dcl 1-53
lcb_ptr                                parameter       pointer                  dcl 1-121 ref 18 68 69 69 70 71 74 76 76 76 79 79 79
                                                                                  82 82 84 87 87 87 90 92 92
lila_area_ptr            62            based           pointer                  level 2 dcl 1-53 ref 69
linus_data_$lit_string_size     000014 external static fixed bin(35,0)          dcl 59 ref 69 69 70 90
lit_array                              based           bit(1)                   array unaligned dcl 2-5 set ref 82
lit_ptr                  44            based           pointer                  level 2 in structure "lcb" dcl 1-53 in procedure
                                                                                  "linus_lila_alloc_lit" set ref 68 69* 70 82
lit_ptr                                parameter       pointer                  dcl 47 in procedure "linus_lila_alloc_lit" set ref
                                                                                  18 82* 90*
lit_string                             based           bit                      unaligned dcl 2-3 set ref 69 70*
mdbm_util_$align_data_item      000010 constant        entry                    external dcl 55 ref 76
mdbm_util_$get_data_bit_length  000012 constant        entry                    external dcl 57 ref 86
mrds_time                74            based           float bin(63)            level 2 dcl 1-53 set ref 79* 79 87* 87
null                                                   builtin function         dcl 64 ref 68 90
timing_mode              15(05)        based           bit(1)                   level 2 packed unaligned dcl 1-53 ref 74 79 84 87
vclock                                                 builtin function         dcl 64 ref 74 79 84 87
work_area                              based           area                     dcl 66 ref 69

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
fixed                                                  builtin function         dcl 64
rel                                                    builtin function         dcl 64
sys_info$max_seg_size                  external static fixed bin(35,0)          dcl 59

NAME DECLARED BY EXPLICIT CONTEXT.
linus_lila_alloc_lit            000011 constant        entry                    external dcl 18

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       300         316     214         310
Length       534     214        16         201      63           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
linus_lila_alloc_lit                 80 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
linus_lila_alloc_lit     000100 initial_mrds_vclock         linus_lila_alloc_lit

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return              ext_entry           alloc_based         vclock

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
mdbm_util_$align_data_item    mdbm_util_$get_data_bit_length

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
linus_data_$lit_string_size




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     18 000004        68 000016        69 000025        70 000043        71 000053        74 000054        76 000065
     79 000112        82 000123        84 000130        86 000141        87 000154        90 000170        92 000211
     95 000213


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
