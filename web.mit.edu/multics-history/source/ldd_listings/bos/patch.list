ASSEMBLY LISTING OF SEGMENT >spec>h>3.17>patch.alm                       
ASSEMBLED ON:	11/29/83  1529.3 mst Tue
OPTIONS USED:	list 
ASSEMBLED BY:	ALM Version  6.6  November 1982 
ASSEMBLER CREATED:	09/21/83  1227.3 mst Wed

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Information Systems Inc., 1982 *
                                     4  " *                                                         *
                                     5  " ***********************************************************
                                     6  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                     7  "						"
                                     8  " PATCH - BOS command program to do core + drum patching	"
                                     9  "						"
                                    10  " THVV 4/68					"
                                    11  "
                                    12  " Last modified on 11/06/71 by N. I. Morris		"
                                    13  "						"
                                    14  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    15  
                                    16  "  ******************************************************
                                    17  "  *                                                    *
                                    18  "  *                                                    *
                                    19  "  * Copyright (c) 1972 by Massachusetts Institute of   *
                                    20  "  * Technology and Honeywell Information Systems, Inc. *
                                    21  "  *                                                    *
                                    22  "  *                                                    *
                                    23  "  ******************************************************
                                    24  
                                    25  
                                    26  
                                    27  
                        000100      28  	equ	dmpbufl,64	Length of dump buffer.
                                    29  
                                    30  
                                    31  	include	bosequ
                                   1-1  " Begin include file ...... bosequ.incl.alm
                                   1-2  " Modified 8/25/76 by N. I. Morris
                                   1-3  " Modified 8/79 by R.J.C. Kissel to expand BOS.
                                   1-4  " Modified November 1981 by C. Hornig to add pgmorg.
                                   1-5  " Modified October 1982 by J. Bongiovanni to take it out
                                   1-6  
                        000000     1-7  	bool	ds,0		descriptor segment
                        000001     1-8  	bool	tmp,1		temp seg
                        000002     1-9  	bool	bf,2		buffer segment for save/restor
                        000003    1-10  	bool	pgm,3		program in control
                        000004    1-11  	bool	xs1,4		spare segment
                        000005    1-12  	bool	xs2,5		spare segment
                        000005    1-13  	bool	fgb,5		flagbox segment
                        000006    1-14  	bool	com,6		common
                        000007    1-15  	bool	mem,7		all memory
                                  1-16  
                        000017    1-17  	equ	arglen,15		max number of args from scan
                                  1-18  
                        004000    1-19  	bool	runcom_bit,4000	runcom bit in dir entry
                        002000    1-20  	bool	firmware_bit,2000	firmware bit in dir entry
                                  1-21  
                        012000    1-22  	bool	utilorg,12000	origin of utility package
                                  1-23  
                                  1-24  " End of include file ...... bosequ.incl.alm
                                    32  
    000000  0a   001020 7420 00     33  	stx2	x2
    000001  aa   012300 7020 00     34  	tsx2	initint		set up fault and int vectors
    000002  0a   000020 0000 00     35  	arg	execint
                                    36  
    000003  aa   012271 7020 00     37  	tsx2	init_io		initialize the iom routines
                                    38  
    000004  aa   012245 7020 00     39  	tsx2	ttyinit		init tty for requests
    000005  0a   000020 0000 00     40  	arg	ttyrequest
                                    41  
    000006  aa   012210 7020 00     42  	tsx2	cvinit
                                    43  
    000007  0a   001726 2350 00     44  	lda	=h  apnd		"apnd" in A
    000010  aa   007000 6360 00     45  	eaq	apnd_org		origin of appending package in QU
    000011  aa   012206 7020 00     46  	tsx2	ldcom		load the appending package
    000012  0a   001020 7100 00     47  	tra	x2		..
                                    48  
    000013  aa  6 01570 2371 00     49  	ldaq	com|dbr		grab dbr
    000014  aa   007000 7570 00     50  	staq	cmdbr
    000015  aa   000100 6350 00     51  	eaa	dmpbufl		length of appending buffer in AU
    000016  aa   007026 7020 00     52  	tsx2	getinit		init appending package
    000017  0a   000020 7100 00     53  	tra	cycle		and then read commands from cards
                                    54  
    000020                          55  execint:	ttyrequest:
    000020  aa   012202 7020 00     56  cycle:	tsx2	nextline		get next input line
                                    57  
    000021  aa   000000 2210 03     58  again:	ldx1	0,du
    000022  aa   012040 2350 00     59  	lda	arg
    000023  aa   022300 5202 02     60  	rpt	ncoms/2,2,tze
    000024  0a   001140 1150 11     61  	cmpa	comtab,1
    000025  0a   000032 6070 00     62  	ttf	gotoit		if found go
    000026  0a   001033 2340 00     63  	szn	punchsw		should we punch card
    000027  0a   000043 6000 00     64  	tze	peek
    000030  aa   012251 7020 00     65  	tsx2	punch
    000031  0a   000043 7100 00     66  	tra	peek		... else look some more
                                    67  
    000032  aa   777777 2350 11     68  gotoit:	lda	-1,1		rpd left x1, use it to get subr
    000033  aa   000001 3150 07     69  	cana	=o1,dl
    000034  0a   000040 6000 00     70  	tze	ptlb1
    000035  0a   001033 2340 00     71  	szn	punchsw		should we punch card
    000036  0a   000040 6000 00     72  	tze	ptlb1
    000037  aa   012251 7020 00     73  	tsx2	punch
    000040  aa   777777 2350 11     74  ptlb1:	lda	-1,1
    000041  aa   000000 7020 01     75  	tsx2	0,au		may be subroutine
    000042  0a   000020 7100 00     76  	tra	cycle
                                    77  
                                    78  "
                                    79  
                                    80  " Peek commands.
                                    81  " 1. absadr -n-
                                    82  " 2. seg | loc -n-
                                    83  " 3. regnam
                                    84  " 4. bos command offset -n-
                                    85  " 5. regblk offset
                                    86  " 6. VOL <pvname> <addr> <offset> -n-
                                    87  " 7. PHY <subsys> <drive> <addr> <offset> -n-
                                    88  " 8. PART <part> <address> <offset> -n-
                                    89  
    000043  0a   000505 7020 00     90  peek:	tsx2	dotfill		replace dot with old addr
    000044  aa   000000 6200 00     91  	eax0	0		start arg index
    000045  0a   001230 4500 00     92  	stz	setsw		no set
    000046  0a   000052 7100 00     93  	tra	common
                                    94  
    000047  0a   000505 7020 00     95  set:	tsx2	dotfill
    000050  aa   000001 6200 00     96  	eax0	1		skip set
    000051  0a   001230 5540 00     97  	stc1	setsw
                                    98  
    000052  0a   000473 7400 00     99  common:	stx0	dotstart		remember where addr starts
    000053  aa   000000 6210 00    100  	eax1	0
    000054  aa   012040 2350 10    101  	lda	arg,0
    000055  aa   104300 5202 02    102  	rpt	nads/2,2,tze
    000056  0a   001034 1150 11    103  	cmpa	addtab,1
    000057  0a   000275 6070 00    104  	ttf	getadr		if found go do
    000060  0a   000473 2200 00    105  	ldx0	dotstart		restore x0 after repeat
                                   106  "
    000061  aa   012040 2350 10    107  	lda	arg,0		is it to the bos area
    000062  0a   001727 1150 00    108  	cmpa	=h   bos
    000063  0a   000125 6010 00    109  	tnz	notbos
                                   110  
    000064  aa   012041 2350 10    111  	lda	arg+1,0		if so, pickup bos command offset
    000065  aa   012204 7020 00    112  	tsx2	search		look up command
    000066  0a   001162 7100 00    113  	tra	qm		..
                                   114  
    000067  aa   000006 7350 00    115  	als	6
    000070  aa   777777 3750 07    116  	ana	=-1,dl
    000071  aa   012042 1150 10    117  	cmpa	arg+2,0		check bounds
    000072  0a   001207 6000 00    118  	tze	badoff
    000073  0a   001207 6040 00    119  	tmi	badoff
    000074  aa   012042 2350 10    120  	lda	arg+2,0
    000075  0a   001207 6040 00    121  	tmi	badoff
    000076  0a   001227 7550 00    122  	sta	offset
                                   123  
    000077  aa   000006 7350 00    124  	als	12-6		get sector number
    000100  0a   001730 3750 00    125  	ana	=o777777770000
    000101  aa  6 00001 0751 17    126  	ada	com|1,7		and then dev addr
    000102  0a   001231 7510 74    127  	stca	devadd,74
                                   128  
    000103  aa   012042 7270 10    129  	lxl7	arg+2,0		and then get offset in sector
    000104  aa   000077 3670 03    130  	anx7	=o77,du
    000105  aa   007005 7470 00    131  	stx7	fetchout+1
                                   132  
    000106  aa   000003 6200 10    133  	eax0	3,0
                                   134  
    000107  aa   007041 7020 00    135  	tsx2	fetch_use_buffer	set seg 1 to dmpbuf
    000110  0a   000111 7100 00    136  	tra	*+1
                                   137  
    000111  0a   001231 2350 00    138  	lda	devadd		is sector already in buffer
    000112  aa   000001 3360 07    139  	lcq	=1,dl
    000113  aa   007006 1170 00    140  	cmpaq	read_args
    000114  0a   000121 6000 00    141  	tze	bnr
    000115  aa   007006 7570 00    142  	staq	read_args		no, mark new cont
                                   143  
    000116  aa   012234 7020 00    144  	tsx2	rdsec		and read
    000117  aa  1 00000 0111 00    145  	nop	tmp|0
    000120  aa   000000 0110 00    146  	nop			"ignore errors
                                   147  
    000121  0a   000622 7020 00    148  bnr:	tsx2	pcom		do common stuff, print and patch
    000122  aa   007040 7020 00    149  	tsx2	unfetch		write buffer out
    000123  0a   000663 7100 00    150  	tra	werr
                                   151  
    000124  0a   000672 7100 00    152  	tra	mores
                                   153  "
    000125                         154  notbos:				"check if argbos deal
    000125  0a   001731 1150 00    155  	cmpa	=h   dev		check if patching device
    000126  0a   000211 6010 00    156  	tnz	notdev
                                   157  
    000127  aa   000001 6200 10    158  	eax0	1,0		step over "dev"
    000130  aa   012222 7020 00    159  	tsx2	argbos
    000131  0a   001232 0000 00    160  	arg	dvt
    000132  0a   001234 0000 00    161  	arg	pnum
    000133  0a   000211 7100 00    162  	tra	notdev		if error, must not be drum/disk
    000134  0a   001233 4500 00    163  	stz	pdmep		clear map entry ptr
    000135  aa   000000 6270 05    164  	eax7	0,al		set count in X7
    000136  aa   007777 3670 03    165  	anx7	=o7777,du
    000137  aa   000002 1070 03    166  	cmpx7	2,du		a request for a Multics address ?
    000140  0a   000145 6040 00    167  	tmi	notmult		if noyt then no PML
                                   168  
    000141  aa   007044 7020 00    169  	tsx2	pd_check		search for pdmap entry
    000142  0a   001232 0000 00    170  	arg	dvt
    000143  0a   001233 0000 00    171  	arg	pdmep
    000144  0a   000145 7100 00    172  	tra	*+1
                                   173  
    000145  0a   001231 7510 74    174  notmult:	stca	devadd,74		else, save addr
                                   175  
    000146  aa   000006 7350 00    176  	als	6		check offset
    000147  aa   777777 3750 07    177  	ana	=-1,dl
    000150  aa   012040 1150 10    178  	cmpa	arg,0
    000151  0a   001207 6044 00    179  	tmoz	badoff
    000152  0a   001230 2340 00    180  	szn	setsw		test for setting
    000153  0a   000160 6000 00    181  	tze	nomod		no so skip setting modify bit in map
    000154  0a   001233 2350 00    182  	lda	pdmep		pick up map entry ptr
    000155  0a   000160 6000 00    183  	tze	nomod		if zero skip it
    000156  aa   007045 7020 00    184  	tsx2	pd_modify		go set modify bit in map entry
    000157  0a   000160 7100 00    185  	tra	*+1
                                   186  
    000160  aa   012040 2350 10    187  nomod:	lda	arg,0
    000161  0a   001207 6040 00    188  	tmi	badoff
    000162  0a   001227 7550 00    189  	sta	offset		store for printing
    000163  aa   000006 7350 00    190  	als	12-6		add in any small sectors
    000164  0a   001730 3750 00    191  	ana	=o777777770000
    000165  0a   001231 0550 00    192  	asa	devadd
    000166  aa   012040 7270 10    193  	lxl7	arg,0		get small sector offset
    000167  aa   000077 3670 03    194  	anx7	=o77,du
    000170  aa   007005 7470 00    195  	stx7	fetchout+1
                                   196  
    000171  aa   000001 6200 10    197  	eax0	1,0		make arg index right
    000172  aa   007041 7020 00    198  	tsx2	fetch_use_buffer
    000173  0a   000174 7100 00    199  	tra	*+1
                                   200  
    000174  0a   001231 2350 00    201  	lda	devadd		and check if buffer already loaded
    000175  0a   001232 2360 00    202  	ldq	dvt
    000176  aa   007006 1170 00    203  	cmpaq	read_args
    000177  0a   000205 6000 00    204  	tze	dnr
    000200  aa   007006 7570 00    205  	staq	read_args		if not same, mark new cont
    000201  aa   012211 7020 00    206  	tsx2	rdev		read sector
    000202  0a   001232 0000 00    207  	arg	dvt
    000203  aa  1 00000 0001 00    208  	arg	tmp|0
    000204  aa   000000 0110 00    209  	nop
                                   210  
    000205  0a   000622 7020 00    211  dnr:	tsx2	pcom		print and patch
    000206  aa   007040 7020 00    212  	tsx2	unfetch		write out buffer
    000207  0a   000663 7100 00    213  	tra	werr
                                   214  
    000210  0a   000672 7100 00    215  	tra	mores
                                   216  
                                   217  "
    000211  aa   000000 6270 10    218  notdev:	eax7	0,0		collect_segname wants it in x7
    000212  0a   001667 7020 00    219  	tsx2	collect_segname	see if name given
    000213  0a   001732 1150 00    220  	cmpa	=-1		if not,
    000214  0a   001162 6000 00    221  	tze	qm		... i want no part of it
    000215  aa   012040 7550 10    222  	sta	arg,0		save segment number
                                   223  
    000216  aa   012041 2360 10    224  	ldq	arg+1,0		see if segment | offset
    000217  0a   001733 1160 00    225  	cmpq	=h     |"
    000220  0a   000246 6010 00    226  	tnz	absfet		no, must be absolute add.
    000221  aa   000000 2360 07    227  	ldq	0,dl		clear the Q
                                   228  
    000222  aa   012042 0360 10    229  getoff:	adlq	arg+2,0		pick up offset
    000223  aa   777700 3160 03    230  	canq	=o777700,du	check again for fence or alpha
    000224  0a   001207 6010 00    231  	tnz	badoff		...
    000225  0a   001226 7550 00    232  	sta	segno		save for setting
    000226  0a   001227 7560 00    233  	stq	offset		save for printing
                                   234  
    000227  aa   000022 7350 00    235  	als	18		segment number in AU
    000230  aa   007027 7020 00    236  	tsx2	getsdw		get SDW for segment
    000231  0a   001201 7100 00    237  	tra	nowd
    000232  0a   001201 7100 00    238  	tra	nowd
    000233  0a   001224 7570 00    239  	staq	sdw		save SDW
                                   240  
    000234  0a   001227 2360 00    241  	ldq	offset		get offset
    000235  aa   000022 7360 00    242  	qls	18
    000236  aa   007032 7020 00    243  	tsx2	apnd		go get word.
    000237  0a   001224 0000 00    244  	arg	sdw
    000240  0a   001201 7100 00    245  	tra	nowd
                                   246  
    000241  aa   000003 6200 10    247  	eax0	3,0		make argi right
    000242  0a   000622 7020 00    248  	tsx2	pcom
    000243  aa   007033 7020 00    249  	tsx2	unapnd		write out buffer and set modified
    000244  0a   000663 7100 00    250  	tra	werr
                                   251  
    000245  0a   000672 7100 00    252  	tra	mores
                                   253  
                                   254  "
                                   255  
    000246  aa   012040 2350 10    256  absfet:	lda	arg,0		here for new page
    000247  0a   001227 7550 00    257  	sta	offset
    000250  aa   000000 6210 05    258  	eax1	0,al
    000251  aa   000077 3610 03    259  	anx1	=o77,du		get offset in page
    000252  aa   000014 7350 00    260  	als	18-6		Only high 18 bits used.
    000253  aa   007010 7550 00    261  	sta	fetchin		store page number
    000254  aa   007037 7020 00    262  	tsx2	fetch		get page
    000255  0a   001166 000000     263  	zero	outbnds
    000256  aa   007005 7410 00    264  	stx1	fetchout+1
    000257  aa   000001 6200 10    265  	eax0	1,0
    000260  0a   000622 7020 00    266  	tsx2	pcom
    000261  aa   007040 7020 00    267  	tsx2	unfetch
    000262  0a   000663 7100 00    268  	tra	werr
                                   269  
    000263  0a   000672 7100 00    270  	tra	mores
                                   271  
                                   272  
    000264  aa   777777 2220 11    273  prfet:	ldx2	-1,1		get loc'n in common for pr fetch
    000265  aa   001500 1020 03    274  	cmpx2	prs,du		are we pointing to a pr?
    000266  0a   001162 6040 00    275  	tmi	qm		if not,
    000267  aa   001522 1020 03    276  	cmpx2	prs+16+2,du	not a legal request
    000270  0a   001162 6050 00    277  	tpl	qm		..
                                   278  
    000271  aa  6 00000 2371 12    279  	ldaq	com|0,2		get contents of desired pr
    000272  aa   000022 7710 00    280  	arl	18		shift segno to AL
    000273  aa   000022 7720 00    281  	qrl	18		and offset to QL
    000274  0a   000222 7100 00    282  	tra	getoff		now go to add in offset
                                   283  
                                   284  "
    000275  0a   000473 2200 00    285  getadr:	ldx0	dotstart		restore x0 from repeat
    000276  aa   012041 2360 10    286  	ldq	arg+1,0		look at next argument
    000277  0a   001733 1160 00    287  	cmpq	=h     |"		is it up arrow?
    000300  0a   000264 6000 00    288  	tze	prfet		fetch offset from pr contents
                                   289  
    000301  aa   000001 6200 10    290  	eax0	1,0
    000302  0a   000472 7020 00    291  	tsx2	dotend
    000303  aa   777777 2350 11    292  	lda	-1,1		table points to reg, has fmt
    000304  aa   000000 6220 01    293  	eax2	0,au
    000305  aa   000000 6230 05    294  	eax3	0,al
    000306  aa  6 00000 2361 12    295  	ldq	com|0,2		get reg. from comm. region
    000307  0a   001230 2340 00    296  	szn	setsw		type 3 or 5
    000310  0a   000364 6010 00    297  	tnz	set1		peek or patch
    000311  0a   000312 7100 13    298  	tra	*+1,3		dispatch on format
    000312  0a   000331 7100 00    299  	tra	getfull
    000313  0a   000340 7100 00    300  	tra	getlh
    000314  0a   000341 7100 00    301  	tra	getrh
    000315  0a   000331 7100 00    302  	tra	getfull
    000316  0a   000320 7100 00    303  	tra	getinx
    000317  0a   000351 7100 00    304  	tra	getdbl
                                   305  
    000320  aa   000022 7710 00    306  getinx:	arl	18		indexed get. save base in 6
    000321  0a   001242 7550 00    307  	sta	temp
    000322  aa   000001 6200 10    308  	eax0	1,0		make argi right
    000323  0a   000472 7020 00    309  	tsx2	dotend
    000324  aa   012041 2350 00    310  	lda	arg+1		get offset
    000325  aa   000040 1150 07    311  	cmpa	=32,dl		check size
    000326  0a   001207 6030 00    312  	trc	badoff
    000327  0a   001242 0750 00    313  	ada	temp
    000330  aa  6 00000 2361 05    314  	ldq	com|0,al		get word from comm. seg
                                   315  
    000331  0a   001240 7560 00    316  getfull:	stq	old		print full word
    000332  aa   012241 7020 00    317  	tsx2	erpt
    000333  aa  005 136 147 040    318  	acc	'^g ^w'
    000334  aa  136 167 000 000
    000335  aa   012040 0000 00    319  	arg	arg
    000336  0a   001240 0000 00    320  	arg	old
    000337  0a   000020 7100 00    321  	tra	cycle
                                   322  
    000340  aa   000022 7720 00    323  getlh:	qrl	18		print left half
    000341  aa   777777 3760 07    324  getrh:	anq	=-1,dl		or right
    000342  0a   001240 7560 00    325  	stq	old
    000343  aa   012241 7020 00    326  	tsx2	erpt
    000344  aa  005 136 147 040    327  	acc	'^g ^o'
    000345  aa  136 157 000 000
    000346  aa   012040 0000 00    328  	arg	arg
    000347  0a   001240 0000 00    329  	arg	old
    000350  0a   000020 7100 00    330  	tra	cycle
                                   331  
    000351                         332  getdbl:
    000351  0a   001240 7560 00    333  	stq	old
    000352  aa  6 00001 2361 12    334  	ldq	com|1,2
    000353  0a   001241 7560 00    335  	stq	old+1
    000354  aa   012241 7020 00    336  	tsx2	erpt
    000355  aa  010 136 147 040    337  	acc	"^g ^w ^w"
    000356  aa  136 167 040 136
    000357  aa  167 000 000 000
    000360  aa   012040 0000 00    338  	arg	arg
    000361  0a   001240 0000 00    339  	arg	old
    000362  0a   001241 0000 00    340  	arg	old+1
    000363  0a   000020 7100 00    341  	tra	cycle
                                   342  
                                   343  "
    000364                         344  set1:
    000364  aa   012042 2350 00    345  	lda	arg+2		new value
    000365  0a   000366 7100 13    346  	tra	*+1,3		index into format
    000366  0a   000423 7100 00    347  	tra	setfull
    000367  0a   000412 7100 00    348  	tra	setlh
    000370  0a   000417 7100 00    349  	tra	setrh
    000371  0a   000374 7100 00    350  	tra	orin
    000372  0a   000377 7100 00    351  	tra	setinx
    000373  0a   000442 7100 00    352  	tra	setdbl
                                   353  
    000374  0a   001242 7560 00    354  orin:	stq	temp
    000375  0a   001242 2750 00    355  	ora	temp
    000376  0a   000423 7100 00    356  	tra	setfull
                                   357  
    000377  aa   000001 6200 10    358  setinx:	eax0	1,0		change mind about end of addr
    000400  0a   000472 7020 00    359  	tsx2	dotend
    000401  aa   012042 2350 00    360  	lda	arg+2		get offset
    000402  aa   000040 1150 07    361  	cmpa	=32,dl		check offset
    000403  0a   001207 6030 00    362  	trc	badoff
    000404  aa   000022 7350 00    363  	als	18
    000405  aa   777777 0750 11    364  	ada	-1,1		gen proper offset in  common
    000406  aa   000000 6220 01    365  	eax2	0,au
    000407  aa  6 00000 2361 12    366  	ldq	com|0,2		q now has old contents
    000410  aa   012043 2350 00    367  	lda	arg+3		a has new
    000411  0a   000423 7100 00    368  	tra	setfull		do it.
                                   369  
    000412                         370  setlh:
    000412  aa   000000 6260 05    371  	eax6	0,al		patch quantity in l. h.
    000413  0a   001235 7560 00    372  	stq	new
    000414  0a   001235 7460 00    373  	stx6	new
    000415  0a   001235 2350 00    374  	lda	new
    000416  0a   000423 7100 00    375  	tra	setfull
                                   376  
    000417                         377  setrh:
    000417  aa   000000 6260 05    378  	eax6	0,al
    000420  0a   001235 7560 00    379  	stq	new
    000421  0a   001235 4460 00    380  	sxl6	new
    000422  0a   001235 2350 00    381  	lda	new
                                   382  
    000423  aa  6 00000 7551 12    383  setfull:	sta	com|0,2		set new value
    000424  0a   001235 7550 00    384  	sta	new
    000425  0a   001240 7560 00    385  	stq	old
    000426  aa  6 02020 2341 00    386  	szn	com|quietsw
    000427  0a   000020 6010 00    387  	tnz	cycle
    000430  aa   012241 7020 00    388  	tsx2	erpt		print message
    000431  aa  020 136 147 040    389  	acc	'^g from ^w to ^w'
    000432  aa  146 162 157 155
    000433  aa  040 136 167 040
    000434  aa  164 157 040 136
    000435  aa  167 000 000 000
    000436  aa   012041 0000 00    390  	arg	arg+1
    000437  0a   001240 0000 00    391  	arg	old
    000440  0a   001235 0000 00    392  	arg	new
    000441  0a   000020 7100 00    393  	tra	cycle
                                   394  
    000442                         395  setdbl:
    000442  aa   000001 6200 10    396  	eax0	1,0		inc arg offset
    000443  aa  6 00000 7551 12    397  	sta	com|0,2
    000444  0a   001235 7550 00    398  	sta	new
    000445  0a   001240 7560 00    399  	stq	old
    000446  aa  6 00001 2361 12    400  	ldq	com|1,2
    000447  aa   012043 2350 00    401  	lda	arg+3
    000450  aa  6 00001 7551 12    402  	sta	com|1,2
    000451  0a   001236 7550 00    403  	sta	new+1
    000452  0a   001241 7560 00    404  	stq	old+1
    000453  aa  6 02020 2341 00    405  	szn	com|quietsw
    000454  0a   000020 6010 00    406  	tnz	cycle
    000455  aa   012241 7020 00    407  	tsx2	erpt
    000456  aa  026 136 147 040    408  	acc	"^g from ^w ^w to ^w ^w"
    000457  aa  146 162 157 155
    000460  aa  040 136 167 040
    000461  aa  136 167 040 164
    000462  aa  157 040 136 167
    000463  aa  040 136 167 000
    000464  aa   012041 0000 00    409  	arg	arg+1
    000465  0a   001240 0000 00    410  	arg	old
    000466  0a   001241 0000 00    411  	arg	old+1
    000467  0a   001235 0000 00    412  	arg	new
    000470  0a   001236 0000 00    413  	arg	new+1
    000471  0a   000020 7100 00    414  	tra	cycle
                                   415  "
    000472  0a   000501 7400 00    416  dotend:	stx0	dotlast		here to remember args in addr
                                   417  
    000473  0a   000473 6260 00    418  dotstart:	eax6	*		points to start of addr
    000474  aa   000000 6270 00    419  	eax7	0		copy from arg to dotl
    000475  aa   012040 2350 16    420  dotlp:	lda	arg,6
    000476  0a   000603 7550 17    421  	sta	dotl,7
    000477  aa   000001 6260 16    422  	eax6	1,6
    000500  aa   000001 6270 17    423  	eax7	1,7
    000501  0a   000501 1060 03    424  dotlast:	cmpx6	*,du
    000502  0a   000475 6040 00    425  	tmi	dotlp
    000503  0a   000514 7470 00    426  	stx7	dfe
    000504  aa   000000 7100 12    427  	tra	0,2
                                   428  
                                   429  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   430  
    000505  aa   000000 6260 00    431  dotfill:	eax6	0		here to look for .'s 
    000506  aa   000000 6250 00    432  	eax5	0		and replace them with the saved string
                                   433  
    000507  aa   012040 2350 16    434  dfl1:	lda	arg,6
    000510  aa   000001 6260 16    435  	eax6	1,6
    000511  0a   001734 1150 00    436  	cmpa	=h     .		if dot, copy dotl
    000512  0a   000524 6010 00    437  	tnz	dnfnd
                                   438  
    000513  aa   000000 6270 00    439  	eax7	0
    000514  0a   000514 1070 03    440  dfe:	cmpx7	*,du
    000515  0a   000507 6050 00    441  	tpl	dfl1
    000516  0a   000603 2350 17    442  	lda	dotl,7
    000517  0a   000564 7550 15    443  	sta	dotemp,5		into temp list
    000520  aa   000001 6270 17    444  	eax7	1,7
    000521  aa   000001 6250 15    445  	eax5	1,5
    000522  aa   000017 1050 03    446  	cmpx5	arglen,du
    000523  0a   000514 6040 00    447  	tmi	dfe
                                   448  
    000524  0a   000564 7550 15    449  dnfnd:	sta	dotemp,5
    000525  aa   000001 6250 15    450  	eax5	1,5
    000526  aa   000017 1050 03    451  	cmpx5	arglen,du
    000527  0a   000507 6040 00    452  	tmi	dfl1
                                   453  
    000530  aa   000000 6270 00    454  	eax7	0		now copy dotemp into arg
    000531  aa   000000 6260 00    455  	eax6	0		processing + and -
    000532  0a   000564 2360 17    456  dfl2:	ldq	dotemp,7
    000533  0a   000565 2350 17    457  	lda	dotemp+1,7	in case of + or -
    000534  0a   001735 1160 00    458  	cmpq	=h     -
    000535  0a   000540 6010 00    459  	tnz	*+3
    000536  aa   000000 5310 00    460  	neg
    000537  0a   000542 7100 00    461  	tra	*+3		if -, neg and then add
    000540  0a   001736 1160 00    462  	cmpq	=h     +
    000541  0a   000545 6010 00    463  	tnz	dfpl1
    000542  aa   012037 0550 16    464  	asa	arg-1,6		add to previous number
    000543  aa   000002 6270 17    465  	eax7	2,7
    000544  0a   000550 7100 00    466  	tra	dfpl2
    000545  aa   012040 7560 16    467  dfpl1:	stq	arg,6		else, store old
    000546  aa   000001 6260 16    468  	eax6	1,6
    000547  aa   000001 6270 17    469  	eax7	1,7
    000550  aa   000017 1070 03    470  dfpl2:	cmpx7	arglen,du
    000551  0a   000532 6040 00    471  	tmi	dfl2
                                   472  
    000552  aa   000001 3350 07    473  	lca	=1,dl		fill out with -1
    000553  aa   000017 1060 03    474  dffill:	cmpx6	arglen,du
    000554  0a   000560 6050 00    475  	tpl	dfend
    000555  aa   012040 7550 16    476  	sta	arg,6
    000556  aa   000001 6260 16    477  	eax6	1,6
    000557  0a   000553 7100 00    478  	tra	dffill
                                   479  
    000560  aa   000000 1004 00    480  dfend:	mlr	(),()		copy args into darg as well
    000561  aa   012040 000100     481  	desc9a	arg,4*(arglen+1)
    000562  aa   012060 000100     482  	desc9a	darg,4*(arglen+1)
    000563  aa   000000 7100 12    483  	tra	0,2		return to caller
                                   484  
    000564                         485  	bss	dotemp,arglen
    000603                         486  	bss	dotl,arglen
                                   487  
                                   488  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   489  
    000622  0a   000662 7420 00    490  pcom:	stx2	pcx2		here to do actual peek or patch
    000623  0a   000472 7020 00    491  	tsx2	dotend		close out addr list
    000624  0a   001230 2340 00    492  	szn	setsw
    000625  0a   000642 6010 00    493  	tnz	pcoms
                                   494  
    000626  aa   007004 2350 20    495  	lda	fetchout,*	get word
    000627  0a   001240 7550 00    496  	sta	old		to print
    000630  aa   012241 7020 00    497  	tsx2	erpt
    000631  aa  005 136 157 040    498  	acc	'^o ^w'
    000632  aa  136 167 000 000
    000633  0a   001227 0000 00    499  	arg	offset
    000634  0a   001240 0000 00    500  	arg	old
                                   501  
    000635  aa   012040 2350 10    502  	lda	arg,0		look for count of prints
    000636  aa   000001 1750 07    503  	sba	=1,dl
    000637  0a   000020 6044 00    504  	tmoz	cycle
    000640  aa   012040 7550 10    505  	sta	arg,0		reduce count
    000641  0a   000704 7100 00    506  	tra	bmpadd		and tgo to bump addr
                                   507  
    000642  aa   007004 2350 20    508  pcoms:	lda	fetchout,*	get old
    000643  0a   001240 7550 00    509  	sta	old
    000644  aa   012040 2350 10    510  	lda	arg,0		get new
    000645  0a   001235 7550 00    511  	sta	new
    000646  aa   007004 7550 20    512  	sta	fetchout,*
    000647  aa  6 02020 2341 00    513  	szn	com|quietsw	don't print if on
    000650  0a   000662 6010 00    514  	tnz	pcx2
    000651  aa   012241 7020 00    515  	tsx2	erpt
    000652  aa  020 136 157 040    516  	acc	'^o from ^w to ^w'
    000653  aa  146 162 157 155
    000654  aa  040 136 167 040
    000655  aa  164 157 040 136
    000656  aa  167 000 000 000
    000657  0a   001227 0000 00    517  	arg	offset
    000660  0a   001240 0000 00    518  	arg	old
    000661  0a   001235 0000 00    519  	arg	new
                                   520  
    000662  0a   000662 7100 00    521  pcx2:	tra	*
                                   522  
    000663  aa   012241 7020 00    523  werr:	tsx2	erpt		error writing
    000664  aa  021 151 157 040    524  	acc	'io error patching'
    000665  aa  145 162 162 157
    000666  aa  162 040 160 141
    000667  aa  164 143 150 151
    000670  aa  156 147 000 000
    000671  0a   000020 7100 00    525  	tra	cycle
                                   526  
                                   527  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   528  
    000672  aa   012041 2350 10    529  mores:	lda	arg+1,0		if patch, get possible next patch
    000673  0a   001732 1150 00    530  	cmpa	=-1
    000674  0a   000020 6000 00    531  	tze	cycle
                                   532  
    000675  aa   000000 6270 10    533  	eax7	0,0		if any, move down list
    000676  aa   012041 2350 17    534  morel:	lda	arg+1,7
    000677  aa   012040 7550 17    535  	sta	arg,7
    000700  0a   001732 1150 00    536  	cmpa	=-1
    000701  0a   000704 6000 00    537  	tze	bmpadd
    000702  aa   000001 6270 17    538  	eax7	1,7
    000703  0a   000676 7100 00    539  	tra	morel
                                   540  
    000704  0a   000501 2270 00    541  bmpadd:	ldx7	dotlast		move up dot addr
    000705  aa   012037 0540 17    542  	aos	arg-1,7
    000706  0a   000514 2270 00    543  	ldx7	dfe		and addr in list
    000707  0a   000602 0540 17    544  	aos	dotl-1,7
    000710  0a   000021 7100 00    545  	tra	again		and scan line again
                                   546  
                                   547  "
                                   548  
                                   549  " DBR absaddr - bound/stack
                                   550  
    000711                         551  newdbr:	null
    000711  aa   012041 2350 00    552  	lda	arg+1		get dbr val
    000712  aa   777700 3150 03    553  	cana	=o777700,du	check for alpha or too big
    000713  0a   001162 6010 00    554  	tnz	qm		...
                                   555  
    000714  aa   000014 7350 00    556  	als	12		Shift into  DBR.ADDR position.
    000715  aa   000004 2750 07    557  	ora	sdw.df,dl		Turn  ON  F bit.
    000716  aa   007000 7550 00    558  	sta	cmdbr		Store as DBR word 1.
                                   559  
    000717  aa   012042 2350 00    560  	lda	arg+2		Get BOUND, U, & STACK fields.
    000720  0a   001732 1150 00    561  	cmpa	=-1		Check to see if arg given.
    000721  0a   000725 6000 00    562  	tze	oldval		If not DBR word 2 is unchanged.
                                   563  
    000722  0a   001737 3750 00    564  	ana	=o377770207777	Clear all but BOUND, U, & STACK.
    000723  aa   000005 2750 03    565  	ora	=o000005,du	Turn  ON  R & W bits.
    000724  aa   007001 7550 00    566  	sta	cmdbr+1		Store as  DBR word 2.
                                   567  
    000725  aa   007026 7020 00    568  oldval:	tsx2	getinit		reset segnos of sst, etc
    000726  0a   000020 7100 00    569  	tra	cycle
                                   570  
                                   571  
                                   572  " FILL - set new parameters
                                   573  
    000727  0a   001243 7020 00    574  gofill:	tsx2	fill		call fill proc
    000730  0a   001162 7100 00    575  	tra	qm
    000731  0a   000020 7100 00    576  	tra	cycle
                                   577  
                                   578  "
                                   579  
                                   580  " SEGNO - Print Segment Number.
                                   581  
    000732  aa   000001 6270 00    582  psegno:	eax7	1		look at first arg
    000733  0a   001667 7020 00    583  	tsx2	collect_segname	look up segment name
    000734  0a   001732 1150 00    584  	cmpa	=-1		did we find it?
    000735  0a   001162 6000 00    585  	tze	qm		if not, complain
    000736  0a   001226 7550 00    586  	sta	segno		save segment number
                                   587  
    000737  aa   012241 7020 00    588  	tsx2	erpt		print it out
    000740  aa  002 136 157 000    589  	acc	"^o"
    000741  0a   001226 0000 00    590  	arg	segno
    000742  0a   000020 7100 00    591  	tra	cycle		that's all
                                   592  
                                   593  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                   594  
                                   595  " NAME - Print Segment Name.
                                   596  
    000743  0a   000744 7100 00    597  psegnm:	tra	*+1		execute following code once only
                                   598  
    000744  0a   001740 2350 00    599  	lda	=h  sstn		load SST name table filler
    000745  aa   006000 6360 00    600  	eaq	sstn_org		..
    000746  aa   012206 7020 00    601  	tsx2	ldcom		..
    000747  0a   000751 7100 00    602  	tra	*+2		if successful,
    000750  aa   006000 7020 00    603  	tsx2	sstn_org		fill SST name table
                                   604  
    000751  0a   001330 7020 00    605  	tsx2	initsstnt		initialize SST name table primitives
                                   606  
    000752  0a   000754 6270 00    607  	eax7	*+2		avoid initialization again
    000753  0a   000743 7470 00    608  	stx7	psegnm		..
                                   609  
    000754  aa   012041 2350 00    610  	lda	arg+1		get segment number
    000755  aa   000022 7350 00    611  	als	18		in AU
    000756  aa   007027 7020 00    612  	tsx2	getsdw		get SDW for segment
    000757  0a   001162 7100 00    613  	tra	qm		abort if error
    000760  0a   001162 7100 00    614  	tra	qm		..
                                   615  
    000761  0a   001451 7020 00    616  	tsx2	getsstntname	try to get name from SST name table
    000762  aa   012001 020124     617  	desc6a	line,84
    000763  0a   000765 7100 00    618  	tra	*+2		if failure, try the SLT
    000764  0a   000772 7100 00    619  	tra	psegnm1		go print the name
                                   620  
    000765  aa   012041 2350 00    621  	lda	arg+1		get segment number again
    000766  aa   000022 7350 00    622  	als	18		in AU
    000767  aa   007043 7020 00    623  	tsx2	getsltname	get name for SLT
    000770  aa   012001 020124     624  	desc6a	line,84
    000771  0a   001162 7100 00    625  	tra	qm		abort if error
                                   626  
    000772  aa   000003 1244 00    627  psegnm1:	scm	(),(du)		look for first blank
    000773  aa   012001 020124     628  	desc6a	line,84
    000774  aa  200 000 000 000    629  	bci	" "
    000775  0a   001242 0000 00    630  	arg	temp
                                   631  
    000776  0a   001242 2350 00    632  	lda	temp		offset of blank in A
    000777  aa   000124 2360 07    633  	ldq	84,dl		remaining length in Q
    001000  0a   001242 1760 00    634  	sbq	temp		..
                                   635  
    001001  aa   020045 1004 00    636  	mlr	(),(al,rl),fill(20)	blank out rest of string
    001002  0a   001002 020000     637  	desc6a	*,0
    001003  aa   012001 020006     638  	desc6a	line,ql
                                   639  
    001004  aa   012244 7020 00    640  	tsx2	type		print out segment name
    001005  aa   012001 000016     641  	zero	line,14
    001006  0a   000020 7100 00    642  	tra	cycle
                                   643  
                                   644  " 
                                   645  
                                   646  " DUMP - chains to dumper
                                   647  " QUIT - returns to BOS
                                   648  " GO - restarts core image
                                   649  
    001007                         650  godump:
    001007                         651  cntin:
    001007  aa   777776 2350 11    652  	lda	-2,1		get argument
    001010  0a   001012 7100 00    653  	tra	*+2		join common exit code
                                   654  
    001011  aa   000001 3350 07    655  quit:	lca	=1,dl		fence, no chaining
    001012  0a   001033 2340 00    656  	szn	punchsw		if punching
    001013  0a   001020 6000 00    657  	tze	x2
    001014  0a   001242 7550 00    658  	sta	temp
    001015  0a   001214 7020 00    659  	tsx2	space		punch blank cards
    001016  aa   012251 7020 00    660  	tsx2	punch
    001017  0a   001242 2350 00    661  	lda	temp
                                   662  
    001020  0a   001020 6220 00    663  x2:	eax2	*		if so, return
    001021  aa  7 00001 7101 12    664  	tra	mem|1,2
                                   665  
    001022  0a   001033 4500 00    666  punchset:	stz	punchsw		punch on/off
    001023  aa   012041 2350 00    667  	lda	arg+1
    001024  0a   001741 1150 00    668  	cmpa	=h    on
    001025  0a   001030 6010 00    669  	tnz	*+3
    001026  0a   001033 5540 00    670  	stc1	punchsw
    001027  0a   000020 7100 00    671  	tra	cycle
                                   672  
    001030  0a   001214 7020 00    673  	tsx2	space		feed out cards
    001031  aa   012251 7020 00    674  	tsx2	punch
    001032  0a   000020 7100 00    675  	tra	cycle
                                   676  
    001033  aa   000000 000000     677  punchsw:	oct	0
                                   678  "
                                   679  
    001034                         680  addtab:	null
    001034  aa  202 020 202 021    681  	bci	"     a"
    001035  aa   001524 000000     682  	vfd	18/regs+4,18/full_word
    001036  aa  202 020 202 050    683  	bci	"     q"
    001037  aa   001525 000000     684  	vfd	18/regs+5,18/full_word
    001040  aa  202 020 202 025    685  	bci	"     e"
    001041  aa   001526 000000     686  	vfd	18/regs+6,18/full_word
    001042  aa  202 020 206 351    687  	bci	"    tr"
    001043  aa   001527 000000     688  	vfd	18/regs+7,18/full_word
    001044  aa  202 020 206 700    689  	bci	"    x0"
    001045  aa   001520 000001     690  	vfd	18/regs+0,18/left_half
    001046  aa  202 020 206 701    691  	bci	"    x1"
    001047  aa   001520 000002     692  	vfd	18/regs+0,18/right_half
    001050  aa  202 020 206 702    693  	bci	"    x2"
    001051  aa   001521 000001     694  	vfd	18/regs+1,18/left_half
    001052  aa  202 020 206 703    695  	bci	"    x3"
    001053  aa   001521 000002     696  	vfd	18/regs+1,18/right_half
    001054  aa  202 020 206 704    697  	bci	"    x4"
    001055  aa   001522 000001     698  	vfd	18/regs+2,18/left_half
    001056  aa  202 020 206 705    699  	bci	"    x5"
    001057  aa   001522 000002     700  	vfd	18/regs+2,18/right_half
    001060  aa  202 020 206 706    701  	bci	"    x6"
    001061  aa   001523 000001     702  	vfd	18/regs+3,18/left_half
    001062  aa  202 020 206 707    703  	bci	"    x7"
    001063  aa   001523 000002     704  	vfd	18/regs+3,18/right_half
    001064  aa  202 020 475 100    705  	bci	"   pr0"
    001065  aa   001500 000005     706  	vfd	18/prs,18/double_word
    001066  aa  202 020 475 101    707  	bci	"   pr1"
    001067  aa   001502 000005     708  	vfd	18/prs+2,18/double_word
    001070  aa  202 020 475 102    709  	bci	"   pr2"
    001071  aa   001504 000005     710  	vfd	18/prs+4,18/double_word
    001072  aa  202 020 475 103    711  	bci	"   pr3"
    001073  aa   001506 000005     712  	vfd	18/prs+6,18/double_word
    001074  aa  202 020 475 104    713  	bci	"   pr4"
    001075  aa   001510 000005     714  	vfd	18/prs+8,18/double_word
    001076  aa  202 020 475 105    715  	bci	"   pr5"
    001077  aa   001512 000005     716  	vfd	18/prs+10,18/double_word
    001100  aa  202 020 475 106    717  	bci	"   pr6"
    001101  aa   001514 000005     718  	vfd	18/prs+12,18/double_word
    001102  aa  202 020 475 107    719  	bci	"   pr7"
    001103  aa   001516 000005     720  	vfd	18/prs+14,18/double_word
    001104  aa  202 020 202 147    721  	bci	"    ap"
    001105  aa   001500 000005     722  	vfd	18/prs,18/double_word
    001106  aa  202 020 202 122    723  	bci	"    ab"
    001107  aa   001502 000005     724  	vfd	18/prs+2,18/double_word
    001110  aa  202 020 202 247    725  	bci	"    bp"
    001111  aa   001504 000005     726  	vfd	18/prs+4,18/double_word
    001112  aa  202 020 202 222    727  	bci	"    bb"
    001113  aa   001506 000005     728  	vfd	18/prs+6,18/double_word
    001114  aa  202 020 204 347    729  	bci	"    lp"
    001115  aa   001510 000005     730  	vfd	18/prs+8,18/double_word
    001116  aa  202 020 204 322    731  	bci	"    lb"
    001117  aa   001512 000005     732  	vfd	18/prs+10,18/double_word
    001120  aa  202 020 206 247    733  	bci	"    sp"
    001121  aa   001514 000005     734  	vfd	18/prs+12,18/double_word
    001122  aa  202 020 206 222    735  	bci	"    sb"
    001123  aa   001516 000005     736  	vfd	18/prs+14,18/double_word
    001124  aa  202 020 476 251    737  	bci	"   psr"
    001125  aa   001540 000000     738  	vfd	18/scu,18/full_word
    001126  aa  202 020 314 323    739  	bci	"   ilc"
    001127  aa   001544 000000     740  	vfd	18/scu+scu.ilc_word,18/full_word
    001130  aa  202 024 622 251    741  	bci	"  dsbr"		note difference
    001131  aa   001570 000005     742  	vfd	18/dbr,18/double_word
    001132  aa  202 020 442 344    743  	bci	"   mcm"
    001133  aa   001550 000004     744  	vfd	18/mcm,18/indexed
    001134  aa  202 020 314 563    745  	bci	"   int"
    001135  aa   001572 000000     746  	vfd	18/intrpts,18/full_word
    001136  aa  204 651 314 563    747  	bci	" orint"
    001137  aa   001572 000003     748  	vfd	18/intrpts,18/ored
                                   749  
                        000104     750  	equ	nads,*-addtab
                                   751  
                        000000     752  	bool	full_word,0
                        000001     753  	bool	left_half,1
                        000002     754  	bool	right_half,2
                        000003     755  	bool	ored,3
                        000004     756  	bool	indexed,4
                        000005     757  	bool	double_word,5
                                   758  
                                   759  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "/
                                   760  
    001140                         761  comtab:	null
    001140  aa  202 020 202 746    762  	bci	"    go"
    001141  0a   001007 000000     763  	zero	cntin,0
    001142  aa  202 020 622 563    764  	bci	"   set"
    001143  0a   000047 000001     765  	zero	set,1
    001144  aa  202 024 644 447    766  	bci	"  dump"
    001145  0a   001007 000000     767  	zero	godump,0
    001146  aa  202 020 242 251    768  	bci	"   dbr"
    001147  0a   000711 000001     769  	zero	newdbr,1
    001150  aa  202 050 643 163    770  	bci	"  quit"		return to BOS
    001151  0a   001011 000000     771  	zero	quit,0
    001152  aa  202 026 314 343    772  	bci	"  fill"
    001153  0a   000727 000001     773  	zero	gofill,1
    001154  aa  204 764 452 330    774  	bci	" punch"
    001155  0a   001022 000000     775  	zero	punchset,0
    001156  aa  202 045 214 425    776  	bci	"  name"
    001157  0a   000743 000000     777  	zero	psegnm,0
    001160  aa  206 225 274 546    778  	bci	" segno"
    001161  0a   000732 000000     779  	zero	psegno,0
                                   780  
                        000022     781  	equ	ncoms,*-comtab
                                   782  
                                   783  "
                                   784  
                                   785  " error rtnes
                                   786  
    001162  aa   012241 7020 00    787  qm:	tsx2	erpt		type "?"
    001163  aa  002 136 147 000    788  	acc	'^g'
    001164  0a   001742 0000 00    789  	arg	=h!!????
    001165  0a   000020 7100 00    790  	tra	cycle		back to work.
                                   791  
    001166  aa   007010 2350 00    792  outbnds:	lda	fetchin		get bad abs addr
    001167  aa   000014 7710 00    793  	arl	12
    001170  aa   007010 7550 00    794  	sta	fetchin
    001171  aa   012241 7020 00    795  	tsx2	erpt
    001172  aa  020 136 167 040    796  	acc	'^w out of bounds'
    001173  aa  157 165 164 040
    001174  aa  157 146 040 142
    001175  aa  157 165 156 144
    001176  aa  163 000 000 000
    001177  aa   007010 0110 00    797  	nop	fetchin
    001200  0a   000020 7100 00    798  	tra	cycle
                                   799  
    001201  aa   012241 7020 00    800  nowd:	tsx2	erpt
    001202  aa  017 154 157 143    801  	acc	'loc not in core'
    001203  aa  040 156 157 164
    001204  aa  040 151 156 040
    001205  aa  143 157 162 145
    001206  0a   000020 7100 00    802  	tra	cycle
                                   803  
    001207                         804  badoff:
    001207  aa   012241 7020 00    805  	tsx2	erpt
    001210  aa  012 142 141 144    806  	acc	'bad offset'
    001211  aa  040 157 146 146
    001212  aa  163 145 164 000
    001213  0a   000020 7100 00    807  	tra	cycle
                                   808  
                                   809  "
                                   810  
                                   811  "space spacefill line
    001214  0a   001743 2350 00    812  space:	lda	=h      "
    001215  0a   001223 2360 00    813  	ldq	sptally0		init tallyword
    001216  0a   001222 7560 00    814  	stq	sptally
    001217                         815  spaceloop:
    001217                         816  	null
    001217  0a   001222 7550 56    817  	sta	sptally,id	store space word
    001220  0a   001217 6070 00    818  	ttf	spaceloop
    001221  aa   000000 7100 12    819  	tra	0,2		return
    001222  aa   000000 000000     820  sptally:	oct	0
    001223  aa   012001 001600     821  sptally0:	vfd	18/line,12/14
                                   822  
                                   823  "
                                   824  
                                   825  
                                   826  
                                   827  
                                   828  	even
    001224  aa   000000 000000     829  sdw:	oct	0,0
    001225  aa   000000 000000 
    001226  aa   000000 000000     830  segno:	oct	0
    001227  aa   000000 000000     831  offset:	oct	0
    001230  aa   000000 000000     832  setsw:	oct	0
    001231  aa   000000 000001     833  devadd:	zero	0,1
    001232  aa   000000 000000     834  dvt:	oct	0
    001233  aa   000000 000000     835  pdmep:	oct	0
                                   836  
    001234  aa   000000 000000     837  pnum:	oct	0
    001235  aa   000000 000000     838  new:	oct	0,0
    001236  aa   000000 000000 
    001237  aa   000000 000000     839  last:	oct	0
    001240  aa   000000 000000     840  old:	oct	0,0
    001241  aa   000000 000000 
    001242  aa   000000 000000     841  temp:	oct	0
                                   842  
                                   843  
                                   844  " 
                                   845  
                                   846  "	INCLUDE FILES.
                                   847  
                                   848  	include	bos_sdw
                                   2-1  "
                                   2-2  "	BEGIN INCLUDE FILE sdw.incl.alm 02/12/74
                                   2-3  "
                        000014     2-4  	equ	sdw.add_shift,12
                        007000     2-5  	bool	sdw.r1,007000		Ringbrack 1 (DL)
                        000700     2-6  	bool	sdw.r2,000700		Ringbrack 2 (DL)
                        000070     2-7  	bool	sdw.r3,000070		Ringbrack 3 (DL)
                                   2-8  
                        000004     2-9  	bool	sdw.df,000004		Directed fault bit (0 -> fault)
                        000003    2-10  	bool	sdw.fault_code,000003	Number of directed fault
                                  2-11  
                        377770    2-12  	bool	sdw.bound,377770		Bound field (DU)
                        000004    2-13  	bool	sdw.read,000004		Read permission bit (DU)
                        000002    2-14  	bool	sdw.execute,000002		Execute permission bit (DU)
                        000001    2-15  	bool	sdw.write,000001		Write permission bit (DU)
                                  2-16  
                        400000    2-17  	bool	sdw.privileged,400000	Privileged bit (DL)
                        200000    2-18  	bool	sdw.unpaged,200000		Unpaged bit (DL)
                        100000    2-19  	bool	sdw.entry_bound_sw,100000	Entry bound switch (DL)
                        040000    2-20  	bool	sdw.cache,040000		Cache enabled bit (DL)
                        037777    2-21  	bool	sdw.entry_bound,037777	Entry bound (DL)
                                  2-22  
                                  2-23  "
                                  2-24  "	END INCLUDE FILE  sdw.incl.alm
                                  2-25  "
                                   849  	include	bos_ptw
                                   3-1  "
                                   3-2  "	BEGIN INCLUDE FILE  ptw.incl.alm   02/14/75
                                   3-3  "
                        400000     3-4  	bool	ptw.nulled,400000	"DU address is to be deposited
                        740000     3-5  	bool	ptw.add_type,740000	"DL address type, as in add_type.incl.alm
                        020000     3-6  	bool	ptw.first,020000	used by PML to decide if a page should go to PD
                        010000     3-7  	bool	ptw.er,010000	previous request for this page was in error
                        010000     3-8  	bool	ptw.pre_paged,010000 temporary used during post purging and pre paging
                        001000     3-9  	bool	ptw.phu,001000	page has been used bit
                        000400    3-10  	bool	ptw.phm1,00400	page modified, but reported.
                        000200    3-11  	bool	ptw.nypd,00200	page needs pd update
                        000100    3-12  	bool	ptw.phm,000100	page has been modified bit
                        000040    3-13  	bool	ptw.phu1,000040	page has been used in quantum
                        000020    3-14  	bool	ptw.wired,000020	page must remain in core (wired-down)
                        000010    3-15  	bool	ptw.os,000010	page is out-of-service (I/O is going on)
                        000004    3-16  	bool	ptw.df,000004	directed fault exists if this is 0
                        000003    3-17  	bool	ptw.df_no,000003	number of the directed fault
                        000005    3-18  	equ	ptw.usage_bits_shift,5
                                  3-19  
                                  3-20  "
                                  3-21  "	END INCLUDE FILE  ptw.incl.alm
                                  3-22  "
                                   850  	include	mc
                                   4-1  "
                                   4-2  "	BEGIN INCLUDE FILE  mc.incl.alm  6/72 SHW
                                   4-3  "	Modified 8/80 by J. A. Bush for dps8/70M CPU
                                   4-4  "
                                   4-5  
                                   4-6  "	General layout of data items.
                                   4-7  
                        000000     4-8  	equ	mc.prs,0		pointer registers
                        000020     4-9  	equ	mc.regs,16	registers
                        000030    4-10  	equ	mc.scu,24		SCU data
                        000050    4-11  	equ	mc.eis_info,40	pointers and lengths for EIS
                                  4-12  
                                  4-13  "	Temporary storage for software
                                  4-14  
                        000040    4-15  	equ	mc.mask,32	system controller mask at time of fault
                        000042    4-16  	equ	mc.ips_temp,34	temporary storage for IPS info
                        000043    4-17  	equ	mc.errcode,35	error code
                        000044    4-18  	equ	mc.fim_temp,36	temporary to hold fault index and unique index
                        000045    4-19  	equ	mc.fault_reg,37	fault register
                        000046    4-20  	equ	mc.fault_time,38	time of fault
                        000046    4-21  	equ	mc.cpu_type_word,38	CPU type from  rsw (2). overlays part of time word
                        300000    4-22  	bool	mc.cpu_type_mask,300000 DU
                        000046    4-23  	equ	mc.ext_fault_reg,38	ext fault reg for dps8. overlays part of time word
                        077774    4-24  	bool	mc.ext_fault_reg_mask,77774 DU
                        000003    4-25  	equ	mc.cpu_type_shift,3 positions to shift right or left
                                  4-26  
                                  4-27  
                                  4-28  
                                  4-29  "	SCU  DATA
                                  4-30  
                                  4-31  "	WORD  (0)		PROCEDURE POINTER REGISTER
                                  4-32  
                        000030    4-33  	equ	mc.scu.ppr.prr_word,24	Procedure Ring Register
                        000000    4-34  	equ	scu.ppr.prr_word,0
                        700000    4-35  	bool	scu.ppr.prr_mask,700000	DU
                        000041    4-36  	equ	scu.ppr.prr_shift,33
                                  4-37  
                        000030    4-38  	equ	mc.scu.ppr.psr_word,24	Procedure Segment Register
                        000000    4-39  	equ	scu.ppr.psr_word,0
                        077777    4-40  	bool	scu.ppr.psr_mask,077777	DU
                        000022    4-41  	equ	scu.ppr.psr_shift,18
                                  4-42  
                        000030    4-43  	equ	mc.scu.ppr.p_word,24	Procedure Privileged Bit
                        000000    4-44  	equ	scu.ppr.p_word,0
                        400000    4-45  	bool	scu.ppr.p,400000		DL
                                  4-46  
                                  4-47  "	  APPENDING UNIT STATUS
                        000030    4-48  	equ	mc.scu.apu_stat_word,24	APPENDING UNIT STATUS
                        000000    4-49  	equ	scu.apu_stat_word,0		
                                  4-50  
                        200000    4-51  	bool	scu.apu.xsf,200000		DL - Ext Seg Flag - IT mod.
                        100000    4-52  	bool	scu.apu.sdwm,100000		DL - Match in SDW Ass. Mem.
                        040000    4-53  	bool	scu.apu.sd_on,040000	DL - SDW Ass. Mem.  ON
                        020000    4-54  	bool	scu.apu.ptwm,020000		DL - Match in PTW Ass. Mem.
                        010000    4-55  	bool	scu.apu.pt_on,010000	DL - PTW Ass. Mem.  ON
                        004000    4-56  	bool	scu.apu.pi_ap,004000	DL - Instr fetch or Append cycle
                        002000    4-57  	bool	scu.apu.dsptw,002000	DL - Fetch of DSPTW
                        001000    4-58  	bool	scu.apu.sdwnp,001000	DL - Fetch of SDW non-paged
                        000400    4-59  	bool	scu.apu.sdwp,000400		DL - Fetch of SDW paged
                        000200    4-60  	bool	scu.apu.ptw,000200		DL - Fetch of PTW
                        000100    4-61  	bool	scu.apu.ptw2,000100		DL - Fetch of pre-paged  PTW
                        000040    4-62  	bool	scu.apu.fap,000040		DL - Fetch of final address paged
                        000020    4-63  	bool	scu.apu.fanp,000020		DL - Fetch final address non-paged
                        000010    4-64  	bool	scu.apu.fabs,000010		DL - Fetch of final address absolute
                                  4-65  
                        000030    4-66  	equ	mc.scu.fault_cntr_word,24	Num of retrys of EIS instructions.
                        000000    4-67  	equ	scu.fault_cntr_word,0	
                                  4-68  
                        000007    4-69  	bool	scu.fault_cntr_mask,000007
                                  4-70  
                                  4-71  
                                  4-72  "	WORD  (1)		FAULT DATA
                                  4-73  
                        000031    4-74  	equ	mc.scu.fault_data_word,25	FAULT  DATA
                        000001    4-75  	equ	scu.fault_data_word,1
                                  4-76  
                        400000    4-77  	bool	scu.fd.iro,400000		DU - Illegal Ring Order
                        200000    4-78  	bool	scu.fd.oeb,200000		DU - Not In Execute Bracket
                        100000    4-79  	bool	scu.fd.e_off,100000		DU - No  Execute
                        040000    4-80  	bool	scu.fd.orb,040000		DU - Not In Read Bracket
                        020000    4-81  	bool	scu.fd.r_off,020000		DU - No  Read
                        010000    4-82  	bool	scu.fd.owb,010000		DU - Not In Write Bracket
                        004000    4-83  	bool	scu.fd.w_off,004000		DU - No  Write
                        002000    4-84  	bool	scu.fd.no_ga,002000		DU - Not A Gate
                        001000    4-85  	bool	scu.fd.ocb,001000		DU - Not in  Call Bracket
                        000400    4-86  	bool	scu.fd.ocall,000400		DU - Outward Call
                        000200    4-87  	bool	scu.fd.boc,000200		DU - Bad Outward Call
                        000100    4-88  	bool	scu.fd.inret,000100		DU - Inward Return
                        000040    4-89  	bool	scu.fd.crt,000040		DU - Cross  Ring Transfer
                        000020    4-90  	bool	scu.fd.ralr,000020		DU - Ring   Alarm
                        000010    4-91  	bool	scu.fd.am_er,000010		DU - Assoc. Mem. Fault
                        000004    4-92  	bool	scu.fd.oosb,000004		DU - Out Of Bounds
                        000002    4-93  	bool	scu.fd.paru,000002		DU - Parity Upper
                        000001    4-94  	bool	scu.fd.parl,000001		DU - Parity Lower
                                  4-95  
                        400000    4-96  	bool	scu.fd.onc_1,400000		DL - Op Not Complete
                        200000    4-97  	bool	scu.fd.onc_2,200000		DL - Op Not Complete
                                  4-98  
                                  4-99  "  	  GROUP II  FAULT DATA
                        400000   4-100  	bool	scu.fd.isn,400000		DU - Illegal Segment Number
                        200000   4-101  	bool	scu.fd.ioc,200000		DU - Illegal Op Code
                        100000   4-102  	bool	scu.fd.ia_im,100000		DU - Illegal Addr - Modifier
                        040000   4-103  	bool	scu.fd.isp,040000		DU - Illegal Slave Procedure
                        020000   4-104  	bool	scu.fd.ipr,020000		DU - Illegal Procedure
                        010000   4-105  	bool	scu.fd.nea,010000		DU - Non Existent Address
                        004000   4-106  	bool	scu.fd.oobb,004000		DU - Out Of  Bounds
                                 4-107  
                        000031   4-108  	equ	mc.scu.port_stat_word,25	PORT STATUS
                        000001   4-109  	equ	scu.port_stat_word,1
                                 4-110  
                        170000   4-111  	bool	scu.ial_mask,170000		DL - Illegal Action Lines
                        000014   4-112  	equ	scu.ial_shift,12
                                 4-113  
                        007000   4-114  	bool	scu.iac_mask,007000		DL - Illegal Action Channel
                        000011   4-115  	equ	scu.iac_shift,9
                                 4-116  
                        000700   4-117  	bool	scu.con_chan_mask,000700	DL - Connect Channel
                        000006   4-118  	equ	scu.con_chan_shift,6
                                 4-119  
                        000076   4-120  	bool	scu.fi_num_mask,000076	DL - Fault / Interrupt  Number
                        000001   4-121  	equ	scu.fi_num_shift,1
                                 4-122  
                        000001   4-123  	bool	scu.fi_flag_mask,000001	DL - Fault / Interrupt  Flag
                                 4-124  
                                 4-125  
                                 4-126  "	WORD  (2)		TEMPORARY POINTER REGISTER
                                 4-127  
                        000032   4-128  	equ	mc.scu.tpr.trr_word,26	Temporary Ring Register
                        000002   4-129  	equ	scu.tpr.trr_word,2
                        700000   4-130  	bool	scu.tpr.trr_mask,700000	DU
                        000041   4-131  	equ	scu.tpr.trr_shift,33
                                 4-132  
                        000032   4-133  	equ	mc.scu.tpr.tsr_word,26	Temporary Segment Register
                        000002   4-134  	equ	scu.tpr.tsr_word,2
                        077777   4-135  	bool	scu.tpr.tsr_mask,077777	DU
                        000022   4-136  	equ	scu.tpr.tsr_shift,18
                                 4-137  
                        000032   4-138  	equ	mc.scu.cpu_no_word,26	CPU  Number
                        000002   4-139  	equ	scu.cpu_no_word,2
                                 4-140  
                        000700   4-141  	bool	scu.cpu_no_mask,000700	DL
                        000006   4-142  	equ	scu.cpu_shift,6
                                 4-143  
                        000032   4-144  	equ	mc.scu.delta_word,26	Tally Modification DELTA
                        000002   4-145  	equ	scu.delta_word,2
                                 4-146  
                        000077   4-147  	bool	scu.delta_mask,000077	DL
                                 4-148  
                                 4-149  
                                 4-150  "	WORD  (3)		TSR STATUS
                                 4-151  
                        000033   4-152  	equ	mc.scu.tsr_stat_word,27	TSR STATUS for 1,2, and 3
                        000003   4-153  	equ	scu.tsr_stat_word,3		Word Instructions
                                 4-154  
                        777700   4-155  	bool	scu.tsr_stat_mask,777700	DL - All of Status
                        000006   4-156  	equ	scu.tsr_stat_shift,6
                                 4-157  
                        740000   4-158  	bool	scu.tsna_mask,740000	DL - Word 1 Status
                        700000   4-159  	bool	scu.tsna.prn_mask,700000	DL - Word 1 PR num
                        000017   4-160  	equ	scu.tsna.prn_shift,15
                        040000   4-161  	bool	scu.tsna.prv,040000		DL - Word 1 PR valid bit
                                 4-162  
                        036000   4-163  	bool	scu.tsnb_mask,036000	DL - Word 2 Status
                        034000   4-164  	bool	scu.tsnb.prn_mask,034000	DL - Word 2 PR num
                        000013   4-165  	equ	scu.tsnb.prn_shift,11
                        002000   4-166  	bool	scu.tsnb.prv,002000		DL - Word 2 PR valid bit
                                 4-167  
                        000013   4-168  	bool	scu.tsnc_mask,0013		DL - Word 3 Status
                        001600   4-169  	bool 	scu.tsnc.prn_mask,001600	DL - Word 3 PR num
                        000007   4-170  	equ	scu.tsnc.prn_shift,7
                        000100   4-171  	bool	scu.tsnc.prv,000100		DL - Word 3 PR valid bit
                                 4-172  
                                 4-173  
                        000033   4-174  	equ	mc.scu.tpr.tbr_word,27	TPR.TBR  Field
                        000003   4-175  	equ	scu.tpr.tbr_word,3
                                 4-176  
                        000077   4-177  	bool	scu.tpr.tbr_mask,000077	DL
                                 4-178  
                                 4-179  
                                 4-180  "	WORD  (4)		INSTRUCTION COUNTER
                                 4-181  
                        000034   4-182  	equ	mc.scu.ilc_word,28		INSTRUCTION  COUNTER
                        000004   4-183  	equ	scu.ilc_word,4
                        000022   4-184  	equ	scu.ilc_shift,18
                                 4-185  
                        000034   4-186  	equ	mc.scu.indicators_word,28	INDICATOR  REGISTERS
                        000004   4-187  	equ	scu.indicators_word,4
                                 4-188  
                        400000   4-189  	bool	scu.ir.zero,400000		DL - Zero  Indicator
                        200000   4-190  	bool	scu.ir.neg,200000		DL - Negative Indicator
                        100000   4-191  	bool	scu.ir.carry,100000		DL - Carry Indicator
                        040000   4-192  	bool	scu.ir.ovfl,040000		DL - Overflow Indicator
                        020000   4-193  	bool	scu.ir.eovf,020000		DL - Exponent Overflow  Ind
                        010000   4-194  	bool	scu.ir.eufl,010000		DL - Exponent Underflow Ind
                        004000   4-195  	bool	scu.ir.oflm,004000		DL - Overflow Mask Indicator
                        002000   4-196  	bool	scu.ir.tro,002000		DL - Tally Runout  Indicator
                        001000   4-197  	bool	scu.ir.par,001000		DL - Parity  Indicator
                        000400   4-198  	bool	scu.ir.parm,000400		DL - Parity  Mask  Indicator
                        000200   4-199  	bool	scu.ir.bm,000200			DL - Bar  Mode  Indicator
                        000100   4-200  	bool	scu.ir.tru,000100		DL - Truncation Indicator
                        000040   4-201  	bool	scu.ir.mif,000040		DL - Multiword  Indicator
                        000020   4-202  	bool	scu.ir.abs,000020		DL - Absolute   Indicator
                                 4-203  
                                 4-204  
                                 4-205  "	WORD  (5)		COMPUTED ADDRESS
                                 4-206  
                        000035   4-207  	equ	mc.scu.ca_word,29		COMPUTED  ADDRESS
                        000005   4-208  	equ	scu.ca_word,5
                        000022   4-209  	equ	scu.ca_shift,18
                                 4-210  
                        000035   4-211  	equ	mc.scu.cu_stat_word,29	CONTROL UNIT STATUS
                        000005   4-212  	equ	scu.cu_stat_word,5
                                 4-213  
                        400000   4-214  	bool	scu.cu.rf,400000		DL - Repeat First
                                 4-215  "					On First Cycle of Repeat Inst.
                        200000   4-216  	bool	scu.cu.rpt,200000		DL - Repeat Instruction
                        100000   4-217  	bool	scu.cu.rd,100000		DL - Repeat Double Instr.
                        040000   4-218  	bool	scu.cu.rl,040000		DL - Repeat Link   Instr.
                                 4-219  
                        020000   4-220  	bool	scu.cu.pot,020000		DL - IT Modification
                        010000   4-221  	bool	scu.cu.pon,010000		DL - Return Type Instruction
                                 4-222  
                        004000   4-223  	bool	scu.cu.xde,004000		DL - XDE from Even Location
                        002000   4-224  	bool	scu.cu.xdo,002000		DL - XDE from Odd  Location
                                 4-225  
                        001000   4-226  	bool	scu.cu.poa,001000		DL - Operand Preparation
                        000400   4-227  	bool	scu.cu.rfi,000400		DL - Tells CPU to refetch instruction
                                 4-228  "	This Bit  Not Used    (000200)
                        000100   4-229  	bool	scu.cu.if,000100		DL - Fault occurred during instruction fetch
                                 4-230  
                        000035   4-231  	equ	mc.scu.cpu_tag_word,29	Computed Tag Field
                        000005   4-232  	equ	scu.cpu_tag_word,5
                                 4-233  
                        000007   4-234  	bool	scu.cpu_tag_mask,000007	DL
                                 4-235  
                                 4-236  
                                 4-237  "	WORDS  (6,7)	INSTRUCTIONS
                                 4-238  
                        000036   4-239  	equ	scu.even_inst_word,30	Even Instruction
                                 4-240  
                        000037   4-241  	equ	scu.odd_inst_word,31	Odd  Instruction
                                 4-242  
                                 4-243  
                                 4-244  "	END INCLUDE FILE incl.alm
                                   851  	include	fill
                                   5-1  "
                                   5-2  " Begin include file ...... fill.incl.alm
                                   5-3  " FILL cell1 cont1 cell2 cont2 ...
                                   5-4  
    001243  0a   001254 7400 00    5-5  fill:	stx0	fillx0		save XR's
    001244  0a   001255 7420 00    5-6  	stx2	fillx2		..
                                   5-7  
    001245  aa   000001 6200 00    5-8  	eax0	1		here to set dumper cells
    001246  0a   001250 7100 00    5-9  	tra	*+2
                                  5-10  
    001247  aa   000002 6200 10   5-11  filllp:	eax0	2,0		go to next arg
    001250  aa   012040 2350 10   5-12  	lda	arg,0
    001251  0a   001732 1150 00   5-13  	cmpa	=-1		check for end
    001252  0a   001262 6010 00   5-14  	tnz	fillll
    001253  aa   007026 7020 00   5-15  	tsx2	getinit		if done, fill sdws for new segnos
                                  5-16  
    001254  0a   001254 6200 00   5-17  fillx0:	eax0	*		restore XR's
    001255  0a   001255 6220 00   5-18  fillx2:	eax2	*		..
    001256  aa   000001 7100 12   5-19  	tra	1,2		return
                                  5-20  
    001257  0a   001254 2200 00   5-21  fillerr:	ldx0	fillx0
    001260  0a   001255 2220 00   5-22  	ldx2	fillx2
    001261  aa   000000 7100 12   5-23  	tra	0,2		take error return
                                  5-24  
    001262                        5-25  fillll:
    001262  aa   000012 6270 00   5-26  	eax7	nfilll-2		search table
    001263  0a   001314 1150 17   5-27  	cmpa	filllst,7
    001264  0a   001270 6000 00   5-28  	tze	fillfno
    001265  aa   777776 6270 17   5-29  	eax7	-2,7
    001266  0a   001263 6050 00   5-30  	tpl	*-3
    001267  0a   001257 7100 00   5-31  	tra	fillerr		if not found, error
                                  5-32  
    001270  aa   012041 2350 10   5-33  fillfno:	lda	arg+1,0		get value
    001271  0a   001732 1150 00   5-34  	cmpa	=-1
    001272  0a   001257 6000 00   5-35  	tze	fillerr
    001273  0a   001315 2360 17   5-36  	ldq	filllst+1,7
    001274  aa   000000 7100 06   5-37  	tra	0,ql
                                  5-38  
    001275  aa   000000 6260 05   5-39  fillrh:	eax6	0,al
    001276  aa   000000 4460 02   5-40  	sxl6	0,qu
    001277  0a   001247 7100 00   5-41  	tra	filllp
                                  5-42  
    001300  aa   000000 7550 02   5-43  fillwd:	sta	0,qu
    001301  0a   001247 7100 00   5-44  	tra	filllp
                                  5-45  
    001302  aa   000000 6260 05   5-46  filllh:	eax6	0,al		store in upper
    001303  aa   000000 7460 02   5-47  	stx6	0,qu
    001304  0a   001247 7100 00   5-48  	tra	filllp
                                  5-49  
    001305                        5-50  fillonoff:
    001305  aa   777777 3750 07   5-51  	ana	=-1,dl
    001306  aa   204645 1150 07   5-52  	cmpa	=o204645,dl	if on
    001307  0a   001312 6000 00   5-53  	tze	*+3
    001310  aa   000000 4500 02   5-54  	stz	0,qu
    001311  0a   001247 7100 00   5-55  	tra	filllp
    001312  aa   000000 5540 02   5-56  	stc1	0,qu		set non zero
    001313  0a   001247 7100 00   5-57  	tra	filllp
                                  5-58  
    001314                        5-59  filllst:
    001314  aa  302 324 225 143   5-60  	bci	"hcdbrl"
    001315  a0   007002 001300    5-61  	zero	hcdbr,fillwd
    001316  aa  302 324 225 164   5-62  	bci	"hcdbru"
    001317  a0   007003 001300    5-63  	zero	hcdbr+1,fillwd
    001320  aa  624 363 622 527   5-64  	bci	"sltseg"
    001321  a0   007011 001302    5-65  	zero	sltseg,filllh
    001322  aa  202 020 224 662   5-66  	bci	"   bos"	dump BOS in core
    001323  a0   007012 001305    5-67  	zero	bosdmp,fillonoff
    001324  aa  202 047 212 725   5-68  	bci	"  page"
    001325  a0   007013 001305    5-69  	zero	pagesw,fillonoff
    001326  aa  202 020 474 443   5-70  	bci	"   pml"
    001327  a0   007014 001305    5-71  	zero	pmlsw,fillonoff
                        000014    5-72  	equ	nfilll,*-filllst
                                  5-73  
                                  5-74  " End of include file ...... fill.incl.alm
                                  5-75  
                                   852  " 
                                   853  	include	bos_page_info
                                   6-1  "	BEGIN INCLUDE FILE page_info.incl.alm  --  6/72
                                   6-2  "
                        037777     6-3  	bool	address_compare_mask,037777
                        000012     6-4  	equ	page_power,10		2**10 = size of page
                        000001     6-5  	bool	df1,000001		directed fault 1 on page fault
                        100000     6-6  	bool	int,100000
                        000020     6-7  	bool	pri,000020
                        000004     6-8  	bool	no_post,000004
                        000003     6-9  	equ	sst,3
                        000003    6-10  	equ	pdm,sst
                        000003    6-11  	equ	ast,sst
                        000002    6-12  	equ	ptw,2
                        000003    6-13  	equ	cme,sst
                        000000    6-14  	equ	fault_entry,0
                        000001    6-15  	equ	read_entry,1
                        000002    6-16  	equ	write_entry,2
                        000003    6-17  	equ	pre_page_entry,3
                        000004    6-18  	equ	post_purge_entry,4
                        000005    6-19  	equ	pd_flush_entry,5
                        000006    6-20  	equ	evict_entry,6
                        000007    6-21  	equ	abs_wire_entry,7
                        000010    6-22  	equ	cleanup_entry,8
                        000010    6-23  	bool	working_set,000010
                        000002    6-24  	bool	post_purge_bit,000002
                        000001    6-25  	bool	moved_bit,000001
                        000004    6-26  	bool	used_bit_off,000004
                        010101    6-27  	bool	char_desc,010101
                        000014    6-28  	equ	ast_size,12
                        000004    6-29  	equ	pdsize,4
                        000012    6-30  	equ	pd_free_required,10
                        000036    6-31  	equ	pd_write_limit,30
                        000036    6-32  	equ	pd_max_rws,30
                        000017    6-33  	equ	pre_seek_limit,15
                                  6-34  
                                  6-35  "
                                  6-36  "	Shifts for converting cmep offsets,
                                  6-37  "	ptw/sdw addresses, and absaddrs.
                                  6-38  
                        000014    6-39  	equ	coreadd_to_desc.ls,12	coreadd var to sdw/ptw
                        000006    6-40  	equ	coreadd_to_desc_lower.rl,6	for putting together ptws
                        000014    6-41  	equ	desc_to_coreadd.rl,12	ptw/sdw to coreadd
                                  6-42  
                        000012    6-43  	equ	cmep_to_coreadd.rl,10	.cmep to coreadd
                        000012    6-44  	equ	coreadd_to_cmep.ls,10	coreadd to .cmep
                                  6-45  
                        000002    6-46  	equ	cmep_to_desc.ls,2		.cmep to ptw/sdw
                        000002    6-47  	equ	desc_to_cmep.rl,2		ptw/sdw to .cmep
                                  6-48  
                                  6-49  "
                                  6-50  "	Various AST masks which are not
                                  6-51  "	expressible in standard notation
                                  6-52  "
                        777000    6-53  	bool	aste.csl_mask_inner,777000
                        777000    6-54  	bool	aste.records_mask_inner,777000
                                  6-55  
                                  6-56  "
                                  6-57  "	END INCLUDE FILE  page_info.incl.alm
                                   854  	include	sst
                                   7-1  
                                   7-2  
                                   7-3       "BEGIN INCLUDE FILE sst.incl.alm
                                   7-4  
                                   7-5  
                                   7-6  	"Created 11/11/82  1426.0 est Thu by convert_include_file,
                                   7-7  	"   Version of 07/15/82  2104.3 est Thu.
                                   7-8  
                                   7-9  	"Made from >udd>Multics>Bongiovanni>htd>dm_dir>sst.incl.pl1,
                                  7-10  	"   modified 11/11/82  1425.9 est Thu
                                  7-11  
                                  7-12  "
                                  7-13  "	Structure sst
                                  7-14  "
                        001000    7-15  	equ	sst_size,512
                                  7-16  
                                  7-17  
                        000000    7-18  	equ	sst.space,0
                        000010    7-19  	equ	sst.pre_page_time,8		" DOUBLE
                        000012    7-20  	equ	sst.post_purge_time,10	" DOUBLE
                        000014    7-21  	equ	sst.post_in_core,12
                        000015    7-22  	equ	sst.thrashing,13
                        000016    7-23  	equ	sst.npfs_misses,14
                        000017    7-24  	equ	sst.salv,15
                        000020    7-25  	equ	sst.ptl,16
                        000021    7-26  	equ	sst.astl,17
                        000022    7-27  	equ	sst.astl_event,18
                                  7-28  
                        000023    7-29  	equ	sst.astl_notify_requested_word,19
                        400000    7-30  	bool	sst.astl_notify_requested,400000 " DU
                                  7-31  
                        000024    7-32  	equ	sst.nused,20
                        000025    7-33  	equ	sst.ptwbase,21
                        000026    7-34  	equ	sst.tfreep,22
                        000030    7-35  	equ	sst.astap,24
                        000032    7-36  	equ	sst.bulk_pvtx,26
                        000033    7-37  	equ	sst.ptl_wait_ct,27
                        000034    7-38  	equ	sst.astsize,28
                        000035    7-39  	equ	sst.cmesize,29
                        000036    7-40  	equ	sst.root_astep,30
                        000040    7-41  	equ	sst.pts,32
                        000044    7-42  	equ	sst.level,36		" LEVEL 2
                                  7-43  
                        000044    7-44  	equ	sst.ausedp,36		" UPPER
                        000044    7-45  	equ	sst.no_aste,36		" LOWER
                                  7-46  
                        000050    7-47  	equ	sst.atempp,40		" UPPER
                        000050    7-48  	equ	sst.atempp1,40		" LOWER
                                  7-49  
                        000051    7-50  	equ	sst.dm_enabled_word,41
                        400000    7-51  	bool	sst.dm_enabled,400000	" DU
                                  7-52  
                        000052    7-53  	equ	sst.ainitp,42		" UPPER
                        000052    7-54  	equ	sst.ainitp1,42		" LOWER
                                  7-55  
                        000053    7-56  	equ	sst.strsize,43
                        000054    7-57  	equ	sst.cmp,44
                                  7-58  
                        000056    7-59  	equ	sst.usedp,46		" UPPER
                                  7-60  
                        000057    7-61  	equ	sst.wtct,47
                                  7-62  
                        000060    7-63  	equ	sst.startp,48		" UPPER
                                  7-64  
                        000061    7-65  	equ	sst.removep,49		" UPPER
                                  7-66  
                        000062    7-67  	equ	sst.double_write,50
                        000063    7-68  	equ	sst.temp_w_event,51
                        000064    7-69  	equ	sst.root_pvtx,52
                                  7-70  
                        000065    7-71  	equ	sst.ptw_first_word,53
                        400000    7-72  	bool	sst.ptw_first,400000	" DU
                                  7-73  
                        000066    7-74  	equ	sst.nolock_word,54
                        400000    7-75  	bool	sst.nolock,400000		" DU
                                  7-76  
                        000067    7-77  	equ	sst.x_fsdctp,55		" UPPER
                                  7-78  
                        000070    7-79  	equ	sst.fc_skips_pinned,56
                        000071    7-80  	equ	sst.cl_skips_pinned,57
                        000072    7-81  	equ	sst.ast_ht_ptr,58
                        000074    7-82  	equ	sst.ast_ht_n_buckets,60
                        000075    7-83  	equ	sst.ast_ht_uid_mask,61
                        000076    7-84  	equ	sst.meter_ast_locking,62
                        000077    7-85  	equ	sst.checksum_filemap,63
                        000100    7-86  	equ	sst.page_read_errors,64
                        000101    7-87  	equ	sst.page_write_errors,65
                        000102    7-88  	equ	sst.rws_read_errors,66
                        000103    7-89  	equ	sst.rws_write_errors,67
                        000104    7-90  	equ	sst.cycle_pv_allocation,68
                        000105    7-91  	equ	sst.n_trailers,69
                        000106    7-92  	equ	sst.synch_activations,70
                        000107    7-93  	equ	sst.synch_skips,71
                        000110    7-94  	equ	sst.lock_waits,72
                        000111    7-95  	equ	sst.total_locks_set,73
                        000112    7-96  	equ	sst.pdir_page_faults,74
                        000113    7-97  	equ	sst.level_1_page_faults,75
                        000114    7-98  	equ	sst.dir_page_faults,76
                        000115    7-99  	equ	sst.ring_0_page_faults,77
                        000116   7-100  	equ	sst.rqover,78
                        000117   7-101  	equ	sst.pc_io_waits,79
                        000120   7-102  	equ	sst.steps,80
                        000121   7-103  	equ	sst.needc,81
                        000122   7-104  	equ	sst.ceiling,82
                        000123   7-105  	equ	sst.ctwait,83
                        000124   7-106  	equ	sst.wired,84
                        000125   7-107  	equ	sst.laps,85
                        000126   7-108  	equ	sst.skipw,86
                        000127   7-109  	equ	sst.skipu,87
                        000130   7-110  	equ	sst.skipm,88
                        000131   7-111  	equ	sst.skipos,89
                        000132   7-112  	equ	sst.skipspd,90
                        000133   7-113  	equ	sst.aused,91
                        000134   7-114  	equ	sst.damaged_ct,92
                        000135   7-115  	equ	sst.deact_count,93
                        000136   7-116  	equ	sst.demand_deact_attempts,94
                        000137   7-117  	equ	sst.demand_deactivations,95
                        000140   7-118  	equ	sst.reads,96
                        000150   7-119  	equ	sst.writes,104
                        000160   7-120  	equ	sst.short_pf_count,112
                        000161   7-121  	equ	sst.loop_locks,113
                        000162   7-122  	equ	sst.loop_lock_time,114	" DOUBLE
                        000164   7-123  	equ	sst.cpu_sf_time,116		" DOUBLE
                        000166   7-124  	equ	sst.total_sf_pf,118
                        000167   7-125  	equ	sst.total_sf,119
                        000170   7-126  	equ	sst.pre_page_size,120
                        000171   7-127  	equ	sst.post_list_size,121
                        000172   7-128  	equ	sst.post_purgings,122
                        000173   7-129  	equ	sst.post_purge_calls,123
                        000174   7-130  	equ	sst.pre_page_calls,124
                        000175   7-131  	equ	sst.pre_page_list_size,125
                        000176   7-132  	equ	sst.pre_page_misses,126
                        000177   7-133  	equ	sst.pre_pagings,127
                        000200   7-134  	equ	sst.wire_proc_data,128	" DOUBLE
                        000220   7-135  	equ	sst.abs_wired_count,144
                        000221   7-136  	equ	sst.system_type,145
                        000222   7-137  	equ	sst.wired_copies,146
                        000223   7-138  	equ	sst.recopies,147
                        000224   7-139  	equ	sst.first_core_block,148
                        000225   7-140  	equ	sst.last_core_block,149
                        000226   7-141  	equ	sst.fw_retries,150
                        000227   7-142  	equ	sst.pvhtp,151
                        000230   7-143  	equ	sst.askipsize,152
                        000234   7-144  	equ	sst.aneedsize,156
                        000240   7-145  	equ	sst.stepsa,160
                        000241   7-146  	equ	sst.askipsehs,161
                        000242   7-147  	equ	sst.asearches,162
                        000243   7-148  	equ	sst.askipslevel,163
                        000244   7-149  	equ	sst.askipsinit,164
                        000245   7-150  	equ	sst.acost,165
                        000246   7-151  	equ	sst.askipslock,166
                        000247   7-152  	equ	sst.askipdius,167
                        000250   7-153  	equ	sst.alaps,168
                        000251   7-154  	equ	sst.updates,169
                        000252   7-155  	equ	sst.setfaults_all,170
                        000253   7-156  	equ	sst.setfaults_acc,171
                        000254   7-157  	equ	sst.total_bf,172
                        000255   7-158  	equ	sst.total_bf_pf,173
                        000256   7-159  	equ	sst.cpu_bf_time,174		" DOUBLE
                        000260   7-160  	equ	sst.asteps,176
                        000264   7-161  	equ	sst.ast_locked_at_time,180	" DOUBLE
                        000266   7-162  	equ	sst.ast_locked_total_time,182	" DOUBLE
                        000270   7-163  	equ	sst.ast_lock_wait_time,184	" DOUBLE
                        000272   7-164  	equ	sst.ast_locking_count,186
                        000273   7-165  	equ	sst.cleanup_count,187
                        000274   7-166  	equ	sst.cleanups_with_any_rws,188
                        000275   7-167  	equ	sst.cleanup_rws_count,189
                        000276   7-168  	equ	sst.cleanup_real_time,190	" DOUBLE
                        000300   7-169  	equ	sst.tree_count,192
                        000400   7-170  	equ	sst.pp_meters,256
                                 7-171  
                        000500   7-172  	equ	sst.wusedp,320		" UPPER
                                 7-173  
                        000501   7-174  	equ	sst.write_hunts,321
                        000502   7-175  	equ	sst.claim_skip_cme,322
                        000503   7-176  	equ	sst.claim_skip_free,323
                        000504   7-177  	equ	sst.claim_notmod,324
                        000505   7-178  	equ	sst.claim_passed_used,325
                        000506   7-179  	equ	sst.claim_skip_ptw,326
                        000507   7-180  	equ	sst.claim_writes,327
                        000510   7-181  	equ	sst.claim_steps,328
                        000511   7-182  	equ	sst.rws_reads_os,329
                        000512   7-183  	equ	sst.pd_updates,330
                        000513   7-184  	equ	sst.pre_seeks_failed,331
                        000514   7-185  	equ	sst.pd_desperation_steps,332
                        000515   7-186  	equ	sst.pd_desperations,333
                        000516   7-187  	equ	sst.skips_nypd,334
                                 7-188  
                        000517   7-189  	equ	sst.pd_writeahead_word,335
                        400000   7-190  	bool	sst.pd_writeahead,400000	" DU
                                 7-191  
                        000520   7-192  	equ	sst.pd_desperations_not_mod,336
                        000521   7-193  	equ	sst.resurrections,337
                        000522   7-194  	equ	sst.volmap_seg_page_faults,338
                        000523   7-195  	equ	sst.oopv,339
                        000524   7-196  	equ	sst.pdflush_replaces,340
                        000525   7-197  	equ	sst.pcrsst_statptr,341
                        000526   7-198  	equ	sst.pd_resurrections,342
                        000527   7-199  	equ	sst.dblw_resurrections,343
                        000530   7-200  	equ	sst.sgm_time,344		" DOUBLE
                        000532   7-201  	equ	sst.sgm_pf,346
                        000533   7-202  	equ	sst.bad_sgms,347
                        000534   7-203  	equ	sst.sgm_sgft,348
                        000535   7-204  	equ	sst.good_sgms,349
                        000536   7-205  	equ	sst.claim_runs,350
                        000537   7-206  	equ	sst.activations,351
                        000540   7-207  	equ	sst.dir_activations,352
                        000541   7-208  	equ	sst.hedge_updatevs,353
                        000542   7-209  	equ	sst.hedge_writes,354
                        000543   7-210  	equ	sst.evict_recover_data,355	" LEVEL 2
                                 7-211  
                        000543   7-212  	equ	sst.evict_ptp,355		" UPPER
                        000543   7-213  	equ	sst.evict_phmbit,355	" LOWER
                                 7-214  
                        000544   7-215  	equ	sst.force_swrites,356
                        000545   7-216  	equ	sst.force_pwrites,357
                        000546   7-217  	equ	sst.fw_none,358
                        000547   7-218  	equ	sst.force_updatevs,359
                        000550   7-219  	equ	sst.pf_pd_loop_time,360	" DOUBLE
                        000552   7-220  	equ	sst.pf_unlock_ptl_time,362	" DOUBLE
                        000554   7-221  	equ	sst.pf_pd_loop_meterings,364
                        000555   7-222  	equ	sst.pf_unlock_ptl_meterings,365
                        000556   7-223  	equ	sst.makeknown_activations,366
                        000557   7-224  	equ	sst.backup_activations,367
                        000560   7-225  	equ	sst.metering_flags,368	" LEVEL 2
                                 7-226  
                        400000   7-227  	bool	sst.activate_activated,400000	" DU
                                 7-228  
                        000561   7-229  	equ	sst.seg_fault_calls,369
                        000562   7-230  	equ	sst.stk_truncate_should_didnt,370
                        000563   7-231  	equ	sst.stk_truncate_should_did,371
                        000564   7-232  	equ	sst.stk_truncate_shouldnt_didnt,372
                        000565   7-233  	equ	sst.stk_truncate_shouldnt_did,373
                        000566   7-234  	equ	sst.stk_pages_truncated,374
                        000567   7-235  	equ	sst.stk_pages_truncated_in_core,375
                        000600   7-236  	equ	sst.pdmap,384
                        000602   7-237  	equ	sst.pdhtp,386
                        000604   7-238  	equ	sst.pd_id,388
                        000605   7-239  	equ	sst.pdsize,389
                        000606   7-240  	equ	sst.pdme_no,390
                                 7-241  
                        000607   7-242  	equ	sst.pdusedp,391		" UPPER
                                 7-243  
                        000610   7-244  	equ	sst.pd_first,392
                        000611   7-245  	equ	sst.pd_map_addr,393
                        000612   7-246  	equ	sst.nrecs_pdmap,394
                        000613   7-247  	equ	sst.pd_free,395
                        000614   7-248  	equ	sst.pd_using,396
                        000615   7-249  	equ	sst.pd_wtct,397
                        000616   7-250  	equ	sst.pd_writes,398
                        000617   7-251  	equ	sst.pd_ceiling,399
                        000620   7-252  	equ	sst.pd_steps,400
                        000621   7-253  	equ	sst.pd_skips_incore,401
                        000622   7-254  	equ	sst.pd_skips_rws,402
                        000623   7-255  	equ	sst.pd_needed,403
                        000624   7-256  	equ	sst.mod_during_write,404
                        000625   7-257  	equ	sst.pd_write_aborts,405
                        000626   7-258  	equ	sst.pd_rws_active,406
                        000627   7-259  	equ	sst.pd_no_free,407
                        000630   7-260  	equ	sst.pd_read_truncates,408
                        000631   7-261  	equ	sst.pd_write_truncates,409
                        000632   7-262  	equ	sst.pd_htsize,410
                                 7-263  
                        000633   7-264  	equ	sst.pd_hash_mask,411	" UPPER
                                 7-265  
                        000634   7-266  	equ	sst.pdmap_astep,412
                        000636   7-267  	equ	sst.zero_pages,414
                        000637   7-268  	equ	sst.pd_zero_pages,415
                        000640   7-269  	equ	sst.trace_sw,416		" LEVEL 2
                                 7-270  
                        000010   7-271  	bool	sst.pc_trace_pf,000010	" DL
                        000004   7-272  	bool	sst.tty_trace,000004	" DL
                        000002   7-273  	bool	sst.pc_trace,000002		" DL
                        000001   7-274  	bool	sst.sc_trace,000001		" DL
                                 7-275  
                        000641   7-276  	equ	sst.new_pages,417
                        000642   7-277  	equ	sst.rws_time_temp,418	" DOUBLE
                        000644   7-278  	equ	sst.rws_time_start,420	" DOUBLE
                        000646   7-279  	equ	sst.rws_time_done,422	" DOUBLE
                        000650   7-280  	equ	sst.pd_time_counts,424
                        000654   7-281  	equ	sst.pd_time_values,428	" DOUBLE
                        000664   7-282  	equ	sst.pd_no_free_gtpd,436
                        000665   7-283  	equ	sst.pd_page_faults,437
                        000666   7-284  	equ	sst.pd_no_free_first,438
                        000667   7-285  	equ	sst.update_index,439
                        000670   7-286  	equ	sst.last_update,440		" DOUBLE
                        000672   7-287  	equ	sst.count_pdmes,442
                        000673   7-288  	equ	sst.bucket_overflow,443
                        000674   7-289  	equ	sst.buckets,444
                                 7-290  
                        000774   7-291  	equ	sst.ast_track_word,508
                        400000   7-292  	bool	sst.ast_track,400000	" DU
                                 7-293  
                        000775   7-294  	equ	sst.dirlock_writebehind,509
                        000776   7-295  	equ	sst.write_limit,510
                                 7-296  
                                 7-297       "END INCLUDE FILE sst.incl.alm
                                   855  	include	aste
                                   8-1  
                                   8-2  
                                   8-3       "BEGIN INCLUDE FILE aste.incl.alm
                                   8-4  
                                   8-5  
                                   8-6  	"Created 10/26/82  2145.6 edt Tue by convert_include_file,
                                   8-7  	"   Version of 07/15/82  2204.3 edt Thu.
                                   8-8  
                                   8-9  	"Made from >udd>Multics>Bongiovanni>htd>cksum>aste.incl.pl1,
                                  8-10  	"   modified 10/26/82  2145.5 edt Tue
                                  8-11  
                                  8-12  "
                                  8-13  "	Structure aste
                                  8-14  "
                        000014    8-15  	equ	aste_size,12
                                  8-16  
                        000000    8-17  	equ	aste.fp,0			" UPPER
                        000000    8-18  	equ	aste.bp,0			" LOWER
                                  8-19  
                        000001    8-20  	equ	aste.infl,1		" UPPER
                        000001    8-21  	equ	aste.infp,1		" LOWER
                                  8-22  
                        000002    8-23  	equ	aste.strp,2		" UPPER
                        000002    8-24  	equ	aste.par_astep,2		" LOWER
                                  8-25  
                        000003    8-26  	equ	aste.uid,3
                                  8-27  
                        000004    8-28  	equ	aste.msl_word,4
                        000033    8-29  	equ	aste.msl_shift,27
                        000777    8-30  	bool	aste.msl_mask,000777
                        000004    8-31  	equ	aste.pvtx_word,4
                        000022    8-32  	equ	aste.pvtx_shift,18
                        000777    8-33  	bool	aste.pvtx_mask,000777
                        000004    8-34  	equ	aste.vtocx,4		" LOWER
                                  8-35  
                        000005    8-36  	equ	aste.usedf_word,5
                        400000    8-37  	bool	aste.usedf,400000		" DU
                        000005    8-38  	equ	aste.init_word,5
                        200000    8-39  	bool	aste.init,200000		" DU
                        000005    8-40  	equ	aste.gtus_word,5
                        100000    8-41  	bool	aste.gtus,100000		" DU
                        000005    8-42  	equ	aste.gtms_word,5
                        040000    8-43  	bool	aste.gtms,040000		" DU
                        000005    8-44  	equ	aste.hc_word,5
                        020000    8-45  	bool	aste.hc,020000		" DU
                        000005    8-46  	equ	aste.hc_sdw_word,5
                        010000    8-47  	bool	aste.hc_sdw,010000		" DU
                        000005    8-48  	equ	aste.any_access_on_word,5
                        004000    8-49  	bool	aste.any_access_on,004000	" DU
                        000005    8-50  	equ	aste.write_access_on_word,5
                        002000    8-51  	bool	aste.write_access_on,002000	" DU
                        000005    8-52  	equ	aste.inhibit_cache_word,5
                        001000    8-53  	bool	aste.inhibit_cache,001000	" DU
                        000005    8-54  	equ	aste.explicit_deact_ok_word,5
                        000400    8-55  	bool	aste.explicit_deact_ok,000400	" DU
                        000005    8-56  	equ	aste.deact_error_word,5
                        000200    8-57  	bool	aste.deact_error,000200	" DU
                        000005    8-58  	equ	aste.hc_part_word,5
                        000100    8-59  	bool	aste.hc_part,000100		" DU
                        000005    8-60  	equ	aste.fm_damaged_word,5
                        000040    8-61  	bool	aste.fm_damaged,000040	" DU
                        000005    8-62  	equ	aste.dius_word,5
                        000002    8-63  	bool	aste.dius,000002		" DU
                        000005    8-64  	equ	aste.nid_word,5
                        000001    8-65  	bool	aste.nid,000001		" DU
                        000005    8-66  	equ	aste.dmpr_pad_word,5
                        400000    8-67  	bool	aste.dmpr_pad,400000	" DL
                        000005    8-68  	equ	aste.ehs_word,5
                        200000    8-69  	bool	aste.ehs,200000		" DL
                        000005    8-70  	equ	aste.nqsw_word,5
                        100000    8-71  	bool	aste.nqsw,100000		" DL
                        000005    8-72  	equ	aste.dirsw_word,5
                        040000    8-73  	bool	aste.dirsw,040000		" DL
                        000005    8-74  	equ	aste.master_dir_word,5
                        020000    8-75  	bool	aste.master_dir,020000	" DL
                        000005    8-76  	equ	aste.volmap_seg_word,5
                        010000    8-77  	bool	aste.volmap_seg,010000	" DL
                        000005    8-78  	equ	aste.tqsw_word,5
                        004000    8-79  	bool	aste.tqsw,004000		" DL
                                  8-80  
                        000006    8-81  	equ	aste.dtu,6
                        000007    8-82  	equ	aste.dtm,7
                                  8-83  
                        000010    8-84  	equ	aste.quota,8		" UPPER
                                  8-85  
                        000011    8-86  	equ	aste.used,9		" UPPER
                                  8-87  
                        000012    8-88  	equ	aste.csl_word,10
                        000033    8-89  	equ	aste.csl_shift,27
                        000777    8-90  	bool	aste.csl_mask,000777
                        000012    8-91  	equ	aste.fmchanged_word,10
                        000400    8-92  	bool	aste.fmchanged,000400	" DU
                        000012    8-93  	equ	aste.fms_word,10
                        000200    8-94  	bool	aste.fms,000200		" DU
                        000012    8-95  	equ	aste.npfs_word,10
                        000100    8-96  	bool	aste.npfs,000100		" DU
                        000012    8-97  	equ	aste.gtpd_word,10
                        000040    8-98  	bool	aste.gtpd,000040		" DU
                        000012    8-99  	equ	aste.dnzp_word,10
                        000020   8-100  	bool	aste.dnzp,000020		" DU
                        000012   8-101  	equ	aste.per_process_word,10
                        000010   8-102  	bool	aste.per_process,000010	" DU
                        000012   8-103  	equ	aste.ddnp_word,10
                        000004   8-104  	bool	aste.ddnp,000004		" DU
                        000012   8-105  	equ	aste.records_word,10
                        000011   8-106  	equ	aste.records_shift,9
                        000777   8-107  	bool	aste.records_mask,000777
                        000012   8-108  	equ	aste.np_word,10
                        000000   8-109  	equ	aste.np_shift,0
                        000777   8-110  	bool	aste.np_mask,000777
                                 8-111  
                        000013   8-112  	equ	aste.ht_fp,11		" UPPER
                        000013   8-113  	equ	aste.fmchanged1_word,11
                        400000   8-114  	bool	aste.fmchanged1,400000	" DL
                        000013   8-115  	equ	aste.damaged_word,11
                        200000   8-116  	bool	aste.damaged,200000		" DL
                        000013   8-117  	equ	aste.pack_ovfl_word,11
                        100000   8-118  	bool	aste.pack_ovfl,100000	" DL
                        000013   8-119  	equ	aste.synchronized_word,11
                        040000   8-120  	bool	aste.synchronized,040000	" DL
                        000013   8-121  	equ	aste.ptsi_word,11
                        000006   8-122  	equ	aste.ptsi_shift,6
                        000003   8-123  	bool	aste.ptsi_mask,000003
                        000013   8-124  	equ	aste.marker_word,11
                        000000   8-125  	equ	aste.marker_shift,0
                        000077   8-126  	bool	aste.marker_mask,000077
                                 8-127  
                                 8-128  "
                                 8-129  "	Structure aste_part
                                 8-130  "
                        000014   8-131  	equ	aste_part_size,12
                                 8-132  
                                 8-133  
                        000000   8-134  	equ	aste_part.one,0
                        000001   8-135  	equ	aste_part.two,1		" DOUBLE
                                 8-136  
                        000013   8-137  	equ	aste_part.three_word,11
                        000000   8-138  	equ	aste_part.three_shift,0
                        000377   8-139  	bool	aste_part.three_mask,000377
                                 8-140  
                                 8-141  "
                                 8-142  "	Structure seg_aste
                                 8-143  "
                        000014   8-144  	equ	seg_aste_size,12
                                 8-145  
                                 8-146  
                        000010   8-147  	equ	seg_aste.usage,8
                                 8-148  
                                 8-149       "END INCLUDE FILE aste.incl.alm
                                   856  	include	sstnt
                                   9-1  
                                   9-2  
                                   9-3       " BEGIN INCLUDE FILE sstnt.incl.alm
                                   9-4  
                        000000     9-5  	equ	sstnt.valid_word,0
                        400000     9-6  	bool	sstnt.valid,400000	"DU
                                   9-7  
                        000001     9-8  	equ	sstnt.multics_or_bos,1
                                   9-9  
                        000002    9-10  	equ	sstnt.fill_time,2
                                  9-11  
                        000010    9-12  	equ	sstnt.ast_sizes,8
                                  9-13  
                        000014    9-14  	equ	sstnt.ast_name_offsets,12
                                  9-15  
                        000020    9-16  	equ	sstnt.ast_offsets,16
                                  9-17  
                        000030    9-18  	equ	sstnt.names,24
                                  9-19  
                        000011    9-20  	equ	sstnt_name_length,9
                                  9-21  
                                  9-22       "END INCLUDE FILE sstnt.incl.alm
                                   857  	include	bos_sstnt_man
                                  10-1  " 
                                  10-2  " Begin include file ...... bos_sstnt_man.incl.alm
                                  10-3  
                                  10-4  "
                                  10-5  "	SST Name Table management for BOS.
                                  10-6  "
                                  10-7  "	04/17/75 by Bernard Greenberg, with help from Richard G. Bratt.
                                  10-8  "
                                  10-9  
                                 10-10  "
                                 10-11  "	tsx2	initsstnt		to set up package
                                 10-12  "
                                 10-13  
    001330                       10-14  initsstnt:
    001330  0a   001370 7420 00  10-15  	stx2	ssni.x2		save exit
                                 10-16  
    001331  0a   001413 4500 00  10-17  	stz	ssn.valid		assume table not valid
                                 10-18  
    001332  aa   007016 2370 00  10-19  	ldaq	sstsdw		get SDW for SST segment
    001333  0a   001730 3750 00  10-20  	ana	=o777777770000	set up base and bounds
    001334  0a   001410 7550 00  10-21  	sta	ssn.sstbase
    001335  aa   000025 7720 00  10-22  	qrl	36-15		isolate bounds
    001336  aa   000001 0360 07  10-23  	adlq	1,dl
    001337  aa   000020 7360 00  10-24  	qls	4+12		16 to 1
    001340  0a   001411 7560 00  10-25  	stq	ssn.sstbase+1	relocate top of SST
                                 10-26  
    001341  aa   007042 7020 00  10-27  	tsx2	sltsearch		look up name table
    001342  0a   001415 0000 00  10-28  	arg	ssn.sstntname
    001343  0a   001371 7100 00  10-29  	tra	ssni.fail
    001344  aa   007027 7020 00  10-30  	tsx2	getsdw
    001345  0a   001371 7100 00  10-31  	tra	ssni.fail
    001346  0a   001371 7100 00  10-32  	tra	ssni.fail
    001347  0a   001406 7570 00  10-33  	staq	ssn.sstnt_sdw
                                 10-34  
    001350  aa   000036 6360 00  10-35  	eaq	sst.root_astep	get root astep
    001351  aa   007032 7020 00  10-36  	tsx2	apnd
    001352  aa   007016 0000 00  10-37  	arg	sstsdw
    001353  0a   001371 7100 00  10-38  	tra	ssni.fail
    001354  aa   007004 2370 20  10-39  	ldaq	fetchout,*
    001355  0a   001412 7560 00  10-40  	stq	ssn.root_astep	save root astep
                                 10-41  
                                 10-42  
    001356  aa   000000 6360 00  10-43  	eaq	0		get sstnt header
    001357  aa   007034 7020 00  10-44  	tsx2	get
    001360  0a   001406 0000 00  10-45  	arg	ssn.sstnt_sdw
    001361  0a   001421 000030   10-46  	zero	ssn.sstnt,sstnt.names	buffer for this
    001362  0a   001371 7100 00  10-47  	tra	ssni.fail
                                 10-48  
    001363  0a   001421 2350 00  10-49  	lda	ssn.sstnt+sstnt.valid_word
    001364  0a   001376 6000 00  10-50  	tze	sstnt_not_valid
    001365  0a   001413 7550 00  10-51  	sta	ssn.valid
                                 10-52  
    001366  aa   012256 6350 51  10-53  	eaa	asgetab,i		get addr of ASCII to GEBCD table
    001367  0a   001540 7550 00  10-54  	sta	gpn.tab		3rd desc of MVT cnnot be ID
                                 10-55  
    001370  aa   000000 7100 00  10-56  ssni.x2:	tra	*-*
                                 10-57  
                                 10-58  "
                                 10-59  "	Error exits.
                                 10-60  "
                                 10-61  
    001371                       10-62  ssni.fail:
    001371  aa   012241 7020 00  10-63  	tsx2	erpt
    001372  aa  010 156 157 040  10-64  	acc	"no sstnt"
    001373  aa  163 163 164 156
    001374  aa  164 000 000 000
    001375  0a   001370 7100 00  10-65  	tra	ssni.x2
                                 10-66  
    001376                       10-67  sstnt_not_valid:
    001376  aa   012241 7020 00  10-68  	tsx2	erpt
    001377  aa  020 163 163 164  10-69  	acc	"sstnt not filled"
    001400  aa  156 164 040 156
    001401  aa  157 164 040 146
    001402  aa  151 154 154 145
    001403  aa  144 000 000 000
    001404  0a   001370 7100 00  10-70  	tra	ssni.x2
                                 10-71  
                                 10-72  "
                                 10-73  "	Global constants for sstnt management
                                 10-74  "
    001405  aa   000000 0110 03  10-75  	even
    001406                       10-76  ssn.sstnt_sdw:
    001406                       10-77  	bss	,2		sdw for sst name table
    001410                       10-78  ssn.sstbase:
    001410  aa   000000 000000   10-79  	dec	0		base of SST
    001411  aa   000000 000000   10-80  	dec	0		top of SST
    001412                       10-81  ssn.root_astep:
    001412  aa   000000 0000 00  10-82  	arg	0		astep of root, upper
    001413                       10-83  ssn.valid:
    001413  aa   000000 000000   10-84  	dec	0		n/z if table valid
    001414  aa  160 000 000 000  10-85  ssn.gthan:bci	">00000"		a greater than
    001415                       10-86  ssn.sstntname:
    001415  aa   000000 000012   10-87  	dec	10
    001416  aa  163 163 164 137  10-88  	aci	"sst_names_  "
    001417  aa  156 141 155 145
    001420  aa  163 137 040 040
    001421                       10-89  ssn.sstnt:
    001421                       10-90  	bss	,sstnt.names	buffer for name table header
                                 10-91  
                                 10-92  "
                                 10-93  
                                 10-94  "
                                 10-95  "	ldaq	sdw
                                 10-96  "	tsx2	getsstntname	to get pathname put where
                                 10-97  "	desc6a	where(offset),length	describes.
                                 10-98  "	tra	not_reasonable_for_pathname
                                 10-99  "
                                10-100  
    001451                      10-101  getsstntname:
    001451  0a   001576 7420 00 10-102  	stx2	gpn.x2		save return
    001452  0a   001413 2340 00 10-103  	szn	ssn.valid		valid sstnt?
    001453  0a   001576 6000 00 10-104  	tze	gpn.fail
    001454  aa   200000 3160 07 10-105  	canq	sdw.unpaged,dl	is it paged?
    001455  0a   001576 6010 00 10-106  	tnz	gpn.not_pn	no path here
    001456  0a   001730 3750 00 10-107  	ana	=o777777770000	isolate address
    001457  0a   001410 1350 00 10-108  	sbla	ssn.sstbase
    001460  0a   001576 6040 00 10-109  	tmi	gpn.not_pn
    001461  0a   001411 1150 00 10-110  	cmpa	ssn.sstbase+1
    001462  0a   001576 6050 00 10-111  	tpl	gpn.not_pn
    001463  aa   000006 7350 00 10-112  	als	6
    001464  aa   777764 6360 01 10-113  	eaq	-ast_size,au	get astep in qu
    001465  0a   001600 7560 00 10-114  	stq	gpn.astep
                                10-115  
    001466  aa   007034 7020 00 10-116  	tsx2	get		get the aste
    001467  aa   007016 0000 00 10-117  	arg	sstsdw
    001470  0a   001601 000014  10-118  	zero	gpn.aste,ast_size
    001471  0a   001576 7100 00 10-119  	tra	gpn.not_pn
                                10-120  
    001472  0a   001576 2220 00 10-121  	ldx2	gpn.x2		restore X2
    001473  aa   000000 2360 12 10-122  	ldq	0,2		get descriptor
    001474  0a   001574 7560 00 10-123  	stq	gpn.desc		set it
    001475  aa   007777 3760 07 10-124  	anq	=o7777,dl		extract length from descriptor
    001476  0a   001616 7560 00 10-125  	stq	gpn.offset	and set initial offset into buffer
    001477  0a   001615 4500 00 10-126  	stz	gpn.curlen	no chars yet.
                                10-127  
    001500  0a   001603 7270 00 10-128  	lxl7	gpn.aste+aste.par_astep	is there a parent?
    001501  0a   001506 6010 00 10-129  	tnz	gpn.yes_pn
                                10-130  
    001502  0a   001600 2360 00 10-131  	ldq	gpn.astep		is this the root?
    001503  0a   001412 1160 00 10-132  	cmpq	ssn.root_astep
    001504  0a   001543 6000 00 10-133  	tze	gpn.isroot
    001505  0a   001576 7100 00 10-134  	tra	gpn.not_pn	if not, error
                                10-135  
    001506                      10-136  gpn.yes_pn:
                                10-137  
                                10-138  " 
                                10-139  
                                10-140  "
                                10-141  "	This segment is a legitimate descendent of the root.
                                10-142  "	Cons together pathname.
                                10-143  
    001506                      10-144  gpn.loop:
    001506  0a   001600 2360 00 10-145  	ldq	gpn.astep		get astep
    001507  aa   000022 7720 00 10-146  	qrl	18
    001510  aa   000003 6270 00 10-147  	eax7	3		figure out ptsi by pool
    001511  0a   001441 1160 17 10-148  gpn.1:	cmpq	ssn.sstnt+sstnt.ast_offsets,7
    001512  0a   001516 6050 00 10-149  	tpl	gpn.got_ptsi
    001513  aa   777777 6270 17 10-150  	eax7	-1,7
    001514  0a   001576 6040 00 10-151  	tmi	gpn.fail		messed up if minus
    001515  0a   001511 7100 00 10-152  	tra	gpn.1		smaller pool
                                10-153  
    001516                      10-154  gpn.got_ptsi:
    001516  0a   001441 1360 17 10-155  	sblq	ssn.sstnt+sstnt.ast_offsets,7
    001517  aa   000000 2350 07 10-156  	lda	0,dl		set up for divide
    001520  0a   001431 5060 17 10-157  	div	ssn.sstnt+sstnt.ast_sizes,7 figure out # in pool
    001521  0a   001435 0360 17 10-158  	adlq	ssn.sstnt+sstnt.ast_name_offsets,7 figure out name #
    001522  aa   000011 4020 07 10-159  	mpy	sstnt_name_length,dl
    001523  aa   000030 6360 06 10-160  	eaq	sstnt.names,ql	address name in table
                                10-161  
    001524  aa   007034 7020 00 10-162  	tsx2	get		fetch the name
    001525  0a   001406 0000 00 10-163  	arg	ssn.sstnt_sdw
    001526  0a   001656 000011  10-164  	zero	gpn.namebuf,sstnt_name_length
    001527  0a   001576 7100 00 10-165  	tra	gpn.fail
                                10-166  
                                10-167  "
                                10-168  "	See if new entry name will fit.
                                10-169  "
    001530  0a   001656 3360 00 10-170  	lcq	gpn.namebuf	is there anything there?
    001531  0a   001576 6000 00 10-171  	tze	gpn.fail		no, fail on whole name
    001532  0a   001616 0360 00 10-172  	adlq	gpn.offset	subtract from current length
    001533  0a   001543 6044 00 10-173  	tmoz	gpn.isroot	too big, ignore entry name
                                10-174  
    001534  0a   001656 2350 00 10-175  	lda	gpn.namebuf	get length
    001535  aa   000046 1604 40 10-176  	mvt	(rl),(ql,rl)	translate to GEBCD while at it
    001536  0a   001657 000005  10-177  	desc9a	gpn.namebuf+1,al	source is buffer
    001537  0a   001622 020005  10-178  	desc6a	gpn.linebuf,al	destination is line image
    001540  aa   000000 0000 00 10-179  gpn.tab:	arg	*-*
    001541  0a   001615 0550 00 10-180  	asa	gpn.curlen	move char count
    001542  0a   001616 7560 00 10-181  	stq	gpn.offset	save new offset
                                10-182  
    001543                      10-183  gpn.isroot:
    001543  0a   001616 2360 00 10-184  	ldq	gpn.offset	offset in QL
    001544  aa   000001 1760 07 10-185  	sbq	1,dl		step back 1 for ">"
    001545  0a   001567 6040 00 10-186  	tmi	gpn.done		exit if no room for ">"
    001546  aa   000006 1004 00 10-187  	mlr	(),(ql)
    001547  0a   001414 020001  10-188  	desc6a	ssn.gthan,1
    001550  0a   001622 020001  10-189  	desc6a	gpn.linebuf,1
    001551  0a   001615 0540 00 10-190  	aos	gpn.curlen
    001552  0a   001616 7560 00 10-191  	stq	gpn.offset	save offset
                                10-192  
                                10-193  " 
                                10-194  "
                                10-195  "	If there is a parent, cons on his name
                                10-196  "
                                10-197  
    001553  0a   001600 2360 00 10-198  	ldq	gpn.astep		get astep of this seg
    001554  aa   000002 6360 02 10-199  	eaq	aste.par_astep,qu		point to parent word
    001555  aa   007032 7020 00 10-200  	tsx2	apnd		get the rep
    001556  aa   007016 0000 00 10-201  	arg	sstsdw
    001557  0a   001576 7100 00 10-202  	tra	gpn.fail
                                10-203  
    001560  aa   007004 2350 20 10-204  	lda	fetchout,*
    001561  aa   000022 7350 00 10-205  	als	18		move to upper
    001562  0a   001567 6000 00 10-206  	tze	gpn.done		exit if was root
    001563  0a   001412 1150 00 10-207  	cmpa	ssn.root_astep	father the root?
    001564  0a   001567 6000 00 10-208  	tze	gpn.done
    001565  0a   001600 7550 00 10-209  	sta	gpn.astep
    001566  0a   001506 7100 00 10-210  	tra	gpn.loop		do the father
                                10-211  
                                10-212  
    001567                      10-213  gpn.done:
    001567  0a   001576 2220 00 10-214  	ldx2	gpn.x2
    001570  0a   001616 2360 00 10-215  	ldq	gpn.offset	get offset of pathname
    001571  0a   001615 2350 00 10-216  	lda	gpn.curlen	get current lngth
    001572  aa   020000 1004 46 10-217  	mlr	(ql,rl),(),fill(020)	whoosh
    001573  0a   001622 020005  10-218  	desc6a	gpn.linebuf,al
    001574  aa   000000 0000 00 10-219  gpn.desc: arg	0
                                10-220  
    001575  aa   000002 7100 12 10-221  	tra	2,2
                                10-222  
                                10-223  "
                                10-224  "	Failure routines
                                10-225  "
                                10-226  
    001576                      10-227  gpn.x2:
    001576                      10-228  gpn.fail:
    001576                      10-229  gpn.not_pn:
    001576  aa   000000 6220 00 10-230  	eax2	*-*
    001577  aa   000001 7100 12 10-231  	tra	1,2
                                10-232  
                                10-233  "
                                10-234  "	Work areas
                                10-235  "
    001600  aa   000000 0000 00 10-236  gpn.astep:arg	0		astep of segment
    001601                      10-237  gpn.aste:	bss	,ast_size		ast image
    001615                      10-238  gpn.curlen:
    001615  aa   000000 0000 00 10-239  	arg	0		chars in linebuf
    001616                      10-240  gpn.offset:
    001616  aa   000000 0000 00 10-241  	arg	0		offset in linebuf
    001617  aa   000000 0110 03 10-242  	even
    001620                      10-243  gpn.linebufp:
    001620  aa   077777 000043  10-244  	its	-1,1		pointer to last stored char
    001621  aa   000001 000000 
    001622                      10-245  	bss	gpn.linebuf,168/6
    001656                      10-246  gpn.namebuf:
    001656                      10-247  	bss	,sstnt_name_length
                                10-248  
                                10-249  " End of include file ...... bos_sstnt_man.incl.alm
                                10-250  
                                   858  	include	segname
                                  11-1  "
                                  11-2  " Begin include file ...... segname.incl.alm
                                  11-3  "	Created 8/75 by B. S. Greenberg
                                  11-4  
                                  11-5  "	eax7	argno
                                  11-6  "	tsx2	collect_segname		to get long_name seg
                                  11-7  "	sta	segno
                                  11-8  
                                  11-9  
    001667                       11-10  collect_segname:
    001667  0a   001713 7420 00  11-11  	stx2	colseg.exit	save X2
                                 11-12  
    001670  aa   012040 2350 17  11-13  	lda	arg,7		get arg
    001671  aa   777700 3150 03  11-14  	cana	=o777700,du	is it number?
    001672  aa   000000 6000 12  11-15  	tze	0,2		return the number
                                 11-16  
    001673  0a   001732 1150 00  11-17  	cmpa	=-1		no answer?
    001674  aa   000000 6000 12  11-18  	tze	0,2		thats an equally good answer
                                 11-19  
    001675  aa   012254 2350 00  11-20  	lda	geastab		set up descriptor
    001676  0a   001702 7550 00  11-21  	sta	colseg.descr	..
                                 11-22  
    001677  aa   020000 1604 20  11-23  	mvt	(id),(),fill(020)	copy the name into buffer
    001700  aa   012100 0000 17  11-24  	arg	earg,7		descr for string
    001701  0a   001716 000040   11-25  	desc9a	colseg.buf+1,32	char buffer
    001702  0a   001702 0000 00  11-26  colseg.descr: arg	*		translate into ASCII
                                 11-27  
    001703  aa   012100 2350 17  11-28  	lda	earg,7		get length
    001704  0a   001715 7510 03  11-29  	stca	colseg.buf,03	..
                                 11-30  
    001705  aa   007042 7020 00  11-31  	tsx2	sltsearch		look up name
    001706  0a   001715 0000 00  11-32  	arg	colseg.buf
    001707  0a   001712 7100 00  11-33  	tra	colseg.nf		not found
                                 11-34  
    001710  aa   000022 7710 00  11-35  	arl	18		lower it
    001711  0a   001713 7100 00  11-36  	tra	colseg.exit
                                 11-37  
    001712  aa   000001 3350 07  11-38  colseg.nf:lca	1,dl		error return
    001713                       11-39  colseg.exit:
    001713  aa   000000 6220 00  11-40  	eax2	*-*
    001714  aa   000000 7100 12  11-41  	tra	0,2
                                 11-42  
    001715                       11-43  colseg.buf:
    001715  aa   000000 000000   11-44  	oct	0
    001716                       11-45  	bss	,8
                                 11-46  
                                 11-47  " End of include file ...... segname.incl.alm
                                 11-48  
                                   859  	include	apnd_equ
                                  12-1  " 
                                  12-2  " Begin include file ...... apnd_equ.incl.alm
                                  12-3  " Created 11/19/72 by N. I. Morris
                                  12-4  " modified 5/19/75 by Noel I.  Morris
                                  12-5  " Modified 8/79 by R.J.C. Kissel to use expanded BOS.
                                  12-6  " Modidied 7/82 by Sherman D. Sprague to add cmpsdw.
                                  12-7  
                        007000    12-8  	bool	apnd_org,7000
                                  12-9  
                        007000   12-10  	equ	cmdbr,apnd_org+0		DBR of process being examined
                        007002   12-11  	equ	hcdbr,apnd_org+2		hardcore DBR value
                        007004   12-12  	equ	fetchout,apnd_org+4		used to reference block fetched by fetch
                        007006   12-13  	equ	read_args,apnd_org+6	last block fetched by fetch
                        007010   12-14  	equ	fetchin,apnd_org+8		absadr of word to be fetched
                        007011   12-15  	equ	sltseg,apnd_org+9		SLT segment number
                        007012   12-16  	equ	bosdmp,apnd_org+10		non-zero if BOS itself is to be fetched
                        007013   12-17  	equ	pagesw,apnd_org+11		non-zero if paging to be simulated
                        007014   12-18  	equ	pmlsw,apnd_org+12		non-zero if PML to be simulated
                        007016   12-19  	equ	sstsdw,apnd_org+14		SDW of SST segment
                        007020   12-20  	equ	cmpsdw,apnd_org+16		SDW of CMP segment
                        007022   12-21  	equ	castap,apnd_org+18		offset of first ASTE in SST segment
                                 12-22  
                        007026   12-23  	equ	getinit,apnd_org+22		initialize appending package
                        007027   12-24  	equ	getsdw,apnd_org+23		fetch an SDW
                        007030   12-25  	equ	getwd,apnd_org+24		fetch a word
                        007031   12-26  	equ	grab,apnd_org+25		fetch from a list
                        007032   12-27  	equ	apnd,apnd_org+26		appending simulation
                        007033   12-28  	equ	unapnd,apnd_org+27		to modify a segment
                        007034   12-29  	equ	get,apnd_org+28		get a block of data
                        007035   12-30  	equ	put,apnd_org+29		write a block of data
                        007036   12-31  	equ	comp,apnd_org+30		compare a block of data
                        007037   12-32  	equ	fetch,apnd_org+31		to fetch core
                        007040   12-33  	equ	unfetch,apnd_org+32		to rewrite fetched buffer
                        007041   12-34  	equ	fetch_use_buffer,apnd_org+33	to set SDW to appending buffer
                        007042   12-35  	equ	sltsearch,apnd_org+34	get segment # given name
                        007043   12-36  	equ	getsltname,apnd_org+35	get name of segment
                        007044   12-37  	equ	pd_check,apnd_org+36	check for page on paging device
                        007045   12-38  	equ	pd_modify,apnd_org+37	turn on modified bit in pdmap
                        007046   12-39  	equ	pd_getptr,apnd_org+38	get pointer to pdmap entry
                        007047   12-40  	equ	pvt_to_devt,apnd_org+39	convert pvtx to device type wd
                                 12-41  
                                 12-42  " End of include file ...... apnd_equ.incl.alm
                                 12-43  
                                   860  	include	sstn_equ
                                  13-1  
                                  13-2  " Begin include file ...... sstn_equ.incl.alm
                                  13-3  " Created 5/11/75 by Noel I. Morris
                                  13-4  " Modified 8/79 by R.J.C. Kissel to use expanded BOS.
                                  13-5  
                        006000    13-6  	bool	sstn_org,6000
                                  13-7  
                                  13-8  
                                  13-9  " End of include file ...... sstn_equ.incl.alm
                                 13-10  
                                   861  	include	bos_tv
                                  14-1  " 
                                  14-2  " Begin include file ...... bos_tv.incl.alm
                                  14-3  " Created in November 1971 by N. I. Morris.
                                  14-4  " Modified 9/9/76 by Noel I. Morris
                                  14-5  " Modified by Sherman D. Sprague 02/11/81 for DPS8 support.
                                  14-6  " Modified November 1981 by C. Hornig to remove iom_connect_rel.
                                  14-7  " Modified January 1982 by J. Bongiovanni to add getport_info
                                  14-8  " Modified May 1982 by Sherman D. Sprague to add getmpc.
                                  14-9  
                                 14-10  " BOS Utility Package Transfer Vector.
                                 14-11  
                        012000   14-12  	equ	pagectl,utilorg
                        012001   14-13  	equ	line,pagectl+1
                        012040   14-14  	equ	arg,line+31
                        012060   14-15  	equ	darg,arg+arglen+1
                        012100   14-16  	equ	earg,darg+arglen+1
                        012120   14-17  	equ	fltscu,earg+arglen+1
                                 14-18  
                        012200   14-19  	equ	tv_org,utilorg+128
                                 14-20  
                        012200   14-21  	equ	scan,tv_org+0
                        012201   14-22  	equ	arg_count,tv_org+1
                        012202   14-23  	equ	nextline,tv_org+2
                        012203   14-24  	equ	nlraw,tv_org+3
                        012204   14-25  	equ	search,tv_org+4
                        012205   14-26  	equ	makefil,tv_org+5
                        012206   14-27  	equ	ldcom,tv_org+6
                        012207   14-28  	equ	getsec,tv_org+7
                        012210   14-29  	equ	cvinit,tv_org+8
                        012211   14-30  	equ	rdev,tv_org+9
                        012212   14-31  	equ	wdev,tv_org+10
                        012213   14-32  	equ	phybos,tv_org+11
                        012214   14-33  	equ	bosphy,tv_org+12
                        012215   14-34  	equ	phyadd,tv_org+13
                        012216   14-35  	equ	mulbos,tv_org+14
                        012217   14-36  	equ	bosmul,tv_org+15
                        012220   14-37  	equ	lookup_devmodel,tv_org+16
                        012221   14-38  	equ	makesdw,tv_org+17
                        012222   14-39  	equ	argbos,tv_org+18
                        012223   14-40  	equ	argmul,tv_org+19
                        012224   14-41  	equ	amdvt,tv_org+20
                        012225   14-42  	equ	amfirst,tv_org+21
                        012226   14-43  	equ	amlast,tv_org+22
                        012227   14-44  	equ	cvnamla,tv_org+23
                        012230   14-45  	equ	sect_per_cyl_list,tv_org+24
                        012231   14-46  	equ	sect_per_dev_list,tv_org+25
                        012232   14-47  	equ	rec_per_dev_list,tv_org+26
                        012233   14-48  	equ	amaxio,tv_org+27
                        012234   14-49  	equ	rdsec,tv_org+28
                        012235   14-50  	equ	wtsec,tv_org+29
                        012236   14-51  	equ	disk_brief,tv_org+30
                        012237   14-52  	equ	itaper,tv_org+31
                        012240   14-53  	equ	itapew,tv_org+32
                        012241   14-54  	equ	erpt,tv_org+33
                        012242   14-55  	equ	ercv,tv_org+34
                        012243   14-56  	equ	erbuf,tv_org+35
                        012244   14-57  	equ	type,tv_org+36
                        012245   14-58  	equ	ttyinit,tv_org+37
                        012246   14-59  	equ	readcd,tv_org+38
                        012247   14-60  	equ	readtty,tv_org+39
                        012250   14-61  	equ	getprt,tv_org+40
                        012251   14-62  	equ	punch,tv_org+41
                        012252   14-63  	equ	octwd,tv_org+42
                        012253   14-64  	equ	geas,tv_org+43
                        012254   14-65  	equ	geastab,tv_org+44
                        012255   14-66  	equ	asge,tv_org+45
                        012256   14-67  	equ	asgetab,tv_org+46
                        012257   14-68  	equ	ljust,tv_org+47
                        012260   14-69  	equ	rjust,tv_org+48
                        012261   14-70  	equ	bzel,tv_org+49
                        012262   14-71  	equ	stripa,tv_org+50
                        012263   14-72  	equ	stripg,tv_org+51
                        012264   14-73  	equ	getconf,tv_org+52
                        012265   14-74  	equ	getmore,tv_org+53
                        012266   14-75  	equ	getperiph,tv_org+54
                        012267   14-76  	equ	rdclock,tv_org+55
                        012270   14-77  	equ	cvclock,tv_org+56
                        012271   14-78  	equ	init_io,tv_org+57
                        012272   14-79  	equ	connect_iom,tv_org+58
                        012273   14-80  	equ	getmpc,tv_org+59
                        012274   14-81  	equ	check_status,tv_org+60
                        012275   14-82  	equ	get_special_interrupt,tv_org+61
                        012276   14-83  	equ	get_status_interrupt,tv_org+62
                        012277   14-84  	equ	xio_wait,tv_org+63
                        012300   14-85  	equ	initint,tv_org+64
                        012301   14-86  	equ	wantflt,tv_org+65
                        012302   14-87  	equ	intno,tv_org+66
                        012303   14-88  	equ	intrpts1,tv_org+67
                        012304   14-89  	equ	hexwd,tv_org+68
                        012305   14-90  	equ	find_disk,tv_org+69
                        012306   14-91  	equ	find_root,tv_org+70
                        012307   14-92  	equ	find_part,tv_org+71
                        012310   14-93  	equ	check_status_no_stat,tv_org+72
                        012311   14-94  	equ	check_special_status,tv_org+73
                        012312   14-95  	equ	check_cpu_type,tv_org+74
                        012313   14-96  	equ	getportinfo,tv_org+75
                                 14-97  
                                 14-98  " End of include file ...... bos_tv.incl.alm
                                 14-99  
                                   862  	include	bos_common
                                  15-1  "
                                  15-2  " Begin include file ...... bos_common.incl.alm
                                  15-3  " Modified on 8/31/76 by N. I. Morris
                                  15-4  " Modified on 9/01/80 by Sherman D. Sprague for DPS8 operation
                                  15-5  " Modified on 5/26/82 by Sherman D. Sprague to lengthen config size
                                  15-6  " Modified on 3/01/83 by Sherman D. Sprague to lengthen dirlen
                                  15-7  "	MACHINE CONDITIONS AREA
                                  15-8  "		Its length is "storlen".
                                  15-9  
                        000000   15-10  	equ	amptwregs,0	Ass. Mem  PTW registers
                        000100   15-11  	equ	amptwptr,64	Ass. Mem  PTW pointers
                        000200   15-12  	equ	amsdwregs,128	Ass. Mem  SDW registers
                        000400   15-13  	equ	amsdwptr,256	Ass. Mem  SDW pointers
                        000500   15-14  	equ	ouhist,320	operations hist regs
                        000700   15-15  	equ	cuhist,448	control unit hist regs
                        001100   15-16  	equ	eishist,576	eis hist regs
                        001300   15-17  	equ	aphist,704	appending unit hist regs
                        001500   15-18  	equ	prs,832		pointer regs
                        001520   15-19  	equ	regs,848		sreg
                        001530   15-20  	equ	low_order_port,856	port to read clock from
                        001532   15-21  	equ	mctime,858	bootload memory clock
                        001540   15-22  	equ	scu,864
                        001550   15-23  	equ	mcm,872		memory masks 8 ports 
                        001570   15-24  	equ	dbr,888
                        001572   15-25  	equ	intrpts,890	waiting interrupts
                        001573   15-26  	equ	bar,891		bar
                        001574   15-27  	equ	modereg,892	processor & cache mode registers
                        001576   15-28  	equ	faultreg,894	processor fault register
                        001600   15-29  	equ	ptrlen,896	pointer-lengths EIS 0 mod 8
                        001610   15-30  	equ	coreblocks,904	array of port information
                                 15-31  "				Bits  0-17 => num 1st 64-word block
                                 15-32  "				Bits 18-35 => num of 64-word blocks
                                 15-33  "				(-1) => no mem on this port
                        001620   15-34  	equ	lowport_cfg,912	Saved CFG from bootload SCU
                                 15-35  
                        002000   15-36  	equ	storlen,1024
                                 15-37  
                                 15-38  
                                 15-39  
                                 15-40  "	BOS COMMAND DIRECTORY
                                 15-41  "		Its length is "dirlen".
                                 15-42  
                        002000   15-43  	equ	dir,1024		( 0-23) => sector # of first sector on BOS disk
                                 15-44  "				(24-35) => # of sectors in BOS common
                        002001   15-45  	equ	used,dir+1	( 0-23) => # of next available sector on BOS disk
                        002002   15-46  	equ	useable,dir+2	( 0-23) => first unavailable sector on BOS disk
                        002003   15-47  	equ	corearea,dir+3	( 0-23) => starting sector of Multics core image
                                 15-48  "				(24-35) => # of sectors in Multics core image
                        002004   15-49  	equ	setuparea,dir+4	Sector and length of setup
                        002005   15-50  	equ	utilarea,dir+5	where utility package is kept
                        002010   15-51  	equ	iom_mxbase,dir+8	IOM IMW area address
                        002011   15-52  	equ	iom_mbbase,dir+9	IOM mailbox base
                        002012   15-53  	equ	bos_dvt,dir+10	BOS disk loc: (o3/iom,o6/chn,o9/drive,o18/devtype)
                        002013   15-54  	equ	unitgroup,dir+11	disk unitgroup (device no. or area no.)
                        002014   15-55  	equ	diskchanno,dir+12	channel to be used for disk
                        002015   15-56  	equ	tapechanno,dir+13	channel # for tapes
                        002016   15-57  	equ	rdrchanno,dir+14	channel number for card reader
                        002017   15-58  	equ	ttychanno,dir+15	channel # for operator's tty
                        002020   15-59  	equ	quietsw,dir+16	if on, don't print card and macro commands
                        002021   15-60  	equ	inputsw,dir+17	read from tty, cards, macros
                        002022   15-61  	equ	macroloc,dir+18	disk addr, buffer index of macro file
                        002023   15-62  	equ	fdump_state,dir+19	completion flag for last FDUMP
                        002024   15-63  	equ	d355_state,dir+20	= 1 if DataNet 355 loaded successfully
                        002025   15-64  	equ	skipsw,dir+21	if on, skip runcom lines
                        002026   15-65  	equ	ttypmtsw,dir+22	if on, prompt
                        002027   15-66  	equ	curtcmd,dir+23	current bos command
                        002030   15-67  	equ	readysw,dir+24	if on, print ready message
                        002032   15-68  	equ	cmdlst,dir+26	list of commands
                                 15-69  
                        000600   15-70  	equ	dirlen,384
                                 15-71  
                                 15-72  
                                 15-73  
                                 15-74  "	MACRO BUFFER AREA
                                 15-75  
                        002600   15-76  	equ	macrobuf,dir+dirlen  io buffer for macro files
                        002700   15-77  	equ	macroline,macrobuf+64  runcom command line
                        002716   15-78  	equ	macroargs,macroline+14  argument descriptors for runcom
                                 15-79  
                                 15-80  
                                 15-81  
                                 15-82  "	CONFIGURATION CARD AREA
                                 15-83  "		Its length is 2048 words.
                                 15-84  
                        003000   15-85  	equ	conf,macrobuf+128	start of configuration info
                        007000   15-86  	equ	econf,conf+2048	end of configuration info
                        000020   15-87  	equ	confl,16		length of each line
                                 15-88  
                                 15-89  
                        007000   15-90  	equ	seg6length,econf	length of bos_common area segment
                                 15-91  
                                 15-92  " End of include file ...... bos_common.incl.alm
                                 15-93  
                                   863  
                                   864  
                                   865  
                                   866  	end
LITERALS
     
    001726  aa   202021 474524 
    001727  aa   202020 224662 
    001730  aa   777777 770000 
    001731  aa   202020 242565 
    001732  aa   777777 777777 
    001733  aa   202020 202040 
    001734  aa   202020 202033 
    001735  aa   202020 202052 
    001736  aa   202020 202060 
    001737  aa   377770 207777 
    001740  aa   202062 626345 
    001741  aa   202020 204645 
    001742  aa   777717 171717 
    001743  aa   202020 202020 
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    001744  5a   000003 000000 
    001745  5a   000017 600000 
    001746  aa   000000 000000 
    001747  55   000010 000002 
    001750  5a   000002 400003 
    001751  55   000006 000010 
    001752  aa  005 160 141 164
    001753  aa  143 150 000 000
    001754  55   000002 000003 
    001755  6a   000000 400002 
    001756  55   000013 000003 
    001757  aa  014 163 171 155         symbol_table
    001760  aa  142 157 154 137
    001761  aa  164 141 142 154
    001762  aa  145 000 000 000

DEFINITIONS HASH TABLE

    001763  aa   000000 000015 
    001764  aa   000000 000000 
    001765  aa   000000 000000 
    001766  aa   000000 000000 
    001767  aa   000000 000000 
    001770  aa   000000 000000 
    001771  aa   000000 000000 
    001772  5a   000010 000000 
    001773  aa   000000 000000 
    001774  aa   000000 000000 
    001775  aa   000000 000000 
    001776  aa   000000 000000 
    001777  aa   000000 000000 
    002000  aa   000000 000000 

NO EXTERNAL NAMES

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    002001  aa   000001 000000 
    002002  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    002003  aa   000000 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   001744 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000010 
    000007  a2   000000 000000 
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000004 
    000004  aa   000000 112143 
    000005  aa   305203 523135 
    000006  aa   000000 112272 
    000007  aa   230000 141063 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000561 
    000020  aa   000000 000371 
    000021  aa   000000 000536 
    000022  aa   000541 000371 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   040066 056066 
    000030  aa   040040 116157 
    000031  aa   166145 155142 
    000032  aa   145162 040061 
    000033  aa   071070 062040 
    000034  aa   110157 154155 
    000035  aa   163164 145144 
    000036  aa   164056 123171 
    000037  aa   163115 141151 
    000040  aa   156164 056141 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   154151 163164 
    000045  aa   040040 040040 
    000046  aa   040040 040040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040040 040040 
    000057  aa   040040 040040 
    000060  aa   040040 040040 
    000061  aa   040040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000020 
    000066  aa   000166 000026 
    000067  aa   122721 273072 
    000070  aa   000000 112272 
    000071  aa   216136 200000 
    000072  aa   000174 000040 
    000073  aa   113400 415301 
    000074  aa   000000 111341 
    000075  aa   220414 400000 
    000076  aa   000204 000041 
    000077  aa   105543 476637 
    000100  aa   000000 110555 
    000101  aa   260135 200000 
    000102  aa   000215 000041 
    000103  aa   106702 126312 
    000104  aa   000000 110673 
    000105  aa   145162 200000 
    000106  aa   000226 000030 
    000107  aa   077377 110471 
    000110  aa   000000 107737 
    000111  aa   746246 400000 
    000112  aa   000234 000036 
    000113  aa   043243 125755 
    000114  aa   000000 101621 
    000115  aa   275044 200000 
    000116  aa   000244 000047 
    000117  aa   110235 072676 
    000120  aa   000000 111024 
    000121  aa   524455 000000 
    000122  aa   000256 000031 
    000123  aa   113434 242331 
    000124  aa   000000 111347 
    000125  aa   432123 600000 
    000126  aa   000265 000032 
    000127  aa   113434 042223 
    000130  aa   000000 111346 
    000131  aa   227161 400000 
    000132  aa   000274 000033 
    000133  aa   043243 130547 
    000134  aa   000000 102611 
    000135  aa   327745 600000 
    000136  aa   000303 000047 
    000137  aa   102312 644262 
    000140  aa   000000 110232 
    000141  aa   252245 600000 
    000142  aa   000315 000041 
    000143  aa   043243 126016 
    000144  aa   000000 103256 
    000145  aa   423767 600000 
    000146  aa   000326 000042 
    000147  aa   112204 105031 
    000150  aa   000000 111221 
    000151  aa   055103 400000 
    000152  aa   000337 000042 
    000153  aa   066146 212610 
    000154  aa   000000 106615 
    000155  aa   362652 200000 
    000156  aa   000350 000040 
    000157  aa   110235 072677 
    000160  aa   000000 111024 
    000161  aa   524460 600000 
    000162  aa   000360 000044 
    000163  aa   121622 277475 
    000164  aa   000000 112162 
    000165  aa   321563 400000 
    000166  aa   076163 160145          >spec>h>3.17>patch.alm
    000167  aa   143076 150076 
    000170  aa   063056 061067 
    000171  aa   076160 141164 
    000172  aa   143150 056141 
    000173  aa   154155 040040 
    000174  aa   076154 144144          >ldd>bos>include>bosequ.incl.alm
    000175  aa   076142 157163 
    000176  aa   076151 156143 
    000177  aa   154165 144145 
    000200  aa   076142 157163 
    000201  aa   145161 165056 
    000202  aa   151156 143154 
    000203  aa   056141 154155 
    000204  aa   076154 144144          >ldd>bos>include>bos_sdw.incl.alm
    000205  aa   076142 157163 
    000206  aa   076151 156143 
    000207  aa   154165 144145 
    000210  aa   076142 157163 
    000211  aa   137163 144167 
    000212  aa   056151 156143 
    000213  aa   154056 141154 
    000214  aa   155040 040040 
    000215  aa   076154 144144          >ldd>bos>include>bos_ptw.incl.alm
    000216  aa   076142 157163 
    000217  aa   076151 156143 
    000220  aa   154165 144145 
    000221  aa   076142 157163 
    000222  aa   137160 164167 
    000223  aa   056151 156143 
    000224  aa   154056 141154 
    000225  aa   155040 040040 
    000226  aa   076154 144144          >ldd>include>mc.incl.alm
    000227  aa   076151 156143 
    000230  aa   154165 144145 
    000231  aa   076155 143056 
    000232  aa   151156 143154 
    000233  aa   056141 154155 
    000234  aa   076154 144144          >ldd>bos>include>fill.incl.alm
    000235  aa   076142 157163 
    000236  aa   076151 156143 
    000237  aa   154165 144145 
    000240  aa   076146 151154 
    000241  aa   154056 151156 
    000242  aa   143154 056141 
    000243  aa   154155 040040 
    000244  aa   076154 144144          >ldd>bos>include>bos_page_info.incl.alm
    000245  aa   076142 157163 
    000246  aa   076151 156143 
    000247  aa   154165 144145 
    000250  aa   076142 157163 
    000251  aa   137160 141147 
    000252  aa   145137 151156 
    000253  aa   146157 056151 
    000254  aa   156143 154056 
    000255  aa   141154 155040 
    000256  aa   076154 144144          >ldd>include>sst.incl.alm
    000257  aa   076151 156143 
    000260  aa   154165 144145 
    000261  aa   076163 163164 
    000262  aa   056151 156143 
    000263  aa   154056 141154 
    000264  aa   155040 040040 
    000265  aa   076154 144144          >ldd>include>aste.incl.alm
    000266  aa   076151 156143 
    000267  aa   154165 144145 
    000270  aa   076141 163164 
    000271  aa   145056 151156 
    000272  aa   143154 056141 
    000273  aa   154155 040040 
    000274  aa   076154 144144          >ldd>include>sstnt.incl.alm
    000275  aa   076151 156143 
    000276  aa   154165 144145 
    000277  aa   076163 163164 
    000300  aa   156164 056151 
    000301  aa   156143 154056 
    000302  aa   141154 155040 
    000303  aa   076154 144144          >ldd>bos>include>bos_sstnt_man.incl.alm
    000304  aa   076142 157163 
    000305  aa   076151 156143 
    000306  aa   154165 144145 
    000307  aa   076142 157163 
    000310  aa   137163 163164 
    000311  aa   156164 137155 
    000312  aa   141156 056151 
    000313  aa   156143 154056 
    000314  aa   141154 155040 
    000315  aa   076154 144144          >ldd>bos>include>segname.incl.alm
    000316  aa   076142 157163 
    000317  aa   076151 156143 
    000320  aa   154165 144145 
    000321  aa   076163 145147 
    000322  aa   156141 155145 
    000323  aa   056151 156143 
    000324  aa   154056 141154 
    000325  aa   155040 040040 
    000326  aa   076154 144144          >ldd>bos>include>apnd_equ.incl.alm
    000327  aa   076142 157163 
    000330  aa   076151 156143 
    000331  aa   154165 144145 
    000332  aa   076141 160156 
    000333  aa   144137 145161 
    000334  aa   165056 151156 
    000335  aa   143154 056141 
    000336  aa   154155 040040 
    000337  aa   076154 144144          >ldd>bos>include>sstn_equ.incl.alm
    000340  aa   076142 157163 
    000341  aa   076151 156143 
    000342  aa   154165 144145 
    000343  aa   076163 163164 
    000344  aa   156137 145161 
    000345  aa   165056 151156 
    000346  aa   143154 056141 
    000347  aa   154155 040040 
    000350  aa   076154 144144          >ldd>bos>include>bos_tv.incl.alm
    000351  aa   076142 157163 
    000352  aa   076151 156143 
    000353  aa   154165 144145 
    000354  aa   076142 157163 
    000355  aa   137164 166056 
    000356  aa   151156 143154 
    000357  aa   056141 154155 
    000360  aa   076154 144144          >ldd>bos>include>bos_common.incl.alm
    000361  aa   076142 157163 
    000362  aa   076151 156143 
    000363  aa   154165 144145 
    000364  aa   076142 157163 
    000365  aa   137143 157155 
    000366  aa   155157 156056 
    000367  aa   151156 143154 
    000370  aa   056141 154155 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

         246    absfet                   patch:        226,  256.
           7    abs_wire_entry           bos_page_info:       21.
       37777    address_compare_mask     bos_page_info:        3.
        1034    addtab                   patch:        103,  680,  750.
          21    again                    patch:         58,  545.
       12233    amaxio                   bos_tv:        48.
       12224    amdvt                    bos_tv:        41.
       12225    amfirst                  bos_tv:        42.
       12226    amlast                   bos_tv:        43.
         100    amptwptr                 bos_common:    11.
           0    amptwregs                bos_common:    10.
         400    amsdwptr                 bos_common:    13.
         200    amsdwregs                bos_common:    12.
        1300    aphist                   bos_common:    17.
        7032    apnd                     patch:        243,
                                         bos_sstnt_man:       36,  200,
                                         apnd_equ:      27.
        7000    apnd_org                 patch:         45,
                                         apnd_equ:       8,   10,   11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
                                                        21,   23,   24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
                                                        34,   35,   36,   37,   38,   39,   40.
       12040    arg                      patch:         59,  101,  107,  111,  117,  120,  129,  178,  187,  193,  222,  224,
                                                       229,  256,  286,  310,  319,  328,  338,  345,  360,  367,  390,  401,
                                                       409,  420,  434,  464,  467,  476,  481,  502,  505,  510,  529,  534,
                                                       535,  542,  552,  560,  610,  621,  667,
                                         fill:          12,   33,
                                         segname:       13,
                                         bos_tv:        14,   15.
       12222    argbos                   patch:        159,
                                         bos_tv:        39.
          17    arglen                   patch:        446,  451,  470,  474,  481,  482,  485,  486,
                                         bosequ:        17,
                                         bos_tv:        15,   16,   17.
       12223    argmul                   bos_tv:        40.
       12201    arg_count                bos_tv:        22.
       12255    asge                     bos_tv:        66.
       12256    asgetab                  bos_sstnt_man:       53,
                                         bos_tv:        67.
           3    ast                      bos_page_info:       11.
        4000    aste.any_access_on       aste:          49.
           5    aste.any_access_on_word  aste:          48.
           0    aste.bp                  aste:          18.
         777    aste.csl_mask            aste:          90.
      777000    aste.csl_mask_inner      bos_page_info:       53.
          33    aste.csl_shift           aste:          89.
          12    aste.csl_word            aste:          88.
      200000    aste.damaged             aste:         116.
          13    aste.damaged_word        aste:         115.
           4    aste.ddnp                aste:         104.
          12    aste.ddnp_word           aste:         103.
         200    aste.deact_error         aste:          57.
           5    aste.deact_error_word    aste:          56.
       40000    aste.dirsw               aste:          73.
           5    aste.dirsw_word          aste:          72.
           2    aste.dius                aste:          63.
           5    aste.dius_word           aste:          62.
      400000    aste.dmpr_pad            aste:          67.
           5    aste.dmpr_pad_word       aste:          66.
          20    aste.dnzp                aste:         100.
          12    aste.dnzp_word           aste:          99.
           7    aste.dtm                 aste:          82.
           6    aste.dtu                 aste:          81.
      200000    aste.ehs                 aste:          69.
           5    aste.ehs_word            aste:          68.
         400    aste.explicit_deact_ok   aste:          55.
           5    aste.explicit_deact_ok_word    aste:          54.
         400    aste.fmchanged           aste:          92.
      400000    aste.fmchanged1          aste:         114.
          13    aste.fmchanged1_word     aste:         113.
          12    aste.fmchanged_word      aste:          91.
         200    aste.fms                 aste:          94.
          12    aste.fms_word            aste:          93.
          40    aste.fm_damaged          aste:          61.
           5    aste.fm_damaged_word     aste:          60.
           0    aste.fp                  aste:          17.
       40000    aste.gtms                aste:          43.
           5    aste.gtms_word           aste:          42.
          40    aste.gtpd                aste:          98.
          12    aste.gtpd_word           aste:          97.
      100000    aste.gtus                aste:          41.
           5    aste.gtus_word           aste:          40.
       20000    aste.hc                  aste:          45.
         100    aste.hc_part             aste:          59.
           5    aste.hc_part_word        aste:          58.
       10000    aste.hc_sdw              aste:          47.
           5    aste.hc_sdw_word         aste:          46.
           5    aste.hc_word             aste:          44.
          13    aste.ht_fp               aste:         112.
           1    aste.infl                aste:          20.
           1    aste.infp                aste:          21.
        1000    aste.inhibit_cache       aste:          53.
           5    aste.inhibit_cache_word  aste:          52.
      200000    aste.init                aste:          39.
           5    aste.init_word           aste:          38.
          77    aste.marker_mask         aste:         126.
           0    aste.marker_shift        aste:         125.
          13    aste.marker_word         aste:         124.
       20000    aste.master_dir          aste:          75.
           5    aste.master_dir_word     aste:          74.
         777    aste.msl_mask            aste:          30.
          33    aste.msl_shift           aste:          29.
           4    aste.msl_word            aste:          28.
           1    aste.nid                 aste:          65.
           5    aste.nid_word            aste:          64.
         100    aste.npfs                aste:          96.
          12    aste.npfs_word           aste:          95.
         777    aste.np_mask             aste:         110.
           0    aste.np_shift            aste:         109.
          12    aste.np_word             aste:         108.
      100000    aste.nqsw                aste:          71.
           5    aste.nqsw_word           aste:          70.
      100000    aste.pack_ovfl           aste:         118.
          13    aste.pack_ovfl_word      aste:         117.
           2    aste.par_astep           aste:          24,
                                         bos_sstnt_man:      128,  199.
          10    aste.per_process         aste:         102.
          12    aste.per_process_word    aste:         101.
           3    aste.ptsi_mask           aste:         123.
           6    aste.ptsi_shift          aste:         122.
          13    aste.ptsi_word           aste:         121.
         777    aste.pvtx_mask           aste:          33.
          22    aste.pvtx_shift          aste:          32.
           4    aste.pvtx_word           aste:          31.
          10    aste.quota               aste:          84.
         777    aste.records_mask        aste:         107.
      777000    aste.records_mask_inner  bos_page_info:       54.
          11    aste.records_shift       aste:         106.
          12    aste.records_word        aste:         105.
           2    aste.strp                aste:          23.
       40000    aste.synchronized        aste:         120.
          13    aste.synchronized_word   aste:         119.
        4000    aste.tqsw                aste:          79.
           5    aste.tqsw_word           aste:          78.
           3    aste.uid                 aste:          26.
          11    aste.used                aste:          86.
      400000    aste.usedf               aste:          37.
           5    aste.usedf_word          aste:          36.
       10000    aste.volmap_seg          aste:          77.
           5    aste.volmap_seg_word     aste:          76.
           4    aste.vtocx               aste:          34.
        2000    aste.write_access_on     aste:          51.
           5    aste.write_access_on_word      aste:          50.
           0    aste_part.one            aste:         134.
         377    aste_part.three_mask     aste:         139.
           0    aste_part.three_shift    aste:         138.
          13    aste_part.three_word     aste:         137.
           1    aste_part.two            aste:         135.
          14    aste_part_size           aste:         131.
          14    aste_size                aste:          15.
          14    ast_size                 bos_page_info:       28,
                                         bos_sstnt_man:      113,  118,  237.
        1207    badoff                   patch:        118,  119,  121,  179,  188,  231,  312,  362,  804.
        1573    bar                      bos_common:    26.
           2    bf                       bosequ:         9.
         704    bmpadd                   patch:        506,  537,  541.
         121    bnr                      patch:        141,  148.
        7012    bosdmp                   fill:          67,
                                         apnd_equ:      16.
       12217    bosmul                   bos_tv:        36.
       12214    bosphy                   bos_tv:        33.
        2012    bos_dvt                  bos_common:    53.
       12261    bzel                     bos_tv:        70.
        7022    castap                   apnd_equ:      21.
       10101    char_desc                bos_page_info:       27.
       12312    check_cpu_type           bos_tv:        95.
       12311    check_special_status     bos_tv:        94.
       12274    check_status             bos_tv:        81.
       12310    check_status_no_stat     bos_tv:        93.
          10    cleanup_entry            bos_page_info:       22.
        7000    cmdbr                    patch:         50,  558,  566,
                                         apnd_equ:      10.
        2032    cmdlst                   bos_common:    68.
           3    cme                      bos_page_info:       13.
          12    cmep_to_coreadd.rl       bos_page_info:       43.
           2    cmep_to_desc.ls          bos_page_info:       46.
        7020    cmpsdw                   apnd_equ:      20.
        1007    cntin                    patch:        651,  763.
        1667    collect_segname          patch:        219,  583,
                                         segname:       10.
        1715    colseg.buf               segname:       25,   29,   32,   43.
        1702    colseg.descr             segname:       21,   26.
        1713    colseg.exit              segname:       11,   36,   39.
        1712    colseg.nf                segname:       33,   38.
           6    com                      patch:         49,  126,  279,  295,  314,  334,  366,  383,  386,  397,  400,  402,
                                                       405,  513,
                                         bosequ:        14.
          52    common                   patch:         93,   99.
        7036    comp                     apnd_equ:      31.
        1140    comtab                   patch:         61,  761,  781.
        3000    conf                     bos_common:    85,   86.
          20    confl                    bos_common:    87.
       12272    connect_iom              bos_tv:        79.
          12    coreadd_to_cmep.ls       bos_page_info:       44.
          14    coreadd_to_desc.ls       bos_page_info:       39.
           6    coreadd_to_desc_lower.rl       bos_page_info:       40.
        2003    corearea                 bos_common:    47.
        1610    coreblocks               bos_common:    30.
         700    cuhist                   bos_common:    15.
        2027    curtcmd                  bos_common:    66.
       12270    cvclock                  bos_tv:        77.
       12210    cvinit                   patch:         42,
                                         bos_tv:        29.
       12227    cvnamla                  bos_tv:        44.
          20    cycle                    patch:         53,   56,   76,  321,  330,  341,  387,  393,  406,  414,  504,  525,
                                                       531,  569,  576,  591,  642,  671,  675,  790,  798,  802,  807.
        2024    d355_state               bos_common:    63.
       12060    darg                     patch:        482,
                                         bos_tv:        15,   16.
        1570    dbr                      patch:         49,  742,
                                         bos_common:    24.
           2    desc_to_cmep.rl          bos_page_info:       47.
          14    desc_to_coreadd.rl       bos_page_info:       41.
        1231    devadd                   patch:        127,  138,  174,  192,  201,  833.
           1    df1                      bos_page_info:        5.
         514    dfe                      patch:        426,  440,  447,  543.
         560    dfend                    patch:        475,  480.
         553    dffill                   patch:        474,  478.
         507    dfl1                     patch:        434,  441,  452.
         532    dfl2                     patch:        456,  471.
         545    dfpl1                    patch:        463,  467.
         550    dfpl2                    patch:        466,  470.
        2000    dir                      bos_common:    43,   45,   46,   47,   49,   50,   51,   52,   53,   54,   55,   56,
                                                        57,   58,   59,   60,   61,   62,   63,   64,   65,   66,   67,   68,   76.
         600    dirlen                   bos_common:    70,   76.
        2014    diskchanno               bos_common:    55.
       12236    disk_brief               bos_tv:        51.
         100    dmpbufl                  patch:         28,   51.
         524    dnfnd                    patch:        437,  449.
         205    dnr                      patch:        204,  211.
         564    dotemp                   patch:        443,  449,  456,  457,  485.
         472    dotend                   patch:        291,  309,  359,  416,  491.
         505    dotfill                  patch:         90,   95,  431.
         603    dotl                     patch:        421,  442,  486,  544.
         501    dotlast                  patch:        416,  424,  541.
         475    dotlp                    patch:        420,  425.
         473    dotstart                 patch:         99,  105,  285,  418.
           5    double_word              patch:        706,  708,  710,  712,  714,  716,  718,  720,  722,  724,  726,  728,
                                                       730,  732,  734,  736,  742,  757.
           0    ds                       bosequ:         7.
        1232    dvt                      patch:        160,  170,  202,  207,  834.
       12100    earg                     segname:       24,   28,
                                         bos_tv:        16,   17.
        7000    econf                    bos_common:    86,   90.
        1100    eishist                  bos_common:    16.
       12243    erbuf                    bos_tv:        56.
       12242    ercv                     bos_tv:        55.
       12241    erpt                     patch:        317,  326,  336,  388,  407,  497,  515,  523,  588,  787,  795,  800,
                                                       805,
                                         bos_sstnt_man:       63,   68,
                                         bos_tv:        54.
           6    evict_entry              bos_page_info:       20.
          20    execint                  patch:         35,   55.
        1576    faultreg                 bos_common:    28.
           0    fault_entry              bos_page_info:       14.
        2023    fdump_state              bos_common:    62.
        7037    fetch                    patch:        262,
                                         apnd_equ:      32.
        7010    fetchin                  patch:        261,  792,  794,  797,
                                         apnd_equ:      14.
        7004    fetchout                 patch:        131,  195,  264,  495,  508,  512,
                                         bos_sstnt_man:       39,  204,
                                         apnd_equ:      12.
        7041    fetch_use_buffer         patch:        135,  198,
                                         apnd_equ:      34.
           5    fgb                      bosequ:        13.
        1243    fill                     patch:        574,
                                         fill:           5.
        1257    fillerr                  fill:          21,   31,   35.
        1270    fillfno                  fill:          28,   33.
        1302    filllh                   fill:          46,   65.
        1262    fillll                   fill:          14,   25.
        1247    filllp                   fill:          11,   41,   44,   48,   55,   57.
        1314    filllst                  fill:          27,   36,   59,   72.
        1305    fillonoff                fill:          50,   67,   69,   71.
        1275    fillrh                   fill:          39.
        1300    fillwd                   fill:          43,   61,   63.
        1254    fillx0                   fill:           5,   17,   21.
        1255    fillx2                   fill:           6,   18,   22.
       12305    find_disk                bos_tv:        90.
       12307    find_part                bos_tv:        92.
       12306    find_root                bos_tv:        91.
        2000    firmware_bit             bosequ:        20.
       12120    fltscu                   bos_tv:        17.
           0    full_word                patch:        682,  684,  686,  688,  738,  740,  746,  752.
       12253    geas                     bos_tv:        64.
       12254    geastab                  segname:       20,
                                         bos_tv:        65.
        7034    get                      bos_sstnt_man:       44,  116,  162,
                                         apnd_equ:      29.
         275    getadr                   patch:        104,  285.
       12264    getconf                  bos_tv:        73.
         351    getdbl                   patch:        304,  332.
         331    getfull                  patch:        299,  302,  316.
        7026    getinit                  patch:         52,  568,
                                         fill:          15,
                                         apnd_equ:      23.
         320    getinx                   patch:        303,  306.
         340    getlh                    patch:        300,  323.
       12265    getmore                  bos_tv:        74.
       12273    getmpc                   bos_tv:        80.
         222    getoff                   patch:        229,  282.
       12266    getperiph                bos_tv:        75.
       12313    getportinfo              bos_tv:        96.
       12250    getprt                   bos_tv:        61.
         341    getrh                    patch:        301,  324.
        7027    getsdw                   patch:        236,  612,
                                         bos_sstnt_man:       30,
                                         apnd_equ:      24.
       12207    getsec                   bos_tv:        28.
        7043    getsltname               patch:        623,
                                         apnd_equ:      36.
        1451    getsstntname             patch:        616,
                                         bos_sstnt_man:      101.
        7030    getwd                    apnd_equ:      25.
       12275    get_special_interrupt    bos_tv:        82.
       12276    get_status_interrupt     bos_tv:        83.
        1007    godump                   patch:        650,  767.
         727    gofill                   patch:        574,  773.
          32    gotoit                   patch:         62,   68.
        1511    gpn.1                    bos_sstnt_man:      148,  152.
        1601    gpn.aste                 bos_sstnt_man:      118,  128,  237.
        1600    gpn.astep                bos_sstnt_man:      114,  131,  145,  198,  209,  236.
        1615    gpn.curlen               bos_sstnt_man:      126,  180,  190,  216,  238.
        1574    gpn.desc                 bos_sstnt_man:      123,  219.
        1567    gpn.done                 bos_sstnt_man:      186,  206,  208,  213.
        1576    gpn.fail                 bos_sstnt_man:      104,  151,  165,  171,  202,  228.
        1516    gpn.got_ptsi             bos_sstnt_man:      149,  154.
        1543    gpn.isroot               bos_sstnt_man:      133,  173,  183.
        1622    gpn.linebuf              bos_sstnt_man:      178,  189,  218,  245.
        1620    gpn.linebufp             bos_sstnt_man:      243.
        1506    gpn.loop                 bos_sstnt_man:      144,  210.
        1656    gpn.namebuf              bos_sstnt_man:      164,  170,  175,  177,  246.
        1576    gpn.not_pn               bos_sstnt_man:      106,  109,  111,  119,  134,  229.
        1616    gpn.offset               bos_sstnt_man:      125,  172,  181,  184,  191,  215,  240.
        1540    gpn.tab                  bos_sstnt_man:       54,  179.
        1576    gpn.x2                   bos_sstnt_man:      102,  121,  214,  227.
        1506    gpn.yes_pn               bos_sstnt_man:      129,  136.
        7031    grab                     apnd_equ:      26.
        7002    hcdbr                    fill:          61,   63,
                                         apnd_equ:      11.
       12304    hexwd                    bos_tv:        89.
           4    indexed                  patch:        744,  756.
       12300    initint                  patch:         34,
                                         bos_tv:        85.
        1330    initsstnt                patch:        605,
                                         bos_sstnt_man:       14.
       12271    init_io                  patch:         37,
                                         bos_tv:        78.
        2021    inputsw                  bos_common:    60.
      100000    int                      bos_page_info:        6.
       12302    intno                    bos_tv:        87.
        1572    intrpts                  patch:        746,  748,
                                         bos_common:    25.
       12303    intrpts1                 bos_tv:        88.
        2011    iom_mbbase               bos_common:    52.
        2010    iom_mxbase               bos_common:    51.
       12237    itaper                   bos_tv:        52.
       12240    itapew                   bos_tv:        53.
        1237    last                     patch:        839.
       12206    ldcom                    patch:         46,  601,
                                         bos_tv:        27.
           1    left_half                patch:        690,  694,  698,  702,  753.
       12001    line                     patch:        617,  624,  628,  638,  641,  821,
                                         bos_tv:        13,   14.
       12257    ljust                    bos_tv:        68.
       12220    lookup_devmodel          bos_tv:        37.
        1620    lowport_cfg              bos_common:    34.
        1530    low_order_port           bos_common:    20.
        2716    macroargs                bos_common:    78.
        2600    macrobuf                 bos_common:    76,   77,   85.
        2700    macroline                bos_common:    77,   78.
        2022    macroloc                 bos_common:    61.
       12205    makefil                  bos_tv:        26.
       12221    makesdw                  bos_tv:        38.
      300000    mc.cpu_type_mask         mc:            22.
           3    mc.cpu_type_shift        mc:            25.
          46    mc.cpu_type_word         mc:            21.
          50    mc.eis_info              mc:            11.
          43    mc.errcode               mc:            17.
          46    mc.ext_fault_reg         mc:            23.
       77774    mc.ext_fault_reg_mask    mc:            24.
          45    mc.fault_reg             mc:            19.
          46    mc.fault_time            mc:            20.
          44    mc.fim_temp              mc:            18.
          42    mc.ips_temp              mc:            16.
          40    mc.mask                  mc:            15.
           0    mc.prs                   mc:             8.
          20    mc.regs                  mc:             9.
          30    mc.scu                   mc:            10.
          30    mc.scu.apu_stat_word     mc:            48.
          35    mc.scu.ca_word           mc:           207.
          32    mc.scu.cpu_no_word       mc:           138.
          35    mc.scu.cpu_tag_word      mc:           231.
          35    mc.scu.cu_stat_word      mc:           211.
          32    mc.scu.delta_word        mc:           144.
          30    mc.scu.fault_cntr_word   mc:            66.
          31    mc.scu.fault_data_word   mc:            74.
          34    mc.scu.ilc_word          mc:           182.
          34    mc.scu.indicators_word   mc:           186.
          31    mc.scu.port_stat_word    mc:           108.
          30    mc.scu.ppr.prr_word      mc:            33.
          30    mc.scu.ppr.psr_word      mc:            38.
          30    mc.scu.ppr.p_word        mc:            43.
          33    mc.scu.tpr.tbr_word      mc:           174.
          32    mc.scu.tpr.trr_word      mc:           128.
          32    mc.scu.tpr.tsr_word      mc:           133.
          33    mc.scu.tsr_stat_word     mc:           152.
        1550    mcm                      patch:        744,
                                         bos_common:    23.
        1532    mctime                   bos_common:    21.
           7    mem                      patch:        664,
                                         bosequ:        15.
        1574    modereg                  bos_common:    27.
         676    morel                    patch:        534,  539.
         672    mores                    patch:        152,  215,  252,  270,  529.
           1    moved_bit                bos_page_info:       25.
       12216    mulbos                   bos_tv:        35.
         104    nads                     patch:        102,  750.
          22    ncoms                    patch:         60,  781.
        1235    new                      patch:        372,  373,  374,  379,  380,  381,  384,  392,  398,  403,  412,  413,
                                                       511,  519,  838.
         711    newdbr                   patch:        551,  769.
       12202    nextline                 patch:         56,
                                         bos_tv:        23.
          14    nfilll                   fill:          26,   72.
       12203    nlraw                    bos_tv:        24.
         160    nomod                    patch:        181,  183,  187.
         125    notbos                   patch:        109,  154.
         211    notdev                   patch:        156,  162,  218.
         145    notmult                  patch:        167,  174.
        1201    nowd                     patch:        237,  238,  245,  800.
           4    no_post                  bos_page_info:        8.
       12252    octwd                    bos_tv:        63.
        1227    offset                   patch:        122,  189,  233,  241,  257,  499,  517,  831.
        1240    old                      patch:        316,  320,  325,  329,  333,  335,  339,  340,  385,  391,  399,  404,
                                                       410,  411,  496,  500,  509,  518,  840.
         725    oldval                   patch:        562,  568.
           3    ored                     patch:        748,  755.
         374    orin                     patch:        350,  354.
         500    ouhist                   bos_common:    14.
        1166    outbnds                  patch:        263,  792.
       12000    pagectl                  bos_tv:        12,   13.
        7013    pagesw                   fill:          69,
                                         apnd_equ:      17.
          12    page_power               bos_page_info:        4.
         622    pcom                     patch:        148,  211,  248,  266,  490.
         642    pcoms                    patch:        493,  508.
         662    pcx2                     patch:        490,  514,  521.
           3    pdm                      bos_page_info:       10.
        1233    pdmep                    patch:        163,  171,  182,  835.
           4    pdsize                   bos_page_info:       29.
        7044    pd_check                 patch:        169,
                                         apnd_equ:      37.
           5    pd_flush_entry           bos_page_info:       19.
          12    pd_free_required         bos_page_info:       30.
        7046    pd_getptr                apnd_equ:      39.
          36    pd_max_rws               bos_page_info:       32.
        7045    pd_modify                patch:        184,
                                         apnd_equ:      38.
          36    pd_write_limit           bos_page_info:       31.
          43    peek                     patch:         64,   66,   90.
           3    pgm                      bosequ:        10.
       12215    phyadd                   bos_tv:        34.
       12213    phybos                   bos_tv:        32.
        7014    pmlsw                    fill:          71,
                                         apnd_equ:      18.
        1234    pnum                     patch:        161,  837.
           2    post_purge_bit           bos_page_info:       24.
           4    post_purge_entry         bos_page_info:       18.
           3    pre_page_entry           bos_page_info:       17.
          17    pre_seek_limit           bos_page_info:       33.
         264    prfet                    patch:        273,  288.
          20    pri                      bos_page_info:        7.
        1500    prs                      patch:        274,  276,  706,  708,  710,  712,  714,  716,  718,  720,  722,  724,
                                                       726,  728,  730,  732,  734,  736,
                                         bos_common:    18.
         743    psegnm                   patch:        597,  608,  777.
         772    psegnm1                  patch:        619,  627.
         732    psegno                   patch:        582,  779.
          40    ptlb1                    patch:         70,   72,   74.
        1600    ptrlen                   bos_common:    29.
           2    ptw                      bos_page_info:       12.
      740000    ptw.add_type             bos_ptw:        5.
           4    ptw.df                   bos_ptw:       16.
           3    ptw.df_no                bos_ptw:       17.
       10000    ptw.er                   bos_ptw:        7.
       20000    ptw.first                bos_ptw:        6.
      400000    ptw.nulled               bos_ptw:        4.
         200    ptw.nypd                 bos_ptw:       11.
          10    ptw.os                   bos_ptw:       15.
         100    ptw.phm                  bos_ptw:       12.
         400    ptw.phm1                 bos_ptw:       10.
        1000    ptw.phu                  bos_ptw:        9.
          40    ptw.phu1                 bos_ptw:       13.
       10000    ptw.pre_paged            bos_ptw:        8.
           5    ptw.usage_bits_shift     bos_ptw:       18.
          20    ptw.wired                bos_ptw:       14.
       12251    punch                    patch:         65,   73,  660,  674,
                                         bos_tv:        62.
        1022    punchset                 patch:        666,  775.
        1033    punchsw                  patch:         63,   71,  656,  666,  670,  677.
        7035    put                      apnd_equ:      30.
        7047    pvt_to_devt              apnd_equ:      40.
        1162    qm                       patch:        113,  221,  275,  277,  554,  575,  585,  613,  614,  625,  787.
        2020    quietsw                  patch:        386,  405,  513,
                                         bos_common:    59.
        1011    quit                     patch:        655,  771.
       12267    rdclock                  bos_tv:        76.
       12211    rdev                     patch:        206,
                                         bos_tv:        30.
        2016    rdrchanno                bos_common:    57.
       12234    rdsec                    patch:        144,
                                         bos_tv:        49.
       12246    readcd                   bos_tv:        59.
       12247    readtty                  bos_tv:        60.
        2030    readysw                  bos_common:    67.
        7006    read_args                patch:        140,  142,  203,  205,
                                         apnd_equ:      13.
           1    read_entry               bos_page_info:       15.
       12232    rec_per_dev_list         bos_tv:        47.
        1520    regs                     patch:        682,  684,  686,  688,  690,  692,  694,  696,  698,  700,  702,  704,
                                         bos_common:    19.
           2    right_half               patch:        692,  696,  700,  704,  754.
       12260    rjust                    bos_tv:        69.
        4000    runcom_bit               bosequ:        19.
       12200    scan                     bos_tv:        21.
        1540    scu                      patch:        738,  740,
                                         bos_common:    22.
        2000    scu.apu.dsptw            mc:            57.
          10    scu.apu.fabs             mc:            64.
          20    scu.apu.fanp             mc:            63.
          40    scu.apu.fap              mc:            62.
        4000    scu.apu.pi_ap            mc:            56.
         200    scu.apu.ptw              mc:            60.
         100    scu.apu.ptw2             mc:            61.
       20000    scu.apu.ptwm             mc:            54.
       10000    scu.apu.pt_on            mc:            55.
      100000    scu.apu.sdwm             mc:            52.
        1000    scu.apu.sdwnp            mc:            58.
         400    scu.apu.sdwp             mc:            59.
       40000    scu.apu.sd_on            mc:            53.
      200000    scu.apu.xsf              mc:            51.
           0    scu.apu_stat_word        mc:            49.
          22    scu.ca_shift             mc:           209.
           5    scu.ca_word              mc:           208.
         700    scu.con_chan_mask        mc:           117.
           6    scu.con_chan_shift       mc:           118.
         700    scu.cpu_no_mask          mc:           141.
           2    scu.cpu_no_word          mc:           139.
           6    scu.cpu_shift            mc:           142.
           7    scu.cpu_tag_mask         mc:           234.
           5    scu.cpu_tag_word         mc:           232.
         100    scu.cu.if                mc:           229.
        1000    scu.cu.poa               mc:           226.
       10000    scu.cu.pon               mc:           221.
       20000    scu.cu.pot               mc:           220.
      100000    scu.cu.rd                mc:           217.
      400000    scu.cu.rf                mc:           214.
         400    scu.cu.rfi               mc:           227.
       40000    scu.cu.rl                mc:           218.
      200000    scu.cu.rpt               mc:           216.
        4000    scu.cu.xde               mc:           223.
        2000    scu.cu.xdo               mc:           224.
           5    scu.cu_stat_word         mc:           212.
          77    scu.delta_mask           mc:           147.
           2    scu.delta_word           mc:           145.
          36    scu.even_inst_word       mc:           239.
           7    scu.fault_cntr_mask      mc:            69.
           0    scu.fault_cntr_word      mc:            67.
           1    scu.fault_data_word      mc:            75.
          10    scu.fd.am_er             mc:            91.
         200    scu.fd.boc               mc:            87.
          40    scu.fd.crt               mc:            89.
      100000    scu.fd.e_off             mc:            79.
      100000    scu.fd.ia_im             mc:           102.
         100    scu.fd.inret             mc:            88.
      200000    scu.fd.ioc               mc:           101.
       20000    scu.fd.ipr               mc:           104.
      400000    scu.fd.iro               mc:            77.
      400000    scu.fd.isn               mc:           100.
       40000    scu.fd.isp               mc:           103.
       10000    scu.fd.nea               mc:           105.
        2000    scu.fd.no_ga             mc:            84.
         400    scu.fd.ocall             mc:            86.
        1000    scu.fd.ocb               mc:            85.
      200000    scu.fd.oeb               mc:            78.
      400000    scu.fd.onc_1             mc:            96.
      200000    scu.fd.onc_2             mc:            97.
        4000    scu.fd.oobb              mc:           106.
           4    scu.fd.oosb              mc:            92.
       40000    scu.fd.orb               mc:            80.
       10000    scu.fd.owb               mc:            82.
           1    scu.fd.parl              mc:            94.
           2    scu.fd.paru              mc:            93.
          20    scu.fd.ralr              mc:            90.
       20000    scu.fd.r_off             mc:            81.
        4000    scu.fd.w_off             mc:            83.
           1    scu.fi_flag_mask         mc:           123.
          76    scu.fi_num_mask          mc:           120.
           1    scu.fi_num_shift         mc:           121.
        7000    scu.iac_mask             mc:           114.
          11    scu.iac_shift            mc:           115.
      170000    scu.ial_mask             mc:           111.
          14    scu.ial_shift            mc:           112.
          22    scu.ilc_shift            mc:           184.
           4    scu.ilc_word             patch:        740,
                                         mc:           183.
           4    scu.indicators_word      mc:           187.
          20    scu.ir.abs               mc:           202.
         200    scu.ir.bm                mc:           199.
      100000    scu.ir.carry             mc:           191.
       20000    scu.ir.eovf              mc:           193.
       10000    scu.ir.eufl              mc:           194.
          40    scu.ir.mif               mc:           201.
      200000    scu.ir.neg               mc:           190.
        4000    scu.ir.oflm              mc:           195.
       40000    scu.ir.ovfl              mc:           192.
        1000    scu.ir.par               mc:           197.
         400    scu.ir.parm              mc:           198.
        2000    scu.ir.tro               mc:           196.
         100    scu.ir.tru               mc:           200.
      400000    scu.ir.zero              mc:           189.
          37    scu.odd_inst_word        mc:           241.
           1    scu.port_stat_word       mc:           109.
      400000    scu.ppr.p                mc:            45.
      700000    scu.ppr.prr_mask         mc:            35.
          41    scu.ppr.prr_shift        mc:            36.
           0    scu.ppr.prr_word         mc:            34.
       77777    scu.ppr.psr_mask         mc:            40.
          22    scu.ppr.psr_shift        mc:            41.
           0    scu.ppr.psr_word         mc:            39.
           0    scu.ppr.p_word           mc:            44.
          77    scu.tpr.tbr_mask         mc:           177.
           3    scu.tpr.tbr_word         mc:           175.
      700000    scu.tpr.trr_mask         mc:           130.
          41    scu.tpr.trr_shift        mc:           131.
           2    scu.tpr.trr_word         mc:           129.
       77777    scu.tpr.tsr_mask         mc:           135.
          22    scu.tpr.tsr_shift        mc:           136.
           2    scu.tpr.tsr_word         mc:           134.
      700000    scu.tsna.prn_mask        mc:           159.
          17    scu.tsna.prn_shift       mc:           160.
       40000    scu.tsna.prv             mc:           161.
      740000    scu.tsna_mask            mc:           158.
       34000    scu.tsnb.prn_mask        mc:           164.
          13    scu.tsnb.prn_shift       mc:           165.
        2000    scu.tsnb.prv             mc:           166.
       36000    scu.tsnb_mask            mc:           163.
        1600    scu.tsnc.prn_mask        mc:           169.
           7    scu.tsnc.prn_shift       mc:           170.
         100    scu.tsnc.prv             mc:           171.
          13    scu.tsnc_mask            mc:           168.
      777700    scu.tsr_stat_mask        mc:           155.
           6    scu.tsr_stat_shift       mc:           156.
           3    scu.tsr_stat_word        mc:           153.
        1224    sdw                      patch:        239,  244,  829.
          14    sdw.add_shift            bos_sdw:        4.
      377770    sdw.bound                bos_sdw:       12.
       40000    sdw.cache                bos_sdw:       20.
           4    sdw.df                   patch:        557,
                                         bos_sdw:        9.
       37777    sdw.entry_bound          bos_sdw:       21.
      100000    sdw.entry_bound_sw       bos_sdw:       19.
           2    sdw.execute              bos_sdw:       14.
           3    sdw.fault_code           bos_sdw:       10.
      400000    sdw.privileged           bos_sdw:       17.
        7000    sdw.r1                   bos_sdw:        5.
         700    sdw.r2                   bos_sdw:        6.
          70    sdw.r3                   bos_sdw:        7.
           4    sdw.read                 bos_sdw:       13.
      200000    sdw.unpaged              bos_sdw:       18,
                                         bos_sstnt_man:      105.
           1    sdw.write                bos_sdw:       15.
       12204    search                   patch:        112,
                                         bos_tv:        25.
       12230    sect_per_cyl_list        bos_tv:        45.
       12231    sect_per_dev_list        bos_tv:        46.
        7000    seg6length               bos_common:    90.
        1226    segno                    patch:        232,  586,  590,  830.
          10    seg_aste.usage           aste:         147.
          14    seg_aste_size            aste:         144.
          47    set                      patch:         95,  765.
         364    set1                     patch:        297,  344.
         442    setdbl                   patch:        352,  395.
         423    setfull                  patch:        347,  356,  368,  375,  383.
         377    setinx                   patch:        351,  358.
         412    setlh                    patch:        348,  370.
         417    setrh                    patch:        349,  377.
        1230    setsw                    patch:         92,   97,  180,  296,  492,  832.
        2004    setuparea                bos_common:    49.
        2025    skipsw                   bos_common:    64.
        7042    sltsearch                bos_sstnt_man:       27,
                                         segname:       31,
                                         apnd_equ:      35.
        7011    sltseg                   fill:          65,
                                         apnd_equ:      15.
        1214    space                    patch:        659,  673,  812.
        1217    spaceloop                patch:        815,  818.
        1222    sptally                  patch:        814,  817,  820.
        1223    sptally0                 patch:        813,  821.
        1414    ssn.gthan                bos_sstnt_man:       85,  188.
        1412    ssn.root_astep           bos_sstnt_man:       40,   81,  132,  207.
        1410    ssn.sstbase              bos_sstnt_man:       21,   25,   78,  108,  110.
        1421    ssn.sstnt                bos_sstnt_man:       46,   49,   89,  148,  155,  157,  158.
        1415    ssn.sstntname            bos_sstnt_man:       28,   86.
        1406    ssn.sstnt_sdw            bos_sstnt_man:       33,   45,   76,  163.
        1413    ssn.valid                bos_sstnt_man:       17,   51,   83,  103.
        1371    ssni.fail                bos_sstnt_man:       29,   31,   32,   38,   47,   62.
        1370    ssni.x2                  bos_sstnt_man:       15,   56,   65,   70.
           3    sst                      bos_page_info:        9,   10,   11,   13.
         220    sst.abs_wired_count      sst:          135.
         245    sst.acost                sst:          150.
      400000    sst.activate_activated   sst:          227.
         537    sst.activations          sst:          206.
          52    sst.ainitp               sst:           53.
          52    sst.ainitp1              sst:           54.
         250    sst.alaps                sst:          153.
         234    sst.aneedsize            sst:          144.
         242    sst.asearches            sst:          147.
         247    sst.askipdius            sst:          152.
         241    sst.askipsehs            sst:          146.
         244    sst.askipsinit           sst:          149.
         230    sst.askipsize            sst:          143.
         243    sst.askipslevel          sst:          148.
         246    sst.askipslock           sst:          151.
          30    sst.astap                sst:           35.
         260    sst.asteps               sst:          160.
          21    sst.astl                 sst:           26.
          22    sst.astl_event           sst:           27.
      400000    sst.astl_notify_requested      sst:           30.
          23    sst.astl_notify_requested_word       sst:           29.
          34    sst.astsize              sst:           38.
          74    sst.ast_ht_n_buckets     sst:           82.
          72    sst.ast_ht_ptr           sst:           81.
          75    sst.ast_ht_uid_mask      sst:           83.
         264    sst.ast_locked_at_time   sst:          161.
         266    sst.ast_locked_total_time      sst:          162.
         272    sst.ast_locking_count    sst:          164.
         270    sst.ast_lock_wait_time   sst:          163.
      400000    sst.ast_track            sst:          292.
         774    sst.ast_track_word       sst:          291.
          50    sst.atempp               sst:           47.
          50    sst.atempp1              sst:           48.
         133    sst.aused                sst:          113.
          44    sst.ausedp               sst:           44.
         557    sst.backup_activations   sst:          224.
         533    sst.bad_sgms             sst:          202.
         674    sst.buckets              sst:          289.
         673    sst.bucket_overflow      sst:          288.
          32    sst.bulk_pvtx            sst:           36.
         122    sst.ceiling              sst:          104.
          77    sst.checksum_filemap     sst:           85.
         504    sst.claim_notmod         sst:          177.
         505    sst.claim_passed_used    sst:          178.
         536    sst.claim_runs           sst:          205.
         502    sst.claim_skip_cme       sst:          175.
         503    sst.claim_skip_free      sst:          176.
         506    sst.claim_skip_ptw       sst:          179.
         510    sst.claim_steps          sst:          181.
         507    sst.claim_writes         sst:          180.
         274    sst.cleanups_with_any_rws      sst:          166.
         273    sst.cleanup_count        sst:          165.
         276    sst.cleanup_real_time    sst:          168.
         275    sst.cleanup_rws_count    sst:          167.
          71    sst.cl_skips_pinned      sst:           80.
          35    sst.cmesize              sst:           39.
          54    sst.cmp                  sst:           57.
         672    sst.count_pdmes          sst:          287.
         256    sst.cpu_bf_time          sst:          159.
         164    sst.cpu_sf_time          sst:          123.
         123    sst.ctwait               sst:          105.
         104    sst.cycle_pv_allocation  sst:           90.
         134    sst.damaged_ct           sst:          114.
         527    sst.dblw_resurrections   sst:          199.
         135    sst.deact_count          sst:          115.
         137    sst.demand_deactivations       sst:          117.
         136    sst.demand_deact_attempts      sst:          116.
         775    sst.dirlock_writebehind  sst:          294.
         540    sst.dir_activations      sst:          207.
         114    sst.dir_page_faults      sst:           98.
      400000    sst.dm_enabled           sst:           51.
          51    sst.dm_enabled_word      sst:           50.
          62    sst.double_write         sst:           67.
         543    sst.evict_phmbit         sst:          213.
         543    sst.evict_ptp            sst:          212.
         543    sst.evict_recover_data   sst:          210.
          70    sst.fc_skips_pinned      sst:           79.
         224    sst.first_core_block     sst:          139.
         545    sst.force_pwrites        sst:          216.
         544    sst.force_swrites        sst:          215.
         547    sst.force_updatevs       sst:          218.
         546    sst.fw_none              sst:          217.
         226    sst.fw_retries           sst:          141.
         535    sst.good_sgms            sst:          204.
         541    sst.hedge_updatevs       sst:          208.
         542    sst.hedge_writes         sst:          209.
         125    sst.laps                 sst:          107.
         225    sst.last_core_block      sst:          140.
         670    sst.last_update          sst:          286.
          44    sst.level                sst:           42.
         113    sst.level_1_page_faults  sst:           97.
         110    sst.lock_waits           sst:           94.
         161    sst.loop_locks           sst:          121.
         162    sst.loop_lock_time       sst:          122.
         556    sst.makeknown_activations      sst:          223.
         560    sst.metering_flags       sst:          225.
          76    sst.meter_ast_locking    sst:           84.
         624    sst.mod_during_write     sst:          256.
         121    sst.needc                sst:          103.
         641    sst.new_pages            sst:          276.
      400000    sst.nolock               sst:           75.
          66    sst.nolock_word          sst:           74.
          44    sst.no_aste              sst:           45.
          16    sst.npfs_misses          sst:           23.
         612    sst.nrecs_pdmap          sst:          246.
          24    sst.nused                sst:           32.
         105    sst.n_trailers           sst:           91.
         523    sst.oopv                 sst:          195.
         100    sst.page_read_errors     sst:           86.
         101    sst.page_write_errors    sst:           87.
         525    sst.pcrsst_statptr       sst:          197.
         117    sst.pc_io_waits          sst:          101.
           2    sst.pc_trace             sst:          273.
          10    sst.pc_trace_pf          sst:          271.
         524    sst.pdflush_replaces     sst:          196.
         602    sst.pdhtp                sst:          237.
         112    sst.pdir_page_faults     sst:           96.
         600    sst.pdmap                sst:          236.
         634    sst.pdmap_astep          sst:          266.
         606    sst.pdme_no              sst:          240.
         605    sst.pdsize               sst:          239.
         607    sst.pdusedp              sst:          242.
         617    sst.pd_ceiling           sst:          251.
         515    sst.pd_desperations      sst:          186.
         520    sst.pd_desperations_not_mod    sst:          192.
         514    sst.pd_desperation_steps       sst:          185.
         610    sst.pd_first             sst:          244.
         613    sst.pd_free              sst:          247.
         633    sst.pd_hash_mask         sst:          264.
         632    sst.pd_htsize            sst:          262.
         604    sst.pd_id                sst:          238.
         611    sst.pd_map_addr          sst:          245.
         623    sst.pd_needed            sst:          255.
         627    sst.pd_no_free           sst:          259.
         666    sst.pd_no_free_first     sst:          284.
         664    sst.pd_no_free_gtpd      sst:          282.
         665    sst.pd_page_faults       sst:          283.
         630    sst.pd_read_truncates    sst:          260.
         526    sst.pd_resurrections     sst:          198.
         626    sst.pd_rws_active        sst:          258.
         621    sst.pd_skips_incore      sst:          253.
         622    sst.pd_skips_rws         sst:          254.
         620    sst.pd_steps             sst:          252.
         650    sst.pd_time_counts       sst:          280.
         654    sst.pd_time_values       sst:          281.
         512    sst.pd_updates           sst:          183.
         614    sst.pd_using             sst:          248.
      400000    sst.pd_writeahead        sst:          190.
         517    sst.pd_writeahead_word   sst:          189.
         616    sst.pd_writes            sst:          250.
         625    sst.pd_write_aborts      sst:          257.
         631    sst.pd_write_truncates   sst:          261.
         615    sst.pd_wtct              sst:          249.
         637    sst.pd_zero_pages        sst:          268.
         554    sst.pf_pd_loop_meterings       sst:          221.
         550    sst.pf_pd_loop_time      sst:          219.
         555    sst.pf_unlock_ptl_meterings    sst:          222.
         552    sst.pf_unlock_ptl_time   sst:          220.
          14    sst.post_in_core         sst:           21.
         171    sst.post_list_size       sst:          127.
         173    sst.post_purge_calls     sst:          129.
          12    sst.post_purge_time      sst:           20.
         172    sst.post_purgings        sst:          128.
         400    sst.pp_meters            sst:          170.
         174    sst.pre_page_calls       sst:          130.
         175    sst.pre_page_list_size   sst:          131.
         176    sst.pre_page_misses      sst:          132.
         170    sst.pre_page_size        sst:          126.
          10    sst.pre_page_time        sst:           19.
         177    sst.pre_pagings          sst:          133.
         513    sst.pre_seeks_failed     sst:          184.
          20    sst.ptl                  sst:           25.
          33    sst.ptl_wait_ct          sst:           37.
          40    sst.pts                  sst:           41.
          25    sst.ptwbase              sst:           33.
      400000    sst.ptw_first            sst:           72.
          65    sst.ptw_first_word       sst:           71.
         227    sst.pvhtp                sst:          142.
         140    sst.reads                sst:          118.
         223    sst.recopies             sst:          138.
          61    sst.removep              sst:           65.
         521    sst.resurrections        sst:          193.
         115    sst.ring_0_page_faults   sst:           99.
          36    sst.root_astep           sst:           40,
                                         bos_sstnt_man:       35.
          64    sst.root_pvtx            sst:           69.
         116    sst.rqover               sst:          100.
         511    sst.rws_reads_os         sst:          182.
         102    sst.rws_read_errors      sst:           88.
         646    sst.rws_time_done        sst:          279.
         644    sst.rws_time_start       sst:          278.
         642    sst.rws_time_temp        sst:          277.
         103    sst.rws_write_errors     sst:           89.
          17    sst.salv                 sst:           24.
           1    sst.sc_trace             sst:          274.
         561    sst.seg_fault_calls      sst:          229.
         253    sst.setfaults_acc        sst:          156.
         252    sst.setfaults_all        sst:          155.
         532    sst.sgm_pf               sst:          201.
         534    sst.sgm_sgft             sst:          203.
         530    sst.sgm_time             sst:          200.
         160    sst.short_pf_count       sst:          120.
         130    sst.skipm                sst:          110.
         131    sst.skipos               sst:          111.
         132    sst.skipspd              sst:          112.
         516    sst.skips_nypd           sst:          187.
         127    sst.skipu                sst:          109.
         126    sst.skipw                sst:          108.
           0    sst.space                sst:           18.
          60    sst.startp               sst:           63.
         120    sst.steps                sst:          102.
         240    sst.stepsa               sst:          145.
         566    sst.stk_pages_truncated  sst:          234.
         567    sst.stk_pages_truncated_in_core      sst:          235.
         565    sst.stk_truncate_shouldnt_did  sst:          233.
         564    sst.stk_truncate_shouldnt_didnt      sst:          232.
         563    sst.stk_truncate_should_did    sst:          231.
         562    sst.stk_truncate_should_didnt  sst:          230.
          53    sst.strsize              sst:           56.
         106    sst.synch_activations    sst:           92.
         107    sst.synch_skips          sst:           93.
         221    sst.system_type          sst:          136.
          63    sst.temp_w_event         sst:           68.
          26    sst.tfreep               sst:           34.
          15    sst.thrashing            sst:           22.
         254    sst.total_bf             sst:          157.
         255    sst.total_bf_pf          sst:          158.
         111    sst.total_locks_set      sst:           95.
         167    sst.total_sf             sst:          125.
         166    sst.total_sf_pf          sst:          124.
         640    sst.trace_sw             sst:          269.
         300    sst.tree_count           sst:          169.
           4    sst.tty_trace            sst:          272.
         251    sst.updates              sst:          154.
         667    sst.update_index         sst:          285.
          56    sst.usedp                sst:           59.
         522    sst.volmap_seg_page_faults     sst:          194.
         124    sst.wired                sst:          106.
         222    sst.wired_copies         sst:          137.
         200    sst.wire_proc_data       sst:          134.
         150    sst.writes               sst:          119.
         501    sst.write_hunts          sst:          174.
         776    sst.write_limit          sst:          295.
          57    sst.wtct                 sst:           61.
         500    sst.wusedp               sst:          172.
          67    sst.x_fsdctp             sst:           77.
         636    sst.zero_pages           sst:          267.
          14    sstnt.ast_name_offsets   sstnt:         14,
                                         bos_sstnt_man:      158.
          20    sstnt.ast_offsets        sstnt:         16,
                                         bos_sstnt_man:      148,  155.
          10    sstnt.ast_sizes          sstnt:         12,
                                         bos_sstnt_man:      157.
           2    sstnt.fill_time          sstnt:         10.
           1    sstnt.multics_or_bos     sstnt:          8.
          30    sstnt.names              sstnt:         18,
                                         bos_sstnt_man:       46,   90,  160.
      400000    sstnt.valid              sstnt:          6.
           0    sstnt.valid_word         sstnt:          5,
                                         bos_sstnt_man:       49.
          11    sstnt_name_length        sstnt:         20,
                                         bos_sstnt_man:      159,  164,  247.
        1376    sstnt_not_valid          bos_sstnt_man:       50,   67.
        6000    sstn_org                 patch:        600,  603,
                                         sstn_equ:       6.
        7016    sstsdw                   bos_sstnt_man:       19,   37,  117,  201,
                                         apnd_equ:      19.
        1000    sst_size                 sst:           15.
        2000    storlen                  bos_common:    36.
       12262    stripa                   bos_tv:        71.
       12263    stripg                   bos_tv:        72.
        2015    tapechanno               bos_common:    56.
        1242    temp                     patch:        307,  313,  354,  355,  630,  632,  634,  658,  661,  841.
           1    tmp                      patch:        145,  208,
                                         bosequ:         8.
        2017    ttychanno                bos_common:    58.
       12245    ttyinit                  patch:         39,
                                         bos_tv:        58.
        2026    ttypmtsw                 bos_common:    65.
          20    ttyrequest               patch:         40,   55.
       12200    tv_org                   bos_tv:        19,   21,   22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
                                                        32,   33,   34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
                                                        44,   45,   46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
                                                        56,   57,   58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
                                                        68,   69,   70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
                                                        80,   81,   82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
                                                        92,   93,   94,   95,   96.
       12244    type                     patch:        640,
                                         bos_tv:        57.
        7033    unapnd                   patch:        249,
                                         apnd_equ:      28.
        7040    unfetch                  patch:        149,  212,  267,
                                         apnd_equ:      33.
        2013    unitgroup                bos_common:    54.
        2002    useable                  bos_common:    46.
        2001    used                     bos_common:    45.
           4    used_bit_off             bos_page_info:       26.
        2005    utilarea                 bos_common:    50.
       12000    utilorg                  bosequ:        22,
                                         bos_tv:        12,   19.
       12301    wantflt                  bos_tv:        86.
       12212    wdev                     bos_tv:        31.
         663    werr                     patch:        150,  213,  250,  268,  523.
          10    working_set              bos_page_info:       23.
           2    write_entry              bos_page_info:       16.
       12235    wtsec                    bos_tv:        50.
        1020    x2                       patch:         33,   47,  657,  663.
       12277    xio_wait                 bos_tv:        84.
           4    xs1                      bosequ:        11.
           5    xs2                      bosequ:        12.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
