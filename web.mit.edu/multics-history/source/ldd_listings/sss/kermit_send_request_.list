	COMPILATION LISTING OF SEGMENT kermit_send_request_
	Compiled by: Multics PL/I Compiler, Release 30, of February 16, 1988
	Compiled at: Honeywell Bull, Phoenix AZ, SysM
	Compiled on: 07/05/88  1401.3 mst Tue
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 
        7 kermit_send_request_: proc (kermit_scip, infop);
        8 
        9 /**********************************************************************/
       10 /*							*/
       11 /*n	Name:	 kermit_send_request_		external	*/
       12 /*i	Input:	 kermit_scip, infop				*/
       13 /*f	Function:  checks the request line.			*/
       14 /*f		 calls kermit_get_filenames to extract the	*/
       15 /*f		 filenames from the request_line. Sets up the	*/
       16 /*f		 communications environment for file transfer. 	*/
       17 /*f		 Informs the user of the success of the  	*/
       18 /*f		 transaction.				*/
       19 /*o	Output:	 none					*/
       20 /*							*/
       21 /*l	Written:	84-10-23	by Maureen Mallmes			*/
       22 /*l	Modified:	85-01-17	by Maureen Mallmes to detect invalid	*/
       23 /*l			control arguments.  See problem number	*/
       24 /*l			3 in the kermit error list.		*/
       25 /*							*/
       26 /**********************************************************************/
       27 
       28 
       29 /*  automatic  */
       30 
       31 	dcl     arg_idx		 fixed binary;
       32 	dcl     arg_lth		 fixed binary (21);
       33 	dcl     arg_ptr		 ptr;
       34 	dcl     argument		 character (arg_lth) based (arg_ptr);
       35 	dcl     argument_count	 fixed bin;
       36 	dcl     01 cl_info_struc	 aligned,
       37 		02 resetread	 bit (1) unal,
       38 		02 mbz		 bit (35) unal;
       39 	dcl     code		 fixed bin (35);
       40 	dcl     infop		 ptr;
       41 	dcl     filenames_areap	 ptr;
       42 	dcl     file_sw		 bit (1);
       43 	dcl     files_sent		 fixed bin;
       44 	dcl     first_filename	 char (168);
       45 	dcl     kermit_scip		 ptr;
       46 	dcl     reason		 char (256);
       47 	dcl     source_file_sw	 bit (1);
       48 	dcl     source_files	 char (168);
       49 	dcl     transfer_modes_set	 bit (1);
       50 
       51 /*  based  */
       52 
       53 	dcl     01 filenames	 like kermit_filenames based (filenames_areap);
       54 
       55 /*  constants  */
       56 
       57 	dcl     False		 bit (1) internal static options (constant) init ("0"b);
       58 	dcl     Five_seconds	 fixed bin (71) internal static options (constant) init (5);
       59 	dcl     True		 bit (1) internal static options (constant) init ("1"b);
       60 
       61 /*  builtin  */
       62 
       63 	dcl     (addr, index, null)	 builtin;
       64 
       65 
       66 /*  externals  */
       67 
       68 	dcl     error_table_$badopt	 fixed bin (35) ext static;
       69 	dcl     error_table_$too_many_args fixed bin (35) ext static;
       70 
       71 
       72 /*  procedures  */
       73 
       74 	dcl     continue_to_signal_	 entry (fixed bin (35));
       75 	dcl     cu_$cl		 entry (1 aligned, 2 bit (1) unal, 2 bit (35) unal);
       76 	dcl     ioa_		 entry () options (variable);
       77 	dcl     timer_manager_$sleep	 entry (fixed bin (71), bit (2));
       78 	dcl     ssu_$abort_line	 entry () options (variable);
       79 	dcl     ssu_$arg_count	 entry (ptr, fixed bin);
       80 	dcl     ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));
       81 	dcl     ssu_$get_request_name	 entry (ptr) returns (char (32));
       82 	dcl     ssu_$get_temp_segment	 entry (ptr, char (*), ptr);
       83 	dcl     ssu_$release_temp_segment entry (ptr, ptr);
       84 
       85 /*  Conditions  */
       86 
       87 	dcl     cleanup		 condition;
       88 	dcl     quit		 condition;
       89 
       90 /*  Include files  */
       91 
  1     1 /*  START OF:	kermit_dcls.incl.pl1		  *  *  *  *  *  */
  1     2   
  1     3   /********************************************************************/
  1     4   /*							*/
  1     5   /*n	kermit_dcls					*/
  1     6   /*							*/
  1     7   /*d	This include file contains the declarations of the external	*/
  1     8   /*d	kermit entrypoints that are called by other modules within	*/
  1     9   /*d	kermit as well as an explanation of the parameters.	*/
  1    10   /*							*/
  1    11   /*l	Written:	84-10-11	by Dean Elhard			*/
  1    12   /*							*/
  1    13   /********************************************************************/
  1    14   
  1    15   dcl kermit_comm_mgr_$flush_input
  1    16 			entry
  1    17 	(ptr,			/* kermit info ptr		*/
  1    18 	fixed bin(35));		/* error code		*/
  1    19   
  1    20   dcl kermit_comm_mgr_$reset_line_modes
  1    21 			entry
  1    22 	(ptr,			/* kermit info ptr		*/
  1    23 	fixed bin(35));		/* error code		*/
  1    24   
  1    25   dcl kermit_comm_mgr_$set_line_modes
  1    26 			entry
  1    27 	(ptr,			/* kermit info ptr		*/
  1    28 	fixed bin(35));		/* error code		*/
  1    29   
  1    30   dcl kermit_get_filenames_	entry
  1    31 	(ptr,			/* kermit info ptr		*/
  1    32 	 char(*),			/* argument		*/
  1    33 	 ptr,			/* filename ptr		*/
  1    34 	 char(*),			/* reason			*/
  1    35 	 fixed bin(35));		/* error code		*/
  1    36   
  1    37   dcl kermit_log_mgr_$close_log
  1    38 			entry
  1    39 	(ptr,			/* kermit info ptr		*/
  1    40 	 fixed bin (35));		/* error code		*/
  1    41   
  1    42   dcl kermit_log_mgr_$disable	entry
  1    43   	(ptr,			/* kermit info ptr		*/
  1    44 	 fixed bin (35));		/* error code		*/
  1    45   
  1    46   dcl kermit_log_mgr_$display_stats
  1    47 			entry	/* statistics command	*/
  1    48   	(ptr,			/* sci ptr		*/
  1    49 	 ptr);			/* kermit info ptr		*/
  1    50   
  1    51   dcl kermit_log_mgr_$enable	entry
  1    52 	(ptr,			/* kermit info ptr		*/
  1    53 	 fixed bin (35));		/* error code		*/
  1    54   
  1    55   dcl kermit_log_mgr_$log_message
  1    56 			entry 
  1    57 	(ptr,			/* kermit info ptr		*/
  1    58 	 ptr);			/* log info ptr		*/
  1    59   
  1    60   dcl kermit_log_mgr_$open_log
  1    61 			entry 
  1    62 	(ptr,			/* kermit info ptr		*/
  1    63 	 char (*) varying,		/* log file name		*/
  1    64 	 fixed bin (35));		/* error code		*/
  1    65   
  1    66   dcl kermit_log_mgr_$start	entry	/* start log command	*/
  1    67   	(ptr,			/* sci ptr		*/
  1    68 	 ptr);			/* kermit info ptr		*/
  1    69   
  1    70   dcl kermit_log_mgr_$stop	entry	/* stop log command		*/
  1    71 	(ptr,			/* sci ptr		*/
  1    72 	 ptr);			/* kermit info ptr		*/
  1    73   
  1    74   dcl kermit_mode_mgr_$get	entry	/* get modes command	*/
  1    75 	(ptr,			/* sci ptr		*/
  1    76 	 ptr);			/* kermit info ptr		*/
  1    77   
  1    78   dcl kermit_mode_mgr_$retrieve
  1    79 			entry
  1    80 	(ptr,			/* kermit info ptr		*/
  1    81 	 fixed bin,		/* permanent/temporary select	*/
  1    82 	 (*) fixed bin,		/* mode selector array	*/
  1    83 	 ptr,			/* mode value ptr		*/
  1    84 	 fixed bin (35));		/* error code		*/
  1    85   
  1    86   dcl kermit_mode_mgr_$set	entry	/* set modes command	*/
  1    87 	(ptr,			/* sci ptr		*/
  1    88 	 ptr);			/* kermit info ptr		*/
  1    89   
  1    90   dcl kermit_mode_mgr_$store	entry
  1    91 	(ptr,			/* kermit info ptr		*/
  1    92 	 fixed bin,		/* permanent/temporary select	*/
  1    93 	 (*) fixed bin,		/* mode selector array	*/
  1    94 	 ptr,			/* mode value ptr		*/
  1    95 	 fixed bin (35));		/* error code		*/
  1    96   
  1    97   dcl kermit_pad_$receive	entry
  1    98 	(ptr,			/* kermit info ptr		*/
  1    99 	 char (1),		/* packet type		*/
  1   100   	 ptr,			/* buffer pointer		*/
  1   101 	 fixed bin (21),		/* buffer length		*/
  1   102 	 fixed bin,		/* sequence number		*/
  1   103 	 fixed bin (21),		/* chars received		*/
  1   104 	 fixed bin (21),		/* packet size		*/
  1   105 	 bit (1),			/* CR/NL split flag		*/
  1   106 	 fixed bin (35));		/* error code		*/
  1   107   
  1   108   dcl kermit_pad_$send	entry
  1   109   	(ptr,			/* kermit info ptr		*/
  1   110 	 char (1),		/* packet type		*/
  1   111 	 ptr,			/* data ptr		*/
  1   112 	 fixed bin (21),		/* data length		*/
  1   113 	 fixed bin,		/* sequence number		*/
  1   114 	 fixed bin (21),		/* chars transmitted	*/
  1   115 	 fixed bin (21),		/* packet length		*/
  1   116 	 fixed bin (35));		/* error code		*/
  1   117   
  1   118   dcl kermit_receive_$receive_from_remote
  1   119 			entry
  1   120 	(ptr,			/* kermit info ptr		*/
  1   121 	 fixed bin,		/* initial state		*/
  1   122 	 fixed bin,                   /* initial sequence number    */
  1   123 	 char (*),		/* user filename (first file)	*/
  1   124 	 bit (1),			/* =1 if user gave filename	*/
  1   125 	 fixed bin,		/* number of files received	*/
  1   126 	 fixed bin (35));		/* error code		*/
  1   127 
  1   128   dcl kermit_send_$send_to_remote
  1   129 			entry 
  1   130 	(ptr,			/* kermit info ptr		*/
  1   131 	 ptr,			/* filenames area ptr	*/
  1   132 	 char (*),		/* user filename (first file)	*/
  1   133 	 bit (1),			/* =1 if user gave filename	*/
  1   134 	 fixed bin,                   /* number of files sent       */
  1   135 	 fixed bin (35));		/* error code		*/
  1   136 
  1   137 
  1   138   dcl kermit_server_
  1   139 			entry 
  1   140 	(ptr,			/* kermit info ptr		*/
  1   141 	 ptr);			/* filenames area ptr	*/
  1   142 
  1   143 
  1   144   dcl kermit_xfer_modes_$check_params
  1   145 			entry
  1   146 	(ptr,			/*  kermit info ptr		*/
  1   147 	 ptr,			/*  remote parameters	*/
  1   148 	 fixed bin (21),		/*  remote parameters length	*/
  1   149 	 ptr,                         /*  local parameters          */
  1   150 	 fixed bin (35));		/*  error code		*/
  1   151 
  1   152   dcl kermit_xfer_modes_$init 
  1   153 			entry
  1   154 	(ptr,			/*  ptr to kermit info	*/
  1   155 	 fixed bin (35));		/*  error code		*/
  1   156 
  1   157   dcl kermit_xfer_modes_$get_local_params
  1   158 			entry
  1   159 	(ptr,			/*  kermit info ptr		*/
  1   160 	 ptr,			/*  local parameters	*/
  1   161  	 fixed bin (21),		/*  local parameters length	*/
  1   162 	 ptr,			/*  encoded parameters	*/
  1   163 	 fixed bin (21),		/*  encoded parameters length */
  1   164 	 fixed bin (35));		/*  error code		*/
  1   165 
  1   166   dcl kermit_xfer_modes_$process_params
  1   167 			entry
  1   168 	(ptr,			/*  kermit info ptr		*/
  1   169 	 ptr,			/*  remote parameters	*/
  1   170 	 fixed bin (21),		/*  remote parameters length	*/
  1   171 	 ptr,                         /*  local parameters          */
  1   172 	 fixed bin (35));		/*  error code		*/
  1   173 
  1   174 /*  END OF:	kermit_dcls.incl.pl1		  *  *  *  *  *  */
       92 
       93 
  2     1 /*  START OF:	kermit_transfer_info.incl.pl1		  *  *  *  *  *  */
  2     2 		  
  2     3   
  2     4 
  2     5 /****^  HISTORY COMMENTS:
  2     6*  1) change(88-05-16,Huen), approve(88-05-16,MCR7841), audit(88-05-25,RWaters),
  2     7*     install(88-07-05,MR12.2-1054):
  2     8*     Fix kermit 15, 16, 17, and 18.
  2     9*                                                   END HISTORY COMMENTS */
  2    10 
  2    11 
  2    12 /********************************************************************/
  2    13   /*							*/
  2    14   /*n	kermit_transfer_info				*/
  2    15   /*							*/
  2    16   /*d	This data structure is the info structure used              */
  2    17   /*d	during file transfer.				*/
  2    18   /*							*/
  2    19   /*l	Written:	84-10-11	by Maureen Mallmes			*/
  2    20   /*l     Modified: 87-06-19  by Don Kozlowski - Add flags in kti     */
  2    21   /*l                         structure. (kermit 15)                  */
  2    22   /*l     Modified: 87-07-22  by Don Kozlowski - Add msf flag in      */
  2    23   /*l                         kti structure. (kermit 17)              */
  2    24   /*							*/
  2    25   /********************************************************************/
  2    26   
  2    27   dcl 01 kermit_transfer_info	aligned based (transfer_infop),
  2    28         02 retry_count	fixed bin (21),	/*  for current packet   */
  2    29         02 retry_threshold	fixed bin (8) unal,	/*  maximum retries	     */
  2    30         02 sequence_n	fixed bin,	/*  sequence number	     */
  2    31         02 filenamesp	ptr,		/*  ptr to filenames     */
  2    32         02 filenames_idx	fixed bin,	/*  current filename     */
  2    33         02 filep		ptr,		/*  start of file ptr    */
  2    34         02 buffp		ptr,		/*  file data ptr        */
  2    35         02 msf_count	fixed bin (21),	/*  msf segments to send */
  2    36         02 msf_current	fixed bin (21),	/*  current msf module   */
  2    37         02 file_count         fixed bin,	/*  per transaction	     */
  2    38         02 statisticsp	ptr,		/*  statistics info ptr  */
  2    39         02 flags,
  2    40 	03 msf		bit (1), 		/*  Is this an MSF	     */
  2    41 	03 owe_a_cr	bit (1), 		/*  Holding back a CR    */
  2    42 	03 pad		bit (34),
  2    43         02 iocb_ptr		ptr;     		/*  for vfile_	     */
  2    44 	
  2    45 	
  2    46 
  2    47 dcl transfer_infop ptr;
  2    48 dcl kermit_transfer_info_version
  2    49 			char (9) static options (constant)
  2    50 			     init ("kti   1.1");
  2    51 
  2    52 
  2    53 
  2    54 
  2    55   /********************************************************************/
  2    56   /*							*/
  2    57   /*n	kermit_filenames					*/
  2    58   /*							*/
  2    59   /*d	This data structure defines the overlay for the filenames.	*/
  2    60   /*							*/
  2    61   /*l	Written:	84-10-11	by Maureen Mallmes			*/
  2    62   /*l	Modified:	84-11-05	by Dean Elhard to add archive support	*/
  2    63   /*							*/
  2    64   /********************************************************************/
  2    65 
  2    66 dcl 01 kermit_filenames	aligned based (kermit_transfer_info.filenamesp),
  2    67 	02 n_paths	fixed bin,
  2    68 	02 pathname	(0 refer (kermit_filenames.n_paths)) aligned,
  2    69 	 03 directory	char (168) unal,
  2    70 	 03 entry_name	char (32) unal,
  2    71 	 03 component	char (32) unal;
  2    72 
  2    73 
  2    74   /********************************************************************/
  2    75   /*							*/
  2    76   /*n	kermit_packets					*/
  2    77   /*							*/
  2    78   /*d	This data defines the packet types.			*/
  2    79   /*							*/
  2    80   /*l	Written:	84-10-11	by Maureen Mallmes			*/
  2    81   /*							*/
  2    82   /********************************************************************/
  2    83 
  2    84 
  2    85 dcl Data_packet char (1) internal static options (constant) init ("D");
  2    86 dcl Ack_packet char (1) internal static options (constant) init ("Y");
  2    87 dcl Nak_packet char (1) internal static options (constant) init ("N");
  2    88 dcl Send_init_packet char (1) internal static options (constant) init ("S");
  2    89 dcl Eot_packet char (1) internal static options (constant) init ("B");
  2    90 dcl File_header_packet char (1) internal static options (constant) init ("F");
  2    91 dcl Eof_packet char (1) internal static options (constant) init ("Z");
  2    92 dcl Error_packet char (1) internal static options (constant) init ("E");
  2    93 dcl Reserved_packet char (1) internal static options (constant) init ("T");
  2    94 
  2    95 
  2    96   /********************************************************************/
  2    97   /*							*/
  2    98   /*n	kermit_states					*/
  2    99   /*							*/
  2   100   /*d	This data defines the transfer states.                      */
  2   101   /*							*/
  2   102   /*l	Written:	84-10-11	by Maureen Mallmes			*/
  2   103   /*							*/
  2   104   /********************************************************************/
  2   105 
  2   106 dcl Rec_init  fixed bin internal static options (constant) init (0);
  2   107 dcl Rec_file_header  fixed bin internal static options (constant) init (1);
  2   108 dcl Rec_data  fixed bin internal static options (constant) init (2);
  2   109 dcl Rec_file_abort  fixed bin internal static options (constant) init (3);
  2   110 dcl Rec_abort  fixed bin internal static options (constant) init (4);
  2   111 dcl Rec_complete  fixed bin internal static options (constant) init (5);
  2   112 
  2   113 dcl Send_init fixed bin internal static options (constant) init (0);
  2   114 dcl Send_file_header fixed bin internal static options (constant) init (1);
  2   115 dcl Send_data fixed bin internal static options (constant) init (2);
  2   116 dcl Send_eof fixed bin internal static options (constant) init (3);
  2   117 dcl Send_break fixed bin internal static options (constant) init (4);
  2   118 dcl Send_abort fixed bin internal static options (constant) init (5);
  2   119 dcl Send_complete fixed bin internal static options (constant) init (6);
  2   120 
  2   121 
  2   122 /*  END OF:	kermit_transfer_info.incl.pl1		  *  *  *  *  *  */
       94 
       95 
       96 
       97 /*  Initialize variables  */
       98 
       99 	code = 0;
      100 	source_file_sw = False;
      101 	file_sw = False;
      102 	transfer_modes_set = False;
      103 	cl_info_struc.resetread = True;
      104 	cl_info_struc.mbz = False;
      105 
      106 	on quit begin;
      107 		if transfer_modes_set then do;
      108 						/*  Reset the modes for user input and output  */
      109 			call kermit_comm_mgr_$reset_line_modes (infop, code);
      110 			transfer_modes_set = False;
      111 						/*  Pass control  */
      112 			call cu_$cl (cl_info_struc);
      113 						/*  Back (restart) so set the modes for file transfer  */
      114 			call kermit_comm_mgr_$set_line_modes (infop, code);
      115 			transfer_modes_set = True;
      116 		     end;
      117 		else call continue_to_signal_ (0);	/* do nothing  */
      118 	     end;
      119 
      120 
      121 /* get storage for filenames  */
      122 
      123 	filenames_areap = null;
      124 
      125 	on cleanup call send_request_cleanup;
      126 
      127 	call ssu_$get_temp_segment (kermit_scip, "filenames", filenames_areap);
      128 
      129 /*  Usage  */
      130 	call ssu_$arg_count (kermit_scip, argument_count);
      131 	if argument_count = 0 then
      132 	     call ssu_$abort_line (kermit_scip, 0, "Usage: ^a local_source_path {remote_destination_path}", ssu_$get_request_name (kermit_scip));
      133 
      134 /*  get the arguments  */
      135 	do arg_idx = 1 to argument_count;
      136 	     call ssu_$arg_ptr (kermit_scip, arg_idx, arg_ptr, arg_lth);
      137 
      138 	     if index (argument, "-") ^= 1 then do;
      139 		     if ^source_file_sw then do;
      140 			     source_files = argument;
      141 			     source_file_sw = True;
      142 			end;
      143 
      144 		     else if ^file_sw then do;
      145 			     first_filename = argument;
      146 			     file_sw = True;
      147 			end;
      148 
      149 		     else call ssu_$abort_line (kermit_scip, error_table_$too_many_args, "^/Usage: ^a local_source_path {remote_destination_path}", ssu_$get_request_name (kermit_scip));
      150 		end;
      151 
      152 	     else call ssu_$abort_line (kermit_scip, error_table_$badopt, "^a", argument);
      153 	end;
      154 
      155 	call kermit_get_filenames_ (infop, source_files, filenames_areap,
      156 	     reason, code);
      157 	if code ^= 0
      158 	then call ssu_$abort_line (kermit_scip, code, "^a", reason);
      159 
      160 
      161 
      162 /*  ...greet the user  */
      163 	call ioa_ ("^/Sending ^d file(s)...", filenames.n_paths);
      164 						/*  ...and send the files  */
      165 						/*  Give the user some time get back to remote  */
      166 	call kermit_xfer_modes_$init (infop, code);
      167 						/*  this should never happen  */
      168 	if code ^= 0 then call ssu_$abort_line (kermit_scip, code);
      169 						/*  Set the tty_ modes  */
      170 	call kermit_comm_mgr_$set_line_modes (infop, code);
      171 	if code ^= 0 then call ssu_$abort_line (kermit_scip, code, "^/^a", "Unable to set line modes for file transfer");
      172 	transfer_modes_set = True;
      173 
      174 /*  Send the files  */
      175 	call timer_manager_$sleep (Five_seconds, "11"b);
      176 	call kermit_send_$send_to_remote (infop, filenames_areap, first_filename, file_sw, files_sent, code);
      177 						/*  Done sending  */
      178 	call kermit_comm_mgr_$reset_line_modes (infop, (0));
      179 	transfer_modes_set = False;
      180 
      181 	if code ^= 0 then
      182 	     call ssu_$abort_line (kermit_scip, code, "^/^d files sent.", files_sent);
      183 
      184 	call ioa_ ("^/Transaction completed: ^d file(s) sent.", files_sent);
      185 	call send_request_cleanup;
      186 	return;
      187 
      188 
      189 /*  Cleanup the area for the filenames  */
      190 send_request_cleanup:
      191      proc;
      192 
      193 	if filenames_areap ^= null then call ssu_$release_temp_segment (kermit_scip, filenames_areap);
      194 	filenames_areap = null;
      195 	if transfer_modes_set then call kermit_comm_mgr_$reset_line_modes (infop, code);
      196 	transfer_modes_set = False;
      197 	return;
      198      end send_request_cleanup;
      199 
      200      end kermit_send_request_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/05/88  1400.0  kermit_send_request_.pl1          >special_ldd>install>MR12.2-1054>kermit_send_request_.pl1
92           1    11/20/84  1351.4  kermit_dcls.incl.pl1              >ldd>include>kermit_dcls.incl.pl1
94           2    07/05/88  1357.9  kermit_transfer_info.incl.pl1     >special_ldd>install>MR12.2-1054>kermit_transfer_info.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
False                                  constant        bit(1)                   initial packed unaligned dcl 57 ref 100 101 102 104
                                                                                  110 179 196
Five_seconds                    000000 constant        fixed bin(71,0)          initial dcl 58 set ref 175*
True                                   constant        bit(1)                   initial packed unaligned dcl 59 ref 103 115 141 146
                                                                                  172
arg_idx                         000100 automatic       fixed bin(17,0)          dcl 31 set ref 135* 136*
arg_lth                         000101 automatic       fixed bin(21,0)          dcl 32 set ref 136* 138 140 145 152 152
arg_ptr                         000102 automatic       pointer                  dcl 33 set ref 136* 138 140 145 152
argument                               based           char                     packed unaligned dcl 34 set ref 138 140 145 152*
argument_count                  000104 automatic       fixed bin(17,0)          dcl 35 set ref 130* 131 135
cl_info_struc                   000105 automatic       structure                level 1 dcl 36 set ref 112*
cleanup                         000342 stack reference condition                dcl 87 ref 125
code                            000106 automatic       fixed bin(35,0)          dcl 39 set ref 99* 109* 114* 155* 157 157* 166* 168
                                                                                  168* 170* 171 171* 176* 181 181* 195*
continue_to_signal_             000014 constant        entry                    external dcl 74 ref 117
cu_$cl                          000016 constant        entry                    external dcl 75 ref 112
error_table_$badopt             000010 external static fixed bin(35,0)          dcl 68 set ref 152*
error_table_$too_many_args      000012 external static fixed bin(35,0)          dcl 69 set ref 149*
file_sw                         000112 automatic       bit(1)                   packed unaligned dcl 42 set ref 101* 144 146* 176*
filenames                              based           structure                level 1 unaligned dcl 53
filenames_areap                 000110 automatic       pointer                  dcl 41 set ref 123* 127* 155* 163 176* 193 193* 194*
files_sent                      000113 automatic       fixed bin(17,0)          dcl 43 set ref 176* 181* 184*
first_filename                  000114 automatic       char(168)                packed unaligned dcl 44 set ref 145* 176*
index                                                  builtin function         dcl 63 ref 138
infop                                  parameter       pointer                  dcl 40 set ref 7 109* 114* 155* 166* 170* 176* 178*
                                                                                  195*
ioa_                            000020 constant        entry                    external dcl 76 ref 163 184
kermit_comm_mgr_$reset_line_modes
                                000040 constant        entry                    external dcl 1-20 ref 109 178 195
kermit_comm_mgr_$set_line_modes 000042 constant        entry                    external dcl 1-25 ref 114 170
kermit_filenames                       based           structure                level 1 dcl 2-66
kermit_get_filenames_           000044 constant        entry                    external dcl 1-30 ref 155
kermit_scip                            parameter       pointer                  dcl 45 set ref 7 127* 130* 131* 131* 131* 136* 149*
                                                                                  149* 149* 152* 157* 168* 171* 181* 193*
kermit_send_$send_to_remote     000046 constant        entry                    external dcl 1-128 ref 176
kermit_xfer_modes_$init         000050 constant        entry                    external dcl 1-152 ref 166
mbz                       0(01) 000105 automatic       bit(35)                  level 2 packed packed unaligned dcl 36 set ref 104*
n_paths                                based           fixed bin(17,0)          level 2 dcl 53 set ref 163*
null                                                   builtin function         dcl 63 ref 123 193 194
quit                            000350 stack reference condition                dcl 88 ref 106
reason                          000166 automatic       char(256)                packed unaligned dcl 46 set ref 155* 157*
resetread                       000105 automatic       bit(1)                   level 2 packed packed unaligned dcl 36 set ref 103*
source_file_sw                  000266 automatic       bit(1)                   packed unaligned dcl 47 set ref 100* 139 141*
source_files                    000267 automatic       char(168)                packed unaligned dcl 48 set ref 140* 155*
ssu_$abort_line                 000024 constant        entry                    external dcl 78 ref 131 149 152 157 168 171 181
ssu_$arg_count                  000026 constant        entry                    external dcl 79 ref 130
ssu_$arg_ptr                    000030 constant        entry                    external dcl 80 ref 136
ssu_$get_request_name           000032 constant        entry                    external dcl 81 ref 131 131 149 149
ssu_$get_temp_segment           000034 constant        entry                    external dcl 82 ref 127
ssu_$release_temp_segment       000036 constant        entry                    external dcl 83 ref 193
timer_manager_$sleep            000022 constant        entry                    external dcl 77 ref 175
transfer_modes_set              000341 automatic       bit(1)                   packed unaligned dcl 49 set ref 102* 107 110* 115*
                                                                                  172* 179* 195 196*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
Ack_packet                             internal static char(1)                  initial packed unaligned dcl 2-86
Data_packet                            internal static char(1)                  initial packed unaligned dcl 2-85
Eof_packet                             internal static char(1)                  initial packed unaligned dcl 2-91
Eot_packet                             internal static char(1)                  initial packed unaligned dcl 2-89
Error_packet                           internal static char(1)                  initial packed unaligned dcl 2-92
File_header_packet                     internal static char(1)                  initial packed unaligned dcl 2-90
Nak_packet                             internal static char(1)                  initial packed unaligned dcl 2-87
Rec_abort                              internal static fixed bin(17,0)          initial dcl 2-110
Rec_complete                           internal static fixed bin(17,0)          initial dcl 2-111
Rec_data                               internal static fixed bin(17,0)          initial dcl 2-108
Rec_file_abort                         internal static fixed bin(17,0)          initial dcl 2-109
Rec_file_header                        internal static fixed bin(17,0)          initial dcl 2-107
Rec_init                               internal static fixed bin(17,0)          initial dcl 2-106
Reserved_packet                        internal static char(1)                  initial packed unaligned dcl 2-93
Send_abort                             internal static fixed bin(17,0)          initial dcl 2-118
Send_break                             internal static fixed bin(17,0)          initial dcl 2-117
Send_complete                          internal static fixed bin(17,0)          initial dcl 2-119
Send_data                              internal static fixed bin(17,0)          initial dcl 2-115
Send_eof                               internal static fixed bin(17,0)          initial dcl 2-116
Send_file_header                       internal static fixed bin(17,0)          initial dcl 2-114
Send_init                              internal static fixed bin(17,0)          initial dcl 2-113
Send_init_packet                       internal static char(1)                  initial packed unaligned dcl 2-88
addr                                                   builtin function         dcl 63
kermit_comm_mgr_$flush_input    000000 constant        entry                    external dcl 1-15
kermit_log_mgr_$close_log       000000 constant        entry                    external dcl 1-37
kermit_log_mgr_$disable         000000 constant        entry                    external dcl 1-42
kermit_log_mgr_$display_stats   000000 constant        entry                    external dcl 1-46
kermit_log_mgr_$enable          000000 constant        entry                    external dcl 1-51
kermit_log_mgr_$log_message     000000 constant        entry                    external dcl 1-55
kermit_log_mgr_$open_log        000000 constant        entry                    external dcl 1-60
kermit_log_mgr_$start           000000 constant        entry                    external dcl 1-66
kermit_log_mgr_$stop            000000 constant        entry                    external dcl 1-70
kermit_mode_mgr_$get            000000 constant        entry                    external dcl 1-74
kermit_mode_mgr_$retrieve       000000 constant        entry                    external dcl 1-78
kermit_mode_mgr_$set            000000 constant        entry                    external dcl 1-86
kermit_mode_mgr_$store          000000 constant        entry                    external dcl 1-90
kermit_pad_$receive             000000 constant        entry                    external dcl 1-97
kermit_pad_$send                000000 constant        entry                    external dcl 1-108
kermit_receive_$receive_from_remote
                                000000 constant        entry                    external dcl 1-118
kermit_server_                  000000 constant        entry                    external dcl 1-138
kermit_transfer_info                   based           structure                level 1 dcl 2-27
kermit_transfer_info_version           internal static char(9)                  initial packed unaligned dcl 2-48
kermit_xfer_modes_$check_params 000000 constant        entry                    external dcl 1-144
kermit_xfer_modes_$get_local_params
                                000000 constant        entry                    external dcl 1-157
kermit_xfer_modes_$process_params
                                000000 constant        entry                    external dcl 1-166
transfer_infop                         automatic       pointer                  dcl 2-47

NAMES DECLARED BY EXPLICIT CONTEXT.
kermit_send_request_            000137 constant        entry                    external dcl 7
send_request_cleanup            001141 constant        entry                    internal dcl 190 ref 125 185

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1472        1544    1206        1502
Length      2024    1206        52         243     264           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
kermit_send_request_                338 external procedure  is an external procedure.  
on unit on line 106                  71 on unit               
on unit on line 125                  64 on unit               
send_request_cleanup                 70 internal procedure  is called by several nonquick procedures.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
kermit_send_request_     000100 arg_idx                     kermit_send_request_
                         000101 arg_lth                     kermit_send_request_
                         000102 arg_ptr                     kermit_send_request_
                         000104 argument_count              kermit_send_request_
                         000105 cl_info_struc               kermit_send_request_
                         000106 code                        kermit_send_request_
                         000110 filenames_areap             kermit_send_request_
                         000112 file_sw                     kermit_send_request_
                         000113 files_sent                  kermit_send_request_
                         000114 first_filename              kermit_send_request_
                         000166 reason                      kermit_send_request_
                         000266 source_file_sw              kermit_send_request_
                         000267 source_files                kermit_send_request_
                         000341 transfer_modes_set          kermit_send_request_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        call_int_this       call_int_other      return_mac          enable_op
ext_entry           int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
continue_to_signal_           cu_$cl                        ioa_
kermit_comm_mgr_$reset_line_modes                           kermit_comm_mgr_$set_line_modes
kermit_get_filenames_         kermit_send_$send_to_remote   kermit_xfer_modes_$init       ssu_$abort_line
ssu_$arg_count                ssu_$arg_ptr                  ssu_$get_request_name         ssu_$get_temp_segment
ssu_$release_temp_segment     timer_manager_$sleep

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$badopt           error_table_$too_many_args




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
      7 000133        99 000144       100 000145       101 000146       102 000147       103 000150       104 000152
    106 000154       107 000170       109 000173       110 000204       112 000206       114 000215       115 000230
    116 000233       117 000234       118 000243       123 000244       125 000246       127 000270       130 000315
    131 000327       135 000375       136 000405       138 000423       139 000437       140 000441       141 000445
    142 000447       144 000450       145 000453       146 000457       147 000461       149 000462       150 000525
    152 000526       153 000561       155 000563       157 000614       163 000646       166 000666       168 000700
    170 000720       171 000732       172 000767       175 000771       176 001004       178 001041       179 001054
    181 001055       184 001113       185 001133       186 001137       190 001140       193 001146       194 001164
    195 001167       196 001203       197 001205


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
