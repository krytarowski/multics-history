	COMPILATION LISTING OF SEGMENT create_reference
	Compiled by: Multics PL/I Compiler, Release 28d, of September 14, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 10/03/83  1604.4 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 
        7 /* ******************************************************
        8*   *                                                    *
        9*   *                                                    *
       10*   * Copyright (c) 1972 by Massachusetts Institute of   *
       11*   * Technology and Honeywell Information Systems, Inc. *
       12*   *                                                    *
       13*   *                                                    *
       14*   ****************************************************** */
       15 
       16 create_reference: proc(s) returns(ptr);
       17 /*	Modified on:	April 1977 by RHS for new allocation methods */
       18 
       19 dcl	1 pl1_nodes_template_$reference_template external like reference aligned;
       20 
       21 dcl	(p,s) ptr,
       22 
       23 	nodetype fixed bin(15);
       24 
       25 dcl	pl1_stat_$free_ptr(18) ptr ext static;
       26 
       27 dcl	(addr,fixed,null,string) builtin;
       28 dcl	pl1_stat_$node_uses(32) fixed bin ext;
       29 
       30 dcl	use_xeq bit(1) aligned;
       31 
  1     1 /* BEGIN INCLUDE FILE ... pl1_tree_areas.incl.pl1 */
  1     2 
  1     3 /* format: style3 */
  1     4 dcl	tree_area		area based (pl1_stat_$tree_area_ptr);
  1     5 dcl	xeq_tree_area	area based (pl1_stat_$xeq_tree_area_ptr);
  1     6 
  1     7 dcl	pl1_stat_$tree_area_ptr
  1     8 			ptr ext static,
  1     9 	pl1_stat_$xeq_tree_area_ptr
  1    10 			ptr ext static;
  1    11 
  1    12 /* END INCLUDE FILE ... op_codes.incl.pl1 */
       32 
  2     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
  2     2 
  2     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
  2     4 
  2     5 dcl (	block_node		initial("000000001"b),
  2     6 	statement_node		initial("000000010"b),
  2     7 	operator_node		initial("000000011"b),
  2     8 	reference_node		initial("000000100"b),
  2     9 	token_node		initial("000000101"b),
  2    10 	symbol_node		initial("000000110"b),
  2    11 	context_node		initial("000000111"b),
  2    12 	array_node		initial("000001000"b),
  2    13 	bound_node		initial("000001001"b),
  2    14 	format_value_node		initial("000001010"b),
  2    15 	list_node			initial("000001011"b),
  2    16 	default_node		initial("000001100"b),
  2    17 	machine_state_node		initial("000001101"b),
  2    18 	source_node		initial("000001110"b),
  2    19 	label_node		initial("000001111"b),
  2    20 	cross_reference_node	initial("000010000"b),
  2    21 	sf_par_node		initial("000010001"b),
  2    22 	temporary_node		initial("000010010"b),
  2    23 	label_array_element_node	initial("000010011"b),
  2    24 	by_name_agg_node		initial("000010100"b))
  2    25 				bit(9) internal static aligned options(constant);
  2    26 
  2    27 dcl	1 node			based aligned,
  2    28 	2 type			unal bit(9),
  2    29 	2 source_id		unal structure,
  2    30 	  3 file_number		bit(8),
  2    31 	  3 line_number		bit(14),
  2    32 	  3 statement_number	bit(5);
  2    33 
  2    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
       33 
  3     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
  3     2 
  3     3 dcl	1 reference		based aligned,
  3     4 	2 node_type		bit(9) unaligned,
  3     5 	2 array_ref		bit(1) unaligned,
  3     6 	2 varying_ref		bit(1) unaligned,
  3     7 	2 shared			bit(1) unaligned,
  3     8 	2 put_data_sw		bit(1) unaligned,
  3     9 	2 processed		bit(1) unaligned,
  3    10 	2 units			fixed(3) unaligned,
  3    11 	2 ref_count		fixed(17) unaligned,
  3    12 	2 c_offset		fixed(24),
  3    13 	2 c_length		fixed(24),
  3    14 	2 symbol			ptr unaligned,
  3    15 	2 qualifier		ptr unaligned,
  3    16 	2 offset			ptr unaligned,
  3    17 	2 length			ptr unaligned,
  3    18 	2 subscript_list		ptr unaligned,
  3    19 						/* these fields are used by the 645 code generator */
  3    20 	2 address			structure unaligned,
  3    21 	  3 base			bit(3),
  3    22 	  3 offset		bit(15),
  3    23 	  3 op			bit(9),
  3    24 	  3 no_address		bit(1),
  3    25 	  3 inhibit		bit(1),
  3    26 	  3 ext_base		bit(1),
  3    27 	  3 tag			bit(6),
  3    28 	2 info			structure unaligned,
  3    29 	  3 address_in		structure,
  3    30 	    4 b			dimension(0:7) bit(1),
  3    31 	    4 storage		bit(1),
  3    32 	  3 value_in		structure,
  3    33 	    4 a			bit(1),
  3    34 	    4 q			bit(1),
  3    35 	    4 aq			bit(1),
  3    36 	    4 string_aq		bit(1),
  3    37 	    4 complex_aq		bit(1),
  3    38 	    4 decimal_aq		bit(1),
  3    39 	    4 b			dimension(0:7) bit(1),
  3    40 	    4 storage		bit(1),
  3    41 	    4 indicators		bit(1),
  3    42 	    4 x			dimension(0:7) bit(1),
  3    43 	  3 other			structure,
  3    44 	    4 big_offset		bit(1),
  3    45 	    4 big_length		bit(1),
  3    46 	    4 modword_in_offset	bit(1),
  3    47 	2 data_type		fixed(5) unaligned,
  3    48 	2 bits			structure unaligned,
  3    49 	  3 padded_ref		bit(1),
  3    50 	  3 aligned_ref		bit(1),
  3    51 	  3 long_ref		bit(1),
  3    52 	  3 forward_ref		bit(1),
  3    53 	  3 ic_ref		bit(1),
  3    54 	  3 temp_ref		bit(1),
  3    55 	  3 defined_ref		bit(1),
  3    56 	  3 evaluated		bit(1),
  3    57 	  3 allocate		bit(1),
  3    58 	  3 allocated		bit(1),
  3    59 	  3 aliasable		bit(1),
  3    60 	  3 even			bit(1),
  3    61 	  3 perm_address		bit(1),
  3    62 	  3 aggregate		bit(1),
  3    63 	  3 hit_zero		bit(1),
  3    64 	  3 dont_save		bit(1),
  3    65 	  3 fo_in_qual		bit(1),
  3    66 	  3 hard_to_load		bit(1),
  3    67 	2 relocation		bit(12) unaligned,
  3    68 	2 more_bits		structure unaligned,
  3    69 	  3 substr		bit(1),
  3    70 	  3 padded_for_store_ref	bit(1),
  3    71 	  3 aligned_for_store_ref	bit(1),
  3    72 	  3 mbz			bit(15),
  3    73 	2 store_ins		bit(18) unaligned;
  3    74 
  3    75 /* END INCLUDE FILE ... reference.incl.pl1 */
       34 
       35 
       36 	use_xeq = "1"b;
       37 
       38 begin:
       39 	nodetype = fixed(reference_node,15,0);
       40 	p = pl1_stat_$free_ptr(nodetype);
       41 
       42 	if p^=null
       43 	then	pl1_stat_$free_ptr(nodetype) = p->reference.symbol;
       44 	else do;
       45 	     pl1_stat_$node_uses(4) = pl1_stat_$node_uses(4) + 1;
       46 	     if use_xeq
       47 		then allocate reference in(xeq_tree_area) set(p);
       48 		else allocate reference in(tree_area) set(p);
       49 	     end;
       50 
       51 	p->reference = pl1_nodes_template_$reference_template;
       52 
       53 	p -> reference.symbol = s;
       54 
       55 	return(p);
       56 
       57 for_symbol:	entry(s) returns(ptr);
       58 	use_xeq = "0"b;
       59 	go to begin;
       60 
       61 	end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/03/83  1007.3  create_reference.pl1              >spec>on>pl128d>create_reference.pl1
32           1    07/21/80  1546.3  pl1_tree_areas.incl.pl1           >ldd>include>pl1_tree_areas.incl.pl1
33           2    07/21/80  1546.3  nodes.incl.pl1                    >ldd>include>nodes.incl.pl1
34           3    07/21/80  1546.3  reference.incl.pl1                >ldd>include>reference.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
fixed                                                  builtin function         dcl 27 ref 38
nodetype                        000102 automatic       fixed bin(15,0)          dcl 21 set ref 38* 40 42
null                                                   builtin function         dcl 27 ref 42
p                               000100 automatic       pointer                  dcl 21 set ref 40* 42 42 46* 48* 51 53 55
pl1_nodes_template_$reference_template
                                000010 external static structure                level 1 dcl 19 ref 51
pl1_stat_$free_ptr              000012 external static pointer                  array dcl 25 set ref 40 42*
pl1_stat_$node_uses             000014 external static fixed bin(17,0)          array dcl 28 set ref 45* 45
pl1_stat_$tree_area_ptr         000016 external static pointer                  dcl 1-7 ref 48
pl1_stat_$xeq_tree_area_ptr     000020 external static pointer                  dcl 1-7 ref 46
reference                              based           structure                level 1 dcl 3-3 set ref 46 48 51*
reference_node                         constant        bit(9)                   initial dcl 2-5 ref 38
s                                      parameter       pointer                  dcl 21 ref 16 53 57
symbol                    3            based           pointer                  level 2 packed unaligned dcl 3-3 set ref 42 53*
tree_area                              based           area(1024)               dcl 1-4 ref 48
use_xeq                         000103 automatic       bit(1)                   dcl 30 set ref 36* 46 58*
xeq_tree_area                          based           area(1024)               dcl 1-5 ref 46

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
addr                                                   builtin function         dcl 27
array_node                             internal static bit(9)                   initial dcl 2-5
block_node                             internal static bit(9)                   initial dcl 2-5
bound_node                             internal static bit(9)                   initial dcl 2-5
by_name_agg_node                       internal static bit(9)                   initial dcl 2-5
context_node                           internal static bit(9)                   initial dcl 2-5
cross_reference_node                   internal static bit(9)                   initial dcl 2-5
default_node                           internal static bit(9)                   initial dcl 2-5
format_value_node                      internal static bit(9)                   initial dcl 2-5
label_array_element_node               internal static bit(9)                   initial dcl 2-5
label_node                             internal static bit(9)                   initial dcl 2-5
list_node                              internal static bit(9)                   initial dcl 2-5
machine_state_node                     internal static bit(9)                   initial dcl 2-5
node                                   based           structure                level 1 dcl 2-27
operator_node                          internal static bit(9)                   initial dcl 2-5
sf_par_node                            internal static bit(9)                   initial dcl 2-5
source_node                            internal static bit(9)                   initial dcl 2-5
statement_node                         internal static bit(9)                   initial dcl 2-5
string                                                 builtin function         dcl 27
symbol_node                            internal static bit(9)                   initial dcl 2-5
temporary_node                         internal static bit(9)                   initial dcl 2-5
token_node                             internal static bit(9)                   initial dcl 2-5

NAMES DECLARED BY EXPLICIT CONTEXT.
begin                           000017 constant        label                    dcl 38 ref 59
create_reference                000010 constant        entry                    external dcl 16
for_symbol                      000102 constant        entry                    external dcl 57

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       220         242     111         230
Length       462     111        22         204     107           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
create_reference                     69 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
create_reference         000100 p                           create_reference
                         000102 nodetype                    create_reference
                         000103 use_xeq                     create_reference

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
return              ext_entry           alloc_based

NO EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pl1_nodes_template_$reference_template                      pl1_stat_$free_ptr            pl1_stat_$node_uses
pl1_stat_$tree_area_ptr       pl1_stat_$xeq_tree_area_ptr




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     16 000004        36 000015        38 000017        40 000022        42 000027        45 000041        46 000043
     48 000055        51 000064        53 000072        55 000076        57 000100        58 000107        59 000110


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
