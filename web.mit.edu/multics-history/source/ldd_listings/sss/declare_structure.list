	COMPILATION LISTING OF SEGMENT declare_structure
	Compiled by: Multics PL/I Compiler, Release 32c, of June 16, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 07/31/89  1400.2 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 declare_structure: proc(ps);
       12 
       13 /* Modified 780724 by PG to call validate before copying storage_class of adam. */
       14 /* Modified 790419 by PCK to implement 4-bit decimal */
       15 
       16 dcl	(adam,base,bit_offset,allocate,ps,s,d,b,off,q) ptr;
       17 dcl	n fixed bin(15);
       18 dcl	coff fixed bin(31);
       19 dcl	cdesc bit(1);
       20 
       21 dcl	pl1_stat_$eis_mode bit(1) aligned ext static;
       22 
       23 dcl	(min,max,null,fixed,divide,string,substr) builtin;
       24 
  1     1 /* BEGIN INCLUDE FILE ... semant.incl.pl1 */
  1     2 
  1     3 /* Modified: 30 Aug 1979 by PCK to fix 1804 and 1823 */
  1     4 /* Modified: 26 Aug 1979 by PCK to implement by name assignment */
  1     5 
  1     6 
  1     7 declare	alloc_semantics	entry(pointer,pointer,pointer);
  1     8 			/* parameter 1:	(input)	block node pointer		*/
  1     9 			/* parameter 2:	(input)	statement node pointer	*/
  1    10 			/* parameter 3:	(in/out)	tree pointer		*/
  1    11 
  1    12 declare	alloc_semantics$init_only entry(pointer,pointer,pointer);
  1    13 			/* parameter 1:	(input)	qualifier pointer		*/
  1    14 			/* parameter 2:	(input)	statement node pointer	*/
  1    15 			/* parameter 3:	(input)	symbol node pointer		*/
  1    16 
  1    17 declare	builtin		entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  1    18 			returns(pointer);
  1    19 			/* parameter 1:	(input)	block node pointer		*/
  1    20 			/* parameter 2:	(input)	statement node pointer	*/
  1    21 			/* parameter 3:	(input)	tree pointer		*/
  1    22 			/* parameter 4:	(input)	subscript pointer		*/
  1    23 			/* parameter 5:	(input)	builtin symbol node pointer	*/
  1    24 			/* parameter 6:	(in/out)	context			*/
  1    25 			/* return:	(output)	tree pointer		*/
  1    26 
  1    27 declare	check_star_extents	entry(pointer,pointer);
  1    28 			/* parameter 1:	(input) symbol node of procedure	*/
  1    29 			/* parameter 2:	(input) argument list pointer		*/
  1    30 
  1    31 declare	compare_declaration	entry(pointer,pointer,bit(1) aligned) reducible
  1    32 			returns(bit(1) aligned);
  1    33 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  1    34 			/* parameter 2:	(input)	symbol node ptr	*/
  1    35 			/* parameter 3:	(input)	"1"b if aligned attribute ignored for string	*/
  1    36 			/* return:	(output)	compare bit		*/
  1    37 
  1    38 declare	context_processor	entry(pointer,label);
  1    39 			/* parameter 1:	(input)	root block node pointer	*/
  1    40 
  1    41 declare	declare		entry(pointer);
  1    42 			/* parameter 1:	(input)	symbol node pointer		*/
  1    43 
  1    44 declare	declare_structure	entry(pointer);
  1    45 			/* parameter 1:	(input)	symbol node pointer		*/
  1    46 
  1    47 declare	defined_reference	entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  1    48 			returns(pointer);
  1    49 			/* parameter 1:	(input)	block node pointer		*/
  1    50 			/* parameter 2:	(input)	statement node pointer	*/
  1    51 			/* parameter 3:	(input)	tree pointer		*/
  1    52 			/* parameter 4:	(input)	subscript list pointer or null*/
  1    53 			/* parameter 5:	(input)	symbol node pointer		*/
  1    54 			/* parameter 6:	(in/out)	context			*/
  1    55 			/* return:	(output)	tree pointer		*/
  1    56 
  1    57 declare	do_semantics	entry(pointer,pointer,pointer);
  1    58 			/* parameter 1:	(input)	block node pointer		*/
  1    59 			/* parameter 2:	(input)	statement node pointer	*/
  1    60 			/* parameter 3:	(input)	tree pointer		*/
  1    61 
  1    62 declare	expand_assign	entry(pointer,pointer,pointer,bit(36) aligned,pointer)
  1    63 			returns(pointer);
  1    64 			/* parameter 1:	(input)	block node pointer		*/
  1    65 			/* parameter 2:	(input)	statement node pointer	*/
  1    66 			/* parameter 3:	(input)	tree pointer		*/
  1    67 			/* parameter 4:	(in/out)	context			*/
  1    68 			/* parameter 5:	(input)	aggregate reference node ptr	*/
  1    69 			/* return:	(output)	tree pointer		*/
  1    70 
  1    71 declare	expand_by_name	entry(pointer,pointer,pointer);
  1    72 			/* parameter 1:	(input)	block node pointer		*/
  1    73 			/* parameter 2:	(input)	statement node pointer	*/
  1    74 			/* parameter 3:	(input/output)	tree pointer		*/
  1    75 
  1    76 declare	expand_infix	entry(pointer,pointer,pointer,bit(36) aligned)
  1    77 			returns(pointer);
  1    78 			/* parameter 1:	(input)	block node pointer		*/
  1    79 			/* parameter 2:	(input)	statement node pointer	*/
  1    80 			/* parameter 3:	(input)	tree pointer		*/
  1    81 			/* parameter 4:	(in/out)	context			*/
  1    82 			/* return:	(output)	tree pointer		*/
  1    83 
  1    84 declare	expand_initial	entry(pointer,pointer,pointer);
  1    85 			/* parameter 1:	(input)	symbol node pointer		*/
  1    86 			/* parameter 2:	(input)	statement node pointer	*/
  1    87 			/* parameter 3:	(input)	locator			*/
  1    88 
  1    89 declare	expand_prefix	entry(pointer,pointer,pointer,bit(36) aligned)
  1    90 			returns(pointer);
  1    91 			/* parameter 1:	(input)	block node pointer		*/
  1    92 			/* parameter 2:	(input)	statement node pointer	*/
  1    93 			/* parameter 3:	(input)	tree pointer		*/
  1    94 			/* parameter 4:	(in/out)	context			*/
  1    95 			/* return:	(output)	tree pointer		*/
  1    96 
  1    97 declare	expand_primitive	entry(pointer,pointer,pointer,bit(36) aligned)
  1    98 			returns(pointer);
  1    99 			/* parameter 1:	(input)	block node pointer		*/
  1   100 			/* parameter 2:	(input)	statement node pointer	*/
  1   101 			/* parameter 3:	(input)	tree pointer		*/
  1   102 			/* parameter 4:	(input)	context			*/
  1   103 			/* return:	(output)	tree pointer		*/
  1   104 
  1   105 declare	expression_semantics entry(pointer,pointer,pointer,bit(36) aligned)
  1   106 			returns(pointer);
  1   107 			/* parameter 1:	(input)	block node pointer		*/
  1   108 			/* parameter 2:	(input)	statement node pointer	*/
  1   109 			/* parameter 3:	(input)	tree pointer		*/
  1   110 			/* parameter 4:	(in/out)	context			*/
  1   111 			/* return:	(output)	tree pointer		*/
  1   112 
  1   113 declare	fill_refer	entry(pointer,pointer,bit(1) aligned)
  1   114 			returns(pointer);
  1   115 			/* parameter 1:	(input)	null,ref node,op node ptr */
  1   116 			/* parameter 2:	(input)	null,ref node,op node ptr */
  1   117 			/* parameter 3:	(input)	copy switch for param 2 */
  1   118 			/* return:	(output)	ptr to processed tree */
  1   119 
  1   120 declare	io_data_list_semantics$format_list_semantics entry(pointer,pointer,pointer);
  1   121 			/* parameter 1:	(input)	block node pointer		*/
  1   122 			/* parameter 2:	(input)	statement node pointer	*/
  1   123 			/* parameter 3:	(in/out)	tree pointer		*/
  1   124 
  1   125 declare	function		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   126 			returns(pointer);
  1   127 			/* parameter 1:	(input)	block node pointer		*/
  1   128 			/* parameter 2:	(input)	statement node pointer	*/
  1   129 			/* parameter 3:	(input)	tree pointer		*/
  1   130 			/* parameter 4:	(input)	symbol node pointer		*/
  1   131 			/* parameter 5:	(in/out)	context			*/
  1   132 			/* return:	(output)	tree pointer		*/
  1   133 
  1   134 declare	generic_selector	entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   135 			returns(pointer);
  1   136 			/* parameter 1:	(input)	block node pointer	*/
  1   137 			/* parameter 2:	(input)	statement node pointer	*/
  1   138 			/* parameter 3:	(input)	tree pointer	*/
  1   139 			/* parameter 4:	(input)	pointer to argument list	*/
  1   140 			/* parameter 5:	(in/out)	context		*/
  1   141 			/* return:	(output)	tree pointer	*/
  1   142 
  1   143 declare	io_data_list_semantics entry(pointer,pointer,pointer);
  1   144 			/* parameter 1:	(input)	block node pointer		*/
  1   145 			/* parameter 2:	(input)	statement node pointer	*/
  1   146 			/* parameter 3:	(input)	operator node pointer	*/
  1   147 
  1   148 declare	io_semantics	entry(pointer,pointer,pointer);
  1   149 			/* parameter 1:	(input)	block node pointer		*/
  1   150 			/* parameter 2:	(input)	statement node pointer	*/
  1   151 			/* parameter 3:	(input)	tree pointer		*/
  1   152 
  1   153 declare	lookup		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   154 			returns(bit(1) aligned);
  1   155 			/* parameter 1:	(input)	block node pointer		*/
  1   156 			/* parameter 2:	(input)	stmnt|symbol node pointer	*/
  1   157 			/* parameter 3:	(input)	token or reference node ptr	*/
  1   158 			/* parameter 4:	(output)	symbol node pointer		*/
  1   159 			/* parameter 5:	(in/out)	context			*/
  1   160 			/* return:	(output)	symbol found bit		*/
  1   161 
  1   162 declare	make_non_quick	entry(pointer, bit (36) aligned);
  1   163 			/* parameter 1:	(input)	tree pointer	*/
  1   164 			/* parameter 2:	(input)	reason why being made nonquick */
  1   165 
  1   166 declare	match_arguments	entry(pointer,pointer) reducible
  1   167 			returns(bit(1) aligned);
  1   168 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  1   169 			/* parameter 2:	(input)	reference or symbol node ptr	*/
  1   170 			/* return:	(output)	compare bit		*/
  1   171 
  1   172 declare	offset_adder	entry(pointer,fixed binary(31),fixed binary(3),bit(1) aligned,
  1   173 			      pointer,fixed binary(31),fixed binary(3),bit(1) aligned,bit(1));
  1   174 			/* parameter 1:	(in/out)	tree pointer		*/
  1   175 			/* parameter 2:	(in/out)	constant size		*/
  1   176 			/* parameter 3:	(in/out)	units			*/
  1   177 			/* parameter 4:	(in/out) 	ON if units ^= word_, but tree in words	*/
  1   178 			/* parameter 5:	(input)	tree pointer		*/
  1   179 			/* parameter 6:	(input)	constant size		*/
  1   180 			/* parameter 7:	(input)	units			*/
  1   181 			/* parameter 8:	(input)	ON if units ^= word_, but tree in words	*/
  1   182 			/* parameter 9:	(input)	ON if should not improve units	*/
  1   183 
  1   184 declare	operator_semantics	entry(pointer,pointer,pointer,bit(36) aligned)
  1   185 			returns(pointer);
  1   186 			/* parameter 1:	(input)	block node pointer		*/
  1   187 			/* parameter 2:	(input)	statement node pointer	*/
  1   188 			/* parameter 3:	(input)	tree pointer		*/
  1   189 			/* parameter 4:	(in/out)	context			*/
  1   190 			/* return:	(output)	tree pointer		*/
  1   191 
  1   192 declare	propagate_bit	entry(pointer,fixed binary(15));
  1   193 			/* parameter 1:	(input)	symbol node pointer		*/
  1   194 			/* parameter 2:	(input)	attribute number		*/
  1   195 
  1   196 declare	semantic_translator$call_es entry(pointer,pointer,pointer,label,bit(1) aligned)
  1   197 			returns(pointer);
  1   198 			/* parameter 1:	(input)	block ptr	*/
  1   199 			/* parameter 2:	(input)	statement ptr	*/
  1   200 			/* parameter 3:	(input)	tree ptr	*/
  1   201 			/* parameter 4:	(input)	failure label	*/
  1   202 			/* parameter 5:	(input)	"1"b -- convert to integer	*/
  1   203 			/* return:	(output)	tree ptr		*/
  1   204 
  1   205 declare	simplify_expression	entry(pointer,fixed bin,bit(1)aligned);
  1   206 			/* parameter 1:	(in/out)	tree pointer		*/
  1   207 			/* parameter 2:	(output)	value of constant, if the entire tree
  1   208*						is simplified		*/
  1   209 			/* parameter 3:	(output)	bit indicating if the tree has
  1   210*						been simplified		*/
  1   211 
  1   212 declare	simplify_offset	entry(pointer,bit(36) aligned);
  1   213 			/* parameter 1:	(input)	reference node pointer	*/
  1   214 			/* parameter 2:	(input)	context			*/
  1   215 
  1   216 declare	subscripter	entry(pointer,pointer,pointer,pointer,pointer)
  1   217 			returns(pointer);
  1   218 			/* parameter 1:	(input)	block node pointer		*/
  1   219 			/* parameter 2:	(input)	statement node pointer	*/
  1   220 			/* parameter 3:	(input)	tree pointer		*/
  1   221 			/* parameter 4:	(in/out)	subscript list pointer	*/
  1   222 			/* parameter 5:	(input)	symbol node pointer		*/
  1   223 			/* return:	(output)	reference node pointer	*/
  1   224 
  1   225 declare	validate		entry(pointer);
  1   226 			/* parameter 1:	(input)	symbol node pointer		*/
  1   227 
  2     1 /****^  *********************************************************
  2     2*        *                                                       *
  2     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  2     4*        *                                                       *
  2     5*        ********************************************************* */
  2     6 
  2     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  2     8 
  2     9 
  2    10 /****^  HISTORY COMMENTS:
  2    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  2    12*     install(89-07-31,MR12.3-1066):	
  2    13*     Removed the obsolete parameter source_line from the dcl of error_().
  2    14*                                                   END HISTORY COMMENTS */
  2    15 
  2    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  2    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  2    18* */
  2    19 
  2    20 declare	adjust_count	entry(pointer);
  2    21 			/* parameter 1:	(input)	any node pointer		*/
  2    22 
  2    23 declare	bindec		entry(fixed bin(31)) reducible
  2    24 			returns(character(12) aligned);
  2    25 			/* parameter 1:	(input)	bin value			*/
  2    26 			/* return:	(output)	character value with blanks	*/
  2    27 
  2    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  2    29 			returns(character(12) aligned varying);
  2    30 			/* parameter 1:	(input)	binary value		*/
  2    31 			/* return:	(output)	char value without blanks	*/
  2    32 
  2    33 declare	binoct		entry(fixed bin(31)) reducible
  2    34 			returns(char(12) aligned);
  2    35 			/* parameter 1:	(input)	binary value		*/
  2    36 			/* return:	(output)	char value with blanks	*/
  2    37 
  2    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  2    39 			returns(char(12) aligned);
  2    40 			/* parameter 1:	(input)	binary value		*/
  2    41 			/* return:	(output)	right-aligned char value	*/
  2    42 
  2    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  2    44 			returns(char(12) varying aligned);
  2    45 			/* parameter 1:	(input)	binary value		*/
  2    46 			/* returns:	(output)	char value without blanks	*/
  2    47 
  2    48 declare	compare_expression	entry(pointer,pointer) reducible
  2    49 			returns(bit(1) aligned);
  2    50 			/* parameter 1:	(input)	any node pointer		*/
  2    51 			/* parameter 2:	(input)	any node pointer		*/
  2    52 			/* return:	(output)	compare bit		*/
  2    53 
  2    54 declare	constant_length	entry (pointer, fixed bin (71))
  2    55 			returns (bit (1) aligned);
  2    56 			/* parameter 1:	(input)	reference node pointer	*/
  2    57 			/* parameter 2:	(input)	value of constant length	*/
  2    58 			/* return:	(output)	"1"b if constant length	*/
  2    59 
  2    60 declare	convert		entry(pointer,bit(36) aligned)
  2    61 			returns(pointer);
  2    62 			/* parameter 1:	(input)	any node pointer		*/
  2    63 			/* parameter 2:	(input)	target type		*/
  2    64 			/* return:	(output)	target value tree pointer	*/
  2    65 
  2    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  2    67 			returns(pointer);
  2    68 			/* parameter 1:	(input)	any node pointer		*/
  2    69 			/* parameter 2:	(input)	target type		*/
  2    70 			/* return:	(output)	target value tree pointer	*/
  2    71 
  2    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  2    73 			returns(pointer);
  2    74 			/* parameter 1:	(input)	any node pointer		*/
  2    75 			/* parameter 2:	(input)	target type		*/
  2    76 			/* return:	(output)	target value tree pointer	*/
  2    77 
  2    78 declare	convert$validate	entry(pointer,pointer);
  2    79 			/* parameter 1:	(input)	source value tree pointer	*/
  2    80 			/* parameter 2:	(input)	target reference node pointer	*/
  2    81 
  2    82 declare	convert$to_target_fb entry(pointer,pointer)
  2    83 			returns(pointer);
  2    84 			/* parameter 1:	(input)	source value tree pointer	*/
  2    85 			/* parameter 2:	(input)	target reference node pointer	*/
  2    86 			/* return:	(output)	target value tree pointer	*/
  2    87 
  2    88 declare	convert$to_target	entry(pointer,pointer)
  2    89 			returns(pointer);
  2    90 			/* parameter 1:	(input)	source value tree pointer	*/
  2    91 			/* parameter 2:	(input)	target reference node pointer	*/
  2    92 			/* return:	(output)	target value tree pointer	*/
  2    93 
  2    94 declare	copy_expression	entry(pointer unaligned)
  2    95 			returns(pointer);
  2    96 			/* parameter 1:	(input)	any node pointer		*/
  2    97 			/* return:	(output)	any node pointer		*/
  2    98 
  2    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  2   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  2   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  2   102 
  2   103 declare	copy_unique_expression entry(pointer)
  2   104 			returns(pointer);
  2   105 			/* parameter 1:	(input)	any node pointer		*/
  2   106 			/* return:	(output)	any node pointer		*/
  2   107 
  2   108 declare	create_array	entry()
  2   109 			returns(pointer);
  2   110 			/* return:	(output)	array node pointer		*/
  2   111 
  2   112 declare	create_block	entry(bit(9) aligned,pointer)
  2   113 			returns(pointer);
  2   114 			/* parameter 1:	(input)	block type		*/
  2   115 			/* parameter 2:	(input)	father block node pointer	*/
  2   116 			/* return:	(output)	block node pointer		*/
  2   117 
  2   118 declare	create_bound	entry()
  2   119 			returns(pointer);
  2   120 			/* return:	(output)	bound node pointer		*/
  2   121 
  2   122 declare	create_context	entry(pointer,pointer)
  2   123 			returns(pointer);
  2   124 			/* parameter 1:	(input)	block node pointer		*/
  2   125 			/* parameter 2:	(input)	token pointer		*/
  2   126 			/* return:	(output)	context node pointer	*/
  2   127 
  2   128 declare	create_cross_reference entry()
  2   129 			returns(pointer);
  2   130 			/* return:	(output)	cross reference node pointer	*/
  2   131 
  2   132 declare	create_default	entry
  2   133 			returns(pointer);
  2   134 			/* return:	(output)	default node pointer	*/
  2   135 
  2   136 declare	create_identifier	entry()
  2   137 			returns(pointer);
  2   138 			/* return:	(output)	token node pointer		*/
  2   139 
  2   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  2   141 			returns(pointer);
  2   142 			/* parameter 1:	(input)	block node pointer		*/
  2   143 			/* parameter 2:	(input)	token node pointer		*/
  2   144 			/* parameter 3:	(input)	declare type		*/
  2   145 			/* return:	(output)	label node pointer		*/
  2   146 
  2   147 declare	create_list	entry(fixed bin(15))
  2   148 			returns(pointer);
  2   149 			/* parameter 1:	(input)	number of list elements	*/
  2   150 			/* return:	(output)	list node pointer		*/
  2   151 
  2   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  2   153 			returns(pointer);
  2   154 			/* parameter 1:	(input)	operator type		*/
  2   155 			/* parameter 2:	(input)	number of operands		*/
  2   156 			/* return:	(output)	operator node pointer	*/
  2   157 
  2   158 declare	create_reference	entry(pointer)
  2   159 			returns(pointer);
  2   160 			/* parameter 1:	(input)	symbol node pointer		*/
  2   161 			/* return:	(output)	reference node pointer	*/
  2   162 
  2   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   164 			returns(pointer);
  2   165 			/* parameter 1:	(input)	statement type		*/
  2   166 			/* parameter 2:	(input)	block node pointer		*/
  2   167 			/* parameter 3:	(input)	label node pointer		*/
  2   168 			/* parameter 4:	(input)	conditions		*/
  2   169 			/* return:	(output)	statement node pointer	*/
  2   170 
  2   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   172 			returns(pointer);
  2   173 			/* parameter 1:	(input)	statement type		*/
  2   174 			/* parameter 2:	(input)	block node pointer		*/
  2   175 			/* parameter 3:	(input)	label node pointer		*/
  2   176 			/* parameter 4:	(input)	conditions		*/
  2   177 			/* return:	(output)	statement node pointer	*/
  2   178 
  2   179 declare	create_storage	entry(fixed bin(15))
  2   180 			returns(pointer);
  2   181 			/* parameter 1:	(input)	number of words		*/
  2   182 			/* return:	(output)	storage block pointer	*/
  2   183 
  2   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  2   185 			returns(pointer);
  2   186 			/* parameter 1:	(input)	block node pointer		*/
  2   187 			/* parameter 2:	(input)	token node pointer		*/
  2   188 			/* parameter 3:	(input)	declare type		*/
  2   189 			/* return:	(output)	symbol node pointer		*/
  2   190 
  2   191 declare	create_token	entry (character (*), bit (9) aligned)
  2   192 			returns (ptr);
  2   193 			/* parameter 1:	(input)	token string		*/
  2   194 			/* parameter 2:	(input)	token type		*/
  2   195 			/* return:	(output)	token node ptr		*/
  2   196 
  2   197 declare	create_token$init_hash_table entry ();
  2   198 
  2   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  2   200 			returns (ptr);
  2   201 			/* parameter 1:	(input)	token string		*/
  2   202 			/* parameter 2:	(input)	token type		*/
  2   203 			/* parameter 3:	(input)	protected flag		*/
  2   204 			/* return:	(output)	token node ptr		*/
  2   205 
  2   206 declare	decbin		entry(character(*) aligned) reducible
  2   207 			returns(fixed bin(31));
  2   208 			/* parameter 1:	(input)	decimal character string	*/
  2   209 			/* return:	(output)	binary value		*/
  2   210 
  2   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  2   212 			returns(pointer);
  2   213 			/* parameter 1:	(input)	value			*/
  2   214 			/* parameter 2:	(input)	type			*/
  2   215 			/* parameter 3:	(input)	size			*/
  2   216 			/* parameter 4:	(input)	scale			*/
  2   217 			/* return:	(output)	reference node pointer	*/
  2   218 
  2   219 declare	declare_constant$bit entry(bit(*) aligned)
  2   220 			returns(pointer);
  2   221 			/* parameter 1:	(input)	bit			*/
  2   222 			/* return:	(output)	reference node pointer	*/
  2   223 
  2   224 declare	declare_constant$char entry(character(*) aligned)
  2   225 			returns(pointer);
  2   226 			/* parameter 1:	(input)	character			*/
  2   227 			/* return:	(output)	reference node pointer	*/
  2   228 
  2   229 declare	declare_constant$desc entry(bit(*) aligned)
  2   230 			returns(pointer);
  2   231 			/* parameter 1:	(input)	descriptor bit value	*/
  2   232 			/* return:	(output)	reference node pointer	*/
  2   233 
  2   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  2   235 			returns(pointer);
  2   236 			/* parameter 1:	(input)	integer			*/
  2   237 			/* return:	(output)	reference node pointer	*/
  2   238 
  2   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   240 			returns(pointer);
  2   241 			/* parameter 1:	(input)	block node pointer		*/
  2   242 			/* parameter 2:	(input)	statement node pointer	*/
  2   243 			/* parameter 3:	(input)	symbol node pointer		*/
  2   244 			/* parameter 4:	(input)	loc pointer		*/
  2   245 			/* parameter 5:	(input)	array descriptor bit
  2   246*						cross_section bit	*/
  2   247 			/* return:	(output)	reference node pointer	*/
  2   248 
  2   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   250 			returns(pointer);
  2   251 			/* parameter 1:	(input)	block node pointer	*/
  2   252 			/* parameter 2:	(input)	statement node pointer 	*/
  2   253 			/* parameter 3:	(input)	symbol node pointer	*/
  2   254 			/* parameter 4:	(input)	loc pointer	*/
  2   255 			/* parameter 5:	(input)	array descriptor bit
  2   256*						cross_section bit	*/
  2   257 			/* return:	(output)	reference node pointer	*/
  2   258 
  2   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   260 			returns(pointer);
  2   261 			/* parameter 1:	(input)	block node pointer		*/
  2   262 			/* parameter 2:	(input)	statement node pointer	*/
  2   263 			/* parameter 3:	(input)	symbol node pointer		*/
  2   264 			/* parameter 4:	(input)	loc pointer		*/
  2   265 			/* parameter 5:	(input)	array descriptor bit
  2   266*						cross_section bit	*/
  2   267 			/* return:	(output)	reference node pointer	*/
  2   268 
  2   269 declare	declare_integer	entry(pointer)
  2   270 			returns(pointer);
  2   271 			/* parameter 1:	(input)	block node pointer		*/
  2   272 			/* return:	(output)	reference node pointer 	*/
  2   273 
  2   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  2   275 			/* parameter 1:	(input)	picture string		*/
  2   276 			/* parameter 2:	(input)	symbol node pointer		*/
  2   277 			/* parameter 3:	(output)	error code, if any		*/
  2   278 
  2   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  2   280 			returns(pointer);
  2   281 			/* parameter 1:	(input)	picture string		*/
  2   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  2   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  2   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  2   285 			/* return:	(output)	reference node pointer	*/
  2   286 
  2   287 declare	declare_pointer	entry(pointer)
  2   288 			returns(pointer);
  2   289 			/* parameter 1:	(input)	block node pointer		*/
  2   290 			/* return:	(output)	reference node pointer	*/
  2   291 
  2   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  2   293 			returns(pointer);
  2   294 			/* parameter 1:	(input)	type			*/
  2   295 			/* parameter 2:	(input)	precision			*/
  2   296 			/* parameter 3:	(input)	scale			*/
  2   297 			/* parameter 4:	(input)	length			*/
  2   298 			/* return:	(output)	reference node pointer	*/
  2   299 
  2   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  2   301 			returns(char(120) varying);
  2   302 			/* parameter 1:	(input)	node pointer		*/
  2   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   304 			/* return:	(output)	source line id		*/
  2   305 
  2   306 declare	decode_source_id	entry(
  3     1 			1 structure unaligned,
  3     2 			  2 /* file_number */	bit(8),
  3     3 			  2 /* line_number */	bit(14),
  3     4 			  2 /* stmt_number */	bit(5),
  2   307 
  2   308 			bit(1) aligned)
  2   309 			returns(char(120) varying);
  2   310 			/* parameter 1:	(input)	source id			*/
  2   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   312 			/* return:	(output)	source line id		*/
  2   313 
  2   314 declare	error		entry(fixed bin(15),pointer,pointer);
  2   315 			/* parameter 1:	(input)	error number		*/
  2   316 			/* parameter 2:	(input)	statement node pointer or null*/
  2   317 			/* parameter 3:	(input)	token node pointer 		*/
  2   318 
  2   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  2   320 			/* parameter 1:	(input)	error number		*/
  2   321 			/* parameter 2:	(input)	statement node pointer or null*/
  2   322 			/* parameter 3:	(input)	token node pointer 		*/
  2   323 
  2   324 declare	error_		entry(fixed bin(15),
  4     1 			1 structure unaligned,
  4     2 			  2 /* file_number */	bit(8),
  4     3 			  2 /* line_number */	bit(14),
  4     4 			  2 /* stmt_number */	bit(5),
  2   325 
  2   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  2   327 			/* parameter 1:	(input)	error number		*/
  2   328 			/* parameter 2:	(input)	statement id		*/
  2   329 			/* parameter 3:	(input)	any node pointer		*/
  2   330 			/* parameter 4:	(input)	source segment		*/
  2   331 			/* parameter 5:	(input)	source starting character	*/
  2   332 			/* parameter 6:	(input)	source length		*/
  2   333 
  2   334 declare	error_$no_text	entry(fixed bin(15),
  5     1 			1 structure unaligned,
  5     2 			  2 /* file_number */	bit(8),
  5     3 			  2 /* line_number */	bit(14),
  5     4 			  2 /* stmt_number */	bit(5),
  2   335 
  2   336 			pointer);
  2   337 			/* parameter 1:	(input)	error number		*/
  2   338 			/* parameter 2:	(input)	statement id		*/
  2   339 			/* parameter 3:	(input)	any node pointer		*/
  2   340 
  2   341 declare	error_$initialize_error entry();
  2   342 
  2   343 declare	error_$finish	entry();
  2   344 
  2   345 declare	free_node		entry(pointer);
  2   346 			/* parameter 1:	any node pointer			*/
  2   347 
  2   348 declare	get_array_size	entry(pointer,fixed bin(3));
  2   349 			/* parameter 1:	(input)	symbol node pointer		*/
  2   350 			/* parameter 2:	(input)	units			*/
  2   351 
  2   352 declare	get_size		entry(pointer);
  2   353 			/* parameter 1:	(input)	symbol node pointer		*/
  2   354 
  2   355 declare	merge_attributes	external entry(pointer,pointer)
  2   356 			returns(bit(1) aligned);
  2   357 			/* parameter 1:	(input)	target symbol node pointer */
  2   358 			/* parameter 2:	(input)	source symbol node pointer */
  2   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  2   360 
  2   361 declare	optimizer		entry(pointer);
  2   362 			/* parameter 1:	(input)	root pointer		*/
  2   363 
  2   364 declare	parse_error	entry(fixed bin(15),pointer);
  2   365 			/* parameter 1:	(input)	error number		*/
  2   366 			/* parameter 2:	(input)	any node pointer		*/
  2   367 
  2   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  2   369 			/* parameter 1:	(input)	error number		*/
  2   370 			/* parameter 2:	(input)	any node pointer		*/
  2   371 
  2   372 declare	pl1_error_print$write_out
  2   373 			entry(fixed bin(15),
  6     1 			1 structure unaligned,
  6     2 			  2 /* file_number */	bit(8),
  6     3 			  2 /* line_number */	bit(14),
  6     4 			  2 /* stmt_number */	bit(5),
  2   374 
  2   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  2   376 			/* parameter 1:	(input)	error number		*/
  2   377 			/* parameter 2:	(input)	statement identification	*/
  2   378 			/* parameter 3:	(input)	any node pointer		*/
  2   379 			/* parameter 4:	(input)	source segment		*/
  2   380 			/* parameter 5:	(input)	source character index	*/
  2   381 			/* parameter 6:	(input)	source length		*/
  2   382 			/* parameter 7:	(input)	source line		*/
  2   383 
  2   384 declare	pl1_error_print$listing_segment
  2   385 			entry(fixed bin(15),
  7     1 			1 structure unaligned,
  7     2 			  2 /* file_number */	bit(8),
  7     3 			  2 /* line_number */	bit(14),
  7     4 			  2 /* stmt_number */	bit(5),
  2   386 
  2   387 			pointer);
  2   388 			/* parameter 1:	(input)	error number		*/
  2   389 			/* parameter 2:	(input)	statement identification	*/
  2   390 			/* parameter 3:	(input)	token node pointer		*/
  2   391 
  2   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  2   393 			/* parameter 1:	(input)	string			*/
  2   394 
  2   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  2   396 			/* parameter 1:	(input)	string			*/
  2   397 
  2   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  2   399 			/* parameter 1:	(input)	string			*/
  2   400 			/* parameter 2:	(input)	string length or 0		*/
  2   401 
  2   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  2   403 			/* parameter 1:	(input)	string			*/
  2   404 			/* parameter 2:	(input)	string length or 0		*/
  2   405 
  2   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  2   407 			/* parameter 1:	(input)	string pointer		*/
  2   408 			/* parameter 2:	(input)	string size		*/
  2   409 
  2   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  2   411 			/* parameter 1:	(input)	string pointer		*/
  2   412 			/* parameter 2:	(input)	string length or 0		*/
  2   413 
  2   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  2   415 			/* parameter 1:	(input)	string			*/
  2   416 			/* parameter 2:	(input)	length			*/
  2   417 
  2   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  2   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  2   420 			/* parameter 2:	(input)	line number		*/
  2   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  2   422 			/* parameter 4:	(input)	number of chars to copy	*/
  2   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  2   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  2   425 
  2   426 declare	refer_extent	entry(pointer,pointer);
  2   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  2   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  2   429 
  2   430 declare	reserve$clear	entry()
  2   431 			returns(pointer);
  2   432 			/* return:	(output)	pointer			*/
  2   433 
  2   434 declare	reserve$declare_lib	entry(fixed bin(15))
  2   435 			returns(pointer);
  2   436 			/* parameter 1:	(input)	builtin function number	*/
  2   437 			/* return:	(output)	pointer			*/
  2   438 
  2   439 declare	reserve$read_lib	entry(fixed bin(15))
  2   440 			returns(pointer);
  2   441 			/* parameter 1:	(input)	builtin function number	*/
  2   442 			/* return:	(output)	pointer			*/
  2   443 
  2   444 declare	semantic_translator	entry();
  2   445 
  2   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  2   447 			/* parameter 1:	(input)	error number		*/
  2   448 			/* parameter 2:	(input)	any node pointer		*/
  2   449 
  2   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  2   451 			/* parameter 1:	(input)	error number		*/
  2   452 			/* parameter 2:	(input)	any node pointer		*/
  2   453 
  2   454 declare	share_expression	entry(ptr)
  2   455 			returns(ptr);
  2   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  2   457 			/* return:	(output)	tree pointer or null	*/
  2   458 
  2   459 declare	token_to_binary	entry(ptr) reducible
  2   460 			returns(fixed bin(31));
  2   461 			/* parameter 1:	(input)	token node pointer		*/
  2   462 			/* return:	(output)	converted binary value	*/
  2   463 
  2   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
  1   228 
  1   229 /* END INCLUDE FILE ... semant.incl.pl1 */
       25 
  8     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
  8     2 
  8     3 dcl	1 symbol			based aligned,
  8     4 	2 node_type		bit(9) unal,
  8     5 	2 source_id		structure unal,
  8     6 	  3 file_number		bit(8),
  8     7 	  3 line_number		bit(14),
  8     8 	  3 statement_number	bit(5),
  8     9 	2 location		fixed(18) unal unsigned,
  8    10 	2 allocated		bit(1) unal,
  8    11 	2 dcl_type		bit(3) unal,
  8    12 	2 reserved		bit(6) unal,
  8    13 	2 pix			unal,
  8    14 	  3 pic_fixed		bit(1) unal,
  8    15 	  3 pic_float		bit(1) unal,
  8    16 	  3 pic_char		bit(1) unal,
  8    17 	  3 pic_scale		fixed(7) unal,
  8    18 	  3 pic_size		fixed(7) unal,
  8    19 	2 level			fixed(8) unal,
  8    20 	2 boundary		fixed(3) unal,
  8    21 	2 size_units		fixed(3) unal,
  8    22 	2 scale			fixed(7) unal,
  8    23 	2 runtime			bit(18) unal,
  8    24 	2 runtime_offset		bit(18) unal,
  8    25 	2 block_node		ptr unal,
  8    26 	2 token			ptr unal,
  8    27 	2 next			ptr unal,
  8    28 	2 multi_use		ptr unal,
  8    29 	2 cross_references		ptr unal,
  8    30 	2 initial			ptr unal,
  8    31 	2 array			ptr unal,
  8    32 	2 descriptor		ptr unal,
  8    33 	2 equivalence		ptr unal,
  8    34 	2 reference		ptr unal,
  8    35 	2 general			ptr unal,
  8    36 	2 father			ptr unal,
  8    37 	2 brother			ptr unal,
  8    38 	2 son			ptr unal,
  8    39 	2 word_size		ptr unal,
  8    40 	2 bit_size		ptr unal,
  8    41 	2 dcl_size		ptr unal,
  8    42 	2 symtab_size		ptr unal,
  8    43 	2 c_word_size		fixed(24),
  8    44 	2 c_bit_size		fixed(24),
  8    45 	2 c_dcl_size		fixed(24),
  8    46 
  8    47 	2 attributes		structure aligned,
  8    48 	  3 data_type		structure unal,
  8    49 	    4 structure		bit(1) ,
  8    50 	    4 fixed		bit(1),
  8    51 	    4 float		bit(1),
  8    52 	    4 bit			bit(1),
  8    53 	    4 char		bit(1),
  8    54 	    4 ptr			bit(1),
  8    55 	    4 offset		bit(1),
  8    56 	    4 area		bit(1),
  8    57 	    4 label		bit(1),
  8    58 	    4 entry		bit(1),
  8    59 	    4 file		bit(1),
  8    60 	    4 arg_descriptor	bit(1),
  8    61 	    4 storage_block		bit(1),
  8    62 	    4 explicit_packed	bit(1), /* options(packed) */
  8    63 	    4 condition		bit(1),
  8    64 	    4 format		bit(1),
  8    65 	    4 builtin		bit(1),
  8    66 	    4 generic		bit(1),
  8    67 	    4 picture		bit(1),
  8    68 
  8    69 	  3 misc_attributes		structure unal,
  8    70 	    4 dimensioned		bit(1),
  8    71 	    4 initialed		bit(1),
  8    72 	    4 aligned		bit(1),
  8    73 	    4 unaligned		bit(1),
  8    74 	    4 signed		bit(1),
  8    75 	    4 unsigned		bit(1),
  8    76 	    4 precision		bit(1),
  8    77 	    4 varying		bit(1),
  8    78 	    4 local		bit(1),
  8    79 	    4 decimal		bit(1),
  8    80 	    4 binary		bit(1),
  8    81 	    4 real		bit(1),
  8    82 	    4 complex		bit(1),
  8    83 	    4 variable		bit(1),
  8    84 	    4 reducible		bit(1),
  8    85 	    4 irreducible		bit(1),
  8    86 	    4 returns		bit(1),
  8    87 	    4 position		bit(1),
  8    88 	    4 internal		bit(1),
  8    89 	    4 external		bit(1),
  8    90 	    4 like		bit(1),
  8    91 	    4 member		bit(1),
  8    92 	    4 non_varying		bit(1),
  8    93 	    4 options		bit(1),
  8    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
  8    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
  8    96 
  8    97 	  3 storage_class		structure unal,
  8    98 	    4 auto		bit(1),
  8    99 	    4 based		bit(1),
  8   100 	    4 static		bit(1),
  8   101 	    4 controlled		bit(1),
  8   102 	    4 defined		bit(1),
  8   103 	    4 parameter		bit(1),
  8   104 	    4 param_desc		bit(1),
  8   105 	    4 constant		bit(1),
  8   106 	    4 temporary		bit(1),
  8   107 	    4 return_value		bit(1),
  8   108 
  8   109 	  3 file_attributes		structure unal,
  8   110 	    4 print		bit(1),
  8   111 	    4 input		bit(1),
  8   112 	    4 output		bit(1),
  8   113 	    4 update		bit(1),
  8   114 	    4 stream		bit(1),
  8   115 	    4 reserved_1		bit(1),
  8   116 	    4 record		bit(1),
  8   117 	    4 sequential		bit(1),
  8   118 	    4 direct		bit(1),
  8   119 	    4 interactive		bit(1),		/* env(interactive) */
  8   120 	    4 reserved_2		bit(1),
  8   121 	    4 reserved_3		bit(1),
  8   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
  8   123 	    4 keyed		bit(1),
  8   124 	    4 reserved_4		bit(1),
  8   125 	    4 environment		bit(1),
  8   126 
  8   127 	  3 compiler_developed	structure unal,
  8   128 	    4 aliasable		bit(1),
  8   129 	    4 packed		bit(1),
  8   130 	    4 passed_as_arg		bit(1),
  8   131 	    4 allocate		bit(1),
  8   132 	    4 set			bit(1),
  8   133 	    4 exp_extents		bit(1),
  8   134 	    4 refer_extents		bit(1),
  8   135 	    4 star_extents		bit(1),
  8   136 	    4 isub		bit(1),
  8   137 	    4 put_in_symtab		bit(1),
  8   138 	    4 contiguous		bit(1),
  8   139 	    4 put_data		bit(1),
  8   140 	    4 overlayed		bit(1),
  8   141 	    4 error		bit(1),
  8   142 	    4 symtab_processed	bit(1),
  8   143 	    4 overlayed_by_builtin	bit(1),
  8   144 	    4 defaulted		bit(1),
  8   145 	    4 connected		bit(1);
  8   146 
  8   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
       26 
  9     1 dcl	1 array			based aligned,
  9     2 	2 node_type		bit(9) unaligned,
  9     3 	2 reserved		bit(34) unaligned,
  9     4 	2 number_of_dimensions	fixed(7) unaligned,
  9     5 	2 own_number_of_dimensions	fixed(7) unaligned,
  9     6 	2 element_boundary		fixed(3) unaligned,
  9     7 	2 size_units		fixed(3) unaligned,
  9     8 	2 offset_units		fixed(3) unaligned,
  9     9 	2 interleaved		bit(1) unaligned,
  9    10 	2 c_element_size		fixed(24),
  9    11 	2 c_element_size_bits	fixed(24),
  9    12 	2 c_virtual_origin		fixed(24),
  9    13 	2 element_size		ptr unaligned,
  9    14 	2 element_size_bits		ptr unaligned,
  9    15 	2 virtual_origin		ptr unaligned,
  9    16 	2 symtab_virtual_origin	ptr unaligned,
  9    17 	2 symtab_element_size	ptr unaligned,
  9    18 	2 bounds			ptr unaligned,
  9    19 	2 element_descriptor	ptr unaligned;
  9    20 
  9    21 dcl	1 bound			based aligned,
  9    22 	2 node_type		bit(9),
  9    23 	2 c_lower			fixed(24),
  9    24 	2 c_upper			fixed(24),
  9    25 	2 c_multiplier		fixed(24),
  9    26 	2 c_desc_multiplier		fixed(24),
  9    27 	2 lower			ptr unaligned,
  9    28 	2 upper			ptr unaligned,
  9    29 	2 multiplier		ptr unaligned,
  9    30 	2 desc_multiplier		ptr unaligned,
  9    31 	2 symtab_lower		ptr unaligned,
  9    32 	2 symtab_upper		ptr unaligned,
  9    33 	2 symtab_multiplier		ptr unaligned,
  9    34 	2 next			ptr unaligned;
       27 
 10     1 /* BEGIN INCLUDE FILE ... block.incl.pl1 */
 10     2 /* Modified 22 Ocober 1980 by M. N. Davidoff to increase max block.number to 511 */
 10     3 /* format: style3,idind30 */
 10     4 
 10     5 declare	1 block			aligned based,
 10     6 	  2 node_type		bit (9) unaligned,
 10     7 	  2 source_id		structure unaligned,
 10     8 	    3 file_number		bit (8),
 10     9 	    3 line_number		bit (14),
 10    10 	    3 statement_number	bit (5),
 10    11 	  2 father		ptr unaligned,
 10    12 	  2 brother		ptr unaligned,
 10    13 	  2 son			ptr unaligned,
 10    14 	  2 declaration		ptr unaligned,
 10    15 	  2 end_declaration		ptr unaligned,
 10    16 	  2 default		ptr unaligned,
 10    17 	  2 end_default		ptr unaligned,
 10    18 	  2 context		ptr unaligned,
 10    19 	  2 prologue		ptr unaligned,
 10    20 	  2 end_prologue		ptr unaligned,
 10    21 	  2 main			ptr unaligned,
 10    22 	  2 end_main		ptr unaligned,
 10    23 	  2 return_values		ptr unaligned,
 10    24 	  2 return_count		ptr unaligned,
 10    25 	  2 plio_ps		ptr unaligned,
 10    26 	  2 plio_fa		ptr unaligned,
 10    27 	  2 plio_ffsb		ptr unaligned,
 10    28 	  2 plio_ssl		ptr unaligned,
 10    29 	  2 plio_fab2		ptr unaligned,
 10    30 	  2 block_type		bit (9) unaligned,
 10    31 	  2 prefix		bit (12) unaligned,
 10    32 	  2 like_attribute		bit (1) unaligned,
 10    33 	  2 no_stack		bit (1) unaligned,
 10    34 	  2 get_data		bit (1) unaligned,
 10    35 	  2 flush_at_call		bit (1) unaligned,
 10    36 	  2 processed		bit (1) unaligned,
 10    37 	  2 text_displayed		bit (1) unaligned,
 10    38 	  2 number		fixed bin (9) unsigned unaligned,
 10    39 	  2 free_temps		dimension (3) ptr,	/* these fields are used by the code generator */
 10    40 	  2 temp_list		ptr,
 10    41 	  2 entry_list		ptr,
 10    42 	  2 o_and_s		ptr,
 10    43 	  2 why_nonquick		aligned,
 10    44 	    3 auto_adjustable_storage bit (1) unaligned,
 10    45 	    3 returns_star_extents	bit (1) unaligned,
 10    46 	    3 stack_extended_by_args	bit (1) unaligned,
 10    47 	    3 invoked_by_format	bit (1) unaligned,
 10    48 	    3 format_statement	bit (1) unaligned,
 10    49 	    3 io_statements		bit (1) unaligned,
 10    50 	    3 assigned_to_entry_var	bit (1) unaligned,
 10    51 	    3 condition_statements	bit (1) unaligned,
 10    52 	    3 no_owner		bit (1) unaligned,
 10    53 	    3 recursive_call	bit (1) unaligned,
 10    54 	    3 options_non_quick	bit (1) unaligned,
 10    55 	    3 options_variable	bit (1) unaligned,
 10    56 	    3 never_referenced	bit (1) unaligned,
 10    57 	    3 pad_nonquick		bit (5) unaligned,
 10    58 	  2 prologue_flag		bit (1) unaligned,
 10    59 	  2 options_main		bit (1) unaligned,
 10    60 	  2 pad			bit (16) unaligned,
 10    61 	  2 number_of_entries	fixed bin (17),
 10    62 	  2 level			fixed bin (17),
 10    63 	  2 last_auto_loc		fixed bin (17),
 10    64 	  2 symbol_block		fixed bin (17),
 10    65 	  2 entry_info		fixed bin (18),
 10    66 	  2 enter			structure unaligned,
 10    67 	    3 start		fixed bin (17),
 10    68 	    3 end			fixed bin (17),
 10    69 	  2 leave			structure unaligned,
 10    70 	    3 start		fixed bin (17),
 10    71 	    3 end			fixed bin (17),
 10    72 	  2 owner			ptr;
 10    73 
 10    74 declare	max_block_number		fixed bin internal static options (constant) initial (511);
 10    75 
 10    76 /* END INCLUDE FILE ... block.incl.pl1 */
       28 
 11     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
 11     2 
 11     3 dcl	1 reference		based aligned,
 11     4 	2 node_type		bit(9) unaligned,
 11     5 	2 array_ref		bit(1) unaligned,
 11     6 	2 varying_ref		bit(1) unaligned,
 11     7 	2 shared			bit(1) unaligned,
 11     8 	2 put_data_sw		bit(1) unaligned,
 11     9 	2 processed		bit(1) unaligned,
 11    10 	2 units			fixed(3) unaligned,
 11    11 	2 ref_count		fixed(17) unaligned,
 11    12 	2 c_offset		fixed(24),
 11    13 	2 c_length		fixed(24),
 11    14 	2 symbol			ptr unaligned,
 11    15 	2 qualifier		ptr unaligned,
 11    16 	2 offset			ptr unaligned,
 11    17 	2 length			ptr unaligned,
 11    18 	2 subscript_list		ptr unaligned,
 11    19 						/* these fields are used by the 645 code generator */
 11    20 	2 address			structure unaligned,
 11    21 	  3 base			bit(3),
 11    22 	  3 offset		bit(15),
 11    23 	  3 op			bit(9),
 11    24 	  3 no_address		bit(1),
 11    25 	  3 inhibit		bit(1),
 11    26 	  3 ext_base		bit(1),
 11    27 	  3 tag			bit(6),
 11    28 	2 info			structure unaligned,
 11    29 	  3 address_in		structure,
 11    30 	    4 b			dimension(0:7) bit(1),
 11    31 	    4 storage		bit(1),
 11    32 	  3 value_in		structure,
 11    33 	    4 a			bit(1),
 11    34 	    4 q			bit(1),
 11    35 	    4 aq			bit(1),
 11    36 	    4 string_aq		bit(1),
 11    37 	    4 complex_aq		bit(1),
 11    38 	    4 decimal_aq		bit(1),
 11    39 	    4 b			dimension(0:7) bit(1),
 11    40 	    4 storage		bit(1),
 11    41 	    4 indicators		bit(1),
 11    42 	    4 x			dimension(0:7) bit(1),
 11    43 	  3 other			structure,
 11    44 	    4 big_offset		bit(1),
 11    45 	    4 big_length		bit(1),
 11    46 	    4 modword_in_offset	bit(1),
 11    47 	2 data_type		fixed(5) unaligned,
 11    48 	2 bits			structure unaligned,
 11    49 	  3 padded_ref		bit(1),
 11    50 	  3 aligned_ref		bit(1),
 11    51 	  3 long_ref		bit(1),
 11    52 	  3 forward_ref		bit(1),
 11    53 	  3 ic_ref		bit(1),
 11    54 	  3 temp_ref		bit(1),
 11    55 	  3 defined_ref		bit(1),
 11    56 	  3 evaluated		bit(1),
 11    57 	  3 allocate		bit(1),
 11    58 	  3 allocated		bit(1),
 11    59 	  3 aliasable		bit(1),
 11    60 	  3 even			bit(1),
 11    61 	  3 perm_address		bit(1),
 11    62 	  3 aggregate		bit(1),
 11    63 	  3 hit_zero		bit(1),
 11    64 	  3 dont_save		bit(1),
 11    65 	  3 fo_in_qual		bit(1),
 11    66 	  3 hard_to_load		bit(1),
 11    67 	2 relocation		bit(12) unaligned,
 11    68 	2 more_bits		structure unaligned,
 11    69 	  3 substr		bit(1),
 11    70 	  3 padded_for_store_ref	bit(1),
 11    71 	  3 aligned_for_store_ref	bit(1),
 11    72 	  3 mbz			bit(15),
 11    73 	2 store_ins		bit(18) unaligned;
 11    74 
 11    75 /* END INCLUDE FILE ... reference.incl.pl1 */
       29 
 12     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
 12     2 
 12     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
 12     4 
 12     5 /* format: style3 */
 12     6 dcl	1 operator	based aligned,
 12     7 	  2 node_type	bit (9) unaligned,
 12     8 	  2 op_code	bit (9) unaligned,
 12     9 	  2 shared	bit (1) unaligned,
 12    10 	  2 processed	bit (1) unaligned,
 12    11 	  2 optimized	bit (1) unaligned,
 12    12 	  2 number	fixed (14) unaligned,
 12    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
 12    14 
 12    15 dcl	max_number_of_operands
 12    16 			fixed bin (15) int static options (constant) initial (32767);
 12    17 
 12    18 /* END INCLUDE FILE ... operator.incl.pl1 */
       30 
 13     1 /* ***********************************************************
 13     2*   *                                                         *
 13     3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
 13     4*   *                                                         *
 13     5*   *********************************************************** */
 13     6 /* BEGIN INCLUDE FILE ... statement.incl.pl1 */
 13     7 /* Internal interface of the PL/I compiler */
 13     8 
 13     9 dcl	1 statement		based aligned,
 13    10 	2 node_type		bit(9) unaligned,
 13    11 	2 source_id		structure unaligned,
 13    12 	  3 file_number		bit(8),
 13    13 	  3 line_number		bit(14),
 13    14 	  3 statement_number	bit(5),
 13    15 	2 next			ptr unaligned,
 13    16 	2 back			ptr unaligned,
 13    17 	2 root			ptr unaligned,
 13    18 	2 labels			ptr unaligned,
 13    19 	2 reference_list		ptr unaligned,
 13    20 	2 state_list		ptr unaligned,
 13    21 	2 reference_count		fixed(17) unaligned,
 13    22 	2 ref_count_copy		fixed(17) unaligned,
 13    23 	2 object			structure unaligned,
 13    24 	  3 start			fixed(17),
 13    25 	  3 finish		fixed(17),
 13    26 	2 source			structure unaligned,
 13    27 	  3 segment		fixed(11),
 13    28 	  3 start			fixed(23),
 13    29 	  3 length		fixed(11),
 13    30 	2 prefix			bit(12) unaligned,
 13    31 	2 optimized		bit(1) unaligned,
 13    32 	2 free_temps		bit(1) unaligned,
 13    33 	2 LHS_in_RHS		bit(1) unaligned,
 13    34 	2 statement_type		bit(9) unaligned,
 13    35 	2 bits			structure unaligned,
 13    36 	  3 processed		bit(1) unaligned,
 13    37 	  3 put_in_profile		bit(1) unaligned,
 13    38 	  3 generated		bit(1) unaligned,
 13    39 	  3 snap			bit(1) unaligned,
 13    40 	  3 system		bit(1) unaligned,
 13    41 	  3 irreducible		bit(1) unaligned,
 13    42 	  3 checked		bit(1) unaligned,
 13    43 	  3 save_temps		bit(1) unaligned,
 13    44 	  3 suppress_warnings	bit(1) unaligned,
 13    45 	  3 force_nonquick		bit(1) unaligned,
 13    46 	  3 expanded_by_name	bit(1) unaligned,
 13    47 	  3 begins_loop		bit(1) unaligned,
 13    48 	  3 pad			bit(24) unaligned;
 13    49 
 13    50 /* END INCLUDE FILE ... statement.incl.pl1 */
       31 
 14     1 /* BEGIN INCLUDE FILE ... op_codes.incl.pl1 */
 14     2 
 14     3 /* Modified: 25 Apr 1979 by PCK 4-bit decimal */
 14     4 /* Modified: 6 Jun 1979 by PG to add rank and byte */
 14     5 /* Modified: 26 Dec 1979 by PCK to add assign_by_name */
 14     6 /* Modified: 26 July 82 BIM wordno, segno */
 14     7 
 14     8 dcl (	add		initial("000010001"b),	/* opnd(1) <- opnd(2)+opnd(3)		*/
 14     9 	sub		initial("000010010"b),	/* opnd(1) <- opnd(2)-opnd(3)		*/
 14    10 	mult		initial("000010011"b),	/* opnd(1) <- opnd(2)*opnd(3)		*/
 14    11 	div		initial("000010100"b),	/* opnd(1) <- opnd(2)/opnd(3)		*/
 14    12 	negate		initial("000010101"b),	/* opnd(1) <- -opnd(2)  		*/
 14    13 	exp		initial("000010110"b),	/* opnd(1) <- opnd(2) ** opnd(3)	*/
 14    14 
 14    15 	and_bits		initial("000100001"b),	/* opnd(1) <- opnd(2) & opnd(3)	*/
 14    16 	or_bits		initial("000100010"b),	/* opnd(1) <- opnd(2)|opnd(3)		*/
 14    17 	xor_bits		initial("000100011"b),	/* opnd(1) <- opnd(2) xor opnd(3)	*/
 14    18 	not_bits		initial("000100100"b),	/* opnd(1) <- ^opnd(2)		*/
 14    19 	cat_string	initial("000100101"b),	/* opnd(1) <- opnd(2)||opnd(3)	*/
 14    20 	bool_fun		initial("000100110"b),	/* opnd(1) <- bool(opnd(2),opnd(3),opnd(4)) */
 14    21 
 14    22 	assign		initial("000110001"b),	/* opnd(1) <- opnd(2)		*/
 14    23 	assign_size_ck	initial("000110010"b),	/* opnd(1) <- opnd(2)		*/
 14    24 	assign_zero	initial("000110011"b),	/* opnd(1) <- 0			*/
 14    25 	copy_words	initial("000110100"b),	/* move opnd(2) to opnd(1) by opnd(3) words */
 14    26 	copy_string	initial("000110101"b),	/* move opnd(2) to opnd(1) by opnd(3) units */
 14    27 	make_desc		initial("000110110"b),	/* opnd(1) <- descriptor(opnd(2),opnd(3)) */
 14    28 	assign_round	initial("000110111"b),	/* opnd(1) <- opnd(2) rounded		*/
 14    29 	pack		initial("000111000"b),	/* opnd(1) <- encode to picture opnd(2) */
 14    30 	unpack		initial("000111001"b),	/* opnd(1) <- decode from picture opnd(2) */
 14    31 
 14    32 	less_than		initial("001000100"b),	/* opnd(1) <- opnd(2) < opnd(3)	*/
 14    33 	greater_than	initial("001000101"b),	/* opnd(1) <- opnd(2) > opnd(3)	*/
 14    34 	equal		initial("001000110"b),	/* opnd(1) <- opnd(2) = opnd(3)	*/
 14    35 	not_equal		initial("001000111"b),	/* opnd(1) <- opnd(2) ^= opnd(3)	*/
 14    36 	less_or_equal	initial("001001000"b),	/* opnd(1) <- opnd(2) <= opnd(3)	*/
 14    37 	greater_or_equal	initial("001001001"b),	/* opnd(1) <- opnd(2) >= opnd(3)	*/
 14    38 
 14    39 	jump		initial("001010001"b),	/* go to opnd(1) unconditionally	*/
 14    40 	jump_true		initial("001010010"b),	/* go to opnd(1) if opnd(2) is not 0	*/
 14    41 	jump_false	initial("001010011"b),	/* go to opnd(1) if opnd(2) is all 0	*/
 14    42 	jump_if_lt	initial("001010100"b),	/* go to opnd(1) if opnd(2) < opnd(3)	*/
 14    43 	jump_if_gt	initial("001010101"b),	/* go to opnd(1) if opnd(2) > opnd(3)	*/
 14    44 	jump_if_eq	initial("001010110"b),	/* go to opnd(1) if opnd(2) = opnd(3)	*/
 14    45 	jump_if_ne	initial("001010111"b),	/* go to opnd(1) if opnd(2) ^= opnd(3)	*/
 14    46 	jump_if_le	initial("001011000"b),	/* go to opnd(1) if opnd(2) <= opnd(3)	*/
 14    47 	jump_if_ge	initial("001011001"b),	/* go to opnd(1) if opnd(2) >= opnd(3)	*/
 14    48 
 14    49 	std_arg_list	initial("001100001"b),	/* opnd(1) <- arglist(opnd(2) desclist(opnd(3)))	*/
 14    50 	return_words	initial("001100010"b),	/* return aggregate opnd(1), opnd(2) is length in words */
 14    51 	std_call		initial("001100011"b),	/* opnd(1) <- call opnd(2) with opnd(3)		*/
 14    52 	return_bits	initial("001100100"b),	/* return aggregate opnd(1), opnd(2) is length in bits */
 14    53 	std_entry		initial("001100101"b),	/* entry(opnd(1)... opnd(n))			*/
 14    54 	return_string	initial("001100110"b),	/* return string opnd(1) */
 14    55 	ex_prologue	initial("001100111"b),	/* execute the prologue -no operands-		*/
 14    56 	allot_auto	initial("001101000"b),	/* opnd(1) <- addrel(stack,opnd(2))		*/
 14    57 	param_ptr		initial("001101001"b),	/* opnd(1) <- ptr to opnd(2) in  block opnd(3)	*/
 14    58 	param_desc_ptr	initial("001101010"b),	/* opnd(1) <- ptr to opnd(2) in block opnd(3)	*/
 14    59 	std_return	initial("001101011"b),	/* return -no arguments-			*/
 14    60 	allot_ctl		initial("001101100"b),	/* allocate opnd(1) , length in words is opnd(2) 	*/
 14    61 	free_ctl		initial("001101101"b),	/* free opnd(1)				*/
 14    62 	stop		initial("001101110"b),	/* stop - terminate run unit			*/
 14    63 
 14    64 	mod_bit		initial("001110000"b),	/* opnd(1) <- mod(opnd(3),36),
 14    65*						   opnd(2) <- opnd(3) / 36		*/
 14    66 	mod_byte		initial("001110001"b),	/* opnd(1) <- mod(opnd(3),4),
 14    67*						   opnd(2) <- opnd(3) / 4		*/
 14    68 	mod_half		initial("001110010"b),	/* opnd(1) <- mod(opnd(3),2),
 14    69*						   opnd(2) <- opnd(3) / 2		*/
 14    70 	mod_word		initial("001110011"b),	/* TO BE DEFINED BY BLW			*/
 14    71 
 14    72 	bit_to_char	initial("010000000"b),	/* opnd(1) <- (opnd(2)+8)/9		*/
 14    73 	bit_to_word	initial("010000001"b),	/* opnd(1) <- (opnd(2)+35)/36		*/
 14    74 	char_to_word	initial("010000010"b),	/* opnd(1) <- (opnd(2)+3)/4		*/
 14    75 	half_to_word	initial("010000011"b),	/* opnd(1) <- (opnd(2)+1)/2		*/
 14    76 	word_to_mod2	initial("010000100"b),	/* opnd(1) <- (opnd(2)+1)/2*2		*/
 14    77 	word_to_mod4	initial("010000101"b),	/* opnd(1) <- (opnd(2)+3)/4*4		*/
 14    78 	word_to_mod8	initial("010000110"b),	/* opnd(1) <- (opnd(2)+7)/8*8		*/
 14    79 	rel_fun		initial("010000111"b),	/* opnd(1) <- rel(opnd(2))		*/
 14    80 	baseno_fun	initial("010001000"b),	/* opnd(1) <- baseno(opnd(2))		*/
 14    81 	desc_size		initial("010001001"b),	/* opnd(1) <- substr(opnd(2),13,24)	*/
 14    82 	bit_pointer	initial("010001010"b),	/* opnd(1) <- bit offset of opnd(2)	*/
 14    83 	index_before_fun	initial("010001011"b),	/* opnd(1) <- length of before(opnd(2),opnd(3)) */
 14    84 	index_after_fun	initial("010001100"b),	/* opnd(1) <- offset of after(opnd(2),opnd(3)) in opnd(2) */
 14    85 	verify_ltrim_fun	initial("010001101"b),	/* opnd(1) <- offset of ltrim(opnd(2),opnd(3)) in opnd(2) */
 14    86 	verify_rtrim_fun	initial("010001110"b),	/* opnd(1) <- length(opnd(2))-length(rtrim(opnd(2),opnd(3))) */
 14    87 	digit_to_bit	initial("010001111"b),	/* opnd(1) <- 9*opnd(2)/2		*/
 14    88 
 14    89 	ceil_fun		initial("010010000"b),	/* opnd(1) <- ceil(opnd(2))		*/
 14    90 	floor_fun		initial("010010001"b),	/* opnd(1) <- floor(opnd(2))		*/
 14    91 	round_fun		initial("010010010"b),	/* opnd(1) <- round(opnd(2))		*/
 14    92 	sign_fun		initial("010010011"b),	/* opnd(1) <- sign(opnd(2))		*/
 14    93 	abs_fun		initial("010010100"b),	/* opnd(1) <- abs(opnd(2))		*/
 14    94 	trunc_fun		initial("010010101"b),	/* opnd(1) <- trunc(opnd(2))		*/
 14    95 	byte_fun		initial("010010110"b),	/* opnd(1) <- byte(opnd(2))		*/
 14    96 	rank_fun		initial("010010111"b),	/* opnd(1) <- rank(opnd(2))		*/
 14    97 	index_rev_fun	initial("010011000"b),	/* opnd(1) <- index(reverse(opnd(2)),reverse(opnd(3))) */
 14    98 	search_rev_fun	initial("010011001"b),	/* opnd(1) <- search(reverse(opnd(2)),opnd(3)) */
 14    99 	verify_rev_fun	initial("010011010"b),	/* opnd(1) <- verify(reverse(opnd(2)),opnd(3)) */
 14   100 	wordno_fun	initial("010011011"b),        /* opnd(1) <- wordno (opnd(2)) */
 14   101 	segno_fun		initial("010011100"b),        /* opnd(1) <- segno (opnd(2)) */
 14   102 	bitno_fun           initial("010011101"b),        /* opnd(1) <- bitno (opnd(2)) */
 14   103 	charno_fun	initial("010011110"b),        /* opnd(1) <- charno (opnd(2)) */
 14   104 
 14   105 	index_fun		initial("010100000"b),	/* opnd(1) <- index(opnd(2),opnd(3))	*/
 14   106 	off_fun		initial("010100001"b),	/* opnd(1) <- offset(opnd(2),opnd(3))	*/
 14   107 	complex_fun	initial("010100010"b),	/* opnd(1) <- complex(opnd(2),opnd(3))	*/
 14   108 	conjg_fun		initial("010100011"b),	/* opnd(1) <- conjg(opnd(2),opnd(3))	*/
 14   109 	mod_fun		initial("010100100"b),	/* opnd(1) <- mod(opnd(2),opnd(3))	*/
 14   110 	repeat_fun	initial("010100101"b),	/* opnd(1) <- repeat(opnd(2),opnd(3))	*/
 14   111 	verify_fun	initial("010100110"b),	/* opnd(1) <- verify(opnd(2),opnd(3))	*/
 14   112 	translate_fun	initial("010100111"b),	/* opnd(1) <- translate(opnd(2),opnd(3))*/
 14   113 	real_fun   	initial("010101001"b),	/* opnd(1) <- real(opnd(2))		*/
 14   114 	imag_fun   	initial("010101010"b),	/* opnd(1) <- imag(opnd(2))		*/
 14   115 	length_fun	initial("010101011"b),	/* opnd(1) <- length(opnd(2))	*/
 14   116 	pl1_mod_fun	initial("010101100"b),	/* opnd(1) <- mod(opnd(2)) */
 14   117 	search_fun	initial("010101101"b),	/* opnd(1) <- search(opnd(2),opnd(3)) */
 14   118 	allocation_fun	initial("010101110"b),	/* opnd(1) <- allocation(opnd(2)) */
 14   119 	reverse_fun	initial("010101111"b),	/* opnd(1) <- reverse(opnd(2)) */
 14   120 
 14   121 	addr_fun		initial("010110000"b),	/* opnd(1) <- addr(opnd(2))		*/
 14   122 	addr_fun_bits	initial("010110001"b),	/* opnd(1) <- addr(opnd(2))		*/
 14   123 	ptr_fun		initial("010110010"b),	/* opnd(1) <- ptr(opnd(2),opnd(3))	*/
 14   124 	baseptr_fun	initial("010110011"b),	/* opnd(1) <- baseptr(opnd(2))	*/
 14   125 	addrel_fun	initial("010110100"b),	/* opnd(1) <- addrel(opnd(2),opnd(3))	*/
 14   126 	codeptr_fun	initial("010110101"b),	/* opnd(1) <- codeptr(opnd(2))	*/
 14   127 	environmentptr_fun	initial("010110110"b),	/* opnd(1) <- environmentptr(opnd(2))	*/
 14   128 	stackbaseptr_fun	initial("010110111"b),	/* opnd(1) is ptr to base of current stack	*/
 14   129 	stackframeptr_fun	initial("010111000"b),	/* opnd(1) is ptr to current block's stack frame	*/
 14   130 	setcharno_fun	initial("010111001"b),	/* opnd(1) <- opnd(2) with charno opnd(3) */
 14   131 	addcharno_fun	initial("010111010"b),	/* opnd(1) <- opnd(2) with charno = charno + opnd(3) */
 14   132 	setbitno_fun	initial("010111011"b),	/* setcharno for bitsno */
 14   133 	addbitno_fun	initial("010111100"b),	/* addcharno for bitno */
 14   134 
 14   135 	min_fun		initial("011000000"b),	/* opnd(1) <- min(opnd(1),opnd(2),...)	*/
 14   136 	max_fun		initial("011000001"b),	/* opnd(1) <- max(opnd(1),opnd(2),...)	*/
 14   137 
 14   138 	stack_ptr		initial("011010001"b),	/* opnd(1) <- stack frame ptr		*/
 14   139 	empty_area	initial("011010010"b),	/* empty opnd(1), length in words is opnd(2) */
 14   140 	enable_on		initial("011010100"b),	/* opnd(1) is the cond name
 14   141*						   opnd(2) is the file name
 14   142*						   opnd(3) is the block	*/
 14   143 	revert_on		initial("011010101"b),	/* opnd(1) is the cond name,
 14   144*						   opnd(2) is the file name	*/
 14   145 	signal_on		initial("011010110"b),	/* opnd(1) is the cond name
 14   146*						   opnd(2) is the file name */
 14   147 
 14   148 	lock_fun		initial("011010111"b),	/* opnd(1) <- stac(opnd(2),opnd(3))	*/
 14   149 	stacq_fun		initial("011011000"b),	/* opnd(1) is result, opnd(2) is ptr to lock word,
 14   150*						   opnd(3) is old value, (4) is new value. */
 14   151 	clock_fun		initial("011011001"b),	/* opnd(1) is the clock time		*/
 14   152 	vclock_fun	initial("011011010"b),	/* opnd(1) is the virtual clock time	*/
 14   153 
 14   154 	bound_ck		initial("011100000"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 14   155 	range_ck		initial("011100001"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 14   156 	loop		initial("011100010"b),	/* do opnd(1) for opnd(2) from opnd(3) to opnd(4) by 1,
 14   157*						   opnd(5) is the list */
 14   158 	join		initial("011100011"b),	/* do opnd(1), opnd(2) ... opnd(n)	*/
 14   159 	allot_based	initial("011100100"b),	/* allocate opnd(2) words in opnd(3), set opnd(1) */
 14   160 	free_based	initial("011100101"b),	/* free opnd(1) in opnd(3), length is opnd(2) words */
 14   161 
 14   162 	r_parn		initial("011110001"b),	/* format op code			*/
 14   163 	l_parn		initial("011110010"b),
 14   164 	r_format		initial("011110011"b),
 14   165 	c_format		initial("011110100"b),
 14   166 	f_format		initial("011110101"b),
 14   167 	e_format		initial("011110110"b),
 14   168 	b_format		initial("011110111"b),
 14   169 	a_format		initial("011111000"b),
 14   170 	x_format		initial("011111001"b),
 14   171 	skip_format	initial("011111010"b),
 14   172 	column_format	initial("011111011"b),
 14   173 	page_format	initial("011111100"b),
 14   174 	line_format	initial("011111101"b),
 14   175 	picture_format	initial("011111110"b),
 14   176 	bn_format		initial("011111111"b),	/* bit format, length(opnd(2)), radix factor(opnd(3)) */
 14   177 
 14   178 	get_list_trans	initial("100000000"b),	/* getlist(opnd(2) with desc(opnd(1)))	*/
 14   179 	get_edit_trans	initial("100000001"b),	/* getedit(opnd(2) with desc(opnd(1)))	*/
 14   180 	get_data_trans	initial("100000010"b),	/* getdata(opnd(1) to opnd(n))	*/
 14   181 	put_list_trans	initial("100000011"b),	/* putlist(opnd(2) with desc(opnd(1)))	*/
 14   182 	put_edit_trans	initial("100000100"b),	/* putedit(opnd(2) with desc(opnd(1)))	*/
 14   183 	put_data_trans	initial("100000101"b),	/* putdata(opnd(2)) with subscript-list opnd(1) */
 14   184 	terminate_trans	initial("100000110"b),	/* terminate stream transmission	*/
 14   185 	stream_prep	initial("100000111"b),	/* initiate stream transmission	*/
 14   186 	record_io		initial("100001000"b),	/* perform record io operation	*/
 14   187 	fortran_read	initial("100001001"b),	/* A complete read statement		*/
 14   188 	fortran_write	initial("100001010"b),	/* A complete write statement		*/
 14   189 	ftn_file_manip	initial("100001011"b),	/* endfile,backspace,rewind,etc.	*/
 14   190 	ftn_trans_loop	initial("100001100"b),	/* An implied do in i/o list		*/
 14   191 	put_control	initial("100001101"b),	/* put control opnd(1) opnd(2) times	*/
 14   192 	put_field		initial("100001110"b),	/* putlist(opnd(2)) of length(opnd(1))	*/
 14   193 	put_field_chk	initial("100001111"b),	/* putlist(op(2)) of len(op(1)) check char index(op(3)) */
 14   194 
 14   195 /* These operators are produced by the parse but are not used as input to the code generator.	*/
 14   196 /* They are processed by the semantic translator.						*/
 14   197 
 14   198 	return_value	initial("100010010"b),	/* return(opnd(1))			*/
 14   199 	allot_var		initial("100010011"b),	/* allot opnd(1) in opnd(2)		*/
 14   200 	free_var		initial("100010100"b),	/* free opnd(1) out of opnd(2)	*/
 14   201 	get_file		initial("100010101"b),	/* opnd(1) is filename,opnd(2) is copy	*/
 14   202 						/* opnd(3) is skip, opnd(4) is list	*/
 14   203 	get_string	initial("100010110"b),	/* opnd(1) is string,opnd(2) is list	*/
 14   204 	put_file		initial("100010111"b),	/* opnd(1) is filename,opnd(2) is page	*/
 14   205 						/* opnd(3) is skip,opnd(4) is line	*/
 14   206 	put_string	initial("100011000"b),	/* opnd(1) is string,opnd(2) is list	*/
 14   207 	open_file		initial("100011001"b),
 14   208 	close_file	initial("100011010"b),
 14   209 	read_file		initial("100011011"b),
 14   210 	write_file	initial("100011100"b),
 14   211 	locate_file	initial("100011101"b),
 14   212 	do_fun		initial("100011110"b),	/* opnd(1) is join of a list		*/
 14   213 						/* opnd(2) is control variable ref	*/
 14   214 						/* opnd(3) is specification operator	*/
 14   215 	do_spec		initial("100011111"b),	/* opnd(1) to opnd(2) by opnd(3) 	*/
 14   216 						/* repeat opnd(4) while opnd(5)	*/
 14   217 						/* opnd(6) is next specification	*/
 14   218 
 14   219 	rewrite_file	initial("100100000"b),
 14   220 	delete_file	initial("100100001"b),
 14   221 	unlock_file	initial("100100010"b),
 14   222 	lock_file		initial("100100011"b),
 14   223 	refer		initial("100100101"b),	/* opnd(1) refer(opnd(2))		*/
 14   224 	prefix_plus	initial("100100110"b),	/* opnd(1) <- +opnd(2)		*/
 14   225 	nop		initial("100100111"b),	/* no-op */
 14   226 	assign_by_name	initial("100101000"b),	/* opnd(1) <- opnd(2),by name		*/
 14   227 
 14   228 /* These operators are produced by the semantic translator in processing the math
 14   229*   builtin functions and are used as input to the code generator			*/
 14   230 
 14   231 	sqrt_fun		initial("100110000"b),	/* opnd(1) <- sqrt(opnd(2))	*/
 14   232 	sin_fun		initial("100110001"b),	/* opnd(1) <- sin(opnd(2))	*/
 14   233 	sind_fun		initial("100110010"b),	/* opnd(1) <- sind(opnd(2))	*/
 14   234 	cos_fun		initial("100110011"b),	/* opnd(1) <- cos(opnd(2))	*/
 14   235 	cosd_fun		initial("100110100"b),	/* opnd(1) <- cosd(opnd(2))	*/
 14   236 	tan_fun		initial("100110101"b),	/* opnd(1) <- tan(opnd(2))	*/
 14   237 	tand_fun		initial("100110110"b),	/* opnd(1) <- tand(opnd(2))	*/
 14   238 	asin_fun		initial("100110111"b),	/* opnd(1) <- asin(opnd(2))	*/
 14   239 	asind_fun		initial("100111000"b),	/* opnd(1) <- asind(opnd(2))	*/
 14   240 	acos_fun		initial("100111001"b),	/* opnd(1) <- acos(opnd(2))	*/
 14   241 	acosd_fun		initial("100111010"b),	/* opnd(1) <- acosd(opnd(2))	*/
 14   242 	atan_fun		initial("100111011"b),	/* opnd(1) <- atan(opnd(2)[,opnd(3)])	*/
 14   243 	atand_fun		initial("100111100"b),	/* opnd(1) <- atand(opnd(2)[,opnd(3)])	*/
 14   244 	log2_fun		initial("100111101"b),	/* opnd(1) <- log2(opnd(2))	*/
 14   245 	log_fun		initial("100111110"b),	/* opnd(1) <- log(opnd(2))	*/
 14   246 	log10_fun		initial("100111111"b),	/* opnd(1) <- log10(opnd(2))	*/
 14   247 
 14   248 	exp_fun		initial("101000000"b))	/* opnd(1) <- exp(opnd(2))	*/
 14   249 
 14   250 			bit(9) aligned internal static options(constant);
 14   251 
 14   252 /* END INCLUDE FILE ... op_codes.incl.pl1 */
       32 
 15     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
 15     2 
 15     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
 15     4 
 15     5 dcl (	block_node		initial("000000001"b),
 15     6 	statement_node		initial("000000010"b),
 15     7 	operator_node		initial("000000011"b),
 15     8 	reference_node		initial("000000100"b),
 15     9 	token_node		initial("000000101"b),
 15    10 	symbol_node		initial("000000110"b),
 15    11 	context_node		initial("000000111"b),
 15    12 	array_node		initial("000001000"b),
 15    13 	bound_node		initial("000001001"b),
 15    14 	format_value_node		initial("000001010"b),
 15    15 	list_node			initial("000001011"b),
 15    16 	default_node		initial("000001100"b),
 15    17 	machine_state_node		initial("000001101"b),
 15    18 	source_node		initial("000001110"b),
 15    19 	label_node		initial("000001111"b),
 15    20 	cross_reference_node	initial("000010000"b),
 15    21 	sf_par_node		initial("000010001"b),
 15    22 	temporary_node		initial("000010010"b),
 15    23 	label_array_element_node	initial("000010011"b),
 15    24 	by_name_agg_node		initial("000010100"b))
 15    25 				bit(9) internal static aligned options(constant);
 15    26 
 15    27 dcl	1 node			based aligned,
 15    28 	2 type			unal bit(9),
 15    29 	2 source_id		unal structure,
 15    30 	  3 file_number		bit(8),
 15    31 	  3 line_number		bit(14),
 15    32 	  3 statement_number	bit(5);
 15    33 
 15    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
       33 
 16     1 	/* statement types */
 16     2 
 16     3 dcl (	unknown_statement		initial("000000000"b),
 16     4 	allocate_statement		initial("000000001"b),
 16     5 	assignment_statement	initial("000000010"b),
 16     6 	begin_statement		initial("000000011"b),
 16     7 	call_statement		initial("000000100"b),
 16     8 	close_statement		initial("000000101"b),
 16     9 	declare_statement		initial("000000110"b),
 16    10 	lock_statement		initial("000000111"b),
 16    11 	delete_statement		initial("000001000"b),
 16    12 	display_statement		initial("000001001"b),
 16    13 	do_statement		initial("000001010"b),
 16    14 	else_clause		initial("000001011"b),
 16    15 	end_statement		initial("000001100"b),
 16    16 	entry_statement		initial("000001101"b),
 16    17 	exit_statement		initial("000001110"b),
 16    18 	format_statement		initial("000001111"b),
 16    19 	free_statement		initial("000010000"b),
 16    20 	get_statement		initial("000010001"b),
 16    21 	goto_statement		initial("000010010"b),
 16    22 	if_statement		initial("000010011"b),
 16    23 	locate_statement		initial("000010100"b),
 16    24 	null_statement		initial("000010101"b),
 16    25 	on_statement		initial("000010110"b),
 16    26 	open_statement		initial("000010111"b),
 16    27 	procedure_statement 	initial("000011000"b),
 16    28 	put_statement		initial("000011001"b),
 16    29 	read_statement		initial("000011010"b),
 16    30 	return_statement		initial("000011011"b),
 16    31 	revert_statement		initial("000011100"b),
 16    32 	rewrite_statement		initial("000011101"b),
 16    33 	signal_statement		initial("000011110"b),
 16    34 	stop_statement		initial("000011111"b),
 16    35 	system_on_unit		initial("000100000"b),
 16    36 	unlock_statement		initial("000100001"b),
 16    37 	wait_statement		initial("000100010"b),
 16    38 	write_statement		initial("000100011"b),
 16    39 	default_statement		initial("000100100"b),
 16    40 	continue_statement		initial("000100101"b)) bit(9) internal static aligned options(constant);
       34 
 17     1 /* BEGIN INCLUDE FILE ... boundary.incl.pl1 */
 17     2 
 17     3 /* Modified: 26 Apr 1979 by PCK to implement 4-bit decimal */
 17     4 
 17     5 dcl (	bit_		init(1),
 17     6 	digit_		init(2),
 17     7 	character_	init(3),
 17     8 	half_		init(4),
 17     9 	word_		init(5),
 17    10 	mod2_		init(6),
 17    11 	mod4_		init(7)) fixed bin(3) int static options(constant);
 17    12 
 17    13 /* END INCLUDE FILE ... boundary.incl.pl1 */
       35 
 18     1 /* BEGIN INCLUDE FILE ... list.incl.pl1 */
 18     2 
 18     3 /* Modified 26 June 81 by EBush to add max_list_elements */
 18     4 
 18     5 
 18     6 dcl	1 list		based aligned,
 18     7 	2 node_type	bit(9) unaligned,
 18     8 	2 reserved	bit(12) unaligned,
 18     9 	2 number		fixed(14) unaligned,
 18    10 	2 element		dimension(n refer(list.number)) ptr unaligned;
 18    11 
 18    12 dcl       max_list_elements   fixed bin(17) internal static options (constant)
 18    13 	                    init(16383);
 18    14 
 18    15 /* END INCLUDE FILE ... list.incl.pl1 */
       36 
 19     1 /* BEGIN INCLUDE FILE ... system.incl.pl1 */
 19     2 
 19     3 /* Modified: 25 Apr 1979 by PCK to implemnt 4-bit decimal */
 19     4 
 19     5 dcl (	max_p_flt_bin_1			initial(27),
 19     6 	max_p_flt_bin_2			initial(63),
 19     7 	max_p_fix_bin_1			initial(35),
 19     8 	max_p_fix_bin_2			initial(71),
 19     9 
 19    10 	max_p_dec				initial(59),
 19    11 	max_p_bin_or_dec			initial (71),	/* max (max_p_fix_bin_2, max_p_dec) */
 19    12 
 19    13 	min_scale				initial(-128),
 19    14 	max_scale				initial(+127),
 19    15 	max_bit_string			initial(9437184),
 19    16 	max_char_string			initial(1048576),
 19    17 	max_area_size			initial(262144),
 19    18 	min_area_size			initial(28),
 19    19 
 19    20 	max_bit_string_constant		initial (253),	/* max length of bit literals */
 19    21 	max_char_string_constant		initial (254),	/* max length of character literals */
 19    22 	max_identifier_length		initial (256),
 19    23 	max_number_of_dimensions		initial (127),
 19    24 
 19    25 	max_length_precision		initial(24),
 19    26 	max_offset_precision		initial(24),	/* 18 bits for word offset + 6 bits for bit offset */
 19    27 
 19    28 	max_words_per_variable		initial (262144),
 19    29 
 19    30 	bits_per_word			initial(36),
 19    31 	bits_per_double			initial(72),
 19    32 	packed_digits_per_character		initial(2),
 19    33 	characters_per_half			initial(2),
 19    34 	characters_per_word			initial(4),
 19    35 	characters_per_double		initial(8),
 19    36 
 19    37 	bits_per_character			initial(9),
 19    38 	bits_per_half			initial(18),
 19    39 	bits_per_decimal_digit		initial(9),
 19    40 	bits_per_binary_exponent		initial(8),
 19    41 	bits_per_packed_ptr			initial(36),
 19    42 	words_per_packed_pointer		initial(1),
 19    43 
 19    44 	words_per_fix_bin_1			initial(1),
 19    45 	words_per_fix_bin_2			initial(2),
 19    46 	words_per_flt_bin_1			initial(1),
 19    47 	words_per_flt_bin_2			initial(2),
 19    48 	words_per_varying_string_header	initial(1),
 19    49 	words_per_offset			initial(1),
 19    50 	words_per_pointer			initial(2),
 19    51 	words_per_label_var			initial(4),
 19    52 	words_per_entry_var			initial(4),
 19    53 	words_per_file_var			initial(4),
 19    54 	words_per_format			initial(4),
 19    55 	words_per_condition_var		initial(6),
 19    56 
 19    57 	max_index_register_value		initial(262143),
 19    58 	max_signed_index_register_value	initial(131071),
 19    59 
 19    60 	max_signed_xreg_precision		initial(17),
 19    61 	max_uns_xreg_precision		initial(18),
 19    62 
 19    63 	default_area_size			initial(1024),
 19    64 	default_flt_bin_p			initial(27),
 19    65 	default_fix_bin_p			initial(17),
 19    66 	default_flt_dec_p			initial(10),
 19    67           default_fix_dec_p   		initial(7)) fixed bin(31) internal static options(constant);
 19    68 
 19    69 dcl	bits_per_digit			initial(4.5)  fixed bin(31,1) internal static options(constant);
 19    70 
 19    71 dcl (	integer_type		initial("010000000000000000000100000001100000"b),
 19    72 	dec_integer_type		initial("010000000000000000000100000010100000"b),
 19    73 	pointer_type		initial("000001000000000000000100000000000000"b),
 19    74 	real_type			initial("001000000000000000000100000001100000"b),
 19    75 	complex_type		initial("001000000000000000000100000001010000"b),
 19    76 	builtin_type		initial("000000000000000010000000000000000000"b),
 19    77 	storage_block_type		initial("000000000000100000000000000000000000"b),
 19    78 	arg_desc_type		initial("000000000001000000000000000000000000"b),
 19    79 	local_label_var_type	initial("000000001000000000000100000100001000"b),
 19    80 	entry_var_type		initial("000000000100000000000000000000001000"b),
 19    81 	bit_type			initial("000100000000000000000000000000000000"b),
 19    82 	char_type			initial("000010000000000000000000000000000000"b)) bit(36) aligned int static
 19    83 									options(constant);
 19    84 
 19    85 /* END INCLUDE FILE ... system.incl.pl1 */
       37 
       38 
       39 	s = ps;
       40 	b = s->symbol.block_node;
       41 	adam = s;
       42 
       43 /* Scan the structure to:
       44*	1. propagate the refer and exp_extent bits upward.
       45*	2. determine the boundary required by each member.
       46*	3. determine the boundary required by the structure.
       47*	4. determine the packing of the structure.
       48*	5. Validate the structure and each of its members.
       49*	6. Apply the father's alignment attributes to the sons.
       50*	7. Copy the level 1 defined structure's base ref to the members.
       51*	8. Copy the level 1 storage class to the members.
       52*								*/
       53 	cdesc = s->symbol.parameter | s->symbol.return_value | s->symbol.controlled;
       54 
       55 	if cdesc
       56 	then	s->symbol.descriptor = declare_descriptor$param((s->symbol.block_node),null,s,null,"1"b);
       57 
       58 	call structure_scan(s);
       59 
       60 /* set base to the locator value used to reference the level 1 structure.
       61*   and set bit_offset the the proper bit_pointer value to use for packed members.	*/
       62 
       63 	allocate,bit_offset,base = null;
       64 
       65 	if	s->symbol.auto
       66 	then if	s->symbol.exp_extents
       67 	then do;
       68 		base = declare_pointer(b);
       69 		allocate = create_operator(allot_auto,2);
       70 		allocate->operand(1) = base;
       71 	end;
       72 
       73 	if s->symbol.based
       74 	then do;
       75 		base = s->symbol.reference->reference.qualifier;
       76 		if s->symbol.unaligned & s->symbol.packed
       77 		then	if pl1_stat_$eis_mode
       78 			then	s->symbol.reference->reference.fo_in_qual = "1"b;
       79 			else	bit_offset = create_operator(bit_pointer,2);
       80 	end;
       81 
       82 	if s->symbol.parameter
       83 	then do;
       84 		if ^s->symbol.allocated
       85 		then do;
       86 			base = create_operator(param_ptr,3);
       87 			base->operand(2) = declare_constant$integer(fixed(s->symbol.location));
       88 			base->operand(3) = b;
       89 		end;
       90 		else	base = declare_pointer(b);
       91 
       92 		if s->symbol.unaligned & s->symbol.packed
       93 		then	if pl1_stat_$eis_mode
       94 			then	s->symbol.reference->reference.fo_in_qual = "1"b;
       95 			else do;
       96 				bit_offset = create_operator(bit_pointer,2);
       97 				bit_offset->operand(2) = base;
       98 			end;
       99 	end;
      100 
      101 /* Set the qualifier field of the structure's reference node.  */
      102 
      103 	s->symbol.reference->reference.qualifier = base;
      104 
      105 /* set the padded bit for references to the level one structure.	*/
      106 
      107 	if s->symbol.packed
      108 	then do;
      109 		s->symbol.reference->reference.padded_ref =
      110 			^(s->symbol.based|s->symbol.parameter|s->symbol.defined);
      111 
      112 		if s->symbol.reference->reference.padded_ref
      113 		then	s->symbol.boundary = max(s->symbol.boundary,word_);
      114 	end;
      115 
      116 /* If this is a packed unaligned structure set the offset to include the bit_pointer.  */
      117 
      118 	if bit_offset ^= null
      119 	then do;
      120 		s->symbol.reference->reference.offset = bit_offset;
      121 		s->symbol.reference->reference.units = bit_;
      122 	end;
      123 
      124 /* Set the aliasable bit */
      125 
      126 	if s -> symbol.based | s -> symbol.parameter | s -> symbol.defined | s -> symbol.external
      127 	then s -> symbol.aliasable = "1"b;
      128 
      129 /* scan the structure again and:
      130*
      131*	1. compute each member's size and offset.
      132*	2. determine the level 1 structure's size.
      133*	3. make each member based on the level 1 structure's base pointer.
      134*	4. initialize each member.
      135*	5. set each members padded bit.
      136*	6. process each entry variable's descriptor list and return descriptor.
      137*	7. give each member the storage class bits of the level one structure.
      138*								*/
      139 
      140 	call get_structure_size(s);
      141 
      142 	s->symbol.reference->reference.c_length = 0;
      143 
      144 /* Make sure the value will fit in a segment */
      145 
      146 	if s -> symbol.c_word_size > max_words_per_variable
      147 	then call semantic_translator$error (357,s);
      148 
      149 /* If this has constant extents and requires a descriptor, declare_descriptor
      150*   must be called after all the extents are calculated in order to actually
      151*   declare the constant descriptor.  If the descriptor template used for
      152*   entry definitions has not been built, declare_descriptor must also be
      153*   called. */
      154 
      155 	if cdesc
      156 	then	if s->symbol.descriptor = null
      157 		then s->symbol.descriptor = declare_descriptor((s->symbol.block_node),null,s,null,"1"b);
      158 		else if s->symbol.parameter
      159 		     then if s->symbol.descriptor->reference.symbol->symbol.descriptor = null
      160 			then s->symbol.descriptor = declare_descriptor((s->symbol.block_node),null,s,null,"1"b);
      161 
      162 
      163 /* If this was automatic with variable extents, fill in the size field of the allot_auto operator */
      164 
      165 	if allocate^=null
      166 	then do;
      167 		allocate->operand(2) = copy_expression(s->symbol.word_size);
      168 
      169 		q = create_statement$prologue(assignment_statement,b,null,(b->block.prefix));
      170 		q->statement.root = allocate;
      171 	end;
      172 
      173 	call initialize(s);
      174 
      175 	return;
      176 
      177 /* subroutine to:
      178*	1. propagate the refer, exp_extent, star_extent bits upward.
      179*	2. determine the boundary required by each structure member.
      180*	3. determine the boundary required by each structure.
      181*	4. determine the packing of the structure.
      182*	5. Validate the structure and each of its members.
      183*	6. Apply the father's alignment attributes to the sons.
      184*	7. Compute the logical level numbers of the sons.
      185*							*/
      186 structure_scan: proc(ps);
      187 
      188 dcl	(ps,d,s) ptr;
      189 
      190 	s = ps;
      191 
      192 	if s->symbol.member
      193 	then do;
      194 		s->symbol.level = s->symbol.father->symbol.level+1;	/* set logical level */
      195 
      196 		if ^(s -> symbol.aligned | s -> symbol.unaligned)
      197 		then do;
      198 			s -> symbol.aligned = s -> symbol.father -> symbol.aligned;
      199 			s -> symbol.unaligned = s -> symbol.father -> symbol.unaligned;
      200 		     end;
      201 	     end;
      202 
      203 	if s -> symbol.son = null
      204 	then do;
      205 		call validate (s);
      206 		if s -> symbol.member
      207 		then do;
      208 			string(s->symbol.storage_class) = string(adam->symbol.storage_class);
      209 			s->symbol.equivalence = adam->symbol.equivalence;
      210 		end;
      211 		call get_size(s);
      212 		return;
      213 	     end;
      214 
      215 	s->symbol.structure,s->symbol.packed = "1"b;
      216 
      217 	do d = s->symbol.son repeat d->symbol.brother while(d^=null);
      218 		call structure_scan(d);
      219 		s->symbol.packed = s->symbol.packed & d->symbol.packed;
      220 		s->symbol.boundary = max(s->symbol.boundary,d->symbol.boundary);
      221 		s->symbol.refer_extents = s->symbol.refer_extents | d->symbol.refer_extents;
      222 		s->symbol.exp_extents = s->symbol.exp_extents |d->symbol.exp_extents;
      223 		s->symbol.star_extents = s->symbol.star_extents | d->symbol.star_extents;
      224 	end;
      225 
      226 	call validate(s);
      227 
      228 	if s -> symbol.member
      229 	then do;
      230 		string(s->symbol.storage_class) = string(adam->symbol.storage_class);
      231 		s->symbol.equivalence = adam->symbol.equivalence;
      232 	     end;
      233 
      234 	if s -> symbol.aligned
      235 	then do;
      236 		s -> symbol.boundary = max(s -> symbol.boundary,word_);
      237 		s -> symbol.packed = "0"b;
      238 	     end;
      239 
      240 	if s->symbol.dimensioned
      241 	then	s->symbol.array->array.element_boundary = s->symbol.boundary;
      242 
      243 	end structure_scan;
      244 
      245 /* subroutine to:
      246*	1.  compute each member's offset.
      247*	2. determine the level 1 structure's size.
      248*	3. make each member based on the level 1 structure's base pointer.
      249*	4. make each member's offset include the proper bit pointer.
      250*	5. initialize each member.
      251*	6. set each members's padded bit.
      252*	7. process each entry vairable's descriptor list and return descriptor.
      253*									*/
      254 get_structure_size: proc(ps);
      255 
      256 dcl	(ps,s,d,f,r,q,p,fsize,rv,t) ptr;
      257 dcl	(i,j,k) fixed bin(3);
      258 dcl	 fc_size fixed bin(31);
      259 
      260 dcl	opcodes(4) bit(9) aligned initial(bit_to_char,bit_to_word,char_to_word,half_to_word);
      261 
      262 dcl	opcode_index(4,7) fixed bin(15) internal static init(0,0,1,0,2,2,2,
      263 						   0,0,0,0,0,0,0,
      264 						   0,0,0,0,3,3,3,
      265 						   0,0,0,0,4,4,4);
      266 
      267 dcl	round_const(4,7) fixed bin(15) int static initial(0,0,9,0,36,36,36,
      268 						0,0,0,0, 0, 0, 0,
      269 						0,0,0,0, 4, 4, 4,
      270 						0,0,0,0, 2, 2, 2);
      271 
      272 dcl	mod_const(6:7) fixed bin(15) int static initial(2,4);
      273 
      274 dcl	mod_ops(6:7) bit(9) aligned  initial(word_to_mod2,word_to_mod4);
      275 
      276 dcl	offset_ops(4) bit(9) aligned initial(mod_bit,""b,mod_byte,mod_half);
      277 
      278 	s = ps;
      279 	j = s->symbol.boundary;
      280 	f = s->symbol.reference;
      281 	fc_size = 0;
      282 	fsize = null;
      283 
      284 	do d = s->symbol.son repeat d->symbol.brother while(d^=null);
      285 		string(d->symbol.storage_class) = string(s->symbol.storage_class);
      286 		d->symbol.aliasable = adam->symbol.aliasable;
      287 		d->symbol.equivalence = adam->symbol.equivalence;
      288 		r = d->symbol.reference;
      289 		r->reference.qualifier = base;
      290 		if pl1_stat_$eis_mode
      291 		     then r -> reference.fo_in_qual = adam -> symbol.reference -> reference.fo_in_qual;
      292 		i = d->symbol.boundary;
      293 
      294 /* If this members boundary requirement is less stringent than the boundary
      295*   forced upon it by the preceeding member, no rounding is needed and the
      296*   actual boundary of the member will be up graded to that determined by the
      297*   preceeding member.	*/
      298 
      299 		if i<=j
      300 		then do;
      301 			d->symbol.boundary = j;
      302 			go to get_offset;
      303 		end;
      304 
      305 /* If the current boundary is less than word then round it to that needed by this member.	*/
      306 
      307 		if j < word_
      308 		then do;
      309 			if fsize = null
      310 			then fc_size = divide(fc_size+round_const(j,i)-1,round_const(j,i),31,0);
      311 			else do;
      312 				q = create_operator(opcodes(opcode_index(j,i)),2);
      313 				q->operand(2) = fsize;
      314 				fsize = q;
      315 			end;
      316 		end;
      317 
      318 /* If this member needs a mod boundary perform a mod operation on the current boundary.	*/
      319 
      320 		if i > word_
      321 		then do;
      322 			if fsize = null
      323 			then fc_size = divide(fc_size+mod_const(i)-1,mod_const(i),31,0)*mod_const(i);
      324 			else do;
      325 				q = create_operator(mod_ops(i),2);
      326 				q->operand(2) = fsize;
      327 				fsize = q;
      328 			end;
      329 		end;
      330 
      331 /* set the units of the current boundary equal to the boundary requirement of this member.	*/
      332 
      333 		j = i;
      334 
      335 
      336 /* get this members offset by adding the fathers offset to the fathers current size.*/
      337 
      338 get_offset:
      339 		t = f->reference.offset;
      340 
      341 		if	t ^= null
      342 		then if	t -> node.type = operator_node
      343 		then if	substr(t -> op_code,1,5) = substr(mod_bit,1,5)
      344 		then	t = t -> operand(3);
      345 
      346 		r->reference.offset = t;
      347 		r->reference.c_offset = f->reference.c_offset;
      348 		k,r->reference.units = f->reference.units;
      349 
      350 		off = r->reference.offset;
      351 		coff = r->reference.c_offset;
      352 
      353 		call offset_adder(off,coff,k,"0"b,(fsize),(fc_size),j,"0"b,r->reference.fo_in_qual);
      354 
      355 		r->reference.offset = off;
      356 		r->reference.c_offset = coff;
      357 
      358 		if r->reference.c_offset = 0 & r->reference.offset = null
      359 		then	r->reference.units = 0;
      360 		else	r->reference.units = min(k,word_);
      361 
      362 /* If the offset is variable and the units are less than word and the offset is an expression
      363*   containing anything otherthan a simple bit_pointer, then create the proper mod operator
      364*   at the top of the expression.	*/
      365 
      366 		if	^pl1_stat_$eis_mode
      367 		then if	r->reference.offset ^= null
      368 		then if	r->reference.units < word_
      369 		then do;
      370 			q = r->reference.offset;
      371 
      372 			if q->node.type = operator_node
      373 			then	if q->operator.op_code ^=bit_pointer
      374 				then do;
      375 					p = create_operator(offset_ops(r->reference.units),3);
      376 					p->operand(3)=q;
      377 					r->reference.offset = p;
      378 				end;
      379 				else;
      380 			else do;
      381 				p = create_operator(offset_ops(r->reference.units),3);
      382 				p->operand(3) = q;
      383 				r->reference.offset = p;
      384 			end;
      385 		end;
      386 
      387 		if	pl1_stat_$eis_mode
      388 		then if	r->reference.units=character_
      389 		then if	d->symbol.bit | d->symbol.binary | d->symbol.ptr
      390 		then do;
      391 			r->reference.units = bit_;
      392 			r->reference.c_offset = r->reference.c_offset * bits_per_character;
      393 
      394 			if r->reference.offset^=null
      395 			then do;
      396 				p = create_operator(mult,3);
      397 				p->operand(2) = declare_constant$integer(bits_per_character);
      398 				p->operand(3) = r->reference.offset;
      399 				r -> reference.offset = p;
      400 			end;
      401 		end;
      402 
      403 /* set padded bit for this member.	*/
      404 
      405 		if d->symbol.packed
      406 		then do;
      407 /* walk father chain looking for next structure element */
      408 			do q = d repeat q->symbol.father while(q^=null);
      409 				if q->symbol.brother ^= null then go to succ;
      410 			end;
      411 succ:
      412 			if q = null
      413 			then	r->reference.padded_ref = ^(d->symbol.based|d->symbol.parameter|d->symbol.defined);
      414 			else	r->reference.padded_ref = q->symbol.brother->symbol.aligned;
      415 		end;
      416 
      417 /* If this is an entry variable then process its decriptors.	*/
      418 
      419 		if d->symbol.entry
      420 		then do;
      421 			if d->symbol.returns
      422 			then do;
      423 				rv = d->symbol.dcl_size;
      424 				rv->symbol.return_value = "1"b;
      425 				if rv->symbol.structure | rv->symbol.dimensioned | rv->symbol.star_extents
      426 				then do;
      427 					d->symbol.dcl_size = copy_expression(d->symbol.dcl_size);
      428 					call declare(rv);
      429 					d->symbol.dcl_size->symbol.star_extents = rv->symbol.star_extents;
      430 				end;
      431 				else	call declare(rv);
      432 			end;
      433 			do q = d->symbol.general repeat q->element(2) while(q^=null);
      434 				q->element(1)->symbol.param_desc ="1"b;
      435 				call declare((q->element(1)));
      436 			end;
      437 		end;
      438 
      439 /* Determine the size of the member.  If it is not a sub-structure it was computed by
      440*   get_size when the boundary was determined, otherwise it is computed now by calling
      441*   get_structure_size.  In both cases the c_length field of the reference node serves
      442*   to hold the units in which the size has been computed.  */
      443 
      444 		if d->symbol.structure then call get_structure_size(d);
      445 
      446 /* Add this members size to the father's current size.	*/
      447 
      448 		call offset_adder(fsize,fc_size,j,"0"b,(d->symbol.word_size),(d->symbol.c_word_size),
      449 			(r->reference.c_length),"0"b,"0"b);
      450 		r->reference.c_length = 0;
      451 
      452 		if (d->symbol.char|d->symbol.bit) & ^d->symbol.varying
      453 		then do;
      454 			r->reference.c_length = d->symbol.c_dcl_size;
      455 			r->reference.length = d->symbol.dcl_size;
      456 		end;
      457 
      458 		if d->symbol.picture
      459 		then	r->reference.c_length = d->symbol.c_dcl_size;
      460 	end;
      461 
      462 /* record the size of this structure in the symbol node, and the units in which the size
      463*   is measured in the reference node.	*/
      464 
      465 	s->symbol.reference->reference.c_length = j;
      466 	s->symbol.word_size = fsize;
      467 	s->symbol.c_word_size = fc_size;
      468 
      469 /* call get_size to find the size in bits, to find the array size, to improve the units
      470*   in which the size is measured, to round the size to an integeral number of words,etc.	*/
      471 
      472 	call get_size(s);
      473 
      474 	end get_structure_size;
      475 
      476 initialize:	proc(p);
      477 
      478 dcl	(p,q,r) ptr;
      479 
      480 	r = p;
      481 
      482 	do q = r repeat q->symbol.son while(q^=null);
      483 
      484 		if  q->symbol.auto
      485 		&  (q->symbol.initialed
      486 		   |q->symbol.area)
      487 		then	call expand_initial(q,null,null);
      488 
      489 		call initialize((q->symbol.brother));
      490 
      491 	end;
      492 
      493 	end initialize;
      494 
      495      end /* declare_structure */;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/31/89  1338.4  declare_structure.pl1             >spec>install>MR12.3-1066>declare_structure.pl1
25           1    07/21/80  1546.3  semant.incl.pl1                   >ldd>include>semant.incl.pl1
1-228        2    07/31/89  1332.6  language_utility.incl.pl1         >spec>install>MR12.3-1066>language_utility.incl.pl1
2-307        3    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-325        4    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-335        5    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-374        6    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-386        7    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
26           8    12/07/83  1701.7  symbol.incl.pl1                   >ldd>include>symbol.incl.pl1
27           9    05/06/74  1741.6  array.incl.pl1                    >ldd>include>array.incl.pl1
28          10    08/13/81  2043.5  block.incl.pl1                    >ldd>include>block.incl.pl1
29          11    07/21/80  1546.3  reference.incl.pl1                >ldd>include>reference.incl.pl1
30          12    07/21/80  1546.3  operator.incl.pl1                 >ldd>include>operator.incl.pl1
31          13    04/07/83  1635.0  statement.incl.pl1                >ldd>include>statement.incl.pl1
32          14    04/07/83  1635.0  op_codes.incl.pl1                 >ldd>include>op_codes.incl.pl1
33          15    07/21/80  1546.3  nodes.incl.pl1                    >ldd>include>nodes.incl.pl1
34          16    05/03/76  1320.4  statement_types.incl.pl1          >ldd>include>statement_types.incl.pl1
35          17    10/25/79  1645.8  boundary.incl.pl1                 >ldd>include>boundary.incl.pl1
36          18    08/13/81  2211.5  list.incl.pl1                     >ldd>include>list.incl.pl1
37          19    12/07/83  1701.7  system.incl.pl1                   >ldd>include>system.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
adam                            000100 automatic       pointer                  dcl 16 set ref 41* 208 209 230 231 286 287 290
aliasable                32(35)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 126*
                                                                                  286* 286
aligned                  31(21)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 196
                                                                                  198* 198 234 414
allocate                        000106 automatic       pointer                  dcl 16 set ref 63* 69* 70 165 167 170
allocated                 1(18)        based           bit(1)                   level 2 packed packed unaligned dcl 8-3 ref 84
allot_auto                      000075 constant        bit(9)                   initial dcl 14-8 set ref 69*
area                     31(07)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 484
array                                  based           structure                level 1 dcl 9-1 in procedure "declare_structure"
array                    12            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 8-3 in procedure "declare_structure"
                                                                                  ref 240
assignment_statement            000072 constant        bit(9)                   initial dcl 16-3 set ref 169*
attributes               31            based           structure                level 2 dcl 8-3
auto                     32(09)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 65
                                                                                  484
b                               000112 automatic       pointer                  dcl 16 set ref 40* 68* 88 90* 169* 169
base                            000102 automatic       pointer                  dcl 16 set ref 63* 68* 70 75* 86* 87 88 90* 97 103
                                                                                  289
based                    32(10)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 73
                                                                                  109 126 411
binary                   31(29)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 387
bit                      31(03)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 387 452
bit_                                   constant        fixed bin(3,0)           initial dcl 17-5 ref 121 391
bit_offset                      000104 automatic       pointer                  dcl 16 set ref 63* 79* 96* 97 118 120
bit_pointer                     000073 constant        bit(9)                   initial dcl 14-8 set ref 79* 96* 372
bit_to_char                            internal static bit(9)                   initial dcl 14-8 ref 260
bit_to_word                            internal static bit(9)                   initial dcl 14-8 ref 260
bits                     12(06)        based           structure                level 2 packed packed unaligned dcl 11-3
bits_per_character              000101 constant        fixed bin(31,0)          initial dcl 19-5 set ref 392 397*
block                                  based           structure                level 1 dcl 10-5
block_node                4            based           pointer                  level 2 packed packed unaligned dcl 8-3 ref 40 55
                                                                                  155 158
boundary                  2(20)        based           fixed bin(3,0)           level 2 packed packed unaligned dcl 8-3 set ref 112*
                                                                                  112 220* 220 220 236* 236 240 279 292 301*
brother                  20            based           pointer                  level 2 packed packed unaligned dcl 8-3 ref 224 409
                                                                                  414 460 489
c_dcl_size               30            based           fixed bin(24,0)          level 2 dcl 8-3 ref 454 458
c_length                  2            based           fixed bin(24,0)          level 2 dcl 11-3 set ref 142* 448 450* 454* 458*
                                                                                  465*
c_offset                  1            based           fixed bin(24,0)          level 2 dcl 11-3 set ref 347* 347 351 356* 358 392*
                                                                                  392
c_word_size              26            based           fixed bin(24,0)          level 2 dcl 8-3 set ref 146 448 467*
cdesc                           000121 automatic       bit(1)                   packed unaligned dcl 19 set ref 53* 55 155
char                     31(04)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 452
char_to_word                           internal static bit(9)                   initial dcl 14-8 ref 260
character_                             constant        fixed bin(3,0)           initial dcl 17-5 ref 387
coff                            000120 automatic       fixed bin(31,0)          dcl 18 set ref 351* 353* 356
compiler_developed       32(35)        based           structure                level 3 packed packed unaligned dcl 8-3
controlled               32(12)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 53
copy_expression                 000022 constant        entry                    external dcl 2-94 ref 167 427
create_operator                 000024 constant        entry                    external dcl 2-152 ref 69 79 86 96 312 325 375 381
                                                                                  396
create_statement$prologue       000026 constant        entry                    external dcl 2-171 ref 169
d                               000100 automatic       pointer                  dcl 188 in procedure "structure_scan" set ref 217*
                                                                                  217* 218* 219 220 221 222 223* 224
d                               000102 automatic       pointer                  dcl 256 in procedure "get_structure_size" set ref
                                                                                  284* 284* 285 286 287 288 292 301 387 387 387 405
                                                                                  408 411 411 411 419 421 423 427 427 429 433 444
                                                                                  444* 448 448 452 452 452 454 455 458 458* 460
data_type                31            based           structure                level 3 packed packed unaligned dcl 8-3
dcl_size                 24            based           pointer                  level 2 packed packed unaligned dcl 8-3 set ref 423
                                                                                  427* 427* 429 455
declare                         000012 constant        entry                    external dcl 1-41 ref 428 431 435
declare_constant$integer        000030 constant        entry                    external dcl 2-234 ref 87 397
declare_descriptor              000032 constant        entry                    external dcl 2-239 ref 155 158
declare_descriptor$param        000034 constant        entry                    external dcl 2-259 ref 55
declare_pointer                 000036 constant        entry                    external dcl 2-287 ref 68 90
defined                  32(13)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 109
                                                                                  126 411
descriptor               13            based           pointer                  level 2 packed packed unaligned dcl 8-3 set ref 55*
                                                                                  155 155* 158 158 158*
dimensioned              31(19)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 240 425
divide                                                 builtin function         dcl 23 ref 309 322
element                   1            based           pointer                  array level 2 packed packed unaligned dcl 18-6 ref
                                                                                  434 435 436
element_boundary          1(23)        based           fixed bin(3,0)           level 2 packed packed unaligned dcl 9-1 set ref 240*
entry                    31(09)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 419
equivalence              14            based           pointer                  level 2 packed packed unaligned dcl 8-3 set ref 209*
                                                                                  209 231* 231 287* 287
exp_extents              33(04)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 65
                                                                                  222* 222 222
expand_initial                  000014 constant        entry                    external dcl 1-84 ref 484
external                 32(02)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 126
f                               000104 automatic       pointer                  dcl 256 set ref 280* 338 347 348
father                   17            based           pointer                  level 2 packed packed unaligned dcl 8-3 ref 194 198
                                                                                  199 410
fc_size                         000125 automatic       fixed bin(31,0)          dcl 258 set ref 281* 309* 309 322* 322 353 448* 467
fixed                                                  builtin function         dcl 23 ref 87 87
fo_in_qual               12(22)        based           bit(1)                   level 3 packed packed unaligned dcl 11-3 set ref 76*
                                                                                  92* 290* 290 353*
fsize                           000114 automatic       pointer                  dcl 256 set ref 282* 309 313 314* 322 326 327* 353
                                                                                  448* 466
general                  16            based           pointer                  level 2 packed packed unaligned dcl 8-3 ref 433
get_size                        000040 constant        entry                    external dcl 2-352 ref 211 472
half_to_word                           internal static bit(9)                   initial dcl 14-8 ref 260
i                               000122 automatic       fixed bin(3,0)           dcl 257 set ref 292* 299 309 309 312 320 322 322 322
                                                                                  325 333
initialed                31(20)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 484
j                               000123 automatic       fixed bin(3,0)           dcl 257 set ref 279* 299 301 307 309 309 312 333*
                                                                                  353* 448* 465
k                               000124 automatic       fixed bin(3,0)           dcl 257 set ref 348* 353* 360
length                    6            based           pointer                  level 2 packed packed unaligned dcl 11-3 set ref
                                                                                  455*
level                     2(11)        based           fixed bin(8,0)           level 2 packed packed unaligned dcl 8-3 set ref 194*
                                                                                  194
list                                   based           structure                level 1 dcl 18-6
location                  1            based           fixed bin(18,0)          level 2 packed packed unsigned unaligned dcl 8-3 ref
                                                                                  87 87
max                                                    builtin function         dcl 23 ref 112 220 236
max_words_per_variable                 constant        fixed bin(31,0)          initial dcl 19-5 ref 146
member                   32(04)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 192 206
                                                                                  228
min                                                    builtin function         dcl 23 ref 360
misc_attributes          31(19)        based           structure                level 3 packed packed unaligned dcl 8-3
mod_bit                                constant        bit(9)                   initial dcl 14-8 ref 276 341
mod_byte                               internal static bit(9)                   initial dcl 14-8 ref 276
mod_const                       000000 constant        fixed bin(15,0)          initial array dcl 272 ref 322 322 322
mod_half                               internal static bit(9)                   initial dcl 14-8 ref 276
mod_ops                         000132 automatic       bit(9)                   initial array dcl 274 set ref 274* 274* 325*
mult                            000076 constant        bit(9)                   initial dcl 14-8 set ref 396*
node                                   based           structure                level 1 dcl 15-27
null                                                   builtin function         dcl 23 ref 55 55 55 55 63 118 155 155 155 155 155
                                                                                  158 158 158 158 158 165 169 169 203 217 282 284
                                                                                  309 322 341 358 366 394 408 409 411 433 482 484
                                                                                  484 484 484
off                             000114 automatic       pointer                  dcl 16 set ref 350* 353* 355
offset                    5            based           pointer                  level 2 packed packed unaligned dcl 11-3 set ref
                                                                                  120* 338 346* 350 355* 358 366 370 377* 383* 394
                                                                                  398 399*
offset_adder                    000016 constant        entry                    external dcl 1-172 ref 353 448
offset_ops                      000134 automatic       bit(9)                   initial array dcl 276 set ref 276* 276* 276* 276*
                                                                                  375* 381*
op_code                   0(09)        based           bit(9)                   level 2 packed packed unaligned dcl 12-6 ref 341 372
opcode_index                    000036 constant        fixed bin(15,0)          initial array dcl 262 ref 312
opcodes                         000126 automatic       bit(9)                   initial array dcl 260 set ref 260* 260* 260* 260*
                                                                                  312*
operand                   1            based           pointer                  array level 2 packed packed unaligned dcl 12-6 set
                                                                                  ref 70* 87* 88* 97* 167* 313* 326* 341 376* 382*
                                                                                  397* 398*
operator                               based           structure                level 1 dcl 12-6
operator_node                          constant        bit(9)                   initial dcl 15-5 ref 341 372
p                                      parameter       pointer                  dcl 478 in procedure "initialize" ref 476 480
p                               000112 automatic       pointer                  dcl 256 in procedure "get_structure_size" set ref
                                                                                  375* 376 377 381* 382 383 396* 397 398 399
packed                   33            based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 76
                                                                                  92 107 215* 219* 219 219 237* 405
padded_ref               12(06)        based           bit(1)                   level 3 packed packed unaligned dcl 11-3 set ref
                                                                                  109* 112 411* 414*
param_desc               32(15)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 434*
param_ptr                       000074 constant        bit(9)                   initial dcl 14-8 set ref 86*
parameter                32(14)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 53
                                                                                  82 109 126 158 411
picture                  31(18)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 458
pl1_stat_$eis_mode              000010 external static bit(1)                   dcl 21 ref 76 92 290 366 387
prefix                   24(09)        based           bit(12)                  level 2 packed packed unaligned dcl 10-5 ref 169
ps                                     parameter       pointer                  dcl 256 in procedure "get_structure_size" ref 254
                                                                                  278
ps                                     parameter       pointer                  dcl 16 in procedure "declare_structure" ref 11 39
ps                                     parameter       pointer                  dcl 188 in procedure "structure_scan" ref 186 190
ptr                      31(05)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 387
q                               000116 automatic       pointer                  dcl 16 in procedure "declare_structure" set ref 169*
                                                                                  170
q                               000110 automatic       pointer                  dcl 256 in procedure "get_structure_size" set ref
                                                                                  312* 313 314 325* 326 327 370* 372 372 376 382
                                                                                  408* 408* 409* 410 411 414 433* 433* 434 435* 436
q                               000100 automatic       pointer                  dcl 478 in procedure "initialize" set ref 482* 482*
                                                                                  484 484 484 484* 489* 491
qualifier                 4            based           pointer                  level 2 packed packed unaligned dcl 11-3 set ref 75
                                                                                  103* 289*
r                               000106 automatic       pointer                  dcl 256 in procedure "get_structure_size" set ref
                                                                                  288* 289 290 346 347 348 350 351 353 355 356 358
                                                                                  358 358 360 366 366 370 375 377 381 383 387 391
                                                                                  392 392 394 398 399 411 414 448 450 454 455 458
r                               000102 automatic       pointer                  dcl 478 in procedure "initialize" set ref 480* 482
refer_extents            33(05)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 221*
                                                                                  221 221
reference                              based           structure                level 1 dcl 11-3 in procedure "declare_structure"
reference                15            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 8-3 in procedure "declare_structure"
                                                                                  ref 75 76 92 103 109 112 120 121 142 280 288 290
                                                                                  465
return_value             32(18)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 53
                                                                                  424*
returns                  31(35)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 421
root                      3            based           pointer                  level 2 packed packed unaligned dcl 13-9 set ref
                                                                                  170*
round_const                     000002 constant        fixed bin(15,0)          initial array dcl 267 ref 309 309
rv                              000116 automatic       pointer                  dcl 256 set ref 423* 424 425 425 425 428* 429 431*
s                               000102 automatic       pointer                  dcl 188 in procedure "structure_scan" set ref 190*
                                                                                  192 194 194 196 196 198 198 199 199 203 205* 206
                                                                                  208 209 211* 215 215 217 219 219 220 220 221 221
                                                                                  222 222 223 223 226* 228 230 231 234 236 236 237
                                                                                  240 240 240
s                               000110 automatic       pointer                  dcl 16 in procedure "declare_structure" set ref 39*
                                                                                  40 41 53 53 53 55 55 55* 58* 65 65 73 75 76 76 76
                                                                                  82 84 87 87 92 92 92 103 107 109 109 109 109 112
                                                                                  112 112 120 121 126 126 126 126 126 140* 142 146
                                                                                  146* 155 155 155 155* 158 158 158 158 158* 167
                                                                                  173*
s                               000100 automatic       pointer                  dcl 256 in procedure "get_structure_size" set ref
                                                                                  278* 279 280 284 285 465 466 467 472*
semantic_translator$error       000042 constant        entry                    external dcl 2-450 ref 146
son                      21            based           pointer                  level 2 packed packed unaligned dcl 8-3 ref 203 217
                                                                                  284 491
star_extents             33(06)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 223*
                                                                                  223 223 425 429* 429
statement                              based           structure                level 1 dcl 13-9
storage_class            32(09)        based           structure                level 3 packed packed unaligned dcl 8-3 set ref 208*
                                                                                  208 230* 230 285* 285
string                                                 builtin function         dcl 23 set ref 208* 208 230* 230 285* 285
structure                31            based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 215*
                                                                                  425 444
substr                                                 builtin function         dcl 23 ref 341 341
symbol                                 based           structure                level 1 dcl 8-3 in procedure "declare_structure"
symbol                    3            based           pointer                  level 2 in structure "reference" packed packed
                                                                                  unaligned dcl 11-3 in procedure
                                                                                  "declare_structure" ref 158
t                               000120 automatic       pointer                  dcl 256 set ref 338* 341 341 341 341* 341 346
type                                   based           bit(9)                   level 2 packed packed unaligned dcl 15-27 ref 341
                                                                                  372
unaligned                31(22)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 76
                                                                                  92 196 199* 199
units                     0(14)        based           fixed bin(3,0)           level 2 packed packed unaligned dcl 11-3 set ref
                                                                                  121* 348 348* 358* 360* 366 375 381 387 391*
validate                        000020 constant        entry                    external dcl 1-225 ref 205 226
varying                  31(26)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 452
word_                                  constant        fixed bin(3,0)           initial dcl 17-5 ref 112 236 307 320 360 366
word_size                22            based           pointer                  level 2 packed packed unaligned dcl 8-3 set ref 167*
                                                                                  448 466*
word_to_mod2                           internal static bit(9)                   initial dcl 14-8 ref 274
word_to_mod4                           internal static bit(9)                   initial dcl 14-8 ref 274

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
a_format                               internal static bit(9)                   initial dcl 14-8
abs_fun                                internal static bit(9)                   initial dcl 14-8
acos_fun                               internal static bit(9)                   initial dcl 14-8
acosd_fun                              internal static bit(9)                   initial dcl 14-8
add                                    internal static bit(9)                   initial dcl 14-8
addbitno_fun                           internal static bit(9)                   initial dcl 14-8
addcharno_fun                          internal static bit(9)                   initial dcl 14-8
addr_fun                               internal static bit(9)                   initial dcl 14-8
addr_fun_bits                          internal static bit(9)                   initial dcl 14-8
addrel_fun                             internal static bit(9)                   initial dcl 14-8
adjust_count                    000000 constant        entry                    external dcl 2-20
alloc_semantics                 000000 constant        entry                    external dcl 1-7
alloc_semantics$init_only       000000 constant        entry                    external dcl 1-12
allocate_statement                     internal static bit(9)                   initial dcl 16-3
allocation_fun                         internal static bit(9)                   initial dcl 14-8
allot_based                            internal static bit(9)                   initial dcl 14-8
allot_ctl                              internal static bit(9)                   initial dcl 14-8
allot_var                              internal static bit(9)                   initial dcl 14-8
and_bits                               internal static bit(9)                   initial dcl 14-8
arg_desc_type                          internal static bit(36)                  initial dcl 19-71
array_node                             internal static bit(9)                   initial dcl 15-5
asin_fun                               internal static bit(9)                   initial dcl 14-8
asind_fun                              internal static bit(9)                   initial dcl 14-8
assign                                 internal static bit(9)                   initial dcl 14-8
assign_by_name                         internal static bit(9)                   initial dcl 14-8
assign_round                           internal static bit(9)                   initial dcl 14-8
assign_size_ck                         internal static bit(9)                   initial dcl 14-8
assign_zero                            internal static bit(9)                   initial dcl 14-8
atan_fun                               internal static bit(9)                   initial dcl 14-8
atand_fun                              internal static bit(9)                   initial dcl 14-8
b_format                               internal static bit(9)                   initial dcl 14-8
baseno_fun                             internal static bit(9)                   initial dcl 14-8
baseptr_fun                            internal static bit(9)                   initial dcl 14-8
begin_statement                        internal static bit(9)                   initial dcl 16-3
binary_to_octal_string          000000 constant        entry                    external dcl 2-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 2-43
bindec                          000000 constant        entry                    external dcl 2-23
bindec$vs                       000000 constant        entry                    external dcl 2-28
binoct                          000000 constant        entry                    external dcl 2-33
bit_type                               internal static bit(36)                  initial dcl 19-71
bitno_fun                              internal static bit(9)                   initial dcl 14-8
bits_per_binary_exponent               internal static fixed bin(31,0)          initial dcl 19-5
bits_per_decimal_digit                 internal static fixed bin(31,0)          initial dcl 19-5
bits_per_digit                         internal static fixed bin(31,1)          initial dcl 19-69
bits_per_double                        internal static fixed bin(31,0)          initial dcl 19-5
bits_per_half                          internal static fixed bin(31,0)          initial dcl 19-5
bits_per_packed_ptr                    internal static fixed bin(31,0)          initial dcl 19-5
bits_per_word                          internal static fixed bin(31,0)          initial dcl 19-5
block_node                             internal static bit(9)                   initial dcl 15-5
bn_format                              internal static bit(9)                   initial dcl 14-8
bool_fun                               internal static bit(9)                   initial dcl 14-8
bound                                  based           structure                level 1 dcl 9-21
bound_ck                               internal static bit(9)                   initial dcl 14-8
bound_node                             internal static bit(9)                   initial dcl 15-5
builtin                         000000 constant        entry                    external dcl 1-17
builtin_type                           internal static bit(36)                  initial dcl 19-71
by_name_agg_node                       internal static bit(9)                   initial dcl 15-5
byte_fun                               internal static bit(9)                   initial dcl 14-8
c_format                               internal static bit(9)                   initial dcl 14-8
call_statement                         internal static bit(9)                   initial dcl 16-3
cat_string                             internal static bit(9)                   initial dcl 14-8
ceil_fun                               internal static bit(9)                   initial dcl 14-8
char_type                              internal static bit(36)                  initial dcl 19-71
characters_per_double                  internal static fixed bin(31,0)          initial dcl 19-5
characters_per_half                    internal static fixed bin(31,0)          initial dcl 19-5
characters_per_word                    internal static fixed bin(31,0)          initial dcl 19-5
charno_fun                             internal static bit(9)                   initial dcl 14-8
check_star_extents              000000 constant        entry                    external dcl 1-27
clock_fun                              internal static bit(9)                   initial dcl 14-8
close_file                             internal static bit(9)                   initial dcl 14-8
close_statement                        internal static bit(9)                   initial dcl 16-3
codeptr_fun                            internal static bit(9)                   initial dcl 14-8
column_format                          internal static bit(9)                   initial dcl 14-8
compare_declaration             000000 constant        entry                    external dcl 1-31
compare_expression              000000 constant        entry                    external dcl 2-48
complex_fun                            internal static bit(9)                   initial dcl 14-8
complex_type                           internal static bit(36)                  initial dcl 19-71
conjg_fun                              internal static bit(9)                   initial dcl 14-8
constant_length                 000000 constant        entry                    external dcl 2-54
context_node                           internal static bit(9)                   initial dcl 15-5
context_processor               000000 constant        entry                    external dcl 1-38
continue_statement                     internal static bit(9)                   initial dcl 16-3
convert                         000000 constant        entry                    external dcl 2-60
convert$from_builtin            000000 constant        entry                    external dcl 2-72
convert$to_integer              000000 constant        entry                    external dcl 2-66
convert$to_target               000000 constant        entry                    external dcl 2-88
convert$to_target_fb            000000 constant        entry                    external dcl 2-82
convert$validate                000000 constant        entry                    external dcl 2-78
copy_expression$copy_sons       000000 constant        entry                    external dcl 2-99
copy_string                            internal static bit(9)                   initial dcl 14-8
copy_unique_expression          000000 constant        entry                    external dcl 2-103
copy_words                             internal static bit(9)                   initial dcl 14-8
cos_fun                                internal static bit(9)                   initial dcl 14-8
cosd_fun                               internal static bit(9)                   initial dcl 14-8
create_array                    000000 constant        entry                    external dcl 2-108
create_block                    000000 constant        entry                    external dcl 2-112
create_bound                    000000 constant        entry                    external dcl 2-118
create_context                  000000 constant        entry                    external dcl 2-122
create_cross_reference          000000 constant        entry                    external dcl 2-128
create_default                  000000 constant        entry                    external dcl 2-132
create_identifier               000000 constant        entry                    external dcl 2-136
create_label                    000000 constant        entry                    external dcl 2-140
create_list                     000000 constant        entry                    external dcl 2-147
create_reference                000000 constant        entry                    external dcl 2-158
create_statement                000000 constant        entry                    external dcl 2-163
create_storage                  000000 constant        entry                    external dcl 2-179
create_symbol                   000000 constant        entry                    external dcl 2-184
create_token                    000000 constant        entry                    external dcl 2-191
create_token$init_hash_table    000000 constant        entry                    external dcl 2-197
create_token$protected          000000 constant        entry                    external dcl 2-199
cross_reference_node                   internal static bit(9)                   initial dcl 15-5
d                                      automatic       pointer                  dcl 16
dec_integer_type                       internal static bit(36)                  initial dcl 19-71
decbin                          000000 constant        entry                    external dcl 2-206
declare_constant                000000 constant        entry                    external dcl 2-211
declare_constant$bit            000000 constant        entry                    external dcl 2-219
declare_constant$char           000000 constant        entry                    external dcl 2-224
declare_constant$desc           000000 constant        entry                    external dcl 2-229
declare_descriptor$ctl          000000 constant        entry                    external dcl 2-249
declare_integer                 000000 constant        entry                    external dcl 2-269
declare_picture                 000000 constant        entry                    external dcl 2-274
declare_picture_temp            000000 constant        entry                    external dcl 2-279
declare_statement                      internal static bit(9)                   initial dcl 16-3
declare_structure               000000 constant        entry                    external dcl 1-44
declare_temporary               000000 constant        entry                    external dcl 2-292
decode_node_id                  000000 constant        entry                    external dcl 2-300
decode_source_id                000000 constant        entry                    external dcl 2-306
default_area_size                      internal static fixed bin(31,0)          initial dcl 19-5
default_fix_bin_p                      internal static fixed bin(31,0)          initial dcl 19-5
default_fix_dec_p                      internal static fixed bin(31,0)          initial dcl 19-5
default_flt_bin_p                      internal static fixed bin(31,0)          initial dcl 19-5
default_flt_dec_p                      internal static fixed bin(31,0)          initial dcl 19-5
default_node                           internal static bit(9)                   initial dcl 15-5
default_statement                      internal static bit(9)                   initial dcl 16-3
defined_reference               000000 constant        entry                    external dcl 1-47
delete_file                            internal static bit(9)                   initial dcl 14-8
delete_statement                       internal static bit(9)                   initial dcl 16-3
desc_size                              internal static bit(9)                   initial dcl 14-8
digit_                                 internal static fixed bin(3,0)           initial dcl 17-5
digit_to_bit                           internal static bit(9)                   initial dcl 14-8
display_statement                      internal static bit(9)                   initial dcl 16-3
div                                    internal static bit(9)                   initial dcl 14-8
do_fun                                 internal static bit(9)                   initial dcl 14-8
do_semantics                    000000 constant        entry                    external dcl 1-57
do_spec                                internal static bit(9)                   initial dcl 14-8
do_statement                           internal static bit(9)                   initial dcl 16-3
e_format                               internal static bit(9)                   initial dcl 14-8
else_clause                            internal static bit(9)                   initial dcl 16-3
empty_area                             internal static bit(9)                   initial dcl 14-8
enable_on                              internal static bit(9)                   initial dcl 14-8
end_statement                          internal static bit(9)                   initial dcl 16-3
entry_statement                        internal static bit(9)                   initial dcl 16-3
entry_var_type                         internal static bit(36)                  initial dcl 19-71
environmentptr_fun                     internal static bit(9)                   initial dcl 14-8
equal                                  internal static bit(9)                   initial dcl 14-8
error                           000000 constant        entry                    external dcl 2-314
error$omit_text                 000000 constant        entry                    external dcl 2-319
error_                          000000 constant        entry                    external dcl 2-324
error_$finish                   000000 constant        entry                    external dcl 2-343
error_$initialize_error         000000 constant        entry                    external dcl 2-341
error_$no_text                  000000 constant        entry                    external dcl 2-334
ex_prologue                            internal static bit(9)                   initial dcl 14-8
exit_statement                         internal static bit(9)                   initial dcl 16-3
exp                                    internal static bit(9)                   initial dcl 14-8
exp_fun                                internal static bit(9)                   initial dcl 14-8
expand_assign                   000000 constant        entry                    external dcl 1-62
expand_by_name                  000000 constant        entry                    external dcl 1-71
expand_infix                    000000 constant        entry                    external dcl 1-76
expand_prefix                   000000 constant        entry                    external dcl 1-89
expand_primitive                000000 constant        entry                    external dcl 1-97
expression_semantics            000000 constant        entry                    external dcl 1-105
f_format                               internal static bit(9)                   initial dcl 14-8
fill_refer                      000000 constant        entry                    external dcl 1-113
floor_fun                              internal static bit(9)                   initial dcl 14-8
format_statement                       internal static bit(9)                   initial dcl 16-3
format_value_node                      internal static bit(9)                   initial dcl 15-5
fortran_read                           internal static bit(9)                   initial dcl 14-8
fortran_write                          internal static bit(9)                   initial dcl 14-8
free_based                             internal static bit(9)                   initial dcl 14-8
free_ctl                               internal static bit(9)                   initial dcl 14-8
free_node                       000000 constant        entry                    external dcl 2-345
free_statement                         internal static bit(9)                   initial dcl 16-3
free_var                               internal static bit(9)                   initial dcl 14-8
ftn_file_manip                         internal static bit(9)                   initial dcl 14-8
ftn_trans_loop                         internal static bit(9)                   initial dcl 14-8
function                        000000 constant        entry                    external dcl 1-125
generic_selector                000000 constant        entry                    external dcl 1-134
get_array_size                  000000 constant        entry                    external dcl 2-348
get_data_trans                         internal static bit(9)                   initial dcl 14-8
get_edit_trans                         internal static bit(9)                   initial dcl 14-8
get_file                               internal static bit(9)                   initial dcl 14-8
get_list_trans                         internal static bit(9)                   initial dcl 14-8
get_statement                          internal static bit(9)                   initial dcl 16-3
get_string                             internal static bit(9)                   initial dcl 14-8
goto_statement                         internal static bit(9)                   initial dcl 16-3
greater_or_equal                       internal static bit(9)                   initial dcl 14-8
greater_than                           internal static bit(9)                   initial dcl 14-8
half_                                  internal static fixed bin(3,0)           initial dcl 17-5
if_statement                           internal static bit(9)                   initial dcl 16-3
imag_fun                               internal static bit(9)                   initial dcl 14-8
index_after_fun                        internal static bit(9)                   initial dcl 14-8
index_before_fun                       internal static bit(9)                   initial dcl 14-8
index_fun                              internal static bit(9)                   initial dcl 14-8
index_rev_fun                          internal static bit(9)                   initial dcl 14-8
integer_type                           internal static bit(36)                  initial dcl 19-71
io_data_list_semantics          000000 constant        entry                    external dcl 1-143
io_data_list_semantics$format_list_semantics
                                000000 constant        entry                    external dcl 1-120
io_semantics                    000000 constant        entry                    external dcl 1-148
join                                   internal static bit(9)                   initial dcl 14-8
jump                                   internal static bit(9)                   initial dcl 14-8
jump_false                             internal static bit(9)                   initial dcl 14-8
jump_if_eq                             internal static bit(9)                   initial dcl 14-8
jump_if_ge                             internal static bit(9)                   initial dcl 14-8
jump_if_gt                             internal static bit(9)                   initial dcl 14-8
jump_if_le                             internal static bit(9)                   initial dcl 14-8
jump_if_lt                             internal static bit(9)                   initial dcl 14-8
jump_if_ne                             internal static bit(9)                   initial dcl 14-8
jump_true                              internal static bit(9)                   initial dcl 14-8
l_parn                                 internal static bit(9)                   initial dcl 14-8
label_array_element_node               internal static bit(9)                   initial dcl 15-5
label_node                             internal static bit(9)                   initial dcl 15-5
length_fun                             internal static bit(9)                   initial dcl 14-8
less_or_equal                          internal static bit(9)                   initial dcl 14-8
less_than                              internal static bit(9)                   initial dcl 14-8
line_format                            internal static bit(9)                   initial dcl 14-8
list_node                              internal static bit(9)                   initial dcl 15-5
local_label_var_type                   internal static bit(36)                  initial dcl 19-71
locate_file                            internal static bit(9)                   initial dcl 14-8
locate_statement                       internal static bit(9)                   initial dcl 16-3
lock_file                              internal static bit(9)                   initial dcl 14-8
lock_fun                               internal static bit(9)                   initial dcl 14-8
lock_statement                         internal static bit(9)                   initial dcl 16-3
log10_fun                              internal static bit(9)                   initial dcl 14-8
log2_fun                               internal static bit(9)                   initial dcl 14-8
log_fun                                internal static bit(9)                   initial dcl 14-8
lookup                          000000 constant        entry                    external dcl 1-153
loop                                   internal static bit(9)                   initial dcl 14-8
machine_state_node                     internal static bit(9)                   initial dcl 15-5
make_desc                              internal static bit(9)                   initial dcl 14-8
make_non_quick                  000000 constant        entry                    external dcl 1-162
match_arguments                 000000 constant        entry                    external dcl 1-166
max_area_size                          internal static fixed bin(31,0)          initial dcl 19-5
max_bit_string                         internal static fixed bin(31,0)          initial dcl 19-5
max_bit_string_constant                internal static fixed bin(31,0)          initial dcl 19-5
max_block_number                       internal static fixed bin(17,0)          initial dcl 10-74
max_char_string                        internal static fixed bin(31,0)          initial dcl 19-5
max_char_string_constant               internal static fixed bin(31,0)          initial dcl 19-5
max_fun                                internal static bit(9)                   initial dcl 14-8
max_identifier_length                  internal static fixed bin(31,0)          initial dcl 19-5
max_index_register_value               internal static fixed bin(31,0)          initial dcl 19-5
max_length_precision                   internal static fixed bin(31,0)          initial dcl 19-5
max_list_elements                      internal static fixed bin(17,0)          initial dcl 18-12
max_number_of_dimensions               internal static fixed bin(31,0)          initial dcl 19-5
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 12-15
max_offset_precision                   internal static fixed bin(31,0)          initial dcl 19-5
max_p_bin_or_dec                       internal static fixed bin(31,0)          initial dcl 19-5
max_p_dec                              internal static fixed bin(31,0)          initial dcl 19-5
max_p_fix_bin_1                        internal static fixed bin(31,0)          initial dcl 19-5
max_p_fix_bin_2                        internal static fixed bin(31,0)          initial dcl 19-5
max_p_flt_bin_1                        internal static fixed bin(31,0)          initial dcl 19-5
max_p_flt_bin_2                        internal static fixed bin(31,0)          initial dcl 19-5
max_scale                              internal static fixed bin(31,0)          initial dcl 19-5
max_signed_index_register_value        internal static fixed bin(31,0)          initial dcl 19-5
max_signed_xreg_precision              internal static fixed bin(31,0)          initial dcl 19-5
max_uns_xreg_precision                 internal static fixed bin(31,0)          initial dcl 19-5
merge_attributes                000000 constant        entry                    external dcl 2-355
min_area_size                          internal static fixed bin(31,0)          initial dcl 19-5
min_fun                                internal static bit(9)                   initial dcl 14-8
min_scale                              internal static fixed bin(31,0)          initial dcl 19-5
mod2_                                  internal static fixed bin(3,0)           initial dcl 17-5
mod4_                                  internal static fixed bin(3,0)           initial dcl 17-5
mod_fun                                internal static bit(9)                   initial dcl 14-8
mod_word                               internal static bit(9)                   initial dcl 14-8
n                                      automatic       fixed bin(15,0)          dcl 17
negate                                 internal static bit(9)                   initial dcl 14-8
nop                                    internal static bit(9)                   initial dcl 14-8
not_bits                               internal static bit(9)                   initial dcl 14-8
not_equal                              internal static bit(9)                   initial dcl 14-8
null_statement                         internal static bit(9)                   initial dcl 16-3
off_fun                                internal static bit(9)                   initial dcl 14-8
on_statement                           internal static bit(9)                   initial dcl 16-3
open_file                              internal static bit(9)                   initial dcl 14-8
open_statement                         internal static bit(9)                   initial dcl 16-3
operator_semantics              000000 constant        entry                    external dcl 1-184
optimizer                       000000 constant        entry                    external dcl 2-361
or_bits                                internal static bit(9)                   initial dcl 14-8
pack                                   internal static bit(9)                   initial dcl 14-8
packed_digits_per_character            internal static fixed bin(31,0)          initial dcl 19-5
page_format                            internal static bit(9)                   initial dcl 14-8
param_desc_ptr                         internal static bit(9)                   initial dcl 14-8
parse_error                     000000 constant        entry                    external dcl 2-364
parse_error$no_text             000000 constant        entry                    external dcl 2-368
picture_format                         internal static bit(9)                   initial dcl 14-8
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 2-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 2-372
pl1_mod_fun                            internal static bit(9)                   initial dcl 14-8
pl1_print$for_lex               000000 constant        entry                    external dcl 2-418
pl1_print$non_varying           000000 constant        entry                    external dcl 2-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 2-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 2-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 2-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 2-414
pl1_print$varying               000000 constant        entry                    external dcl 2-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 2-395
pointer_type                           internal static bit(36)                  initial dcl 19-71
prefix_plus                            internal static bit(9)                   initial dcl 14-8
procedure_statement                    internal static bit(9)                   initial dcl 16-3
propagate_bit                   000000 constant        entry                    external dcl 1-192
ptr_fun                                internal static bit(9)                   initial dcl 14-8
put_control                            internal static bit(9)                   initial dcl 14-8
put_data_trans                         internal static bit(9)                   initial dcl 14-8
put_edit_trans                         internal static bit(9)                   initial dcl 14-8
put_field                              internal static bit(9)                   initial dcl 14-8
put_field_chk                          internal static bit(9)                   initial dcl 14-8
put_file                               internal static bit(9)                   initial dcl 14-8
put_list_trans                         internal static bit(9)                   initial dcl 14-8
put_statement                          internal static bit(9)                   initial dcl 16-3
put_string                             internal static bit(9)                   initial dcl 14-8
r_format                               internal static bit(9)                   initial dcl 14-8
r_parn                                 internal static bit(9)                   initial dcl 14-8
range_ck                               internal static bit(9)                   initial dcl 14-8
rank_fun                               internal static bit(9)                   initial dcl 14-8
read_file                              internal static bit(9)                   initial dcl 14-8
read_statement                         internal static bit(9)                   initial dcl 16-3
real_fun                               internal static bit(9)                   initial dcl 14-8
real_type                              internal static bit(36)                  initial dcl 19-71
record_io                              internal static bit(9)                   initial dcl 14-8
refer                                  internal static bit(9)                   initial dcl 14-8
refer_extent                    000000 constant        entry                    external dcl 2-426
reference_node                         internal static bit(9)                   initial dcl 15-5
rel_fun                                internal static bit(9)                   initial dcl 14-8
repeat_fun                             internal static bit(9)                   initial dcl 14-8
reserve$clear                   000000 constant        entry                    external dcl 2-430
reserve$declare_lib             000000 constant        entry                    external dcl 2-434
reserve$read_lib                000000 constant        entry                    external dcl 2-439
return_bits                            internal static bit(9)                   initial dcl 14-8
return_statement                       internal static bit(9)                   initial dcl 16-3
return_string                          internal static bit(9)                   initial dcl 14-8
return_value                           internal static bit(9)                   initial dcl 14-8
return_words                           internal static bit(9)                   initial dcl 14-8
reverse_fun                            internal static bit(9)                   initial dcl 14-8
revert_on                              internal static bit(9)                   initial dcl 14-8
revert_statement                       internal static bit(9)                   initial dcl 16-3
rewrite_file                           internal static bit(9)                   initial dcl 14-8
rewrite_statement                      internal static bit(9)                   initial dcl 16-3
round_fun                              internal static bit(9)                   initial dcl 14-8
search_fun                             internal static bit(9)                   initial dcl 14-8
search_rev_fun                         internal static bit(9)                   initial dcl 14-8
segno_fun                              internal static bit(9)                   initial dcl 14-8
semantic_translator             000000 constant        entry                    external dcl 2-444
semantic_translator$abort       000000 constant        entry                    external dcl 2-446
semantic_translator$call_es     000000 constant        entry                    external dcl 1-196
setbitno_fun                           internal static bit(9)                   initial dcl 14-8
setcharno_fun                          internal static bit(9)                   initial dcl 14-8
sf_par_node                            internal static bit(9)                   initial dcl 15-5
share_expression                000000 constant        entry                    external dcl 2-454
sign_fun                               internal static bit(9)                   initial dcl 14-8
signal_on                              internal static bit(9)                   initial dcl 14-8
signal_statement                       internal static bit(9)                   initial dcl 16-3
simplify_expression             000000 constant        entry                    external dcl 1-205
simplify_offset                 000000 constant        entry                    external dcl 1-212
sin_fun                                internal static bit(9)                   initial dcl 14-8
sind_fun                               internal static bit(9)                   initial dcl 14-8
skip_format                            internal static bit(9)                   initial dcl 14-8
source_node                            internal static bit(9)                   initial dcl 15-5
sqrt_fun                               internal static bit(9)                   initial dcl 14-8
stack_ptr                              internal static bit(9)                   initial dcl 14-8
stackbaseptr_fun                       internal static bit(9)                   initial dcl 14-8
stackframeptr_fun                      internal static bit(9)                   initial dcl 14-8
stacq_fun                              internal static bit(9)                   initial dcl 14-8
statement_node                         internal static bit(9)                   initial dcl 15-5
std_arg_list                           internal static bit(9)                   initial dcl 14-8
std_call                               internal static bit(9)                   initial dcl 14-8
std_entry                              internal static bit(9)                   initial dcl 14-8
std_return                             internal static bit(9)                   initial dcl 14-8
stop                                   internal static bit(9)                   initial dcl 14-8
stop_statement                         internal static bit(9)                   initial dcl 16-3
storage_block_type                     internal static bit(36)                  initial dcl 19-71
stream_prep                            internal static bit(9)                   initial dcl 14-8
sub                                    internal static bit(9)                   initial dcl 14-8
subscripter                     000000 constant        entry                    external dcl 1-216
symbol_node                            internal static bit(9)                   initial dcl 15-5
system_on_unit                         internal static bit(9)                   initial dcl 16-3
tan_fun                                internal static bit(9)                   initial dcl 14-8
tand_fun                               internal static bit(9)                   initial dcl 14-8
temporary_node                         internal static bit(9)                   initial dcl 15-5
terminate_trans                        internal static bit(9)                   initial dcl 14-8
token_node                             internal static bit(9)                   initial dcl 15-5
token_to_binary                 000000 constant        entry                    external dcl 2-459
translate_fun                          internal static bit(9)                   initial dcl 14-8
trunc_fun                              internal static bit(9)                   initial dcl 14-8
unknown_statement                      internal static bit(9)                   initial dcl 16-3
unlock_file                            internal static bit(9)                   initial dcl 14-8
unlock_statement                       internal static bit(9)                   initial dcl 16-3
unpack                                 internal static bit(9)                   initial dcl 14-8
vclock_fun                             internal static bit(9)                   initial dcl 14-8
verify_fun                             internal static bit(9)                   initial dcl 14-8
verify_ltrim_fun                       internal static bit(9)                   initial dcl 14-8
verify_rev_fun                         internal static bit(9)                   initial dcl 14-8
verify_rtrim_fun                       internal static bit(9)                   initial dcl 14-8
wait_statement                         internal static bit(9)                   initial dcl 16-3
word_to_mod8                           internal static bit(9)                   initial dcl 14-8
wordno_fun                             internal static bit(9)                   initial dcl 14-8
words_per_condition_var                internal static fixed bin(31,0)          initial dcl 19-5
words_per_entry_var                    internal static fixed bin(31,0)          initial dcl 19-5
words_per_file_var                     internal static fixed bin(31,0)          initial dcl 19-5
words_per_fix_bin_1                    internal static fixed bin(31,0)          initial dcl 19-5
words_per_fix_bin_2                    internal static fixed bin(31,0)          initial dcl 19-5
words_per_flt_bin_1                    internal static fixed bin(31,0)          initial dcl 19-5
words_per_flt_bin_2                    internal static fixed bin(31,0)          initial dcl 19-5
words_per_format                       internal static fixed bin(31,0)          initial dcl 19-5
words_per_label_var                    internal static fixed bin(31,0)          initial dcl 19-5
words_per_offset                       internal static fixed bin(31,0)          initial dcl 19-5
words_per_packed_pointer               internal static fixed bin(31,0)          initial dcl 19-5
words_per_pointer                      internal static fixed bin(31,0)          initial dcl 19-5
words_per_varying_string_header        internal static fixed bin(31,0)          initial dcl 19-5
write_file                             internal static bit(9)                   initial dcl 14-8
write_statement                        internal static bit(9)                   initial dcl 16-3
x_format                               internal static bit(9)                   initial dcl 14-8
xor_bits                               internal static bit(9)                   initial dcl 14-8

NAMES DECLARED BY EXPLICIT CONTEXT.
declare_structure               000113 constant        entry                    external dcl 11
get_offset                      001473 constant        label                    dcl 338 ref 302
get_structure_size              001207 constant        entry                    internal dcl 254 ref 140 444
initialize                      002336 constant        entry                    internal dcl 476 ref 173 489
structure_scan                  000737 constant        entry                    internal dcl 186 ref 58 218
succ                            002033 constant        label                    dcl 411 ref 409

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      2654        2720    2427        2664
Length      3522    2427        44         565     224           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
declare_structure                   112 external procedure  is an external procedure.  
structure_scan                       81 internal procedure  calls itself recursively.  
get_structure_size                  138 internal procedure  calls itself recursively.  
initialize                           80 internal procedure  calls itself recursively.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
declare_structure        000100 adam                        declare_structure
                         000102 base                        declare_structure
                         000104 bit_offset                  declare_structure
                         000106 allocate                    declare_structure
                         000110 s                           declare_structure
                         000112 b                           declare_structure
                         000114 off                         declare_structure
                         000116 q                           declare_structure
                         000120 coff                        declare_structure
                         000121 cdesc                       declare_structure
get_structure_size       000100 s                           get_structure_size
                         000102 d                           get_structure_size
                         000104 f                           get_structure_size
                         000106 r                           get_structure_size
                         000110 q                           get_structure_size
                         000112 p                           get_structure_size
                         000114 fsize                       get_structure_size
                         000116 rv                          get_structure_size
                         000120 t                           get_structure_size
                         000122 i                           get_structure_size
                         000123 j                           get_structure_size
                         000124 k                           get_structure_size
                         000125 fc_size                     get_structure_size
                         000126 opcodes                     get_structure_size
                         000132 mod_ops                     get_structure_size
                         000134 offset_ops                  get_structure_size
initialize               000100 q                           initialize
                         000102 r                           initialize
structure_scan           000100 d                           structure_scan
                         000102 s                           structure_scan

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        call_int_this       call_int_other      return_mac          ext_entry           int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
copy_expression               create_operator               create_statement$prologue     declare
declare_constant$integer      declare_descriptor            declare_descriptor$param      declare_pointer
expand_initial                get_size                      offset_adder                  semantic_translator$error
validate

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pl1_stat_$eis_mode




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000110        39 000120        40 000124        41 000126        53 000127        55 000145        58 000200
     63 000206        65 000212        68 000221        69 000232        70 000247        73 000252        75 000256
     76 000261        79 000276        82 000312        84 000316        86 000321        87 000336        88 000356
     89 000360        90 000361        92 000372        96 000410        97 000424       103 000427       107 000433
    109 000437       112 000462       118 000477       120 000503       121 000506       126 000513       140 000520
    142 000526       146 000531       155 000550       158 000612       165 000655       167 000661       169 000676
    170 000724       173 000727       175 000735       186 000736       190 000744       192 000750       194 000753
    196 000764       198 000770       199 000774       203 001000       205 001003       206 001011       208 001015
    209 001023       211 001025       212 001034       215 001035       217 001041       218 001050       219 001057
    220 001072       221 001110       222 001115       223 001122       224 001127       226 001132       228 001141
    230 001145       231 001153       234 001155       236 001160       237 001172       240 001174       243 001205
    254 001206       260 001214       274 001235       276 001247       278 001267       279 001273       280 001277
    281 001301       282 001302       284 001304       285 001312       286 001320       287 001326       288 001330
    289 001332       290 001334       292 001345       299 001352       301 001354       302 001361       307 001362
    309 001365       312 001403       313 001424       314 001427       320 001430       322 001433       325 001447
    326 001465       327 001470       333 001471       338 001473       341 001476       346 001520       347 001523
    348 001526       350 001536       351 001541       353 001543       355 001603       356 001607       358 001612
    360 001623       366 001633       370 001646       372 001650       375 001662       376 001677       377 001702
    379 001704       381 001705       382 001722       383 001725       387 001727       391 001743       392 001747
    394 001753       396 001756       397 001772       398 002006       399 002011       405 002012       408 002016
    409 002024       410 002030       411 002033       414 002064       419 002074       421 002100       423 002103
    424 002105       425 002107       427 002115       428 002131       429 002140       430 002147       431 002150
    433 002157       434 002166       435 002172       436 002204       444 002210       448 002223       450 002267
    452 002271       454 002300       455 002302       458 002304       460 002311       465 002314       466 002320
    467 002323       472 002325       474 002334       476 002335       480 002343       482 002347       484 002354
    489 002401       491 002413       493 002417


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
