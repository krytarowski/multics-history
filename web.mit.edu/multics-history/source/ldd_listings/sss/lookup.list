	COMPILATION LISTING OF SEGMENT lookup
	Compiled by: Multics PL/I Compiler, Release 33e, of October 6, 1992
	Compiled at: CGI                             
	Compiled on: 2000-05-05_1825.20_Fri_mdt
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 /* Modified Dec 1978 by David Spector to process suppress_cross_ref context bit
       12*   to suppress redundant int entry/label cross-references */
       13 /* Modified: 27 Dec 1980 by PCK to implement by name assignment */
       14 
       15 lookup: proc(blk,stmnt,tree,s,context) returns(bit(1) aligned);
       16 
       17 dcl	(blk,stmnt,tree,s,d,q,b,f,name) ptr;
       18 dcl	fully_qualified bit(1);
       19 dcl	(n,k) fixed bin(15);
       20 dcl	pl1_stat_$LHS ptr ext static;
       21 
       22 dcl	(addr,null,substr,string) builtin;
       23 
  1     1 /* BEGIN INCLUDE FILE ... semant.incl.pl1 */
  1     2 
  1     3 /* Modified: 30 Aug 1979 by PCK to fix 1804 and 1823 */
  1     4 /* Modified: 26 Aug 1979 by PCK to implement by name assignment */
  1     5 
  1     6 
  1     7 declare	alloc_semantics	entry(pointer,pointer,pointer);
  1     8 			/* parameter 1:	(input)	block node pointer		*/
  1     9 			/* parameter 2:	(input)	statement node pointer	*/
  1    10 			/* parameter 3:	(in/out)	tree pointer		*/
  1    11 
  1    12 declare	alloc_semantics$init_only entry(pointer,pointer,pointer);
  1    13 			/* parameter 1:	(input)	qualifier pointer		*/
  1    14 			/* parameter 2:	(input)	statement node pointer	*/
  1    15 			/* parameter 3:	(input)	symbol node pointer		*/
  1    16 
  1    17 declare	builtin		entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  1    18 			returns(pointer);
  1    19 			/* parameter 1:	(input)	block node pointer		*/
  1    20 			/* parameter 2:	(input)	statement node pointer	*/
  1    21 			/* parameter 3:	(input)	tree pointer		*/
  1    22 			/* parameter 4:	(input)	subscript pointer		*/
  1    23 			/* parameter 5:	(input)	builtin symbol node pointer	*/
  1    24 			/* parameter 6:	(in/out)	context			*/
  1    25 			/* return:	(output)	tree pointer		*/
  1    26 
  1    27 declare	check_star_extents	entry(pointer,pointer);
  1    28 			/* parameter 1:	(input) symbol node of procedure	*/
  1    29 			/* parameter 2:	(input) argument list pointer		*/
  1    30 
  1    31 declare	compare_declaration	entry(pointer,pointer,bit(1) aligned) reducible
  1    32 			returns(bit(1) aligned);
  1    33 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  1    34 			/* parameter 2:	(input)	symbol node ptr	*/
  1    35 			/* parameter 3:	(input)	"1"b if aligned attribute ignored for string	*/
  1    36 			/* return:	(output)	compare bit		*/
  1    37 
  1    38 declare	context_processor	entry(pointer,label);
  1    39 			/* parameter 1:	(input)	root block node pointer	*/
  1    40 
  1    41 declare	declare		entry(pointer);
  1    42 			/* parameter 1:	(input)	symbol node pointer		*/
  1    43 
  1    44 declare	declare_structure	entry(pointer);
  1    45 			/* parameter 1:	(input)	symbol node pointer		*/
  1    46 
  1    47 declare	defined_reference	entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  1    48 			returns(pointer);
  1    49 			/* parameter 1:	(input)	block node pointer		*/
  1    50 			/* parameter 2:	(input)	statement node pointer	*/
  1    51 			/* parameter 3:	(input)	tree pointer		*/
  1    52 			/* parameter 4:	(input)	subscript list pointer or null*/
  1    53 			/* parameter 5:	(input)	symbol node pointer		*/
  1    54 			/* parameter 6:	(in/out)	context			*/
  1    55 			/* return:	(output)	tree pointer		*/
  1    56 
  1    57 declare	do_semantics	entry(pointer,pointer,pointer);
  1    58 			/* parameter 1:	(input)	block node pointer		*/
  1    59 			/* parameter 2:	(input)	statement node pointer	*/
  1    60 			/* parameter 3:	(input)	tree pointer		*/
  1    61 
  1    62 declare	expand_assign	entry(pointer,pointer,pointer,bit(36) aligned,pointer)
  1    63 			returns(pointer);
  1    64 			/* parameter 1:	(input)	block node pointer		*/
  1    65 			/* parameter 2:	(input)	statement node pointer	*/
  1    66 			/* parameter 3:	(input)	tree pointer		*/
  1    67 			/* parameter 4:	(in/out)	context			*/
  1    68 			/* parameter 5:	(input)	aggregate reference node ptr	*/
  1    69 			/* return:	(output)	tree pointer		*/
  1    70 
  1    71 declare	expand_by_name	entry(pointer,pointer,pointer);
  1    72 			/* parameter 1:	(input)	block node pointer		*/
  1    73 			/* parameter 2:	(input)	statement node pointer	*/
  1    74 			/* parameter 3:	(input/output)	tree pointer		*/
  1    75 
  1    76 declare	expand_infix	entry(pointer,pointer,pointer,bit(36) aligned)
  1    77 			returns(pointer);
  1    78 			/* parameter 1:	(input)	block node pointer		*/
  1    79 			/* parameter 2:	(input)	statement node pointer	*/
  1    80 			/* parameter 3:	(input)	tree pointer		*/
  1    81 			/* parameter 4:	(in/out)	context			*/
  1    82 			/* return:	(output)	tree pointer		*/
  1    83 
  1    84 declare	expand_initial	entry(pointer,pointer,pointer);
  1    85 			/* parameter 1:	(input)	symbol node pointer		*/
  1    86 			/* parameter 2:	(input)	statement node pointer	*/
  1    87 			/* parameter 3:	(input)	locator			*/
  1    88 
  1    89 declare	expand_prefix	entry(pointer,pointer,pointer,bit(36) aligned)
  1    90 			returns(pointer);
  1    91 			/* parameter 1:	(input)	block node pointer		*/
  1    92 			/* parameter 2:	(input)	statement node pointer	*/
  1    93 			/* parameter 3:	(input)	tree pointer		*/
  1    94 			/* parameter 4:	(in/out)	context			*/
  1    95 			/* return:	(output)	tree pointer		*/
  1    96 
  1    97 declare	expand_primitive	entry(pointer,pointer,pointer,bit(36) aligned)
  1    98 			returns(pointer);
  1    99 			/* parameter 1:	(input)	block node pointer		*/
  1   100 			/* parameter 2:	(input)	statement node pointer	*/
  1   101 			/* parameter 3:	(input)	tree pointer		*/
  1   102 			/* parameter 4:	(input)	context			*/
  1   103 			/* return:	(output)	tree pointer		*/
  1   104 
  1   105 declare	expression_semantics entry(pointer,pointer,pointer,bit(36) aligned)
  1   106 			returns(pointer);
  1   107 			/* parameter 1:	(input)	block node pointer		*/
  1   108 			/* parameter 2:	(input)	statement node pointer	*/
  1   109 			/* parameter 3:	(input)	tree pointer		*/
  1   110 			/* parameter 4:	(in/out)	context			*/
  1   111 			/* return:	(output)	tree pointer		*/
  1   112 
  1   113 declare	fill_refer	entry(pointer,pointer,bit(1) aligned)
  1   114 			returns(pointer);
  1   115 			/* parameter 1:	(input)	null,ref node,op node ptr */
  1   116 			/* parameter 2:	(input)	null,ref node,op node ptr */
  1   117 			/* parameter 3:	(input)	copy switch for param 2 */
  1   118 			/* return:	(output)	ptr to processed tree */
  1   119 
  1   120 declare	io_data_list_semantics$format_list_semantics entry(pointer,pointer,pointer);
  1   121 			/* parameter 1:	(input)	block node pointer		*/
  1   122 			/* parameter 2:	(input)	statement node pointer	*/
  1   123 			/* parameter 3:	(in/out)	tree pointer		*/
  1   124 
  1   125 declare	function		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   126 			returns(pointer);
  1   127 			/* parameter 1:	(input)	block node pointer		*/
  1   128 			/* parameter 2:	(input)	statement node pointer	*/
  1   129 			/* parameter 3:	(input)	tree pointer		*/
  1   130 			/* parameter 4:	(input)	symbol node pointer		*/
  1   131 			/* parameter 5:	(in/out)	context			*/
  1   132 			/* return:	(output)	tree pointer		*/
  1   133 
  1   134 declare	generic_selector	entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   135 			returns(pointer);
  1   136 			/* parameter 1:	(input)	block node pointer	*/
  1   137 			/* parameter 2:	(input)	statement node pointer	*/
  1   138 			/* parameter 3:	(input)	tree pointer	*/
  1   139 			/* parameter 4:	(input)	pointer to argument list	*/
  1   140 			/* parameter 5:	(in/out)	context		*/
  1   141 			/* return:	(output)	tree pointer	*/
  1   142 
  1   143 declare	io_data_list_semantics entry(pointer,pointer,pointer);
  1   144 			/* parameter 1:	(input)	block node pointer		*/
  1   145 			/* parameter 2:	(input)	statement node pointer	*/
  1   146 			/* parameter 3:	(input)	operator node pointer	*/
  1   147 
  1   148 declare	io_semantics	entry(pointer,pointer,pointer);
  1   149 			/* parameter 1:	(input)	block node pointer		*/
  1   150 			/* parameter 2:	(input)	statement node pointer	*/
  1   151 			/* parameter 3:	(input)	tree pointer		*/
  1   152 
  1   153 declare	lookup		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   154 			returns(bit(1) aligned);
  1   155 			/* parameter 1:	(input)	block node pointer		*/
  1   156 			/* parameter 2:	(input)	stmnt|symbol node pointer	*/
  1   157 			/* parameter 3:	(input)	token or reference node ptr	*/
  1   158 			/* parameter 4:	(output)	symbol node pointer		*/
  1   159 			/* parameter 5:	(in/out)	context			*/
  1   160 			/* return:	(output)	symbol found bit		*/
  1   161 
  1   162 declare	make_non_quick	entry(pointer, bit (36) aligned);
  1   163 			/* parameter 1:	(input)	tree pointer	*/
  1   164 			/* parameter 2:	(input)	reason why being made nonquick */
  1   165 
  1   166 declare	match_arguments	entry(pointer,pointer) reducible
  1   167 			returns(bit(1) aligned);
  1   168 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  1   169 			/* parameter 2:	(input)	reference or symbol node ptr	*/
  1   170 			/* return:	(output)	compare bit		*/
  1   171 
  1   172 declare	offset_adder	entry(pointer,fixed binary(31),fixed binary(3),bit(1) aligned,
  1   173 			      pointer,fixed binary(31),fixed binary(3),bit(1) aligned,bit(1));
  1   174 			/* parameter 1:	(in/out)	tree pointer		*/
  1   175 			/* parameter 2:	(in/out)	constant size		*/
  1   176 			/* parameter 3:	(in/out)	units			*/
  1   177 			/* parameter 4:	(in/out) 	ON if units ^= word_, but tree in words	*/
  1   178 			/* parameter 5:	(input)	tree pointer		*/
  1   179 			/* parameter 6:	(input)	constant size		*/
  1   180 			/* parameter 7:	(input)	units			*/
  1   181 			/* parameter 8:	(input)	ON if units ^= word_, but tree in words	*/
  1   182 			/* parameter 9:	(input)	ON if should not improve units	*/
  1   183 
  1   184 declare	operator_semantics	entry(pointer,pointer,pointer,bit(36) aligned)
  1   185 			returns(pointer);
  1   186 			/* parameter 1:	(input)	block node pointer		*/
  1   187 			/* parameter 2:	(input)	statement node pointer	*/
  1   188 			/* parameter 3:	(input)	tree pointer		*/
  1   189 			/* parameter 4:	(in/out)	context			*/
  1   190 			/* return:	(output)	tree pointer		*/
  1   191 
  1   192 declare	propagate_bit	entry(pointer,fixed binary(15));
  1   193 			/* parameter 1:	(input)	symbol node pointer		*/
  1   194 			/* parameter 2:	(input)	attribute number		*/
  1   195 
  1   196 declare	semantic_translator$call_es entry(pointer,pointer,pointer,label,bit(1) aligned)
  1   197 			returns(pointer);
  1   198 			/* parameter 1:	(input)	block ptr	*/
  1   199 			/* parameter 2:	(input)	statement ptr	*/
  1   200 			/* parameter 3:	(input)	tree ptr	*/
  1   201 			/* parameter 4:	(input)	failure label	*/
  1   202 			/* parameter 5:	(input)	"1"b -- convert to integer	*/
  1   203 			/* return:	(output)	tree ptr		*/
  1   204 
  1   205 declare	simplify_expression	entry(pointer,fixed bin,bit(1)aligned);
  1   206 			/* parameter 1:	(in/out)	tree pointer		*/
  1   207 			/* parameter 2:	(output)	value of constant, if the entire tree
  1   208*						is simplified		*/
  1   209 			/* parameter 3:	(output)	bit indicating if the tree has
  1   210*						been simplified		*/
  1   211 
  1   212 declare	simplify_offset	entry(pointer,bit(36) aligned);
  1   213 			/* parameter 1:	(input)	reference node pointer	*/
  1   214 			/* parameter 2:	(input)	context			*/
  1   215 
  1   216 declare	subscripter	entry(pointer,pointer,pointer,pointer,pointer)
  1   217 			returns(pointer);
  1   218 			/* parameter 1:	(input)	block node pointer		*/
  1   219 			/* parameter 2:	(input)	statement node pointer	*/
  1   220 			/* parameter 3:	(input)	tree pointer		*/
  1   221 			/* parameter 4:	(in/out)	subscript list pointer	*/
  1   222 			/* parameter 5:	(input)	symbol node pointer		*/
  1   223 			/* return:	(output)	reference node pointer	*/
  1   224 
  1   225 declare	validate		entry(pointer);
  1   226 			/* parameter 1:	(input)	symbol node pointer		*/
  1   227 
  2     1 /****^  *********************************************************
  2     2*        *                                                       *
  2     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  2     4*        *                                                       *
  2     5*        ********************************************************* */
  2     6 
  2     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  2     8 
  2     9 
  2    10 /****^  HISTORY COMMENTS:
  2    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  2    12*     install(89-07-31,MR12.3-1066):	
  2    13*     Removed the obsolete parameter source_line from the dcl of error_().
  2    14*                                                   END HISTORY COMMENTS */
  2    15 
  2    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  2    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  2    18* */
  2    19 
  2    20 declare	adjust_count	entry(pointer);
  2    21 			/* parameter 1:	(input)	any node pointer		*/
  2    22 
  2    23 declare	bindec		entry(fixed bin(31)) reducible
  2    24 			returns(character(12) aligned);
  2    25 			/* parameter 1:	(input)	bin value			*/
  2    26 			/* return:	(output)	character value with blanks	*/
  2    27 
  2    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  2    29 			returns(character(12) aligned varying);
  2    30 			/* parameter 1:	(input)	binary value		*/
  2    31 			/* return:	(output)	char value without blanks	*/
  2    32 
  2    33 declare	binoct		entry(fixed bin(31)) reducible
  2    34 			returns(char(12) aligned);
  2    35 			/* parameter 1:	(input)	binary value		*/
  2    36 			/* return:	(output)	char value with blanks	*/
  2    37 
  2    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  2    39 			returns(char(12) aligned);
  2    40 			/* parameter 1:	(input)	binary value		*/
  2    41 			/* return:	(output)	right-aligned char value	*/
  2    42 
  2    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  2    44 			returns(char(12) varying aligned);
  2    45 			/* parameter 1:	(input)	binary value		*/
  2    46 			/* returns:	(output)	char value without blanks	*/
  2    47 
  2    48 declare	compare_expression	entry(pointer,pointer) reducible
  2    49 			returns(bit(1) aligned);
  2    50 			/* parameter 1:	(input)	any node pointer		*/
  2    51 			/* parameter 2:	(input)	any node pointer		*/
  2    52 			/* return:	(output)	compare bit		*/
  2    53 
  2    54 declare	constant_length	entry (pointer, fixed bin (71))
  2    55 			returns (bit (1) aligned);
  2    56 			/* parameter 1:	(input)	reference node pointer	*/
  2    57 			/* parameter 2:	(input)	value of constant length	*/
  2    58 			/* return:	(output)	"1"b if constant length	*/
  2    59 
  2    60 declare	convert		entry(pointer,bit(36) aligned)
  2    61 			returns(pointer);
  2    62 			/* parameter 1:	(input)	any node pointer		*/
  2    63 			/* parameter 2:	(input)	target type		*/
  2    64 			/* return:	(output)	target value tree pointer	*/
  2    65 
  2    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  2    67 			returns(pointer);
  2    68 			/* parameter 1:	(input)	any node pointer		*/
  2    69 			/* parameter 2:	(input)	target type		*/
  2    70 			/* return:	(output)	target value tree pointer	*/
  2    71 
  2    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  2    73 			returns(pointer);
  2    74 			/* parameter 1:	(input)	any node pointer		*/
  2    75 			/* parameter 2:	(input)	target type		*/
  2    76 			/* return:	(output)	target value tree pointer	*/
  2    77 
  2    78 declare	convert$validate	entry(pointer,pointer);
  2    79 			/* parameter 1:	(input)	source value tree pointer	*/
  2    80 			/* parameter 2:	(input)	target reference node pointer	*/
  2    81 
  2    82 declare	convert$to_target_fb entry(pointer,pointer)
  2    83 			returns(pointer);
  2    84 			/* parameter 1:	(input)	source value tree pointer	*/
  2    85 			/* parameter 2:	(input)	target reference node pointer	*/
  2    86 			/* return:	(output)	target value tree pointer	*/
  2    87 
  2    88 declare	convert$to_target	entry(pointer,pointer)
  2    89 			returns(pointer);
  2    90 			/* parameter 1:	(input)	source value tree pointer	*/
  2    91 			/* parameter 2:	(input)	target reference node pointer	*/
  2    92 			/* return:	(output)	target value tree pointer	*/
  2    93 
  2    94 declare	copy_expression	entry(pointer unaligned)
  2    95 			returns(pointer);
  2    96 			/* parameter 1:	(input)	any node pointer		*/
  2    97 			/* return:	(output)	any node pointer		*/
  2    98 
  2    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  2   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  2   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  2   102 
  2   103 declare	copy_unique_expression entry(pointer)
  2   104 			returns(pointer);
  2   105 			/* parameter 1:	(input)	any node pointer		*/
  2   106 			/* return:	(output)	any node pointer		*/
  2   107 
  2   108 declare	create_array	entry()
  2   109 			returns(pointer);
  2   110 			/* return:	(output)	array node pointer		*/
  2   111 
  2   112 declare	create_block	entry(bit(9) aligned,pointer)
  2   113 			returns(pointer);
  2   114 			/* parameter 1:	(input)	block type		*/
  2   115 			/* parameter 2:	(input)	father block node pointer	*/
  2   116 			/* return:	(output)	block node pointer		*/
  2   117 
  2   118 declare	create_bound	entry()
  2   119 			returns(pointer);
  2   120 			/* return:	(output)	bound node pointer		*/
  2   121 
  2   122 declare	create_context	entry(pointer,pointer)
  2   123 			returns(pointer);
  2   124 			/* parameter 1:	(input)	block node pointer		*/
  2   125 			/* parameter 2:	(input)	token pointer		*/
  2   126 			/* return:	(output)	context node pointer	*/
  2   127 
  2   128 declare	create_cross_reference entry()
  2   129 			returns(pointer);
  2   130 			/* return:	(output)	cross reference node pointer	*/
  2   131 
  2   132 declare	create_default	entry
  2   133 			returns(pointer);
  2   134 			/* return:	(output)	default node pointer	*/
  2   135 
  2   136 declare	create_identifier	entry()
  2   137 			returns(pointer);
  2   138 			/* return:	(output)	token node pointer		*/
  2   139 
  2   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  2   141 			returns(pointer);
  2   142 			/* parameter 1:	(input)	block node pointer		*/
  2   143 			/* parameter 2:	(input)	token node pointer		*/
  2   144 			/* parameter 3:	(input)	declare type		*/
  2   145 			/* return:	(output)	label node pointer		*/
  2   146 
  2   147 declare	create_list	entry(fixed bin(15))
  2   148 			returns(pointer);
  2   149 			/* parameter 1:	(input)	number of list elements	*/
  2   150 			/* return:	(output)	list node pointer		*/
  2   151 
  2   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  2   153 			returns(pointer);
  2   154 			/* parameter 1:	(input)	operator type		*/
  2   155 			/* parameter 2:	(input)	number of operands		*/
  2   156 			/* return:	(output)	operator node pointer	*/
  2   157 
  2   158 declare	create_reference	entry(pointer)
  2   159 			returns(pointer);
  2   160 			/* parameter 1:	(input)	symbol node pointer		*/
  2   161 			/* return:	(output)	reference node pointer	*/
  2   162 
  2   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   164 			returns(pointer);
  2   165 			/* parameter 1:	(input)	statement type		*/
  2   166 			/* parameter 2:	(input)	block node pointer		*/
  2   167 			/* parameter 3:	(input)	label node pointer		*/
  2   168 			/* parameter 4:	(input)	conditions		*/
  2   169 			/* return:	(output)	statement node pointer	*/
  2   170 
  2   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   172 			returns(pointer);
  2   173 			/* parameter 1:	(input)	statement type		*/
  2   174 			/* parameter 2:	(input)	block node pointer		*/
  2   175 			/* parameter 3:	(input)	label node pointer		*/
  2   176 			/* parameter 4:	(input)	conditions		*/
  2   177 			/* return:	(output)	statement node pointer	*/
  2   178 
  2   179 declare	create_storage	entry(fixed bin(15))
  2   180 			returns(pointer);
  2   181 			/* parameter 1:	(input)	number of words		*/
  2   182 			/* return:	(output)	storage block pointer	*/
  2   183 
  2   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  2   185 			returns(pointer);
  2   186 			/* parameter 1:	(input)	block node pointer		*/
  2   187 			/* parameter 2:	(input)	token node pointer		*/
  2   188 			/* parameter 3:	(input)	declare type		*/
  2   189 			/* return:	(output)	symbol node pointer		*/
  2   190 
  2   191 declare	create_token	entry (character (*), bit (9) aligned)
  2   192 			returns (ptr);
  2   193 			/* parameter 1:	(input)	token string		*/
  2   194 			/* parameter 2:	(input)	token type		*/
  2   195 			/* return:	(output)	token node ptr		*/
  2   196 
  2   197 declare	create_token$init_hash_table entry ();
  2   198 
  2   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  2   200 			returns (ptr);
  2   201 			/* parameter 1:	(input)	token string		*/
  2   202 			/* parameter 2:	(input)	token type		*/
  2   203 			/* parameter 3:	(input)	protected flag		*/
  2   204 			/* return:	(output)	token node ptr		*/
  2   205 
  2   206 declare	decbin		entry(character(*) aligned) reducible
  2   207 			returns(fixed bin(31));
  2   208 			/* parameter 1:	(input)	decimal character string	*/
  2   209 			/* return:	(output)	binary value		*/
  2   210 
  2   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  2   212 			returns(pointer);
  2   213 			/* parameter 1:	(input)	value			*/
  2   214 			/* parameter 2:	(input)	type			*/
  2   215 			/* parameter 3:	(input)	size			*/
  2   216 			/* parameter 4:	(input)	scale			*/
  2   217 			/* return:	(output)	reference node pointer	*/
  2   218 
  2   219 declare	declare_constant$bit entry(bit(*) aligned)
  2   220 			returns(pointer);
  2   221 			/* parameter 1:	(input)	bit			*/
  2   222 			/* return:	(output)	reference node pointer	*/
  2   223 
  2   224 declare	declare_constant$char entry(character(*) aligned)
  2   225 			returns(pointer);
  2   226 			/* parameter 1:	(input)	character			*/
  2   227 			/* return:	(output)	reference node pointer	*/
  2   228 
  2   229 declare	declare_constant$desc entry(bit(*) aligned)
  2   230 			returns(pointer);
  2   231 			/* parameter 1:	(input)	descriptor bit value	*/
  2   232 			/* return:	(output)	reference node pointer	*/
  2   233 
  2   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  2   235 			returns(pointer);
  2   236 			/* parameter 1:	(input)	integer			*/
  2   237 			/* return:	(output)	reference node pointer	*/
  2   238 
  2   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   240 			returns(pointer);
  2   241 			/* parameter 1:	(input)	block node pointer		*/
  2   242 			/* parameter 2:	(input)	statement node pointer	*/
  2   243 			/* parameter 3:	(input)	symbol node pointer		*/
  2   244 			/* parameter 4:	(input)	loc pointer		*/
  2   245 			/* parameter 5:	(input)	array descriptor bit
  2   246*						cross_section bit	*/
  2   247 			/* return:	(output)	reference node pointer	*/
  2   248 
  2   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   250 			returns(pointer);
  2   251 			/* parameter 1:	(input)	block node pointer	*/
  2   252 			/* parameter 2:	(input)	statement node pointer 	*/
  2   253 			/* parameter 3:	(input)	symbol node pointer	*/
  2   254 			/* parameter 4:	(input)	loc pointer	*/
  2   255 			/* parameter 5:	(input)	array descriptor bit
  2   256*						cross_section bit	*/
  2   257 			/* return:	(output)	reference node pointer	*/
  2   258 
  2   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   260 			returns(pointer);
  2   261 			/* parameter 1:	(input)	block node pointer		*/
  2   262 			/* parameter 2:	(input)	statement node pointer	*/
  2   263 			/* parameter 3:	(input)	symbol node pointer		*/
  2   264 			/* parameter 4:	(input)	loc pointer		*/
  2   265 			/* parameter 5:	(input)	array descriptor bit
  2   266*						cross_section bit	*/
  2   267 			/* return:	(output)	reference node pointer	*/
  2   268 
  2   269 declare	declare_integer	entry(pointer)
  2   270 			returns(pointer);
  2   271 			/* parameter 1:	(input)	block node pointer		*/
  2   272 			/* return:	(output)	reference node pointer 	*/
  2   273 
  2   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  2   275 			/* parameter 1:	(input)	picture string		*/
  2   276 			/* parameter 2:	(input)	symbol node pointer		*/
  2   277 			/* parameter 3:	(output)	error code, if any		*/
  2   278 
  2   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  2   280 			returns(pointer);
  2   281 			/* parameter 1:	(input)	picture string		*/
  2   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  2   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  2   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  2   285 			/* return:	(output)	reference node pointer	*/
  2   286 
  2   287 declare	declare_pointer	entry(pointer)
  2   288 			returns(pointer);
  2   289 			/* parameter 1:	(input)	block node pointer		*/
  2   290 			/* return:	(output)	reference node pointer	*/
  2   291 
  2   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  2   293 			returns(pointer);
  2   294 			/* parameter 1:	(input)	type			*/
  2   295 			/* parameter 2:	(input)	precision			*/
  2   296 			/* parameter 3:	(input)	scale			*/
  2   297 			/* parameter 4:	(input)	length			*/
  2   298 			/* return:	(output)	reference node pointer	*/
  2   299 
  2   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  2   301 			returns(char(120) varying);
  2   302 			/* parameter 1:	(input)	node pointer		*/
  2   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   304 			/* return:	(output)	source line id		*/
  2   305 
  2   306 declare	decode_source_id	entry(
  3     1 			1 structure unaligned,
  3     2 			  2 /* file_number */	bit(8),
  3     3 			  2 /* line_number */	bit(14),
  3     4 			  2 /* stmt_number */	bit(5),
  2   307 
  2   308 			bit(1) aligned)
  2   309 			returns(char(120) varying);
  2   310 			/* parameter 1:	(input)	source id			*/
  2   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   312 			/* return:	(output)	source line id		*/
  2   313 
  2   314 declare	error		entry(fixed bin(15),pointer,pointer);
  2   315 			/* parameter 1:	(input)	error number		*/
  2   316 			/* parameter 2:	(input)	statement node pointer or null*/
  2   317 			/* parameter 3:	(input)	token node pointer 		*/
  2   318 
  2   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  2   320 			/* parameter 1:	(input)	error number		*/
  2   321 			/* parameter 2:	(input)	statement node pointer or null*/
  2   322 			/* parameter 3:	(input)	token node pointer 		*/
  2   323 
  2   324 declare	error_		entry(fixed bin(15),
  4     1 			1 structure unaligned,
  4     2 			  2 /* file_number */	bit(8),
  4     3 			  2 /* line_number */	bit(14),
  4     4 			  2 /* stmt_number */	bit(5),
  2   325 
  2   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  2   327 			/* parameter 1:	(input)	error number		*/
  2   328 			/* parameter 2:	(input)	statement id		*/
  2   329 			/* parameter 3:	(input)	any node pointer		*/
  2   330 			/* parameter 4:	(input)	source segment		*/
  2   331 			/* parameter 5:	(input)	source starting character	*/
  2   332 			/* parameter 6:	(input)	source length		*/
  2   333 
  2   334 declare	error_$no_text	entry(fixed bin(15),
  5     1 			1 structure unaligned,
  5     2 			  2 /* file_number */	bit(8),
  5     3 			  2 /* line_number */	bit(14),
  5     4 			  2 /* stmt_number */	bit(5),
  2   335 
  2   336 			pointer);
  2   337 			/* parameter 1:	(input)	error number		*/
  2   338 			/* parameter 2:	(input)	statement id		*/
  2   339 			/* parameter 3:	(input)	any node pointer		*/
  2   340 
  2   341 declare	error_$initialize_error entry();
  2   342 
  2   343 declare	error_$finish	entry();
  2   344 
  2   345 declare	free_node		entry(pointer);
  2   346 			/* parameter 1:	any node pointer			*/
  2   347 
  2   348 declare	get_array_size	entry(pointer,fixed bin(3));
  2   349 			/* parameter 1:	(input)	symbol node pointer		*/
  2   350 			/* parameter 2:	(input)	units			*/
  2   351 
  2   352 declare	get_size		entry(pointer);
  2   353 			/* parameter 1:	(input)	symbol node pointer		*/
  2   354 
  2   355 declare	merge_attributes	external entry(pointer,pointer)
  2   356 			returns(bit(1) aligned);
  2   357 			/* parameter 1:	(input)	target symbol node pointer */
  2   358 			/* parameter 2:	(input)	source symbol node pointer */
  2   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  2   360 
  2   361 declare	optimizer		entry(pointer);
  2   362 			/* parameter 1:	(input)	root pointer		*/
  2   363 
  2   364 declare	parse_error	entry(fixed bin(15),pointer);
  2   365 			/* parameter 1:	(input)	error number		*/
  2   366 			/* parameter 2:	(input)	any node pointer		*/
  2   367 
  2   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  2   369 			/* parameter 1:	(input)	error number		*/
  2   370 			/* parameter 2:	(input)	any node pointer		*/
  2   371 
  2   372 declare	pl1_error_print$write_out
  2   373 			entry(fixed bin(15),
  6     1 			1 structure unaligned,
  6     2 			  2 /* file_number */	bit(8),
  6     3 			  2 /* line_number */	bit(14),
  6     4 			  2 /* stmt_number */	bit(5),
  2   374 
  2   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  2   376 			/* parameter 1:	(input)	error number		*/
  2   377 			/* parameter 2:	(input)	statement identification	*/
  2   378 			/* parameter 3:	(input)	any node pointer		*/
  2   379 			/* parameter 4:	(input)	source segment		*/
  2   380 			/* parameter 5:	(input)	source character index	*/
  2   381 			/* parameter 6:	(input)	source length		*/
  2   382 			/* parameter 7:	(input)	source line		*/
  2   383 
  2   384 declare	pl1_error_print$listing_segment
  2   385 			entry(fixed bin(15),
  7     1 			1 structure unaligned,
  7     2 			  2 /* file_number */	bit(8),
  7     3 			  2 /* line_number */	bit(14),
  7     4 			  2 /* stmt_number */	bit(5),
  2   386 
  2   387 			pointer);
  2   388 			/* parameter 1:	(input)	error number		*/
  2   389 			/* parameter 2:	(input)	statement identification	*/
  2   390 			/* parameter 3:	(input)	token node pointer		*/
  2   391 
  2   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  2   393 			/* parameter 1:	(input)	string			*/
  2   394 
  2   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  2   396 			/* parameter 1:	(input)	string			*/
  2   397 
  2   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  2   399 			/* parameter 1:	(input)	string			*/
  2   400 			/* parameter 2:	(input)	string length or 0		*/
  2   401 
  2   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  2   403 			/* parameter 1:	(input)	string			*/
  2   404 			/* parameter 2:	(input)	string length or 0		*/
  2   405 
  2   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  2   407 			/* parameter 1:	(input)	string pointer		*/
  2   408 			/* parameter 2:	(input)	string size		*/
  2   409 
  2   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  2   411 			/* parameter 1:	(input)	string pointer		*/
  2   412 			/* parameter 2:	(input)	string length or 0		*/
  2   413 
  2   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  2   415 			/* parameter 1:	(input)	string			*/
  2   416 			/* parameter 2:	(input)	length			*/
  2   417 
  2   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  2   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  2   420 			/* parameter 2:	(input)	line number		*/
  2   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  2   422 			/* parameter 4:	(input)	number of chars to copy	*/
  2   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  2   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  2   425 
  2   426 declare	refer_extent	entry(pointer,pointer);
  2   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  2   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  2   429 
  2   430 declare	reserve$clear	entry()
  2   431 			returns(pointer);
  2   432 			/* return:	(output)	pointer			*/
  2   433 
  2   434 declare	reserve$declare_lib	entry(fixed bin(15))
  2   435 			returns(pointer);
  2   436 			/* parameter 1:	(input)	builtin function number	*/
  2   437 			/* return:	(output)	pointer			*/
  2   438 
  2   439 declare	reserve$read_lib	entry(fixed bin(15))
  2   440 			returns(pointer);
  2   441 			/* parameter 1:	(input)	builtin function number	*/
  2   442 			/* return:	(output)	pointer			*/
  2   443 
  2   444 declare	semantic_translator	entry();
  2   445 
  2   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  2   447 			/* parameter 1:	(input)	error number		*/
  2   448 			/* parameter 2:	(input)	any node pointer		*/
  2   449 
  2   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  2   451 			/* parameter 1:	(input)	error number		*/
  2   452 			/* parameter 2:	(input)	any node pointer		*/
  2   453 
  2   454 declare	share_expression	entry(ptr)
  2   455 			returns(ptr);
  2   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  2   457 			/* return:	(output)	tree pointer or null	*/
  2   458 
  2   459 declare	token_to_binary	entry(ptr) reducible
  2   460 			returns(fixed bin(31));
  2   461 			/* parameter 1:	(input)	token node pointer		*/
  2   462 			/* return:	(output)	converted binary value	*/
  2   463 
  2   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
  1   228 
  1   229 /* END INCLUDE FILE ... semant.incl.pl1 */
       24 
       25 
       26 
  8     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
  8     2 
  8     3 dcl	1 symbol			based aligned,
  8     4 	2 node_type		bit(9) unal,
  8     5 	2 source_id		structure unal,
  8     6 	  3 file_number		bit(8),
  8     7 	  3 line_number		bit(14),
  8     8 	  3 statement_number	bit(5),
  8     9 	2 location		fixed(18) unal unsigned,
  8    10 	2 allocated		bit(1) unal,
  8    11 	2 dcl_type		bit(3) unal,
  8    12 	2 reserved		bit(6) unal,
  8    13 	2 pix			unal,
  8    14 	  3 pic_fixed		bit(1) unal,
  8    15 	  3 pic_float		bit(1) unal,
  8    16 	  3 pic_char		bit(1) unal,
  8    17 	  3 pic_scale		fixed(7) unal,
  8    18 	  3 pic_size		fixed(7) unal,
  8    19 	2 level			fixed(8) unal,
  8    20 	2 boundary		fixed(3) unal,
  8    21 	2 size_units		fixed(3) unal,
  8    22 	2 scale			fixed(7) unal,
  8    23 	2 runtime			bit(18) unal,
  8    24 	2 runtime_offset		bit(18) unal,
  8    25 	2 block_node		ptr unal,
  8    26 	2 token			ptr unal,
  8    27 	2 next			ptr unal,
  8    28 	2 multi_use		ptr unal,
  8    29 	2 cross_references		ptr unal,
  8    30 	2 initial			ptr unal,
  8    31 	2 array			ptr unal,
  8    32 	2 descriptor		ptr unal,
  8    33 	2 equivalence		ptr unal,
  8    34 	2 reference		ptr unal,
  8    35 	2 general			ptr unal,
  8    36 	2 father			ptr unal,
  8    37 	2 brother			ptr unal,
  8    38 	2 son			ptr unal,
  8    39 	2 word_size		ptr unal,
  8    40 	2 bit_size		ptr unal,
  8    41 	2 dcl_size		ptr unal,
  8    42 	2 symtab_size		ptr unal,
  8    43 	2 c_word_size		fixed(24),
  8    44 	2 c_bit_size		fixed(24),
  8    45 	2 c_dcl_size		fixed(24),
  8    46 
  8    47 	2 attributes		structure aligned,
  8    48 	  3 data_type		structure unal,
  8    49 	    4 structure		bit(1) ,
  8    50 	    4 fixed		bit(1),
  8    51 	    4 float		bit(1),
  8    52 	    4 bit			bit(1),
  8    53 	    4 char		bit(1),
  8    54 	    4 ptr			bit(1),
  8    55 	    4 offset		bit(1),
  8    56 	    4 area		bit(1),
  8    57 	    4 label		bit(1),
  8    58 	    4 entry		bit(1),
  8    59 	    4 file		bit(1),
  8    60 	    4 arg_descriptor	bit(1),
  8    61 	    4 storage_block		bit(1),
  8    62 	    4 explicit_packed	bit(1), /* options(packed) */
  8    63 	    4 condition		bit(1),
  8    64 	    4 format		bit(1),
  8    65 	    4 builtin		bit(1),
  8    66 	    4 generic		bit(1),
  8    67 	    4 picture		bit(1),
  8    68 
  8    69 	  3 misc_attributes		structure unal,
  8    70 	    4 dimensioned		bit(1),
  8    71 	    4 initialed		bit(1),
  8    72 	    4 aligned		bit(1),
  8    73 	    4 unaligned		bit(1),
  8    74 	    4 signed		bit(1),
  8    75 	    4 unsigned		bit(1),
  8    76 	    4 precision		bit(1),
  8    77 	    4 varying		bit(1),
  8    78 	    4 local		bit(1),
  8    79 	    4 decimal		bit(1),
  8    80 	    4 binary		bit(1),
  8    81 	    4 real		bit(1),
  8    82 	    4 complex		bit(1),
  8    83 	    4 variable		bit(1),
  8    84 	    4 reducible		bit(1),
  8    85 	    4 irreducible		bit(1),
  8    86 	    4 returns		bit(1),
  8    87 	    4 position		bit(1),
  8    88 	    4 internal		bit(1),
  8    89 	    4 external		bit(1),
  8    90 	    4 like		bit(1),
  8    91 	    4 member		bit(1),
  8    92 	    4 non_varying		bit(1),
  8    93 	    4 options		bit(1),
  8    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
  8    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
  8    96 
  8    97 	  3 storage_class		structure unal,
  8    98 	    4 auto		bit(1),
  8    99 	    4 based		bit(1),
  8   100 	    4 static		bit(1),
  8   101 	    4 controlled		bit(1),
  8   102 	    4 defined		bit(1),
  8   103 	    4 parameter		bit(1),
  8   104 	    4 param_desc		bit(1),
  8   105 	    4 constant		bit(1),
  8   106 	    4 temporary		bit(1),
  8   107 	    4 return_value		bit(1),
  8   108 
  8   109 	  3 file_attributes		structure unal,
  8   110 	    4 print		bit(1),
  8   111 	    4 input		bit(1),
  8   112 	    4 output		bit(1),
  8   113 	    4 update		bit(1),
  8   114 	    4 stream		bit(1),
  8   115 	    4 reserved_1		bit(1),
  8   116 	    4 record		bit(1),
  8   117 	    4 sequential		bit(1),
  8   118 	    4 direct		bit(1),
  8   119 	    4 interactive		bit(1),		/* env(interactive) */
  8   120 	    4 reserved_2		bit(1),
  8   121 	    4 reserved_3		bit(1),
  8   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
  8   123 	    4 keyed		bit(1),
  8   124 	    4 reserved_4		bit(1),
  8   125 	    4 environment		bit(1),
  8   126 
  8   127 	  3 compiler_developed	structure unal,
  8   128 	    4 aliasable		bit(1),
  8   129 	    4 packed		bit(1),
  8   130 	    4 passed_as_arg		bit(1),
  8   131 	    4 allocate		bit(1),
  8   132 	    4 set			bit(1),
  8   133 	    4 exp_extents		bit(1),
  8   134 	    4 refer_extents		bit(1),
  8   135 	    4 star_extents		bit(1),
  8   136 	    4 isub		bit(1),
  8   137 	    4 put_in_symtab		bit(1),
  8   138 	    4 contiguous		bit(1),
  8   139 	    4 put_data		bit(1),
  8   140 	    4 overlayed		bit(1),
  8   141 	    4 error		bit(1),
  8   142 	    4 symtab_processed	bit(1),
  8   143 	    4 overlayed_by_builtin	bit(1),
  8   144 	    4 defaulted		bit(1),
  8   145 	    4 connected		bit(1);
  8   146 
  8   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
       27 
       28 
  9     1 dcl	1 label			based aligned,
  9     2 	2 node_type		bit(9) unaligned,
  9     3 	2 source_id		structure unaligned,
  9     4 	  3 file_number		bit(8),
  9     5 	  3 line_number		bit(14),
  9     6 	  3 statement_number	bit(5),
  9     7 	2 location		fixed(17) unaligned,
  9     8 	2 allocated		bit(1) unaligned,
  9     9 	2 dcl_type		bit(3) unaligned,
  9    10 	2 reserved		bit(29) unaligned,
  9    11 	2 array			bit(1) unaligned,
  9    12 	2 used_as_format		bit(1) unaligned,
  9    13 	2 used_in_goto		bit(1) unaligned,
  9    14 	2 symbol_table		bit(18) unaligned,
  9    15 	2 low_bound		fixed(17) unaligned,
  9    16 	2 high_bound		fixed(17) unaligned,
  9    17 	2 block_node		ptr unaligned,
  9    18 	2 token			ptr unaligned,
  9    19 	2 next			ptr unaligned,
  9    20 	2 multi_use		ptr unaligned,
  9    21 	2 cross_reference		ptr unaligned,
  9    22 	2 statement		ptr unaligned;
       29 
       30 
 10     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
 10     2 
 10     3 dcl	1 reference		based aligned,
 10     4 	2 node_type		bit(9) unaligned,
 10     5 	2 array_ref		bit(1) unaligned,
 10     6 	2 varying_ref		bit(1) unaligned,
 10     7 	2 shared			bit(1) unaligned,
 10     8 	2 put_data_sw		bit(1) unaligned,
 10     9 	2 processed		bit(1) unaligned,
 10    10 	2 units			fixed(3) unaligned,
 10    11 	2 ref_count		fixed(17) unaligned,
 10    12 	2 c_offset		fixed(24),
 10    13 	2 c_length		fixed(24),
 10    14 	2 symbol			ptr unaligned,
 10    15 	2 qualifier		ptr unaligned,
 10    16 	2 offset			ptr unaligned,
 10    17 	2 length			ptr unaligned,
 10    18 	2 subscript_list		ptr unaligned,
 10    19 						/* these fields are used by the 645 code generator */
 10    20 	2 address			structure unaligned,
 10    21 	  3 base			bit(3),
 10    22 	  3 offset		bit(15),
 10    23 	  3 op			bit(9),
 10    24 	  3 no_address		bit(1),
 10    25 	  3 inhibit		bit(1),
 10    26 	  3 ext_base		bit(1),
 10    27 	  3 tag			bit(6),
 10    28 	2 info			structure unaligned,
 10    29 	  3 address_in		structure,
 10    30 	    4 b			dimension(0:7) bit(1),
 10    31 	    4 storage		bit(1),
 10    32 	  3 value_in		structure,
 10    33 	    4 a			bit(1),
 10    34 	    4 q			bit(1),
 10    35 	    4 aq			bit(1),
 10    36 	    4 string_aq		bit(1),
 10    37 	    4 complex_aq		bit(1),
 10    38 	    4 decimal_aq		bit(1),
 10    39 	    4 b			dimension(0:7) bit(1),
 10    40 	    4 storage		bit(1),
 10    41 	    4 indicators		bit(1),
 10    42 	    4 x			dimension(0:7) bit(1),
 10    43 	  3 other			structure,
 10    44 	    4 big_offset		bit(1),
 10    45 	    4 big_length		bit(1),
 10    46 	    4 modword_in_offset	bit(1),
 10    47 	2 data_type		fixed(5) unaligned,
 10    48 	2 bits			structure unaligned,
 10    49 	  3 padded_ref		bit(1),
 10    50 	  3 aligned_ref		bit(1),
 10    51 	  3 long_ref		bit(1),
 10    52 	  3 forward_ref		bit(1),
 10    53 	  3 ic_ref		bit(1),
 10    54 	  3 temp_ref		bit(1),
 10    55 	  3 defined_ref		bit(1),
 10    56 	  3 evaluated		bit(1),
 10    57 	  3 allocate		bit(1),
 10    58 	  3 allocated		bit(1),
 10    59 	  3 aliasable		bit(1),
 10    60 	  3 even			bit(1),
 10    61 	  3 perm_address		bit(1),
 10    62 	  3 aggregate		bit(1),
 10    63 	  3 hit_zero		bit(1),
 10    64 	  3 dont_save		bit(1),
 10    65 	  3 fo_in_qual		bit(1),
 10    66 	  3 hard_to_load		bit(1),
 10    67 	2 relocation		bit(12) unaligned,
 10    68 	2 more_bits		structure unaligned,
 10    69 	  3 substr		bit(1),
 10    70 	  3 padded_for_store_ref	bit(1),
 10    71 	  3 aligned_for_store_ref	bit(1),
 10    72 	  3 mbz			bit(15),
 10    73 	2 store_ins		bit(18) unaligned;
 10    74 
 10    75 /* END INCLUDE FILE ... reference.incl.pl1 */
       31 
 11     1 /* BEGIN INCLUDE FILE ... semantic_bits.incl.pl1 */
 11     2 
 11     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
 11     4 
 11     5 dcl	context aligned bit(36),
 11     6 	this_context aligned bit(36);
 11     7 
 11     8 dcl	1 def_context		aligned based(addr(context)),
 11     9 	2 aggregate		unaligned bit(1),
 11    10 	2 arg_list		unaligned bit(1),
 11    11 	2 left_side		unaligned bit(1),
 11    12 	2 return			unaligned bit(1),
 11    13 	2 evaluate_offset		unaligned bit(1),
 11    14 	2 top			unaligned bit(1),
 11    15 	2 RHS_aggregate		unaligned bit(1),
 11    16 	2 return_from_empty		unaligned bit(1),
 11    17 	2 ignore_based		unaligned bit(1),
 11    18 	2 ext_param		unaligned bit(1),
 11    19 	2 cross_section		unaligned bit(1),
 11    20 	2 string_unspec		unaligned bit(1),
 11    21 	2 f_offset_to_be_added	unaligned bit(1),
 11    22 	2 suppress_cross_ref	unaligned bit(1),
 11    23 	2 by_name_assignment	unaligned bit(1),
 11    24 	2 by_name_lookup		unaligned bit(1),
 11    25 	2 pad			unaligned bit(20);
 11    26 
 11    27 dcl	1 def_this_context		aligned like def_context based(addr(this_context));
 11    28 
 11    29 /* END INCLUDE FILE ... semantic_bits.incl.pl1 */
       32 
       33 
 12     1 /* BEGIN INCLUDE FILE ... block.incl.pl1 */
 12     2 /* Modified 22 Ocober 1980 by M. N. Davidoff to increase max block.number to 511 */
 12     3 /* format: style3,idind30 */
 12     4 
 12     5 declare	1 block			aligned based,
 12     6 	  2 node_type		bit (9) unaligned,
 12     7 	  2 source_id		structure unaligned,
 12     8 	    3 file_number		bit (8),
 12     9 	    3 line_number		bit (14),
 12    10 	    3 statement_number	bit (5),
 12    11 	  2 father		ptr unaligned,
 12    12 	  2 brother		ptr unaligned,
 12    13 	  2 son			ptr unaligned,
 12    14 	  2 declaration		ptr unaligned,
 12    15 	  2 end_declaration		ptr unaligned,
 12    16 	  2 default		ptr unaligned,
 12    17 	  2 end_default		ptr unaligned,
 12    18 	  2 context		ptr unaligned,
 12    19 	  2 prologue		ptr unaligned,
 12    20 	  2 end_prologue		ptr unaligned,
 12    21 	  2 main			ptr unaligned,
 12    22 	  2 end_main		ptr unaligned,
 12    23 	  2 return_values		ptr unaligned,
 12    24 	  2 return_count		ptr unaligned,
 12    25 	  2 plio_ps		ptr unaligned,
 12    26 	  2 plio_fa		ptr unaligned,
 12    27 	  2 plio_ffsb		ptr unaligned,
 12    28 	  2 plio_ssl		ptr unaligned,
 12    29 	  2 plio_fab2		ptr unaligned,
 12    30 	  2 block_type		bit (9) unaligned,
 12    31 	  2 prefix		bit (12) unaligned,
 12    32 	  2 like_attribute		bit (1) unaligned,
 12    33 	  2 no_stack		bit (1) unaligned,
 12    34 	  2 get_data		bit (1) unaligned,
 12    35 	  2 flush_at_call		bit (1) unaligned,
 12    36 	  2 processed		bit (1) unaligned,
 12    37 	  2 text_displayed		bit (1) unaligned,
 12    38 	  2 number		fixed bin (9) unsigned unaligned,
 12    39 	  2 free_temps		dimension (3) ptr,	/* these fields are used by the code generator */
 12    40 	  2 temp_list		ptr,
 12    41 	  2 entry_list		ptr,
 12    42 	  2 o_and_s		ptr,
 12    43 	  2 why_nonquick		aligned,
 12    44 	    3 auto_adjustable_storage bit (1) unaligned,
 12    45 	    3 returns_star_extents	bit (1) unaligned,
 12    46 	    3 stack_extended_by_args	bit (1) unaligned,
 12    47 	    3 invoked_by_format	bit (1) unaligned,
 12    48 	    3 format_statement	bit (1) unaligned,
 12    49 	    3 io_statements		bit (1) unaligned,
 12    50 	    3 assigned_to_entry_var	bit (1) unaligned,
 12    51 	    3 condition_statements	bit (1) unaligned,
 12    52 	    3 no_owner		bit (1) unaligned,
 12    53 	    3 recursive_call	bit (1) unaligned,
 12    54 	    3 options_non_quick	bit (1) unaligned,
 12    55 	    3 options_variable	bit (1) unaligned,
 12    56 	    3 never_referenced	bit (1) unaligned,
 12    57 	    3 pad_nonquick		bit (5) unaligned,
 12    58 	  2 prologue_flag		bit (1) unaligned,
 12    59 	  2 options_main		bit (1) unaligned,
 12    60 	  2 pad			bit (16) unaligned,
 12    61 	  2 number_of_entries	fixed bin (17),
 12    62 	  2 level			fixed bin (17),
 12    63 	  2 last_auto_loc		fixed bin (17),
 12    64 	  2 symbol_block		fixed bin (17),
 12    65 	  2 entry_info		fixed bin (18),
 12    66 	  2 enter			structure unaligned,
 12    67 	    3 start		fixed bin (17),
 12    68 	    3 end			fixed bin (17),
 12    69 	  2 leave			structure unaligned,
 12    70 	    3 start		fixed bin (17),
 12    71 	    3 end			fixed bin (17),
 12    72 	  2 owner			ptr;
 12    73 
 12    74 declare	max_block_number		fixed bin internal static options (constant) initial (511);
 12    75 
 12    76 /* END INCLUDE FILE ... block.incl.pl1 */
       34 
       35 
 13     1 /* ***********************************************************
 13     2*   *                                                         *
 13     3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
 13     4*   *                                                         *
 13     5*   *********************************************************** */
 13     6 /* BEGIN INCLUDE FILE ... statement.incl.pl1 */
 13     7 /* Internal interface of the PL/I compiler */
 13     8 
 13     9 dcl	1 statement		based aligned,
 13    10 	2 node_type		bit(9) unaligned,
 13    11 	2 source_id		structure unaligned,
 13    12 	  3 file_number		bit(8),
 13    13 	  3 line_number		bit(14),
 13    14 	  3 statement_number	bit(5),
 13    15 	2 next			ptr unaligned,
 13    16 	2 back			ptr unaligned,
 13    17 	2 root			ptr unaligned,
 13    18 	2 labels			ptr unaligned,
 13    19 	2 reference_list		ptr unaligned,
 13    20 	2 state_list		ptr unaligned,
 13    21 	2 reference_count		fixed(17) unaligned,
 13    22 	2 ref_count_copy		fixed(17) unaligned,
 13    23 	2 object			structure unaligned,
 13    24 	  3 start			fixed(17),
 13    25 	  3 finish		fixed(17),
 13    26 	2 source			structure unaligned,
 13    27 	  3 segment		fixed(11),
 13    28 	  3 start			fixed(23),
 13    29 	  3 length		fixed(11),
 13    30 	2 prefix			bit(12) unaligned,
 13    31 	2 optimized		bit(1) unaligned,
 13    32 	2 free_temps		bit(1) unaligned,
 13    33 	2 LHS_in_RHS		bit(1) unaligned,
 13    34 	2 statement_type		bit(9) unaligned,
 13    35 	2 bits			structure unaligned,
 13    36 	  3 processed		bit(1) unaligned,
 13    37 	  3 put_in_profile		bit(1) unaligned,
 13    38 	  3 generated		bit(1) unaligned,
 13    39 	  3 snap			bit(1) unaligned,
 13    40 	  3 system		bit(1) unaligned,
 13    41 	  3 irreducible		bit(1) unaligned,
 13    42 	  3 checked		bit(1) unaligned,
 13    43 	  3 save_temps		bit(1) unaligned,
 13    44 	  3 suppress_warnings	bit(1) unaligned,
 13    45 	  3 force_nonquick		bit(1) unaligned,
 13    46 	  3 expanded_by_name	bit(1) unaligned,
 13    47 	  3 begins_loop		bit(1) unaligned,
 13    48 	  3 pad			bit(24) unaligned;
 13    49 
 13    50 /* END INCLUDE FILE ... statement.incl.pl1 */
       36 
       37 
       38 
 14     1 /* BEGIN INCLUDE FILE ... token.incl.pl1 */
 14     2 
 14     3 dcl	1 token			based aligned,
 14     4 	2 node_type		bit(9) unaligned,
 14     5 	2 type			bit(9) unaligned,
 14     6 	2 loc			bit(18) unaligned,	/* symtab offset for identifiers, "p" flag for constants */
 14     7 	2 declaration		ptr unaligned,
 14     8 	2 next			ptr unaligned,
 14     9 	2 size			fixed(9),
 14    10 	2 string			char(n refer(token.size));
 14    11 
 14    12 /* END INCLUDE FILE ... token.incl.pl1 */
       39 
       40 
 15     1 /* BEGIN INCLUDE FILE ... list.incl.pl1 */
 15     2 
 15     3 /* Modified 26 June 81 by EBush to add max_list_elements */
 15     4 
 15     5 
 15     6 dcl	1 list		based aligned,
 15     7 	2 node_type	bit(9) unaligned,
 15     8 	2 reserved	bit(12) unaligned,
 15     9 	2 number		fixed(14) unaligned,
 15    10 	2 element		dimension(n refer(list.number)) ptr unaligned;
 15    11 
 15    12 dcl       max_list_elements   fixed bin(17) internal static options (constant)
 15    13 	                    init(16383);
 15    14 
 15    15 /* END INCLUDE FILE ... list.incl.pl1 */
       41 
       42 
 16     1 /* BEGIN INCLUDE FILE ... cross_reference.incl.pl1 */
 16     2 
 16     3 dcl	1 cross_reference		based aligned,
 16     4 	2 node_type		bit(9) unaligned,
 16     5 	2 source_id		structure unaligned,
 16     6 	  3 file_number		bit(8),
 16     7 	  3 line_number		bit(14),
 16     8 	  3 statement_number	bit(5),
 16     9 	2 next			ptr unaligned,
 16    10 	2 ref_type		structure unaligned,
 16    11 	  3 set_reference		bit(1),
 16    12 	  3 pad			bit(35);
 16    13 
 16    14 /* END INCLUDE FILE ... cross_reference.incl.pl1 */
       43 
       44 
 17     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
 17     2 
 17     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
 17     4 
 17     5 dcl (	block_node		initial("000000001"b),
 17     6 	statement_node		initial("000000010"b),
 17     7 	operator_node		initial("000000011"b),
 17     8 	reference_node		initial("000000100"b),
 17     9 	token_node		initial("000000101"b),
 17    10 	symbol_node		initial("000000110"b),
 17    11 	context_node		initial("000000111"b),
 17    12 	array_node		initial("000001000"b),
 17    13 	bound_node		initial("000001001"b),
 17    14 	format_value_node		initial("000001010"b),
 17    15 	list_node			initial("000001011"b),
 17    16 	default_node		initial("000001100"b),
 17    17 	machine_state_node		initial("000001101"b),
 17    18 	source_node		initial("000001110"b),
 17    19 	label_node		initial("000001111"b),
 17    20 	cross_reference_node	initial("000010000"b),
 17    21 	sf_par_node		initial("000010001"b),
 17    22 	temporary_node		initial("000010010"b),
 17    23 	label_array_element_node	initial("000010011"b),
 17    24 	by_name_agg_node		initial("000010100"b))
 17    25 				bit(9) internal static aligned options(constant);
 17    26 
 17    27 dcl	1 node			based aligned,
 17    28 	2 type			unal bit(9),
 17    29 	2 source_id		unal structure,
 17    30 	  3 file_number		bit(8),
 17    31 	  3 line_number		bit(14),
 17    32 	  3 statement_number	bit(5);
 17    33 
 17    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
       45 
       46 
       47 			/*      */
       48 
       49 	n = 0;
       50 	d = null;
       51 	if tree->node.type = reference_node
       52 		then do;
       53 			q = tree->reference.length;
       54 			name = tree->reference.symbol;
       55 		     end;
       56 		else do;
       57 			q = null;
       58 			name = tree;
       59 		     end;
       60 
       61 /* search for an applicable declaration for which this is a fully qualified reference.  Remember any
       62*applicable declaration for which this is a partialy qualified reference.  If two
       63*or more applicable declarations can be found and this is not a fully qualified reference
       64*to any of them, this is an ambiguous reference.  If only one applicable declaration
       65*can be found, this is a valid partialy qualified reference to that declaration.  The search
       66*for an applicable declaration begins in the current block and continues outward until
       67*the first applicable declaration is found.  After the first applicable
       68*declaration is found, all additional searching is confined to the block in which the
       69*first applicable declaration was found.  */
       70 
       71 	b = blk;
       72 	do while(b^=null);
       73 		s = name->token.declaration;
       74 		do while(s^=null);
       75 			fully_qualified = "1"b;
       76 			if s->symbol.block_node^=b
       77 			then	goto not_applicable;
       78 			if s->node.type = label_node
       79 				then if q = null
       80 					then go to applicable;
       81 					else go to not_applicable;
       82 			if q = null then do;
       83 					if s->symbol.member then fully_qualified = "0"b;
       84 					go to applicable;
       85 				      end;
       86 			k = 1;
       87 			f = s;
       88 			do while(k <= q->list.number);
       89 				do f=f->symbol.father repeat f->symbol.father while(f^=null);
       90 					if f->symbol.token = q->list.element(k) then go to next_name;
       91 					fully_qualified = "0"b;
       92 				end;
       93 				go to not_applicable;
       94 next_name:
       95 				k = k+1;
       96 			end;
       97 
       98 			fully_qualified = fully_qualified & f->symbol.father=null;
       99 		
      100 applicable:
      101 		
      102 			if fully_qualified then go to exit;
      103 			n = n+1;
      104 			d = s;
      105 not_applicable:
      106 			s = s->symbol.multi_use;
      107 		end;
      108 
      109 		if n>0 then b = null;else b = b->block.father;
      110 	end;
      111 
      112 	if n>1 then call semantic_translator$abort(221,name);
      113 	if d = null then return("0"b);
      114 	s = d;
      115 
      116 exit:
      117 	if tree->node.type = reference_node & ^def_context.by_name_lookup
      118 		then do;
      119 			tree->reference.length = null;
      120 			tree->reference.symbol = s;
      121 		     end;
      122 	if s->node.type = symbol_node
      123 		then	if ^def_context.ignore_based
      124 			then do d=s repeat d->symbol.father while(d^=null);
      125 				d->symbol.allocate = "1"b;
      126 			end;
      127 
      128 	if stmnt ^= null
      129 	then if stmnt->node.type = statement_node & ^def_context.suppress_cross_ref
      130 	then do;
      131 		d = create_cross_reference();
      132 		q = s;
      133 		if s -> node.type ^= label_node
      134 		then if s -> symbol.condition
      135 		     then q = s -> symbol.equivalence;
      136 		d->cross_reference.next = q->symbol.cross_references;
      137 		q->symbol.cross_references = d;
      138 		string(d->cross_reference.source_id) = string(stmnt->statement.source_id);
      139 	end;
      140 
      141 	return("1"b);
      142 
      143 	end lookup;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    05/05/00  1825.2  lookup.pl1                        >udd>sm>ds>w>ml>lookup.pl1
24           1    07/21/80  1646.3  semant.incl.pl1                   >ldd>incl>semant.incl.pl1
1-228        2    08/01/89  1339.9  language_utility.incl.pl1         >ldd>incl>language_utility.incl.pl1
2-307        3    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-325        4    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-335        5    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-374        6    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-386        7    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
27           8    12/07/83  1801.7  symbol.incl.pl1                   >ldd>incl>symbol.incl.pl1
29           9    05/06/74  1842.1  label.incl.pl1                    >ldd>incl>label.incl.pl1
31          10    07/21/80  1646.3  reference.incl.pl1                >ldd>incl>reference.incl.pl1
32          11    07/21/80  1646.3  semantic_bits.incl.pl1            >ldd>incl>semantic_bits.incl.pl1
34          12    08/13/81  2143.5  block.incl.pl1                    >ldd>incl>block.incl.pl1
36          13    04/07/83  1735.0  statement.incl.pl1                >ldd>incl>statement.incl.pl1
39          14    09/14/77  1805.7  token.incl.pl1                    >ldd>incl>token.incl.pl1
41          15    08/13/81  2311.5  list.incl.pl1                     >ldd>incl>list.incl.pl1
43          16    10/25/79  1745.8  cross_reference.incl.pl1          >ldd>incl>cross_reference.incl.pl1
45          17    07/21/80  1646.3  nodes.incl.pl1                    >ldd>incl>nodes.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
addr                                                   builtin function         dcl 22 ref 116 122 128
allocate                 33(02)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 125*
attributes               31            based           structure                level 2 dcl 8-3
b                               000104 automatic       pointer                  dcl 17 set ref 71* 72 76 109* 109* 109
blk                                    parameter       pointer                  dcl 17 ref 15 71
block                                  based           structure                level 1 dcl 12-5
block_node                4            based           pointer                  level 2 packed packed unaligned dcl 8-3 ref 76
by_name_lookup            0(15)        based           bit(1)                   level 2 packed packed unaligned dcl 11-8 ref 116
compiler_developed       32(35)        based           structure                level 3 packed packed unaligned dcl 8-3
condition                31(14)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 133
context                                parameter       bit(36)                  dcl 11-5 set ref 15 116 122 128
create_cross_reference          000010 constant        entry                    external dcl 2-128 ref 131
cross_reference                        based           structure                level 1 dcl 16-3
cross_references         10            based           pointer                  level 2 packed packed unaligned dcl 8-3 set ref 136
                                                                                  137*
d                               000100 automatic       pointer                  dcl 17 set ref 50* 104* 113 114 122* 122* 125* 126
                                                                                  131* 136 137 138
data_type                31            based           structure                level 3 packed packed unaligned dcl 8-3
declaration               1            based           pointer                  level 2 packed packed unaligned dcl 14-3 ref 73
def_context                            based           structure                level 1 dcl 11-8
element                   1            based           pointer                  array level 2 packed packed unaligned dcl 15-6 ref
                                                                                  90
equivalence              14            based           pointer                  level 2 packed packed unaligned dcl 8-3 ref 133
f                               000106 automatic       pointer                  dcl 17 set ref 87* 89* 89 89* 90* 92 98
father                    1            based           pointer                  level 2 in structure "block" packed packed unaligned
                                                                                  dcl 12-5 in procedure "lookup" ref 109
father                   17            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 8-3 in procedure "lookup" ref 89 92
                                                                                  98 126
fully_qualified                 000112 automatic       bit(1)                   packed unaligned dcl 18 set ref 75* 83* 91* 98* 98
                                                                                  100
ignore_based              0(08)        based           bit(1)                   level 2 packed packed unaligned dcl 11-8 ref 122
k                               000114 automatic       fixed bin(15,0)          dcl 19 set ref 86* 88 90 94* 94
label_node                             constant        bit(9)                   initial dcl 17-5 ref 78 133
length                    6            based           pointer                  level 2 packed packed unaligned dcl 10-3 set ref 53
                                                                                  119*
list                                   based           structure                level 1 dcl 15-6
member                   32(04)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 83
misc_attributes          31(19)        based           structure                level 3 packed packed unaligned dcl 8-3
multi_use                 7            based           pointer                  level 2 packed packed unaligned dcl 8-3 ref 105
n                               000113 automatic       fixed bin(15,0)          dcl 19 set ref 49* 103* 103 109 112
name                            000110 automatic       pointer                  dcl 17 set ref 54* 58* 73 112*
next                      1            based           pointer                  level 2 packed packed unaligned dcl 16-3 set ref
                                                                                  136*
node                                   based           structure                level 1 dcl 17-27
null                                                   builtin function         dcl 22 ref 50 57 72 74 78 82 89 98 109 113 119 122
                                                                                  128
number                    0(21)        based           fixed bin(14,0)          level 2 packed packed unaligned dcl 15-6 ref 88
q                               000102 automatic       pointer                  dcl 17 set ref 53* 57* 78 82 88 90 132* 133* 136 137
reference                              based           structure                level 1 dcl 10-3
reference_node                         constant        bit(9)                   initial dcl 17-5 ref 51 116
s                                      parameter       pointer                  dcl 17 set ref 15 73* 74 76 78 83 87 104 105* 105
                                                                                  114* 120 122 122 132 133 133 133
semantic_translator$abort       000012 constant        entry                    external dcl 2-446 ref 112
source_id                 0(09)        based           structure                level 2 in structure "cross_reference" packed packed
                                                                                  unaligned dcl 16-3 in procedure "lookup" set ref
                                                                                  138*
source_id                 0(09)        based           structure                level 2 in structure "statement" packed packed
                                                                                  unaligned dcl 13-9 in procedure "lookup" ref 138
statement                              based           structure                level 1 dcl 13-9
statement_node                         constant        bit(9)                   initial dcl 17-5 ref 128
stmnt                                  parameter       pointer                  dcl 17 ref 15 128 128 138
string                                                 builtin function         dcl 22 set ref 138* 138
suppress_cross_ref        0(13)        based           bit(1)                   level 2 packed packed unaligned dcl 11-8 ref 128
symbol                                 based           structure                level 1 dcl 8-3 in procedure "lookup"
symbol                    3            based           pointer                  level 2 in structure "reference" packed packed
                                                                                  unaligned dcl 10-3 in procedure "lookup" set ref
                                                                                  54 120*
symbol_node                            constant        bit(9)                   initial dcl 17-5 ref 122
token                                  based           structure                level 1 dcl 14-3 in procedure "lookup"
token                     5            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 8-3 in procedure "lookup" ref 90
tree                                   parameter       pointer                  dcl 17 ref 15 51 53 54 58 116 119 120
type                                   based           bit(9)                   level 2 packed packed unaligned dcl 17-27 ref 51 78
                                                                                  116 122 128 133

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
adjust_count                    000000 constant        entry                    external dcl 2-20
alloc_semantics                 000000 constant        entry                    external dcl 1-7
alloc_semantics$init_only       000000 constant        entry                    external dcl 1-12
array_node                             internal static bit(9)                   initial dcl 17-5
binary_to_octal_string          000000 constant        entry                    external dcl 2-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 2-43
bindec                          000000 constant        entry                    external dcl 2-23
bindec$vs                       000000 constant        entry                    external dcl 2-28
binoct                          000000 constant        entry                    external dcl 2-33
block_node                             internal static bit(9)                   initial dcl 17-5
bound_node                             internal static bit(9)                   initial dcl 17-5
builtin                         000000 constant        entry                    external dcl 1-17
by_name_agg_node                       internal static bit(9)                   initial dcl 17-5
check_star_extents              000000 constant        entry                    external dcl 1-27
compare_declaration             000000 constant        entry                    external dcl 1-31
compare_expression              000000 constant        entry                    external dcl 2-48
constant_length                 000000 constant        entry                    external dcl 2-54
context_node                           internal static bit(9)                   initial dcl 17-5
context_processor               000000 constant        entry                    external dcl 1-38
convert                         000000 constant        entry                    external dcl 2-60
convert$from_builtin            000000 constant        entry                    external dcl 2-72
convert$to_integer              000000 constant        entry                    external dcl 2-66
convert$to_target               000000 constant        entry                    external dcl 2-88
convert$to_target_fb            000000 constant        entry                    external dcl 2-82
convert$validate                000000 constant        entry                    external dcl 2-78
copy_expression                 000000 constant        entry                    external dcl 2-94
copy_expression$copy_sons       000000 constant        entry                    external dcl 2-99
copy_unique_expression          000000 constant        entry                    external dcl 2-103
create_array                    000000 constant        entry                    external dcl 2-108
create_block                    000000 constant        entry                    external dcl 2-112
create_bound                    000000 constant        entry                    external dcl 2-118
create_context                  000000 constant        entry                    external dcl 2-122
create_default                  000000 constant        entry                    external dcl 2-132
create_identifier               000000 constant        entry                    external dcl 2-136
create_label                    000000 constant        entry                    external dcl 2-140
create_list                     000000 constant        entry                    external dcl 2-147
create_operator                 000000 constant        entry                    external dcl 2-152
create_reference                000000 constant        entry                    external dcl 2-158
create_statement                000000 constant        entry                    external dcl 2-163
create_statement$prologue       000000 constant        entry                    external dcl 2-171
create_storage                  000000 constant        entry                    external dcl 2-179
create_symbol                   000000 constant        entry                    external dcl 2-184
create_token                    000000 constant        entry                    external dcl 2-191
create_token$init_hash_table    000000 constant        entry                    external dcl 2-197
create_token$protected          000000 constant        entry                    external dcl 2-199
cross_reference_node                   internal static bit(9)                   initial dcl 17-5
decbin                          000000 constant        entry                    external dcl 2-206
declare                         000000 constant        entry                    external dcl 1-41
declare_constant                000000 constant        entry                    external dcl 2-211
declare_constant$bit            000000 constant        entry                    external dcl 2-219
declare_constant$char           000000 constant        entry                    external dcl 2-224
declare_constant$desc           000000 constant        entry                    external dcl 2-229
declare_constant$integer        000000 constant        entry                    external dcl 2-234
declare_descriptor              000000 constant        entry                    external dcl 2-239
declare_descriptor$ctl          000000 constant        entry                    external dcl 2-249
declare_descriptor$param        000000 constant        entry                    external dcl 2-259
declare_integer                 000000 constant        entry                    external dcl 2-269
declare_picture                 000000 constant        entry                    external dcl 2-274
declare_picture_temp            000000 constant        entry                    external dcl 2-279
declare_pointer                 000000 constant        entry                    external dcl 2-287
declare_structure               000000 constant        entry                    external dcl 1-44
declare_temporary               000000 constant        entry                    external dcl 2-292
decode_node_id                  000000 constant        entry                    external dcl 2-300
decode_source_id                000000 constant        entry                    external dcl 2-306
def_this_context                       based           structure                level 1 dcl 11-27
default_node                           internal static bit(9)                   initial dcl 17-5
defined_reference               000000 constant        entry                    external dcl 1-47
do_semantics                    000000 constant        entry                    external dcl 1-57
error                           000000 constant        entry                    external dcl 2-314
error$omit_text                 000000 constant        entry                    external dcl 2-319
error_                          000000 constant        entry                    external dcl 2-324
error_$finish                   000000 constant        entry                    external dcl 2-343
error_$initialize_error         000000 constant        entry                    external dcl 2-341
error_$no_text                  000000 constant        entry                    external dcl 2-334
expand_assign                   000000 constant        entry                    external dcl 1-62
expand_by_name                  000000 constant        entry                    external dcl 1-71
expand_infix                    000000 constant        entry                    external dcl 1-76
expand_initial                  000000 constant        entry                    external dcl 1-84
expand_prefix                   000000 constant        entry                    external dcl 1-89
expand_primitive                000000 constant        entry                    external dcl 1-97
expression_semantics            000000 constant        entry                    external dcl 1-105
fill_refer                      000000 constant        entry                    external dcl 1-113
format_value_node                      internal static bit(9)                   initial dcl 17-5
free_node                       000000 constant        entry                    external dcl 2-345
function                        000000 constant        entry                    external dcl 1-125
generic_selector                000000 constant        entry                    external dcl 1-134
get_array_size                  000000 constant        entry                    external dcl 2-348
get_size                        000000 constant        entry                    external dcl 2-352
io_data_list_semantics          000000 constant        entry                    external dcl 1-143
io_data_list_semantics$format_list_semantics
                                000000 constant        entry                    external dcl 1-120
io_semantics                    000000 constant        entry                    external dcl 1-148
label                                  based           structure                level 1 dcl 9-1
label_array_element_node               internal static bit(9)                   initial dcl 17-5
list_node                              internal static bit(9)                   initial dcl 17-5
lookup                          000000 constant        entry                    external dcl 1-153
machine_state_node                     internal static bit(9)                   initial dcl 17-5
make_non_quick                  000000 constant        entry                    external dcl 1-162
match_arguments                 000000 constant        entry                    external dcl 1-166
max_block_number                       internal static fixed bin(17,0)          initial dcl 12-74
max_list_elements                      internal static fixed bin(17,0)          initial dcl 15-12
merge_attributes                000000 constant        entry                    external dcl 2-355
offset_adder                    000000 constant        entry                    external dcl 1-172
operator_node                          internal static bit(9)                   initial dcl 17-5
operator_semantics              000000 constant        entry                    external dcl 1-184
optimizer                       000000 constant        entry                    external dcl 2-361
parse_error                     000000 constant        entry                    external dcl 2-364
parse_error$no_text             000000 constant        entry                    external dcl 2-368
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 2-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 2-372
pl1_print$for_lex               000000 constant        entry                    external dcl 2-418
pl1_print$non_varying           000000 constant        entry                    external dcl 2-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 2-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 2-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 2-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 2-414
pl1_print$varying               000000 constant        entry                    external dcl 2-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 2-395
pl1_stat_$LHS                          external static pointer                  dcl 20
propagate_bit                   000000 constant        entry                    external dcl 1-192
refer_extent                    000000 constant        entry                    external dcl 2-426
reserve$clear                   000000 constant        entry                    external dcl 2-430
reserve$declare_lib             000000 constant        entry                    external dcl 2-434
reserve$read_lib                000000 constant        entry                    external dcl 2-439
semantic_translator             000000 constant        entry                    external dcl 2-444
semantic_translator$call_es     000000 constant        entry                    external dcl 1-196
semantic_translator$error       000000 constant        entry                    external dcl 2-450
sf_par_node                            internal static bit(9)                   initial dcl 17-5
share_expression                000000 constant        entry                    external dcl 2-454
simplify_expression             000000 constant        entry                    external dcl 1-205
simplify_offset                 000000 constant        entry                    external dcl 1-212
source_node                            internal static bit(9)                   initial dcl 17-5
subscripter                     000000 constant        entry                    external dcl 1-216
substr                                                 builtin function         dcl 22
temporary_node                         internal static bit(9)                   initial dcl 17-5
this_context                           automatic       bit(36)                  dcl 11-5
token_node                             internal static bit(9)                   initial dcl 17-5
token_to_binary                 000000 constant        entry                    external dcl 2-459
validate                        000000 constant        entry                    external dcl 1-225

NAMES DECLARED BY EXPLICIT CONTEXT.
applicable                      000163 constant        label                    dcl 100 ref 78 84
exit                            000241 constant        label                    dcl 116 ref 100
lookup                          000020 constant        entry                    external dcl 15
next_name                       000154 constant        label                    dcl 94 ref 90
not_applicable                  000172 constant        label                    dcl 105 ref 76 81 93

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       434         450     365         444
Length      1124     365        14         437      46           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
lookup                               86 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
lookup                   000100 d                           lookup
                         000102 q                           lookup
                         000104 b                           lookup
                         000106 f                           lookup
                         000110 name                        lookup
                         000112 fully_qualified             lookup
                         000113 n                           lookup
                         000114 k                           lookup

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_e_as              unpk_to_pk          call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
create_cross_reference        semantic_translator$abort

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     15 000012        49 000025        50 000026        51 000030        53 000036        54 000041        55 000043
     57 000044        58 000046        71 000050        72 000053        73 000060        74 000064        75 000071
     76 000073        78 000101        81 000111        82 000112        83 000116        84 000122        86 000123
     87 000125        88 000126        89 000133        90 000142        91 000147        92 000150        93 000153
     94 000154        96 000155        98 000156       100 000163       103 000165       104 000166       105 000172
    107 000177       109 000200       109 000205       110 000210       112 000211       113 000227       114 000236
    116 000241       119 000254       120 000257       122 000262       125 000302       126 000305       128 000310
    131 000325       132 000334       133 000340       136 000351       137 000355       138 000356       141 000361


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
