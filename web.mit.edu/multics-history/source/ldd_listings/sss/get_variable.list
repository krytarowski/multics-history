	COMPILATION LISTING OF SEGMENT get_variable
	Compiled by: Multics PL/I Compiler, Release 28d, of September 14, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 10/03/83  1643.1 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 /* procedure to return pointer to reference node of an automatic integer variable
       12*
       13*   Initial Version: 12 December 1971 by BLW
       14*	Modified:	20 July 1973 by RAB for EIS
       15*	Modified:	30 March 1980 by RAB for reference.aligned_for_store_ref.
       16*		See prepare_operand for details.	*/
       17 
       18 get_variable: proc(pt) returns(ptr);
       19 
       20 dcl	pt ptr;		/* points at block node */
       21 
       22 dcl	(p,cb) ptr,
       23 	null builtin,
       24 	create_symbol entry(ptr,ptr,bit(3) aligned) returns(ptr);
       25 
       26 dcl	max_string_len_p	init(24) fixed bin int static;
       27 
  1     1 /* BEGIN INCLUDE FILE ... block.incl.pl1 */
  1     2 /* Modified 22 Ocober 1980 by M. N. Davidoff to increase max block.number to 511 */
  1     3 /* format: style3,idind30 */
  1     4 
  1     5 declare	1 block			aligned based,
  1     6 	  2 node_type		bit (9) unaligned,
  1     7 	  2 source_id		structure unaligned,
  1     8 	    3 file_number		bit (8),
  1     9 	    3 line_number		bit (14),
  1    10 	    3 statement_number	bit (5),
  1    11 	  2 father		ptr unaligned,
  1    12 	  2 brother		ptr unaligned,
  1    13 	  2 son			ptr unaligned,
  1    14 	  2 declaration		ptr unaligned,
  1    15 	  2 end_declaration		ptr unaligned,
  1    16 	  2 default		ptr unaligned,
  1    17 	  2 end_default		ptr unaligned,
  1    18 	  2 context		ptr unaligned,
  1    19 	  2 prologue		ptr unaligned,
  1    20 	  2 end_prologue		ptr unaligned,
  1    21 	  2 main			ptr unaligned,
  1    22 	  2 end_main		ptr unaligned,
  1    23 	  2 return_values		ptr unaligned,
  1    24 	  2 return_count		ptr unaligned,
  1    25 	  2 plio_ps		ptr unaligned,
  1    26 	  2 plio_fa		ptr unaligned,
  1    27 	  2 plio_ffsb		ptr unaligned,
  1    28 	  2 plio_ssl		ptr unaligned,
  1    29 	  2 plio_fab2		ptr unaligned,
  1    30 	  2 block_type		bit (9) unaligned,
  1    31 	  2 prefix		bit (12) unaligned,
  1    32 	  2 like_attribute		bit (1) unaligned,
  1    33 	  2 no_stack		bit (1) unaligned,
  1    34 	  2 get_data		bit (1) unaligned,
  1    35 	  2 flush_at_call		bit (1) unaligned,
  1    36 	  2 processed		bit (1) unaligned,
  1    37 	  2 text_displayed		bit (1) unaligned,
  1    38 	  2 number		fixed bin (9) unsigned unaligned,
  1    39 	  2 free_temps		dimension (3) ptr,	/* these fields are used by the code generator */
  1    40 	  2 temp_list		ptr,
  1    41 	  2 entry_list		ptr,
  1    42 	  2 o_and_s		ptr,
  1    43 	  2 why_nonquick		aligned,
  1    44 	    3 auto_adjustable_storage bit (1) unaligned,
  1    45 	    3 returns_star_extents	bit (1) unaligned,
  1    46 	    3 stack_extended_by_args	bit (1) unaligned,
  1    47 	    3 invoked_by_format	bit (1) unaligned,
  1    48 	    3 format_statement	bit (1) unaligned,
  1    49 	    3 io_statements		bit (1) unaligned,
  1    50 	    3 assigned_to_entry_var	bit (1) unaligned,
  1    51 	    3 condition_statements	bit (1) unaligned,
  1    52 	    3 no_owner		bit (1) unaligned,
  1    53 	    3 recursive_call	bit (1) unaligned,
  1    54 	    3 options_non_quick	bit (1) unaligned,
  1    55 	    3 options_variable	bit (1) unaligned,
  1    56 	    3 never_referenced	bit (1) unaligned,
  1    57 	    3 pad_nonquick		bit (5) unaligned,
  1    58 	  2 prologue_flag		bit (1) unaligned,
  1    59 	  2 options_main		bit (1) unaligned,
  1    60 	  2 pad			bit (16) unaligned,
  1    61 	  2 number_of_entries	fixed bin (17),
  1    62 	  2 level			fixed bin (17),
  1    63 	  2 last_auto_loc		fixed bin (17),
  1    64 	  2 symbol_block		fixed bin (17),
  1    65 	  2 entry_info		fixed bin (18),
  1    66 	  2 enter			structure unaligned,
  1    67 	    3 start		fixed bin (17),
  1    68 	    3 end			fixed bin (17),
  1    69 	  2 leave			structure unaligned,
  1    70 	    3 start		fixed bin (17),
  1    71 	    3 end			fixed bin (17),
  1    72 	  2 owner			ptr;
  1    73 
  1    74 declare	max_block_number		fixed bin internal static options (constant) initial (511);
  1    75 
  1    76 /* END INCLUDE FILE ... block.incl.pl1 */
       28 
  2     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
  2     2 
  2     3 dcl	1 symbol			based aligned,
  2     4 	2 node_type		bit(9) unal,
  2     5 	2 source_id		structure unal,
  2     6 	  3 file_number		bit(8),
  2     7 	  3 line_number		bit(14),
  2     8 	  3 statement_number	bit(5),
  2     9 	2 location		fixed(18) unal unsigned,
  2    10 	2 allocated		bit(1) unal,
  2    11 	2 dcl_type		bit(3) unal,
  2    12 	2 reserved		bit(6) unal,
  2    13 	2 pix			unal,
  2    14 	  3 pic_fixed		bit(1) unal,
  2    15 	  3 pic_float		bit(1) unal,
  2    16 	  3 pic_char		bit(1) unal,
  2    17 	  3 pic_scale		fixed(7) unal,
  2    18 	  3 pic_size		fixed(7) unal,
  2    19 	2 level			fixed(8) unal,
  2    20 	2 boundary		fixed(3) unal,
  2    21 	2 size_units		fixed(3) unal,
  2    22 	2 scale			fixed(7) unal,
  2    23 	2 runtime			bit(18) unal,
  2    24 	2 runtime_offset		bit(18) unal,
  2    25 	2 block_node		ptr unal,
  2    26 	2 token			ptr unal,
  2    27 	2 next			ptr unal,
  2    28 	2 multi_use		ptr unal,
  2    29 	2 cross_references		ptr unal,
  2    30 	2 initial			ptr unal,
  2    31 	2 array			ptr unal,
  2    32 	2 descriptor		ptr unal,
  2    33 	2 equivalence		ptr unal,
  2    34 	2 reference		ptr unal,
  2    35 	2 general			ptr unal,
  2    36 	2 father			ptr unal,
  2    37 	2 brother			ptr unal,
  2    38 	2 son			ptr unal,
  2    39 	2 word_size		ptr unal,
  2    40 	2 bit_size		ptr unal,
  2    41 	2 dcl_size		ptr unal,
  2    42 	2 symtab_size		ptr unal,
  2    43 	2 c_word_size		fixed(24),
  2    44 	2 c_bit_size		fixed(24),
  2    45 	2 c_dcl_size		fixed(24),
  2    46 
  2    47 	2 attributes		structure aligned,
  2    48 	  3 data_type		structure unal,
  2    49 	    4 structure		bit(1) ,
  2    50 	    4 fixed		bit(1),
  2    51 	    4 float		bit(1),
  2    52 	    4 bit			bit(1),
  2    53 	    4 char		bit(1),
  2    54 	    4 ptr			bit(1),
  2    55 	    4 offset		bit(1),
  2    56 	    4 area		bit(1),
  2    57 	    4 label		bit(1),
  2    58 	    4 entry		bit(1),
  2    59 	    4 file		bit(1),
  2    60 	    4 arg_descriptor	bit(1),
  2    61 	    4 storage_block		bit(1),
  2    62 	    4 explicit_packed	bit(1), /* options(packed) */
  2    63 	    4 condition		bit(1),
  2    64 	    4 format		bit(1),
  2    65 	    4 builtin		bit(1),
  2    66 	    4 generic		bit(1),
  2    67 	    4 picture		bit(1),
  2    68 
  2    69 	  3 misc_attributes		structure unal,
  2    70 	    4 dimensioned		bit(1),
  2    71 	    4 initialed		bit(1),
  2    72 	    4 aligned		bit(1),
  2    73 	    4 unaligned		bit(1),
  2    74 	    4 signed		bit(1),
  2    75 	    4 unsigned		bit(1),
  2    76 	    4 precision		bit(1),
  2    77 	    4 varying		bit(1),
  2    78 	    4 local		bit(1),
  2    79 	    4 decimal		bit(1),
  2    80 	    4 binary		bit(1),
  2    81 	    4 real		bit(1),
  2    82 	    4 complex		bit(1),
  2    83 	    4 variable		bit(1),
  2    84 	    4 reducible		bit(1),
  2    85 	    4 irreducible		bit(1),
  2    86 	    4 returns		bit(1),
  2    87 	    4 position		bit(1),
  2    88 	    4 internal		bit(1),
  2    89 	    4 external		bit(1),
  2    90 	    4 like		bit(1),
  2    91 	    4 member		bit(1),
  2    92 	    4 non_varying		bit(1),
  2    93 	    4 options		bit(1),
  2    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
  2    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
  2    96 
  2    97 	  3 storage_class		structure unal,
  2    98 	    4 auto		bit(1),
  2    99 	    4 based		bit(1),
  2   100 	    4 static		bit(1),
  2   101 	    4 controlled		bit(1),
  2   102 	    4 defined		bit(1),
  2   103 	    4 parameter		bit(1),
  2   104 	    4 param_desc		bit(1),
  2   105 	    4 constant		bit(1),
  2   106 	    4 temporary		bit(1),
  2   107 	    4 return_value		bit(1),
  2   108 
  2   109 	  3 file_attributes		structure unal,
  2   110 	    4 print		bit(1),
  2   111 	    4 input		bit(1),
  2   112 	    4 output		bit(1),
  2   113 	    4 update		bit(1),
  2   114 	    4 stream		bit(1),
  2   115 	    4 reserved_1		bit(1),
  2   116 	    4 record		bit(1),
  2   117 	    4 sequential		bit(1),
  2   118 	    4 direct		bit(1),
  2   119 	    4 interactive		bit(1),		/* env(interactive) */
  2   120 	    4 reserved_2		bit(1),
  2   121 	    4 reserved_3		bit(1),
  2   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
  2   123 	    4 keyed		bit(1),
  2   124 	    4 reserved_4		bit(1),
  2   125 	    4 environment		bit(1),
  2   126 
  2   127 	  3 compiler_developed	structure unal,
  2   128 	    4 aliasable		bit(1),
  2   129 	    4 packed		bit(1),
  2   130 	    4 passed_as_arg		bit(1),
  2   131 	    4 allocate		bit(1),
  2   132 	    4 set			bit(1),
  2   133 	    4 exp_extents		bit(1),
  2   134 	    4 refer_extents		bit(1),
  2   135 	    4 star_extents		bit(1),
  2   136 	    4 isub		bit(1),
  2   137 	    4 put_in_symtab		bit(1),
  2   138 	    4 contiguous		bit(1),
  2   139 	    4 put_data		bit(1),
  2   140 	    4 overlayed		bit(1),
  2   141 	    4 error		bit(1),
  2   142 	    4 symtab_processed	bit(1),
  2   143 	    4 overlayed_by_builtin	bit(1),
  2   144 	    4 defaulted		bit(1),
  2   145 	    4 connected		bit(1);
  2   146 
  2   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
       29 
  3     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
  3     2 
  3     3 dcl	1 reference		based aligned,
  3     4 	2 node_type		bit(9) unaligned,
  3     5 	2 array_ref		bit(1) unaligned,
  3     6 	2 varying_ref		bit(1) unaligned,
  3     7 	2 shared			bit(1) unaligned,
  3     8 	2 put_data_sw		bit(1) unaligned,
  3     9 	2 processed		bit(1) unaligned,
  3    10 	2 units			fixed(3) unaligned,
  3    11 	2 ref_count		fixed(17) unaligned,
  3    12 	2 c_offset		fixed(24),
  3    13 	2 c_length		fixed(24),
  3    14 	2 symbol			ptr unaligned,
  3    15 	2 qualifier		ptr unaligned,
  3    16 	2 offset			ptr unaligned,
  3    17 	2 length			ptr unaligned,
  3    18 	2 subscript_list		ptr unaligned,
  3    19 						/* these fields are used by the 645 code generator */
  3    20 	2 address			structure unaligned,
  3    21 	  3 base			bit(3),
  3    22 	  3 offset		bit(15),
  3    23 	  3 op			bit(9),
  3    24 	  3 no_address		bit(1),
  3    25 	  3 inhibit		bit(1),
  3    26 	  3 ext_base		bit(1),
  3    27 	  3 tag			bit(6),
  3    28 	2 info			structure unaligned,
  3    29 	  3 address_in		structure,
  3    30 	    4 b			dimension(0:7) bit(1),
  3    31 	    4 storage		bit(1),
  3    32 	  3 value_in		structure,
  3    33 	    4 a			bit(1),
  3    34 	    4 q			bit(1),
  3    35 	    4 aq			bit(1),
  3    36 	    4 string_aq		bit(1),
  3    37 	    4 complex_aq		bit(1),
  3    38 	    4 decimal_aq		bit(1),
  3    39 	    4 b			dimension(0:7) bit(1),
  3    40 	    4 storage		bit(1),
  3    41 	    4 indicators		bit(1),
  3    42 	    4 x			dimension(0:7) bit(1),
  3    43 	  3 other			structure,
  3    44 	    4 big_offset		bit(1),
  3    45 	    4 big_length		bit(1),
  3    46 	    4 modword_in_offset	bit(1),
  3    47 	2 data_type		fixed(5) unaligned,
  3    48 	2 bits			structure unaligned,
  3    49 	  3 padded_ref		bit(1),
  3    50 	  3 aligned_ref		bit(1),
  3    51 	  3 long_ref		bit(1),
  3    52 	  3 forward_ref		bit(1),
  3    53 	  3 ic_ref		bit(1),
  3    54 	  3 temp_ref		bit(1),
  3    55 	  3 defined_ref		bit(1),
  3    56 	  3 evaluated		bit(1),
  3    57 	  3 allocate		bit(1),
  3    58 	  3 allocated		bit(1),
  3    59 	  3 aliasable		bit(1),
  3    60 	  3 even			bit(1),
  3    61 	  3 perm_address		bit(1),
  3    62 	  3 aggregate		bit(1),
  3    63 	  3 hit_zero		bit(1),
  3    64 	  3 dont_save		bit(1),
  3    65 	  3 fo_in_qual		bit(1),
  3    66 	  3 hard_to_load		bit(1),
  3    67 	2 relocation		bit(12) unaligned,
  3    68 	2 more_bits		structure unaligned,
  3    69 	  3 substr		bit(1),
  3    70 	  3 padded_for_store_ref	bit(1),
  3    71 	  3 aligned_for_store_ref	bit(1),
  3    72 	  3 mbz			bit(15),
  3    73 	2 store_ins		bit(18) unaligned;
  3    74 
  3    75 /* END INCLUDE FILE ... reference.incl.pl1 */
       30 
  4     1 dcl (	real_fix_bin_1		init(1),
  4     2 	real_fix_bin_2		init(2),
  4     3 	real_flt_bin_1		init(3),
  4     4 	real_flt_bin_2		init(4),
  4     5 	complex_fix_bin_1		init(5),
  4     6 	complex_fix_bin_2		init(6),
  4     7 	complex_flt_bin_1		init(7),
  4     8 	complex_flt_bin_2		init(8),
  4     9 	real_fix_dec		init(9),
  4    10 	real_flt_dec		init(10),
  4    11 	complex_fix_dec		init(11),
  4    12 	complex_flt_dec		init(12),
  4    13 	char_string		init(13),
  4    14 	bit_string		init(14),
  4    15 	label_constant		init(15),
  4    16 	local_label_variable	init(16),
  4    17 	label_variable		init(17),
  4    18 	entry_variable		init(18),
  4    19 	ext_entry_in		init(19),
  4    20 	ext_entry_out		init(20),
  4    21 	int_entry			init(21),
  4    22 	int_entry_other		init(22),
  4    23 	unpacked_ptr		init(23),
  4    24 	packed_ptr		init(24)) fixed bin(15) int static options(constant);
       31 
  5     1 /* BEGIN INCLUDE FILE ... declare_type.incl.pl1 */
  5     2 
  5     3 /* Modified: 25 Apr 1979 by PCK to implement 4-bit decimal */
  5     4 
  5     5 dcl  (	by_declare	initial("001"b),
  5     6 	by_explicit_context initial("010"b),
  5     7 	by_context	initial("011"b),
  5     8 	by_implication	initial("100"b),
  5     9 	by_compiler	initial("101"b)) int static bit(3) aligned options(constant);
  5    10 
  5    11 /* END INCLUDE FILE ... declare_type.incl.pl1 */
       32 
       33 
       34 	cb = pt;
       35 	p = create_symbol(cb,null,(by_compiler));
       36 	p -> symbol.c_word_size = 1;
       37 	p -> symbol.c_dcl_size = max_string_len_p;
       38 
       39 	p -> symbol.allocate,
       40 	p -> symbol.fixed,
       41 	p -> symbol.binary,
       42 	p -> symbol.real,
       43 	p -> symbol.auto = "1"b;
       44 
       45 	p -> symbol.location = cb -> block.last_auto_loc;
       46 	p -> symbol.allocated = "1"b;
       47 
       48 	cb -> block.last_auto_loc = cb -> block.last_auto_loc + 1;
       49 
       50 	p = p -> symbol.reference;
       51 
       52 	p -> reference.data_type = real_fix_bin_1;
       53 	p -> reference.aligned_ref,
       54 	p -> reference.aligned_for_store_ref,
       55 	p -> reference.allocate,
       56 	p -> reference.allocated = "1"b;
       57 
       58 	return(p);
       59 	end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/03/83  1008.5  get_variable.pl1                  >spec>on>pl128d>get_variable.pl1
28           1    08/13/81  2043.5  block.incl.pl1                    >ldd>include>block.incl.pl1
29           2    10/02/83  0828.4  symbol.incl.pl1                   >spec>on>pl128d>symbol.incl.pl1
30           3    07/21/80  1546.3  reference.incl.pl1                >ldd>include>reference.incl.pl1
31           4    05/03/76  1320.4  data_types.incl.pl1               >ldd>include>data_types.incl.pl1
32           5    10/25/79  1645.8  declare_type.incl.pl1             >ldd>include>declare_type.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
aligned_for_store_ref
                         13(02)        based           bit(1)                   level 3 packed unaligned dcl 3-3 set ref 53*
aligned_ref              12(07)        based           bit(1)                   level 3 packed unaligned dcl 3-3 set ref 53*
allocate                 12(14)        based           bit(1)                   level 3 in structure "reference" packed unaligned
                                                                                  dcl 3-3 in procedure "get_variable" set ref 53*
allocate                 33(02)        based           bit(1)                   level 4 in structure "symbol" packed unaligned
                                                                                  dcl 2-3 in procedure "get_variable" set ref 39*
allocated                 1(18)        based           bit(1)                   level 2 in structure "symbol" packed unaligned
                                                                                  dcl 2-3 in procedure "get_variable" set ref 46*
allocated                12(15)        based           bit(1)                   level 3 in structure "reference" packed unaligned
                                                                                  dcl 3-3 in procedure "get_variable" set ref 53*
attributes               31            based           structure                level 2 dcl 2-3
auto                     32(09)        based           bit(1)                   level 4 packed unaligned dcl 2-3 set ref 39*
binary                   31(29)        based           bit(1)                   level 4 packed unaligned dcl 2-3 set ref 39*
bits                     12(06)        based           structure                level 2 packed unaligned dcl 3-3
block                                  based           structure                level 1 dcl 1-5
by_compiler                            constant        bit(3)                   initial dcl 5-5 ref 35
c_dcl_size               30            based           fixed bin(24,0)          level 2 dcl 2-3 set ref 37*
c_word_size              26            based           fixed bin(24,0)          level 2 dcl 2-3 set ref 36*
cb                              000102 automatic       pointer                  dcl 22 set ref 34* 35* 45 48 48
compiler_developed       32(35)        based           structure                level 3 packed unaligned dcl 2-3
create_symbol                   000010 constant        entry                    external dcl 22 ref 35
data_type                12            based           fixed bin(5,0)           level 2 in structure "reference" packed unaligned
                                                                                  dcl 3-3 in procedure "get_variable" set ref 52*
data_type                31            based           structure                level 3 in structure "symbol" packed unaligned
                                                                                  dcl 2-3 in procedure "get_variable"
fixed                    31(01)        based           bit(1)                   level 4 packed unaligned dcl 2-3 set ref 39*
last_auto_loc            46            based           fixed bin(17,0)          level 2 dcl 1-5 set ref 45 48* 48
location                  1            based           fixed bin(18,0)          level 2 packed unsigned unaligned dcl 2-3 set ref
                                                                                  45*
max_string_len_p                       constant        fixed bin(17,0)          initial dcl 26 ref 37
misc_attributes          31(19)        based           structure                level 3 packed unaligned dcl 2-3
more_bits                13            based           structure                level 2 packed unaligned dcl 3-3
null                                                   builtin function         dcl 22 ref 35 35
p                               000100 automatic       pointer                  dcl 22 set ref 35* 36 37 39 39 39 39 39 45 46 50* 50
                                                                                  52 53 53 53 53 58
pt                                     parameter       pointer                  dcl 20 ref 18 34
real                     31(30)        based           bit(1)                   level 4 packed unaligned dcl 2-3 set ref 39*
real_fix_bin_1                         constant        fixed bin(15,0)          initial dcl 4-1 ref 52
reference                              based           structure                level 1 dcl 3-3 in procedure "get_variable"
reference                15            based           pointer                  level 2 in structure "symbol" packed unaligned
                                                                                  dcl 2-3 in procedure "get_variable" ref 50
storage_class            32(09)        based           structure                level 3 packed unaligned dcl 2-3
symbol                                 based           structure                level 1 dcl 2-3

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
bit_string                             internal static fixed bin(15,0)          initial dcl 4-1
by_context                             internal static bit(3)                   initial dcl 5-5
by_declare                             internal static bit(3)                   initial dcl 5-5
by_explicit_context                    internal static bit(3)                   initial dcl 5-5
by_implication                         internal static bit(3)                   initial dcl 5-5
char_string                            internal static fixed bin(15,0)          initial dcl 4-1
complex_fix_bin_1                      internal static fixed bin(15,0)          initial dcl 4-1
complex_fix_bin_2                      internal static fixed bin(15,0)          initial dcl 4-1
complex_fix_dec                        internal static fixed bin(15,0)          initial dcl 4-1
complex_flt_bin_1                      internal static fixed bin(15,0)          initial dcl 4-1
complex_flt_bin_2                      internal static fixed bin(15,0)          initial dcl 4-1
complex_flt_dec                        internal static fixed bin(15,0)          initial dcl 4-1
entry_variable                         internal static fixed bin(15,0)          initial dcl 4-1
ext_entry_in                           internal static fixed bin(15,0)          initial dcl 4-1
ext_entry_out                          internal static fixed bin(15,0)          initial dcl 4-1
int_entry                              internal static fixed bin(15,0)          initial dcl 4-1
int_entry_other                        internal static fixed bin(15,0)          initial dcl 4-1
label_constant                         internal static fixed bin(15,0)          initial dcl 4-1
label_variable                         internal static fixed bin(15,0)          initial dcl 4-1
local_label_variable                   internal static fixed bin(15,0)          initial dcl 4-1
max_block_number                       internal static fixed bin(17,0)          initial dcl 1-74
packed_ptr                             internal static fixed bin(15,0)          initial dcl 4-1
real_fix_bin_2                         internal static fixed bin(15,0)          initial dcl 4-1
real_fix_dec                           internal static fixed bin(15,0)          initial dcl 4-1
real_flt_bin_1                         internal static fixed bin(15,0)          initial dcl 4-1
real_flt_bin_2                         internal static fixed bin(15,0)          initial dcl 4-1
real_flt_dec                           internal static fixed bin(15,0)          initial dcl 4-1
unpacked_ptr                           internal static fixed bin(15,0)          initial dcl 4-1

NAME DECLARED BY EXPLICIT CONTEXT.
get_variable                    000010 constant        entry                    external dcl 18

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       142         154     106         152
Length       412     106        12         221      34           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
get_variable                         82 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
get_variable             000100 p                           get_variable
                         000102 cb                          get_variable

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
create_symbol

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     18 000004        34 000015        35 000021        36 000041        37 000044        39 000046        45 000060
     46 000064        48 000066        50 000067        52 000071        53 000073        58 000103


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
