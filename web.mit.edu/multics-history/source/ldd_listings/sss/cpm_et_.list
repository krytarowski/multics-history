ASSEMBLY LISTING OF SEGMENT >special_ldd>install>MR12.0-1206>cpm_et_.alm                     
ASSEMBLED ON:	11/04/86  1357.7 mst Tue
OPTIONS USED:	-target Level68 list 
ASSEMBLED BY:	ALM Version  6.7  October 1986  
ASSEMBLER CREATED:	10/08/86  1557.5 mst Wed

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Information Systems Inc., 1985 *
                                     4  " *                                                         *
                                     5  " ***********************************************************
                                     6  
                                     7  " Error table for control point management
                                     8  
                                     9  " HISTORY COMMENTS:
                                    10  "  1) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
                                    11  "     audit(86-10-20,Fawcett), install(86-11-03,MR12.0-1206):
                                    12  "     Written to support control point management in March 1985 by G. Palter.
                                    13  "                                                      END HISTORY COMMENTS
                                    14  
                                    15  
    000000                          16  	name	cpm_et_
                                    17  	
                                    18  	include	et_macros
                                   1-1  " Begin include file ...... et_macros.incl.alm
                                   1-2  "	Written 6/15/77 by Noel I. Morris
                                   1-3  "	Modified '82 so error code entries are in first page of segment.
                                   1-4  
                                   1-5  " This include file contains macros for generating error tables
                                   1-6  " for both system and non-system use.
                                   1-7  
                                   1-8  " ET MACRO
                                   1-9  "
                                  1-10  " This macro is used to initialize the error table for either
                                  1-11  " system or non-system use.  It is invoked at the beginning of
                                  1-12  " the error table as follows:
                                  1-13  "
                                  1-14  "	et	table_name{,system}
                                  1-15  "
                                  1-16  
                                  1-17  macro	et
                              1   1-18  	maclist	on
                              2   1-19  
                              3   1-20  	name	&1
                              4   1-21  
                              5   1-22  &^=&2,system&[
                              6   1-23  
                              7   1-24  	include	stack_header
                              8   1-25  
                              9   1-26  
                             10   1-27  
                             11   1-28  	use	codes
                             12   1-29  .code_start:
                             13   1-30  
                             14   1-31  	use	past_codes
                             15   1-32  .code_end:
                             16   1-33  
                             17   1-34  	join	/link/codes,past_codes
                             18   1-35  
                             19   1-36  	use	messages
                             20   1-37  
                             21   1-38  .trapproc:
                             22   1-39  	epaq	0,ic
                             23   1-40  	eax0	0,au
                             24   1-41  	epbpsb	sp|0
                             25   1-42  	lprplp	sb|stack_header.lot_ptr,*au
                             26   1-43  	eax1	.code_start         
                             27   1-44  .loop:	stx0	lp|0,x1
                             28   1-45  	eax1	1,x1
                             29   1-46  	cmpx1	.code_end,du
                             30   1-47  	tmi	.loop-*,ic
                             31   1-48  	short_return
                             32   1-49  
                             33   1-50  	firstref	<*text>|.trapproc
                             34   1-51  
                             35   1-52  &;	use	codes
                             36   1-53  	use	messages
                             37   1-54  
                             38   1-55  	join	/text/codes,messages
                             39   1-56  
                             40   1-57  &]
                             41   1-58  
                             42   1-59  	bool	.segno,77777
                             43   1-60  
                             44   1-61  	maclist	off
                             45   1-62  
                             46   1-63  	&end
                                  1-64  
                                  1-65  
                                  1-66  
                                  1-67  " EC MACRO
                                  1-68  "
                                  1-69  " This macro is used to define an error code as shown:
                                  1-70  "
                                  1-71  "	ec	name,{short_mess},(long_mess)
                                  1-72  "
                                  1-73  " If more than a single name is to be defined for a given message,
                                  1-74  " a list of names separated by commas and enclosed in parentheses
                                  1-75  " must be given.   short_mess must be 8 or less characters.  If omitted,
                                  1-76  " the short_mess will be set to the name.  long_mess is enclosed
                                  1-77  " in parentheses in order to cause ALM to ignore embedded blanks.  Please
                                  1-78  " note that double quote characters in either short_mess or long_mess
                                  1-79  " must be doubled in order to make the ALM assembly work properly.
                                  1-80  " Note that a macro invocation line terminated by a comma will cause that
                                  1-81  " statement to be continued on the next line.
                                  1-82  
                                  1-83  macro	ec
                              1   1-84  	use	codes
                              2   1-85  
                              3   1-86  	maclist	on,save
                              4   1-87  &(1	segdef  &i
                              5   1-88  &)	maclist	restore
                              6   1-89  &(1&i:
                              7   1-90  &)	maclist	object,save
                              8   1-91  	zero	.segno,&U
                              9   1-92  	maclist	restore
                             10   1-93  	use	messages
                             11   1-94  &^=&l2,0&[	shortname    &2
                             12   1-95  &;	shortname    &1
                             13   1-96  &]
                             14   1-97  &U:
                             15   1-98  	maclist	on,save
                             16   1-99  	acc  "&3"
                             17  1-100  
                             18  1-101  	maclist	restore
                             19  1-102  	&end
                                 1-103  
                                 1-104  macro	shortname
                              1  1-105  	maclist	on,save
                              2  1-106  	aci  "&1",8
                              3  1-107  	maclist	restore
                              4  1-108  	&end
                                 1-109  
                                 1-110  
                                 1-111  
                                 1-112  " A typical error table source program might have the following format:
                                 1-113  "
                                 1-114  "	include	et_macros
                                 1-115  "
                                 1-116  "	et	name_of_error_table
                                 1-117  "
                                 1-118  "	ec	error_code_1,ecode1,(This is error code 1.)
                                 1-119  "
                                 1-120  "	ec	error_code_2,ecode2,(This is error code 2.)
                                 1-121  "
                                 1-122  "	:	     :	      :		:
                                 1-123  "
                                 1-124  "	ec	error_code_n,ecoden,(This is the nth error code.)
                                 1-125  "
                                 1-126  "	end
                                 1-127  "
                                 1-128  
                                 1-129  " End of include file ...... et_macros.incl.alm
                                 1-130  
                                    19  
                                    20  	et	cpm_et_
                                        
    000000                              	name	cpm_et_
                                        
                                        
                                        
                                        	include	stack_header
                                   2-1  "	BEGIN INCLUDE FILE ... stack_header.incl.alm  3/72  Bill Silver
                                   2-2  "
                                   2-3  "	modified 7/76 by M. Weaver for *system links and more system use of areas
                                   2-4  "	modified 3/77 by M. Weaver  to add rnt_ptr
                                   2-5  "	modified 7/77 by S. Webber to add run_unit_depth and assign_linkage_ptr
                                   2-6  "	modified 6/83 by J. Ives to add trace_frames and in_trace.
                                   2-7  
                                   2-8  " HISTORY COMMENTS:
                                   2-9  "  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
                                  2-10  "     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
                                  2-11  "     added the heap_header_ptr definition
                                  2-12  "  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
                                  2-13  "     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
                                  2-14  "     Modified to support control point management.  These changes were
                                  2-15  "     actually made in February 1985 by G. Palter.
                                  2-16  "  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
                                  2-17  "     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
                                  2-18  "     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
                                  2-19  "     bit pad after cur_lot_size for the cpm_enabled. This was done to save
                                  2-20  "     some space int the stack header and change the cpd_ptr unal to
                                  2-21  "     cpm_data_ptr (ITS pair).
                                  2-22  "                                                      END HISTORY COMMENTS
                                  2-23  
                        000004    2-24  	equ	stack_header.cpm_data_ptr,4		ptr to control point for this stack
                        000006    2-25  	equ	stack_header.combined_stat_ptr,6	ptr to separate static area
                                  2-26  
                        000010    2-27  	equ	stack_header.clr_ptr,8		ptr to area containing linkage sections
                        000012    2-28  	equ	stack_header.max_lot_size,10		number of words allowed in lot (DU)
                        000012    2-29  	equ	stack_header.main_proc_invoked,10	nonzero if main proc was invoked in run unit (DL)
                        000012    2-30  	equ	stack_header.run_unit_depth,10	number of active run units stacked (DL)
                        000013    2-31  	equ	stack_header.cur_lot_size,11		DU number of words (entries) in lot
                        000013    2-32            equ	stack_header.cpm_enabled,11		DL  non-zero if control point management is enabled
                        000014    2-33  	equ	stack_header.system_free_ptr,12	ptr to system storage area
                        000016    2-34  	equ	stack_header.user_free_ptr,14		ptr to user storage area
                                  2-35  
                        000020    2-36  	equ	stack_header.parent_ptr,16		ptr to parent stack or null
                        000022    2-37  	equ	stack_header.stack_begin_ptr,18	ptr to first stack frame
                        000024    2-38  	equ	stack_header.stack_end_ptr,20		ptr to next useable stack frame
                        000026    2-39  	equ	stack_header.lot_ptr,22		ptr to the lot for the current ring
                                  2-40  
                        000030    2-41  	equ	stack_header.signal_ptr,24		ptr to signal proc for current ring
                        000032    2-42  	equ	stack_header.bar_mode_sp,26		value of sp before entering bar mode
                        000034    2-43  	equ	stack_header.pl1_operators_ptr,28	ptr: pl1_operators_$operator_table
                        000036    2-44  	equ	stack_header.call_op_ptr,30		ptr to standard call operator
                                  2-45  
                        000040    2-46  	equ	stack_header.push_op_ptr,32		ptr to standard push operator
                        000042    2-47  	equ	stack_header.return_op_ptr,34		ptr to standard return operator
                        000044    2-48  	equ	stack_header.ret_no_pop_op_ptr,36	ptr: stand. return/ no pop operator
                        000046    2-49  	equ	stack_header.entry_op_ptr,38		ptr to standard entry operator
                                  2-50  
                        000050    2-51  	equ	stack_header.trans_op_tv_ptr,40	ptr to table of translator operator ptrs
                        000052    2-52  	equ	stack_header.isot_ptr,42		pointer to ISOT
                        000054    2-53  	equ	stack_header.sct_ptr,44		pointer to System Condition Table
                        000056    2-54  	equ	stack_header.unwinder_ptr,46		pointer to unwinder for current ring
                                  2-55  
                        000060    2-56  	equ	stack_header.sys_link_info_ptr,48	ptr to *system link name table
                        000062    2-57  	equ	stack_header.rnt_ptr,50		ptr to reference name table
                        000064    2-58  	equ	stack_header.ect_ptr,52		ptr to event channel table
                        000066    2-59  	equ	stack_header.assign_linkage_ptr,54	ptr to area for hcs_$assign_linkage calls
                        000070    2-60  	equ	stack_header.heap_header_ptr,56	ptr to heap header.
                        000072    2-61  	equ	stack_header.trace_frames,58		stack of trace_catch_ frames
                        000073    2-62  	equ	stach_header.trace_top_ptr,59		trace pointer
                        000074    2-63  	equ	stack_header.in_trace,60		trace antirecurse bit
                        000100    2-64  	equ	stack_header_end,64			length of stack header
                                  2-65  
                                  2-66  
                                  2-67  
                                  2-68  
                        000000    2-69  	equ	trace_frames.count,0		number of trace frames on stack
                        000001    2-70  	equ	trace_frames.top_ptr,1		packed pointer to top one
                                  2-71  
                                  2-72  "	The  following constant is an offset within the  pl1  operators table.
                                  2-73  "	It  references a  transfer vector table.
                                  2-74  
                        000551    2-75  	bool	tv_offset,551
                                  2-76  
                                  2-77  
                                  2-78  "	The  following constants are offsets within this transfer vector table.
                                  2-79  
                        001170    2-80  	equ	call_offset,tv_offset+271
                        001171    2-81  	equ	push_offset,tv_offset+272
                        001172    2-82  	equ	return_offset,tv_offset+273
                        001173    2-83  	equ	return_no_pop_offset,tv_offset+274
                        001174    2-84  	equ	entry_offset,tv_offset+275
                                  2-85  
                                  2-86  
                                  2-87  " 	END INCLUDE FILE stack_header.incl.alm
                                        
                                        
                                        
                                        	use	codes
    000010                              .code_start:
                                        
                                        	use	past_codes
    000021                              .code_end:
                                        
                                        	join	/link/codes,past_codes
                                        
                                        	use	messages
                                        
    000000                              .trapproc:
    000000  aa   000000 2130 04         	epaq	0,ic
    000001  aa   000000 6200 01         	eax0	0,au
    000002  aa  6 00000 3731 00         	epbpsb	sp|0
    000003  aa  7 00026 7641 61         	lprplp	sb|stack_header.lot_ptr,*au
    000004  8a   000010 6210 00         	eax1	.code_start         
    000005  aa  4 00000 7401 11         .loop:	stx0	lp|0,x1
    000006  aa   000001 6210 11         	eax1	1,x1
    000007  8a   000021 1010 03         	cmpx1	.code_end,du
    000010  aa   777775 6040 04         	tmi	.loop-*,ic
    000011  aa  7 00044 7101 20         	short_return
                                        
    000012                              	firstref	<*text>|.trapproc
                                        
                                        
                                        
                        077777          	bool	.segno,77777
                                        
                                    21  
                                    22  
                                    23  ec   already_started,started,
                                    24  	(The specified control point has already been started.)
                        000010          	segdef  already_started
    000010  a0   077777 000014 
    000012  aa  163 164 141 162         	aci  "started",8
    000013  aa  164 145 144 040
    000014  aa  065 124 150 145         	acc  "The specified control point has already been started."
    000015  aa  040 163 160 145
    000016  aa  143 151 146 151
    000017  aa  145 144 040 143
    000020  aa  157 156 164 162
    000021  aa  157 154 040 160
    000022  aa  157 151 156 164
    000023  aa  040 150 141 163
    000024  aa  040 141 154 162
    000025  aa  145 141 144 171
    000026  aa  040 142 145 145
    000027  aa  156 040 163 164
    000030  aa  141 162 164 145
    000031  aa  144 056 000 000
                                        
                                    25  
                                    26  ec   already_stopped,stopped,
                                    27  	(The specified control point has already been stopped.)
                        000011          	segdef  already_stopped
    000011  a0   077777 000034 
    000032  aa  163 164 157 160         	aci  "stopped",8
    000033  aa  160 145 144 040
    000034  aa  065 124 150 145         	acc  "The specified control point has already been stopped."
    000035  aa  040 163 160 145
    000036  aa  143 151 146 151
    000037  aa  145 144 040 143
    000040  aa  157 156 164 162
    000041  aa  157 154 040 160
    000042  aa  157 151 156 164
    000043  aa  040 150 141 163
    000044  aa  040 141 154 162
    000045  aa  145 141 144 171
    000046  aa  040 142 145 145
    000047  aa  156 040 163 164
    000050  aa  157 160 160 145
    000051  aa  144 056 000 000
                                        
                                    28  
                                    29  ec   cant_destroy_root,rootctpt,
                                    30  	(The root control point can not be destroyed.)
                        000012          	segdef  cant_destroy_root
    000012  a0   077777 000054 
    000052  aa  162 157 157 164         	aci  "rootctpt",8
    000053  aa  143 164 160 164
    000054  aa  054 124 150 145         	acc  "The root control point can not be destroyed."
    000055  aa  040 162 157 157
    000056  aa  164 040 143 157
    000057  aa  156 164 162 157
    000060  aa  154 040 160 157
    000061  aa  151 156 164 040
    000062  aa  143 141 156 040
    000063  aa  156 157 164 040
    000064  aa  142 145 040 144
    000065  aa  145 163 164 162
    000066  aa  157 171 145 144
    000067  aa  056 000 000 000
                                        
                                    31  
                                    32  ec   cant_stop_root,rootctpt,
                                    33  	(The root control point can not be stopped.)
                        000013          	segdef  cant_stop_root
    000013  a0   077777 000072 
    000070  aa  162 157 157 164         	aci  "rootctpt",8
    000071  aa  143 164 160 164
    000072  aa  052 124 150 145         	acc  "The root control point can not be stopped."
    000073  aa  040 162 157 157
    000074  aa  164 040 143 157
    000075  aa  156 164 162 157
    000076  aa  154 040 160 157
    000077  aa  151 156 164 040
    000100  aa  143 141 156 040
    000101  aa  156 157 164 040
    000102  aa  142 145 040 163
    000103  aa  164 157 160 160
    000104  aa  145 144 056 000
                                        
                                    34  
                                    35  ec   cant_wakeup_when_stopped,stopped,
                                    36  	(A wakeup can not be sent to a stopped control point.)
                        000014          	segdef  cant_wakeup_when_stopped
    000014  a0   077777 000107 
    000105  aa  163 164 157 160         	aci  "stopped",8
    000106  aa  160 145 144 040
    000107  aa  064 101 040 167         	acc  "A wakeup can not be sent to a stopped control point."
    000110  aa  141 153 145 165
    000111  aa  160 040 143 141
    000112  aa  156 040 156 157
    000113  aa  164 040 142 145
    000114  aa  040 163 145 156
    000115  aa  164 040 164 157
    000116  aa  040 141 040 163
    000117  aa  164 157 160 160
    000120  aa  145 144 040 143
    000121  aa  157 156 164 162
    000122  aa  157 154 040 160
    000123  aa  157 151 156 164
    000124  aa  056 000 000 000
                                        
                                    37  
                                    38  ec   control_point_not_found,noctrlpt,
                                    39  	(The requested control point does not exist in this process.)
                        000015          	segdef  control_point_not_found
    000015  a0   077777 000127 
    000125  aa  156 157 143 164         	aci  "noctrlpt",8
    000126  aa  162 154 160 164
    000127  aa  073 124 150 145         	acc  "The requested control point does not exist in this process."
    000130  aa  040 162 145 161
    000131  aa  165 145 163 164
    000132  aa  145 144 040 143
    000133  aa  157 156 164 162
    000134  aa  157 154 040 160
    000135  aa  157 151 156 164
    000136  aa  040 144 157 145
    000137  aa  163 040 156 157
    000140  aa  164 040 145 170
    000141  aa  151 163 164 040
    000142  aa  151 156 040 164
    000143  aa  150 151 163 040
    000144  aa  160 162 157 143
    000145  aa  145 163 163 056
                                        
                                    40  
                                    41  ec   preferred_cant_be_stopped,stopped,
                                    42  	(A stopped control point can not be selected to be the preferred control point.)
                        000016          	segdef  preferred_cant_be_stopped
    000016  a0   077777 000150 
    000146  aa  163 164 157 160         	aci  "stopped",8
    000147  aa  160 145 144 040
    000150  aa  116 101 040 163         	acc  "A stopped control point can not be selected to be the preferred control point."
    000151  aa  164 157 160 160
    000152  aa  145 144 040 143
    000153  aa  157 156 164 162
    000154  aa  157 154 040 160
    000155  aa  157 151 156 164
    000156  aa  040 143 141 156
    000157  aa  040 156 157 164
    000160  aa  040 142 145 040
    000161  aa  163 145 154 145
    000162  aa  143 164 145 144
    000163  aa  040 164 157 040
    000164  aa  142 145 040 164
    000165  aa  150 145 040 160
    000166  aa  162 145 146 145
    000167  aa  162 162 145 144
    000170  aa  040 143 157 156
    000171  aa  164 162 157 154
    000172  aa  040 160 157 151
    000173  aa  156 164 056 000
                                        
                                    43  
                                    44  ec   preferred_stack_overflow,nopush,
                                    45  	(The stack of preferred control points is full.)
                        000017          	segdef  preferred_stack_overflow
    000017  a0   077777 000176 
    000174  aa  156 157 160 165         	aci  "nopush",8
    000175  aa  163 150 040 040
    000176  aa  056 124 150 145         	acc  "The stack of preferred control points is full."
    000177  aa  040 163 164 141
    000200  aa  143 153 040 157
    000201  aa  146 040 160 162
    000202  aa  145 146 145 162
    000203  aa  162 145 144 040
    000204  aa  143 157 156 164
    000205  aa  162 157 154 040
    000206  aa  160 157 151 156
    000207  aa  164 163 040 151
    000210  aa  163 040 146 165
    000211  aa  154 154 056 000
                                        
                                    46  
                                    47  ec   wakeup_ignored,started,
                                    48  	(The wakeup was ignored as the control point is currently ready.)
                        000020          	segdef  wakeup_ignored
    000020  a0   077777 000214 
    000212  aa  163 164 141 162         	aci  "started",8
    000213  aa  164 145 144 040
    000214  aa  077 124 150 145         	acc  "The wakeup was ignored as the control point is currently ready."
    000215  aa  040 167 141 153
    000216  aa  145 165 160 040
    000217  aa  167 141 163 040
    000220  aa  151 147 156 157
    000221  aa  162 145 144 040
    000222  aa  141 163 040 164
    000223  aa  150 145 040 143
    000224  aa  157 156 164 162
    000225  aa  157 154 040 160
    000226  aa  157 151 156 164
    000227  aa  040 151 163 040
    000230  aa  143 165 162 162
    000231  aa  145 156 164 154
    000232  aa  171 040 162 145
    000233  aa  141 144 171 056
                                        
                                    49  
                                    50  	end

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000234  5a   000003 000000 
    000235  5a   000132 600000 
    000236  aa   000000 000000 
    000237  55   000010 000002 
    000240  5a   000002 400003 
    000241  55   000006 000010 
    000242  aa  007 143 160 155
    000243  aa  137 145 164 137
    000244  55   000017 000003 
    000245  2a   000020 400001 
    000246  55   000013 000003 
    000247  aa  016 167 141 153         wakeup_ignored
    000250  aa  145 165 160 137
    000251  aa  151 147 156 157
    000252  aa  162 145 144 000
    000253  55   000031 000010 
    000254  2a   000017 400001 
    000255  55   000022 000003 
    000256  aa  030 160 162 145         preferred_stack_overflow
    000257  aa  146 145 162 162
    000260  aa  145 144 137 163
    000261  aa  164 141 143 153
    000262  aa  137 157 166 145
    000263  aa  162 146 154 157
    000264  aa  167 000 000 000
    000265  55   000043 000017 
    000266  2a   000016 400001 
    000267  55   000034 000003 
    000270  aa  031 160 162 145         preferred_cant_be_stopped
    000271  aa  146 145 162 162
    000272  aa  145 144 137 143
    000273  aa  141 156 164 137
    000274  aa  142 145 137 163
    000275  aa  164 157 160 160
    000276  aa  145 144 000 000
    000277  55   000054 000031 
    000300  2a   000015 400001 
    000301  55   000046 000003 
    000302  aa  027 143 157 156         control_point_not_found
    000303  aa  164 162 157 154
    000304  aa  137 160 157 151
    000305  aa  156 164 137 156
    000306  aa  157 164 137 146
    000307  aa  157 165 156 144
    000310  55   000066 000043 
    000311  2a   000014 400001 
    000312  55   000057 000003 
    000313  aa  030 143 141 156         cant_wakeup_when_stopped
    000314  aa  164 137 167 141
    000315  aa  153 145 165 160
    000316  aa  137 167 150 145
    000317  aa  156 137 163 164
    000320  aa  157 160 160 145
    000321  aa  144 000 000 000
    000322  55   000075 000054 
    000323  2a   000013 400001 
    000324  55   000071 000003 
    000325  aa  016 143 141 156         cant_stop_root
    000326  aa  164 137 163 164
    000327  aa  157 160 137 162
    000330  aa  157 157 164 000
    000331  55   000105 000066 
    000332  2a   000012 400001 
    000333  55   000100 000003 
    000334  aa  021 143 141 156         cant_destroy_root
    000335  aa  164 137 144 145
    000336  aa  163 164 162 157
    000337  aa  171 137 162 157
    000340  aa  157 164 000 000
    000341  55   000114 000075 
    000342  2a   000011 400001 
    000343  55   000110 000003 
    000344  aa  017 141 154 162         already_stopped
    000345  aa  145 141 144 171
    000346  aa  137 163 164 157
    000347  aa  160 160 145 144
    000350  55   000123 000105 
    000351  2a   000010 400001 
    000352  55   000117 000003 
    000353  aa  017 141 154 162         already_started
    000354  aa  145 141 144 171
    000355  aa  137 163 164 141
    000356  aa  162 164 145 144
    000357  55   000002 000114 
    000360  6a   000000 400002 
    000361  55   000126 000003 
    000362  aa  014 163 171 155         symbol_table
    000363  aa  142 157 154 137
    000364  aa  164 141 142 154
    000365  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000366  aa   000000 000015 
    000367  5a   000010 000000 
    000370  5a   000105 000000 
    000371  5a   000114 000000 
    000372  aa   000000 000000 
    000373  aa   000000 000000 
    000374  5a   000031 000000 
    000375  5a   000123 000000 
    000376  aa   000000 000000 
    000377  5a   000075 000000 
    000400  5a   000043 000000 
    000401  5a   000017 000000 
    000402  5a   000066 000000 
    000403  5a   000054 000000 

NO EXTERNAL NAMES

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000404  aa   000001 000000 
    000405  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    000406  50   000150 000000 
    000407  aa   000000 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  02   000234 000024 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000022 000027 
    000007  a2   000000 000012 
    000022  9a   777756 0000 46         *text|       
    000023  5a   000152 0000 00

FIRST REFERENCE TRAP LIST
     
    000024  aa   000000 000001 
    000025  aa   000000 000001 
    000026  2a   000022 000000 
    000027  aa   000000 000000 
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000004 
    000004  aa   000000 114732 
    000005  aa   732732 062314 
    000006  aa   000000 114774 
    000007  aa   612044 014510 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000174 
    000020  aa   000000 000143 
    000021  aa   000000 000156 
    000022  aa   000164 000143 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   040066 056067 
    000030  aa   040040 117143 
    000031  aa   164157 142145 
    000032  aa   162040 061071 
    000033  aa   070066 040040 
    000034  aa   107112 157150 
    000035  aa   156163 157156 
    000036  aa   056123 171163 
    000037  aa   115141 151156 
    000040  aa   164056 141040 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   055164 141162 
    000045  aa   147145 164040 
    000046  aa   114145 166145 
    000047  aa   154066 070040 
    000050  aa   154151 163164 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040040 040040 
    000057  aa   040040 040040 
    000060  aa   040040 040040 
    000061  aa   040040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000003 
    000066  aa   000102 000054 
    000067  aa   147714 750237 
    000070  aa   000000 114774 
    000071  aa   455666 400000 
    000072  aa   000115 000037 
    000073  aa   120665 316464 
    000074  aa   000000 112067 
    000075  aa   253504 600000 
    000076  aa   000125 000066 
    000077  aa   147714 750316 
    000100  aa   000000 114774 
    000101  aa   453561 000000 
    000102  aa   076163 160145          >special_ldd>install>MR12.0-1206>cpm_et_.alm
    000103  aa   143151 141154 
    000104  aa   137154 144144 
    000105  aa   076151 156163 
    000106  aa   164141 154154 
    000107  aa   076115 122061 
    000110  aa   062056 060055 
    000111  aa   061062 060066 
    000112  aa   076143 160155 
    000113  aa   137145 164137 
    000114  aa   056141 154155 
    000115  aa   076154 144144          >ldd>include>et_macros.incl.alm
    000116  aa   076151 156143 
    000117  aa   154165 144145 
    000120  aa   076145 164137 
    000121  aa   155141 143162 
    000122  aa   157163 056151 
    000123  aa   156143 154056 
    000124  aa   141154 155040 
    000125  aa   076163 160145          >special_ldd>install>MR12.0-1206>stack_header.incl.alm
    000126  aa   143151 141154 
    000127  aa   137154 144144 
    000130  aa   076151 156163 
    000131  aa   164141 154154 
    000132  aa   076115 122061 
    000133  aa   062056 060055 
    000134  aa   061062 060066 
    000135  aa   076163 164141 
    000136  aa   143153 137150 
    000137  aa   145141 144145 
    000140  aa   162056 151156 
    000141  aa   143154 056141 
    000142  aa   154155 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

                *text                    cpm_et_:       20.
          14    .._00000                 cpm_et_:       24.
          34    .._00001                 cpm_et_:       27.
          54    .._00002                 cpm_et_:       30.
          72    .._00003                 cpm_et_:       33.
         107    .._00004                 cpm_et_:       36.
         127    .._00005                 cpm_et_:       39.
         150    .._00006                 cpm_et_:       42.
         176    .._00007                 cpm_et_:       45.
         214    .._00010                 cpm_et_:       48.
          21    .code_end                cpm_et_:       20.
          10    .code_start              cpm_et_:       20.
           5    .loop                    cpm_et_:       20.
       77777    .segno                   cpm_et_:       20,   24,   27,   30,   33,   36,   39,   42,   45,   48.
           0    .trapproc                cpm_et_:       20.
          10    already_started          cpm_et_:       24.
          11    already_stopped          cpm_et_:       27.
        1170    call_offset              stack_header:        80.
          12    cant_destroy_root        cpm_et_:       30.
          13    cant_stop_root           cpm_et_:       33.
          14    cant_wakeup_when_stopped       cpm_et_:       36.
          10    codes                    cpm_et_:       20,   24,   27,   30,   33,   36,   39,   42,   45,   48.
          15    control_point_not_found  cpm_et_:       39.
        1174    entry_offset             stack_header:        84.
           0    messages                 cpm_et_:       20,   24,   27,   30,   33,   36,   39,   42,   45,   48.
          21    past_codes               cpm_et_:       20.
          16    preferred_cant_be_stopped      cpm_et_:       42.
          17    preferred_stack_overflow       cpm_et_:       45.
        1171    push_offset              stack_header:        81.
        1173    return_no_pop_offset     stack_header:        83.
        1172    return_offset            stack_header:        82.
          73    stach_header.trace_top_ptr     stack_header:        62.
          66    stack_header.assign_linkage_ptr      stack_header:        59.
          32    stack_header.bar_mode_sp       stack_header:        42.
          36    stack_header.call_op_ptr       stack_header:        44.
          10    stack_header.clr_ptr     stack_header:        27.
           6    stack_header.combined_stat_ptr       stack_header:        25.
           4    stack_header.cpm_data_ptr      stack_header:        24.
          13    stack_header.cpm_enabled       stack_header:        32.
          13    stack_header.cur_lot_size      stack_header:        31.
          64    stack_header.ect_ptr     stack_header:        58.
          46    stack_header.entry_op_ptr      stack_header:        49.
          70    stack_header.heap_header_ptr   stack_header:        60.
          74    stack_header.in_trace    stack_header:        63.
          52    stack_header.isot_ptr    stack_header:        52.
          26    stack_header.lot_ptr     cpm_et_:       20,
                                         stack_header:        39.
          12    stack_header.main_proc_invoked       stack_header:        29.
          12    stack_header.max_lot_size      stack_header:        28.
          20    stack_header.parent_ptr  stack_header:        36.
          34    stack_header.pl1_operators_ptr       stack_header:        43.
          40    stack_header.push_op_ptr       stack_header:        46.
          42    stack_header.return_op_ptr     stack_header:        47.
          44    stack_header.ret_no_pop_op_ptr       stack_header:        48.
          62    stack_header.rnt_ptr     stack_header:        57.
          12    stack_header.run_unit_depth    stack_header:        30.
          54    stack_header.sct_ptr     stack_header:        53.
          30    stack_header.signal_ptr  stack_header:        41.
          22    stack_header.stack_begin_ptr   stack_header:        37.
          24    stack_header.stack_end_ptr     stack_header:        38.
          14    stack_header.system_free_ptr   stack_header:        33.
          60    stack_header.sys_link_info_ptr       stack_header:        56.
          72    stack_header.trace_frames      stack_header:        61.
          50    stack_header.trans_op_tv_ptr   stack_header:        51.
          56    stack_header.unwinder_ptr      stack_header:        54.
          16    stack_header.user_free_ptr     stack_header:        34.
         100    stack_header_end         stack_header:        64.
           0    trace_frames.count       stack_header:        69.
           1    trace_frames.top_ptr     stack_header:        70.
         551    tv_offset                stack_header:        75,   80,   81,   82,   83,   84.
          20    wakeup_ignored           cpm_et_:       48.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
