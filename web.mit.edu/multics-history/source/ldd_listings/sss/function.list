	COMPILATION LISTING OF SEGMENT function
	Compiled by: Multics PL/I Compiler, Release 32c, of June 16, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 07/31/89  1356.3 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 /*	Modified:	1 July 1977 by RAB to fix 1637	*/
       12 /*	Modified: 26 December 1979 by PCK to implement by name assignment */
       13 /*	Modified: 23 June 1981 by EBush to increase max size of arg lists */
       14 
       15 function: proc(blk,stmnt,input_tree,s,context) returns(ptr);
       16 
       17 dcl	(blk,stmnt,tree,input_tree,s,p,old,arg_list,arg_list_op,p_desc_list,save_arg_list_op) ptr,
       18 	(a,op,q,r,sa,t) ptr,
       19 	(subs,sym,array_ptr,bound_ptr,based_ref,based_sym,descr_ptr) ptr,
       20 	(newarray,newbound) ptr,
       21 	(i,j,k,n,called,caller) fixed bin(15),
       22 	desc_list ptr,
       23 
       24 	descriptors_required bit(1);
       25 
       26 
       27 dcl	pl1_stat_$locator(128) ptr ext static;
       28 dcl	pl1_stat_$index fixed bin(15) ext static;
       29 
       30 dcl	(addr,divide,hbound,length,null,substr) builtin;
       31 
  1     1 /* BEGIN INCLUDE FILE ... semant.incl.pl1 */
  1     2 
  1     3 /* Modified: 30 Aug 1979 by PCK to fix 1804 and 1823 */
  1     4 /* Modified: 26 Aug 1979 by PCK to implement by name assignment */
  1     5 
  1     6 
  1     7 declare	alloc_semantics	entry(pointer,pointer,pointer);
  1     8 			/* parameter 1:	(input)	block node pointer		*/
  1     9 			/* parameter 2:	(input)	statement node pointer	*/
  1    10 			/* parameter 3:	(in/out)	tree pointer		*/
  1    11 
  1    12 declare	alloc_semantics$init_only entry(pointer,pointer,pointer);
  1    13 			/* parameter 1:	(input)	qualifier pointer		*/
  1    14 			/* parameter 2:	(input)	statement node pointer	*/
  1    15 			/* parameter 3:	(input)	symbol node pointer		*/
  1    16 
  1    17 declare	builtin		entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  1    18 			returns(pointer);
  1    19 			/* parameter 1:	(input)	block node pointer		*/
  1    20 			/* parameter 2:	(input)	statement node pointer	*/
  1    21 			/* parameter 3:	(input)	tree pointer		*/
  1    22 			/* parameter 4:	(input)	subscript pointer		*/
  1    23 			/* parameter 5:	(input)	builtin symbol node pointer	*/
  1    24 			/* parameter 6:	(in/out)	context			*/
  1    25 			/* return:	(output)	tree pointer		*/
  1    26 
  1    27 declare	check_star_extents	entry(pointer,pointer);
  1    28 			/* parameter 1:	(input) symbol node of procedure	*/
  1    29 			/* parameter 2:	(input) argument list pointer		*/
  1    30 
  1    31 declare	compare_declaration	entry(pointer,pointer,bit(1) aligned) reducible
  1    32 			returns(bit(1) aligned);
  1    33 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  1    34 			/* parameter 2:	(input)	symbol node ptr	*/
  1    35 			/* parameter 3:	(input)	"1"b if aligned attribute ignored for string	*/
  1    36 			/* return:	(output)	compare bit		*/
  1    37 
  1    38 declare	context_processor	entry(pointer,label);
  1    39 			/* parameter 1:	(input)	root block node pointer	*/
  1    40 
  1    41 declare	declare		entry(pointer);
  1    42 			/* parameter 1:	(input)	symbol node pointer		*/
  1    43 
  1    44 declare	declare_structure	entry(pointer);
  1    45 			/* parameter 1:	(input)	symbol node pointer		*/
  1    46 
  1    47 declare	defined_reference	entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  1    48 			returns(pointer);
  1    49 			/* parameter 1:	(input)	block node pointer		*/
  1    50 			/* parameter 2:	(input)	statement node pointer	*/
  1    51 			/* parameter 3:	(input)	tree pointer		*/
  1    52 			/* parameter 4:	(input)	subscript list pointer or null*/
  1    53 			/* parameter 5:	(input)	symbol node pointer		*/
  1    54 			/* parameter 6:	(in/out)	context			*/
  1    55 			/* return:	(output)	tree pointer		*/
  1    56 
  1    57 declare	do_semantics	entry(pointer,pointer,pointer);
  1    58 			/* parameter 1:	(input)	block node pointer		*/
  1    59 			/* parameter 2:	(input)	statement node pointer	*/
  1    60 			/* parameter 3:	(input)	tree pointer		*/
  1    61 
  1    62 declare	expand_assign	entry(pointer,pointer,pointer,bit(36) aligned,pointer)
  1    63 			returns(pointer);
  1    64 			/* parameter 1:	(input)	block node pointer		*/
  1    65 			/* parameter 2:	(input)	statement node pointer	*/
  1    66 			/* parameter 3:	(input)	tree pointer		*/
  1    67 			/* parameter 4:	(in/out)	context			*/
  1    68 			/* parameter 5:	(input)	aggregate reference node ptr	*/
  1    69 			/* return:	(output)	tree pointer		*/
  1    70 
  1    71 declare	expand_by_name	entry(pointer,pointer,pointer);
  1    72 			/* parameter 1:	(input)	block node pointer		*/
  1    73 			/* parameter 2:	(input)	statement node pointer	*/
  1    74 			/* parameter 3:	(input/output)	tree pointer		*/
  1    75 
  1    76 declare	expand_infix	entry(pointer,pointer,pointer,bit(36) aligned)
  1    77 			returns(pointer);
  1    78 			/* parameter 1:	(input)	block node pointer		*/
  1    79 			/* parameter 2:	(input)	statement node pointer	*/
  1    80 			/* parameter 3:	(input)	tree pointer		*/
  1    81 			/* parameter 4:	(in/out)	context			*/
  1    82 			/* return:	(output)	tree pointer		*/
  1    83 
  1    84 declare	expand_initial	entry(pointer,pointer,pointer);
  1    85 			/* parameter 1:	(input)	symbol node pointer		*/
  1    86 			/* parameter 2:	(input)	statement node pointer	*/
  1    87 			/* parameter 3:	(input)	locator			*/
  1    88 
  1    89 declare	expand_prefix	entry(pointer,pointer,pointer,bit(36) aligned)
  1    90 			returns(pointer);
  1    91 			/* parameter 1:	(input)	block node pointer		*/
  1    92 			/* parameter 2:	(input)	statement node pointer	*/
  1    93 			/* parameter 3:	(input)	tree pointer		*/
  1    94 			/* parameter 4:	(in/out)	context			*/
  1    95 			/* return:	(output)	tree pointer		*/
  1    96 
  1    97 declare	expand_primitive	entry(pointer,pointer,pointer,bit(36) aligned)
  1    98 			returns(pointer);
  1    99 			/* parameter 1:	(input)	block node pointer		*/
  1   100 			/* parameter 2:	(input)	statement node pointer	*/
  1   101 			/* parameter 3:	(input)	tree pointer		*/
  1   102 			/* parameter 4:	(input)	context			*/
  1   103 			/* return:	(output)	tree pointer		*/
  1   104 
  1   105 declare	expression_semantics entry(pointer,pointer,pointer,bit(36) aligned)
  1   106 			returns(pointer);
  1   107 			/* parameter 1:	(input)	block node pointer		*/
  1   108 			/* parameter 2:	(input)	statement node pointer	*/
  1   109 			/* parameter 3:	(input)	tree pointer		*/
  1   110 			/* parameter 4:	(in/out)	context			*/
  1   111 			/* return:	(output)	tree pointer		*/
  1   112 
  1   113 declare	fill_refer	entry(pointer,pointer,bit(1) aligned)
  1   114 			returns(pointer);
  1   115 			/* parameter 1:	(input)	null,ref node,op node ptr */
  1   116 			/* parameter 2:	(input)	null,ref node,op node ptr */
  1   117 			/* parameter 3:	(input)	copy switch for param 2 */
  1   118 			/* return:	(output)	ptr to processed tree */
  1   119 
  1   120 declare	io_data_list_semantics$format_list_semantics entry(pointer,pointer,pointer);
  1   121 			/* parameter 1:	(input)	block node pointer		*/
  1   122 			/* parameter 2:	(input)	statement node pointer	*/
  1   123 			/* parameter 3:	(in/out)	tree pointer		*/
  1   124 
  1   125 declare	function		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   126 			returns(pointer);
  1   127 			/* parameter 1:	(input)	block node pointer		*/
  1   128 			/* parameter 2:	(input)	statement node pointer	*/
  1   129 			/* parameter 3:	(input)	tree pointer		*/
  1   130 			/* parameter 4:	(input)	symbol node pointer		*/
  1   131 			/* parameter 5:	(in/out)	context			*/
  1   132 			/* return:	(output)	tree pointer		*/
  1   133 
  1   134 declare	generic_selector	entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   135 			returns(pointer);
  1   136 			/* parameter 1:	(input)	block node pointer	*/
  1   137 			/* parameter 2:	(input)	statement node pointer	*/
  1   138 			/* parameter 3:	(input)	tree pointer	*/
  1   139 			/* parameter 4:	(input)	pointer to argument list	*/
  1   140 			/* parameter 5:	(in/out)	context		*/
  1   141 			/* return:	(output)	tree pointer	*/
  1   142 
  1   143 declare	io_data_list_semantics entry(pointer,pointer,pointer);
  1   144 			/* parameter 1:	(input)	block node pointer		*/
  1   145 			/* parameter 2:	(input)	statement node pointer	*/
  1   146 			/* parameter 3:	(input)	operator node pointer	*/
  1   147 
  1   148 declare	io_semantics	entry(pointer,pointer,pointer);
  1   149 			/* parameter 1:	(input)	block node pointer		*/
  1   150 			/* parameter 2:	(input)	statement node pointer	*/
  1   151 			/* parameter 3:	(input)	tree pointer		*/
  1   152 
  1   153 declare	lookup		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   154 			returns(bit(1) aligned);
  1   155 			/* parameter 1:	(input)	block node pointer		*/
  1   156 			/* parameter 2:	(input)	stmnt|symbol node pointer	*/
  1   157 			/* parameter 3:	(input)	token or reference node ptr	*/
  1   158 			/* parameter 4:	(output)	symbol node pointer		*/
  1   159 			/* parameter 5:	(in/out)	context			*/
  1   160 			/* return:	(output)	symbol found bit		*/
  1   161 
  1   162 declare	make_non_quick	entry(pointer, bit (36) aligned);
  1   163 			/* parameter 1:	(input)	tree pointer	*/
  1   164 			/* parameter 2:	(input)	reason why being made nonquick */
  1   165 
  1   166 declare	match_arguments	entry(pointer,pointer) reducible
  1   167 			returns(bit(1) aligned);
  1   168 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  1   169 			/* parameter 2:	(input)	reference or symbol node ptr	*/
  1   170 			/* return:	(output)	compare bit		*/
  1   171 
  1   172 declare	offset_adder	entry(pointer,fixed binary(31),fixed binary(3),bit(1) aligned,
  1   173 			      pointer,fixed binary(31),fixed binary(3),bit(1) aligned,bit(1));
  1   174 			/* parameter 1:	(in/out)	tree pointer		*/
  1   175 			/* parameter 2:	(in/out)	constant size		*/
  1   176 			/* parameter 3:	(in/out)	units			*/
  1   177 			/* parameter 4:	(in/out) 	ON if units ^= word_, but tree in words	*/
  1   178 			/* parameter 5:	(input)	tree pointer		*/
  1   179 			/* parameter 6:	(input)	constant size		*/
  1   180 			/* parameter 7:	(input)	units			*/
  1   181 			/* parameter 8:	(input)	ON if units ^= word_, but tree in words	*/
  1   182 			/* parameter 9:	(input)	ON if should not improve units	*/
  1   183 
  1   184 declare	operator_semantics	entry(pointer,pointer,pointer,bit(36) aligned)
  1   185 			returns(pointer);
  1   186 			/* parameter 1:	(input)	block node pointer		*/
  1   187 			/* parameter 2:	(input)	statement node pointer	*/
  1   188 			/* parameter 3:	(input)	tree pointer		*/
  1   189 			/* parameter 4:	(in/out)	context			*/
  1   190 			/* return:	(output)	tree pointer		*/
  1   191 
  1   192 declare	propagate_bit	entry(pointer,fixed binary(15));
  1   193 			/* parameter 1:	(input)	symbol node pointer		*/
  1   194 			/* parameter 2:	(input)	attribute number		*/
  1   195 
  1   196 declare	semantic_translator$call_es entry(pointer,pointer,pointer,label,bit(1) aligned)
  1   197 			returns(pointer);
  1   198 			/* parameter 1:	(input)	block ptr	*/
  1   199 			/* parameter 2:	(input)	statement ptr	*/
  1   200 			/* parameter 3:	(input)	tree ptr	*/
  1   201 			/* parameter 4:	(input)	failure label	*/
  1   202 			/* parameter 5:	(input)	"1"b -- convert to integer	*/
  1   203 			/* return:	(output)	tree ptr		*/
  1   204 
  1   205 declare	simplify_expression	entry(pointer,fixed bin,bit(1)aligned);
  1   206 			/* parameter 1:	(in/out)	tree pointer		*/
  1   207 			/* parameter 2:	(output)	value of constant, if the entire tree
  1   208*						is simplified		*/
  1   209 			/* parameter 3:	(output)	bit indicating if the tree has
  1   210*						been simplified		*/
  1   211 
  1   212 declare	simplify_offset	entry(pointer,bit(36) aligned);
  1   213 			/* parameter 1:	(input)	reference node pointer	*/
  1   214 			/* parameter 2:	(input)	context			*/
  1   215 
  1   216 declare	subscripter	entry(pointer,pointer,pointer,pointer,pointer)
  1   217 			returns(pointer);
  1   218 			/* parameter 1:	(input)	block node pointer		*/
  1   219 			/* parameter 2:	(input)	statement node pointer	*/
  1   220 			/* parameter 3:	(input)	tree pointer		*/
  1   221 			/* parameter 4:	(in/out)	subscript list pointer	*/
  1   222 			/* parameter 5:	(input)	symbol node pointer		*/
  1   223 			/* return:	(output)	reference node pointer	*/
  1   224 
  1   225 declare	validate		entry(pointer);
  1   226 			/* parameter 1:	(input)	symbol node pointer		*/
  1   227 
  2     1 /****^  *********************************************************
  2     2*        *                                                       *
  2     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  2     4*        *                                                       *
  2     5*        ********************************************************* */
  2     6 
  2     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  2     8 
  2     9 
  2    10 /****^  HISTORY COMMENTS:
  2    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  2    12*     install(89-07-31,MR12.3-1066):	
  2    13*     Removed the obsolete parameter source_line from the dcl of error_().
  2    14*                                                   END HISTORY COMMENTS */
  2    15 
  2    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  2    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  2    18* */
  2    19 
  2    20 declare	adjust_count	entry(pointer);
  2    21 			/* parameter 1:	(input)	any node pointer		*/
  2    22 
  2    23 declare	bindec		entry(fixed bin(31)) reducible
  2    24 			returns(character(12) aligned);
  2    25 			/* parameter 1:	(input)	bin value			*/
  2    26 			/* return:	(output)	character value with blanks	*/
  2    27 
  2    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  2    29 			returns(character(12) aligned varying);
  2    30 			/* parameter 1:	(input)	binary value		*/
  2    31 			/* return:	(output)	char value without blanks	*/
  2    32 
  2    33 declare	binoct		entry(fixed bin(31)) reducible
  2    34 			returns(char(12) aligned);
  2    35 			/* parameter 1:	(input)	binary value		*/
  2    36 			/* return:	(output)	char value with blanks	*/
  2    37 
  2    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  2    39 			returns(char(12) aligned);
  2    40 			/* parameter 1:	(input)	binary value		*/
  2    41 			/* return:	(output)	right-aligned char value	*/
  2    42 
  2    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  2    44 			returns(char(12) varying aligned);
  2    45 			/* parameter 1:	(input)	binary value		*/
  2    46 			/* returns:	(output)	char value without blanks	*/
  2    47 
  2    48 declare	compare_expression	entry(pointer,pointer) reducible
  2    49 			returns(bit(1) aligned);
  2    50 			/* parameter 1:	(input)	any node pointer		*/
  2    51 			/* parameter 2:	(input)	any node pointer		*/
  2    52 			/* return:	(output)	compare bit		*/
  2    53 
  2    54 declare	constant_length	entry (pointer, fixed bin (71))
  2    55 			returns (bit (1) aligned);
  2    56 			/* parameter 1:	(input)	reference node pointer	*/
  2    57 			/* parameter 2:	(input)	value of constant length	*/
  2    58 			/* return:	(output)	"1"b if constant length	*/
  2    59 
  2    60 declare	convert		entry(pointer,bit(36) aligned)
  2    61 			returns(pointer);
  2    62 			/* parameter 1:	(input)	any node pointer		*/
  2    63 			/* parameter 2:	(input)	target type		*/
  2    64 			/* return:	(output)	target value tree pointer	*/
  2    65 
  2    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  2    67 			returns(pointer);
  2    68 			/* parameter 1:	(input)	any node pointer		*/
  2    69 			/* parameter 2:	(input)	target type		*/
  2    70 			/* return:	(output)	target value tree pointer	*/
  2    71 
  2    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  2    73 			returns(pointer);
  2    74 			/* parameter 1:	(input)	any node pointer		*/
  2    75 			/* parameter 2:	(input)	target type		*/
  2    76 			/* return:	(output)	target value tree pointer	*/
  2    77 
  2    78 declare	convert$validate	entry(pointer,pointer);
  2    79 			/* parameter 1:	(input)	source value tree pointer	*/
  2    80 			/* parameter 2:	(input)	target reference node pointer	*/
  2    81 
  2    82 declare	convert$to_target_fb entry(pointer,pointer)
  2    83 			returns(pointer);
  2    84 			/* parameter 1:	(input)	source value tree pointer	*/
  2    85 			/* parameter 2:	(input)	target reference node pointer	*/
  2    86 			/* return:	(output)	target value tree pointer	*/
  2    87 
  2    88 declare	convert$to_target	entry(pointer,pointer)
  2    89 			returns(pointer);
  2    90 			/* parameter 1:	(input)	source value tree pointer	*/
  2    91 			/* parameter 2:	(input)	target reference node pointer	*/
  2    92 			/* return:	(output)	target value tree pointer	*/
  2    93 
  2    94 declare	copy_expression	entry(pointer unaligned)
  2    95 			returns(pointer);
  2    96 			/* parameter 1:	(input)	any node pointer		*/
  2    97 			/* return:	(output)	any node pointer		*/
  2    98 
  2    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  2   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  2   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  2   102 
  2   103 declare	copy_unique_expression entry(pointer)
  2   104 			returns(pointer);
  2   105 			/* parameter 1:	(input)	any node pointer		*/
  2   106 			/* return:	(output)	any node pointer		*/
  2   107 
  2   108 declare	create_array	entry()
  2   109 			returns(pointer);
  2   110 			/* return:	(output)	array node pointer		*/
  2   111 
  2   112 declare	create_block	entry(bit(9) aligned,pointer)
  2   113 			returns(pointer);
  2   114 			/* parameter 1:	(input)	block type		*/
  2   115 			/* parameter 2:	(input)	father block node pointer	*/
  2   116 			/* return:	(output)	block node pointer		*/
  2   117 
  2   118 declare	create_bound	entry()
  2   119 			returns(pointer);
  2   120 			/* return:	(output)	bound node pointer		*/
  2   121 
  2   122 declare	create_context	entry(pointer,pointer)
  2   123 			returns(pointer);
  2   124 			/* parameter 1:	(input)	block node pointer		*/
  2   125 			/* parameter 2:	(input)	token pointer		*/
  2   126 			/* return:	(output)	context node pointer	*/
  2   127 
  2   128 declare	create_cross_reference entry()
  2   129 			returns(pointer);
  2   130 			/* return:	(output)	cross reference node pointer	*/
  2   131 
  2   132 declare	create_default	entry
  2   133 			returns(pointer);
  2   134 			/* return:	(output)	default node pointer	*/
  2   135 
  2   136 declare	create_identifier	entry()
  2   137 			returns(pointer);
  2   138 			/* return:	(output)	token node pointer		*/
  2   139 
  2   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  2   141 			returns(pointer);
  2   142 			/* parameter 1:	(input)	block node pointer		*/
  2   143 			/* parameter 2:	(input)	token node pointer		*/
  2   144 			/* parameter 3:	(input)	declare type		*/
  2   145 			/* return:	(output)	label node pointer		*/
  2   146 
  2   147 declare	create_list	entry(fixed bin(15))
  2   148 			returns(pointer);
  2   149 			/* parameter 1:	(input)	number of list elements	*/
  2   150 			/* return:	(output)	list node pointer		*/
  2   151 
  2   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  2   153 			returns(pointer);
  2   154 			/* parameter 1:	(input)	operator type		*/
  2   155 			/* parameter 2:	(input)	number of operands		*/
  2   156 			/* return:	(output)	operator node pointer	*/
  2   157 
  2   158 declare	create_reference	entry(pointer)
  2   159 			returns(pointer);
  2   160 			/* parameter 1:	(input)	symbol node pointer		*/
  2   161 			/* return:	(output)	reference node pointer	*/
  2   162 
  2   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   164 			returns(pointer);
  2   165 			/* parameter 1:	(input)	statement type		*/
  2   166 			/* parameter 2:	(input)	block node pointer		*/
  2   167 			/* parameter 3:	(input)	label node pointer		*/
  2   168 			/* parameter 4:	(input)	conditions		*/
  2   169 			/* return:	(output)	statement node pointer	*/
  2   170 
  2   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   172 			returns(pointer);
  2   173 			/* parameter 1:	(input)	statement type		*/
  2   174 			/* parameter 2:	(input)	block node pointer		*/
  2   175 			/* parameter 3:	(input)	label node pointer		*/
  2   176 			/* parameter 4:	(input)	conditions		*/
  2   177 			/* return:	(output)	statement node pointer	*/
  2   178 
  2   179 declare	create_storage	entry(fixed bin(15))
  2   180 			returns(pointer);
  2   181 			/* parameter 1:	(input)	number of words		*/
  2   182 			/* return:	(output)	storage block pointer	*/
  2   183 
  2   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  2   185 			returns(pointer);
  2   186 			/* parameter 1:	(input)	block node pointer		*/
  2   187 			/* parameter 2:	(input)	token node pointer		*/
  2   188 			/* parameter 3:	(input)	declare type		*/
  2   189 			/* return:	(output)	symbol node pointer		*/
  2   190 
  2   191 declare	create_token	entry (character (*), bit (9) aligned)
  2   192 			returns (ptr);
  2   193 			/* parameter 1:	(input)	token string		*/
  2   194 			/* parameter 2:	(input)	token type		*/
  2   195 			/* return:	(output)	token node ptr		*/
  2   196 
  2   197 declare	create_token$init_hash_table entry ();
  2   198 
  2   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  2   200 			returns (ptr);
  2   201 			/* parameter 1:	(input)	token string		*/
  2   202 			/* parameter 2:	(input)	token type		*/
  2   203 			/* parameter 3:	(input)	protected flag		*/
  2   204 			/* return:	(output)	token node ptr		*/
  2   205 
  2   206 declare	decbin		entry(character(*) aligned) reducible
  2   207 			returns(fixed bin(31));
  2   208 			/* parameter 1:	(input)	decimal character string	*/
  2   209 			/* return:	(output)	binary value		*/
  2   210 
  2   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  2   212 			returns(pointer);
  2   213 			/* parameter 1:	(input)	value			*/
  2   214 			/* parameter 2:	(input)	type			*/
  2   215 			/* parameter 3:	(input)	size			*/
  2   216 			/* parameter 4:	(input)	scale			*/
  2   217 			/* return:	(output)	reference node pointer	*/
  2   218 
  2   219 declare	declare_constant$bit entry(bit(*) aligned)
  2   220 			returns(pointer);
  2   221 			/* parameter 1:	(input)	bit			*/
  2   222 			/* return:	(output)	reference node pointer	*/
  2   223 
  2   224 declare	declare_constant$char entry(character(*) aligned)
  2   225 			returns(pointer);
  2   226 			/* parameter 1:	(input)	character			*/
  2   227 			/* return:	(output)	reference node pointer	*/
  2   228 
  2   229 declare	declare_constant$desc entry(bit(*) aligned)
  2   230 			returns(pointer);
  2   231 			/* parameter 1:	(input)	descriptor bit value	*/
  2   232 			/* return:	(output)	reference node pointer	*/
  2   233 
  2   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  2   235 			returns(pointer);
  2   236 			/* parameter 1:	(input)	integer			*/
  2   237 			/* return:	(output)	reference node pointer	*/
  2   238 
  2   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   240 			returns(pointer);
  2   241 			/* parameter 1:	(input)	block node pointer		*/
  2   242 			/* parameter 2:	(input)	statement node pointer	*/
  2   243 			/* parameter 3:	(input)	symbol node pointer		*/
  2   244 			/* parameter 4:	(input)	loc pointer		*/
  2   245 			/* parameter 5:	(input)	array descriptor bit
  2   246*						cross_section bit	*/
  2   247 			/* return:	(output)	reference node pointer	*/
  2   248 
  2   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   250 			returns(pointer);
  2   251 			/* parameter 1:	(input)	block node pointer	*/
  2   252 			/* parameter 2:	(input)	statement node pointer 	*/
  2   253 			/* parameter 3:	(input)	symbol node pointer	*/
  2   254 			/* parameter 4:	(input)	loc pointer	*/
  2   255 			/* parameter 5:	(input)	array descriptor bit
  2   256*						cross_section bit	*/
  2   257 			/* return:	(output)	reference node pointer	*/
  2   258 
  2   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   260 			returns(pointer);
  2   261 			/* parameter 1:	(input)	block node pointer		*/
  2   262 			/* parameter 2:	(input)	statement node pointer	*/
  2   263 			/* parameter 3:	(input)	symbol node pointer		*/
  2   264 			/* parameter 4:	(input)	loc pointer		*/
  2   265 			/* parameter 5:	(input)	array descriptor bit
  2   266*						cross_section bit	*/
  2   267 			/* return:	(output)	reference node pointer	*/
  2   268 
  2   269 declare	declare_integer	entry(pointer)
  2   270 			returns(pointer);
  2   271 			/* parameter 1:	(input)	block node pointer		*/
  2   272 			/* return:	(output)	reference node pointer 	*/
  2   273 
  2   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  2   275 			/* parameter 1:	(input)	picture string		*/
  2   276 			/* parameter 2:	(input)	symbol node pointer		*/
  2   277 			/* parameter 3:	(output)	error code, if any		*/
  2   278 
  2   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  2   280 			returns(pointer);
  2   281 			/* parameter 1:	(input)	picture string		*/
  2   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  2   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  2   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  2   285 			/* return:	(output)	reference node pointer	*/
  2   286 
  2   287 declare	declare_pointer	entry(pointer)
  2   288 			returns(pointer);
  2   289 			/* parameter 1:	(input)	block node pointer		*/
  2   290 			/* return:	(output)	reference node pointer	*/
  2   291 
  2   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  2   293 			returns(pointer);
  2   294 			/* parameter 1:	(input)	type			*/
  2   295 			/* parameter 2:	(input)	precision			*/
  2   296 			/* parameter 3:	(input)	scale			*/
  2   297 			/* parameter 4:	(input)	length			*/
  2   298 			/* return:	(output)	reference node pointer	*/
  2   299 
  2   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  2   301 			returns(char(120) varying);
  2   302 			/* parameter 1:	(input)	node pointer		*/
  2   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   304 			/* return:	(output)	source line id		*/
  2   305 
  2   306 declare	decode_source_id	entry(
  3     1 			1 structure unaligned,
  3     2 			  2 /* file_number */	bit(8),
  3     3 			  2 /* line_number */	bit(14),
  3     4 			  2 /* stmt_number */	bit(5),
  2   307 
  2   308 			bit(1) aligned)
  2   309 			returns(char(120) varying);
  2   310 			/* parameter 1:	(input)	source id			*/
  2   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   312 			/* return:	(output)	source line id		*/
  2   313 
  2   314 declare	error		entry(fixed bin(15),pointer,pointer);
  2   315 			/* parameter 1:	(input)	error number		*/
  2   316 			/* parameter 2:	(input)	statement node pointer or null*/
  2   317 			/* parameter 3:	(input)	token node pointer 		*/
  2   318 
  2   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  2   320 			/* parameter 1:	(input)	error number		*/
  2   321 			/* parameter 2:	(input)	statement node pointer or null*/
  2   322 			/* parameter 3:	(input)	token node pointer 		*/
  2   323 
  2   324 declare	error_		entry(fixed bin(15),
  4     1 			1 structure unaligned,
  4     2 			  2 /* file_number */	bit(8),
  4     3 			  2 /* line_number */	bit(14),
  4     4 			  2 /* stmt_number */	bit(5),
  2   325 
  2   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  2   327 			/* parameter 1:	(input)	error number		*/
  2   328 			/* parameter 2:	(input)	statement id		*/
  2   329 			/* parameter 3:	(input)	any node pointer		*/
  2   330 			/* parameter 4:	(input)	source segment		*/
  2   331 			/* parameter 5:	(input)	source starting character	*/
  2   332 			/* parameter 6:	(input)	source length		*/
  2   333 
  2   334 declare	error_$no_text	entry(fixed bin(15),
  5     1 			1 structure unaligned,
  5     2 			  2 /* file_number */	bit(8),
  5     3 			  2 /* line_number */	bit(14),
  5     4 			  2 /* stmt_number */	bit(5),
  2   335 
  2   336 			pointer);
  2   337 			/* parameter 1:	(input)	error number		*/
  2   338 			/* parameter 2:	(input)	statement id		*/
  2   339 			/* parameter 3:	(input)	any node pointer		*/
  2   340 
  2   341 declare	error_$initialize_error entry();
  2   342 
  2   343 declare	error_$finish	entry();
  2   344 
  2   345 declare	free_node		entry(pointer);
  2   346 			/* parameter 1:	any node pointer			*/
  2   347 
  2   348 declare	get_array_size	entry(pointer,fixed bin(3));
  2   349 			/* parameter 1:	(input)	symbol node pointer		*/
  2   350 			/* parameter 2:	(input)	units			*/
  2   351 
  2   352 declare	get_size		entry(pointer);
  2   353 			/* parameter 1:	(input)	symbol node pointer		*/
  2   354 
  2   355 declare	merge_attributes	external entry(pointer,pointer)
  2   356 			returns(bit(1) aligned);
  2   357 			/* parameter 1:	(input)	target symbol node pointer */
  2   358 			/* parameter 2:	(input)	source symbol node pointer */
  2   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  2   360 
  2   361 declare	optimizer		entry(pointer);
  2   362 			/* parameter 1:	(input)	root pointer		*/
  2   363 
  2   364 declare	parse_error	entry(fixed bin(15),pointer);
  2   365 			/* parameter 1:	(input)	error number		*/
  2   366 			/* parameter 2:	(input)	any node pointer		*/
  2   367 
  2   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  2   369 			/* parameter 1:	(input)	error number		*/
  2   370 			/* parameter 2:	(input)	any node pointer		*/
  2   371 
  2   372 declare	pl1_error_print$write_out
  2   373 			entry(fixed bin(15),
  6     1 			1 structure unaligned,
  6     2 			  2 /* file_number */	bit(8),
  6     3 			  2 /* line_number */	bit(14),
  6     4 			  2 /* stmt_number */	bit(5),
  2   374 
  2   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  2   376 			/* parameter 1:	(input)	error number		*/
  2   377 			/* parameter 2:	(input)	statement identification	*/
  2   378 			/* parameter 3:	(input)	any node pointer		*/
  2   379 			/* parameter 4:	(input)	source segment		*/
  2   380 			/* parameter 5:	(input)	source character index	*/
  2   381 			/* parameter 6:	(input)	source length		*/
  2   382 			/* parameter 7:	(input)	source line		*/
  2   383 
  2   384 declare	pl1_error_print$listing_segment
  2   385 			entry(fixed bin(15),
  7     1 			1 structure unaligned,
  7     2 			  2 /* file_number */	bit(8),
  7     3 			  2 /* line_number */	bit(14),
  7     4 			  2 /* stmt_number */	bit(5),
  2   386 
  2   387 			pointer);
  2   388 			/* parameter 1:	(input)	error number		*/
  2   389 			/* parameter 2:	(input)	statement identification	*/
  2   390 			/* parameter 3:	(input)	token node pointer		*/
  2   391 
  2   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  2   393 			/* parameter 1:	(input)	string			*/
  2   394 
  2   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  2   396 			/* parameter 1:	(input)	string			*/
  2   397 
  2   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  2   399 			/* parameter 1:	(input)	string			*/
  2   400 			/* parameter 2:	(input)	string length or 0		*/
  2   401 
  2   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  2   403 			/* parameter 1:	(input)	string			*/
  2   404 			/* parameter 2:	(input)	string length or 0		*/
  2   405 
  2   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  2   407 			/* parameter 1:	(input)	string pointer		*/
  2   408 			/* parameter 2:	(input)	string size		*/
  2   409 
  2   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  2   411 			/* parameter 1:	(input)	string pointer		*/
  2   412 			/* parameter 2:	(input)	string length or 0		*/
  2   413 
  2   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  2   415 			/* parameter 1:	(input)	string			*/
  2   416 			/* parameter 2:	(input)	length			*/
  2   417 
  2   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  2   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  2   420 			/* parameter 2:	(input)	line number		*/
  2   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  2   422 			/* parameter 4:	(input)	number of chars to copy	*/
  2   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  2   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  2   425 
  2   426 declare	refer_extent	entry(pointer,pointer);
  2   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  2   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  2   429 
  2   430 declare	reserve$clear	entry()
  2   431 			returns(pointer);
  2   432 			/* return:	(output)	pointer			*/
  2   433 
  2   434 declare	reserve$declare_lib	entry(fixed bin(15))
  2   435 			returns(pointer);
  2   436 			/* parameter 1:	(input)	builtin function number	*/
  2   437 			/* return:	(output)	pointer			*/
  2   438 
  2   439 declare	reserve$read_lib	entry(fixed bin(15))
  2   440 			returns(pointer);
  2   441 			/* parameter 1:	(input)	builtin function number	*/
  2   442 			/* return:	(output)	pointer			*/
  2   443 
  2   444 declare	semantic_translator	entry();
  2   445 
  2   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  2   447 			/* parameter 1:	(input)	error number		*/
  2   448 			/* parameter 2:	(input)	any node pointer		*/
  2   449 
  2   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  2   451 			/* parameter 1:	(input)	error number		*/
  2   452 			/* parameter 2:	(input)	any node pointer		*/
  2   453 
  2   454 declare	share_expression	entry(ptr)
  2   455 			returns(ptr);
  2   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  2   457 			/* return:	(output)	tree pointer or null	*/
  2   458 
  2   459 declare	token_to_binary	entry(ptr) reducible
  2   460 			returns(fixed bin(31));
  2   461 			/* parameter 1:	(input)	token node pointer		*/
  2   462 			/* return:	(output)	converted binary value	*/
  2   463 
  2   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
  1   228 
  1   229 /* END INCLUDE FILE ... semant.incl.pl1 */
       32 
  8     1 dcl	1 array			based aligned,
  8     2 	2 node_type		bit(9) unaligned,
  8     3 	2 reserved		bit(34) unaligned,
  8     4 	2 number_of_dimensions	fixed(7) unaligned,
  8     5 	2 own_number_of_dimensions	fixed(7) unaligned,
  8     6 	2 element_boundary		fixed(3) unaligned,
  8     7 	2 size_units		fixed(3) unaligned,
  8     8 	2 offset_units		fixed(3) unaligned,
  8     9 	2 interleaved		bit(1) unaligned,
  8    10 	2 c_element_size		fixed(24),
  8    11 	2 c_element_size_bits	fixed(24),
  8    12 	2 c_virtual_origin		fixed(24),
  8    13 	2 element_size		ptr unaligned,
  8    14 	2 element_size_bits		ptr unaligned,
  8    15 	2 virtual_origin		ptr unaligned,
  8    16 	2 symtab_virtual_origin	ptr unaligned,
  8    17 	2 symtab_element_size	ptr unaligned,
  8    18 	2 bounds			ptr unaligned,
  8    19 	2 element_descriptor	ptr unaligned;
  8    20 
  8    21 dcl	1 bound			based aligned,
  8    22 	2 node_type		bit(9),
  8    23 	2 c_lower			fixed(24),
  8    24 	2 c_upper			fixed(24),
  8    25 	2 c_multiplier		fixed(24),
  8    26 	2 c_desc_multiplier		fixed(24),
  8    27 	2 lower			ptr unaligned,
  8    28 	2 upper			ptr unaligned,
  8    29 	2 multiplier		ptr unaligned,
  8    30 	2 desc_multiplier		ptr unaligned,
  8    31 	2 symtab_lower		ptr unaligned,
  8    32 	2 symtab_upper		ptr unaligned,
  8    33 	2 symtab_multiplier		ptr unaligned,
  8    34 	2 next			ptr unaligned;
       33 
  9     1 /* BEGIN INCLUDE FILE ... block.incl.pl1 */
  9     2 /* Modified 22 Ocober 1980 by M. N. Davidoff to increase max block.number to 511 */
  9     3 /* format: style3,idind30 */
  9     4 
  9     5 declare	1 block			aligned based,
  9     6 	  2 node_type		bit (9) unaligned,
  9     7 	  2 source_id		structure unaligned,
  9     8 	    3 file_number		bit (8),
  9     9 	    3 line_number		bit (14),
  9    10 	    3 statement_number	bit (5),
  9    11 	  2 father		ptr unaligned,
  9    12 	  2 brother		ptr unaligned,
  9    13 	  2 son			ptr unaligned,
  9    14 	  2 declaration		ptr unaligned,
  9    15 	  2 end_declaration		ptr unaligned,
  9    16 	  2 default		ptr unaligned,
  9    17 	  2 end_default		ptr unaligned,
  9    18 	  2 context		ptr unaligned,
  9    19 	  2 prologue		ptr unaligned,
  9    20 	  2 end_prologue		ptr unaligned,
  9    21 	  2 main			ptr unaligned,
  9    22 	  2 end_main		ptr unaligned,
  9    23 	  2 return_values		ptr unaligned,
  9    24 	  2 return_count		ptr unaligned,
  9    25 	  2 plio_ps		ptr unaligned,
  9    26 	  2 plio_fa		ptr unaligned,
  9    27 	  2 plio_ffsb		ptr unaligned,
  9    28 	  2 plio_ssl		ptr unaligned,
  9    29 	  2 plio_fab2		ptr unaligned,
  9    30 	  2 block_type		bit (9) unaligned,
  9    31 	  2 prefix		bit (12) unaligned,
  9    32 	  2 like_attribute		bit (1) unaligned,
  9    33 	  2 no_stack		bit (1) unaligned,
  9    34 	  2 get_data		bit (1) unaligned,
  9    35 	  2 flush_at_call		bit (1) unaligned,
  9    36 	  2 processed		bit (1) unaligned,
  9    37 	  2 text_displayed		bit (1) unaligned,
  9    38 	  2 number		fixed bin (9) unsigned unaligned,
  9    39 	  2 free_temps		dimension (3) ptr,	/* these fields are used by the code generator */
  9    40 	  2 temp_list		ptr,
  9    41 	  2 entry_list		ptr,
  9    42 	  2 o_and_s		ptr,
  9    43 	  2 why_nonquick		aligned,
  9    44 	    3 auto_adjustable_storage bit (1) unaligned,
  9    45 	    3 returns_star_extents	bit (1) unaligned,
  9    46 	    3 stack_extended_by_args	bit (1) unaligned,
  9    47 	    3 invoked_by_format	bit (1) unaligned,
  9    48 	    3 format_statement	bit (1) unaligned,
  9    49 	    3 io_statements		bit (1) unaligned,
  9    50 	    3 assigned_to_entry_var	bit (1) unaligned,
  9    51 	    3 condition_statements	bit (1) unaligned,
  9    52 	    3 no_owner		bit (1) unaligned,
  9    53 	    3 recursive_call	bit (1) unaligned,
  9    54 	    3 options_non_quick	bit (1) unaligned,
  9    55 	    3 options_variable	bit (1) unaligned,
  9    56 	    3 never_referenced	bit (1) unaligned,
  9    57 	    3 pad_nonquick		bit (5) unaligned,
  9    58 	  2 prologue_flag		bit (1) unaligned,
  9    59 	  2 options_main		bit (1) unaligned,
  9    60 	  2 pad			bit (16) unaligned,
  9    61 	  2 number_of_entries	fixed bin (17),
  9    62 	  2 level			fixed bin (17),
  9    63 	  2 last_auto_loc		fixed bin (17),
  9    64 	  2 symbol_block		fixed bin (17),
  9    65 	  2 entry_info		fixed bin (18),
  9    66 	  2 enter			structure unaligned,
  9    67 	    3 start		fixed bin (17),
  9    68 	    3 end			fixed bin (17),
  9    69 	  2 leave			structure unaligned,
  9    70 	    3 start		fixed bin (17),
  9    71 	    3 end			fixed bin (17),
  9    72 	  2 owner			ptr;
  9    73 
  9    74 declare	max_block_number		fixed bin internal static options (constant) initial (511);
  9    75 
  9    76 /* END INCLUDE FILE ... block.incl.pl1 */
       34 
 10     1 /* BEGIN INCLUDE FILE ... declare_type.incl.pl1 */
 10     2 
 10     3 /* Modified: 25 Apr 1979 by PCK to implement 4-bit decimal */
 10     4 
 10     5 dcl  (	by_declare	initial("001"b),
 10     6 	by_explicit_context initial("010"b),
 10     7 	by_context	initial("011"b),
 10     8 	by_implication	initial("100"b),
 10     9 	by_compiler	initial("101"b)) int static bit(3) aligned options(constant);
 10    10 
 10    11 /* END INCLUDE FILE ... declare_type.incl.pl1 */
       35 
 11     1 /* BEGIN INCLUDE FILE ... list.incl.pl1 */
 11     2 
 11     3 /* Modified 26 June 81 by EBush to add max_list_elements */
 11     4 
 11     5 
 11     6 dcl	1 list		based aligned,
 11     7 	2 node_type	bit(9) unaligned,
 11     8 	2 reserved	bit(12) unaligned,
 11     9 	2 number		fixed(14) unaligned,
 11    10 	2 element		dimension(n refer(list.number)) ptr unaligned;
 11    11 
 11    12 dcl       max_list_elements   fixed bin(17) internal static options (constant)
 11    13 	                    init(16383);
 11    14 
 11    15 /* END INCLUDE FILE ... list.incl.pl1 */
       36 
 12     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
 12     2 
 12     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
 12     4 
 12     5 dcl (	block_node		initial("000000001"b),
 12     6 	statement_node		initial("000000010"b),
 12     7 	operator_node		initial("000000011"b),
 12     8 	reference_node		initial("000000100"b),
 12     9 	token_node		initial("000000101"b),
 12    10 	symbol_node		initial("000000110"b),
 12    11 	context_node		initial("000000111"b),
 12    12 	array_node		initial("000001000"b),
 12    13 	bound_node		initial("000001001"b),
 12    14 	format_value_node		initial("000001010"b),
 12    15 	list_node			initial("000001011"b),
 12    16 	default_node		initial("000001100"b),
 12    17 	machine_state_node		initial("000001101"b),
 12    18 	source_node		initial("000001110"b),
 12    19 	label_node		initial("000001111"b),
 12    20 	cross_reference_node	initial("000010000"b),
 12    21 	sf_par_node		initial("000010001"b),
 12    22 	temporary_node		initial("000010010"b),
 12    23 	label_array_element_node	initial("000010011"b),
 12    24 	by_name_agg_node		initial("000010100"b))
 12    25 				bit(9) internal static aligned options(constant);
 12    26 
 12    27 dcl	1 node			based aligned,
 12    28 	2 type			unal bit(9),
 12    29 	2 source_id		unal structure,
 12    30 	  3 file_number		bit(8),
 12    31 	  3 line_number		bit(14),
 12    32 	  3 statement_number	bit(5);
 12    33 
 12    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
       37 
 13     1 /* BEGIN INCLUDE FILE ... op_codes.incl.pl1 */
 13     2 
 13     3 /* Modified: 25 Apr 1979 by PCK 4-bit decimal */
 13     4 /* Modified: 6 Jun 1979 by PG to add rank and byte */
 13     5 /* Modified: 26 Dec 1979 by PCK to add assign_by_name */
 13     6 /* Modified: 26 July 82 BIM wordno, segno */
 13     7 
 13     8 dcl (	add		initial("000010001"b),	/* opnd(1) <- opnd(2)+opnd(3)		*/
 13     9 	sub		initial("000010010"b),	/* opnd(1) <- opnd(2)-opnd(3)		*/
 13    10 	mult		initial("000010011"b),	/* opnd(1) <- opnd(2)*opnd(3)		*/
 13    11 	div		initial("000010100"b),	/* opnd(1) <- opnd(2)/opnd(3)		*/
 13    12 	negate		initial("000010101"b),	/* opnd(1) <- -opnd(2)  		*/
 13    13 	exp		initial("000010110"b),	/* opnd(1) <- opnd(2) ** opnd(3)	*/
 13    14 
 13    15 	and_bits		initial("000100001"b),	/* opnd(1) <- opnd(2) & opnd(3)	*/
 13    16 	or_bits		initial("000100010"b),	/* opnd(1) <- opnd(2)|opnd(3)		*/
 13    17 	xor_bits		initial("000100011"b),	/* opnd(1) <- opnd(2) xor opnd(3)	*/
 13    18 	not_bits		initial("000100100"b),	/* opnd(1) <- ^opnd(2)		*/
 13    19 	cat_string	initial("000100101"b),	/* opnd(1) <- opnd(2)||opnd(3)	*/
 13    20 	bool_fun		initial("000100110"b),	/* opnd(1) <- bool(opnd(2),opnd(3),opnd(4)) */
 13    21 
 13    22 	assign		initial("000110001"b),	/* opnd(1) <- opnd(2)		*/
 13    23 	assign_size_ck	initial("000110010"b),	/* opnd(1) <- opnd(2)		*/
 13    24 	assign_zero	initial("000110011"b),	/* opnd(1) <- 0			*/
 13    25 	copy_words	initial("000110100"b),	/* move opnd(2) to opnd(1) by opnd(3) words */
 13    26 	copy_string	initial("000110101"b),	/* move opnd(2) to opnd(1) by opnd(3) units */
 13    27 	make_desc		initial("000110110"b),	/* opnd(1) <- descriptor(opnd(2),opnd(3)) */
 13    28 	assign_round	initial("000110111"b),	/* opnd(1) <- opnd(2) rounded		*/
 13    29 	pack		initial("000111000"b),	/* opnd(1) <- encode to picture opnd(2) */
 13    30 	unpack		initial("000111001"b),	/* opnd(1) <- decode from picture opnd(2) */
 13    31 
 13    32 	less_than		initial("001000100"b),	/* opnd(1) <- opnd(2) < opnd(3)	*/
 13    33 	greater_than	initial("001000101"b),	/* opnd(1) <- opnd(2) > opnd(3)	*/
 13    34 	equal		initial("001000110"b),	/* opnd(1) <- opnd(2) = opnd(3)	*/
 13    35 	not_equal		initial("001000111"b),	/* opnd(1) <- opnd(2) ^= opnd(3)	*/
 13    36 	less_or_equal	initial("001001000"b),	/* opnd(1) <- opnd(2) <= opnd(3)	*/
 13    37 	greater_or_equal	initial("001001001"b),	/* opnd(1) <- opnd(2) >= opnd(3)	*/
 13    38 
 13    39 	jump		initial("001010001"b),	/* go to opnd(1) unconditionally	*/
 13    40 	jump_true		initial("001010010"b),	/* go to opnd(1) if opnd(2) is not 0	*/
 13    41 	jump_false	initial("001010011"b),	/* go to opnd(1) if opnd(2) is all 0	*/
 13    42 	jump_if_lt	initial("001010100"b),	/* go to opnd(1) if opnd(2) < opnd(3)	*/
 13    43 	jump_if_gt	initial("001010101"b),	/* go to opnd(1) if opnd(2) > opnd(3)	*/
 13    44 	jump_if_eq	initial("001010110"b),	/* go to opnd(1) if opnd(2) = opnd(3)	*/
 13    45 	jump_if_ne	initial("001010111"b),	/* go to opnd(1) if opnd(2) ^= opnd(3)	*/
 13    46 	jump_if_le	initial("001011000"b),	/* go to opnd(1) if opnd(2) <= opnd(3)	*/
 13    47 	jump_if_ge	initial("001011001"b),	/* go to opnd(1) if opnd(2) >= opnd(3)	*/
 13    48 
 13    49 	std_arg_list	initial("001100001"b),	/* opnd(1) <- arglist(opnd(2) desclist(opnd(3)))	*/
 13    50 	return_words	initial("001100010"b),	/* return aggregate opnd(1), opnd(2) is length in words */
 13    51 	std_call		initial("001100011"b),	/* opnd(1) <- call opnd(2) with opnd(3)		*/
 13    52 	return_bits	initial("001100100"b),	/* return aggregate opnd(1), opnd(2) is length in bits */
 13    53 	std_entry		initial("001100101"b),	/* entry(opnd(1)... opnd(n))			*/
 13    54 	return_string	initial("001100110"b),	/* return string opnd(1) */
 13    55 	ex_prologue	initial("001100111"b),	/* execute the prologue -no operands-		*/
 13    56 	allot_auto	initial("001101000"b),	/* opnd(1) <- addrel(stack,opnd(2))		*/
 13    57 	param_ptr		initial("001101001"b),	/* opnd(1) <- ptr to opnd(2) in  block opnd(3)	*/
 13    58 	param_desc_ptr	initial("001101010"b),	/* opnd(1) <- ptr to opnd(2) in block opnd(3)	*/
 13    59 	std_return	initial("001101011"b),	/* return -no arguments-			*/
 13    60 	allot_ctl		initial("001101100"b),	/* allocate opnd(1) , length in words is opnd(2) 	*/
 13    61 	free_ctl		initial("001101101"b),	/* free opnd(1)				*/
 13    62 	stop		initial("001101110"b),	/* stop - terminate run unit			*/
 13    63 
 13    64 	mod_bit		initial("001110000"b),	/* opnd(1) <- mod(opnd(3),36),
 13    65*						   opnd(2) <- opnd(3) / 36		*/
 13    66 	mod_byte		initial("001110001"b),	/* opnd(1) <- mod(opnd(3),4),
 13    67*						   opnd(2) <- opnd(3) / 4		*/
 13    68 	mod_half		initial("001110010"b),	/* opnd(1) <- mod(opnd(3),2),
 13    69*						   opnd(2) <- opnd(3) / 2		*/
 13    70 	mod_word		initial("001110011"b),	/* TO BE DEFINED BY BLW			*/
 13    71 
 13    72 	bit_to_char	initial("010000000"b),	/* opnd(1) <- (opnd(2)+8)/9		*/
 13    73 	bit_to_word	initial("010000001"b),	/* opnd(1) <- (opnd(2)+35)/36		*/
 13    74 	char_to_word	initial("010000010"b),	/* opnd(1) <- (opnd(2)+3)/4		*/
 13    75 	half_to_word	initial("010000011"b),	/* opnd(1) <- (opnd(2)+1)/2		*/
 13    76 	word_to_mod2	initial("010000100"b),	/* opnd(1) <- (opnd(2)+1)/2*2		*/
 13    77 	word_to_mod4	initial("010000101"b),	/* opnd(1) <- (opnd(2)+3)/4*4		*/
 13    78 	word_to_mod8	initial("010000110"b),	/* opnd(1) <- (opnd(2)+7)/8*8		*/
 13    79 	rel_fun		initial("010000111"b),	/* opnd(1) <- rel(opnd(2))		*/
 13    80 	baseno_fun	initial("010001000"b),	/* opnd(1) <- baseno(opnd(2))		*/
 13    81 	desc_size		initial("010001001"b),	/* opnd(1) <- substr(opnd(2),13,24)	*/
 13    82 	bit_pointer	initial("010001010"b),	/* opnd(1) <- bit offset of opnd(2)	*/
 13    83 	index_before_fun	initial("010001011"b),	/* opnd(1) <- length of before(opnd(2),opnd(3)) */
 13    84 	index_after_fun	initial("010001100"b),	/* opnd(1) <- offset of after(opnd(2),opnd(3)) in opnd(2) */
 13    85 	verify_ltrim_fun	initial("010001101"b),	/* opnd(1) <- offset of ltrim(opnd(2),opnd(3)) in opnd(2) */
 13    86 	verify_rtrim_fun	initial("010001110"b),	/* opnd(1) <- length(opnd(2))-length(rtrim(opnd(2),opnd(3))) */
 13    87 	digit_to_bit	initial("010001111"b),	/* opnd(1) <- 9*opnd(2)/2		*/
 13    88 
 13    89 	ceil_fun		initial("010010000"b),	/* opnd(1) <- ceil(opnd(2))		*/
 13    90 	floor_fun		initial("010010001"b),	/* opnd(1) <- floor(opnd(2))		*/
 13    91 	round_fun		initial("010010010"b),	/* opnd(1) <- round(opnd(2))		*/
 13    92 	sign_fun		initial("010010011"b),	/* opnd(1) <- sign(opnd(2))		*/
 13    93 	abs_fun		initial("010010100"b),	/* opnd(1) <- abs(opnd(2))		*/
 13    94 	trunc_fun		initial("010010101"b),	/* opnd(1) <- trunc(opnd(2))		*/
 13    95 	byte_fun		initial("010010110"b),	/* opnd(1) <- byte(opnd(2))		*/
 13    96 	rank_fun		initial("010010111"b),	/* opnd(1) <- rank(opnd(2))		*/
 13    97 	index_rev_fun	initial("010011000"b),	/* opnd(1) <- index(reverse(opnd(2)),reverse(opnd(3))) */
 13    98 	search_rev_fun	initial("010011001"b),	/* opnd(1) <- search(reverse(opnd(2)),opnd(3)) */
 13    99 	verify_rev_fun	initial("010011010"b),	/* opnd(1) <- verify(reverse(opnd(2)),opnd(3)) */
 13   100 	wordno_fun	initial("010011011"b),        /* opnd(1) <- wordno (opnd(2)) */
 13   101 	segno_fun		initial("010011100"b),        /* opnd(1) <- segno (opnd(2)) */
 13   102 	bitno_fun           initial("010011101"b),        /* opnd(1) <- bitno (opnd(2)) */
 13   103 	charno_fun	initial("010011110"b),        /* opnd(1) <- charno (opnd(2)) */
 13   104 
 13   105 	index_fun		initial("010100000"b),	/* opnd(1) <- index(opnd(2),opnd(3))	*/
 13   106 	off_fun		initial("010100001"b),	/* opnd(1) <- offset(opnd(2),opnd(3))	*/
 13   107 	complex_fun	initial("010100010"b),	/* opnd(1) <- complex(opnd(2),opnd(3))	*/
 13   108 	conjg_fun		initial("010100011"b),	/* opnd(1) <- conjg(opnd(2),opnd(3))	*/
 13   109 	mod_fun		initial("010100100"b),	/* opnd(1) <- mod(opnd(2),opnd(3))	*/
 13   110 	repeat_fun	initial("010100101"b),	/* opnd(1) <- repeat(opnd(2),opnd(3))	*/
 13   111 	verify_fun	initial("010100110"b),	/* opnd(1) <- verify(opnd(2),opnd(3))	*/
 13   112 	translate_fun	initial("010100111"b),	/* opnd(1) <- translate(opnd(2),opnd(3))*/
 13   113 	real_fun   	initial("010101001"b),	/* opnd(1) <- real(opnd(2))		*/
 13   114 	imag_fun   	initial("010101010"b),	/* opnd(1) <- imag(opnd(2))		*/
 13   115 	length_fun	initial("010101011"b),	/* opnd(1) <- length(opnd(2))	*/
 13   116 	pl1_mod_fun	initial("010101100"b),	/* opnd(1) <- mod(opnd(2)) */
 13   117 	search_fun	initial("010101101"b),	/* opnd(1) <- search(opnd(2),opnd(3)) */
 13   118 	allocation_fun	initial("010101110"b),	/* opnd(1) <- allocation(opnd(2)) */
 13   119 	reverse_fun	initial("010101111"b),	/* opnd(1) <- reverse(opnd(2)) */
 13   120 
 13   121 	addr_fun		initial("010110000"b),	/* opnd(1) <- addr(opnd(2))		*/
 13   122 	addr_fun_bits	initial("010110001"b),	/* opnd(1) <- addr(opnd(2))		*/
 13   123 	ptr_fun		initial("010110010"b),	/* opnd(1) <- ptr(opnd(2),opnd(3))	*/
 13   124 	baseptr_fun	initial("010110011"b),	/* opnd(1) <- baseptr(opnd(2))	*/
 13   125 	addrel_fun	initial("010110100"b),	/* opnd(1) <- addrel(opnd(2),opnd(3))	*/
 13   126 	codeptr_fun	initial("010110101"b),	/* opnd(1) <- codeptr(opnd(2))	*/
 13   127 	environmentptr_fun	initial("010110110"b),	/* opnd(1) <- environmentptr(opnd(2))	*/
 13   128 	stackbaseptr_fun	initial("010110111"b),	/* opnd(1) is ptr to base of current stack	*/
 13   129 	stackframeptr_fun	initial("010111000"b),	/* opnd(1) is ptr to current block's stack frame	*/
 13   130 	setcharno_fun	initial("010111001"b),	/* opnd(1) <- opnd(2) with charno opnd(3) */
 13   131 	addcharno_fun	initial("010111010"b),	/* opnd(1) <- opnd(2) with charno = charno + opnd(3) */
 13   132 	setbitno_fun	initial("010111011"b),	/* setcharno for bitsno */
 13   133 	addbitno_fun	initial("010111100"b),	/* addcharno for bitno */
 13   134 
 13   135 	min_fun		initial("011000000"b),	/* opnd(1) <- min(opnd(1),opnd(2),...)	*/
 13   136 	max_fun		initial("011000001"b),	/* opnd(1) <- max(opnd(1),opnd(2),...)	*/
 13   137 
 13   138 	stack_ptr		initial("011010001"b),	/* opnd(1) <- stack frame ptr		*/
 13   139 	empty_area	initial("011010010"b),	/* empty opnd(1), length in words is opnd(2) */
 13   140 	enable_on		initial("011010100"b),	/* opnd(1) is the cond name
 13   141*						   opnd(2) is the file name
 13   142*						   opnd(3) is the block	*/
 13   143 	revert_on		initial("011010101"b),	/* opnd(1) is the cond name,
 13   144*						   opnd(2) is the file name	*/
 13   145 	signal_on		initial("011010110"b),	/* opnd(1) is the cond name
 13   146*						   opnd(2) is the file name */
 13   147 
 13   148 	lock_fun		initial("011010111"b),	/* opnd(1) <- stac(opnd(2),opnd(3))	*/
 13   149 	stacq_fun		initial("011011000"b),	/* opnd(1) is result, opnd(2) is ptr to lock word,
 13   150*						   opnd(3) is old value, (4) is new value. */
 13   151 	clock_fun		initial("011011001"b),	/* opnd(1) is the clock time		*/
 13   152 	vclock_fun	initial("011011010"b),	/* opnd(1) is the virtual clock time	*/
 13   153 
 13   154 	bound_ck		initial("011100000"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 13   155 	range_ck		initial("011100001"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 13   156 	loop		initial("011100010"b),	/* do opnd(1) for opnd(2) from opnd(3) to opnd(4) by 1,
 13   157*						   opnd(5) is the list */
 13   158 	join		initial("011100011"b),	/* do opnd(1), opnd(2) ... opnd(n)	*/
 13   159 	allot_based	initial("011100100"b),	/* allocate opnd(2) words in opnd(3), set opnd(1) */
 13   160 	free_based	initial("011100101"b),	/* free opnd(1) in opnd(3), length is opnd(2) words */
 13   161 
 13   162 	r_parn		initial("011110001"b),	/* format op code			*/
 13   163 	l_parn		initial("011110010"b),
 13   164 	r_format		initial("011110011"b),
 13   165 	c_format		initial("011110100"b),
 13   166 	f_format		initial("011110101"b),
 13   167 	e_format		initial("011110110"b),
 13   168 	b_format		initial("011110111"b),
 13   169 	a_format		initial("011111000"b),
 13   170 	x_format		initial("011111001"b),
 13   171 	skip_format	initial("011111010"b),
 13   172 	column_format	initial("011111011"b),
 13   173 	page_format	initial("011111100"b),
 13   174 	line_format	initial("011111101"b),
 13   175 	picture_format	initial("011111110"b),
 13   176 	bn_format		initial("011111111"b),	/* bit format, length(opnd(2)), radix factor(opnd(3)) */
 13   177 
 13   178 	get_list_trans	initial("100000000"b),	/* getlist(opnd(2) with desc(opnd(1)))	*/
 13   179 	get_edit_trans	initial("100000001"b),	/* getedit(opnd(2) with desc(opnd(1)))	*/
 13   180 	get_data_trans	initial("100000010"b),	/* getdata(opnd(1) to opnd(n))	*/
 13   181 	put_list_trans	initial("100000011"b),	/* putlist(opnd(2) with desc(opnd(1)))	*/
 13   182 	put_edit_trans	initial("100000100"b),	/* putedit(opnd(2) with desc(opnd(1)))	*/
 13   183 	put_data_trans	initial("100000101"b),	/* putdata(opnd(2)) with subscript-list opnd(1) */
 13   184 	terminate_trans	initial("100000110"b),	/* terminate stream transmission	*/
 13   185 	stream_prep	initial("100000111"b),	/* initiate stream transmission	*/
 13   186 	record_io		initial("100001000"b),	/* perform record io operation	*/
 13   187 	fortran_read	initial("100001001"b),	/* A complete read statement		*/
 13   188 	fortran_write	initial("100001010"b),	/* A complete write statement		*/
 13   189 	ftn_file_manip	initial("100001011"b),	/* endfile,backspace,rewind,etc.	*/
 13   190 	ftn_trans_loop	initial("100001100"b),	/* An implied do in i/o list		*/
 13   191 	put_control	initial("100001101"b),	/* put control opnd(1) opnd(2) times	*/
 13   192 	put_field		initial("100001110"b),	/* putlist(opnd(2)) of length(opnd(1))	*/
 13   193 	put_field_chk	initial("100001111"b),	/* putlist(op(2)) of len(op(1)) check char index(op(3)) */
 13   194 
 13   195 /* These operators are produced by the parse but are not used as input to the code generator.	*/
 13   196 /* They are processed by the semantic translator.						*/
 13   197 
 13   198 	return_value	initial("100010010"b),	/* return(opnd(1))			*/
 13   199 	allot_var		initial("100010011"b),	/* allot opnd(1) in opnd(2)		*/
 13   200 	free_var		initial("100010100"b),	/* free opnd(1) out of opnd(2)	*/
 13   201 	get_file		initial("100010101"b),	/* opnd(1) is filename,opnd(2) is copy	*/
 13   202 						/* opnd(3) is skip, opnd(4) is list	*/
 13   203 	get_string	initial("100010110"b),	/* opnd(1) is string,opnd(2) is list	*/
 13   204 	put_file		initial("100010111"b),	/* opnd(1) is filename,opnd(2) is page	*/
 13   205 						/* opnd(3) is skip,opnd(4) is line	*/
 13   206 	put_string	initial("100011000"b),	/* opnd(1) is string,opnd(2) is list	*/
 13   207 	open_file		initial("100011001"b),
 13   208 	close_file	initial("100011010"b),
 13   209 	read_file		initial("100011011"b),
 13   210 	write_file	initial("100011100"b),
 13   211 	locate_file	initial("100011101"b),
 13   212 	do_fun		initial("100011110"b),	/* opnd(1) is join of a list		*/
 13   213 						/* opnd(2) is control variable ref	*/
 13   214 						/* opnd(3) is specification operator	*/
 13   215 	do_spec		initial("100011111"b),	/* opnd(1) to opnd(2) by opnd(3) 	*/
 13   216 						/* repeat opnd(4) while opnd(5)	*/
 13   217 						/* opnd(6) is next specification	*/
 13   218 
 13   219 	rewrite_file	initial("100100000"b),
 13   220 	delete_file	initial("100100001"b),
 13   221 	unlock_file	initial("100100010"b),
 13   222 	lock_file		initial("100100011"b),
 13   223 	refer		initial("100100101"b),	/* opnd(1) refer(opnd(2))		*/
 13   224 	prefix_plus	initial("100100110"b),	/* opnd(1) <- +opnd(2)		*/
 13   225 	nop		initial("100100111"b),	/* no-op */
 13   226 	assign_by_name	initial("100101000"b),	/* opnd(1) <- opnd(2),by name		*/
 13   227 
 13   228 /* These operators are produced by the semantic translator in processing the math
 13   229*   builtin functions and are used as input to the code generator			*/
 13   230 
 13   231 	sqrt_fun		initial("100110000"b),	/* opnd(1) <- sqrt(opnd(2))	*/
 13   232 	sin_fun		initial("100110001"b),	/* opnd(1) <- sin(opnd(2))	*/
 13   233 	sind_fun		initial("100110010"b),	/* opnd(1) <- sind(opnd(2))	*/
 13   234 	cos_fun		initial("100110011"b),	/* opnd(1) <- cos(opnd(2))	*/
 13   235 	cosd_fun		initial("100110100"b),	/* opnd(1) <- cosd(opnd(2))	*/
 13   236 	tan_fun		initial("100110101"b),	/* opnd(1) <- tan(opnd(2))	*/
 13   237 	tand_fun		initial("100110110"b),	/* opnd(1) <- tand(opnd(2))	*/
 13   238 	asin_fun		initial("100110111"b),	/* opnd(1) <- asin(opnd(2))	*/
 13   239 	asind_fun		initial("100111000"b),	/* opnd(1) <- asind(opnd(2))	*/
 13   240 	acos_fun		initial("100111001"b),	/* opnd(1) <- acos(opnd(2))	*/
 13   241 	acosd_fun		initial("100111010"b),	/* opnd(1) <- acosd(opnd(2))	*/
 13   242 	atan_fun		initial("100111011"b),	/* opnd(1) <- atan(opnd(2)[,opnd(3)])	*/
 13   243 	atand_fun		initial("100111100"b),	/* opnd(1) <- atand(opnd(2)[,opnd(3)])	*/
 13   244 	log2_fun		initial("100111101"b),	/* opnd(1) <- log2(opnd(2))	*/
 13   245 	log_fun		initial("100111110"b),	/* opnd(1) <- log(opnd(2))	*/
 13   246 	log10_fun		initial("100111111"b),	/* opnd(1) <- log10(opnd(2))	*/
 13   247 
 13   248 	exp_fun		initial("101000000"b))	/* opnd(1) <- exp(opnd(2))	*/
 13   249 
 13   250 			bit(9) aligned internal static options(constant);
 13   251 
 13   252 /* END INCLUDE FILE ... op_codes.incl.pl1 */
       38 
 14     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
 14     2 
 14     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
 14     4 
 14     5 /* format: style3 */
 14     6 dcl	1 operator	based aligned,
 14     7 	  2 node_type	bit (9) unaligned,
 14     8 	  2 op_code	bit (9) unaligned,
 14     9 	  2 shared	bit (1) unaligned,
 14    10 	  2 processed	bit (1) unaligned,
 14    11 	  2 optimized	bit (1) unaligned,
 14    12 	  2 number	fixed (14) unaligned,
 14    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
 14    14 
 14    15 dcl	max_number_of_operands
 14    16 			fixed bin (15) int static options (constant) initial (32767);
 14    17 
 14    18 /* END INCLUDE FILE ... operator.incl.pl1 */
       39 
 15     1 dcl	pl1_stat_$node_uses(32) fixed bin ext;
 15     2 
 15     3 dcl	pl1_stat_$quick_pt ptr ext;
 15     4 
 15     5 dcl	quick_info(pl1_stat_$node_uses(1)) bit(pl1_stat_$node_uses(1)) aligned based(pl1_stat_$quick_pt);
       40 
 16     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
 16     2 
 16     3 dcl	1 reference		based aligned,
 16     4 	2 node_type		bit(9) unaligned,
 16     5 	2 array_ref		bit(1) unaligned,
 16     6 	2 varying_ref		bit(1) unaligned,
 16     7 	2 shared			bit(1) unaligned,
 16     8 	2 put_data_sw		bit(1) unaligned,
 16     9 	2 processed		bit(1) unaligned,
 16    10 	2 units			fixed(3) unaligned,
 16    11 	2 ref_count		fixed(17) unaligned,
 16    12 	2 c_offset		fixed(24),
 16    13 	2 c_length		fixed(24),
 16    14 	2 symbol			ptr unaligned,
 16    15 	2 qualifier		ptr unaligned,
 16    16 	2 offset			ptr unaligned,
 16    17 	2 length			ptr unaligned,
 16    18 	2 subscript_list		ptr unaligned,
 16    19 						/* these fields are used by the 645 code generator */
 16    20 	2 address			structure unaligned,
 16    21 	  3 base			bit(3),
 16    22 	  3 offset		bit(15),
 16    23 	  3 op			bit(9),
 16    24 	  3 no_address		bit(1),
 16    25 	  3 inhibit		bit(1),
 16    26 	  3 ext_base		bit(1),
 16    27 	  3 tag			bit(6),
 16    28 	2 info			structure unaligned,
 16    29 	  3 address_in		structure,
 16    30 	    4 b			dimension(0:7) bit(1),
 16    31 	    4 storage		bit(1),
 16    32 	  3 value_in		structure,
 16    33 	    4 a			bit(1),
 16    34 	    4 q			bit(1),
 16    35 	    4 aq			bit(1),
 16    36 	    4 string_aq		bit(1),
 16    37 	    4 complex_aq		bit(1),
 16    38 	    4 decimal_aq		bit(1),
 16    39 	    4 b			dimension(0:7) bit(1),
 16    40 	    4 storage		bit(1),
 16    41 	    4 indicators		bit(1),
 16    42 	    4 x			dimension(0:7) bit(1),
 16    43 	  3 other			structure,
 16    44 	    4 big_offset		bit(1),
 16    45 	    4 big_length		bit(1),
 16    46 	    4 modword_in_offset	bit(1),
 16    47 	2 data_type		fixed(5) unaligned,
 16    48 	2 bits			structure unaligned,
 16    49 	  3 padded_ref		bit(1),
 16    50 	  3 aligned_ref		bit(1),
 16    51 	  3 long_ref		bit(1),
 16    52 	  3 forward_ref		bit(1),
 16    53 	  3 ic_ref		bit(1),
 16    54 	  3 temp_ref		bit(1),
 16    55 	  3 defined_ref		bit(1),
 16    56 	  3 evaluated		bit(1),
 16    57 	  3 allocate		bit(1),
 16    58 	  3 allocated		bit(1),
 16    59 	  3 aliasable		bit(1),
 16    60 	  3 even			bit(1),
 16    61 	  3 perm_address		bit(1),
 16    62 	  3 aggregate		bit(1),
 16    63 	  3 hit_zero		bit(1),
 16    64 	  3 dont_save		bit(1),
 16    65 	  3 fo_in_qual		bit(1),
 16    66 	  3 hard_to_load		bit(1),
 16    67 	2 relocation		bit(12) unaligned,
 16    68 	2 more_bits		structure unaligned,
 16    69 	  3 substr		bit(1),
 16    70 	  3 padded_for_store_ref	bit(1),
 16    71 	  3 aligned_for_store_ref	bit(1),
 16    72 	  3 mbz			bit(15),
 16    73 	2 store_ins		bit(18) unaligned;
 16    74 
 16    75 /* END INCLUDE FILE ... reference.incl.pl1 */
       41 
 17     1 /* BEGIN INCLUDE FILE ... semantic_bits.incl.pl1 */
 17     2 
 17     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
 17     4 
 17     5 dcl	context aligned bit(36),
 17     6 	this_context aligned bit(36);
 17     7 
 17     8 dcl	1 def_context		aligned based(addr(context)),
 17     9 	2 aggregate		unaligned bit(1),
 17    10 	2 arg_list		unaligned bit(1),
 17    11 	2 left_side		unaligned bit(1),
 17    12 	2 return			unaligned bit(1),
 17    13 	2 evaluate_offset		unaligned bit(1),
 17    14 	2 top			unaligned bit(1),
 17    15 	2 RHS_aggregate		unaligned bit(1),
 17    16 	2 return_from_empty		unaligned bit(1),
 17    17 	2 ignore_based		unaligned bit(1),
 17    18 	2 ext_param		unaligned bit(1),
 17    19 	2 cross_section		unaligned bit(1),
 17    20 	2 string_unspec		unaligned bit(1),
 17    21 	2 f_offset_to_be_added	unaligned bit(1),
 17    22 	2 suppress_cross_ref	unaligned bit(1),
 17    23 	2 by_name_assignment	unaligned bit(1),
 17    24 	2 by_name_lookup		unaligned bit(1),
 17    25 	2 pad			unaligned bit(20);
 17    26 
 17    27 dcl	1 def_this_context		aligned like def_context based(addr(this_context));
 17    28 
 17    29 /* END INCLUDE FILE ... semantic_bits.incl.pl1 */
       42 
 18     1 /* ***********************************************************
 18     2*   *                                                         *
 18     3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
 18     4*   *                                                         *
 18     5*   *********************************************************** */
 18     6 /* BEGIN INCLUDE FILE ... statement.incl.pl1 */
 18     7 /* Internal interface of the PL/I compiler */
 18     8 
 18     9 dcl	1 statement		based aligned,
 18    10 	2 node_type		bit(9) unaligned,
 18    11 	2 source_id		structure unaligned,
 18    12 	  3 file_number		bit(8),
 18    13 	  3 line_number		bit(14),
 18    14 	  3 statement_number	bit(5),
 18    15 	2 next			ptr unaligned,
 18    16 	2 back			ptr unaligned,
 18    17 	2 root			ptr unaligned,
 18    18 	2 labels			ptr unaligned,
 18    19 	2 reference_list		ptr unaligned,
 18    20 	2 state_list		ptr unaligned,
 18    21 	2 reference_count		fixed(17) unaligned,
 18    22 	2 ref_count_copy		fixed(17) unaligned,
 18    23 	2 object			structure unaligned,
 18    24 	  3 start			fixed(17),
 18    25 	  3 finish		fixed(17),
 18    26 	2 source			structure unaligned,
 18    27 	  3 segment		fixed(11),
 18    28 	  3 start			fixed(23),
 18    29 	  3 length		fixed(11),
 18    30 	2 prefix			bit(12) unaligned,
 18    31 	2 optimized		bit(1) unaligned,
 18    32 	2 free_temps		bit(1) unaligned,
 18    33 	2 LHS_in_RHS		bit(1) unaligned,
 18    34 	2 statement_type		bit(9) unaligned,
 18    35 	2 bits			structure unaligned,
 18    36 	  3 processed		bit(1) unaligned,
 18    37 	  3 put_in_profile		bit(1) unaligned,
 18    38 	  3 generated		bit(1) unaligned,
 18    39 	  3 snap			bit(1) unaligned,
 18    40 	  3 system		bit(1) unaligned,
 18    41 	  3 irreducible		bit(1) unaligned,
 18    42 	  3 checked		bit(1) unaligned,
 18    43 	  3 save_temps		bit(1) unaligned,
 18    44 	  3 suppress_warnings	bit(1) unaligned,
 18    45 	  3 force_nonquick		bit(1) unaligned,
 18    46 	  3 expanded_by_name	bit(1) unaligned,
 18    47 	  3 begins_loop		bit(1) unaligned,
 18    48 	  3 pad			bit(24) unaligned;
 18    49 
 18    50 /* END INCLUDE FILE ... statement.incl.pl1 */
       43 
 19     1 	/* statement types */
 19     2 
 19     3 dcl (	unknown_statement		initial("000000000"b),
 19     4 	allocate_statement		initial("000000001"b),
 19     5 	assignment_statement	initial("000000010"b),
 19     6 	begin_statement		initial("000000011"b),
 19     7 	call_statement		initial("000000100"b),
 19     8 	close_statement		initial("000000101"b),
 19     9 	declare_statement		initial("000000110"b),
 19    10 	lock_statement		initial("000000111"b),
 19    11 	delete_statement		initial("000001000"b),
 19    12 	display_statement		initial("000001001"b),
 19    13 	do_statement		initial("000001010"b),
 19    14 	else_clause		initial("000001011"b),
 19    15 	end_statement		initial("000001100"b),
 19    16 	entry_statement		initial("000001101"b),
 19    17 	exit_statement		initial("000001110"b),
 19    18 	format_statement		initial("000001111"b),
 19    19 	free_statement		initial("000010000"b),
 19    20 	get_statement		initial("000010001"b),
 19    21 	goto_statement		initial("000010010"b),
 19    22 	if_statement		initial("000010011"b),
 19    23 	locate_statement		initial("000010100"b),
 19    24 	null_statement		initial("000010101"b),
 19    25 	on_statement		initial("000010110"b),
 19    26 	open_statement		initial("000010111"b),
 19    27 	procedure_statement 	initial("000011000"b),
 19    28 	put_statement		initial("000011001"b),
 19    29 	read_statement		initial("000011010"b),
 19    30 	return_statement		initial("000011011"b),
 19    31 	revert_statement		initial("000011100"b),
 19    32 	rewrite_statement		initial("000011101"b),
 19    33 	signal_statement		initial("000011110"b),
 19    34 	stop_statement		initial("000011111"b),
 19    35 	system_on_unit		initial("000100000"b),
 19    36 	unlock_statement		initial("000100001"b),
 19    37 	wait_statement		initial("000100010"b),
 19    38 	write_statement		initial("000100011"b),
 19    39 	default_statement		initial("000100100"b),
 19    40 	continue_statement		initial("000100101"b)) bit(9) internal static aligned options(constant);
       44 
 20     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
 20     2 
 20     3 dcl	1 symbol			based aligned,
 20     4 	2 node_type		bit(9) unal,
 20     5 	2 source_id		structure unal,
 20     6 	  3 file_number		bit(8),
 20     7 	  3 line_number		bit(14),
 20     8 	  3 statement_number	bit(5),
 20     9 	2 location		fixed(18) unal unsigned,
 20    10 	2 allocated		bit(1) unal,
 20    11 	2 dcl_type		bit(3) unal,
 20    12 	2 reserved		bit(6) unal,
 20    13 	2 pix			unal,
 20    14 	  3 pic_fixed		bit(1) unal,
 20    15 	  3 pic_float		bit(1) unal,
 20    16 	  3 pic_char		bit(1) unal,
 20    17 	  3 pic_scale		fixed(7) unal,
 20    18 	  3 pic_size		fixed(7) unal,
 20    19 	2 level			fixed(8) unal,
 20    20 	2 boundary		fixed(3) unal,
 20    21 	2 size_units		fixed(3) unal,
 20    22 	2 scale			fixed(7) unal,
 20    23 	2 runtime			bit(18) unal,
 20    24 	2 runtime_offset		bit(18) unal,
 20    25 	2 block_node		ptr unal,
 20    26 	2 token			ptr unal,
 20    27 	2 next			ptr unal,
 20    28 	2 multi_use		ptr unal,
 20    29 	2 cross_references		ptr unal,
 20    30 	2 initial			ptr unal,
 20    31 	2 array			ptr unal,
 20    32 	2 descriptor		ptr unal,
 20    33 	2 equivalence		ptr unal,
 20    34 	2 reference		ptr unal,
 20    35 	2 general			ptr unal,
 20    36 	2 father			ptr unal,
 20    37 	2 brother			ptr unal,
 20    38 	2 son			ptr unal,
 20    39 	2 word_size		ptr unal,
 20    40 	2 bit_size		ptr unal,
 20    41 	2 dcl_size		ptr unal,
 20    42 	2 symtab_size		ptr unal,
 20    43 	2 c_word_size		fixed(24),
 20    44 	2 c_bit_size		fixed(24),
 20    45 	2 c_dcl_size		fixed(24),
 20    46 
 20    47 	2 attributes		structure aligned,
 20    48 	  3 data_type		structure unal,
 20    49 	    4 structure		bit(1) ,
 20    50 	    4 fixed		bit(1),
 20    51 	    4 float		bit(1),
 20    52 	    4 bit			bit(1),
 20    53 	    4 char		bit(1),
 20    54 	    4 ptr			bit(1),
 20    55 	    4 offset		bit(1),
 20    56 	    4 area		bit(1),
 20    57 	    4 label		bit(1),
 20    58 	    4 entry		bit(1),
 20    59 	    4 file		bit(1),
 20    60 	    4 arg_descriptor	bit(1),
 20    61 	    4 storage_block		bit(1),
 20    62 	    4 explicit_packed	bit(1), /* options(packed) */
 20    63 	    4 condition		bit(1),
 20    64 	    4 format		bit(1),
 20    65 	    4 builtin		bit(1),
 20    66 	    4 generic		bit(1),
 20    67 	    4 picture		bit(1),
 20    68 
 20    69 	  3 misc_attributes		structure unal,
 20    70 	    4 dimensioned		bit(1),
 20    71 	    4 initialed		bit(1),
 20    72 	    4 aligned		bit(1),
 20    73 	    4 unaligned		bit(1),
 20    74 	    4 signed		bit(1),
 20    75 	    4 unsigned		bit(1),
 20    76 	    4 precision		bit(1),
 20    77 	    4 varying		bit(1),
 20    78 	    4 local		bit(1),
 20    79 	    4 decimal		bit(1),
 20    80 	    4 binary		bit(1),
 20    81 	    4 real		bit(1),
 20    82 	    4 complex		bit(1),
 20    83 	    4 variable		bit(1),
 20    84 	    4 reducible		bit(1),
 20    85 	    4 irreducible		bit(1),
 20    86 	    4 returns		bit(1),
 20    87 	    4 position		bit(1),
 20    88 	    4 internal		bit(1),
 20    89 	    4 external		bit(1),
 20    90 	    4 like		bit(1),
 20    91 	    4 member		bit(1),
 20    92 	    4 non_varying		bit(1),
 20    93 	    4 options		bit(1),
 20    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
 20    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
 20    96 
 20    97 	  3 storage_class		structure unal,
 20    98 	    4 auto		bit(1),
 20    99 	    4 based		bit(1),
 20   100 	    4 static		bit(1),
 20   101 	    4 controlled		bit(1),
 20   102 	    4 defined		bit(1),
 20   103 	    4 parameter		bit(1),
 20   104 	    4 param_desc		bit(1),
 20   105 	    4 constant		bit(1),
 20   106 	    4 temporary		bit(1),
 20   107 	    4 return_value		bit(1),
 20   108 
 20   109 	  3 file_attributes		structure unal,
 20   110 	    4 print		bit(1),
 20   111 	    4 input		bit(1),
 20   112 	    4 output		bit(1),
 20   113 	    4 update		bit(1),
 20   114 	    4 stream		bit(1),
 20   115 	    4 reserved_1		bit(1),
 20   116 	    4 record		bit(1),
 20   117 	    4 sequential		bit(1),
 20   118 	    4 direct		bit(1),
 20   119 	    4 interactive		bit(1),		/* env(interactive) */
 20   120 	    4 reserved_2		bit(1),
 20   121 	    4 reserved_3		bit(1),
 20   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
 20   123 	    4 keyed		bit(1),
 20   124 	    4 reserved_4		bit(1),
 20   125 	    4 environment		bit(1),
 20   126 
 20   127 	  3 compiler_developed	structure unal,
 20   128 	    4 aliasable		bit(1),
 20   129 	    4 packed		bit(1),
 20   130 	    4 passed_as_arg		bit(1),
 20   131 	    4 allocate		bit(1),
 20   132 	    4 set			bit(1),
 20   133 	    4 exp_extents		bit(1),
 20   134 	    4 refer_extents		bit(1),
 20   135 	    4 star_extents		bit(1),
 20   136 	    4 isub		bit(1),
 20   137 	    4 put_in_symtab		bit(1),
 20   138 	    4 contiguous		bit(1),
 20   139 	    4 put_data		bit(1),
 20   140 	    4 overlayed		bit(1),
 20   141 	    4 error		bit(1),
 20   142 	    4 symtab_processed	bit(1),
 20   143 	    4 overlayed_by_builtin	bit(1),
 20   144 	    4 defaulted		bit(1),
 20   145 	    4 connected		bit(1);
 20   146 
 20   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
       45 
 21     1 /* BEGIN INCLUDE FILE ... symbol_bits.incl.pl1 */
 21     2 
 21     3 dcl (	aliasable_bit	initial (72),
 21     4 	passed_as_arg_bit	initial (74),
 21     5 	set_bit		initial (76),
 21     6 	overlayed_by_builtin_bit initial (87)) fixed bin (15) internal static options (constant);
 21     7 
 21     8 /* END INCLUDE FILE ... symbol_bits.incl.pl1 */
       46 
 22     1 /* BEGIN INCLUDE FILE ... system.incl.pl1 */
 22     2 
 22     3 /* Modified: 25 Apr 1979 by PCK to implemnt 4-bit decimal */
 22     4 
 22     5 dcl (	max_p_flt_bin_1			initial(27),
 22     6 	max_p_flt_bin_2			initial(63),
 22     7 	max_p_fix_bin_1			initial(35),
 22     8 	max_p_fix_bin_2			initial(71),
 22     9 
 22    10 	max_p_dec				initial(59),
 22    11 	max_p_bin_or_dec			initial (71),	/* max (max_p_fix_bin_2, max_p_dec) */
 22    12 
 22    13 	min_scale				initial(-128),
 22    14 	max_scale				initial(+127),
 22    15 	max_bit_string			initial(9437184),
 22    16 	max_char_string			initial(1048576),
 22    17 	max_area_size			initial(262144),
 22    18 	min_area_size			initial(28),
 22    19 
 22    20 	max_bit_string_constant		initial (253),	/* max length of bit literals */
 22    21 	max_char_string_constant		initial (254),	/* max length of character literals */
 22    22 	max_identifier_length		initial (256),
 22    23 	max_number_of_dimensions		initial (127),
 22    24 
 22    25 	max_length_precision		initial(24),
 22    26 	max_offset_precision		initial(24),	/* 18 bits for word offset + 6 bits for bit offset */
 22    27 
 22    28 	max_words_per_variable		initial (262144),
 22    29 
 22    30 	bits_per_word			initial(36),
 22    31 	bits_per_double			initial(72),
 22    32 	packed_digits_per_character		initial(2),
 22    33 	characters_per_half			initial(2),
 22    34 	characters_per_word			initial(4),
 22    35 	characters_per_double		initial(8),
 22    36 
 22    37 	bits_per_character			initial(9),
 22    38 	bits_per_half			initial(18),
 22    39 	bits_per_decimal_digit		initial(9),
 22    40 	bits_per_binary_exponent		initial(8),
 22    41 	bits_per_packed_ptr			initial(36),
 22    42 	words_per_packed_pointer		initial(1),
 22    43 
 22    44 	words_per_fix_bin_1			initial(1),
 22    45 	words_per_fix_bin_2			initial(2),
 22    46 	words_per_flt_bin_1			initial(1),
 22    47 	words_per_flt_bin_2			initial(2),
 22    48 	words_per_varying_string_header	initial(1),
 22    49 	words_per_offset			initial(1),
 22    50 	words_per_pointer			initial(2),
 22    51 	words_per_label_var			initial(4),
 22    52 	words_per_entry_var			initial(4),
 22    53 	words_per_file_var			initial(4),
 22    54 	words_per_format			initial(4),
 22    55 	words_per_condition_var		initial(6),
 22    56 
 22    57 	max_index_register_value		initial(262143),
 22    58 	max_signed_index_register_value	initial(131071),
 22    59 
 22    60 	max_signed_xreg_precision		initial(17),
 22    61 	max_uns_xreg_precision		initial(18),
 22    62 
 22    63 	default_area_size			initial(1024),
 22    64 	default_flt_bin_p			initial(27),
 22    65 	default_fix_bin_p			initial(17),
 22    66 	default_flt_dec_p			initial(10),
 22    67           default_fix_dec_p   		initial(7)) fixed bin(31) internal static options(constant);
 22    68 
 22    69 dcl	bits_per_digit			initial(4.5)  fixed bin(31,1) internal static options(constant);
 22    70 
 22    71 dcl (	integer_type		initial("010000000000000000000100000001100000"b),
 22    72 	dec_integer_type		initial("010000000000000000000100000010100000"b),
 22    73 	pointer_type		initial("000001000000000000000100000000000000"b),
 22    74 	real_type			initial("001000000000000000000100000001100000"b),
 22    75 	complex_type		initial("001000000000000000000100000001010000"b),
 22    76 	builtin_type		initial("000000000000000010000000000000000000"b),
 22    77 	storage_block_type		initial("000000000000100000000000000000000000"b),
 22    78 	arg_desc_type		initial("000000000001000000000000000000000000"b),
 22    79 	local_label_var_type	initial("000000001000000000000100000100001000"b),
 22    80 	entry_var_type		initial("000000000100000000000000000000001000"b),
 22    81 	bit_type			initial("000100000000000000000000000000000000"b),
 22    82 	char_type			initial("000010000000000000000000000000000000"b)) bit(36) aligned int static
 22    83 									options(constant);
 22    84 
 22    85 /* END INCLUDE FILE ... system.incl.pl1 */
       47 
 23     1 /* BEGIN INCLUDE FILE ... token.incl.pl1 */
 23     2 
 23     3 dcl	1 token			based aligned,
 23     4 	2 node_type		bit(9) unaligned,
 23     5 	2 type			bit(9) unaligned,
 23     6 	2 loc			bit(18) unaligned,	/* symtab offset for identifiers, "p" flag for constants */
 23     7 	2 declaration		ptr unaligned,
 23     8 	2 next			ptr unaligned,
 23     9 	2 size			fixed(9),
 23    10 	2 string			char(n refer(token.size));
 23    11 
 23    12 /* END INCLUDE FILE ... token.incl.pl1 */
       48 
 24     1 /* BEGIN INCLUDE FILE ... token_types.incl.pl1 */
 24     2 
 24     3 dcl (	no_token		initial("000000000"b),	/*	token types		*/
 24     4 	identifier	initial("100000000"b),
 24     5 	isub		initial("010000000"b),
 24     6 	plus		initial("001000001"b),
 24     7 	minus		initial("001000010"b),
 24     8 	asterisk		initial("001000011"b),
 24     9 	slash		initial("001000100"b),
 24    10 	expon		initial("001000101"b),
 24    11 	not		initial("001000110"b),
 24    12 	and		initial("001000111"b),
 24    13 	or		initial("001001000"b),
 24    14 	cat		initial("001001001"b),
 24    15 	eq		initial("001001010"b),
 24    16 	ne		initial("001001011"b),
 24    17 	lt		initial("001001100"b),
 24    18 	gt		initial("001001101"b),
 24    19 	le		initial("001001110"b),
 24    20 	ge		initial("001001111"b),
 24    21 	ngt		initial("001010000"b),
 24    22 	nlt		initial("001010001"b),
 24    23 	assignment	initial("001010010"b),
 24    24 	colon		initial("001010011"b),
 24    25 	semi_colon	initial("001010100"b),
 24    26 	comma		initial("001010101"b),
 24    27 	period		initial("001010110"b),
 24    28 	arrow		initial("001010111"b),
 24    29 	left_parn		initial("001011000"b),
 24    30 	right_parn	initial("001011001"b),
 24    31 	percent		initial("001011100"b),
 24    32 	bit_string	initial("000100001"b),
 24    33 	char_string	initial("000100010"b),
 24    34 	bin_integer	initial("000110001"b),
 24    35 	dec_integer	initial("000110011"b),
 24    36 	fixed_bin		initial("000110000"b),
 24    37 	fixed_dec		initial("000110010"b),
 24    38 	float_bin		initial("000110100"b),
 24    39 	float_dec		initial("000110110"b),
 24    40 	i_bin_integer	initial("000111001"b),
 24    41 	i_dec_integer	initial("000111011"b),
 24    42 	i_fixed_bin	initial("000111000"b),
 24    43 	i_fixed_dec	initial("000111010"b),
 24    44 	i_float_bin	initial("000111100"b),
 24    45 	i_float_dec	initial("000111110"b)) bit (9) aligned internal static options (constant);
 24    46 
 24    47 dcl (	is_identifier		initial ("100000000"b),	/*	token type masks		*/
 24    48 	is_isub			initial ("010000000"b),
 24    49 	is_delimiter		initial ("001000000"b),
 24    50 	is_constant		initial ("000100000"b),
 24    51 	is_arith_constant		initial ("000010000"b),	/* N.B. not really a mask...s/b "000110000"b */
 24    52 	is_arithmetic_constant	initial ("000110000"b),
 24    53 	is_imaginary_constant	initial ("000111000"b),
 24    54 	is_float_constant		initial ("000110100"b),
 24    55 	is_decimal_constant		initial ("000110010"b),
 24    56 	is_integral_constant 	initial ("000110001"b)
 24    57 	) bit(9) internal static aligned options(constant);
 24    58 
 24    59 /* END INCLUDE FILE ... token_types.incl.pl1 */
       49 
       50 
       51 	if input_tree->operator.processed then return(input_tree);
       52 
       53 	if s -> symbol.constant & s -> symbol.equivalence ^= null
       54 	then do;
       55 		called = s -> symbol.equivalence -> block.number;
       56 		caller = blk -> block.number;
       57 		substr(quick_info(called),caller,1) = "1"b;
       58 		if stmnt->statement.force_nonquick
       59 		then do;
       60 			s -> symbol.equivalence -> block.no_stack = "0"b;
       61 			s -> symbol.equivalence -> block.why_nonquick.stack_extended_by_args = "1"b;
       62 		end;
       63 	end;
       64 
       65 	tree = input_tree;
       66 
       67 	n = 0;
       68 	descriptors_required = "0"b;
       69 	arg_list_op = tree->operand(3);
       70 	arg_list = null;
       71 	p_desc_list = s->symbol.general;
       72 
       73 	if arg_list_op^=null
       74 	then	if arg_list_op->operand(2)->list.number=0
       75 		then do;
       76 			save_arg_list_op = arg_list_op;
       77 
       78 			arg_list_op  ,
       79 			tree->operand(3) = null;
       80 		end;
       81 
       82 	if arg_list_op=null
       83 	then	if p_desc_list=null
       84 		then do;
       85 		        if s->symbol.returns
       86 			   then desc_list = create_list(1);
       87 		        goto process_returns;
       88 		     end;
       89 		else	call print(85);
       90 
       91 	if p_desc_list = null
       92 	then do;
       93 		if ^s->symbol.variable_arg_list
       94 		then do;
       95 			call semantic_translator$error(86,s);
       96 			s->symbol.variable_arg_list = "1"b;
       97 		end;
       98 
       99 		descriptors_required = "1"b;
      100 		n = arg_list_op->operand(2)->list.number;
      101 	end;
      102 	else do;
      103 		do q = p_desc_list repeat q->element(2) while(q^=null);
      104 			n = n+1;
      105 			descriptors_required = descriptors_required | q->element(1)->symbol.star_extents;
      106 		end;
      107 
      108 		if s->symbol.dcl_size ^= null
      109 		then	descriptors_required = descriptors_required | s->symbol.dcl_size->symbol.star_extents;
      110 
      111 		if arg_list_op->operand(2)->list.number ^= n then call print(87);
      112 	end;
      113 
      114 			/*   process all the arguments   */
      115 	arg_list = arg_list_op->operand(2);
      116 
      117 	if arg_list->list.number > max_list_elements - 1
      118 	then call semantic_translator$abort(340,create_token(bindec$vs(max_list_elements-1),dec_integer));
      119 
      120 	do k = 1 to divide(n,2,15,0);
      121 		q = arg_list->element(k);
      122 		arg_list->element(k) = arg_list->element(n-k+1);
      123 		arg_list->element(n-k+1) = q;
      124 	end;
      125 
      126 	k = arg_list->list.number;
      127 	if s->symbol.returns
      128 	     then k = k+ 1;
      129 	desc_list = create_list(k);
      130 
      131 	do k = 1 to arg_list->list.number;
      132 		old=stmnt->statement.back;	/* prepare to nullify statements generated
      133*						   for  k-th argument */
      134 		this_context = "01"b;
      135 		a = arg_list->element(k);
      136 		if p_desc_list ^= null
      137 		then	p = p_desc_list->element(1);
      138 		else	p = null;
      139 
      140 		desc_list->list.element(k) = null;
      141 
      142 		if a->node.type=operator_node
      143 		then do;
      144 			if a->operator.op_code=assign	/*   assuming the only kind of assignment is to t0   */
      145 			then	arg_list->element(k)  ,
      146 				a = a->operand(2);
      147 
      148 			goto by_value;
      149 		end;
      150 
      151 		if a->node.type = token_node
      152 		then	if a->token.type & is_constant
      153 			then	goto by_value;
      154 
      155 		q = copy_expression((a));
      156 		q = expression_semantics(blk,stmnt,q,this_context);
      157 
      158 		if q->node.type^=reference_node
      159 		then do;
      160 
      161 			/* operator_semantics won't do right thing if we
      162*			   build dummy assignment with return_value
      163*			   source or varying string target, so we
      164*			   match_arguments first.	*/
      165 
      166 			if q->node.type^=operator_node
      167 			then	goto undo;
      168 			if q->op_code^=std_call
      169 			then	goto undo;
      170 			if ^q->operand(1)->reference.symbol->symbol.return_value
      171 			then	if ^q->operand(1)->reference.symbol->symbol.varying
      172 				then	goto undo;
      173 			a = q;
      174 
      175 			if p^=null
      176 			then	if ^match_arguments((q->operand(1)),p)
      177 				then	goto by_value;
      178 
      179 			if descriptors_required
      180 			then	desc_list->list.element(k) = share_expression((q->operand(1)->reference.symbol->symbol.descriptor));
      181 
      182 			goto next;
      183 		end;
      184 
      185 		if q -> reference.symbol -> node.type ^= symbol_node	/* arg was label array constant element */
      186 		then	goto undo;
      187 
      188 		if q->reference.symbol->symbol.constant			/* arg was builtin like null */
      189 		then	goto undo;
      190 
      191 			/*   checking for cross-sections or defined arrays   */
      192 
      193 		sym = q->reference.symbol;
      194 		array_ptr = sym->symbol.array;
      195 		descr_ptr = sym->symbol.descriptor;
      196 
      197 		if def_this_context.cross_section
      198 		then do;
      199 			bound_ptr = array_ptr->array.bounds;
      200 			subs = q->reference.offset;
      201 
      202 			if sym->symbol.defined & ^ sym->symbol.overlayed
      203 			then do;
      204 				if sym->symbol.isub
      205 				then do;
      206 					call semantic_translator$error(296,sym);
      207 					goto undo;
      208 				end;
      209 
      210 				based_ref = copy_expression(sym->symbol.equivalence);
      211 
      212 				if ^lookup((sym->symbol.block_node),stmnt,based_ref,based_sym,"0"b)
      213 				then	call semantic_translator$abort(175,sym);
      214 
      215 				if based_ref->node.type^=reference_node
      216 				then	call semantic_translator$abort(343,sym);
      217 
      218 				based_ref->reference.symbol = based_sym->symbol.token;
      219 				if subs=null
      220 				then do;
      221 					subs = copy_expression(based_ref->reference.offset);
      222 					sym = based_sym;
      223 				end;
      224 				else do;
      225 					t = copy_expression(based_ref->reference.offset);
      226 					j = 0;
      227 
      228 					do i = 1 to subs->list.number;
      229 test:
      230 						j = j+1;
      231 						if j>t->list.number
      232 						then	call semantic_translator$abort(175,sym);
      233 
      234 						if t->element(j)->node.type^=token_node
      235 						then	goto test;
      236 
      237 						if t->element(j)->token.type^=asterisk
      238 						then	goto test;
      239 
      240 						if subs->element(i)->node.type=token_node
      241 						then	if subs->element(i)->token.type=asterisk
      242 							then	;
      243 							else	t->element(j) = subs->element(i);
      244 						else	t->element(j) = subs->element(i);
      245 					end;
      246 
      247 					subs = t;
      248 					sym = based_sym;
      249 				end;
      250 
      251 				array_ptr = sym->symbol.array;
      252 				descr_ptr = sym->symbol.descriptor;
      253 				bound_ptr = array_ptr->array.bounds;
      254 
      255 				based_ref->reference.offset = null;
      256 				q = expression_semantics(blk,stmnt,based_ref,this_context);
      257 
      258 				if q=sym->symbol.reference
      259 				then	q = copy_expression((q));
      260 
      261 				q->reference.offset = subs;
      262 			end;
      263 			else	based_ref = null;
      264 
      265 			newarray = create_array();
      266 			newarray->array = array_ptr->array;
      267 			newarray->array.number_of_dimensions  ,
      268 			newarray->array.own_number_of_dimensions = 0;
      269 			newbound = null;
      270 
      271 			do i = 1 to subs->list.number;
      272 				if subs->element(i)->node.type=token_node
      273 				then if	subs->element(i)->token.type=asterisk
      274 				then do;
      275 					newarray->array.number_of_dimensions  ,
      276 					newarray->array.own_number_of_dimensions = newarray->array.number_of_dimensions + 1;
      277 
      278 					if newbound=null
      279 					then do;
      280 						newbound = create_bound();
      281 						newarray->array.bounds = newbound;
      282 					end;
      283 					else do;
      284 						newbound->bound.next = create_bound();
      285 						newbound = newbound->bound.next;
      286 					end;
      287 
      288 					newbound->bound = bound_ptr->bound;
      289 					newbound->bound.next = null;
      290 
      291 					if bound_ptr->bound.lower = null
      292 					then	subs->element(i) = declare_constant$integer((bound_ptr->bound.c_lower));
      293 
      294 					else	subs->element(i) = copy_expression(bound_ptr->bound.lower);
      295 				end;
      296 
      297 				bound_ptr = bound_ptr->bound.next;
      298 			end;
      299 
      300 			sym->symbol.array = newarray;
      301 			sym->symbol.descriptor = null;
      302 
      303 			if p^=null
      304 			then if	^match_arguments(q,p)
      305 			then do;
      306 				call semantic_translator$error(47,q);
      307 				sym->symbol.array = array_ptr;
      308 				sym->symbol.descriptor = descr_ptr;
      309 				goto undo;
      310 			end;
      311 
      312 			sym->symbol.array = array_ptr;
      313 			q->reference.offset = copy_expression(sym->symbol.reference->reference.offset);
      314 
      315 			if q -> reference.qualifier ^= null
      316 			then do;
      317 				pl1_stat_$index = pl1_stat_$index + 1;
      318 				if pl1_stat_$index > hbound(pl1_stat_$locator,1)
      319 				then	call print(70);
      320 				pl1_stat_$locator(pl1_stat_$index) = q;
      321 			end;
      322 
      323 			q = subscripter(blk,stmnt,q,subs,sym);
      324 			q->reference.offset = expression_semantics(blk,stmnt,(q->reference.offset),"0"b);
      325 			call simplify_offset(q,"0"b);
      326 
      327 			if q -> reference.qualifier ^= null
      328 			then	pl1_stat_$index = pl1_stat_$index - 1;
      329 
      330 			q->reference.array_ref = "1"b;
      331 			sym->symbol.array = newarray;
      332 		end;
      333 		else do;
      334 			if p^=null
      335 			then if	^match_arguments(q,p)
      336 			then do;
      337 				call print(47);
      338 				go to undo;
      339 			end;
      340 
      341 			if sym->symbol.defined
      342 			then if sym->symbol.structure | q->reference.array_ref
      343 			then do;
      344 				q = defined_reference(blk,stmnt,q,null,sym,this_context);
      345 				if q->reference.offset ^= null
      346 				then do;
      347 					q->reference.offset = expression_semantics(blk,stmnt,(q->reference.offset),"0"b);
      348 					call simplify_offset(q,"0"b);
      349 				end;
      350 			end;
      351 		end;
      352 
      353 		a = q;
      354 		sa = a->reference.symbol;
      355 		call propagate_bit(sa,set_bit);
      356 		call propagate_bit(sa,passed_as_arg_bit);
      357 
      358 		if sa->symbol.static
      359 		|  sa->symbol.controlled
      360 		then	call propagate_bit(sa,aliasable_bit);
      361 
      362 		if	sa->symbol.entry
      363 		then if	sa->symbol.internal
      364 		then if	sa->symbol.constant
      365 		then do q = sa->symbol.block_node repeat q->block.father while(q^=null);
      366 			q->block.flush_at_call = "1"b;
      367 		end;
      368 
      369 		if desc_list->list.element(k)^=null		/*   descriptor already made previously   */
      370 		then	if ^descriptors_required
      371 			then	call print(89);
      372 			else	;
      373 		else	if descriptors_required	/*   since not made elsewhere already   */
      374 			then	desc_list->list.element(k) = declare_descriptor(blk,stmnt,sa,
      375 					(a->reference.qualifier),
      376 					a->reference.array_ref || def_this_context.cross_section);
      377 
      378 		sym->symbol.array = array_ptr;
      379 		sym->symbol.descriptor = descr_ptr;
      380 
      381 		go to next;
      382 
      383 undo:
      384 		if old = null		/* if this was the first statement of the prologue       */
      385 		then q = blk->block.prologue; /* the back ptr was null, so use the block.prologue ptr. */
      386 		else q = old->statement.next;
      387 		do q = q repeat q->statement.next while(q^=stmnt);
      388 			q->statement.root = null;
      389 			q->statement.statement_type = null_statement;
      390 		end;
      391 
      392 by_value:
      393 		op = create_operator(assign,2);
      394 
      395 		if p=null
      396 		then do;
      397 			q = create_symbol(null,null,by_compiler);
      398 			q->symbol.temporary = "1"b;
      399 			op->operand(1) = q->symbol.reference;
      400 		end;
      401 		else	op->operand(1) = p->symbol.reference;
      402 
      403 		op->operand(2) = a;
      404 		a  ,
      405 		op = expression_semantics(blk,stmnt,op,this_context);
      406 
      407 		if op->node.type=operator_node
      408 		then	op = op->operand(1);
      409 
      410 		if descriptors_required
      411 		then	desc_list->list.element(k) = declare_descriptor(blk,stmnt,(op->reference.symbol),
      412 					(op->reference.qualifier),(op->reference.array_ref));
      413 
      414 next:
      415 		arg_list->element(k) = a;
      416 
      417 		if p_desc_list^=null
      418 		then	p_desc_list = p_desc_list->element(2);
      419 	end;
      420 
      421 process_returns:
      422 	if stmnt->statement.statement_type=call_statement
      423 	&  def_context.top
      424 	then	if ^s->symbol.returns
      425 		then	;
      426 		else do;
      427 			do p = s->symbol.dcl_size repeat p->symbol.dcl_size while(p->symbol.entry);
      428 				q = create_operator(std_call,3);
      429 				q->operand(2) = tree->operand(2);
      430 				q->operand(3) = create_operator(std_arg_list,3);
      431 				q->operand(3) = tree->operand(3);
      432 
      433 				tree->operand(2) = expression_semantics(blk,stmnt,q,"0"b);
      434 				tree->operand(3) = null;
      435 
      436 				if ^p->symbol.returns
      437 				then	goto ret;
      438 			end;
      439 
      440 			call print(88);
      441 		end;
      442 
      443 	else	if ^s->symbol.returns
      444 		then	call print(263);
      445 
      446 	if s->symbol.returns
      447 	then do;
      448 		if arg_list_op=null
      449 		then	tree->operand(3)  ,
      450 			arg_list_op = save_arg_list_op;
      451 
      452 		n = n+1;
      453 		a = arg_list;
      454 		arg_list_op->operand(2),arg_list = create_list(n);
      455 
      456 		do k = 1 to n-1;
      457 			arg_list->element(k) = a->element(k);
      458 		end;
      459 
      460 		q = s->symbol.dcl_size;
      461 
      462 		if q->symbol.star_extents then descriptors_required = "1"b;
      463 
      464 		if q->symbol.structure | q->symbol.dimensioned | q->symbol.star_extents
      465 		then do;
      466 
      467 			/* we get a unique copy of the return_value and declare it to fix bugs 1217 and 1311. */
      468 
      469 			q = copy_expression(s->symbol.dcl_size);
      470 			call declare(q);
      471 		end;
      472 
      473 		if descriptors_required
      474 		then do;
      475 			desc_list->list.element(n) = copy_expression(q->symbol.descriptor);
      476 
      477 			if q->symbol.star_extents
      478 			then do;
      479 				desc_list->list.element(n)->reference.shared = "0"b;
      480 				desc_list->list.element(n)->reference.ref_count = 1;
      481 			end;
      482 		end;
      483 
      484 		tree->operand(1)  ,
      485 		arg_list->element(n)  ,
      486 		r = copy_expression(q->symbol.reference);
      487 		r->reference.shared = "0"b;
      488 		r->reference.ref_count = 2;
      489 
      490 		if q->symbol.star_extents & (q->symbol.bit|q->symbol.char) & ^ q->symbol.varying
      491 		then do;
      492 			op = create_operator(desc_size,2);
      493 			op->operand(1) = declare_temporary(integer_type,max_length_precision,0,null);
      494 			op->operand(2) = desc_list->list.element(n);
      495 			op->operator.processed = "1"b;
      496 			desc_list->list.element(n)->reference.ref_count = 2;
      497 			r->reference.length = op;
      498 		end;
      499 		else	r->reference.length = null;
      500 
      501 		if q->symbol.dimensioned | q->symbol.structure | q->symbol.star_extents
      502 		then do;
      503 			def_context.aggregate = q->symbol.dimensioned | q->symbol.structure;
      504 
      505 			if def_context.aggregate & def_context.by_name_assignment
      506 			then call print(382);
      507 
      508 			if q->symbol.star_extents
      509 			then do;
      510 
      511 				/* protect stack extension from shorteninng
      512*				   by other procedures in this expression
      513*				   (fixes 1637)	*/
      514 
      515 				stmnt->statement.force_nonquick = "1"b;
      516 				call make_non_quick((stmnt->statement.root),"001"b);
      517 			end;
      518 
      519 			q = create_statement(assignment_statement,
      520 				(stmnt->statement.back),null,(stmnt->statement.prefix));
      521 			q->statement.root = tree;
      522 
      523 			arg_list->element(n)->reference.ref_count = 3;
      524 		end;
      525 	end;
      526 
      527 	if descriptors_required
      528 	then do;
      529 		arg_list_op->operand(3)  = desc_list;
      530 		call check_star_extents(s,arg_list);
      531 	end;
      532 
      533 /* Prepare a storage_block temporary large enough to hold
      534*   the argument list.  Caution ****** this code depends on the
      535*   format of the Multics standard argument list.  */
      536 
      537 	if arg_list_op^=null
      538 	then do;
      539 		if descriptors_required
      540 		then	n = n+n;
      541 
      542 		if s->symbol.internal | s->symbol.variable
      543 		then	n = n+1;
      544 
      545 		arg_list_op->operand(1) = declare_temporary(storage_block_type,(n+1)*2,0,null);
      546 	end;
      547 
      548 ret:
      549 	return(tree);
      550 
      551 /* subroutine to print and error message and abort. */
      552 
      553 print: proc(m);
      554 
      555 dcl	m fixed bin(15);
      556 
      557 dcl	pp ptr;
      558 
      559 	if m^=47
      560 	then	call semantic_translator$abort(m,s);
      561 
      562 	pp = q;
      563 
      564 	if pp->node.type=operator_node then pp = pp->operand(1);
      565 	if pp->node.type=reference_node then pp = pp->reference.symbol;
      566 
      567 	if pp->symbol.dcl_type^=by_compiler
      568 	then	call semantic_translator$error(m,q);
      569 
      570 	end print;
      571 
      572 
      573 	end function;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/31/89  1338.7  function.pl1                      >spec>install>MR12.3-1066>function.pl1
32           1    07/21/80  1546.3  semant.incl.pl1                   >ldd>include>semant.incl.pl1
1-228        2    07/31/89  1332.6  language_utility.incl.pl1         >spec>install>MR12.3-1066>language_utility.incl.pl1
2-307        3    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-325        4    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-335        5    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-374        6    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-386        7    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
33           8    05/06/74  1741.6  array.incl.pl1                    >ldd>include>array.incl.pl1
34           9    08/13/81  2043.5  block.incl.pl1                    >ldd>include>block.incl.pl1
35          10    10/25/79  1645.8  declare_type.incl.pl1             >ldd>include>declare_type.incl.pl1
36          11    08/13/81  2211.5  list.incl.pl1                     >ldd>include>list.incl.pl1
37          12    07/21/80  1546.3  nodes.incl.pl1                    >ldd>include>nodes.incl.pl1
38          13    04/07/83  1635.0  op_codes.incl.pl1                 >ldd>include>op_codes.incl.pl1
39          14    07/21/80  1546.3  operator.incl.pl1                 >ldd>include>operator.incl.pl1
40          15    05/06/74  1743.0  quick_info.incl.pl1               >ldd>include>quick_info.incl.pl1
41          16    07/21/80  1546.3  reference.incl.pl1                >ldd>include>reference.incl.pl1
42          17    07/21/80  1546.3  semantic_bits.incl.pl1            >ldd>include>semantic_bits.incl.pl1
43          18    04/07/83  1635.0  statement.incl.pl1                >ldd>include>statement.incl.pl1
44          19    05/03/76  1320.4  statement_types.incl.pl1          >ldd>include>statement_types.incl.pl1
45          20    12/07/83  1701.7  symbol.incl.pl1                   >ldd>include>symbol.incl.pl1
46          21    07/21/80  1546.3  symbol_bits.incl.pl1              >ldd>include>symbol_bits.incl.pl1
47          22    12/07/83  1701.7  system.incl.pl1                   >ldd>include>system.incl.pl1
48          23    09/14/77  1705.7  token.incl.pl1                    >ldd>include>token.incl.pl1
49          24    11/30/78  1227.4  token_types.incl.pl1              >ldd>include>token_types.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
a                               000116 automatic       pointer                  dcl 17 set ref 135* 142 144 144 144* 151 151 155
                                                                                  173* 353* 354 373 373 403 404* 414 453* 457
addr                                                   builtin function         dcl 30 ref 197 373 421 503 505 505
aggregate                              based           bit(1)                   level 2 packed packed unaligned dcl 17-8 set ref
                                                                                  503* 505
aliasable_bit                   000006 constant        fixed bin(15,0)          initial dcl 21-3 set ref 358*
arg_list                        000106 automatic       pointer                  dcl 17 set ref 70* 115* 117 121 122 122 123 126 131
                                                                                  135 144 414 453 454* 457 484 523 530*
arg_list_op                     000110 automatic       pointer                  dcl 17 set ref 69* 73 73 76 78* 82 100 111 115 448
                                                                                  448* 454 529 537 545
array                                  based           structure                level 1 dcl 8-1 in procedure "function" set ref 266*
                                                                                  266
array                    12            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 20-3 in procedure "function" set ref
                                                                                  194 251 300* 307* 312* 331* 378*
array_ptr                       000136 automatic       pointer                  dcl 17 set ref 194* 199 251* 253 266 307 312 378
array_ref                 0(09)        based           bit(1)                   level 2 packed packed unaligned dcl 16-3 set ref
                                                                                  330* 341 373 410
assign                          000013 constant        bit(9)                   initial dcl 13-8 set ref 144 392*
assignment_statement            000007 constant        bit(9)                   initial dcl 19-3 set ref 519*
asterisk                               constant        bit(9)                   initial dcl 24-3 ref 237 240 272
attributes               31            based           structure                level 2 dcl 20-3
back                      2            based           pointer                  level 2 packed packed unaligned dcl 18-9 ref 132 519
based_ref                       000142 automatic       pointer                  dcl 17 set ref 210* 212* 215 218 221 225 255 256*
                                                                                  263*
based_sym                       000144 automatic       pointer                  dcl 17 set ref 212* 218 222 248
bindec$vs                       000040 constant        entry                    external dcl 2-28 ref 117 117
bit                      31(03)        based           bit(1)                   level 4 packed packed unaligned dcl 20-3 ref 490
bits                     13            based           structure                level 2 packed packed unaligned dcl 18-9
blk                                    parameter       pointer                  dcl 17 set ref 15 56 156* 256* 323* 324* 344* 347*
                                                                                  373* 383 404* 410* 433*
block                                  based           structure                level 1 dcl 9-5
block_node                4            based           pointer                  level 2 packed packed unaligned dcl 20-3 ref 212 362
bound                                  based           structure                level 1 dcl 8-21 set ref 288* 288
bound_ptr                       000140 automatic       pointer                  dcl 17 set ref 199* 253* 288 291 291 294 297* 297
bounds                   12            based           pointer                  level 2 packed packed unaligned dcl 8-1 set ref 199
                                                                                  253 281*
by_compiler                     000014 constant        bit(3)                   initial dcl 10-5 set ref 397* 567
by_name_assignment        0(14)        based           bit(1)                   level 2 packed packed unaligned dcl 17-8 ref 505
c_lower                   1            based           fixed bin(24,0)          level 2 dcl 8-21 set ref 291
call_statement                         constant        bit(9)                   initial dcl 19-3 ref 421
called                          000160 automatic       fixed bin(15,0)          dcl 17 set ref 55* 57
caller                          000161 automatic       fixed bin(15,0)          dcl 17 set ref 56* 57
char                     31(04)        based           bit(1)                   level 4 packed packed unaligned dcl 20-3 ref 490
check_star_extents              000014 constant        entry                    external dcl 1-27 ref 530
compiler_developed       32(35)        based           structure                level 3 packed packed unaligned dcl 20-3
constant                 32(16)        based           bit(1)                   level 4 packed packed unaligned dcl 20-3 ref 53 188
                                                                                  362
context                                parameter       bit(36)                  dcl 17-5 set ref 15 421 503 505 505
controlled               32(12)        based           bit(1)                   level 4 packed packed unaligned dcl 20-3 ref 358
copy_expression                 000042 constant        entry                    external dcl 2-94 ref 155 210 221 225 258 294 313
                                                                                  469 475 484
create_array                    000044 constant        entry                    external dcl 2-108 ref 265
create_bound                    000046 constant        entry                    external dcl 2-118 ref 280 284
create_list                     000050 constant        entry                    external dcl 2-147 ref 85 129 454
create_operator                 000052 constant        entry                    external dcl 2-152 ref 392 428 430 492
create_statement                000054 constant        entry                    external dcl 2-163 ref 519
create_symbol                   000056 constant        entry                    external dcl 2-184 ref 397
create_token                    000060 constant        entry                    external dcl 2-191 ref 117 117
cross_section             0(10)        based           bit(1)                   level 2 packed packed unaligned dcl 17-27 ref 197
                                                                                  373
data_type                31            based           structure                level 3 packed packed unaligned dcl 20-3
dcl_size                 24            based           pointer                  level 2 packed packed unaligned dcl 20-3 set ref 108
                                                                                  108 427 438 460 469*
dcl_type                  1(19)        based           bit(3)                   level 2 packed packed unaligned dcl 20-3 ref 567
dec_integer                     000000 constant        bit(9)                   initial dcl 24-3 set ref 117* 117*
declare                         000016 constant        entry                    external dcl 1-41 ref 470
declare_constant$integer        000062 constant        entry                    external dcl 2-234 ref 291
declare_descriptor              000064 constant        entry                    external dcl 2-239 ref 373 410
declare_temporary               000066 constant        entry                    external dcl 2-292 ref 493 545
def_context                            based           structure                level 1 dcl 17-8
def_this_context                       based           structure                level 1 dcl 17-27
defined                  32(13)        based           bit(1)                   level 4 packed packed unaligned dcl 20-3 ref 202 341
defined_reference               000020 constant        entry                    external dcl 1-47 ref 344
desc_list                       000162 automatic       pointer                  dcl 17 set ref 85* 129* 140 179 369 373 410 475 479
                                                                                  480 494 496 529
desc_size                       000010 constant        bit(9)                   initial dcl 13-8 set ref 492*
descr_ptr                       000146 automatic       pointer                  dcl 17 set ref 195* 252* 308 379
descriptor               13            based           pointer                  level 2 packed packed unaligned dcl 20-3 set ref 179
                                                                                  195 252 301* 308* 379* 475*
descriptors_required            000164 automatic       bit(1)                   packed unaligned dcl 17 set ref 68* 99* 105* 105
                                                                                  108* 108 179 369 373 410 462* 473 527 539
dimensioned              31(19)        based           bit(1)                   level 4 packed packed unaligned dcl 20-3 ref 464 501
                                                                                  503
divide                                                 builtin function         dcl 30 ref 120
element                   1            based           pointer                  array level 2 packed packed unaligned dcl 11-6 set
                                                                                  ref 105 106 121 122* 122 123* 135 136 140* 144*
                                                                                  179* 234 237 240 240 243* 243 244* 244 272 272
                                                                                  291* 294* 369 373* 410* 414* 417 457* 457 475* 479
                                                                                  480 484* 494 496 523
entry                    31(09)        based           bit(1)                   level 4 packed packed unaligned dcl 20-3 ref 362 427
equivalence              14            based           pointer                  level 2 packed packed unaligned dcl 20-3 set ref 53
                                                                                  55 60 61 210*
expression_semantics            000022 constant        entry                    external dcl 1-105 ref 156 256 324 347 404 433
father                    1            based           pointer                  level 2 packed packed unaligned dcl 9-5 ref 367
flush_at_call            24(24)        based           bit(1)                   level 2 packed packed unaligned dcl 9-5 set ref 366*
force_nonquick           13(09)        based           bit(1)                   level 3 packed packed unaligned dcl 18-9 set ref 58
                                                                                  515*
general                  16            based           pointer                  level 2 packed packed unaligned dcl 20-3 ref 71
hbound                                                 builtin function         dcl 30 ref 318
i                               000154 automatic       fixed bin(15,0)          dcl 17 set ref 228* 240 240 243 244* 271* 272 272
                                                                                  291 294*
input_tree                             parameter       pointer                  dcl 17 ref 15 51 51 65
integer_type                    000002 constant        bit(36)                  initial dcl 22-71 set ref 493*
internal                 32(01)        based           bit(1)                   level 4 packed packed unaligned dcl 20-3 ref 362 542
is_constant                            constant        bit(9)                   initial dcl 24-47 ref 151
isub                     33(07)        based           bit(1)                   level 4 packed packed unaligned dcl 20-3 ref 204
j                               000155 automatic       fixed bin(15,0)          dcl 17 set ref 226* 229* 229 231 234 237 243 244
k                               000156 automatic       fixed bin(15,0)          dcl 17 set ref 120* 121 122 122 123* 126* 127* 127
                                                                                  129* 131* 135 140 144 179 369 373 410 414* 456*
                                                                                  457 457*
length                    6            based           pointer                  level 2 packed packed unaligned dcl 16-3 set ref
                                                                                  497* 499*
list                                   based           structure                level 1 dcl 11-6
lookup                          000024 constant        entry                    external dcl 1-153 ref 212
lower                     5            based           pointer                  level 2 packed packed unaligned dcl 8-21 set ref 291
                                                                                  294*
m                                      parameter       fixed bin(15,0)          dcl 555 set ref 553 559 559* 567*
make_non_quick                  000026 constant        entry                    external dcl 1-162 ref 516
match_arguments                 000030 constant        entry                    external dcl 1-166 ref 175 303 334
max_length_precision            000003 constant        fixed bin(31,0)          initial dcl 22-5 set ref 493*
max_list_elements                      constant        fixed bin(17,0)          initial dcl 11-12 ref 117 117 117
misc_attributes          31(19)        based           structure                level 3 packed packed unaligned dcl 20-3
n                               000157 automatic       fixed bin(15,0)          dcl 17 set ref 67* 100* 104* 104 111 120 122 123
                                                                                  452* 452 454* 456 475 479 480 484 494 496 523 539*
                                                                                  539 539 542* 542 545
newarray                        000150 automatic       pointer                  dcl 17 set ref 265* 266 267 267 275 275 275 281 300
                                                                                  331
newbound                        000152 automatic       pointer                  dcl 17 set ref 269* 278 280* 281 284 285* 285 288
                                                                                  289
next                      1            based           pointer                  level 2 in structure "statement" packed packed
                                                                                  unaligned dcl 18-9 in procedure "function" ref 386
                                                                                  390
next                     14            based           pointer                  level 2 in structure "bound" packed packed unaligned
                                                                                  dcl 8-21 in procedure "function" set ref 284* 285
                                                                                  289* 297
no_stack                 24(22)        based           bit(1)                   level 2 packed packed unaligned dcl 9-5 set ref 60*
node                                   based           structure                level 1 dcl 12-27
null                                                   builtin function         dcl 30 ref 53 70 73 78 82 82 91 103 108 136 138 140
                                                                                  175 219 255 263 269 278 289 291 301 303 315 327
                                                                                  334 344 344 345 362 369 383 388 395 397 397 397
                                                                                  397 417 434 448 493 493 499 519 519 537 545 545
null_statement                         constant        bit(9)                   initial dcl 19-3 ref 389
number                   24(27)        based           fixed bin(9,0)           level 2 in structure "block" packed packed unsigned
                                                                                  unaligned dcl 9-5 in procedure "function" ref 55
                                                                                  56
number                    0(21)        based           fixed bin(14,0)          level 2 in structure "list" packed packed unaligned
                                                                                  dcl 11-6 in procedure "function" ref 73 100 111
                                                                                  117 126 131 228 231 271
number_of_dimensions      1(07)        based           fixed bin(7,0)           level 2 packed packed unaligned dcl 8-1 set ref 267*
                                                                                  275 275*
offset                    5            based           pointer                  level 2 packed packed unaligned dcl 16-3 set ref 200
                                                                                  221* 225* 255* 261* 313* 313* 324* 324 345 347*
                                                                                  347
old                             000104 automatic       pointer                  dcl 17 set ref 132* 383 386
op                              000120 automatic       pointer                  dcl 17 set ref 392* 399 401 403 404* 404* 407 407*
                                                                                  407 410 410 410 492* 493 494 495 497
op_code                   0(09)        based           bit(9)                   level 2 packed packed unaligned dcl 14-6 ref 144 168
operand                   1            based           pointer                  array level 2 packed packed unaligned dcl 14-6 set
                                                                                  ref 69 73 78* 100 111 115 144 170 170 175 179 399*
                                                                                  401* 403* 407 429* 429 430* 431* 431 433* 434*
                                                                                  448* 454* 484* 493* 494* 529* 545* 564
operator                               based           structure                level 1 dcl 14-6
operator_node                          constant        bit(9)                   initial dcl 12-5 ref 142 166 407 564
overlayed                33(11)        based           bit(1)                   level 4 packed packed unaligned dcl 20-3 ref 202
own_number_of_dimensions
                          1(15)        based           fixed bin(7,0)           level 2 packed packed unaligned dcl 8-1 set ref 267*
                                                                                  275*
p                               000102 automatic       pointer                  dcl 17 set ref 136* 138* 175 175* 303 303* 334 334*
                                                                                  395 401 427* 427* 436* 438
p_desc_list                     000112 automatic       pointer                  dcl 17 set ref 71* 82 91 103 136 136 417 417* 417
passed_as_arg_bit               000005 constant        fixed bin(15,0)          initial dcl 21-3 set ref 356*
pl1_stat_$index                 000012 external static fixed bin(15,0)          dcl 28 set ref 317* 317 318 320 327* 327
pl1_stat_$locator               000010 external static pointer                  array dcl 27 set ref 318 320*
pl1_stat_$node_uses             000076 external static fixed bin(17,0)          array dcl 15-1 ref 57 57 57
pl1_stat_$quick_pt              000100 external static pointer                  dcl 15-3 ref 57
pp                              000254 automatic       pointer                  dcl 557 set ref 562* 564 564* 564 565 565* 565 567
prefix                   12(12)        based           bit(12)                  level 2 packed packed unaligned dcl 18-9 ref 519
processed                 0(19)        based           bit(1)                   level 2 packed packed unaligned dcl 14-6 set ref 51
                                                                                  495*
prologue                 11            based           pointer                  level 2 packed packed unaligned dcl 9-5 ref 383
propagate_bit                   000032 constant        entry                    external dcl 1-192 ref 355 356 358
q                               000122 automatic       pointer                  dcl 17 set ref 103* 103* 105* 106 121* 123 155* 156*
                                                                                  156* 158 166 168 170 170 173 175 179 185 188 193
                                                                                  200 256* 258 258* 258 261 303* 306* 313 315 320
                                                                                  323* 323* 324 324 325* 327 330 334* 341 344* 344*
                                                                                  345 347 347 348* 353 362* 362* 366* 367 383* 386*
                                                                                  387* 387 387* 388 389* 390 397* 398 399 428* 429
                                                                                  430 431 433* 460* 462 464 464 464 469* 470* 475
                                                                                  477 484 490 490 490 490 501 501 501 503 503 508
                                                                                  519* 521 562 567*
qualifier                 4            based           pointer                  level 2 packed packed unaligned dcl 16-3 ref 315 327
                                                                                  373 410
quick_info                             based           bit                      array dcl 15-5 set ref 57*
r                               000124 automatic       pointer                  dcl 17 set ref 484* 487 488 497 499
ref_count                 0(18)        based           fixed bin(17,0)          level 2 packed packed unaligned dcl 16-3 set ref
                                                                                  480* 488* 496* 523*
reference                              based           structure                level 1 dcl 16-3 in procedure "function"
reference                15            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 20-3 in procedure "function" set ref
                                                                                  258 313 399 401 484*
reference_node                         constant        bit(9)                   initial dcl 12-5 ref 158 215 565
return_value             32(18)        based           bit(1)                   level 4 packed packed unaligned dcl 20-3 ref 170
returns                  31(35)        based           bit(1)                   level 4 packed packed unaligned dcl 20-3 ref 85 127
                                                                                  421 436 443 446
root                      3            based           pointer                  level 2 packed packed unaligned dcl 18-9 set ref
                                                                                  388* 516 521*
s                                      parameter       pointer                  dcl 17 set ref 15 53 53 55 60 61 71 85 93 95* 96 108
                                                                                  108 127 421 427 443 446 460 469 530* 542 542 559*
sa                              000126 automatic       pointer                  dcl 17 set ref 354* 355* 356* 358 358 358* 362 362
                                                                                  362 362 373*
save_arg_list_op                000114 automatic       pointer                  dcl 17 set ref 76* 448
semantic_translator$abort       000070 constant        entry                    external dcl 2-446 ref 117 212 215 231 559
semantic_translator$error       000072 constant        entry                    external dcl 2-450 ref 95 206 306 567
set_bit                         000004 constant        fixed bin(15,0)          initial dcl 21-3 set ref 355*
share_expression                000074 constant        entry                    external dcl 2-454 ref 179
shared                    0(11)        based           bit(1)                   level 2 packed packed unaligned dcl 16-3 set ref
                                                                                  479* 487*
simplify_offset                 000034 constant        entry                    external dcl 1-212 ref 325 348
stack_extended_by_args
                         42(02)        based           bit(1)                   level 3 packed packed unaligned dcl 9-5 set ref 61*
star_extents             33(06)        based           bit(1)                   level 4 packed packed unaligned dcl 20-3 ref 105 108
                                                                                  462 464 477 490 501 508
statement                              based           structure                level 1 dcl 18-9
statement_type           12(27)        based           bit(9)                   level 2 packed packed unaligned dcl 18-9 set ref
                                                                                  389* 421
static                   32(11)        based           bit(1)                   level 4 packed packed unaligned dcl 20-3 ref 358
std_arg_list                    000012 constant        bit(9)                   initial dcl 13-8 set ref 430*
std_call                        000011 constant        bit(9)                   initial dcl 13-8 set ref 168 428*
stmnt                                  parameter       pointer                  dcl 17 set ref 15 58 132 156* 212* 256* 323* 324*
                                                                                  344* 347* 373* 387 404* 410* 421 433* 515 516 519
                                                                                  519
storage_block_type              000001 constant        bit(36)                  initial dcl 22-71 set ref 545*
storage_class            32(09)        based           structure                level 3 packed packed unaligned dcl 20-3
structure                31            based           bit(1)                   level 4 packed packed unaligned dcl 20-3 ref 341 464
                                                                                  501 503
subs                            000132 automatic       pointer                  dcl 17 set ref 200* 219 221* 228 240 240 243 244
                                                                                  247* 261 271 272 272 291 294 323*
subscripter                     000036 constant        entry                    external dcl 1-216 ref 323
substr                                                 builtin function         dcl 30 set ref 57*
sym                             000134 automatic       pointer                  dcl 17 set ref 193* 194 195 202 202 204 206* 210 212
                                                                                  212* 215* 222* 231* 248* 251 252 258 300 301 307
                                                                                  308 312 313 323* 331 341 341 344* 378 379
symbol                                 based           structure                level 1 dcl 20-3 in procedure "function"
symbol                    3            based           pointer                  level 2 in structure "reference" packed packed
                                                                                  unaligned dcl 16-3 in procedure "function" set ref
                                                                                  170 170 179 185 188 193 218* 354 410 565
symbol_node                            constant        bit(9)                   initial dcl 12-5 ref 185
t                               000130 automatic       pointer                  dcl 17 set ref 225* 231 234 237 243 244 247
temporary                32(17)        based           bit(1)                   level 4 packed packed unaligned dcl 20-3 set ref
                                                                                  398*
this_context                    000165 automatic       bit(36)                  dcl 17-5 set ref 134* 156* 197 256* 344* 373 404*
token                                  based           structure                level 1 dcl 23-3 in procedure "function"
token                     5            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 20-3 in procedure "function" ref 218
token_node                             constant        bit(9)                   initial dcl 12-5 ref 151 234 240 272
top                       0(05)        based           bit(1)                   level 2 packed packed unaligned dcl 17-8 ref 421
tree                            000100 automatic       pointer                  dcl 17 set ref 65* 69 78 429 431 433 434 448 484 521
                                                                                  548
type                                   based           bit(9)                   level 2 in structure "node" packed packed unaligned
                                                                                  dcl 12-27 in procedure "function" ref 142 151 158
                                                                                  166 185 215 234 240 272 407 564 565
type                      0(09)        based           bit(9)                   level 2 in structure "token" packed packed unaligned
                                                                                  dcl 23-3 in procedure "function" ref 151 237 240
                                                                                  272
variable                 31(32)        based           bit(1)                   level 4 packed packed unaligned dcl 20-3 ref 542
variable_arg_list        32(07)        based           bit(1)                   level 4 packed packed unaligned dcl 20-3 set ref 93
                                                                                  96*
varying                  31(26)        based           bit(1)                   level 4 packed packed unaligned dcl 20-3 ref 170 490
why_nonquick             42            based           structure                level 2 dcl 9-5

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
a_format                               internal static bit(9)                   initial dcl 13-8
abs_fun                                internal static bit(9)                   initial dcl 13-8
acos_fun                               internal static bit(9)                   initial dcl 13-8
acosd_fun                              internal static bit(9)                   initial dcl 13-8
add                                    internal static bit(9)                   initial dcl 13-8
addbitno_fun                           internal static bit(9)                   initial dcl 13-8
addcharno_fun                          internal static bit(9)                   initial dcl 13-8
addr_fun                               internal static bit(9)                   initial dcl 13-8
addr_fun_bits                          internal static bit(9)                   initial dcl 13-8
addrel_fun                             internal static bit(9)                   initial dcl 13-8
adjust_count                    000000 constant        entry                    external dcl 2-20
alloc_semantics                 000000 constant        entry                    external dcl 1-7
alloc_semantics$init_only       000000 constant        entry                    external dcl 1-12
allocate_statement                     internal static bit(9)                   initial dcl 19-3
allocation_fun                         internal static bit(9)                   initial dcl 13-8
allot_auto                             internal static bit(9)                   initial dcl 13-8
allot_based                            internal static bit(9)                   initial dcl 13-8
allot_ctl                              internal static bit(9)                   initial dcl 13-8
allot_var                              internal static bit(9)                   initial dcl 13-8
and                                    internal static bit(9)                   initial dcl 24-3
and_bits                               internal static bit(9)                   initial dcl 13-8
arg_desc_type                          internal static bit(36)                  initial dcl 22-71
array_node                             internal static bit(9)                   initial dcl 12-5
arrow                                  internal static bit(9)                   initial dcl 24-3
asin_fun                               internal static bit(9)                   initial dcl 13-8
asind_fun                              internal static bit(9)                   initial dcl 13-8
assign_by_name                         internal static bit(9)                   initial dcl 13-8
assign_round                           internal static bit(9)                   initial dcl 13-8
assign_size_ck                         internal static bit(9)                   initial dcl 13-8
assign_zero                            internal static bit(9)                   initial dcl 13-8
assignment                             internal static bit(9)                   initial dcl 24-3
atan_fun                               internal static bit(9)                   initial dcl 13-8
atand_fun                              internal static bit(9)                   initial dcl 13-8
b_format                               internal static bit(9)                   initial dcl 13-8
baseno_fun                             internal static bit(9)                   initial dcl 13-8
baseptr_fun                            internal static bit(9)                   initial dcl 13-8
begin_statement                        internal static bit(9)                   initial dcl 19-3
bin_integer                            internal static bit(9)                   initial dcl 24-3
binary_to_octal_string          000000 constant        entry                    external dcl 2-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 2-43
bindec                          000000 constant        entry                    external dcl 2-23
binoct                          000000 constant        entry                    external dcl 2-33
bit_pointer                            internal static bit(9)                   initial dcl 13-8
bit_string                             internal static bit(9)                   initial dcl 24-3
bit_to_char                            internal static bit(9)                   initial dcl 13-8
bit_to_word                            internal static bit(9)                   initial dcl 13-8
bit_type                               internal static bit(36)                  initial dcl 22-71
bitno_fun                              internal static bit(9)                   initial dcl 13-8
bits_per_binary_exponent               internal static fixed bin(31,0)          initial dcl 22-5
bits_per_character                     internal static fixed bin(31,0)          initial dcl 22-5
bits_per_decimal_digit                 internal static fixed bin(31,0)          initial dcl 22-5
bits_per_digit                         internal static fixed bin(31,1)          initial dcl 22-69
bits_per_double                        internal static fixed bin(31,0)          initial dcl 22-5
bits_per_half                          internal static fixed bin(31,0)          initial dcl 22-5
bits_per_packed_ptr                    internal static fixed bin(31,0)          initial dcl 22-5
bits_per_word                          internal static fixed bin(31,0)          initial dcl 22-5
block_node                             internal static bit(9)                   initial dcl 12-5
bn_format                              internal static bit(9)                   initial dcl 13-8
bool_fun                               internal static bit(9)                   initial dcl 13-8
bound_ck                               internal static bit(9)                   initial dcl 13-8
bound_node                             internal static bit(9)                   initial dcl 12-5
builtin                         000000 constant        entry                    external dcl 1-17
builtin_type                           internal static bit(36)                  initial dcl 22-71
by_context                             internal static bit(3)                   initial dcl 10-5
by_declare                             internal static bit(3)                   initial dcl 10-5
by_explicit_context                    internal static bit(3)                   initial dcl 10-5
by_implication                         internal static bit(3)                   initial dcl 10-5
by_name_agg_node                       internal static bit(9)                   initial dcl 12-5
byte_fun                               internal static bit(9)                   initial dcl 13-8
c_format                               internal static bit(9)                   initial dcl 13-8
cat                                    internal static bit(9)                   initial dcl 24-3
cat_string                             internal static bit(9)                   initial dcl 13-8
ceil_fun                               internal static bit(9)                   initial dcl 13-8
char_string                            internal static bit(9)                   initial dcl 24-3
char_to_word                           internal static bit(9)                   initial dcl 13-8
char_type                              internal static bit(36)                  initial dcl 22-71
characters_per_double                  internal static fixed bin(31,0)          initial dcl 22-5
characters_per_half                    internal static fixed bin(31,0)          initial dcl 22-5
characters_per_word                    internal static fixed bin(31,0)          initial dcl 22-5
charno_fun                             internal static bit(9)                   initial dcl 13-8
clock_fun                              internal static bit(9)                   initial dcl 13-8
close_file                             internal static bit(9)                   initial dcl 13-8
close_statement                        internal static bit(9)                   initial dcl 19-3
codeptr_fun                            internal static bit(9)                   initial dcl 13-8
colon                                  internal static bit(9)                   initial dcl 24-3
column_format                          internal static bit(9)                   initial dcl 13-8
comma                                  internal static bit(9)                   initial dcl 24-3
compare_declaration             000000 constant        entry                    external dcl 1-31
compare_expression              000000 constant        entry                    external dcl 2-48
complex_fun                            internal static bit(9)                   initial dcl 13-8
complex_type                           internal static bit(36)                  initial dcl 22-71
conjg_fun                              internal static bit(9)                   initial dcl 13-8
constant_length                 000000 constant        entry                    external dcl 2-54
context_node                           internal static bit(9)                   initial dcl 12-5
context_processor               000000 constant        entry                    external dcl 1-38
continue_statement                     internal static bit(9)                   initial dcl 19-3
convert                         000000 constant        entry                    external dcl 2-60
convert$from_builtin            000000 constant        entry                    external dcl 2-72
convert$to_integer              000000 constant        entry                    external dcl 2-66
convert$to_target               000000 constant        entry                    external dcl 2-88
convert$to_target_fb            000000 constant        entry                    external dcl 2-82
convert$validate                000000 constant        entry                    external dcl 2-78
copy_expression$copy_sons       000000 constant        entry                    external dcl 2-99
copy_string                            internal static bit(9)                   initial dcl 13-8
copy_unique_expression          000000 constant        entry                    external dcl 2-103
copy_words                             internal static bit(9)                   initial dcl 13-8
cos_fun                                internal static bit(9)                   initial dcl 13-8
cosd_fun                               internal static bit(9)                   initial dcl 13-8
create_block                    000000 constant        entry                    external dcl 2-112
create_context                  000000 constant        entry                    external dcl 2-122
create_cross_reference          000000 constant        entry                    external dcl 2-128
create_default                  000000 constant        entry                    external dcl 2-132
create_identifier               000000 constant        entry                    external dcl 2-136
create_label                    000000 constant        entry                    external dcl 2-140
create_reference                000000 constant        entry                    external dcl 2-158
create_statement$prologue       000000 constant        entry                    external dcl 2-171
create_storage                  000000 constant        entry                    external dcl 2-179
create_token$init_hash_table    000000 constant        entry                    external dcl 2-197
create_token$protected          000000 constant        entry                    external dcl 2-199
cross_reference_node                   internal static bit(9)                   initial dcl 12-5
dec_integer_type                       internal static bit(36)                  initial dcl 22-71
decbin                          000000 constant        entry                    external dcl 2-206
declare_constant                000000 constant        entry                    external dcl 2-211
declare_constant$bit            000000 constant        entry                    external dcl 2-219
declare_constant$char           000000 constant        entry                    external dcl 2-224
declare_constant$desc           000000 constant        entry                    external dcl 2-229
declare_descriptor$ctl          000000 constant        entry                    external dcl 2-249
declare_descriptor$param        000000 constant        entry                    external dcl 2-259
declare_integer                 000000 constant        entry                    external dcl 2-269
declare_picture                 000000 constant        entry                    external dcl 2-274
declare_picture_temp            000000 constant        entry                    external dcl 2-279
declare_pointer                 000000 constant        entry                    external dcl 2-287
declare_statement                      internal static bit(9)                   initial dcl 19-3
declare_structure               000000 constant        entry                    external dcl 1-44
decode_node_id                  000000 constant        entry                    external dcl 2-300
decode_source_id                000000 constant        entry                    external dcl 2-306
default_area_size                      internal static fixed bin(31,0)          initial dcl 22-5
default_fix_bin_p                      internal static fixed bin(31,0)          initial dcl 22-5
default_fix_dec_p                      internal static fixed bin(31,0)          initial dcl 22-5
default_flt_bin_p                      internal static fixed bin(31,0)          initial dcl 22-5
default_flt_dec_p                      internal static fixed bin(31,0)          initial dcl 22-5
default_node                           internal static bit(9)                   initial dcl 12-5
default_statement                      internal static bit(9)                   initial dcl 19-3
delete_file                            internal static bit(9)                   initial dcl 13-8
delete_statement                       internal static bit(9)                   initial dcl 19-3
digit_to_bit                           internal static bit(9)                   initial dcl 13-8
display_statement                      internal static bit(9)                   initial dcl 19-3
div                                    internal static bit(9)                   initial dcl 13-8
do_fun                                 internal static bit(9)                   initial dcl 13-8
do_semantics                    000000 constant        entry                    external dcl 1-57
do_spec                                internal static bit(9)                   initial dcl 13-8
do_statement                           internal static bit(9)                   initial dcl 19-3
e_format                               internal static bit(9)                   initial dcl 13-8
else_clause                            internal static bit(9)                   initial dcl 19-3
empty_area                             internal static bit(9)                   initial dcl 13-8
enable_on                              internal static bit(9)                   initial dcl 13-8
end_statement                          internal static bit(9)                   initial dcl 19-3
entry_statement                        internal static bit(9)                   initial dcl 19-3
entry_var_type                         internal static bit(36)                  initial dcl 22-71
environmentptr_fun                     internal static bit(9)                   initial dcl 13-8
eq                                     internal static bit(9)                   initial dcl 24-3
equal                                  internal static bit(9)                   initial dcl 13-8
error                           000000 constant        entry                    external dcl 2-314
error$omit_text                 000000 constant        entry                    external dcl 2-319
error_                          000000 constant        entry                    external dcl 2-324
error_$finish                   000000 constant        entry                    external dcl 2-343
error_$initialize_error         000000 constant        entry                    external dcl 2-341
error_$no_text                  000000 constant        entry                    external dcl 2-334
ex_prologue                            internal static bit(9)                   initial dcl 13-8
exit_statement                         internal static bit(9)                   initial dcl 19-3
exp                                    internal static bit(9)                   initial dcl 13-8
exp_fun                                internal static bit(9)                   initial dcl 13-8
expand_assign                   000000 constant        entry                    external dcl 1-62
expand_by_name                  000000 constant        entry                    external dcl 1-71
expand_infix                    000000 constant        entry                    external dcl 1-76
expand_initial                  000000 constant        entry                    external dcl 1-84
expand_prefix                   000000 constant        entry                    external dcl 1-89
expand_primitive                000000 constant        entry                    external dcl 1-97
expon                                  internal static bit(9)                   initial dcl 24-3
f_format                               internal static bit(9)                   initial dcl 13-8
fill_refer                      000000 constant        entry                    external dcl 1-113
fixed_bin                              internal static bit(9)                   initial dcl 24-3
fixed_dec                              internal static bit(9)                   initial dcl 24-3
float_bin                              internal static bit(9)                   initial dcl 24-3
float_dec                              internal static bit(9)                   initial dcl 24-3
floor_fun                              internal static bit(9)                   initial dcl 13-8
format_statement                       internal static bit(9)                   initial dcl 19-3
format_value_node                      internal static bit(9)                   initial dcl 12-5
fortran_read                           internal static bit(9)                   initial dcl 13-8
fortran_write                          internal static bit(9)                   initial dcl 13-8
free_based                             internal static bit(9)                   initial dcl 13-8
free_ctl                               internal static bit(9)                   initial dcl 13-8
free_node                       000000 constant        entry                    external dcl 2-345
free_statement                         internal static bit(9)                   initial dcl 19-3
free_var                               internal static bit(9)                   initial dcl 13-8
ftn_file_manip                         internal static bit(9)                   initial dcl 13-8
ftn_trans_loop                         internal static bit(9)                   initial dcl 13-8
function                        000000 constant        entry                    external dcl 1-125
ge                                     internal static bit(9)                   initial dcl 24-3
generic_selector                000000 constant        entry                    external dcl 1-134
get_array_size                  000000 constant        entry                    external dcl 2-348
get_data_trans                         internal static bit(9)                   initial dcl 13-8
get_edit_trans                         internal static bit(9)                   initial dcl 13-8
get_file                               internal static bit(9)                   initial dcl 13-8
get_list_trans                         internal static bit(9)                   initial dcl 13-8
get_size                        000000 constant        entry                    external dcl 2-352
get_statement                          internal static bit(9)                   initial dcl 19-3
get_string                             internal static bit(9)                   initial dcl 13-8
goto_statement                         internal static bit(9)                   initial dcl 19-3
greater_or_equal                       internal static bit(9)                   initial dcl 13-8
greater_than                           internal static bit(9)                   initial dcl 13-8
gt                                     internal static bit(9)                   initial dcl 24-3
half_to_word                           internal static bit(9)                   initial dcl 13-8
i_bin_integer                          internal static bit(9)                   initial dcl 24-3
i_dec_integer                          internal static bit(9)                   initial dcl 24-3
i_fixed_bin                            internal static bit(9)                   initial dcl 24-3
i_fixed_dec                            internal static bit(9)                   initial dcl 24-3
i_float_bin                            internal static bit(9)                   initial dcl 24-3
i_float_dec                            internal static bit(9)                   initial dcl 24-3
identifier                             internal static bit(9)                   initial dcl 24-3
if_statement                           internal static bit(9)                   initial dcl 19-3
imag_fun                               internal static bit(9)                   initial dcl 13-8
index_after_fun                        internal static bit(9)                   initial dcl 13-8
index_before_fun                       internal static bit(9)                   initial dcl 13-8
index_fun                              internal static bit(9)                   initial dcl 13-8
index_rev_fun                          internal static bit(9)                   initial dcl 13-8
io_data_list_semantics          000000 constant        entry                    external dcl 1-143
io_data_list_semantics$format_list_semantics
                                000000 constant        entry                    external dcl 1-120
io_semantics                    000000 constant        entry                    external dcl 1-148
is_arith_constant                      internal static bit(9)                   initial dcl 24-47
is_arithmetic_constant                 internal static bit(9)                   initial dcl 24-47
is_decimal_constant                    internal static bit(9)                   initial dcl 24-47
is_delimiter                           internal static bit(9)                   initial dcl 24-47
is_float_constant                      internal static bit(9)                   initial dcl 24-47
is_identifier                          internal static bit(9)                   initial dcl 24-47
is_imaginary_constant                  internal static bit(9)                   initial dcl 24-47
is_integral_constant                   internal static bit(9)                   initial dcl 24-47
is_isub                                internal static bit(9)                   initial dcl 24-47
isub                                   internal static bit(9)                   initial dcl 24-3
join                                   internal static bit(9)                   initial dcl 13-8
jump                                   internal static bit(9)                   initial dcl 13-8
jump_false                             internal static bit(9)                   initial dcl 13-8
jump_if_eq                             internal static bit(9)                   initial dcl 13-8
jump_if_ge                             internal static bit(9)                   initial dcl 13-8
jump_if_gt                             internal static bit(9)                   initial dcl 13-8
jump_if_le                             internal static bit(9)                   initial dcl 13-8
jump_if_lt                             internal static bit(9)                   initial dcl 13-8
jump_if_ne                             internal static bit(9)                   initial dcl 13-8
jump_true                              internal static bit(9)                   initial dcl 13-8
l_parn                                 internal static bit(9)                   initial dcl 13-8
label_array_element_node               internal static bit(9)                   initial dcl 12-5
label_node                             internal static bit(9)                   initial dcl 12-5
le                                     internal static bit(9)                   initial dcl 24-3
left_parn                              internal static bit(9)                   initial dcl 24-3
length                                                 builtin function         dcl 30
length_fun                             internal static bit(9)                   initial dcl 13-8
less_or_equal                          internal static bit(9)                   initial dcl 13-8
less_than                              internal static bit(9)                   initial dcl 13-8
line_format                            internal static bit(9)                   initial dcl 13-8
list_node                              internal static bit(9)                   initial dcl 12-5
local_label_var_type                   internal static bit(36)                  initial dcl 22-71
locate_file                            internal static bit(9)                   initial dcl 13-8
locate_statement                       internal static bit(9)                   initial dcl 19-3
lock_file                              internal static bit(9)                   initial dcl 13-8
lock_fun                               internal static bit(9)                   initial dcl 13-8
lock_statement                         internal static bit(9)                   initial dcl 19-3
log10_fun                              internal static bit(9)                   initial dcl 13-8
log2_fun                               internal static bit(9)                   initial dcl 13-8
log_fun                                internal static bit(9)                   initial dcl 13-8
loop                                   internal static bit(9)                   initial dcl 13-8
lt                                     internal static bit(9)                   initial dcl 24-3
machine_state_node                     internal static bit(9)                   initial dcl 12-5
make_desc                              internal static bit(9)                   initial dcl 13-8
max_area_size                          internal static fixed bin(31,0)          initial dcl 22-5
max_bit_string                         internal static fixed bin(31,0)          initial dcl 22-5
max_bit_string_constant                internal static fixed bin(31,0)          initial dcl 22-5
max_block_number                       internal static fixed bin(17,0)          initial dcl 9-74
max_char_string                        internal static fixed bin(31,0)          initial dcl 22-5
max_char_string_constant               internal static fixed bin(31,0)          initial dcl 22-5
max_fun                                internal static bit(9)                   initial dcl 13-8
max_identifier_length                  internal static fixed bin(31,0)          initial dcl 22-5
max_index_register_value               internal static fixed bin(31,0)          initial dcl 22-5
max_number_of_dimensions               internal static fixed bin(31,0)          initial dcl 22-5
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 14-15
max_offset_precision                   internal static fixed bin(31,0)          initial dcl 22-5
max_p_bin_or_dec                       internal static fixed bin(31,0)          initial dcl 22-5
max_p_dec                              internal static fixed bin(31,0)          initial dcl 22-5
max_p_fix_bin_1                        internal static fixed bin(31,0)          initial dcl 22-5
max_p_fix_bin_2                        internal static fixed bin(31,0)          initial dcl 22-5
max_p_flt_bin_1                        internal static fixed bin(31,0)          initial dcl 22-5
max_p_flt_bin_2                        internal static fixed bin(31,0)          initial dcl 22-5
max_scale                              internal static fixed bin(31,0)          initial dcl 22-5
max_signed_index_register_value        internal static fixed bin(31,0)          initial dcl 22-5
max_signed_xreg_precision              internal static fixed bin(31,0)          initial dcl 22-5
max_uns_xreg_precision                 internal static fixed bin(31,0)          initial dcl 22-5
max_words_per_variable                 internal static fixed bin(31,0)          initial dcl 22-5
merge_attributes                000000 constant        entry                    external dcl 2-355
min_area_size                          internal static fixed bin(31,0)          initial dcl 22-5
min_fun                                internal static bit(9)                   initial dcl 13-8
min_scale                              internal static fixed bin(31,0)          initial dcl 22-5
minus                                  internal static bit(9)                   initial dcl 24-3
mod_bit                                internal static bit(9)                   initial dcl 13-8
mod_byte                               internal static bit(9)                   initial dcl 13-8
mod_fun                                internal static bit(9)                   initial dcl 13-8
mod_half                               internal static bit(9)                   initial dcl 13-8
mod_word                               internal static bit(9)                   initial dcl 13-8
mult                                   internal static bit(9)                   initial dcl 13-8
ne                                     internal static bit(9)                   initial dcl 24-3
negate                                 internal static bit(9)                   initial dcl 13-8
ngt                                    internal static bit(9)                   initial dcl 24-3
nlt                                    internal static bit(9)                   initial dcl 24-3
no_token                               internal static bit(9)                   initial dcl 24-3
nop                                    internal static bit(9)                   initial dcl 13-8
not                                    internal static bit(9)                   initial dcl 24-3
not_bits                               internal static bit(9)                   initial dcl 13-8
not_equal                              internal static bit(9)                   initial dcl 13-8
off_fun                                internal static bit(9)                   initial dcl 13-8
offset_adder                    000000 constant        entry                    external dcl 1-172
on_statement                           internal static bit(9)                   initial dcl 19-3
open_file                              internal static bit(9)                   initial dcl 13-8
open_statement                         internal static bit(9)                   initial dcl 19-3
operator_semantics              000000 constant        entry                    external dcl 1-184
optimizer                       000000 constant        entry                    external dcl 2-361
or                                     internal static bit(9)                   initial dcl 24-3
or_bits                                internal static bit(9)                   initial dcl 13-8
overlayed_by_builtin_bit               internal static fixed bin(15,0)          initial dcl 21-3
pack                                   internal static bit(9)                   initial dcl 13-8
packed_digits_per_character            internal static fixed bin(31,0)          initial dcl 22-5
page_format                            internal static bit(9)                   initial dcl 13-8
param_desc_ptr                         internal static bit(9)                   initial dcl 13-8
param_ptr                              internal static bit(9)                   initial dcl 13-8
parse_error                     000000 constant        entry                    external dcl 2-364
parse_error$no_text             000000 constant        entry                    external dcl 2-368
percent                                internal static bit(9)                   initial dcl 24-3
period                                 internal static bit(9)                   initial dcl 24-3
picture_format                         internal static bit(9)                   initial dcl 13-8
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 2-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 2-372
pl1_mod_fun                            internal static bit(9)                   initial dcl 13-8
pl1_print$for_lex               000000 constant        entry                    external dcl 2-418
pl1_print$non_varying           000000 constant        entry                    external dcl 2-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 2-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 2-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 2-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 2-414
pl1_print$varying               000000 constant        entry                    external dcl 2-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 2-395
plus                                   internal static bit(9)                   initial dcl 24-3
pointer_type                           internal static bit(36)                  initial dcl 22-71
prefix_plus                            internal static bit(9)                   initial dcl 13-8
procedure_statement                    internal static bit(9)                   initial dcl 19-3
ptr_fun                                internal static bit(9)                   initial dcl 13-8
put_control                            internal static bit(9)                   initial dcl 13-8
put_data_trans                         internal static bit(9)                   initial dcl 13-8
put_edit_trans                         internal static bit(9)                   initial dcl 13-8
put_field                              internal static bit(9)                   initial dcl 13-8
put_field_chk                          internal static bit(9)                   initial dcl 13-8
put_file                               internal static bit(9)                   initial dcl 13-8
put_list_trans                         internal static bit(9)                   initial dcl 13-8
put_statement                          internal static bit(9)                   initial dcl 19-3
put_string                             internal static bit(9)                   initial dcl 13-8
r_format                               internal static bit(9)                   initial dcl 13-8
r_parn                                 internal static bit(9)                   initial dcl 13-8
range_ck                               internal static bit(9)                   initial dcl 13-8
rank_fun                               internal static bit(9)                   initial dcl 13-8
read_file                              internal static bit(9)                   initial dcl 13-8
read_statement                         internal static bit(9)                   initial dcl 19-3
real_fun                               internal static bit(9)                   initial dcl 13-8
real_type                              internal static bit(36)                  initial dcl 22-71
record_io                              internal static bit(9)                   initial dcl 13-8
refer                                  internal static bit(9)                   initial dcl 13-8
refer_extent                    000000 constant        entry                    external dcl 2-426
rel_fun                                internal static bit(9)                   initial dcl 13-8
repeat_fun                             internal static bit(9)                   initial dcl 13-8
reserve$clear                   000000 constant        entry                    external dcl 2-430
reserve$declare_lib             000000 constant        entry                    external dcl 2-434
reserve$read_lib                000000 constant        entry                    external dcl 2-439
return_bits                            internal static bit(9)                   initial dcl 13-8
return_statement                       internal static bit(9)                   initial dcl 19-3
return_string                          internal static bit(9)                   initial dcl 13-8
return_value                           internal static bit(9)                   initial dcl 13-8
return_words                           internal static bit(9)                   initial dcl 13-8
reverse_fun                            internal static bit(9)                   initial dcl 13-8
revert_on                              internal static bit(9)                   initial dcl 13-8
revert_statement                       internal static bit(9)                   initial dcl 19-3
rewrite_file                           internal static bit(9)                   initial dcl 13-8
rewrite_statement                      internal static bit(9)                   initial dcl 19-3
right_parn                             internal static bit(9)                   initial dcl 24-3
round_fun                              internal static bit(9)                   initial dcl 13-8
search_fun                             internal static bit(9)                   initial dcl 13-8
search_rev_fun                         internal static bit(9)                   initial dcl 13-8
segno_fun                              internal static bit(9)                   initial dcl 13-8
semantic_translator             000000 constant        entry                    external dcl 2-444
semantic_translator$call_es     000000 constant        entry                    external dcl 1-196
semi_colon                             internal static bit(9)                   initial dcl 24-3
setbitno_fun                           internal static bit(9)                   initial dcl 13-8
setcharno_fun                          internal static bit(9)                   initial dcl 13-8
sf_par_node                            internal static bit(9)                   initial dcl 12-5
sign_fun                               internal static bit(9)                   initial dcl 13-8
signal_on                              internal static bit(9)                   initial dcl 13-8
signal_statement                       internal static bit(9)                   initial dcl 19-3
simplify_expression             000000 constant        entry                    external dcl 1-205
sin_fun                                internal static bit(9)                   initial dcl 13-8
sind_fun                               internal static bit(9)                   initial dcl 13-8
skip_format                            internal static bit(9)                   initial dcl 13-8
slash                                  internal static bit(9)                   initial dcl 24-3
source_node                            internal static bit(9)                   initial dcl 12-5
sqrt_fun                               internal static bit(9)                   initial dcl 13-8
stack_ptr                              internal static bit(9)                   initial dcl 13-8
stackbaseptr_fun                       internal static bit(9)                   initial dcl 13-8
stackframeptr_fun                      internal static bit(9)                   initial dcl 13-8
stacq_fun                              internal static bit(9)                   initial dcl 13-8
statement_node                         internal static bit(9)                   initial dcl 12-5
std_entry                              internal static bit(9)                   initial dcl 13-8
std_return                             internal static bit(9)                   initial dcl 13-8
stop                                   internal static bit(9)                   initial dcl 13-8
stop_statement                         internal static bit(9)                   initial dcl 19-3
stream_prep                            internal static bit(9)                   initial dcl 13-8
sub                                    internal static bit(9)                   initial dcl 13-8
system_on_unit                         internal static bit(9)                   initial dcl 19-3
tan_fun                                internal static bit(9)                   initial dcl 13-8
tand_fun                               internal static bit(9)                   initial dcl 13-8
temporary_node                         internal static bit(9)                   initial dcl 12-5
terminate_trans                        internal static bit(9)                   initial dcl 13-8
token_to_binary                 000000 constant        entry                    external dcl 2-459
translate_fun                          internal static bit(9)                   initial dcl 13-8
trunc_fun                              internal static bit(9)                   initial dcl 13-8
unknown_statement                      internal static bit(9)                   initial dcl 19-3
unlock_file                            internal static bit(9)                   initial dcl 13-8
unlock_statement                       internal static bit(9)                   initial dcl 19-3
unpack                                 internal static bit(9)                   initial dcl 13-8
validate                        000000 constant        entry                    external dcl 1-225
vclock_fun                             internal static bit(9)                   initial dcl 13-8
verify_fun                             internal static bit(9)                   initial dcl 13-8
verify_ltrim_fun                       internal static bit(9)                   initial dcl 13-8
verify_rev_fun                         internal static bit(9)                   initial dcl 13-8
verify_rtrim_fun                       internal static bit(9)                   initial dcl 13-8
wait_statement                         internal static bit(9)                   initial dcl 19-3
word_to_mod2                           internal static bit(9)                   initial dcl 13-8
word_to_mod4                           internal static bit(9)                   initial dcl 13-8
word_to_mod8                           internal static bit(9)                   initial dcl 13-8
wordno_fun                             internal static bit(9)                   initial dcl 13-8
words_per_condition_var                internal static fixed bin(31,0)          initial dcl 22-5
words_per_entry_var                    internal static fixed bin(31,0)          initial dcl 22-5
words_per_file_var                     internal static fixed bin(31,0)          initial dcl 22-5
words_per_fix_bin_1                    internal static fixed bin(31,0)          initial dcl 22-5
words_per_fix_bin_2                    internal static fixed bin(31,0)          initial dcl 22-5
words_per_flt_bin_1                    internal static fixed bin(31,0)          initial dcl 22-5
words_per_flt_bin_2                    internal static fixed bin(31,0)          initial dcl 22-5
words_per_format                       internal static fixed bin(31,0)          initial dcl 22-5
words_per_label_var                    internal static fixed bin(31,0)          initial dcl 22-5
words_per_offset                       internal static fixed bin(31,0)          initial dcl 22-5
words_per_packed_pointer               internal static fixed bin(31,0)          initial dcl 22-5
words_per_pointer                      internal static fixed bin(31,0)          initial dcl 22-5
words_per_varying_string_header        internal static fixed bin(31,0)          initial dcl 22-5
write_file                             internal static bit(9)                   initial dcl 13-8
write_statement                        internal static bit(9)                   initial dcl 19-3
x_format                               internal static bit(9)                   initial dcl 13-8
xor_bits                               internal static bit(9)                   initial dcl 13-8

NAMES DECLARED BY EXPLICIT CONTEXT.
by_value                        002255 constant        label                    dcl 392 ref 148 151 175
function                        000040 constant        entry                    external dcl 15
next                            002426 constant        label                    dcl 414 ref 182 381
print                           003316 constant        entry                    internal dcl 553 ref 89 111 318 337 369 440 443 505
process_returns                 002442 constant        label                    dcl 421 ref 87
ret                             003312 constant        label                    dcl 548 ref 436
test                            001127 constant        label                    dcl 229 ref 234 237
undo                            002221 constant        label                    dcl 383 ref 166 168 170 185 188 207 309 338

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      3756        4060    3414        3766
Length      5004    3414       102         710     341           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
function                            260 external procedure  is an external procedure.  
print                                   internal procedure  shares stack frame of external procedure function.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
function                 000100 tree                        function
                         000102 p                           function
                         000104 old                         function
                         000106 arg_list                    function
                         000110 arg_list_op                 function
                         000112 p_desc_list                 function
                         000114 save_arg_list_op            function
                         000116 a                           function
                         000120 op                          function
                         000122 q                           function
                         000124 r                           function
                         000126 sa                          function
                         000130 t                           function
                         000132 subs                        function
                         000134 sym                         function
                         000136 array_ptr                   function
                         000140 bound_ptr                   function
                         000142 based_ref                   function
                         000144 based_sym                   function
                         000146 descr_ptr                   function
                         000150 newarray                    function
                         000152 newbound                    function
                         000154 i                           function
                         000155 j                           function
                         000156 k                           function
                         000157 n                           function
                         000160 called                      function
                         000161 caller                      function
                         000162 desc_list                   function
                         000164 descriptors_required        function
                         000165 this_context                function
                         000254 pp                          print

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_char_temp     unpk_to_pk          call_ext_out_desc   call_ext_out        return_mac          shorten_stack
ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
bindec$vs                     check_star_extents            copy_expression               create_array
create_bound                  create_list                   create_operator               create_statement
create_symbol                 create_token                  declare                       declare_constant$integer
declare_descriptor            declare_temporary             defined_reference             expression_semantics
lookup                        make_non_quick                match_arguments               propagate_bit
semantic_translator$abort     semantic_translator$error     share_expression              simplify_offset
subscripter

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pl1_stat_$index               pl1_stat_$locator             pl1_stat_$node_uses           pl1_stat_$quick_pt




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     15 000032        51 000045        53 000055        55 000065        56 000071        57 000076        58 000116
     60 000125        61 000127        65 000131        67 000133        68 000134        69 000135        70 000137
     71 000141        73 000143        76 000153        78 000154        82 000160        85 000170        87 000205
     89 000206        91 000212        93 000216        95 000224        96 000237        99 000244       100 000246
    101 000254       103 000255       104 000264       105 000265       106 000273       108 000277       111 000312
    115 000325       117 000330       120 000416       121 000427       122 000431       123 000440       124 000441
    126 000443       127 000447       129 000456       131 000467       132 000501       134 000506       135 000510
    136 000512       138 000522       140 000524       142 000527       144 000534       148 000544       151 000545
    155 000554       156 000566       158 000606       166 000613       168 000615       170 000622       173 000634
    175 000636       179 000662       182 000703       185 000704       188 000712       193 000715       194 000720
    195 000722       197 000724       199 000727       200 000731       202 000734       204 000743       206 000746
    207 000761       210 000762       212 000773       215 001040       218 001057       219 001063       221 001067
    222 001100       223 001102       225 001103       226 001114       228 001115       229 001127       231 001130
    234 001150       237 001156       240 001163       243 001200       244 001203       245 001205       247 001207
    248 001211       251 001213       252 001216       253 001221       255 001223       256 001226       258 001246
    261 001266       262 001271       263 001272       265 001274       266 001303       267 001310       269 001320
    271 001322       272 001333       275 001345       278 001364       280 001370       281 001377       282 001402
    284 001403       285 001415       288 001417       289 001424       291 001426       294 001447       297 001463
    298 001466       300 001470       301 001473       303 001475       306 001517       307 001532       308 001535
    309 001537       312 001540       313 001543       315 001560       317 001563       318 001565       320 001574
    323 001602       324 001624       325 001654       327 001667       330 001676       331 001700       332 001703
    334 001704       337 001726       338 001732       341 001733       344 001745       345 001773       347 001777
    348 002026       353 002041       354 002043       355 002046       356 002057       358 002070       362 002105
    366 002126       367 002131       369 002134       372 002146       373 002147       378 002213       379 002216
    381 002220       383 002221       386 002233       387 002236       388 002245       389 002250       390 002252
    392 002255       395 002272       397 002276       398 002316       399 002321       400 002324       401 002325
    403 002331       404 002333       407 002356       410 002365       414 002426       417 002431       419 002440
    421 002442       427 002462       428 002470       429 002505       430 002511       431 002531       433 002534
    434 002561       436 002563       438 002567       440 002572       441 002576       443 002577       446 002610
    448 002616       452 002626       453 002627       454 002631       456 002646       457 002657       458 002662
    460 002664       462 002671       464 002700       469 002705       470 002716       473 002725       475 002727
    477 002744       479 002750       480 002753       484 002755       487 002775       488 002777       490 003002
    492 003014       493 003031       494 003056       495 003061       496 003063       497 003066       498 003070
    499 003071       501 003074       503 003112       505 003120       508 003131       515 003135       516 003142
    519 003157       521 003211       523 003214       527 003220       529 003222       530 003225       537 003237
    539 003243       542 003247       545 003261       548 003312       553 003316       559 003320       562 003335
    564 003337       565 003346       567 003355       570 003375


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
