	COMPILATION LISTING OF SEGMENT process_switch_on
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 10/25/83  1535.8 mst Tue
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 process_switch_on: pswn: proc;
        7 
        8 /* Syntax:  process_switch_on switch_names
        9*	  process_switch_off switch_names
       10*
       11*Turns on or off the specified perprocess switches. */
       12 
       13 /* Written 07/14/83 by S. Herbst */
       14 
       15 
       16 /* Constants */
       17 
       18 dcl long_key (1) char (32) int static options (constant) init
       19 	( "256K");
       20 
       21 dcl short_key (1) char (32) int static options (constant) init
       22 	( "256k");
       23 
       24 dcl long_long_key (1) char (32) int static options (constant) init
       25 	( "256k_switch");
       26 
       27 dcl short_long_key (1) char (32) int static options (constant) init
       28 	( "256ksw");
       29 
       30 
       31 /* Based */
       32 
       33 dcl arg char (arg_len) based (arg_ptr);
       34 
       35 
       36 /* Automatic */
       37 
       38 dcl me char (32);
       39 dcl switch_value bit (1);
       40 dcl arg_ptr ptr;
       41 dcl (arg_count, i, j) fixed bin;
       42 dcl arg_len fixed bin (21);
       43 dcl code fixed bin (35);
       44 
       45 dcl error_table_$badopt fixed bin (35) ext;
       46 
       47 dcl (com_err_, com_err_$suppress_name) entry options (variable);
       48 dcl cu_$arg_count entry (fixed bin, fixed bin (35));
       49 dcl cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
       50 dcl hcs_$set_256K_switch entry (bit (2) aligned, bit (2) aligned, fixed bin (35));
       51 
       52 	me = "process_switch_on";
       53 	switch_value = "1"b;
       54 	go to COMMON;
       55 
       56 process_switch_off: pswf: entry;
       57 
       58 	me = "process_switch_off";
       59 	switch_value = "0"b;
       60 
       61 COMMON:	call cu_$arg_count (arg_count, code);
       62 	if code ^= 0 then do;
       63 	     call com_err_ (code, me);
       64 	     return;
       65 	end;
       66 	if arg_count = 0 then do;
       67 	     call com_err_$suppress_name (0, me, "Usage:  ^a switch_names", me);
       68 	     return;
       69 	end;
       70 
       71 	do i = 1 to arg_count;
       72 
       73 	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
       74 
       75 	     if index (arg, "-") = 1 then do;
       76 		call com_err_ (error_table_$badopt, me, "^a", arg);
       77 		return;
       78 	     end;
       79 	end;
       80 	
       81 	do i = 1 to arg_count;
       82 
       83 	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
       84 
       85 	     do j = hbound (long_key, 1) by -1 to 1 while (long_key (j) ^= arg); end;
       86 	     if j = 0 then do;
       87 		do j = hbound (short_key, 1) by -1 to 1 while (short_key (j) ^= arg); end;
       88 		if j = 0 then do;
       89 		     do j = hbound (long_long_key, 1) by -1 to 1 while
       90 			(long_long_key (j) ^= arg); end;
       91 		     if j = 0 then do;
       92 			do j = hbound (short_long_key, 1) by -1 to 1 while
       93 			     (short_long_key (j) ^= arg); end;
       94 			if j = 0 then do;
       95 			     call com_err_ (0, me, "Invalid switch_name ^a", arg);
       96 			     return;
       97 			end;
       98 		     end;
       99 		end;
      100 	     end;
      101 
      102 	     call set_one (j);
      103 	end;
      104 
      105 	return;
      106 
      107 set_one: proc (P_index);
      108 
      109 /* Sets the value of one switch */
      110 
      111 dcl P_index fixed bin;
      112 dcl K256_switch bit (2) aligned;
      113 
      114 	go to SET (P_index);
      115 
      116 SET (1):
      117 	if switch_value = "1"b then K256_switch = "11"b;
      118 	else K256_switch = "10"b;
      119 
      120 	call hcs_$set_256K_switch (K256_switch, ("0"b), code);
      121 	if code ^= 0 then call com_err_ (code, me, "Setting 256K switch.");
      122 
      123 	return;
      124 
      125 end set_one;
      126 
      127 
      128 end process_switch_on;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/25/83  1444.3  process_switch_on.pl1             >spec>on>eod-fix>process_switch_on.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
K256_switch                     000132 automatic       bit(2)                   dcl 112 set ref 116* 118* 120*
P_index                                parameter       fixed bin(17,0)          dcl 111 ref 107 114
arg                                    based           char                     unaligned dcl 33 set ref 75 76* 85 87 89 92 95*
arg_count                       000114 automatic       fixed bin(17,0)          dcl 41 set ref 61* 66 71 81
arg_len                         000117 automatic       fixed bin(21,0)          dcl 42 set ref 73* 75 76 76 83* 85 87 89 92 95 95
arg_ptr                         000112 automatic       pointer                  dcl 40 set ref 73* 75 76 83* 85 87 89 92 95
code                            000120 automatic       fixed bin(35,0)          dcl 43 set ref 61* 62 63* 73* 83* 120* 121 121*
com_err_                        000012 constant        entry                    external dcl 47 ref 63 76 95 121
com_err_$suppress_name          000014 constant        entry                    external dcl 47 ref 67
cu_$arg_count                   000016 constant        entry                    external dcl 48 ref 61
cu_$arg_ptr                     000020 constant        entry                    external dcl 49 ref 73 83
error_table_$badopt             000010 external static fixed bin(35,0)          dcl 45 set ref 76*
hcs_$set_256K_switch            000022 constant        entry                    external dcl 50 ref 120
i                               000115 automatic       fixed bin(17,0)          dcl 41 set ref 71* 73* 81* 83*
j                               000116 automatic       fixed bin(17,0)          dcl 41 set ref 85* 85* 86 87* 87* 88 89* 89* 91 92*
                                                                                  92* 94 102*
long_key                        000031 constant        char(32)                 initial array unaligned dcl 18 ref 85 85
long_long_key                   000011 constant        char(32)                 initial array unaligned dcl 24 ref 89 89
me                              000100 automatic       char(32)                 unaligned dcl 38 set ref 52* 58* 63* 67* 67* 76* 95*
                                                                                  121*
short_key                       000021 constant        char(32)                 initial array unaligned dcl 21 ref 87 87
short_long_key                  000001 constant        char(32)                 initial array unaligned dcl 27 ref 92 92
switch_value                    000110 automatic       bit(1)                   unaligned dcl 39 set ref 53* 59* 116

NAMES DECLARED BY EXPLICIT CONTEXT.
COMMON                          000151 constant        label                    dcl 61 ref 54
SET                             000000 constant        label                    array(1) dcl 116 ref 114
process_switch_off              000140 constant        entry                    external dcl 56
process_switch_on               000115 constant        entry                    external dcl 6
pswf                            000131 constant        entry                    external dcl 56
pswn                            000106 constant        entry                    external dcl 6
set_one                         000530 constant        entry                    internal dcl 107 ref 102

NAMES DECLARED BY CONTEXT OR IMPLICATION.
hbound                                                 builtin function         ref 85 87 89 92
index                                                  builtin function         ref 75

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       744         770     620         754
Length      1156     620        24         151     123           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
pswn                                150 external procedure  is an external procedure.  
set_one                                 internal procedure  shares stack frame of external procedure pswn.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
pswn                     000100 me                          pswn
                         000110 switch_value                pswn
                         000112 arg_ptr                     pswn
                         000114 arg_count                   pswn
                         000115 i                           pswn
                         000116 j                           pswn
                         000117 arg_len                     pswn
                         000120 code                        pswn
                         000132 K256_switch                 set_one

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      com_err_$suppress_name        cu_$arg_count                 cu_$arg_ptr
hcs_$set_256K_switch

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$badopt




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
      6 000105        52 000122        53 000125        54 000127        56 000130        58 000145        59 000150
     61 000151        62 000162        63 000164        64 000201        66 000202        67 000204        68 000234
     71 000235        73 000243        75 000260        76 000274        77 000326        79 000327        81 000331
     83 000341        85 000356        85 000373        86 000376        87 000400        87 000415        88 000420
     89 000422        90 000437        91 000442        92 000444        93 000461        94 000464        95 000466
     96 000522       102 000523       103 000525       105 000527       107 000530       114 000532       116 000534
    118 000542       120 000544       121 000561       123 000612


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
