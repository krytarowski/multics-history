	COMPILATION LISTING OF SEGMENT mtape_delete_defaults
	Compiled by: Multics PL/I Compiler, Release 28e, of February 14, 1985
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 04/09/85  1302.7 mst Tue
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 /* format: style4,inddcls,^ifthendo,^indproc,indcom,^indblkcom,declareind8,dclind4 */
        7 mtape_delete_defaults: proc ();
        8 
        9      /* DESCRIPTION:
       10*
       11*        This command deletes default arguments that have been set
       12*        by the mtape_set_defaults command.  It deletes the
       13*        defaults associated with a particular tape processing operation
       14*        and volume type.  The default arguments are deleted
       15*        from the value segment that the user specifies.
       16*
       17*     */
       18 
       19      /* HISTORY:
       20*
       21*        Written 09/13/83 by S. Krupp.
       22*     */
       23 
       24      /* START OF DECLARATIONS */
       25 
       26      /* Automatic */
       27 
       28           dcl arg_list_ptr ptr;
       29           dcl code fixed bin(35);
       30 	dcl db_entryname char(32);
       31 	dcl db_dirname char(168);
       32 	dcl db_full_pathname char(168) var;
       33 	dcl db_rel_pathname char(168) var;
       34 	dcl found_option bit(3);
       35 	dcl idx fixed bin;
       36           dcl nargs fixed bin;
       37 	dcl operation char(32) var;
       38 	dcl program_name char(64) var;
       39 	dcl result_ptr ptr;
       40           dcl value_seg_ptr ptr;
       41 	dcl volume_type char(32) var;
       42 
       43 	dcl 1 auto_area_info like area_info;
       44 
       45      /* Based */
       46 
       47           dcl found_option_array(3) bit(1) unaligned based(addr(found_option));
       48 
       49      /* Builtin */
       50 
       51           dcl (addr, hbound, null, unspec) builtin;
       52 
       53      /* Condition */
       54 
       55           dcl cleanup condition;
       56 
       57      /* Entries */
       58 
       59           dcl com_err_ entry() options(variable);
       60           dcl cu_$arg_count entry(fixed bin, fixed bin(35));
       61           dcl cu_$arg_list_ptr entry (ptr);
       62           dcl define_area_ entry (ptr, fixed bin(35));
       63 	dcl expand_pathname_$add_suffix entry (char(*), char(*), char(*), char(*), fixed bin(35));
       64 	dcl initiate_file_ entry (char(*), char(*), bit(*), ptr, fixed bin(24), fixed bin(35));
       65 	dcl ioa_$rsnnl entry() options(variable);
       66 	dcl pathname_ entry (char(*), char(*)) returns(char(168));
       67 	dcl process_arguments_$argument_list entry(char(*), fixed bin, ptr, fixed bin, ptr, ptr, ptr, fixed bin(35));
       68 	dcl process_arguments_$get_option_value entry() options(variable);
       69 	dcl release_area_ entry (ptr);
       70 	dcl term_$seg_ptr entry (ptr, fixed bin(35));
       71           dcl value_$delete_data entry(ptr, bit(36) aligned, char(*), fixed bin(35));
       72 
       73      /* Static */
       74 
       75           dcl (ARG_PROCESSING_MODE init(0),
       76 	     FIRST_ARG_TO_PROCESS init(1)
       77 	    ) fixed bin internal static options(constant);
       78 
       79           dcl (MYNAME init("mtape_delete_defaults"),
       80 	     PROGRAM_NAME_PREFIX init("mtape_")
       81 	    ) char(32) var internal static options(constant);
       82 
       83 	dcl (OPERATION_OPTION_IDX init(1),
       84 	     VOLUME_TYPE_OPTION_IDX init(2),
       85 	     PATHNAME_OPTION_IDX init(3)
       86 	    ) fixed bin internal static options(constant);
       87 
       88           dcl PERMANENT_VALUE bit(2) aligned init("01"b) internal static options(constant);
       89 	dcl VALUE_SUFFIX char(5) init("value") internal static options(constant);
       90 
       91           dcl (OPERATION_OPTION_NAME init("operation"),
       92 	     VOLUME_TYPE_OPTION_NAME init("volume_type"),
       93 	     PATHNAME_OPTION_NAME init("pathname")
       94 	    ) char(32) var internal static options(constant);
       95 
       96           dcl LONG_OPTION_REFNAME(3) char(32) var int static options(constant)
       97 	    init("operation", "-volume_type", "-pathname");
       98 
       99           dcl (ATTACH_IDX init(1),
      100 	     OPEN_IDX init(2),
      101 	     CLOSE_IDX init(3),
      102 	     DETACH_IDX init(4)
      103 	    ) fixed bin internal static options(constant);
      104 
      105           dcl OPERATIONS(4) char(6) internal static options(constant)
      106 	   init("attach", "open", "close", "detach");
      107 
      108           dcl VOLUME_TYPES(2) char(32) var internal static options(constant)
      109              init("ansi", "ibm");
      110 
      111           dcl (error_table_$bad_arg,
      112 	     error_table_$noarg,
      113 	     error_table_$oldnamerr
      114 	    )fixed bin(35) ext static;
      115 
      116 	dcl sys_info$max_seg_size fixed bin(35) ext static;
      117 
      118      /* Include */
      119 
      120 
  1     1 /* BEGIN INCLUDE FILE ... access_mode_values.incl.pl1
  1     2*
  1     3*   Values for the "access mode" argument so often used in hardcore
  1     4*   James R. Davis 26 Jan 81  MCR 4844
  1     5*   Added constants for SM access 4/28/82 Jay Pattin
  1     6*   Added text strings 03/19/85 Chris Jones
  1     7**/
  1     8 
  1     9 
  1    10 /* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
  1    11 dcl	(
  1    12 	N_ACCESS		   init ("000"b),
  1    13 	R_ACCESS		   init ("100"b),
  1    14 	E_ACCESS		   init ("010"b),
  1    15 	W_ACCESS		   init ("001"b),
  1    16 	RE_ACCESS		   init ("110"b),
  1    17 	REW_ACCESS	   init ("111"b),
  1    18 	RW_ACCESS		   init ("101"b),
  1    19 	S_ACCESS		   init ("100"b),
  1    20 	M_ACCESS		   init ("010"b),
  1    21 	A_ACCESS		   init ("001"b),
  1    22 	SA_ACCESS		   init ("101"b),
  1    23 	SM_ACCESS		   init ("110"b),
  1    24 	SMA_ACCESS	   init ("111"b)
  1    25 	)		   bit (3) internal static options (constant);
  1    26 
  1    27 /* The following arrays are meant to be accessed by doing either 1) bin (bit_value) or
  1    28*   2) divide (bin_value, 2) to come up with an index into the array. */
  1    29 
  1    30 dcl	SEG_ACCESS_MODE_NAMES  (0:7) init ("null", "W", "E", "EW", "R", "RW", "RE", "REW") char (4) internal
  1    31 			   static options (constant);
  1    32 
  1    33 dcl	DIR_ACCESS_MODE_NAMES  (0:7) init ("null", "A", "M", "MA", "S", "SA", "SM", "SMA") char (4) internal
  1    34 			   static options (constant);
  1    35 
  1    36 dcl	(
  1    37 	N_ACCESS_BIN	   init (00000b),
  1    38 	R_ACCESS_BIN	   init (01000b),
  1    39 	E_ACCESS_BIN	   init (00100b),
  1    40 	W_ACCESS_BIN	   init (00010b),
  1    41 	RW_ACCESS_BIN	   init (01010b),
  1    42 	RE_ACCESS_BIN	   init (01100b),
  1    43 	REW_ACCESS_BIN	   init (01110b),
  1    44 	S_ACCESS_BIN	   init (01000b),
  1    45 	M_ACCESS_BIN	   init (00010b),
  1    46 	A_ACCESS_BIN	   init (00001b),
  1    47 	SA_ACCESS_BIN	   init (01001b),
  1    48 	SM_ACCESS_BIN	   init (01010b),
  1    49 	SMA_ACCESS_BIN	   init (01011b)
  1    50 	)		   fixed bin (5) internal static options (constant);
  1    51 
  1    52 /* END INCLUDE FILE ... access_mode_values.incl.pl1 */
      121 
      122 
  2     1 /* BEGIN INCLUDE FILE area_info.incl.pl1  12/75 */
  2     2 
  2     3 dcl  area_info_version_1 fixed bin static init (1) options (constant);
  2     4 
  2     5 dcl  area_infop ptr;
  2     6 
  2     7 dcl 1 area_info aligned based (area_infop),
  2     8     2 version fixed bin,				/* version number for this structure is 1 */
  2     9     2 control aligned like area_control,		/* control bits for the area */
  2    10     2 owner char (32) unal,				/* creator of the area */
  2    11     2 n_components fixed bin,				/* number of components in the area (returned only) */
  2    12     2 size fixed bin (18),				/* size of the area in words */
  2    13     2 version_of_area fixed bin,			/* version of area (returned only) */
  2    14     2 areap ptr,					/* pointer to the area (first component on multisegment area) */
  2    15     2 allocated_blocks fixed bin,			/* number of blocks allocated */
  2    16     2 free_blocks fixed bin,				/* number of free blocks not in virgin */
  2    17     2 allocated_words fixed bin (30),			/* number of words allocated in the area */
  2    18     2 free_words fixed bin (30);			/* number of words free in area not in virgin */
  2    19 
  2    20 dcl 1 area_control aligned based,
  2    21     2 extend bit (1) unal,				/* says area is extensible */
  2    22     2 zero_on_alloc bit (1) unal,			/* says block gets zerod at allocation time */
  2    23     2 zero_on_free bit (1) unal,			/* says block gets zerod at free time */
  2    24     2 dont_free bit (1) unal,			/* debugging aid, turns off free requests */
  2    25     2 no_freeing bit (1) unal,			/* for allocation method without freeing */
  2    26     2 system bit (1) unal,				/* says area is managed by system */
  2    27     2 pad bit (30) unal;
  2    28 
  2    29 /* END INCLUDE FILE area_info.incl.pl1 */
      123 
      124 
  3     1 /* BEGIN INCLUDE FILE - pa_value_names.incl.pl1 */
  3     2 
  3     3 /* DESCRIPTION:
  3     4*          This include file defines constants for the names of the values in
  3     5*     which the definition_pva_string and the default_linear_form are stored.
  3     6**/
  3     7 
  3     8 /* HISTORY:
  3     9*Written by Lindsey Spratt, 07/26/83.
  3    10*Modified:
  3    11**/
  3    12 
  3    13 /* format: style2,ind3 */
  3    14      dcl	   (
  3    15 	   DEFAULT_LINEAR_FORM_PREFIX
  3    16 			      init ("default_linear_form"),
  3    17 	   DEFINITION_PREFIX      init ("definition")
  3    18 	   )		      char (32) varying internal static options (constant);
  3    19 
  3    20 /* END INCLUDE FILE - pa_value_names.incl.pl1 */
      125 
      126 
      127      /* END OF DECLARATIONS */
      128 
      129 
      130      /* Main Procedure */
      131 
      132      /* Initialize */
      133 
      134           value_seg_ptr = null;
      135 
      136 	unspec (auto_area_info) = "0"b;
      137 	auto_area_info.version = area_info_version_1;
      138 	auto_area_info.areap = null;
      139 	auto_area_info.owner = MYNAME;
      140 	auto_area_info.size = sys_info$max_seg_size;
      141 	auto_area_info.zero_on_alloc = "1"b;
      142 	auto_area_info.extend = "1"b;
      143 
      144           call cu_$arg_count(nargs, code);
      145           if code ^= 0
      146           then call ABORT(code, "Could not get the argument count.", "");
      147 
      148           if nargs = 0
      149           then call ABORT(0, "Usage ""mtape_delete_defaults OPERATION {-control_args}""", "");
      150 
      151 	on cleanup call CLEANUP();
      152 
      153 	call define_area_(addr(auto_area_info), code);
      154 	if code ^= 0
      155 	then call ABORT(code, "Unable to allocate a work area.", "");
      156 
      157   /* Get mtape_delete_default's argument list. */
      158 
      159           call cu_$arg_list_ptr(arg_list_ptr);
      160 
      161   /* Process mtape_delete_defaults's arguments. */
      162 
      163           call process_arguments_$argument_list((MYNAME), ARG_PROCESSING_MODE,
      164 	   arg_list_ptr, FIRST_ARG_TO_PROCESS, null, auto_area_info.areap,
      165 	   result_ptr, code);
      166           if code ^= 0
      167 	then call ABORT_SILENT();			/* Error msg already printed. */
      168 
      169   /* Get information needed to locate the arguments that are the
      170*     subject of the command line (i.e., the arguments that are
      171*     the defaults for the specified tape processing operation and
      172*     volume type). */
      173 
      174           call process_arguments_$get_option_value(result_ptr,
      175 	   auto_area_info.areap, found_option, OPERATION_OPTION_NAME,
      176 	   operation, VOLUME_TYPE_OPTION_NAME, volume_type,
      177 	   PATHNAME_OPTION_NAME, db_rel_pathname);
      178 
      179           if ^found_option_array(OPERATION_OPTION_IDX)
      180           then call ABORT(error_table_$noarg, "Missing ""^a"" option.",
      181 	   (LONG_OPTION_REFNAME(OPERATION_OPTION_IDX)));
      182 
      183          do idx = 1 to hbound(OPERATIONS, 1) while(OPERATIONS(idx) ^= operation);
      184 	end;
      185 
      186 	if idx > hbound(OPERATIONS, 1)
      187 	then call ABORT(error_table_$bad_arg, "Unknown operation specified:  ""^a"".", (operation));
      188 
      189 	if found_option_array(VOLUME_TYPE_OPTION_IDX)
      190           then do;
      191                do idx = 1 to hbound(VOLUME_TYPES, 1) while(VOLUME_TYPES(idx) ^= volume_type);
      192                end;
      193 
      194                if idx > hbound(VOLUME_TYPES, 1)
      195                then call ABORT(error_table_$bad_arg, "Unknown volume type specified:  ""^a"".", (volume_type));
      196 
      197                if operation = OPERATIONS(ATTACH_IDX) | operation = OPERATIONS(DETACH_IDX)
      198                then call ABORT(error_table_$bad_arg, "Cannot specify the volume type """ ||
      199                   volume_type || """ with the ""^a"" operation.", (operation));
      200           end;
      201 
      202   /* Build the program name from the specified tape processing operation and
      203*     volume type. */
      204  
      205           call ioa_$rsnnl("^a.^a^[.^a^;^]", program_name, (0), PROGRAM_NAME_PREFIX,
      206 	   operation, found_option_array(VOLUME_TYPE_OPTION_IDX), volume_type);
      207 
      208   /* Now we locate the value segment and delete the default arguments
      209*     if they are in there. */
      210 
      211           call expand_pathname_$add_suffix((db_rel_pathname), VALUE_SUFFIX, db_dirname, db_entryname, code);
      212 	if code ^= 0
      213 	then call ABORT(code, "^a", (db_rel_pathname));
      214 
      215 	db_full_pathname = pathname_(db_dirname, db_entryname);
      216 
      217 	call initiate_file_(db_dirname, db_entryname, RW_ACCESS, value_seg_ptr, (0), code);
      218 	if code ^= 0
      219 	then call ABORT(code, "Unable to initiate ^a.", (db_full_pathname));
      220 
      221           call value_$delete_data(value_seg_ptr, (PERMANENT_VALUE), DEFAULT_LINEAR_FORM_PREFIX ||
      222              "." || program_name, code);
      223           if code = error_table_$oldnamerr
      224 	then call ABORT((0), "There are no corresponding default arguments^/in ^a.", (db_full_pathname));
      225            else if code ^= 0
      226 	then call ABORT(code, "Unable to delete the default arguments from ^a.", (db_full_pathname));
      227 
      228           call CLEANUP();
      229 
      230 RETURN:
      231 
      232           return;
      233 
      234 CLEANUP: proc();
      235 
      236           if auto_area_info.areap ^= null
      237 	then call release_area_(auto_area_info.areap);
      238 
      239 	if value_seg_ptr ^= null
      240 	then call term_$seg_ptr(value_seg_ptr, code);
      241 
      242      end CLEANUP;
      243 
      244 
      245 ABORT: proc (code, msg, msg_arg);
      246 
      247      /* Parameter */
      248 
      249 	dcl code fixed bin (35);
      250 	dcl msg char (*);
      251 	dcl msg_arg char (*);
      252 
      253 	call com_err_ (code, MYNAME, msg, msg_arg);
      254 	call CLEANUP();
      255 
      256 	goto RETURN;
      257 
      258      end ABORT;
      259 
      260 
      261 ABORT_SILENT: proc();
      262 
      263           call CLEANUP();
      264 
      265 	goto RETURN;
      266 
      267      end ABORT_SILENT;
      268 
      269      end mtape_delete_defaults;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/08/85  1129.0  mtape_delete_defaults.pl1         >special_ldd>online>41-15-04/10/85>mtape_delete_defaults.pl1
121          1    04/09/85  1109.7  access_mode_values.incl.pl1       >special_ldd>online>41-15-04/10/85>access_mode_values.incl.pl1
123          2    06/11/76  1043.4  area_info.incl.pl1                >ldd>include>area_info.incl.pl1
125          3    02/16/84  1452.4  pa_value_names.incl.pl1           >ldd>include>pa_value_names.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ARG_PROCESSING_MODE             000206 constant        fixed bin(17,0)          initial dcl 75 set ref 163*
ATTACH_IDX                             constant        fixed bin(17,0)          initial dcl 99 ref 197
DEFAULT_LINEAR_FORM_PREFIX      000000 constant        varying char(32)         initial dcl 3-14 ref 221
DETACH_IDX                             constant        fixed bin(17,0)          initial dcl 99 ref 197
FIRST_ARG_TO_PROCESS            000210 constant        fixed bin(17,0)          initial dcl 75 set ref 163*
LONG_OPTION_REFNAME             000042 constant        varying char(32)         initial array dcl 96 ref 179
MYNAME                          000143 constant        varying char(32)         initial dcl 79 set ref 139 163 253*
OPERATIONS                      000034 constant        char(6)                  initial array unaligned dcl 105 ref 183 183 186 197
                                                                                  197
OPERATION_OPTION_IDX                   constant        fixed bin(17,0)          initial dcl 83 ref 179 179
OPERATION_OPTION_NAME           000117 constant        varying char(32)         initial dcl 91 set ref 174*
PATHNAME_OPTION_NAME            000075 constant        varying char(32)         initial dcl 91 set ref 174*
PERMANENT_VALUE                        constant        bit(2)                   initial dcl 88 ref 221
PROGRAM_NAME_PREFIX             000132 constant        varying char(32)         initial dcl 79 set ref 205*
RW_ACCESS                       000011 constant        bit(3)                   initial unaligned dcl 1-11 set ref 217*
VALUE_SUFFIX                    000130 constant        char(5)                  initial unaligned dcl 89 set ref 211*
VOLUME_TYPES                    000012 constant        varying char(32)         initial array dcl 108 ref 191 191 194
VOLUME_TYPE_OPTION_IDX                 constant        fixed bin(17,0)          initial dcl 83 ref 189 205
VOLUME_TYPE_OPTION_NAME         000106 constant        varying char(32)         initial dcl 91 set ref 174*
addr                                                   builtin function         dcl 51 ref 153 153 179 189 205
area_control                           based           structure                level 1 dcl 2-20
area_info                              based           structure                level 1 dcl 2-7
area_info_version_1                    constant        fixed bin(17,0)          initial dcl 2-3 ref 137
areap                    16     000366 automatic       pointer                  level 2 dcl 43 set ref 138* 163* 174* 236 236*
arg_list_ptr                    000100 automatic       pointer                  dcl 28 set ref 159* 163*
auto_area_info                  000366 automatic       structure                level 1 unaligned dcl 43 set ref 136* 153 153
cleanup                         000412 stack reference condition                dcl 55 ref 151
code                                   parameter       fixed bin(35,0)          dcl 249 in procedure "ABORT" set ref 245 253*
code                            000102 automatic       fixed bin(35,0)          dcl 29 in procedure "mtape_delete_defaults" set ref
                                                                                  144* 145 145* 153* 154 154* 163* 166 211* 212 212*
                                                                                  217* 218 218* 221* 223 225 225* 239*
com_err_                        000010 constant        entry                    external dcl 59 ref 253
control                   1     000366 automatic       structure                level 2 dcl 43
cu_$arg_count                   000012 constant        entry                    external dcl 60 ref 144
cu_$arg_list_ptr                000014 constant        entry                    external dcl 61 ref 159
db_dirname                      000113 automatic       char(168)                unaligned dcl 31 set ref 211* 215* 217*
db_entryname                    000103 automatic       char(32)                 unaligned dcl 30 set ref 211* 215* 217*
db_full_pathname                000165 automatic       varying char(168)        dcl 32 set ref 215* 218 223 225
db_rel_pathname                 000240 automatic       varying char(168)        dcl 33 set ref 174* 211 212
define_area_                    000016 constant        entry                    external dcl 62 ref 153
error_table_$bad_arg            000042 external static fixed bin(35,0)          dcl 111 set ref 186* 194* 197*
error_table_$noarg              000044 external static fixed bin(35,0)          dcl 111 set ref 179*
error_table_$oldnamerr          000046 external static fixed bin(35,0)          dcl 111 ref 223
expand_pathname_$add_suffix     000020 constant        entry                    external dcl 63 ref 211
extend                    1     000366 automatic       bit(1)                   level 3 packed unaligned dcl 43 set ref 142*
found_option                    000313 automatic       bit(3)                   unaligned dcl 34 set ref 174* 179 189 205
found_option_array                     based           bit(1)                   array unaligned dcl 47 set ref 179 189 205*
hbound                                                 builtin function         dcl 51 ref 183 186 191 194
idx                             000314 automatic       fixed bin(17,0)          dcl 35 set ref 183* 183* 186 191* 191* 194
initiate_file_                  000022 constant        entry                    external dcl 64 ref 217
ioa_$rsnnl                      000024 constant        entry                    external dcl 65 ref 205
msg                                    parameter       char                     unaligned dcl 250 set ref 245 253*
msg_arg                                parameter       char                     unaligned dcl 251 set ref 245 253*
nargs                           000315 automatic       fixed bin(17,0)          dcl 36 set ref 144* 148
null                                                   builtin function         dcl 51 ref 134 138 163 163 236 239
operation                       000316 automatic       varying char(32)         dcl 37 set ref 174* 183 186 197 197 197 205*
owner                     2     000366 automatic       char(32)                 level 2 packed unaligned dcl 43 set ref 139*
pathname_                       000026 constant        entry                    external dcl 66 ref 215
process_arguments_$argument_list
                                000030 constant        entry                    external dcl 67 ref 163
process_arguments_$get_option_value
                                000032 constant        entry                    external dcl 68 ref 174
program_name                    000327 automatic       varying char(64)         dcl 38 set ref 205* 221
release_area_                   000034 constant        entry                    external dcl 69 ref 236
result_ptr                      000350 automatic       pointer                  dcl 39 set ref 163* 174*
size                     13     000366 automatic       fixed bin(18,0)          level 2 dcl 43 set ref 140*
sys_info$max_seg_size           000050 external static fixed bin(35,0)          dcl 116 ref 140
term_$seg_ptr                   000036 constant        entry                    external dcl 70 ref 239
unspec                                                 builtin function         dcl 51 set ref 136*
value_$delete_data              000040 constant        entry                    external dcl 71 ref 221
value_seg_ptr                   000352 automatic       pointer                  dcl 40 set ref 134* 217* 221* 239 239*
version                         000366 automatic       fixed bin(17,0)          level 2 dcl 43 set ref 137*
volume_type                     000354 automatic       varying char(32)         dcl 41 set ref 174* 191 194 197 205*
zero_on_alloc             1(01) 000366 automatic       bit(1)                   level 3 packed unaligned dcl 43 set ref 141*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
A_ACCESS                               internal static bit(3)                   initial unaligned dcl 1-11
A_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 1-36
CLOSE_IDX                              internal static fixed bin(17,0)          initial dcl 99
DEFINITION_PREFIX                      internal static varying char(32)         initial dcl 3-14
DIR_ACCESS_MODE_NAMES                  internal static char(4)                  initial array unaligned dcl 1-33
E_ACCESS                               internal static bit(3)                   initial unaligned dcl 1-11
E_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 1-36
M_ACCESS                               internal static bit(3)                   initial unaligned dcl 1-11
M_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 1-36
N_ACCESS                               internal static bit(3)                   initial unaligned dcl 1-11
N_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 1-36
OPEN_IDX                               internal static fixed bin(17,0)          initial dcl 99
PATHNAME_OPTION_IDX                    internal static fixed bin(17,0)          initial dcl 83
REW_ACCESS                             internal static bit(3)                   initial unaligned dcl 1-11
REW_ACCESS_BIN                         internal static fixed bin(5,0)           initial dcl 1-36
RE_ACCESS                              internal static bit(3)                   initial unaligned dcl 1-11
RE_ACCESS_BIN                          internal static fixed bin(5,0)           initial dcl 1-36
RW_ACCESS_BIN                          internal static fixed bin(5,0)           initial dcl 1-36
R_ACCESS                               internal static bit(3)                   initial unaligned dcl 1-11
R_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 1-36
SA_ACCESS                              internal static bit(3)                   initial unaligned dcl 1-11
SA_ACCESS_BIN                          internal static fixed bin(5,0)           initial dcl 1-36
SEG_ACCESS_MODE_NAMES                  internal static char(4)                  initial array unaligned dcl 1-30
SMA_ACCESS                             internal static bit(3)                   initial unaligned dcl 1-11
SMA_ACCESS_BIN                         internal static fixed bin(5,0)           initial dcl 1-36
SM_ACCESS                              internal static bit(3)                   initial unaligned dcl 1-11
SM_ACCESS_BIN                          internal static fixed bin(5,0)           initial dcl 1-36
S_ACCESS                               internal static bit(3)                   initial unaligned dcl 1-11
S_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 1-36
W_ACCESS                               internal static bit(3)                   initial unaligned dcl 1-11
W_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 1-36
area_infop                             automatic       pointer                  dcl 2-5

NAMES DECLARED BY EXPLICIT CONTEXT.
ABORT                           001734 constant        entry                    internal dcl 245 ref 145 148 154 179 186 194 197 212
                                                                                  218 223 225
ABORT_SILENT                    002011 constant        entry                    internal dcl 261 ref 166
CLEANUP                         001674 constant        entry                    internal dcl 234 ref 151 228 254 263
RETURN                          001672 constant        label                    dcl 230 ref 256 265
mtape_delete_defaults           000370 constant        entry                    external dcl 7

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      2272        2344    2020        2302
Length      2636    2020        52         256     251           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
mtape_delete_defaults               448 external procedure  is an external procedure.  
on unit on line 151                  64 on unit               
CLEANUP                              74 internal procedure  is called by several nonquick procedures.  
ABORT                                84 internal procedure  is called during a stack extension.  
ABORT_SILENT                            internal procedure  shares stack frame of external procedure mtape_delete_defaults.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
mtape_delete_defaults    000100 arg_list_ptr                mtape_delete_defaults
                         000102 code                        mtape_delete_defaults
                         000103 db_entryname                mtape_delete_defaults
                         000113 db_dirname                  mtape_delete_defaults
                         000165 db_full_pathname            mtape_delete_defaults
                         000240 db_rel_pathname             mtape_delete_defaults
                         000313 found_option                mtape_delete_defaults
                         000314 idx                         mtape_delete_defaults
                         000315 nargs                       mtape_delete_defaults
                         000316 operation                   mtape_delete_defaults
                         000327 program_name                mtape_delete_defaults
                         000350 result_ptr                  mtape_delete_defaults
                         000352 value_seg_ptr               mtape_delete_defaults
                         000354 volume_type                 mtape_delete_defaults
                         000366 auto_area_info              mtape_delete_defaults

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_cs            cat_realloc_cs      call_ext_out_desc   call_ext_out        call_int_this_desc  call_int_this
call_int_other      return              tra_ext             enable              shorten_stack       ext_entry
int_entry           int_entry_desc

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      cu_$arg_count                 cu_$arg_list_ptr              define_area_
expand_pathname_$add_suffix   initiate_file_                ioa_$rsnnl                    pathname_
process_arguments_$argument_list                            process_arguments_$get_option_value
release_area_                 term_$seg_ptr                 value_$delete_data

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$bad_arg          error_table_$noarg            error_table_$oldnamerr        sys_info$max_seg_size




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
      7 000367       134 000375       136 000377       137 000402       138 000404       139 000406       140 000412
    141 000414       142 000416       144 000420       145 000430       148 000455       151 000503       153 000525
    154 000540       159 000565       163 000574       166 000646       174 000652       179 000716       183 000765
    184 001001       186 001003       189 001042       191 001050       192 001065       194 001067       197 001126
    200 001221       205 001222       211 001271       212 001332       215 001367       217 001415       218 001453
    221 001510       223 001565       225 001627       228 001665       230 001672       234 001673       236 001701
    239 001714       242 001732       245 001733       253 001754       254 002001       256 002006       261 002011
    263 002012       265 002016


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
