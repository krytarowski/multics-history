	COMPILATION LISTING OF SEGMENT declare
	Compiled by: Multics PL/I Compiler, Release 32c, of June 16, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 07/31/89  1400.6 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 declare: proc(ps);
       12 
       13 dcl	(ps,s,b,d,p,q,p1,rv) ptr;
       14 dcl	(i,n) fixed bin(15);
       15 dcl	cdesc bit(1);
       16 
       17 dcl	pl1_stat_$eis_mode bit(1) aligned ext static;
       18 
       19 dcl	condition_abreviations(9) char(8) int static
       20 		initial("conv","fofl","ofl","strg","strz","subrg","undf","ofl","zdiv");
       21 dcl	condition_constants(9) char(16) int static varying
       22 		initial("conversion","fixedoverflow","overflow","stringrange","stringsize",
       23 		"subscriptrange","undefinedfile","underflow","zerodivide");
       24 dcl	(string,fixed,null,substr) builtin;
       25 
       26 	s = ps;
       27 	if s=null then return;
       28 	if s->node.type ^= symbol_node
       29 	then do;
       30 		if s -> label.array
       31 		then	call declare_label_array;
       32 		return;
       33 	end;
       34 
       35 	if s->symbol.boundary ^= 0 then return;
       36 	if s->symbol.father ^= null then return;
       37 
       38 	if s->symbol.son ^= null
       39 	then do;
       40 		if s->symbol.level ^= 1
       41 		then do;
       42 			call semantic_translator$error(149,s);
       43 			s->symbol.level = 1;
       44 		end;
       45 
       46 		call declare_structure(s);
       47 
       48 		go to exit;
       49 	end;
       50 
       51 	if s-> symbol.structure
       52 	then do;
       53 		call semantic_translator$error(98,s);
       54 		s->symbol.structure = "0"b;
       55 		s->symbol.level = 0;
       56 	end;
       57 
       58 
       59 /* call validate to supply defaults and check for correctness of the declared attributes.	*/
       60 
       61 	call validate(s);
       62 
       63 /* Set the aliasable bit */
       64 
       65 	if s -> symbol.based | s -> symbol.parameter | s -> symbol.defined | s -> symbol.external
       66 	then s -> symbol.aliasable = "1"b;
       67 
       68 /* set the padded bit for this level one scalar.	*/
       69 
       70 	if s->symbol.packed
       71 	then	s->symbol.reference->reference.padded_ref =
       72 			^(s->symbol.based|s->symbol.parameter|s->symbol.defined);
       73 
       74 	b=s->symbol.block_node;
       75 
       76 /* if parameter, returns descriptor, or controlled variable, replace the asterisks with references to descriptors.	*/
       77 
       78 	cdesc = s->symbol.parameter | s->symbol.return_value | s->symbol.controlled;
       79 
       80 	if cdesc
       81 	then	if s->symbol.star_extents | s->symbol.exp_extents
       82 		then	s->symbol.descriptor = declare_descriptor$param((s->symbol.block_node),null,s,null,"1"b);
       83 
       84 /* determine the storage size and boundary requirement.	*/
       85 
       86 	call get_size(s);
       87 
       88 /* Make sure the value will fit in a segment */
       89 
       90 	if s -> symbol.c_word_size > max_words_per_variable
       91 	then call semantic_translator$error (357,s);
       92 
       93 /* If the variable requires a descriptor and has constant extents, declare_
       94*   descriptor must be called after the extents have been calculated in order
       95*   to actually declare the constant descriptor */
       96 
       97 	if cdesc
       98 	then	if s->symbol.descriptor = null
       99 		then	s->symbol.descriptor = declare_descriptor((s->symbol.block_node),null,s,null,"1"b);
      100 
      101 /* A character string constant is genenerated for condition constants */
      102 
      103 	if s->symbol.condition
      104 	then do;
      105 		if s->symbol.dcl_type ^= by_compiler then s->symbol.equivalence = s;
      106 		do i = 1 to 9;
      107 			if s->symbol.token->token.string = condition_abreviations(i)
      108 			then do;
      109 				s->symbol.general = declare_constant$char((condition_constants(i)));
      110 				go to loop_exit;
      111 			end;
      112 		end;
      113 
      114 		s->symbol.general = declare_constant$char((s->symbol.token->token.string));
      115 	end;
      116 loop_exit:
      117 
      118 /* If this is an entry process its returns descriptor and parameter descriptors.
      119*
      120*   Entry constants denoting entry points in this program have an initial pointer
      121*   which points to an entry or procedure statement and an equivalence pointer which
      122*   points to the block node containing the entry or procedure statement.  Entry variables
      123*   and external entry constants in other programs do not have these pointers but do have a descriptor
      124*   list attached to their general pointer.	
      125*
      126*   If a return_value is an aggregate or has star_extents, we delay declaring it
      127*   by copying it so that function can get a unique copy each time the function
      128*   is invoked, because of addressing and descriptor problems.  This fixes
      129*   bugs 1217 and 1311.			*/
      130 
      131 	if s->symbol.entry
      132 	then do;
      133 		if s->symbol.returns
      134 		& (s->symbol.constant & s->symbol.initial=null
      135 		 | s->symbol.variable)
      136 		then do;
      137 			rv = s->symbol.dcl_size;
      138 			rv->symbol.return_value = "1"b;
      139 			if rv->symbol.structure | rv->symbol.dimensioned | rv->symbol.star_extents
      140 			then do;
      141 				s->symbol.dcl_size = copy_expression(s->symbol.dcl_size);
      142 				call declare(rv);
      143 				s->symbol.dcl_size->symbol.star_extents = rv->symbol.star_extents;
      144 			end;
      145 			else	call declare(rv);
      146 		end;
      147 
      148 		do p=s->symbol.general repeat p->element(2) while(p^=null);
      149 			p->element(1)->symbol.param_desc = "1"b;
      150 			call declare((p->element(1)));
      151 		end;
      152 
      153 		if s->symbol.variable then go to allocate;
      154 		p=s->symbol.initial;
      155 		if p = null then go to allocate;
      156 
      157 /* this is an entry constant declared by a label prefix */
      158 
      159 		/* make sure it was not multiply declared */
      160 
      161 		d = s->symbol.token->token.declaration;
      162 		p1 = null;
      163 		do while(d^=null);
      164 			if	d->symbol.block_node = b & d^=s
      165 			then if	d->node.type = symbol_node
      166 			then if	d->symbol.entry & d->symbol.constant
      167 			then do;
      168 				call semantic_translator$abort(213,s);
      169 				if p1 = null
      170 				then	s->symbol.token->token.declaration = d->symbol.multi_use;
      171 				else	p1->symbol.multi_use = d->symbol.multi_use;
      172 			end;
      173 
      174 			p1 = d;
      175 			d = d->symbol.multi_use;
      176 		end;
      177 
      178 		p=p->statement.root;
      179 		n=p->operator.number;
      180 		if s->symbol.returns then n = n-1;
      181 		p1=null;
      182 
      183 		do i=1 to n;
      184 			q=create_list(2);
      185 			if ^lookup((s->symbol.equivalence),null,(p->operator.operand(i)),d,"0"b)
      186 				then call semantic_translator$abort(194,(p->operand(i)));
      187 			if d->node.type ^= symbol_node then call semantic_translator$abort(196,d);
      188 			d->symbol.parameter = "1"b;
      189 			if d->symbol.location = 0 then d->symbol.location = i;
      190 				else if d->symbol.location ^= i
      191 					then d->symbol.allocated ="1"b;
      192 			q->element(1)=d;
      193 			if s->symbol.general = null then s->symbol.general = q;
      194 			if p1 ^= null then p1->element(2)=q;
      195 			p1=q;
      196 		end;
      197 
      198 /* Use the parameters of the entry as templates to create parameter descriptors.  The
      199*   parameter descriptors are processed as if they were in the same block as the
      200*   parameter from which they were derived so that they will recieve the same defaults.  */
      201 
      202 		do q = s->symbol.general repeat q->element(2) while(q^=null);
      203 			q->element(1),d = copy_expression(q->element(1));
      204 			d->symbol.param_desc = "1"b;
      205 			d->symbol.parameter = "1"b;
      206 			call declare(d);
      207 		end;
      208 
      209 /* Search the list of return values attached to the block node of the procedure and
      210*   find a return value whose attributes match the attributes of the value returned
      211*   by this entry.  If such a value is found, replace this return value with the  value
      212*   already recorded in the block node.  If no such value can be found, record this return
      213*   value in the block node.  When more than one return value is recorded in the block
      214*   node an automatic integer variable is declared and a pointer to it is also recorded
      215*   in the block node.  During semantic translation of an entry statement this automatic
      216*   variable is assigned a number which identifies which return type is to be used
      217*   on return from the procedure.  During semantic translation of the return statement
      218*   code is generated to test the value of that automatic variable and assign the return
      219*   value to the proper return parameter.	*/
      220 
      221 /* If there is no return value, a null list element will be on the list
      222*   of return values to represent that entry statement's "null" return value.	 */
      223 
      224 		n = n+1;
      225 
      226 		p = s->symbol.equivalence;
      227 
      228 		do q = p->block.return_values repeat q->element(1) while(q^=null);
      229 			if s->symbol.dcl_size = null
      230 			then if q->element(2) = null
      231 			     then goto allocate;	/* simply use this null list node */
      232 			     else;
      233 
      234 			else if compare_declaration((q->element(2)),(s->symbol.dcl_size),"0"b)
      235 			     then do;
      236 				p1 = q->element(2);
      237 				if p1->symbol.location ^= n
      238 				then	p1->symbol.allocated ="1"b;
      239 				s->symbol.initial->statement.root->operator.operand(n) = p1->symbol.token;
      240 				go to make_descr;
      241 			     end;
      242 		end;
      243 
      244 		if p->block.return_values ^= null & p->block.return_count = null
      245 		then	p->block.return_count = declare_integer(p);
      246 
      247 		q = create_list(2);
      248 		q->element(1) = p->block.return_values;
      249 		p->block.return_values = q;
      250 		q->element(2) = s->symbol.dcl_size;
      251 
      252 		if s->symbol.dcl_size = null
      253 		then goto allocate;
      254 
      255 		s->symbol.dcl_size->symbol.location = n;
      256 
      257 /* copy the return parameter's declaration to create a return descriptor that will be
      258*   used as the return temporary when this entry is invoked.  */
      259 
      260 make_descr:
      261 		rv, s->symbol.dcl_size = copy_expression(s->symbol.dcl_size);
      262 		rv->symbol.return_value = "1"b;
      263 		rv->symbol.parameter = "0"b;
      264 		if rv->symbol.structure | rv->symbol.dimensioned | rv->symbol.star_extents
      265 		then	if rv->symbol.structure & ^ rv->symbol.star_extents
      266 			then	call set_star(rv);
      267 			else;
      268 		else	call declare(rv);
      269 
      270 		if rv->symbol.star_extents
      271 		then do;
      272 			p -> block.why_nonquick.returns_star_extents = "1"b;
      273 			p -> block.no_stack = "0"b;
      274 		     end;
      275 	end;
      276 
      277 /* create prologue to allocate automatic variables with variable sizes.	*/
      278 
      279 allocate:
      280 	if s->symbol.auto
      281 	then do;
      282 		if s->symbol.word_size ^= null
      283 		then do;
      284 			p1 = s->symbol.word_size;
      285 
      286 			if p1->node.type = operator_node
      287 			then do;
      288 				q=create_operator(assign,2);
      289 				q->operator.operand(2)=s->symbol.word_size;
      290 				q->operator.operand(1),s->symbol.word_size,p1 = declare_integer(b);
      291 				p1->reference.symbol->symbol.c_dcl_size = max_offset_precision;
      292 				p=create_statement$prologue(assignment_statement,b,null,(b->block.prefix));
      293 				p->statement.root=q;
      294 			end;
      295 
      296 			q=create_operator(allot_auto,2);
      297 			q->operator.operand(2)=p1;
      298 			q->operator.operand(1),
      299 			s->symbol.reference->reference.qualifier=declare_pointer(b);
      300 			p=create_statement$prologue(assignment_statement,b,null,(b->block.prefix));
      301 			p->statement.root=q;
      302 		end;
      303 
      304 		if(s->symbol.area|s->symbol.initialed)
      305 		then	call expand_initial(s,null,null);
      306 		go to exit;
      307 	end;
      308 
      309 /* parameters which appear in more than one position are accessed via an
      310*   automatic pointer set by the entry.  All other parameters are accessed via a
      311*   pointer valued operator whose 2nd operand is the parameter's position.	*/
      312 
      313 	if s->symbol.parameter
      314 	then do;
      315 		if s->symbol.allocated
      316 		then	q=declare_pointer(b);
      317 		else do;
      318 			q=create_operator(param_ptr,3);
      319 			q->operator.operand(2) = declare_constant$integer(fixed(s->symbol.location));
      320 			q->operator.operand(3) = b;
      321 		end;
      322 
      323 		s->symbol.reference->reference.qualifier=q;
      324 
      325 		if s->symbol.packed
      326 		then	if pl1_stat_$eis_mode
      327 			then	s->symbol.reference->reference.fo_in_qual = "1"b;
      328 			else do;
      329 				p = create_operator(bit_pointer,2);
      330 				p->operator.operand(2) = q;
      331 				s->symbol.reference->reference.offset = p;
      332 				s->symbol.reference->reference.units = bit_;
      333 			end;
      334 
      335 		return;
      336 	end;
      337 
      338 
      339 /* File constants are initialized by the prologue the
      340*   first time it is executed in the process.	*/
      341 
      342 	if s->symbol.file
      343 	then	if s->symbol.constant
      344 	then	call expand_initial(s,null,null);
      345 
      346 /* packed based scalar variables are accessed via bit valued pointers and
      347*   the bit offset contained in the pointer must be included as a term in the offset.  */
      348 
      349 	if	s->symbol.based
      350 	then if	s->symbol.packed
      351 	then	if pl1_stat_$eis_mode
      352 		then	s->symbol.reference->reference.fo_in_qual = "1"b;
      353 		else do;
      354 			q = create_operator(bit_pointer,2);
      355 			s->symbol.reference->reference.offset = q;
      356 			s->symbol.reference->reference.units = bit_;
      357 		end;
      358 
      359 exit:
      360 	if s->symbol.auto & s->symbol.exp_extents
      361 	then do;
      362 		s -> symbol.block_node -> block.why_nonquick.auto_adjustable_storage = "1"b;
      363 		s -> symbol.block_node -> block.no_stack = "0"b;
      364 	     end;
      365 
      366 /* if this is a return descriptor and no star extents where found then the storage class
      367*   should be changed to temporary instead of return_value.  It is not possible to
      368*   do this sooner as it will foul-up several programs that must be able to recognize
      369*   return descriptors.  */
      370 
      371 	if s->symbol.return_value & ^s->symbol.star_extents
      372 	then	if s->symbol.structure
      373 		then	call reset_ret_val(s);
      374 		else do;
      375 			s->symbol.return_value = "0"b;
      376 			s->symbol.temporary = "1"b;
      377 		end;
      378 
      379 
      380 reset_ret_val:   proc(s);
      381 
      382 dcl	(s,d) pointer;
      383 
      384 	s->symbol.temporary="1"b;
      385 	s->symbol.return_value="0"b;
      386 	do d = s->symbol.son repeat d->symbol.brother while (d ^= null);
      387 		call reset_ret_val(d);
      388 	end;
      389 
      390 	end reset_ret_val;
      391 
      392 
      393 set_star:	proc(ps);
      394 
      395 	/* propagates up star_extents in structure */
      396 
      397 dcl	(ps,d,s) ptr;
      398 
      399 	s = ps;
      400 	do d = s->symbol.son repeat d->symbol.brother while(d ^= null);
      401 	     call set_star(d);
      402 	     s->symbol.star_extents = s->symbol.star_extents | d->symbol.star_extents;
      403 	     end;
      404 
      405 	end set_star;
      406 
      407 
      408 declare_label_array:	proc;
      409 
      410 	/* prepares a vector of statement pointers for a label array */
      411 
      412 dcl	(lae,next,vector) ptr;
      413 dcl	inc fixed bin;
      414 
      415 	inc = 1 - s -> label.low_bound;
      416 	vector = create_list(s -> label.high_bound - s -> label.low_bound + 1);
      417 
      418 	do lae = s -> label.statement repeat next while(lae ^= null);
      419 	     vector -> element(lae -> label_array_element.value + inc) = lae -> label_array_element.statement;
      420 	     next= lae -> label_array_element.next;
      421 	     call free_node(lae);
      422 	     end;
      423 
      424 	s -> label.statement = vector;
      425 
      426 	end;
      427 
      428 
  1     1 /* BEGIN INCLUDE FILE ... semant.incl.pl1 */
  1     2 
  1     3 /* Modified: 30 Aug 1979 by PCK to fix 1804 and 1823 */
  1     4 /* Modified: 26 Aug 1979 by PCK to implement by name assignment */
  1     5 
  1     6 
  1     7 declare	alloc_semantics	entry(pointer,pointer,pointer);
  1     8 			/* parameter 1:	(input)	block node pointer		*/
  1     9 			/* parameter 2:	(input)	statement node pointer	*/
  1    10 			/* parameter 3:	(in/out)	tree pointer		*/
  1    11 
  1    12 declare	alloc_semantics$init_only entry(pointer,pointer,pointer);
  1    13 			/* parameter 1:	(input)	qualifier pointer		*/
  1    14 			/* parameter 2:	(input)	statement node pointer	*/
  1    15 			/* parameter 3:	(input)	symbol node pointer		*/
  1    16 
  1    17 declare	builtin		entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  1    18 			returns(pointer);
  1    19 			/* parameter 1:	(input)	block node pointer		*/
  1    20 			/* parameter 2:	(input)	statement node pointer	*/
  1    21 			/* parameter 3:	(input)	tree pointer		*/
  1    22 			/* parameter 4:	(input)	subscript pointer		*/
  1    23 			/* parameter 5:	(input)	builtin symbol node pointer	*/
  1    24 			/* parameter 6:	(in/out)	context			*/
  1    25 			/* return:	(output)	tree pointer		*/
  1    26 
  1    27 declare	check_star_extents	entry(pointer,pointer);
  1    28 			/* parameter 1:	(input) symbol node of procedure	*/
  1    29 			/* parameter 2:	(input) argument list pointer		*/
  1    30 
  1    31 declare	compare_declaration	entry(pointer,pointer,bit(1) aligned) reducible
  1    32 			returns(bit(1) aligned);
  1    33 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  1    34 			/* parameter 2:	(input)	symbol node ptr	*/
  1    35 			/* parameter 3:	(input)	"1"b if aligned attribute ignored for string	*/
  1    36 			/* return:	(output)	compare bit		*/
  1    37 
  1    38 declare	context_processor	entry(pointer,label);
  1    39 			/* parameter 1:	(input)	root block node pointer	*/
  1    40 
  1    41 declare	declare		entry(pointer);
  1    42 			/* parameter 1:	(input)	symbol node pointer		*/
  1    43 
  1    44 declare	declare_structure	entry(pointer);
  1    45 			/* parameter 1:	(input)	symbol node pointer		*/
  1    46 
  1    47 declare	defined_reference	entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  1    48 			returns(pointer);
  1    49 			/* parameter 1:	(input)	block node pointer		*/
  1    50 			/* parameter 2:	(input)	statement node pointer	*/
  1    51 			/* parameter 3:	(input)	tree pointer		*/
  1    52 			/* parameter 4:	(input)	subscript list pointer or null*/
  1    53 			/* parameter 5:	(input)	symbol node pointer		*/
  1    54 			/* parameter 6:	(in/out)	context			*/
  1    55 			/* return:	(output)	tree pointer		*/
  1    56 
  1    57 declare	do_semantics	entry(pointer,pointer,pointer);
  1    58 			/* parameter 1:	(input)	block node pointer		*/
  1    59 			/* parameter 2:	(input)	statement node pointer	*/
  1    60 			/* parameter 3:	(input)	tree pointer		*/
  1    61 
  1    62 declare	expand_assign	entry(pointer,pointer,pointer,bit(36) aligned,pointer)
  1    63 			returns(pointer);
  1    64 			/* parameter 1:	(input)	block node pointer		*/
  1    65 			/* parameter 2:	(input)	statement node pointer	*/
  1    66 			/* parameter 3:	(input)	tree pointer		*/
  1    67 			/* parameter 4:	(in/out)	context			*/
  1    68 			/* parameter 5:	(input)	aggregate reference node ptr	*/
  1    69 			/* return:	(output)	tree pointer		*/
  1    70 
  1    71 declare	expand_by_name	entry(pointer,pointer,pointer);
  1    72 			/* parameter 1:	(input)	block node pointer		*/
  1    73 			/* parameter 2:	(input)	statement node pointer	*/
  1    74 			/* parameter 3:	(input/output)	tree pointer		*/
  1    75 
  1    76 declare	expand_infix	entry(pointer,pointer,pointer,bit(36) aligned)
  1    77 			returns(pointer);
  1    78 			/* parameter 1:	(input)	block node pointer		*/
  1    79 			/* parameter 2:	(input)	statement node pointer	*/
  1    80 			/* parameter 3:	(input)	tree pointer		*/
  1    81 			/* parameter 4:	(in/out)	context			*/
  1    82 			/* return:	(output)	tree pointer		*/
  1    83 
  1    84 declare	expand_initial	entry(pointer,pointer,pointer);
  1    85 			/* parameter 1:	(input)	symbol node pointer		*/
  1    86 			/* parameter 2:	(input)	statement node pointer	*/
  1    87 			/* parameter 3:	(input)	locator			*/
  1    88 
  1    89 declare	expand_prefix	entry(pointer,pointer,pointer,bit(36) aligned)
  1    90 			returns(pointer);
  1    91 			/* parameter 1:	(input)	block node pointer		*/
  1    92 			/* parameter 2:	(input)	statement node pointer	*/
  1    93 			/* parameter 3:	(input)	tree pointer		*/
  1    94 			/* parameter 4:	(in/out)	context			*/
  1    95 			/* return:	(output)	tree pointer		*/
  1    96 
  1    97 declare	expand_primitive	entry(pointer,pointer,pointer,bit(36) aligned)
  1    98 			returns(pointer);
  1    99 			/* parameter 1:	(input)	block node pointer		*/
  1   100 			/* parameter 2:	(input)	statement node pointer	*/
  1   101 			/* parameter 3:	(input)	tree pointer		*/
  1   102 			/* parameter 4:	(input)	context			*/
  1   103 			/* return:	(output)	tree pointer		*/
  1   104 
  1   105 declare	expression_semantics entry(pointer,pointer,pointer,bit(36) aligned)
  1   106 			returns(pointer);
  1   107 			/* parameter 1:	(input)	block node pointer		*/
  1   108 			/* parameter 2:	(input)	statement node pointer	*/
  1   109 			/* parameter 3:	(input)	tree pointer		*/
  1   110 			/* parameter 4:	(in/out)	context			*/
  1   111 			/* return:	(output)	tree pointer		*/
  1   112 
  1   113 declare	fill_refer	entry(pointer,pointer,bit(1) aligned)
  1   114 			returns(pointer);
  1   115 			/* parameter 1:	(input)	null,ref node,op node ptr */
  1   116 			/* parameter 2:	(input)	null,ref node,op node ptr */
  1   117 			/* parameter 3:	(input)	copy switch for param 2 */
  1   118 			/* return:	(output)	ptr to processed tree */
  1   119 
  1   120 declare	io_data_list_semantics$format_list_semantics entry(pointer,pointer,pointer);
  1   121 			/* parameter 1:	(input)	block node pointer		*/
  1   122 			/* parameter 2:	(input)	statement node pointer	*/
  1   123 			/* parameter 3:	(in/out)	tree pointer		*/
  1   124 
  1   125 declare	function		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   126 			returns(pointer);
  1   127 			/* parameter 1:	(input)	block node pointer		*/
  1   128 			/* parameter 2:	(input)	statement node pointer	*/
  1   129 			/* parameter 3:	(input)	tree pointer		*/
  1   130 			/* parameter 4:	(input)	symbol node pointer		*/
  1   131 			/* parameter 5:	(in/out)	context			*/
  1   132 			/* return:	(output)	tree pointer		*/
  1   133 
  1   134 declare	generic_selector	entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   135 			returns(pointer);
  1   136 			/* parameter 1:	(input)	block node pointer	*/
  1   137 			/* parameter 2:	(input)	statement node pointer	*/
  1   138 			/* parameter 3:	(input)	tree pointer	*/
  1   139 			/* parameter 4:	(input)	pointer to argument list	*/
  1   140 			/* parameter 5:	(in/out)	context		*/
  1   141 			/* return:	(output)	tree pointer	*/
  1   142 
  1   143 declare	io_data_list_semantics entry(pointer,pointer,pointer);
  1   144 			/* parameter 1:	(input)	block node pointer		*/
  1   145 			/* parameter 2:	(input)	statement node pointer	*/
  1   146 			/* parameter 3:	(input)	operator node pointer	*/
  1   147 
  1   148 declare	io_semantics	entry(pointer,pointer,pointer);
  1   149 			/* parameter 1:	(input)	block node pointer		*/
  1   150 			/* parameter 2:	(input)	statement node pointer	*/
  1   151 			/* parameter 3:	(input)	tree pointer		*/
  1   152 
  1   153 declare	lookup		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   154 			returns(bit(1) aligned);
  1   155 			/* parameter 1:	(input)	block node pointer		*/
  1   156 			/* parameter 2:	(input)	stmnt|symbol node pointer	*/
  1   157 			/* parameter 3:	(input)	token or reference node ptr	*/
  1   158 			/* parameter 4:	(output)	symbol node pointer		*/
  1   159 			/* parameter 5:	(in/out)	context			*/
  1   160 			/* return:	(output)	symbol found bit		*/
  1   161 
  1   162 declare	make_non_quick	entry(pointer, bit (36) aligned);
  1   163 			/* parameter 1:	(input)	tree pointer	*/
  1   164 			/* parameter 2:	(input)	reason why being made nonquick */
  1   165 
  1   166 declare	match_arguments	entry(pointer,pointer) reducible
  1   167 			returns(bit(1) aligned);
  1   168 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  1   169 			/* parameter 2:	(input)	reference or symbol node ptr	*/
  1   170 			/* return:	(output)	compare bit		*/
  1   171 
  1   172 declare	offset_adder	entry(pointer,fixed binary(31),fixed binary(3),bit(1) aligned,
  1   173 			      pointer,fixed binary(31),fixed binary(3),bit(1) aligned,bit(1));
  1   174 			/* parameter 1:	(in/out)	tree pointer		*/
  1   175 			/* parameter 2:	(in/out)	constant size		*/
  1   176 			/* parameter 3:	(in/out)	units			*/
  1   177 			/* parameter 4:	(in/out) 	ON if units ^= word_, but tree in words	*/
  1   178 			/* parameter 5:	(input)	tree pointer		*/
  1   179 			/* parameter 6:	(input)	constant size		*/
  1   180 			/* parameter 7:	(input)	units			*/
  1   181 			/* parameter 8:	(input)	ON if units ^= word_, but tree in words	*/
  1   182 			/* parameter 9:	(input)	ON if should not improve units	*/
  1   183 
  1   184 declare	operator_semantics	entry(pointer,pointer,pointer,bit(36) aligned)
  1   185 			returns(pointer);
  1   186 			/* parameter 1:	(input)	block node pointer		*/
  1   187 			/* parameter 2:	(input)	statement node pointer	*/
  1   188 			/* parameter 3:	(input)	tree pointer		*/
  1   189 			/* parameter 4:	(in/out)	context			*/
  1   190 			/* return:	(output)	tree pointer		*/
  1   191 
  1   192 declare	propagate_bit	entry(pointer,fixed binary(15));
  1   193 			/* parameter 1:	(input)	symbol node pointer		*/
  1   194 			/* parameter 2:	(input)	attribute number		*/
  1   195 
  1   196 declare	semantic_translator$call_es entry(pointer,pointer,pointer,label,bit(1) aligned)
  1   197 			returns(pointer);
  1   198 			/* parameter 1:	(input)	block ptr	*/
  1   199 			/* parameter 2:	(input)	statement ptr	*/
  1   200 			/* parameter 3:	(input)	tree ptr	*/
  1   201 			/* parameter 4:	(input)	failure label	*/
  1   202 			/* parameter 5:	(input)	"1"b -- convert to integer	*/
  1   203 			/* return:	(output)	tree ptr		*/
  1   204 
  1   205 declare	simplify_expression	entry(pointer,fixed bin,bit(1)aligned);
  1   206 			/* parameter 1:	(in/out)	tree pointer		*/
  1   207 			/* parameter 2:	(output)	value of constant, if the entire tree
  1   208*						is simplified		*/
  1   209 			/* parameter 3:	(output)	bit indicating if the tree has
  1   210*						been simplified		*/
  1   211 
  1   212 declare	simplify_offset	entry(pointer,bit(36) aligned);
  1   213 			/* parameter 1:	(input)	reference node pointer	*/
  1   214 			/* parameter 2:	(input)	context			*/
  1   215 
  1   216 declare	subscripter	entry(pointer,pointer,pointer,pointer,pointer)
  1   217 			returns(pointer);
  1   218 			/* parameter 1:	(input)	block node pointer		*/
  1   219 			/* parameter 2:	(input)	statement node pointer	*/
  1   220 			/* parameter 3:	(input)	tree pointer		*/
  1   221 			/* parameter 4:	(in/out)	subscript list pointer	*/
  1   222 			/* parameter 5:	(input)	symbol node pointer		*/
  1   223 			/* return:	(output)	reference node pointer	*/
  1   224 
  1   225 declare	validate		entry(pointer);
  1   226 			/* parameter 1:	(input)	symbol node pointer		*/
  1   227 
  2     1 /****^  *********************************************************
  2     2*        *                                                       *
  2     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  2     4*        *                                                       *
  2     5*        ********************************************************* */
  2     6 
  2     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  2     8 
  2     9 
  2    10 /****^  HISTORY COMMENTS:
  2    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  2    12*     install(89-07-31,MR12.3-1066):	
  2    13*     Removed the obsolete parameter source_line from the dcl of error_().
  2    14*                                                   END HISTORY COMMENTS */
  2    15 
  2    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  2    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  2    18* */
  2    19 
  2    20 declare	adjust_count	entry(pointer);
  2    21 			/* parameter 1:	(input)	any node pointer		*/
  2    22 
  2    23 declare	bindec		entry(fixed bin(31)) reducible
  2    24 			returns(character(12) aligned);
  2    25 			/* parameter 1:	(input)	bin value			*/
  2    26 			/* return:	(output)	character value with blanks	*/
  2    27 
  2    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  2    29 			returns(character(12) aligned varying);
  2    30 			/* parameter 1:	(input)	binary value		*/
  2    31 			/* return:	(output)	char value without blanks	*/
  2    32 
  2    33 declare	binoct		entry(fixed bin(31)) reducible
  2    34 			returns(char(12) aligned);
  2    35 			/* parameter 1:	(input)	binary value		*/
  2    36 			/* return:	(output)	char value with blanks	*/
  2    37 
  2    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  2    39 			returns(char(12) aligned);
  2    40 			/* parameter 1:	(input)	binary value		*/
  2    41 			/* return:	(output)	right-aligned char value	*/
  2    42 
  2    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  2    44 			returns(char(12) varying aligned);
  2    45 			/* parameter 1:	(input)	binary value		*/
  2    46 			/* returns:	(output)	char value without blanks	*/
  2    47 
  2    48 declare	compare_expression	entry(pointer,pointer) reducible
  2    49 			returns(bit(1) aligned);
  2    50 			/* parameter 1:	(input)	any node pointer		*/
  2    51 			/* parameter 2:	(input)	any node pointer		*/
  2    52 			/* return:	(output)	compare bit		*/
  2    53 
  2    54 declare	constant_length	entry (pointer, fixed bin (71))
  2    55 			returns (bit (1) aligned);
  2    56 			/* parameter 1:	(input)	reference node pointer	*/
  2    57 			/* parameter 2:	(input)	value of constant length	*/
  2    58 			/* return:	(output)	"1"b if constant length	*/
  2    59 
  2    60 declare	convert		entry(pointer,bit(36) aligned)
  2    61 			returns(pointer);
  2    62 			/* parameter 1:	(input)	any node pointer		*/
  2    63 			/* parameter 2:	(input)	target type		*/
  2    64 			/* return:	(output)	target value tree pointer	*/
  2    65 
  2    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  2    67 			returns(pointer);
  2    68 			/* parameter 1:	(input)	any node pointer		*/
  2    69 			/* parameter 2:	(input)	target type		*/
  2    70 			/* return:	(output)	target value tree pointer	*/
  2    71 
  2    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  2    73 			returns(pointer);
  2    74 			/* parameter 1:	(input)	any node pointer		*/
  2    75 			/* parameter 2:	(input)	target type		*/
  2    76 			/* return:	(output)	target value tree pointer	*/
  2    77 
  2    78 declare	convert$validate	entry(pointer,pointer);
  2    79 			/* parameter 1:	(input)	source value tree pointer	*/
  2    80 			/* parameter 2:	(input)	target reference node pointer	*/
  2    81 
  2    82 declare	convert$to_target_fb entry(pointer,pointer)
  2    83 			returns(pointer);
  2    84 			/* parameter 1:	(input)	source value tree pointer	*/
  2    85 			/* parameter 2:	(input)	target reference node pointer	*/
  2    86 			/* return:	(output)	target value tree pointer	*/
  2    87 
  2    88 declare	convert$to_target	entry(pointer,pointer)
  2    89 			returns(pointer);
  2    90 			/* parameter 1:	(input)	source value tree pointer	*/
  2    91 			/* parameter 2:	(input)	target reference node pointer	*/
  2    92 			/* return:	(output)	target value tree pointer	*/
  2    93 
  2    94 declare	copy_expression	entry(pointer unaligned)
  2    95 			returns(pointer);
  2    96 			/* parameter 1:	(input)	any node pointer		*/
  2    97 			/* return:	(output)	any node pointer		*/
  2    98 
  2    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  2   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  2   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  2   102 
  2   103 declare	copy_unique_expression entry(pointer)
  2   104 			returns(pointer);
  2   105 			/* parameter 1:	(input)	any node pointer		*/
  2   106 			/* return:	(output)	any node pointer		*/
  2   107 
  2   108 declare	create_array	entry()
  2   109 			returns(pointer);
  2   110 			/* return:	(output)	array node pointer		*/
  2   111 
  2   112 declare	create_block	entry(bit(9) aligned,pointer)
  2   113 			returns(pointer);
  2   114 			/* parameter 1:	(input)	block type		*/
  2   115 			/* parameter 2:	(input)	father block node pointer	*/
  2   116 			/* return:	(output)	block node pointer		*/
  2   117 
  2   118 declare	create_bound	entry()
  2   119 			returns(pointer);
  2   120 			/* return:	(output)	bound node pointer		*/
  2   121 
  2   122 declare	create_context	entry(pointer,pointer)
  2   123 			returns(pointer);
  2   124 			/* parameter 1:	(input)	block node pointer		*/
  2   125 			/* parameter 2:	(input)	token pointer		*/
  2   126 			/* return:	(output)	context node pointer	*/
  2   127 
  2   128 declare	create_cross_reference entry()
  2   129 			returns(pointer);
  2   130 			/* return:	(output)	cross reference node pointer	*/
  2   131 
  2   132 declare	create_default	entry
  2   133 			returns(pointer);
  2   134 			/* return:	(output)	default node pointer	*/
  2   135 
  2   136 declare	create_identifier	entry()
  2   137 			returns(pointer);
  2   138 			/* return:	(output)	token node pointer		*/
  2   139 
  2   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  2   141 			returns(pointer);
  2   142 			/* parameter 1:	(input)	block node pointer		*/
  2   143 			/* parameter 2:	(input)	token node pointer		*/
  2   144 			/* parameter 3:	(input)	declare type		*/
  2   145 			/* return:	(output)	label node pointer		*/
  2   146 
  2   147 declare	create_list	entry(fixed bin(15))
  2   148 			returns(pointer);
  2   149 			/* parameter 1:	(input)	number of list elements	*/
  2   150 			/* return:	(output)	list node pointer		*/
  2   151 
  2   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  2   153 			returns(pointer);
  2   154 			/* parameter 1:	(input)	operator type		*/
  2   155 			/* parameter 2:	(input)	number of operands		*/
  2   156 			/* return:	(output)	operator node pointer	*/
  2   157 
  2   158 declare	create_reference	entry(pointer)
  2   159 			returns(pointer);
  2   160 			/* parameter 1:	(input)	symbol node pointer		*/
  2   161 			/* return:	(output)	reference node pointer	*/
  2   162 
  2   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   164 			returns(pointer);
  2   165 			/* parameter 1:	(input)	statement type		*/
  2   166 			/* parameter 2:	(input)	block node pointer		*/
  2   167 			/* parameter 3:	(input)	label node pointer		*/
  2   168 			/* parameter 4:	(input)	conditions		*/
  2   169 			/* return:	(output)	statement node pointer	*/
  2   170 
  2   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   172 			returns(pointer);
  2   173 			/* parameter 1:	(input)	statement type		*/
  2   174 			/* parameter 2:	(input)	block node pointer		*/
  2   175 			/* parameter 3:	(input)	label node pointer		*/
  2   176 			/* parameter 4:	(input)	conditions		*/
  2   177 			/* return:	(output)	statement node pointer	*/
  2   178 
  2   179 declare	create_storage	entry(fixed bin(15))
  2   180 			returns(pointer);
  2   181 			/* parameter 1:	(input)	number of words		*/
  2   182 			/* return:	(output)	storage block pointer	*/
  2   183 
  2   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  2   185 			returns(pointer);
  2   186 			/* parameter 1:	(input)	block node pointer		*/
  2   187 			/* parameter 2:	(input)	token node pointer		*/
  2   188 			/* parameter 3:	(input)	declare type		*/
  2   189 			/* return:	(output)	symbol node pointer		*/
  2   190 
  2   191 declare	create_token	entry (character (*), bit (9) aligned)
  2   192 			returns (ptr);
  2   193 			/* parameter 1:	(input)	token string		*/
  2   194 			/* parameter 2:	(input)	token type		*/
  2   195 			/* return:	(output)	token node ptr		*/
  2   196 
  2   197 declare	create_token$init_hash_table entry ();
  2   198 
  2   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  2   200 			returns (ptr);
  2   201 			/* parameter 1:	(input)	token string		*/
  2   202 			/* parameter 2:	(input)	token type		*/
  2   203 			/* parameter 3:	(input)	protected flag		*/
  2   204 			/* return:	(output)	token node ptr		*/
  2   205 
  2   206 declare	decbin		entry(character(*) aligned) reducible
  2   207 			returns(fixed bin(31));
  2   208 			/* parameter 1:	(input)	decimal character string	*/
  2   209 			/* return:	(output)	binary value		*/
  2   210 
  2   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  2   212 			returns(pointer);
  2   213 			/* parameter 1:	(input)	value			*/
  2   214 			/* parameter 2:	(input)	type			*/
  2   215 			/* parameter 3:	(input)	size			*/
  2   216 			/* parameter 4:	(input)	scale			*/
  2   217 			/* return:	(output)	reference node pointer	*/
  2   218 
  2   219 declare	declare_constant$bit entry(bit(*) aligned)
  2   220 			returns(pointer);
  2   221 			/* parameter 1:	(input)	bit			*/
  2   222 			/* return:	(output)	reference node pointer	*/
  2   223 
  2   224 declare	declare_constant$char entry(character(*) aligned)
  2   225 			returns(pointer);
  2   226 			/* parameter 1:	(input)	character			*/
  2   227 			/* return:	(output)	reference node pointer	*/
  2   228 
  2   229 declare	declare_constant$desc entry(bit(*) aligned)
  2   230 			returns(pointer);
  2   231 			/* parameter 1:	(input)	descriptor bit value	*/
  2   232 			/* return:	(output)	reference node pointer	*/
  2   233 
  2   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  2   235 			returns(pointer);
  2   236 			/* parameter 1:	(input)	integer			*/
  2   237 			/* return:	(output)	reference node pointer	*/
  2   238 
  2   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   240 			returns(pointer);
  2   241 			/* parameter 1:	(input)	block node pointer		*/
  2   242 			/* parameter 2:	(input)	statement node pointer	*/
  2   243 			/* parameter 3:	(input)	symbol node pointer		*/
  2   244 			/* parameter 4:	(input)	loc pointer		*/
  2   245 			/* parameter 5:	(input)	array descriptor bit
  2   246*						cross_section bit	*/
  2   247 			/* return:	(output)	reference node pointer	*/
  2   248 
  2   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   250 			returns(pointer);
  2   251 			/* parameter 1:	(input)	block node pointer	*/
  2   252 			/* parameter 2:	(input)	statement node pointer 	*/
  2   253 			/* parameter 3:	(input)	symbol node pointer	*/
  2   254 			/* parameter 4:	(input)	loc pointer	*/
  2   255 			/* parameter 5:	(input)	array descriptor bit
  2   256*						cross_section bit	*/
  2   257 			/* return:	(output)	reference node pointer	*/
  2   258 
  2   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   260 			returns(pointer);
  2   261 			/* parameter 1:	(input)	block node pointer		*/
  2   262 			/* parameter 2:	(input)	statement node pointer	*/
  2   263 			/* parameter 3:	(input)	symbol node pointer		*/
  2   264 			/* parameter 4:	(input)	loc pointer		*/
  2   265 			/* parameter 5:	(input)	array descriptor bit
  2   266*						cross_section bit	*/
  2   267 			/* return:	(output)	reference node pointer	*/
  2   268 
  2   269 declare	declare_integer	entry(pointer)
  2   270 			returns(pointer);
  2   271 			/* parameter 1:	(input)	block node pointer		*/
  2   272 			/* return:	(output)	reference node pointer 	*/
  2   273 
  2   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  2   275 			/* parameter 1:	(input)	picture string		*/
  2   276 			/* parameter 2:	(input)	symbol node pointer		*/
  2   277 			/* parameter 3:	(output)	error code, if any		*/
  2   278 
  2   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  2   280 			returns(pointer);
  2   281 			/* parameter 1:	(input)	picture string		*/
  2   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  2   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  2   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  2   285 			/* return:	(output)	reference node pointer	*/
  2   286 
  2   287 declare	declare_pointer	entry(pointer)
  2   288 			returns(pointer);
  2   289 			/* parameter 1:	(input)	block node pointer		*/
  2   290 			/* return:	(output)	reference node pointer	*/
  2   291 
  2   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  2   293 			returns(pointer);
  2   294 			/* parameter 1:	(input)	type			*/
  2   295 			/* parameter 2:	(input)	precision			*/
  2   296 			/* parameter 3:	(input)	scale			*/
  2   297 			/* parameter 4:	(input)	length			*/
  2   298 			/* return:	(output)	reference node pointer	*/
  2   299 
  2   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  2   301 			returns(char(120) varying);
  2   302 			/* parameter 1:	(input)	node pointer		*/
  2   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   304 			/* return:	(output)	source line id		*/
  2   305 
  2   306 declare	decode_source_id	entry(
  3     1 			1 structure unaligned,
  3     2 			  2 /* file_number */	bit(8),
  3     3 			  2 /* line_number */	bit(14),
  3     4 			  2 /* stmt_number */	bit(5),
  2   307 
  2   308 			bit(1) aligned)
  2   309 			returns(char(120) varying);
  2   310 			/* parameter 1:	(input)	source id			*/
  2   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   312 			/* return:	(output)	source line id		*/
  2   313 
  2   314 declare	error		entry(fixed bin(15),pointer,pointer);
  2   315 			/* parameter 1:	(input)	error number		*/
  2   316 			/* parameter 2:	(input)	statement node pointer or null*/
  2   317 			/* parameter 3:	(input)	token node pointer 		*/
  2   318 
  2   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  2   320 			/* parameter 1:	(input)	error number		*/
  2   321 			/* parameter 2:	(input)	statement node pointer or null*/
  2   322 			/* parameter 3:	(input)	token node pointer 		*/
  2   323 
  2   324 declare	error_		entry(fixed bin(15),
  4     1 			1 structure unaligned,
  4     2 			  2 /* file_number */	bit(8),
  4     3 			  2 /* line_number */	bit(14),
  4     4 			  2 /* stmt_number */	bit(5),
  2   325 
  2   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  2   327 			/* parameter 1:	(input)	error number		*/
  2   328 			/* parameter 2:	(input)	statement id		*/
  2   329 			/* parameter 3:	(input)	any node pointer		*/
  2   330 			/* parameter 4:	(input)	source segment		*/
  2   331 			/* parameter 5:	(input)	source starting character	*/
  2   332 			/* parameter 6:	(input)	source length		*/
  2   333 
  2   334 declare	error_$no_text	entry(fixed bin(15),
  5     1 			1 structure unaligned,
  5     2 			  2 /* file_number */	bit(8),
  5     3 			  2 /* line_number */	bit(14),
  5     4 			  2 /* stmt_number */	bit(5),
  2   335 
  2   336 			pointer);
  2   337 			/* parameter 1:	(input)	error number		*/
  2   338 			/* parameter 2:	(input)	statement id		*/
  2   339 			/* parameter 3:	(input)	any node pointer		*/
  2   340 
  2   341 declare	error_$initialize_error entry();
  2   342 
  2   343 declare	error_$finish	entry();
  2   344 
  2   345 declare	free_node		entry(pointer);
  2   346 			/* parameter 1:	any node pointer			*/
  2   347 
  2   348 declare	get_array_size	entry(pointer,fixed bin(3));
  2   349 			/* parameter 1:	(input)	symbol node pointer		*/
  2   350 			/* parameter 2:	(input)	units			*/
  2   351 
  2   352 declare	get_size		entry(pointer);
  2   353 			/* parameter 1:	(input)	symbol node pointer		*/
  2   354 
  2   355 declare	merge_attributes	external entry(pointer,pointer)
  2   356 			returns(bit(1) aligned);
  2   357 			/* parameter 1:	(input)	target symbol node pointer */
  2   358 			/* parameter 2:	(input)	source symbol node pointer */
  2   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  2   360 
  2   361 declare	optimizer		entry(pointer);
  2   362 			/* parameter 1:	(input)	root pointer		*/
  2   363 
  2   364 declare	parse_error	entry(fixed bin(15),pointer);
  2   365 			/* parameter 1:	(input)	error number		*/
  2   366 			/* parameter 2:	(input)	any node pointer		*/
  2   367 
  2   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  2   369 			/* parameter 1:	(input)	error number		*/
  2   370 			/* parameter 2:	(input)	any node pointer		*/
  2   371 
  2   372 declare	pl1_error_print$write_out
  2   373 			entry(fixed bin(15),
  6     1 			1 structure unaligned,
  6     2 			  2 /* file_number */	bit(8),
  6     3 			  2 /* line_number */	bit(14),
  6     4 			  2 /* stmt_number */	bit(5),
  2   374 
  2   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  2   376 			/* parameter 1:	(input)	error number		*/
  2   377 			/* parameter 2:	(input)	statement identification	*/
  2   378 			/* parameter 3:	(input)	any node pointer		*/
  2   379 			/* parameter 4:	(input)	source segment		*/
  2   380 			/* parameter 5:	(input)	source character index	*/
  2   381 			/* parameter 6:	(input)	source length		*/
  2   382 			/* parameter 7:	(input)	source line		*/
  2   383 
  2   384 declare	pl1_error_print$listing_segment
  2   385 			entry(fixed bin(15),
  7     1 			1 structure unaligned,
  7     2 			  2 /* file_number */	bit(8),
  7     3 			  2 /* line_number */	bit(14),
  7     4 			  2 /* stmt_number */	bit(5),
  2   386 
  2   387 			pointer);
  2   388 			/* parameter 1:	(input)	error number		*/
  2   389 			/* parameter 2:	(input)	statement identification	*/
  2   390 			/* parameter 3:	(input)	token node pointer		*/
  2   391 
  2   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  2   393 			/* parameter 1:	(input)	string			*/
  2   394 
  2   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  2   396 			/* parameter 1:	(input)	string			*/
  2   397 
  2   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  2   399 			/* parameter 1:	(input)	string			*/
  2   400 			/* parameter 2:	(input)	string length or 0		*/
  2   401 
  2   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  2   403 			/* parameter 1:	(input)	string			*/
  2   404 			/* parameter 2:	(input)	string length or 0		*/
  2   405 
  2   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  2   407 			/* parameter 1:	(input)	string pointer		*/
  2   408 			/* parameter 2:	(input)	string size		*/
  2   409 
  2   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  2   411 			/* parameter 1:	(input)	string pointer		*/
  2   412 			/* parameter 2:	(input)	string length or 0		*/
  2   413 
  2   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  2   415 			/* parameter 1:	(input)	string			*/
  2   416 			/* parameter 2:	(input)	length			*/
  2   417 
  2   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  2   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  2   420 			/* parameter 2:	(input)	line number		*/
  2   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  2   422 			/* parameter 4:	(input)	number of chars to copy	*/
  2   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  2   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  2   425 
  2   426 declare	refer_extent	entry(pointer,pointer);
  2   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  2   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  2   429 
  2   430 declare	reserve$clear	entry()
  2   431 			returns(pointer);
  2   432 			/* return:	(output)	pointer			*/
  2   433 
  2   434 declare	reserve$declare_lib	entry(fixed bin(15))
  2   435 			returns(pointer);
  2   436 			/* parameter 1:	(input)	builtin function number	*/
  2   437 			/* return:	(output)	pointer			*/
  2   438 
  2   439 declare	reserve$read_lib	entry(fixed bin(15))
  2   440 			returns(pointer);
  2   441 			/* parameter 1:	(input)	builtin function number	*/
  2   442 			/* return:	(output)	pointer			*/
  2   443 
  2   444 declare	semantic_translator	entry();
  2   445 
  2   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  2   447 			/* parameter 1:	(input)	error number		*/
  2   448 			/* parameter 2:	(input)	any node pointer		*/
  2   449 
  2   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  2   451 			/* parameter 1:	(input)	error number		*/
  2   452 			/* parameter 2:	(input)	any node pointer		*/
  2   453 
  2   454 declare	share_expression	entry(ptr)
  2   455 			returns(ptr);
  2   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  2   457 			/* return:	(output)	tree pointer or null	*/
  2   458 
  2   459 declare	token_to_binary	entry(ptr) reducible
  2   460 			returns(fixed bin(31));
  2   461 			/* parameter 1:	(input)	token node pointer		*/
  2   462 			/* return:	(output)	converted binary value	*/
  2   463 
  2   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
  1   228 
  1   229 /* END INCLUDE FILE ... semant.incl.pl1 */
      429 
  8     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
  8     2 
  8     3 dcl	1 symbol			based aligned,
  8     4 	2 node_type		bit(9) unal,
  8     5 	2 source_id		structure unal,
  8     6 	  3 file_number		bit(8),
  8     7 	  3 line_number		bit(14),
  8     8 	  3 statement_number	bit(5),
  8     9 	2 location		fixed(18) unal unsigned,
  8    10 	2 allocated		bit(1) unal,
  8    11 	2 dcl_type		bit(3) unal,
  8    12 	2 reserved		bit(6) unal,
  8    13 	2 pix			unal,
  8    14 	  3 pic_fixed		bit(1) unal,
  8    15 	  3 pic_float		bit(1) unal,
  8    16 	  3 pic_char		bit(1) unal,
  8    17 	  3 pic_scale		fixed(7) unal,
  8    18 	  3 pic_size		fixed(7) unal,
  8    19 	2 level			fixed(8) unal,
  8    20 	2 boundary		fixed(3) unal,
  8    21 	2 size_units		fixed(3) unal,
  8    22 	2 scale			fixed(7) unal,
  8    23 	2 runtime			bit(18) unal,
  8    24 	2 runtime_offset		bit(18) unal,
  8    25 	2 block_node		ptr unal,
  8    26 	2 token			ptr unal,
  8    27 	2 next			ptr unal,
  8    28 	2 multi_use		ptr unal,
  8    29 	2 cross_references		ptr unal,
  8    30 	2 initial			ptr unal,
  8    31 	2 array			ptr unal,
  8    32 	2 descriptor		ptr unal,
  8    33 	2 equivalence		ptr unal,
  8    34 	2 reference		ptr unal,
  8    35 	2 general			ptr unal,
  8    36 	2 father			ptr unal,
  8    37 	2 brother			ptr unal,
  8    38 	2 son			ptr unal,
  8    39 	2 word_size		ptr unal,
  8    40 	2 bit_size		ptr unal,
  8    41 	2 dcl_size		ptr unal,
  8    42 	2 symtab_size		ptr unal,
  8    43 	2 c_word_size		fixed(24),
  8    44 	2 c_bit_size		fixed(24),
  8    45 	2 c_dcl_size		fixed(24),
  8    46 
  8    47 	2 attributes		structure aligned,
  8    48 	  3 data_type		structure unal,
  8    49 	    4 structure		bit(1) ,
  8    50 	    4 fixed		bit(1),
  8    51 	    4 float		bit(1),
  8    52 	    4 bit			bit(1),
  8    53 	    4 char		bit(1),
  8    54 	    4 ptr			bit(1),
  8    55 	    4 offset		bit(1),
  8    56 	    4 area		bit(1),
  8    57 	    4 label		bit(1),
  8    58 	    4 entry		bit(1),
  8    59 	    4 file		bit(1),
  8    60 	    4 arg_descriptor	bit(1),
  8    61 	    4 storage_block		bit(1),
  8    62 	    4 explicit_packed	bit(1), /* options(packed) */
  8    63 	    4 condition		bit(1),
  8    64 	    4 format		bit(1),
  8    65 	    4 builtin		bit(1),
  8    66 	    4 generic		bit(1),
  8    67 	    4 picture		bit(1),
  8    68 
  8    69 	  3 misc_attributes		structure unal,
  8    70 	    4 dimensioned		bit(1),
  8    71 	    4 initialed		bit(1),
  8    72 	    4 aligned		bit(1),
  8    73 	    4 unaligned		bit(1),
  8    74 	    4 signed		bit(1),
  8    75 	    4 unsigned		bit(1),
  8    76 	    4 precision		bit(1),
  8    77 	    4 varying		bit(1),
  8    78 	    4 local		bit(1),
  8    79 	    4 decimal		bit(1),
  8    80 	    4 binary		bit(1),
  8    81 	    4 real		bit(1),
  8    82 	    4 complex		bit(1),
  8    83 	    4 variable		bit(1),
  8    84 	    4 reducible		bit(1),
  8    85 	    4 irreducible		bit(1),
  8    86 	    4 returns		bit(1),
  8    87 	    4 position		bit(1),
  8    88 	    4 internal		bit(1),
  8    89 	    4 external		bit(1),
  8    90 	    4 like		bit(1),
  8    91 	    4 member		bit(1),
  8    92 	    4 non_varying		bit(1),
  8    93 	    4 options		bit(1),
  8    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
  8    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
  8    96 
  8    97 	  3 storage_class		structure unal,
  8    98 	    4 auto		bit(1),
  8    99 	    4 based		bit(1),
  8   100 	    4 static		bit(1),
  8   101 	    4 controlled		bit(1),
  8   102 	    4 defined		bit(1),
  8   103 	    4 parameter		bit(1),
  8   104 	    4 param_desc		bit(1),
  8   105 	    4 constant		bit(1),
  8   106 	    4 temporary		bit(1),
  8   107 	    4 return_value		bit(1),
  8   108 
  8   109 	  3 file_attributes		structure unal,
  8   110 	    4 print		bit(1),
  8   111 	    4 input		bit(1),
  8   112 	    4 output		bit(1),
  8   113 	    4 update		bit(1),
  8   114 	    4 stream		bit(1),
  8   115 	    4 reserved_1		bit(1),
  8   116 	    4 record		bit(1),
  8   117 	    4 sequential		bit(1),
  8   118 	    4 direct		bit(1),
  8   119 	    4 interactive		bit(1),		/* env(interactive) */
  8   120 	    4 reserved_2		bit(1),
  8   121 	    4 reserved_3		bit(1),
  8   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
  8   123 	    4 keyed		bit(1),
  8   124 	    4 reserved_4		bit(1),
  8   125 	    4 environment		bit(1),
  8   126 
  8   127 	  3 compiler_developed	structure unal,
  8   128 	    4 aliasable		bit(1),
  8   129 	    4 packed		bit(1),
  8   130 	    4 passed_as_arg		bit(1),
  8   131 	    4 allocate		bit(1),
  8   132 	    4 set			bit(1),
  8   133 	    4 exp_extents		bit(1),
  8   134 	    4 refer_extents		bit(1),
  8   135 	    4 star_extents		bit(1),
  8   136 	    4 isub		bit(1),
  8   137 	    4 put_in_symtab		bit(1),
  8   138 	    4 contiguous		bit(1),
  8   139 	    4 put_data		bit(1),
  8   140 	    4 overlayed		bit(1),
  8   141 	    4 error		bit(1),
  8   142 	    4 symtab_processed	bit(1),
  8   143 	    4 overlayed_by_builtin	bit(1),
  8   144 	    4 defaulted		bit(1),
  8   145 	    4 connected		bit(1);
  8   146 
  8   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
      430 
  9     1 /* BEGIN INCLUDE FILE ... block.incl.pl1 */
  9     2 /* Modified 22 Ocober 1980 by M. N. Davidoff to increase max block.number to 511 */
  9     3 /* format: style3,idind30 */
  9     4 
  9     5 declare	1 block			aligned based,
  9     6 	  2 node_type		bit (9) unaligned,
  9     7 	  2 source_id		structure unaligned,
  9     8 	    3 file_number		bit (8),
  9     9 	    3 line_number		bit (14),
  9    10 	    3 statement_number	bit (5),
  9    11 	  2 father		ptr unaligned,
  9    12 	  2 brother		ptr unaligned,
  9    13 	  2 son			ptr unaligned,
  9    14 	  2 declaration		ptr unaligned,
  9    15 	  2 end_declaration		ptr unaligned,
  9    16 	  2 default		ptr unaligned,
  9    17 	  2 end_default		ptr unaligned,
  9    18 	  2 context		ptr unaligned,
  9    19 	  2 prologue		ptr unaligned,
  9    20 	  2 end_prologue		ptr unaligned,
  9    21 	  2 main			ptr unaligned,
  9    22 	  2 end_main		ptr unaligned,
  9    23 	  2 return_values		ptr unaligned,
  9    24 	  2 return_count		ptr unaligned,
  9    25 	  2 plio_ps		ptr unaligned,
  9    26 	  2 plio_fa		ptr unaligned,
  9    27 	  2 plio_ffsb		ptr unaligned,
  9    28 	  2 plio_ssl		ptr unaligned,
  9    29 	  2 plio_fab2		ptr unaligned,
  9    30 	  2 block_type		bit (9) unaligned,
  9    31 	  2 prefix		bit (12) unaligned,
  9    32 	  2 like_attribute		bit (1) unaligned,
  9    33 	  2 no_stack		bit (1) unaligned,
  9    34 	  2 get_data		bit (1) unaligned,
  9    35 	  2 flush_at_call		bit (1) unaligned,
  9    36 	  2 processed		bit (1) unaligned,
  9    37 	  2 text_displayed		bit (1) unaligned,
  9    38 	  2 number		fixed bin (9) unsigned unaligned,
  9    39 	  2 free_temps		dimension (3) ptr,	/* these fields are used by the code generator */
  9    40 	  2 temp_list		ptr,
  9    41 	  2 entry_list		ptr,
  9    42 	  2 o_and_s		ptr,
  9    43 	  2 why_nonquick		aligned,
  9    44 	    3 auto_adjustable_storage bit (1) unaligned,
  9    45 	    3 returns_star_extents	bit (1) unaligned,
  9    46 	    3 stack_extended_by_args	bit (1) unaligned,
  9    47 	    3 invoked_by_format	bit (1) unaligned,
  9    48 	    3 format_statement	bit (1) unaligned,
  9    49 	    3 io_statements		bit (1) unaligned,
  9    50 	    3 assigned_to_entry_var	bit (1) unaligned,
  9    51 	    3 condition_statements	bit (1) unaligned,
  9    52 	    3 no_owner		bit (1) unaligned,
  9    53 	    3 recursive_call	bit (1) unaligned,
  9    54 	    3 options_non_quick	bit (1) unaligned,
  9    55 	    3 options_variable	bit (1) unaligned,
  9    56 	    3 never_referenced	bit (1) unaligned,
  9    57 	    3 pad_nonquick		bit (5) unaligned,
  9    58 	  2 prologue_flag		bit (1) unaligned,
  9    59 	  2 options_main		bit (1) unaligned,
  9    60 	  2 pad			bit (16) unaligned,
  9    61 	  2 number_of_entries	fixed bin (17),
  9    62 	  2 level			fixed bin (17),
  9    63 	  2 last_auto_loc		fixed bin (17),
  9    64 	  2 symbol_block		fixed bin (17),
  9    65 	  2 entry_info		fixed bin (18),
  9    66 	  2 enter			structure unaligned,
  9    67 	    3 start		fixed bin (17),
  9    68 	    3 end			fixed bin (17),
  9    69 	  2 leave			structure unaligned,
  9    70 	    3 start		fixed bin (17),
  9    71 	    3 end			fixed bin (17),
  9    72 	  2 owner			ptr;
  9    73 
  9    74 declare	max_block_number		fixed bin internal static options (constant) initial (511);
  9    75 
  9    76 /* END INCLUDE FILE ... block.incl.pl1 */
      431 
 10     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
 10     2 
 10     3 dcl	1 reference		based aligned,
 10     4 	2 node_type		bit(9) unaligned,
 10     5 	2 array_ref		bit(1) unaligned,
 10     6 	2 varying_ref		bit(1) unaligned,
 10     7 	2 shared			bit(1) unaligned,
 10     8 	2 put_data_sw		bit(1) unaligned,
 10     9 	2 processed		bit(1) unaligned,
 10    10 	2 units			fixed(3) unaligned,
 10    11 	2 ref_count		fixed(17) unaligned,
 10    12 	2 c_offset		fixed(24),
 10    13 	2 c_length		fixed(24),
 10    14 	2 symbol			ptr unaligned,
 10    15 	2 qualifier		ptr unaligned,
 10    16 	2 offset			ptr unaligned,
 10    17 	2 length			ptr unaligned,
 10    18 	2 subscript_list		ptr unaligned,
 10    19 						/* these fields are used by the 645 code generator */
 10    20 	2 address			structure unaligned,
 10    21 	  3 base			bit(3),
 10    22 	  3 offset		bit(15),
 10    23 	  3 op			bit(9),
 10    24 	  3 no_address		bit(1),
 10    25 	  3 inhibit		bit(1),
 10    26 	  3 ext_base		bit(1),
 10    27 	  3 tag			bit(6),
 10    28 	2 info			structure unaligned,
 10    29 	  3 address_in		structure,
 10    30 	    4 b			dimension(0:7) bit(1),
 10    31 	    4 storage		bit(1),
 10    32 	  3 value_in		structure,
 10    33 	    4 a			bit(1),
 10    34 	    4 q			bit(1),
 10    35 	    4 aq			bit(1),
 10    36 	    4 string_aq		bit(1),
 10    37 	    4 complex_aq		bit(1),
 10    38 	    4 decimal_aq		bit(1),
 10    39 	    4 b			dimension(0:7) bit(1),
 10    40 	    4 storage		bit(1),
 10    41 	    4 indicators		bit(1),
 10    42 	    4 x			dimension(0:7) bit(1),
 10    43 	  3 other			structure,
 10    44 	    4 big_offset		bit(1),
 10    45 	    4 big_length		bit(1),
 10    46 	    4 modword_in_offset	bit(1),
 10    47 	2 data_type		fixed(5) unaligned,
 10    48 	2 bits			structure unaligned,
 10    49 	  3 padded_ref		bit(1),
 10    50 	  3 aligned_ref		bit(1),
 10    51 	  3 long_ref		bit(1),
 10    52 	  3 forward_ref		bit(1),
 10    53 	  3 ic_ref		bit(1),
 10    54 	  3 temp_ref		bit(1),
 10    55 	  3 defined_ref		bit(1),
 10    56 	  3 evaluated		bit(1),
 10    57 	  3 allocate		bit(1),
 10    58 	  3 allocated		bit(1),
 10    59 	  3 aliasable		bit(1),
 10    60 	  3 even			bit(1),
 10    61 	  3 perm_address		bit(1),
 10    62 	  3 aggregate		bit(1),
 10    63 	  3 hit_zero		bit(1),
 10    64 	  3 dont_save		bit(1),
 10    65 	  3 fo_in_qual		bit(1),
 10    66 	  3 hard_to_load		bit(1),
 10    67 	2 relocation		bit(12) unaligned,
 10    68 	2 more_bits		structure unaligned,
 10    69 	  3 substr		bit(1),
 10    70 	  3 padded_for_store_ref	bit(1),
 10    71 	  3 aligned_for_store_ref	bit(1),
 10    72 	  3 mbz			bit(15),
 10    73 	2 store_ins		bit(18) unaligned;
 10    74 
 10    75 /* END INCLUDE FILE ... reference.incl.pl1 */
      432 
 11     1 /* BEGIN INCLUDE FILE ... list.incl.pl1 */
 11     2 
 11     3 /* Modified 26 June 81 by EBush to add max_list_elements */
 11     4 
 11     5 
 11     6 dcl	1 list		based aligned,
 11     7 	2 node_type	bit(9) unaligned,
 11     8 	2 reserved	bit(12) unaligned,
 11     9 	2 number		fixed(14) unaligned,
 11    10 	2 element		dimension(n refer(list.number)) ptr unaligned;
 11    11 
 11    12 dcl       max_list_elements   fixed bin(17) internal static options (constant)
 11    13 	                    init(16383);
 11    14 
 11    15 /* END INCLUDE FILE ... list.incl.pl1 */
      433 
 12     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
 12     2 
 12     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
 12     4 
 12     5 /* format: style3 */
 12     6 dcl	1 operator	based aligned,
 12     7 	  2 node_type	bit (9) unaligned,
 12     8 	  2 op_code	bit (9) unaligned,
 12     9 	  2 shared	bit (1) unaligned,
 12    10 	  2 processed	bit (1) unaligned,
 12    11 	  2 optimized	bit (1) unaligned,
 12    12 	  2 number	fixed (14) unaligned,
 12    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
 12    14 
 12    15 dcl	max_number_of_operands
 12    16 			fixed bin (15) int static options (constant) initial (32767);
 12    17 
 12    18 /* END INCLUDE FILE ... operator.incl.pl1 */
      434 
 13     1 /* ***********************************************************
 13     2*   *                                                         *
 13     3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
 13     4*   *                                                         *
 13     5*   *********************************************************** */
 13     6 /* BEGIN INCLUDE FILE ... statement.incl.pl1 */
 13     7 /* Internal interface of the PL/I compiler */
 13     8 
 13     9 dcl	1 statement		based aligned,
 13    10 	2 node_type		bit(9) unaligned,
 13    11 	2 source_id		structure unaligned,
 13    12 	  3 file_number		bit(8),
 13    13 	  3 line_number		bit(14),
 13    14 	  3 statement_number	bit(5),
 13    15 	2 next			ptr unaligned,
 13    16 	2 back			ptr unaligned,
 13    17 	2 root			ptr unaligned,
 13    18 	2 labels			ptr unaligned,
 13    19 	2 reference_list		ptr unaligned,
 13    20 	2 state_list		ptr unaligned,
 13    21 	2 reference_count		fixed(17) unaligned,
 13    22 	2 ref_count_copy		fixed(17) unaligned,
 13    23 	2 object			structure unaligned,
 13    24 	  3 start			fixed(17),
 13    25 	  3 finish		fixed(17),
 13    26 	2 source			structure unaligned,
 13    27 	  3 segment		fixed(11),
 13    28 	  3 start			fixed(23),
 13    29 	  3 length		fixed(11),
 13    30 	2 prefix			bit(12) unaligned,
 13    31 	2 optimized		bit(1) unaligned,
 13    32 	2 free_temps		bit(1) unaligned,
 13    33 	2 LHS_in_RHS		bit(1) unaligned,
 13    34 	2 statement_type		bit(9) unaligned,
 13    35 	2 bits			structure unaligned,
 13    36 	  3 processed		bit(1) unaligned,
 13    37 	  3 put_in_profile		bit(1) unaligned,
 13    38 	  3 generated		bit(1) unaligned,
 13    39 	  3 snap			bit(1) unaligned,
 13    40 	  3 system		bit(1) unaligned,
 13    41 	  3 irreducible		bit(1) unaligned,
 13    42 	  3 checked		bit(1) unaligned,
 13    43 	  3 save_temps		bit(1) unaligned,
 13    44 	  3 suppress_warnings	bit(1) unaligned,
 13    45 	  3 force_nonquick		bit(1) unaligned,
 13    46 	  3 expanded_by_name	bit(1) unaligned,
 13    47 	  3 begins_loop		bit(1) unaligned,
 13    48 	  3 pad			bit(24) unaligned;
 13    49 
 13    50 /* END INCLUDE FILE ... statement.incl.pl1 */
      435 
 14     1 /* BEGIN INCLUDE FILE ... op_codes.incl.pl1 */
 14     2 
 14     3 /* Modified: 25 Apr 1979 by PCK 4-bit decimal */
 14     4 /* Modified: 6 Jun 1979 by PG to add rank and byte */
 14     5 /* Modified: 26 Dec 1979 by PCK to add assign_by_name */
 14     6 /* Modified: 26 July 82 BIM wordno, segno */
 14     7 
 14     8 dcl (	add		initial("000010001"b),	/* opnd(1) <- opnd(2)+opnd(3)		*/
 14     9 	sub		initial("000010010"b),	/* opnd(1) <- opnd(2)-opnd(3)		*/
 14    10 	mult		initial("000010011"b),	/* opnd(1) <- opnd(2)*opnd(3)		*/
 14    11 	div		initial("000010100"b),	/* opnd(1) <- opnd(2)/opnd(3)		*/
 14    12 	negate		initial("000010101"b),	/* opnd(1) <- -opnd(2)  		*/
 14    13 	exp		initial("000010110"b),	/* opnd(1) <- opnd(2) ** opnd(3)	*/
 14    14 
 14    15 	and_bits		initial("000100001"b),	/* opnd(1) <- opnd(2) & opnd(3)	*/
 14    16 	or_bits		initial("000100010"b),	/* opnd(1) <- opnd(2)|opnd(3)		*/
 14    17 	xor_bits		initial("000100011"b),	/* opnd(1) <- opnd(2) xor opnd(3)	*/
 14    18 	not_bits		initial("000100100"b),	/* opnd(1) <- ^opnd(2)		*/
 14    19 	cat_string	initial("000100101"b),	/* opnd(1) <- opnd(2)||opnd(3)	*/
 14    20 	bool_fun		initial("000100110"b),	/* opnd(1) <- bool(opnd(2),opnd(3),opnd(4)) */
 14    21 
 14    22 	assign		initial("000110001"b),	/* opnd(1) <- opnd(2)		*/
 14    23 	assign_size_ck	initial("000110010"b),	/* opnd(1) <- opnd(2)		*/
 14    24 	assign_zero	initial("000110011"b),	/* opnd(1) <- 0			*/
 14    25 	copy_words	initial("000110100"b),	/* move opnd(2) to opnd(1) by opnd(3) words */
 14    26 	copy_string	initial("000110101"b),	/* move opnd(2) to opnd(1) by opnd(3) units */
 14    27 	make_desc		initial("000110110"b),	/* opnd(1) <- descriptor(opnd(2),opnd(3)) */
 14    28 	assign_round	initial("000110111"b),	/* opnd(1) <- opnd(2) rounded		*/
 14    29 	pack		initial("000111000"b),	/* opnd(1) <- encode to picture opnd(2) */
 14    30 	unpack		initial("000111001"b),	/* opnd(1) <- decode from picture opnd(2) */
 14    31 
 14    32 	less_than		initial("001000100"b),	/* opnd(1) <- opnd(2) < opnd(3)	*/
 14    33 	greater_than	initial("001000101"b),	/* opnd(1) <- opnd(2) > opnd(3)	*/
 14    34 	equal		initial("001000110"b),	/* opnd(1) <- opnd(2) = opnd(3)	*/
 14    35 	not_equal		initial("001000111"b),	/* opnd(1) <- opnd(2) ^= opnd(3)	*/
 14    36 	less_or_equal	initial("001001000"b),	/* opnd(1) <- opnd(2) <= opnd(3)	*/
 14    37 	greater_or_equal	initial("001001001"b),	/* opnd(1) <- opnd(2) >= opnd(3)	*/
 14    38 
 14    39 	jump		initial("001010001"b),	/* go to opnd(1) unconditionally	*/
 14    40 	jump_true		initial("001010010"b),	/* go to opnd(1) if opnd(2) is not 0	*/
 14    41 	jump_false	initial("001010011"b),	/* go to opnd(1) if opnd(2) is all 0	*/
 14    42 	jump_if_lt	initial("001010100"b),	/* go to opnd(1) if opnd(2) < opnd(3)	*/
 14    43 	jump_if_gt	initial("001010101"b),	/* go to opnd(1) if opnd(2) > opnd(3)	*/
 14    44 	jump_if_eq	initial("001010110"b),	/* go to opnd(1) if opnd(2) = opnd(3)	*/
 14    45 	jump_if_ne	initial("001010111"b),	/* go to opnd(1) if opnd(2) ^= opnd(3)	*/
 14    46 	jump_if_le	initial("001011000"b),	/* go to opnd(1) if opnd(2) <= opnd(3)	*/
 14    47 	jump_if_ge	initial("001011001"b),	/* go to opnd(1) if opnd(2) >= opnd(3)	*/
 14    48 
 14    49 	std_arg_list	initial("001100001"b),	/* opnd(1) <- arglist(opnd(2) desclist(opnd(3)))	*/
 14    50 	return_words	initial("001100010"b),	/* return aggregate opnd(1), opnd(2) is length in words */
 14    51 	std_call		initial("001100011"b),	/* opnd(1) <- call opnd(2) with opnd(3)		*/
 14    52 	return_bits	initial("001100100"b),	/* return aggregate opnd(1), opnd(2) is length in bits */
 14    53 	std_entry		initial("001100101"b),	/* entry(opnd(1)... opnd(n))			*/
 14    54 	return_string	initial("001100110"b),	/* return string opnd(1) */
 14    55 	ex_prologue	initial("001100111"b),	/* execute the prologue -no operands-		*/
 14    56 	allot_auto	initial("001101000"b),	/* opnd(1) <- addrel(stack,opnd(2))		*/
 14    57 	param_ptr		initial("001101001"b),	/* opnd(1) <- ptr to opnd(2) in  block opnd(3)	*/
 14    58 	param_desc_ptr	initial("001101010"b),	/* opnd(1) <- ptr to opnd(2) in block opnd(3)	*/
 14    59 	std_return	initial("001101011"b),	/* return -no arguments-			*/
 14    60 	allot_ctl		initial("001101100"b),	/* allocate opnd(1) , length in words is opnd(2) 	*/
 14    61 	free_ctl		initial("001101101"b),	/* free opnd(1)				*/
 14    62 	stop		initial("001101110"b),	/* stop - terminate run unit			*/
 14    63 
 14    64 	mod_bit		initial("001110000"b),	/* opnd(1) <- mod(opnd(3),36),
 14    65*						   opnd(2) <- opnd(3) / 36		*/
 14    66 	mod_byte		initial("001110001"b),	/* opnd(1) <- mod(opnd(3),4),
 14    67*						   opnd(2) <- opnd(3) / 4		*/
 14    68 	mod_half		initial("001110010"b),	/* opnd(1) <- mod(opnd(3),2),
 14    69*						   opnd(2) <- opnd(3) / 2		*/
 14    70 	mod_word		initial("001110011"b),	/* TO BE DEFINED BY BLW			*/
 14    71 
 14    72 	bit_to_char	initial("010000000"b),	/* opnd(1) <- (opnd(2)+8)/9		*/
 14    73 	bit_to_word	initial("010000001"b),	/* opnd(1) <- (opnd(2)+35)/36		*/
 14    74 	char_to_word	initial("010000010"b),	/* opnd(1) <- (opnd(2)+3)/4		*/
 14    75 	half_to_word	initial("010000011"b),	/* opnd(1) <- (opnd(2)+1)/2		*/
 14    76 	word_to_mod2	initial("010000100"b),	/* opnd(1) <- (opnd(2)+1)/2*2		*/
 14    77 	word_to_mod4	initial("010000101"b),	/* opnd(1) <- (opnd(2)+3)/4*4		*/
 14    78 	word_to_mod8	initial("010000110"b),	/* opnd(1) <- (opnd(2)+7)/8*8		*/
 14    79 	rel_fun		initial("010000111"b),	/* opnd(1) <- rel(opnd(2))		*/
 14    80 	baseno_fun	initial("010001000"b),	/* opnd(1) <- baseno(opnd(2))		*/
 14    81 	desc_size		initial("010001001"b),	/* opnd(1) <- substr(opnd(2),13,24)	*/
 14    82 	bit_pointer	initial("010001010"b),	/* opnd(1) <- bit offset of opnd(2)	*/
 14    83 	index_before_fun	initial("010001011"b),	/* opnd(1) <- length of before(opnd(2),opnd(3)) */
 14    84 	index_after_fun	initial("010001100"b),	/* opnd(1) <- offset of after(opnd(2),opnd(3)) in opnd(2) */
 14    85 	verify_ltrim_fun	initial("010001101"b),	/* opnd(1) <- offset of ltrim(opnd(2),opnd(3)) in opnd(2) */
 14    86 	verify_rtrim_fun	initial("010001110"b),	/* opnd(1) <- length(opnd(2))-length(rtrim(opnd(2),opnd(3))) */
 14    87 	digit_to_bit	initial("010001111"b),	/* opnd(1) <- 9*opnd(2)/2		*/
 14    88 
 14    89 	ceil_fun		initial("010010000"b),	/* opnd(1) <- ceil(opnd(2))		*/
 14    90 	floor_fun		initial("010010001"b),	/* opnd(1) <- floor(opnd(2))		*/
 14    91 	round_fun		initial("010010010"b),	/* opnd(1) <- round(opnd(2))		*/
 14    92 	sign_fun		initial("010010011"b),	/* opnd(1) <- sign(opnd(2))		*/
 14    93 	abs_fun		initial("010010100"b),	/* opnd(1) <- abs(opnd(2))		*/
 14    94 	trunc_fun		initial("010010101"b),	/* opnd(1) <- trunc(opnd(2))		*/
 14    95 	byte_fun		initial("010010110"b),	/* opnd(1) <- byte(opnd(2))		*/
 14    96 	rank_fun		initial("010010111"b),	/* opnd(1) <- rank(opnd(2))		*/
 14    97 	index_rev_fun	initial("010011000"b),	/* opnd(1) <- index(reverse(opnd(2)),reverse(opnd(3))) */
 14    98 	search_rev_fun	initial("010011001"b),	/* opnd(1) <- search(reverse(opnd(2)),opnd(3)) */
 14    99 	verify_rev_fun	initial("010011010"b),	/* opnd(1) <- verify(reverse(opnd(2)),opnd(3)) */
 14   100 	wordno_fun	initial("010011011"b),        /* opnd(1) <- wordno (opnd(2)) */
 14   101 	segno_fun		initial("010011100"b),        /* opnd(1) <- segno (opnd(2)) */
 14   102 	bitno_fun           initial("010011101"b),        /* opnd(1) <- bitno (opnd(2)) */
 14   103 	charno_fun	initial("010011110"b),        /* opnd(1) <- charno (opnd(2)) */
 14   104 
 14   105 	index_fun		initial("010100000"b),	/* opnd(1) <- index(opnd(2),opnd(3))	*/
 14   106 	off_fun		initial("010100001"b),	/* opnd(1) <- offset(opnd(2),opnd(3))	*/
 14   107 	complex_fun	initial("010100010"b),	/* opnd(1) <- complex(opnd(2),opnd(3))	*/
 14   108 	conjg_fun		initial("010100011"b),	/* opnd(1) <- conjg(opnd(2),opnd(3))	*/
 14   109 	mod_fun		initial("010100100"b),	/* opnd(1) <- mod(opnd(2),opnd(3))	*/
 14   110 	repeat_fun	initial("010100101"b),	/* opnd(1) <- repeat(opnd(2),opnd(3))	*/
 14   111 	verify_fun	initial("010100110"b),	/* opnd(1) <- verify(opnd(2),opnd(3))	*/
 14   112 	translate_fun	initial("010100111"b),	/* opnd(1) <- translate(opnd(2),opnd(3))*/
 14   113 	real_fun   	initial("010101001"b),	/* opnd(1) <- real(opnd(2))		*/
 14   114 	imag_fun   	initial("010101010"b),	/* opnd(1) <- imag(opnd(2))		*/
 14   115 	length_fun	initial("010101011"b),	/* opnd(1) <- length(opnd(2))	*/
 14   116 	pl1_mod_fun	initial("010101100"b),	/* opnd(1) <- mod(opnd(2)) */
 14   117 	search_fun	initial("010101101"b),	/* opnd(1) <- search(opnd(2),opnd(3)) */
 14   118 	allocation_fun	initial("010101110"b),	/* opnd(1) <- allocation(opnd(2)) */
 14   119 	reverse_fun	initial("010101111"b),	/* opnd(1) <- reverse(opnd(2)) */
 14   120 
 14   121 	addr_fun		initial("010110000"b),	/* opnd(1) <- addr(opnd(2))		*/
 14   122 	addr_fun_bits	initial("010110001"b),	/* opnd(1) <- addr(opnd(2))		*/
 14   123 	ptr_fun		initial("010110010"b),	/* opnd(1) <- ptr(opnd(2),opnd(3))	*/
 14   124 	baseptr_fun	initial("010110011"b),	/* opnd(1) <- baseptr(opnd(2))	*/
 14   125 	addrel_fun	initial("010110100"b),	/* opnd(1) <- addrel(opnd(2),opnd(3))	*/
 14   126 	codeptr_fun	initial("010110101"b),	/* opnd(1) <- codeptr(opnd(2))	*/
 14   127 	environmentptr_fun	initial("010110110"b),	/* opnd(1) <- environmentptr(opnd(2))	*/
 14   128 	stackbaseptr_fun	initial("010110111"b),	/* opnd(1) is ptr to base of current stack	*/
 14   129 	stackframeptr_fun	initial("010111000"b),	/* opnd(1) is ptr to current block's stack frame	*/
 14   130 	setcharno_fun	initial("010111001"b),	/* opnd(1) <- opnd(2) with charno opnd(3) */
 14   131 	addcharno_fun	initial("010111010"b),	/* opnd(1) <- opnd(2) with charno = charno + opnd(3) */
 14   132 	setbitno_fun	initial("010111011"b),	/* setcharno for bitsno */
 14   133 	addbitno_fun	initial("010111100"b),	/* addcharno for bitno */
 14   134 
 14   135 	min_fun		initial("011000000"b),	/* opnd(1) <- min(opnd(1),opnd(2),...)	*/
 14   136 	max_fun		initial("011000001"b),	/* opnd(1) <- max(opnd(1),opnd(2),...)	*/
 14   137 
 14   138 	stack_ptr		initial("011010001"b),	/* opnd(1) <- stack frame ptr		*/
 14   139 	empty_area	initial("011010010"b),	/* empty opnd(1), length in words is opnd(2) */
 14   140 	enable_on		initial("011010100"b),	/* opnd(1) is the cond name
 14   141*						   opnd(2) is the file name
 14   142*						   opnd(3) is the block	*/
 14   143 	revert_on		initial("011010101"b),	/* opnd(1) is the cond name,
 14   144*						   opnd(2) is the file name	*/
 14   145 	signal_on		initial("011010110"b),	/* opnd(1) is the cond name
 14   146*						   opnd(2) is the file name */
 14   147 
 14   148 	lock_fun		initial("011010111"b),	/* opnd(1) <- stac(opnd(2),opnd(3))	*/
 14   149 	stacq_fun		initial("011011000"b),	/* opnd(1) is result, opnd(2) is ptr to lock word,
 14   150*						   opnd(3) is old value, (4) is new value. */
 14   151 	clock_fun		initial("011011001"b),	/* opnd(1) is the clock time		*/
 14   152 	vclock_fun	initial("011011010"b),	/* opnd(1) is the virtual clock time	*/
 14   153 
 14   154 	bound_ck		initial("011100000"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 14   155 	range_ck		initial("011100001"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 14   156 	loop		initial("011100010"b),	/* do opnd(1) for opnd(2) from opnd(3) to opnd(4) by 1,
 14   157*						   opnd(5) is the list */
 14   158 	join		initial("011100011"b),	/* do opnd(1), opnd(2) ... opnd(n)	*/
 14   159 	allot_based	initial("011100100"b),	/* allocate opnd(2) words in opnd(3), set opnd(1) */
 14   160 	free_based	initial("011100101"b),	/* free opnd(1) in opnd(3), length is opnd(2) words */
 14   161 
 14   162 	r_parn		initial("011110001"b),	/* format op code			*/
 14   163 	l_parn		initial("011110010"b),
 14   164 	r_format		initial("011110011"b),
 14   165 	c_format		initial("011110100"b),
 14   166 	f_format		initial("011110101"b),
 14   167 	e_format		initial("011110110"b),
 14   168 	b_format		initial("011110111"b),
 14   169 	a_format		initial("011111000"b),
 14   170 	x_format		initial("011111001"b),
 14   171 	skip_format	initial("011111010"b),
 14   172 	column_format	initial("011111011"b),
 14   173 	page_format	initial("011111100"b),
 14   174 	line_format	initial("011111101"b),
 14   175 	picture_format	initial("011111110"b),
 14   176 	bn_format		initial("011111111"b),	/* bit format, length(opnd(2)), radix factor(opnd(3)) */
 14   177 
 14   178 	get_list_trans	initial("100000000"b),	/* getlist(opnd(2) with desc(opnd(1)))	*/
 14   179 	get_edit_trans	initial("100000001"b),	/* getedit(opnd(2) with desc(opnd(1)))	*/
 14   180 	get_data_trans	initial("100000010"b),	/* getdata(opnd(1) to opnd(n))	*/
 14   181 	put_list_trans	initial("100000011"b),	/* putlist(opnd(2) with desc(opnd(1)))	*/
 14   182 	put_edit_trans	initial("100000100"b),	/* putedit(opnd(2) with desc(opnd(1)))	*/
 14   183 	put_data_trans	initial("100000101"b),	/* putdata(opnd(2)) with subscript-list opnd(1) */
 14   184 	terminate_trans	initial("100000110"b),	/* terminate stream transmission	*/
 14   185 	stream_prep	initial("100000111"b),	/* initiate stream transmission	*/
 14   186 	record_io		initial("100001000"b),	/* perform record io operation	*/
 14   187 	fortran_read	initial("100001001"b),	/* A complete read statement		*/
 14   188 	fortran_write	initial("100001010"b),	/* A complete write statement		*/
 14   189 	ftn_file_manip	initial("100001011"b),	/* endfile,backspace,rewind,etc.	*/
 14   190 	ftn_trans_loop	initial("100001100"b),	/* An implied do in i/o list		*/
 14   191 	put_control	initial("100001101"b),	/* put control opnd(1) opnd(2) times	*/
 14   192 	put_field		initial("100001110"b),	/* putlist(opnd(2)) of length(opnd(1))	*/
 14   193 	put_field_chk	initial("100001111"b),	/* putlist(op(2)) of len(op(1)) check char index(op(3)) */
 14   194 
 14   195 /* These operators are produced by the parse but are not used as input to the code generator.	*/
 14   196 /* They are processed by the semantic translator.						*/
 14   197 
 14   198 	return_value	initial("100010010"b),	/* return(opnd(1))			*/
 14   199 	allot_var		initial("100010011"b),	/* allot opnd(1) in opnd(2)		*/
 14   200 	free_var		initial("100010100"b),	/* free opnd(1) out of opnd(2)	*/
 14   201 	get_file		initial("100010101"b),	/* opnd(1) is filename,opnd(2) is copy	*/
 14   202 						/* opnd(3) is skip, opnd(4) is list	*/
 14   203 	get_string	initial("100010110"b),	/* opnd(1) is string,opnd(2) is list	*/
 14   204 	put_file		initial("100010111"b),	/* opnd(1) is filename,opnd(2) is page	*/
 14   205 						/* opnd(3) is skip,opnd(4) is line	*/
 14   206 	put_string	initial("100011000"b),	/* opnd(1) is string,opnd(2) is list	*/
 14   207 	open_file		initial("100011001"b),
 14   208 	close_file	initial("100011010"b),
 14   209 	read_file		initial("100011011"b),
 14   210 	write_file	initial("100011100"b),
 14   211 	locate_file	initial("100011101"b),
 14   212 	do_fun		initial("100011110"b),	/* opnd(1) is join of a list		*/
 14   213 						/* opnd(2) is control variable ref	*/
 14   214 						/* opnd(3) is specification operator	*/
 14   215 	do_spec		initial("100011111"b),	/* opnd(1) to opnd(2) by opnd(3) 	*/
 14   216 						/* repeat opnd(4) while opnd(5)	*/
 14   217 						/* opnd(6) is next specification	*/
 14   218 
 14   219 	rewrite_file	initial("100100000"b),
 14   220 	delete_file	initial("100100001"b),
 14   221 	unlock_file	initial("100100010"b),
 14   222 	lock_file		initial("100100011"b),
 14   223 	refer		initial("100100101"b),	/* opnd(1) refer(opnd(2))		*/
 14   224 	prefix_plus	initial("100100110"b),	/* opnd(1) <- +opnd(2)		*/
 14   225 	nop		initial("100100111"b),	/* no-op */
 14   226 	assign_by_name	initial("100101000"b),	/* opnd(1) <- opnd(2),by name		*/
 14   227 
 14   228 /* These operators are produced by the semantic translator in processing the math
 14   229*   builtin functions and are used as input to the code generator			*/
 14   230 
 14   231 	sqrt_fun		initial("100110000"b),	/* opnd(1) <- sqrt(opnd(2))	*/
 14   232 	sin_fun		initial("100110001"b),	/* opnd(1) <- sin(opnd(2))	*/
 14   233 	sind_fun		initial("100110010"b),	/* opnd(1) <- sind(opnd(2))	*/
 14   234 	cos_fun		initial("100110011"b),	/* opnd(1) <- cos(opnd(2))	*/
 14   235 	cosd_fun		initial("100110100"b),	/* opnd(1) <- cosd(opnd(2))	*/
 14   236 	tan_fun		initial("100110101"b),	/* opnd(1) <- tan(opnd(2))	*/
 14   237 	tand_fun		initial("100110110"b),	/* opnd(1) <- tand(opnd(2))	*/
 14   238 	asin_fun		initial("100110111"b),	/* opnd(1) <- asin(opnd(2))	*/
 14   239 	asind_fun		initial("100111000"b),	/* opnd(1) <- asind(opnd(2))	*/
 14   240 	acos_fun		initial("100111001"b),	/* opnd(1) <- acos(opnd(2))	*/
 14   241 	acosd_fun		initial("100111010"b),	/* opnd(1) <- acosd(opnd(2))	*/
 14   242 	atan_fun		initial("100111011"b),	/* opnd(1) <- atan(opnd(2)[,opnd(3)])	*/
 14   243 	atand_fun		initial("100111100"b),	/* opnd(1) <- atand(opnd(2)[,opnd(3)])	*/
 14   244 	log2_fun		initial("100111101"b),	/* opnd(1) <- log2(opnd(2))	*/
 14   245 	log_fun		initial("100111110"b),	/* opnd(1) <- log(opnd(2))	*/
 14   246 	log10_fun		initial("100111111"b),	/* opnd(1) <- log10(opnd(2))	*/
 14   247 
 14   248 	exp_fun		initial("101000000"b))	/* opnd(1) <- exp(opnd(2))	*/
 14   249 
 14   250 			bit(9) aligned internal static options(constant);
 14   251 
 14   252 /* END INCLUDE FILE ... op_codes.incl.pl1 */
      436 
 15     1 	/* statement types */
 15     2 
 15     3 dcl (	unknown_statement		initial("000000000"b),
 15     4 	allocate_statement		initial("000000001"b),
 15     5 	assignment_statement	initial("000000010"b),
 15     6 	begin_statement		initial("000000011"b),
 15     7 	call_statement		initial("000000100"b),
 15     8 	close_statement		initial("000000101"b),
 15     9 	declare_statement		initial("000000110"b),
 15    10 	lock_statement		initial("000000111"b),
 15    11 	delete_statement		initial("000001000"b),
 15    12 	display_statement		initial("000001001"b),
 15    13 	do_statement		initial("000001010"b),
 15    14 	else_clause		initial("000001011"b),
 15    15 	end_statement		initial("000001100"b),
 15    16 	entry_statement		initial("000001101"b),
 15    17 	exit_statement		initial("000001110"b),
 15    18 	format_statement		initial("000001111"b),
 15    19 	free_statement		initial("000010000"b),
 15    20 	get_statement		initial("000010001"b),
 15    21 	goto_statement		initial("000010010"b),
 15    22 	if_statement		initial("000010011"b),
 15    23 	locate_statement		initial("000010100"b),
 15    24 	null_statement		initial("000010101"b),
 15    25 	on_statement		initial("000010110"b),
 15    26 	open_statement		initial("000010111"b),
 15    27 	procedure_statement 	initial("000011000"b),
 15    28 	put_statement		initial("000011001"b),
 15    29 	read_statement		initial("000011010"b),
 15    30 	return_statement		initial("000011011"b),
 15    31 	revert_statement		initial("000011100"b),
 15    32 	rewrite_statement		initial("000011101"b),
 15    33 	signal_statement		initial("000011110"b),
 15    34 	stop_statement		initial("000011111"b),
 15    35 	system_on_unit		initial("000100000"b),
 15    36 	unlock_statement		initial("000100001"b),
 15    37 	wait_statement		initial("000100010"b),
 15    38 	write_statement		initial("000100011"b),
 15    39 	default_statement		initial("000100100"b),
 15    40 	continue_statement		initial("000100101"b)) bit(9) internal static aligned options(constant);
      437 
 16     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
 16     2 
 16     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
 16     4 
 16     5 dcl (	block_node		initial("000000001"b),
 16     6 	statement_node		initial("000000010"b),
 16     7 	operator_node		initial("000000011"b),
 16     8 	reference_node		initial("000000100"b),
 16     9 	token_node		initial("000000101"b),
 16    10 	symbol_node		initial("000000110"b),
 16    11 	context_node		initial("000000111"b),
 16    12 	array_node		initial("000001000"b),
 16    13 	bound_node		initial("000001001"b),
 16    14 	format_value_node		initial("000001010"b),
 16    15 	list_node			initial("000001011"b),
 16    16 	default_node		initial("000001100"b),
 16    17 	machine_state_node		initial("000001101"b),
 16    18 	source_node		initial("000001110"b),
 16    19 	label_node		initial("000001111"b),
 16    20 	cross_reference_node	initial("000010000"b),
 16    21 	sf_par_node		initial("000010001"b),
 16    22 	temporary_node		initial("000010010"b),
 16    23 	label_array_element_node	initial("000010011"b),
 16    24 	by_name_agg_node		initial("000010100"b))
 16    25 				bit(9) internal static aligned options(constant);
 16    26 
 16    27 dcl	1 node			based aligned,
 16    28 	2 type			unal bit(9),
 16    29 	2 source_id		unal structure,
 16    30 	  3 file_number		bit(8),
 16    31 	  3 line_number		bit(14),
 16    32 	  3 statement_number	bit(5);
 16    33 
 16    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
      438 
 17     1 /* BEGIN INCLUDE FILE ... token.incl.pl1 */
 17     2 
 17     3 dcl	1 token			based aligned,
 17     4 	2 node_type		bit(9) unaligned,
 17     5 	2 type			bit(9) unaligned,
 17     6 	2 loc			bit(18) unaligned,	/* symtab offset for identifiers, "p" flag for constants */
 17     7 	2 declaration		ptr unaligned,
 17     8 	2 next			ptr unaligned,
 17     9 	2 size			fixed(9),
 17    10 	2 string			char(n refer(token.size));
 17    11 
 17    12 /* END INCLUDE FILE ... token.incl.pl1 */
      439 
 18     1 /* BEGIN INCLUDE FILE ... token_types.incl.pl1 */
 18     2 
 18     3 dcl (	no_token		initial("000000000"b),	/*	token types		*/
 18     4 	identifier	initial("100000000"b),
 18     5 	isub		initial("010000000"b),
 18     6 	plus		initial("001000001"b),
 18     7 	minus		initial("001000010"b),
 18     8 	asterisk		initial("001000011"b),
 18     9 	slash		initial("001000100"b),
 18    10 	expon		initial("001000101"b),
 18    11 	not		initial("001000110"b),
 18    12 	and		initial("001000111"b),
 18    13 	or		initial("001001000"b),
 18    14 	cat		initial("001001001"b),
 18    15 	eq		initial("001001010"b),
 18    16 	ne		initial("001001011"b),
 18    17 	lt		initial("001001100"b),
 18    18 	gt		initial("001001101"b),
 18    19 	le		initial("001001110"b),
 18    20 	ge		initial("001001111"b),
 18    21 	ngt		initial("001010000"b),
 18    22 	nlt		initial("001010001"b),
 18    23 	assignment	initial("001010010"b),
 18    24 	colon		initial("001010011"b),
 18    25 	semi_colon	initial("001010100"b),
 18    26 	comma		initial("001010101"b),
 18    27 	period		initial("001010110"b),
 18    28 	arrow		initial("001010111"b),
 18    29 	left_parn		initial("001011000"b),
 18    30 	right_parn	initial("001011001"b),
 18    31 	percent		initial("001011100"b),
 18    32 	bit_string	initial("000100001"b),
 18    33 	char_string	initial("000100010"b),
 18    34 	bin_integer	initial("000110001"b),
 18    35 	dec_integer	initial("000110011"b),
 18    36 	fixed_bin		initial("000110000"b),
 18    37 	fixed_dec		initial("000110010"b),
 18    38 	float_bin		initial("000110100"b),
 18    39 	float_dec		initial("000110110"b),
 18    40 	i_bin_integer	initial("000111001"b),
 18    41 	i_dec_integer	initial("000111011"b),
 18    42 	i_fixed_bin	initial("000111000"b),
 18    43 	i_fixed_dec	initial("000111010"b),
 18    44 	i_float_bin	initial("000111100"b),
 18    45 	i_float_dec	initial("000111110"b)) bit (9) aligned internal static options (constant);
 18    46 
 18    47 dcl (	is_identifier		initial ("100000000"b),	/*	token type masks		*/
 18    48 	is_isub			initial ("010000000"b),
 18    49 	is_delimiter		initial ("001000000"b),
 18    50 	is_constant		initial ("000100000"b),
 18    51 	is_arith_constant		initial ("000010000"b),	/* N.B. not really a mask...s/b "000110000"b */
 18    52 	is_arithmetic_constant	initial ("000110000"b),
 18    53 	is_imaginary_constant	initial ("000111000"b),
 18    54 	is_float_constant		initial ("000110100"b),
 18    55 	is_decimal_constant		initial ("000110010"b),
 18    56 	is_integral_constant 	initial ("000110001"b)
 18    57 	) bit(9) internal static aligned options(constant);
 18    58 
 18    59 /* END INCLUDE FILE ... token_types.incl.pl1 */
      440 
 19     1 /* BEGIN INCLUDE FILE ... declare_type.incl.pl1 */
 19     2 
 19     3 /* Modified: 25 Apr 1979 by PCK to implement 4-bit decimal */
 19     4 
 19     5 dcl  (	by_declare	initial("001"b),
 19     6 	by_explicit_context initial("010"b),
 19     7 	by_context	initial("011"b),
 19     8 	by_implication	initial("100"b),
 19     9 	by_compiler	initial("101"b)) int static bit(3) aligned options(constant);
 19    10 
 19    11 /* END INCLUDE FILE ... declare_type.incl.pl1 */
      441 
 20     1 /* BEGIN INCLUDE FILE ... boundary.incl.pl1 */
 20     2 
 20     3 /* Modified: 26 Apr 1979 by PCK to implement 4-bit decimal */
 20     4 
 20     5 dcl (	bit_		init(1),
 20     6 	digit_		init(2),
 20     7 	character_	init(3),
 20     8 	half_		init(4),
 20     9 	word_		init(5),
 20    10 	mod2_		init(6),
 20    11 	mod4_		init(7)) fixed bin(3) int static options(constant);
 20    12 
 20    13 /* END INCLUDE FILE ... boundary.incl.pl1 */
      442 
 21     1 dcl	1 label			based aligned,
 21     2 	2 node_type		bit(9) unaligned,
 21     3 	2 source_id		structure unaligned,
 21     4 	  3 file_number		bit(8),
 21     5 	  3 line_number		bit(14),
 21     6 	  3 statement_number	bit(5),
 21     7 	2 location		fixed(17) unaligned,
 21     8 	2 allocated		bit(1) unaligned,
 21     9 	2 dcl_type		bit(3) unaligned,
 21    10 	2 reserved		bit(29) unaligned,
 21    11 	2 array			bit(1) unaligned,
 21    12 	2 used_as_format		bit(1) unaligned,
 21    13 	2 used_in_goto		bit(1) unaligned,
 21    14 	2 symbol_table		bit(18) unaligned,
 21    15 	2 low_bound		fixed(17) unaligned,
 21    16 	2 high_bound		fixed(17) unaligned,
 21    17 	2 block_node		ptr unaligned,
 21    18 	2 token			ptr unaligned,
 21    19 	2 next			ptr unaligned,
 21    20 	2 multi_use		ptr unaligned,
 21    21 	2 cross_reference		ptr unaligned,
 21    22 	2 statement		ptr unaligned;
      443 
 22     1 dcl	1 label_array_element	based aligned,
 22     2 	2 node_type		bit(9) unaligned,
 22     3 	2 reserved		bit(12) unaligned,
 22     4 	2 number			fixed bin(14) unaligned,
 22     5 	2 next			ptr unaligned,
 22     6 	2 statement		ptr unaligned,
 22     7 	2 value			fixed bin(17);
      444 
 23     1 /* BEGIN INCLUDE FILE ... system.incl.pl1 */
 23     2 
 23     3 /* Modified: 25 Apr 1979 by PCK to implemnt 4-bit decimal */
 23     4 
 23     5 dcl (	max_p_flt_bin_1			initial(27),
 23     6 	max_p_flt_bin_2			initial(63),
 23     7 	max_p_fix_bin_1			initial(35),
 23     8 	max_p_fix_bin_2			initial(71),
 23     9 
 23    10 	max_p_dec				initial(59),
 23    11 	max_p_bin_or_dec			initial (71),	/* max (max_p_fix_bin_2, max_p_dec) */
 23    12 
 23    13 	min_scale				initial(-128),
 23    14 	max_scale				initial(+127),
 23    15 	max_bit_string			initial(9437184),
 23    16 	max_char_string			initial(1048576),
 23    17 	max_area_size			initial(262144),
 23    18 	min_area_size			initial(28),
 23    19 
 23    20 	max_bit_string_constant		initial (253),	/* max length of bit literals */
 23    21 	max_char_string_constant		initial (254),	/* max length of character literals */
 23    22 	max_identifier_length		initial (256),
 23    23 	max_number_of_dimensions		initial (127),
 23    24 
 23    25 	max_length_precision		initial(24),
 23    26 	max_offset_precision		initial(24),	/* 18 bits for word offset + 6 bits for bit offset */
 23    27 
 23    28 	max_words_per_variable		initial (262144),
 23    29 
 23    30 	bits_per_word			initial(36),
 23    31 	bits_per_double			initial(72),
 23    32 	packed_digits_per_character		initial(2),
 23    33 	characters_per_half			initial(2),
 23    34 	characters_per_word			initial(4),
 23    35 	characters_per_double		initial(8),
 23    36 
 23    37 	bits_per_character			initial(9),
 23    38 	bits_per_half			initial(18),
 23    39 	bits_per_decimal_digit		initial(9),
 23    40 	bits_per_binary_exponent		initial(8),
 23    41 	bits_per_packed_ptr			initial(36),
 23    42 	words_per_packed_pointer		initial(1),
 23    43 
 23    44 	words_per_fix_bin_1			initial(1),
 23    45 	words_per_fix_bin_2			initial(2),
 23    46 	words_per_flt_bin_1			initial(1),
 23    47 	words_per_flt_bin_2			initial(2),
 23    48 	words_per_varying_string_header	initial(1),
 23    49 	words_per_offset			initial(1),
 23    50 	words_per_pointer			initial(2),
 23    51 	words_per_label_var			initial(4),
 23    52 	words_per_entry_var			initial(4),
 23    53 	words_per_file_var			initial(4),
 23    54 	words_per_format			initial(4),
 23    55 	words_per_condition_var		initial(6),
 23    56 
 23    57 	max_index_register_value		initial(262143),
 23    58 	max_signed_index_register_value	initial(131071),
 23    59 
 23    60 	max_signed_xreg_precision		initial(17),
 23    61 	max_uns_xreg_precision		initial(18),
 23    62 
 23    63 	default_area_size			initial(1024),
 23    64 	default_flt_bin_p			initial(27),
 23    65 	default_fix_bin_p			initial(17),
 23    66 	default_flt_dec_p			initial(10),
 23    67           default_fix_dec_p   		initial(7)) fixed bin(31) internal static options(constant);
 23    68 
 23    69 dcl	bits_per_digit			initial(4.5)  fixed bin(31,1) internal static options(constant);
 23    70 
 23    71 dcl (	integer_type		initial("010000000000000000000100000001100000"b),
 23    72 	dec_integer_type		initial("010000000000000000000100000010100000"b),
 23    73 	pointer_type		initial("000001000000000000000100000000000000"b),
 23    74 	real_type			initial("001000000000000000000100000001100000"b),
 23    75 	complex_type		initial("001000000000000000000100000001010000"b),
 23    76 	builtin_type		initial("000000000000000010000000000000000000"b),
 23    77 	storage_block_type		initial("000000000000100000000000000000000000"b),
 23    78 	arg_desc_type		initial("000000000001000000000000000000000000"b),
 23    79 	local_label_var_type	initial("000000001000000000000100000100001000"b),
 23    80 	entry_var_type		initial("000000000100000000000000000000001000"b),
 23    81 	bit_type			initial("000100000000000000000000000000000000"b),
 23    82 	char_type			initial("000010000000000000000000000000000000"b)) bit(36) aligned int static
 23    83 									options(constant);
 23    84 
 23    85 /* END INCLUDE FILE ... system.incl.pl1 */
      445 
      446 	end declare;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/31/89  1338.4  declare.pl1                       >spec>install>MR12.3-1066>declare.pl1
429          1    07/21/80  1546.3  semant.incl.pl1                   >ldd>include>semant.incl.pl1
1-228        2    07/31/89  1332.6  language_utility.incl.pl1         >spec>install>MR12.3-1066>language_utility.incl.pl1
2-307        3    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-325        4    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-335        5    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-374        6    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-386        7    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
430          8    12/07/83  1701.7  symbol.incl.pl1                   >ldd>include>symbol.incl.pl1
431          9    08/13/81  2043.5  block.incl.pl1                    >ldd>include>block.incl.pl1
432         10    07/21/80  1546.3  reference.incl.pl1                >ldd>include>reference.incl.pl1
433         11    08/13/81  2211.5  list.incl.pl1                     >ldd>include>list.incl.pl1
434         12    07/21/80  1546.3  operator.incl.pl1                 >ldd>include>operator.incl.pl1
435         13    04/07/83  1635.0  statement.incl.pl1                >ldd>include>statement.incl.pl1
436         14    04/07/83  1635.0  op_codes.incl.pl1                 >ldd>include>op_codes.incl.pl1
437         15    05/03/76  1320.4  statement_types.incl.pl1          >ldd>include>statement_types.incl.pl1
438         16    07/21/80  1546.3  nodes.incl.pl1                    >ldd>include>nodes.incl.pl1
439         17    09/14/77  1705.7  token.incl.pl1                    >ldd>include>token.incl.pl1
440         18    11/30/78  1227.4  token_types.incl.pl1              >ldd>include>token_types.incl.pl1
441         19    10/25/79  1645.8  declare_type.incl.pl1             >ldd>include>declare_type.incl.pl1
442         20    10/25/79  1645.8  boundary.incl.pl1                 >ldd>include>boundary.incl.pl1
443         21    05/06/74  1742.1  label.incl.pl1                    >ldd>include>label.incl.pl1
444         22    10/25/76  1558.8  label_array_element.incl.pl1      >ldd>include>label_array_element.incl.pl1
445         23    12/07/83  1701.7  system.incl.pl1                   >ldd>include>system.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
aliasable                32(35)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 65*
allocated                 1(18)        based           bit(1)                   level 2 packed packed unaligned dcl 8-3 set ref 190*
                                                                                  237* 315
allot_auto                      000003 constant        bit(9)                   initial dcl 14-8 set ref 296*
area                     31(07)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 304
array                     2(15)        based           bit(1)                   level 2 packed packed unaligned dcl 21-1 ref 30
assign                          000004 constant        bit(9)                   initial dcl 14-8 set ref 288*
assignment_statement            000000 constant        bit(9)                   initial dcl 15-3 set ref 292* 300*
attributes               31            based           structure                level 2 dcl 8-3
auto                     32(09)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 279 359
auto_adjustable_storage
                         42            based           bit(1)                   level 3 packed packed unaligned dcl 9-5 set ref 362*
b                               000102 automatic       pointer                  dcl 13 set ref 74* 164 290* 292* 292 298* 300* 300
                                                                                  315* 320
based                    32(10)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 65 70
                                                                                  349
bit_                                   constant        fixed bin(3,0)           initial dcl 20-5 ref 332 356
bit_pointer                     000001 constant        bit(9)                   initial dcl 14-8 set ref 329* 354*
bits                     12(06)        based           structure                level 2 packed packed unaligned dcl 10-3
block                                  based           structure                level 1 dcl 9-5
block_node                4            based           pointer                  level 2 packed packed unaligned dcl 8-3 ref 74 80 97
                                                                                  164 362 363
boundary                  2(20)        based           fixed bin(3,0)           level 2 packed packed unaligned dcl 8-3 ref 35
brother                  20            based           pointer                  level 2 packed packed unaligned dcl 8-3 ref 388 403
by_compiler                            constant        bit(3)                   initial dcl 19-5 ref 105
c_dcl_size               30            based           fixed bin(24,0)          level 2 dcl 8-3 set ref 291*
c_word_size              26            based           fixed bin(24,0)          level 2 dcl 8-3 ref 90
cdesc                           000120 automatic       bit(1)                   packed unaligned dcl 15 set ref 78* 80 97
compare_declaration             000012 constant        entry                    external dcl 1-31 ref 234
compiler_developed       32(35)        based           structure                level 3 packed packed unaligned dcl 8-3
condition                31(14)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 103
condition_abreviations          000062 constant        char(8)                  initial array packed unaligned dcl 19 ref 107
condition_constants             000005 constant        varying char(16)         initial array dcl 21 ref 109
constant                 32(16)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 133 164
                                                                                  342
controlled               32(12)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 78
copy_expression                 000026 constant        entry                    external dcl 2-94 ref 141 203 260
create_list                     000030 constant        entry                    external dcl 2-147 ref 184 247 416
create_operator                 000032 constant        entry                    external dcl 2-152 ref 288 296 318 329 354
create_statement$prologue       000034 constant        entry                    external dcl 2-171 ref 292 300
d                               000100 automatic       pointer                  dcl 382 in procedure "reset_ret_val" set ref 386*
                                                                                  386* 387* 388
d                               000100 automatic       pointer                  dcl 397 in procedure "set_star" set ref 400* 400*
                                                                                  401* 402* 403
d                               000104 automatic       pointer                  dcl 13 in procedure "declare" set ref 161* 163 164
                                                                                  164 164 164 164 169 171 174 175* 175 185* 187 187*
                                                                                  188 189 189 190 190 192 203* 204 205 206*
data_type                31            based           structure                level 3 packed packed unaligned dcl 8-3
dcl_size                 24            based           pointer                  level 2 packed packed unaligned dcl 8-3 set ref 137
                                                                                  141* 141* 143 229 234 250 252 255 260* 260*
dcl_type                  1(19)        based           bit(3)                   level 2 packed packed unaligned dcl 8-3 ref 105
declaration               1            based           pointer                  level 2 packed packed unaligned dcl 17-3 set ref 161
                                                                                  169*
declare                         000014 constant        entry                    external dcl 1-41 ref 142 145 150 206 268
declare_constant$char           000036 constant        entry                    external dcl 2-224 ref 109 114
declare_constant$integer        000040 constant        entry                    external dcl 2-234 ref 319
declare_descriptor              000042 constant        entry                    external dcl 2-239 ref 97
declare_descriptor$param        000044 constant        entry                    external dcl 2-259 ref 80
declare_integer                 000046 constant        entry                    external dcl 2-269 ref 244 290
declare_pointer                 000050 constant        entry                    external dcl 2-287 ref 298 315
declare_structure               000016 constant        entry                    external dcl 1-44 ref 46
defined                  32(13)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 65 70
descriptor               13            based           pointer                  level 2 packed packed unaligned dcl 8-3 set ref 80*
                                                                                  97 97*
dimensioned              31(19)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 139 264
element                   1            based           pointer                  array level 2 packed packed unaligned dcl 11-6 set
                                                                                  ref 149 150 151 192* 194* 203* 203* 207 229 234
                                                                                  236 242 248* 250* 419*
entry                    31(09)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 116 164
equivalence              14            based           pointer                  level 2 packed packed unaligned dcl 8-3 set ref 105*
                                                                                  185 226
exp_extents              33(04)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 80 359
expand_initial                  000020 constant        entry                    external dcl 1-84 ref 304 342
external                 32(02)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 65
father                   17            based           pointer                  level 2 packed packed unaligned dcl 8-3 ref 36
file                     31(10)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 342
fixed                                                  builtin function         dcl 24 ref 319 319
fo_in_qual               12(22)        based           bit(1)                   level 3 packed packed unaligned dcl 10-3 set ref
                                                                                  325* 349*
free_node                       000052 constant        entry                    external dcl 2-345 ref 421
general                  16            based           pointer                  level 2 packed packed unaligned dcl 8-3 set ref 109*
                                                                                  114* 148 193 193* 202
get_size                        000054 constant        entry                    external dcl 2-352 ref 86
high_bound                3(18)        based           fixed bin(17,0)          level 2 packed packed unaligned dcl 21-1 ref 416
i                               000116 automatic       fixed bin(15,0)          dcl 14 set ref 106* 107 109* 183* 185 185 189 190*
inc                             000136 automatic       fixed bin(17,0)          dcl 413 set ref 415* 419
initial                  11            based           pointer                  level 2 packed packed unaligned dcl 8-3 ref 133 154
                                                                                  239
initialed                31(20)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 304
label                                  based           structure                level 1 dcl 21-1
label_array_element                    based           structure                level 1 dcl 22-1
lae                             000130 automatic       pointer                  dcl 412 set ref 418* 418* 419 419 420 421*
level                     2(11)        based           fixed bin(8,0)           level 2 packed packed unaligned dcl 8-3 set ref 40
                                                                                  43* 55*
list                                   based           structure                level 1 dcl 11-6
location                  1            based           fixed bin(18,0)          level 2 packed packed unsigned unaligned dcl 8-3 set
                                                                                  ref 189 189* 190 237 255* 319 319
lookup                          000022 constant        entry                    external dcl 1-153 ref 185
low_bound                 3            based           fixed bin(17,0)          level 2 packed packed unaligned dcl 21-1 ref 415 416
max_offset_precision                   constant        fixed bin(31,0)          initial dcl 23-5 ref 291
max_words_per_variable                 constant        fixed bin(31,0)          initial dcl 23-5 ref 90
misc_attributes          31(19)        based           structure                level 3 packed packed unaligned dcl 8-3
multi_use                 7            based           pointer                  level 2 packed packed unaligned dcl 8-3 set ref 169
                                                                                  171* 171 175
n                               000117 automatic       fixed bin(15,0)          dcl 14 set ref 179* 180* 180 183 224* 224 237 239
                                                                                  255
next                            000132 automatic       pointer                  dcl 412 in procedure "declare_label_array" set ref
                                                                                  420* 422
next                      1            based           pointer                  level 2 in structure "label_array_element" packed
                                                                                  packed unaligned dcl 22-1 in procedure "declare"
                                                                                  ref 420
no_stack                 24(22)        based           bit(1)                   level 2 packed packed unaligned dcl 9-5 set ref 273*
                                                                                  363*
node                                   based           structure                level 1 dcl 16-27
null                                                   builtin function         dcl 24 ref 27 36 38 80 80 80 80 97 97 97 97 97 133
                                                                                  148 155 162 163 169 181 185 185 193 194 202 228
                                                                                  229 229 244 244 252 282 292 292 300 300 304 304
                                                                                  304 304 342 342 342 342 386 400 418
number                    0(21)        based           fixed bin(14,0)          level 2 packed packed unaligned dcl 12-6 ref 179
offset                    5            based           pointer                  level 2 packed packed unaligned dcl 10-3 set ref
                                                                                  331* 355*
operand                   1            based           pointer                  array level 2 packed packed unaligned dcl 12-6 set
                                                                                  ref 185 185 239* 289* 290* 297* 298* 319* 320*
                                                                                  330*
operator                               based           structure                level 1 dcl 12-6
operator_node                          constant        bit(9)                   initial dcl 16-5 ref 286
p                               000106 automatic       pointer                  dcl 13 set ref 148* 148* 149 150* 151 154* 155 178*
                                                                                  178 179 185 185 226* 228 244 244 244 244* 248 249
                                                                                  272 273 292* 293 300* 301 329* 330 331
p1                              000112 automatic       pointer                  dcl 13 set ref 162* 169 171 174* 181* 194 194 195*
                                                                                  236* 237 237 239 284* 286 290* 291 297
packed                   33            based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 70 325
                                                                                  349
padded_ref               12(06)        based           bit(1)                   level 3 packed packed unaligned dcl 10-3 set ref 70*
param_desc               32(15)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 149*
                                                                                  204*
param_ptr                       000002 constant        bit(9)                   initial dcl 14-8 set ref 318*
parameter                32(14)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 65
                                                                                  70 78 188* 205* 263* 313
pl1_stat_$eis_mode              000010 external static bit(1)                   dcl 17 ref 325 349
prefix                   24(09)        based           bit(12)                  level 2 packed packed unaligned dcl 9-5 ref 292 300
ps                                     parameter       pointer                  dcl 397 in procedure "set_star" ref 393 399
ps                                     parameter       pointer                  dcl 13 in procedure "declare" ref 11 26
q                               000110 automatic       pointer                  dcl 13 set ref 184* 192 193 194 195 202* 202* 203
                                                                                  203* 207 228* 228* 229 234 236* 242 247* 248 249
                                                                                  250 288* 289 290 293 296* 297 298 301 315* 318*
                                                                                  319 320 323 330 354* 355
qualifier                 4            based           pointer                  level 2 packed packed unaligned dcl 10-3 set ref
                                                                                  298* 323*
reference                15            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 8-3 in procedure "declare" ref 70
                                                                                  298 323 325 331 332 349 355 356
reference                              based           structure                level 1 dcl 10-3 in procedure "declare"
return_count             16            based           pointer                  level 2 packed packed unaligned dcl 9-5 set ref 244
                                                                                  244*
return_value             32(18)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 78
                                                                                  138* 262* 371 375* 385*
return_values            15            based           pointer                  level 2 packed packed unaligned dcl 9-5 set ref 228
                                                                                  244 248 249*
returns                  31(35)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 133 180
returns_star_extents     42(01)        based           bit(1)                   level 3 packed packed unaligned dcl 9-5 set ref 272*
root                      3            based           pointer                  level 2 packed packed unaligned dcl 13-9 set ref 178
                                                                                  239 293* 301*
rv                              000114 automatic       pointer                  dcl 13 set ref 137* 138 139 139 139 142* 143 145*
                                                                                  260* 262 263 264 264 264 264 264 264* 268* 270
s                               000102 automatic       pointer                  dcl 397 in procedure "set_star" set ref 399* 400 402
                                                                                  402
s                                      parameter       pointer                  dcl 382 in procedure "reset_ret_val" ref 380 384 385
                                                                                  386
s                               000100 automatic       pointer                  dcl 13 in procedure "declare" set ref 26* 27 28 30
                                                                                  35 36 38 40 42* 43 46* 51 53* 54 55 61* 65 65 65
                                                                                  65 65 70 70 70 70 70 74 78 78 78 80 80 80 80 80*
                                                                                  86* 90 90* 97 97 97 97* 103 105 105 105 107 109
                                                                                  114 114 116 133 133 133 133 137 141 141 143 148
                                                                                  153 154 161 164 168* 169 180 185 193 193 202 226
                                                                                  229 234 239 250 252 255 260 260 279 282 284 289
                                                                                  290 298 304 304 304* 313 315 319 319 323 325 325
                                                                                  331 332 342 342 342* 349 349 349 355 356 359 359
                                                                                  362 363 371 371 371 371* 375 376 415 416 416 418
                                                                                  424
semantic_translator$abort       000056 constant        entry                    external dcl 2-446 ref 168 185 187
semantic_translator$error       000060 constant        entry                    external dcl 2-450 ref 42 53 90
size                      3            based           fixed bin(9,0)           level 2 dcl 17-3 ref 107 114
son                      21            based           pointer                  level 2 packed packed unaligned dcl 8-3 ref 38 386
                                                                                  400
star_extents             33(06)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 80
                                                                                  139 143* 143 264 264 270 371 402* 402 402
statement                11            based           pointer                  level 2 in structure "label" packed packed unaligned
                                                                                  dcl 21-1 in procedure "declare" set ref 418 424*
statement                              based           structure                level 1 dcl 13-9 in procedure "declare"
statement                 2            based           pointer                  level 2 in structure "label_array_element" packed
                                                                                  packed unaligned dcl 22-1 in procedure "declare"
                                                                                  ref 419
storage_class            32(09)        based           structure                level 3 packed packed unaligned dcl 8-3
string                    4            based           char                     level 2 dcl 17-3 ref 107 114
structure                31            based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 51
                                                                                  54* 139 264 264 371
symbol                    3            based           pointer                  level 2 in structure "reference" packed packed
                                                                                  unaligned dcl 10-3 in procedure "declare" ref 291
symbol                                 based           structure                level 1 dcl 8-3 in procedure "declare"
symbol_node                            constant        bit(9)                   initial dcl 16-5 ref 28 164 187
temporary                32(17)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 376*
                                                                                  384*
token                     5            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 8-3 in procedure "declare" ref 107
                                                                                  114 161 169 239
token                                  based           structure                level 1 dcl 17-3 in procedure "declare"
type                                   based           bit(9)                   level 2 packed packed unaligned dcl 16-27 ref 28 164
                                                                                  187 286
units                     0(14)        based           fixed bin(3,0)           level 2 packed packed unaligned dcl 10-3 set ref
                                                                                  332* 356*
validate                        000024 constant        entry                    external dcl 1-225 ref 61
value                     3            based           fixed bin(17,0)          level 2 dcl 22-1 ref 419
variable                 31(32)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 133 153
vector                          000134 automatic       pointer                  dcl 412 set ref 416* 419 424
why_nonquick             42            based           structure                level 2 dcl 9-5
word_size                22            based           pointer                  level 2 packed packed unaligned dcl 8-3 set ref 282
                                                                                  284 289 290*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
a_format                               internal static bit(9)                   initial dcl 14-8
abs_fun                                internal static bit(9)                   initial dcl 14-8
acos_fun                               internal static bit(9)                   initial dcl 14-8
acosd_fun                              internal static bit(9)                   initial dcl 14-8
add                                    internal static bit(9)                   initial dcl 14-8
addbitno_fun                           internal static bit(9)                   initial dcl 14-8
addcharno_fun                          internal static bit(9)                   initial dcl 14-8
addr_fun                               internal static bit(9)                   initial dcl 14-8
addr_fun_bits                          internal static bit(9)                   initial dcl 14-8
addrel_fun                             internal static bit(9)                   initial dcl 14-8
adjust_count                    000000 constant        entry                    external dcl 2-20
alloc_semantics                 000000 constant        entry                    external dcl 1-7
alloc_semantics$init_only       000000 constant        entry                    external dcl 1-12
allocate_statement                     internal static bit(9)                   initial dcl 15-3
allocation_fun                         internal static bit(9)                   initial dcl 14-8
allot_based                            internal static bit(9)                   initial dcl 14-8
allot_ctl                              internal static bit(9)                   initial dcl 14-8
allot_var                              internal static bit(9)                   initial dcl 14-8
and                                    internal static bit(9)                   initial dcl 18-3
and_bits                               internal static bit(9)                   initial dcl 14-8
arg_desc_type                          internal static bit(36)                  initial dcl 23-71
array_node                             internal static bit(9)                   initial dcl 16-5
arrow                                  internal static bit(9)                   initial dcl 18-3
asin_fun                               internal static bit(9)                   initial dcl 14-8
asind_fun                              internal static bit(9)                   initial dcl 14-8
assign_by_name                         internal static bit(9)                   initial dcl 14-8
assign_round                           internal static bit(9)                   initial dcl 14-8
assign_size_ck                         internal static bit(9)                   initial dcl 14-8
assign_zero                            internal static bit(9)                   initial dcl 14-8
assignment                             internal static bit(9)                   initial dcl 18-3
asterisk                               internal static bit(9)                   initial dcl 18-3
atan_fun                               internal static bit(9)                   initial dcl 14-8
atand_fun                              internal static bit(9)                   initial dcl 14-8
b_format                               internal static bit(9)                   initial dcl 14-8
baseno_fun                             internal static bit(9)                   initial dcl 14-8
baseptr_fun                            internal static bit(9)                   initial dcl 14-8
begin_statement                        internal static bit(9)                   initial dcl 15-3
bin_integer                            internal static bit(9)                   initial dcl 18-3
binary_to_octal_string          000000 constant        entry                    external dcl 2-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 2-43
bindec                          000000 constant        entry                    external dcl 2-23
bindec$vs                       000000 constant        entry                    external dcl 2-28
binoct                          000000 constant        entry                    external dcl 2-33
bit_string                             internal static bit(9)                   initial dcl 18-3
bit_to_char                            internal static bit(9)                   initial dcl 14-8
bit_to_word                            internal static bit(9)                   initial dcl 14-8
bit_type                               internal static bit(36)                  initial dcl 23-71
bitno_fun                              internal static bit(9)                   initial dcl 14-8
bits_per_binary_exponent               internal static fixed bin(31,0)          initial dcl 23-5
bits_per_character                     internal static fixed bin(31,0)          initial dcl 23-5
bits_per_decimal_digit                 internal static fixed bin(31,0)          initial dcl 23-5
bits_per_digit                         internal static fixed bin(31,1)          initial dcl 23-69
bits_per_double                        internal static fixed bin(31,0)          initial dcl 23-5
bits_per_half                          internal static fixed bin(31,0)          initial dcl 23-5
bits_per_packed_ptr                    internal static fixed bin(31,0)          initial dcl 23-5
bits_per_word                          internal static fixed bin(31,0)          initial dcl 23-5
block_node                             internal static bit(9)                   initial dcl 16-5
bn_format                              internal static bit(9)                   initial dcl 14-8
bool_fun                               internal static bit(9)                   initial dcl 14-8
bound_ck                               internal static bit(9)                   initial dcl 14-8
bound_node                             internal static bit(9)                   initial dcl 16-5
builtin                         000000 constant        entry                    external dcl 1-17
builtin_type                           internal static bit(36)                  initial dcl 23-71
by_context                             internal static bit(3)                   initial dcl 19-5
by_declare                             internal static bit(3)                   initial dcl 19-5
by_explicit_context                    internal static bit(3)                   initial dcl 19-5
by_implication                         internal static bit(3)                   initial dcl 19-5
by_name_agg_node                       internal static bit(9)                   initial dcl 16-5
byte_fun                               internal static bit(9)                   initial dcl 14-8
c_format                               internal static bit(9)                   initial dcl 14-8
call_statement                         internal static bit(9)                   initial dcl 15-3
cat                                    internal static bit(9)                   initial dcl 18-3
cat_string                             internal static bit(9)                   initial dcl 14-8
ceil_fun                               internal static bit(9)                   initial dcl 14-8
char_string                            internal static bit(9)                   initial dcl 18-3
char_to_word                           internal static bit(9)                   initial dcl 14-8
char_type                              internal static bit(36)                  initial dcl 23-71
character_                             internal static fixed bin(3,0)           initial dcl 20-5
characters_per_double                  internal static fixed bin(31,0)          initial dcl 23-5
characters_per_half                    internal static fixed bin(31,0)          initial dcl 23-5
characters_per_word                    internal static fixed bin(31,0)          initial dcl 23-5
charno_fun                             internal static bit(9)                   initial dcl 14-8
check_star_extents              000000 constant        entry                    external dcl 1-27
clock_fun                              internal static bit(9)                   initial dcl 14-8
close_file                             internal static bit(9)                   initial dcl 14-8
close_statement                        internal static bit(9)                   initial dcl 15-3
codeptr_fun                            internal static bit(9)                   initial dcl 14-8
colon                                  internal static bit(9)                   initial dcl 18-3
column_format                          internal static bit(9)                   initial dcl 14-8
comma                                  internal static bit(9)                   initial dcl 18-3
compare_expression              000000 constant        entry                    external dcl 2-48
complex_fun                            internal static bit(9)                   initial dcl 14-8
complex_type                           internal static bit(36)                  initial dcl 23-71
conjg_fun                              internal static bit(9)                   initial dcl 14-8
constant_length                 000000 constant        entry                    external dcl 2-54
context_node                           internal static bit(9)                   initial dcl 16-5
context_processor               000000 constant        entry                    external dcl 1-38
continue_statement                     internal static bit(9)                   initial dcl 15-3
convert                         000000 constant        entry                    external dcl 2-60
convert$from_builtin            000000 constant        entry                    external dcl 2-72
convert$to_integer              000000 constant        entry                    external dcl 2-66
convert$to_target               000000 constant        entry                    external dcl 2-88
convert$to_target_fb            000000 constant        entry                    external dcl 2-82
convert$validate                000000 constant        entry                    external dcl 2-78
copy_expression$copy_sons       000000 constant        entry                    external dcl 2-99
copy_string                            internal static bit(9)                   initial dcl 14-8
copy_unique_expression          000000 constant        entry                    external dcl 2-103
copy_words                             internal static bit(9)                   initial dcl 14-8
cos_fun                                internal static bit(9)                   initial dcl 14-8
cosd_fun                               internal static bit(9)                   initial dcl 14-8
create_array                    000000 constant        entry                    external dcl 2-108
create_block                    000000 constant        entry                    external dcl 2-112
create_bound                    000000 constant        entry                    external dcl 2-118
create_context                  000000 constant        entry                    external dcl 2-122
create_cross_reference          000000 constant        entry                    external dcl 2-128
create_default                  000000 constant        entry                    external dcl 2-132
create_identifier               000000 constant        entry                    external dcl 2-136
create_label                    000000 constant        entry                    external dcl 2-140
create_reference                000000 constant        entry                    external dcl 2-158
create_statement                000000 constant        entry                    external dcl 2-163
create_storage                  000000 constant        entry                    external dcl 2-179
create_symbol                   000000 constant        entry                    external dcl 2-184
create_token                    000000 constant        entry                    external dcl 2-191
create_token$init_hash_table    000000 constant        entry                    external dcl 2-197
create_token$protected          000000 constant        entry                    external dcl 2-199
cross_reference_node                   internal static bit(9)                   initial dcl 16-5
dec_integer                            internal static bit(9)                   initial dcl 18-3
dec_integer_type                       internal static bit(36)                  initial dcl 23-71
decbin                          000000 constant        entry                    external dcl 2-206
declare_constant                000000 constant        entry                    external dcl 2-211
declare_constant$bit            000000 constant        entry                    external dcl 2-219
declare_constant$desc           000000 constant        entry                    external dcl 2-229
declare_descriptor$ctl          000000 constant        entry                    external dcl 2-249
declare_picture                 000000 constant        entry                    external dcl 2-274
declare_picture_temp            000000 constant        entry                    external dcl 2-279
declare_statement                      internal static bit(9)                   initial dcl 15-3
declare_temporary               000000 constant        entry                    external dcl 2-292
decode_node_id                  000000 constant        entry                    external dcl 2-300
decode_source_id                000000 constant        entry                    external dcl 2-306
default_area_size                      internal static fixed bin(31,0)          initial dcl 23-5
default_fix_bin_p                      internal static fixed bin(31,0)          initial dcl 23-5
default_fix_dec_p                      internal static fixed bin(31,0)          initial dcl 23-5
default_flt_bin_p                      internal static fixed bin(31,0)          initial dcl 23-5
default_flt_dec_p                      internal static fixed bin(31,0)          initial dcl 23-5
default_node                           internal static bit(9)                   initial dcl 16-5
default_statement                      internal static bit(9)                   initial dcl 15-3
defined_reference               000000 constant        entry                    external dcl 1-47
delete_file                            internal static bit(9)                   initial dcl 14-8
delete_statement                       internal static bit(9)                   initial dcl 15-3
desc_size                              internal static bit(9)                   initial dcl 14-8
digit_                                 internal static fixed bin(3,0)           initial dcl 20-5
digit_to_bit                           internal static bit(9)                   initial dcl 14-8
display_statement                      internal static bit(9)                   initial dcl 15-3
div                                    internal static bit(9)                   initial dcl 14-8
do_fun                                 internal static bit(9)                   initial dcl 14-8
do_semantics                    000000 constant        entry                    external dcl 1-57
do_spec                                internal static bit(9)                   initial dcl 14-8
do_statement                           internal static bit(9)                   initial dcl 15-3
e_format                               internal static bit(9)                   initial dcl 14-8
else_clause                            internal static bit(9)                   initial dcl 15-3
empty_area                             internal static bit(9)                   initial dcl 14-8
enable_on                              internal static bit(9)                   initial dcl 14-8
end_statement                          internal static bit(9)                   initial dcl 15-3
entry_statement                        internal static bit(9)                   initial dcl 15-3
entry_var_type                         internal static bit(36)                  initial dcl 23-71
environmentptr_fun                     internal static bit(9)                   initial dcl 14-8
eq                                     internal static bit(9)                   initial dcl 18-3
equal                                  internal static bit(9)                   initial dcl 14-8
error                           000000 constant        entry                    external dcl 2-314
error$omit_text                 000000 constant        entry                    external dcl 2-319
error_                          000000 constant        entry                    external dcl 2-324
error_$finish                   000000 constant        entry                    external dcl 2-343
error_$initialize_error         000000 constant        entry                    external dcl 2-341
error_$no_text                  000000 constant        entry                    external dcl 2-334
ex_prologue                            internal static bit(9)                   initial dcl 14-8
exit_statement                         internal static bit(9)                   initial dcl 15-3
exp                                    internal static bit(9)                   initial dcl 14-8
exp_fun                                internal static bit(9)                   initial dcl 14-8
expand_assign                   000000 constant        entry                    external dcl 1-62
expand_by_name                  000000 constant        entry                    external dcl 1-71
expand_infix                    000000 constant        entry                    external dcl 1-76
expand_prefix                   000000 constant        entry                    external dcl 1-89
expand_primitive                000000 constant        entry                    external dcl 1-97
expon                                  internal static bit(9)                   initial dcl 18-3
expression_semantics            000000 constant        entry                    external dcl 1-105
f_format                               internal static bit(9)                   initial dcl 14-8
fill_refer                      000000 constant        entry                    external dcl 1-113
fixed_bin                              internal static bit(9)                   initial dcl 18-3
fixed_dec                              internal static bit(9)                   initial dcl 18-3
float_bin                              internal static bit(9)                   initial dcl 18-3
float_dec                              internal static bit(9)                   initial dcl 18-3
floor_fun                              internal static bit(9)                   initial dcl 14-8
format_statement                       internal static bit(9)                   initial dcl 15-3
format_value_node                      internal static bit(9)                   initial dcl 16-5
fortran_read                           internal static bit(9)                   initial dcl 14-8
fortran_write                          internal static bit(9)                   initial dcl 14-8
free_based                             internal static bit(9)                   initial dcl 14-8
free_ctl                               internal static bit(9)                   initial dcl 14-8
free_statement                         internal static bit(9)                   initial dcl 15-3
free_var                               internal static bit(9)                   initial dcl 14-8
ftn_file_manip                         internal static bit(9)                   initial dcl 14-8
ftn_trans_loop                         internal static bit(9)                   initial dcl 14-8
function                        000000 constant        entry                    external dcl 1-125
ge                                     internal static bit(9)                   initial dcl 18-3
generic_selector                000000 constant        entry                    external dcl 1-134
get_array_size                  000000 constant        entry                    external dcl 2-348
get_data_trans                         internal static bit(9)                   initial dcl 14-8
get_edit_trans                         internal static bit(9)                   initial dcl 14-8
get_file                               internal static bit(9)                   initial dcl 14-8
get_list_trans                         internal static bit(9)                   initial dcl 14-8
get_statement                          internal static bit(9)                   initial dcl 15-3
get_string                             internal static bit(9)                   initial dcl 14-8
goto_statement                         internal static bit(9)                   initial dcl 15-3
greater_or_equal                       internal static bit(9)                   initial dcl 14-8
greater_than                           internal static bit(9)                   initial dcl 14-8
gt                                     internal static bit(9)                   initial dcl 18-3
half_                                  internal static fixed bin(3,0)           initial dcl 20-5
half_to_word                           internal static bit(9)                   initial dcl 14-8
i_bin_integer                          internal static bit(9)                   initial dcl 18-3
i_dec_integer                          internal static bit(9)                   initial dcl 18-3
i_fixed_bin                            internal static bit(9)                   initial dcl 18-3
i_fixed_dec                            internal static bit(9)                   initial dcl 18-3
i_float_bin                            internal static bit(9)                   initial dcl 18-3
i_float_dec                            internal static bit(9)                   initial dcl 18-3
identifier                             internal static bit(9)                   initial dcl 18-3
if_statement                           internal static bit(9)                   initial dcl 15-3
imag_fun                               internal static bit(9)                   initial dcl 14-8
index_after_fun                        internal static bit(9)                   initial dcl 14-8
index_before_fun                       internal static bit(9)                   initial dcl 14-8
index_fun                              internal static bit(9)                   initial dcl 14-8
index_rev_fun                          internal static bit(9)                   initial dcl 14-8
integer_type                           internal static bit(36)                  initial dcl 23-71
io_data_list_semantics          000000 constant        entry                    external dcl 1-143
io_data_list_semantics$format_list_semantics
                                000000 constant        entry                    external dcl 1-120
io_semantics                    000000 constant        entry                    external dcl 1-148
is_arith_constant                      internal static bit(9)                   initial dcl 18-47
is_arithmetic_constant                 internal static bit(9)                   initial dcl 18-47
is_constant                            internal static bit(9)                   initial dcl 18-47
is_decimal_constant                    internal static bit(9)                   initial dcl 18-47
is_delimiter                           internal static bit(9)                   initial dcl 18-47
is_float_constant                      internal static bit(9)                   initial dcl 18-47
is_identifier                          internal static bit(9)                   initial dcl 18-47
is_imaginary_constant                  internal static bit(9)                   initial dcl 18-47
is_integral_constant                   internal static bit(9)                   initial dcl 18-47
is_isub                                internal static bit(9)                   initial dcl 18-47
isub                                   internal static bit(9)                   initial dcl 18-3
join                                   internal static bit(9)                   initial dcl 14-8
jump                                   internal static bit(9)                   initial dcl 14-8
jump_false                             internal static bit(9)                   initial dcl 14-8
jump_if_eq                             internal static bit(9)                   initial dcl 14-8
jump_if_ge                             internal static bit(9)                   initial dcl 14-8
jump_if_gt                             internal static bit(9)                   initial dcl 14-8
jump_if_le                             internal static bit(9)                   initial dcl 14-8
jump_if_lt                             internal static bit(9)                   initial dcl 14-8
jump_if_ne                             internal static bit(9)                   initial dcl 14-8
jump_true                              internal static bit(9)                   initial dcl 14-8
l_parn                                 internal static bit(9)                   initial dcl 14-8
label_array_element_node               internal static bit(9)                   initial dcl 16-5
label_node                             internal static bit(9)                   initial dcl 16-5
le                                     internal static bit(9)                   initial dcl 18-3
left_parn                              internal static bit(9)                   initial dcl 18-3
length_fun                             internal static bit(9)                   initial dcl 14-8
less_or_equal                          internal static bit(9)                   initial dcl 14-8
less_than                              internal static bit(9)                   initial dcl 14-8
line_format                            internal static bit(9)                   initial dcl 14-8
list_node                              internal static bit(9)                   initial dcl 16-5
local_label_var_type                   internal static bit(36)                  initial dcl 23-71
locate_file                            internal static bit(9)                   initial dcl 14-8
locate_statement                       internal static bit(9)                   initial dcl 15-3
lock_file                              internal static bit(9)                   initial dcl 14-8
lock_fun                               internal static bit(9)                   initial dcl 14-8
lock_statement                         internal static bit(9)                   initial dcl 15-3
log10_fun                              internal static bit(9)                   initial dcl 14-8
log2_fun                               internal static bit(9)                   initial dcl 14-8
log_fun                                internal static bit(9)                   initial dcl 14-8
loop                                   internal static bit(9)                   initial dcl 14-8
lt                                     internal static bit(9)                   initial dcl 18-3
machine_state_node                     internal static bit(9)                   initial dcl 16-5
make_desc                              internal static bit(9)                   initial dcl 14-8
make_non_quick                  000000 constant        entry                    external dcl 1-162
match_arguments                 000000 constant        entry                    external dcl 1-166
max_area_size                          internal static fixed bin(31,0)          initial dcl 23-5
max_bit_string                         internal static fixed bin(31,0)          initial dcl 23-5
max_bit_string_constant                internal static fixed bin(31,0)          initial dcl 23-5
max_block_number                       internal static fixed bin(17,0)          initial dcl 9-74
max_char_string                        internal static fixed bin(31,0)          initial dcl 23-5
max_char_string_constant               internal static fixed bin(31,0)          initial dcl 23-5
max_fun                                internal static bit(9)                   initial dcl 14-8
max_identifier_length                  internal static fixed bin(31,0)          initial dcl 23-5
max_index_register_value               internal static fixed bin(31,0)          initial dcl 23-5
max_length_precision                   internal static fixed bin(31,0)          initial dcl 23-5
max_list_elements                      internal static fixed bin(17,0)          initial dcl 11-12
max_number_of_dimensions               internal static fixed bin(31,0)          initial dcl 23-5
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 12-15
max_p_bin_or_dec                       internal static fixed bin(31,0)          initial dcl 23-5
max_p_dec                              internal static fixed bin(31,0)          initial dcl 23-5
max_p_fix_bin_1                        internal static fixed bin(31,0)          initial dcl 23-5
max_p_fix_bin_2                        internal static fixed bin(31,0)          initial dcl 23-5
max_p_flt_bin_1                        internal static fixed bin(31,0)          initial dcl 23-5
max_p_flt_bin_2                        internal static fixed bin(31,0)          initial dcl 23-5
max_scale                              internal static fixed bin(31,0)          initial dcl 23-5
max_signed_index_register_value        internal static fixed bin(31,0)          initial dcl 23-5
max_signed_xreg_precision              internal static fixed bin(31,0)          initial dcl 23-5
max_uns_xreg_precision                 internal static fixed bin(31,0)          initial dcl 23-5
merge_attributes                000000 constant        entry                    external dcl 2-355
min_area_size                          internal static fixed bin(31,0)          initial dcl 23-5
min_fun                                internal static bit(9)                   initial dcl 14-8
min_scale                              internal static fixed bin(31,0)          initial dcl 23-5
minus                                  internal static bit(9)                   initial dcl 18-3
mod2_                                  internal static fixed bin(3,0)           initial dcl 20-5
mod4_                                  internal static fixed bin(3,0)           initial dcl 20-5
mod_bit                                internal static bit(9)                   initial dcl 14-8
mod_byte                               internal static bit(9)                   initial dcl 14-8
mod_fun                                internal static bit(9)                   initial dcl 14-8
mod_half                               internal static bit(9)                   initial dcl 14-8
mod_word                               internal static bit(9)                   initial dcl 14-8
mult                                   internal static bit(9)                   initial dcl 14-8
ne                                     internal static bit(9)                   initial dcl 18-3
negate                                 internal static bit(9)                   initial dcl 14-8
ngt                                    internal static bit(9)                   initial dcl 18-3
nlt                                    internal static bit(9)                   initial dcl 18-3
no_token                               internal static bit(9)                   initial dcl 18-3
nop                                    internal static bit(9)                   initial dcl 14-8
not                                    internal static bit(9)                   initial dcl 18-3
not_bits                               internal static bit(9)                   initial dcl 14-8
not_equal                              internal static bit(9)                   initial dcl 14-8
null_statement                         internal static bit(9)                   initial dcl 15-3
off_fun                                internal static bit(9)                   initial dcl 14-8
offset_adder                    000000 constant        entry                    external dcl 1-172
on_statement                           internal static bit(9)                   initial dcl 15-3
open_file                              internal static bit(9)                   initial dcl 14-8
open_statement                         internal static bit(9)                   initial dcl 15-3
operator_semantics              000000 constant        entry                    external dcl 1-184
optimizer                       000000 constant        entry                    external dcl 2-361
or                                     internal static bit(9)                   initial dcl 18-3
or_bits                                internal static bit(9)                   initial dcl 14-8
pack                                   internal static bit(9)                   initial dcl 14-8
packed_digits_per_character            internal static fixed bin(31,0)          initial dcl 23-5
page_format                            internal static bit(9)                   initial dcl 14-8
param_desc_ptr                         internal static bit(9)                   initial dcl 14-8
parse_error                     000000 constant        entry                    external dcl 2-364
parse_error$no_text             000000 constant        entry                    external dcl 2-368
percent                                internal static bit(9)                   initial dcl 18-3
period                                 internal static bit(9)                   initial dcl 18-3
picture_format                         internal static bit(9)                   initial dcl 14-8
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 2-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 2-372
pl1_mod_fun                            internal static bit(9)                   initial dcl 14-8
pl1_print$for_lex               000000 constant        entry                    external dcl 2-418
pl1_print$non_varying           000000 constant        entry                    external dcl 2-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 2-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 2-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 2-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 2-414
pl1_print$varying               000000 constant        entry                    external dcl 2-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 2-395
plus                                   internal static bit(9)                   initial dcl 18-3
pointer_type                           internal static bit(36)                  initial dcl 23-71
prefix_plus                            internal static bit(9)                   initial dcl 14-8
procedure_statement                    internal static bit(9)                   initial dcl 15-3
propagate_bit                   000000 constant        entry                    external dcl 1-192
ptr_fun                                internal static bit(9)                   initial dcl 14-8
put_control                            internal static bit(9)                   initial dcl 14-8
put_data_trans                         internal static bit(9)                   initial dcl 14-8
put_edit_trans                         internal static bit(9)                   initial dcl 14-8
put_field                              internal static bit(9)                   initial dcl 14-8
put_field_chk                          internal static bit(9)                   initial dcl 14-8
put_file                               internal static bit(9)                   initial dcl 14-8
put_list_trans                         internal static bit(9)                   initial dcl 14-8
put_statement                          internal static bit(9)                   initial dcl 15-3
put_string                             internal static bit(9)                   initial dcl 14-8
r_format                               internal static bit(9)                   initial dcl 14-8
r_parn                                 internal static bit(9)                   initial dcl 14-8
range_ck                               internal static bit(9)                   initial dcl 14-8
rank_fun                               internal static bit(9)                   initial dcl 14-8
read_file                              internal static bit(9)                   initial dcl 14-8
read_statement                         internal static bit(9)                   initial dcl 15-3
real_fun                               internal static bit(9)                   initial dcl 14-8
real_type                              internal static bit(36)                  initial dcl 23-71
record_io                              internal static bit(9)                   initial dcl 14-8
refer                                  internal static bit(9)                   initial dcl 14-8
refer_extent                    000000 constant        entry                    external dcl 2-426
reference_node                         internal static bit(9)                   initial dcl 16-5
rel_fun                                internal static bit(9)                   initial dcl 14-8
repeat_fun                             internal static bit(9)                   initial dcl 14-8
reserve$clear                   000000 constant        entry                    external dcl 2-430
reserve$declare_lib             000000 constant        entry                    external dcl 2-434
reserve$read_lib                000000 constant        entry                    external dcl 2-439
return_bits                            internal static bit(9)                   initial dcl 14-8
return_statement                       internal static bit(9)                   initial dcl 15-3
return_string                          internal static bit(9)                   initial dcl 14-8
return_value                           internal static bit(9)                   initial dcl 14-8
return_words                           internal static bit(9)                   initial dcl 14-8
reverse_fun                            internal static bit(9)                   initial dcl 14-8
revert_on                              internal static bit(9)                   initial dcl 14-8
revert_statement                       internal static bit(9)                   initial dcl 15-3
rewrite_file                           internal static bit(9)                   initial dcl 14-8
rewrite_statement                      internal static bit(9)                   initial dcl 15-3
right_parn                             internal static bit(9)                   initial dcl 18-3
round_fun                              internal static bit(9)                   initial dcl 14-8
search_fun                             internal static bit(9)                   initial dcl 14-8
search_rev_fun                         internal static bit(9)                   initial dcl 14-8
segno_fun                              internal static bit(9)                   initial dcl 14-8
semantic_translator             000000 constant        entry                    external dcl 2-444
semantic_translator$call_es     000000 constant        entry                    external dcl 1-196
semi_colon                             internal static bit(9)                   initial dcl 18-3
setbitno_fun                           internal static bit(9)                   initial dcl 14-8
setcharno_fun                          internal static bit(9)                   initial dcl 14-8
sf_par_node                            internal static bit(9)                   initial dcl 16-5
share_expression                000000 constant        entry                    external dcl 2-454
sign_fun                               internal static bit(9)                   initial dcl 14-8
signal_on                              internal static bit(9)                   initial dcl 14-8
signal_statement                       internal static bit(9)                   initial dcl 15-3
simplify_expression             000000 constant        entry                    external dcl 1-205
simplify_offset                 000000 constant        entry                    external dcl 1-212
sin_fun                                internal static bit(9)                   initial dcl 14-8
sind_fun                               internal static bit(9)                   initial dcl 14-8
skip_format                            internal static bit(9)                   initial dcl 14-8
slash                                  internal static bit(9)                   initial dcl 18-3
source_node                            internal static bit(9)                   initial dcl 16-5
sqrt_fun                               internal static bit(9)                   initial dcl 14-8
stack_ptr                              internal static bit(9)                   initial dcl 14-8
stackbaseptr_fun                       internal static bit(9)                   initial dcl 14-8
stackframeptr_fun                      internal static bit(9)                   initial dcl 14-8
stacq_fun                              internal static bit(9)                   initial dcl 14-8
statement_node                         internal static bit(9)                   initial dcl 16-5
std_arg_list                           internal static bit(9)                   initial dcl 14-8
std_call                               internal static bit(9)                   initial dcl 14-8
std_entry                              internal static bit(9)                   initial dcl 14-8
std_return                             internal static bit(9)                   initial dcl 14-8
stop                                   internal static bit(9)                   initial dcl 14-8
stop_statement                         internal static bit(9)                   initial dcl 15-3
storage_block_type                     internal static bit(36)                  initial dcl 23-71
stream_prep                            internal static bit(9)                   initial dcl 14-8
string                                                 builtin function         dcl 24
sub                                    internal static bit(9)                   initial dcl 14-8
subscripter                     000000 constant        entry                    external dcl 1-216
substr                                                 builtin function         dcl 24
system_on_unit                         internal static bit(9)                   initial dcl 15-3
tan_fun                                internal static bit(9)                   initial dcl 14-8
tand_fun                               internal static bit(9)                   initial dcl 14-8
temporary_node                         internal static bit(9)                   initial dcl 16-5
terminate_trans                        internal static bit(9)                   initial dcl 14-8
token_node                             internal static bit(9)                   initial dcl 16-5
token_to_binary                 000000 constant        entry                    external dcl 2-459
translate_fun                          internal static bit(9)                   initial dcl 14-8
trunc_fun                              internal static bit(9)                   initial dcl 14-8
unknown_statement                      internal static bit(9)                   initial dcl 15-3
unlock_file                            internal static bit(9)                   initial dcl 14-8
unlock_statement                       internal static bit(9)                   initial dcl 15-3
unpack                                 internal static bit(9)                   initial dcl 14-8
vclock_fun                             internal static bit(9)                   initial dcl 14-8
verify_fun                             internal static bit(9)                   initial dcl 14-8
verify_ltrim_fun                       internal static bit(9)                   initial dcl 14-8
verify_rev_fun                         internal static bit(9)                   initial dcl 14-8
verify_rtrim_fun                       internal static bit(9)                   initial dcl 14-8
wait_statement                         internal static bit(9)                   initial dcl 15-3
word_                                  internal static fixed bin(3,0)           initial dcl 20-5
word_to_mod2                           internal static bit(9)                   initial dcl 14-8
word_to_mod4                           internal static bit(9)                   initial dcl 14-8
word_to_mod8                           internal static bit(9)                   initial dcl 14-8
wordno_fun                             internal static bit(9)                   initial dcl 14-8
words_per_condition_var                internal static fixed bin(31,0)          initial dcl 23-5
words_per_entry_var                    internal static fixed bin(31,0)          initial dcl 23-5
words_per_file_var                     internal static fixed bin(31,0)          initial dcl 23-5
words_per_fix_bin_1                    internal static fixed bin(31,0)          initial dcl 23-5
words_per_fix_bin_2                    internal static fixed bin(31,0)          initial dcl 23-5
words_per_flt_bin_1                    internal static fixed bin(31,0)          initial dcl 23-5
words_per_flt_bin_2                    internal static fixed bin(31,0)          initial dcl 23-5
words_per_format                       internal static fixed bin(31,0)          initial dcl 23-5
words_per_label_var                    internal static fixed bin(31,0)          initial dcl 23-5
words_per_offset                       internal static fixed bin(31,0)          initial dcl 23-5
words_per_packed_pointer               internal static fixed bin(31,0)          initial dcl 23-5
words_per_pointer                      internal static fixed bin(31,0)          initial dcl 23-5
words_per_varying_string_header        internal static fixed bin(31,0)          initial dcl 23-5
write_file                             internal static bit(9)                   initial dcl 14-8
write_statement                        internal static bit(9)                   initial dcl 15-3
x_format                               internal static bit(9)                   initial dcl 14-8
xor_bits                               internal static bit(9)                   initial dcl 14-8

NAMES DECLARED BY EXPLICIT CONTEXT.
allocate                        001536 constant        label                    dcl 279 ref 153 155 229 252
declare                         000121 constant        entry                    external dcl 11
declare_label_array             002344 constant        entry                    internal dcl 408 ref 30
exit                            002202 constant        label                    dcl 359 ref 48 306
loop_exit                       000574 constant        label                    dcl 116 ref 110
make_descr                      001443 constant        label                    dcl 260 ref 240
reset_ret_val                   002244 constant        entry                    internal dcl 380 ref 371 387
set_star                        002303 constant        entry                    internal dcl 393 ref 264 401

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      2722        3004    2440        2732
Length      3674    2440        62         654     262           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
declare                             152 external procedure  is an external procedure.  
reset_ret_val                        72 internal procedure  calls itself recursively.  
set_star                             74 internal procedure  calls itself recursively.  
declare_label_array                     internal procedure  shares stack frame of external procedure declare.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
declare                  000100 s                           declare
                         000102 b                           declare
                         000104 d                           declare
                         000106 p                           declare
                         000110 q                           declare
                         000112 p1                          declare
                         000114 rv                          declare
                         000116 i                           declare
                         000117 n                           declare
                         000120 cdesc                       declare
                         000130 lae                         declare_label_array
                         000132 next                        declare_label_array
                         000134 vector                      declare_label_array
                         000136 inc                         declare_label_array
reset_ret_val            000100 d                           reset_ret_val
set_star                 000100 d                           set_star
                         000102 s                           set_star

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_char_temp     unpk_to_pk          call_ext_out_desc   call_ext_out        call_int_this       call_int_other
return_mac          shorten_stack       ext_entry           int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
compare_declaration           copy_expression               create_list                   create_operator
create_statement$prologue     declare                       declare_constant$char         declare_constant$integer
declare_descriptor            declare_descriptor$param      declare_integer               declare_pointer
declare_structure             expand_initial                free_node                     get_size
lookup                        semantic_translator$abort     semantic_translator$error     validate

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pl1_stat_$eis_mode




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000116        26 000126        27 000132        28 000136        30 000142        32 000146        35 000147
     36 000153        38 000156        40 000161        42 000166        43 000200        46 000205        48 000214
     51 000215        53 000220        54 000232        55 000235        61 000241        65 000250        70 000256
     74 000304        78 000306        80 000324        86 000363        90 000372        97 000411       103 000452
    105 000456       106 000464       107 000471       109 000502       110 000536       112 000540       114 000542
    115 000573       116 000574       133 000600       137 000614       138 000616       139 000620       141 000626
    142 000642       143 000651       144 000660       145 000661       148 000670       149 000700       150 000704
    151 000716       153 000722       154 000726       155 000730       161 000734       162 000737       163 000741
    164 000746       168 000771       169 001004       171 001016       174 001022       175 001024       176 001026
    178 001027       179 001032       180 001036       181 001044       183 001046       184 001055       185 001070
    187 001144       188 001163       189 001166       190 001176       192 001202       193 001204       194 001211
    195 001217       196 001220       202 001222       203 001232       204 001250       205 001253       206 001255
    207 001264       224 001270       226 001271       228 001274       229 001302       232 001312       234 001313
    236 001342       237 001345       239 001353       240 001361       242 001362       244 001366       247 001411
    248 001424       249 001430       250 001431       252 001434       255 001437       260 001443       262 001461
    263 001464       264 001466       267 001515       268 001516       270 001525       272 001531       273 001534
    279 001536       282 001542       284 001545       286 001547       288 001553       289 001570       290 001574
    291 001613       292 001617       293 001645       296 001650       297 001665       298 001670       300 001707
    301 001735       304 001740       306 001762       313 001763       315 001766       318 002003       319 002020
    320 002040       323 002042       325 002046       329 002061       330 002075       331 002100       332 002103
    335 002111       342 002112       349 002136       354 002154       355 002170       356 002174       359 002202
    362 002211       363 002214       371 002216       375 002236       376 002240       446 002242       380 002243
    384 002251       385 002256       386 002260       387 002266       388 002275       390 002301       393 002302
    399 002310       400 002314       401 002322       402 002331       403 002340       405 002343       408 002344
    415 002345       416 002354       418 002373       419 002402       420 002410       421 002412       422 002421
    424 002424       426 002427


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
