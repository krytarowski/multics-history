	COMPILATION LISTING OF SEGMENT pa_search_list
	Compiled by: Multics PL/I Compiler, Release 31a, of October 12, 1988
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 02/27/89  1051.8 mst Mon
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1989                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        6*        *                                                         *
        7*        *********************************************************** */
        8 
        9 
       10 /****^  HISTORY COMMENTS:
       11*  1) change(89-01-17,TLNguyen), approve(89-01-27,MCR8052),
       12*     audit(89-02-06,Parisek), install(89-02-27,MR12.3-1015):
       13*     a. Replace error_table_$programming_error with error_table_$fatal_error
       14*        when calling sub_err_ to report a null area pointer error.
       15*     b. Assign initial values for automatic variables in the internal
       16*        procedure, INITIALIZATION.  Remove the reference to
       17*        get_temp_segment_.
       18*                                                   END HISTORY COMMENTS */
       19 
       20 
       21 /* format: style2,ind3 */
       22 pa_search_list:
       23    proc (p_command_name, p_caller_area_ptr, p_array_ptr, p_code);
       24 
       25 /* DESCRIPTION:
       26*
       27*          This subroutine searches the databases in the process_arguments
       28*     search list for either an argument processing definition or a default
       29*     linear form.
       30**/
       31 
       32 /* HISTORY:
       33*
       34*Written by Lindsey Spratt, 06/27/83.
       35*Modified:
       36*06/28/83 by Lindsey L. Spratt:  Fixed to not report errors encountered while
       37*            searching the list until the list just searched passes the change
       38*            count test.  Also fixed to check the change count before using the
       39*            stored sl_info.
       40*07/01/83 by Lindsey L. Spratt:  Fixed to look for default linear form strings,
       41*            rather than result pva's.  Also, taught to look in value segments
       42*            (when that's specified in the search list).
       43*07/07/83 by Lindsey L. Spratt:  Fixed to set the sl_info_p pointer to the
       44*            current value of search_list_info_ptr.
       45*07/08/83 by Lindsey L. Spratt:  Fixed to not report errors of
       46*            vd_error_$no_vector or error_table_$noentry when searching for a
       47*            default linear form.
       48*07/24/83 by Lindsey L. Spratt:  Converted to retrieve a pva_string definition
       49*            from a value seg, rather than a print_vector_array definition from
       50*            a vector_db.
       51*08/03/83 by S.Krupp to distinguish between internal work area and caller
       52*            provided area to fix bad search_list_info_ptr bug.
       53*	  The sl_info structure is now allocated in the internal work area.
       54*	  Also, to change the name of the search list to mtape_arguments
       55*	  and fix assorted bugs.
       56**/
       57 
       58 /* START OF DECLARATIONS */
       59 /* Parameter */
       60 
       61       dcl	    p_command_name	       char (*) varying;
       62       dcl	    p_caller_area_ptr      ptr;
       63       dcl	    p_array_ptr	       ptr;
       64       dcl	    p_default_linear_form  char (*) varying;
       65       dcl	    p_code	       fixed bin (35);
       66 
       67 /* Automatic */
       68 
       69       dcl	    (retry_count, path_idx)
       70 			       fixed bin;
       71       dcl	    definition_value_name  char (256) varying;
       72       dcl	    dir_name	       char (256);
       73       dcl	    entry_name	       char (128);
       74       dcl	    default_linear_form_value_name
       75 			       char (128) varying;
       76       dcl	    get_definition	       bit (1) aligned;
       77       dcl	    work_area_ptr	       ptr;
       78       dcl	    caller_area_ptr	       ptr;
       79 
       80 /* Based */
       81 
       82       dcl	    based_real_fix_bin_2u  fixed bin (71) unaligned based;
       83 
       84 /* Builtin */
       85 
       86       dcl	    (addr, null, string)   builtin;
       87 
       88 /* Controlled */
       89 /* Constant */
       90 
       91       dcl	    myname	       init ("pa_get_definition") char (64) varying internal static options (constant);
       92 
       93       dcl	    PROCESS_ARGUMENTS_SEARCH_LIST_NAME
       94 			       init ("mtape_arguments") char (64) varying internal static options (constant);
       95       dcl	    VALUE_SUFFIX	       init ("value") char (5) internal static options (constant);
       96       dcl	    PERMANENT_VALUE	       init ("01"b) bit (2) aligned internal static options (constant);
       97       dcl	    (
       98 	    RETRY_LIMIT	       init (5),
       99 	    BYTES_PER_WORD	       init (4)
      100 	    )		       fixed bin internal static options (constant);
      101 
      102 /* Entry */
      103 
      104       dcl	    get_system_free_area_  entry () returns (ptr);
      105       dcl	    value_$get_data	       entry (ptr, bit (36) aligned, char (*), ptr, ptr, fixed bin (18), fixed bin (35));
      106       dcl	    sub_err_	       entry options (variable);
      107       dcl	    expand_pathname_$add_suffix
      108 			       entry (char (*), char (*), char (*), char (*), fixed bin (35));
      109       dcl	    search_paths_$get      entry (char (*), bit (36), char (*), ptr, ptr, fixed bin, ptr, fixed bin (35));
      110       dcl	    initiate_file_	       entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
      111       dcl	    terminate_file_	       entry (ptr, fixed bin (24), bit (*), fixed bin (35));
      112       dcl	    ioa_$rsnnl	       entry() options(variable);
      113 
      114 /* External */
      115       dcl	    (
      116 	    error_table_$asynch_change,
      117 	    error_table_$noentry,
      118 	    error_table_$fatal_error,
      119 	    error_table_$oldnamerr
      120 	    )		       fixed bin (35) ext;
      121 
      122 /* Internal */
      123 
      124       dcl	    (search_list_info_ptr)
      125 			       ptr init (null) internal static;
      126 
      127 
      128 /* END OF DECLARATIONS */
      129 
      130 get_definition:
      131    entry (p_command_name, p_caller_area_ptr, p_array_ptr, p_code);
      132 
      133       call INITIALIZATION ();
      134 
      135       caller_area_ptr = p_caller_area_ptr;
      136       get_definition = "1"b;
      137       goto JOIN;
      138 
      139 get_default_linear_form:
      140    entry (p_command_name, p_default_linear_form, p_code);
      141 
      142       call INITIALIZATION ();
      143 
      144       get_definition = "0"b;
      145 JOIN:
      146       work_area_ptr = get_system_free_area_ ();
      147 
      148       if (caller_area_ptr = null) & (get_definition)
      149       then call sub_err_ (error_table_$fatal_error, myname, "s", null, 0, "The area_ptr given to this module must be non-null.");
      150 
      151       p_code = 0;
      152       p_array_ptr = null;
      153 
      154       default_linear_form_value_name = DEFAULT_LINEAR_FORM_PREFIX || "." || p_command_name;
      155       definition_value_name = DEFINITION_PREFIX || "." || p_command_name;
      156 
      157       if search_list_info_ptr = null
      158       then
      159          do;
      160 	  call SETUP_SEARCH_LIST (search_list_info_ptr, p_code);
      161 	  if p_code ^= 0
      162 	  then call ERROR_RETURN ();
      163          end;
      164 
      165       sl_info_p = search_list_info_ptr;
      166       if sl_info.change_index ^= sl_info.change_index_p -> based_real_fix_bin_2u
      167       then
      168          do;
      169 	  call SETUP_SEARCH_LIST (search_list_info_ptr, p_code);
      170 	  if p_code ^= 0
      171 	  then call ERROR_RETURN ();
      172 	  sl_info_p = search_list_info_ptr;
      173          end;
      174       call SEARCH_LIST;
      175 
      176 RETRY_SEARCH:
      177       do while (retry_count <= RETRY_LIMIT & sl_info.change_index ^= sl_info.change_index_p -> based_real_fix_bin_2u);
      178 
      179          call SETUP_SEARCH_LIST (search_list_info_ptr, p_code);
      180          if p_code ^= 0
      181          then call ERROR_RETURN ();
      182          sl_info_p = search_list_info_ptr;
      183 
      184          retry_count = retry_count + 1;
      185 
      186          call SEARCH_LIST;
      187 
      188       end RETRY_SEARCH;
      189 
      190       if p_code ^= 0
      191       then call ERROR_RETURN ();
      192       else if retry_count > RETRY_LIMIT
      193       then p_code = error_table_$asynch_change;
      194 
      195       call FINISH;
      196 
      197 MAIN_RETURN:
      198       return;
      199 
      200 
      201 INITIALIZATION:  proc();
      202 
      203       retry_count = 0;
      204       path_idx = 0;
      205       definition_value_name = "";
      206       dir_name = "";
      207       entry_name = "";
      208       get_definition = "0"b;
      209       work_area_ptr = null;
      210       caller_area_ptr = null;
      211 
      212       return;
      213       end INITIALIZATION;
      214 
      215 
      216 FINISH:
      217    proc ();
      218 
      219 
      220    end FINISH;
      221 
      222 ERROR_RETURN:
      223    proc ();
      224       call FINISH;
      225       goto MAIN_RETURN;
      226    end ERROR_RETURN;
      227 
      228 SEARCH_LIST:
      229    proc ();
      230       dcl	    sl_pv_idx	       fixed bin;
      231 
      232       if get_definition
      233       then
      234          do;
      235 	  if p_array_ptr ^= null
      236 	  then
      237 	     do;
      238 	        do sl_pv_idx = 1 to p_array_ptr -> print_vector_array.number_of_vectors;
      239 		 free p_array_ptr -> print_vector_array.vector_slot (sl_pv_idx) -> print_vector;
      240 	        end;
      241 	        free p_array_ptr -> print_vector_array;
      242 	        p_array_ptr = null;
      243 	     end;
      244          end;
      245       else p_default_linear_form = "";
      246 
      247       do path_idx = 1 to sl_info.num_paths;
      248          call expand_pathname_$add_suffix (sl_info.paths (path_idx).pathname, VALUE_SUFFIX, dir_name, entry_name, p_code);
      249          if p_code ^= 0
      250          then return;
      251          if get_definition
      252          then
      253 	  do;
      254 	     call RETRIEVE_DEFINITION (dir_name, entry_name, p_array_ptr, p_code);
      255 	     if p_array_ptr ^= null
      256 	     then return;				/* A definition was found. */
      257 	     else if p_code ^= error_table_$oldnamerr & p_code ^= error_table_$noentry
      258 	     then return;				/* An error fatal to the search was hit. */
      259 	  end;
      260          else
      261 	  do;
      262 	     call RETRIEVE_DEFAULT_LINEAR_FORM (dir_name, entry_name, p_default_linear_form, p_code);
      263 	     if p_code ^= 0
      264 	     then if p_code ^= error_table_$oldnamerr & p_code ^= error_table_$noentry
      265 		then return;			/* An error fatal to the search was hit. */
      266 		else p_code = 0;
      267 	  end;
      268       end;
      269       if get_definition
      270       then if p_array_ptr = null
      271 	 then p_code = error_table_$oldnamerr;
      272    end SEARCH_LIST;
      273 
      274 RETRIEVE_DEFAULT_LINEAR_FORM:
      275    proc (rdlf_p_db_dir, rdlf_p_db_entry, rdlf_p_default_linear_form, rdlf_p_code);
      276       dcl	    rdlf_p_db_dir	       char (*) parameter;
      277       dcl	    rdlf_p_db_entry	       char (*) parameter;
      278       dcl	    rdlf_p_default_linear_form
      279 			       char (*) varying parameter;
      280       dcl	    rdlf_p_code	       fixed bin (35) parameter;
      281 
      282       dcl	    rdlf_value_seg_ptr     ptr init (null);
      283       dcl	    rdlf_default_linear_form_value
      284 			       char (rdlf_dlfv_length_in_bytes) varying based(rdlf_dlfv_ptr);
      285       dcl     rdlf_dlfv_length_in_bytes
      286                                      fixed bin(21) init(0);
      287       dcl     rdlf_dlfv_length_in_words
      288                                      fixed bin(18) init(0);
      289       dcl     rdlf_dlfv_ptr	       ptr init(null);
      290 
      291       call initiate_file_ (rdlf_p_db_dir, rdlf_p_db_entry, R_ACCESS, rdlf_value_seg_ptr, (0), p_code);
      292       if rdlf_value_seg_ptr = null
      293       then return;
      294 
      295       call
      296          value_$get_data (rdlf_value_seg_ptr, (PERMANENT_VALUE), (default_linear_form_value_name),
      297          work_area_ptr, rdlf_dlfv_ptr, rdlf_dlfv_length_in_words, p_code);
      298       if p_code ^= 0
      299       then
      300          do;
      301 	  call RDLF_FINISH;
      302 	  return;
      303          end;
      304 
      305       rdlf_dlfv_length_in_bytes = rdlf_dlfv_length_in_words * BYTES_PER_WORD;
      306 
      307       call terminate_file_ (rdlf_value_seg_ptr, (0), TERM_FILE_TERM, p_code);
      308       if p_code ^= 0
      309       then
      310          do;
      311 	  call RDLF_FINISH;
      312 	  return;
      313          end;
      314 
      315       call ioa_$rsnnl("^a^[^; ^]^a", rdlf_p_default_linear_form, 0, (rdlf_default_linear_form_value),
      316          (rdlf_default_linear_form_value = "" | rdlf_p_default_linear_form = ""), (rdlf_p_default_linear_form));
      317 
      318 /*      rdlf_p_default_linear_form = rdlf_default_linear_form_value || " " || rdlf_p_default_linear_form*/
      319 
      320 
      321       call RDLF_FINISH;
      322       return;
      323 RDLF_FINISH:
      324    proc;
      325 
      326       if rdlf_value_seg_ptr ^= null
      327       then call terminate_file_ (rdlf_value_seg_ptr, (0), TERM_FILE_TERM, (0));
      328 
      329    end RDLF_FINISH;
      330    end RETRIEVE_DEFAULT_LINEAR_FORM;
      331 
      332 RETRIEVE_DEFINITION:
      333    proc (rd_p_db_dir, rd_p_db_entry, rd_p_array_ptr, rd_p_code);
      334       dcl	    rd_p_db_dir	       char (*) parameter;
      335       dcl	    rd_p_db_entry	       char (*) parameter;
      336       dcl	    rd_p_array_ptr	       ptr parameter;
      337       dcl	    rd_p_code	       fixed bin (35) parameter;
      338       dcl	    rd_value_seg_ptr       ptr init (null);
      339       dcl	    rd_definition_pva_string
      340 			       char (rd_definition_pva_string_length_in_bytes) varying
      341 			       based (rd_definition_pva_string_ptr);
      342       dcl	    rd_definition_pva_string_ptr
      343 			       ptr init (null);
      344       dcl	    rd_definition_pva_string_length_in_words
      345 			       fixed bin (18) init (0);
      346       dcl	    rd_definition_pva_string_length_in_bytes
      347 			       fixed bin (21) init (0);
      348 
      349       call initiate_file_ (rd_p_db_dir, rd_p_db_entry, R_ACCESS, rd_value_seg_ptr, (0), p_code);
      350       if rd_value_seg_ptr = null
      351       then return;
      352 
      353       call
      354          value_$get_data (rd_value_seg_ptr, (PERMANENT_VALUE), (definition_value_name), caller_area_ptr,
      355          rd_definition_pva_string_ptr, rd_definition_pva_string_length_in_words, p_code);
      356       if p_code ^= 0
      357       then
      358          do;
      359 	  call RD_FINISH;
      360 	  return;
      361          end;
      362 
      363       rd_definition_pva_string_length_in_bytes = rd_definition_pva_string_length_in_words * BYTES_PER_WORD;
      364 
      365       call terminate_file_ (rd_value_seg_ptr, (0), TERM_FILE_TERM, p_code);
      366       if p_code ^= 0
      367       then
      368          do;
      369 	  call RD_FINISH;
      370 	  return;
      371          end;
      372 
      373       call
      374          vector_util_$cv_string_to_pva ((rd_definition_pva_string_ptr), (rd_definition_pva_string_length_in_bytes),
      375          caller_area_ptr, rd_p_array_ptr, rd_p_code);
      376 
      377 
      378       call RD_FINISH;
      379       return;
      380 
      381 RD_FINISH:
      382    proc;
      383 
      384       if rd_definition_pva_string_ptr ^= null
      385       then free rd_definition_pva_string;
      386 
      387    end RD_FINISH;
      388    end RETRIEVE_DEFINITION;
      389 
      390 SETUP_SEARCH_LIST:
      391    proc (ssl_p_sl_info_p, ssl_p_code);
      392       dcl	    ssl_p_code	       fixed bin (35) parameter;
      393       dcl	    ssl_p_sl_info_p	       ptr parameter;
      394 
      395       ssl_p_code = 0;
      396       ssl_p_sl_info_p = null;
      397 
      398       sl_control_s.af_pathname = "1"b;
      399       sl_control_s.pad1 = "0"b;
      400       sl_control_s.key_ref_dir = "0"b;
      401       sl_control_s.key_work_dir = "1"b;
      402       sl_control_s.key_home_dir = "1"b;
      403       sl_control_s.key_proc_dir = "1"b;
      404       sl_control_s.pad2 = "0"b;
      405 
      406       call
      407          search_paths_$get ((PROCESS_ARGUMENTS_SEARCH_LIST_NAME), string (sl_control_s), "", null, work_area_ptr,
      408          sl_info_version_1, ssl_p_sl_info_p, ssl_p_code);
      409 
      410    end SETUP_SEARCH_LIST;
      411 
  1     1 /* BEGIN INCLUDE FILE - pa_value_names.incl.pl1 */
  1     2 
  1     3 /* DESCRIPTION:
  1     4*          This include file defines constants for the names of the values in
  1     5*     which the definition_pva_string and the default_linear_form are stored.
  1     6**/
  1     7 
  1     8 /* HISTORY:
  1     9*Written by Lindsey Spratt, 07/26/83.
  1    10*Modified:
  1    11**/
  1    12 
  1    13 /* format: style2,ind3 */
  1    14      dcl	   (
  1    15 	   DEFAULT_LINEAR_FORM_PREFIX
  1    16 			      init ("default_linear_form"),
  1    17 	   DEFINITION_PREFIX      init ("definition")
  1    18 	   )		      char (32) varying internal static options (constant);
  1    19 
  1    20 /* END INCLUDE FILE - pa_value_names.incl.pl1 */
      412 
      413 
  2     1 /* ***********************************************************
  2     2*   *                                                         *
  2     3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
  2     4*   *                                                         *
  2     5*   *********************************************************** */
  2     6 /* BEGIN INCLUDE FILE - vu_entry_dcls.incl.pl1 */
  2     7 
  2     8 /* Written 03/01/82 by Lindsey Spratt.
  2     9*Modified:
  2    10*09/23/82 by Lindsey Spratt:  Added the append_simple_typed_vector,
  2    11*            free_typed_vector_array, and free_typed_vector entries.
  2    12*07/24/83 by Lindsey Spratt:  Added $cv_pva_to_string and $cv_string_to_pva.
  2    13**/
  2    14 
  2    15 /* format: style2,ind3 */
  2    16      dcl     vector_util_$display   entry (ptr, ptr, fixed bin (35));
  2    17      dcl     vector_util_$sort_print
  2    18                                     entry (ptr, ptr, fixed bin (35));
  2    19 
  2    20      dcl     vector_util_$init_print_vector_array
  2    21                                     entry options (variable);
  2    22      dcl     vector_util_$init_typed_vector_array
  2    23                                     entry options (variable);
  2    24 
  2    25      dcl     vector_util_$append_dimension_print
  2    26                                     entry (ptr, bit (1) aligned, char (*), ptr, ptr, fixed bin, fixed bin (35));
  2    27 
  2    28      dcl     vector_util_$append_simple_print_vector
  2    29                                     entry options (variable);
  2    30      dcl     vector_util_$append_general_print_vector
  2    31                                     entry options (variable);
  2    32 
  2    33      dcl     vector_util_$append_simple_typed_vector
  2    34                                     entry options (variable);
  2    35 
  2    36 /* call vector_util_$free_typed_vector_array (work_area_ptr, typed_vector_array_ptr, code) */
  2    37      dcl     vector_util_$free_typed_vector_array
  2    38                                     entry (ptr, ptr, fixed bin (35));
  2    39 
  2    40 /* call vector_util_$free_typed_vector (work_area_ptr,typed_vector_array_ptr,typed_vector_ptr,code) */
  2    41      dcl     vector_util_$free_typed_vector
  2    42                                     entry (ptr, ptr, ptr, fixed bin (35));
  2    43 
  2    44      dcl     vector_util_$cv_typed_to_print
  2    45                                     entry (ptr, ptr, ptr, fixed bin (35));
  2    46      dcl     vector_util_$cv_any_to_print_dimension
  2    47                                     entry (ptr, ptr, ptr, fixed bin (35), char (*) varying, fixed bin (35));
  2    48 
  2    49      dcl     vector_util_$cv_pva_to_string
  2    50                                     entry (ptr, ptr, fixed bin (35), fixed bin (35));
  2    51      dcl     vector_util_$cv_string_to_pva
  2    52                                     entry (ptr, fixed bin (35), ptr, ptr, fixed bin (35));
  2    53 
  2    54      dcl     vector_util_$err_no_operation
  2    55                                     entry (ptr, fixed bin (17), fixed bin (17), ptr, ptr, fixed bin (35));
  2    56 
  2    57 /*  END INCLUDE FILE - vu_entry_dcls.incl.pl1 */
  2    58 
      414 
      415 
  3     1 /* ***********************************************************
  3     2*   *                                                         *
  3     3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
  3     4*   *                                                         *
  3     5*   *********************************************************** */
  3     6 /* BEGIN INCLUDE FILE  -  vu_print_vector_array.incl.pl1 */
  3     7 /* Written by Matthew C. Pierret, 01/21/82
  3     8*Modified:
  3     9**/
  3    10 
  3    11 /* format: style2,ind3 */
  3    12      dcl	   1 print_vector_array   based (print_vector_array_ptr),
  3    13 	     2 version	      fixed bin (35),
  3    14 	     2 number_of_dimensions
  3    15 			      fixed bin (17),
  3    16 	     2 maximum_dimension_name_length
  3    17 			      fixed bin (17),
  3    18 	     2 number_of_vectors  fixed bin (17),
  3    19 	     2 number_of_vector_slots
  3    20 			      fixed bin (17),
  3    21 	     2 dimension_table    (pva_number_of_dimensions refer (print_vector_array.number_of_dimensions)),
  3    22 	       3 name	      char (pva_maximum_dimension_name_length
  3    23 			      refer (print_vector_array.maximum_dimension_name_length)) varying,
  3    24 	       3 descriptor_ptr   ptr,
  3    25 	       3 cv_to_print      entry (ptr, fixed bin (17), fixed bin (17), ptr, ptr, fixed bin (35)),
  3    26 	       3 cv_to_typed      entry (ptr, fixed bin (17), fixed bin (17), ptr, ptr, fixed bin (35)),
  3    27 	       3 maximum_value_length
  3    28 			      fixed bin (17),
  3    29 	     2 vector_slot	      (pva_number_of_vector_slots refer (print_vector_array.number_of_vector_slots)) ptr;
  3    30 
  3    31      dcl	   1 print_vector	      based (print_vector_ptr),
  3    32 	     2 number_of_dimensions
  3    33 			      fixed bin (17),
  3    34 	     2 maximum_value_length
  3    35 			      fixed bin (35),
  3    36 	     2 dimension	      (pv_number_of_dimensions refer (print_vector.number_of_dimensions)),
  3    37 	       3 identifier	      fixed bin (17),
  3    38 	       3 value	      char (pv_maximum_value_length refer (print_vector.maximum_value_length)) varying;
  3    39 
  3    40      dcl	   pva_number_of_dimensions
  3    41 			      fixed bin;
  3    42      dcl	   pva_number_of_vector_slots
  3    43 			      fixed bin;
  3    44      dcl	   pva_maximum_dimension_name_length
  3    45 			      fixed bin;
  3    46      dcl	   pv_number_of_dimensions
  3    47 			      fixed bin;
  3    48      dcl	   pv_maximum_value_length
  3    49 			      fixed bin;
  3    50 
  3    51      dcl	   print_vector_array_ptr ptr;
  3    52      dcl	   print_vector_ptr	      ptr;
  3    53      dcl	   PRINT_VECTOR_ARRAY_VERSION_2
  3    54 			      fixed bin (35) init (2) internal static options (constant);
  3    55 
  3    56 /* END INCLUDE FILE  -  vu_print_vector_array.incl.pl1 */
      416 
      417 
  4     1 /* BEGIN INCLUDE FILE . . . sl_info.incl.pl1 */
  4     2 
  4     3      
  4     4 
  4     5 /****^  HISTORY COMMENTS:
  4     6*  1) change(87-11-16,Lippard), approve(87-12-21,MCR7822),
  4     7*     audit(88-02-09,Blair), install(88-02-16,MR12.2-1023):
  4     8*     Modified to add INITIATED_SEGS type.
  4     9*  2) change(87-11-19,Lippard), approve(87-12-21,MCR7822),
  4    10*     audit(88-02-09,Blair), install(88-02-16,MR12.2-1023):
  4    11*     Added uid to sl_info structure.
  4    12*                                                   END HISTORY COMMENTS */
  4    13 
  4    14 
  4    15 declare 1 sl_info	      aligned based (sl_info_p),
  4    16 	     2 version	      fixed binary,		/* Must be 1 */
  4    17 	     2 num_paths	      fixed binary,		/* Number of search paths */
  4    18 	     2 change_index_p     pointer,		/* Pointer to search list's update count */
  4    19 	     2 change_index	      fixed binary (71),	/* This search list's update count */
  4    20 	     2 pad1	      (6) bit (36),		/* Must be zero */
  4    21 	     2 paths	      (sl_info_num_paths refer (sl_info.num_paths)),
  4    22 	       3 type	      fixed binary,		/* Type of search path */
  4    23 	       3 code	      fixed binary (35),	/* Standard status code of search path */
  4    24 	       3 uid	      bit (36),		/* Unique ID */
  4    25 	       3 pathname	      char (168) unaligned;	/* Search pathname */
  4    26 
  4    27      declare sl_info_num_paths      fixed binary;
  4    28      declare sl_info_p	      pointer;
  4    29      declare sl_info_version_1      fixed binary internal static options (constant) initial (1);
  4    30 
  4    31 /* Keyword Types */
  4    32 
  4    33      declare ABSOLUTE_PATH	      fixed binary internal static options (constant) initial (0);
  4    34      declare UNEXPANDED_PATH	      fixed binary internal static options (constant) initial (1);
  4    35      declare REFERENCING_DIR	      fixed binary internal static options (constant) initial (3);
  4    36      declare WORKING_DIR	      fixed binary internal static options (constant) initial (4);
  4    37      declare PROCESS_DIR	      fixed binary internal static options (constant) initial (5);
  4    38      declare HOME_DIR	      fixed binary internal static options (constant) initial (6);
  4    39      declare INITIATED_SEGS	      fixed binary internal static options (constant) initial (7);
  4    40 
  4    41 /* END INCLUDE FILE . . . sl_info.incl.pl1 */
      418 
      419 
  5     1 /* BEGIN INCLUDE FILE . . . sl_control_s.incl.pl1 */
  5     2 
  5     3      declare 1 sl_control_s	      unaligned based (addr (sl_control)),
  5     4 	     2 af_pathname	      bit (1),		/* "1"b => expand active functions */
  5     5 	     2 pad1	      bit (1),		/* Must be zero */
  5     6 	     2 key_ref_dir	      bit (1),		/* "1"b => expand -referencing_dir keyword */
  5     7 	     2 key_work_dir	      bit (1),		/* "1"b => expand -working_dir keyword */
  5     8 	     2 key_proc_dir	      bit (1),		/* "1"b => expand -process_dir keyword */
  5     9 	     2 key_home_dir	      bit (1),		/* "1"b => expand -home_dir keyword */
  5    10 	     2 pad2	      bit (30);		/* Must be zero */
  5    11 
  5    12      declare sl_control	      bit (36);
  5    13      declare sl_control_default     bit (36) internal static options (constant) initial ("101111"b);
  5    14 
  5    15 /* END INCLUDE FILE . . . sl_control_s.incl.pl1 */
      420 
      421 
  6     1 /* BEGIN INCLUDE FILE sub_err_flags.incl.pl1 BIM 11/81 */
  6     2 /* format: style3 */
  6     3 
  6     4 /* These constants are to be used for the flags argument of sub_err_ */
  6     5 /* They are just "string (condition_info_header.action_flags)" */
  6     6 
  6     7 declare	(
  6     8 	ACTION_CAN_RESTART	init (""b),
  6     9 	ACTION_CANT_RESTART init ("1"b),
  6    10 	ACTION_DEFAULT_RESTART
  6    11 			init ("01"b),
  6    12 	ACTION_QUIET_RESTART
  6    13 			init ("001"b),
  6    14 	ACTION_SUPPORT_SIGNAL
  6    15 			init ("0001"b)
  6    16 	)		bit (36) aligned internal static options (constant);
  6    17 
  6    18 /* End include file */
      422 
      423 
  7     1 /* BEGIN INCLUDE FILE - pa_dim_name_constants.incl.pl1 */
  7     2 
  7     3 /* DESCRIPTION:
  7     4*     This include file contains constants which are the names of all  of the
  7     5*dimension found in the definition and result print_vector_arrays.
  7     6**/
  7     7 
  7     8 /* HISTORY:
  7     9*Written by Lindsey Spratt, 06/30/83.
  7    10*Modified:
  7    11*07/01/83 by Lindsey Spratt:  Added DEFINITION_ORDER_DIM_NAME.
  7    12*08/26/83 by S. Krupp:  Added all new dimensions.
  7    13**/
  7    14 
  7    15 /* format: style2,ind3 */
  7    16      dcl	   (
  7    17 	   COMMAND_NAME_DIM_NAME  init ("command name"),
  7    18 	   DEFAULT_LINEAR_FORM_DIM_NAME
  7    19 			      init ("default linear form"),
  7    20 	   OPTION_NAME_DIM_NAME   init ("option"),
  7    21 	   SYNONYM_DIM_NAME	      init ("synonym"),
  7    22 	   NEGATIVE_FORM_DIM_NAME init ("negative form"),
  7    23 	   EXCLUDED_OPTION_DIM_NAME
  7    24 			      init ("excluded option"),
  7    25 	   INITIAL_IMPLIED_OPTION_DIM_NAME
  7    26 			      init ("initial implied option"),
  7    27 	   NEXT_IMPLIED_OPTION_DIM_NAME
  7    28 			      init ("next implied option"),
  7    29 	   ARGUMENT_DIM_NAME      init ("argument"),
  7    30 	   INITIAL_ARGUMENT_DIM_NAME
  7    31 			      init ("initial argument"),
  7    32 	   NEXT_ARGUMENT_DIM_NAME init ("next argument"),
  7    33 	   DEFAULT_VALUE_DIM_NAME init ("default value"),
  7    34 	   NEGATIVE_VALUE_DIM_NAME
  7    35 			      init ("negative value"),
  7    36 	   ARGUMENT_VALIDATION_STRING_DIM_NAME
  7    37 			      init ("validation string"),
  7    38 	   EXPLANATION_DIM_NAME   init ("explanation"),
  7    39 	   ARGUMENT_PRESENCE_DIM_NAME
  7    40 			      init ("presence required"),
  7    41 	   INSTANCE_DIM_NAME      init ("instance"),
  7    42 	   ORDER_DIM_NAME	      init ("order"),
  7    43 	   DEFINITION_ORDER_DIM_NAME
  7    44 			      init ("definition order"),
  7    45              FORCE_LITERAL_DIM_NAME init ("force literal"),
  7    46 	   UNEXCLUDED_OPTION_DIM_NAME
  7    47                                     init ("unexcluded option"),
  7    48              VALIDATE_RESULT_DIM_NAME
  7    49                                     init ("validate result"),
  7    50              VALIDATE_RESULT_EXPLANATION_DIM_NAME
  7    51                                     init ("validate result explanation"),
  7    52              VALIDATE_EXPLANATION_DIM_NAME
  7    53                                     init ("validate explanation")
  7    54 	   )		      char (64) varying internal static options (constant);
  7    55 
  7    56 /* END INCLUDE FILE - pa_dim_name_constants.incl.pl1 */
      424 
      425 
  8     1 /* BEGIN INCLUDE FILE ... access_mode_values.incl.pl1
  8     2*
  8     3*   Values for the "access mode" argument so often used in hardcore
  8     4*   James R. Davis 26 Jan 81  MCR 4844
  8     5*   Added constants for SM access 4/28/82 Jay Pattin
  8     6*   Added text strings 03/19/85 Chris Jones
  8     7**/
  8     8 
  8     9 
  8    10 /* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
  8    11 dcl	(
  8    12 	N_ACCESS		   init ("000"b),
  8    13 	R_ACCESS		   init ("100"b),
  8    14 	E_ACCESS		   init ("010"b),
  8    15 	W_ACCESS		   init ("001"b),
  8    16 	RE_ACCESS		   init ("110"b),
  8    17 	REW_ACCESS	   init ("111"b),
  8    18 	RW_ACCESS		   init ("101"b),
  8    19 	S_ACCESS		   init ("100"b),
  8    20 	M_ACCESS		   init ("010"b),
  8    21 	A_ACCESS		   init ("001"b),
  8    22 	SA_ACCESS		   init ("101"b),
  8    23 	SM_ACCESS		   init ("110"b),
  8    24 	SMA_ACCESS	   init ("111"b)
  8    25 	)		   bit (3) internal static options (constant);
  8    26 
  8    27 /* The following arrays are meant to be accessed by doing either 1) bin (bit_value) or
  8    28*   2) divide (bin_value, 2) to come up with an index into the array. */
  8    29 
  8    30 dcl	SEG_ACCESS_MODE_NAMES  (0:7) init ("null", "W", "E", "EW", "R", "RW", "RE", "REW") char (4) internal
  8    31 			   static options (constant);
  8    32 
  8    33 dcl	DIR_ACCESS_MODE_NAMES  (0:7) init ("null", "A", "M", "MA", "S", "SA", "SM", "SMA") char (4) internal
  8    34 			   static options (constant);
  8    35 
  8    36 dcl	(
  8    37 	N_ACCESS_BIN	   init (00000b),
  8    38 	R_ACCESS_BIN	   init (01000b),
  8    39 	E_ACCESS_BIN	   init (00100b),
  8    40 	W_ACCESS_BIN	   init (00010b),
  8    41 	RW_ACCESS_BIN	   init (01010b),
  8    42 	RE_ACCESS_BIN	   init (01100b),
  8    43 	REW_ACCESS_BIN	   init (01110b),
  8    44 	S_ACCESS_BIN	   init (01000b),
  8    45 	M_ACCESS_BIN	   init (00010b),
  8    46 	A_ACCESS_BIN	   init (00001b),
  8    47 	SA_ACCESS_BIN	   init (01001b),
  8    48 	SM_ACCESS_BIN	   init (01010b),
  8    49 	SMA_ACCESS_BIN	   init (01011b)
  8    50 	)		   fixed bin (5) internal static options (constant);
  8    51 
  8    52 /* END INCLUDE FILE ... access_mode_values.incl.pl1 */
      426 
      427 
  9     1 /* BEGIN INCLUDE FILE ... terminate_file.incl.pl1 */
  9     2 /* format: style2,^inddcls,idind32 */
  9     3 
  9     4 declare 1 terminate_file_switches	based,
  9     5 	2 truncate		bit (1) unaligned,
  9     6 	2 set_bc			bit (1) unaligned,
  9     7 	2 terminate		bit (1) unaligned,
  9     8 	2 force_write		bit (1) unaligned,
  9     9 	2 delete			bit (1) unaligned;
  9    10 
  9    11 declare TERM_FILE_TRUNC		bit (1) internal static options (constant) initial ("1"b);
  9    12 declare TERM_FILE_BC		bit (2) internal static options (constant) initial ("01"b);
  9    13 declare TERM_FILE_TRUNC_BC		bit (2) internal static options (constant) initial ("11"b);
  9    14 declare TERM_FILE_TERM		bit (3) internal static options (constant) initial ("001"b);
  9    15 declare TERM_FILE_TRUNC_BC_TERM	bit (3) internal static options (constant) initial ("111"b);
  9    16 declare TERM_FILE_FORCE_WRITE		bit (4) internal static options (constant) initial ("0001"b);
  9    17 declare TERM_FILE_DELETE		bit (5) internal static options (constant) initial ("00001"b);
  9    18 
  9    19 /* END INCLUDE FILE ... terminate_file.incl.pl1 */
      428 
      429    end pa_search_list;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    02/27/89  1051.8  pa_search_list.pl1                >spec>install>1015>pa_search_list.pl1
412          1    02/16/84  1452.4  pa_value_names.incl.pl1           >ldd>include>pa_value_names.incl.pl1
414          2    02/16/84  1452.5  vu_entry_dcls.incl.pl1            >ldd>include>vu_entry_dcls.incl.pl1
416          3    02/16/84  1452.5  vu_print_vector_array.incl.pl1    >ldd>include>vu_print_vector_array.incl.pl1
418          4    02/18/88  2023.8  sl_info.incl.pl1                  >ldd>include>sl_info.incl.pl1
420          5    01/09/79  1617.9  sl_control_s.incl.pl1             >ldd>include>sl_control_s.incl.pl1
422          6    04/16/82  0958.1  sub_err_flags.incl.pl1            >ldd>include>sub_err_flags.incl.pl1
424          7    02/16/84  1452.4  pa_dim_name_constants.incl.pl1    >ldd>include>pa_dim_name_constants.incl.pl1
426          8    04/11/85  1452.6  access_mode_values.incl.pl1       >ldd>include>access_mode_values.incl.pl1
428          9    04/06/83  1239.4  terminate_file.incl.pl1           >ldd>include>terminate_file.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
BYTES_PER_WORD                         constant        fixed bin(17,0)          initial dcl 97 ref 305 363
DEFAULT_LINEAR_FORM_PREFIX      000012 constant        varying char(32)         initial dcl 1-14 ref 154
DEFINITION_PREFIX               000001 constant        varying char(32)         initial dcl 1-14 ref 155
PERMANENT_VALUE                        constant        bit(2)                   initial dcl 96 ref 295 353
PROCESS_ARGUMENTS_SEARCH_LIST_NAME
                                000026 constant        varying char(64)         initial dcl 93 ref 406
RETRY_LIMIT                            constant        fixed bin(17,0)          initial dcl 97 ref 176 192
R_ACCESS                        000112 constant        bit(3)                   initial packed unaligned dcl 8-11 set ref 291* 349*
TERM_FILE_TERM                  000000 constant        bit(3)                   initial packed unaligned dcl 9-14 set ref 307* 326*
                                                                                  365*
VALUE_SUFFIX                    000024 constant        char(5)                  initial packed unaligned dcl 95 set ref 248*
addr                                                   builtin function         dcl 86 ref 398 399 400 401 402 403 404 406 406
af_pathname                            based           bit(1)                   level 2 packed packed unaligned dcl 5-3 set ref 398*
based_real_fix_bin_2u                  based           fixed bin(71,0)          packed unaligned dcl 82 ref 166 176
caller_area_ptr                 000410 automatic       pointer                  dcl 78 set ref 135* 148 210* 353* 373*
change_index              4            based           fixed bin(71,0)          level 2 dcl 4-15 ref 166 176
change_index_p            2            based           pointer                  level 2 dcl 4-15 ref 166 176
default_linear_form_value_name  000343 automatic       varying char(128)        dcl 74 set ref 154* 295
definition_value_name           000102 automatic       varying char(256)        dcl 71 set ref 155* 205* 353
dir_name                        000203 automatic       char(256)                packed unaligned dcl 72 set ref 206* 248* 254* 262*
entry_name                      000303 automatic       char(128)                packed unaligned dcl 73 set ref 207* 248* 254* 262*
error_table_$asynch_change      000032 external static fixed bin(35,0)          dcl 115 ref 192
error_table_$fatal_error        000036 external static fixed bin(35,0)          dcl 115 set ref 148*
error_table_$noentry            000034 external static fixed bin(35,0)          dcl 115 ref 257 263
error_table_$oldnamerr          000040 external static fixed bin(35,0)          dcl 115 ref 257 263 269
expand_pathname_$add_suffix     000020 constant        entry                    external dcl 107 ref 248
get_definition                  000404 automatic       bit(1)                   dcl 76 set ref 136* 144* 148 208* 232 251 269
get_system_free_area_           000012 constant        entry                    external dcl 104 ref 145
initiate_file_                  000024 constant        entry                    external dcl 110 ref 291 349
ioa_$rsnnl                      000030 constant        entry                    external dcl 112 ref 315
key_home_dir              0(05)        based           bit(1)                   level 2 packed packed unaligned dcl 5-3 set ref 402*
key_proc_dir              0(04)        based           bit(1)                   level 2 packed packed unaligned dcl 5-3 set ref 403*
key_ref_dir               0(02)        based           bit(1)                   level 2 packed packed unaligned dcl 5-3 set ref 400*
key_work_dir              0(03)        based           bit(1)                   level 2 packed packed unaligned dcl 5-3 set ref 401*
maximum_dimension_name_length
                          2            based           fixed bin(17,0)          level 2 dcl 3-12 ref 239 241
maximum_value_length      1            based           fixed bin(35,0)          level 2 dcl 3-31 ref 239
myname                          000047 constant        varying char(64)         initial dcl 91 set ref 148*
null                                                   builtin function         dcl 86 ref 148 148 148 152 157 209 210 235 242 255
                                                                                  269 282 289 292 326 338 342 350 384 396 406 406
num_paths                 1            based           fixed bin(17,0)          level 2 dcl 4-15 ref 247
number_of_dimensions                   based           fixed bin(17,0)          level 2 in structure "print_vector" dcl 3-31
                                                                                  in procedure "pa_search_list" ref 239
number_of_dimensions      1            based           fixed bin(17,0)          level 2 in structure "print_vector_array" dcl 3-12
                                                                                  in procedure "pa_search_list" ref 239 241
number_of_vector_slots
                          4            based           fixed bin(17,0)          level 2 dcl 3-12 ref 241
number_of_vectors         3            based           fixed bin(17,0)          level 2 dcl 3-12 ref 238
p_array_ptr                            parameter       pointer                  dcl 63 set ref 22 130 152* 235 238 239 241 242* 254*
                                                                                  255 269
p_caller_area_ptr                      parameter       pointer                  dcl 62 ref 22 130 135
p_code                                 parameter       fixed bin(35,0)          dcl 65 set ref 22 130 139 151* 160* 161 169* 170
                                                                                  179* 180 190 192* 248* 249 254* 257 257 262* 263
                                                                                  263 263 266* 269* 291* 295* 298 307* 308 349* 353*
                                                                                  356 365* 366
p_command_name                         parameter       varying char             dcl 61 ref 22 130 139 154 155
p_default_linear_form                  parameter       varying char             dcl 64 set ref 139 245* 262*
pad1                      0(01)        based           bit(1)                   level 2 packed packed unaligned dcl 5-3 set ref 399*
pad2                      0(06)        based           bit(30)                  level 2 packed packed unaligned dcl 5-3 set ref 404*
path_idx                        000101 automatic       fixed bin(17,0)          dcl 69 set ref 204* 247* 248*
pathname                 17            based           char(168)                array level 3 packed packed unaligned dcl 4-15 set
                                                                                  ref 248*
paths                    14            based           structure                array level 2 dcl 4-15
print_vector                           based           structure                level 1 unaligned dcl 3-31 ref 239
print_vector_array                     based           structure                level 1 unaligned dcl 3-12 ref 241
rd_definition_pva_string               based           varying char             dcl 339 ref 384
rd_definition_pva_string_length_in_bytes
                                000511 automatic       fixed bin(21,0)          initial dcl 346 set ref 346* 363* 373 384
rd_definition_pva_string_length_in_words
                                000510 automatic       fixed bin(18,0)          initial dcl 344 set ref 344* 353* 363
rd_definition_pva_string_ptr    000506 automatic       pointer                  initial dcl 342 set ref 342* 353* 373 384 384
rd_p_array_ptr                         parameter       pointer                  dcl 336 set ref 332 373*
rd_p_code                              parameter       fixed bin(35,0)          dcl 337 set ref 332 373*
rd_p_db_dir                            parameter       char                     packed unaligned dcl 334 set ref 332 349*
rd_p_db_entry                          parameter       char                     packed unaligned dcl 335 set ref 332 349*
rd_value_seg_ptr                000504 automatic       pointer                  initial dcl 338 set ref 338* 349* 350 353* 365*
rdlf_default_linear_form_value         based           varying char             dcl 283 ref 315 315
rdlf_dlfv_length_in_bytes       000464 automatic       fixed bin(21,0)          initial dcl 285 set ref 285* 305*
rdlf_dlfv_length_in_words       000465 automatic       fixed bin(18,0)          initial dcl 287 set ref 287* 295* 305
rdlf_dlfv_ptr                   000466 automatic       pointer                  initial dcl 289 set ref 289* 295* 315 315
rdlf_p_code                            parameter       fixed bin(35,0)          dcl 280 ref 274
rdlf_p_db_dir                          parameter       char                     packed unaligned dcl 276 set ref 274 291*
rdlf_p_db_entry                        parameter       char                     packed unaligned dcl 277 set ref 274 291*
rdlf_p_default_linear_form             parameter       varying char             dcl 278 set ref 274 315* 315 315
rdlf_value_seg_ptr              000462 automatic       pointer                  initial dcl 282 set ref 282* 291* 292 295* 307* 326
                                                                                  326*
retry_count                     000100 automatic       fixed bin(17,0)          dcl 69 set ref 176 184* 184 192 203*
search_list_info_ptr            000010 internal static pointer                  initial dcl 124 set ref 157 160* 165 169* 172 179*
                                                                                  182
search_paths_$get               000022 constant        entry                    external dcl 109 ref 406
sl_control                      000414 automatic       bit(36)                  packed unaligned dcl 5-12 set ref 398 399 400 401
                                                                                  402 403 404 406 406
sl_control_s                           based           structure                level 1 packed packed unaligned dcl 5-3 set ref 406
                                                                                  406
sl_info                                based           structure                level 1 dcl 4-15
sl_info_p                       000412 automatic       pointer                  dcl 4-28 set ref 165* 166 166 172* 176 176 182* 247
                                                                                  248
sl_info_version_1               000116 constant        fixed bin(17,0)          initial dcl 4-29 set ref 406*
sl_pv_idx                       000450 automatic       fixed bin(17,0)          dcl 230 set ref 238* 239*
ssl_p_code                             parameter       fixed bin(35,0)          dcl 392 set ref 390 395* 406*
ssl_p_sl_info_p                        parameter       pointer                  dcl 393 set ref 390 396* 406*
string                                                 builtin function         dcl 86 ref 406 406
sub_err_                        000016 constant        entry                    external dcl 106 ref 148
terminate_file_                 000026 constant        entry                    external dcl 111 ref 307 326 365
value_$get_data                 000014 constant        entry                    external dcl 105 ref 295 353
vector_slot                            based           pointer                  array level 2 dcl 3-12 ref 239
vector_util_$cv_string_to_pva   000042 constant        entry                    external dcl 2-51 ref 373
work_area_ptr                   000406 automatic       pointer                  dcl 77 set ref 145* 209* 295* 406*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ABSOLUTE_PATH                          internal static fixed bin(17,0)          initial dcl 4-33
ACTION_CANT_RESTART                    internal static bit(36)                  initial dcl 6-7
ACTION_CAN_RESTART                     internal static bit(36)                  initial dcl 6-7
ACTION_DEFAULT_RESTART                 internal static bit(36)                  initial dcl 6-7
ACTION_QUIET_RESTART                   internal static bit(36)                  initial dcl 6-7
ACTION_SUPPORT_SIGNAL                  internal static bit(36)                  initial dcl 6-7
ARGUMENT_DIM_NAME                      internal static varying char(64)         initial dcl 7-16
ARGUMENT_PRESENCE_DIM_NAME             internal static varying char(64)         initial dcl 7-16
ARGUMENT_VALIDATION_STRING_DIM_NAME    internal static varying char(64)         initial dcl 7-16
A_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 8-11
A_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 8-36
COMMAND_NAME_DIM_NAME                  internal static varying char(64)         initial dcl 7-16
DEFAULT_LINEAR_FORM_DIM_NAME           internal static varying char(64)         initial dcl 7-16
DEFAULT_VALUE_DIM_NAME                 internal static varying char(64)         initial dcl 7-16
DEFINITION_ORDER_DIM_NAME              internal static varying char(64)         initial dcl 7-16
DIR_ACCESS_MODE_NAMES                  internal static char(4)                  initial array packed unaligned dcl 8-33
EXCLUDED_OPTION_DIM_NAME               internal static varying char(64)         initial dcl 7-16
EXPLANATION_DIM_NAME                   internal static varying char(64)         initial dcl 7-16
E_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 8-11
E_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 8-36
FORCE_LITERAL_DIM_NAME                 internal static varying char(64)         initial dcl 7-16
HOME_DIR                               internal static fixed bin(17,0)          initial dcl 4-38
INITIAL_ARGUMENT_DIM_NAME              internal static varying char(64)         initial dcl 7-16
INITIAL_IMPLIED_OPTION_DIM_NAME        internal static varying char(64)         initial dcl 7-16
INITIATED_SEGS                         internal static fixed bin(17,0)          initial dcl 4-39
INSTANCE_DIM_NAME                      internal static varying char(64)         initial dcl 7-16
M_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 8-11
M_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 8-36
NEGATIVE_FORM_DIM_NAME                 internal static varying char(64)         initial dcl 7-16
NEGATIVE_VALUE_DIM_NAME                internal static varying char(64)         initial dcl 7-16
NEXT_ARGUMENT_DIM_NAME                 internal static varying char(64)         initial dcl 7-16
NEXT_IMPLIED_OPTION_DIM_NAME           internal static varying char(64)         initial dcl 7-16
N_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 8-11
N_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 8-36
OPTION_NAME_DIM_NAME                   internal static varying char(64)         initial dcl 7-16
ORDER_DIM_NAME                         internal static varying char(64)         initial dcl 7-16
PRINT_VECTOR_ARRAY_VERSION_2           internal static fixed bin(35,0)          initial dcl 3-53
PROCESS_DIR                            internal static fixed bin(17,0)          initial dcl 4-37
REFERENCING_DIR                        internal static fixed bin(17,0)          initial dcl 4-35
REW_ACCESS                             internal static bit(3)                   initial packed unaligned dcl 8-11
REW_ACCESS_BIN                         internal static fixed bin(5,0)           initial dcl 8-36
RE_ACCESS                              internal static bit(3)                   initial packed unaligned dcl 8-11
RE_ACCESS_BIN                          internal static fixed bin(5,0)           initial dcl 8-36
RW_ACCESS                              internal static bit(3)                   initial packed unaligned dcl 8-11
RW_ACCESS_BIN                          internal static fixed bin(5,0)           initial dcl 8-36
R_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 8-36
SA_ACCESS                              internal static bit(3)                   initial packed unaligned dcl 8-11
SA_ACCESS_BIN                          internal static fixed bin(5,0)           initial dcl 8-36
SEG_ACCESS_MODE_NAMES                  internal static char(4)                  initial array packed unaligned dcl 8-30
SMA_ACCESS                             internal static bit(3)                   initial packed unaligned dcl 8-11
SMA_ACCESS_BIN                         internal static fixed bin(5,0)           initial dcl 8-36
SM_ACCESS                              internal static bit(3)                   initial packed unaligned dcl 8-11
SM_ACCESS_BIN                          internal static fixed bin(5,0)           initial dcl 8-36
SYNONYM_DIM_NAME                       internal static varying char(64)         initial dcl 7-16
S_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 8-11
S_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 8-36
TERM_FILE_BC                           internal static bit(2)                   initial packed unaligned dcl 9-12
TERM_FILE_DELETE                       internal static bit(5)                   initial packed unaligned dcl 9-17
TERM_FILE_FORCE_WRITE                  internal static bit(4)                   initial packed unaligned dcl 9-16
TERM_FILE_TRUNC                        internal static bit(1)                   initial packed unaligned dcl 9-11
TERM_FILE_TRUNC_BC                     internal static bit(2)                   initial packed unaligned dcl 9-13
TERM_FILE_TRUNC_BC_TERM                internal static bit(3)                   initial packed unaligned dcl 9-15
UNEXCLUDED_OPTION_DIM_NAME             internal static varying char(64)         initial dcl 7-16
UNEXPANDED_PATH                        internal static fixed bin(17,0)          initial dcl 4-34
VALIDATE_EXPLANATION_DIM_NAME          internal static varying char(64)         initial dcl 7-16
VALIDATE_RESULT_DIM_NAME               internal static varying char(64)         initial dcl 7-16
VALIDATE_RESULT_EXPLANATION_DIM_NAME   internal static varying char(64)         initial dcl 7-16
WORKING_DIR                            internal static fixed bin(17,0)          initial dcl 4-36
W_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 8-11
W_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 8-36
print_vector_array_ptr                 automatic       pointer                  dcl 3-51
print_vector_ptr                       automatic       pointer                  dcl 3-52
pv_maximum_value_length                automatic       fixed bin(17,0)          dcl 3-48
pv_number_of_dimensions                automatic       fixed bin(17,0)          dcl 3-46
pva_maximum_dimension_name_length      automatic       fixed bin(17,0)          dcl 3-44
pva_number_of_dimensions               automatic       fixed bin(17,0)          dcl 3-40
pva_number_of_vector_slots             automatic       fixed bin(17,0)          dcl 3-42
sl_control_default                     internal static bit(36)                  initial packed unaligned dcl 5-13
sl_info_num_paths                      automatic       fixed bin(17,0)          dcl 4-27
terminate_file_switches                based           structure                level 1 packed packed unaligned dcl 9-4
vector_util_$append_dimension_print
                                000000 constant        entry                    external dcl 2-25
vector_util_$append_general_print_vector
                                000000 constant        entry                    external dcl 2-30
vector_util_$append_simple_print_vector
                                000000 constant        entry                    external dcl 2-28
vector_util_$append_simple_typed_vector
                                000000 constant        entry                    external dcl 2-33
vector_util_$cv_any_to_print_dimension
                                000000 constant        entry                    external dcl 2-46
vector_util_$cv_pva_to_string   000000 constant        entry                    external dcl 2-49
vector_util_$cv_typed_to_print  000000 constant        entry                    external dcl 2-44
vector_util_$display            000000 constant        entry                    external dcl 2-16
vector_util_$err_no_operation   000000 constant        entry                    external dcl 2-54
vector_util_$free_typed_vector  000000 constant        entry                    external dcl 2-41
vector_util_$free_typed_vector_array
                                000000 constant        entry                    external dcl 2-37
vector_util_$init_print_vector_array
                                000000 constant        entry                    external dcl 2-20
vector_util_$init_typed_vector_array
                                000000 constant        entry                    external dcl 2-22
vector_util_$sort_print         000000 constant        entry                    external dcl 2-17

NAMES DECLARED BY EXPLICIT CONTEXT.
ERROR_RETURN                    000573 constant        entry                    internal dcl 222 ref 161 170 180 190
FINISH                          000571 constant        entry                    internal dcl 216 ref 195 224
INITIALIZATION                  000552 constant        entry                    internal dcl 201 ref 133 142
JOIN                            000247 constant        label                    dcl 145 ref 137
MAIN_RETURN                     000551 constant        label                    dcl 197 ref 225
RDLF_FINISH                     001431 constant        entry                    internal dcl 323 ref 301 311 321
RD_FINISH                       001717 constant        entry                    internal dcl 381 ref 359 369 378
RETRIEVE_DEFAULT_LINEAR_FORM    001113 constant        entry                    internal dcl 274 ref 262
RETRIEVE_DEFINITION             001466 constant        entry                    internal dcl 332 ref 254
RETRY_SEARCH                    000477 constant        label                    dcl 176
SEARCH_LIST                     000576 constant        entry                    internal dcl 228 ref 174 186
SETUP_SEARCH_LIST               001733 constant        entry                    internal dcl 390 ref 160 169 179
get_default_linear_form         000222 constant        entry                    external dcl 139
get_definition                  000170 constant        entry                    external dcl 130
pa_search_list                  000147 constant        entry                    external dcl 22

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      2256        2322    2042        2266
Length      2714    2042        44         356     214           2

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
pa_search_list                      608 external procedure  is an external procedure.  
INITIALIZATION                          internal procedure  shares stack frame of external procedure pa_search_list.  
FINISH                                  internal procedure  shares stack frame of external procedure pa_search_list.  
ERROR_RETURN                            internal procedure  shares stack frame of external procedure pa_search_list.  
SEARCH_LIST                             internal procedure  shares stack frame of external procedure pa_search_list.  
RETRIEVE_DEFAULT_LINEAR_FORM            internal procedure  shares stack frame of external procedure pa_search_list.  
RDLF_FINISH                             internal procedure  shares stack frame of external procedure pa_search_list.  
RETRIEVE_DEFINITION                     internal procedure  shares stack frame of external procedure pa_search_list.  
RD_FINISH                               internal procedure  shares stack frame of external procedure pa_search_list.  
SETUP_SEARCH_LIST                       internal procedure  shares stack frame of external procedure pa_search_list.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 search_list_info_ptr        pa_search_list

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
pa_search_list           000100 retry_count                 pa_search_list
                         000101 path_idx                    pa_search_list
                         000102 definition_value_name       pa_search_list
                         000203 dir_name                    pa_search_list
                         000303 entry_name                  pa_search_list
                         000343 default_linear_form_value_name
                                                            pa_search_list
                         000404 get_definition              pa_search_list
                         000406 work_area_ptr               pa_search_list
                         000410 caller_area_ptr             pa_search_list
                         000412 sl_info_p                   pa_search_list
                         000414 sl_control                  pa_search_list
                         000450 sl_pv_idx                   SEARCH_LIST
                         000462 rdlf_value_seg_ptr          RETRIEVE_DEFAULT_LINEAR_FORM
                         000464 rdlf_dlfv_length_in_bytes   RETRIEVE_DEFAULT_LINEAR_FORM
                         000465 rdlf_dlfv_length_in_words   RETRIEVE_DEFAULT_LINEAR_FORM
                         000466 rdlf_dlfv_ptr               RETRIEVE_DEFAULT_LINEAR_FORM
                         000504 rd_value_seg_ptr            RETRIEVE_DEFINITION
                         000506 rd_definition_pva_string_ptr
                                                            RETRIEVE_DEFINITION
                         000510 rd_definition_pva_string_length_in_words
                                                            RETRIEVE_DEFINITION
                         000511 rd_definition_pva_string_length_in_bytes
                                                            RETRIEVE_DEFINITION

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_e_as              alloc_char_temp     cat_realloc_chars   call_ext_out_desc   call_ext_out        return_mac
shorten_stack       ext_entry_desc      op_freen_

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
expand_pathname_$add_suffix   get_system_free_area_         initiate_file_                ioa_$rsnnl
search_paths_$get             sub_err_                      terminate_file_               value_$get_data
vector_util_$cv_string_to_pva

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$asynch_change    error_table_$fatal_error      error_table_$noentry          error_table_$oldnamerr




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     22 000142       130 000165       133 000206       135 000207       136 000213       137 000215       139 000216
    142 000245       144 000246       145 000247       148 000256       151 000331       152 000332       154 000335
    155 000370       157 000423       160 000431       161 000441       165 000444       166 000447       169 000460
    170 000470       172 000473       174 000476       176 000477       179 000514       180 000525       182 000530
    184 000533       186 000534       188 000535       190 000536       192 000542       195 000550       197 000551
    201 000552       203 000553       204 000554       205 000555       206 000556       207 000561       208 000564
    209 000565       210 000567       212 000570       216 000571       220 000572       222 000573       224 000574
    225 000575       228 000576       232 000577       235 000601       238 000606       239 000617       240 000657
    241 000661       242 000711       244 000714       245 000715       247 000720       248 000731       249 000767
    251 000772       254 000774       255 001021       257 001027       259 001036       262 001037       263 001065
    266 001075       268 001076       269 001100       272 001112       274 001113       282 001136       285 001140
    287 001141       289 001142       291 001143       292 001203       295 001210       298 001261       301 001264
    302 001265       305 001266       307 001271       308 001317       311 001321       312 001322       315 001323
    321 001426       322 001430       323 001431       326 001432       329 001465       332 001466       338 001504
    342 001506       344 001507       346 001510       349 001511       350 001551       353 001556       356 001627
    359 001632       360 001633       363 001634       365 001637       366 001665       369 001667       370 001670
    373 001671       378 001715       379 001716       381 001717       384 001720       387 001732       390 001733
    395 001735       396 001736       398 001740       399 001742       400 001744       401 001746       402 001750
    403 001752       404 001754       406 001756       410 002035


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
