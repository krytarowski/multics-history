	COMPILATION LISTING OF SEGMENT print_error_message
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 11/21/84  0946.0 mst Wed
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 print_error_message: pem: proc;
       12 
       13 /* Modified 84-05-28 by SGH (UNCA) for active function. */
       14 /* Modified 840724 by Charlie Spitzer. fix for MCR changes. */
       15 
       16 /* Automatic */
       17 
       18 dcl  active_fnc bit(1);		
       19 dcl  af_return_arg_len fixed bin(21);	
       20 dcl  af_return_arg_ptr ptr;
       21 dcl  code fixed bin (35);
       22 dcl  error_code fixed bin (35);
       23 dcl  esw fixed bin;
       24 dcl  long char (100) aligned;
       25 dcl  n_args fixed bin;
       26 dcl  short char (8) aligned;
       27 dcl  tc fixed bin;
       28 dcl  tp ptr;
       29 
       30 /* Based */ 
       31 
       32 dcl  af_return_arg char (af_return_arg_len) varying based (af_return_arg_ptr);
       33 dcl  targ char (tc) based (tp);
       34 
       35 /* Builtins */
       36 
       37 dcl  rtrim builtin;
       38 
       39 /* Static */
       40 
       41 dcl  ME char (32) int static options (constant) init ("print_error_message");
       42 
       43 /* External */
       44 
       45 dcl  error_table_$bad_arg ext fixed bin (35);
       46 dcl  error_table_$not_act_fnc ext fixed bin (35);
       47 
       48 /* Procedures */
       49 
       50 dcl  active_fnc_err_ entry options (variable);
       51 dcl  argument_routine entry variable options (variable);
       52 dcl  com_err_ entry options (variable);
       53 dcl  convert_status_code_ entry (fixed bin (35), char (8) aligned, char (100) aligned);
       54 dcl  cu_$af_arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
       55 dcl  cu_$af_return_arg entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
       56 dcl  cu_$arg_ptr ext entry (fixed bin, ptr, fixed bin, fixed bin (35));
       57 dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
       58 dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
       59 dcl  error_routine entry variable options (variable);
       60 dcl  ioa_ entry options (variable);
       61 dcl  ioa_$rsnnl entry options (variable);
       62 dcl  requote_string_ entry (char(*)) returns(char(*));
       63 
       64 	esw = 1;					/* indicates decimal short form */
       65 	go to common;
       66 
       67 peo:	entry;
       68 
       69 	esw = 3;					/* indicates octal short form */
       70 	go to common;
       71 
       72 pel:	entry;
       73 
       74 	esw = 2;					/* indicates decimal long form */
       75 	go to common;
       76 
       77 peol:	entry;
       78 
       79 	esw = 4;					/* indicates octal long form */
       80 
       81 common:
       82 	call cu_$af_return_arg (n_args, af_return_arg_ptr, af_return_arg_len, code);
       83 	if code = error_table_$not_act_fnc then do;
       84 	     active_fnc = "0"b;
       85 	     argument_routine = cu_$arg_ptr;
       86 	     error_routine = com_err_;
       87 	end;
       88 	else do;
       89 	     active_fnc = "1"b;
       90 	     argument_routine = cu_$af_arg_ptr;
       91 	     error_routine = active_fnc_err_;
       92 	end;
       93 
       94 	call argument_routine (1, tp, tc, code);
       95 	if code ^= 0 | tc = 0 then do;
       96 	     call error_routine (code, ME);
       97 	     return;
       98 	end;
       99 
      100 	if esw < 3 then error_code = cv_dec_check_ (targ, code);
      101 	else error_code = cv_oct_check_ (targ, code);	/* get correct code value */
      102 	if code ^= 0 then do;
      103 	     call error_routine (error_table_$bad_arg, ME, "^a", targ);
      104 	     return;
      105 	end;
      106 
      107 	call convert_status_code_ (error_code, short, long);
      108 	if active_fnc then
      109 	     if esw = 1 | esw = 3 then call ioa_$rsnnl ("^a", af_return_arg, af_return_arg_len, requote_string_ (rtrim (short)));
      110 	     else call ioa_$rsnnl ("^a", af_return_arg, af_return_arg_len, requote_string_ (rtrim (long)));
      111 	else do;
      112 	     if esw = 1 then call ioa_ ("^d = ^a", error_code, short);
      113 	     else if esw = 2 then call ioa_ ("^d = ^a", error_code, long);
      114 	     else if esw = 3 then call ioa_ ("^o = ^a", error_code, short);
      115 	     else call ioa_ ("^o = ^a", error_code, long);
      116 	end;
      117 
      118      end print_error_message;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/21/84  0944.4  print_error_message.pl1           >spec>on>6867>print_error_message.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ME                              000000 constant        char(32)                 initial unaligned dcl 41 set ref 96* 103*
active_fnc                      000100 automatic       bit(1)                   unaligned dcl 18 set ref 84* 89* 108
active_fnc_err_                 000014 constant        entry                    external dcl 50 ref 91
af_return_arg                          based           varying char             dcl 32 set ref 108* 110*
af_return_arg_len               000101 automatic       fixed bin(21,0)          dcl 19 set ref 81* 108 108* 110 110*
af_return_arg_ptr               000102 automatic       pointer                  dcl 20 set ref 81* 108 110
argument_routine                000150 automatic       entry variable           dcl 51 set ref 85* 90* 94
code                            000104 automatic       fixed bin(35,0)          dcl 21 set ref 81* 83 94* 95 96* 100* 101* 102
com_err_                        000016 constant        entry                    external dcl 52 ref 86
convert_status_code_            000020 constant        entry                    external dcl 53 ref 107
cu_$af_arg_ptr                  000022 constant        entry                    external dcl 54 ref 90
cu_$af_return_arg               000024 constant        entry                    external dcl 55 ref 81
cu_$arg_ptr                     000026 constant        entry                    external dcl 56 ref 85
cv_dec_check_                   000030 constant        entry                    external dcl 57 ref 100
cv_oct_check_                   000032 constant        entry                    external dcl 58 ref 101
error_code                      000105 automatic       fixed bin(35,0)          dcl 22 set ref 100* 101* 107* 112* 113* 114* 115*
error_routine                   000154 automatic       entry variable           dcl 59 set ref 86* 91* 96 103
error_table_$bad_arg            000010 external static fixed bin(35,0)          dcl 45 set ref 103*
error_table_$not_act_fnc        000012 external static fixed bin(35,0)          dcl 46 ref 83
esw                             000106 automatic       fixed bin(17,0)          dcl 23 set ref 64* 69* 74* 79* 100 108 108 112 113
                                                                                  114
ioa_                            000034 constant        entry                    external dcl 60 ref 112 113 114 115
ioa_$rsnnl                      000036 constant        entry                    external dcl 61 ref 108 110
long                            000107 automatic       char(100)                dcl 24 set ref 107* 110 110 113* 115*
n_args                          000140 automatic       fixed bin(17,0)          dcl 25 set ref 81*
requote_string_                 000040 constant        entry                    external dcl 62 ref 108 110
rtrim                                                  builtin function         dcl 37 ref 108 108 110 110
short                           000142 automatic       char(8)                  dcl 26 set ref 107* 108 108 112* 114*
targ                                   based           char                     unaligned dcl 33 set ref 100* 101* 103*
tc                              000144 automatic       fixed bin(17,0)          dcl 27 set ref 94* 95 100 100 101 101 103 103
tp                              000146 automatic       pointer                  dcl 28 set ref 94* 100 101 103

NAMES DECLARED BY EXPLICIT CONTEXT.
common                          000104 constant        label                    dcl 81 ref 65 70 75
pel                             000064 constant        entry                    external dcl 72
pem                             000033 constant        entry                    external dcl 11
peo                             000053 constant        entry                    external dcl 67
peol                            000075 constant        entry                    external dcl 77
print_error_message             000042 constant        entry                    external dcl 11

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1062        1124     664        1072
Length      1322     664        42         161     176           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
pem                                 150 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
pem                      000100 active_fnc                  pem
                         000101 af_return_arg_len           pem
                         000102 af_return_arg_ptr           pem
                         000104 code                        pem
                         000105 error_code                  pem
                         000106 esw                         pem
                         000107 long                        pem
                         000140 n_args                      pem
                         000142 short                       pem
                         000144 tc                          pem
                         000146 tp                          pem
                         000150 argument_routine            pem
                         000154 error_routine               pem

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_cs            call_var_desc       call_ext_out_desc   call_ext_out        return              shorten_stack
ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
active_fnc_err_               com_err_                      convert_status_code_          cu_$af_arg_ptr
cu_$af_return_arg             cu_$arg_ptr                   cv_dec_check_                 cv_oct_check_
ioa_                          ioa_$rsnnl                    requote_string_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$bad_arg          error_table_$not_act_fnc




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000032        64 000047        65 000051        67 000052        69 000060        70 000062        72 000063
     74 000071        75 000073        77 000074        79 000102        81 000104        83 000121        84 000125
     85 000126        86 000132        87 000135        89 000136        90 000140        91 000144        94 000147
     95 000175        96 000201        97 000215       100 000216       101 000245       102 000270       103 000272
    104 000324       107 000325       108 000340       110 000440       111 000532       112 000533       113 000562
    114 000610       115 000636       118 000661


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
