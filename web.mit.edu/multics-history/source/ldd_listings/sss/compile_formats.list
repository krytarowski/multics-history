	COMPILATION LISTING OF SEGMENT compile_formats
	Compiled by: Multics PL/I Compiler, Release 28d, of September 14, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 10/03/83  1627.4 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 
        7 /* ******************************************************
        8*   *                                                    *
        9*   *                                                    *
       10*   * Copyright (c) 1972 by Massachusetts Institute of   *
       11*   * Technology and Honeywell Information Systems, Inc. *
       12*   *                                                    *
       13*   *                                                    *
       14*   ****************************************************** */
       15 
       16 /* procedure to compile formats into internal form
       17*
       18*   Initial Version: 10 December 1971 by BLW
       19*	Modified:  3 January 1972 by BLW
       20*	Modified: 22 October 1973 by BLW for picture formats */
       21 
       22 compile_formats: proc ;
       23 
       24 dcl	(cg_static_$text_base,cg_static_$text_reloc_base,cg_static_$format_list) ptr ext,
       25 	(cg_static_$text_pos,cg_static_$cur_level) fixed bin(18) ext;
       26 
       27 dcl	(p,q,p1,q1,fp) ptr,
       28 	dont_pool bit(1),
       29 	(first,size,n_bits,use,prev_use,delta,loc,n) fixed bin(18);
       30 
       31 dcl	(e_v,e_v$l_v) entry(ptr,fixed bin(35),ptr,fixed bin,fixed bin,bit(36) aligned);
       32 
       33 dcl	1 half	based aligned,
       34 	2 left	bit(18) unal,
       35 	2 right	bit(18) unal;
       36 dcl	fix_bin fixed bin based,
       37 	string bit(n_bits) aligned based;
       38 
       39 dcl	format_class bit(5) init("01111"b) int static;
       40 
       41 dcl	(addrel,bit,fixed,null,substr) builtin;
       42 
  1     1 /* BEGIN INCLUDE FILE ... pl1_tree_areas.incl.pl1 */
  1     2 
  1     3 /* format: style3 */
  1     4 dcl	tree_area		area based (pl1_stat_$tree_area_ptr);
  1     5 dcl	xeq_tree_area	area based (pl1_stat_$xeq_tree_area_ptr);
  1     6 
  1     7 dcl	pl1_stat_$tree_area_ptr
  1     8 			ptr ext static,
  1     9 	pl1_stat_$xeq_tree_area_ptr
  1    10 			ptr ext static;
  1    11 
  1    12 /* END INCLUDE FILE ... op_codes.incl.pl1 */
       43 
  2     1 /* BEGIN INCLUDE FILE ... cgsystem.incl.pl1 */
  2     2 
  2     3 /* Modified: 25 Apr 1979 by PCK to implement 4-bit decimal */
  2     4 
  2     5 dcl (	bits_per_char		init(9),
  2     6 	bits_per_half		init(18),
  2     7 	bits_per_word		init(36),
  2     8 	bits_per_two_words		init(72),
  2     9 	bits_per_four_words		init(144),
  2    10 	bits_per_words(2)		init(36,72),
  2    11 	packed_digits_per_char	init(2),
  2    12 	chars_per_word		init(4),
  2    13 	packed_digits_per_word	init(8),
  2    14 
  2    15 	break_even_bits		init(216),
  2    16 	break_even_words		init(6),
  2    17 
  2    18 	label_size		init(4),
  2    19 
  2    20 	convert_size(13:14)		init(9,1),
  2    21 	max_offset(13:14)		init(27,35),
  2    22 	max_short_size(13:14)	init(8,72),
  2    23 
  2    24 	units_per_word(0:5)		init(1,36,8,4,2,1),
  2    25 
  2    26 	max_dec_scale		init(32),
  2    27 	min_dec_scale		init(-31),
  2    28 	max_p_xreg		init(18),
  2    29 	max_p_fix_bin_1		init(35),
  2    30 	max_p_flt_bin_1		init(27),
  2    31 	max_p_fix_dec		init(59),
  2    32 	max_length_p		init(24),
  2    33 	default_fix_bin_p		init(17)) fixed bin(8) int static options(constant);
  2    34 
  2    35 dcl      (convert_offset(0:5)		init(36,1,4.5,9,18,36),
  2    36 	bits_per_packed_digit	init(4.5)) fixed bin(8,1) int static options(constant);
  2    37 
  2    38 dcl	max_index_register_value	init(262143) fixed bin(31) int static options(constant);
  2    39 
  2    40 /* END INCLUDE FILE ... cgsystem.incl.pl1 */
  2    41 
       44 
  3     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
  3     2 
  3     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
  3     4 
  3     5 /* format: style3 */
  3     6 dcl	1 operator	based aligned,
  3     7 	  2 node_type	bit (9) unaligned,
  3     8 	  2 op_code	bit (9) unaligned,
  3     9 	  2 shared	bit (1) unaligned,
  3    10 	  2 processed	bit (1) unaligned,
  3    11 	  2 optimized	bit (1) unaligned,
  3    12 	  2 number	fixed (14) unaligned,
  3    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
  3    14 
  3    15 dcl	max_number_of_operands
  3    16 			fixed bin (15) int static options (constant) initial (32767);
  3    17 
  3    18 /* END INCLUDE FILE ... operator.incl.pl1 */
       45 
  4     1 /* BEGIN INCLUDE FILE ... list.incl.pl1 */
  4     2 
  4     3 /* Modified 26 June 81 by EBush to add max_list_elements */
  4     4 
  4     5 
  4     6 dcl	1 list		based aligned,
  4     7 	2 node_type	bit(9) unaligned,
  4     8 	2 reserved	bit(12) unaligned,
  4     9 	2 number		fixed(14) unaligned,
  4    10 	2 element		dimension(n refer(list.number)) ptr unaligned;
  4    11 
  4    12 dcl       max_list_elements   fixed bin(17) internal static options (constant)
  4    13 	                    init(16383);
  4    14 
  4    15 /* END INCLUDE FILE ... list.incl.pl1 */
       46 
  5     1 /* ***********************************************************
  5     2*   *                                                         *
  5     3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
  5     4*   *                                                         *
  5     5*   *********************************************************** */
  5     6 /* BEGIN INCLUDE FILE ... statement.incl.pl1 */
  5     7 /* Internal interface of the PL/I compiler */
  5     8 
  5     9 dcl	1 statement		based aligned,
  5    10 	2 node_type		bit(9) unaligned,
  5    11 	2 source_id		structure unaligned,
  5    12 	  3 file_number		bit(8),
  5    13 	  3 line_number		bit(14),
  5    14 	  3 statement_number	bit(5),
  5    15 	2 next			ptr unaligned,
  5    16 	2 back			ptr unaligned,
  5    17 	2 root			ptr unaligned,
  5    18 	2 labels			ptr unaligned,
  5    19 	2 reference_list		ptr unaligned,
  5    20 	2 state_list		ptr unaligned,
  5    21 	2 reference_count		fixed(17) unaligned,
  5    22 	2 ref_count_copy		fixed(17) unaligned,
  5    23 	2 object			structure unaligned,
  5    24 	  3 start			fixed(17),
  5    25 	  3 finish		fixed(17),
  5    26 	2 source			structure unaligned,
  5    27 	  3 segment		fixed(11),
  5    28 	  3 start			fixed(23),
  5    29 	  3 length		fixed(11),
  5    30 	2 prefix			bit(12) unaligned,
  5    31 	2 optimized		bit(1) unaligned,
  5    32 	2 free_temps		bit(1) unaligned,
  5    33 	2 LHS_in_RHS		bit(1) unaligned,
  5    34 	2 statement_type		bit(9) unaligned,
  5    35 	2 bits			structure unaligned,
  5    36 	  3 processed		bit(1) unaligned,
  5    37 	  3 put_in_profile		bit(1) unaligned,
  5    38 	  3 generated		bit(1) unaligned,
  5    39 	  3 snap			bit(1) unaligned,
  5    40 	  3 system		bit(1) unaligned,
  5    41 	  3 irreducible		bit(1) unaligned,
  5    42 	  3 checked		bit(1) unaligned,
  5    43 	  3 save_temps		bit(1) unaligned,
  5    44 	  3 suppress_warnings	bit(1) unaligned,
  5    45 	  3 force_nonquick		bit(1) unaligned,
  5    46 	  3 expanded_by_name	bit(1) unaligned,
  5    47 	  3 begins_loop		bit(1) unaligned,
  5    48 	  3 pad			bit(24) unaligned;
  5    49 
  5    50 /* END INCLUDE FILE ... statement.incl.pl1 */
       47 
  6     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
  6     2 
  6     3 dcl	1 reference		based aligned,
  6     4 	2 node_type		bit(9) unaligned,
  6     5 	2 array_ref		bit(1) unaligned,
  6     6 	2 varying_ref		bit(1) unaligned,
  6     7 	2 shared			bit(1) unaligned,
  6     8 	2 put_data_sw		bit(1) unaligned,
  6     9 	2 processed		bit(1) unaligned,
  6    10 	2 units			fixed(3) unaligned,
  6    11 	2 ref_count		fixed(17) unaligned,
  6    12 	2 c_offset		fixed(24),
  6    13 	2 c_length		fixed(24),
  6    14 	2 symbol			ptr unaligned,
  6    15 	2 qualifier		ptr unaligned,
  6    16 	2 offset			ptr unaligned,
  6    17 	2 length			ptr unaligned,
  6    18 	2 subscript_list		ptr unaligned,
  6    19 						/* these fields are used by the 645 code generator */
  6    20 	2 address			structure unaligned,
  6    21 	  3 base			bit(3),
  6    22 	  3 offset		bit(15),
  6    23 	  3 op			bit(9),
  6    24 	  3 no_address		bit(1),
  6    25 	  3 inhibit		bit(1),
  6    26 	  3 ext_base		bit(1),
  6    27 	  3 tag			bit(6),
  6    28 	2 info			structure unaligned,
  6    29 	  3 address_in		structure,
  6    30 	    4 b			dimension(0:7) bit(1),
  6    31 	    4 storage		bit(1),
  6    32 	  3 value_in		structure,
  6    33 	    4 a			bit(1),
  6    34 	    4 q			bit(1),
  6    35 	    4 aq			bit(1),
  6    36 	    4 string_aq		bit(1),
  6    37 	    4 complex_aq		bit(1),
  6    38 	    4 decimal_aq		bit(1),
  6    39 	    4 b			dimension(0:7) bit(1),
  6    40 	    4 storage		bit(1),
  6    41 	    4 indicators		bit(1),
  6    42 	    4 x			dimension(0:7) bit(1),
  6    43 	  3 other			structure,
  6    44 	    4 big_offset		bit(1),
  6    45 	    4 big_length		bit(1),
  6    46 	    4 modword_in_offset	bit(1),
  6    47 	2 data_type		fixed(5) unaligned,
  6    48 	2 bits			structure unaligned,
  6    49 	  3 padded_ref		bit(1),
  6    50 	  3 aligned_ref		bit(1),
  6    51 	  3 long_ref		bit(1),
  6    52 	  3 forward_ref		bit(1),
  6    53 	  3 ic_ref		bit(1),
  6    54 	  3 temp_ref		bit(1),
  6    55 	  3 defined_ref		bit(1),
  6    56 	  3 evaluated		bit(1),
  6    57 	  3 allocate		bit(1),
  6    58 	  3 allocated		bit(1),
  6    59 	  3 aliasable		bit(1),
  6    60 	  3 even			bit(1),
  6    61 	  3 perm_address		bit(1),
  6    62 	  3 aggregate		bit(1),
  6    63 	  3 hit_zero		bit(1),
  6    64 	  3 dont_save		bit(1),
  6    65 	  3 fo_in_qual		bit(1),
  6    66 	  3 hard_to_load		bit(1),
  6    67 	2 relocation		bit(12) unaligned,
  6    68 	2 more_bits		structure unaligned,
  6    69 	  3 substr		bit(1),
  6    70 	  3 padded_for_store_ref	bit(1),
  6    71 	  3 aligned_for_store_ref	bit(1),
  6    72 	  3 mbz			bit(15),
  6    73 	2 store_ins		bit(18) unaligned;
  6    74 
  6    75 /* END INCLUDE FILE ... reference.incl.pl1 */
       48 
  7     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
  7     2 
  7     3 dcl	1 symbol			based aligned,
  7     4 	2 node_type		bit(9) unal,
  7     5 	2 source_id		structure unal,
  7     6 	  3 file_number		bit(8),
  7     7 	  3 line_number		bit(14),
  7     8 	  3 statement_number	bit(5),
  7     9 	2 location		fixed(18) unal unsigned,
  7    10 	2 allocated		bit(1) unal,
  7    11 	2 dcl_type		bit(3) unal,
  7    12 	2 reserved		bit(6) unal,
  7    13 	2 pix			unal,
  7    14 	  3 pic_fixed		bit(1) unal,
  7    15 	  3 pic_float		bit(1) unal,
  7    16 	  3 pic_char		bit(1) unal,
  7    17 	  3 pic_scale		fixed(7) unal,
  7    18 	  3 pic_size		fixed(7) unal,
  7    19 	2 level			fixed(8) unal,
  7    20 	2 boundary		fixed(3) unal,
  7    21 	2 size_units		fixed(3) unal,
  7    22 	2 scale			fixed(7) unal,
  7    23 	2 runtime			bit(18) unal,
  7    24 	2 runtime_offset		bit(18) unal,
  7    25 	2 block_node		ptr unal,
  7    26 	2 token			ptr unal,
  7    27 	2 next			ptr unal,
  7    28 	2 multi_use		ptr unal,
  7    29 	2 cross_references		ptr unal,
  7    30 	2 initial			ptr unal,
  7    31 	2 array			ptr unal,
  7    32 	2 descriptor		ptr unal,
  7    33 	2 equivalence		ptr unal,
  7    34 	2 reference		ptr unal,
  7    35 	2 general			ptr unal,
  7    36 	2 father			ptr unal,
  7    37 	2 brother			ptr unal,
  7    38 	2 son			ptr unal,
  7    39 	2 word_size		ptr unal,
  7    40 	2 bit_size		ptr unal,
  7    41 	2 dcl_size		ptr unal,
  7    42 	2 symtab_size		ptr unal,
  7    43 	2 c_word_size		fixed(24),
  7    44 	2 c_bit_size		fixed(24),
  7    45 	2 c_dcl_size		fixed(24),
  7    46 
  7    47 	2 attributes		structure aligned,
  7    48 	  3 data_type		structure unal,
  7    49 	    4 structure		bit(1) ,
  7    50 	    4 fixed		bit(1),
  7    51 	    4 float		bit(1),
  7    52 	    4 bit			bit(1),
  7    53 	    4 char		bit(1),
  7    54 	    4 ptr			bit(1),
  7    55 	    4 offset		bit(1),
  7    56 	    4 area		bit(1),
  7    57 	    4 label		bit(1),
  7    58 	    4 entry		bit(1),
  7    59 	    4 file		bit(1),
  7    60 	    4 arg_descriptor	bit(1),
  7    61 	    4 storage_block		bit(1),
  7    62 	    4 explicit_packed	bit(1), /* options(packed) */
  7    63 	    4 condition		bit(1),
  7    64 	    4 format		bit(1),
  7    65 	    4 builtin		bit(1),
  7    66 	    4 generic		bit(1),
  7    67 	    4 picture		bit(1),
  7    68 
  7    69 	  3 misc_attributes		structure unal,
  7    70 	    4 dimensioned		bit(1),
  7    71 	    4 initialed		bit(1),
  7    72 	    4 aligned		bit(1),
  7    73 	    4 unaligned		bit(1),
  7    74 	    4 signed		bit(1),
  7    75 	    4 unsigned		bit(1),
  7    76 	    4 precision		bit(1),
  7    77 	    4 varying		bit(1),
  7    78 	    4 local		bit(1),
  7    79 	    4 decimal		bit(1),
  7    80 	    4 binary		bit(1),
  7    81 	    4 real		bit(1),
  7    82 	    4 complex		bit(1),
  7    83 	    4 variable		bit(1),
  7    84 	    4 reducible		bit(1),
  7    85 	    4 irreducible		bit(1),
  7    86 	    4 returns		bit(1),
  7    87 	    4 position		bit(1),
  7    88 	    4 internal		bit(1),
  7    89 	    4 external		bit(1),
  7    90 	    4 like		bit(1),
  7    91 	    4 member		bit(1),
  7    92 	    4 non_varying		bit(1),
  7    93 	    4 options		bit(1),
  7    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
  7    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
  7    96 
  7    97 	  3 storage_class		structure unal,
  7    98 	    4 auto		bit(1),
  7    99 	    4 based		bit(1),
  7   100 	    4 static		bit(1),
  7   101 	    4 controlled		bit(1),
  7   102 	    4 defined		bit(1),
  7   103 	    4 parameter		bit(1),
  7   104 	    4 param_desc		bit(1),
  7   105 	    4 constant		bit(1),
  7   106 	    4 temporary		bit(1),
  7   107 	    4 return_value		bit(1),
  7   108 
  7   109 	  3 file_attributes		structure unal,
  7   110 	    4 print		bit(1),
  7   111 	    4 input		bit(1),
  7   112 	    4 output		bit(1),
  7   113 	    4 update		bit(1),
  7   114 	    4 stream		bit(1),
  7   115 	    4 reserved_1		bit(1),
  7   116 	    4 record		bit(1),
  7   117 	    4 sequential		bit(1),
  7   118 	    4 direct		bit(1),
  7   119 	    4 interactive		bit(1),		/* env(interactive) */
  7   120 	    4 reserved_2		bit(1),
  7   121 	    4 reserved_3		bit(1),
  7   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
  7   123 	    4 keyed		bit(1),
  7   124 	    4 reserved_4		bit(1),
  7   125 	    4 environment		bit(1),
  7   126 
  7   127 	  3 compiler_developed	structure unal,
  7   128 	    4 aliasable		bit(1),
  7   129 	    4 packed		bit(1),
  7   130 	    4 passed_as_arg		bit(1),
  7   131 	    4 allocate		bit(1),
  7   132 	    4 set			bit(1),
  7   133 	    4 exp_extents		bit(1),
  7   134 	    4 refer_extents		bit(1),
  7   135 	    4 star_extents		bit(1),
  7   136 	    4 isub		bit(1),
  7   137 	    4 put_in_symtab		bit(1),
  7   138 	    4 contiguous		bit(1),
  7   139 	    4 put_data		bit(1),
  7   140 	    4 overlayed		bit(1),
  7   141 	    4 error		bit(1),
  7   142 	    4 symtab_processed	bit(1),
  7   143 	    4 overlayed_by_builtin	bit(1),
  7   144 	    4 defaulted		bit(1),
  7   145 	    4 connected		bit(1);
  7   146 
  7   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
       49 
  8     1 /* BEGIN INCLUDE FILE ... block.incl.pl1 */
  8     2 /* Modified 22 Ocober 1980 by M. N. Davidoff to increase max block.number to 511 */
  8     3 /* format: style3,idind30 */
  8     4 
  8     5 declare	1 block			aligned based,
  8     6 	  2 node_type		bit (9) unaligned,
  8     7 	  2 source_id		structure unaligned,
  8     8 	    3 file_number		bit (8),
  8     9 	    3 line_number		bit (14),
  8    10 	    3 statement_number	bit (5),
  8    11 	  2 father		ptr unaligned,
  8    12 	  2 brother		ptr unaligned,
  8    13 	  2 son			ptr unaligned,
  8    14 	  2 declaration		ptr unaligned,
  8    15 	  2 end_declaration		ptr unaligned,
  8    16 	  2 default		ptr unaligned,
  8    17 	  2 end_default		ptr unaligned,
  8    18 	  2 context		ptr unaligned,
  8    19 	  2 prologue		ptr unaligned,
  8    20 	  2 end_prologue		ptr unaligned,
  8    21 	  2 main			ptr unaligned,
  8    22 	  2 end_main		ptr unaligned,
  8    23 	  2 return_values		ptr unaligned,
  8    24 	  2 return_count		ptr unaligned,
  8    25 	  2 plio_ps		ptr unaligned,
  8    26 	  2 plio_fa		ptr unaligned,
  8    27 	  2 plio_ffsb		ptr unaligned,
  8    28 	  2 plio_ssl		ptr unaligned,
  8    29 	  2 plio_fab2		ptr unaligned,
  8    30 	  2 block_type		bit (9) unaligned,
  8    31 	  2 prefix		bit (12) unaligned,
  8    32 	  2 like_attribute		bit (1) unaligned,
  8    33 	  2 no_stack		bit (1) unaligned,
  8    34 	  2 get_data		bit (1) unaligned,
  8    35 	  2 flush_at_call		bit (1) unaligned,
  8    36 	  2 processed		bit (1) unaligned,
  8    37 	  2 text_displayed		bit (1) unaligned,
  8    38 	  2 number		fixed bin (9) unsigned unaligned,
  8    39 	  2 free_temps		dimension (3) ptr,	/* these fields are used by the code generator */
  8    40 	  2 temp_list		ptr,
  8    41 	  2 entry_list		ptr,
  8    42 	  2 o_and_s		ptr,
  8    43 	  2 why_nonquick		aligned,
  8    44 	    3 auto_adjustable_storage bit (1) unaligned,
  8    45 	    3 returns_star_extents	bit (1) unaligned,
  8    46 	    3 stack_extended_by_args	bit (1) unaligned,
  8    47 	    3 invoked_by_format	bit (1) unaligned,
  8    48 	    3 format_statement	bit (1) unaligned,
  8    49 	    3 io_statements		bit (1) unaligned,
  8    50 	    3 assigned_to_entry_var	bit (1) unaligned,
  8    51 	    3 condition_statements	bit (1) unaligned,
  8    52 	    3 no_owner		bit (1) unaligned,
  8    53 	    3 recursive_call	bit (1) unaligned,
  8    54 	    3 options_non_quick	bit (1) unaligned,
  8    55 	    3 options_variable	bit (1) unaligned,
  8    56 	    3 never_referenced	bit (1) unaligned,
  8    57 	    3 pad_nonquick		bit (5) unaligned,
  8    58 	  2 prologue_flag		bit (1) unaligned,
  8    59 	  2 options_main		bit (1) unaligned,
  8    60 	  2 pad			bit (16) unaligned,
  8    61 	  2 number_of_entries	fixed bin (17),
  8    62 	  2 level			fixed bin (17),
  8    63 	  2 last_auto_loc		fixed bin (17),
  8    64 	  2 symbol_block		fixed bin (17),
  8    65 	  2 entry_info		fixed bin (18),
  8    66 	  2 enter			structure unaligned,
  8    67 	    3 start		fixed bin (17),
  8    68 	    3 end			fixed bin (17),
  8    69 	  2 leave			structure unaligned,
  8    70 	    3 start		fixed bin (17),
  8    71 	    3 end			fixed bin (17),
  8    72 	  2 owner			ptr;
  8    73 
  8    74 declare	max_block_number		fixed bin internal static options (constant) initial (511);
  8    75 
  8    76 /* END INCLUDE FILE ... block.incl.pl1 */
       50 
  9     1 dcl	1 format_value	based aligned,
  9     2 	2 type		bit(9) unaligned initial("000001010"b),
  9     3 	2 val		fixed bin(35) aligned,
  9     4 	2 reloc		bit(36) aligned;
       51 
 10     1 dcl	1 format_item	aligned based,
 10     2 	2 head		unaligned,
 10     3 	  3 code		bit(9),
 10     4 	  3 num		bit(9),
 10     5 	  3 next		bit(18),
 10     6 	2 count		fixed bin(35),
 10     7 	2 value(3)	fixed bin(35);
 10     8 
 10     9 dcl	1 remote_format	aligned based,
 10    10 	2 head		unaligned,
 10    11 	  3 code		bit(9),
 10    12 	  3 num		bit(9),
 10    13 	  3 next		bit(18),
 10    14 	2 cnt		fixed bin(35),
 10    15 	2 address		unaligned,
 10    16 	  3 class		bit(18),
 10    17 	  3 offset	bit(18);
       52 
 11     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
 11     2 
 11     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
 11     4 
 11     5 dcl (	block_node		initial("000000001"b),
 11     6 	statement_node		initial("000000010"b),
 11     7 	operator_node		initial("000000011"b),
 11     8 	reference_node		initial("000000100"b),
 11     9 	token_node		initial("000000101"b),
 11    10 	symbol_node		initial("000000110"b),
 11    11 	context_node		initial("000000111"b),
 11    12 	array_node		initial("000001000"b),
 11    13 	bound_node		initial("000001001"b),
 11    14 	format_value_node		initial("000001010"b),
 11    15 	list_node			initial("000001011"b),
 11    16 	default_node		initial("000001100"b),
 11    17 	machine_state_node		initial("000001101"b),
 11    18 	source_node		initial("000001110"b),
 11    19 	label_node		initial("000001111"b),
 11    20 	cross_reference_node	initial("000010000"b),
 11    21 	sf_par_node		initial("000010001"b),
 11    22 	temporary_node		initial("000010010"b),
 11    23 	label_array_element_node	initial("000010011"b),
 11    24 	by_name_agg_node		initial("000010100"b))
 11    25 				bit(9) internal static aligned options(constant);
 11    26 
 11    27 dcl	1 node			based aligned,
 11    28 	2 type			unal bit(9),
 11    29 	2 source_id		unal structure,
 11    30 	  3 file_number		bit(8),
 11    31 	  3 line_number		bit(14),
 11    32 	  3 statement_number	bit(5);
 11    33 
 11    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
       53 
 12     1 /* BEGIN INCLUDE FILE ... op_codes.incl.pl1 */
 12     2 
 12     3 /* Modified: 25 Apr 1979 by PCK 4-bit decimal */
 12     4 /* Modified: 6 Jun 1979 by PG to add rank and byte */
 12     5 /* Modified: 26 Dec 1979 by PCK to add assign_by_name */
 12     6 /* Modified: 26 July 82 BIM wordno, segno */
 12     7 
 12     8 dcl (	add		initial("000010001"b),	/* opnd(1) <- opnd(2)+opnd(3)		*/
 12     9 	sub		initial("000010010"b),	/* opnd(1) <- opnd(2)-opnd(3)		*/
 12    10 	mult		initial("000010011"b),	/* opnd(1) <- opnd(2)*opnd(3)		*/
 12    11 	div		initial("000010100"b),	/* opnd(1) <- opnd(2)/opnd(3)		*/
 12    12 	negate		initial("000010101"b),	/* opnd(1) <- -opnd(2)  		*/
 12    13 	exp		initial("000010110"b),	/* opnd(1) <- opnd(2) ** opnd(3)	*/
 12    14 
 12    15 	and_bits		initial("000100001"b),	/* opnd(1) <- opnd(2) & opnd(3)	*/
 12    16 	or_bits		initial("000100010"b),	/* opnd(1) <- opnd(2)|opnd(3)		*/
 12    17 	xor_bits		initial("000100011"b),	/* opnd(1) <- opnd(2) xor opnd(3)	*/
 12    18 	not_bits		initial("000100100"b),	/* opnd(1) <- ^opnd(2)		*/
 12    19 	cat_string	initial("000100101"b),	/* opnd(1) <- opnd(2)||opnd(3)	*/
 12    20 	bool_fun		initial("000100110"b),	/* opnd(1) <- bool(opnd(2),opnd(3),opnd(4)) */
 12    21 
 12    22 	assign		initial("000110001"b),	/* opnd(1) <- opnd(2)		*/
 12    23 	assign_size_ck	initial("000110010"b),	/* opnd(1) <- opnd(2)		*/
 12    24 	assign_zero	initial("000110011"b),	/* opnd(1) <- 0			*/
 12    25 	copy_words	initial("000110100"b),	/* move opnd(2) to opnd(1) by opnd(3) words */
 12    26 	copy_string	initial("000110101"b),	/* move opnd(2) to opnd(1) by opnd(3) units */
 12    27 	make_desc		initial("000110110"b),	/* opnd(1) <- descriptor(opnd(2),opnd(3)) */
 12    28 	assign_round	initial("000110111"b),	/* opnd(1) <- opnd(2) rounded		*/
 12    29 	pack		initial("000111000"b),	/* opnd(1) <- encode to picture opnd(2) */
 12    30 	unpack		initial("000111001"b),	/* opnd(1) <- decode from picture opnd(2) */
 12    31 
 12    32 	less_than		initial("001000100"b),	/* opnd(1) <- opnd(2) < opnd(3)	*/
 12    33 	greater_than	initial("001000101"b),	/* opnd(1) <- opnd(2) > opnd(3)	*/
 12    34 	equal		initial("001000110"b),	/* opnd(1) <- opnd(2) = opnd(3)	*/
 12    35 	not_equal		initial("001000111"b),	/* opnd(1) <- opnd(2) ^= opnd(3)	*/
 12    36 	less_or_equal	initial("001001000"b),	/* opnd(1) <- opnd(2) <= opnd(3)	*/
 12    37 	greater_or_equal	initial("001001001"b),	/* opnd(1) <- opnd(2) >= opnd(3)	*/
 12    38 
 12    39 	jump		initial("001010001"b),	/* go to opnd(1) unconditionally	*/
 12    40 	jump_true		initial("001010010"b),	/* go to opnd(1) if opnd(2) is not 0	*/
 12    41 	jump_false	initial("001010011"b),	/* go to opnd(1) if opnd(2) is all 0	*/
 12    42 	jump_if_lt	initial("001010100"b),	/* go to opnd(1) if opnd(2) < opnd(3)	*/
 12    43 	jump_if_gt	initial("001010101"b),	/* go to opnd(1) if opnd(2) > opnd(3)	*/
 12    44 	jump_if_eq	initial("001010110"b),	/* go to opnd(1) if opnd(2) = opnd(3)	*/
 12    45 	jump_if_ne	initial("001010111"b),	/* go to opnd(1) if opnd(2) ^= opnd(3)	*/
 12    46 	jump_if_le	initial("001011000"b),	/* go to opnd(1) if opnd(2) <= opnd(3)	*/
 12    47 	jump_if_ge	initial("001011001"b),	/* go to opnd(1) if opnd(2) >= opnd(3)	*/
 12    48 
 12    49 	std_arg_list	initial("001100001"b),	/* opnd(1) <- arglist(opnd(2) desclist(opnd(3)))	*/
 12    50 	return_words	initial("001100010"b),	/* return aggregate opnd(1), opnd(2) is length in words */
 12    51 	std_call		initial("001100011"b),	/* opnd(1) <- call opnd(2) with opnd(3)		*/
 12    52 	return_bits	initial("001100100"b),	/* return aggregate opnd(1), opnd(2) is length in bits */
 12    53 	std_entry		initial("001100101"b),	/* entry(opnd(1)... opnd(n))			*/
 12    54 	return_string	initial("001100110"b),	/* return string opnd(1) */
 12    55 	ex_prologue	initial("001100111"b),	/* execute the prologue -no operands-		*/
 12    56 	allot_auto	initial("001101000"b),	/* opnd(1) <- addrel(stack,opnd(2))		*/
 12    57 	param_ptr		initial("001101001"b),	/* opnd(1) <- ptr to opnd(2) in  block opnd(3)	*/
 12    58 	param_desc_ptr	initial("001101010"b),	/* opnd(1) <- ptr to opnd(2) in block opnd(3)	*/
 12    59 	std_return	initial("001101011"b),	/* return -no arguments-			*/
 12    60 	allot_ctl		initial("001101100"b),	/* allocate opnd(1) , length in words is opnd(2) 	*/
 12    61 	free_ctl		initial("001101101"b),	/* free opnd(1)				*/
 12    62 	stop		initial("001101110"b),	/* stop - terminate run unit			*/
 12    63 
 12    64 	mod_bit		initial("001110000"b),	/* opnd(1) <- mod(opnd(3),36),
 12    65*						   opnd(2) <- opnd(3) / 36		*/
 12    66 	mod_byte		initial("001110001"b),	/* opnd(1) <- mod(opnd(3),4),
 12    67*						   opnd(2) <- opnd(3) / 4		*/
 12    68 	mod_half		initial("001110010"b),	/* opnd(1) <- mod(opnd(3),2),
 12    69*						   opnd(2) <- opnd(3) / 2		*/
 12    70 	mod_word		initial("001110011"b),	/* TO BE DEFINED BY BLW			*/
 12    71 
 12    72 	bit_to_char	initial("010000000"b),	/* opnd(1) <- (opnd(2)+8)/9		*/
 12    73 	bit_to_word	initial("010000001"b),	/* opnd(1) <- (opnd(2)+35)/36		*/
 12    74 	char_to_word	initial("010000010"b),	/* opnd(1) <- (opnd(2)+3)/4		*/
 12    75 	half_to_word	initial("010000011"b),	/* opnd(1) <- (opnd(2)+1)/2		*/
 12    76 	word_to_mod2	initial("010000100"b),	/* opnd(1) <- (opnd(2)+1)/2*2		*/
 12    77 	word_to_mod4	initial("010000101"b),	/* opnd(1) <- (opnd(2)+3)/4*4		*/
 12    78 	word_to_mod8	initial("010000110"b),	/* opnd(1) <- (opnd(2)+7)/8*8		*/
 12    79 	rel_fun		initial("010000111"b),	/* opnd(1) <- rel(opnd(2))		*/
 12    80 	baseno_fun	initial("010001000"b),	/* opnd(1) <- baseno(opnd(2))		*/
 12    81 	desc_size		initial("010001001"b),	/* opnd(1) <- substr(opnd(2),13,24)	*/
 12    82 	bit_pointer	initial("010001010"b),	/* opnd(1) <- bit offset of opnd(2)	*/
 12    83 	index_before_fun	initial("010001011"b),	/* opnd(1) <- length of before(opnd(2),opnd(3)) */
 12    84 	index_after_fun	initial("010001100"b),	/* opnd(1) <- offset of after(opnd(2),opnd(3)) in opnd(2) */
 12    85 	verify_ltrim_fun	initial("010001101"b),	/* opnd(1) <- offset of ltrim(opnd(2),opnd(3)) in opnd(2) */
 12    86 	verify_rtrim_fun	initial("010001110"b),	/* opnd(1) <- length(opnd(2))-length(rtrim(opnd(2),opnd(3))) */
 12    87 	digit_to_bit	initial("010001111"b),	/* opnd(1) <- 9*opnd(2)/2		*/
 12    88 
 12    89 	ceil_fun		initial("010010000"b),	/* opnd(1) <- ceil(opnd(2))		*/
 12    90 	floor_fun		initial("010010001"b),	/* opnd(1) <- floor(opnd(2))		*/
 12    91 	round_fun		initial("010010010"b),	/* opnd(1) <- round(opnd(2))		*/
 12    92 	sign_fun		initial("010010011"b),	/* opnd(1) <- sign(opnd(2))		*/
 12    93 	abs_fun		initial("010010100"b),	/* opnd(1) <- abs(opnd(2))		*/
 12    94 	trunc_fun		initial("010010101"b),	/* opnd(1) <- trunc(opnd(2))		*/
 12    95 	byte_fun		initial("010010110"b),	/* opnd(1) <- byte(opnd(2))		*/
 12    96 	rank_fun		initial("010010111"b),	/* opnd(1) <- rank(opnd(2))		*/
 12    97 	index_rev_fun	initial("010011000"b),	/* opnd(1) <- index(reverse(opnd(2)),reverse(opnd(3))) */
 12    98 	search_rev_fun	initial("010011001"b),	/* opnd(1) <- search(reverse(opnd(2)),opnd(3)) */
 12    99 	verify_rev_fun	initial("010011010"b),	/* opnd(1) <- verify(reverse(opnd(2)),opnd(3)) */
 12   100 	wordno_fun	initial("010011011"b),        /* opnd(1) <- wordno (opnd(2)) */
 12   101 	segno_fun		initial("010011100"b),        /* opnd(1) <- segno (opnd(2)) */
 12   102 	bitno_fun           initial("010011101"b),        /* opnd(1) <- bitno (opnd(2)) */
 12   103 	charno_fun	initial("010011110"b),        /* opnd(1) <- charno (opnd(2)) */
 12   104 
 12   105 	index_fun		initial("010100000"b),	/* opnd(1) <- index(opnd(2),opnd(3))	*/
 12   106 	off_fun		initial("010100001"b),	/* opnd(1) <- offset(opnd(2),opnd(3))	*/
 12   107 	complex_fun	initial("010100010"b),	/* opnd(1) <- complex(opnd(2),opnd(3))	*/
 12   108 	conjg_fun		initial("010100011"b),	/* opnd(1) <- conjg(opnd(2),opnd(3))	*/
 12   109 	mod_fun		initial("010100100"b),	/* opnd(1) <- mod(opnd(2),opnd(3))	*/
 12   110 	repeat_fun	initial("010100101"b),	/* opnd(1) <- repeat(opnd(2),opnd(3))	*/
 12   111 	verify_fun	initial("010100110"b),	/* opnd(1) <- verify(opnd(2),opnd(3))	*/
 12   112 	translate_fun	initial("010100111"b),	/* opnd(1) <- translate(opnd(2),opnd(3))*/
 12   113 	real_fun   	initial("010101001"b),	/* opnd(1) <- real(opnd(2))		*/
 12   114 	imag_fun   	initial("010101010"b),	/* opnd(1) <- imag(opnd(2))		*/
 12   115 	length_fun	initial("010101011"b),	/* opnd(1) <- length(opnd(2))	*/
 12   116 	pl1_mod_fun	initial("010101100"b),	/* opnd(1) <- mod(opnd(2)) */
 12   117 	search_fun	initial("010101101"b),	/* opnd(1) <- search(opnd(2),opnd(3)) */
 12   118 	allocation_fun	initial("010101110"b),	/* opnd(1) <- allocation(opnd(2)) */
 12   119 	reverse_fun	initial("010101111"b),	/* opnd(1) <- reverse(opnd(2)) */
 12   120 
 12   121 	addr_fun		initial("010110000"b),	/* opnd(1) <- addr(opnd(2))		*/
 12   122 	addr_fun_bits	initial("010110001"b),	/* opnd(1) <- addr(opnd(2))		*/
 12   123 	ptr_fun		initial("010110010"b),	/* opnd(1) <- ptr(opnd(2),opnd(3))	*/
 12   124 	baseptr_fun	initial("010110011"b),	/* opnd(1) <- baseptr(opnd(2))	*/
 12   125 	addrel_fun	initial("010110100"b),	/* opnd(1) <- addrel(opnd(2),opnd(3))	*/
 12   126 	codeptr_fun	initial("010110101"b),	/* opnd(1) <- codeptr(opnd(2))	*/
 12   127 	environmentptr_fun	initial("010110110"b),	/* opnd(1) <- environmentptr(opnd(2))	*/
 12   128 	stackbaseptr_fun	initial("010110111"b),	/* opnd(1) is ptr to base of current stack	*/
 12   129 	stackframeptr_fun	initial("010111000"b),	/* opnd(1) is ptr to current block's stack frame	*/
 12   130 	setcharno_fun	initial("010111001"b),	/* opnd(1) <- opnd(2) with charno opnd(3) */
 12   131 	addcharno_fun	initial("010111010"b),	/* opnd(1) <- opnd(2) with charno = charno + opnd(3) */
 12   132 	setbitno_fun	initial("010111011"b),	/* setcharno for bitsno */
 12   133 	addbitno_fun	initial("010111100"b),	/* addcharno for bitno */
 12   134 
 12   135 	min_fun		initial("011000000"b),	/* opnd(1) <- min(opnd(1),opnd(2),...)	*/
 12   136 	max_fun		initial("011000001"b),	/* opnd(1) <- max(opnd(1),opnd(2),...)	*/
 12   137 
 12   138 	stack_ptr		initial("011010001"b),	/* opnd(1) <- stack frame ptr		*/
 12   139 	empty_area	initial("011010010"b),	/* empty opnd(1), length in words is opnd(2) */
 12   140 	enable_on		initial("011010100"b),	/* opnd(1) is the cond name
 12   141*						   opnd(2) is the file name
 12   142*						   opnd(3) is the block	*/
 12   143 	revert_on		initial("011010101"b),	/* opnd(1) is the cond name,
 12   144*						   opnd(2) is the file name	*/
 12   145 	signal_on		initial("011010110"b),	/* opnd(1) is the cond name
 12   146*						   opnd(2) is the file name */
 12   147 
 12   148 	lock_fun		initial("011010111"b),	/* opnd(1) <- stac(opnd(2),opnd(3))	*/
 12   149 	stacq_fun		initial("011011000"b),	/* opnd(1) is result, opnd(2) is ptr to lock word,
 12   150*						   opnd(3) is old value, (4) is new value. */
 12   151 	clock_fun		initial("011011001"b),	/* opnd(1) is the clock time		*/
 12   152 	vclock_fun	initial("011011010"b),	/* opnd(1) is the virtual clock time	*/
 12   153 
 12   154 	bound_ck		initial("011100000"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 12   155 	range_ck		initial("011100001"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 12   156 	loop		initial("011100010"b),	/* do opnd(1) for opnd(2) from opnd(3) to opnd(4) by 1,
 12   157*						   opnd(5) is the list */
 12   158 	join		initial("011100011"b),	/* do opnd(1), opnd(2) ... opnd(n)	*/
 12   159 	allot_based	initial("011100100"b),	/* allocate opnd(2) words in opnd(3), set opnd(1) */
 12   160 	free_based	initial("011100101"b),	/* free opnd(1) in opnd(3), length is opnd(2) words */
 12   161 
 12   162 	r_parn		initial("011110001"b),	/* format op code			*/
 12   163 	l_parn		initial("011110010"b),
 12   164 	r_format		initial("011110011"b),
 12   165 	c_format		initial("011110100"b),
 12   166 	f_format		initial("011110101"b),
 12   167 	e_format		initial("011110110"b),
 12   168 	b_format		initial("011110111"b),
 12   169 	a_format		initial("011111000"b),
 12   170 	x_format		initial("011111001"b),
 12   171 	skip_format	initial("011111010"b),
 12   172 	column_format	initial("011111011"b),
 12   173 	page_format	initial("011111100"b),
 12   174 	line_format	initial("011111101"b),
 12   175 	picture_format	initial("011111110"b),
 12   176 	bn_format		initial("011111111"b),	/* bit format, length(opnd(2)), radix factor(opnd(3)) */
 12   177 
 12   178 	get_list_trans	initial("100000000"b),	/* getlist(opnd(2) with desc(opnd(1)))	*/
 12   179 	get_edit_trans	initial("100000001"b),	/* getedit(opnd(2) with desc(opnd(1)))	*/
 12   180 	get_data_trans	initial("100000010"b),	/* getdata(opnd(1) to opnd(n))	*/
 12   181 	put_list_trans	initial("100000011"b),	/* putlist(opnd(2) with desc(opnd(1)))	*/
 12   182 	put_edit_trans	initial("100000100"b),	/* putedit(opnd(2) with desc(opnd(1)))	*/
 12   183 	put_data_trans	initial("100000101"b),	/* putdata(opnd(2)) with subscript-list opnd(1) */
 12   184 	terminate_trans	initial("100000110"b),	/* terminate stream transmission	*/
 12   185 	stream_prep	initial("100000111"b),	/* initiate stream transmission	*/
 12   186 	record_io		initial("100001000"b),	/* perform record io operation	*/
 12   187 	fortran_read	initial("100001001"b),	/* A complete read statement		*/
 12   188 	fortran_write	initial("100001010"b),	/* A complete write statement		*/
 12   189 	ftn_file_manip	initial("100001011"b),	/* endfile,backspace,rewind,etc.	*/
 12   190 	ftn_trans_loop	initial("100001100"b),	/* An implied do in i/o list		*/
 12   191 	put_control	initial("100001101"b),	/* put control opnd(1) opnd(2) times	*/
 12   192 	put_field		initial("100001110"b),	/* putlist(opnd(2)) of length(opnd(1))	*/
 12   193 	put_field_chk	initial("100001111"b),	/* putlist(op(2)) of len(op(1)) check char index(op(3)) */
 12   194 
 12   195 /* These operators are produced by the parse but are not used as input to the code generator.	*/
 12   196 /* They are processed by the semantic translator.						*/
 12   197 
 12   198 	return_value	initial("100010010"b),	/* return(opnd(1))			*/
 12   199 	allot_var		initial("100010011"b),	/* allot opnd(1) in opnd(2)		*/
 12   200 	free_var		initial("100010100"b),	/* free opnd(1) out of opnd(2)	*/
 12   201 	get_file		initial("100010101"b),	/* opnd(1) is filename,opnd(2) is copy	*/
 12   202 						/* opnd(3) is skip, opnd(4) is list	*/
 12   203 	get_string	initial("100010110"b),	/* opnd(1) is string,opnd(2) is list	*/
 12   204 	put_file		initial("100010111"b),	/* opnd(1) is filename,opnd(2) is page	*/
 12   205 						/* opnd(3) is skip,opnd(4) is line	*/
 12   206 	put_string	initial("100011000"b),	/* opnd(1) is string,opnd(2) is list	*/
 12   207 	open_file		initial("100011001"b),
 12   208 	close_file	initial("100011010"b),
 12   209 	read_file		initial("100011011"b),
 12   210 	write_file	initial("100011100"b),
 12   211 	locate_file	initial("100011101"b),
 12   212 	do_fun		initial("100011110"b),	/* opnd(1) is join of a list		*/
 12   213 						/* opnd(2) is control variable ref	*/
 12   214 						/* opnd(3) is specification operator	*/
 12   215 	do_spec		initial("100011111"b),	/* opnd(1) to opnd(2) by opnd(3) 	*/
 12   216 						/* repeat opnd(4) while opnd(5)	*/
 12   217 						/* opnd(6) is next specification	*/
 12   218 
 12   219 	rewrite_file	initial("100100000"b),
 12   220 	delete_file	initial("100100001"b),
 12   221 	unlock_file	initial("100100010"b),
 12   222 	lock_file		initial("100100011"b),
 12   223 	refer		initial("100100101"b),	/* opnd(1) refer(opnd(2))		*/
 12   224 	prefix_plus	initial("100100110"b),	/* opnd(1) <- +opnd(2)		*/
 12   225 	nop		initial("100100111"b),	/* no-op */
 12   226 	assign_by_name	initial("100101000"b),	/* opnd(1) <- opnd(2),by name		*/
 12   227 
 12   228 /* These operators are produced by the semantic translator in processing the math
 12   229*   builtin functions and are used as input to the code generator			*/
 12   230 
 12   231 	sqrt_fun		initial("100110000"b),	/* opnd(1) <- sqrt(opnd(2))	*/
 12   232 	sin_fun		initial("100110001"b),	/* opnd(1) <- sin(opnd(2))	*/
 12   233 	sind_fun		initial("100110010"b),	/* opnd(1) <- sind(opnd(2))	*/
 12   234 	cos_fun		initial("100110011"b),	/* opnd(1) <- cos(opnd(2))	*/
 12   235 	cosd_fun		initial("100110100"b),	/* opnd(1) <- cosd(opnd(2))	*/
 12   236 	tan_fun		initial("100110101"b),	/* opnd(1) <- tan(opnd(2))	*/
 12   237 	tand_fun		initial("100110110"b),	/* opnd(1) <- tand(opnd(2))	*/
 12   238 	asin_fun		initial("100110111"b),	/* opnd(1) <- asin(opnd(2))	*/
 12   239 	asind_fun		initial("100111000"b),	/* opnd(1) <- asind(opnd(2))	*/
 12   240 	acos_fun		initial("100111001"b),	/* opnd(1) <- acos(opnd(2))	*/
 12   241 	acosd_fun		initial("100111010"b),	/* opnd(1) <- acosd(opnd(2))	*/
 12   242 	atan_fun		initial("100111011"b),	/* opnd(1) <- atan(opnd(2)[,opnd(3)])	*/
 12   243 	atand_fun		initial("100111100"b),	/* opnd(1) <- atand(opnd(2)[,opnd(3)])	*/
 12   244 	log2_fun		initial("100111101"b),	/* opnd(1) <- log2(opnd(2))	*/
 12   245 	log_fun		initial("100111110"b),	/* opnd(1) <- log(opnd(2))	*/
 12   246 	log10_fun		initial("100111111"b),	/* opnd(1) <- log10(opnd(2))	*/
 12   247 
 12   248 	exp_fun		initial("101000000"b))	/* opnd(1) <- exp(opnd(2))	*/
 12   249 
 12   250 			bit(9) aligned internal static options(constant);
 12   251 
 12   252 /* END INCLUDE FILE ... op_codes.incl.pl1 */
       54 
       55 
       56 	/* preprocess all formats to encode any variables | expressions */
       57 
       58 	p = cg_static_$format_list;
       59 	do while(p ^= null);
       60 
       61 	     q = p -> element(2);
       62 	     cg_static_$cur_level = q -> symbol.block_node -> block.level;
       63 	     q = q -> symbol.initial -> statement.root;
       64 	     call preprocess(q);
       65 	     p = p -> element(1);
       66 	     end;
       67 
       68 	/* now generate internal form for all formats */
       69 
       70 	p = cg_static_$format_list;
       71 	do while(p ^= null);
       72 
       73 	     fp = addrel(cg_static_$text_base,cg_static_$text_pos);
       74 	     fp -> fix_bin = 0;
       75 
       76 	     cg_static_$text_pos = cg_static_$text_pos + 1;
       77 
       78 	     dont_pool = "0"b;
       79 	     q = p -> element(2);
       80 	     first = generate(q -> symbol.initial -> statement.root) - 1;
       81 	     size, q -> symbol.c_word_size = cg_static_$text_pos - first;
       82 
       83 	     if dont_pool then goto unique;
       84 
       85 	     /* try to pool this format with one already generated */
       86 
       87 	     n_bits = size * bits_per_word;
       88 
       89 	     p1 = cg_static_$format_list;
       90 	     do while(p1 ^= p);
       91 
       92 		q1 = p1 -> element(2);
       93 		if size > q1 -> symbol.c_word_size then goto nf;
       94 		if addrel(cg_static_$text_base,q1 -> symbol.location) -> string = fp -> string
       95 		then do;
       96 
       97 		     /* found a match */
       98 
       99 		     loc = q1 -> symbol.location;
      100 		     cg_static_$text_pos = first;
      101 		     addrel(cg_static_$text_reloc_base,cg_static_$text_pos) -> string = "0"b;
      102 		     goto fill;
      103 		     end;
      104 
      105 nf:		p1 = p1 -> element(1);
      106 		end;
      107 
      108 	     /* the format is unique */
      109 
      110 unique:	     loc = first;
      111 
      112 	     /* now assign the format and fill in its usage string (if any) */
      113 
      114 fill:	     use = q -> symbol.location;
      115 	     q -> symbol.location = loc;
      116 	     q -> symbol.allocated = "1"b;
      117 
      118 	     do while(use ^= 0);
      119 		p1 = addrel(cg_static_$text_base,use);
      120 		prev_use = fixed(p1 -> right,18);
      121 
      122 		delta = loc - use;
      123 		if delta >= 0 then p1 -> right = bit(delta,18);
      124 		else p1 -> right = bit(fixed(262144+delta,18),18);
      125 
      126 		use = prev_use;
      127 		end;
      128 
      129 	     p = p -> element(1);
      130 	     end;
      131 
      132 	/* all done */
      133 
      134 	return;
      135 
      136 preprocess:    proc(opt);
      137 
      138 dcl	     opt ptr;		/* points at format operator */
      139 
      140 dcl	     (qi,fv,op,s) ptr,
      141 	     i fixed bin;
      142 
      143 	     /* This procedure is called to preprocess a format tree.  If the format is
      144*	        a remote format, it encodes the format label specified in r(l).  It
      145*	        then looks at all of the operands of the format operator;  if any of them
      146*	        are not constants, it encodes their value and replaces them in the tree
      147*	        with a pointer to the format value node.  It calls itself to process
      148*	        another format operator found in the tree */
      149 
      150 	     op = opt;
      151 	     if op -> op_code ^= r_format then goto loop;
      152 
      153 	     qi = op -> operand(3);
      154 	     s = qi -> reference.symbol;
      155 	     if s -> symbol.format & ^ s -> symbol.constant
      156 	     then do;
      157 		allocate format_value in(tree_area) set(fv);
      158 		op -> operand(3) = fv;
      159 
      160 		call e_v$l_v(null,fv -> format_value.val,qi,0,0,fv -> format_value.reloc);
      161 		end;
      162 
      163 loop:	     do i = 1 to op -> operator.number;
      164 		qi = op -> operand(i);
      165 		if qi = null then goto step;
      166 
      167 		if qi -> node.type = format_value_node then goto step;
      168 
      169 		if qi -> node.type = reference_node
      170 		then if qi -> reference.symbol -> symbol.constant
      171 		     then goto step; else goto all;
      172 
      173 		if substr(qi -> op_code,1,5) = format_class
      174 		then do;
      175 		     call preprocess(qi);
      176 		     goto step;
      177 		     end;
      178 
      179 all:		allocate format_value in(tree_area) set(fv);
      180 		call e_v(null,fv -> format_value.val,qi,0,0,fv -> format_value.reloc);
      181 		op -> operand(i) = fv;
      182 
      183 step:		end;
      184 
      185 	     end;
      186 
      187 generate:	     proc(format_pt) returns(fixed bin(18));
      188 
      189 dcl	     format_pt ptr unaligned;			/* points at first operator node in format */
      190 
      191 dcl	     (pt,p,q,rp,s,prev) ptr,
      192 	     (start,pos,prev_pos,i) fixed bin(18),
      193 	     code fixed bin(9);
      194 
      195 dcl	     1 fir	aligned based,
      196 	     2 skip	bit(36),
      197 	     2 count_reloc	bit(36),
      198 	     2 value_reloc(3) bit(36);
      199 
      200 	     pt = format_pt;
      201 	     start = cg_static_$text_pos;
      202 	     prev = null;
      203 
      204 loop:	     pos = cg_static_$text_pos;
      205 	     p = addrel(cg_static_$text_base,pos);
      206 	     rp = addrel(cg_static_$text_reloc_base,pos);
      207 
      208 	     p -> fix_bin = 0;
      209 	     p -> format_item.num = bit(fixed(pt -> operator.number - 2,9),9);
      210 
      211 	     cg_static_$text_pos = cg_static_$text_pos + pt -> operator.number;
      212 
      213 	     q = pt -> operand(2);		/* repitition count */
      214 	     if q = null then p -> count = 1;
      215 	     else if q -> node.type = format_value_node
      216 		then do;
      217 		     p -> count = q -> format_value.val;
      218 		     rp -> count_reloc = q -> format_value.reloc;
      219 		     end;
      220 		else p -> count = q -> reference.symbol -> symbol.initial -> fix_bin;
      221 
      222 	     code = fixed(substr(pt -> op_code,6,4),4) - 1;
      223 	     p -> format_item.code = bit(fixed(code,9),9);
      224 
      225 	     if pt -> op_code = l_parn
      226 	     then do;
      227 		p -> format_item.value(1) = generate(pt -> operand(3)) - pos;
      228 		goto step;
      229 		end;
      230 
      231 	     if pt -> op_code ^= r_format then goto cf;
      232 
      233 	     q = pt -> operand(3);
      234 	     if q -> node.type = format_value_node
      235 	     then do;
      236 		p -> format_item.value(1) = q -> format_value.val;
      237 		rp -> value_reloc(1) = q -> format_value.reloc;
      238 		goto step;
      239 		end;
      240 
      241 	     dont_pool = "1"b;
      242 
      243 	     s = q -> reference.symbol;
      244 	     if s -> symbol.allocated
      245 	     then do;
      246 		i = s -> symbol.location - pos - 2;
      247 		if i >= 0 then p -> remote_format.offset = bit(fixed(i,18),18);
      248 		else p -> remote_format.offset = bit(fixed(262144+i,18),18);
      249 		end;
      250 	     else do;
      251 		p -> remote_format.offset = bit(fixed(s -> symbol.location,18),18);
      252 		s -> symbol.location = pos + 2;
      253 		end;
      254 
      255 	     p -> remote_format.class = "0"b;
      256 	     goto step;
      257 
      258 cf:	     if pt -> op_code = c_format
      259 	     then do;
      260 		p -> format_item.value(1) = generate(pt -> operand(3)) - pos;
      261 		if pt -> operator.number = 4 then p -> format_item.value(2) =
      262 		 generate(pt -> operand(4)) - pos;
      263 		goto step;
      264 		end;
      265 
      266 	     if pt -> op_code = picture_format
      267 	     then do;
      268 
      269 		/* operand(3) of a picture format item points to a reference
      270*		   node for the picture constant.  We assume that the allocate
      271*		   bit is ON in the symbol node for the picture constant, and
      272*		   therefore that the constant will have already been allocated */
      273 
      274 		p -> format_item.value(1) =  pt -> operand(3) -> reference.symbol
      275 		 -> symbol.location - pos;
      276 		dont_pool = "1"b;
      277 		goto step;
      278 		end;
      279 
      280 	     do i = 3 to pt -> operator.number;
      281 		q = pt -> operand(i);
      282 		if  q -> node.type = format_value_node
      283 		then do;
      284 		     p -> format_item.value(i-2) = q -> format_value.val;
      285 		     rp -> value_reloc(i-2) = q -> format_value.reloc;
      286 		     end;
      287 		else p -> format_item.value(i-2) = q -> reference.symbol -> symbol.initial -> fix_bin;
      288 		end;
      289 
      290 step:	     if prev ^= null then prev -> format_item.next = bit(fixed(pos - prev_pos,18),18);
      291 
      292 	     prev = p;
      293 	     prev_pos = pos;
      294 
      295 	     pt = pt -> operand(1);
      296 	     if pt ^= null then goto loop;
      297 
      298 	     return(start);
      299 	     end;
      300 
      301 	end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/03/83  1008.0  compile_formats.pl1               >spec>on>pl128d>compile_formats.pl1
43           1    07/21/80  1546.3  pl1_tree_areas.incl.pl1           >ldd>include>pl1_tree_areas.incl.pl1
44           2    10/25/79  1645.8  cgsystem.incl.pl1                 >ldd>include>cgsystem.incl.pl1
45           3    07/21/80  1546.3  operator.incl.pl1                 >ldd>include>operator.incl.pl1
46           4    08/13/81  2211.5  list.incl.pl1                     >ldd>include>list.incl.pl1
47           5    04/07/83  1635.0  statement.incl.pl1                >ldd>include>statement.incl.pl1
48           6    07/21/80  1546.3  reference.incl.pl1                >ldd>include>reference.incl.pl1
49           7    10/02/83  0828.4  symbol.incl.pl1                   >spec>on>pl128d>symbol.incl.pl1
50           8    08/13/81  2043.5  block.incl.pl1                    >ldd>include>block.incl.pl1
51           9    05/06/74  1741.2  format_value.incl.pl1             >ldd>include>format_value.incl.pl1
52          10    05/06/74  1741.2  format_item.incl.pl1              >ldd>include>format_item.incl.pl1
53          11    07/21/80  1546.3  nodes.incl.pl1                    >ldd>include>nodes.incl.pl1
54          12    04/07/83  1635.0  op_codes.incl.pl1                 >ldd>include>op_codes.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
addrel                                                 builtin function         dcl 41 ref 73 94 101 119 205 206
address                   2            based           structure                level 2 packed unaligned dcl 10-9
allocated                 1(18)        based           bit(1)                   level 2 packed unaligned dcl 7-3 set ref 116* 244
attributes               31            based           structure                level 2 dcl 7-3
bit                                                    builtin function         dcl 41 ref 123 124 209 223 247 248 251 290
bits_per_word                          constant        fixed bin(8,0)           initial dcl 2-5 ref 87
block                                  based           structure                level 1 dcl 8-5
block_node                4            based           pointer                  level 2 packed unaligned dcl 7-3 ref 62
c_format                               constant        bit(9)                   initial dcl 12-8 ref 258
c_word_size              26            based           fixed bin(24,0)          level 2 dcl 7-3 set ref 81* 93
cg_static_$cur_level            000020 external static fixed bin(18,0)          dcl 24 set ref 62*
cg_static_$format_list          000014 external static pointer                  dcl 24 ref 58 70 89
cg_static_$text_base            000010 external static pointer                  dcl 24 ref 73 94 119 205
cg_static_$text_pos             000016 external static fixed bin(18,0)          dcl 24 set ref 73 76* 76 81 100* 101 201 204 211*
                                                                                  211
cg_static_$text_reloc_base      000012 external static pointer                  dcl 24 ref 101 206
class                     2            based           bit(18)                  level 3 packed unaligned dcl 10-9 set ref 255*
code                                   based           bit(9)                   level 3 in structure "format_item" packed unaligned
                                                                                  dcl 10-1 in procedure "compile_formats" set ref
                                                                                  223*
code                            000120 automatic       fixed bin(9,0)           dcl 191 in procedure "generate" set ref 222* 223
constant                 32(16)        based           bit(1)                   level 4 packed unaligned dcl 7-3 ref 155 169
count                     1            based           fixed bin(35,0)          level 2 dcl 10-1 set ref 214* 217* 220*
count_reloc               1            based           bit(36)                  level 2 dcl 195 set ref 218*
data_type                31            based           structure                level 3 packed unaligned dcl 7-3
delta                           000120 automatic       fixed bin(18,0)          dcl 27 set ref 122* 123 123 124
dont_pool                       000112 automatic       bit(1)                   unaligned dcl 27 set ref 78* 83 241* 276*
e_v                             000022 constant        entry                    external dcl 31 ref 180
e_v$l_v                         000024 constant        entry                    external dcl 31 ref 160
element                   1            based           pointer                  array level 2 packed unaligned dcl 4-6 ref 61 65 79
                                                                                  92 105 129
fir                                    based           structure                level 1 dcl 195
first                           000113 automatic       fixed bin(18,0)          dcl 27 set ref 80* 81 100 110
fix_bin                                based           fixed bin(17,0)          dcl 36 set ref 74* 208* 220 287
fixed                                                  builtin function         dcl 41 ref 120 124 209 222 223 247 248 251 290
format                   31(15)        based           bit(1)                   level 4 packed unaligned dcl 7-3 ref 155
format_class                           constant        bit(5)                   initial unaligned dcl 39 ref 173
format_item                            based           structure                level 1 dcl 10-1
format_pt                              parameter       pointer                  unaligned dcl 189 ref 187 200
format_value                           based           structure                level 1 dcl 9-1 set ref 157 179
format_value_node                      constant        bit(9)                   initial dcl 11-5 ref 167 215 234 282
fp                              000110 automatic       pointer                  dcl 27 set ref 73* 74 94
fv                              000102 automatic       pointer                  dcl 140 set ref 157* 158 160 160 179* 180 180 181
half                                   based           structure                level 1 dcl 33
head                                   based           structure                level 2 packed unaligned dcl 10-1
i                               000117 automatic       fixed bin(18,0)          dcl 191 in procedure "generate" set ref 246* 247 247
                                                                                  248 280* 281 284 285 287*
i                               000110 automatic       fixed bin(17,0)          dcl 140 in procedure "preprocess" set ref 163* 164
                                                                                  181*
initial                  11            based           pointer                  level 2 packed unaligned dcl 7-3 ref 63 80 220 287
l_parn                                 constant        bit(9)                   initial dcl 12-8 ref 225
level                    45            based           fixed bin(17,0)          level 2 dcl 8-5 ref 62
list                                   based           structure                level 1 dcl 4-6
loc                             000121 automatic       fixed bin(18,0)          dcl 27 set ref 99* 110* 115 122
location                  1            based           fixed bin(18,0)          level 2 packed unsigned unaligned dcl 7-3 set ref 94
                                                                                  99 114 115* 246 251 252* 274
n_bits                          000115 automatic       fixed bin(18,0)          dcl 27 set ref 87* 94 94 101
next                      0(18)        based           bit(18)                  level 3 packed unaligned dcl 10-1 set ref 290*
node                                   based           structure                level 1 dcl 11-27
null                                                   builtin function         dcl 41 ref 59 71 160 160 165 180 180 202 214 290 296
num                       0(09)        based           bit(9)                   level 3 packed unaligned dcl 10-1 set ref 209*
number                    0(21)        based           fixed bin(14,0)          level 2 packed unaligned dcl 3-6 ref 163 209 211 261
                                                                                  280
offset                    2(18)        based           bit(18)                  level 3 packed unaligned dcl 10-9 set ref 247* 248*
                                                                                  251*
op                              000104 automatic       pointer                  dcl 140 set ref 150* 151 153 158 163 164 181
op_code                   0(09)        based           bit(9)                   level 2 packed unaligned dcl 3-6 ref 151 173 222 225
                                                                                  231 258 266
operand                   1            based           pointer                  array level 2 packed unaligned dcl 3-6 set ref 153
                                                                                  158* 164 181* 213 227* 233 260* 261* 274 281 295
operator                               based           structure                level 1 dcl 3-6
opt                                    parameter       pointer                  dcl 138 ref 136 150
p                               000100 automatic       pointer                  dcl 27 in procedure "compile_formats" set ref 58* 59
                                                                                  61 65* 65 70* 71 79 90 129* 129
p                               000102 automatic       pointer                  dcl 191 in procedure "generate" set ref 205* 208 209
                                                                                  214 217 220 223 227 236 247 248 251 255 260 261
                                                                                  274 284 287 292
p1                              000104 automatic       pointer                  dcl 27 set ref 89* 90 92 105* 105 119* 120 123 124
picture_format                         constant        bit(9)                   initial dcl 12-8 ref 266
pl1_stat_$tree_area_ptr         000026 external static pointer                  dcl 1-7 ref 157 179
pos                             000115 automatic       fixed bin(18,0)          dcl 191 set ref 204* 205 206 227 246 252 260 261 274
                                                                                  290 293
prev                            000112 automatic       pointer                  dcl 191 set ref 202* 290 290 292*
prev_pos                        000116 automatic       fixed bin(18,0)          dcl 191 set ref 290 293*
prev_use                        000117 automatic       fixed bin(18,0)          dcl 27 set ref 120* 126
pt                              000100 automatic       pointer                  dcl 191 set ref 200* 209 211 213 222 225 227 231 233
                                                                                  258 260 261 261 266 274 280 281 295* 295 296
q                               000102 automatic       pointer                  dcl 27 in procedure "compile_formats" set ref 61* 62
                                                                                  63* 63 64* 79* 80 81 114 115 116
q                               000104 automatic       pointer                  dcl 191 in procedure "generate" set ref 213* 214 215
                                                                                  217 218 220 233* 234 236 237 243 281* 282 284 285
                                                                                  287
q1                              000106 automatic       pointer                  dcl 27 set ref 92* 93 94 99
qi                              000100 automatic       pointer                  dcl 140 set ref 153* 154 160* 164* 165 167 169 169
                                                                                  173 175* 180*
r_format                               constant        bit(9)                   initial dcl 12-8 ref 151 231
reference                              based           structure                level 1 dcl 6-3
reference_node                         constant        bit(9)                   initial dcl 11-5 ref 169
reloc                     2            based           bit(36)                  level 2 dcl 9-1 set ref 160* 180* 218 237 285
remote_format                          based           structure                level 1 dcl 10-9
right                     0(18)        based           bit(18)                  level 2 packed unaligned dcl 33 set ref 120 123*
                                                                                  124*
root                      3            based           pointer                  level 2 packed unaligned dcl 5-9 set ref 63 80*
rp                              000106 automatic       pointer                  dcl 191 set ref 206* 218 237 285
s                               000106 automatic       pointer                  dcl 140 in procedure "preprocess" set ref 154* 155
                                                                                  155
s                               000110 automatic       pointer                  dcl 191 in procedure "generate" set ref 243* 244 246
                                                                                  251 252
size                            000114 automatic       fixed bin(18,0)          dcl 27 set ref 81* 87 93
start                           000114 automatic       fixed bin(18,0)          dcl 191 set ref 201* 298
statement                              based           structure                level 1 dcl 5-9
storage_class            32(09)        based           structure                level 3 packed unaligned dcl 7-3
string                                 based           bit                      dcl 36 set ref 94 94 101*
substr                                                 builtin function         dcl 41 ref 173 222
symbol                                 based           structure                level 1 dcl 7-3 in procedure "compile_formats"
symbol                    3            based           pointer                  level 2 in structure "reference" packed unaligned
                                                                                  dcl 6-3 in procedure "compile_formats" ref 154 169
                                                                                  220 243 274 287
tree_area                              based           area(1024)               dcl 1-4 ref 157 179
type                                   based           bit(9)                   level 2 in structure "node" packed unaligned
                                                                                  dcl 11-27 in procedure "compile_formats" ref 167
                                                                                  169 215 234 282
type                                   based           bit(9)                   initial level 2 in structure "format_value" packed
                                                                                  unaligned dcl 9-1 in procedure "compile_formats"
                                                                                  set ref 157* 179*
use                             000116 automatic       fixed bin(18,0)          dcl 27 set ref 114* 118 119 122 126*
val                       1            based           fixed bin(35,0)          level 2 dcl 9-1 set ref 160* 180* 217 236 284
value                     2            based           fixed bin(35,0)          array level 2 dcl 10-1 set ref 227* 236* 260* 261*
                                                                                  274* 284* 287*
value_reloc               2            based           bit(36)                  array level 2 dcl 195 set ref 237* 285*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
a_format                               internal static bit(9)                   initial dcl 12-8
abs_fun                                internal static bit(9)                   initial dcl 12-8
acos_fun                               internal static bit(9)                   initial dcl 12-8
acosd_fun                              internal static bit(9)                   initial dcl 12-8
add                                    internal static bit(9)                   initial dcl 12-8
addbitno_fun                           internal static bit(9)                   initial dcl 12-8
addcharno_fun                          internal static bit(9)                   initial dcl 12-8
addr_fun                               internal static bit(9)                   initial dcl 12-8
addr_fun_bits                          internal static bit(9)                   initial dcl 12-8
addrel_fun                             internal static bit(9)                   initial dcl 12-8
allocation_fun                         internal static bit(9)                   initial dcl 12-8
allot_auto                             internal static bit(9)                   initial dcl 12-8
allot_based                            internal static bit(9)                   initial dcl 12-8
allot_ctl                              internal static bit(9)                   initial dcl 12-8
allot_var                              internal static bit(9)                   initial dcl 12-8
and_bits                               internal static bit(9)                   initial dcl 12-8
array_node                             internal static bit(9)                   initial dcl 11-5
asin_fun                               internal static bit(9)                   initial dcl 12-8
asind_fun                              internal static bit(9)                   initial dcl 12-8
assign                                 internal static bit(9)                   initial dcl 12-8
assign_by_name                         internal static bit(9)                   initial dcl 12-8
assign_round                           internal static bit(9)                   initial dcl 12-8
assign_size_ck                         internal static bit(9)                   initial dcl 12-8
assign_zero                            internal static bit(9)                   initial dcl 12-8
atan_fun                               internal static bit(9)                   initial dcl 12-8
atand_fun                              internal static bit(9)                   initial dcl 12-8
b_format                               internal static bit(9)                   initial dcl 12-8
baseno_fun                             internal static bit(9)                   initial dcl 12-8
baseptr_fun                            internal static bit(9)                   initial dcl 12-8
bit_pointer                            internal static bit(9)                   initial dcl 12-8
bit_to_char                            internal static bit(9)                   initial dcl 12-8
bit_to_word                            internal static bit(9)                   initial dcl 12-8
bitno_fun                              internal static bit(9)                   initial dcl 12-8
bits_per_char                          internal static fixed bin(8,0)           initial dcl 2-5
bits_per_four_words                    internal static fixed bin(8,0)           initial dcl 2-5
bits_per_half                          internal static fixed bin(8,0)           initial dcl 2-5
bits_per_packed_digit                  internal static fixed bin(8,1)           initial dcl 2-35
bits_per_two_words                     internal static fixed bin(8,0)           initial dcl 2-5
bits_per_words                         internal static fixed bin(8,0)           initial array dcl 2-5
block_node                             internal static bit(9)                   initial dcl 11-5
bn_format                              internal static bit(9)                   initial dcl 12-8
bool_fun                               internal static bit(9)                   initial dcl 12-8
bound_ck                               internal static bit(9)                   initial dcl 12-8
bound_node                             internal static bit(9)                   initial dcl 11-5
break_even_bits                        internal static fixed bin(8,0)           initial dcl 2-5
break_even_words                       internal static fixed bin(8,0)           initial dcl 2-5
by_name_agg_node                       internal static bit(9)                   initial dcl 11-5
byte_fun                               internal static bit(9)                   initial dcl 12-8
cat_string                             internal static bit(9)                   initial dcl 12-8
ceil_fun                               internal static bit(9)                   initial dcl 12-8
char_to_word                           internal static bit(9)                   initial dcl 12-8
charno_fun                             internal static bit(9)                   initial dcl 12-8
chars_per_word                         internal static fixed bin(8,0)           initial dcl 2-5
clock_fun                              internal static bit(9)                   initial dcl 12-8
close_file                             internal static bit(9)                   initial dcl 12-8
codeptr_fun                            internal static bit(9)                   initial dcl 12-8
column_format                          internal static bit(9)                   initial dcl 12-8
complex_fun                            internal static bit(9)                   initial dcl 12-8
conjg_fun                              internal static bit(9)                   initial dcl 12-8
context_node                           internal static bit(9)                   initial dcl 11-5
convert_offset                         internal static fixed bin(8,1)           initial array dcl 2-35
convert_size                           internal static fixed bin(8,0)           initial array dcl 2-5
copy_string                            internal static bit(9)                   initial dcl 12-8
copy_words                             internal static bit(9)                   initial dcl 12-8
cos_fun                                internal static bit(9)                   initial dcl 12-8
cosd_fun                               internal static bit(9)                   initial dcl 12-8
cross_reference_node                   internal static bit(9)                   initial dcl 11-5
default_fix_bin_p                      internal static fixed bin(8,0)           initial dcl 2-5
default_node                           internal static bit(9)                   initial dcl 11-5
delete_file                            internal static bit(9)                   initial dcl 12-8
desc_size                              internal static bit(9)                   initial dcl 12-8
digit_to_bit                           internal static bit(9)                   initial dcl 12-8
div                                    internal static bit(9)                   initial dcl 12-8
do_fun                                 internal static bit(9)                   initial dcl 12-8
do_spec                                internal static bit(9)                   initial dcl 12-8
e_format                               internal static bit(9)                   initial dcl 12-8
empty_area                             internal static bit(9)                   initial dcl 12-8
enable_on                              internal static bit(9)                   initial dcl 12-8
environmentptr_fun                     internal static bit(9)                   initial dcl 12-8
equal                                  internal static bit(9)                   initial dcl 12-8
ex_prologue                            internal static bit(9)                   initial dcl 12-8
exp                                    internal static bit(9)                   initial dcl 12-8
exp_fun                                internal static bit(9)                   initial dcl 12-8
f_format                               internal static bit(9)                   initial dcl 12-8
floor_fun                              internal static bit(9)                   initial dcl 12-8
fortran_read                           internal static bit(9)                   initial dcl 12-8
fortran_write                          internal static bit(9)                   initial dcl 12-8
free_based                             internal static bit(9)                   initial dcl 12-8
free_ctl                               internal static bit(9)                   initial dcl 12-8
free_var                               internal static bit(9)                   initial dcl 12-8
ftn_file_manip                         internal static bit(9)                   initial dcl 12-8
ftn_trans_loop                         internal static bit(9)                   initial dcl 12-8
get_data_trans                         internal static bit(9)                   initial dcl 12-8
get_edit_trans                         internal static bit(9)                   initial dcl 12-8
get_file                               internal static bit(9)                   initial dcl 12-8
get_list_trans                         internal static bit(9)                   initial dcl 12-8
get_string                             internal static bit(9)                   initial dcl 12-8
greater_or_equal                       internal static bit(9)                   initial dcl 12-8
greater_than                           internal static bit(9)                   initial dcl 12-8
half_to_word                           internal static bit(9)                   initial dcl 12-8
imag_fun                               internal static bit(9)                   initial dcl 12-8
index_after_fun                        internal static bit(9)                   initial dcl 12-8
index_before_fun                       internal static bit(9)                   initial dcl 12-8
index_fun                              internal static bit(9)                   initial dcl 12-8
index_rev_fun                          internal static bit(9)                   initial dcl 12-8
join                                   internal static bit(9)                   initial dcl 12-8
jump                                   internal static bit(9)                   initial dcl 12-8
jump_false                             internal static bit(9)                   initial dcl 12-8
jump_if_eq                             internal static bit(9)                   initial dcl 12-8
jump_if_ge                             internal static bit(9)                   initial dcl 12-8
jump_if_gt                             internal static bit(9)                   initial dcl 12-8
jump_if_le                             internal static bit(9)                   initial dcl 12-8
jump_if_lt                             internal static bit(9)                   initial dcl 12-8
jump_if_ne                             internal static bit(9)                   initial dcl 12-8
jump_true                              internal static bit(9)                   initial dcl 12-8
label_array_element_node               internal static bit(9)                   initial dcl 11-5
label_node                             internal static bit(9)                   initial dcl 11-5
label_size                             internal static fixed bin(8,0)           initial dcl 2-5
length_fun                             internal static bit(9)                   initial dcl 12-8
less_or_equal                          internal static bit(9)                   initial dcl 12-8
less_than                              internal static bit(9)                   initial dcl 12-8
line_format                            internal static bit(9)                   initial dcl 12-8
list_node                              internal static bit(9)                   initial dcl 11-5
locate_file                            internal static bit(9)                   initial dcl 12-8
lock_file                              internal static bit(9)                   initial dcl 12-8
lock_fun                               internal static bit(9)                   initial dcl 12-8
log10_fun                              internal static bit(9)                   initial dcl 12-8
log2_fun                               internal static bit(9)                   initial dcl 12-8
log_fun                                internal static bit(9)                   initial dcl 12-8
loop                                   internal static bit(9)                   initial dcl 12-8
machine_state_node                     internal static bit(9)                   initial dcl 11-5
make_desc                              internal static bit(9)                   initial dcl 12-8
max_block_number                       internal static fixed bin(17,0)          initial dcl 8-74
max_dec_scale                          internal static fixed bin(8,0)           initial dcl 2-5
max_fun                                internal static bit(9)                   initial dcl 12-8
max_index_register_value               internal static fixed bin(31,0)          initial dcl 2-38
max_length_p                           internal static fixed bin(8,0)           initial dcl 2-5
max_list_elements                      internal static fixed bin(17,0)          initial dcl 4-12
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 3-15
max_offset                             internal static fixed bin(8,0)           initial array dcl 2-5
max_p_fix_bin_1                        internal static fixed bin(8,0)           initial dcl 2-5
max_p_fix_dec                          internal static fixed bin(8,0)           initial dcl 2-5
max_p_flt_bin_1                        internal static fixed bin(8,0)           initial dcl 2-5
max_p_xreg                             internal static fixed bin(8,0)           initial dcl 2-5
max_short_size                         internal static fixed bin(8,0)           initial array dcl 2-5
min_dec_scale                          internal static fixed bin(8,0)           initial dcl 2-5
min_fun                                internal static bit(9)                   initial dcl 12-8
mod_bit                                internal static bit(9)                   initial dcl 12-8
mod_byte                               internal static bit(9)                   initial dcl 12-8
mod_fun                                internal static bit(9)                   initial dcl 12-8
mod_half                               internal static bit(9)                   initial dcl 12-8
mod_word                               internal static bit(9)                   initial dcl 12-8
mult                                   internal static bit(9)                   initial dcl 12-8
n                                      automatic       fixed bin(18,0)          dcl 27
negate                                 internal static bit(9)                   initial dcl 12-8
nop                                    internal static bit(9)                   initial dcl 12-8
not_bits                               internal static bit(9)                   initial dcl 12-8
not_equal                              internal static bit(9)                   initial dcl 12-8
off_fun                                internal static bit(9)                   initial dcl 12-8
open_file                              internal static bit(9)                   initial dcl 12-8
operator_node                          internal static bit(9)                   initial dcl 11-5
or_bits                                internal static bit(9)                   initial dcl 12-8
pack                                   internal static bit(9)                   initial dcl 12-8
packed_digits_per_char                 internal static fixed bin(8,0)           initial dcl 2-5
packed_digits_per_word                 internal static fixed bin(8,0)           initial dcl 2-5
page_format                            internal static bit(9)                   initial dcl 12-8
param_desc_ptr                         internal static bit(9)                   initial dcl 12-8
param_ptr                              internal static bit(9)                   initial dcl 12-8
pl1_mod_fun                            internal static bit(9)                   initial dcl 12-8
pl1_stat_$xeq_tree_area_ptr            external static pointer                  dcl 1-7
prefix_plus                            internal static bit(9)                   initial dcl 12-8
ptr_fun                                internal static bit(9)                   initial dcl 12-8
put_control                            internal static bit(9)                   initial dcl 12-8
put_data_trans                         internal static bit(9)                   initial dcl 12-8
put_edit_trans                         internal static bit(9)                   initial dcl 12-8
put_field                              internal static bit(9)                   initial dcl 12-8
put_field_chk                          internal static bit(9)                   initial dcl 12-8
put_file                               internal static bit(9)                   initial dcl 12-8
put_list_trans                         internal static bit(9)                   initial dcl 12-8
put_string                             internal static bit(9)                   initial dcl 12-8
r_parn                                 internal static bit(9)                   initial dcl 12-8
range_ck                               internal static bit(9)                   initial dcl 12-8
rank_fun                               internal static bit(9)                   initial dcl 12-8
read_file                              internal static bit(9)                   initial dcl 12-8
real_fun                               internal static bit(9)                   initial dcl 12-8
record_io                              internal static bit(9)                   initial dcl 12-8
refer                                  internal static bit(9)                   initial dcl 12-8
rel_fun                                internal static bit(9)                   initial dcl 12-8
repeat_fun                             internal static bit(9)                   initial dcl 12-8
return_bits                            internal static bit(9)                   initial dcl 12-8
return_string                          internal static bit(9)                   initial dcl 12-8
return_value                           internal static bit(9)                   initial dcl 12-8
return_words                           internal static bit(9)                   initial dcl 12-8
reverse_fun                            internal static bit(9)                   initial dcl 12-8
revert_on                              internal static bit(9)                   initial dcl 12-8
rewrite_file                           internal static bit(9)                   initial dcl 12-8
round_fun                              internal static bit(9)                   initial dcl 12-8
search_fun                             internal static bit(9)                   initial dcl 12-8
search_rev_fun                         internal static bit(9)                   initial dcl 12-8
segno_fun                              internal static bit(9)                   initial dcl 12-8
setbitno_fun                           internal static bit(9)                   initial dcl 12-8
setcharno_fun                          internal static bit(9)                   initial dcl 12-8
sf_par_node                            internal static bit(9)                   initial dcl 11-5
sign_fun                               internal static bit(9)                   initial dcl 12-8
signal_on                              internal static bit(9)                   initial dcl 12-8
sin_fun                                internal static bit(9)                   initial dcl 12-8
sind_fun                               internal static bit(9)                   initial dcl 12-8
skip_format                            internal static bit(9)                   initial dcl 12-8
source_node                            internal static bit(9)                   initial dcl 11-5
sqrt_fun                               internal static bit(9)                   initial dcl 12-8
stack_ptr                              internal static bit(9)                   initial dcl 12-8
stackbaseptr_fun                       internal static bit(9)                   initial dcl 12-8
stackframeptr_fun                      internal static bit(9)                   initial dcl 12-8
stacq_fun                              internal static bit(9)                   initial dcl 12-8
statement_node                         internal static bit(9)                   initial dcl 11-5
std_arg_list                           internal static bit(9)                   initial dcl 12-8
std_call                               internal static bit(9)                   initial dcl 12-8
std_entry                              internal static bit(9)                   initial dcl 12-8
std_return                             internal static bit(9)                   initial dcl 12-8
stop                                   internal static bit(9)                   initial dcl 12-8
stream_prep                            internal static bit(9)                   initial dcl 12-8
sub                                    internal static bit(9)                   initial dcl 12-8
symbol_node                            internal static bit(9)                   initial dcl 11-5
tan_fun                                internal static bit(9)                   initial dcl 12-8
tand_fun                               internal static bit(9)                   initial dcl 12-8
temporary_node                         internal static bit(9)                   initial dcl 11-5
terminate_trans                        internal static bit(9)                   initial dcl 12-8
token_node                             internal static bit(9)                   initial dcl 11-5
translate_fun                          internal static bit(9)                   initial dcl 12-8
trunc_fun                              internal static bit(9)                   initial dcl 12-8
units_per_word                         internal static fixed bin(8,0)           initial array dcl 2-5
unlock_file                            internal static bit(9)                   initial dcl 12-8
unpack                                 internal static bit(9)                   initial dcl 12-8
vclock_fun                             internal static bit(9)                   initial dcl 12-8
verify_fun                             internal static bit(9)                   initial dcl 12-8
verify_ltrim_fun                       internal static bit(9)                   initial dcl 12-8
verify_rev_fun                         internal static bit(9)                   initial dcl 12-8
verify_rtrim_fun                       internal static bit(9)                   initial dcl 12-8
word_to_mod2                           internal static bit(9)                   initial dcl 12-8
word_to_mod4                           internal static bit(9)                   initial dcl 12-8
word_to_mod8                           internal static bit(9)                   initial dcl 12-8
wordno_fun                             internal static bit(9)                   initial dcl 12-8
write_file                             internal static bit(9)                   initial dcl 12-8
x_format                               internal static bit(9)                   initial dcl 12-8
xeq_tree_area                          based           area(1024)               dcl 1-5
xor_bits                               internal static bit(9)                   initial dcl 12-8

NAMES DECLARED BY EXPLICIT CONTEXT.
all                             000417 constant        label                    dcl 179 ref 171
cf                              000715 constant        label                    dcl 258 ref 231
compile_formats                 000007 constant        entry                    external dcl 22
fill                            000200 constant        label                    dcl 114 ref 102
generate                        000465 constant        entry                    internal dcl 187 ref 80 227 260 261
loop                            000505 constant        label                    dcl 204 in procedure "generate" ref 296
loop                            000347 constant        label                    dcl 163 in procedure "preprocess" ref 151
nf                              000172 constant        label                    dcl 105 ref 93
preprocess                      000256 constant        entry                    internal dcl 136 ref 64 175
step                            000461 constant        label                    dcl 183 in procedure "preprocess" ref 165 167 169
                                                                                  176
step                            001033 constant        label                    dcl 290 in procedure "generate" ref 228 238 256 263
                                                                                  277
unique                          000176 constant        label                    dcl 110 ref 83

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1214        1244    1067        1224
Length      1654    1067        30         373     125           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
compile_formats                      98 external procedure  is an external procedure.  
preprocess                          106 internal procedure  calls itself recursively.  
generate                            108 internal procedure  calls itself recursively.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
compile_formats          000100 p                           compile_formats
                         000102 q                           compile_formats
                         000104 p1                          compile_formats
                         000106 q1                          compile_formats
                         000110 fp                          compile_formats
                         000112 dont_pool                   compile_formats
                         000113 first                       compile_formats
                         000114 size                        compile_formats
                         000115 n_bits                      compile_formats
                         000116 use                         compile_formats
                         000117 prev_use                    compile_formats
                         000120 delta                       compile_formats
                         000121 loc                         compile_formats
generate                 000100 pt                          generate
                         000102 p                           generate
                         000104 q                           generate
                         000106 rp                          generate
                         000110 s                           generate
                         000112 prev                        generate
                         000114 start                       generate
                         000115 pos                         generate
                         000116 prev_pos                    generate
                         000117 i                           generate
                         000120 code                        generate
preprocess               000100 qi                          preprocess
                         000102 fv                          preprocess
                         000104 op                          preprocess
                         000106 s                           preprocess
                         000110 i                           preprocess

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        call_int_this       call_int_other      return              ext_entry           int_entry
alloc_based

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
e_v                           e_v$l_v

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
cg_static_$cur_level          cg_static_$format_list        cg_static_$text_base          cg_static_$text_pos
cg_static_$text_reloc_base    pl1_stat_$tree_area_ptr




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     22 000006        58 000014        59 000017        61 000024        62 000027        63 000033        64 000036
     65 000044        66 000047        70 000050        71 000054        73 000060        74 000066        76 000067
     78 000070        79 000071        80 000074        81 000110        83 000116        87 000120        89 000122
     90 000125        92 000132        93 000135        94 000140        99 000155       100 000156       101 000160
    102 000171       105 000172       106 000175       110 000176       114 000200       115 000204       116 000207
    118 000211       119 000214       120 000221       122 000224       123 000227       124 000236       126 000245
    127 000247       129 000250       130 000253       134 000254       136 000255       150 000263       151 000267
    153 000274       154 000276       155 000300       157 000306       158 000317       160 000321       163 000347
    164 000361       165 000363       167 000367       169 000373       171 000401       173 000402       175 000407
    176 000416       179 000417       180 000430       181 000456       183 000461       185 000463       187 000464
    200 000472       201 000501       202 000503       204 000505       205 000510       206 000514       208 000520
    209 000521       211 000534       213 000536       214 000541       215 000550       217 000554       218 000556
    219 000560       220 000561       222 000565       223 000572       225 000577       227 000605       228 000623
    231 000624       233 000626       234 000631       236 000635       237 000637       238 000641       241 000642
    243 000645       244 000647       246 000652       247 000657       248 000666       249 000675       251 000676
    252 000706       255 000712       256 000714       258 000715       260 000717       261 000735       263 000760
    266 000761       274 000763       276 000772       277 000775       280 000776       281 001005       282 001007
    284 001013       285 001017       286 001022       287 001023       288 001031       290 001033       292 001050
    293 001052       295 001054       296 001057       298 001063


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
