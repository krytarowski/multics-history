	COMPILATION LISTING OF SEGMENT print_linkage_usage
	Compiled by: Multics PL/I Compiler, Release 29, of July 28, 1986
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 11/05/86  1038.4 mst Wed
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 print_linkage_usage: plu: proc;
       12 
       13 /* procedure to print current combined linkage segment
       14*   usage using LOT and ISOT as a guide */
       15 
       16 /* originally coded 10/69 by J W Gintell
       17*   modified several times in 1969 and 1970 by JWG
       18*   modified to print out static stuff and convert to v2pl1 SHW 1/31/74
       19*   re-written to handle separate static (via the ISOT) 9/8/75 by M. Weaver
       20*   modified 06/82 by F. W. Martinson to check arguments
       21**/
       22 
       23 dcl (i, j, n, k, owner_segno) fixed bin;
       24 dcl (l, l1, l2, l3, total_static, next_ls, static_lng) fixed bin (18);
       25 dcl (hc_seg_count, highest_segno) fixed bin;
       26 dcl  type fixed bin (2);
       27 dcl  mode fixed bin (5);
       28 dcl  bitcnt fixed bin (24);
       29 dcl  code fixed bin (35);
       30 
       31 dcl (p, statp) ptr;
       32 
       33 dcl  pathname char (168) aligned;
       34 dcl  entry char (32) aligned;
       35 
       36 dcl 1 t (1024) aligned,				/* keeps merged lot and isot */
       37     2 sect_ptr ptr unaligned,				/* ptr to beginning of section */
       38     2 segno fixed bin,				/* segment number of section's owner */
       39     2 sep_stat bit (1) aligned,			/* "1"b->separate static */
       40     2 sect_type fixed bin;				/* 1->linkage section, 2->static section */
       41 
       42 dcl  ti (2000) fixed bin;				/* keeps sorted indices into t */
       43 
       44 dcl (baseno, baseptr, bin, bit, convert, divide, fixed, rel, ptr, substr, unspec) builtin;
       45 
       46 dcl  com_err_ entry () options (variable);
       47 dcl  cu_$arg_count entry (fixed bin);
       48 dcl  cu_$stack_frame_ptr entry returns (ptr);
       49 dcl  hcs_$high_low_seg_count entry (fixed bin, fixed bin);
       50 dcl  hcs_$status_mins ext entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35));
       51 dcl  hcs_$fs_get_mode entry (ptr, fixed bin (5), fixed bin (35));
       52 dcl  hcs_$fs_get_path_name entry (ptr, char (*) aligned, fixed bin, char (*) aligned, fixed bin (35));
       53 dcl  ioa_ entry options (variable);
       54 
       55 
  1     1 /* 	BEGIN INCLUDE FILE ... stack_header.incl.pl1 .. 3/72 Bill Silver  */
  1     2 /*	modified 7/76 by M. Weaver for *system links and more system use of areas */
  1     3 /*	modified 3/77 by M. Weaver to add rnt_ptr */
  1     4 /*	Modified April 1983 by C. Hornig for tasking */
  1     5 
  1     6 /****^  HISTORY COMMENTS:
  1     7*  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
  1     8*     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
  1     9*     added the heap_header_ptr definition.
  1    10*  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
  1    11*     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
  1    12*     Modified to support control point management.  These changes were actually
  1    13*     made in February 1985 by G. Palter.
  1    14*  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
  1    15*     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
  1    16*     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
  1    17*     bit pad after cur_lot_size for the cpm_enabled. This was done to save some
  1    18*     space int the stack header and change the cpd_ptr unal to cpm_data_ptr
  1    19*     (ITS pair).
  1    20*                                                   END HISTORY COMMENTS */
  1    21 
  1    22 /* format: style2 */
  1    23 
  1    24      dcl	   sb		      ptr;		/* the  main pointer to the stack header */
  1    25 
  1    26      dcl	   1 stack_header	      based (sb) aligned,
  1    27 	     2 pad1	      (4) fixed bin,	/*  (0) also used as arg list by outward_call_handler  */
  1    28 	     2 cpm_data_ptr	      ptr,		/*  (4)  pointer to control point which owns this stack */
  1    29 	     2 combined_stat_ptr  ptr,		/*  (6)  pointer to area containing separate static */
  1    30 	     2 clr_ptr	      ptr,		/*  (8)  pointer to area containing linkage sections */
  1    31 	     2 max_lot_size	      fixed bin (17) unal,	/*  (10) DU  number of words allowed in lot */
  1    32 	     2 main_proc_invoked  fixed bin (11) unal,	/*  (10) DL  nonzero if main procedure invoked in run unit */
  1    33 	     2 have_static_vlas   bit (1) unal,		/*  (10) DL  "1"b if (very) large arrays are being used in static */
  1    34 	     2 pad4	      bit (2) unal,
  1    35 	     2 run_unit_depth     fixed bin (2) unal,	/*  (10) DL  number of active run units stacked */
  1    36 	     2 cur_lot_size	      fixed bin (17) unal,	/*  (11) DU  number of words (entries) in lot */
  1    37 	     2 cpm_enabled	      bit (18) unal,	/*  (11) DL  non-zero if control point management is enabled */
  1    38 	     2 system_free_ptr    ptr,		/*  (12)  pointer to system storage area */
  1    39 	     2 user_free_ptr      ptr,		/*  (14)  pointer to user storage area */
  1    40 	     2 null_ptr	      ptr,		/*  (16)  */
  1    41 	     2 stack_begin_ptr    ptr,		/*  (18)  pointer to first stack frame on the stack */
  1    42 	     2 stack_end_ptr      ptr,		/*  (20)  pointer to next useable stack frame */
  1    43 	     2 lot_ptr	      ptr,		/*  (22)  pointer to the lot for the current ring */
  1    44 	     2 signal_ptr	      ptr,		/*  (24)  pointer to signal procedure for current ring */
  1    45 	     2 bar_mode_sp	      ptr,		/*  (26)  value of sp before entering bar mode */
  1    46 	     2 pl1_operators_ptr  ptr,		/*  (28)  pointer to pl1_operators_$operator_table */
  1    47 	     2 call_op_ptr	      ptr,		/*  (30)  pointer to standard call operator */
  1    48 	     2 push_op_ptr	      ptr,		/*  (32)  pointer to standard push operator */
  1    49 	     2 return_op_ptr      ptr,		/*  (34)  pointer to standard return operator */
  1    50 	     2 return_no_pop_op_ptr
  1    51 			      ptr,		/*  (36)  pointer to standard return / no pop operator */
  1    52 	     2 entry_op_ptr	      ptr,		/*  (38)  pointer to standard entry operator */
  1    53 	     2 trans_op_tv_ptr    ptr,		/*  (40)  pointer to translator operator ptrs */
  1    54 	     2 isot_ptr	      ptr,		/*  (42)  pointer to ISOT */
  1    55 	     2 sct_ptr	      ptr,		/*  (44)  pointer to System Condition Table */
  1    56 	     2 unwinder_ptr	      ptr,		/*  (46)  pointer to unwinder for current ring */
  1    57 	     2 sys_link_info_ptr  ptr,		/*  (48)  pointer to *system link name table */
  1    58 	     2 rnt_ptr	      ptr,		/*  (50)  pointer to Reference Name Table */
  1    59 	     2 ect_ptr	      ptr,		/*  (52)  pointer to event channel table */
  1    60 	     2 assign_linkage_ptr ptr,		/*  (54)  pointer to storage for (obsolete) hcs_$assign_linkage */
  1    61 	     2 heap_header_ptr     ptr,		/*  (56)  pointer to the heap header for this ring */
  1    62 	     2 trace,
  1    63 	       3 frames,
  1    64 	         4 count	      fixed bin,		/*  (58)  number of trace frames */
  1    65 	         4 top_ptr	      ptr unal,		/*  (59)  pointer to last trace frame */
  1    66 	       3 in_trace	      bit (36) aligned,	/*  (60)  trace antirecursion flag */
  1    67 	     2 pad2	      bit (36),		/*  (61) */
  1    68                2 pad5	      pointer;		/*  (62)  pointer to future stuff */
  1    69 
  1    70 /*	The following offset refers to a table within the  pl1  operator table.  */
  1    71 
  1    72      dcl	   tv_offset	      fixed bin init (361) internal static;
  1    73 						/* (551) octal */
  1    74 
  1    75 
  1    76 /*	The following constants are offsets within this transfer vector table.  */
  1    77 
  1    78      dcl	   (
  1    79 	   call_offset	      fixed bin init (271),
  1    80 	   push_offset	      fixed bin init (272),
  1    81 	   return_offset	      fixed bin init (273),
  1    82 	   return_no_pop_offset   fixed bin init (274),
  1    83 	   entry_offset	      fixed bin init (275)
  1    84 	   )		      internal static;
  1    85 
  1    86 
  1    87 
  1    88 
  1    89 
  1    90 /*	The following declaration  is an overlay of the whole stack header.   Procedures which
  1    91*	move the whole stack header should use this overlay.
  1    92**/
  1    93 
  1    94      dcl	   stack_header_overlay   (size (stack_header)) fixed bin based (sb);
  1    95 
  1    96 
  1    97 
  1    98 /* 	END INCLUDE FILE ... stack_header.incl.pl1 */
       56 
       57 
       58 
  2     1 /* BEGIN INCLUDE FILE --  lot.incl.pl1   S.Webber 9/74, Modified by R. Bratt 04/76, modified by M. Weaver 7/76 */
  2     2 /* modified by M. Weaver 3/77 */
  2     3 
  2     4 dcl  lotp ptr;
  2     5 
  2     6 dcl 1 lot based (lotp) aligned,
  2     7     2 lp (0:9999) ptr unaligned;			/* array of packed pointers to linkage sections */
  2     8 
  2     9 dcl lot_fault bit (36) aligned static options (constant) init ("111000000000000000000000000000000000"b);
  2    10 						/* lot fault has fault code = 0 and offset = 0 */
  2    11 
  2    12 dcl  isotp ptr;
  2    13 dcl 1 isot based (isotp) aligned,
  2    14     2 isp (0:9999) ptr unaligned;
  2    15 
  2    16 dcl 1 isot1 (0 :9999) aligned based,
  2    17     2 flags unaligned,
  2    18       3 fault bit (2) unaligned,
  2    19       3 system bit (1) unaligned,
  2    20       3 mbz bit (6) unaligned,
  2    21     2 fault_code fixed bin (8) unaligned,
  2    22     2 static_offset bit (18) unaligned;
  2    23 
  2    24 
  2    25 /* END INCLUDE FILE  lot.incl.pl1 */
       59 
       60 
  3     1 /* BEGIN INCLUDE FILE linkdcl.incl.pl1 --- last modified 15 Nov 1971 by C Garman */
  3     2 
  3     3 /* Last Modified (Date and Reason):
  3     4*   6/75 by M.Weaver to add virgin_linkage_header declaration
  3     5*   6/75 by S.Webber to comment existing structures better
  3     6*   9/77 by M. Weaver to add run_depth to link
  3     7*   2/83 by M. Weaver to add linkage header flags and change run_depth precision
  3     8**/
  3     9 
  3    10 /* format: style3 */
  3    11 dcl	1 link		based aligned,		/* link pair in linkage section */
  3    12 	  2 head_ptr	bit (18) unal,		/* rel pointer to beginning of linkage section */
  3    13 	  2 ringno	bit (3) unal,
  3    14 	  2 mbz		bit (6) unal,
  3    15 	  2 run_depth	fixed bin (2) unal,		/* run unit depth, filled when link is snapped */
  3    16 	  2 ft2		bit (6) unal,		/* fault tag. 46(8) if not snapped, 43(8) if snapped */
  3    17 	  2 exp_ptr	bit (18) unal,		/* pointer (rel to defs) of expression word */
  3    18 	  2 mbz2		bit (12) unal,
  3    19 	  2 modifier	bit (6) unal;		/* modifier to be left in snapped link */
  3    20 
  3    21 dcl	1 exp_word	based aligned,		/* expression word in link definition */
  3    22 	  2 type_ptr	bit (18) unal,		/* pointer (rel to defs) of type pair structure */
  3    23 	  2 exp		bit (18) unal;		/* constant expression to be added in when snapping link */
  3    24 
  3    25 dcl	1 type_pair	based aligned,		/* type pair in link definition */
  3    26 	  2 type		bit (18) unal,		/* type of link. may be 1,2,3,4,5, or 6 */
  3    27 	  2 trap_ptr	bit (18) unal,		/* pointer (rel to defs) to the trap word */
  3    28 	  2 seg_ptr	bit (18) unal,		/* pointer to ACC reference name for segment referenced */
  3    29 	  2 ext_ptr	bit (18) unal;		/* pointer (rel to defs)  of ACC segdef name */
  3    30 
  3    31 dcl	1 header		based aligned,		/* linkage block header */
  3    32 	  2 def_ptr	ptr,			/* pointer to definition section */
  3    33 	  2 symbol_ptr	ptr unal,			/* pointer to symbol section in object segment */
  3    34 	  2 original_linkage_ptr
  3    35 			ptr unal,			/* pointer to linkage section in object segment */
  3    36 	  2 unused	bit (72),
  3    37 	  2 stats,
  3    38 	    3 begin_links	bit (18) unal,		/* offset (rel to this section) of first link */
  3    39 	    3 block_length	bit (18) unal,		/* number of words in this linkage section */
  3    40 	    3 segment_number
  3    41 			bit (18) unal,		/* text segment number associated with this section */
  3    42 	    3 static_length bit (18) unal;		/* number of words of static for this segment */
  3    43 
  3    44 dcl	1 linkage_header_flags
  3    45 			aligned based,		/* overlay of def_ptr for flags */
  3    46 	  2 pad1		bit (28) unaligned,		/* flags are in first word */
  3    47 	  2 static_vlas	bit (1) unaligned,		/* static section "owns" some LA/VLA segments */
  3    48 	  2 perprocess_static
  3    49 			bit (1) unaligned,		/* 1 copy of static section is used by all tasks/run units */
  3    50 	  2 pad2		bit (6) unaligned;
  3    51 
  3    52 dcl	1 virgin_linkage_header
  3    53 			aligned based,		/* template for linkage header in object segment */
  3    54 	  2 pad		bit (30) unaligned,		/* is filled in by linker */
  3    55 	  2 defs_in_link	bit (6) unaligned,		/* =o20 if defs in linkage (nonstandard) */
  3    56 	  2 def_offset	bit (18) unaligned,		/* offset of definition section */
  3    57 	  2 first_ref_relp	bit (18) unaligned,		/* offset of trap-at-first-reference offset array */
  3    58 	  2 filled_in_later bit (144),
  3    59 	  2 link_begin	bit (18) unaligned,		/* offset of first link */
  3    60 	  2 linkage_section_lng
  3    61 			bit (18) unaligned,		/* length of linkage section */
  3    62 	  2 segno_pad	bit (18) unaligned,		/* will be segment number of copied linkage */
  3    63 	  2 static_length	bit (18) unaligned;		/* length of static section */
  3    64 
  3    65 
  3    66 dcl	1 trap_word	based aligned,		/* trap word in link definition */
  3    67 	  2 call_ptr	bit (18) unal,		/* pointer (rel to link) of link to trap procedure */
  3    68 	  2 arg_ptr	bit (18) unal;		/* pointer (rel to link) of link to arg info for trap proc */
  3    69 
  3    70 dcl	1 name		based aligned,		/* storage of ASCII names in definitions */
  3    71 	  2 nchars	bit (9) unaligned,		/* number of characters in name */
  3    72 	  2 char_string	char (31) unaligned;	/* 31-character name */
  3    73 
  3    74 /* END INCLUDE FILE linkdcl.incl.pl1 */
       61 
       62 
       63 
       64 	call cu_$arg_count (n);			/* Make sure there are no arguments */
       65 	if n ^= 0 then do;
       66 	     call com_err_ (0, "print_linkage_usage", " This command takes no arguments.");
       67 	     return;
       68 	end;
       69 						/* Get a pointer to the current stack frame.  From that construct a pointer to the
       70*						   base of the stack.  Then pick up pointers to the LOT and the ISOT from the base of the stack. */
       71 
       72 	sb = cu_$stack_frame_ptr ();
       73 	sb = ptr (sb, 0);
       74 	lotp = sb -> stack_header.lot_ptr;
       75 	isotp = sb -> stack_header.isot_ptr;
       76 
       77 /* Obtain the range of valid non ring 0 segment numbers. */
       78 
       79 	call hcs_$high_low_seg_count (highest_segno, hc_seg_count);
       80 	highest_segno = highest_segno + hc_seg_count;
       81 
       82 /* Must end up with a list ordered according to location in the cls.
       83*   First merge LOT and ISOT and initialize the index array used to keep
       84*   track of the sorting.  ASSUME that an isot entry is not filled in unless
       85*   the corresponding lot entry is. */
       86 
       87 	total_static,
       88 	     n = 0;
       89 
       90 	do i = hc_seg_count+1 to highest_segno;
       91 	     if unspec (lot.lp (i))			/* nonzero lot entry */
       92 	     then if substr (unspec (lot.lp (i)), 1, 2) ^= "11"b then do; /* no packed ptr fault */
       93 		     ti (n+1), n = n+1;
       94 		     t (n).sect_ptr = lot.lp (i);
       95 		     t (n).segno = i;
       96 		     t (n).sect_type = 1;
       97 		     t (n).sep_stat = "0"b;
       98 		     if unspec (isot.isp (i))
       99 		     then if isot.isp (i) ^= lot.lp (i)
      100 			then if substr (unspec (isot.isp (i)), 1, 2) ^= "11"b then do;
      101 						/* not a packed ptr fault */
      102 				t (n).sep_stat = "1"b;
      103 				ti (n+1), n = n+1;
      104 				t (n).sect_ptr = isot.isp (i);
      105 				t (n).segno = i;
      106 				t (n).sect_type = 2;
      107 			     end;
      108 		end;
      109 	end;
      110 
      111 	call ioa_ ("^/^/^-Current linkage and static section usage"); /* want linkage fault now */
      112 
      113 /* sort merged list by sorting ti */
      114 
      115 	do i = 1 to n-1;
      116 	     do j = i to 1 by -1 while (unspec (t (ti (j)).sect_ptr) > unspec (t (ti (j+1)).sect_ptr));
      117 		k = ti (j);
      118 		ti (j) = ti (j+1);
      119 		ti (j+1) = k;
      120 	     end;
      121 	end;
      122 
      123 /* now sorted  */
      124 
      125 	call ioa_ ("^/^5xsegment^29xlinkage^4xsize^7xstatic^5xsize^/");
      126 
      127 	do i = 1 to n;				/* print each entry, sorted */
      128 
      129 	     owner_segno = t (ti (i)).segno;		/* copy segment number of section's owner */
      130 	     static_lng = bin (lot.lp (owner_segno) -> header.stats.static_length, 18);
      131 
      132 	     if t (ti (i)).sect_type = 2 then go to nope; /* don't print  separately  */
      133 
      134 	     call hcs_$fs_get_path_name (baseptr (owner_segno), pathname, j, entry, code);
      135 	     if code ^= 0 then entry = "NOT A LINKAGE SECTION";
      136 
      137 /* scan for end of section */
      138 /* p is ptr to base of section
      139*   l is offset of last location in linkage section
      140*   l1 = 0mod(2) value of l
      141*   l2 = offset of beginning of linkage section
      142*   l3 = true length of linkage section
      143**/
      144 
      145 	     p = t (ti (i)).sect_ptr;
      146 	     total_static = total_static + static_lng;
      147 
      148 	     l2 = fixed (rel (p), 18);
      149 	     l3 = fixed (p -> header.stats.block_length, 18);
      150 	     l = l2 + l3;
      151 	     l1 = divide (l+1, 2, 18, 0)*2;
      152 
      153 	     if t (ti (i)).sep_stat then do;		/* separate static */
      154 		statp = t (ti (i)+1).sect_ptr;
      155 		call ioa_ ("^32a^4o^6o^7o^7o^8o^7o^7o", entry, owner_segno,
      156 		     bin (baseno (p), 18), l2, l3, bin (baseno (statp), 18), bin (rel (statp), 18),
      157 		     static_lng);
      158 	     end;
      159 
      160 	     else call ioa_ ("^32a^4o^6o^7o^7o^15x^7o",
      161 		entry, owner_segno, bin (baseno (p), 18), l2, l3, static_lng);
      162 
      163 /*
      164*   !* if not at end of sorted list and next entry has unused segno
      165*   then check for unused space *!
      166*
      167*   check_for_hole:
      168*   if i = n then go to nope;
      169*   if baseno (t (ti (i)).sect_ptr) ^= baseno (t (ti (i+1)).sect_ptr) then go to nope;
      170*   next_ls = fixed (rel (t (ti (i+1)).sect_ptr), 18);
      171*   if l1 < next_ls then do;
      172*   call ioa_ ("NOT A LINKAGE SECTION               ^6o^7o^7o",
      173*   fixed (baseno (t (ti (i)).sect_ptr), 18), l, next_ls - l);
      174*   end;
      175**/
      176 
      177 nope:	end;
      178 
      179 	call ioa_ ("^/Total static = ^o^/", total_static);
      180 
      181      end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/04/86  1033.7  print_linkage_usage.pl1           >special_ldd>install>MR12.0-1206>print_linkage_usage.pl1
56           1    11/04/86  1324.3  stack_header.incl.pl1             >special_ldd>install>MR12.0-1206>stack_header.incl.pl1
59           2    08/05/77  1022.4  lot.incl.pl1                      >ldd>include>lot.incl.pl1
61           3    07/27/83  0910.0  linkdcl.incl.pl1                  >ldd>include>linkdcl.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
baseno                                                 builtin function         dcl 44 ref 155 155 155 155 160 160
baseptr                                                builtin function         dcl 44 ref 134 134
bin                                                    builtin function         dcl 44 ref 130 155 155 155 155 155 155 160 160
block_length              6(18)        based           bit(18)                  level 3 packed unaligned dcl 3-31 ref 149
code                            000115 automatic       fixed bin(35,0)          dcl 29 set ref 134* 135
com_err_                        000010 constant        entry                    external dcl 46 ref 66
cu_$arg_count                   000012 constant        entry                    external dcl 47 ref 64
cu_$stack_frame_ptr             000014 constant        entry                    external dcl 48 ref 72
divide                                                 builtin function         dcl 44 ref 151
entry                           000174 automatic       char(32)                 dcl 34 set ref 134* 135* 155* 160*
fixed                                                  builtin function         dcl 44 ref 148 149
hc_seg_count                    000113 automatic       fixed bin(17,0)          dcl 25 set ref 79* 80 90
hcs_$fs_get_path_name           000020 constant        entry                    external dcl 52 ref 134
hcs_$high_low_seg_count         000016 constant        entry                    external dcl 49 ref 79
header                                 based           structure                level 1 dcl 3-31
highest_segno                   000114 automatic       fixed bin(17,0)          dcl 25 set ref 79* 80* 80 90
i                               000100 automatic       fixed bin(17,0)          dcl 23 set ref 90* 91 91 94 95 98 98 98 98 104 105*
                                                                                  115* 116* 127* 129 132 145 153 154*
ioa_                            000022 constant        entry                    external dcl 53 ref 111 125 155 160 179
isot                                   based           structure                level 1 dcl 2-13
isot_ptr                 52            based           pointer                  level 2 dcl 1-26 ref 75
isotp                           014130 automatic       pointer                  dcl 2-12 set ref 75* 98 98 98 104
isp                                    based           pointer                  array level 2 packed unaligned dcl 2-13 ref 98 98 98
                                                                                  104
j                               000101 automatic       fixed bin(17,0)          dcl 23 set ref 116* 116 116* 117 118 118 119* 134*
k                               000103 automatic       fixed bin(17,0)          dcl 23 set ref 117* 119
l                               000105 automatic       fixed bin(18,0)          dcl 24 set ref 150* 151
l1                              000106 automatic       fixed bin(18,0)          dcl 24 set ref 151*
l2                              000107 automatic       fixed bin(18,0)          dcl 24 set ref 148* 150 155* 160*
l3                              000110 automatic       fixed bin(18,0)          dcl 24 set ref 149* 150 155* 160*
lot                                    based           structure                level 1 dcl 2-6
lot_ptr                  26            based           pointer                  level 2 dcl 1-26 ref 74
lotp                            014126 automatic       pointer                  dcl 2-4 set ref 74* 91 91 94 98 130
lp                                     based           pointer                  array level 2 packed unaligned dcl 2-6 ref 91 91 94
                                                                                  98 130
n                               000102 automatic       fixed bin(17,0)          dcl 23 set ref 64* 65 87* 93 93 93* 94 95 96 97 102
                                                                                  103 103 103* 104 105 106 115 127
owner_segno                     000104 automatic       fixed bin(17,0)          dcl 23 set ref 129* 130 134 134 155* 160*
p                               000116 automatic       pointer                  dcl 31 set ref 145* 148 149 155 155 160 160
pathname                        000122 automatic       char(168)                dcl 33 set ref 134*
ptr                                                    builtin function         dcl 44 ref 73
rel                                                    builtin function         dcl 44 ref 148 155 155
sb                              014124 automatic       pointer                  dcl 1-24 set ref 72* 73* 73 74 75
sect_ptr                        000204 automatic       pointer                  array level 2 packed unaligned dcl 36 set ref 94*
                                                                                  104* 116 116 145 154
sect_type                 3     000204 automatic       fixed bin(17,0)          array level 2 dcl 36 set ref 96* 106* 132
segno                     1     000204 automatic       fixed bin(17,0)          array level 2 dcl 36 set ref 95* 105* 129
sep_stat                  2     000204 automatic       bit(1)                   array level 2 dcl 36 set ref 97* 102* 153
stack_header                           based           structure                level 1 dcl 1-26
static_length             7(18)        based           bit(18)                  level 3 packed unaligned dcl 3-31 ref 130
static_lng                      000112 automatic       fixed bin(18,0)          dcl 24 set ref 130* 146 155* 160*
statp                           000120 automatic       pointer                  dcl 31 set ref 154* 155 155 155 155
stats                     6            based           structure                level 2 dcl 3-31
substr                                                 builtin function         dcl 44 ref 91 98
t                               000204 automatic       structure                array level 1 dcl 36
ti                              010204 automatic       fixed bin(17,0)          array dcl 42 set ref 93* 103* 116 116 117 118* 118
                                                                                  119* 129 132 145 153 154
total_static                    000111 automatic       fixed bin(18,0)          dcl 24 set ref 87* 146* 146 179*
unspec                                                 builtin function         dcl 44 ref 91 91 98 98 116 116

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
bit                                                    builtin function         dcl 44
bitcnt                                 automatic       fixed bin(24,0)          dcl 28
call_offset                            internal static fixed bin(17,0)          initial dcl 1-78
convert                                                builtin function         dcl 44
entry_offset                           internal static fixed bin(17,0)          initial dcl 1-78
exp_word                               based           structure                level 1 dcl 3-21
hcs_$fs_get_mode                000000 constant        entry                    external dcl 51
hcs_$status_mins                000000 constant        entry                    external dcl 50
isot1                                  based           structure                array level 1 dcl 2-16
link                                   based           structure                level 1 dcl 3-11
linkage_header_flags                   based           structure                level 1 dcl 3-44
lot_fault                              internal static bit(36)                  initial dcl 2-9
mode                                   automatic       fixed bin(5,0)           dcl 27
name                                   based           structure                level 1 dcl 3-70
next_ls                                automatic       fixed bin(18,0)          dcl 24
push_offset                            internal static fixed bin(17,0)          initial dcl 1-78
return_no_pop_offset                   internal static fixed bin(17,0)          initial dcl 1-78
return_offset                          internal static fixed bin(17,0)          initial dcl 1-78
stack_header_overlay                   based           fixed bin(17,0)          array dcl 1-94
trap_word                              based           structure                level 1 dcl 3-66
tv_offset                              internal static fixed bin(17,0)          initial dcl 1-72
type                                   automatic       fixed bin(2,0)           dcl 26
type_pair                              based           structure                level 1 dcl 3-25
virgin_linkage_header                  based           structure                level 1 dcl 3-52

NAMES DECLARED BY EXPLICIT CONTEXT.
nope                            000655 constant        label                    dcl 177 ref 132
plu                             000116 constant        entry                    external dcl 11
print_linkage_usage             000125 constant        entry                    external dcl 11

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1006        1032     700        1016
Length      1266     700        24         220     105           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
plu                                6334 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
plu                      000100 i                           plu
                         000101 j                           plu
                         000102 n                           plu
                         000103 k                           plu
                         000104 owner_segno                 plu
                         000105 l                           plu
                         000106 l1                          plu
                         000107 l2                          plu
                         000110 l3                          plu
                         000111 total_static                plu
                         000112 static_lng                  plu
                         000113 hc_seg_count                plu
                         000114 highest_segno               plu
                         000115 code                        plu
                         000116 p                           plu
                         000120 statp                       plu
                         000122 pathname                    plu
                         000174 entry                       plu
                         000204 t                           plu
                         010204 ti                          plu
                         014124 sb                          plu
                         014126 lotp                        plu
                         014130 isotp                       plu

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      cu_$arg_count                 cu_$stack_frame_ptr           hcs_$fs_get_path_name
hcs_$high_low_seg_count       ioa_

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000115        64 000132        65 000140        66 000142        67 000175        72 000176        73 000205
     74 000207        75 000211        79 000213        80 000224        87 000226        90 000230        91 000241
     93 000247        94 000254        95 000261        96 000263        97 000265        98 000266       102 000277
    103 000301       104 000306       105 000312       106 000314       109 000316       111 000320       115 000334
    116 000345       117 000363       118 000365       119 000367       120 000371       121 000374       125 000376
    127 000412       129 000421       130 000426       132 000432       134 000436       135 000473       145 000500
    146 000503       148 000505       149 000510       150 000513       151 000515       153 000521       154 000523
    155 000525       158 000607       160 000610       177 000655       179 000657       181 000677


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
