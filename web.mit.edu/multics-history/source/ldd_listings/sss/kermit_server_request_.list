	COMPILATION LISTING OF SEGMENT kermit_server_request_
	Compiled by: Multics PL/I Compiler, Release 30, of February 16, 1988
	Compiled at: Honeywell Bull, Phoenix AZ, SysM
	Compiled on: 09/16/88  1316.4 mst Fri
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1988                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        6*        *                                                         *
        7*        *********************************************************** */
        8 
        9 
       10 /****^  HISTORY COMMENTS:
       11*  1) change(87-11-24,Huen), approve(87-11-24,MCR7803), audit(87-12-07,RWaters),
       12*     install(88-09-16,MR12.2-1113):
       13*     Fix kermit error 13.
       14*                                                   END HISTORY COMMENTS */
       15 
       16 
       17 kermit_server_request_:
       18      proc (kermit_scip, infop);
       19 
       20 /**********************************************************************/
       21 /*							*/
       22 /*n	Name:	kermit_server_request_		external	*/
       23 /*i	Input:	kermit_scip, infop				*/
       24 /*f 	Function: Sets up a Kermit environment that does not have a */
       25 /*f		user interface. i.e. all further commands to	*/
       26 /*f		multics-kermit come in the form of packets from	*/
       27 /*f		the remote.				*/
       28 /*o 	Output:	none					*/
       29 /*l	Modified: 86-01-31  by Don Kozlowski - Delete the 5 second  */
       30 /*l			waiting before setting the file transfer*/
       31 /*l			mode. (kermit 13)			*/
       32 /*l	Modified: 86-10-09  by Don Kozlowski - Set the server flag  */
       33 /*l			properly. (kermit 13)                   */
       34 /*							*/
       35 /**********************************************************************/
       36 
       37 /*  parameters  */
       38 
       39 	dcl     infop		 ptr;
       40 	dcl     kermit_scip		 ptr;
       41 
       42 /*  automatic  */
       43 
       44 	dcl     01 cl_info_struc	 aligned,
       45 		02 resetread	 bit (1) unal,
       46 		02 mbz		 bit (35) unal;
       47 	dcl     code		 fixed bin (35);
       48 	dcl     filenames_areap	 ptr;
       49 	dcl     transfer_modes_set	 bit (1);
       50 
       51 /*  constants  */
       52 
       53 	dcl     False		 bit (1) internal static options (constant) init ("0"b);
       54 	dcl     True		 bit (1) internal static options (constant) init ("1"b);
       55 
       56 /*  builtin  */
       57 
       58 	dcl     null		 builtin;
       59 
       60 
       61 /*  procedures  */
       62 	dcl     continue_to_signal_	 entry (fixed bin (35));
       63 	dcl     cu_$cl		 entry (1 aligned, 2 bit (1) unal, 2 bit (35) unal);
       64 	dcl     ssu_$abort_line	 entry () options (variable);
       65 	dcl     ssu_$get_temp_segment	 entry (ptr, char (*), ptr);
       66 	dcl     ssu_$release_temp_segment entry (ptr, ptr);
       67 
       68   /* based */
       69   
       70   dcl 01 info		aligned like kermit_info based (infop);
       71   dcl 01 comm_info		aligned like kermit_comm_info
       72 			     based (info.comm_infop);
       73   
       74 /*  Conditions  */
       75 
       76 	dcl     cleanup		 condition;
       77 	dcl     quit		 condition;
       78 
       79 
       80 /*  include files  */
       81 
  1     1 /*  START OF:	kermit_dcls.incl.pl1		  *  *  *  *  *  */
  1     2   
  1     3   /********************************************************************/
  1     4   /*							*/
  1     5   /*n	kermit_dcls					*/
  1     6   /*							*/
  1     7   /*d	This include file contains the declarations of the external	*/
  1     8   /*d	kermit entrypoints that are called by other modules within	*/
  1     9   /*d	kermit as well as an explanation of the parameters.	*/
  1    10   /*							*/
  1    11   /*l	Written:	84-10-11	by Dean Elhard			*/
  1    12   /*							*/
  1    13   /********************************************************************/
  1    14   
  1    15   dcl kermit_comm_mgr_$flush_input
  1    16 			entry
  1    17 	(ptr,			/* kermit info ptr		*/
  1    18 	fixed bin(35));		/* error code		*/
  1    19   
  1    20   dcl kermit_comm_mgr_$reset_line_modes
  1    21 			entry
  1    22 	(ptr,			/* kermit info ptr		*/
  1    23 	fixed bin(35));		/* error code		*/
  1    24   
  1    25   dcl kermit_comm_mgr_$set_line_modes
  1    26 			entry
  1    27 	(ptr,			/* kermit info ptr		*/
  1    28 	fixed bin(35));		/* error code		*/
  1    29   
  1    30   dcl kermit_get_filenames_	entry
  1    31 	(ptr,			/* kermit info ptr		*/
  1    32 	 char(*),			/* argument		*/
  1    33 	 ptr,			/* filename ptr		*/
  1    34 	 char(*),			/* reason			*/
  1    35 	 fixed bin(35));		/* error code		*/
  1    36   
  1    37   dcl kermit_log_mgr_$close_log
  1    38 			entry
  1    39 	(ptr,			/* kermit info ptr		*/
  1    40 	 fixed bin (35));		/* error code		*/
  1    41   
  1    42   dcl kermit_log_mgr_$disable	entry
  1    43   	(ptr,			/* kermit info ptr		*/
  1    44 	 fixed bin (35));		/* error code		*/
  1    45   
  1    46   dcl kermit_log_mgr_$display_stats
  1    47 			entry	/* statistics command	*/
  1    48   	(ptr,			/* sci ptr		*/
  1    49 	 ptr);			/* kermit info ptr		*/
  1    50   
  1    51   dcl kermit_log_mgr_$enable	entry
  1    52 	(ptr,			/* kermit info ptr		*/
  1    53 	 fixed bin (35));		/* error code		*/
  1    54   
  1    55   dcl kermit_log_mgr_$log_message
  1    56 			entry 
  1    57 	(ptr,			/* kermit info ptr		*/
  1    58 	 ptr);			/* log info ptr		*/
  1    59   
  1    60   dcl kermit_log_mgr_$open_log
  1    61 			entry 
  1    62 	(ptr,			/* kermit info ptr		*/
  1    63 	 char (*) varying,		/* log file name		*/
  1    64 	 fixed bin (35));		/* error code		*/
  1    65   
  1    66   dcl kermit_log_mgr_$start	entry	/* start log command	*/
  1    67   	(ptr,			/* sci ptr		*/
  1    68 	 ptr);			/* kermit info ptr		*/
  1    69   
  1    70   dcl kermit_log_mgr_$stop	entry	/* stop log command		*/
  1    71 	(ptr,			/* sci ptr		*/
  1    72 	 ptr);			/* kermit info ptr		*/
  1    73   
  1    74   dcl kermit_mode_mgr_$get	entry	/* get modes command	*/
  1    75 	(ptr,			/* sci ptr		*/
  1    76 	 ptr);			/* kermit info ptr		*/
  1    77   
  1    78   dcl kermit_mode_mgr_$retrieve
  1    79 			entry
  1    80 	(ptr,			/* kermit info ptr		*/
  1    81 	 fixed bin,		/* permanent/temporary select	*/
  1    82 	 (*) fixed bin,		/* mode selector array	*/
  1    83 	 ptr,			/* mode value ptr		*/
  1    84 	 fixed bin (35));		/* error code		*/
  1    85   
  1    86   dcl kermit_mode_mgr_$set	entry	/* set modes command	*/
  1    87 	(ptr,			/* sci ptr		*/
  1    88 	 ptr);			/* kermit info ptr		*/
  1    89   
  1    90   dcl kermit_mode_mgr_$store	entry
  1    91 	(ptr,			/* kermit info ptr		*/
  1    92 	 fixed bin,		/* permanent/temporary select	*/
  1    93 	 (*) fixed bin,		/* mode selector array	*/
  1    94 	 ptr,			/* mode value ptr		*/
  1    95 	 fixed bin (35));		/* error code		*/
  1    96   
  1    97   dcl kermit_pad_$receive	entry
  1    98 	(ptr,			/* kermit info ptr		*/
  1    99 	 char (1),		/* packet type		*/
  1   100   	 ptr,			/* buffer pointer		*/
  1   101 	 fixed bin (21),		/* buffer length		*/
  1   102 	 fixed bin,		/* sequence number		*/
  1   103 	 fixed bin (21),		/* chars received		*/
  1   104 	 fixed bin (21),		/* packet size		*/
  1   105 	 bit (1),			/* CR/NL split flag		*/
  1   106 	 fixed bin (35));		/* error code		*/
  1   107   
  1   108   dcl kermit_pad_$send	entry
  1   109   	(ptr,			/* kermit info ptr		*/
  1   110 	 char (1),		/* packet type		*/
  1   111 	 ptr,			/* data ptr		*/
  1   112 	 fixed bin (21),		/* data length		*/
  1   113 	 fixed bin,		/* sequence number		*/
  1   114 	 fixed bin (21),		/* chars transmitted	*/
  1   115 	 fixed bin (21),		/* packet length		*/
  1   116 	 fixed bin (35));		/* error code		*/
  1   117   
  1   118   dcl kermit_receive_$receive_from_remote
  1   119 			entry
  1   120 	(ptr,			/* kermit info ptr		*/
  1   121 	 fixed bin,		/* initial state		*/
  1   122 	 fixed bin,                   /* initial sequence number    */
  1   123 	 char (*),		/* user filename (first file)	*/
  1   124 	 bit (1),			/* =1 if user gave filename	*/
  1   125 	 fixed bin,		/* number of files received	*/
  1   126 	 fixed bin (35));		/* error code		*/
  1   127 
  1   128   dcl kermit_send_$send_to_remote
  1   129 			entry 
  1   130 	(ptr,			/* kermit info ptr		*/
  1   131 	 ptr,			/* filenames area ptr	*/
  1   132 	 char (*),		/* user filename (first file)	*/
  1   133 	 bit (1),			/* =1 if user gave filename	*/
  1   134 	 fixed bin,                   /* number of files sent       */
  1   135 	 fixed bin (35));		/* error code		*/
  1   136 
  1   137 
  1   138   dcl kermit_server_
  1   139 			entry 
  1   140 	(ptr,			/* kermit info ptr		*/
  1   141 	 ptr);			/* filenames area ptr	*/
  1   142 
  1   143 
  1   144   dcl kermit_xfer_modes_$check_params
  1   145 			entry
  1   146 	(ptr,			/*  kermit info ptr		*/
  1   147 	 ptr,			/*  remote parameters	*/
  1   148 	 fixed bin (21),		/*  remote parameters length	*/
  1   149 	 ptr,                         /*  local parameters          */
  1   150 	 fixed bin (35));		/*  error code		*/
  1   151 
  1   152   dcl kermit_xfer_modes_$init 
  1   153 			entry
  1   154 	(ptr,			/*  ptr to kermit info	*/
  1   155 	 fixed bin (35));		/*  error code		*/
  1   156 
  1   157   dcl kermit_xfer_modes_$get_local_params
  1   158 			entry
  1   159 	(ptr,			/*  kermit info ptr		*/
  1   160 	 ptr,			/*  local parameters	*/
  1   161  	 fixed bin (21),		/*  local parameters length	*/
  1   162 	 ptr,			/*  encoded parameters	*/
  1   163 	 fixed bin (21),		/*  encoded parameters length */
  1   164 	 fixed bin (35));		/*  error code		*/
  1   165 
  1   166   dcl kermit_xfer_modes_$process_params
  1   167 			entry
  1   168 	(ptr,			/*  kermit info ptr		*/
  1   169 	 ptr,			/*  remote parameters	*/
  1   170 	 fixed bin (21),		/*  remote parameters length	*/
  1   171 	 ptr,                         /*  local parameters          */
  1   172 	 fixed bin (35));		/*  error code		*/
  1   173 
  1   174 /*  END OF:	kermit_dcls.incl.pl1		  *  *  *  *  *  */
       82 
       83 
  2     1 /*  START OF:	kermit_info.incl.pl1		  *  *  *  *  *  */
  2     2   
  2     3 
  2     4   
  2     5 
  2     6 /****^  HISTORY COMMENTS:
  2     7*  1) change(88-05-16,Huen), approve(88-05-16,MCR7841), audit(88-05-25,RWaters),
  2     8*     install(88-07-05,MR12.2-1054):
  2     9*     Fix kermit 15, 16, 17, and 18.
  2    10*                                                   END HISTORY COMMENTS */
  2    11 
  2    12 
  2    13 /********************************************************************/
  2    14   /*							*/
  2    15   /*n	kermit_constants					*/
  2    16   /*							*/
  2    17   /*d	This structure contains the constant definitions of CR, 	*/
  2    18   /*d  and NL characters which are coded as bit strings with 	*/
  2    19   /*d  overlays.                                                      */
  2    20   /*							*/
  2    21   /*l	Written:	87-06-19	by Don Kozlowski			*/
  2    22   /*l     Modified: 87-06-19  by Don Kozlowski - CR and NL are coded  */
  2    23   /*l			as bit strings with overlays (kermit 15)*/
  2    24   /*							*/
  2    25   /********************************************************************/
  2    26 
  2    27   dcl 01 kermit_bit_constants	internal static options (constant),
  2    28          02 CR_bit		bit (9) unaligned init ("015"b3),
  2    29          02 NL_bit		bit (9) unaligned init ("012"b3);
  2    30 
  2    31   dcl 01 kermit_char_constants based (addr (kermit_bit_constants)),
  2    32          02 CR		char (1) unaligned,
  2    33          02 NL		char (1) unaligned;
  2    34 
  2    35   dcl 01 kermit_fixed_constants based (addr (kermit_bit_constants)),
  2    36          02 CR_fixed	fixed bin (9) unsigned unaligned,
  2    37          02 NL_fixed	fixed bin (9) unsigned unaligned;
  2    38 	
  2    39 
  2    40   /********************************************************************/
  2    41   /*							*/
  2    42   /*n	kermit_info					*/
  2    43   /*							*/
  2    44   /*d	This data structure is the subsystem info structure used	*/
  2    45   /*d	when creating a kermit invocation.  It is used to find the	*/
  2    46   /*d	three kermit databases.				*/
  2    47   /*							*/
  2    48   /*l	Written:	84-10-11	by Dean Elhard			*/
  2    49   /*							*/
  2    50   /********************************************************************/
  2    51   
  2    52   dcl 01 kermit_info	aligned based (kermit_infop),
  2    53        02 version		char (8),
  2    54        02 sci_ptr		ptr,	/* ssu_ sci_ptr		*/
  2    55        02 perm_modesp	ptr,	/* ptr to permanent modes db	*/
  2    56        02 temp_modesp	ptr,	/* ptr to temporary modes db	*/
  2    57        02 log_infop		ptr,	/* ptr to log info db	*/
  2    58        02 comm_infop	ptr;	/* ptr to comm info db	*/
  2    59   
  2    60   dcl kermit_infop		ptr;
  2    61   dcl kermit_info_version	char (8) static options (constant)
  2    62 			     init ("ki   1.0");
  2    63   
  2    64   /********************************************************************/
  2    65   /*							*/
  2    66   /*n	kermit_perm_modes					*/
  2    67   /*							*/
  2    68   /*d	This data structure contains the array of 9-bit values that	*/
  2    69   /*d	represent the permanent kermit modes.			*/
  2    70   /*							*/
  2    71   /*l	Written:	84-10-11	by Dean Elhard			*/
  2    72   /*l     Modified: 87-06-12  by Don Kozlowski - Increase mode_counts */
  2    73   /*l			(kermit 16)			*/
  2    74   /*							*/
  2    75   /********************************************************************/
  2    76   
  2    77   dcl 01 kermit_perm_modes	aligned based (kermit_perm_modesp),
  2    78        02 version		char (8),
  2    79        02 mode (1:kermit_perm_mode_count)
  2    80 			bit (9) unaligned;
  2    81   
  2    82   dcl kermit_perm_modesp	ptr;
  2    83   dcl kermit_perm_mode_count	fixed bin static options (constant) init (20);
  2    84   dcl kermit_perm_modes_version
  2    85 			char (8) static options (constant)
  2    86 			     init ("kpm  1.1");
  2    87   
  2    88   /********************************************************************/
  2    89   /*							*/
  2    90   /*n	kermit_temp_modes					*/
  2    91   /*							*/
  2    92   /*d	This data structure contains the array of 9-bit values that	*/
  2    93   /*d	represent the temporary kermit modes.			*/
  2    94   /*							*/
  2    95   /*l	Written:	84-10-11	by Dean Elhard			*/
  2    96   /*							*/
  2    97   /********************************************************************/
  2    98   
  2    99   dcl 01 kermit_temp_modes	aligned based (kermit_temp_modesp),
  2   100        02 version		char (8),
  2   101        02 mode (1:kermit_temp_mode_count)
  2   102 			bit (9) unaligned;
  2   103   
  2   104   dcl kermit_temp_modesp	ptr;
  2   105   dcl kermit_temp_mode_count	fixed bin static options (constant) init (23);
  2   106   dcl kermit_temp_modes_version
  2   107 			char (8) static options (constant)
  2   108 			     init ("ktm  1.1");
  2   109   
  2   110   /********************************************************************/
  2   111   /*							*/
  2   112   /*n	kermit_log_info					*/
  2   113   /*							*/
  2   114   /*d	This data structure contains 2 types of logging info:	*/
  2   115   /*d	     - data concerning the logging state and log_file	*/
  2   116   /*d	     - statistics on the last completed file-transfer	*/
  2   117   /*							*/
  2   118   /*l	Written:	84-10-11	by Dean Elhard			*/
  2   119   /*							*/
  2   120   /********************************************************************/
  2   121   
  2   122   dcl 01 kermit_log_info	aligned based (kermit_log_infop),
  2   123        02 version		char (8),
  2   124        02 log_file		aligned,		/* log_file info	*/
  2   125         03 iocbp		ptr,		/* iocb ptr	*/
  2   126         03 flags		aligned,
  2   127          04 enabled		bit (1) unaligned,	/* enabled flag	*/
  2   128          04 stats_valid	bit (1) unaligned,	/* stats are set	*/
  2   129          04 mbz		bit (34) unaligned,
  2   130        02 statistics	aligned like kermit_stats_info;
  2   131   
  2   132   dcl kermit_log_infop	ptr;
  2   133   dcl kermit_log_info_version char (8) static options (constant)
  2   134 			     init ("kli  1.0");
  2   135   
  2   136   /********************************************************************/
  2   137   /*							*/
  2   138   /*n	kermit_stats_info					*/
  2   139   /*							*/
  2   140   /*d	This structure is the statistics information passed to the	*/
  2   141   /*d	log manager and stored as the statistics.		*/
  2   142   /*							*/
  2   143   /*l	Written:	84-10-25	by Dean Elhard			*/
  2   144   /*							*/
  2   145   /********************************************************************/
  2   146   
  2   147   dcl 01 kermit_stats_info	aligned based (kermit_stats_infop),
  2   148        02 caller		char (32),	/* send or receive	*/
  2   149        02 status		fixed bin (35),	/* status of F-T	*/
  2   150        02 filename		char (194) unal,	/* name of file	*/
  2   151        02 file_len		fixed bin (21),	/* len in chars	*/
  2   152        02 char_count	fixed bin (21),	/* number sent	*/
  2   153        02 packet_chars	fixed bin (21),	/* after encoding	*/
  2   154        02 packet_count	fixed bin (21),	/* num of packets	*/
  2   155        02 packet_retries	fixed bin (21),	/* retries done	*/
  2   156        02 start_time	fixed bin (71),	/* time F-T started	*/
  2   157        02 end_time		fixed bin (71),	/* time F-T done	*/
  2   158        02 error_message	char (94);	/* rcvd error msg	*/
  2   159   
  2   160   dcl kermit_stats_infop	ptr;
  2   161   
  2   162   /********************************************************************/
  2   163   /*							*/
  2   164   /*n	kermit_comm_info					*/
  2   165   /*							*/
  2   166   /*d	This data structure contains information regarding the	*/
  2   167   /*d	communications channel over which the file transfer takes	*/
  2   168   /*d	place.						*/
  2   169   /*							*/
  2   170   /*l	Written:	84-10-12	by Dean Elhard			*/
  2   171   /*l	Modified: 86-10-09  by Don Kozlowski Add transfer_modes_set	*/
  2   172   /*l                         and server indicators. (kermit 13)      */
  2   173   /*							*/
  2   174   /********************************************************************/
  2   175   
  2   176   dcl 01 kermit_comm_info	aligned based (kermit_comm_infop),
  2   177        02 version		char (8),
  2   178        02 ft_iocbp		ptr,		/* transfer iocbp	*/
  2   179        02 debug_segp	ptr,		/* debug segment	*/
  2   180        02 debug_segl	fixed bin (21),
  2   181        02 input_buffer	aligned,		/* input buffer	*/
  2   182         03 bufferp		ptr,
  2   183         03 bufferl		fixed bin (21),
  2   184        02 old_modes		char (512) unal,	/* ft switch modes	*/
  2   185        02 old_framing_chars	aligned,		/* saved frm chars	*/
  2   186         03 start_char	char (1) unaligned,
  2   187         03 end_char		char (1) unaligned,
  2   188         03 server		bit (1) unaligned,	/* In server mode	*/
  2   189         03 transfer_modes_set	bit (1) unaligned,
  2   190         03 pad		bit (16) unaligned,
  2   191        02 old_wake_table	aligned,		/* saved wake table	*/
  2   192         03 breaks (0:127)	bit (1) unaligned,
  2   193         03 mbz		bit (16) unaligned,
  2   194        02 old_delays	aligned,		/* saved delay info	*/
  2   195         03 version		fixed bin,
  2   196         03 default		fixed bin,
  2   197         03 delay,
  2   198          04 vert_nl		fixed bin,
  2   199          04 horz_nl		fixed bin,
  2   200          04 const_tab	float bin,
  2   201          04 var_tab		fixed bin,
  2   202          04 backspace	fixed bin,
  2   203          04 vt_ff		fixed bin;
  2   204   
  2   205   dcl kermit_comm_infop	ptr;
  2   206   dcl kermit_comm_info_version
  2   207 			char (8) static options (constant)
  2   208 			     init ("kci  1.0");
  2   209   
  2   210 /*  END OF:	kermit_info.incl.pl1		  *  *  *  *  *  */
       84 
       85 
       86 	transfer_modes_set = False;
       87 	cl_info_struc.resetread = True;
       88 	cl_info_struc.mbz = False;
       89 	comm_info.server = "1"b;		/* We are now a server */
       90 
       91 	on quit begin;
       92 		if transfer_modes_set then do;
       93 						/*  Reset the modes for user input and output  */
       94 			call kermit_comm_mgr_$reset_line_modes (infop, code);
       95 			transfer_modes_set = False;
       96 						/*  Pass control  */
       97 			call cu_$cl (cl_info_struc);
       98 						/*  Back (restart) so set the modes for file transfer  */
       99 			call kermit_comm_mgr_$set_line_modes (infop, code);
      100 			transfer_modes_set = True;
      101 		     end;
      102 		else call continue_to_signal_ (0);	/* do nothing  */
      103 	     end;
      104 
      105 	filenames_areap = null;
      106 
      107 	on cleanup call server_request_cleanup;
      108 
      109 	call ssu_$get_temp_segment (kermit_scip, "filenames", filenames_areap);
      110 	call kermit_xfer_modes_$init (infop, code);
      111 						/*  this should never happen  */
      112 	if code ^= 0 then call ssu_$abort_line (kermit_scip, code);
      113 						/*  Set the tty_ modes  */
      114 
      115 	call kermit_comm_mgr_$set_line_modes (infop, code);
      116 	if code ^= 0 then call ssu_$abort_line (kermit_scip, code, "^/^a", "Unable to set line modes for file transfer");
      117 	transfer_modes_set = True;
      118 
      119 /*  Invoke the server  */
      120 
      121 	call kermit_server_ (infop, filenames_areap);
      122 						/*  Server done  */
      123 	call server_request_cleanup;
      124 	return;
      125 
      126 server_request_cleanup:
      127      proc;
      128 
      129 	comm_info.server = "0"b;		/* We are NOT a server */
      130 	if filenames_areap ^= null then call ssu_$release_temp_segment (kermit_scip, filenames_areap);
      131 	filenames_areap = null;
      132 	if transfer_modes_set then call kermit_comm_mgr_$reset_line_modes (infop, code);
      133 	transfer_modes_set = False;
      134 	comm_info.server = "0"b;		/* We are NOT a server */
      135 	return;
      136      end server_request_cleanup;
      137 
      138      end kermit_server_request_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    09/16/88  1316.4  kermit_server_request_.pl1        >spec>install>1113>kermit_server_request_.pl1
82           1    11/20/84  1351.4  kermit_dcls.incl.pl1              >ldd>include>kermit_dcls.incl.pl1
84           2    07/07/88  2041.4  kermit_info.incl.pl1              >ldd>include>kermit_info.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
False                                  constant        bit(1)                   initial packed unaligned dcl 53 ref 86 88 95 133
True                                   constant        bit(1)                   initial packed unaligned dcl 54 ref 87 100 117
cl_info_struc                   000100 automatic       structure                level 1 dcl 44 set ref 97*
cleanup                         000106 stack reference condition                dcl 76 ref 107
code                            000101 automatic       fixed bin(35,0)          dcl 47 set ref 94* 99* 110* 112 112* 115* 116 116*
                                                                                  132*
comm_info                              based           structure                level 1 dcl 71
comm_infop               12            based           pointer                  level 2 dcl 70 ref 89 129 134
continue_to_signal_             000010 constant        entry                    external dcl 62 ref 102
cu_$cl                          000012 constant        entry                    external dcl 63 ref 97
filenames_areap                 000102 automatic       pointer                  dcl 48 set ref 105* 109* 121* 130 130* 131*
info                                   based           structure                level 1 dcl 70
infop                                  parameter       pointer                  dcl 39 set ref 17 89 94* 99* 110* 115* 121* 129 132*
                                                                                  134
kermit_comm_info                       based           structure                level 1 dcl 2-176
kermit_comm_mgr_$reset_line_modes
                                000022 constant        entry                    external dcl 1-20 ref 94 132
kermit_comm_mgr_$set_line_modes 000024 constant        entry                    external dcl 1-25 ref 99 115
kermit_info                            based           structure                level 1 dcl 2-52
kermit_scip                            parameter       pointer                  dcl 40 set ref 17 109* 112* 116* 130*
kermit_server_                  000026 constant        entry                    external dcl 1-138 ref 121
kermit_stats_info                      based           structure                level 1 dcl 2-147
kermit_xfer_modes_$init         000030 constant        entry                    external dcl 1-152 ref 110
mbz                       0(01) 000100 automatic       bit(35)                  level 2 packed packed unaligned dcl 44 set ref 88*
null                                                   builtin function         dcl 58 ref 105 130 131
old_framing_chars       213            based           structure                level 2 dcl 71
quit                            000114 stack reference condition                dcl 77 ref 91
resetread                       000100 automatic       bit(1)                   level 2 packed packed unaligned dcl 44 set ref 87*
server                  213(18)        based           bit(1)                   level 3 packed packed unaligned dcl 71 set ref 89*
                                                                                  129* 134*
ssu_$abort_line                 000014 constant        entry                    external dcl 64 ref 112 116
ssu_$get_temp_segment           000016 constant        entry                    external dcl 65 ref 109
ssu_$release_temp_segment       000020 constant        entry                    external dcl 66 ref 130
transfer_modes_set              000104 automatic       bit(1)                   packed unaligned dcl 49 set ref 86* 92 95* 100* 117*
                                                                                  132 133*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
kermit_bit_constants                   internal static structure                level 1 packed packed unaligned dcl 2-27
kermit_char_constants                  based           structure                level 1 packed packed unaligned dcl 2-31
kermit_comm_info_version               internal static char(8)                  initial packed unaligned dcl 2-206
kermit_comm_infop                      automatic       pointer                  dcl 2-205
kermit_comm_mgr_$flush_input    000000 constant        entry                    external dcl 1-15
kermit_fixed_constants                 based           structure                level 1 packed packed unaligned dcl 2-35
kermit_get_filenames_           000000 constant        entry                    external dcl 1-30
kermit_info_version                    internal static char(8)                  initial packed unaligned dcl 2-61
kermit_infop                           automatic       pointer                  dcl 2-60
kermit_log_info                        based           structure                level 1 dcl 2-122
kermit_log_info_version                internal static char(8)                  initial packed unaligned dcl 2-133
kermit_log_infop                       automatic       pointer                  dcl 2-132
kermit_log_mgr_$close_log       000000 constant        entry                    external dcl 1-37
kermit_log_mgr_$disable         000000 constant        entry                    external dcl 1-42
kermit_log_mgr_$display_stats   000000 constant        entry                    external dcl 1-46
kermit_log_mgr_$enable          000000 constant        entry                    external dcl 1-51
kermit_log_mgr_$log_message     000000 constant        entry                    external dcl 1-55
kermit_log_mgr_$open_log        000000 constant        entry                    external dcl 1-60
kermit_log_mgr_$start           000000 constant        entry                    external dcl 1-66
kermit_log_mgr_$stop            000000 constant        entry                    external dcl 1-70
kermit_mode_mgr_$get            000000 constant        entry                    external dcl 1-74
kermit_mode_mgr_$retrieve       000000 constant        entry                    external dcl 1-78
kermit_mode_mgr_$set            000000 constant        entry                    external dcl 1-86
kermit_mode_mgr_$store          000000 constant        entry                    external dcl 1-90
kermit_pad_$receive             000000 constant        entry                    external dcl 1-97
kermit_pad_$send                000000 constant        entry                    external dcl 1-108
kermit_perm_mode_count                 internal static fixed bin(17,0)          initial dcl 2-83
kermit_perm_modes                      based           structure                level 1 dcl 2-77
kermit_perm_modes_version              internal static char(8)                  initial packed unaligned dcl 2-84
kermit_perm_modesp                     automatic       pointer                  dcl 2-82
kermit_receive_$receive_from_remote
                                000000 constant        entry                    external dcl 1-118
kermit_send_$send_to_remote     000000 constant        entry                    external dcl 1-128
kermit_stats_infop                     automatic       pointer                  dcl 2-160
kermit_temp_mode_count                 internal static fixed bin(17,0)          initial dcl 2-105
kermit_temp_modes                      based           structure                level 1 dcl 2-99
kermit_temp_modes_version              internal static char(8)                  initial packed unaligned dcl 2-106
kermit_temp_modesp                     automatic       pointer                  dcl 2-104
kermit_xfer_modes_$check_params 000000 constant        entry                    external dcl 1-144
kermit_xfer_modes_$get_local_params
                                000000 constant        entry                    external dcl 1-157
kermit_xfer_modes_$process_params
                                000000 constant        entry                    external dcl 1-166

NAMES DECLARED BY EXPLICIT CONTEXT.
kermit_server_request_          000036 constant        entry                    external dcl 17
server_request_cleanup          000342 constant        entry                    internal dcl 126 ref 107 123

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       612         644     423         622
Length      1070     423        32         210     166           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
kermit_server_request_              118 external procedure  is an external procedure.  
on unit on line 91                   71 on unit               
on unit on line 107                  64 on unit               
server_request_cleanup               70 internal procedure  is called by several nonquick procedures.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
kermit_server_request_   000100 cl_info_struc               kermit_server_request_
                         000101 code                        kermit_server_request_
                         000102 filenames_areap             kermit_server_request_
                         000104 transfer_modes_set          kermit_server_request_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        call_int_this       call_int_other      return_mac          enable_op
ext_entry           int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
continue_to_signal_           cu_$cl                        kermit_comm_mgr_$reset_line_modes
kermit_comm_mgr_$set_line_modes                             kermit_server_                kermit_xfer_modes_$init
ssu_$abort_line               ssu_$get_temp_segment         ssu_$release_temp_segment

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     17 000032        86 000043        87 000044        88 000046        89 000050        91 000056        92 000072
     94 000075        95 000106        97 000110        99 000117       100 000132       101 000135       102 000136
    103 000145       105 000146       107 000150       109 000172       110 000217       112 000231       115 000251
    116 000263       117 000320       121 000322       123 000334       124 000340       126 000341       129 000347
    130 000356       131 000372       132 000375       133 000411       134 000413       135 000421


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
