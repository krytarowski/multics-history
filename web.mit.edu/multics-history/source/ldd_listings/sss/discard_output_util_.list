	COMPILATION LISTING OF SEGMENT discard_output_util_
	Compiled by: Multics PL/I Compiler, Release 27d, of October 11, 1982
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 11/04/82  1640.0 mst Thu
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 	/* This procedure is a I/O System Interface Module that simply ignores calls
       12*		made to it. All output written to this DIM is discarded.
       13*
       14*	   Originally coded by R. J. Feiertag on September 24, 1971			*/
       15 
       16 discard_output_util_$discard_output_attach: proc(stream_name,type,device,mode,status,sdb_ptr);
       17 
       18 	dcl stream_name char(*), /* name of stream to which this DIM is attached */
       19 	    type char(*), /* name of this DIM */
       20 	    device char(*), /* name of device, must be "" */
       21 	    mode char(*), /* mode of attachment, should be "" */
       22 	    status bit(72) aligned, /* status of call */
       23 	    sp ptr, /* points to status */
       24 	    sdb_ptr ptr; /* pointer to stream data block */
       25 
       26 	dcl 1 status_structure aligned based(sp), /* structure of status string */
       27 		2 error_code fixed bin, /* standard error code */
       28 		2 pad15 bit(15) unaligned,
       29 		2 detach bit(1) unaligned, /* 1 indicates stream should be detached */
       30 		2 pad20 bit(20) unaligned;
       31 
       32 	dcl 1 sdb internal static aligned, /* stream data block */
       33 		2 interface_module_name char(32) init("discard_output_"), /* name of IOSIM */
       34 		2 device_list ptr init(null), /* pointer to threaded list of device names */
       35 		2 next_device ptr init(null), /* points to next entry on device name list */
       36 		2 name_length fixed bin init(0); /* length of device name is zero */
       37 
       38 	dcl (error_table_$ionmat,error_table_$invalid_device) ext fixed bin;
       39 
       40 	dcl (addr,null) builtin;
       41 
       42 	sp = addr(status); /* get pointer to status */
       43 	if sdb_ptr ^= null then do; /* attempt to perform multiple attachment */
       44 		error_code = error_table_$ionmat; /* return error code */
       45 		detach = "1"b; /* unsuccessfull attachment */
       46 		end;
       47 	 else if device ^= "" then do; /* invalid device id */
       48 		error_code = error_table_$invalid_device; /* return error code */
       49 		detach = "1"b; /* unsuccessful attachment */
       50 		end;
       51 	  else sdb_ptr = addr(sdb); /* return pointer to sdb */
       52 	if sdb.device_list = null then sdb.device_list = addr(sdb.next_device); /* construct valid sdb */
       53 	return;
       54 
       55 discard_output_write: entry(sdb_ptr,workspace,offset,nelem,nelemt,status);
       56 
       57 	dcl workspace ptr, /* points to user buffer area */
       58 	    offset fixed bin, /* indicates first element to be written */
       59 	    nelem fixed bin, /* indicates number of elements to be written */
       60 	    nelemt fixed bin; /* indicates number of elements actually written */
       61 
       62 	nelemt = nelem; /* pretend wrote out all elements asked for */
       63 	return;
       64 
       65 discard_output_abort: entry(sdb_ptr,old_status,status);
       66 
       67 	dcl old_status bit(72) aligned; /* status from previous transaction */
       68 
       69 	return; /* don't do anything */
       70 
       71 discard_output_resetwrite: entry(sdb_ptr,status);
       72 
       73 	return;
       74 
       75 discard_output_detach: entry(sdb_ptr,device,disposal,status);
       76 
       77 	dcl disposal char(*); /* indicates special action to be taken, should be "" */
       78 
       79 	sp = addr(status); /* get pointer to status string */
       80 	if device ^= "" then error_code = error_table_$invalid_device; /* return error code */
       81 	 else detach = "1"b; /* otherwise stream should be detached */
       82 	return;
       83 	end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/04/82  1612.8  discard_output_util_.pl1          >dumps>old>recomp>discard_output_util_.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
addr                                                   builtin function         dcl 40 ref 42 51 52 79
detach                    1(15)        based           bit(1)                   level 2 packed unaligned dcl 26 set ref 45* 49* 81*
device                                 parameter       char                     unaligned dcl 18 ref 16 47 75 80
device_list              10     000010 internal static pointer                  initial level 2 dcl 32 set ref 52 52*
disposal                               parameter       char                     unaligned dcl 77 ref 75
error_code                             based           fixed bin(17,0)          level 2 dcl 26 set ref 44* 48* 80*
error_table_$invalid_device     000030 external static fixed bin(17,0)          dcl 38 ref 48 80
error_table_$ionmat             000026 external static fixed bin(17,0)          dcl 38 ref 44
mode                                   parameter       char                     unaligned dcl 18 ref 16
nelem                                  parameter       fixed bin(17,0)          dcl 57 ref 55 62
nelemt                                 parameter       fixed bin(17,0)          dcl 57 set ref 55 62*
next_device              12     000010 internal static pointer                  initial level 2 dcl 32 set ref 52
null                                                   builtin function         dcl 40 ref 43 52
offset                                 parameter       fixed bin(17,0)          dcl 57 ref 55
old_status                             parameter       bit(72)                  dcl 67 ref 65
sdb                             000010 internal static structure                level 1 dcl 32 set ref 51
sdb_ptr                                parameter       pointer                  dcl 18 set ref 16 43 51* 55 65 71 75
sp                              000100 automatic       pointer                  dcl 18 set ref 42* 44 45 48 49 79* 80 81
status                                 parameter       bit(72)                  dcl 18 set ref 16 42 55 65 71 75 79
status_structure                       based           structure                level 1 dcl 26
stream_name                            parameter       char                     unaligned dcl 18 ref 16
type                                   parameter       char                     unaligned dcl 18 ref 16
workspace                              parameter       pointer                  dcl 57 ref 55

NAMES DECLARED BY EXPLICIT CONTEXT.
discard_output_abort            000144 constant        entry                    external dcl 65
discard_output_detach           000203 constant        entry                    external dcl 75
discard_output_resetwrite       000163 constant        entry                    external dcl 71
discard_output_util_$discard_output_attach
                                000014 constant        entry                    external dcl 16
discard_output_write            000122 constant        entry                    external dcl 55

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       412         444     251         422
Length       630     251        32         150     140          16

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
discard_output_util_$discard_output_attach
                                     78 external procedure  is an external procedure.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 sdb                         discard_output_util_$discard_output_attach

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
discard_output_util_$discard_output_attach
                         000100 sp                          discard_output_util_$discard_output_attach

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
return              ext_entry           ext_entry_desc

NO EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$invalid_device   error_table_$ionmat




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     16 000006        42 000052        43 000054        44 000060        45 000062        46 000064        47 000065
     48 000076        49 000100        50 000102        51 000103        52 000105        53 000113        55 000114
     62 000134        63 000137        65 000140        69 000156        71 000157        73 000175        75 000176
     79 000227        80 000231        81 000246        82 000250


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
