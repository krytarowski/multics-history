	COMPILATION LISTING OF SEGMENT rlm_unimplemented_entries
	Compiled by: Multics PL/I Compiler, Release 29, of July 28, 1986
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 10/02/86  1216.3 mst Thu
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*        *                                                         *
        5*        *********************************************************** */
        6 
        7 
        8 
        9 /****^  HISTORY COMMENTS:
       10*  1) change(86-08-19,Dupuis), approve(86-08-19,MCR7401), audit(86-09-26,Blair),
       11*     install(86-10-02,MR12.0-1173):
       12*     There were a number of entries in rlm_general_search that were
       13*     partially implemented and untested because mrds doesn't use them.
       14*     Changed the relation_manager_ transfer vector to head into this module
       15*     instead, and put the following entries here: get_tuples_by_spec,
       16*     get_tuple_array_by_spec, get_tuples_and_ids, and get_tuple_array_and_ids.
       17*                                                   END HISTORY COMMENTS */
       18 
       19 
       20 
       21 /* format: style2,ind3 */
       22 rlm_unimplemented_entries:
       23    proc ();
       24 
       25 /* DESCRIPTION:
       26*
       27*         This  is  a  place  for  all  not-yet implemented entries, so that a
       28*     complete interface to relation_manager_ is possible.  Each simply returns
       29*     with the error_code dm_error_$unimplemented_entry.
       30**/
       31 
       32 /* HISTORY:
       33*
       34*Written by Matthew Pierret, 09/24/82.
       35*Modified:
       36*12/03/83 by Jeffrey D. Ives: Changed some entries to return 0 p_code.
       37*01/21/83 by Lindsey Spratt:  Added the destroy_cursor entry.
       38**/
       39 
       40 /* START OF DECLARATIONS */
       41 /* Parameter */
       42 
       43       dcl	    p_code	       fixed bin (35);
       44       dcl	    p_bit36a	       bit (36) aligned;
       45       dcl	    p_bit2a	       bit (2) aligned;
       46       dcl	    p_char_star	       char (*);
       47       dcl	    p_fb17	       fixed bin (17);
       48       dcl	    p_fb35	       fixed bin (35);
       49       dcl	    p_ptr		       ptr;
       50 
       51 /* Automatic */
       52 /* Based */
       53 /* Builtin */
       54 /* Constant */
       55 /* Entry */
       56 /* External */
       57 
       58       dcl	    dm_error_$unimplemented_entry
       59 			       ext fixed bin (35);
       60 
       61 /* END OF DECLARATIONS */
       62 
       63 destroy_relation_by_opening:
       64    entry (p_bit36a, p_code);
       65 
       66       p_code = 0;
       67       return;
       68 
       69 destroy_relation_by_path:
       70    entry (p_char_star, p_char_star, p_code);
       71 
       72       p_code = 0;
       73       return;
       74 
       75 create_subset_index:
       76    entry (p_ptr, p_bit36a, p_ptr, p_ptr, p_bit36a, p_code);
       77 
       78       p_code = dm_error_$unimplemented_entry;
       79       return;
       80 
       81 destroy_index:
       82    entry (p_bit36a, p_bit36a, p_code);
       83 
       84       p_code = 0;
       85       return;
       86 
       87 set_scope:
       88    entry (p_bit36a, p_bit2a, p_bit2a, p_code);
       89 
       90       p_code = 0;
       91       return;
       92 
       93 delete_tuples_by_spec:
       94    entry (p_ptr, p_ptr, p_fb35, p_code);
       95 
       96       p_code = dm_error_$unimplemented_entry;
       97       return;
       98 
       99 modify_tuples_by_spec:
      100    entry (p_ptr, p_ptr, p_ptr, p_fb35, p_code);
      101 
      102       p_code = dm_error_$unimplemented_entry;
      103       return;
      104 
      105 get_population:
      106    entry (p_bit36a, p_fb35, p_code);
      107 
      108       p_code = dm_error_$unimplemented_entry;
      109       return;
      110 
      111 get_count:
      112    entry (p_ptr, p_ptr, p_fb35, p_code);
      113 
      114       p_code = dm_error_$unimplemented_entry;
      115       return;
      116 
      117 get_duplicate_key_count:
      118    entry (p_fb17, p_ptr, p_fb35, p_code);
      119 
      120       p_code = dm_error_$unimplemented_entry;
      121       return;
      122 
      123 get_max_and_min_attributes:
      124    entry (p_ptr, p_ptr, p_ptr, p_ptr, p_ptr, p_ptr, p_code);
      125 
      126       p_code = dm_error_$unimplemented_entry;
      127       return;
      128 
      129 destroy_cursor:
      130    entry (p_ptr, p_ptr, p_code);
      131       p_code = 0;
      132       return;
      133 
      134 get_tuples_by_spec:
      135    entry (p_ptr, p_ptr, p_ptr, p_ptr, p_ptr, p_code);
      136 
      137       p_code = dm_error_$unimplemented_entry;
      138       return;
      139 
      140 get_tuple_array_by_spec:
      141    entry (p_ptr, p_ptr, p_ptr, p_ptr, p_ptr, p_code);
      142 
      143       p_code = dm_error_$unimplemented_entry;
      144       return;
      145 
      146 get_tuples_and_ids:
      147    entry (p_ptr, p_ptr, p_ptr, p_ptr, p_ptr, p_ptr, p_code);
      148 
      149       p_code = dm_error_$unimplemented_entry;
      150       return;
      151 
      152 get_tuple_array_and_ids:
      153    entry (p_ptr, p_ptr, p_ptr, p_ptr, p_ptr, p_ptr, p_code);
      154 
      155       p_code = dm_error_$unimplemented_entry;
      156       return;
      157 
      158    end rlm_unimplemented_entries;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/02/86  1203.8  rlm_unimplemented_entries.pl1     >special_ldd>install>MR12.0-1173>rlm_unimplemented_entries.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
dm_error_$unimplemented_entry   000010 external static fixed bin(35,0)          dcl 58 ref 78 96 102 108 114 120 126 137 143 149 155
p_bit2a                                parameter       bit(2)                   dcl 45 ref 87 87
p_bit36a                               parameter       bit(36)                  dcl 44 ref 63 75 75 81 81 87 105
p_char_star                            parameter       char                     unaligned dcl 46 ref 69 69
p_code                                 parameter       fixed bin(35,0)          dcl 43 set ref 63 66* 69 72* 75 78* 81 84* 87 90* 93
                                                                                  96* 99 102* 105 108* 111 114* 117 120* 123 126*
                                                                                  129 131* 134 137* 140 143* 146 149* 152 155*
p_fb17                                 parameter       fixed bin(17,0)          dcl 47 ref 117
p_fb35                                 parameter       fixed bin(35,0)          dcl 48 ref 93 99 105 111 117
p_ptr                                  parameter       pointer                  dcl 49 ref 75 75 75 93 93 99 99 99 111 111 117 123
                                                                                  123 123 123 123 123 129 129 134 134 134 134 134
                                                                                  140 140 140 140 140 146 146 146 146 146 146 152
                                                                                  152 152 152 152 152

NAMES DECLARED BY EXPLICIT CONTEXT.
create_subset_index             000072 constant        entry                    external dcl 75
delete_tuples_by_spec           000174 constant        entry                    external dcl 93
destroy_cursor                  000406 constant        entry                    external dcl 129
destroy_index                   000124 constant        entry                    external dcl 81
destroy_relation_by_opening     000021 constant        entry                    external dcl 63
destroy_relation_by_path        000041 constant        entry                    external dcl 69
get_count                       000275 constant        entry                    external dcl 111
get_duplicate_key_count         000324 constant        entry                    external dcl 117
get_max_and_min_attributes      000352 constant        entry                    external dcl 123
get_population                  000253 constant        entry                    external dcl 105
get_tuple_array_and_ids         000544 constant        entry                    external dcl 152
get_tuple_array_by_spec         000462 constant        entry                    external dcl 140
get_tuples_and_ids              000512 constant        entry                    external dcl 146
get_tuples_by_spec              000432 constant        entry                    external dcl 134
modify_tuples_by_spec           000223 constant        entry                    external dcl 99
rlm_unimplemented_entries       000007 constant        entry                    external dcl 22
set_scope                       000147 constant        entry                    external dcl 87

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1044        1056     574        1054
Length      1300     574        12         205     247           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
rlm_unimplemented_entries            78 external procedure  is an external procedure.  

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
return_mac          ext_entry           ext_entry_desc

NO EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
dm_error_$unimplemented_entry




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     22 000006        63 000014        66 000033        67 000034        69 000035        72 000062        73 000063
     75 000064        78 000114        79 000117        81 000120        84 000140        85 000141        87 000142
     90 000165        91 000166        93 000167        96 000212        97 000215        99 000216       102 000243
    103 000246       105 000247       108 000267       109 000272       111 000273       114 000313       115 000316
    117 000317       120 000340       121 000343       123 000344       126 000376       127 000401       129 000402
    131 000422       132 000423       134 000424       137 000454       138 000457       140 000460       143 000504
    144 000507       146 000510       149 000536       150 000541       152 000542       155 000570       156 000573


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
