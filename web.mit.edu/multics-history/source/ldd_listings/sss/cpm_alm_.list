ASSEMBLY LISTING OF SEGMENT >special_ldd>install>MR12.0-1206>cpm_alm_.alm                    
ASSEMBLED ON:	11/04/86  1357.8 mst Tue
OPTIONS USED:	-target Level68 list 
ASSEMBLED BY:	ALM Version  6.7  October 1986  
ASSEMBLER CREATED:	10/08/86  1557.5 mst Wed

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Information Systems Inc., 1985 *
                                     4  " *                                                         *
                                     5  " ***********************************************************
                                     6  
                                     7  " ALM utilities used by the Control Point Manager
                                     8  
                                     9  " HISTORY COMMENTS:
                                    10  "  1) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
                                    11  "     audit(86-10-22,Fawcett), install(86-11-03,MR12.0-1206):
                                    12  "     Written to support control point management in March 1985 by G. Palter
                                    13  "     based on C. Hornig's task_alm_.
                                    14  "                                                      END HISTORY COMMENTS
                                    15  
    000000                          16  	name	cpm_alm_
                                    17  
                                    18  
                                    19  
                                    20  " Switch execution to the specified stack -- Control on the new stack is given
                                    21  "    to the program which owns the last frame of said stack as saved in
                                    22  "    its control_point_data at the point identified in the frame's return_ptr
                                    23  
                                    24  " dcl  cpm_alm_$switch_stacks entry (pointer);
                                    25  " call cpm_alm_$switch_stacks (new_stack_base_ptr);
                                    26  
                        000000      27  	segdef	switch_stacks
                                    28  
    000000                          29  switch_stacks:
    000000                          30  	inhibit	on		"<+><+><+><+><+><+><+><+><+><+><+><+><+><+><+><+><+>
                                    31  
    000000  aa  6 00000 3733 00     32  	epbp7	pr6|0			" pr7 <- stackbaseptr ()
                                    33  
    000001  aa  7 00004 3523 20     34  	epp2	pr7|stack_header.cpm_data_ptr,*	" pr2 <- addr (current control_point_data)
    000002  aa  2 00010 6523 00     35  	spri6	pr2|cpd.last_frame_ptr	" remember where to resume control later
                                    36  
    000003  aa  0 00002 3523 20     37  	epp2	pr0|2,*			" pr7 <- new_stack_base_ptr
    000004  aa  2 00000 3733 20     38  	epbp7	pr2|0,*			"  ...
                                    39  
    000005  aa  7 00004 3523 20     40  	epp2	pr7|stack_header.cpm_data_ptr,*	" pr2 <- addr (new control_point_data)
                                    41  
    000006  aa  2 00010 3723 20     42  	epp6	pr2|cpd.last_frame_ptr,*	" pr6 <- addr (last frame in new ctrl pt)
                                    43  
    000007                          44  	inhibit	off		"<-><-><-><-><-><-><-><-><-><-><-><-><-><-><-><-><->
                                    45  
    000007  aa  7 00044 7101 20     46  	short_return			" and give up control to the new stack
                                    47  
                                    48  " 
                                    49  
                                    50  " Invoke cpm_overseer_$overseer -- This entrypoint is the first one invoked in a new control
                                    51  "    point.  It completes the setup of this stack frame and then calls cpm_overseer_ to
                                    52  "    complete the setup of the control point's environment and to start the user's initial
                                    53  "    procedure.  When the user's initial procedure returns to cpm_overseer_$overseer, it
                                    54  "    returns to this entrypoint which then transfers to cpm_$self_destruct to destroy this
                                    55  "    control point.
                                    56  
                        000010      57  	entry	overseer
                        000010      58  	segdef	call_overseer
                                    59  
    000010                          60  overseer:
    000010                          61  call_overseer:
    000010  aa  7 00046 2721 20     62  	getlp				" save our linkage pointer
    000011  aa  6 00030 6501 00     63  	spri4	pr6|stack_frame.lp_ptr
                                    64  
    000012  0a   000010 3520 00     65  	epp2	overseer			" claim that we are cpm_alm_$overseer
    000013  aa  6 00026 2521 00     66  	spri2	pr6|stack_frame.entry_ptr
                                    67  
    000014  aa  6 00032 3501 20     68  	epp0	pr6|stack_frame.arg_ptr,*	" find cpm_caller_'s argument list
                                    69  
    000015  aa  6 00000 3731 00     70  	epbp7	pr6|0			" set the stack base
                                    71  
    000016  4a  4 00010 3521 20     72  	short_call cpm_overseer_$overseer	" run the initial procedure
    000017  aa  7 00036 6701 20
    000020  aa  6 00030 3701 20
                                    73  
    000021  4a  4 00012 7101 20     74  	tra	cpm_$self_destruct		" kill this control point
                                    75  
                                    76  " 
                                    77  
                                    78  " Invoke cpm_overseer_$generate_call -- This entrypoint is the first one invoked to execute
                                    79  "    an entrypoint in this control point as requested by another control point.  This
                                    80  "    entrypoint completes the setup of this stack frame and then calls
                                    81  "    cpm_overseer_$generate_call to actually invoke the user's entrypoint.  When the user's
                                    82  "    entrypoint returns to cpm_overseer_$generate_call, it returns to this entrypoint which
                                    83  "    then returns to the previous frame on this stack.  That frame usually belongs to
                                    84  "    cpm_$scheduler which causes the scheduling of control points to continue.
                                    85  
                        000022      86  	entry	generate_call
                        000022      87  	segdef	call_generate_call
                                    88  
    000022                          89  generate_call:
    000022                          90  call_generate_call:
    000022  aa  7 00046 2721 20     91  	getlp				" save our linkage pointer
    000023  aa  6 00030 6501 00     92  	spri4	pr6|stack_frame.lp_ptr
                                    93  
    000024  0a   000022 3520 00     94  	epp2	generate_call		" claim that we are cpm_alm_$generate_call
    000025  aa  6 00026 2521 00     95  	spri2	pr6|stack_frame.entry_ptr
                                    96  
    000026  aa  6 00032 3501 20     97  	epp0	pr6|stack_frame.arg_ptr,*	" find cpm_caller_'s argument list
                                    98  
    000027  aa  6 00000 3731 00     99  	epbp7	pr6|0			" set the stack base
                                   100  
    000030  4a  4 00014 3521 20    101  	short_call cpm_overseer_$generate_call	" invoke the procedure
    000031  aa  7 00036 6701 20
    000032  aa  6 00030 3701 20
                                   102  
    000033  aa  7 00042 7101 20    103  	return				" return to the scheduler (most likely)
                                   104  
                                   105  " 
                                   106  	include	stack_header
                                   1-1  "	BEGIN INCLUDE FILE ... stack_header.incl.alm  3/72  Bill Silver
                                   1-2  "
                                   1-3  "	modified 7/76 by M. Weaver for *system links and more system use of areas
                                   1-4  "	modified 3/77 by M. Weaver  to add rnt_ptr
                                   1-5  "	modified 7/77 by S. Webber to add run_unit_depth and assign_linkage_ptr
                                   1-6  "	modified 6/83 by J. Ives to add trace_frames and in_trace.
                                   1-7  
                                   1-8  " HISTORY COMMENTS:
                                   1-9  "  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
                                  1-10  "     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
                                  1-11  "     added the heap_header_ptr definition
                                  1-12  "  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
                                  1-13  "     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
                                  1-14  "     Modified to support control point management.  These changes were
                                  1-15  "     actually made in February 1985 by G. Palter.
                                  1-16  "  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
                                  1-17  "     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
                                  1-18  "     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
                                  1-19  "     bit pad after cur_lot_size for the cpm_enabled. This was done to save
                                  1-20  "     some space int the stack header and change the cpd_ptr unal to
                                  1-21  "     cpm_data_ptr (ITS pair).
                                  1-22  "                                                      END HISTORY COMMENTS
                                  1-23  
                        000004    1-24  	equ	stack_header.cpm_data_ptr,4		ptr to control point for this stack
                        000006    1-25  	equ	stack_header.combined_stat_ptr,6	ptr to separate static area
                                  1-26  
                        000010    1-27  	equ	stack_header.clr_ptr,8		ptr to area containing linkage sections
                        000012    1-28  	equ	stack_header.max_lot_size,10		number of words allowed in lot (DU)
                        000012    1-29  	equ	stack_header.main_proc_invoked,10	nonzero if main proc was invoked in run unit (DL)
                        000012    1-30  	equ	stack_header.run_unit_depth,10	number of active run units stacked (DL)
                        000013    1-31  	equ	stack_header.cur_lot_size,11		DU number of words (entries) in lot
                        000013    1-32            equ	stack_header.cpm_enabled,11		DL  non-zero if control point management is enabled
                        000014    1-33  	equ	stack_header.system_free_ptr,12	ptr to system storage area
                        000016    1-34  	equ	stack_header.user_free_ptr,14		ptr to user storage area
                                  1-35  
                        000020    1-36  	equ	stack_header.parent_ptr,16		ptr to parent stack or null
                        000022    1-37  	equ	stack_header.stack_begin_ptr,18	ptr to first stack frame
                        000024    1-38  	equ	stack_header.stack_end_ptr,20		ptr to next useable stack frame
                        000026    1-39  	equ	stack_header.lot_ptr,22		ptr to the lot for the current ring
                                  1-40  
                        000030    1-41  	equ	stack_header.signal_ptr,24		ptr to signal proc for current ring
                        000032    1-42  	equ	stack_header.bar_mode_sp,26		value of sp before entering bar mode
                        000034    1-43  	equ	stack_header.pl1_operators_ptr,28	ptr: pl1_operators_$operator_table
                        000036    1-44  	equ	stack_header.call_op_ptr,30		ptr to standard call operator
                                  1-45  
                        000040    1-46  	equ	stack_header.push_op_ptr,32		ptr to standard push operator
                        000042    1-47  	equ	stack_header.return_op_ptr,34		ptr to standard return operator
                        000044    1-48  	equ	stack_header.ret_no_pop_op_ptr,36	ptr: stand. return/ no pop operator
                        000046    1-49  	equ	stack_header.entry_op_ptr,38		ptr to standard entry operator
                                  1-50  
                        000050    1-51  	equ	stack_header.trans_op_tv_ptr,40	ptr to table of translator operator ptrs
                        000052    1-52  	equ	stack_header.isot_ptr,42		pointer to ISOT
                        000054    1-53  	equ	stack_header.sct_ptr,44		pointer to System Condition Table
                        000056    1-54  	equ	stack_header.unwinder_ptr,46		pointer to unwinder for current ring
                                  1-55  
                        000060    1-56  	equ	stack_header.sys_link_info_ptr,48	ptr to *system link name table
                        000062    1-57  	equ	stack_header.rnt_ptr,50		ptr to reference name table
                        000064    1-58  	equ	stack_header.ect_ptr,52		ptr to event channel table
                        000066    1-59  	equ	stack_header.assign_linkage_ptr,54	ptr to area for hcs_$assign_linkage calls
                        000070    1-60  	equ	stack_header.heap_header_ptr,56	ptr to heap header.
                        000072    1-61  	equ	stack_header.trace_frames,58		stack of trace_catch_ frames
                        000073    1-62  	equ	stach_header.trace_top_ptr,59		trace pointer
                        000074    1-63  	equ	stack_header.in_trace,60		trace antirecurse bit
                        000100    1-64  	equ	stack_header_end,64			length of stack header
                                  1-65  
                                  1-66  
                                  1-67  
                                  1-68  
                        000000    1-69  	equ	trace_frames.count,0		number of trace frames on stack
                        000001    1-70  	equ	trace_frames.top_ptr,1		packed pointer to top one
                                  1-71  
                                  1-72  "	The  following constant is an offset within the  pl1  operators table.
                                  1-73  "	It  references a  transfer vector table.
                                  1-74  
                        000551    1-75  	bool	tv_offset,551
                                  1-76  
                                  1-77  
                                  1-78  "	The  following constants are offsets within this transfer vector table.
                                  1-79  
                        001170    1-80  	equ	call_offset,tv_offset+271
                        001171    1-81  	equ	push_offset,tv_offset+272
                        001172    1-82  	equ	return_offset,tv_offset+273
                        001173    1-83  	equ	return_no_pop_offset,tv_offset+274
                        001174    1-84  	equ	entry_offset,tv_offset+275
                                  1-85  
                                  1-86  
                                  1-87  " 	END INCLUDE FILE stack_header.incl.alm
                                   107  " 
                                   108  	include	stack_frame
                                   2-1  "
                                   2-2  "	BEGIN INCLUDE FILE ... stack_frame.incl.alm   6/72 RBS
                                   2-3  "
                                   2-4  " Modified: 16 Dec 1977, D. Levin - to add fio_ps_ptr
                                   2-5  " Modified:  3 Feb 1978, P. Krupp - to add run_unit_manager_bit & main_proc_bit
                                   2-6  " Modified: 21 March 1978, D. Levin - change fio_ps_ptr to support_ptr
                                   2-7  "
                        000020     2-8  	equ	stack_frame.prev_sp,16
                        000020     2-9  	equ	stack_frame.condition_word,16
                        000022    2-10  	equ	stack_frame.next_sp,18
                        000022    2-11  	equ	stack_frame.signaller_word,18
                        000024    2-12  	equ	stack_frame.return_ptr,20
                        000026    2-13  	equ	stack_frame.entry_ptr,22
                        000030    2-14  	equ	stack_frame.operator_ptr,24
                        000030    2-15  	equ	stack_frame.lp_ptr,24
                        000032    2-16  	equ	stack_frame.arg_ptr,26
                        000034    2-17  	equ	stack_frame.static_ptr,28
                        000035    2-18  	equ	stack_frame.support_ptr,29	" only used by fortran I/O
                        000036    2-19  	equ	stack_frame.on_unit_rel_ptrs,30
                        000037    2-20  	equ	stack_frame.operator_ret_ptr,31
                        000037    2-21  	equ	stack_frame.translator_id,31
                        000040    2-22  	equ	stack_frame.regs,32
                        000060    2-23  	equ	stack_frame.min_length,48
                        000020    2-24  	equ	stack_frame.flag_word,16
                        020000    2-25  	bool	stack_frame.main_proc_bit,020000	(DL)
                        010000    2-26  	bool	stack_frame.run_unit_manager,010000	(DL)
                        004000    2-27  	bool	stack_frame.signal_bit,004000		(DL)
                        002000    2-28  	bool	stack_frame.crawl_out_bit,002000	(DL)
                        001000    2-29  	bool	stack_frame.signaller_bit,001000	(DL)
                        000400    2-30  	bool	stack_frame.link_trap_bit,000400	(DL)
                        000200    2-31  	bool	stack_frame.support_bit,000200	(DL)
                        000100    2-32  	bool	stack_frame.condition_bit,000100	(DL)
                                  2-33  
                                  2-34  "
                                  2-35  "	END INCLUDE FILE  ... stack_frame.incl.alm
                                  2-36  "
                                   109  " 
                                   110  	include	cpm_control_point_data
                                   3-1  " BEGIN INCLUDE FILE ... cpm_control_point_data.incl.alm
                                   3-2  
                                   3-3  " Created 03/12/85  1654.0 est Tue by convert_include_file,
                                   3-4  "   Version of 01/09/85  0954.4 est Wed.
                                   3-5  
                                   3-6  " HISTORY COMMENTS:
                                   3-7  "  1) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
                                   3-8  "     audit(86-10-08,Fawcett), install(86-11-03,MR12.0-1206):
                                   3-9  "     Written to support control point management in March 1985 by G. Palter.
                                  3-10  "     Edited to make all identifiers valid ALM symbols.  Converted from
                                  3-11  "     cpm_control_point_data.incl.pl1.
                                  3-12  "                                                      END HISTORY COMMENTS
                                  3-13  
                        000000    3-14  	equ	cpd.id,0
                        000001    3-15  	equ	cpd.group_id,1
                        000002    3-16  	equ	cpd.state,2
                        000003    3-17  	equ	cpd.flags,3	" LEVEL 2
                                  3-18  
                        400000    3-19  	bool	cpd.preferred,400000 " DU
                        200000    3-20  	bool	cpd.swapped_switches,200000 " DU
                                  3-21  
                        000004    3-22  	equ	cpd.priority,4
                        000006    3-23  	equ	cpd.stack_ptr,6
                        000010    3-24  	equ	cpd.last_frame_ptr,8
                        000012    3-25  	equ	cpd.destroy,10
                        000016    3-26  	equ	cpd.parent,14
                        000020    3-27  	equ	cpd.peers,16	" LEVEL 2
                                  3-28  
                        000020    3-29  	equ	cpd.prev_peer,16
                        000022    3-30  	equ	cpd.next_peer,18
                        000024    3-31  	equ	cpd.children,20 " LEVEL 2
                                  3-32  
                        000024    3-33  	equ	cpd.first_child,20
                        000026    3-34  	equ	cpd.last_child,22
                        000030    3-35  	equ	cpd.ready_queue,24 " LEVEL 2
                                  3-36  
                        000030    3-37  	equ	cpd.prev_ready,24
                        000032    3-38  	equ	cpd.next_ready,26
                        000034    3-39  	equ	cpd.user_cl_intermediary,28
                        000040    3-40  	equ	cpd.comment,32
                        000060    3-41  	equ	cpd.saved_environment,48 " LEVEL 2
                                  3-42  
                        000060    3-43  	equ	cpd.ips_mask,48
                        000061    3-44  	equ	cpd.privileges,49
                        000062    3-45  	equ	cpd.cl_intermediary,50
                        000066    3-46  	equ	cpd.io_switches,54 " LEVEL 3
                                  3-47  
                        000066    3-48  	equ	cpd.user_io,54
                        000070    3-49  	equ	cpd.user_input,56
                        000072    3-50  	equ	cpd.user_output,58
                        000074    3-51  	equ	cpd.error_output,60
                        000076    3-52  	equ	cpd.meters,62	" LEVEL 2
                                  3-53  
                                  3-54  " END INCLUDE FILE ... cpm_control_point_data.incl.alm
                                   111  
                                   112  	end
ENTRY SEQUENCES
     
    000034  5a   000037 0000 00
    000035  aa  7 00046 2721 20
    000036  0a   000010 7100 00
    000037  5a   000021 0000 00
    000040  aa  7 00046 2721 20
    000041  0a   000022 7100 00

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000042  5a   000003 000000 
    000043  5a   000063 600000 
    000044  aa   000000 000000 
    000045  55   000011 000002 
    000046  5a   000002 400003 
    000047  55   000006 000011 
    000050  aa  010 143 160 155
    000051  aa  137 141 154 155
    000052  aa  137 000 000 000
    000053  55   000021 000003 
    000054  0a   000022 400000 
    000055  55   000014 000003 
    000056  aa  022 143 141 154         call_generate_call
    000057  aa  154 137 147 145
    000060  aa  156 145 162 141
    000061  aa  164 145 137 143
    000062  aa  141 154 154 000
    000063  55   000030 000011 
    000064  0a   000040 500000 
    000065  55   000024 000003 
    000066  aa  015 147 145 156         generate_call
    000067  aa  145 162 141 164
    000070  aa  145 137 143 141
    000071  aa  154 154 000 000
    000072  55   000037 000021 
    000073  0a   000010 400000 
    000074  55   000033 000003 
    000075  aa  015 143 141 154         call_overseer
    000076  aa  154 137 157 166
    000077  aa  145 162 163 145
    000100  aa  145 162 000 000
    000101  55   000045 000030 
    000102  0a   000035 500000 
    000103  55   000042 000003 
    000104  aa  010 157 166 145         overseer
    000105  aa  162 163 145 145
    000106  aa  162 000 000 000
    000107  55   000054 000037 
    000110  0a   000000 400000 
    000111  55   000050 000003 
    000112  aa  015 163 167 151         switch_stacks
    000113  aa  164 143 150 137
    000114  aa  163 164 141 143
    000115  aa  153 163 000 000
    000116  55   000002 000045 
    000117  6a   000000 400002 
    000120  55   000057 000003 
    000121  aa  014 163 171 155         symbol_table
    000122  aa  142 157 154 137
    000123  aa  164 141 142 154
    000124  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000125  aa   000000 000015 
    000126  5a   000030 000000 
    000127  5a   000011 000000 
    000130  5a   000045 000000 
    000131  aa   000000 000000 
    000132  aa   000000 000000 
    000133  5a   000021 000000 
    000134  5a   000054 000000 
    000135  5a   000037 000000 
    000136  aa   000000 000000 
    000137  aa   000000 000000 
    000140  aa   000000 000000 
    000141  aa   000000 000000 
    000142  aa   000000 000000 

EXTERNAL NAMES

    000143  aa  015 163 145 154         self_destruct
    000144  aa  146 137 144 145
    000145  aa  163 164 162 165
    000146  aa  143 164 000 000
    000147  aa  004 143 160 155         cpm_
    000150  aa  137 000 000 000
    000151  aa  015 143 160 155         cpm_overseer_
    000152  aa  137 157 166 145
    000153  aa  162 163 145 145
    000154  aa  162 137 000 000

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000155  aa   000004 000000 
    000156  55   000107 000024 
    000157  aa   000004 000000 
    000160  55   000105 000101 
    000161  aa   000004 000000 
    000162  55   000107 000042 
    000163  aa   000001 000000 
    000164  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    000165  5a   000113 000000 
    000166  5a   000115 000000 
    000167  5a   000117 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000042 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000016 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         cpm_overseer_|overseer
    000011  5a   000125 0000 00
    000012  9a   777766 0000 46         cpm_|self_destruct
    000013  5a   000124 0000 00
    000014  9a   777764 0000 46         cpm_overseer_|generate_call
    000015  5a   000123 0000 00
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000004 
    000004  aa   000000 114732 
    000005  aa   732732 062314 
    000006  aa   000000 114774 
    000007  aa   612076 736425 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000213 
    000020  aa   000000 000171 
    000021  aa   000000 000176 
    000022  aa   000202 000171 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   040066 056067 
    000030  aa   040040 117143 
    000031  aa   164157 142145 
    000032  aa   162040 061071 
    000033  aa   070066 040040 
    000034  aa   107112 157150 
    000035  aa   156163 157156 
    000036  aa   056123 171163 
    000037  aa   115141 151156 
    000040  aa   164056 141040 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   055164 141162 
    000045  aa   147145 164040 
    000046  aa   114145 166145 
    000047  aa   154066 070040 
    000050  aa   154151 163164 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040040 040040 
    000057  aa   040040 040040 
    000060  aa   040040 040040 
    000061  aa   040040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000004 
    000066  aa   000106 000055 
    000067  aa   147714 750322 
    000070  aa   000000 114774 
    000071  aa   455666 400000 
    000072  aa   000122 000066 
    000073  aa   147714 750316 
    000074  aa   000000 114774 
    000075  aa   453561 000000 
    000076  aa   000140 000041 
    000077  aa   052721 247134 
    000100  aa   000000 105272 
    000101  aa   317215 400000 
    000102  aa   000151 000100 
    000103  aa   147714 750233 
    000104  aa   000000 114773 
    000105  aa   274474 600000 
    000106  aa   076163 160145          >special_ldd>install>MR12.0-1206>cpm_alm_.alm
    000107  aa   143151 141154 
    000110  aa   137154 144144 
    000111  aa   076151 156163 
    000112  aa   164141 154154 
    000113  aa   076115 122061 
    000114  aa   062056 060055 
    000115  aa   061062 060066 
    000116  aa   076143 160155 
    000117  aa   137141 154155 
    000120  aa   137056 141154 
    000121  aa   155040 040040 
    000122  aa   076163 160145          >special_ldd>install>MR12.0-1206>stack_header.incl.alm
    000123  aa   143151 141154 
    000124  aa   137154 144144 
    000125  aa   076151 156163 
    000126  aa   164141 154154 
    000127  aa   076115 122061 
    000130  aa   062056 060055 
    000131  aa   061062 060066 
    000132  aa   076163 164141 
    000133  aa   143153 137150 
    000134  aa   145141 144145 
    000135  aa   162056 151156 
    000136  aa   143154 056141 
    000137  aa   154155 040040 
    000140  aa   076154 144144          >ldd>include>stack_frame.incl.alm
    000141  aa   076151 156143 
    000142  aa   154165 144145 
    000143  aa   076163 164141 
    000144  aa   143153 137146 
    000145  aa   162141 155145 
    000146  aa   056151 156143 
    000147  aa   154056 141154 
    000150  aa   155040 040040 
    000151  aa   076163 160145          >special_ldd>install>MR12.0-1206>cpm_control_point_data.incl.alm
    000152  aa   143151 141154 
    000153  aa   137154 144144 
    000154  aa   076151 156163 
    000155  aa   164141 154154 
    000156  aa   076115 122061 
    000157  aa   062056 060055 
    000160  aa   061062 060066 
    000161  aa   076143 160155 
    000162  aa   137143 157156 
    000163  aa   164162 157154 
    000164  aa   137160 157151 
    000165  aa   156164 137144 
    000166  aa   141164 141056 
    000167  aa   151156 143154 
    000170  aa   056141 154155 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

          22    call_generate_call       cpm_alm_:      87,   90.
        1170    call_offset              stack_header:        80.
          10    call_overseer            cpm_alm_:      58,   61.
          24    cpd.children             cpm_control_point_data:    31.
          62    cpd.cl_intermediary      cpm_control_point_data:    45.
          40    cpd.comment              cpm_control_point_data:    40.
          12    cpd.destroy              cpm_control_point_data:    25.
          74    cpd.error_output         cpm_control_point_data:    51.
          24    cpd.first_child          cpm_control_point_data:    33.
           3    cpd.flags                cpm_control_point_data:    17.
           1    cpd.group_id             cpm_control_point_data:    15.
           0    cpd.id                   cpm_control_point_data:    14.
          66    cpd.io_switches          cpm_control_point_data:    46.
          60    cpd.ips_mask             cpm_control_point_data:    43.
          26    cpd.last_child           cpm_control_point_data:    34.
          10    cpd.last_frame_ptr       cpm_alm_:      35,   42,
                                         cpm_control_point_data:    24.
          76    cpd.meters               cpm_control_point_data:    52.
          22    cpd.next_peer            cpm_control_point_data:    30.
          32    cpd.next_ready           cpm_control_point_data:    38.
          16    cpd.parent               cpm_control_point_data:    26.
          20    cpd.peers                cpm_control_point_data:    27.
      400000    cpd.preferred            cpm_control_point_data:    19.
          20    cpd.prev_peer            cpm_control_point_data:    29.
          30    cpd.prev_ready           cpm_control_point_data:    37.
           4    cpd.priority             cpm_control_point_data:    22.
          61    cpd.privileges           cpm_control_point_data:    44.
          30    cpd.ready_queue          cpm_control_point_data:    35.
          60    cpd.saved_environment    cpm_control_point_data:    41.
           6    cpd.stack_ptr            cpm_control_point_data:    23.
           2    cpd.state                cpm_control_point_data:    16.
      200000    cpd.swapped_switches     cpm_control_point_data:    20.
          34    cpd.user_cl_intermediary       cpm_control_point_data:    39.
          70    cpd.user_input           cpm_control_point_data:    49.
          66    cpd.user_io              cpm_control_point_data:    48.
          72    cpd.user_output          cpm_control_point_data:    50.
                cpm_                     cpm_alm_:      74.
                cpm_overseer_            cpm_alm_:      72,  101.
        1174    entry_offset             stack_header:        84.
          22    generate_call            cpm_alm_:      86,   89,   94,  101.
          10    overseer                 cpm_alm_:      57,   60,   65,   72.
        1171    push_offset              stack_header:        81.
        1173    return_no_pop_offset     stack_header:        83.
        1172    return_offset            stack_header:        82.
                self_destruct            cpm_alm_:      74.
          73    stach_header.trace_top_ptr     stack_header:        62.
          32    stack_frame.arg_ptr      cpm_alm_:      68,   97,
                                         stack_frame:   16.
         100    stack_frame.condition_bit      stack_frame:   32.
          20    stack_frame.condition_word     stack_frame:    9.
        2000    stack_frame.crawl_out_bit      stack_frame:   28.
          26    stack_frame.entry_ptr    cpm_alm_:      66,   95,
                                         stack_frame:   13.
          20    stack_frame.flag_word    stack_frame:   24.
         400    stack_frame.link_trap_bit      stack_frame:   30.
          30    stack_frame.lp_ptr       cpm_alm_:      63,   92,
                                         stack_frame:   15.
       20000    stack_frame.main_proc_bit      stack_frame:   25.
          60    stack_frame.min_length   stack_frame:   23.
          22    stack_frame.next_sp      stack_frame:   10.
          36    stack_frame.on_unit_rel_ptrs   stack_frame:   19.
          30    stack_frame.operator_ptr       stack_frame:   14.
          37    stack_frame.operator_ret_ptr   stack_frame:   20.
          20    stack_frame.prev_sp      stack_frame:    8.
          40    stack_frame.regs         stack_frame:   22.
          24    stack_frame.return_ptr   stack_frame:   12.
       10000    stack_frame.run_unit_manager   stack_frame:   26.
        1000    stack_frame.signaller_bit      stack_frame:   29.
          22    stack_frame.signaller_word     stack_frame:   11.
        4000    stack_frame.signal_bit   stack_frame:   27.
          34    stack_frame.static_ptr   stack_frame:   17.
         200    stack_frame.support_bit  stack_frame:   31.
          35    stack_frame.support_ptr  stack_frame:   18.
          37    stack_frame.translator_id      stack_frame:   21.
          66    stack_header.assign_linkage_ptr      stack_header:        59.
          32    stack_header.bar_mode_sp       stack_header:        42.
          36    stack_header.call_op_ptr       stack_header:        44.
          10    stack_header.clr_ptr     stack_header:        27.
           6    stack_header.combined_stat_ptr       stack_header:        25.
           4    stack_header.cpm_data_ptr      cpm_alm_:      34,   40,
                                               stack_header:        24.
          13    stack_header.cpm_enabled       stack_header:        32.
          13    stack_header.cur_lot_size      stack_header:        31.
          64    stack_header.ect_ptr     stack_header:        58.
          46    stack_header.entry_op_ptr      stack_header:        49.
          70    stack_header.heap_header_ptr   stack_header:        60.
          74    stack_header.in_trace    stack_header:        63.
          52    stack_header.isot_ptr    stack_header:        52.
          26    stack_header.lot_ptr     stack_header:        39.
          12    stack_header.main_proc_invoked       stack_header:        29.
          12    stack_header.max_lot_size      stack_header:        28.
          20    stack_header.parent_ptr  stack_header:        36.
          34    stack_header.pl1_operators_ptr       stack_header:        43.
          40    stack_header.push_op_ptr       stack_header:        46.
          42    stack_header.return_op_ptr     stack_header:        47.
          44    stack_header.ret_no_pop_op_ptr       stack_header:        48.
          62    stack_header.rnt_ptr     stack_header:        57.
          12    stack_header.run_unit_depth    stack_header:        30.
          54    stack_header.sct_ptr     stack_header:        53.
          30    stack_header.signal_ptr  stack_header:        41.
          22    stack_header.stack_begin_ptr   stack_header:        37.
          24    stack_header.stack_end_ptr     stack_header:        38.
          14    stack_header.system_free_ptr   stack_header:        33.
          60    stack_header.sys_link_info_ptr       stack_header:        56.
          72    stack_header.trace_frames      stack_header:        61.
          50    stack_header.trans_op_tv_ptr   stack_header:        51.
          56    stack_header.unwinder_ptr      stack_header:        54.
          16    stack_header.user_free_ptr     stack_header:        34.
         100    stack_header_end         stack_header:        64.
           0    switch_stacks            cpm_alm_:      27,   29.
           0    trace_frames.count       stack_header:        69.
           1    trace_frames.top_ptr     stack_header:        70.
         551    tv_offset                stack_header:        75,   80,   81,   82,   83,   84.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
