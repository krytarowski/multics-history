	COMPILATION LISTING OF SEGMENT do_parse
	Compiled by: Multics PL/I Compiler, Release 33e, of October 6, 1992
	Compiled at: CGI                             
	Compiled on: 2000-04-18_1149.38_Tue_mdt
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 
       14 
       15 /****^  HISTORY COMMENTS:
       16*  1) change(91-01-18,Blackmore), approve(91-01-18,MCR8234),
       17*     audit(91-12-05,Huen), install(92-04-24,MR12.5-1011):
       18*     Change calls to 'lex' and 'statement_type', for constant reference
       19*     resolution fix.
       20*                                                   END HISTORY COMMENTS */
       21 
       22 
       23 /* Note well:	The declarations and all statements after the label
       24*		"get_next_statement" are copied from procedure_parse,
       25*		and any changes made to either must be made to both.
       26*
       27*	Written on:	22 October 1970 by Paul Green for Version II
       28*	Modified:		9 February 1978 by Richard Barnes to fix 1699
       29*	Modified:		21 March 1980 by M. N. Davidoff to print warnings for multiple closure end statements and
       30*			to diagnose "do while(exp,exp);".
       31**/
       32 /* format: style3 */
       33 do_parse:
       34      proc (k, entry_ptr, our_conditions, father_block, his_end_ptr, our_entry_flag, our_return_flag, in_iterative_do);
       35 
       36 dcl	(do, ref, spec)	ptr;
       37 dcl	(p, q, entry_ptr, label_ptr, end_ptr, cur_block, father_block, his_end_ptr)
       38 			ptr;
       39 dcl	do_statement_node	ptr;
       40 dcl	(k, i, type)	fixed bin (15);
       41 dcl	(conditions, our_conditions)
       42 			bit (12) aligned;
       43 dcl	(our_entry_flag, entry_flag, return_flag, our_return_flag, in_iterative_do, iterative_do_entered)
       44 			bit (1) aligned;
       45 
       46 dcl	pl1_stat_$cur_statement
       47 			ptr ext static;
       48 
       49 dcl	(binary, bit, null) builtin;
       50 
       51 dcl	action_index	(0:36) fixed bin (15) int static
       52 			init (0, 0, 0, 1, 0, 10, 2, 10, 10, 0, 3, 0, 4, 8, 0, 10, 0, 10, 0, 5, 10, 0, 6, 10, 7, 10, 10,
       53 			0, 0, 10, 0, 0, 0, 10, 0, 10, 9);
       54 
  1     1 /* BEGIN INCLUDE FILE parse.incl.pl1 */
  1     2 
  1     3 
  1     4 /****^  HISTORY COMMENTS:
  1     5*  1) change(91-01-09,Blackmore), approve(91-01-09,MCR8234),
  1     6*     audit(91-12-05,Huen), install(92-04-24,MR12.5-1011):
  1     7*     Change entry points for 'lex', 'lex$write_last_line', and
  1     8*     'statement_type', for constant reference resolution fix.
  1     9*                                                   END HISTORY COMMENTS */
  1    10 
  1    11 declare	attribute_parse	entry(ptr,ptr,fixed bin(15),bit(1) aligned);
  1    12 			/* parameter 1:	(input)	block node ptr		*/
  1    13 			/* parameter 2:	(input)	symbol node ptr		*/
  1    14 			/* parameter 3:	(in/out)	token index		*/
  1    15 			/* parameter 4:	(input)   called while doing generic	*/
  1    16 
  1    17 declare	context		entry(ptr,ptr,fixed bin(15));
  1    18 			/* parameter 1:	(input)	usually token node ptr	*/
  1    19 			/* parameter 2:	(input)	block node ptr		*/
  1    20 			/* parameter 3:	(input)	context type		*/
  1    21 
  1    22 declare	data_list_parse	entry(fixed bin(15),ptr,ptr)
  1    23 			returns(bit(1) aligned);
  1    24 			/* parameter 1:	(in/out)	token index		*/
  1    25 			/* parameter 2:	(input)	block node ptr		*/
  1    26 			/* parameter 3:	(output)	data list parse tree ptr	*/
  1    27 			/* return:	(output)	valid parse bit		*/
  1    28 
  1    29 declare	declare_label	entry(ptr,ptr,ptr,bit(3) aligned);
  1    30 			/* parameter 1:	(input)	block node ptr		*/
  1    31 			/* parameter 2:	(input)	statement node ptr	*/
  1    32 			/* parameter 3:	(input)	label list ptr or null	*/
  1    33 			/* parameter 4:	(input)	declare type		*/
  1    34 
  1    35 declare	declare_parse	entry(fixed bin(15),ptr,ptr);
  1    36 			/* parameter 1:	(input)	token index		*/
  1    37 			/* parameter 2:	(input)	block node ptr		*/
  1    38 			/* parameter 3:	(input)	label list ptr or null	*/
  1    39 
  1    40 declare	declare_parse$abort	entry(fixed bin(15),ptr);
  1    41 			/* parameter 1:	(input)	error number		*/
  1    42 			/* parameter 2:	(input)	any node ptr		*/
  1    43 
  1    44 declare	default_parse	entry(fixed bin(15),ptr,ptr);
  1    45 			/* parameter 1:	(input)	token index		*/
  1    46 			/* parameter 2:	(input)	block node ptr		*/
  1    47 			/* parameter 3:	(input)	label list ptr or null	*/
  1    48 
  1    49 declare	descriptor_parse	entry(ptr,ptr,fixed bin(15))
  1    50 			returns(ptr);
  1    51 			/* parameter 1:	(input)	block node ptr		*/
  1    52 			/* parameter 2:	(input)	token node ptr or null	*/
  1    53 			/* parameter 3:	(in/out)	token index		*/
  1    54 			/* return:	(output)	symbol node ptr		*/
  1    55 
  1    56 declare	do_parse		entry(fixed bin(15),ptr,bit(12) aligned,ptr,ptr,
  1    57 			bit(1) aligned,bit(1) aligned,bit(1) aligned);
  1    58 			/* parameter 1:	(in/out)	token index		*/
  1    59 			/* parameter 2:	(input)	label list ptr or null	*/
  1    60 			/* parameter 3:	(input)	conditions		*/
  1    61 			/* parameter 4:	(input)	father block node ptr	*/
  1    62 			/* parameter 5:	(output)	end ptr			*/
  1    63 			/* parameter 6:	(input)	entry bit			*/
  1    64 			/* parameter 7:	(input)	return bit		*/
  1    65 			/* parameter 8:	(input)	iterative do bit		*/
  1    66 
  1    67 declare	evaluate		entry(bit(9) aligned,ptr,ptr) returns(ptr);
  1    68 			/* parameter 1:	(input)	opcode		*/
  1    69 			/* parameter 2:	(input)	left operand (token ptr)	*/
  1    70 			/* parameter 3:	(input)	right operand (token ptr)	*/
  1    71 			/* return:	(output)	ptr to result node	*/
  1    72 
  1    73 declare	expression_parse	entry(fixed bin(15),ptr)
  1    74 			returns(ptr);
  1    75 			/* parameter 1:	(in/out)	token index		*/
  1    76 			/* parameter 2:	(input)	block node ptr		*/
  1    77 			/* return:	(output)	expression parse tree ptr	*/
  1    78 
  1    79 declare	format_list_parse	entry(fixed bin(15),ptr,ptr,ptr)
  1    80 			returns(bit(1) aligned);
  1    81 			/* parameter 1:	(in/out)	token index		*/
  1    82 			/* parameter 2:	(input)	block node ptr		*/
  1    83 			/* parameter 3:	(input)	statement node ptr		*/
  1    84 			/* parameter 4:	(output)	format list parse tree ptr	*/
  1    85 			/* return:	(output)	valid parse bit		*/
  1    86 
  1    87 declare	if_parse		entry(fixed bin(15),ptr,bit(12) aligned,ptr,ptr,
  1    88 			bit(1) aligned);
  1    89 			/* parameter 1:	(in/out)	token index		*/
  1    90 			/* parameter 2:	(input)	label list ptr or null	*/
  1    91 			/* parameter 3:	(input)	conditions		*/
  1    92 			/* parameter 4:	(input)	father block node ptr	*/
  1    93 			/* parameter 5:	(input)	end ptr			*/
  1    94 			/* parameter 6:	(output)	valid parse bit		*/
  1    95 
  1    96 declare	io_statement_parse	entry(fixed bin(15),ptr,bit(12) aligned,ptr,ptr,
  1    97 			bit(1) aligned,bit(9) aligned);
  1    98 			/* parameter 1:	(in/out)	token index		*/
  1    99 			/* parameter 2:	(input)	label list ptr or null	*/
  1   100 			/* parameter 3:	(input)	conditions		*/
  1   101 			/* parameter 4:	(input)	father block node ptr	*/
  1   102 			/* parameter 5:	(output)	end ptr			*/
  1   103 			/* parameter 6:	(output)	valid parse bit		*/
  1   104 			/* parameter 7:	(output)	statement type		*/
  1   105 
  1   106 declare	lex		entry(ptr);
  1   107 			/* parameter 1:	(input)	block node ptr		*/
  1   108 
  1   109 declare	lex$write_last_line	entry(ptr);
  1   110 			/* parameter 1:	(input)	block node ptr		*/
  1   111 
  1   112 declare	lex$initialize_lex	entry(ptr,fixed bin(15));
  1   113 			/* parameter 1:	(input)	ptr to source		*/
  1   114 			/* parameter 2:	(input)	length of source (chars)	*/
  1   115 
  1   116 declare	on_parse		entry(fixed bin(15),ptr,bit(12) aligned,ptr,ptr);
  1   117 			/* parameter 1:	(in/out)	token index		*/
  1   118 			/* parameter 2:	(input)	label list ptr or null	*/
  1   119 			/* parameter 3:	(input)	conditions		*/
  1   120 			/* parameter 4:	(input)	father block node ptr	*/
  1   121 			/* parameter 5:	(output)	end ptr (set to null)	*/
  1   122 
  1   123 declare	on_parse$revert	entry(fixed bin(15),ptr,ptr);
  1   124 			/* parameter 1:	(input)	token index	*/
  1   125 			/* parameter 2:	(input)	statement node ptr	*/
  1   126 			/* parameter 3:	(input)	block node ptr	*/
  1   127 
  1   128 declare	parse		entry(ptr,ptr,fixed bin(15));
  1   129 			/* parameter 1:	(output)	root ptr		*/
  1   130 			/* parameter 2	(input)	source ptr		*/
  1   131 			/* parameter 3:	(input)	source length		*/
  1   132 
  1   133 declare	procedure_parse	entry(fixed bin(15),ptr,bit(12) aligned,ptr,ptr,
  1   134 			bit(9) aligned,bit(1) aligned);
  1   135 			/* parameter 1:	(in/out)	token index		*/
  1   136 			/* parameter 2:	(input)	label list ptr or null	*/
  1   137 			/* parameter 3:	(input)	conditions		*/
  1   138 			/* parameter 4:	(input)	father block node ptr	*/
  1   139 			/* parameter 5:	(output)	end ptr		*/
  1   140 			/* parameter 6:	(input)	block type		*/
  1   141 			/* parameter 7:	(input)	no return statement bit	*/
  1   142 
  1   143 declare	process_entry	entry(fixed bin(15),bit(9) aligned,ptr,ptr,bit(12) aligned);
  1   144 			/* parameter 1:	(in/out)	token index		*/
  1   145 			/* parameter 2:	(input)	statement type		*/
  1   146 			/* parameter 3:	(input)	block node ptr		*/
  1   147 			/* parameter 4:	(input)	label list ptr or null	*/
  1   148 			/* parameter 5:	(input)	conditions		*/
  1   149 
  1   150 declare	reference_parse	entry(fixed bin(15),ptr)
  1   151 			returns(ptr);
  1   152 			/* parameter 1:	(in/out)	token index		*/
  1   153 			/* parameter 2:	(input)	block node ptr		*/
  1   154 			/* return:	(output)	reference parse tree ptr	*/
  1   155 
  1   156 declare	reserve$rename_parse entry(fixed bin(15)) returns(bit(1) aligned);
  1   157 			/* parameter 1:	(in/out)	token index	 */
  1   158 			/* return:	(output)	success bit	 */
  1   159 
  1   160 declare	statement_parse	entry(fixed bin(15),ptr,bit(12) aligned,ptr,fixed bin(15));
  1   161 			/* parameter 1:	(in/out)	token index		*/
  1   162 			/* parameter 2:	(input)	label list ptr or null	*/
  1   163 			/* parameter 3:	(input)	conditions		*/
  1   164 			/* parameter 4:	(input)	block node ptr		*/
  1   165 			/* parameter 5:	(input)	statement type		*/
  1   166 
  1   167 declare	statement_type	entry(ptr,fixed bin(15),ptr,bit(12) aligned)
  1   168 			returns(fixed bin(15));
  1   169 			/* parameter 1:	(input)	block node ptr		*/
  1   170 			/* parameter 2:	(in/out)	token index		*/
  1   171 			/* parameter 3:	(output)	label list ptr or null	*/
  1   172 			/* parameter 4:	(output)	conditions		*/
  1   173 			/* return:	(output)	statement type		*/
  1   174 
  2     1 /****^  *********************************************************
  2     2*        *                                                       *
  2     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  2     4*        *                                                       *
  2     5*        ********************************************************* */
  2     6 
  2     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  2     8 
  2     9 
  2    10 /****^  HISTORY COMMENTS:
  2    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  2    12*     install(89-07-31,MR12.3-1066):	
  2    13*     Removed the obsolete parameter source_line from the dcl of error_().
  2    14*                                                   END HISTORY COMMENTS */
  2    15 
  2    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  2    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  2    18* */
  2    19 
  2    20 declare	adjust_count	entry(pointer);
  2    21 			/* parameter 1:	(input)	any node pointer		*/
  2    22 
  2    23 declare	bindec		entry(fixed bin(31)) reducible
  2    24 			returns(character(12) aligned);
  2    25 			/* parameter 1:	(input)	bin value			*/
  2    26 			/* return:	(output)	character value with blanks	*/
  2    27 
  2    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  2    29 			returns(character(12) aligned varying);
  2    30 			/* parameter 1:	(input)	binary value		*/
  2    31 			/* return:	(output)	char value without blanks	*/
  2    32 
  2    33 declare	binoct		entry(fixed bin(31)) reducible
  2    34 			returns(char(12) aligned);
  2    35 			/* parameter 1:	(input)	binary value		*/
  2    36 			/* return:	(output)	char value with blanks	*/
  2    37 
  2    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  2    39 			returns(char(12) aligned);
  2    40 			/* parameter 1:	(input)	binary value		*/
  2    41 			/* return:	(output)	right-aligned char value	*/
  2    42 
  2    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  2    44 			returns(char(12) varying aligned);
  2    45 			/* parameter 1:	(input)	binary value		*/
  2    46 			/* returns:	(output)	char value without blanks	*/
  2    47 
  2    48 declare	compare_expression	entry(pointer,pointer) reducible
  2    49 			returns(bit(1) aligned);
  2    50 			/* parameter 1:	(input)	any node pointer		*/
  2    51 			/* parameter 2:	(input)	any node pointer		*/
  2    52 			/* return:	(output)	compare bit		*/
  2    53 
  2    54 declare	constant_length	entry (pointer, fixed bin (71))
  2    55 			returns (bit (1) aligned);
  2    56 			/* parameter 1:	(input)	reference node pointer	*/
  2    57 			/* parameter 2:	(input)	value of constant length	*/
  2    58 			/* return:	(output)	"1"b if constant length	*/
  2    59 
  2    60 declare	convert		entry(pointer,bit(36) aligned)
  2    61 			returns(pointer);
  2    62 			/* parameter 1:	(input)	any node pointer		*/
  2    63 			/* parameter 2:	(input)	target type		*/
  2    64 			/* return:	(output)	target value tree pointer	*/
  2    65 
  2    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  2    67 			returns(pointer);
  2    68 			/* parameter 1:	(input)	any node pointer		*/
  2    69 			/* parameter 2:	(input)	target type		*/
  2    70 			/* return:	(output)	target value tree pointer	*/
  2    71 
  2    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  2    73 			returns(pointer);
  2    74 			/* parameter 1:	(input)	any node pointer		*/
  2    75 			/* parameter 2:	(input)	target type		*/
  2    76 			/* return:	(output)	target value tree pointer	*/
  2    77 
  2    78 declare	convert$validate	entry(pointer,pointer);
  2    79 			/* parameter 1:	(input)	source value tree pointer	*/
  2    80 			/* parameter 2:	(input)	target reference node pointer	*/
  2    81 
  2    82 declare	convert$to_target_fb entry(pointer,pointer)
  2    83 			returns(pointer);
  2    84 			/* parameter 1:	(input)	source value tree pointer	*/
  2    85 			/* parameter 2:	(input)	target reference node pointer	*/
  2    86 			/* return:	(output)	target value tree pointer	*/
  2    87 
  2    88 declare	convert$to_target	entry(pointer,pointer)
  2    89 			returns(pointer);
  2    90 			/* parameter 1:	(input)	source value tree pointer	*/
  2    91 			/* parameter 2:	(input)	target reference node pointer	*/
  2    92 			/* return:	(output)	target value tree pointer	*/
  2    93 
  2    94 declare	copy_expression	entry(pointer unaligned)
  2    95 			returns(pointer);
  2    96 			/* parameter 1:	(input)	any node pointer		*/
  2    97 			/* return:	(output)	any node pointer		*/
  2    98 
  2    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  2   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  2   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  2   102 
  2   103 declare	copy_unique_expression entry(pointer)
  2   104 			returns(pointer);
  2   105 			/* parameter 1:	(input)	any node pointer		*/
  2   106 			/* return:	(output)	any node pointer		*/
  2   107 
  2   108 declare	create_array	entry()
  2   109 			returns(pointer);
  2   110 			/* return:	(output)	array node pointer		*/
  2   111 
  2   112 declare	create_block	entry(bit(9) aligned,pointer)
  2   113 			returns(pointer);
  2   114 			/* parameter 1:	(input)	block type		*/
  2   115 			/* parameter 2:	(input)	father block node pointer	*/
  2   116 			/* return:	(output)	block node pointer		*/
  2   117 
  2   118 declare	create_bound	entry()
  2   119 			returns(pointer);
  2   120 			/* return:	(output)	bound node pointer		*/
  2   121 
  2   122 declare	create_context	entry(pointer,pointer)
  2   123 			returns(pointer);
  2   124 			/* parameter 1:	(input)	block node pointer		*/
  2   125 			/* parameter 2:	(input)	token pointer		*/
  2   126 			/* return:	(output)	context node pointer	*/
  2   127 
  2   128 declare	create_cross_reference entry()
  2   129 			returns(pointer);
  2   130 			/* return:	(output)	cross reference node pointer	*/
  2   131 
  2   132 declare	create_default	entry
  2   133 			returns(pointer);
  2   134 			/* return:	(output)	default node pointer	*/
  2   135 
  2   136 declare	create_identifier	entry()
  2   137 			returns(pointer);
  2   138 			/* return:	(output)	token node pointer		*/
  2   139 
  2   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  2   141 			returns(pointer);
  2   142 			/* parameter 1:	(input)	block node pointer		*/
  2   143 			/* parameter 2:	(input)	token node pointer		*/
  2   144 			/* parameter 3:	(input)	declare type		*/
  2   145 			/* return:	(output)	label node pointer		*/
  2   146 
  2   147 declare	create_list	entry(fixed bin(15))
  2   148 			returns(pointer);
  2   149 			/* parameter 1:	(input)	number of list elements	*/
  2   150 			/* return:	(output)	list node pointer		*/
  2   151 
  2   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  2   153 			returns(pointer);
  2   154 			/* parameter 1:	(input)	operator type		*/
  2   155 			/* parameter 2:	(input)	number of operands		*/
  2   156 			/* return:	(output)	operator node pointer	*/
  2   157 
  2   158 declare	create_reference	entry(pointer)
  2   159 			returns(pointer);
  2   160 			/* parameter 1:	(input)	symbol node pointer		*/
  2   161 			/* return:	(output)	reference node pointer	*/
  2   162 
  2   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   164 			returns(pointer);
  2   165 			/* parameter 1:	(input)	statement type		*/
  2   166 			/* parameter 2:	(input)	block node pointer		*/
  2   167 			/* parameter 3:	(input)	label node pointer		*/
  2   168 			/* parameter 4:	(input)	conditions		*/
  2   169 			/* return:	(output)	statement node pointer	*/
  2   170 
  2   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   172 			returns(pointer);
  2   173 			/* parameter 1:	(input)	statement type		*/
  2   174 			/* parameter 2:	(input)	block node pointer		*/
  2   175 			/* parameter 3:	(input)	label node pointer		*/
  2   176 			/* parameter 4:	(input)	conditions		*/
  2   177 			/* return:	(output)	statement node pointer	*/
  2   178 
  2   179 declare	create_storage	entry(fixed bin(15))
  2   180 			returns(pointer);
  2   181 			/* parameter 1:	(input)	number of words		*/
  2   182 			/* return:	(output)	storage block pointer	*/
  2   183 
  2   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  2   185 			returns(pointer);
  2   186 			/* parameter 1:	(input)	block node pointer		*/
  2   187 			/* parameter 2:	(input)	token node pointer		*/
  2   188 			/* parameter 3:	(input)	declare type		*/
  2   189 			/* return:	(output)	symbol node pointer		*/
  2   190 
  2   191 declare	create_token	entry (character (*), bit (9) aligned)
  2   192 			returns (ptr);
  2   193 			/* parameter 1:	(input)	token string		*/
  2   194 			/* parameter 2:	(input)	token type		*/
  2   195 			/* return:	(output)	token node ptr		*/
  2   196 
  2   197 declare	create_token$init_hash_table entry ();
  2   198 
  2   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  2   200 			returns (ptr);
  2   201 			/* parameter 1:	(input)	token string		*/
  2   202 			/* parameter 2:	(input)	token type		*/
  2   203 			/* parameter 3:	(input)	protected flag		*/
  2   204 			/* return:	(output)	token node ptr		*/
  2   205 
  2   206 declare	decbin		entry(character(*) aligned) reducible
  2   207 			returns(fixed bin(31));
  2   208 			/* parameter 1:	(input)	decimal character string	*/
  2   209 			/* return:	(output)	binary value		*/
  2   210 
  2   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  2   212 			returns(pointer);
  2   213 			/* parameter 1:	(input)	value			*/
  2   214 			/* parameter 2:	(input)	type			*/
  2   215 			/* parameter 3:	(input)	size			*/
  2   216 			/* parameter 4:	(input)	scale			*/
  2   217 			/* return:	(output)	reference node pointer	*/
  2   218 
  2   219 declare	declare_constant$bit entry(bit(*) aligned)
  2   220 			returns(pointer);
  2   221 			/* parameter 1:	(input)	bit			*/
  2   222 			/* return:	(output)	reference node pointer	*/
  2   223 
  2   224 declare	declare_constant$char entry(character(*) aligned)
  2   225 			returns(pointer);
  2   226 			/* parameter 1:	(input)	character			*/
  2   227 			/* return:	(output)	reference node pointer	*/
  2   228 
  2   229 declare	declare_constant$desc entry(bit(*) aligned)
  2   230 			returns(pointer);
  2   231 			/* parameter 1:	(input)	descriptor bit value	*/
  2   232 			/* return:	(output)	reference node pointer	*/
  2   233 
  2   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  2   235 			returns(pointer);
  2   236 			/* parameter 1:	(input)	integer			*/
  2   237 			/* return:	(output)	reference node pointer	*/
  2   238 
  2   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   240 			returns(pointer);
  2   241 			/* parameter 1:	(input)	block node pointer		*/
  2   242 			/* parameter 2:	(input)	statement node pointer	*/
  2   243 			/* parameter 3:	(input)	symbol node pointer		*/
  2   244 			/* parameter 4:	(input)	loc pointer		*/
  2   245 			/* parameter 5:	(input)	array descriptor bit
  2   246*						cross_section bit	*/
  2   247 			/* return:	(output)	reference node pointer	*/
  2   248 
  2   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   250 			returns(pointer);
  2   251 			/* parameter 1:	(input)	block node pointer	*/
  2   252 			/* parameter 2:	(input)	statement node pointer 	*/
  2   253 			/* parameter 3:	(input)	symbol node pointer	*/
  2   254 			/* parameter 4:	(input)	loc pointer	*/
  2   255 			/* parameter 5:	(input)	array descriptor bit
  2   256*						cross_section bit	*/
  2   257 			/* return:	(output)	reference node pointer	*/
  2   258 
  2   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   260 			returns(pointer);
  2   261 			/* parameter 1:	(input)	block node pointer		*/
  2   262 			/* parameter 2:	(input)	statement node pointer	*/
  2   263 			/* parameter 3:	(input)	symbol node pointer		*/
  2   264 			/* parameter 4:	(input)	loc pointer		*/
  2   265 			/* parameter 5:	(input)	array descriptor bit
  2   266*						cross_section bit	*/
  2   267 			/* return:	(output)	reference node pointer	*/
  2   268 
  2   269 declare	declare_integer	entry(pointer)
  2   270 			returns(pointer);
  2   271 			/* parameter 1:	(input)	block node pointer		*/
  2   272 			/* return:	(output)	reference node pointer 	*/
  2   273 
  2   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  2   275 			/* parameter 1:	(input)	picture string		*/
  2   276 			/* parameter 2:	(input)	symbol node pointer		*/
  2   277 			/* parameter 3:	(output)	error code, if any		*/
  2   278 
  2   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  2   280 			returns(pointer);
  2   281 			/* parameter 1:	(input)	picture string		*/
  2   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  2   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  2   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  2   285 			/* return:	(output)	reference node pointer	*/
  2   286 
  2   287 declare	declare_pointer	entry(pointer)
  2   288 			returns(pointer);
  2   289 			/* parameter 1:	(input)	block node pointer		*/
  2   290 			/* return:	(output)	reference node pointer	*/
  2   291 
  2   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  2   293 			returns(pointer);
  2   294 			/* parameter 1:	(input)	type			*/
  2   295 			/* parameter 2:	(input)	precision			*/
  2   296 			/* parameter 3:	(input)	scale			*/
  2   297 			/* parameter 4:	(input)	length			*/
  2   298 			/* return:	(output)	reference node pointer	*/
  2   299 
  2   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  2   301 			returns(char(120) varying);
  2   302 			/* parameter 1:	(input)	node pointer		*/
  2   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   304 			/* return:	(output)	source line id		*/
  2   305 
  2   306 declare	decode_source_id	entry(
  3     1 			1 structure unaligned,
  3     2 			  2 /* file_number */	bit(8),
  3     3 			  2 /* line_number */	bit(14),
  3     4 			  2 /* stmt_number */	bit(5),
  2   307 
  2   308 			bit(1) aligned)
  2   309 			returns(char(120) varying);
  2   310 			/* parameter 1:	(input)	source id			*/
  2   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   312 			/* return:	(output)	source line id		*/
  2   313 
  2   314 declare	error		entry(fixed bin(15),pointer,pointer);
  2   315 			/* parameter 1:	(input)	error number		*/
  2   316 			/* parameter 2:	(input)	statement node pointer or null*/
  2   317 			/* parameter 3:	(input)	token node pointer 		*/
  2   318 
  2   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  2   320 			/* parameter 1:	(input)	error number		*/
  2   321 			/* parameter 2:	(input)	statement node pointer or null*/
  2   322 			/* parameter 3:	(input)	token node pointer 		*/
  2   323 
  2   324 declare	error_		entry(fixed bin(15),
  4     1 			1 structure unaligned,
  4     2 			  2 /* file_number */	bit(8),
  4     3 			  2 /* line_number */	bit(14),
  4     4 			  2 /* stmt_number */	bit(5),
  2   325 
  2   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  2   327 			/* parameter 1:	(input)	error number		*/
  2   328 			/* parameter 2:	(input)	statement id		*/
  2   329 			/* parameter 3:	(input)	any node pointer		*/
  2   330 			/* parameter 4:	(input)	source segment		*/
  2   331 			/* parameter 5:	(input)	source starting character	*/
  2   332 			/* parameter 6:	(input)	source length		*/
  2   333 
  2   334 declare	error_$no_text	entry(fixed bin(15),
  5     1 			1 structure unaligned,
  5     2 			  2 /* file_number */	bit(8),
  5     3 			  2 /* line_number */	bit(14),
  5     4 			  2 /* stmt_number */	bit(5),
  2   335 
  2   336 			pointer);
  2   337 			/* parameter 1:	(input)	error number		*/
  2   338 			/* parameter 2:	(input)	statement id		*/
  2   339 			/* parameter 3:	(input)	any node pointer		*/
  2   340 
  2   341 declare	error_$initialize_error entry();
  2   342 
  2   343 declare	error_$finish	entry();
  2   344 
  2   345 declare	free_node		entry(pointer);
  2   346 			/* parameter 1:	any node pointer			*/
  2   347 
  2   348 declare	get_array_size	entry(pointer,fixed bin(3));
  2   349 			/* parameter 1:	(input)	symbol node pointer		*/
  2   350 			/* parameter 2:	(input)	units			*/
  2   351 
  2   352 declare	get_size		entry(pointer);
  2   353 			/* parameter 1:	(input)	symbol node pointer		*/
  2   354 
  2   355 declare	merge_attributes	external entry(pointer,pointer)
  2   356 			returns(bit(1) aligned);
  2   357 			/* parameter 1:	(input)	target symbol node pointer */
  2   358 			/* parameter 2:	(input)	source symbol node pointer */
  2   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  2   360 
  2   361 declare	optimizer		entry(pointer);
  2   362 			/* parameter 1:	(input)	root pointer		*/
  2   363 
  2   364 declare	parse_error	entry(fixed bin(15),pointer);
  2   365 			/* parameter 1:	(input)	error number		*/
  2   366 			/* parameter 2:	(input)	any node pointer		*/
  2   367 
  2   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  2   369 			/* parameter 1:	(input)	error number		*/
  2   370 			/* parameter 2:	(input)	any node pointer		*/
  2   371 
  2   372 declare	pl1_error_print$write_out
  2   373 			entry(fixed bin(15),
  6     1 			1 structure unaligned,
  6     2 			  2 /* file_number */	bit(8),
  6     3 			  2 /* line_number */	bit(14),
  6     4 			  2 /* stmt_number */	bit(5),
  2   374 
  2   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  2   376 			/* parameter 1:	(input)	error number		*/
  2   377 			/* parameter 2:	(input)	statement identification	*/
  2   378 			/* parameter 3:	(input)	any node pointer		*/
  2   379 			/* parameter 4:	(input)	source segment		*/
  2   380 			/* parameter 5:	(input)	source character index	*/
  2   381 			/* parameter 6:	(input)	source length		*/
  2   382 			/* parameter 7:	(input)	source line		*/
  2   383 
  2   384 declare	pl1_error_print$listing_segment
  2   385 			entry(fixed bin(15),
  7     1 			1 structure unaligned,
  7     2 			  2 /* file_number */	bit(8),
  7     3 			  2 /* line_number */	bit(14),
  7     4 			  2 /* stmt_number */	bit(5),
  2   386 
  2   387 			pointer);
  2   388 			/* parameter 1:	(input)	error number		*/
  2   389 			/* parameter 2:	(input)	statement identification	*/
  2   390 			/* parameter 3:	(input)	token node pointer		*/
  2   391 
  2   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  2   393 			/* parameter 1:	(input)	string			*/
  2   394 
  2   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  2   396 			/* parameter 1:	(input)	string			*/
  2   397 
  2   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  2   399 			/* parameter 1:	(input)	string			*/
  2   400 			/* parameter 2:	(input)	string length or 0		*/
  2   401 
  2   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  2   403 			/* parameter 1:	(input)	string			*/
  2   404 			/* parameter 2:	(input)	string length or 0		*/
  2   405 
  2   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  2   407 			/* parameter 1:	(input)	string pointer		*/
  2   408 			/* parameter 2:	(input)	string size		*/
  2   409 
  2   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  2   411 			/* parameter 1:	(input)	string pointer		*/
  2   412 			/* parameter 2:	(input)	string length or 0		*/
  2   413 
  2   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  2   415 			/* parameter 1:	(input)	string			*/
  2   416 			/* parameter 2:	(input)	length			*/
  2   417 
  2   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  2   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  2   420 			/* parameter 2:	(input)	line number		*/
  2   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  2   422 			/* parameter 4:	(input)	number of chars to copy	*/
  2   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  2   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  2   425 
  2   426 declare	refer_extent	entry(pointer,pointer);
  2   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  2   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  2   429 
  2   430 declare	reserve$clear	entry()
  2   431 			returns(pointer);
  2   432 			/* return:	(output)	pointer			*/
  2   433 
  2   434 declare	reserve$declare_lib	entry(fixed bin(15))
  2   435 			returns(pointer);
  2   436 			/* parameter 1:	(input)	builtin function number	*/
  2   437 			/* return:	(output)	pointer			*/
  2   438 
  2   439 declare	reserve$read_lib	entry(fixed bin(15))
  2   440 			returns(pointer);
  2   441 			/* parameter 1:	(input)	builtin function number	*/
  2   442 			/* return:	(output)	pointer			*/
  2   443 
  2   444 declare	semantic_translator	entry();
  2   445 
  2   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  2   447 			/* parameter 1:	(input)	error number		*/
  2   448 			/* parameter 2:	(input)	any node pointer		*/
  2   449 
  2   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  2   451 			/* parameter 1:	(input)	error number		*/
  2   452 			/* parameter 2:	(input)	any node pointer		*/
  2   453 
  2   454 declare	share_expression	entry(ptr)
  2   455 			returns(ptr);
  2   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  2   457 			/* return:	(output)	tree pointer or null	*/
  2   458 
  2   459 declare	token_to_binary	entry(ptr) reducible
  2   460 			returns(fixed bin(31));
  2   461 			/* parameter 1:	(input)	token node pointer		*/
  2   462 			/* return:	(output)	converted binary value	*/
  2   463 
  2   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
  1   175 
  1   176 /* END INCLUDE FILE parse.incl.pl1 */
       55 
  8     1 dcl	pl1_stat_$token_list_ptr ptr external static;		/* pointer to token list	*/
  8     2 dcl	token_list(token_list_length) ptr based(token_list_pointer);
  8     3 dcl	token_list_pointer ptr initial(pl1_stat_$token_list_ptr);	/* for efficiency only */
  8     4 dcl	token_list_length fixed(15) internal static initial(3000) options(constant);
  8     5 
  8     6 dcl	1 pl1_stat_$statement_id	external static,
  8     7 	2 file_number		bit(8),
  8     8 	2 line_number		bit(14),
  8     9 	2 statement_number		bit(5);
  8    10 
  8    11 dcl	1 t_table 		based(token_list(k)) aligned,
  8    12 	2 node_type		bit(9) unaligned,
  8    13 	2 type			bit(9) unaligned,
  8    14 	2 loc			bit(18) unaligned,
  8    15 	2 declaration		ptr unaligned,
  8    16 	2 next			ptr unaligned,
  8    17 	2 size			fixed(9),
  8    18 	2 string			char(n refer(t_table.size));
       56 
  9     1 /* BEGIN INCLUDE FILE ... block.incl.pl1 */
  9     2 /* Modified 22 Ocober 1980 by M. N. Davidoff to increase max block.number to 511 */
  9     3 /* format: style3,idind30 */
  9     4 
  9     5 declare	1 block			aligned based,
  9     6 	  2 node_type		bit (9) unaligned,
  9     7 	  2 source_id		structure unaligned,
  9     8 	    3 file_number		bit (8),
  9     9 	    3 line_number		bit (14),
  9    10 	    3 statement_number	bit (5),
  9    11 	  2 father		ptr unaligned,
  9    12 	  2 brother		ptr unaligned,
  9    13 	  2 son			ptr unaligned,
  9    14 	  2 declaration		ptr unaligned,
  9    15 	  2 end_declaration		ptr unaligned,
  9    16 	  2 default		ptr unaligned,
  9    17 	  2 end_default		ptr unaligned,
  9    18 	  2 context		ptr unaligned,
  9    19 	  2 prologue		ptr unaligned,
  9    20 	  2 end_prologue		ptr unaligned,
  9    21 	  2 main			ptr unaligned,
  9    22 	  2 end_main		ptr unaligned,
  9    23 	  2 return_values		ptr unaligned,
  9    24 	  2 return_count		ptr unaligned,
  9    25 	  2 plio_ps		ptr unaligned,
  9    26 	  2 plio_fa		ptr unaligned,
  9    27 	  2 plio_ffsb		ptr unaligned,
  9    28 	  2 plio_ssl		ptr unaligned,
  9    29 	  2 plio_fab2		ptr unaligned,
  9    30 	  2 block_type		bit (9) unaligned,
  9    31 	  2 prefix		bit (12) unaligned,
  9    32 	  2 like_attribute		bit (1) unaligned,
  9    33 	  2 no_stack		bit (1) unaligned,
  9    34 	  2 get_data		bit (1) unaligned,
  9    35 	  2 flush_at_call		bit (1) unaligned,
  9    36 	  2 processed		bit (1) unaligned,
  9    37 	  2 text_displayed		bit (1) unaligned,
  9    38 	  2 number		fixed bin (9) unsigned unaligned,
  9    39 	  2 free_temps		dimension (3) ptr,	/* these fields are used by the code generator */
  9    40 	  2 temp_list		ptr,
  9    41 	  2 entry_list		ptr,
  9    42 	  2 o_and_s		ptr,
  9    43 	  2 why_nonquick		aligned,
  9    44 	    3 auto_adjustable_storage bit (1) unaligned,
  9    45 	    3 returns_star_extents	bit (1) unaligned,
  9    46 	    3 stack_extended_by_args	bit (1) unaligned,
  9    47 	    3 invoked_by_format	bit (1) unaligned,
  9    48 	    3 format_statement	bit (1) unaligned,
  9    49 	    3 io_statements		bit (1) unaligned,
  9    50 	    3 assigned_to_entry_var	bit (1) unaligned,
  9    51 	    3 condition_statements	bit (1) unaligned,
  9    52 	    3 no_owner		bit (1) unaligned,
  9    53 	    3 recursive_call	bit (1) unaligned,
  9    54 	    3 options_non_quick	bit (1) unaligned,
  9    55 	    3 options_variable	bit (1) unaligned,
  9    56 	    3 never_referenced	bit (1) unaligned,
  9    57 	    3 pad_nonquick		bit (5) unaligned,
  9    58 	  2 prologue_flag		bit (1) unaligned,
  9    59 	  2 options_main		bit (1) unaligned,
  9    60 	  2 pad			bit (16) unaligned,
  9    61 	  2 number_of_entries	fixed bin (17),
  9    62 	  2 level			fixed bin (17),
  9    63 	  2 last_auto_loc		fixed bin (17),
  9    64 	  2 symbol_block		fixed bin (17),
  9    65 	  2 entry_info		fixed bin (18),
  9    66 	  2 enter			structure unaligned,
  9    67 	    3 start		fixed bin (17),
  9    68 	    3 end			fixed bin (17),
  9    69 	  2 leave			structure unaligned,
  9    70 	    3 start		fixed bin (17),
  9    71 	    3 end			fixed bin (17),
  9    72 	  2 owner			ptr;
  9    73 
  9    74 declare	max_block_number		fixed bin internal static options (constant) initial (511);
  9    75 
  9    76 /* END INCLUDE FILE ... block.incl.pl1 */
       57 
 10     1 /* BEGIN INCLUDE FILE ... op_codes.incl.pl1 */
 10     2 
 10     3 /* Modified: 25 Apr 1979 by PCK 4-bit decimal */
 10     4 /* Modified: 6 Jun 1979 by PG to add rank and byte */
 10     5 /* Modified: 26 Dec 1979 by PCK to add assign_by_name */
 10     6 /* Modified: 26 July 82 BIM wordno, segno */
 10     7 
 10     8 dcl (	add		initial("000010001"b),	/* opnd(1) <- opnd(2)+opnd(3)		*/
 10     9 	sub		initial("000010010"b),	/* opnd(1) <- opnd(2)-opnd(3)		*/
 10    10 	mult		initial("000010011"b),	/* opnd(1) <- opnd(2)*opnd(3)		*/
 10    11 	div		initial("000010100"b),	/* opnd(1) <- opnd(2)/opnd(3)		*/
 10    12 	negate		initial("000010101"b),	/* opnd(1) <- -opnd(2)  		*/
 10    13 	exp		initial("000010110"b),	/* opnd(1) <- opnd(2) ** opnd(3)	*/
 10    14 
 10    15 	and_bits		initial("000100001"b),	/* opnd(1) <- opnd(2) & opnd(3)	*/
 10    16 	or_bits		initial("000100010"b),	/* opnd(1) <- opnd(2)|opnd(3)		*/
 10    17 	xor_bits		initial("000100011"b),	/* opnd(1) <- opnd(2) xor opnd(3)	*/
 10    18 	not_bits		initial("000100100"b),	/* opnd(1) <- ^opnd(2)		*/
 10    19 	cat_string	initial("000100101"b),	/* opnd(1) <- opnd(2)||opnd(3)	*/
 10    20 	bool_fun		initial("000100110"b),	/* opnd(1) <- bool(opnd(2),opnd(3),opnd(4)) */
 10    21 
 10    22 	assign		initial("000110001"b),	/* opnd(1) <- opnd(2)		*/
 10    23 	assign_size_ck	initial("000110010"b),	/* opnd(1) <- opnd(2)		*/
 10    24 	assign_zero	initial("000110011"b),	/* opnd(1) <- 0			*/
 10    25 	copy_words	initial("000110100"b),	/* move opnd(2) to opnd(1) by opnd(3) words */
 10    26 	copy_string	initial("000110101"b),	/* move opnd(2) to opnd(1) by opnd(3) units */
 10    27 	make_desc		initial("000110110"b),	/* opnd(1) <- descriptor(opnd(2),opnd(3)) */
 10    28 	assign_round	initial("000110111"b),	/* opnd(1) <- opnd(2) rounded		*/
 10    29 	pack		initial("000111000"b),	/* opnd(1) <- encode to picture opnd(2) */
 10    30 	unpack		initial("000111001"b),	/* opnd(1) <- decode from picture opnd(2) */
 10    31 
 10    32 	less_than		initial("001000100"b),	/* opnd(1) <- opnd(2) < opnd(3)	*/
 10    33 	greater_than	initial("001000101"b),	/* opnd(1) <- opnd(2) > opnd(3)	*/
 10    34 	equal		initial("001000110"b),	/* opnd(1) <- opnd(2) = opnd(3)	*/
 10    35 	not_equal		initial("001000111"b),	/* opnd(1) <- opnd(2) ^= opnd(3)	*/
 10    36 	less_or_equal	initial("001001000"b),	/* opnd(1) <- opnd(2) <= opnd(3)	*/
 10    37 	greater_or_equal	initial("001001001"b),	/* opnd(1) <- opnd(2) >= opnd(3)	*/
 10    38 
 10    39 	jump		initial("001010001"b),	/* go to opnd(1) unconditionally	*/
 10    40 	jump_true		initial("001010010"b),	/* go to opnd(1) if opnd(2) is not 0	*/
 10    41 	jump_false	initial("001010011"b),	/* go to opnd(1) if opnd(2) is all 0	*/
 10    42 	jump_if_lt	initial("001010100"b),	/* go to opnd(1) if opnd(2) < opnd(3)	*/
 10    43 	jump_if_gt	initial("001010101"b),	/* go to opnd(1) if opnd(2) > opnd(3)	*/
 10    44 	jump_if_eq	initial("001010110"b),	/* go to opnd(1) if opnd(2) = opnd(3)	*/
 10    45 	jump_if_ne	initial("001010111"b),	/* go to opnd(1) if opnd(2) ^= opnd(3)	*/
 10    46 	jump_if_le	initial("001011000"b),	/* go to opnd(1) if opnd(2) <= opnd(3)	*/
 10    47 	jump_if_ge	initial("001011001"b),	/* go to opnd(1) if opnd(2) >= opnd(3)	*/
 10    48 
 10    49 	std_arg_list	initial("001100001"b),	/* opnd(1) <- arglist(opnd(2) desclist(opnd(3)))	*/
 10    50 	return_words	initial("001100010"b),	/* return aggregate opnd(1), opnd(2) is length in words */
 10    51 	std_call		initial("001100011"b),	/* opnd(1) <- call opnd(2) with opnd(3)		*/
 10    52 	return_bits	initial("001100100"b),	/* return aggregate opnd(1), opnd(2) is length in bits */
 10    53 	std_entry		initial("001100101"b),	/* entry(opnd(1)... opnd(n))			*/
 10    54 	return_string	initial("001100110"b),	/* return string opnd(1) */
 10    55 	ex_prologue	initial("001100111"b),	/* execute the prologue -no operands-		*/
 10    56 	allot_auto	initial("001101000"b),	/* opnd(1) <- addrel(stack,opnd(2))		*/
 10    57 	param_ptr		initial("001101001"b),	/* opnd(1) <- ptr to opnd(2) in  block opnd(3)	*/
 10    58 	param_desc_ptr	initial("001101010"b),	/* opnd(1) <- ptr to opnd(2) in block opnd(3)	*/
 10    59 	std_return	initial("001101011"b),	/* return -no arguments-			*/
 10    60 	allot_ctl		initial("001101100"b),	/* allocate opnd(1) , length in words is opnd(2) 	*/
 10    61 	free_ctl		initial("001101101"b),	/* free opnd(1)				*/
 10    62 	stop		initial("001101110"b),	/* stop - terminate run unit			*/
 10    63 
 10    64 	mod_bit		initial("001110000"b),	/* opnd(1) <- mod(opnd(3),36),
 10    65*						   opnd(2) <- opnd(3) / 36		*/
 10    66 	mod_byte		initial("001110001"b),	/* opnd(1) <- mod(opnd(3),4),
 10    67*						   opnd(2) <- opnd(3) / 4		*/
 10    68 	mod_half		initial("001110010"b),	/* opnd(1) <- mod(opnd(3),2),
 10    69*						   opnd(2) <- opnd(3) / 2		*/
 10    70 	mod_word		initial("001110011"b),	/* TO BE DEFINED BY BLW			*/
 10    71 
 10    72 	bit_to_char	initial("010000000"b),	/* opnd(1) <- (opnd(2)+8)/9		*/
 10    73 	bit_to_word	initial("010000001"b),	/* opnd(1) <- (opnd(2)+35)/36		*/
 10    74 	char_to_word	initial("010000010"b),	/* opnd(1) <- (opnd(2)+3)/4		*/
 10    75 	half_to_word	initial("010000011"b),	/* opnd(1) <- (opnd(2)+1)/2		*/
 10    76 	word_to_mod2	initial("010000100"b),	/* opnd(1) <- (opnd(2)+1)/2*2		*/
 10    77 	word_to_mod4	initial("010000101"b),	/* opnd(1) <- (opnd(2)+3)/4*4		*/
 10    78 	word_to_mod8	initial("010000110"b),	/* opnd(1) <- (opnd(2)+7)/8*8		*/
 10    79 	rel_fun		initial("010000111"b),	/* opnd(1) <- rel(opnd(2))		*/
 10    80 	baseno_fun	initial("010001000"b),	/* opnd(1) <- baseno(opnd(2))		*/
 10    81 	desc_size		initial("010001001"b),	/* opnd(1) <- substr(opnd(2),13,24)	*/
 10    82 	bit_pointer	initial("010001010"b),	/* opnd(1) <- bit offset of opnd(2)	*/
 10    83 	index_before_fun	initial("010001011"b),	/* opnd(1) <- length of before(opnd(2),opnd(3)) */
 10    84 	index_after_fun	initial("010001100"b),	/* opnd(1) <- offset of after(opnd(2),opnd(3)) in opnd(2) */
 10    85 	verify_ltrim_fun	initial("010001101"b),	/* opnd(1) <- offset of ltrim(opnd(2),opnd(3)) in opnd(2) */
 10    86 	verify_rtrim_fun	initial("010001110"b),	/* opnd(1) <- length(opnd(2))-length(rtrim(opnd(2),opnd(3))) */
 10    87 	digit_to_bit	initial("010001111"b),	/* opnd(1) <- 9*opnd(2)/2		*/
 10    88 
 10    89 	ceil_fun		initial("010010000"b),	/* opnd(1) <- ceil(opnd(2))		*/
 10    90 	floor_fun		initial("010010001"b),	/* opnd(1) <- floor(opnd(2))		*/
 10    91 	round_fun		initial("010010010"b),	/* opnd(1) <- round(opnd(2))		*/
 10    92 	sign_fun		initial("010010011"b),	/* opnd(1) <- sign(opnd(2))		*/
 10    93 	abs_fun		initial("010010100"b),	/* opnd(1) <- abs(opnd(2))		*/
 10    94 	trunc_fun		initial("010010101"b),	/* opnd(1) <- trunc(opnd(2))		*/
 10    95 	byte_fun		initial("010010110"b),	/* opnd(1) <- byte(opnd(2))		*/
 10    96 	rank_fun		initial("010010111"b),	/* opnd(1) <- rank(opnd(2))		*/
 10    97 	index_rev_fun	initial("010011000"b),	/* opnd(1) <- index(reverse(opnd(2)),reverse(opnd(3))) */
 10    98 	search_rev_fun	initial("010011001"b),	/* opnd(1) <- search(reverse(opnd(2)),opnd(3)) */
 10    99 	verify_rev_fun	initial("010011010"b),	/* opnd(1) <- verify(reverse(opnd(2)),opnd(3)) */
 10   100 	wordno_fun	initial("010011011"b),        /* opnd(1) <- wordno (opnd(2)) */
 10   101 	segno_fun		initial("010011100"b),        /* opnd(1) <- segno (opnd(2)) */
 10   102 	bitno_fun           initial("010011101"b),        /* opnd(1) <- bitno (opnd(2)) */
 10   103 	charno_fun	initial("010011110"b),        /* opnd(1) <- charno (opnd(2)) */
 10   104 
 10   105 	index_fun		initial("010100000"b),	/* opnd(1) <- index(opnd(2),opnd(3))	*/
 10   106 	off_fun		initial("010100001"b),	/* opnd(1) <- offset(opnd(2),opnd(3))	*/
 10   107 	complex_fun	initial("010100010"b),	/* opnd(1) <- complex(opnd(2),opnd(3))	*/
 10   108 	conjg_fun		initial("010100011"b),	/* opnd(1) <- conjg(opnd(2),opnd(3))	*/
 10   109 	mod_fun		initial("010100100"b),	/* opnd(1) <- mod(opnd(2),opnd(3))	*/
 10   110 	repeat_fun	initial("010100101"b),	/* opnd(1) <- repeat(opnd(2),opnd(3))	*/
 10   111 	verify_fun	initial("010100110"b),	/* opnd(1) <- verify(opnd(2),opnd(3))	*/
 10   112 	translate_fun	initial("010100111"b),	/* opnd(1) <- translate(opnd(2),opnd(3))*/
 10   113 	real_fun   	initial("010101001"b),	/* opnd(1) <- real(opnd(2))		*/
 10   114 	imag_fun   	initial("010101010"b),	/* opnd(1) <- imag(opnd(2))		*/
 10   115 	length_fun	initial("010101011"b),	/* opnd(1) <- length(opnd(2))	*/
 10   116 	pl1_mod_fun	initial("010101100"b),	/* opnd(1) <- mod(opnd(2)) */
 10   117 	search_fun	initial("010101101"b),	/* opnd(1) <- search(opnd(2),opnd(3)) */
 10   118 	allocation_fun	initial("010101110"b),	/* opnd(1) <- allocation(opnd(2)) */
 10   119 	reverse_fun	initial("010101111"b),	/* opnd(1) <- reverse(opnd(2)) */
 10   120 
 10   121 	addr_fun		initial("010110000"b),	/* opnd(1) <- addr(opnd(2))		*/
 10   122 	addr_fun_bits	initial("010110001"b),	/* opnd(1) <- addr(opnd(2))		*/
 10   123 	ptr_fun		initial("010110010"b),	/* opnd(1) <- ptr(opnd(2),opnd(3))	*/
 10   124 	baseptr_fun	initial("010110011"b),	/* opnd(1) <- baseptr(opnd(2))	*/
 10   125 	addrel_fun	initial("010110100"b),	/* opnd(1) <- addrel(opnd(2),opnd(3))	*/
 10   126 	codeptr_fun	initial("010110101"b),	/* opnd(1) <- codeptr(opnd(2))	*/
 10   127 	environmentptr_fun	initial("010110110"b),	/* opnd(1) <- environmentptr(opnd(2))	*/
 10   128 	stackbaseptr_fun	initial("010110111"b),	/* opnd(1) is ptr to base of current stack	*/
 10   129 	stackframeptr_fun	initial("010111000"b),	/* opnd(1) is ptr to current block's stack frame	*/
 10   130 	setcharno_fun	initial("010111001"b),	/* opnd(1) <- opnd(2) with charno opnd(3) */
 10   131 	addcharno_fun	initial("010111010"b),	/* opnd(1) <- opnd(2) with charno = charno + opnd(3) */
 10   132 	setbitno_fun	initial("010111011"b),	/* setcharno for bitsno */
 10   133 	addbitno_fun	initial("010111100"b),	/* addcharno for bitno */
 10   134 
 10   135 	min_fun		initial("011000000"b),	/* opnd(1) <- min(opnd(1),opnd(2),...)	*/
 10   136 	max_fun		initial("011000001"b),	/* opnd(1) <- max(opnd(1),opnd(2),...)	*/
 10   137 
 10   138 	stack_ptr		initial("011010001"b),	/* opnd(1) <- stack frame ptr		*/
 10   139 	empty_area	initial("011010010"b),	/* empty opnd(1), length in words is opnd(2) */
 10   140 	enable_on		initial("011010100"b),	/* opnd(1) is the cond name
 10   141*						   opnd(2) is the file name
 10   142*						   opnd(3) is the block	*/
 10   143 	revert_on		initial("011010101"b),	/* opnd(1) is the cond name,
 10   144*						   opnd(2) is the file name	*/
 10   145 	signal_on		initial("011010110"b),	/* opnd(1) is the cond name
 10   146*						   opnd(2) is the file name */
 10   147 
 10   148 	lock_fun		initial("011010111"b),	/* opnd(1) <- stac(opnd(2),opnd(3))	*/
 10   149 	stacq_fun		initial("011011000"b),	/* opnd(1) is result, opnd(2) is ptr to lock word,
 10   150*						   opnd(3) is old value, (4) is new value. */
 10   151 	clock_fun		initial("011011001"b),	/* opnd(1) is the clock time		*/
 10   152 	vclock_fun	initial("011011010"b),	/* opnd(1) is the virtual clock time	*/
 10   153 
 10   154 	bound_ck		initial("011100000"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 10   155 	range_ck		initial("011100001"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 10   156 	loop		initial("011100010"b),	/* do opnd(1) for opnd(2) from opnd(3) to opnd(4) by 1,
 10   157*						   opnd(5) is the list */
 10   158 	join		initial("011100011"b),	/* do opnd(1), opnd(2) ... opnd(n)	*/
 10   159 	allot_based	initial("011100100"b),	/* allocate opnd(2) words in opnd(3), set opnd(1) */
 10   160 	free_based	initial("011100101"b),	/* free opnd(1) in opnd(3), length is opnd(2) words */
 10   161 
 10   162 	r_parn		initial("011110001"b),	/* format op code			*/
 10   163 	l_parn		initial("011110010"b),
 10   164 	r_format		initial("011110011"b),
 10   165 	c_format		initial("011110100"b),
 10   166 	f_format		initial("011110101"b),
 10   167 	e_format		initial("011110110"b),
 10   168 	b_format		initial("011110111"b),
 10   169 	a_format		initial("011111000"b),
 10   170 	x_format		initial("011111001"b),
 10   171 	skip_format	initial("011111010"b),
 10   172 	column_format	initial("011111011"b),
 10   173 	page_format	initial("011111100"b),
 10   174 	line_format	initial("011111101"b),
 10   175 	picture_format	initial("011111110"b),
 10   176 	bn_format		initial("011111111"b),	/* bit format, length(opnd(2)), radix factor(opnd(3)) */
 10   177 
 10   178 	get_list_trans	initial("100000000"b),	/* getlist(opnd(2) with desc(opnd(1)))	*/
 10   179 	get_edit_trans	initial("100000001"b),	/* getedit(opnd(2) with desc(opnd(1)))	*/
 10   180 	get_data_trans	initial("100000010"b),	/* getdata(opnd(1) to opnd(n))	*/
 10   181 	put_list_trans	initial("100000011"b),	/* putlist(opnd(2) with desc(opnd(1)))	*/
 10   182 	put_edit_trans	initial("100000100"b),	/* putedit(opnd(2) with desc(opnd(1)))	*/
 10   183 	put_data_trans	initial("100000101"b),	/* putdata(opnd(2)) with subscript-list opnd(1) */
 10   184 	terminate_trans	initial("100000110"b),	/* terminate stream transmission	*/
 10   185 	stream_prep	initial("100000111"b),	/* initiate stream transmission	*/
 10   186 	record_io		initial("100001000"b),	/* perform record io operation	*/
 10   187 	fortran_read	initial("100001001"b),	/* A complete read statement		*/
 10   188 	fortran_write	initial("100001010"b),	/* A complete write statement		*/
 10   189 	ftn_file_manip	initial("100001011"b),	/* endfile,backspace,rewind,etc.	*/
 10   190 	ftn_trans_loop	initial("100001100"b),	/* An implied do in i/o list		*/
 10   191 	put_control	initial("100001101"b),	/* put control opnd(1) opnd(2) times	*/
 10   192 	put_field		initial("100001110"b),	/* putlist(opnd(2)) of length(opnd(1))	*/
 10   193 	put_field_chk	initial("100001111"b),	/* putlist(op(2)) of len(op(1)) check char index(op(3)) */
 10   194 
 10   195 /* These operators are produced by the parse but are not used as input to the code generator.	*/
 10   196 /* They are processed by the semantic translator.						*/
 10   197 
 10   198 	return_value	initial("100010010"b),	/* return(opnd(1))			*/
 10   199 	allot_var		initial("100010011"b),	/* allot opnd(1) in opnd(2)		*/
 10   200 	free_var		initial("100010100"b),	/* free opnd(1) out of opnd(2)	*/
 10   201 	get_file		initial("100010101"b),	/* opnd(1) is filename,opnd(2) is copy	*/
 10   202 						/* opnd(3) is skip, opnd(4) is list	*/
 10   203 	get_string	initial("100010110"b),	/* opnd(1) is string,opnd(2) is list	*/
 10   204 	put_file		initial("100010111"b),	/* opnd(1) is filename,opnd(2) is page	*/
 10   205 						/* opnd(3) is skip,opnd(4) is line	*/
 10   206 	put_string	initial("100011000"b),	/* opnd(1) is string,opnd(2) is list	*/
 10   207 	open_file		initial("100011001"b),
 10   208 	close_file	initial("100011010"b),
 10   209 	read_file		initial("100011011"b),
 10   210 	write_file	initial("100011100"b),
 10   211 	locate_file	initial("100011101"b),
 10   212 	do_fun		initial("100011110"b),	/* opnd(1) is join of a list		*/
 10   213 						/* opnd(2) is control variable ref	*/
 10   214 						/* opnd(3) is specification operator	*/
 10   215 	do_spec		initial("100011111"b),	/* opnd(1) to opnd(2) by opnd(3) 	*/
 10   216 						/* repeat opnd(4) while opnd(5)	*/
 10   217 						/* opnd(6) is next specification	*/
 10   218 
 10   219 	rewrite_file	initial("100100000"b),
 10   220 	delete_file	initial("100100001"b),
 10   221 	unlock_file	initial("100100010"b),
 10   222 	lock_file		initial("100100011"b),
 10   223 	refer		initial("100100101"b),	/* opnd(1) refer(opnd(2))		*/
 10   224 	prefix_plus	initial("100100110"b),	/* opnd(1) <- +opnd(2)		*/
 10   225 	nop		initial("100100111"b),	/* no-op */
 10   226 	assign_by_name	initial("100101000"b),	/* opnd(1) <- opnd(2),by name		*/
 10   227 
 10   228 /* These operators are produced by the semantic translator in processing the math
 10   229*   builtin functions and are used as input to the code generator			*/
 10   230 
 10   231 	sqrt_fun		initial("100110000"b),	/* opnd(1) <- sqrt(opnd(2))	*/
 10   232 	sin_fun		initial("100110001"b),	/* opnd(1) <- sin(opnd(2))	*/
 10   233 	sind_fun		initial("100110010"b),	/* opnd(1) <- sind(opnd(2))	*/
 10   234 	cos_fun		initial("100110011"b),	/* opnd(1) <- cos(opnd(2))	*/
 10   235 	cosd_fun		initial("100110100"b),	/* opnd(1) <- cosd(opnd(2))	*/
 10   236 	tan_fun		initial("100110101"b),	/* opnd(1) <- tan(opnd(2))	*/
 10   237 	tand_fun		initial("100110110"b),	/* opnd(1) <- tand(opnd(2))	*/
 10   238 	asin_fun		initial("100110111"b),	/* opnd(1) <- asin(opnd(2))	*/
 10   239 	asind_fun		initial("100111000"b),	/* opnd(1) <- asind(opnd(2))	*/
 10   240 	acos_fun		initial("100111001"b),	/* opnd(1) <- acos(opnd(2))	*/
 10   241 	acosd_fun		initial("100111010"b),	/* opnd(1) <- acosd(opnd(2))	*/
 10   242 	atan_fun		initial("100111011"b),	/* opnd(1) <- atan(opnd(2)[,opnd(3)])	*/
 10   243 	atand_fun		initial("100111100"b),	/* opnd(1) <- atand(opnd(2)[,opnd(3)])	*/
 10   244 	log2_fun		initial("100111101"b),	/* opnd(1) <- log2(opnd(2))	*/
 10   245 	log_fun		initial("100111110"b),	/* opnd(1) <- log(opnd(2))	*/
 10   246 	log10_fun		initial("100111111"b),	/* opnd(1) <- log10(opnd(2))	*/
 10   247 
 10   248 	exp_fun		initial("101000000"b))	/* opnd(1) <- exp(opnd(2))	*/
 10   249 
 10   250 			bit(9) aligned internal static options(constant);
 10   251 
 10   252 /* END INCLUDE FILE ... op_codes.incl.pl1 */
       58 
 11     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
 11     2 
 11     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
 11     4 
 11     5 /* format: style3 */
 11     6 dcl	1 operator	based aligned,
 11     7 	  2 node_type	bit (9) unaligned,
 11     8 	  2 op_code	bit (9) unaligned,
 11     9 	  2 shared	bit (1) unaligned,
 11    10 	  2 processed	bit (1) unaligned,
 11    11 	  2 optimized	bit (1) unaligned,
 11    12 	  2 number	fixed (14) unaligned,
 11    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
 11    14 
 11    15 dcl	max_number_of_operands
 11    16 			fixed bin (15) int static options (constant) initial (32767);
 11    17 
 11    18 /* END INCLUDE FILE ... operator.incl.pl1 */
       59 
 12     1 /* ***********************************************************
 12     2*   *                                                         *
 12     3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
 12     4*   *                                                         *
 12     5*   *********************************************************** */
 12     6 /* BEGIN INCLUDE FILE ... statement.incl.pl1 */
 12     7 /* Internal interface of the PL/I compiler */
 12     8 
 12     9 dcl	1 statement		based aligned,
 12    10 	2 node_type		bit(9) unaligned,
 12    11 	2 source_id		structure unaligned,
 12    12 	  3 file_number		bit(8),
 12    13 	  3 line_number		bit(14),
 12    14 	  3 statement_number	bit(5),
 12    15 	2 next			ptr unaligned,
 12    16 	2 back			ptr unaligned,
 12    17 	2 root			ptr unaligned,
 12    18 	2 labels			ptr unaligned,
 12    19 	2 reference_list		ptr unaligned,
 12    20 	2 state_list		ptr unaligned,
 12    21 	2 reference_count		fixed(17) unaligned,
 12    22 	2 ref_count_copy		fixed(17) unaligned,
 12    23 	2 object			structure unaligned,
 12    24 	  3 start			fixed(17),
 12    25 	  3 finish		fixed(17),
 12    26 	2 source			structure unaligned,
 12    27 	  3 segment		fixed(11),
 12    28 	  3 start			fixed(23),
 12    29 	  3 length		fixed(11),
 12    30 	2 prefix			bit(12) unaligned,
 12    31 	2 optimized		bit(1) unaligned,
 12    32 	2 free_temps		bit(1) unaligned,
 12    33 	2 LHS_in_RHS		bit(1) unaligned,
 12    34 	2 statement_type		bit(9) unaligned,
 12    35 	2 bits			structure unaligned,
 12    36 	  3 processed		bit(1) unaligned,
 12    37 	  3 put_in_profile		bit(1) unaligned,
 12    38 	  3 generated		bit(1) unaligned,
 12    39 	  3 snap			bit(1) unaligned,
 12    40 	  3 system		bit(1) unaligned,
 12    41 	  3 irreducible		bit(1) unaligned,
 12    42 	  3 checked		bit(1) unaligned,
 12    43 	  3 save_temps		bit(1) unaligned,
 12    44 	  3 suppress_warnings	bit(1) unaligned,
 12    45 	  3 force_nonquick		bit(1) unaligned,
 12    46 	  3 expanded_by_name	bit(1) unaligned,
 12    47 	  3 begins_loop		bit(1) unaligned,
 12    48 	  3 pad			bit(24) unaligned;
 12    49 
 12    50 /* END INCLUDE FILE ... statement.incl.pl1 */
       60 
 13     1 /* BEGIN INCLUDE FILE ... token.incl.pl1 */
 13     2 
 13     3 dcl	1 token			based aligned,
 13     4 	2 node_type		bit(9) unaligned,
 13     5 	2 type			bit(9) unaligned,
 13     6 	2 loc			bit(18) unaligned,	/* symtab offset for identifiers, "p" flag for constants */
 13     7 	2 declaration		ptr unaligned,
 13     8 	2 next			ptr unaligned,
 13     9 	2 size			fixed(9),
 13    10 	2 string			char(n refer(token.size));
 13    11 
 13    12 /* END INCLUDE FILE ... token.incl.pl1 */
       61 
 14     1 dcl (	root_block		initial("000000001"b),
 14     2 	external_procedure		initial("000000010"b),
 14     3 	internal_procedure		initial("000000011"b),
 14     4 	begin_block		initial("000000100"b),
 14     5 	on_unit			initial("000000101"b))  internal static bit(9) aligned options(constant);
       62 
 15     1 	/* statement types */
 15     2 
 15     3 dcl (	unknown_statement		initial("000000000"b),
 15     4 	allocate_statement		initial("000000001"b),
 15     5 	assignment_statement	initial("000000010"b),
 15     6 	begin_statement		initial("000000011"b),
 15     7 	call_statement		initial("000000100"b),
 15     8 	close_statement		initial("000000101"b),
 15     9 	declare_statement		initial("000000110"b),
 15    10 	lock_statement		initial("000000111"b),
 15    11 	delete_statement		initial("000001000"b),
 15    12 	display_statement		initial("000001001"b),
 15    13 	do_statement		initial("000001010"b),
 15    14 	else_clause		initial("000001011"b),
 15    15 	end_statement		initial("000001100"b),
 15    16 	entry_statement		initial("000001101"b),
 15    17 	exit_statement		initial("000001110"b),
 15    18 	format_statement		initial("000001111"b),
 15    19 	free_statement		initial("000010000"b),
 15    20 	get_statement		initial("000010001"b),
 15    21 	goto_statement		initial("000010010"b),
 15    22 	if_statement		initial("000010011"b),
 15    23 	locate_statement		initial("000010100"b),
 15    24 	null_statement		initial("000010101"b),
 15    25 	on_statement		initial("000010110"b),
 15    26 	open_statement		initial("000010111"b),
 15    27 	procedure_statement 	initial("000011000"b),
 15    28 	put_statement		initial("000011001"b),
 15    29 	read_statement		initial("000011010"b),
 15    30 	return_statement		initial("000011011"b),
 15    31 	revert_statement		initial("000011100"b),
 15    32 	rewrite_statement		initial("000011101"b),
 15    33 	signal_statement		initial("000011110"b),
 15    34 	stop_statement		initial("000011111"b),
 15    35 	system_on_unit		initial("000100000"b),
 15    36 	unlock_statement		initial("000100001"b),
 15    37 	wait_statement		initial("000100010"b),
 15    38 	write_statement		initial("000100011"b),
 15    39 	default_statement		initial("000100100"b),
 15    40 	continue_statement		initial("000100101"b)) bit(9) internal static aligned options(constant);
       63 
 16     1 /* BEGIN INCLUDE FILE ... token_types.incl.pl1 */
 16     2 
 16     3 dcl (	no_token		initial("000000000"b),	/*	token types		*/
 16     4 	identifier	initial("100000000"b),
 16     5 	isub		initial("010000000"b),
 16     6 	plus		initial("001000001"b),
 16     7 	minus		initial("001000010"b),
 16     8 	asterisk		initial("001000011"b),
 16     9 	slash		initial("001000100"b),
 16    10 	expon		initial("001000101"b),
 16    11 	not		initial("001000110"b),
 16    12 	and		initial("001000111"b),
 16    13 	or		initial("001001000"b),
 16    14 	cat		initial("001001001"b),
 16    15 	eq		initial("001001010"b),
 16    16 	ne		initial("001001011"b),
 16    17 	lt		initial("001001100"b),
 16    18 	gt		initial("001001101"b),
 16    19 	le		initial("001001110"b),
 16    20 	ge		initial("001001111"b),
 16    21 	ngt		initial("001010000"b),
 16    22 	nlt		initial("001010001"b),
 16    23 	assignment	initial("001010010"b),
 16    24 	colon		initial("001010011"b),
 16    25 	semi_colon	initial("001010100"b),
 16    26 	comma		initial("001010101"b),
 16    27 	period		initial("001010110"b),
 16    28 	arrow		initial("001010111"b),
 16    29 	left_parn		initial("001011000"b),
 16    30 	right_parn	initial("001011001"b),
 16    31 	percent		initial("001011100"b),
 16    32 	bit_string	initial("000100001"b),
 16    33 	char_string	initial("000100010"b),
 16    34 	bin_integer	initial("000110001"b),
 16    35 	dec_integer	initial("000110011"b),
 16    36 	fixed_bin		initial("000110000"b),
 16    37 	fixed_dec		initial("000110010"b),
 16    38 	float_bin		initial("000110100"b),
 16    39 	float_dec		initial("000110110"b),
 16    40 	i_bin_integer	initial("000111001"b),
 16    41 	i_dec_integer	initial("000111011"b),
 16    42 	i_fixed_bin	initial("000111000"b),
 16    43 	i_fixed_dec	initial("000111010"b),
 16    44 	i_float_bin	initial("000111100"b),
 16    45 	i_float_dec	initial("000111110"b)) bit (9) aligned internal static options (constant);
 16    46 
 16    47 dcl (	is_identifier		initial ("100000000"b),	/*	token type masks		*/
 16    48 	is_isub			initial ("010000000"b),
 16    49 	is_delimiter		initial ("001000000"b),
 16    50 	is_constant		initial ("000100000"b),
 16    51 	is_arith_constant		initial ("000010000"b),	/* N.B. not really a mask...s/b "000110000"b */
 16    52 	is_arithmetic_constant	initial ("000110000"b),
 16    53 	is_imaginary_constant	initial ("000111000"b),
 16    54 	is_float_constant		initial ("000110100"b),
 16    55 	is_decimal_constant		initial ("000110010"b),
 16    56 	is_integral_constant 	initial ("000110001"b)
 16    57 	) bit(9) internal static aligned options(constant);
 16    58 
 16    59 /* END INCLUDE FILE ... token_types.incl.pl1 */
       64 
 17     1 /* BEGIN INCLUDE FILE ... list.incl.pl1 */
 17     2 
 17     3 /* Modified 26 June 81 by EBush to add max_list_elements */
 17     4 
 17     5 
 17     6 dcl	1 list		based aligned,
 17     7 	2 node_type	bit(9) unaligned,
 17     8 	2 reserved	bit(12) unaligned,
 17     9 	2 number		fixed(14) unaligned,
 17    10 	2 element		dimension(n refer(list.number)) ptr unaligned;
 17    11 
 17    12 dcl       max_list_elements   fixed bin(17) internal static options (constant)
 17    13 	                    init(16383);
 17    14 
 17    15 /* END INCLUDE FILE ... list.incl.pl1 */
       65 
 18     1 dcl	1 label			based aligned,
 18     2 	2 node_type		bit(9) unaligned,
 18     3 	2 source_id		structure unaligned,
 18     4 	  3 file_number		bit(8),
 18     5 	  3 line_number		bit(14),
 18     6 	  3 statement_number	bit(5),
 18     7 	2 location		fixed(17) unaligned,
 18     8 	2 allocated		bit(1) unaligned,
 18     9 	2 dcl_type		bit(3) unaligned,
 18    10 	2 reserved		bit(29) unaligned,
 18    11 	2 array			bit(1) unaligned,
 18    12 	2 used_as_format		bit(1) unaligned,
 18    13 	2 used_in_goto		bit(1) unaligned,
 18    14 	2 symbol_table		bit(18) unaligned,
 18    15 	2 low_bound		fixed(17) unaligned,
 18    16 	2 high_bound		fixed(17) unaligned,
 18    17 	2 block_node		ptr unaligned,
 18    18 	2 token			ptr unaligned,
 18    19 	2 next			ptr unaligned,
 18    20 	2 multi_use		ptr unaligned,
 18    21 	2 cross_reference		ptr unaligned,
 18    22 	2 statement		ptr unaligned;
       66 
 19     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
 19     2 
 19     3 dcl	1 reference		based aligned,
 19     4 	2 node_type		bit(9) unaligned,
 19     5 	2 array_ref		bit(1) unaligned,
 19     6 	2 varying_ref		bit(1) unaligned,
 19     7 	2 shared			bit(1) unaligned,
 19     8 	2 put_data_sw		bit(1) unaligned,
 19     9 	2 processed		bit(1) unaligned,
 19    10 	2 units			fixed(3) unaligned,
 19    11 	2 ref_count		fixed(17) unaligned,
 19    12 	2 c_offset		fixed(24),
 19    13 	2 c_length		fixed(24),
 19    14 	2 symbol			ptr unaligned,
 19    15 	2 qualifier		ptr unaligned,
 19    16 	2 offset			ptr unaligned,
 19    17 	2 length			ptr unaligned,
 19    18 	2 subscript_list		ptr unaligned,
 19    19 						/* these fields are used by the 645 code generator */
 19    20 	2 address			structure unaligned,
 19    21 	  3 base			bit(3),
 19    22 	  3 offset		bit(15),
 19    23 	  3 op			bit(9),
 19    24 	  3 no_address		bit(1),
 19    25 	  3 inhibit		bit(1),
 19    26 	  3 ext_base		bit(1),
 19    27 	  3 tag			bit(6),
 19    28 	2 info			structure unaligned,
 19    29 	  3 address_in		structure,
 19    30 	    4 b			dimension(0:7) bit(1),
 19    31 	    4 storage		bit(1),
 19    32 	  3 value_in		structure,
 19    33 	    4 a			bit(1),
 19    34 	    4 q			bit(1),
 19    35 	    4 aq			bit(1),
 19    36 	    4 string_aq		bit(1),
 19    37 	    4 complex_aq		bit(1),
 19    38 	    4 decimal_aq		bit(1),
 19    39 	    4 b			dimension(0:7) bit(1),
 19    40 	    4 storage		bit(1),
 19    41 	    4 indicators		bit(1),
 19    42 	    4 x			dimension(0:7) bit(1),
 19    43 	  3 other			structure,
 19    44 	    4 big_offset		bit(1),
 19    45 	    4 big_length		bit(1),
 19    46 	    4 modword_in_offset	bit(1),
 19    47 	2 data_type		fixed(5) unaligned,
 19    48 	2 bits			structure unaligned,
 19    49 	  3 padded_ref		bit(1),
 19    50 	  3 aligned_ref		bit(1),
 19    51 	  3 long_ref		bit(1),
 19    52 	  3 forward_ref		bit(1),
 19    53 	  3 ic_ref		bit(1),
 19    54 	  3 temp_ref		bit(1),
 19    55 	  3 defined_ref		bit(1),
 19    56 	  3 evaluated		bit(1),
 19    57 	  3 allocate		bit(1),
 19    58 	  3 allocated		bit(1),
 19    59 	  3 aliasable		bit(1),
 19    60 	  3 even			bit(1),
 19    61 	  3 perm_address		bit(1),
 19    62 	  3 aggregate		bit(1),
 19    63 	  3 hit_zero		bit(1),
 19    64 	  3 dont_save		bit(1),
 19    65 	  3 fo_in_qual		bit(1),
 19    66 	  3 hard_to_load		bit(1),
 19    67 	2 relocation		bit(12) unaligned,
 19    68 	2 more_bits		structure unaligned,
 19    69 	  3 substr		bit(1),
 19    70 	  3 padded_for_store_ref	bit(1),
 19    71 	  3 aligned_for_store_ref	bit(1),
 19    72 	  3 mbz			bit(15),
 19    73 	2 store_ins		bit(18) unaligned;
 19    74 
 19    75 /* END INCLUDE FILE ... reference.incl.pl1 */
       67 
 20     1 /* BEGIN INCLUDE FILE ... declare_type.incl.pl1 */
 20     2 
 20     3 /* Modified: 25 Apr 1979 by PCK to implement 4-bit decimal */
 20     4 
 20     5 dcl  (	by_declare	initial("001"b),
 20     6 	by_explicit_context initial("010"b),
 20     7 	by_context	initial("011"b),
 20     8 	by_implication	initial("100"b),
 20     9 	by_compiler	initial("101"b)) int static bit(3) aligned options(constant);
 20    10 
 20    11 /* END INCLUDE FILE ... declare_type.incl.pl1 */
       68 
       69 
       70 /* program */
       71 
       72 	conditions = our_conditions;
       73 	cur_block = father_block;
       74 	return_flag = our_return_flag;
       75 	entry_flag = our_entry_flag;
       76 	iterative_do_entered = in_iterative_do;
       77 
       78 	spec = null;
       79 
       80 	pl1_stat_$cur_statement, p,
       81 	     do_statement_node = create_statement (do_statement, father_block, entry_ptr, conditions);
       82 	if entry_ptr ^= null
       83 	then call declare_label (father_block, p, entry_ptr, by_explicit_context);
       84 
       85 	do, p -> statement.root = create_operator (do_fun, 3);
       86 	i, k = k + 1;
       87 	if t_table.type = semi_colon
       88 	then goto get_next_statement;			/* this is a "do;" statement */
       89 
       90 /* for iterative do statements we need a null statement with the same source id as the do statement preceding the do statement
       91*   so that correct code will be generated in processing function references needing descriptors.  This fixes bug 1699. */
       92 
       93 	p -> statement.root = null;
       94 	p -> statement.statement_type = null_statement;
       95 	pl1_stat_$cur_statement, p, do_statement_node = create_statement (do_statement, father_block, null, conditions);
       96 	p -> statement.root = do;
       97 
       98 /* each <do specification> is represented by a do_spec operator */
       99 
      100 	spec, do -> operand (3) = create_operator (do_spec, 6);
      101 	ref = reference_parse (k, cur_block);
      102 
      103 	if ref = null
      104 	then call print (406);
      105 
      106 	if token_list (i) -> token.string = "while"
      107 	then if t_table.type = semi_colon
      108 	     then do;				/* this is a "do while(...)" clause */
      109 
      110 /* pick up expression from reference node */
      111 
      112 		     if ref -> reference.offset -> list.number ^= 1
      113 		     then call parse_error (405, null);
      114 
      115 		     spec -> operand (5) = ref -> reference.offset -> list.element (1);
      116 		     ref -> reference.offset = null;	/* don't free expression */
      117 		     call free_node (ref);
      118 		     go to get_next_statement;
      119 		end;
      120 	     else if t_table.type = comma
      121 	     then call print (406);
      122 
      123 	do -> operand (2) = ref;
      124 
      125 	if t_table.type ^= assignment
      126 	then call print (407);
      127 
      128 	k = k + 1;
      129 
      130 spec_loop:
      131 	spec -> operand (1) = expression_parse (k, cur_block);
      132 	if spec -> operand (1) = null
      133 	then call print (408);
      134 
      135 to_by_loop:
      136 	if t_table.string = "to"
      137 	then do;
      138 		k = k + 1;
      139 		if spec -> operand (2) ^= null
      140 		then call print (409);
      141 		spec -> operand (2) = expression_parse (k, cur_block);
      142 		if spec -> operand (2) = null
      143 		then call print (418);
      144 		iterative_do_entered = "1"b;
      145 	     end;
      146 
      147 	if t_table.string = "by"
      148 	then do;
      149 		k = k + 1;
      150 		if spec -> operand (3) ^= null
      151 		then call print (419);
      152 		spec -> operand (3) = expression_parse (k, cur_block);
      153 		if spec -> operand (3) = null
      154 		then call print (424);
      155 		iterative_do_entered = "1"b;
      156 		go to to_by_loop;
      157 	     end;
      158 
      159 	if t_table.string = "repeat"
      160 	then do;
      161 		k = k + 1;
      162 		if spec -> operand (2) ^= null | spec -> operand (3) ^= null
      163 		then call print (433);
      164 		spec -> operand (4) = expression_parse (k, cur_block);
      165 		if spec -> operand (4) = null
      166 		then call print (429);
      167 		iterative_do_entered = "1"b;
      168 	     end;
      169 
      170 	if t_table.string = "while"
      171 	then do;
      172 		k = k + 1;
      173 		if t_table.type ^= left_parn
      174 		then call parse_error (404, null);
      175 		else k = k + 1;
      176 		spec -> operand (5) = expression_parse (k, cur_block);
      177 		if spec -> operand (5) = null
      178 		then call print (426);
      179 		if t_table.type ^= right_parn
      180 		then call parse_error (405, null);
      181 		else k = k + 1;
      182 	     end;
      183 
      184 	if t_table.type = comma
      185 	then do;
      186 		k = k + 1;
      187 		spec -> operand (6), spec = create_operator (do_spec, 6);
      188 		go to spec_loop;
      189 	     end;
      190 
      191 	if t_table.type ^= semi_colon
      192 	then call print (425);
      193 
      194 get_next_statement:
      195 	call lex(cur_block);
      196 
      197 get_statement_type:
      198 	conditions = cur_block -> block.prefix;
      199 	k = 1;					/* first token */
      200 	type = statement_type (cur_block, k, label_ptr, conditions);
      201 	go to action (action_index (type));
      202 
      203 /*	***************** Statements requiring individual parsing procedures. ******** */
      204 
      205 action (10):					/* io statements */
      206 	call io_statement_parse (k, label_ptr, conditions, cur_block, end_ptr, return_flag, bit (binary (type, 9, 0)));
      207 	goto compound_parse_return;
      208 
      209 action (1):					/* begin statement	*/
      210 	call procedure_parse (k, label_ptr, conditions, cur_block, end_ptr, begin_block, return_flag);
      211 	go to compound_parse_return;
      212 
      213 action (2):					/* declare statement */
      214 	call declare_parse (k, cur_block, label_ptr);
      215 	go to get_next_statement;
      216 
      217 action (9):					/* default statement */
      218 	call default_parse (k, cur_block, label_ptr);
      219 	go to get_next_statement;
      220 
      221 action (3):					/* do statement	*/
      222 	call do_parse (k, label_ptr, conditions, cur_block, end_ptr, entry_flag, return_flag, iterative_do_entered);
      223 	go to compound_parse_return;
      224 
      225 action (5):					/* if statement	*/
      226 	call if_parse (k, label_ptr, conditions, cur_block, end_ptr, return_flag);
      227 	if end_ptr = null
      228 	then go to get_statement_type;
      229 	go to end_proc;
      230 
      231 action (6):					/* on statement	*/
      232 	call on_parse (k, label_ptr, conditions, cur_block, end_ptr);
      233 	go to compound_parse_return;
      234 
      235 action (7):					/* proc statement	*/
      236 	call procedure_parse (k, label_ptr, conditions, cur_block, end_ptr, internal_procedure, "0"b);
      237 
      238 compound_parse_return:
      239 	if end_ptr = null
      240 	then go to get_next_statement;
      241 	go to end_proc;
      242 
      243 /*	***************** Statements which may be in error. ************************** */
      244 
      245 action (8):					/* entry statement	*/
      246 	if iterative_do_entered | entry_flag
      247 	then do;
      248 		call parse_error (413 - 2 * binary (entry_flag, 1), null);
      249 		go to get_next_statement;
      250 	     end;
      251 
      252 	k = k + 1;
      253 	call process_entry (k, entry_statement, cur_block, label_ptr, conditions);
      254 	go to get_next_statement;
      255 
      256 /*	***************** Statements all parsed in statement_parse.******************* */
      257 
      258 
      259 action (0):
      260 	call statement_parse (k, label_ptr, conditions, cur_block, type);
      261 	go to get_next_statement;
      262 
      263 /*	***************** Statement processed in line. ******************************* */
      264 
      265 action (4):					/* end statement	*/
      266 	k = k + 1;
      267 	if t_table.type = identifier
      268 	then do;
      269 		end_ptr = token_list (k);
      270 		k = k + 1;
      271 	     end;
      272 	else end_ptr = null;
      273 	if t_table.type ^= semi_colon
      274 	then call parse_error (416, token_list (k));
      275 
      276 end_proc:
      277 	conditions = cur_block -> block.prefix;
      278 	q = create_statement (end_statement, cur_block, null, conditions);
      279 
      280 	if end_ptr ^= null
      281 	then do;
      282 		do p = entry_ptr repeat p -> list.element (1) while (p ^= null);
      283 		     if end_ptr = p -> list.element (2)
      284 		     then go to ck_labels;
      285 		end;
      286 
      287 		if type = binary (end_statement, 9)
      288 		then call parse_error (377, null);
      289 
      290 		call error (384, do_statement_node, null);
      291 
      292 		his_end_ptr = end_ptr;		/* ends this block and previous blocks */
      293 		entry_ptr = label_ptr;		/* any prefix labels get passed back up.  */
      294 		go to finish;
      295 	     end;
      296 
      297 ck_labels:
      298 	his_end_ptr = null;				/* ended this block only, even if we were given labels */
      299 	if label_ptr ^= null
      300 	then do;
      301 		call declare_label (cur_block, q, label_ptr, by_explicit_context);
      302 		q -> statement.labels = label_ptr;
      303 	     end;
      304 
      305 finish:						/* close the do statement with a label */
      306 	p = create_label (cur_block, null, by_compiler);
      307 	do -> operand (1) = p;
      308 	p -> label.statement = q;
      309 	ref = create_list (2);
      310 	ref -> list.element (2) = p -> label.token;
      311 	ref -> list.element (1) = q -> statement.labels;
      312 	q -> statement.labels = ref;
      313 	return;
      314 
      315 print:
      316      proc (m);					/* prints error messages */
      317 
      318 dcl	m		fixed bin (15);
      319 
      320 	call parse_error (m, null);
      321 	if spec ^= null
      322 	then do;
      323 		spec -> operand (1), spec -> operand (2), spec -> operand (3), spec -> operand (4), spec -> operand (5),
      324 		     spec -> operand (6) = null;
      325 	     end;
      326 	go to get_next_statement;
      327 
      328      end print;
      329 
      330      end do_parse;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/18/00  1149.3  do_parse.pl1                      >udd>sm>ds>w>ml>do_parse.pl1
55           1    07/31/99  1543.8  parse.incl.pl1                    >ldd>incl>parse.incl.pl1
1-175        2    08/01/89  1339.9  language_utility.incl.pl1         >ldd>incl>language_utility.incl.pl1
2-307        3    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-325        4    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-335        5    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-374        6    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-386        7    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
56           8    09/14/77  1805.7  token_list.incl.pl1               >ldd>incl>token_list.incl.pl1
57           9    08/13/81  2143.5  block.incl.pl1                    >ldd>incl>block.incl.pl1
58          10    04/07/83  1735.0  op_codes.incl.pl1                 >ldd>incl>op_codes.incl.pl1
59          11    07/21/80  1646.3  operator.incl.pl1                 >ldd>incl>operator.incl.pl1
60          12    04/07/83  1735.0  statement.incl.pl1                >ldd>incl>statement.incl.pl1
61          13    09/14/77  1805.7  token.incl.pl1                    >ldd>incl>token.incl.pl1
62          14    05/03/76  1420.8  block_types.incl.pl1              >ldd>incl>block_types.incl.pl1
63          15    05/03/76  1420.4  statement_types.incl.pl1          >ldd>incl>statement_types.incl.pl1
64          16    11/30/78  1327.4  token_types.incl.pl1              >ldd>incl>token_types.incl.pl1
65          17    08/13/81  2311.5  list.incl.pl1                     >ldd>incl>list.incl.pl1
66          18    05/06/74  1842.1  label.incl.pl1                    >ldd>incl>label.incl.pl1
67          19    07/21/80  1646.3  reference.incl.pl1                >ldd>incl>reference.incl.pl1
68          20    10/25/79  1745.8  declare_type.incl.pl1             >ldd>incl>declare_type.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
action_index                    000024 constant        fixed bin(15,0)          initial array dcl 51 ref 201
assignment                             constant        bit(9)                   initial dcl 16-3 ref 125
begin_block                     000020 constant        bit(9)                   initial dcl 14-1 set ref 209*
binary                                                 builtin function         dcl 49 ref 205 205 248 287
bit                                                    builtin function         dcl 49 ref 205 205
block                                  based           structure                level 1 dcl 9-5
by_compiler                     000013 constant        bit(3)                   initial dcl 20-5 set ref 305*
by_explicit_context             000014 constant        bit(3)                   initial dcl 20-5 set ref 82* 301*
comma                                  constant        bit(9)                   initial dcl 16-3 ref 120 184
conditions                      000124 automatic       bit(12)                  dcl 41 set ref 72* 80* 95* 197* 200* 205* 209* 221*
                                                                                  225* 231* 235* 253* 259* 276* 278*
create_label                    000046 constant        entry                    external dcl 2-140 ref 305
create_list                     000050 constant        entry                    external dcl 2-147 ref 309
create_operator                 000052 constant        entry                    external dcl 2-152 ref 85 100 187
create_statement                000054 constant        entry                    external dcl 2-163 ref 80 95 278
cur_block                       000116 automatic       pointer                  dcl 37 set ref 73* 101* 130* 141* 152* 164* 176*
                                                                                  194* 197 200* 205* 209* 213* 217* 221* 225* 231*
                                                                                  235* 253* 259* 276 278* 301* 305*
declare_label                   000012 constant        entry                    external dcl 1-29 ref 82 301
declare_parse                   000014 constant        entry                    external dcl 1-35 ref 213
default_parse                   000016 constant        entry                    external dcl 1-44 ref 217
do                              000100 automatic       pointer                  dcl 36 set ref 85* 96 100 123 307
do_fun                          000023 constant        bit(9)                   initial dcl 10-8 set ref 85*
do_parse                        000020 constant        entry                    external dcl 1-56 ref 221
do_spec                         000022 constant        bit(9)                   initial dcl 10-8 set ref 100* 187*
do_statement                    000017 constant        bit(9)                   initial dcl 15-3 set ref 80* 95*
do_statement_node               000120 automatic       pointer                  dcl 39 set ref 80* 95* 290*
element                   1            based           pointer                  array level 2 packed packed unaligned dcl 17-6 set
                                                                                  ref 115 283 285 310* 311*
end_ptr                         000114 automatic       pointer                  dcl 37 set ref 205* 209* 221* 225* 227 231* 235* 238
                                                                                  269* 272* 280 283 292
end_statement                   000016 constant        bit(9)                   initial dcl 15-3 set ref 278* 287
entry_flag                      000125 automatic       bit(1)                   dcl 43 set ref 75* 221* 245 248
entry_ptr                              parameter       pointer                  dcl 37 set ref 33 80* 82 82* 282 293*
entry_statement                 000015 constant        bit(9)                   initial dcl 15-3 set ref 253*
error                           000056 constant        entry                    external dcl 2-314 ref 290
expression_parse                000022 constant        entry                    external dcl 1-73 ref 130 141 152 164 176
father_block                           parameter       pointer                  dcl 37 set ref 33 73 80* 82* 95*
free_node                       000060 constant        entry                    external dcl 2-345 ref 117
his_end_ptr                            parameter       pointer                  dcl 37 set ref 33 292* 297*
i                               000122 automatic       fixed bin(15,0)          dcl 40 set ref 86* 106
identifier                             constant        bit(9)                   initial dcl 16-3 ref 267
if_parse                        000024 constant        entry                    external dcl 1-87 ref 225
in_iterative_do                        parameter       bit(1)                   dcl 43 ref 33 76
internal_procedure              000021 constant        bit(9)                   initial dcl 14-1 set ref 235*
io_statement_parse              000026 constant        entry                    external dcl 1-96 ref 205
iterative_do_entered            000127 automatic       bit(1)                   dcl 43 set ref 76* 144* 155* 167* 221* 245
k                                      parameter       fixed bin(15,0)          dcl 40 set ref 33 86 86* 87 101* 106 120 125 128*
                                                                                  128 130* 135 138* 138 141* 147 149* 149 152* 159
                                                                                  161* 161 164* 170 172* 172 173 175* 175 176* 179
                                                                                  181* 181 184 186* 186 191 199* 200* 205* 209* 213*
                                                                                  217* 221* 225* 231* 235* 252* 252 253* 259* 265*
                                                                                  265 267 269 270* 270 273 273
label                                  based           structure                level 1 dcl 18-1
label_ptr                       000112 automatic       pointer                  dcl 37 set ref 200* 205* 209* 213* 217* 221* 225*
                                                                                  231* 235* 253* 259* 293 299 301* 302
labels                    4            based           pointer                  level 2 packed packed unaligned dcl 12-9 set ref
                                                                                  302* 311 312*
left_parn                              constant        bit(9)                   initial dcl 16-3 ref 173
lex                             000030 constant        entry                    external dcl 1-106 ref 194
list                                   based           structure                level 1 dcl 17-6
m                                      parameter       fixed bin(15,0)          dcl 318 set ref 315 320*
null                                                   builtin function         dcl 49 ref 78 82 93 95 95 103 112 112 116 132 139
                                                                                  142 150 153 162 162 165 173 173 177 179 179 227
                                                                                  238 248 248 272 278 278 280 282 287 287 290 290
                                                                                  297 299 305 305 320 320 321 323
null_statement                         constant        bit(9)                   initial dcl 15-3 ref 94
number                    0(21)        based           fixed bin(14,0)          level 2 packed packed unaligned dcl 17-6 ref 112
offset                    5            based           pointer                  level 2 packed packed unaligned dcl 19-3 set ref 112
                                                                                  115 116*
on_parse                        000032 constant        entry                    external dcl 1-116 ref 231
operand                   1            based           pointer                  array level 2 packed packed unaligned dcl 11-6 set
                                                                                  ref 100* 115* 123* 130* 132 139 141* 142 150 152*
                                                                                  153 162 162 164* 165 176* 177 187* 307* 323* 323*
                                                                                  323* 323* 323* 323*
operator                               based           structure                level 1 dcl 11-6
our_conditions                         parameter       bit(12)                  dcl 41 ref 33 72
our_entry_flag                         parameter       bit(1)                   dcl 43 ref 33 75
our_return_flag                        parameter       bit(1)                   dcl 43 ref 33 74
p                               000106 automatic       pointer                  dcl 37 set ref 80* 82* 85 93 94 95* 96 282* 282*
                                                                                  283* 285 305* 307 308 310
parse_error                     000062 constant        entry                    external dcl 2-364 ref 112 173 179 248 273 287 320
pl1_stat_$cur_statement         000010 external static pointer                  dcl 46 set ref 80* 95*
pl1_stat_$token_list_ptr        000064 external static pointer                  dcl 8-1 ref 8-3
prefix                   24(09)        based           bit(12)                  level 2 packed packed unaligned dcl 9-5 ref 197 276
procedure_parse                 000034 constant        entry                    external dcl 1-133 ref 209 235
process_entry                   000036 constant        entry                    external dcl 1-143 ref 253
q                               000110 automatic       pointer                  dcl 37 set ref 278* 301* 302 308 311 312
ref                             000102 automatic       pointer                  dcl 36 set ref 101* 103 112 115 116 117* 123 309*
                                                                                  310 311 312
reference                              based           structure                level 1 dcl 19-3
reference_parse                 000040 constant        entry                    external dcl 1-150 ref 101
return_flag                     000126 automatic       bit(1)                   dcl 43 set ref 74* 205* 209* 221* 225*
right_parn                             constant        bit(9)                   initial dcl 16-3 ref 179
root                      3            based           pointer                  level 2 packed packed unaligned dcl 12-9 set ref 85*
                                                                                  93* 96*
semi_colon                             constant        bit(9)                   initial dcl 16-3 ref 87 106 191 273
size                      3            based           fixed bin(9,0)           level 2 in structure "t_table" dcl 8-11 in procedure
                                                                                  "do_parse" ref 135 147 159 170
size                      3            based           fixed bin(9,0)           level 2 in structure "token" dcl 13-3 in procedure
                                                                                  "do_parse" ref 106
spec                            000104 automatic       pointer                  dcl 36 set ref 78* 100* 115 130 132 139 141 142 150
                                                                                  152 153 162 162 164 165 176 177 187 187* 321 323
                                                                                  323 323 323 323 323
statement                11            based           pointer                  level 2 in structure "label" packed packed unaligned
                                                                                  dcl 18-1 in procedure "do_parse" set ref 308*
statement                              based           structure                level 1 dcl 12-9 in procedure "do_parse"
statement_parse                 000042 constant        entry                    external dcl 1-160 ref 259
statement_type                  000044 constant        entry                    external dcl 1-167 in procedure "do_parse" ref 200
statement_type           12(27)        based           bit(9)                   level 2 in structure "statement" packed packed
                                                                                  unaligned dcl 12-9 in procedure "do_parse" set ref
                                                                                  94*
string                    4            based           char                     level 2 in structure "token" dcl 13-3 in procedure
                                                                                  "do_parse" ref 106
string                    4            based           char                     level 2 in structure "t_table" dcl 8-11 in procedure
                                                                                  "do_parse" ref 135 147 159 170
t_table                                based           structure                level 1 dcl 8-11
token                     5            based           pointer                  level 2 in structure "label" packed packed unaligned
                                                                                  dcl 18-1 in procedure "do_parse" ref 310
token                                  based           structure                level 1 dcl 13-3 in procedure "do_parse"
token_list                             based           pointer                  array dcl 8-2 set ref 87 106 106 120 125 135 147 159
                                                                                  170 173 179 184 191 267 269 273 273*
token_list_pointer              000130 automatic       pointer                  initial dcl 8-3 set ref 87 106 106 120 125 135 147
                                                                                  159 170 173 179 184 191 267 269 273 273 8-3*
type                      0(09)        based           bit(9)                   level 2 in structure "t_table" packed packed
                                                                                  unaligned dcl 8-11 in procedure "do_parse" ref 87
                                                                                  106 120 125 173 179 184 191 267 273
type                            000123 automatic       fixed bin(15,0)          dcl 40 in procedure "do_parse" set ref 200* 201 205
                                                                                  205 259* 287

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
a_format                               internal static bit(9)                   initial dcl 10-8
abs_fun                                internal static bit(9)                   initial dcl 10-8
acos_fun                               internal static bit(9)                   initial dcl 10-8
acosd_fun                              internal static bit(9)                   initial dcl 10-8
add                                    internal static bit(9)                   initial dcl 10-8
addbitno_fun                           internal static bit(9)                   initial dcl 10-8
addcharno_fun                          internal static bit(9)                   initial dcl 10-8
addr_fun                               internal static bit(9)                   initial dcl 10-8
addr_fun_bits                          internal static bit(9)                   initial dcl 10-8
addrel_fun                             internal static bit(9)                   initial dcl 10-8
adjust_count                    000000 constant        entry                    external dcl 2-20
allocate_statement                     internal static bit(9)                   initial dcl 15-3
allocation_fun                         internal static bit(9)                   initial dcl 10-8
allot_auto                             internal static bit(9)                   initial dcl 10-8
allot_based                            internal static bit(9)                   initial dcl 10-8
allot_ctl                              internal static bit(9)                   initial dcl 10-8
allot_var                              internal static bit(9)                   initial dcl 10-8
and                                    internal static bit(9)                   initial dcl 16-3
and_bits                               internal static bit(9)                   initial dcl 10-8
arrow                                  internal static bit(9)                   initial dcl 16-3
asin_fun                               internal static bit(9)                   initial dcl 10-8
asind_fun                              internal static bit(9)                   initial dcl 10-8
assign                                 internal static bit(9)                   initial dcl 10-8
assign_by_name                         internal static bit(9)                   initial dcl 10-8
assign_round                           internal static bit(9)                   initial dcl 10-8
assign_size_ck                         internal static bit(9)                   initial dcl 10-8
assign_zero                            internal static bit(9)                   initial dcl 10-8
assignment_statement                   internal static bit(9)                   initial dcl 15-3
asterisk                               internal static bit(9)                   initial dcl 16-3
atan_fun                               internal static bit(9)                   initial dcl 10-8
atand_fun                              internal static bit(9)                   initial dcl 10-8
attribute_parse                 000000 constant        entry                    external dcl 1-11
b_format                               internal static bit(9)                   initial dcl 10-8
baseno_fun                             internal static bit(9)                   initial dcl 10-8
baseptr_fun                            internal static bit(9)                   initial dcl 10-8
begin_statement                        internal static bit(9)                   initial dcl 15-3
bin_integer                            internal static bit(9)                   initial dcl 16-3
binary_to_octal_string          000000 constant        entry                    external dcl 2-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 2-43
bindec                          000000 constant        entry                    external dcl 2-23
bindec$vs                       000000 constant        entry                    external dcl 2-28
binoct                          000000 constant        entry                    external dcl 2-33
bit_pointer                            internal static bit(9)                   initial dcl 10-8
bit_string                             internal static bit(9)                   initial dcl 16-3
bit_to_char                            internal static bit(9)                   initial dcl 10-8
bit_to_word                            internal static bit(9)                   initial dcl 10-8
bitno_fun                              internal static bit(9)                   initial dcl 10-8
bn_format                              internal static bit(9)                   initial dcl 10-8
bool_fun                               internal static bit(9)                   initial dcl 10-8
bound_ck                               internal static bit(9)                   initial dcl 10-8
by_context                             internal static bit(3)                   initial dcl 20-5
by_declare                             internal static bit(3)                   initial dcl 20-5
by_implication                         internal static bit(3)                   initial dcl 20-5
byte_fun                               internal static bit(9)                   initial dcl 10-8
c_format                               internal static bit(9)                   initial dcl 10-8
call_statement                         internal static bit(9)                   initial dcl 15-3
cat                                    internal static bit(9)                   initial dcl 16-3
cat_string                             internal static bit(9)                   initial dcl 10-8
ceil_fun                               internal static bit(9)                   initial dcl 10-8
char_string                            internal static bit(9)                   initial dcl 16-3
char_to_word                           internal static bit(9)                   initial dcl 10-8
charno_fun                             internal static bit(9)                   initial dcl 10-8
clock_fun                              internal static bit(9)                   initial dcl 10-8
close_file                             internal static bit(9)                   initial dcl 10-8
close_statement                        internal static bit(9)                   initial dcl 15-3
codeptr_fun                            internal static bit(9)                   initial dcl 10-8
colon                                  internal static bit(9)                   initial dcl 16-3
column_format                          internal static bit(9)                   initial dcl 10-8
compare_expression              000000 constant        entry                    external dcl 2-48
complex_fun                            internal static bit(9)                   initial dcl 10-8
conjg_fun                              internal static bit(9)                   initial dcl 10-8
constant_length                 000000 constant        entry                    external dcl 2-54
context                         000000 constant        entry                    external dcl 1-17
continue_statement                     internal static bit(9)                   initial dcl 15-3
convert                         000000 constant        entry                    external dcl 2-60
convert$from_builtin            000000 constant        entry                    external dcl 2-72
convert$to_integer              000000 constant        entry                    external dcl 2-66
convert$to_target               000000 constant        entry                    external dcl 2-88
convert$to_target_fb            000000 constant        entry                    external dcl 2-82
convert$validate                000000 constant        entry                    external dcl 2-78
copy_expression                 000000 constant        entry                    external dcl 2-94
copy_expression$copy_sons       000000 constant        entry                    external dcl 2-99
copy_string                            internal static bit(9)                   initial dcl 10-8
copy_unique_expression          000000 constant        entry                    external dcl 2-103
copy_words                             internal static bit(9)                   initial dcl 10-8
cos_fun                                internal static bit(9)                   initial dcl 10-8
cosd_fun                               internal static bit(9)                   initial dcl 10-8
create_array                    000000 constant        entry                    external dcl 2-108
create_block                    000000 constant        entry                    external dcl 2-112
create_bound                    000000 constant        entry                    external dcl 2-118
create_context                  000000 constant        entry                    external dcl 2-122
create_cross_reference          000000 constant        entry                    external dcl 2-128
create_default                  000000 constant        entry                    external dcl 2-132
create_identifier               000000 constant        entry                    external dcl 2-136
create_reference                000000 constant        entry                    external dcl 2-158
create_statement$prologue       000000 constant        entry                    external dcl 2-171
create_storage                  000000 constant        entry                    external dcl 2-179
create_symbol                   000000 constant        entry                    external dcl 2-184
create_token                    000000 constant        entry                    external dcl 2-191
create_token$init_hash_table    000000 constant        entry                    external dcl 2-197
create_token$protected          000000 constant        entry                    external dcl 2-199
data_list_parse                 000000 constant        entry                    external dcl 1-22
dec_integer                            internal static bit(9)                   initial dcl 16-3
decbin                          000000 constant        entry                    external dcl 2-206
declare_constant                000000 constant        entry                    external dcl 2-211
declare_constant$bit            000000 constant        entry                    external dcl 2-219
declare_constant$char           000000 constant        entry                    external dcl 2-224
declare_constant$desc           000000 constant        entry                    external dcl 2-229
declare_constant$integer        000000 constant        entry                    external dcl 2-234
declare_descriptor              000000 constant        entry                    external dcl 2-239
declare_descriptor$ctl          000000 constant        entry                    external dcl 2-249
declare_descriptor$param        000000 constant        entry                    external dcl 2-259
declare_integer                 000000 constant        entry                    external dcl 2-269
declare_parse$abort             000000 constant        entry                    external dcl 1-40
declare_picture                 000000 constant        entry                    external dcl 2-274
declare_picture_temp            000000 constant        entry                    external dcl 2-279
declare_pointer                 000000 constant        entry                    external dcl 2-287
declare_statement                      internal static bit(9)                   initial dcl 15-3
declare_temporary               000000 constant        entry                    external dcl 2-292
decode_node_id                  000000 constant        entry                    external dcl 2-300
decode_source_id                000000 constant        entry                    external dcl 2-306
default_statement                      internal static bit(9)                   initial dcl 15-3
delete_file                            internal static bit(9)                   initial dcl 10-8
delete_statement                       internal static bit(9)                   initial dcl 15-3
desc_size                              internal static bit(9)                   initial dcl 10-8
descriptor_parse                000000 constant        entry                    external dcl 1-49
digit_to_bit                           internal static bit(9)                   initial dcl 10-8
display_statement                      internal static bit(9)                   initial dcl 15-3
div                                    internal static bit(9)                   initial dcl 10-8
e_format                               internal static bit(9)                   initial dcl 10-8
else_clause                            internal static bit(9)                   initial dcl 15-3
empty_area                             internal static bit(9)                   initial dcl 10-8
enable_on                              internal static bit(9)                   initial dcl 10-8
environmentptr_fun                     internal static bit(9)                   initial dcl 10-8
eq                                     internal static bit(9)                   initial dcl 16-3
equal                                  internal static bit(9)                   initial dcl 10-8
error$omit_text                 000000 constant        entry                    external dcl 2-319
error_                          000000 constant        entry                    external dcl 2-324
error_$finish                   000000 constant        entry                    external dcl 2-343
error_$initialize_error         000000 constant        entry                    external dcl 2-341
error_$no_text                  000000 constant        entry                    external dcl 2-334
evaluate                        000000 constant        entry                    external dcl 1-67
ex_prologue                            internal static bit(9)                   initial dcl 10-8
exit_statement                         internal static bit(9)                   initial dcl 15-3
exp                                    internal static bit(9)                   initial dcl 10-8
exp_fun                                internal static bit(9)                   initial dcl 10-8
expon                                  internal static bit(9)                   initial dcl 16-3
external_procedure                     internal static bit(9)                   initial dcl 14-1
f_format                               internal static bit(9)                   initial dcl 10-8
fixed_bin                              internal static bit(9)                   initial dcl 16-3
fixed_dec                              internal static bit(9)                   initial dcl 16-3
float_bin                              internal static bit(9)                   initial dcl 16-3
float_dec                              internal static bit(9)                   initial dcl 16-3
floor_fun                              internal static bit(9)                   initial dcl 10-8
format_list_parse               000000 constant        entry                    external dcl 1-79
format_statement                       internal static bit(9)                   initial dcl 15-3
fortran_read                           internal static bit(9)                   initial dcl 10-8
fortran_write                          internal static bit(9)                   initial dcl 10-8
free_based                             internal static bit(9)                   initial dcl 10-8
free_ctl                               internal static bit(9)                   initial dcl 10-8
free_statement                         internal static bit(9)                   initial dcl 15-3
free_var                               internal static bit(9)                   initial dcl 10-8
ftn_file_manip                         internal static bit(9)                   initial dcl 10-8
ftn_trans_loop                         internal static bit(9)                   initial dcl 10-8
ge                                     internal static bit(9)                   initial dcl 16-3
get_array_size                  000000 constant        entry                    external dcl 2-348
get_data_trans                         internal static bit(9)                   initial dcl 10-8
get_edit_trans                         internal static bit(9)                   initial dcl 10-8
get_file                               internal static bit(9)                   initial dcl 10-8
get_list_trans                         internal static bit(9)                   initial dcl 10-8
get_size                        000000 constant        entry                    external dcl 2-352
get_statement                          internal static bit(9)                   initial dcl 15-3
get_string                             internal static bit(9)                   initial dcl 10-8
goto_statement                         internal static bit(9)                   initial dcl 15-3
greater_or_equal                       internal static bit(9)                   initial dcl 10-8
greater_than                           internal static bit(9)                   initial dcl 10-8
gt                                     internal static bit(9)                   initial dcl 16-3
half_to_word                           internal static bit(9)                   initial dcl 10-8
i_bin_integer                          internal static bit(9)                   initial dcl 16-3
i_dec_integer                          internal static bit(9)                   initial dcl 16-3
i_fixed_bin                            internal static bit(9)                   initial dcl 16-3
i_fixed_dec                            internal static bit(9)                   initial dcl 16-3
i_float_bin                            internal static bit(9)                   initial dcl 16-3
i_float_dec                            internal static bit(9)                   initial dcl 16-3
if_statement                           internal static bit(9)                   initial dcl 15-3
imag_fun                               internal static bit(9)                   initial dcl 10-8
index_after_fun                        internal static bit(9)                   initial dcl 10-8
index_before_fun                       internal static bit(9)                   initial dcl 10-8
index_fun                              internal static bit(9)                   initial dcl 10-8
index_rev_fun                          internal static bit(9)                   initial dcl 10-8
is_arith_constant                      internal static bit(9)                   initial dcl 16-47
is_arithmetic_constant                 internal static bit(9)                   initial dcl 16-47
is_constant                            internal static bit(9)                   initial dcl 16-47
is_decimal_constant                    internal static bit(9)                   initial dcl 16-47
is_delimiter                           internal static bit(9)                   initial dcl 16-47
is_float_constant                      internal static bit(9)                   initial dcl 16-47
is_identifier                          internal static bit(9)                   initial dcl 16-47
is_imaginary_constant                  internal static bit(9)                   initial dcl 16-47
is_integral_constant                   internal static bit(9)                   initial dcl 16-47
is_isub                                internal static bit(9)                   initial dcl 16-47
isub                                   internal static bit(9)                   initial dcl 16-3
join                                   internal static bit(9)                   initial dcl 10-8
jump                                   internal static bit(9)                   initial dcl 10-8
jump_false                             internal static bit(9)                   initial dcl 10-8
jump_if_eq                             internal static bit(9)                   initial dcl 10-8
jump_if_ge                             internal static bit(9)                   initial dcl 10-8
jump_if_gt                             internal static bit(9)                   initial dcl 10-8
jump_if_le                             internal static bit(9)                   initial dcl 10-8
jump_if_lt                             internal static bit(9)                   initial dcl 10-8
jump_if_ne                             internal static bit(9)                   initial dcl 10-8
jump_true                              internal static bit(9)                   initial dcl 10-8
l_parn                                 internal static bit(9)                   initial dcl 10-8
le                                     internal static bit(9)                   initial dcl 16-3
length_fun                             internal static bit(9)                   initial dcl 10-8
less_or_equal                          internal static bit(9)                   initial dcl 10-8
less_than                              internal static bit(9)                   initial dcl 10-8
lex$initialize_lex              000000 constant        entry                    external dcl 1-112
lex$write_last_line             000000 constant        entry                    external dcl 1-109
line_format                            internal static bit(9)                   initial dcl 10-8
locate_file                            internal static bit(9)                   initial dcl 10-8
locate_statement                       internal static bit(9)                   initial dcl 15-3
lock_file                              internal static bit(9)                   initial dcl 10-8
lock_fun                               internal static bit(9)                   initial dcl 10-8
lock_statement                         internal static bit(9)                   initial dcl 15-3
log10_fun                              internal static bit(9)                   initial dcl 10-8
log2_fun                               internal static bit(9)                   initial dcl 10-8
log_fun                                internal static bit(9)                   initial dcl 10-8
loop                                   internal static bit(9)                   initial dcl 10-8
lt                                     internal static bit(9)                   initial dcl 16-3
make_desc                              internal static bit(9)                   initial dcl 10-8
max_block_number                       internal static fixed bin(17,0)          initial dcl 9-74
max_fun                                internal static bit(9)                   initial dcl 10-8
max_list_elements                      internal static fixed bin(17,0)          initial dcl 17-12
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 11-15
merge_attributes                000000 constant        entry                    external dcl 2-355
min_fun                                internal static bit(9)                   initial dcl 10-8
minus                                  internal static bit(9)                   initial dcl 16-3
mod_bit                                internal static bit(9)                   initial dcl 10-8
mod_byte                               internal static bit(9)                   initial dcl 10-8
mod_fun                                internal static bit(9)                   initial dcl 10-8
mod_half                               internal static bit(9)                   initial dcl 10-8
mod_word                               internal static bit(9)                   initial dcl 10-8
mult                                   internal static bit(9)                   initial dcl 10-8
ne                                     internal static bit(9)                   initial dcl 16-3
negate                                 internal static bit(9)                   initial dcl 10-8
ngt                                    internal static bit(9)                   initial dcl 16-3
nlt                                    internal static bit(9)                   initial dcl 16-3
no_token                               internal static bit(9)                   initial dcl 16-3
nop                                    internal static bit(9)                   initial dcl 10-8
not                                    internal static bit(9)                   initial dcl 16-3
not_bits                               internal static bit(9)                   initial dcl 10-8
not_equal                              internal static bit(9)                   initial dcl 10-8
off_fun                                internal static bit(9)                   initial dcl 10-8
on_parse$revert                 000000 constant        entry                    external dcl 1-123
on_statement                           internal static bit(9)                   initial dcl 15-3
on_unit                                internal static bit(9)                   initial dcl 14-1
open_file                              internal static bit(9)                   initial dcl 10-8
open_statement                         internal static bit(9)                   initial dcl 15-3
optimizer                       000000 constant        entry                    external dcl 2-361
or                                     internal static bit(9)                   initial dcl 16-3
or_bits                                internal static bit(9)                   initial dcl 10-8
pack                                   internal static bit(9)                   initial dcl 10-8
page_format                            internal static bit(9)                   initial dcl 10-8
param_desc_ptr                         internal static bit(9)                   initial dcl 10-8
param_ptr                              internal static bit(9)                   initial dcl 10-8
parse                           000000 constant        entry                    external dcl 1-128
parse_error$no_text             000000 constant        entry                    external dcl 2-368
percent                                internal static bit(9)                   initial dcl 16-3
period                                 internal static bit(9)                   initial dcl 16-3
picture_format                         internal static bit(9)                   initial dcl 10-8
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 2-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 2-372
pl1_mod_fun                            internal static bit(9)                   initial dcl 10-8
pl1_print$for_lex               000000 constant        entry                    external dcl 2-418
pl1_print$non_varying           000000 constant        entry                    external dcl 2-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 2-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 2-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 2-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 2-414
pl1_print$varying               000000 constant        entry                    external dcl 2-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 2-395
pl1_stat_$statement_id                 external static structure                level 1 packed packed unaligned dcl 8-6
plus                                   internal static bit(9)                   initial dcl 16-3
prefix_plus                            internal static bit(9)                   initial dcl 10-8
procedure_statement                    internal static bit(9)                   initial dcl 15-3
ptr_fun                                internal static bit(9)                   initial dcl 10-8
put_control                            internal static bit(9)                   initial dcl 10-8
put_data_trans                         internal static bit(9)                   initial dcl 10-8
put_edit_trans                         internal static bit(9)                   initial dcl 10-8
put_field                              internal static bit(9)                   initial dcl 10-8
put_field_chk                          internal static bit(9)                   initial dcl 10-8
put_file                               internal static bit(9)                   initial dcl 10-8
put_list_trans                         internal static bit(9)                   initial dcl 10-8
put_statement                          internal static bit(9)                   initial dcl 15-3
put_string                             internal static bit(9)                   initial dcl 10-8
r_format                               internal static bit(9)                   initial dcl 10-8
r_parn                                 internal static bit(9)                   initial dcl 10-8
range_ck                               internal static bit(9)                   initial dcl 10-8
rank_fun                               internal static bit(9)                   initial dcl 10-8
read_file                              internal static bit(9)                   initial dcl 10-8
read_statement                         internal static bit(9)                   initial dcl 15-3
real_fun                               internal static bit(9)                   initial dcl 10-8
record_io                              internal static bit(9)                   initial dcl 10-8
refer                                  internal static bit(9)                   initial dcl 10-8
refer_extent                    000000 constant        entry                    external dcl 2-426
rel_fun                                internal static bit(9)                   initial dcl 10-8
repeat_fun                             internal static bit(9)                   initial dcl 10-8
reserve$clear                   000000 constant        entry                    external dcl 2-430
reserve$declare_lib             000000 constant        entry                    external dcl 2-434
reserve$read_lib                000000 constant        entry                    external dcl 2-439
reserve$rename_parse            000000 constant        entry                    external dcl 1-156
return_bits                            internal static bit(9)                   initial dcl 10-8
return_statement                       internal static bit(9)                   initial dcl 15-3
return_string                          internal static bit(9)                   initial dcl 10-8
return_value                           internal static bit(9)                   initial dcl 10-8
return_words                           internal static bit(9)                   initial dcl 10-8
reverse_fun                            internal static bit(9)                   initial dcl 10-8
revert_on                              internal static bit(9)                   initial dcl 10-8
revert_statement                       internal static bit(9)                   initial dcl 15-3
rewrite_file                           internal static bit(9)                   initial dcl 10-8
rewrite_statement                      internal static bit(9)                   initial dcl 15-3
root_block                             internal static bit(9)                   initial dcl 14-1
round_fun                              internal static bit(9)                   initial dcl 10-8
search_fun                             internal static bit(9)                   initial dcl 10-8
search_rev_fun                         internal static bit(9)                   initial dcl 10-8
segno_fun                              internal static bit(9)                   initial dcl 10-8
semantic_translator             000000 constant        entry                    external dcl 2-444
semantic_translator$abort       000000 constant        entry                    external dcl 2-446
semantic_translator$error       000000 constant        entry                    external dcl 2-450
setbitno_fun                           internal static bit(9)                   initial dcl 10-8
setcharno_fun                          internal static bit(9)                   initial dcl 10-8
share_expression                000000 constant        entry                    external dcl 2-454
sign_fun                               internal static bit(9)                   initial dcl 10-8
signal_on                              internal static bit(9)                   initial dcl 10-8
signal_statement                       internal static bit(9)                   initial dcl 15-3
sin_fun                                internal static bit(9)                   initial dcl 10-8
sind_fun                               internal static bit(9)                   initial dcl 10-8
skip_format                            internal static bit(9)                   initial dcl 10-8
slash                                  internal static bit(9)                   initial dcl 16-3
sqrt_fun                               internal static bit(9)                   initial dcl 10-8
stack_ptr                              internal static bit(9)                   initial dcl 10-8
stackbaseptr_fun                       internal static bit(9)                   initial dcl 10-8
stackframeptr_fun                      internal static bit(9)                   initial dcl 10-8
stacq_fun                              internal static bit(9)                   initial dcl 10-8
std_arg_list                           internal static bit(9)                   initial dcl 10-8
std_call                               internal static bit(9)                   initial dcl 10-8
std_entry                              internal static bit(9)                   initial dcl 10-8
std_return                             internal static bit(9)                   initial dcl 10-8
stop                                   internal static bit(9)                   initial dcl 10-8
stop_statement                         internal static bit(9)                   initial dcl 15-3
stream_prep                            internal static bit(9)                   initial dcl 10-8
sub                                    internal static bit(9)                   initial dcl 10-8
system_on_unit                         internal static bit(9)                   initial dcl 15-3
tan_fun                                internal static bit(9)                   initial dcl 10-8
tand_fun                               internal static bit(9)                   initial dcl 10-8
terminate_trans                        internal static bit(9)                   initial dcl 10-8
token_list_length                      internal static fixed bin(15,0)          initial dcl 8-4
token_to_binary                 000000 constant        entry                    external dcl 2-459
translate_fun                          internal static bit(9)                   initial dcl 10-8
trunc_fun                              internal static bit(9)                   initial dcl 10-8
unknown_statement                      internal static bit(9)                   initial dcl 15-3
unlock_file                            internal static bit(9)                   initial dcl 10-8
unlock_statement                       internal static bit(9)                   initial dcl 15-3
unpack                                 internal static bit(9)                   initial dcl 10-8
vclock_fun                             internal static bit(9)                   initial dcl 10-8
verify_fun                             internal static bit(9)                   initial dcl 10-8
verify_ltrim_fun                       internal static bit(9)                   initial dcl 10-8
verify_rev_fun                         internal static bit(9)                   initial dcl 10-8
verify_rtrim_fun                       internal static bit(9)                   initial dcl 10-8
wait_statement                         internal static bit(9)                   initial dcl 15-3
word_to_mod2                           internal static bit(9)                   initial dcl 10-8
word_to_mod4                           internal static bit(9)                   initial dcl 10-8
word_to_mod8                           internal static bit(9)                   initial dcl 10-8
wordno_fun                             internal static bit(9)                   initial dcl 10-8
write_file                             internal static bit(9)                   initial dcl 10-8
write_statement                        internal static bit(9)                   initial dcl 15-3
x_format                               internal static bit(9)                   initial dcl 10-8
xor_bits                               internal static bit(9)                   initial dcl 10-8

NAMES DECLARED BY EXPLICIT CONTEXT.
action                          000000 constant        label                    array(0:10) dcl 205 ref 201
ck_labels                       001674 constant        label                    dcl 297 ref 283
compound_parse_return           001404 constant        label                    dcl 238 ref 207 211 223 233
do_parse                        000117 constant        entry                    external dcl 33
end_proc                        001553 constant        label                    dcl 276 ref 229 241
finish                          001722 constant        label                    dcl 305 ref 294
get_next_statement              001105 constant        label                    dcl 194 ref 87 118 215 219 238 249 254 261 326
get_statement_type              001114 constant        label                    dcl 197 ref 227
print                           001772 constant        entry                    internal dcl 315 ref 103 120 125 132 139 142 150 153
                                                                                  162 165 177 191
spec_loop                       000472 constant        label                    dcl 130 ref 188
to_by_loop                      000520 constant        label                    dcl 135 ref 156

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      2314        2402    2037        2324
Length      3174    2037        66         556     255           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
do_parse                            174 external procedure  is an external procedure.  
print                                   internal procedure  shares stack frame of external procedure do_parse.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
do_parse                 000100 do                          do_parse
                         000102 ref                         do_parse
                         000104 spec                        do_parse
                         000106 p                           do_parse
                         000110 q                           do_parse
                         000112 label_ptr                   do_parse
                         000114 end_ptr                     do_parse
                         000116 cur_block                   do_parse
                         000120 do_statement_node           do_parse
                         000122 i                           do_parse
                         000123 type                        do_parse
                         000124 conditions                  do_parse
                         000125 entry_flag                  do_parse
                         000126 return_flag                 do_parse
                         000127 iterative_do_entered        do_parse
                         000130 token_list_pointer          do_parse

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
unpk_to_pk          call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
create_label                  create_list                   create_operator               create_statement
declare_label                 declare_parse                 default_parse                 do_parse
error                         expression_parse              free_node                     if_parse
io_statement_parse            lex                           on_parse                      parse_error
procedure_parse               process_entry                 reference_parse               statement_parse
statement_type

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pl1_stat_$cur_statement       pl1_stat_$token_list_ptr




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     33 000110    8    3 000124        72 000127        73 000133        74 000136        75 000141        76 000144
     78 000147        80 000151        82 000174        85 000215        86 000236        87 000243        93 000252
     94 000254        95 000256        96 000304       100 000307       101 000327       103 000343       106 000353
    112 000376       115 000422       116 000427       117 000432       118 000441       120 000442       123 000450
    125 000453       128 000470       130 000472       132 000511       135 000520       138 000532       139 000533
    141 000543       142 000562       144 000571       147 000573       149 000606       150 000607       152 000617
    153 000636       155 000645       156 000647       159 000650       161 000654       162 000655       164 000670
    165 000707       167 000716       170 000720       172 000732       173 000733       175 000761       176 000762
    177 001001       179 001010       181 001040       184 001041       186 001054       187 001055       188 001076
    191 001077       194 001105       197 001114       199 001121       200 001124       201 001143       205 001146
    207 001177       209 001200       211 001224       213 001225       215 001241       217 001242       219 001256
    221 001257       223 001305       225 001306       227 001330       229 001334       231 001335       233 001355
    235 001356       238 001404       241 001410       245 001411       248 001417       249 001441       252 001442
    253 001444       254 001463       259 001464       261 001504       265 001505       267 001507       269 001520
    270 001523       271 001524       272 001525       273 001527       276 001553       278 001560       280 001601
    282 001605       283 001616       285 001623       287 001626       290 001647       292 001666       293 001671
    294 001673       297 001674       299 001677       301 001702       302 001717       305 001722       307 001741
    308 001744       309 001746       310 001761       311 001765       312 001770       313 001771       315 001772
    320 001774       321 002007       323 002013       326 002023


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
