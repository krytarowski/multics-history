	COMPILATION LISTING OF SEGMENT compare_declaration
	Compiled by: Multics PL/I Compiler, Release 32c, of June 16, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 07/31/89  1401.1 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 compare_declaration:	proc(pa,pb,ignore_aligned) returns(bit(1) aligned);
       12 
       13 /* Modified 780712 by PG for unsigned */
       14 
       15 dcl	(asize,bsize,pa,pb,a,b,ba,bb,as,bs) ptr;
       16 
       17 dcl	(c_asize,c_bsize) fixed bin(31);
       18 
       19 dcl	(i,ndims) fixed bin;
       20 
       21 dcl	(array_bit, a_reference, b_reference) bit(1) aligned;
       22 
       23 dcl	ignore_aligned bit(1) aligned;
       24 
       25 dcl	(null,string,unspec) builtin;
       26 
       27 	asize,bsize = null;
       28 	c_asize,c_bsize = 0;
       29 	if pa = pb then goto exit;
       30 	if pa = null | pb = null then goto fail;
       31 
       32 	if pa->node.type = reference_node
       33 	then do;
       34 
       35 		/* we're comparing for purposes of optimizing an assignment */
       36 
       37 		a = pa->reference.symbol;
       38 		array_bit = pa->reference.array_ref;
       39 		a_reference = "1"b;
       40 	end;
       41 	else do;
       42 
       43 		/* we're comparing entire declaration OR we were called by compare_declaration to process a structure member */
       44 
       45 		a = pa;
       46 		array_bit = a->symbol.dimensioned;
       47 		a_reference = "0"b;
       48 	end;
       49 
       50 	if pb->node.type = reference_node
       51 	then do;
       52 		b = pb->reference.symbol;
       53 		array_bit = array_bit | pb->reference.array_ref;
       54 		b_reference = "1"b;
       55 	end;
       56 	else do;
       57 		b = pb;
       58 		array_bit = array_bit | b->symbol.dimensioned & ^ a_reference;
       59 		b_reference = "0"b;
       60 	end;
       61 
       62 	if string(a->symbol.data_type) ^= string(b->symbol.data_type) then goto fail;
       63 	if a->symbol.binary ^= b->symbol.binary then goto fail;
       64 	if a->symbol.real ^= b->symbol.real then goto fail;
       65 	if a->symbol.scale ^= b->symbol.scale then goto fail;
       66 	if a->symbol.aligned ^= b->symbol.aligned
       67 	then	if ^ ignore_aligned
       68 		then	goto fail;
       69 		else	if ^ (a->symbol.bit | a->symbol.char)
       70 			then	goto fail;
       71 
       72 	if a -> symbol.unsigned ^= b -> symbol.unsigned
       73 	then go to fail;
       74 
       75 	if a->symbol.varying ^= b->symbol.varying then goto fail;
       76 
       77 	if a->symbol.picture
       78 	then	if unspec(a->symbol.general->reference.symbol->symbol.initial->picture_image)
       79 			^=unspec(b->symbol.general->reference.symbol->symbol.initial->picture_image)
       80 		then	goto fail;
       81 
       82 	asize = a->symbol.dcl_size;
       83 	bsize = b->symbol.dcl_size;
       84 	c_asize = a->symbol.c_dcl_size;
       85 	c_bsize = b->symbol.c_dcl_size;
       86 
       87 	if (a->symbol.bit|a->symbol.char) & a_reference & ^array_bit & ^a->symbol.varying
       88 	then do;
       89 		asize = pa->reference.length;
       90 		c_asize = pa->reference.c_length;
       91 	end;
       92 
       93 	if (b->symbol.bit|b->symbol.char) & b_reference & ^array_bit & ^b->symbol.varying
       94 	then do;
       95 		bsize = pb->reference.length;
       96 		c_bsize = pb->reference.c_length;
       97 	end;
       98 
       99 	if c_asize^=c_bsize
      100 	then	goto fail;
      101 
      102 	if asize^=bsize
      103 	then	if a_reference & b_reference
      104 		then	if ^ compare_expression(asize,bsize)
      105 			then	goto fail;
      106 			else;
      107 		else 	goto fail;
      108 
      109 	if array_bit
      110 	then	if a->symbol.dimensioned^=b->symbol.dimensioned
      111 		then	if a_reference
      112 			then	goto fail;
      113 			else do;
      114 				if b->symbol.dimensioned
      115 				then	if b->symbol.array->array.own_number_of_dimensions ^= 0
      116 					then	goto fail;
      117 					else;
      118 				else	if a->symbol.array->array.own_number_of_dimensions ^= 0
      119 					then	goto fail;
      120 				array_bit = "0"b;
      121 			end;
      122 
      123 	if array_bit
      124 	then do;
      125 		if a->symbol.array->array.own_number_of_dimensions ^= b->symbol.array->array.own_number_of_dimensions
      126 		then	goto fail;
      127 
      128 		if a_reference
      129 		then do;
      130 			if a->symbol.array->array.number_of_dimensions ^= b->symbol.array->array.number_of_dimensions
      131 			then	goto fail;
      132 
      133 			if a->symbol.array->array.interleaved ^= b->symbol.array->array.interleaved
      134 			then	goto fail;
      135 
      136 			ndims = b->symbol.array->array.number_of_dimensions;
      137 		end;
      138 		else	ndims = b->symbol.array->array.own_number_of_dimensions;
      139 
      140 		ba = a->symbol.array->array.bounds;
      141 		bb = b->symbol.array->array.bounds;
      142 
      143 		do i = 1 to ndims while(ba ^= null);
      144 			if a->symbol.star_extents^=b->symbol.star_extents then goto fail;
      145 
      146 			if ba->bound.c_lower ^= bb->bound.c_lower then goto fail;
      147 			if ba->bound.c_upper ^= bb->bound.c_upper then goto fail;
      148 
      149 			if ba->bound.lower=null & bb->bound.lower^=null
      150 			then do;
      151 				if bb->bound.lower->node.type^=reference_node
      152 				then	goto fail;
      153 				if ^bb->bound.lower->reference.symbol->symbol.constant
      154 				then	goto fail;
      155 			end;		else
      156 
      157 			if ba->bound.lower^=null & bb->bound.lower=null
      158 			then do;
      159 				if ba->bound.lower->node.type^=reference_node
      160 				then	goto fail;
      161 				if ^ba->bound.lower->reference.symbol->symbol.constant
      162 				then	goto fail;
      163 			end;		else
      164 
      165 			if ^compare_expression((ba->bound.lower),(bb->bound.lower))
      166 			then	goto fail;
      167 
      168 			if ba->bound.upper=null & bb->bound.upper^=null
      169 			then do;
      170 				if bb->bound.upper->node.type^=reference_node
      171 				then	goto fail;
      172 				if ^bb->bound.upper->reference.symbol->symbol.constant
      173 				then	goto fail;
      174 			end;		else
      175 
      176 			if ba->bound.upper^=null & bb->bound.upper=null
      177 			then do;
      178 				if ba->bound.upper->node.type^=reference_node
      179 				then	goto fail;
      180 				if ^ba->bound.upper->reference.symbol->symbol.constant
      181 				then	goto fail;
      182 			end;		else
      183 
      184 			if ^compare_expression((ba->bound.upper),(bb->bound.upper))
      185 			then	goto fail;
      186 
      187 			ba = ba->bound.next;
      188 			bb = bb->bound.next;
      189 		end;
      190 	end;
      191 
      192 	if a->symbol.structure
      193 	then do;
      194 		as = a->symbol.son;
      195 		bs = b->symbol.son;
      196 
      197 		do while(as ^= null);
      198 			if bs=null
      199 			then	goto fail;
      200 
      201 			if ^compare_declaration(as,bs,"0"b)
      202 			then	goto fail;
      203 
      204 			as = as->symbol.brother;
      205 			bs = bs->symbol.brother;
      206 		end;
      207 
      208 		if bs^=null
      209 		then	goto fail;
      210 	end;
      211 
      212 exit:
      213 	return("1"b);
      214 
      215 fail:
      216 	return("0"b);
      217 
  1     1 /* BEGIN INCLUDE FILE ... semant.incl.pl1 */
  1     2 
  1     3 /* Modified: 30 Aug 1979 by PCK to fix 1804 and 1823 */
  1     4 /* Modified: 26 Aug 1979 by PCK to implement by name assignment */
  1     5 
  1     6 
  1     7 declare	alloc_semantics	entry(pointer,pointer,pointer);
  1     8 			/* parameter 1:	(input)	block node pointer		*/
  1     9 			/* parameter 2:	(input)	statement node pointer	*/
  1    10 			/* parameter 3:	(in/out)	tree pointer		*/
  1    11 
  1    12 declare	alloc_semantics$init_only entry(pointer,pointer,pointer);
  1    13 			/* parameter 1:	(input)	qualifier pointer		*/
  1    14 			/* parameter 2:	(input)	statement node pointer	*/
  1    15 			/* parameter 3:	(input)	symbol node pointer		*/
  1    16 
  1    17 declare	builtin		entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  1    18 			returns(pointer);
  1    19 			/* parameter 1:	(input)	block node pointer		*/
  1    20 			/* parameter 2:	(input)	statement node pointer	*/
  1    21 			/* parameter 3:	(input)	tree pointer		*/
  1    22 			/* parameter 4:	(input)	subscript pointer		*/
  1    23 			/* parameter 5:	(input)	builtin symbol node pointer	*/
  1    24 			/* parameter 6:	(in/out)	context			*/
  1    25 			/* return:	(output)	tree pointer		*/
  1    26 
  1    27 declare	check_star_extents	entry(pointer,pointer);
  1    28 			/* parameter 1:	(input) symbol node of procedure	*/
  1    29 			/* parameter 2:	(input) argument list pointer		*/
  1    30 
  1    31 declare	compare_declaration	entry(pointer,pointer,bit(1) aligned) reducible
  1    32 			returns(bit(1) aligned);
  1    33 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  1    34 			/* parameter 2:	(input)	symbol node ptr	*/
  1    35 			/* parameter 3:	(input)	"1"b if aligned attribute ignored for string	*/
  1    36 			/* return:	(output)	compare bit		*/
  1    37 
  1    38 declare	context_processor	entry(pointer,label);
  1    39 			/* parameter 1:	(input)	root block node pointer	*/
  1    40 
  1    41 declare	declare		entry(pointer);
  1    42 			/* parameter 1:	(input)	symbol node pointer		*/
  1    43 
  1    44 declare	declare_structure	entry(pointer);
  1    45 			/* parameter 1:	(input)	symbol node pointer		*/
  1    46 
  1    47 declare	defined_reference	entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  1    48 			returns(pointer);
  1    49 			/* parameter 1:	(input)	block node pointer		*/
  1    50 			/* parameter 2:	(input)	statement node pointer	*/
  1    51 			/* parameter 3:	(input)	tree pointer		*/
  1    52 			/* parameter 4:	(input)	subscript list pointer or null*/
  1    53 			/* parameter 5:	(input)	symbol node pointer		*/
  1    54 			/* parameter 6:	(in/out)	context			*/
  1    55 			/* return:	(output)	tree pointer		*/
  1    56 
  1    57 declare	do_semantics	entry(pointer,pointer,pointer);
  1    58 			/* parameter 1:	(input)	block node pointer		*/
  1    59 			/* parameter 2:	(input)	statement node pointer	*/
  1    60 			/* parameter 3:	(input)	tree pointer		*/
  1    61 
  1    62 declare	expand_assign	entry(pointer,pointer,pointer,bit(36) aligned,pointer)
  1    63 			returns(pointer);
  1    64 			/* parameter 1:	(input)	block node pointer		*/
  1    65 			/* parameter 2:	(input)	statement node pointer	*/
  1    66 			/* parameter 3:	(input)	tree pointer		*/
  1    67 			/* parameter 4:	(in/out)	context			*/
  1    68 			/* parameter 5:	(input)	aggregate reference node ptr	*/
  1    69 			/* return:	(output)	tree pointer		*/
  1    70 
  1    71 declare	expand_by_name	entry(pointer,pointer,pointer);
  1    72 			/* parameter 1:	(input)	block node pointer		*/
  1    73 			/* parameter 2:	(input)	statement node pointer	*/
  1    74 			/* parameter 3:	(input/output)	tree pointer		*/
  1    75 
  1    76 declare	expand_infix	entry(pointer,pointer,pointer,bit(36) aligned)
  1    77 			returns(pointer);
  1    78 			/* parameter 1:	(input)	block node pointer		*/
  1    79 			/* parameter 2:	(input)	statement node pointer	*/
  1    80 			/* parameter 3:	(input)	tree pointer		*/
  1    81 			/* parameter 4:	(in/out)	context			*/
  1    82 			/* return:	(output)	tree pointer		*/
  1    83 
  1    84 declare	expand_initial	entry(pointer,pointer,pointer);
  1    85 			/* parameter 1:	(input)	symbol node pointer		*/
  1    86 			/* parameter 2:	(input)	statement node pointer	*/
  1    87 			/* parameter 3:	(input)	locator			*/
  1    88 
  1    89 declare	expand_prefix	entry(pointer,pointer,pointer,bit(36) aligned)
  1    90 			returns(pointer);
  1    91 			/* parameter 1:	(input)	block node pointer		*/
  1    92 			/* parameter 2:	(input)	statement node pointer	*/
  1    93 			/* parameter 3:	(input)	tree pointer		*/
  1    94 			/* parameter 4:	(in/out)	context			*/
  1    95 			/* return:	(output)	tree pointer		*/
  1    96 
  1    97 declare	expand_primitive	entry(pointer,pointer,pointer,bit(36) aligned)
  1    98 			returns(pointer);
  1    99 			/* parameter 1:	(input)	block node pointer		*/
  1   100 			/* parameter 2:	(input)	statement node pointer	*/
  1   101 			/* parameter 3:	(input)	tree pointer		*/
  1   102 			/* parameter 4:	(input)	context			*/
  1   103 			/* return:	(output)	tree pointer		*/
  1   104 
  1   105 declare	expression_semantics entry(pointer,pointer,pointer,bit(36) aligned)
  1   106 			returns(pointer);
  1   107 			/* parameter 1:	(input)	block node pointer		*/
  1   108 			/* parameter 2:	(input)	statement node pointer	*/
  1   109 			/* parameter 3:	(input)	tree pointer		*/
  1   110 			/* parameter 4:	(in/out)	context			*/
  1   111 			/* return:	(output)	tree pointer		*/
  1   112 
  1   113 declare	fill_refer	entry(pointer,pointer,bit(1) aligned)
  1   114 			returns(pointer);
  1   115 			/* parameter 1:	(input)	null,ref node,op node ptr */
  1   116 			/* parameter 2:	(input)	null,ref node,op node ptr */
  1   117 			/* parameter 3:	(input)	copy switch for param 2 */
  1   118 			/* return:	(output)	ptr to processed tree */
  1   119 
  1   120 declare	io_data_list_semantics$format_list_semantics entry(pointer,pointer,pointer);
  1   121 			/* parameter 1:	(input)	block node pointer		*/
  1   122 			/* parameter 2:	(input)	statement node pointer	*/
  1   123 			/* parameter 3:	(in/out)	tree pointer		*/
  1   124 
  1   125 declare	function		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   126 			returns(pointer);
  1   127 			/* parameter 1:	(input)	block node pointer		*/
  1   128 			/* parameter 2:	(input)	statement node pointer	*/
  1   129 			/* parameter 3:	(input)	tree pointer		*/
  1   130 			/* parameter 4:	(input)	symbol node pointer		*/
  1   131 			/* parameter 5:	(in/out)	context			*/
  1   132 			/* return:	(output)	tree pointer		*/
  1   133 
  1   134 declare	generic_selector	entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   135 			returns(pointer);
  1   136 			/* parameter 1:	(input)	block node pointer	*/
  1   137 			/* parameter 2:	(input)	statement node pointer	*/
  1   138 			/* parameter 3:	(input)	tree pointer	*/
  1   139 			/* parameter 4:	(input)	pointer to argument list	*/
  1   140 			/* parameter 5:	(in/out)	context		*/
  1   141 			/* return:	(output)	tree pointer	*/
  1   142 
  1   143 declare	io_data_list_semantics entry(pointer,pointer,pointer);
  1   144 			/* parameter 1:	(input)	block node pointer		*/
  1   145 			/* parameter 2:	(input)	statement node pointer	*/
  1   146 			/* parameter 3:	(input)	operator node pointer	*/
  1   147 
  1   148 declare	io_semantics	entry(pointer,pointer,pointer);
  1   149 			/* parameter 1:	(input)	block node pointer		*/
  1   150 			/* parameter 2:	(input)	statement node pointer	*/
  1   151 			/* parameter 3:	(input)	tree pointer		*/
  1   152 
  1   153 declare	lookup		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   154 			returns(bit(1) aligned);
  1   155 			/* parameter 1:	(input)	block node pointer		*/
  1   156 			/* parameter 2:	(input)	stmnt|symbol node pointer	*/
  1   157 			/* parameter 3:	(input)	token or reference node ptr	*/
  1   158 			/* parameter 4:	(output)	symbol node pointer		*/
  1   159 			/* parameter 5:	(in/out)	context			*/
  1   160 			/* return:	(output)	symbol found bit		*/
  1   161 
  1   162 declare	make_non_quick	entry(pointer, bit (36) aligned);
  1   163 			/* parameter 1:	(input)	tree pointer	*/
  1   164 			/* parameter 2:	(input)	reason why being made nonquick */
  1   165 
  1   166 declare	match_arguments	entry(pointer,pointer) reducible
  1   167 			returns(bit(1) aligned);
  1   168 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  1   169 			/* parameter 2:	(input)	reference or symbol node ptr	*/
  1   170 			/* return:	(output)	compare bit		*/
  1   171 
  1   172 declare	offset_adder	entry(pointer,fixed binary(31),fixed binary(3),bit(1) aligned,
  1   173 			      pointer,fixed binary(31),fixed binary(3),bit(1) aligned,bit(1));
  1   174 			/* parameter 1:	(in/out)	tree pointer		*/
  1   175 			/* parameter 2:	(in/out)	constant size		*/
  1   176 			/* parameter 3:	(in/out)	units			*/
  1   177 			/* parameter 4:	(in/out) 	ON if units ^= word_, but tree in words	*/
  1   178 			/* parameter 5:	(input)	tree pointer		*/
  1   179 			/* parameter 6:	(input)	constant size		*/
  1   180 			/* parameter 7:	(input)	units			*/
  1   181 			/* parameter 8:	(input)	ON if units ^= word_, but tree in words	*/
  1   182 			/* parameter 9:	(input)	ON if should not improve units	*/
  1   183 
  1   184 declare	operator_semantics	entry(pointer,pointer,pointer,bit(36) aligned)
  1   185 			returns(pointer);
  1   186 			/* parameter 1:	(input)	block node pointer		*/
  1   187 			/* parameter 2:	(input)	statement node pointer	*/
  1   188 			/* parameter 3:	(input)	tree pointer		*/
  1   189 			/* parameter 4:	(in/out)	context			*/
  1   190 			/* return:	(output)	tree pointer		*/
  1   191 
  1   192 declare	propagate_bit	entry(pointer,fixed binary(15));
  1   193 			/* parameter 1:	(input)	symbol node pointer		*/
  1   194 			/* parameter 2:	(input)	attribute number		*/
  1   195 
  1   196 declare	semantic_translator$call_es entry(pointer,pointer,pointer,label,bit(1) aligned)
  1   197 			returns(pointer);
  1   198 			/* parameter 1:	(input)	block ptr	*/
  1   199 			/* parameter 2:	(input)	statement ptr	*/
  1   200 			/* parameter 3:	(input)	tree ptr	*/
  1   201 			/* parameter 4:	(input)	failure label	*/
  1   202 			/* parameter 5:	(input)	"1"b -- convert to integer	*/
  1   203 			/* return:	(output)	tree ptr		*/
  1   204 
  1   205 declare	simplify_expression	entry(pointer,fixed bin,bit(1)aligned);
  1   206 			/* parameter 1:	(in/out)	tree pointer		*/
  1   207 			/* parameter 2:	(output)	value of constant, if the entire tree
  1   208*						is simplified		*/
  1   209 			/* parameter 3:	(output)	bit indicating if the tree has
  1   210*						been simplified		*/
  1   211 
  1   212 declare	simplify_offset	entry(pointer,bit(36) aligned);
  1   213 			/* parameter 1:	(input)	reference node pointer	*/
  1   214 			/* parameter 2:	(input)	context			*/
  1   215 
  1   216 declare	subscripter	entry(pointer,pointer,pointer,pointer,pointer)
  1   217 			returns(pointer);
  1   218 			/* parameter 1:	(input)	block node pointer		*/
  1   219 			/* parameter 2:	(input)	statement node pointer	*/
  1   220 			/* parameter 3:	(input)	tree pointer		*/
  1   221 			/* parameter 4:	(in/out)	subscript list pointer	*/
  1   222 			/* parameter 5:	(input)	symbol node pointer		*/
  1   223 			/* return:	(output)	reference node pointer	*/
  1   224 
  1   225 declare	validate		entry(pointer);
  1   226 			/* parameter 1:	(input)	symbol node pointer		*/
  1   227 
  2     1 /****^  *********************************************************
  2     2*        *                                                       *
  2     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  2     4*        *                                                       *
  2     5*        ********************************************************* */
  2     6 
  2     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  2     8 
  2     9 
  2    10 /****^  HISTORY COMMENTS:
  2    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  2    12*     install(89-07-31,MR12.3-1066):	
  2    13*     Removed the obsolete parameter source_line from the dcl of error_().
  2    14*                                                   END HISTORY COMMENTS */
  2    15 
  2    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  2    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  2    18* */
  2    19 
  2    20 declare	adjust_count	entry(pointer);
  2    21 			/* parameter 1:	(input)	any node pointer		*/
  2    22 
  2    23 declare	bindec		entry(fixed bin(31)) reducible
  2    24 			returns(character(12) aligned);
  2    25 			/* parameter 1:	(input)	bin value			*/
  2    26 			/* return:	(output)	character value with blanks	*/
  2    27 
  2    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  2    29 			returns(character(12) aligned varying);
  2    30 			/* parameter 1:	(input)	binary value		*/
  2    31 			/* return:	(output)	char value without blanks	*/
  2    32 
  2    33 declare	binoct		entry(fixed bin(31)) reducible
  2    34 			returns(char(12) aligned);
  2    35 			/* parameter 1:	(input)	binary value		*/
  2    36 			/* return:	(output)	char value with blanks	*/
  2    37 
  2    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  2    39 			returns(char(12) aligned);
  2    40 			/* parameter 1:	(input)	binary value		*/
  2    41 			/* return:	(output)	right-aligned char value	*/
  2    42 
  2    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  2    44 			returns(char(12) varying aligned);
  2    45 			/* parameter 1:	(input)	binary value		*/
  2    46 			/* returns:	(output)	char value without blanks	*/
  2    47 
  2    48 declare	compare_expression	entry(pointer,pointer) reducible
  2    49 			returns(bit(1) aligned);
  2    50 			/* parameter 1:	(input)	any node pointer		*/
  2    51 			/* parameter 2:	(input)	any node pointer		*/
  2    52 			/* return:	(output)	compare bit		*/
  2    53 
  2    54 declare	constant_length	entry (pointer, fixed bin (71))
  2    55 			returns (bit (1) aligned);
  2    56 			/* parameter 1:	(input)	reference node pointer	*/
  2    57 			/* parameter 2:	(input)	value of constant length	*/
  2    58 			/* return:	(output)	"1"b if constant length	*/
  2    59 
  2    60 declare	convert		entry(pointer,bit(36) aligned)
  2    61 			returns(pointer);
  2    62 			/* parameter 1:	(input)	any node pointer		*/
  2    63 			/* parameter 2:	(input)	target type		*/
  2    64 			/* return:	(output)	target value tree pointer	*/
  2    65 
  2    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  2    67 			returns(pointer);
  2    68 			/* parameter 1:	(input)	any node pointer		*/
  2    69 			/* parameter 2:	(input)	target type		*/
  2    70 			/* return:	(output)	target value tree pointer	*/
  2    71 
  2    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  2    73 			returns(pointer);
  2    74 			/* parameter 1:	(input)	any node pointer		*/
  2    75 			/* parameter 2:	(input)	target type		*/
  2    76 			/* return:	(output)	target value tree pointer	*/
  2    77 
  2    78 declare	convert$validate	entry(pointer,pointer);
  2    79 			/* parameter 1:	(input)	source value tree pointer	*/
  2    80 			/* parameter 2:	(input)	target reference node pointer	*/
  2    81 
  2    82 declare	convert$to_target_fb entry(pointer,pointer)
  2    83 			returns(pointer);
  2    84 			/* parameter 1:	(input)	source value tree pointer	*/
  2    85 			/* parameter 2:	(input)	target reference node pointer	*/
  2    86 			/* return:	(output)	target value tree pointer	*/
  2    87 
  2    88 declare	convert$to_target	entry(pointer,pointer)
  2    89 			returns(pointer);
  2    90 			/* parameter 1:	(input)	source value tree pointer	*/
  2    91 			/* parameter 2:	(input)	target reference node pointer	*/
  2    92 			/* return:	(output)	target value tree pointer	*/
  2    93 
  2    94 declare	copy_expression	entry(pointer unaligned)
  2    95 			returns(pointer);
  2    96 			/* parameter 1:	(input)	any node pointer		*/
  2    97 			/* return:	(output)	any node pointer		*/
  2    98 
  2    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  2   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  2   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  2   102 
  2   103 declare	copy_unique_expression entry(pointer)
  2   104 			returns(pointer);
  2   105 			/* parameter 1:	(input)	any node pointer		*/
  2   106 			/* return:	(output)	any node pointer		*/
  2   107 
  2   108 declare	create_array	entry()
  2   109 			returns(pointer);
  2   110 			/* return:	(output)	array node pointer		*/
  2   111 
  2   112 declare	create_block	entry(bit(9) aligned,pointer)
  2   113 			returns(pointer);
  2   114 			/* parameter 1:	(input)	block type		*/
  2   115 			/* parameter 2:	(input)	father block node pointer	*/
  2   116 			/* return:	(output)	block node pointer		*/
  2   117 
  2   118 declare	create_bound	entry()
  2   119 			returns(pointer);
  2   120 			/* return:	(output)	bound node pointer		*/
  2   121 
  2   122 declare	create_context	entry(pointer,pointer)
  2   123 			returns(pointer);
  2   124 			/* parameter 1:	(input)	block node pointer		*/
  2   125 			/* parameter 2:	(input)	token pointer		*/
  2   126 			/* return:	(output)	context node pointer	*/
  2   127 
  2   128 declare	create_cross_reference entry()
  2   129 			returns(pointer);
  2   130 			/* return:	(output)	cross reference node pointer	*/
  2   131 
  2   132 declare	create_default	entry
  2   133 			returns(pointer);
  2   134 			/* return:	(output)	default node pointer	*/
  2   135 
  2   136 declare	create_identifier	entry()
  2   137 			returns(pointer);
  2   138 			/* return:	(output)	token node pointer		*/
  2   139 
  2   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  2   141 			returns(pointer);
  2   142 			/* parameter 1:	(input)	block node pointer		*/
  2   143 			/* parameter 2:	(input)	token node pointer		*/
  2   144 			/* parameter 3:	(input)	declare type		*/
  2   145 			/* return:	(output)	label node pointer		*/
  2   146 
  2   147 declare	create_list	entry(fixed bin(15))
  2   148 			returns(pointer);
  2   149 			/* parameter 1:	(input)	number of list elements	*/
  2   150 			/* return:	(output)	list node pointer		*/
  2   151 
  2   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  2   153 			returns(pointer);
  2   154 			/* parameter 1:	(input)	operator type		*/
  2   155 			/* parameter 2:	(input)	number of operands		*/
  2   156 			/* return:	(output)	operator node pointer	*/
  2   157 
  2   158 declare	create_reference	entry(pointer)
  2   159 			returns(pointer);
  2   160 			/* parameter 1:	(input)	symbol node pointer		*/
  2   161 			/* return:	(output)	reference node pointer	*/
  2   162 
  2   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   164 			returns(pointer);
  2   165 			/* parameter 1:	(input)	statement type		*/
  2   166 			/* parameter 2:	(input)	block node pointer		*/
  2   167 			/* parameter 3:	(input)	label node pointer		*/
  2   168 			/* parameter 4:	(input)	conditions		*/
  2   169 			/* return:	(output)	statement node pointer	*/
  2   170 
  2   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   172 			returns(pointer);
  2   173 			/* parameter 1:	(input)	statement type		*/
  2   174 			/* parameter 2:	(input)	block node pointer		*/
  2   175 			/* parameter 3:	(input)	label node pointer		*/
  2   176 			/* parameter 4:	(input)	conditions		*/
  2   177 			/* return:	(output)	statement node pointer	*/
  2   178 
  2   179 declare	create_storage	entry(fixed bin(15))
  2   180 			returns(pointer);
  2   181 			/* parameter 1:	(input)	number of words		*/
  2   182 			/* return:	(output)	storage block pointer	*/
  2   183 
  2   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  2   185 			returns(pointer);
  2   186 			/* parameter 1:	(input)	block node pointer		*/
  2   187 			/* parameter 2:	(input)	token node pointer		*/
  2   188 			/* parameter 3:	(input)	declare type		*/
  2   189 			/* return:	(output)	symbol node pointer		*/
  2   190 
  2   191 declare	create_token	entry (character (*), bit (9) aligned)
  2   192 			returns (ptr);
  2   193 			/* parameter 1:	(input)	token string		*/
  2   194 			/* parameter 2:	(input)	token type		*/
  2   195 			/* return:	(output)	token node ptr		*/
  2   196 
  2   197 declare	create_token$init_hash_table entry ();
  2   198 
  2   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  2   200 			returns (ptr);
  2   201 			/* parameter 1:	(input)	token string		*/
  2   202 			/* parameter 2:	(input)	token type		*/
  2   203 			/* parameter 3:	(input)	protected flag		*/
  2   204 			/* return:	(output)	token node ptr		*/
  2   205 
  2   206 declare	decbin		entry(character(*) aligned) reducible
  2   207 			returns(fixed bin(31));
  2   208 			/* parameter 1:	(input)	decimal character string	*/
  2   209 			/* return:	(output)	binary value		*/
  2   210 
  2   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  2   212 			returns(pointer);
  2   213 			/* parameter 1:	(input)	value			*/
  2   214 			/* parameter 2:	(input)	type			*/
  2   215 			/* parameter 3:	(input)	size			*/
  2   216 			/* parameter 4:	(input)	scale			*/
  2   217 			/* return:	(output)	reference node pointer	*/
  2   218 
  2   219 declare	declare_constant$bit entry(bit(*) aligned)
  2   220 			returns(pointer);
  2   221 			/* parameter 1:	(input)	bit			*/
  2   222 			/* return:	(output)	reference node pointer	*/
  2   223 
  2   224 declare	declare_constant$char entry(character(*) aligned)
  2   225 			returns(pointer);
  2   226 			/* parameter 1:	(input)	character			*/
  2   227 			/* return:	(output)	reference node pointer	*/
  2   228 
  2   229 declare	declare_constant$desc entry(bit(*) aligned)
  2   230 			returns(pointer);
  2   231 			/* parameter 1:	(input)	descriptor bit value	*/
  2   232 			/* return:	(output)	reference node pointer	*/
  2   233 
  2   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  2   235 			returns(pointer);
  2   236 			/* parameter 1:	(input)	integer			*/
  2   237 			/* return:	(output)	reference node pointer	*/
  2   238 
  2   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   240 			returns(pointer);
  2   241 			/* parameter 1:	(input)	block node pointer		*/
  2   242 			/* parameter 2:	(input)	statement node pointer	*/
  2   243 			/* parameter 3:	(input)	symbol node pointer		*/
  2   244 			/* parameter 4:	(input)	loc pointer		*/
  2   245 			/* parameter 5:	(input)	array descriptor bit
  2   246*						cross_section bit	*/
  2   247 			/* return:	(output)	reference node pointer	*/
  2   248 
  2   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   250 			returns(pointer);
  2   251 			/* parameter 1:	(input)	block node pointer	*/
  2   252 			/* parameter 2:	(input)	statement node pointer 	*/
  2   253 			/* parameter 3:	(input)	symbol node pointer	*/
  2   254 			/* parameter 4:	(input)	loc pointer	*/
  2   255 			/* parameter 5:	(input)	array descriptor bit
  2   256*						cross_section bit	*/
  2   257 			/* return:	(output)	reference node pointer	*/
  2   258 
  2   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   260 			returns(pointer);
  2   261 			/* parameter 1:	(input)	block node pointer		*/
  2   262 			/* parameter 2:	(input)	statement node pointer	*/
  2   263 			/* parameter 3:	(input)	symbol node pointer		*/
  2   264 			/* parameter 4:	(input)	loc pointer		*/
  2   265 			/* parameter 5:	(input)	array descriptor bit
  2   266*						cross_section bit	*/
  2   267 			/* return:	(output)	reference node pointer	*/
  2   268 
  2   269 declare	declare_integer	entry(pointer)
  2   270 			returns(pointer);
  2   271 			/* parameter 1:	(input)	block node pointer		*/
  2   272 			/* return:	(output)	reference node pointer 	*/
  2   273 
  2   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  2   275 			/* parameter 1:	(input)	picture string		*/
  2   276 			/* parameter 2:	(input)	symbol node pointer		*/
  2   277 			/* parameter 3:	(output)	error code, if any		*/
  2   278 
  2   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  2   280 			returns(pointer);
  2   281 			/* parameter 1:	(input)	picture string		*/
  2   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  2   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  2   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  2   285 			/* return:	(output)	reference node pointer	*/
  2   286 
  2   287 declare	declare_pointer	entry(pointer)
  2   288 			returns(pointer);
  2   289 			/* parameter 1:	(input)	block node pointer		*/
  2   290 			/* return:	(output)	reference node pointer	*/
  2   291 
  2   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  2   293 			returns(pointer);
  2   294 			/* parameter 1:	(input)	type			*/
  2   295 			/* parameter 2:	(input)	precision			*/
  2   296 			/* parameter 3:	(input)	scale			*/
  2   297 			/* parameter 4:	(input)	length			*/
  2   298 			/* return:	(output)	reference node pointer	*/
  2   299 
  2   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  2   301 			returns(char(120) varying);
  2   302 			/* parameter 1:	(input)	node pointer		*/
  2   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   304 			/* return:	(output)	source line id		*/
  2   305 
  2   306 declare	decode_source_id	entry(
  3     1 			1 structure unaligned,
  3     2 			  2 /* file_number */	bit(8),
  3     3 			  2 /* line_number */	bit(14),
  3     4 			  2 /* stmt_number */	bit(5),
  2   307 
  2   308 			bit(1) aligned)
  2   309 			returns(char(120) varying);
  2   310 			/* parameter 1:	(input)	source id			*/
  2   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   312 			/* return:	(output)	source line id		*/
  2   313 
  2   314 declare	error		entry(fixed bin(15),pointer,pointer);
  2   315 			/* parameter 1:	(input)	error number		*/
  2   316 			/* parameter 2:	(input)	statement node pointer or null*/
  2   317 			/* parameter 3:	(input)	token node pointer 		*/
  2   318 
  2   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  2   320 			/* parameter 1:	(input)	error number		*/
  2   321 			/* parameter 2:	(input)	statement node pointer or null*/
  2   322 			/* parameter 3:	(input)	token node pointer 		*/
  2   323 
  2   324 declare	error_		entry(fixed bin(15),
  4     1 			1 structure unaligned,
  4     2 			  2 /* file_number */	bit(8),
  4     3 			  2 /* line_number */	bit(14),
  4     4 			  2 /* stmt_number */	bit(5),
  2   325 
  2   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  2   327 			/* parameter 1:	(input)	error number		*/
  2   328 			/* parameter 2:	(input)	statement id		*/
  2   329 			/* parameter 3:	(input)	any node pointer		*/
  2   330 			/* parameter 4:	(input)	source segment		*/
  2   331 			/* parameter 5:	(input)	source starting character	*/
  2   332 			/* parameter 6:	(input)	source length		*/
  2   333 
  2   334 declare	error_$no_text	entry(fixed bin(15),
  5     1 			1 structure unaligned,
  5     2 			  2 /* file_number */	bit(8),
  5     3 			  2 /* line_number */	bit(14),
  5     4 			  2 /* stmt_number */	bit(5),
  2   335 
  2   336 			pointer);
  2   337 			/* parameter 1:	(input)	error number		*/
  2   338 			/* parameter 2:	(input)	statement id		*/
  2   339 			/* parameter 3:	(input)	any node pointer		*/
  2   340 
  2   341 declare	error_$initialize_error entry();
  2   342 
  2   343 declare	error_$finish	entry();
  2   344 
  2   345 declare	free_node		entry(pointer);
  2   346 			/* parameter 1:	any node pointer			*/
  2   347 
  2   348 declare	get_array_size	entry(pointer,fixed bin(3));
  2   349 			/* parameter 1:	(input)	symbol node pointer		*/
  2   350 			/* parameter 2:	(input)	units			*/
  2   351 
  2   352 declare	get_size		entry(pointer);
  2   353 			/* parameter 1:	(input)	symbol node pointer		*/
  2   354 
  2   355 declare	merge_attributes	external entry(pointer,pointer)
  2   356 			returns(bit(1) aligned);
  2   357 			/* parameter 1:	(input)	target symbol node pointer */
  2   358 			/* parameter 2:	(input)	source symbol node pointer */
  2   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  2   360 
  2   361 declare	optimizer		entry(pointer);
  2   362 			/* parameter 1:	(input)	root pointer		*/
  2   363 
  2   364 declare	parse_error	entry(fixed bin(15),pointer);
  2   365 			/* parameter 1:	(input)	error number		*/
  2   366 			/* parameter 2:	(input)	any node pointer		*/
  2   367 
  2   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  2   369 			/* parameter 1:	(input)	error number		*/
  2   370 			/* parameter 2:	(input)	any node pointer		*/
  2   371 
  2   372 declare	pl1_error_print$write_out
  2   373 			entry(fixed bin(15),
  6     1 			1 structure unaligned,
  6     2 			  2 /* file_number */	bit(8),
  6     3 			  2 /* line_number */	bit(14),
  6     4 			  2 /* stmt_number */	bit(5),
  2   374 
  2   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  2   376 			/* parameter 1:	(input)	error number		*/
  2   377 			/* parameter 2:	(input)	statement identification	*/
  2   378 			/* parameter 3:	(input)	any node pointer		*/
  2   379 			/* parameter 4:	(input)	source segment		*/
  2   380 			/* parameter 5:	(input)	source character index	*/
  2   381 			/* parameter 6:	(input)	source length		*/
  2   382 			/* parameter 7:	(input)	source line		*/
  2   383 
  2   384 declare	pl1_error_print$listing_segment
  2   385 			entry(fixed bin(15),
  7     1 			1 structure unaligned,
  7     2 			  2 /* file_number */	bit(8),
  7     3 			  2 /* line_number */	bit(14),
  7     4 			  2 /* stmt_number */	bit(5),
  2   386 
  2   387 			pointer);
  2   388 			/* parameter 1:	(input)	error number		*/
  2   389 			/* parameter 2:	(input)	statement identification	*/
  2   390 			/* parameter 3:	(input)	token node pointer		*/
  2   391 
  2   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  2   393 			/* parameter 1:	(input)	string			*/
  2   394 
  2   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  2   396 			/* parameter 1:	(input)	string			*/
  2   397 
  2   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  2   399 			/* parameter 1:	(input)	string			*/
  2   400 			/* parameter 2:	(input)	string length or 0		*/
  2   401 
  2   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  2   403 			/* parameter 1:	(input)	string			*/
  2   404 			/* parameter 2:	(input)	string length or 0		*/
  2   405 
  2   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  2   407 			/* parameter 1:	(input)	string pointer		*/
  2   408 			/* parameter 2:	(input)	string size		*/
  2   409 
  2   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  2   411 			/* parameter 1:	(input)	string pointer		*/
  2   412 			/* parameter 2:	(input)	string length or 0		*/
  2   413 
  2   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  2   415 			/* parameter 1:	(input)	string			*/
  2   416 			/* parameter 2:	(input)	length			*/
  2   417 
  2   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  2   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  2   420 			/* parameter 2:	(input)	line number		*/
  2   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  2   422 			/* parameter 4:	(input)	number of chars to copy	*/
  2   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  2   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  2   425 
  2   426 declare	refer_extent	entry(pointer,pointer);
  2   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  2   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  2   429 
  2   430 declare	reserve$clear	entry()
  2   431 			returns(pointer);
  2   432 			/* return:	(output)	pointer			*/
  2   433 
  2   434 declare	reserve$declare_lib	entry(fixed bin(15))
  2   435 			returns(pointer);
  2   436 			/* parameter 1:	(input)	builtin function number	*/
  2   437 			/* return:	(output)	pointer			*/
  2   438 
  2   439 declare	reserve$read_lib	entry(fixed bin(15))
  2   440 			returns(pointer);
  2   441 			/* parameter 1:	(input)	builtin function number	*/
  2   442 			/* return:	(output)	pointer			*/
  2   443 
  2   444 declare	semantic_translator	entry();
  2   445 
  2   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  2   447 			/* parameter 1:	(input)	error number		*/
  2   448 			/* parameter 2:	(input)	any node pointer		*/
  2   449 
  2   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  2   451 			/* parameter 1:	(input)	error number		*/
  2   452 			/* parameter 2:	(input)	any node pointer		*/
  2   453 
  2   454 declare	share_expression	entry(ptr)
  2   455 			returns(ptr);
  2   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  2   457 			/* return:	(output)	tree pointer or null	*/
  2   458 
  2   459 declare	token_to_binary	entry(ptr) reducible
  2   460 			returns(fixed bin(31));
  2   461 			/* parameter 1:	(input)	token node pointer		*/
  2   462 			/* return:	(output)	converted binary value	*/
  2   463 
  2   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
  1   228 
  1   229 /* END INCLUDE FILE ... semant.incl.pl1 */
      218 
      219 
  8     1 dcl	1 array			based aligned,
  8     2 	2 node_type		bit(9) unaligned,
  8     3 	2 reserved		bit(34) unaligned,
  8     4 	2 number_of_dimensions	fixed(7) unaligned,
  8     5 	2 own_number_of_dimensions	fixed(7) unaligned,
  8     6 	2 element_boundary		fixed(3) unaligned,
  8     7 	2 size_units		fixed(3) unaligned,
  8     8 	2 offset_units		fixed(3) unaligned,
  8     9 	2 interleaved		bit(1) unaligned,
  8    10 	2 c_element_size		fixed(24),
  8    11 	2 c_element_size_bits	fixed(24),
  8    12 	2 c_virtual_origin		fixed(24),
  8    13 	2 element_size		ptr unaligned,
  8    14 	2 element_size_bits		ptr unaligned,
  8    15 	2 virtual_origin		ptr unaligned,
  8    16 	2 symtab_virtual_origin	ptr unaligned,
  8    17 	2 symtab_element_size	ptr unaligned,
  8    18 	2 bounds			ptr unaligned,
  8    19 	2 element_descriptor	ptr unaligned;
  8    20 
  8    21 dcl	1 bound			based aligned,
  8    22 	2 node_type		bit(9),
  8    23 	2 c_lower			fixed(24),
  8    24 	2 c_upper			fixed(24),
  8    25 	2 c_multiplier		fixed(24),
  8    26 	2 c_desc_multiplier		fixed(24),
  8    27 	2 lower			ptr unaligned,
  8    28 	2 upper			ptr unaligned,
  8    29 	2 multiplier		ptr unaligned,
  8    30 	2 desc_multiplier		ptr unaligned,
  8    31 	2 symtab_lower		ptr unaligned,
  8    32 	2 symtab_upper		ptr unaligned,
  8    33 	2 symtab_multiplier		ptr unaligned,
  8    34 	2 next			ptr unaligned;
      220 
  9     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
  9     2 
  9     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
  9     4 
  9     5 dcl (	block_node		initial("000000001"b),
  9     6 	statement_node		initial("000000010"b),
  9     7 	operator_node		initial("000000011"b),
  9     8 	reference_node		initial("000000100"b),
  9     9 	token_node		initial("000000101"b),
  9    10 	symbol_node		initial("000000110"b),
  9    11 	context_node		initial("000000111"b),
  9    12 	array_node		initial("000001000"b),
  9    13 	bound_node		initial("000001001"b),
  9    14 	format_value_node		initial("000001010"b),
  9    15 	list_node			initial("000001011"b),
  9    16 	default_node		initial("000001100"b),
  9    17 	machine_state_node		initial("000001101"b),
  9    18 	source_node		initial("000001110"b),
  9    19 	label_node		initial("000001111"b),
  9    20 	cross_reference_node	initial("000010000"b),
  9    21 	sf_par_node		initial("000010001"b),
  9    22 	temporary_node		initial("000010010"b),
  9    23 	label_array_element_node	initial("000010011"b),
  9    24 	by_name_agg_node		initial("000010100"b))
  9    25 				bit(9) internal static aligned options(constant);
  9    26 
  9    27 dcl	1 node			based aligned,
  9    28 	2 type			unal bit(9),
  9    29 	2 source_id		unal structure,
  9    30 	  3 file_number		bit(8),
  9    31 	  3 line_number		bit(14),
  9    32 	  3 statement_number	bit(5);
  9    33 
  9    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
      221 
 10     1 /* BEGIN INCLUDE FILE ... picture_image.incl.pl1
 10     2*
 10     3*   James R. Davis  12 Mar 79
 10     4**/
 10     5 
 10     6      dcl	   1 picture_image	      aligned based,
 10     7 	     2 type	      fixed bin (8) unal,
 10     8 	     2 prec	      fixed bin (8) unal,	/* precision or length of associated value */
 10     9 	     2 scale	      fixed bin (8) unal,	/* for both fixed and float pictures,
 10    10*							=ndigits after "v" - scale_factor */
 10    11 	     2 piclength	      fixed bin (8) unal,	/* length of picture_constant.chars, <64
 10    12*							=length of normalized-picture-string */
 10    13 	     2 varlength	      fixed bin (8) unal,	/* length of pictured variable in chars, <64
 10    14*							=length of normalized_picture_string - "k" and "v" */
 10    15 	     2 scalefactor	      fixed bin (8) unal,	/* value of pict-sc-f, -256<=x<256  */
 10    16 	     2 explength	      fixed bin (8) unal,	/* length of exp field for float */
 10    17 	     2 drift_character    char (1) unal,
 10    18 	     2 chars	      char (0 refer (picture_image.piclength)) aligned;
 10    19 
 10    20      dcl	   (
 10    21 	   picture_char_type      init (24),
 10    22 	   picture_realfix_type   init (25),
 10    23 	   picture_complexfix_type
 10    24 			      init (26),
 10    25 	   picture_realflo_type   init (27),
 10    26 	   picture_complexflo_type
 10    27 			      init (28)
 10    28 	   )		      fixed bin (8) unal static internal options (constant);
 10    29 
 10    30 /* END INCLUDE FILE  ... picture_image.incl.pl1  */
      222 
 11     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
 11     2 
 11     3 dcl	1 reference		based aligned,
 11     4 	2 node_type		bit(9) unaligned,
 11     5 	2 array_ref		bit(1) unaligned,
 11     6 	2 varying_ref		bit(1) unaligned,
 11     7 	2 shared			bit(1) unaligned,
 11     8 	2 put_data_sw		bit(1) unaligned,
 11     9 	2 processed		bit(1) unaligned,
 11    10 	2 units			fixed(3) unaligned,
 11    11 	2 ref_count		fixed(17) unaligned,
 11    12 	2 c_offset		fixed(24),
 11    13 	2 c_length		fixed(24),
 11    14 	2 symbol			ptr unaligned,
 11    15 	2 qualifier		ptr unaligned,
 11    16 	2 offset			ptr unaligned,
 11    17 	2 length			ptr unaligned,
 11    18 	2 subscript_list		ptr unaligned,
 11    19 						/* these fields are used by the 645 code generator */
 11    20 	2 address			structure unaligned,
 11    21 	  3 base			bit(3),
 11    22 	  3 offset		bit(15),
 11    23 	  3 op			bit(9),
 11    24 	  3 no_address		bit(1),
 11    25 	  3 inhibit		bit(1),
 11    26 	  3 ext_base		bit(1),
 11    27 	  3 tag			bit(6),
 11    28 	2 info			structure unaligned,
 11    29 	  3 address_in		structure,
 11    30 	    4 b			dimension(0:7) bit(1),
 11    31 	    4 storage		bit(1),
 11    32 	  3 value_in		structure,
 11    33 	    4 a			bit(1),
 11    34 	    4 q			bit(1),
 11    35 	    4 aq			bit(1),
 11    36 	    4 string_aq		bit(1),
 11    37 	    4 complex_aq		bit(1),
 11    38 	    4 decimal_aq		bit(1),
 11    39 	    4 b			dimension(0:7) bit(1),
 11    40 	    4 storage		bit(1),
 11    41 	    4 indicators		bit(1),
 11    42 	    4 x			dimension(0:7) bit(1),
 11    43 	  3 other			structure,
 11    44 	    4 big_offset		bit(1),
 11    45 	    4 big_length		bit(1),
 11    46 	    4 modword_in_offset	bit(1),
 11    47 	2 data_type		fixed(5) unaligned,
 11    48 	2 bits			structure unaligned,
 11    49 	  3 padded_ref		bit(1),
 11    50 	  3 aligned_ref		bit(1),
 11    51 	  3 long_ref		bit(1),
 11    52 	  3 forward_ref		bit(1),
 11    53 	  3 ic_ref		bit(1),
 11    54 	  3 temp_ref		bit(1),
 11    55 	  3 defined_ref		bit(1),
 11    56 	  3 evaluated		bit(1),
 11    57 	  3 allocate		bit(1),
 11    58 	  3 allocated		bit(1),
 11    59 	  3 aliasable		bit(1),
 11    60 	  3 even			bit(1),
 11    61 	  3 perm_address		bit(1),
 11    62 	  3 aggregate		bit(1),
 11    63 	  3 hit_zero		bit(1),
 11    64 	  3 dont_save		bit(1),
 11    65 	  3 fo_in_qual		bit(1),
 11    66 	  3 hard_to_load		bit(1),
 11    67 	2 relocation		bit(12) unaligned,
 11    68 	2 more_bits		structure unaligned,
 11    69 	  3 substr		bit(1),
 11    70 	  3 padded_for_store_ref	bit(1),
 11    71 	  3 aligned_for_store_ref	bit(1),
 11    72 	  3 mbz			bit(15),
 11    73 	2 store_ins		bit(18) unaligned;
 11    74 
 11    75 /* END INCLUDE FILE ... reference.incl.pl1 */
      223 
 12     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
 12     2 
 12     3 dcl	1 symbol			based aligned,
 12     4 	2 node_type		bit(9) unal,
 12     5 	2 source_id		structure unal,
 12     6 	  3 file_number		bit(8),
 12     7 	  3 line_number		bit(14),
 12     8 	  3 statement_number	bit(5),
 12     9 	2 location		fixed(18) unal unsigned,
 12    10 	2 allocated		bit(1) unal,
 12    11 	2 dcl_type		bit(3) unal,
 12    12 	2 reserved		bit(6) unal,
 12    13 	2 pix			unal,
 12    14 	  3 pic_fixed		bit(1) unal,
 12    15 	  3 pic_float		bit(1) unal,
 12    16 	  3 pic_char		bit(1) unal,
 12    17 	  3 pic_scale		fixed(7) unal,
 12    18 	  3 pic_size		fixed(7) unal,
 12    19 	2 level			fixed(8) unal,
 12    20 	2 boundary		fixed(3) unal,
 12    21 	2 size_units		fixed(3) unal,
 12    22 	2 scale			fixed(7) unal,
 12    23 	2 runtime			bit(18) unal,
 12    24 	2 runtime_offset		bit(18) unal,
 12    25 	2 block_node		ptr unal,
 12    26 	2 token			ptr unal,
 12    27 	2 next			ptr unal,
 12    28 	2 multi_use		ptr unal,
 12    29 	2 cross_references		ptr unal,
 12    30 	2 initial			ptr unal,
 12    31 	2 array			ptr unal,
 12    32 	2 descriptor		ptr unal,
 12    33 	2 equivalence		ptr unal,
 12    34 	2 reference		ptr unal,
 12    35 	2 general			ptr unal,
 12    36 	2 father			ptr unal,
 12    37 	2 brother			ptr unal,
 12    38 	2 son			ptr unal,
 12    39 	2 word_size		ptr unal,
 12    40 	2 bit_size		ptr unal,
 12    41 	2 dcl_size		ptr unal,
 12    42 	2 symtab_size		ptr unal,
 12    43 	2 c_word_size		fixed(24),
 12    44 	2 c_bit_size		fixed(24),
 12    45 	2 c_dcl_size		fixed(24),
 12    46 
 12    47 	2 attributes		structure aligned,
 12    48 	  3 data_type		structure unal,
 12    49 	    4 structure		bit(1) ,
 12    50 	    4 fixed		bit(1),
 12    51 	    4 float		bit(1),
 12    52 	    4 bit			bit(1),
 12    53 	    4 char		bit(1),
 12    54 	    4 ptr			bit(1),
 12    55 	    4 offset		bit(1),
 12    56 	    4 area		bit(1),
 12    57 	    4 label		bit(1),
 12    58 	    4 entry		bit(1),
 12    59 	    4 file		bit(1),
 12    60 	    4 arg_descriptor	bit(1),
 12    61 	    4 storage_block		bit(1),
 12    62 	    4 explicit_packed	bit(1), /* options(packed) */
 12    63 	    4 condition		bit(1),
 12    64 	    4 format		bit(1),
 12    65 	    4 builtin		bit(1),
 12    66 	    4 generic		bit(1),
 12    67 	    4 picture		bit(1),
 12    68 
 12    69 	  3 misc_attributes		structure unal,
 12    70 	    4 dimensioned		bit(1),
 12    71 	    4 initialed		bit(1),
 12    72 	    4 aligned		bit(1),
 12    73 	    4 unaligned		bit(1),
 12    74 	    4 signed		bit(1),
 12    75 	    4 unsigned		bit(1),
 12    76 	    4 precision		bit(1),
 12    77 	    4 varying		bit(1),
 12    78 	    4 local		bit(1),
 12    79 	    4 decimal		bit(1),
 12    80 	    4 binary		bit(1),
 12    81 	    4 real		bit(1),
 12    82 	    4 complex		bit(1),
 12    83 	    4 variable		bit(1),
 12    84 	    4 reducible		bit(1),
 12    85 	    4 irreducible		bit(1),
 12    86 	    4 returns		bit(1),
 12    87 	    4 position		bit(1),
 12    88 	    4 internal		bit(1),
 12    89 	    4 external		bit(1),
 12    90 	    4 like		bit(1),
 12    91 	    4 member		bit(1),
 12    92 	    4 non_varying		bit(1),
 12    93 	    4 options		bit(1),
 12    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
 12    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
 12    96 
 12    97 	  3 storage_class		structure unal,
 12    98 	    4 auto		bit(1),
 12    99 	    4 based		bit(1),
 12   100 	    4 static		bit(1),
 12   101 	    4 controlled		bit(1),
 12   102 	    4 defined		bit(1),
 12   103 	    4 parameter		bit(1),
 12   104 	    4 param_desc		bit(1),
 12   105 	    4 constant		bit(1),
 12   106 	    4 temporary		bit(1),
 12   107 	    4 return_value		bit(1),
 12   108 
 12   109 	  3 file_attributes		structure unal,
 12   110 	    4 print		bit(1),
 12   111 	    4 input		bit(1),
 12   112 	    4 output		bit(1),
 12   113 	    4 update		bit(1),
 12   114 	    4 stream		bit(1),
 12   115 	    4 reserved_1		bit(1),
 12   116 	    4 record		bit(1),
 12   117 	    4 sequential		bit(1),
 12   118 	    4 direct		bit(1),
 12   119 	    4 interactive		bit(1),		/* env(interactive) */
 12   120 	    4 reserved_2		bit(1),
 12   121 	    4 reserved_3		bit(1),
 12   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
 12   123 	    4 keyed		bit(1),
 12   124 	    4 reserved_4		bit(1),
 12   125 	    4 environment		bit(1),
 12   126 
 12   127 	  3 compiler_developed	structure unal,
 12   128 	    4 aliasable		bit(1),
 12   129 	    4 packed		bit(1),
 12   130 	    4 passed_as_arg		bit(1),
 12   131 	    4 allocate		bit(1),
 12   132 	    4 set			bit(1),
 12   133 	    4 exp_extents		bit(1),
 12   134 	    4 refer_extents		bit(1),
 12   135 	    4 star_extents		bit(1),
 12   136 	    4 isub		bit(1),
 12   137 	    4 put_in_symtab		bit(1),
 12   138 	    4 contiguous		bit(1),
 12   139 	    4 put_data		bit(1),
 12   140 	    4 overlayed		bit(1),
 12   141 	    4 error		bit(1),
 12   142 	    4 symtab_processed	bit(1),
 12   143 	    4 overlayed_by_builtin	bit(1),
 12   144 	    4 defaulted		bit(1),
 12   145 	    4 connected		bit(1);
 12   146 
 12   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
      224 
      225 
      226 	end compare_declaration;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/31/89  1338.4  compare_declaration.pl1           >spec>install>MR12.3-1066>compare_declaration.pl1
218          1    07/21/80  1546.3  semant.incl.pl1                   >ldd>include>semant.incl.pl1
1-228        2    07/31/89  1332.6  language_utility.incl.pl1         >spec>install>MR12.3-1066>language_utility.incl.pl1
2-307        3    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-325        4    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-335        5    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-374        6    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-386        7    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
220          8    05/06/74  1741.6  array.incl.pl1                    >ldd>include>array.incl.pl1
221          9    07/21/80  1546.3  nodes.incl.pl1                    >ldd>include>nodes.incl.pl1
222         10    06/28/79  1204.8  picture_image.incl.pl1            >ldd>include>picture_image.incl.pl1
223         11    07/21/80  1546.3  reference.incl.pl1                >ldd>include>reference.incl.pl1
224         12    12/07/83  1701.7  symbol.incl.pl1                   >ldd>include>symbol.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
a                               000104 automatic       pointer                  dcl 15 set ref 37* 45* 46 62 63 64 65 66 69 69 72 75
                                                                                  77 77 82 84 87 87 87 109 118 125 130 133 140 144
                                                                                  192 194
a_reference                     000125 automatic       bit(1)                   dcl 21 set ref 39* 47* 58 87 102 109 128
aligned                  31(21)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 ref 66 66
array                                  based           structure                level 1 dcl 8-1 in procedure "compare_declaration"
array                    12            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 12-3 in procedure
                                                                                  "compare_declaration" ref 114 118 125 125 130 130
                                                                                  133 133 136 138 140 141
array_bit                       000124 automatic       bit(1)                   dcl 21 set ref 38* 46* 53* 53 58* 58 87 93 109 120*
                                                                                  123
array_ref                 0(09)        based           bit(1)                   level 2 packed packed unaligned dcl 11-3 ref 38 53
as                              000114 automatic       pointer                  dcl 15 set ref 194* 197 201* 204* 204
asize                           000100 automatic       pointer                  dcl 15 set ref 27* 82* 89* 102 102*
attributes               31            based           structure                level 2 dcl 12-3
b                               000106 automatic       pointer                  dcl 15 set ref 52* 57* 58 62 63 64 65 66 72 75 77 83
                                                                                  85 93 93 93 109 114 114 125 130 133 136 138 141
                                                                                  144 195
b_reference                     000126 automatic       bit(1)                   dcl 21 set ref 54* 59* 93 102
ba                              000110 automatic       pointer                  dcl 15 set ref 140* 143 146 147 149 155 159 161 163
                                                                                  168 174 178 180 182 187* 187
bb                              000112 automatic       pointer                  dcl 15 set ref 141* 146 147 149 151 153 155 163 168
                                                                                  170 172 174 182 188* 188
binary                   31(29)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 ref 63 63
bit                      31(03)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 ref 69 87
                                                                                  93
bound                                  based           structure                level 1 dcl 8-21
bounds                   12            based           pointer                  level 2 packed packed unaligned dcl 8-1 ref 140 141
brother                  20            based           pointer                  level 2 packed packed unaligned dcl 12-3 ref 204 205
bs                              000116 automatic       pointer                  dcl 15 set ref 195* 198 201* 205* 205 208
bsize                           000102 automatic       pointer                  dcl 15 set ref 27* 83* 95* 102 102*
c_asize                         000120 automatic       fixed bin(31,0)          dcl 17 set ref 28* 84* 90* 99
c_bsize                         000121 automatic       fixed bin(31,0)          dcl 17 set ref 28* 85* 96* 99
c_dcl_size               30            based           fixed bin(24,0)          level 2 dcl 12-3 ref 84 85
c_length                  2            based           fixed bin(24,0)          level 2 dcl 11-3 ref 90 96
c_lower                   1            based           fixed bin(24,0)          level 2 dcl 8-21 ref 146 146
c_upper                   2            based           fixed bin(24,0)          level 2 dcl 8-21 ref 147 147
char                     31(04)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 ref 69 87
                                                                                  93
compare_declaration             000010 constant        entry                    external dcl 1-31 ref 201
compare_expression              000012 constant        entry                    external dcl 2-48 ref 102 163 182
compiler_developed       32(35)        based           structure                level 3 packed packed unaligned dcl 12-3
constant                 32(16)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 ref 153 161
                                                                                  172 180
data_type                31            based           structure                level 3 packed packed unaligned dcl 12-3 ref 62 62
dcl_size                 24            based           pointer                  level 2 packed packed unaligned dcl 12-3 ref 82 83
dimensioned              31(19)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 ref 46 58
                                                                                  109 109 114
general                  16            based           pointer                  level 2 packed packed unaligned dcl 12-3 ref 77 77
i                               000122 automatic       fixed bin(17,0)          dcl 19 set ref 143*
ignore_aligned                         parameter       bit(1)                   dcl 23 ref 11 66
initial                  11            based           pointer                  level 2 packed packed unaligned dcl 12-3 ref 77 77
interleaved               1(35)        based           bit(1)                   level 2 packed packed unaligned dcl 8-1 ref 133 133
length                    6            based           pointer                  level 2 packed packed unaligned dcl 11-3 ref 89 95
lower                     5            based           pointer                  level 2 packed packed unaligned dcl 8-21 ref 149 149
                                                                                  151 153 155 155 159 161 163 163
misc_attributes          31(19)        based           structure                level 3 packed packed unaligned dcl 12-3
ndims                           000123 automatic       fixed bin(17,0)          dcl 19 set ref 136* 138* 143
next                     14            based           pointer                  level 2 packed packed unaligned dcl 8-21 ref 187 188
node                                   based           structure                level 1 dcl 9-27
null                                                   builtin function         dcl 25 ref 27 30 30 143 149 149 155 155 168 168 174
                                                                                  174 197 198 208
number_of_dimensions      1(07)        based           fixed bin(7,0)           level 2 packed packed unaligned dcl 8-1 ref 130 130
                                                                                  136
own_number_of_dimensions
                          1(15)        based           fixed bin(7,0)           level 2 packed packed unaligned dcl 8-1 ref 114 118
                                                                                  125 125 138
pa                                     parameter       pointer                  dcl 15 ref 11 29 30 32 37 38 45 89 90
pb                                     parameter       pointer                  dcl 15 ref 11 29 30 50 52 53 57 95 96
piclength                 0(27)        based           fixed bin(8,0)           level 2 packed packed unaligned dcl 10-6 ref 77 77
picture                  31(18)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 ref 77
picture_image                          based           structure                level 1 dcl 10-6 ref 77 77
real                     31(30)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 ref 64 64
reference                              based           structure                level 1 dcl 11-3
reference_node                         constant        bit(9)                   initial dcl 9-5 ref 32 50 151 159 170 178
scale                     2(28)        based           fixed bin(7,0)           level 2 packed packed unaligned dcl 12-3 ref 65 65
son                      21            based           pointer                  level 2 packed packed unaligned dcl 12-3 ref 194 195
star_extents             33(06)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 ref 144 144
storage_class            32(09)        based           structure                level 3 packed packed unaligned dcl 12-3
string                                                 builtin function         dcl 25 ref 62 62
structure                31            based           bit(1)                   level 4 packed packed unaligned dcl 12-3 ref 192
symbol                                 based           structure                level 1 dcl 12-3 in procedure "compare_declaration"
symbol                    3            based           pointer                  level 2 in structure "reference" packed packed
                                                                                  unaligned dcl 11-3 in procedure
                                                                                  "compare_declaration" ref 37 52 77 77 153 161 172
                                                                                  180
type                                   based           bit(9)                   level 2 packed packed unaligned dcl 9-27 ref 32 50
                                                                                  151 159 170 178
unsigned                 31(24)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 ref 72 72
unspec                                                 builtin function         dcl 25 ref 77 77
upper                     6            based           pointer                  level 2 packed packed unaligned dcl 8-21 ref 168 168
                                                                                  170 172 174 174 178 180 182 182
varying                  31(26)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 ref 75 75
                                                                                  87 93

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
adjust_count                    000000 constant        entry                    external dcl 2-20
alloc_semantics                 000000 constant        entry                    external dcl 1-7
alloc_semantics$init_only       000000 constant        entry                    external dcl 1-12
array_node                             internal static bit(9)                   initial dcl 9-5
binary_to_octal_string          000000 constant        entry                    external dcl 2-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 2-43
bindec                          000000 constant        entry                    external dcl 2-23
bindec$vs                       000000 constant        entry                    external dcl 2-28
binoct                          000000 constant        entry                    external dcl 2-33
block_node                             internal static bit(9)                   initial dcl 9-5
bound_node                             internal static bit(9)                   initial dcl 9-5
builtin                         000000 constant        entry                    external dcl 1-17
by_name_agg_node                       internal static bit(9)                   initial dcl 9-5
check_star_extents              000000 constant        entry                    external dcl 1-27
constant_length                 000000 constant        entry                    external dcl 2-54
context_node                           internal static bit(9)                   initial dcl 9-5
context_processor               000000 constant        entry                    external dcl 1-38
convert                         000000 constant        entry                    external dcl 2-60
convert$from_builtin            000000 constant        entry                    external dcl 2-72
convert$to_integer              000000 constant        entry                    external dcl 2-66
convert$to_target               000000 constant        entry                    external dcl 2-88
convert$to_target_fb            000000 constant        entry                    external dcl 2-82
convert$validate                000000 constant        entry                    external dcl 2-78
copy_expression                 000000 constant        entry                    external dcl 2-94
copy_expression$copy_sons       000000 constant        entry                    external dcl 2-99
copy_unique_expression          000000 constant        entry                    external dcl 2-103
create_array                    000000 constant        entry                    external dcl 2-108
create_block                    000000 constant        entry                    external dcl 2-112
create_bound                    000000 constant        entry                    external dcl 2-118
create_context                  000000 constant        entry                    external dcl 2-122
create_cross_reference          000000 constant        entry                    external dcl 2-128
create_default                  000000 constant        entry                    external dcl 2-132
create_identifier               000000 constant        entry                    external dcl 2-136
create_label                    000000 constant        entry                    external dcl 2-140
create_list                     000000 constant        entry                    external dcl 2-147
create_operator                 000000 constant        entry                    external dcl 2-152
create_reference                000000 constant        entry                    external dcl 2-158
create_statement                000000 constant        entry                    external dcl 2-163
create_statement$prologue       000000 constant        entry                    external dcl 2-171
create_storage                  000000 constant        entry                    external dcl 2-179
create_symbol                   000000 constant        entry                    external dcl 2-184
create_token                    000000 constant        entry                    external dcl 2-191
create_token$init_hash_table    000000 constant        entry                    external dcl 2-197
create_token$protected          000000 constant        entry                    external dcl 2-199
cross_reference_node                   internal static bit(9)                   initial dcl 9-5
decbin                          000000 constant        entry                    external dcl 2-206
declare                         000000 constant        entry                    external dcl 1-41
declare_constant                000000 constant        entry                    external dcl 2-211
declare_constant$bit            000000 constant        entry                    external dcl 2-219
declare_constant$char           000000 constant        entry                    external dcl 2-224
declare_constant$desc           000000 constant        entry                    external dcl 2-229
declare_constant$integer        000000 constant        entry                    external dcl 2-234
declare_descriptor              000000 constant        entry                    external dcl 2-239
declare_descriptor$ctl          000000 constant        entry                    external dcl 2-249
declare_descriptor$param        000000 constant        entry                    external dcl 2-259
declare_integer                 000000 constant        entry                    external dcl 2-269
declare_picture                 000000 constant        entry                    external dcl 2-274
declare_picture_temp            000000 constant        entry                    external dcl 2-279
declare_pointer                 000000 constant        entry                    external dcl 2-287
declare_structure               000000 constant        entry                    external dcl 1-44
declare_temporary               000000 constant        entry                    external dcl 2-292
decode_node_id                  000000 constant        entry                    external dcl 2-300
decode_source_id                000000 constant        entry                    external dcl 2-306
default_node                           internal static bit(9)                   initial dcl 9-5
defined_reference               000000 constant        entry                    external dcl 1-47
do_semantics                    000000 constant        entry                    external dcl 1-57
error                           000000 constant        entry                    external dcl 2-314
error$omit_text                 000000 constant        entry                    external dcl 2-319
error_                          000000 constant        entry                    external dcl 2-324
error_$finish                   000000 constant        entry                    external dcl 2-343
error_$initialize_error         000000 constant        entry                    external dcl 2-341
error_$no_text                  000000 constant        entry                    external dcl 2-334
expand_assign                   000000 constant        entry                    external dcl 1-62
expand_by_name                  000000 constant        entry                    external dcl 1-71
expand_infix                    000000 constant        entry                    external dcl 1-76
expand_initial                  000000 constant        entry                    external dcl 1-84
expand_prefix                   000000 constant        entry                    external dcl 1-89
expand_primitive                000000 constant        entry                    external dcl 1-97
expression_semantics            000000 constant        entry                    external dcl 1-105
fill_refer                      000000 constant        entry                    external dcl 1-113
format_value_node                      internal static bit(9)                   initial dcl 9-5
free_node                       000000 constant        entry                    external dcl 2-345
function                        000000 constant        entry                    external dcl 1-125
generic_selector                000000 constant        entry                    external dcl 1-134
get_array_size                  000000 constant        entry                    external dcl 2-348
get_size                        000000 constant        entry                    external dcl 2-352
io_data_list_semantics          000000 constant        entry                    external dcl 1-143
io_data_list_semantics$format_list_semantics
                                000000 constant        entry                    external dcl 1-120
io_semantics                    000000 constant        entry                    external dcl 1-148
label_array_element_node               internal static bit(9)                   initial dcl 9-5
label_node                             internal static bit(9)                   initial dcl 9-5
list_node                              internal static bit(9)                   initial dcl 9-5
lookup                          000000 constant        entry                    external dcl 1-153
machine_state_node                     internal static bit(9)                   initial dcl 9-5
make_non_quick                  000000 constant        entry                    external dcl 1-162
match_arguments                 000000 constant        entry                    external dcl 1-166
merge_attributes                000000 constant        entry                    external dcl 2-355
offset_adder                    000000 constant        entry                    external dcl 1-172
operator_node                          internal static bit(9)                   initial dcl 9-5
operator_semantics              000000 constant        entry                    external dcl 1-184
optimizer                       000000 constant        entry                    external dcl 2-361
parse_error                     000000 constant        entry                    external dcl 2-364
parse_error$no_text             000000 constant        entry                    external dcl 2-368
picture_char_type                      internal static fixed bin(8,0)           initial packed unaligned dcl 10-20
picture_complexfix_type                internal static fixed bin(8,0)           initial packed unaligned dcl 10-20
picture_complexflo_type                internal static fixed bin(8,0)           initial packed unaligned dcl 10-20
picture_realfix_type                   internal static fixed bin(8,0)           initial packed unaligned dcl 10-20
picture_realflo_type                   internal static fixed bin(8,0)           initial packed unaligned dcl 10-20
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 2-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 2-372
pl1_print$for_lex               000000 constant        entry                    external dcl 2-418
pl1_print$non_varying           000000 constant        entry                    external dcl 2-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 2-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 2-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 2-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 2-414
pl1_print$varying               000000 constant        entry                    external dcl 2-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 2-395
propagate_bit                   000000 constant        entry                    external dcl 1-192
refer_extent                    000000 constant        entry                    external dcl 2-426
reserve$clear                   000000 constant        entry                    external dcl 2-430
reserve$declare_lib             000000 constant        entry                    external dcl 2-434
reserve$read_lib                000000 constant        entry                    external dcl 2-439
semantic_translator             000000 constant        entry                    external dcl 2-444
semantic_translator$abort       000000 constant        entry                    external dcl 2-446
semantic_translator$call_es     000000 constant        entry                    external dcl 1-196
semantic_translator$error       000000 constant        entry                    external dcl 2-450
sf_par_node                            internal static bit(9)                   initial dcl 9-5
share_expression                000000 constant        entry                    external dcl 2-454
simplify_expression             000000 constant        entry                    external dcl 1-205
simplify_offset                 000000 constant        entry                    external dcl 1-212
source_node                            internal static bit(9)                   initial dcl 9-5
statement_node                         internal static bit(9)                   initial dcl 9-5
subscripter                     000000 constant        entry                    external dcl 1-216
symbol_node                            internal static bit(9)                   initial dcl 9-5
temporary_node                         internal static bit(9)                   initial dcl 9-5
token_node                             internal static bit(9)                   initial dcl 9-5
token_to_binary                 000000 constant        entry                    external dcl 2-459
validate                        000000 constant        entry                    external dcl 1-225

NAMES DECLARED BY EXPLICIT CONTEXT.
compare_declaration             000015 constant        entry                    external dcl 11
exit                            001031 constant        label                    dcl 212 ref 29
fail                            001035 constant        label                    dcl 215 set ref 30 62 63 64 65 66 69 72 75 77 99 102
                                                                                  102 109 114 118 125 130 133 144 146 147 151 153
                                                                                  159 161 163 170 172 178 180 182 198 201 208

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1102        1116    1041        1112
Length      1532    1041        14         377      41           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
compare_declaration                 114 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
compare_declaration      000100 asize                       compare_declaration
                         000102 bsize                       compare_declaration
                         000104 a                           compare_declaration
                         000106 b                           compare_declaration
                         000110 ba                          compare_declaration
                         000112 bb                          compare_declaration
                         000114 as                          compare_declaration
                         000116 bs                          compare_declaration
                         000120 c_asize                     compare_declaration
                         000121 c_bsize                     compare_declaration
                         000122 i                           compare_declaration
                         000123 ndims                       compare_declaration
                         000124 array_bit                   compare_declaration
                         000125 a_reference                 compare_declaration
                         000126 b_reference                 compare_declaration

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
compare_declaration           compare_expression

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000010        27 000022        28 000025        29 000027        30 000034        32 000044        37 000051
     38 000054        39 000060        40 000062        45 000063        46 000065        47 000072        50 000073
     52 000100        53 000103        54 000107        55 000111        57 000112        58 000114        59 000125
     62 000126        63 000136        64 000151        65 000164        66 000177        69 000216        72 000222
     75 000235        77 000250        82 000317        83 000322        84 000325        85 000330        87 000333
     89 000346        90 000353        93 000355        95 000367        96 000371        99 000373       102 000376
    109 000423       114 000442       117 000451       118 000452       120 000457       123 000460       125 000462
    128 000477       130 000503       133 000514       136 000523       137 000525       138 000526       140 000530
    141 000532       143 000534       144 000547       146 000562       147 000567       149 000572       151 000600
    153 000605       155 000611       155 000612       159 000620       161 000625       163 000631       163 000632
    168 000654       170 000664       172 000671       174 000675       174 000676       178 000705       180 000712
    182 000716       182 000717       187 000742       188 000745       189 000750       192 000752       194 000756
    195 000760       197 000763       198 000770       201 000774       204 001016       205 001021       206 001024
    208 001025       212 001031       215 001035


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
