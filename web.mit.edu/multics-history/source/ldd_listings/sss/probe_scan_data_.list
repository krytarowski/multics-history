	COMPILATION LISTING OF SEGMENT !BBBJXlQLDczhLC
	Compiled by: Multics PL/I Compiler, Release 31a, of October 12, 1988
	Compiled at: Honeywell Bull, Phoenix AZ, SysM
	Compiled on: 10/24/88  1604.9 mst Mon
	    Options: table map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Bull Inc., 1988                *
        4*   *                                                         *
        5*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*   *                                                         *
        7*   * Copyright (c) 1972 by Massachusetts Institute of        *
        8*   * Technology and Honeywell Information Systems, Inc.      *
        9*   *                                                         *
       10*   *********************************************************** */
       11 
       12 
       13 
       14 
       15 /* HISTORY COMMENTS:
       16*  1) change(88-09-30,WAAnderson), approve(88-09-30,MCR7952),
       17*     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
       18*     Modified as part of C-Probe Support.
       19*                                                   END HISTORY COMMENTS */
       20 
       21 
       22 probe_scan_data_: proc;				/* CDS source */
       23 
       24 /* Modified June 83 JMAthane to add PASCAL */
       25 /* Added PASCAL_RANGE and PASCAL_ASSIGN, and associated actions 07/26/83 S. Herbst */
       26 /* Fixed to allow dots in entry names when running FORTRAN 02/15/84 S. Herbst */
       27 /* Modified April 88 Hinatsu to add C operators */
       28 
       29 	dcl     create_data_segment_	 entry (ptr, fixed bin (35));
       30 
       31 	dcl     1 cds		 aligned like cds_args;
       32 
       33 	dcl     code		 fixed bin (35);
       34 	dcl     (addr, null, size)	 builtin;
       35 	dcl     com_err_		 entry options (variable);
       36 
  1     1 /* BEGIN INCLUDE FILE ... probe_scan_data.incl.pl1  */
  1     2 
  1     3 
  1     4 
  1     5 
  1     6 /****^  HISTORY COMMENTS:
  1     7*  1) change(88-09-20,WAAnderson), approve(88-09-20,MCR7952),
  1     8*     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
  1     9*     Added info for C input action tables.
  1    10*                                                   END HISTORY COMMENTS */
  1    11 
  1    12 
  1    13 /* Modified June 83 JMAthane to add PASCAL */
  1    14 /* Added actions for COLON_CHAR_TYPE, default like OTHER_OPS_CHAR_TYPE 07/26/83 S. Herbst */
  1    15 /* Changed action(7,3) to 71 so that . + . -> ..  03/09/84 S. Herbst */
  1    16 /* Modified April 88 Hinatsu to add C char type, C action table */
  1    17 /*  and <<,>>,==,!= to the double table */
  1    18 
  1    19 
  1    20 /* for the 14 states and the 25 char types - the transfer table
  1    21*
  1    22*   whats stored here is the subscript of the label constant in
  1    23*   probe_scan_input_ to transfer to when a char of type T is read in
  1    24*   state S.
  1    25*
  1    26**/
  1    27 
  1    28 
  1    29      dcl	   1 probe_scan_data      aligned,
  1    30 	     2 pl1_char_type      (0:127) fixed bin (17) unal,
  1    31 	     2 fortran_char_type  (0:127) fixed bin (17) unal,
  1    32 	     2 cobol_char_type    (0:127) fixed bin (17) unal,
  1    33 	     2 pascal_char_type   (0:127) fixed bin (17) unal,
  1    34 	     2 c_char_type        (0:127) fixed bin (17) unal,
  1    35 	     2 operator_type
  1    36 			      (0:127) fixed bin (17) unal init
  1    37 			      (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, /* HT, NL, FF, CR */
  1    38 			      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /* Control Characters */
  1    39 			      0, 10, 0, 10, 17, 16, 15, 0, 29, 30, 3, 1, 21, 2, 13, 4, /*  !"#$%&'()*+,-./ */
  1    40 			      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 33, 7, 9, 8, 26, /* 0123456789:;<=>? */
  1    41 			      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /* @ABCDEFGHIJKLMNO */
  1    42 			      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 19, 6, 0, /* PQRSTUVWXYZ[\]^_ */
  1    43 			      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /* `abcdefghijklmno */
  1    44 			      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0), /* pqrstuvwxyz{|}~ DEL */
  1    45 	     2 pl1_action_table
  1    46 			      (14, 0:27) fixed bin (17) unal init (
  1    47 			      99, 11, 12, 14, 13, 13, 15, 15, 15, 15, 15, 20, 20, 20, 20, 30, 30, 30, 30, 30, 40, 1, 30, 13, 13, *, *, *,
  1    48 			      70, 70, 70, 70, 70, 70, 70, 71, 71, 71, 71, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, *, *, *,
  1    49 			      99, 32, 32, 32, 65, 32, 32, 32, 32, 32, 32, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 31, 32, 32, *, *, *,
  1    50 			      41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 41, 41, 41, 41, *, *, *,
  1    51 			      45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 45, 45, 47, 45, 48, 45, 45, 45, 45, *, *, *,
  1    52 			      51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, *, *, *,
  1    53 			      55, 55, 55, 71, 55, 55, 55, 55, 55, 55, 55, 21, 21, 21, 21, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, *, *, *,
  1    54 			      23, 23, 23, 24, 60, 23, 23, 23, 23, 23, 23, 22, 22, 22, 22, 22, 26, 27, 28, 26, 23, 23, 23, 23, 23, *, *, *,
  1    55 			      23, 23, 23, 90, 91, 23, 23, 23, 23, 23, 23, 22, 22, 22, 22, 22, 26, 27, 92, 26, 23, 23, 23, 23, 23, *, *, *,
  1    56 			      23, 23, 23, 90, 92, 25, 25, 23, 23, 23, 23, 22, 22, 22, 22, 22, 92, 27, 92, 92, 23, 23, 23, 23, 23, *, *, *,
  1    57 			      23, 23, 23, 90, 92, 22, 22, 23, 23, 23, 23, 22, 22, 22, 22, 22, 92, 27, 92, 92, 23, 23, 23, 23, 23, *, *, *,
  1    58 			      *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *,
  1    59 			      93, 62, 64, 64, 64, 64, 64, 64, 64, 64, 64, 61, 61, 61, 93, 93, 93, 93, 93, 93, 93, 64, 93, 64, 64, *, *, *,
  1    60 			      95, 95, 63, 95, 95, 95, 95, 95, 95, 95, 95, 61, 61, 61, 61, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, *, *, *),
  1    61 	     2 fortran_action_table (14, 0:27) fixed bin (17) unal,
  1    62 	     2 cobol_action_table (14, 0:27) fixed bin (17) unal,
  1    63 	     2 pascal_action_table (14, 0:27) fixed bin (17) unal,
  1    64 	     2 c_action_table (14, 0:27) fixed bin (17) unal,
  1    65 	     2 doubles	      (13),
  1    66 	       3 pair	      char (2),
  1    67 	       3 type	      fixed bin,
  1    68 	     2 fort_ops	      (9),
  1    69 	       3 name	      char (4) aligned,
  1    70 	       3 op_code	      fixed bin,
  1    71 	     2 pasc_ops	      (3),
  1    72 	       3 name	      char (4) aligned,
  1    73 	       3 op_code	      fixed bin;
  1    74 
  1    75 /* END INCLUDE FILE ... probe_scan_data.incl.pl1 */
       37 
       38 
       39 
       40 	cds.sections (1).p = addr (probe_scan_data);
       41 	cds.sections (1).len = size (probe_scan_data);
       42 	cds.sections (1).struct_name = "probe_scan_data";
       43 	cds.sections (2).p = null ();
       44 	cds.sections (2).len = 0;
       45 	cds.sections (2).struct_name = "";
       46 	cds.seg_name = "probe_scan_data_";
       47 	cds.num_exclude_names = 0;
       48 	cds.exclude_array_ptr = null ();
       49 	cds.switches = "0"b;
       50 	cds.switches.have_text = "1"b;
       51 
       52 
       53 	call build_data;
       54 
       55 	call create_data_segment_ (addr (cds), code);
       56 	if code ^= 0 then call com_err_ (code);
       57 	return;
       58 
       59 build_data: proc;
       60 
       61 	dcl     rank		 builtin;
       62 
       63 
       64 	doubles (1).pair = "^="; doubles (1).type = op_coder (NOT_EQUALS);
       65 	doubles (2).pair = "^<"; doubles (2).type = op_coder (NOT_LESS_THAN);
       66 	doubles (3).pair = "^>"; doubles (3).type = op_coder (NOT_GREATER_THAN);
       67 	doubles (4).pair = ">="; doubles (4).type = op_coder (NOT_LESS_THAN);
       68 	doubles (5).pair = "<="; doubles (5).type = op_coder (NOT_GREATER_THAN);
       69 	doubles (6).pair = "->"; doubles (6).type = op_coder (ARROW);
       70 	doubles (7).pair = "<>"; doubles (7).type = op_coder (NOT_EQUALS);
       71 	doubles (8).pair = ".."; doubles (8).type = op_coder (PASCAL_RANGE);
       72 	doubles (9).pair = ":="; doubles (9).type = op_coder (PASCAL_ASSIGN);
       73 /* the special cases for C doubles */
       74 	doubles (10).pair = "=="; doubles (10).type = op_coder (C_EQUAL);
       75 	doubles (11).pair = "!="; doubles (11).type = op_coder (C_NOT_EQUAL);
       76 	doubles (12).pair = "<<"; doubles (12).type = op_coder (C_LEFT_SHIFT);
       77 	doubles (13).pair = ">>"; doubles (13).type = op_coder (C_RIGHT_SHIFT);
       78 
       79 	fort_ops (1).name = "not "; fort_ops (1).op_code = op_coder (NOT_SIGN);
       80 	fort_ops (2).name = "and "; fort_ops (2).op_code = op_coder (AMPERSAND);
       81 	fort_ops (3).name = "or  "; fort_ops (3).op_code = op_coder (OR_BAR);
       82 	fort_ops (4).name = "ge  "; fort_ops (4).op_code = op_coder (NOT_LESS_THAN);
       83 	fort_ops (5).name = "le  "; fort_ops (5).op_code = op_coder (NOT_GREATER_THAN);
       84 	fort_ops (6).name = "gt  "; fort_ops (6).op_code = op_coder (GREATER_THAN);
       85 	fort_ops (7).name = "lt  "; fort_ops (7).op_code = op_coder (LESS_THAN);
       86 	fort_ops (8).name = "eq  "; fort_ops (8).op_code = op_coder (EQUALS);
       87 	fort_ops (9).name = "ne  "; fort_ops (9).op_code = op_coder (NOT_EQUALS);
       88 
       89 	pasc_ops (1).name = "not"; pasc_ops (1).op_code = op_coder (NOT_SIGN);
       90 	pasc_ops (2).name = "and"; pasc_ops (2).op_code = op_coder (AMPERSAND);
       91 	pasc_ops (3).name = "or"; pasc_ops (3).op_code = op_coder (OR_BAR);
       92 
       93 
       94 	call set_char_types;
       95 
       96 	probe_scan_data.cobol_char_type,
       97 	     probe_scan_data.fortran_char_type,
       98 	     probe_scan_data.pascal_char_type,
       99 	     probe_scan_data.c_char_type = probe_scan_data.pl1_char_type;
      100 
      101 /* now for the exceptions to the rule */
      102 
      103 	probe_scan_data.fortran_char_type (rank ("'")) = QUOTE_CHAR_TYPE;
      104 
      105 	probe_scan_data.pascal_char_type (rank ("'")) = QUOTE_CHAR_TYPE;
      106 	probe_scan_data.pascal_char_type (rank ("#")) = OTHER_OPS_CHAR_TYPE;
      107 	probe_scan_data.pascal_char_type (rank ("@")) = PASCAL_ARROW_CHAR_TYPE;
      108 	probe_scan_data.pascal_char_type (rank ("^")) = PASCAL_ARROW_CHAR_TYPE;
      109 	probe_scan_data.c_char_type (rank ("!")) = NOT_CHAR_TYPE;
      110 	probe_scan_data.c_char_type (rank ("'")) = QUOTE_CHAR_TYPE;
      111 	probe_scan_data.c_char_type (rank ("&")) = C_ADDRESS_CHAR_TYPE;
      112 	probe_scan_data.c_char_type (rank ("%")) = C_MOD_CHAR_TYPE;
      113  
      114 
      115 	probe_scan_data.cobol_action_table,
      116 	     probe_scan_data.pascal_action_table,
      117 	     probe_scan_data.fortran_action_table,
      118 	     probe_scan_data.c_action_table = probe_scan_data.pl1_action_table;
      119 
      120 /* now for the exceptions */
      121 
      122 	probe_scan_data.cobol_action_table (NAME_STATE, MINUS_CHAR_TYPE) = 36;
      123 
      124 	probe_scan_data.fortran_action_table (IN_DOT_OP_STATE, 0) = 99;
      125 	probe_scan_data.fortran_action_table (IN_DOT_OP_STATE, 1) = 59;
      126 	probe_scan_data.fortran_action_table (IN_DOT_OP_STATE, 2) = 59;
      127 	probe_scan_data.fortran_action_table (IN_DOT_OP_STATE, 3) = 58;
      128 	probe_scan_data.fortran_action_table (IN_DOT_OP_STATE, 4) = 59;
      129 	probe_scan_data.fortran_action_table (IN_DOT_OP_STATE, 5) = 59;
      130 	probe_scan_data.fortran_action_table (IN_DOT_OP_STATE, 6) = 59;
      131 	probe_scan_data.fortran_action_table (IN_DOT_OP_STATE, 7) = 59;
      132 	probe_scan_data.fortran_action_table (IN_DOT_OP_STATE, 8) = 59;
      133 	probe_scan_data.fortran_action_table (IN_DOT_OP_STATE, 9) = 59;
      134 	probe_scan_data.fortran_action_table (IN_DOT_OP_STATE, 10) = 59;
      135 	probe_scan_data.fortran_action_table (IN_DOT_OP_STATE, 11) = 59;
      136 	probe_scan_data.fortran_action_table (IN_DOT_OP_STATE, 12) = 59;
      137 	probe_scan_data.fortran_action_table (IN_DOT_OP_STATE, 13) = 59;
      138 	probe_scan_data.fortran_action_table (IN_DOT_OP_STATE, 14) = 59;
      139 	probe_scan_data.fortran_action_table (IN_DOT_OP_STATE, 15) = 57;
      140 	probe_scan_data.fortran_action_table (IN_DOT_OP_STATE, 16) = 57;
      141 	probe_scan_data.fortran_action_table (IN_DOT_OP_STATE, 17) = 57;
      142 	probe_scan_data.fortran_action_table (IN_DOT_OP_STATE, 18) = 57;
      143 	probe_scan_data.fortran_action_table (IN_DOT_OP_STATE, 19) = 57;
      144 	probe_scan_data.fortran_action_table (IN_DOT_OP_STATE, 20) = 59;
      145 	probe_scan_data.fortran_action_table (IN_DOT_OP_STATE, 21) = 59;
      146 	probe_scan_data.fortran_action_table (IN_DOT_OP_STATE, 22) = 57;
      147 	probe_scan_data.fortran_action_table (IN_DOT_OP_STATE, 23) = 59;
      148 	probe_scan_data.fortran_action_table (IN_DOT_OP_STATE, 24) = 59;
      149 	probe_scan_data.fortran_action_table (IN_DOT_OP_STATE, 25) = 59;
      150 
      151 	probe_scan_data.fortran_action_table (DOT_SEEN_STATE, LETTER_B_CHAR_TYPE) = 56;
      152 	probe_scan_data.fortran_action_table (DOT_SEEN_STATE, LETTER_E_CHAR_TYPE) = 56;
      153 	probe_scan_data.fortran_action_table (DOT_SEEN_STATE, LETTER_I_CHAR_TYPE) = 56;
      154 	probe_scan_data.fortran_action_table (DOT_SEEN_STATE, LETTER_O_CHAR_TYPE) = 56;
      155 	probe_scan_data.fortran_action_table (DOT_SEEN_STATE, LETTER_F_CHAR_TYPE) = 56;
      156 	probe_scan_data.fortran_action_table (DOT_SEEN_STATE, OTHER_LETTER_CHAR_TYPE) = 56;
      157 
      158 	probe_scan_data.pascal_action_table (NULL_STATE, PASCAL_ARROW_CHAR_TYPE) = 16;
      159 	probe_scan_data.pascal_action_table (POSSIBLE_DOUBLE_STATE, PASCAL_ARROW_CHAR_TYPE) = 71;
      160 	probe_scan_data.pascal_action_table (NAME_STATE, PASCAL_ARROW_CHAR_TYPE) = 32;
      161 	probe_scan_data.pascal_action_table (STRING_STATE, PASCAL_ARROW_CHAR_TYPE) = 41;
      162 	probe_scan_data.pascal_action_table (QUOTE_SEEN_STATE, PASCAL_ARROW_CHAR_TYPE) = 45;
      163 	probe_scan_data.pascal_action_table (BIT_STR_END_STATE, PASCAL_ARROW_CHAR_TYPE) = 51;
      164 	probe_scan_data.pascal_action_table (DOT_SEEN_STATE, PASCAL_ARROW_CHAR_TYPE) = 55;
      165 	probe_scan_data.pascal_action_table (NUMBER_PRE_DOT_STATE, PASCAL_ARROW_CHAR_TYPE) = 23;
      166 	probe_scan_data.pascal_action_table (NUMBER_POST_DOT_STATE, PASCAL_ARROW_CHAR_TYPE) = 23;
      167 	probe_scan_data.pascal_action_table (NUMBER_EXP1_STATE, PASCAL_ARROW_CHAR_TYPE) = 23;
      168 	probe_scan_data.pascal_action_table (NUMBER_EXP2_STATE, PASCAL_ARROW_CHAR_TYPE) = 23;
      169 	probe_scan_data.pascal_action_table (IN_DOT_OP_STATE, PASCAL_ARROW_CHAR_TYPE) = 0; /* undefined */
      170 	probe_scan_data.pascal_action_table (PTR_WORD_STATE, PASCAL_ARROW_CHAR_TYPE) = 64;
      171 	probe_scan_data.pascal_action_table (PTR_BIT_STATE, PASCAL_ARROW_CHAR_TYPE) = 95;
      172 	probe_scan_data.pascal_action_table (DOT_SEEN_STATE, DOT_CHAR_TYPE) = 71;
      173 	probe_scan_data.pascal_action_table (NULL_STATE, COLON_CHAR_TYPE) = 15;
      174 	probe_scan_data.pascal_action_table (POSSIBLE_DOUBLE_STATE, EQUAL_CHAR_TYPE) = 71;
      175 
      176 
      177 	probe_scan_data.c_action_table (NULL_STATE, C_ADDRESS_CHAR_TYPE) = 13;
      178 	probe_scan_data.c_action_table (POSSIBLE_DOUBLE_STATE, C_ADDRESS_CHAR_TYPE) = 70;
      179 	probe_scan_data.c_action_table (NAME_STATE, C_ADDRESS_CHAR_TYPE) = 32;
      180 	probe_scan_data.c_action_table (STRING_STATE, C_ADDRESS_CHAR_TYPE) = 41;
      181 	probe_scan_data.c_action_table (QUOTE_SEEN_STATE, C_ADDRESS_CHAR_TYPE) = 45;
      182 	probe_scan_data.c_action_table (BIT_STR_END_STATE, C_ADDRESS_CHAR_TYPE) = 51;
      183 	probe_scan_data.c_action_table (DOT_SEEN_STATE, C_ADDRESS_CHAR_TYPE) = 55;
      184 	probe_scan_data.c_action_table (NUMBER_PRE_DOT_STATE, C_ADDRESS_CHAR_TYPE) = 23;
      185 	probe_scan_data.c_action_table (NUMBER_POST_DOT_STATE, C_ADDRESS_CHAR_TYPE) = 23;
      186 	probe_scan_data.c_action_table (NUMBER_EXP1_STATE, C_ADDRESS_CHAR_TYPE) = 25;
      187 	probe_scan_data.c_action_table (NUMBER_EXP2_STATE, C_ADDRESS_CHAR_TYPE) = 22;
      188 	probe_scan_data.c_action_table (PTR_WORD_STATE, C_ADDRESS_CHAR_TYPE) = 64;
      189 	probe_scan_data.c_action_table (PTR_BIT_STATE, C_ADDRESS_CHAR_TYPE) = 95;
      190 
      191 	probe_scan_data.c_action_table (NULL_STATE, C_MOD_CHAR_TYPE) = 13;
      192 	probe_scan_data.c_action_table (POSSIBLE_DOUBLE_STATE, C_MOD_CHAR_TYPE) = 70;
      193 	probe_scan_data.c_action_table (NAME_STATE, C_MOD_CHAR_TYPE) = 32;
      194 	probe_scan_data.c_action_table (STRING_STATE, C_MOD_CHAR_TYPE) = 41;
      195 	probe_scan_data.c_action_table (QUOTE_SEEN_STATE, C_MOD_CHAR_TYPE) = 45;
      196 	probe_scan_data.c_action_table (BIT_STR_END_STATE, C_MOD_CHAR_TYPE) = 51;
      197 	probe_scan_data.c_action_table (DOT_SEEN_STATE, C_MOD_CHAR_TYPE) = 55;
      198 	probe_scan_data.c_action_table (NUMBER_PRE_DOT_STATE, C_MOD_CHAR_TYPE) = 23;
      199 	probe_scan_data.c_action_table (NUMBER_POST_DOT_STATE, C_MOD_CHAR_TYPE) = 23;
      200 	probe_scan_data.c_action_table (NUMBER_EXP1_STATE, C_MOD_CHAR_TYPE) = 25;
      201 	probe_scan_data.c_action_table (NUMBER_EXP2_STATE, C_MOD_CHAR_TYPE) = 22;
      202 	probe_scan_data.c_action_table (PTR_WORD_STATE, C_MOD_CHAR_TYPE) = 64;
      203 	probe_scan_data.c_action_table (PTR_BIT_STATE, C_MOD_CHAR_TYPE) = 95;
      204 
      205 
      206 op_coder: proc (opt) returns (fixed bin);
      207 	dcl     opt		 bit (18) aligned parameter;
      208 
      209 	dcl     (bin, substr)	 builtin;
      210 
      211 	return (bin (substr (opt, 13)));
      212      end op_coder;
      213      end build_data;
      214 
      215 set_char_types: proc;
      216 
      217 
      218 /* this proc is set off from build data because it is so boring */
      219 
      220 	probe_scan_data.pl1_char_type (0) = ILLEGAL_CHAR_TYPE; /* \000 */
      221 	probe_scan_data.pl1_char_type (1) = ILLEGAL_CHAR_TYPE; /* \001 */
      222 	probe_scan_data.pl1_char_type (2) = ILLEGAL_CHAR_TYPE; /* \002 */
      223 	probe_scan_data.pl1_char_type (3) = ILLEGAL_CHAR_TYPE; /* \003 */
      224 	probe_scan_data.pl1_char_type (4) = ILLEGAL_CHAR_TYPE; /* \004 */
      225 	probe_scan_data.pl1_char_type (5) = ILLEGAL_CHAR_TYPE; /* \005 */
      226 	probe_scan_data.pl1_char_type (6) = ILLEGAL_CHAR_TYPE; /* \006 */
      227 	probe_scan_data.pl1_char_type (7) = ILLEGAL_CHAR_TYPE; /* \007 */
      228 	probe_scan_data.pl1_char_type (8) = ILLEGAL_CHAR_TYPE; /* \010 */
      229 	probe_scan_data.pl1_char_type (9) = WHITE_SPACE_CHAR_TYPE; /* \011 */
      230 	probe_scan_data.pl1_char_type (10) = OTHER_OPS_CHAR_TYPE; /* \012 */
      231 	probe_scan_data.pl1_char_type (11) = ILLEGAL_CHAR_TYPE; /* \013 */
      232 	probe_scan_data.pl1_char_type (12) = WHITE_SPACE_CHAR_TYPE; /* \014 */
      233 	probe_scan_data.pl1_char_type (13) = OTHER_OPS_CHAR_TYPE; /* \015 */
      234 	probe_scan_data.pl1_char_type (14) = ILLEGAL_CHAR_TYPE; /* \016 */
      235 	probe_scan_data.pl1_char_type (15) = ILLEGAL_CHAR_TYPE; /* \017 */
      236 	probe_scan_data.pl1_char_type (16) = ILLEGAL_CHAR_TYPE; /* \020 */
      237 	probe_scan_data.pl1_char_type (17) = ILLEGAL_CHAR_TYPE; /* \021 */
      238 	probe_scan_data.pl1_char_type (18) = ILLEGAL_CHAR_TYPE; /* \022 */
      239 	probe_scan_data.pl1_char_type (19) = ILLEGAL_CHAR_TYPE; /* \023 */
      240 	probe_scan_data.pl1_char_type (20) = ILLEGAL_CHAR_TYPE; /* \024 */
      241 	probe_scan_data.pl1_char_type (21) = ILLEGAL_CHAR_TYPE; /* \025 */
      242 	probe_scan_data.pl1_char_type (22) = ILLEGAL_CHAR_TYPE; /* \026 */
      243 	probe_scan_data.pl1_char_type (23) = ILLEGAL_CHAR_TYPE; /* \027 */
      244 	probe_scan_data.pl1_char_type (24) = ILLEGAL_CHAR_TYPE; /* \030 */
      245 	probe_scan_data.pl1_char_type (25) = ILLEGAL_CHAR_TYPE; /* \031 */
      246 	probe_scan_data.pl1_char_type (26) = ILLEGAL_CHAR_TYPE; /* \032 */
      247 	probe_scan_data.pl1_char_type (27) = ILLEGAL_CHAR_TYPE; /* \033 */
      248 	probe_scan_data.pl1_char_type (28) = ILLEGAL_CHAR_TYPE; /* \034 */
      249 	probe_scan_data.pl1_char_type (29) = ILLEGAL_CHAR_TYPE; /* \035 */
      250 	probe_scan_data.pl1_char_type (30) = ILLEGAL_CHAR_TYPE; /* \036 */
      251 	probe_scan_data.pl1_char_type (31) = ILLEGAL_CHAR_TYPE; /* \037 */
      252 	probe_scan_data.pl1_char_type (32) = WHITE_SPACE_CHAR_TYPE; /* \040  <SPACE> */
      253 	probe_scan_data.pl1_char_type (33) = ILLEGAL_CHAR_TYPE; /* \041  ! */
      254 	probe_scan_data.pl1_char_type (34) = QUOTE_CHAR_TYPE; /* \042  " */
      255 	probe_scan_data.pl1_char_type (35) = ILLEGAL_CHAR_TYPE; /* \043  # */
      256 	probe_scan_data.pl1_char_type (36) = OTHER_LETTER_CHAR_TYPE; /* \044   $ */
      257 	probe_scan_data.pl1_char_type (37) = OTHER_LETTER_CHAR_TYPE; /* \045  % */
      258 	probe_scan_data.pl1_char_type (38) = OTHER_OPS_CHAR_TYPE; /* \046  & */
      259 	probe_scan_data.pl1_char_type (39) = ILLEGAL_CHAR_TYPE; /* \047 */
      260 	probe_scan_data.pl1_char_type (40) = LEFT_PAREN_CHAR_TYPE; /* \050 */
      261 	probe_scan_data.pl1_char_type (41) = RIGHT_PAREN_CHAR_TYPE; /* \051 */
      262 	probe_scan_data.pl1_char_type (42) = OTHER_OPS_CHAR_TYPE; /* \052 */
      263 	probe_scan_data.pl1_char_type (43) = PLUS_CHAR_TYPE; /* \053 */
      264 	probe_scan_data.pl1_char_type (44) = OTHER_OPS_CHAR_TYPE; /* \054 , */
      265 	probe_scan_data.pl1_char_type (45) = MINUS_CHAR_TYPE; /* \055 */
      266 	probe_scan_data.pl1_char_type (46) = DOT_CHAR_TYPE; /* \056 */
      267 	probe_scan_data.pl1_char_type (47) = OTHER_OPS_CHAR_TYPE; /* \057 / */
      268 	probe_scan_data.pl1_char_type (48) = ZERO_CHAR_TYPE; /* \060  0 */
      269 	probe_scan_data.pl1_char_type (49) = RADIX_DIGITS_CHAR_TYPE; /* \061 */
      270 	probe_scan_data.pl1_char_type (50) = RADIX_DIGITS_CHAR_TYPE; /* \062 */
      271 	probe_scan_data.pl1_char_type (51) = RADIX_DIGITS_CHAR_TYPE; /* \063 */
      272 	probe_scan_data.pl1_char_type (52) = RADIX_DIGITS_CHAR_TYPE; /* \064 */
      273 	probe_scan_data.pl1_char_type (53) = OCTAL_DIGITS_CHAR_TYPE; /* \065 */
      274 	probe_scan_data.pl1_char_type (54) = OCTAL_DIGITS_CHAR_TYPE; /* \066 */
      275 	probe_scan_data.pl1_char_type (55) = OCTAL_DIGITS_CHAR_TYPE; /* \067 */
      276 	probe_scan_data.pl1_char_type (56) = OTHER_DIGITS_CHAR_TYPE; /* \070 */
      277 	probe_scan_data.pl1_char_type (57) = OTHER_DIGITS_CHAR_TYPE; /* \071 */
      278 	probe_scan_data.pl1_char_type (58) = COLON_CHAR_TYPE; /* \072 */
      279 	probe_scan_data.pl1_char_type (59) = OTHER_OPS_CHAR_TYPE; /* \073 */
      280 	probe_scan_data.pl1_char_type (60) = LESS_CHAR_TYPE; /* \074 */
      281 	probe_scan_data.pl1_char_type (61) = EQUAL_CHAR_TYPE; /* \075 */
      282 	probe_scan_data.pl1_char_type (62) = GREATER_CHAR_TYPE; /* \076 */
      283 	probe_scan_data.pl1_char_type (63) = OTHER_OPS_CHAR_TYPE; /* \077 */
      284 	probe_scan_data.pl1_char_type (64) = ILLEGAL_CHAR_TYPE; /* \100 */
      285 	probe_scan_data.pl1_char_type (65) = OTHER_LETTER_CHAR_TYPE; /* \101  A */
      286 	probe_scan_data.pl1_char_type (66) = OTHER_LETTER_CHAR_TYPE; /* \102  B */
      287 	probe_scan_data.pl1_char_type (67) = OTHER_LETTER_CHAR_TYPE; /* \103  C */
      288 	probe_scan_data.pl1_char_type (68) = OTHER_LETTER_CHAR_TYPE; /* \104 */
      289 	probe_scan_data.pl1_char_type (69) = OTHER_LETTER_CHAR_TYPE; /* \105 */
      290 	probe_scan_data.pl1_char_type (70) = OTHER_LETTER_CHAR_TYPE; /* \106 */
      291 	probe_scan_data.pl1_char_type (71) = OTHER_LETTER_CHAR_TYPE; /* \107 */
      292 	probe_scan_data.pl1_char_type (72) = OTHER_LETTER_CHAR_TYPE; /* \110 */
      293 	probe_scan_data.pl1_char_type (73) = OTHER_LETTER_CHAR_TYPE; /* \111 */
      294 	probe_scan_data.pl1_char_type (74) = OTHER_LETTER_CHAR_TYPE; /* \112 */
      295 	probe_scan_data.pl1_char_type (75) = OTHER_LETTER_CHAR_TYPE; /* \113 */
      296 	probe_scan_data.pl1_char_type (76) = OTHER_LETTER_CHAR_TYPE; /* \114 */
      297 	probe_scan_data.pl1_char_type (77) = OTHER_LETTER_CHAR_TYPE; /* \115 */
      298 	probe_scan_data.pl1_char_type (78) = OTHER_LETTER_CHAR_TYPE; /* \116 */
      299 	probe_scan_data.pl1_char_type (79) = OTHER_LETTER_CHAR_TYPE; /* \117 */
      300 	probe_scan_data.pl1_char_type (80) = OTHER_LETTER_CHAR_TYPE; /* \120 */
      301 	probe_scan_data.pl1_char_type (81) = OTHER_LETTER_CHAR_TYPE; /* \121 */
      302 	probe_scan_data.pl1_char_type (82) = OTHER_LETTER_CHAR_TYPE; /* \122 */
      303 	probe_scan_data.pl1_char_type (83) = OTHER_LETTER_CHAR_TYPE; /* \123 */
      304 	probe_scan_data.pl1_char_type (84) = OTHER_LETTER_CHAR_TYPE; /* \124 */
      305 	probe_scan_data.pl1_char_type (85) = OTHER_LETTER_CHAR_TYPE; /* \125 */
      306 	probe_scan_data.pl1_char_type (86) = OTHER_LETTER_CHAR_TYPE; /* \126 */
      307 	probe_scan_data.pl1_char_type (87) = OTHER_LETTER_CHAR_TYPE; /* \127 */
      308 	probe_scan_data.pl1_char_type (88) = OTHER_LETTER_CHAR_TYPE; /* \130 */
      309 	probe_scan_data.pl1_char_type (89) = OTHER_LETTER_CHAR_TYPE; /* \131 */
      310 	probe_scan_data.pl1_char_type (90) = OTHER_LETTER_CHAR_TYPE; /* \132 */
      311 	probe_scan_data.pl1_char_type (91) = OTHER_OPS_CHAR_TYPE; /* \133 */
      312 	probe_scan_data.pl1_char_type (92) = ILLEGAL_CHAR_TYPE; /* \134 */
      313 	probe_scan_data.pl1_char_type (93) = OTHER_OPS_CHAR_TYPE; /* \135 */
      314 	probe_scan_data.pl1_char_type (94) = NOT_CHAR_TYPE; /* \136 */
      315 	probe_scan_data.pl1_char_type (95) = OTHER_LETTER_CHAR_TYPE; /* \137 */
      316 	probe_scan_data.pl1_char_type (96) = ILLEGAL_CHAR_TYPE; /* \140 */
      317 	probe_scan_data.pl1_char_type (97) = OTHER_LETTER_CHAR_TYPE; /* \141  a */
      318 	probe_scan_data.pl1_char_type (98) = LETTER_B_CHAR_TYPE; /* \142 */
      319 	probe_scan_data.pl1_char_type (99) = OTHER_LETTER_CHAR_TYPE; /* \143 */
      320 	probe_scan_data.pl1_char_type (100) = OTHER_LETTER_CHAR_TYPE; /* \144 */
      321 	probe_scan_data.pl1_char_type (101) = LETTER_E_CHAR_TYPE; /* \145 */
      322 	probe_scan_data.pl1_char_type (102) = LETTER_F_CHAR_TYPE; /* \146 */
      323 	probe_scan_data.pl1_char_type (103) = OTHER_LETTER_CHAR_TYPE; /* \147 */
      324 	probe_scan_data.pl1_char_type (104) = OTHER_LETTER_CHAR_TYPE; /* \150 */
      325 	probe_scan_data.pl1_char_type (105) = LETTER_I_CHAR_TYPE; /* \151 */
      326 	probe_scan_data.pl1_char_type (106) = OTHER_LETTER_CHAR_TYPE; /* \152 */
      327 	probe_scan_data.pl1_char_type (107) = OTHER_LETTER_CHAR_TYPE; /* \153 */
      328 	probe_scan_data.pl1_char_type (108) = OTHER_LETTER_CHAR_TYPE; /* \154 */
      329 	probe_scan_data.pl1_char_type (109) = OTHER_LETTER_CHAR_TYPE; /* \155 */
      330 	probe_scan_data.pl1_char_type (110) = OTHER_LETTER_CHAR_TYPE; /* \156 */
      331 	probe_scan_data.pl1_char_type (111) = LETTER_O_CHAR_TYPE; /* \157 */
      332 	probe_scan_data.pl1_char_type (112) = OTHER_LETTER_CHAR_TYPE; /* \160 */
      333 	probe_scan_data.pl1_char_type (113) = OTHER_LETTER_CHAR_TYPE; /* \161 */
      334 	probe_scan_data.pl1_char_type (114) = OTHER_LETTER_CHAR_TYPE; /* \162 */
      335 	probe_scan_data.pl1_char_type (115) = OTHER_LETTER_CHAR_TYPE; /* \163 */
      336 	probe_scan_data.pl1_char_type (116) = OTHER_LETTER_CHAR_TYPE; /* \164 */
      337 	probe_scan_data.pl1_char_type (117) = OTHER_LETTER_CHAR_TYPE; /* \165 */
      338 	probe_scan_data.pl1_char_type (118) = OTHER_LETTER_CHAR_TYPE; /* \166 */
      339 	probe_scan_data.pl1_char_type (119) = OTHER_LETTER_CHAR_TYPE; /* \167 */
      340 	probe_scan_data.pl1_char_type (120) = OTHER_LETTER_CHAR_TYPE; /* \170 */
      341 	probe_scan_data.pl1_char_type (121) = OTHER_LETTER_CHAR_TYPE; /* \171 */
      342 	probe_scan_data.pl1_char_type (122) = OTHER_LETTER_CHAR_TYPE; /* \172 */
      343 	probe_scan_data.pl1_char_type (123) = ILLEGAL_CHAR_TYPE; /* \173 */
      344 	probe_scan_data.pl1_char_type (124) = VERTICAL_BAR_CHAR_TYPE; /* \174 */
      345 	probe_scan_data.pl1_char_type (125) = ILLEGAL_CHAR_TYPE; /* \175 */
      346 	probe_scan_data.pl1_char_type (126) = ILLEGAL_CHAR_TYPE; /* \176 */
      347 	probe_scan_data.pl1_char_type (127) = ILLEGAL_CHAR_TYPE; /* \177 */
      348 
      349 
      350      end set_char_types;
      351 
      352 
  2     1 /* BEGIN INCLUDE FILE cds_args.incl.pl1 */
  2     2 
  2     3 dcl 1 cds_args based aligned,
  2     4     2 sections (2),
  2     5       3 p ptr,					/* pointer to data for text/static section */
  2     6       3 len fixed bin (18),				/* size of text/static section */
  2     7       3 struct_name char (32),			/* name of declared structure for this section */
  2     8     2 seg_name char (32),				/* name to create segment by */
  2     9     2 num_exclude_names fixed bin,			/* number of names in exclude array */
  2    10     2 exclude_array_ptr ptr,				/* pointer to array of exclude names */
  2    11     2 switches,					/* control switches */
  2    12       3 defs_in_link bit (1) unal,			/* says put defs in linkage */
  2    13       3 separate_static bit (1) unal,			/* says separate static section is wanted */
  2    14       3 have_text bit (1) unal,			/* ON if text section given */
  2    15       3 have_static bit (1) unal,			/* ON if static section given */
  2    16       3 pad bit (32) unal;
  2    17 
  2    18 dcl  exclude_names (1) char (32) based;			/* pointed to be cds_args.exclude_array_ptr */
  2    19 
  2    20 /* END INCLUDE FILE cds_args.incl.pl1 */
      353 
      354 
      355 
      356 /* ;;;;;;; */
      357 
  3     1 /* BEGIN INCLUDE FILE ... probe_operators.incl.pl1 */
  3     2 
  3     3 
  3     4 
  3     5 /****^  HISTORY COMMENTS:
  3     6*  1) change(88-09-20,WAAnderson), approve(88-09-20,MCR7952),
  3     7*     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
  3     8*     Added new C operators.
  3     9*                                                   END HISTORY COMMENTS */
  3    10 
  3    11 
  3    12 /* These are the operator.types for each defined operator */
  3    13 /* Modified June 83 JMAthane for PASCAL_ARROW new operator */
  3    14 /* Added PASCAL_RANGE and PASCAL_ASSIGN 07/26/83 S. Herbst */
  3    15 /* Modified April 88 Hinatsu Addition of C types */
  3    16 
  3    17      dcl	   (PLUS		      init ("400001"b3), MINUS init ("400002"b3),
  3    18 	   TIMES		      init ("400003"b3), SLASH init ("400004"b3),
  3    19 	   OR_BAR		      init ("400005"b3), NOT_SIGN init ("400006"b3),
  3    20 	   LESS_THAN	      init ("400007"b3), GREATER_THAN init ("400010"b3),
  3    21 	   EQUALS		      init ("400011"b3), NOT_EQUALS init ("400012"b3),
  3    22 	   NOT_GREATER_THAN	      init ("400013"b3), NOT_LESS_THAN init ("400014"b3),
  3    23 	   PERIOD		      init ("400015"b3), COLON init ("400016"b3),
  3    24 	   AMPERSAND	      init ("400017"b3), PERCENT init ("400020"b3),
  3    25 	   DOLLAR_SIGN	      init ("400021"b3), LEFT_BRACKET init ("400022"b3),
  3    26 	   RIGHT_BRACKET	      init ("400023"b3), ARROW init ("400024"b3),
  3    27 	   COMMA		      init ("400025"b3), QUESTION_MARK init ("400026"b3),
  3    28 	   PASCAL_ARROW	      init ("400027"b3), PASCAL_RANGE init ("400030"b3),
  3    29 	   PASCAL_ASSIGN	      init ("400031"b3),
  3    30 
  3    31 /* Additons to support C types */
  3    32 	   C_LEFT_SHIFT           init ("400032"b3), C_RIGHT_SHIFT init ("400033"b3),
  3    33 
  3    34 /* operator 28 are left for future expansion */
  3    35 
  3    36 	   LEFT_PAREN	      init ("400035"b3), RIGHT_PAREN init ("400036"b3),
  3    37              C_EQUAL                init ("400037"b3), C_NOT_EQUAL init ("400040"b3),
  3    38 	   SEMI_COLON	      init ("400041"b3), NEW_LINE init ("400042"b3),
  3    39 	   C_INDIRECTION          init ("400034"b3)
  3    40 
  3    41 	   )		      bit (18) aligned internal static options (constant);
  3    42 
  3    43      dcl	   OPERATOR_VALUES	      (0:34) char (4) varying internal static options (constant) init
  3    44 			      ("????", "+", "-", "*", "/", "|", "^", "<",
  3    45 			      ">", "=", "^=", "<=", ">=", ".", ":", "&",
  3    46 			      "%", "$", "[", "]", "->", ",", "?", "^",
  3    47 			      "..", ":=", "<<", ">>", "*", "(", ")",
  3    48 			      "==", "!=", ";","
  3    49 ");
  3    50 
  3    51 /* END INCLUDE FILE ... probe_operators.incl.pl1 */
      358 
      359 
  4     1 /* BEGIN INCLUDE FILE ... probe_scan_dcls.incl.pl1
  4     2*
  4     3*   James R. Davis 27 July 79
  4     4*   Modified JMAthane June 83 to add PASCAL_ARROW char type
  4     5*   Added COLON_CHAR_TYPE to be used in Pascal operator ":=" 07/26/83 S. Herbst
  4     6*   Modified April 88 Hinatsu to add the C_ADDRESS_CHAR_TYPE, and
  4     7*    C_MOD_CHAR_TYPE to support C
  4     8*
  4     9*   The names of all the  STATES the Finite State Machine can assume */
  4    10 
  4    11      
  4    12 
  4    13 /****^  HISTORY COMMENTS:
  4    14*  1) change(88-09-20,WAAnderson), approve(88-09-20,MCR7952),
  4    15*     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
  4    16*     Added declarations for C input action tables.
  4    17*                                                   END HISTORY COMMENTS */
  4    18 
  4    19 
  4    20 dcl	   (NULL_STATE	      init (1),
  4    21 	   POSSIBLE_DOUBLE_STATE  init (2),
  4    22 	   NAME_STATE	      init (3),
  4    23 	   STRING_STATE	      init (4),
  4    24 	   QUOTE_SEEN_STATE	      init (5),
  4    25 	   BIT_STR_END_STATE      init (6),
  4    26 	   DOT_SEEN_STATE	      init (7),
  4    27 	   NUMBER_PRE_DOT_STATE   init (8),
  4    28 	   NUMBER_POST_DOT_STATE  init (9),
  4    29 	   NUMBER_EXP1_STATE      init (10),
  4    30 	   NUMBER_EXP2_STATE      init (11),
  4    31 	   IN_DOT_OP_STATE	      init (12),
  4    32 	   PTR_WORD_STATE	      init (13),
  4    33 	   PTR_BIT_STATE	      init (14))
  4    34 			      fixed bin internal static options (constant);
  4    35 
  4    36 /* The types of single character that are recognized: */
  4    37 
  4    38      dcl	   (ILLEGAL_CHAR_TYPE     init (0),
  4    39 	   LEFT_PAREN_CHAR_TYPE   init (1),
  4    40 	   RIGHT_PAREN_CHAR_TYPE  init (2),
  4    41 	   DOT_CHAR_TYPE	      init (3),
  4    42 	   VERTICAL_BAR_CHAR_TYPE init (4),
  4    43 	   PLUS_CHAR_TYPE	      init (5),
  4    44 	   MINUS_CHAR_TYPE	      init (6),
  4    45 	   GREATER_CHAR_TYPE      init (7),
  4    46 	   LESS_CHAR_TYPE	      init (8),
  4    47 	   EQUAL_CHAR_TYPE	      init (9),
  4    48 	   NOT_CHAR_TYPE	      init (10),		/* ^ */
  4    49 	   ZERO_CHAR_TYPE	      init (11),		/* 0 */
  4    50 	   RADIX_DIGITS_CHAR_TYPE init (12),		/* 1-4 can be used after "..."b */
  4    51 	   OCTAL_DIGITS_CHAR_TYPE init (13),		/* 5 - 7 */
  4    52 	   OTHER_DIGITS_CHAR_TYPE init (14),		/* 8-9 */
  4    53 	   LETTER_B_CHAR_TYPE     init (15),		/* speaking words of wisdom */
  4    54 	   LETTER_E_CHAR_TYPE     init (16),
  4    55 	   LETTER_I_CHAR_TYPE     init (17),
  4    56 	   LETTER_O_CHAR_TYPE     init (18),
  4    57 	   LETTER_F_CHAR_TYPE     init (19),
  4    58 	   QUOTE_CHAR_TYPE	      init (20),		/* ",  and ' for FORTRAN */
  4    59 	   WHITE_SPACE_CHAR_TYPE  init (21),		/* SP, CR, HT */
  4    60 	   OTHER_LETTER_CHAR_TYPE init (22),
  4    61 	   COLON_CHAR_TYPE	      init (23),		/* : */
  4    62 	   OTHER_OPS_CHAR_TYPE    init (24),
  4    63 	   PASCAL_ARROW_CHAR_TYPE init (25),
  4    64              C_ADDRESS_CHAR_TYPE    init (26),
  4    65              C_MOD_CHAR_TYPE        init (27)) fixed bin (17) unal internal static options (constant);
  4    66 
  4    67 /* END INCLUDE FILE ... probe_scan_dcls.incl.pl1 */
      360 
      361 
      362      end probe_scan_data_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/24/88  1344.0  !BBBJXlQLDczhLC.pl1               >special_ldd>install>MR12.2-1184>probe_scan_data_.cds
37           1    10/24/88  1336.3  probe_scan_data.incl.pl1          >special_ldd>install>MR12.2-1184>probe_scan_data.incl.pl1
353          2    04/01/76  2209.5  cds_args.incl.pl1                 >ldd>include>cds_args.incl.pl1
358          3    10/24/88  1336.5  probe_operators.incl.pl1          >special_ldd>install>MR12.2-1184>probe_operators.incl.pl1
360          4    10/24/88  1336.1  probe_scan_dcls.incl.pl1          >special_ldd>install>MR12.2-1184>probe_scan_dcls.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
AMPERSAND                       000124 constant        bit(18)                  initial dcl 3-17 set ref 80* 90*
ARROW                           000123 constant        bit(18)                  initial dcl 3-17 set ref 69*
BIT_STR_END_STATE               000004 constant        fixed bin(17,0)          initial dcl 4-20 ref 163 182 196
COLON_CHAR_TYPE                 010176 constant        fixed bin(17,0)          initial packed unaligned dcl 4-38 ref 173 278
C_ADDRESS_CHAR_TYPE             010173 constant        fixed bin(17,0)          initial packed unaligned dcl 4-38 ref 111 177 178
                                                                                  179 180 181 182 183 184 185 186 187 188 189
C_EQUAL                         000116 constant        bit(18)                  initial dcl 3-17 set ref 74*
C_LEFT_SHIFT                    000120 constant        bit(18)                  initial dcl 3-17 set ref 76*
C_MOD_CHAR_TYPE                 010172 constant        fixed bin(17,0)          initial packed unaligned dcl 4-38 ref 112 191 192
                                                                                  193 194 195 196 197 198 199 200 201 202 203
C_NOT_EQUAL                     000115 constant        bit(18)                  initial dcl 3-17 set ref 75*
C_RIGHT_SHIFT                   000117 constant        bit(18)                  initial dcl 3-17 set ref 77*
DOT_CHAR_TYPE                   010222 constant        fixed bin(17,0)          initial packed unaligned dcl 4-38 ref 172 266
DOT_SEEN_STATE                  000003 constant        fixed bin(17,0)          initial dcl 4-20 ref 151 152 153 154 155 156 164 172
                                                                                  183 197
EQUALS                          000130 constant        bit(18)                  initial dcl 3-17 set ref 86*
EQUAL_CHAR_TYPE                 010214 constant        fixed bin(17,0)          initial packed unaligned dcl 4-38 ref 174 281
GREATER_CHAR_TYPE               010216 constant        fixed bin(17,0)          initial packed unaligned dcl 4-38 ref 282
GREATER_THAN                    000131 constant        bit(18)                  initial dcl 3-17 set ref 84*
ILLEGAL_CHAR_TYPE               010225 constant        fixed bin(17,0)          initial packed unaligned dcl 4-38 ref 220 221 222
                                                                                  223 224 225 226 227 228 231 234 235 236 237 238
                                                                                  239 240 241 242 243 244 245 246 247 248 249 250
                                                                                  251 253 255 259 284 312 316 343 345 346 347
IN_DOT_OP_STATE                 010230 constant        fixed bin(17,0)          initial dcl 4-20 ref 124 125 126 127 128 129 130 131
                                                                                  132 133 134 135 136 137 138 139 140 141 142 143
                                                                                  144 145 146 147 148 149 169
LEFT_PAREN_CHAR_TYPE            010224 constant        fixed bin(17,0)          initial packed unaligned dcl 4-38 ref 260
LESS_CHAR_TYPE                  010215 constant        fixed bin(17,0)          initial packed unaligned dcl 4-38 ref 280
LESS_THAN                       000132 constant        bit(18)                  initial dcl 3-17 set ref 85*
LETTER_B_CHAR_TYPE              010206 constant        fixed bin(17,0)          initial packed unaligned dcl 4-38 ref 151 318
LETTER_E_CHAR_TYPE              010205 constant        fixed bin(17,0)          initial packed unaligned dcl 4-38 ref 152 321
LETTER_F_CHAR_TYPE              010202 constant        fixed bin(17,0)          initial packed unaligned dcl 4-38 ref 155 322
LETTER_I_CHAR_TYPE              010204 constant        fixed bin(17,0)          initial packed unaligned dcl 4-38 ref 153 325
LETTER_O_CHAR_TYPE              010203 constant        fixed bin(17,0)          initial packed unaligned dcl 4-38 ref 154 331
MINUS_CHAR_TYPE                 010217 constant        fixed bin(17,0)          initial packed unaligned dcl 4-38 ref 122 265
NAME_STATE                      000006 constant        fixed bin(17,0)          initial dcl 4-20 ref 122 160 179 193
NOT_CHAR_TYPE                   010213 constant        fixed bin(17,0)          initial packed unaligned dcl 4-38 ref 109 314
NOT_EQUALS                      000127 constant        bit(18)                  initial dcl 3-17 set ref 64* 70* 87*
NOT_GREATER_THAN                000126 constant        bit(18)                  initial dcl 3-17 set ref 66* 68* 83*
NOT_LESS_THAN                   000125 constant        bit(18)                  initial dcl 3-17 set ref 65* 67* 82*
NOT_SIGN                        000133 constant        bit(18)                  initial dcl 3-17 set ref 79* 89*
NULL_STATE                      010233 constant        fixed bin(17,0)          initial dcl 4-20 ref 158 173 177 191
NUMBER_EXP1_STATE               000001 constant        fixed bin(17,0)          initial dcl 4-20 ref 167 186 200
NUMBER_EXP2_STATE               000000 constant        fixed bin(17,0)          initial dcl 4-20 ref 168 187 201
NUMBER_POST_DOT_STATE           000002 constant        fixed bin(17,0)          initial dcl 4-20 ref 166 185 199
NUMBER_PRE_DOT_STATE            010231 constant        fixed bin(17,0)          initial dcl 4-20 ref 165 184 198
OCTAL_DIGITS_CHAR_TYPE          010210 constant        fixed bin(17,0)          initial packed unaligned dcl 4-38 ref 273 274 275
OPERATOR_VALUES                 000007 constant        varying char(4)          initial array dcl 3-43
OR_BAR                          000134 constant        bit(18)                  initial dcl 3-17 set ref 81* 91*
OTHER_DIGITS_CHAR_TYPE          010207 constant        fixed bin(17,0)          initial packed unaligned dcl 4-38 ref 276 277
OTHER_LETTER_CHAR_TYPE          010177 constant        fixed bin(17,0)          initial packed unaligned dcl 4-38 ref 156 256 257
                                                                                  285 286 287 288 289 290 291 292 293 294 295 296
                                                                                  297 298 299 300 301 302 303 304 305 306 307 308
                                                                                  309 310 315 317 319 320 323 324 326 327 328 329
                                                                                  330 332 333 334 335 336 337 338 339 340 341 342
OTHER_OPS_CHAR_TYPE             010175 constant        fixed bin(17,0)          initial packed unaligned dcl 4-38 ref 106 230 233
                                                                                  258 262 264 267 279 283 311 313
PASCAL_ARROW_CHAR_TYPE          010174 constant        fixed bin(17,0)          initial packed unaligned dcl 4-38 ref 107 108 158
                                                                                  159 160 161 162 163 164 165 166 167 168 169 170
                                                                                  171
PASCAL_ASSIGN                   000121 constant        bit(18)                  initial dcl 3-17 set ref 72*
PASCAL_RANGE                    000122 constant        bit(18)                  initial dcl 3-17 set ref 71*
PLUS_CHAR_TYPE                  010220 constant        fixed bin(17,0)          initial packed unaligned dcl 4-38 ref 263
POSSIBLE_DOUBLE_STATE           010232 constant        fixed bin(17,0)          initial dcl 4-20 ref 159 174 178 192
PTR_BIT_STATE                   010226 constant        fixed bin(17,0)          initial dcl 4-20 ref 171 189 203
PTR_WORD_STATE                  010227 constant        fixed bin(17,0)          initial dcl 4-20 ref 170 188 202
QUOTE_CHAR_TYPE                 010201 constant        fixed bin(17,0)          initial packed unaligned dcl 4-38 ref 103 105 110
                                                                                  254
QUOTE_SEEN_STATE                000005 constant        fixed bin(17,0)          initial dcl 4-20 ref 162 181 195
RADIX_DIGITS_CHAR_TYPE          010211 constant        fixed bin(17,0)          initial packed unaligned dcl 4-38 ref 269 270 271
                                                                                  272
RIGHT_PAREN_CHAR_TYPE           010223 constant        fixed bin(17,0)          initial packed unaligned dcl 4-38 ref 261
STRING_STATE                    000007 constant        fixed bin(17,0)          initial dcl 4-20 ref 161 180 194
VERTICAL_BAR_CHAR_TYPE          010221 constant        fixed bin(17,0)          initial packed unaligned dcl 4-38 ref 344
WHITE_SPACE_CHAR_TYPE           010200 constant        fixed bin(17,0)          initial packed unaligned dcl 4-38 ref 229 232 252
ZERO_CHAR_TYPE                  010212 constant        fixed bin(17,0)          initial packed unaligned dcl 4-38 ref 268
addr                                                   builtin function         dcl 34 ref 40 55 55
bin                                                    builtin function         dcl 209 ref 211
c_action_table         2220     000146 automatic       fixed bin(17,0)          array level 2 packed packed unaligned dcl 1-29 set
                                                                                  ref 115* 177* 178* 179* 180* 181* 182* 183* 184*
                                                                                  185* 186* 187* 188* 189* 191* 192* 193* 194* 195*
                                                                                  196* 197* 198* 199* 200* 201* 202* 203*
c_char_type             400     000146 automatic       fixed bin(17,0)          array level 2 packed packed unaligned dcl 1-29 set
                                                                                  ref 96* 109* 110* 111* 112*
cds                             000100 automatic       structure                level 1 dcl 31 set ref 55 55
cds_args                               based           structure                level 1 dcl 2-3
cobol_action_table     1410     000146 automatic       fixed bin(17,0)          array level 2 packed packed unaligned dcl 1-29 set
                                                                                  ref 115* 122*
cobol_char_type         200     000146 automatic       fixed bin(17,0)          array level 2 packed packed unaligned dcl 1-29 set
                                                                                  ref 96*
code                            000145 automatic       fixed bin(35,0)          dcl 33 set ref 55* 56 56*
com_err_                        000014 constant        entry                    external dcl 35 ref 56
create_data_segment_            000012 constant        entry                    external dcl 29 ref 55
doubles                2524     000146 automatic       structure                array level 2 dcl 1-29
exclude_array_ptr        42     000100 automatic       pointer                  level 2 dcl 31 set ref 48*
fort_ops               2556     000146 automatic       structure                array level 2 dcl 1-29
fortran_action_table   1104     000146 automatic       fixed bin(17,0)          array level 2 packed packed unaligned dcl 1-29 set
                                                                                  ref 115* 124* 125* 126* 127* 128* 129* 130* 131*
                                                                                  132* 133* 134* 135* 136* 137* 138* 139* 140* 141*
                                                                                  142* 143* 144* 145* 146* 147* 148* 149* 151* 152*
                                                                                  153* 154* 155* 156*
fortran_char_type       100     000146 automatic       fixed bin(17,0)          array level 2 packed packed unaligned dcl 1-29 set
                                                                                  ref 96* 103*
have_text                44(02) 000100 automatic       bit(1)                   level 3 packed packed unaligned dcl 31 set ref 50*
len                       2     000100 automatic       fixed bin(18,0)          array level 3 dcl 31 set ref 41* 44*
name                   2556     000146 automatic       char(4)                  array level 3 in structure "probe_scan_data"
                                                                                  dcl 1-29 in procedure "probe_scan_data_" set ref
                                                                                  79* 80* 81* 82* 83* 84* 85* 86* 87*
name                   2600     000146 automatic       char(4)                  array level 3 in structure "probe_scan_data"
                                                                                  dcl 1-29 in procedure "probe_scan_data_" set ref
                                                                                  89* 90* 91*
null                                                   builtin function         dcl 34 ref 43 48
num_exclude_names        40     000100 automatic       fixed bin(17,0)          level 2 dcl 31 set ref 47*
op_code                2601     000146 automatic       fixed bin(17,0)          array level 3 in structure "probe_scan_data"
                                                                                  dcl 1-29 in procedure "probe_scan_data_" set ref
                                                                                  89* 90* 91*
op_code                2557     000146 automatic       fixed bin(17,0)          array level 3 in structure "probe_scan_data"
                                                                                  dcl 1-29 in procedure "probe_scan_data_" set ref
                                                                                  79* 80* 81* 82* 83* 84* 85* 86* 87*
operator_type           500     000146 automatic       fixed bin(17,0)          initial array level 2 packed packed unaligned
                                                                                  dcl 1-29 set ref 1-29* 1-29* 1-29* 1-29* 1-29*
                                                                                  1-29* 1-29* 1-29* 1-29* 1-29* 1-29* 1-29* 1-29*
                                                                                  1-29* 1-29* 1-29* 1-29* 1-29* 1-29* 1-29* 1-29*
                                                                                  1-29* 1-29* 1-29* 1-29* 1-29* 1-29* 1-29* 1-29*
                                                                                  1-29* 1-29* 1-29* 1-29* 1-29* 1-29* 1-29* 1-29*
                                                                                  1-29* 1-29* 1-29* 1-29* 1-29* 1-29* 1-29* 1-29*
                                                                                  1-29* 1-29* 1-29* 1-29* 1-29* 1-29* 1-29* 1-29*
                                                                                  1-29* 1-29* 1-29* 1-29* 1-29* 1-29* 1-29* 1-29*
                                                                                  1-29* 1-29* 1-29* 1-29* 1-29* 1-29* 1-29* 1-29*
                                                                                  1-29* 1-29* 1-29* 1-29* 1-29* 1-29* 1-29* 1-29*
                                                                                  1-29* 1-29* 1-29* 1-29* 1-29* 1-29* 1-29* 1-29*
                                                                                  1-29* 1-29* 1-29* 1-29* 1-29* 1-29* 1-29* 1-29*
                                                                                  1-29* 1-29* 1-29* 1-29* 1-29* 1-29* 1-29* 1-29*
                                                                                  1-29* 1-29* 1-29* 1-29* 1-29* 1-29* 1-29* 1-29*
                                                                                  1-29* 1-29* 1-29* 1-29* 1-29* 1-29* 1-29* 1-29*
                                                                                  1-29* 1-29* 1-29* 1-29* 1-29* 1-29* 1-29* 1-29*
                                                                                  1-29* 1-29* 1-29*
opt                                    parameter       bit(18)                  dcl 207 ref 206 211
p                               000100 automatic       pointer                  array level 3 dcl 31 set ref 40* 43*
pair                   2524     000146 automatic       char(2)                  array level 3 dcl 1-29 set ref 64* 65* 66* 67* 68*
                                                                                  69* 70* 71* 72* 74* 75* 76* 77*
pasc_ops               2600     000146 automatic       structure                array level 2 dcl 1-29
pascal_action_table    1714     000146 automatic       fixed bin(17,0)          array level 2 packed packed unaligned dcl 1-29 set
                                                                                  ref 115* 158* 159* 160* 161* 162* 163* 164* 165*
                                                                                  166* 167* 168* 169* 170* 171* 172* 173* 174*
pascal_char_type        300     000146 automatic       fixed bin(17,0)          array level 2 packed packed unaligned dcl 1-29 set
                                                                                  ref 96* 105* 106* 107* 108*
pl1_action_table        600     000146 automatic       fixed bin(17,0)          initial array level 2 packed packed unaligned
                                                                                  dcl 1-29 set ref 1-29* 115
pl1_char_type                   000146 automatic       fixed bin(17,0)          array level 2 packed packed unaligned dcl 1-29 set
                                                                                  ref 96 220* 221* 222* 223* 224* 225* 226* 227*
                                                                                  228* 229* 230* 231* 232* 233* 234* 235* 236* 237*
                                                                                  238* 239* 240* 241* 242* 243* 244* 245* 246* 247*
                                                                                  248* 249* 250* 251* 252* 253* 254* 255* 256* 257*
                                                                                  258* 259* 260* 261* 262* 263* 264* 265* 266* 267*
                                                                                  268* 269* 270* 271* 272* 273* 274* 275* 276* 277*
                                                                                  278* 279* 280* 281* 282* 283* 284* 285* 286* 287*
                                                                                  288* 289* 290* 291* 292* 293* 294* 295* 296* 297*
                                                                                  298* 299* 300* 301* 302* 303* 304* 305* 306* 307*
                                                                                  308* 309* 310* 311* 312* 313* 314* 315* 316* 317*
                                                                                  318* 319* 320* 321* 322* 323* 324* 325* 326* 327*
                                                                                  328* 329* 330* 331* 332* 333* 334* 335* 336* 337*
                                                                                  338* 339* 340* 341* 342* 343* 344* 345* 346* 347*
probe_scan_data                 000146 automatic       structure                level 1 dcl 1-29 set ref 40 41
rank                                                   builtin function         dcl 61 ref 103 105 106 107 108 109 110 111 112
sections                        000100 automatic       structure                array level 2 dcl 31
seg_name                 30     000100 automatic       char(32)                 level 2 dcl 31 set ref 46*
size                                                   builtin function         dcl 34 ref 41
struct_name               3     000100 automatic       char(32)                 array level 3 dcl 31 set ref 42* 45*
substr                                                 builtin function         dcl 209 ref 211
switches                 44     000100 automatic       structure                level 2 dcl 31 set ref 49*
type                   2525     000146 automatic       fixed bin(17,0)          array level 3 dcl 1-29 set ref 64* 65* 66* 67* 68*
                                                                                  69* 70* 71* 72* 74* 75* 76* 77*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
COLON                                  constant        bit(18)                  initial dcl 3-17
COMMA                                  constant        bit(18)                  initial dcl 3-17
C_INDIRECTION                          constant        bit(18)                  initial dcl 3-17
DOLLAR_SIGN                            constant        bit(18)                  initial dcl 3-17
LEFT_BRACKET                           constant        bit(18)                  initial dcl 3-17
LEFT_PAREN                             constant        bit(18)                  initial dcl 3-17
MINUS                                  constant        bit(18)                  initial dcl 3-17
NEW_LINE                               constant        bit(18)                  initial dcl 3-17
PASCAL_ARROW                           constant        bit(18)                  initial dcl 3-17
PERCENT                                constant        bit(18)                  initial dcl 3-17
PERIOD                                 constant        bit(18)                  initial dcl 3-17
PLUS                                   constant        bit(18)                  initial dcl 3-17
QUESTION_MARK                          constant        bit(18)                  initial dcl 3-17
RIGHT_BRACKET                          constant        bit(18)                  initial dcl 3-17
RIGHT_PAREN                            constant        bit(18)                  initial dcl 3-17
SEMI_COLON                             constant        bit(18)                  initial dcl 3-17
SLASH                                  constant        bit(18)                  initial dcl 3-17
TIMES                                  constant        bit(18)                  initial dcl 3-17
exclude_names                          based           char(32)                 array packed unaligned dcl 2-18

NAMES DECLARED BY EXPLICIT CONTEXT.
build_data                      005761 constant        entry                    internal dcl 59 ref 53
op_coder                        007326 constant        entry                    internal dcl 206 ref 64 65 66 67 68 69 70 71 72 74
                                                                                  75 76 77 79 80 81 82 83 84 85 86 87 89 90 91
probe_scan_data_                000165 constant        entry                    external dcl 22
set_char_types                  007335 constant        entry                    internal dcl 215 ref 94

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0     10354       10372   10300       10364
Length     14546   10300        16        4137      54           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
probe_scan_data_                   2005 external procedure  is an external procedure.  
build_data                              internal procedure  shares stack frame of external procedure probe_scan_data_.  
op_coder                                internal procedure  shares stack frame of external procedure probe_scan_data_.  
set_char_types                          internal procedure  shares stack frame of external procedure probe_scan_data_.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
probe_scan_data_         000100 cds                         probe_scan_data_
                         000145 code                        probe_scan_data_
                         000146 probe_scan_data             probe_scan_data_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      create_data_segment_

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     22 000164    1   29 000172        40 005673        41 005675        42 005677        43 005702        44 005704
     45 005705        46 005710        47 005713        48 005714        49 005715        50 005727        53 005731
     55 005732        56 005745        57 005760        59 005761        64 005762        64 005764        65 005766
     65 005770        66 005772        66 005774        67 005776        67 006000        68 006002        68 006004
     69 006006        69 006010        70 006012        70 006014        71 006016        71 006020        72 006022
     72 006024        74 006026        74 006030        75 006032        75 006034        76 006036        76 006040
     77 006042        77 006044        79 006046        79 006050        80 006052        80 006054        81 006056
     81 006060        82 006062        82 006064        83 006066        83 006070        84 006072        84 006074
     85 006076        85 006100        86 006102        86 006104        87 006106        87 006110        89 006112
     89 006114        90 006116        90 006120        91 006122        91 006124        94 006126        96 006127
    103 006146       105 006154       106 006162       107 006170       108 006176       109 006204       110 006212
    111 006220       112 006226       115 006234       122 006253       124 006264       125 006270       126 006274
    127 006300       128 006304       129 006310       130 006314       131 006320       132 006324       133 006330
    134 006334       135 006340       136 006344       137 006350       138 006354       139 006360       140 006364
    141 006370       142 006374       143 006400       144 006404       145 006410       146 006414       147 006420
    148 006424       149 006430       151 006434       152 006445       153 006456       154 006467       155 006500
    156 006511       158 006522       159 006533       160 006544       161 006555       162 006566       163 006577
    164 006610       165 006621       166 006632       167 006643       168 006654       169 006665       170 006676
    171 006707       172 006720       173 006731       174 006742       177 006753       178 006764       179 006775
    180 007006       181 007017       182 007030       183 007041       184 007052       185 007063       186 007074
    187 007105       188 007116       189 007127       191 007140       192 007151       193 007162       194 007173
    195 007204       196 007215       197 007226       198 007237       199 007250       200 007261       201 007272
    202 007303       203 007314       213 007325       206 007326       211 007330       215 007335       220 007336
    221 007340       222 007342       223 007344       224 007346       225 007350       226 007352       227 007354
    228 007356       229 007360       230 007362       231 007364       232 007366       233 007370       234 007372
    235 007374       236 007376       237 007400       238 007402       239 007404       240 007406       241 007410
    242 007412       243 007414       244 007416       245 007420       246 007422       247 007424       248 007426
    249 007430       250 007432       251 007434       252 007436       253 007440       254 007442       255 007444
    256 007446       257 007450       258 007452       259 007454       260 007456       261 007460       262 007462
    263 007464       264 007466       265 007470       266 007472       267 007474       268 007476       269 007500
    270 007502       271 007504       272 007506       273 007510       274 007512       275 007514       276 007516
    277 007520       278 007522       279 007524       280 007526       281 007530       282 007532       283 007534
    284 007536       285 007540       286 007542       287 007544       288 007546       289 007550       290 007552
    291 007554       292 007556       293 007560       294 007562       295 007564       296 007566       297 007570
    298 007572       299 007574       300 007576       301 007600       302 007602       303 007604       304 007606
    305 007610       306 007612       307 007614       308 007616       309 007620       310 007622       311 007624
    312 007626       313 007630       314 007632       315 007634       316 007636       317 007640       318 007642
    319 007644       320 007646       321 007650       322 007652       323 007654       324 007656       325 007660
    326 007662       327 007664       328 007666       329 007670       330 007672       331 007674       332 007676
    333 007700       334 007702       335 007704       336 007706       337 007710       338 007712       339 007714
    340 007716       341 007720       342 007722       343 007724       344 007726       345 007730       346 007732
    347 007734       350 007736


Object Segment >special_ldd>install>MR12.2-1184>probe_scan_data_
Created on 10/24/88  1605.3 mst Mon
by Hirneisen.SysMaint.a
using create_data_segment_, Version II of Thursday, November 20, 1986

        Object    Text    Defs    Link    Symb  Static
Start        0       0    2606    2774    3004    3004
Length    3407    2606     166      10     367       0


16 Definitions:


segname:    probe_scan_data_

text|2220       c_action_table
text|400        c_char_type
text|1410       cobol_action_table
text|200        cobol_char_type
text|2524       doubles
text|2556       fort_ops
text|1104       fortran_action_table
text|100        fortran_char_type
text|500        operator_type
text|2600       pasc_ops
text|1714       pascal_action_table
text|300        pascal_char_type
text|600        pl1_action_table
text|0          pl1_char_type
symb|0          symbol_table


No Links.





                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
