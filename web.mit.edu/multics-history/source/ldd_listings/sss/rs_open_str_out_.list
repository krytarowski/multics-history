	COMPILATION LISTING OF SEGMENT rs_open_str_out_
	Compiled by: Multics PL/I Compiler, Release 29, of July 28, 1986
	Compiled at: Honeywell Bull, Phx, AZ, Sys-M  
	Compiled on: 09/10/87  1451.3 mst Thu
	    Options: optimize list

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 /* record_stream_ program for handling stream output mode of opening */
       12 rs_open_str_out_:
       13      proc (iocb_ptr_arg);
       14 	iocb_ptr = iocb_ptr_arg;
       15 						/* set entry in iocb for valid operation */
       16 	put_chars = put_chars_rs;
       17 	return;					/* finished with opening routine */
       18 
       19 put_chars_rs:
       20      entry (iocb_ptr_arg, buff_ptr_arg, buff_len_arg, code);
       21 	iocb_ptr = iocb_ptr_arg -> actual_iocb_ptr;
       22 	rsab_ptr = attach_data_ptr;
       23 	rs_buff_ptr = open_data_ptr;
       24 	buff_len = buff_len_arg;
       25 	buff_ptr = buff_ptr_arg;
       26 	if buff_len_arg < 0
       27 	then code = error_table_$negative_nelem;
       28 	else do;					/* process characters in output buffer */
       29 		code = 0;
       30 		if length_n <= 0
       31 		then /* default case */
       32 		     do while ((buff_len > 0) & (code = 0));
       33 			line_len = index (buffer, newline) - 1;
       34 			if line_len ^= 0
       35 			then /* non-null line in output buffer */
       36 			     if line_len < 0	/* no newline found */
       37 			     then go to append;	/* append remaining chars to rs_buffer */
       38 			     else /* newline found in output buffer */
       39 				if n_left > 0
       40 			     then /* rs_buffer not empty */
       41 				do;		/*  append rest of line to rs_buffer and flush */
       42 				     substr (rs_buffer, n_left + 1, line_len) = substr (buffer, 1, line_len);
       43 				     call iox_$write_record (target_iocb_ptr, rs_buff_ptr, line_len + n_left, code);
       44 				     n_left = 0;
       45 				end;		/* rs_buffer now empty */
       46 			     else call iox_$write_record (target_iocb_ptr, buff_ptr, line_len, code);
       47 			buff_len = buff_len - line_len - 1;
       48 			buff_ptr = addr (buff (line_len + 2));
       49 		     end;				/* end of default case */
       50 
       51 		else do;				/* -length  n case */
       52 			if n_left > 0
       53 			then /* rs_buffer not empty */
       54 			     if n_left + buff_len >= length_n
       55 			     then /* enough for full record */
       56 				do;		/* append and write out record from rs_buffer */
       57 				     tail_len = length_n - n_left;
       58 				     substr (rs_buffer, n_left + 1, tail_len) = substr (buffer, 1, tail_len);
       59 				     call iox_$write_record (target_iocb_ptr, rs_buff_ptr, length_n, code);
       60 				     buff_len = buff_len - tail_len;
       61 				     buff_ptr = addr (buff (tail_len + 1));
       62 				     n_left = 0;	/* rs_buffer mpty */
       63 				end;
       64 			     else go to append;	/* not enough for full record to be written */
       65 
       66 			do while (buff_len >= length_n);
       67 			     call iox_$write_record (target_iocb_ptr, buff_ptr, length_n, code);
       68 			     buff_len = buff_len - length_n;
       69 			     buff_ptr = addr (buff (length_n + 1));
       70 			end;			/* fewer than length_n characters remain */
       71 
       72 append:
       73 			if buff_len > 0
       74 			then /* characters remain, but not enough for a full record */
       75 			     do;			/* append remaining chars to rs_buffer */
       76 				substr (rs_buffer, n_left + 1, buff_len) = buffer;
       77 				n_left = n_left + buff_len;
       78 			     end;
       79 		     end;				/* end of -length n case */
       80 	     end;					/* no more characters to process */
       81 	return;					/* end of put_chars routine */
       82 
       83 /* declarations for entire program */
       84 	dcl     (iocb_ptr_arg, iocb_ptr)
       85 				 ptr;
       86 	dcl     code		 fixed (35);
  1     1 /*  BEGIN:   rs_attach_block.incl.pl1			  *  *  *  *  *  */
  1     2 
  1     3 
  1     4 /****^  HISTORY COMMENTS:
  1     5*  1) change(75-02-13,Asherman), approve(), audit(), install():
  1     6*     Initial coding.
  1     7*  2) change(87-08-30,GWMay), approve(87-08-30,MCR7730), audit(87-09-10,GDixon),
  1     8*     install(87-09-10,MR12.1-1104):
  1     9*     Changed target_name to be unaligned.
  1    10*                                                   END HISTORY COMMENTS */
  1    11 
  1    12 
  1    13 dcl	   rsab_ptr	      ptr;
  1    14      dcl	   1 rs_attach_block      based (rsab_ptr) aligned,
  1    15 						/* record_stream_ attach block */
  1    16 						/* the following are set during attachment */
  1    17 	     2 attach_descrip,
  1    18 	       3 attach_descrip_len
  1    19 			      fixed (35),
  1    20 	       3 attach_descrip_string
  1    21 			      char (66),		/* "record_stream_ <targ_sw_name> <option>" */
  1    22 	     2 target_name	      char (32) unaligned,	/* name of the target switch */
  1    23 	     2 length_n	      fixed (21),		/* =-1 --> -nnl option, */
  1    24 						/* = 0 --> default option, */
  1    25 						/* > 0 --> -length option */
  1    26 	     2 i_attached_target  bit (1) aligned,	/* ="1"b --> target attached via -target option */
  1    27 						/* the following are set during opening */
  1    28 	     2 open_descrip,
  1    29 	       3 open_descrip_len fixed (35),
  1    30 	       3 open_descrip_string
  1    31 			      char (24),
  1    32 	     2 mode	      fixed,		/* opening mode-- may be 1,2,4, or 5 if open */
  1    33 	     2 target_iocb_ptr    ptr,		/* points to the iocb for the target switch */
  1    34 	     2 i_opened_target    bit (1) aligned,	/* ="1"b --> this opening caused target to be opened */
  1    35 	     2 base	      fixed (21),		/* offset of next byte in rs_buffer */
  1    36 	     2 n_left	      fixed (21);		/* number of unprocessed bytes in rs_buffer */
  1    37 
  1    38 /*  END OF:  rs_attach_block.incl.pl1			  *  *  *  *  *  */
       87 
  2     1 
  2     2      dcl	   1 iocb		      aligned based (iocb_ptr),
  2     3 						/* I/O control block. */
  2     4 	     2 iocb_version	      fixed init (1),	/* Version number of structure. */
  2     5 	     2 name	      char (32),		/* I/O name of this block. */
  2     6 	     2 actual_iocb_ptr    ptr,		/* IOCB ultimately SYNed to. */
  2     7 	     2 attach_descrip_ptr ptr,		/* Ptr to printable attach description. */
  2     8 	     2 attach_data_ptr    ptr,		/* Ptr to attach data structure. */
  2     9 	     2 open_descrip_ptr   ptr,		/* Ptr to printable open description. */
  2    10 	     2 open_data_ptr      ptr,		/* Ptr to open data structure (old SDB). */
  2    11 	     2 reserved	      bit (72),		/* Reserved for future use. */
  2    12 	     2 detach_iocb	      entry (ptr, fixed (35)),/* detach_iocb(p,s) */
  2    13 	     2 open	      entry (ptr, fixed, bit (1) aligned, fixed (35)),
  2    14 						/* open(p,mode,not_used,s) */
  2    15 	     2 close	      entry (ptr, fixed (35)),/* close(p,s) */
  2    16 	     2 get_line	      entry (ptr, ptr, fixed (21), fixed (21), fixed (35)),
  2    17 						/* get_line(p,bufptr,buflen,actlen,s) */
  2    18 	     2 get_chars	      entry (ptr, ptr, fixed (21), fixed (21), fixed (35)),
  2    19 						/* get_chars(p,bufptr,buflen,actlen,s) */
  2    20 	     2 put_chars	      entry (ptr, ptr, fixed (21), fixed (35)),
  2    21 						/* put_chars(p,bufptr,buflen,s) */
  2    22 	     2 modes	      entry (ptr, char (*), char (*), fixed (35)),
  2    23 						/* modes(p,newmode,oldmode,s) */
  2    24 	     2 position	      entry (ptr, fixed, fixed (21), fixed (35)),
  2    25 						/* position(p,u1,u2,s) */
  2    26 	     2 control	      entry (ptr, char (*), ptr, fixed (35)),
  2    27 						/* control(p,order,infptr,s) */
  2    28 	     2 read_record	      entry (ptr, ptr, fixed (21), fixed (21), fixed (35)),
  2    29 						/* read_record(p,bufptr,buflen,actlen,s) */
  2    30 	     2 write_record	      entry (ptr, ptr, fixed (21), fixed (35)),
  2    31 						/* write_record(p,bufptr,buflen,s) */
  2    32 	     2 rewrite_record     entry (ptr, ptr, fixed (21), fixed (35)),
  2    33 						/* rewrite_record(p,bufptr,buflen,s) */
  2    34 	     2 delete_record      entry (ptr, fixed (35)),/* delete_record(p,s) */
  2    35 	     2 seek_key	      entry (ptr, char (256) varying, fixed (21), fixed (35)),
  2    36 						/* seek_key(p,key,len,s) */
  2    37 	     2 read_key	      entry (ptr, char (256) varying, fixed (21), fixed (35)),
  2    38 						/* read_key(p,key,len,s) */
  2    39 	     2 read_length	      entry (ptr, fixed (21), fixed (35));
  2    40 						/* read_length(p,len,s) */
  2    41 
       88 
  3     1 /* BEGIN INCLUDE FILE ..... rs_buffer.inc.pl1 ..... 14 Feb 1975, M. Asherman */
  3     2 
  3     3      dcl	   rs_buff_ptr	      ptr;		/* points to buffer segment */
  3     4      dcl	   rs_buffer	      char (max_bufsize) based (rs_buff_ptr) aligned;
  3     5 						/* internal record_stream_ line/record buffer */
  3     6      dcl	   max_bufsize	      static internal fixed (21) init (1044480);
  3     7 						/* 255 K words */
  3     8 
  3     9 /* END INCLUDE FILE ..... rs_buffer.inc.pl1 ..... */
       89 
       90 	dcl     iox_$write_record	 entry (ptr, ptr, fixed (21), fixed (35));
       91 	dcl     (buff_ptr_arg, buff_ptr)
       92 				 ptr;
       93 	dcl     buffer		 char (buff_len) based (buff_ptr);
       94 	dcl     (buff_len_arg, buff_len)
       95 				 fixed (21);
       96 	dcl     error_table_$negative_nelem
       97 				 external fixed (35);
       98 	dcl     line_len		 fixed (21);
       99 	dcl     (addr, index, size, substr)
      100 				 builtin;
      101 	dcl     newline		 char (1) static internal aligned init ("
      102 ");
      103 	dcl     buff		 (buff_len) char (1) based (buff_ptr);
      104 	dcl     tail_len		 fixed (21);
      105 
      106 
      107      end rs_open_str_out_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    09/10/87  1447.6  rs_open_str_out_.pl1              >special_ldd>install>MR12.1-1104>rs_open_str_out_.pl1
87           1    09/10/87  1444.7  rs_attach_block.incl.pl1          >special_ldd>install>MR12.1-1104>rs_attach_block.incl.pl1
88           2    07/02/81  1905.0  iocbv.incl.pl1                    >ldd>include>iocbv.incl.pl1
89           3    07/19/79  1547.0  rs_buffer.incl.pl1                >ldd>include>rs_buffer.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
actual_iocb_ptr          12            based           pointer                  level 2 dcl 2-2 ref 21
addr                                                   builtin function         dcl 99 ref 48 61 69
attach_data_ptr          16            based           pointer                  level 2 dcl 2-2 ref 22
buff                                   based           char(1)                  array unaligned dcl 103 set ref 48 61 69
buff_len                        000110 automatic       fixed bin(21,0)          dcl 94 set ref 24* 30 33 42 47* 47 52 58 60* 60 66
                                                                                  68* 68 72 76 76 77
buff_len_arg                           parameter       fixed bin(21,0)          dcl 94 ref 19 24 26
buff_ptr                        000106 automatic       pointer                  dcl 91 set ref 25* 33 42 46* 48* 48 58 61* 61 67*
                                                                                  69* 69 76
buff_ptr_arg                           parameter       pointer                  dcl 91 ref 19 25
buffer                                 based           char                     unaligned dcl 93 ref 33 42 58 76
code                                   parameter       fixed bin(35,0)          dcl 86 set ref 19 26* 29* 30 43* 46* 59* 67*
error_table_$negative_nelem     000012 external static fixed bin(35,0)          dcl 96 ref 26
index                                                  builtin function         dcl 99 ref 33
iocb                                   based           structure                level 1 dcl 2-2
iocb_ptr                        000100 automatic       pointer                  dcl 84 set ref 14* 16 21* 22 23
iocb_ptr_arg                           parameter       pointer                  dcl 84 ref 12 14 19 21
iox_$write_record               000010 constant        entry                    external dcl 90 ref 43 46 59 67
length_n                 32            based           fixed bin(21,0)          level 2 dcl 1-14 set ref 30 52 57 59* 66 67* 68 69
line_len                        000111 automatic       fixed bin(21,0)          dcl 98 set ref 33* 34 34 42 42 43 46* 47 48
max_bufsize                     000000 constant        fixed bin(21,0)          initial dcl 3-6 ref 42 58 76
n_left                   50            based           fixed bin(21,0)          level 2 dcl 1-14 set ref 38 42 43 44* 52 52 57 58
                                                                                  62* 76 77* 77
newline                                constant        char(1)                  initial dcl 101 ref 33
open_data_ptr            22            based           pointer                  level 2 dcl 2-2 ref 23
put_chars                52            based           entry variable           level 2 dcl 2-2 set ref 16*
rs_attach_block                        based           structure                level 1 dcl 1-14
rs_buff_ptr                     000104 automatic       pointer                  dcl 3-3 set ref 23* 42 43* 58 59* 76
rs_buffer                              based           char                     dcl 3-4 set ref 42* 58* 76*
rsab_ptr                        000102 automatic       pointer                  dcl 1-13 set ref 22* 30 38 42 43 43 44 46 52 52 52
                                                                                  57 57 58 59 59 62 66 67 67 68 69 76 77 77
substr                                                 builtin function         dcl 99 set ref 42* 42 58* 58 76*
tail_len                        000112 automatic       fixed bin(21,0)          dcl 104 set ref 57* 58 58 60 61
target_iocb_ptr          44            based           pointer                  level 2 dcl 1-14 set ref 43* 46* 59* 67*

NAME DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
size                                                   builtin function         dcl 99

NAMES DECLARED BY EXPLICIT CONTEXT.
append                          000264 constant        label                    dcl 72 ref 34 52
put_chars_rs                    000032 constant        entry                    external dcl 19 ref 16
rs_open_str_out_                000007 constant        entry                    external dcl 12

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       364         400     302         374
Length       630     302        14         213      61           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
rs_open_str_out_                     86 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
rs_open_str_out_         000100 iocb_ptr                    rs_open_str_out_
                         000102 rsab_ptr                    rs_open_str_out_
                         000104 rs_buff_ptr                 rs_open_str_out_
                         000106 buff_ptr                    rs_open_str_out_
                         000110 buff_len                    rs_open_str_out_
                         000111 line_len                    rs_open_str_out_
                         000112 tail_len                    rs_open_str_out_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
iox_$write_record

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$negative_nelem


CONSTANTS
000300  aa     077777000043
000301  aa     000001000000

000000  aa     000003770000

000001  aa     404000000025

000002  aa     404000000043

000003  aa     464000000000

BEGIN PROCEDURE rs_open_str_out_
ENTRY TO rs_open_str_out_                                   STATEMENT 1 ON LINE 12
rs_open_str_out_:
     proc (iocb_ptr_arg);

000004  at     000001000003
000005  ta     000004000000
000006  da     000046300000
000007  aa   000140 6270 00	eax7 	96
000010  aa  7 00034 3521 20	epp2 	pr7|28,*
000011  aa  2 01045 2721 00	tsp2 	pr2|549		ext_entry
000012  aa     000002000000
000013  aa     000000000000
						STATEMENT 1 ON LINE 14
	iocb_ptr = iocb_ptr_arg;

000014  aa  6 00032 3735 20	epp7 	pr6|26,*
000015  aa  7 00002 3715 20	epp5 	pr7|2,*		iocb_ptr_arg
000016  aa  5 00000 3715 20	epp5 	pr5|0,*		iocb_ptr_arg
000017  aa  6 00100 6515 00	spri5	pr6|64		iocb_ptr
						STATEMENT 1 ON LINE 16
	put_chars = put_chars_rs;

000020  aa   000012 3520 04	epp2 	10,ic		000032 = 000140627000
000021  aa  5 00052 2521 00	spri2	pr5|42		iocb.put_chars
000022  aa   000256 2370 04	ldaq 	174,ic		000300 = 077777000043 000001000000
000023  aa  5 00054 7571 00	staq 	pr5|44		iocb.put_chars
						STATEMENT 1 ON LINE 17
	return;

000024  aa  0 00631 7101 00	tra  	pr0|409		return_mac
ENTRY TO put_chars_rs                                       STATEMENT 1 ON LINE 19
put_chars_rs:
     entry (iocb_ptr_arg, buff_ptr_arg, buff_len_arg, code);

000025  at     000004000003
000026  tt     000003000001
000027  ta     000002000000
000030  ta     000025000000
000031  da     000055300000
000032  aa   000140 6270 00	eax7 	96
000033  aa  7 00034 3521 20	epp2 	pr7|28,*
000034  aa  2 01045 2721 00	tsp2 	pr2|549		ext_entry
000035  aa     000010000000
000036  aa     000000000000
						STATEMENT 1 ON LINE 21
	iocb_ptr = iocb_ptr_arg -> actual_iocb_ptr;

000037  aa  6 00032 3735 20	epp7 	pr6|26,*
000040  aa  7 00002 3715 20	epp5 	pr7|2,*		iocb_ptr_arg
000041  aa  5 00000 3715 20	epp5 	pr5|0,*		iocb_ptr_arg
000042  aa  5 00012 3535 20	epp3 	pr5|10,*		iocb.actual_iocb_ptr
000043  aa  6 00100 2535 00	spri3	pr6|64		iocb_ptr
						STATEMENT 1 ON LINE 22
	rsab_ptr = attach_data_ptr;

000044  aa  3 00016 3515 20	epp1 	pr3|14,*		iocb.attach_data_ptr
000045  aa  6 00102 2515 00	spri1	pr6|66		rsab_ptr
						STATEMENT 1 ON LINE 23
	rs_buff_ptr = open_data_ptr;

000046  aa  3 00022 3715 20	epp5 	pr3|18,*		iocb.open_data_ptr
000047  aa  6 00104 6515 00	spri5	pr6|68		rs_buff_ptr
						STATEMENT 1 ON LINE 24
	buff_len = buff_len_arg;

000050  aa  7 00006 2361 20	ldq  	pr7|6,*		buff_len_arg
000051  aa  6 00110 7561 00	stq  	pr6|72		buff_len
						STATEMENT 1 ON LINE 25
	buff_ptr = buff_ptr_arg;

000052  aa  7 00004 3515 20	epp1 	pr7|4,*		buff_ptr_arg
000053  aa  1 00000 3515 20	epp1 	pr1|0,*		buff_ptr_arg
000054  aa  6 00106 2515 00	spri1	pr6|70		buff_ptr
						STATEMENT 1 ON LINE 26
	if buff_len_arg < 0
	then code = error_table_$negative_nelem;

000055  aa   000005 6050 04	tpl  	5,ic		000062
000056  aa  6 00044 3701 20	epp4 	pr6|36,*
000057  la  4 00012 2361 20	ldq  	pr4|10,*		error_table_$negative_nelem
000060  aa  7 00010 7561 20	stq  	pr7|8,*		code
000061  aa   000215 7100 04	tra  	141,ic		000276
						STATEMENT 1 ON LINE 28
	else do;

						STATEMENT 1 ON LINE 29
		code = 0;

000062  aa  7 00010 4501 20	stz  	pr7|8,*		code
						STATEMENT 1 ON LINE 30
		if length_n <= 0
		then /* default case */
		     do while ((buff_len > 0) & (code = 0));

000063  aa  6 00102 3535 20	epp3 	pr6|66,*		rsab_ptr
000064  aa  3 00032 2361 00	ldq  	pr3|26		rs_attach_block.length_n
000065  aa   000104 6054 04	tpnz 	68,ic		000171
000066  aa  6 00110 2361 00	ldq  	pr6|72		buff_len
000067  aa   000207 6044 04	tmoz 	135,ic		000276
000070  aa  6 00032 3735 20	epp7 	pr6|26,*
000071  aa  7 00010 2361 20	ldq  	pr7|8,*		code
000072  aa   000204 6010 04	tnz  	132,ic		000276
						STATEMENT 1 ON LINE 33
			line_len = index (buffer, newline) - 1;

000073  aa  6 00106 3715 20	epp5 	pr6|70,*		buff_ptr
000074  aa  6 00110 2351 00	lda  	pr6|72		buff_len
000075  aa  000 003 124 540	scm  	(pr,rl),(du),mask(000)
000076  aa  5 00000 00 0005	desc9a	pr5|0,al		buffer
000077  aa   012000 00 0001	desc9a	5120,1
000100  aa  6 00056 0001 00	arg  	pr6|46
000101  aa  6 00056 2361 00	ldq  	pr6|46
000102  aa   000002 6070 04	ttf  	2,ic		000104
000103  aa   000001 3360 07	lcq  	1,dl
000104  aa  6 00111 7561 00	stq  	pr6|73		line_len
						STATEMENT 1 ON LINE 34
			if line_len ^= 0
			then /* non-null line in output buffer */
			     if line_len < 0	/* no newline found */
			     then go to append;

000105  aa   000051 6000 04	tze  	41,ic		000156
000106  aa   000156 6040 04	tmi  	110,ic		000264
						STATEMENT 1 ON LINE 38
			     else /* newline found in output buffer */
				if n_left > 0
			     then /* rs_buffer not empty */
				do;

000107  aa  6 00102 3535 20	epp3 	pr6|66,*		rsab_ptr
000110  aa  3 00050 2361 00	ldq  	pr3|40		rs_attach_block.n_left
000111  aa   000030 6044 04	tmoz 	24,ic		000141
						STATEMENT 1 ON LINE 42
				     substr (rs_buffer, n_left + 1, line_len) = substr (buffer, 1, line_len);

000112  aa  6 00104 3515 20	epp1 	pr6|68,*		rs_buff_ptr
000113  aa  6 00111 2351 00	lda  	pr6|73		line_len
000114  aa  040 146 100 540	mlr  	(pr,rl),(pr,rl,ql),fill(040)
000115  aa  5 00000 00 0005	desc9a	pr5|0,al		buffer
000116  aa  1 00000 00 0005	desc9a	pr1|0,al		rs_buffer
						STATEMENT 1 ON LINE 43
				     call iox_$write_record (target_iocb_ptr, rs_buff_ptr, line_len + n_left, code);

000117  aa  6 00111 0761 00	adq  	pr6|73		line_len
000120  aa  6 00113 7561 00	stq  	pr6|75
000121  aa  3 00044 3521 00	epp2 	pr3|36		rs_attach_block.target_iocb_ptr
000122  aa  6 00116 2521 00	spri2	pr6|78
000123  aa  6 00104 3521 00	epp2 	pr6|68		rs_buff_ptr
000124  aa  6 00120 2521 00	spri2	pr6|80
000125  aa  6 00113 3521 00	epp2 	pr6|75
000126  aa  6 00122 2521 00	spri2	pr6|82
000127  aa  7 00010 3521 20	epp2 	pr7|8,*		code
000130  aa  6 00124 2521 00	spri2	pr6|84
000131  aa  6 00114 6211 00	eax1 	pr6|76
000132  aa   020000 4310 07	fld  	8192,dl
000133  aa  6 00044 3701 20	epp4 	pr6|36,*
000134  la  4 00010 3521 20	epp2 	pr4|8,*		iox_$write_record
000135  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 44
				     n_left = 0;

000136  aa  6 00102 3735 20	epp7 	pr6|66,*		rsab_ptr
000137  aa  7 00050 4501 00	stz  	pr7|40		rs_attach_block.n_left
						STATEMENT 1 ON LINE 45
				end;

000140  aa   000016 7100 04	tra  	14,ic		000156
						STATEMENT 1 ON LINE 46
			     else call iox_$write_record (target_iocb_ptr, buff_ptr, line_len, code);

000141  aa  3 00044 3521 00	epp2 	pr3|36		rs_attach_block.target_iocb_ptr
000142  aa  6 00116 2521 00	spri2	pr6|78
000143  aa  6 00106 3521 00	epp2 	pr6|70		buff_ptr
000144  aa  6 00120 2521 00	spri2	pr6|80
000145  aa  6 00111 3521 00	epp2 	pr6|73		line_len
000146  aa  6 00122 2521 00	spri2	pr6|82
000147  aa  7 00010 3521 20	epp2 	pr7|8,*		code
000150  aa  6 00124 2521 00	spri2	pr6|84
000151  aa  6 00114 6211 00	eax1 	pr6|76
000152  aa   020000 4310 07	fld  	8192,dl
000153  aa  6 00044 3701 20	epp4 	pr6|36,*
000154  la  4 00010 3521 20	epp2 	pr4|8,*		iox_$write_record
000155  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 47
			buff_len = buff_len - line_len - 1;

000156  aa  6 00110 2361 00	ldq  	pr6|72		buff_len
000157  aa  6 00111 1761 00	sbq  	pr6|73		line_len
000160  aa   000001 1760 07	sbq  	1,dl
000161  aa  6 00110 7561 00	stq  	pr6|72		buff_len
						STATEMENT 1 ON LINE 48
			buff_ptr = addr (buff (line_len + 2));

000162  aa  6 00111 2351 00	lda  	pr6|73		line_len
000163  aa   000001 0750 07	ada  	1,dl
000164  aa  6 00106 3521 20	epp2 	pr6|70,*		buff
000165  aa  2 00000 5005 05	a9bd 	pr2|0,al
000166  aa  6 00106 2521 00	spri2	pr6|70		buff_ptr
						STATEMENT 1 ON LINE 49
		     end;

000167  aa   777677 7100 04	tra  	-65,ic		000066
000170  aa   000106 7100 04	tra  	70,ic		000276
						STATEMENT 1 ON LINE 51
		else do;

						STATEMENT 1 ON LINE 52
			if n_left > 0
			then /* rs_buffer not empty */
			     if n_left + buff_len >= length_n
			     then /* enough for full record */
				do;

000171  aa  3 00050 2361 00	ldq  	pr3|40		rs_attach_block.n_left
000172  aa   000040 6044 04	tmoz 	32,ic		000232
000173  aa  6 00110 0761 00	adq  	pr6|72		buff_len
000174  aa  3 00032 1161 00	cmpq 	pr3|26		rs_attach_block.length_n
000175  aa   000067 6040 04	tmi  	55,ic		000264
						STATEMENT 1 ON LINE 57
				     tail_len = length_n - n_left;

000176  aa  3 00032 2361 00	ldq  	pr3|26		rs_attach_block.length_n
000177  aa  3 00050 1761 00	sbq  	pr3|40		rs_attach_block.n_left
000200  aa  6 00112 7561 00	stq  	pr6|74		tail_len
						STATEMENT 1 ON LINE 58
				     substr (rs_buffer, n_left + 1, tail_len) = substr (buffer, 1, tail_len);

000201  aa  3 00050 2351 00	lda  	pr3|40		rs_attach_block.n_left
000202  aa  040 145 100 540	mlr  	(pr,rl),(pr,rl,al),fill(040)
000203  aa  1 00000 00 0006	desc9a	pr1|0,ql		buffer
000204  aa  5 00000 00 0006	desc9a	pr5|0,ql		rs_buffer
						STATEMENT 1 ON LINE 59
				     call iox_$write_record (target_iocb_ptr, rs_buff_ptr, length_n, code);

000205  aa  3 00044 3521 00	epp2 	pr3|36		rs_attach_block.target_iocb_ptr
000206  aa  6 00116 2521 00	spri2	pr6|78
000207  aa  6 00104 3521 00	epp2 	pr6|68		rs_buff_ptr
000210  aa  6 00120 2521 00	spri2	pr6|80
000211  aa  3 00032 3521 00	epp2 	pr3|26		rs_attach_block.length_n
000212  aa  6 00122 2521 00	spri2	pr6|82
000213  aa  7 00010 3521 20	epp2 	pr7|8,*		code
000214  aa  6 00124 2521 00	spri2	pr6|84
000215  aa  6 00114 6211 00	eax1 	pr6|76
000216  aa   020000 4310 07	fld  	8192,dl
000217  aa  6 00044 3701 20	epp4 	pr6|36,*
000220  la  4 00010 3521 20	epp2 	pr4|8,*		iox_$write_record
000221  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 60
				     buff_len = buff_len - tail_len;

000222  aa  6 00112 3361 00	lcq  	pr6|74		tail_len
000223  aa  6 00110 0561 00	asq  	pr6|72		buff_len
						STATEMENT 1 ON LINE 61
				     buff_ptr = addr (buff (tail_len + 1));

000224  aa  6 00112 2351 00	lda  	pr6|74		tail_len
000225  aa  6 00106 3521 20	epp2 	pr6|70,*		buff
000226  aa  2 00000 5005 05	a9bd 	pr2|0,al
000227  aa  6 00106 2521 00	spri2	pr6|70		buff_ptr
						STATEMENT 1 ON LINE 62
				     n_left = 0;

000230  aa  6 00102 3735 20	epp7 	pr6|66,*		rsab_ptr
000231  aa  7 00050 4501 00	stz  	pr7|40		rs_attach_block.n_left
						STATEMENT 1 ON LINE 63
				end;

						STATEMENT 1 ON LINE 66
			do while (buff_len >= length_n);

000232  aa  6 00110 2361 00	ldq  	pr6|72		buff_len
000233  aa  6 00102 3735 20	epp7 	pr6|66,*		rsab_ptr
000234  aa  7 00032 1161 00	cmpq 	pr7|26		rs_attach_block.length_n
000235  aa   000027 6040 04	tmi  	23,ic		000264
						STATEMENT 1 ON LINE 67
			     call iox_$write_record (target_iocb_ptr, buff_ptr, length_n, code);

000236  aa  7 00044 3521 00	epp2 	pr7|36		rs_attach_block.target_iocb_ptr
000237  aa  6 00116 2521 00	spri2	pr6|78
000240  aa  6 00106 3521 00	epp2 	pr6|70		buff_ptr
000241  aa  6 00120 2521 00	spri2	pr6|80
000242  aa  7 00032 3521 00	epp2 	pr7|26		rs_attach_block.length_n
000243  aa  6 00122 2521 00	spri2	pr6|82
000244  aa  6 00032 3715 20	epp5 	pr6|26,*
000245  aa  5 00010 3521 20	epp2 	pr5|8,*		code
000246  aa  6 00124 2521 00	spri2	pr6|84
000247  aa  6 00114 6211 00	eax1 	pr6|76
000250  aa   020000 4310 07	fld  	8192,dl
000251  aa  6 00044 3701 20	epp4 	pr6|36,*
000252  la  4 00010 3521 20	epp2 	pr4|8,*		iox_$write_record
000253  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 68
			     buff_len = buff_len - length_n;

000254  aa  6 00102 3735 20	epp7 	pr6|66,*		rsab_ptr
000255  aa  7 00032 3361 00	lcq  	pr7|26		rs_attach_block.length_n
000256  aa  6 00110 0561 00	asq  	pr6|72		buff_len
						STATEMENT 1 ON LINE 69
			     buff_ptr = addr (buff (length_n + 1));

000257  aa  7 00032 2351 00	lda  	pr7|26		rs_attach_block.length_n
000260  aa  6 00106 3521 20	epp2 	pr6|70,*		buff
000261  aa  2 00000 5005 05	a9bd 	pr2|0,al
000262  aa  6 00106 2521 00	spri2	pr6|70		buff_ptr
						STATEMENT 1 ON LINE 70
			end;

000263  aa   777747 7100 04	tra  	-25,ic		000232
						STATEMENT 1 ON LINE 72
append:
			if buff_len > 0
			then /* characters remain, but not enough for a full record */
			     do;

000264  aa  6 00110 2361 00	ldq  	pr6|72		buff_len
000265  aa   000011 6044 04	tmoz 	9,ic		000276
						STATEMENT 1 ON LINE 76
				substr (rs_buffer, n_left + 1, buff_len) = buffer;

000266  aa  6 00102 3735 20	epp7 	pr6|66,*		rsab_ptr
000267  aa  7 00050 2351 00	lda  	pr7|40		rs_attach_block.n_left
000270  aa  6 00104 3715 20	epp5 	pr6|68,*		rs_buff_ptr
000271  aa  6 00106 3535 20	epp3 	pr6|70,*		buff_ptr
000272  aa  040 145 100 540	mlr  	(pr,rl),(pr,rl,al),fill(040)
000273  aa  3 00000 00 0006	desc9a	pr3|0,ql		buffer
000274  aa  5 00000 00 0006	desc9a	pr5|0,ql		rs_buffer
						STATEMENT 1 ON LINE 77
				n_left = n_left + buff_len;

000275  aa  7 00050 0561 00	asq  	pr7|40		rs_attach_block.n_left
						STATEMENT 1 ON LINE 78
			     end;

						STATEMENT 1 ON LINE 79
		     end;

						STATEMENT 1 ON LINE 80
	     end;

						STATEMENT 1 ON LINE 81
	return;

000276  aa  0 00631 7101 00	tra  	pr0|409		return_mac
						STATEMENT 1 ON LINE 107
     end rs_open_str_out_;

  END PROCEDURE rs_open_str_out_


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
