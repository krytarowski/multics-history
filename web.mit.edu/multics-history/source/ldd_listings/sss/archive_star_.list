	COMPILATION LISTING OF SEGMENT archive_star_
	Compiled by: Multics PL/I Compiler, Release 27d, of October 11, 1982
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 11/04/82  1727.6 mst Thu
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 archive_star_:	proc(dirname,starname,key,argptr,lastarg);
       12 
       13 /*
       14*Procedure used by the archive command to implement the star convention.
       15*
       16*This procedure is called with the directory name and entryname
       17*which is known to contain stars.  It uses the star handler to find all
       18*the correct names and then  calls the archive command to perform the work.
       19*
       20*The archive segments will be treated in alphabetical order.
       21**/
       22 /*
       23*12/6/69	JW Gintell	Originally coded as archive_t_star command.
       24*1/27/70,7/15/70		modified
       25*11/18/70			Transformed into archive_star_.
       26*3/9/72			Modified to extend star convention
       27**/
       28 
       29 
       30 dcl	dirname char(*);				/* directory in which * conventions is to be applied */
       31 dcl	starname char(*);
       32 dcl	key char(*);				/* key to be passed back */
       33 dcl	argptr ptr;				/* pointer to argument list */
       34 dcl	lastarg fixed bin;				/* count of number of arguments */
       35 
       36 dcl	(areap,eptr,nptr) ptr init(null),		/* used for star handling */
       37 	(code,ecount) fixed bin(17),
       38 
       39 	1 entries(ecount) based(eptr) aligned,		/* structure for status call */
       40 	  2 type bit(2) unaligned,
       41 	  2 nname bit(16) unaligned,
       42 	  2 nindex bit(18) unaligned,
       43 
       44 	word(ecount) based(eptr) bit(36) aligned,	/* used for sort */
       45 	saveword bit(36),
       46 
       47 	names(n) char(32) aligned based(nptr),
       48 	archive_name char(168),
       49 	dirnamel fixed bin(17),
       50 	n fixed bin(17),
       51 	(i,j) fixed bin(17);
       52 
       53 dcl						/* external entries */
       54 
       55 	hcs_$star_ entry (char(*), char(*), fixed bin(2), ptr, fixed bin(17), ptr, ptr, fixed bin(17)),
       56 	com_err_ entry options(variable),
       57 	archive$star_entry entry (char(*),char(*),ptr,fixed bin),
       58 	(get_system_free_area_, freen_) entry(ptr);
       59 
       60 dcl system_area area(1024) based(areap);
       61 
       62 dcl cleanup condition;
       63 
       64 dcl (bin, index, null, substr) builtin;
       65 
       66 /**/
       67 	call get_system_free_area_(areap);			/* get area for call to star_ */
       68 	on condition(cleanup) call free;
       69 
       70 	call hcs_$star_(dirname, starname, 3 /* branches and links */, areap, ecount, eptr, nptr, code);
       71 
       72 	if code ^= 0 then do;
       73 	  call com_err_(code,"archive","^a>^a",dirname,starname);
       74 	  return;
       75 	end;
       76 
       77 	do i = 1 to ecount-1;			/* sort the names of the segments */
       78 
       79 	     do j = i+1 to 2 by -1 while(names(bin(entries(j-1).nindex, 17)) > names(bin(entries(j).nindex, 17)));
       80 
       81 		saveword = word(j);
       82 		word(j) = word(j-1);
       83 		word(j-1) = saveword;
       84 	     end;
       85 	end;
       86 
       87 	dirnamel = index(dirname," ") - 1;
       88 
       89 	do i = 1 to ecount;				/* call archive for each segment */
       90 
       91 	  n = bin(eptr->entries(i).nindex, 17);		/* pick out index to name */
       92 	  archive_name = substr(dirname,1,dirnamel)||">"||names(n);	/* build archive name: dir>name */
       93 	  call archive$star_entry(key,archive_name,argptr,lastarg);
       94 	end;
       95 
       96 	call free;
       97 
       98 free:	procedure;
       99 
      100 	if eptr^=null then free eptr->entries in(system_area);
      101 	if nptr^=null then free nptr->names in(system_area);
      102 
      103 end free;
      104 
      105 end archive_star_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/04/82  1619.7  archive_star_.pl1                 >dumps>old>recomp>archive_star_.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
archive$star_entry              000014 constant        entry                    external dcl 53 ref 93
archive_name                    000111 automatic       char(168)                unaligned dcl 36 set ref 92* 93*
areap                           000100 automatic       pointer                  initial dcl 36 set ref 36* 67* 70* 100 101
argptr                                 parameter       pointer                  dcl 33 set ref 11 93*
bin                                                    builtin function         dcl 64 ref 79 79 91
cleanup                         000170 stack reference condition                dcl 62 ref 68
code                            000106 automatic       fixed bin(17,0)          dcl 36 set ref 70* 72 73*
com_err_                        000012 constant        entry                    external dcl 53 ref 73
dirname                                parameter       char                     unaligned dcl 30 set ref 11 70* 73* 87 92
dirnamel                        000163 automatic       fixed bin(17,0)          dcl 36 set ref 87* 92
ecount                          000107 automatic       fixed bin(17,0)          dcl 36 set ref 70* 77 89 100
entries                                based           structure                array level 1 dcl 36 ref 100
eptr                            000102 automatic       pointer                  initial dcl 36 set ref 36* 70* 79 79 81 82 82 83 91
                                                                                  100 100
get_system_free_area_           000016 constant        entry                    external dcl 53 ref 67
hcs_$star_                      000010 constant        entry                    external dcl 53 ref 70
i                               000165 automatic       fixed bin(17,0)          dcl 36 set ref 77* 79* 89* 91*
index                                                  builtin function         dcl 64 ref 87
j                               000166 automatic       fixed bin(17,0)          dcl 36 set ref 79* 79 79* 81 82 82 83*
key                                    parameter       char                     unaligned dcl 32 set ref 11 93*
lastarg                                parameter       fixed bin(17,0)          dcl 34 set ref 11 93*
n                               000164 automatic       fixed bin(17,0)          dcl 36 set ref 91* 92 101
names                                  based           char(32)                 array dcl 36 ref 79 79 92 101
nindex                    0(18)        based           bit(18)                  array level 2 packed unaligned dcl 36 ref 79 79 91
nptr                            000104 automatic       pointer                  initial dcl 36 set ref 36* 70* 79 79 92 101 101
null                                                   builtin function         dcl 64 ref 36 36 36 100 101
saveword                        000110 automatic       bit(36)                  unaligned dcl 36 set ref 81* 83
starname                               parameter       char                     unaligned dcl 31 set ref 11 70* 73*
substr                                                 builtin function         dcl 64 ref 92
system_area                            based           area(1024)               dcl 60 ref 100 101
word                                   based           bit(36)                  array dcl 36 set ref 81 82* 82 83*

NAME DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
freen_                          000000 constant        entry                    external dcl 53

NAMES DECLARED BY EXPLICIT CONTEXT.
archive_star_                   000025 constant        entry                    external dcl 11
free                            000413 constant        entry                    internal dcl 98 ref 68 96

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       540         560     442         550
Length       732     442        20         136      76           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
archive_star_                       176 external procedure  is an external procedure.  
on unit on line 68                   64 on unit               
free                                 64 internal procedure  is called by several nonquick procedures.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
archive_star_            000100 areap                       archive_star_
                         000102 eptr                        archive_star_
                         000104 nptr                        archive_star_
                         000106 code                        archive_star_
                         000107 ecount                      archive_star_
                         000110 saveword                    archive_star_
                         000111 archive_name                archive_star_
                         000163 dirnamel                    archive_star_
                         000164 n                           archive_star_
                         000165 i                           archive_star_
                         000166 j                           archive_star_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_cs            cat_realloc_cs      call_ext_out_desc   call_ext_out        call_int_this       call_int_other
return              enable              shorten_stack       ext_entry_desc      int_entry           free_based

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
archive$star_entry            com_err_                      get_system_free_area_         hcs_$star_

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000020        36 000052        67 000056        68 000064        70 000106        72 000154        73 000156
     74 000215        77 000216        79 000226        81 000257        82 000261        83 000263        84 000265
     85 000270        87 000272        89 000305        91 000314        92 000320        93 000354        94 000403
     96 000405       105 000411        98 000412       100 000420       101 000427       103 000440


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
