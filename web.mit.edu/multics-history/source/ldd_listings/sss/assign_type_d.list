	COMPILATION LISTING OF SEGMENT assign_type_d
	Compiled by: Multics PL/I Compiler, Release 28d, of September 14, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 10/03/83  1407.6 mst Mon
	    Options: optimize map

        1 /* ******************************************************
        2*   *                                                    *
        3*   *                                                    *
        4*   * Copyright (c) 1972 by Massachusetts Institute of   *
        5*   * Technology and Honeywell Information Systems, Inc. *
        6*   *                                                    *
        7*   *                                                    *
        8*   ****************************************************** */
        9 
       10 assign_type_d:	proc(descriptor_bit,psp,picture_ptr,assign_type,scale_prec) options(support);
       11 
       12 dcl	descriptor_bit bit(36) aligned,
       13 
       14 	(picture_ptr,psp) ptr;
       15 
       16 dcl	assign_type	fixed bin(17),
       17 	scale_prec	fixed bin(35),
       18 
       19 	1 fo		based(addr(scale_prec)) aligned,
       20 	2 scale		fixed bin(17) unal,
       21 	2 prec		fixed bin(17) unal;
       22 
       23 dcl	(addr,addrel,fixed,unspec) builtin;
       24 
       25 dcl	assign_type_p	ext entry(ptr,fixed bin(17),fixed bin(35));
       26 
  1     1 /*	BEGIN INCLUDE FILE ... descriptor.incl.pl1	*/
  1     2 
  1     3 dcl	1 desc_		aligned,
  1     4 	2 version2_	bit(1) unal,
  1     5 	2 type_		fixed bin(6) unsigned unal,
  1     6 	2 pack_		bit(1) unal,
  1     7 	2 dimension_	bit(4) unal,
  1     8 	2 scale_		fixed bin(11) unal,
  1     9 	2 precision_	fixed bin(11) unal;
  1    10 
  1    11 /*	END INCLUDE FILE ... descriptor.incl.pl1	*/
       27 
  2     1 /*	BEGIN INCLUDE FILE...pl1_stack_frame.incl.pl1 */
  2     2 /*	This is an overlay for a stack frame giving pointers
  2     3**	set and used by pl/I programs only.
  2     4**/
  2     5 
  2     6 dcl  1 pl1_stack_frame based aligned,
  2     7         2 pad(32) fixed bin,
  2     8         2 display_ptr ptr,		/* pointer to stack frame of parent block */
  2     9         2 descriptor_ptr ptr,	/* pointer to argument descriptor list */
  2    10         2 linkage_ptr ptr,		/* pointer to base of linkage section */
  2    11         2 text_base_ptr ptr;		/* pointer to base of text */
  2    12 
  2    13 /*	END INCLUDE FILE ... pl1_stack_frame.incl.pl1  */
       28 
  3     1 /* BEGIN INCLUDE FILE ... plio2_ps.incl.pl1 */
  3     2 /* Stream I/O data block used by PL/I I/O runtime routines.
  3     3*
  3     4*   Modified: 31 January 1978 by RAB to change plio2_data_$fsb_thread to plio2_data_fsb_thread_
  3     5**/
  3     6 /* format: style3,idind30 */
  3     7 
  3     8 /* based */
  3     9 
  3    10 declare	1 ps			aligned based (psp),/* items set NORMALLY by compiled procedures */
  3    11 	  2 stack_frame_p		ptr,		/* items set in block prologue */
  3    12 	  2 ST_top_p		ptr,
  3    13 	  2 ST_block_p		ptr,
  3    14 	  2 format_area_p		ptr,
  3    15 	  2 ss_list_p		ptr,
  3    16 	  2 ab_return,				/* items set in prep call */
  3    17 	    3 abret		(3) ptr,
  3    18 	  2 source_p		ptr,		/* addr(fakefsb) for string option,
  3    19*						   addr(file) for explicit file option */
  3    20 	  2 special_list_p		ptr,		/* addr(OKlist) for get data, addr(format_list) for edit */
  3    21 	  2 copy_file_p		ptr,
  3    22 	  2 job			aligned,
  3    23 	    3 explicit_file		bit (1) unal,
  3    24 	    3 string		bit (1) unal,
  3    25 	    3 varying_string	bit (1) unal,
  3    26 	    3 data		bit (1) unal,
  3    27 	    3 edit		bit (1) unal,
  3    28 	    3 list		bit (1) unal,
  3    29 	    3 get			bit (1) unal,
  3    30 	    3 put			bit (1) unal,
  3    31 	    3 page		bit (1) unal,
  3    32 	    3 line		bit (1) unal,
  3    33 	    3 skip		bit (1) unal,
  3    34 	    3 copy		bit (1) unal,
  3    35 	    3 p1p2		bit (1) unal,
  3    36 	    3 bit_string		bit (1) unal,	/* for environment(stringvalue) */
  3    37 	    3 char_string		bit (1) unal,
  3    38 	    3 read		bit (1) unal,
  3    39 	    3 write		bit (1) unal,
  3    40 	    3 rewrite		bit (1) unal,
  3    41 	    3 delete		bit (1) unal,
  3    42 	    3 locate		bit (1) unal,
  3    43 	    3 key			bit (1) unal,
  3    44 	    3 keyto		bit (1) unal,
  3    45 	    3 keyfrom		bit (1) unal,
  3    46 	    3 set			bit (1) unal,
  3    47 	    3 into		bit (1) unal,
  3    48 	    3 ignore		bit (1) unal,
  3    49 	    3 from		bit (1) unal,
  3    50 	    3 version		bit (6) unal,
  3    51 	    3 not_byte_buffer	bit (1) unal,
  3    52 	    3 pad1		bit (1) unal,
  3    53 	    3 packed_ptr		bit (1) unal,
  3    54 	  2 number		fixed bin (15),
  3    55 	  2 value_p		ptr,		/* items set NORMALLY by compiled procedures per transmission */
  3    56 	  2 descriptor		bit (36) aligned,
  3    57 	  2 length		fixed bin (15),	/* may be swallowed into descriptor */
  3    58 	  2 top_half		bit (18) unal,
  3    59 	  2 offset		bit (18) unal,
  3    60 	  2 prep			fixed bin (15),	/* items treated ABNORMALLY, written by user and PLIO */
  3    61 	  2 new_format		fixed bin (15),
  3    62 	  2 switch		aligned,		/* items used by PLIO and not touched by compiled procedures */
  3    63 	    3 first_field		bit (1) unal,
  3    64 	    3 file		bit (1) unal,
  3    65 	    3 transmit_error	bit (1) unal,
  3    66 	    3 semi_sep		bit (1) unal,
  3    67 	    3 pad2		bit (32) unal,
  3    68 	  2 file_p		ptr,
  3    69 	  2 fsbp			ptr,
  3    70 	  2 auxp			ptr,		/* used as addr(ldidata) for GETs */
  3    71 	  2 fabp			ptr,
  3    72 	  2 fab2p			ptr,
  3    73 	  2 vp			ptr,
  3    74 	  2 descr			bit (36) aligned,
  3    75 	  2 start_copy		fixed bin (15),
  3    76 	  2 quick_stream_storage,
  3    77 	    3 a_stored		fixed bin (35),
  3    78 	    3 q_stored		fixed bin (35);
  3    79 
  3    80 /* external static */
  3    81 
  3    82 declare	(
  3    83 	plio2_data_$pspstat,
  3    84 	plio2_data_$fsbpstat,
  3    85 	plio2_data_$badfsbp,
  3    86 	plio2_data_$fabpstat,
  3    87 	plio2_data_$fab2pstat,
  3    88 	plio2_data_$pliostringfsbp
  3    89 	)			ptr external static;
  3    90 
  3    91 dcl	plio2_data_fsb_thread_	ptr ext static initial (null);
  3    92 						/* *system var */
  3    93 
  3    94 declare	(
  3    95 	plio2_data_$badjob		bit (36) aligned,
  3    96 	plio2_data_$undef_file_sw	bit (1) aligned
  3    97 	)			external static;
  3    98 
  3    99 /* END INCLUDE FILE ... plio2_ps.incl.pl1 */
       29 
       30 
       31 	if descriptor_bit="0"b
       32 	then do;
       33 		picture_ptr = psp->ps.stack_frame_p;
       34 		picture_ptr = picture_ptr->pl1_stack_frame.text_base_ptr;
       35 
       36 		picture_ptr = addrel(picture_ptr,psp->ps.top_half);
       37 
       38 		call assign_type_p(picture_ptr,assign_type,scale_prec);
       39 
       40 		return;
       41 	end;
       42 
       43 	unspec(desc_) = descriptor_bit;
       44 
       45 	assign_type = type_*2 + fixed(pack_,17,0);
       46 	fo.scale = scale_;
       47 	fo.prec = precision_;
       48 
       49 	end assign_type_d;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/03/83  1005.3  assign_type_d.pl1                 >spec>on>pl128d>assign_type_d.pl1
27           1    11/30/78  1227.5  descriptor.incl.pl1               >ldd>include>descriptor.incl.pl1
28           2    05/06/74  1742.6  pl1_stack_frame.incl.pl1          >ldd>include>pl1_stack_frame.incl.pl1
29           3    08/13/81  2043.5  plio2_ps.incl.pl1                 >ldd>include>plio2_ps.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
addr                                                   builtin function         dcl 23 ref 46 47
addrel                                                 builtin function         dcl 23 ref 36
assign_type                            parameter       fixed bin(17,0)          dcl 16 set ref 10 38* 45*
assign_type_p                   000010 constant        entry                    external dcl 25 ref 38
desc_                           000100 automatic       structure                level 1 dcl 1-3 set ref 43*
descriptor_bit                         parameter       bit(36)                  dcl 12 ref 10 31 43
fixed                                                  builtin function         dcl 23 ref 45
fo                                     based           structure                level 1 dcl 16
pack_                     0(07) 000100 automatic       bit(1)                   level 2 packed unaligned dcl 1-3 set ref 45
picture_ptr                            parameter       pointer                  dcl 12 set ref 10 33* 34* 34 36* 36 38*
pl1_stack_frame                        based           structure                level 1 dcl 2-6
prec                      0(18)        based           fixed bin(17,0)          level 2 packed unaligned dcl 16 set ref 47*
precision_                0(24) 000100 automatic       fixed bin(11,0)          level 2 packed unaligned dcl 1-3 set ref 47
ps                                     based           structure                level 1 dcl 3-10
psp                                    parameter       pointer                  dcl 12 ref 10 33 36
scale                                  based           fixed bin(17,0)          level 2 packed unaligned dcl 16 set ref 46*
scale_                    0(12) 000100 automatic       fixed bin(11,0)          level 2 packed unaligned dcl 1-3 set ref 46
scale_prec                             parameter       fixed bin(35,0)          dcl 16 set ref 10 38* 46 47
stack_frame_p                          based           pointer                  level 2 dcl 3-10 ref 33
text_base_ptr            46            based           pointer                  level 2 dcl 2-6 ref 34
top_half                 34            based           bit(18)                  level 2 packed unaligned dcl 3-10 ref 36
type_                     0(01) 000100 automatic       fixed bin(6,0)           level 2 packed unsigned unaligned dcl 1-3 set ref 45
unspec                                                 builtin function         dcl 23 set ref 43*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
plio2_data_$badfsbp                    external static pointer                  dcl 3-82
plio2_data_$badjob                     external static bit(36)                  dcl 3-94
plio2_data_$fab2pstat                  external static pointer                  dcl 3-82
plio2_data_$fabpstat                   external static pointer                  dcl 3-82
plio2_data_$fsbpstat                   external static pointer                  dcl 3-82
plio2_data_$pliostringfsbp             external static pointer                  dcl 3-82
plio2_data_$pspstat                    external static pointer                  dcl 3-82
plio2_data_$undef_file_sw              external static bit(1)                   dcl 3-94
plio2_data_fsb_thread_                 external static pointer                  initial dcl 3-91

NAME DECLARED BY EXPLICIT CONTEXT.
assign_type_d                   000011 constant        entry                    external dcl 10

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       134         146     100         144
Length       360     100        12         176      34           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
assign_type_d                        74 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
assign_type_d            000100 desc_                       assign_type_d

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return              ext_entry           set_support

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
assign_type_p

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     10 000004        31 000017        33 000022        34 000026        36 000030        38 000036        40 000050
     43 000051        45 000052        46 000064        47 000071        49 000077


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
