	COMPILATION LISTING OF SEGMENT pa_get_refname
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 02/16/84  1303.5 mst Thu
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 /* format: style2,ind3 */
        7 pa_get_refname:
        8    proc (p_definition_pva_ptr, p_option_name, p_positive_reference_name, p_negative_reference_name);
        9 
       10 /* DESCRIPTION:
       11*
       12*         This  entry  returns  the primary name by which the specified option
       13*     can be referenced in a linear form.  If the option is one  which  sets  a
       14*     flag  based  on  whether  it  is referenced by its "positive" name or its
       15*     "negative" name, then this entry returns the primary "positive"  and  the
       16*     primary "negative" reference names.
       17**/
       18 
       19 /* HISTORY:
       20*
       21*Written by Lindsey L. Spratt, 06/30/83.
       22*Modified:
       23**/
       24 
       25 /* START OF DECLARATIONS */
       26 /* Parameter */
       27 
       28       dcl	    p_definition_pva_ptr   ptr;		/*is a pointer to a standard
       29*                                                argument processing
       30*                                                definition.*/
       31       dcl	    p_option_name	       char (*) varying;	/*is the name of an option for
       32*                                                which the reference name is
       33*                                                desired.*/
       34       dcl	    p_positive_reference_name
       35 			       char (*) varying;	/*is the primary reference
       36*                                                name for the specified option.
       37*                                                If the option has positive and
       38*                                                negative reference names, then
       39*                                                this is the primary positive
       40*                                                reference name.*/
       41       dcl	    p_negative_reference_name
       42 			       char (*) varying;	/*is the primary negative
       43*                                                reference name.  If the option
       44*                                                does not have a negative
       45*                                                reference name, this parameter
       46*                                                gets a null value.*/
       47 
       48 /* Automatic */
       49 
       50       dcl	    (option_name_identifier, synonym_identifier, negative_form_identifier)
       51 			       fixed bin init (0);
       52       dcl	    (pv_dim_idx, syn_pv_dim_idx, neg_pv_dim_idx)
       53 			       fixed bin init (0);
       54       dcl	    print_vector_idx       fixed bin init (0);
       55       dcl	    (finished, have_found_a_vector_for_the_option)
       56 			       bit (1) aligned init ("0"b);
       57 
       58 /* Based */
       59 /* Builtin */
       60 
       61       dcl	    null		       builtin;
       62 
       63 /* Constant */
       64 
       65       dcl	    UNDEFINED_DIMENSION    init (-1) fixed bin internal static options (constant);
       66       dcl	    myname	       init ("pa_get_refname") char (32) varying internal static options (constant);
       67 
       68 /* Entry */
       69 
       70       dcl	    sub_err_	       entry () options (variable);
       71 
       72 /* External */
       73 
       74       dcl	    (
       75 	    error_table_$unimplemented_version,
       76 	    error_table_$bad_arg
       77 	    )		       fixed bin (35) ext;
       78 
       79 /* END OF DECLARATIONS */
       80 
       81       print_vector_array_ptr = p_definition_pva_ptr;
       82       call CHECK_VERSION (print_vector_array.version, PRINT_VECTOR_ARRAY_VERSION_2, "print_vector_array");
       83 
       84       call SET_ID_REQUIRED (print_vector_array_ptr, OPTION_NAME_DIM_NAME, option_name_identifier);
       85       call SET_ID_REQUIRED (print_vector_array_ptr, SYNONYM_DIM_NAME, synonym_identifier);
       86       call SET_ID (print_vector_array_ptr, NEGATIVE_FORM_DIM_NAME, negative_form_identifier);
       87       if negative_form_identifier = UNDEFINED_DIMENSION
       88       then neg_pv_dim_idx = UNDEFINED_DIMENSION;
       89       else neg_pv_dim_idx = 0;
       90 
       91       p_negative_reference_name, p_positive_reference_name = "";
       92 
       93 DEFINITION_LOOP:
       94       do print_vector_idx = 1 to print_vector_array.number_of_vectors while (^finished);
       95          print_vector_ptr = print_vector_array.vector_slot (print_vector_idx);
       96          call GET_DIM_IDX (print_vector_ptr, option_name_identifier, pv_dim_idx);
       97          if pv_dim_idx ^= UNDEFINED_DIMENSION
       98          then if print_vector.dimension (pv_dim_idx).value = p_option_name
       99 	    then
      100 FOUND_VECTOR_FOR_OPTION:
      101 	       do;
      102 		have_found_a_vector_for_the_option = "1"b;
      103 		call GET_DIM_IDX (print_vector_ptr, synonym_identifier, syn_pv_dim_idx);
      104 		if syn_pv_dim_idx ^= UNDEFINED_DIMENSION
      105 		then
      106 PROCESS_REFNAME:
      107 		   do;
      108 		      if negative_form_identifier ^= UNDEFINED_DIMENSION
      109 		      then call GET_DIM_IDX (print_vector_ptr, negative_form_identifier, neg_pv_dim_idx);
      110 		      if neg_pv_dim_idx = UNDEFINED_DIMENSION
      111 		      then
      112 		         do;
      113 			  if p_positive_reference_name = ""
      114 			  then p_positive_reference_name = print_vector.dimension (syn_pv_dim_idx).value;
      115 			  finished =
      116 			     (p_negative_reference_name ^= "" | negative_form_identifier = UNDEFINED_DIMENSION);
      117 
      118 		         end;
      119 		      else
      120 		         do;
      121 			  if p_negative_reference_name = ""
      122 			  then p_negative_reference_name = print_vector.dimension (syn_pv_dim_idx).value;
      123 			  finished = (p_positive_reference_name ^= "");
      124 		         end;
      125 		   end PROCESS_REFNAME;
      126 	       end FOUND_VECTOR_FOR_OPTION;
      127 	    else finished = have_found_a_vector_for_the_option;
      128       end DEFINITION_LOOP;
      129       return;
      130 
      131 CHECK_VERSION:
      132    proc (p_received_version, p_expected_version, p_structure_name);
      133       dcl	    p_received_version     fixed bin (35);
      134       dcl	    p_expected_version     fixed bin (35);
      135       dcl	    p_structure_name       char (*);
      136 
      137       if p_received_version ^= p_expected_version
      138       then call
      139 	    sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
      140 	    "^/Expected version ^a of the ^a structure.
      141 Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);
      142 
      143    end CHECK_VERSION;
      144 
      145 SET_ID:
      146    proc (si_p_pva_ptr, si_p_dim_name, si_p_dim_id);
      147       dcl	    si_p_pva_ptr	       ptr parameter;
      148       dcl	    si_p_dim_name	       char (*) varying parameter;
      149       dcl	    si_p_dim_id	       fixed bin parameter;
      150 
      151       dcl	    si_dim_is_required     bit (1) aligned init ("0"b);
      152 
      153       dcl	    requote_string_	       entry (char (*)) returns (char (*));
      154       goto SI_JOIN;
      155 
      156 SET_ID_REQUIRED:
      157    entry (si_p_pva_ptr, si_p_dim_name, si_p_dim_id);
      158       si_dim_is_required = "1"b;
      159 
      160 SI_JOIN:
      161       do si_p_dim_id = 1 to si_p_pva_ptr -> print_vector_array.number_of_dimensions
      162          while (si_p_pva_ptr -> print_vector_array.dimension_table (si_p_dim_id).name ^= si_p_dim_name);
      163       end;
      164       if si_p_dim_id > si_p_pva_ptr -> print_vector_array.number_of_dimensions
      165       then if si_dim_is_required
      166 	 then call
      167 	         sub_err_ (error_table_$bad_arg, myname, ACTION_CANT_RESTART, null, 0,
      168 	         "^/The argument processing definition structure must have a ^a dimension in it,
      169 but the one provided does not.", requote_string_ ((si_p_dim_name)));
      170 	 else si_p_dim_id = UNDEFINED_DIMENSION;
      171 
      172    end SET_ID;
      173 
      174 GET_DIM_IDX:
      175    proc (gdi_p_pv_ptr, gdi_p_identifier, gdi_p_dim_idx);
      176       dcl	    gdi_p_pv_ptr	       ptr;
      177       dcl	    gdi_p_identifier       fixed bin;
      178       dcl	    gdi_p_dim_idx	       fixed bin;
      179 
      180       do gdi_p_dim_idx = 1 to gdi_p_pv_ptr -> print_vector.number_of_dimensions
      181          while (gdi_p_pv_ptr -> print_vector.dimension (gdi_p_dim_idx).identifier ^= gdi_p_identifier);
      182       end;
      183       if gdi_p_dim_idx > gdi_p_pv_ptr -> print_vector.number_of_dimensions
      184       then gdi_p_dim_idx = UNDEFINED_DIMENSION;
      185    end GET_DIM_IDX;
      186 
  1     1 /* BEGIN INCLUDE FILE sub_err_flags.incl.pl1 BIM 11/81 */
  1     2 /* format: style3 */
  1     3 
  1     4 /* These constants are to be used for the flags argument of sub_err_ */
  1     5 /* They are just "string (condition_info_header.action_flags)" */
  1     6 
  1     7 declare	(
  1     8 	ACTION_CAN_RESTART	init (""b),
  1     9 	ACTION_CANT_RESTART init ("1"b),
  1    10 	ACTION_DEFAULT_RESTART
  1    11 			init ("01"b),
  1    12 	ACTION_QUIET_RESTART
  1    13 			init ("001"b),
  1    14 	ACTION_SUPPORT_SIGNAL
  1    15 			init ("0001"b)
  1    16 	)		bit (36) aligned internal static options (constant);
  1    17 
  1    18 /* End include file */
      187 
      188 
  2     1 /* ***********************************************************
  2     2*   *                                                         *
  2     3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
  2     4*   *                                                         *
  2     5*   *********************************************************** */
  2     6 /* BEGIN INCLUDE FILE  -  vu_print_vector_array.incl.pl1 */
  2     7 /* Written by Matthew C. Pierret, 01/21/82
  2     8*Modified:
  2     9**/
  2    10 
  2    11 /* format: style2,ind3 */
  2    12      dcl	   1 print_vector_array   based (print_vector_array_ptr),
  2    13 	     2 version	      fixed bin (35),
  2    14 	     2 number_of_dimensions
  2    15 			      fixed bin (17),
  2    16 	     2 maximum_dimension_name_length
  2    17 			      fixed bin (17),
  2    18 	     2 number_of_vectors  fixed bin (17),
  2    19 	     2 number_of_vector_slots
  2    20 			      fixed bin (17),
  2    21 	     2 dimension_table    (pva_number_of_dimensions refer (print_vector_array.number_of_dimensions)),
  2    22 	       3 name	      char (pva_maximum_dimension_name_length
  2    23 			      refer (print_vector_array.maximum_dimension_name_length)) varying,
  2    24 	       3 descriptor_ptr   ptr,
  2    25 	       3 cv_to_print      entry (ptr, fixed bin (17), fixed bin (17), ptr, ptr, fixed bin (35)),
  2    26 	       3 cv_to_typed      entry (ptr, fixed bin (17), fixed bin (17), ptr, ptr, fixed bin (35)),
  2    27 	       3 maximum_value_length
  2    28 			      fixed bin (17),
  2    29 	     2 vector_slot	      (pva_number_of_vector_slots refer (print_vector_array.number_of_vector_slots)) ptr;
  2    30 
  2    31      dcl	   1 print_vector	      based (print_vector_ptr),
  2    32 	     2 number_of_dimensions
  2    33 			      fixed bin (17),
  2    34 	     2 maximum_value_length
  2    35 			      fixed bin (35),
  2    36 	     2 dimension	      (pv_number_of_dimensions refer (print_vector.number_of_dimensions)),
  2    37 	       3 identifier	      fixed bin (17),
  2    38 	       3 value	      char (pv_maximum_value_length refer (print_vector.maximum_value_length)) varying;
  2    39 
  2    40      dcl	   pva_number_of_dimensions
  2    41 			      fixed bin;
  2    42      dcl	   pva_number_of_vector_slots
  2    43 			      fixed bin;
  2    44      dcl	   pva_maximum_dimension_name_length
  2    45 			      fixed bin;
  2    46      dcl	   pv_number_of_dimensions
  2    47 			      fixed bin;
  2    48      dcl	   pv_maximum_value_length
  2    49 			      fixed bin;
  2    50 
  2    51      dcl	   print_vector_array_ptr ptr;
  2    52      dcl	   print_vector_ptr	      ptr;
  2    53      dcl	   PRINT_VECTOR_ARRAY_VERSION_2
  2    54 			      fixed bin (35) init (2) internal static options (constant);
  2    55 
  2    56 /* END INCLUDE FILE  -  vu_print_vector_array.incl.pl1 */
      189 
      190 
  3     1 /* BEGIN INCLUDE FILE - pa_dim_name_constants.incl.pl1 */
  3     2 
  3     3 /* DESCRIPTION:
  3     4*     This include file contains constants which are the names of all  of the
  3     5*dimension found in the definition and result print_vector_arrays.
  3     6**/
  3     7 
  3     8 /* HISTORY:
  3     9*Written by Lindsey Spratt, 06/30/83.
  3    10*Modified:
  3    11*07/01/83 by Lindsey Spratt:  Added DEFINITION_ORDER_DIM_NAME.
  3    12*08/26/83 by S. Krupp:  Added all new dimensions.
  3    13**/
  3    14 
  3    15 /* format: style2,ind3 */
  3    16      dcl	   (
  3    17 	   COMMAND_NAME_DIM_NAME  init ("command name"),
  3    18 	   DEFAULT_LINEAR_FORM_DIM_NAME
  3    19 			      init ("default linear form"),
  3    20 	   OPTION_NAME_DIM_NAME   init ("option"),
  3    21 	   SYNONYM_DIM_NAME	      init ("synonym"),
  3    22 	   NEGATIVE_FORM_DIM_NAME init ("negative form"),
  3    23 	   EXCLUDED_OPTION_DIM_NAME
  3    24 			      init ("excluded option"),
  3    25 	   INITIAL_IMPLIED_OPTION_DIM_NAME
  3    26 			      init ("initial implied option"),
  3    27 	   NEXT_IMPLIED_OPTION_DIM_NAME
  3    28 			      init ("next implied option"),
  3    29 	   ARGUMENT_DIM_NAME      init ("argument"),
  3    30 	   INITIAL_ARGUMENT_DIM_NAME
  3    31 			      init ("initial argument"),
  3    32 	   NEXT_ARGUMENT_DIM_NAME init ("next argument"),
  3    33 	   DEFAULT_VALUE_DIM_NAME init ("default value"),
  3    34 	   NEGATIVE_VALUE_DIM_NAME
  3    35 			      init ("negative value"),
  3    36 	   ARGUMENT_VALIDATION_STRING_DIM_NAME
  3    37 			      init ("validation string"),
  3    38 	   EXPLANATION_DIM_NAME   init ("explanation"),
  3    39 	   ARGUMENT_PRESENCE_DIM_NAME
  3    40 			      init ("presence required"),
  3    41 	   INSTANCE_DIM_NAME      init ("instance"),
  3    42 	   ORDER_DIM_NAME	      init ("order"),
  3    43 	   DEFINITION_ORDER_DIM_NAME
  3    44 			      init ("definition order"),
  3    45              FORCE_LITERAL_DIM_NAME init ("force literal"),
  3    46 	   UNEXCLUDED_OPTION_DIM_NAME
  3    47                                     init ("unexcluded option"),
  3    48              VALIDATE_RESULT_DIM_NAME
  3    49                                     init ("validate result"),
  3    50              VALIDATE_RESULT_EXPLANATION_DIM_NAME
  3    51                                     init ("validate result explanation"),
  3    52              VALIDATE_EXPLANATION_DIM_NAME
  3    53                                     init ("validate explanation")
  3    54 	   )		      char (64) varying internal static options (constant);
  3    55 
  3    56 /* END INCLUDE FILE - pa_dim_name_constants.incl.pl1 */
      191 
      192    end pa_get_refname;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    02/16/84  1249.8  pa_get_refname.pl1                >spec>on>mtape>pa_get_refname.pl1
187          1    04/16/82  0958.1  sub_err_flags.incl.pl1            >ldd>include>sub_err_flags.incl.pl1
189          2    02/16/84  1230.3  vu_print_vector_array.incl.pl1    >spec>on>mtape>vu_print_vector_array.incl.pl1
191          3    02/16/84  1230.3  pa_dim_name_constants.incl.pl1    >spec>on>mtape>pa_dim_name_constants.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ACTION_CANT_RESTART             000103 constant        bit(36)                  initial dcl 1-7 set ref 137* 164*
NEGATIVE_FORM_DIM_NAME          000000 constant        varying char(64)         initial dcl 3-16 set ref 86*
OPTION_NAME_DIM_NAME            000042 constant        varying char(64)         initial dcl 3-16 set ref 84*
PRINT_VECTOR_ARRAY_VERSION_2    000111 constant        fixed bin(35,0)          initial dcl 2-53 set ref 82*
SYNONYM_DIM_NAME                000021 constant        varying char(64)         initial dcl 3-16 set ref 85*
UNDEFINED_DIMENSION             001216 constant        fixed bin(17,0)          initial dcl 65 ref 87 87 97 104 108 110 115 170 183
dimension                 2            based           structure                array level 2 unaligned dcl 2-31
dimension_table           6            based           structure                array level 2 unaligned dcl 2-12
error_table_$bad_arg            000014 external static fixed bin(35,0)          dcl 74 set ref 164*
error_table_$unimplemented_version
                                000012 external static fixed bin(35,0)          dcl 74 set ref 137*
finished                        000107 automatic       bit(1)                   initial dcl 55 set ref 55* 93 115* 123* 127*
gdi_p_dim_idx                          parameter       fixed bin(17,0)          dcl 178 set ref 174 180* 180* 183 183*
gdi_p_identifier                       parameter       fixed bin(17,0)          dcl 177 ref 174 180
gdi_p_pv_ptr                           parameter       pointer                  dcl 176 ref 174 180 180 183
have_found_a_vector_for_the_option
                                000110 automatic       bit(1)                   initial dcl 55 set ref 55* 102* 127
identifier                2            based           fixed bin(17,0)          array level 3 dcl 2-31 ref 180
maximum_dimension_name_length
                          2            based           fixed bin(17,0)          level 2 dcl 2-12 ref 95 160 160
maximum_value_length      1            based           fixed bin(35,0)          level 2 dcl 2-31 ref 97 97 113 113 121 121 180 180
myname                          000063 constant        varying char(32)         initial dcl 66 set ref 137* 164*
name                      6            based           varying char             array level 3 dcl 2-12 ref 160
neg_pv_dim_idx                  000105 automatic       fixed bin(17,0)          initial dcl 52 set ref 52* 87* 89* 108* 110
negative_form_identifier        000102 automatic       fixed bin(17,0)          initial dcl 50 set ref 50* 86* 87 108 108* 115
null                                                   builtin function         dcl 61 ref 137 137 164 164
number_of_dimensions      1            based           fixed bin(17,0)          level 2 in structure "print_vector_array" dcl 2-12
                                                                                  in procedure "pa_get_refname" ref 95 160 164
number_of_dimensions                   based           fixed bin(17,0)          level 2 in structure "print_vector" dcl 2-31
                                                                                  in procedure "pa_get_refname" ref 180 183
number_of_vectors         3            based           fixed bin(17,0)          level 2 dcl 2-12 ref 93
option_name_identifier          000100 automatic       fixed bin(17,0)          initial dcl 50 set ref 50* 84* 96*
p_definition_pva_ptr                   parameter       pointer                  dcl 28 ref 7 81
p_expected_version                     parameter       fixed bin(35,0)          dcl 134 set ref 131 137 137*
p_negative_reference_name              parameter       varying char             dcl 41 set ref 7 91* 115 121 121*
p_option_name                          parameter       varying char             dcl 31 ref 7 97
p_positive_reference_name              parameter       varying char             dcl 34 set ref 7 91* 113 113* 123
p_received_version                     parameter       fixed bin(35,0)          dcl 133 set ref 131 137 137*
p_structure_name                       parameter       char                     unaligned dcl 135 set ref 131 137*
print_vector                           based           structure                level 1 unaligned dcl 2-31
print_vector_array                     based           structure                level 1 unaligned dcl 2-12
print_vector_array_ptr          000112 automatic       pointer                  dcl 2-51 set ref 81* 82 84* 85* 86* 93 95
print_vector_idx                000106 automatic       fixed bin(17,0)          initial dcl 54 set ref 54* 93* 95*
print_vector_ptr                000114 automatic       pointer                  dcl 2-52 set ref 95* 96* 97 103* 108* 113 121
pv_dim_idx                      000103 automatic       fixed bin(17,0)          initial dcl 52 set ref 52* 96* 97 97
requote_string_                 000016 constant        entry                    external dcl 153 ref 164
si_dim_is_required              000134 automatic       bit(1)                   initial dcl 151 set ref 151* 158* 164
si_p_dim_id                            parameter       fixed bin(17,0)          dcl 149 set ref 145 156 160* 160* 164 170*
si_p_dim_name                          parameter       varying char             dcl 148 ref 145 156 160 164
si_p_pva_ptr                           parameter       pointer                  dcl 147 ref 145 156 160 160 164
sub_err_                        000010 constant        entry                    external dcl 70 ref 137 164
syn_pv_dim_idx                  000104 automatic       fixed bin(17,0)          initial dcl 52 set ref 52* 103* 104 113 121
synonym_identifier              000101 automatic       fixed bin(17,0)          initial dcl 50 set ref 50* 85* 103*
value                     3            based           varying char             array level 3 dcl 2-31 ref 97 113 121
vector_slot                            based           pointer                  array level 2 dcl 2-12 ref 95
version                                based           fixed bin(35,0)          level 2 dcl 2-12 set ref 82*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ACTION_CAN_RESTART                     internal static bit(36)                  initial dcl 1-7
ACTION_DEFAULT_RESTART                 internal static bit(36)                  initial dcl 1-7
ACTION_QUIET_RESTART                   internal static bit(36)                  initial dcl 1-7
ACTION_SUPPORT_SIGNAL                  internal static bit(36)                  initial dcl 1-7
ARGUMENT_DIM_NAME                      internal static varying char(64)         initial dcl 3-16
ARGUMENT_PRESENCE_DIM_NAME             internal static varying char(64)         initial dcl 3-16
ARGUMENT_VALIDATION_STRING_DIM_NAME    internal static varying char(64)         initial dcl 3-16
COMMAND_NAME_DIM_NAME                  internal static varying char(64)         initial dcl 3-16
DEFAULT_LINEAR_FORM_DIM_NAME           internal static varying char(64)         initial dcl 3-16
DEFAULT_VALUE_DIM_NAME                 internal static varying char(64)         initial dcl 3-16
DEFINITION_ORDER_DIM_NAME              internal static varying char(64)         initial dcl 3-16
EXCLUDED_OPTION_DIM_NAME               internal static varying char(64)         initial dcl 3-16
EXPLANATION_DIM_NAME                   internal static varying char(64)         initial dcl 3-16
FORCE_LITERAL_DIM_NAME                 internal static varying char(64)         initial dcl 3-16
INITIAL_ARGUMENT_DIM_NAME              internal static varying char(64)         initial dcl 3-16
INITIAL_IMPLIED_OPTION_DIM_NAME        internal static varying char(64)         initial dcl 3-16
INSTANCE_DIM_NAME                      internal static varying char(64)         initial dcl 3-16
NEGATIVE_VALUE_DIM_NAME                internal static varying char(64)         initial dcl 3-16
NEXT_ARGUMENT_DIM_NAME                 internal static varying char(64)         initial dcl 3-16
NEXT_IMPLIED_OPTION_DIM_NAME           internal static varying char(64)         initial dcl 3-16
ORDER_DIM_NAME                         internal static varying char(64)         initial dcl 3-16
UNEXCLUDED_OPTION_DIM_NAME             internal static varying char(64)         initial dcl 3-16
VALIDATE_EXPLANATION_DIM_NAME          internal static varying char(64)         initial dcl 3-16
VALIDATE_RESULT_DIM_NAME               internal static varying char(64)         initial dcl 3-16
VALIDATE_RESULT_EXPLANATION_DIM_NAME   internal static varying char(64)         initial dcl 3-16
pv_maximum_value_length                automatic       fixed bin(17,0)          dcl 2-48
pv_number_of_dimensions                automatic       fixed bin(17,0)          dcl 2-46
pva_maximum_dimension_name_length      automatic       fixed bin(17,0)          dcl 2-44
pva_number_of_dimensions               automatic       fixed bin(17,0)          dcl 2-40
pva_number_of_vector_slots             automatic       fixed bin(17,0)          dcl 2-42

NAMES DECLARED BY EXPLICIT CONTEXT.
CHECK_VERSION                   000546 constant        entry                    internal dcl 131 ref 82
DEFINITION_LOOP                 000322 constant        label                    dcl 93
FOUND_VECTOR_FOR_OPTION         000411 constant        label                    dcl 97
GET_DIM_IDX                     001052 constant        entry                    internal dcl 174 ref 96 103 108
PROCESS_REFNAME                 000420 constant        label                    dcl 104
SET_ID                          000646 constant        entry                    internal dcl 145 ref 86
SET_ID_REQUIRED                 000661 constant        entry                    internal dcl 156 ref 84 85
SI_JOIN                         000675 constant        label                    dcl 160 ref 154
pa_get_refname                  000206 constant        entry                    external dcl 7

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1304        1324    1217        1314
Length      1554    1217        20         213      64           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
pa_get_refname                      265 external procedure  is an external procedure.  
CHECK_VERSION                           internal procedure  shares stack frame of external procedure pa_get_refname.  
SET_ID                                  internal procedure  shares stack frame of external procedure pa_get_refname.  
GET_DIM_IDX                             internal procedure  shares stack frame of external procedure pa_get_refname.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
pa_get_refname           000100 option_name_identifier      pa_get_refname
                         000101 synonym_identifier          pa_get_refname
                         000102 negative_form_identifier    pa_get_refname
                         000103 pv_dim_idx                  pa_get_refname
                         000104 syn_pv_dim_idx              pa_get_refname
                         000105 neg_pv_dim_idx              pa_get_refname
                         000106 print_vector_idx            pa_get_refname
                         000107 finished                    pa_get_refname
                         000110 have_found_a_vector_for_the_option
                                                            pa_get_refname
                         000112 print_vector_array_ptr      pa_get_refname
                         000114 print_vector_ptr            pa_get_refname
                         000134 si_dim_is_required          SET_ID

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_e_as              r_ne_as             alloc_cs            call_ext_out_desc   return              shorten_stack
ext_entry_desc

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
requote_string_               sub_err_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$bad_arg          error_table_$unimplemented_version




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
      7 000201        50 000233        52 000236        54 000241        55 000242        81 000244        82 000250
     84 000275        85 000300        86 000303        87 000306        89 000314        91 000315        93 000322
     95 000335        96 000362        97 000364       102 000411       103 000413       104 000415       108 000420
    110 000425       113 000430       115 000462       118 000476       121 000477       123 000531       126 000540
    127 000541       128 000543       129 000545       131 000546       137 000557       143 000641       151 000643
    145 000646       154 000660       156 000661       158 000673       160 000675       163 000737       164 000741
    170 001046       172 001051       174 001052       180 001054       182 001103       183 001105       185 001113


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
