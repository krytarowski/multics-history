	COMPILATION LISTING OF SEGMENT base_to_core
	Compiled by: Multics PL/I Compiler, Release 28d, of September 14, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 10/03/83  1623.6 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 /* procedure to store ptr value held in base register
       12*
       13*   Initial Version: 24 July 1971 by BLW
       14*	Modified: 13 February 1973 by RAB
       15*	Modified: 11 June 1976 by RAB
       16*	Modified: 29 March 1978 by PCK to allow sp to be stored
       17*	Modified:	30 March 1980 by RAB for reference.(aligned padded)_for_store_ref.
       18*		See prepare_operand for details.	*/
       19 
       20 base_to_core: proc(p_base,var);
       21 
       22 dcl	p_base fixed bin,
       23 	var ptr;
       24 
       25 dcl	(p,p1,q,q1) ptr,
       26 	base fixed bin,
       27 	update bit(1) aligned,
       28 	dt fixed bin,
       29 	state_man$flush_ref entry(ptr),
       30 	base_man$update_base entry(fixed bin,ptr,fixed bin),
       31 	store entry(ptr),
       32 	expmac$zero entry(fixed bin(15)),
       33 	load entry(ptr,fixed bin),
       34 	(base_man$lock,base_man$unlock) entry(fixed bin),
       35 	expmac entry(fixed bin(15),ptr),
       36 	c_a entry(fixed bin,fixed bin) returns(ptr),
       37 	expmac$two_eis entry(fixed bin(15),ptr,ptr);
       38 
       39 dcl	(max,null) builtin;
       40 
       41 dcl (	store_base(23:24,7)	init(61,409,622,623,624,625,533,		/* unpacked */
       42 			     630,631,632,633,634,635,730),		/* packed */
       43 	unpk_to_pk	init(407),
       44 	move_bits		init(99),
       45 	base_to_aq(6)	init(410,411,626,627,628,629)) fixed bin(15) int static;
       46 
  1     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
  1     2 
  1     3 dcl	1 reference		based aligned,
  1     4 	2 node_type		bit(9) unaligned,
  1     5 	2 array_ref		bit(1) unaligned,
  1     6 	2 varying_ref		bit(1) unaligned,
  1     7 	2 shared			bit(1) unaligned,
  1     8 	2 put_data_sw		bit(1) unaligned,
  1     9 	2 processed		bit(1) unaligned,
  1    10 	2 units			fixed(3) unaligned,
  1    11 	2 ref_count		fixed(17) unaligned,
  1    12 	2 c_offset		fixed(24),
  1    13 	2 c_length		fixed(24),
  1    14 	2 symbol			ptr unaligned,
  1    15 	2 qualifier		ptr unaligned,
  1    16 	2 offset			ptr unaligned,
  1    17 	2 length			ptr unaligned,
  1    18 	2 subscript_list		ptr unaligned,
  1    19 						/* these fields are used by the 645 code generator */
  1    20 	2 address			structure unaligned,
  1    21 	  3 base			bit(3),
  1    22 	  3 offset		bit(15),
  1    23 	  3 op			bit(9),
  1    24 	  3 no_address		bit(1),
  1    25 	  3 inhibit		bit(1),
  1    26 	  3 ext_base		bit(1),
  1    27 	  3 tag			bit(6),
  1    28 	2 info			structure unaligned,
  1    29 	  3 address_in		structure,
  1    30 	    4 b			dimension(0:7) bit(1),
  1    31 	    4 storage		bit(1),
  1    32 	  3 value_in		structure,
  1    33 	    4 a			bit(1),
  1    34 	    4 q			bit(1),
  1    35 	    4 aq			bit(1),
  1    36 	    4 string_aq		bit(1),
  1    37 	    4 complex_aq		bit(1),
  1    38 	    4 decimal_aq		bit(1),
  1    39 	    4 b			dimension(0:7) bit(1),
  1    40 	    4 storage		bit(1),
  1    41 	    4 indicators		bit(1),
  1    42 	    4 x			dimension(0:7) bit(1),
  1    43 	  3 other			structure,
  1    44 	    4 big_offset		bit(1),
  1    45 	    4 big_length		bit(1),
  1    46 	    4 modword_in_offset	bit(1),
  1    47 	2 data_type		fixed(5) unaligned,
  1    48 	2 bits			structure unaligned,
  1    49 	  3 padded_ref		bit(1),
  1    50 	  3 aligned_ref		bit(1),
  1    51 	  3 long_ref		bit(1),
  1    52 	  3 forward_ref		bit(1),
  1    53 	  3 ic_ref		bit(1),
  1    54 	  3 temp_ref		bit(1),
  1    55 	  3 defined_ref		bit(1),
  1    56 	  3 evaluated		bit(1),
  1    57 	  3 allocate		bit(1),
  1    58 	  3 allocated		bit(1),
  1    59 	  3 aliasable		bit(1),
  1    60 	  3 even			bit(1),
  1    61 	  3 perm_address		bit(1),
  1    62 	  3 aggregate		bit(1),
  1    63 	  3 hit_zero		bit(1),
  1    64 	  3 dont_save		bit(1),
  1    65 	  3 fo_in_qual		bit(1),
  1    66 	  3 hard_to_load		bit(1),
  1    67 	2 relocation		bit(12) unaligned,
  1    68 	2 more_bits		structure unaligned,
  1    69 	  3 substr		bit(1),
  1    70 	  3 padded_for_store_ref	bit(1),
  1    71 	  3 aligned_for_store_ref	bit(1),
  1    72 	  3 mbz			bit(15),
  1    73 	2 store_ins		bit(18) unaligned;
  1    74 
  1    75 /* END INCLUDE FILE ... reference.incl.pl1 */
       47 
  2     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
  2     2 
  2     3 dcl	1 symbol			based aligned,
  2     4 	2 node_type		bit(9) unal,
  2     5 	2 source_id		structure unal,
  2     6 	  3 file_number		bit(8),
  2     7 	  3 line_number		bit(14),
  2     8 	  3 statement_number	bit(5),
  2     9 	2 location		fixed(18) unal unsigned,
  2    10 	2 allocated		bit(1) unal,
  2    11 	2 dcl_type		bit(3) unal,
  2    12 	2 reserved		bit(6) unal,
  2    13 	2 pix			unal,
  2    14 	  3 pic_fixed		bit(1) unal,
  2    15 	  3 pic_float		bit(1) unal,
  2    16 	  3 pic_char		bit(1) unal,
  2    17 	  3 pic_scale		fixed(7) unal,
  2    18 	  3 pic_size		fixed(7) unal,
  2    19 	2 level			fixed(8) unal,
  2    20 	2 boundary		fixed(3) unal,
  2    21 	2 size_units		fixed(3) unal,
  2    22 	2 scale			fixed(7) unal,
  2    23 	2 runtime			bit(18) unal,
  2    24 	2 runtime_offset		bit(18) unal,
  2    25 	2 block_node		ptr unal,
  2    26 	2 token			ptr unal,
  2    27 	2 next			ptr unal,
  2    28 	2 multi_use		ptr unal,
  2    29 	2 cross_references		ptr unal,
  2    30 	2 initial			ptr unal,
  2    31 	2 array			ptr unal,
  2    32 	2 descriptor		ptr unal,
  2    33 	2 equivalence		ptr unal,
  2    34 	2 reference		ptr unal,
  2    35 	2 general			ptr unal,
  2    36 	2 father			ptr unal,
  2    37 	2 brother			ptr unal,
  2    38 	2 son			ptr unal,
  2    39 	2 word_size		ptr unal,
  2    40 	2 bit_size		ptr unal,
  2    41 	2 dcl_size		ptr unal,
  2    42 	2 symtab_size		ptr unal,
  2    43 	2 c_word_size		fixed(24),
  2    44 	2 c_bit_size		fixed(24),
  2    45 	2 c_dcl_size		fixed(24),
  2    46 
  2    47 	2 attributes		structure aligned,
  2    48 	  3 data_type		structure unal,
  2    49 	    4 structure		bit(1) ,
  2    50 	    4 fixed		bit(1),
  2    51 	    4 float		bit(1),
  2    52 	    4 bit			bit(1),
  2    53 	    4 char		bit(1),
  2    54 	    4 ptr			bit(1),
  2    55 	    4 offset		bit(1),
  2    56 	    4 area		bit(1),
  2    57 	    4 label		bit(1),
  2    58 	    4 entry		bit(1),
  2    59 	    4 file		bit(1),
  2    60 	    4 arg_descriptor	bit(1),
  2    61 	    4 storage_block		bit(1),
  2    62 	    4 explicit_packed	bit(1), /* options(packed) */
  2    63 	    4 condition		bit(1),
  2    64 	    4 format		bit(1),
  2    65 	    4 builtin		bit(1),
  2    66 	    4 generic		bit(1),
  2    67 	    4 picture		bit(1),
  2    68 
  2    69 	  3 misc_attributes		structure unal,
  2    70 	    4 dimensioned		bit(1),
  2    71 	    4 initialed		bit(1),
  2    72 	    4 aligned		bit(1),
  2    73 	    4 unaligned		bit(1),
  2    74 	    4 signed		bit(1),
  2    75 	    4 unsigned		bit(1),
  2    76 	    4 precision		bit(1),
  2    77 	    4 varying		bit(1),
  2    78 	    4 local		bit(1),
  2    79 	    4 decimal		bit(1),
  2    80 	    4 binary		bit(1),
  2    81 	    4 real		bit(1),
  2    82 	    4 complex		bit(1),
  2    83 	    4 variable		bit(1),
  2    84 	    4 reducible		bit(1),
  2    85 	    4 irreducible		bit(1),
  2    86 	    4 returns		bit(1),
  2    87 	    4 position		bit(1),
  2    88 	    4 internal		bit(1),
  2    89 	    4 external		bit(1),
  2    90 	    4 like		bit(1),
  2    91 	    4 member		bit(1),
  2    92 	    4 non_varying		bit(1),
  2    93 	    4 options		bit(1),
  2    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
  2    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
  2    96 
  2    97 	  3 storage_class		structure unal,
  2    98 	    4 auto		bit(1),
  2    99 	    4 based		bit(1),
  2   100 	    4 static		bit(1),
  2   101 	    4 controlled		bit(1),
  2   102 	    4 defined		bit(1),
  2   103 	    4 parameter		bit(1),
  2   104 	    4 param_desc		bit(1),
  2   105 	    4 constant		bit(1),
  2   106 	    4 temporary		bit(1),
  2   107 	    4 return_value		bit(1),
  2   108 
  2   109 	  3 file_attributes		structure unal,
  2   110 	    4 print		bit(1),
  2   111 	    4 input		bit(1),
  2   112 	    4 output		bit(1),
  2   113 	    4 update		bit(1),
  2   114 	    4 stream		bit(1),
  2   115 	    4 reserved_1		bit(1),
  2   116 	    4 record		bit(1),
  2   117 	    4 sequential		bit(1),
  2   118 	    4 direct		bit(1),
  2   119 	    4 interactive		bit(1),		/* env(interactive) */
  2   120 	    4 reserved_2		bit(1),
  2   121 	    4 reserved_3		bit(1),
  2   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
  2   123 	    4 keyed		bit(1),
  2   124 	    4 reserved_4		bit(1),
  2   125 	    4 environment		bit(1),
  2   126 
  2   127 	  3 compiler_developed	structure unal,
  2   128 	    4 aliasable		bit(1),
  2   129 	    4 packed		bit(1),
  2   130 	    4 passed_as_arg		bit(1),
  2   131 	    4 allocate		bit(1),
  2   132 	    4 set			bit(1),
  2   133 	    4 exp_extents		bit(1),
  2   134 	    4 refer_extents		bit(1),
  2   135 	    4 star_extents		bit(1),
  2   136 	    4 isub		bit(1),
  2   137 	    4 put_in_symtab		bit(1),
  2   138 	    4 contiguous		bit(1),
  2   139 	    4 put_data		bit(1),
  2   140 	    4 overlayed		bit(1),
  2   141 	    4 error		bit(1),
  2   142 	    4 symtab_processed	bit(1),
  2   143 	    4 overlayed_by_builtin	bit(1),
  2   144 	    4 defaulted		bit(1),
  2   145 	    4 connected		bit(1);
  2   146 
  2   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
       48 
  3     1 /* BEGIN INCLUDE FILE ... machine_state.incl.pl1 */
  3     2 
  3     3 dcl	cg_static_$m_s_p ptr ext static,
  3     4 	m_s_p ptr init(cg_static_$m_s_p);
  3     5 
  3     6 dcl	1 machine_state	aligned based(m_s_p),
  3     7 	2 node_type	bit(9),
  3     8 	2 indicators	fixed bin,
  3     9 	2 next		ptr unal,
  3    10 	2 a_reg,
  3    11 	  3 variable(10)	ptr unal,
  3    12 	  3 number	fixed bin(17),
  3    13 	  3 size		fixed bin(8),
  3    14 	  3 length	fixed bin(8),
  3    15 	  3 offset	fixed bin(8),
  3    16 	  3 constant	fixed bin(24),
  3    17 	  3 changed	fixed bin(18),
  3    18 	  3 instruction	bit(36),
  3    19 	  3 locked	bit(1) aligned,
  3    20 	  3 number_h_o	fixed bin,
  3    21 	  3 has_offset(3)	ptr unal,
  3    22 	2 q_reg,
  3    23 	  3 variable(10)	ptr unal,
  3    24 	  3 number	fixed bin(17),
  3    25 	  3 size		fixed bin(8),
  3    26 	  3 length	fixed bin(8),
  3    27 	  3 offset	fixed bin(8),
  3    28 	  3 constant	fixed bin(24),
  3    29 	  3 changed	fixed bin(18),
  3    30 	  3 instruction	bit(36),
  3    31 	  3 locked	bit(1) aligned,
  3    32 	  3 number_h_o	fixed bin,
  3    33 	  3 has_offset(3)	ptr unal,
  3    34 	2 string_reg,
  3    35 	  3 variable	ptr unal,
  3    36 	  3 size		fixed bin(8),
  3    37 	  3 offset	fixed bin(8),
  3    38 	2 complex_reg,
  3    39 	  3 variable	ptr unal,
  3    40 	  3 size		fixed bin(8),
  3    41 	  3 scale		fixed bin(8),
  3    42 	2 decimal_reg,
  3    43 	  3 variable	ptr unal,
  3    44 	  3 size		fixed bin(8),
  3    45 	  3 scale		fixed bin(8),
  3    46 	2 index_regs(0:7),
  3    47 	  3 variable	ptr unal,
  3    48 	  3 constant	fixed bin,
  3    49 	  3 type		fixed bin(8),
  3    50 	  3 used		fixed bin(18),
  3    51 	  3 changed	fixed bin(18),
  3    52 	  3 instruction	bit(36),
  3    53 	  3 filler	fixed bin,
  3    54 	2 base_regs(0:7),
  3    55 	  3 variable	ptr unal,
  3    56 	  3 constant	fixed bin,
  3    57 	  3 type		fixed bin(8),
  3    58 	  3 pad (12)	fixed bin,	/* future...room to make 5 element array for variable, constant, type */
  3    59 	  3 number	fixed bin (17),	/* future...number of valid elements in array */
  3    60 	  3 used		fixed bin(18),
  3    61 	  3 changed	fixed bin(18),
  3    62 	  3 instruction	bit(36),
  3    63 	  3 locked	fixed bin(2),
  3    64 	2 indicators_ref(2:3) ptr unal;
  3    65 
  3    66 /* Permissible values for machine_state.indicators. */
  3    67 
  3    68 dcl (	ind_known_refs	init (-2),		/* set by comparison of known, nonzero, references */
  3    69 	ind_invalid	init (-1),
  3    70 	ind_string_aq	init (0),			/* logical value in storage */
  3    71 	ind_logical	init (1),			/* logical value in A or AQ */
  3    72 	ind_arithmetic	init (2),			/* arith value in Q, AQ, or EAQ */
  3    73 	ind_x (0:7)	init (6, 7, 8, 9, 10, 11, 12, 13),
  3    74 	ind_decimal_reg	init (14)
  3    75 	) fixed bin internal static options (constant);
  3    76 
  3    77 /* END INCLUDE FILE ... machine_state.incl.pl1 */
       49 
  4     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
  4     2 
  4     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
  4     4 
  4     5 dcl (	block_node		initial("000000001"b),
  4     6 	statement_node		initial("000000010"b),
  4     7 	operator_node		initial("000000011"b),
  4     8 	reference_node		initial("000000100"b),
  4     9 	token_node		initial("000000101"b),
  4    10 	symbol_node		initial("000000110"b),
  4    11 	context_node		initial("000000111"b),
  4    12 	array_node		initial("000001000"b),
  4    13 	bound_node		initial("000001001"b),
  4    14 	format_value_node		initial("000001010"b),
  4    15 	list_node			initial("000001011"b),
  4    16 	default_node		initial("000001100"b),
  4    17 	machine_state_node		initial("000001101"b),
  4    18 	source_node		initial("000001110"b),
  4    19 	label_node		initial("000001111"b),
  4    20 	cross_reference_node	initial("000010000"b),
  4    21 	sf_par_node		initial("000010001"b),
  4    22 	temporary_node		initial("000010010"b),
  4    23 	label_array_element_node	initial("000010011"b),
  4    24 	by_name_agg_node		initial("000010100"b))
  4    25 				bit(9) internal static aligned options(constant);
  4    26 
  4    27 dcl	1 node			based aligned,
  4    28 	2 type			unal bit(9),
  4    29 	2 source_id		unal structure,
  4    30 	  3 file_number		bit(8),
  4    31 	  3 line_number		bit(14),
  4    32 	  3 statement_number	bit(5);
  4    33 
  4    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
       50 
  5     1 dcl (	real_fix_bin_1		init(1),
  5     2 	real_fix_bin_2		init(2),
  5     3 	real_flt_bin_1		init(3),
  5     4 	real_flt_bin_2		init(4),
  5     5 	complex_fix_bin_1		init(5),
  5     6 	complex_fix_bin_2		init(6),
  5     7 	complex_flt_bin_1		init(7),
  5     8 	complex_flt_bin_2		init(8),
  5     9 	real_fix_dec		init(9),
  5    10 	real_flt_dec		init(10),
  5    11 	complex_fix_dec		init(11),
  5    12 	complex_flt_dec		init(12),
  5    13 	char_string		init(13),
  5    14 	bit_string		init(14),
  5    15 	label_constant		init(15),
  5    16 	local_label_variable	init(16),
  5    17 	label_variable		init(17),
  5    18 	entry_variable		init(18),
  5    19 	ext_entry_in		init(19),
  5    20 	ext_entry_out		init(20),
  5    21 	int_entry			init(21),
  5    22 	int_entry_other		init(22),
  5    23 	unpacked_ptr		init(23),
  5    24 	packed_ptr		init(24)) fixed bin(15) int static options(constant);
       51 
  6     1 /* BEGIN INCLUDE FILE ... cgsystem.incl.pl1 */
  6     2 
  6     3 /* Modified: 25 Apr 1979 by PCK to implement 4-bit decimal */
  6     4 
  6     5 dcl (	bits_per_char		init(9),
  6     6 	bits_per_half		init(18),
  6     7 	bits_per_word		init(36),
  6     8 	bits_per_two_words		init(72),
  6     9 	bits_per_four_words		init(144),
  6    10 	bits_per_words(2)		init(36,72),
  6    11 	packed_digits_per_char	init(2),
  6    12 	chars_per_word		init(4),
  6    13 	packed_digits_per_word	init(8),
  6    14 
  6    15 	break_even_bits		init(216),
  6    16 	break_even_words		init(6),
  6    17 
  6    18 	label_size		init(4),
  6    19 
  6    20 	convert_size(13:14)		init(9,1),
  6    21 	max_offset(13:14)		init(27,35),
  6    22 	max_short_size(13:14)	init(8,72),
  6    23 
  6    24 	units_per_word(0:5)		init(1,36,8,4,2,1),
  6    25 
  6    26 	max_dec_scale		init(32),
  6    27 	min_dec_scale		init(-31),
  6    28 	max_p_xreg		init(18),
  6    29 	max_p_fix_bin_1		init(35),
  6    30 	max_p_flt_bin_1		init(27),
  6    31 	max_p_fix_dec		init(59),
  6    32 	max_length_p		init(24),
  6    33 	default_fix_bin_p		init(17)) fixed bin(8) int static options(constant);
  6    34 
  6    35 dcl      (convert_offset(0:5)		init(36,1,4.5,9,18,36),
  6    36 	bits_per_packed_digit	init(4.5)) fixed bin(8,1) int static options(constant);
  6    37 
  6    38 dcl	max_index_register_value	init(262143) fixed bin(31) int static options(constant);
  6    39 
  6    40 /* END INCLUDE FILE ... cgsystem.incl.pl1 */
  6    41 
       52 
       53 
       54 	p = var;
       55 	base = p_base;
       56 
       57 	dt = p -> reference.data_type;
       58 
       59 	update = "0"b;
       60 
       61 	if base_regs(base).type > 0
       62 	then if base_regs(base).type <= 2
       63 	     then do;
       64 		p1 = base_regs(base).variable;
       65 
       66 		if p1 ^= null
       67 		then if p1 -> node.type ^= reference_node
       68 		     then p1 = null;
       69 
       70 		if p = p1
       71 		then if base_regs(base).type = 1
       72 		     then if ^ p -> reference.shared
       73 			then go to gs;
       74 			else update = "1"b;
       75 		     else;
       76 		else if dt >= unpacked_ptr
       77 		     then if p1 ^= null
       78 			then if p1 -> reference.hit_zero
       79 			     then update = "1"b;
       80 		end;
       81 
       82 	     else p1 = null;
       83 
       84 	else do;
       85 	     update = "1"b;
       86 	     p1 = null;
       87 	     end;
       88 	call state_man$flush_ref(p);
       89 
       90 	if update
       91 	     then call base_man$update_base(1,p,base);
       92 
       93 gs:
       94 	q = p -> reference.symbol;
       95 
       96 	/* following line is needed to allow initialization of file constants */
       97 
       98 	if q -> symbol.temporary
       99 	     then p -> reference.value_in.storage = "1"b;
      100 
      101 
      102 
      103 	dt = max(dt,unpacked_ptr);
      104 
      105 	if p -> reference.aligned_for_store_ref
      106 	then do;
      107 	     call base_man$lock(base);
      108 
      109 	     call expmac((store_base(dt,base)),p);
      110 
      111 	     call base_man$unlock(base);
      112 	     return;
      113 	     end;
      114 
      115 
      116 	if p1 ^= null
      117 	then if p1 -> reference.data_type = packed_ptr
      118 	     then do;
      119 		q1 = p1;
      120 		if ^ p1 -> reference.temp_ref | p1 -> reference.value_in.storage
      121 		     then go to l2;
      122 		p1 -> reference.ref_count = p1 -> reference.ref_count + 1;
      123 		p1 -> reference.value_in.storage = "1"b;
      124 		go to l1;
      125 		end;
      126 
      127 	q1 = c_a(46,4);
      128 	q1 -> reference.c_length = bits_per_word;
      129 
      130 l1:	call expmac((store_base(packed_ptr,base)),q1);
      131 
      132 l2:	if ^ q1 -> reference.shared
      133 	     then q1 -> reference.ref_count = q1 -> reference.ref_count + 1;
      134 
      135 	call expmac$two_eis((move_bits),p,q1);
      136 
      137 	end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/03/83  1007.9  base_to_core.pl1                  >spec>on>pl128d>base_to_core.pl1
47           1    07/21/80  1546.3  reference.incl.pl1                >ldd>include>reference.incl.pl1
48           2    10/02/83  0828.4  symbol.incl.pl1                   >spec>on>pl128d>symbol.incl.pl1
49           3    11/13/79  1015.8  machine_state.incl.pl1            >ldd>include>machine_state.incl.pl1
50           4    07/21/80  1546.3  nodes.incl.pl1                    >ldd>include>nodes.incl.pl1
51           5    05/03/76  1320.4  data_types.incl.pl1               >ldd>include>data_types.incl.pl1
52           6    10/25/79  1645.8  cgsystem.incl.pl1                 >ldd>include>cgsystem.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
aligned_for_store_ref
                         13(02)        based           bit(1)                   level 3 packed unaligned dcl 1-3 ref 105
attributes               31            based           structure                level 2 dcl 2-3
base                            000110 automatic       fixed bin(17,0)          dcl 25 set ref 55* 61 61 64 70 90* 107* 109 111* 130
base_man$lock                   000014 constant        entry                    external dcl 25 ref 107
base_man$unlock                 000016 constant        entry                    external dcl 25 ref 111
base_man$update_base            000012 constant        entry                    external dcl 25 ref 90
base_regs               160            based           structure                array level 2 dcl 3-6
bits                     12(06)        based           structure                level 2 packed unaligned dcl 1-3
bits_per_word                          constant        fixed bin(8,0)           initial dcl 6-5 ref 128
c_a                             000022 constant        entry                    external dcl 25 ref 127
c_length                  2            based           fixed bin(24,0)          level 2 dcl 1-3 set ref 128*
cg_static_$m_s_p                000026 external static pointer                  dcl 3-3 ref 3-3
data_type                12            based           fixed bin(5,0)           level 2 packed unaligned dcl 1-3 ref 57 116
dt                              000112 automatic       fixed bin(17,0)          dcl 25 set ref 57* 76 103* 103 109
expmac                          000020 constant        entry                    external dcl 25 ref 109 130
expmac$two_eis                  000024 constant        entry                    external dcl 25 ref 135
hit_zero                 12(20)        based           bit(1)                   level 3 packed unaligned dcl 1-3 ref 76
info                     11            based           structure                level 2 packed unaligned dcl 1-3
m_s_p                           000114 automatic       pointer                  initial dcl 3-3 set ref 61 61 64 70 3-3*
machine_state                          based           structure                level 1 dcl 3-6
max                                                    builtin function         dcl 39 ref 103
more_bits                13            based           structure                level 2 packed unaligned dcl 1-3
move_bits                              constant        fixed bin(15,0)          initial dcl 41 ref 135
node                                   based           structure                level 1 dcl 4-27
null                                                   builtin function         dcl 39 ref 66 66 76 82 86 116
p                               000100 automatic       pointer                  dcl 25 set ref 54* 57 70 70 88* 90* 93 98 105 109*
                                                                                  135*
p1                              000102 automatic       pointer                  dcl 25 set ref 64* 66 66 66* 70 76 76 82* 86* 116
                                                                                  116 119 120 120 122 122 123
p_base                                 parameter       fixed bin(17,0)          dcl 22 ref 20 55
packed_ptr                             constant        fixed bin(15,0)          initial dcl 5-1 ref 116 130
q                               000104 automatic       pointer                  dcl 25 set ref 93* 98
q1                              000106 automatic       pointer                  dcl 25 set ref 119* 127* 128 130* 132 132 132 135*
ref_count                 0(18)        based           fixed bin(17,0)          level 2 packed unaligned dcl 1-3 set ref 122* 122
                                                                                  132* 132
reference                              based           structure                level 1 dcl 1-3
reference_node                         constant        bit(9)                   initial dcl 4-5 ref 66
shared                    0(11)        based           bit(1)                   level 2 packed unaligned dcl 1-3 ref 70 132
state_man$flush_ref             000010 constant        entry                    external dcl 25 ref 88
storage                  11(23)        based           bit(1)                   level 4 packed unaligned dcl 1-3 set ref 98* 120
                                                                                  123*
storage_class            32(09)        based           structure                level 3 packed unaligned dcl 2-3
store_base                      000000 constant        fixed bin(15,0)          initial array dcl 41 ref 109 130
symbol                    3            based           pointer                  level 2 in structure "reference" packed unaligned
                                                                                  dcl 1-3 in procedure "base_to_core" ref 93
symbol                                 based           structure                level 1 dcl 2-3 in procedure "base_to_core"
temp_ref                 12(11)        based           bit(1)                   level 3 packed unaligned dcl 1-3 ref 120
temporary                32(17)        based           bit(1)                   level 4 packed unaligned dcl 2-3 ref 98
type                    162            based           fixed bin(8,0)           array level 3 in structure "machine_state" dcl 3-6
                                                                                  in procedure "base_to_core" ref 61 61 70
type                                   based           bit(9)                   level 2 in structure "node" packed unaligned
                                                                                  dcl 4-27 in procedure "base_to_core" ref 66
unpacked_ptr                           constant        fixed bin(15,0)          initial dcl 5-1 ref 76 103
update                          000111 automatic       bit(1)                   dcl 25 set ref 59* 74* 76* 85* 90
value_in                 11(09)        based           structure                level 3 packed unaligned dcl 1-3
var                                    parameter       pointer                  dcl 22 ref 20 54
variable                160            based           pointer                  array level 3 packed unaligned dcl 3-6 ref 64

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
array_node                             internal static bit(9)                   initial dcl 4-5
base_to_aq                             internal static fixed bin(15,0)          initial array dcl 41
bit_string                             internal static fixed bin(15,0)          initial dcl 5-1
bits_per_char                          internal static fixed bin(8,0)           initial dcl 6-5
bits_per_four_words                    internal static fixed bin(8,0)           initial dcl 6-5
bits_per_half                          internal static fixed bin(8,0)           initial dcl 6-5
bits_per_packed_digit                  internal static fixed bin(8,1)           initial dcl 6-35
bits_per_two_words                     internal static fixed bin(8,0)           initial dcl 6-5
bits_per_words                         internal static fixed bin(8,0)           initial array dcl 6-5
block_node                             internal static bit(9)                   initial dcl 4-5
bound_node                             internal static bit(9)                   initial dcl 4-5
break_even_bits                        internal static fixed bin(8,0)           initial dcl 6-5
break_even_words                       internal static fixed bin(8,0)           initial dcl 6-5
by_name_agg_node                       internal static bit(9)                   initial dcl 4-5
char_string                            internal static fixed bin(15,0)          initial dcl 5-1
chars_per_word                         internal static fixed bin(8,0)           initial dcl 6-5
complex_fix_bin_1                      internal static fixed bin(15,0)          initial dcl 5-1
complex_fix_bin_2                      internal static fixed bin(15,0)          initial dcl 5-1
complex_fix_dec                        internal static fixed bin(15,0)          initial dcl 5-1
complex_flt_bin_1                      internal static fixed bin(15,0)          initial dcl 5-1
complex_flt_bin_2                      internal static fixed bin(15,0)          initial dcl 5-1
complex_flt_dec                        internal static fixed bin(15,0)          initial dcl 5-1
context_node                           internal static bit(9)                   initial dcl 4-5
convert_offset                         internal static fixed bin(8,1)           initial array dcl 6-35
convert_size                           internal static fixed bin(8,0)           initial array dcl 6-5
cross_reference_node                   internal static bit(9)                   initial dcl 4-5
default_fix_bin_p                      internal static fixed bin(8,0)           initial dcl 6-5
default_node                           internal static bit(9)                   initial dcl 4-5
entry_variable                         internal static fixed bin(15,0)          initial dcl 5-1
expmac$zero                     000000 constant        entry                    external dcl 25
ext_entry_in                           internal static fixed bin(15,0)          initial dcl 5-1
ext_entry_out                          internal static fixed bin(15,0)          initial dcl 5-1
format_value_node                      internal static bit(9)                   initial dcl 4-5
ind_arithmetic                         internal static fixed bin(17,0)          initial dcl 3-68
ind_decimal_reg                        internal static fixed bin(17,0)          initial dcl 3-68
ind_invalid                            internal static fixed bin(17,0)          initial dcl 3-68
ind_known_refs                         internal static fixed bin(17,0)          initial dcl 3-68
ind_logical                            internal static fixed bin(17,0)          initial dcl 3-68
ind_string_aq                          internal static fixed bin(17,0)          initial dcl 3-68
ind_x                                  internal static fixed bin(17,0)          initial array dcl 3-68
int_entry                              internal static fixed bin(15,0)          initial dcl 5-1
int_entry_other                        internal static fixed bin(15,0)          initial dcl 5-1
label_array_element_node               internal static bit(9)                   initial dcl 4-5
label_constant                         internal static fixed bin(15,0)          initial dcl 5-1
label_node                             internal static bit(9)                   initial dcl 4-5
label_size                             internal static fixed bin(8,0)           initial dcl 6-5
label_variable                         internal static fixed bin(15,0)          initial dcl 5-1
list_node                              internal static bit(9)                   initial dcl 4-5
load                            000000 constant        entry                    external dcl 25
local_label_variable                   internal static fixed bin(15,0)          initial dcl 5-1
machine_state_node                     internal static bit(9)                   initial dcl 4-5
max_dec_scale                          internal static fixed bin(8,0)           initial dcl 6-5
max_index_register_value               internal static fixed bin(31,0)          initial dcl 6-38
max_length_p                           internal static fixed bin(8,0)           initial dcl 6-5
max_offset                             internal static fixed bin(8,0)           initial array dcl 6-5
max_p_fix_bin_1                        internal static fixed bin(8,0)           initial dcl 6-5
max_p_fix_dec                          internal static fixed bin(8,0)           initial dcl 6-5
max_p_flt_bin_1                        internal static fixed bin(8,0)           initial dcl 6-5
max_p_xreg                             internal static fixed bin(8,0)           initial dcl 6-5
max_short_size                         internal static fixed bin(8,0)           initial array dcl 6-5
min_dec_scale                          internal static fixed bin(8,0)           initial dcl 6-5
operator_node                          internal static bit(9)                   initial dcl 4-5
packed_digits_per_char                 internal static fixed bin(8,0)           initial dcl 6-5
packed_digits_per_word                 internal static fixed bin(8,0)           initial dcl 6-5
real_fix_bin_1                         internal static fixed bin(15,0)          initial dcl 5-1
real_fix_bin_2                         internal static fixed bin(15,0)          initial dcl 5-1
real_fix_dec                           internal static fixed bin(15,0)          initial dcl 5-1
real_flt_bin_1                         internal static fixed bin(15,0)          initial dcl 5-1
real_flt_bin_2                         internal static fixed bin(15,0)          initial dcl 5-1
real_flt_dec                           internal static fixed bin(15,0)          initial dcl 5-1
sf_par_node                            internal static bit(9)                   initial dcl 4-5
source_node                            internal static bit(9)                   initial dcl 4-5
statement_node                         internal static bit(9)                   initial dcl 4-5
store                           000000 constant        entry                    external dcl 25
symbol_node                            internal static bit(9)                   initial dcl 4-5
temporary_node                         internal static bit(9)                   initial dcl 4-5
token_node                             internal static bit(9)                   initial dcl 4-5
units_per_word                         internal static fixed bin(8,0)           initial array dcl 6-5
unpk_to_pk                             internal static fixed bin(15,0)          initial dcl 41

NAMES DECLARED BY EXPLICIT CONTEXT.
base_to_core                    000026 constant        entry                    external dcl 20
gs                              000164 constant        label                    dcl 93 ref 70
l1                              000315 constant        label                    dcl 130 ref 124
l2                              000332 constant        label                    dcl 132 ref 120

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       470         520     361         500
Length      1006     361        30         252     107           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
base_to_core                         92 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
base_to_core             000100 p                           base_to_core
                         000102 p1                          base_to_core
                         000104 q                           base_to_core
                         000106 q1                          base_to_core
                         000110 base                        base_to_core
                         000111 update                      base_to_core
                         000112 dt                          base_to_core
                         000114 m_s_p                       base_to_core

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
base_man$lock                 base_man$unlock               base_man$update_base          c_a
expmac                        expmac$two_eis                state_man$flush_ref

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
cg_static_$m_s_p




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     20 000022    3    3 000033        54 000036        55 000042        57 000044        59 000047        61 000050
     64 000060        66 000063        70 000075        74 000107        75 000111        76 000112        80 000127
     82 000130        85 000133        86 000135        88 000137        90 000145        93 000164        98 000167
    103 000175       105 000202       107 000206       109 000215       111 000233       112 000242       116 000243
    119 000254       120 000255       122 000263       123 000270       124 000272       127 000273       128 000312
    130 000315       132 000332       135 000343       137 000360


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
