	COMPILATION LISTING OF SEGMENT bjm_get_bj_path_from_uid
	Compiled by: Multics PL/I Compiler, Release 28e, of February 14, 1985
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 04/04/85  0940.8 mst Thu
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 
        7 /* format: style4,indattr,ifthenstmt,ifthen,^indcomtxt,idind33 */
        8 
        9 bjm_get_bj_path_from_uid:
       10      procedure (p_bj_uid, p_bj_dir, p_bj_entry, p_code);
       11 
       12 
       13 /* DESCRIPTION:
       14*     A procedure to return the dir and entry names of an open before
       15*journal given its opening ID.
       16*
       17*     BJ_UID is an input argument.  BJ_DIR, BJ_ENTRY, and CODE are
       18*output arguments.
       19**/
       20 
       21 /* HISTORY:
       22*Written by M. Pandolf, 01/05/83.
       23*Modified:
       24*12/06/83 by L. A. Newcomb:  Renamed before_journal_manager_static_ to
       25*            bjm_data_ and moved some cells from dm_data_ to bjm_data_.
       26*03/19/85 by Steve Herbst: Fixed to initialize bjm_data_$bj_code.
       27**/
       28 
       29 /* initialize parameters */
       30 
       31 	bj_uid = p_bj_uid;
       32 	p_bj_dir = "";
       33 	p_bj_entry = "";
       34 	p_code = 0;
       35 
       36 /* set up addresses for unexpected error */
       37 
       38 	on cleanup call CLEANUP;
       39 
       40 	if bjm_data_$bj_operation = ""
       41 	then bjm_data_$bj_operation = ME;
       42 	else do;
       43 	     p_code = dm_error_$bj_recursive_invoc;
       44 	     goto quick_exit;
       45 	end;
       46 
       47 	bjm_data_$bj_exit_err = nonlocal_error_exit;
       48 	bjm_data_$bj_code = 0;
       49 
       50 /* lock the PST so that the references to it will be done while it is stable */
       51 
       52 	call bj_pst_lock ();
       53 
       54 /* get a pointer to the PSTE */
       55 
       56 	bj_pste_ptr = bj_pst_search (bj_uid);
       57 	if bj_pste_ptr = null ()
       58 	then do;
       59 	     call bj_pst_lock$unlock ();
       60 	     p_code = error_table_$noentry;
       61 	     goto local_error_exit;
       62 	end;
       63 
       64 /* use the bj_ix to look up the BJ pathname in the pathname table */
       65 
       66 	bj_pn_table_ptr = ptr (bjm_data_$bj_pst_ptr, bjm_data_$bj_pst_ptr -> bj_pst.pn_table_offset);
       67 
       68 	p_bj_dir = bj_pn_table (bj_pste.bj_ix).dir;
       69 	p_bj_entry = bj_pn_table (bj_pste.bj_ix).entry;
       70 
       71 /* done */
       72 
       73 	call bj_pst_lock$unlock ();
       74 
       75 std_exit:
       76 	bjm_data_$bj_operation = "";
       77 
       78 	bjm_data_$bj_exit_err =
       79 	     bjm_data_$bj_default_error_label;
       80 
       81 quick_exit:
       82 	return;
       83 
       84 nonlocal_error_exit:
       85 	p_code = bjm_data_$bj_code;
       86 
       87 local_error_exit:
       88 	call CLEANUP;
       89 	goto quick_exit;
       90 
       91 /* INTERNAL PROCEDURES */
       92 
       93 CLEANUP:
       94      procedure ();
       95 
       96 dcl  code			        fixed bin (35);
       97 
       98 	call bj_cleanup_tables$handler (code);
       99 
      100 	bjm_data_$bj_exit_err =
      101 	     bjm_data_$bj_default_error_label;
      102 	bjm_data_$bj_operation = "";
      103 
      104 	return;
      105 
      106      end CLEANUP;
      107 
      108 
      109 /* DECLARATIONS */
      110 
      111 /* Parameters */
      112 
      113 dcl  p_bj_uid		        bit (36) aligned parameter; /* BJ unique ID */
      114 dcl  p_bj_dir		        char (*) parameter;	/* dir of BJ identified bj BJ_OID */
      115 dcl  p_bj_entry		        char (*) parameter;	/* entryname of BJ identified bj BJ_OID */
      116 dcl  p_code		        fixed bin (35) parameter; /* standard system ststus code */
      117 
      118 /* Automatic */
      119 
      120 dcl  bj_uid		        bit (36) aligned;	/* local copy of before journal UID */
      121 
      122 /* Static, External */
      123 
      124 dcl  dm_error_$bj_recursive_invoc     fixed bin (35) external static;
      125 dcl  error_table_$noentry	        fixed bin (35) ext static;
      126 dcl  bjm_data_$bj_pst_ptr	        pointer external static;
      127 
      128 /* Constant */
      129 
      130 dcl  ME			        char (32) internal static options (constant)
      131 			        init ("bjm_get_bj_path_from_uid");
      132 
      133 /* Entry */
      134 
      135 dcl  bj_pst_lock		        entry ();
      136 dcl  bj_pst_search		        entry (bit (36) aligned) returns (ptr);
      137 dcl  bj_pst_lock$unlock	        entry ();
      138 dcl  bj_cleanup_tables$handler        entry (fixed bin (35));
      139 
      140 /* Builtin */
      141 
      142 dcl  ptr			        builtin;
      143 
      144 /* Condition */
      145 
      146 dcl  cleanup		        condition;
      147 
      148 /* Include Files */
      149 
      150 
  1     1 	/* BEGIN dm_bj_static.incl.pl1 */
  1     2 /*
  1     3*Modified: 
  1     4*10/04/82 by Lee A. Newcomb:  To change from internal static to external
  1     5*	  static.
  1     6**/
  1     7 
  1     8 dcl dm_system_data_$bj_max_n_journals		fixed bin ext static;
  1     9 dcl dm_system_data_$bj_max_n_processes		fixed bin ext static;
  1    10 dcl dm_system_data_$max_n_transactions     fixed bin ext static;
  1    11 
  1    12 	/* END dm_bj_static.incl.pl1 */
  1    13 
      151 
      152 
  2     1 /*  BEGIN INCLUDE FILE:	dm_bj_ppt.incl.pl1	*/
  2     2 /*
  2     3*Layout of the per-process before journal table and entries.
  2     4*
  2     5*Written by Andre Bensoussan June/July 1982
  2     6*Modified:
  2     7*09/29/82 by Lee A. Newcomb:  To make two default oid cells, pad ppte's
  2     8*	  to account for all used space, and use dm_system_data_ for
  2     9*	  determining dimension of bj_ppt.e.
  2    10**/
  2    11 /* format: style4,indattr,idind33,^indcomtxt */
  2    12 
  2    13 dcl  BJ_PPT_VERSION_1	        fixed bin int static options (constant) init (1);
  2    14 dcl  BJ_PPTE_VERSION_1	        fixed bin int static options (constant) init (1);
  2    15 
  2    16 dcl  bj_ppt_ptr		        ptr;
  2    17 
  2    18 dcl  1 bj_ppt		        based (bj_ppt_ptr) aligned,
  2    19        2 version		        fixed bin,
  2    20        2 max_n_entries	        fixed bin,		/* should be = dm_system_data_$bj_max_n_journals */
  2    21        2 n_entries_used	        fixed bin,		/* # of BJs open in this process */
  2    22        2 highest_ix_used	        fixed bin,		/* max. # of BJs ever opened in this process */
  2    23        2 default_bj,				/* for selecting a txn def. BJ by write_before_mark protocol */
  2    24          3 user_set_oid	        bit (36),		/* explicit user setting via $set_default_bj */
  2    25          3 last_opened_oid	        bit (36),		/* implicit if no user setting, set by open and close */
  2    26 						/* if both zero, use system default BJ */
  2    27        2 process_id		        bit (36),		/* so we don't have to keep calling for it. */
  2    28        2 process_ix		        fixed bin,		/* index into bj_check_in_table */
  2    29        2 mod_list_area	        (100) fixed bin (35), /* for keeping track of ppt mods, not curr. used */
  2    30 
  2    31        2 e		        dim (dm_system_data_$bj_max_n_journals refer (bj_ppt.max_n_entries))
  2    32 			        like bj_ppte;	/* an entry for each BJ open in this process */
  2    33 						/* always make sure bj_ppt.e is on a even word boundary */
  2    34 
  2    35 /* now specify the format of each per-process BJ table entry */
  2    36 
  2    37 dcl  bj_ppte_ptr		        ptr;
  2    38 
  2    39 dcl  1 bj_ppte		        based (bj_ppte_ptr) aligned,
  2    40        2 version		        fixed bin,		/* better be the same for all entries in a bj_ppt */
  2    41        2 bj_uid		        bit (36),		/* UID of the BJ page file */
  2    42        2 pf_oid		        bit (36),		/* OID of the BJ page file */
  2    43        2 n_opening		        fixed bin,		/* how many openings this process has done for this BJ */
  2    44        2 bj_pste_ptr	        ptr,		/* "link" to per-system BJ table entry */
  2    45        2 open_time		        fixed bin (71);	/* used to fill in bj_ppt.default_bj.last_opened_oid */
  2    46 						/* if the last opened BJ is closed */
  2    47 
  2    48 /* END INCLUDE FILE:	bj_ppt.incl.pl1	*/
      153 
      154 
  3     1 /*  BEGIN INCLUDE FILE:	dm_bj_pst.incl.pl1	*/
  3     2 /*
  3     3*Layout of the before journal per-system table header and BJ table entries.
  3     4*
  3     5*Written by Andre Bensoussan 06-15-1982
  3     6*Modified:
  3     7*09/29/82 by Lee A. Newcomb:  To use dm_system_data_ for determining
  3     8*	  dimension of bj_pst.e and force bj_pst.mod_list_area and
  3     9*	  bj_pst.e to even word boundaries.
  3    10*04/27/82 by M. Pandolf:  To add meter space by cutting away from mod_list_area.
  3    11**/
  3    12 /* format: style4,indattr,idind33,^indcomtxt */
  3    13 
  3    14 dcl  BJ_PST_VERSION_1	        fixed bin internal static options (constant) init (1);
  3    15 
  3    16 dcl  bj_pst_ptr		        ptr;
  3    17 
  3    18 dcl  1 bj_pst		        based (bj_pst_ptr) aligned,
  3    19        2 version		        fixed bin,
  3    20        2 pad1		        bit (36),
  3    21        2 lock,
  3    22          3 pid		        bit (36),		/* process_id holding lock */
  3    23          3 event		        bit (36),
  3    24        2 time_of_bootload	        fixed bin (71),	/* for ease of access */
  3    25        2 max_n_entries	        fixed bin,		/* as determined from dm_system_data_$bj_max_n_journals */
  3    26        2 n_entries_used	        fixed bin,		/* current # of BJs open on the system */
  3    27        2 highest_ix_used	        fixed bin,		/* max. # of BJs that has ever been open of the system */
  3    28        2 pn_table_offset	        fixed bin (18) uns,	/* relative offset of bj_pn_table in bj_pst seg. */
  3    29        2 check_in_table_offset        fixed bin (18) uns,	/* ditto for bj_check_in_table */
  3    30        2 buffer_table_offset	        fixed bin (18) uns,	/* ditto for where our BJ buffers are located */
  3    31        2 max_n_buffers	        fixed bin,		/* must be <= to max_n_entries */
  3    32        2 pad2		        bit (36),		/* force next on even word boundary */
  3    33        2 meters,					/* dim (50) fixed bin (71), */
  3    34          3 n_calls_begin_txn          fixed bin (71),	/* meter (1) */
  3    35          3 n_calls_before_image       fixed bin (71),	/* meter (2) */
  3    36          3 n_calls_abort              fixed bin (71),	/* meter (3) */
  3    37          3 n_calls_commit             fixed bin (71),	/* meter (4) */
  3    38          3 n_calls_rb_mark            fixed bin (71),	/* meter (5) */
  3    39          3 n_calls_fm_pc_mark         fixed bin (71),	/* meter (6) */
  3    40          3 n_calls_fm_rbh             fixed bin (71),	/* meter (7) */
  3    41          3 n_calls_rollback           fixed bin (71),	/* meter (8) */
  3    42          3 meter dim (9:50)           fixed bin (71),	/* meter (9) - meter (50) */
  3    43        2 mod_list_area	        (100) fixed bin (35), /* for keeping track of pst mods */
  3    44 
  3    45        2 e		        dim (dm_system_data_$bj_max_n_journals refer (bj_pst.max_n_entries))
  3    46 			        like bj_pste;	/* per system BJ table entries */
  3    47 
  3    48 
  3    49 /* END INCLUDE FILE:	dm_bj_pst.incl.pl1	*/
      155 
      156 
  4     1 /* BEGIN INCLUDE FILE:	dm_bj_pste.incl.pl1	*/
  4     2 
  4     3 /* DESCRIPTION
  4     4*
  4     5*	Layout of the per-system before journal table
  4     6*     entries.  This structure is used to contain information
  4     7*     about a before journal active in a running DMS.  It is
  4     8*     currently also used as the header of a before journal
  4     9*     (see dm_bj_header.incl.pl1).  Version changes to this
  4    10*     structure require either automatic conversion to be set
  4    11*     up, or users to be told to re-create their journals.
  4    12*
  4    13*	Currently, a bj_pste must be 64 words long;  any
  4    14*     future changes must at least make sure a bj_pste is an
  4    15*     even # of words for the alignment of some of its
  4    16*     elements.
  4    17**/
  4    18 
  4    19 /*  HISTORY:
  4    20*
  4    21*Written by Andre Bensoussan, 06/15/82.
  4    22*Modified:
  4    23*08/16/82 by Andre Bensoussan: to add stamp_for_last_ci_put.
  4    24*09/29/82 by Lee A. Newcomb: to fix BJ_PSTE_VERSION_1 and fix some
  4    25*	  alignments.
  4    26*11/01/82 by Andre Bensoussan: to add "stamp_for_last_ci_on_disk",
  4    27*	  "n_bi_still_unsafe", and "n_bi_being_saved".
  4    28*02/08/83 by M. Pandolf: to add append_state structure.
  4    29*03/19/83 by L. A. Newcomb: to fix up some alignments and spelling problems.
  4    30*04/27/83 by M. Pandolf: to add meter structure at end.
  4    31*02/11/85 by Lee A. Newcomb:  Fixed version constant name to agree with its
  4    32*            value of 2; fixed references to page files or PF's; fixed format
  4    33*            of description and history sections.
  4    34*03/07/85 by Lee A. Newcomb:  Changed a pad word to be txn_storage_limit and
  4    35*            expanded on the description for future generations (no
  4    36*            version was made).
  4    37*03/27/85 by Lee A. Newcomb:  Changed one of the unused meters to
  4    38*            n_txn_storage_limit_hits (again without a version change).
  4    39**/
  4    40 /* format: style2,ll79,ind3,^indprocbody,ifthendo,ifthen,^indnoniterdo,^inddcls,dclind5,idind35,linecom */
  4    41 
  4    42 dcl  BJ_PSTE_VERSION_2		fixed bin internal static
  4    43 				options (constant) init (2);
  4    44 
  4    45 dcl  bj_pste_ptr			ptr;
  4    46 
  4    47 /* MUST HAVE EVEN NUMBER OR WORDS */
  4    48 dcl  1 bj_pste			based (bj_pste_ptr) aligned,
  4    49        2 version			fixed bin,
  4    50        2 bj_ix			fixed bin,	/* Index of this entry in bj_pst table */
  4    51        2 lock			aligned,
  4    52          3 pid			bit (36),		/* process ID of lock owner */
  4    53          3 event			bit (36),
  4    54        2 bj_uid			bit (36),		/* UID of BJ file */
  4    55        2 ci_size			fixed bin,	/* In number of bytes */
  4    56        2 max_size			fixed bin,	/* In number of ci's */
  4    57        2 active			bit (1) aligned,	/* 0 means journal not being used */
  4    58        2 time_header_updated		fixed bin (71),
  4    59        2 earliest_meaningful_time	fixed bin (71),	/* time stamp on first valid control interval */
  4    60        2 update_frequency		fixed bin,	/* Not used yet, probably will be how many CIs */
  4    61        2 last_rec_id		bit (36),		/* rec id of the last logical record in journal */
  4    62        2 n_processes		fixed bin,	/* Number of processes using this BJ */
  4    63        2 n_txn			fixed bin,	/* Number of txn in progress using this BJ */
  4    64        2 last_ci_info		aligned,
  4    65          3 last_ci_buffered		fixed bin (24) uns, /* Last ci encached in the buffer */
  4    66          3 last_ci_put		fixed bin (24) uns, /* Last ci put in the BJ */
  4    67          3 last_ci_flushed		fixed bin (24) uns, /* Last ci for which flush initiated */
  4    68          3 last_ci_on_disk		fixed bin (24) uns, /* Last ci of that portion of the BJ known to be ... */
  4    69 						/* .. completely on disk */
  4    70          3 stamp_for_last_ci_put	fixed bin (71),	/* Time stamp associated with the last ci put in the BJ */
  4    71          3 stamp_for_last_ci_on_disk	fixed bin (71),	/* Time stamp associated with the last ci on disk in the BJ */
  4    72        2 n_bi_still_unsafe		fixed bin,	/* number of bi's still not on disk */
  4    73        2 n_bi_being_saved		fixed bin,	/* number of bi's for which flush initiated */
  4    74        2 buffer_offset		fixed bin (18) uns, /* Now allocated in the bj_pst segment */
  4    75        2 txn_storage_limit		fixed bin (35),	/* # of bytes a single txn may write */
  4    76        2 cl			aligned,		/* Circular List */
  4    77          3 origin_ci		fixed bin (24) uns,
  4    78          3 lowest_ci		fixed bin (24) uns,
  4    79          3 highest_ci		fixed bin (24) uns,
  4    80          3 number_ci		fixed bin (24) uns,
  4    81        2 append_state		aligned,
  4    82          3 current_operation		char (4),		/* equal to "appe" when append in progress */
  4    83          3 pending_n_txn		fixed bin,	/* n_txn value when append done */
  4    84          3 pending_last_rec_id	bit (36),		/* last_rec_id value after append done */
  4    85          3 pending_last_element_id	bit (36),		/* last element id after append done */
  4    86          3 txte_rec_id_relp		bit (18),		/* rel ptr into seg containing TXT for txte.pending_bj_rec_id */
  4    87        2 pad_to_even_word1		bit (36) aligned,
  4    88        2 meters			aligned,		/* dim (10) fixed bin (71), */
  4    89          3 n_bi_written		fixed bin (71),	/* meter (1) */
  4    90          3 n_bi_bytes_written		fixed bin (71),	/* meter (2) */
  4    91          3 n_journal_full		fixed bin (71),	/* meter (3) */
  4    92          3 n_successful_recycles	fixed bin (71),	/* meter (4) */
  4    93          3 n_ci_recycled		fixed bin (71),	/* meter (5) */
  4    94          3 n_txn_started		fixed bin (71),	/* meter (6) */
  4    95          3 n_non_null_txn		fixed bin (71),	/* meter (7) */
  4    96          3 n_txn_storage_limit_hits	fixed bin (71),	/* meter (8) */
  4    97          3 meter			(9:10) fixed bin (71),
  4    98 						/* meter (9) - meter (10) */
  4    99        2 pad_to_64_words		(6) bit (36);	/* 64 is even (see below) */
  4   100 
  4   101 
  4   102 /*  END INCLUDE FILE:	dm_bj_pste.incl.pl1	*/
      157 
      158 
  5     1 /* BEGIN INCLUDE FILE:	dm_bj_pn_table.incl.pl1	*/
  5     2 /*
  5     3*This vector relates a BJ UID to its pathname.
  5     4*
  5     5*Written by Andre Bensoussan June/July 1982
  5     6*Modified:
  5     7*09/29/82 by Lee A. Newcomb:  To make word aligned, convert to use
  5     8*	  dm_system_data_$bj_max_n_journals, and store max_n_entries
  5     9*	  for use with crash recovery.
  5    10**/
  5    11 /* format: style4,indattr,idind33,^indcomtxt */
  5    12 
  5    13 dcl  bj_pn_table_ptr	        ptr;
  5    14 
  5    15 dcl  1 bj_pn_table		        based (bj_pn_table_ptr) aligned,
  5    16        2 max_n_entries	        fixed bin,		/* know how long the table is for crash recovery */
  5    17        2 bj_path_to_uid_relation      dim (dm_system_data_$bj_max_n_journals refer (bj_pn_table.max_n_entries)),
  5    18          3 dir		        char (168),
  5    19          3 entry		        char (32),
  5    20          3 bj_uid		        bit (36);
  5    21 
  5    22 /* END INCLUDE FILE:	dm_bj_pn_table.incl.pl1	*/
      159 
      160 
  6     1 /* BEGIN INCLUDE FILE dm_bj_global_error_info.incl.pl1 */
  6     2 
  6     3 /* Originally found in before journal primitives written by */
  6     4 /* A. Bensoussan.  Gathered into an include file for ease of use. */
  6     5 /* See the bjm_data_.alm source for details of use. */
  6     6 
  6     7 /* HISTORY:
  6     8*Written by Mike Pandolf, 07/14/82.
  6     9*Modified:
  6    10*12/06/83 by L. A. Newcomb:  Renamed before_journal_manager_static_ to
  6    11*            bjm_data_ and moved some cells from dm_data_ to bjm_data_.
  6    12**/
  6    13 
  6    14 /* format: style4,indattr,ifthenstmt,ifthen,^indcomtxt,idind33 */
  6    15 dcl  bjm_data_$bj_operation	        char (32) external static;
  6    16 
  6    17 dcl  bjm_data_$bj_exit_err	        label variable external;
  6    18 
  6    19 dcl  bjm_data_$bj_code	        fixed bin (35) external;
  6    20 
  6    21 dcl  bjm_data_$bj_default_error_label label external static;
  6    22 
  6    23 
  6    24 /* END INCLUDE FILE dm_bj_global_error_info.incl.pl1 */
      161 
      162 
      163 
      164      end bjm_get_bj_path_from_uid;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/04/85  0826.3  bjm_get_bj_path_from_uid.pl1      >spec>on>7192.pbf-04/04/85>bjm_get_bj_path_from_uid.pl1
151          1    01/07/85  0857.8  dm_bj_static.incl.pl1             >ldd>include>dm_bj_static.incl.pl1
153          2    01/07/85  0857.6  dm_bj_ppt.incl.pl1                >ldd>include>dm_bj_ppt.incl.pl1
155          3    01/07/85  0857.7  dm_bj_pst.incl.pl1                >ldd>include>dm_bj_pst.incl.pl1
157          4    04/04/85  0819.1  dm_bj_pste.incl.pl1               >spec>on>7192.pbf-04/04/85>dm_bj_pste.incl.pl1
159          5    01/07/85  0857.4  dm_bj_pn_table.incl.pl1           >ldd>include>dm_bj_pn_table.incl.pl1
161          6    01/07/85  0857.3  dm_bj_global_error_info.incl.pl1  >ldd>include>dm_bj_global_error_info.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ME                              000000 constant        char(32)                 initial unaligned dcl 130 ref 40
bj_cleanup_tables$handler       000024 constant        entry                    external dcl 138 ref 98
bj_ix                     1            based           fixed bin(17,0)          level 2 dcl 4-48 ref 68 69
bj_path_to_uid_relation
                          1            based           structure                array level 2 dcl 5-15
bj_pn_table                            based           structure                level 1 dcl 5-15
bj_pn_table_ptr                 000112 automatic       pointer                  dcl 5-13 set ref 66* 68 69
bj_ppte                                based           structure                level 1 dcl 2-39
bj_pst                                 based           structure                level 1 dcl 3-18
bj_pst_lock                     000016 constant        entry                    external dcl 135 ref 52
bj_pst_lock$unlock              000022 constant        entry                    external dcl 137 ref 59 73
bj_pst_search                   000020 constant        entry                    external dcl 136 ref 56
bj_pste                                based           structure                level 1 dcl 4-48
bj_pste_ptr                     000110 automatic       pointer                  dcl 4-45 set ref 56* 57 68 69
bj_uid                          000100 automatic       bit(36)                  dcl 120 set ref 31* 56*
bjm_data_$bj_code               000032 external static fixed bin(35,0)          dcl 6-19 set ref 48* 84
bjm_data_$bj_default_error_label
                                000034 external static label variable           dcl 6-21 ref 78 100
bjm_data_$bj_exit_err           000030 external static label variable           dcl 6-17 set ref 47* 78* 100*
bjm_data_$bj_operation          000026 external static char(32)                 unaligned dcl 6-15 set ref 40 40* 75* 102*
bjm_data_$bj_pst_ptr            000014 external static pointer                  dcl 126 ref 66 66
cleanup                         000102 stack reference condition                dcl 146 ref 38
code                            000100 automatic       fixed bin(35,0)          dcl 96 set ref 98*
dir                       1            based           char(168)                array level 3 dcl 5-15 ref 68
dm_error_$bj_recursive_invoc    000010 external static fixed bin(35,0)          dcl 124 ref 43
entry                    53            based           char(32)                 array level 3 dcl 5-15 ref 69
error_table_$noentry            000012 external static fixed bin(35,0)          dcl 125 ref 60
p_bj_dir                               parameter       char                     unaligned dcl 114 set ref 9 32* 68*
p_bj_entry                             parameter       char                     unaligned dcl 115 set ref 9 33* 69*
p_bj_uid                               parameter       bit(36)                  dcl 113 ref 9 31
p_code                                 parameter       fixed bin(35,0)          dcl 116 set ref 9 34* 43* 60* 84*
pn_table_offset          11            based           fixed bin(18,0)          level 2 unsigned dcl 3-18 ref 66
ptr                                                    builtin function         dcl 142 ref 66

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
BJ_PPTE_VERSION_1                      internal static fixed bin(17,0)          initial dcl 2-14
BJ_PPT_VERSION_1                       internal static fixed bin(17,0)          initial dcl 2-13
BJ_PSTE_VERSION_2                      internal static fixed bin(17,0)          initial dcl 4-42
BJ_PST_VERSION_1                       internal static fixed bin(17,0)          initial dcl 3-14
bj_ppt                                 based           structure                level 1 dcl 2-18
bj_ppt_ptr                             automatic       pointer                  dcl 2-16
bj_ppte_ptr                            automatic       pointer                  dcl 2-37
bj_pst_ptr                             automatic       pointer                  dcl 3-16
dm_system_data_$bj_max_n_journals      external static fixed bin(17,0)          dcl 1-8
dm_system_data_$bj_max_n_processes     external static fixed bin(17,0)          dcl 1-9
dm_system_data_$max_n_transactions     external static fixed bin(17,0)          dcl 1-10

NAMES DECLARED BY EXPLICIT CONTEXT.
CLEANUP                         000244 constant        entry                    internal dcl 93 ref 38 87
bjm_get_bj_path_from_uid        000025 constant        entry                    external dcl 9
local_error_exit                000236 constant        label                    dcl 87 ref 61
nonlocal_error_exit             000232 constant        label                    dcl 84 ref 47
quick_exit                      000231 constant        label                    dcl 81 ref 44 89
std_exit                        000216 constant        label                    dcl 75

NAME DECLARED BY CONTEXT OR IMPLICATION.
null                                                   builtin function         ref 57

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       462         520     273         472
Length      1040     273        36         303     167           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
bjm_get_bj_path_from_uid             84 external procedure  is an external procedure.  
on unit on line 38                   64 on unit               
CLEANUP                              70 internal procedure  is called by several nonquick procedures.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
CLEANUP                  000100 code                        CLEANUP
bjm_get_bj_path_from_uid 000100 bj_uid                      bjm_get_bj_path_from_uid
                         000110 bj_pste_ptr                 bjm_get_bj_path_from_uid
                         000112 bj_pn_table_ptr             bjm_get_bj_path_from_uid

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        call_int_this       call_int_other      return              enable              ext_entry_desc
int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
bj_cleanup_tables$handler     bj_pst_lock                   bj_pst_lock$unlock            bj_pst_search

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
bjm_data_$bj_code             bjm_data_$bj_default_error_label                            bjm_data_$bj_exit_err
bjm_data_$bj_operation        bjm_data_$bj_pst_ptr          dm_error_$bj_recursive_invoc  error_table_$noentry




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
      9 000020        31 000045        32 000050        33 000055        34 000062        38 000063        40 000105
     43 000117        44 000122        47 000123        48 000127        52 000130        56 000134        57 000145
     59 000151        60 000156        61 000162        66 000163        68 000172        69 000204        73 000212
     75 000216        78 000223        81 000231        84 000232        87 000236        89 000242        93 000243
     98 000251       100 000257       102 000266       104 000272


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
