	COMPILATION LISTING OF SEGMENT lar_util_
	Compiled by: Multics PL/I Compiler, Release 33e, of October 6, 1992
	Compiled at: CGI                             
	Compiled on: 2000-04-18_1150.56_Tue_mdt
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        6*        *                                                         *
        7*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        8*        *                                                         *
        9*        * Copyright (c) 1972 by Massachusetts Institute of        *
       10*        * Technology and Honeywell Information Systems, Inc.      *
       11*        *                                                         *
       12*        *********************************************************** */
       13 
       14 /* format: style4,delnl,insnl,^ifthendo */
       15 
       16 /* format: off */
       17 
       18 lar_util_: procedure (a_info_ptr, a_code);
       19 
       20 /* This procedure is called by the queue-listing commands lar, ldr, and lrr (entry points in the same command procedure).
       21*   It formats information about absentee, I/O daemon, and retrieval requests, and places its output in a printable segment.
       22*   It leaves room for a totals line at the beginning, and then goes back and fills it in after it has scanned all the
       23*   pertinent requests and knows what the totals are. It operates on only one queue message segment at a time.
       24*   If the user specified that all queues (of a certain kind) be listed, the command procedure calls this one once for
       25*   each queue. The offset in the printable segment at which to start placing output is specified in the argument structure.
       26*
       27*   All input and output arguments (except the error code) are passed in an argument structure, lar_info, a pointer to
       28*   which is the first argument in the call. The structure is defined in lar_info.incl.pl1, and comments in that
       29*   include file describe the meaning of each variable in the structure.
       30*
       31*   There is one implicit convention observed between this procedure and its caller: this procedure avoids outputting
       32*   totals lines that contain only zeros, when the -all argument was given, and it avoids outputting totals lines for
       33*   queues from which no requests are selected, when the -search_all argument is given (or is in effect by default).
       34*   The calling procedure, realizing this, must check whether anything is in the output segment, and, if not, print a
       35*   message saying  "No requests in any queue", or "No requests selected from any queue".
       36**/
       37 
       38 /****^  HISTORY COMMENTS:
       39*  1) change(86-03-01,Gilcrease), approve(86-03-27,MCR7370),
       40*     audit(86-07-07,Fawcett), install(86-06-30,MR12.0-1082):
       41*     Dummy comment for hcom.
       42*     
       43*     Modified by E. Stone 10/06/71
       44*     Modified by Dennis Capps 3/20/72
       45*     Modified by Robert Coren 4/17/73 to handle io_daemon requests
       46*     Modified by J. Stern 4/4/75 to print access classes in long mode
       47*     Modified by D. Vinograd 5/77 to return info about retrieval queues
       48*     Modified by J.Whitmore and T. Casey, April 1978, for new daemon and absentee queue entry formats
       49*     Modified by T. Casey, November 1978, for MR7.0, to list absentee queues zero and foreground, and other absentee changes.
       50*     Modified by T. Casey, April 1979, for MR7.0a, to identify deferred absentee requests that have not yet been processed.
       51*     Modified by R. Brinegar, Summer 1979 to fix output format problems.
       52*     Modified by S. Herbst, Fall 1979 to print request type in header.
       53*     Modified by T. Casey, November 1979 to print 8 digits of request ID and to identify bumped absentee jobs properly.
       54*     Modified by J. C. Whitmore, April 1980 for new retrieval request format using queue_msg_hdr
       55*     Modified by G. Palter, 8 September 1981 to print the I/O daemon forms if given
       56*     Modified by G. C. Dixon, Jan 1982 to support lor command.
       57*     Modified by R. Kovalcik, June 1982 to understand dprint -dupt.
       58*     Modified by C. Marker, November 1983 to add support for -no_separator
       59*     Modified by JAFalksen, August 1984 to use new time facilities
       60*     Modified by C. Marker, February 23, 1985 to use version 5 message segments
       61*  2) change(86-03-27,Gilcrease), approve(86-03-27,MCR7370),
       62*     audit(86-07-07,Fawcett), install(86-06-30,MR12.0-1082):
       63*     Add handling of truncate absout & restarted bits. SCP 6297.
       64*  3) change(87-07-07,GDixon), approve(87-07-07,MCR7741),
       65*     audit(87-07-07,Hartogs), install(87-08-04,MR12.1-1055):
       66*     Include user_abs_attributes.incl.pl1 as part of splitting
       67*     abs_message_format.incl.pl1.
       68*  4) change(87-08-06,Gilcrease), approve(87-08-06,MCR7686),
       69*     audit(88-02-01,Farley), install(88-02-02,MR12.2-1019):
       70*     Add -nb message to lor/ldr -long.
       71*  5) change(87-11-11,Parisek), approve(88-02-11,MCR7849),
       72*     audit(88-03-07,Lippard), install(88-07-13,MR12.2-1047):
       73*     Reference version 6 abs_message_format structure, and if version 6
       74*     format output for the structure's new data.
       75*  6) change(87-11-13,Parisek), approve(88-02-11,MCR7849),
       76*     audit(88-03-07,Lippard), install(88-07-13,MR12.2-1047):
       77*     Display the request version 6 elements; no_start_up, home_dir, init_proc.
       78*     SCP 6367.
       79*  7) change(88-04-20,Parisek), approve(88-06-13,MCR7913),
       80*     audit(88-08-16,Farley), install(88-08-22,MR12.2-1089):
       81*     Added the request_info entrypoint which called by the
       82*     request_info command/active_function to return specific queue
       83*     information about absentee, output, io, retrieval, and file transfer
       84*     requests.  Added the internal procedures, buffer_abs_element,
       85*     buffer_com_element, buffer_out_element, buffer_retv_element, and
       86*     buffer_imft_element to format the return information for the caller.
       87*     Alter the flow of code execution at various points when the rqi_sw switch
       88*     is ON.  The rqi_sw informs lar_util_ that it was called by the
       89*     request_info command/AF.
       90*     Added checks for selecting OUTPUT requests with special forms only.
       91*  8) change(88-09-01,Parisek), approve(88-09-01,PBF7913),
       92*     audit(88-09-07,Farley), install(88-09-09,MR12.2-1101):
       93*     Removed the displaying of the "delete" and "dupt" request flags for
       94*     request types they do not pertain to.  Also check imft's
       95*     "remote_transfer" flag before displaying the "files" and "subtrees"
       96*     flags for the imft request type.  "files" and "subtrees" do not pertain
       97*     to imft requests coming from the remote system.
       98*  9) change(88-09-13,Beattie), approve(88-08-01,MCR7948),
       99*     audit(88-10-11,Farley), install(88-10-14,MR12.2-1165):
      100*     Add support for displaying extend, update and delete for IMFT requests.
      101* 10) change(88-09-13,Farley), approve(88-09-16,MCR7911),
      102*     audit(88-10-25,Wallman), install(88-10-28,MR12.2-1199):
      103*     Updated to use version 5 dprint_msg.  Also added "plotter" as one of the
      104*     valid output_modules.
      105* 11) change(90-12-10,Vu), approve(90-12-10,MCR8231), audit(92-09-25,Zimmerman),
      106*     install(92-10-06,MR12.5-1021):
      107*     Header for list_absentee_request has garbage total.
      108*                                                   END HISTORY COMMENTS */
      109 
      110 /* format: on */
      111 
      112 /* Arguments */
      113 
      114 dcl  a_info_ptr ptr;
      115 dcl  a_code fixed bin (35);
      116 
      117 /* Automatic variables, in alphabetic order */
      118 
      119 
      120 dcl  abs_name char (32);
      121 dcl  access_class bit (72) aligned;
      122 dcl  aclass_string char (170);
      123 dcl  af_flag_str char (512) varying;
      124 dcl  afsw bit (1) aligned;				/* active function call */
      125 dcl  agdd char (168);				/* argument directory, directory portion */
      126 dcl  agde char (32);				/* argument directory, entry portion */
      127 dcl  aguid bit (36);				/* argument directory, UID */
      128 dcl  allsw bit (1) aligned;				/* print all for request_info */
      129 dcl  areap ptr;
      130 dcl  argl fixed bin;
      131 dcl  argx fixed bin;				/* argument string index */
      132 dcl  auto_forms_name char (forms_max_lth) varying;
      133 dcl  buffer char (512) aligned;
      134 dcl  check_abs_name bit (1) aligned;
      135 dcl  check_user bit (1) aligned;
      136 dcl  code fixed bin (35);
      137 dcl  curarg_start fixed bin;
      138 dcl  deferred_abs bit (1) aligned;
      139 dcl  deferred_count fixed bin;
      140 dcl  dirname char (168);
      141 dcl  ename char (32);
      142 dcl  expandedlen fixed bin;
      143 dcl  expandlen fixed bin;
      144 dcl  expandp ptr;
      145 dcl  header_position fixed bin;
      146 dcl  i fixed bin;
      147 dcl  j fixed bin;
      148 dcl  last_comma fixed bin;
      149 dcl  len fixed bin;
      150 dcl  len_offset fixed bin;
      151 dcl  ll fixed bin;
      152 dcl  1 local_mseg_message_info like mseg_message_info aligned;
      153 dcl  long_id bit (1) aligned;
      154 dcl  messcount fixed bin;
      155 dcl  modes char (100) var;
      156 dcl  msg_time fixed bin (71);
      157 dcl  n_bad_vrsn fixed bin;
      158 dcl  no_totals bit (1) aligned;
      159 dcl  offs char (256) varying;
      160 dcl  offslen fixed bin (21);
      161 dcl  old_ms_id bit (72) aligned;
      162 dcl  ons char (256) varying;
      163 dcl  onslen fixed bin (21);
      164 dcl  pass1 bit (1) aligned;
      165 dcl  person char (32);
      166 dcl  position fixed bin;
      167 dcl  print_requests bit (1) aligned;
      168 dcl  print_user_column bit (1) aligned;
      169 dcl  project char (32);
      170 dcl  psn_ll fixed bin;
      171 dcl  psn_s fixed bin;
      172 dcl  queue_string char (32);
      173 dcl  read_all bit (1) aligned;
      174 dcl  reqp ptr;
      175 dcl  retrying bit (1) aligned;
      176 dcl  rqdd char (168);				/* request directory, directory portion */
      177 dcl  rqde char (32);				/* request directory, entry portion */
      178 dcl  rqid char (19);				/* request directory, UID */
      179 dcl  rqi_buffered bit (1) aligned;			/* ON if output buffered for rqi */
      180 dcl  rqi_sw bit (1) aligned;				/* command/active function entry point */
      181 dcl  rs_len fixed bin;
      182 dcl  s char (1) aligned;
      183 dcl  scrunchedp ptr;
      184 dcl  select_sw bit (1) aligned;
      185 dcl  sender_id char (32);
      186 dcl  state fixed bin;
      187 dcl  str char (32) varying;
      188 dcl  tbf char (32) var;
      189 dcl  time char (64) var;
      190 dcl  time_now fixed bin (71);
      191 dcl  total_for_user fixed bin;
      192 dcl  total_selected fixed bin;
      193 dcl  user_matches bit (1) aligned;
      194 
      195 /* Based */
      196 
      197 dcl  region area (1000) based (areap);
      198 dcl  cstrng char (info.output_count) aligned based (info.temptr);
      199 dcl  args_con_blanks char (expandlen) aligned based (expandp);
      200 dcl  args_sans_blanks char (expandlen) aligned based (scrunchedp);
      201 dcl  based_dummy fixed bin based;			/* for freeing requests without computing their extents */
      202 
      203 /* Conditions */
      204 
      205 dcl  cleanup condition;
      206 
      207 /* Internal Static */
      208 
      209 dcl  header_length int static options (constant) fixed bin init (74);
      210 dcl  ABS_VER_5 fixed bin (17) init (5) static options (constant);
      211 dcl  ABS_VER_4 fixed bin (17) init (4) static options (constant);
      212 						/* a request_version of 4 means that this abs was queued under MR11. */
      213 						/* Any abs queued under MR12 will be version 5. */
      214 dcl  DEFAULT_LINE_LTH int static options (constant) fixed bin init (79);
      215 dcl  DEFAULT_OUTPUT_LTH int static options (constant) fixed bin init (-1);
      216 dcl  IMFT fixed bin (17) int static options (constant) init (5);
      217 dcl  TAB_39 int static options (constant) fixed bin init (39);
      218 dcl  TAB_44 int static options (constant) fixed bin init (44);
      219 dcl  TOO_SMALL_LINE_LTH int static options (constant) fixed bin init (50);
      220 dcl  Notify_msg char (13) static options (constant) init ("Notify:		yes
      221 ");
      222 dcl  Restarted_msg char (16) int static options (constant) init ("Restarted:		yes
      223 ");
      224 dcl  Truncate_msg char (15) int static options (constant) init ("Truncate:		yes
      225 ");
      226 dcl  line_nbrs_msg char (18) static options (constant) init ("Line numbers:	yes
      227 ");
      228 dcl  DUPT_msg char (11) static options (constant) init ("DUPT:		yes
      229 ");
      230 dcl  NL char (1) int static options (constant) init ("
      231 ");
      232 dcl  pp_request_type (2:4) char (9) aligned int static options (constant) init ("7punch", "mcc_punch", "raw_punch");
      233 
      234 dcl  state_names (-1:6) char (48) int static options (constant) init ("state undefined",
      235 						/* -1 */
      236 	"unprocessed",				/* 0 */
      237 	"deferred",				/* 1 */
      238 	"state changing",				/* 2 */
      239 	"eligible",				/* 3 */
      240 	"running",				/* 4 */
      241 	"bumped",					/* 5 */
      242 	"deferred until process termination");		/* 6 */
      243 
      244 dcl  static_psn_s fixed bin int static;
      245 dcl  static_ll fixed bin int static;
      246 dcl  static_header_position fixed bin int static;
      247 dcl  static_total_selected fixed bin int static;
      248 dcl  static_messcount fixed bin int static;
      249 dcl  static_deferred_count fixed bin int static;
      250 dcl  static_position fixed bin int static;
      251 
      252 /* Ext Entries */
      253 
      254 dcl  aim_check_$greater entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
      255 dcl  convert_authorization_$to_string_short ext entry (bit (72) aligned, char (*), fixed bin (35));
      256 dcl  date_time_$format entry (char (*), fixed bin (71), char (*), char (*)) returns (char (250) var);
      257 dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
      258 dcl  get_group_id_ entry returns (char (32));
      259 dcl  hcs_$status_long entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
      260 dcl  ioa_$rs entry options (variable);
      261 dcl  ioa_$rsnnl entry options (variable);
      262 dcl  get_line_length_ entry (char (*), fixed bin, fixed bin (35));
      263 dcl  get_system_free_area_ entry (ptr);
      264 dcl  match_request_id_ entry (fixed bin (71), char (*)) returns (bit (1) aligned);
      265 dcl  match_star_name_ entry (char (*), char (*), fixed bin (35));
      266 dcl  message_segment_$get_message_count_index entry (fixed bin, fixed bin, fixed bin (35));
      267 dcl  message_segment_$read_message_index entry (fixed bin, pointer, pointer, fixed bin (35));
      268 dcl  request_id_ entry (fixed bin (71)) returns (char (19));
      269 
      270 
      271 /* Builtins */
      272 
      273 dcl  (addr, after, before, clock, hbound, length, index, lbound, null, reverse, rtrim, substr, unspec) builtin;
      274 
      275 /* Error table */
      276 
      277 dcl  error_table_$moderr ext fixed bin;
      278 dcl  error_table_$no_message ext fixed bin;
      279 dcl  error_table_$bad_segment ext fixed bin (35);
      280 
      281 
      282 	afsw = "0"b;
      283 	rqi_sw = "0"b;
      284 	goto COMMON_INIT;
      285 
      286 request_info:
      287      entry (a_info_ptr, a_afsw, a_code);
      288 
      289 dcl  a_afsw bit (1) aligned;				/* On if rqi called as AF */
      290 
      291 /* This entry is called by the queue-info command/active function request_info.
      292*   It produces output in a simple formatted line by line format.  It does not produce
      293*   any header or totals information in its output.
      294**/
      295 
      296 	afsw = a_afsw;
      297 	rqi_sw = "1"b;
      298 
      299 COMMON_INIT:					/* Initialize */
      300 	info_ptr = a_info_ptr;
      301 	a_code = 0;
      302 	reqp = null;
      303 	total_selected, total_for_user, deferred_count, n_bad_vrsn, position, code = 0;
      304 
      305 	time_now = clock ();
      306 
      307 /* Set some local switches, based on combinations of input switches */
      308 
      309 	if info.long_id_sw | info.long_sw
      310 	then					/* if -long or -long_id */
      311 	     long_id = "1"b;			/* print the long form of request IDs */
      312 	else long_id = ""b;				/* else print the short form */
      313 
      314 	check_user = info.user_sw;			/* see if a user name was specified by the caller */
      315 	if info.person = "*" & info.project = "*"
      316 	then					/* if caller said -user *.* */
      317 	     check_user = ""b;			/* pretend user was not specified */
      318 
      319 	if info.abs_q_1 & info.queue = 0
      320 	then					/* if running Qs 0 and 1 together and this is Q 0 */
      321 	     static_header_position = 0;		/* indicate that we have no Q 0 output yet */
      322 
      323 /* Decide whether to print the user column */
      324 
      325 	if info.admin_sw				/* if we are in admin mode */
      326 	     & (^check_user				/* and we don't have a user name */
      327 	     | (check_user				/* or we have a user name */
      328 	     & (info.person = "*" | info.project = "*")))
      329 	then					/* but it could match several users */
      330 	     print_user_column = "1"b;		/* then print the user name for each request */
      331 	else print_user_column = ""b;			/* else they're all from the same user so don't print the name */
      332 
      333 /* See if we have to read all requests, or just those for the user whose process we're running in */
      334 
      335 	if info.admin_sw | info.position_sw
      336 	then read_all = "1"b;
      337 	else read_all = ""b;
      338 
      339 /* See if we have to look at the contents of a request to decide whether to select it */
      340 
      341 	if info.user_sw | info.immediate | info.resource_sw | info.dirname_sw | info.ename_sw | info.id_sw
      342 	     | info.deferred_indefinitely | info.sender_sw | info.forms_sw
      343 	then select_sw = "1"b;			/* we do */
      344 	else select_sw = ""b;			/* we don't */
      345 
      346 /* Initialize some variables used for checking the user ID of each request */
      347 
      348 	if check_user
      349 	then do;					/* if we have to check the user, copy the name and project */
      350 	     person = info.person;
      351 	     project = info.project;
      352 	end;					/* but if user not specified */
      353 	else if info.position_sw			/* and we can't use the "own" primitives because we have to read
      354*						   every request to get the positions of the ones we select */
      355 	     & ^info.admin_sw
      356 	then do;					/* and we're not listing all users' requests */
      357 	     person = get_group_id_ ();		/* get the ID of this user so we can pick out his requests */
      358 	     project = before (after (person, "."), ".");
      359 	     person = before (person, ".");
      360 	     check_user = "1"b;			/* and remember to check each request for a matching user name */
      361 	end;
      362 
      363 /* If directory name supplied, get its UID, so we can try UID matching to get around the multiply-named directory problem */
      364 
      365 	if info.dirname_sw
      366 	then do;
      367 	     call expand_pathname_ ((info.dirname), agdd, agde, code);
      368 	     if code ^= 0
      369 	     then goto return_code;			/* can't happen since caller already expanded it ok */
      370 	     call hcs_$status_long (agdd, agde, (1), addr (branch_status), null, code);
      371 	     if code = 0
      372 	     then aguid = branch_status.unique_id;
      373 	     else aguid = ""b;			/* ""b means don't try UID matching */
      374 	end;
      375 
      376 /* If listing absentee requests, see if we have to append the .absin suffix to a name given by the user */
      377 
      378 	check_abs_name = ""b;
      379 	if info.request_type = ABS
      380 	then if index (info.ename, ".absin") = 0 & length (rtrim (info.ename)) <= 26
      381 	     then do;
      382 		abs_name = rtrim (info.ename) || ".absin";
      383 		check_abs_name = "1"b;
      384 	     end;
      385 
      386 /* Figure out where in the output segment to start putting our output lines . This gets complicated because
      387*   we list absentee queues 0 and 1 as if they were one queue. Queue zero exists only so the operator can
      388*   move requests "to the head of queue 1", even though it is impossible to add messages to the head
      389*   of a message segment.
      390*
      391*   So here, we have to adjust some variables to run the Q 0 and Q 1 listings together,
      392*   instead of separating them by a header. */
      393 
      394 	info.output_count = info.input_count + 1;	/* point output_count at first vacant char */
      395 
      396 	if rqi_sw
      397 	then goto message_count;
      398 
      399 	if info.output_count = 1
      400 	then					/* if nothing in segment yet */
      401 	     call put_message (NL);			/* skip a line */
      402 
      403 	if (info.abs_q_1 & static_header_position > 0 & info.queue = 1)
      404 	then do;					/* if running Qs 0 and 1 together */
      405 	     header_position = static_header_position;	/* get position of header that's already there */
      406 	     position = static_position;		/* and Q position of last request in Q 0 */
      407 	     deferred_count = static_deferred_count;	/* and count of deferred requests */
      408 
      409 
      410 	     if substr (cstrng, info.output_count - 2, 2) = NL || NL
      411 	     then					/* if output seg ends in double newline */
      412 		info.output_count = info.output_count - 1;
      413 						/* get rid of one of them */
      414 
      415 	     if info.total_sw & info.position_sw & static_total_selected > 0
      416 	     then do;				/* continue position list from Q 0 */
      417 		psn_s = static_psn_s;		/* position of the "s" in "Positions" */
      418 		ll = static_ll;			/* terminal's line length */
      419 		psn_ll = 0;			/* too difficult to append to current line, so start a new one */
      420 		if substr (cstrng, info.output_count - 2, 1) = "."
      421 		then				/* but if we can find the trailing period */
      422 		     substr (cstrng, info.output_count - 2, 1) = ",";
      423 						/* change it back to a comma */
      424 		substr (cstrng, psn_s, 2) = "s:";	/* and be sure it says "Positions:" */
      425 	     end;					/* end continue position list */
      426 	end;
      427 
      428 	else do;					/* else reserve a place for the header */
      429 	     header_position = info.output_count;	/* remember where it starts */
      430 	     info.output_count = info.output_count + header_length;
      431 						/* move vacant char index past space for header */
      432 	     substr (cstrng, header_position, header_length) = "";
      433 						/* clear it, so we don't print lots of \000's if we
      434*						   exit with an error before getting around to filling it in */
      435 	     static_total_selected = 0;		/* and make sure there's no garbage in this variable */
      436 	end;
      437 
      438 
      439 /* See if we can get the total number of requests in the queue */
      440 
      441 message_count:
      442 	no_totals = ""b;				/* assume we can */
      443 	call message_segment_$get_message_count_index (info.mseg_idx, messcount, code);
      444 	if code ^= 0
      445 	then do;					/* user might have read or own permission, but not status */
      446                messcount = 0;
      447 	     if code ^= error_table_$moderr
      448 	     then goto return_code;			/* if that is not the case, give up immediately */
      449 	     else do;				/* that was the case */
      450 		code = 0;
      451 		no_totals = "1"b;			/* remember not to print the total requests */
      452 		info.no_total_sw = "1"b;		/* tell caller not to print "No requests in any queue"  */
      453 	     end;
      454           end;
      455 	else if messcount = 0
      456 	then go to fin;				/* if no requests then we are done */
      457 
      458 	if info.admin_sw				/* if reading all requests */
      459 	     & info.total_sw			/* just to count them */
      460 	     & ^select_sw				/* and not being selective about it */
      461 	     & ^info.position_sw			/* and not printing their positions */
      462 	     & ^no_totals				/* and we were able to get the count */
      463 	then do;					/* save lots of time */
      464 	     total_for_user = messcount;
      465 	     total_selected = messcount;		/* don't bother reading thru the queue */
      466 	     goto fin;				/* just go print the total */
      467 	end;
      468 
      469 /* Set up to read requests from the queue */
      470 
      471 	call get_system_free_area_ (areap);		/* get area in which to place request */
      472 	mseg_message_info_ptr = addr (local_mseg_message_info);
      473 	reqp, expandp, scrunchedp = null ();		/* init for cleanup handler */
      474 	on cleanup call cleaner_up;			/* establish cleanup handler */
      475 
      476 /* Get started through the queue by reading either the first message in the queue, or the first message for this user */
      477 
      478 	retrying = ""b;
      479 retry_1:
      480 	reqp, requestp, dmp = null;			/* init these to avoid faults */
      481 	unspec (local_mseg_message_info) = ""b;
      482 	local_mseg_message_info.version = MSEG_MESSAGE_INFO_V1;
      483 	local_mseg_message_info.own = ^read_all;
      484 	local_mseg_message_info.message_code = MSEG_READ_FIRST;
      485 	call message_segment_$read_message_index (info.mseg_idx, areap, mseg_message_info_ptr, code);
      486 
      487 	if ^retrying
      488 	then					/* retry the read once, if queue has been salvaged */
      489 	     if code = error_table_$bad_segment
      490 	     then do;
      491 		retrying = "1"b;
      492 		goto retry_1;
      493 	     end;
      494 
      495 /* Top of loop through all requests in queue. The bottom of this loop, at the
      496*   label "skip", does an incremental read and then comes here. We exit the loop
      497*   by going to mess_err if code is nonzero. This is for both normal and abnormal exits. */
      498 
      499 loop:
      500 	if code ^= 0
      501 	then go to mess_err;			/* exit loop if no message or real error */
      502 	reqp, requestp, dmp, ft_request_ptr = mseg_message_info.ms_ptr;
      503 						/* set ptrs to all of the request structures */
      504 	sender_id = mseg_message_info.sender_id;
      505 	access_class = mseg_message_info.ms_access_class;
      506 
      507 /* Check version of request, and complain if not current. It is worthwhile to diagnose this error, since it is
      508*   likely to occur often now. We are changing the request versions, and there are lots of private
      509*   versions of the ear and dprint commands around to put old version requests into the queues. */
      510 
      511 	if request.hdr_version ^= queue_msg_hdr_version_1
      512 	then goto vrsn_ng;
      513 
      514 	if info.request_type = RETV
      515 	then if retv_request.version = retv_request_version_2
      516 	     then goto vrsn_ok;
      517 	     else goto vrsn_ng;
      518 	else if info.request_type = ABS
      519 	then if (request.request_version = abs_message_version_6 | request.request_version = ABS_VER_5
      520 		| request.request_version = ABS_VER_4)	/* Allow old versions */
      521 	     then goto vrsn_ok;
      522 	     else goto vrsn_ng;
      523 	else if info.request_type = IO | info.request_type = OUTPUT
      524 	then if dprint_msg.version = dprint_msg_version_5 | dprint_msg.version = dprint_msg_version_4
      525 		| dprint_msg.version = dprint_msg_version_3
      526 	     then goto vrsn_ok;
      527 	     else goto vrsn_ng;
      528 	else if (rqi_sw & info.request_type = IMFT)	/* We only deal with IMFT in this module if invoked as request_info */
      529 	then if ft_request.version = FT_REQUEST_VERSION_1
      530 	     then goto vrsn_ok;
      531 
      532 vrsn_ng:
      533 	if rqi_sw & afsw
      534 	then goto skip;				/* simply ignore */
      535 	n_bad_vrsn = n_bad_vrsn + 1;			/* count bad ones for printing in totals at end */
      536 
      537 	if check_user
      538 	then do;					/* don't complain to one user about another's bad requests */
      539 	     if person ^= "*"
      540 	     then if person ^= before (sender_id, ".")
      541 		then goto skip;
      542 	     if project ^= "*"
      543 	     then if project ^= before (after (sender_id, "."), ".")
      544 		then goto skip;
      545 	end;
      546 
      547 	total_selected = total_selected + 1;		/* we have "selected" this one, to complain about it */
      548 	total_for_user = total_for_user + 1;		/* also count it among this user's requests */
      549 
      550 	if ^info.total_sw
      551 	then do;					/* long or normal mode; print stuff in mseg return args */
      552 	     unspec (msg_time) = mseg_message_info.ms_id; /* this tells us when it was entered */
      553 	     time = date_time_$format ("date_time", msg_time, "", "");
      554 						/* format it so we can show it to the user */
      555 	     if info.long_sw
      556 	     then do;				/* might as well make it look pretty */
      557 		call put_message (NL);
      558 		call ioa_$rs ("User:^21t^a", buffer, len, sender_id);
      559 		call put_buffer;
      560 		call ioa_$rs ("Time queued:^21t^a", buffer, len, time);
      561 		call put_buffer;
      562 		call put_message_nl ("Request has obsolete or incorrect format");
      563 	     end;
      564 	     else do;				/* normal format */
      565 		if print_user_column
      566 		then do;
      567 		     call ioa_$rsnnl ("^30a", buffer, len, sender_id);
      568 		     call put_buffer;
      569 		end;
      570 		call ioa_$rs ("Request has obsolete or incorrect format. Time queued: ^a", buffer, len, time);
      571 		call put_buffer;
      572 	     end;
      573 	end;					/* end not totals */
      574 
      575 	goto skip;
      576 
      577 vrsn_ok:						/* See if the user matches */
      578 	user_matches = ""b;				/* start out being pessimistic */
      579 	if check_user
      580 	then do;					/* if user name was given, see if it matches */
      581 	     if person ^= "*"
      582 	     then do;				/* require matching person ID */
      583 		if person ^= before (sender_id, ".")
      584 		then do;				/* user does not match */
      585 		     if info.request_type ^= ABS
      586 		     then goto wrong_user;
      587 		     if ^request.proxy
      588 		     then goto wrong_user;		/* wrong_user unless proxy request */
      589 		     if person ^= before (request.proxy_name, ".")
      590 		     then goto wrong_user;		/* proxy user doesn't match */
      591 		end;
      592 	     end;
      593 
      594 	     if project ^= "*"
      595 	     then do;				/* require matching project ID */
      596 		if project ^= before (after (sender_id, "."), ".")
      597 		then do;				/* project does not match */
      598 		     if info.request_type ^= ABS
      599 		     then goto wrong_user;
      600 		     if ^request.proxy
      601 		     then goto wrong_user;		/* wrong_user unless proxy request */
      602 		     if project ^= before (after (request.proxy_name, "."), ".")
      603 		     then goto wrong_user;
      604 		end;
      605 	     end;
      606 
      607 	end;					/* end check user */
      608 
      609 	user_matches = "1"b;			/* true if we fell thru ok or if ^check_user */
      610 wrong_user:					/* come here from above as soon as user is found not to match */
      611 	if user_matches
      612 	then total_for_user = total_for_user + 1;	/* count requests belonging to the specified user */
      613 
      614 
      615 /* Now see if the request is deferred or not, and update the request position counter.
      616*   If printing position, we count the request even if we are not listing it, so we will
      617*   know the positions of subsequent requests that we do list. So we make this check before
      618*   eliminating the request by going to skip.
      619*
      620*   But, if -immediate was given, we not only don't list deferred requests, but we don't count
      621*   them when computing the positions of other requests.  We assume the deferred requests will
      622*   be passed by the other requests whose positions we will print. */
      623 
      624 	if info.immediate | read_all
      625 	then do;					/* check for immediate first */
      626 	     if info.request_type = IO | info.request_type = OUTPUT
      627 	     then					/* for I/O requests */
      628 		if request.state = STATE_DEFERRED
      629 		then goto deferred_request;		/* the decision is very simple */
      630 	     if info.request_type = ABS
      631 	     then do;				/* for absentee, it is a bit more complicated */
      632 		if request.state < STATE_ELIGIBLE
      633 		then do;
      634 		     if request.user_deferred_until_time
      635 		     then if request.deferred_time > time_now
      636 			then goto deferred_request;
      637 		     if request.user_deferred_indefinitely
      638 		     then goto deferred_request;
      639 		     if request.operator_deferred_until_time
      640 		     then if request.deferred_time > time_now
      641 			then goto deferred_request;
      642 		     if request.operator_deferred_indefinitely
      643 		     then goto deferred_request;
      644 		     if request.cpu_time_limit
      645 		     then goto deferred_request;
      646 		end;
      647 	     end;					/* retrieval requests do not have a non-immediate mode */
      648 	     goto immediate_request;
      649 
      650 deferred_request:
      651 	     deferred_count = deferred_count + 1;	/* count deferred requests for totals line */
      652 	     if info.immediate
      653 	     then goto skip;
      654 
      655 immediate_request:
      656 	end;					/* end immediate checking */
      657 
      658 	position = position + 1;			/* this request counts for position computation */
      659 
      660 /* Now start checking whether we want to list this request or count it in the totals */
      661 
      662 /* First, check the user match switch that we set above */
      663 
      664 	if ^user_matches
      665 	then goto skip;
      666 
      667 /* Copy a few variables out of the queue_msg_hdr part of the request structure */
      668 
      669 	dirname = request.dirname;
      670 	ename = request.ename;
      671 	msg_time = request.msg_time;
      672 	state = request.state;
      673 	if state > hbound (state_names, 1) | state < lbound (state_names, 1)
      674 	then state = -1;
      675 
      676 /* See if the ID, dirname, and entry name match */
      677 
      678 	if info.id_sw
      679 	then if ^match_request_id_ (msg_time, (info.request_id))
      680 	     then goto skip;
      681 
      682 	if info.dirname_sw
      683 	then if dirname ^= info.dirname
      684 	     then do;
      685 		if aguid = ""b
      686 		then goto skip;			/* if we don't have UID of info.dirname, don't try UID match */
      687 		call expand_pathname_ (dirname, rqdd, rqde, code);
      688 		if code ^= 0
      689 		then goto skip;
      690 		call hcs_$status_long (rqdd, rqde, (1), addr (branch_status), null, code);
      691 		if code ^= 0
      692 		then goto skip;
      693 		if aguid ^= branch_status.unique_id
      694 		then goto skip;
      695 	     end;
      696 
      697 	if info.ename_sw
      698 	then if ename ^= info.ename
      699 	     then do;
      700 		call match_star_name_ (ename, (info.ename), code);
      701 		if code ^= 0
      702 		then if ^check_abs_name
      703 		     then goto skip;
      704 		     else do;			/* user left off the .absin */
      705 			if ename ^= abs_name
      706 			then do;
      707 			     call match_star_name_ (ename, abs_name, code);
      708 			     if code ^= 0
      709 			     then goto skip;
      710 			end;
      711 		     end;
      712 	     end;
      713 
      714 /* These checks just apply to absentee requests */
      715 
      716 	if info.request_type = ABS
      717 	then do;
      718 	     if info.resource_sw
      719 	     then do;
      720 		if request.len_resource = 0
      721 		then goto skip;
      722 		if index (request.resource, info.resource_name) = 0
      723 		then goto skip;
      724 	     end;
      725 	     if info.deferred_indefinitely
      726 	     then if ^request.user_deferred_indefinitely & ^request.operator_deferred_indefinitely
      727 		then goto skip;
      728 	     if info.sender_sw
      729 	     then					/* check sender (RJE station) */
      730 		if request.sender ^= info.sender
      731 		then do;
      732 		     call match_star_name_ ((request.sender), (info.sender), code);
      733 		     if code ^= 0
      734 		     then goto skip;
      735 		end;
      736 
      737 /* Later, add more checks to select absentee requests by their state, and
      738*   by their cpu time and resource requirements, mainly for the operator's use. */
      739 
      740 	end;					/* end absentee only checks */
      741 
      742 	if info.request_type = OUTPUT
      743 	then do;
      744 	     if info.forms_sw
      745 	     then do;
      746 		if dprint_msg.version < dprint_msg_version_5
      747 		then auto_forms_name = rtrim (dprint_msg.forms);
      748 		else auto_forms_name = dprint_msg.forms_name;
      749 		if length (auto_forms_name) = 0
      750 		then goto skip;
      751 		if info.forms_name ^= ""
      752 		then if index (auto_forms_name, rtrim (info.forms_name)) = 0
      753 		     then goto skip;
      754 	     end;
      755 	end;					/* end output only checks */
      756 
      757 /* Arriving here, we have selected this request, either for printing or counting in the totals */
      758 
      759 	total_selected = total_selected + 1;		/* increment number of requests */
      760 
      761 /* The following loops apply to request_info data */
      762 
      763 	allsw = "0"b;
      764 	offs, ons, af_flag_str = "";
      765 	if rqi_sw
      766 	then do;					/* request_info */
      767 	     if substr (info.com_rqi, 1, 1) = "1"b
      768 	     then do;				/* bit 1 means "all" */
      769 		allsw = "1"b;
      770 		info.com_rqi = "11111111111"b;
      771 	     end;
      772 	     do i = 1 to length (info.com_rqi);
      773 		if substr (info.com_rqi, i, 1) = "1"b
      774 		then do;
      775 		     call buffer_com_element (i);
      776 		     rqi_buffered = "1"b;
      777 		end;
      778 	     end;
      779 	     if info.request_type = ABS
      780 	     then do;
      781 		if allsw
      782 		then info.abs_rqi = "1111111111111"b;
      783 		do i = 1 to length (info.abs_rqi);
      784 		     if substr (info.abs_rqi, i, 1) = "1"b
      785 		     then do;
      786 			call buffer_abs_element (i);
      787 			rqi_buffered = "1"b;
      788 		     end;
      789 		end;
      790 		goto skip;
      791 	     end;
      792 	     if info.request_type = IO | info.request_type = OUTPUT
      793 	     then do;
      794 		if allsw
      795 		then info.output_rqi = "11111111111"b;
      796 		do i = 1 to length (info.output_rqi);
      797 		     if substr (info.output_rqi, i, 1) = "1"b
      798 		     then do;
      799 			call buffer_output_element (i);
      800 			rqi_buffered = "1"b;
      801 		     end;
      802 		end;
      803 		goto skip;
      804 	     end;
      805 	     if info.request_type = RETV
      806 	     then do;
      807 		if allsw
      808 		then info.retv_rqi = "1111"b;
      809 		do i = 1 to length (info.retv_rqi);
      810 		     if substr (info.retv_rqi, i, 1) = "1"b
      811 		     then do;
      812 			call buffer_retv_element (i);
      813 			rqi_buffered = "1"b;
      814 		     end;
      815 		end;
      816 		goto skip;
      817 	     end;
      818 	     if info.request_type = IMFT
      819 	     then do;
      820 		if allsw
      821 		then info.imft_rqi = "111"b;
      822 		do i = 1 to length (info.imft_rqi);
      823 		     if substr (info.imft_rqi, i, 1) = "1"b
      824 		     then do;
      825 			call buffer_imft_element (i);
      826 			rqi_buffered = "1"b;
      827 		     end;
      828 		end;
      829 		goto skip;
      830 	     end;
      831 	end;
      832 
      833 	if info.total_sw
      834 	then do;
      835 	     if info.position_sw
      836 	     then do;				/* print positions of selected requests */
      837 		if total_selected + static_total_selected = 1
      838 		then do;				/* if first one */
      839 		     psn_s = info.output_count + 8;	/* remember where the s in Positions is */
      840 		     call ioa_$rsnnl ("Positions:^2x^d,", buffer, len, position);
      841 		     call put_buffer;
      842 		     psn_ll = len;			/* the position string could get extremely long */
      843 		     call get_line_length_ ("user_output", ll, code);
      844 						/* so split it into terminal-sized sections */
      845 		     if code ^= 0
      846 		     then ll = DEFAULT_LINE_LTH;	/* guess low */
      847 		     if ll < TOO_SMALL_LINE_LTH
      848 		     then ll = DEFAULT_LINE_LTH;
      849 		end;
      850 		else do;
      851 		     call ioa_$rsnnl ("^x^d,", buffer, len, position);
      852 		     if psn_ll + len > ll
      853 		     then do;			/* output lines split by the tty dim look sloppy */
      854 			call put_message (NL);
      855 			psn_ll = 0;
      856 		     end;
      857 		     call put_buffer;
      858 		     psn_ll = psn_ll + len;
      859 		end;
      860 	     end;					/* end print positions */
      861 	     goto skip;				/* just totals, so don't print anything more about the request */
      862 	end;
      863 
      864 /* Not just totals. We will list this request, so start formatting some of its parameters. */
      865 
      866 	rqid = request_id_ (msg_time);
      867 	if ^long_id
      868 	then rqid = substr (rqid, 7, 8);
      869 
      870 /* If normal (not long) output form specified, summarize the request in a single line */
      871 
      872 	if ^info.long_sw
      873 	then do;
      874 
      875 	     if total_selected + static_total_selected = 1
      876 	     then do;				/* if we are about to list our first request */
      877 		call put_message (NL);		/* put blank line after totals line */
      878 		if print_user_column
      879 		then do;				/* if admin, for all users, print heading */
      880 		     call ioa_$rs ("User^31t^[^7x^]ID^[^18x^;^7x^]^[Input segment^s^;^[Pathname^;Entry name^]^]",
      881 			buffer, len, info.position_sw, long_id, (info.request_type = ABS), info.path_sw);
      882 		     call put_buffer;
      883 		end;
      884 	     end;
      885 
      886 /* Build up the line one field at a time. Some fields are optional, depending
      887*   on arguments given by user and passed in info.switches */
      888 
      889 	     if print_user_column
      890 	     then do;				/* if listing more than one user's requests */
      891 		call ioa_$rsnnl ("^30a", buffer, len, sender_id);
      892 						/* say who this one is from */
      893 		call put_buffer;
      894 	     end;
      895 
      896 	     if info.position_sw
      897 	     then do;
      898 		call ioa_$rsnnl ("^3d)^x", buffer, len, position);
      899 		call put_buffer;
      900 	     end;
      901 
      902 	     call ioa_$rsnnl ("^a", buffer, len, rqid);
      903 	     call put_buffer;
      904 
      905 	     if info.path_sw
      906 	     then call ioa_$rsnnl ("^x^a^[>^]^a", buffer, len, dirname, (dirname ^= ">"), ename);
      907 	     else call ioa_$rsnnl ("^x^a", buffer, len, ename);
      908 	     call put_buffer;
      909 
      910 	     deferred_abs = ""b;
      911 	     if ^info.brief_sw
      912 	     then do;				/* don't print request state if -brief given */
      913 		if info.request_type = ABS & state = 0
      914 		then do;				/* check for deferred but unprocessed abs jobs */
      915 		     if request.user_deferred_indefinitely
      916 		     then deferred_abs = "1"b;
      917 		     else if request.user_deferred_until_time
      918 		     then if request.deferred_time > time_now
      919 			then deferred_abs = "1"b;
      920 		     if deferred_abs
      921 		     then call put_message (" (unprocessed, deferred");
      922 		end;
      923 
      924 		if state > 0
      925 		then do;				/* print state, if nonzero */
      926 		     if state > hbound (state_names, 1)
      927 		     then state = -1;		/* avoid fault if bad state */
      928 		     call ioa_$rsnnl ("^x(^a^[^;)^]", buffer, len, state_names (state),
      929 			(info.request_type = ABS & state = STATE_DEFERRED));
      930 		     call put_buffer;
      931 		end;
      932 	     end;
      933 
      934 /* The rest of these only apply to absentee requests */
      935 
      936 	     if info.request_type = ABS
      937 	     then do;
      938 		if ^info.brief_sw
      939 		then do;
      940 		     if state = STATE_DEFERRED | deferred_abs
      941 		     then do;
      942 			call explain_abs_deferral;
      943 			call put_message (")");
      944 		     end;
      945 
      946 		     if request.len_comment > 0
      947 		     then do;
      948 			call ioa_$rsnnl ("^x""^a""", buffer, len, request.comment);
      949 			call put_buffer;
      950 		     end;
      951 
      952 
      953 		     if info.resource_sw
      954 		     then do;			/* print resources even in normal mode */
      955 			i = index (request.resource, " ");
      956 						/* if blanks in resource string, quote it */
      957 			call ioa_$rsnnl ("^x-rsc ^[""^]^a^[""^]", buffer, len, (i > 0), request.resource, (i > 0));
      958 			call put_buffer;
      959 		     end;
      960 		end;				/* end not -brief */
      961 
      962 	     end;					/* end absentee */
      963 
      964 	     if info.request_type = OUTPUT
      965 	     then do;
      966 		if ^info.brief_sw
      967 		then do;
      968 		     if info.forms_sw
      969 		     then do;
      970 			if dprint_msg.version < dprint_msg_version_5
      971 			then auto_forms_name = rtrim (dprint_msg.forms);
      972 			else auto_forms_name = dprint_msg.forms_name;
      973 			i = index (auto_forms_name, " ");
      974 			call ioa_$rsnnl ("^x-forms ^[""^]^a^[""^]", buffer, len, (i > 0), auto_forms_name, (i > 0));
      975 			call put_buffer;
      976 		     end;
      977 		end;
      978 	     end;					/* end output */
      979 
      980 	     call put_message (NL);			/* we finally got to the end of that line */
      981 
      982 	end;					/* end normal (not long) output mode */
      983 
      984 /* Long form. Print each variable in the request in a separate line.
      985*   The first few variables are common to all request types. */
      986 
      987 	else do;					/* long form */
      988 	     call put_message (NL);			/* insert leading NL */
      989 	     if print_user_column
      990 	     then do;				/* if more than one user's requests are being listed */
      991 		call ioa_$rs ("User:^21t^a", buffer, len, sender_id);
      992 		call put_buffer;
      993 	     end;
      994 	     aclass_string = "";
      995 	     call convert_authorization_$to_string_short (access_class, aclass_string, code);
      996 	     if aclass_string ^= ""
      997 	     then do;				/* print access class */
      998 		call ioa_$rs ("Access class:^21t^a", buffer, len, aclass_string);
      999 		call put_buffer;
     1000 	     end;
     1001 	     if info.position_sw
     1002 	     then do;
     1003 		call ioa_$rs ("Position in queue:^21t^d", buffer, len, position);
     1004 		call put_buffer;
     1005 	     end;
     1006 	     call ioa_$rs ("Request ID:^21t^a", buffer, len, rqid);
     1007 	     call put_buffer;
     1008 	     time = date_time_$format ("date_time", msg_time, "", "");
     1009 	     call ioa_$rs ("Time queued:^21t^a", buffer, len, time);
     1010 	     call put_buffer;
     1011 	     call ioa_$rs ("^[Input segment:^;Pathname:^]^21t^a^[>^]^a", buffer, len, (info.request_type = ABS),
     1012 		dirname, (dirname ^= ">"), ename);
     1013 	     call put_buffer;
     1014 	     call ioa_$rsnnl ("State:^21t^a", buffer, len, state_names (state));
     1015 	     call put_buffer;
     1016 	     if state = STATE_DEFERRED & info.request_type = ABS
     1017 	     then call explain_abs_deferral;
     1018 	     call put_message (NL);
     1019 
     1020 /* Now print per-request-type information */
     1021 
     1022 /* Absentee request */
     1023 
     1024 	     if info.request_type = ABS
     1025 	     then do;
     1026 
     1027 /* First print information that's always there */
     1028 
     1029 		if request.restartable
     1030 		then str = "yes";
     1031 		else str = "no";
     1032 		call ioa_$rs ("Restartable:^21t^a", buffer, len, str);
     1033 		call put_buffer;
     1034 
     1035 /* Then print values of optional items, but only if they were specified in the request */
     1036 
     1037 		if request.notify
     1038 		then call put_message (Notify_msg);
     1039 		if request_version > ABS_VER_4
     1040 		then do;
     1041 
     1042 /* The Following two messages only apply to newer request_version */
     1043 
     1044 		     if request.restarted
     1045 		     then call put_message (Restarted_msg);
     1046 		     if request.truncate_absout
     1047 		     then call put_message (Truncate_msg);
     1048 		end;
     1049 		if request.user_deferred_until_time
     1050 		then do;
     1051 		     time = date_time_$format ("date_time", request.deferred_time, "", "");
     1052 		     call ioa_$rs ("Deferred time:^21t^a", buffer, len, time);
     1053 		     call put_buffer;
     1054 		end;
     1055 		if request.user_deferred_indefinitely
     1056 		then call put_message_nl ("Deferred:		indefinitely");
     1057 		if request.arg_count > 0
     1058 		then do;
     1059 		     expandlen = request.len_args + 25;
     1060 		     allocate args_con_blanks in (region) set (expandp);
     1061 		     allocate args_sans_blanks in (region) set (scrunchedp);
     1062 		     argl = request.arg_lengths (1);
     1063 		     curarg_start = 1;
     1064 		     args_sans_blanks = substr (request.args, 1, argl);
     1065 		     call ioa_$rs ("Argument string:^21t""^a""", args_con_blanks, expandedlen, args_sans_blanks);
     1066 		     info.output_count = info.output_count + expandedlen;
     1067 		     substr (cstrng, info.output_count - expandedlen) = substr (args_con_blanks, 1, expandedlen);
     1068 		     curarg_start = curarg_start + argl;
     1069 		     do argx = 2 to request.arg_count;
     1070 			argl = request.arg_lengths (argx);
     1071 			args_sans_blanks = substr (request.args, curarg_start, argl);
     1072 			call ioa_$rs ("^21t""^a""", args_con_blanks, expandedlen, args_sans_blanks);
     1073 			info.output_count = info.output_count + expandedlen;
     1074 			substr (cstrng, info.output_count - expandedlen) = substr (args_con_blanks, 1, expandedlen);
     1075 			curarg_start = curarg_start + argl;
     1076 		     end;
     1077 		     free scrunchedp -> args_sans_blanks in (region);
     1078 		     free expandp -> args_con_blanks in (region);
     1079 		end;
     1080 		if request.max_cpu_time > 0
     1081 		then do;
     1082 		     call ioa_$rs ("CPU limit:^21t^d seconds", buffer, len, request.max_cpu_time);
     1083 		     call put_buffer;
     1084 		end;
     1085 		if request.len_output > 0
     1086 		then do;
     1087 		     call ioa_$rs ("Output file:^21t^a", buffer, len, request.output_file);
     1088 		     call put_buffer;
     1089 		end;
     1090 		if aim_check_$greater (request.requested_authorization, access_class)
     1091 		then do;
     1092 		     aclass_string = "";
     1093 		     call convert_authorization_$to_string_short (request.requested_authorization, aclass_string,
     1094 			code);
     1095 		     if aclass_string ^= ""
     1096 		     then do;
     1097 			call ioa_$rs ("Requested auth:^21t^a", buffer, len, aclass_string);
     1098 			call put_buffer;
     1099 		     end;
     1100 		end;
     1101 		if request.len_proxy > 0
     1102 		then do;
     1103 		     call ioa_$rs ("Proxy user:^21t^a", buffer, len, request.proxy_name);
     1104 		     call put_buffer;
     1105 		end;
     1106 		if request.len_resource > 0
     1107 		then do;
     1108 		     call ioa_$rs ("Resources required:^21t^a", buffer, len, request.resource);
     1109 		     call put_buffer;
     1110 		end;
     1111 		if request.len_sender > 0
     1112 		then do;
     1113 		     call ioa_$rs ("Sender:^21t^a", buffer, len, request.sender);
     1114 		     call put_buffer;
     1115 		end;
     1116 		if request.len_comment > 0
     1117 		then do;
     1118 		     call ioa_$rs ("Comment:^21t^a", buffer, len, request.comment);
     1119 		     call put_buffer;
     1120 		end;
     1121 		if request.request_version > ABS_VER_5	/* version 6 elements */
     1122 		then do;
     1123 		     if request.no_start_up
     1124 		     then do;
     1125 			str = "yes";
     1126 			call ioa_$rs ("No start_up:^21t^a", buffer, len, str);
     1127 			call put_buffer;
     1128 		     end;
     1129 		     if request.initial_ring ^= -1
     1130 		     then do;
     1131 			call ioa_$rs ("Initial ring:^21t^d", buffer, len, request.initial_ring);
     1132 			call put_buffer;
     1133 		     end;
     1134 		     if request.len_homedir > 0
     1135 		     then do;
     1136 			call ioa_$rs ("Home dir:^21t^a", buffer, len, request.home_dir);
     1137 			call put_buffer;
     1138 		     end;
     1139 		     if request.len_initproc > 0
     1140 		     then do;
     1141 			call ioa_$rs ("Initial proc:^21t^a", buffer, len,
     1142 			     substr (request.init_proc, 1, request.len_initproc));
     1143 			call put_buffer;
     1144 		     end;
     1145 		end;
     1146 	     end;
     1147 
     1148 /* I/O daemon request */
     1149 
     1150 	     else if info.request_type = IO | info.request_type = OUTPUT
     1151 	     then do;
     1152 
     1153 /* Print stuff that's always given */
     1154 
     1155 		if lbound (pp_request_type, 1) <= dprint_msg.output_module
     1156 		     & dprint_msg.output_module <= hbound (pp_request_type, 1)
     1157 		then do;
     1158 		     call ioa_$rs ("Punch format:^21t^a", buffer, len, pp_request_type (dprint_msg.output_module));
     1159 		     call put_buffer;
     1160 		end;
     1161 		call ioa_$rs ("Copies:^21t^d", buffer, len, dprint_msg.copies);
     1162 		call put_buffer;
     1163 		if dprint_msg.delete_sw
     1164 		then str = "yes";
     1165 		else str = "no";
     1166 		call ioa_$rs ("Delete:^21t^a", buffer, len, str);
     1167 		call put_buffer;
     1168 
     1169 /* Then print optional stuff, but only if it was given */
     1170 
     1171 		if dprint_msg.heading ^= ""
     1172 		then do;
     1173 		     if substr (dprint_msg.heading, 1, 5) = " for "
     1174 		     then i = 6;
     1175 		     else i = 1;			/* start at char one if dprint added " for" */
     1176 		     call ioa_$rs ("Heading:^21t^a", buffer, len, substr (dprint_msg.heading, i));
     1177 		     call put_buffer;
     1178 		end;
     1179 		if dprint_msg.destination ^= ""
     1180 		then do;
     1181 		     call ioa_$rs ("Destination:^21t^a", buffer, len, dprint_msg.destination);
     1182 		     call put_buffer;
     1183 		end;
     1184 		if dprint_msg.top_label = dprint_msg.bottom_label & dprint_msg.top_label_lth > 0
     1185 		then do;
     1186 		     call ioa_$rs ("Labels:^21t^a", buffer, len, dprint_msg.top_label);
     1187 		     call put_buffer;
     1188 		end;
     1189 		else do;
     1190 		     if dprint_msg.top_label_lth > 0
     1191 		     then do;
     1192 			call ioa_$rs ("Top label:^21t^a", buffer, len, dprint_msg.top_label);
     1193 			call put_buffer;
     1194 		     end;
     1195 		     if dprint_msg.bottom_label_lth > 0
     1196 		     then do;
     1197 			call ioa_$rs ("Bottom label:^21t^a", buffer, len, dprint_msg.bottom_label);
     1198 			call put_buffer;
     1199 		     end;
     1200 		end;
     1201 		if dprint_msg.version < dprint_msg_version_5
     1202 		then auto_forms_name = rtrim (dprint_msg.forms);
     1203 		else auto_forms_name = dprint_msg.forms_name;
     1204 		if auto_forms_name ^= ""
     1205 		then do;
     1206 		     call ioa_$rs ("Forms:^21t^a", buffer, len, auto_forms_name);
     1207 		     call put_buffer;
     1208 		end;
     1209 		if dprint_msg.notify
     1210 		then call put_message (Notify_msg);
     1211 		if dprint_msg.line_nbrs
     1212 		then if dprint_msg.version > dprint_msg_version_3
     1213 		     then call put_message (line_nbrs_msg);
     1214 		if dprint_msg.defer_until_process_termination
     1215 		then call put_message (DUPT_msg);
     1216 		modes = "";
     1217 		if dprint_msg.nep
     1218 		then modes = modes || "-no_endpage ";
     1219 		if dprint_msg.non_edited
     1220 		then modes = modes || "-non_edited ";
     1221 		if dprint_msg.single
     1222 		then modes = modes || "-single ";
     1223 		if dprint_msg.truncate
     1224 		then modes = modes || "-truncate ";
     1225 		if dprint_msg.no_separator
     1226 		then modes = modes || "-no_separator ";
     1227 		if dprint_msg.esc
     1228 		then modes = modes || "-esc ";
     1229 		if dprint_msg.lmargin > 0
     1230 		then do;
     1231 		     call ioa_$rsnnl ("^a ^d ", tbf, j, "-indent", dprint_msg.lmargin);
     1232 		     modes = modes || tbf;
     1233 		end;
     1234 		if dprint_msg.line_lth > 0
     1235 		then do;
     1236 		     call ioa_$rsnnl ("^a ^d ", tbf, j, "-line_length", dprint_msg.line_lth);
     1237 		     modes = modes || tbf;
     1238 		end;
     1239 		if dprint_msg.page_lth > 0
     1240 		then do;
     1241 		     call ioa_$rsnnl ("^a ^d ", tbf, j, "-page_length", dprint_msg.page_lth);
     1242 		     modes = modes || tbf;
     1243 		end;
     1244 		if modes ^= ""
     1245 		then do;
     1246 		     call ioa_$rs ("Options:^21t^a", buffer, len, modes);
     1247 		     call put_buffer;
     1248 		end;
     1249 		if dprint_msg.chan_stop_path_lth > 0
     1250 		then do;
     1251 		     call ioa_$rs ("Channel stops:^21t^a", buffer, len, dprint_msg.chan_stop_path);
     1252 		     call put_buffer;
     1253 		end;
     1254 	     end;
     1255 
     1256 /* Retrieval request */
     1257 
     1258 	     else if info.request_type = RETV
     1259 	     then do;
     1260 		if retv_request.new_dirname ^= ""
     1261 		then do;
     1262 		     call ioa_$rs ("New pathname:^21t^a^[>^]^a", buffer, len, retv_request.new_dirname,
     1263 			(retv_request.new_dirname ^= ">"), retv_request.new_ename);
     1264 		     call put_buffer;
     1265 		end;
     1266 		if retv_request.from_time ^= 0
     1267 		then do;
     1268 		     time = date_time_$format ("date_time", retv_request.from_time, "", "");
     1269 		     call ioa_$rs ("From Time:^21t^a", buffer, len, time);
     1270 		     call put_buffer;
     1271 		end;
     1272 		if retv_request.to_time ^= 0 & ^retv_request.previous
     1273 		then do;
     1274 		     time = date_time_$format ("date_time", retv_request.to_time, "", "");
     1275 		     call ioa_$rs ("To Time:^21t^a", buffer, len, time);
     1276 		     call put_buffer;
     1277 		end;
     1278 		modes = "";
     1279 		if retv_request.subtree
     1280 		then modes = modes || "subtree ";
     1281 		if retv_request.notify
     1282 		then modes = modes || "notify ";
     1283 		if retv_request.previous
     1284 		then modes = modes || "previous ";
     1285 		if modes ^= ""
     1286 		then do;
     1287 		     call ioa_$rs ("Options:^21t^a", buffer, len, modes);
     1288 		     call put_buffer;
     1289 		end;
     1290 	     end;					/* end retrieval request */
     1291 	end;					/* end long output mode */
     1292 
     1293 /* As the label suggests, we come here to skip a request that does not meet the user-specified criteria */
     1294 
     1295 skip:						/* Free the storage occupied by this request */
     1296 	free reqp -> based_dummy in (region);		/* This will correctly free any one of the request types */
     1297 
     1298 /* Read another request from the queue */
     1299 
     1300 	old_ms_id = mseg_message_info.ms_id;		/* copy message id of last request, for use in incremental read */
     1301 
     1302 	retrying = ""b;
     1303 retry_2:
     1304 	reqp, requestp, dmp = null;			/* init these to avoid faults */
     1305 	local_mseg_message_info.ms_id = old_ms_id;
     1306 	local_mseg_message_info.message_code = MSEG_READ_AFTER_SPECIFIED;
     1307 	local_mseg_message_info.own = ^read_all;
     1308 
     1309 	call message_segment_$read_message_index (info.mseg_idx, areap, mseg_message_info_ptr, code);
     1310 
     1311 	if ^retrying
     1312 	then					/* retry the read once, if queue has been salvaged */
     1313 	     if code = error_table_$bad_segment
     1314 	     then do;
     1315 		retrying = "1"b;
     1316 		goto retry_2;
     1317 	     end;
     1318 
     1319 	if (rqi_sw & rqi_buffered & allsw)
     1320 	then do;
     1321 	     rqi_buffered = "0"b;
     1322 	     call put_message (NL);			/* insert NL after each request entity */
     1323 	end;
     1324 
     1325 	go to loop;
     1326 
     1327 /* End of loop through all requests. The statement at label "loop" checks
     1328*   code and comes right back here if it is nonzero. We exit the loop normally
     1329*   if code = error_table_$no_message, and abnormally if it is any other nonzero value. */
     1330 
     1331 mess_err:
     1332 	if reqp ^= null
     1333 	then					/* free up allocated space if necessary */
     1334 	     free reqp -> request in (region);		/* This will correctly free any one of the request types */
     1335 	if code ^= 0
     1336 	then					/* if encounter no message - not an error */
     1337 	     if code ^= error_table_$no_message
     1338 	     then					/* otherwise return code to caller */
     1339 return_code:
     1340 		a_code = code;
     1341 
     1342 /* Normal exit.  Put totals figures into the header line that we left room for at the top of the temp segment. */
     1343 
     1344 fin:						/* But first, add totals for this queue to cumulative totals */
     1345 	if rqi_sw
     1346 	then do;					/* no more formatting neccessary for rqi */
     1347 	     info.output_count = info.output_count - 1;	/* reflect actual output count */
     1348 	     return;
     1349 	end;
     1350 
     1351 	info.user_select_count = info.user_select_count + total_for_user;
     1352 						/* tell caller how many he had in the queue */
     1353 	info.select_count = info.select_count + total_selected;
     1354 						/* and how many we listed */
     1355 	info.message_count = info.message_count + messcount;
     1356 						/* and how many total requests were in the queue */
     1357 
     1358 /* End a partial "positions" line, if there is one */
     1359 
     1360 	if info.total_sw & info.position_sw & total_selected > 0
     1361 	then do;					/* if printing positions, end the line */
     1362 	     if total_selected = 1
     1363 	     then substr (cstrng, psn_s, 2) = ": ";	/* make Positions: into Position: */
     1364 	     substr (cstrng, info.output_count - 1, 1) = ".";
     1365 						/* make trailing , into . */
     1366 	     call put_message (NL);			/* end the line */
     1367 	end;
     1368 
     1369 /* Report on bad requests in this queue, if any */
     1370 
     1371 	if n_bad_vrsn > 0 & (info.total_sw | n_bad_vrsn ^= total_selected)
     1372 	then do;
     1373 	     call ioa_$rs ("^12x^d requests had obsolete or incorrect formats", buffer, len, n_bad_vrsn);
     1374 	     call put_buffer;
     1375 	end;
     1376 
     1377 /* And finally, add up totals for queues 0 and 1 if appropriate */
     1378 
     1379 	if (info.abs_q_1 & info.queue = 1 & static_header_position > 0)
     1380 	then do;					/* if this is Q 1 and there is Q 0 data */
     1381 	     messcount = messcount + static_messcount;	/* add Q 0 total messages to those for Q 1 */
     1382 	     total_selected = total_selected + static_total_selected;
     1383 						/* likewise for total selected */
     1384 	end;
     1385 
     1386 /* Now, if -all (or search_all) was given, eliminate any heading lines that have only zeros in them */
     1387 
     1388 	if (info.all_opt_sw				/* if -all was given */
     1389 	     & (messcount = 0 & ^no_totals))		/* and we know this queue is empty */
     1390 	     | (info.search_all			/* or if the search_all option is in effect */
     1391 	     & total_selected = 0)			/* and we selected no requests from this queue */
     1392 	then info.output_count = info.output_count - header_length - 1;
     1393 						/* then omit the heading */
     1394 
     1395 /* Otherwise, fill in the header */
     1396 
     1397 	else do;
     1398 	     if (info.queue = 0 & info.abs_q_1)
     1399 	     then do;				/* if treating abs Q 0 as Q 1 */
     1400 		static_header_position = header_position;
     1401 						/* save some stuff for use when we list Q 1 */
     1402 		static_total_selected = total_selected;
     1403 		static_messcount = messcount;
     1404 		static_deferred_count = deferred_count;
     1405 		static_position = position;
     1406 		static_psn_s = psn_s;
     1407 		static_ll = ll;
     1408 	     end;
     1409 
     1410 	     if ^((info.all_opt_sw | info.search_all) & info.total_sw)
     1411 	     then					/* single space the totals lines for -a -tt */
     1412 		substr (cstrng, info.output_count, 1) = NL;
     1413 						/* put new line at end of information for this queue */
     1414 	     else info.output_count = info.output_count - 1;
     1415 						/* this is where the NL would have gone */
     1416 
     1417 /* Decide if we want to print Queue N:  R requests. T total requests.
     1418*   or			Queue N:  R requests.
     1419*   or			Queue N:  T total requests.
     1420**/
     1421 
     1422 	     print_requests = "1"b;			/* start by assuming we will print R requests */
     1423 	     if ^no_totals
     1424 	     then					/* if we are going to print T total requests,
     1425*						   we might want to leave out R requests */
     1426 		if messcount = 0			/* 0 requests. 0 total requests. looks dumb */
     1427 		     | (messcount = total_selected	/* as does N requests. N total requests (N the same) */
     1428 		     & info.admin_sw		/* when you said -admin */
     1429 		     & ^select_sw)			/* and didn't give any other selection arguments */
     1430 		then print_requests = ""b;		/* so leave out R requests in those cases */
     1431 
     1432 	     if total_selected = 1
     1433 	     then s = "";
     1434 	     else s = "s";				/* place queue number + number of requests found in header */
     1435 	     if info.request_type = ABS
     1436 	     then queue_string = "Absentee";
     1437 	     else if info.request_type = RETV
     1438 	     then queue_string = "Retriever";
     1439 	     else do;
     1440 		queue_string = info.queue_name;
     1441 	     end;
     1442 	     i = info.queue;			/* get queue priority number */
     1443 	     if i = 0 & info.abs_q_1
     1444 	     then i = 1;				/* fake queue number if necessary */
     1445 	     call ioa_$rsnnl ("^[Foreground:^x^2s^;^a queue ^d:^4x^]^[^d request^a.^]", buffer, len, (i = -1),
     1446 		queue_string, i, print_requests, total_selected, s);
     1447 	     i = header_length - 1;			/* and pad remainder of header with blanks */
     1448 	     substr (cstrng, header_position, i) = substr (buffer, 1, len);
     1449 	     substr (cstrng, header_position + i, 1) = NL;/* place a new line at end of header */
     1450 	     if ^no_totals
     1451 	     then do;				/* if caller has correct access put total number in header */
     1452 		header_position = header_position + len;
     1453 		if messcount = 1
     1454 		then s = "";
     1455 		else s = "s";
     1456 		call ioa_$rsnnl (" ^d total request^a^[^x(^d deferred)^].", buffer, len, messcount, s,
     1457 		     (deferred_count > 0), deferred_count);
     1458 		substr (cstrng, header_position, len) = substr (buffer, 1, len);
     1459 	     end;
     1460 	end;					/* end fill in header */
     1461 
     1462 	return;
     1463 
     1464 
     1465 /* ********** INTERNAL PROCEDURES ********** */
     1466 
     1467 put_buffer:
     1468      proc;					/* replaces about 35 instances of these two statements */
     1469 	info.output_count = info.output_count + len;
     1470 	substr (cstrng, info.output_count - len) = substr (buffer, 1, len);
     1471 	return;
     1472 
     1473      end put_buffer;
     1474 
     1475 /* ********** */
     1476 
     1477 put_message:
     1478      proc (message);
     1479 
     1480 dcl  message char (*);
     1481 
     1482 	nlsw = ""b;
     1483 putmsg:
     1484 	info.output_count = info.output_count + length (message);
     1485 	substr (cstrng, info.output_count - length (message)) = message;
     1486 	if nlsw
     1487 	then do;
     1488 	     info.output_count = info.output_count + 1;
     1489 	     substr (cstrng, info.output_count - 1) = NL;
     1490 	end;
     1491 	return;
     1492 
     1493 put_message_nl:
     1494      entry (message);
     1495 
     1496 dcl  nlsw bit (1) aligned;
     1497 
     1498 	nlsw = "1"b;
     1499 	goto putmsg;
     1500 
     1501      end put_message;
     1502 
     1503 
     1504 /* ********** */
     1505 
     1506 cleaner_up:
     1507      proc;
     1508 	if reqp ^= null
     1509 	then free reqp -> request in (region);
     1510 	if expandp ^= null
     1511 	then free expandp -> args_con_blanks in (region);
     1512 	if expandp ^= null
     1513 	then free scrunchedp -> args_sans_blanks in (region);
     1514 
     1515 	return;
     1516      end cleaner_up;
     1517 
     1518 /* ********** */
     1519 
     1520 explain_abs_deferral:
     1521      proc;
     1522 
     1523 	if request.operator_deferred_indefinitely
     1524 	then call put_message (" indefinitely by operator");
     1525 	else if request.cpu_time_limit
     1526 	then call put_message (" because of cpu time limit");
     1527 	else if request.resources_unavailable
     1528 	then call put_message (" - requested resources unavailable");
     1529 	else if request.queue_limit
     1530 	then call put_message (" because of queue limit");
     1531 	else if request.user_limit
     1532 	then call put_message (" because of user limit");
     1533 	else if request.load_control
     1534 	then call put_message (" because of load control group limits");
     1535 	else if request.user_deferred_until_time
     1536 	then do;
     1537 	     call put_message (" by user");
     1538 	     if ^info.long_sw
     1539 	     then do;				/* if summarizing it on one line, append deferred time */
     1540 		time = date_time_$format ("^<date> ^<time>", request.deferred_time, "", "");
     1541 						/* format the time */
     1542 		call put_message (" to ");
     1543 		call put_message ((time));		/* use just mm/dd/yy hhmm.t */
     1544 	     end;
     1545 	end;
     1546 	else if request.user_deferred_indefinitely
     1547 	then call put_message (" indefinitely by user");
     1548 
     1549 	return;
     1550 
     1551      end explain_abs_deferral;
     1552 
     1553 /* ********** */
     1554 
     1555 put_flag:
     1556      proc (the_flag, the_flag_str);
     1557 
     1558 dcl  the_flag bit (1) unal parm;
     1559 dcl  the_flag_str char (*) parm;
     1560 
     1561 	if afsw
     1562 	then call ioa_$rsnnl ("^a^[^^^]^a,", af_flag_str, rs_len, af_flag_str, ^the_flag, the_flag_str);
     1563 	else if the_flag
     1564 	then ons = ons || the_flag_str || ", ";
     1565 	else offs = offs || the_flag_str || ", ";
     1566 	return;
     1567      end put_flag;
     1568 
     1569 
     1570 buffer_abs_element:
     1571      proc (abx);
     1572 
     1573 dcl  abx fixed bin;
     1574 
     1575 	goto abs_case (abx);
     1576 
     1577 abs_case (1):					/* max_cpu_time */
     1578 	call ioa_$rsnnl ("^[cpu limit:^34t^d^/^;^d^x^]", buffer, len, ^afsw, request.max_cpu_time);
     1579 	goto abs_buffer;
     1580 
     1581 abs_case (2):					/* output_file */
     1582 	if request.output_file = ""
     1583 	then call ioa_$rsnnl ("^[output file:^34t""""^/^;""""^x^]", buffer, len, ^afsw);
     1584 	else call ioa_$rsnnl ("^[output file:^34t^a^/^;^a^x^]", buffer, len, ^afsw, request.output_file);
     1585 	goto abs_buffer;
     1586 
     1587 abs_case (3):					/* proxy_name */
     1588 	if request.proxy_name = ""
     1589 	then call ioa_$rsnnl ("^[proxy name:^34t""""^/^;""""^x^]", buffer, len, ^afsw);
     1590 	else call ioa_$rsnnl ("^[proxy name:^34t^a^/^;^a^x^]", buffer, len, ^afsw, request.proxy_name);
     1591 	goto abs_buffer;
     1592 
     1593 abs_case (4):					/* resource */
     1594 	if request.resource = ""
     1595 	then call ioa_$rsnnl ("^[resource:^34t""""^/^;""""^x^]", buffer, len, ^afsw);
     1596 	else call ioa_$rsnnl ("^[resource:^34t^a^/^;^a^x^]", buffer, len, ^afsw, request.resource);
     1597 	goto abs_buffer;
     1598 
     1599 abs_case (5):					/* sender */
     1600 	if request.sender = ""
     1601 	then call ioa_$rsnnl ("^[sender:^34t""""^/^;""""^x^]", buffer, len, ^afsw);
     1602 	else call ioa_$rsnnl ("^[sender:^34t^a^/^;^a^x^]", buffer, len, ^afsw, request.sender);
     1603 	goto abs_buffer;
     1604 
     1605 abs_case (6):					/* comment */
     1606 	if request.comment = ""
     1607 	then call ioa_$rsnnl ("^[comment:^34t""""^/^;""""^x^]", buffer, len, ^afsw);
     1608 	else call ioa_$rsnnl ("^[comment:^34t^a^/^;^a^x^]", buffer, len, ^afsw, request.comment);
     1609 	goto abs_buffer;
     1610 
     1611 abs_case (7):					/* args */
     1612 	if request.arg_count <= 0
     1613 	then do;
     1614 	     call ioa_$rsnnl ("^[args:^34t""""^/^;""""^x^]", buffer, len, ^afsw);
     1615 	     goto abs_buffer;
     1616 	end;
     1617 	else do;
     1618 	     curarg_start = 1;
     1619 	     do argx = 1 to request.arg_count;
     1620 		argl = request.arg_lengths (argx);
     1621 		call ioa_$rsnnl ("^[^[args:^]^34t""^a""^/^;^s""^a""^x^]", buffer, len, ^afsw, (argx = 1),
     1622 		     substr (request.args, curarg_start, argl));
     1623 		call put_buffer;
     1624 		curarg_start = curarg_start + argl;
     1625 	     end;
     1626 	end;
     1627 	return;					/* we already buffered output, so return here */
     1628 
     1629 abs_case (8):					/* home_dir */
     1630 	if request.home_dir = ""
     1631 	then call ioa_$rsnnl ("^[home dir:^34t""""^/^;""""^x^]", buffer, len, ^afsw);
     1632 	else call ioa_$rsnnl ("^[home dir:^34t^a^/^;^a^x^]", buffer, len, ^afsw, request.home_dir);
     1633 	goto abs_buffer;
     1634 
     1635 abs_case (9):					/* init_proc */
     1636 	if request.init_proc = ""
     1637 	then call ioa_$rsnnl ("^[init proc:^34t""""^/^;""""^x^]", buffer, len, ^afsw);
     1638 	else call ioa_$rsnnl ("^[init proc:^34t^a^/^;^a^x^]", buffer, len, ^afsw, request.init_proc);
     1639 	goto abs_buffer;
     1640 
     1641 abs_case (10):					/* initial_ring */
     1642 	call ioa_$rsnnl ("^[initial ring:^34t^d^/^;^d^x^]", buffer, len, ^afsw, request.initial_ring);
     1643 	goto abs_buffer;
     1644 
     1645 abs_case (11):					/* authorization */
     1646 	aclass_string = "";
     1647 	call convert_authorization_$to_string_short (request.requested_authorization, aclass_string, code);
     1648 	if aclass_string ^= ""
     1649 	then call ioa_$rsnnl ("^[authorization:^34t^a^/^;^a^x^]", buffer, len, ^afsw, aclass_string);
     1650 	else call ioa_$rsnnl ("^[authorization:^34t""""^/^;""""^x^]", buffer, len, ^afsw);
     1651 	goto abs_buffer;
     1652 
     1653 abs_case (12):					/* deferred_time */
     1654 	time = date_time_$format ("date_time", request.deferred_time, "", "");
     1655 	call ioa_$rsnnl ("^[deferred time:^34t^a^/^;^a^x^]", buffer, len, ^afsw, time);
     1656 	goto abs_buffer;
     1657 
     1658 abs_case (13):					/* deferred_by */
     1659 	if request.user_deferred_until_time
     1660 	then str = request.name;
     1661 	else if request.operator_deferred_until_time
     1662 	then str = "Operator";
     1663 	else str = """";
     1664 	call ioa_$rsnnl ("^[deferred by:^34t^a^/^;^a^x^]", buffer, len, ^afsw, str);
     1665 
     1666 abs_buffer:
     1667 	call put_buffer;
     1668 	return;
     1669 
     1670      end buffer_abs_element;
     1671 
     1672 
     1673 buffer_com_element:
     1674      proc (cbx);
     1675 
     1676 dcl  cbx fixed bin;
     1677 
     1678 	goto com_case (cbx);
     1679 
     1680 com_case (1):					/* all */
     1681 	allsw = "1"b;
     1682 	return;
     1683 
     1684 com_case (2):					/* request_id */
     1685 	rqid = request_id_ (msg_time);
     1686 	call ioa_$rsnnl ("^[message ident:^34t^a^/^;^a^x^]", buffer, len, ^afsw, rqid);
     1687 	goto com_buffer;
     1688 
     1689 com_case (3):					/* submitter */
     1690 	call ioa_$rsnnl ("^[submitter:^34t^a^/^;^a^x^]", buffer, len, ^afsw, sender_id);
     1691 	goto com_buffer;
     1692 
     1693 com_case (4):					/* position */
     1694 	call ioa_$rsnnl ("^[position:^34t^d^/^;^d^x^]", buffer, len, ^afsw, position);
     1695 	goto com_buffer;
     1696 
     1697 com_case (5):					/* directory */
     1698 	call ioa_$rsnnl ("^[directory:^34t^a^/^;^a^x^]", buffer, len, ^afsw, request.dirname);
     1699 	goto com_buffer;
     1700 
     1701 com_case (6):					/* entry */
     1702 	call ioa_$rsnnl ("^[entry:^34t^a^/^;^a^x^]", buffer, len, ^afsw, request.ename);
     1703 	goto com_buffer;
     1704 
     1705 com_case (7):					/* enter_time */
     1706 	time = date_time_$format ("date_time", request.msg_time, "", "");
     1707 	call ioa_$rsnnl ("^[enter time:^34t^a^/^;^a^x^]", buffer, len, ^afsw, time);
     1708 	goto com_buffer;
     1709 
     1710 
     1711 com_case (8):					/* message_type */
     1712 	str = "Unknown type";
     1713 	if request.message_type = 0
     1714 	then str = "absentee";
     1715 	else if request.message_type = 1
     1716 	then str = "print";
     1717 	else if request.message_type = 2
     1718 	then str = "punch";
     1719 	else if request.message_type = 3
     1720 	then str = "tape";
     1721 	else if request.message_type = 4
     1722 	then str = "retrieval";
     1723 	else if request.message_type = 5
     1724 	then str = "imft";
     1725 	call ioa_$rsnnl ("^[message type:^34t^a^/^;^a^x^]", buffer, len, ^afsw, str);
     1726 	goto com_buffer;
     1727 
     1728 com_case (9):					/* queue */
     1729 	call ioa_$rsnnl ("^[queue:^34t^d^/^;^d^x^]", buffer, len, ^afsw, request.orig_queue);
     1730 	goto com_buffer;
     1731 
     1732 com_case (10):					/* state */
     1733 	call ioa_$rsnnl ("^[state:^34t^a^/^;^a^x^]", buffer, len, ^afsw, state_names (request.state));
     1734 	goto com_buffer;
     1735 
     1736 com_case (11):					/* request_flags */
     1737 	call put_flag (request.notify, "notify");
     1738 	if info.request_type = ABS
     1739 	then do;
     1740 	     call put_flag (request.delete_sw, "delete");
     1741 	     call put_flag (request.defer_until_process_termination, "dupt");
     1742 	     call put_flag (request.restartable, "restartable");
     1743 	     call put_flag (request.proxy, "proxy");
     1744 	     call put_flag (request.set_bit_cnt, "set_bit_cnt");
     1745 	     call put_flag (request.operator_deferred_indefinitely, "dfi");
     1746 	     call put_flag (request.secondary_ok, "secondary");
     1747 	     call put_flag (request.truncate_absout, "truncate");
     1748 	     call put_flag (request.restarted, "restarted");
     1749 	     call put_flag (request.no_start_up, "nostartup");
     1750 	     call put_flag (request.resources_unavailable, "noresources");
     1751 	end;
     1752 	else if info.request_type = OUTPUT | info.request_type = IO
     1753 	then do;
     1754 	     call put_flag (request.delete_sw, "delete");
     1755 	     call put_flag (request.defer_until_process_termination, "dupt");
     1756 	     call put_flag (dprint_msg.nep, "noendpage");
     1757 	     call put_flag (dprint_msg.single, "single");
     1758 	     call put_flag (dprint_msg.non_edited, "nonedited");
     1759 	     call put_flag (dprint_msg.truncate, "truncate_lines");
     1760 	     call put_flag (dprint_msg.esc, "escapes");
     1761 	     call put_flag (dprint_msg.center_top_label, "center_top_lbl");
     1762 	     call put_flag (dprint_msg.center_bottom_label, "center_bot_lbl");
     1763 	     call put_flag (dprint_msg.no_separator, "noseparator");
     1764 	     if dprint_msg.version > dprint_msg_version_3
     1765 	     then call put_flag (dprint_msg.line_nbrs, "line_nbrs");
     1766 	end;
     1767 	else if info.request_type = RETV
     1768 	then do;
     1769 	     call put_flag (substr (retv_request.subtree, 1, 1), "subtree");
     1770 	     call put_flag (substr (retv_request.dirs, 1, 1), "dirs");
     1771 	     call put_flag (substr (retv_request.segs, 1, 1), "segs");
     1772 	     call put_flag (substr (retv_request.previous, 1, 1), "prev");
     1773 	end;
     1774 	else if info.request_type = IMFT
     1775 	then do;
     1776 	     call put_flag (ft_request.delete, "delete");
     1777 	     call put_flag (ft_request.foreign_user_given, "foreign_user_given");
     1778 	     call put_flag (ft_request.foreign_path_given, "foreign_path_given");
     1779 	     call put_flag (ft_request.remote_transfer, "remote_trans");
     1780 	     call put_flag (ft_request.include_files, "files");
     1781 	     call put_flag (ft_request.include_subtrees, "subtrees");
     1782 
     1783 	     if ft_request.directory_creation_mode = REPLACE_DIRECTORIES
     1784 	     then do;
     1785 		call put_flag ("1"b, "replace_dirs");
     1786 		call put_flag ("0"b, "merge_dirs");
     1787 	     end;
     1788 	     else if ft_request.directory_creation_mode = MERGE_DIRECTORIES
     1789 	     then do;
     1790 		call put_flag ("0"b, "replace_dirs");
     1791 		call put_flag ("1"b, "merge_dirs");
     1792 	     end;
     1793 	     else do;
     1794 		call put_flag ("0"b, "replace_dirs");
     1795 		call put_flag ("0"b, "merge_dirs");
     1796 	     end;
     1797 
     1798 	     call put_flag (ft_request.extend, "extend");
     1799 	     call put_flag (ft_request.update, "update");
     1800 
     1801 	     if (ft_request.extend | ft_request.update)
     1802 	     then call put_flag ("0"b, "replace");
     1803 	     else call put_flag ("1"b, "replace");
     1804 
     1805 	     if ft_request.chase_control = ALWAYS_CHASE
     1806 	     then do;
     1807 		call put_flag ("1"b, "always_chase");
     1808 		call put_flag ("0"b, "default_chase");
     1809 		call put_flag ("0"b, "never_chase");
     1810 	     end;
     1811 	     else if ft_request.chase_control = DEFAULT_CHASE
     1812 	     then do;
     1813 		call put_flag ("0"b, "always_chase");
     1814 		call put_flag ("1"b, "default_chase");
     1815 		call put_flag ("0"b, "never_chase");
     1816 	     end;
     1817 	     else if ft_request.chase_control = NEVER_CHASE
     1818 	     then do;
     1819 		call put_flag ("0"b, "always_chase");
     1820 		call put_flag ("0"b, "default_chase");
     1821 		call put_flag ("1"b, "never_chase");
     1822 	     end;
     1823 	end;
     1824 	if afsw
     1825 	then do;
     1826 	     len = length (af_flag_str);
     1827 	     buffer = substr (af_flag_str, 1, len);
     1828 	     goto com_buffer;
     1829 	end;
     1830 	call get_line_length_ ("user_output", ll, code);
     1831 	if code ^= 0
     1832 	then ll = DEFAULT_LINE_LTH;
     1833 	if ll < TOO_SMALL_LINE_LTH
     1834 	then ll = DEFAULT_LINE_LTH;
     1835 	pass1 = "1"b;
     1836 	psn_ll = 0;
     1837 	if ons ^= ""
     1838 	then do;
     1839 	     onslen = length (rtrim (ons)) - 1;		/* remove last comma */
     1840 frag_ons:
     1841 	     call ioa_$rsnnl ("^[request flags: ^]^[^34t^]^[^39t^]^[ON:  ^]", buffer, len, (^afsw & pass1),
     1842 		(^afsw & pass1), (^afsw & ^pass1), pass1);
     1843 	     if len > 0
     1844 	     then do;
     1845 		if (^afsw & pass1)
     1846 		then len_offset = TAB_39;
     1847 		else if (^afsw & ^pass1)
     1848 		then len_offset = TAB_44;
     1849 		call put_buffer;
     1850 	     end;
     1851 	     call ioa_$rsnnl ("^a", buffer, len, substr (ons, psn_ll + 1, onslen - psn_ll));
     1852 	     if len > (ll - len_offset)
     1853 	     then do;
     1854 		last_comma = (ll - len_offset) - (index (reverse (substr (buffer, 1, (ll - len_offset))), " ,"));
     1855 		len = last_comma + 1;
     1856 		buffer = substr (buffer, 1, len);
     1857 		call put_buffer;
     1858 		call put_message_nl ("");		/* NL */
     1859 		psn_ll = psn_ll + len;
     1860 		pass1 = "0"b;			/* dont reprint the ON/OFF */
     1861 		goto frag_ons;
     1862 	     end;
     1863 	     else call put_buffer;
     1864 	     call put_message_nl ("");
     1865 	end;
     1866 
     1867 format_off_flags:
     1868 	pass1 = "1"b;				/* reset for offs */
     1869 	psn_ll = 0;
     1870 	if offs ^= ""
     1871 	then do;					/* now for the offs */
     1872 	     offslen = length (rtrim (offs)) - 1;	/* remove last comma */
     1873 frag_offs:
     1874 	     call ioa_$rsnnl ("^[request flags: ^]^[^34t^]^[^39t^]^[OFF: ^]", buffer, len, (ons = "" & ^afsw & pass1),
     1875 		(^afsw & pass1), (^afsw & ^pass1), pass1);
     1876 	     if len > 0
     1877 	     then do;
     1878 		if (^afsw & pass1)
     1879 		then len_offset = TAB_39;
     1880 		else if (^afsw & ^pass1)
     1881 		then len_offset = TAB_44;
     1882 		call put_buffer;
     1883 	     end;
     1884 	     call ioa_$rsnnl ("^a", buffer, len, substr (offs, psn_ll + 1, offslen - psn_ll));
     1885 	     if len > (ll - len_offset)
     1886 	     then do;
     1887 		last_comma = (ll - len_offset) - (index (reverse (substr (buffer, 1, (ll - len_offset))), " ,"));
     1888 		len = last_comma + 1;
     1889 		buffer = substr (buffer, 1, len);
     1890 		call put_buffer;
     1891 		call put_message_nl ("");		/* NL */
     1892 		psn_ll = psn_ll + len;
     1893 		pass1 = "0"b;			/* dont reprint the ON/OFF */
     1894 		goto frag_offs;
     1895 	     end;
     1896 	     else call put_buffer;
     1897 	     call put_message_nl ("");
     1898 	end;
     1899 	return;
     1900 
     1901 com_buffer:
     1902 	call put_buffer;
     1903 	return;
     1904 
     1905      end buffer_com_element;
     1906 
     1907 
     1908 
     1909 buffer_output_element:
     1910      proc (ocx);
     1911 
     1912 dcl  ocx fixed bin;
     1913 
     1914 	goto out_case (ocx);
     1915 
     1916 out_case (1):					/* bit_count */
     1917 	call ioa_$rsnnl ("^[bit count:^34t^d^/^;^d^x^]", buffer, len, ^afsw, dprint_msg.bit_count);
     1918 	goto out_buffer;
     1919 
     1920 out_case (2):					/* copies */
     1921 	call ioa_$rsnnl ("^[copies:^34t^d^/^;^d^x^]", buffer, len, ^afsw, dprint_msg.copies);
     1922 	goto out_buffer;
     1923 
     1924 out_case (3):					/* destination */
     1925 	if dprint_msg.destination = ""
     1926 	then call ioa_$rsnnl ("^[destination:^34t""""^/^;""""^x^]", buffer, len, ^afsw);
     1927 	else call ioa_$rsnnl ("^[destination:^34t^a^/^;^a^x^]", buffer, len, ^afsw, dprint_msg.destination);
     1928 	goto out_buffer;
     1929 
     1930 out_case (4):					/* heading */
     1931 	if dprint_msg.heading = ""
     1932 	then call ioa_$rsnnl ("^[heading:^34t""""^/^;""""^x^]", buffer, len, ^afsw);
     1933 	else call ioa_$rsnnl ("^[heading:^34t^a^/^;^a^x^]", buffer, len, ^afsw, dprint_msg.heading);
     1934 	goto out_buffer;
     1935 
     1936 out_case (5):					/* indent */
     1937 	call ioa_$rsnnl ("^[indent:^34t^d^/^;^d^x^]", buffer, len, ^afsw, dprint_msg.lmargin);
     1938 	goto out_buffer;
     1939 
     1940 out_case (6):					/* line_length */
     1941 	if dprint_msg.line_lth = DEFAULT_OUTPUT_LTH
     1942 	then str = "default";
     1943 	else call ioa_$rsnnl ("^d", str, len, dprint_msg.line_lth);
     1944 	call ioa_$rsnnl ("^[line length:^34t^a^/^;^a^x^]", buffer, len, ^afsw, str);
     1945 	goto out_buffer;
     1946 
     1947 out_case (7):					/* page_length */
     1948 	if dprint_msg.page_lth = DEFAULT_OUTPUT_LTH
     1949 	then str = "default";
     1950 	else call ioa_$rsnnl ("^d", str, len, dprint_msg.page_lth);
     1951 	call ioa_$rsnnl ("^[page length:^34t^a^/^;^a^x^]", buffer, len, ^afsw, str);
     1952 	goto out_buffer;
     1953 
     1954 out_case (8):					/* top_label */
     1955 	if dprint_msg.top_label = ""
     1956 	then call ioa_$rsnnl ("^[top label:^34t""""^/^;""""^x^]", buffer, len, ^afsw);
     1957 	else call ioa_$rsnnl ("^[top label:^34t^a^/^;^a^x^]", buffer, len, ^afsw, dprint_msg.top_label);
     1958 	goto out_buffer;
     1959 
     1960 out_case (9):					/* bottom_label */
     1961 	if dprint_msg.bottom_label = ""
     1962 	then call ioa_$rsnnl ("^[bottom label:^34t""""^/^;""""^x^]", buffer, len, ^afsw);
     1963 	else call ioa_$rsnnl ("^[bottom label:^34t^a^/^;^a^x^]", buffer, len, ^afsw, dprint_msg.bottom_label);
     1964 	goto out_buffer;
     1965 
     1966 out_case (10):					/* output_conversion */
     1967 	str = "Unknown value";
     1968 	if dprint_msg.output_module = 1
     1969 	then str = "print";
     1970 	else if dprint_msg.output_module = 2
     1971 	then str = pp_request_type (2);
     1972 	else if dprint_msg.output_module = 3
     1973 	then str = pp_request_type (3);
     1974 	else if dprint_msg.output_module = 4
     1975 	then str = pp_request_type (4);
     1976 	else if dprint_msg.output_module = 5
     1977 	then str = "plotter";
     1978 	call ioa_$rsnnl ("^[output conversion:^34t^a^/^;^a^x^]", buffer, len, ^afsw, str);
     1979 	goto out_buffer;
     1980 
     1981 out_case (11):					/* forms */
     1982 	if dprint_msg.version < dprint_msg_version_5
     1983 	then auto_forms_name = rtrim (dprint_msg.forms);
     1984 	else auto_forms_name = dprint_msg.forms_name;
     1985 	if auto_forms_name = ""
     1986 	then call ioa_$rsnnl ("^[forms:^34t""""^/^;""""^x^]", buffer, len, ^afsw);
     1987 	else call ioa_$rsnnl ("^[forms:^34t^a^/^;^a^x^]", buffer, len, ^afsw, auto_forms_name);
     1988 
     1989 out_buffer:
     1990 	call put_buffer;
     1991 	return;
     1992 
     1993      end buffer_output_element;
     1994 
     1995 
     1996 buffer_retv_element:
     1997      proc (rcx);
     1998 
     1999 dcl  rcx fixed bin;
     2000 
     2001 	goto retv_case (rcx);
     2002 
     2003 retv_case (1):					/* from_time */
     2004 	time = date_time_$format ("date_time", retv_request.from_time, "", "");
     2005 	call ioa_$rsnnl ("^[from time:^34t^a^/^;^a^x^]", buffer, len, ^afsw, time);
     2006 	goto retv_buffer;
     2007 
     2008 retv_case (2):					/* new_dir */
     2009 	if retv_request.new_dirname = ""
     2010 	then call ioa_$rsnnl ("^[new directory:^34t""""^/^;""""^x^]", buffer, len, ^afsw);
     2011 	else call ioa_$rsnnl ("^[new directory:^34t^a^/^;^a^x^]", buffer, len, ^afsw, retv_request.new_dirname);
     2012 	goto retv_buffer;
     2013 
     2014 retv_case (3):					/* new_entry */
     2015 	if retv_request.new_ename = ""
     2016 	then call ioa_$rsnnl ("^[new entryname:^34t""""^/^;""""^x^]", buffer, len, ^afsw);
     2017 	else call ioa_$rsnnl ("^[new entryname:^34t^a^/^;^a^x^]", buffer, len, ^afsw, retv_request.new_ename);
     2018 	goto retv_buffer;
     2019 
     2020 retv_case (4):					/* to_time */
     2021 	time = date_time_$format ("date_time", retv_request.to_time, "", "");
     2022 	call ioa_$rsnnl ("^[to time:^34t^a^/^;^a^x^]", buffer, len, ^afsw, time);
     2023 
     2024 retv_buffer:
     2025 	call put_buffer;
     2026 	return;
     2027 
     2028      end buffer_retv_element;
     2029 
     2030 
     2031 buffer_imft_element:
     2032      proc (icx);
     2033 
     2034 dcl  icx fixed bin;
     2035 
     2036 	goto imft_case (icx);
     2037 
     2038 imft_case (1):					/* foreign_dir */
     2039 	if ft_request.foreign_dirname = "" | ^ft_request.foreign_path_given
     2040 	then call ioa_$rsnnl ("^[foreign directory:^34t""""^/^;""""^x^]", buffer, len, ^afsw);
     2041 	else call ioa_$rsnnl ("^[foreign directory:^34t^a^/^;^a^x^]", buffer, len, ^afsw, ft_request.foreign_dirname);
     2042 	goto imft_buffer;
     2043 
     2044 imft_case (2):					/* foreign_entry */
     2045 	if ft_request.foreign_ename = "" | ^ft_request.foreign_path_given
     2046 	then call ioa_$rsnnl ("^[foreign entryname:^34t""""^/^;""""^x^]", buffer, len, ^afsw);
     2047 	else call ioa_$rsnnl ("^[foreign entryname:^34t^a^/^;^a^x^]", buffer, len, ^afsw, ft_request.foreign_ename);
     2048 	goto imft_buffer;
     2049 
     2050 imft_case (3):					/* foreign_user */
     2051 	if ft_request.foreign_user = "" | ^ft_request.foreign_user_given
     2052 	then call ioa_$rsnnl ("^[foreign user:^34t""""^/^;""""^x^]", buffer, len, ^afsw);
     2053 	else call ioa_$rsnnl ("^[foreign user:^34t^a^/^;^a^x^]", buffer, len, ^afsw, ft_request.foreign_user);
     2054 
     2055 imft_buffer:
     2056 	call put_buffer;
     2057 	return;
     2058 
     2059      end buffer_imft_element;
     2060 
     2061 
  1     1 /* BEGIN INCLUDE FILE ... abs_message_format.incl.pl1 */
  1     2 
  1     3 /* Requires user_attributes.incl.pl1 */
  1     4 
  1     5 
  1     6 /****^  HISTORY COMMENTS:
  1     7*  1) change(86-03-01,Gilcrease), approve(86-03-27,MCR7370),
  1     8*     audit(86-06-23,Lippard), install(86-06-30,MR12.0-1082):
  1     9*     Modified 740723 by PG to add AIM info
  1    10*     Modified April 1978 by T. Casey to add much new info and change version number to 4
  1    11*     Modified November 1978 by T. Casey to add secondary_ok
  1    12*     Modified June 1981 by T. Casey for MR9.0 to make max_cpu_time fixed bin (35) (was fixed bin (17) aligned)
  1    13*  2) change(86-03-27,Gilcrease), approve(86-03-27,MCR7370),
  1    14*     audit(86-06-23,Lippard), install(86-06-30,MR12.0-1082):
  1    15*     Add truncate_absout and restarted bits for -truncate absout. SCP 6297.
  1    16*  3) change(86-12-08,GDixon), approve(87-07-16,MCR7741),
  1    17*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
  1    18*     Changed structure under request.abs_attributes to use like structure in
  1    19*     abs_attributes.incl.pl1.  This allows the same attributes to be used
  1    20*     in pit.incl.pl1 and user_table_entry.incl.pl1 as well as this include
  1    21*     file.
  1    22*  4) change(87-11-11,Parisek), approve(88-02-11,MCR7849),
  1    23*     audit(88-03-22,Lippard), install(88-07-13,MR12.2-1047):
  1    24*     Added the version 6 elements: home_dir, init_proc, initial_ring,
  1    25*     len_homedir, len_initproc. SCP6367
  1    26*  5) change(88-07-29,Parisek), approve(88-07-29,PBF7849),
  1    27*     audit(88-07-29,Lippard), install(88-08-01,MR12.2-1072):
  1    28*     Place the elements "home_dir", and "init_proc" before the varying length
  1    29*     element "args" in the stucture.  Since "args" length can grow varyingly,
  1    30*     it should remain at the bottom of the structure.
  1    31*                                                   END HISTORY COMMENTS */
  1    32 
  1    33 
  1    34 dcl  abs_message_version_6 fixed bin int static options (constant) init (6);
  1    35 
  1    36 dcl 1 request aligned based (reqp),			/* format of absentee request */
  1    37 						/* the pointer, reqp, must be declared in the including program */
  1    38     2 request_header like queue_msg_hdr,		/* 62 words */
  1    39     2 request_version fixed bin,			/* identification of version of abs request */
  1    40     2 len_name fixed bin,				/* length of name */
  1    41     2 arg_count fixed bin,				/* number of arguments to input segment */
  1    42     2 len_args fixed bin,				/* length of string containing arguments to input segment */
  1    43     2 len_output fixed bin,				/* length of output pathname */
  1    44     2 len_proxy fixed bin,				/* length of proxy name */
  1    45     2 len_resource fixed bin,				/* length of resource description */
  1    46     2 len_sender fixed bin,				/* length of sender */
  1    47     2 len_comment fixed bin,				/* length of comment */
  1    48     2 len_vpad fixed bin,				/* length of spare variable length string */
  1    49     2 initial_ring fixed bin,				/* initial ring number request */
  1    50     2 len_homedir fixed bin,				/* length of home_dir */
  1    51     2 len_initproc fixed bin,				/* length of login responder string */
  1    52     2 request_pad (5) fixed bin,			/* leave room for stuff we did not think of this time */
  1    53     2 deferred_time fixed bin (71),			/* clock time until which this request should be held + not run */
  1    54     2 max_cpu_time fixed bin (35),			/* user given cpu limit in seconds */
  1    55     2 requested_authorization bit (72),			/* request should be run at this authorization */
  1    56     2 abs_attributes aligned like user_abs_attributes,	/* include user_abs_attributes.incl.pl1 */
  1    57     2 abs_status_flags,				/* bits giving reasons for job's status */
  1    58       3 operator_deferred_until_time bit (1) unaligned,
  1    59       3 operator_deferred_indefinitely bit (1) unaligned,
  1    60       3 resources_unavailable bit (1) unaligned,
  1    61       3 cpu_time_limit bit (1) unaligned,
  1    62       3 queue_limit bit (1) unaligned,
  1    63       3 user_limit bit (1) unaligned,
  1    64       3 load_control bit (1) unaligned,
  1    65       3 status_pad bit (29) unaligned,
  1    66  
  1    67     2 name char (0 refer (request.len_name)) aligned,	/* personal name of requestor */
  1    68     2 output_file char (0 refer (request.len_output)) aligned, /* absolute pathname of output file */
  1    69     2 proxy_name char (0 refer (request.len_proxy)) aligned, /* name of user for whom submitted */
  1    70     2 resource char (0 refer (request.len_resource)) aligned, /* resource description */
  1    71     2 sender char (0 refer (request.len_sender)) aligned,	/* name of RJE station or other sender */
  1    72     2 comment char (0 refer (request.len_comment)) aligned, /* message to operator, or anything else user puts in it */
  1    73     2 home_dir char (0 refer (request.len_homedir)) aligned,/* initial home dir */
  1    74     2 init_proc char (0 refer (request.len_initproc)) aligned,
  1    75 						/* name of login responder */
  1    76     2 vpad char (0 refer (request.len_vpad)) aligned,	/* for the thing we didn't think of this time */
  1    77     2 arg_lengths (0 refer (request.arg_count)) fixed bin,	/* array of argument lengths */
  1    78     2 args char (0 refer (request.len_args)) aligned;	/* string containing arguments to control segment */
  1    79 
  1    80 /* END INCLUDE FILE ... abs_message_format.incl.pl1 */
     2062 
     2063 
  2     1      declare		/* Structure returned by hcs_$status_long */
  2     2 
  2     3 	1 branch_status aligned,				/* automatic: hcs_$status uses a pointer */
  2     4 
  2     5 	  2 type bit(2) unaligned,				/* type of entry: link, segment, dir */
  2     6 	  2 number_names bit(16) unaligned,			/* unused by directory_status_ */
  2     7 	  2 names_rel_pointer bit(18) unaligned,		/* unused by directory_status_ */
  2     8 	  2 date_time_modified bit(36) unaligned,		/* date time modified */
  2     9 	  2 date_time_used bit(36) unaligned,			/* date time entry used */
  2    10 	  2 mode bit(5) unaligned,				/* effective access of caller */
  2    11 	  2 raw_mode bit(5) unaligned,
  2    12 	  2 pad1 bit(8) unaligned,
  2    13 	  2 records bit(18) unaligned,			/* number of records in use */
  2    14 	  2 date_time_dumped bit(36) unaligned,			/* date time last dumped */
  2    15 	  2 date_time_entry_modified bit(36) unaligned,		/* date time entry modified */
  2    16 	  2 lvid bit(36) unaligned,				/* logical volume id */
  2    17 	  2 current_length bit(12) unaligned,			/* number of blocks currently allocated */
  2    18 	  2 bit_count bit(24) unaligned,			/* bit count of entry */
  2    19 	  2 pad3 bit(8) unaligned,
  2    20 	  2 copy_switch bit(1) unaligned,			/* the copy switch */
  2    21 	  2 tpd bit(1) unaligned,				/* transparent to paging device */
  2    22 	  2 mdir bit(1) unaligned,				/* master directory switch */
  2    23 	  2 damaged_switch bit (1) unaligned,			/* true if contents damaged */
  2    24 	  2 synchronized_switch bit (1) unaligned,		/* true if a DM synchronized file */
  2    25 	  2 pad4 bit(5) unaligned,
  2    26 	  2 ring_brackets (0:2) bit(6) unaligned,		/* branch ring brackets */
  2    27 	  2 unique_id bit(36) unaligned,			/* entry unique id */
  2    28 
  2    29 
  2    30 	     /* The types of each class of branch */
  2    31 	segment_type bit(2) aligned internal static initial ("01"b),
  2    32 	directory_type bit(2) aligned internal static initial ("10"b),
  2    33 	msf_type bit(2) aligned internal static initial ("10"b),	/* will eventually be different */
  2    34 	link_type bit(2) aligned internal static initial ("00"b);
  2    35 
  2    36 
     2064 
     2065 
  3     1 /* BEGIN INCLUDE FILE ... dprint_msg.incl.pl1 */
  3     2 /* Modified: November 1983 by C. Marker Added no_separator. */
  3     3 
  3     4 /****^  HISTORY COMMENTS:
  3     5*  1) change(87-05-10,Gilcrease), approve(87-05-13,MCR7686),
  3     6*     audit(88-02-01,Farley), install(88-02-02,MR12.2-1019):
  3     7*     Add line_nbrs bit for line-numbered printouts, version 4.
  3     8*  2) change(88-02-05,Farley), approve(88-02-05,PBF7686), audit(88-02-05,GWMay),
  3     9*     install(88-02-05,MR12.2-1022):
  3    10*     Corrected alignment of line_nbrs, was aligned s/b unaligned..
  3    11*  3) change(88-08-23,Farley), approve(88-09-16,MCR7911),
  3    12*     audit(88-09-29,Wallman), install(88-10-28,MR12.2-1199):
  3    13*     Increased size of forms field to 64 characters (was only 24), which
  3    14*     updates the version to 5.
  3    15*                                                   END HISTORY COMMENTS */
  3    16 
  3    17 
  3    18 dcl  dmp ptr;					/* ptr to message */
  3    19 
  3    20 dcl 1 dprint_msg based (dmp) aligned,			/* structure of a IO daemon print or punch request */
  3    21     2 header like queue_msg_hdr,			/* header for all standard queue messages */
  3    22     2 version fixed bin,				/* version of the dprint_msg used */
  3    23     2 copies fixed bin,				/* number of copies user requested */
  3    24     2 bit_count fixed bin (35),			/* the bitcount of the segment at request time */
  3    25     2 output_module fixed bin,			/* 1=print, 2=7punch, 3= mcc, 4=raw */
  3    26     2 control,					/* control flags. */
  3    27       3 nep bit (1) unal,				/* TRUE if printing over perforations */
  3    28       3 single bit (1) unal,				/* TRUE if ignore FF and VT */
  3    29       3 non_edited bit (1) unal,			/* TRUE if printing in non-edited mode */
  3    30       3 truncate bit (1) unal,			/* TRUE if truncating lines at line length */
  3    31       3 esc bit (1) unal,				/* TRUE if text escapes are to be processed */
  3    32       3 center_top_label bit (1) unal,			/* TRUE if top label to be centered */
  3    33       3 center_bottom_label bit (1) unal,		/* TRUE if bottom label to be centered */
  3    34       3 no_separator bit(1) unal,                           /* TRUE if the inner head a tail sheets of multiple copies are to be suppressed. */
  3    35       3 line_nbrs bit (1) unal,			/* TRUE if line numbers wanted */
  3    36       3 padding bit (27) unal,
  3    37     2 lmargin fixed bin,				/* indent from the left */
  3    38     2 line_lth fixed bin,				/* logical line length */
  3    39     2 page_lth fixed bin,				/* logical page length */
  3    40     2 heading_lth fixed bin,				/* number of chars in heading */
  3    41     2 top_label_lth fixed bin,			/* number of chars in the top label */
  3    42     2 bottom_label_lth fixed bin,			/* number of chars in bottom label */
  3    43     2 chan_stop_path_lth fixed bin,			/* number of chars in channel stop pathname */
  3    44     2 forms_name_lth fixed bin,			/* number of chars in forms name */
  3    45     2 future_fb_values (7) fixed bin,			/* make future versions possible */
  3    46     2 forms char (24),				/* name of special forms, or blank */
  3    47     2 destination char (24),				/* routing for output */
  3    48     2 heading char (head_max_lth refer (dprint_msg.heading_lth)), /* heading on page 1 */
  3    49     2 top_label char (label_max_lth refer (dprint_msg.top_label_lth)), /* top page heading for each page */
  3    50     2 bottom_label char (label_max_lth refer (dprint_msg.bottom_label_lth)), /* bottom page heading */
  3    51     2 chan_stop_path char (path_max_lth refer (dprint_msg.chan_stop_path_lth)), /* path of rqti seg with channel stops */
  3    52     2 forms_name char (forms_max_lth refer (dprint_msg.forms_name_lth)); /* forms name string */
  3    53 
  3    54 
  3    55 dcl  (
  3    56      head_max_lth init (64),				/* allocation size for heading */
  3    57      label_max_lth init (136),			/* allocation size for label fields */
  3    58      path_max_lth init (168),				/* allocation size for pathname fields */
  3    59      forms_max_lth init (64)				/* allocation size for forms name string */
  3    60      ) fixed bin int static options (constant);
  3    61 
  3    62 dcl  (
  3    63      dprint_msg_version_3 init (3),
  3    64      dprint_msg_version_4 init (4),
  3    65      dprint_msg_version_5 init (5)			/* current version */
  3    66      ) fixed bin int static options (constant);
  3    67 
  3    68 /* END INCLUDE FILE ... dprint_msg.incl.pl1 */
     2066 
     2067 
  4     1 /* BEGIN INCLUDE FILE ... _imft_ft_request.incl.pl1 */
  4     2 
  4     3 /* Created:  April 1982 by G. Palter */
  4     4 /* Modified: March 1983 by Robert Coren, for requests for remote transfer */
  4     5 
  4     6 
  4     7 /****^  HISTORY COMMENTS:
  4     8*  1) change(88-06-22,Beattie), approve(88-08-01,MCR7948),
  4     9*     audit(88-10-14,Farley), install(88-10-14,MR12.2-1165):
  4    10*     Add flags to support extend, update and delete operations.
  4    11*                                                   END HISTORY COMMENTS */
  4    12 
  4    13 
  4    14 /* IMFT file transfer request definition */
  4    15 
  4    16 dcl 1 ft_request aligned based (ft_request_ptr),
  4    17       2 header like queue_msg_hdr,
  4    18       2 request,					/* see _imft_ft_commands.incl.pl1 */
  4    19         3 version character (8),
  4    20         3 foreign_user character (32) unaligned,		/* Person.Project at other Multics for reload access check */
  4    21         3 foreign_dirname character (168) unaligned,	/* where to put the branch on the other system */
  4    22         3 foreign_ename character (32) unaligned,		/* ... */
  4    23         3 flags,
  4    24 	4 foreign_user_given bit (1) unaligned,		/* ON => forreign_user different from local user */
  4    25 	4 foreign_path_given bit (1) unaligned,		/* ON => foreign pathname different from local */
  4    26 	4 directory_creation_mode bit (2) unaligned,	/* controls whether directories are replaced/merged */
  4    27 	4 remote_transfer bit (1) unaligned,		/* ON => request for transfer from foreign system */
  4    28 	4 include_files bit (1) unaligned,		/* ON => match files when interpreting starname */
  4    29 	4 include_subtrees bit (1) unaligned,		/* ON => match subtrees when interpreting starname */
  4    30 	4 chase_control bit (2) unaligned,		/* controls chasing of links when submitting remote request */
  4    31 	4 delete bit (1) unaligned,			/* delete source object after good transfer */
  4    32 	4 extend bit (1) unaligned,			/* place this data at end of current segment */
  4    33 	4 update bit (1) unaligned,			/* replace contents of current segment with this data */
  4    34 	4 pad bit (24) unaligned;
  4    35 
  4    36 dcl  ft_request_ptr pointer;
  4    37 
  4    38 dcl  FT_REQUEST_VERSION_1 character (8) static options (constant) initial ("ftr_1.00");
  4    39 
  4    40 dcl  FT_GENERIC_TYPE character (32) static options (constant) initial ("imft");
  4    41 dcl  FT_MESSAGE_TYPE fixed binary static options (constant) initial (5);
  4    42 
  4    43 dcl (REPLACE_DIRECTORIES	initial ("10"b),		/* replace entry on target if namedup and source is a dir */
  4    44      MERGE_DIRECTORIES	initial ("11"b))		/* merge target and source dirs; replace if target not dir */
  4    45 	bit (2) aligned static options (constant);
  4    46 
  4    47 dcl (DEFAULT_CHASE		initial ("00"b),		/* chase non-starnames; don't chase starnames */
  4    48      NEVER_CHASE		initial ("01"b),		/* never chase any links */
  4    49      ALWAYS_CHASE		initial ("10"b))		/* always chase links */
  4    50 	bit (2) aligned static options (constant);
  4    51 
  4    52 /* END INCLUDE FILE ... _imft_ft_request.incl.pl1 */
     2068 
     2069 
  5     1 /*  Begin include file lar_info.incl.pl1			  */
  5     2 
  5     3 /* Original version Aug 1977 */
  5     4 /* Modified May 1978 by T. Casey to add many new parameters */
  5     5 /* Modified November 1978 by T. Casey to add several variables for MR7.0 */
  5     6 /* Modified to add queue_name 11/05/79 S. Herbst */
  5     7 /* Modified Jan 1982 by G. Dixon to dcl constants for request_type values */
  5     8 
  5     9 /****^  HISTORY COMMENTS:
  5    10*  1) change(88-04-20,Parisek), approve(88-06-13,MCR7913),
  5    11*     audit(88-08-16,Farley), install(88-08-22,MR12.2-1089):
  5    12*     A) Added the abs_rqi, com_rqi, output_rqi, retv_rqi, and imft_rqi
  5    13*        elements to store bit values which determine what specific data is
  5    14*        requested by request_info command/AF.  Modified the pad field
  5    15*        to fill in the remaining unused word.
  5    16*     B) Included the arrays defining the information keywords used with
  5    17*        request_info (rqi).  Each element in these arrays pertains to a
  5    18*        bit value within one of the bit strings listed in A above.  Also,
  5    19*        the order of each element represents the identical order of the
  5    20*        respective bit within the above mentioned bit strings.
  5    21*     C) Added forms_sw and forms_name elements for storing info about
  5    22*        requested output special forms.
  5    23*  2) change(88-08-25,Farley), approve(88-09-16,MCR7911),
  5    24*     audit(88-09-29,Wallman), install(88-10-28,MR12.2-1199):
  5    25*     Increased forms_name to 64 characters.
  5    26*                                                   END HISTORY COMMENTS */
  5    27 
  5    28 
  5    29 dcl  info_ptr ptr;
  5    30 dcl 1 info aligned based (info_ptr),
  5    31     2 temptr ptr aligned,				/* pointer to temporary segment */
  5    32     2 mseg_idx fixed bin aligned,			/* offset of message segment */
  5    33     2 request_type fixed bin,				/* ABS, IO, OUTPUT, RETV */
  5    34     2 queue_name char (32) unal,			/* request type for io_daemon: printer, punch, etc. */
  5    35     2 queue fixed bin aligned,			/* priority level of message segment */
  5    36     2 input_count fixed bin (21) aligned,		/* length of temporary in chars when called */
  5    37     2 output_count fixed bin (21) aligned,		/* length of temporary in chars on return */
  5    38     2 select_count fixed bin aligned,			/* returned count of selected entries (from all queues) */
  5    39     2 user_select_count fixed bin aligned,		/* returned count of requests for specified user (from all Qs) */
  5    40     2 message_count fixed bin,			/* returned count of total entries (from all queues) */
  5    41     2 switches,
  5    42       3 long_sw bit (1) unaligned,			/* on - long format */
  5    43       3 admin_sw bit (1) unaligned,			/* on - admin option */
  5    44       3 total_sw bit (1) unaligned,			/* on - totals only */
  5    45       3 user_sw bit (1) unaligned,			/* on - look for supplied person.project */
  5    46       3 immediate bit (1) unaligned,			/* on - return only non-deferred matches */
  5    47       3 long_id_sw bit (1) unaligned,			/* on - print long ID even when not in long format */
  5    48       3 all_opt_sw bit (1) unaligned,			/* on - all queue data wanted */
  5    49       3 q_opt_sw bit (1) unaligned,			/* on - user specified a queue */
  5    50       3 path_sw bit (1) unaligned,			/* on - print full pathname even when not in long format */
  5    51       3 brief_sw bit (1) unaligned,			/* on - brief format */
  5    52       3 position_sw bit (1) unaligned,			/* on - print position in queue */
  5    53       3 resource_sw bit (1) unaligned,			/* on - print just rq's w/resource arg and print resource */
  5    54       3 dirname_sw bit (1) unaligned,			/* on - dirname given */
  5    55       3 ename_sw bit (1) unaligned,			/* on - ename given */
  5    56       3 id_sw bit (1) unaligned,			/* on - request ID given */
  5    57       3 deferred_indefinitely bit (1) unaligned,		/* on - print only requests that are deferred indefinitely */
  5    58       3 sender_sw bit (1) unaligned,			/* on - sender (RJE station) given */
  5    59       3 no_total_sw bit (1) unaligned,			/* RETURNED: on if unable to get totals for a queue */
  5    60       3 abs_q_1 bit (1) unaligned,			/* on - listing abs Qs 0 & 1, pretending all from 1 */
  5    61       3 resource_name_sw bit (1) unaligned,		/* on - resource name given */
  5    62       3 search_all bit (1) unaligned,			/* on - search all Qs, list ones that we select requests from */
  5    63       3 forms_sw bit (1) unaligned,			/* on - special forms name given */
  5    64       3 abs_rqi bit (13) unaligned,			/* each bit represents 1 request element */
  5    65       3 com_rqi bit (11) unaligned,			/* each bit represents 1 request element */
  5    66       3 output_rqi bit (11) unaligned,			/* each bit represents 1 request element */
  5    67       3 retv_rqi bit (4) unaligned,			/* each bit represents 1 request element */
  5    68       3 imft_rqi bit (3) unaligned,			/* each bit represents 1 request element */
  5    69       3 pad bit (8) unaligned,			/* rest of word */
  5    70     2 person char (28) aligned,			/* supplied person name - may be "*" */
  5    71     2 project char (28) aligned,			/* supplied project name - may be "*" */
  5    72     2 request_id char (19) aligned,			/* select request(s) matching this ID */
  5    73     2 dirname char (168) unal,			/* select requests from this directory */
  5    74     2 ename char (32) unal,				/* select requests matching this ename (can be starname) */
  5    75     2 sender char (32) aligned,			/* select requests entered by this RJE station */
  5    76     2 resource_name char (100) varying aligned,		/* select requests requiring the named resource(s) */
  5    77     2 forms_name char (64) unal;			/* select requests requiring the named form(s) */
  5    78 
  5    79 						/* possible values for info.request_type.	*/
  5    80 dcl ABS    fixed bin int static options(constant) init(1),	/*   list_abs_requests			*/
  5    81     IO     fixed bin int static options(constant) init(2),	/*   list_daemon_requests (almost obsolete)	*/
  5    82     OUTPUT fixed bin int static options(constant) init(3),	/*   list_output_requests			*/
  5    83     RETV   fixed bin int static options(constant) init(4);	/*   list_retrieval_requests			*/
  5    84 
  5    85 						/* below is defined the request_info */
  5    86 						/* information keyword arrays */
  5    87 /* The order of the following keywords within their respective arrays is
  5    88*   important as each element MUST be kept in sync with the respective
  5    89*   bit defined in com_rqi, abs_rqi, retv_rqi, output_rqi, or imft_rqi.
  5    90*   If any additional keywords are added in the future be sure a corresponding
  5    91*   bit is added to the proper bit string above.  Also add the format data
  5    92*   for the new element within its proper place in the buffer_element routine
  5    93*   of lar_util_.
  5    94**/
  5    95 
  5    96 dcl	abs_keywords                  (28) char(32) int static options (constant) init
  5    97 	     ("max_cpu_time", "limit", "li",		/* 1 */
  5    98 	     "output_file", "of",			/* 2 */
  5    99 	     "proxy_name", "pxn",			/* 3 */
  5   100 	     "resource", "rsc",			/* 4 */
  5   101 	     "sender",				/* 5 */
  5   102 	     "comment",				/* 6 */
  5   103 	     "args",				/* 7 */
  5   104 	     "home_dir", "hd",			/* 8 */
  5   105 	     "init_proc", "ip",			/* 9 */
  5   106 	     "initial_ring", "ring", "rg",		/* 10 */
  5   107 	     "authorization", "auth",			/* 11 */
  5   108 	     "deferred_time", "dftime", "time", 
  5   109 	          "dftm", "tm",			/* 12 */
  5   110 	     "deferred_by", "dfb"),			/* 13 */
  5   111 
  5   112 	abs_keyword_index             (28) fixed bin int static options (constant) init
  5   113 						/* index in info.abs_rqi */
  5   114 	     (1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 7, 8, 8, 9, 9, 10, 10, 10,
  5   115 	     11, 11, 12, 12, 12, 12, 12, 13, 13),
  5   116 
  5   117 	com_keywords                  (23) char(32) int static options (constant) init
  5   118 	     ("all", "a",				/* 1 */
  5   119 	     "request_id", "id",			/* 2 */
  5   120 	     "submitter",				/* 3 */
  5   121 	     "position", "pos",			/* 4 */
  5   122 	     "directory", "dr",			/* 5 */
  5   123 	     "entry", "et",				/* 6 */
  5   124 	     "enter_time", "etime", "etm",		/* 7 */
  5   125 	     "message_type", "type", "tp",		/* 8 */
  5   126 	     "queue", "q",				/* 9 */
  5   127 	     "state", "st",				/* 10 */
  5   128 	     "request_flags", "flags"),		/* 11 */
  5   129 
  5   130 	com_keyword_index             (23) fixed bin int static options (constant) init
  5   131 						/* index in info.com_rqi */
  5   132 	     (1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 7, 7, 8, 8, 8,
  5   133 	     9, 9, 10, 10, 11, 11),
  5   134 
  5   135 	output_keywords               (23) char(32) int static options (constant) init
  5   136 	     ("bit_count", "bc",			/* 1 */
  5   137 	     "copies", "cp",			/* 2 */
  5   138 	     "destination", "dest", "ds",		/* 3 */
  5   139 	     "heading", "he",			/* 4 */
  5   140 	     "indent", "ind", "in",			/* 5 */
  5   141 	     "line_length", "ll",			/* 6 */
  5   142 	     "page_length", "pl",			/* 7 */
  5   143 	     "top_label", "tlbl",			/* 8 */
  5   144 	     "bottom_label", "blbl",			/* 9 */
  5   145 	     "output_conversion", "ocv",		/* 10 */
  5   146 	     "forms"),				/* 11 */
  5   147 
  5   148 	output_keyword_index          (23) fixed bin int static options (constant) init
  5   149 						/* index in info.output_rqi */
  5   150 	     (1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6, 6, 7, 7, 7, 8, 
  5   151 	     9, 9, 10, 10, 11),
  5   152 
  5   153 	retv_keywords                 (10) char(32) int static options (constant) init
  5   154 	     ("from_time", "fmtime", "fmtm",		/* 1 */
  5   155 	     "new_dir", "ndr",			/* 2 */
  5   156 	     "new_entry", "net",			/* 3 */
  5   157 	     "to_time", "ttime", "ttm"),		/* 4 */
  5   158 
  5   159 	retv_keyword_index            (10) fixed bin int static options (constant) init
  5   160 						/* index in info.retv_rqi */
  5   161 	     (1, 1, 1, 2, 2, 3, 3, 4, 4, 4),
  5   162 
  5   163 	imft_keywords                 (6) char(32) int static options (constant) init
  5   164 	     ("foreign_dir", "fdr",			/* 1 */
  5   165 	     "foreign_entry", "fet",			/* 2 */
  5   166 	     "foreign_user", "fu"),			/* 3 */
  5   167 
  5   168 	imft_keyword_index            (6) fixed bin int static options (constant) init
  5   169 						/* index in info.imft_rqi */
  5   170 	     (1, 1, 2, 2, 3, 3);
  5   171 
  5   172 /*  End include file lar_info.incl.pl1			  */
     2070 
     2071 
  6     1 /* BEGIN INCLUDE FILE . . . mseg_message_info.incl.pl1 BIM 1984-10-10 */
  6     2 /* format: style3,idind30 */
  6     3 
  6     4 /* structure returned when message is read from a message segment */
  6     5 
  6     6 
  6     7 dcl	mseg_message_info_ptr	pointer;
  6     8 
  6     9 dcl	1 mseg_message_info		based (mseg_message_info_ptr) aligned,
  6    10 	  2 version		char (8) aligned,
  6    11 	  2 message_code		fixed bin,
  6    12 	  2 control_flags		unaligned,
  6    13 	    3 own			bit (1),
  6    14 	    3 delete		bit (1),
  6    15 	    3 pad			bit (34),
  6    16 	  2 ms_ptr		ptr,		/* pointer to message */
  6    17 	  2 ms_len		fixed bin (24),	/* length of message  in bits */
  6    18 	  2 ms_id			bit (72),		/* unique ID of message */
  6    19 						/* input in some cases */
  6    20 	  2 ms_access_class		bit (72),		/* message access class */
  6    21 	  2 sender_id		char (32) unaligned,/* process-group ID of sender */
  6    22 	  2 sender_process_id	bit (36) aligned,	/* if nonzero, process that sent */
  6    23 	  2 sender_level		fixed bin,	/* validation level of sender */
  6    24 	  2 sender_authorization	bit (72),		/* access authorization of message sender */
  6    25 	  2 sender_max_authorization	bit (72),		/* max authorization of sending process */
  6    26 	  2 sender_audit		bit (36) aligned;   /* audit flags */
  6    27 
  6    28 declare	MSEG_MESSAGE_INFO_V1	char (8) aligned init ("msegmi01") int static options (constant);
  6    29 
  6    30 declare	(
  6    31 	MSEG_READ_FIRST		init (1),
  6    32 	MSEG_READ_LAST		init (2),
  6    33 	MSEG_READ_SPECIFIED		init (3),
  6    34 	MSEG_READ_BEFORE_SPECIFIED	init (4),
  6    35 	MSEG_READ_AFTER_SPECIFIED	init (5))
  6    36 	fixed bin int static options (constant);
  6    37 
  6    38 declare  (MSEG_READ_OWN		init ("1"b),
  6    39 	MSEG_READ_DELETE		init ("01"b)
  6    40 	)			bit (36) aligned internal static options (constant);
  6    41 
  6    42 /* END INCLUDE FILE . . . mseg_message_info.incl.pl1 */
     2072 
     2073 
  7     1 /* BEGIN INCLUDE FILE ... queue_msg_hdr.incl.pl1 */
  7     2 
  7     3 /* This is the message header used for standard system queue messages, namely:
  7     4*   IO daemon requests, absentee requests, retrieval requests.
  7     5**/
  7     6 
  7     7 /* Written by Jerry Whitmore, Spring 1978.
  7     8*   Modified by T. Casey, November 1978, to add values for state.
  7     9*   Modified by R. Kovalcik, June 1982, defer_until_process_terminataion
  7    10**/
  7    11 
  7    12 dcl 1 queue_msg_hdr based aligned,			/* standard header for all system queue messages */
  7    13     2 msg_time fixed bin (71),			/* date and time of request */
  7    14     2 hdr_version fixed bin,				/* version of this declaration */
  7    15     2 dirname char (168),				/* directory name */
  7    16     2 ename char (32),				/* entry name of file requested */
  7    17     2 message_type fixed bin,				/* message format descriptor   */
  7    18 						/* 0 = absentee request        */
  7    19 						/* 1 = print request           */
  7    20 						/* 2 = punch request           */
  7    21 						/* 3 = tape request            */
  7    22 						/* 4 = retrieval request       */
  7    23     2 bit_flags,
  7    24       3 delete_sw bit (1) unal,			/* delete file when done */
  7    25       3 notify bit (1) unal,				/* user wants to be notified */
  7    26       3 defer_until_process_termination bit (1) unal,	/* don't process request until process terminates */
  7    27       3 padding bit (33) unal,
  7    28     2 state fixed bin,				/* stage of processing after being queued:
  7    29*						   0 = initial unprocessed state, 1 = deferred,
  7    30*						   2 = in state transition, 3 = eligible, 4 = running,
  7    31*                                                               5 = bumped, 6 = deferred_until_process_termination */
  7    32     2 orig_queue fixed bin,				/* queue the request was submitted to */
  7    33     2 std_length fixed bin,				/* length of std msg for this type */
  7    34     2 dupt_lock bit (36) aligned,			/* lock word for defer until process termination */
  7    35     2 hdr_pad (3) fixed bin;
  7    36 
  7    37 dcl  queue_msg_hdr_version_1 fixed bin int static options (constant) init (1); /* current version of the header */
  7    38 
  7    39 /* Values for queue_msg_hdr.state */
  7    40 
  7    41 dcl  STATE_UNPROCESSED fixed bin int static options (constant) init (0);
  7    42 dcl  STATE_DEFERRED fixed bin int static options (constant) init (1);
  7    43 dcl  STATE_TRANSITION fixed bin int static options (constant) init (2);
  7    44 dcl  STATE_ELIGIBLE fixed bin int static options (constant) init (3);
  7    45 dcl  STATE_RUNNING fixed bin int static options (constant) init (4);
  7    46 dcl  STATE_BUMPED fixed bin int static options (constant) init (5);
  7    47 dcl  STATE_DUPT fixed bin int static options (constant) init (6);
  7    48 
  7    49 /* END INCLUDE FILE ... queue_msg_hdr.incl.pl1 */
     2074 
     2075 
  8     1 /* BEGIN INCLUDE FILE ... retv_request.incl.pl1 ... June 1976 */
  8     2 
  8     3 dcl  requestp ptr;
  8     4 
  8     5 dcl  retv_request_version_2 fixed bin int static init (2) options (constant);
  8     6 
  8     7 dcl 1 retv_request based (requestp) aligned,
  8     8     2 header like queue_msg_hdr,
  8     9     2 bits,
  8    10       3 subtree bit (1),				/* on if sub-tree retrieval desired */
  8    11       3 dirs bit (1),				/* on if only subtree dirs desired */
  8    12       3 segs bit (1),				/* on if only subtree segments desired */
  8    13       3 previous bit (1),				/* on if prior object desired */
  8    14     2 fixed_bin,
  8    15       3 version fixed bin,				/* version of structure */
  8    16       3 to_time fixed bin (71),			/* latest time to start search from */
  8    17       3 from_time fixed bin (71),			/* from_time time not to search past */
  8    18     2 chars,
  8    19       3 new_dirname char (168),			/* cross retrieval directory name */
  8    20       3 new_ename char (32);				/* cross retrieval entry name */
  8    21 
  8    22 /* END INCLUDE FILE ... retv_request.incl.pl1 */
     2076 
     2077 
  9     1 /* BEGIN INCLUDE FILE ... user_abs_attributes.incl.pl1 */
  9     2 
  9     3 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  9     4 /*							       */
  9     5 /* This include file describes the attributes of an absentee job.  It is     */
  9     6 /* used by user_table_entry.incl.pl1, abs_message_format.incl.pl1            */
  9     7 /* and PIT.incl.pl1.   */
  9     8 /*							       */
  9     9 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  9    10 
  9    11 /****^  HISTORY COMMENTS:
  9    12*  1) change(86-12-08,GDixon), approve(87-07-13,MCR7741),
  9    13*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
  9    14*     Separated abs_attributes from the request structure
  9    15*     (abs_message_format.incl.pl1) so that the identical structure could be
  9    16*     used in the ute structure (user_table_entry.incl.pl1).
  9    17*  2) change(87-04-19,GDixon), approve(87-07-13,MCR7741),
  9    18*     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1056):
  9    19*     Added ABS_ATTRIBUTE_NAMES array.
  9    20*  3) change(87-11-11,Parisek), approve(88-02-11,MCR7849),
  9    21*     audit(88-03-22,Lippard), install(88-07-13,MR12.2-1047):
  9    22*     Added the no_start_up flag. SCP6367
  9    23*                                                   END HISTORY COMMENTS */
  9    24 
  9    25 dcl 1 user_abs_attributes		aligned based,
  9    26       2 restartable			bit (1) unaligned,	/* 1 if request may be started over from the beginning */
  9    27       2 user_deferred_until_time	bit (1) unaligned,	/* 1 if request was specified as deferred */
  9    28       2 proxy			bit (1) unaligned,	/* 1 if request submitted for someone else */
  9    29       2 set_bit_cnt			bit (1) unaligned,	/* 1 if should set bit count after every write call */
  9    30       2 time_in_gmt			bit (1) unaligned,	/* 1 if deferred_time is in GMT */
  9    31       2 user_deferred_indefinitely	bit (1) unaligned,	/* 1 if operator is to say when to run it */
  9    32       2 secondary_ok		bit (1) unaligned,	/* 1 if ok to log in as secondary foreground user */
  9    33       2 truncate_absout		bit (1) unaligned,	/* 1 if .absout is to be truncated */
  9    34       2 restarted			bit (1) unaligned,	/* 1 if job is restarted */
  9    35       2 no_start_up                     bit (1) unaligned,	/* 1 if requested -ns */
  9    36       2 attributes_pad		bit (26) unaligned;
  9    37 
  9    38 dcl  ABS_ATTRIBUTE_NAMES (10) char (28) varying int static options(constant) init(
  9    39 	"restartable",
  9    40 	"user_deferred_until_time",
  9    41 	"proxy",
  9    42 	"set_bit_cnt",
  9    43 	"time_in_gmt",
  9    44 	"user_deferred_indefinitely",
  9    45 	"secondary_ok",
  9    46 	"truncate_absout",
  9    47 	"restarted",
  9    48 	"no_start_up");
  9    49 
  9    50 /* END INCLUDE FILE ... user_abs_attributes.incl.pl1 */
  9    51 
     2078 
     2079 
     2080      end lar_util_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/18/00  1150.5  lar_util_.pl1                     >udd>sm>ds>w>ml>lar_util_.pl1
2062         1    08/04/88  2111.5  abs_message_format.incl.pl1       >ldd>incl>abs_message_format.incl.pl1
2064         2    11/22/82  1055.6  branch_status.incl.pl1            >ldd>incl>branch_status.incl.pl1
2066         3    11/09/88  0859.7  dprint_msg.incl.pl1               >ldd>incl>dprint_msg.incl.pl1
2068         4    10/18/88  1304.1  _imft_ft_request.incl.pl1         >ldd>incl>_imft_ft_request.incl.pl1
2070         5    11/09/88  0859.7  lar_info.incl.pl1                 >ldd>incl>lar_info.incl.pl1
2072         6    01/10/85  2102.8  mseg_message_info.incl.pl1        >ldd>incl>mseg_message_info.incl.pl1
2074         7    08/31/82  1736.3  queue_msg_hdr.incl.pl1            >ldd>incl>queue_msg_hdr.incl.pl1
2076         8    09/04/80  2106.4  retv_request.incl.pl1             >ldd>incl>retv_request.incl.pl1
2078         9    07/14/88  2115.0  user_abs_attributes.incl.pl1      >ldd>incl>user_abs_attributes.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ABS                                    constant        fixed bin(17,0)          initial dcl 5-80 ref 379 518 585 598 630 716 779 880
                                                                                  913 928 936 1011 1016 1024 1435 1738
ABS_VER_4                              constant        fixed bin(17,0)          initial dcl 211 ref 518 1039
ABS_VER_5                              constant        fixed bin(17,0)          initial dcl 210 ref 518 1121
ALWAYS_CHASE                           constant        bit(2)                   initial dcl 4-47 ref 1805
DEFAULT_CHASE                          constant        bit(2)                   initial dcl 4-47 ref 1811
DEFAULT_LINE_LTH                       constant        fixed bin(17,0)          initial dcl 214 ref 845 847 1831 1833
DEFAULT_OUTPUT_LTH              024335 constant        fixed bin(17,0)          initial dcl 215 ref 1940 1947
DUPT_msg                        000230 constant        char(11)                 initial packed unaligned dcl 228 set ref 1214*
FT_REQUEST_VERSION_1            000054 constant        char(8)                  initial packed unaligned dcl 4-38 ref 528
IMFT                                   constant        fixed bin(17,0)          initial dcl 216 ref 528 818 1774
IO                                     constant        fixed bin(17,0)          initial dcl 5-80 ref 523 626 792 1150 1752
MERGE_DIRECTORIES                      constant        bit(2)                   initial dcl 4-43 ref 1788
MSEG_MESSAGE_INFO_V1            000052 constant        char(8)                  initial dcl 6-28 ref 482
MSEG_READ_AFTER_SPECIFIED              constant        fixed bin(17,0)          initial dcl 6-30 ref 1306
MSEG_READ_FIRST                        constant        fixed bin(17,0)          initial dcl 6-30 ref 484
NEVER_CHASE                            constant        bit(2)                   initial dcl 4-47 ref 1817
NL                              000227 constant        char(1)                  initial packed unaligned dcl 230 set ref 399* 410
                                                                                  410 557* 854* 877* 980* 988* 1018* 1322* 1366*
                                                                                  1410 1449 1489
Notify_msg                      000250 constant        char(13)                 initial packed unaligned dcl 220 set ref 1037* 1209*
OUTPUT                                 constant        fixed bin(17,0)          initial dcl 5-80 ref 523 626 742 792 964 1150 1752
REPLACE_DIRECTORIES                    constant        bit(2)                   initial dcl 4-43 ref 1783
RETV                                   constant        fixed bin(17,0)          initial dcl 5-80 ref 514 805 1258 1437 1767
Restarted_msg                   000244 constant        char(16)                 initial packed unaligned dcl 222 set ref 1044*
STATE_DEFERRED                         constant        fixed bin(17,0)          initial dcl 7-42 ref 626 928 940 1016
STATE_ELIGIBLE                         constant        fixed bin(17,0)          initial dcl 7-44 ref 632
TAB_39                                 constant        fixed bin(17,0)          initial dcl 217 ref 1845 1878
TAB_44                                 constant        fixed bin(17,0)          initial dcl 218 ref 1847 1880
TOO_SMALL_LINE_LTH                     constant        fixed bin(17,0)          initial dcl 219 ref 847 1833
Truncate_msg                    000240 constant        char(15)                 initial packed unaligned dcl 224 set ref 1046*
a_afsw                                 parameter       bit(1)                   dcl 289 ref 286 296
a_code                                 parameter       fixed bin(35,0)          dcl 115 set ref 18 286 301* 1335*
a_info_ptr                             parameter       pointer                  dcl 114 ref 18 286 299
abs_attributes          125            based           structure                level 2 dcl 1-36
abs_message_version_6                  constant        fixed bin(17,0)          initial dcl 1-34 ref 518
abs_name                        000100 automatic       char(32)                 packed unaligned dcl 120 set ref 382* 705 707*
abs_q_1                  22(18)        based           bit(1)                   level 3 packed packed unaligned dcl 5-30 ref 319 403
                                                                                  1379 1398 1443
abs_rqi                  22(22)        based           bit(13)                  level 3 packed packed unaligned dcl 5-30 set ref
                                                                                  781* 783 784
abs_status_flags        126            based           structure                level 2 dcl 1-36
abx                                    parameter       fixed bin(17,0)          dcl 1573 ref 1570 1575
access_class                    000110 automatic       bit(72)                  dcl 121 set ref 505* 995* 1090*
aclass_string                   000112 automatic       char(170)                packed unaligned dcl 122 set ref 994* 995* 996 998*
                                                                                  1092* 1093* 1095 1097* 1645* 1647* 1648 1648*
addr                                                   builtin function         dcl 273 ref 370 370 472 690 690
admin_sw                 22(01)        based           bit(1)                   level 3 packed packed unaligned dcl 5-30 ref 325 335
                                                                                  353 458 1423
af_flag_str                     000165 automatic       varying char(512)        dcl 123 set ref 764* 1561* 1561* 1826 1827
afsw                            000366 automatic       bit(1)                   dcl 124 set ref 282* 296* 532 1561 1577 1581 1584
                                                                                  1587 1590 1593 1596 1599 1602 1605 1608 1614 1621
                                                                                  1629 1632 1635 1638 1641 1648 1650 1655 1664 1686
                                                                                  1689 1693 1697 1701 1707 1725 1728 1732 1824 1840
                                                                                  1840 1840 1845 1847 1873 1873 1873 1878 1880 1916
                                                                                  1920 1924 1927 1930 1933 1936 1944 1951 1954 1957
                                                                                  1960 1963 1978 1985 1987 2005 2008 2011 2014 2017
                                                                                  2022 2038 2041 2044 2047 2050 2053
after                                                  builtin function         dcl 273 ref 358 542 596 602
agdd                            000367 automatic       char(168)                packed unaligned dcl 125 set ref 367* 370*
agde                            000441 automatic       char(32)                 packed unaligned dcl 126 set ref 367* 370*
aguid                           000451 automatic       bit(36)                  packed unaligned dcl 127 set ref 371* 373* 685 693
aim_check_$greater              000020 constant        entry                    external dcl 254 ref 1090
all_opt_sw               22(06)        based           bit(1)                   level 3 packed packed unaligned dcl 5-30 ref 1388
                                                                                  1410
allsw                           000452 automatic       bit(1)                   dcl 128 set ref 763* 769* 781 794 807 820 1319 1680*
areap                           000454 automatic       pointer                  dcl 129 set ref 471* 485* 1060 1061 1077 1078 1295
                                                                                  1309* 1331 1508 1510 1512
arg_count               100            based           fixed bin(17,0)          level 2 dcl 1-36 ref 1057 1064 1069 1071 1331 1508
                                                                                  1611 1619 1621 1621
arg_lengths                            based           fixed bin(17,0)          array level 2 dcl 1-36 ref 1062 1070 1620
argl                            000456 automatic       fixed bin(17,0)          dcl 130 set ref 1062* 1064 1068 1070* 1071 1075
                                                                                  1620* 1621 1621 1624
args                                   based           char                     level 2 dcl 1-36 ref 1064 1071 1621 1621
args_con_blanks                        based           char                     dcl 199 set ref 1060 1065* 1067 1072* 1074 1078 1510
args_sans_blanks                       based           char                     dcl 200 set ref 1061 1064* 1065* 1071* 1072* 1077
                                                                                  1512
argx                            000457 automatic       fixed bin(17,0)          dcl 131 set ref 1069* 1070* 1619* 1620 1621*
auto_forms_name                 000460 automatic       varying char             dcl 132 set ref 746* 748* 749 751 970* 972* 973 974*
                                                                                  1201* 1203* 1204 1206* 1981* 1984* 1985 1987*
based_dummy                            based           fixed bin(17,0)          dcl 201 ref 1295
before                                                 builtin function         dcl 273 ref 358 359 539 542 583 589 596 602
bit_count               100            based           fixed bin(35,0)          level 2 dcl 3-20 set ref 1916*
bit_flags                66            based           structure                level 3 in structure "request" dcl 1-36 in procedure
                                                                                  "lar_util_"
bit_flags                66            based           structure                level 3 in structure "retv_request" dcl 8-7
                                                                                  in procedure "lar_util_"
bit_flags                66            based           structure                level 3 in structure "dprint_msg" dcl 3-20
                                                                                  in procedure "lar_util_"
bits                     76            based           structure                level 2 dcl 8-7
bottom_label                           based           char                     level 2 dcl 3-20 set ref 1184 1197* 1960 1963*
bottom_label_lth        110            based           fixed bin(17,0)          level 2 dcl 3-20 ref 748 972 1184 1195 1197 1197
                                                                                  1203 1251 1960 1963 1963 1984
branch_status                   001516 automatic       structure                level 1 dcl 2-1 set ref 370 370 690 690
brief_sw                 22(09)        based           bit(1)                   level 3 packed packed unaligned dcl 5-30 ref 911 938
                                                                                  966
buffer                          000460 automatic       char(512)                dcl 133 set ref 558* 560* 567* 570* 840* 851* 880*
                                                                                  891* 898* 902* 905* 907* 928* 948* 957* 974* 991*
                                                                                  998* 1003* 1006* 1009* 1011* 1014* 1032* 1052*
                                                                                  1082* 1087* 1097* 1103* 1108* 1113* 1118* 1126*
                                                                                  1131* 1136* 1141* 1158* 1161* 1166* 1176* 1181*
                                                                                  1186* 1192* 1197* 1206* 1246* 1251* 1262* 1269*
                                                                                  1275* 1287* 1373* 1445* 1448 1456* 1458 1470 1577*
                                                                                  1581* 1584* 1587* 1590* 1593* 1596* 1599* 1602*
                                                                                  1605* 1608* 1614* 1621* 1629* 1632* 1635* 1638*
                                                                                  1641* 1648* 1650* 1655* 1664* 1686* 1689* 1693*
                                                                                  1697* 1701* 1707* 1725* 1728* 1732* 1827* 1840*
                                                                                  1851* 1854 1856* 1856 1873* 1884* 1887 1889* 1889
                                                                                  1916* 1920* 1924* 1927* 1930* 1933* 1936* 1944*
                                                                                  1951* 1954* 1957* 1960* 1963* 1978* 1985* 1987*
                                                                                  2005* 2008* 2011* 2014* 2017* 2022* 2038* 2041*
                                                                                  2044* 2047* 2050* 2053*
cbx                                    parameter       fixed bin(17,0)          dcl 1676 ref 1673 1678
center_bottom_label     102(06)        based           bit(1)                   level 3 packed packed unaligned dcl 3-20 set ref
                                                                                  1762*
center_top_label        102(05)        based           bit(1)                   level 3 packed packed unaligned dcl 3-20 set ref
                                                                                  1761*
chan_stop_path                         based           char                     level 2 dcl 3-20 set ref 1251*
chan_stop_path_lth      111            based           fixed bin(17,0)          level 2 dcl 3-20 ref 748 972 1203 1249 1251 1251
                                                                                  1984
chars                   110            based           structure                level 2 dcl 8-7
chase_control           172(07)        based           bit(2)                   level 4 packed packed unaligned dcl 4-16 ref 1805
                                                                                  1811 1817
check_abs_name                  000660 automatic       bit(1)                   dcl 134 set ref 378* 383* 701
check_user                      000661 automatic       bit(1)                   dcl 135 set ref 314* 315* 325 325 348 360* 537 579
cleanup                         001510 stack reference condition                dcl 205 ref 474
clock                                                  builtin function         dcl 273 ref 305
code                            000662 automatic       fixed bin(35,0)          dcl 136 set ref 303* 367* 368 370* 371 443* 444 447
                                                                                  450* 485* 487 499 687* 688 690* 691 700* 701 707*
                                                                                  708 732* 733 843* 845 995* 1093* 1309* 1311 1335
                                                                                  1335 1335 1647* 1830* 1831
com_rqi                  22(35)        based           bit(11)                  level 3 packed packed unaligned dcl 5-30 set ref 767
                                                                                  770* 772 773
comment                                based           char                     level 2 dcl 1-36 set ref 948* 1118* 1605 1608*
control                 102            based           structure                level 2 dcl 3-20
control_flags             3     000764 automatic       structure                level 2 packed packed unaligned dcl 152
convert_authorization_$to_string_short
                                000022 constant        entry                    external dcl 255 ref 995 1093 1647
copies                   77            based           fixed bin(17,0)          level 2 dcl 3-20 set ref 1161* 1920*
cpu_time_limit          126(03)        based           bit(1)                   level 3 packed packed unaligned dcl 1-36 ref 644
                                                                                  1525
cstrng                                 based           char                     dcl 198 set ref 410 420 420* 424* 432* 1067* 1074*
                                                                                  1362* 1364* 1410* 1448* 1449* 1458* 1470* 1485*
                                                                                  1489*
curarg_start                    000663 automatic       fixed bin(17,0)          dcl 137 set ref 1063* 1068* 1068 1071 1075* 1075
                                                                                  1618* 1621 1621 1624* 1624
date_time_$format               000024 constant        entry                    external dcl 256 ref 553 1008 1051 1268 1274 1540
                                                                                  1653 1705 2003 2020
defer_until_process_termination
                         66(02)        based           bit(1)                   level 4 in structure "request" packed packed
                                                                                  unaligned dcl 1-36 in procedure "lar_util_" set
                                                                                  ref 1741* 1755*
defer_until_process_termination
                         66(02)        based           bit(1)                   level 4 in structure "dprint_msg" packed packed
                                                                                  unaligned dcl 3-20 in procedure "lar_util_" ref
                                                                                  1214
deferred_abs                    000664 automatic       bit(1)                   dcl 138 set ref 910* 915* 917* 920 940
deferred_count                  000665 automatic       fixed bin(17,0)          dcl 139 set ref 303* 407* 650* 650 1404 1456 1456*
deferred_indefinitely
                         22(15)        based           bit(1)                   level 3 packed packed unaligned dcl 5-30 ref 341 725
deferred_time           120            based           fixed bin(71,0)          level 2 dcl 1-36 set ref 634 639 917 1051* 1540*
                                                                                  1653*
delete                  172(09)        based           bit(1)                   level 4 packed packed unaligned dcl 4-16 set ref
                                                                                  1776*
delete_sw                66            based           bit(1)                   level 4 in structure "dprint_msg" packed packed
                                                                                  unaligned dcl 3-20 in procedure "lar_util_" ref
                                                                                  1163
delete_sw                66            based           bit(1)                   level 4 in structure "request" packed packed
                                                                                  unaligned dcl 1-36 in procedure "lar_util_" set
                                                                                  ref 1740* 1754*
destination             130            based           char(24)                 level 2 dcl 3-20 set ref 1179 1181* 1924 1927*
directory_creation_mode
                        172(02)        based           bit(2)                   level 4 packed packed unaligned dcl 4-16 ref 1783
                                                                                  1788
dirname                  47            based           char(168)                level 2 in structure "info" packed packed unaligned
                                                                                  dcl 5-30 in procedure "lar_util_" ref 367 682
dirname                         000666 automatic       char(168)                packed unaligned dcl 140 in procedure "lar_util_"
                                                                                  set ref 669* 682 687* 905* 905 1011* 1011
dirname                   3            based           char(168)                level 3 in structure "request" dcl 1-36 in procedure
                                                                                  "lar_util_" set ref 669 1697*
dirname_sw               22(12)        based           bit(1)                   level 3 packed packed unaligned dcl 5-30 ref 341 365
                                                                                  682
dirs                     77            based           bit(1)                   level 3 dcl 8-7 ref 1770 1770
dmp                             001530 automatic       pointer                  dcl 3-18 set ref 479* 502* 523 523 523 746 746 748
                                                                                  970 970 972 1155 1155 1158 1161 1163 1171 1173
                                                                                  1176 1176 1179 1181 1184 1184 1184 1186 1190 1192
                                                                                  1195 1197 1201 1201 1203 1209 1211 1211 1214 1217
                                                                                  1219 1221 1223 1225 1227 1229 1231 1234 1236 1239
                                                                                  1241 1249 1251 1303* 1756 1757 1758 1759 1760 1761
                                                                                  1762 1763 1764 1764 1916 1920 1924 1927 1930 1933
                                                                                  1936 1940 1943 1947 1950 1954 1957 1960 1963 1968
                                                                                  1970 1972 1974 1976 1981 1981 1984
dprint_msg                             based           structure                level 1 dcl 3-20
dprint_msg_version_3                   constant        fixed bin(17,0)          initial dcl 3-62 ref 523 1211 1764
dprint_msg_version_4                   constant        fixed bin(17,0)          initial dcl 3-62 ref 523
dprint_msg_version_5                   constant        fixed bin(17,0)          initial dcl 3-62 ref 523 746 970 1201 1981
ename                   121            based           char(32)                 level 2 in structure "info" packed packed unaligned
                                                                                  dcl 5-30 in procedure "lar_util_" ref 379 379 382
                                                                                  697 700
ename                           000740 automatic       char(32)                 packed unaligned dcl 141 in procedure "lar_util_"
                                                                                  set ref 670* 697 700* 705 707* 905* 907* 1011*
ename                    55            based           char(32)                 level 3 in structure "request" dcl 1-36 in procedure
                                                                                  "lar_util_" set ref 670 1701*
ename_sw                 22(13)        based           bit(1)                   level 3 packed packed unaligned dcl 5-30 ref 341 697
error_table_$bad_segment        000062 external static fixed bin(35,0)          dcl 279 ref 487 1311
error_table_$moderr             000056 external static fixed bin(17,0)          dcl 277 ref 447
error_table_$no_message         000060 external static fixed bin(17,0)          dcl 278 ref 1335
esc                     102(04)        based           bit(1)                   level 3 packed packed unaligned dcl 3-20 set ref
                                                                                  1227 1760*
expand_pathname_                000026 constant        entry                    external dcl 257 ref 367 687
expandedlen                     000750 automatic       fixed bin(17,0)          dcl 142 set ref 1065* 1066 1067 1067 1072* 1073 1074
                                                                                  1074
expandlen                       000751 automatic       fixed bin(17,0)          dcl 143 set ref 1059* 1060 1060 1061 1061 1064 1065
                                                                                  1065 1065 1065 1067 1071 1072 1072 1072 1072 1074
                                                                                  1077 1077 1078 1078 1510 1510 1512 1512
expandp                         000752 automatic       pointer                  dcl 144 set ref 473* 1060* 1065 1067 1072 1074 1078
                                                                                  1510 1510 1512
extend                  172(10)        based           bit(1)                   level 4 packed packed unaligned dcl 4-16 set ref
                                                                                  1798* 1801
fixed_bin               102            based           structure                level 2 dcl 8-7
flags                   172            based           structure                level 3 dcl 4-16
foreign_dirname         110            based           char(168)                level 3 packed packed unaligned dcl 4-16 set ref
                                                                                  2038 2041*
foreign_ename           162            based           char(32)                 level 3 packed packed unaligned dcl 4-16 set ref
                                                                                  2044 2047*
foreign_path_given      172(01)        based           bit(1)                   level 4 packed packed unaligned dcl 4-16 set ref
                                                                                  1778* 2038 2044
foreign_user            100            based           char(32)                 level 3 packed packed unaligned dcl 4-16 set ref
                                                                                  2050 2053*
foreign_user_given      172            based           bit(1)                   level 4 packed packed unaligned dcl 4-16 set ref
                                                                                  1777* 2050
forms                   122            based           char(24)                 level 2 dcl 3-20 ref 746 970 1201 1981
forms_max_lth                          constant        fixed bin(17,0)          initial dcl 3-55 ref 132
forms_name                             based           char                     level 2 in structure "dprint_msg" dcl 3-20
                                                                                  in procedure "lar_util_" ref 748 972 1203 1984
forms_name              173            based           char(64)                 level 2 in structure "info" packed packed unaligned
                                                                                  dcl 5-30 in procedure "lar_util_" ref 751 751
forms_name_lth          112            based           fixed bin(17,0)          level 2 dcl 3-20 ref 748 972 1203 1984
forms_sw                 22(21)        based           bit(1)                   level 3 packed packed unaligned dcl 5-30 ref 341 744
                                                                                  968
from_time               106            based           fixed bin(71,0)          level 3 dcl 8-7 set ref 1266 1268* 2003*
ft_request                             based           structure                level 1 dcl 4-16
ft_request_ptr                  001532 automatic       pointer                  dcl 4-36 set ref 502* 528 1776 1777 1778 1779 1780
                                                                                  1781 1783 1788 1798 1799 1801 1801 1805 1811 1817
                                                                                  2038 2038 2041 2044 2044 2047 2050 2050 2053
get_group_id_                   000030 constant        entry                    external dcl 258 ref 357
get_line_length_                000040 constant        entry                    external dcl 262 ref 843 1830
get_system_free_area_           000042 constant        entry                    external dcl 263 ref 471
hbound                                                 builtin function         dcl 273 ref 673 926 1155
hcs_$status_long                000032 constant        entry                    external dcl 259 ref 370 690
hdr_version               2            based           fixed bin(17,0)          level 3 dcl 1-36 ref 511
header                                 based           structure                level 2 in structure "dprint_msg" dcl 3-20
                                                                                  in procedure "lar_util_"
header                                 based           structure                level 2 in structure "retv_request" dcl 8-7
                                                                                  in procedure "lar_util_"
header_length                          constant        fixed bin(17,0)          initial dcl 209 ref 430 432 1388 1447
header_position                 000754 automatic       fixed bin(17,0)          dcl 145 set ref 405* 429* 432 1400 1448 1449 1452*
                                                                                  1452 1458
heading                 136            based           char                     level 2 dcl 3-20 set ref 1171 1173 1176 1176 1930
                                                                                  1933*
heading_lth             106            based           fixed bin(17,0)          level 2 dcl 3-20 ref 748 972 1171 1173 1176 1176
                                                                                  1184 1184 1186 1192 1197 1203 1251 1930 1933 1933
                                                                                  1954 1957 1960 1963 1984
home_dir                               based           char                     level 2 dcl 1-36 set ref 1136* 1629 1632*
i                               000755 automatic       fixed bin(17,0)          dcl 146 set ref 772* 773 775* 783* 784 786* 796* 797
                                                                                  799* 809* 810 812* 822* 823 825* 955* 957 957 973*
                                                                                  974 974 1173* 1175* 1176 1176 1442* 1443 1443*
                                                                                  1445 1445* 1447* 1448 1449
icx                                    parameter       fixed bin(17,0)          dcl 2034 ref 2031 2036
id_sw                    22(14)        based           bit(1)                   level 3 packed packed unaligned dcl 5-30 ref 341 678
imft_rqi                 23(25)        based           bit(3)                   level 3 packed packed unaligned dcl 5-30 set ref
                                                                                  820* 822 823
immediate                22(04)        based           bit(1)                   level 3 packed packed unaligned dcl 5-30 ref 341 624
                                                                                  652
include_files           172(05)        based           bit(1)                   level 4 packed packed unaligned dcl 4-16 set ref
                                                                                  1780*
include_subtrees        172(06)        based           bit(1)                   level 4 packed packed unaligned dcl 4-16 set ref
                                                                                  1781*
index                                                  builtin function         dcl 273 ref 379 722 751 955 973 1854 1887
info                                   based           structure                level 1 dcl 5-30
info_ptr                        001534 automatic       pointer                  dcl 5-29 set ref 299* 309 309 314 315 315 319 319
                                                                                  325 325 325 335 335 341 341 341 341 341 341 341
                                                                                  341 341 350 351 353 353 365 367 379 379 379 382
                                                                                  394 394 399 403 403 410 410 410 410 410 415 415
                                                                                  420 420 420 420 420 420 424 424 429 430 430 432
                                                                                  432 443 452 458 458 458 485 514 518 523 523 528
                                                                                  550 555 585 598 624 626 626 630 652 678 678 682
                                                                                  682 697 697 700 716 718 722 725 728 728 732 742
                                                                                  744 751 751 767 770 772 773 779 781 783 784 792
                                                                                  792 794 796 797 805 807 809 810 818 820 822 823
                                                                                  833 835 839 872 880 880 880 896 905 911 913 928
                                                                                  936 938 953 964 966 968 1001 1011 1016 1024 1066
                                                                                  1066 1067 1067 1067 1073 1073 1074 1074 1074 1150
                                                                                  1150 1258 1309 1347 1347 1351 1351 1353 1353 1355
                                                                                  1355 1360 1360 1362 1362 1364 1364 1364 1371 1379
                                                                                  1379 1388 1388 1388 1388 1398 1398 1410 1410 1410
                                                                                  1410 1410 1410 1414 1414 1423 1435 1437 1440 1442
                                                                                  1443 1448 1448 1449 1449 1458 1458 1469 1469 1470
                                                                                  1470 1470 1483 1483 1485 1485 1485 1488 1488 1489
                                                                                  1489 1489 1538 1738 1752 1752 1767 1774
init_proc                              based           char                     level 2 dcl 1-36 set ref 1141 1141 1635 1638*
initial_ring            110            based           fixed bin(17,0)          level 2 dcl 1-36 set ref 1129 1131* 1641*
input_count              15            based           fixed bin(21,0)          level 2 dcl 5-30 ref 394
ioa_$rs                         000034 constant        entry                    external dcl 260 ref 558 560 570 880 991 998 1003
                                                                                  1006 1009 1011 1032 1052 1065 1072 1082 1087 1097
                                                                                  1103 1108 1113 1118 1126 1131 1136 1141 1158 1161
                                                                                  1166 1176 1181 1186 1192 1197 1206 1246 1251 1262
                                                                                  1269 1275 1287 1373
ioa_$rsnnl                      000036 constant        entry                    external dcl 261 ref 567 840 851 891 898 902 905 907
                                                                                  928 948 957 974 1014 1231 1236 1241 1445 1456 1561
                                                                                  1577 1581 1584 1587 1590 1593 1596 1599 1602 1605
                                                                                  1608 1614 1621 1629 1632 1635 1638 1641 1648 1650
                                                                                  1655 1664 1686 1689 1693 1697 1701 1707 1725 1728
                                                                                  1732 1840 1851 1873 1884 1916 1920 1924 1927 1930
                                                                                  1933 1936 1943 1944 1950 1951 1954 1957 1960 1963
                                                                                  1978 1985 1987 2005 2008 2011 2014 2017 2022 2038
                                                                                  2041 2044 2047 2050 2053
j                               000756 automatic       fixed bin(17,0)          dcl 147 set ref 1231* 1236* 1241*
last_comma                      000757 automatic       fixed bin(17,0)          dcl 148 set ref 1854* 1855 1887* 1888
lbound                                                 builtin function         dcl 273 ref 673 1155
len                             000760 automatic       fixed bin(17,0)          dcl 149 set ref 558* 560* 567* 570* 840* 842 851*
                                                                                  852 858 880* 891* 898* 902* 905* 907* 928* 948*
                                                                                  957* 974* 991* 998* 1003* 1006* 1009* 1011* 1014*
                                                                                  1032* 1052* 1082* 1087* 1097* 1103* 1108* 1113*
                                                                                  1118* 1126* 1131* 1136* 1141* 1158* 1161* 1166*
                                                                                  1176* 1181* 1186* 1192* 1197* 1206* 1246* 1251*
                                                                                  1262* 1269* 1275* 1287* 1373* 1445* 1448 1452
                                                                                  1456* 1458 1458 1469 1470 1470 1577* 1581* 1584*
                                                                                  1587* 1590* 1593* 1596* 1599* 1602* 1605* 1608*
                                                                                  1614* 1621* 1629* 1632* 1635* 1638* 1641* 1648*
                                                                                  1650* 1655* 1664* 1686* 1689* 1693* 1697* 1701*
                                                                                  1707* 1725* 1728* 1732* 1826* 1827 1840* 1843
                                                                                  1851* 1852 1855* 1856 1859 1873* 1876 1884* 1885
                                                                                  1888* 1889 1892 1916* 1920* 1924* 1927* 1930*
                                                                                  1933* 1936* 1943* 1944* 1950* 1951* 1954* 1957*
                                                                                  1960* 1963* 1978* 1985* 1987* 2005* 2008* 2011*
                                                                                  2014* 2017* 2022* 2038* 2041* 2044* 2047* 2050*
                                                                                  2053*
len_args                101            based           fixed bin(17,0)          level 2 dcl 1-36 ref 1059 1064 1071 1331 1508 1621
                                                                                  1621
len_comment             106            based           fixed bin(17,0)          level 2 dcl 1-36 ref 946 948 948 1062 1064 1070 1071
                                                                                  1116 1118 1118 1136 1141 1141 1331 1508 1605 1608
                                                                                  1608 1620 1621 1621 1629 1632 1635 1638
len_homedir             111            based           fixed bin(17,0)          level 2 dcl 1-36 ref 1062 1064 1070 1071 1134 1136
                                                                                  1136 1141 1141 1331 1508 1620 1621 1621 1629 1632
                                                                                  1632 1635 1638
len_initproc            112            based           fixed bin(17,0)          level 2 dcl 1-36 ref 1062 1064 1070 1071 1139 1141
                                                                                  1141 1141 1141 1331 1508 1620 1621 1621 1635 1638
                                                                                  1638
len_name                 77            based           fixed bin(17,0)          level 2 dcl 1-36 ref 589 602 722 728 732 948 955 957
                                                                                  1062 1064 1070 1071 1087 1103 1108 1113 1118 1136
                                                                                  1141 1141 1331 1508 1581 1584 1587 1590 1593 1596
                                                                                  1599 1602 1605 1608 1620 1621 1621 1629 1632 1635
                                                                                  1638 1658
len_offset                      000761 automatic       fixed bin(17,0)          dcl 150 set ref 1845* 1847* 1852 1854 1854 1878*
                                                                                  1880* 1885 1887 1887
len_output              102            based           fixed bin(17,0)          level 2 dcl 1-36 ref 589 602 722 728 732 948 955 957
                                                                                  1062 1064 1070 1071 1085 1087 1087 1103 1108 1113
                                                                                  1118 1136 1141 1141 1331 1508 1581 1584 1584 1587
                                                                                  1590 1593 1596 1599 1602 1605 1608 1620 1621 1621
                                                                                  1629 1632 1635 1638
len_proxy               103            based           fixed bin(17,0)          level 2 dcl 1-36 ref 589 602 722 728 732 948 955 957
                                                                                  1062 1064 1070 1071 1101 1103 1103 1108 1113 1118
                                                                                  1136 1141 1141 1331 1508 1587 1590 1590 1593 1596
                                                                                  1599 1602 1605 1608 1620 1621 1621 1629 1632 1635
                                                                                  1638
len_resource            104            based           fixed bin(17,0)          level 2 dcl 1-36 ref 720 722 728 732 948 955 957 957
                                                                                  1062 1064 1070 1071 1106 1108 1108 1113 1118 1136
                                                                                  1141 1141 1331 1508 1593 1596 1596 1599 1602 1605
                                                                                  1608 1620 1621 1621 1629 1632 1635 1638
len_sender              105            based           fixed bin(17,0)          level 2 dcl 1-36 ref 728 732 948 1062 1064 1070 1071
                                                                                  1111 1113 1113 1118 1136 1141 1141 1331 1508 1599
                                                                                  1602 1602 1605 1608 1620 1621 1621 1629 1632 1635
                                                                                  1638
len_vpad                107            based           fixed bin(17,0)          level 2 dcl 1-36 ref 1062 1064 1070 1071 1331 1508
                                                                                  1620 1621 1621
length                                                 builtin function         dcl 273 ref 379 749 772 783 796 809 822 1483 1485
                                                                                  1826 1839 1872
line_lth                104            based           fixed bin(17,0)          level 2 dcl 3-20 set ref 1234 1236* 1940 1943*
line_nbrs               102(08)        based           bit(1)                   level 3 packed packed unaligned dcl 3-20 set ref
                                                                                  1211 1764*
line_nbrs_msg                   000233 constant        char(18)                 initial packed unaligned dcl 226 set ref 1211*
ll                              000762 automatic       fixed bin(17,0)          dcl 151 set ref 418* 843* 845* 847 847* 852 1407
                                                                                  1830* 1831* 1833 1833* 1852 1854 1854 1885 1887
                                                                                  1887
lmargin                 103            based           fixed bin(17,0)          level 2 dcl 3-20 set ref 1229 1231* 1936*
load_control            126(06)        based           bit(1)                   level 3 packed packed unaligned dcl 1-36 ref 1533
local_mseg_message_info         000764 automatic       structure                level 1 dcl 152 set ref 472 481*
long_id                         001016 automatic       bit(1)                   dcl 153 set ref 309* 312* 867 880*
long_id_sw               22(05)        based           bit(1)                   level 3 packed packed unaligned dcl 5-30 ref 309
long_sw                  22            based           bit(1)                   level 3 packed packed unaligned dcl 5-30 ref 309 555
                                                                                  872 1538
match_request_id_               000044 constant        entry                    external dcl 264 ref 678
match_star_name_                000046 constant        entry                    external dcl 265 ref 700 707 732
max_cpu_time            122            based           fixed bin(35,0)          level 2 dcl 1-36 set ref 1080 1082* 1577*
message                                parameter       char                     packed unaligned dcl 1480 ref 1477 1483 1485 1485
                                                                                  1493
message_code              2     000764 automatic       fixed bin(17,0)          level 2 dcl 152 set ref 484* 1306*
message_count            21            based           fixed bin(17,0)          level 2 dcl 5-30 set ref 1355* 1355
message_segment_$get_message_count_index
                                000050 constant        entry                    external dcl 266 ref 443
message_segment_$read_message_index
                                000052 constant        entry                    external dcl 267 ref 485 1309
message_type             65            based           fixed bin(17,0)          level 3 dcl 1-36 ref 1713 1715 1717 1719 1721 1723
messcount                       001017 automatic       fixed bin(17,0)          dcl 154 set ref 443* 446* 455 464 465 1355 1381*
                                                                                  1381 1388 1403 1423 1423 1453 1456*
modes                           001020 automatic       varying char(100)        dcl 155 set ref 1216* 1217* 1217 1219* 1219 1221*
                                                                                  1221 1223* 1223 1225* 1225 1227* 1227 1232* 1232
                                                                                  1237* 1237 1242* 1242 1244 1246* 1278* 1279* 1279
                                                                                  1281* 1281 1283* 1283 1285 1287*
ms_access_class          11            based           bit(72)                  level 2 dcl 6-9 ref 505
ms_id                     7            based           bit(72)                  level 2 in structure "mseg_message_info" dcl 6-9
                                                                                  in procedure "lar_util_" ref 552 1300
ms_id                     7     000764 automatic       bit(72)                  level 2 in structure "local_mseg_message_info"
                                                                                  dcl 152 in procedure "lar_util_" set ref 1305*
ms_ptr                    4            based           pointer                  level 2 dcl 6-9 ref 502
mseg_idx                  2            based           fixed bin(17,0)          level 2 dcl 5-30 set ref 443* 485* 1309*
mseg_message_info                      based           structure                level 1 dcl 6-9
mseg_message_info_ptr           001536 automatic       pointer                  dcl 6-7 set ref 472* 485* 502 504 505 552 1300 1309*
msg_time                        001052 automatic       fixed bin(71,0)          dcl 156 in procedure "lar_util_" set ref 552* 553*
                                                                                  671* 678* 866* 1008* 1684*
msg_time                               based           fixed bin(71,0)          level 3 in structure "request" dcl 1-36 in procedure
                                                                                  "lar_util_" set ref 671 1705*
n_bad_vrsn                      001054 automatic       fixed bin(17,0)          dcl 157 set ref 303* 535* 535 1371 1371 1373*
name                    127            based           char                     level 2 dcl 1-36 ref 1658
nep                     102            based           bit(1)                   level 3 packed packed unaligned dcl 3-20 set ref
                                                                                  1217 1756*
new_dirname             110            based           char(168)                level 3 dcl 8-7 set ref 1260 1262* 1262 2008 2011*
new_ename               162            based           char(32)                 level 3 dcl 8-7 set ref 1262* 2014 2017*
nlsw                            000100 automatic       bit(1)                   dcl 1496 set ref 1482* 1486 1498*
no_separator            102(07)        based           bit(1)                   level 3 packed packed unaligned dcl 3-20 set ref
                                                                                  1225 1763*
no_start_up             125(09)        based           bit(1)                   level 3 packed packed unaligned dcl 1-36 set ref
                                                                                  1123 1749*
no_total_sw              22(17)        based           bit(1)                   level 3 packed packed unaligned dcl 5-30 set ref
                                                                                  452*
no_totals                       001055 automatic       bit(1)                   dcl 158 set ref 441* 451* 458 1388 1423 1450
non_edited              102(02)        based           bit(1)                   level 3 packed packed unaligned dcl 3-20 set ref
                                                                                  1219 1758*
notify                   66(01)        based           bit(1)                   level 4 in structure "retv_request" packed packed
                                                                                  unaligned dcl 8-7 in procedure "lar_util_" ref
                                                                                  1281
notify                   66(01)        based           bit(1)                   level 4 in structure "request" packed packed
                                                                                  unaligned dcl 1-36 in procedure "lar_util_" set
                                                                                  ref 1037 1736*
notify                   66(01)        based           bit(1)                   level 4 in structure "dprint_msg" packed packed
                                                                                  unaligned dcl 3-20 in procedure "lar_util_" ref
                                                                                  1209
null                                                   builtin function         dcl 273 ref 302 370 370 473 479 690 690 1303 1331
                                                                                  1508 1510 1512
ocx                                    parameter       fixed bin(17,0)          dcl 1912 ref 1909 1914
offs                            001056 automatic       varying char(256)        dcl 159 set ref 764* 1565* 1565 1870 1872 1884 1884
offslen                         001157 automatic       fixed bin(21,0)          dcl 160 set ref 1872* 1884 1884
old_ms_id                       001160 automatic       bit(72)                  dcl 161 set ref 1300* 1305
ons                             001162 automatic       varying char(256)        dcl 162 set ref 764* 1563* 1563 1837 1839 1851 1851
                                                                                  1873
onslen                          001263 automatic       fixed bin(21,0)          dcl 163 set ref 1839* 1851 1851
operator_deferred_indefinitely
                        126(01)        based           bit(1)                   level 3 packed packed unaligned dcl 1-36 set ref 642
                                                                                  725 1523 1745*
operator_deferred_until_time
                        126            based           bit(1)                   level 3 packed packed unaligned dcl 1-36 ref 639
                                                                                  1661
orig_queue               70            based           fixed bin(17,0)          level 3 dcl 1-36 set ref 1728*
output_count             16            based           fixed bin(21,0)          level 2 dcl 5-30 set ref 394* 399 410 410 410* 410
                                                                                  420 420 420 420 424 429 430* 430 432 839 1066*
                                                                                  1066 1067 1067 1073* 1073 1074 1074 1347* 1347
                                                                                  1362 1364 1364 1388* 1388 1410 1410 1414* 1414
                                                                                  1448 1449 1458 1469* 1469 1470 1470 1483* 1483
                                                                                  1485 1485 1488* 1488 1489 1489
output_file                            based           char                     level 2 dcl 1-36 set ref 1087* 1581 1584*
output_module           101            based           fixed bin(17,0)          level 2 dcl 3-20 ref 1155 1155 1158 1968 1970 1972
                                                                                  1974 1976
output_rqi               23(10)        based           bit(11)                  level 3 packed packed unaligned dcl 5-30 set ref
                                                                                  794* 796 797
own                       3     000764 automatic       bit(1)                   level 3 packed packed unaligned dcl 152 set ref 483*
                                                                                  1307*
page_lth                105            based           fixed bin(17,0)          level 2 dcl 3-20 set ref 1239 1241* 1947 1950*
pass1                           001264 automatic       bit(1)                   dcl 164 set ref 1835* 1840 1840 1840 1840* 1845 1847
                                                                                  1860* 1867* 1873 1873 1873 1873* 1878 1880 1893*
path_sw                  22(08)        based           bit(1)                   level 3 packed packed unaligned dcl 5-30 set ref
                                                                                  880* 905
person                          001265 automatic       char(32)                 packed unaligned dcl 165 in procedure "lar_util_"
                                                                                  set ref 350* 357* 358 359* 359 539 539 581 583 589
person                   24            based           char(28)                 level 2 in structure "info" dcl 5-30 in procedure
                                                                                  "lar_util_" ref 315 325 350
position                        001275 automatic       fixed bin(17,0)          dcl 166 set ref 303* 406* 658* 658 840* 851* 898*
                                                                                  1003* 1405 1693*
position_sw              22(10)        based           bit(1)                   level 3 packed packed unaligned dcl 5-30 set ref 335
                                                                                  353 415 458 835 880* 896 1001 1360
pp_request_type                 000216 constant        char(9)                  initial array dcl 232 set ref 1155 1155 1158* 1970
                                                                                  1972 1974
previous                101            based           bit(1)                   level 3 dcl 8-7 ref 1272 1283 1772 1772
print_requests                  001276 automatic       bit(1)                   dcl 167 set ref 1422* 1423* 1445*
print_user_column               001277 automatic       bit(1)                   dcl 168 set ref 325* 331* 565 878 889 989
project                  33            based           char(28)                 level 2 in structure "info" dcl 5-30 in procedure
                                                                                  "lar_util_" ref 315 325 351
project                         001300 automatic       char(32)                 packed unaligned dcl 169 in procedure "lar_util_"
                                                                                  set ref 351* 358* 542 542 594 596 602
proxy                   125(02)        based           bit(1)                   level 3 packed packed unaligned dcl 1-36 set ref 587
                                                                                  600 1743*
proxy_name                             based           char                     level 2 dcl 1-36 set ref 589 602 1103* 1587 1590*
psn_ll                          001310 automatic       fixed bin(17,0)          dcl 170 set ref 419* 842* 852 855* 858* 858 1836*
                                                                                  1851 1851 1851 1851 1859* 1859 1869* 1884 1884
                                                                                  1884 1884 1892* 1892
psn_s                           001311 automatic       fixed bin(17,0)          dcl 171 set ref 417* 424 839* 1362 1406
queue                    14            based           fixed bin(17,0)          level 2 dcl 5-30 ref 319 403 1379 1398 1442
queue_limit             126(04)        based           bit(1)                   level 3 packed packed unaligned dcl 1-36 ref 1529
queue_msg_hdr                          based           structure                level 1 dcl 7-12
queue_msg_hdr_version_1                constant        fixed bin(17,0)          initial dcl 7-37 ref 511
queue_name                4            based           char(32)                 level 2 packed packed unaligned dcl 5-30 ref 1440
queue_string                    001312 automatic       char(32)                 packed unaligned dcl 172 set ref 1435* 1437* 1440*
                                                                                  1445*
rcx                                    parameter       fixed bin(17,0)          dcl 1999 ref 1996 2001
read_all                        001322 automatic       bit(1)                   dcl 173 set ref 335* 337* 483 624 1307
region                                 based           area(1000)               dcl 197 ref 1060 1061 1077 1078 1295 1331 1508 1510
                                                                                  1512
remote_transfer         172(04)        based           bit(1)                   level 4 packed packed unaligned dcl 4-16 set ref
                                                                                  1779*
reqp                            001324 automatic       pointer                  dcl 174 set ref 302* 473* 479* 502* 511 518 518 518
                                                                                  587 589 600 602 626 632 634 634 637 639 639 642
                                                                                  644 669 670 671 672 720 722 725 725 728 732 915
                                                                                  917 917 946 948 955 957 1029 1037 1039 1044 1046
                                                                                  1049 1051 1055 1057 1059 1062 1064 1069 1070 1071
                                                                                  1080 1082 1085 1087 1090 1093 1101 1103 1106 1108
                                                                                  1111 1113 1116 1118 1121 1123 1129 1131 1134 1136
                                                                                  1139 1141 1141 1141 1141 1295 1303* 1331 1331 1508
                                                                                  1508 1523 1525 1527 1529 1531 1533 1535 1540 1546
                                                                                  1577 1581 1584 1587 1590 1593 1596 1599 1602 1605
                                                                                  1608 1611 1619 1620 1621 1621 1629 1632 1635 1638
                                                                                  1641 1647 1653 1658 1658 1661 1697 1701 1705 1713
                                                                                  1715 1717 1719 1721 1723 1728 1732 1736 1740 1741
                                                                                  1742 1743 1744 1745 1746 1747 1748 1749 1750 1754
                                                                                  1755
request                                based           structure                level 1 dcl 1-36 in procedure "lar_util_" set ref
                                                                                  1331 1508
request                  76            based           structure                level 2 in structure "ft_request" dcl 4-16
                                                                                  in procedure "lar_util_"
request_header                         based           structure                level 2 dcl 1-36
request_id               42            based           char(19)                 level 2 dcl 5-30 ref 678
request_id_                     000054 constant        entry                    external dcl 268 ref 866 1684
request_type              3            based           fixed bin(17,0)          level 2 dcl 5-30 ref 379 514 518 523 523 528 585 598
                                                                                  626 626 630 716 742 779 792 792 805 818 880 913
                                                                                  928 936 964 1011 1016 1024 1150 1150 1258 1435
                                                                                  1437 1738 1752 1752 1767 1774
request_version          76            based           fixed bin(17,0)          level 2 dcl 1-36 ref 518 518 518 1039 1121
requested_authorization
                        123            based           bit(72)                  level 2 dcl 1-36 set ref 1090* 1093* 1647*
requestp                        001540 automatic       pointer                  dcl 8-3 set ref 479* 502* 514 1260 1262 1262 1262
                                                                                  1266 1268 1272 1272 1274 1279 1281 1283 1303* 1769
                                                                                  1769 1770 1770 1771 1771 1772 1772 2003 2008 2011
                                                                                  2014 2017 2020
resource                               based           char                     level 2 dcl 1-36 set ref 722 955 957* 1108* 1593
                                                                                  1596*
resource_name           141            based           varying char(100)        level 2 dcl 5-30 ref 722
resource_sw              22(11)        based           bit(1)                   level 3 packed packed unaligned dcl 5-30 ref 341 718
                                                                                  953
resources_unavailable
                        126(02)        based           bit(1)                   level 3 packed packed unaligned dcl 1-36 set ref
                                                                                  1527 1750*
restartable             125            based           bit(1)                   level 3 packed packed unaligned dcl 1-36 set ref
                                                                                  1029 1742*
restarted               125(08)        based           bit(1)                   level 3 packed packed unaligned dcl 1-36 set ref
                                                                                  1044 1748*
retrying                        001326 automatic       bit(1)                   dcl 175 set ref 478* 487 491* 1302* 1311 1315*
retv_request                           based           structure                level 1 dcl 8-7
retv_request_version_2                 constant        fixed bin(17,0)          initial dcl 8-5 ref 514
retv_rqi                 23(21)        based           bit(4)                   level 3 packed packed unaligned dcl 5-30 set ref
                                                                                  807* 809 810
reverse                                                builtin function         dcl 273 ref 1854 1887
rqdd                            001327 automatic       char(168)                packed unaligned dcl 176 set ref 687* 690*
rqde                            001401 automatic       char(32)                 packed unaligned dcl 177 set ref 687* 690*
rqi_buffered                    001416 automatic       bit(1)                   dcl 179 set ref 776* 787* 800* 813* 826* 1319 1321*
rqi_sw                          001417 automatic       bit(1)                   dcl 180 set ref 283* 297* 396 528 532 765 1319 1344
rqid                            001411 automatic       char(19)                 packed unaligned dcl 178 set ref 866* 867* 867 902*
                                                                                  1006* 1684* 1686*
rs_len                          001420 automatic       fixed bin(17,0)          dcl 181 set ref 1561*
rtrim                                                  builtin function         dcl 273 ref 379 382 746 751 970 1201 1839 1872 1981
s                               001421 automatic       char(1)                  dcl 182 set ref 1432* 1434* 1445* 1453* 1455* 1456*
scrunchedp                      001422 automatic       pointer                  dcl 183 set ref 473* 1061* 1064 1065 1071 1072 1077
                                                                                  1512
search_all               22(20)        based           bit(1)                   level 3 packed packed unaligned dcl 5-30 ref 1388
                                                                                  1410
secondary_ok            125(06)        based           bit(1)                   level 3 packed packed unaligned dcl 1-36 set ref
                                                                                  1746*
segs                    100            based           bit(1)                   level 3 dcl 8-7 ref 1771 1771
select_count             17            based           fixed bin(17,0)          level 2 dcl 5-30 set ref 1353* 1353
select_sw                       001424 automatic       bit(1)                   dcl 184 set ref 341* 344* 458 1423
sender                  131            based           char(32)                 level 2 in structure "info" dcl 5-30 in procedure
                                                                                  "lar_util_" ref 728 732
sender                                 based           char                     level 2 in structure "request" dcl 1-36 in procedure
                                                                                  "lar_util_" set ref 728 732 1113* 1599 1602*
sender_id                       001425 automatic       char(32)                 packed unaligned dcl 185 in procedure "lar_util_"
                                                                                  set ref 504* 539 542 558* 567* 583 596 891* 991*
                                                                                  1689*
sender_id                13            based           char(32)                 level 2 in structure "mseg_message_info" packed
                                                                                  packed unaligned dcl 6-9 in procedure "lar_util_"
                                                                                  ref 504
sender_sw                22(16)        based           bit(1)                   level 3 packed packed unaligned dcl 5-30 ref 341 728
set_bit_cnt             125(03)        based           bit(1)                   level 3 packed packed unaligned dcl 1-36 set ref
                                                                                  1744*
single                  102(01)        based           bit(1)                   level 3 packed packed unaligned dcl 3-20 set ref
                                                                                  1221 1757*
state                    67            based           fixed bin(17,0)          level 3 in structure "request" dcl 1-36 in procedure
                                                                                  "lar_util_" ref 626 632 672 1732
state                           001435 automatic       fixed bin(17,0)          dcl 186 in procedure "lar_util_" set ref 672* 673
                                                                                  673 673* 913 924 926 926* 928 928 940 1014 1016
state_names                     000056 constant        char(48)                 initial array packed unaligned dcl 234 set ref 673
                                                                                  673 926 928* 1014* 1732*
static_deferred_count           000015 internal static fixed bin(17,0)          dcl 249 set ref 407 1404*
static_header_position          000012 internal static fixed bin(17,0)          dcl 246 set ref 319* 403 405 1379 1400*
static_ll                       000011 internal static fixed bin(17,0)          dcl 245 set ref 418 1407*
static_messcount                000014 internal static fixed bin(17,0)          dcl 248 set ref 1381 1403*
static_position                 000016 internal static fixed bin(17,0)          dcl 250 set ref 406 1405*
static_psn_s                    000010 internal static fixed bin(17,0)          dcl 244 set ref 417 1406*
static_total_selected           000013 internal static fixed bin(17,0)          dcl 247 set ref 415 435* 837 875 1382 1402*
str                             001436 automatic       varying char(32)         dcl 187 set ref 1029* 1031* 1032* 1125* 1126* 1163*
                                                                                  1165* 1166* 1658* 1661* 1663* 1664* 1711* 1713*
                                                                                  1715* 1717* 1719* 1721* 1723* 1725* 1940* 1943*
                                                                                  1944* 1947* 1950* 1951* 1966* 1968* 1970* 1972*
                                                                                  1974* 1976* 1978*
substr                                                 builtin function         dcl 273 set ref 410 420 420* 424* 432* 767 773 784
                                                                                  797 810 823 867 1064 1067* 1067 1071 1074* 1074
                                                                                  1141 1141 1173 1176 1176 1362* 1364* 1410* 1448*
                                                                                  1448 1449* 1458* 1458 1470* 1470 1485* 1489* 1621
                                                                                  1621 1769 1769 1770 1770 1771 1771 1772 1772 1827
                                                                                  1851 1851 1854 1856 1884 1884 1887 1889
subtree                  76            based           bit(1)                   level 3 dcl 8-7 ref 1279 1769 1769
switches                 22            based           structure                level 2 dcl 5-30
tbf                             001447 automatic       varying char(32)         dcl 188 set ref 1231* 1232 1236* 1237 1241* 1242
temptr                                 based           pointer                  level 2 dcl 5-30 ref 410 420 420 424 432 1067 1074
                                                                                  1362 1364 1410 1448 1449 1458 1470 1485 1489
the_flag                               parameter       bit(1)                   packed unaligned dcl 1558 ref 1555 1561 1563
the_flag_str                           parameter       char                     packed unaligned dcl 1559 set ref 1555 1561* 1563
                                                                                  1565
time                            001460 automatic       varying char(64)         dcl 189 set ref 553* 560* 570* 1008* 1009* 1051*
                                                                                  1052* 1268* 1269* 1274* 1275* 1540* 1543 1653*
                                                                                  1655* 1705* 1707* 2003* 2005* 2020* 2022*
time_now                        001502 automatic       fixed bin(71,0)          dcl 190 set ref 305* 634 639 917
to_time                 104            based           fixed bin(71,0)          level 3 dcl 8-7 set ref 1272 1274* 2020*
top_label                              based           char                     level 2 dcl 3-20 set ref 1184 1186* 1192* 1954 1957*
top_label_lth           107            based           fixed bin(17,0)          level 2 dcl 3-20 ref 748 972 1184 1184 1184 1186
                                                                                  1186 1190 1192 1192 1197 1203 1251 1954 1957 1957
                                                                                  1960 1963 1984
total_for_user                  001504 automatic       fixed bin(17,0)          dcl 191 set ref 303* 464* 548* 548 610* 610 1351
total_selected                  001505 automatic       fixed bin(17,0)          dcl 192 set ref 303* 465* 547* 547 759* 759 837 875
                                                                                  1353 1360 1362 1371 1382* 1382 1388 1402 1423 1432
                                                                                  1445*
total_sw                 22(02)        based           bit(1)                   level 3 packed packed unaligned dcl 5-30 ref 415 458
                                                                                  550 833 1360 1371 1410
truncate                102(03)        based           bit(1)                   level 3 packed packed unaligned dcl 3-20 set ref
                                                                                  1223 1759*
truncate_absout         125(07)        based           bit(1)                   level 3 packed packed unaligned dcl 1-36 set ref
                                                                                  1046 1747*
unique_id                11     001516 automatic       bit(36)                  level 2 packed packed unaligned dcl 2-1 set ref 371
                                                                                  693
unspec                                                 builtin function         dcl 273 set ref 481* 552*
update                  172(11)        based           bit(1)                   level 4 packed packed unaligned dcl 4-16 set ref
                                                                                  1799* 1801
user_abs_attributes                    based           structure                level 1 dcl 9-25
user_deferred_indefinitely
                        125(05)        based           bit(1)                   level 3 packed packed unaligned dcl 1-36 ref 637 725
                                                                                  915 1055 1546
user_deferred_until_time
                        125(01)        based           bit(1)                   level 3 packed packed unaligned dcl 1-36 ref 634 917
                                                                                  1049 1535 1658
user_limit              126(05)        based           bit(1)                   level 3 packed packed unaligned dcl 1-36 ref 1531
user_matches                    001506 automatic       bit(1)                   dcl 193 set ref 577* 609* 610 664
user_select_count        20            based           fixed bin(17,0)          level 2 dcl 5-30 set ref 1351* 1351
user_sw                  22(03)        based           bit(1)                   level 3 packed packed unaligned dcl 5-30 ref 314 341
version                         000764 automatic       char(8)                  level 2 in structure "local_mseg_message_info"
                                                                                  dcl 152 in procedure "lar_util_" set ref 482*
version                  76            based           fixed bin(17,0)          level 2 in structure "dprint_msg" dcl 3-20
                                                                                  in procedure "lar_util_" ref 523 523 523 746 970
                                                                                  1201 1211 1764 1981
version                  76            based           char(8)                  level 3 in structure "ft_request" dcl 4-16
                                                                                  in procedure "lar_util_" ref 528
version                 102            based           fixed bin(17,0)          level 3 in structure "retv_request" dcl 8-7
                                                                                  in procedure "lar_util_" ref 514

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ABS_ATTRIBUTE_NAMES                    internal static varying char(28)         initial array dcl 9-38
FT_GENERIC_TYPE                        internal static char(32)                 initial packed unaligned dcl 4-40
FT_MESSAGE_TYPE                        internal static fixed bin(17,0)          initial dcl 4-41
MSEG_READ_BEFORE_SPECIFIED             internal static fixed bin(17,0)          initial dcl 6-30
MSEG_READ_DELETE                       internal static bit(36)                  initial dcl 6-38
MSEG_READ_LAST                         internal static fixed bin(17,0)          initial dcl 6-30
MSEG_READ_OWN                          internal static bit(36)                  initial dcl 6-38
MSEG_READ_SPECIFIED                    internal static fixed bin(17,0)          initial dcl 6-30
STATE_BUMPED                           internal static fixed bin(17,0)          initial dcl 7-46
STATE_DUPT                             internal static fixed bin(17,0)          initial dcl 7-47
STATE_RUNNING                          internal static fixed bin(17,0)          initial dcl 7-45
STATE_TRANSITION                       internal static fixed bin(17,0)          initial dcl 7-43
STATE_UNPROCESSED                      internal static fixed bin(17,0)          initial dcl 7-41
abs_keyword_index                      internal static fixed bin(17,0)          initial array dcl 5-96
abs_keywords                           internal static char(32)                 initial array packed unaligned dcl 5-96
com_keyword_index                      internal static fixed bin(17,0)          initial array dcl 5-96
com_keywords                           internal static char(32)                 initial array packed unaligned dcl 5-96
directory_type                         internal static bit(2)                   initial dcl 2-1
head_max_lth                           internal static fixed bin(17,0)          initial dcl 3-55
imft_keyword_index                     internal static fixed bin(17,0)          initial array dcl 5-96
imft_keywords                          internal static char(32)                 initial array packed unaligned dcl 5-96
label_max_lth                          internal static fixed bin(17,0)          initial dcl 3-55
link_type                              internal static bit(2)                   initial dcl 2-1
msf_type                               internal static bit(2)                   initial dcl 2-1
output_keyword_index                   internal static fixed bin(17,0)          initial array dcl 5-96
output_keywords                        internal static char(32)                 initial array packed unaligned dcl 5-96
path_max_lth                           internal static fixed bin(17,0)          initial dcl 3-55
retv_keyword_index                     internal static fixed bin(17,0)          initial array dcl 5-96
retv_keywords                          internal static char(32)                 initial array packed unaligned dcl 5-96
segment_type                           internal static bit(2)                   initial dcl 2-1

NAMES DECLARED BY EXPLICIT CONTEXT.
COMMON_INIT                     002422 constant        label                    dcl 299 ref 284
abs_buffer                      016604 constant        label                    dcl 1666 ref 1579 1585 1591 1597 1603 1609 1615 1633
                                                                                  1639 1643 1651 1656
abs_case                        000000 constant        label                    array(13) dcl 1577 ref 1575
buffer_abs_element              014520 constant        entry                    internal dcl 1570 ref 786
buffer_com_element              016606 constant        entry                    internal dcl 1673 ref 775
buffer_imft_element             023613 constant        entry                    internal dcl 2031 ref 825
buffer_output_element           021655 constant        entry                    internal dcl 1909 ref 799
buffer_retv_element             023171 constant        entry                    internal dcl 1996 ref 812
cleaner_up                      013713 constant        entry                    internal dcl 1506 ref 474
com_buffer                      021653 constant        label                    dcl 1901 ref 1687 1691 1695 1699 1703 1708 1726 1730
                                                                                  1734 1828
com_case                        000015 constant        label                    array(11) dcl 1680 set ref 1678
deferred_request                004174 constant        label                    dcl 650 ref 626 634 637 639 642 644
explain_abs_deferral            014033 constant        entry                    internal dcl 1520 ref 942 1016
fin                             013103 constant        label                    dcl 1344 ref 455 466
format_off_flags                021371 constant        label                    dcl 1867
frag_offs                       021415 constant        label                    dcl 1873 ref 1894
frag_ons                        021142 constant        label                    dcl 1840 ref 1861
imft_buffer                     024132 constant        label                    dcl 2055 ref 2042 2048
imft_case                       000047 constant        label                    array(3) dcl 2038 ref 2036
immediate_request               004177 constant        label                    dcl 655 ref 648
lar_util_                       002363 constant        entry                    external dcl 18
loop                            003300 constant        label                    dcl 499 ref 1325
mess_err                        013004 constant        label                    dcl 1331 ref 499
message_count                   003122 constant        label                    dcl 441 ref 396
out_buffer                      023167 constant        label                    dcl 1989 ref 1918 1922 1928 1934 1938 1945 1952 1958
                                                                                  1964 1979
out_case                        000030 constant        label                    array(11) dcl 1916 set ref 1914
put_buffer                      013570 constant        entry                    internal dcl 1467 ref 559 561 568 571 841 857 882
                                                                                  893 899 903 908 930 949 958 975 992 999 1004 1007
                                                                                  1010 1013 1015 1033 1053 1083 1088 1098 1104 1109
                                                                                  1114 1119 1127 1132 1137 1143 1159 1162 1167 1177
                                                                                  1182 1187 1193 1198 1207 1247 1252 1264 1270 1276
                                                                                  1288 1374 1623 1666 1849 1857 1863 1882 1890 1896
                                                                                  1901 1989 2024 2055
put_flag                        014330 constant        entry                    internal dcl 1555 ref 1736 1740 1741 1742 1743 1744
                                                                                  1745 1746 1747 1748 1749 1750 1754 1755 1756 1757
                                                                                  1758 1759 1760 1761 1762 1763 1764 1769 1770 1771
                                                                                  1772 1776 1777 1778 1779 1780 1781 1785 1786 1790
                                                                                  1791 1794 1795 1798 1799 1801 1803 1807 1808 1809
                                                                                  1813 1814 1815 1819 1820 1821
put_message                     013613 constant        entry                    internal dcl 1477 ref 399 557 854 877 920 943 980
                                                                                  988 1018 1037 1044 1046 1209 1211 1214 1322 1366
                                                                                  1523 1525 1527 1529 1531 1533 1537 1542 1543 1546
put_message_nl                  013675 constant        entry                    internal dcl 1493 ref 562 1055 1858 1864 1891 1897
putmsg                          013627 constant        label                    dcl 1483 ref 1499
request_info                    002403 constant        entry                    external dcl 286
retry_1                         003231 constant        label                    dcl 479 ref 492
retry_2                         012717 constant        label                    dcl 1303 ref 1316
return_code                     013102 constant        label                    dcl 1335 ref 368 447
retv_buffer                     023611 constant        label                    dcl 2024 ref 2006 2012 2018
retv_case                       000043 constant        label                    array(4) dcl 2003 ref 2001
skip                            012710 constant        label                    dcl 1295 ref 532 539 542 575 652 664 678 685 688 691
                                                                                  693 701 708 720 722 725 733 749 751 790 803 816
                                                                                  829 861
vrsn_ng                         003373 constant        label                    dcl 532 ref 511 517 522 527
vrsn_ok                         003727 constant        label                    dcl 577 ref 514 518 523 528
wrong_user                      004116 constant        label                    dcl 610 ref 585 587 589 598 600 602

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0     24644       24730   24345       24654
Length     25462   24345        64         515     277          10

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
lar_util_                          1678 external procedure  is an external procedure.  
on unit on line 474                  79 on unit               
put_buffer                              internal procedure  shares stack frame of external procedure lar_util_.  
put_message                          68 internal procedure  is called during a stack extension.  
cleaner_up                              internal procedure  shares stack frame of on unit on line 474.  
explain_abs_deferral                    internal procedure  shares stack frame of external procedure lar_util_.  
put_flag                                internal procedure  shares stack frame of external procedure lar_util_.  
buffer_abs_element                      internal procedure  shares stack frame of external procedure lar_util_.  
buffer_com_element                      internal procedure  shares stack frame of external procedure lar_util_.  
buffer_output_element                   internal procedure  shares stack frame of external procedure lar_util_.  
buffer_retv_element                     internal procedure  shares stack frame of external procedure lar_util_.  
buffer_imft_element                     internal procedure  shares stack frame of external procedure lar_util_.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 static_psn_s                lar_util_
000011 static_ll                   lar_util_
000012 static_header_position      lar_util_
000013 static_total_selected       lar_util_
000014 static_messcount            lar_util_
000015 static_deferred_count       lar_util_
000016 static_position             lar_util_

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
lar_util_                000100 abs_name                    lar_util_
                         000110 access_class                lar_util_
                         000112 aclass_string               lar_util_
                         000165 af_flag_str                 lar_util_
                         000366 afsw                        lar_util_
                         000367 agdd                        lar_util_
                         000441 agde                        lar_util_
                         000451 aguid                       lar_util_
                         000452 allsw                       lar_util_
                         000454 areap                       lar_util_
                         000456 argl                        lar_util_
                         000457 argx                        lar_util_
                         000460 auto_forms_name             lar_util_
                         000460 buffer                      lar_util_
                         000660 check_abs_name              lar_util_
                         000661 check_user                  lar_util_
                         000662 code                        lar_util_
                         000663 curarg_start                lar_util_
                         000664 deferred_abs                lar_util_
                         000665 deferred_count              lar_util_
                         000666 dirname                     lar_util_
                         000740 ename                       lar_util_
                         000750 expandedlen                 lar_util_
                         000751 expandlen                   lar_util_
                         000752 expandp                     lar_util_
                         000754 header_position             lar_util_
                         000755 i                           lar_util_
                         000756 j                           lar_util_
                         000757 last_comma                  lar_util_
                         000760 len                         lar_util_
                         000761 len_offset                  lar_util_
                         000762 ll                          lar_util_
                         000764 local_mseg_message_info     lar_util_
                         001016 long_id                     lar_util_
                         001017 messcount                   lar_util_
                         001020 modes                       lar_util_
                         001052 msg_time                    lar_util_
                         001054 n_bad_vrsn                  lar_util_
                         001055 no_totals                   lar_util_
                         001056 offs                        lar_util_
                         001157 offslen                     lar_util_
                         001160 old_ms_id                   lar_util_
                         001162 ons                         lar_util_
                         001263 onslen                      lar_util_
                         001264 pass1                       lar_util_
                         001265 person                      lar_util_
                         001275 position                    lar_util_
                         001276 print_requests              lar_util_
                         001277 print_user_column           lar_util_
                         001300 project                     lar_util_
                         001310 psn_ll                      lar_util_
                         001311 psn_s                       lar_util_
                         001312 queue_string                lar_util_
                         001322 read_all                    lar_util_
                         001324 reqp                        lar_util_
                         001326 retrying                    lar_util_
                         001327 rqdd                        lar_util_
                         001401 rqde                        lar_util_
                         001411 rqid                        lar_util_
                         001416 rqi_buffered                lar_util_
                         001417 rqi_sw                      lar_util_
                         001420 rs_len                      lar_util_
                         001421 s                           lar_util_
                         001422 scrunchedp                  lar_util_
                         001424 select_sw                   lar_util_
                         001425 sender_id                   lar_util_
                         001435 state                       lar_util_
                         001436 str                         lar_util_
                         001447 tbf                         lar_util_
                         001460 time                        lar_util_
                         001502 time_now                    lar_util_
                         001504 total_for_user              lar_util_
                         001505 total_selected              lar_util_
                         001506 user_matches                lar_util_
                         001516 branch_status               lar_util_
                         001530 dmp                         lar_util_
                         001532 ft_request_ptr              lar_util_
                         001534 info_ptr                    lar_util_
                         001536 mseg_message_info_ptr       lar_util_
                         001540 requestp                    lar_util_
put_message              000100 nlsw                        put_message

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_g_a               r_e_as              r_ne_as             alloc_char_temp     cat_realloc_chars   call_ext_out_desc
call_ext_out        call_int_this_desc  return_mac          alloc_auto_adj      enable_op           shorten_stack
ext_entry           int_entry           int_entry_desc      set_chars_eis       index_chars_eis     op_alloc_
op_freen_           clock_mac

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
aim_check_$greater            convert_authorization_$to_string_short                      date_time_$format
expand_pathname_              get_group_id_                 get_line_length_              get_system_free_area_
hcs_$status_long              ioa_$rs                       ioa_$rsnnl                    match_request_id_
match_star_name_              message_segment_$get_message_count_index
message_segment_$read_message_index                         request_id_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$bad_segment      error_table_$moderr           error_table_$no_message




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
    132 002334       974 002344      1206 002347      1987 002352        18 002357       282 002374       283 002375
    284 002376       286 002377       296 002414       297 002420       299 002422       301 002426       302 002427
    303 002431       305 002437       309 002441       312 002447       314 002450       315 002454       319 002473
    325 002502       331 002521       335 002522       337 002534       341 002535       344 002545       348 002546
    350 002550       351 002553       352 002556       353 002557       357 002563       358 002572       359 002615
    360 002625       365 002627       367 002633       368 002663       370 002665       371 002727       373 002734
    378 002735       379 002736       382 002766       383 003002       394 003005       396 003010       399 003012
    403 003024       405 003036       406 003040       407 003042       410 003044       415 003057       417 003065
    418 003067       419 003071       420 003072       424 003102       426 003106       429 003107       430 003111
    432 003113       435 003120       441 003122       443 003123       444 003136       446 003140       447 003141
    450 003144       451 003145       452 003147       454 003152       455 003153       458 003155       464 003171
    465 003173       466 003174       471 003175       472 003204       473 003206       474 003212       478 003230
    479 003231       481 003235       482 003240       483 003242       484 003247       485 003251       487 003267
    491 003275       492 003277       499 003300       502 003302       504 003310       505 003314       511 003317
    514 003323       517 003333       518 003334       522 003345       523 003346       527 003362       528 003363
    532 003373       535 003377       537 003400       539 003402       542 003417       547 003447       548 003450
    550 003451       552 003455       553 003460       555 003525       557 003531       558 003541       559 003572
    560 003573       561 003626       562 003627       563 003642       565 003643       567 003645       568 003674
    570 003675       571 003725       575 003726       577 003727       579 003730       581 003732       583 003736
    585 003750       587 003753       589 003756       594 004007       596 004013       598 004040       600 004043
    602 004046       609 004114       610 004116       624 004121       626 004130       630 004140       632 004143
    634 004146       637 004154       639 004157       642 004165       644 004170       648 004173       650 004174
    652 004175       658 004177       664 004200       669 004202       670 004205       671 004210       672 004212
    673 004214       678 004222       682 004254       685 004264       687 004266       688 004312       690 004314
    691 004356       693 004360       697 004363       700 004373       701 004417       705 004423       707 004427
    708 004447       716 004451       718 004455       720 004460       722 004463       725 004511       728 004523
    732 004560       733 004614       742 004617       744 004623       746 004626       748 004654       749 004712
    751 004714       759 004742       763 004743       764 004744       765 004747       767 004751       769 004755
    770 004757       772 004762       773 004767       775 004774       776 004776       778 005000       779 005002
    781 005006       783 005012       784 005017       786 005024       787 005026       789 005030       790 005032
    792 005033       794 005037       796 005043       797 005051       799 005056       800 005060       802 005062
    803 005064       805 005065       807 005067       809 005073       810 005101       812 005106       813 005110
    815 005112       816 005114       818 005115       820 005117       822 005123       823 005131       825 005136
    826 005140       828 005142       829 005144       833 005145       835 005150       837 005153       839 005160
    840 005163       841 005212       842 005213       843 005215       845 005243       847 005247       849 005254
    851 005255       852 005302       854 005306       855 005316       857 005317       858 005320       861 005322
    866 005323       867 005334       872 005342       875 005346       877 005353       878 005363       880 005365
    882 005440       889 005441       891 005443       893 005472       896 005473       898 005477       899 005525
    902 005526       903 005555       905 005556       907 005631       908 005660       910 005661       911 005662
    913 005666       915 005673       917 005702       920 005712       924 005727       926 005731       928 005735
    930 006010       936 006011       938 006015       940 006020       942 006025       943 006026       946 006040
    948 006043       949 006124       953 006125       955 006131       957 006164       958 006234       964 006235
    966 006241       968 006244       970 006247       972 006275       973 006333       974 006346       975 006413
    980 006414       982 006424       988 006425       989 006435       991 006437       992 006470       994 006471
    995 006474       996 006515       998 006521       999 006554      1001 006555      1003 006561      1004 006610
   1006 006611      1007 006641      1008 006642      1009 006707      1010 006742      1011 006743      1013 007020
   1014 007021      1015 007054      1016 007055      1018 007065      1024 007075      1029 007101      1031 007112
   1032 007116      1033 007151      1037 007152      1039 007166      1044 007172      1046 007205      1049 007221
   1051 007225      1052 007272      1053 007322      1055 007323      1057 007342      1059 007345      1060 007350
   1061 007357      1062 007366      1063 007446      1064 007450      1065 007471      1066 007527      1067 007532
   1068 007550      1069 007552      1070 007563      1071 007644      1072 007672      1073 007727      1074 007732
   1075 007750      1076 007752      1077 007754      1078 007762      1080 007764      1082 007767      1083 010017
   1085 010020      1087 010023      1088 010063      1090 010064      1092 010103      1093 010106      1095 010130
   1097 010134      1098 010164      1101 010165      1103 010170      1104 010233      1106 010234      1108 010237
   1109 010307      1111 010310      1113 010313      1114 010371      1116 010372      1118 010375      1119 010460
   1121 010461      1123 010465      1125 010470      1126 010474      1127 010527      1129 010530      1131 010534
   1132 010563      1134 010564      1136 010567      1137 010657      1139 010660      1141 010663      1143 010771
   1146 010773      1150 010774      1155 011000      1158 011007      1159 011041      1161 011042      1162 011073
   1163 011074      1165 011105      1166 011111      1167 011142      1171 011143      1173 011151      1175 011161
   1176 011163      1177 011230      1179 011232      1181 011237      1182 011272      1184 011273      1186 011323
   1187 011356      1188 011357      1190 011360      1192 011362      1193 011415      1195 011416      1197 011421
   1198 011464      1201 011465      1203 011513      1204 011551      1206 011557      1207 011611      1209 011612
   1211 011626      1214 011645      1216 011661      1217 011662      1219 011700      1221 011715      1223 011732
   1225 011747      1227 011764      1229 012001      1231 012003      1232 012037      1234 012051      1236 012054
   1237 012113      1239 012125      1241 012130      1242 012166      1244 012200      1246 012205      1247 012236
   1249 012237      1251 012242      1252 012315      1254 012316      1258 012317      1260 012321      1262 012326
   1264 012373      1266 012374      1268 012377      1269 012444      1270 012475      1272 012476      1274 012503
   1275 012550      1276 012601      1278 012602      1279 012603      1281 012620      1283 012635      1285 012651
   1287 012656      1288 012707      1295 012710      1300 012712      1302 012716      1303 012717      1305 012723
   1306 012726      1307 012730      1309 012735      1311 012753      1315 012761      1316 012763      1319 012764
   1321 012772      1322 012773      1325 013003      1331 013004      1335 013075      1344 013103      1347 013105
   1348 013110      1351 013111      1353 013114      1355 013116      1360 013120      1362 013126      1364 013135
   1366 013142      1371 013152      1373 013162      1374 013211      1379 013212      1381 013226      1382 013230
   1388 013232      1398 013266      1400 013272      1402 013275      1403 013277      1404 013301      1405 013303
   1406 013305      1407 013307      1410 013311      1414 013326      1422 013330      1423 013332      1432 013347
   1434 013355      1435 013357      1437 013366      1440 013374      1442 013377      1443 013401      1445 013406
   1447 013462      1448 013464      1449 013473      1450 013477      1452 013501      1453 013503      1455 013511
   1456 013513      1458 013560      1462 013567      1467 013570      1469 013571      1470 013574      1471 013611
   1477 013612      1482 013626      1483 013627      1485 013633      1486 013655      1488 013657      1489 013662
   1491 013673      1493 013674      1498 013710      1499 013712      1506 013713      1508 013714      1510 014006
   1512 014020      1515 014032      1520 014033      1523 014034      1525 014054      1527 014073      1529 014112
   1531 014131      1533 014150      1535 014167      1537 014172      1538 014204      1540 014210      1542 014255
   1543 014267      1544 014307      1545 014310      1546 014311      1549 014327      1555 014330      1561 014341
   1563 014416      1565 014461      1566 014516      1570 014520      1575 014522      1577 014524      1579 014564
   1581 014565      1584 014634      1585 014677      1587 014700      1590 014755      1591 015020      1593 015021
   1596 015103      1597 015146      1599 015147      1602 015236      1603 015301      1605 015302      1608 015376
   1609 015441      1611 015442      1614 015445      1615 015500      1618 015501      1619 015503      1620 015513
   1621 015574      1623 015672      1624 015674      1625 015676      1627 015700      1629 015701      1632 016002
   1633 016045      1635 016046      1638 016154      1639 016217      1641 016220      1643 016257      1645 016260
   1647 016263      1648 016305      1650 016351      1651 016404      1653 016405      1655 016453      1656 016512
   1658 016513      1661 016530      1663 016541      1664 016545      1666 016604      1668 016605      1673 016606
   1678 016610      1680 016612      1682 016614      1684 016615      1686 016626      1687 016665      1689 016666
   1691 016725      1693 016726      1695 016764      1697 016765      1699 017025      1701 017026      1703 017066
   1705 017067      1707 017134      1708 017173      1711 017174      1713 017201      1715 017212      1717 017222
   1719 017232      1721 017241      1723 017251      1725 017257      1726 017316      1728 017317      1730 017356
   1732 017357      1734 017421      1736 017422      1738 017443      1740 017447      1741 017466      1742 017507
   1743 017530      1744 017551      1745 017575      1746 017616      1747 017641      1748 017662      1749 017706
   1750 017731      1751 017755      1752 017756      1754 017762      1755 020001      1756 020022      1757 020043
   1758 020064      1759 020110      1760 020133      1761 020154      1762 020177      1763 020222      1764 020245
   1766 020274      1767 020275      1769 020277      1770 020307      1771 020317      1772 020327      1773 020337
   1774 020340      1776 020342      1777 020363      1778 020403      1779 020430      1780 020453      1781 020474
   1783 020515      1785 020524      1786 020536      1787 020547      1788 020550      1790 020552      1791 020564
   1792 020575      1794 020576      1795 020610      1798 020621      1799 020642      1801 020663      1803 020677
   1805 020706      1807 020715      1808 020727      1809 020740      1810 020751      1811 020752      1813 020754
   1814 020766      1815 020777      1816 021010      1817 021011      1819 021013      1820 021025      1821 021036
   1824 021047      1826 021051      1827 021053      1828 021056      1830 021057      1831 021105      1833 021111
   1835 021116      1836 021120      1837 021121      1839 021126      1840 021142      1843 021224      1845 021226
   1847 021240      1849 021247      1851 021250      1852 021311      1854 021317      1855 021336      1856 021340
   1857 021343      1858 021344      1859 021354      1860 021356      1861 021357      1863 021360      1864 021361
   1867 021371      1869 021373      1870 021374      1872 021401      1873 021415      1876 021505      1878 021507
   1880 021521      1882 021530      1884 021531      1885 021572      1887 021600      1888 021617      1889 021621
   1890 021624      1891 021625      1892 021635      1893 021637      1894 021640      1896 021641      1897 021642
   1899 021652      1901 021653      1903 021654      1909 021655      1914 021657      1916 021661      1918 021721
   1920 021722      1922 021761      1924 021762      1927 022023      1928 022062      1930 022063      1933 022125
   1934 022167      1936 022170      1938 022227      1940 022230      1943 022242      1944 022270      1945 022327
   1947 022330      1950 022342      1951 022370      1952 022427      1954 022430      1957 022477      1958 022542
   1960 022543      1963 022620      1964 022663      1966 022664      1968 022671      1970 022703      1972 022713
   1974 022723      1976 022733      1978 022742      1979 023001      1981 023002      1984 023030      1985 023066
   1987 023130      1989 023167      1991 023170      1996 023171      2001 023173      2003 023175      2005 023243
   2006 023302      2008 023303      2011 023344      2012 023403      2014 023404      2017 023445      2018 023503
   2020 023504      2022 023552      2024 023611      2026 023612      2031 023613      2036 023615      2038 023617
   2041 023663      2042 023722      2044 023723      2047 023767      2048 024026      2050 024027      2053 024073
   2055 024132      2057 024133


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
