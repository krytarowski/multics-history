	COMPILATION LISTING OF SEGMENT have_queue_entries
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 09/11/84  1318.1 mst Tue
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 
        7 
        8 /* Returns "true" if there are messages in the specified message segment */
        9 
       10 /* Created:  September 1982 by G. Palter */
       11 /* Modified:  July 1984 by Jim Lippard to accept starnames and multiple
       12*   paths */
       13 
       14 /* format: style4,delnl,insnl,ifthenstmt,ifthen */
       15 
       16 
       17 have_queue_entries:
       18      procedure () options (variable);
       19 
       20 
       21 dcl  code fixed binary (35);
       22 
       23 dcl  active_function bit (1) aligned;			/*  ON => invoked as an active function */
       24 
       25 dcl  complain entry () options (variable) variable;
       26 dcl  get_argument entry (fixed binary, pointer, fixed binary (21), fixed binary (35)) variable;
       27 
       28 dcl  n_arguments fixed binary;
       29 
       30 dcl  return_value character (return_value_max_lth) varying based (return_value_ptr);
       31 dcl  return_value_max_lth fixed binary (21);
       32 dcl  return_value_ptr pointer;
       33 
       34 dcl  argument character (argument_lth) unaligned based (argument_ptr);
       35 dcl  argument_lth fixed binary (21);
       36 dcl  argument_ptr pointer;
       37 
       38 dcl  file_dname character (168);			/* dir/entryname of the message-segment */
       39 dcl  file_ename character (32);
       40 dcl  file_index fixed binary;				/* message-segment index of above */
       41 dcl  message_count fixed binary;			/* # of messages in it */
       42 
       43 dcl  multiple_paths bit (1) aligned;			/* ON => if any starnames or more than one path */
       44 
       45 dcl  (arg_index, name_index) fixed binary;
       46 
       47 dcl  HAVE_QUEUE_ENTRIES character (32) static options (constant) initial ("have_queue_entries");
       48 
       49 /* format: off */
       50 dcl (active_fnc_err_, active_fnc_err_$suppress_name, com_err_, com_err_$suppress_name)
       51 	entry () options (variable);
       52 /* format: on */
       53 
       54 dcl  check_star_name_$path entry (character (*), fixed binary (35));
       55 dcl  cu_$af_arg_ptr entry (fixed binary, pointer, fixed binary (21), fixed binary (35));
       56 dcl  cu_$af_return_arg entry (fixed binary, pointer, fixed binary (21), fixed binary (35));
       57 dcl  cu_$arg_ptr entry (fixed binary, pointer, fixed binary (21), fixed binary (35));
       58 dcl  expand_pathname_$add_suffix entry (character (*), character (*), character (*), character (*), fixed binary (35));
       59 dcl  get_system_free_area_ entry () returns (pointer);
       60 dcl  hcs_$star_
       61 	entry (character (*), character (*), fixed binary (2), pointer, fixed binary, pointer, pointer,
       62 	fixed binary (35));
       63 dcl  ioa_ entry () options (variable);
       64 dcl  message_segment_$close entry (fixed binary, fixed binary (35));
       65 dcl  message_segment_$get_message_count_index entry (fixed binary, fixed binary, fixed binary (35));
       66 dcl  message_segment_$open entry (character (*), character (*), fixed binary, fixed binary (35));
       67 dcl  pathname_ entry (character (*), character (*)) returns (character (168));
       68 
       69 /* format: off */
       70 dcl (error_table_$badopt, error_table_$badstar, error_table_$not_act_fnc)
       71 	fixed binary (35) external;
       72 /* format: on */
       73 
       74 dcl  (index, null, sum) builtin;
       75 
       76 dcl  cleanup condition;
       77 
       78 /* have_queue_entries: entry () options (variable) */
       79 
       80 	call cu_$af_return_arg (n_arguments, return_value_ptr, return_value_max_lth, code);
       81 
       82 	if code = 0 then do;
       83 	     active_function = "1"b;
       84 	     complain = active_fnc_err_;
       85 	     get_argument = cu_$af_arg_ptr;
       86 	     return_value = "false";			/* in case of error be sure to return something */
       87 	end;
       88 
       89 	else if code = error_table_$not_act_fnc then do;
       90 	     active_function = "0"b;
       91 	     complain = com_err_;
       92 	     get_argument = cu_$arg_ptr;
       93 	end;
       94 
       95 	else do;
       96 	     call com_err_ (code, HAVE_QUEUE_ENTRIES, "Determining type of call.");
       97 	     return;
       98 	end;
       99 
      100 	if n_arguments = 0 then do;			/* must have a pathname */
      101 	     if active_function then
      102 		call active_fnc_err_$suppress_name (0, HAVE_QUEUE_ENTRIES, "Usage:  [have_queue_entries starnames]");
      103 	     else call com_err_$suppress_name (0, HAVE_QUEUE_ENTRIES, "Usage:  have_queue_entries starnames");
      104 	     return;
      105 	end;
      106 
      107 	if n_arguments > 1 then multiple_paths = "1"b;	/* more than one pathname */
      108 
      109 	do arg_index = 1 to n_arguments;
      110 	     call get_argument (arg_index, argument_ptr, argument_lth, code);
      111 	     if code ^= 0 then do;
      112 		call complain (code, HAVE_QUEUE_ENTRIES, "Fetching argument #^d.", arg_index);
      113 		return;
      114 	     end;
      115 
      116 	     if index (argument, "-") = 1 then do;	/* can't be a control argument */
      117 		call complain (error_table_$badopt, HAVE_QUEUE_ENTRIES, """^a""", argument);
      118 		return;
      119 	     end;
      120 
      121 	     else do;				/* the pathname */
      122 		call expand_pathname_$add_suffix (argument, "ms", file_dname, file_ename, code);
      123 		if code ^= 0 then do;
      124 		     call complain (code, HAVE_QUEUE_ENTRIES, "^a", argument);
      125 		     return;
      126 		end;
      127 
      128 		call check_star_name_$path (argument, code);
      129 		if code = error_table_$badstar then do;
      130 		     call complain (code, HAVE_QUEUE_ENTRIES, "^a", argument);
      131 		     return;
      132 		end;
      133 		else if code ^= 0 then do;		/* a star name */
      134 		     star_names_ptr, star_entry_ptr = null ();
      135 		     on condition (cleanup) call free_star_structures ();
      136 		     call hcs_$star_ (file_dname, file_ename, star_ALL_ENTRIES, get_system_free_area_ (),
      137 			star_entry_count, star_entry_ptr, star_names_ptr, code);
      138 		     if code ^= 0 then do;
      139 			call complain (code, HAVE_QUEUE_ENTRIES, "^a", pathname_ (file_dname, file_ename));
      140 			return;
      141 		     end;
      142 
      143 		     do name_index = 1 to star_entry_count;
      144 			call get_message_count (file_dname, star_names (star_entries.nindex (name_index)), message_count,
      145 			     code);
      146 			if code ^= 0 then do;
      147 			     call complain (code, HAVE_QUEUE_ENTRIES, "^a",
      148 				pathname_ (file_dname, star_names (star_entries.nindex (name_index))));
      149 			     call free_star_structures ();
      150 			     return;
      151 			end;
      152 			if (message_count = 0) then
      153 			     if active_function then
      154 				;
      155 			     else call ioa_ ("No messages in ^a.",
      156 				     pathname_ (file_dname, star_names (star_entries.nindex (name_index))));
      157 			else if active_function then return_value = "true";
      158 			else call ioa_ ("There are messages in ^a.",
      159 				pathname_ (file_dname, star_names (star_entries.nindex (name_index))));
      160 		     end;				/* star entries loop */
      161 		     call free_star_structures ();
      162 		end;				/* a star name */
      163 		else do;				/* a path name */
      164 		     call get_message_count (file_dname, file_ename, message_count, code);
      165 		     if code ^= 0 then do;
      166 			call complain (code, HAVE_QUEUE_ENTRIES, "^a", pathname_ (file_dname, file_ename));
      167 			return;
      168 		     end;
      169 		     if (message_count = 0) then
      170 			if active_function then
      171 			     ;
      172 			else call ioa_ ("No messages^[ in ^a^].", multiple_paths,
      173 				pathname_ (file_dname, file_ename));
      174 		     else if active_function then return_value = "true";
      175 		     else call ioa_ ("There are messages^[ in ^a^].", multiple_paths,
      176 			     pathname_ (file_dname, file_ename));
      177 		end;				/* a path name */
      178 	     end;
      179 	end;					/* argument loop */
      180 
      181 	return;
      182 
      183 
      184 
      185 get_message_count:
      186      procedure (P_file_dname, P_file_ename, P_message_count, P_code);
      187 dcl  (P_file_dname, P_file_ename) character (*) parameter;
      188 dcl  P_message_count fixed binary parameter;
      189 dcl  P_code fixed binary (35) parameter;
      190 
      191 	P_code = 0;
      192 
      193 /* Actual processing */
      194 
      195 	call message_segment_$open (P_file_dname, P_file_ename, file_index, code);
      196 	if code ^= 0 then do;
      197 	     P_code = code;
      198 	     return;
      199 	end;
      200 
      201 	on condition (cleanup)			/* if here the mailbox/message-segment is opened */
      202 	     call message_segment_$close (file_index, (0));
      203 
      204 	call message_segment_$get_message_count_index (file_index, P_message_count, code);
      205 	if code ^= 0 then do;
      206 	     P_code = code;
      207 	     call message_segment_$close (file_index, (0));
      208 	     return;
      209 	end;
      210 
      211 	call message_segment_$close (file_index, (0));
      212      end get_message_count;
      213 
      214 
      215 
      216 free_star_structures:
      217      procedure;
      218 	if star_names_ptr ^= null () then free star_names;/* in system free area */
      219 	if star_entry_ptr ^= null () then free star_entries;
      220 						/* in system free area */
      221      end free_star_structures;
      222 
      223 
  1     1 /* BEGIN INCLUDE FILE . . . star_structures.incl.pl1 */
  1     2 
  1     3 /* This include file contains structures for the hcs_$star_,
  1     4*   hcs_$star_list_ and hcs_$star_dir_list_ entry points.
  1     5*
  1     6*   Written 23 October 1978 by Monte Davidoff.
  1     7*   Modified January 1979 by Michael R. Jordan to use unsigned and different pointers for different structures.
  1     8*   Modified June 1981 by C. Hornig to count link pathnames more efficiently.
  1     9**/
  1    10 
  1    11 /* automatic */
  1    12 
  1    13 declare  star_branch_count fixed binary;		/* hcs_$star_list_, hcs_$star_dir_list_: matching branch count */
  1    14 declare  star_entry_count fixed binary;			/* hcs_$star_: number of matching entries */
  1    15 declare  star_entry_ptr pointer;			/* hcs_$star_: pointer to array of entry information */
  1    16 declare  star_list_branch_ptr pointer;			/* hcs_$star_list_, hcs_$star_dir_list_: ptr to array of info */
  1    17 declare  star_link_count fixed binary;			/* hcs_$star_list_, hcs_$star_dir_list_: matching link count */
  1    18 declare  star_linkx fixed binary;			/* hcs_$star_list_, hcs_$star_dir_list_: index into star_links */
  1    19 declare  star_names_ptr pointer;			/* hcs_$star_: pointer to array of entry names */
  1    20 declare  star_list_names_ptr pointer;			/* hcs_$star_list_, hcs_$star_dir_list_: ptr to entry names */
  1    21 declare  star_select_sw fixed binary (3);		/* hcs_$star_list_, hcs_$star_dir_list_: what info to return */
  1    22 
  1    23 /* based */
  1    24 
  1    25 /* hcs_$star_ entry structure */
  1    26 
  1    27 declare 1 star_entries (star_entry_count) aligned based (star_entry_ptr),
  1    28         2 type fixed binary (2) unsigned unaligned,
  1    29 						/* storage system type */
  1    30         2 nnames fixed binary (16) unsigned unaligned,
  1    31 						/* number of names of entry that match star_name */
  1    32         2 nindex fixed binary (18) unsigned unaligned;
  1    33 						/* index of first name in star_names */
  1    34 
  1    35 /* hcs_$star_ name structure */
  1    36 
  1    37 declare  star_names (sum (star_entries (*).nnames)) char (32) based (star_names_ptr);
  1    38 
  1    39 /* hcs_$star_list_ branch structure */
  1    40 
  1    41 declare 1 star_list_branch (star_branch_count + star_link_count) aligned based (star_list_branch_ptr),
  1    42         2 type fixed binary (2) unsigned unaligned,
  1    43 						/* storage system type */
  1    44         2 nnames fixed binary (16) unsigned unaligned,
  1    45 						/* number of names of entry that match star_name */
  1    46         2 nindex fixed binary (18) unsigned unaligned,
  1    47 						/* index of first name in star_list_names */
  1    48         2 dtcm bit (36) unaligned,			/* date-time contents of branch were last modified */
  1    49         2 dtu bit (36) unaligned,			/* date-time branch was last used */
  1    50         2 mode bit (5) unaligned,			/* user's access mode to the branch */
  1    51         2 raw_mode bit (5) unaligned,			/* user's ACL access mode */
  1    52         2 master_dir bit (1) unaligned,			/* is branch a master directory */
  1    53         2 pad bit (7) unaligned,
  1    54         2 records fixed binary (18) unsigned unaligned;
  1    55 						/* records used by branch */
  1    56 
  1    57 /* hcs_$star_dir_list_ branch structure */
  1    58 
  1    59 declare 1 star_dir_list_branch (star_branch_count + star_link_count) aligned based (star_list_branch_ptr),
  1    60         2 type fixed binary (2) unsigned unaligned,
  1    61 						/* storage system type */
  1    62         2 nnames fixed binary (16) unsigned unaligned,
  1    63 						/* number of names of entry that match star_name */
  1    64         2 nindex fixed binary (18) unsigned unaligned,
  1    65 						/* index of first name in star_list_names */
  1    66         2 dtem bit (36) unaligned,			/* date-time directory entry of branch was last modified */
  1    67         2 pad bit (36) unaligned,
  1    68         2 mode bit (5) unaligned,			/* user's access mode to the branch */
  1    69         2 raw_mode bit (5) unaligned,			/* user's ACL access mode */
  1    70         2 master_dir bit (1) unaligned,			/* is branch a master directory */
  1    71         2 bit_count fixed binary (24) unaligned;
  1    72 						/* bit count of the branch */
  1    73 
  1    74 /* hcs_$star_list_ and hcs_$star_dir_list_ link structure */
  1    75 
  1    76 declare 1 star_links (star_branch_count + star_link_count) aligned based (star_list_branch_ptr),
  1    77         2 type fixed binary (2) unsigned unaligned,
  1    78 						/* storage system type */
  1    79         2 nnames fixed binary (16) unsigned unaligned,
  1    80 						/* number of names of entry that match star_name */
  1    81         2 nindex fixed binary (18) unsigned unaligned,
  1    82 						/* index of first name in star_list_names */
  1    83         2 dtem bit (36) unaligned,			/* date-time link was last modified */
  1    84         2 dtd bit (36) unaligned,			/* date-time the link was last dumped */
  1    85         2 pathname_len fixed binary (18) unsigned unaligned,
  1    86 						/* length of the pathname of the link */
  1    87         2 pathname_index fixed binary (18) unsigned unaligned;
  1    88 						/* index of start of pathname in star_list_names */
  1    89 
  1    90 /* hcs_$star_list_ and hcs_$star_dir_list_ name array */
  1    91 
  1    92 declare  star_list_names char (32) based (star_list_names_ptr)
  1    93 	dimension (star_links (star_branch_count + star_link_count).nindex
  1    94 	 + star_links (star_branch_count + star_link_count).nnames
  1    95 	 + divide (star_links (star_branch_count + star_link_count).pathname_len + 31, 32, 17, 0)
  1    96 	   * binary (
  1    97 	     (star_links (star_branch_count + star_link_count).type = star_LINK)
  1    98 	     & (star_select_sw >= star_LINKS_ONLY_WITH_LINK_PATHS), 1));
  1    99 
  1   100 /* hcs_$star_list_ and hcs_$star_dir_list_ link pathname */
  1   101 
  1   102 declare  star_link_pathname char (star_links (star_linkx).pathname_len)
  1   103          based (addr (star_list_names (star_links (star_linkx).pathname_index)));
  1   104 
  1   105 /* internal static */
  1   106 
  1   107 /* star_select_sw values */
  1   108 
  1   109 declare  star_LINKS_ONLY fixed binary (2) internal static options (constant) initial (1);
  1   110 declare  star_BRANCHES_ONLY fixed binary (2) internal static options (constant) initial (2);
  1   111 declare  star_ALL_ENTRIES fixed binary (2) internal static options (constant) initial (3);
  1   112 declare  star_LINKS_ONLY_WITH_LINK_PATHS
  1   113          fixed binary (3) internal static options (constant) initial (5);
  1   114 declare  star_ALL_ENTRIES_WITH_LINK_PATHS
  1   115          fixed binary (3) internal static options (constant) initial (7);
  1   116 
  1   117 /* storage system types */
  1   118 
  1   119 declare  star_LINK fixed binary (2) unsigned internal static options (constant) initial (0);
  1   120 declare  star_SEGMENT fixed binary (2) unsigned internal static options (constant) initial (1);
  1   121 declare  star_DIRECTORY fixed binary (2) unsigned internal static options (constant) initial (2);
  1   122 
  1   123 /* END INCLUDE FILE . . . star_structures.incl.pl1 */
      224 
      225 
      226      end have_queue_entries;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    09/11/84  1317.2  have_queue_entries.pl1            >special_ldd>on>6900-09/11/84>have_queue_entries.pl1
224          1    06/10/82  1045.5  star_structures.incl.pl1          >ldd>include>star_structures.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
HAVE_QUEUE_ENTRIES              000000 constant        char(32)                 initial unaligned dcl 47 set ref 96* 101* 103* 112*
                                                                                  117* 124* 130* 139* 147* 166*
P_code                                 parameter       fixed bin(35,0)          dcl 189 set ref 185 191* 197* 206*
P_file_dname                           parameter       char                     unaligned dcl 187 set ref 185 195*
P_file_ename                           parameter       char                     unaligned dcl 187 set ref 185 195*
P_message_count                        parameter       fixed bin(17,0)          dcl 188 set ref 185 204*
active_fnc_err_                 000010 constant        entry                    external dcl 50 ref 84
active_fnc_err_$suppress_name   000012 constant        entry                    external dcl 50 ref 101
active_function                 000101 automatic       bit(1)                   dcl 23 set ref 83* 90* 101 152 157 169 174
arg_index                       000207 automatic       fixed bin(17,0)          dcl 45 set ref 109* 110* 112*
argument                               based           char                     unaligned dcl 34 set ref 116 117* 122* 124* 128*
                                                                                  130*
argument_lth                    000116 automatic       fixed bin(21,0)          dcl 35 set ref 110* 116 117 117 122 122 124 124 128
                                                                                  128 130 130
argument_ptr                    000120 automatic       pointer                  dcl 36 set ref 110* 116 117 122 124 128 130
check_star_name_$path           000020 constant        entry                    external dcl 54 ref 128
cleanup                         000212 stack reference condition                dcl 76 ref 135 201
code                            000100 automatic       fixed bin(35,0)          dcl 21 set ref 80* 82 89 96* 110* 111 112* 122* 123
                                                                                  124* 128* 129 130* 133 136* 138 139* 144* 146 147*
                                                                                  164* 165 166* 195* 196 197 204* 205 206
com_err_                        000014 constant        entry                    external dcl 50 ref 91 96
com_err_$suppress_name          000016 constant        entry                    external dcl 50 ref 103
complain                        000102 automatic       entry variable           dcl 25 set ref 84* 91* 112 117 124 130 139 147 166
cu_$af_arg_ptr                  000022 constant        entry                    external dcl 55 ref 85
cu_$af_return_arg               000024 constant        entry                    external dcl 56 ref 80
cu_$arg_ptr                     000026 constant        entry                    external dcl 57 ref 92
error_table_$badopt             000050 external static fixed bin(35,0)          dcl 70 set ref 117*
error_table_$badstar            000052 external static fixed bin(35,0)          dcl 70 ref 129
error_table_$not_act_fnc        000054 external static fixed bin(35,0)          dcl 70 ref 89
expand_pathname_$add_suffix     000030 constant        entry                    external dcl 58 ref 122
file_dname                      000122 automatic       char(168)                unaligned dcl 38 set ref 122* 136* 139* 139* 144*
                                                                                  147* 147* 155* 155* 158* 158* 164* 166* 166* 172*
                                                                                  172* 175* 175*
file_ename                      000174 automatic       char(32)                 unaligned dcl 39 set ref 122* 136* 139* 139* 164*
                                                                                  166* 166* 172* 172* 175* 175*
file_index                      000204 automatic       fixed bin(17,0)          dcl 40 set ref 195* 201* 204* 207* 211*
get_argument                    000106 automatic       entry variable           dcl 26 set ref 85* 92* 110
get_system_free_area_           000032 constant        entry                    external dcl 59 ref 136 136
hcs_$star_                      000034 constant        entry                    external dcl 60 ref 136
index                                                  builtin function         dcl 74 ref 116
ioa_                            000036 constant        entry                    external dcl 63 ref 155 158 172 175
message_count                   000205 automatic       fixed bin(17,0)          dcl 41 set ref 144* 152 164* 169
message_segment_$close          000040 constant        entry                    external dcl 64 ref 201 207 211
message_segment_$get_message_count_index
                                000042 constant        entry                    external dcl 65 ref 204
message_segment_$open           000044 constant        entry                    external dcl 66 ref 195
multiple_paths                  000206 automatic       bit(1)                   dcl 43 set ref 107* 172* 175*
n_arguments                     000112 automatic       fixed bin(17,0)          dcl 28 set ref 80* 100 107 109
name_index                      000210 automatic       fixed bin(17,0)          dcl 45 set ref 143* 144 147 147 155 155 158 158*
nindex                    0(18)        based           fixed bin(18,0)          array level 2 packed unsigned unaligned dcl 1-27 ref
                                                                                  144 147 147 155 155 158 158
nnames                    0(02)        based           fixed bin(16,0)          array level 2 packed unsigned unaligned dcl 1-27 ref
                                                                                  218
null                                                   builtin function         dcl 74 ref 134 218 219
pathname_                       000046 constant        entry                    external dcl 67 ref 139 139 147 147 155 155 158 158
                                                                                  166 166 172 172 175 175
return_value                           based           varying char             dcl 30 set ref 86* 157* 174*
return_value_max_lth            000113 automatic       fixed bin(21,0)          dcl 31 set ref 80* 86 157 174
return_value_ptr                000114 automatic       pointer                  dcl 32 set ref 80* 86 157 174
star_ALL_ENTRIES                000010 constant        fixed bin(2,0)           initial dcl 1-111 set ref 136*
star_entries                           based           structure                array level 1 dcl 1-27 ref 219
star_entry_count                000220 automatic       fixed bin(17,0)          dcl 1-14 set ref 136* 143 218 219
star_entry_ptr                  000222 automatic       pointer                  dcl 1-15 set ref 134* 136* 144 147 147 155 155 158
                                                                                  158 218 219 219
star_names                             based           char(32)                 array unaligned dcl 1-37 set ref 144* 147* 147* 155*
                                                                                  155* 158* 158* 218
star_names_ptr                  000224 automatic       pointer                  dcl 1-19 set ref 134* 136* 144 147 147 155 155 158
                                                                                  158 218 218
sum                                                    builtin function         dcl 74 ref 218

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
star_ALL_ENTRIES_WITH_LINK_PATHS       internal static fixed bin(3,0)           initial dcl 1-114
star_BRANCHES_ONLY                     internal static fixed bin(2,0)           initial dcl 1-110
star_DIRECTORY                         internal static fixed bin(2,0)           initial unsigned dcl 1-121
star_LINK                              internal static fixed bin(2,0)           initial unsigned dcl 1-119
star_LINKS_ONLY                        internal static fixed bin(2,0)           initial dcl 1-109
star_LINKS_ONLY_WITH_LINK_PATHS        internal static fixed bin(3,0)           initial dcl 1-112
star_SEGMENT                           internal static fixed bin(2,0)           initial unsigned dcl 1-120
star_branch_count                      automatic       fixed bin(17,0)          dcl 1-13
star_dir_list_branch                   based           structure                array level 1 dcl 1-59
star_link_count                        automatic       fixed bin(17,0)          dcl 1-17
star_link_pathname                     based           char                     unaligned dcl 1-102
star_links                             based           structure                array level 1 dcl 1-76
star_linkx                             automatic       fixed bin(17,0)          dcl 1-18
star_list_branch                       based           structure                array level 1 dcl 1-41
star_list_branch_ptr                   automatic       pointer                  dcl 1-16
star_list_names                        based           char(32)                 array unaligned dcl 1-92
star_list_names_ptr                    automatic       pointer                  dcl 1-20
star_select_sw                         automatic       fixed bin(3,0)           dcl 1-21

NAMES DECLARED BY EXPLICIT CONTEXT.
free_star_structures            001715 constant        entry                    internal dcl 216 ref 135 149 161
get_message_count               001537 constant        entry                    internal dcl 185 ref 144 164
have_queue_entries              000141 constant        entry                    external dcl 17

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      2264        2342    1772        2274
Length      2576    1772        56         220     271           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
have_queue_entries                  302 external procedure  is an external procedure.  
on unit on line 135                  64 on unit               
get_message_count                    91 internal procedure  enables or reverts conditions.  
on unit on line 201                  72 on unit               
free_star_structures                 64 internal procedure  is called by several nonquick procedures.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
have_queue_entries       000100 code                        have_queue_entries
                         000101 active_function             have_queue_entries
                         000102 complain                    have_queue_entries
                         000106 get_argument                have_queue_entries
                         000112 n_arguments                 have_queue_entries
                         000113 return_value_max_lth        have_queue_entries
                         000114 return_value_ptr            have_queue_entries
                         000116 argument_lth                have_queue_entries
                         000120 argument_ptr                have_queue_entries
                         000122 file_dname                  have_queue_entries
                         000174 file_ename                  have_queue_entries
                         000204 file_index                  have_queue_entries
                         000205 message_count               have_queue_entries
                         000206 multiple_paths              have_queue_entries
                         000207 arg_index                   have_queue_entries
                         000210 name_index                  have_queue_entries
                         000220 star_entry_count            have_queue_entries
                         000222 star_entry_ptr              have_queue_entries
                         000224 star_names_ptr              have_queue_entries

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_var_desc       call_var            call_ext_out_desc   call_ext_out        call_int_this_desc  call_int_this
call_int_other      return              mpfx2               enable              ext_entry           int_entry
int_entry_desc      free_based

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
active_fnc_err_               active_fnc_err_$suppress_name check_star_name_$path         com_err_
com_err_$suppress_name        cu_$af_arg_ptr                cu_$af_return_arg             cu_$arg_ptr
expand_pathname_$add_suffix   get_system_free_area_         hcs_$star_                    ioa_
message_segment_$close        message_segment_$get_message_count_index                    message_segment_$open
pathname_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$badopt           error_table_$badstar          error_table_$not_act_fnc




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     17 000140        80 000146        82 000162        83 000164        84 000166        85 000173        86 000176
     87 000207        89 000210        90 000213        91 000214        92 000220        93 000223        96 000224
     97 000247       100 000250       101 000252       103 000301       104 000325       107 000326       109 000332
    110 000341       111 000355       112 000357       113 000406       116 000407       117 000423       118 000455
    122 000456       123 000514       124 000516       125 000547       128 000550       129 000570       130 000574
    131 000625       133 000626       134 000630       135 000633       136 000655       138 000727       139 000731
    140 000777       143 001000       144 001007       146 001043       147 001045       149 001123       150 001127
    152 001130       155 001135       157 001211       158 001225       160 001275       161 001277       162 001303
    164 001304       165 001330       166 001332       167 001400       169 001401       172 001406       174 001453
    175 001467       179 001533       181 001535       185 001536       191 001557       195 001561       196 001606
    197 001611       198 001613       201 001614       204 001644       205 001661       206 001664       207 001666
    208 001700       211 001701       212 001713       216 001714       218 001722       219 001757       221 001766


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
