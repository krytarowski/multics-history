ASSEMBLY LISTING OF SEGMENT >dumps>old>recomp>fast_put.alm                    
ASSEMBLED ON:	11/04/82  1849.1 mst Thu
OPTIONS USED:	list 
ASSEMBLED BY:	ALM Version  6.4  April 1981    
ASSEMBLER CREATED:	11/03/82  1423.6 mst Wed

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Information Systems Inc., 1982 *
                                     4  " *                                                         *
                                     5  " * Copyright (c) 1972 by Massachusetts Institute of        *
                                     6  " * Technology and Honeywell Information Systems, Inc.      *
                                     7  " *                                                         *
                                     8  " ***********************************************************
                                     9  
                                    10  "fast_put: proc(iocb_ptr,buff_ptr,buff_len,code);
    000000                          11  	name	fast_put
                        000000      12  	segdef	fast_put
    000000  aa  0 00002 3515 20     13  fast_put:	epp1	pr0|2,*		pr1 gets addr of first arg
    000001  aa  1 00000 3515 20     14  	epp1	pr1|0,*		pr1->iocb
    000002  aa  1 00022 3515 20     15  	epp1	pr1|open_data_ptr,*	pr1->cb_uns_file
                                    16  
                                    17  "len=max(buff_len,0);
    000003  aa  0 00006 2361 20     18  	ldq	pr0|6,*		q gets arg2
    000004  aa   000002 6050 04     19  	tpl	2,ic		done if buff_len is > 0
    000005  aa   000000 2360 07     20  	ldq	0,dl		else set len to zero
                                    21  
                                    22  "cb_uns_file.write_pos=cb_uns_file.write_pos+len;
    000006  aa  1 00012 2351 00     23  	lda	pr1|write_pos	save old value of write pos
    000007  aa  0 00010 7551 20     24  	sta	pr0|8,*		use last arg for temp
    000010  aa  1 00012 0561 00     25  	asq	pr1|write_pos	advance write position
                                    26  
                                    27  "if write_pos<=cb_uns_file.write_limit then do;
    000011  aa  1 00012 2351 00     28  	lda	pr1|write_pos	a gets new write pos
    000012  aa  1 00002 1151 00     29  	cmpa	pr1|write_limit	write_pos::write_limit
    000013  0a   000025 6054 00     30  	tpnz	slow_put		exception--make external call
                                    31  
                                    32       "record_write=buffer;
    000014  aa  0 00004 3521 20     33  	epp2	pr0|4,*		pr2 gets addr of buff_ptr arg
    000015  aa  2 00000 3521 20     34  	epp2	pr2|0,*		pr2->buffer
    000016  aa  0 00010 2351 20     35  	lda	pr0|8,*		get saved write position
    000017  aa  1 00000 3535 20     36  	epp3	pr1|seg_ptr,*	pr3->segment base
    000020  aa  0 40145 1005 40     37  	mlr	(pr,rl),(pr,rl,al),fill(040)  copy buffer into the file
    000021  aa   200000 000006      38  	desc9a	pr2|0,ql		output buffer descrip
    000022  aa   377777 600006      39  	desc9a	pr3|-1(3),ql	file position descrip
                                    40  
                                    41       "code=0. return, end;
    000023  aa  0 00010 4501 20     42  	stz	pr0|8,*		arg4<--0
    000024  aa  7 00044 7101 20     43  	short_return		done with put_chars operation
                                    44  
                                    45  "write_pos=write_pos-len;
    000025  aa  0 00010 2351 20     46  slow_put:	lda	pr0|8,*		a<--saved write position
    000026  aa  1 00012 7551 00     47  	sta	pr1|write_pos	restores write pos to former value
                                    48  
                                    49  "call open_uns_file$put_chars_uns_file(iocb_ptr,buff_ptr,buff_len,code);
    000027  aa   020000 4310 07     50  	fld	4*2048,dl		set up arg count for external call
    000030  4a  4 00010 7131 20     51  	callsp	<open_uns_file>|[put_chars_uns_file] handles exceptional cases
    000031  aa  7 00044 7101 20     52  	short_return
                                    53  
                                    54  "declarations:
                        000022      55  	equ	open_data_ptr,18	in iocb
                        000012      56  	equ	write_pos,10	in cb_uns_file
                        000002      57  	equ	write_limit,2	     "
                        000000      58  	equ	seg_ptr,0		     "
                                    59  	end

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000032  5a   000003 000000 
    000033  5a   000026 600000 
    000034  aa   000000 000000 
    000035  55   000011 000002 
    000036  5a   000002 400003 
    000037  55   000006 000011 
    000040  aa  010 146 141 163
    000041  aa  164 137 160 165
    000042  aa  164 000 000 000
    000043  55   000017 000003 
    000044  0a   000000 400000 
    000045  55   000014 000003 
    000046  aa  010 146 141 163         fast_put
    000047  aa  164 137 160 165
    000050  aa  164 000 000 000
    000051  55   000002 000011 
    000052  6a   000000 400002 
    000053  55   000022 000003 
    000054  aa  014 163 171 155         symbol_table
    000055  aa  142 157 154 137
    000056  aa  164 141 142 154
    000057  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000060  aa   000000 000015 
    000061  aa   000000 000000 
    000062  aa   000000 000000 
    000063  aa   000000 000000 
    000064  5a   000011 000000 
    000065  aa   000000 000000 
    000066  aa   000000 000000 
    000067  5a   000017 000000 
    000070  aa   000000 000000 
    000071  aa   000000 000000 
    000072  aa   000000 000000 
    000073  aa   000000 000000 
    000074  aa   000000 000000 
    000075  aa   000000 000000 

EXTERNAL NAMES

    000076  aa  022 160 165 164         put_chars_uns_file
    000077  aa  137 143 150 141
    000100  aa  162 163 137 165
    000101  aa  156 163 137 146
    000102  aa  151 154 145 000
    000103  aa  015 157 160 145         open_uns_file
    000104  aa  156 137 165 156
    000105  aa  163 137 146 151
    000106  aa  154 145 000 000

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000107  aa   000004 000000 
    000110  55   000051 000044 
    000111  aa   000001 000000 
    000112  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    000113  5a   000055 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000032 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000012 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         open_uns_file|put_chars_uns_file
    000011  5a   000061 0000 00
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000004 
    000004  aa   000000 111316 
    000005  aa   510113 575622 
    000006  aa   000000 111320 
    000007  aa   102440 542704 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000120 
    000020  aa   000000 000102 
    000021  aa   000000 000106 
    000022  aa   000112 000102 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   040066 056064 
    000030  aa   040040 101160 
    000031  aa   162151 154040 
    000032  aa   061071 070061 
    000033  aa   040040 040040 
    000034  aa   110157 154155 
    000035  aa   163164 145144 
    000036  aa   164056 123171 
    000037  aa   163115 141151 
    000040  aa   156164 056155 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   154151 163164 
    000045  aa   040040 040040 
    000046  aa   040040 040040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040040 040040 
    000057  aa   040040 040040 
    000060  aa   040040 040040 
    000061  aa   040040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000001 
    000066  aa   000072 000036 
    000067  aa   113171 051674 
    000070  aa   000000 111320 
    000071  aa   005562 600000 
    000072  aa   076144 165155          >dumps>old>recomp>fast_put.alm
    000073  aa   160163 076157 
    000074  aa   154144 076162 
    000075  aa   145143 157155 
    000076  aa   160076 146141 
    000077  aa   163164 137160 
    000100  aa   165164 056141 
    000101  aa   154155 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

           0    fast_put                 fast_put:      12,   13.
          22    open_data_ptr            fast_put:      15,   55.
                open_uns_file            fast_put:      51.
                put_chars_uns_file       fast_put:      51.
           0    seg_ptr                  fast_put:      36,   58.
          25    slow_put                 fast_put:      30,   46.
           2    write_limit              fast_put:      29,   57.
          12    write_pos                fast_put:      23,   25,   28,   47,   56.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
