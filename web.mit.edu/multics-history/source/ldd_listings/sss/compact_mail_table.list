	COMPILATION LISTING OF SEGMENT compact_mail_table
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 11/01/83  1103.9 mst Tue
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 
        7 /* format: style2,ifthenstmt,ifthendo,ifthen,^indnoniterdo,indcomtxt,^inditerdo,idind22 */
        8 
        9 /* compact_mail_table: the command interface to mail_table_priv_$salvage. */
       10 
       11 /* Written 5 Aug 1983 by B. Margolin */
       12 
       13 compact_mail_table:
       14 salvage_mail_table:
       15      proc ();
       16 
       17 	dcl     arg		char (arg_len) based (arg_ptr);
       18 	dcl     arg_count		fixed bin;
       19 	dcl     arg_len		fixed bin (21);
       20 	dcl     arg_ptr		ptr;
       21 	dcl     code		fixed bin (35);
       22 	dcl     message		char (256);
       23 	dcl     new_size		fixed bin;
       24 	dcl     sci_ptr		ptr;
       25 
       26 	dcl     VERSION		char (3) int static options (constant) init ("1.0");
       27 	dcl     WHOAMI		char (18) int static options (constant) init ("compact_mail_table");
       28 	dcl     (
       29 	        error_table_$bad_conversion,
       30 	        error_table_$badopt,
       31 	        error_table_$too_many_args
       32 	        )			fixed bin (35) ext static;
       33 
       34 	dcl     com_err_		entry () options (variable);
       35 	dcl     cv_dec_check_	entry (char (*), fixed bin (35)) returns (fixed bin (35));
       36 	dcl     mail_table_priv_$count_entries
       37 				entry (fixed bin, fixed bin (35));
       38 	dcl     mail_table_priv_$salvage
       39 				entry (fixed bin, char (*), fixed bin (35));
       40 	dcl     ssu_$abort_line	entry () options (variable);
       41 	dcl     ssu_$arg_count	entry (ptr, fixed bin);
       42 	dcl     ssu_$arg_ptr	entry (ptr, fixed bin, ptr, fixed bin (21));
       43 	dcl     ssu_$destroy_invocation
       44 				entry (ptr);
       45 	dcl     ssu_$standalone_invocation
       46 				entry (ptr, char (*), char (*), ptr, entry, fixed bin (35));
       47 
       48 
       49 	sci_ptr = null ();
       50 	code = 0;
       51 	call ssu_$standalone_invocation (sci_ptr, WHOAMI, VERSION, null (), abort_cmt, code);
       52 	if code ^= 0 then do;
       53 	     call com_err_ (code, WHOAMI, "Creating standalone subsystem invocation.");
       54 	     return;
       55 	end;
       56 	call ssu_$arg_count (sci_ptr, arg_count);
       57 	if arg_count > 1 then
       58 	     call ssu_$abort_line (sci_ptr, error_table_$too_many_args, "^/Usage:  ^a {new_size}", WHOAMI);
       59 	if arg_count = 1 then do;
       60 	     call ssu_$arg_ptr (sci_ptr, 1, arg_ptr, arg_len);
       61 	     if arg = "" then go to BAD_CONVERSION;	/* cv_dec_check_ turns "" into 0 */
       62 	     if substr (arg, 1, 1) = "-" then call ssu_$abort_line (sci_ptr, error_table_$badopt, "^a", arg);
       63 	     new_size = cv_dec_check_ (arg, code);
       64 	     if code ^= 0 then do;
       65 BAD_CONVERSION:
       66 		call ssu_$abort_line (sci_ptr, error_table_$bad_conversion,
       67 		     "The argument must be a positive decimal integer, not ""^a"".", arg);
       68 	     end;
       69 	end;
       70 	else do;
       71 	     call mail_table_priv_$count_entries (new_size, code);
       72 	     if code ^= 0 then
       73 		call ssu_$abort_line (sci_ptr, code, "Counting the number of used entries in the old Mail Table.");
       74 	     new_size = 3 * new_size;			/* This is a good size */
       75 	end;
       76 	call mail_table_priv_$salvage (new_size, message, code);
       77 	if code ^= 0 then
       78 	     call ssu_$abort_line (sci_ptr, code, "^[Salvaging the mail table.^;^a^]", (message = ""), message);
       79 GLOBAL_EXIT:
       80 	call ssu_$destroy_invocation (sci_ptr);
       81 	return;
       82 
       83 abort_cmt:
       84      proc ();
       85 
       86 	go to GLOBAL_EXIT;
       87 
       88      end abort_cmt;
       89 
       90      end compact_mail_table;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/01/83  1038.0  compact_mail_table.pl1            >spec>on>11/01/83-mail>compact_mail_table.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
VERSION                         000005 constant        char(3)                  initial unaligned dcl 26 set ref 51*
WHOAMI                          000000 constant        char(18)                 initial unaligned dcl 27 set ref 51* 53* 57*
arg                                    based           char                     unaligned dcl 17 set ref 61 62 62* 63* 65*
arg_count                       000100 automatic       fixed bin(17,0)          dcl 18 set ref 56* 57 59
arg_len                         000101 automatic       fixed bin(21,0)          dcl 19 set ref 60* 61 62 62 62 63 63 65 65
arg_ptr                         000102 automatic       pointer                  dcl 20 set ref 60* 61 62 62 63 65
code                            000104 automatic       fixed bin(35,0)          dcl 21 set ref 50* 51* 52 53* 63* 64 71* 72 72* 76*
                                                                                  77 77*
com_err_                        000016 constant        entry                    external dcl 34 ref 53
cv_dec_check_                   000020 constant        entry                    external dcl 35 ref 63
error_table_$bad_conversion     000010 external static fixed bin(35,0)          dcl 28 set ref 65*
error_table_$badopt             000012 external static fixed bin(35,0)          dcl 28 set ref 62*
error_table_$too_many_args      000014 external static fixed bin(35,0)          dcl 28 set ref 57*
mail_table_priv_$count_entries  000022 constant        entry                    external dcl 36 ref 71
mail_table_priv_$salvage        000024 constant        entry                    external dcl 38 ref 76
message                         000105 automatic       char(256)                unaligned dcl 22 set ref 76* 77 77*
new_size                        000205 automatic       fixed bin(17,0)          dcl 23 set ref 63* 71* 74* 74 76*
sci_ptr                         000206 automatic       pointer                  dcl 24 set ref 49* 51* 56* 57* 60* 62* 65* 72* 77*
                                                                                  79*
ssu_$abort_line                 000026 constant        entry                    external dcl 40 ref 57 62 65 72 77
ssu_$arg_count                  000030 constant        entry                    external dcl 41 ref 56
ssu_$arg_ptr                    000032 constant        entry                    external dcl 42 ref 60
ssu_$destroy_invocation         000034 constant        entry                    external dcl 43 ref 79
ssu_$standalone_invocation      000036 constant        entry                    external dcl 45 ref 51

NAMES DECLARED BY EXPLICIT CONTEXT.
BAD_CONVERSION                  000411 constant        label                    dcl 65 ref 61
GLOBAL_EXIT                     000573 constant        label                    dcl 79 ref 86
abort_cmt                       000604 constant        entry                    internal dcl 83 ref 51 51
compact_mail_table              000126 constant        entry                    external dcl 13
salvage_mail_table              000117 constant        entry                    external dcl 13

NAMES DECLARED BY CONTEXT OR IMPLICATION.
null                                                   builtin function         ref 49 51 51
substr                                                 builtin function         ref 62

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1012        1052     615        1022
Length      1246     615        40         160     175           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
salvage_mail_table                  202 external procedure  is an external procedure.  
abort_cmt                            64 internal procedure  is assigned to an entry variable.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
salvage_mail_table       000100 arg_count                   salvage_mail_table
                         000101 arg_len                     salvage_mail_table
                         000102 arg_ptr                     salvage_mail_table
                         000104 code                        salvage_mail_table
                         000105 message                     salvage_mail_table
                         000205 new_size                    salvage_mail_table
                         000206 sci_ptr                     salvage_mail_table

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_e_as              call_ext_out_desc   call_ext_out        return              tra_ext             ext_entry
int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      cv_dec_check_                 mail_table_priv_$count_entries
mail_table_priv_$salvage      ssu_$abort_line               ssu_$arg_count                ssu_$arg_ptr
ssu_$destroy_invocation       ssu_$standalone_invocation

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$bad_conversion   error_table_$badopt           error_table_$too_many_args




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     13 000116        49 000133        50 000135        51 000136        52 000176        53 000200        54 000224
     56 000225        57 000236        59 000274        60 000277        61 000316        62 000324        63 000362
     64 000407        65 000411        69 000444        71 000445        72 000456        74 000504        76 000507
     77 000530        79 000573        81 000602        83 000603        86 000611


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
