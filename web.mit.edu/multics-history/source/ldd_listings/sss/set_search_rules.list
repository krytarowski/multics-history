	COMPILATION LISTING OF SEGMENT set_search_rules
	Compiled by: Multics PL/I Compiler, Release 27d, of October 11, 1982
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 11/04/82  1643.1 mst Thu
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 set_search_rules: ssr:
       12      procedure options (variable);
       13 
       14 /* Created 770322 by PG from old version that was combined with set_search_dirs. */
       15 /* Add -default control arg 06/10/80 S. Herbst */
       16 
       17 /* based */
       18 
       19 dcl arg char (arg_len) based (arg_ptr);
       20 
       21 /* automatic */
       22 
       23 dcl 1 search_rules,					/* the search rule structure */
       24     2 num fixed bin,				/* the number of search rules */
       25     2 names (21) char (168) aligned;			/* the search rules */
       26 
       27 dcl (dn, path) char (168);
       28 dcl en char (32);
       29 
       30 dcl (default_sw, got_path_sw) bit (1);
       31 
       32 dcl arg_ptr ptr;
       33 
       34 dcl (arg_count, arg_len, i) fixed bin;
       35 dcl code fixed bin (35);
       36 
       37 
       38 dcl error_table_$badopt fixed bin (35) ext;
       39 dcl error_table_$segknown fixed bin (35) ext;
       40 
       41 dcl (active_fnc_err_, com_err_, com_err_$suppress_name) entry options (variable);
       42 dcl cu_$af_return_arg entry (fixed bin, ptr, fixed bin, fixed bin (35));
       43 dcl cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
       44 dcl expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
       45 dcl hcs_$get_search_rules entry (ptr);
       46 dcl hcs_$initiate_search_rules entry (ptr, fixed bin (35));
       47 dcl ioa_ entry options (variable);
       48 dcl parse_search_rules_ entry (char (*), char (*), char (*), ptr, fixed bin (35));
       49 
       50 dcl (addr, null, substr) builtin;
       51 /**/
       52 	call cu_$af_return_arg (arg_count, null, 0, code);
       53 	if code = 0 then do;
       54 	     call active_fnc_err_ (0, "set_search_rules", "Cannot be called as an active function.");
       55 	     return;
       56 	end;
       57 
       58 	default_sw, got_path_sw = "0"b;
       59 	do i = 1 to arg_count;
       60 
       61 	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
       62 
       63 	     if substr (arg, 1, 1) = "-" then
       64 		if arg = "-default" | arg = "-df" then do;
       65 		     if got_path_sw then do;		/* multiple specifications */
       66 USAGE:			call com_err_$suppress_name (0, "set_search_rules",
       67 			     "Usage:  set_search_rules path
       68 or:     set_search_rules -default");
       69 			return;
       70 		     end;
       71 		     default_sw, got_path_sw = "1"b;
       72 		end;
       73 		else do;
       74 		     call com_err_ (error_table_$badopt, "set_search_rules", "^a", arg);
       75 		     return;
       76 		end;
       77 
       78 	     else if got_path_sw then go to USAGE;
       79 	     else do;
       80 		path = arg;
       81 		got_path_sw = "1"b;
       82 	     end;
       83 	end;
       84 
       85 	if ^got_path_sw | default_sw then do;
       86 	     search_rules.num = 1;
       87 	     search_rules.names (1) = "default";
       88 	end;
       89 	else do;
       90 	     call expand_pathname_ (path, dn, en, code);
       91 	     if code ^= 0 then do;
       92 		call com_err_ (code, "set_search_rules", "^a", path);
       93 		return;
       94 	     end;
       95 
       96 	     call parse_search_rules_ (dn, en, "set_search_rules", addr (search_rules), code);
       97 	     if code ^= 0 & code ^= error_table_$segknown then return;
       98 	end;
       99 
      100 	call hcs_$initiate_search_rules (addr (search_rules), code);
      101 	if code ^= 0 then call com_err_ (code, "set_search_rules", "");
      102 
      103 	return;
      104 
      105 
      106 print_search_rules: psr: entry options (variable);
      107 
      108 /* This entry point is called to print the search rules */
      109 
      110 	call cu_$af_return_arg (arg_count, null, 0, code);
      111 	if code = 0 then do;
      112 	     call active_fnc_err_ (0, "print_search_rules", "Cannot be called as an active function.");
      113 	     return;
      114 	end;
      115 
      116 	if arg_count > 0 then do;
      117 	     call com_err_$suppress_name (0, "print_search_rules", "Usage:  print_search_rules");
      118 	     return;
      119 	end;
      120 
      121 	call hcs_$get_search_rules (addr (search_rules));
      122 
      123 	do i = 1 to search_rules.num;
      124 	     call ioa_ ("^a", search_rules.names (i));
      125 	end;
      126 
      127 end set_search_rules;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/04/82  1613.7  set_search_rules.pl1              >dumps>old>recomp>set_search_rules.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
active_fnc_err_                 000014 constant        entry                    external dcl 41 ref 54 112
addr                                                   builtin function         dcl 50 ref 96 96 100 100 121 121
arg                                    based           char                     unaligned dcl 19 set ref 63 63 63 74* 80
arg_count                       002024 automatic       fixed bin(17,0)          dcl 34 set ref 52* 59 110* 116
arg_len                         002025 automatic       fixed bin(17,0)          dcl 34 set ref 61* 63 63 63 74 74 80
arg_ptr                         002022 automatic       pointer                  dcl 32 set ref 61* 63 63 63 74 80
code                            002027 automatic       fixed bin(35,0)          dcl 35 set ref 52* 53 61* 90* 91 92* 96* 97 97 100*
                                                                                  101 101* 110* 111
com_err_                        000016 constant        entry                    external dcl 41 ref 74 92 101
com_err_$suppress_name          000020 constant        entry                    external dcl 41 ref 66 117
cu_$af_return_arg               000022 constant        entry                    external dcl 42 ref 52 110
cu_$arg_ptr                     000024 constant        entry                    external dcl 43 ref 61
default_sw                      002017 automatic       bit(1)                   unaligned dcl 30 set ref 58* 71* 85
dn                              001663 automatic       char(168)                unaligned dcl 27 set ref 90* 96*
en                              002007 automatic       char(32)                 unaligned dcl 28 set ref 90* 96*
error_table_$badopt             000010 external static fixed bin(35,0)          dcl 38 set ref 74*
error_table_$segknown           000012 external static fixed bin(35,0)          dcl 39 ref 97
expand_pathname_                000026 constant        entry                    external dcl 44 ref 90
got_path_sw                     002020 automatic       bit(1)                   unaligned dcl 30 set ref 58* 65 71* 78 81* 85
hcs_$get_search_rules           000030 constant        entry                    external dcl 45 ref 121
hcs_$initiate_search_rules      000032 constant        entry                    external dcl 46 ref 100
i                               002026 automatic       fixed bin(17,0)          dcl 34 set ref 59* 61* 123* 124*
ioa_                            000034 constant        entry                    external dcl 47 ref 124
names                     1     000100 automatic       char(168)                array level 2 dcl 23 set ref 87* 124*
null                                                   builtin function         dcl 50 ref 52 52 110 110
num                             000100 automatic       fixed bin(17,0)          level 2 dcl 23 set ref 86* 123
parse_search_rules_             000036 constant        entry                    external dcl 48 ref 96
path                            001735 automatic       char(168)                unaligned dcl 27 set ref 80* 90* 92*
search_rules                    000100 automatic       structure                level 1 unaligned dcl 23 set ref 96 96 100 100 121
                                                                                  121
substr                                                 builtin function         dcl 50 ref 63

NAMES DECLARED BY EXPLICIT CONTEXT.
USAGE                           000236 constant        label                    dcl 66 ref 78
print_search_rules              000561 constant        entry                    external dcl 106
psr                             000552 constant        entry                    external dcl 106
set_search_rules                000110 constant        entry                    external dcl 11
ssr                             000101 constant        entry                    external dcl 11

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1144        1204     746        1154
Length      1400     746        40         157     176           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
ssr                                1144 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
ssr                      000100 search_rules                ssr
                         001663 dn                          ssr
                         001735 path                        ssr
                         002007 en                          ssr
                         002017 default_sw                  ssr
                         002020 got_path_sw                 ssr
                         002022 arg_ptr                     ssr
                         002024 arg_count                   ssr
                         002025 arg_len                     ssr
                         002026 i                           ssr
                         002027 code                        ssr

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
active_fnc_err_               com_err_                      com_err_$suppress_name        cu_$af_return_arg
cu_$arg_ptr                   expand_pathname_              hcs_$get_search_rules         hcs_$initiate_search_rules
ioa_                          parse_search_rules_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$badopt           error_table_$segknown




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000100        52 000115        53 000134        54 000136        55 000167        58 000170        59 000172
     61 000201        63 000216        65 000234        66 000236        69 000267        71 000270        72 000273
     74 000274        75 000332        76 000333        78 000334        80 000336        81 000342        83 000344
     85 000346        86 000352        87 000354        88 000357        90 000360        91 000404        92 000406
     93 000441        96 000442        97 000501       100 000506       101 000521       103 000550       106 000551
    110 000566       111 000606       112 000610       113 000643       116 000644       117 000646       118 000701
    121 000702       123 000713       124 000722       125 000742       127 000744


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
