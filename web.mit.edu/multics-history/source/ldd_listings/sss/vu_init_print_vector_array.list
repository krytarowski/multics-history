	COMPILATION LISTING OF SEGMENT vu_init_print_vector_array
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 02/16/84  1305.6 mst Thu
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 /* format: style2,ind3 */
        7 vu_init_print_vector_array:
        8 init_print_vector_array:
        9    proc ();
       10 
       11 /* Written by Lindsey Spratt.
       12*Modified:
       13*03/09/82 by Lindsey Spratt:  Changed to use named constants for the position
       14*	  of the arguments.  Added another calling sequence.
       15**/
       16 /* START OF DECLARATIONS */
       17 /* Parameter */
       18 /* Automatic */
       19 
       20       dcl	    names_given	       bit (1) aligned init ("0"b);
       21       dcl	    arg_list_arg_count     fixed bin;
       22       dcl	    arg_list_ptr	       ptr;
       23       dcl	    type		       fixed bin;
       24       dcl	    packed	       bit (1) aligned;
       25       dcl	    size		       fixed bin;
       26       dcl	    ndims		       fixed bin;
       27       dcl	    scale		       fixed bin;
       28       dcl	    CODE_ARG_IDX	       fixed bin;
       29       dcl	    PVA_PTR_ARG_IDX	       fixed bin;
       30       dcl	    p_code_ptr	       ptr;
       31       dcl	    nargs		       fixed bin;
       32       dcl	    arg_idx	       fixed bin;
       33       dcl	    work_area_ptr	       ptr;
       34 
       35 /* Based */
       36 
       37       dcl	    work_area	       area based (work_area_ptr);
       38       dcl	    s_fixed_real_template  based fixed bin;
       39       dcl	    ptr_template	       based ptr;
       40       dcl	    v_char_template	       based char (size) varying;
       41       dcl	    char_template	       based char (size);
       42 
       43       dcl	    p_code	       based (p_code_ptr) fixed bin (35);
       44 
       45 
       46 /* Builtin */
       47 
       48       dcl	    null		       builtin;
       49 
       50 /* Controlled */
       51 /* Constant */
       52 
       53       dcl	    MYNAME	       init ("vector_util_$init_print_vector_array") char (40) varying internal
       54 			       static options (constant);
       55       dcl	    (
       56 	    AREA_PTR_ARG_IDX       init (1),
       57 	    NUMBER_OF_SLOTS_ARG_IDX
       58 			       init (2),
       59 	    NUMBER_OF_NONNAME_ARGS_AT_BEGINNING
       60 			       init (2),
       61 	    PVA_PTR_ARG_OFFSET_FROM_END
       62 			       init (1),
       63 	    NUMBER_OF_NONNAME_ARGS_AT_END
       64 			       init (2),
       65 	    NUMBER_OF_DIMENSIONS_ARG_IDX
       66 			       init (3),
       67 	    MAX_DIM_NAME_LEN_ARG_IDX
       68 			       init (4)
       69 	    )		       fixed bin (17) internal static options (constant);
       70 
       71 /* Entry */
       72 
       73       dcl	    vector_util_$err_no_operation
       74 			       entry (ptr, fixed bin (17), fixed bin (17), ptr, ptr, fixed bin (35));
       75       dcl	    cu_$arg_list_ptr       entry (ptr);
       76       dcl	    decode_descriptor_     entry (ptr, fixed bin, fixed bin, bit (1) aligned, fixed bin, fixed bin, fixed bin);
       77       dcl	    cu_$arg_count	       entry (fixed bin);
       78       dcl	    sub_err_	       entry () options (variable);
       79 
       80 /* External */
       81 
       82       dcl	    error_table_$bad_arg   fixed bin (35) ext;
       83       dcl	    error_table_$fatal_error
       84 			       fixed bin (35) ext;
       85 
       86 /* END OF DECLARATIONS */
       87 
       88       call cu_$arg_count (nargs);
       89       arg_list_arg_count = nargs;
       90       call cu_$arg_list_ptr (arg_list_ptr);
       91       CODE_ARG_IDX = nargs;
       92       PVA_PTR_ARG_IDX = nargs - PVA_PTR_ARG_OFFSET_FROM_END;
       93 
       94       call decode_descriptor_ (arg_list_ptr, CODE_ARG_IDX, type, packed, ndims, size, scale);
       95       if type ^= s_fixed_real_desc
       96       then call
       97 	    sub_err_ (error_table_$fatal_error, MYNAME, "s", null, 0,
       98 	    "^/^a was called incorrectly.^/The final argument must be fixed bin(35).", MYNAME);
       99 
      100       p_code_ptr = arg_list_ptr -> arg_list.arg_ptrs (CODE_ARG_IDX);
      101       p_code = 0;
      102 
      103       call decode_descriptor_ (arg_list_ptr, AREA_PTR_ARG_IDX, type, packed, ndims, size, scale);
      104 
      105       if type ^= pointer_desc
      106       then
      107          do;
      108 	  p_code = error_table_$bad_arg;
      109 	  return;
      110          end;
      111 
      112       work_area_ptr = arg_list_ptr -> arg_list.arg_ptrs (AREA_PTR_ARG_IDX) -> ptr_template;
      113 
      114       call decode_descriptor_ (arg_list_ptr, NUMBER_OF_SLOTS_ARG_IDX, type, packed, ndims, size, scale);
      115 
      116       if type ^= s_fixed_real_desc
      117       then
      118          do;
      119 	  p_code = error_table_$bad_arg;
      120 	  return;
      121          end;
      122       pva_number_of_vector_slots = arg_list_ptr -> arg_list.arg_ptrs (NUMBER_OF_SLOTS_ARG_IDX) -> s_fixed_real_template;
      123 
      124       call decode_descriptor_ (arg_list_ptr, PVA_PTR_ARG_IDX, type, packed, ndims, size, scale);
      125 
      126       if type ^= pointer_desc
      127       then
      128          do;
      129 	  p_code = error_table_$bad_arg;
      130 	  return;
      131          end;
      132 
      133 /* All of the arguments except for the vd_info_ptr, 
      134*the max_splitter_len, the return pointer to the input_vector that is defined,
      135*and the final "code" argument, are dimension names.*/
      136 
      137       call decode_descriptor_ (arg_list_ptr, NUMBER_OF_DIMENSIONS_ARG_IDX, type, packed, ndims, size, scale);
      138       if type = s_fixed_real_desc
      139       then
      140          do;
      141 	  pva_number_of_dimensions =
      142 	     arg_list_ptr -> arg_list.arg_ptrs (NUMBER_OF_DIMENSIONS_ARG_IDX) -> s_fixed_real_template;
      143 	  names_given = "0"b;
      144 	  call decode_descriptor_ (arg_list_ptr, MAX_DIM_NAME_LEN_ARG_IDX, type, packed, ndims, size, scale);
      145 	  if type ^= s_fixed_real_desc
      146 	  then
      147 	     do;
      148 	        p_code = error_table_$bad_arg;
      149 	        return;
      150 	     end;
      151 	  pva_maximum_dimension_name_length =
      152 	     arg_list_ptr -> arg_list.arg_ptrs (MAX_DIM_NAME_LEN_ARG_IDX) -> s_fixed_real_template;
      153          end;
      154       else
      155          do;
      156 	  names_given = "1"b;
      157 	  pva_number_of_dimensions = nargs - (NUMBER_OF_NONNAME_ARGS_AT_BEGINNING + NUMBER_OF_NONNAME_ARGS_AT_END);
      158 
      159 	  pva_maximum_dimension_name_length = 0;
      160 	  do arg_idx = NUMBER_OF_NONNAME_ARGS_AT_BEGINNING + 1 to nargs - NUMBER_OF_NONNAME_ARGS_AT_END;
      161 	     call decode_descriptor_ (arg_list_ptr, arg_idx, type, packed, ndims, size, scale);
      162 
      163 	     if type = v_char_desc | type = char_desc
      164 	     then
      165 	        do;
      166 		 pva_maximum_dimension_name_length =
      167 		    max (pva_maximum_dimension_name_length,
      168 		    length (rtrim (arg_list_ptr -> arg_list.arg_ptrs (arg_idx) -> char_template)));
      169 	        end;
      170 	     else
      171 	        do;
      172 		 p_code = error_table_$bad_arg;
      173 		 return;
      174 	        end;
      175 	  end;
      176          end;
      177 
      178       alloc print_vector_array in (work_area);
      179       print_vector_array.version = PRINT_VECTOR_ARRAY_VERSION_2;
      180       print_vector_array.number_of_vectors = 0;
      181       print_vector_array.dimension_table.descriptor_ptr = null;
      182       print_vector_array.dimension_table.cv_to_print = vector_util_$err_no_operation;
      183       print_vector_array.dimension_table.cv_to_typed = vector_util_$err_no_operation;
      184       print_vector_array.dimension_table.maximum_value_length = 0;
      185       if names_given
      186       then
      187          do arg_idx = NUMBER_OF_NONNAME_ARGS_AT_BEGINNING + 1 to nargs - NUMBER_OF_NONNAME_ARGS_AT_END;
      188 	  call decode_descriptor_ (arg_list_ptr, arg_idx, type, packed, ndims, size, scale);
      189 	  if type = v_char_desc | type = char_desc
      190 	  then print_vector_array.dimension_table (arg_idx - NUMBER_OF_NONNAME_ARGS_AT_BEGINNING).name =
      191 		rtrim (arg_list_ptr -> arg_list.arg_ptrs (arg_idx) -> char_template);
      192 	  else
      193 	     do;
      194 	        p_code = error_table_$bad_arg;
      195 	        return;
      196 	     end;
      197          end;
      198       else print_vector_array.dimension_table.name = "";
      199 
      200       arg_list_ptr -> arg_list.arg_ptrs (PVA_PTR_ARG_IDX) -> ptr_template = print_vector_array_ptr;
      201       return;
      202 
  1     1 /* ***********************************************************
  1     2*   *                                                         *
  1     3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
  1     4*   *                                                         *
  1     5*   *********************************************************** */
  1     6 /* BEGIN INCLUDE FILE  -  vu_print_vector_array.incl.pl1 */
  1     7 /* Written by Matthew C. Pierret, 01/21/82
  1     8*Modified:
  1     9**/
  1    10 
  1    11 /* format: style2,ind3 */
  1    12      dcl	   1 print_vector_array   based (print_vector_array_ptr),
  1    13 	     2 version	      fixed bin (35),
  1    14 	     2 number_of_dimensions
  1    15 			      fixed bin (17),
  1    16 	     2 maximum_dimension_name_length
  1    17 			      fixed bin (17),
  1    18 	     2 number_of_vectors  fixed bin (17),
  1    19 	     2 number_of_vector_slots
  1    20 			      fixed bin (17),
  1    21 	     2 dimension_table    (pva_number_of_dimensions refer (print_vector_array.number_of_dimensions)),
  1    22 	       3 name	      char (pva_maximum_dimension_name_length
  1    23 			      refer (print_vector_array.maximum_dimension_name_length)) varying,
  1    24 	       3 descriptor_ptr   ptr,
  1    25 	       3 cv_to_print      entry (ptr, fixed bin (17), fixed bin (17), ptr, ptr, fixed bin (35)),
  1    26 	       3 cv_to_typed      entry (ptr, fixed bin (17), fixed bin (17), ptr, ptr, fixed bin (35)),
  1    27 	       3 maximum_value_length
  1    28 			      fixed bin (17),
  1    29 	     2 vector_slot	      (pva_number_of_vector_slots refer (print_vector_array.number_of_vector_slots)) ptr;
  1    30 
  1    31      dcl	   1 print_vector	      based (print_vector_ptr),
  1    32 	     2 number_of_dimensions
  1    33 			      fixed bin (17),
  1    34 	     2 maximum_value_length
  1    35 			      fixed bin (35),
  1    36 	     2 dimension	      (pv_number_of_dimensions refer (print_vector.number_of_dimensions)),
  1    37 	       3 identifier	      fixed bin (17),
  1    38 	       3 value	      char (pv_maximum_value_length refer (print_vector.maximum_value_length)) varying;
  1    39 
  1    40      dcl	   pva_number_of_dimensions
  1    41 			      fixed bin;
  1    42      dcl	   pva_number_of_vector_slots
  1    43 			      fixed bin;
  1    44      dcl	   pva_maximum_dimension_name_length
  1    45 			      fixed bin;
  1    46      dcl	   pv_number_of_dimensions
  1    47 			      fixed bin;
  1    48      dcl	   pv_maximum_value_length
  1    49 			      fixed bin;
  1    50 
  1    51      dcl	   print_vector_array_ptr ptr;
  1    52      dcl	   print_vector_ptr	      ptr;
  1    53      dcl	   PRINT_VECTOR_ARRAY_VERSION_2
  1    54 			      fixed bin (35) init (2) internal static options (constant);
  1    55 
  1    56 /* END INCLUDE FILE  -  vu_print_vector_array.incl.pl1 */
      203 
      204 
  2     1 dcl (	s_fixed_real_desc		init( 1),
  2     2 	d_fixed_real_desc		init( 2),
  2     3 	s_float_real_desc		init( 3),
  2     4 	d_float_real_desc		init( 4),
  2     5 	s_fixed_cplx_desc		init( 5),
  2     6 	d_fixed_cplx_desc		init( 6),
  2     7 	s_float_cplx_desc		init( 7),
  2     8 	d_float_cplx_desc		init( 8),
  2     9 
  2    10 	D_fixed_real_desc		init( 9),
  2    11 	D_float_real_desc		init(10),
  2    12 	D_fixed_cplx_desc		init(11),
  2    13 	D_float_cplx_desc		init(12),
  2    14 
  2    15 	pointer_desc		init(13),
  2    16 	offset_desc		init(14),
  2    17 	label_desc		init(15),
  2    18 	entry_desc		init(16),
  2    19 	structure_desc		init(17),
  2    20 	area_desc			init(18),
  2    21 
  2    22 	bit_desc			init(19),
  2    23 	v_bit_desc		init(20),
  2    24 
  2    25 	char_desc			init(21),
  2    26 	v_char_desc		init(22),
  2    27 
  2    28 	file_desc			init(23)
  2    29 					) fixed bin int static options(constant);
      205 
      206 
  3     1 /*	BEGIN INCLUDE FILE ... descriptor.incl.pl1	*/
  3     2 
  3     3 dcl	1 desc_		aligned,
  3     4 	2 version2_	bit(1) unal,
  3     5 	2 type_		fixed bin(6) unsigned unal,
  3     6 	2 pack_		bit(1) unal,
  3     7 	2 dimension_	bit(4) unal,
  3     8 	2 scale_		fixed bin(11) unal,
  3     9 	2 precision_	fixed bin(11) unal;
  3    10 
  3    11 /*	END INCLUDE FILE ... descriptor.incl.pl1	*/
      207 
      208 
  4     1 /* BEGIN INCLUDE FILE ... arg_list.incl.pl1
  4     2*
  4     3*   James R. Davis 10 May 79 */
  4     4 
  4     5      dcl	   1 arg_list	      aligned based,
  4     6 	     2 header,
  4     7 	       3 arg_count	      fixed bin (17) unsigned unal,
  4     8 	       3 pad1	      bit (1) unal,
  4     9 	       3 call_type	      fixed bin (18) unsigned unal,
  4    10 	       3 desc_count	      fixed bin (17) unsigned unal,
  4    11 	       3 pad2	      bit (19) unal,
  4    12 	     2 arg_ptrs	      (arg_list_arg_count refer (arg_list.arg_count)) ptr,
  4    13 	     2 desc_ptrs	      (arg_list_arg_count refer (arg_list.arg_count)) ptr;
  4    14 
  4    15 
  4    16 
  4    17      dcl	   1 arg_list_with_envptr aligned based,	/* used with non-quick int and entry-var calls */
  4    18 	     2 header,
  4    19 	       3 arg_count	      fixed bin (17) unsigned unal,
  4    20 	       3 pad1	      bit (1) unal,
  4    21 	       3 call_type	      fixed bin (18) unsigned unal,
  4    22 	       3 desc_count	      fixed bin (17) unsigned unal,
  4    23 	       3 pad2	      bit (19) unal,
  4    24 	     2 arg_ptrs	      (arg_list_arg_count refer (arg_list_with_envptr.arg_count)) ptr,
  4    25 	     2 envptr	      ptr,
  4    26 	     2 desc_ptrs	      (arg_list_arg_count refer (arg_list_with_envptr.arg_count)) ptr;
  4    27 
  4    28 
  4    29      dcl	   (
  4    30 	   Quick_call_type	      init (0),
  4    31 	   Interseg_call_type     init (4),
  4    32 	   Envptr_supplied_call_type
  4    33 			      init (8)
  4    34 	   )		      fixed bin (18) unsigned unal int static options (constant);
  4    35 
  4    36 /* The user must declare arg_list_arg_count - if an adjustable automatic structure
  4    37*   is being "liked" then arg_list_arg_count may be a parameter, in order to allocate
  4    38*   an argument list of the proper size in the user's stack
  4    39*
  4    40**/
  4    41 /* END INCLUDE FILE ... arg_list.incl.pl1 */
      209 
      210    end vu_init_print_vector_array;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    02/16/84  1249.9  vu_init_print_vector_array.pl1    >spec>on>mtape>vu_init_print_vector_array.pl1
203          1    02/16/84  1230.3  vu_print_vector_array.incl.pl1    >spec>on>mtape>vu_print_vector_array.incl.pl1
205          2    01/12/79  1059.7  desc_types.incl.pl1               >ldd>include>desc_types.incl.pl1
207          3    11/30/78  1227.5  descriptor.incl.pl1               >ldd>include>descriptor.incl.pl1
209          4    10/23/81  1948.6  arg_list.incl.pl1                 >ldd>include>arg_list.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
AREA_PTR_ARG_IDX                000024 constant        fixed bin(17,0)          initial dcl 55 set ref 103* 112
CODE_ARG_IDX                    000111 automatic       fixed bin(17,0)          dcl 28 set ref 91* 94* 100
MAX_DIM_NAME_LEN_ARG_IDX        000022 constant        fixed bin(17,0)          initial dcl 55 set ref 144* 151
MYNAME                          000001 constant        varying char(40)         initial dcl 53 set ref 95* 95*
NUMBER_OF_DIMENSIONS_ARG_IDX    000000 constant        fixed bin(17,0)          initial dcl 55 set ref 137* 141
NUMBER_OF_NONNAME_ARGS_AT_BEGINNING    constant        fixed bin(17,0)          initial dcl 55 ref 157 160 185 189
NUMBER_OF_NONNAME_ARGS_AT_END          constant        fixed bin(17,0)          initial dcl 55 ref 157 160 185
NUMBER_OF_SLOTS_ARG_IDX         000023 constant        fixed bin(17,0)          initial dcl 55 set ref 114* 122
PRINT_VECTOR_ARRAY_VERSION_2           constant        fixed bin(35,0)          initial dcl 1-53 ref 179
PVA_PTR_ARG_IDX                 000112 automatic       fixed bin(17,0)          dcl 29 set ref 92* 124* 200
PVA_PTR_ARG_OFFSET_FROM_END            constant        fixed bin(17,0)          initial dcl 55 ref 92
arg_idx                         000117 automatic       fixed bin(17,0)          dcl 32 set ref 160* 161* 166* 185* 188* 189 189*
arg_list                               based           structure                level 1 dcl 4-5
arg_list_arg_count              000101 automatic       fixed bin(17,0)          dcl 21 set ref 89*
arg_list_ptr                    000102 automatic       pointer                  dcl 22 set ref 90* 94* 100 103* 112 114* 122 124*
                                                                                  137* 141 144* 151 161* 166 188* 189 200
arg_ptrs                  2            based           pointer                  array level 2 dcl 4-5 ref 100 112 122 141 151 166
                                                                                  189 200
char_desc                              constant        fixed bin(17,0)          initial dcl 2-1 ref 163 189
char_template                          based           char                     unaligned dcl 41 ref 166 189
cu_$arg_count                   000016 constant        entry                    external dcl 77 ref 88
cu_$arg_list_ptr                000012 constant        entry                    external dcl 75 ref 90
cv_to_print                            based           entry variable           array level 3 dcl 1-12 set ref 182*
cv_to_typed                            based           entry variable           array level 3 dcl 1-12 set ref 183*
decode_descriptor_              000014 constant        entry                    external dcl 76 ref 94 103 114 124 137 144 161 188
descriptor_ptr                         based           pointer                  array level 3 dcl 1-12 set ref 181*
dimension_table           6            based           structure                array level 2 unaligned dcl 1-12
error_table_$bad_arg            000022 external static fixed bin(35,0)          dcl 82 ref 108 119 129 148 172 194
error_table_$fatal_error        000024 external static fixed bin(35,0)          dcl 83 set ref 95*
maximum_dimension_name_length
                          2            based           fixed bin(17,0)          level 2 dcl 1-12 set ref 178* 181 181 181 181 182
                                                                                  182 182 182 183 183 183 183 184 184 184 184 189
                                                                                  189 189 198 198 198
maximum_value_length                   based           fixed bin(17,0)          array level 3 dcl 1-12 set ref 184*
name                      6            based           varying char             array level 3 dcl 1-12 set ref 189* 198*
names_given                     000100 automatic       bit(1)                   initial dcl 20 set ref 20* 143* 156* 185
nargs                           000116 automatic       fixed bin(17,0)          dcl 31 set ref 88* 89 91 92 157 160 185
ndims                           000107 automatic       fixed bin(17,0)          dcl 26 set ref 94* 103* 114* 124* 137* 144* 161*
                                                                                  188*
null                                                   builtin function         dcl 48 ref 95 95 181
number_of_dimensions      1            based           fixed bin(17,0)          level 2 dcl 1-12 set ref 178* 181 182 183 184 198
number_of_vector_slots
                          4            based           fixed bin(17,0)          level 2 dcl 1-12 set ref 178*
number_of_vectors         3            based           fixed bin(17,0)          level 2 dcl 1-12 set ref 180*
p_code                                 based           fixed bin(35,0)          dcl 43 set ref 101* 108* 119* 129* 148* 172* 194*
p_code_ptr                      000114 automatic       pointer                  dcl 30 set ref 100* 101 108 119 129 148 172 194
packed                          000105 automatic       bit(1)                   dcl 24 set ref 94* 103* 114* 124* 137* 144* 161*
                                                                                  188*
pointer_desc                           constant        fixed bin(17,0)          initial dcl 2-1 ref 105 126
print_vector_array                     based           structure                level 1 unaligned dcl 1-12 set ref 178
print_vector_array_ptr          000126 automatic       pointer                  dcl 1-51 set ref 178* 179 180 181 182 183 184 189
                                                                                  198 200
ptr_template                           based           pointer                  dcl 39 set ref 112 200*
pva_maximum_dimension_name_length
                                000124 automatic       fixed bin(17,0)          dcl 1-44 set ref 151* 159* 166* 166 178 178
pva_number_of_dimensions        000122 automatic       fixed bin(17,0)          dcl 1-40 set ref 141* 157* 178 178
pva_number_of_vector_slots      000123 automatic       fixed bin(17,0)          dcl 1-42 set ref 122* 178 178
s_fixed_real_desc                      constant        fixed bin(17,0)          initial dcl 2-1 ref 95 116 138 145
s_fixed_real_template                  based           fixed bin(17,0)          dcl 38 ref 122 141 151
scale                           000110 automatic       fixed bin(17,0)          dcl 27 set ref 94* 103* 114* 124* 137* 144* 161*
                                                                                  188*
size                            000106 automatic       fixed bin(17,0)          dcl 25 set ref 94* 103* 114* 124* 137* 144* 161* 166
                                                                                  188* 189
sub_err_                        000020 constant        entry                    external dcl 78 ref 95
type                            000104 automatic       fixed bin(17,0)          dcl 23 set ref 94* 95 103* 105 114* 116 124* 126
                                                                                  137* 138 144* 145 161* 163 163 188* 189 189
v_char_desc                            constant        fixed bin(17,0)          initial dcl 2-1 ref 163 189
vector_util_$err_no_operation   000010 constant        entry                    external dcl 73 ref 182 183
version                                based           fixed bin(35,0)          level 2 dcl 1-12 set ref 179*
work_area                              based           area(1024)               dcl 37 ref 178
work_area_ptr                   000120 automatic       pointer                  dcl 33 set ref 112* 178

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
D_fixed_cplx_desc                      internal static fixed bin(17,0)          initial dcl 2-1
D_fixed_real_desc                      internal static fixed bin(17,0)          initial dcl 2-1
D_float_cplx_desc                      internal static fixed bin(17,0)          initial dcl 2-1
D_float_real_desc                      internal static fixed bin(17,0)          initial dcl 2-1
Envptr_supplied_call_type              internal static fixed bin(18,0)          initial unsigned unaligned dcl 4-29
Interseg_call_type                     internal static fixed bin(18,0)          initial unsigned unaligned dcl 4-29
Quick_call_type                        internal static fixed bin(18,0)          initial unsigned unaligned dcl 4-29
area_desc                              internal static fixed bin(17,0)          initial dcl 2-1
arg_list_with_envptr                   based           structure                level 1 dcl 4-17
bit_desc                               internal static fixed bin(17,0)          initial dcl 2-1
d_fixed_cplx_desc                      internal static fixed bin(17,0)          initial dcl 2-1
d_fixed_real_desc                      internal static fixed bin(17,0)          initial dcl 2-1
d_float_cplx_desc                      internal static fixed bin(17,0)          initial dcl 2-1
d_float_real_desc                      internal static fixed bin(17,0)          initial dcl 2-1
desc_                                  automatic       structure                level 1 dcl 3-3
entry_desc                             internal static fixed bin(17,0)          initial dcl 2-1
file_desc                              internal static fixed bin(17,0)          initial dcl 2-1
label_desc                             internal static fixed bin(17,0)          initial dcl 2-1
offset_desc                            internal static fixed bin(17,0)          initial dcl 2-1
print_vector                           based           structure                level 1 unaligned dcl 1-31
print_vector_ptr                       automatic       pointer                  dcl 1-52
pv_maximum_value_length                automatic       fixed bin(17,0)          dcl 1-48
pv_number_of_dimensions                automatic       fixed bin(17,0)          dcl 1-46
s_fixed_cplx_desc                      internal static fixed bin(17,0)          initial dcl 2-1
s_float_cplx_desc                      internal static fixed bin(17,0)          initial dcl 2-1
s_float_real_desc                      internal static fixed bin(17,0)          initial dcl 2-1
structure_desc                         internal static fixed bin(17,0)          initial dcl 2-1
v_bit_desc                             internal static fixed bin(17,0)          initial dcl 2-1
v_char_template                        based           varying char             dcl 40

NAMES DECLARED BY EXPLICIT CONTEXT.
init_print_vector_array         000057 constant        entry                    external dcl 7
vu_init_print_vector_array      000067 constant        entry                    external dcl 7

NAMES DECLARED BY CONTEXT OR IMPLICATION.
length                                                 builtin function         ref 166
max                                                    builtin function         ref 166
rtrim                                                  builtin function         ref 166 189

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1302        1330    1152        1312
Length      1606    1152        26         242     130           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
init_print_vector_array             166 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
init_print_vector_array  000100 names_given                 init_print_vector_array
                         000101 arg_list_arg_count          init_print_vector_array
                         000102 arg_list_ptr                init_print_vector_array
                         000104 type                        init_print_vector_array
                         000105 packed                      init_print_vector_array
                         000106 size                        init_print_vector_array
                         000107 ndims                       init_print_vector_array
                         000110 scale                       init_print_vector_array
                         000111 CODE_ARG_IDX                init_print_vector_array
                         000112 PVA_PTR_ARG_IDX             init_print_vector_array
                         000114 p_code_ptr                  init_print_vector_array
                         000116 nargs                       init_print_vector_array
                         000117 arg_idx                     init_print_vector_array
                         000120 work_area_ptr               init_print_vector_array
                         000122 pva_number_of_dimensions    init_print_vector_array
                         000123 pva_number_of_vector_slots  init_print_vector_array
                         000124 pva_maximum_dimension_name_length
                                                            init_print_vector_array
                         000126 print_vector_array_ptr      init_print_vector_array

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              ext_entry           alloc_based

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
cu_$arg_count                 cu_$arg_list_ptr              decode_descriptor_            sub_err_
vector_util_$err_no_operation

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$bad_arg          error_table_$fatal_error




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     20 000053         7 000056        88 000075        89 000104        90 000106        91 000115        92 000117
     94 000121        95 000144       100 000217       101 000224       103 000225       105 000250       108 000253
    109 000256       112 000257       114 000264       116 000307       119 000312       120 000315       122 000316
    124 000322       126 000345       129 000350       130 000353       137 000354       138 000377       141 000402
    143 000406       144 000407       145 000432       148 000435       149 000440       151 000441       153 000445
    156 000446       157 000450       159 000455       160 000456       161 000467       163 000512       166 000517
    169 000542       172 000543       173 000546       175 000547       178 000551       179 000606       180 000610
    181 000611       182 000645       183 000704       184 000742       185 000773       188 001005       189 001030
    194 001104       195 001107       197 001110       198 001113       200 001141       201 001146


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
