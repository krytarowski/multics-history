	COMPILATION LISTING OF SEGMENT probe_print_pl1_attr_
	Compiled by: Multics PL/I Compiler, Release 33e, of October 6, 1992
	Compiled at: CGI                             
	Compiled on: 2000-05-05_1828.80_Fri_mdt
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1988                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 
       14 /****^  HISTORY COMMENTS:
       15*  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
       16*     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
       17*     Added format control comment to make the source more readable.
       18*                                                   END HISTORY COMMENTS */
       19 
       20 
       21 /* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */
       22 
       23 /****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
       24 
       25 probe_print_pl1_attr_:
       26   proc (P_probe_info_ptr, P_refp, P_long_sw, P_code);
       27 
       28   /* Jim Davis 25 May 79 */
       29 
       30   dcl P_probe_info_ptr	ptr parameter;
       31   dcl P_refp		ptr parameter;
       32   dcl P_long_sw		bit (1) aligned parameter;
       33   dcl P_code		fixed bin (35) parameter;
       34 
       35   dcl 1 P_reference		aligned like reference_node based (refp);
       36   dcl refp		ptr;
       37   dcl sym			ptr;	/* to symbol node */
       38   dcl sp			ptr;
       39   dcl next		ptr;
       40   dcl (addrel, bin, fixed, hbound, lbound, null, rtrim, substr)
       41 			builtin;
       42   dcl (
       43       ioa_$ioa_switch,
       44       ioa_$rsnnl
       45       )			entry options (variable);
       46   dcl probe_block_name_	entry (ptr, ptr, bit (1) aligned)
       47 			returns (char (256) varying);
       48 
       49   probe_info_ptr = P_probe_info_ptr;
       50   P_code = 0;
       51   refp = P_refp;
       52   sym = P_reference.symbol_ptr;
       53 
       54   if sym = null () then do;
       55       if P_reference.type = ext_procedure_runtime_dtype
       56         then call ioa_$ioa_switch (probe_info.output_switch, "external entry")
       57 	        ;
       58         else call ioa_$ioa_switch (probe_info.output_switch,
       59 	        "unknown type (^d)", P_reference.type);
       60 
       61       /* sure wish there was a way to display attributes of external entries */
       62       return;
       63     end;				/* non-symbol case */
       64 
       65   call ioa_$ioa_switch (probe_info.output_switch, "^a ^a ^a ^a",
       66        get_pl1_attr_str (sym),
       67        get_pl1_class_str (sym),
       68        get_pl1_dims_str (sym, 0, "1"b),
       69        get_pl1_level_str (sym));
       70 
       71   if fixed (sym -> runtime_symbol.type, 6) = structure_dtype & P_long_sw
       72     then
       73       do sp = addrel (sym, sym -> runtime_symbol.son) /* for son */
       74 	 repeat next while (sp ^= null ());
       75       call print_member (sp, fixed (sym -> runtime_symbol.ndims, 6));
       76       if sp -> runtime_symbol.brother ^= (18)"0"b
       77         then next = addrel (sp, sp -> runtime_symbol.brother);
       78         else next = null ();
       79     end;
       80 
       81   call ioa_$ioa_switch (probe_info.output_switch, "Declared in ^a",
       82        probe_block_name_ (probe_info_ptr, P_reference.source_info_ptr, "0"b));
       83   return;
       84 
       85 print_member:
       86   proc (s, inheritance);
       87 
       88   dcl s			ptr parameter;
       89 				/* to a symbol node */
       90   dcl inheritance		fixed bin parameter;
       91   dcl q			ptr;	/* to son and sons' siblings */
       92   dcl nextq		ptr;
       93   dcl level		fixed bin;
       94 
       95   level = fixed (s -> runtime_symbol.level, 6);
       96 
       97   call ioa_$ioa_switch (probe_info.output_switch, "  ^vx^d ^A ^a ^a",
       98        (level - 2) * 2, level, addrel (s, s -> runtime_symbol.name),
       99        get_pl1_dims_str (s, inheritance, "0"b),
      100        get_pl1_attr_str (s));
      101 
      102   if s -> runtime_symbol.son ^= (18)"0"b
      103     then
      104       do q = addrel (s, s -> runtime_symbol.son) /* for our son, and for */
      105 	 repeat nextq /* all his brothers, until */
      106 	 while (q ^= null ());	/* curse PL/I, becasue it lacks do-until */
      107       call print_member (q, fixed (s -> runtime_symbol.ndims, 6));
      108       if q -> runtime_symbol.brother = (18)"0"b
      109         then nextq = null ();		/* have reached the end */
      110         else nextq = addrel (q, q -> runtime_symbol.brother);
      111     end;				/* son,sibling loop */
      112 
      113   end print_member;
      114 
      115 get_pl1_attr_str:
      116   proc (sym) returns (char (168) varying);
      117 
      118   dcl sym			ptr parameter;
      119 
      120   dcl attr		char (168) varying;
      121   dcl temp		char (64) varying;
      122   dcl type		fixed bin;
      123   dcl p			ptr;
      124 
      125   dcl ptr			builtin;
      126 
      127   type = fixed (sym -> runtime_symbol.type, 6);
      128   if ^legal_type (type)
      129     then
      130          return ("?");
      131 
      132   attr = "";
      133   temp = "";
      134 
      135   if data_type_info_$info (type).computational
      136     then if data_type_info_$info (type).arithmetic
      137 	 then do;
      138 	   attr = attr
      139 	        ||
      140 	        branch_on (data_type_info_$info (type).complex, " complex",
      141 	        "");
      142 	   attr = attr
      143 	        ||
      144 	        branch_on (data_type_info_$info (type).fixed, " fixed",
      145 	        " float");
      146 	   attr = attr
      147 	        ||
      148 	        branch_on (data_type_info_$info (type).decimal, " dec",
      149 	        " bin");
      150 
      151 	   if data_type_info_$info (type).arithmetic_attributes.fixed
      152 	     then if sym -> runtime_symbol.scale = "0"b
      153 		  then call ioa_$rsnnl (" (^d)", temp, (0),
      154 			  sym -> runtime_symbol.size);
      155 		  else call ioa_$rsnnl (" (^d,^d)", temp, (0),
      156 			  sym -> runtime_symbol.size,
      157 			  bit8_to_bin8 (sym -> runtime_symbol.scale));
      158 	     else call ioa_$rsnnl (" (^d)", temp, (0),
      159 		     sym -> runtime_symbol.size);
      160 				/* float, has no scale */
      161 	   attr = attr || rtrim (temp);
      162 
      163 	   attr = attr
      164 	        ||
      165 	        branch_on (data_type_info_$info (type)
      166 	        .arithmetic_attributes.signed, "", " unsigned");
      167 	 end;			/* arithmetic */
      168 	 else do;			/* string or picture */
      169 	   if data_type_info_$info (type).char_string
      170 	        | data_type_info_$info (type).bit_string
      171 	     then do;
      172 	       attr = attr
      173 		  ||
      174 		  branch_on (data_type_info_$info (type).varying,
      175 		  " varying", "");
      176 	       attr = attr
      177 		  ||
      178 		  branch_on (data_type_info_$info (type).char_string,
      179 		  " char", " bit");
      180 	       attr = attr || "(";
      181 	       attr = attr || value (sym -> runtime_symbol.size, sym);
      182 	       attr = attr || ")";
      183 	     end;			/* strings */
      184 	   else if type = picture_runtime_dtype
      185 	     then do;
      186 	       p = ptr (sym, sym -> runtime_symbol.size);
      187 				/* to picture_info_block */
      188 	       if p -> picture_image.type = picture_complexfix_type |
      189 		  p -> picture_image.type = picture_complexflo_type
      190 	         then attr = attr || " complex picture";
      191 	         else attr = attr || " picture";
      192 	       attr = attr || " """;	/* to begin picture with */
      193 	       attr = attr || p -> picture_image.chars;
      194 	       attr = attr || """";
      195 	     end;			/* picture */
      196 	   else attr = "?";		/* some random computational type */
      197 	 end;			/* non-arithmetic computational */
      198     else do;			/* non-computational */
      199       if type = pointer_dtype
      200         then attr = " pointer";
      201       else if type = offset_dtype
      202         then do;
      203 	attr = " offset";
      204 	if sym -> runtime_symbol.size ^= 0
      205 	  then do;
      206 	    attr = attr || "(";
      207 	    attr = attr
      208 	         || symbol_name (addrel (sym, sym -> runtime_symbol.size));
      209 	    attr = attr || ")";
      210 	  end;			/* getting default area */
      211         end;			/* offset */
      212       else if type = label_dtype
      213         then attr = " label variable";
      214       else if type = entry_dtype
      215         then attr = " entry variable";
      216       else if type = structure_dtype
      217         then attr = " structure";
      218       else if type = area_dtype
      219         then do;
      220 	attr = " area (";
      221 	attr = attr || value (sym -> runtime_symbol.size, sym);
      222 	attr = attr || ")";
      223         end;
      224       else if type = file_dtype
      225         then attr = " file";
      226       else if type = label_constant_runtime_dtype
      227         then attr = " label";
      228       else if type = int_entry_runtime_dtype
      229         then attr = " internal entry";
      230       else if type = ext_entry_runtime_dtype
      231         then attr = " external entry";
      232       else if type = ext_procedure_runtime_dtype
      233         then attr = " external procedure";
      234       else attr = "?";
      235     end;				/* non-computational */
      236 
      237   attr = attr || branch_on (sym -> runtime_symbol.bits.packed, " unal", "");
      238   return (attr);
      239 
      240 branch_on:
      241   proc (t_or_f, true_str, false_str) returns (char (*));
      242   dcl t_or_f		bit (1) unal parameter;
      243   dcl true_str		char (*) parameter;
      244   dcl false_str		char (*) parameter;
      245 
      246   if t_or_f
      247     then return (true_str);
      248     else return (false_str);
      249   end branch_on;
      250 
      251   end get_pl1_attr_str;
      252 
      253 get_pl1_dims_str:
      254   proc (P_sym, P_inherited, P_verbose) returns (char (168) varying);
      255 
      256   dcl P_sym		ptr parameter;
      257   dcl P_inherited		fixed bin parameter;
      258   dcl P_verbose		bit (1) aligned parameter;
      259 
      260   dcl n			fixed bin;
      261   dcl i			fixed bin;
      262   dcl dims_str		char (168) varying;
      263 
      264   n = fixed (P_sym -> runtime_symbol.ndims, 6);
      265   if n <= P_inherited
      266     then dims_str = "";
      267     else do;
      268       if P_verbose
      269         then dims_str = " dimension (";
      270         else dims_str = " (";
      271       do i = P_inherited + 1 to n;
      272         if P_sym -> runtime_symbol.bounds (i).lower ^= 1
      273 	then do;
      274 	  dims_str =
      275 	       dims_str
      276 	       || value (P_sym -> runtime_symbol.bounds (i).lower, P_sym);
      277 	  dims_str = dims_str || ":";
      278 	end;
      279         dims_str =
      280 	   dims_str
      281 	   || value (P_sym -> runtime_symbol.bounds (i).upper, P_sym);
      282         if i < n			/* more to come */
      283 	then dims_str = dims_str || ",";
      284       end;			/* dims loop */
      285       dims_str = dims_str || ")";
      286     end;
      287   return (dims_str);
      288   end get_pl1_dims_str;
      289 
      290 get_pl1_level_str:
      291   proc (symb) returns (char (168) varying);
      292   dcl symb		ptr parameter;
      293 
      294   dcl l			fixed bin;/* level */
      295   dcl level_str		char (168) varying;
      296 
      297   l = fixed (symb -> runtime_symbol.level, 6);
      298   if l < 1
      299     then
      300          return ("");
      301   else if l = 1
      302     then
      303          return (" level 1");
      304   else do;
      305     call ioa_$rsnnl (" level ^d in ^a", level_str, (0), l,
      306          king_of_structure ());
      307     return (level_str);
      308   end;
      309 
      310 king_of_structure:
      311   proc () returns (char (64));
      312   dcl i			fixed bin;
      313   dcl p			ptr;
      314 
      315   p = symb;
      316   do i = l - 1 to 1 by -1;
      317     p = addrel (p, p -> runtime_symbol.father);
      318   end;
      319   return (addrel (p, p -> runtime_symbol.name) -> acc.string);
      320   end king_of_structure;
      321 
      322   end get_pl1_level_str;
      323 
      324 get_pl1_class_str:
      325   proc (symb) returns (char (168) varying);
      326   dcl symb		ptr parameter;
      327   dcl based_class		internal static fixed bin
      328 			options (constant) init (3);
      329   dcl c			fixed bin;/* the class */
      330   dcl class_str		char (168) varying;
      331 
      332   dcl class_name		(15) char (20) internal static
      333 			options (constant) init (
      334 			"automatic", "automatic", "based",
      335 			"internal static",
      336 			"external static", "internal controlled",
      337 			"external controlled", "parameter",
      338 			"parameter", "?", "?", "constant", "constant",
      339 			"?", "?");
      340 
      341   c = fixed (symb -> runtime_symbol.class, 4);
      342   class_str = class_name (c);
      343 
      344   if c = based_class
      345     then if symb -> runtime_symbol.location
      346 	    ^= (18)"0"b /* got implicit qualifier */
      347 	 then do;
      348 	   class_str = class_str || " (";
      349 	   class_str =
      350 	        class_str
      351 	        ||
      352 	        symbol_name (addrel (symb, symb -> runtime_symbol.location))
      353 	        ;
      354 	   class_str = class_str || ")";
      355 	 end;			/* getting implicit locator */
      356   return (class_str);
      357   end get_pl1_class_str;
      358 
      359 
      360   /* VARIOUS HANDY LITTLE PROCS */
      361 
      362 symbol_name:
      363   proc (sp) returns (char (256) varying);
      364 
      365   dcl sp			ptr parameter;
      366 				/* to the symbol node */
      367   dcl name		char (256) varying;
      368 				/* its fully qualified name */
      369   dcl p			ptr;
      370 
      371   p = sp;
      372   name = addrel (p, p -> runtime_symbol.name) -> acc.string;
      373 				/* our name */
      374   do while (fixed (p -> runtime_symbol.level, 6) > 1);
      375 				/* invariant: we have a father */
      376     p = addrel (p, p -> runtime_symbol.father);
      377 				/* point to father */
      378     name = addrel (p, p -> runtime_symbol.name) -> acc.string || "." || name;
      379 				/* copy name */
      380   end;
      381   return (name);
      382   end symbol_name;
      383 
      384 
      385 
      386 legal_type:
      387   proc (stype) returns (bit (1) aligned);
      388   dcl stype		fixed bin parameter;
      389 
      390   return (stype >= lbound (data_type_info_$info, 1) &
      391        stype <= hbound (data_type_info_$info, 1));
      392   end legal_type;
      393 
      394 
      395 bit8_to_bin8:
      396   proc (b) returns (fixed bin (8));
      397   dcl b			bit (8) parameter;
      398 
      399   if bin (b, 8) <= 127
      400     then return (bin (b, 8));
      401     else return (bin (b, 8) - 256);
      402   end bit8_to_bin8;
      403 
      404 
      405 value:
      406   procedure (ev, context) returns (character (10) varying);
      407 
      408   dcl ev			fixed bin (35) parameter;
      409 				/* input: an encoded value */
      410   dcl context		ptr parameter;
      411 				/* input: to symbol node of ev */
      412 
      413   dcl val			fixed bin (35);
      414   dcl 1 an_ev		aligned like encoded_value;
      415   dcl refp		ptr;	/* to data itself, for decoding */
      416   dcl block_ptr		ptr;
      417   dcl stack_ptr		ptr;
      418   dcl linkage_ptr		ptr;
      419   dcl based_class		bit (4) internal static options (constant)
      420 			init ("0011"b);
      421   dcl code		fixed bin (35);
      422   dcl (char, ltrim, null, rtrim, string, unspec)
      423 			builtin;
      424 
      425   dcl stu_$get_implicit_qualifier
      426 			entry (ptr, ptr, ptr, ptr, ptr) returns (ptr);
      427   dcl stu_$decode_runtime_value
      428 			entry (fixed bin (35), ptr, ptr, ptr, ptr, ptr,
      429 			fixed bin (35)) returns (fixed bin (35));
      430 
      431   /* GLOBAL imports P_reference */
      432 
      433   string (an_ev) = unspec (ev);
      434   if an_ev.flag = "10"b
      435     then do;			/* it is encoded */
      436       stack_ptr = P_reference.source_info_ptr -> source_info.stack_ptr;
      437       linkage_ptr =
      438 	 P_reference.source_info_ptr -> source_info.seg_info_ptr
      439 	 -> seg_info.linkage_ptr;
      440       block_ptr = P_reference.source_info_ptr -> source_info.block_ptr;
      441       refp = P_reference.address_ptr;
      442       if refp = null
      443         then if context -> runtime_symbol.class = based_class
      444 				/* can try for implicit */
      445 	     then refp =
      446 		     stu_$get_implicit_qualifier (block_ptr, context,
      447 		     stack_ptr, linkage_ptr, block_ptr);
      448       val = stu_$decode_runtime_value (ev, block_ptr, stack_ptr, linkage_ptr,
      449 	 block_ptr, refp, code);
      450       if code ^= 0
      451         then
      452 	   return ("*");
      453     end;
      454     else val = ev;
      455   return (rtrim (ltrim (char (val))));
      456 
      457   end value;
      458 
  1     1 /*	BEGIN INCLUDE FILE probe_info.incl.pl1		*/
  1     2 
  1     3 
  1     4 
  1     5 /****^  HISTORY COMMENTS:
  1     6*  1) change(88-10-24,WAAnderson), approve(88-10-24,MCR7952),
  1     7*     audit(88-10-24,RWaters), install(88-10-27,MR12.2-1194):
  1     8*     Added field 'retry_using_main' to add new C feature.
  1     9*                                                   END HISTORY COMMENTS */
  1    10 
  1    11 
  1    12 /* Created: 04/22/79 W. Olin Sibert, from subsystem_info	
  1    13*   Modified: 22 Sept 79 JRd to remove: 	default (ptr & (auto|based)) init (null ());
  1    14*   Added flags.setting_break 08/22/83 Steve Herbst
  1    15*   Added flags.executing_quit_request 01/15/85 Steve Herbst
  1    16**/
  1    17 
  1    18 dcl 1 probe_info aligned based (probe_info_ptr),		/* standard data for a probe invocation */
  1    19     2 probe_info_version fixed bin,			/* version of this structure */
  1    20 
  1    21     2 static_info_ptr pointer unaligned,		/* pointer to static information structure */
  1    22     2 modes_ptr pointer unaligned,			/* pointer to probe_modes structure */
  1    23 
  1    24     2 ptr_to_current_source ptr,			/* current_source is based on this */
  1    25     2 ptr_to_initial_source ptr,			/* initial_source is based on this */
  1    26     2 machine_cond_ptr pointer,			/* pointer to machine conditions, if we faulted to get here */
  1    27 
  1    28     2 token_info aligned,				/* information about token chain currently being processed */
  1    29       3 first_token pointer unaligned,			/* first token in chain */
  1    30       3 ct pointer unaligned, 			/* pointer to current token; updated in MANY places */
  1    31       3 end_token bit (18) aligned,			/* token type at which to stop scanning token chain */
  1    32       3 buffer_ptr pointer unaligned,			/* pointer to input buffer */
  1    33       3 buffer_lth fixed bin (21),			/* and length */
  1    34 
  1    35     2 random_info aligned,
  1    36       3 current_stack_frame pointer unaligned,		/* stack frame pointer for frame in which probe was invoked */
  1    37       3 input_type fixed bin, 			/* current input type */
  1    38       3 language_type fixed bin,			/* current language being processed */
  1    39       3 return_method fixed bin,			/* how we should return after exiting probe */
  1    40       3 entry_method fixed bin,			/* how we got here in the first place */
  1    41       3 pad1 (19) bit (36) aligned,
  1    42 
  1    43     2 break_info,					/* break info -- only interesting if we got here via a break */
  1    44       3 break_slot_ptr pointer,			/* pointer to break slot -- non-null IFF at a break */
  1    45       3 last_break_slot_ptr pointer unaligned,		/* pointer to previous break slot, not presently used */
  1    46       3 break_reset bit (1) aligned,			/* this break has been reset by somebody further on */
  1    47       3 real_break_return_loc pointer,			/* where to REALLY return to, modulo previous bit */
  1    48 
  1    49     2 probe_area_info,				/* information about various probe areas */
  1    50       3 break_segment_ptr pointer unaligned,		/* pointer to Personid.probe */
  1    51       3 break_area_ptr pointer unaligned,		/* pointer to area in break segment */
  1    52       3 scratch_area_ptr pointer unaligned,		/* pointer to probe scratch seg in process dir */
  1    53       3 probe_area_ptr pointer unaligned,		/* This area lasts as long as an invocation of probe. */
  1    54       3 work_area_ptr pointer unaligned,		/* This area lasts as long as the current request line */
  1    55       3 expression_area_ptr pointer unaligned,		/* This area lasts as long as the current command */
  1    56 
  1    57     2 flags aligned,				/* this, in particular, should be saved and restored correctly */
  1    58      (3 execute,					/* "1"b => execute requests, "0"b => just check syntax */
  1    59       3 in_listener,				/* ON => in probe listener loop */
  1    60       3 executing_request,				/* ON => executing a request */
  1    61       3 in_interpret_line,				/* executing in probe_listen_$interpret_line */
  1    62       3 setting_break,				/* executing "after" or "before": check syntax of "if" */
  1    63       3 executing_quit_request,			/* to prevent error looping during "quit" request */
  1    64       3 pad (30)) bit (1) unaligned,
  1    65 
  1    66     2 io_switches,					/* switches probe will do normal I/O on */
  1    67       3 input_switch pointer,
  1    68       3 output_switch pointer,
  1    69 
  1    70     2 error_info,					/* information about the last error saved for later printing */
  1    71       3 error_code fixed bin (35),
  1    72       3 error_message char (300) varying,
  1    73 
  1    74     2 listener_info,				/* internal use by probe listener */
  1    75       3 request_name character (32) varying,		/* primary name of the request being processed */
  1    76       3 abort_probe_label label variable,
  1    77       3 abort_line_label label variable,
  1    78       3 depth fixed binary,				/* count of active invocations of probe */
  1    79       3 previous pointer unaligned,			/* -> previous invocation's info */
  1    80       3 next pointer unaligned,
  1    81 
  1    82     2 end_of_probe_info pointer aligned,
  1    83     2 retry_using_main fixed bin aligned;
  1    84    
  1    85 
  1    86 dcl  probe_info_ptr pointer;
  1    87 
  1    88 dcl  probe_info_version fixed bin static options (constant) initial (1);
  1    89 
  1    90 dcl  probe_info_version_1 fixed bin static options (constant) initial (1);
  1    91 
  1    92 dcl  scratch_area area based (probe_info.scratch_area_ptr);
  1    93 dcl  probe_area area based (probe_info.probe_area_ptr);
  1    94 dcl  work_area area based (probe_info.work_area_ptr);
  1    95 dcl  expression_area area based (probe_info.expression_area_ptr);
  1    96 
  1    97 /*	END INCLUDE FILE probe_info.incl.pl1		*/
      459 
  2     1 /* BEGIN INCLUDE FILE ... probe_source_info.incl.pl1
  2     2*
  2     3*  James R. Davis 2 July 79 */
  2     4 
  2     5 dcl 1 source_info based aligned,
  2     6       2 stmnt_map_entry_index fixed bin,		/* index in stmnt map for this stmnt */
  2     7       2 instruction_ptr ptr,				/* to last instruction executed  */
  2     8       2 block_ptr ptr,				/* to runtime_block node */
  2     9       2 stack_ptr ptr,				/* to a stack frame */
  2    10       2 entry_ptr ptr,				/* to entry seq. for this proc */
  2    11       2 seg_info_ptr ptr;				/* to seg_info */
  2    12 
  2    13 dcl 1 current_source aligned like source_info based (probe_info.ptr_to_current_source);
  2    14 dcl 1 initial_source aligned like source_info based (probe_info.ptr_to_initial_source);
  2    15 
  2    16 /* END INCLUDE FILE ... probe_source_info.incl.pl1 */
      460 
  3     1 /* BEGIN INCLUDE FILE ... probe_seg_info.incl.pl1
  3     2*
  3     3*   25 June 79 JRDavis
  3     4*
  3     5*   Modified  7 April 1983, TO - Add fields for character offset/line
  3     6*	correction per file.
  3     7**/
  3     8 
  3     9 dcl 1 seg_info based aligned,				/* place to remember information about object seg */
  3    10     2 language_type fixed bin,			/* language of source program */
  3    11     2 bits aligned,
  3    12       3 ignore_case bit (1) unal,
  3    13       3 bound_segment bit (1) unaligned,
  3    14       3 component bit (1) unaligned,
  3    15       3 pad bit (33) unal,
  3    16     2 names,					/* where to find it */
  3    17       3 directory_name character (168) unal,		/* what directory */
  3    18       3 entry_name character (32) unal,			/* what segment */
  3    19       3 segname character (32) unal,			/* procedure segname definition */
  3    20     2 identifier fixed bin (71),			/* time of object creation */
  3    21     2 pointers,					/* location of various parts of segment */
  3    22       3 symbol_header_ptr ptr unal,			/* to symbol section */
  3    23       3 original_source_ptr ptr unal,			/* to segment source map */
  3    24       3 statement_map_ptr ptr unal,			/* to segment statement map */
  3    25       3 break_info ptr unal,				/* for unbound segments, and start of chain for
  3    26*						   bound ones, -> break_map !obsolete, I think! */
  3    27       3 chain ptr unal,				/* to entry for next component if bound */
  3    28       3 linkage_ptr ptr unal,				/* to linkage section */
  3    29     2 bounds aligned,				/* structure of bounds information */
  3    30       3 text_bounds,
  3    31         4 start fixed bin (35),
  3    32         4 end fixed bin (35),
  3    33       3 symbol_bounds,
  3    34         4 start fixed bin (35),
  3    35         4 end fixed bin (35),
  3    36     2 map_size fixed bin,				/* size of statement map */
  3    37     2 error_code fixed bin (35),			/* errors encoutered while getting info, are recorded here */
  3    38     2 bound_create_time fixed bin (71),			/* time seg containing was bound or compiled. */
  3    39     2 bound_sym_header ptr unal,			/* to sym. section header for bound seg */
  3    40     2 pad (1) fixed bin (35),
  3    41 
  3    42     2 nfiles fixed bin,
  3    43     2 per_file (seg_info_nfiles refer (seg_info.nfiles)),
  3    44       3 file_pointers ptr unal,
  3    45       3 break_line (0:3) fixed bin (18) unsigned unaligned;
  3    46 
  3    47 dcl  seg_info_nfiles fixed bin;			/* for allocation purposes */
  3    48 
  3    49 
  3    50 /* END INCLUDE FILE ... probe_seg_info.incl.pl1 */
      461 
  4     1 /*	BEGIN INCLUDE FILE probe_references.incl.pl1	*/
  4     2 
  4     3 /****^  HISTORY COMMENTS:
  4     4*  1) change(88-09-20,WAAnderson), approve(88-09-20,MCR7952),
  4     5*     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
  4     6*     Added new field (c_symbol) for C-Probe support.
  4     7*  2) change(88-10-28,WAAnderson), approve(88-10-28,MCR7952),
  4     8*     audit(88-10-31,RWaters), install(88-11-11,MR12.2-1210):
  4     9*     Added new field (c_sub_c_ptr) for C-Probe_support.
  4    10*                                                   END HISTORY COMMENTS */
  4    11 
  4    12 /*	Split out of probe_tokens, 04/22/79 WOS 	*/
  4    13 /*       modified for probe variables Feb 19 80 JRD         */
  4    14 /*   Modified June 83 JMAthane to add "type_ptr" and "builtin" fields */
  4    15 
  4    16      dcl	   1 reference_node	      aligned based,	/* information about a reference */
  4    17 	     2 symbol_ptr	      pointer aligned,	/* to symbol table entry for reference */
  4    18 	     2 type_ptr	      pointer aligned,	/* to symbol table entry for type (null if none) */
  4    19 	     2 address_ptr	      pointer aligned,	/* to location of variable */
  4    20 	     2 base_addr	      pointer aligned,	/* pointer on which whole symbol is based */
  4    21 	     2 source_info_ptr    pointer aligned,	/* to symbol structure for reference */
  4    22 
  4    23 	     2 name	      char (256) unaligned varying, /* symbol name */
  4    24 
  4    25 	     2 type	      fixed bin (35),	/* data type */
  4    26 	     2 descriptor	      fixed bin (35),	/* type || packed */
  4    27 	     2 precision	      fixed bin (35),	/* scale and precision */
  4    28 	     2 flags,
  4    29 	       3 packed	      bit (1) unal,		/* data is in packed format */
  4    30 	       3 constant	      bit (1) unal,		/* data is really a constant */
  4    31 	       3 cross_section    bit (1) unal,		/* reference is an array cross-section */
  4    32 	       3 function	      bit (1) unal,		/* reference is function value */
  4    33 	       3 octal	      bit (1) unal,		/* indicates that this is the octal bif */
  4    34 	       3 star_extent      bit (1) unal,		/* reference is a star subscript for father */
  4    35 	       3 have_generation  bit (1) unal,		/* this reference has an explicitly specified generation */
  4    36 	       3 pseudo_var	      bit (1) unal,		/* it is ok to assign to it */
  4    37 	       3 probe_variable   bit (1) unal,
  4    38 	       3 path	      bit (1) unal,		/* it's a pathname/virtual entry */
  4    39 	       3 builtin	      bit (1) unal,		/* probe builtinvalue */
  4    40 	       3 c_ptr_to_char    bit (1)  unal,
  4    41                  3 c_sub_c_ptr      bit (1)  unal,
  4    42 	       3 pad2	      bit (23) unal,
  4    43 
  4    44 	     2 optional_info,			/* information which may or may not be present */
  4    45 	       3 argument_list    pointer unaligned,	/* pointer to reference_arg_list */
  4    46 	       3 subscript_ptr    pointer unaligned,	/* pointer to reference_subscripts */
  4    47 	       3 n_arguments      fixed bin,		/* number of arguments in argument list */
  4    48 	       3 n_subscripts     fixed bin,		/* number of subscripts present */
  4    49 
  4    50 	     2 constant_token_ptr pointer unaligned,	/* pointer to constant token if this is a constant */
  4    51 	     2 subscript_refs_ptr pointer unaligned,	/* pointer to array of subscript reference node pointers */
  4    52 	     2 invocation_level   fixed bin,		/* invocation level number ("[-17]") for this reference */
  4    53 	     2 probe_var_info_ptr ptr unal,		/* only if flags.probe_variable */
  4    54                2 c_symbol_ptr  ptr unal,
  4    55 	     2 pad1	      (9) pointer unaligned,
  4    56 	     2 end_of_reference_node pointer aligned;
  4    57 
  4    58 
  4    59      dcl	   1 reference_arg_list   aligned based,	/* argument list; based on reference.argument_list */
  4    60 	     2 number	      fixed bin,		/* number of arguments actually present */
  4    61 	     2 node	      (16) pointer aligned;	/* reference node pointers for each argument */
  4    62 
  4    63 
  4    64      dcl	   1 reference_subscripts aligned based,	/* subscript array; based on reference.subscript_ptr */
  4    65 	     2 number	      fixed bin,		/* number actually present */
  4    66 	     2 value	      (2, 16) fixed bin (24); /* values for lower and upper bound for each */
  4    67 
  4    68 
  4    69      dcl	   1 subscript_reference_ptrs aligned based,	/* array of pointers to subscript reference nodes */
  4    70 	     2 ptr	      (2, 16) pointer aligned;
  4    71 
  4    72 /*	END INCLUDE FILE probe_references.incl.pl1	*/
      462 
  5     1 /* BEGIN INCLUDE FILE ... std_descriptor_types.incl.pl1 */
  5     2 
  5     3 
  5     4 /****^  HISTORY COMMENTS:
  5     5*  1) change(86-09-05,JMAthane), approve(86-09-05,MCR7525),
  5     6*     audit(86-09-11,Martinson), install(86-11-12,MR12.0-1208):
  5     7*     Added pascal_string_type_dtype descriptor type.  Its number is 87.
  5     8*     Objects of this type are PASCAL string types.
  5     9*  2) change(88-09-20,WAAnderson), approve(88-09-20,MCR7952),
  5    10*     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
  5    11*     Added the new C types.
  5    12*                                                   END HISTORY COMMENTS */
  5    13 
  5    14 /* This include file defines mnemonic names for the Multics
  5    15*   standard descriptor types, using both pl1 and cobol terminology.
  5    16*   PG 780613
  5    17*   JRD 790530
  5    18*   JRD 791016
  5    19*   MBW 810731
  5    20*   TGO 830614 Add hex types.
  5    21*   Modified June 83 JMAthane to add PASCAL data types
  5    22*   TGO 840120 Add float dec extended and generic, float binary generic
  5    23**/
  5    24 
  5    25      dcl	   (real_fix_bin_1_dtype  init (1),
  5    26 	   real_fix_bin_2_dtype   init (2),
  5    27 	   real_flt_bin_1_dtype   init (3),
  5    28 	   real_flt_bin_2_dtype   init (4),
  5    29 	   cplx_fix_bin_1_dtype   init (5),
  5    30 	   cplx_fix_bin_2_dtype   init (6),
  5    31 	   cplx_flt_bin_1_dtype   init (7),
  5    32 	   cplx_flt_bin_2_dtype   init (8),
  5    33 	   real_fix_dec_9bit_ls_dtype init (9),
  5    34 	   real_flt_dec_9bit_dtype init (10),
  5    35 	   cplx_fix_dec_9bit_ls_dtype init (11),
  5    36 	   cplx_flt_dec_9bit_dtype init (12),
  5    37 	   pointer_dtype	      init (13),
  5    38 	   offset_dtype	      init (14),
  5    39 	   label_dtype	      init (15),
  5    40 	   entry_dtype	      init (16),
  5    41 	   structure_dtype	      init (17),
  5    42 	   area_dtype	      init (18),
  5    43 	   bit_dtype	      init (19),
  5    44 	   varying_bit_dtype      init (20),
  5    45 	   char_dtype	      init (21),
  5    46 	   varying_char_dtype     init (22),
  5    47 	   file_dtype	      init (23),
  5    48 	   real_fix_dec_9bit_ls_overp_dtype init (29),
  5    49 	   real_fix_dec_9bit_ts_overp_dtype init (30),
  5    50 	   real_fix_bin_1_uns_dtype init (33),
  5    51 	   real_fix_bin_2_uns_dtype init (34),
  5    52 	   real_fix_dec_9bit_uns_dtype init (35),
  5    53 	   real_fix_dec_9bit_ts_dtype init (36),
  5    54 	   real_fix_dec_4bit_uns_dtype init (38),	/* digit-aligned */
  5    55 	   real_fix_dec_4bit_ts_dtype init (39),	/* byte-aligned */
  5    56 	   real_fix_dec_4bit_bytealigned_uns_dtype init (40), /* COBOL */
  5    57 	   real_fix_dec_4bit_ls_dtype init (41),	/* digit-aligned */
  5    58 	   real_flt_dec_4bit_dtype init (42),		/* digit-aligned */
  5    59 	   real_fix_dec_4bit_bytealigned_ls_dtype init (43),
  5    60 	   real_flt_dec_4bit_bytealigned_dtype init (44),
  5    61 	   cplx_fix_dec_4bit_bytealigned_ls_dtype init (45),
  5    62 	   cplx_flt_dec_4bit_bytealigned_dtype init (46),
  5    63 	   real_flt_hex_1_dtype   init (47),
  5    64 	   real_flt_hex_2_dtype   init (48),
  5    65 	   cplx_flt_hex_1_dtype   init (49),
  5    66 	   cplx_flt_hex_2_dtype   init (50),
  5    67 	   c_typeref_dtype        init (54),
  5    68 	   c_enum_dtype           init (55),
  5    69              c_enum_const_dtype     init (56),
  5    70 	   c_union_dtype          init (57),
  5    71 	   algol68_straight_dtype init (59),
  5    72 	   algol68_format_dtype   init (60),
  5    73 	   algol68_array_descriptor_dtype init (61),
  5    74 	   algol68_union_dtype    init (62),
  5    75 
  5    76 	   cobol_comp_6_dtype     init (1),
  5    77 	   cobol_comp_7_dtype     init (1),
  5    78 	   cobol_display_ls_dtype init (9),
  5    79 	   cobol_structure_dtype  init (17),
  5    80 	   cobol_char_string_dtype init (21),
  5    81 	   cobol_display_ls_overp_dtype init (29),
  5    82 	   cobol_display_ts_overp_dtype init (30),
  5    83 	   cobol_display_uns_dtype init (35),
  5    84 	   cobol_display_ts_dtype init (36),
  5    85 	   cobol_comp_8_uns_dtype init (38),		/* digit aligned */
  5    86 	   cobol_comp_5_ts_dtype  init (39),		/* byte aligned */
  5    87 	   cobol_comp_5_uns_dtype init (40),
  5    88 	   cobol_comp_8_ls_dtype  init (41),		/* digit aligned */
  5    89 	   real_flt_dec_extended_dtype init (81),	/* 9-bit exponent */
  5    90 	   cplx_flt_dec_extended_dtype init (82),	/* 9-bit exponent */
  5    91 	   real_flt_dec_generic_dtype init (83),	/* generic float decimal */
  5    92 	   cplx_flt_dec_generic_dtype init (84),
  5    93 	   real_flt_bin_generic_dtype init (85),	/* generic float binary */
  5    94 	   cplx_flt_bin_generic_dtype init (86)) fixed bin internal static options (constant);
  5    95 
  5    96      dcl	   (ft_integer_dtype      init (1),
  5    97 	   ft_real_dtype	      init (3),
  5    98 	   ft_double_dtype	      init (4),
  5    99 	   ft_complex_dtype	      init (7),
  5   100 	   ft_complex_double_dtype init (8),
  5   101 	   ft_external_dtype      init (16),
  5   102 	   ft_logical_dtype	      init (19),
  5   103 	   ft_char_dtype	      init (21),
  5   104 	   ft_hex_real_dtype      init (47),
  5   105 	   ft_hex_double_dtype    init (48),
  5   106 	   ft_hex_complex_dtype   init (49),
  5   107 	   ft_hex_complex_double_dtype init (50)
  5   108 	   )		      fixed bin internal static options (constant);
  5   109 
  5   110      dcl	   (algol68_short_int_dtype init (1),
  5   111 	   algol68_int_dtype      init (1),
  5   112 	   algol68_long_int_dtype init (2),
  5   113 	   algol68_real_dtype     init (3),
  5   114 	   algol68_long_real_dtype init (4),
  5   115 	   algol68_compl_dtype    init (7),
  5   116 	   algol68_long_compl_dtype init (8),
  5   117 	   algol68_bits_dtype     init (19),
  5   118 	   algol68_bool_dtype     init (19),
  5   119 	   algol68_char_dtype     init (21),
  5   120 	   algol68_byte_dtype     init (21),
  5   121 	   algol68_struct_struct_char_dtype init (22),
  5   122 	   algol68_struct_struct_bool_dtype init (20)
  5   123 	   )		      fixed bin internal static options (constant);
  5   124 
  5   125      dcl	   (label_constant_runtime_dtype init (24),
  5   126 	   int_entry_runtime_dtype init (25),
  5   127 	   ext_entry_runtime_dtype init (26),
  5   128 	   ext_procedure_runtime_dtype init (27),
  5   129 	   picture_runtime_dtype  init (63)
  5   130 	   )		      fixed bin internal static options (constant);
  5   131 
  5   132      dcl	   (pascal_integer_dtype  init (1),
  5   133 	   pascal_real_dtype      init (4),
  5   134 	   pascal_label_dtype     init (24),
  5   135 	   pascal_internal_procedure_dtype init (25),
  5   136 	   pascal_exportable_procedure_dtype init (26),
  5   137 	   pascal_imported_procedure_dtype init (27),
  5   138 	   pascal_typed_pointer_type_dtype init (64),
  5   139 	   pascal_char_dtype      init (65),
  5   140 	   pascal_boolean_dtype   init (66),
  5   141 	   pascal_record_file_type_dtype init (67),
  5   142 	   pascal_record_type_dtype init (68),
  5   143 	   pascal_set_dtype	      init (69),
  5   144 	   pascal_enumerated_type_dtype init (70),
  5   145 	   pascal_enumerated_type_element_dtype init (71),
  5   146 	   pascal_enumerated_type_instance_dtype init (72),
  5   147 	   pascal_user_defined_type_dtype init (73),
  5   148 	   pascal_user_defined_type_instance_dtype init (74),
  5   149 	   pascal_text_file_dtype init (75),
  5   150 	   pascal_procedure_type_dtype init (76),
  5   151 	   pascal_variable_formal_parameter_dtype init (77),
  5   152 	   pascal_value_formal_parameter_dtype init (78),
  5   153 	   pascal_entry_formal_parameter_dtype init (79),
  5   154 	   pascal_parameter_procedure_dtype init (80),
  5   155 	   pascal_string_type_dtype init (87)) fixed bin int static options (constant);
  5   156 
  5   157 
  5   158 /* END INCLUDE FILE ... std_descriptor_types.incl.pl1 */
      463 
  6     1 /*	BEGIN INCLUDE FILE ... runtime_symbol.incl.pl1 ... Modified 07/79 */
  6     2 
  6     3 dcl	1 runtime_symbol	aligned based,
  6     4 	2 flag		unal bit(1),	/* always "1"b for Version II */
  6     5 	2 use_digit	unal bit(1),	/* if "1"b and units are half words units are really digits */
  6     6 	2 array_units	unal bit(2),
  6     7 	2 units		unal bit(2),	/* addressing units */
  6     8 	2 type		unal bit(6),	/* data type */
  6     9 	2 level		unal bit(6),	/* structure level */
  6    10 	2 ndims		unal bit(6),	/* number of dimensions */
  6    11 	2 bits		unal,
  6    12 	  3 aligned	bit(1),
  6    13 	  3 packed	bit(1),
  6    14 	  3 simple	bit(1),
  6    15 	2 skip		unal bit(1),
  6    16 	2 scale		unal bit(8),	/* arithmetic scale factor */
  6    17 	2 name		unal bit(18),	/* rel ptr to acc name */
  6    18 	2 brother		unal bit(18),	/* rel ptr to brother entry */
  6    19 	2 father		unal bit(18),	/* rel ptr to father entry */
  6    20 	2 son		unal bit(18),	/* rel ptr to son entry */
  6    21 	2 address		unal,
  6    22 	  3 location	bit(18),		/* location in storage class */
  6    23 	  3 class		bit(4),		/* storage class */
  6    24 	  3 next		bit(14),		/* rel ptr to next of same class */
  6    25 	2 size		fixed bin(35),	/* encoded string|arith size */
  6    26 	2 offset		fixed bin(35),	/* encoded offset from address */
  6    27 	2 virtual_org	fixed bin(35),
  6    28 	2 bounds(1),
  6    29 	  3 lower		fixed bin(35),	/* encoded lower bound */
  6    30 	  3 upper		fixed bin(35),	/* encoded upper bound */
  6    31 	  3 multiplier	fixed bin(35);	/* encoded multiplier */
  6    32 
  6    33 dcl	1 runtime_bound	based,
  6    34 	2 lower		fixed bin(35),
  6    35 	2 upper		fixed bin(35),
  6    36 	2 multiplier	fixed bin(35);
  6    37 
  6    38 dcl	1 runtime_block	aligned based,
  6    39 	2 flag		unal bit(1),	/* always "1"b for Version II */
  6    40 	2 quick		unal bit(1),	/* "1"b if quick block */
  6    41 	2 fortran		unal bit(1),	/* "1"b if fortran program */
  6    42 	2 standard	unal bit(1),	/* "1"b if program has std obj segment */
  6    43 	2 owner_flag	unal bit(1),	/* "1"b if block has valid owner field */
  6    44 	2 skip		unal bit(1),
  6    45 	2 type		unal bit(6),	/* = 0 for a block node */
  6    46 	2 number		unal bit(6),	/* begin block number */
  6    47 	2 start		unal bit(18),	/* rel ptr to start of symbols */
  6    48 	2 name		unal bit(18),	/* rel ptr to name of proc */
  6    49 	2 brother		unal bit(18),	/* rel ptr to brother block */
  6    50 	2 father		unal bit(18),	/* rel ptr to father block */
  6    51 	2 son		unal bit(18),	/* rel ptr to son block */
  6    52 	2 map		unal,
  6    53 	  3 first		bit(18),		/* rel ptr to first word of map */
  6    54 	  3 last		bit(18),		/* rel ptr to last word of map */
  6    55 	2 entry_info	unal bit(18),	/* info about entry of quick block */
  6    56 	2 header		unal bit(18),	/* rel ptr to symbol header */
  6    57 	2 chain(4)	unal bit(18),	/* chain(i) is rel ptr to first symbol
  6    58*					   on start list with length >= 2**i */
  6    59 	2 token(0:5)	unal bit(18),	/* token(i) is rel ptr to first token
  6    60*					   on list with length >= 2 ** i */
  6    61 	2 owner		unal bit(18);	/* rel ptr to owner block */
  6    62 
  6    63 dcl	1 runtime_token	aligned based,
  6    64 	2 next		unal bit(18),	/* rel ptr to next token */
  6    65 	2 dcl		unal bit(18),	/* rel ptr to first dcl of this token */
  6    66 	2 name,				/* ACC */
  6    67 	  3 size		unal unsigned fixed bin (9), /* number of chars in token */
  6    68 	  3 string	unal char(n refer(runtime_token.size));
  6    69 
  6    70 dcl	1 encoded_value	aligned based,
  6    71 	2 flag		bit (2) unal,
  6    72 	2 code		bit (4) unal,
  6    73 	2 n1		bit (6) unal,
  6    74 	2 n2		bit (6) unal,
  6    75 	2 n3		bit (18) unal;
  6    76 
  6    77 /*	END INCLUDE FILE ... runtime_symbol.incl.pl1 */
      464 
  7     1 dcl	1 statement_map	aligned based,
  7     2 	2 location	bit(18) unaligned,
  7     3 	2 source_id	unaligned,
  7     4 	  3 file		bit(8),
  7     5 	  3 line		bit(14),
  7     6 	  3 statement	bit(5),
  7     7 	2 source_info	unaligned,
  7     8 	  3 start		bit(18),
  7     9 	  3 length	bit(9);
      465 
  8     1 /* BEGIN INCLUDE FILE --- acc.incl.pl1 
  8     2*
  8     3*James R. Davis 21 Nov 78
  8     4**/
  8     5 
  8     6 dcl 1 acc based aligned,
  8     7     2 num_chars fixed bin (9) unsigned unaligned,
  8     8     2 string char (0 refer (acc.num_chars)) unaligned;
  8     9 
  8    10 /* END INCLUDE FILE --- acc.incl.pl1 */
      466 
  9     1 /* BEGIN INCLUDE FILE ... data_type_info_.incl.pl1
  9     2*
  9     3*   attributes of each Multics data type.  You may not rely on the dimension never exceeding 64
  9     4*   James R. Davis 6 Apr 79
  9     5*   Modified JMAthane June 83 to add "type" bit field 
  9     6*   Upped bound from 64 to 80 10/18/83 S. Herbst
  9     7*   Added "hex" and "generic" bits 01/23/84 S. Herbst
  9     8*   Upped bound from 80 to 86 01/81/84 R. Gray
  9     9*   Upper bound from 86 to 87 JMAthane (for Pascal strings type dtype)
  9    10**/
  9    11 
  9    12      
  9    13 /****^  HISTORY COMMENTS:
  9    14*  1) change(86-09-05,JMAthane), approve(86-09-05,MCR7525),
  9    15*     audit(86-09-11,Martinson), install(86-11-12,MR12.0-1208):
  9    16*     The data_type_info array now has 87 entries instead of 86 due to
  9    17*     introduction of pascal_string_type_dtype.
  9    18*                                                   END HISTORY COMMENTS */
  9    19 
  9    20 dcl	   data_type_info_$version_number fixed bin external static;
  9    21      dcl	   data_type_info_this_version fixed bin internal static options (constant) init (1);
  9    22 
  9    23      dcl	   1 data_type_info_$info (87) aligned external static,
  9    24 	     2 computational      bit (1) unal,
  9    25 	     2 arithmetic	      bit (1) unal,
  9    26 	     2 arithmetic_attributes unal,		/* only valid if arithmetic */
  9    27 	       3 fixed	      bit (1) unal,		/* PL/I type */
  9    28 	       3 complex	      bit (1) unal,		/* PL/I mode */
  9    29 	       3 decimal	      bit (1) unal,		/* PL/I base */
  9    30 	       3 signed	      bit (1) unal,
  9    31 	       3 trailing_sign    bit (1) unal,		/* only valid if signed */
  9    32 	       3 decimal_attributes unal,		/* only valid if decimal */
  9    33 	         4 packed_dec     bit (1) unal,		/* 4 bits per digit or 9 */
  9    34 	         4 digit_aligned  bit (1) unal,		/* valid for packed_dec only */
  9    35 	         4 overpunched    bit (1) unal,
  9    36 	     2 char_string	      bit (1) unal,		/* valid for non-arithmetic */
  9    37 	     2 bit_string	      bit (1) unal,		/* valid for non-arithmetic */
  9    38 	     2 varying	      bit (1) unal,		/* for bit or char only */
  9    39 	     2 type	      bit (1) unal,		/* this symbol is a type */
  9    40 	     2 hex	      bit (1) unal,		/* a hexadecimal type (eg., hex floating point) */
  9    41 	     2 generic	      bit (1) unal,		/* eg., real_flt_dec_generic_dtype */
  9    42 	     2 pad	      bit (20) unal;
  9    43 
  9    44      dcl	   data_type_info_$ninebit_sign_chars char (2) external static;
  9    45      dcl	   data_type_info_$ninebit_digit_chars char (10) external static;
  9    46      dcl	   data_type_info_$ninebit_overpunched_sign_chars char (22) external static;
  9    47 
  9    48      dcl	   data_type_info_$max_decimal_precision fixed bin external static;
  9    49      dcl	   data_type_info_$max_float_binary_precision fixed bin external static;
  9    50      dcl	   data_type_info_$max_fixed_binary_precision fixed bin external static;
  9    51 
  9    52 
  9    53 /* END INCLUDE FILE ... data_type_info_.incl.pl1 */
      467 
 10     1 /* BEGIN INCLUDE FILE ... picture_image.incl.pl1
 10     2*
 10     3*   James R. Davis  12 Mar 79
 10     4**/
 10     5 
 10     6      dcl	   1 picture_image	      aligned based,
 10     7 	     2 type	      fixed bin (8) unal,
 10     8 	     2 prec	      fixed bin (8) unal,	/* precision or length of associated value */
 10     9 	     2 scale	      fixed bin (8) unal,	/* for both fixed and float pictures,
 10    10*							=ndigits after "v" - scale_factor */
 10    11 	     2 piclength	      fixed bin (8) unal,	/* length of picture_constant.chars, <64
 10    12*							=length of normalized-picture-string */
 10    13 	     2 varlength	      fixed bin (8) unal,	/* length of pictured variable in chars, <64
 10    14*							=length of normalized_picture_string - "k" and "v" */
 10    15 	     2 scalefactor	      fixed bin (8) unal,	/* value of pict-sc-f, -256<=x<256  */
 10    16 	     2 explength	      fixed bin (8) unal,	/* length of exp field for float */
 10    17 	     2 drift_character    char (1) unal,
 10    18 	     2 chars	      char (0 refer (picture_image.piclength)) aligned;
 10    19 
 10    20      dcl	   (
 10    21 	   picture_char_type      init (24),
 10    22 	   picture_realfix_type   init (25),
 10    23 	   picture_complexfix_type
 10    24 			      init (26),
 10    25 	   picture_realflo_type   init (27),
 10    26 	   picture_complexflo_type
 10    27 			      init (28)
 10    28 	   )		      fixed bin (8) unal static internal options (constant);
 10    29 
 10    30 /* END INCLUDE FILE  ... picture_image.incl.pl1  */
      468 
      469 
      470   end;				/* print_pl1_attr; */
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    05/05/00  1828.8  probe_print_pl1_attr_.pl1         >udd>sm>ds>w>ml>probe_print_pl1_attr_.pl1
459          1    10/27/88  1439.2  probe_info.incl.pl1               >ldd>incl>probe_info.incl.pl1
460          2    11/26/79  1420.6  probe_source_info.incl.pl1        >ldd>incl>probe_source_info.incl.pl1
461          3    11/02/83  1945.0  probe_seg_info.incl.pl1           >ldd>incl>probe_seg_info.incl.pl1
462          4    11/11/88  1701.5  probe_references.incl.pl1         >ldd>incl>probe_references.incl.pl1
463          5    10/26/88  1355.5  std_descriptor_types.incl.pl1     >ldd>incl>std_descriptor_types.incl.pl1
464          6    11/26/79  1420.6  runtime_symbol.incl.pl1           >ldd>incl>runtime_symbol.incl.pl1
465          7    05/06/74  1851.6  statement_map.incl.pl1            >ldd>incl>statement_map.incl.pl1
466          8    01/15/79  2302.9  acc.incl.pl1                      >ldd>incl>acc.incl.pl1
467          9    11/12/86  1848.0  data_type_info_.incl.pl1          >ldd>incl>data_type_info_.incl.pl1
468         10    06/28/79  1304.8  picture_image.incl.pl1            >ldd>incl>picture_image.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
P_code                                 parameter       fixed bin(35,0)          dcl 33 set ref 25 50*
P_inherited                            parameter       fixed bin(17,0)          dcl 257 ref 253 265 271
P_long_sw                              parameter       bit(1)                   dcl 32 ref 25 71
P_probe_info_ptr                       parameter       pointer                  dcl 30 ref 25 49
P_reference                            based           structure                level 1 dcl 35
P_refp                                 parameter       pointer                  dcl 31 ref 25 51
P_sym                                  parameter       pointer                  dcl 256 set ref 253 264 272 274 274* 279 279*
P_verbose                              parameter       bit(1)                   dcl 258 ref 253 268
acc                                    based           structure                level 1 dcl 8-6
addrel                                                 builtin function         dcl 40 ref 71 76 97 97 102 110 207 207 317 319 349
                                                                                  349 372 376 378
address                   3            based           structure                level 2 packed packed unaligned dcl 6-3
address_ptr               4            based           pointer                  level 2 dcl 35 ref 441
an_ev                           000101 automatic       structure                level 1 dcl 414 set ref 433*
area_dtype                             constant        fixed bin(17,0)          initial dcl 5-25 ref 218
arithmetic                0(01) 000016 external static bit(1)                   array level 2 packed packed unaligned dcl 9-23 ref
                                                                                  135
arithmetic_attributes
                          0(02) 000016 external static structure                array level 2 packed packed unaligned dcl 9-23
attr                            000100 automatic       varying char(168)        dcl 120 set ref 132* 138* 138 142* 142 146* 146 161*
                                                                                  161 163* 163 172* 172 176* 176 180* 180 181* 181
                                                                                  182* 182 188* 188 191* 191 192* 192 193* 193 194*
                                                                                  194 196* 199* 203* 206* 206 207* 207 209* 209 212*
                                                                                  214* 216* 220* 221* 221 222* 222 224* 226* 228*
                                                                                  230* 232* 234* 237* 237 238
b                                      parameter       bit(8)                   packed unaligned dcl 397 ref 395 399 399 401
based_class                            constant        bit(4)                   initial packed unaligned dcl 419 in procedure
                                                                                  "value" ref 442
based_class                            constant        fixed bin(17,0)          initial dcl 327 in procedure "get_pl1_class_str" ref
                                                                                  344
bin                                                    builtin function         dcl 40 ref 399 399 401
bit_string                0(11) 000016 external static bit(1)                   array level 2 packed packed unaligned dcl 9-23 ref
                                                                                  169
bits                      0(24)        based           structure                level 2 packed packed unaligned dcl 6-3
block_ptr                       000104 automatic       pointer                  dcl 416 in procedure "value" set ref 440* 442* 442*
                                                                                  448* 448*
block_ptr                 4            based           pointer                  level 2 in structure "source_info" dcl 2-5
                                                                                  in procedure "probe_print_pl1_attr_" ref 440
bounds                    7            based           structure                array level 2 dcl 6-3
brother                   1(18)        based           bit(18)                  level 2 packed packed unaligned dcl 6-3 ref 76 76
                                                                                  108 110
c                               000214 automatic       fixed bin(17,0)          dcl 329 set ref 341* 342 344
char                                                   builtin function         dcl 422 ref 455
char_string               0(10) 000016 external static bit(1)                   array level 2 packed packed unaligned dcl 9-23 set
                                                                                  ref 169 176*
chars                     2            based           char                     level 2 dcl 10-6 ref 193
class                     3(18)        based           bit(4)                   level 3 packed packed unaligned dcl 6-3 ref 341 442
class_name                      000000 constant        char(20)                 initial array packed unaligned dcl 332 ref 342
class_str                       000215 automatic       varying char(168)        dcl 330 set ref 342* 348* 348 349* 349 354* 354 356
code                            000112 automatic       fixed bin(35,0)          dcl 421 set ref 448* 450
complex                   0(03) 000016 external static bit(1)                   array level 3 packed packed unaligned dcl 9-23 set
                                                                                  ref 138*
computational                   000016 external static bit(1)                   array level 2 packed packed unaligned dcl 9-23 ref
                                                                                  135
context                                parameter       pointer                  dcl 410 set ref 405 442 442*
data_type_info_$info            000016 external static structure                array level 1 dcl 9-23 set ref 390 390
decimal                   0(04) 000016 external static bit(1)                   array level 3 packed packed unaligned dcl 9-23 set
                                                                                  ref 146*
dims_str                        000102 automatic       varying char(168)        dcl 262 set ref 265* 268* 270* 274* 274 277* 277
                                                                                  279* 279 282* 282 285* 285 287
encoded_value                          based           structure                level 1 dcl 6-70
entry_dtype                            constant        fixed bin(17,0)          initial dcl 5-25 ref 214
ev                                     parameter       fixed bin(35,0)          dcl 408 set ref 405 433 448* 454
ext_entry_runtime_dtype                constant        fixed bin(17,0)          initial dcl 5-125 ref 230
ext_procedure_runtime_dtype            constant        fixed bin(17,0)          initial dcl 5-125 ref 55 232
false_str                              parameter       char                     packed unaligned dcl 244 ref 240 248
father                    2            based           bit(18)                  level 2 packed packed unaligned dcl 6-3 ref 317 376
file_dtype                             constant        fixed bin(17,0)          initial dcl 5-25 ref 224
fixed                                                  builtin function         dcl 40 in procedure "probe_print_pl1_attr_" ref 71
                                                                                  75 75 95 107 107 127 264 297 341 374
fixed                     0(02) 000016 external static bit(1)                   array level 3 in structure "data_type_info_$info"
                                                                                  packed packed unaligned dcl 9-23 in procedure
                                                                                  "probe_print_pl1_attr_" set ref 142* 151
flag                            000101 automatic       bit(2)                   level 2 packed packed unaligned dcl 414 set ref 434
hbound                                                 builtin function         dcl 40 ref 390
i                               000202 automatic       fixed bin(17,0)          dcl 312 in procedure "king_of_structure" set ref
                                                                                  316*
i                               000101 automatic       fixed bin(17,0)          dcl 261 in procedure "get_pl1_dims_str" set ref 271*
                                                                                  272 274 279 282*
inheritance                            parameter       fixed bin(17,0)          dcl 90 set ref 85 97*
int_entry_runtime_dtype                constant        fixed bin(17,0)          initial dcl 5-125 ref 228
io_switches              66            based           structure                level 2 dcl 1-18
ioa_$ioa_switch                 000010 constant        entry                    external dcl 42 ref 55 58 65 81 97
ioa_$rsnnl                      000012 constant        entry                    external dcl 42 ref 151 155 158 305
l                               000120 automatic       fixed bin(17,0)          dcl 294 set ref 297* 298 301 305* 316
label_constant_runtime_dtype           constant        fixed bin(17,0)          initial dcl 5-125 ref 226
label_dtype                            constant        fixed bin(17,0)          initial dcl 5-25 ref 212
lbound                                                 builtin function         dcl 40 ref 390
level                     0(12)        based           bit(6)                   level 2 in structure "runtime_symbol" packed packed
                                                                                  unaligned dcl 6-3 in procedure
                                                                                  "probe_print_pl1_attr_" ref 95 297 374
level                           000104 automatic       fixed bin(17,0)          dcl 93 in procedure "print_member" set ref 95* 97
                                                                                  97*
level_str                       000121 automatic       varying char(168)        dcl 295 set ref 305* 307
linkage_ptr                     000110 automatic       pointer                  dcl 418 in procedure "value" set ref 437* 442* 448*
linkage_ptr             103            based           pointer                  level 3 in structure "seg_info" packed packed
                                                                                  unaligned dcl 3-9 in procedure
                                                                                  "probe_print_pl1_attr_" ref 437
location                  3            based           bit(18)                  level 3 packed packed unaligned dcl 6-3 ref 344 349
                                                                                  349
lower                     7            based           fixed bin(35,0)          array level 3 dcl 6-3 set ref 272 274*
ltrim                                                  builtin function         dcl 422 ref 455
n                               000100 automatic       fixed bin(17,0)          dcl 260 set ref 264* 265 271 282
name                      1            based           bit(18)                  level 2 in structure "runtime_symbol" packed packed
                                                                                  unaligned dcl 6-3 in procedure
                                                                                  "probe_print_pl1_attr_" ref 97 97 319 372 378
name                            000100 automatic       varying char(256)        dcl 367 in procedure "symbol_name" set ref 372* 378*
                                                                                  378 381
ndims                     0(18)        based           bit(6)                   level 2 packed packed unaligned dcl 6-3 ref 75 75
                                                                                  107 107 264
next                            000106 automatic       pointer                  dcl 39 set ref 76* 78* 79
nextq                           000102 automatic       pointer                  dcl 92 set ref 108* 110* 111
null                                                   builtin function         dcl 40 in procedure "probe_print_pl1_attr_" ref 54
                                                                                  71 78 102 108
null                                                   builtin function         dcl 422 in procedure "value" ref 442
num_chars                              based           fixed bin(9,0)           level 2 packed packed unsigned unaligned dcl 8-6 ref
                                                                                  319 372 378
offset_dtype                           constant        fixed bin(17,0)          initial dcl 5-25 ref 201
output_switch            70            based           pointer                  level 3 dcl 1-18 set ref 55* 58* 65* 81* 97*
p                               000176 automatic       pointer                  dcl 123 in procedure "get_pl1_attr_str" set ref 186*
                                                                                  188 188 193
p                               000202 automatic       pointer                  dcl 369 in procedure "symbol_name" set ref 371* 372
                                                                                  372 374 376* 376 376 378 378
p                               000204 automatic       pointer                  dcl 313 in procedure "king_of_structure" set ref
                                                                                  315* 317* 317 317 319 319
packed                    0(25)        based           bit(1)                   level 3 packed packed unaligned dcl 6-3 set ref 237*
piclength                 0(27)        based           fixed bin(8,0)           level 2 packed packed unaligned dcl 10-6 ref 193
picture_complexfix_type                constant        fixed bin(8,0)           initial packed unaligned dcl 10-20 ref 188
picture_complexflo_type                constant        fixed bin(8,0)           initial packed unaligned dcl 10-20 ref 188
picture_image                          based           structure                level 1 dcl 10-6
picture_runtime_dtype                  constant        fixed bin(17,0)          initial dcl 5-125 ref 184
pointer_dtype                          constant        fixed bin(17,0)          initial dcl 5-25 ref 199
pointers                 76            based           structure                level 2 dcl 3-9
probe_block_name_               000014 constant        entry                    external dcl 46 ref 81
probe_info                             based           structure                level 1 dcl 1-18
probe_info_ptr                  000110 automatic       pointer                  dcl 1-86 set ref 49* 55 58 65 81 81* 97
ptr                                                    builtin function         dcl 125 ref 186
q                               000100 automatic       pointer                  dcl 91 set ref 102* 102* 107* 108 110 110*
reference_node                         based           structure                level 1 dcl 4-16
refp                            000102 automatic       pointer                  dcl 415 in procedure "value" set ref 441* 442 442*
                                                                                  448*
refp                            000100 automatic       pointer                  dcl 36 in procedure "probe_print_pl1_attr_" set ref
                                                                                  51* 52 55 58 81 436 437 440 441
rtrim                                                  builtin function         dcl 40 in procedure "probe_print_pl1_attr_" ref 161
rtrim                                                  builtin function         dcl 422 in procedure "value" ref 455
runtime_symbol                         based           structure                level 1 dcl 6-3
s                                      parameter       pointer                  dcl 88 set ref 85 95 97 97 97 97 97* 97* 102 102 102
                                                                                  107 107
scale                     0(28)        based           bit(8)                   level 2 packed packed unaligned dcl 6-3 set ref 151
                                                                                  155* 155*
seg_info                               based           structure                level 1 dcl 3-9
seg_info_ptr             12            based           pointer                  level 2 dcl 2-5 ref 437
signed                    0(05) 000016 external static bit(1)                   array level 3 packed packed unaligned dcl 9-23 set
                                                                                  ref 163*
size                      4            based           fixed bin(35,0)          level 2 dcl 6-3 set ref 151* 155* 158* 181* 186 204
                                                                                  207 207 221*
son                       2(18)        based           bit(18)                  level 2 packed packed unaligned dcl 6-3 ref 71 102
                                                                                  102
source_info                            based           structure                level 1 dcl 2-5
source_info_ptr          10            based           pointer                  level 2 dcl 35 set ref 81* 436 437 440
sp                              000104 automatic       pointer                  dcl 38 in procedure "probe_print_pl1_attr_" set ref
                                                                                  71* 71* 75* 76 76 76*
sp                                     parameter       pointer                  dcl 365 in procedure "symbol_name" ref 362 371
stack_ptr                       000106 automatic       pointer                  dcl 417 in procedure "value" set ref 436* 442* 448*
stack_ptr                 6            based           pointer                  level 2 in structure "source_info" dcl 2-5
                                                                                  in procedure "probe_print_pl1_attr_" ref 436
string                    0(09)        based           char                     level 2 in structure "acc" packed packed unaligned
                                                                                  dcl 8-6 in procedure "probe_print_pl1_attr_" ref
                                                                                  319 372 378
string                                                 builtin function         dcl 422 in procedure "value" set ref 433*
structure_dtype                        constant        fixed bin(17,0)          initial dcl 5-25 ref 71 216
stu_$decode_runtime_value       000022 constant        entry                    external dcl 427 ref 448
stu_$get_implicit_qualifier     000020 constant        entry                    external dcl 425 ref 442
stype                                  parameter       fixed bin(17,0)          dcl 388 ref 386 390 390
sym                                    parameter       pointer                  dcl 118 in procedure "get_pl1_attr_str" set ref 115
                                                                                  127 151 151 155 155 155 158 181 181* 186 186 204
                                                                                  207 207 207 207 221 221* 237
sym                             000102 automatic       pointer                  dcl 37 in procedure "probe_print_pl1_attr_" set ref
                                                                                  52* 54 65* 65* 65* 65* 71 71 71 75 75
symb                                   parameter       pointer                  dcl 326 in procedure "get_pl1_class_str" ref 324 341
                                                                                  344 349 349 349 349
symb                                   parameter       pointer                  dcl 292 in procedure "get_pl1_level_str" ref 290 297
                                                                                  315
symbol_ptr                             based           pointer                  level 2 dcl 35 ref 52
t_or_f                                 parameter       bit(1)                   packed unaligned dcl 242 ref 240 246
temp                            000153 automatic       varying char(64)         dcl 121 set ref 133* 151* 155* 158* 161
true_str                               parameter       char                     packed unaligned dcl 243 ref 240 246
type                      0(06)        based           bit(6)                   level 2 in structure "runtime_symbol" packed packed
                                                                                  unaligned dcl 6-3 in procedure
                                                                                  "probe_print_pl1_attr_" ref 71 127
type                    113            based           fixed bin(35,0)          level 2 in structure "P_reference" dcl 35
                                                                                  in procedure "probe_print_pl1_attr_" set ref 55
                                                                                  58*
type                            000174 automatic       fixed bin(17,0)          dcl 122 in procedure "get_pl1_attr_str" set ref 127*
                                                                                  128* 135 135 138 142 146 151 163 169 169 172 176
                                                                                  184 199 201 212 214 216 218 224 226 228 230 232
type                                   based           fixed bin(8,0)           level 2 in structure "picture_image" packed packed
                                                                                  unaligned dcl 10-6 in procedure
                                                                                  "probe_print_pl1_attr_" ref 188 188
unspec                                                 builtin function         dcl 422 ref 433
upper                    10            based           fixed bin(35,0)          array level 3 dcl 6-3 set ref 279*
val                             000100 automatic       fixed bin(35,0)          dcl 413 set ref 448* 454* 455
varying                   0(12) 000016 external static bit(1)                   array level 2 packed packed unaligned dcl 9-23 set
                                                                                  ref 172*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
algol68_array_descriptor_dtype         internal static fixed bin(17,0)          initial dcl 5-25
algol68_bits_dtype                     internal static fixed bin(17,0)          initial dcl 5-110
algol68_bool_dtype                     internal static fixed bin(17,0)          initial dcl 5-110
algol68_byte_dtype                     internal static fixed bin(17,0)          initial dcl 5-110
algol68_char_dtype                     internal static fixed bin(17,0)          initial dcl 5-110
algol68_compl_dtype                    internal static fixed bin(17,0)          initial dcl 5-110
algol68_format_dtype                   internal static fixed bin(17,0)          initial dcl 5-25
algol68_int_dtype                      internal static fixed bin(17,0)          initial dcl 5-110
algol68_long_compl_dtype               internal static fixed bin(17,0)          initial dcl 5-110
algol68_long_int_dtype                 internal static fixed bin(17,0)          initial dcl 5-110
algol68_long_real_dtype                internal static fixed bin(17,0)          initial dcl 5-110
algol68_real_dtype                     internal static fixed bin(17,0)          initial dcl 5-110
algol68_short_int_dtype                internal static fixed bin(17,0)          initial dcl 5-110
algol68_straight_dtype                 internal static fixed bin(17,0)          initial dcl 5-25
algol68_struct_struct_bool_dtype       internal static fixed bin(17,0)          initial dcl 5-110
algol68_struct_struct_char_dtype       internal static fixed bin(17,0)          initial dcl 5-110
algol68_union_dtype                    internal static fixed bin(17,0)          initial dcl 5-25
bit_dtype                              internal static fixed bin(17,0)          initial dcl 5-25
c_enum_const_dtype                     internal static fixed bin(17,0)          initial dcl 5-25
c_enum_dtype                           internal static fixed bin(17,0)          initial dcl 5-25
c_typeref_dtype                        internal static fixed bin(17,0)          initial dcl 5-25
c_union_dtype                          internal static fixed bin(17,0)          initial dcl 5-25
char_dtype                             internal static fixed bin(17,0)          initial dcl 5-25
cobol_char_string_dtype                internal static fixed bin(17,0)          initial dcl 5-25
cobol_comp_5_ts_dtype                  internal static fixed bin(17,0)          initial dcl 5-25
cobol_comp_5_uns_dtype                 internal static fixed bin(17,0)          initial dcl 5-25
cobol_comp_6_dtype                     internal static fixed bin(17,0)          initial dcl 5-25
cobol_comp_7_dtype                     internal static fixed bin(17,0)          initial dcl 5-25
cobol_comp_8_ls_dtype                  internal static fixed bin(17,0)          initial dcl 5-25
cobol_comp_8_uns_dtype                 internal static fixed bin(17,0)          initial dcl 5-25
cobol_display_ls_dtype                 internal static fixed bin(17,0)          initial dcl 5-25
cobol_display_ls_overp_dtype           internal static fixed bin(17,0)          initial dcl 5-25
cobol_display_ts_dtype                 internal static fixed bin(17,0)          initial dcl 5-25
cobol_display_ts_overp_dtype           internal static fixed bin(17,0)          initial dcl 5-25
cobol_display_uns_dtype                internal static fixed bin(17,0)          initial dcl 5-25
cobol_structure_dtype                  internal static fixed bin(17,0)          initial dcl 5-25
cplx_fix_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 5-25
cplx_fix_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 5-25
cplx_fix_dec_4bit_bytealigned_ls_dtype internal static fixed bin(17,0)          initial dcl 5-25
cplx_fix_dec_9bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 5-25
cplx_flt_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 5-25
cplx_flt_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 5-25
cplx_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 5-25
cplx_flt_dec_4bit_bytealigned_dtype    internal static fixed bin(17,0)          initial dcl 5-25
cplx_flt_dec_9bit_dtype                internal static fixed bin(17,0)          initial dcl 5-25
cplx_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 5-25
cplx_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 5-25
cplx_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 5-25
cplx_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 5-25
current_source                         based           structure                level 1 dcl 2-13
data_type_info_$max_decimal_precision  external static fixed bin(17,0)          dcl 9-48
data_type_info_$max_fixed_binary_precision
                                       external static fixed bin(17,0)          dcl 9-50
data_type_info_$max_float_binary_precision
                                       external static fixed bin(17,0)          dcl 9-49
data_type_info_$ninebit_digit_chars    external static char(10)                 packed unaligned dcl 9-45
data_type_info_$ninebit_overpunched_sign_chars
                                       external static char(22)                 packed unaligned dcl 9-46
data_type_info_$ninebit_sign_chars     external static char(2)                  packed unaligned dcl 9-44
data_type_info_$version_number         external static fixed bin(17,0)          dcl 9-20
data_type_info_this_version            internal static fixed bin(17,0)          initial dcl 9-21
expression_area                        based           area(1024)               dcl 1-95
ft_char_dtype                          internal static fixed bin(17,0)          initial dcl 5-96
ft_complex_double_dtype                internal static fixed bin(17,0)          initial dcl 5-96
ft_complex_dtype                       internal static fixed bin(17,0)          initial dcl 5-96
ft_double_dtype                        internal static fixed bin(17,0)          initial dcl 5-96
ft_external_dtype                      internal static fixed bin(17,0)          initial dcl 5-96
ft_hex_complex_double_dtype            internal static fixed bin(17,0)          initial dcl 5-96
ft_hex_complex_dtype                   internal static fixed bin(17,0)          initial dcl 5-96
ft_hex_double_dtype                    internal static fixed bin(17,0)          initial dcl 5-96
ft_hex_real_dtype                      internal static fixed bin(17,0)          initial dcl 5-96
ft_integer_dtype                       internal static fixed bin(17,0)          initial dcl 5-96
ft_logical_dtype                       internal static fixed bin(17,0)          initial dcl 5-96
ft_real_dtype                          internal static fixed bin(17,0)          initial dcl 5-96
initial_source                         based           structure                level 1 dcl 2-14
pascal_boolean_dtype                   internal static fixed bin(17,0)          initial dcl 5-132
pascal_char_dtype                      internal static fixed bin(17,0)          initial dcl 5-132
pascal_entry_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 5-132
pascal_enumerated_type_dtype           internal static fixed bin(17,0)          initial dcl 5-132
pascal_enumerated_type_element_dtype   internal static fixed bin(17,0)          initial dcl 5-132
pascal_enumerated_type_instance_dtype  internal static fixed bin(17,0)          initial dcl 5-132
pascal_exportable_procedure_dtype      internal static fixed bin(17,0)          initial dcl 5-132
pascal_imported_procedure_dtype        internal static fixed bin(17,0)          initial dcl 5-132
pascal_integer_dtype                   internal static fixed bin(17,0)          initial dcl 5-132
pascal_internal_procedure_dtype        internal static fixed bin(17,0)          initial dcl 5-132
pascal_label_dtype                     internal static fixed bin(17,0)          initial dcl 5-132
pascal_parameter_procedure_dtype       internal static fixed bin(17,0)          initial dcl 5-132
pascal_procedure_type_dtype            internal static fixed bin(17,0)          initial dcl 5-132
pascal_real_dtype                      internal static fixed bin(17,0)          initial dcl 5-132
pascal_record_file_type_dtype          internal static fixed bin(17,0)          initial dcl 5-132
pascal_record_type_dtype               internal static fixed bin(17,0)          initial dcl 5-132
pascal_set_dtype                       internal static fixed bin(17,0)          initial dcl 5-132
pascal_string_type_dtype               internal static fixed bin(17,0)          initial dcl 5-132
pascal_text_file_dtype                 internal static fixed bin(17,0)          initial dcl 5-132
pascal_typed_pointer_type_dtype        internal static fixed bin(17,0)          initial dcl 5-132
pascal_user_defined_type_dtype         internal static fixed bin(17,0)          initial dcl 5-132
pascal_user_defined_type_instance_dtype
                                       internal static fixed bin(17,0)          initial dcl 5-132
pascal_value_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 5-132
pascal_variable_formal_parameter_dtype internal static fixed bin(17,0)          initial dcl 5-132
picture_char_type                      internal static fixed bin(8,0)           initial packed unaligned dcl 10-20
picture_realfix_type                   internal static fixed bin(8,0)           initial packed unaligned dcl 10-20
picture_realflo_type                   internal static fixed bin(8,0)           initial packed unaligned dcl 10-20
probe_area                             based           area(1024)               dcl 1-93
probe_info_version                     internal static fixed bin(17,0)          initial dcl 1-88
probe_info_version_1                   internal static fixed bin(17,0)          initial dcl 1-90
real_fix_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 5-25
real_fix_bin_1_uns_dtype               internal static fixed bin(17,0)          initial dcl 5-25
real_fix_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 5-25
real_fix_bin_2_uns_dtype               internal static fixed bin(17,0)          initial dcl 5-25
real_fix_dec_4bit_bytealigned_ls_dtype internal static fixed bin(17,0)          initial dcl 5-25
real_fix_dec_4bit_bytealigned_uns_dtype
                                       internal static fixed bin(17,0)          initial dcl 5-25
real_fix_dec_4bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 5-25
real_fix_dec_4bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 5-25
real_fix_dec_4bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 5-25
real_fix_dec_9bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 5-25
real_fix_dec_9bit_ls_overp_dtype       internal static fixed bin(17,0)          initial dcl 5-25
real_fix_dec_9bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 5-25
real_fix_dec_9bit_ts_overp_dtype       internal static fixed bin(17,0)          initial dcl 5-25
real_fix_dec_9bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 5-25
real_flt_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 5-25
real_flt_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 5-25
real_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 5-25
real_flt_dec_4bit_bytealigned_dtype    internal static fixed bin(17,0)          initial dcl 5-25
real_flt_dec_4bit_dtype                internal static fixed bin(17,0)          initial dcl 5-25
real_flt_dec_9bit_dtype                internal static fixed bin(17,0)          initial dcl 5-25
real_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 5-25
real_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 5-25
real_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 5-25
real_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 5-25
reference_arg_list                     based           structure                level 1 dcl 4-59
reference_subscripts                   based           structure                level 1 dcl 4-64
runtime_block                          based           structure                level 1 dcl 6-38
runtime_bound                          based           structure                level 1 unaligned dcl 6-33
runtime_token                          based           structure                level 1 dcl 6-63
scratch_area                           based           area(1024)               dcl 1-92
seg_info_nfiles                        automatic       fixed bin(17,0)          dcl 3-47
statement_map                          based           structure                level 1 dcl 7-1
subscript_reference_ptrs               based           structure                level 1 dcl 4-69
substr                                                 builtin function         dcl 40
varying_bit_dtype                      internal static fixed bin(17,0)          initial dcl 5-25
varying_char_dtype                     internal static fixed bin(17,0)          initial dcl 5-25
work_area                              based           area(1024)               dcl 1-94

NAMES DECLARED BY EXPLICIT CONTEXT.
bit8_to_bin8                    003253 constant        entry                    internal dcl 395 ref 155 155
branch_on                       002420 constant        entry                    internal dcl 240 ref 138 142 146 163 172 176 237
get_pl1_attr_str                001027 constant        entry                    internal dcl 115 ref 65 97
get_pl1_class_str               003020 constant        entry                    internal dcl 324 ref 65
get_pl1_dims_str                002464 constant        entry                    internal dcl 253 ref 65 97
get_pl1_level_str               002663 constant        entry                    internal dcl 290 ref 65
king_of_structure               002757 constant        entry                    internal dcl 310 ref 305 305
legal_type                      003240 constant        entry                    internal dcl 386 ref 128
print_member                    000632 constant        entry                    internal dcl 85 ref 75 107
probe_print_pl1_attr_           000317 constant        entry                    external dcl 25
symbol_name                     003124 constant        entry                    internal dcl 362 ref 207 349
value                           003274 constant        entry                    internal dcl 405 ref 181 221 274 279

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      3712        3736    3530        3722
Length      4332    3530        24         360     161           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
probe_print_pl1_attr_               600 external procedure  is an external procedure.  
print_member                        208 internal procedure  calls itself recursively.  
get_pl1_attr_str                    259 internal procedure  is called by several nonquick procedures.  
branch_on                            66 internal procedure  uses returns(char(*)) or returns(bit(*)).  
get_pl1_dims_str                    126 internal procedure  is called by several nonquick procedures.  
get_pl1_level_str                       internal procedure  shares stack frame of external procedure probe_print_pl1_attr_.  
king_of_structure                       internal procedure  shares stack frame of external procedure probe_print_pl1_attr_.  
get_pl1_class_str                       internal procedure  shares stack frame of external procedure probe_print_pl1_attr_.  
symbol_name                         136 internal procedure  is called by several nonquick procedures.  
legal_type                              internal procedure  shares stack frame of internal procedure get_pl1_attr_str.  
bit8_to_bin8                            internal procedure  shares stack frame of internal procedure get_pl1_attr_str.  
value                               110 internal procedure  is called by several nonquick procedures.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
get_pl1_attr_str         000100 attr                        get_pl1_attr_str
                         000153 temp                        get_pl1_attr_str
                         000174 type                        get_pl1_attr_str
                         000176 p                           get_pl1_attr_str
get_pl1_dims_str         000100 n                           get_pl1_dims_str
                         000101 i                           get_pl1_dims_str
                         000102 dims_str                    get_pl1_dims_str
print_member             000100 q                           print_member
                         000102 nextq                       print_member
                         000104 level                       print_member
probe_print_pl1_attr_    000100 refp                        probe_print_pl1_attr_
                         000102 sym                         probe_print_pl1_attr_
                         000104 sp                          probe_print_pl1_attr_
                         000106 next                        probe_print_pl1_attr_
                         000110 probe_info_ptr              probe_print_pl1_attr_
                         000120 l                           get_pl1_level_str
                         000121 level_str                   get_pl1_level_str
                         000202 i                           king_of_structure
                         000204 p                           king_of_structure
                         000214 c                           get_pl1_class_str
                         000215 class_str                   get_pl1_class_str
symbol_name              000100 name                        symbol_name
                         000202 p                           symbol_name
value                    000100 val                         value
                         000101 an_ev                       value
                         000102 refp                        value
                         000104 block_ptr                   value
                         000106 stack_ptr                   value
                         000110 linkage_ptr                 value
                         000112 code                        value

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_le_a              r_ge_a              alloc_char_temp     cat_realloc_chars   call_ext_out_desc   call_ext_out
call_int_this_desc  call_int_this       call_int_other      return_mac          shorten_stack       ext_entry
int_entry           int_entry_desc      return_chars_eis

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
ioa_$ioa_switch               ioa_$rsnnl                    probe_block_name_             stu_$decode_runtime_value
stu_$get_implicit_qualifier

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
data_type_info_$info




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     25 000312        49 000324        50 000330        51 000331        52 000334        54 000336        55 000342
     58 000366        62 000411        65 000412        71 000505        75 000530        76 000544        78 000555
     79 000557        81 000562        83 000630        85 000631        95 000637        97 000645       102 000754
    107 000770       108 001007       110 001017       111 001022       113 001025       115 001026       127 001034
    128 001042       132 001056       133 001057       135 001060       138 001071       142 001141       146 001216
    151 001273       155 001340       158 001412       161 001444       163 001471       167 001546       169 001550
    172 001553       176 001623       180 001701       181 001711       182 001741       183 001750       184 001751
    186 001754       188 001762       191 002010       192 002022       193 002034       194 002052       195 002061
    196 002062       197 002066       199 002067       201 002100       203 002102       204 002107       206 002114
    207 002123       209 002151       211 002160       212 002161       214 002171       216 002201       218 002211
    220 002213       221 002220       222 002250       223 002257       224 002260       226 002270       228 002300
    230 002310       232 002320       234 002330       237 002334       238 002406       240 002417       246 002440
    248 002455       253 002463       264 002471       265 002477       268 002503       270 002514       271 002520
    272 002531       274 002541       277 002567       279 002576       282 002630       284 002642       285 002644
    287 002653       290 002663       297 002665       298 002672       301 002677       305 002707       307 002747
    310 002757       315 002761       316 002765       317 002773       318 003000       319 003003       324 003020
    341 003022       342 003030       344 003040       348 003046       349 003060       354 003104       356 003113
    362 003123       371 003131       372 003135       374 003152       376 003157       378 003164       380 003226
    381 003230       386 003240       390 003242       395 003253       399 003255       401 003270       405 003273
    433 003301       434 003304       436 003310       437 003315       440 003320       441 003322       442 003325
    448 003361       450 003407       453 003420       454 003421       455 003423


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
