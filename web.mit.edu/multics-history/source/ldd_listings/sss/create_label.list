	COMPILATION LISTING OF SEGMENT create_label
	Compiled by: Multics PL/I Compiler, Release 28d, of September 14, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 10/03/83  1603.9 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 
        7 /* ******************************************************
        8*   *                                                    *
        9*   *                                                    *
       10*   * Copyright (c) 1972 by Massachusetts Institute of   *
       11*   * Technology and Honeywell Information Systems, Inc. *
       12*   *                                                    *
       13*   *                                                    *
       14*   ****************************************************** */
       15 
       16 create_label:
       17      proc (cblock, t, type) returns (ptr);
       18 						/*	Modified on:	12 October 1970 by P. Green */
       19 						/*	Modified on:	 5 January 1971 by BLW for new node format */
       20 						/*	Modified on:	April 1977 by RHS for new allocation methods */
       21 
       22 dcl 1 pl1_nodes_template_$label_template external like label aligned;
       23 
       24 dcl (cblock, t, t1, p) ptr;
       25 dcl  create_identifier entry () returns (ptr);
       26 dcl  n fixed bin (15);
       27 declare (null, string) builtin;
       28 dcl  pl1_stat_$node_uses (32) fixed bin ext;
       29 dcl  type bit (3) aligned;
       30 
  1     1 /* BEGIN INCLUDE FILE ... pl1_tree_areas.incl.pl1 */
  1     2 
  1     3 /* format: style3 */
  1     4 dcl	tree_area		area based (pl1_stat_$tree_area_ptr);
  1     5 dcl	xeq_tree_area	area based (pl1_stat_$xeq_tree_area_ptr);
  1     6 
  1     7 dcl	pl1_stat_$tree_area_ptr
  1     8 			ptr ext static,
  1     9 	pl1_stat_$xeq_tree_area_ptr
  1    10 			ptr ext static;
  1    11 
  1    12 /* END INCLUDE FILE ... op_codes.incl.pl1 */
       31 
  2     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
  2     2 
  2     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
  2     4 
  2     5 dcl (	block_node		initial("000000001"b),
  2     6 	statement_node		initial("000000010"b),
  2     7 	operator_node		initial("000000011"b),
  2     8 	reference_node		initial("000000100"b),
  2     9 	token_node		initial("000000101"b),
  2    10 	symbol_node		initial("000000110"b),
  2    11 	context_node		initial("000000111"b),
  2    12 	array_node		initial("000001000"b),
  2    13 	bound_node		initial("000001001"b),
  2    14 	format_value_node		initial("000001010"b),
  2    15 	list_node			initial("000001011"b),
  2    16 	default_node		initial("000001100"b),
  2    17 	machine_state_node		initial("000001101"b),
  2    18 	source_node		initial("000001110"b),
  2    19 	label_node		initial("000001111"b),
  2    20 	cross_reference_node	initial("000010000"b),
  2    21 	sf_par_node		initial("000010001"b),
  2    22 	temporary_node		initial("000010010"b),
  2    23 	label_array_element_node	initial("000010011"b),
  2    24 	by_name_agg_node		initial("000010100"b))
  2    25 				bit(9) internal static aligned options(constant);
  2    26 
  2    27 dcl	1 node			based aligned,
  2    28 	2 type			unal bit(9),
  2    29 	2 source_id		unal structure,
  2    30 	  3 file_number		bit(8),
  2    31 	  3 line_number		bit(14),
  2    32 	  3 statement_number	bit(5);
  2    33 
  2    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
       32 
  3     1 /* BEGIN INCLUDE FILE ... block.incl.pl1 */
  3     2 /* Modified 22 Ocober 1980 by M. N. Davidoff to increase max block.number to 511 */
  3     3 /* format: style3,idind30 */
  3     4 
  3     5 declare	1 block			aligned based,
  3     6 	  2 node_type		bit (9) unaligned,
  3     7 	  2 source_id		structure unaligned,
  3     8 	    3 file_number		bit (8),
  3     9 	    3 line_number		bit (14),
  3    10 	    3 statement_number	bit (5),
  3    11 	  2 father		ptr unaligned,
  3    12 	  2 brother		ptr unaligned,
  3    13 	  2 son			ptr unaligned,
  3    14 	  2 declaration		ptr unaligned,
  3    15 	  2 end_declaration		ptr unaligned,
  3    16 	  2 default		ptr unaligned,
  3    17 	  2 end_default		ptr unaligned,
  3    18 	  2 context		ptr unaligned,
  3    19 	  2 prologue		ptr unaligned,
  3    20 	  2 end_prologue		ptr unaligned,
  3    21 	  2 main			ptr unaligned,
  3    22 	  2 end_main		ptr unaligned,
  3    23 	  2 return_values		ptr unaligned,
  3    24 	  2 return_count		ptr unaligned,
  3    25 	  2 plio_ps		ptr unaligned,
  3    26 	  2 plio_fa		ptr unaligned,
  3    27 	  2 plio_ffsb		ptr unaligned,
  3    28 	  2 plio_ssl		ptr unaligned,
  3    29 	  2 plio_fab2		ptr unaligned,
  3    30 	  2 block_type		bit (9) unaligned,
  3    31 	  2 prefix		bit (12) unaligned,
  3    32 	  2 like_attribute		bit (1) unaligned,
  3    33 	  2 no_stack		bit (1) unaligned,
  3    34 	  2 get_data		bit (1) unaligned,
  3    35 	  2 flush_at_call		bit (1) unaligned,
  3    36 	  2 processed		bit (1) unaligned,
  3    37 	  2 text_displayed		bit (1) unaligned,
  3    38 	  2 number		fixed bin (9) unsigned unaligned,
  3    39 	  2 free_temps		dimension (3) ptr,	/* these fields are used by the code generator */
  3    40 	  2 temp_list		ptr,
  3    41 	  2 entry_list		ptr,
  3    42 	  2 o_and_s		ptr,
  3    43 	  2 why_nonquick		aligned,
  3    44 	    3 auto_adjustable_storage bit (1) unaligned,
  3    45 	    3 returns_star_extents	bit (1) unaligned,
  3    46 	    3 stack_extended_by_args	bit (1) unaligned,
  3    47 	    3 invoked_by_format	bit (1) unaligned,
  3    48 	    3 format_statement	bit (1) unaligned,
  3    49 	    3 io_statements		bit (1) unaligned,
  3    50 	    3 assigned_to_entry_var	bit (1) unaligned,
  3    51 	    3 condition_statements	bit (1) unaligned,
  3    52 	    3 no_owner		bit (1) unaligned,
  3    53 	    3 recursive_call	bit (1) unaligned,
  3    54 	    3 options_non_quick	bit (1) unaligned,
  3    55 	    3 options_variable	bit (1) unaligned,
  3    56 	    3 never_referenced	bit (1) unaligned,
  3    57 	    3 pad_nonquick		bit (5) unaligned,
  3    58 	  2 prologue_flag		bit (1) unaligned,
  3    59 	  2 options_main		bit (1) unaligned,
  3    60 	  2 pad			bit (16) unaligned,
  3    61 	  2 number_of_entries	fixed bin (17),
  3    62 	  2 level			fixed bin (17),
  3    63 	  2 last_auto_loc		fixed bin (17),
  3    64 	  2 symbol_block		fixed bin (17),
  3    65 	  2 entry_info		fixed bin (18),
  3    66 	  2 enter			structure unaligned,
  3    67 	    3 start		fixed bin (17),
  3    68 	    3 end			fixed bin (17),
  3    69 	  2 leave			structure unaligned,
  3    70 	    3 start		fixed bin (17),
  3    71 	    3 end			fixed bin (17),
  3    72 	  2 owner			ptr;
  3    73 
  3    74 declare	max_block_number		fixed bin internal static options (constant) initial (511);
  3    75 
  3    76 /* END INCLUDE FILE ... block.incl.pl1 */
       33 
  4     1 dcl	1 label			based aligned,
  4     2 	2 node_type		bit(9) unaligned,
  4     3 	2 source_id		structure unaligned,
  4     4 	  3 file_number		bit(8),
  4     5 	  3 line_number		bit(14),
  4     6 	  3 statement_number	bit(5),
  4     7 	2 location		fixed(17) unaligned,
  4     8 	2 allocated		bit(1) unaligned,
  4     9 	2 dcl_type		bit(3) unaligned,
  4    10 	2 reserved		bit(29) unaligned,
  4    11 	2 array			bit(1) unaligned,
  4    12 	2 used_as_format		bit(1) unaligned,
  4    13 	2 used_in_goto		bit(1) unaligned,
  4    14 	2 symbol_table		bit(18) unaligned,
  4    15 	2 low_bound		fixed(17) unaligned,
  4    16 	2 high_bound		fixed(17) unaligned,
  4    17 	2 block_node		ptr unaligned,
  4    18 	2 token			ptr unaligned,
  4    19 	2 next			ptr unaligned,
  4    20 	2 multi_use		ptr unaligned,
  4    21 	2 cross_reference		ptr unaligned,
  4    22 	2 statement		ptr unaligned;
       34 
  5     1 dcl	pl1_stat_$token_list_ptr ptr external static;		/* pointer to token list	*/
  5     2 dcl	token_list(token_list_length) ptr based(token_list_pointer);
  5     3 dcl	token_list_pointer ptr initial(pl1_stat_$token_list_ptr);	/* for efficiency only */
  5     4 dcl	token_list_length fixed(15) internal static initial(3000) options(constant);
  5     5 
  5     6 dcl	1 pl1_stat_$statement_id	external static,
  5     7 	2 file_number		bit(8),
  5     8 	2 line_number		bit(14),
  5     9 	2 statement_number		bit(5);
  5    10 
  5    11 dcl	1 t_table 		based(token_list(k)) aligned,
  5    12 	2 node_type		bit(9) unaligned,
  5    13 	2 type			bit(9) unaligned,
  5    14 	2 loc			bit(18) unaligned,
  5    15 	2 declaration		ptr unaligned,
  5    16 	2 next			ptr unaligned,
  5    17 	2 size			fixed(9),
  5    18 	2 string			char(n refer(t_table.size));
       35 
  6     1 /* BEGIN INCLUDE FILE ... token.incl.pl1 */
  6     2 
  6     3 dcl	1 token			based aligned,
  6     4 	2 node_type		bit(9) unaligned,
  6     5 	2 type			bit(9) unaligned,
  6     6 	2 loc			bit(18) unaligned,	/* symtab offset for identifiers, "p" flag for constants */
  6     7 	2 declaration		ptr unaligned,
  6     8 	2 next			ptr unaligned,
  6     9 	2 size			fixed(9),
  6    10 	2 string			char(n refer(token.size));
  6    11 
  6    12 /* END INCLUDE FILE ... token.incl.pl1 */
       36 
       37 
       38 	if t = null then t1 = create_identifier (); else t1 = t;
       39 
       40 	pl1_stat_$node_uses (15) = pl1_stat_$node_uses (15) + 1;
       41 
       42 	allocate label in (tree_area) set (p);
       43 
       44 	p -> label = pl1_nodes_template_$label_template;
       45 
       46 
       47 	if cblock -> block.end_declaration = null
       48 	then cblock -> block.declaration = p;
       49 	else cblock -> block.end_declaration -> label.next = p;
       50 	cblock -> block.end_declaration = p;
       51 	p -> label.block_node = cblock;
       52 
       53 	p -> label.multi_use = t1 -> token.declaration;	/* push onto multi_use chain */
       54 	t1 -> token.declaration = p;			/* .. */
       55 
       56 	string (p -> label.source_id) = string (pl1_stat_$statement_id);
       57 
       58 	p -> label.dcl_type = type;
       59 
       60 	p -> label.token = t1;
       61 
       62 
       63 
       64 	return (p);
       65      end create_label;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/03/83  1007.2  create_label.pl1                  >spec>on>pl128d>create_label.pl1
31           1    07/21/80  1546.3  pl1_tree_areas.incl.pl1           >ldd>include>pl1_tree_areas.incl.pl1
32           2    07/21/80  1546.3  nodes.incl.pl1                    >ldd>include>nodes.incl.pl1
33           3    08/13/81  2043.5  block.incl.pl1                    >ldd>include>block.incl.pl1
34           4    05/06/74  1742.1  label.incl.pl1                    >ldd>include>label.incl.pl1
35           5    09/14/77  1705.7  token_list.incl.pl1               >ldd>include>token_list.incl.pl1
36           6    09/14/77  1705.7  token.incl.pl1                    >ldd>include>token.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
block                                  based           structure                level 1 dcl 3-5
block_node                4            based           pointer                  level 2 packed unaligned dcl 4-1 set ref 51*
cblock                                 parameter       pointer                  dcl 24 ref 16 47 47 49 50 51
create_identifier               000012 constant        entry                    external dcl 25 ref 38
dcl_type                  1(19)        based           bit(3)                   level 2 packed unaligned dcl 4-1 set ref 58*
declaration               4            based           pointer                  level 2 in structure "block" packed unaligned
                                                                                  dcl 3-5 in procedure "create_label" set ref 47*
declaration               1            based           pointer                  level 2 in structure "token" packed unaligned
                                                                                  dcl 6-3 in procedure "create_label" set ref 53 54*
end_declaration           5            based           pointer                  level 2 packed unaligned dcl 3-5 set ref 47 49 50*
label                                  based           structure                level 1 dcl 4-1 set ref 42 44*
multi_use                 7            based           pointer                  level 2 packed unaligned dcl 4-1 set ref 53*
next                      6            based           pointer                  level 2 packed unaligned dcl 4-1 set ref 49*
null                                                   builtin function         dcl 27 ref 38 47
p                               000102 automatic       pointer                  dcl 24 set ref 42* 44 47 49 50 51 53 54 56 58 60 64
pl1_nodes_template_$label_template
                                000010 external static structure                level 1 dcl 22 ref 44
pl1_stat_$node_uses             000014 external static fixed bin(17,0)          array dcl 28 set ref 40* 40
pl1_stat_$statement_id          000022 external static structure                level 1 packed unaligned dcl 5-6 ref 56
pl1_stat_$token_list_ptr        000020 external static pointer                  dcl 5-1 ref 5-3
pl1_stat_$tree_area_ptr         000016 external static pointer                  dcl 1-7 ref 42
source_id                 0(09)        based           structure                level 2 packed unaligned dcl 4-1 set ref 56*
string                                                 builtin function         dcl 27 set ref 56* 56
t                                      parameter       pointer                  dcl 24 ref 16 38 38
t1                              000100 automatic       pointer                  dcl 24 set ref 38* 38* 53 54 60
token                     5            based           pointer                  level 2 in structure "label" packed unaligned
                                                                                  dcl 4-1 in procedure "create_label" set ref 60*
token                                  based           structure                level 1 dcl 6-3 in procedure "create_label"
token_list_pointer              000104 automatic       pointer                  initial dcl 5-3 set ref 5-3*
tree_area                              based           area(1024)               dcl 1-4 ref 42
type                                   parameter       bit(3)                   dcl 29 ref 16 58

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
array_node                             internal static bit(9)                   initial dcl 2-5
block_node                             internal static bit(9)                   initial dcl 2-5
bound_node                             internal static bit(9)                   initial dcl 2-5
by_name_agg_node                       internal static bit(9)                   initial dcl 2-5
context_node                           internal static bit(9)                   initial dcl 2-5
cross_reference_node                   internal static bit(9)                   initial dcl 2-5
default_node                           internal static bit(9)                   initial dcl 2-5
format_value_node                      internal static bit(9)                   initial dcl 2-5
label_array_element_node               internal static bit(9)                   initial dcl 2-5
label_node                             internal static bit(9)                   initial dcl 2-5
list_node                              internal static bit(9)                   initial dcl 2-5
machine_state_node                     internal static bit(9)                   initial dcl 2-5
max_block_number                       internal static fixed bin(17,0)          initial dcl 3-74
n                                      automatic       fixed bin(15,0)          dcl 26
node                                   based           structure                level 1 dcl 2-27
operator_node                          internal static bit(9)                   initial dcl 2-5
pl1_stat_$xeq_tree_area_ptr            external static pointer                  dcl 1-7
reference_node                         internal static bit(9)                   initial dcl 2-5
sf_par_node                            internal static bit(9)                   initial dcl 2-5
source_node                            internal static bit(9)                   initial dcl 2-5
statement_node                         internal static bit(9)                   initial dcl 2-5
symbol_node                            internal static bit(9)                   initial dcl 2-5
t_table                                based           structure                level 1 dcl 5-11
temporary_node                         internal static bit(9)                   initial dcl 2-5
token_list                             based           pointer                  array dcl 5-2
token_list_length                      internal static fixed bin(15,0)          initial dcl 5-4
token_node                             internal static bit(9)                   initial dcl 2-5
xeq_tree_area                          based           area(1024)               dcl 1-5

NAME DECLARED BY EXPLICIT CONTEXT.
create_label                    000011 constant        entry                    external dcl 16

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       222         246     113         232
Length       526     113        24         243     107           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
create_label                         74 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
create_label             000100 t1                          create_label
                         000102 p                           create_label
                         000104 token_list_pointer          create_label

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return              ext_entry           alloc_based

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
create_identifier

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pl1_nodes_template_$label_template                          pl1_stat_$node_uses           pl1_stat_$statement_id
pl1_stat_$token_list_ptr      pl1_stat_$tree_area_ptr




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     16 000004    5    3 000016        38 000021        38 000035        40 000040        42 000043        44 000052
     47 000057        49 000067        50 000071        51 000072        53 000073        54 000076        56 000077
     58 000102        60 000107        64 000110


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
