	COMPILATION LISTING OF SEGMENT format_list_parse
	Compiled by: Multics PL/I Compiler, Release 33c, of October 25, 1990
	Compiled at: ACTC Technologies Inc.          
	Compiled on: 92-04-24_1116.32_Fri_mdt
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1988                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 
       14 
       15 /****^  HISTORY COMMENTS:
       16*  1) change(88-08-23,RWaters), approve(88-08-23,MCR7915), audit(88-09-28,Huen),
       17*     install(88-10-12,MR12.2-1163):
       18*     Trap invalid 'a' format items which cause runtime errors.
       19*                                                   END HISTORY COMMENTS */
       20 
       21 
       22 format_list_parse:	proc(k,cur_block,st,format_tree) returns(bit(1)aligned);
       23 
       24 /* Modified 770705 by PG to fix 1640 (letting "i" get thru as a valid format) */
       25 /* Modified 770706 by PG to be a structured program */
       26 /* Modified 18/08/88 by RWaters to check for proper 'a' formats in get stmnts */
       27 
       28 /* parameters */
       29 
       30 dcl (	k fixed bin (15),
       31 	cur_block ptr,
       32 	st ptr,
       33 	format_tree ptr
       34 	) parameter;
       35 
       36 /* automatic */
       37 
       38 dcl	(c, expr (3), item, last, lparen, p, pic_symbol, rptr) ptr,
       39 	(i, indx, ksaved, n, pic_code, num_ops) fixed bin (15),
       40 	formatcode bit(9) aligned,
       41 	b_type char (1);
       42 
       43 /* builtins */
       44 
       45 dcl	(hbound, lbound, null, substr) builtin;
       46 
       47 /* internal static */
       48 
       49 dcl	format_names (17) char (6) aligned internal static initial (
       50 	"a", "f", "e", "x", "skip", "page", "line", "col", "column", "b", "b1", "b2",
       51 	"b3", "b4", "c", "p", "r");
       52 
       53 /* include files */
       54 
  1     1 /* BEGIN INCLUDE FILE parse.incl.pl1 */
  1     2 
  1     3 
  1     4 /****^  HISTORY COMMENTS:
  1     5*  1) change(91-01-09,Blackmore), approve(91-01-09,MCR8234),
  1     6*     audit(91-12-05,Huen), install(92-04-24,MR12.5-1011):
  1     7*     Change entry points for 'lex', 'lex$write_last_line', and
  1     8*     'statement_type', for constant reference resolution fix.
  1     9*                                                   END HISTORY COMMENTS */
  1    10 
  1    11 declare	attribute_parse	entry(ptr,ptr,fixed bin(15),bit(1) aligned);
  1    12 			/* parameter 1:	(input)	block node ptr		*/
  1    13 			/* parameter 2:	(input)	symbol node ptr		*/
  1    14 			/* parameter 3:	(in/out)	token index		*/
  1    15 			/* parameter 4:	(input)   called while doing generic	*/
  1    16 
  1    17 declare	context		entry(ptr,ptr,fixed bin(15));
  1    18 			/* parameter 1:	(input)	usually token node ptr	*/
  1    19 			/* parameter 2:	(input)	block node ptr		*/
  1    20 			/* parameter 3:	(input)	context type		*/
  1    21 
  1    22 declare	data_list_parse	entry(fixed bin(15),ptr,ptr)
  1    23 			returns(bit(1) aligned);
  1    24 			/* parameter 1:	(in/out)	token index		*/
  1    25 			/* parameter 2:	(input)	block node ptr		*/
  1    26 			/* parameter 3:	(output)	data list parse tree ptr	*/
  1    27 			/* return:	(output)	valid parse bit		*/
  1    28 
  1    29 declare	declare_label	entry(ptr,ptr,ptr,bit(3) aligned);
  1    30 			/* parameter 1:	(input)	block node ptr		*/
  1    31 			/* parameter 2:	(input)	statement node ptr	*/
  1    32 			/* parameter 3:	(input)	label list ptr or null	*/
  1    33 			/* parameter 4:	(input)	declare type		*/
  1    34 
  1    35 declare	declare_parse	entry(fixed bin(15),ptr,ptr);
  1    36 			/* parameter 1:	(input)	token index		*/
  1    37 			/* parameter 2:	(input)	block node ptr		*/
  1    38 			/* parameter 3:	(input)	label list ptr or null	*/
  1    39 
  1    40 declare	declare_parse$abort	entry(fixed bin(15),ptr);
  1    41 			/* parameter 1:	(input)	error number		*/
  1    42 			/* parameter 2:	(input)	any node ptr		*/
  1    43 
  1    44 declare	default_parse	entry(fixed bin(15),ptr,ptr);
  1    45 			/* parameter 1:	(input)	token index		*/
  1    46 			/* parameter 2:	(input)	block node ptr		*/
  1    47 			/* parameter 3:	(input)	label list ptr or null	*/
  1    48 
  1    49 declare	descriptor_parse	entry(ptr,ptr,fixed bin(15))
  1    50 			returns(ptr);
  1    51 			/* parameter 1:	(input)	block node ptr		*/
  1    52 			/* parameter 2:	(input)	token node ptr or null	*/
  1    53 			/* parameter 3:	(in/out)	token index		*/
  1    54 			/* return:	(output)	symbol node ptr		*/
  1    55 
  1    56 declare	do_parse		entry(fixed bin(15),ptr,bit(12) aligned,ptr,ptr,
  1    57 			bit(1) aligned,bit(1) aligned,bit(1) aligned);
  1    58 			/* parameter 1:	(in/out)	token index		*/
  1    59 			/* parameter 2:	(input)	label list ptr or null	*/
  1    60 			/* parameter 3:	(input)	conditions		*/
  1    61 			/* parameter 4:	(input)	father block node ptr	*/
  1    62 			/* parameter 5:	(output)	end ptr			*/
  1    63 			/* parameter 6:	(input)	entry bit			*/
  1    64 			/* parameter 7:	(input)	return bit		*/
  1    65 			/* parameter 8:	(input)	iterative do bit		*/
  1    66 
  1    67 declare	evaluate		entry(bit(9) aligned,ptr,ptr) returns(ptr);
  1    68 			/* parameter 1:	(input)	opcode		*/
  1    69 			/* parameter 2:	(input)	left operand (token ptr)	*/
  1    70 			/* parameter 3:	(input)	right operand (token ptr)	*/
  1    71 			/* return:	(output)	ptr to result node	*/
  1    72 
  1    73 declare	expression_parse	entry(fixed bin(15),ptr)
  1    74 			returns(ptr);
  1    75 			/* parameter 1:	(in/out)	token index		*/
  1    76 			/* parameter 2:	(input)	block node ptr		*/
  1    77 			/* return:	(output)	expression parse tree ptr	*/
  1    78 
  1    79 declare	format_list_parse	entry(fixed bin(15),ptr,ptr,ptr)
  1    80 			returns(bit(1) aligned);
  1    81 			/* parameter 1:	(in/out)	token index		*/
  1    82 			/* parameter 2:	(input)	block node ptr		*/
  1    83 			/* parameter 3:	(input)	statement node ptr		*/
  1    84 			/* parameter 4:	(output)	format list parse tree ptr	*/
  1    85 			/* return:	(output)	valid parse bit		*/
  1    86 
  1    87 declare	if_parse		entry(fixed bin(15),ptr,bit(12) aligned,ptr,ptr,
  1    88 			bit(1) aligned);
  1    89 			/* parameter 1:	(in/out)	token index		*/
  1    90 			/* parameter 2:	(input)	label list ptr or null	*/
  1    91 			/* parameter 3:	(input)	conditions		*/
  1    92 			/* parameter 4:	(input)	father block node ptr	*/
  1    93 			/* parameter 5:	(input)	end ptr			*/
  1    94 			/* parameter 6:	(output)	valid parse bit		*/
  1    95 
  1    96 declare	io_statement_parse	entry(fixed bin(15),ptr,bit(12) aligned,ptr,ptr,
  1    97 			bit(1) aligned,bit(9) aligned);
  1    98 			/* parameter 1:	(in/out)	token index		*/
  1    99 			/* parameter 2:	(input)	label list ptr or null	*/
  1   100 			/* parameter 3:	(input)	conditions		*/
  1   101 			/* parameter 4:	(input)	father block node ptr	*/
  1   102 			/* parameter 5:	(output)	end ptr			*/
  1   103 			/* parameter 6:	(output)	valid parse bit		*/
  1   104 			/* parameter 7:	(output)	statement type		*/
  1   105 
  1   106 declare	lex		entry(ptr);
  1   107 			/* parameter 1:	(input)	block node ptr		*/
  1   108 
  1   109 declare	lex$write_last_line	entry(ptr);
  1   110 			/* parameter 1:	(input)	block node ptr		*/
  1   111 
  1   112 declare	lex$initialize_lex	entry(ptr,fixed bin(15));
  1   113 			/* parameter 1:	(input)	ptr to source		*/
  1   114 			/* parameter 2:	(input)	length of source (chars)	*/
  1   115 
  1   116 declare	on_parse		entry(fixed bin(15),ptr,bit(12) aligned,ptr,ptr);
  1   117 			/* parameter 1:	(in/out)	token index		*/
  1   118 			/* parameter 2:	(input)	label list ptr or null	*/
  1   119 			/* parameter 3:	(input)	conditions		*/
  1   120 			/* parameter 4:	(input)	father block node ptr	*/
  1   121 			/* parameter 5:	(output)	end ptr (set to null)	*/
  1   122 
  1   123 declare	on_parse$revert	entry(fixed bin(15),ptr,ptr);
  1   124 			/* parameter 1:	(input)	token index	*/
  1   125 			/* parameter 2:	(input)	statement node ptr	*/
  1   126 			/* parameter 3:	(input)	block node ptr	*/
  1   127 
  1   128 declare	parse		entry(ptr,ptr,fixed bin(15));
  1   129 			/* parameter 1:	(output)	root ptr		*/
  1   130 			/* parameter 2	(input)	source ptr		*/
  1   131 			/* parameter 3:	(input)	source length		*/
  1   132 
  1   133 declare	procedure_parse	entry(fixed bin(15),ptr,bit(12) aligned,ptr,ptr,
  1   134 			bit(9) aligned,bit(1) aligned);
  1   135 			/* parameter 1:	(in/out)	token index		*/
  1   136 			/* parameter 2:	(input)	label list ptr or null	*/
  1   137 			/* parameter 3:	(input)	conditions		*/
  1   138 			/* parameter 4:	(input)	father block node ptr	*/
  1   139 			/* parameter 5:	(output)	end ptr		*/
  1   140 			/* parameter 6:	(input)	block type		*/
  1   141 			/* parameter 7:	(input)	no return statement bit	*/
  1   142 
  1   143 declare	process_entry	entry(fixed bin(15),bit(9) aligned,ptr,ptr,bit(12) aligned);
  1   144 			/* parameter 1:	(in/out)	token index		*/
  1   145 			/* parameter 2:	(input)	statement type		*/
  1   146 			/* parameter 3:	(input)	block node ptr		*/
  1   147 			/* parameter 4:	(input)	label list ptr or null	*/
  1   148 			/* parameter 5:	(input)	conditions		*/
  1   149 
  1   150 declare	reference_parse	entry(fixed bin(15),ptr)
  1   151 			returns(ptr);
  1   152 			/* parameter 1:	(in/out)	token index		*/
  1   153 			/* parameter 2:	(input)	block node ptr		*/
  1   154 			/* return:	(output)	reference parse tree ptr	*/
  1   155 
  1   156 declare	reserve$rename_parse entry(fixed bin(15)) returns(bit(1) aligned);
  1   157 			/* parameter 1:	(in/out)	token index	 */
  1   158 			/* return:	(output)	success bit	 */
  1   159 
  1   160 declare	statement_parse	entry(fixed bin(15),ptr,bit(12) aligned,ptr,fixed bin(15));
  1   161 			/* parameter 1:	(in/out)	token index		*/
  1   162 			/* parameter 2:	(input)	label list ptr or null	*/
  1   163 			/* parameter 3:	(input)	conditions		*/
  1   164 			/* parameter 4:	(input)	block node ptr		*/
  1   165 			/* parameter 5:	(input)	statement type		*/
  1   166 
  1   167 declare	statement_type	entry(ptr,fixed bin(15),ptr,bit(12) aligned)
  1   168 			returns(fixed bin(15));
  1   169 			/* parameter 1:	(input)	block node ptr		*/
  1   170 			/* parameter 2:	(in/out)	token index		*/
  1   171 			/* parameter 3:	(output)	label list ptr or null	*/
  1   172 			/* parameter 4:	(output)	conditions		*/
  1   173 			/* return:	(output)	statement type		*/
  1   174 
  2     1 /****^  *********************************************************
  2     2*        *                                                       *
  2     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  2     4*        *                                                       *
  2     5*        ********************************************************* */
  2     6 
  2     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  2     8 
  2     9 
  2    10 /****^  HISTORY COMMENTS:
  2    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  2    12*     install(89-07-31,MR12.3-1066):	
  2    13*     Removed the obsolete parameter source_line from the dcl of error_().
  2    14*                                                   END HISTORY COMMENTS */
  2    15 
  2    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  2    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  2    18* */
  2    19 
  2    20 declare	adjust_count	entry(pointer);
  2    21 			/* parameter 1:	(input)	any node pointer		*/
  2    22 
  2    23 declare	bindec		entry(fixed bin(31)) reducible
  2    24 			returns(character(12) aligned);
  2    25 			/* parameter 1:	(input)	bin value			*/
  2    26 			/* return:	(output)	character value with blanks	*/
  2    27 
  2    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  2    29 			returns(character(12) aligned varying);
  2    30 			/* parameter 1:	(input)	binary value		*/
  2    31 			/* return:	(output)	char value without blanks	*/
  2    32 
  2    33 declare	binoct		entry(fixed bin(31)) reducible
  2    34 			returns(char(12) aligned);
  2    35 			/* parameter 1:	(input)	binary value		*/
  2    36 			/* return:	(output)	char value with blanks	*/
  2    37 
  2    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  2    39 			returns(char(12) aligned);
  2    40 			/* parameter 1:	(input)	binary value		*/
  2    41 			/* return:	(output)	right-aligned char value	*/
  2    42 
  2    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  2    44 			returns(char(12) varying aligned);
  2    45 			/* parameter 1:	(input)	binary value		*/
  2    46 			/* returns:	(output)	char value without blanks	*/
  2    47 
  2    48 declare	compare_expression	entry(pointer,pointer) reducible
  2    49 			returns(bit(1) aligned);
  2    50 			/* parameter 1:	(input)	any node pointer		*/
  2    51 			/* parameter 2:	(input)	any node pointer		*/
  2    52 			/* return:	(output)	compare bit		*/
  2    53 
  2    54 declare	constant_length	entry (pointer, fixed bin (71))
  2    55 			returns (bit (1) aligned);
  2    56 			/* parameter 1:	(input)	reference node pointer	*/
  2    57 			/* parameter 2:	(input)	value of constant length	*/
  2    58 			/* return:	(output)	"1"b if constant length	*/
  2    59 
  2    60 declare	convert		entry(pointer,bit(36) aligned)
  2    61 			returns(pointer);
  2    62 			/* parameter 1:	(input)	any node pointer		*/
  2    63 			/* parameter 2:	(input)	target type		*/
  2    64 			/* return:	(output)	target value tree pointer	*/
  2    65 
  2    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  2    67 			returns(pointer);
  2    68 			/* parameter 1:	(input)	any node pointer		*/
  2    69 			/* parameter 2:	(input)	target type		*/
  2    70 			/* return:	(output)	target value tree pointer	*/
  2    71 
  2    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  2    73 			returns(pointer);
  2    74 			/* parameter 1:	(input)	any node pointer		*/
  2    75 			/* parameter 2:	(input)	target type		*/
  2    76 			/* return:	(output)	target value tree pointer	*/
  2    77 
  2    78 declare	convert$validate	entry(pointer,pointer);
  2    79 			/* parameter 1:	(input)	source value tree pointer	*/
  2    80 			/* parameter 2:	(input)	target reference node pointer	*/
  2    81 
  2    82 declare	convert$to_target_fb entry(pointer,pointer)
  2    83 			returns(pointer);
  2    84 			/* parameter 1:	(input)	source value tree pointer	*/
  2    85 			/* parameter 2:	(input)	target reference node pointer	*/
  2    86 			/* return:	(output)	target value tree pointer	*/
  2    87 
  2    88 declare	convert$to_target	entry(pointer,pointer)
  2    89 			returns(pointer);
  2    90 			/* parameter 1:	(input)	source value tree pointer	*/
  2    91 			/* parameter 2:	(input)	target reference node pointer	*/
  2    92 			/* return:	(output)	target value tree pointer	*/
  2    93 
  2    94 declare	copy_expression	entry(pointer unaligned)
  2    95 			returns(pointer);
  2    96 			/* parameter 1:	(input)	any node pointer		*/
  2    97 			/* return:	(output)	any node pointer		*/
  2    98 
  2    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  2   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  2   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  2   102 
  2   103 declare	copy_unique_expression entry(pointer)
  2   104 			returns(pointer);
  2   105 			/* parameter 1:	(input)	any node pointer		*/
  2   106 			/* return:	(output)	any node pointer		*/
  2   107 
  2   108 declare	create_array	entry()
  2   109 			returns(pointer);
  2   110 			/* return:	(output)	array node pointer		*/
  2   111 
  2   112 declare	create_block	entry(bit(9) aligned,pointer)
  2   113 			returns(pointer);
  2   114 			/* parameter 1:	(input)	block type		*/
  2   115 			/* parameter 2:	(input)	father block node pointer	*/
  2   116 			/* return:	(output)	block node pointer		*/
  2   117 
  2   118 declare	create_bound	entry()
  2   119 			returns(pointer);
  2   120 			/* return:	(output)	bound node pointer		*/
  2   121 
  2   122 declare	create_context	entry(pointer,pointer)
  2   123 			returns(pointer);
  2   124 			/* parameter 1:	(input)	block node pointer		*/
  2   125 			/* parameter 2:	(input)	token pointer		*/
  2   126 			/* return:	(output)	context node pointer	*/
  2   127 
  2   128 declare	create_cross_reference entry()
  2   129 			returns(pointer);
  2   130 			/* return:	(output)	cross reference node pointer	*/
  2   131 
  2   132 declare	create_default	entry
  2   133 			returns(pointer);
  2   134 			/* return:	(output)	default node pointer	*/
  2   135 
  2   136 declare	create_identifier	entry()
  2   137 			returns(pointer);
  2   138 			/* return:	(output)	token node pointer		*/
  2   139 
  2   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  2   141 			returns(pointer);
  2   142 			/* parameter 1:	(input)	block node pointer		*/
  2   143 			/* parameter 2:	(input)	token node pointer		*/
  2   144 			/* parameter 3:	(input)	declare type		*/
  2   145 			/* return:	(output)	label node pointer		*/
  2   146 
  2   147 declare	create_list	entry(fixed bin(15))
  2   148 			returns(pointer);
  2   149 			/* parameter 1:	(input)	number of list elements	*/
  2   150 			/* return:	(output)	list node pointer		*/
  2   151 
  2   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  2   153 			returns(pointer);
  2   154 			/* parameter 1:	(input)	operator type		*/
  2   155 			/* parameter 2:	(input)	number of operands		*/
  2   156 			/* return:	(output)	operator node pointer	*/
  2   157 
  2   158 declare	create_reference	entry(pointer)
  2   159 			returns(pointer);
  2   160 			/* parameter 1:	(input)	symbol node pointer		*/
  2   161 			/* return:	(output)	reference node pointer	*/
  2   162 
  2   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   164 			returns(pointer);
  2   165 			/* parameter 1:	(input)	statement type		*/
  2   166 			/* parameter 2:	(input)	block node pointer		*/
  2   167 			/* parameter 3:	(input)	label node pointer		*/
  2   168 			/* parameter 4:	(input)	conditions		*/
  2   169 			/* return:	(output)	statement node pointer	*/
  2   170 
  2   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   172 			returns(pointer);
  2   173 			/* parameter 1:	(input)	statement type		*/
  2   174 			/* parameter 2:	(input)	block node pointer		*/
  2   175 			/* parameter 3:	(input)	label node pointer		*/
  2   176 			/* parameter 4:	(input)	conditions		*/
  2   177 			/* return:	(output)	statement node pointer	*/
  2   178 
  2   179 declare	create_storage	entry(fixed bin(15))
  2   180 			returns(pointer);
  2   181 			/* parameter 1:	(input)	number of words		*/
  2   182 			/* return:	(output)	storage block pointer	*/
  2   183 
  2   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  2   185 			returns(pointer);
  2   186 			/* parameter 1:	(input)	block node pointer		*/
  2   187 			/* parameter 2:	(input)	token node pointer		*/
  2   188 			/* parameter 3:	(input)	declare type		*/
  2   189 			/* return:	(output)	symbol node pointer		*/
  2   190 
  2   191 declare	create_token	entry (character (*), bit (9) aligned)
  2   192 			returns (ptr);
  2   193 			/* parameter 1:	(input)	token string		*/
  2   194 			/* parameter 2:	(input)	token type		*/
  2   195 			/* return:	(output)	token node ptr		*/
  2   196 
  2   197 declare	create_token$init_hash_table entry ();
  2   198 
  2   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  2   200 			returns (ptr);
  2   201 			/* parameter 1:	(input)	token string		*/
  2   202 			/* parameter 2:	(input)	token type		*/
  2   203 			/* parameter 3:	(input)	protected flag		*/
  2   204 			/* return:	(output)	token node ptr		*/
  2   205 
  2   206 declare	decbin		entry(character(*) aligned) reducible
  2   207 			returns(fixed bin(31));
  2   208 			/* parameter 1:	(input)	decimal character string	*/
  2   209 			/* return:	(output)	binary value		*/
  2   210 
  2   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  2   212 			returns(pointer);
  2   213 			/* parameter 1:	(input)	value			*/
  2   214 			/* parameter 2:	(input)	type			*/
  2   215 			/* parameter 3:	(input)	size			*/
  2   216 			/* parameter 4:	(input)	scale			*/
  2   217 			/* return:	(output)	reference node pointer	*/
  2   218 
  2   219 declare	declare_constant$bit entry(bit(*) aligned)
  2   220 			returns(pointer);
  2   221 			/* parameter 1:	(input)	bit			*/
  2   222 			/* return:	(output)	reference node pointer	*/
  2   223 
  2   224 declare	declare_constant$char entry(character(*) aligned)
  2   225 			returns(pointer);
  2   226 			/* parameter 1:	(input)	character			*/
  2   227 			/* return:	(output)	reference node pointer	*/
  2   228 
  2   229 declare	declare_constant$desc entry(bit(*) aligned)
  2   230 			returns(pointer);
  2   231 			/* parameter 1:	(input)	descriptor bit value	*/
  2   232 			/* return:	(output)	reference node pointer	*/
  2   233 
  2   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  2   235 			returns(pointer);
  2   236 			/* parameter 1:	(input)	integer			*/
  2   237 			/* return:	(output)	reference node pointer	*/
  2   238 
  2   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   240 			returns(pointer);
  2   241 			/* parameter 1:	(input)	block node pointer		*/
  2   242 			/* parameter 2:	(input)	statement node pointer	*/
  2   243 			/* parameter 3:	(input)	symbol node pointer		*/
  2   244 			/* parameter 4:	(input)	loc pointer		*/
  2   245 			/* parameter 5:	(input)	array descriptor bit
  2   246*						cross_section bit	*/
  2   247 			/* return:	(output)	reference node pointer	*/
  2   248 
  2   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   250 			returns(pointer);
  2   251 			/* parameter 1:	(input)	block node pointer	*/
  2   252 			/* parameter 2:	(input)	statement node pointer 	*/
  2   253 			/* parameter 3:	(input)	symbol node pointer	*/
  2   254 			/* parameter 4:	(input)	loc pointer	*/
  2   255 			/* parameter 5:	(input)	array descriptor bit
  2   256*						cross_section bit	*/
  2   257 			/* return:	(output)	reference node pointer	*/
  2   258 
  2   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   260 			returns(pointer);
  2   261 			/* parameter 1:	(input)	block node pointer		*/
  2   262 			/* parameter 2:	(input)	statement node pointer	*/
  2   263 			/* parameter 3:	(input)	symbol node pointer		*/
  2   264 			/* parameter 4:	(input)	loc pointer		*/
  2   265 			/* parameter 5:	(input)	array descriptor bit
  2   266*						cross_section bit	*/
  2   267 			/* return:	(output)	reference node pointer	*/
  2   268 
  2   269 declare	declare_integer	entry(pointer)
  2   270 			returns(pointer);
  2   271 			/* parameter 1:	(input)	block node pointer		*/
  2   272 			/* return:	(output)	reference node pointer 	*/
  2   273 
  2   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  2   275 			/* parameter 1:	(input)	picture string		*/
  2   276 			/* parameter 2:	(input)	symbol node pointer		*/
  2   277 			/* parameter 3:	(output)	error code, if any		*/
  2   278 
  2   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  2   280 			returns(pointer);
  2   281 			/* parameter 1:	(input)	picture string		*/
  2   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  2   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  2   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  2   285 			/* return:	(output)	reference node pointer	*/
  2   286 
  2   287 declare	declare_pointer	entry(pointer)
  2   288 			returns(pointer);
  2   289 			/* parameter 1:	(input)	block node pointer		*/
  2   290 			/* return:	(output)	reference node pointer	*/
  2   291 
  2   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  2   293 			returns(pointer);
  2   294 			/* parameter 1:	(input)	type			*/
  2   295 			/* parameter 2:	(input)	precision			*/
  2   296 			/* parameter 3:	(input)	scale			*/
  2   297 			/* parameter 4:	(input)	length			*/
  2   298 			/* return:	(output)	reference node pointer	*/
  2   299 
  2   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  2   301 			returns(char(120) varying);
  2   302 			/* parameter 1:	(input)	node pointer		*/
  2   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   304 			/* return:	(output)	source line id		*/
  2   305 
  2   306 declare	decode_source_id	entry(
  3     1 			1 structure unaligned,
  3     2 			  2 /* file_number */	bit(8),
  3     3 			  2 /* line_number */	bit(14),
  3     4 			  2 /* stmt_number */	bit(5),
  2   307 
  2   308 			bit(1) aligned)
  2   309 			returns(char(120) varying);
  2   310 			/* parameter 1:	(input)	source id			*/
  2   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   312 			/* return:	(output)	source line id		*/
  2   313 
  2   314 declare	error		entry(fixed bin(15),pointer,pointer);
  2   315 			/* parameter 1:	(input)	error number		*/
  2   316 			/* parameter 2:	(input)	statement node pointer or null*/
  2   317 			/* parameter 3:	(input)	token node pointer 		*/
  2   318 
  2   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  2   320 			/* parameter 1:	(input)	error number		*/
  2   321 			/* parameter 2:	(input)	statement node pointer or null*/
  2   322 			/* parameter 3:	(input)	token node pointer 		*/
  2   323 
  2   324 declare	error_		entry(fixed bin(15),
  4     1 			1 structure unaligned,
  4     2 			  2 /* file_number */	bit(8),
  4     3 			  2 /* line_number */	bit(14),
  4     4 			  2 /* stmt_number */	bit(5),
  2   325 
  2   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  2   327 			/* parameter 1:	(input)	error number		*/
  2   328 			/* parameter 2:	(input)	statement id		*/
  2   329 			/* parameter 3:	(input)	any node pointer		*/
  2   330 			/* parameter 4:	(input)	source segment		*/
  2   331 			/* parameter 5:	(input)	source starting character	*/
  2   332 			/* parameter 6:	(input)	source length		*/
  2   333 
  2   334 declare	error_$no_text	entry(fixed bin(15),
  5     1 			1 structure unaligned,
  5     2 			  2 /* file_number */	bit(8),
  5     3 			  2 /* line_number */	bit(14),
  5     4 			  2 /* stmt_number */	bit(5),
  2   335 
  2   336 			pointer);
  2   337 			/* parameter 1:	(input)	error number		*/
  2   338 			/* parameter 2:	(input)	statement id		*/
  2   339 			/* parameter 3:	(input)	any node pointer		*/
  2   340 
  2   341 declare	error_$initialize_error entry();
  2   342 
  2   343 declare	error_$finish	entry();
  2   344 
  2   345 declare	free_node		entry(pointer);
  2   346 			/* parameter 1:	any node pointer			*/
  2   347 
  2   348 declare	get_array_size	entry(pointer,fixed bin(3));
  2   349 			/* parameter 1:	(input)	symbol node pointer		*/
  2   350 			/* parameter 2:	(input)	units			*/
  2   351 
  2   352 declare	get_size		entry(pointer);
  2   353 			/* parameter 1:	(input)	symbol node pointer		*/
  2   354 
  2   355 declare	merge_attributes	external entry(pointer,pointer)
  2   356 			returns(bit(1) aligned);
  2   357 			/* parameter 1:	(input)	target symbol node pointer */
  2   358 			/* parameter 2:	(input)	source symbol node pointer */
  2   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  2   360 
  2   361 declare	optimizer		entry(pointer);
  2   362 			/* parameter 1:	(input)	root pointer		*/
  2   363 
  2   364 declare	parse_error	entry(fixed bin(15),pointer);
  2   365 			/* parameter 1:	(input)	error number		*/
  2   366 			/* parameter 2:	(input)	any node pointer		*/
  2   367 
  2   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  2   369 			/* parameter 1:	(input)	error number		*/
  2   370 			/* parameter 2:	(input)	any node pointer		*/
  2   371 
  2   372 declare	pl1_error_print$write_out
  2   373 			entry(fixed bin(15),
  6     1 			1 structure unaligned,
  6     2 			  2 /* file_number */	bit(8),
  6     3 			  2 /* line_number */	bit(14),
  6     4 			  2 /* stmt_number */	bit(5),
  2   374 
  2   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  2   376 			/* parameter 1:	(input)	error number		*/
  2   377 			/* parameter 2:	(input)	statement identification	*/
  2   378 			/* parameter 3:	(input)	any node pointer		*/
  2   379 			/* parameter 4:	(input)	source segment		*/
  2   380 			/* parameter 5:	(input)	source character index	*/
  2   381 			/* parameter 6:	(input)	source length		*/
  2   382 			/* parameter 7:	(input)	source line		*/
  2   383 
  2   384 declare	pl1_error_print$listing_segment
  2   385 			entry(fixed bin(15),
  7     1 			1 structure unaligned,
  7     2 			  2 /* file_number */	bit(8),
  7     3 			  2 /* line_number */	bit(14),
  7     4 			  2 /* stmt_number */	bit(5),
  2   386 
  2   387 			pointer);
  2   388 			/* parameter 1:	(input)	error number		*/
  2   389 			/* parameter 2:	(input)	statement identification	*/
  2   390 			/* parameter 3:	(input)	token node pointer		*/
  2   391 
  2   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  2   393 			/* parameter 1:	(input)	string			*/
  2   394 
  2   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  2   396 			/* parameter 1:	(input)	string			*/
  2   397 
  2   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  2   399 			/* parameter 1:	(input)	string			*/
  2   400 			/* parameter 2:	(input)	string length or 0		*/
  2   401 
  2   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  2   403 			/* parameter 1:	(input)	string			*/
  2   404 			/* parameter 2:	(input)	string length or 0		*/
  2   405 
  2   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  2   407 			/* parameter 1:	(input)	string pointer		*/
  2   408 			/* parameter 2:	(input)	string size		*/
  2   409 
  2   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  2   411 			/* parameter 1:	(input)	string pointer		*/
  2   412 			/* parameter 2:	(input)	string length or 0		*/
  2   413 
  2   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  2   415 			/* parameter 1:	(input)	string			*/
  2   416 			/* parameter 2:	(input)	length			*/
  2   417 
  2   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  2   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  2   420 			/* parameter 2:	(input)	line number		*/
  2   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  2   422 			/* parameter 4:	(input)	number of chars to copy	*/
  2   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  2   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  2   425 
  2   426 declare	refer_extent	entry(pointer,pointer);
  2   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  2   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  2   429 
  2   430 declare	reserve$clear	entry()
  2   431 			returns(pointer);
  2   432 			/* return:	(output)	pointer			*/
  2   433 
  2   434 declare	reserve$declare_lib	entry(fixed bin(15))
  2   435 			returns(pointer);
  2   436 			/* parameter 1:	(input)	builtin function number	*/
  2   437 			/* return:	(output)	pointer			*/
  2   438 
  2   439 declare	reserve$read_lib	entry(fixed bin(15))
  2   440 			returns(pointer);
  2   441 			/* parameter 1:	(input)	builtin function number	*/
  2   442 			/* return:	(output)	pointer			*/
  2   443 
  2   444 declare	semantic_translator	entry();
  2   445 
  2   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  2   447 			/* parameter 1:	(input)	error number		*/
  2   448 			/* parameter 2:	(input)	any node pointer		*/
  2   449 
  2   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  2   451 			/* parameter 1:	(input)	error number		*/
  2   452 			/* parameter 2:	(input)	any node pointer		*/
  2   453 
  2   454 declare	share_expression	entry(ptr)
  2   455 			returns(ptr);
  2   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  2   457 			/* return:	(output)	tree pointer or null	*/
  2   458 
  2   459 declare	token_to_binary	entry(ptr) reducible
  2   460 			returns(fixed bin(31));
  2   461 			/* parameter 1:	(input)	token node pointer		*/
  2   462 			/* return:	(output)	converted binary value	*/
  2   463 
  2   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
  1   175 
  1   176 /* END INCLUDE FILE parse.incl.pl1 */
       55 
  8     1 /* BEGIN INCLUDE FILE ... declare_type.incl.pl1 */
  8     2 
  8     3 /* Modified: 25 Apr 1979 by PCK to implement 4-bit decimal */
  8     4 
  8     5 dcl  (	by_declare	initial("001"b),
  8     6 	by_explicit_context initial("010"b),
  8     7 	by_context	initial("011"b),
  8     8 	by_implication	initial("100"b),
  8     9 	by_compiler	initial("101"b)) int static bit(3) aligned options(constant);
  8    10 
  8    11 /* END INCLUDE FILE ... declare_type.incl.pl1 */
       56 
  9     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
  9     2 
  9     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
  9     4 
  9     5 /* format: style3 */
  9     6 dcl	1 operator	based aligned,
  9     7 	  2 node_type	bit (9) unaligned,
  9     8 	  2 op_code	bit (9) unaligned,
  9     9 	  2 shared	bit (1) unaligned,
  9    10 	  2 processed	bit (1) unaligned,
  9    11 	  2 optimized	bit (1) unaligned,
  9    12 	  2 number	fixed (14) unaligned,
  9    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
  9    14 
  9    15 dcl	max_number_of_operands
  9    16 			fixed bin (15) int static options (constant) initial (32767);
  9    17 
  9    18 /* END INCLUDE FILE ... operator.incl.pl1 */
       57 
 10     1 /* BEGIN INCLUDE FILE ... op_codes.incl.pl1 */
 10     2 
 10     3 /* Modified: 25 Apr 1979 by PCK 4-bit decimal */
 10     4 /* Modified: 6 Jun 1979 by PG to add rank and byte */
 10     5 /* Modified: 26 Dec 1979 by PCK to add assign_by_name */
 10     6 /* Modified: 26 July 82 BIM wordno, segno */
 10     7 
 10     8 dcl (	add		initial("000010001"b),	/* opnd(1) <- opnd(2)+opnd(3)		*/
 10     9 	sub		initial("000010010"b),	/* opnd(1) <- opnd(2)-opnd(3)		*/
 10    10 	mult		initial("000010011"b),	/* opnd(1) <- opnd(2)*opnd(3)		*/
 10    11 	div		initial("000010100"b),	/* opnd(1) <- opnd(2)/opnd(3)		*/
 10    12 	negate		initial("000010101"b),	/* opnd(1) <- -opnd(2)  		*/
 10    13 	exp		initial("000010110"b),	/* opnd(1) <- opnd(2) ** opnd(3)	*/
 10    14 
 10    15 	and_bits		initial("000100001"b),	/* opnd(1) <- opnd(2) & opnd(3)	*/
 10    16 	or_bits		initial("000100010"b),	/* opnd(1) <- opnd(2)|opnd(3)		*/
 10    17 	xor_bits		initial("000100011"b),	/* opnd(1) <- opnd(2) xor opnd(3)	*/
 10    18 	not_bits		initial("000100100"b),	/* opnd(1) <- ^opnd(2)		*/
 10    19 	cat_string	initial("000100101"b),	/* opnd(1) <- opnd(2)||opnd(3)	*/
 10    20 	bool_fun		initial("000100110"b),	/* opnd(1) <- bool(opnd(2),opnd(3),opnd(4)) */
 10    21 
 10    22 	assign		initial("000110001"b),	/* opnd(1) <- opnd(2)		*/
 10    23 	assign_size_ck	initial("000110010"b),	/* opnd(1) <- opnd(2)		*/
 10    24 	assign_zero	initial("000110011"b),	/* opnd(1) <- 0			*/
 10    25 	copy_words	initial("000110100"b),	/* move opnd(2) to opnd(1) by opnd(3) words */
 10    26 	copy_string	initial("000110101"b),	/* move opnd(2) to opnd(1) by opnd(3) units */
 10    27 	make_desc		initial("000110110"b),	/* opnd(1) <- descriptor(opnd(2),opnd(3)) */
 10    28 	assign_round	initial("000110111"b),	/* opnd(1) <- opnd(2) rounded		*/
 10    29 	pack		initial("000111000"b),	/* opnd(1) <- encode to picture opnd(2) */
 10    30 	unpack		initial("000111001"b),	/* opnd(1) <- decode from picture opnd(2) */
 10    31 
 10    32 	less_than		initial("001000100"b),	/* opnd(1) <- opnd(2) < opnd(3)	*/
 10    33 	greater_than	initial("001000101"b),	/* opnd(1) <- opnd(2) > opnd(3)	*/
 10    34 	equal		initial("001000110"b),	/* opnd(1) <- opnd(2) = opnd(3)	*/
 10    35 	not_equal		initial("001000111"b),	/* opnd(1) <- opnd(2) ^= opnd(3)	*/
 10    36 	less_or_equal	initial("001001000"b),	/* opnd(1) <- opnd(2) <= opnd(3)	*/
 10    37 	greater_or_equal	initial("001001001"b),	/* opnd(1) <- opnd(2) >= opnd(3)	*/
 10    38 
 10    39 	jump		initial("001010001"b),	/* go to opnd(1) unconditionally	*/
 10    40 	jump_true		initial("001010010"b),	/* go to opnd(1) if opnd(2) is not 0	*/
 10    41 	jump_false	initial("001010011"b),	/* go to opnd(1) if opnd(2) is all 0	*/
 10    42 	jump_if_lt	initial("001010100"b),	/* go to opnd(1) if opnd(2) < opnd(3)	*/
 10    43 	jump_if_gt	initial("001010101"b),	/* go to opnd(1) if opnd(2) > opnd(3)	*/
 10    44 	jump_if_eq	initial("001010110"b),	/* go to opnd(1) if opnd(2) = opnd(3)	*/
 10    45 	jump_if_ne	initial("001010111"b),	/* go to opnd(1) if opnd(2) ^= opnd(3)	*/
 10    46 	jump_if_le	initial("001011000"b),	/* go to opnd(1) if opnd(2) <= opnd(3)	*/
 10    47 	jump_if_ge	initial("001011001"b),	/* go to opnd(1) if opnd(2) >= opnd(3)	*/
 10    48 
 10    49 	std_arg_list	initial("001100001"b),	/* opnd(1) <- arglist(opnd(2) desclist(opnd(3)))	*/
 10    50 	return_words	initial("001100010"b),	/* return aggregate opnd(1), opnd(2) is length in words */
 10    51 	std_call		initial("001100011"b),	/* opnd(1) <- call opnd(2) with opnd(3)		*/
 10    52 	return_bits	initial("001100100"b),	/* return aggregate opnd(1), opnd(2) is length in bits */
 10    53 	std_entry		initial("001100101"b),	/* entry(opnd(1)... opnd(n))			*/
 10    54 	return_string	initial("001100110"b),	/* return string opnd(1) */
 10    55 	ex_prologue	initial("001100111"b),	/* execute the prologue -no operands-		*/
 10    56 	allot_auto	initial("001101000"b),	/* opnd(1) <- addrel(stack,opnd(2))		*/
 10    57 	param_ptr		initial("001101001"b),	/* opnd(1) <- ptr to opnd(2) in  block opnd(3)	*/
 10    58 	param_desc_ptr	initial("001101010"b),	/* opnd(1) <- ptr to opnd(2) in block opnd(3)	*/
 10    59 	std_return	initial("001101011"b),	/* return -no arguments-			*/
 10    60 	allot_ctl		initial("001101100"b),	/* allocate opnd(1) , length in words is opnd(2) 	*/
 10    61 	free_ctl		initial("001101101"b),	/* free opnd(1)				*/
 10    62 	stop		initial("001101110"b),	/* stop - terminate run unit			*/
 10    63 
 10    64 	mod_bit		initial("001110000"b),	/* opnd(1) <- mod(opnd(3),36),
 10    65*						   opnd(2) <- opnd(3) / 36		*/
 10    66 	mod_byte		initial("001110001"b),	/* opnd(1) <- mod(opnd(3),4),
 10    67*						   opnd(2) <- opnd(3) / 4		*/
 10    68 	mod_half		initial("001110010"b),	/* opnd(1) <- mod(opnd(3),2),
 10    69*						   opnd(2) <- opnd(3) / 2		*/
 10    70 	mod_word		initial("001110011"b),	/* TO BE DEFINED BY BLW			*/
 10    71 
 10    72 	bit_to_char	initial("010000000"b),	/* opnd(1) <- (opnd(2)+8)/9		*/
 10    73 	bit_to_word	initial("010000001"b),	/* opnd(1) <- (opnd(2)+35)/36		*/
 10    74 	char_to_word	initial("010000010"b),	/* opnd(1) <- (opnd(2)+3)/4		*/
 10    75 	half_to_word	initial("010000011"b),	/* opnd(1) <- (opnd(2)+1)/2		*/
 10    76 	word_to_mod2	initial("010000100"b),	/* opnd(1) <- (opnd(2)+1)/2*2		*/
 10    77 	word_to_mod4	initial("010000101"b),	/* opnd(1) <- (opnd(2)+3)/4*4		*/
 10    78 	word_to_mod8	initial("010000110"b),	/* opnd(1) <- (opnd(2)+7)/8*8		*/
 10    79 	rel_fun		initial("010000111"b),	/* opnd(1) <- rel(opnd(2))		*/
 10    80 	baseno_fun	initial("010001000"b),	/* opnd(1) <- baseno(opnd(2))		*/
 10    81 	desc_size		initial("010001001"b),	/* opnd(1) <- substr(opnd(2),13,24)	*/
 10    82 	bit_pointer	initial("010001010"b),	/* opnd(1) <- bit offset of opnd(2)	*/
 10    83 	index_before_fun	initial("010001011"b),	/* opnd(1) <- length of before(opnd(2),opnd(3)) */
 10    84 	index_after_fun	initial("010001100"b),	/* opnd(1) <- offset of after(opnd(2),opnd(3)) in opnd(2) */
 10    85 	verify_ltrim_fun	initial("010001101"b),	/* opnd(1) <- offset of ltrim(opnd(2),opnd(3)) in opnd(2) */
 10    86 	verify_rtrim_fun	initial("010001110"b),	/* opnd(1) <- length(opnd(2))-length(rtrim(opnd(2),opnd(3))) */
 10    87 	digit_to_bit	initial("010001111"b),	/* opnd(1) <- 9*opnd(2)/2		*/
 10    88 
 10    89 	ceil_fun		initial("010010000"b),	/* opnd(1) <- ceil(opnd(2))		*/
 10    90 	floor_fun		initial("010010001"b),	/* opnd(1) <- floor(opnd(2))		*/
 10    91 	round_fun		initial("010010010"b),	/* opnd(1) <- round(opnd(2))		*/
 10    92 	sign_fun		initial("010010011"b),	/* opnd(1) <- sign(opnd(2))		*/
 10    93 	abs_fun		initial("010010100"b),	/* opnd(1) <- abs(opnd(2))		*/
 10    94 	trunc_fun		initial("010010101"b),	/* opnd(1) <- trunc(opnd(2))		*/
 10    95 	byte_fun		initial("010010110"b),	/* opnd(1) <- byte(opnd(2))		*/
 10    96 	rank_fun		initial("010010111"b),	/* opnd(1) <- rank(opnd(2))		*/
 10    97 	index_rev_fun	initial("010011000"b),	/* opnd(1) <- index(reverse(opnd(2)),reverse(opnd(3))) */
 10    98 	search_rev_fun	initial("010011001"b),	/* opnd(1) <- search(reverse(opnd(2)),opnd(3)) */
 10    99 	verify_rev_fun	initial("010011010"b),	/* opnd(1) <- verify(reverse(opnd(2)),opnd(3)) */
 10   100 	wordno_fun	initial("010011011"b),        /* opnd(1) <- wordno (opnd(2)) */
 10   101 	segno_fun		initial("010011100"b),        /* opnd(1) <- segno (opnd(2)) */
 10   102 	bitno_fun           initial("010011101"b),        /* opnd(1) <- bitno (opnd(2)) */
 10   103 	charno_fun	initial("010011110"b),        /* opnd(1) <- charno (opnd(2)) */
 10   104 
 10   105 	index_fun		initial("010100000"b),	/* opnd(1) <- index(opnd(2),opnd(3))	*/
 10   106 	off_fun		initial("010100001"b),	/* opnd(1) <- offset(opnd(2),opnd(3))	*/
 10   107 	complex_fun	initial("010100010"b),	/* opnd(1) <- complex(opnd(2),opnd(3))	*/
 10   108 	conjg_fun		initial("010100011"b),	/* opnd(1) <- conjg(opnd(2),opnd(3))	*/
 10   109 	mod_fun		initial("010100100"b),	/* opnd(1) <- mod(opnd(2),opnd(3))	*/
 10   110 	repeat_fun	initial("010100101"b),	/* opnd(1) <- repeat(opnd(2),opnd(3))	*/
 10   111 	verify_fun	initial("010100110"b),	/* opnd(1) <- verify(opnd(2),opnd(3))	*/
 10   112 	translate_fun	initial("010100111"b),	/* opnd(1) <- translate(opnd(2),opnd(3))*/
 10   113 	real_fun   	initial("010101001"b),	/* opnd(1) <- real(opnd(2))		*/
 10   114 	imag_fun   	initial("010101010"b),	/* opnd(1) <- imag(opnd(2))		*/
 10   115 	length_fun	initial("010101011"b),	/* opnd(1) <- length(opnd(2))	*/
 10   116 	pl1_mod_fun	initial("010101100"b),	/* opnd(1) <- mod(opnd(2)) */
 10   117 	search_fun	initial("010101101"b),	/* opnd(1) <- search(opnd(2),opnd(3)) */
 10   118 	allocation_fun	initial("010101110"b),	/* opnd(1) <- allocation(opnd(2)) */
 10   119 	reverse_fun	initial("010101111"b),	/* opnd(1) <- reverse(opnd(2)) */
 10   120 
 10   121 	addr_fun		initial("010110000"b),	/* opnd(1) <- addr(opnd(2))		*/
 10   122 	addr_fun_bits	initial("010110001"b),	/* opnd(1) <- addr(opnd(2))		*/
 10   123 	ptr_fun		initial("010110010"b),	/* opnd(1) <- ptr(opnd(2),opnd(3))	*/
 10   124 	baseptr_fun	initial("010110011"b),	/* opnd(1) <- baseptr(opnd(2))	*/
 10   125 	addrel_fun	initial("010110100"b),	/* opnd(1) <- addrel(opnd(2),opnd(3))	*/
 10   126 	codeptr_fun	initial("010110101"b),	/* opnd(1) <- codeptr(opnd(2))	*/
 10   127 	environmentptr_fun	initial("010110110"b),	/* opnd(1) <- environmentptr(opnd(2))	*/
 10   128 	stackbaseptr_fun	initial("010110111"b),	/* opnd(1) is ptr to base of current stack	*/
 10   129 	stackframeptr_fun	initial("010111000"b),	/* opnd(1) is ptr to current block's stack frame	*/
 10   130 	setcharno_fun	initial("010111001"b),	/* opnd(1) <- opnd(2) with charno opnd(3) */
 10   131 	addcharno_fun	initial("010111010"b),	/* opnd(1) <- opnd(2) with charno = charno + opnd(3) */
 10   132 	setbitno_fun	initial("010111011"b),	/* setcharno for bitsno */
 10   133 	addbitno_fun	initial("010111100"b),	/* addcharno for bitno */
 10   134 
 10   135 	min_fun		initial("011000000"b),	/* opnd(1) <- min(opnd(1),opnd(2),...)	*/
 10   136 	max_fun		initial("011000001"b),	/* opnd(1) <- max(opnd(1),opnd(2),...)	*/
 10   137 
 10   138 	stack_ptr		initial("011010001"b),	/* opnd(1) <- stack frame ptr		*/
 10   139 	empty_area	initial("011010010"b),	/* empty opnd(1), length in words is opnd(2) */
 10   140 	enable_on		initial("011010100"b),	/* opnd(1) is the cond name
 10   141*						   opnd(2) is the file name
 10   142*						   opnd(3) is the block	*/
 10   143 	revert_on		initial("011010101"b),	/* opnd(1) is the cond name,
 10   144*						   opnd(2) is the file name	*/
 10   145 	signal_on		initial("011010110"b),	/* opnd(1) is the cond name
 10   146*						   opnd(2) is the file name */
 10   147 
 10   148 	lock_fun		initial("011010111"b),	/* opnd(1) <- stac(opnd(2),opnd(3))	*/
 10   149 	stacq_fun		initial("011011000"b),	/* opnd(1) is result, opnd(2) is ptr to lock word,
 10   150*						   opnd(3) is old value, (4) is new value. */
 10   151 	clock_fun		initial("011011001"b),	/* opnd(1) is the clock time		*/
 10   152 	vclock_fun	initial("011011010"b),	/* opnd(1) is the virtual clock time	*/
 10   153 
 10   154 	bound_ck		initial("011100000"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 10   155 	range_ck		initial("011100001"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 10   156 	loop		initial("011100010"b),	/* do opnd(1) for opnd(2) from opnd(3) to opnd(4) by 1,
 10   157*						   opnd(5) is the list */
 10   158 	join		initial("011100011"b),	/* do opnd(1), opnd(2) ... opnd(n)	*/
 10   159 	allot_based	initial("011100100"b),	/* allocate opnd(2) words in opnd(3), set opnd(1) */
 10   160 	free_based	initial("011100101"b),	/* free opnd(1) in opnd(3), length is opnd(2) words */
 10   161 
 10   162 	r_parn		initial("011110001"b),	/* format op code			*/
 10   163 	l_parn		initial("011110010"b),
 10   164 	r_format		initial("011110011"b),
 10   165 	c_format		initial("011110100"b),
 10   166 	f_format		initial("011110101"b),
 10   167 	e_format		initial("011110110"b),
 10   168 	b_format		initial("011110111"b),
 10   169 	a_format		initial("011111000"b),
 10   170 	x_format		initial("011111001"b),
 10   171 	skip_format	initial("011111010"b),
 10   172 	column_format	initial("011111011"b),
 10   173 	page_format	initial("011111100"b),
 10   174 	line_format	initial("011111101"b),
 10   175 	picture_format	initial("011111110"b),
 10   176 	bn_format		initial("011111111"b),	/* bit format, length(opnd(2)), radix factor(opnd(3)) */
 10   177 
 10   178 	get_list_trans	initial("100000000"b),	/* getlist(opnd(2) with desc(opnd(1)))	*/
 10   179 	get_edit_trans	initial("100000001"b),	/* getedit(opnd(2) with desc(opnd(1)))	*/
 10   180 	get_data_trans	initial("100000010"b),	/* getdata(opnd(1) to opnd(n))	*/
 10   181 	put_list_trans	initial("100000011"b),	/* putlist(opnd(2) with desc(opnd(1)))	*/
 10   182 	put_edit_trans	initial("100000100"b),	/* putedit(opnd(2) with desc(opnd(1)))	*/
 10   183 	put_data_trans	initial("100000101"b),	/* putdata(opnd(2)) with subscript-list opnd(1) */
 10   184 	terminate_trans	initial("100000110"b),	/* terminate stream transmission	*/
 10   185 	stream_prep	initial("100000111"b),	/* initiate stream transmission	*/
 10   186 	record_io		initial("100001000"b),	/* perform record io operation	*/
 10   187 	fortran_read	initial("100001001"b),	/* A complete read statement		*/
 10   188 	fortran_write	initial("100001010"b),	/* A complete write statement		*/
 10   189 	ftn_file_manip	initial("100001011"b),	/* endfile,backspace,rewind,etc.	*/
 10   190 	ftn_trans_loop	initial("100001100"b),	/* An implied do in i/o list		*/
 10   191 	put_control	initial("100001101"b),	/* put control opnd(1) opnd(2) times	*/
 10   192 	put_field		initial("100001110"b),	/* putlist(opnd(2)) of length(opnd(1))	*/
 10   193 	put_field_chk	initial("100001111"b),	/* putlist(op(2)) of len(op(1)) check char index(op(3)) */
 10   194 
 10   195 /* These operators are produced by the parse but are not used as input to the code generator.	*/
 10   196 /* They are processed by the semantic translator.						*/
 10   197 
 10   198 	return_value	initial("100010010"b),	/* return(opnd(1))			*/
 10   199 	allot_var		initial("100010011"b),	/* allot opnd(1) in opnd(2)		*/
 10   200 	free_var		initial("100010100"b),	/* free opnd(1) out of opnd(2)	*/
 10   201 	get_file		initial("100010101"b),	/* opnd(1) is filename,opnd(2) is copy	*/
 10   202 						/* opnd(3) is skip, opnd(4) is list	*/
 10   203 	get_string	initial("100010110"b),	/* opnd(1) is string,opnd(2) is list	*/
 10   204 	put_file		initial("100010111"b),	/* opnd(1) is filename,opnd(2) is page	*/
 10   205 						/* opnd(3) is skip,opnd(4) is line	*/
 10   206 	put_string	initial("100011000"b),	/* opnd(1) is string,opnd(2) is list	*/
 10   207 	open_file		initial("100011001"b),
 10   208 	close_file	initial("100011010"b),
 10   209 	read_file		initial("100011011"b),
 10   210 	write_file	initial("100011100"b),
 10   211 	locate_file	initial("100011101"b),
 10   212 	do_fun		initial("100011110"b),	/* opnd(1) is join of a list		*/
 10   213 						/* opnd(2) is control variable ref	*/
 10   214 						/* opnd(3) is specification operator	*/
 10   215 	do_spec		initial("100011111"b),	/* opnd(1) to opnd(2) by opnd(3) 	*/
 10   216 						/* repeat opnd(4) while opnd(5)	*/
 10   217 						/* opnd(6) is next specification	*/
 10   218 
 10   219 	rewrite_file	initial("100100000"b),
 10   220 	delete_file	initial("100100001"b),
 10   221 	unlock_file	initial("100100010"b),
 10   222 	lock_file		initial("100100011"b),
 10   223 	refer		initial("100100101"b),	/* opnd(1) refer(opnd(2))		*/
 10   224 	prefix_plus	initial("100100110"b),	/* opnd(1) <- +opnd(2)		*/
 10   225 	nop		initial("100100111"b),	/* no-op */
 10   226 	assign_by_name	initial("100101000"b),	/* opnd(1) <- opnd(2),by name		*/
 10   227 
 10   228 /* These operators are produced by the semantic translator in processing the math
 10   229*   builtin functions and are used as input to the code generator			*/
 10   230 
 10   231 	sqrt_fun		initial("100110000"b),	/* opnd(1) <- sqrt(opnd(2))	*/
 10   232 	sin_fun		initial("100110001"b),	/* opnd(1) <- sin(opnd(2))	*/
 10   233 	sind_fun		initial("100110010"b),	/* opnd(1) <- sind(opnd(2))	*/
 10   234 	cos_fun		initial("100110011"b),	/* opnd(1) <- cos(opnd(2))	*/
 10   235 	cosd_fun		initial("100110100"b),	/* opnd(1) <- cosd(opnd(2))	*/
 10   236 	tan_fun		initial("100110101"b),	/* opnd(1) <- tan(opnd(2))	*/
 10   237 	tand_fun		initial("100110110"b),	/* opnd(1) <- tand(opnd(2))	*/
 10   238 	asin_fun		initial("100110111"b),	/* opnd(1) <- asin(opnd(2))	*/
 10   239 	asind_fun		initial("100111000"b),	/* opnd(1) <- asind(opnd(2))	*/
 10   240 	acos_fun		initial("100111001"b),	/* opnd(1) <- acos(opnd(2))	*/
 10   241 	acosd_fun		initial("100111010"b),	/* opnd(1) <- acosd(opnd(2))	*/
 10   242 	atan_fun		initial("100111011"b),	/* opnd(1) <- atan(opnd(2)[,opnd(3)])	*/
 10   243 	atand_fun		initial("100111100"b),	/* opnd(1) <- atand(opnd(2)[,opnd(3)])	*/
 10   244 	log2_fun		initial("100111101"b),	/* opnd(1) <- log2(opnd(2))	*/
 10   245 	log_fun		initial("100111110"b),	/* opnd(1) <- log(opnd(2))	*/
 10   246 	log10_fun		initial("100111111"b),	/* opnd(1) <- log10(opnd(2))	*/
 10   247 
 10   248 	exp_fun		initial("101000000"b))	/* opnd(1) <- exp(opnd(2))	*/
 10   249 
 10   250 			bit(9) aligned internal static options(constant);
 10   251 
 10   252 /* END INCLUDE FILE ... op_codes.incl.pl1 */
       58 
 11     1 /* BEGIN INCLUDE FILE ... picture_image.incl.pl1
 11     2*
 11     3*   James R. Davis  12 Mar 79
 11     4**/
 11     5 
 11     6      dcl	   1 picture_image	      aligned based,
 11     7 	     2 type	      fixed bin (8) unal,
 11     8 	     2 prec	      fixed bin (8) unal,	/* precision or length of associated value */
 11     9 	     2 scale	      fixed bin (8) unal,	/* for both fixed and float pictures,
 11    10*							=ndigits after "v" - scale_factor */
 11    11 	     2 piclength	      fixed bin (8) unal,	/* length of picture_constant.chars, <64
 11    12*							=length of normalized-picture-string */
 11    13 	     2 varlength	      fixed bin (8) unal,	/* length of pictured variable in chars, <64
 11    14*							=length of normalized_picture_string - "k" and "v" */
 11    15 	     2 scalefactor	      fixed bin (8) unal,	/* value of pict-sc-f, -256<=x<256  */
 11    16 	     2 explength	      fixed bin (8) unal,	/* length of exp field for float */
 11    17 	     2 drift_character    char (1) unal,
 11    18 	     2 chars	      char (0 refer (picture_image.piclength)) aligned;
 11    19 
 11    20      dcl	   (
 11    21 	   picture_char_type      init (24),
 11    22 	   picture_realfix_type   init (25),
 11    23 	   picture_complexfix_type
 11    24 			      init (26),
 11    25 	   picture_realflo_type   init (27),
 11    26 	   picture_complexflo_type
 11    27 			      init (28)
 11    28 	   )		      fixed bin (8) unal static internal options (constant);
 11    29 
 11    30 /* END INCLUDE FILE  ... picture_image.incl.pl1  */
       59 
 12     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
 12     2 
 12     3 dcl	1 reference		based aligned,
 12     4 	2 node_type		bit(9) unaligned,
 12     5 	2 array_ref		bit(1) unaligned,
 12     6 	2 varying_ref		bit(1) unaligned,
 12     7 	2 shared			bit(1) unaligned,
 12     8 	2 put_data_sw		bit(1) unaligned,
 12     9 	2 processed		bit(1) unaligned,
 12    10 	2 units			fixed(3) unaligned,
 12    11 	2 ref_count		fixed(17) unaligned,
 12    12 	2 c_offset		fixed(24),
 12    13 	2 c_length		fixed(24),
 12    14 	2 symbol			ptr unaligned,
 12    15 	2 qualifier		ptr unaligned,
 12    16 	2 offset			ptr unaligned,
 12    17 	2 length			ptr unaligned,
 12    18 	2 subscript_list		ptr unaligned,
 12    19 						/* these fields are used by the 645 code generator */
 12    20 	2 address			structure unaligned,
 12    21 	  3 base			bit(3),
 12    22 	  3 offset		bit(15),
 12    23 	  3 op			bit(9),
 12    24 	  3 no_address		bit(1),
 12    25 	  3 inhibit		bit(1),
 12    26 	  3 ext_base		bit(1),
 12    27 	  3 tag			bit(6),
 12    28 	2 info			structure unaligned,
 12    29 	  3 address_in		structure,
 12    30 	    4 b			dimension(0:7) bit(1),
 12    31 	    4 storage		bit(1),
 12    32 	  3 value_in		structure,
 12    33 	    4 a			bit(1),
 12    34 	    4 q			bit(1),
 12    35 	    4 aq			bit(1),
 12    36 	    4 string_aq		bit(1),
 12    37 	    4 complex_aq		bit(1),
 12    38 	    4 decimal_aq		bit(1),
 12    39 	    4 b			dimension(0:7) bit(1),
 12    40 	    4 storage		bit(1),
 12    41 	    4 indicators		bit(1),
 12    42 	    4 x			dimension(0:7) bit(1),
 12    43 	  3 other			structure,
 12    44 	    4 big_offset		bit(1),
 12    45 	    4 big_length		bit(1),
 12    46 	    4 modword_in_offset	bit(1),
 12    47 	2 data_type		fixed(5) unaligned,
 12    48 	2 bits			structure unaligned,
 12    49 	  3 padded_ref		bit(1),
 12    50 	  3 aligned_ref		bit(1),
 12    51 	  3 long_ref		bit(1),
 12    52 	  3 forward_ref		bit(1),
 12    53 	  3 ic_ref		bit(1),
 12    54 	  3 temp_ref		bit(1),
 12    55 	  3 defined_ref		bit(1),
 12    56 	  3 evaluated		bit(1),
 12    57 	  3 allocate		bit(1),
 12    58 	  3 allocated		bit(1),
 12    59 	  3 aliasable		bit(1),
 12    60 	  3 even			bit(1),
 12    61 	  3 perm_address		bit(1),
 12    62 	  3 aggregate		bit(1),
 12    63 	  3 hit_zero		bit(1),
 12    64 	  3 dont_save		bit(1),
 12    65 	  3 fo_in_qual		bit(1),
 12    66 	  3 hard_to_load		bit(1),
 12    67 	2 relocation		bit(12) unaligned,
 12    68 	2 more_bits		structure unaligned,
 12    69 	  3 substr		bit(1),
 12    70 	  3 padded_for_store_ref	bit(1),
 12    71 	  3 aligned_for_store_ref	bit(1),
 12    72 	  3 mbz			bit(15),
 12    73 	2 store_ins		bit(18) unaligned;
 12    74 
 12    75 /* END INCLUDE FILE ... reference.incl.pl1 */
       60 
 13     1 /* ***********************************************************
 13     2*   *                                                         *
 13     3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
 13     4*   *                                                         *
 13     5*   *********************************************************** */
 13     6 /* BEGIN INCLUDE FILE ... statement.incl.pl1 */
 13     7 /* Internal interface of the PL/I compiler */
 13     8 
 13     9 dcl	1 statement		based aligned,
 13    10 	2 node_type		bit(9) unaligned,
 13    11 	2 source_id		structure unaligned,
 13    12 	  3 file_number		bit(8),
 13    13 	  3 line_number		bit(14),
 13    14 	  3 statement_number	bit(5),
 13    15 	2 next			ptr unaligned,
 13    16 	2 back			ptr unaligned,
 13    17 	2 root			ptr unaligned,
 13    18 	2 labels			ptr unaligned,
 13    19 	2 reference_list		ptr unaligned,
 13    20 	2 state_list		ptr unaligned,
 13    21 	2 reference_count		fixed(17) unaligned,
 13    22 	2 ref_count_copy		fixed(17) unaligned,
 13    23 	2 object			structure unaligned,
 13    24 	  3 start			fixed(17),
 13    25 	  3 finish		fixed(17),
 13    26 	2 source			structure unaligned,
 13    27 	  3 segment		fixed(11),
 13    28 	  3 start			fixed(23),
 13    29 	  3 length		fixed(11),
 13    30 	2 prefix			bit(12) unaligned,
 13    31 	2 optimized		bit(1) unaligned,
 13    32 	2 free_temps		bit(1) unaligned,
 13    33 	2 LHS_in_RHS		bit(1) unaligned,
 13    34 	2 statement_type		bit(9) unaligned,
 13    35 	2 bits			structure unaligned,
 13    36 	  3 processed		bit(1) unaligned,
 13    37 	  3 put_in_profile		bit(1) unaligned,
 13    38 	  3 generated		bit(1) unaligned,
 13    39 	  3 snap			bit(1) unaligned,
 13    40 	  3 system		bit(1) unaligned,
 13    41 	  3 irreducible		bit(1) unaligned,
 13    42 	  3 checked		bit(1) unaligned,
 13    43 	  3 save_temps		bit(1) unaligned,
 13    44 	  3 suppress_warnings	bit(1) unaligned,
 13    45 	  3 force_nonquick		bit(1) unaligned,
 13    46 	  3 expanded_by_name	bit(1) unaligned,
 13    47 	  3 begins_loop		bit(1) unaligned,
 13    48 	  3 pad			bit(24) unaligned;
 13    49 
 13    50 /* END INCLUDE FILE ... statement.incl.pl1 */
       61 
 14     1 dcl	pl1_stat_$token_list_ptr ptr external static;		/* pointer to token list	*/
 14     2 dcl	token_list(token_list_length) ptr based(token_list_pointer);
 14     3 dcl	token_list_pointer ptr initial(pl1_stat_$token_list_ptr);	/* for efficiency only */
 14     4 dcl	token_list_length fixed(15) internal static initial(3000) options(constant);
 14     5 
 14     6 dcl	1 pl1_stat_$statement_id	external static,
 14     7 	2 file_number		bit(8),
 14     8 	2 line_number		bit(14),
 14     9 	2 statement_number		bit(5);
 14    10 
 14    11 dcl	1 t_table 		based(token_list(k)) aligned,
 14    12 	2 node_type		bit(9) unaligned,
 14    13 	2 type			bit(9) unaligned,
 14    14 	2 loc			bit(18) unaligned,
 14    15 	2 declaration		ptr unaligned,
 14    16 	2 next			ptr unaligned,
 14    17 	2 size			fixed(9),
 14    18 	2 string			char(n refer(t_table.size));
       62 
 15     1 /* BEGIN INCLUDE FILE ... token.incl.pl1 */
 15     2 
 15     3 dcl	1 token			based aligned,
 15     4 	2 node_type		bit(9) unaligned,
 15     5 	2 type			bit(9) unaligned,
 15     6 	2 loc			bit(18) unaligned,	/* symtab offset for identifiers, "p" flag for constants */
 15     7 	2 declaration		ptr unaligned,
 15     8 	2 next			ptr unaligned,
 15     9 	2 size			fixed(9),
 15    10 	2 string			char(n refer(token.size));
 15    11 
 15    12 /* END INCLUDE FILE ... token.incl.pl1 */
       63 
 16     1 /* BEGIN INCLUDE FILE ... token_types.incl.pl1 */
 16     2 
 16     3 dcl (	no_token		initial("000000000"b),	/*	token types		*/
 16     4 	identifier	initial("100000000"b),
 16     5 	isub		initial("010000000"b),
 16     6 	plus		initial("001000001"b),
 16     7 	minus		initial("001000010"b),
 16     8 	asterisk		initial("001000011"b),
 16     9 	slash		initial("001000100"b),
 16    10 	expon		initial("001000101"b),
 16    11 	not		initial("001000110"b),
 16    12 	and		initial("001000111"b),
 16    13 	or		initial("001001000"b),
 16    14 	cat		initial("001001001"b),
 16    15 	eq		initial("001001010"b),
 16    16 	ne		initial("001001011"b),
 16    17 	lt		initial("001001100"b),
 16    18 	gt		initial("001001101"b),
 16    19 	le		initial("001001110"b),
 16    20 	ge		initial("001001111"b),
 16    21 	ngt		initial("001010000"b),
 16    22 	nlt		initial("001010001"b),
 16    23 	assignment	initial("001010010"b),
 16    24 	colon		initial("001010011"b),
 16    25 	semi_colon	initial("001010100"b),
 16    26 	comma		initial("001010101"b),
 16    27 	period		initial("001010110"b),
 16    28 	arrow		initial("001010111"b),
 16    29 	left_parn		initial("001011000"b),
 16    30 	right_parn	initial("001011001"b),
 16    31 	percent		initial("001011100"b),
 16    32 	bit_string	initial("000100001"b),
 16    33 	char_string	initial("000100010"b),
 16    34 	bin_integer	initial("000110001"b),
 16    35 	dec_integer	initial("000110011"b),
 16    36 	fixed_bin		initial("000110000"b),
 16    37 	fixed_dec		initial("000110010"b),
 16    38 	float_bin		initial("000110100"b),
 16    39 	float_dec		initial("000110110"b),
 16    40 	i_bin_integer	initial("000111001"b),
 16    41 	i_dec_integer	initial("000111011"b),
 16    42 	i_fixed_bin	initial("000111000"b),
 16    43 	i_fixed_dec	initial("000111010"b),
 16    44 	i_float_bin	initial("000111100"b),
 16    45 	i_float_dec	initial("000111110"b)) bit (9) aligned internal static options (constant);
 16    46 
 16    47 dcl (	is_identifier		initial ("100000000"b),	/*	token type masks		*/
 16    48 	is_isub			initial ("010000000"b),
 16    49 	is_delimiter		initial ("001000000"b),
 16    50 	is_constant		initial ("000100000"b),
 16    51 	is_arith_constant		initial ("000010000"b),	/* N.B. not really a mask...s/b "000110000"b */
 16    52 	is_arithmetic_constant	initial ("000110000"b),
 16    53 	is_imaginary_constant	initial ("000111000"b),
 16    54 	is_float_constant		initial ("000110100"b),
 16    55 	is_decimal_constant		initial ("000110010"b),
 16    56 	is_integral_constant 	initial ("000110001"b)
 16    57 	) bit(9) internal static aligned options(constant);
 16    58 
 16    59 /* END INCLUDE FILE ... token_types.incl.pl1 */
       64 
 17     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
 17     2 
 17     3 dcl	1 symbol			based aligned,
 17     4 	2 node_type		bit(9) unal,
 17     5 	2 source_id		structure unal,
 17     6 	  3 file_number		bit(8),
 17     7 	  3 line_number		bit(14),
 17     8 	  3 statement_number	bit(5),
 17     9 	2 location		fixed(18) unal unsigned,
 17    10 	2 allocated		bit(1) unal,
 17    11 	2 dcl_type		bit(3) unal,
 17    12 	2 reserved		bit(6) unal,
 17    13 	2 pix			unal,
 17    14 	  3 pic_fixed		bit(1) unal,
 17    15 	  3 pic_float		bit(1) unal,
 17    16 	  3 pic_char		bit(1) unal,
 17    17 	  3 pic_scale		fixed(7) unal,
 17    18 	  3 pic_size		fixed(7) unal,
 17    19 	2 level			fixed(8) unal,
 17    20 	2 boundary		fixed(3) unal,
 17    21 	2 size_units		fixed(3) unal,
 17    22 	2 scale			fixed(7) unal,
 17    23 	2 runtime			bit(18) unal,
 17    24 	2 runtime_offset		bit(18) unal,
 17    25 	2 block_node		ptr unal,
 17    26 	2 token			ptr unal,
 17    27 	2 next			ptr unal,
 17    28 	2 multi_use		ptr unal,
 17    29 	2 cross_references		ptr unal,
 17    30 	2 initial			ptr unal,
 17    31 	2 array			ptr unal,
 17    32 	2 descriptor		ptr unal,
 17    33 	2 equivalence		ptr unal,
 17    34 	2 reference		ptr unal,
 17    35 	2 general			ptr unal,
 17    36 	2 father			ptr unal,
 17    37 	2 brother			ptr unal,
 17    38 	2 son			ptr unal,
 17    39 	2 word_size		ptr unal,
 17    40 	2 bit_size		ptr unal,
 17    41 	2 dcl_size		ptr unal,
 17    42 	2 symtab_size		ptr unal,
 17    43 	2 c_word_size		fixed(24),
 17    44 	2 c_bit_size		fixed(24),
 17    45 	2 c_dcl_size		fixed(24),
 17    46 
 17    47 	2 attributes		structure aligned,
 17    48 	  3 data_type		structure unal,
 17    49 	    4 structure		bit(1) ,
 17    50 	    4 fixed		bit(1),
 17    51 	    4 float		bit(1),
 17    52 	    4 bit			bit(1),
 17    53 	    4 char		bit(1),
 17    54 	    4 ptr			bit(1),
 17    55 	    4 offset		bit(1),
 17    56 	    4 area		bit(1),
 17    57 	    4 label		bit(1),
 17    58 	    4 entry		bit(1),
 17    59 	    4 file		bit(1),
 17    60 	    4 arg_descriptor	bit(1),
 17    61 	    4 storage_block		bit(1),
 17    62 	    4 explicit_packed	bit(1), /* options(packed) */
 17    63 	    4 condition		bit(1),
 17    64 	    4 format		bit(1),
 17    65 	    4 builtin		bit(1),
 17    66 	    4 generic		bit(1),
 17    67 	    4 picture		bit(1),
 17    68 
 17    69 	  3 misc_attributes		structure unal,
 17    70 	    4 dimensioned		bit(1),
 17    71 	    4 initialed		bit(1),
 17    72 	    4 aligned		bit(1),
 17    73 	    4 unaligned		bit(1),
 17    74 	    4 signed		bit(1),
 17    75 	    4 unsigned		bit(1),
 17    76 	    4 precision		bit(1),
 17    77 	    4 varying		bit(1),
 17    78 	    4 local		bit(1),
 17    79 	    4 decimal		bit(1),
 17    80 	    4 binary		bit(1),
 17    81 	    4 real		bit(1),
 17    82 	    4 complex		bit(1),
 17    83 	    4 variable		bit(1),
 17    84 	    4 reducible		bit(1),
 17    85 	    4 irreducible		bit(1),
 17    86 	    4 returns		bit(1),
 17    87 	    4 position		bit(1),
 17    88 	    4 internal		bit(1),
 17    89 	    4 external		bit(1),
 17    90 	    4 like		bit(1),
 17    91 	    4 member		bit(1),
 17    92 	    4 non_varying		bit(1),
 17    93 	    4 options		bit(1),
 17    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
 17    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
 17    96 
 17    97 	  3 storage_class		structure unal,
 17    98 	    4 auto		bit(1),
 17    99 	    4 based		bit(1),
 17   100 	    4 static		bit(1),
 17   101 	    4 controlled		bit(1),
 17   102 	    4 defined		bit(1),
 17   103 	    4 parameter		bit(1),
 17   104 	    4 param_desc		bit(1),
 17   105 	    4 constant		bit(1),
 17   106 	    4 temporary		bit(1),
 17   107 	    4 return_value		bit(1),
 17   108 
 17   109 	  3 file_attributes		structure unal,
 17   110 	    4 print		bit(1),
 17   111 	    4 input		bit(1),
 17   112 	    4 output		bit(1),
 17   113 	    4 update		bit(1),
 17   114 	    4 stream		bit(1),
 17   115 	    4 reserved_1		bit(1),
 17   116 	    4 record		bit(1),
 17   117 	    4 sequential		bit(1),
 17   118 	    4 direct		bit(1),
 17   119 	    4 interactive		bit(1),		/* env(interactive) */
 17   120 	    4 reserved_2		bit(1),
 17   121 	    4 reserved_3		bit(1),
 17   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
 17   123 	    4 keyed		bit(1),
 17   124 	    4 reserved_4		bit(1),
 17   125 	    4 environment		bit(1),
 17   126 
 17   127 	  3 compiler_developed	structure unal,
 17   128 	    4 aliasable		bit(1),
 17   129 	    4 packed		bit(1),
 17   130 	    4 passed_as_arg		bit(1),
 17   131 	    4 allocate		bit(1),
 17   132 	    4 set			bit(1),
 17   133 	    4 exp_extents		bit(1),
 17   134 	    4 refer_extents		bit(1),
 17   135 	    4 star_extents		bit(1),
 17   136 	    4 isub		bit(1),
 17   137 	    4 put_in_symtab		bit(1),
 17   138 	    4 contiguous		bit(1),
 17   139 	    4 put_data		bit(1),
 17   140 	    4 overlayed		bit(1),
 17   141 	    4 error		bit(1),
 17   142 	    4 symtab_processed	bit(1),
 17   143 	    4 overlayed_by_builtin	bit(1),
 17   144 	    4 defaulted		bit(1),
 17   145 	    4 connected		bit(1);
 17   146 
 17   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
       65 
       66 
       67 /* program */
       68 
       69 	ksaved = k;
       70 	if t_table.type ^= left_parn
       71 	then go to err278;
       72 
       73 	last = null;
       74 	k = k + 1;
       75 
       76 next_item:
       77 	rptr = null;
       78 	if t_table.type = dec_integer | t_table.type = left_parn
       79 	then do;
       80 		if t_table.type = dec_integer
       81 		then	rptr = token_list (k);
       82 		else do;
       83 			k = k + 1;
       84 			rptr = expression_parse (k, cur_block);
       85 			if rptr = null then go to err278;
       86 
       87 			if t_table.type ^= right_parn then goto err278;
       88 		     end;
       89 
       90 		k = k + 1;
       91 
       92 		if t_table.type =left_parn
       93 		then	if format_list_parse (k, cur_block, (null), item)
       94 			then do;
       95 				lparen = create_operator (l_parn, 3);
       96 				lparen -> operator.operand (3) = item;
       97 
       98 				item = lparen;
       99 				go to end_action2;
      100 			     end;
      101 			else goto err278;
      102 	     end;
      103 
      104 	if t_table.type ^= identifier
      105 	then go to err278;
      106 
      107 	do indx = lbound (format_names, 1) to hbound (format_names, 1) while (t_table.string ^= format_names (indx));
      108 	end;
      109 
      110 	if indx > hbound (format_names, 1)
      111 	then go to err298;
      112 
      113 	k = k + 1;
      114 	go to action (indx);
      115 
      116 /* Set the operator code for each format operator */
      117 
      118 action (1):					/* a format */
      119 	formatcode = a_format;
      120 	go to action2 (indx);
      121 
      122 action (2):					/* f format */
      123 	formatcode = f_format;
      124 	go to action2 (indx);
      125 
      126 action (3):					/* e format */
      127 	formatcode = e_format;
      128 	go to action2 (indx);
      129 
      130 action (4):					/* x format */
      131 	formatcode = x_format;
      132 	go to action2 (indx);
      133 
      134 action (5):					/* skip format */
      135 	formatcode = skip_format;
      136 	go to action2 (indx);
      137 
      138 action (6):					/* page format */
      139 	formatcode = page_format;
      140 	go to action2 (indx);
      141 
      142 action (7):					/* line format */
      143 	formatcode = line_format;
      144 	go to action2 (indx);
      145 
      146 action (8):					/* col format */
      147 action (9):					/* column format */
      148 	formatcode = column_format;
      149 	go to action2 (indx);
      150 
      151 action (10):					/* b format */
      152 action (11):					/* b1 format */
      153 	formatcode = b_format;
      154 	go to action2 (indx);
      155 
      156 action (12):					/* b2 format */
      157 action (13):					/* b3 format */
      158 action (14):					/* b4 format */
      159 	formatcode = bn_format;
      160 	go to action2 (indx);
      161 
      162 action (15):					/* c (complex) format */
      163 	formatcode = c_format;
      164 	go to action2 (indx);
      165 
      166 action (16):					/* p (picture) format */
      167 	formatcode = picture_format;
      168 	go to action2 (indx);
      169 
      170 action (17):					/* r (remote) format */
      171 	formatcode = r_format;
      172 	go to action2 (indx);
      173 
      174 /* Now parse the (sometimes) optional arguments to each format operator */
      175 
      176 action2 (1):					/* a (char) format */
      177 	if t_table.type = left_parn
      178 	then go to merge_xr;
      179 
      180 	/* get edit (foo)(a) is illegal */
      181 	/* it must be get edit (foo)(a(size)); */
      182 	if token_list (1)->t_table.string = "get" 
      183 	then do;
      184 	     call parse_error (391, token_list (k));
      185 	     goto ret0;
      186 	end;
      187 	item = create_operator (formatcode, 2);
      188 	go to end_action2;
      189 
      190 
      191 action2 (5):					/* skip format */
      192 action2 (10):					/* b (bit) format */
      193 action2 (11):					/* b1 (bit) format */
      194 	if t_table.type = left_parn
      195 	then go to merge_xr;
      196 
      197 	item = create_operator (formatcode, 2);
      198 	go to end_action2;
      199 
      200 action2 (4):					/* x (spaces) format */
      201 action2 (7):					/* line format */
      202 action2 (8):					/* col format */
      203 action2 (9):					/* column format */
      204 action2 (17):					/* r (remote) format */
      205 	if t_table.type ^= left_parn
      206 	then go to err278;
      207 
      208 merge_xr:
      209 	k = k + 1;
      210 	item = create_operator (formatcode, 3);
      211 	if formatcode = r_format
      212 	then item -> operator.operand (3) = reference_parse (k, cur_block);
      213 	else item -> operator.operand (3) = expression_parse (k, cur_block);
      214 
      215 	if item -> operator.operand (3) = null
      216 	then go to err278;
      217 
      218 	if t_table.type ^= right_parn
      219 	then go to err278;
      220 
      221 	k = k + 1;
      222 	go to end_action2;
      223 
      224 action2 (2):					/* f format */
      225 action2 (3):					/* e format */
      226 	if t_table.type ^= left_parn
      227 	then go to err278;
      228 
      229 	k = k + 1;
      230 	expr (1) = expression_parse (k, cur_block);
      231 	if expr (1) = null
      232 	then go to err278;
      233 
      234 	do n = 2 to 3 while (t_table.type = comma);
      235 	     k = k + 1;
      236 	     expr (n) = expression_parse (k, cur_block);
      237 	     if expr (n) = null
      238 	     then go to err278;
      239 	end;
      240 	n = n - 1;
      241 
      242 	if t_table.type ^= right_parn
      243 	then go to err278;
      244 
      245 	k = k + 1;
      246 	item = create_operator (formatcode, 2 + n);
      247 	item -> operator.operand (3) = expr (1);
      248 
      249 	if n > 1
      250 	then do;
      251 		item -> operator.operand (4) = expr (2);
      252 
      253 		if n > 2
      254 		then item -> operator.operand (5) = expr (3);
      255 	     end;
      256 
      257 	go to end_action2;
      258 
      259 action2 (6):					/* page format */
      260 	item = create_operator (formatcode, 2);
      261 	go to end_action2;
      262 
      263 action2 (15):					/* c (complex) format */
      264 	if ^format_list_parse (k, cur_block, (null), item)
      265 	then go to err278;
      266 
      267 	c = create_operator (c_format, 4);
      268 	c -> operator.operand (3) = item;
      269 
      270 	if item -> operand (1) = null
      271 	then c -> operator.number = 3;
      272 	else do;
      273 		c -> operator.operand (4) = item -> operator.operand (1);
      274 		if c -> operator.operand (4) -> operator.operand (1) ^= null
      275 		then go to err427;
      276 
      277 		item -> operator.operand (1) = null;
      278 	     end;
      279 
      280 	item = c;
      281 
      282 	do i = 3 to item -> operator.number;
      283 	     if item -> operand (i) -> op_code = picture_format
      284 	     then if item -> operand (i) -> operand (3) -> reference.symbol -> symbol.initial -> picture_image.type = 24
      285 		then go to err170;
      286 	end;
      287 	go to end_action2;
      288 
      289 action2 (12):					/* b2 format */
      290 action2 (13):					/* b3 format */
      291 action2 (14):					/* b4 format */
      292 	b_type = substr (token_list (k - 1) -> token.string, 2, 1);
      293 	if t_table.type ^= left_parn
      294 	then num_ops = 3;
      295 	else num_ops = 4;
      296 
      297 	item = create_operator (formatcode, num_ops);
      298 	item -> operator.operand (3) = create_token (b_type, dec_integer);
      299 
      300 	if num_ops = 4
      301 	then do;
      302 		k = k + 1;
      303 		item -> operand (4) = expression_parse (k, cur_block);
      304 		if item -> operator.operand (4) = null
      305 		then go to err278;
      306 
      307 		if t_table.type ^= right_parn
      308 		then go to err278;
      309 
      310 		k = k + 1;
      311 	     end;
      312 	go to end_action2;
      313 
      314 action2 (16):					/* p format */
      315 	if t_table.type ^= char_string
      316 	then go to err297;
      317 
      318 	item = create_operator (formatcode, 3);
      319 	pic_symbol = create_symbol (cur_block, null, by_compiler);
      320 	call declare_picture (t_table.string, pic_symbol, pic_code);
      321 	item -> operand (3) = pic_symbol -> symbol.general;
      322 	call free_node (pic_symbol);
      323 
      324 	if pic_code ^= 0
      325 	then do;
      326 		call parse_error (pic_code, token_list (k));
      327 		go to ret0;
      328 	     end;
      329 
      330 	item -> operator.operand (3) -> reference.symbol -> symbol.allocate = "1"b;
      331 	k = k + 1;
      332 
      333 end_action2:
      334 	if last = null
      335 	then p = item;
      336 	else last -> operator.operand (1) = item;
      337 
      338 	item -> operator.operand (2) = rptr;
      339 	last = item;
      340 
      341 	if t_table.type = comma
      342 	then do;
      343 		k = k + 1;
      344 		goto next_item;
      345 	     end;
      346 
      347 	if t_table.type ^= right_parn
      348 	then go to err278;
      349 
      350 	k = k + 1;
      351 
      352 	if st ^= null
      353 	then st -> statement.root = p;
      354 
      355 	format_tree = p;
      356 
      357 	return ("1"b);
      358 
      359 err297:
      360 	call parse_error (297, null);			/* Syntax error in a picture format item. */
      361 	goto ret0;
      362 
      363 err298:
      364 	call parse_error (298, token_list (k));		/* Syntax error. $ is not a valid format keyword. */
      365 	go to ret0;
      366 
      367 err278:
      368 	call parse_error (278, token_list (k));		/* Syntax error in a format-list */
      369 	goto ret0;
      370 
      371 err170:
      372 	call parse_error (170, null);			/* A complex format item must contain e, f, or a numeric-picture */
      373 	goto ret0;
      374 
      375 err427:
      376 	call parse_error (427, null);			/* Syntax error in a complex format-list */
      377 
      378 ret0:
      379 	k=ksaved;
      380 	return("0"b);
      381 
      382      end /* format_list_parse */;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/24/92  1102.4  format_list_parse.pl1             >spec>install>MR12.5-1011>format_list_parse.pl1
55           1    04/24/92  1056.9  parse.incl.pl1                    >spec>install>MR12.5-1011>parse.incl.pl1
1-175        2    08/01/89  1339.9  language_utility.incl.pl1         >ldd>incl>language_utility.incl.pl1
2-307        3    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-325        4    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-335        5    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-374        6    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-386        7    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
56           8    10/25/79  1745.8  declare_type.incl.pl1             >ldd>incl>declare_type.incl.pl1
57           9    07/21/80  1646.3  operator.incl.pl1                 >ldd>incl>operator.incl.pl1
58          10    04/07/83  1735.0  op_codes.incl.pl1                 >ldd>incl>op_codes.incl.pl1
59          11    06/28/79  1304.8  picture_image.incl.pl1            >ldd>incl>picture_image.incl.pl1
60          12    07/21/80  1646.3  reference.incl.pl1                >ldd>incl>reference.incl.pl1
61          13    04/07/83  1735.0  statement.incl.pl1                >ldd>incl>statement.incl.pl1
62          14    09/14/77  1805.7  token_list.incl.pl1               >ldd>incl>token_list.incl.pl1
63          15    09/14/77  1805.7  token.incl.pl1                    >ldd>incl>token.incl.pl1
64          16    11/30/78  1327.4  token_types.incl.pl1              >ldd>incl>token_types.incl.pl1
65          17    12/07/83  1801.7  symbol.incl.pl1                   >ldd>incl>symbol.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
a_format                               constant        bit(9)                   initial dcl 10-8 ref 118
allocate                 33(02)        based           bit(1)                   level 4 packed packed unaligned dcl 17-3 set ref
                                                                                  330*
attributes               31            based           structure                level 2 dcl 17-3
b_format                               constant        bit(9)                   initial dcl 10-8 ref 151
b_type                          000133 automatic       char(1)                  packed unaligned dcl 38 set ref 289* 298*
bn_format                              constant        bit(9)                   initial dcl 10-8 ref 156
by_compiler                     000045 constant        bit(3)                   initial dcl 8-5 set ref 319*
c                               000100 automatic       pointer                  dcl 38 set ref 267* 268 270 273 274 280
c_format                        000043 constant        bit(9)                   initial dcl 10-8 set ref 162 267*
char_string                            constant        bit(9)                   initial dcl 16-3 ref 314
column_format                          constant        bit(9)                   initial dcl 10-8 ref 146
comma                                  constant        bit(9)                   initial dcl 16-3 ref 234 341
compiler_developed       32(35)        based           structure                level 3 packed packed unaligned dcl 17-3
create_operator                 000016 constant        entry                    external dcl 2-152 ref 95 187 197 210 246 259 267
                                                                                  297 318
create_symbol                   000020 constant        entry                    external dcl 2-184 ref 319
create_token                    000022 constant        entry                    external dcl 2-191 ref 298
cur_block                              parameter       pointer                  dcl 30 set ref 22 84* 92* 211* 213* 230* 236* 263*
                                                                                  303* 319*
dec_integer                     000042 constant        bit(9)                   initial dcl 16-3 set ref 78 80 298*
declare_picture                 000024 constant        entry                    external dcl 2-274 ref 320
e_format                               constant        bit(9)                   initial dcl 10-8 ref 126
expr                            000102 automatic       pointer                  array dcl 38 set ref 230* 231 236* 237 247 251 253
expression_parse                000010 constant        entry                    external dcl 1-73 ref 84 213 230 236 303
f_format                               constant        bit(9)                   initial dcl 10-8 ref 122
format_list_parse               000012 constant        entry                    external dcl 1-79 ref 92 263
format_names                    000046 constant        char(6)                  initial array dcl 49 ref 107 107 107 110
format_tree                            parameter       pointer                  dcl 30 set ref 22 355*
formatcode                      000132 automatic       bit(9)                   dcl 38 set ref 118* 122* 126* 130* 134* 138* 142*
                                                                                  146* 151* 156* 162* 166* 170* 187* 197* 210* 211
                                                                                  246* 259* 297* 318*
free_node                       000026 constant        entry                    external dcl 2-345 ref 322
general                  16            based           pointer                  level 2 packed packed unaligned dcl 17-3 ref 321
hbound                                                 builtin function         dcl 45 ref 107 110
i                               000124 automatic       fixed bin(15,0)          dcl 38 set ref 282* 283 283*
identifier                             constant        bit(9)                   initial dcl 16-3 ref 104
indx                            000125 automatic       fixed bin(15,0)          dcl 38 set ref 107* 107* 110 114 120 124 128 132 136
                                                                                  140 144 149 154 160 164 168 172
initial                  11            based           pointer                  level 2 packed packed unaligned dcl 17-3 ref 283
item                            000110 automatic       pointer                  dcl 38 set ref 92* 96 98* 187* 197* 210* 211 213 215
                                                                                  246* 247 251 253 259* 263* 268 270 273 277 280*
                                                                                  282 283 283 297* 298 303 304 318* 321 330 333 336
                                                                                  338 339
k                                      parameter       fixed bin(15,0)          dcl 30 set ref 22 69 70 74* 74 78 78 80 80 83* 83
                                                                                  84* 87 90* 90 92 92* 104 107 113* 113 176 184 191
                                                                                  200 208* 208 211* 213* 218 221* 221 224 229* 229
                                                                                  230* 234 235* 235 236* 242 245* 245 263* 289 293
                                                                                  302* 302 303* 307 310* 310 314 320 326 331* 331
                                                                                  341 343* 343 347 350* 350 363 367 378*
ksaved                          000126 automatic       fixed bin(15,0)          dcl 38 set ref 69* 378
l_parn                          000044 constant        bit(9)                   initial dcl 10-8 set ref 95*
last                            000112 automatic       pointer                  dcl 38 set ref 73* 333 336 339*
lbound                                                 builtin function         dcl 45 ref 107
left_parn                              constant        bit(9)                   initial dcl 16-3 ref 70 78 92 176 191 200 224 293
line_format                            constant        bit(9)                   initial dcl 10-8 ref 142
lparen                          000114 automatic       pointer                  dcl 38 set ref 95* 96 98
n                               000127 automatic       fixed bin(15,0)          dcl 38 set ref 234* 236 237* 240* 240 246 249 253
null                                                   builtin function         dcl 45 ref 73 76 85 92 215 231 237 263 270 274 277
                                                                                  304 319 319 333 352 359 359 371 371 375 375
num_ops                         000131 automatic       fixed bin(15,0)          dcl 38 set ref 293* 295* 297* 300
number                    0(21)        based           fixed bin(14,0)          level 2 packed packed unaligned dcl 9-6 set ref 270*
                                                                                  282
op_code                   0(09)        based           bit(9)                   level 2 packed packed unaligned dcl 9-6 ref 283
operand                   1            based           pointer                  array level 2 packed packed unaligned dcl 9-6 set
                                                                                  ref 96* 211* 213* 215 247* 251* 253* 268* 270 273*
                                                                                  273 274 274 277* 283 283 283 298* 303* 304 321*
                                                                                  330 336* 338*
operator                               based           structure                level 1 dcl 9-6
p                               000116 automatic       pointer                  dcl 38 set ref 333* 352 355
page_format                            constant        bit(9)                   initial dcl 10-8 ref 138
parse_error                     000030 constant        entry                    external dcl 2-364 ref 184 326 359 363 367 371 375
pic_code                        000130 automatic       fixed bin(15,0)          dcl 38 set ref 320* 324 326*
pic_symbol                      000120 automatic       pointer                  dcl 38 set ref 319* 320* 321 322*
picture_format                         constant        bit(9)                   initial dcl 10-8 ref 166 283
picture_image                          based           structure                level 1 dcl 11-6
pl1_stat_$token_list_ptr        000032 external static pointer                  dcl 14-1 ref 14-3
r_format                               constant        bit(9)                   initial dcl 10-8 ref 170 211
reference                              based           structure                level 1 dcl 12-3
reference_parse                 000014 constant        entry                    external dcl 1-150 ref 211
right_parn                             constant        bit(9)                   initial dcl 16-3 ref 87 218 242 307 347
root                      3            based           pointer                  level 2 packed packed unaligned dcl 13-9 set ref
                                                                                  352*
rptr                            000122 automatic       pointer                  dcl 38 set ref 76* 80* 84* 85 338
size                      3            based           fixed bin(9,0)           level 2 in structure "t_table" dcl 14-11
                                                                                  in procedure "format_list_parse" ref 107 182 320
                                                                                  320
size                      3            based           fixed bin(9,0)           level 2 in structure "token" dcl 15-3 in procedure
                                                                                  "format_list_parse" ref 289
skip_format                            constant        bit(9)                   initial dcl 10-8 ref 134
st                                     parameter       pointer                  dcl 30 ref 22 352 352
statement                              based           structure                level 1 dcl 13-9
string                    4            based           char                     level 2 in structure "t_table" dcl 14-11
                                                                                  in procedure "format_list_parse" set ref 107 182
                                                                                  320*
string                    4            based           char                     level 2 in structure "token" dcl 15-3 in procedure
                                                                                  "format_list_parse" ref 289
substr                                                 builtin function         dcl 45 ref 289
symbol                    3            based           pointer                  level 2 in structure "reference" packed packed
                                                                                  unaligned dcl 12-3 in procedure
                                                                                  "format_list_parse" ref 283 330
symbol                                 based           structure                level 1 dcl 17-3 in procedure "format_list_parse"
t_table                                based           structure                level 1 dcl 14-11
token                                  based           structure                level 1 dcl 15-3
token_list                             based           pointer                  array dcl 14-2 set ref 70 78 78 80 80 87 92 104 107
                                                                                  176 182 184* 191 200 218 224 234 242 289 293 307
                                                                                  314 320 326* 341 347 363* 367*
token_list_pointer              000134 automatic       pointer                  initial dcl 14-3 set ref 70 78 78 80 80 87 92 104
                                                                                  107 176 182 184 191 200 218 224 234 242 289 293
                                                                                  307 314 320 326 341 347 363 367 14-3*
type                                   based           fixed bin(8,0)           level 2 in structure "picture_image" packed packed
                                                                                  unaligned dcl 11-6 in procedure
                                                                                  "format_list_parse" ref 283
type                      0(09)        based           bit(9)                   level 2 in structure "t_table" packed packed
                                                                                  unaligned dcl 14-11 in procedure
                                                                                  "format_list_parse" ref 70 78 78 80 87 92 104 176
                                                                                  191 200 218 224 234 242 293 307 314 341 347
x_format                               constant        bit(9)                   initial dcl 10-8 ref 130

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
abs_fun                                internal static bit(9)                   initial dcl 10-8
acos_fun                               internal static bit(9)                   initial dcl 10-8
acosd_fun                              internal static bit(9)                   initial dcl 10-8
add                                    internal static bit(9)                   initial dcl 10-8
addbitno_fun                           internal static bit(9)                   initial dcl 10-8
addcharno_fun                          internal static bit(9)                   initial dcl 10-8
addr_fun                               internal static bit(9)                   initial dcl 10-8
addr_fun_bits                          internal static bit(9)                   initial dcl 10-8
addrel_fun                             internal static bit(9)                   initial dcl 10-8
adjust_count                    000000 constant        entry                    external dcl 2-20
allocation_fun                         internal static bit(9)                   initial dcl 10-8
allot_auto                             internal static bit(9)                   initial dcl 10-8
allot_based                            internal static bit(9)                   initial dcl 10-8
allot_ctl                              internal static bit(9)                   initial dcl 10-8
allot_var                              internal static bit(9)                   initial dcl 10-8
and                                    internal static bit(9)                   initial dcl 16-3
and_bits                               internal static bit(9)                   initial dcl 10-8
arrow                                  internal static bit(9)                   initial dcl 16-3
asin_fun                               internal static bit(9)                   initial dcl 10-8
asind_fun                              internal static bit(9)                   initial dcl 10-8
assign                                 internal static bit(9)                   initial dcl 10-8
assign_by_name                         internal static bit(9)                   initial dcl 10-8
assign_round                           internal static bit(9)                   initial dcl 10-8
assign_size_ck                         internal static bit(9)                   initial dcl 10-8
assign_zero                            internal static bit(9)                   initial dcl 10-8
assignment                             internal static bit(9)                   initial dcl 16-3
asterisk                               internal static bit(9)                   initial dcl 16-3
atan_fun                               internal static bit(9)                   initial dcl 10-8
atand_fun                              internal static bit(9)                   initial dcl 10-8
attribute_parse                 000000 constant        entry                    external dcl 1-11
baseno_fun                             internal static bit(9)                   initial dcl 10-8
baseptr_fun                            internal static bit(9)                   initial dcl 10-8
bin_integer                            internal static bit(9)                   initial dcl 16-3
binary_to_octal_string          000000 constant        entry                    external dcl 2-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 2-43
bindec                          000000 constant        entry                    external dcl 2-23
bindec$vs                       000000 constant        entry                    external dcl 2-28
binoct                          000000 constant        entry                    external dcl 2-33
bit_pointer                            internal static bit(9)                   initial dcl 10-8
bit_string                             internal static bit(9)                   initial dcl 16-3
bit_to_char                            internal static bit(9)                   initial dcl 10-8
bit_to_word                            internal static bit(9)                   initial dcl 10-8
bitno_fun                              internal static bit(9)                   initial dcl 10-8
bool_fun                               internal static bit(9)                   initial dcl 10-8
bound_ck                               internal static bit(9)                   initial dcl 10-8
by_context                             internal static bit(3)                   initial dcl 8-5
by_declare                             internal static bit(3)                   initial dcl 8-5
by_explicit_context                    internal static bit(3)                   initial dcl 8-5
by_implication                         internal static bit(3)                   initial dcl 8-5
byte_fun                               internal static bit(9)                   initial dcl 10-8
cat                                    internal static bit(9)                   initial dcl 16-3
cat_string                             internal static bit(9)                   initial dcl 10-8
ceil_fun                               internal static bit(9)                   initial dcl 10-8
char_to_word                           internal static bit(9)                   initial dcl 10-8
charno_fun                             internal static bit(9)                   initial dcl 10-8
clock_fun                              internal static bit(9)                   initial dcl 10-8
close_file                             internal static bit(9)                   initial dcl 10-8
codeptr_fun                            internal static bit(9)                   initial dcl 10-8
colon                                  internal static bit(9)                   initial dcl 16-3
compare_expression              000000 constant        entry                    external dcl 2-48
complex_fun                            internal static bit(9)                   initial dcl 10-8
conjg_fun                              internal static bit(9)                   initial dcl 10-8
constant_length                 000000 constant        entry                    external dcl 2-54
context                         000000 constant        entry                    external dcl 1-17
convert                         000000 constant        entry                    external dcl 2-60
convert$from_builtin            000000 constant        entry                    external dcl 2-72
convert$to_integer              000000 constant        entry                    external dcl 2-66
convert$to_target               000000 constant        entry                    external dcl 2-88
convert$to_target_fb            000000 constant        entry                    external dcl 2-82
convert$validate                000000 constant        entry                    external dcl 2-78
copy_expression                 000000 constant        entry                    external dcl 2-94
copy_expression$copy_sons       000000 constant        entry                    external dcl 2-99
copy_string                            internal static bit(9)                   initial dcl 10-8
copy_unique_expression          000000 constant        entry                    external dcl 2-103
copy_words                             internal static bit(9)                   initial dcl 10-8
cos_fun                                internal static bit(9)                   initial dcl 10-8
cosd_fun                               internal static bit(9)                   initial dcl 10-8
create_array                    000000 constant        entry                    external dcl 2-108
create_block                    000000 constant        entry                    external dcl 2-112
create_bound                    000000 constant        entry                    external dcl 2-118
create_context                  000000 constant        entry                    external dcl 2-122
create_cross_reference          000000 constant        entry                    external dcl 2-128
create_default                  000000 constant        entry                    external dcl 2-132
create_identifier               000000 constant        entry                    external dcl 2-136
create_label                    000000 constant        entry                    external dcl 2-140
create_list                     000000 constant        entry                    external dcl 2-147
create_reference                000000 constant        entry                    external dcl 2-158
create_statement                000000 constant        entry                    external dcl 2-163
create_statement$prologue       000000 constant        entry                    external dcl 2-171
create_storage                  000000 constant        entry                    external dcl 2-179
create_token$init_hash_table    000000 constant        entry                    external dcl 2-197
create_token$protected          000000 constant        entry                    external dcl 2-199
data_list_parse                 000000 constant        entry                    external dcl 1-22
decbin                          000000 constant        entry                    external dcl 2-206
declare_constant                000000 constant        entry                    external dcl 2-211
declare_constant$bit            000000 constant        entry                    external dcl 2-219
declare_constant$char           000000 constant        entry                    external dcl 2-224
declare_constant$desc           000000 constant        entry                    external dcl 2-229
declare_constant$integer        000000 constant        entry                    external dcl 2-234
declare_descriptor              000000 constant        entry                    external dcl 2-239
declare_descriptor$ctl          000000 constant        entry                    external dcl 2-249
declare_descriptor$param        000000 constant        entry                    external dcl 2-259
declare_integer                 000000 constant        entry                    external dcl 2-269
declare_label                   000000 constant        entry                    external dcl 1-29
declare_parse                   000000 constant        entry                    external dcl 1-35
declare_parse$abort             000000 constant        entry                    external dcl 1-40
declare_picture_temp            000000 constant        entry                    external dcl 2-279
declare_pointer                 000000 constant        entry                    external dcl 2-287
declare_temporary               000000 constant        entry                    external dcl 2-292
decode_node_id                  000000 constant        entry                    external dcl 2-300
decode_source_id                000000 constant        entry                    external dcl 2-306
default_parse                   000000 constant        entry                    external dcl 1-44
delete_file                            internal static bit(9)                   initial dcl 10-8
desc_size                              internal static bit(9)                   initial dcl 10-8
descriptor_parse                000000 constant        entry                    external dcl 1-49
digit_to_bit                           internal static bit(9)                   initial dcl 10-8
div                                    internal static bit(9)                   initial dcl 10-8
do_fun                                 internal static bit(9)                   initial dcl 10-8
do_parse                        000000 constant        entry                    external dcl 1-56
do_spec                                internal static bit(9)                   initial dcl 10-8
empty_area                             internal static bit(9)                   initial dcl 10-8
enable_on                              internal static bit(9)                   initial dcl 10-8
environmentptr_fun                     internal static bit(9)                   initial dcl 10-8
eq                                     internal static bit(9)                   initial dcl 16-3
equal                                  internal static bit(9)                   initial dcl 10-8
error                           000000 constant        entry                    external dcl 2-314
error$omit_text                 000000 constant        entry                    external dcl 2-319
error_                          000000 constant        entry                    external dcl 2-324
error_$finish                   000000 constant        entry                    external dcl 2-343
error_$initialize_error         000000 constant        entry                    external dcl 2-341
error_$no_text                  000000 constant        entry                    external dcl 2-334
evaluate                        000000 constant        entry                    external dcl 1-67
ex_prologue                            internal static bit(9)                   initial dcl 10-8
exp                                    internal static bit(9)                   initial dcl 10-8
exp_fun                                internal static bit(9)                   initial dcl 10-8
expon                                  internal static bit(9)                   initial dcl 16-3
fixed_bin                              internal static bit(9)                   initial dcl 16-3
fixed_dec                              internal static bit(9)                   initial dcl 16-3
float_bin                              internal static bit(9)                   initial dcl 16-3
float_dec                              internal static bit(9)                   initial dcl 16-3
floor_fun                              internal static bit(9)                   initial dcl 10-8
fortran_read                           internal static bit(9)                   initial dcl 10-8
fortran_write                          internal static bit(9)                   initial dcl 10-8
free_based                             internal static bit(9)                   initial dcl 10-8
free_ctl                               internal static bit(9)                   initial dcl 10-8
free_var                               internal static bit(9)                   initial dcl 10-8
ftn_file_manip                         internal static bit(9)                   initial dcl 10-8
ftn_trans_loop                         internal static bit(9)                   initial dcl 10-8
ge                                     internal static bit(9)                   initial dcl 16-3
get_array_size                  000000 constant        entry                    external dcl 2-348
get_data_trans                         internal static bit(9)                   initial dcl 10-8
get_edit_trans                         internal static bit(9)                   initial dcl 10-8
get_file                               internal static bit(9)                   initial dcl 10-8
get_list_trans                         internal static bit(9)                   initial dcl 10-8
get_size                        000000 constant        entry                    external dcl 2-352
get_string                             internal static bit(9)                   initial dcl 10-8
greater_or_equal                       internal static bit(9)                   initial dcl 10-8
greater_than                           internal static bit(9)                   initial dcl 10-8
gt                                     internal static bit(9)                   initial dcl 16-3
half_to_word                           internal static bit(9)                   initial dcl 10-8
i_bin_integer                          internal static bit(9)                   initial dcl 16-3
i_dec_integer                          internal static bit(9)                   initial dcl 16-3
i_fixed_bin                            internal static bit(9)                   initial dcl 16-3
i_fixed_dec                            internal static bit(9)                   initial dcl 16-3
i_float_bin                            internal static bit(9)                   initial dcl 16-3
i_float_dec                            internal static bit(9)                   initial dcl 16-3
if_parse                        000000 constant        entry                    external dcl 1-87
imag_fun                               internal static bit(9)                   initial dcl 10-8
index_after_fun                        internal static bit(9)                   initial dcl 10-8
index_before_fun                       internal static bit(9)                   initial dcl 10-8
index_fun                              internal static bit(9)                   initial dcl 10-8
index_rev_fun                          internal static bit(9)                   initial dcl 10-8
io_statement_parse              000000 constant        entry                    external dcl 1-96
is_arith_constant                      internal static bit(9)                   initial dcl 16-47
is_arithmetic_constant                 internal static bit(9)                   initial dcl 16-47
is_constant                            internal static bit(9)                   initial dcl 16-47
is_decimal_constant                    internal static bit(9)                   initial dcl 16-47
is_delimiter                           internal static bit(9)                   initial dcl 16-47
is_float_constant                      internal static bit(9)                   initial dcl 16-47
is_identifier                          internal static bit(9)                   initial dcl 16-47
is_imaginary_constant                  internal static bit(9)                   initial dcl 16-47
is_integral_constant                   internal static bit(9)                   initial dcl 16-47
is_isub                                internal static bit(9)                   initial dcl 16-47
isub                                   internal static bit(9)                   initial dcl 16-3
join                                   internal static bit(9)                   initial dcl 10-8
jump                                   internal static bit(9)                   initial dcl 10-8
jump_false                             internal static bit(9)                   initial dcl 10-8
jump_if_eq                             internal static bit(9)                   initial dcl 10-8
jump_if_ge                             internal static bit(9)                   initial dcl 10-8
jump_if_gt                             internal static bit(9)                   initial dcl 10-8
jump_if_le                             internal static bit(9)                   initial dcl 10-8
jump_if_lt                             internal static bit(9)                   initial dcl 10-8
jump_if_ne                             internal static bit(9)                   initial dcl 10-8
jump_true                              internal static bit(9)                   initial dcl 10-8
le                                     internal static bit(9)                   initial dcl 16-3
length_fun                             internal static bit(9)                   initial dcl 10-8
less_or_equal                          internal static bit(9)                   initial dcl 10-8
less_than                              internal static bit(9)                   initial dcl 10-8
lex                             000000 constant        entry                    external dcl 1-106
lex$initialize_lex              000000 constant        entry                    external dcl 1-112
lex$write_last_line             000000 constant        entry                    external dcl 1-109
locate_file                            internal static bit(9)                   initial dcl 10-8
lock_file                              internal static bit(9)                   initial dcl 10-8
lock_fun                               internal static bit(9)                   initial dcl 10-8
log10_fun                              internal static bit(9)                   initial dcl 10-8
log2_fun                               internal static bit(9)                   initial dcl 10-8
log_fun                                internal static bit(9)                   initial dcl 10-8
loop                                   internal static bit(9)                   initial dcl 10-8
lt                                     internal static bit(9)                   initial dcl 16-3
make_desc                              internal static bit(9)                   initial dcl 10-8
max_fun                                internal static bit(9)                   initial dcl 10-8
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 9-15
merge_attributes                000000 constant        entry                    external dcl 2-355
min_fun                                internal static bit(9)                   initial dcl 10-8
minus                                  internal static bit(9)                   initial dcl 16-3
mod_bit                                internal static bit(9)                   initial dcl 10-8
mod_byte                               internal static bit(9)                   initial dcl 10-8
mod_fun                                internal static bit(9)                   initial dcl 10-8
mod_half                               internal static bit(9)                   initial dcl 10-8
mod_word                               internal static bit(9)                   initial dcl 10-8
mult                                   internal static bit(9)                   initial dcl 10-8
ne                                     internal static bit(9)                   initial dcl 16-3
negate                                 internal static bit(9)                   initial dcl 10-8
ngt                                    internal static bit(9)                   initial dcl 16-3
nlt                                    internal static bit(9)                   initial dcl 16-3
no_token                               internal static bit(9)                   initial dcl 16-3
nop                                    internal static bit(9)                   initial dcl 10-8
not                                    internal static bit(9)                   initial dcl 16-3
not_bits                               internal static bit(9)                   initial dcl 10-8
not_equal                              internal static bit(9)                   initial dcl 10-8
off_fun                                internal static bit(9)                   initial dcl 10-8
on_parse                        000000 constant        entry                    external dcl 1-116
on_parse$revert                 000000 constant        entry                    external dcl 1-123
open_file                              internal static bit(9)                   initial dcl 10-8
optimizer                       000000 constant        entry                    external dcl 2-361
or                                     internal static bit(9)                   initial dcl 16-3
or_bits                                internal static bit(9)                   initial dcl 10-8
pack                                   internal static bit(9)                   initial dcl 10-8
param_desc_ptr                         internal static bit(9)                   initial dcl 10-8
param_ptr                              internal static bit(9)                   initial dcl 10-8
parse                           000000 constant        entry                    external dcl 1-128
parse_error$no_text             000000 constant        entry                    external dcl 2-368
percent                                internal static bit(9)                   initial dcl 16-3
period                                 internal static bit(9)                   initial dcl 16-3
picture_char_type                      internal static fixed bin(8,0)           initial packed unaligned dcl 11-20
picture_complexfix_type                internal static fixed bin(8,0)           initial packed unaligned dcl 11-20
picture_complexflo_type                internal static fixed bin(8,0)           initial packed unaligned dcl 11-20
picture_realfix_type                   internal static fixed bin(8,0)           initial packed unaligned dcl 11-20
picture_realflo_type                   internal static fixed bin(8,0)           initial packed unaligned dcl 11-20
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 2-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 2-372
pl1_mod_fun                            internal static bit(9)                   initial dcl 10-8
pl1_print$for_lex               000000 constant        entry                    external dcl 2-418
pl1_print$non_varying           000000 constant        entry                    external dcl 2-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 2-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 2-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 2-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 2-414
pl1_print$varying               000000 constant        entry                    external dcl 2-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 2-395
pl1_stat_$statement_id                 external static structure                level 1 packed packed unaligned dcl 14-6
plus                                   internal static bit(9)                   initial dcl 16-3
prefix_plus                            internal static bit(9)                   initial dcl 10-8
procedure_parse                 000000 constant        entry                    external dcl 1-133
process_entry                   000000 constant        entry                    external dcl 1-143
ptr_fun                                internal static bit(9)                   initial dcl 10-8
put_control                            internal static bit(9)                   initial dcl 10-8
put_data_trans                         internal static bit(9)                   initial dcl 10-8
put_edit_trans                         internal static bit(9)                   initial dcl 10-8
put_field                              internal static bit(9)                   initial dcl 10-8
put_field_chk                          internal static bit(9)                   initial dcl 10-8
put_file                               internal static bit(9)                   initial dcl 10-8
put_list_trans                         internal static bit(9)                   initial dcl 10-8
put_string                             internal static bit(9)                   initial dcl 10-8
r_parn                                 internal static bit(9)                   initial dcl 10-8
range_ck                               internal static bit(9)                   initial dcl 10-8
rank_fun                               internal static bit(9)                   initial dcl 10-8
read_file                              internal static bit(9)                   initial dcl 10-8
real_fun                               internal static bit(9)                   initial dcl 10-8
record_io                              internal static bit(9)                   initial dcl 10-8
refer                                  internal static bit(9)                   initial dcl 10-8
refer_extent                    000000 constant        entry                    external dcl 2-426
rel_fun                                internal static bit(9)                   initial dcl 10-8
repeat_fun                             internal static bit(9)                   initial dcl 10-8
reserve$clear                   000000 constant        entry                    external dcl 2-430
reserve$declare_lib             000000 constant        entry                    external dcl 2-434
reserve$read_lib                000000 constant        entry                    external dcl 2-439
reserve$rename_parse            000000 constant        entry                    external dcl 1-156
return_bits                            internal static bit(9)                   initial dcl 10-8
return_string                          internal static bit(9)                   initial dcl 10-8
return_value                           internal static bit(9)                   initial dcl 10-8
return_words                           internal static bit(9)                   initial dcl 10-8
reverse_fun                            internal static bit(9)                   initial dcl 10-8
revert_on                              internal static bit(9)                   initial dcl 10-8
rewrite_file                           internal static bit(9)                   initial dcl 10-8
round_fun                              internal static bit(9)                   initial dcl 10-8
search_fun                             internal static bit(9)                   initial dcl 10-8
search_rev_fun                         internal static bit(9)                   initial dcl 10-8
segno_fun                              internal static bit(9)                   initial dcl 10-8
semantic_translator             000000 constant        entry                    external dcl 2-444
semantic_translator$abort       000000 constant        entry                    external dcl 2-446
semantic_translator$error       000000 constant        entry                    external dcl 2-450
semi_colon                             internal static bit(9)                   initial dcl 16-3
setbitno_fun                           internal static bit(9)                   initial dcl 10-8
setcharno_fun                          internal static bit(9)                   initial dcl 10-8
share_expression                000000 constant        entry                    external dcl 2-454
sign_fun                               internal static bit(9)                   initial dcl 10-8
signal_on                              internal static bit(9)                   initial dcl 10-8
sin_fun                                internal static bit(9)                   initial dcl 10-8
sind_fun                               internal static bit(9)                   initial dcl 10-8
slash                                  internal static bit(9)                   initial dcl 16-3
sqrt_fun                               internal static bit(9)                   initial dcl 10-8
stack_ptr                              internal static bit(9)                   initial dcl 10-8
stackbaseptr_fun                       internal static bit(9)                   initial dcl 10-8
stackframeptr_fun                      internal static bit(9)                   initial dcl 10-8
stacq_fun                              internal static bit(9)                   initial dcl 10-8
statement_parse                 000000 constant        entry                    external dcl 1-160
statement_type                  000000 constant        entry                    external dcl 1-167
std_arg_list                           internal static bit(9)                   initial dcl 10-8
std_call                               internal static bit(9)                   initial dcl 10-8
std_entry                              internal static bit(9)                   initial dcl 10-8
std_return                             internal static bit(9)                   initial dcl 10-8
stop                                   internal static bit(9)                   initial dcl 10-8
stream_prep                            internal static bit(9)                   initial dcl 10-8
sub                                    internal static bit(9)                   initial dcl 10-8
tan_fun                                internal static bit(9)                   initial dcl 10-8
tand_fun                               internal static bit(9)                   initial dcl 10-8
terminate_trans                        internal static bit(9)                   initial dcl 10-8
token_list_length                      internal static fixed bin(15,0)          initial dcl 14-4
token_to_binary                 000000 constant        entry                    external dcl 2-459
translate_fun                          internal static bit(9)                   initial dcl 10-8
trunc_fun                              internal static bit(9)                   initial dcl 10-8
unlock_file                            internal static bit(9)                   initial dcl 10-8
unpack                                 internal static bit(9)                   initial dcl 10-8
vclock_fun                             internal static bit(9)                   initial dcl 10-8
verify_fun                             internal static bit(9)                   initial dcl 10-8
verify_ltrim_fun                       internal static bit(9)                   initial dcl 10-8
verify_rev_fun                         internal static bit(9)                   initial dcl 10-8
verify_rtrim_fun                       internal static bit(9)                   initial dcl 10-8
word_to_mod2                           internal static bit(9)                   initial dcl 10-8
word_to_mod4                           internal static bit(9)                   initial dcl 10-8
word_to_mod8                           internal static bit(9)                   initial dcl 10-8
wordno_fun                             internal static bit(9)                   initial dcl 10-8
write_file                             internal static bit(9)                   initial dcl 10-8
xor_bits                               internal static bit(9)                   initial dcl 10-8

NAMES DECLARED BY EXPLICIT CONTEXT.
action                          000000 constant        label                    array(17) dcl 118 ref 114
action2                         000021 constant        label                    array(17) dcl 176 ref 120 124 128 132 136 140 144
                                                                                  149 154 160 164 168 172
end_action2                     001425 constant        label                    dcl 333 ref 99 188 198 222 257 261 287 312
err170                          001555 constant        label                    dcl 371 ref 283
err278                          001535 constant        label                    dcl 367 ref 70 85 87 92 104 200 215 218 224 231 237
                                                                                  242 263 304 307 347
err297                          001477 constant        label                    dcl 359 ref 314
err298                          001515 constant        label                    dcl 363 ref 110
err427                          001573 constant        label                    dcl 375 ref 274
format_list_parse               000133 constant        entry                    external dcl 22
merge_xr                        000536 constant        label                    dcl 208 ref 176 191
next_item                       000160 constant        label                    dcl 76 ref 344
ret0                            001610 constant        label                    dcl 378 ref 185 327 361 365 369 373

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1750        2004    1616        1760
Length      2532    1616        34         512     132           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
format_list_parse                   156 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
format_list_parse        000100 c                           format_list_parse
                         000102 expr                        format_list_parse
                         000110 item                        format_list_parse
                         000112 last                        format_list_parse
                         000114 lparen                      format_list_parse
                         000116 p                           format_list_parse
                         000120 pic_symbol                  format_list_parse
                         000122 rptr                        format_list_parse
                         000124 i                           format_list_parse
                         000125 indx                        format_list_parse
                         000126 ksaved                      format_list_parse
                         000127 n                           format_list_parse
                         000130 pic_code                    format_list_parse
                         000131 num_ops                     format_list_parse
                         000132 formatcode                  format_list_parse
                         000133 b_type                      format_list_parse
                         000134 token_list_pointer          format_list_parse

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
create_operator               create_symbol                 create_token                  declare_picture
expression_parse              format_list_parse             free_node                     parse_error
reference_parse

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pl1_stat_$token_list_ptr




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     22 000126   14    3 000140        69 000143        70 000146        73 000155        74 000157        76 000160
     78 000162        80 000177        83 000205        84 000206        85 000221        87 000225        90 000236
     92 000237        95 000273        96 000310        98 000313        99 000314       104 000315       107 000324
    108 000347       110 000351       113 000354       114 000356       118 000357       120 000361       122 000362
    124 000364       126 000365       128 000367       130 000370       132 000372       134 000373       136 000375
    138 000376       140 000400       142 000401       144 000403       146 000404       149 000406       151 000407
    154 000411       156 000412       160 000414       162 000415       164 000417       166 000420       168 000422
    170 000423       172 000425       176 000426       182 000437       184 000445       185 000461       187 000462
    188 000477       191 000500       197 000510       198 000525       200 000526       208 000536       210 000537
    211 000554       213 000600       215 000617       218 000622       221 000633       222 000634       224 000635
    229 000645       230 000646       231 000661       234 000665       235 000704       236 000705       237 000723
    239 000730       240 000732       242 000734       245 000745       246 000746       247 000764       249 000767
    251 000772       253 000774       257 001000       259 001001       261 001016       263 001017       267 001043
    268 001060       270 001063       273 001073       274 001074       277 001101       280 001103       282 001104
    283 001115       286 001134       287 001136       289 001137       293 001150       295 001161       297 001163
    298 001176       300 001222       302 001225       303 001227       304 001245       307 001250       310 001261
    312 001262       314 001263       318 001274       319 001311       320 001331       321 001363       322 001367
    324 001376       326 001400       327 001415       330 001416       331 001423       333 001425       336 001434
    338 001437       339 001441       341 001442       343 001455       344 001456       347 001457       350 001461
    352 001462       355 001472       357 001474       359 001477       361 001514       363 001515       365 001534
    367 001535       369 001554       371 001555       373 001572       375 001573       378 001610       380 001613


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
