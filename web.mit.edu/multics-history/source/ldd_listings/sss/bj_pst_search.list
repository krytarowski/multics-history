	COMPILATION LISTING OF SEGMENT bj_pst_search
	Compiled by: Multics PL/I Compiler, Release 28e, of February 14, 1985
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 04/04/85  0937.2 mst Thu
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 
        7 /* DESCRIPTION:
        8*
        9*	bj_pst_search does a linear walk through the BJ_PST looking for
       10*     a before journal with the input BJ UID.  We return a pointer to the
       11*     BJ_PST entry found, or null if the journal is not active in the DM
       12*     system.
       13**/
       14 
       15 /* HISTORY:
       16*
       17*Written by Mike Pandolf, 08/04/82.
       18*Modified:
       19*12/06/83 by L. A. Newcomb:  Renamed before_journal_manager_static_ to
       20*            bjm_data_ and moved some cells from dm_data_ to bjm_data_.
       21*06/07/84 by Lee Baldwin:  Renamed dm_error_$bj_(pst pste)_version_bad
       22*            to bj_bad_(pst pste)_version.
       23*02/14/85 by Lee A. Newcomb:  Fixed:  to use project program format, declare
       24*            all variables, to name variables to imply a usage, use
       25*            CHECK_VERSION_NUMERIC and ERROR_RETURN procs, and correctly
       26*            declare dm_error_$*'s; added a description section; removed
       27*	  %include of unused dm_bj_static.
       28*02/14/85 by Lee A. Newcomb:  Fixed declaration and calling sequence of
       29*	  bj_report_err.
       30**/
       31 
       32 /* format: style2,ll79,ind3,^indprocbody,ifthendo,ifthen,^indnoniterdo,^inddcls,dclind5,idind35,linecom */
       33 
       34 bj_pst_search:
       35    proc (p_bj_uid) returns (ptr);
       36 
       37 /* DECLARATIONS */
       38 
       39 /* Parameter */
       40 dcl  p_bj_uid			bit (36) aligned parameter;
       41 
       42 /* Automatic */
       43 dcl  (
       44      bj_pste_index			fixed bin init (0),
       45      found			bit (1) init (""b)
       46      )				automatic;
       47 
       48 /* Based */
       49 /* Builtin */
       50 dcl  (addr, null)			builtin;
       51 
       52 /* Condition */
       53 /* Constant */
       54 dcl  ME				char (13)
       55 				init ("bj_pst_search") internal
       56 				static options (constant);
       57 
       58 /* Entry */
       59 dcl  bj_report_err			entry (fixed bin (35), char (*));
       60 
       61 /* External */
       62 dcl  (
       63      (
       64      dm_error_$bj_bad_pst_version,
       65      dm_error_$bj_bad_pste_version
       66      )				fixed bin (35),
       67      bjm_data_$bj_pst_ptr		pointer
       68      )				external static;
       69 
       70 /* Static */
       71 
       72 /* END OF DECLARATIONS */
       73 
       74 FIND_BJ_PST:
       75    do;
       76       bj_pst_ptr = bjm_data_$bj_pst_ptr;
       77       call CHECK_VERSION_NUMERIC (bj_pst.version, BJ_PST_VERSION_1,
       78 	 dm_error_$bj_bad_pst_version);
       79    end FIND_BJ_PST;
       80 
       81 SEARCH_FOR_BJ_UID:
       82    do bj_pste_index = 1 to bj_pst.highest_ix_used while (^found);
       83       bj_pste_ptr = addr (bj_pst.e (bj_pste_index));
       84       if bj_pste.version ^= 0 then
       85 CHECK_IN_USE_PST_ENTRY:
       86          do;
       87          call CHECK_VERSION_NUMERIC (bj_pste.version, BJ_PSTE_VERSION_2,
       88 	    dm_error_$bj_bad_pste_version);
       89          if bj_pste.bj_uid = p_bj_uid then
       90 	  found = "1"b;
       91       end CHECK_IN_USE_PST_ENTRY;
       92    end SEARCH_FOR_BJ_UID;
       93 
       94    if ^found then
       95       bj_pste_ptr = null ();
       96 
       97    return (bj_pste_ptr);
       98 
       99 /* end bj_pst_search; */
      100 
      101 ERROR_RETURN:
      102    proc (er_p_code);
      103 
      104 dcl  er_p_code			fixed bin (35) parameter;
      105 
      106    call bj_report_err (er_p_code, ME);			/* will not return */
      107 
      108    end ERROR_RETURN;




      109 
      110 CHECK_VERSION_NUMERIC:
      111    proc (cvn_p_given_version, cvn_p_correct_version, cvn_p_error_to_use);
      112 
      113 /* The error code to use is passed since we use this to check both	*/
      114 /* the PST and PSTE structure versions.				*/
      115 
      116 dcl  (
      117      cvn_p_given_version		fixed bin,
      118      cvn_p_correct_version		fixed bin,
      119      cvn_p_error_to_use		fixed bin (35)
      120      )				parameter;
      121 
      122    if cvn_p_given_version ^= cvn_p_correct_version then
      123       call ERROR_RETURN (cvn_p_error_to_use);
      124 
      125    end CHECK_VERSION_NUMERIC;
      126 
  1     1 /*  BEGIN INCLUDE FILE:	dm_bj_pst.incl.pl1	*/
  1     2 /*
  1     3*Layout of the before journal per-system table header and BJ table entries.
  1     4*
  1     5*Written by Andre Bensoussan 06-15-1982
  1     6*Modified:
  1     7*09/29/82 by Lee A. Newcomb:  To use dm_system_data_ for determining
  1     8*	  dimension of bj_pst.e and force bj_pst.mod_list_area and
  1     9*	  bj_pst.e to even word boundaries.
  1    10*04/27/82 by M. Pandolf:  To add meter space by cutting away from mod_list_area.
  1    11**/
  1    12 /* format: style4,indattr,idind33,^indcomtxt */
  1    13 
  1    14 dcl  BJ_PST_VERSION_1	        fixed bin internal static options (constant) init (1);
  1    15 
  1    16 dcl  bj_pst_ptr		        ptr;
  1    17 
  1    18 dcl  1 bj_pst		        based (bj_pst_ptr) aligned,
  1    19        2 version		        fixed bin,
  1    20        2 pad1		        bit (36),
  1    21        2 lock,
  1    22          3 pid		        bit (36),		/* process_id holding lock */
  1    23          3 event		        bit (36),
  1    24        2 time_of_bootload	        fixed bin (71),	/* for ease of access */
  1    25        2 max_n_entries	        fixed bin,		/* as determined from dm_system_data_$bj_max_n_journals */
  1    26        2 n_entries_used	        fixed bin,		/* current # of BJs open on the system */
  1    27        2 highest_ix_used	        fixed bin,		/* max. # of BJs that has ever been open of the system */
  1    28        2 pn_table_offset	        fixed bin (18) uns,	/* relative offset of bj_pn_table in bj_pst seg. */
  1    29        2 check_in_table_offset        fixed bin (18) uns,	/* ditto for bj_check_in_table */
  1    30        2 buffer_table_offset	        fixed bin (18) uns,	/* ditto for where our BJ buffers are located */
  1    31        2 max_n_buffers	        fixed bin,		/* must be <= to max_n_entries */
  1    32        2 pad2		        bit (36),		/* force next on even word boundary */
  1    33        2 meters,					/* dim (50) fixed bin (71), */
  1    34          3 n_calls_begin_txn          fixed bin (71),	/* meter (1) */
  1    35          3 n_calls_before_image       fixed bin (71),	/* meter (2) */
  1    36          3 n_calls_abort              fixed bin (71),	/* meter (3) */
  1    37          3 n_calls_commit             fixed bin (71),	/* meter (4) */
  1    38          3 n_calls_rb_mark            fixed bin (71),	/* meter (5) */
  1    39          3 n_calls_fm_pc_mark         fixed bin (71),	/* meter (6) */
  1    40          3 n_calls_fm_rbh             fixed bin (71),	/* meter (7) */
  1    41          3 n_calls_rollback           fixed bin (71),	/* meter (8) */
  1    42          3 meter dim (9:50)           fixed bin (71),	/* meter (9) - meter (50) */
  1    43        2 mod_list_area	        (100) fixed bin (35), /* for keeping track of pst mods */
  1    44 
  1    45        2 e		        dim (dm_system_data_$bj_max_n_journals refer (bj_pst.max_n_entries))
  1    46 			        like bj_pste;	/* per system BJ table entries */
  1    47 
  1    48 
  1    49 /* END INCLUDE FILE:	dm_bj_pst.incl.pl1	*/
      127 
      128 
  2     1 /* BEGIN INCLUDE FILE:	dm_bj_pste.incl.pl1	*/
  2     2 
  2     3 /* DESCRIPTION
  2     4*
  2     5*	Layout of the per-system before journal table
  2     6*     entries.  This structure is used to contain information
  2     7*     about a before journal active in a running DMS.  It is
  2     8*     currently also used as the header of a before journal
  2     9*     (see dm_bj_header.incl.pl1).  Version changes to this
  2    10*     structure require either automatic conversion to be set
  2    11*     up, or users to be told to re-create their journals.
  2    12*
  2    13*	Currently, a bj_pste must be 64 words long;  any
  2    14*     future changes must at least make sure a bj_pste is an
  2    15*     even # of words for the alignment of some of its
  2    16*     elements.
  2    17**/
  2    18 
  2    19 /*  HISTORY:
  2    20*
  2    21*Written by Andre Bensoussan, 06/15/82.
  2    22*Modified:
  2    23*08/16/82 by Andre Bensoussan: to add stamp_for_last_ci_put.
  2    24*09/29/82 by Lee A. Newcomb: to fix BJ_PSTE_VERSION_1 and fix some
  2    25*	  alignments.
  2    26*11/01/82 by Andre Bensoussan: to add "stamp_for_last_ci_on_disk",
  2    27*	  "n_bi_still_unsafe", and "n_bi_being_saved".
  2    28*02/08/83 by M. Pandolf: to add append_state structure.
  2    29*03/19/83 by L. A. Newcomb: to fix up some alignments and spelling problems.
  2    30*04/27/83 by M. Pandolf: to add meter structure at end.
  2    31*02/11/85 by Lee A. Newcomb:  Fixed version constant name to agree with its
  2    32*            value of 2; fixed references to page files or PF's; fixed format
  2    33*            of description and history sections.
  2    34*03/07/85 by Lee A. Newcomb:  Changed a pad word to be txn_storage_limit and
  2    35*            expanded on the description for future generations (no
  2    36*            version was made).
  2    37*03/27/85 by Lee A. Newcomb:  Changed one of the unused meters to
  2    38*            n_txn_storage_limit_hits (again without a version change).
  2    39**/
  2    40 /* format: style2,ll79,ind3,^indprocbody,ifthendo,ifthen,^indnoniterdo,^inddcls,dclind5,idind35,linecom */
  2    41 
  2    42 dcl  BJ_PSTE_VERSION_2		fixed bin internal static
  2    43 				options (constant) init (2);
  2    44 
  2    45 dcl  bj_pste_ptr			ptr;
  2    46 
  2    47 /* MUST HAVE EVEN NUMBER OR WORDS */
  2    48 dcl  1 bj_pste			based (bj_pste_ptr) aligned,
  2    49        2 version			fixed bin,
  2    50        2 bj_ix			fixed bin,	/* Index of this entry in bj_pst table */
  2    51        2 lock			aligned,
  2    52          3 pid			bit (36),		/* process ID of lock owner */
  2    53          3 event			bit (36),
  2    54        2 bj_uid			bit (36),		/* UID of BJ file */
  2    55        2 ci_size			fixed bin,	/* In number of bytes */
  2    56        2 max_size			fixed bin,	/* In number of ci's */
  2    57        2 active			bit (1) aligned,	/* 0 means journal not being used */
  2    58        2 time_header_updated		fixed bin (71),
  2    59        2 earliest_meaningful_time	fixed bin (71),	/* time stamp on first valid control interval */
  2    60        2 update_frequency		fixed bin,	/* Not used yet, probably will be how many CIs */
  2    61        2 last_rec_id		bit (36),		/* rec id of the last logical record in journal */
  2    62        2 n_processes		fixed bin,	/* Number of processes using this BJ */
  2    63        2 n_txn			fixed bin,	/* Number of txn in progress using this BJ */
  2    64        2 last_ci_info		aligned,
  2    65          3 last_ci_buffered		fixed bin (24) uns, /* Last ci encached in the buffer */
  2    66          3 last_ci_put		fixed bin (24) uns, /* Last ci put in the BJ */
  2    67          3 last_ci_flushed		fixed bin (24) uns, /* Last ci for which flush initiated */
  2    68          3 last_ci_on_disk		fixed bin (24) uns, /* Last ci of that portion of the BJ known to be ... */
  2    69 						/* .. completely on disk */
  2    70          3 stamp_for_last_ci_put	fixed bin (71),	/* Time stamp associated with the last ci put in the BJ */
  2    71          3 stamp_for_last_ci_on_disk	fixed bin (71),	/* Time stamp associated with the last ci on disk in the BJ */
  2    72        2 n_bi_still_unsafe		fixed bin,	/* number of bi's still not on disk */
  2    73        2 n_bi_being_saved		fixed bin,	/* number of bi's for which flush initiated */
  2    74        2 buffer_offset		fixed bin (18) uns, /* Now allocated in the bj_pst segment */
  2    75        2 txn_storage_limit		fixed bin (35),	/* # of bytes a single txn may write */
  2    76        2 cl			aligned,		/* Circular List */
  2    77          3 origin_ci		fixed bin (24) uns,
  2    78          3 lowest_ci		fixed bin (24) uns,
  2    79          3 highest_ci		fixed bin (24) uns,
  2    80          3 number_ci		fixed bin (24) uns,
  2    81        2 append_state		aligned,
  2    82          3 current_operation		char (4),		/* equal to "appe" when append in progress */
  2    83          3 pending_n_txn		fixed bin,	/* n_txn value when append done */
  2    84          3 pending_last_rec_id	bit (36),		/* last_rec_id value after append done */
  2    85          3 pending_last_element_id	bit (36),		/* last element id after append done */
  2    86          3 txte_rec_id_relp		bit (18),		/* rel ptr into seg containing TXT for txte.pending_bj_rec_id */
  2    87        2 pad_to_even_word1		bit (36) aligned,
  2    88        2 meters			aligned,		/* dim (10) fixed bin (71), */
  2    89          3 n_bi_written		fixed bin (71),	/* meter (1) */
  2    90          3 n_bi_bytes_written		fixed bin (71),	/* meter (2) */
  2    91          3 n_journal_full		fixed bin (71),	/* meter (3) */
  2    92          3 n_successful_recycles	fixed bin (71),	/* meter (4) */
  2    93          3 n_ci_recycled		fixed bin (71),	/* meter (5) */
  2    94          3 n_txn_started		fixed bin (71),	/* meter (6) */
  2    95          3 n_non_null_txn		fixed bin (71),	/* meter (7) */
  2    96          3 n_txn_storage_limit_hits	fixed bin (71),	/* meter (8) */
  2    97          3 meter			(9:10) fixed bin (71),
  2    98 						/* meter (9) - meter (10) */
  2    99        2 pad_to_64_words		(6) bit (36);	/* 64 is even (see below) */
  2   100 
  2   101 
  2   102 /*  END INCLUDE FILE:	dm_bj_pste.incl.pl1	*/
      129 
      130 
      131 
      132    end bj_pst_search;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/04/85  0826.0  bj_pst_search.pl1                 >spec>on>7192.pbf-04/04/85>bj_pst_search.pl1
127          1    01/07/85  0857.7  dm_bj_pst.incl.pl1                >ldd>include>dm_bj_pst.incl.pl1
129          2    04/04/85  0819.1  dm_bj_pste.incl.pl1               >spec>on>7192.pbf-04/04/85>dm_bj_pste.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
BJ_PSTE_VERSION_2               000011 constant        fixed bin(17,0)          initial dcl 2-42 set ref 87*
BJ_PST_VERSION_1                000007 constant        fixed bin(17,0)          initial dcl 1-14 set ref 77*
ME                              000000 constant        char(13)                 initial unaligned dcl 54 set ref 106*
addr                                                   builtin function         dcl 50 ref 83
bj_pst                                 based           structure                level 1 dcl 1-18
bj_pst_ptr                      000102 automatic       pointer                  dcl 1-16 set ref 76* 77 81 83
bj_pste                                based           structure                level 1 dcl 2-48
bj_pste_index                   000100 automatic       fixed bin(17,0)          initial dcl 43 set ref 43* 81* 83*
bj_pste_ptr                     000104 automatic       pointer                  dcl 2-45 set ref 83* 84 87 89 94* 97
bj_report_err                   000010 constant        entry                    external dcl 59 ref 106
bj_uid                    4            based           bit(36)                  level 2 dcl 2-48 ref 89
bjm_data_$bj_pst_ptr            000016 external static pointer                  dcl 62 ref 76
cvn_p_correct_version                  parameter       fixed bin(17,0)          dcl 116 ref 110 122
cvn_p_error_to_use                     parameter       fixed bin(35,0)          dcl 116 set ref 110 122*
cvn_p_given_version                    parameter       fixed bin(17,0)          dcl 116 ref 110 122
dm_error_$bj_bad_pst_version    000012 external static fixed bin(35,0)          dcl 62 set ref 77*
dm_error_$bj_bad_pste_version   000014 external static fixed bin(35,0)          dcl 62 set ref 87*
e                       326            based           structure                array level 2 dcl 1-18 set ref 83
er_p_code                              parameter       fixed bin(35,0)          dcl 104 set ref 101 106*
found                           000101 automatic       bit(1)                   initial unaligned dcl 43 set ref 43* 81 89* 94
highest_ix_used          10            based           fixed bin(17,0)          level 2 dcl 1-18 ref 81
null                                                   builtin function         dcl 50 ref 94
p_bj_uid                               parameter       bit(36)                  dcl 40 ref 34 89
version                                based           fixed bin(17,0)          level 2 in structure "bj_pste" dcl 2-48 in procedure
                                                                                  "bj_pst_search" set ref 84 87*
version                                based           fixed bin(17,0)          level 2 in structure "bj_pst" dcl 1-18 in procedure
                                                                                  "bj_pst_search" set ref 77*

NAMES DECLARED BY EXPLICIT CONTEXT.
CHECK_IN_USE_PST_ENTRY          000067 constant        label                    dcl 84
CHECK_VERSION_NUMERIC           000143 constant        entry                    internal dcl 110 ref 77 87
ERROR_RETURN                    000123 constant        entry                    internal dcl 101 ref 122
FIND_BJ_PST                     000031 constant        label                    dcl 74
SEARCH_FOR_BJ_UID               000046 constant        label                    dcl 81
bj_pst_search                   000022 constant        entry                    external dcl 34

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       250         270     157         260
Length       476     157        20         171      70           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
bj_pst_search                       110 external procedure  is an external procedure.  
ERROR_RETURN                            internal procedure  shares stack frame of external procedure bj_pst_search.  
CHECK_VERSION_NUMERIC                   internal procedure  shares stack frame of external procedure bj_pst_search.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
bj_pst_search            000100 bj_pste_index               bj_pst_search
                         000101 found                       bj_pst_search
                         000102 bj_pst_ptr                  bj_pst_search
                         000104 bj_pste_ptr                 bj_pst_search

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   return              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
bj_report_err

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
bjm_data_$bj_pst_ptr          dm_error_$bj_bad_pst_version  dm_error_$bj_bad_pste_version




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     34 000016        43 000027        76 000031        77 000034        81 000046        83 000061        84 000065
     87 000067        89 000102        92 000111        94 000113        97 000117       101 000123       106 000125
    108 000142       110 000143       122 000145       125 000156


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
