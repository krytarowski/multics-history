	COMPILATION LISTING OF SEGMENT remote_format
	Compiled by: Multics PL/I Compiler, Release 29, of July 28, 1986
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 11/05/86  1040.0 mst Wed
	    Options: optimize map

        1 /* ******************************************************
        2*   *                                                    *
        3*   *                                                    *
        4*   * Copyright (c) 1972 by Massachusetts Institute of   *
        5*   * Technology and Honeywell Information Systems, Inc. *
        6*   *                                                    *
        7*   *                                                    *
        8*   ****************************************************** */
        9 
       10 /* procedure to return remote format variable to plio */
       11 
       12 remote_format: proc(v,sp,refp,ans) returns(fixed bin);
       13 
       14 dcl	v	fixed bin,	/* value to decode */
       15 	sp	ptr,		/* stack frame pointer */
       16 	refp	ptr,		/* based reference pointer */
       17 	ans	label;		/* answer (output) */
       18 
       19 dcl	(p,q) ptr,
       20 	(i,n,n1,n2,n3) fixed bin,
       21 	ent_var entry(ptr,label) variable;
       22 
       23 dcl	1 value		aligned based(p),
       24 	2 flag		unal bit(2),
       25 	2 type		unal bit(4),
       26 	2 (n1,n2)		unal bit(6),
       27 	2 n3		unal bit(18);
       28 
       29 dcl	1 lab		based(q),
       30 	2 p1		ptr,
       31 	2 p2		ptr;
       32 
       33 dcl	fixed_bin fixed bin based,
       34 	ptr_var ptr based,
       35 	label_var label local variable based;
       36 
       37 dcl	(addr,addrel,baseno,fixed,hbound,null,ptr,substr) builtin;
       38 
       39 dcl	1 arglist		aligned based,
       40 	2 number		bit(17) unal,
       41 	2 filler		bit(55) unal,
       42 	2 ptr(1)		ptr;
       43 
  1     1 dcl	1 frame		aligned based,
  1     2 	2 pointers(0:7)	ptr,
  1     3 	2 back		ptr,
  1     4 	2 next		ptr,
  1     5 	2 return		ptr,
  1     6 	2 entry		ptr,
  1     7 	2 operator	ptr,
  1     8 	2 argptr		ptr,
  1     9 	2 skip1(2)	fixed bin,
  1    10 	2 on_unit_info(2)	bit(18) unaligned,
  1    11 	2 translator_id	bit(18) unaligned,
  1    12 	2 operator_return	bit(18) unaligned,
  1    13 	2 display		ptr,
  1    14 	2 skip2(2)	fixed bin,
  1    15 	2 linkage		ptr;
       44 
  2     1 /* 	BEGIN INCLUDE FILE ... stack_header.incl.pl1 .. 3/72 Bill Silver  */
  2     2 /*	modified 7/76 by M. Weaver for *system links and more system use of areas */
  2     3 /*	modified 3/77 by M. Weaver to add rnt_ptr */
  2     4 /*	Modified April 1983 by C. Hornig for tasking */
  2     5 
  2     6 /****^  HISTORY COMMENTS:
  2     7*  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
  2     8*     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
  2     9*     added the heap_header_ptr definition.
  2    10*  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
  2    11*     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
  2    12*     Modified to support control point management.  These changes were actually
  2    13*     made in February 1985 by G. Palter.
  2    14*  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
  2    15*     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
  2    16*     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
  2    17*     bit pad after cur_lot_size for the cpm_enabled. This was done to save some
  2    18*     space int the stack header and change the cpd_ptr unal to cpm_data_ptr
  2    19*     (ITS pair).
  2    20*                                                   END HISTORY COMMENTS */
  2    21 
  2    22 /* format: style2 */
  2    23 
  2    24      dcl	   sb		      ptr;		/* the  main pointer to the stack header */
  2    25 
  2    26      dcl	   1 stack_header	      based (sb) aligned,
  2    27 	     2 pad1	      (4) fixed bin,	/*  (0) also used as arg list by outward_call_handler  */
  2    28 	     2 cpm_data_ptr	      ptr,		/*  (4)  pointer to control point which owns this stack */
  2    29 	     2 combined_stat_ptr  ptr,		/*  (6)  pointer to area containing separate static */
  2    30 	     2 clr_ptr	      ptr,		/*  (8)  pointer to area containing linkage sections */
  2    31 	     2 max_lot_size	      fixed bin (17) unal,	/*  (10) DU  number of words allowed in lot */
  2    32 	     2 main_proc_invoked  fixed bin (11) unal,	/*  (10) DL  nonzero if main procedure invoked in run unit */
  2    33 	     2 have_static_vlas   bit (1) unal,		/*  (10) DL  "1"b if (very) large arrays are being used in static */
  2    34 	     2 pad4	      bit (2) unal,
  2    35 	     2 run_unit_depth     fixed bin (2) unal,	/*  (10) DL  number of active run units stacked */
  2    36 	     2 cur_lot_size	      fixed bin (17) unal,	/*  (11) DU  number of words (entries) in lot */
  2    37 	     2 cpm_enabled	      bit (18) unal,	/*  (11) DL  non-zero if control point management is enabled */
  2    38 	     2 system_free_ptr    ptr,		/*  (12)  pointer to system storage area */
  2    39 	     2 user_free_ptr      ptr,		/*  (14)  pointer to user storage area */
  2    40 	     2 null_ptr	      ptr,		/*  (16)  */
  2    41 	     2 stack_begin_ptr    ptr,		/*  (18)  pointer to first stack frame on the stack */
  2    42 	     2 stack_end_ptr      ptr,		/*  (20)  pointer to next useable stack frame */
  2    43 	     2 lot_ptr	      ptr,		/*  (22)  pointer to the lot for the current ring */
  2    44 	     2 signal_ptr	      ptr,		/*  (24)  pointer to signal procedure for current ring */
  2    45 	     2 bar_mode_sp	      ptr,		/*  (26)  value of sp before entering bar mode */
  2    46 	     2 pl1_operators_ptr  ptr,		/*  (28)  pointer to pl1_operators_$operator_table */
  2    47 	     2 call_op_ptr	      ptr,		/*  (30)  pointer to standard call operator */
  2    48 	     2 push_op_ptr	      ptr,		/*  (32)  pointer to standard push operator */
  2    49 	     2 return_op_ptr      ptr,		/*  (34)  pointer to standard return operator */
  2    50 	     2 return_no_pop_op_ptr
  2    51 			      ptr,		/*  (36)  pointer to standard return / no pop operator */
  2    52 	     2 entry_op_ptr	      ptr,		/*  (38)  pointer to standard entry operator */
  2    53 	     2 trans_op_tv_ptr    ptr,		/*  (40)  pointer to translator operator ptrs */
  2    54 	     2 isot_ptr	      ptr,		/*  (42)  pointer to ISOT */
  2    55 	     2 sct_ptr	      ptr,		/*  (44)  pointer to System Condition Table */
  2    56 	     2 unwinder_ptr	      ptr,		/*  (46)  pointer to unwinder for current ring */
  2    57 	     2 sys_link_info_ptr  ptr,		/*  (48)  pointer to *system link name table */
  2    58 	     2 rnt_ptr	      ptr,		/*  (50)  pointer to Reference Name Table */
  2    59 	     2 ect_ptr	      ptr,		/*  (52)  pointer to event channel table */
  2    60 	     2 assign_linkage_ptr ptr,		/*  (54)  pointer to storage for (obsolete) hcs_$assign_linkage */
  2    61 	     2 heap_header_ptr     ptr,		/*  (56)  pointer to the heap header for this ring */
  2    62 	     2 trace,
  2    63 	       3 frames,
  2    64 	         4 count	      fixed bin,		/*  (58)  number of trace frames */
  2    65 	         4 top_ptr	      ptr unal,		/*  (59)  pointer to last trace frame */
  2    66 	       3 in_trace	      bit (36) aligned,	/*  (60)  trace antirecursion flag */
  2    67 	     2 pad2	      bit (36),		/*  (61) */
  2    68                2 pad5	      pointer;		/*  (62)  pointer to future stuff */
  2    69 
  2    70 /*	The following offset refers to a table within the  pl1  operator table.  */
  2    71 
  2    72      dcl	   tv_offset	      fixed bin init (361) internal static;
  2    73 						/* (551) octal */
  2    74 
  2    75 
  2    76 /*	The following constants are offsets within this transfer vector table.  */
  2    77 
  2    78      dcl	   (
  2    79 	   call_offset	      fixed bin init (271),
  2    80 	   push_offset	      fixed bin init (272),
  2    81 	   return_offset	      fixed bin init (273),
  2    82 	   return_no_pop_offset   fixed bin init (274),
  2    83 	   entry_offset	      fixed bin init (275)
  2    84 	   )		      internal static;
  2    85 
  2    86 
  2    87 
  2    88 
  2    89 
  2    90 /*	The following declaration  is an overlay of the whole stack header.   Procedures which
  2    91*	move the whole stack header should use this overlay.
  2    92**/
  2    93 
  2    94      dcl	   stack_header_overlay   (size (stack_header)) fixed bin based (sb);
  2    95 
  2    96 
  2    97 
  2    98 /* 	END INCLUDE FILE ... stack_header.incl.pl1 */
       45 
  3     1 /* BEGIN INCLUDE FILE --  lot.incl.pl1   S.Webber 9/74, Modified by R. Bratt 04/76, modified by M. Weaver 7/76 */
  3     2 /* modified by M. Weaver 3/77 */
  3     3 
  3     4 dcl  lotp ptr;
  3     5 
  3     6 dcl 1 lot based (lotp) aligned,
  3     7     2 lp (0:9999) ptr unaligned;			/* array of packed pointers to linkage sections */
  3     8 
  3     9 dcl lot_fault bit (36) aligned static options (constant) init ("111000000000000000000000000000000000"b);
  3    10 						/* lot fault has fault code = 0 and offset = 0 */
  3    11 
  3    12 dcl  isotp ptr;
  3    13 dcl 1 isot based (isotp) aligned,
  3    14     2 isp (0:9999) ptr unaligned;
  3    15 
  3    16 dcl 1 isot1 (0 :9999) aligned based,
  3    17     2 flags unaligned,
  3    18       3 fault bit (2) unaligned,
  3    19       3 system bit (1) unaligned,
  3    20       3 mbz bit (6) unaligned,
  3    21     2 fault_code fixed bin (8) unaligned,
  3    22     2 static_offset bit (18) unaligned;
  3    23 
  3    24 
  3    25 /* END INCLUDE FILE  lot.incl.pl1 */
       46 
       47 
       48 	p = addr(v);
       49 
       50 	if flag = "00"b
       51 	then do;
       52 	     q = addr(ans);
       53 	     p1 = addrel(p,value.n3);
       54 	     p2 = sp;
       55 ok:	     return(0);
       56 	     end;
       57 
       58 	n = fixed(type,4);
       59 	if n > hbound(sw,1) then goto sw(3);
       60 
       61 	n1 = fixed(value.n1,6);
       62 	n2 = fixed(value.n2,6);
       63 	n3 = fixed(value.n3,18);
       64 
       65 	/* get ptr to proper stack frame if needed */
       66 
       67 	if substr("10001000011"b,n+1,1)
       68 	then do;
       69 
       70 	     q = sp;
       71 	     do i = 1 to n1;
       72 		q = q -> frame.display;
       73 		end;
       74 
       75 	     end;
       76 
       77 	goto sw(n);
       78 
       79 	/* automatic variable */
       80 
       81 sw(0):	q = addrel(q,n3);
       82 
       83 set:	ans = q -> label_var;
       84 	goto ok;
       85 
       86 	/* internal static variable */
       87 
       88 sw(1):	call get_static_ptr;
       89 	goto sw(0);
       90 
       91 	/* external static variable */
       92 
       93 sw(2):	q = addrel(addrel(sp -> frame.linkage,n3) -> ptr_var,n1);
       94 	goto set;
       95 
       96 	/* illegal case */
       97 
       98 sw(3):	return(1);
       99 
      100 	/* based on automatic pointer */
      101 
      102 sw(4):	q = addrel(addrel(q,n3) -> ptr_var,n2);
      103 	goto set;
      104 
      105 	/* based on internal static pointer */
      106 
      107 sw(5):	call get_static_ptr;
      108 	goto sw(4);
      109 
      110 	/* based on external static pointer */
      111 
      112 sw(6):	q = addrel(addrel(addrel(sp -> frame.linkage,n3) -> ptr_var,
      113 	 n1) -> ptr_var,n2);
      114 	goto set;
      115 
      116 	/* based on reference pointer */
      117 
      118 sw(7):	q = addrel(refp,n2);
      119 	goto set;
      120 
      121 	/* value given by procedure */
      122 
      123 sw(8):	q = addr(ent_var);
      124 	p1 = ptr(sp -> frame.entry,n3);
      125 	p2 = sp;
      126 	call ent_var(refp,ans);
      127 	goto ok;
      128 
      129 	/* value given by (9) or based on (10) the nth arg of procedure */
      130 
      131 sw(9):
      132 sw(10):	q = q -> frame.argptr;
      133 
      134 	if n2 > fixed(q -> arglist.number,17) then goto sw(3);
      135 
      136 	q = q -> arglist.ptr(n2);
      137 
      138 	if n = 9 then q = addrel(q,n3);
      139 	else q = addrel(q -> ptr_var,n3);
      140 	goto set;
      141 
      142 
      143 get_static_ptr:	proc;
      144 
      145 	     sb = ptr(addr(sb),0);
      146 	     q = sb -> stack_header.isot_ptr -> isot.isp(fixed(baseno(sp -> frame.entry),18));
      147 
      148 	     end;
      149 
      150 	end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/04/86  1034.0  remote_format.pl1                 >special_ldd>install>MR12.0-1206>remote_format.pl1
44           1    05/06/74  1752.6  stu_frame.incl.pl1                >ldd>include>stu_frame.incl.pl1
45           2    11/04/86  1324.3  stack_header.incl.pl1             >special_ldd>install>MR12.0-1206>stack_header.incl.pl1
46           3    08/05/77  1022.4  lot.incl.pl1                      >ldd>include>lot.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
addr                                                   builtin function         dcl 37 ref 48 52 123 145
addrel                                                 builtin function         dcl 37 ref 53 81 93 93 102 102 112 112 112 118 138
                                                                                  139
ans                                    parameter       label variable           dcl 14 set ref 12 52 83* 126*
arglist                                based           structure                level 1 dcl 39
argptr                   32            based           pointer                  level 2 dcl 1-1 ref 131
baseno                                                 builtin function         dcl 37 ref 146
display                  40            based           pointer                  level 2 dcl 1-1 ref 72
ent_var                         000112 automatic       entry variable           dcl 19 set ref 123 126
entry                    26            based           pointer                  level 2 dcl 1-1 ref 124 146
fixed                                                  builtin function         dcl 37 ref 58 61 62 63 134 146
flag                                   based           bit(2)                   level 2 packed unaligned dcl 23 ref 50
frame                                  based           structure                level 1 dcl 1-1
hbound                                                 builtin function         dcl 37 ref 59
i                               000104 automatic       fixed bin(17,0)          dcl 19 set ref 71*
isot                                   based           structure                level 1 dcl 3-13
isot_ptr                 52            based           pointer                  level 2 dcl 2-26 ref 146
isp                                    based           pointer                  array level 2 packed unaligned dcl 3-13 ref 146
lab                                    based           structure                level 1 unaligned dcl 29
label_var                              based           label variable           local dcl 33 ref 83
linkage                  44            based           pointer                  level 2 dcl 1-1 ref 93 112
n                               000105 automatic       fixed bin(17,0)          dcl 19 set ref 58* 59 67 77 138
n1                        0(06)        based           bit(6)                   level 2 in structure "value" packed unaligned dcl 23
                                                                                  in procedure "remote_format" ref 61
n1                              000106 automatic       fixed bin(17,0)          dcl 19 in procedure "remote_format" set ref 61* 71
                                                                                  93 112
n2                              000107 automatic       fixed bin(17,0)          dcl 19 in procedure "remote_format" set ref 62* 102
                                                                                  112 118 134 136
n2                        0(12)        based           bit(6)                   level 2 in structure "value" packed unaligned dcl 23
                                                                                  in procedure "remote_format" ref 62
n3                              000110 automatic       fixed bin(17,0)          dcl 19 in procedure "remote_format" set ref 63* 81
                                                                                  93 102 112 124 138 139
n3                        0(18)        based           bit(18)                  level 2 in structure "value" packed unaligned dcl 23
                                                                                  in procedure "remote_format" ref 53 63
number                                 based           bit(17)                  level 2 packed unaligned dcl 39 ref 134
p                               000100 automatic       pointer                  dcl 19 set ref 48* 50 53 53 58 61 62 63
p1                                     based           pointer                  level 2 dcl 29 set ref 53* 124*
p2                        2            based           pointer                  level 2 dcl 29 set ref 54* 125*
ptr                                                    builtin function         dcl 37 in procedure "remote_format" ref 124 145
ptr                       2            based           pointer                  array level 2 in structure "arglist" dcl 39
                                                                                  in procedure "remote_format" ref 136
ptr_var                                based           pointer                  dcl 33 ref 93 102 112 112 139
q                               000102 automatic       pointer                  dcl 19 set ref 52* 53 54 70* 72* 72 81* 81 83 93*
                                                                                  102* 102 112* 118* 123* 124 125 131* 131 134 136*
                                                                                  136 138* 138 139* 139 146*
refp                                   parameter       pointer                  dcl 14 set ref 12 118 126*
sb                              000116 automatic       pointer                  dcl 2-24 set ref 145* 145 146
sp                                     parameter       pointer                  dcl 14 ref 12 54 70 93 112 124 125 146
stack_header                           based           structure                level 1 dcl 2-26
substr                                                 builtin function         dcl 37 ref 67
type                      0(02)        based           bit(4)                   level 2 packed unaligned dcl 23 ref 58
v                                      parameter       fixed bin(17,0)          dcl 14 set ref 12 48
value                                  based           structure                level 1 dcl 23

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
call_offset                            internal static fixed bin(17,0)          initial dcl 2-78
entry_offset                           internal static fixed bin(17,0)          initial dcl 2-78
fixed_bin                              based           fixed bin(17,0)          dcl 33
isot1                                  based           structure                array level 1 dcl 3-16
isotp                                  automatic       pointer                  dcl 3-12
lot                                    based           structure                level 1 dcl 3-6
lot_fault                              internal static bit(36)                  initial dcl 3-9
lotp                                   automatic       pointer                  dcl 3-4
null                                                   builtin function         dcl 37
push_offset                            internal static fixed bin(17,0)          initial dcl 2-78
return_no_pop_offset                   internal static fixed bin(17,0)          initial dcl 2-78
return_offset                          internal static fixed bin(17,0)          initial dcl 2-78
stack_header_overlay                   based           fixed bin(17,0)          array dcl 2-94
tv_offset                              internal static fixed bin(17,0)          initial dcl 2-72

NAMES DECLARED BY EXPLICIT CONTEXT.
get_static_ptr                  000274 constant        entry                    internal dcl 143 ref 88 107
ok                              000050 constant        label                    dcl 55 ref 84 127
remote_format                   000023 constant        entry                    external dcl 12
set                             000130 constant        label                    dcl 83 ref 94 103 114 119 140
sw                              000000 constant        label                    array(0:10) dcl 81 ref 59 59 77 89 108 134

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       340         350     312         350
Length       566     312        10         202      25           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
remote_format                        97 external procedure  is an external procedure.  
get_static_ptr                          internal procedure  shares stack frame of external procedure remote_format.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
remote_format            000100 p                           remote_format
                         000102 q                           remote_format
                         000104 i                           remote_format
                         000105 n                           remote_format
                         000106 n1                          remote_format
                         000107 n2                          remote_format
                         000110 n3                          remote_format
                         000112 ent_var                     remote_format
                         000116 sb                          remote_format

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ent_var        return_mac          ext_entry

NO EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     12 000016        48 000030        50 000033        52 000036        53 000040        54 000045        55 000050
     58 000053        59 000057        61 000061        62 000065        63 000071        67 000074        70 000102
     71 000105        72 000115        73 000120        77 000122        81 000124        83 000130        84 000137
     88 000140        89 000141        93 000142        94 000154        98 000155       102 000161       103 000170
    107 000171       108 000172       112 000173       114 000210       118 000211       119 000217       123 000220
    124 000222       125 000231       126 000234       127 000244       131 000245       134 000250       136 000254
    138 000260       139 000267       140 000273       143 000274       145 000275       146 000300       148 000310


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
