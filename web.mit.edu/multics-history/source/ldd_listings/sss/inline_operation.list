	COMPILATION LISTING OF SEGMENT inline_operation
	Compiled by: Multics PL/I Compiler, Release 28d, of September 14, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 10/03/83  1644.3 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 /* This procedure decides if an operation can be done inline
       12*   or if it requires the generation of a call
       13*
       14*   Initial Version: 25 October 1972 by BLW	*/
       15 
       16 inline_operation: proc(node_pt,ref,atom) returns(bit(1) aligned);
       17 
       18 dcl	node_pt ptr,		/* points at operator node */
       19 	ref(3) ptr,		/* ptrs to reference nodes for operands */
       20 	atom(3) bit(1) aligned;	/* "1"b if operand(i) atomic */
       21 
       22 dcl	(null,string) builtin,
       23 	complex_operand(3) bit(1) unaligned;
       24 
       25 dcl	compile_exp$save entry(ptr) returns(ptr);
       26 
  1     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
  1     2 
  1     3 dcl	1 reference		based aligned,
  1     4 	2 node_type		bit(9) unaligned,
  1     5 	2 array_ref		bit(1) unaligned,
  1     6 	2 varying_ref		bit(1) unaligned,
  1     7 	2 shared			bit(1) unaligned,
  1     8 	2 put_data_sw		bit(1) unaligned,
  1     9 	2 processed		bit(1) unaligned,
  1    10 	2 units			fixed(3) unaligned,
  1    11 	2 ref_count		fixed(17) unaligned,
  1    12 	2 c_offset		fixed(24),
  1    13 	2 c_length		fixed(24),
  1    14 	2 symbol			ptr unaligned,
  1    15 	2 qualifier		ptr unaligned,
  1    16 	2 offset			ptr unaligned,
  1    17 	2 length			ptr unaligned,
  1    18 	2 subscript_list		ptr unaligned,
  1    19 						/* these fields are used by the 645 code generator */
  1    20 	2 address			structure unaligned,
  1    21 	  3 base			bit(3),
  1    22 	  3 offset		bit(15),
  1    23 	  3 op			bit(9),
  1    24 	  3 no_address		bit(1),
  1    25 	  3 inhibit		bit(1),
  1    26 	  3 ext_base		bit(1),
  1    27 	  3 tag			bit(6),
  1    28 	2 info			structure unaligned,
  1    29 	  3 address_in		structure,
  1    30 	    4 b			dimension(0:7) bit(1),
  1    31 	    4 storage		bit(1),
  1    32 	  3 value_in		structure,
  1    33 	    4 a			bit(1),
  1    34 	    4 q			bit(1),
  1    35 	    4 aq			bit(1),
  1    36 	    4 string_aq		bit(1),
  1    37 	    4 complex_aq		bit(1),
  1    38 	    4 decimal_aq		bit(1),
  1    39 	    4 b			dimension(0:7) bit(1),
  1    40 	    4 storage		bit(1),
  1    41 	    4 indicators		bit(1),
  1    42 	    4 x			dimension(0:7) bit(1),
  1    43 	  3 other			structure,
  1    44 	    4 big_offset		bit(1),
  1    45 	    4 big_length		bit(1),
  1    46 	    4 modword_in_offset	bit(1),
  1    47 	2 data_type		fixed(5) unaligned,
  1    48 	2 bits			structure unaligned,
  1    49 	  3 padded_ref		bit(1),
  1    50 	  3 aligned_ref		bit(1),
  1    51 	  3 long_ref		bit(1),
  1    52 	  3 forward_ref		bit(1),
  1    53 	  3 ic_ref		bit(1),
  1    54 	  3 temp_ref		bit(1),
  1    55 	  3 defined_ref		bit(1),
  1    56 	  3 evaluated		bit(1),
  1    57 	  3 allocate		bit(1),
  1    58 	  3 allocated		bit(1),
  1    59 	  3 aliasable		bit(1),
  1    60 	  3 even			bit(1),
  1    61 	  3 perm_address		bit(1),
  1    62 	  3 aggregate		bit(1),
  1    63 	  3 hit_zero		bit(1),
  1    64 	  3 dont_save		bit(1),
  1    65 	  3 fo_in_qual		bit(1),
  1    66 	  3 hard_to_load		bit(1),
  1    67 	2 relocation		bit(12) unaligned,
  1    68 	2 more_bits		structure unaligned,
  1    69 	  3 substr		bit(1),
  1    70 	  3 padded_for_store_ref	bit(1),
  1    71 	  3 aligned_for_store_ref	bit(1),
  1    72 	  3 mbz			bit(15),
  1    73 	2 store_ins		bit(18) unaligned;
  1    74 
  1    75 /* END INCLUDE FILE ... reference.incl.pl1 */
       27 
  2     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
  2     2 
  2     3 dcl	1 symbol			based aligned,
  2     4 	2 node_type		bit(9) unal,
  2     5 	2 source_id		structure unal,
  2     6 	  3 file_number		bit(8),
  2     7 	  3 line_number		bit(14),
  2     8 	  3 statement_number	bit(5),
  2     9 	2 location		fixed(18) unal unsigned,
  2    10 	2 allocated		bit(1) unal,
  2    11 	2 dcl_type		bit(3) unal,
  2    12 	2 reserved		bit(6) unal,
  2    13 	2 pix			unal,
  2    14 	  3 pic_fixed		bit(1) unal,
  2    15 	  3 pic_float		bit(1) unal,
  2    16 	  3 pic_char		bit(1) unal,
  2    17 	  3 pic_scale		fixed(7) unal,
  2    18 	  3 pic_size		fixed(7) unal,
  2    19 	2 level			fixed(8) unal,
  2    20 	2 boundary		fixed(3) unal,
  2    21 	2 size_units		fixed(3) unal,
  2    22 	2 scale			fixed(7) unal,
  2    23 	2 runtime			bit(18) unal,
  2    24 	2 runtime_offset		bit(18) unal,
  2    25 	2 block_node		ptr unal,
  2    26 	2 token			ptr unal,
  2    27 	2 next			ptr unal,
  2    28 	2 multi_use		ptr unal,
  2    29 	2 cross_references		ptr unal,
  2    30 	2 initial			ptr unal,
  2    31 	2 array			ptr unal,
  2    32 	2 descriptor		ptr unal,
  2    33 	2 equivalence		ptr unal,
  2    34 	2 reference		ptr unal,
  2    35 	2 general			ptr unal,
  2    36 	2 father			ptr unal,
  2    37 	2 brother			ptr unal,
  2    38 	2 son			ptr unal,
  2    39 	2 word_size		ptr unal,
  2    40 	2 bit_size		ptr unal,
  2    41 	2 dcl_size		ptr unal,
  2    42 	2 symtab_size		ptr unal,
  2    43 	2 c_word_size		fixed(24),
  2    44 	2 c_bit_size		fixed(24),
  2    45 	2 c_dcl_size		fixed(24),
  2    46 
  2    47 	2 attributes		structure aligned,
  2    48 	  3 data_type		structure unal,
  2    49 	    4 structure		bit(1) ,
  2    50 	    4 fixed		bit(1),
  2    51 	    4 float		bit(1),
  2    52 	    4 bit			bit(1),
  2    53 	    4 char		bit(1),
  2    54 	    4 ptr			bit(1),
  2    55 	    4 offset		bit(1),
  2    56 	    4 area		bit(1),
  2    57 	    4 label		bit(1),
  2    58 	    4 entry		bit(1),
  2    59 	    4 file		bit(1),
  2    60 	    4 arg_descriptor	bit(1),
  2    61 	    4 storage_block		bit(1),
  2    62 	    4 explicit_packed	bit(1), /* options(packed) */
  2    63 	    4 condition		bit(1),
  2    64 	    4 format		bit(1),
  2    65 	    4 builtin		bit(1),
  2    66 	    4 generic		bit(1),
  2    67 	    4 picture		bit(1),
  2    68 
  2    69 	  3 misc_attributes		structure unal,
  2    70 	    4 dimensioned		bit(1),
  2    71 	    4 initialed		bit(1),
  2    72 	    4 aligned		bit(1),
  2    73 	    4 unaligned		bit(1),
  2    74 	    4 signed		bit(1),
  2    75 	    4 unsigned		bit(1),
  2    76 	    4 precision		bit(1),
  2    77 	    4 varying		bit(1),
  2    78 	    4 local		bit(1),
  2    79 	    4 decimal		bit(1),
  2    80 	    4 binary		bit(1),
  2    81 	    4 real		bit(1),
  2    82 	    4 complex		bit(1),
  2    83 	    4 variable		bit(1),
  2    84 	    4 reducible		bit(1),
  2    85 	    4 irreducible		bit(1),
  2    86 	    4 returns		bit(1),
  2    87 	    4 position		bit(1),
  2    88 	    4 internal		bit(1),
  2    89 	    4 external		bit(1),
  2    90 	    4 like		bit(1),
  2    91 	    4 member		bit(1),
  2    92 	    4 non_varying		bit(1),
  2    93 	    4 options		bit(1),
  2    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
  2    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
  2    96 
  2    97 	  3 storage_class		structure unal,
  2    98 	    4 auto		bit(1),
  2    99 	    4 based		bit(1),
  2   100 	    4 static		bit(1),
  2   101 	    4 controlled		bit(1),
  2   102 	    4 defined		bit(1),
  2   103 	    4 parameter		bit(1),
  2   104 	    4 param_desc		bit(1),
  2   105 	    4 constant		bit(1),
  2   106 	    4 temporary		bit(1),
  2   107 	    4 return_value		bit(1),
  2   108 
  2   109 	  3 file_attributes		structure unal,
  2   110 	    4 print		bit(1),
  2   111 	    4 input		bit(1),
  2   112 	    4 output		bit(1),
  2   113 	    4 update		bit(1),
  2   114 	    4 stream		bit(1),
  2   115 	    4 reserved_1		bit(1),
  2   116 	    4 record		bit(1),
  2   117 	    4 sequential		bit(1),
  2   118 	    4 direct		bit(1),
  2   119 	    4 interactive		bit(1),		/* env(interactive) */
  2   120 	    4 reserved_2		bit(1),
  2   121 	    4 reserved_3		bit(1),
  2   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
  2   123 	    4 keyed		bit(1),
  2   124 	    4 reserved_4		bit(1),
  2   125 	    4 environment		bit(1),
  2   126 
  2   127 	  3 compiler_developed	structure unal,
  2   128 	    4 aliasable		bit(1),
  2   129 	    4 packed		bit(1),
  2   130 	    4 passed_as_arg		bit(1),
  2   131 	    4 allocate		bit(1),
  2   132 	    4 set			bit(1),
  2   133 	    4 exp_extents		bit(1),
  2   134 	    4 refer_extents		bit(1),
  2   135 	    4 star_extents		bit(1),
  2   136 	    4 isub		bit(1),
  2   137 	    4 put_in_symtab		bit(1),
  2   138 	    4 contiguous		bit(1),
  2   139 	    4 put_data		bit(1),
  2   140 	    4 overlayed		bit(1),
  2   141 	    4 error		bit(1),
  2   142 	    4 symtab_processed	bit(1),
  2   143 	    4 overlayed_by_builtin	bit(1),
  2   144 	    4 defaulted		bit(1),
  2   145 	    4 connected		bit(1);
  2   146 
  2   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
       28 
  3     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
  3     2 
  3     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
  3     4 
  3     5 /* format: style3 */
  3     6 dcl	1 operator	based aligned,
  3     7 	  2 node_type	bit (9) unaligned,
  3     8 	  2 op_code	bit (9) unaligned,
  3     9 	  2 shared	bit (1) unaligned,
  3    10 	  2 processed	bit (1) unaligned,
  3    11 	  2 optimized	bit (1) unaligned,
  3    12 	  2 number	fixed (14) unaligned,
  3    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
  3    14 
  3    15 dcl	max_number_of_operands
  3    16 			fixed bin (15) int static options (constant) initial (32767);
  3    17 
  3    18 /* END INCLUDE FILE ... operator.incl.pl1 */
       29 
  4     1 dcl (	real_fix_bin_1		init(1),
  4     2 	real_fix_bin_2		init(2),
  4     3 	real_flt_bin_1		init(3),
  4     4 	real_flt_bin_2		init(4),
  4     5 	complex_fix_bin_1		init(5),
  4     6 	complex_fix_bin_2		init(6),
  4     7 	complex_flt_bin_1		init(7),
  4     8 	complex_flt_bin_2		init(8),
  4     9 	real_fix_dec		init(9),
  4    10 	real_flt_dec		init(10),
  4    11 	complex_fix_dec		init(11),
  4    12 	complex_flt_dec		init(12),
  4    13 	char_string		init(13),
  4    14 	bit_string		init(14),
  4    15 	label_constant		init(15),
  4    16 	local_label_variable	init(16),
  4    17 	label_variable		init(17),
  4    18 	entry_variable		init(18),
  4    19 	ext_entry_in		init(19),
  4    20 	ext_entry_out		init(20),
  4    21 	int_entry			init(21),
  4    22 	int_entry_other		init(22),
  4    23 	unpacked_ptr		init(23),
  4    24 	packed_ptr		init(24)) fixed bin(15) int static options(constant);
       30 
  5     1 /* BEGIN INCLUDE FILE ... op_codes.incl.pl1 */
  5     2 
  5     3 /* Modified: 25 Apr 1979 by PCK 4-bit decimal */
  5     4 /* Modified: 6 Jun 1979 by PG to add rank and byte */
  5     5 /* Modified: 26 Dec 1979 by PCK to add assign_by_name */
  5     6 /* Modified: 26 July 82 BIM wordno, segno */
  5     7 
  5     8 dcl (	add		initial("000010001"b),	/* opnd(1) <- opnd(2)+opnd(3)		*/
  5     9 	sub		initial("000010010"b),	/* opnd(1) <- opnd(2)-opnd(3)		*/
  5    10 	mult		initial("000010011"b),	/* opnd(1) <- opnd(2)*opnd(3)		*/
  5    11 	div		initial("000010100"b),	/* opnd(1) <- opnd(2)/opnd(3)		*/
  5    12 	negate		initial("000010101"b),	/* opnd(1) <- -opnd(2)  		*/
  5    13 	exp		initial("000010110"b),	/* opnd(1) <- opnd(2) ** opnd(3)	*/
  5    14 
  5    15 	and_bits		initial("000100001"b),	/* opnd(1) <- opnd(2) & opnd(3)	*/
  5    16 	or_bits		initial("000100010"b),	/* opnd(1) <- opnd(2)|opnd(3)		*/
  5    17 	xor_bits		initial("000100011"b),	/* opnd(1) <- opnd(2) xor opnd(3)	*/
  5    18 	not_bits		initial("000100100"b),	/* opnd(1) <- ^opnd(2)		*/
  5    19 	cat_string	initial("000100101"b),	/* opnd(1) <- opnd(2)||opnd(3)	*/
  5    20 	bool_fun		initial("000100110"b),	/* opnd(1) <- bool(opnd(2),opnd(3),opnd(4)) */
  5    21 
  5    22 	assign		initial("000110001"b),	/* opnd(1) <- opnd(2)		*/
  5    23 	assign_size_ck	initial("000110010"b),	/* opnd(1) <- opnd(2)		*/
  5    24 	assign_zero	initial("000110011"b),	/* opnd(1) <- 0			*/
  5    25 	copy_words	initial("000110100"b),	/* move opnd(2) to opnd(1) by opnd(3) words */
  5    26 	copy_string	initial("000110101"b),	/* move opnd(2) to opnd(1) by opnd(3) units */
  5    27 	make_desc		initial("000110110"b),	/* opnd(1) <- descriptor(opnd(2),opnd(3)) */
  5    28 	assign_round	initial("000110111"b),	/* opnd(1) <- opnd(2) rounded		*/
  5    29 	pack		initial("000111000"b),	/* opnd(1) <- encode to picture opnd(2) */
  5    30 	unpack		initial("000111001"b),	/* opnd(1) <- decode from picture opnd(2) */
  5    31 
  5    32 	less_than		initial("001000100"b),	/* opnd(1) <- opnd(2) < opnd(3)	*/
  5    33 	greater_than	initial("001000101"b),	/* opnd(1) <- opnd(2) > opnd(3)	*/
  5    34 	equal		initial("001000110"b),	/* opnd(1) <- opnd(2) = opnd(3)	*/
  5    35 	not_equal		initial("001000111"b),	/* opnd(1) <- opnd(2) ^= opnd(3)	*/
  5    36 	less_or_equal	initial("001001000"b),	/* opnd(1) <- opnd(2) <= opnd(3)	*/
  5    37 	greater_or_equal	initial("001001001"b),	/* opnd(1) <- opnd(2) >= opnd(3)	*/
  5    38 
  5    39 	jump		initial("001010001"b),	/* go to opnd(1) unconditionally	*/
  5    40 	jump_true		initial("001010010"b),	/* go to opnd(1) if opnd(2) is not 0	*/
  5    41 	jump_false	initial("001010011"b),	/* go to opnd(1) if opnd(2) is all 0	*/
  5    42 	jump_if_lt	initial("001010100"b),	/* go to opnd(1) if opnd(2) < opnd(3)	*/
  5    43 	jump_if_gt	initial("001010101"b),	/* go to opnd(1) if opnd(2) > opnd(3)	*/
  5    44 	jump_if_eq	initial("001010110"b),	/* go to opnd(1) if opnd(2) = opnd(3)	*/
  5    45 	jump_if_ne	initial("001010111"b),	/* go to opnd(1) if opnd(2) ^= opnd(3)	*/
  5    46 	jump_if_le	initial("001011000"b),	/* go to opnd(1) if opnd(2) <= opnd(3)	*/
  5    47 	jump_if_ge	initial("001011001"b),	/* go to opnd(1) if opnd(2) >= opnd(3)	*/
  5    48 
  5    49 	std_arg_list	initial("001100001"b),	/* opnd(1) <- arglist(opnd(2) desclist(opnd(3)))	*/
  5    50 	return_words	initial("001100010"b),	/* return aggregate opnd(1), opnd(2) is length in words */
  5    51 	std_call		initial("001100011"b),	/* opnd(1) <- call opnd(2) with opnd(3)		*/
  5    52 	return_bits	initial("001100100"b),	/* return aggregate opnd(1), opnd(2) is length in bits */
  5    53 	std_entry		initial("001100101"b),	/* entry(opnd(1)... opnd(n))			*/
  5    54 	return_string	initial("001100110"b),	/* return string opnd(1) */
  5    55 	ex_prologue	initial("001100111"b),	/* execute the prologue -no operands-		*/
  5    56 	allot_auto	initial("001101000"b),	/* opnd(1) <- addrel(stack,opnd(2))		*/
  5    57 	param_ptr		initial("001101001"b),	/* opnd(1) <- ptr to opnd(2) in  block opnd(3)	*/
  5    58 	param_desc_ptr	initial("001101010"b),	/* opnd(1) <- ptr to opnd(2) in block opnd(3)	*/
  5    59 	std_return	initial("001101011"b),	/* return -no arguments-			*/
  5    60 	allot_ctl		initial("001101100"b),	/* allocate opnd(1) , length in words is opnd(2) 	*/
  5    61 	free_ctl		initial("001101101"b),	/* free opnd(1)				*/
  5    62 	stop		initial("001101110"b),	/* stop - terminate run unit			*/
  5    63 
  5    64 	mod_bit		initial("001110000"b),	/* opnd(1) <- mod(opnd(3),36),
  5    65*						   opnd(2) <- opnd(3) / 36		*/
  5    66 	mod_byte		initial("001110001"b),	/* opnd(1) <- mod(opnd(3),4),
  5    67*						   opnd(2) <- opnd(3) / 4		*/
  5    68 	mod_half		initial("001110010"b),	/* opnd(1) <- mod(opnd(3),2),
  5    69*						   opnd(2) <- opnd(3) / 2		*/
  5    70 	mod_word		initial("001110011"b),	/* TO BE DEFINED BY BLW			*/
  5    71 
  5    72 	bit_to_char	initial("010000000"b),	/* opnd(1) <- (opnd(2)+8)/9		*/
  5    73 	bit_to_word	initial("010000001"b),	/* opnd(1) <- (opnd(2)+35)/36		*/
  5    74 	char_to_word	initial("010000010"b),	/* opnd(1) <- (opnd(2)+3)/4		*/
  5    75 	half_to_word	initial("010000011"b),	/* opnd(1) <- (opnd(2)+1)/2		*/
  5    76 	word_to_mod2	initial("010000100"b),	/* opnd(1) <- (opnd(2)+1)/2*2		*/
  5    77 	word_to_mod4	initial("010000101"b),	/* opnd(1) <- (opnd(2)+3)/4*4		*/
  5    78 	word_to_mod8	initial("010000110"b),	/* opnd(1) <- (opnd(2)+7)/8*8		*/
  5    79 	rel_fun		initial("010000111"b),	/* opnd(1) <- rel(opnd(2))		*/
  5    80 	baseno_fun	initial("010001000"b),	/* opnd(1) <- baseno(opnd(2))		*/
  5    81 	desc_size		initial("010001001"b),	/* opnd(1) <- substr(opnd(2),13,24)	*/
  5    82 	bit_pointer	initial("010001010"b),	/* opnd(1) <- bit offset of opnd(2)	*/
  5    83 	index_before_fun	initial("010001011"b),	/* opnd(1) <- length of before(opnd(2),opnd(3)) */
  5    84 	index_after_fun	initial("010001100"b),	/* opnd(1) <- offset of after(opnd(2),opnd(3)) in opnd(2) */
  5    85 	verify_ltrim_fun	initial("010001101"b),	/* opnd(1) <- offset of ltrim(opnd(2),opnd(3)) in opnd(2) */
  5    86 	verify_rtrim_fun	initial("010001110"b),	/* opnd(1) <- length(opnd(2))-length(rtrim(opnd(2),opnd(3))) */
  5    87 	digit_to_bit	initial("010001111"b),	/* opnd(1) <- 9*opnd(2)/2		*/
  5    88 
  5    89 	ceil_fun		initial("010010000"b),	/* opnd(1) <- ceil(opnd(2))		*/
  5    90 	floor_fun		initial("010010001"b),	/* opnd(1) <- floor(opnd(2))		*/
  5    91 	round_fun		initial("010010010"b),	/* opnd(1) <- round(opnd(2))		*/
  5    92 	sign_fun		initial("010010011"b),	/* opnd(1) <- sign(opnd(2))		*/
  5    93 	abs_fun		initial("010010100"b),	/* opnd(1) <- abs(opnd(2))		*/
  5    94 	trunc_fun		initial("010010101"b),	/* opnd(1) <- trunc(opnd(2))		*/
  5    95 	byte_fun		initial("010010110"b),	/* opnd(1) <- byte(opnd(2))		*/
  5    96 	rank_fun		initial("010010111"b),	/* opnd(1) <- rank(opnd(2))		*/
  5    97 	index_rev_fun	initial("010011000"b),	/* opnd(1) <- index(reverse(opnd(2)),reverse(opnd(3))) */
  5    98 	search_rev_fun	initial("010011001"b),	/* opnd(1) <- search(reverse(opnd(2)),opnd(3)) */
  5    99 	verify_rev_fun	initial("010011010"b),	/* opnd(1) <- verify(reverse(opnd(2)),opnd(3)) */
  5   100 	wordno_fun	initial("010011011"b),        /* opnd(1) <- wordno (opnd(2)) */
  5   101 	segno_fun		initial("010011100"b),        /* opnd(1) <- segno (opnd(2)) */
  5   102 	bitno_fun           initial("010011101"b),        /* opnd(1) <- bitno (opnd(2)) */
  5   103 	charno_fun	initial("010011110"b),        /* opnd(1) <- charno (opnd(2)) */
  5   104 
  5   105 	index_fun		initial("010100000"b),	/* opnd(1) <- index(opnd(2),opnd(3))	*/
  5   106 	off_fun		initial("010100001"b),	/* opnd(1) <- offset(opnd(2),opnd(3))	*/
  5   107 	complex_fun	initial("010100010"b),	/* opnd(1) <- complex(opnd(2),opnd(3))	*/
  5   108 	conjg_fun		initial("010100011"b),	/* opnd(1) <- conjg(opnd(2),opnd(3))	*/
  5   109 	mod_fun		initial("010100100"b),	/* opnd(1) <- mod(opnd(2),opnd(3))	*/
  5   110 	repeat_fun	initial("010100101"b),	/* opnd(1) <- repeat(opnd(2),opnd(3))	*/
  5   111 	verify_fun	initial("010100110"b),	/* opnd(1) <- verify(opnd(2),opnd(3))	*/
  5   112 	translate_fun	initial("010100111"b),	/* opnd(1) <- translate(opnd(2),opnd(3))*/
  5   113 	real_fun   	initial("010101001"b),	/* opnd(1) <- real(opnd(2))		*/
  5   114 	imag_fun   	initial("010101010"b),	/* opnd(1) <- imag(opnd(2))		*/
  5   115 	length_fun	initial("010101011"b),	/* opnd(1) <- length(opnd(2))	*/
  5   116 	pl1_mod_fun	initial("010101100"b),	/* opnd(1) <- mod(opnd(2)) */
  5   117 	search_fun	initial("010101101"b),	/* opnd(1) <- search(opnd(2),opnd(3)) */
  5   118 	allocation_fun	initial("010101110"b),	/* opnd(1) <- allocation(opnd(2)) */
  5   119 	reverse_fun	initial("010101111"b),	/* opnd(1) <- reverse(opnd(2)) */
  5   120 
  5   121 	addr_fun		initial("010110000"b),	/* opnd(1) <- addr(opnd(2))		*/
  5   122 	addr_fun_bits	initial("010110001"b),	/* opnd(1) <- addr(opnd(2))		*/
  5   123 	ptr_fun		initial("010110010"b),	/* opnd(1) <- ptr(opnd(2),opnd(3))	*/
  5   124 	baseptr_fun	initial("010110011"b),	/* opnd(1) <- baseptr(opnd(2))	*/
  5   125 	addrel_fun	initial("010110100"b),	/* opnd(1) <- addrel(opnd(2),opnd(3))	*/
  5   126 	codeptr_fun	initial("010110101"b),	/* opnd(1) <- codeptr(opnd(2))	*/
  5   127 	environmentptr_fun	initial("010110110"b),	/* opnd(1) <- environmentptr(opnd(2))	*/
  5   128 	stackbaseptr_fun	initial("010110111"b),	/* opnd(1) is ptr to base of current stack	*/
  5   129 	stackframeptr_fun	initial("010111000"b),	/* opnd(1) is ptr to current block's stack frame	*/
  5   130 	setcharno_fun	initial("010111001"b),	/* opnd(1) <- opnd(2) with charno opnd(3) */
  5   131 	addcharno_fun	initial("010111010"b),	/* opnd(1) <- opnd(2) with charno = charno + opnd(3) */
  5   132 	setbitno_fun	initial("010111011"b),	/* setcharno for bitsno */
  5   133 	addbitno_fun	initial("010111100"b),	/* addcharno for bitno */
  5   134 
  5   135 	min_fun		initial("011000000"b),	/* opnd(1) <- min(opnd(1),opnd(2),...)	*/
  5   136 	max_fun		initial("011000001"b),	/* opnd(1) <- max(opnd(1),opnd(2),...)	*/
  5   137 
  5   138 	stack_ptr		initial("011010001"b),	/* opnd(1) <- stack frame ptr		*/
  5   139 	empty_area	initial("011010010"b),	/* empty opnd(1), length in words is opnd(2) */
  5   140 	enable_on		initial("011010100"b),	/* opnd(1) is the cond name
  5   141*						   opnd(2) is the file name
  5   142*						   opnd(3) is the block	*/
  5   143 	revert_on		initial("011010101"b),	/* opnd(1) is the cond name,
  5   144*						   opnd(2) is the file name	*/
  5   145 	signal_on		initial("011010110"b),	/* opnd(1) is the cond name
  5   146*						   opnd(2) is the file name */
  5   147 
  5   148 	lock_fun		initial("011010111"b),	/* opnd(1) <- stac(opnd(2),opnd(3))	*/
  5   149 	stacq_fun		initial("011011000"b),	/* opnd(1) is result, opnd(2) is ptr to lock word,
  5   150*						   opnd(3) is old value, (4) is new value. */
  5   151 	clock_fun		initial("011011001"b),	/* opnd(1) is the clock time		*/
  5   152 	vclock_fun	initial("011011010"b),	/* opnd(1) is the virtual clock time	*/
  5   153 
  5   154 	bound_ck		initial("011100000"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
  5   155 	range_ck		initial("011100001"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
  5   156 	loop		initial("011100010"b),	/* do opnd(1) for opnd(2) from opnd(3) to opnd(4) by 1,
  5   157*						   opnd(5) is the list */
  5   158 	join		initial("011100011"b),	/* do opnd(1), opnd(2) ... opnd(n)	*/
  5   159 	allot_based	initial("011100100"b),	/* allocate opnd(2) words in opnd(3), set opnd(1) */
  5   160 	free_based	initial("011100101"b),	/* free opnd(1) in opnd(3), length is opnd(2) words */
  5   161 
  5   162 	r_parn		initial("011110001"b),	/* format op code			*/
  5   163 	l_parn		initial("011110010"b),
  5   164 	r_format		initial("011110011"b),
  5   165 	c_format		initial("011110100"b),
  5   166 	f_format		initial("011110101"b),
  5   167 	e_format		initial("011110110"b),
  5   168 	b_format		initial("011110111"b),
  5   169 	a_format		initial("011111000"b),
  5   170 	x_format		initial("011111001"b),
  5   171 	skip_format	initial("011111010"b),
  5   172 	column_format	initial("011111011"b),
  5   173 	page_format	initial("011111100"b),
  5   174 	line_format	initial("011111101"b),
  5   175 	picture_format	initial("011111110"b),
  5   176 	bn_format		initial("011111111"b),	/* bit format, length(opnd(2)), radix factor(opnd(3)) */
  5   177 
  5   178 	get_list_trans	initial("100000000"b),	/* getlist(opnd(2) with desc(opnd(1)))	*/
  5   179 	get_edit_trans	initial("100000001"b),	/* getedit(opnd(2) with desc(opnd(1)))	*/
  5   180 	get_data_trans	initial("100000010"b),	/* getdata(opnd(1) to opnd(n))	*/
  5   181 	put_list_trans	initial("100000011"b),	/* putlist(opnd(2) with desc(opnd(1)))	*/
  5   182 	put_edit_trans	initial("100000100"b),	/* putedit(opnd(2) with desc(opnd(1)))	*/
  5   183 	put_data_trans	initial("100000101"b),	/* putdata(opnd(2)) with subscript-list opnd(1) */
  5   184 	terminate_trans	initial("100000110"b),	/* terminate stream transmission	*/
  5   185 	stream_prep	initial("100000111"b),	/* initiate stream transmission	*/
  5   186 	record_io		initial("100001000"b),	/* perform record io operation	*/
  5   187 	fortran_read	initial("100001001"b),	/* A complete read statement		*/
  5   188 	fortran_write	initial("100001010"b),	/* A complete write statement		*/
  5   189 	ftn_file_manip	initial("100001011"b),	/* endfile,backspace,rewind,etc.	*/
  5   190 	ftn_trans_loop	initial("100001100"b),	/* An implied do in i/o list		*/
  5   191 	put_control	initial("100001101"b),	/* put control opnd(1) opnd(2) times	*/
  5   192 	put_field		initial("100001110"b),	/* putlist(opnd(2)) of length(opnd(1))	*/
  5   193 	put_field_chk	initial("100001111"b),	/* putlist(op(2)) of len(op(1)) check char index(op(3)) */
  5   194 
  5   195 /* These operators are produced by the parse but are not used as input to the code generator.	*/
  5   196 /* They are processed by the semantic translator.						*/
  5   197 
  5   198 	return_value	initial("100010010"b),	/* return(opnd(1))			*/
  5   199 	allot_var		initial("100010011"b),	/* allot opnd(1) in opnd(2)		*/
  5   200 	free_var		initial("100010100"b),	/* free opnd(1) out of opnd(2)	*/
  5   201 	get_file		initial("100010101"b),	/* opnd(1) is filename,opnd(2) is copy	*/
  5   202 						/* opnd(3) is skip, opnd(4) is list	*/
  5   203 	get_string	initial("100010110"b),	/* opnd(1) is string,opnd(2) is list	*/
  5   204 	put_file		initial("100010111"b),	/* opnd(1) is filename,opnd(2) is page	*/
  5   205 						/* opnd(3) is skip,opnd(4) is line	*/
  5   206 	put_string	initial("100011000"b),	/* opnd(1) is string,opnd(2) is list	*/
  5   207 	open_file		initial("100011001"b),
  5   208 	close_file	initial("100011010"b),
  5   209 	read_file		initial("100011011"b),
  5   210 	write_file	initial("100011100"b),
  5   211 	locate_file	initial("100011101"b),
  5   212 	do_fun		initial("100011110"b),	/* opnd(1) is join of a list		*/
  5   213 						/* opnd(2) is control variable ref	*/
  5   214 						/* opnd(3) is specification operator	*/
  5   215 	do_spec		initial("100011111"b),	/* opnd(1) to opnd(2) by opnd(3) 	*/
  5   216 						/* repeat opnd(4) while opnd(5)	*/
  5   217 						/* opnd(6) is next specification	*/
  5   218 
  5   219 	rewrite_file	initial("100100000"b),
  5   220 	delete_file	initial("100100001"b),
  5   221 	unlock_file	initial("100100010"b),
  5   222 	lock_file		initial("100100011"b),
  5   223 	refer		initial("100100101"b),	/* opnd(1) refer(opnd(2))		*/
  5   224 	prefix_plus	initial("100100110"b),	/* opnd(1) <- +opnd(2)		*/
  5   225 	nop		initial("100100111"b),	/* no-op */
  5   226 	assign_by_name	initial("100101000"b),	/* opnd(1) <- opnd(2),by name		*/
  5   227 
  5   228 /* These operators are produced by the semantic translator in processing the math
  5   229*   builtin functions and are used as input to the code generator			*/
  5   230 
  5   231 	sqrt_fun		initial("100110000"b),	/* opnd(1) <- sqrt(opnd(2))	*/
  5   232 	sin_fun		initial("100110001"b),	/* opnd(1) <- sin(opnd(2))	*/
  5   233 	sind_fun		initial("100110010"b),	/* opnd(1) <- sind(opnd(2))	*/
  5   234 	cos_fun		initial("100110011"b),	/* opnd(1) <- cos(opnd(2))	*/
  5   235 	cosd_fun		initial("100110100"b),	/* opnd(1) <- cosd(opnd(2))	*/
  5   236 	tan_fun		initial("100110101"b),	/* opnd(1) <- tan(opnd(2))	*/
  5   237 	tand_fun		initial("100110110"b),	/* opnd(1) <- tand(opnd(2))	*/
  5   238 	asin_fun		initial("100110111"b),	/* opnd(1) <- asin(opnd(2))	*/
  5   239 	asind_fun		initial("100111000"b),	/* opnd(1) <- asind(opnd(2))	*/
  5   240 	acos_fun		initial("100111001"b),	/* opnd(1) <- acos(opnd(2))	*/
  5   241 	acosd_fun		initial("100111010"b),	/* opnd(1) <- acosd(opnd(2))	*/
  5   242 	atan_fun		initial("100111011"b),	/* opnd(1) <- atan(opnd(2)[,opnd(3)])	*/
  5   243 	atand_fun		initial("100111100"b),	/* opnd(1) <- atand(opnd(2)[,opnd(3)])	*/
  5   244 	log2_fun		initial("100111101"b),	/* opnd(1) <- log2(opnd(2))	*/
  5   245 	log_fun		initial("100111110"b),	/* opnd(1) <- log(opnd(2))	*/
  5   246 	log10_fun		initial("100111111"b),	/* opnd(1) <- log10(opnd(2))	*/
  5   247 
  5   248 	exp_fun		initial("101000000"b))	/* opnd(1) <- exp(opnd(2))	*/
  5   249 
  5   250 			bit(9) aligned internal static options(constant);
  5   251 
  5   252 /* END INCLUDE FILE ... op_codes.incl.pl1 */
       31 
       32 
       33 	string(complex_operand) = "0"b;
       34 
       35 	if ref(1) ^= null then call test(1);
       36 
       37 	call test(2);
       38 
       39 	if node_pt -> operator.number = 3 then call test(3);
       40 
       41 	if string(complex_operand)
       42 	then do;
       43 
       44 	     if node_pt -> operator.op_code = abs_fun then goto no;
       45 
       46 	     if ^ complex_operand(2)
       47 	     then if ref(2) -> reference.data_type ^= real_flt_bin_1
       48 		then goto no;
       49 
       50 	     if node_pt -> operator.number = 3
       51 	     then if ^ complex_operand(3)
       52 		then if ref(3) -> reference.data_type ^= real_flt_bin_1
       53 		     then goto no;
       54 	     end;
       55 
       56 yes:	return("1"b);
       57 
       58 no:	return("0"b);
       59 
       60 test:	     proc(k);
       61 
       62 dcl	     k fixed bin,
       63 	     (p,s) ptr;
       64 
       65 	     p = ref(k);
       66 	     s = p -> reference.symbol;
       67 
       68 	     if s -> symbol.decimal then goto no;
       69 
       70 	     if s -> symbol.complex
       71 	     then do;
       72 		if p -> reference.data_type ^= complex_flt_bin_1 then goto no;
       73 		complex_operand(k) = "1"b;
       74 		if k > 1
       75 		then if ^ atom(k)
       76 		then if ^ p -> reference.aligned_ref
       77 		then do;
       78 		     ref(k) = compile_exp$save((node_pt -> operand(k)));
       79 		     atom(k) = "1"b;
       80 		     end;
       81 		end;
       82 
       83 	     end;
       84 
       85 	end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/03/83  1008.5  inline_operation.pl1              >spec>on>pl128d>inline_operation.pl1
27           1    07/21/80  1546.3  reference.incl.pl1                >ldd>include>reference.incl.pl1
28           2    10/02/83  0828.4  symbol.incl.pl1                   >spec>on>pl128d>symbol.incl.pl1
29           3    07/21/80  1546.3  operator.incl.pl1                 >ldd>include>operator.incl.pl1
30           4    05/03/76  1320.4  data_types.incl.pl1               >ldd>include>data_types.incl.pl1
31           5    04/07/83  1635.0  op_codes.incl.pl1                 >ldd>include>op_codes.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
abs_fun                                constant        bit(9)                   initial dcl 5-8 ref 44
aligned_ref              12(07)        based           bit(1)                   level 3 packed unaligned dcl 1-3 ref 74
atom                                   parameter       bit(1)                   array dcl 18 set ref 16 74 79*
attributes               31            based           structure                level 2 dcl 2-3
bits                     12(06)        based           structure                level 2 packed unaligned dcl 1-3
compile_exp$save                000010 constant        entry                    external dcl 25 ref 78
complex                  31(31)        based           bit(1)                   level 4 packed unaligned dcl 2-3 ref 70
complex_flt_bin_1                      constant        fixed bin(15,0)          initial dcl 4-1 ref 72
complex_operand                 000100 automatic       bit(1)                   array unaligned dcl 22 set ref 33* 41 46 50 73*
data_type                12            based           fixed bin(5,0)           level 2 packed unaligned dcl 1-3 ref 46 50 72
decimal                  31(28)        based           bit(1)                   level 4 packed unaligned dcl 2-3 ref 68
k                                      parameter       fixed bin(17,0)          dcl 62 ref 60 65 73 74 74 78 78 79
misc_attributes          31(19)        based           structure                level 3 packed unaligned dcl 2-3
node_pt                                parameter       pointer                  dcl 18 ref 16 39 44 50 78
null                                                   builtin function         dcl 22 ref 35
number                    0(21)        based           fixed bin(14,0)          level 2 packed unaligned dcl 3-6 ref 39 50
op_code                   0(09)        based           bit(9)                   level 2 packed unaligned dcl 3-6 ref 44
operand                   1            based           pointer                  array level 2 packed unaligned dcl 3-6 ref 78
operator                               based           structure                level 1 dcl 3-6
p                               000110 automatic       pointer                  dcl 62 set ref 65* 66 72 74
real_flt_bin_1                         constant        fixed bin(15,0)          initial dcl 4-1 ref 46 50
ref                                    parameter       pointer                  array dcl 18 set ref 16 35 46 50 65 78*
reference                              based           structure                level 1 dcl 1-3
s                               000112 automatic       pointer                  dcl 62 set ref 66* 68 70
string                                                 builtin function         dcl 22 set ref 33* 41
symbol                                 based           structure                level 1 dcl 2-3 in procedure "inline_operation"
symbol                    3            based           pointer                  level 2 in structure "reference" packed unaligned
                                                                                  dcl 1-3 in procedure "inline_operation" ref 66

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
a_format                               internal static bit(9)                   initial dcl 5-8
acos_fun                               internal static bit(9)                   initial dcl 5-8
acosd_fun                              internal static bit(9)                   initial dcl 5-8
add                                    internal static bit(9)                   initial dcl 5-8
addbitno_fun                           internal static bit(9)                   initial dcl 5-8
addcharno_fun                          internal static bit(9)                   initial dcl 5-8
addr_fun                               internal static bit(9)                   initial dcl 5-8
addr_fun_bits                          internal static bit(9)                   initial dcl 5-8
addrel_fun                             internal static bit(9)                   initial dcl 5-8
allocation_fun                         internal static bit(9)                   initial dcl 5-8
allot_auto                             internal static bit(9)                   initial dcl 5-8
allot_based                            internal static bit(9)                   initial dcl 5-8
allot_ctl                              internal static bit(9)                   initial dcl 5-8
allot_var                              internal static bit(9)                   initial dcl 5-8
and_bits                               internal static bit(9)                   initial dcl 5-8
asin_fun                               internal static bit(9)                   initial dcl 5-8
asind_fun                              internal static bit(9)                   initial dcl 5-8
assign                                 internal static bit(9)                   initial dcl 5-8
assign_by_name                         internal static bit(9)                   initial dcl 5-8
assign_round                           internal static bit(9)                   initial dcl 5-8
assign_size_ck                         internal static bit(9)                   initial dcl 5-8
assign_zero                            internal static bit(9)                   initial dcl 5-8
atan_fun                               internal static bit(9)                   initial dcl 5-8
atand_fun                              internal static bit(9)                   initial dcl 5-8
b_format                               internal static bit(9)                   initial dcl 5-8
baseno_fun                             internal static bit(9)                   initial dcl 5-8
baseptr_fun                            internal static bit(9)                   initial dcl 5-8
bit_pointer                            internal static bit(9)                   initial dcl 5-8
bit_string                             internal static fixed bin(15,0)          initial dcl 4-1
bit_to_char                            internal static bit(9)                   initial dcl 5-8
bit_to_word                            internal static bit(9)                   initial dcl 5-8
bitno_fun                              internal static bit(9)                   initial dcl 5-8
bn_format                              internal static bit(9)                   initial dcl 5-8
bool_fun                               internal static bit(9)                   initial dcl 5-8
bound_ck                               internal static bit(9)                   initial dcl 5-8
byte_fun                               internal static bit(9)                   initial dcl 5-8
c_format                               internal static bit(9)                   initial dcl 5-8
cat_string                             internal static bit(9)                   initial dcl 5-8
ceil_fun                               internal static bit(9)                   initial dcl 5-8
char_string                            internal static fixed bin(15,0)          initial dcl 4-1
char_to_word                           internal static bit(9)                   initial dcl 5-8
charno_fun                             internal static bit(9)                   initial dcl 5-8
clock_fun                              internal static bit(9)                   initial dcl 5-8
close_file                             internal static bit(9)                   initial dcl 5-8
codeptr_fun                            internal static bit(9)                   initial dcl 5-8
column_format                          internal static bit(9)                   initial dcl 5-8
complex_fix_bin_1                      internal static fixed bin(15,0)          initial dcl 4-1
complex_fix_bin_2                      internal static fixed bin(15,0)          initial dcl 4-1
complex_fix_dec                        internal static fixed bin(15,0)          initial dcl 4-1
complex_flt_bin_2                      internal static fixed bin(15,0)          initial dcl 4-1
complex_flt_dec                        internal static fixed bin(15,0)          initial dcl 4-1
complex_fun                            internal static bit(9)                   initial dcl 5-8
conjg_fun                              internal static bit(9)                   initial dcl 5-8
copy_string                            internal static bit(9)                   initial dcl 5-8
copy_words                             internal static bit(9)                   initial dcl 5-8
cos_fun                                internal static bit(9)                   initial dcl 5-8
cosd_fun                               internal static bit(9)                   initial dcl 5-8
delete_file                            internal static bit(9)                   initial dcl 5-8
desc_size                              internal static bit(9)                   initial dcl 5-8
digit_to_bit                           internal static bit(9)                   initial dcl 5-8
div                                    internal static bit(9)                   initial dcl 5-8
do_fun                                 internal static bit(9)                   initial dcl 5-8
do_spec                                internal static bit(9)                   initial dcl 5-8
e_format                               internal static bit(9)                   initial dcl 5-8
empty_area                             internal static bit(9)                   initial dcl 5-8
enable_on                              internal static bit(9)                   initial dcl 5-8
entry_variable                         internal static fixed bin(15,0)          initial dcl 4-1
environmentptr_fun                     internal static bit(9)                   initial dcl 5-8
equal                                  internal static bit(9)                   initial dcl 5-8
ex_prologue                            internal static bit(9)                   initial dcl 5-8
exp                                    internal static bit(9)                   initial dcl 5-8
exp_fun                                internal static bit(9)                   initial dcl 5-8
ext_entry_in                           internal static fixed bin(15,0)          initial dcl 4-1
ext_entry_out                          internal static fixed bin(15,0)          initial dcl 4-1
f_format                               internal static bit(9)                   initial dcl 5-8
floor_fun                              internal static bit(9)                   initial dcl 5-8
fortran_read                           internal static bit(9)                   initial dcl 5-8
fortran_write                          internal static bit(9)                   initial dcl 5-8
free_based                             internal static bit(9)                   initial dcl 5-8
free_ctl                               internal static bit(9)                   initial dcl 5-8
free_var                               internal static bit(9)                   initial dcl 5-8
ftn_file_manip                         internal static bit(9)                   initial dcl 5-8
ftn_trans_loop                         internal static bit(9)                   initial dcl 5-8
get_data_trans                         internal static bit(9)                   initial dcl 5-8
get_edit_trans                         internal static bit(9)                   initial dcl 5-8
get_file                               internal static bit(9)                   initial dcl 5-8
get_list_trans                         internal static bit(9)                   initial dcl 5-8
get_string                             internal static bit(9)                   initial dcl 5-8
greater_or_equal                       internal static bit(9)                   initial dcl 5-8
greater_than                           internal static bit(9)                   initial dcl 5-8
half_to_word                           internal static bit(9)                   initial dcl 5-8
imag_fun                               internal static bit(9)                   initial dcl 5-8
index_after_fun                        internal static bit(9)                   initial dcl 5-8
index_before_fun                       internal static bit(9)                   initial dcl 5-8
index_fun                              internal static bit(9)                   initial dcl 5-8
index_rev_fun                          internal static bit(9)                   initial dcl 5-8
int_entry                              internal static fixed bin(15,0)          initial dcl 4-1
int_entry_other                        internal static fixed bin(15,0)          initial dcl 4-1
join                                   internal static bit(9)                   initial dcl 5-8
jump                                   internal static bit(9)                   initial dcl 5-8
jump_false                             internal static bit(9)                   initial dcl 5-8
jump_if_eq                             internal static bit(9)                   initial dcl 5-8
jump_if_ge                             internal static bit(9)                   initial dcl 5-8
jump_if_gt                             internal static bit(9)                   initial dcl 5-8
jump_if_le                             internal static bit(9)                   initial dcl 5-8
jump_if_lt                             internal static bit(9)                   initial dcl 5-8
jump_if_ne                             internal static bit(9)                   initial dcl 5-8
jump_true                              internal static bit(9)                   initial dcl 5-8
l_parn                                 internal static bit(9)                   initial dcl 5-8
label_constant                         internal static fixed bin(15,0)          initial dcl 4-1
label_variable                         internal static fixed bin(15,0)          initial dcl 4-1
length_fun                             internal static bit(9)                   initial dcl 5-8
less_or_equal                          internal static bit(9)                   initial dcl 5-8
less_than                              internal static bit(9)                   initial dcl 5-8
line_format                            internal static bit(9)                   initial dcl 5-8
local_label_variable                   internal static fixed bin(15,0)          initial dcl 4-1
locate_file                            internal static bit(9)                   initial dcl 5-8
lock_file                              internal static bit(9)                   initial dcl 5-8
lock_fun                               internal static bit(9)                   initial dcl 5-8
log10_fun                              internal static bit(9)                   initial dcl 5-8
log2_fun                               internal static bit(9)                   initial dcl 5-8
log_fun                                internal static bit(9)                   initial dcl 5-8
loop                                   internal static bit(9)                   initial dcl 5-8
make_desc                              internal static bit(9)                   initial dcl 5-8
max_fun                                internal static bit(9)                   initial dcl 5-8
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 3-15
min_fun                                internal static bit(9)                   initial dcl 5-8
mod_bit                                internal static bit(9)                   initial dcl 5-8
mod_byte                               internal static bit(9)                   initial dcl 5-8
mod_fun                                internal static bit(9)                   initial dcl 5-8
mod_half                               internal static bit(9)                   initial dcl 5-8
mod_word                               internal static bit(9)                   initial dcl 5-8
mult                                   internal static bit(9)                   initial dcl 5-8
negate                                 internal static bit(9)                   initial dcl 5-8
nop                                    internal static bit(9)                   initial dcl 5-8
not_bits                               internal static bit(9)                   initial dcl 5-8
not_equal                              internal static bit(9)                   initial dcl 5-8
off_fun                                internal static bit(9)                   initial dcl 5-8
open_file                              internal static bit(9)                   initial dcl 5-8
or_bits                                internal static bit(9)                   initial dcl 5-8
pack                                   internal static bit(9)                   initial dcl 5-8
packed_ptr                             internal static fixed bin(15,0)          initial dcl 4-1
page_format                            internal static bit(9)                   initial dcl 5-8
param_desc_ptr                         internal static bit(9)                   initial dcl 5-8
param_ptr                              internal static bit(9)                   initial dcl 5-8
picture_format                         internal static bit(9)                   initial dcl 5-8
pl1_mod_fun                            internal static bit(9)                   initial dcl 5-8
prefix_plus                            internal static bit(9)                   initial dcl 5-8
ptr_fun                                internal static bit(9)                   initial dcl 5-8
put_control                            internal static bit(9)                   initial dcl 5-8
put_data_trans                         internal static bit(9)                   initial dcl 5-8
put_edit_trans                         internal static bit(9)                   initial dcl 5-8
put_field                              internal static bit(9)                   initial dcl 5-8
put_field_chk                          internal static bit(9)                   initial dcl 5-8
put_file                               internal static bit(9)                   initial dcl 5-8
put_list_trans                         internal static bit(9)                   initial dcl 5-8
put_string                             internal static bit(9)                   initial dcl 5-8
r_format                               internal static bit(9)                   initial dcl 5-8
r_parn                                 internal static bit(9)                   initial dcl 5-8
range_ck                               internal static bit(9)                   initial dcl 5-8
rank_fun                               internal static bit(9)                   initial dcl 5-8
read_file                              internal static bit(9)                   initial dcl 5-8
real_fix_bin_1                         internal static fixed bin(15,0)          initial dcl 4-1
real_fix_bin_2                         internal static fixed bin(15,0)          initial dcl 4-1
real_fix_dec                           internal static fixed bin(15,0)          initial dcl 4-1
real_flt_bin_2                         internal static fixed bin(15,0)          initial dcl 4-1
real_flt_dec                           internal static fixed bin(15,0)          initial dcl 4-1
real_fun                               internal static bit(9)                   initial dcl 5-8
record_io                              internal static bit(9)                   initial dcl 5-8
refer                                  internal static bit(9)                   initial dcl 5-8
rel_fun                                internal static bit(9)                   initial dcl 5-8
repeat_fun                             internal static bit(9)                   initial dcl 5-8
return_bits                            internal static bit(9)                   initial dcl 5-8
return_string                          internal static bit(9)                   initial dcl 5-8
return_value                           internal static bit(9)                   initial dcl 5-8
return_words                           internal static bit(9)                   initial dcl 5-8
reverse_fun                            internal static bit(9)                   initial dcl 5-8
revert_on                              internal static bit(9)                   initial dcl 5-8
rewrite_file                           internal static bit(9)                   initial dcl 5-8
round_fun                              internal static bit(9)                   initial dcl 5-8
search_fun                             internal static bit(9)                   initial dcl 5-8
search_rev_fun                         internal static bit(9)                   initial dcl 5-8
segno_fun                              internal static bit(9)                   initial dcl 5-8
setbitno_fun                           internal static bit(9)                   initial dcl 5-8
setcharno_fun                          internal static bit(9)                   initial dcl 5-8
sign_fun                               internal static bit(9)                   initial dcl 5-8
signal_on                              internal static bit(9)                   initial dcl 5-8
sin_fun                                internal static bit(9)                   initial dcl 5-8
sind_fun                               internal static bit(9)                   initial dcl 5-8
skip_format                            internal static bit(9)                   initial dcl 5-8
sqrt_fun                               internal static bit(9)                   initial dcl 5-8
stack_ptr                              internal static bit(9)                   initial dcl 5-8
stackbaseptr_fun                       internal static bit(9)                   initial dcl 5-8
stackframeptr_fun                      internal static bit(9)                   initial dcl 5-8
stacq_fun                              internal static bit(9)                   initial dcl 5-8
std_arg_list                           internal static bit(9)                   initial dcl 5-8
std_call                               internal static bit(9)                   initial dcl 5-8
std_entry                              internal static bit(9)                   initial dcl 5-8
std_return                             internal static bit(9)                   initial dcl 5-8
stop                                   internal static bit(9)                   initial dcl 5-8
stream_prep                            internal static bit(9)                   initial dcl 5-8
sub                                    internal static bit(9)                   initial dcl 5-8
tan_fun                                internal static bit(9)                   initial dcl 5-8
tand_fun                               internal static bit(9)                   initial dcl 5-8
terminate_trans                        internal static bit(9)                   initial dcl 5-8
translate_fun                          internal static bit(9)                   initial dcl 5-8
trunc_fun                              internal static bit(9)                   initial dcl 5-8
unlock_file                            internal static bit(9)                   initial dcl 5-8
unpack                                 internal static bit(9)                   initial dcl 5-8
unpacked_ptr                           internal static fixed bin(15,0)          initial dcl 4-1
vclock_fun                             internal static bit(9)                   initial dcl 5-8
verify_fun                             internal static bit(9)                   initial dcl 5-8
verify_ltrim_fun                       internal static bit(9)                   initial dcl 5-8
verify_rev_fun                         internal static bit(9)                   initial dcl 5-8
verify_rtrim_fun                       internal static bit(9)                   initial dcl 5-8
word_to_mod2                           internal static bit(9)                   initial dcl 5-8
word_to_mod4                           internal static bit(9)                   initial dcl 5-8
word_to_mod8                           internal static bit(9)                   initial dcl 5-8
wordno_fun                             internal static bit(9)                   initial dcl 5-8
write_file                             internal static bit(9)                   initial dcl 5-8
x_format                               internal static bit(9)                   initial dcl 5-8
xor_bits                               internal static bit(9)                   initial dcl 5-8

NAMES DECLARED BY EXPLICIT CONTEXT.
inline_operation                000023 constant        entry                    external dcl 16
no                              000127 constant        label                    dcl 58 ref 44 46 50 68 72
test                            000132 constant        entry                    internal dcl 60 ref 35 37 39
yes                             000123 constant        label                    dcl 56

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       266         300     227         276
Length       540     227        12         224      36           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
inline_operation                     86 external procedure  is an external procedure.  
test                                    internal procedure  shares stack frame of external procedure inline_operation.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
inline_operation         000100 complex_operand             inline_operation
                         000110 p                           test
                         000112 s                           test

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
compile_exp$save

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     16 000016        33 000030        35 000032        37 000043        39 000047        41 000062        44 000065
     46 000074        50 000105        56 000123        58 000127        60 000132        65 000134        66 000142
     68 000144        70 000147        72 000153        73 000157        74 000163        78 000175        79 000213
     83 000221


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
