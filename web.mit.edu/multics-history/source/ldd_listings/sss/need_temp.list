	COMPILATION LISTING OF SEGMENT need_temp
	Compiled by: Multics PL/I Compiler, Release 28d, of September 14, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 10/03/83  1653.1 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 need_temp:	proc(pt,bit2);
       12 
       13 /*	Modified:	9 April 1977 by RAB to remove mod_word operator	*/
       14 
       15 dcl	(o,p,pt,q) ptr;
       16 dcl	bit2 bit(2) aligned;
       17 dcl	(check_length, check_qual_and_off) bit(1) aligned;
       18 dcl	(null,substr) builtin;
       19 
  1     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
  1     2 
  1     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
  1     4 
  1     5 /* format: style3 */
  1     6 dcl	1 operator	based aligned,
  1     7 	  2 node_type	bit (9) unaligned,
  1     8 	  2 op_code	bit (9) unaligned,
  1     9 	  2 shared	bit (1) unaligned,
  1    10 	  2 processed	bit (1) unaligned,
  1    11 	  2 optimized	bit (1) unaligned,
  1    12 	  2 number	fixed (14) unaligned,
  1    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
  1    14 
  1    15 dcl	max_number_of_operands
  1    16 			fixed bin (15) int static options (constant) initial (32767);
  1    17 
  1    18 /* END INCLUDE FILE ... operator.incl.pl1 */
       20 
  2     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
  2     2 
  2     3 dcl	1 reference		based aligned,
  2     4 	2 node_type		bit(9) unaligned,
  2     5 	2 array_ref		bit(1) unaligned,
  2     6 	2 varying_ref		bit(1) unaligned,
  2     7 	2 shared			bit(1) unaligned,
  2     8 	2 put_data_sw		bit(1) unaligned,
  2     9 	2 processed		bit(1) unaligned,
  2    10 	2 units			fixed(3) unaligned,
  2    11 	2 ref_count		fixed(17) unaligned,
  2    12 	2 c_offset		fixed(24),
  2    13 	2 c_length		fixed(24),
  2    14 	2 symbol			ptr unaligned,
  2    15 	2 qualifier		ptr unaligned,
  2    16 	2 offset			ptr unaligned,
  2    17 	2 length			ptr unaligned,
  2    18 	2 subscript_list		ptr unaligned,
  2    19 						/* these fields are used by the 645 code generator */
  2    20 	2 address			structure unaligned,
  2    21 	  3 base			bit(3),
  2    22 	  3 offset		bit(15),
  2    23 	  3 op			bit(9),
  2    24 	  3 no_address		bit(1),
  2    25 	  3 inhibit		bit(1),
  2    26 	  3 ext_base		bit(1),
  2    27 	  3 tag			bit(6),
  2    28 	2 info			structure unaligned,
  2    29 	  3 address_in		structure,
  2    30 	    4 b			dimension(0:7) bit(1),
  2    31 	    4 storage		bit(1),
  2    32 	  3 value_in		structure,
  2    33 	    4 a			bit(1),
  2    34 	    4 q			bit(1),
  2    35 	    4 aq			bit(1),
  2    36 	    4 string_aq		bit(1),
  2    37 	    4 complex_aq		bit(1),
  2    38 	    4 decimal_aq		bit(1),
  2    39 	    4 b			dimension(0:7) bit(1),
  2    40 	    4 storage		bit(1),
  2    41 	    4 indicators		bit(1),
  2    42 	    4 x			dimension(0:7) bit(1),
  2    43 	  3 other			structure,
  2    44 	    4 big_offset		bit(1),
  2    45 	    4 big_length		bit(1),
  2    46 	    4 modword_in_offset	bit(1),
  2    47 	2 data_type		fixed(5) unaligned,
  2    48 	2 bits			structure unaligned,
  2    49 	  3 padded_ref		bit(1),
  2    50 	  3 aligned_ref		bit(1),
  2    51 	  3 long_ref		bit(1),
  2    52 	  3 forward_ref		bit(1),
  2    53 	  3 ic_ref		bit(1),
  2    54 	  3 temp_ref		bit(1),
  2    55 	  3 defined_ref		bit(1),
  2    56 	  3 evaluated		bit(1),
  2    57 	  3 allocate		bit(1),
  2    58 	  3 allocated		bit(1),
  2    59 	  3 aliasable		bit(1),
  2    60 	  3 even			bit(1),
  2    61 	  3 perm_address		bit(1),
  2    62 	  3 aggregate		bit(1),
  2    63 	  3 hit_zero		bit(1),
  2    64 	  3 dont_save		bit(1),
  2    65 	  3 fo_in_qual		bit(1),
  2    66 	  3 hard_to_load		bit(1),
  2    67 	2 relocation		bit(12) unaligned,
  2    68 	2 more_bits		structure unaligned,
  2    69 	  3 substr		bit(1),
  2    70 	  3 padded_for_store_ref	bit(1),
  2    71 	  3 aligned_for_store_ref	bit(1),
  2    72 	  3 mbz			bit(15),
  2    73 	2 store_ins		bit(18) unaligned;
  2    74 
  2    75 /* END INCLUDE FILE ... reference.incl.pl1 */
       21 
  3     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
  3     2 
  3     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
  3     4 
  3     5 dcl (	block_node		initial("000000001"b),
  3     6 	statement_node		initial("000000010"b),
  3     7 	operator_node		initial("000000011"b),
  3     8 	reference_node		initial("000000100"b),
  3     9 	token_node		initial("000000101"b),
  3    10 	symbol_node		initial("000000110"b),
  3    11 	context_node		initial("000000111"b),
  3    12 	array_node		initial("000001000"b),
  3    13 	bound_node		initial("000001001"b),
  3    14 	format_value_node		initial("000001010"b),
  3    15 	list_node			initial("000001011"b),
  3    16 	default_node		initial("000001100"b),
  3    17 	machine_state_node		initial("000001101"b),
  3    18 	source_node		initial("000001110"b),
  3    19 	label_node		initial("000001111"b),
  3    20 	cross_reference_node	initial("000010000"b),
  3    21 	sf_par_node		initial("000010001"b),
  3    22 	temporary_node		initial("000010010"b),
  3    23 	label_array_element_node	initial("000010011"b),
  3    24 	by_name_agg_node		initial("000010100"b))
  3    25 				bit(9) internal static aligned options(constant);
  3    26 
  3    27 dcl	1 node			based aligned,
  3    28 	2 type			unal bit(9),
  3    29 	2 source_id		unal structure,
  3    30 	  3 file_number		bit(8),
  3    31 	  3 line_number		bit(14),
  3    32 	  3 statement_number	bit(5);
  3    33 
  3    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
       22 
       23 
       24 
       25 /* need_temp is called by expmac when pt has a reference count of 1 to try to prevent
       26*   unnecessary saving of temporary values whose reference counts are momentarily to be
       27*   counted down to zero */
       28 
       29 	p = pt;
       30 	check_qual_and_off = substr(bit2,1,1);
       31 	check_length = substr(bit2,2,1);
       32 
       33 	if check_length
       34 	then do;
       35 	     if p ->reference.value_in.string_aq
       36 		then p -> reference.dont_save = "1"b;
       37 	     q = p -> reference.length;
       38 	     if q ^= null
       39 	     then do;
       40 		if q -> node.type = operator_node
       41 		     then q = q -> operand(1);
       42 		call check;
       43 		end;
       44 	     end;
       45 
       46 	if ^ check_qual_and_off then return;
       47 
       48 	q = p -> reference.qualifier;
       49 	if q ^= null
       50 	then do;
       51 	     if q -> node.type = operator_node
       52 		then q = q -> operand(1);
       53 	     if q -> node.type = reference_node
       54 		then call check;
       55 	     end;
       56 
       57 	q = p -> reference.offset;
       58 	if q = null then return;
       59 
       60 	if q -> node.type = operator_node
       61 	     then q = q -> operand(1);
       62 
       63 	call check;
       64 
       65 check:	proc;
       66 
       67 	if q -> reference.shared then return;
       68 	if q -> reference.dont_save then return;
       69 	if q -> reference.ref_count ^= 1 then return;
       70 	q -> reference.dont_save = "1"b;
       71 	call need_temp(q,"11"b);
       72 end;
       73 
       74 end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/03/83  1009.0  need_temp.pl1                     >spec>on>pl128d>need_temp.pl1
20           1    07/21/80  1546.3  operator.incl.pl1                 >ldd>include>operator.incl.pl1
21           2    07/21/80  1546.3  reference.incl.pl1                >ldd>include>reference.incl.pl1
22           3    07/21/80  1546.3  nodes.incl.pl1                    >ldd>include>nodes.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
bit2                                   parameter       bit(2)                   dcl 16 ref 11 30 31
bits                     12(06)        based           structure                level 2 packed unaligned dcl 2-3
check_length                    000104 automatic       bit(1)                   dcl 17 set ref 31* 33
check_qual_and_off              000105 automatic       bit(1)                   dcl 17 set ref 30* 46
dont_save                12(21)        based           bit(1)                   level 3 packed unaligned dcl 2-3 set ref 35* 68 70*
info                     11            based           structure                level 2 packed unaligned dcl 2-3
length                    6            based           pointer                  level 2 packed unaligned dcl 2-3 ref 37
node                                   based           structure                level 1 dcl 3-27
null                                                   builtin function         dcl 18 ref 38 49 58
offset                    5            based           pointer                  level 2 packed unaligned dcl 2-3 ref 57
operand                   1            based           pointer                  array level 2 packed unaligned dcl 1-6 ref 40 51 60
operator                               based           structure                level 1 dcl 1-6
operator_node                          constant        bit(9)                   initial dcl 3-5 ref 40 51 60
p                               000100 automatic       pointer                  dcl 15 set ref 29* 35 35 37 48 57
pt                                     parameter       pointer                  dcl 15 ref 11 29
q                               000102 automatic       pointer                  dcl 15 set ref 37* 38 40 40* 40 48* 49 51 51* 51 53
                                                                                  57* 58 60 60* 60 67 68 69 70 71*
qualifier                 4            based           pointer                  level 2 packed unaligned dcl 2-3 ref 48
ref_count                 0(18)        based           fixed bin(17,0)          level 2 packed unaligned dcl 2-3 ref 69
reference                              based           structure                level 1 dcl 2-3
reference_node                         constant        bit(9)                   initial dcl 3-5 ref 53
shared                    0(11)        based           bit(1)                   level 2 packed unaligned dcl 2-3 ref 67
string_aq                11(12)        based           bit(1)                   level 4 packed unaligned dcl 2-3 ref 35
substr                                                 builtin function         dcl 18 ref 30 31
type                                   based           bit(9)                   level 2 packed unaligned dcl 3-27 ref 40 51 53 60
value_in                 11(09)        based           structure                level 3 packed unaligned dcl 2-3

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
array_node                             internal static bit(9)                   initial dcl 3-5
block_node                             internal static bit(9)                   initial dcl 3-5
bound_node                             internal static bit(9)                   initial dcl 3-5
by_name_agg_node                       internal static bit(9)                   initial dcl 3-5
context_node                           internal static bit(9)                   initial dcl 3-5
cross_reference_node                   internal static bit(9)                   initial dcl 3-5
default_node                           internal static bit(9)                   initial dcl 3-5
format_value_node                      internal static bit(9)                   initial dcl 3-5
label_array_element_node               internal static bit(9)                   initial dcl 3-5
label_node                             internal static bit(9)                   initial dcl 3-5
list_node                              internal static bit(9)                   initial dcl 3-5
machine_state_node                     internal static bit(9)                   initial dcl 3-5
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 1-15
o                                      automatic       pointer                  dcl 15
sf_par_node                            internal static bit(9)                   initial dcl 3-5
source_node                            internal static bit(9)                   initial dcl 3-5
statement_node                         internal static bit(9)                   initial dcl 3-5
symbol_node                            internal static bit(9)                   initial dcl 3-5
temporary_node                         internal static bit(9)                   initial dcl 3-5
token_node                             internal static bit(9)                   initial dcl 3-5

NAMES DECLARED BY EXPLICIT CONTEXT.
check                           000116 constant        entry                    internal dcl 65 ref 42 53 63
need_temp                       000010 constant        entry                    external dcl 11 ref 71

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       200         210     153         210
Length       414     153        10         167      24           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
need_temp                            84 external procedure  is an external procedure.  
check                                   internal procedure  shares stack frame of external procedure need_temp.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
need_temp                000100 p                           need_temp
                         000102 q                           need_temp
                         000104 check_length                need_temp
                         000105 check_qual_and_off          need_temp

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_in         return              ext_entry

NO EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000004        29 000015        30 000021        31 000024        33 000030        35 000031        37 000036
     38 000040        40 000044        42 000052        46 000053        48 000055        49 000060        51 000064
     53 000072        57 000077        58 000102        60 000106        63 000114        74 000115        65 000116
     67 000117        68 000123        69 000130        70 000136        71 000140        72 000152


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
