	COMPILATION LISTING OF SEGMENT dial_out_modes_
	Compiled by: Multics PL/I Compiler, Release 28b, of April 11, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 07/18/83  0946.4 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 /* format: style4,delnl,insnl,ifthenstmt,indnoniterend */
        7 dial_out_modes_$set:
        8      procedure (Dop, Modes, Code);
        9 
       10 /* Written January 1983 by C. Hornig */
       11 
       12 dcl  Dop ptr parameter;
       13 dcl  Modes char (*) parameter;
       14 dcl  Code fixed bin (35) parameter;
       15 
       16 dcl  error_table_$bad_mode fixed bin (35) ext static;
       17 dcl  error_table_$bad_mode_value fixed bin (35) ext static;
       18 dcl  error_table_$unimplemented_version fixed bin (35) ext static;
       19 
       20 dcl  get_user_free_area_ entry () returns (ptr);
       21 dcl  mode_string_$parse entry (char (*), ptr, ptr, fixed bin (35));
       22 
       23 dcl  i fixed bin;
       24 dcl  (set_raw, set_echo, set_lfecho) bit (1) aligned;
       25 
       26 dcl  cleanup condition;
       27 
       28 dcl  null builtin;
       29 
       30 /* * * * * * * * * * SET * * * * * * * * * */
       31 
       32 	dop = Dop;
       33 	set_raw = do_info.raw_sw;
       34 	set_echo = do_info.echo_sw;
       35 	set_lfecho = do_info.lfecho_sw;
       36 
       37 	mode_string_info_ptr = null ();
       38 	on cleanup
       39 	     begin;
       40 		if mode_string_info_ptr ^= null () then free mode_string_info;
       41 	     end;
       42 
       43 	call mode_string_$parse (Modes, get_user_free_area_ (), mode_string_info_ptr, Code);
       44 	if Code ^= 0 then return;
       45 
       46 	if mode_string_info.version ^= mode_string_info_version_2 then call abort (error_table_$unimplemented_version);
       47 
       48 	do i = 1 to mode_string_info.number;
       49 	     if mode_string_info.modes (i).version ^= mode_value_version_3
       50 	     then call abort (error_table_$unimplemented_version);
       51 
       52 	     if /* case */ mode_string_info.modes (i).mode_name = "echo"
       53 	     then if mode_string_info.modes (i).boolean_valuep
       54 		then set_echo = mode_string_info.modes (i).boolean_value;
       55 		else call abort (error_table_$bad_mode_value);
       56 	     else if mode_string_info.modes (i).mode_name = "raw"
       57 	     then if mode_string_info.modes (i).boolean_valuep
       58 		then set_raw = mode_string_info.modes (i).boolean_value;
       59 		else call abort (error_table_$bad_mode_value);
       60 	     else if mode_string_info.modes (i).mode_name = "echo_lf"
       61 	     then if mode_string_info.modes (i).boolean_valuep
       62 		then set_lfecho = mode_string_info.modes (i).boolean_value;
       63 		else call abort (error_table_$bad_mode_value);
       64 	     else if mode_string_info.modes (i).mode_name = "send_lf"
       65 	     then if mode_string_info.modes (i).boolean_valuep
       66 		then do_info.flags.send_lf_sw = mode_string_info.modes (i).boolean_value;
       67 		else call abort (error_table_$bad_mode_value);
       68 	     else if mode_string_info.modes (i).mode_name = "quit"
       69 	     then if mode_string_info.modes (i).boolean_valuep
       70 		then do_info.flags.quit_sw = mode_string_info.modes (i).boolean_value;
       71 		else call abort (error_table_$bad_mode_value);
       72 	     else if mode_string_info.modes (i).mode_name = "line"
       73 	     then if mode_string_info.modes (i).boolean_valuep
       74 		then do_info.flags.no_breakall_sw = mode_string_info.modes (i).boolean_value;
       75 		else call abort (error_table_$bad_mode_value);
       76 	     else call abort (error_table_$bad_mode);
       77 	end;
       78 
       79 punt:
       80 	free mode_string_info;
       81 
       82 	do_info.ci.raw_sw = set_raw;
       83 	do_info.ci.echo_sw = set_echo;
       84 	do_info.ci.lfecho_sw = set_lfecho;
       85 
       86 	return;
       87 
       88 /* * * * * * * * * * ABORT * * * * * * * * * */
       89 
       90 abort:
       91      procedure (Error);
       92 
       93 dcl  Error fixed bin (35) parameter;
       94 
       95 	Code = Error;
       96 	goto punt;
       97      end abort;
       98 
  1     1 /* Begin include file dial_out_invocation.incl.pl1 */
  1     2 
  1     3 /* Written by C. Hornig, April 1982 */
  1     4 
  1     5      dcl	   dop		      ptr;
  1     6      dcl	   1 do_info	      aligned based (dop),
  1     7 	     2 ci		      like dial_out_info,	/* user supplied */
  1     8 	     2 version	      varying char (16),
  1     9 	     2 sci_ptr	      ptr,		/* ssu_ info found here */
  1    10 	     2 abort_label	      label,		/* place to die to */
  1    11 	     2 fo_iocbp	      ptr,		/* non-null => file output in progress */
  1    12 	     2 temp_seg_p	      ptr,
  1    13 	     2 match_string_p     ptr,		/* pts to string to match on wait */
  1    14 	     2 match_length	      fixed bin (21),	/* length of string we are waiting to find */
  1    15 	     2 match_max_length   fixed bin (21),	/* len area for match string */
  1    16 	     2 net_rs,				/* read_status result about net */
  1    17 	       3 ev_chn	      fixed bin (71),
  1    18 	       3 data_available   bit (1),
  1    19 	     2 abort_code	      fixed bin (35),	/* general horrible error */
  1    20 	     2 flags,
  1    21 	       3 raw_mode	      bit (1) unaligned,
  1    22 	       3 echo_mode	      bit (1) unaligned,
  1    23 	       3 lfecho_mode      bit (1) unaligned,
  1    24 	       3 pad1	      bit (33) unaligned,
  1    25 	     2 old_modes	      char (512) unaligned,	/* modes before we screwed them up */
  1    26 	     2 saved_cl_intermediary entry variable,
  1    27 	     2 my_cl_intermediary entry variable,
  1    28 	     2 cmd_ptr	      ptr,		/* to area to hold outgoing chars or request line being built */
  1    29 	     2 cmd_buff_len	      fixed bin (21),
  1    30 	     2 time_out	      fixed bin,		/* max time to wait for net line */
  1    31 	     2 net_input_buff_ptr ptr,		/* area we accumulate net input so we can do match scan */
  1    32 	     2 net_input_buff_len fixed bin (21),
  1    33 	     2 net_input_last_char_filled fixed bin (21), /* last pos in net_input_buff of chars read */
  1    34 	     2 net_input_last_char_output fixed bin (21), /* last pos in buffer output or used by wait scan */
  1    35 	     2 active_result_max_len fixed bin (21),
  1    36 	     2 active_result_ptr  ptr;
  1    37 
  2     1 /* Begin include file dial_out_info.incl.pl1 */
  2     2 
  2     3 /* Written by C. Hornig, April 1982 */
  2     4 
  2     5      dcl	   DIAL_OUT_INFO_VERSION_2
  2     6 			      char (8) static options (constant) init ("doinfo_2");
  2     7      dcl	   dial_out_info_ptr      ptr;
  2     8      dcl	   1 dial_out_info	      aligned based (dial_out_info_ptr),
  2     9 	     2 version	      char (8),		/* version of this structure */
  2    10 	     2 command_name	      char (32) unaligned,	/* name of command invoking subsystem */
  2    11 	     2 net_iocb	      pointer,		/* switch to which data is sent */
  2    12 	     2 request_table_ptr
  2    13 			      pointer,		/* points to ssu_ request table */
  2    14 	     2 profile_ptr	      pointer,		/* points to abbrev profile */
  2    15 	     2 request_ptr	      pointer,		/* points to initial request */
  2    16 	     2 request_length     fixed bin (21),	/* length of initial request */
  2    17 	     2 esc_char	      character (1),	/* command prefix character */
  2    18 	     2 flags,
  2    19 	       3 raw_sw	      bit (1) unaligned,	/* do not do Multics terminal management */
  2    20 	       3 echo_sw	      bit (1) unaligned,	/* echo characters typed by user */
  2    21 	       3 abbrev_sw	      bit (1) unaligned,	/* do abbrev processing in request lines */
  2    22 	       3 lfecho_sw	      bit (1) unaligned,	/* treat CR's as LF's */
  2    23 	       3 send_lf_sw	      bit (1) unaligned,	/* send LF on CR */
  2    24 	       3 quit_sw	      bit (1) unaligned,	/* send interrupt on quit */
  2    25 	       3 brief_sw	      bit (1) unaligned,	/* don't print unneeded messages */
  2    26 	       3 no_startup_sw    bit (1) unaligned,	/* don't run start_up. */
  2    27 	       3 no_breakall_sw
  2    28 			      bit (1) unaligned,	/* transmit on every vs. transmit on NL */
  2    29 	       3 pad	      bit (27) unaligned,	/* END OF VERSION 0 STRUCTURE */
  2    30 	     2 cmd_version	      varying char (8),	/* version of command calling dial_out */
  2    31 						/* END OF VERSION 1 STRUCTURE */
  2    32 	     2 modes_ptr	      ptr,		/* ptr to initial modes */
  2    33 	     2 modes_len	      fixed bin (21);	/* length of same */
  2    34 						/* END OF VERSION 2 STRUCTURE */
  2    35 
  2    36 /* End include file dial_out_info.incl.pl1 */
  1    38 
  1    39 
  1    40 /* End include file dial_out_invocation.incl.pl1 */
       99 
  3     1 /*  BEGIN INCLUDE FILE   mode_string_info.incl.pl1							*/
  3     2 
  3     3 /* Structure for parse_mode_string_ JRDavis 20 October 1980
  3     4*   Last modified 12 January 1981 by J. Spencer Love for version 2, make char_value varying string */
  3     5 
  3     6 declare	mode_value_ptr		ptr,
  3     7 	number_of_modes		fixed bin;
  3     8 
  3     9 declare	1 mode_string_info		aligned based (mode_string_info_ptr),
  3    10 	  2 version		fixed bin,
  3    11 	  2 number		fixed bin,
  3    12 	  2 modes			(number_of_modes refer (mode_string_info.number)) like mode_value;
  3    13 
  3    14 declare	mode_string_info_ptr	ptr;
  3    15 
  3    16 declare	1 mode_value		aligned based (mode_value_ptr),
  3    17 	  2 version		fixed bin,
  3    18 	  2 mode_name		char (32) unaligned,
  3    19 	  2 flags,
  3    20 	    3 boolean_valuep	bit (1) unaligned,
  3    21 	    3 numeric_valuep	bit (1) unaligned,
  3    22 	    3 char_valuep		bit (1) unaligned,
  3    23 	    3 boolean_value		bit (1) unaligned,
  3    24 	    3 pad1		bit (32) unaligned,
  3    25 	  2 numeric_value		fixed bin (35),
  3    26 	  2 char_value		char (32) varying,
  3    27 	  2 code			fixed bin (35),
  3    28 	  2 pad2			bit (36);
  3    29 
  3    30 declare	mode_string_info_version_2	fixed bin static options (constant) initial (2),
  3    31 	mode_value_version_3	fixed bin static options (constant) initial (3);
  3    32 
  3    33 /* END INCLUDE FILE   mode_string_info.incl.pl1								*/
      100 
      101 
      102      end dial_out_modes_$set;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/13/83  0949.3  dial_out_modes_.pl1               >spec>on>07/13/83>dial_out_modes_.pl1
99           1    07/13/83  0945.1  dial_out_invocation.incl.pl1      >spec>on>07/13/83>dial_out_invocation.incl.pl1
1-38         2    07/13/83  0945.1  dial_out_info.incl.pl1            >spec>on>07/13/83>dial_out_info.incl.pl1
100          3    03/19/81  1206.8  mode_string_info.incl.pl1         >ldd>include>mode_string_info.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
Code                                   parameter       fixed bin(35,0)          dcl 14 set ref 7 43* 44 95*
Dop                                    parameter       pointer                  dcl 12 ref 7 32
Error                                  parameter       fixed bin(35,0)          dcl 93 ref 90 95
Modes                                  parameter       char                     unaligned dcl 13 set ref 7 43*
boolean_value            13(03)        based           bit(1)                   array level 4 packed unaligned dcl 3-9 ref 52 56 60
                                                                                  64 68 72
boolean_valuep           13            based           bit(1)                   array level 4 packed unaligned dcl 3-9 ref 52 56 60
                                                                                  64 68 72
ci                                     based           structure                level 2 dcl 1-6
cleanup                         000104 stack reference condition                dcl 26 ref 38
dial_out_info                          based           structure                level 1 dcl 2-8
do_info                                based           structure                level 1 dcl 1-6
dop                             000112 automatic       pointer                  dcl 1-5 set ref 32* 33 34 35 64 68 72 82 83 84
echo_sw                  24(01)        based           bit(1)                   level 4 packed unaligned dcl 1-6 set ref 34 83*
error_table_$bad_mode           000010 external static fixed bin(35,0)          dcl 16 set ref 76*
error_table_$bad_mode_value     000012 external static fixed bin(35,0)          dcl 17 set ref 55* 59* 63* 67* 71* 75*
error_table_$unimplemented_version
                                000014 external static fixed bin(35,0)          dcl 18 set ref 46* 49*
flags                    13            based           structure                array level 3 in structure "mode_string_info"
                                                                                  dcl 3-9 in procedure "dial_out_modes_$set"
flags                    24            based           structure                level 3 in structure "do_info" dcl 1-6 in procedure
                                                                                  "dial_out_modes_$set"
get_user_free_area_             000016 constant        entry                    external dcl 20 ref 43 43
i                               000100 automatic       fixed bin(17,0)          dcl 23 set ref 48* 49 52 52 52 56 56 56 60 60 60 64
                                                                                  64 64 68 68 68 72 72 72*
lfecho_sw                24(03)        based           bit(1)                   level 4 packed unaligned dcl 1-6 set ref 35 84*
mode_name                 3            based           char(32)                 array level 3 packed unaligned dcl 3-9 ref 52 56 60
                                                                                  64 68 72
mode_string_$parse              000020 constant        entry                    external dcl 21 ref 43
mode_string_info                       based           structure                level 1 dcl 3-9 ref 40 79
mode_string_info_ptr            000114 automatic       pointer                  dcl 3-14 set ref 37* 40 40 43* 46 48 49 52 52 52 56
                                                                                  56 56 60 60 60 64 64 64 68 68 68 72 72 72 79
mode_string_info_version_2             constant        fixed bin(17,0)          initial dcl 3-30 ref 46
mode_value                             based           structure                level 1 dcl 3-16
mode_value_version_3                   constant        fixed bin(17,0)          initial dcl 3-30 ref 49
modes                     2            based           structure                array level 2 dcl 3-9
no_breakall_sw           24(08)        based           bit(1)                   level 4 packed unaligned dcl 1-6 set ref 72*
null                                                   builtin function         dcl 28 ref 37 40
number                    1            based           fixed bin(17,0)          level 2 dcl 3-9 ref 40 48 79
quit_sw                  24(05)        based           bit(1)                   level 4 packed unaligned dcl 1-6 set ref 68*
raw_sw                   24            based           bit(1)                   level 4 packed unaligned dcl 1-6 set ref 33 82*
send_lf_sw               24(04)        based           bit(1)                   level 4 packed unaligned dcl 1-6 set ref 64*
set_echo                        000102 automatic       bit(1)                   dcl 24 set ref 34* 52* 83
set_lfecho                      000103 automatic       bit(1)                   dcl 24 set ref 35* 60* 84
set_raw                         000101 automatic       bit(1)                   dcl 24 set ref 33* 56* 82
version                                based           fixed bin(17,0)          level 2 in structure "mode_string_info" dcl 3-9
                                                                                  in procedure "dial_out_modes_$set" ref 46
version                   2            based           fixed bin(17,0)          array level 3 in structure "mode_string_info"
                                                                                  dcl 3-9 in procedure "dial_out_modes_$set" ref 49

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
DIAL_OUT_INFO_VERSION_2                internal static char(8)                  initial unaligned dcl 2-5
dial_out_info_ptr                      automatic       pointer                  dcl 2-7
mode_value_ptr                         automatic       pointer                  dcl 3-6
number_of_modes                        automatic       fixed bin(17,0)          dcl 3-6

NAMES DECLARED BY EXPLICIT CONTEXT.
abort                           000457 constant        entry                    internal dcl 90 ref 46 49 55 59 63 67 71 75 76
dial_out_modes_$set             000024 constant        entry                    external dcl 7
punt                            000431 constant        label                    dcl 79 ref 96

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       604         626     465         614
Length      1062     465        22         220     117           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
dial_out_modes_$set                 112 external procedure  is an external procedure.  
on unit on line 38                   64 on unit               
abort                                   internal procedure  shares stack frame of external procedure dial_out_modes_$set.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
dial_out_modes_$set      000100 i                           dial_out_modes_$set
                         000101 set_raw                     dial_out_modes_$set
                         000102 set_echo                    dial_out_modes_$set
                         000103 set_lfecho                  dial_out_modes_$set
                         000112 dop                         dial_out_modes_$set
                         000114 mode_string_info_ptr        dial_out_modes_$set

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              enable              ext_entry_desc      int_entry
free_based

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
get_user_free_area_           mode_string_$parse

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$bad_mode         error_table_$bad_mode_value   error_table_$unimplemented_version




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
      7 000020        32 000037        33 000043        34 000046        35 000052        37 000056        38 000060
     40 000074        41 000107        43 000110        44 000145        46 000150        48 000162        49 000173
     52 000207        55 000231        56 000241        59 000256        60 000266        63 000303        64 000313
     67 000332        68 000342        71 000361        72 000371        75 000410        76 000420        77 000427
     79 000431        82 000437        83 000444        84 000451        86 000456        90 000457        95 000461
     96 000464


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
