	COMPILATION LISTING OF SEGMENT value_set_path
	Compiled by: Multics PL/I Compiler, Release 27d, of October 11, 1982
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 11/04/82  1716.0 mst Thu
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 value_set_path: vsp: proc;
       12 
       13 /* Written 03/06/81 by S. Herbst */
       14 /* Changed to use default value seg when invoked with no args 08/18/81 S. Herbst */
       15 
       16 /* Constants */
       17 
       18 dcl ME char (32) int static options (constant) init ("value_set_path");
       19 dcl CREATE bit (1) aligned int static options (constant) init ("1"b);
       20 
       21 /* Based */
       22 
       23 dcl arg char (arg_len) based (arg_ptr);
       24 
       25 /* Automatic */
       26 
       27 dcl (expanded_path, path) char (168);
       28 dcl (brief_sw, got_path_sw) bit (1) aligned;
       29 dcl arg_ptr ptr;
       30 dcl arg_len fixed bin (24);
       31 dcl (arg_count, i) fixed bin;
       32 dcl code fixed bin (35);
       33 
       34 /* External */
       35 
       36 dcl error_table_$badopt fixed bin (35) ext;
       37 dcl error_table_$no_w_permission fixed bin (35) ext;
       38 
       39 dcl absolute_pathname_ entry (char (*), char (*), fixed bin (35));
       40 dcl (com_err_, com_err_$suppress_name) entry options (variable);
       41 dcl cu_$arg_count entry (fixed bin, fixed bin (35));
       42 dcl cu_$arg_ptr entry (fixed bin, ptr, fixed bin (24), fixed bin (35));
       43 dcl ioa_ entry options (variable);
       44 dcl value_$set_path entry (char (*), bit (1) aligned, fixed bin (35));
       45 
       46 dcl index builtin;
       47 
       48 	call cu_$arg_count (arg_count, code);
       49 	if code ^= 0 then do;
       50 	     call com_err_ (code, ME);
       51 	     return;
       52 	end;
       53 
       54 	got_path_sw, brief_sw = "0"b;
       55 
       56 	do i = 1 to arg_count;
       57 
       58 	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
       59 
       60 	     if index (arg, "-") = 1 then
       61 		if arg = "-brief" | arg = "-bf" then brief_sw = "1"b;
       62 		else do;
       63 		     call com_err_ (error_table_$badopt, ME, "^a", arg);
       64 		     return;
       65 		end;
       66 
       67 	     else if got_path_sw then do;
       68 USAGE:		call com_err_$suppress_name (0, ME, "Usage:  vsp {path} {-brief}");
       69 		return;
       70 	     end;
       71 
       72 	     else do;
       73 		got_path_sw = "1"b;
       74 		path = arg;
       75 	     end;
       76 	end;
       77 
       78 	if ^got_path_sw | path = "" then expanded_path = "";
       79 	else do;
       80 	     call absolute_pathname_ (path, expanded_path, code);
       81 	     if code ^= 0 then do;
       82 		call com_err_ (code, ME, "^a", path);
       83 		return;
       84 	     end;
       85 	end;
       86 
       87 	call value_$set_path (expanded_path, CREATE, code);
       88 	if code ^= 0 then
       89 	     if code = error_table_$no_w_permission then do;
       90 		if ^brief_sw then
       91 		     call ioa_ ("Warning: You lack write access on value segment ^a", expanded_path);
       92 	     end;
       93 	     else call com_err_ (code, ME, "Value segment ^a", expanded_path);
       94 
       95 end value_set_path;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/04/82  1618.3  value_set_path.pl1                >dumps>old>recomp>value_set_path.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
CREATE                          000020 constant        bit(1)                   initial dcl 19 set ref 87*
ME                              000000 constant        char(32)                 initial unaligned dcl 18 set ref 50* 63* 68* 82* 93*
absolute_pathname_              000014 constant        entry                    external dcl 39 ref 80
arg                                    based           char                     unaligned dcl 23 set ref 60 60 60 63* 74
arg_count                       000231 automatic       fixed bin(17,0)          dcl 31 set ref 48* 56
arg_len                         000230 automatic       fixed bin(24,0)          dcl 30 set ref 58* 60 60 60 63 63 74
arg_ptr                         000226 automatic       pointer                  dcl 29 set ref 58* 60 60 60 63 74
brief_sw                        000224 automatic       bit(1)                   dcl 28 set ref 54* 60* 90
code                            000233 automatic       fixed bin(35,0)          dcl 32 set ref 48* 49 50* 58* 80* 81 82* 87* 88 88
                                                                                  93*
com_err_                        000016 constant        entry                    external dcl 40 ref 50 63 82 93
com_err_$suppress_name          000020 constant        entry                    external dcl 40 ref 68
cu_$arg_count                   000022 constant        entry                    external dcl 41 ref 48
cu_$arg_ptr                     000024 constant        entry                    external dcl 42 ref 58
error_table_$badopt             000010 external static fixed bin(35,0)          dcl 36 set ref 63*
error_table_$no_w_permission    000012 external static fixed bin(35,0)          dcl 37 ref 88
expanded_path                   000100 automatic       char(168)                unaligned dcl 27 set ref 78* 80* 87* 90* 93*
got_path_sw                     000225 automatic       bit(1)                   dcl 28 set ref 54* 67 73* 78
i                               000232 automatic       fixed bin(17,0)          dcl 31 set ref 56* 58*
index                                                  builtin function         dcl 46 ref 60
ioa_                            000026 constant        entry                    external dcl 43 ref 90
path                            000152 automatic       char(168)                unaligned dcl 27 set ref 74* 78 80* 82*
value_$set_path                 000030 constant        entry                    external dcl 44 ref 87

NAMES DECLARED BY EXPLICIT CONTEXT.
USAGE                           000236 constant        label                    dcl 68
value_set_path                  000066 constant        entry                    external dcl 11
vsp                             000057 constant        entry                    external dcl 11

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       610         642     461         620
Length      1024     461        32         145     127           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
vsp                                 194 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
vsp                      000100 expanded_path               vsp
                         000152 path                        vsp
                         000224 brief_sw                    vsp
                         000225 got_path_sw                 vsp
                         000226 arg_ptr                     vsp
                         000230 arg_len                     vsp
                         000231 arg_count                   vsp
                         000232 i                           vsp
                         000233 code                        vsp

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
absolute_pathname_            com_err_                      com_err_$suppress_name        cu_$arg_count
cu_$arg_ptr                   ioa_                          value_$set_path

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$badopt           error_table_$no_w_permission




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000056        48 000073        49 000103        50 000105        51 000122        54 000123        56 000125
     58 000134        60 000151        63 000200        64 000232        65 000233        67 000234        68 000236
     69 000263        73 000264        74 000266        76 000272        78 000274        80 000306        81 000326
     82 000330        83 000357        87 000360        88 000401        90 000406        92 000427        93 000430
     95 000460


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
