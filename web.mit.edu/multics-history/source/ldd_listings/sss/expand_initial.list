	COMPILATION LISTING OF SEGMENT expand_initial
	Compiled by: Multics PL/I Compiler, Release 32c, of June 16, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 07/31/89  1358.0 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 /* Modified Dec 1978 by David Spector for new xref 'set' format */
       12 /* Modified 79/04/19 by Peter Krupp to implement 4-bit decimal */
       13 
       14 expand_initial: proc(sp,st,locator);
       15 
       16 dcl	(s,sp,st,blk,p,q,lab,swt,increase,subscript,total_size,nest,allocate,one,ar,r,a,b,v,off) ptr;
       17 dcl	(d,locator,stat) ptr;
       18 dcl	(c_total_size,coff) fixed bin(31);
       19 dcl	(n,i,total_elements) fixed bin(15);
       20 
       21 dcl	units fixed bin(3);
       22 dcl	round(4) fixed bin(15) int static initial(36,0,4,2);
       23 dcl	optable(4) bit(9) aligned initial(bit_to_word,""b,char_to_word,half_to_word);
       24 
       25 dcl	(constant_extents,temporary_required) bit(1) aligned;
       26 
       27 dcl	fab_image aligned bit(length(unspec(fab))) based(addr(fab));
       28 dcl	1 fab,
       29 	2 bits,
       30 	3 fill1 bit(27),
       31 	3 internal bit(1),
       32 	3 fill2 bit(8),
       33 	2 title char(32),
       34 	2 line_size fixed bin(15),
       35 	2 page_size fixed bin(15),
       36 	2 buffer_size fixed bin(15);
       37 
       38 dcl	(null,string,fixed,length,unspec,addr,binary,bit) builtin;
       39 
       40 	s = sp;
       41 	stat = st;
       42 	one = declare_constant$integer(1);
       43 	blk = s->symbol.block_node;
       44 	s->symbol.allocate  ,
       45 	s->symbol.set = "1"b;
       46 
       47 	if s->symbol.constant
       48 	then do;
       49 		q = create_operator(jump_if_eq,3);
       50 		q->operand(1),lab = create_label(blk,null,by_compiler);
       51 		q->operand(2),swt = declare_integer(blk);
       52 		q->operand(3) = one;
       53 
       54 		swt->reference.symbol->symbol.static,
       55 		swt->reference.symbol->symbol.internal,
       56 		swt->reference.symbol->symbol.allocate = "1"b;
       57 		swt->reference.symbol->symbol.auto = "0"b;
       58 		/* int static is assumed to be initialized to zero */
       59 
       60 		p = make_statement(if_statement,q);
       61 
       62 		/* create an internal static file state block of 290 words and set the "general"
       63*		pointer of the file constant's symbol node to point to the symbol node of the
       64*		file state block.  */
       65 			
       66 		p = create_symbol(blk,create_token(s->symbol.token->token.string||".fsb"
       67 			,identifier),by_compiler);
       68 		p->symbol.c_dcl_size = 290;
       69 		p->symbol.storage_block,p->symbol.static = "1"b;
       70 		p->symbol.external = s->symbol.external;
       71 		p->symbol.internal = s->symbol.internal;
       72 		p->symbol.allocate = "1"b;
       73 		call get_size(p);
       74 		p->symbol.boundary = mod2_;
       75 		s->symbol.general = p;
       76 		
       77 		/* create a file attribute block that contains the initial attribute set used when
       78*		opening the file control block.    */
       79 		
       80 		string(fab.bits) = "0010"b||string(s->symbol.file_attributes);
       81 				/* "001"b marks the file as version 2 */
       82 		fab.internal = s->symbol.internal;
       83 		fab.title = s->symbol.token->token.string;
       84 		fab.line_size,fab.page_size,fab.buffer_size = 0;
       85 		q = declare_constant$bit(fab_image);
       86 		p->symbol.general = q->reference.symbol;
       87 		
       88 		
       89 		/* generate prologue to assign the addr(fab) to the 1st pointer
       90*		of the file constant, and the addr(fsb) to the 2nd pointer.  */
       91 		
       92 		a = create_operator(addr_fun,2);
       93 		a->operand(2) = q;
       94 		q = make_statement(assignment_statement,assignf((s->symbol.reference),a));
       95 		a = create_operator(addr_fun,2);
       96 		a->operand(2) = p->symbol.reference;
       97 		q = copy_expression(s->symbol.reference);
       98 		q->reference.shared = "0"b;
       99 		q->reference.ref_count = 1;
      100 		q->reference.c_offset = 2;
      101 		q->reference.units = word_;
      102 		q = make_statement(assignment_statement,assignf(q,a));
      103 
      104 		p = make_statement(assignment_statement,assignf(swt,one));
      105 		p = make_statement(null_statement,null);
      106 		p->statement.labels = create_list(2);
      107 		p->statement.labels->element(2) = lab;
      108 		lab->label.statement = p;
      109 		return;
      110 	end;
      111 
      112 	if s->symbol.area
      113 	then do;
      114 		if s->symbol.based | s->symbol.controlled
      115 		then do;
      116 			p  ,
      117 			stat = create_statement(assignment_statement,stat,null,(stat->statement.prefix));
      118 			p->statement.generated = "1"b;
      119 		end;
      120 		else	p = create_statement$prologue(assignment_statement,blk,null,(blk->block.prefix));
      121 
      122 		p->statement.root  ,
      123 		q = create_operator(assign,2);
      124 
      125 		r = create_reference((s->symbol.token));
      126 
      127 		if locator^=null
      128 		then	r->reference.qualifier = copy_expression((locator));
      129 	
      130 		if s->symbol.father^=null
      131 		then	call link_father();
      132 
      133 		q->operand(1) = r;
      134 		q->operand(2) = create_reference(create_token("empty",identifier));
      135 
      136 		q->operand(2)->reference.offset = create_list(0);
      137 
      138 		return;
      139 	end;
      140 
      141 	if s->symbol.initialed
      142 	then do;
      143 		q = s->symbol.initial;
      144 		if s->symbol.dimensioned
      145 		then	goto array_initialization;
      146 		else do;
      147 			r = create_reference((s->symbol.token));
      148 			r->reference.qualifier = copy_expression((locator));
      149 
      150 			if s->symbol.father^=null
      151 			then	call link_father();
      152 
      153 unravel:			if q->element(3)^=null
      154 			then	call semantic_translator$abort(442,s);
      155 
      156 			if q->element(1)->node.type^=token_node
      157 			then	call semantic_translator$abort(442,s);
      158 
      159 			if q->element(1)->token.type^=dec_integer
      160 			then	call semantic_translator$abort(442,s);
      161 
      162 			if token_to_binary((q->element(1)))^=1
      163 			then	call semantic_translator$abort(442,s);
      164 
      165 			if q->element(2) ^= null
      166 			then	if q->element(2)->node.type = list_node
      167 			then do;
      168 				q = q->element(2);
      169 				go to unravel;
      170 			end;
      171 
      172 			p = make_statement(assignment_statement,assignf(r,(q->element(2))));
      173 		end;
      174 	end;
      175 
      176 	return;
      177 
      178 /* prepare for array initialization by getting a subscript, code to increment the subscript,
      179*   and a reference to an array element.	*/
      180 
      181 array_initialization:
      182 	subscript = declare_integer(blk);
      183 	increase = assignf(subscript,addf(subscript,one));
      184 	r = create_reference(s);
      185 	r->reference = s->symbol.reference->reference;
      186 	r->reference.array_ref = "0"b;
      187 	r->reference.qualifier = copy_expression((locator));
      188 	r->reference.symbol = s->symbol.token;
      189 
      190 	if s->symbol.father^=null
      191 	then	call link_father();
      192 
      193 	a = s->symbol.array;
      194 	n = a->array.number_of_dimensions;
      195 	r->reference.offset = create_list(n);
      196 
      197 	total_elements = 0;
      198 	constant_extents = "1"b;
      199 
      200 /* insure that the high and low bounds are available in the object program.	*/
      201 
      202 	do b = a->array.bounds repeat b->bound.next while(b ^= null);
      203 		if b->bound.lower=null
      204 		then	b->bound.lower = declare_constant$integer((b->bound.c_lower));
      205 		else	constant_extents = "0"b;
      206 
      207 		if b->bound.upper=null
      208 		then	b->bound.upper = declare_constant$integer((b->bound.c_upper));
      209 		else	constant_extents = "0"b;
      210 
      211 		if constant_extents
      212 		then	if total_elements=0
      213 			then	total_elements = b->bound.c_upper-b->bound.c_lower+1;
      214 			else	total_elements = total_elements * (b->bound.c_upper-b->bound.c_lower+1);
      215 	end;
      216 
      217 /* if this is a vector call assign_initial to create assignments from the initial attribute
      218*   to elements of the vector.  The number of elements  in the vector is assumed to be
      219*   equal to or greater than the number of elements in the initial attribute. */
      220 
      221 	if n = 1
      222 	then do;
      223 		if a->array.bounds->bound.c_lower = 1
      224 		then	p = declare_constant$integer(0);
      225 		else	p = subf((a->array.bounds->bound.lower),one);
      226 
      227 		p = make_statement(assignment_statement,assignf(subscript,p));
      228 		r->reference.offset->element(1) = subscript;
      229 		p = make_statement(assignment_statement,assign_initial(q,null,0,"1"b,temporary_required));
      230 
      231 		return;
      232 	end;
      233 
      234 /* Create a vector whose elements have the same attributes as the elements of
      235*   the array.  The initial attribute values are assigned to the vector using
      236*   the procedure assign_initial.  The vector is made large enough to
      237*   hold all the values given in the initial attribute.	*/
      238 
      239 	p=make_statement(assignment_statement,assignf(subscript,declare_constant$integer(0)));
      240 	allocate = make_statement(null_statement,null);
      241 	p = create_symbol(blk,null,by_compiler);
      242 	p->symbol.auto = "1"b;
      243 	string(p->symbol.data_type) = string(s->symbol.data_type);
      244 	string(p->symbol.misc_attributes) = string(s->symbol.misc_attributes);
      245 	p->symbol.member = "0"b;
      246 	p->symbol.c_dcl_size = s->symbol.c_dcl_size;
      247 	p->symbol.scale = s->symbol.scale;
      248 	p->symbol.dcl_size = s->symbol.dcl_size;
      249 
      250 	unspec (p->symbol.pix) = unspec (s->symbol.pix);
      251 	if s -> symbol.picture then p -> symbol.general = s -> symbol.general;
      252 
      253 	if p->symbol.varying
      254 	then	p->symbol.reference->reference.varying_ref = "1"b;
      255 	else do;
      256 		p->symbol.reference->reference.c_length = s->symbol.reference->reference.c_length;
      257 		p->symbol.reference->reference.length = s->symbol.reference->reference.length;
      258 	end;
      259 
      260 	p->symbol.boundary = s->symbol.boundary;
      261 
      262 	v  ,
      263 	p->symbol.array = create_array();
      264 	v->array.number_of_dimensions = 1;
      265 	v->array.own_number_of_dimensions = 1;
      266 	v->array.virtual_origin  ,
      267 	v->array.element_size = a->array.element_size;
      268 	v->array.c_virtual_origin  ,
      269 	v->array.c_element_size = a->array.c_element_size;
      270 	v->array.c_element_size_bits = a->array.c_element_size_bits;
      271 	v->array.offset_units = a->array.offset_units;
      272 
      273 	b  ,
      274 	v->array.bounds = create_bound();
      275 	b->bound.c_lower = 1;
      276 	b->bound.c_multiplier = v->array.c_element_size;
      277 	b->bound.multiplier = v->array.element_size;
      278 	if b->bound.multiplier = null
      279 	then	b->bound.multiplier = declare_constant$integer((b->bound.c_multiplier));
      280 
      281 	total_size = null;
      282 	c_total_size = 0;
      283 	ar = r;
      284 
      285 	r = create_reference((p->symbol.token));
      286 	r->reference.offset = create_list(1);
      287 	r->reference.offset->element(1) = subscript;
      288 	q = make_statement(assignment_statement,assign_initial(q,total_size,c_total_size,"1"b,temporary_required));
      289 
      290 	if temporary_required
      291 	then	if total_size=null
      292 		then do;
      293 			total_size = declare_constant$integer(c_total_size);
      294 			c_total_size = 0;
      295 		end;
      296 
      297 
      298 /* set the upper bound of the vector to the number of items in the initial attribute.  */
      299 
      300 	b->bound.upper = total_size;
      301 	b->bound.c_upper = c_total_size;
      302 
      303 /* set the size of the vector to the number of values found in the initial attribute
      304*   times the size of an element of the vector.	*/
      305 
      306 	if total_size = null
      307 	then	if a->array.element_size = null
      308 		then	c_total_size = c_total_size*a->array.c_element_size;
      309 		else	total_size = multf((a->array.element_size),declare_constant$integer(c_total_size));
      310 	else	if a->array.element_size = null
      311 		then	if a->array.c_element_size ^= 1
      312 			then	total_size = multf(total_size,declare_constant$integer((a->array.c_element_size)));
      313 			else;
      314 		else	total_size = multf(total_size,(a->array.element_size));
      315 
      316 /* Change total_size and c_total_size to be in units of words */
      317 
      318 	units = v->array.offset_units;
      319 	if units < word_
      320 	then do;
      321 		if total_size ^= null
      322 		then do;
      323 			q = create_operator(optable(units),2);
      324 			q->operand(2) = total_size;
      325 			total_size = q;
      326 		end;
      327 		else	c_total_size = divide(c_total_size+round(units)-1,round(units),31,0);
      328 	end;
      329 
      330 	p->symbol.word_size = total_size;
      331 	p->symbol.c_word_size = c_total_size;
      332 
      333 	if total_size ^= null
      334 	then do;
      335 		p->symbol.exp_extents = "1"b;
      336 		q = create_operator(allot_auto,2);
      337 		p->symbol.reference->reference.qualifier  ,
      338 		q->operand(1) = declare_pointer(blk);
      339 		q->operand(2) = total_size;
      340 		allocate->statement.root = copy_expression((q));
      341 		allocate->statement.statement_type = assignment_statement;
      342 	end;
      343 
      344 /* create code to copy the elements of the vector into the array.  The bounds of the
      345*   array are used to control the loop.  The number of elements in the vector is
      346*   assumed to equal or exceed the number of elements in the array.	*/
      347 
      348 	q = make_statement(assignment_statement,assignf(subscript,declare_constant$integer(0)));
      349 	nest = create_operator(join,2);
      350 	nest->operand(1) = increase;
      351 	nest->operand(2) = assignf(ar,r);
      352 
      353 	i = 0;
      354 
      355 	do b = a->array.bounds repeat b->bound.next while(b^=null);
      356 		i = i+1;
      357 		q = create_operator(loop,5);
      358 		q->operand(1) = nest;
      359 		q->operand(2)  ,
      360 		ar->reference.offset->element(i) = declare_integer(blk);
      361 		q->operand(3) = b->bound.lower;
      362 		q->operand(4) = b->bound.upper;
      363 		nest = q;
      364 	end;
      365 
      366 	q = make_statement(assignment_statement,nest);
      367 
      368 	return;
      369 
      370 /* subroutine to assign the values of an initial attribute to a vector.	*/
      371 
      372 assign_initial: proc(init,count,c_count,check_range,temporary_reqd) returns(ptr);
      373 
      374 dcl	(init,count,numb,p,v,t,q,q1) ptr;
      375 dcl	stack(1024) ptr unal;
      376 dcl	(i,k,l,items,limit) fixed bin(15),
      377 	n fixed bin(15) init(0);
      378 dcl	(c_count,c_numb,case) fixed bin(31);
      379 
      380 dcl	(check_range,temporary_reqd) bit(1) aligned;
      381 dcl	hbound builtin;
      382 
      383 	limit = divide(hbound(stack,1),2,15,0);
      384 	items, l = 0;
      385 	temporary_reqd = "0"b;
      386 
      387 	do p = init repeat p->element(3) while(p^=null);
      388 		t = p->element(1);		/* repetition factor */
      389 		v = p->element(2);		/* value */
      390 
      391 		n = 0;
      392 		case = 1;
      393 
      394 		if t->node.type = token_node
      395 		then	if t->token.type = dec_integer
      396 			then do;
      397 				n = token_to_binary(t);
      398 				if n < 6 then case = 0;
      399 			end;
      400 			else	check_range = "0"b;
      401 		else	check_range = "0"b;
      402 
      403 		if v=null
      404 		then	;
      405 		else	if v->node.type=list_node
      406 			then	case = 2;
      407 
      408 		go to action(case);
      409 
      410 action(0):
      411 		/* optimized special case */
      412 
      413 		if count=null
      414 		then	c_count = c_count+n;
      415 		else	count = addf(count,declare_constant$integer((n)));
      416 
      417 		do k = 1 to n;
      418 			items = items + 1;
      419 			l = l+2;
      420 			if items > limit
      421 			then	call semantic_translator$abort(264,s);
      422 
      423 			stack(l-1) = increase;
      424 			stack(l) = assignf(r,v);
      425 		end;
      426 
      427 		go to next;
      428 
      429 action(1):
      430 		/* normal case */
      431 
      432 		temporary_reqd = "1"b;
      433 
      434 		q = assignf(r,v);
      435 
      436 		if count=null
      437 		&  n^=0
      438 		then	c_count = c_count+n;
      439 		else	if count=null
      440 			then	count = t;
      441 			else	count = addf(count,t);
      442 
      443 		q1 = create_operator(join,2);
      444 		q1->operand(1) = increase;
      445 		q1->operand(2) = q;
      446 		q = create_operator(loop,5);
      447 		q->operand(1) = q1;
      448 		q->operand(2) = declare_integer(blk);
      449 		q->operand(3) = one;
      450 		q->operand(4) = t;
      451 
      452 		items = items + 1;
      453 		l = l+1;
      454 		if items > limit
      455 		then	call semantic_translator$abort(264,s);
      456 		stack(l) = q;
      457 
      458 		goto next;
      459 
      460 action(2):
      461 		/* difficult case -- initial value is a list */
      462 
      463 		temporary_reqd = "1"b;
      464 
      465 		numb = null;
      466 		c_numb = 0;
      467 		q = assign_initial(v,numb,c_numb,"0"b,"0"b);
      468 
      469 		if t->node.type=token_node
      470 		then	if t->token.type=dec_integer
      471 			then	n = token_to_binary(t);
      472 			else	check_range = "0"b;
      473 		else	check_range = "0"b;
      474 
      475 		if n^=0
      476 		&  numb=null
      477 		then	c_numb = c_numb*n;
      478 		else	if numb=null
      479 			then	numb=multf(declare_constant$integer(c_numb),t);
      480 			else	numb = multf(numb,t);
      481 
      482 		if count=null
      483 		&  numb=null
      484 		then	c_count = c_count+c_numb;
      485 		else	if count=null
      486 			then	if c_count=0
      487 				then	count = numb;
      488 				else do;
      489 					count = addf(declare_constant$integer(c_count),numb);
      490 					c_count = 0;
      491 				end;
      492 			else	if c_numb=0
      493 				then	count = addf(count,numb);
      494 				else	count = addf(count,declare_constant$integer(c_numb));
      495 
      496 		q1 = create_operator(loop,5);
      497 		q1->operand(1) = q;
      498 		q1->operand(2) = declare_integer(blk);
      499 		q1->operand(3) = one;
      500 		q1->operand(4) = t;
      501 
      502 		items = items + 1;
      503 		l = l+1;
      504 		if items > limit
      505 		then	call semantic_translator$abort(264,s);
      506 		stack(l) = q1;
      507 
      508 next:
      509 	end;
      510 
      511 /* create a join of everything generated by this invocation of assign_initial. */
      512 
      513 	q = create_operator(join,l);
      514 
      515 	do i = 1 to l;
      516 		q->operand(i) = stack(i);
      517 	end;
      518 
      519 	if check_range
      520 	then	if constant_extents
      521 		then	if count=null
      522 			&  c_count^=total_elements
      523 			then	call semantic_translator$abort(292,s);
      524 
      525 	return(q);
      526 
      527 	end assign_initial;
      528 
      529 /* subroutine to make an assignment or arithmetic operators. */
      530 
      531 assignf: proc(v,e) returns(ptr);
      532 
      533 dcl	(v,e,q) ptr;
      534 dcl	opcode bit(9) aligned;
      535 
      536 	if e=null
      537 	then	q = create_operator(nop,0);
      538 	else do;
      539 		q = create_operator(assign,2);
      540 		q->operand(1) = v;
      541 		q->operand(2) = e;
      542 	end;
      543 
      544 	go to exit;
      545 
      546 addf: entry(v,e) returns(ptr);
      547 
      548 	opcode = add;
      549 	go to common;
      550 
      551 subf: entry(v,e) returns(ptr);
      552 
      553 	opcode = sub;
      554 	go to common;
      555 
      556 multf: entry(v,e) returns(ptr);
      557 
      558 	opcode = mult;
      559 
      560 common:
      561 	q = create_operator(opcode,3);
      562 	q->operand(2) = v;
      563 	q->operand(3) = e;
      564 
      565 exit:
      566 	return(q);
      567 
      568 	end;
      569 
      570 /* subroutine to make a statement in the prologue or main code sequence. */
      571 
      572 make_statement: proc(type,e) returns(ptr);
      573 
      574 dcl	(e,p) ptr;
      575 dcl	type bit(9) aligned;
      576 
      577 	if s->symbol.based | s->symbol.controlled
      578 	then do;
      579 		p  ,
      580 		stat = create_statement(type,stat,null,(stat->statement.prefix));
      581 		p->statement.root = copy_expression((e));
      582 		p->statement.generated = "1"b;
      583 	end;
      584 	else do;
      585 		p = create_statement$prologue(type,blk,null,(blk->block.prefix));
      586 		p->statement.root = copy_expression((e));
      587 	end;
      588 
      589 	return(p);
      590 
      591 	end;
      592 
      593 link_father:	proc();
      594 
      595 dcl	(i,count) fixed bin(15);
      596 
      597 dcl	(p,q) ptr;
      598 
      599 	count = 0;
      600 
      601 	do p = s->symbol.father repeat p->symbol.father while(p^=null);
      602 		count = count+1;
      603 	end;
      604 
      605 	r->reference.length  ,
      606 	q = create_list(count);
      607 	p = s->symbol.father;
      608 
      609 	do i=1 to count;
      610 		q->element(i) = p->symbol.token;
      611 		p = p->symbol.father;
      612 	end;
      613 
      614 	end link_father;
      615 
  1     1 /* BEGIN INCLUDE FILE ... semant.incl.pl1 */
  1     2 
  1     3 /* Modified: 30 Aug 1979 by PCK to fix 1804 and 1823 */
  1     4 /* Modified: 26 Aug 1979 by PCK to implement by name assignment */
  1     5 
  1     6 
  1     7 declare	alloc_semantics	entry(pointer,pointer,pointer);
  1     8 			/* parameter 1:	(input)	block node pointer		*/
  1     9 			/* parameter 2:	(input)	statement node pointer	*/
  1    10 			/* parameter 3:	(in/out)	tree pointer		*/
  1    11 
  1    12 declare	alloc_semantics$init_only entry(pointer,pointer,pointer);
  1    13 			/* parameter 1:	(input)	qualifier pointer		*/
  1    14 			/* parameter 2:	(input)	statement node pointer	*/
  1    15 			/* parameter 3:	(input)	symbol node pointer		*/
  1    16 
  1    17 declare	builtin		entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  1    18 			returns(pointer);
  1    19 			/* parameter 1:	(input)	block node pointer		*/
  1    20 			/* parameter 2:	(input)	statement node pointer	*/
  1    21 			/* parameter 3:	(input)	tree pointer		*/
  1    22 			/* parameter 4:	(input)	subscript pointer		*/
  1    23 			/* parameter 5:	(input)	builtin symbol node pointer	*/
  1    24 			/* parameter 6:	(in/out)	context			*/
  1    25 			/* return:	(output)	tree pointer		*/
  1    26 
  1    27 declare	check_star_extents	entry(pointer,pointer);
  1    28 			/* parameter 1:	(input) symbol node of procedure	*/
  1    29 			/* parameter 2:	(input) argument list pointer		*/
  1    30 
  1    31 declare	compare_declaration	entry(pointer,pointer,bit(1) aligned) reducible
  1    32 			returns(bit(1) aligned);
  1    33 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  1    34 			/* parameter 2:	(input)	symbol node ptr	*/
  1    35 			/* parameter 3:	(input)	"1"b if aligned attribute ignored for string	*/
  1    36 			/* return:	(output)	compare bit		*/
  1    37 
  1    38 declare	context_processor	entry(pointer,label);
  1    39 			/* parameter 1:	(input)	root block node pointer	*/
  1    40 
  1    41 declare	declare		entry(pointer);
  1    42 			/* parameter 1:	(input)	symbol node pointer		*/
  1    43 
  1    44 declare	declare_structure	entry(pointer);
  1    45 			/* parameter 1:	(input)	symbol node pointer		*/
  1    46 
  1    47 declare	defined_reference	entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  1    48 			returns(pointer);
  1    49 			/* parameter 1:	(input)	block node pointer		*/
  1    50 			/* parameter 2:	(input)	statement node pointer	*/
  1    51 			/* parameter 3:	(input)	tree pointer		*/
  1    52 			/* parameter 4:	(input)	subscript list pointer or null*/
  1    53 			/* parameter 5:	(input)	symbol node pointer		*/
  1    54 			/* parameter 6:	(in/out)	context			*/
  1    55 			/* return:	(output)	tree pointer		*/
  1    56 
  1    57 declare	do_semantics	entry(pointer,pointer,pointer);
  1    58 			/* parameter 1:	(input)	block node pointer		*/
  1    59 			/* parameter 2:	(input)	statement node pointer	*/
  1    60 			/* parameter 3:	(input)	tree pointer		*/
  1    61 
  1    62 declare	expand_assign	entry(pointer,pointer,pointer,bit(36) aligned,pointer)
  1    63 			returns(pointer);
  1    64 			/* parameter 1:	(input)	block node pointer		*/
  1    65 			/* parameter 2:	(input)	statement node pointer	*/
  1    66 			/* parameter 3:	(input)	tree pointer		*/
  1    67 			/* parameter 4:	(in/out)	context			*/
  1    68 			/* parameter 5:	(input)	aggregate reference node ptr	*/
  1    69 			/* return:	(output)	tree pointer		*/
  1    70 
  1    71 declare	expand_by_name	entry(pointer,pointer,pointer);
  1    72 			/* parameter 1:	(input)	block node pointer		*/
  1    73 			/* parameter 2:	(input)	statement node pointer	*/
  1    74 			/* parameter 3:	(input/output)	tree pointer		*/
  1    75 
  1    76 declare	expand_infix	entry(pointer,pointer,pointer,bit(36) aligned)
  1    77 			returns(pointer);
  1    78 			/* parameter 1:	(input)	block node pointer		*/
  1    79 			/* parameter 2:	(input)	statement node pointer	*/
  1    80 			/* parameter 3:	(input)	tree pointer		*/
  1    81 			/* parameter 4:	(in/out)	context			*/
  1    82 			/* return:	(output)	tree pointer		*/
  1    83 
  1    84 declare	expand_initial	entry(pointer,pointer,pointer);
  1    85 			/* parameter 1:	(input)	symbol node pointer		*/
  1    86 			/* parameter 2:	(input)	statement node pointer	*/
  1    87 			/* parameter 3:	(input)	locator			*/
  1    88 
  1    89 declare	expand_prefix	entry(pointer,pointer,pointer,bit(36) aligned)
  1    90 			returns(pointer);
  1    91 			/* parameter 1:	(input)	block node pointer		*/
  1    92 			/* parameter 2:	(input)	statement node pointer	*/
  1    93 			/* parameter 3:	(input)	tree pointer		*/
  1    94 			/* parameter 4:	(in/out)	context			*/
  1    95 			/* return:	(output)	tree pointer		*/
  1    96 
  1    97 declare	expand_primitive	entry(pointer,pointer,pointer,bit(36) aligned)
  1    98 			returns(pointer);
  1    99 			/* parameter 1:	(input)	block node pointer		*/
  1   100 			/* parameter 2:	(input)	statement node pointer	*/
  1   101 			/* parameter 3:	(input)	tree pointer		*/
  1   102 			/* parameter 4:	(input)	context			*/
  1   103 			/* return:	(output)	tree pointer		*/
  1   104 
  1   105 declare	expression_semantics entry(pointer,pointer,pointer,bit(36) aligned)
  1   106 			returns(pointer);
  1   107 			/* parameter 1:	(input)	block node pointer		*/
  1   108 			/* parameter 2:	(input)	statement node pointer	*/
  1   109 			/* parameter 3:	(input)	tree pointer		*/
  1   110 			/* parameter 4:	(in/out)	context			*/
  1   111 			/* return:	(output)	tree pointer		*/
  1   112 
  1   113 declare	fill_refer	entry(pointer,pointer,bit(1) aligned)
  1   114 			returns(pointer);
  1   115 			/* parameter 1:	(input)	null,ref node,op node ptr */
  1   116 			/* parameter 2:	(input)	null,ref node,op node ptr */
  1   117 			/* parameter 3:	(input)	copy switch for param 2 */
  1   118 			/* return:	(output)	ptr to processed tree */
  1   119 
  1   120 declare	io_data_list_semantics$format_list_semantics entry(pointer,pointer,pointer);
  1   121 			/* parameter 1:	(input)	block node pointer		*/
  1   122 			/* parameter 2:	(input)	statement node pointer	*/
  1   123 			/* parameter 3:	(in/out)	tree pointer		*/
  1   124 
  1   125 declare	function		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   126 			returns(pointer);
  1   127 			/* parameter 1:	(input)	block node pointer		*/
  1   128 			/* parameter 2:	(input)	statement node pointer	*/
  1   129 			/* parameter 3:	(input)	tree pointer		*/
  1   130 			/* parameter 4:	(input)	symbol node pointer		*/
  1   131 			/* parameter 5:	(in/out)	context			*/
  1   132 			/* return:	(output)	tree pointer		*/
  1   133 
  1   134 declare	generic_selector	entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   135 			returns(pointer);
  1   136 			/* parameter 1:	(input)	block node pointer	*/
  1   137 			/* parameter 2:	(input)	statement node pointer	*/
  1   138 			/* parameter 3:	(input)	tree pointer	*/
  1   139 			/* parameter 4:	(input)	pointer to argument list	*/
  1   140 			/* parameter 5:	(in/out)	context		*/
  1   141 			/* return:	(output)	tree pointer	*/
  1   142 
  1   143 declare	io_data_list_semantics entry(pointer,pointer,pointer);
  1   144 			/* parameter 1:	(input)	block node pointer		*/
  1   145 			/* parameter 2:	(input)	statement node pointer	*/
  1   146 			/* parameter 3:	(input)	operator node pointer	*/
  1   147 
  1   148 declare	io_semantics	entry(pointer,pointer,pointer);
  1   149 			/* parameter 1:	(input)	block node pointer		*/
  1   150 			/* parameter 2:	(input)	statement node pointer	*/
  1   151 			/* parameter 3:	(input)	tree pointer		*/
  1   152 
  1   153 declare	lookup		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   154 			returns(bit(1) aligned);
  1   155 			/* parameter 1:	(input)	block node pointer		*/
  1   156 			/* parameter 2:	(input)	stmnt|symbol node pointer	*/
  1   157 			/* parameter 3:	(input)	token or reference node ptr	*/
  1   158 			/* parameter 4:	(output)	symbol node pointer		*/
  1   159 			/* parameter 5:	(in/out)	context			*/
  1   160 			/* return:	(output)	symbol found bit		*/
  1   161 
  1   162 declare	make_non_quick	entry(pointer, bit (36) aligned);
  1   163 			/* parameter 1:	(input)	tree pointer	*/
  1   164 			/* parameter 2:	(input)	reason why being made nonquick */
  1   165 
  1   166 declare	match_arguments	entry(pointer,pointer) reducible
  1   167 			returns(bit(1) aligned);
  1   168 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  1   169 			/* parameter 2:	(input)	reference or symbol node ptr	*/
  1   170 			/* return:	(output)	compare bit		*/
  1   171 
  1   172 declare	offset_adder	entry(pointer,fixed binary(31),fixed binary(3),bit(1) aligned,
  1   173 			      pointer,fixed binary(31),fixed binary(3),bit(1) aligned,bit(1));
  1   174 			/* parameter 1:	(in/out)	tree pointer		*/
  1   175 			/* parameter 2:	(in/out)	constant size		*/
  1   176 			/* parameter 3:	(in/out)	units			*/
  1   177 			/* parameter 4:	(in/out) 	ON if units ^= word_, but tree in words	*/
  1   178 			/* parameter 5:	(input)	tree pointer		*/
  1   179 			/* parameter 6:	(input)	constant size		*/
  1   180 			/* parameter 7:	(input)	units			*/
  1   181 			/* parameter 8:	(input)	ON if units ^= word_, but tree in words	*/
  1   182 			/* parameter 9:	(input)	ON if should not improve units	*/
  1   183 
  1   184 declare	operator_semantics	entry(pointer,pointer,pointer,bit(36) aligned)
  1   185 			returns(pointer);
  1   186 			/* parameter 1:	(input)	block node pointer		*/
  1   187 			/* parameter 2:	(input)	statement node pointer	*/
  1   188 			/* parameter 3:	(input)	tree pointer		*/
  1   189 			/* parameter 4:	(in/out)	context			*/
  1   190 			/* return:	(output)	tree pointer		*/
  1   191 
  1   192 declare	propagate_bit	entry(pointer,fixed binary(15));
  1   193 			/* parameter 1:	(input)	symbol node pointer		*/
  1   194 			/* parameter 2:	(input)	attribute number		*/
  1   195 
  1   196 declare	semantic_translator$call_es entry(pointer,pointer,pointer,label,bit(1) aligned)
  1   197 			returns(pointer);
  1   198 			/* parameter 1:	(input)	block ptr	*/
  1   199 			/* parameter 2:	(input)	statement ptr	*/
  1   200 			/* parameter 3:	(input)	tree ptr	*/
  1   201 			/* parameter 4:	(input)	failure label	*/
  1   202 			/* parameter 5:	(input)	"1"b -- convert to integer	*/
  1   203 			/* return:	(output)	tree ptr		*/
  1   204 
  1   205 declare	simplify_expression	entry(pointer,fixed bin,bit(1)aligned);
  1   206 			/* parameter 1:	(in/out)	tree pointer		*/
  1   207 			/* parameter 2:	(output)	value of constant, if the entire tree
  1   208*						is simplified		*/
  1   209 			/* parameter 3:	(output)	bit indicating if the tree has
  1   210*						been simplified		*/
  1   211 
  1   212 declare	simplify_offset	entry(pointer,bit(36) aligned);
  1   213 			/* parameter 1:	(input)	reference node pointer	*/
  1   214 			/* parameter 2:	(input)	context			*/
  1   215 
  1   216 declare	subscripter	entry(pointer,pointer,pointer,pointer,pointer)
  1   217 			returns(pointer);
  1   218 			/* parameter 1:	(input)	block node pointer		*/
  1   219 			/* parameter 2:	(input)	statement node pointer	*/
  1   220 			/* parameter 3:	(input)	tree pointer		*/
  1   221 			/* parameter 4:	(in/out)	subscript list pointer	*/
  1   222 			/* parameter 5:	(input)	symbol node pointer		*/
  1   223 			/* return:	(output)	reference node pointer	*/
  1   224 
  1   225 declare	validate		entry(pointer);
  1   226 			/* parameter 1:	(input)	symbol node pointer		*/
  1   227 
  2     1 /****^  *********************************************************
  2     2*        *                                                       *
  2     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  2     4*        *                                                       *
  2     5*        ********************************************************* */
  2     6 
  2     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  2     8 
  2     9 
  2    10 /****^  HISTORY COMMENTS:
  2    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  2    12*     install(89-07-31,MR12.3-1066):	
  2    13*     Removed the obsolete parameter source_line from the dcl of error_().
  2    14*                                                   END HISTORY COMMENTS */
  2    15 
  2    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  2    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  2    18* */
  2    19 
  2    20 declare	adjust_count	entry(pointer);
  2    21 			/* parameter 1:	(input)	any node pointer		*/
  2    22 
  2    23 declare	bindec		entry(fixed bin(31)) reducible
  2    24 			returns(character(12) aligned);
  2    25 			/* parameter 1:	(input)	bin value			*/
  2    26 			/* return:	(output)	character value with blanks	*/
  2    27 
  2    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  2    29 			returns(character(12) aligned varying);
  2    30 			/* parameter 1:	(input)	binary value		*/
  2    31 			/* return:	(output)	char value without blanks	*/
  2    32 
  2    33 declare	binoct		entry(fixed bin(31)) reducible
  2    34 			returns(char(12) aligned);
  2    35 			/* parameter 1:	(input)	binary value		*/
  2    36 			/* return:	(output)	char value with blanks	*/
  2    37 
  2    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  2    39 			returns(char(12) aligned);
  2    40 			/* parameter 1:	(input)	binary value		*/
  2    41 			/* return:	(output)	right-aligned char value	*/
  2    42 
  2    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  2    44 			returns(char(12) varying aligned);
  2    45 			/* parameter 1:	(input)	binary value		*/
  2    46 			/* returns:	(output)	char value without blanks	*/
  2    47 
  2    48 declare	compare_expression	entry(pointer,pointer) reducible
  2    49 			returns(bit(1) aligned);
  2    50 			/* parameter 1:	(input)	any node pointer		*/
  2    51 			/* parameter 2:	(input)	any node pointer		*/
  2    52 			/* return:	(output)	compare bit		*/
  2    53 
  2    54 declare	constant_length	entry (pointer, fixed bin (71))
  2    55 			returns (bit (1) aligned);
  2    56 			/* parameter 1:	(input)	reference node pointer	*/
  2    57 			/* parameter 2:	(input)	value of constant length	*/
  2    58 			/* return:	(output)	"1"b if constant length	*/
  2    59 
  2    60 declare	convert		entry(pointer,bit(36) aligned)
  2    61 			returns(pointer);
  2    62 			/* parameter 1:	(input)	any node pointer		*/
  2    63 			/* parameter 2:	(input)	target type		*/
  2    64 			/* return:	(output)	target value tree pointer	*/
  2    65 
  2    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  2    67 			returns(pointer);
  2    68 			/* parameter 1:	(input)	any node pointer		*/
  2    69 			/* parameter 2:	(input)	target type		*/
  2    70 			/* return:	(output)	target value tree pointer	*/
  2    71 
  2    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  2    73 			returns(pointer);
  2    74 			/* parameter 1:	(input)	any node pointer		*/
  2    75 			/* parameter 2:	(input)	target type		*/
  2    76 			/* return:	(output)	target value tree pointer	*/
  2    77 
  2    78 declare	convert$validate	entry(pointer,pointer);
  2    79 			/* parameter 1:	(input)	source value tree pointer	*/
  2    80 			/* parameter 2:	(input)	target reference node pointer	*/
  2    81 
  2    82 declare	convert$to_target_fb entry(pointer,pointer)
  2    83 			returns(pointer);
  2    84 			/* parameter 1:	(input)	source value tree pointer	*/
  2    85 			/* parameter 2:	(input)	target reference node pointer	*/
  2    86 			/* return:	(output)	target value tree pointer	*/
  2    87 
  2    88 declare	convert$to_target	entry(pointer,pointer)
  2    89 			returns(pointer);
  2    90 			/* parameter 1:	(input)	source value tree pointer	*/
  2    91 			/* parameter 2:	(input)	target reference node pointer	*/
  2    92 			/* return:	(output)	target value tree pointer	*/
  2    93 
  2    94 declare	copy_expression	entry(pointer unaligned)
  2    95 			returns(pointer);
  2    96 			/* parameter 1:	(input)	any node pointer		*/
  2    97 			/* return:	(output)	any node pointer		*/
  2    98 
  2    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  2   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  2   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  2   102 
  2   103 declare	copy_unique_expression entry(pointer)
  2   104 			returns(pointer);
  2   105 			/* parameter 1:	(input)	any node pointer		*/
  2   106 			/* return:	(output)	any node pointer		*/
  2   107 
  2   108 declare	create_array	entry()
  2   109 			returns(pointer);
  2   110 			/* return:	(output)	array node pointer		*/
  2   111 
  2   112 declare	create_block	entry(bit(9) aligned,pointer)
  2   113 			returns(pointer);
  2   114 			/* parameter 1:	(input)	block type		*/
  2   115 			/* parameter 2:	(input)	father block node pointer	*/
  2   116 			/* return:	(output)	block node pointer		*/
  2   117 
  2   118 declare	create_bound	entry()
  2   119 			returns(pointer);
  2   120 			/* return:	(output)	bound node pointer		*/
  2   121 
  2   122 declare	create_context	entry(pointer,pointer)
  2   123 			returns(pointer);
  2   124 			/* parameter 1:	(input)	block node pointer		*/
  2   125 			/* parameter 2:	(input)	token pointer		*/
  2   126 			/* return:	(output)	context node pointer	*/
  2   127 
  2   128 declare	create_cross_reference entry()
  2   129 			returns(pointer);
  2   130 			/* return:	(output)	cross reference node pointer	*/
  2   131 
  2   132 declare	create_default	entry
  2   133 			returns(pointer);
  2   134 			/* return:	(output)	default node pointer	*/
  2   135 
  2   136 declare	create_identifier	entry()
  2   137 			returns(pointer);
  2   138 			/* return:	(output)	token node pointer		*/
  2   139 
  2   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  2   141 			returns(pointer);
  2   142 			/* parameter 1:	(input)	block node pointer		*/
  2   143 			/* parameter 2:	(input)	token node pointer		*/
  2   144 			/* parameter 3:	(input)	declare type		*/
  2   145 			/* return:	(output)	label node pointer		*/
  2   146 
  2   147 declare	create_list	entry(fixed bin(15))
  2   148 			returns(pointer);
  2   149 			/* parameter 1:	(input)	number of list elements	*/
  2   150 			/* return:	(output)	list node pointer		*/
  2   151 
  2   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  2   153 			returns(pointer);
  2   154 			/* parameter 1:	(input)	operator type		*/
  2   155 			/* parameter 2:	(input)	number of operands		*/
  2   156 			/* return:	(output)	operator node pointer	*/
  2   157 
  2   158 declare	create_reference	entry(pointer)
  2   159 			returns(pointer);
  2   160 			/* parameter 1:	(input)	symbol node pointer		*/
  2   161 			/* return:	(output)	reference node pointer	*/
  2   162 
  2   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   164 			returns(pointer);
  2   165 			/* parameter 1:	(input)	statement type		*/
  2   166 			/* parameter 2:	(input)	block node pointer		*/
  2   167 			/* parameter 3:	(input)	label node pointer		*/
  2   168 			/* parameter 4:	(input)	conditions		*/
  2   169 			/* return:	(output)	statement node pointer	*/
  2   170 
  2   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   172 			returns(pointer);
  2   173 			/* parameter 1:	(input)	statement type		*/
  2   174 			/* parameter 2:	(input)	block node pointer		*/
  2   175 			/* parameter 3:	(input)	label node pointer		*/
  2   176 			/* parameter 4:	(input)	conditions		*/
  2   177 			/* return:	(output)	statement node pointer	*/
  2   178 
  2   179 declare	create_storage	entry(fixed bin(15))
  2   180 			returns(pointer);
  2   181 			/* parameter 1:	(input)	number of words		*/
  2   182 			/* return:	(output)	storage block pointer	*/
  2   183 
  2   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  2   185 			returns(pointer);
  2   186 			/* parameter 1:	(input)	block node pointer		*/
  2   187 			/* parameter 2:	(input)	token node pointer		*/
  2   188 			/* parameter 3:	(input)	declare type		*/
  2   189 			/* return:	(output)	symbol node pointer		*/
  2   190 
  2   191 declare	create_token	entry (character (*), bit (9) aligned)
  2   192 			returns (ptr);
  2   193 			/* parameter 1:	(input)	token string		*/
  2   194 			/* parameter 2:	(input)	token type		*/
  2   195 			/* return:	(output)	token node ptr		*/
  2   196 
  2   197 declare	create_token$init_hash_table entry ();
  2   198 
  2   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  2   200 			returns (ptr);
  2   201 			/* parameter 1:	(input)	token string		*/
  2   202 			/* parameter 2:	(input)	token type		*/
  2   203 			/* parameter 3:	(input)	protected flag		*/
  2   204 			/* return:	(output)	token node ptr		*/
  2   205 
  2   206 declare	decbin		entry(character(*) aligned) reducible
  2   207 			returns(fixed bin(31));
  2   208 			/* parameter 1:	(input)	decimal character string	*/
  2   209 			/* return:	(output)	binary value		*/
  2   210 
  2   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  2   212 			returns(pointer);
  2   213 			/* parameter 1:	(input)	value			*/
  2   214 			/* parameter 2:	(input)	type			*/
  2   215 			/* parameter 3:	(input)	size			*/
  2   216 			/* parameter 4:	(input)	scale			*/
  2   217 			/* return:	(output)	reference node pointer	*/
  2   218 
  2   219 declare	declare_constant$bit entry(bit(*) aligned)
  2   220 			returns(pointer);
  2   221 			/* parameter 1:	(input)	bit			*/
  2   222 			/* return:	(output)	reference node pointer	*/
  2   223 
  2   224 declare	declare_constant$char entry(character(*) aligned)
  2   225 			returns(pointer);
  2   226 			/* parameter 1:	(input)	character			*/
  2   227 			/* return:	(output)	reference node pointer	*/
  2   228 
  2   229 declare	declare_constant$desc entry(bit(*) aligned)
  2   230 			returns(pointer);
  2   231 			/* parameter 1:	(input)	descriptor bit value	*/
  2   232 			/* return:	(output)	reference node pointer	*/
  2   233 
  2   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  2   235 			returns(pointer);
  2   236 			/* parameter 1:	(input)	integer			*/
  2   237 			/* return:	(output)	reference node pointer	*/
  2   238 
  2   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   240 			returns(pointer);
  2   241 			/* parameter 1:	(input)	block node pointer		*/
  2   242 			/* parameter 2:	(input)	statement node pointer	*/
  2   243 			/* parameter 3:	(input)	symbol node pointer		*/
  2   244 			/* parameter 4:	(input)	loc pointer		*/
  2   245 			/* parameter 5:	(input)	array descriptor bit
  2   246*						cross_section bit	*/
  2   247 			/* return:	(output)	reference node pointer	*/
  2   248 
  2   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   250 			returns(pointer);
  2   251 			/* parameter 1:	(input)	block node pointer	*/
  2   252 			/* parameter 2:	(input)	statement node pointer 	*/
  2   253 			/* parameter 3:	(input)	symbol node pointer	*/
  2   254 			/* parameter 4:	(input)	loc pointer	*/
  2   255 			/* parameter 5:	(input)	array descriptor bit
  2   256*						cross_section bit	*/
  2   257 			/* return:	(output)	reference node pointer	*/
  2   258 
  2   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   260 			returns(pointer);
  2   261 			/* parameter 1:	(input)	block node pointer		*/
  2   262 			/* parameter 2:	(input)	statement node pointer	*/
  2   263 			/* parameter 3:	(input)	symbol node pointer		*/
  2   264 			/* parameter 4:	(input)	loc pointer		*/
  2   265 			/* parameter 5:	(input)	array descriptor bit
  2   266*						cross_section bit	*/
  2   267 			/* return:	(output)	reference node pointer	*/
  2   268 
  2   269 declare	declare_integer	entry(pointer)
  2   270 			returns(pointer);
  2   271 			/* parameter 1:	(input)	block node pointer		*/
  2   272 			/* return:	(output)	reference node pointer 	*/
  2   273 
  2   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  2   275 			/* parameter 1:	(input)	picture string		*/
  2   276 			/* parameter 2:	(input)	symbol node pointer		*/
  2   277 			/* parameter 3:	(output)	error code, if any		*/
  2   278 
  2   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  2   280 			returns(pointer);
  2   281 			/* parameter 1:	(input)	picture string		*/
  2   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  2   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  2   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  2   285 			/* return:	(output)	reference node pointer	*/
  2   286 
  2   287 declare	declare_pointer	entry(pointer)
  2   288 			returns(pointer);
  2   289 			/* parameter 1:	(input)	block node pointer		*/
  2   290 			/* return:	(output)	reference node pointer	*/
  2   291 
  2   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  2   293 			returns(pointer);
  2   294 			/* parameter 1:	(input)	type			*/
  2   295 			/* parameter 2:	(input)	precision			*/
  2   296 			/* parameter 3:	(input)	scale			*/
  2   297 			/* parameter 4:	(input)	length			*/
  2   298 			/* return:	(output)	reference node pointer	*/
  2   299 
  2   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  2   301 			returns(char(120) varying);
  2   302 			/* parameter 1:	(input)	node pointer		*/
  2   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   304 			/* return:	(output)	source line id		*/
  2   305 
  2   306 declare	decode_source_id	entry(
  3     1 			1 structure unaligned,
  3     2 			  2 /* file_number */	bit(8),
  3     3 			  2 /* line_number */	bit(14),
  3     4 			  2 /* stmt_number */	bit(5),
  2   307 
  2   308 			bit(1) aligned)
  2   309 			returns(char(120) varying);
  2   310 			/* parameter 1:	(input)	source id			*/
  2   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   312 			/* return:	(output)	source line id		*/
  2   313 
  2   314 declare	error		entry(fixed bin(15),pointer,pointer);
  2   315 			/* parameter 1:	(input)	error number		*/
  2   316 			/* parameter 2:	(input)	statement node pointer or null*/
  2   317 			/* parameter 3:	(input)	token node pointer 		*/
  2   318 
  2   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  2   320 			/* parameter 1:	(input)	error number		*/
  2   321 			/* parameter 2:	(input)	statement node pointer or null*/
  2   322 			/* parameter 3:	(input)	token node pointer 		*/
  2   323 
  2   324 declare	error_		entry(fixed bin(15),
  4     1 			1 structure unaligned,
  4     2 			  2 /* file_number */	bit(8),
  4     3 			  2 /* line_number */	bit(14),
  4     4 			  2 /* stmt_number */	bit(5),
  2   325 
  2   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  2   327 			/* parameter 1:	(input)	error number		*/
  2   328 			/* parameter 2:	(input)	statement id		*/
  2   329 			/* parameter 3:	(input)	any node pointer		*/
  2   330 			/* parameter 4:	(input)	source segment		*/
  2   331 			/* parameter 5:	(input)	source starting character	*/
  2   332 			/* parameter 6:	(input)	source length		*/
  2   333 
  2   334 declare	error_$no_text	entry(fixed bin(15),
  5     1 			1 structure unaligned,
  5     2 			  2 /* file_number */	bit(8),
  5     3 			  2 /* line_number */	bit(14),
  5     4 			  2 /* stmt_number */	bit(5),
  2   335 
  2   336 			pointer);
  2   337 			/* parameter 1:	(input)	error number		*/
  2   338 			/* parameter 2:	(input)	statement id		*/
  2   339 			/* parameter 3:	(input)	any node pointer		*/
  2   340 
  2   341 declare	error_$initialize_error entry();
  2   342 
  2   343 declare	error_$finish	entry();
  2   344 
  2   345 declare	free_node		entry(pointer);
  2   346 			/* parameter 1:	any node pointer			*/
  2   347 
  2   348 declare	get_array_size	entry(pointer,fixed bin(3));
  2   349 			/* parameter 1:	(input)	symbol node pointer		*/
  2   350 			/* parameter 2:	(input)	units			*/
  2   351 
  2   352 declare	get_size		entry(pointer);
  2   353 			/* parameter 1:	(input)	symbol node pointer		*/
  2   354 
  2   355 declare	merge_attributes	external entry(pointer,pointer)
  2   356 			returns(bit(1) aligned);
  2   357 			/* parameter 1:	(input)	target symbol node pointer */
  2   358 			/* parameter 2:	(input)	source symbol node pointer */
  2   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  2   360 
  2   361 declare	optimizer		entry(pointer);
  2   362 			/* parameter 1:	(input)	root pointer		*/
  2   363 
  2   364 declare	parse_error	entry(fixed bin(15),pointer);
  2   365 			/* parameter 1:	(input)	error number		*/
  2   366 			/* parameter 2:	(input)	any node pointer		*/
  2   367 
  2   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  2   369 			/* parameter 1:	(input)	error number		*/
  2   370 			/* parameter 2:	(input)	any node pointer		*/
  2   371 
  2   372 declare	pl1_error_print$write_out
  2   373 			entry(fixed bin(15),
  6     1 			1 structure unaligned,
  6     2 			  2 /* file_number */	bit(8),
  6     3 			  2 /* line_number */	bit(14),
  6     4 			  2 /* stmt_number */	bit(5),
  2   374 
  2   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  2   376 			/* parameter 1:	(input)	error number		*/
  2   377 			/* parameter 2:	(input)	statement identification	*/
  2   378 			/* parameter 3:	(input)	any node pointer		*/
  2   379 			/* parameter 4:	(input)	source segment		*/
  2   380 			/* parameter 5:	(input)	source character index	*/
  2   381 			/* parameter 6:	(input)	source length		*/
  2   382 			/* parameter 7:	(input)	source line		*/
  2   383 
  2   384 declare	pl1_error_print$listing_segment
  2   385 			entry(fixed bin(15),
  7     1 			1 structure unaligned,
  7     2 			  2 /* file_number */	bit(8),
  7     3 			  2 /* line_number */	bit(14),
  7     4 			  2 /* stmt_number */	bit(5),
  2   386 
  2   387 			pointer);
  2   388 			/* parameter 1:	(input)	error number		*/
  2   389 			/* parameter 2:	(input)	statement identification	*/
  2   390 			/* parameter 3:	(input)	token node pointer		*/
  2   391 
  2   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  2   393 			/* parameter 1:	(input)	string			*/
  2   394 
  2   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  2   396 			/* parameter 1:	(input)	string			*/
  2   397 
  2   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  2   399 			/* parameter 1:	(input)	string			*/
  2   400 			/* parameter 2:	(input)	string length or 0		*/
  2   401 
  2   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  2   403 			/* parameter 1:	(input)	string			*/
  2   404 			/* parameter 2:	(input)	string length or 0		*/
  2   405 
  2   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  2   407 			/* parameter 1:	(input)	string pointer		*/
  2   408 			/* parameter 2:	(input)	string size		*/
  2   409 
  2   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  2   411 			/* parameter 1:	(input)	string pointer		*/
  2   412 			/* parameter 2:	(input)	string length or 0		*/
  2   413 
  2   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  2   415 			/* parameter 1:	(input)	string			*/
  2   416 			/* parameter 2:	(input)	length			*/
  2   417 
  2   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  2   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  2   420 			/* parameter 2:	(input)	line number		*/
  2   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  2   422 			/* parameter 4:	(input)	number of chars to copy	*/
  2   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  2   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  2   425 
  2   426 declare	refer_extent	entry(pointer,pointer);
  2   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  2   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  2   429 
  2   430 declare	reserve$clear	entry()
  2   431 			returns(pointer);
  2   432 			/* return:	(output)	pointer			*/
  2   433 
  2   434 declare	reserve$declare_lib	entry(fixed bin(15))
  2   435 			returns(pointer);
  2   436 			/* parameter 1:	(input)	builtin function number	*/
  2   437 			/* return:	(output)	pointer			*/
  2   438 
  2   439 declare	reserve$read_lib	entry(fixed bin(15))
  2   440 			returns(pointer);
  2   441 			/* parameter 1:	(input)	builtin function number	*/
  2   442 			/* return:	(output)	pointer			*/
  2   443 
  2   444 declare	semantic_translator	entry();
  2   445 
  2   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  2   447 			/* parameter 1:	(input)	error number		*/
  2   448 			/* parameter 2:	(input)	any node pointer		*/
  2   449 
  2   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  2   451 			/* parameter 1:	(input)	error number		*/
  2   452 			/* parameter 2:	(input)	any node pointer		*/
  2   453 
  2   454 declare	share_expression	entry(ptr)
  2   455 			returns(ptr);
  2   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  2   457 			/* return:	(output)	tree pointer or null	*/
  2   458 
  2   459 declare	token_to_binary	entry(ptr) reducible
  2   460 			returns(fixed bin(31));
  2   461 			/* parameter 1:	(input)	token node pointer		*/
  2   462 			/* return:	(output)	converted binary value	*/
  2   463 
  2   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
  1   228 
  1   229 /* END INCLUDE FILE ... semant.incl.pl1 */
      616 
  8     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
  8     2 
  8     3 dcl	1 symbol			based aligned,
  8     4 	2 node_type		bit(9) unal,
  8     5 	2 source_id		structure unal,
  8     6 	  3 file_number		bit(8),
  8     7 	  3 line_number		bit(14),
  8     8 	  3 statement_number	bit(5),
  8     9 	2 location		fixed(18) unal unsigned,
  8    10 	2 allocated		bit(1) unal,
  8    11 	2 dcl_type		bit(3) unal,
  8    12 	2 reserved		bit(6) unal,
  8    13 	2 pix			unal,
  8    14 	  3 pic_fixed		bit(1) unal,
  8    15 	  3 pic_float		bit(1) unal,
  8    16 	  3 pic_char		bit(1) unal,
  8    17 	  3 pic_scale		fixed(7) unal,
  8    18 	  3 pic_size		fixed(7) unal,
  8    19 	2 level			fixed(8) unal,
  8    20 	2 boundary		fixed(3) unal,
  8    21 	2 size_units		fixed(3) unal,
  8    22 	2 scale			fixed(7) unal,
  8    23 	2 runtime			bit(18) unal,
  8    24 	2 runtime_offset		bit(18) unal,
  8    25 	2 block_node		ptr unal,
  8    26 	2 token			ptr unal,
  8    27 	2 next			ptr unal,
  8    28 	2 multi_use		ptr unal,
  8    29 	2 cross_references		ptr unal,
  8    30 	2 initial			ptr unal,
  8    31 	2 array			ptr unal,
  8    32 	2 descriptor		ptr unal,
  8    33 	2 equivalence		ptr unal,
  8    34 	2 reference		ptr unal,
  8    35 	2 general			ptr unal,
  8    36 	2 father			ptr unal,
  8    37 	2 brother			ptr unal,
  8    38 	2 son			ptr unal,
  8    39 	2 word_size		ptr unal,
  8    40 	2 bit_size		ptr unal,
  8    41 	2 dcl_size		ptr unal,
  8    42 	2 symtab_size		ptr unal,
  8    43 	2 c_word_size		fixed(24),
  8    44 	2 c_bit_size		fixed(24),
  8    45 	2 c_dcl_size		fixed(24),
  8    46 
  8    47 	2 attributes		structure aligned,
  8    48 	  3 data_type		structure unal,
  8    49 	    4 structure		bit(1) ,
  8    50 	    4 fixed		bit(1),
  8    51 	    4 float		bit(1),
  8    52 	    4 bit			bit(1),
  8    53 	    4 char		bit(1),
  8    54 	    4 ptr			bit(1),
  8    55 	    4 offset		bit(1),
  8    56 	    4 area		bit(1),
  8    57 	    4 label		bit(1),
  8    58 	    4 entry		bit(1),
  8    59 	    4 file		bit(1),
  8    60 	    4 arg_descriptor	bit(1),
  8    61 	    4 storage_block		bit(1),
  8    62 	    4 explicit_packed	bit(1), /* options(packed) */
  8    63 	    4 condition		bit(1),
  8    64 	    4 format		bit(1),
  8    65 	    4 builtin		bit(1),
  8    66 	    4 generic		bit(1),
  8    67 	    4 picture		bit(1),
  8    68 
  8    69 	  3 misc_attributes		structure unal,
  8    70 	    4 dimensioned		bit(1),
  8    71 	    4 initialed		bit(1),
  8    72 	    4 aligned		bit(1),
  8    73 	    4 unaligned		bit(1),
  8    74 	    4 signed		bit(1),
  8    75 	    4 unsigned		bit(1),
  8    76 	    4 precision		bit(1),
  8    77 	    4 varying		bit(1),
  8    78 	    4 local		bit(1),
  8    79 	    4 decimal		bit(1),
  8    80 	    4 binary		bit(1),
  8    81 	    4 real		bit(1),
  8    82 	    4 complex		bit(1),
  8    83 	    4 variable		bit(1),
  8    84 	    4 reducible		bit(1),
  8    85 	    4 irreducible		bit(1),
  8    86 	    4 returns		bit(1),
  8    87 	    4 position		bit(1),
  8    88 	    4 internal		bit(1),
  8    89 	    4 external		bit(1),
  8    90 	    4 like		bit(1),
  8    91 	    4 member		bit(1),
  8    92 	    4 non_varying		bit(1),
  8    93 	    4 options		bit(1),
  8    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
  8    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
  8    96 
  8    97 	  3 storage_class		structure unal,
  8    98 	    4 auto		bit(1),
  8    99 	    4 based		bit(1),
  8   100 	    4 static		bit(1),
  8   101 	    4 controlled		bit(1),
  8   102 	    4 defined		bit(1),
  8   103 	    4 parameter		bit(1),
  8   104 	    4 param_desc		bit(1),
  8   105 	    4 constant		bit(1),
  8   106 	    4 temporary		bit(1),
  8   107 	    4 return_value		bit(1),
  8   108 
  8   109 	  3 file_attributes		structure unal,
  8   110 	    4 print		bit(1),
  8   111 	    4 input		bit(1),
  8   112 	    4 output		bit(1),
  8   113 	    4 update		bit(1),
  8   114 	    4 stream		bit(1),
  8   115 	    4 reserved_1		bit(1),
  8   116 	    4 record		bit(1),
  8   117 	    4 sequential		bit(1),
  8   118 	    4 direct		bit(1),
  8   119 	    4 interactive		bit(1),		/* env(interactive) */
  8   120 	    4 reserved_2		bit(1),
  8   121 	    4 reserved_3		bit(1),
  8   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
  8   123 	    4 keyed		bit(1),
  8   124 	    4 reserved_4		bit(1),
  8   125 	    4 environment		bit(1),
  8   126 
  8   127 	  3 compiler_developed	structure unal,
  8   128 	    4 aliasable		bit(1),
  8   129 	    4 packed		bit(1),
  8   130 	    4 passed_as_arg		bit(1),
  8   131 	    4 allocate		bit(1),
  8   132 	    4 set			bit(1),
  8   133 	    4 exp_extents		bit(1),
  8   134 	    4 refer_extents		bit(1),
  8   135 	    4 star_extents		bit(1),
  8   136 	    4 isub		bit(1),
  8   137 	    4 put_in_symtab		bit(1),
  8   138 	    4 contiguous		bit(1),
  8   139 	    4 put_data		bit(1),
  8   140 	    4 overlayed		bit(1),
  8   141 	    4 error		bit(1),
  8   142 	    4 symtab_processed	bit(1),
  8   143 	    4 overlayed_by_builtin	bit(1),
  8   144 	    4 defaulted		bit(1),
  8   145 	    4 connected		bit(1);
  8   146 
  8   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
      617 
  9     1 /* BEGIN INCLUDE FILE ... boundary.incl.pl1 */
  9     2 
  9     3 /* Modified: 26 Apr 1979 by PCK to implement 4-bit decimal */
  9     4 
  9     5 dcl (	bit_		init(1),
  9     6 	digit_		init(2),
  9     7 	character_	init(3),
  9     8 	half_		init(4),
  9     9 	word_		init(5),
  9    10 	mod2_		init(6),
  9    11 	mod4_		init(7)) fixed bin(3) int static options(constant);
  9    12 
  9    13 /* END INCLUDE FILE ... boundary.incl.pl1 */
      618 
 10     1 /* BEGIN INCLUDE FILE ... system.incl.pl1 */
 10     2 
 10     3 /* Modified: 25 Apr 1979 by PCK to implemnt 4-bit decimal */
 10     4 
 10     5 dcl (	max_p_flt_bin_1			initial(27),
 10     6 	max_p_flt_bin_2			initial(63),
 10     7 	max_p_fix_bin_1			initial(35),
 10     8 	max_p_fix_bin_2			initial(71),
 10     9 
 10    10 	max_p_dec				initial(59),
 10    11 	max_p_bin_or_dec			initial (71),	/* max (max_p_fix_bin_2, max_p_dec) */
 10    12 
 10    13 	min_scale				initial(-128),
 10    14 	max_scale				initial(+127),
 10    15 	max_bit_string			initial(9437184),
 10    16 	max_char_string			initial(1048576),
 10    17 	max_area_size			initial(262144),
 10    18 	min_area_size			initial(28),
 10    19 
 10    20 	max_bit_string_constant		initial (253),	/* max length of bit literals */
 10    21 	max_char_string_constant		initial (254),	/* max length of character literals */
 10    22 	max_identifier_length		initial (256),
 10    23 	max_number_of_dimensions		initial (127),
 10    24 
 10    25 	max_length_precision		initial(24),
 10    26 	max_offset_precision		initial(24),	/* 18 bits for word offset + 6 bits for bit offset */
 10    27 
 10    28 	max_words_per_variable		initial (262144),
 10    29 
 10    30 	bits_per_word			initial(36),
 10    31 	bits_per_double			initial(72),
 10    32 	packed_digits_per_character		initial(2),
 10    33 	characters_per_half			initial(2),
 10    34 	characters_per_word			initial(4),
 10    35 	characters_per_double		initial(8),
 10    36 
 10    37 	bits_per_character			initial(9),
 10    38 	bits_per_half			initial(18),
 10    39 	bits_per_decimal_digit		initial(9),
 10    40 	bits_per_binary_exponent		initial(8),
 10    41 	bits_per_packed_ptr			initial(36),
 10    42 	words_per_packed_pointer		initial(1),
 10    43 
 10    44 	words_per_fix_bin_1			initial(1),
 10    45 	words_per_fix_bin_2			initial(2),
 10    46 	words_per_flt_bin_1			initial(1),
 10    47 	words_per_flt_bin_2			initial(2),
 10    48 	words_per_varying_string_header	initial(1),
 10    49 	words_per_offset			initial(1),
 10    50 	words_per_pointer			initial(2),
 10    51 	words_per_label_var			initial(4),
 10    52 	words_per_entry_var			initial(4),
 10    53 	words_per_file_var			initial(4),
 10    54 	words_per_format			initial(4),
 10    55 	words_per_condition_var		initial(6),
 10    56 
 10    57 	max_index_register_value		initial(262143),
 10    58 	max_signed_index_register_value	initial(131071),
 10    59 
 10    60 	max_signed_xreg_precision		initial(17),
 10    61 	max_uns_xreg_precision		initial(18),
 10    62 
 10    63 	default_area_size			initial(1024),
 10    64 	default_flt_bin_p			initial(27),
 10    65 	default_fix_bin_p			initial(17),
 10    66 	default_flt_dec_p			initial(10),
 10    67           default_fix_dec_p   		initial(7)) fixed bin(31) internal static options(constant);
 10    68 
 10    69 dcl	bits_per_digit			initial(4.5)  fixed bin(31,1) internal static options(constant);
 10    70 
 10    71 dcl (	integer_type		initial("010000000000000000000100000001100000"b),
 10    72 	dec_integer_type		initial("010000000000000000000100000010100000"b),
 10    73 	pointer_type		initial("000001000000000000000100000000000000"b),
 10    74 	real_type			initial("001000000000000000000100000001100000"b),
 10    75 	complex_type		initial("001000000000000000000100000001010000"b),
 10    76 	builtin_type		initial("000000000000000010000000000000000000"b),
 10    77 	storage_block_type		initial("000000000000100000000000000000000000"b),
 10    78 	arg_desc_type		initial("000000000001000000000000000000000000"b),
 10    79 	local_label_var_type	initial("000000001000000000000100000100001000"b),
 10    80 	entry_var_type		initial("000000000100000000000000000000001000"b),
 10    81 	bit_type			initial("000100000000000000000000000000000000"b),
 10    82 	char_type			initial("000010000000000000000000000000000000"b)) bit(36) aligned int static
 10    83 									options(constant);
 10    84 
 10    85 /* END INCLUDE FILE ... system.incl.pl1 */
      619 
 11     1 dcl	1 label			based aligned,
 11     2 	2 node_type		bit(9) unaligned,
 11     3 	2 source_id		structure unaligned,
 11     4 	  3 file_number		bit(8),
 11     5 	  3 line_number		bit(14),
 11     6 	  3 statement_number	bit(5),
 11     7 	2 location		fixed(17) unaligned,
 11     8 	2 allocated		bit(1) unaligned,
 11     9 	2 dcl_type		bit(3) unaligned,
 11    10 	2 reserved		bit(29) unaligned,
 11    11 	2 array			bit(1) unaligned,
 11    12 	2 used_as_format		bit(1) unaligned,
 11    13 	2 used_in_goto		bit(1) unaligned,
 11    14 	2 symbol_table		bit(18) unaligned,
 11    15 	2 low_bound		fixed(17) unaligned,
 11    16 	2 high_bound		fixed(17) unaligned,
 11    17 	2 block_node		ptr unaligned,
 11    18 	2 token			ptr unaligned,
 11    19 	2 next			ptr unaligned,
 11    20 	2 multi_use		ptr unaligned,
 11    21 	2 cross_reference		ptr unaligned,
 11    22 	2 statement		ptr unaligned;
      620 
 12     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
 12     2 
 12     3 dcl	1 reference		based aligned,
 12     4 	2 node_type		bit(9) unaligned,
 12     5 	2 array_ref		bit(1) unaligned,
 12     6 	2 varying_ref		bit(1) unaligned,
 12     7 	2 shared			bit(1) unaligned,
 12     8 	2 put_data_sw		bit(1) unaligned,
 12     9 	2 processed		bit(1) unaligned,
 12    10 	2 units			fixed(3) unaligned,
 12    11 	2 ref_count		fixed(17) unaligned,
 12    12 	2 c_offset		fixed(24),
 12    13 	2 c_length		fixed(24),
 12    14 	2 symbol			ptr unaligned,
 12    15 	2 qualifier		ptr unaligned,
 12    16 	2 offset			ptr unaligned,
 12    17 	2 length			ptr unaligned,
 12    18 	2 subscript_list		ptr unaligned,
 12    19 						/* these fields are used by the 645 code generator */
 12    20 	2 address			structure unaligned,
 12    21 	  3 base			bit(3),
 12    22 	  3 offset		bit(15),
 12    23 	  3 op			bit(9),
 12    24 	  3 no_address		bit(1),
 12    25 	  3 inhibit		bit(1),
 12    26 	  3 ext_base		bit(1),
 12    27 	  3 tag			bit(6),
 12    28 	2 info			structure unaligned,
 12    29 	  3 address_in		structure,
 12    30 	    4 b			dimension(0:7) bit(1),
 12    31 	    4 storage		bit(1),
 12    32 	  3 value_in		structure,
 12    33 	    4 a			bit(1),
 12    34 	    4 q			bit(1),
 12    35 	    4 aq			bit(1),
 12    36 	    4 string_aq		bit(1),
 12    37 	    4 complex_aq		bit(1),
 12    38 	    4 decimal_aq		bit(1),
 12    39 	    4 b			dimension(0:7) bit(1),
 12    40 	    4 storage		bit(1),
 12    41 	    4 indicators		bit(1),
 12    42 	    4 x			dimension(0:7) bit(1),
 12    43 	  3 other			structure,
 12    44 	    4 big_offset		bit(1),
 12    45 	    4 big_length		bit(1),
 12    46 	    4 modword_in_offset	bit(1),
 12    47 	2 data_type		fixed(5) unaligned,
 12    48 	2 bits			structure unaligned,
 12    49 	  3 padded_ref		bit(1),
 12    50 	  3 aligned_ref		bit(1),
 12    51 	  3 long_ref		bit(1),
 12    52 	  3 forward_ref		bit(1),
 12    53 	  3 ic_ref		bit(1),
 12    54 	  3 temp_ref		bit(1),
 12    55 	  3 defined_ref		bit(1),
 12    56 	  3 evaluated		bit(1),
 12    57 	  3 allocate		bit(1),
 12    58 	  3 allocated		bit(1),
 12    59 	  3 aliasable		bit(1),
 12    60 	  3 even			bit(1),
 12    61 	  3 perm_address		bit(1),
 12    62 	  3 aggregate		bit(1),
 12    63 	  3 hit_zero		bit(1),
 12    64 	  3 dont_save		bit(1),
 12    65 	  3 fo_in_qual		bit(1),
 12    66 	  3 hard_to_load		bit(1),
 12    67 	2 relocation		bit(12) unaligned,
 12    68 	2 more_bits		structure unaligned,
 12    69 	  3 substr		bit(1),
 12    70 	  3 padded_for_store_ref	bit(1),
 12    71 	  3 aligned_for_store_ref	bit(1),
 12    72 	  3 mbz			bit(15),
 12    73 	2 store_ins		bit(18) unaligned;
 12    74 
 12    75 /* END INCLUDE FILE ... reference.incl.pl1 */
      621 
 13     1 /* BEGIN INCLUDE FILE ... token.incl.pl1 */
 13     2 
 13     3 dcl	1 token			based aligned,
 13     4 	2 node_type		bit(9) unaligned,
 13     5 	2 type			bit(9) unaligned,
 13     6 	2 loc			bit(18) unaligned,	/* symtab offset for identifiers, "p" flag for constants */
 13     7 	2 declaration		ptr unaligned,
 13     8 	2 next			ptr unaligned,
 13     9 	2 size			fixed(9),
 13    10 	2 string			char(n refer(token.size));
 13    11 
 13    12 /* END INCLUDE FILE ... token.incl.pl1 */
      622 
 14     1 /* BEGIN INCLUDE FILE ... token_types.incl.pl1 */
 14     2 
 14     3 dcl (	no_token		initial("000000000"b),	/*	token types		*/
 14     4 	identifier	initial("100000000"b),
 14     5 	isub		initial("010000000"b),
 14     6 	plus		initial("001000001"b),
 14     7 	minus		initial("001000010"b),
 14     8 	asterisk		initial("001000011"b),
 14     9 	slash		initial("001000100"b),
 14    10 	expon		initial("001000101"b),
 14    11 	not		initial("001000110"b),
 14    12 	and		initial("001000111"b),
 14    13 	or		initial("001001000"b),
 14    14 	cat		initial("001001001"b),
 14    15 	eq		initial("001001010"b),
 14    16 	ne		initial("001001011"b),
 14    17 	lt		initial("001001100"b),
 14    18 	gt		initial("001001101"b),
 14    19 	le		initial("001001110"b),
 14    20 	ge		initial("001001111"b),
 14    21 	ngt		initial("001010000"b),
 14    22 	nlt		initial("001010001"b),
 14    23 	assignment	initial("001010010"b),
 14    24 	colon		initial("001010011"b),
 14    25 	semi_colon	initial("001010100"b),
 14    26 	comma		initial("001010101"b),
 14    27 	period		initial("001010110"b),
 14    28 	arrow		initial("001010111"b),
 14    29 	left_parn		initial("001011000"b),
 14    30 	right_parn	initial("001011001"b),
 14    31 	percent		initial("001011100"b),
 14    32 	bit_string	initial("000100001"b),
 14    33 	char_string	initial("000100010"b),
 14    34 	bin_integer	initial("000110001"b),
 14    35 	dec_integer	initial("000110011"b),
 14    36 	fixed_bin		initial("000110000"b),
 14    37 	fixed_dec		initial("000110010"b),
 14    38 	float_bin		initial("000110100"b),
 14    39 	float_dec		initial("000110110"b),
 14    40 	i_bin_integer	initial("000111001"b),
 14    41 	i_dec_integer	initial("000111011"b),
 14    42 	i_fixed_bin	initial("000111000"b),
 14    43 	i_fixed_dec	initial("000111010"b),
 14    44 	i_float_bin	initial("000111100"b),
 14    45 	i_float_dec	initial("000111110"b)) bit (9) aligned internal static options (constant);
 14    46 
 14    47 dcl (	is_identifier		initial ("100000000"b),	/*	token type masks		*/
 14    48 	is_isub			initial ("010000000"b),
 14    49 	is_delimiter		initial ("001000000"b),
 14    50 	is_constant		initial ("000100000"b),
 14    51 	is_arith_constant		initial ("000010000"b),	/* N.B. not really a mask...s/b "000110000"b */
 14    52 	is_arithmetic_constant	initial ("000110000"b),
 14    53 	is_imaginary_constant	initial ("000111000"b),
 14    54 	is_float_constant		initial ("000110100"b),
 14    55 	is_decimal_constant		initial ("000110010"b),
 14    56 	is_integral_constant 	initial ("000110001"b)
 14    57 	) bit(9) internal static aligned options(constant);
 14    58 
 14    59 /* END INCLUDE FILE ... token_types.incl.pl1 */
      623 
 15     1 /* BEGIN INCLUDE FILE ... declare_type.incl.pl1 */
 15     2 
 15     3 /* Modified: 25 Apr 1979 by PCK to implement 4-bit decimal */
 15     4 
 15     5 dcl  (	by_declare	initial("001"b),
 15     6 	by_explicit_context initial("010"b),
 15     7 	by_context	initial("011"b),
 15     8 	by_implication	initial("100"b),
 15     9 	by_compiler	initial("101"b)) int static bit(3) aligned options(constant);
 15    10 
 15    11 /* END INCLUDE FILE ... declare_type.incl.pl1 */
      624 
 16     1 /* ***********************************************************
 16     2*   *                                                         *
 16     3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
 16     4*   *                                                         *
 16     5*   *********************************************************** */
 16     6 /* BEGIN INCLUDE FILE ... statement.incl.pl1 */
 16     7 /* Internal interface of the PL/I compiler */
 16     8 
 16     9 dcl	1 statement		based aligned,
 16    10 	2 node_type		bit(9) unaligned,
 16    11 	2 source_id		structure unaligned,
 16    12 	  3 file_number		bit(8),
 16    13 	  3 line_number		bit(14),
 16    14 	  3 statement_number	bit(5),
 16    15 	2 next			ptr unaligned,
 16    16 	2 back			ptr unaligned,
 16    17 	2 root			ptr unaligned,
 16    18 	2 labels			ptr unaligned,
 16    19 	2 reference_list		ptr unaligned,
 16    20 	2 state_list		ptr unaligned,
 16    21 	2 reference_count		fixed(17) unaligned,
 16    22 	2 ref_count_copy		fixed(17) unaligned,
 16    23 	2 object			structure unaligned,
 16    24 	  3 start			fixed(17),
 16    25 	  3 finish		fixed(17),
 16    26 	2 source			structure unaligned,
 16    27 	  3 segment		fixed(11),
 16    28 	  3 start			fixed(23),
 16    29 	  3 length		fixed(11),
 16    30 	2 prefix			bit(12) unaligned,
 16    31 	2 optimized		bit(1) unaligned,
 16    32 	2 free_temps		bit(1) unaligned,
 16    33 	2 LHS_in_RHS		bit(1) unaligned,
 16    34 	2 statement_type		bit(9) unaligned,
 16    35 	2 bits			structure unaligned,
 16    36 	  3 processed		bit(1) unaligned,
 16    37 	  3 put_in_profile		bit(1) unaligned,
 16    38 	  3 generated		bit(1) unaligned,
 16    39 	  3 snap			bit(1) unaligned,
 16    40 	  3 system		bit(1) unaligned,
 16    41 	  3 irreducible		bit(1) unaligned,
 16    42 	  3 checked		bit(1) unaligned,
 16    43 	  3 save_temps		bit(1) unaligned,
 16    44 	  3 suppress_warnings	bit(1) unaligned,
 16    45 	  3 force_nonquick		bit(1) unaligned,
 16    46 	  3 expanded_by_name	bit(1) unaligned,
 16    47 	  3 begins_loop		bit(1) unaligned,
 16    48 	  3 pad			bit(24) unaligned;
 16    49 
 16    50 /* END INCLUDE FILE ... statement.incl.pl1 */
      625 
 17     1 /* BEGIN INCLUDE FILE ... block.incl.pl1 */
 17     2 /* Modified 22 Ocober 1980 by M. N. Davidoff to increase max block.number to 511 */
 17     3 /* format: style3,idind30 */
 17     4 
 17     5 declare	1 block			aligned based,
 17     6 	  2 node_type		bit (9) unaligned,
 17     7 	  2 source_id		structure unaligned,
 17     8 	    3 file_number		bit (8),
 17     9 	    3 line_number		bit (14),
 17    10 	    3 statement_number	bit (5),
 17    11 	  2 father		ptr unaligned,
 17    12 	  2 brother		ptr unaligned,
 17    13 	  2 son			ptr unaligned,
 17    14 	  2 declaration		ptr unaligned,
 17    15 	  2 end_declaration		ptr unaligned,
 17    16 	  2 default		ptr unaligned,
 17    17 	  2 end_default		ptr unaligned,
 17    18 	  2 context		ptr unaligned,
 17    19 	  2 prologue		ptr unaligned,
 17    20 	  2 end_prologue		ptr unaligned,
 17    21 	  2 main			ptr unaligned,
 17    22 	  2 end_main		ptr unaligned,
 17    23 	  2 return_values		ptr unaligned,
 17    24 	  2 return_count		ptr unaligned,
 17    25 	  2 plio_ps		ptr unaligned,
 17    26 	  2 plio_fa		ptr unaligned,
 17    27 	  2 plio_ffsb		ptr unaligned,
 17    28 	  2 plio_ssl		ptr unaligned,
 17    29 	  2 plio_fab2		ptr unaligned,
 17    30 	  2 block_type		bit (9) unaligned,
 17    31 	  2 prefix		bit (12) unaligned,
 17    32 	  2 like_attribute		bit (1) unaligned,
 17    33 	  2 no_stack		bit (1) unaligned,
 17    34 	  2 get_data		bit (1) unaligned,
 17    35 	  2 flush_at_call		bit (1) unaligned,
 17    36 	  2 processed		bit (1) unaligned,
 17    37 	  2 text_displayed		bit (1) unaligned,
 17    38 	  2 number		fixed bin (9) unsigned unaligned,
 17    39 	  2 free_temps		dimension (3) ptr,	/* these fields are used by the code generator */
 17    40 	  2 temp_list		ptr,
 17    41 	  2 entry_list		ptr,
 17    42 	  2 o_and_s		ptr,
 17    43 	  2 why_nonquick		aligned,
 17    44 	    3 auto_adjustable_storage bit (1) unaligned,
 17    45 	    3 returns_star_extents	bit (1) unaligned,
 17    46 	    3 stack_extended_by_args	bit (1) unaligned,
 17    47 	    3 invoked_by_format	bit (1) unaligned,
 17    48 	    3 format_statement	bit (1) unaligned,
 17    49 	    3 io_statements		bit (1) unaligned,
 17    50 	    3 assigned_to_entry_var	bit (1) unaligned,
 17    51 	    3 condition_statements	bit (1) unaligned,
 17    52 	    3 no_owner		bit (1) unaligned,
 17    53 	    3 recursive_call	bit (1) unaligned,
 17    54 	    3 options_non_quick	bit (1) unaligned,
 17    55 	    3 options_variable	bit (1) unaligned,
 17    56 	    3 never_referenced	bit (1) unaligned,
 17    57 	    3 pad_nonquick		bit (5) unaligned,
 17    58 	  2 prologue_flag		bit (1) unaligned,
 17    59 	  2 options_main		bit (1) unaligned,
 17    60 	  2 pad			bit (16) unaligned,
 17    61 	  2 number_of_entries	fixed bin (17),
 17    62 	  2 level			fixed bin (17),
 17    63 	  2 last_auto_loc		fixed bin (17),
 17    64 	  2 symbol_block		fixed bin (17),
 17    65 	  2 entry_info		fixed bin (18),
 17    66 	  2 enter			structure unaligned,
 17    67 	    3 start		fixed bin (17),
 17    68 	    3 end			fixed bin (17),
 17    69 	  2 leave			structure unaligned,
 17    70 	    3 start		fixed bin (17),
 17    71 	    3 end			fixed bin (17),
 17    72 	  2 owner			ptr;
 17    73 
 17    74 declare	max_block_number		fixed bin internal static options (constant) initial (511);
 17    75 
 17    76 /* END INCLUDE FILE ... block.incl.pl1 */
      626 
 18     1 	/* statement types */
 18     2 
 18     3 dcl (	unknown_statement		initial("000000000"b),
 18     4 	allocate_statement		initial("000000001"b),
 18     5 	assignment_statement	initial("000000010"b),
 18     6 	begin_statement		initial("000000011"b),
 18     7 	call_statement		initial("000000100"b),
 18     8 	close_statement		initial("000000101"b),
 18     9 	declare_statement		initial("000000110"b),
 18    10 	lock_statement		initial("000000111"b),
 18    11 	delete_statement		initial("000001000"b),
 18    12 	display_statement		initial("000001001"b),
 18    13 	do_statement		initial("000001010"b),
 18    14 	else_clause		initial("000001011"b),
 18    15 	end_statement		initial("000001100"b),
 18    16 	entry_statement		initial("000001101"b),
 18    17 	exit_statement		initial("000001110"b),
 18    18 	format_statement		initial("000001111"b),
 18    19 	free_statement		initial("000010000"b),
 18    20 	get_statement		initial("000010001"b),
 18    21 	goto_statement		initial("000010010"b),
 18    22 	if_statement		initial("000010011"b),
 18    23 	locate_statement		initial("000010100"b),
 18    24 	null_statement		initial("000010101"b),
 18    25 	on_statement		initial("000010110"b),
 18    26 	open_statement		initial("000010111"b),
 18    27 	procedure_statement 	initial("000011000"b),
 18    28 	put_statement		initial("000011001"b),
 18    29 	read_statement		initial("000011010"b),
 18    30 	return_statement		initial("000011011"b),
 18    31 	revert_statement		initial("000011100"b),
 18    32 	rewrite_statement		initial("000011101"b),
 18    33 	signal_statement		initial("000011110"b),
 18    34 	stop_statement		initial("000011111"b),
 18    35 	system_on_unit		initial("000100000"b),
 18    36 	unlock_statement		initial("000100001"b),
 18    37 	wait_statement		initial("000100010"b),
 18    38 	write_statement		initial("000100011"b),
 18    39 	default_statement		initial("000100100"b),
 18    40 	continue_statement		initial("000100101"b)) bit(9) internal static aligned options(constant);
      627 
 19     1 /* BEGIN INCLUDE FILE ... op_codes.incl.pl1 */
 19     2 
 19     3 /* Modified: 25 Apr 1979 by PCK 4-bit decimal */
 19     4 /* Modified: 6 Jun 1979 by PG to add rank and byte */
 19     5 /* Modified: 26 Dec 1979 by PCK to add assign_by_name */
 19     6 /* Modified: 26 July 82 BIM wordno, segno */
 19     7 
 19     8 dcl (	add		initial("000010001"b),	/* opnd(1) <- opnd(2)+opnd(3)		*/
 19     9 	sub		initial("000010010"b),	/* opnd(1) <- opnd(2)-opnd(3)		*/
 19    10 	mult		initial("000010011"b),	/* opnd(1) <- opnd(2)*opnd(3)		*/
 19    11 	div		initial("000010100"b),	/* opnd(1) <- opnd(2)/opnd(3)		*/
 19    12 	negate		initial("000010101"b),	/* opnd(1) <- -opnd(2)  		*/
 19    13 	exp		initial("000010110"b),	/* opnd(1) <- opnd(2) ** opnd(3)	*/
 19    14 
 19    15 	and_bits		initial("000100001"b),	/* opnd(1) <- opnd(2) & opnd(3)	*/
 19    16 	or_bits		initial("000100010"b),	/* opnd(1) <- opnd(2)|opnd(3)		*/
 19    17 	xor_bits		initial("000100011"b),	/* opnd(1) <- opnd(2) xor opnd(3)	*/
 19    18 	not_bits		initial("000100100"b),	/* opnd(1) <- ^opnd(2)		*/
 19    19 	cat_string	initial("000100101"b),	/* opnd(1) <- opnd(2)||opnd(3)	*/
 19    20 	bool_fun		initial("000100110"b),	/* opnd(1) <- bool(opnd(2),opnd(3),opnd(4)) */
 19    21 
 19    22 	assign		initial("000110001"b),	/* opnd(1) <- opnd(2)		*/
 19    23 	assign_size_ck	initial("000110010"b),	/* opnd(1) <- opnd(2)		*/
 19    24 	assign_zero	initial("000110011"b),	/* opnd(1) <- 0			*/
 19    25 	copy_words	initial("000110100"b),	/* move opnd(2) to opnd(1) by opnd(3) words */
 19    26 	copy_string	initial("000110101"b),	/* move opnd(2) to opnd(1) by opnd(3) units */
 19    27 	make_desc		initial("000110110"b),	/* opnd(1) <- descriptor(opnd(2),opnd(3)) */
 19    28 	assign_round	initial("000110111"b),	/* opnd(1) <- opnd(2) rounded		*/
 19    29 	pack		initial("000111000"b),	/* opnd(1) <- encode to picture opnd(2) */
 19    30 	unpack		initial("000111001"b),	/* opnd(1) <- decode from picture opnd(2) */
 19    31 
 19    32 	less_than		initial("001000100"b),	/* opnd(1) <- opnd(2) < opnd(3)	*/
 19    33 	greater_than	initial("001000101"b),	/* opnd(1) <- opnd(2) > opnd(3)	*/
 19    34 	equal		initial("001000110"b),	/* opnd(1) <- opnd(2) = opnd(3)	*/
 19    35 	not_equal		initial("001000111"b),	/* opnd(1) <- opnd(2) ^= opnd(3)	*/
 19    36 	less_or_equal	initial("001001000"b),	/* opnd(1) <- opnd(2) <= opnd(3)	*/
 19    37 	greater_or_equal	initial("001001001"b),	/* opnd(1) <- opnd(2) >= opnd(3)	*/
 19    38 
 19    39 	jump		initial("001010001"b),	/* go to opnd(1) unconditionally	*/
 19    40 	jump_true		initial("001010010"b),	/* go to opnd(1) if opnd(2) is not 0	*/
 19    41 	jump_false	initial("001010011"b),	/* go to opnd(1) if opnd(2) is all 0	*/
 19    42 	jump_if_lt	initial("001010100"b),	/* go to opnd(1) if opnd(2) < opnd(3)	*/
 19    43 	jump_if_gt	initial("001010101"b),	/* go to opnd(1) if opnd(2) > opnd(3)	*/
 19    44 	jump_if_eq	initial("001010110"b),	/* go to opnd(1) if opnd(2) = opnd(3)	*/
 19    45 	jump_if_ne	initial("001010111"b),	/* go to opnd(1) if opnd(2) ^= opnd(3)	*/
 19    46 	jump_if_le	initial("001011000"b),	/* go to opnd(1) if opnd(2) <= opnd(3)	*/
 19    47 	jump_if_ge	initial("001011001"b),	/* go to opnd(1) if opnd(2) >= opnd(3)	*/
 19    48 
 19    49 	std_arg_list	initial("001100001"b),	/* opnd(1) <- arglist(opnd(2) desclist(opnd(3)))	*/
 19    50 	return_words	initial("001100010"b),	/* return aggregate opnd(1), opnd(2) is length in words */
 19    51 	std_call		initial("001100011"b),	/* opnd(1) <- call opnd(2) with opnd(3)		*/
 19    52 	return_bits	initial("001100100"b),	/* return aggregate opnd(1), opnd(2) is length in bits */
 19    53 	std_entry		initial("001100101"b),	/* entry(opnd(1)... opnd(n))			*/
 19    54 	return_string	initial("001100110"b),	/* return string opnd(1) */
 19    55 	ex_prologue	initial("001100111"b),	/* execute the prologue -no operands-		*/
 19    56 	allot_auto	initial("001101000"b),	/* opnd(1) <- addrel(stack,opnd(2))		*/
 19    57 	param_ptr		initial("001101001"b),	/* opnd(1) <- ptr to opnd(2) in  block opnd(3)	*/
 19    58 	param_desc_ptr	initial("001101010"b),	/* opnd(1) <- ptr to opnd(2) in block opnd(3)	*/
 19    59 	std_return	initial("001101011"b),	/* return -no arguments-			*/
 19    60 	allot_ctl		initial("001101100"b),	/* allocate opnd(1) , length in words is opnd(2) 	*/
 19    61 	free_ctl		initial("001101101"b),	/* free opnd(1)				*/
 19    62 	stop		initial("001101110"b),	/* stop - terminate run unit			*/
 19    63 
 19    64 	mod_bit		initial("001110000"b),	/* opnd(1) <- mod(opnd(3),36),
 19    65*						   opnd(2) <- opnd(3) / 36		*/
 19    66 	mod_byte		initial("001110001"b),	/* opnd(1) <- mod(opnd(3),4),
 19    67*						   opnd(2) <- opnd(3) / 4		*/
 19    68 	mod_half		initial("001110010"b),	/* opnd(1) <- mod(opnd(3),2),
 19    69*						   opnd(2) <- opnd(3) / 2		*/
 19    70 	mod_word		initial("001110011"b),	/* TO BE DEFINED BY BLW			*/
 19    71 
 19    72 	bit_to_char	initial("010000000"b),	/* opnd(1) <- (opnd(2)+8)/9		*/
 19    73 	bit_to_word	initial("010000001"b),	/* opnd(1) <- (opnd(2)+35)/36		*/
 19    74 	char_to_word	initial("010000010"b),	/* opnd(1) <- (opnd(2)+3)/4		*/
 19    75 	half_to_word	initial("010000011"b),	/* opnd(1) <- (opnd(2)+1)/2		*/
 19    76 	word_to_mod2	initial("010000100"b),	/* opnd(1) <- (opnd(2)+1)/2*2		*/
 19    77 	word_to_mod4	initial("010000101"b),	/* opnd(1) <- (opnd(2)+3)/4*4		*/
 19    78 	word_to_mod8	initial("010000110"b),	/* opnd(1) <- (opnd(2)+7)/8*8		*/
 19    79 	rel_fun		initial("010000111"b),	/* opnd(1) <- rel(opnd(2))		*/
 19    80 	baseno_fun	initial("010001000"b),	/* opnd(1) <- baseno(opnd(2))		*/
 19    81 	desc_size		initial("010001001"b),	/* opnd(1) <- substr(opnd(2),13,24)	*/
 19    82 	bit_pointer	initial("010001010"b),	/* opnd(1) <- bit offset of opnd(2)	*/
 19    83 	index_before_fun	initial("010001011"b),	/* opnd(1) <- length of before(opnd(2),opnd(3)) */
 19    84 	index_after_fun	initial("010001100"b),	/* opnd(1) <- offset of after(opnd(2),opnd(3)) in opnd(2) */
 19    85 	verify_ltrim_fun	initial("010001101"b),	/* opnd(1) <- offset of ltrim(opnd(2),opnd(3)) in opnd(2) */
 19    86 	verify_rtrim_fun	initial("010001110"b),	/* opnd(1) <- length(opnd(2))-length(rtrim(opnd(2),opnd(3))) */
 19    87 	digit_to_bit	initial("010001111"b),	/* opnd(1) <- 9*opnd(2)/2		*/
 19    88 
 19    89 	ceil_fun		initial("010010000"b),	/* opnd(1) <- ceil(opnd(2))		*/
 19    90 	floor_fun		initial("010010001"b),	/* opnd(1) <- floor(opnd(2))		*/
 19    91 	round_fun		initial("010010010"b),	/* opnd(1) <- round(opnd(2))		*/
 19    92 	sign_fun		initial("010010011"b),	/* opnd(1) <- sign(opnd(2))		*/
 19    93 	abs_fun		initial("010010100"b),	/* opnd(1) <- abs(opnd(2))		*/
 19    94 	trunc_fun		initial("010010101"b),	/* opnd(1) <- trunc(opnd(2))		*/
 19    95 	byte_fun		initial("010010110"b),	/* opnd(1) <- byte(opnd(2))		*/
 19    96 	rank_fun		initial("010010111"b),	/* opnd(1) <- rank(opnd(2))		*/
 19    97 	index_rev_fun	initial("010011000"b),	/* opnd(1) <- index(reverse(opnd(2)),reverse(opnd(3))) */
 19    98 	search_rev_fun	initial("010011001"b),	/* opnd(1) <- search(reverse(opnd(2)),opnd(3)) */
 19    99 	verify_rev_fun	initial("010011010"b),	/* opnd(1) <- verify(reverse(opnd(2)),opnd(3)) */
 19   100 	wordno_fun	initial("010011011"b),        /* opnd(1) <- wordno (opnd(2)) */
 19   101 	segno_fun		initial("010011100"b),        /* opnd(1) <- segno (opnd(2)) */
 19   102 	bitno_fun           initial("010011101"b),        /* opnd(1) <- bitno (opnd(2)) */
 19   103 	charno_fun	initial("010011110"b),        /* opnd(1) <- charno (opnd(2)) */
 19   104 
 19   105 	index_fun		initial("010100000"b),	/* opnd(1) <- index(opnd(2),opnd(3))	*/
 19   106 	off_fun		initial("010100001"b),	/* opnd(1) <- offset(opnd(2),opnd(3))	*/
 19   107 	complex_fun	initial("010100010"b),	/* opnd(1) <- complex(opnd(2),opnd(3))	*/
 19   108 	conjg_fun		initial("010100011"b),	/* opnd(1) <- conjg(opnd(2),opnd(3))	*/
 19   109 	mod_fun		initial("010100100"b),	/* opnd(1) <- mod(opnd(2),opnd(3))	*/
 19   110 	repeat_fun	initial("010100101"b),	/* opnd(1) <- repeat(opnd(2),opnd(3))	*/
 19   111 	verify_fun	initial("010100110"b),	/* opnd(1) <- verify(opnd(2),opnd(3))	*/
 19   112 	translate_fun	initial("010100111"b),	/* opnd(1) <- translate(opnd(2),opnd(3))*/
 19   113 	real_fun   	initial("010101001"b),	/* opnd(1) <- real(opnd(2))		*/
 19   114 	imag_fun   	initial("010101010"b),	/* opnd(1) <- imag(opnd(2))		*/
 19   115 	length_fun	initial("010101011"b),	/* opnd(1) <- length(opnd(2))	*/
 19   116 	pl1_mod_fun	initial("010101100"b),	/* opnd(1) <- mod(opnd(2)) */
 19   117 	search_fun	initial("010101101"b),	/* opnd(1) <- search(opnd(2),opnd(3)) */
 19   118 	allocation_fun	initial("010101110"b),	/* opnd(1) <- allocation(opnd(2)) */
 19   119 	reverse_fun	initial("010101111"b),	/* opnd(1) <- reverse(opnd(2)) */
 19   120 
 19   121 	addr_fun		initial("010110000"b),	/* opnd(1) <- addr(opnd(2))		*/
 19   122 	addr_fun_bits	initial("010110001"b),	/* opnd(1) <- addr(opnd(2))		*/
 19   123 	ptr_fun		initial("010110010"b),	/* opnd(1) <- ptr(opnd(2),opnd(3))	*/
 19   124 	baseptr_fun	initial("010110011"b),	/* opnd(1) <- baseptr(opnd(2))	*/
 19   125 	addrel_fun	initial("010110100"b),	/* opnd(1) <- addrel(opnd(2),opnd(3))	*/
 19   126 	codeptr_fun	initial("010110101"b),	/* opnd(1) <- codeptr(opnd(2))	*/
 19   127 	environmentptr_fun	initial("010110110"b),	/* opnd(1) <- environmentptr(opnd(2))	*/
 19   128 	stackbaseptr_fun	initial("010110111"b),	/* opnd(1) is ptr to base of current stack	*/
 19   129 	stackframeptr_fun	initial("010111000"b),	/* opnd(1) is ptr to current block's stack frame	*/
 19   130 	setcharno_fun	initial("010111001"b),	/* opnd(1) <- opnd(2) with charno opnd(3) */
 19   131 	addcharno_fun	initial("010111010"b),	/* opnd(1) <- opnd(2) with charno = charno + opnd(3) */
 19   132 	setbitno_fun	initial("010111011"b),	/* setcharno for bitsno */
 19   133 	addbitno_fun	initial("010111100"b),	/* addcharno for bitno */
 19   134 
 19   135 	min_fun		initial("011000000"b),	/* opnd(1) <- min(opnd(1),opnd(2),...)	*/
 19   136 	max_fun		initial("011000001"b),	/* opnd(1) <- max(opnd(1),opnd(2),...)	*/
 19   137 
 19   138 	stack_ptr		initial("011010001"b),	/* opnd(1) <- stack frame ptr		*/
 19   139 	empty_area	initial("011010010"b),	/* empty opnd(1), length in words is opnd(2) */
 19   140 	enable_on		initial("011010100"b),	/* opnd(1) is the cond name
 19   141*						   opnd(2) is the file name
 19   142*						   opnd(3) is the block	*/
 19   143 	revert_on		initial("011010101"b),	/* opnd(1) is the cond name,
 19   144*						   opnd(2) is the file name	*/
 19   145 	signal_on		initial("011010110"b),	/* opnd(1) is the cond name
 19   146*						   opnd(2) is the file name */
 19   147 
 19   148 	lock_fun		initial("011010111"b),	/* opnd(1) <- stac(opnd(2),opnd(3))	*/
 19   149 	stacq_fun		initial("011011000"b),	/* opnd(1) is result, opnd(2) is ptr to lock word,
 19   150*						   opnd(3) is old value, (4) is new value. */
 19   151 	clock_fun		initial("011011001"b),	/* opnd(1) is the clock time		*/
 19   152 	vclock_fun	initial("011011010"b),	/* opnd(1) is the virtual clock time	*/
 19   153 
 19   154 	bound_ck		initial("011100000"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 19   155 	range_ck		initial("011100001"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 19   156 	loop		initial("011100010"b),	/* do opnd(1) for opnd(2) from opnd(3) to opnd(4) by 1,
 19   157*						   opnd(5) is the list */
 19   158 	join		initial("011100011"b),	/* do opnd(1), opnd(2) ... opnd(n)	*/
 19   159 	allot_based	initial("011100100"b),	/* allocate opnd(2) words in opnd(3), set opnd(1) */
 19   160 	free_based	initial("011100101"b),	/* free opnd(1) in opnd(3), length is opnd(2) words */
 19   161 
 19   162 	r_parn		initial("011110001"b),	/* format op code			*/
 19   163 	l_parn		initial("011110010"b),
 19   164 	r_format		initial("011110011"b),
 19   165 	c_format		initial("011110100"b),
 19   166 	f_format		initial("011110101"b),
 19   167 	e_format		initial("011110110"b),
 19   168 	b_format		initial("011110111"b),
 19   169 	a_format		initial("011111000"b),
 19   170 	x_format		initial("011111001"b),
 19   171 	skip_format	initial("011111010"b),
 19   172 	column_format	initial("011111011"b),
 19   173 	page_format	initial("011111100"b),
 19   174 	line_format	initial("011111101"b),
 19   175 	picture_format	initial("011111110"b),
 19   176 	bn_format		initial("011111111"b),	/* bit format, length(opnd(2)), radix factor(opnd(3)) */
 19   177 
 19   178 	get_list_trans	initial("100000000"b),	/* getlist(opnd(2) with desc(opnd(1)))	*/
 19   179 	get_edit_trans	initial("100000001"b),	/* getedit(opnd(2) with desc(opnd(1)))	*/
 19   180 	get_data_trans	initial("100000010"b),	/* getdata(opnd(1) to opnd(n))	*/
 19   181 	put_list_trans	initial("100000011"b),	/* putlist(opnd(2) with desc(opnd(1)))	*/
 19   182 	put_edit_trans	initial("100000100"b),	/* putedit(opnd(2) with desc(opnd(1)))	*/
 19   183 	put_data_trans	initial("100000101"b),	/* putdata(opnd(2)) with subscript-list opnd(1) */
 19   184 	terminate_trans	initial("100000110"b),	/* terminate stream transmission	*/
 19   185 	stream_prep	initial("100000111"b),	/* initiate stream transmission	*/
 19   186 	record_io		initial("100001000"b),	/* perform record io operation	*/
 19   187 	fortran_read	initial("100001001"b),	/* A complete read statement		*/
 19   188 	fortran_write	initial("100001010"b),	/* A complete write statement		*/
 19   189 	ftn_file_manip	initial("100001011"b),	/* endfile,backspace,rewind,etc.	*/
 19   190 	ftn_trans_loop	initial("100001100"b),	/* An implied do in i/o list		*/
 19   191 	put_control	initial("100001101"b),	/* put control opnd(1) opnd(2) times	*/
 19   192 	put_field		initial("100001110"b),	/* putlist(opnd(2)) of length(opnd(1))	*/
 19   193 	put_field_chk	initial("100001111"b),	/* putlist(op(2)) of len(op(1)) check char index(op(3)) */
 19   194 
 19   195 /* These operators are produced by the parse but are not used as input to the code generator.	*/
 19   196 /* They are processed by the semantic translator.						*/
 19   197 
 19   198 	return_value	initial("100010010"b),	/* return(opnd(1))			*/
 19   199 	allot_var		initial("100010011"b),	/* allot opnd(1) in opnd(2)		*/
 19   200 	free_var		initial("100010100"b),	/* free opnd(1) out of opnd(2)	*/
 19   201 	get_file		initial("100010101"b),	/* opnd(1) is filename,opnd(2) is copy	*/
 19   202 						/* opnd(3) is skip, opnd(4) is list	*/
 19   203 	get_string	initial("100010110"b),	/* opnd(1) is string,opnd(2) is list	*/
 19   204 	put_file		initial("100010111"b),	/* opnd(1) is filename,opnd(2) is page	*/
 19   205 						/* opnd(3) is skip,opnd(4) is line	*/
 19   206 	put_string	initial("100011000"b),	/* opnd(1) is string,opnd(2) is list	*/
 19   207 	open_file		initial("100011001"b),
 19   208 	close_file	initial("100011010"b),
 19   209 	read_file		initial("100011011"b),
 19   210 	write_file	initial("100011100"b),
 19   211 	locate_file	initial("100011101"b),
 19   212 	do_fun		initial("100011110"b),	/* opnd(1) is join of a list		*/
 19   213 						/* opnd(2) is control variable ref	*/
 19   214 						/* opnd(3) is specification operator	*/
 19   215 	do_spec		initial("100011111"b),	/* opnd(1) to opnd(2) by opnd(3) 	*/
 19   216 						/* repeat opnd(4) while opnd(5)	*/
 19   217 						/* opnd(6) is next specification	*/
 19   218 
 19   219 	rewrite_file	initial("100100000"b),
 19   220 	delete_file	initial("100100001"b),
 19   221 	unlock_file	initial("100100010"b),
 19   222 	lock_file		initial("100100011"b),
 19   223 	refer		initial("100100101"b),	/* opnd(1) refer(opnd(2))		*/
 19   224 	prefix_plus	initial("100100110"b),	/* opnd(1) <- +opnd(2)		*/
 19   225 	nop		initial("100100111"b),	/* no-op */
 19   226 	assign_by_name	initial("100101000"b),	/* opnd(1) <- opnd(2),by name		*/
 19   227 
 19   228 /* These operators are produced by the semantic translator in processing the math
 19   229*   builtin functions and are used as input to the code generator			*/
 19   230 
 19   231 	sqrt_fun		initial("100110000"b),	/* opnd(1) <- sqrt(opnd(2))	*/
 19   232 	sin_fun		initial("100110001"b),	/* opnd(1) <- sin(opnd(2))	*/
 19   233 	sind_fun		initial("100110010"b),	/* opnd(1) <- sind(opnd(2))	*/
 19   234 	cos_fun		initial("100110011"b),	/* opnd(1) <- cos(opnd(2))	*/
 19   235 	cosd_fun		initial("100110100"b),	/* opnd(1) <- cosd(opnd(2))	*/
 19   236 	tan_fun		initial("100110101"b),	/* opnd(1) <- tan(opnd(2))	*/
 19   237 	tand_fun		initial("100110110"b),	/* opnd(1) <- tand(opnd(2))	*/
 19   238 	asin_fun		initial("100110111"b),	/* opnd(1) <- asin(opnd(2))	*/
 19   239 	asind_fun		initial("100111000"b),	/* opnd(1) <- asind(opnd(2))	*/
 19   240 	acos_fun		initial("100111001"b),	/* opnd(1) <- acos(opnd(2))	*/
 19   241 	acosd_fun		initial("100111010"b),	/* opnd(1) <- acosd(opnd(2))	*/
 19   242 	atan_fun		initial("100111011"b),	/* opnd(1) <- atan(opnd(2)[,opnd(3)])	*/
 19   243 	atand_fun		initial("100111100"b),	/* opnd(1) <- atand(opnd(2)[,opnd(3)])	*/
 19   244 	log2_fun		initial("100111101"b),	/* opnd(1) <- log2(opnd(2))	*/
 19   245 	log_fun		initial("100111110"b),	/* opnd(1) <- log(opnd(2))	*/
 19   246 	log10_fun		initial("100111111"b),	/* opnd(1) <- log10(opnd(2))	*/
 19   247 
 19   248 	exp_fun		initial("101000000"b))	/* opnd(1) <- exp(opnd(2))	*/
 19   249 
 19   250 			bit(9) aligned internal static options(constant);
 19   251 
 19   252 /* END INCLUDE FILE ... op_codes.incl.pl1 */
      628 
 20     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
 20     2 
 20     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
 20     4 
 20     5 /* format: style3 */
 20     6 dcl	1 operator	based aligned,
 20     7 	  2 node_type	bit (9) unaligned,
 20     8 	  2 op_code	bit (9) unaligned,
 20     9 	  2 shared	bit (1) unaligned,
 20    10 	  2 processed	bit (1) unaligned,
 20    11 	  2 optimized	bit (1) unaligned,
 20    12 	  2 number	fixed (14) unaligned,
 20    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
 20    14 
 20    15 dcl	max_number_of_operands
 20    16 			fixed bin (15) int static options (constant) initial (32767);
 20    17 
 20    18 /* END INCLUDE FILE ... operator.incl.pl1 */
      629 
 21     1 dcl	1 array			based aligned,
 21     2 	2 node_type		bit(9) unaligned,
 21     3 	2 reserved		bit(34) unaligned,
 21     4 	2 number_of_dimensions	fixed(7) unaligned,
 21     5 	2 own_number_of_dimensions	fixed(7) unaligned,
 21     6 	2 element_boundary		fixed(3) unaligned,
 21     7 	2 size_units		fixed(3) unaligned,
 21     8 	2 offset_units		fixed(3) unaligned,
 21     9 	2 interleaved		bit(1) unaligned,
 21    10 	2 c_element_size		fixed(24),
 21    11 	2 c_element_size_bits	fixed(24),
 21    12 	2 c_virtual_origin		fixed(24),
 21    13 	2 element_size		ptr unaligned,
 21    14 	2 element_size_bits		ptr unaligned,
 21    15 	2 virtual_origin		ptr unaligned,
 21    16 	2 symtab_virtual_origin	ptr unaligned,
 21    17 	2 symtab_element_size	ptr unaligned,
 21    18 	2 bounds			ptr unaligned,
 21    19 	2 element_descriptor	ptr unaligned;
 21    20 
 21    21 dcl	1 bound			based aligned,
 21    22 	2 node_type		bit(9),
 21    23 	2 c_lower			fixed(24),
 21    24 	2 c_upper			fixed(24),
 21    25 	2 c_multiplier		fixed(24),
 21    26 	2 c_desc_multiplier		fixed(24),
 21    27 	2 lower			ptr unaligned,
 21    28 	2 upper			ptr unaligned,
 21    29 	2 multiplier		ptr unaligned,
 21    30 	2 desc_multiplier		ptr unaligned,
 21    31 	2 symtab_lower		ptr unaligned,
 21    32 	2 symtab_upper		ptr unaligned,
 21    33 	2 symtab_multiplier		ptr unaligned,
 21    34 	2 next			ptr unaligned;
      630 
 22     1 /* BEGIN INCLUDE FILE ... list.incl.pl1 */
 22     2 
 22     3 /* Modified 26 June 81 by EBush to add max_list_elements */
 22     4 
 22     5 
 22     6 dcl	1 list		based aligned,
 22     7 	2 node_type	bit(9) unaligned,
 22     8 	2 reserved	bit(12) unaligned,
 22     9 	2 number		fixed(14) unaligned,
 22    10 	2 element		dimension(n refer(list.number)) ptr unaligned;
 22    11 
 22    12 dcl       max_list_elements   fixed bin(17) internal static options (constant)
 22    13 	                    init(16383);
 22    14 
 22    15 /* END INCLUDE FILE ... list.incl.pl1 */
      631 
 23     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
 23     2 
 23     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
 23     4 
 23     5 dcl (	block_node		initial("000000001"b),
 23     6 	statement_node		initial("000000010"b),
 23     7 	operator_node		initial("000000011"b),
 23     8 	reference_node		initial("000000100"b),
 23     9 	token_node		initial("000000101"b),
 23    10 	symbol_node		initial("000000110"b),
 23    11 	context_node		initial("000000111"b),
 23    12 	array_node		initial("000001000"b),
 23    13 	bound_node		initial("000001001"b),
 23    14 	format_value_node		initial("000001010"b),
 23    15 	list_node			initial("000001011"b),
 23    16 	default_node		initial("000001100"b),
 23    17 	machine_state_node		initial("000001101"b),
 23    18 	source_node		initial("000001110"b),
 23    19 	label_node		initial("000001111"b),
 23    20 	cross_reference_node	initial("000010000"b),
 23    21 	sf_par_node		initial("000010001"b),
 23    22 	temporary_node		initial("000010010"b),
 23    23 	label_array_element_node	initial("000010011"b),
 23    24 	by_name_agg_node		initial("000010100"b))
 23    25 				bit(9) internal static aligned options(constant);
 23    26 
 23    27 dcl	1 node			based aligned,
 23    28 	2 type			unal bit(9),
 23    29 	2 source_id		unal structure,
 23    30 	  3 file_number		bit(8),
 23    31 	  3 line_number		bit(14),
 23    32 	  3 statement_number	bit(5);
 23    33 
 23    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
      632 
      633 
      634 	end expand_initial;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/31/89  1338.5  expand_initial.pl1                >spec>install>MR12.3-1066>expand_initial.pl1
616          1    07/21/80  1546.3  semant.incl.pl1                   >ldd>include>semant.incl.pl1
1-228        2    07/31/89  1332.6  language_utility.incl.pl1         >spec>install>MR12.3-1066>language_utility.incl.pl1
2-307        3    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-325        4    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-335        5    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-374        6    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-386        7    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
617          8    12/07/83  1701.7  symbol.incl.pl1                   >ldd>include>symbol.incl.pl1
618          9    10/25/79  1645.8  boundary.incl.pl1                 >ldd>include>boundary.incl.pl1
619         10    12/07/83  1701.7  system.incl.pl1                   >ldd>include>system.incl.pl1
620         11    05/06/74  1742.1  label.incl.pl1                    >ldd>include>label.incl.pl1
621         12    07/21/80  1546.3  reference.incl.pl1                >ldd>include>reference.incl.pl1
622         13    09/14/77  1705.7  token.incl.pl1                    >ldd>include>token.incl.pl1
623         14    11/30/78  1227.4  token_types.incl.pl1              >ldd>include>token_types.incl.pl1
624         15    10/25/79  1645.8  declare_type.incl.pl1             >ldd>include>declare_type.incl.pl1
625         16    04/07/83  1635.0  statement.incl.pl1                >ldd>include>statement.incl.pl1
626         17    08/13/81  2043.5  block.incl.pl1                    >ldd>include>block.incl.pl1
627         18    05/03/76  1320.4  statement_types.incl.pl1          >ldd>include>statement_types.incl.pl1
628         19    04/07/83  1635.0  op_codes.incl.pl1                 >ldd>include>op_codes.incl.pl1
629         20    07/21/80  1546.3  operator.incl.pl1                 >ldd>include>operator.incl.pl1
630         21    05/06/74  1741.6  array.incl.pl1                    >ldd>include>array.incl.pl1
631         22    08/13/81  2211.5  list.incl.pl1                     >ldd>include>list.incl.pl1
632         23    07/21/80  1546.3  nodes.incl.pl1                    >ldd>include>nodes.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
a                               000134 automatic       pointer                  dcl 16 set ref 92* 93 94* 94* 95* 96 102* 102* 193*
                                                                                  194 202 223 225 266 268 270 271 306 306 309 310
                                                                                  310 310 310 314 355
add                                    constant        bit(9)                   initial dcl 19-8 ref 548
addr                                                   builtin function         dcl 38 ref 85
addr_fun                        000006 constant        bit(9)                   initial dcl 19-8 set ref 92* 95*
allocate                        000124 automatic       pointer                  dcl 16 in procedure "expand_initial" set ref 240*
                                                                                  340 341
allocate                 33(02)        based           bit(1)                   level 4 in structure "symbol" packed packed
                                                                                  unaligned dcl 8-3 in procedure "expand_initial"
                                                                                  set ref 44* 54* 72*
allot_auto                      000007 constant        bit(9)                   initial dcl 19-8 set ref 336*
ar                              000130 automatic       pointer                  dcl 16 set ref 283* 351* 359
area                     31(07)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 112
array                                  based           structure                level 1 dcl 21-1 in procedure "expand_initial"
array                    12            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 8-3 in procedure "expand_initial"
                                                                                  set ref 193 262*
array_ref                 0(09)        based           bit(1)                   level 2 packed packed unaligned dcl 12-3 set ref
                                                                                  186*
assign                          000011 constant        bit(9)                   initial dcl 19-8 set ref 122* 539*
assignment_statement            000021 constant        bit(9)                   initial dcl 18-3 set ref 94* 102* 104* 116* 120*
                                                                                  172* 227* 229* 239* 288* 341 348* 366*
attributes               31            based           structure                level 2 dcl 8-3
auto                     32(09)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 57*
                                                                                  242*
b                               000136 automatic       pointer                  dcl 16 set ref 202* 202* 203 203 203 207 207 207 211
                                                                                  211 214 214* 215 273* 275 276 277 278 278 278 300
                                                                                  301 355* 355* 361 362* 364
based                    32(10)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 114 577
bit_to_word                            constant        bit(9)                   initial dcl 19-8 ref 23
bits                            000157 automatic       structure                level 2 in structure "fab" packed packed unaligned
                                                                                  dcl 28 in procedure "expand_initial" set ref 80*
bits                     13            based           structure                level 2 in structure "statement" packed packed
                                                                                  unaligned dcl 16-9 in procedure "expand_initial"
blk                             000102 automatic       pointer                  dcl 16 set ref 43* 50* 51* 66* 120* 120 181* 241*
                                                                                  337* 359* 448* 498* 585* 585
block                                  based           structure                level 1 dcl 17-5
block_node                4            based           pointer                  level 2 packed packed unaligned dcl 8-3 ref 43
bound                                  based           structure                level 1 dcl 21-21
boundary                  2(20)        based           fixed bin(3,0)           level 2 packed packed unaligned dcl 8-3 set ref 74*
                                                                                  260* 260
bounds                   12            based           pointer                  level 2 packed packed unaligned dcl 21-1 set ref 202
                                                                                  223 225 273* 355
buffer_size              13     000157 automatic       fixed bin(15,0)          level 2 dcl 28 set ref 84*
by_compiler                     000014 constant        bit(3)                   initial dcl 15-5 set ref 50* 66* 241*
c_count                                parameter       fixed bin(31,0)          dcl 378 set ref 372 410* 410 436* 436 482* 482 485
                                                                                  489* 489* 490* 519
c_dcl_size               30            based           fixed bin(24,0)          level 2 dcl 8-3 set ref 68* 246* 246
c_element_size            2            based           fixed bin(24,0)          level 2 dcl 21-1 set ref 268 268* 276 306 310 310
                                                                                  310
c_element_size_bits       3            based           fixed bin(24,0)          level 2 dcl 21-1 set ref 270* 270
c_length                  2            based           fixed bin(24,0)          level 2 dcl 12-3 set ref 256* 256
c_lower                   1            based           fixed bin(24,0)          level 2 dcl 21-21 set ref 203 211 214 223 275*
c_multiplier              3            based           fixed bin(24,0)          level 2 dcl 21-21 set ref 276* 278
c_numb                          002122 automatic       fixed bin(31,0)          dcl 378 set ref 466* 467* 475* 475 478* 478* 482 492
                                                                                  494* 494*
c_offset                  1            based           fixed bin(24,0)          level 2 dcl 12-3 set ref 100*
c_total_size                    000144 automatic       fixed bin(31,0)          dcl 18 set ref 282* 288* 288* 293* 294* 301 306* 306
                                                                                  309* 309* 327* 327 331
c_upper                   2            based           fixed bin(24,0)          level 2 dcl 21-21 set ref 207 211 214 301*
c_virtual_origin          4            based           fixed bin(24,0)          level 2 dcl 21-1 set ref 268*
c_word_size              26            based           fixed bin(24,0)          level 2 dcl 8-3 set ref 331*
case                            002123 automatic       fixed bin(31,0)          dcl 378 set ref 392* 398* 405* 408
char_to_word                           constant        bit(9)                   initial dcl 19-8 ref 23
check_range                            parameter       bit(1)                   dcl 380 set ref 372 400* 401* 472* 473* 519
compiler_developed       32(35)        based           structure                level 3 packed packed unaligned dcl 8-3
constant                 32(16)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 47
constant_extents                000155 automatic       bit(1)                   dcl 25 set ref 198* 205* 209* 211 519
controlled               32(12)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 ref 114 577
copy_expression                 000010 constant        entry                    external dcl 2-94 ref 97 127 148 187 340 581 586
count                           000213 automatic       fixed bin(15,0)          dcl 595 in procedure "link_father" set ref 599* 602*
                                                                                  602 605* 609
count                                  parameter       pointer                  dcl 374 in procedure "assign_initial" set ref 372
                                                                                  410 415* 415* 436 439 439* 441* 441* 482 485 485*
                                                                                  489* 492* 492* 494* 494* 519
create_array                    000012 constant        entry                    external dcl 2-108 ref 262
create_bound                    000014 constant        entry                    external dcl 2-118 ref 273
create_label                    000016 constant        entry                    external dcl 2-140 ref 50
create_list                     000020 constant        entry                    external dcl 2-147 ref 106 136 195 286 605
create_operator                 000022 constant        entry                    external dcl 2-152 ref 49 92 95 122 323 336 349 357
                                                                                  443 446 496 513 536 539 560
create_reference                000024 constant        entry                    external dcl 2-158 ref 125 134 147 184 285
create_statement                000026 constant        entry                    external dcl 2-163 ref 116 579
create_statement$prologue       000030 constant        entry                    external dcl 2-171 ref 120 585
create_symbol                   000032 constant        entry                    external dcl 2-184 ref 66 241
create_token                    000034 constant        entry                    external dcl 2-191 ref 66 66 134 134
data_type                31            based           structure                level 3 packed packed unaligned dcl 8-3 set ref 243*
                                                                                  243
dcl_size                 24            based           pointer                  level 2 packed packed unaligned dcl 8-3 set ref 248*
                                                                                  248
dec_integer                            constant        bit(9)                   initial dcl 14-3 ref 159 394 469
declare_constant$bit            000036 constant        entry                    external dcl 2-219 ref 85
declare_constant$integer        000040 constant        entry                    external dcl 2-234 ref 42 203 207 223 239 239 239
                                                                                  239 278 293 309 309 310 310 348 348 348 348 415
                                                                                  415 478 478 489 489 494 494
declare_integer                 000042 constant        entry                    external dcl 2-269 ref 51 181 359 448 498
declare_pointer                 000044 constant        entry                    external dcl 2-287 ref 337
dimensioned              31(19)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 144
e                                      parameter       pointer                  dcl 574 in procedure "make_statement" ref 572 581
                                                                                  586
e                                      parameter       pointer                  dcl 533 in procedure "assignf" ref 531 536 541 546
                                                                                  551 556 563
element                   1            based           pointer                  array level 2 packed packed unaligned dcl 22-6 set
                                                                                  ref 107* 153 156 159 162 165 165 168 172 172 228*
                                                                                  287* 359* 388 389 508 610*
element_size              5            based           pointer                  level 2 packed packed unaligned dcl 21-1 set ref 266
                                                                                  266* 277 306 309 310 314
exp_extents              33(04)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 335*
external                 32(02)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 70*
                                                                                  70
fab                             000157 automatic       structure                level 1 unaligned dcl 28 set ref 85 85 85
fab_image                              based           bit                      dcl 27 set ref 85*
father                   17            based           pointer                  level 2 packed packed unaligned dcl 8-3 ref 130 150
                                                                                  190 601 603 607 611
file_attributes          32(19)        based           structure                level 3 packed packed unaligned dcl 8-3 ref 80
general                  16            based           pointer                  level 2 packed packed unaligned dcl 8-3 set ref 75*
                                                                                  86* 251* 251
generated                13(02)        based           bit(1)                   level 3 packed packed unaligned dcl 16-9 set ref
                                                                                  118* 582*
get_size                        000046 constant        entry                    external dcl 2-352 ref 73
half_to_word                           constant        bit(9)                   initial dcl 19-8 ref 23
hbound                                                 builtin function         dcl 381 ref 383
i                               000212 automatic       fixed bin(15,0)          dcl 595 in procedure "link_father" set ref 609* 610*
i                               002114 automatic       fixed bin(15,0)          dcl 376 in procedure "assign_initial" set ref 515*
                                                                                  516 516*
i                               000146 automatic       fixed bin(15,0)          dcl 19 in procedure "expand_initial" set ref 353*
                                                                                  356* 356 359
identifier                      000027 constant        bit(9)                   initial dcl 14-3 set ref 66* 66* 134* 134*
if_statement                    000013 constant        bit(9)                   initial dcl 18-3 set ref 60*
increase                        000114 automatic       pointer                  dcl 16 set ref 183* 350 423 444
init                                   parameter       pointer                  dcl 374 ref 372 387
initial                  11            based           pointer                  level 2 packed packed unaligned dcl 8-3 ref 143
initialed                31(20)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 141
internal                 32(01)        based           bit(1)                   level 4 in structure "symbol" packed packed
                                                                                  unaligned dcl 8-3 in procedure "expand_initial"
                                                                                  set ref 54* 71* 71 82
internal                  0(27) 000157 automatic       bit(1)                   level 3 in structure "fab" packed packed unaligned
                                                                                  dcl 28 in procedure "expand_initial" set ref 82*
items                           002117 automatic       fixed bin(15,0)          dcl 376 set ref 384* 418* 418 420 452* 452 454 502*
                                                                                  502 504
join                            000004 constant        bit(9)                   initial dcl 19-8 set ref 349* 443* 513*
jump_if_eq                      000010 constant        bit(9)                   initial dcl 19-8 set ref 49*
k                               002115 automatic       fixed bin(15,0)          dcl 376 set ref 417*
l                               002116 automatic       fixed bin(15,0)          dcl 376 set ref 384* 419* 419 423 424 453* 453 456
                                                                                  503* 503 506 513* 515
lab                             000110 automatic       pointer                  dcl 16 set ref 50* 107 108
label                                  based           structure                level 1 dcl 11-1
labels                    4            based           pointer                  level 2 packed packed unaligned dcl 16-9 set ref
                                                                                  106* 107
length                    6            based           pointer                  level 2 in structure "reference" packed packed
                                                                                  unaligned dcl 12-3 in procedure "expand_initial"
                                                                                  set ref 257* 257 605*
length                                                 builtin function         dcl 38 in procedure "expand_initial" ref 85 85
limit                           002120 automatic       fixed bin(15,0)          dcl 376 set ref 383* 420 454 504
line_size                11     000157 automatic       fixed bin(15,0)          level 2 dcl 28 set ref 84*
list                                   based           structure                level 1 dcl 22-6
list_node                              constant        bit(9)                   initial dcl 23-5 ref 165 405
locator                                parameter       pointer                  dcl 17 ref 14 127 127 148 187
loop                            000005 constant        bit(9)                   initial dcl 19-8 set ref 357* 446* 496*
lower                     5            based           pointer                  level 2 packed packed unaligned dcl 21-21 set ref
                                                                                  203 203* 225 361
member                   32(04)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 245*
misc_attributes          31(19)        based           structure                level 3 packed packed unaligned dcl 8-3 set ref 244*
                                                                                  244
mod2_                                  constant        fixed bin(3,0)           initial dcl 9-5 ref 74
mult                                   constant        bit(9)                   initial dcl 19-8 ref 558
multiplier                7            based           pointer                  level 2 packed packed unaligned dcl 21-21 set ref
                                                                                  277* 278 278*
n                               000145 automatic       fixed bin(15,0)          dcl 19 in procedure "expand_initial" set ref 194*
                                                                                  195* 221
n                               002121 automatic       fixed bin(15,0)          initial dcl 376 in procedure "assign_initial" set
                                                                                  ref 376* 391* 397* 398 410 415 415 417 436 436
                                                                                  469* 475 475
nest                            000122 automatic       pointer                  dcl 16 set ref 349* 350 351 358 363* 366*
next                     14            based           pointer                  level 2 packed packed unaligned dcl 21-21 ref 215
                                                                                  364
node                                   based           structure                level 1 dcl 23-27
nop                             000003 constant        bit(9)                   initial dcl 19-8 set ref 536*
null                                                   builtin function         dcl 38 ref 50 50 105 105 116 116 120 120 127 130 150
                                                                                  153 165 190 202 203 207 229 229 229 229 240 240
                                                                                  241 241 278 281 290 306 306 310 321 333 355 387
                                                                                  403 410 436 439 465 475 478 482 482 485 519 536
                                                                                  579 579 585 585 601
null_statement                  000012 constant        bit(9)                   initial dcl 18-3 set ref 105* 240*
numb                            000100 automatic       pointer                  dcl 374 set ref 465* 467* 475 478 478* 480* 480* 482
                                                                                  485 489* 492*
number_of_dimensions      1(07)        based           fixed bin(7,0)           level 2 packed packed unaligned dcl 21-1 set ref 194
                                                                                  264*
offset                    5            based           pointer                  level 2 packed packed unaligned dcl 12-3 set ref
                                                                                  136* 195* 228 286* 287 359
offset_units              1(31)        based           fixed bin(3,0)           level 2 packed packed unaligned dcl 21-1 set ref
                                                                                  271* 271 318
one                             000126 automatic       pointer                  dcl 16 set ref 42* 52 104* 104* 183* 183* 225* 449
                                                                                  499
opcode                          000102 automatic       bit(9)                   dcl 534 set ref 548* 553* 558* 560*
operand                   1            based           pointer                  array level 2 packed packed unaligned dcl 20-6 set
                                                                                  ref 50* 51* 52* 93* 96* 133* 134* 136 324* 337*
                                                                                  339* 350* 351* 358* 359* 361* 362* 444* 445* 447*
                                                                                  448* 449* 450* 497* 498* 499* 500* 516* 540* 541*
                                                                                  562* 563*
operator                               based           structure                level 1 dcl 20-6
optable                         000151 automatic       bit(9)                   initial array dcl 23 set ref 23* 23* 23* 23* 323*
own_number_of_dimensions
                          1(15)        based           fixed bin(7,0)           level 2 packed packed unaligned dcl 21-1 set ref
                                                                                  265*
p                               000202 automatic       pointer                  dcl 574 in procedure "make_statement" set ref 579*
                                                                                  581 582 585* 586 589
p                               000102 automatic       pointer                  dcl 374 in procedure "assign_initial" set ref 387*
                                                                                  387* 388 389* 508
p                               000214 automatic       pointer                  dcl 597 in procedure "link_father" set ref 601* 601*
                                                                                  603 607* 610 611* 611
p                               000104 automatic       pointer                  dcl 16 in procedure "expand_initial" set ref 60* 66*
                                                                                  68 69 69 70 71 72 73* 74 75 86 96 104* 105* 106
                                                                                  107 108 116* 118 120* 122 172* 223* 225* 227* 227*
                                                                                  227* 229* 239* 241* 242 243 244 245 246 247 248
                                                                                  250 251 253 253 256 257 260 262 285 330 331 335
                                                                                  337
page_size                12     000157 automatic       fixed bin(15,0)          level 2 dcl 28 set ref 84*
picture                  31(18)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 251
pix                       1(28)        based           structure                level 2 packed packed unaligned dcl 8-3 set ref 250*
                                                                                  250
prefix                   12(12)        based           bit(12)                  level 2 in structure "statement" packed packed
                                                                                  unaligned dcl 16-9 in procedure "expand_initial"
                                                                                  ref 116 579
prefix                   24(09)        based           bit(12)                  level 2 in structure "block" packed packed unaligned
                                                                                  dcl 17-5 in procedure "expand_initial" ref 120 585
q                               000216 automatic       pointer                  dcl 597 in procedure "link_father" set ref 605* 610
q                               000106 automatic       pointer                  dcl 16 in procedure "expand_initial" set ref 49* 50
                                                                                  51 52 60* 85* 86 93 94* 97* 98 99 100 101 102*
                                                                                  102* 102* 122* 133 134 136 143* 153 156 159 162
                                                                                  165 165 168* 168 172 172 229* 229* 288* 288* 288*
                                                                                  323* 324 325 336* 337 339 340 348* 357* 358 359
                                                                                  361 362 363 366*
q                               000100 automatic       pointer                  dcl 533 in procedure "assignf" set ref 536* 539* 540
                                                                                  541 560* 562 563 565
q                               000110 automatic       pointer                  dcl 374 in procedure "assign_initial" set ref 434*
                                                                                  445 446* 447 448 449 450 456 467* 497 513* 516 525
q1                              000112 automatic       pointer                  dcl 374 set ref 443* 444 445 447 496* 497 498 499
                                                                                  500 506
qualifier                 4            based           pointer                  level 2 packed packed unaligned dcl 12-3 set ref
                                                                                  127* 148* 187* 337*
r                               000132 automatic       pointer                  dcl 16 set ref 125* 127 133 147* 148 172* 172* 184*
                                                                                  185 186 187 188 195 228 283 285* 286 287 351* 424*
                                                                                  434* 605
ref_count                 0(18)        based           fixed bin(17,0)          level 2 packed packed unaligned dcl 12-3 set ref 99*
reference                15            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 8-3 in procedure "expand_initial"
                                                                                  set ref 94 94 96 97* 185 253 256 256 257 257 337
reference                              based           structure                level 1 dcl 12-3 in procedure "expand_initial" set
                                                                                  ref 185* 185
root                      3            based           pointer                  level 2 packed packed unaligned dcl 16-9 set ref
                                                                                  122* 340* 581* 586*
round                           000015 constant        fixed bin(15,0)          initial array dcl 22 ref 327 327
s                               000100 automatic       pointer                  dcl 16 set ref 40* 43 44 44 47 66 66 70 71 75 80 82
                                                                                  83 94 94 97 112 114 114 125 130 141 143 144 147
                                                                                  150 153* 156* 159* 162* 184* 185 188 190 193 243
                                                                                  244 246 247 248 250 251 251 256 257 260 420* 454*
                                                                                  504* 519* 577 577 601 607
scale                     2(28)        based           fixed bin(7,0)           level 2 packed packed unaligned dcl 8-3 set ref 247*
                                                                                  247
semantic_translator$abort       000050 constant        entry                    external dcl 2-446 ref 153 156 159 162 420 454 504
                                                                                  519
set                      33(03)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 44*
shared                    0(11)        based           bit(1)                   level 2 packed packed unaligned dcl 12-3 set ref 98*
size                      3            based           fixed bin(9,0)           level 2 dcl 13-3 ref 66 66 83
sp                                     parameter       pointer                  dcl 16 ref 14 40
st                                     parameter       pointer                  dcl 16 ref 14 41
stack                           000114 automatic       pointer                  array packed unaligned dcl 375 set ref 383 423* 424*
                                                                                  456* 506* 516
stat                            000142 automatic       pointer                  dcl 17 set ref 41* 116* 116 116* 579* 579 579*
statement                              based           structure                level 1 dcl 16-9 in procedure "expand_initial"
statement                11            based           pointer                  level 2 in structure "label" packed packed unaligned
                                                                                  dcl 11-1 in procedure "expand_initial" set ref
                                                                                  108*
statement_type           12(27)        based           bit(9)                   level 2 packed packed unaligned dcl 16-9 set ref
                                                                                  341*
static                   32(11)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 54*
                                                                                  69*
storage_block            31(12)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 69*
storage_class            32(09)        based           structure                level 3 packed packed unaligned dcl 8-3
string                    4            based           char                     level 2 in structure "token" dcl 13-3 in procedure
                                                                                  "expand_initial" ref 66 66 83
string                                                 builtin function         dcl 38 in procedure "expand_initial" set ref 80* 80
                                                                                  243* 243 244* 244
sub                                    constant        bit(9)                   initial dcl 19-8 ref 553
subscript                       000116 automatic       pointer                  dcl 16 set ref 181* 183* 183* 183* 227* 227* 228
                                                                                  239* 239* 287 348* 348*
swt                             000112 automatic       pointer                  dcl 16 set ref 51* 54 54 54 57 104* 104*
symbol                    3            based           pointer                  level 2 in structure "reference" packed packed
                                                                                  unaligned dcl 12-3 in procedure "expand_initial"
                                                                                  set ref 54 54 54 57 86 188*
symbol                                 based           structure                level 1 dcl 8-3 in procedure "expand_initial"
t                               000106 automatic       pointer                  dcl 374 set ref 388* 394 394 397* 439 441* 450 469
                                                                                  469 469* 478* 480* 500
temporary_reqd                         parameter       bit(1)                   dcl 380 set ref 372 385* 429* 460*
temporary_required              000156 automatic       bit(1)                   dcl 25 set ref 229* 229* 288* 288* 290
title                     1     000157 automatic       char(32)                 level 2 packed packed unaligned dcl 28 set ref 83*
token                                  based           structure                level 1 dcl 13-3 in procedure "expand_initial"
token                     5            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 8-3 in procedure "expand_initial"
                                                                                  ref 66 66 83 125 147 188 285 610
token_node                             constant        bit(9)                   initial dcl 23-5 ref 156 394 469
token_to_binary                 000052 constant        entry                    external dcl 2-459 ref 162 397 469
total_elements                  000147 automatic       fixed bin(15,0)          dcl 19 set ref 197* 211 211* 214* 214 519
total_size                      000120 automatic       pointer                  dcl 16 set ref 281* 288* 288* 290 293* 300 306 309*
                                                                                  310* 310* 314* 314* 321 324 325* 330 333 339
type                                   parameter       bit(9)                   dcl 575 in procedure "make_statement" set ref 572
                                                                                  579* 585*
type                                   based           bit(9)                   level 2 in structure "node" packed packed unaligned
                                                                                  dcl 23-27 in procedure "expand_initial" ref 156
                                                                                  165 394 405 469
type                      0(09)        based           bit(9)                   level 2 in structure "token" packed packed unaligned
                                                                                  dcl 13-3 in procedure "expand_initial" ref 159 394
                                                                                  469
units                           000150 automatic       fixed bin(3,0)           dcl 21 in procedure "expand_initial" set ref 318*
                                                                                  319 323 327 327
units                     0(14)        based           fixed bin(3,0)           level 2 in structure "reference" packed packed
                                                                                  unaligned dcl 12-3 in procedure "expand_initial"
                                                                                  set ref 101*
unspec                                                 builtin function         dcl 38 set ref 85 85 250* 250
upper                     6            based           pointer                  level 2 packed packed unaligned dcl 21-21 set ref
                                                                                  207 207* 300* 362
v                               000104 automatic       pointer                  dcl 374 in procedure "assign_initial" set ref 389*
                                                                                  403 405 424* 434* 467*
v                               000140 automatic       pointer                  dcl 16 in procedure "expand_initial" set ref 262*
                                                                                  264 265 266 266 268 268 270 271 273 276 277 318
v                                      parameter       pointer                  dcl 533 in procedure "assignf" ref 531 540 546 551
                                                                                  556 562
varying                  31(26)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 253
varying_ref               0(10)        based           bit(1)                   level 2 packed packed unaligned dcl 12-3 set ref
                                                                                  253*
virtual_origin            7            based           pointer                  level 2 packed packed unaligned dcl 21-1 set ref
                                                                                  266*
word_                                  constant        fixed bin(3,0)           initial dcl 9-5 ref 101 319
word_size                22            based           pointer                  level 2 packed packed unaligned dcl 8-3 set ref 330*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
a_format                               internal static bit(9)                   initial dcl 19-8
abs_fun                                internal static bit(9)                   initial dcl 19-8
acos_fun                               internal static bit(9)                   initial dcl 19-8
acosd_fun                              internal static bit(9)                   initial dcl 19-8
addbitno_fun                           internal static bit(9)                   initial dcl 19-8
addcharno_fun                          internal static bit(9)                   initial dcl 19-8
addr_fun_bits                          internal static bit(9)                   initial dcl 19-8
addrel_fun                             internal static bit(9)                   initial dcl 19-8
adjust_count                    000000 constant        entry                    external dcl 2-20
alloc_semantics                 000000 constant        entry                    external dcl 1-7
alloc_semantics$init_only       000000 constant        entry                    external dcl 1-12
allocate_statement                     internal static bit(9)                   initial dcl 18-3
allocation_fun                         internal static bit(9)                   initial dcl 19-8
allot_based                            internal static bit(9)                   initial dcl 19-8
allot_ctl                              internal static bit(9)                   initial dcl 19-8
allot_var                              internal static bit(9)                   initial dcl 19-8
and                                    internal static bit(9)                   initial dcl 14-3
and_bits                               internal static bit(9)                   initial dcl 19-8
arg_desc_type                          internal static bit(36)                  initial dcl 10-71
array_node                             internal static bit(9)                   initial dcl 23-5
arrow                                  internal static bit(9)                   initial dcl 14-3
asin_fun                               internal static bit(9)                   initial dcl 19-8
asind_fun                              internal static bit(9)                   initial dcl 19-8
assign_by_name                         internal static bit(9)                   initial dcl 19-8
assign_round                           internal static bit(9)                   initial dcl 19-8
assign_size_ck                         internal static bit(9)                   initial dcl 19-8
assign_zero                            internal static bit(9)                   initial dcl 19-8
assignment                             internal static bit(9)                   initial dcl 14-3
asterisk                               internal static bit(9)                   initial dcl 14-3
atan_fun                               internal static bit(9)                   initial dcl 19-8
atand_fun                              internal static bit(9)                   initial dcl 19-8
b_format                               internal static bit(9)                   initial dcl 19-8
baseno_fun                             internal static bit(9)                   initial dcl 19-8
baseptr_fun                            internal static bit(9)                   initial dcl 19-8
begin_statement                        internal static bit(9)                   initial dcl 18-3
bin_integer                            internal static bit(9)                   initial dcl 14-3
binary                                                 builtin function         dcl 38
binary_to_octal_string          000000 constant        entry                    external dcl 2-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 2-43
bindec                          000000 constant        entry                    external dcl 2-23
bindec$vs                       000000 constant        entry                    external dcl 2-28
binoct                          000000 constant        entry                    external dcl 2-33
bit                                                    builtin function         dcl 38
bit_                                   internal static fixed bin(3,0)           initial dcl 9-5
bit_pointer                            internal static bit(9)                   initial dcl 19-8
bit_string                             internal static bit(9)                   initial dcl 14-3
bit_to_char                            internal static bit(9)                   initial dcl 19-8
bit_type                               internal static bit(36)                  initial dcl 10-71
bitno_fun                              internal static bit(9)                   initial dcl 19-8
bits_per_binary_exponent               internal static fixed bin(31,0)          initial dcl 10-5
bits_per_character                     internal static fixed bin(31,0)          initial dcl 10-5
bits_per_decimal_digit                 internal static fixed bin(31,0)          initial dcl 10-5
bits_per_digit                         internal static fixed bin(31,1)          initial dcl 10-69
bits_per_double                        internal static fixed bin(31,0)          initial dcl 10-5
bits_per_half                          internal static fixed bin(31,0)          initial dcl 10-5
bits_per_packed_ptr                    internal static fixed bin(31,0)          initial dcl 10-5
bits_per_word                          internal static fixed bin(31,0)          initial dcl 10-5
block_node                             internal static bit(9)                   initial dcl 23-5
bn_format                              internal static bit(9)                   initial dcl 19-8
bool_fun                               internal static bit(9)                   initial dcl 19-8
bound_ck                               internal static bit(9)                   initial dcl 19-8
bound_node                             internal static bit(9)                   initial dcl 23-5
builtin                         000000 constant        entry                    external dcl 1-17
builtin_type                           internal static bit(36)                  initial dcl 10-71
by_context                             internal static bit(3)                   initial dcl 15-5
by_declare                             internal static bit(3)                   initial dcl 15-5
by_explicit_context                    internal static bit(3)                   initial dcl 15-5
by_implication                         internal static bit(3)                   initial dcl 15-5
by_name_agg_node                       internal static bit(9)                   initial dcl 23-5
byte_fun                               internal static bit(9)                   initial dcl 19-8
c_format                               internal static bit(9)                   initial dcl 19-8
call_statement                         internal static bit(9)                   initial dcl 18-3
cat                                    internal static bit(9)                   initial dcl 14-3
cat_string                             internal static bit(9)                   initial dcl 19-8
ceil_fun                               internal static bit(9)                   initial dcl 19-8
char_string                            internal static bit(9)                   initial dcl 14-3
char_type                              internal static bit(36)                  initial dcl 10-71
character_                             internal static fixed bin(3,0)           initial dcl 9-5
characters_per_double                  internal static fixed bin(31,0)          initial dcl 10-5
characters_per_half                    internal static fixed bin(31,0)          initial dcl 10-5
characters_per_word                    internal static fixed bin(31,0)          initial dcl 10-5
charno_fun                             internal static bit(9)                   initial dcl 19-8
check_star_extents              000000 constant        entry                    external dcl 1-27
clock_fun                              internal static bit(9)                   initial dcl 19-8
close_file                             internal static bit(9)                   initial dcl 19-8
close_statement                        internal static bit(9)                   initial dcl 18-3
codeptr_fun                            internal static bit(9)                   initial dcl 19-8
coff                                   automatic       fixed bin(31,0)          dcl 18
colon                                  internal static bit(9)                   initial dcl 14-3
column_format                          internal static bit(9)                   initial dcl 19-8
comma                                  internal static bit(9)                   initial dcl 14-3
compare_declaration             000000 constant        entry                    external dcl 1-31
compare_expression              000000 constant        entry                    external dcl 2-48
complex_fun                            internal static bit(9)                   initial dcl 19-8
complex_type                           internal static bit(36)                  initial dcl 10-71
conjg_fun                              internal static bit(9)                   initial dcl 19-8
constant_length                 000000 constant        entry                    external dcl 2-54
context_node                           internal static bit(9)                   initial dcl 23-5
context_processor               000000 constant        entry                    external dcl 1-38
continue_statement                     internal static bit(9)                   initial dcl 18-3
convert                         000000 constant        entry                    external dcl 2-60
convert$from_builtin            000000 constant        entry                    external dcl 2-72
convert$to_integer              000000 constant        entry                    external dcl 2-66
convert$to_target               000000 constant        entry                    external dcl 2-88
convert$to_target_fb            000000 constant        entry                    external dcl 2-82
convert$validate                000000 constant        entry                    external dcl 2-78
copy_expression$copy_sons       000000 constant        entry                    external dcl 2-99
copy_string                            internal static bit(9)                   initial dcl 19-8
copy_unique_expression          000000 constant        entry                    external dcl 2-103
copy_words                             internal static bit(9)                   initial dcl 19-8
cos_fun                                internal static bit(9)                   initial dcl 19-8
cosd_fun                               internal static bit(9)                   initial dcl 19-8
create_block                    000000 constant        entry                    external dcl 2-112
create_context                  000000 constant        entry                    external dcl 2-122
create_cross_reference          000000 constant        entry                    external dcl 2-128
create_default                  000000 constant        entry                    external dcl 2-132
create_identifier               000000 constant        entry                    external dcl 2-136
create_storage                  000000 constant        entry                    external dcl 2-179
create_token$init_hash_table    000000 constant        entry                    external dcl 2-197
create_token$protected          000000 constant        entry                    external dcl 2-199
cross_reference_node                   internal static bit(9)                   initial dcl 23-5
d                                      automatic       pointer                  dcl 17
dec_integer_type                       internal static bit(36)                  initial dcl 10-71
decbin                          000000 constant        entry                    external dcl 2-206
declare                         000000 constant        entry                    external dcl 1-41
declare_constant                000000 constant        entry                    external dcl 2-211
declare_constant$char           000000 constant        entry                    external dcl 2-224
declare_constant$desc           000000 constant        entry                    external dcl 2-229
declare_descriptor              000000 constant        entry                    external dcl 2-239
declare_descriptor$ctl          000000 constant        entry                    external dcl 2-249
declare_descriptor$param        000000 constant        entry                    external dcl 2-259
declare_picture                 000000 constant        entry                    external dcl 2-274
declare_picture_temp            000000 constant        entry                    external dcl 2-279
declare_statement                      internal static bit(9)                   initial dcl 18-3
declare_structure               000000 constant        entry                    external dcl 1-44
declare_temporary               000000 constant        entry                    external dcl 2-292
decode_node_id                  000000 constant        entry                    external dcl 2-300
decode_source_id                000000 constant        entry                    external dcl 2-306
default_area_size                      internal static fixed bin(31,0)          initial dcl 10-5
default_fix_bin_p                      internal static fixed bin(31,0)          initial dcl 10-5
default_fix_dec_p                      internal static fixed bin(31,0)          initial dcl 10-5
default_flt_bin_p                      internal static fixed bin(31,0)          initial dcl 10-5
default_flt_dec_p                      internal static fixed bin(31,0)          initial dcl 10-5
default_node                           internal static bit(9)                   initial dcl 23-5
default_statement                      internal static bit(9)                   initial dcl 18-3
defined_reference               000000 constant        entry                    external dcl 1-47
delete_file                            internal static bit(9)                   initial dcl 19-8
delete_statement                       internal static bit(9)                   initial dcl 18-3
desc_size                              internal static bit(9)                   initial dcl 19-8
digit_                                 internal static fixed bin(3,0)           initial dcl 9-5
digit_to_bit                           internal static bit(9)                   initial dcl 19-8
display_statement                      internal static bit(9)                   initial dcl 18-3
div                                    internal static bit(9)                   initial dcl 19-8
do_fun                                 internal static bit(9)                   initial dcl 19-8
do_semantics                    000000 constant        entry                    external dcl 1-57
do_spec                                internal static bit(9)                   initial dcl 19-8
do_statement                           internal static bit(9)                   initial dcl 18-3
e_format                               internal static bit(9)                   initial dcl 19-8
else_clause                            internal static bit(9)                   initial dcl 18-3
empty_area                             internal static bit(9)                   initial dcl 19-8
enable_on                              internal static bit(9)                   initial dcl 19-8
end_statement                          internal static bit(9)                   initial dcl 18-3
entry_statement                        internal static bit(9)                   initial dcl 18-3
entry_var_type                         internal static bit(36)                  initial dcl 10-71
environmentptr_fun                     internal static bit(9)                   initial dcl 19-8
eq                                     internal static bit(9)                   initial dcl 14-3
equal                                  internal static bit(9)                   initial dcl 19-8
error                           000000 constant        entry                    external dcl 2-314
error$omit_text                 000000 constant        entry                    external dcl 2-319
error_                          000000 constant        entry                    external dcl 2-324
error_$finish                   000000 constant        entry                    external dcl 2-343
error_$initialize_error         000000 constant        entry                    external dcl 2-341
error_$no_text                  000000 constant        entry                    external dcl 2-334
ex_prologue                            internal static bit(9)                   initial dcl 19-8
exit_statement                         internal static bit(9)                   initial dcl 18-3
exp                                    internal static bit(9)                   initial dcl 19-8
exp_fun                                internal static bit(9)                   initial dcl 19-8
expand_assign                   000000 constant        entry                    external dcl 1-62
expand_by_name                  000000 constant        entry                    external dcl 1-71
expand_infix                    000000 constant        entry                    external dcl 1-76
expand_initial                  000000 constant        entry                    external dcl 1-84
expand_prefix                   000000 constant        entry                    external dcl 1-89
expand_primitive                000000 constant        entry                    external dcl 1-97
expon                                  internal static bit(9)                   initial dcl 14-3
expression_semantics            000000 constant        entry                    external dcl 1-105
f_format                               internal static bit(9)                   initial dcl 19-8
fill_refer                      000000 constant        entry                    external dcl 1-113
fixed                                                  builtin function         dcl 38
fixed_bin                              internal static bit(9)                   initial dcl 14-3
fixed_dec                              internal static bit(9)                   initial dcl 14-3
float_bin                              internal static bit(9)                   initial dcl 14-3
float_dec                              internal static bit(9)                   initial dcl 14-3
floor_fun                              internal static bit(9)                   initial dcl 19-8
format_statement                       internal static bit(9)                   initial dcl 18-3
format_value_node                      internal static bit(9)                   initial dcl 23-5
fortran_read                           internal static bit(9)                   initial dcl 19-8
fortran_write                          internal static bit(9)                   initial dcl 19-8
free_based                             internal static bit(9)                   initial dcl 19-8
free_ctl                               internal static bit(9)                   initial dcl 19-8
free_node                       000000 constant        entry                    external dcl 2-345
free_statement                         internal static bit(9)                   initial dcl 18-3
free_var                               internal static bit(9)                   initial dcl 19-8
ftn_file_manip                         internal static bit(9)                   initial dcl 19-8
ftn_trans_loop                         internal static bit(9)                   initial dcl 19-8
function                        000000 constant        entry                    external dcl 1-125
ge                                     internal static bit(9)                   initial dcl 14-3
generic_selector                000000 constant        entry                    external dcl 1-134
get_array_size                  000000 constant        entry                    external dcl 2-348
get_data_trans                         internal static bit(9)                   initial dcl 19-8
get_edit_trans                         internal static bit(9)                   initial dcl 19-8
get_file                               internal static bit(9)                   initial dcl 19-8
get_list_trans                         internal static bit(9)                   initial dcl 19-8
get_statement                          internal static bit(9)                   initial dcl 18-3
get_string                             internal static bit(9)                   initial dcl 19-8
goto_statement                         internal static bit(9)                   initial dcl 18-3
greater_or_equal                       internal static bit(9)                   initial dcl 19-8
greater_than                           internal static bit(9)                   initial dcl 19-8
gt                                     internal static bit(9)                   initial dcl 14-3
half_                                  internal static fixed bin(3,0)           initial dcl 9-5
i_bin_integer                          internal static bit(9)                   initial dcl 14-3
i_dec_integer                          internal static bit(9)                   initial dcl 14-3
i_fixed_bin                            internal static bit(9)                   initial dcl 14-3
i_fixed_dec                            internal static bit(9)                   initial dcl 14-3
i_float_bin                            internal static bit(9)                   initial dcl 14-3
i_float_dec                            internal static bit(9)                   initial dcl 14-3
imag_fun                               internal static bit(9)                   initial dcl 19-8
index_after_fun                        internal static bit(9)                   initial dcl 19-8
index_before_fun                       internal static bit(9)                   initial dcl 19-8
index_fun                              internal static bit(9)                   initial dcl 19-8
index_rev_fun                          internal static bit(9)                   initial dcl 19-8
integer_type                           internal static bit(36)                  initial dcl 10-71
io_data_list_semantics          000000 constant        entry                    external dcl 1-143
io_data_list_semantics$format_list_semantics
                                000000 constant        entry                    external dcl 1-120
io_semantics                    000000 constant        entry                    external dcl 1-148
is_arith_constant                      internal static bit(9)                   initial dcl 14-47
is_arithmetic_constant                 internal static bit(9)                   initial dcl 14-47
is_constant                            internal static bit(9)                   initial dcl 14-47
is_decimal_constant                    internal static bit(9)                   initial dcl 14-47
is_delimiter                           internal static bit(9)                   initial dcl 14-47
is_float_constant                      internal static bit(9)                   initial dcl 14-47
is_identifier                          internal static bit(9)                   initial dcl 14-47
is_imaginary_constant                  internal static bit(9)                   initial dcl 14-47
is_integral_constant                   internal static bit(9)                   initial dcl 14-47
is_isub                                internal static bit(9)                   initial dcl 14-47
isub                                   internal static bit(9)                   initial dcl 14-3
jump                                   internal static bit(9)                   initial dcl 19-8
jump_false                             internal static bit(9)                   initial dcl 19-8
jump_if_ge                             internal static bit(9)                   initial dcl 19-8
jump_if_gt                             internal static bit(9)                   initial dcl 19-8
jump_if_le                             internal static bit(9)                   initial dcl 19-8
jump_if_lt                             internal static bit(9)                   initial dcl 19-8
jump_if_ne                             internal static bit(9)                   initial dcl 19-8
jump_true                              internal static bit(9)                   initial dcl 19-8
l_parn                                 internal static bit(9)                   initial dcl 19-8
label_array_element_node               internal static bit(9)                   initial dcl 23-5
label_node                             internal static bit(9)                   initial dcl 23-5
le                                     internal static bit(9)                   initial dcl 14-3
left_parn                              internal static bit(9)                   initial dcl 14-3
length_fun                             internal static bit(9)                   initial dcl 19-8
less_or_equal                          internal static bit(9)                   initial dcl 19-8
less_than                              internal static bit(9)                   initial dcl 19-8
line_format                            internal static bit(9)                   initial dcl 19-8
local_label_var_type                   internal static bit(36)                  initial dcl 10-71
locate_file                            internal static bit(9)                   initial dcl 19-8
locate_statement                       internal static bit(9)                   initial dcl 18-3
lock_file                              internal static bit(9)                   initial dcl 19-8
lock_fun                               internal static bit(9)                   initial dcl 19-8
lock_statement                         internal static bit(9)                   initial dcl 18-3
log10_fun                              internal static bit(9)                   initial dcl 19-8
log2_fun                               internal static bit(9)                   initial dcl 19-8
log_fun                                internal static bit(9)                   initial dcl 19-8
lookup                          000000 constant        entry                    external dcl 1-153
lt                                     internal static bit(9)                   initial dcl 14-3
machine_state_node                     internal static bit(9)                   initial dcl 23-5
make_desc                              internal static bit(9)                   initial dcl 19-8
make_non_quick                  000000 constant        entry                    external dcl 1-162
match_arguments                 000000 constant        entry                    external dcl 1-166
max_area_size                          internal static fixed bin(31,0)          initial dcl 10-5
max_bit_string                         internal static fixed bin(31,0)          initial dcl 10-5
max_bit_string_constant                internal static fixed bin(31,0)          initial dcl 10-5
max_block_number                       internal static fixed bin(17,0)          initial dcl 17-74
max_char_string                        internal static fixed bin(31,0)          initial dcl 10-5
max_char_string_constant               internal static fixed bin(31,0)          initial dcl 10-5
max_fun                                internal static bit(9)                   initial dcl 19-8
max_identifier_length                  internal static fixed bin(31,0)          initial dcl 10-5
max_index_register_value               internal static fixed bin(31,0)          initial dcl 10-5
max_length_precision                   internal static fixed bin(31,0)          initial dcl 10-5
max_list_elements                      internal static fixed bin(17,0)          initial dcl 22-12
max_number_of_dimensions               internal static fixed bin(31,0)          initial dcl 10-5
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 20-15
max_offset_precision                   internal static fixed bin(31,0)          initial dcl 10-5
max_p_bin_or_dec                       internal static fixed bin(31,0)          initial dcl 10-5
max_p_dec                              internal static fixed bin(31,0)          initial dcl 10-5
max_p_fix_bin_1                        internal static fixed bin(31,0)          initial dcl 10-5
max_p_fix_bin_2                        internal static fixed bin(31,0)          initial dcl 10-5
max_p_flt_bin_1                        internal static fixed bin(31,0)          initial dcl 10-5
max_p_flt_bin_2                        internal static fixed bin(31,0)          initial dcl 10-5
max_scale                              internal static fixed bin(31,0)          initial dcl 10-5
max_signed_index_register_value        internal static fixed bin(31,0)          initial dcl 10-5
max_signed_xreg_precision              internal static fixed bin(31,0)          initial dcl 10-5
max_uns_xreg_precision                 internal static fixed bin(31,0)          initial dcl 10-5
max_words_per_variable                 internal static fixed bin(31,0)          initial dcl 10-5
merge_attributes                000000 constant        entry                    external dcl 2-355
min_area_size                          internal static fixed bin(31,0)          initial dcl 10-5
min_fun                                internal static bit(9)                   initial dcl 19-8
min_scale                              internal static fixed bin(31,0)          initial dcl 10-5
minus                                  internal static bit(9)                   initial dcl 14-3
mod4_                                  internal static fixed bin(3,0)           initial dcl 9-5
mod_bit                                internal static bit(9)                   initial dcl 19-8
mod_byte                               internal static bit(9)                   initial dcl 19-8
mod_fun                                internal static bit(9)                   initial dcl 19-8
mod_half                               internal static bit(9)                   initial dcl 19-8
mod_word                               internal static bit(9)                   initial dcl 19-8
ne                                     internal static bit(9)                   initial dcl 14-3
negate                                 internal static bit(9)                   initial dcl 19-8
ngt                                    internal static bit(9)                   initial dcl 14-3
nlt                                    internal static bit(9)                   initial dcl 14-3
no_token                               internal static bit(9)                   initial dcl 14-3
not                                    internal static bit(9)                   initial dcl 14-3
not_bits                               internal static bit(9)                   initial dcl 19-8
not_equal                              internal static bit(9)                   initial dcl 19-8
off                                    automatic       pointer                  dcl 16
off_fun                                internal static bit(9)                   initial dcl 19-8
offset_adder                    000000 constant        entry                    external dcl 1-172
on_statement                           internal static bit(9)                   initial dcl 18-3
open_file                              internal static bit(9)                   initial dcl 19-8
open_statement                         internal static bit(9)                   initial dcl 18-3
operator_node                          internal static bit(9)                   initial dcl 23-5
operator_semantics              000000 constant        entry                    external dcl 1-184
optimizer                       000000 constant        entry                    external dcl 2-361
or                                     internal static bit(9)                   initial dcl 14-3
or_bits                                internal static bit(9)                   initial dcl 19-8
pack                                   internal static bit(9)                   initial dcl 19-8
packed_digits_per_character            internal static fixed bin(31,0)          initial dcl 10-5
page_format                            internal static bit(9)                   initial dcl 19-8
param_desc_ptr                         internal static bit(9)                   initial dcl 19-8
param_ptr                              internal static bit(9)                   initial dcl 19-8
parse_error                     000000 constant        entry                    external dcl 2-364
parse_error$no_text             000000 constant        entry                    external dcl 2-368
percent                                internal static bit(9)                   initial dcl 14-3
period                                 internal static bit(9)                   initial dcl 14-3
picture_format                         internal static bit(9)                   initial dcl 19-8
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 2-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 2-372
pl1_mod_fun                            internal static bit(9)                   initial dcl 19-8
pl1_print$for_lex               000000 constant        entry                    external dcl 2-418
pl1_print$non_varying           000000 constant        entry                    external dcl 2-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 2-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 2-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 2-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 2-414
pl1_print$varying               000000 constant        entry                    external dcl 2-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 2-395
plus                                   internal static bit(9)                   initial dcl 14-3
pointer_type                           internal static bit(36)                  initial dcl 10-71
prefix_plus                            internal static bit(9)                   initial dcl 19-8
procedure_statement                    internal static bit(9)                   initial dcl 18-3
propagate_bit                   000000 constant        entry                    external dcl 1-192
ptr_fun                                internal static bit(9)                   initial dcl 19-8
put_control                            internal static bit(9)                   initial dcl 19-8
put_data_trans                         internal static bit(9)                   initial dcl 19-8
put_edit_trans                         internal static bit(9)                   initial dcl 19-8
put_field                              internal static bit(9)                   initial dcl 19-8
put_field_chk                          internal static bit(9)                   initial dcl 19-8
put_file                               internal static bit(9)                   initial dcl 19-8
put_list_trans                         internal static bit(9)                   initial dcl 19-8
put_statement                          internal static bit(9)                   initial dcl 18-3
put_string                             internal static bit(9)                   initial dcl 19-8
r_format                               internal static bit(9)                   initial dcl 19-8
r_parn                                 internal static bit(9)                   initial dcl 19-8
range_ck                               internal static bit(9)                   initial dcl 19-8
rank_fun                               internal static bit(9)                   initial dcl 19-8
read_file                              internal static bit(9)                   initial dcl 19-8
read_statement                         internal static bit(9)                   initial dcl 18-3
real_fun                               internal static bit(9)                   initial dcl 19-8
real_type                              internal static bit(36)                  initial dcl 10-71
record_io                              internal static bit(9)                   initial dcl 19-8
refer                                  internal static bit(9)                   initial dcl 19-8
refer_extent                    000000 constant        entry                    external dcl 2-426
reference_node                         internal static bit(9)                   initial dcl 23-5
rel_fun                                internal static bit(9)                   initial dcl 19-8
repeat_fun                             internal static bit(9)                   initial dcl 19-8
reserve$clear                   000000 constant        entry                    external dcl 2-430
reserve$declare_lib             000000 constant        entry                    external dcl 2-434
reserve$read_lib                000000 constant        entry                    external dcl 2-439
return_bits                            internal static bit(9)                   initial dcl 19-8
return_statement                       internal static bit(9)                   initial dcl 18-3
return_string                          internal static bit(9)                   initial dcl 19-8
return_value                           internal static bit(9)                   initial dcl 19-8
return_words                           internal static bit(9)                   initial dcl 19-8
reverse_fun                            internal static bit(9)                   initial dcl 19-8
revert_on                              internal static bit(9)                   initial dcl 19-8
revert_statement                       internal static bit(9)                   initial dcl 18-3
rewrite_file                           internal static bit(9)                   initial dcl 19-8
rewrite_statement                      internal static bit(9)                   initial dcl 18-3
right_parn                             internal static bit(9)                   initial dcl 14-3
round_fun                              internal static bit(9)                   initial dcl 19-8
search_fun                             internal static bit(9)                   initial dcl 19-8
search_rev_fun                         internal static bit(9)                   initial dcl 19-8
segno_fun                              internal static bit(9)                   initial dcl 19-8
semantic_translator             000000 constant        entry                    external dcl 2-444
semantic_translator$call_es     000000 constant        entry                    external dcl 1-196
semantic_translator$error       000000 constant        entry                    external dcl 2-450
semi_colon                             internal static bit(9)                   initial dcl 14-3
setbitno_fun                           internal static bit(9)                   initial dcl 19-8
setcharno_fun                          internal static bit(9)                   initial dcl 19-8
sf_par_node                            internal static bit(9)                   initial dcl 23-5
share_expression                000000 constant        entry                    external dcl 2-454
sign_fun                               internal static bit(9)                   initial dcl 19-8
signal_on                              internal static bit(9)                   initial dcl 19-8
signal_statement                       internal static bit(9)                   initial dcl 18-3
simplify_expression             000000 constant        entry                    external dcl 1-205
simplify_offset                 000000 constant        entry                    external dcl 1-212
sin_fun                                internal static bit(9)                   initial dcl 19-8
sind_fun                               internal static bit(9)                   initial dcl 19-8
skip_format                            internal static bit(9)                   initial dcl 19-8
slash                                  internal static bit(9)                   initial dcl 14-3
source_node                            internal static bit(9)                   initial dcl 23-5
sqrt_fun                               internal static bit(9)                   initial dcl 19-8
stack_ptr                              internal static bit(9)                   initial dcl 19-8
stackbaseptr_fun                       internal static bit(9)                   initial dcl 19-8
stackframeptr_fun                      internal static bit(9)                   initial dcl 19-8
stacq_fun                              internal static bit(9)                   initial dcl 19-8
statement_node                         internal static bit(9)                   initial dcl 23-5
std_arg_list                           internal static bit(9)                   initial dcl 19-8
std_call                               internal static bit(9)                   initial dcl 19-8
std_entry                              internal static bit(9)                   initial dcl 19-8
std_return                             internal static bit(9)                   initial dcl 19-8
stop                                   internal static bit(9)                   initial dcl 19-8
stop_statement                         internal static bit(9)                   initial dcl 18-3
storage_block_type                     internal static bit(36)                  initial dcl 10-71
stream_prep                            internal static bit(9)                   initial dcl 19-8
subscripter                     000000 constant        entry                    external dcl 1-216
symbol_node                            internal static bit(9)                   initial dcl 23-5
system_on_unit                         internal static bit(9)                   initial dcl 18-3
tan_fun                                internal static bit(9)                   initial dcl 19-8
tand_fun                               internal static bit(9)                   initial dcl 19-8
temporary_node                         internal static bit(9)                   initial dcl 23-5
terminate_trans                        internal static bit(9)                   initial dcl 19-8
translate_fun                          internal static bit(9)                   initial dcl 19-8
trunc_fun                              internal static bit(9)                   initial dcl 19-8
unknown_statement                      internal static bit(9)                   initial dcl 18-3
unlock_file                            internal static bit(9)                   initial dcl 19-8
unlock_statement                       internal static bit(9)                   initial dcl 18-3
unpack                                 internal static bit(9)                   initial dcl 19-8
validate                        000000 constant        entry                    external dcl 1-225
vclock_fun                             internal static bit(9)                   initial dcl 19-8
verify_fun                             internal static bit(9)                   initial dcl 19-8
verify_ltrim_fun                       internal static bit(9)                   initial dcl 19-8
verify_rev_fun                         internal static bit(9)                   initial dcl 19-8
verify_rtrim_fun                       internal static bit(9)                   initial dcl 19-8
wait_statement                         internal static bit(9)                   initial dcl 18-3
word_to_mod2                           internal static bit(9)                   initial dcl 19-8
word_to_mod4                           internal static bit(9)                   initial dcl 19-8
word_to_mod8                           internal static bit(9)                   initial dcl 19-8
wordno_fun                             internal static bit(9)                   initial dcl 19-8
words_per_condition_var                internal static fixed bin(31,0)          initial dcl 10-5
words_per_entry_var                    internal static fixed bin(31,0)          initial dcl 10-5
words_per_file_var                     internal static fixed bin(31,0)          initial dcl 10-5
words_per_fix_bin_1                    internal static fixed bin(31,0)          initial dcl 10-5
words_per_fix_bin_2                    internal static fixed bin(31,0)          initial dcl 10-5
words_per_flt_bin_1                    internal static fixed bin(31,0)          initial dcl 10-5
words_per_flt_bin_2                    internal static fixed bin(31,0)          initial dcl 10-5
words_per_format                       internal static fixed bin(31,0)          initial dcl 10-5
words_per_label_var                    internal static fixed bin(31,0)          initial dcl 10-5
words_per_offset                       internal static fixed bin(31,0)          initial dcl 10-5
words_per_packed_pointer               internal static fixed bin(31,0)          initial dcl 10-5
words_per_pointer                      internal static fixed bin(31,0)          initial dcl 10-5
words_per_varying_string_header        internal static fixed bin(31,0)          initial dcl 10-5
write_file                             internal static bit(9)                   initial dcl 19-8
write_statement                        internal static bit(9)                   initial dcl 18-3
x_format                               internal static bit(9)                   initial dcl 19-8
xor_bits                               internal static bit(9)                   initial dcl 19-8

NAMES DECLARED BY EXPLICIT CONTEXT.
action                          000000 constant        label                    array(0:2) dcl 410 ref 408
addf                            003746 constant        entry                    internal dcl 546 ref 183 183 415 441 489 492 494
array_initialization            001253 constant        label                    dcl 181 ref 144
assign_initial                  002620 constant        entry                    internal dcl 372 ref 229 229 288 288 467
assignf                         003672 constant        entry                    internal dcl 531 ref 94 94 102 102 104 104 172 172
                                                                                  183 227 227 239 239 348 348 351 424 434
common                          003777 constant        label                    dcl 560 ref 549 554
exit                            004024 constant        label                    dcl 565 ref 544
expand_initial                  000046 constant        entry                    external dcl 14
link_father                     004163 constant        entry                    internal dcl 593 ref 130 150 190
make_statement                  004030 constant        entry                    internal dcl 572 ref 60 94 102 104 105 172 227 229
                                                                                  239 240 288 348 366
multf                           003770 constant        entry                    internal dcl 556 ref 309 310 314 478 480
next                            003601 constant        label                    dcl 508 ref 427 458
subf                            003757 constant        entry                    internal dcl 551 ref 225
unravel                         001104 constant        label                    dcl 153 ref 169

NAME DECLARED BY CONTEXT OR IMPLICATION.
divide                                                 builtin function         ref 327 383

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      4670        4744    4407        4700
Length      5666    4407        54         705     260           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
expand_initial                      272 external procedure  is an external procedure.  
assign_initial                     1150 internal procedure  calls itself recursively.  
assignf                              76 internal procedure  is called by several nonquick procedures.  
make_statement                          internal procedure  shares stack frame of external procedure expand_initial.  
link_father                             internal procedure  shares stack frame of external procedure expand_initial.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
assign_initial           000100 numb                        assign_initial
                         000102 p                           assign_initial
                         000104 v                           assign_initial
                         000106 t                           assign_initial
                         000110 q                           assign_initial
                         000112 q1                          assign_initial
                         000114 stack                       assign_initial
                         002114 i                           assign_initial
                         002115 k                           assign_initial
                         002116 l                           assign_initial
                         002117 items                       assign_initial
                         002120 limit                       assign_initial
                         002121 n                           assign_initial
                         002122 c_numb                      assign_initial
                         002123 case                        assign_initial
assignf                  000100 q                           assignf
                         000102 opcode                      assignf
expand_initial           000100 s                           expand_initial
                         000102 blk                         expand_initial
                         000104 p                           expand_initial
                         000106 q                           expand_initial
                         000110 lab                         expand_initial
                         000112 swt                         expand_initial
                         000114 increase                    expand_initial
                         000116 subscript                   expand_initial
                         000120 total_size                  expand_initial
                         000122 nest                        expand_initial
                         000124 allocate                    expand_initial
                         000126 one                         expand_initial
                         000130 ar                          expand_initial
                         000132 r                           expand_initial
                         000134 a                           expand_initial
                         000136 b                           expand_initial
                         000140 v                           expand_initial
                         000142 stat                        expand_initial
                         000144 c_total_size                expand_initial
                         000145 n                           expand_initial
                         000146 i                           expand_initial
                         000147 total_elements              expand_initial
                         000150 units                       expand_initial
                         000151 optable                     expand_initial
                         000155 constant_extents            expand_initial
                         000156 temporary_required          expand_initial
                         000157 fab                         expand_initial
                         000202 p                           make_statement
                         000212 i                           link_father
                         000213 count                       link_father
                         000214 p                           link_father
                         000216 q                           link_father

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_char_temp     call_ext_out_desc   call_ext_out        call_int_this       call_int_other      return_mac
shorten_stack       ext_entry           int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
copy_expression               create_array                  create_bound                  create_label
create_list                   create_operator               create_reference              create_statement
create_statement$prologue     create_symbol                 create_token                  declare_constant$bit
declare_constant$integer      declare_integer               declare_pointer               get_size
semantic_translator$abort     token_to_binary

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     14 000042        23 000053        40 000073        41 000077        42 000102        43 000114        44 000117
     47 000124        49 000127        50 000144        51 000167        52 000204        54 000206        57 000216
     60 000220        66 000222        68 000277        69 000303        70 000307        71 000314        72 000320
     73 000322        74 000331        75 000336        80 000340        82 000346        83 000353        84 000360
     85 000363        86 000403        92 000407        93 000424        94 000427        95 000446        96 000463
     97 000467        98 000501        99 000503       100 000506       101 000511       102 000515       104 000531
    105 000545       106 000551       107 000567       108 000572       109 000573       112 000574       114 000577
    116 000602       118 000633       119 000636       120 000637       122 000664       125 000705       127 000721
    130 000745       133 000752       134 000755       136 001014       138 001033       141 001034       143 001037
    144 001041       147 001044       148 001057       150 001077       153 001104       156 001123       159 001144
    162 001166       165 001220       168 001231       169 001233       172 001234       176 001252       181 001253
    183 001264       184 001310       185 001321       186 001327       187 001331       188 001351       190 001354
    193 001360       194 001363       195 001367       197 001403       198 001404       202 001406       203 001416
    205 001441       207 001442       209 001465       211 001466       214 001500       215 001506       221 001512
    223 001515       225 001536       227 001552       228 001566       229 001572       231 001621       239 001622
    240 001650       241 001654       242 001673       243 001676       244 001703       245 001712       246 001714
    247 001716       248 001722       250 001724       251 001733       253 001740       256 001747       257 001753
    260 001755       262 001761       264 001774       265 002001       266 002005       268 002011       270 002015
    271 002017       273 002023       275 002036       276 002041       277 002043       278 002045       281 002065
    282 002067       283 002070       285 002072       286 002106       287 002124       288 002127       290 002153
    293 002162       294 002173       300 002174       301 002177       306 002201       309 002215       310 002243
    313 002276       314 002277       318 002313       319 002320       321 002322       323 002326       324 002344
    325 002347       326 002350       327 002351       330 002357       331 002362       333 002364       335 002370
    336 002372       337 002407       339 002426       340 002430       341 002445       348 002447       349 002475
    350 002512       351 002515       353 002532       355 002533       356 002542       357 002543       358 002560
    359 002563       361 002603       362 002606       363 002610       364 002611       366 002614       368 002616
    372 002617       376 002625       383 002626       384 002631       385 002633       387 002635       388 002644
    389 002647       391 002652       392 002653       394 002655       397 002666       398 002701       399 002704
    400 002705       401 002710       403 002712       405 002717       408 002725       410 002727       415 002737
    417 002766       418 002775       419 002776       420 003000       423 003017       424 003023       425 003042
    427 003044       429 003045       434 003050       436 003064       439 003075       441 003104       443 003117
    444 003134       445 003140       446 003142       447 003157       448 003162       449 003177       450 003202
    452 003204       453 003205       454 003206       456 003225       458 003230       460 003231       465 003234
    466 003236       467 003237       469 003263       472 003310       473 003313       475 003315       478 003327
    480 003360       482 003373       485 003407       489 003420       490 003445       491 003447       492 003450
    494 003466       496 003513       497 003530       498 003533       499 003550       500 003553       502 003555
    503 003556       504 003557       506 003576       508 003601       513 003605       515 003620       516 003627
    517 003632       519 003634       525 003665       531 003671       536 003677       539 003720       540 003734
    541 003741       544 003744       546 003745       548 003753       549 003755       551 003756       553 003764
    554 003766       556 003767       558 003775       560 003777       562 004014       563 004021       565 004024
    572 004030       577 004032       579 004036       581 004067       582 004107       583 004111       585 004112
    586 004140       589 004160       593 004163       599 004164       601 004165       602 004174       603 004175
    605 004201       607 004216       609 004221       610 004231       611 004235       612 004237       614 004241


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
