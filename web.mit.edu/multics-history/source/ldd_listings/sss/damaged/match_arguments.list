THIS FILE IS DAMAGED

	COMPILATION LISTING OF SEGMENT match_arguments
	Compiled by: Multics PL/I Compiler, Release 32c, of June 16, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 07/31/89  1354.4 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 /* Modified 780712 by PG for unsigned
       12*   Modified 790812 by RAB to fix 1797 (erroneous WARNING 47 when array of
       13*	character strings passed to function expecting star extents lengths.)
       14*   Modified 4 October 1980 by M. N. Davidoff to eliminate internal static.  Fixes 2023.
       15**/
       16 /* format: style3,tree */
       17 match_arguments:
       18      procedure (pa, pb) returns (bit (1) aligned);
       19 
       20 dcl	pa		ptr;
       21 dcl	pb		ptr;
       22 
       23 /* automatic */
       24 
       25 dcl	a		ptr;
       26 dcl	a_reference	bit (1) aligned;
       27 dcl	a_root		ptr;
       28 dcl	b		ptr;
       29 dcl	found_brother	bit (1) aligned;
       30 dcl	parent_is_scalar	bit (1) aligned;
       31 
       32 /* builtin */
       33 
       34 dcl	(null, string, unspec)
       35 			builtin;
       36 
  1     1 /* BEGIN INCLUDE FILE ... semant.incl.pl1 */
  1     2 
  1     3 /* Modified: 30 Aug 1979 by PCK to fix 1804 and 1823 */
  1     4 /* Modified: 26 Aug 1979 by PCK to implement by name assignment */
  1     5 
  1     6 
  1     7 declare	alloc_semantics	entry(pointer,pointer,pointer);
  1     8 			/* parameter 1:	(input)	block node pointer		*/
  1     9 			/* parameter 2:	(input)	statement node pointer	*/
  1    10 			/* parameter 3:	(in/out)	tree pointer		*/
  1    11 
  1    12 declare	alloc_semantics$init_only entry(pointer,pointer,pointer);
  1    13 			/* parameter 1:	(input)	qualifier pointer		*/
  1    14 			/* parameter 2:	(input)	statement node pointer	*/
  1    15 			/* parameter 3:	(input)	symbol node pointer		*/
  1    16 
  1    17 declare	builtin		entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  1    18 			returns(pointer);
  1    19 			/* parameter 1:	(input)	block node pointer		*/
  1    20 			/* parameter 2:	(input)	statement node pointer	*/
  1    21 			/* parameter 3:	(input)	tree pointer		*/
  1    22 			/* parameter 4:	(input)	subscript pointer		*/
  1    23 			/* parameter 5:	(input)	builtin symbol node pointer	*/
  1    24 			/* parameter 6:	(in/out)	context			*/
  1    25 			/* return:	(output)	tree pointer		*/
  1    26 
  1    27 declare	check_star_extents	entry(pointer,pointer);
  1    28 			/* parameter 1:	(input) symbol node of procedure	*/
  1    29 			/* parameter 2:	(input) argument list pointer		*/
  1    30 
  1    31 declare	compare_declaration	entry(pointer,pointer,bit(1) aligned) reducible
  1    32 			returns(bit(1) aligned);
  1    33 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  1    34 			/* parameter 2:	(input)	symbol node ptr	*/
  1    35 			/* parameter 3:	(input)	"1"b if aligned attribute ignored for string	*/
  1    36 			/* return:	(output)	compare bit		*/
  1    37 
  1    38 declare	context_processor	entry(pointer,label);
  1    39 			/* parameter 1:	(input)	root block node pointer	*/
  1    40 
  1    41 declare	declare		entry(pointer);
  1    42 			/* parameter 1:	(input)	symbol node pointer		*/
  1    43 
  1    44 declare	declare_structure	entry(pointer);
  1    45 			/* parameter 1:	(input)	symbol node pointer		*/
  1    46 
  1    47 declare	defined_reference	entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  1    48 			returns(pointer);
  1    49 			/* parameter 1:	(input)	block node pointer		*/
  1    50 			/* parameter 2:	(input)	statement node pointer	*/
  1    51 			/* parameter 3:	(input)	tree pointer		*/
  1    52 			/* parameter 4:	(input)	subscript list pointer or null*/
  1    53 			/* parameter 5:	(input)	symbol node pointer		*/
  1    54 			/* parameter 6:	(in/out)	context			*/
  1    55 			/* return:	(output)	tree pointer		*/
  1    56 
  1    57 declare	do_semantics	entry(pointer,pointer,pointer);
  1    58 			/* parameter 1:	(input)	block node pointer		*/
  1    59 			/* parameter 2:	(input)	statement node pointer	*/
  1    60 			/* parameter 3:	(input)	tree pointer		*/
  1    61 
  1    62 declare	expand_assign	entry(pointer,pointer,pointer,bit(36) aligned,pointer)
  1    63 			returns(pointer);
  1    64 			/* parameter 1:	(input)	block node pointer		*/
  1    65 			/* parameter 2:	(input)	statement node pointer	*/
  1    66 			/* parameter 3:	(input)	tree pointer		*/
  1    67 			/* parameter 4:	(in/out)	context			*/
  1    68 			/* parameter 5:	(input)	aggregate reference node ptr	*/
  1    69 			/* return:	(output)	tree pointer		*/
  1    70 
  1    71 declare	expand_by_name	entry(pointer,pointer,pointer);
  1    72 			/* parameter 1:	(input)	block node pointer		*/
  1    73 			/* parameter 2:	(input)	statement node pointer	*/
  1    74 			/* parameter 3:	(input/output)	tree pointer		*/
  1    75 
  1    76 declare	expand_infix	entry(pointer,pointer,pointer,bit(36) aligned)
  1    77 			returns(pointer);
  1    78 			/* parameter 1:	(input)	block node pointer		*/
  1    79 			/* parameter 2:	(input)	statement node pointer	*/
  1    80 			/* parameter 3:	(input)	tree pointer		*/
  1    81 			/* parameter 4:	(in/out)	context			*/
  1    82 			/* return:	(output)	tree pointer		*/
  1    83 
  1    84 declare	expand_initial	entry(pointer,pointer,pointer);
  1    85 			/* parameter 1:	(input)	symbol node pointer		*/
  1    86 			/* parameter 2:	(input)	statement node pointer	*/
  1    87 			/* parameter 3:	(input)	locator			*/
  1    88 
  1    89 declare	expand_prefix	entry(pointer,pointer,pointer,bit(36) aligned)
  1    90 			returns(pointer);
  1    91 			/* parameter 1:	(input)	block node pointer		*/
  1    92 			/* parameter 2:	(input)	statement node pointer	*/
  1    93 			/* parameter 3:	(input)	tree pointer		*/
  1    94 			/* parameter 4:	(in/out)	context			*/
  1    95 			/* return:	(output)	tree pointer		*/
  1    96 
  1    97 declare	expand_primitive	entry(pointer,pointer,pointer,bit(36) aligned)
  1    98 			returns(pointer);
  1    99 			/* parameter 1:	(input)	block node pointer		*/
  1   100 			/* parameter 2:	(input)	statement node pointer	*/
  1   101 			/* parameter 3:	(input)	tree pointer		*/
  1   102 			/* parameter 4:	(input)	context			*/
  1   103 			/* return:	(output)	tree pointer		*/
  1   104 
  1   105 declare	expression_semantics entry(pointer,pointer,pointer,bit(36) aligned)
  1   106 			returns(pointer);
  1   107 			/* parameter 1:	(input)	block node pointer		*/
  1   108 			/* parameter 2:	(input)	statement node pointer	*/
  1   109 			/* parameter 3:	(input)	tree pointer		*/
  1   110 			/* parameter 4:	(in/out)	context			*/
  1   111 			/* return:	(output)	tree pointer		*/
  1   112 
  1   113 declare	fill_refer	entry(pointer,pointer,bit(1) aligned)
  1   114 			returns(pointer);
  1   115 			/* parameter 1:	(input)	null,ref node,op node ptr */
  1   116 			/* parameter 2:	(input)	null,ref node,op node ptr */
  1   117 			/* parameter 3:	(input)	copy switch for param 2 */
  1   118 			/* return:	(output)	ptr to processed tree */
  1   119 
  1   120 declare	io_data_list_semantics$format_list_semantics entry(pointer,pointer,pointer);
  1   121 			/* parameter 1:	(input)	block node pointer		*/
  1   122 			/* parameter 2:	(input)	statement node pointer	*/
  1   123 			/* parameter 3:	(in/out)	tree pointer		*/
  1   124 
  1   125 declare	function		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   126 			returns(pointer);
  1   127 			/* parameter 1:	(input)	block node pointer		*/
  1   VIP7801                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ‚2    Mulhaupt                               ®$4@f                                                        Mulhaupt                                Multics                 =      Oo÷∂ñ  T`…ù  T1¿0none   STY_TELNET                                                                On—ˇÜú                                                                                                                                                                                                                                                                                                                                                                                                                                          æU    fwm                                                                                                    Martinson                       fwm     SysMaint              K   +      S≠Õ∫™Ú  S∏äâ≥¯  S¨¢Zı∞none   STY                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Ä o    rb                                                                                                     Bubric                          rb      CDC                                                                                                                                       Lü≤{B˝                                                                  µ3    Washburn                               ™~ÿæ¥÷0                                                        Washburn                                NMLCOMM               a         S˛8©Ü  TÇF∏ıå  TMõ¢Cnone   STY_TELNET                                                                SãÅÕFB                                                                Ä %X    Kiernan                            Ä   6ﬁÏÑê4Nä                        6ﬁÏÑê4Nä                        Kiernan                                 NMLPROD         à                                                                                                                         Q™2Lá                                                                  •    Kiernan                            Ä   (ñº¸ÙJ¥‹                        6ﬁÏÑê4Nä                        Kiernan                                 TOBSWE          Å               QÌ⁄Ç3  QÌ⁄Ç3  QÏ°ænone   WY50_80C                                                                  Q™3o}»                                                        expression	entry(pointer,fixed bin,bit(1)aligned);
  1   206 			/* parameter 1:	(in/out)	tree pointer		*/
  1   207 			/* parameter 2:	(output)	value of constant, if the entire tree
  1   208*						is simplified		*/
  1   209 			/* parameter 3:	(output)	bit indicating if the tree has
  1   210*						been simplified		*/
  1   211 
  1   212 declare	simplify_offset	entry(pointer,bit(36) aligned);
  1   213 			/* parameter 1:	(input)	reference node pointer	*/
  1   214 			/* parameter 2:	(input)	context			*/
  1   215 
  1   216 declare	subscripter	entry(pointer,pointer,pointer,pointer,pointer)
  1   217 			returns(pointer);
  1   218 			/* parameter 1:	(input)	block node pointer		*/
  1   219 			/* parameter 2:	(input)	statement node pointer	*/
  1   220 			/* parameter 3:	(input)	tree pointer		*/
  1   221 			/* parameter 4:	(in/out)	subscript list pointer	*/
  1   222 			/* parameter 5:	(input)	symbol node pointer		*/
  1   223 			/* return:	(output)	reference node pointer	*/
  1   224 
  1   225 declare	validate		entry(pointer);
  1   226 			/* parameter 1:	(input)	symbol node pointer		*/
  1   227 
  2     1 /****^  *********************************************************
  2     2*        *                                                       *
  2     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  2     4*        *                                                       *
  2     5*        ********************************************************* */
  2     6 
  2     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  2     8 
  2     9 
  2    10 /****^  HISTORY COMMENTS:
  2    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  2    12*     install(89-07-31,MR12.3-1066):	
  2    13*     Removed the obsolete parameter source_line from the dcl of error_().
  2    14*                                                   END HISTORY COMMENTS */
  2    15 
  2    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  2    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  2    18* */
  2    19 
  2    20 declare	adjust_count	entry(pointer);
  2    21 			/* parameter 1:	(input)	any node pointer		*/
  2    22 
  2    23 declare	bindec		entry(fixed bin(31)) reducible
  2    24 			returns(character(12) aligned);
  2    25 			/* parameter 1:	(input)	bin value			*/
  2    26 			/* return:	(output)	character value with blanks	*/
  2    27 
  2    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  2    29 			returns(character(12) aligned varying);
  2    30 			/* parameter 1:	(input)	binary value		*/
  2    31 			/* return:	(output)	char value without blanks	*/
  2    32 
  2    33 declare	binoct		entry(fixed bin(31)) reducible
  2    34 			returns(char(12) aligned);
  2    35 			/* parameter 1:	(input)	binary value		*/
  2    36 			/* return:	(output)	char value with blanks	*/
  2    37 
  2    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  2    39 			returns(char(12) aligned);
  2    40 			/* parameter 1:	(input)	binary value		*/
  2    41 			/* return:	(output)	right-aligned char value	*/
  2    42 
  2    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  2    44 			returns(char(12) varying aligned);
  2    45 			/* parameter 1:	(input)	binary value		*/
  2    46 			/* returns:	(output)	char value without blanks	*/
  2    47 
  2    48 declare	compare_expression	entry(pointer,pointer) reducible
  2    49 			returns(bit(1) aligned);
  2    50 			/* parameter 1:	(input)	any node pointer		*/
  2    51 			/* parameter 2:	(input)	any node pointer		*/
  2    52 			/* return:	(output)	compare bit		*/
  2    53 
  2    54 declare	constant_length	entry (pointer, fixed bin (71))
  2    55 			returns (bit (1) aligned);
  2    56 			/* parameter 1:	(input)	reference node pointer	*/
  2    57 			/* parameter 2:	(input)	value of constant length	*/
  2    58 			/* return:	(output)	"1"b if constant length	*/
  2    59 
  2    60 declare	convert		entry(pointer,bit(36) aligned)
  2    61 			returns(pointer);
  2    62 			/* parameter 1:	(input)	any node pointer		*/
  2    63 			/* parameter 2:	(input)	target type		*/
  2    64 			/* return:	(output)	target value tree pointer	*/
  2    65 
  2    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  2    67 			returns(pointer);
  2    68 			/* parameter 1:	(input)	any node pointer		*/
  2    69 			/* parameter 2:	(input)	target type		*/
  2    70 			/* return:	(output)	target value tree pointer	*/
  2    71 
  2    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  2    73 			returns(pointer);
  2    74 			/* parameter 1:	(input)	any node pointer		*/
  2    75 			/* parameter 2:	(input)	target type		*/
  2    76 			/* return:	(output)	target value tree pointer	*/
  2    77 
  2    78 declare	convert$validate	entry(pointer,pointer);
  2    79 			/* parameter 1:	(input)	source value tree pointer	*/
  2    80 			/* parameter 2:	(input)	target reference node pointer	*/
  2    81 
  2    82 declare	convert$to_target_fb entry(pointer,pointer)
  2    83 			returns(pointer);
  2    84 			/* parameter 1:	(input)	source value tree pointer	*/
  2    85 			/* parameter 2:	(input)	target reference node pointer	*/
  2    86 			/* return:	(output)	target value tree pointer	*/
  2    87 
  2    88 declare	convert$to_target	entry(pointer,pointer)
  2    89 			returns(pointer);
  2    90 			/* parameter 1:	(input)	source value tree pointer	*/
  2    91 			/* parameter 2:	(input)	target reference node pointer	*/
  2    92 			/* return:	(output)	target value tree pointer	*/
  2    93 
  2    94 declare	copy_expression	entry(pointer unaligned)
  2    95 			returns(pointer);
  2    96 			/* parameter 1:	(input)	any node pointer		*/
  2    97 			/* return:	(output)	any node pointer		*/
  2    98 
  2    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  2   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  2   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  2   102 
  2   103 declare	copy_unique_expression entry(pointer)
  2   104 			returns(pointer);
  2   105 			/* parameter 1:	(input)	any node pointer		*/
  2   106 			/* return:	(output)	any node pointer		*/
  2   107 
  2   108 declare	create_array	entry()
  2   109 			returns(pointer);
  2   110 			/* return:	(output)	array node pointer		*/
  2   111 
  2   112 declare	create_block	entry(bit(9) aligned,pointer)
  2   113 			returns(pointer);
  2   114 			/* parameter 1:	(input)	block type		*/
  2   115 			/* parameter 2:	(input)	father block node pointer	*/
  2   116 			/* return:	(output)	block node pointer		*/
  2   117 
  2   118 declare	create_bound	entry()
  2   119 			returns(pointer);
  2   120 			/* return:	(output)	bound node pointer		*/
  2   121 
  2   122 declare	create_context	entry(pointer,pointer)
  2   123 			returns(pointer);
  2   124 			/* parameter 1:	(input)	block node pointer		*/
  2   125 			/* parameter 2:	(input)	token pointer		*/
  2   126 			/* return:	(output)	context node pointer	*/
  2   127 
  2   128 declare	create_cross_reference entry()
  2   129 			returns(pointer);
  2   130 			/* return:	(output)	cross reference node pointer	*/
  2   131 
  2   132 declare	create_default	entry
  2   133 			returns(pointer);
  2   134 			/* return:	(output)	default node pointer	*/
  2   135 
  2   136 declare	create_identifier	entry()
  2   137 			returns(pointer);
  2   138 			/* return:	(output)	token node pointer		*/
  2   139 
  2   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  2   141 			returns(pointer);
  2   142 			/* parameter 1:	(input)	block node pointer		*/
  2   143 			/* parameter 2:	(input)	token node pointer		*/
  2   144 			/* parameter 3:	(input)	declare type		*/
  2   145 			/* return:	(output)	label node pointer		*/
  2   146 
  2   147 declare	create_list	entry(fixed bin(15))
  2   148 			returns(pointer);
  2   149 			/* parameter 1:	(input)	number of list elements	*/
  2   150 			/* return:	(output)	list node pointer		*/
  2   151 
  2   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  2   153 			returns(pointer);
  2   154 			/* parameter 1:	(input)	operator type		*/
  2   155 			/* parameter 2:	(input)	number of operands		*/
  2   156 			/* return:	(output)	operator node pointer	*/
  2   157 
  2   158 declare	create_reference	entry(pointer)
  2   159 			returns(pointer);
  2   160 			/* parameter 1:	(input)	symbol node pointer		*/
  2   161 			/* return:	(output)	reference node pointer	*/
  2   162 
  2   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   164 			returns(pointer);
  2   165 			/* parameter 1:	(input)	statement type		*/
  2   166 			/* parameter 2:	(input)	block node pointer		*/
  2   167 			/* parameter 3:	(input)	label node pointer		*/
  2   168 			/* parameter 4:	(input)	conditions		*/
  2   169 			/* return:	(output)	statement node pointer	*/
  2   170 
  2   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   172 			returns(pointer);
  2   173 			/* parameter 1:	(input)	statement type		*/
  2   174 			/* parameter 2:	(input)	block node pointer		*/
  2   175 			/* parameter 3:	(input)	label node pointer		*/
  2   176 			/* parameter 4:	(input)	conditions		*/
  2   177 			/* return:	(output)	statement node pointer	*/
  2   178 
  2   179 declare	create_storage	entry(fixed bin(15))
  2   180 			returns(pointer);
  2   181 			/* parameter 1:	(input)	number of words		*/
  2   182 			/* return:	(output)	storage block pointer	*/
  2   183 
  2   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  2   185 			returns(pointer);
  2   186 			/* parameter 1:	(input)	block node pointer		*/
  2   187 			/* parameter 2:	(input)	token node pointer		*/
  2   188 			/* parameter 3:	(input)	declare type		*/
  2   189 			/* return:	(output)	symbol node pointer		*/
  2   190 
  2   191 declare	create_token	entry (character (*), bit (9) aligned)
  2   192 			returns (ptr);
  2   193 			/* parameter 1:	(input)	token string		*/
  2   194 			/* parameter 2:	(input)	token type		*/
  2   195 			/* return:	(output)	token node ptr		*/
  2   196 
  2   197 declare	create_token$init_hash_table entry ();
  2   198 
  2   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  2   200 			returns (ptr);
  2   201 			/* parameter 1:	(input)	token string		*/
  2   202 			/* parameter 2:	(input)	token type		*/
  2   203 			/* parameter 3:	(input)	protected flag		*/
  2   204 			/* return:	(output)	token node ptr		*/
  2   205 
  2   206 declare	decbin		entry(character(*) aligned) reducible
  2   207 			returns(fixed bin(31));
  2   208 			/* parameter 1:	(input)	decimal character string	*/
  2   209 			/* return:	(output)	binary value		*/
  2   210 
  2   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  2   212 			returns(pointer);
  2   213 			/* parameter 1:	(input)	value			*/
  2   214 			/* parameter 2:	(input)	type			*/
  2   215 			/* parameter 3:	(input)	size			*/
  2   216 			/* parameter 4:	(input)	scale			*/
  2   217 			/* return:	(output)	reference node pointer	*/
  2   218 
  2   219 declare	declare_constant$bit entry(bit(*) aligned)
  2   220 			returns(pointer);
  2   221 			/* parameter 1:	(input)	bit			*/
  2   222 			/* return:	(output)	reference node pointer	*/
  2   223 
  2   224 declare	declare_constant$char entry(character(*) aligned)
  2   225 			returns(pointer);
  2   226 			/* parameter 1:	(input)	character			*/
  2   227 			/* return:	(output)	reference node pointer	*/
  2   228 
  2   229 declare	declare_constant$desc entry(bit(*) aligned)
  2   230 			returns(pointer);
  2   231 			/* parameter 1:	(input)	descriptor bit value	*/
  2   232 			/* return:	(output)	reference node pointer	*/
  2   233 
  2   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  2   235 			returns(pointer);
  2   236 			/* parameter 1:	(input)	integer			*/
  2   237 			/* return:	(output)	reference node pointer	*/
  2   238 
  2   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   240 			returns(pointer);
  2   241 			/* parameter 1:	(input)	block node pointer		*/
  2   242 			/* parameter 2:	(input)	statement node pointer	*/
  2   243 			/* parameter 3:	(input)	symbol node pointer		*/
  2   244 			/* parameter 4:	(input)	loc pointer		*/
  2   245 			/* parameter 5:	(input)	array descriptor bit
  2   246*						cross_section bit	*/
  2   247 			/* return:	(output)	reference node pointer	*/
  2   248 
  2   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   250 			returns(pointer);
  2   251 			/* parameter 1:	(input)	block node pointer	*/
  2   252 			/* parameter 2:	(input)	statement node pointer 	*/
  2   253 			/* parameter 3:	(input)	symbol node pointer	*/
  2   254 			/* parameter 4:	(input)	loc pointer	*/
  2   255 			/* parameter 5:	(input)	array descriptor bit
  2   256*						cross_section bit	*/
  2   257 			/* return:	(output)	reference node pointer	*/
  2   258 
  2   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   260 			returns(pointer);
  2   261 			/* parameter 1:	(input)	block node pointer		*/
  2   262 			/* parameter 2:	(input)	statement node pointer	*/
  2   263 			/* parameter 3:	(input)	symbol node pointer		*/
  2   264 			/* parameter 4:	(input)	loc pointer		*/
  2   265 			/* parameter 5:	(input)	array descriptor bit
  2   266*						cross_section bit	*/
  2   267 			/* return:	(output)	reference node pointer	*/
  2   268 
  2   269 declare	declare_integer	entry(pointer)
  2   270 			returns(pointer);
  2   271 			/* parameter 1:	(input)	block node pointer		*/
  2   272 			/* return:	(output)	reference node pointer 	*/
  2   273 
  2   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  2   275 			/* parameter 1:	(input)	picture string		*/
  2   276 			/* parameter 2:	(input)	symbol node pointer		*/
  2   277 			/* parameter 3:	(output)	error code, if any		*/
  2   278 
  2   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  2   280 			returns(pointer);
  2   281 			/* parameter 1:	(input)	picture string		*/
  2   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  2   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  2   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  2   285 			/* return:	(output)	reference node pointer	*/
  2   286 
  2   287 declare	declare_pointer	entry(pointer)
  2   288 			returns(pointer);
  2   289 			/* parameter 1:	(input)	block node pointer		*/
  2   290 			/* return:	(output)	reference node pointer	*/
  2   291 
  2   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  2   293 			returns(pointer);
  2   294 			/* parameter 1:	(input)	type			*/
  2   295 			/* parameter 2:	(input)	precision			*/
  2   296 			/* parameter 3:	(input)	scale			*/
  2   297 			/* parameter 4:	(input)	length			*/
  2   298 			/* return:	(output)	reference node pointer	*/
  2   299 
  2   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  2   301 			returns(char(120) varying);
  2   302 			/* parameter 1:	(input)	node pointer		*/
  2   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   304 			/* return:	(output)	source line id		*/
  2   305 
  2   306 declare	decode_source_id	entry(
  3     1 			1 structure unaligned,
  3     2 			  2 /* file_number */	bit(8),
  3     3 			  2 /* line_number */	bit(14),
  3     4 			  2 /* stmt_number */	bit(5),
  2   307 
  2   308 			bit(1) aligned)
  2   309 			returns(char(120) varying);
  2   310 			/* parameter 1:	(input)	source id			*/
  2   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   312 			/* return:	(output)	source line id		*/
  2   313 
  2   314 declare	error		entry(fixed bin(15),pointer,pointer);
  2   315 			/* parameter 1:	(input)	error number		*/
  2   316 			/* parameter 2:	(input)	statement node pointer or null*/
  2   317 			/* parameter 3:	(input)	token node pointer 		*/
  2   318 
  2   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Ä &{    TYYee                              Ä   ñ∆Bdp
¸Ë                                                        TYYee                                   Develcon                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                eclare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  2   399 			/* parameter 1:	(input)	string			*/
  2   400 			/* parameter 2:	(input)	string length or 0		*/
  2   401 
  2   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  2   403 			/* parameter 1:	(input)	string			*/
  2   404 			/* parameter 2:	(input)	string length or 0		*/
  2   405 
  2   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  2   407 			/* parameter 1:	(input)	string pointer		*/
  2   408 			/* parameter 2:	(input)	string size		*/
  2   409 
  2   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  2   411 			/* parameter 1:	(input)	string pointer		*/
  2   412 			/* parameter 2:	(input)	string length or 0		*/
  2   413 
  2   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  2   415 			/* parameter 1:	(input)	string			*/
  2   416 			/* parameter 2:	(input)	length			*/
  2   417 
  2   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  2   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  2   420 			/* parameter 2:	(input)	line number		*/
  2   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  2   422 			/* parameter 4:	(input)	number of chars to copy	*/
  2   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  2   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  2   425 
  2   426 declare	refer_extent	entry(pointer,pointer);
  2   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  2   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  2   429 
  2   430 declare	reserve$clear	entry()
  2   431 			returns(pointer);
  2   432 			/* return:	(output)	pointer			*/
  2   433 
  2   434 declare	reserve$declare_lib	entry(fixed bin(15))
  2   435 			returns(pointer);
  2   436 			/* parameter 1:	(input)	builtin function number	*/
  2   437 			/* return:	(output)	pointer			*/
  2   438 
  2   439 declare	reserve$read_lib	entry(fixed bin(15))
  2   440 			returns(pointer);
  2   441 			/* parameter 1:	(input)	builtin function number	*/
  2   442 			/* return:	(output)	pointer			*/
  2   443 
  2   444 declare	semantic_translator	entry();
  2   445 
  2   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  2   447 			/* parameter 1:	(input)	error number		*/
  2   448 			/* parameter 2:	(input)	any node pointer		*/
  2   449 
  2   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  2   451 			/* parameter 1:	(input)	error number		*/
  2   452 			/* parameter 2:	(input)	any node pointer		*/
  2   453 
  2   454 declare	share_expression	entry(ptr)
  2   455 			returns(ptr);
  2   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  2   457 			/* return:	(output)	tree pointer or null	*/
  2   458 
  2   459 declare	token_to_binary	entry(ptr) reducible
  2   460 			returns(fixed bin(31));
  2   461 			/* parameter 1:	(input)	token node pointer		*/
  2   462 			/* return:	(output)	converted binary value	*/
  2   463 
  2   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
  1   228 
  1   229 /* END INCLUDE FILE ... semant.incl.pl1 */
       37 
  8     1 dcl	1 array			based aligned,
  8     2 	2 node_type		bit(9) unaligned,
  8     3 	2 reserved		bit(34) unaligned,
  8     4 	2 number_of_dimensions	fixed(7) unaligned,
  8     5 	2 own_number_of_dimensions	fixed(7) unaligned,
  8     6 	2 element_boundary		fixed(3) unaligned,
  8     7 	2 size_units		fixed(3) unaligned,
  8     8 	2 offset_units		fixed(3) unaligned,
  8     9 	2 interleaved		bit(1) unaligned,
  8    10 	2 c_element_size		fixed(24),
  8    11 	2 c_element_size_bits	fixed(24),
  8    12 	2 c_virtual_origin		fixed(24),
  8    13 	2 element_size		ptr unaligned,
  8    14 	2 element_size_bits		ptr unaligned,
  8    15 	2 virtual_origin		ptr unaligned,
  8    16 	2 symtab_virtual_origin	ptr unaligned,
  8    17 	2 symtab_element_size	ptr unaligned,
  8    18 	2 bounds			ptr unaligned,
  8    19 	2 element_descriptor	ptr unaligned;
  8    20 
  8    21 dcl	1 bound			based aligned,
  8    22 	2 node_type		bit(9),
  8    23 	2 c_lower			fixed(24),
  8    24 	2 c_upper			fixed(24),
  8    25 	2 c_multiplier		fixed(24),
  8    26 	2 c_desc_multiplier		fixed(24),
  8    27 	2 lower			ptr unaligned,
  8    28 	2 upper			ptr unaligned,
  8    29 	2 multiplier		ptr unaligned,
  8    30 	2 desc_multiplier		ptr unaligned,
  8    31 	2 symtab_lower		ptr unaligned,
  8    32 	2 symtab_upper		ptr unaligned,
  8    33 	2 symtab_multiplier		ptr unaligned,
  8    34 	2 next			ptr unaligned;
       38 
  9     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
  9     2 
  9     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
  9     4 
  9     5 dcl (	block_node		initial("000000001"b),
  9     6 	statement_node		initial("000000010"b),
  9     7 	operator_node		initial("000000011"b),
  9     8 	reference_node		initial("000000100"b),
  9     9 	token_node		initial("000000101"b),
  9    10 	symbol_node		initial("000000110"b),
  9    11 	context_node		initial("000000111"b),
  9    12 	array_node		initial("000001000"b),
  9    13 	bound_node		initial("000001001"b),
  9    14 	format_value_node		initial("000001010"b),
  9    15 	list_node			initial("000001011"b),
  9    16 	default_node		initial("000001100"b),
  9    17 	machine_state_node		initial("000001101"b),
  9    18 	source_node		initial("000001110"b),
  9    19 	label_node		initial("000001111"b),
  9    20 	cross_reference_node	initial("000010000"b),
  9    21 	sf_par_node		initial("000010001"b),
  9    22 	temporary_node		initial("000010010"b),
  9    23 	label_array_element_node	initial("000010011"b),
  9    24 	by_name_agg_node		initial("000010100"b))
  9    25 				bit(9) internal static aligned options(constant);
  9    26 
  9    27 dcl	1 node			based aligned,
  9    28 	2 type			unal bit(9),
  9    29 	2 source_id		unal structure,
  9    30 	  3 file_number		bit(8),
  9    31 	  3 line_number		bit(14),
  9    32 	  3 statement_number	bit(5);
  9    33 
  9    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
       39 
 10     1 /* BEGIN INCLUDE FILE ... picture_image.incl.pl1
 10     2*
 10     3*   James R. Davis  12 Mar 79
 10     4**/
 10     5 
 10     6      dcl	   1 picture_image	      aligned based,
 10     7 	     2 type	      fixed bin (8) unal,
 10     8 	     2 prec	      fixed bin (8) unal,	/* precision or length of associated value */
 10     9 	     2 scale	      fixed bin (8) unal,	/* for both fixed and float pictures,
 10    10*							=ndigits after "v" - scale_factor */
 10    11 	     2 piclength	      fixed bin (8) unal,	/* length of picture_constant.chars, <64
 10    12*							=length of normalized-picture-string */
 10    13 	     2 varlength	      fixed bin (8) unal,	/* length of pictured variable in chars, <64
 10    14*							=length of normalized_picture_string - "k" and "v" */
 10    15 	     2 scalefactor	      fixed bin (8) unal,	/* value of pict-sc-f, -256<=x<256  */
 10    16 	     2 explength	      fixed bin (8) unal,	/* length of exp field for float */
 10    17 	     2 drift_character    char (1) unal,
 10    18 	     2 chars	      char (0 refer (picture_image.piclength)) aligned;
 10    19 
 10    20      dcl	   (
 10    21 	   picture_char_type      init (24),
 10    22 	   picture_realfix_type   init (25),
 10    23 	   picture_complexfix_type
 10    24 			      init (26),
 10    25 	   picture_realflo_type   init (27),
 10    26 	   picture_complexflo_type
 10    27 			      init (28)
 10    28 	   )		      fixed bin (8) unal static internal options (constant);
 10    29 
 10    30 /* END INCLUDE FILE  ... picture_image.incl.pl1  */
       40 
 11     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
 11     2 
 11     3 dcl	1 reference		based aligned,
 11     4 	2 node_type		bit(9) unaligned,
 11     5 	2 array_ref		bit(1) unaligned,
 11     6 	2 varying_ref		bit(1) unaligned,
 11     7 	2 shared			bit(1) unaligned,
 11     8 	2 put_data_sw		bit(1) unaligned,
 11     9 	2 processed		bit(1) unaligned,
 11    10 	2 units			fixed(3) unaligned,
 11    11 	2 ref_count		fixed(17) unaligned,
 11    12 	2 c_offset		fixed(24),
 11    13 	2 c_length		fixed(24),
 11    14 	2 symbol			ptr unaligned,
 11    15 	2 qualifier		ptr unaligned,
 11    16 	2 offset			ptr unaligned,
 11    17 	2 length			ptr unaligned,
 11    18 	2 subscript_list		ptr unaligned,
 11    19 						/* these fields are used by the 645 code generator */
 11    20 	2 address			structure unaligned,
 11    21 	  3 base			bit(3),
 11    22 	  3 offset		bit(15),
 11    23 	  3 op			bit(9),
 11    24 	  3 no_address		bit(1),
 11    25 	  3 inhibit		bit(1),
 11    26 	  3 ext_base		bit(1),
 11    27 	  3 tag			bit(6),
 11    28 	2 info			structure unaligned,
 11    29 	  3 address_in		structure,
 11    30 	    4 b			dimension(0:7) bit(1),
 11    31 	    4 storage		bit(1),
 11    32 	  3 value_in		structure,
 11    33 	    4 a			bit(1),
 11    34 	    4 q			bit(1),
 11    35 	    4 aq			bit(1),
 11    36 	    4 string_aq		bit(1),
 11    37 	    4 complex_aq		bit(1),
 11    38 	    4 decimal_aq		bit(1),
 11    39 	    4 b			dimension(0:7) bit(1),
 11    40 	    4 storage		bit(1),
 11    41 	    4 indicators		bit(1),
 11    42 	    4 x			dimension(0:7) bit(1),
 11    43 	  3 other			structure,
 11    44 	    4 big_offset		bit(1),
 11    45 	    4 big_length		bit(1),
 11    46 	    4 modword_in_offset	bit(1),
 11    47 	2 data_type		fixed(5) unaligned,
 11    48 	2 bits			structure unaligned,
 11    49 	  3 padded_ref		bit(1),
 11    50 	  3 aligned_ref		bit(1),
 11    51 	  3 long_ref		bit(1),
 11    52 	  3 forward_ref		bit(1),
 11    53 	  3 ic_ref		bit(1),
 11    54 	  3 temp_ref		bit(1),
 11    55 	  3 defined_ref		bit(1),
 11    56 	  3 evaluated		bit(1),
 11    57 	  3 allocate		bit(1),
 11    58 	  3 allocated		bit(1),
 11    59 	  3 aliasable		bit(1),
 11    60 	  3 even			bit(1),
 11    61 	  3 perm_address		bit(1),
 11    62 	  3 aggregate		bit(1),
 11    63 	  3 hit_zero		bit(1),
 11    64 	  3 dont_save		bit(1),
 11    65 	  3 fo_in_qual		bit(1),
 11    66 	  3 hard_to_load		bit(1),
 11    67 	2 relocation		bit(12) unaligned,
 11    68 	2 more_bits		structure unaligned,
 11    69 	  3 substr		bit(1),
 11    70 	  3 padded_for_store_ref	bit(1),
 11    71 	  3 aligned_for_store_ref	bit(1),
 11    72 	  3 mbz			bit(15),
 11    73 	2 store_ins		bit(18) unaligned;
 11    74 
 11    75 /* END INCLUDE FILE ... reference.incl.pl1 */
       41 
 12     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
 12     2 
 12     3 dcl	1 symbol			based aligned,
 12     4 	2 node_type		bit(9) unal,
 12     5 	2 source_id		structure unal,
 12     6 	  3 file_number		bit(8),
 12     7 	  3 line_number		bit(14),
 12     8 	  3 statement_number	bit(5),
 12     9 	2 location		fixed(18) unal unsigned,
 12    10 	2 allocated		bit(1) unal,
 12    11 	2 dcl_type		bit(3) unal,
 12    12 	2 reserved		bit(6) unal,
 12    13 	2 pix			unal,
 12    14 	  3 pic_fixed		bit(1) unal,
 12    15 	  3 pic_float		bit(1) unal,
 12    16 	  3 pic_char		bit(1) unal,
 12    17 	  3 pic_scale		fixed(7) unal,
 12    18 	  3 pic_size		fixed(7) unal,
 12    19 	2 level			fixed(8) unal,
 12    20 	2 boundary		fixed(3) unal,
 12    21 	2 size_units		fixed(3) unal,
 12    22 	2 scale			fixed(7) unal,
 12    23 	2 runtime			bit(18) unal,
 12    24 	2 runtime_offset		bit(18) unal,
 12    25 	2 block_node		ptr unal,
 12    26 	2 token			ptr unal,
 12    27 	2 next			ptr unal,
 12    28 	2 multi_use		ptr unal,
 12    29 	2 cross_references		ptr unal,
 12    30 	2 initial			ptr unal,
 12    31 	2 array			ptr unal,
 12    32 	2 descriptor		ptr unal,
 12    33 	2 equivalence		ptr unal,
 12    34 	2 reference		ptr unal,
 12    35 	2 general			ptr unal,
 12    36 	2 father			ptr unal,
 12    37 	2 brother			ptr unal,
 12    38 	2 son			ptr unal,
 12    39 	2 word_size		ptr unal,
 12    40 	2 bit_size		ptr unal,
 12    41 	2 dcl_size		ptr unal,
 12    42 	2 symtab_size		ptr unal,
 12    43 	2 c_word_size		fixed(24),
 12    44 	2 c_bit_size		fixed(24),
 12    45 	2 c_dcl_size		fixed(24),
 12    46 
 12                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ¢ã    dz                                 Ä   .†D‰öBå                                                        Zwick                           dz      Multics                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         Ä úî    Andrews                                "j‘PÊnº                                                        Andrews                                 cdc             !      …   "      NlãÜ˙  O∂e–‡  OïVänone   VIP7400_DTR                                                               Nl[EY                                                                  ﬂÄ    Malolpszy                          Ä   (ÊH¨>                        (ÊH¨>                        Malolpszy                               NMLPROD         à                                                                                                                         QjIlõ                                                                                                                                                                                                                                                                                                                                                                                                                                          üë    Kittlitz                               ÷hd<
¶                                                        Kittlitz                        kena    Multics         !     Y   |      R«E  TÏM
  TËÿ`º»none   STY_TELNET                                                                O&«S                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Sw    Lee                                Ä   (∫R§ÓÜ                                                        Lee                                     Multics              §         QO®áH  T≤€9∆  TÈ¢*=énone   SUN3_32_80                                                                                                                                      Ä €»    Cormier                            Ä    ÇÇÄ¢ˆöz                                                        Cormier                         dodie   Operator        !      ”         J&Ê˝øï  JÓè‘X  J≥bd¯uX.25   ASCII_CRT_E                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ¿{    Fudge                              Ä   (ˆ@ íXd                                                        Fudge                           dan     SysAdmin             œ   ©      Q¿o¸  T —à‚  To¸ùÃAnone   ASCII_CRT                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ÉŒ    Zimmerman                              l,f∂Ó ≤                                                        Zimmerman                       louis   Multics              	Ê   ï      S™Õ∏ú≠  T±b∂C  T±>=Ènone   SUN3_54_144                                                               M¢€ú„t                                                                Ä F/    bharta                             Ä   –*zÓﬁæÃ.                                                        Thankey                         bharta  OperDevel                                       J°—ıgnone   VIP7400                                                                                                                                           ~î    ACTC_BCO                           Ä                                   4F2™˛ò                        ACTC_BCO                                .               Ä                                                                                                                         MºÑ∞˘•                                                                                                                                                                                                                                                                                                                                                                                                                                        Ä aã    SHarris                            Ä   ¬^L“¥ñ                                                        SHarris                         sgh     SysMaint              ¯         MÄBá  O Vw:  O^ç¬®înone   ASCII_CRT_E                                                                                                                                     Ä œz    SHarris                                ¬^L“¥ñ                                                        SHarris                                 SysMaint                       P˚∏£3  Qìd»e  Q w* înone   ASCII_CRT_E                                                               O˚ÈÇ˚                                                                  ò≠    SHarris                                úÃ2\0∏úÿ                                                        SHarris                                 SiteSA                                                                                                                                    R‰–Oƒ                                                                Ä k    McGuire                            Ä   ¸–nR‰∂~™                                                        McGuire                         mary    Multics         !     É   T              Oë¬÷  O4¢+ªnone   ASCII_CRT_E                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ÿ<    Vo                                     VˆfÙ0&†                                                        Vo                                      EMREL                                                                                                                                    SãÅadÎ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s    Schwartz                               ñ∆Bdp
¸Ë                                                        Schwartz                                Multics         !      2                 P´qı#<  Póìï5none   SUN3_54_132                                                               OØhœ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          Æ∏    RWaters                                8ÿríæ¨û                                                        RWaters                         rob     Multics                 √      L©pÓß  TNú™  T˙_¥Ønone   STY_TELNET                                                                L?Ω£Æ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
fixed                    31(01)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 ref 151
float                    31(02)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 ref 151
found_brother                   000110 automatic       bit(1)                   dcl 29 set ref 91* 92 104*
general                  16            based           pointer                  level 2 packed packed unaligned dcl 12-3 ref 173 173
initial                  11            based           pointer                  level 2 packed packed unaligned dcl 12-3 ref 173 173
length                    6            based           pointer                  level 2 packed packed unaligned dcl 11-3 ref 161
lower                     5            based           pointer                  level 2 packed packed unaligned dcl 8-21 ref 216 216
                                                                                  224 224
misc_attributes          31(19)        based           structure                level 3 packed packed unaligned dcl 12-3
next                     14            based           pointer                  level 2 packed packed unaligned dcl 8-21 ref 229 230
node                                   based           structure                level 1 dcl 9-27
null                                                   builtin function         dcl 34 ref 55 71 85 93 95 132 187 187 194 203 203
                                                                                  212 215 215 268
number_of_dimensions      1(07)        based           fixed bin(7,0)           level 2 packed packed unaligned dcl 8-1 ref 200 203
                                                                                  203
own_number_of_dimensions
                          1(15)        based           fixed bin(7,0)           level 2 packed packed unaligned dcl 8-1 ref 200 203
                                                                                  203
p                                      parameter       pointer                  dcl 266 ref 263 268 271 271
pa                                     parameter       pointer                  dcl 117 in procedure "match" ref 114 135 138 140 161
                                                                                  162 194 234
pa                                     parameter       pointer                  dcl 20 in procedure "match_arguments" set ref 17 52
                                                                                  55 58 61 65 74*
parent_is_scalar                000111 automatic       bit(1)                   dcl 30 set ref 68* 234 239*
pb                                     parameter       pointer                  dcl 21 in procedure "match_arguments" ref 17 50
pb                                     parameter       pointer                  dcl 118 in procedure "match" ref 114 131
piclength                 0(27)        based           fixed bin(8,0)           level 2 packed packed unaligned dcl 10-6 ref 173 173
picture                  31(18)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 ref 173
picture_image                          based           structure                level 1 dcl 10-6 ref 173 173
real                     31(30)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 ref 142 142
reference                15            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 12-3 in procedure "match_arguments"
                                                                                  ref 79
reference                              based           structure                level 1 dcl 11-3 in procedure "match_arguments"
reference_node                         constant        bit(9)                   initial dcl 9-5 ref 58 271
scale                     2(28)        based           fixed bin(7,0)           level 2 packed packed unaligned dcl 12-3 ref 142 142
semantic_translator$abort       000012 constant        entry                    external dcl 2-446 ref 200
son                      21            based           pointer                  level 2 packed packed unaligned dcl 12-3 ref 85 87
                                                                                  88
star_extents             33(06)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 ref 187 216
storage_class            32(09)        based           structure                level 3 packed packed unaligned dcl 12-3
string                                                 builtin function         dcl 34 ref 142 142
symbol                    3            based           pointer                  level 2 in structure "reference" packed packed
                                                                                  unaligned dcl 11-3 in procedure "match_arguments"
                                                                                  ref 61 138 173 173 271
symbol                                 based           structure                level 1 dcl 12-3 in procedure "match_arguments"
type                                   based           bit(9)                   level 2 packed packed unaligned dcl 9-27 ref 58 271
unsigned                 31(24)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 ref 142 142
unspec                                                 builtin function         dcl 34 ref 173 173
upper                     6            based           pointer                  level 2 packed packed unaligned dcl 8-21 ref 216 216
                                                                                  224 224
varying                  31(26)        based           bit(1)                   level 4 packed packed unaligned dcl 12-3 ref 142 142
                                                                                  159

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
adjust_count                    000000 constant        entry                    external dcl 2-20
alloc_semantics                 000000 constant        entry                    external dcl 1-7
alloc_semantics$init_only       000000 constant        entry                    external dcl 1-12
array_node                             internal static bit(9)                   initial dcl 9-5
binary_to_octal_string          000000 constant        entry                    external dcl 2-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 2-43
bindec                          000000 constant        entry                    external dcl 2-23
bindec$vs                       000000 constant        entry                    external dcl 2-28
binoct                          000000 constant        entry                    external dcl 2-33
block_node                             internal static bit(9)                   initial dcl 9-5
bound_node                             internal static bit(9)                   initial dcl 9-5
builtin                         000000 constant        entry                    external dcl 1-17
by_name_agg_node                       internal static bit(9)                   initial dcl 9-5
check_star_extents              000000 constant        entry                    external dcl 1-27
compare_declaration             000000 constant        entry                    external dcl 1-31
constant_length                 000000 constant        entry                    external dcl 2-54
context_node                           internal static bit(9)                   initial dcl 9-5
context_processor               000000 constant        entry                    external dcl 1-38
convert                         000000 constant        entry                    external dcl 2-60
convert$from_builtin            000000 constant        entry                    external dcl 2-72
convert$to_integer              000000 constant        entry                    external dcl 2-66
convert$to_target               000000 constant        entry                    external dcl 2-88
convert$to_target_fb            000000 constant        entry                    external dcl 2-82
convert$validate                000000 constant        entry                    external dcl 2-78
copy_expression                 000000 constant        entry                    external dcl 2-94
copy_expression$copy_sons       000000 constant        entry                    external dcl 2-99
copy_unique_expression          000000 constant        entry                    external dcl 2-103
create_array                    000000 constant        entry                    external dcl 2-108
create_block                    000000 constant        entry                    external dcl 2-112
create_bound                    000000 constant        entry                    external dcl 2-118
create_context                  000000 constant        entry                    external dcl 2-122
create_cross_reference          000000 constant        entry                    external dcl 2-128
create_default                  000000 constant        entry                    external dcl 2-132
create_identifier               000000 constant        entry                    external dcl 2-136
create_label                    000000 constant        entry                    external dcl 2-140
create_list                     000000 constant        entry                    external dcl 2-147
create_operator                 000000 constant        entry                    external dcl 2-152
create_reference                000000 constant        entry                    external dcl 2-158
create_statement                000000 constant        entry                    external dcl 2-163
create_statement$prologue       000000 constant        entry                    external dcl 2-171
create_storage                  000000 constant        entry                    external dcl 2-179
create_symbol                   000000 constant        entry                    external dcl 2-184
create_token                    000000 constant        entry                    external dcl 2-191
create_token$init_hash_table    000000 constant        entry                    external dcl 2-197
create_token$protected          000000 constant        entry                    external dcl 2-199
cross_reference_node                   internal static bit(9)                   initial dcl 9-5
decbin                          000000 constant        entry                    external dcl 2-206
declare                         000000 constant        entry                    external dcl 1-41
declare_constant                000000 constant        entry                    external dcl 2-211
declare_constant$bit            000000 constant        entry                    external dcl 2-219
declare_constant$char           000000 constant        entry                    external dcl 2-224
declare_constant$desc           000000 constant        entry                    external dcl 2-229
declare_constant$integer        000000 constant        entry                    external dcl 2-234
declare_descriptor              000000 constant        entry                    external dcl 2-239
declare_descriptor$ctl          000000 constant        entry                    external dcl 2-249
declare_descriptor$param        000000 constant        entry                    external dcl 2-259
declare_integer                 000000 constant        entry                    external dcl 2-269
declare_picture                 000000 constant        entry                    external dcl 2-274
declare_picture_temp            000000 constant        entry                    external dcl 2-279
declare_pointer                 000000 constant        entry                    external dcl 2-287
declare_structure               000000 constant        entry                    external dcl 1-44
declare_temporary               000000 constant        entry                    external dcl 2-292
decode_node_id                  000000 constant        entry                    external dcl 2-300
decode_source_id                000000 constant        entry                    external dcl 2-306
default_node                           internal static bit(9)                   initial dcl 9-5
defined_reference               000000 constant        entry                    external dcl 1-47
do_semantics                    000000 constant        entry                    external dcl 1-57
error                           000000 constant        entry                    external dcl 2-314
error$omit_text                 000000 constant        entry                    external dcl 2-319
error_                          000000 constant        entry                    external dcl 2-324
error_$finish                   000000 constant        entry                    external dcl 2-343
error_$initialize_error         000000 constant        entry                    external dcl 2-341
error_$no_text                  000000 constant        entry                    external dcl 2-334
expand_assign                   000000 constant        entry                    external dcl 1-62
expand_by_name                  000000 constant        entry                    external dcl 1-71
expand_infix                    000000 constant        entry                    external dcl 1-76
expand_initial                  000000 constant        entry                    external dcl 1-84
expand_prefix                   000000 constant        entry                    external dcl 1-89
expand_primitive                000000 constant        entry                    external dcl 1-97
expression_semantics            000000 constant        entry                    external dcl 1-105
fill_refer                      000000 constant        entry                    external dcl 1-113
format_value_node                      internal static bit(9)                   initial dcl 9-5
free_node                       000000 constant        entry                    external dcl 2-345
function                        000000 constant        entry                    external dcl 1-125
generic_selector                000000 constant        entry                    external dcl 1-134
get_array_size                  000000 constant        entry                    external dcl 2-348
get_size                        000000 constant        entry                    external dcl 2-352
io_data_list_semantics          000000 constant        entry                    external dcl 1-143
io_data_list_semantics$format_list_semantics
                                000000 constant        entry                    external dcl 1-120
io_semantics                    000000 constant        entry                    external dcl 1-148
label_array_element_node               internal static bit(9)                   initial dcl 9-5
label_node                             internal static bit(9)                   initial dcl 9-5
list_node                              internal static bit(9)                   initial dcl 9-5
lookup                          000000 constant        entry                    external dcl 1-153
machine_state_node                     internal static bit(9)                   initial dcl 9-5
make_non_quick                  000000 constant        entry                    external dcl 1-162
match_arguments                 000000 constant        entry                    external dcl 1-166
merge_attributes                000000 constant        entry                    external dcl 2-355
offset_adder                    000000 constant        entry                    external dcl 1-172
operator_node                          internal static bit(9)                   initial dcl 9-5
operator_semantics              000000 constant        entry                    external dcl 1-184
optimizer                       000000 constant        entry                    external dcl 2-361
parse_error                     000000 constant        entry                    external dcl 2-364
parse_error$no_text             000000 constant        entry                    external dcl 2-368
picture_char_type                      internal static fixed bin(8,0)           initial packed unaligned dcl 10-20
picture_complexfix_type                internal static fixed bin(8,0)           initial packed unaligned dcl 10-20
picture_complexflo_type                internal static fixed bin(8,0)           initial packed unaligned dcl 10-20
picture_realfix_type                   internal static fixed bin(8,0)           initial packed unaligned dcl 10-20
picture_realflo_type                   internal static fixed bin(8,0)           initial packed unaligned dcl 10-20
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 2-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 2-372
pl1_print$for_lex               000000 constant        entry                    external dcl 2-418
pl1_print$non_varying           000000 constant        entry                    external dcl 2-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 2-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 2-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 2-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 2-414
pl1_print$varying               000000 constant        entry                    external dcl 2-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 2-395
propagate_bit                   000000 constant        entry                    external dcl 1-192
refer_extent                    000000 constant        entry                    external dcl 2-426
reserve$clear                   000000 constant        entry                    external dcl 2-430
reserve$declare_lib             000000 constant        entry                    external dcl 2-434
reserve$read_lib                000000 constant        entry                    external dcl 2-439
semantic_translator             000000 constant        entry                    external dcl 2-444
semantic_translator$call_es     000000 constant        entry                    external dcl 1-196
semantic_translator$error       000000 constant        entry                    external dcl 2-450
sf_par_node                            internal static bit(9)                   initial dcl 9-5
share_expression                000000 constant        entry                    external dcl 2-454
simplify_expression             000000 constant        entry                    external dcl 1-205
simplify_offset                 000000 constant        entry                    external dcl 1-212
source_node                            internal static bit(9)                   initial dcl 9-5
statement_node                         internal static bit(9)                   initial dcl 9-5
subscripter                     000000 constant        entry                    external dcl 1-216
symbol_node                            internal static bit(9)                   initial dcl 9-5
temporary_node                         internal static bit(9)                   initial dcl 9-5
token_node                             internal static bit(9)                   initial dcl 9-5
token_to_binary                 000000 constant        entry                    external dcl 2-459
validate                        000000 constant        entry                    external dcl 1-225

NAMES DECLARED BY EXPLICIT CONTEXT.
constant_extent                 001214 constant        entry                    internal dcl 263 ref 216 216 216 216 251 251 255
match                           000244 constant        entry                    internal dcl 114 ref 74 79 82
match_arguments                 000014 constant        entry                    external dcl 17
same_extent_bounds              001114 constant        entry                    internal dcl 245 ref 224 224

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1364        1400    1314        1374
Length      2012    1314        14         375      47           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
match_arguments                     146 external procedure  is an external procedure.  
match                                   internal procedure  shares stack frame of external procedure match_arguments.  
same_extent_bounds                      internal procedure  shares stack frame of external procedure match_arguments.  
constant_extent                         internal procedure  shares stack frame of external procedure match_arguments.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
match_arguments          000100 a                           match_arguments
                         000102 a_reference                 match_arguments
                         000104 a_root                      match_arguments
                         000106 b                           match_arguments
                         000110 found_brother               match_arguments
                         000111 parent_is_scalar            match_arguments
                         000120 a                           match
                         000122 asize                       match
                         000124 b                           match
                         000126 ba                          match
                         000130 bb                          match
                         000132 bsize                       match
                         000134 c_asize                     match
                         000135 c_bsize                     match

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
unpk_to_pk          call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
compare_expression            semantic_translator$abort

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     17 000010        50 000021        52 000025        55 000034        58 000042        60 000047        61 000051
     62 000054        64 000055        65 000056        68 000060        69 000061        70 000063        71 000071
     74 000100        78 000127        79 000130        81 000143        82 000144        85 000154        87 000160
     88 000162        89 000165        91 000166        92 000167        93 000177        95 000207        98 000222
     99 000224       100 000226       102 000227       103 000231       104 000234       106 000236       108 000237
    110 000240       114 000244       131 000246       132 000251       133 000254       135 000256       138 000265
    140 000274       142 000277       148 000377       151 000416       153 000421       154 000423       155 000425
    157 000426       159 000431       161 000435       162 000437       163 000441       165 000442       166 000444
    169 000446       170 000450       173 000452       177 000512       179 000513       181 000516       182 000520
    183 000522       184 000525       187 000527       190 000551       191 000552       194 000576       198 000615
    200 000617       203 000647       209 000712       210 000714       212 000716       215 000725       216 000736
    222 001014       224 001015       229 001054       230 001057       231 001062       232 001063       234 001064
    238 001077       239 001100       240 001103       243 001110       245 001114       251 001116       254 001151
    255 001154       257 001173       263 001214       268 001216       271 001225       275 001242


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
