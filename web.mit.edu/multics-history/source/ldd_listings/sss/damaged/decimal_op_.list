THIS FILE IS DAMAGED

	COMPILATION LISTING OF SEGMENT decimal_op_
	Compiled by: Multics PL/I Compiler, Release 28d, of September 14, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 10/03/83  1435.4 mst Mon
	    Options: optimize map

        1 /* ******************************************************
        2*   *                                                    *
        3*   *                                                    *
        4*   * Copyright (c) 1972 by Massachusetts Institute of   *
        5*   * Technology and Honeywell Information Systems, Inc. *
        6*   *                                                    *
        7*   *                                                    *
        8*   ****************************************************** */
        9 
       10 /* Decimal arithmetic runtime routines for Version II PL/1
       11*   These routines operate on floating decimal or fixed scaled decimal numbers
       12*   with a maximum precision of 63 digits.  The length of the number as determined
       13*   by the input descriptor does not include the leading sign or the trailing
       14*   exponent character in the case of floating point numbers.
       15*
       16*   Initial Version: 16 July 1971 by PG
       17*	Modified: 19 October 1972 by RAB */
       18 
       19 decimal_op_: proc(poperation,pop3,pdesc3,pop1,pdesc1,pop2,pdesc2);
       20 
       21 dcl	poperation	fixed bin,	/* operation to perform
       22*					   0 = comparsion of op1 and op2
       23*					   1 is op3 = op1 + op2
       24*					   2 is op3 = op1 - op2
       25*					   3 is op3 = op1 * op2
       26*					   4 is op3 = op1 / op2
       27*					   5 is op3 = - op1
       28*					   6 is op3 = ceil(op1)
       29*					   7 is op3 = floor(op1)
       30*					   8 is op3 = round(op1,desc2)
       31*					   9 is op3 = sign(op1)
       32*					  10 is op3 = abs(op1)
       33*					  11 is op3 = trunc(op1)
       34*					  12 is op3 = mod(op1,op2)
       35*					  13 is op3 = min(op1,op2)
       36*					  14 is op3 = max(op1,op2) */
       37 	pop3		char(1) unal,	/* result if operation is not comparsion */
       38 	pdesc3		bit(36) aligned,	/* descriptor of op3, result if comparison */
       39 	pop1		char(1) unal,	/* left operand */
       40 	pdesc1		bit(36) aligned,	/* descriptor */
       41 	pop2		char(1) unal,	/* right operand */
       42 	pdesc2		bit(36) aligned;	/* descriptor of op2, 2nd arg of round bif */
       43 
       44 dcl (	ans,op1,op2,product(9),remainder) char(64) aligned;
       45 dcl (	desc1,desc2,desc3) bit(36) aligned;
       46 dcl	max_desc bit(36) aligned int static init("100101000000000000000000000000111111"b);
       47 dcl	decimal_op_ entry(fixed bin,char(1) unal,bit(36) aligned,char(1) unal,bit(36) aligned,char(1) unal,bit(36) aligned);
       48 dcl	c char(1) unal based(p);
       49 dcl	p ptr;
       50 dcl (	sch,ch,ci,sign,sign1,sign2) char(1) aligned;
       51 dcl (	big,carry,col1,col2,exp,i,j,k,l0,l1,l2,l3,lg3,len1,len2,n,p1,p2,
       52 	s1,s2,scale1,scale2,scale3,sc3,st(9),sum) fixed bin;
       53 dcl (	addr,binary,bit,divide,fixed,length,max,min,null,substr,unspec) builtin;
       54 dcl	info bit(36) initial("111011011100010010110010000101001001"b) internal static;
       55 dcl (	zero_op1 init(13),zero_op2 init(22)) fixed bin int static;
       56 dcl	bit3 bit(3) aligned;
       57 dcl (	add,float,negate,no_round,product_calculated(9),signal_ufl) bit(1) aligned;
       58 dcl	operation fixed bin;
       59 dcl	based_fb based fixed bin;
       60 dcl	negabs bit(1) aligned init("0"b);
       61 
       62 dcl (	comparison	init(0),
       63 	addition		init(1),
       64 	subtraction	init(2),
       65 	multiplication	init(3),
       66 	division		init(4),
       67 	negation		init(5),
       68 	ceil_fun		init(6),
       69 	floor_fun		init(7),
       70 	round_fun		init(8),
       71 	sign_fun		init(9),
       72 	abs_fun		init(10),
       73 	trunc_fun		init(11),
       74 	mod_fun		init(12),
       75 	min_fun		init(13),
       76 	max_fun		init(14)) fixed bin int static;
       77 
       78 
       79 dcl	plio2_signal_$s_ entry(ptr,char(*) aligned,char(*) aligned,fixed bin);
       80 dcl	condition(5) char(13) aligned internal static
       81 	initial("SIZE","OVERFLOW","UNDERFLOW","ZERODIVIDE","FIXEDOVERFLOW");
       82 dcl	error_number(5) fixed bin internal static initial(158,159,160,120,121);
       83 
       84 begin:
       85 	desc3 = pdesc3;
       86 	desc1 = pdesc1;
       87 	negate,
       88 	signal_ufl = "0"b;
       89 	operation = poperation;
       90 	if operation = min_fun then operation = comparison;
       91 	if operation = max_fun then operation = comparison;
       92 	if operation = negation | operation = abs_fun
       93 	then do;
       94 
       95 	     /* we use the fact that op3 will have the same attributes as op1 */
       96 
       97 	     l1 = fixed(substr(desc1,25,12),12);
       98 	     sch = substr(pop1,1,1);
       99 	     if operation = negation
      100 	     then if sch = "-"
      101 		then sch = "+";
      102 		else sch = "-";
      103 	     else sch = "+";
      104 	     if substr(desc1,13,12) = substr(desc3,13,12) then /* check for equal scales */
      105 	     do;
      106 		if substr(desc1,7,1) = "0"b then l1 = l1 + 1;	/* floating pt */
      107 		substr(pop3,1,1) = sch;
      108 		substr(pop3,2,l1) = substr(pop1,2,l1);
      109 		return;
      110 	     end;
      111 	     else negabs = "1"b;
      112 	     end;
      113 
      114 	desc2 = pdesc2;
      115 	float = ^ substr(desc3,7,1);
      116 
      117 	l0 = fixed(substr(desc3,25,12),12);
      118 	if l0 = 0 then call setdesc;
      119 	lg3 = l0 + 1;
      120 
      121 
      122 	if float then lg3 = lg3 + 1;
      123 	else do;
      124 	     sc3 = fixed(substr(desc3,13,12),12);
      125 	     if sc3 > 2047 then sc3 = sc3 - 4096;
      126 	     end;
      127 
      128 	l1 = fixed(substr(desc1,25,12),12) + 1;
      129 
      130 	if substr(desc1,7,1)
      131 	then do;
      132 
      133 	     /* fixed decimal */
      134 
      135 	     scale1 = fixed(substr(desc1,13,12),12);
      136 	     if scale1 > 2047 then scale1 = scale1 - 4096;
      137 	     end;
      138 	else do;
      139 
      140 	     /* float decimal */
      141 
      142 	     ch = substr(pop1,l1+1,1);
      143 	     exp = fixed(unspec(ch),9);
      144 	     if exp >= 128 then exp = exp - 256;
      145 	     scale1 = -exp;
      146 	     end;
      147 
      148 	if operation >= negation & operation < mod_fun
      149 	then go to skip_opnd_two;
      150 
      151 	l2 = fixed(substr(desc2,25,12),12) + 1;
      152 
      153 	if substr(desc2,7,1)
      154 	then do;
      155 
      156 	     /* fixed decimal */
      157 
      158 	     scale2 = fixed(substr(desc2,13,12),12);
      159 	     if scale2 > 2047 then scale2 = scale2 - 4096;
      160 	     end;
      161 	else do;
      162 
      163 	     /* float decimal */
      164 
      165 	     ch = substr(pop2,l2+1,1);
      166 	     exp = fixed(unspec(ch),9);
      167 	     if exp >= 128 then exp = exp - 256;
      168 	     scale2 = -exp;
      169 	     end;
      170 
      171 	op2 = (64)"0";
      172 	sign2 = substr(pop2,1,1);
      173 	s2 = 66-l2;
      174 	substr(op2,s2,l2-1) = substr(pop2,2,l2-1);
      175 
      176 	do j = s2 to 64 while( substr(op2,j,1) = "0");
      177 	end;
      178 	s2 = j-1;					/* s2 = verify(op2,"0") - 1;	 */
      179 	p2 = 65-j;				/* # digits */
      180 
      181 skip_opnd_two:
      182 	ans, op1 = (64)"0";
      183 	sum, carry = 0;
      184 	sign1 = substr(pop1,1,1);
      185 	s1 = 66-l1;
      186 	substr(op1,s1,l1-1) = substr(pop1,2,l1-1);
      187 
      188 	do j = s1 to 64 while( substr(op1,j,1) = "0" );	/* find true number of digits */
      189 	end;
      190 	s1 = j-1;					/* s1 = position to left of first non-zero digit */
      191 	p1 = 65 - j;
      192 
      193 	if negabs then
      194 	do;
      195 		sign1 = sch;
      196 		go to assign_op1;
      197 	end;
      198 
      199 	if operation = division then go to divide_op;
      200 
/¯0    §*@          °ö:è    0 0  h  *@          °ö:è    00  ≤l*@          °ö:è    0    ¯l*¿          °ö:è    0~/¬  &°ö::RK£Ó   0(0(≤la         0 ¸`  853493.sts                          °ö::        Õ!≤6‰              $  0vGº≤la V¬            âëıÅ    Gº0N    l*@          °ö::    0F0V    P*@          °ö::    0N0^    à*@          °ö::    0V0f    §*@          °ö::    0^0n  h  *@          °ö::    0f0v  ≤l*@          °ö::    0n    ¯l*¿          °ö::    0‹0   &°ö:9RK£Ô   0Ü0Ü≤la         0~ {    853493.ec                           °ö:9        bpÃ†.              $  0‘Gƒ≤la             âëıÅ    Gƒ0¨    l*@          °ö:9    0§0¥    P*@          °ö:9    0¨0º    à*@          °ö:9    0¥0ƒ    §*@          °ö:9    0º0Ã  h  *@          °ö:9    0ƒ0‘  ≤l*@          °ö:9    0Ã    ¯l*¿          °ö:9    0:0~  &°ö;ñRK£Û   0‰0‰≤lm         0‹h    D853493_1.dll                       °ö;ñ        bY+ù              $  02GÃ≤lm ÀÍ            âëıÅ    GÃ0
    l*@          °ö;ñ    00    P*@          °ö;ñ    0
0    à*@          °ö;ñ    00"    §*@          °ö;ñ    00*  h  *@          °ö;ñ    0"02  ≤l*¿          °ö;ñ    0*    ¯l*¿          °ö;ñ    0ò0‹  &°ö;åRK£ı   0B0B≤lm         0: A.“  P853493_1.dll                       °ö;å        bpØ'Ì              $  0êG‘≤lm^"            âëıÅ    G‘0h    l*@          °ö;å    0`0p    P*@          °ö;å    0h0x    à*@          °ö;å    0p0Ä    §*@          °ö;å    0x0à  h  *@          °ö;å    0Ä0ê  ≤l*¿          °ö;å    0à    ¯l*¿          °ö;å    0ˆ0:  &°ö;†RK£ˆ   0†0†≤lm         0ò ;    R853493_1.dll                       °ö;†        Õ!≤6ÿ              $  0ÓG‹≤lm{d            âëıÅ    G‹0∆    l*@          °ö;†    0æ0Œ    P*@          °ö;†    0∆0÷    à*@          °ö;†    0Œ0ﬁ    §*@          °ö;†    0÷0Ê  h  *@          °ö;†    0ﬁ0Ó  ≤l*¿          °ö;†    0Ê    ¯l*¿          °ö;†    4ö0ò  &°ö;úRK£¯   0˛0˛≤lm         0ˆ∫    M853493_1.map                       °ö;ú        Õ!≤63              $  1LG‰≤lm ?‹            âëıÅ    G‰1$    l*@          °ö;ú    11,    P*@          °ö;ú    1$14    à*@          °ö;ú    1,1<    §*@          °ö;ú    141D  h  *@          °ö;ú    1<1L  ≤l*¿          °ö;ú    1D    ¯l*¿          °ö;ú    1D0  &§`[ıR}˝z   1\1\>la         1T ‹    773720.value                        §`[ı        Õ k#„              $  1äGÏ>lm h@            âëıÅ    1Ç1¢    l*@          §`[ı    1í1z    à*@          §`[ı    1™    >l*@          §`[ı    1ö1Ç    §*@          §`[ı    GÏ1í    P*@          §`[ı    1z1™  Í  *@          §`[ı    1¢1ä  h  *@          §`[ı      GÙ      *           §`[R    1v1  &§`[RR}Ωä   1¬1¬>la         1∫ ‰    773720.sts                          §`[R        Õ!ig              $  1 1≤>la ‚i            âëıÅ    GÙ1Ë    P*@          §`[R    1‡1    à*@          §`[R    1Ë1¯    §*@          §`[R    11   h  *@          §`[R    1¯    >l*@          §`[R    G¸1    §*@          §`[    11V  h  *@          §`[    1∫1T  &§`[R}Ωm   1 1 >la         1]    773720.sts.archive                  §`[        bY+              $  1V1N>la Ó‹            âëıÅ    1FG¸    P*@          §`[    1N1>    l*@          §`[      1F      *           §`[    1    >l*@          §`[    1n1f    §*@          §`[    1^1¨  h  *@          §`[    H1^    à*@          §`[    1‘1∫  &§`[R}Ωù   1~1~>la         1v`    773720.ec                           §`[        Õ .±
É              $  1¨1§>la ù            âëıÅ    1§H    l*@          §`[      1ú      *           §`[    1f    >l*@          §`[    1ƒ1º    §*@          §`\ó    1¥2  h  *@          §`\ó    1Ã1¥    à*@          §`\ó    H1ƒ    P*@          §`\ó    221v  &§`\óRTô7   1‹1‹>lm         1‘Ò    D773720_1.dll                       §`\ó        bpØ'              $  21˙>lm B÷            âëıÅ      H      *           		go to normalize;
      324 	     end;
      325 
      326 	if operation = sign_fun
      327 	then do;
      328 		if sign1 = "-"
      329 		then i = -1;
      330 		else if p1 = 0
      331 		     then if substr(desc1,7,1)	/* fixed point zero */
      332 			then i = 0;
      333 			else if scale1 = -127	/* floating point zero */
      334 			     then i = 0;
      335 			     else i = 1;
      336 		     else i = 1;
      337 		addr(pop3)->based_fb = i;
      338 		return;
      339 	     end;
      340 
      341 	if operation = mod_fun
      342 	then do;
      343 		p = addr(ans);
      344 		call decimal_op_(division,c,max_desc,pop1,pdesc1,pop2,pdesc2);
      345 		call decimal_op_(floor_fun,c,max_desc,c,max_desc,pop2,pdesc2);
      346 		call decimal_op_(multiplication,c,max_desc,c,max_desc,pop2,pdesc2);
      347 		call decimal_op_(subtraction,pop3,pdesc3,pop1,pdesc1,c,max_desc);
      348 		return;
      349 	     end;
      350 
      351 	i = scale1;
      352 	j = scale2;
      353 
      354 	if operation ^= comparison
      355 	then do;
      356 		if p1 = 0
      357 		then do;
      358 			if operation = multiplication then go to assign_zero2;
      359 			if p2 = 0 then go to assign_zero2;
      360 			go to assign_op2;
      361 		     end;
      362 		if p2 = 0
      363 		then do;
      364 			if operation = multiplication then go to assign_zero2;
      365 			go to assign_op1;
      366 		     end;
      367 
      368 		if operation = multiplication then go to multiply_op;
      369 		if operation = addition then add = "1"b; else add = "0"b;
      370 	     end;
      371 
      372 	scale3 = max(scale1,scale2);				/* pl1 language rules for scale of result */
      373 	col1 = s1 - scale3 + scale1 + 1;			/* re-align operands to account for scales */
      374 	col2 = s2 - scale3 + scale2 + 1;
      375 	len1 = min(65-col1,p1);
      376 	len2 = min(65-col2,p2);
      377 
      378 	if float 						/* force number to start in at least column 2 */
      379 	then do;
      380 		if col1 < 2
      381 		then do;
      382 			k = 2-col1;
      383 again:			col1 = col1 + k;
      384 			col2 = col2 + k;
      385 			scale1 = scale1 - k;
      386 			scale2 = scale2 - k;
      387 			scale3 = scale3 - k;
      388 		     end;
      389 		if col2 < 2
      390 		then do;
      391 			k = 2-col2;
      392 			go to again;
      393 		     end;
      394 	     end;
      395 	else if operation ^= comparison
      396 	     then do;
      397 		if col1 < 2 then go to signal_size;
      398 		if col2 < 2 then go to signal_size;
      399 		end;
      400 
      401 	if operation ^= comparison
      402 	then do;
      403 		if len1 < 1				/* operand one was zero */
      404 		then do;
      405 			if len2 < 1 then go to assign_zero2;	/* both are zero */
      406 assign_op2:
      407 			ans = (64)"0";
      408 			substr(ans,s2+1,p2) = substr(pop2,l2-p2+1,p2);
      409 			if operation = subtraction then if sign2 = "+" then sign2 = "-";
      410 							else sign2 = "+";
      411 			sign = sign2;
      412 			l3 = s2;
      413 			scale3 = j;
      414 			go to normalize;
      415 		     end;
      416 		if len2 < 1				/* operand two was zero */
      417 		then do;
      418 assign_op1:
      419 			ans = (64)"0";
      420 			substr(ans,s1+1,p1) = substr(pop1,l1-p1+1,p1);
      421 			sign = sign1;
      422 			l3 = s1;
      423 			scale3 = i;
      424 			go to normalize;
      425 		     end;
      426 	     end;
      427 	else do;
      428 		if col1 ^= col2 then go to test;
      429 		if col1 < 2
      430 		then do;
      431 			n = l1 - p1 + 1;
      432 			k = l2 - p2 + 1;
      433 compare_long_fixed_loop:
      434 			ch = substr(op1,n,1);
      435 			ci = substr(op2,k,1);
      436 			if ch > ci			/* op1 > op2 */
      437 			then do;
      438 				big = 1;
      439 				go to compare;
      440 			     end;
      441 			if ch < ci			/* op1 < op2 */
      442 			then do;
      443 				big = -1;
      444 				go to compare;
      445 			     end;
      446 			if n = 64
      447 			then do;				/* op1 is shorter */
      448 				do n = k+1 to 64 while(substr(op2,n,1) = "0");
      449 				end;
      450 				if n = 65
      451 				then do;			/* op1 = op2 */
      452 compare_equal:				big = 0;
      453 					go to compare;
      454 				     end;
      455 				big = -1;			/* op1 < op2 */
      456 				go to compare;
      457 			     end;
      458 			if k = 64
      459 			then do;				/* op2 shorter */
      460 				do k = n+1 to 64 while(substr(op1,k,1) = "0");
      461 				end;
      462 				if k = 65 then go to compare_equal;	/* op1 = op2 */
      463 				big = 1;			/* op1 > op2 */
      464 				go to compare;
      465 			     end;
      466 			k = k + 1;
      467 			n = n + 1;
      468 			go to compare_long_fixed_loop;
      469 		     end;
      470 	     end;
      471 	op1,op2 = (64)"0";
      472 	substr(op1,col1,len1) = substr(pop1,l1-p1+1,len1);	/* final alignment prior to operation */
      473 	substr(op2,col2,len2) = substr(pop2,l2-p2+1,len2);	/* takes care of lengths and scale.   */
      474 	p1 = 65-col1;
      475 	p2 = 65-col2;
      476 
      477 /* Now determine which operand has the larger magnitude, and make it operand one. */
      478 
      479 test:
      480 	if len1 > len2
      481 	then big = 1;
      482 	else if len2 > len1
      483 	     then big = -1;
      484 	     else do;
      485 		do n = col1 to 64 while(substr(op1,n,1) = substr(op2,n,1));
      486 		end;
      487 		if n = 65
      488 		then big = 0;
      489 		else if substr(op2,n,1) < substr(op1,n,1)
      490 		     then big = 1;
      491 		     else big = -1;
      492 		end;
      493 
      494 	if operation = comparison
      495 	then do;
      496 compare:
      497 		if big ^= 0
      498 		     then if sign1 = "+"
      499 			     then if sign2 = "-"
      500 				     then big = 1;
      501 				     else;
      502 			     else if sign2 = "+"
      503 				     then big = -1;
      504 				     else big = -big;
      505 
      506 		if poperation = min_fun
      507 		then if big <= 0
      508 		     then go to assign_op1;
      509 		     else go to assign_op2;
      510 		if poperation = max_fun
      511 		then if big <= 0
      512 		     then go to assign_op2;
      513 		     else go to assign_op1;
      514 
      515 		addr(pdesc3)->based_fb = big;
      516 		return;
      517 	     end;
      518 
      519 /* Simulate a 3-dimensional array, and use "info" to determine whether the operands
      520*   must be switched, what the operation will be, and the sign of the result.	*/
      521 
      522 	s1 = col1-1;
      523 	s2 = col2-1;
      524 	j = 1;
      525 	if ^add
      526 	then if sign2 = "-"
      527 	     then sign2 = "+";
      528 	     else sign2 = "-";
      529 	if sign1 = "-" then j = j + 18;
      530 	if sign2 = "-" then j = j + 9;
      531 	if big = 0 then j = j + 3;
      532 	else if big = 1 then j = j + 6;
      533 	if j = zero_op1 | j = zero_op2 then go to assign_zero2;
      534 	bit3 = substr(info,j,3);
      535 	add = substr(bit3,3,1);
      536 	if substr(bit3,1,1)					/* switch bit */
      537 	then do;
      538 		ans = op1;
      539 		op1 = op2;
      540 		op2 = ans;
      541 		ans = (64)"0";
      542 		k = s1;
      543 		s1 = s2;
      544 		s2 = k;
      545 	     end;
      546 	if substr(bit3,2,1)					/* sign bit */
      547 	then sign = "+";
      548 	else sign = "-";
      549 	l1,l2,l3 = 64;
      550 
      551 /* Loop to perform addition or subtraction. op2 <= op1 */
      552 
      553 loop1:
      554 	ch = substr(op2,l2,1);
      555 	k = fixed(unspec(ch) & "000001111"b);		/* convert ASCII to BINARY */
      556 
      557 loop2:
      558 	ch = substr(op1,l1,1);
      559 	i = fixed(unspec(ch) & "000001111"b,15,0);
      560 
      561 	if add
      562 	then do;
      563 		sum = i + k + carry;
      564 		carry = 0;
      565 		if sum >= 10
      566 		then do;
      567 			sum = sum - 10;
      568 			carry = 1;
      569 		     end;
      570 	     end;
      571 	else do;
      572 		sum = i - k - carry;
      573§`\ó    1º    >l*¿          §`\ó    22    §*@          §`\õ    2
2X  h  *@          §`\õ    2"2
    à*@          §`\õ    2*2    P*@          §`\õ    H2"    l*@          §`\õ    2ê1‘  &§`\õRTô;   2:2:>lm         22      P773720_1.dll                       §`\õ        Õ!≤6
“              $  2XH>lm€≤            âëıÅ    2    >l*¿          §`\õ    2p2h    §*@          §`\í    2`H  h  *@          §`\í    2x2`    à*@          §`\í    2Ä2p    P*@          §`\í    2à2x    l*@          §`\í      2Ä      *           §`\í    2Ó22  &§`\íRTô?   2ò2ò>lm         2ê ƒ    R773720_1.dll                       §`\í        bpÃ†‘              $  H2à>lm{d            âëıÅ    5Ë2ﬁ  h  *@          §`\y    2∆5Ë    à*@          §`\y    2Œ2æ    P*@          §`\y    2÷2∆    l*@          §`\y      2Œ      *           §`\y    2∂    >l*¿          §`\y    2H$    §*@          §`_|    2L2ê  &§`\yRTôO   2ˆ2ˆ>lm         2ÓC    M773720_1.map                       §`\y        Õ!iï              $  2ﬁ2÷>lm 4Ë            âëıÅ    22Ê    à*@          §`_|    2$2    P*@          §`_|    2,2    l*@          §`_|      2$      *           §`_|    H$    >l*¿          §`_|    H,2D    §*@          §`_C    2<2ä  h  *@          §`_C    2™2Ó  &§`_|RTæ)   2T2T>lm         2Ln    D773720_2.dll                       §`_|        bpØ'
              $  242,>lm 	            âëıÅ    2zH,    P*@          §`_C    2Ç2r    l*@          §`_C      2z      *           §`_C    2D    >l*¿          §`_C    2¢2ö    §*@          §`_~    2í2‡  h  *@          §`_~    H42í    à*@          §`_~    32L  &§`_CRTæ-   2≤2≤>lm         2™ G    P773720_2.dll                       §`_C        bpØ'
              $  2ä2Ç>lm
             âëıÅ    2ÿH4    l*@          §`_~      2–      *           §`_~    2ö    >l*¿          §`_~    2¯2    §*@          §`_}    2Ë36  h  *@          §`_}    3 2Ë    à*@          §`_}    H<2¯    P*@          §`_}    5í2™  &§`_~RTæ1   33>lm         3 A    R773720_2.dll                       §`_~        bq©ä|              $  2‡2ÿ>lmâ*            âëıÅ      H<      *           §`_}    2    >l*¿          §`_}    3F3N    l*@          §`∆Û      3>      *           §`∆Û    3>3V    P*@          §`∆Û    3NHD    à*@          §`∆Û    HD3å  h  *@          §`∆Û    3ﬁ5í  &§`_}R}zx   3n3n>lm         3f¿    M773720_2.map                       §`_}        bpØ'
              $  363.>lm (‹            âëıÅ    3^    >l*¿          §`∆Û    3ú3§    l*@          §`∆	      3î      *           §`∆	    3î3¨    P*@          §`∆	    3§3º    à*@          §`∆	    3ºHL  h  *@          §`∆	    3¨3¥    §*@          §`∆	    4<3"  &§`∆ÛR}˝p   3ÃD∆>lm   D∆    3ƒ=  M773720_3.map                       §`∆Û        bpÃ†˛              $  3å3F>lmÑï            âëıÅ    3Ú3˙    l*@          §`∆      3Í      *           §`∆    3Í3    P*@          §`∆    3˙3    à*@          §`∆    33  h  *@          §`∆    33
    §*@          §`∆    3
    >l*¿          §`∆    3ƒ3Ä  &§`∆	R}˝n   3*D∏>lm   D∏    3" b    G773720_3.dll                       §`∆	        Õ!i               $  HL3ú>lm-î            âëıÅ    HT3P    l*@          §`∆¯    3H3X    P*@          §`∆¯    3P3`    à*@          §`∆¯    3X3h    §*@          §`∆¯    3`3p  h  *@          §`∆¯    3h    >l*¿          §`∆¯    H\      ¯l*¿          °ör≤    3"3ﬁ  &§`∆R}˝m   3àD™>lm   D™    3ÄÒ1‹  B773720_3.dll                       §`∆        bpÃ†Ô              $  33Ú>lm H            âëıÅ    3Æ        l*@          °ör©    3∂        P*@          °ör©    3æ        à*@          °ör©    3∆        §*@          °ör©    3Œ      h  *@          °ör©    3÷      ‹l*¿          °ör©    Hd      ¯l*¿          °ör©    3Ä3f  &§`∆¯R}˝k   3ÊDé>lm   Dé    3ﬁ w    A773720_3.dll                       §`∆¯        Õ!iˇ              $  3pHT>lmﬁæ            âëıÅ    4        l*@          °ör¥    4        P*@          °ör¥    4        à*@          °ör¥    4$        §*@          °ör¥    4,      h  *@          °ör¥    44      ‹l*¿          °ör¥            ¯l*¿          °ör¥      3ƒ  &§`∆R}ÓÓ   4D4D>lm         4<≤    G1U01200.crc.dll                    §`∆        Õ!i              $  4í4b>lmÆ$            âëıÅ      H‘      *           §`∆    4r4Ç    à*@          §`∆    H‘4j    P*@          §`∆    4Ç4í  h  *@          §`∆    4j4z    §*@          §`∆    3x      ¯l*¿          §	p}    4z    >l*¿          §`∆    4¯0ˆ  &°ÀÿcRK§   4¢4¢‹lm         4ö ö    G1G01000.crc.dll                    °Àÿc        bq©ä	Ú              $  4Hl‹lm¨$            âëıÅ    Hl4»    l*@          °Àÿc    4¿4–    P*@          °Àÿc    4»4ÿ    à*@          °Àÿc    4–4‡    §*@          °Àÿc    4ÿ4Ë  h  *@          °Àÿc    4‡4  ‹l*¿          °Àÿc    4Ë    ¯l*¿          °Àÿc    4^4ö  &£s¡{RK§   4 4 >la         4¯ m    883028.value                        £s¡{        Õ k#L              $  	4VHt>lm .Ù            âëıÅ    Ht4&    P*@          £s¡{    44.    §*@          £s¡{    4&46    à*@          £s¡{    4.4>    l*@          £s¡{    464F  Í  *@          £s¡{    4>4N  h  *@          £s¡{    4F4V  >l*@          £s¡{    4N    ¯l*¿          £s¡{    4º4¯  &£s¡uRK§   4f4f>la         4^Ã    883028.sts.archive                  £s¡u        Õ .±z              $  4¥H|>la I            âëıÅ    H|4å    l*@          £s¡u    4Ñ4î    P*@          £s¡u    4å4ú    à*@          £s¡u    4î4§    §*@          £s¡u    4ú4¨  h  *@          £s¡u    4§4¥  >l*@          £s¡u    4¨    ¯l*¿          £s¡u    54^  &£s¡∫RK§   4ƒ4ƒ>la         4º u+  883028.sts                          £s¡∫        bY+ Ù              $  5HÑ>la D            âëıÅ    HÑ4Í    l*@          £s¡∫    4‚4Ú    P*@          £s¡∫    4Í4˙    à*@          £s¡∫    4Ú5    §*@          £s¡∫    4˙5
  h  *@          £s¡∫    55  >l*@          £s¡∫    5
    ¯l*¿          £s¡∫    5x4º  &£s¡πRK§   5"5">la         5 Òå  883028.ec                           £s¡π        Õ k# ∏              $  5pHå>la 2            âëıÅ    Hå5H    l*@          £s¡π    5@5P    P*@          £s¡π    5H5X    à*@          £s¡π    5P5`    §*@          £s¡π    5X5h  h  *@          £s¡π    5`5p  >l*@          £s¡π    5h    ¯l*¿          £s¡π    5÷5  &£s¬hRK§   5Ä5Ä>lm         5x ˜    D883028_2.dll                       £s¬h        bq©ä	9              $  5ŒHî>lm ˘Ï            âëıÅ    Hî5¶    l*@          £s¬h    5û5Æ    P*@          £s¬h    5¶5∂    à*@          £s¬h    5Æ5æ    §*@          £s¬h    5∂5∆  h  *@          £s¬h    5æ5Œ  >l*¿          £s¬h    5∆    ¯l*¿          £s¬h    545x  &£s¬gRK§   5ﬁ5ﬁ>lm         5÷Õ    P883028_2.dll                       £s¬g        Õ!i 1              $  5,Hú>lm	Ú            âëıÅ    Hú5    l*@          £s¬g    5¸5    P*@          £s¬g    55    à*@          £s¬g    55    §*@          £s¬g    55$  h  *@          £s¬g    55,  >l*¿          £s¬g    5$    ¯l*¿          £s¬g    55÷  &£s¬mRK§   5<5<>lm         54«    R883028_2.dll                       £s¬m        Õ!≤6L              $  5äH§>lm{d            âëıÅ    H§5b    l*@          £s¬m    5Z5j    P*@          £s¬m    5b5r    à*@          £s¬m    5j5z    §*@          £s¬m    5r5Ç  h  *@          £s¬m    5z5ä  >l*¿          £s¬m    5Ç    ¯l*¿          £s¬m    3f3  &§`_ZRTæ9   5ö5ö>lm         5íÖ    G1001700.crc.dll                    §`_Z        Õ!i&              $  5‡5∏>lm¨$            âëıÅ      Iƒ      *           §`_Z    Iƒ5»    P*@          §`_Z    5¿5ÿ    à*@          §`_Z    5ÿ5‡  h  *@          §`_Z    5»5–    §*@          §`_Z    5–    >l*¿          §`_Z    2æ2∂    §*@          §`\y    6N54  &£s¬iRK§   5¯5¯>lm         5 I    M883028_2.map                       £s¬i        Õ!iñ              $  6FH¨>lm 'ˆ            âëıÅ    H¨6    l*@          £s¬i    66&    P*@          £s¬i    66.    à*@          £s¬i    6&66    §*@          £s¬i    6.6>  h  *@          £s¬i    666F  >l*¿          £s¬i    6>    ¯l*¿          £s¬i    6¥5  &£Ñ“ºRK§   6V6V>la         6N‚    832155.value                        £Ñ“º        Õ .± —              $  	6¨H¥Œla W            âëıÅ    H¥6|    P*@          £Ñ“º    6t6Ñ    §*@          £Ñ“º    6|6å    à*@          £Ñ“º    6Ñ6î    l*@          £Ñ“º    6å6ú  Í  *@          £Ñ“º    6î6§  h  *@          £Ñ“º    6ú6¨  >l*@          £Ñ“º    6§    ¯l*¿          £Ñ“º    66N  &£Ñ“øRK§   6º6º>la         6¥ W    832155.sts.archive                  £Ñ“ø        Õ!≤6 ·              $  6
Hº>la óX            âëıÅ    Hº6‚    l*@          £Ñ“ø    6⁄6Í    P*@          £Ñ“ø    6‚6Ú    à*@          £Ñ“ø    6Í6˙    §*@          £Ñ“ø    6Ú6  h  *@          £Ñ“ø    6˙6
  >l*@          £Ñ“ø    6    ¯l*¿          £Ñ“ø    6p6¥  &£Ñ“:RK§    66>la         6Í    832155.sts                          £Ñ“:        bpØ'Ç              $  6hHƒ>la êÛ            âëıÅ    Hƒ6@    l*@          £Ñ“:    686H    P*@          £Ñ“:    6@6P    à*@          £Ñ“:    6H6X    §*@          £Ñ“:    6P6`  h  *@          £Ñ“:    6X6h  >l*@          £Ñ“:    6`    ¯l*¿          £Ñ“:    6Œ6  &£Ñ“RK§!   6x6x>la         6p i    832155.ec                           £Ñ“        bpØ'c              $  6∆HÃ>la 
`            âëıÅ    HÃ6û    l*@          £Ñ“    6ñ6¶    P*@          £Ñ“    6û6Æ    à*@          £Ñ“    6¶6∂    §*@          £Ñ“    6Æ6æ  h  *@          £Ñ“    6∂6∆  >l*@          £Ñ“    6æ    ¯l*¿          £Ñ“    7,6p  &£Ñ”<RK§#   6÷6÷>lm         6Œ {    D832155_2.dll                       £Ñ”<        Õ .±~              $  7$H‘>lm ¬            âëıÅ    H‘6¸    P*@          £Ñ”<    6Ù7    à*@          £Ñ”<    6¸7    §*@          £Ñ”<    77    l*           £Ñ”<    77  h  *@          £Ñ”<    77$  >l*¿          £Ñ”<    7    ¯l*¿          £Ñ”<    7ä6Œ  &£Ñ”3RK§$   7474>lm         7,Q    P832155_2.dll                       £Ñ”3        Õ!≤6È              $  7ÇH‹>lm ˝v            âëıÅ    H‹7Z    P*@          £Ñ”3    7R7b    à*@          £Ñ”3    7Z7j    §*@          £Ñ”3    7b7r    l*           £Ñ”3    7j7z  h  *@          £Ñ”3    7r7Ç  >l*¿          £Ñ”3    7z    ¯l*¿          £Ñ”3    7Ë7,  &£Ñ”RK§&   7í7í>lm         7ä K    R832155_2.dll                       £Ñ”        bq©ä≈              $  7‡H‰>lm|Ï            âëıÅ    H‰7∏    P*@          £Ñ”    7∞7¿    à*@          £Ñ”    7∏7»    §*@          £Ñ”    7¿7–    l*           £Ñ”    7»7ÿ  h  *@          £Ñ”    7–7‡  >l*¿          £Ñ”    7ÿ    ¯l*¿          £Ñ”    7F7ä  &£Ñ”=RK§'   77>lm         7Ë ä  M832155_2.map                       £Ñ”=        Õ .±
ñ              $  7>HÏ>lm €            âëıÅ    HÏ7    l*@          £Ñ”=    77    P*@          £Ñ”=    77&    à*@          £Ñ”=    77.    §*@          £Ñ”=    7&76  h  *@          £Ñ”=    7.7>  >l*¿          £Ñ”=    76    ¯l*¿          £Ñ”=    7§7Ë  &£ÑˆºRK§)   7N7N>lm         7F ˛    D832155_1.dll                       £Ñˆº        bY+)              $  7úHÙ>lm ¬            âëıÅ    HÙ7t    P*@          £Ñˆº    7l7|    à*@          £Ñˆº    7t7Ñ    §*@          £Ñˆº    7|7å    l*           £Ñˆº    7Ñ7î  h  *@          £Ñˆº    7å7ú  >l*¿          £Ñˆº    7î    ¯l*¿          £Ñˆº    87F  &£Ñˆ©RK§+   7¨7¨>lm         7§‘    P832155_1.dll                       £Ñˆ©        bq©äá              $  7˙H¸>lm ˝v            âëıÅ    H¸7“    P*@          £Ñˆ©    7 7⁄    à*@          £Ñˆ©    7“7‚    §*@          £Ñˆ©    7⁄7Í    l*           £Ñˆ©    7‚7Ú  h  *@          £Ñˆ©    7Í7˙  >l*¿          £Ñˆ©    7Ú    ¯l*¿               953 				substr(op1,col1,len1) = substr(ans,l3+1,len1);
      954 				ans = op1;
      955 			end;
      956 			else if sc3 > scale3 then
      957 				do;
      958 					col1 = l3 + 1 + scale3 - sc3;
      959 					len1 = 64 - l3 - 1;
      960 					if lg3 >= 64 - col1 then go to scale_fixed;
      961 					go to signal_size;
      962 				end;
      963 
      964 assign:
      965 	substr(pop3,1,lg3) = substr(ans,65-lg3,lg3);
      966 	if float
      967 	then do;
      968 		unspec(ch) = substr(unspec(exp),28,9);
      969 		substr(pop3,lg3,1) = ch;
      970 	     end;
      971 	substr(pop3,1,1) = sign;
      972 	if ^signal_ufl then return;
      973 
      974 signal:
      975 
      976 /* Signal the relevant condition. The default handler will print a message
      977*    indicating that the program is in error (except for underflow), and so
      978*    if he returns, we will, too. (although we could really do anything we
      979*    please!) */
      980 
      981 	call plio2_signal_$s_(null,condition(i),"",error_number(i));
      982 
      983 	return;
      984 
      985 assign_zero:
      986 	ans = (64)"0";
      987 
      988 assign_zero2:
      989 	sign = "+";
      990 	exp = 127;
      991 	go to assign;
      992 
      993 
      994 /* BIG REL BITS SIGNS (definition of "info" bit string)
      995*   -1   <   111  ++
      996*    0   =   011  ++
      997*    1   >   011  ++
      998*   -1   <   100  +-
      999*    0   =   010  +- Zero_op1
     1000*    1   >   010  +-
     1001*   -1   <   110  -+
     1002*    0   =   010  -+ Zero_op2
     1003*    1   >   000  -+
     1004*   -1   <   101  --
     1005*    0   =   001  --
     1006*    1   >   001  --
     1007*
     1008*bit(1) = 1 if switch operands to make op1 > op2,
     1009*bit(2) = 1 if result is +,
     1010*bit(3) = 1 if operation is add. */
     1011 
     1012 
     1013 
     1014 /* setdesc follows PL/I rules to calculate the precision and scale of the result
     1015*   when this has not been provided by the calling program */
     1016 
     1017 setdesc:	proc;
     1018 	if operation = comparison then return;
     1019 	if operation > division then return;
     1020 	p1 = fixed(substr(desc1,25,12),12);
     1021 	p2 = fixed(substr(desc2,25,12),12);
     1022 	if float then
     1023 	do;
     1024 		l0 = max(p1,p2);
     1025 	end;
     1026 	else
     1027 	do;
     1028 		scale1 = fixed(substr(desc1,13,12),12);
     1029 		if scale1 > 2047 then scale1 = scale1 - 4096;
     1030 		scale2 = fixed(substr(desc2,13,12),12);
     1031 		if scale2 > 2047 then scale2 = scale2 - 4096;
     1032 		go to case(operation);
     1033 
     1034 /* addition|subtraction */
     1035 
     1036 case(1): case(2):	scale3 = max(scale1,scale2);
     1037 		l0 = min(63,max(p1-scale1,p2-scale2)+scale3+1);
     1038 		go to set_scale;
     1039 
     1040 /* multiplication */
     1041 
     1042 case(3):		l0 = min(63,p1+p2+1);
     1043 		scale3 = scale1 + scale2;
     1044 		go to set_scale;
     1045 
     1046 /* division */
     1047 
     1048 case(4):		l0 = 63;
     1049 		scale3 = 63 - p1 + scale1 - scale2;
     1050 
     1051 set_scale:	if scale3 < 0 then scale3 = scale3 + 4096;
     1052 		substr(desc3,13,12) = bit(binary(scale3,12),12);
     1053 	end;
     1054 
     1055 	substr(desc3,25,12) = bit(binary(l0,12),12);
     1056 	pdesc3 = desc3;
     1057 	return;
     1058 end;
     1059 
     1060 	end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/03/83  1005.7  decimal_op_.pl1                   >spec>on>pl128d>decimal_op_.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
abs_fun                                constant        fixed bin(17,0)          initial dcl 62 ref 92
add                             000477 automatic       bit(1)                   dcl 57 set ref 369* 369* 525 535* 561
addition       £Ñˆ©    8`7§  &£Ñˆ≈RK§0   8
8
>lm         8 Œ∆  R832155_1.dll                       £Ñˆ≈        bq©ä-              $  8XH>lm|Ï            âëıÅ    H80    P*@          £Ñˆ≈    8(88    à*@          £Ñˆ≈    808@    §*@          £Ñˆ≈    888H    l*           £Ñˆ≈    8@8P  h  *@          £Ñˆ≈    8H8X  >l*¿          £Ñˆ≈    8P    ¯l*¿          £Ñˆ≈    8æ8  &£Ñˆ‘RK§2   8h8h>lm         8`ê    G100130D.crc.dll                    £Ñˆ‘        Õ!≤6              $  8∂H>lm¨$            âëıÅ    H8é    l*@          £Ñˆ‘    8Ü8ñ    P*@          £Ñˆ‘    8é8û    à*@          £Ñˆ‘    8ñ8¶    §*@          £Ñˆ‘    8û8Æ  h  *@          £Ñˆ‘    8¶8∂  >l*¿          £Ñˆ‘    8Æ    ¯l*¿          £Ñˆ‘    8L8`  &£Ñˆ…RK§4   8∆8∆>lm         8æ P    M832155_1.map                       £Ñˆ…        bpØ'ç              $  8H>lm €            âëıÅ    H8Ï    l*@          £Ñˆ…    8‰8Ù    P*@          £Ñˆ…    8Ï8¸    à*@          £Ñˆ…    8Ù8    §*@          £Ñˆ…    8¸8  h  *@          £Ñˆ…    88  >l*¿          £Ñˆ…    8    ¯l*¿          £Ñˆ…    8$    h  *@          âëıÅ    8,8    à*@          âëıÅ    848$    §*@          âëıÅ    8<8,    P*@          âëıÅ    8D84    l*@          âëıÅ      8<      *           âëıÅ    98æ  &£ïRK§5   8T8T≤la         8L‚6V  781741.value                        £ï        bY+â              $  	8¢H>lm n            âëıÅ    8Ç8z  h  *@          £ï    8r8¢  ≤l*@          £ï    8™8r  Í  *@          £ï    8í8™    à*@          £ï    8ö8ä    §*@          £ï    H8í    P*@          £ï    8z    ¯l*¿          £ï    8ä8Ç    l*@          £ï    9n9  &£ïïRK§8   8∫8∫≤la         8≤Í6  781741.sts                          £ïï        bq©än              $  9 H,>la œ¯            âëıÅ    8‡8Ë    à*@          £ïï    98ÿ    P*@          £ïï    8ÿ8    §*@          £ïï    8Ë8¯  h  *@          £ïï    89   ≤l*@          £ïï    8¯    ¯l*¿          £ïï    H,8‡    l*@          £ïï    8≤8L  &£ï#RK§6   99≤la         9 W6º  781741.sts.archive                  £ï#        Õ .±
‚              $  9^H$>la ⁄            âëıÅ    9>9F    à*@          £ï#    9f96    P*@          £ï#    969N    §*@          £ï#    9F9V  h  *@          £ï#    9N9^  ≤l*@          £ï#    9V    ¯l*¿          £ï#    H$9>    l*@          £ï#    9Ã8≤  &£ïòRK§9   9v9v≤la         9n i6x  781741.ec                           £ïò        bpÃ†
»              $  9ºH4>la 
i            âëıÅ    9ú9§    à*@          £ïò    9ƒ9î    P*@          £ïò    9î9¨    §*@          £ïò    9§9¥  h  *@          £ïò    9¨9º  ≤l*@          £ïò    9¥    ¯l*¿          £ïò    H49ú    l*@          £ïò    9*9n  &§	Z:RK§;   9‘9‘>lm         9Ã Ì#4  D781741_1.dll                       §	Z:        bq©ä
◊              $  9H<>lm »í            âëıÅ    9˙9    à*@          §	Z:    9"9Ú    P*@          §	Z:    9Ú9
    §*@          §	Z:    99  h  *@          §	Z:    9
9  >l*¿          §	Z:    9    ¯l*¿          §	Z:    H<9˙    l*@          §	Z:    9à9Ã  &§	Z<RK§=   9292>lm         9*√#í  P781741_1.dll                       §	Z<        Õ!i-              $  9xHD>lm cl            âëıÅ    9X9`    à*@          §	Z<    9Ä9P    P*@          §	Z<    9P9h    §*@          §	Z<    9`9p  h  *@          §	Z<    9h9x  >l*¿          §	Z<    9p    ¯l*¿          §	Z<    HD9X    l*@          §	Z<    9Ê9*  &§	Z$RK§?   9ê9ê>lm         9àΩ#  R781741_1.dll                       §	Z$        bq©ä
ÿ              $  9÷HL>lmü
            âëıÅ    9∂9æ    à*@          §	Z$    9ﬁ9Æ    P*@          §	Z$    9Æ9∆    §*@          §	Z$    9æ9Œ  h  *@          §	Z$    9∆9÷  >l*¿          §	Z$    9Œ    ¯l*¿          §	Z$    HL9∂    l*@          §	Z$    :D9à  &§	Z?RK§A   9Ó9Ó>lm         9Ê O%`  M781741_1.dll                       §	Z?        Õ .±
√           475 523 639* 643 729* 744 749* 749 750 839* 844
                                                                                  845* 845
comparison                             constant        fixed bin(17,0)          initial dcl 62 ref 90 91 354 395 401 494 1018
condition                       000015 internal static char(13)                 initial array dcl 80 set ref 974*
decimal_op_                     000046 constant        entry                    external dcl 47 ref 344 345 346 347
desc1                           000420 automatic       bit(36)                  dcl 45 set ref 86* 97 104 106 128 130 135 330 1020
                                                                                  1028
desc2                           000421 automatic       bit(36)                  dcl 45 set ref 114* 151 153 158 1021 1030
desc3                           000422 automatic       bit(36)                  dcl 45 set ref 84* 104 115 117 124 1052* 1055* 1056
divide                                                 builtin function         dcl 53 ref 771
division                        000013 internal static fixed bin(17,0)          initial dcl 62 set ref 199 344* 1019
error_number                    000041 internal static fixed bin(17,0)          initial array dcl 82 set ref 974*
exp                             000440 automatic       fixed bin(17,0)          dcl 51 set ref 143* 144 144* 144 145 166* 167 167*
                                                                                  167 168 912* 913* 917* 917 925 930 936 936* 936
                                                                                  968 990*
fixed                                                  builtin function         dcl 53 ref 97 117 124 128 135 143 151 158 166 215
                                                                                  310 555 559 653 657 661 760 762 766 770 784 843
                                                                                  846 1020 1021 1028 1030
float                           000500 automatic       bit(1)                   dcl 57 set ref 115* 122 378 595 605 704 720 872 904
                                                                                  966 1022
floor_fun                       000014 internal static fixed bin(17,0)          initial dcl 62 set ref 236 345*
i                               000441 automatic       fixed bin(17,0)          dcl 51 set ref 246* 265* 266 266* 269 274 286* 287
                                                                                  287* 289 328* 330* 333* 335* 336* 337 351* 423
                                                                                  559* 563 572 608* 657* 663 687* 688 688* 697* 713*
                                                                                  714* 730* 731 733 739 741 760* 762* 762 766* 771
                                                                                  811* 812 813 843* 847 864* 865 865 907* 908 927*
                                                                                  932* 941* 974 974
info                            000004 constant        bit(36)                  initial unaligned dcl 54 ref 534
j                               000442 automatic       fixed bin(17,0)          dcl 51 set ref 176* 176* 178 179 188* 188* 190 191
                                                                                  301* 322 352* 413 524* 529* 529 530* 530 531* 531
                                                                                  532* 532 533 533 534 617* 621* 625* 637 639 640
                                                                                  641 644 661* 663 718* 771* 772 772* 777 781 785
                                                                                  795 802 805 806 811 817 817 822 827* 827 834 844
                                                                                  910* 910* 913 916
k                               000443 automatic       fixed bin(17,0)          dcl 51 set ref 274* 274* 276 301* 307 309 315 316*
                                                                                  316 320 382* 383 384 385 386 387 391* 432* 435 448
                                                                                  458 460* 460* 462 466* 466 542* 544 555* 563 572
                                                                                  588* 616* 620* 624* 628 630 631 632 635 653* 663
                                                                                  770* 771 784* 785 846* 847 908* 910 916* 917 918
                                                                                  919
l0                              000444 automatic       fixed bin(17,0)          dcl 51 set ref 117* 118 119 1024* 1037* 1042* 1048*
                                                                                  1055
l1                              000445 automatic       fixed bin(17,0)          dcl 51 set ref 97* 106* 106 108 108 128* 142 185 186
                                                                                  186 420 431 472 549* 557 585* 585 589 634 655* 656
                                                                                  659* 704* 706* 734 736 755 868
l2                              000446 automatic       fixed bin(17,0)          dcl 51 set ref 151* 165 173 174 174 213* 214 220
                                                                                  221* 221 224 408 432 473 549* 553 584* 584 587 643
                                                                                  651* 652 659* 782* 783 795* 802 803* 803 805 814*
                                                                                  815 817 821* 821 822 822 841* 842 856* 859* 859*
                                                                                  862 891 892 892 893* 893 895
l3                              000447 automatic       fixed bin(17,0)          dcl 51 set ref 225 225* 225 272* 296* 412* 422* 549*
                                                                                  581 583* 583 593 594* 594 595 603* 605 659* 660
                                                                                  674 679* 679 683 691* 691 722* 725* 733* 733 734
                                                                                  736* 755 756* 756 837 865 865* 868 874 875 876
                                                                                  887* 894* 894 907 910 913 918 919 921 938 950 953
                                                                                  958 959
len1                            000451 automatic       fixed bin(17,0)          dcl 51 set ref 213 269* 271 271 289* 290 291 294*
                                                                                  300 300 301 375* 403 472 472 479 482 631* 634 634
                                                                                  875* 880* 885 919* 921 921 951* 953 953 959*
len2                            000452 automatic       fixed bin(17,0)          dcl 51 set ref 376* 405 416 473 473 479 482 640* 643
                                                                                  643 719* 723 725 731 733 739* 741 757* 757 812 813
                                                                                  841 895* 895 896* 896
lg3                             000450 automatic       fixed bin(17,0)          dcl 51 set ref 119* 122* 122 704 706 907 938 960 964
                                                                                  964 964 969
max                                                    builtin function         dcl 53 ref 372 907 1024 1036 1037
max_desc                        000010 internal static bit(36)                  initial dcl 46 set ref 344* 345* 345* 346* 346* 347*
max_fun                                constant        fixed bin(17,0)          initial dcl 62 ref 91 510
min                                                    builtin function         dcl 53 ref 265 286 375 376 880 1037 1042
min_fun                                constant        fixed bin(17,0)          initial dcl 62 ref 90 506
mod_fun                                constant        fixed bin(17,0)          initial dcl 62 ref 148 341
multiplication                  000012 internal static fixed bin(17,0)          initial dcl 62 set ref 346* 358 364 368
n                               000453 automatic       fixed bin(17,0)          dcl 51 set ref 284* 289 431* 433 446 448* 448* 450
                                                                                  460 467* 467 485* 485 485* 487 489 489
negabs                          000516 automatic       bit(1)                   initial dcl 60 set ref 60* 111* 193
negate                          000501 automatic       bit(1)                   dcl 57 set ref 87* 206* 228 241*
negation                               constant        fixed bin(17,0)          initial dcl 62 ref 92 99 148
no_round                        000502 automatic       bit(1)                   dcl 57 set ref 293* 303
null                                                   builtin function         dcl 53 ref 974 974
op1                             000120 automatic       char(64)                 dcl 44 set ref 181* 186* 188 271 274 300 433 460
                                                                                  471* 472* 485 489 538 539* 557 633* 634* 656 710
                                                                                  870* 885* 886 920* 921* 922 952* 953* 954
op2                             000140 automatic       char(64)                 dcl 44 set ref 171* 174* 176 435 448 471* 473* 485
                                                                                  489 539 540* 553 642* 643* 652 711 744 769 783
operation                       000515 automatic       fixed bin(17,0)          dcl 58 set ref 89* 90 90* 91 91* 92 92 99 148 148
                                                                                  199 201 236 251 282 326 341 354 358 364 368 369
                                                                                  395 401 409 494 1018 1019 1032
p                               000424 automatic       pointer                  dcl 49 set ref 343* 344 345 345 346 346 347
p1                              000454 automatic       fixed bin(17,0)          dcl 51 set ref 191* 265 269 286 289 330 356 375 420
                                                                                  420 420 431 472 474* 1020* 1024 1037 1042 1049
p2                              000455 automatic       fixed bin(17,0)          dcl 51 set ref 179* 359 362 376 408 408 408 432 473
                                                                                  475* 1021* 1024 1037 1042
pdesc1                                 parameter       bit(36)                  dcl 21 set ref 19 86 344* 347*
pdesc2                                 parameter       bit(36)                  dcl 21 set ref 19 114 284 344* 345* 346*
pdesc3                                 parameter       bit(36)                  dcl 21 set ref 19 84 347* 515 1056*
plio2_signal_$s_                000050 constant        entry                    external dcl 79 ref 974
pop1                                   parameter       char(1)                  unaligned dcl 21 set ref 19 98 108 142 184 186 344*
                                                                                  347* 420 472 634
pop2                                   parameter       char(1)                  unaligned dcl 21 set ref 19 165 172 174 344* 345*
                                                                                  346* 408 473 643
pop3                                   parameter       char(1)                  unaligned dcl 21 set ref 19 107* 108* 337 347* 964*
                                                                                  969* 971*
poperation                             parameter       fixed bin(17,0)          dcl 21 ref 19 89 506 510
product                         000160 automatic       char(64)                 array dcl 44 set ref 711* 716* 781* 795*            $  :4HT>lm %V            âëıÅ    ::    à*@          §	Z?    :<:    P*@          §	Z?    ::$    §*@          §	Z?    ::,  h  *@          §	Z?    :$:4  >l*¿          §	Z?    :,    ¯l*¿          §	Z?    HT:    l*@          §	Z?    :º9Ê  &§	Z9RK§D   :L:L>lm         :D ?#N  M781741_1.map                       §	Z9        Õ .±
…              $  :íH\>lm „            âëıÅ    :r:z    à*@          §	Z9    :ö:j    P*@          §	Z9    :j:Ç    §*@          §	Z9    :z:ä  h  *@          §	Z9    :Ç:í  >l*¿          §	Z9    :ä    ¯l*¿          §	Z9    H\:r    l*@          §	Z9    ;:   &§	aBRK§L   :™:™>lm         :¢ Ã    M781741_2.dll                       §	aB        bq©ä
€              $  :–H|>lm %V            âëıÅ    :ÿ:–  >l*¿          §	aB    :»    ¯l*¿          §	aB    :‡:»  h  *@          §	aB    ::ÿ    §*@          §	aB    :¯:    P*@          §	aB    :Ë:‡    à*@          §	aB    H|:Ë    l*@          §	aB    :¢:^  &§	a?RK§J   ::>lm         : :    R781741_2.dll                       §	a?        Õ!≤6	              $  :.Ht>lmë∞            âëıÅ    :6:.  >l*¿          §	a?    :&    ¯l*¿          §	a?    :>:&  h  *@          §	a?    :N:6    §*@          §	a?    :V:N    P*@          §	a?    :F:>    à*@          §	a?    Ht:F    l*@          §	a?    : :º  &§	aARK§H   :f:f>lm         :^@|  P781741_2.dll                       §	aA        bpÃ†
Â              $  :åHl>lm cl            âëıÅ    :î:å  >l*¿          §	aA    :Ñ    ¯l*¿          §	aA    :ú:Ñ  h  *@          §	aA    :¨:î    §*@          §	aA    :¥:¨    P*@          §	aA    :§:ú    à*@          §	aA    Hl:§    l*@          §	aA    :^:D  &§	aGRK§F   :ƒ:ƒ>lm         :º jf  D781741_2.dll                       §	aG        bpÃ†
‚              $  :ÍHd>lm ∞            âëıÅ    :Ú:Í  >l*¿          §	aG    :‚    ¯l*¿          §	aG    :˙:‚  h  *@          §	aG    ;
:Ú    §*@          §	aG    ;;
    P*@          §	aG    ;:˙    à*@          §	aG    Hd;    l*@          §	aG    ;x:¢  &§	a7RK§N   ;";">lm         ; º    M781741_2.map                       §	a7        Õ!≤6	Ú              $  ;@HÑ>lm ﬁr            âëıÅ    ;H    ¯l*¿          §	a7    ;P;@  >l*¿          §	a7    ;X;H  h  *@          §	a7    ;`;P    §*@          §	a7    ;h;X    à*@          §	a7    ;p;`    P*@          §	a7    HÑ;h    l*@          §	a7    ;÷;  &§	cvRK§P   ;Ä;Ä>lm         ;x Á,  D781741_3.dll                       §	cv        bpÃ†:              $  ;∆Hå>lm ∞            âëıÅ    ;¶;Æ    à*@          §	cv    ;Œ;û    P*@          §	cv    ;û;∂    §*@          §	cv    ;Æ;æ  h  *@          §	cv    ;∂;∆  >l*¿          §	cv    ;æ    ¯l*¿          §	cv    Hå;¶    l*@          §	cv    ;4;x  &§	cçRK§Q   ;ﬁ;ﬁ>lm         ;÷Ω9ê  P781741_3.dll                       §	cç        bpØ'
&              $  ;$Hî>lm cl            âëıÅ    ;;    à*@          §	cç    ;,;¸    P*@          §	cç    ;¸;    §*@          §	cç    ;;  h  *@          §	cç    ;;$  >l*¿          §	cç    ;    ¯l*¿          §	cç    Hî;    l*@          §	cç    ;í;÷  &§	cáRK§S   ;<;<>lm         ;4 ∑Ñ  R781741_3.dll                       §	cá        bpÃ†;              $  ;ÇHú>lmë∞            âëıÅ    ;b;j    à*@          §	cá    ;ä;Z    P*@          §	cá    ;Z;r    §*@          §	cá    ;j;z  h  *@          §	cá    ;r;Ç  >l*¿          §	cá    ;z    ¯l*¿          §	cá    Hú;b    l*@          §	cá    ;;4  &§	cíRK§U   ;ö;ö>lm         ;í I    M781741_3.dll                       §	cí        Õ!iR              $  ;‡H§>lm %V            âëıÅ    ;¿;»    à*@          §	cí    ;Ë;∏    P*@          §	cí    ;∏;–    §*@          §	cí    ;»;ÿ  h  *@          §	cí    ;–;‡  >l*¿          §	cí    ;ÿ    ¯l*¿          §	cí    H§;¿    l*@          §	cí    <N;í  &§	c~RK§W   ;¯;¯>lm         ; 9    M781741_3.map                           builtin function         dcl 53 set ref 97 98 104 104 106 107* 108* 108 115
                                                                                  117 124 128 130 135 142 151 153 158 165 172 174*
                                                                                  174 176 184 186* 186 188 214 219 220* 223 224* 225
                                                                                  271* 271 274 300* 300 307 309 314 315* 319 320*
                                                                                  322* 330 408* 408 420* 420 433 435 448 460 472*
                                                                                  472 473* 473 485 485 489 489 534 535 536 546 553
                                                                                  557 580 581* 592 593* 634* 634 643* 643 652 656
                                                                                  660 673 674* 682 683* 688 688 710* 710 716* 742
                                                                                  744 758 761 765 769 783 794 795* 801 802* 815 817
                                                                                  836 837* 842 844 855 856* 859 885* 891 892* 910
                                                                                  921* 921 953* 953 964* 964 968 969* 971* 1020 1021
                                                                                  1028 1030 1052* 1055*
subtraction                     000011 internal static fixed bin(17,0)          initial dcl 62 set ref 347* 409
sum                             000475 automatic       fixed bin(17,0)          dcl 51 set ref 183* 215* 216* 216 217 218* 218 219
                                                                                  223 305* 310* 311* 311 312 313* 313 314 319 563*
                                                                                  565 567* 567 572* 574 576* 576 580 663* 665 668*
                                                                                  668 673 680* 682 780* 785* 787 790* 790 794 799*
                                                                                  801 834* 836 838* 847* 849 851* 851 855
trunc_fun                              constant        fixed bin(17,0)          initial dcl 62 ref 251
unspec                                                 builtin function         dcl 53 set ref 143 166 215 219* 219 223* 223 310
                                                                                  314* 314 319* 319 555 559 580* 580 592* 592 653
                                                                                  657 661 673* 673 682* 682 688* 688 760 762 766 770
                                                                                  784 794* 794 801* 801 836* 836 843 846 855* 855
                                                                                  968* 968
zero_op1                               constant        fixed bin(17,0)          initial dcl 55 ref 533
zero_op2                               constant        fixed bin(17,0)          initial dcl 55 ref 533

NAME DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
length                                                 builtin function         dcl 53

NAMES DECLARED BY EXPLICIT CONTEXT.
again                           001176 constant        label                    dcl 383 ref 392
assign                          003477 constant        label                    dcl 964 ref 991
assign_op1                      001301 constant        label                    dcl 418 ref 196 365 506 513
assign_op2                      001237 constant        label                    dcl 406 ref 360 509 510
assign_zero                     003557 constant        label                    dcl 985 ref 934
assign_zero2                    003562 constant        label                    dcl 988 ref 290 358 359 364 405 533 700 882
begin                           000032 constant        label                    dcl 84
case                            000000 constant        label                    array(4) dcl 1036 ref 1032
ceil                            000421 constant        label                    dcl 203 ref 243 253
ceil_loop                       000440 constant        label                    dcl 214 ref 222
ceil_out                        000472 constant        label                    dcl 223 ref 217
compare                         001546 constant        label                    dcl 496 ref 439 444 453 456 464
compare_equal                   001411 constant        label                    dcl 452 ref 462
compare_long_fixed_loop         001342 constant        label                    dcl 433 ref 468
decimal_op_                     000024 constant        entry                    external dcl 19
divide_carry_loop               002716 constant        label                    dcl 787 ref 792
divide_est2                     002536 constant        label                    dcl 742 ref 750
divide_est3                     002574 constant        label                    dcl 758 ref 741
divide_estimate                 002510 constant        label                    dcl 727 ref 897
divide_fail                     003047 constant        label                    dcl 827 ref 813
divide_finish                   003203 constant        label                    dcl 870 ref 737 755 866
divide_magnitude                003006 constant        label                    dcl 815 ref 822
divide_op                       002377 constant        label                    dcl 694 ref 199
divide_product                  002653 constant        label                    dcl 777 ref 829
divide_subtract                 003052 constant        label                    dcl 834 ref 812
floor                           000525 constant        label                    dcl 238 ref 208 255
loop1                           001733 constant        label                    dcl 553 ref 587
loop2                           001745 constant        label                    dcl 557 ref 589
loop_carry                      002307 constant        label                    dcl 665 ref 670
multiply_op                     002054 constant        label                    dcl 599 ref 368
neg_ck                          000510 constant        label                    dcl 228 ref 247
normalize                       003307 constant        label                    dcl 904 ref 233 303 323 414 424 597 692 888
round_loop                      000640 constant        label                    dcl 309 ref 318
round_out                       000675 constant        label                    dcl 319 ref 312
scale_fixed                     003443 constant        label                    dcl 952 ref 960
set_scale                       003761 constant        label                    dcl 1051 ref 1038 1044
setdesc                         003644 constant        entry                    internal dcl 1017 ref 118
signal                          003524 constant        label                    dcl 974 ref 610 698 928 942
signal_fixedoverflow            002074 constant        label                    dcl 608 ref 595
signal_size                     003425 constant        label                    dcl 941 ref 397 398 881 961
skip_opnd_two                   000336 constant        label                    dcl 181 ref 148
test                            001502 constant        label                    dcl 479 ref 428
test_fractional                 003567 constant        entry                    internal dcl 258 ref 211 246

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      4100        4152    4040        4110
Length      4332    4040        52         144      37          36

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
decimal_op_                         391 external procedure  is an external procedure.  
test_fractional                         internal procedure  shares stack frame of external procedure decimal_op_.  
setdesc                                 internal procedure  shares stack frame of external procedure decimal_op_.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 max_desc                    decimal_op_
000011 subtraction                 decimal_op_
000012 multiplication              decimal_op_
000013 division                    decimal_op_
000014 floor_fun                   decimal_op_
000015 condition                   decimal_op_
000041 error_number                decimal_op_

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
decimal_op_              000100 ans                         decimal_op_
                         000120 op1                         decimal_op_
                         000140 op2                         decimal_op_
                         000160 product                     decimal_op_
                         000400 remainder                   decimal_op_
                         000420 desc1                       decimal_op_
                         000421 desc2                       decimal_op_
                         000422 desc3                       decimal_op_
                         000424 p                           decimal_op_
                         000426 sch                         decimal_op_
                         000427 ch                          decimal_op_
                         000430 ci                          decimal_op_
                         000431 sign                        decimal_op_
                         000432 sign1                       decimal_op_
                         000433 sign2                       decimal_op_
                         000434 big                         decimal_op_
                         000435 carry                       decimal_op_
                         000436 col1                        decimal_op_
                         000437 col2                        decimal_op_
                         000440 exp                         decimal_op_
                         000441 i                           decimal_op_
                         000442 j                           decimal_op_
                         000443 k                           decimal_op_
                         000444 l0                          decimal_op_
                         000445 l1                          decimal_op_
                         000446 l2                          decimal_op_
                         000447 l3                          decimal_op_
                         000450 lg3                         decimal_op_
                         000451 len1                        decimal_op_
                         000452 len2                        decimal_op_
                         000453 n                           decimal_op_
                         000454 p1                          decimal_op_
                         000455 p2                          decimal_op_
                         000456 s1                          decimal_op_
                         000457 s2                          decimal_op_
                         000460 scale1                      decimal_op_
                         000461 scale2                      decimal_op_
                         000462 scale3                      decimal_op_
                         000463 sc3                         decimal_op_
                         000464 st                          decimal_op_
                         000475 sum                         decimal_op_
                         000476 bit3                        decimal_op_
                         000477 add                         decimal_op_
                         000500 float                       decimal_op_
                         000501 negate                      decimal_op_
                         000502 no_round                    decimal_op_
                         000503 product_calculated          decimal_op_
                         000514 signal_ufl                  decimal_op_
                         000515 operation                   decimal_op_
                         000516 negabs                      decimal_op_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
decimal_op_                   plio2_signal_$s_

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     19 000016        60 000031        84 000032        86 000035        87 000037        89 000041        90 000043
     91 000047        92 000053        97 000057        98 000062        99 000067       102 000100       103 000103
    104 000105       106 000116       107 000122       108 000126       109 000132       111 000133       114 000135
    115 000137       117 000144       118 000147       119 000152       122 000155       124 000161       125 000165
    128 000171       130 000175       135 000200       136 000204       137 000210       142 000211       143 000217
    144 000222       145 000226       148 000230       151 000235       153 000241       158 000244       159 000250
    160 000254       165 000255       166 000263       167 000266       168 000272       171 000274       172 000277
    173 000305       174 000310       176 000316       177 000327       178 000331       179 000333       181 000336
    183 000344       184 000346       185 000354       186 000357       188 000365       189 000377       190 000401
    191 000403       193 000406       195 000410       196 000412       199 000413       201 000417       203 000421
    206 000424       207 000426       208 000430       211 000431       213 000435       214 000440       215 000445
    216 000452       217 000453       218 000456       219 000460       220 000464       221 000467       222 000471
    223 000472       224 000476       225 000501       228 000510       232 000520       233 000522       236 000523
    238 000525       241 000530       242 000532       243 000534       246 000535       247 000537       251 000540
    253 000542       255 000545       282 000546       284 000550       285 000553       286 000555       287 000562
    289 000565       290 000572       291 000573       293 000577       294 000601       296 000604       297 000606
    298 000610       299 000611       300 000614       301 000621       303 000626       304 000630       305 000632
    307 000633       309 000640       310 000645       311 000652       312 000654       313 000657       314 000661
    315 000665       316 000670       317 000672       318 000674       319 000675       320 000701       322 000704
    323 000710       326 000711       328 000713       330 000721       333 000730       335 000735       336 000740
    337 000742       338 000751       341 000752       343 000754       344 000756       345 001001       346 001025
    347 001051       348 001075       351 001076       352 001100       354 001102       356 001104       358 001106
    359 001111       360 001113       362 001114       364 001116       365 001121       368 001122       369 001125
    369 001132       372 001133       373 001140       374 001145       375 001152       376 001160       378 001166
    380 001170       382 001173       383 001176       384 001200       385 001201       386 001203       387 001205
    389 001207       391 001212       392 001215       394 001216       395 001217       397 001221       398 001224
    401 001227       403 001231       405 001234       406 001237       408 001242       409 001253       410 001265
    411 001267       412 001271       413 001273       414 001275       416 001276       418 001301       420 001304
    421 001315       422 001317       423 001321       424 001323       426 001324       428 001325       429 001330
    431 001332       432 001336       433 001342       435 001347       436 001354       438 001361       439 001363
    441h  *@          §`”    BA˛    §*@          §`”    BB    P*@          §`”    BB    à*@          §`”    I¥B    l*@          §`”    A»C“  &§`›RK§â   B.B.>lm         B&Ï    D832395_1.dll                       §`›        bpÃ†S              $  BLI¨>lm F            âëıÅ    BT    ¯l*¿          §`›    B\BL  >l*¿          §`›    BdBT  h  *@          §`›    BlB\    §*@          §`›    BtBd    à*@          §`›    B|Bl    P*@          §`›    I¨Bt    l*@          §`›    B‚@ÿ  &§`‘RK§w   BåBå>lm         BÑÊ    D832395_3.dll                       §`‘        bY+“              $  B“I\>lm w˙            âëıÅ    B≤B∫    à*@          §`‘    B⁄B™    P*@          §`‘    B™B¬    §*@          §`‘    B∫B   h  *@          §`‘    B¬B“  >l*¿          §`‘    B     ¯l*¿          §`‘    I\B≤    l*@          §`‘    B@BÑ  &§`÷RK§y   BÍBÍ>lm         B‚ ø    P832395_3.dll                       §`÷        Õ .±
†              $  B0Id>lm |            âëıÅ    BB    à*@          §`÷    B8B    P*@          §`÷    BB     §*@          §`÷    BB(  h  *@          §`÷    B B0  >l*¿          §`÷    B(    ¯l*¿          §`÷    IdB    l*@          §`÷    BûB‚  &§`ŒRK§{   BHBH>lm         B@∂–  R832395_3.dll                       §`Œ        bpÃ†
Ê              $  BéIl>lm ÜŒ            âëıÅ    BnBv    à*@          §`Œ    BñBf    P*@          §`Œ    BfB~    §*@          §`Œ    BvBÜ  h  *@          §`Œ    B~Bé  >l*¿          §`Œ    BÜ    ¯l*¿          §`Œ    IlBn    l*@          §`Œ    B¸B@  &§`ûRK§|   B¶B¶>lm         BûH‰  M832395_3.dll                       §`û        Õ k#              $  BÏIt>lm %V            âëıÅ    BÃB‘    à*@          §`û    BÙBƒ    P*@          §`û    BƒB‹    §*@          §`û    B‘B‰  h  *@          §`û    B‹BÏ  >l*¿          §`û    B‰    ¯l*¿          §`û    ItBÃ    l*@          §`û    CZBû  &§`ÿRK§~   CC>lm         B¸8    M832395_3.map                       §`ÿ        bpÃ†
È              $  CJI|>lm √W            âëıÅ    C*C2    à*@          §`ÿ    CRC"    P*@          §`ÿ    C"C:    §*@          §`ÿ    C2CB  h  *@          §`ÿ    C:CJ  >l*¿          §`ÿ    CB    ¯l*¿          §`ÿ    I|C*    l*@          §`ÿ    C∏B¸  &§` RPo≥   CbCb>lm         CZc    D832395_4.dll                       §`         bpÃ†>              $  C®IÑ>lm ê~            âëıÅ    CàCê    à*@          §`     C∞CÄ    P*@          §`     CÄCò    §*@          §`     CêC†  h  *@          §`     CòC®  >l*¿          §`     C†    ¯l*¿          §`     IÑCà    l*@          §`     CCZ  &§`ÀRK§Ç   C¿C¿>lm         C∏ <Œ  P832395_4.dll                       §`À        Õ k#"              $  CIå>lm 1:            âëıÅ    CÊCÓ    à*@          §`À    CCﬁ    P*@          §`À    CﬁCˆ    §*@          §`À    CÓC˛  h  *@          §`À    CˆC  >l*¿          §`À    C˛    ¯l*¿          §`À    IåCÊ    l*@          §`À    CtC∏  &§`ŒRK§É   CC>lm         C3    R832395_4.dll                       §`Œ        bq©ä
ú              $  CdIî>lm Ì|            âëıÅ    CDCL    à*@          §`Œ    ClC<    P*@          §`Œ    C<CT    §*@          §`Œ    CLC\  h  *@          §`Œ    CTCd  >l*¿          §`Œ    C\    ¯l*¿          §`Œ    IîCD    l*@          §`Œ    C“C  &§`ÊRK§Ö   C|C|>lm         Ct ≈*  M832395_4.dll                       §`Ê        bq©ä
û              $  C¬Iú>lm %V            âëıÅ    C¢C™    à*@          §`Ê    C Cö    P*@          §`Ê    CöC≤    §*@          §`Ê    C™C∫  h  *@          §`Ê    C≤C¬  >l*¿          §`Ê    C∫    ¯l*¿          §`Ê    IúC¢    l*@          §`Ê    B&Ct  &§`àRK§á   C⁄C⁄>lm         C“ µ?  M832395_4.map                       §`à        bpØ'9              $  D I§>lm »ª            âëıÅ    D D    à*@          §`à    003034       825 003043       827 003047       829 003051       834 003052       836 003054       837 003060
    838 003064       839 003066       841 003070       842 003075       843 003101       844 003106       845 003120
    846 003122       847 003127       848 003133       849 003134       851 003135       852 003137       855 003141
    856 003145       857 003151       859 003154       860 003165       862 003167       864 003171       865 003174
    866 003177       868 003200       870 003203       872 003206       874 003210       875 003213       876 003215
    877 003221       879 003222       880 003226       881 003234       882 003237       883 003241       885 003243
    886 003250       887 003253       888 003256       891 003257       892 003270       893 003300       894 003302
    895 003303       896 003305       897 003306       904 003307       907 003311       908 003320       910 003323
    911 003337       912 003342       913 003344       916 003352       917 003355       918 003356       919 003360
    920 003364       921 003367       922 003374       925 003377       927 003402       928 003404       930 003405
    932 003407       933 003411       934 003413       936 003414       937 003420       938 003421       941 003425
    942 003427       948 003430       950 003433       951 003440       952 003443       953 003446       954 003454
    955 003457       956 003460       958 003461       959 003466       960 003472       961 003476       964 003477
    966 003507       968 003511       969 003514       971 003517       972 003522       974 003524       983 003556
    985 003557       988 003562       990 003564       991 003566       258 003567       265 003571       266 003576
    269 003601       270 003604       271 003607       272 003613       273 003615       274 003617       275 003631
    276 003633       278 003640      1017 003644      1018 003645      1019 003650      1020 003654      1021 003657
   1022 003662      1024 003664      1025 003670      1028 003671      1029 003675      1030 003701      1031 003705
   1032 003711      1036 003713      1037 003720      1038 003736      1042 003737      1043 003746      1044 003751
   1048 003752      1049 003754      1051 003761      1052 003765      1055 003773      1056 004000      1057 004003


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
