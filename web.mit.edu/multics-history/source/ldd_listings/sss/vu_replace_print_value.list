	COMPILATION LISTING OF SEGMENT vu_replace_print_value
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 02/16/84  1305.7 mst Thu
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 /* format: style2,ind3 */
        7 vu_replace_print_value:
        8 replace_print_value:
        9    proc (p_print_vector_array_ptr, p_print_vector_index, p_area_ptr, p_dimension_name, p_dimension_value, p_code);
       10 
       11 /* DESCRIPTION:
       12*
       13*         This  subroutine  replaces  the  value of a specified dimension in a
       14*     print vector.
       15**/
       16 
       17 /* HISTORY:
       18*
       19*Written by S. Krupp, 06/07/83.
       20*Modified:
       21**/
       22 
       23 /* START OF DECLARATIONS */
       24 
       25 /* Automatic */
       26 
       27       dcl	    i		       fixed bin;
       28       dcl	    old_pv_ptr	       ptr;
       29       dcl	    value_length	       fixed bin;
       30 
       31 /* Based */
       32 
       33       dcl	    based_area	       area based (p_area_ptr);
       34 
       35       dcl	    1 old_pv	       based (old_pv_ptr),	/* like print_vector */
       36 	      2 number_of_dimensions
       37 			       fixed bin (17),
       38 	      2 maximum_value_length
       39 			       fixed bin (35),
       40 	      2 dimension	       (0 refer (old_pv.number_of_dimensions)),
       41 	        3 identifier       fixed bin (17),
       42 	        3 value	       char (0 refer (old_pv.maximum_value_length)) varying;
       43 
       44 /* Builtin */
       45 
       46       dcl	    (hbound, lbound, length, null)
       47 			       builtin;
       48 
       49 /* Constant */
       50 
       51       dcl	    myname	       init ("vu_replace_print_value") char (32) varying internal static options (constant);
       52 
       53 /* Entry */
       54 
       55       dcl	    sub_err_	       entry () options (variable);
       56 
       57 /* External */
       58 
       59       dcl	    error_table_$unimplemented_version
       60 			       fixed bin (35) ext;
       61       dcl	    (
       62 	    vd_error_$bad_print_vector_index,
       63 	    vd_error_$dim_not_in_vector
       64 	    )		       fixed bin (35) ext;
       65 
       66 /* Parameter */
       67 
       68       dcl	    p_print_vector_array_ptr
       69 			       ptr;		/*is a pointer to a
       70*                                             print_vector_array.*/
       71       dcl	    p_print_vector_index   fixed bin;		/*is the index of the
       72*                                             print_vector in the
       73*                                             print_vector_array that holds the
       74*                                             dimension whose value is to be
       75*                                             replaced.*/
       76       dcl	    p_area_ptr	       ptr;		/*is a pointer to an area where
       77*                                             the print_vector may be
       78*                                             reallocated if necessary.*/
       79       dcl	    p_dimension_name       char (*);		/*is the name of the dimension
       80*                                             whose value is to be replaced.*/
       81       dcl	    p_dimension_value      char (*);		/*is the new value of the
       82*                                             specified dimension.*/
       83       dcl	    p_code	       fixed bin (35);	/*is a standard system status
       84*                                             code.*/
       85 
       86 /* END OF DECLARATIONS */
       87 
       88 
       89       p_code = 0;
       90 
       91       print_vector_array_ptr = p_print_vector_array_ptr;
       92 
       93       call CHECK_VERSION ((print_vector_array.version), (PRINT_VECTOR_ARRAY_VERSION_2), "print_vector_array");
       94 
       95       if p_print_vector_index < lbound (print_vector_array.vector_slot, 1)
       96          | p_print_vector_index > hbound (print_vector_array.vector_slot, 1)
       97       then
       98          do;
       99 	  p_code = vd_error_$bad_print_vector_index;
      100 	  return;
      101          end;
      102 
      103       print_vector_ptr = print_vector_array.vector_slot (p_print_vector_index);
      104 
      105       do i = 1 to print_vector.number_of_dimensions
      106          while (print_vector_array.dimension_table (print_vector.dimension (i).identifier).name ^= p_dimension_name);
      107       end;
      108 
      109       if i > print_vector.number_of_dimensions
      110       then
      111          do;
      112 	  p_code = vd_error_$dim_not_in_vector;
      113 	  return;
      114          end;
      115 
      116       value_length = length (p_dimension_value);
      117 
      118       if value_length > print_vector.maximum_value_length
      119       then
      120          do;
      121 	  pv_maximum_value_length = value_length;
      122 	  pv_number_of_dimensions = print_vector.number_of_dimensions;
      123 	  old_pv_ptr = print_vector_ptr;
      124 	  allocate print_vector in (based_area) set (print_vector_ptr);
      125 	  print_vector.dimension = old_pv.dimension;
      126 	  print_vector_array.vector_slot (p_print_vector_index) = print_vector_ptr;
      127 	  free old_pv_ptr -> print_vector;
      128          end;
      129 
      130       print_vector.dimension (i).value = p_dimension_value;
      131 
      132       return;
      133 
      134 
      135 CHECK_VERSION:
      136    proc (p_received_version, p_expected_version, p_structure_name);
      137       dcl	    p_received_version     fixed bin (35);
      138       dcl	    p_expected_version     fixed bin (35);
      139       dcl	    p_structure_name       char (*);
      140       if p_received_version ^= p_expected_version
      141       then call
      142 	    sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
      143 	    "^/Expected version ^d of the ^a structure.
      144 Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);
      145    end CHECK_VERSION;
      146 
  1     1 /* BEGIN INCLUDE FILE sub_err_flags.incl.pl1 BIM 11/81 */
  1     2 /* format: style3 */
  1     3 
  1     4 /* These constants are to be used for the flags argument of sub_err_ */
  1     5 /* They are just "string (condition_info_header.action_flags)" */
  1     6 
  1     7 declare	(
  1     8 	ACTION_CAN_RESTART	init (""b),
  1     9 	ACTION_CANT_RESTART init ("1"b),
  1    10 	ACTION_DEFAULT_RESTART
  1    11 			init ("01"b),
  1    12 	ACTION_QUIET_RESTART
  1    13 			init ("001"b),
  1    14 	ACTION_SUPPORT_SIGNAL
  1    15 			init ("0001"b)
  1    16 	)		bit (36) aligned internal static options (constant);
  1    17 
  1    18 /* End include file */
      147 
      148 
  2     1 /* ***********************************************************
  2     2*   *                                                         *
  2     3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
  2     4*   *                                                         *
  2     5*   *********************************************************** */
  2     6 /* BEGIN INCLUDE FILE  -  vu_print_vector_array.incl.pl1 */
  2     7 /* Written by Matthew C. Pierret, 01/21/82
  2     8*Modified:
  2     9**/
  2    10 
  2    11 /* format: style2,ind3 */
  2    12      dcl	   1 print_vector_array   based (print_vector_array_ptr),
  2    13 	     2 version	      fixed bin (35),
  2    14 	     2 number_of_dimensions
  2    15 			      fixed bin (17),
  2    16 	     2 maximum_dimension_name_length
  2    17 			      fixed bin (17),
  2    18 	     2 number_of_vectors  fixed bin (17),
  2    19 	     2 number_of_vector_slots
  2    20 			      fixed bin (17),
  2    21 	     2 dimension_table    (pva_number_of_dimensions refer (print_vector_array.number_of_dimensions)),
  2    22 	       3 name	      char (pva_maximum_dimension_name_length
  2    23 			      refer (print_vector_array.maximum_dimension_name_length)) varying,
  2    24 	       3 descriptor_ptr   ptr,
  2    25 	       3 cv_to_print      entry (ptr, fixed bin (17), fixed bin (17), ptr, ptr, fixed bin (35)),
  2    26 	       3 cv_to_typed      entry (ptr, fixed bin (17), fixed bin (17), ptr, ptr, fixed bin (35)),
  2    27 	       3 maximum_value_length
  2    28 			      fixed bin (17),
  2    29 	     2 vector_slot	      (pva_number_of_vector_slots refer (print_vector_array.number_of_vector_slots)) ptr;
  2    30 
  2    31      dcl	   1 print_vector	      based (print_vector_ptr),
  2    32 	     2 number_of_dimensions
  2    33 			      fixed bin (17),
  2    34 	     2 maximum_value_length
  2    35 			      fixed bin (35),
  2    36 	     2 dimension	      (pv_number_of_dimensions refer (print_vector.number_of_dimensions)),
  2    37 	       3 identifier	      fixed bin (17),
  2    38 	       3 value	      char (pv_maximum_value_length refer (print_vector.maximum_value_length)) varying;
  2    39 
  2    40      dcl	   pva_number_of_dimensions
  2    41 			      fixed bin;
  2    42      dcl	   pva_number_of_vector_slots
  2    43 			      fixed bin;
  2    44      dcl	   pva_maximum_dimension_name_length
  2    45 			      fixed bin;
  2    46      dcl	   pv_number_of_dimensions
  2    47 			      fixed bin;
  2    48      dcl	   pv_maximum_value_length
  2    49 			      fixed bin;
  2    50 
  2    51      dcl	   print_vector_array_ptr ptr;
  2    52      dcl	   print_vector_ptr	      ptr;
  2    53      dcl	   PRINT_VECTOR_ARRAY_VERSION_2
  2    54 			      fixed bin (35) init (2) internal static options (constant);
  2    55 
  2    56 /* END INCLUDE FILE  -  vu_print_vector_array.incl.pl1 */
      149 
      150 
      151    end vu_replace_print_value;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    02/16/84  1249.9  vu_replace_print_value.pl1        >spec>on>mtape>vu_replace_print_value.pl1
147          1    04/16/82  0958.1  sub_err_flags.incl.pl1            >ldd>include>sub_err_flags.incl.pl1
149          2    02/16/84  1230.3  vu_print_vector_array.incl.pl1    >spec>on>mtape>vu_print_vector_array.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ACTION_CANT_RESTART             000000 constant        bit(36)                  initial dcl 1-7 set ref 140*
PRINT_VECTOR_ARRAY_VERSION_2           constant        fixed bin(35,0)          initial dcl 2-53 ref 93
based_area                             based           area(1024)               dcl 33 ref 124
dimension                 2            based           structure                array level 2 in structure "print_vector" unaligned
                                                                                  dcl 2-31 in procedure "replace_print_value" set
                                                                                  ref 125*
dimension                 2            based           structure                array level 2 in structure "old_pv" unaligned dcl 35
                                                                                  in procedure "replace_print_value" ref 125
dimension_table           6            based           structure                array level 2 unaligned dcl 2-12
error_table_$unimplemented_version
                                000012 external static fixed bin(35,0)          dcl 59 set ref 140*
hbound                                                 builtin function         dcl 46 ref 95
i                               000100 automatic       fixed bin(17,0)          dcl 27 set ref 105* 105* 109 130
identifier                2            based           fixed bin(17,0)          array level 3 dcl 2-31 set ref 105
lbound                                                 builtin function         dcl 46 ref 95
length                                                 builtin function         dcl 46 ref 116
maximum_dimension_name_length
                          2            based           fixed bin(17,0)          level 2 dcl 2-12 ref 95 95 103 105 105 126
maximum_value_length      1            based           fixed bin(35,0)          level 2 in structure "print_vector" dcl 2-31
                                                                                  in procedure "replace_print_value" set ref 105 105
                                                                                  118 124* 125 125 125 125 125 127 130 130 130
maximum_value_length      1            based           fixed bin(35,0)          level 2 in structure "old_pv" dcl 35 in procedure
                                                                                  "replace_print_value" ref 125 125 125 125
myname                          000001 constant        varying char(32)         initial dcl 51 set ref 140*
name                      6            based           varying char             array level 3 dcl 2-12 ref 105
null                                                   builtin function         dcl 46 ref 140 140
number_of_dimensions      1            based           fixed bin(17,0)          level 2 in structure "print_vector_array" dcl 2-12
                                                                                  in procedure "replace_print_value" ref 95 95 103
                                                                                  126
number_of_dimensions                   based           fixed bin(17,0)          level 2 in structure "print_vector" dcl 2-31
                                                                                  in procedure "replace_print_value" set ref 105 109
                                                                                  122 124* 125 127
number_of_dimensions                   based           fixed bin(17,0)          level 2 in structure "old_pv" dcl 35 in procedure
                                                                                  "replace_print_value" ref 125
number_of_vector_slots
                          4            based           fixed bin(17,0)          level 2 dcl 2-12 ref 95
old_pv                                 based           structure                level 1 unaligned dcl 35
old_pv_ptr                      000102 automatic       pointer                  dcl 28 set ref 123* 125 127
p_area_ptr                             parameter       pointer                  dcl 76 ref 7 7 124
p_code                                 parameter       fixed bin(35,0)          dcl 83 set ref 7 7 89* 99* 112*
p_dimension_name                       parameter       char                     unaligned dcl 79 ref 7 7 105
p_dimension_value                      parameter       char                     unaligned dcl 81 ref 7 7 116 130
p_expected_version                     parameter       fixed bin(35,0)          dcl 138 set ref 135 140 140*
p_print_vector_array_ptr               parameter       pointer                  dcl 68 ref 7 7 91
p_print_vector_index                   parameter       fixed bin(17,0)          dcl 71 ref 7 7 95 95 103 126
p_received_version                     parameter       fixed bin(35,0)          dcl 137 set ref 135 140 140*
p_structure_name                       parameter       char                     unaligned dcl 139 set ref 135 140*
print_vector                           based           structure                level 1 unaligned dcl 2-31 set ref 124 127
print_vector_array                     based           structure                level 1 unaligned dcl 2-12
print_vector_array_ptr          000110 automatic       pointer                  dcl 2-51 set ref 91* 93 95 95 103 105 126
print_vector_ptr                000112 automatic       pointer                  dcl 2-52 set ref 103* 105 105 109 118 122 123 124*
                                                                                  125 126 130
pv_maximum_value_length         000106 automatic       fixed bin(17,0)          dcl 2-48 set ref 121* 124 124
pv_number_of_dimensions         000105 automatic       fixed bin(17,0)          dcl 2-46 set ref 122* 124 124
sub_err_                        000010 constant        entry                    external dcl 55 ref 140
value                     3            based           varying char             array level 3 dcl 2-31 set ref 130*
value_length                    000104 automatic       fixed bin(17,0)          dcl 29 set ref 116* 118 121
vd_error_$bad_print_vector_index
                                000014 external static fixed bin(35,0)          dcl 61 ref 99
vd_error_$dim_not_in_vector     000016 external static fixed bin(35,0)          dcl 61 ref 112
vector_slot                            based           pointer                  array level 2 dcl 2-12 set ref 95 95 103 126*
version                                based           fixed bin(35,0)          level 2 dcl 2-12 ref 93

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ACTION_CAN_RESTART                     internal static bit(36)                  initial dcl 1-7
ACTION_DEFAULT_RESTART                 internal static bit(36)                  initial dcl 1-7
ACTION_QUIET_RESTART                   internal static bit(36)                  initial dcl 1-7
ACTION_SUPPORT_SIGNAL                  internal static bit(36)                  initial dcl 1-7
pva_maximum_dimension_name_length      automatic       fixed bin(17,0)          dcl 2-44
pva_number_of_dimensions               automatic       fixed bin(17,0)          dcl 2-40
pva_number_of_vector_slots             automatic       fixed bin(17,0)          dcl 2-42

NAMES DECLARED BY EXPLICIT CONTEXT.
CHECK_VERSION                   000464 constant        entry                    internal dcl 135 ref 93
replace_print_value             000063 constant        entry                    external dcl 7
vu_replace_print_value          000106 constant        entry                    external dcl 7

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       704         724     576         714
Length      1140     576        20         177     106           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
replace_print_value                 154 external procedure  is an external procedure.  
CHECK_VERSION                           internal procedure  shares stack frame of external procedure replace_print_value.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
replace_print_value      000100 i                           replace_print_value
                         000102 old_pv_ptr                  replace_print_value
                         000104 value_length                replace_print_value
                         000105 pv_number_of_dimensions     replace_print_value
                         000106 pv_maximum_value_length     replace_print_value
                         000110 print_vector_array_ptr      replace_print_value
                         000112 print_vector_ptr            replace_print_value

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   return              bound_check_signal  ext_entry_desc      alloc_based         free_based

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
sub_err_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$unimplemented_version                          vd_error_$bad_print_vector_index
vd_error_$dim_not_in_vector




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
      7 000055        89 000126        91 000130        93 000133        95 000150        99 000160       100 000163
    103 000164       105 000211       107 000261       109 000263       112 000266       113 000272       116 000273
    118 000275       121 000300       122 000301       123 000303       124 000304       125 000324       126 000400
    127 000426       130 000436       132 000463       135 000464       140 000475       145 000557


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
