	COMPILATION LISTING OF SEGMENT !BBBJZFbbKcMJWl
	Compiled by: Multics PL/I Compiler, Release 31a, of October 12, 1988
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 03/15/89  0818.6 mst Wed
	    Options: table map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 /* asum_data_ -- static information for the as_user_message facility */
        7 /* format: style2,indcomtxt */
        8 
        9 asum_data_:
       10      procedure;
       11 
       12 /* Created 1985-01, BIM */
       13 
       14 
       15 /* Automatic */
       16 
       17 	dcl     1 cdsa		 aligned like cds_args;
       18 	dcl     code		 fixed bin (35);
       19 
       20 /* Constants */
       21 
       22 	dcl     NAME		 char (32) int static init ("asum_data_") options (constant);
       23 	dcl     EXCLUDE_PAD		 (1) char (32) aligned static options (constant) init ("pad*");
       24 
       25 
       26 /* Entries */
       27 
       28 	dcl     com_err_		 entry options (variable);
       29 	dcl     create_data_segment_	 entry (ptr, fixed bin (35));
       30 
       31 	declare sys_info$access_class_ceiling
       32 				 bit (72) aligned ext;
       33 
       34 /* The structure */
       35 
       36 	dcl     static_ptr		 pointer;
       37 	dcl     1 asum_data_static	 aligned based (static_ptr),
       38 		2 db_dir		 char (168) unaligned,
       39 						/* Where ? */
       40 		2 db_dir_rb	 (2) fixed bin (3),
       41 		2 db_rb		 (3) fixed bin (3), /* What RB's? */
       42 		2 db_multiclass	 bit (1) aligned,	/* Multiclass */
       43 		2 db_cbi		 aligned like create_branch_info,
       44 						/* The whole story */
       45 		2 db_dir_cbi	 aligned like create_branch_info,
       46 		2 system_info_ptr	 pointer init (null ()),
       47 		2 process_info_ptr	 pointer init (null ()),
       48 		2 entry_ring	 fixed bin (3),	/* perprocess, for auditing purposes */
       49 		2 lock_id		 bit (36) aligned,
       50 		2 process_id	 bit (36) aligned,	/* cheapify locking */
       51 		2 db_locked	 bit (1) aligned,	/* for cleanup handlers */
       52 		2 n_acl_entries	 fixed bin,
       53 		2 acl_entries	 (static_n_acl_entries refer (asum_data_static.n_acl_entries)) aligned
       54 				 like general_extended_acl_entry;
       55 
       56 
       57 	declare static_n_acl_entries	 fixed bin;
       58 
       59 
  1     1 /* Begin include file -- acl_structures.incl.pl1 BIM 3/82 */
  1     2 /* format: style3,indcomtxt,idind30 */
  1     3 
  1     4 declare   acl_ptr                       pointer;
  1     5 declare   acl_count                     fixed bin;
  1     6 
  1     7 declare 1 general_acl                   aligned based (acl_ptr), /* for fs_util_ */
  1     8           2 version                     char (8) aligned,
  1     9           2 count                       fixed bin,
  1    10           2 entries                     (acl_count refer (general_acl.count)) aligned like general_acl_entry;
  1    11 
  1    12 declare 1 general_acl_entry             based,
  1    13           2 access_name                 character (32) unaligned,
  1    14           2 mode                        bit (36) aligned,
  1    15           2 status_code                 fixed bin (35);
  1    16 
  1    17 
  1    18 declare 1 general_extended_acl          aligned based (acl_ptr), /* for fs_util_ */
  1    19           2 version                     char (8) aligned,
  1    20           2 count                       fixed bin,
  1    21           2 entries                     (acl_count refer (general_extended_acl.count)) aligned like general_extended_acl_entry;
  1    22 
  1    23 declare 1 general_extended_acl_entry    aligned based,
  1    24           2 access_name                 character (32) unaligned,
  1    25           2 mode                        bit (36) aligned,
  1    26           2 extended_mode               bit (36) aligned,
  1    27           2 status_code                 fixed bin (35);
  1    28 
  1    29 
  1    30 declare 1 general_delete_acl            aligned based (acl_ptr), /* for file_system_ */
  1    31           2 version                     char (8) aligned,
  1    32           2 count                       fixed bin,
  1    33           2 entries                     (acl_count refer (general_delete_acl.count)) aligned like delete_acl_entry;
  1    34 
  1    35 declare 1 general_delete_acl_entry      aligned based,
  1    36           2 access_name                 character (32) unaligned,
  1    37           2 status_code                 fixed bin (35);
  1    38 
  1    39 
  1    40 declare 1 segment_acl                   aligned based (acl_ptr),
  1    41           2 version                     fixed bin,
  1    42           2 count                       fixed bin,
  1    43           2 entries                     (acl_count refer (segment_acl.count)) aligned like segment_acl_entry;
  1    44 
  1    45 declare 1 segment_acl_entry             like general_extended_acl_entry aligned based;
  1    46 declare 1 segment_acl_array             (acl_count) aligned like segment_acl_entry based (acl_ptr);
  1    47 
  1    48 
  1    49 declare 1 directory_acl                 aligned based (acl_ptr),
  1    50           2 version                     fixed bin,
  1    51           2 count                       fixed bin,
  1    52           2 entries                     (acl_count refer (directory_acl.count)) aligned like directory_acl_entry;
  1    53 
  1    54 declare 1 directory_acl_entry           like general_acl_entry aligned based;
  1    55 declare 1 directory_acl_array           (acl_count) aligned like directory_acl_entry based (acl_ptr);
  1    56 
  1    57 
  1    58 declare 1 delete_acl                    based (acl_ptr) aligned,
  1    59           2 version                     fixed bin,
  1    60           2 count                       fixed bin,
  1    61           2 entries                     (acl_count refer (delete_acl.count)) aligned like delete_acl_entry;
  1    62 
  1    63 declare 1 delete_acl_entry              like general_delete_acl_entry aligned based;
  1    64 declare 1 delete_acl_array              (acl_count) aligned like delete_acl_entry based (acl_ptr);
  1    65 
  1    66 
  1    67 declare  (SEG_ACL_VERSION_1             init ("sga1"),
  1    68           DIR_ACL_VERSION_1             init ("dra1"),
  1    69           DELETE_ACL_VERSION_1          init ("dla1"))
  1    70                                         char (4) int static options (constant);
  1    71 
  1    72 declare  (GENERAL_ACL_VERSION_1         init ("gacl001"),
  1    73           GENERAL_EXTENDED_ACL_VERSION_1 init ("gxacl001"),
  1    74           GENERAL_DELETE_ACL_VERSION_1  init ("gdacl001"))
  1    75                                         char (8) internal static options (constant);
  1    76 
  1    77 declare   ACL_VERSION_1                 fixed bin init (1) int static options (constant);
  1    78 
  1    79 /* End include file acl_structures.incl.pl1 */
       60 
  2     1 /* BEGIN INCLUDE FILE ... access_mode_values.incl.pl1
  2     2*
  2     3*   Values for the "access mode" argument so often used in hardcore
  2     4*   James R. Davis 26 Jan 81  MCR 4844
  2     5*   Added constants for SM access 4/28/82 Jay Pattin
  2     6*   Added text strings 03/19/85 Chris Jones
  2     7**/
  2     8 
  2     9 
  2    10 /* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
  2    11 dcl	(
  2    12 	N_ACCESS		   init ("000"b),
  2    13 	R_ACCESS		   init ("100"b),
  2    14 	E_ACCESS		   init ("010"b),
  2    15 	W_ACCESS		   init ("001"b),
  2    16 	RE_ACCESS		   init ("110"b),
  2    17 	REW_ACCESS	   init ("111"b),
  2    18 	RW_ACCESS		   init ("101"b),
  2    19 	S_ACCESS		   init ("100"b),
  2    20 	M_ACCESS		   init ("010"b),
  2    21 	A_ACCESS		   init ("001"b),
  2    22 	SA_ACCESS		   init ("101"b),
  2    23 	SM_ACCESS		   init ("110"b),
  2    24 	SMA_ACCESS	   init ("111"b)
  2    25 	)		   bit (3) internal static options (constant);
  2    26 
  2    27 /* The following arrays are meant to be accessed by doing either 1) bin (bit_value) or
  2    28*   2) divide (bin_value, 2) to come up with an index into the array. */
  2    29 
  2    30 dcl	SEG_ACCESS_MODE_NAMES  (0:7) init ("null", "W", "E", "EW", "R", "RW", "RE", "REW") char (4) internal
  2    31 			   static options (constant);
  2    32 
  2    33 dcl	DIR_ACCESS_MODE_NAMES  (0:7) init ("null", "A", "M", "MA", "S", "SA", "SM", "SMA") char (4) internal
  2    34 			   static options (constant);
  2    35 
  2    36 dcl	(
  2    37 	N_ACCESS_BIN	   init (00000b),
  2    38 	R_ACCESS_BIN	   init (01000b),
  2    39 	E_ACCESS_BIN	   init (00100b),
  2    40 	W_ACCESS_BIN	   init (00010b),
  2    41 	RW_ACCESS_BIN	   init (01010b),
  2    42 	RE_ACCESS_BIN	   init (01100b),
  2    43 	REW_ACCESS_BIN	   init (01110b),
  2    44 	S_ACCESS_BIN	   init (01000b),
  2    45 	M_ACCESS_BIN	   init (00010b),
  2    46 	A_ACCESS_BIN	   init (00001b),
  2    47 	SA_ACCESS_BIN	   init (01001b),
  2    48 	SM_ACCESS_BIN	   init (01010b),
  2    49 	SMA_ACCESS_BIN	   init (01011b)
  2    50 	)		   fixed bin (5) internal static options (constant);
  2    51 
  2    52 /* END INCLUDE FILE ... access_mode_values.incl.pl1 */
       61 
  3     1 /*  BEGIN INCLUDE FILE - - - create_branch_info.incl.pl1 - - - created January 1975 */
  3     2 
  3     3 
  3     4 /****^  HISTORY COMMENTS:
  3     5*  1) change(89-01-16,TLNguyen), approve(89-01-16,MCR8049),
  3     6*     audit(89-02-03,Parisek), install(89-03-15,MR12.3-1025):
  3     7*       1. Declare version constant properly.
  3     8*       2. Remove version 1 since it was never referenced and to force
  3     9*          callers to upgrade their programs.
  3    10*                                                   END HISTORY COMMENTS */
  3    11 
  3    12 
  3    13 /* Modified December 1984 for dir_quota, Keith Loepere. */
  3    14 
  3    15 /* this include files gives the argument structure for create_branch_ */
  3    16 
  3    17 dcl 1 create_branch_info aligned based,
  3    18     2 version fixed bin,				/* set this to the largest value given below */
  3    19     2 switches unaligned,
  3    20       3 dir_sw bit (1) unaligned,			/* if on, a directory branch is wanted */
  3    21       3 copy_sw bit (1) unaligned,			/* if on, initiating segment will be done by copying */
  3    22       3 chase_sw bit (1) unaligned,			/* if on, if pathname is a link, it will be chased */
  3    23       3 priv_upgrade_sw bit (1) unaligned,		/* privileged creation (ring 1) of upgraded object */
  3    24       3 parent_ac_sw bit (1) unaligned,			/* if on, use parent's access class for seg or dir created */
  3    25       3 mbz1 bit (31) unaligned,			/* pad to full word */
  3    26     2 mode bit (3) unaligned,				/* segment or directory for acl for userid */
  3    27     2 mbz2 bit (33) unaligned,			/* pad to full word */
  3    28     2 rings (3) fixed bin (3),			/* branch's ring brackets */
  3    29     2 userid char (32),				/* user's access control name */
  3    30     2 bitcnt fixed bin (24),				/* bit count of the segment */
  3    31     2 quota fixed bin (18),				/* for directories, this am't of quota will be moved to it */
  3    32     2 access_class bit (72),				/* is the access class of the body of the branch */
  3    33     2 dir_quota fixed bin (18);			/* for directories, this am't of dir quota will be moved to it */
  3    34 
  3    35 dcl  create_branch_version_2 fixed bin int static options (constant) init (2);
  3    36 
  3    37 /* END INCLUDE FILE - - - create_branch_info.incl.pl1 - - - */
  3    38 
       62 
  4     1 /* BEGIN INCLUDE FILE cds_args.incl.pl1 */
  4     2 
  4     3 dcl 1 cds_args based aligned,
  4     4     2 sections (2),
  4     5       3 p ptr,					/* pointer to data for text/static section */
  4     6       3 len fixed bin (18),				/* size of text/static section */
  4     7       3 struct_name char (32),			/* name of declared structure for this section */
  4     8     2 seg_name char (32),				/* name to create segment by */
  4     9     2 num_exclude_names fixed bin,			/* number of names in exclude array */
  4    10     2 exclude_array_ptr ptr,				/* pointer to array of exclude names */
  4    11     2 switches,					/* control switches */
  4    12       3 defs_in_link bit (1) unal,			/* says put defs in linkage */
  4    13       3 separate_static bit (1) unal,			/* says separate static section is wanted */
  4    14       3 have_text bit (1) unal,			/* ON if text section given */
  4    15       3 have_static bit (1) unal,			/* ON if static section given */
  4    16       3 pad bit (32) unal;
  4    17 
  4    18 dcl  exclude_names (1) char (32) based;			/* pointed to be cds_args.exclude_array_ptr */
  4    19 
  4    20 /* END INCLUDE FILE cds_args.incl.pl1 */
       63 
       64 
       65 
       66 
       67 	static_n_acl_entries = 1;
       68 	allocate asum_data_static;
       69 	asum_data_static.db_dir = ">system_control_1>user_messages";
       70 	asum_data_static.db_rb (*) = 1;
       71 	asum_data_static.db_dir_rb (*) = 1;
       72 	asum_data_static.db_multiclass = "1"b;
       73 	asum_data_static.acl_entries (1).access_name = "*.*.*";
       74 	asum_data_static.acl_entries (1).mode = RW_ACCESS;
       75 	asum_data_static.acl_entries (1).extended_mode = "11111"b;
       76 						/* just in case */
       77 	asum_data_static.acl_entries (1).status_code = 0;
       78 
       79 	begin;
       80 	     declare cbip		      pointer;
       81 	     declare 1 CBI		      aligned like create_branch_info based (cbip);
       82 	     cbip = addr (asum_data_static.db_cbi);
       83 
       84 	     unspec (CBI) = ""b;
       85 	     CBI.version = create_branch_version_2;
       86 	     CBI.priv_upgrade_sw = asum_data_static.db_multiclass;
       87 	     CBI.parent_ac_sw = ^CBI.priv_upgrade_sw;
       88 	     CBI.mode = ""b;			/* ACL set seperately */
       89 	     CBI.rings = asum_data_static.db_rb;
       90 	     CBI.userid = "*.*.*";
       91 	     CBI.bitcnt = 0;
       92 	     CBI.quota = 0;
       93 	     if CBI.priv_upgrade_sw
       94 	     then CBI.access_class = sys_info$access_class_ceiling;
       95 	     else ;				/* ignored */
       96 	     CBI.dir_quota = 0;
       97 
       98 	     addr (asum_data_static.db_dir_cbi) -> CBI = CBI;
       99 	     cbip = addr (asum_data_static.db_dir_cbi);
      100 	     CBI.dir_sw = "1"b;
      101 	     CBI.parent_ac_sw = "1"b;
      102 	     CBI.priv_upgrade_sw = "0"b;
      103 	     CBI.rings (1) = 1;
      104 	     CBI.rings (2) = 1;
      105 	     CBI.mode = SMA_ACCESS;
      106 	     CBI.userid = "*.*.*";
      107 	end;
      108 
      109 /* Now set up call to create data base */
      110 
      111 	cdsa.sections (2).p = addr (asum_data_static);
      112 	cdsa.sections (2).len = size (asum_data_static);
      113 	cdsa.sections (2).struct_name = "asum_data_static";
      114 
      115 	cdsa.seg_name = NAME;
      116 	cdsa.num_exclude_names = 1;
      117 	cdsa.exclude_array_ptr = addr (EXCLUDE_PAD);
      118 
      119 	string (cdsa.switches) = "0"b;
      120 	cdsa.switches.have_static = "1"b;
      121 
      122 	call create_data_segment_ (addr (cdsa), code);
      123 
      124 	if code ^= 0
      125 	then call com_err_ (code, NAME);
      126 	return;
      127      end asum_data_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    03/15/89  0800.6  !BBBJZFbbKcMJWl.pl1               >spec>install>MR12.3-1025>asum_data_.cds
60           1    10/14/83  1606.6  acl_structures.incl.pl1           >ldd>include>acl_structures.incl.pl1
61           2    04/11/85  1452.6  access_mode_values.incl.pl1       >ldd>include>access_mode_values.incl.pl1
62           3    03/15/89  0759.4  create_branch_info.incl.pl1       >spec>install>MR12.3-1025>create_branch_info.incl.pl1
63           4    04/01/76  2209.5  cds_args.incl.pl1                 >ldd>include>cds_args.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
CBI                                    based           structure                level 1 dcl 81 set ref 84* 98* 98
EXCLUDE_PAD                     000005 constant        char(32)                 initial array dcl 23 set ref 117
E_ACCESS                        000004 constant        bit(3)                   initial packed unaligned dcl 2-11
NAME                            000015 constant        char(32)                 initial packed unaligned dcl 22 set ref 115 124*
REW_ACCESS                      000001 constant        bit(3)                   initial packed unaligned dcl 2-11
RE_ACCESS                       000002 constant        bit(3)                   initial packed unaligned dcl 2-11
RW_ACCESS                       000000 constant        bit(3)                   initial packed unaligned dcl 2-11 ref 74
SMA_ACCESS                      000001 constant        bit(3)                   initial packed unaligned dcl 2-11 ref 105
W_ACCESS                        000003 constant        bit(3)                   initial packed unaligned dcl 2-11
access_class             20            based           bit(72)                  level 2 dcl 81 set ref 93*
access_name             137            based           char(32)                 array level 3 packed packed unaligned dcl 37 set ref
                                                                                  73*
acl_entries             137            based           structure                array level 2 dcl 37
asum_data_static                       based           structure                level 1 dcl 37 set ref 68 111 112
bitcnt                   16            based           fixed bin(24,0)          level 2 dcl 81 set ref 91*
cbip                            000156 automatic       pointer                  dcl 80 set ref 81 81 81 81 81 81 81 81 81 81 81 81
                                                                                  81 81 81 81 81 82* 84 85 86 87 87 88 89 90 91 92
                                                                                  93 93 96 98 99* 100 101 102 103 104 105 106
cds_args                               based           structure                level 1 dcl 4-3
cdsa                            000100 automatic       structure                level 1 dcl 17 set ref 122 122
code                            000145 automatic       fixed bin(35,0)          dcl 18 set ref 122* 124 124*
com_err_                        000012 constant        entry                    external dcl 28 ref 124
create_branch_info                     based           structure                level 1 dcl 3-17
create_branch_version_2         000406 constant        fixed bin(17,0)          initial dcl 3-35 ref 85
create_data_segment_            000014 constant        entry                    external dcl 29 ref 122
db_cbi                   60            based           structure                level 2 dcl 37 set ref 82
db_dir                                 based           char(168)                level 2 packed packed unaligned dcl 37 set ref 69*
db_dir_cbi              103            based           structure                level 2 dcl 37 set ref 98 99
db_dir_rb                52            based           fixed bin(3,0)           array level 2 dcl 37 set ref 71*
db_multiclass            57            based           bit(1)                   level 2 dcl 37 set ref 72* 86
db_rb                    54            based           fixed bin(3,0)           array level 2 dcl 37 set ref 70* 89
delete_acl_entry                       based           structure                level 1 dcl 1-63
dir_quota                22            based           fixed bin(18,0)          level 2 dcl 81 set ref 96*
dir_sw                    1            based           bit(1)                   level 3 packed packed unaligned dcl 81 set ref 100*
directory_acl_entry                    based           structure                level 1 dcl 1-54
exclude_array_ptr        42     000100 automatic       pointer                  level 2 dcl 17 set ref 117*
extended_mode           150            based           bit(36)                  array level 3 dcl 37 set ref 75*
general_acl_entry                      based           structure                level 1 unaligned dcl 1-12
general_delete_acl_entry               based           structure                level 1 dcl 1-35
general_extended_acl_entry             based           structure                level 1 dcl 1-23
have_static              44(03) 000100 automatic       bit(1)                   level 3 packed packed unaligned dcl 17 set ref 120*
len                       2     000100 automatic       fixed bin(18,0)          array level 3 dcl 17 set ref 112*
mode                      2            based           bit(3)                   level 2 in structure "CBI" packed packed unaligned
                                                                                  dcl 81 in begin block on line 79 set ref 88* 105*
mode                    147            based           bit(36)                  array level 3 in structure "asum_data_static" dcl 37
                                                                                  in procedure "asum_data_" set ref 74*
n_acl_entries           136            based           fixed bin(17,0)          level 2 dcl 37 set ref 37 37 37 37 37 68*
num_exclude_names        40     000100 automatic       fixed bin(17,0)          level 2 dcl 17 set ref 116*
p                               000100 automatic       pointer                  array level 3 dcl 17 set ref 111*
parent_ac_sw              1(04)        based           bit(1)                   level 3 packed packed unaligned dcl 81 set ref 87*
                                                                                  101*
priv_upgrade_sw           1(03)        based           bit(1)                   level 3 packed packed unaligned dcl 81 set ref 86*
                                                                                  87 93 102*
process_info_ptr        130            based           pointer                  initial level 2 dcl 37 set ref 68*
quota                    17            based           fixed bin(18,0)          level 2 dcl 81 set ref 92*
rings                     3            based           fixed bin(3,0)           array level 2 dcl 81 set ref 89* 103* 104*
sections                        000100 automatic       structure                array level 2 dcl 17
seg_name                 30     000100 automatic       char(32)                 level 2 dcl 17 set ref 115*
segment_acl_entry                      based           structure                level 1 dcl 1-45
static_n_acl_entries            000150 automatic       fixed bin(17,0)          dcl 57 set ref 67* 68 68 112
static_ptr                      000146 automatic       pointer                  dcl 36 set ref 37 37 37 37 37 37 37 37 37 37 37 37
                                                                                  37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37
                                                                                  37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37
                                                                                  37 37 37 37 37 68* 69 70 71 72 73 74 75 77 82 86
                                                                                  89 98 99 111 112
status_code             151            based           fixed bin(35,0)          array level 3 dcl 37 set ref 77*
struct_name               3     000100 automatic       char(32)                 array level 3 dcl 17 set ref 113*
switches                 44     000100 automatic       structure                level 2 in structure "cdsa" dcl 17 in procedure
                                                                                  "asum_data_" set ref 119*
switches                  1            based           structure                level 2 in structure "CBI" packed packed unaligned
                                                                                  dcl 81 in begin block on line 79
sys_info$access_class_ceiling   000016 external static bit(72)                  dcl 31 ref 93
system_info_ptr         126            based           pointer                  initial level 2 dcl 37 set ref 68*
userid                    6            based           char(32)                 level 2 dcl 81 set ref 90* 106*
version                                based           fixed bin(17,0)          level 2 dcl 81 set ref 85*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ACL_VERSION_1                          constant        fixed bin(17,0)          initial dcl 1-77
A_ACCESS                               constant        bit(3)                   initial packed unaligned dcl 2-11
A_ACCESS_BIN                           constant        fixed bin(5,0)           initial dcl 2-36
DELETE_ACL_VERSION_1                   constant        char(4)                  initial packed unaligned dcl 1-67
DIR_ACCESS_MODE_NAMES                  constant        char(4)                  initial array packed unaligned dcl 2-33
DIR_ACL_VERSION_1                      constant        char(4)                  initial packed unaligned dcl 1-67
E_ACCESS_BIN                           constant        fixed bin(5,0)           initial dcl 2-36
GENERAL_ACL_VERSION_1                  constant        char(8)                  initial packed unaligned dcl 1-72
GENERAL_DELETE_ACL_VERSION_1           constant        char(8)                  initial packed unaligned dcl 1-72
GENERAL_EXTENDED_ACL_VERSION_1         constant        char(8)                  initial packed unaligned dcl 1-72
M_ACCESS                               constant        bit(3)                   initial packed unaligned dcl 2-11
M_ACCESS_BIN                           constant        fixed bin(5,0)           initial dcl 2-36
N_ACCESS                               constant        bit(3)                   initial packed unaligned dcl 2-11
N_ACCESS_BIN                           constant        fixed bin(5,0)           initial dcl 2-36
REW_ACCESS_BIN                         constant        fixed bin(5,0)           initial dcl 2-36
RE_ACCESS_BIN                          constant        fixed bin(5,0)           initial dcl 2-36
RW_ACCESS_BIN                          constant        fixed bin(5,0)           initial dcl 2-36
R_ACCESS                               constant        bit(3)                   initial packed unaligned dcl 2-11
R_ACCESS_BIN                           constant        fixed bin(5,0)           initial dcl 2-36
SA_ACCESS                              constant        bit(3)                   initial packed unaligned dcl 2-11
SA_ACCESS_BIN                          constant        fixed bin(5,0)           initial dcl 2-36
SEG_ACCESS_MODE_NAMES                  constant        char(4)                  initial array packed unaligned dcl 2-30
SEG_ACL_VERSION_1                      constant        char(4)                  initial packed unaligned dcl 1-67
SMA_ACCESS_BIN                         constant        fixed bin(5,0)           initial dcl 2-36
SM_ACCESS                              constant        bit(3)                   initial packed unaligned dcl 2-11
SM_ACCESS_BIN                          constant        fixed bin(5,0)           initial dcl 2-36
S_ACCESS                               constant        bit(3)                   initial packed unaligned dcl 2-11
S_ACCESS_BIN                           constant        fixed bin(5,0)           initial dcl 2-36
W_ACCESS_BIN                           constant        fixed bin(5,0)           initial dcl 2-36
acl_count                       000154 automatic       fixed bin(17,0)          dcl 1-5
acl_ptr                         000152 automatic       pointer                  dcl 1-4
delete_acl                             based           structure                level 1 dcl 1-58
delete_acl_array                       based           structure                array level 1 dcl 1-64
directory_acl                          based           structure                level 1 dcl 1-49
directory_acl_array                    based           structure                array level 1 dcl 1-55
exclude_names                          based           char(32)                 array packed unaligned dcl 4-18
general_acl                            based           structure                level 1 dcl 1-7
general_delete_acl                     based           structure                level 1 dcl 1-30
general_extended_acl                   based           structure                level 1 dcl 1-18
segment_acl                            based           structure                level 1 dcl 1-40
segment_acl_array                      based           structure                array level 1 dcl 1-46

NAME DECLARED BY EXPLICIT CONTEXT.
asum_data_                      000140 constant        entry                    external dcl 9

NAMES DECLARED BY CONTEXT OR IMPLICATION.
addr                                                   builtin function         ref 82 98 99 111 117 122 122
null                                                   builtin function         ref 68 68
size                                                   builtin function         ref 112
string                                                 builtin function         ref 119
unspec                                                 builtin function         ref 84

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       476         516     407         506
Length      3546     407        20        3014      66           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
asum_data_                          130 external procedure  is an external procedure.  
begin block on line 79                  begin block         shares stack frame of external procedure asum_data_.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
asum_data_               000100 cdsa                        asum_data_
                         000145 code                        asum_data_
                         000146 static_ptr                  asum_data_
                         000150 static_n_acl_entries        asum_data_
                         000152 acl_ptr                     asum_data_
                         000154 acl_count                   asum_data_
                         000156 cbip                        begin block on line 79

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return_mac          ext_entry           int_entry           alloc_storage

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      create_data_segment_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
sys_info$access_class_ceiling




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
      9 000137        67 000145        68 000147        69 000164        70 000167        71 000202        72 000214
     73 000216        74 000221        75 000223        77 000225        82 000226        84 000231        85 000234
     86 000236        87 000244        88 000254        89 000256        90 000264        91 000267        92 000270
     93 000271        96 000302        98 000303        99 000306       100 000310       101 000312       102 000314
    103 000316       104 000320       105 000321       106 000323       111 000326       112 000330       113 000334
    115 000337       116 000342       117 000344       119 000346       120 000347       122 000351       124 000364
    126 000403


Object Segment >spec>install>MR12.3-1025>asum_data_
Created on 03/15/89  0818.7 mst Wed
by Hirneisen.SysMaint.a
using create_data_segment_, Version II of Thursday, November 20, 1986

        Object    Text    Defs    Link    Symb  Static
Start        0       0       0     146     330     156
Length     574       0     146     162     230     152


16 Definitions:


segname:    asum_data_

link|147        acl_entries
link|70         db_cbi
link|10         db_dir
link|113        db_dir_cbi
link|62         db_dir_rb
link|145        db_locked
link|67         db_multiclass
link|64         db_rb
link|142        entry_ring
link|143        lock_id
link|146        n_acl_entries
link|144        process_id
link|140        process_info_ptr
symb|0          symbol_table
link|136        system_info_ptr


No Links.





                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
