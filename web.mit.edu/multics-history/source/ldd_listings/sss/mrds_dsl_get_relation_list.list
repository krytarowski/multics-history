	COMPILATION LISTING OF SEGMENT mrds_dsl_get_relation_list
	Compiled by: Multics PL/I Compiler, Release 30, of February 16, 1988
	Compiled at: Honeywell Bull, Phoenix AZ, SysM
	Compiled on: 08/01/88  1330.9 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   *                                                         *
        4*   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        5*   *                                                         *
        6*   *                                                         *
        7*   *********************************************************** */
        8 
        9 
       10 mrds_dsl_get_relation_list: get_relation_list: procedure (db_index, area_ptr, structure_version,
       11 	mrds_relation_list_ptr, error_code);
       12 
       13 /* DESCRIPTION:
       14*
       15*   Given a database opening index, and a pointer to a freeing area,
       16*   this routine will return a structure containing the names
       17*   of all the relations in the model that the opening has in it's view.
       18*   It indicates whether this was a submodel
       19*   opening, and returns submodel alias names as well in that case.
       20*   For secured databases, no model information is returned,
       21*   unless the user is  a DBA.
       22*
       23**/
       24 
       25 /* PARAMETERS:
       26*
       27*   db_index - - (input) fixed bin(35), the database opening index as returned from dsl_$open,
       28*   this may be an opening through either a model or submodel of any version.
       29*
       30*   area_ptr - - (input) ptr, pointer to a freeing area in which the returned
       31*   structure is to be allocated. Allow about 30 words per expected relation for the area size.
       32*
       33*   structure_version - - (input) fixed bin, the desired version of the
       34*   relation info structure to be returned.
       35*
       36*   mrds_relation_list_ptr - - (output) ptr, points to the allocated structure
       37*   as defined in the include file mrds_relation_list.incl.pl1
       38*
       39*   error_code - - (output) fixed bin(35), the error status encoding, 0 unless an error occured.
       40*
       41**/
       42 
       43 /* HISTORY:
       44*
       45*   Originally written by Jim Gray - - March 1981
       46*
       47**/
       48 
       49 /* initialize */
       50 
       51 	error_code = 0;
       52 	mrds_relation_list_ptr = null ();
       53 	clean_up_condition = "0"b;
       54 
       55 	on cleanup begin;
       56 		clean_up_condition = "1"b;
       57 		call clean_up ();
       58 	     end;
       59 
       60 /*  check for a valid opening index */
       61 
       62 	call mu_database_index$get_resultant_model_pointer (db_index, dbcb_ptr);
       63 	if dbcb_ptr = null () then
       64 	     error_code = mrds_error_$invalid_db_index;
       65 	else do;
       66 
       67 /* good opening index, check for a good area */
       68 
       69 		if area_ptr = null () then
       70 		     error_code = error_table_$badcall;
       71 		else do;
       72 			unspec (my_area_info) = "0"b;
       73 			my_area_info.version = 1;
       74 			my_area_info.areap = area_ptr;
       75 
       76 			call area_info_ (addr (my_area_info), error_code);
       77 			if error_code ^= 0 then ;	/* couldn't get area info */
       78 			else if my_area_info.no_freeing then
       79 			     error_code = mrds_error_$not_freeing_area;
       80 			else do;
       81 
       82 /* check for a known structure version */
       83 
       84 				if structure_version ^= mrds_relation_list_structure_version then
       85 				     error_code = error_table_$unimplemented_version;
       86 				else do;
       87 
       88 /* check for a supported database version */
       89 
       90 					rdbi_ptr = dbcb.rdbi_ptr;
       91 					if rm_db_info.db_version ^= 4 then
       92 					     error_code = mrds_error_$version_not_supported;
       93 					else do;
       94 
       95 /* set up for too small an area given */
       96 
       97 						on area begin;
       98 							error_code = error_table_$area_too_small;
       99 							goto skip_allocate;
      100 						     end;
      101 
      102 /* fill in the info in a structure in the users area */
      103 
      104 						rmra_ptr = rm_db_info.ra_ptr;
      105 						mrds_relation_list_num_rels_init = rm_rel_array.num_rels;
      106 						allocate mrds_relation_list set (mrds_relation_list_ptr) in (users_area);
      107 						revert area;
      108 
      109 						unspec (mrds_relation_list) = "0"b;
      110 						mrds_relation_list.version = mrds_relation_list_structure_version;
      111 						mrds_relation_list.num_rels_in_view = mrds_relation_list_num_rels_init;
      112 						mrds_relation_list.submodel_view = dbcb.dsm_sw;
      113 
      114 						if rm_db_info.mdbm_secured then
      115 						     mrds_relation_list.access_info_version = 5;
      116 						else mrds_relation_list.access_info_version = 4;
      117 
      118 /* check on the user class for secured databases */
      119 
      120 						call mrds_dm_authorization$get_user_class
      121 						     (rtrim (rm_db_info.db_path), addr (local_area),
      122 						     mrds_authorization_structure_version, mrds_authorization_ptr, error_code);
      123 						if error_code = 0 then do;
      124 
      125 /* fill in the details for each relation in the view */
      126 
      127 							do i = 1 to mrds_relation_list_num_rels_init while (error_code = 0);
      128 
      129 							     call get_relation_data ();
      130 
      131 							end;
      132 
      133 						     end;
      134 					     end;
      135 				     end;
      136 			     end;
      137 		     end;
      138 	     end;
      139 
      140 /* clean up before returning */
      141 
      142 	call clean_up ();
      143 
      144 skip_allocate:
      145 	return;
      146 
      147 get_relation_data: procedure ();
      148 
      149 /* routine to get the data for an individual relation in the users view */
      150 
      151 	rmri_ptr = rm_rel_array.rel_data (i).ri_ptr;
      152 	mrds_relation_list.relation (i).submodel_name = rm_rel_info.name;
      153 
      154 /* only DBA's can know model names in a secured db */
      155 
      156 	if rm_db_info.mdbm_secured & ^mrds_authorization.administrator then
      157 	     mrds_relation_list.relation (i).model_name = " ";
      158 	else mrds_relation_list.relation (i).model_name = rm_rel_info.model_name;
      159 
      160 /* find out what the multics acls are on this relation */
      161 
      162 	call mu_get_relation_acl (rtrim (rm_db_info.db_path),
      163 	     rtrim (rm_rel_info.model_name), mrds_authorization.administrator,
      164 	     read_acl, write_acl, error_code);
      165 
      166 	if error_code = 0 then do;
      167 
      168 		multics_access_string = "";
      169 
      170 		if read_acl then
      171 		     multics_access_string = multics_access_string || "r";
      172 
      173 		if write_acl then
      174 		     multics_access_string = multics_access_string || "w";
      175 
      176 		if multics_access_string = "" then
      177 		     multics_access_string = "n";
      178 
      179 		mrds_relation_list.relation (i).system_acl = multics_access_string;
      180 
      181 		if mrds_relation_list.access_info_version = 4 then /* relation, not attribute level, security */
      182 		     mrds_relation_list.relation (i).mrds_access,
      183 			mrds_relation_list.relation (i).effective_access =
      184 			mrds_relation_list.relation (i).system_acl;
      185 
      186 /* fill in the access for submodel security */
      187 
      188 		else do;				/* version 5 submodel security */
      189 
      190 			mrds_access_string = "";
      191 
      192 
      193 			if rm_rel_info.append_tuple_perm then
      194 			     mrds_access_string = mrds_access_string || "a";
      195 
      196 			if rm_rel_info.delete_tuple_perm then
      197 			     mrds_access_string = mrds_access_string || "d";
      198 
      199 			if mrds_access_string = "" then
      200 			     mrds_access_string = "n";
      201 
      202 			mrds_relation_list.relation (i).mrds_access = mrds_access_string;
      203 
      204 /* fill in the effective access for attribute level security */
      205 
      206 			if write_acl then
      207 			     mrds_relation_list.relation (i).effective_access = mrds_access_string;
      208 			else mrds_relation_list.relation (i).effective_access = "n";
      209 		     end;
      210 	     end;
      211 
      212      end;
      213 
      214 clean_up: procedure ();
      215 
      216 /* routine to get rid of allocated space, if an error
      217*   occurs, or cleanup is signaled */
      218 
      219 	if clean_up_condition | error_code ^= 0 then do;
      220 
      221 		if mrds_relation_list_ptr ^= null () then do;
      222 
      223 			free mrds_relation_list_ptr -> mrds_relation_list in (users_area);
      224 
      225 			mrds_relation_list_ptr = null ();
      226 
      227 		     end;
      228 
      229 	     end;
      230 
      231      end;
      232 
      233 	declare area		 condition;	/* happens when space too small */
      234 	declare area_info_		 entry (ptr, fixed bin (35)); /* gets details on the area */
      235 	declare area_ptr		 ptr;		/* points to a freeing area */
      236 	declare clean_up_condition	 bit (1);		/* set on if cleanup signaled */
      237 	declare cleanup		 condition;	/* occurs upon quit/release */
      238 	declare db_index		 fixed bin (35);	/* database opening index */
      239 	declare error_code		 fixed bin (35);	/* error status encoding */
      240 	declare error_table_$area_too_small fixed bin (35) ext; /* area too small error */
      241 	declare error_table_$badcall	 fixed bin (35) ext;/* null area ptr */
      242 	declare error_table_$unimplemented_version fixed bin (35) ext; /* unknown structure version */
      243 	declare i			 fixed bin;	/* loop index */
      244 	declare local_area		 area (1024);	/* space for return args */
      245 	declare mu_get_relation_acl	 entry (char (*), char (*),
      246 				 bit (1), bit (1), bit (1), fixed bin (35)); /* gets users  acls on relation data */
      247 	declare mu_database_index$get_resultant_model_pointer entry (fixed bin (35), ptr); /* gets pointer to resultant model */
      248 	declare mrds_access_string	 char (4) varying;	/* mrds access encoding */
      249 	declare mrds_dm_authorization$get_user_class entry (char (*), ptr, fixed bin, ptr, fixed bin (35)); /* gets user class */
      250 	declare mrds_error_$invalid_db_index fixed bin (35) ext; /* bad opening index */
      251 	declare mrds_error_$not_freeing_area fixed bin (35) ext; /* area without freeing attribute */
      252 	declare mrds_error_$version_not_supported fixed bin (35) ext; /* not version 4 or later */
      253 	declare multics_access_string	 char (4) varying;	/* multics access encoding */
      254 	declare read_acl		 bit (1);		/* on => user has "r" on relation data */
      255 	declare structure_version	 fixed bin;	/* desired version of structure */
      256 	declare sys_info$max_seg_size	 fixed bin (35) ext;/* largest segment */
      257 	declare users_area		 area (sys_info$max_seg_size) based (area_ptr); /* overlay for input area */
      258 	declare write_acl		 bit (1);		/* on => user has "w" on relation data */
      259 	declare (addr, empty, fixed, null, rel, rtrim, unspec) builtin;
      260 	declare 1 my_area_info	 like area_info;	/* local storage for area details */
      261 
  1     1 /* BEGIN INCLUDE FILE mrds_relation_list.incl.pl1 - - Jim Gray 81-01-14 */
  1     2 
  1     3 /* HISTORY:
  1     4*
  1     5*   81-01-14 Jim Gray : originally created for the dsl_$get_relation_list interface
  1     6*
  1     7**/
  1     8 
  1     9 /* DESCRIPTION:
  1    10*
  1    11*   For a given opening of a database via a model or submodel view,
  1    12*   this structure will contain the list of relations as seen from that view.
  1    13*   It contains the number of relations in that view, and both the
  1    14*   submodel and model names of the relation (model = submodel name if not submodel opening)
  1    15*   plus whether the opening was via a submodel or not.
  1    16*   The virtual relation bit indicates when the model name may not
  1    17*   be valid, due to a mapping over more than one relation in the model.
  1    18*
  1    19*   Access information for various versions of MRDS access is also returned, as follows:
  1    20*
  1    21*   system_acl entries refers strictly to "rew" type multics acl's.
  1    22*   for version 3 access info, attr system_acls are the same as the relation acls,
  1    23*   unless the attribute is inverted, in which case it is the acl
  1    24*   of the attribute as it appears under the invert_dir in the database.
  1    25*
  1    26*   mrds_access entries are version dependent, version 3 databases
  1    27*   with mrds_list/set_delete_acl commands used a mrds specific access
  1    28*   set of modes of retreive-store-modify-delete.
  1    29*   version 4 databases released in MR8 had no mrds specific
  1    30*   access, but used system acl's of "rew".
  1    31*   version 4 databases for MR9 mrds using submodel security have
  1    32*   mrds specific access mode of append/delete_tuple for relations,
  1    33*   and read/modify_attr for attributes.
  1    34*
  1    35*   effective_access entries use the same units as mrds_access.
  1    36*   it is the logical result of applying both mrds and system access,
  1    37*   and coming up with a user effective mode of access to the relation/attribute.
  1    38*   for version 3 databases, the effective access includes
  1    39*   in the relation effective access, the effect that access of inverted attributes
  1    40*   in the invert_dir may have.
  1    41*
  1    42**/
  1    43 
  1    44 
  1    45 declare 1 mrds_relation_list aligned based (mrds_relation_list_ptr),
  1    46         2 version fixed bin,				/* version number for this structure */
  1    47         2 access_info_version fixed bin,		/* version of mrds access modes
  1    48*						   3 => version 3 db with r-s-m-d access,
  1    49*						   4 => version 4 MR8 db with r-e-w access,
  1    50*						   5 => version 4 MR9 db with relation a-d, and attr r-m modes
  1    51*						   (submodel security) */
  1    52         2 num_rels_in_view fixed bin,			/* count of relations present in this view */
  1    53         2 submodel_view bit (1) unal,			/* ON => this opening was via a submodel */
  1    54         2 mbz1 bit (35) unal,
  1    55         2 relation (mrds_relation_list_num_rels_init refer (mrds_relation_list.num_rels_in_view)),
  1    56 	3 model_name char (32),			/* name of relation in database model */
  1    57 	3 submodel_name char (64),			/* alias name of relation in submodel, else model name */
  1    58 	3 system_acl char (8) varying,		/* the system access from r-e-w modes */
  1    59 	3 mrds_access char (8) varying,		/* version 3 => from r-s-m-d, 4 => from r-e-w, 5 => from a-d */
  1    60 	3 effective_access char (8) varying,		/* effect of system + mrds access, in mrds access units */
  1    61 	3 virtual_relation bit (1) unal,		/* ON => submodel relation defined over >1 model relation */
  1    62 	3 mbz2 bit (35) unal ;
  1    63 
  1    64 
  1    65 declare  mrds_relation_list_num_rels_init fixed bin ;
  1    66 
  1    67 declare  mrds_relation_list_ptr ptr ;
  1    68 
  1    69 declare  mrds_relation_list_structure_version fixed bin init (1) int static options (constant) ;
  1    70 
  1    71 /* END INCLUDE FILE mrds_relation_list.incl.pl1 */
      262 
      263 
  2     1 /* BEGIN INCLUDE FILE mrds_authorization.incl.pl1 - - 81-01-20 Jim Gray */
  2     2 
  2     3 /* HISTORY:
  2     4*
  2     5*   81-01-20 Jim Gray : original created for the mmi_$get_authorization interface
  2     6*
  2     7**/
  2     8 
  2     9 /* DESCRIPTION:
  2    10*
  2    11*   this structure returns the callers user_class
  2    12*   either database administrator or normal user.
  2    13*   Note that these separate classes were used to allow
  2    14*   future expansion to the user classes, rather than
  2    15*   make them logical "not"'s of one another.
  2    16*   NOTE: a DBA is always also a normal user, thus if the caller
  2    17*   is a DBA, his normal_user bit will be on also.
  2    18*
  2    19**/
  2    20 
  2    21 
  2    22 declare 1 mrds_authorization aligned based (mrds_authorization_ptr),
  2    23         2 version fixed bin,				/* version number of this structure */
  2    24         2 administrator bit (1) unal,			/* caller is a DBA */
  2    25         2 normal_user bit (1) unal,			/* caller has no special priviledges */
  2    26         2 mbz bit (34) unal ;
  2    27 
  2    28 
  2    29 declare  mrds_authorization_ptr ptr ;			/* pointer for referring to the structure */
  2    30 
  2    31 declare  mrds_authorization_structure_version fixed bin init (1) int static options (constant) ;
  2    32 
  2    33 /* END INCLUDE FILE mrds_authorization.incl.pl1 */
      264 
      265 
  3     1 /* BEGIN mrds_dbcb.incl.pl1 -- jaw, 11/7/78 */
  3     2 
  3     3 
  3     4 
  3     5 /****^  HISTORY COMMENTS:
  3     6*  1) change(85-11-17,Dupuis), approve(85-12-16,MCR7314),
  3     7*     audit(86-02-04,Brunelle), install(86-02-05,MR12.0-1013):
  3     8*     This entry is being made to cover the change made on 85-07-01 by Thanh
  3     9*     Nguyen. The scopes_changed flag was added to make checking for this
  3    10*     more efficient (mrds error list #137).
  3    11*  2) change(86-06-10,Blair), approve(86-08-07,MCR7491),
  3    12*     audit(86-08-07,Gilcrease), install(86-08-15,MR12.0-1127):
  3    13*     Add a bit called dont_check_txn_id to indicate whether or not we should
  3    14*     care if multiple txns use the same selection_expression. (mrds #156)
  3    15*  3) change(87-11-23,Hergert), approve(88-06-28,MCR7903),
  3    16*     audit(88-06-28,Dupuis), install(88-08-01,MR12.2-1073):
  3    17*     Added parser_work_area_ptr and mrds_se_info_ptr for new parser.
  3    18*                                                   END HISTORY COMMENTS */
  3    19 
  3    20 
  3    21 /* WARNING
  3    22*          If the dbcb structure is changed then the mrds_data_
  3    23*          item saved_res_version MUST be incremented to invalidate all
  3    24*          existing saved resultants
  3    25**/
  3    26 
  3    27 /* HISTORY :
  3    28*
  3    29*   modified by Jim Gray - - 80-10-24, to add new_select_expr bit for
  3    30*   tid_list management
  3    31*
  3    32*   81-1-9 Jim Gray : added like reference for  ease  in  making  the
  3    33*   phony resultant in mu_database_index, without having the area dcl
  3    34*   included.
  3    35*
  3    36*   81-06-17 Roger Lackey :  added  last_store_rel_name  for  use  by
  3    37*   mrds_dsl_store
  3    38*
  3    39*   81-06-26 Roger Lackey : Added no_optimize and  print_search_order
  3    40*   switches
  3    41*
  3    42*   81-07-06 Jim Gray : added identifier for  the  current  selection
  3    43*   expression,  so  that relation statistics can be updated relative
  3    44*   to number of selection expressions seem. Also  removed  init  for
  3    45*   last_store_rel_name,   as   this   iw   now   properly   done  in
  3    46*   mrds_dsl_init_res.
  3    47*
  3    48*   81-07-17  Roger Lackey : added pred_ptr and unused_ptrs.
  3    49*
  3    50*   82-08-19  Mike Kubicar : added store_vector field.  This is needed
  3    51*   for the conversion to the relation manager.
  3    52*
  3    53*   82-08-23 Davids: added the relmgr_entries and access_costs
  3    54*   substructures so that the entries and costs can change
  3    55*   depending on the type of database that is opened.
  3    56*
  3    57*   82-09-09 Mike Kubicar : added modify_vector field.  This is needed
  3    58*   since modify uses a different vector type (general) than does store.
  3    59*
  3    60*   82-09-20 Davids: changed names of (store modify)_vector to
  3    61*   (store modify)_vector_ptr. Also (delete modify)_tuple_by_id to
  3    62*   (delete modify)_tuples_by_id. added the element cursor_storage_ptr
  3    63*   which should be inited to null and will be set by mu_cursor_manager_$get
  3    64*   during the first call.
  3    65*
  3    66*   82-09-21 Davids: renamed cursor_storage_ptr to cursor_ptrs_storage_ptr
  3    67*   since it deals with the pointers to the cursors and not the cursors
  3    68*   themelves and added the element cursor_storage_area_ptr which points
  3    69*   to the area where the cursors are kept.
  3    70*
  3    71*   82-09-22 Davids: renamed the transact_ctl_seg to transactions_needed.
  3    72*   the transact_ctl_seg always had a value of 0 and really didn't mean
  3    73*   anything.
  3    74*
  3    75*   82-09-22 Mike Kubicar : added create_relation, create_index and
  3    76*   destroy_relation_by_opening to relmgr_entries.  They are needed
  3    77*   by mrds_dsl_define_temp_rel.
  3    78*
  3    79*   82-09-24 Donna Woodka : added  put_tuple to  relmgr_entries. It
  3    80*   is needed by mu_store.
  3    81*
  3    82*   82-11-12 Davids: changed the declaration of the access_costs from fixed
  3    83*   bin to float bin since the values are not integers.
  3    84*
  3    85*   83-02-02 Davids: added the dbc_uid element. This will allow mrds to make
  3    86*   sure that the dbc_ptr still points to the correct segment. Element was 
  3    87*   added to the end of the structure to allow modules that don't use
  3    88*   the element to continue to reference the dbcb structure without recompiling.
  3    89*
  3    90*   83-02-25 Davids: added the concurrency_on and rollback_on elements. These
  3    91*   are needed so that temp rels can be created with the same file attributes
  3    92*   as the permanent relations.
  3    93*
  3    94*   83-05-02 Mike Kubicar : Deleted get_next_search_specification_ptr and
  3    95*   added the resultant_in_pdir bit.
  3    96*
  3    97*   83-05-18 Davids: reduced the number of reserved bits to 14 (from 15) and
  3    98*   added the res_already_made element.
  3    99*
  3   100*   83-05-24 Mike Kubicar : Updated the relation manager calling sequences.
  3   101*
  3   102*   83-08-03 Mike Kubicar : Added the element_id_list_segment_ptr and removed
  3   103*   one of the unused pointers.
  3   104*
  3   105*   83-09-20 Ron Harvey: Added relmgr_entries.get_population.
  3   106*
  3   107*   84-08-27 John Hergert:  Created compiled_se_info_ptr from unused_ptrs(2)
  3   108*   leaving unused_ptrs(1).
  3   109*
  3   110*   85-01-15 Thanh Nguyen:  Added the work_area_ptr and removed the last
  3   111*   unused_ptrs (1).
  3   112*
  3   113*   85-04-12 Thanh Nguyen:  Added user_started_transaction and 
  3   114*   non_shared_to_shared flags.  Also added se_transaction_id and some more
  3   115*   spare ptrs, entries and reserved storages for future enhancement, since
  3   116*   we changed the saved_res_version from rslt0001 to rslt0002.
  3   117*
  3   118*   85-07-01 Thanh Nguyen:  Added scopes_changed flag.  This flag is set by
  3   119*   common routine of mrds_dsl_set_scope, reset by mrds_dsl_optimize and 
  3   120*   mrds_dsl_gen_srch_prog when building of a new search_vars.
  3   121**/
  3   122 
  3   123 
  3   124 /* this structure is based on the {unique_name}.mrds.dbcb segment
  3   125*   that constitutes the non-secure portion of the resultant model that is
  3   126*   created during the opening of a database. it contains variables that
  3   127*   are used during the runtime access of the database, and an area
  3   128*   for evaluation of requests. it points to four other
  3   129*   segments in the resultant model, {unique_name}.mrds.rdbi, the secure
  3   130*   portion of the resultant(see mdbm_rm_db_info.incl.pl1),
  3   131*   {unique_name}.mrds.select, an area for selection expression evaluation,
  3   132*   {unique_name}.mrds.curdat, and {unique_name}.mrds.stadat, two segments
  3   133*   used in the elimination of duplicate tuples during a retrieve.
  3   134*   the dbcb area holds the structure in mdbm_scope_info.incl.pl1
  3   135*   that is used when the database is using the file scope mechanism
  3   136*   for concurrency control over file readying. the segment overlayed via
  3   137*   mrds_dbc.incl.pl1 structure is pointed to and also handles concurrency control,
  3   138*   across database openings. the pointer to this dbcb structure is kept in a table
  3   139*   which associates database indexes(returned from a call to dsl_$open), with particular
  3   140*   opening instances of resultant models. (see mu_database_index routine) */
  3   141 
  3   142      dcl	   1 dbcb		      aligned based (dbcb_ptr), /* DBCB -- non-secure portion */
  3   143 	     2 data	      like dbcb_data,
  3   144 	     2 static_area	      area (sys_info$max_seg_size - fixed (rel (addr (dbcb.static_area))));
  3   145 
  3   146      dcl	   dbcb_ptr	      ptr;
  3   147 
  3   148      declare 1 dbcb_data	      based,		/* info part of dbcb, separated out so that
  3   149*						   like references can avoid getting the area declaration */
  3   150 	     2 rdbi_ptr	      ptr,		/* pointer to write protected mdbm_util_ info. */
  3   151 	     2 range_ptr	      ptr,		/*  ptr to range structure, or null */
  3   152 	     2 select_ptr	      ptr,		/* ptr to select list, or null */
  3   153 	     2 sv_ptr	      ptr,		/* pointer to search variables */
  3   154 	     2 so_ptr	      ptr,		/* pointer to search operators */
  3   155 	     2 ti_ptr	      ptr,		/* pointer to tuple info */
  3   156 	     2 lit_ptr	      ptr,		/* pointer to the literal area, or null */
  3   157 	     2 current_ptr	      ptr,		/* ptr to select list resulting from -current clause */
  3   158 	     2 ss_ptr	      ptr,		/* ptr to select sets block if not simple s.e. */
  3   159 	     2 retr_info_ptr      ptr,		/* ptr to retrieve info area */
  3   160 	     2 trel_info_ptr      ptr,		/* ptr to retrieve info area */
  3   161 	     2 sti_ptr	      ptr,		/* pointer to store info */
  3   162 	     2 dbc_ptr	      ptr,		/*  pointer to the data base control segment */
  3   163 	     2 sfi_ptr	      ptr,		/* points to head of scalar function list */
  3   164 	     2 scope_ptr	      ptr,		/* points to array of scope tuples */
  3   165 	     2 select_area_ptr    ptr,		/* ptr to area for current selection expression allocations */
  3   166 	     2 current_data_ptr   ptr,		/* ptr to one of 2 segments used by mrds_dsl_retrieve
  3   167*						   for eliminating duplicate tuples. */
  3   168 	     2 static_data_ptr    ptr,		/* ptr to one of 2 segments used by mrds_dsl_retrieve
  3   169*						   for eliminating duplicate tuples. */
  3   170 	     2 store_area_ptr     ptr,		/* temp storage area for dsl_$store */
  3   171 	     2 retrieve_area_ptr  ptr,		/* temp storage for dsl_$retrieve */
  3   172 	     2 modify_area_ptr    ptr,		/* temp storage area for dsl_$modify */
  3   173 	     2 delete_area_ptr    ptr,		/* temp storage area for dsl_$delete */
  3   174 	     2 def_temp_rel_area_ptr ptr,		/* temp storage area for dsl_$define_temp_rel */
  3   175 	     2 pred_ptr	      ptr,		/* Pointer to pred_array */
  3   176 	     2 store_vector_ptr   ptr,		/* Vector structure used during store operations */
  3   177 	     2 modify_vector_ptr  ptr,		/* Used during modifies */
  3   178 	     2 element_id_list_segment_ptr ptr,		/* Points to the segment used to hold element_id_list structures */
  3   179                2 compiled_se_info_ptr ptr,                  /* points to the segment containing all info on compiled sexs */
  3   180 	     2 work_area_ptr        ptr,		/* Work area for encode/decode value allocations in mu_retrieve */
  3   181 	     2 se_info_ptr          ptr,                  /* Points to se_info struct. Primarily for error reports */
  3   182 	     2 parser_work_area_ptr ptr,		/*  work area for parser */
  3   183 	     2 reserved_ptrs      (4) ptr,		/* Reserved for future use */
  3   184 	     2 another_flag	      bit (1) unal,		/* on if predicate was -another */
  3   185 	     2 current_flag	      bit (1) unal,		/* on if predicate was -current clause */
  3   186 	     2 dbc_incr	      bit (1) unal,		/* on if dbc open mode has been incremented for this user */
  3   187 	     2 delete_flag	      bit (1) unal,		/* On if search was called from mrds_dsl_sec_delete */
  3   188 	     2 dup_retain	      bit (1) unaligned,	/* On if dup tuples allowed for retrieval */
  3   189 	     2 prev_select	      bit (1) unal,		/* on if prev. select block processed in this s.e. */
  3   190 	     2 possible_op	      bit (1) unal,		/* on of arith op. allowed */
  3   191 	     2 sel_clause	      bit (1) unal,		/* on if currently in select clause */
  3   192 	     2 dsm_sw	      bit (1) unal,		/* on if data base was opened via data submodel */
  3   193 	     2 val_rtrv	      bit (1) unal,		/* if s.e. valid for retrieve */
  3   194 	     2 val_mod	      bit (1) unal,		/* for modify */
  3   195 	     2 val_del	      bit (1) unal,		/* for delete */
  3   196 	     2 val_dtr	      bit (1) unal,		/* for define temp rel */
  3   197 	     2 transactions_needed bit (1) unal,	/* On => transaction must be started or in progress does
  3   198*                                                                     not imply that the database is of type page_file */
  3   199 	     2 open_mode	      bit (3) unal,		/* 0=>unknown, 1=>r, 2=>u, 3=>er, 4=>eu, >4=>bad */
  3   200 	     2 new_select_expr    bit (1) unal,		/* on => starting a new tid list management period */
  3   201 	     2 no_optimize	      bit (1) unal,		/* On => no optimize */
  3   202 	     2 print_search_order bit (1) unal,		/*  On => print the search order */
  3   203 	     2 resultant_in_pdir  bit (1) unal,		/* On => Temp segments are in the process dir */
  3   204 	     2 res_already_made   bit (1) unal,           /* On => resultant has been made based on a saved copy */
  3   205 	     2 user_started_transaction bit (1) unal,     /* On => user already started his own transaction. */
  3   206 	     2 non_shared_to_shared bit (1) unal,         /* On => user changed the scope from non shared to shared
  3   207*						   inside a sequence of -another selection expression. */
  3   208 	     2 scopes_changed     bit (1) unal,           /* On => scopes had been changed by set_scopes or delete_scopes */
  3   209 	     2 dont_check_txn_id  bit (1) unal,           /* On => cpmd needs same selection exp across multiple txns */
  3   210 	     2 reserved	      bit (10) unal,	/* reserved for future use */
  3   211 	     2 nseq_sch	      fixed bin (35),	/* no. tuples located via sequential search */
  3   212 	     2 nind_sch	      fixed bin (35),	/* no. tuples located via index search */
  3   213 	     2 nhash_sch	      fixed bin (35),	/* no. tuples located via hash search */
  3   214 	     2 nlk_sch	      fixed bin (35),	/* no tuples located via link search */
  3   215 	     2 cur_lit_offset     fixed bin (35),	/* current bit offset in literal string */
  3   216 	     2 dbi	      fixed bin (35),	/* database index for this opening */
  3   217 	     2 last_s_e_id_num    fixed bin (35),	/* identifying number for last selection expression seen */
  3   218 	     2 se_transaction_id  bit (36) aligned,       /* transaction id from beginning of select expression */
  3   219 	     2 last_store_rel_name char (32),		/* Name of relation last used  for store */
  3   220 	     2 cursor_ptrs_storage_ptr ptr,		/* pointer to space where cursor ptrs are stored */
  3   221 	     2 cursor_storage_area_ptr ptr,		/* pointer to area where the cursors are kept */
  3   222 	     2 reserved_words     (10) fixed bin (35),	/* Reserved for future use */
  3   223 	     2 relmgr_entries,			/* relation manager entries */
  3   224 	       3 open	      entry (char (*), char (*), bit (36) aligned, fixed bin (35)),
  3   225 	       3 close	      entry (bit (36) aligned, fixed bin (35)),
  3   226 	       3 create_cursor    entry (bit (36) aligned, ptr, ptr, fixed bin (35)),
  3   227 	       3 destroy_cursor   entry (ptr, ptr, fixed bin (35)),
  3   228 	       3 set_scope	      entry (bit (36) aligned, bit (2) aligned, bit (2) aligned, fixed bin (35)),
  3   229 	       3 delete_tuples_by_id entry (ptr, ptr, fixed bin (35), fixed bin (35)),
  3   230 	       3 modify_tuples_by_id entry (ptr, ptr, ptr, fixed bin (35), fixed bin (35)),
  3   231 	       3 get_tuple_by_id  entry (ptr, bit (36) aligned, ptr, ptr, ptr, fixed bin (35)),
  3   232 	       3 get_tuples_by_spec entry (ptr, ptr, ptr, ptr, ptr, fixed bin (35)),
  3   233 	       3 get_tuple_id     entry (ptr, ptr, ptr, ptr, fixed bin (35)),
  3   234 	       3 put_tuple	      entry (ptr, ptr, bit (36) aligned, fixed bin (35)),
  3   235 	       3 get_count	      entry (ptr, ptr, fixed bin (35), fixed bin (35)),
  3   236 	       3 get_duplicate_key_count entry (ptr, bit (36) aligned, fixed bin (17), fixed bin (35), fixed bin (35)),
  3   237 	       3 get_population   entry (ptr, fixed bin (35), fixed bin (35)),
  3   238 	       3 create_relation  entry (char (*), char (*), ptr, ptr, bit (36) aligned, bit (36) aligned, fixed bin (35)),
  3   239 	       3 create_index     entry (bit (36) aligned, ptr, bit (36) aligned, fixed bin (17), bit (36) aligned, fixed bin (35)),
  3   240 	       3 destroy_relation_by_path entry (char (*), char (*), fixed bin (35)),
  3   241 	       3 reserved_entries (5) entry (),
  3   242 	     2 access_costs,			/* access costs for permute */
  3   243 	       3 total_primary_key_cost float bin,
  3   244 	       3 access_cost      float bin,
  3   245 	       3 access_overhead  float bin,
  3   246 	       3 us_access_cost   float bin,
  3   247 	       3 os_access_cost   float bin,
  3   248 	     2 dbc_uid	      bit (36) aligned,	/* uid of the segment containing the dbc structure */
  3   249 	     2 concurrency_on     bit (1) unal,		/* "1"b implies dmfile concurrency is being used */
  3   250 	     2 rollback_on	      bit (1) unal;		/* "1"b iomplies before journaling is to be done */
  3   251 
  3   252 /* END mrds_dbcb.incl.pl1 */
  3   253 
  3   254 
      266 
      267 
  4     1 /* BEGIN mdbm_rm_rel_info.incl.pl1 -- jaw, 11/16/78 */
  4     2 
  4     3 /* WARNING
  4     4*          If the rm_rel_info structure is changed then the mrds_data_
  4     5*          item saved_res_version MUST be incremented to invalidate all
  4     6*          existing saved resultants
  4     7**/
  4     8 
  4     9 /* HISTORY:
  4    10*
  4    11*   Modified by Jim Gray - - May 1980, to  include  model  number  of
  4    12*   attributes,   and   varying  attributes,  so  that  partial  view
  4    13*   submodels will have the  info  needed  to  properly  set  up  the
  4    14*   varying length array headers in the tuple structure.
  4    15*
  4    16*   Modified  by  Jim  Gray  -  -  80-11-06,  to  rename   r_perm   =
  4    17*   status_perm,     s_perm    =    append_tuple_perm,    d_perm    =
  4    18*   delete_tuple_perm, and make m_perm = unused_perm.
  4    19*
  4    20*   81-01-23 Jim Gray : added bit to indicate whether the last  model
  4    21*   view attribute was varying character or bit, since a partial view
  4    22*   submodel will not have this information in the resultant, and  it
  4    23*   is  needed for determining the new tuple length in mus_mod_ubtup,
  4    24*   since with exact length storage  of  varying  length  attributes,
  4    25*   each  tuple  can  be  a  different  length,  which is can only be
  4    26*   determined by examining the tuple itself.
  4    27*
  4    28*   81-01-29 Jim Gray : added curent  tuple  count,  to  provide  for
  4    29*   interface  to  allow  temp  rel  population  to  be known, and to
  4    30*   provide a more efficient means of finding an approx. current perm
  4    31*   relation population.
  4    32*
  4    33*   81-05-28 Jim Gray  :  removed  structure  elements  referring  to
  4    34*   blocked  files, foreign keys, and ids procedures. Also set number
  4    35*   of files per rel to a constant of 1.
  4    36*
  4    37*   81-05-28 Jim Gray : combined data  from  rm_file_info  into  this
  4    38*   structure so that only one structure per relation is needed.
  4    39*
  4    40*   81-07-02 Jim Gray : added total_key and dup_key vfile  statistics
  4    41*   counts.   Also  added  number  of  operations  count  since  last
  4    42*   statistics update, and a time  since  the  statistics  were  last
  4    43*   updated.
  4    44*
  4    45*   81-07-06 Jim Gray :  added  a  per  selection  expression  update
  4    46*   identifier so that small relations could be updated on a per S.E.
  4    47*   basis
  4    48*
  4    49*   82-04-21 R. Lackey : Added number_selected (ri_niocbs_init refer (rm_rel_info.niocbs)) fixed bin (35)
  4    50*   to end of structure   TR 12205 (Suggestion).
  4    51*   
  4    52*   82-08-19 D. Woodka :  Removed  rm_rel_info.max_data_len  field for
  4    53*   the DMS conversion. 
  4    54*
  4    55*   82-08-30 Davids: added the opening_id element and removed the iocb
  4    56*   array and the niocb element for DMS conversion. Also removed the
  4    57*   number_selected array (and ri_niocbs_init) since subsets are not
  4    58*   going to be used.
  4    59*
  4    60*   82-09-20 Mike Kubicar : changed rm_rel_info.rel_id to bit (36) aligned
  4    61*   so that it can be used with relation manager.  Also added
  4    62*   rm_rel_info.primary_key_index_id for relation manager.
  4    63*
  4    64*   82-09-22 Mike Kubicar : Removed the, now useless, fields var_attr_ptrs,
  4    65*   nvar_atts, model_nvar_atts.
  4    66*
  4    67*   82-09-24 Davids: Removed current_key_count and current_dup_key_count
  4    68*   since the duplicate key count for each secondary index is now being
  4    69*   kept in the attr_info structure and key_count was only needed to
  4    70*   help in calculating the average selectivity of each index which
  4    71*   can now be gotten directly from each index's dup key count. Also
  4    72*   removed the file_id element since it is no longer needed for
  4    73*   anything.
  4    74*
  4    75*   82-09-27 Mike Kubicar : removed file_id_len for the same reason file_id
  4    76*   was removed.
  4    77*
  4    78*   82-11-05 Mike Kubicar : added a pointer to an id_list structure to be
  4    79*   used when retrieving tuples from this relation.
  4    80*
  4    81*   83-04-06 Davids: Added the scope_flags_ptr which points to the scope_flags structure
  4    82*   for the relation. Note that this structure is part of the resultant NOT
  4    83*   part of the db.control structure. The scopes are duplicated in the resultant
  4    84*   to reduce contention for the db.control structure. Note also that the pointer
  4    85*   will always point to a scope_flags structure even if no scopes have been
  4    86*   set on the relation, the structure is allocated when the db is opened.
  4    87**/
  4    88 
  4    89 
  4    90 /* DESCRIPTION:
  4    91*
  4    92*   This structure is allocated in the area part of the structure  in
  4    93*   mdbm_rm_db_info.incl.pl1  as  part of the resultant model created
  4    94*   at open  time  for  a  database.  There  will  be  one  of  these
  4    95*   rm_rel_info   structures  for  each  relation  appearing  in  the
  4    96*   database view (there may be less than the total in  the  database
  4    97*   for  a  submodel  openings).  There  will  also  be  one for each
  4    98*   temporary relation currently defined for that opening.
  4    99*
  4   100*   The structure in mdbm_rm_rel_array.incl.pl1 contains pointers  to
  4   101*   all  rm_rel_info  structures  allocated. It is used for searching
  4   102*   for the appropriate  structure.  This  array  is  pointed  to  by
  4   103*   rm_db_info. There are two arrays, one for perm rels, one for temp
  4   104*   rels.
  4   105*
  4   106*   The      rm_rel_info      structure      points      to       the
  4   107*   mdbm_rm_attr_info.incl.pl1  structures,  one  for  each attribute
  4   108*   appearing in this view of the relation. Each  of  these  in  turn
  4   109*   point  to a mdbm_rm_domain_info.incl.pl1 structure for the domain
  4   110*   info for each attr.
  4   111*
  4   112*   Most of the other information here deals with  specifics  of  the
  4   113*   relation's  logical  definition,  such as key and secondary index
  4   114*   attribute inidicators, security permissions, and  tuple  physical
  4   115*   construction details.
  4   116*
  4   117**/
  4   118 
  4   119      dcl	   1 rm_rel_info	      aligned based (rmri_ptr), /* relation information */
  4   120 	     2 name	      char (32),		/* from submodel */
  4   121 	     2 model_name	      char (30),		/* from model */
  4   122 	     2 rel_id	      bit (36) aligned,	/* unique id. */
  4   123 	     2 retrieve	      bit (1) unal,		/* operations allowed by this view */
  4   124 	     2 modify	      bit (1) unal,
  4   125 	     2 delete	      bit (1) unal,
  4   126 	     2 store	      bit (1) unal,
  4   127 	     2 total_key	      bit (1) unal,		/* on if view includes full primary key */
  4   128 	     2 indexed	      bit (1) unal,		/* on if exists sec. index */
  4   129 	     2 mdbm_secured	      bit (1) unal,		/* on if mdbm must check security */
  4   130 	     2 status_perm	      bit (1) unal,		/* if user has status. perm. */
  4   131 	     2 append_tuple_perm  bit (1) unal,		/* if user has store perm. */
  4   132 	     2 delete_tuple_perm  bit (1) unal,		/* if user has del. perm. */
  4   133 	     2 unused_perm	      bit (1) unal,		/* for future use. */
  4   134 	     2 last_model_attr_char_var bit (1) unal,	/* on => last model varying attr is char */
  4   135 	     2 reserved	      bit (24) unal,	/* for future use */
  4   136 	     2 num_attr	      fixed bin,		/* total no. of attr. in rel. */
  4   137 	     2 model_num_attr     fixed bin,		/* total attrs in model relation */
  4   138 	     2 nkey_attr	      fixed bin,		/* no. of key attr. */
  4   139 	     2 model_nkey_attr    fixed bin,		/* total number of keys in model */
  4   140 	     2 primary_key_index_id bit (36) aligned,     /* Index id of relation's primary key */
  4   141 	     2 nsec_inds	      fixed bin,		/* no. sec. indexes */
  4   142 	     2 max_key_len	      fixed bin (35),	/* max length (chars) of primary key */
  4   143 	     2 current_tuple_population fixed bin (35),	/* last known total  tuple count for this relation */
  4   144 	     2 last_statistics_update_count fixed bin,	/* number of operations's, since this rels stats were updated */
  4   145 	     2 last_statistics_update_time fixed bin (71),/* last time this rels stats were updated */
  4   146 	     2 last_statistics_update_s_e_ref_num fixed bin (35), /* last select expr ID that updated this rels stats */
  4   147 	     2 ready_mode	      fixed bin,		/* 1 => r, 2 => mr, 3 => u, 4 => l, 5 => sr, 6 => su */
  4   148 	     2 file_type	      fixed bin,		/* 1 => unblocked, 2 => blocked, 3 => temporary */
  4   149 	     2 tuple_id_len	      fixed bin,		/* no. bits in local tuple id */
  4   150 	     2 opening_id	      bit (36) aligned,	/* relation manager opening is */
  4   151 	     2 key_attr_ptrs      (nkey_attr_init refer (rm_rel_info.nkey_attr)) ptr, /* ptrs to key attr. */
  4   152 	     2 attr_ptrs	      (natts_init refer (rm_rel_info.num_attr)) ptr, /* ptrs to all attr. */
  4   153 	     2 id_list_ptr        ptr,		/* Id list for retrieves from the relation */
  4   154                2 scope_flags_ptr    ptr;                    /* pointer to the scope_flags structure for the rel */
  4   155 
  4   156      dcl	   rmri_ptr	      ptr;
  4   157      dcl	   (nkey_attr_init,
  4   158 	   natts_init,
  4   159 	   nvar_atts_init)	      fixed bin;
  4   160 
  4   161 /* END mdbm_rm_rel_info.incl.pl1 */
  4   162 
  4   163 
      268 
      269 
  5     1 /* BEGIN mdbm_rm_rel_array.incl.pl1 -- jaw, 8/9/78 */
  5     2 
  5     3 /* WARNING
  5     4*          If the rm_rel_array structure is changed then the mrds_data_
  5     5*          item saved_res_version MUST be incremented to invalidate all
  5     6*          existing saved resultants
  5     7**/
  5     8 
  5     9 /* HISTORY:
  5    10*
  5    11*   81-05-28 Jim Gray : added  model_name  and  file_id  as  part  of
  5    12*   combining   funtions   of   file_array  and  rel_array  into  one
  5    13*   structure. This will only allow 1 relation per file model now.
  5    14*   Also changed structure to allow more efficient searching
  5    15*   via and index builtin, rather than a programmed loop.
  5    16*   Search is now I = index(string(rm_rel_array.name), "!" || in_name)
  5    17*   with I = ((I - 1) / 33) + 1 to convert from a char to array index.
  5    18*
  5    19**/
  5    20 
  5    21 
  5    22 /* this structure is allocated in the static are of the structure
  5    23*   in  mdbm_rm_db_info.incl.pl1,  the secure portion of the database
  5    24*   resultant  model  upon  opening  the  database.  two  copies  are
  5    25*   allocated,  one for temporary relations, initially empty, and one
  5    26*   for relations known to the opener, which has a length  sufficient
  5    27*   for  all  relations known to the user, but whose names, etc. will
  5    28*   not be filled  in  until  the  file  containing  that  particular
  5    29*   relation  is readied. the rm_db_info structure contains a pointer
  5    30*   to the rel_arrays, and the array entries, when  "readied",  point
  5    31*   to  the  mdbm_rm_rel_info.incl.pl1  structures  containing  model
  5    32*   information about the relation, it's attributes, etc. */
  5    33 
  5    34 dcl 1 rm_rel_array aligned based (rmra_ptr),		/* array of open relations */
  5    35     2 num_rels fixed bin,				/* no. rels in db. */
  5    36     2 name (1:rm_num_rels_init refer (rm_rel_array.num_rels)) unal,
  5    37       3 mark char (1) unal,				/* separator character = "!" */
  5    38       3 submodel char (32) unal,			/* name of relation is submodel view, model opening => model name */
  5    39     2 rel_data (rm_num_rels_init refer (rm_rel_array.num_rels)),
  5    40       3 model_name char (30),				/* name of relation in model */
  5    41       3 ri_ptr ptr unal ;				/* pointer to rm_rel_info */
  5    42 
  5    43 dcl  rmra_ptr ptr;
  5    44 dcl  rm_num_rels_init fixed bin;
  5    45 
  5    46 /* END mdbm_rm_rel_array.incl.pl1 */
  5    47 
  5    48 
      270 
      271 
  6     1 /* BEGIN mdbm_rm_db_info.incl.pl1 -- jaw, 11/7/78 */
  6     2 
  6     3 
  6     4 
  6     5 /****^  HISTORY COMMENTS:
  6     6*  1) change(86-08-13,Hergert),, approve(88-06-28,MCR7903),
  6     7*     audit(88-06-28,Dupuis), install(88-08-01,MR12.2-1073):
  6     8*     Removed change of 84-11-02. i.e. replaced even_word_pad.
  6     9*                                                   END HISTORY COMMENTS */
  6    10 
  6    11 
  6    12 /* WARNING
  6    13*          If the rm_db_info structure is changed then the mrds_data_
  6    14*          item saved_res_version MUST be incremented to invalidate all
  6    15*          existing saved resultants
  6    16**/
  6    17 
  6    18 /*  DESCRIPTION:  This  structure   is   based   on   a   segment
  6    19*   {unique_name}.mrds.rdbi that represents the secure portion of the
  6    20*   resultant model that is created partially at database open  time,
  6    21*   (the rm_file_array, and rm_rel_array) and partially at ready_file
  6    22*   time,    (the    rm_file_info,     rm_rel_info,     rm_attr_info,
  6    23*   rm_domain_info, rm_plink_info and rm_clink_info). it's purpose is
  6    24*   to  provide  an  efficient  means  of  accessing  database  model
  6    25*   information, as seen from the possibly submodel view of the user,
  6    26*   and his current state of "files readied". it is the  secure  part
  6    27*   because  it  contains  the  model  information  which needs to be
  6    28*   protected  from  general  knowledge,  and   this   segment   will
  6    29*   eventually  be  capable  of  being in a lower ring. the structure
  6    30*   itself points to four arrays that are  allocated  in  it's  area,
  6    31*   that  in  turn point to the other structures mentions above, also
  6    32*   allocated in  the  rm_db_info.static_area.  the  arrays  are  the
  6    33*   rm_file_array,  and  rm_rel_array. their are a pair for temporary
  6    34*   relations,  initially  empty,  and  a  pair  for   normal   model
  6    35*   files/relations.  the  normal  rm_file_array  is initialized to a
  6    36*   list of all known file names, the rm_rel_array only gets relation
  6    37*   names   as   files  are  readied.  the  rm_file_array  points  to
  6    38*   rm_file_infos for each file (see mdbm_rm_file_info.incl.pl1)  and
  6    39*   the   rm_rel_array   points  to  rm_rel_info  for  each  relation
  6    40*   "readied". (see mdbm_rm_rel_info.incl.pl1). (the  arrays  are  in
  6    41*   mdbm_rm_file_array.incl.pl1  and mdbm_rm_rel_array.incl.pl1). the
  6    42*   file infos point to contained rel infos, the rel infos  point  to
  6    43*   contained  attr  infos,  and  those in turn to domain infos. (see
  6    44*   mdbm_rm_attr_info.incl.pl1   and    mdbm_rm_domain_info.incl.pl1)
  6    45*   foreign     keys    are    represented    by    the    structures
  6    46*   mdbm_rm_plink_info.incl.pl1, and mdbm_rm_clink_info.incl.pl1. the
  6    47*   pathnames  of the model and submodel, if any, are also maintained
  6    48*   in rm_db_info. the pointer to this rm_db_info segment is obtained
  6    49*   from  the  dbcb  segment tructure(see mrds_dbcb.incl.pl1) see the
  6    50*   individual include files for  further  organization  information,
  6    51*   and particular data structures.
  6    52*
  6    53*   HISTORY:
  6    54*
  6    55*   80-02-01 Jim Gray : Modified to put area on even  word  boundary,
  6    56*   so that define_area_ could be used to make it an extensible area
  6    57*
  6    58*   81-1-9 Jim  Gray  :  added  like  reference  to  make  the  phony
  6    59*   resultant in mu_database_index easier to keep, since no reference
  6    60*   to the area is needed.
  6    61*
  6    62*   81-1-12 Jim Gray : added version of submodel used in  opening  to
  6    63*   resultant.
  6    64*
  6    65*   81-05-13 Rickie E. Brinegar: added the administrator bit  to  the
  6    66*   structure.
  6    67*
  6    68*   81-05-28 Jim Gray : removed pointers to file_arrays,  since  they
  6    69*   are  now  combined  into  the rel_array. Removed the control file
  6    70*   info which was unused. Added pointer  to  head  of  domain  list,
  6    71*   which is to be used to insure only one copy of each domain info.
  6    72*
  6    73*   83-05-19 Davids: Added the  saved_res_version element.
  6    74*
  6    75*   84-11-02 Thanh Nguyen:   Replaced  the  even_word_pad   by   the 
  6    76*   ref_name_proc_ptr  to point  to list  of reference  name of  the
  6    77*   check, encode, or decode proc.
  6    78*
  6    79*   CAUTION: The structure entries from db_version to sm_path  should
  6    80*   not  be moved or have their declarations changed because they are
  6    81*   used in the handling of old version database openings.
  6    82*
  6    83*
  6    84**/
  6    85 
  6    86      dcl	   1 rm_db_info	      aligned based (rdbi_ptr), /* data base info, located at base of res. dm. seg. */
  6    87 	     2 data	      like rm_db_info_data,
  6    88 	     2 static_area	      area (sys_info$max_seg_size - fixed (rel (addr (rm_db_info.static_area))));
  6    89 
  6    90      dcl	   rdbi_ptr	      ptr;
  6    91 
  6    92      declare 1 rm_db_info_data      based,		/* separate declaration of info, so others can use
  6    93*						   like reference to it without getting the area as well */
  6    94 	     2 db_version	      fixed bin,		/* version no. of db */
  6    95 	     2 sm_version	      fixed bin unal,	/* version of submodel used unal, 0 if model opening */
  6    96 	     2 val_level	      fixed bin unal,	/* validation level for this db. */
  6    97 	     2 db_path	      char (168),		/* abs. path of db. */
  6    98 	     2 sm_path	      char (168),		/* path of submodel or model */
  6    99 	     2 mdbm_secured	      bit (1) unal,		/* ON => database is secured */
  6   100 	     2 administrator      bit (1) unal,		/* ON => user is an administrator */
  6   101 	     2 pad	      bit (34) unal,	/* for future use */
  6   102 	     2 saved_res_version  char (8),		/* version of the saved resultant in the 
  6   103*                                                               dbcb and rdbi segments in the db dir */
  6   104 	     2 domain_list_ptr    ptr,		/* pointer to head of list of domain_info's */
  6   105 	     2 ra_ptr	      ptr,		/* pointer to rel. array */
  6   106 	     2 tra_ptr	      ptr,		/* to rel array for temp rels */
  6   107 	     2 even_word_pad      fixed bin (71) aligned; /* padding to put area on even word boundary */
  6   108 
  6   109 /* END mdbm_rm_db_info.incl.pl1 */
  6   110 
  6   111 
      272 
      273 
  7     1 /* BEGIN INCLUDE FILE area_info.incl.pl1  12/75 */
  7     2 
  7     3 dcl  area_info_version_1 fixed bin static init (1) options (constant);
  7     4 
  7     5 dcl  area_infop ptr;
  7     6 
  7     7 dcl 1 area_info aligned based (area_infop),
  7     8     2 version fixed bin,				/* version number for this structure is 1 */
  7     9     2 control aligned like area_control,		/* control bits for the area */
  7    10     2 owner char (32) unal,				/* creator of the area */
  7    11     2 n_components fixed bin,				/* number of components in the area (returned only) */
  7    12     2 size fixed bin (18),				/* size of the area in words */
  7    13     2 version_of_area fixed bin,			/* version of area (returned only) */
  7    14     2 areap ptr,					/* pointer to the area (first component on multisegment area) */
  7    15     2 allocated_blocks fixed bin,			/* number of blocks allocated */
  7    16     2 free_blocks fixed bin,				/* number of free blocks not in virgin */
  7    17     2 allocated_words fixed bin (30),			/* number of words allocated in the area */
  7    18     2 free_words fixed bin (30);			/* number of words free in area not in virgin */
  7    19 
  7    20 dcl 1 area_control aligned based,
  7    21     2 extend bit (1) unal,				/* says area is extensible */
  7    22     2 zero_on_alloc bit (1) unal,			/* says block gets zerod at allocation time */
  7    23     2 zero_on_free bit (1) unal,			/* says block gets zerod at free time */
  7    24     2 dont_free bit (1) unal,			/* debugging aid, turns off free requests */
  7    25     2 no_freeing bit (1) unal,			/* for allocation method without freeing */
  7    26     2 system bit (1) unal,				/* says area is managed by system */
  7    27     2 pad bit (30) unal;
  7    28 
  7    29 /* END INCLUDE FILE area_info.incl.pl1 */
      274 
      275 
      276      end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    08/01/88  1314.0  mrds_dsl_get_relation_list.pl1    >special_ldd>install>MR12.2-1073>mrds_dsl_get_relation_list.pl1
262          1    10/14/83  1608.8  mrds_relation_list.incl.pl1       >ldd>include>mrds_relation_list.incl.pl1
264          2    10/14/83  1608.8  mrds_authorization.incl.pl1       >ldd>include>mrds_authorization.incl.pl1
266          3    08/01/88  1300.0  mrds_dbcb.incl.pl1                >special_ldd>install>MR12.2-1073>mrds_dbcb.incl.pl1
268          4    10/14/83  1609.1  mdbm_rm_rel_info.incl.pl1         >ldd>include>mdbm_rm_rel_info.incl.pl1
270          5    10/14/83  1609.1  mdbm_rm_rel_array.incl.pl1        >ldd>include>mdbm_rm_rel_array.incl.pl1
272          6    08/01/88  1310.7  mdbm_rm_db_info.incl.pl1          >special_ldd>install>MR12.2-1073>mdbm_rm_db_info.incl.pl1
274          7    06/11/76  1043.4  area_info.incl.pl1                >ldd>include>area_info.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
access_info_version       1            based           fixed bin(17,0)          level 2 dcl 1-45 set ref 114* 116* 181
addr                                                   builtin function         dcl 259 ref 76 76 120 120
administrator             1            based           bit(1)                   level 2 packed packed unaligned dcl 2-22 set ref 156
                                                                                  162*
append_tuple_perm        21(08)        based           bit(1)                   level 2 packed packed unaligned dcl 4-119 ref 193
area                            000100 stack reference condition                dcl 233 ref 97 107
area_control                           based           structure                level 1 dcl 7-20
area_info                              based           structure                level 1 dcl 7-7
area_info_                      000010 constant        entry                    external dcl 234 ref 76
area_ptr                               parameter       pointer                  dcl 235 ref 10 10 69 74 106 223
areap                    16     002126 automatic       pointer                  level 2 dcl 260 set ref 74*
clean_up_condition              000106 automatic       bit(1)                   packed unaligned dcl 236 set ref 53* 56* 219
cleanup                         000110 stack reference condition                dcl 237 ref 55
control                   1     002126 automatic       structure                level 2 dcl 260
data                                   based           structure                level 2 in structure "rm_db_info" dcl 6-86
                                                                                  in procedure "get_relation_list"
data                                   based           structure                level 2 in structure "dbcb" dcl 3-142 in procedure
                                                                                  "get_relation_list"
db_index                               parameter       fixed bin(35,0)          dcl 238 set ref 10 10 62*
db_path                   2            based           char(168)                level 3 dcl 6-86 ref 120 120 162 162
db_version                             based           fixed bin(17,0)          level 3 dcl 6-86 ref 91
dbcb                                   based           structure                level 1 dcl 3-142
dbcb_data                              based           structure                level 1 unaligned dcl 3-148
dbcb_ptr                        002156 automatic       pointer                  dcl 3-146 set ref 62* 63 90 112
delete_tuple_perm        21(09)        based           bit(1)                   level 2 packed packed unaligned dcl 4-119 ref 196
dsm_sw                  106(08)        based           bit(1)                   level 3 packed packed unaligned dcl 3-142 ref 112
effective_access         42            based           varying char(8)          array level 3 dcl 1-45 set ref 181* 206* 208*
empty                                                  builtin function         dcl 259 ref 244
error_code                             parameter       fixed bin(35,0)          dcl 239 set ref 10 10 51* 63* 69* 76* 77 78* 84* 91*
                                                                                  98* 120* 123 127 162* 166 219
error_table_$area_too_small     000012 external static fixed bin(35,0)          dcl 240 ref 98
error_table_$badcall            000014 external static fixed bin(35,0)          dcl 241 ref 69
error_table_$unimplemented_version
                                000016 external static fixed bin(35,0)          dcl 242 ref 84
i                               000116 automatic       fixed bin(17,0)          dcl 243 set ref 127* 151 152 156 158 179 181 181 181
                                                                                  202 206 208
local_area                      000120 automatic       area(1024)               dcl 244 set ref 120 120 244*
mdbm_secured            126            based           bit(1)                   level 3 packed packed unaligned dcl 6-86 ref 114 156
model_name                4            based           char(32)                 array level 3 in structure "mrds_relation_list"
                                                                                  dcl 1-45 in procedure "get_relation_list" set ref
                                                                                  156* 158*
model_name               10            based           char(30)                 level 2 in structure "rm_rel_info" dcl 4-119
                                                                                  in procedure "get_relation_list" ref 158 162 162
mrds_access              37            based           varying char(8)          array level 3 dcl 1-45 set ref 181* 202*
mrds_access_string              002120 automatic       varying char(4)          dcl 248 set ref 190* 193* 193 196* 196 199 199* 202
                                                                                  206
mrds_authorization                     based           structure                level 1 dcl 2-22
mrds_authorization_ptr          002154 automatic       pointer                  dcl 2-29 set ref 120* 156 162
mrds_authorization_structure_version
                                000003 constant        fixed bin(17,0)          initial dcl 2-31 set ref 120*
mrds_dm_authorization$get_user_class
                                000024 constant        entry                    external dcl 249 ref 120
mrds_error_$invalid_db_index    000026 external static fixed bin(35,0)          dcl 250 ref 63
mrds_error_$not_freeing_area    000030 external static fixed bin(35,0)          dcl 251 ref 78
mrds_error_$version_not_supported
                                000032 external static fixed bin(35,0)          dcl 252 ref 91
mrds_relation_list                     based           structure                level 1 dcl 1-45 set ref 106 109* 223
mrds_relation_list_num_rels_init
                                002152 automatic       fixed bin(17,0)          dcl 1-65 set ref 105* 106 106 111 127
mrds_relation_list_ptr                 parameter       pointer                  dcl 1-67 set ref 10 10 52* 106* 109 110 111 112 114
                                                                                  116 152 156 158 179 181 181 181 181 202 206 208
                                                                                  221 223 225*
mrds_relation_list_structure_version   constant        fixed bin(17,0)          initial dcl 1-69 ref 84 110
mu_database_index$get_resultant_model_pointer
                                000022 constant        entry                    external dcl 247 ref 62
mu_get_relation_acl             000020 constant        entry                    external dcl 245 ref 162
multics_access_string           002122 automatic       varying char(4)          dcl 253 set ref 168* 170* 170 173* 173 176 176* 179
my_area_info                    002126 automatic       structure                level 1 unaligned dcl 260 set ref 72* 76 76
name                                   based           char(32)                 level 2 dcl 4-119 ref 152
no_freeing                1(04) 002126 automatic       bit(1)                   level 3 packed packed unaligned dcl 260 set ref 78
null                                                   builtin function         dcl 259 ref 52 63 69 221 225
num_rels                               based           fixed bin(17,0)          level 2 dcl 5-34 ref 105 151
num_rels_in_view          2            based           fixed bin(17,0)          level 2 dcl 1-45 set ref 106* 109 111* 223
ra_ptr                  134            based           pointer                  level 3 dcl 6-86 ref 104
rdbi_ptr                               based           pointer                  level 3 in structure "dbcb" dcl 3-142 in procedure
                                                                                  "get_relation_list" ref 90
rdbi_ptr                        002164 automatic       pointer                  dcl 6-90 in procedure "get_relation_list" set ref
                                                                                  90* 91 104 114 120 120 156 162 162
read_acl                        002124 automatic       bit(1)                   packed unaligned dcl 254 set ref 162* 170
rel_data                               based           structure                array level 2 dcl 5-34
relation                  4            based           structure                array level 2 dcl 1-45
ri_ptr                                 based           pointer                  array level 3 packed packed unaligned dcl 5-34 ref
                                                                                  151
rm_db_info                             based           structure                level 1 dcl 6-86
rm_db_info_data                        based           structure                level 1 unaligned dcl 6-92
rm_rel_array                           based           structure                level 1 dcl 5-34
rm_rel_info                            based           structure                level 1 dcl 4-119
rmra_ptr                        002162 automatic       pointer                  dcl 5-43 set ref 104* 105 151
rmri_ptr                        002160 automatic       pointer                  dcl 4-156 set ref 151* 152 158 162 162 193 196
rtrim                                                  builtin function         dcl 259 ref 120 120 162 162 162 162
structure_version                      parameter       fixed bin(17,0)          dcl 255 ref 10 10 84
submodel_name            14            based           char(64)                 array level 3 dcl 1-45 set ref 152*
submodel_view             3            based           bit(1)                   level 2 packed packed unaligned dcl 1-45 set ref
                                                                                  112*
system_acl               34            based           varying char(8)          array level 3 dcl 1-45 set ref 179* 181
unspec                                                 builtin function         dcl 259 set ref 72* 109*
users_area                             based           area                     dcl 257 ref 106 223
version                                based           fixed bin(17,0)          level 2 in structure "mrds_relation_list" dcl 1-45
                                                                                  in procedure "get_relation_list" set ref 110*
version                         002126 automatic       fixed bin(17,0)          level 2 in structure "my_area_info" dcl 260
                                                                                  in procedure "get_relation_list" set ref 73*
write_acl                       002125 automatic       bit(1)                   packed unaligned dcl 258 set ref 162* 173 206

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
area_info_version_1                    internal static fixed bin(17,0)          initial dcl 7-3
area_infop                             automatic       pointer                  dcl 7-5
fixed                                                  builtin function         dcl 259
natts_init                             automatic       fixed bin(17,0)          dcl 4-157
nkey_attr_init                         automatic       fixed bin(17,0)          dcl 4-157
nvar_atts_init                         automatic       fixed bin(17,0)          dcl 4-157
rel                                                    builtin function         dcl 259
rm_num_rels_init                       automatic       fixed bin(17,0)          dcl 5-44
sys_info$max_seg_size                  external static fixed bin(35,0)          dcl 256

NAMES DECLARED BY EXPLICIT CONTEXT.
clean_up                        000764 constant        entry                    internal dcl 214 ref 57 142
get_relation_data               000414 constant        entry                    internal dcl 147 ref 129
get_relation_list               000027 constant        entry                    external dcl 10
mrds_dsl_get_relation_list      000040 constant        entry                    external dcl 10
skip_allocate                   000413 constant        label                    dcl 144 ref 99

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1244        1300    1024        1254
Length      1652    1024        34         335     220           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
get_relation_list                  1220 external procedure  is an external procedure.  
on unit on line 55                   64 on unit               
on unit on line 97                   64 on unit               
get_relation_data                       internal procedure  shares stack frame of external procedure get_relation_list.  
clean_up                             64 internal procedure  is called by several nonquick procedures.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
get_relation_list        000106 clean_up_condition          get_relation_list
                         000116 i                           get_relation_list
                         000120 local_area                  get_relation_list
                         002120 mrds_access_string          get_relation_list
                         002122 multics_access_string       get_relation_list
                         002124 read_acl                    get_relation_list
                         002125 write_acl                   get_relation_list
                         002126 my_area_info                get_relation_list
                         002152 mrds_relation_list_num_rels_init
                                                            get_relation_list
                         002154 mrds_authorization_ptr      get_relation_list
                         002156 dbcb_ptr                    get_relation_list
                         002160 rmri_ptr                    get_relation_list
                         002162 rmra_ptr                    get_relation_list
                         002164 rdbi_ptr                    get_relation_list

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_char_temp     call_ext_out_desc   call_ext_out        call_int_this       call_int_other      return_mac
tra_ext_1           enable_op           shorten_stack       ext_entry           int_entry           op_alloc_
op_freen_           op_empty_

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
area_info_                    mrds_dm_authorization$get_user_class
mu_database_index$get_resultant_model_pointer               mu_get_relation_acl

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$area_too_small   error_table_$badcall          error_table_$unimplemented_version
mrds_error_$invalid_db_index  mrds_error_$not_freeing_area  mrds_error_$version_not_supported




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
    244 000015        10 000022        51 000046        52 000050        53 000052        55 000053        56 000067
     57 000072        58 000077        62 000100        63 000112        69 000123        72 000134        73 000137
     74 000141        76 000144        77 000157        78 000163        84 000172        90 000201        91 000204
     97 000213        98 000227        99 000233       104 000236       105 000241       106 000243       107 000257
    109 000260       110 000270       111 000272       112 000274       114 000302       116 000311       120 000313
    123 000365       127 000371       129 000404       131 000405       142 000407       144 000413       147 000414
    151 000415       152 000432       156 000443       158 000461       162 000466       166 000564       168 000570
    170 000571       173 000603       176 000615       179 000626       181 000641       188 000676       190 000677
    193 000700       196 000713       199 000725       202 000736       206 000744       208 000756       212 000762
    214 000763       219 000771       221 000777       223 001004       225 001013       231 001017


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
