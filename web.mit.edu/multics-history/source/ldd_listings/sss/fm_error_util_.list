	COMPILATION LISTING OF SEGMENT fm_error_util_
	Compiled by: Multics PL/I Compiler, Release 31a, of October 12, 1988
	Compiled at: Honeywell Bull, Phoenix AZ, SysM
	Compiled on: 10/24/88  1529.0 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 
        7 /* DESCRIPTION:
        8*
        9*          This modules is the file_manager_'s error handling facility.  It is
       10*     based on the signalling mechanism, much as sub_err_ is, but never allows
       11*     the signal to escape the control of the file_manager_.  Thus this is not
       12*     for reporting errors to file_manager_'s caller, but for reporting errors
       13*     between file_manager_ routines.
       14*     
       15*          There are three entries, as follows:
       16*     
       17*     $signal - is the entry called to report an error.  It has an entry
       18*     options(variable) calling sequence similar to a simplified sub_err_.
       19*     The usage is:
       20*          call fm_error_util_$signal 
       21*               (code, module_name, action_flags, severity, ioa_control_string
       22*                {, ioa_string_arg_1 ... , ioa_string_arg_N}
       23*     
       24*     This routine builds logs a message in the dm_system_log_ if the
       25*     action_flags indicate that it should, building the message from the
       26*     arguments given.  It also builds an fm_sub_error_info condition structure
       27*     and signals the fm_sub_error_ signal.
       28*     
       29*     $get_code - is called from an fm_sub_error_ condition handler to get the
       30*     status code stored in fm_sub_error_info.
       31*     
       32*     $get_message - is called from an fm_sub_error_ condition handler to get
       33*     the message stored in fm_sub_error_info.
       34**/
       35 
       36 /* HISTORY:
       37*
       38*Written by Matthew Pierret, 07/02/84.
       39*Modified:
       40*10/31/84 by Matthew Pierret:  Changed setting of p_module_name when a 
       41*            varying character argument is provided to check the current
       42*            length of the varying string instead of the length of the argument,
       43*            which is always max-length.
       44*            Answered audit comments by changing to use LOG_SV in
       45*            dm_log_sv_codes.incl.pl1 instead of the local constant 
       46*            DEFAULT_SEVERITY.
       47*03/05/85 by Steve Herbst: Replaced dm_log_ with dm_misc_util_$log.
       48**/
       49 
       50 /* format: style2,ind3 */
       51 
       52 fm_error_util_$signal:
       53    procedure ();
       54 
       55 
       56 /* START OF DECLARATIONS */
       57 /* Parameter */
       58 
       59       dcl	    p_status_code	       fixed bin (35);	/* is a standard system error code. */
       60       dcl	    p_module_name	       char (32);		/* name of the calling module */
       61       dcl	    p_fm_error_flags_string
       62 			       bit (36) aligned;	/* contains action flags */
       63       dcl	    p_severity	       fixed bin (17);	/* severity for call to dm_misc_util_$log */
       64 
       65 /* Automatic */
       66 
       67       dcl	    arg_list_ptr	       ptr init (null);
       68       dcl	    arg_size	       fixed bin (24);
       69       dcl	    arg_packed	       bit (1) aligned;
       70       dcl	    (arg_count, arg_type, arg_ndims, arg_scale)
       71 			       fixed bin;
       72 
       73       dcl	    code		       fixed bin (35) init (0);
       74       dcl	    char_varying_ptr       ptr init (null);
       75       dcl	    message_buffer_ptr     ptr init (null);
       76       dcl	    message_length	       fixed bin (21) init (-1);
       77 
       78       dcl	    (pad_sw, nl_sw)	       bit (1) aligned;
       79 
       80       dcl	    1 my_fm_sub_error_info aligned like fm_sub_error_info;
       81 
       82       dcl	    1 my_condition_info    aligned like condition_info;
       83 
       84 /* Based */
       85 
       86       dcl	    char_varying	       char (1000000) varying based;
       87       dcl	    char_nonvarying	       char (1000000) based;
       88       dcl	    fixed_bin_17	       fixed bin (17) based;
       89       dcl	    fixed_bin_35	       fixed bin (35) based;
       90       dcl	    bit_36_aligned	       bit (36) aligned based;
       91       dcl	    message_buffer	       char (sys_info$max_seg_size * 4) based (message_buffer_ptr);
       92       dcl	    message	       char (message_length) based (message_buffer_ptr);
       93 
       94 /* Builtin */
       95 
       96       dcl	    (addr, addwordno, length, max, min, null, size, string, substr, unspec)
       97 			       builtin;
       98 
       99 /* Condition */
      100 
      101       dcl	    cleanup	       condition;
      102 
      103 /* Constant */
      104 
      105       dcl	    myname	       init ("fm_error_util_") char (32) varying internal static options (constant);
      106       dcl	    (
      107 	    CODE_ARGUMENT_IDX      init (1),
      108 	    MODULE_NAME_ARGUMENT_IDX
      109 			       init (2),
      110 	    FM_ERROR_FLAGS_ARGUMENT_IDX
      111 			       init (3),
      112 	    SEVERITY_ARGUMENT_IDX  init (4),
      113 	    FIRST_MESSAGE_ARGUMENT_IDX
      114 			       init (5),
      115 	    NUMBER_OF_REQUIRED_ARGUMENTS
      116 			       init (4)
      117 	    )		       fixed bin internal static options (constant);
      118       dcl	    NON_ACTION_FLAGS_MASK  init ((18)"1"b || (18)"0"b) bit (36) aligned internal static options (constant);
      119 
      120 /* Entry */
      121 
      122       dcl	    cu_$arg_list_ptr       entry (ptr);
      123       dcl	    cu_$arg_count	       entry (fixed bin, fixed bin (35));
      124       dcl	    decode_descriptor_     entry (ptr, fixed bin, fixed bin, bit (1) aligned, fixed bin, fixed bin (24),
      125 			       fixed bin);
      126       dcl	    find_condition_info_   entry (ptr, ptr, fixed bin (35));
      127       dcl	    get_temp_segment_      entry (char (*), ptr, fixed bin (35));
      128       dcl	    ioa_$general_rs	       entry (ptr, fixed bin, fixed bin, char (*), fixed bin (21), bit (1) aligned,
      129 			       bit (1) aligned);
      130       dcl	    dm_misc_util_$log       entry () options (variable);
      131       dcl	    release_temp_segment_  entry (char (*), ptr, fixed bin (35));
      132       dcl	    signal_	       entry () options (variable);
      133       dcl	    sub_err_	       entry () options (variable);
      134 
      135 /* External */
      136 
      137       dcl	    dm_error_$programming_error
      138 			       fixed bin (35) ext;
      139       dcl	    error_table_$badcall   fixed bin (35) ext;
      140       dcl	    sys_info$max_seg_size  fixed bin (35) ext;
      141 
      142 /* END OF DECLARATIONS */
      143 
      144 /* format: ^indblkcom,indcomtxt */
      145 
      146 /* This "entry point" is actually the main procedure statement above.
      147*
      148*   signal:
      149*   entry ();
      150**/
      151 
      152 /**** Get pointer to this routine's arg_list */
      153 
      154       call cu_$arg_list_ptr (arg_list_ptr);
      155       call cu_$arg_count (arg_count, (0));
      156 
      157       if arg_count < NUMBER_OF_REQUIRED_ARGUMENTS
      158       then call sub_err_ (error_table_$badcall, myname, ACTION_CANT_RESTART, null, 0,
      159 	      "^/^10xThis entry requires at least ^d arguments.^/^10xOnly ^d arguments were received.",
      160 	      (NUMBER_OF_REQUIRED_ARGUMENTS), arg_count);
      161 
      162 /**** Set the parameter values. */
      163 
      164       p_status_code = arg_list_ptr -> arg_list.arg_ptrs (CODE_ARGUMENT_IDX) -> fixed_bin_35;
      165                    C§  (          \Ä  Ä2     CúÍ  ˇˇ  ˇˇ                 Cîä è@ ;#¥nœ£`^˝4ÄA .       ÄyÛ           Ä Á»            ü             0/~                  Cx  *y          \Ä:  Ä^     CpÄ  ˇˇ  ˇˇ                 Chä ˆ¿ ;#ßûœ£`^˝4ÄA .       ÄyÛ           Ä Á»            ü             0/~                  CL  +≥          \Äf  Ää     CDÄB  ˇˇ  ˇˇ                 C<ä å¿ ;#î˛œ£`^˝4ÄA .       ÄyÛ           Ä Á»            ü             0/~                  C   .g          \Äí  Ä∂     CÄn  ˇˇ  ˇˇ                 Cä ıÄ ;#á∆œ£`^˝4ÄA .       ÄyÛ           Ä Á»            ü             0/~                  BÙ  /Æ          \Äæ  Ä‚     BÏÄö  ˇˇ  ˇˇ                 B‰ä h  ;#y6œ£`^˝4ÄA .       ÄyÛ           Ä Á»            ü             0/~                  B»  1@          \ÄÍ  Ä     B¿Ä∆  ˇˇ  ˇˇ                 B∏ä –¿ ;#l˛œ£`^˝4ÄA .       ÄyÛ           Ä Á»            ü             0/~                  Bú  3á          \Ä  Ä:     BîÄÚ  ˇˇ  ˇˇ                 Båä ;¿ ;#_>œ£`^˝4ÄA .       ÄyÛ           Ä Á»            ü             0/~                  Bp  4ﬂ          \ÄB  Äf     BhÄ  ˇˇ  ˇˇ                 B`ä §Ä ;#Rœ£`^˝4ÄA .       ÄyÛ           Ä Á»            ü             0/~                  BD  6&          \Än  Äí     B<ÄJ  ˇˇ  ˇˇ                 B4ä @ ;#DÓœ£`^˝4ÄA .       ÄyÛ           Ä Á»            ü             0/~                  B  8â          \Äö  Äæ     BÄv  ˇˇ  ˇˇ                 Bä z  ;#7ñœ£`^˝4ÄA .       ÄyÛ           Ä Á»            ü             0/~                  BÏ  9‘          \Ä∆  ÄÍ     B‰Ä¢  ˇˇ  ˇˇ                 B‹ä Â@ ;#)Óœ£`^˝4ÄA .       ÄyÛ           Ä Á»            ü             0/~                  B¿  ;)          \ÄÚ  Å     B∏ÄŒ  ˇˇ  ˇˇ                 B∞ä L@ ;#.œ£`^˝4ÄA .       ÄyÛ           Ä Á»            ü             0/~                  Bî  =a          \Å  ÅB     BåÄ˙  ˇˇ  ˇˇ                 BÑä ∏@ ;#.œ£`^˝4ÄA .       ÄyÛ           Ä Á»            ü             0/~                  Bh  >¡          \ÅJ  Ån     B`Å&  ˇˇ  ˇˇ                 BXä "Ä ;#Üœ£`^˝4ÄA .       ÄyÛ           Ä Á»            ü             0/~                  B<  @          \Åv  Åö     B4ÅR  ˇˇ  ˇˇ                 B,ä ç@ ;"ÙŒœ£`^˝4ÄA .       ÄyÛ           Ä Á»            ü             0/~                  B  Bm          \Å¢  Å∆     BÅ~  ˇˇ  ˇˇ                 B ä (  ;"·6œ£`^˝4ÄA .       ÄyÛ           Ä Á»            ü             0/~                  A‰  D@          \ÅŒ  ÅÚ     A‹Å™  ˇˇ  ˇˇ                 A‘ä †Ä ;"“œ£`^˝4ÄA .       ÄyÛ           Ä Á»            ü             0/~                  A∏  F          \Å˙  Å     A∞Å÷  ˇˇ  ˇˇ                 A®ä 		  ;"≈÷œ£`^˝4ÄA .       ÄyÛ           Ä Á»            ü             0/~                  Aå  HL          \Å&  ÅJ     AÑÅ  ˇˇ  ˇˇ                 A|ä 	vÄ ;"∑Üœ£`^˝4ÄA .       ÄyÛ           Ä Á»            ü             0/~                  A`  I∂          \ÅR  Åv     AXÅ.  ˇˇ  ˇˇ                 APä 	‚¿ ;"™ûœ£`^˝4ÄA .       ÄyÛ           Ä Á»            ü             0/~                  A4  K          \Å~  Å¢     A,ÅZ  ˇˇ  ˇˇ                 A$ä 	N¿ ;"ú~œ£`^˝4ÄA .       ÄyÛ           Ä Á»            ü             0/~                  A  Mw          \Å™  ÅŒ     A ÅÜ  ˇˇ  ˇˇ                 A¯ä 	¿Ä ;"é&œ£`^˝4ÄA .       ÄyÛ           Ä Á»            ü             0/~                  A‹  O          \Å÷  Å˙     A‘Å≤  ˇˇ  ˇˇ                 AÃä 
,@ ;"Åœ£`^˝4ÄA .       ÄyÛ           Ä Á»            ü             0/~                  A∞  Pe          \Ç  Ç&    246 
      247       if message_buffer_ptr ^= null
      248       then call release_temp_segment_ ((myname), message_buffer_ptr, (0));
      249 
      250    end FINISH;
      251 
      252 get_code:
      253    entry () returns (fixed bin (35));
      254 
      255       fm_sub_error_info_ptr = GET_ERROR_INFO_PTR ();
      256 
      257       return (fm_sub_error_info.header.status_code);
      258 
      259 
      260 
      261 
      262 get_message:
      263    entry () returns (char (*));
      264 
      265       fm_sub_error_info_ptr = GET_ERROR_INFO_PTR ();
      266 
      267       message_length = fm_sub_error_info.message_length;
      268       message_buffer_ptr = fm_sub_error_info.message_ptr;
      269 
      270       return (message);
      271 
      272 
      273 GET_ERROR_INFO_PTR:
      274    proc () returns (ptr);
      275 
      276       dcl	    geip_code	       fixed bin (35) init (0);
      277 
      278       condition_info_ptr = addr (my_condition_info);
      279       call find_condition_info_ ((null), condition_info_ptr, geip_code);
      280       if geip_code ^= 0
      281       then call sub_err_ (geip_code, myname, ACTION_CANT_RESTART, null, 0, "^/Attempt to find condition info failed.");
      282       if condition_info_ptr = null
      283       then call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
      284 	      "^/^10xThis entry was invoked to handle a ^a condition,^/^10xbut no condition info exists.",
      285 	      FM_SUB_ERROR_CONDITION_NAME);
      286       if condition_info.condition_name ^= FM_SUB_ERROR_CONDITION_NAME
      287       then call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null (), 0,
      288 	      "^/^10xThis entry was invoked to handle a ^a condition,^/^10xbut the current condition is ^a.",
      289 	      FM_SUB_ERROR_CONDITION_NAME, condition_info.condition_name);
      290       if condition_info.info_ptr = null
      291       then call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null (), 0,
      292 	      "^/The condition_info.info_ptr variable is not set.");
      293 
      294       if condition_info.info_ptr -> fm_sub_error_info.header.version ^= FM_SUB_ERROR_INFO_VERSION_200
      295       then call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
      296 	      "^/Expected version ^d of the fm_sub_error_info structure; received ^d.", FM_SUB_ERROR_INFO_VERSION_200,
      297 	      condition_info.info_ptr -> fm_sub_error_info.header.version);
      298 
      299       return (condition_info.info_ptr);
      300 
      301 
      302    end GET_ERROR_INFO_PTR;
      303 
  1     1 /* ****** BEGIN INCLUDE FILE dm_fm_sub_error_info.incl.pl1 ******** */
  1     2 
  1     3 /* format: style2 */
  1     4 
  1     5 /* HISTORY:
  1     6*Written by Matthew Pierret, 07/02/83.
  1     7*Modified:
  1     8**/
  1     9 
  1    10      dcl	   1 fm_sub_error_info    aligned based (fm_sub_error_info_ptr),
  1    11 	     2 header	      like condition_info_header,
  1    12 	     2 module_name	      char (32) varying,
  1    13 	     2 message_ptr	      ptr,		/* Only used if header.info_string is too small */
  1    14 	     2 message_length     fixed bin (24);
  1    15 
  1    16      dcl	   fm_sub_error_info_ptr  ptr init (null);
  1    17      dcl	   FM_SUB_ERROR_INFO_VERSION_200
  1    18 			      fixed bin (35) init (200) internal static options (constant);
  1    19      dcl	   FM_SUB_ERROR_CONDITION_NAME
  1    20 			      init ("fm_sub_error_") char (32) varying internal static options (constant);
  1    21 
  1    22 /* ******** END INCLUDE FILE dm_fm_sub_error_info.incl.pl1 ******** */
      304 
      305 
  2     1 /* ******* BEGIN INCLUDE FILE dm_fm_sub_error_flags.incl.pl1 ******** */
  2     2 
  2     3 /* format: style2,ind3 */
  2     4 
  2     5 /* HISTORY:
  2     6*Written by Matthew Pierret, 07/02/83.
  2     7*Modified:
  2     8**/
  2     9 
  2    10      dcl	   1 fm_error_flags	      aligned based,
  2    11 	     2 action	      unal,
  2    12 	       3 cant_restart     bit (1) unal,
  2    13 	       3 default_restart  bit (1) unal,
  2    14 	       3 quiet_restart    bit (1) unal,
  2    15 	       3 support_signal   bit (1) unal,
  2    16 	       3 mbz_1	      bit (14) unal,
  2    17 	     2 log                unal,
  2    18 	       3 system	      bit (1) unal,
  2    19 	       3 mbz_2	      bit (1) unal,
  2    20 	     2 mbz_3	      bit (16) unal;
  2    21 
  2    22      dcl	   (
  2    23 	   FM_ACTION_CANT_RESTART init ("1000"b || (32)"0"b),
  2    24 	   FM_ACTION_CAN_RESTART  init ("0000"b || (32)"0"b),
  2    25 	   FM_ACTION_DEFAULT_RESTART
  2    26 			      init ("0100"b || (32)"0"b),
  2    27 	   FM_ACTION_QUIET_RESTART
  2    28 			      init ("0010"b || (32)"0"b),
  2    29 	   FM_ACTION_LOG	      init ((18)"0"b || "10"b || (16)"0"b)
  2    30 	   )		      bit (36) aligned internal static options (constant);
  2    31 
  2    32 /* ********* END INCLUDE FILE dm_fm_sub_error_flags.incl.pl1 ******** */
      306 
      307 
  3     1 /* BEGIN INCLUDE FILE ... condition_info.incl.pl1 */
  3     2 
  3     3 /* Structure for find_condition_info_.
  3     4*
  3     5*   Written 1-Mar-79 by M. N. Davidoff.
  3     6**/
  3     7 
  3     8 /* automatic */
  3     9 
  3    10      declare condition_info_ptr     pointer;
  3    11 
  3    12 /* based */
  3    13 
  3    14      declare 1 condition_info	      aligned based (condition_info_ptr),
  3    15 	     2 mc_ptr	      pointer,		/* pointer to machine conditions at fault time */
  3    16 	     2 version	      fixed binary,		/* Must be 1 */
  3    17 	     2 condition_name     char (32) varying,	/* name of condition */
  3    18 	     2 info_ptr	      pointer,		/* pointer to the condition data structure */
  3    19 	     2 wc_ptr	      pointer,		/* pointer to wall crossing machine conditions */
  3    20 	     2 loc_ptr	      pointer,		/* pointer to location where condition occured */
  3    21 	     2 flags	      unaligned,
  3    22 	       3 crawlout	      bit (1),		/* on if condition occured in lower ring */
  3    23 	       3 pad1	      bit (35),
  3    24 	     2 pad2	      bit (36),
  3    25 	     2 user_loc_ptr	      pointer,		/* ptr to most recent nonsupport loc before condition occurred */
  3    26 	     2 pad3	      (4) bit (36);
  3    27 
  3    28 /* internal static */
  3    29 
  3    30      declare condition_info_version_1
  3    31 			      fixed binary internal static options (constant) initial (1);
  3    32 
  3    33 /* END INCLUDE FILE ... condition_info.incl.pl1 */
      308 
      309 
  4     1 /* BEGIN INCLUDE FILE condition_info_header.incl.pl1 BIM 1981 */
  4     2 /* format: style2 */
  4     3 
  4     4      declare condition_info_header_ptr
  4     5 			      pointer;
  4     6      declare 1 condition_info_header
  4     7 			      aligned based (condition_info_header_ptr),
  4     8 	     2 length	      fixed bin,		/* length in words of this structure */
  4     9 	     2 version	      fixed bin,		/* version number of this structure */
  4    10 	     2 action_flags	      aligned,		/* tell handler how to proceed */
  4    11 	       3 cant_restart     bit (1) unaligned,	/* caller doesn't ever want to be returned to */
  4    12 	       3 default_restart  bit (1) unaligned,	/* caller can be returned to with no further action */
  4    13 	       3 quiet_restart    bit (1) unaligned,	/* return, and print no message */
  4    14 	       3 support_signal   bit (1) unaligned,	/* treat this signal as if the signalling procedure had the support bit set */
  4    15 						/* if the signalling procedure had the support bit set, do the same for its caller */
  4    16 	       3 pad	      bit (32) unaligned,
  4    17 	     2 info_string	      char (256) varying,	/* may contain printable message */
  4    18 	     2 status_code	      fixed bin (35);	/* if^=0, code interpretable by com_err_ */
  4    19 
  4    20 /* END INCLUDE FILE condition_info_header.incl.pl1 */
      310 
      311 
  5     1 /* BEGIN INCLUDE FILE sub_err_flags.incl.pl1 BIM 11/81 */
  5     2 /* format: style3 */
  5     3 
  5     4 /* These constants are to be used for the flags argument of sub_err_ */
  5     5 /* They are just "string (condition_info_header.action_flags)" */
  5     6 
  5     7 declare	(
  5     8 	ACTION_CAN_RESTART	init (""b),
  5     9 	ACTION_CANT_RESTART init ("1"b),
  5    10 	ACTION_DEFAULT_RESTART
  5    11 			init ("01"b),
  5    12 	ACTION_QUIET_RESTART
  5    13 			init ("001"b),
  5    14 	ACTION_SUPPORT_SIGNAL
  5    15 			init ("0001"b)
  5    16 	)		bit (36) aligned internal static options (constant);
  5    17 
  5    18 /* End include file */
      312 
      313 
  6     1 /* BEGIN INCLUDE FILE ... std_descriptor_types.incl.pl1 */
  6     2 
  6     3 
  6     4 /****^  HISTORY COMMENTS:
  6     5*  1) change(86-09-05,JMAthane), approve(86-09-05,MCR7525),
  6     6*     audit(86-09-11,Martinson), install(86-11-12,MR12.0-1208):
  6     7*     Added pascal_string_type_dtype descriptor type.  Its number is 87.
  6     8*     Objects of this type are PASCAL string types.
  6     9*  2) change(88-09-20,WAAnderson), approve(88-09-20,MCR7952),
  6    10*     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
  6    11*     Added the new C types.
  6    12*                                                   END HISTORY COMMENTS */
  6    13 
  6    14 /* This include file defines mnemonic names for the Multics
  6    15*   standard descriptor types, using both pl1 and cobol terminology.
  6    16*   PG 780613
  6    17*   JRD 790530
  6    18*   JRD 791016
  6    19*   MBW 810731
  6    20*   TGO 830614 Add hex types.
  6    21*   Modified June 83 JMAthane to add PASCAL data types
  6    22*   TGO 840120 Add float dec extended and generic, float binary generic
  6    23**/
  6    24 
  6    25      dcl	   (real_fix_bin_1_dtype  init (1),
  6    26 	   real_fix_bin_2_dtype   init (2),
  6    27 	   real_flt_bin_1_dtype   init (3),
  6    28 	   real_flt_bin_2_dtype   init (4),
  6    29 	   cplx_fix_bin_1_dtype   init (5),
  6    30 	   cplx_fix_bin_2_dtype   init (6),
  6    31 	   cplx_flt_bin_1_dtype   init (7),
  6    32 	   cplx_flt_bin_2_dtype   init (8),
  6    33 	   real_fix_dec_9bit_ls_dtype init (9),
  6    34 	   real_flt_dec_9bit_dtype init (10),
  6    35 	   cplx_fix_dec_9bit_ls_dtype init (11),
  6    36 	   cplx_flt_dec_9bit_dtype init (12),
  6    37 	   pointer_dtype	      init (13),
  6    38 	   offset_dtype	      init (14),
  6    39 	   label_dtype	      init (15),
  6    40 	   entry_dtype	      init (16),
  6    41 	   structure_dtype	      init (17),
  6    42 	   area_dtype	      init (18),
  6    43 	   bit_dtype	      init (19),
  6    44 	   varying_bit_dtype      init (20),
  6    45 	   char_dtype	      init (21),
  6    46 	   varying_char_dtype     init (22),
  6    47 	   file_dtype	      init (23),
  6    48 	   real_fix_dec_9bit_ls_overp_dtype init (29),
  6    49 	   real_fix_dec_9bit_ts_overp_dtype init (30),
  6    50 	   real_fix_bin_1_uns_dtype init (33),
  6    51 	   real_fix_bin_2_uns_dtype init (34),
  6    52 	   real_fix_dec_9bit_uns_dtype init (35),
  6    53 	   real_fix_dec_9bit_ts_dtype init (36),
  6    54 	   real_fix_dec_4bit_uns_dtype init (38),	/* digit-aligned */
  6    55 	   real_fix_dec_4bit_ts_dtype init (39),	/* byte-aligned */
  6    56 	   real_fix_dec_4bit_bytealigned_uns_dtype init (40), /* COBOL */
  6    57 	   real_fix_dec_4bit_ls_dtype init (41),	/* digit-aligned */
  6    58 	   real_flt_dec_4bit_dtype init (42),		/* digit-aligned */
  6    59 	   real_fix_dec_4bit_bytealigned_ls_dtype init (43),
  6    60 	   real_flt_dec_4bit_bytealigned_dtype init (44),
  6    61 	   cplx_fix_dec_4bit_bytealigned_ls_dtype init (45),
  6    62 	   cplx_flt_dec_4bit_bytealigned_dtype init (46),
  6    63 	   real_flt_hex_1_dtype   init (47),
  6    64 	   real_flt_hex_2_dtype   init (48),
  6    65 	   cplx_flt_hex_1_dtype   init (49),
  6    66 	   cplx_flt_hex_2_dtype   init (50),
  6    67 	   c_typeref_dtype        init (54),
  6    68 	   c_enum_dtype           init (55),
  6    69              c_enum_const_dtype     init (56),
  6    70 	   c_union_dtype          init (57),
  6    71 	   algol68_straight_dtype init (59),
  6    72 	   algol68_format_dtype   init (60),
  6    73 	   algol68_array_descriptor_dtype init (61),
  6    74 	   algol68_union_dtype    init (62),
  6    75 
  6    76 	   cobol_comp_6_dtype     init (1),
  6    77 	   cobol_comp_7_dtype     init (1),
  6    78 	   cobol_display_ls_dtype init (9),
  6    79 	   cobol_structure_dtype  init (17),
  6    80 	   cobol_char_string_dtype init (21),
  6    81 	   cobol_display_ls_overp_dtype init (29),
  6    82 	   cobol_display_ts_overp_dtype init (30),
  6    83 	   cobol_display_uns_dtype init (35),
  6    84 	   cobol_display_ts_dtype init (36),
  6    85 	   cobol_comp_8_uns_dtype init (38),		/* digit aligned */
  6    86 	   cobol_comp_5_ts_dtype  init (39),		/* byte aligned */
  6    87 	   cobol_comp_5_uns_dtype init (40),
  6    88 	   cobol_comp_8_ls_dtype  init (41),		/* digit aligned */
  6    89 	   real_flt_dec_extended_dtype init (81),	/* 9-bit exponent */
  6    90 	   cplx_flt_dec_extended_dtype init (82),	/* 9-bit exponent */
  6    91 	   real_flt_dec_generic_dtype init (83),	/* generic float decimal */
  6    92 	   cplx_flt_dec_generic_dtype init (84),
  6    93 	   real_flt_bin_generic_dtype init (85),	/* generic float binary */
  6    94 	   cplx_flt_bin_generic_dtype init (86)) fixed bin internal static options (constant);
  6    95 
  6    96      dcl	   (ft_integer_dtype      init (1),
  6    97 	   ft_real_dtype	      init (3),
  6    98 	   ft_double_dtype	      init (4),
  6    99 	   ft_complex_dtype	      init (7),
  6   100 	   ft_complex_double_dtype init (8),
  6   101 	   ft_external_dtype      init (16),
  6   102 	   ft_logical_dtype	      init (19),
  6   103 	   ft_char_dtype	      init (21),
  6   104 	   ft_hex_real_dtype      init (47),
  6   105 	   ft_hex_double_dtype    init (48),
  6   106 	   ft_hex_complex_dtype   init (49),
  6   107 	   ft_hex_complex_double_dtype init (50)
  6   108 	   )		      fixed bin internal static options (constant);
  6   109 
  6   110      dcl	   (algol68_short_int_dtype init (1),
  6   111 	   algol68_int_dtype      init (1),
  6   112 	   algol68_long_int_dtype init (2),
  6   113 	   algol68_real_dtype     init (3),
  6   114 	   algol68_long_real_dtype init (4),
  6   115 	   algol68_compl_dtype    init (7),
  6   116 	   algol68_long_compl_dtype init (8),
  6   117 	   algol68_bits_dtype     init (19),
  6   118 	   algol68_bool_dtype     init (19),
  6   119 	   algol68_char_dtype     init (21),
  6   120 	   algol68_byte_dtype     init (21),
  6   121 	   algol68_struct_struct_char_dtype init (22),
  6   122 	   algol68_struct_struct_bool_dtype init (20)
  6   123 	   )		      fixed bin internal static options (constant);
  6   124 
  6   125      dcl	   (label_constant_runtime_dtype init (24),
  6   126 	   int_entry_runtime_dtype init (25),
  6   127 	   ext_entry_runtime_dtype init (26),
  6   128 	   ext_procedure_runtime_dtype init (27),
  6   129 	   picture_runtime_dtype  init (63)
  6   130 	   )		      fixed bin internal static options (constant);
  6   131 
  6   132      dcl	   (pascal_integer_dtype  init (1),
  6   133 	   pascal_real_dtype      init (4),
  6   134 	   pascal_label_dtype     init (24),
  6   135 	   pascal_internal_procedure_dtype init (25),
  6   136 	   pascal_exportable_procedure_dtype init (26),
  6   137 	   pascal_imported_procedure_dtype init (27),
  6   138 	   pascal_typed_pointer_type_dtype init (64),
  6   139 	   pascal_char_dtype      init (65),
  6   140 	   pascal_boolean_dtype   init (66),
  6   141 	   pascal_record_file_type_dtype init (67),
  6   142 	   pascal_record_type_dtype init (68),
  6   143 	   pascal_set_dtype	      init (69),
  6   144 	   pascal_enumerated_type_dtype init (70),
  6   145 	   pascal_enumerated_type_element_dtype init (71),
  6   146 	   pascal_enumerated_type_instance_dtype init (72),
  6   147 	   pascal_user_defined_type_dtype init (73),
  6   148 	   pascal_user_defined_type_instance_dtype init (74),
  6   149 	   pascal_text_file_dtype init (75),
  6   150 	   pascal_procedure_type_dtype init (76),
  6   151 	   pascal_variable_formal_parameter_dtype init (77),
  6   152 	   pascal_value_formal_parameter_dtype init (78),
  6   153 	   pascal_entry_formal_parameter_dtype init (79),
  6   154 	   pascal_parameter_procedure_dtype init (80),
  6   155 	   pascal_string_type_dtype init (87)) fixed bin int static options (constant);
  6   156 
  6   157 
  6   158 /* END INCLUDE FILE ... std_descriptor_types.incl.pl1 */
      314 
      315 
  7     1 /* BEGIN INCLUDE FILE dm_log_sv_codes.incl.pl1 */
  7     2 
  7     3 /* format: ^indcom */
  7     4 
  7     5 /* DESCRIPTION:
  7     6*   These are the severity codes used by the dms daemon when calling its logger.
  7     7*   The severity is ranked thusly:
  7     8*
  7     9*   severity log write situation
  7    10*   -------- --- ----- ---------
  7    11*          0 no  yes   standard output, query, etc.
  7    12*          1 yes yes   fatal error, terminate dms daemon.
  7    13*          2 yes yes   nonfatal error.
  7    14*          3 yes yes   informative message.
  7    15*          4 yes no    log information only.
  7    16**/
  7    17 
  7    18 /* HISTORY:
  7    19*
  7    20*Written by M. Pandolf, 10/06/82.
  7    21*Modified:
  7    22*12/10/84 by R. Michael Tague: Rename and reformat description/history.
  7    23*01/13/85 by Lee A. Newcomb:  Renamed to dm_log_sv_codes from
  7    24*            dm_daemon_sv_codes as the severity codes for the DM log are not
  7    25*            restrained to the DM Daemon's use.
  7    26*01/24/85 by Lee A. Newcomb:  Fixed to say dm_log_sv_codes.incl.pl1 in the
  7    27*            BEGIN and END INCLUDE comments, instead of dm_daemon_sv_codes.==.
  7    28**/
  7    29 
  7    30 /* format: style5 */
  7    31 
  7    32      dcl	   (PRINT_SV, QUERY_SV)    fixed bin internal static
  7    33 			       options (constant) init (0);
  7    34      dcl	   (CRASH_SV, FATAL_SV)    fixed bin internal static
  7    35 			       options (constant) init (1);
  7    36      dcl	   ERROR_SV	       fixed bin internal static
  7    37 			       options (constant) init (2);
  7    38      dcl	   INFORM_SV	       fixed bin internal static
  7    39 			       options (constant) init (3);
  7    40      dcl	   LOG_SV		       fixed bin internal static
  7    41 			       options (constant) init (4);
  7    42 
  7    43 /* END INCLUDE FILE dm_log_sv_codes.incl.pl1 */
      316 
      317 
  8     1 /* BEGIN INCLUDE FILE ... arg_list.incl.pl1
  8     2*
  8     3*   James R. Davis 10 May 79 */
  8     4 
  8     5 
  8     6      
  8     7 /****^  HISTORY COMMENTS:
  8     8*  1) change(86-05-15,DGHowe), approve(86-05-15,MCR7375),
  8     9*     audit(86-07-15,Schroth):
  8    10*     added command_name_arglist declaration to allow the storage of the
  8    11*     command name given to the command processor
  8    12*                                                   END HISTORY COMMENTS */
  8    13 
  8    14      dcl	   1 arg_list	      aligned based,
  8    15 	     2 header,
  8    16 	       3 arg_count	      fixed bin (17) unsigned unal,
  8    17 	       3 pad1	      bit (1) unal,
  8    18 	       3 call_type	      fixed bin (18) unsigned unal,
  8    19 	       3 desc_count	      fixed bin (17) unsigned unal,
  8    20 	       3 pad2	      bit (19) unal,
  8    21 	     2 arg_ptrs	      (arg_list_arg_count refer (arg_list.arg_count)) ptr,
  8    22 	     2 desc_ptrs	      (arg_list_arg_count refer (arg_list.arg_count)) ptr;
  8    23 
  8    24 
  8    25      dcl	   1 command_name_arglist	      aligned based,
  8    26 	     2 header,
  8    27 	       3 arg_count	      fixed bin (17) unsigned unal,
  8    28 	       3 pad1	      bit (1) unal,
  8    29 	       3 call_type	      fixed bin (18) unsigned unal,
  8    30 	       3 desc_count	      fixed bin (17) unsigned unal,
  8    31 	       3 mbz              bit(1) unal,
  8    32                  3 has_command_name bit(1) unal,
  8    33 	       3 pad2	      bit (17) unal,
  8    34 	     2 arg_ptrs	      (arg_list_arg_count refer (command_name_arglist.arg_count)) ptr,
  8    35 	     2 desc_ptrs	      (arg_list_arg_count refer (command_name_arglist.arg_count)) ptr,
  8    36 	     2 name,
  8    37                  3 command_name_ptr         pointer,
  8    38                  3 command_name_length      fixed bin (21);
  8    39 	
  8    40 
  8    41 
  8    42      dcl	   1 arg_list_with_envptr aligned based,	/* used with non-quick int and entry-var calls */
  8    43 	     2 header,
  8    44 	       3 arg_count	      fixed bin (17) unsigned unal,
  8    45 	       3 pad1	      bit (1) unal,
  8    46 	       3 call_type	      fixed bin (18) unsigned unal,
  8    47 	       3 desc_count	      fixed bin (17) unsigned unal,
  8    48 	       3 pad2	      bit (19) unal,
  8    49 	     2 arg_ptrs	      (arg_list_arg_count refer (arg_list_with_envptr.arg_count)) ptr,
  8    50 	     2 envptr	      ptr,
  8    51 	     2 desc_ptrs	      (arg_list_arg_count refer (arg_list_with_envptr.arg_count)) ptr;
  8    52 
  8    53 
  8    54      dcl	   (
  8    55 	   Quick_call_type	      init (0),
  8    56 	   Interseg_call_type     init (4),
  8    57 	   Envptr_supplied_call_type
  8    58 			      init (8)
  8    59 	   )		      fixed bin (18) unsigned unal int static options (constant);
  8    60 
  8    61 /* The user must declare arg_list_arg_count - if an adjustable automatic structure
  8    62*   is being "liked" then arg_list_arg_count may be a parameter, in order to allocate
  8    63*   an argument list of the proper size in the user's stack
  8    64*
  8    65**/
  8    66 /* END INCLUDE FILE ... arg_list.incl.pl1 */
      318 
      319 
      320    end fm_error_util_$signal;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/24/88  1400.2  fm_error_util_.pl1                >special_ldd>install>MR12.2-1184>fm_error_util_.pl1
304          1    01/07/85  0858.8  dm_fm_sub_error_info.incl.pl1     >ldd>include>dm_fm_sub_error_info.incl.pl1
306          2    01/07/85  0858.8  dm_fm_sub_error_flags.incl.pl1    >ldd>include>dm_fm_sub_error_flags.incl.pl1
308          3    06/28/79  1204.8  condition_info.incl.pl1           >ldd>include>condition_info.incl.pl1
310          4    03/24/82  1347.2  condition_info_header.incl.pl1    >ldd>include>condition_info_header.incl.pl1
312          5    04/16/82  0958.1  sub_err_flags.incl.pl1            >ldd>include>sub_err_flags.incl.pl1
314          6    10/24/88  1336.9  std_descriptor_types.incl.pl1     >special_ldd>install>MR12.2-1184>std_descriptor_types.incl.pl1
316          7    03/06/85  1031.1  dm_log_sv_codes.incl.pl1          >ldd>include>dm_log_sv_codes.incl.pl1
318          8    08/05/86  0856.8  arg_list.incl.pl1                 >ldd>include>arg_list.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ACTION_CANT_RESTART             000033 constant        bit(36)                  initial dcl 5-7 set ref 157* 181* 191* 280* 282*
                                                                                  286* 290* 294*
CODE_ARGUMENT_IDX                      constant        fixed bin(17,0)          initial dcl 106 ref 164
FIRST_MESSAGE_ARGUMENT_IDX      000012 constant        fixed bin(17,0)          initial dcl 106 set ref 195* 195
FM_ERROR_FLAGS_ARGUMENT_IDX            constant        fixed bin(17,0)          initial dcl 106 ref 166
FM_SUB_ERROR_CONDITION_NAME     000000 constant        varying char(32)         initial dcl 1-19 set ref 282* 286 286*
FM_SUB_ERROR_INFO_VERSION_200   000011 constant        fixed bin(35,0)          initial dcl 1-17 set ref 201 294 294*
LOG_SV                                 constant        fixed bin(17,0)          initial dcl 7-40 ref 225 225
MODULE_NAME_ARGUMENT_IDX        000047 constant        fixed bin(17,0)          initial dcl 106 set ref 167* 169 177 181*
NON_ACTION_FLAGS_MASK                  constant        bit(36)                  initial dcl 118 ref 204
NUMBER_OF_REQUIRED_ARGUMENTS           constant        fixed bin(17,0)          initial dcl 106 ref 157 157
SEVERITY_ARGUMENT_IDX                  constant        fixed bin(17,0)          initial dcl 106 ref 165
action_flags              2            based           structure                level 3 dcl 1-10 set ref 204*
addr                                                   builtin function         dcl 96 ref 199 213 225 278
addwordno                                              builtin function         dcl 96 ref 177
arg_count                       000120 automatic       fixed bin(17,0)          dcl 70 set ref 155* 157 157*
arg_list                               based           structure                level 1 dcl 8-14
arg_list_ptr                    000114 automatic       pointer                  initial dcl 67 set ref 67* 154* 164 165 166 167* 169
                                                                                  177 195*
arg_ndims                       000122 automatic       fixed bin(17,0)          dcl 70 set ref 167*
arg_packed                      000117 automatic       bit(1)                   dcl 69 set ref 167*
arg_ptrs                  2            based           pointer                  array level 2 dcl 8-14 ref 164 165 166 169 177
arg_scale                       000123 automatic       fixed bin(17,0)          dcl 70 set ref 167*
arg_size                        000116 automatic       fixed bin(24,0)          dcl 68 set ref 167* 169
arg_type                        000121 automatic       fixed bin(17,0)          dcl 70 set ref 167* 169 173 181*
bit_36_aligned                         based           bit(36)                  dcl 90 ref 166
cant_restart              2            based           bit(1)                   level 4 packed packed unaligned dcl 1-10 set ref 235
char_dtype                             constant        fixed bin(17,0)          initial dcl 6-25 ref 169
char_nonvarying                        based           char(1000000)            packed unaligned dcl 87 ref 169
char_varying                           based           varying char(1000000)    dcl 86 ref 178 178
char_varying_ptr                000126 automatic       pointer                  initial dcl 74 set ref 74* 177* 178 178
cleanup                         000312 stack reference condition                dcl 101 ref 188
code                            000124 automatic       fixed bin(35,0)          initial dcl 73 set ref 73* 190* 191 191*
condition_info                         based           structure                level 1 dcl 3-14
condition_info_header                  based           structure                level 1 dcl 4-6
condition_info_ptr              000322 automatic       pointer                  dcl 3-10 set ref 278* 279* 282 286 286 290 294 294
                                                                                  299
condition_name            3            based           varying char(32)         level 2 dcl 3-14 set ref 286 286*
cu_$arg_count                   000012 constant        entry                    external dcl 123 ref 155
cu_$arg_list_ptr                000010 constant        entry                    external dcl 122 ref 154
decode_descriptor_              000014 constant        entry                    external dcl 124 ref 167
dm_error_$programming_error     000034 external static fixed bin(35,0)          dcl 137 set ref 282* 286* 290* 294*
dm_misc_util_$log               000024 constant        entry                    external dcl 130 ref 225
error_table_$badcall            000036 external static fixed bin(35,0)          dcl 139 set ref 157* 181*
find_condition_info_            000016 constant        entry                    external dcl 126 ref 279
fixed_bin_17                           based           fixed bin(17,0)          dcl 88 ref 165
fixed_bin_35                           based           fixed bin(35,0)          dcl 89 ref 164
fm_error_flags                         based           structure                level 1 dcl 2-10
fm_sub_error_info                      based           structure                level 1 dcl 1-10 set ref 202
fm_sub_error_info_ptr           000320 automatic       pointer                  initial dcl 1-16 set ref 199* 201 202 202 203 204
                                                                                  205 206 211 212 213 213 217 218 219 225 225 233*
                                                                                  235 237* 255* 257 265* 267 268 1-16*
geip_code                       000334 automatic       fixed bin(35,0)          initial dcl 276 set ref 276* 279* 280 280*
get_temp_segment_               000020 constant        entry                    external dcl 127 ref 190
header                                 based           structure                level 2 dcl 1-10
info_ptr                 14            based           pointer                  level 2 dcl 3-14 ref 290 294 294 299
info_string               3            based           varying char(256)        level 3 dcl 1-10 set ref 211* 213 217*
ioa_$general_rs                 000022 constant        entry                    external dcl 128 ref 195
length                                                 builtin function         dcl 96 in procedure "fm_error_util_$signal" ref 178
length                                 based           fixed bin(17,0)          level 3 in structure "fm_sub_error_info" dcl 1-10
                                                                                  in procedure "fm_error_util_$signal" set ref 202*
log                       0(18)        based           structure                level 2 packed packed unaligned dcl 2-10
max                                                    builtin function         dcl 96 ref 225 225
message                                based           char                     packed unaligned dcl 92 set ref 211 225* 270
message_buffer                         based           char                     packed unaligned dcl 91 set ref 195*
message_buffer_ptr              000130 automatic       pointer                  initial dcl 75 set ref 75* 190* 195 211 219 225 247
                                                                                  247* 268* 270
message_length          120            based           fixed bin(24,0)          level 2 in structure "fm_sub_error_info" dcl 1-10
                                                                                  in procedure "fm_error_util_$signal" set ref 212*
                                                                                  218* 267
message_length                  000132 automatic       fixed bin(21,0)          initial dcl 76 in procedure "fm_error_util_$signal"
                                                                                  set ref 76* 195* 208 211 212 218 225 225 267* 270
message_ptr             116            based           pointer                  level 2 dcl 1-10 set ref 213* 219* 268
min                                                    builtin function         dcl 96 ref 169 178
module_name             105            based           varying char(32)         level 2 dcl 1-10 set ref 206* 225*
my_condition_info               000260 automatic       structure                level 1 dcl 82 set ref 278
my_fm_sub_error_info            000136 automatic       structure                level 1 dcl 80 set ref 198* 199
myname                          000013 constant        varying char(32)         initial dcl 105 set ref 157* 181* 190 191* 247 280*
                                                                                  282* 286* 290* 294*
nl_sw                           000134 automatic       bit(1)                   dcl 78 set ref 195*
null                                                   builtin function         dcl 96 ref 67 74 75 157 157 181 181 191 191 233 233
                                                                                  233 233 237 237 237 237 1-16 247 279 280 280 282
                                                                                  282 282 286 286 290 290 290 294 294
p_fm_error_flags_string         000111 automatic       bit(36)                  dcl 61 set ref 166* 204 225
p_module_name                   000101 automatic       char(32)                 packed unaligned dcl 60 set ref 169* 178* 206
p_severity                      000112 automatic       fixed bin(17,0)          dcl 63 set ref 165* 225 225
p_status_code                   000100 automatic       fixed bin(35,0)          dcl 59 set ref 164* 203
pad_sw                          000133 automatic       bit(1)                   dcl 78 set ref 195*
release_temp_segment_           000026 constant        entry                    external dcl 131 ref 247
signal_                         000030 constant        entry                    external dcl 132 ref 233 237
size                                                   builtin function         dcl 96 ref 202
status_code             104            based           fixed bin(35,0)          level 3 dcl 1-10 set ref 203* 225* 257
string                                                 builtin function         dcl 96 set ref 204*
sub_err_                        000032 constant        entry                    external dcl 133 ref 157 181 191 280 282 286 290 294
substr                                                 builtin function         dcl 96 ref 169 178
support_signal            2(03)        based           bit(1)                   level 4 packed packed unaligned dcl 1-10 set ref
                                                                                  205*
sys_info$max_seg_size           000040 external static fixed bin(35,0)          dcl 140 ref 195 195
system                    0(18)        based           bit(1)                   level 3 packed packed unaligned dcl 2-10 ref 225
unspec                                                 builtin function         dcl 96 set ref 198*
varying_char_dtype                     constant        fixed bin(17,0)          initial dcl 6-25 ref 173
version                   1            based           fixed bin(17,0)          level 3 dcl 1-10 set ref 201* 294 294*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ACTION_CAN_RESTART                     internal static bit(36)                  initial dcl 5-7
ACTION_DEFAULT_RESTART                 internal static bit(36)                  initial dcl 5-7
ACTION_QUIET_RESTART                   internal static bit(36)                  initial dcl 5-7
ACTION_SUPPORT_SIGNAL                  internal static bit(36)                  initial dcl 5-7
CRASH_SV                               internal static fixed bin(17,0)          initial dcl 7-34
ERROR_SV                               internal static fixed bin(17,0)          initial dcl 7-36
Envptr_supplied_call_type              internal static fixed bin(18,0)          initial packed unsigned unaligned dcl 8-54
FATAL_SV                               internal static fixed bin(17,0)          initial dcl 7-34
FM_ACTION_CANT_RESTART                 internal static bit(36)                  initial dcl 2-22
FM_ACTION_CAN_RESTART                  internal static bit(36)                  initial dcl 2-22
FM_ACTION_DEFAULT_RESTART              internal static bit(36)                  initial dcl 2-22
FM_ACTION_LOG                          internal static bit(36)                  initial dcl 2-22
FM_ACTION_QUIET_RESTART                internal static bit(36)                  initial dcl 2-22
INFORM_SV                              internal static fixed bin(17,0)          initial dcl 7-38
Interseg_call_type                     internal static fixed bin(18,0)          initial packed unsigned unaligned dcl 8-54
PRINT_SV                               internal static fixed bin(17,0)          initial dcl 7-32
QUERY_SV                               internal static fixed bin(17,0)          initial dcl 7-32
Quick_call_type                        internal static fixed bin(18,0)          initial packed unsigned unaligned dcl 8-54
algol68_array_descriptor_dtype         internal static fixed bin(17,0)          initial dcl 6-25
algol68_bits_dtype                     internal static fixed bin(17,0)          initial dcl 6-110
algol68_bool_dtype                     internal static fixed bin(17,0)          initial dcl 6-110
algol68_byte_dtype                     internal static fixed bin(17,0)          initial dcl 6-110
algol68_char_dtype                     internal static fixed bin(17,0)          initial dcl 6-110
algol68_compl_dtype                    internal static fixed bin(17,0)          initial dcl 6-110
algol68_format_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
algol68_int_dtype                      internal static fixed bin(17,0)          initial dcl 6-110
algol68_long_compl_dtype               internal static fixed bin(17,0)          initial dcl 6-110
algol68_long_int_dtype                 internal static fixed bin(17,0)          initial dcl 6-110
algol68_long_real_dtype                internal static fixed bin(17,0)          initial dcl 6-110
algol68_real_dtype                     internal static fixed bin(17,0)          initial dcl 6-110
algol68_short_int_dtype                internal static fixed bin(17,0)          initial dcl 6-110
algol68_straight_dtype                 internal static fixed bin(17,0)          initial dcl 6-25
algol68_struct_struct_bool_dtype       internal static fixed bin(17,0)          initial dcl 6-110
algol68_struct_struct_char_dtype       internal static fixed bin(17,0)          initial dcl 6-110
algol68_union_dtype                    internal static fixed bin(17,0)          initial dcl 6-25
area_dtype                             internal static fixed bin(17,0)          initial dcl 6-25
arg_list_with_envptr                   based           structure                level 1 dcl 8-42
bit_dtype                              internal static fixed bin(17,0)          initial dcl 6-25
c_enum_const_dtype                     internal static fixed bin(17,0)          initial dcl 6-25
c_enum_dtype                           internal static fixed bin(17,0)          initial dcl 6-25
c_typeref_dtype                        internal static fixed bin(17,0)          initial dcl 6-25
c_union_dtype                          internal static fixed bin(17,0)          initial dcl 6-25
cobol_char_string_dtype                internal static fixed bin(17,0)          initial dcl 6-25
cobol_comp_5_ts_dtype                  internal static fixed bin(17,0)          initial dcl 6-25
cobol_comp_5_uns_dtype                 internal static fixed bin(17,0)          initial dcl 6-25
cobol_comp_6_dtype                     internal static fixed bin(17,0)          initial dcl 6-25
cobol_comp_7_dtype                     internal static fixed bin(17,0)          initial dcl 6-25
cobol_comp_8_ls_dtype                  internal static fixed bin(17,0)          initial dcl 6-25
cobol_comp_8_uns_dtype                 internal static fixed bin(17,0)          initial dcl 6-25
cobol_display_ls_dtype                 internal static fixed bin(17,0)          initial dcl 6-25
cobol_display_ls_overp_dtype           internal static fixed bin(17,0)          initial dcl 6-25
cobol_display_ts_dtype                 internal static fixed bin(17,0)          initial dcl 6-25
cobol_display_ts_overp_dtype           internal static fixed bin(17,0)          initial dcl 6-25
cobol_display_uns_dtype                internal static fixed bin(17,0)          initial dcl 6-25
cobol_structure_dtype                  internal static fixed bin(17,0)          initial dcl 6-25
command_name_arglist                   based           structure                level 1 dcl 8-25
condition_info_header_ptr              automatic       pointer                  dcl 4-4
condition_info_version_1               internal static fixed bin(17,0)          initial dcl 3-30
cplx_fix_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
cplx_fix_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
cplx_fix_dec_4bit_bytealigned_ls_dtype internal static fixed bin(17,0)          initial dcl 6-25
cplx_fix_dec_9bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 6-25
cplx_flt_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
cplx_flt_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
cplx_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 6-25
cplx_flt_dec_4bit_bytealigned_dtype    internal static fixed bin(17,0)          initial dcl 6-25
cplx_flt_dec_9bit_dtype                internal static fixed bin(17,0)          initial dcl 6-25
cplx_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 6-25
cplx_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 6-25
cplx_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
cplx_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
entry_dtype                            internal static fixed bin(17,0)          initial dcl 6-25
ext_entry_runtime_dtype                internal static fixed bin(17,0)          initial dcl 6-125
ext_procedure_runtime_dtype            internal static fixed bin(17,0)          initial dcl 6-125
file_dtype                             internal static fixed bin(17,0)          initial dcl 6-25
ft_char_dtype                          internal static fixed bin(17,0)          initial dcl 6-96
ft_complex_double_dtype                internal static fixed bin(17,0)          initial dcl 6-96
ft_complex_dtype                       internal static fixed bin(17,0)          initial dcl 6-96
ft_double_dtype                        internal static fixed bin(17,0)          initial dcl 6-96
ft_external_dtype                      internal static fixed bin(17,0)          initial dcl 6-96
ft_hex_complex_double_dtype            internal static fixed bin(17,0)          initial dcl 6-96
ft_hex_complex_dtype                   internal static fixed bin(17,0)          initial dcl 6-96
ft_hex_double_dtype                    internal static fixed bin(17,0)          initial dcl 6-96
ft_hex_real_dtype                      internal static fixed bin(17,0)          initial dcl 6-96
ft_integer_dtype                       internal static fixed bin(17,0)          initial dcl 6-96
ft_logical_dtype                       internal static fixed bin(17,0)          initial dcl 6-96
ft_real_dtype                          internal static fixed bin(17,0)          initial dcl 6-96
int_entry_runtime_dtype                internal static fixed bin(17,0)          initial dcl 6-125
label_constant_runtime_dtype           internal static fixed bin(17,0)          initial dcl 6-125
label_dtype                            internal static fixed bin(17,0)          initial dcl 6-25
offset_dtype                           internal static fixed bin(17,0)          initial dcl 6-25
pascal_boolean_dtype                   internal static fixed bin(17,0)          initial dcl 6-132
pascal_char_dtype                      internal static fixed bin(17,0)          initial dcl 6-132
pascal_entry_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 6-132
pascal_enumerated_type_dtype           internal static fixed bin(17,0)          initial dcl 6-132
pascal_enumerated_type_element_dtype   internal static fixed bin(17,0)          initial dcl 6-132
pascal_enumerated_type_instance_dtype  internal static fixed bin(17,0)          initial dcl 6-132
pascal_exportable_procedure_dtype      internal static fixed bin(17,0)          initial dcl 6-132
pascal_imported_procedure_dtype        internal static fixed bin(17,0)          initial dcl 6-132
pascal_integer_dtype                   internal static fixed bin(17,0)          initial dcl 6-132
pascal_internal_procedure_dtype        internal static fixed bin(17,0)          initial dcl 6-132
pascal_label_dtype                     internal static fixed bin(17,0)          initial dcl 6-132
pascal_parameter_procedure_dtype       internal static fixed bin(17,0)          initial dcl 6-132
pascal_procedure_type_dtype            internal static fixed bin(17,0)          initial dcl 6-132
pascal_real_dtype                      internal static fixed bin(17,0)          initial dcl 6-132
pascal_record_file_type_dtype          internal static fixed bin(17,0)          initial dcl 6-132
pascal_record_type_dtype               internal static fixed bin(17,0)          initial dcl 6-132
pascal_set_dtype                       internal static fixed bin(17,0)          initial dcl 6-132
pascal_string_type_dtype               internal static fixed bin(17,0)          initial dcl 6-132
pascal_text_file_dtype                 internal static fixed bin(17,0)          initial dcl 6-132
pascal_typed_pointer_type_dtype        internal static fixed bin(17,0)          initial dcl 6-132
pascal_user_defined_type_dtype         internal static fixed bin(17,0)          initial dcl 6-132
pascal_user_defined_type_instance_dtype
                                       internal static fixed bin(17,0)          initial dcl 6-132
pascal_value_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 6-132
pascal_variable_formal_parameter_dtype internal static fixed bin(17,0)          initial dcl 6-132
picture_runtime_dtype                  internal static fixed bin(17,0)          initial dcl 6-125
pointer_dtype                          internal static fixed bin(17,0)          initial dcl 6-25
real_fix_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
real_fix_bin_1_uns_dtype               internal static fixed bin(17,0)          initial dcl 6-25
real_fix_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
real_fix_bin_2_uns_dtype               internal static fixed bin(17,0)          initial dcl 6-25
real_fix_dec_4bit_bytealigned_ls_dtype internal static fixed bin(17,0)          initial dcl 6-25
real_fix_dec_4bit_bytealigned_uns_dtype
                                       internal static fixed bin(17,0)          initial dcl 6-25
real_fix_dec_4bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 6-25
real_fix_dec_4bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 6-25
real_fix_dec_4bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 6-25
real_fix_dec_9bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 6-25
real_fix_dec_9bit_ls_overp_dtype       internal static fixed bin(17,0)          initial dcl 6-25
real_fix_dec_9bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 6-25
real_fix_dec_9bit_ts_overp_dtype       internal static fixed bin(17,0)          initial dcl 6-25
real_fix_dec_9bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 6-25
real_flt_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
real_flt_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
real_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 6-25
real_flt_dec_4bit_bytealigned_dtype    internal static fixed bin(17,0)          initial dcl 6-25
real_flt_dec_4bit_dtype                internal static fixed bin(17,0)          initial dcl 6-25
real_flt_dec_9bit_dtype                internal static fixed bin(17,0)          initial dcl 6-25
real_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 6-25
real_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 6-25
real_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
real_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
structure_dtype                        internal static fixed bin(17,0)          initial dcl 6-25
varying_bit_dtype                      internal static fixed bin(17,0)          initial dcl 6-25

NAMES DECLARED BY EXPLICIT CONTEXT.
FINISH                          001355 constant        entry                    internal dcl 244 ref 188 240
GET_ERROR_INFO_PTR              001421 constant        entry                    internal dcl 273 ref 255 265
fm_error_util_$signal           000344 constant        entry                    external dcl 52
get_code                        001232 constant        entry                    external dcl 252
get_message                     001304 constant        entry                    external dcl 262

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      2244        2306    2004        2254
Length      2702    2004        42         360     240           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
fm_error_util_$signal               590 external procedure  is an external procedure.  
on unit on line 188                  64 on unit               
FINISH                               82 internal procedure  is called by several nonquick procedures.  
GET_ERROR_INFO_PTR                      internal procedure  shares stack frame of external procedure fm_error_util_$signal.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
fm_error_util_$signal    000100 p_status_code               fm_error_util_$signal
                         000101 p_module_name               fm_error_util_$signal
                         000111 p_fm_error_flags_string     fm_error_util_$signal
                         000112 p_severity                  fm_error_util_$signal
                         000114 arg_list_ptr                fm_error_util_$signal
                         000116 arg_size                    fm_error_util_$signal
                         000117 arg_packed                  fm_error_util_$signal
                         000120 arg_count                   fm_error_util_$signal
                         000121 arg_type                    fm_error_util_$signal
                         000122 arg_ndims                   fm_error_util_$signal
                         000123 arg_scale                   fm_error_util_$signal
                         000124 code                        fm_error_util_$signal
                         000126 char_varying_ptr            fm_error_util_$signal
                         000130 message_buffer_ptr          fm_error_util_$signal
                         000132 message_length              fm_error_util_$signal
                         000133 pad_sw                      fm_error_util_$signal
                         000134 nl_sw                       fm_error_util_$signal
                         000136 my_fm_sub_error_info        fm_error_util_$signal
                         000260 my_condition_info           fm_error_util_$signal
                         000320 fm_sub_error_info_ptr       fm_error_util_$signal
                         000322 condition_info_ptr          fm_error_util_$signal
                         000334 geip_code                   GET_ERROR_INFO_PTR

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_char_temp     call_ext_out_desc   call_ext_out        call_int_this       call_int_other      return_mac
signal_op           enable_op           shorten_stack       ext_entry           ext_entry_desc      int_entry
return_chars_eis    any_to_any_truncate_

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
cu_$arg_count                 cu_$arg_list_ptr              decode_descriptor_            dm_misc_util_$log
find_condition_info_          get_temp_segment_             ioa_$general_rs               release_temp_segment_
signal_                       sub_err_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
dm_error_$programming_error   error_table_$badcall          sys_info$max_seg_size




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     67 000330        73 000332        74 000333        75 000334        76 000335    1   16 000337        52 000343
    154 000354       155 000363       157 000375       164 000454       165 000460       166 000464       167 000470
    169 000513       173 000532       177 000534       178 000541       180 000550       181 000551       188 000623
    190 000645       191 000675       195 000743       198 001010       199 001013       201 001015       202 001017
    203 001021       204 001023       205 001026       206 001030       208 001035       211 001040       212 001050
    213 001052       214 001054       217 001055       218 001056       219 001057       225 001061       233 001120
    235 001152       237 001156       238 001210       240 001211       242 001215       252 001227       255 001242
    257 001244       262 001301       265 001313       267 001315       268 001320       270 001322       244 001354
    247 001362       250 001417       273 001421       276 001423       278 001424       279 001426       280 001443
    282 001510       286 001562       290 001642       294 001712       299 001771


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
