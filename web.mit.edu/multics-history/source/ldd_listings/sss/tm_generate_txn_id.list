	COMPILATION LISTING OF SEGMENT tm_generate_txn_id
	Compiled by: Multics PL/I Compiler, Release 28e, of February 14, 1985
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 03/05/85  0913.1 mst Tue
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 /* format: style4,ifthenstmt,^indproc,^indcomtxt */
        7 /*---------------*/
        8 
        9 tm_generate_txn_id: proc (A_tdt_ptr) returns (bit (36) aligned);
       10 
       11 /* DESCRIPTION:
       12*
       13*   This  procedure  generates  a unique transaction identifier from the
       14*   TDT's last_uid field.
       15**/
       16 
       17 /* HISTORY:
       18*
       19*Written by Steve Herbst 08/06/82
       20*Modified:
       21*08/16/82 by Steve Herbst: Changed to use consolidated dm_tm_tdt.incl.pl1
       22*	with entry declarations.
       23*10/17/84 by Steve Herbst: Changed in response to audit comments.
       24*11/27/84 by Steve Herbst: Changed further in response to audit comments.
       25**/
       26 
       27 /* DECLARATIONS */
       28 
       29 /* Parameters */
       30 
       31 dcl A_tdt_ptr ptr;
       32 
       33 /* Constants */
       34 
       35 /* Based */
       36 
       37 dcl fixed_bin_uid fixed bin (27) unsigned unaligned based;
       38 
       39 /* Static */
       40 
       41 /* Automatic */
       42 
       43 dcl txn_id bit (36) aligned;
       44 dcl system_id bit (9) unaligned;
       45 dcl (last_uid, new_uid) bit (27) unaligned;
       46 
       47 /* External */
       48 
       49 dcl dm_data_$system_id bit (9) ext;
       50 dcl error_table_$unimplemented_version fixed bin (35) ext;
       51 
       52 /* Entries */
       53 
       54 dcl sub_err_ entry options (variable);
       55 
       56 /* Builtins */
       57 
       58 dcl (addr, null, stacq, unspec) builtin;
       59 
       60 /* Conditions */
       61 
       62 /* END OF DECLARATIONS */
       63 
       64 /* (Since stacq is used to check the TDT's last_uid, the TDT need not be locked.) */
       65 
       66 	tm_tdt_ptr = A_tdt_ptr;
       67 
       68 	if tm_tdt.version ^= TM_TDT_VERSION_3 then
       69 	     call sub_err_ (error_table_$unimplemented_version, "tm_generate_txn_id", ACTION_CANT_RESTART,
       70 		null, 0, "Expected TDT version ^a, found ^a.", TM_TDT_VERSION_3, tm_tdt.version);
       71 
       72 	system_id = unspec (dm_data_$system_id);
       73 
       74 REPEAT_IF_LAST_UID_CHANGES:
       75 
       76 	last_uid = tm_tdt.last_uid;
       77 
       78 	addr (new_uid) -> fixed_bin_uid = addr (last_uid) -> fixed_bin_uid + 1;
       79 						/* increment the last_uid value from the TDT */
       80 
       81 	if stacq (tm_tdt.last_uid, new_uid, last_uid) then txn_id = system_id || new_uid;
       82 
       83 	else go to REPEAT_IF_LAST_UID_CHANGES;		/* tm_tdt.last_uid has been changed meanwhile */
       84 						/* by another process */
       85 
       86 	return (txn_id);
       87 
  1     1 /*  START OF:	dm_tm_tdt.incl.pl1		*/
  1     2 
  1     3 /* Transaction Definition Table for transaction_manager_ */
  1     4 /* This structure is used to reference the TDT. The process_id field for the
  1     5*   i'th TDT entry, for example, is usually referenced as tm_tdt.process_id (i).
  1     6*   A TDT entry is in use by a process when its process_id field is nonzero.
  1     7*   An entry is reserved by using the stacq builtin to set process_id, if and
  1     8*   only if it is already zero. The entry is being used for a transaction when
  1     9*   tm_tdt.txn_id (i) is nonzero. The possible values of tm_tdt.state (i) are
  1    10*   listed in dm_tm_states.incl.pl1. If state = 0, no operation has been
  1    11*   performed yet on the transaction. */
  1    12 
  1    13 
  1    14 /* HISTORY:
  1    15*Designed by Matt Pierret, 01/26/82.
  1    16*Coded by Steve Herbst, 07/27/82.
  1    17*Modified:
  1    18*08/05/82 by Steve Herbst: Added tm_tdt.operation and padded last_uid to full word.
  1    19*08/05/82 by Steve Herbst: Changed creator_process_id to bit (36).
  1    20*08/16/82 by Steve Herbst: Added contents of dm_tm_tdt_entry.incl.pl1.
  1    21*09/09/82 by Steve Herbst: Removed in_use flag from TDT entry and rearranged fields.
  1    22*09/20/82 by Steve Herbst: Removed tm_tdt.operation.
  1    23*11/01/82 by Steve Herbst: Added event_channel and error_sw to tm_tdt_entry.
  1    24*11/05/82 by Steve Herbst: Added suspended_sw and error_code to tm_tdt_entry.
  1    25*11/11/82 by Steve Herbst: Deleted tm_tdt_entry.alloc_complete.
  1    26*11/23/82 by Steve Herbst: Compacted, changed some numbers to unsigned.
  1    27*12/14/82 by Steve Herbst: Added tm_tdt_entry.daemon_error_sw.
  1    28*01/11/83 by Steve Herbst: Added owner_name, abandoned_sw & kill_sw to tm_tdt_entry.
  1    29*01/24/83 by Steve Herbst: Replaced daemon_error_sw with daemon_adjust_count.
  1    30*01/25/83 by Steve Herbst: Moved abandoned_sw from transaction portion to entry header portion.
  1    31*05/13/83 by Steve Herbst: Version 3, changed all fixed bin (18) unal uns numbers to fixed bin (17) unaligned.
  1    32*05/26/83 by Steve Herbst: Added rollback_count and checkpoint_id.
  1    33**/
  1    34 
  1    35 dcl	tm_tdt_ptr	ptr;
  1    36 dcl	tdt_max_count	fixed bin;
  1    37 
  1    38 dcl TM_TDT_VERSION_3 char (8) int static options (constant) init ("TM-TDT 3");
  1    39 
  1    40 
  1    41 dcl  1	tm_tdt		aligned based (tm_tdt_ptr),
  1    42       2	version char (8),				/* = "TM-TDT 3" */
  1    43       2	lock fixed bin (71),			/* (currently not used) */
  1    44       2	last_uid		bit (27) aligned,		/* last transaction uid assigned */
  1    45       2	flags,
  1    46        3	no_begins		bit (1) unaligned,		/* ON => only priv process can begin transaction */
  1    47        3	mbz1		bit (35) unaligned,
  1    48       2	entry_count	fixed bin,		/* number of slots allocated */
  1    49       2	mbz2		fixed bin,		/* for even word boundary */
  1    50       2	entry  (tdt_max_count refer (tm_tdt.entry_count))
  1    51 			like tm_tdt_entry;
  1    52 
  1    53 
  1    54 
  1    55 /* TDT entries: */
  1    56 
  1    57 dcl	tm_tdt_entry_ptr	ptr;
  1    58 
  1    59 dcl  1	tm_tdt_entry	aligned based (tm_tdt_entry_ptr),
  1    60       2	event_channel	fixed bin (71),		/* for communication with the process */
  1    61       2	process_id	bit (36) aligned,		/* process for which this entry is reserved */
  1    62       2	owner_name	char (32),		/* person.project of owner process */
  1    63       2	entry_flags,
  1    64        3	abandoned_sw	bit (1) unaligned,		/* ON => owner has called tm_$abandon on this entry */
  1    65        3	mbz3		bit (35) unaligned,
  1    66       2	transaction	unaligned,
  1    67        3	txn_id		bit (36) aligned,		/* unique identifier assigned at begin time */
  1    68        3	date_time_created	fixed bin (71) aligned,
  1    69        3	mode		fixed bin (17) unaligned,	/* mode specified with transaction begin */
  1    70        3	state		fixed bin (17) unaligned,	/* state transaction is currently in */
  1    71        3  error_code	fixed bin (35) aligned,	/* goes along with error_sw and error state */
  1    72        3 	checkpoint_id	fixed bin (17) unaligned,	/* identifier of the current rollback checkpoint */
  1    73        3	rollback_count	fixed bin (17) unaligned,	/* number of times bjm_$rollback has been called */
  1    74        3	daemon_adjust_count	fixed bin (17) unaligned,	/* number of times daemon has tried to adjust since user */
  1    75        3	return_idx	fixed bin (17) unaligned,	/* parent transaction, or zero */
  1    76        3	flags,
  1    77         4 dead_process_sw	bit (1) unaligned,		/* ON => treat process as dead even if it isn't yet */
  1    78         4 suspended_sw	bit (1) unaligned,		/* ON => suspended by tm_$suspend_txn */
  1    79         4 error_sw		bit (1) unaligned,		/* ON => state is one of the error states */
  1    80         4 kill_sw		bit (1) unaligned,		/* ON => being processed by tm_$kill */
  1    81         4	mbz4		bit (29) unaligned,
  1    82        3	post_commit_flags,
  1    83         4 (fmgr,
  1    84 	 bjmgr,
  1    85 	 ajmgr)	 	 bit (1) unaligned,
  1    86        3	mbz4		fixed bin;
  1    87 
  1    88 
  1    89 /*  END OF:	dm_tm_tdt.incl.pl1		*/
       88 
       89 
  2     1 /* BEGIN INCLUDE FILE sub_err_flags.incl.pl1 BIM 11/81 */
  2     2 /* format: style3 */
  2     3 
  2     4 /* These constants are to be used for the flags argument of sub_err_ */
  2     5 /* They are just "string (condition_info_header.action_flags)" */
  2     6 
  2     7 declare	(
  2     8 	ACTION_CAN_RESTART	init (""b),
  2     9 	ACTION_CANT_RESTART init ("1"b),
  2    10 	ACTION_DEFAULT_RESTART
  2    11 			init ("01"b),
  2    12 	ACTION_QUIET_RESTART
  2    13 			init ("001"b),
  2    14 	ACTION_SUPPORT_SIGNAL
  2    15 			init ("0001"b)
  2    16 	)		bit (36) aligned internal static options (constant);
  2    17 
  2    18 /* End include file */
       90 
       91 
       92 
       93 end tm_generate_txn_id;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    03/05/85  0759.9  tm_generate_txn_id.pl1            >spec>on>7138.pbf>tm_generate_txn_id.pl1
88           1    01/07/85  0900.1  dm_tm_tdt.incl.pl1                >ldd>include>dm_tm_tdt.incl.pl1
90           2    04/16/82  0958.1  sub_err_flags.incl.pl1            >ldd>include>sub_err_flags.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ACTION_CANT_RESTART             000000 constant        bit(36)                  initial dcl 2-7 set ref 68*
A_tdt_ptr                              parameter       pointer                  dcl 31 ref 9 66
TM_TDT_VERSION_3                000002 constant        char(8)                  initial unaligned dcl 1-38 set ref 68 68*
addr                                                   builtin function         dcl 58 ref 78 78
dm_data_$system_id              000010 external static bit(9)                   unaligned dcl 49 ref 72
error_table_$unimplemented_version
                                000012 external static fixed bin(35,0)          dcl 50 set ref 68*
fixed_bin_uid                          based           fixed bin(27,0)          unsigned unaligned dcl 37 set ref 78* 78
last_uid                        000102 automatic       bit(27)                  unaligned dcl 45 in procedure "tm_generate_txn_id"
                                                                                  set ref 74* 78 81
last_uid                  4            based           bit(27)                  level 2 in structure "tm_tdt" dcl 1-41 in procedure
                                                                                  "tm_generate_txn_id" ref 74 81
new_uid                         000103 automatic       bit(27)                  unaligned dcl 45 set ref 78 81 81
null                                                   builtin function         dcl 58 ref 68 68
stacq                                                  builtin function         dcl 58 ref 81
sub_err_                        000014 constant        entry                    external dcl 54 ref 68
system_id                       000101 automatic       bit(9)                   unaligned dcl 44 set ref 72* 81
tm_tdt                                 based           structure                level 1 dcl 1-41
tm_tdt_entry                           based           structure                level 1 dcl 1-59
tm_tdt_ptr                      000104 automatic       pointer                  dcl 1-35 set ref 66* 68 68 74 81
txn_id                          000100 automatic       bit(36)                  dcl 43 set ref 81* 86
unspec                                                 builtin function         dcl 58 ref 72
version                                based           char(8)                  level 2 dcl 1-41 set ref 68 68*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ACTION_CAN_RESTART                     internal static bit(36)                  initial dcl 2-7
ACTION_DEFAULT_RESTART                 internal static bit(36)                  initial dcl 2-7
ACTION_QUIET_RESTART                   internal static bit(36)                  initial dcl 2-7
ACTION_SUPPORT_SIGNAL                  internal static bit(36)                  initial dcl 2-7
tdt_max_count                          automatic       fixed bin(17,0)          dcl 1-36
tm_tdt_entry_ptr                       automatic       pointer                  dcl 1-57

NAMES DECLARED BY EXPLICIT CONTEXT.
REPEAT_IF_LAST_UID_CHANGES      000141 constant        label                    dcl 74 ref 81
tm_generate_txn_id              000040 constant        entry                    external dcl 9

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       250         266     165         260
Length       466     165        16         164      62           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
tm_generate_txn_id                  122 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
tm_generate_txn_id       000100 txn_id                      tm_generate_txn_id
                         000101 system_id                   tm_generate_txn_id
                         000102 last_uid                    tm_generate_txn_id
                         000103 new_uid                     tm_generate_txn_id
                         000104 tm_tdt_ptr                  tm_generate_txn_id

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   return              ext_entry           stacq

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
sub_err_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
dm_data_$system_id            error_table_$unimplemented_version




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
      9 000034        66 000045        68 000051        72 000135        74 000141        78 000144        81 000151
     86 000162


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
