	COMPILATION LISTING OF SEGMENT validate
	Compiled by: Multics PL/I Compiler, Release 33b, of October 17, 1990
	Compiled at: ACTC Technologies Inc.          
	Compiled on: 10/25/90  0955.1 mdt Thu
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        6*        *                                                         *
        7*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        8*        *                                                         *
        9*        * Copyright (c) 1972 by Massachusetts Institute of        *
       10*        * Technology and Honeywell Information Systems, Inc.      *
       11*        *                                                         *
       12*        *********************************************************** */
       13 
       14 
       15 
       16 /****^  HISTORY COMMENTS:
       17*  1) change(87-04-15,RWaters), approve(87-04-15,MCR7635), audit(87-04-28,Huen),
       18*     install(87-05-21,MR12.1-1033):
       19*     Fix bug #2144
       20*  2) change(89-02-28,RWaters), approve(89-02-28,MCR8068), audit(89-09-07,Vu),
       21*     install(89-09-19,MR12.3-1068):
       22*     Fix bugs 1737 & 1873
       23*  3) change(90-08-30,Huen), approve(90-08-30,MCR8160),
       24*     audit(90-09-07,Zimmerman), install(90-10-17,MR12.4-1046):
       25*     pl1_2221: Fix the PL1 compiler to not complain about constant symbols that
       26*     are actually legal.
       27*  4) change(90-10-17,Gray), approve(90-10-17,MCR8160), audit(90-10-19,Schroth),
       28*     install(90-10-25,MR12.4-1049):
       29*     Modified to only validate constants for symbols declared by dcl statement.
       30*                                                   END HISTORY COMMENTS */
       31 
       32 /* format: style3,^indattr,ifthendo,ifthen,^indnoniterdo,indproc,^elsestmt,dclind9,idind23 */
       33 validate:
       34      proc (sp);
       35 
       36 /* Modified 780314 by PG to fix 1673 (don't default constants unless default statement explicitly touches constants)
       37*	and to print error 206 only if none of the attribute sets are consistent.
       38*   Modified 780629 by PG for unsigned
       39*   Modified 780712 by PG to diagnose liking to a structure containing refer extents
       40*   Modified 780725 by PG to move responsibility for setting the aliasable bit to declare and declare_structure.
       41*   Modified 780731 by PG to use adam to determine storage class.
       42*   Modified 780927 by PCK to flag the use of unaligned decimal for Release 24 of PL/I
       43*   Modified 790521 by RAB to complete the implementation of multiple
       44*	attribute sets for default statements started on 780314.
       45*  Modified 830427 by BIM for options (packed) for pointers.
       46*  Modified 860618 by RW to diagnose "dcl z varying" as incorrect
       47*  Modified 890202 by RW "constant" attribute only on files and entries,
       48*     	duplicate parameter dcls only diagnosed once
       49*
       50**/
       51 
       52 /* parameters */
       53 
       54 dcl      sp pointer parameter;
       55 
       56 /* automatic */
       57 
       58 dcl      (adam, s, b, d, ds) ptr;
       59 dcl      m fixed bin (15);
       60 dcl      (n, minimum, maximum) fixed bin (31);
       61 dcl      1 invalid aligned like symbol.attributes;
       62 dcl      (invalid_attribute_set, valid_attribute_set, return_parameter, created_descriptor) bit (1) aligned;
       63 
       64 /* external static */
       65 
       66 dcl      pl1_stat_$check_ansi bit (1) aligned ext static;
       67 dcl      pl1_stat_$unaligned_dec bit (1) aligned ext static;
       68 
       69 /* builtins */
       70 
       71 dcl      (binary, hbound, index, lbound, length, null, string, substr, unspec) builtin;
       72 
       73 /* program */
       74 
       75 	s = sp;
       76 
       77 /* Since the storage class has not been propagated down at this time for members of
       78*   structures, get a pointer to the level-1 symbol node ("adam") which contains the
       79*   storage class of the structure.  (Which itself may not have been set for parameters...) */
       80 
       81 	do adam = s repeat (adam -> symbol.father) while (adam -> symbol.father ^= null);
       82 	end;
       83 
       84 /* Prevent the descriptor for parameters of internal procedures from being defaulted */
       85 
       86 	created_descriptor = adam -> symbol.parameter & adam -> symbol.param_desc;
       87 
       88 	if created_descriptor then
       89 	     s -> symbol.param_desc = "0"b;
       90 
       91 	if s -> symbol.level = 0 & s -> symbol.member then do;
       92 	     call print (113);
       93 	     s -> symbol.member = "0"b;
       94 	end;
       95 
       96 	if adam -> symbol.parameter & s -> symbol.location = 0
       97 	     & ^(s -> symbol.member | s -> symbol.dcl_type = by_compiler) then do;
       98 
       99 /* parameter attribute but not a parameter */
      100 	     if s -> symbol.token -> token.declaration -> symbol.location = 0 then
      101 		call print (97);			/* else it is just a duplicate declaration, diagnose it later */
      102 
      103 	end;
      104 
      105 	if (s -> symbol.level > 1 | s -> symbol.member) & s -> symbol.father = null then do;
      106 	     call print (212);
      107 	     s -> symbol.level = 0;
      108 	     s -> symbol.member = "0"b;
      109 	end;
      110 
      111 /* Diagnose an invalid attribute set. */
      112 
      113 	invalid = inconsistent (s -> symbol.attributes);
      114 
      115 	if string (invalid) ^= ""b then do;
      116 	     m = 200;
      117 	     if s -> symbol.external & string (adam -> symbol.storage_class) ^= "0"b
      118 		& ^(adam -> symbol.static | adam -> symbol.constant | adam -> symbol.controlled) then
      119 		m = 218;
      120 
      121 	     if s -> symbol.varying & string (s -> symbol.data_type) ^= "0"b & ^(s -> symbol.bit | s -> symbol.char)
      122 		then
      123 		m = 219;
      124 
      125 	     if s -> symbol.initialed & (adam -> symbol.parameter | adam -> symbol.param_desc | adam -> symbol.defined)
      126 		then
      127 		m = 220;
      128 
      129 	     if s -> symbol.member & string (s -> symbol.storage_class) ^= ""b then
      130 		m = 210;
      131 	end;
      132 	else
      133 	     m = 0;
      134 
      135 	if m ^= 0 then do;
      136 	     call print (m);
      137 	     string (s -> symbol.attributes) = string (s -> symbol.attributes) & ^string (invalid);
      138 	end;
      139 
      140 	call check_extent_type;
      141 
      142 /* Prevent the return value from being defaulted. */
      143 
      144 	return_parameter =
      145 	     s -> symbol.parameter & ^created_descriptor & s -> symbol.level < 2 & s -> symbol.dcl_type = by_compiler;
      146 	if return_parameter then do;
      147 	     s -> symbol.parameter = "0"b;
      148 	     s -> symbol.return_value = "1"b;
      149 	end;
      150 
      151 /* Apply the defaults */
      152 
      153 	if ^adam -> symbol.temporary then
      154 	     do b = s -> symbol.block_node repeat b -> block.father while (b ^= null);
      155 		do d = b -> block.default repeat d -> default.next while (d ^= null);
      156 		     if d -> default.no_defaults then
      157 			go to develop;
      158 
      159 		     valid_attribute_set, invalid_attribute_set = "0"b;
      160 		     if d -> default.system then
      161 			call system;
      162 		     else if evaluate (d, s, adam, (d -> default.predicate)) then
      163 			if d -> default.error then
      164 			     call print (211);
      165 			else
      166 			     do ds = d -> default.symbol repeat ds -> symbol.next while (ds ^= null);
      167 				string (invalid) =
      168 				     string (s -> symbol.attributes) | string (ds -> symbol.attributes);
      169 				invalid = inconsistent (invalid);
      170 
      171 				if string (invalid) ^= ""b then
      172 				     invalid_attribute_set = "1"b;
      173 				else if merge_attributes (s, ds) /* merge default symbol attributes into s */ then
      174 				     invalid_attribute_set = "1"b;
      175 				else do;
      176 				     s -> symbol.defaulted = "1"b;
      177 				     valid_attribute_set = "1"b;
      178 				end;
      179 			     end;
      180 
      181 		     if invalid_attribute_set /* None of the attribute sets could be applied. */
      182 			& ^valid_attribute_set then
      183 			call print (206);
      184 		end;
      185 	     end;
      186 
      187 	call system;
      188 
      189 /* now check that the automagickly supplied attributes still match the 
      190* * declared attributes
      191* * diagnose this: dcl x fixed bin constant
      192* */
      193 
      194 	if adam -> symbol.constant & adam -> symbol.dcl_type = by_declare & ^(s -> symbol.file | s -> symbol.entry) then do;
      195 	     call print (200);
      196 	     s -> symbol.constant = "0"b;		/* lets do it all again to get the defaults right this time. */
      197 	     call validate (s);
      198 	end;
      199 
      200 /* These errors might result from supplying the system defaults.  */
      201 
      202 	call check_extent_type;
      203 
      204 /* Restore the attributes modified above. */
      205 
      206 develop:
      207 	if created_descriptor then do;
      208 	     s -> symbol.parameter = "0"b;
      209 	     s -> symbol.param_desc = "1"b;
      210 	end;
      211 
      212 	if return_parameter then do;
      213 	     s -> symbol.parameter = "1"b;
      214 	     s -> symbol.return_value = "0"b;
      215 	end;
      216 
      217 /* remove wart -- entry() caused a dummy list to be attached to symbol.general to prevent defaulting */
      218 
      219 	if s -> symbol.entry then
      220 	     if s -> symbol.general ^= null then
      221 		if s -> symbol.general -> list.number = 0 then
      222 		     s -> symbol.general = null;
      223 
      224 /* Check for completed attributes and prevent faults if they are not complete */
      225 
      226 	m = 0;
      227 	if s -> symbol.returns then
      228 	     if s -> symbol.dcl_size = null then do;
      229 		call print (279);
      230 		s -> symbol.returns = "0"b;
      231 	     end;
      232 	if s -> symbol.dimensioned then
      233 	     if s -> symbol.array = null then do;
      234 		call print (280);
      235 		s -> symbol.dimensioned = "0"b;
      236 	     end;
      237 	if s -> symbol.picture then
      238 	     if s -> symbol.general = null then do;
      239 		call print (281);
      240 		s -> symbol.picture = "0"b;
      241 	     end;
      242 	if s -> symbol.position then
      243 	     if s -> symbol.initial = null then do;
      244 		call print (282);
      245 		s -> symbol.position = "0"b;
      246 	     end;
      247 	if s -> symbol.initialed then
      248 	     if s -> symbol.initial = null then do;
      249 		call print (283);
      250 		s -> symbol.alloc_in_text, s -> symbol.initialed = "0"b;
      251 	     end;
      252 	if s -> symbol.generic then
      253 	     if s -> symbol.general = null then do;
      254 		m = 284;
      255 		s -> symbol.generic = "0"b;
      256 	     end;
      257 	if s -> symbol.environment then
      258 	     if ^s -> symbol.interactive & ^s -> symbol.stringvalue then
      259 		m = 285;
      260 	if s -> symbol.options then
      261 	     if ^s -> symbol.variable_arg_list & ^s -> symbol.alloc_in_text & ^s -> symbol.explicit_packed then do;
      262 		m = 498;
      263 		s -> symbol.options = "0"b;
      264 	     end;
      265 	if s -> symbol.alloc_in_text then do;
      266 	     if pl1_stat_$check_ansi then
      267 		call print (349);
      268 
      269 	     if ^(s -> symbol.internal & adam -> symbol.static & (s -> symbol.structure | s -> symbol.initialed))
      270 	     then do;
      271 		m = 482;
      272 		s -> symbol.alloc_in_text = "0"b;
      273 	     end;
      274 	end;
      275 	if m ^= 0 then
      276 	     call print (m);
      277 
      278 /* check for nonstandard constructs */
      279 
      280 	if pl1_stat_$check_ansi then do;
      281 	     if s -> symbol.external then
      282 		if index (s -> symbol.token -> token.string, "$") ^= 0 then
      283 		     call print (8);
      284 	     if adam -> symbol.param_desc & s -> symbol.local then
      285 		call print (353);
      286 	end;
      287 
      288 /* check for the unaligned and decimal attributes so that the user can be warned of an implementation change for Release 25 */
      289 
      290 	if s -> symbol.unaligned & s -> symbol.decimal & ^s -> symbol.temporary then
      291 	     pl1_stat_$unaligned_dec = "1"b;
      292 
      293 /* develop the packed bit.	*/
      294 
      295 	if (s -> symbol.fixed | s -> symbol.float | s -> symbol.char | s -> symbol.bit | s -> symbol.picture
      296 	     | s -> symbol.ptr) & s -> symbol.unaligned then
      297 	     s -> symbol.packed = "1"b;
      298 
      299 /* check the declared precision	*/
      300 
      301 	if s -> symbol.fixed | s -> symbol.float then do;
      302 	     if s -> symbol.decimal then
      303 		n = max_p_dec;
      304 	     else if s -> symbol.fixed then
      305 		n = max_p_fix_bin_2;
      306 	     else
      307 		n = max_p_flt_bin_2;
      308 
      309 	     if s -> symbol.c_dcl_size > n then do;
      310 		call print (201);
      311 		s -> symbol.c_dcl_size = n;
      312 	     end;					/*
      313* NOTE: neither of the following 2 tests will ever be true, as a too 
      314*large or too small of scale NEVER occures. Scale is fixed bin (7) and can
      315*never have a too big of number to fit in it.  These tests have
      316*therefore been moved to get_scale(), which is found in
      317*attribute_parse.pl1
      318*RW 89
      319**/
      320 						/*
      321**	     if s -> symbol.scale < min_scale then do;
      322**		call print (222);
      323**		s -> symbol.scale = min_scale;
      324**	     end;
      325**	     if s -> symbol.scale > max_scale then do;
      326**		call print (222);
      327**		s -> symbol.scale = max_scale;
      328**	     end;
      329**/
      330 	     s -> symbol.precision = "1"b;
      331 	     return;
      332 	end;
      333 
      334 /* check the size of areas and strings.	*/
      335 
      336 	minimum = 0;
      337 	if s -> symbol.char then
      338 	     maximum = max_char_string;
      339 	else if s -> symbol.bit then
      340 	     maximum = max_bit_string;
      341 	else if s -> symbol.area then do;
      342 	     maximum = max_area_size;
      343 	     minimum = min_area_size;
      344 	end;
      345 	else
      346 	     return;
      347 
      348 	d = s -> symbol.dcl_size;
      349 	if d = null then
      350 	     return;				/* should emit error message about incomplete attribute set */
      351 	if d -> node.type ^= token_node then
      352 	     return;
      353 	if d -> token.type ^= dec_integer then
      354 	     return;
      355 	n = token_to_binary (d);
      356 
      357 	if n > maximum then do;
      358 	     call print (205);
      359 	     n = maximum;
      360 	end;
      361 
      362 	if n < minimum then do;
      363 	     call print (204);
      364 	     n = minimum;
      365 	end;
      366 
      367 	s -> symbol.dcl_size = null;
      368 	s -> symbol.c_dcl_size = n;
      369 	return;
      370 
      371 check_extent_type:
      372      procedure ();
      373 
      374 	m = 0;
      375 	if s -> symbol.star_extents
      376 	     & ^(adam -> symbol.parameter | adam -> symbol.param_desc | adam -> symbol.return_value) then
      377 	     m = 215;
      378 
      379 	if s -> symbol.refer_extents & ^adam -> symbol.based & string (adam -> symbol.storage_class) ^= "0"b then
      380 	     m = 217;
      381 
      382 	if s -> symbol.exp_extents & (adam -> symbol.parameter | adam -> symbol.param_desc | adam -> symbol.static) then
      383 	     m = 216;
      384 
      385 /* Check to avoid parsing ` dcl x varying; ' without a diagnostic.
      386*	   Since this is called twice, check data type to avoid printing 
      387*	   out error two times */
      388 	if s -> symbol.varying & string (s -> symbol.data_type) ^= "0"b & ^(s -> symbol.bit | s -> symbol.char) then
      389 	     m = 219;
      390 
      391 	if m ^= 0 then
      392 	     call print (m);
      393 
      394      end /* check_extent_type */;
      395 
      396 /* subroutine to print an error message.	*/
      397 
      398 print:
      399      proc (m);
      400 
      401 dcl      m fixed bin (15) parameter;
      402 
      403 	call semantic_translator$error (m, s);
      404 
      405      end;
      406 
      407 /* subroutine to check string(symbol.attributes) for inconsistency */
      408 
      409 inconsistent:
      410      procedure (bv_attributes) returns (1 aligned like symbol.attributes);
      411 
      412 /* parameters */
      413 
      414 dcl      1 bv_attributes aligned like symbol.attributes;
      415 
      416 /* automatic */
      417 
      418 dcl      1 a aligned like symbol.attributes,
      419          1 b aligned like symbol.attributes;
      420 dcl      i fixed bin;
      421 
      422 /* program */
      423 
      424 	string (a) = string (bv_attributes);
      425 	string (b) = ""b;
      426 
      427 	do i = lbound (incompatable, 1) to hbound (incompatable, 1);
      428 	     if substr (string (a), i, 1) then
      429 		string (b) = string (b) | (string (a) & incompatable (i));
      430 	end;
      431 
      432 	return (b);
      433 
      434      end inconsistent;
      435 
      436 /* subroutine to evaluate the predicate of a default statement */
      437 
      438 evaluate:
      439      procedure (d, bv_s, bv_adam, e) returns (bit (1) aligned);
      440 
      441 /* parameters */
      442 
      443 dcl      (d, bv_s, bv_adam, e) ptr parameter;
      444 
      445 /* automatic */
      446 
      447 dcl      (adam, r, s, t) ptr;
      448 dcl      (i, letterx, n) fixed bin;
      449 dcl      m fixed bin (15);
      450 dcl      c char (1);
      451 dcl      v (2:3) bit (1) aligned;
      452 dcl      ident (2) char (256) varying;
      453 dcl      word char (11);
      454 
      455 /* program */
      456 
      457 	s = bv_s;
      458 	adam = bv_adam;
      459 	if e = null then
      460 	     go to fail;
      461 	if e -> node.type = token_node then do;
      462 	     word = e -> token.string;
      463 	     letterx = binary (unspec (substr (word, 1, 1)), 9);
      464 	     do i = index_given_letter (letterx) by 1 while (keyword (i) < word);
      465 	     end;
      466 	     if keyword (i) ^= word then
      467 		go to err2;
      468 
      469 	     return (substr (string (s -> symbol.attributes), bit_index (i), 1));
      470 	end;
      471 
      472 	if e -> node.type = operator_node then do;
      473 	     n = e -> operator.number;
      474 	     if n > 3 | n < 2 then
      475 		go to err1;
      476 	     do i = 2 to n;
      477 		v (i) = evaluate (d, s, adam, (e -> operand (i)));
      478 	     end;
      479 	     if e -> operator.op_code = or_bits then
      480 		return (v (2) | v (3));
      481 	     if e -> operator.op_code = and_bits then
      482 		return (v (2) & v (3));
      483 	     if e -> operator.op_code = not_bits then
      484 		return (^v (2));
      485 	     go to err1;
      486 	end;
      487 	if e -> node.type ^= reference_node then
      488 	     go to err2;
      489 	if e -> reference.symbol -> token.string ^= "range" then
      490 	     go to err2;
      491 	r = e -> reference.offset;
      492 	if r = null then
      493 	     go to err2;
      494 	if r -> node.type ^= list_node then
      495 	     go to err2;
      496 	n = r -> list.number;
      497 	if n > 2 then
      498 	     go to err0;
      499 	if adam -> symbol.param_desc | adam -> symbol.return_value then
      500 	     go to fail;
      501 	if adam -> symbol.constant & ^(s -> symbol.file | s -> symbol.entry) then
      502 	     go to fail;
      503 
      504 	do i = 1 to n;
      505 	     if r -> element (i) -> node.type ^= token_node then
      506 		go to err2;
      507 	     ident (i) = r -> element (i) -> token.string;
      508 	end;
      509 
      510 	t = s -> symbol.token;
      511 
      512 	if n = 1 then do;
      513 	     if t -> token.size < length (ident (1)) then
      514 		go to fail;
      515 	     if ident (1) = "*" then
      516 		go to exit;
      517 	     if substr (t -> token.string, 1, length (ident (1))) ^= ident (1) then
      518 		go to fail;
      519 	     go to exit;
      520 	end;
      521 	else do;
      522 	     if length (ident (1)) ^= 1 then
      523 		go to err0;
      524 	     if length (ident (2)) ^= 1 then
      525 		go to err0;
      526 	     c = t -> token.string;
      527 	     if c < ident (2) | c > ident (1) then
      528 		go to fail;
      529 	     go to exit;
      530 	end;
      531 
      532 /* error conditions detected during predicate evaluation. */
      533 
      534 
      535 err0:
      536 	m = 207;					/* range operand syntax error	*/
      537 	go to print;
      538 err1:
      539 	m = 208;					/* operator is not boolean		*/
      540 	go to print;
      541 err2:
      542 	m = 209;					/* illegal operand in predicate	*/
      543 
      544 
      545 /* error print and recovery routine */
      546 
      547 print:
      548 	call error_$no_text (m, d -> default.source_id, null);
      549 	d -> default.predicate = null;
      550 fail:
      551 	return ("0"b);
      552 exit:
      553 	return ("1"b);
      554 
      555      end evaluate;
      556 
      557 system:
      558      proc;
      559 
      560 /* check for nonstandard defaults */
      561 
      562 	if pl1_stat_$check_ansi then
      563 	     if (s -> symbol.variable_arg_list & ^s -> symbol.entry) | (s -> symbol.environment & ^s -> symbol.file)
      564 		then
      565 		call print (126);
      566 
      567 /* entry defaults	*/
      568 
      569 	if s -> symbol.returns | s -> symbol.reducible | s -> symbol.irreducible | s -> symbol.variable_arg_list then
      570 	     s -> symbol.entry = "1"b;
      571 
      572 	if s -> symbol.entry then
      573 	     s -> symbol.irreducible = ^s -> symbol.reducible;
      574 
      575 /* file defaults	*/
      576 
      577 	if string (s -> symbol.file_attributes) then
      578 	     s -> symbol.file = "1"b;
      579 
      580 /* arithmetic defaults */
      581 
      582 	if ^s -> symbol.constant then do;
      583 	     if string (s -> symbol.data_type) = "0"b then
      584 		s -> symbol.fixed = "1"b;
      585 	     if s -> symbol.fixed | s -> symbol.float then do;
      586 
      587 /* arithmetic defaults for variables */
      588 
      589 		s -> symbol.binary = ^s -> symbol.decimal;
      590 		s -> symbol.real = ^s -> symbol.complex;
      591 		if s -> symbol.c_dcl_size = 0 then
      592 		     if s -> symbol.fixed then
      593 			if s -> symbol.binary then
      594 			     s -> symbol.c_dcl_size = default_fix_bin_p;
      595 			else
      596 			     s -> symbol.c_dcl_size = default_fix_dec_p;
      597 		     else if s -> symbol.binary then
      598 			s -> symbol.c_dcl_size = default_flt_bin_p;
      599 		     else
      600 			s -> symbol.c_dcl_size = default_flt_dec_p;
      601 	     end;
      602 	     else if (s -> symbol.bit | s -> symbol.char) then do;
      603 
      604 /* string defaults for variables */
      605 
      606 		s -> symbol.non_varying = ^s -> symbol.varying;
      607 		if s -> symbol.dcl_size = null then
      608 		     if s -> symbol.c_dcl_size = 0 then
      609 			s -> symbol.c_dcl_size = 1;
      610 	     end;
      611 	end;
      612 
      613 /* area defaults  */
      614 
      615 	if s -> symbol.area then
      616 	     if s -> symbol.dcl_size = null then
      617 		if s -> symbol.c_dcl_size = 0 then
      618 		     s -> symbol.c_dcl_size = default_area_size;
      619 
      620 /* scope class defaults	*/
      621 
      622 	if s -> symbol.file | s -> symbol.entry then
      623 	     if substr (string (s -> symbol.storage_class), 1, 7) | s -> symbol.member | s -> symbol.aligned
      624 		| s -> symbol.unaligned | s -> symbol.initialed | s -> symbol.return_value then
      625 		s -> symbol.variable = "1"b;
      626 
      627 	if ^s -> symbol.variable then
      628 	     if (s -> symbol.entry | s -> symbol.file) then
      629 		s -> symbol.constant = "1"b;
      630 
      631 	if s -> symbol.condition then
      632 	     s -> symbol.external, s -> symbol.auto = "1"b;
      633 
      634 	s -> symbol.variable =
      635 	     ^s -> symbol.constant & ^(s -> symbol.builtin | s -> symbol.condition | s -> symbol.generic);
      636 
      637 	if ((s -> symbol.file | s -> symbol.entry) & s -> symbol.constant & ^s -> symbol.internal) then
      638 	     s -> symbol.external = "1"b;
      639 
      640 	s -> symbol.internal = ^s -> symbol.external;
      641 
      642 	if s -> symbol.variable & s -> symbol.external & ^s -> symbol.controlled then
      643 	     s -> symbol.static = "1"b;
      644 
      645 	if ^(s -> symbol.builtin | s -> symbol.condition | s -> symbol.generic | s -> symbol.member) then
      646 	     if string (s -> symbol.storage_class) = "0"b then
      647 		s -> symbol.auto = "1"b;
      648 
      649 /* storage alignment and packing defaults */
      650 
      651 	if (s -> symbol.char | s -> symbol.bit | s -> symbol.picture | s -> symbol.structure)
      652 	     & ^(s -> symbol.aligned | s -> symbol.varying) then
      653 	     s -> symbol.unaligned = "1"b;
      654 
      655 	s -> symbol.aligned = ^s -> symbol.unaligned;
      656 
      657 	if (s -> symbol.fixed | s -> symbol.float) & ^(s -> symbol.signed | s -> symbol.unsigned | s -> symbol.constant)
      658 	     then
      659 	     s -> symbol.signed = "1"b;
      660 
      661      end system;
      662 
      663 /* include files */
      664 
  1     1 /* BEGIN INCLUDE FILE ... semant.incl.pl1 */
  1     2 
  1     3 /* Modified: 30 Aug 1979 by PCK to fix 1804 and 1823 */
  1     4 /* Modified: 26 Aug 1979 by PCK to implement by name assignment */
  1     5 
  1     6 
  1     7 declare	alloc_semantics	entry(pointer,pointer,pointer);
  1     8 			/* parameter 1:	(input)	block node pointer		*/
  1     9 			/* parameter 2:	(input)	statement node pointer	*/
  1    10 			/* parameter 3:	(in/out)	tree pointer		*/
  1    11 
  1    12 declare	alloc_semantics$init_only entry(pointer,pointer,pointer);
  1    13 			/* parameter 1:	(input)	qualifier pointer		*/
  1    14 			/* parameter 2:	(input)	statement node pointer	*/
  1    15 			/* parameter 3:	(input)	symbol node pointer		*/
  1    16 
  1    17 declare	builtin		entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  1    18 			returns(pointer);
  1    19 			/* parameter 1:	(input)	block node pointer		*/
  1    20 			/* parameter 2:	(input)	statement node pointer	*/
  1    21 			/* parameter 3:	(input)	tree pointer		*/
  1    22 			/* parameter 4:	(input)	subscript pointer		*/
  1    23 			/* parameter 5:	(input)	builtin symbol node pointer	*/
  1    24 			/* parameter 6:	(in/out)	context			*/
  1    25 			/* return:	(output)	tree pointer		*/
  1    26 
  1    27 declare	check_star_extents	entry(pointer,pointer);
  1    28 			/* parameter 1:	(input) symbol node of procedure	*/
  1    29 			/* parameter 2:	(input) argument list pointer		*/
  1    30 
  1    31 declare	compare_declaration	entry(pointer,pointer,bit(1) aligned) reducible
  1    32 			returns(bit(1) aligned);
  1    33 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  1    34 			/* parameter 2:	(input)	symbol node ptr	*/
  1    35 			/* parameter 3:	(input)	"1"b if aligned attribute ignored for string	*/
  1    36 			/* return:	(output)	compare bit		*/
  1    37 
  1    38 declare	context_processor	entry(pointer,label);
  1    39 			/* parameter 1:	(input)	root block node pointer	*/
  1    40 
  1    41 declare	declare		entry(pointer);
  1    42 			/* parameter 1:	(input)	symbol node pointer		*/
  1    43 
  1    44 declare	declare_structure	entry(pointer);
  1    45 			/* parameter 1:	(input)	symbol node pointer		*/
  1    46 
  1    47 declare	defined_reference	entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  1    48 			returns(pointer);
  1    49 			/* parameter 1:	(input)	block node pointer		*/
  1    50 			/* parameter 2:	(input)	statement node pointer	*/
  1    51 			/* parameter 3:	(input)	tree pointer		*/
  1    52 			/* parameter 4:	(input)	subscript list pointer or null*/
  1    53 			/* parameter 5:	(input)	symbol node pointer		*/
  1    54 			/* parameter 6:	(in/out)	context			*/
  1    55 			/* return:	(output)	tree pointer		*/
  1    56 
  1    57 declare	do_semantics	entry(pointer,pointer,pointer);
  1    58 			/* parameter 1:	(input)	block node pointer		*/
  1    59 			/* parameter 2:	(input)	statement node pointer	*/
  1    60 			/* parameter 3:	(input)	tree pointer		*/
  1    61 
  1    62 declare	expand_assign	entry(pointer,pointer,pointer,bit(36) aligned,pointer)
  1    63 			returns(pointer);
  1    64 			/* parameter 1:	(input)	block node pointer		*/
  1    65 			/* parameter 2:	(input)	statement node pointer	*/
  1    66 			/* parameter 3:	(input)	tree pointer		*/
  1    67 			/* parameter 4:	(in/out)	context			*/
  1    68 			/* parameter 5:	(input)	aggregate reference node ptr	*/
  1    69 			/* return:	(output)	tree pointer		*/
  1    70 
  1    71 declare	expand_by_name	entry(pointer,pointer,pointer);
  1    72 			/* parameter 1:	(input)	block node pointer		*/
  1    73 			/* parameter 2:	(input)	statement node pointer	*/
  1    74 			/* parameter 3:	(input/output)	tree pointer		*/
  1    75 
  1    76 declare	expand_infix	entry(pointer,pointer,pointer,bit(36) aligned)
  1    77 			returns(pointer);
  1    78 			/* parameter 1:	(input)	block node pointer		*/
  1    79 			/* parameter 2:	(input)	statement node pointer	*/
  1    80 			/* parameter 3:	(input)	tree pointer		*/
  1    81 			/* parameter 4:	(in/out)	context			*/
  1    82 			/* return:	(output)	tree pointer		*/
  1    83 
  1    84 declare	expand_initial	entry(pointer,pointer,pointer);
  1    85 			/* parameter 1:	(input)	symbol node pointer		*/
  1    86 			/* parameter 2:	(input)	statement node pointer	*/
  1    87 			/* parameter 3:	(input)	locator			*/
  1    88 
  1    89 declare	expand_prefix	entry(pointer,pointer,pointer,bit(36) aligned)
  1    90 			returns(pointer);
  1    91 			/* parameter 1:	(input)	block node pointer		*/
  1    92 			/* parameter 2:	(input)	statement node pointer	*/
  1    93 			/* parameter 3:	(input)	tree pointer		*/
  1    94 			/* parameter 4:	(in/out)	context			*/
  1    95 			/* return:	(output)	tree pointer		*/
  1    96 
  1    97 declare	expand_primitive	entry(pointer,pointer,pointer,bit(36) aligned)
  1    98 			returns(pointer);
  1    99 			/* parameter 1:	(input)	block node pointer		*/
  1   100 			/* parameter 2:	(input)	statement node pointer	*/
  1   101 			/* parameter 3:	(input)	tree pointer		*/
  1   102 			/* parameter 4:	(input)	context			*/
  1   103 			/* return:	(output)	tree pointer		*/
  1   104 
  1   105 declare	expression_semantics entry(pointer,pointer,pointer,bit(36) aligned)
  1   106 			returns(pointer);
  1   107 			/* parameter 1:	(input)	block node pointer		*/
  1   108 			/* parameter 2:	(input)	statement node pointer	*/
  1   109 			/* parameter 3:	(input)	tree pointer		*/
  1   110 			/* parameter 4:	(in/out)	context			*/
  1   111 			/* return:	(output)	tree pointer		*/
  1   112 
  1   113 declare	fill_refer	entry(pointer,pointer,bit(1) aligned)
  1   114 			returns(pointer);
  1   115 			/* parameter 1:	(input)	null,ref node,op node ptr */
  1   116 			/* parameter 2:	(input)	null,ref node,op node ptr */
  1   117 			/* parameter 3:	(input)	copy switch for param 2 */
  1   118 			/* return:	(output)	ptr to processed tree */
  1   119 
  1   120 declare	io_data_list_semantics$format_list_semantics entry(pointer,pointer,pointer);
  1   121 			/* parameter 1:	(input)	block node pointer		*/
  1   122 			/* parameter 2:	(input)	statement node pointer	*/
  1   123 			/* parameter 3:	(in/out)	tree pointer		*/
  1   124 
  1   125 declare	function		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   126 			returns(pointer);
  1   127 			/* parameter 1:	(input)	block node pointer		*/
  1   128 			/* parameter 2:	(input)	statement node pointer	*/
  1   129 			/* parameter 3:	(input)	tree pointer		*/
  1   130 			/* parameter 4:	(input)	symbol node pointer		*/
  1   131 			/* parameter 5:	(in/out)	context			*/
  1   132 			/* return:	(output)	tree pointer		*/
  1   133 
  1   134 declare	generic_selector	entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   135 			returns(pointer);
  1   136 			/* parameter 1:	(input)	block node pointer	*/
  1   137 			/* parameter 2:	(input)	statement node pointer	*/
  1   138 			/* parameter 3:	(input)	tree pointer	*/
  1   139 			/* parameter 4:	(input)	pointer to argument list	*/
  1   140 			/* parameter 5:	(in/out)	context		*/
  1   141 			/* return:	(output)	tree pointer	*/
  1   142 
  1   143 declare	io_data_list_semantics entry(pointer,pointer,pointer);
  1   144 			/* parameter 1:	(input)	block node pointer		*/
  1   145 			/* parameter 2:	(input)	statement node pointer	*/
  1   146 			/* parameter 3:	(input)	operator node pointer	*/
  1   147 
  1   148 declare	io_semantics	entry(pointer,pointer,pointer);
  1   149 			/* parameter 1:	(input)	block node pointer		*/
  1   150 			/* parameter 2:	(input)	statement node pointer	*/
  1   151 			/* parameter 3:	(input)	tree pointer		*/
  1   152 
  1   153 declare	lookup		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   154 			returns(bit(1) aligned);
  1   155 			/* parameter 1:	(input)	block node pointer		*/
  1   156 			/* parameter 2:	(input)	stmnt|symbol node pointer	*/
  1   157 			/* parameter 3:	(input)	token or reference node ptr	*/
  1   158 			/* parameter 4:	(output)	symbol node pointer		*/
  1   159 			/* parameter 5:	(in/out)	context			*/
  1   160 			/* return:	(output)	symbol found bit		*/
  1   161 
  1   162 declare	make_non_quick	entry(pointer, bit (36) aligned);
  1   163 			/* parameter 1:	(input)	tree pointer	*/
  1   164 			/* parameter 2:	(input)	reason why being made nonquick */
  1   165 
  1   166 declare	match_arguments	entry(pointer,pointer) reducible
  1   167 			returns(bit(1) aligned);
  1   168 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  1   169 			/* parameter 2:	(input)	reference or symbol node ptr	*/
  1   170 			/* return:	(output)	compare bit		*/
  1   171 
  1   172 declare	offset_adder	entry(pointer,fixed binary(31),fixed binary(3),bit(1) aligned,
  1   173 			      pointer,fixed binary(31),fixed binary(3),bit(1) aligned,bit(1));
  1   174 			/* parameter 1:	(in/out)	tree pointer		*/
  1   175 			/* parameter 2:	(in/out)	constant size		*/
  1   176 			/* parameter 3:	(in/out)	units			*/
  1   177 			/* parameter 4:	(in/out) 	ON if units ^= word_, but tree in words	*/
  1   178 			/* parameter 5:	(input)	tree pointer		*/
  1   179 			/* parameter 6:	(input)	constant size		*/
  1   180 			/* parameter 7:	(input)	units			*/
  1   181 			/* parameter 8:	(input)	ON if units ^= word_, but tree in words	*/
  1   182 			/* parameter 9:	(input)	ON if should not improve units	*/
  1   183 
  1   184 declare	operator_semantics	entry(pointer,pointer,pointer,bit(36) aligned)
  1   185 			returns(pointer);
  1   186 			/* parameter 1:	(input)	block node pointer		*/
  1   187 			/* parameter 2:	(input)	statement node pointer	*/
  1   188 			/* parameter 3:	(input)	tree pointer		*/
  1   189 			/* parameter 4:	(in/out)	context			*/
  1   190 			/* return:	(output)	tree pointer		*/
  1   191 
  1   192 declare	propagate_bit	entry(pointer,fixed binary(15));
  1   193 			/* parameter 1:	(input)	symbol node pointer		*/
  1   194 			/* parameter 2:	(input)	attribute number		*/
  1   195 
  1   196 declare	semantic_translator$call_es entry(pointer,pointer,pointer,label,bit(1) aligned)
  1   197 			returns(pointer);
  1   198 			/* parameter 1:	(input)	block ptr	*/
  1   199 			/* parameter 2:	(input)	statement ptr	*/
  1   200 			/* parameter 3:	(input)	tree ptr	*/
  1   201 			/* parameter 4:	(input)	failure label	*/
  1   202 			/* parameter 5:	(input)	"1"b -- convert to integer	*/
  1   203 			/* return:	(output)	tree ptr		*/
  1   204 
  1   205 declare	simplify_expression	entry(pointer,fixed bin,bit(1)aligned);
  1   206 			/* parameter 1:	(in/out)	tree pointer		*/
  1   207 			/* parameter 2:	(output)	value of constant, if the entire tree
  1   208*						is simplified		*/
  1   209 			/* parameter 3:	(output)	bit indicating if the tree has
  1   210*						been simplified		*/
  1   211 
  1   212 declare	simplify_offset	entry(pointer,bit(36) aligned);
  1   213 			/* parameter 1:	(input)	reference node pointer	*/
  1   214 			/* parameter 2:	(input)	context			*/
  1   215 
  1   216 declare	subscripter	entry(pointer,pointer,pointer,pointer,pointer)
  1   217 			returns(pointer);
  1   218 			/* parameter 1:	(input)	block node pointer		*/
  1   219 			/* parameter 2:	(input)	statement node pointer	*/
  1   220 			/* parameter 3:	(input)	tree pointer		*/
  1   221 			/* parameter 4:	(in/out)	subscript list pointer	*/
  1   222 			/* parameter 5:	(input)	symbol node pointer		*/
  1   223 			/* return:	(output)	reference node pointer	*/
  1   224 
  1   225 declare	validate		entry(pointer);
  1   226 			/* parameter 1:	(input)	symbol node pointer		*/
  1   227 
  2     1 /****^  *********************************************************
  2     2*        *                                                       *
  2     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  2     4*        *                                                       *
  2     5*        ********************************************************* */
  2     6 
  2     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  2     8 
  2     9 
  2    10 /****^  HISTORY COMMENTS:
  2    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  2    12*     install(89-07-31,MR12.3-1066):	
  2    13*     Removed the obsolete parameter source_line from the dcl of error_().
  2    14*                                                   END HISTORY COMMENTS */
  2    15 
  2    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  2    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  2    18* */
  2    19 
  2    20 declare	adjust_count	entry(pointer);
  2    21 			/* parameter 1:	(input)	any node pointer		*/
  2    22 
  2    23 declare	bindec		entry(fixed bin(31)) reducible
  2    24 			returns(character(12) aligned);
  2    25 			/* parameter 1:	(input)	bin value			*/
  2    26 			/* return:	(output)	character value with blanks	*/
  2    27 
  2    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  2    29 			returns(character(12) aligned varying);
  2    30 			/* parameter 1:	(input)	binary value		*/
  2    31 			/* return:	(output)	char value without blanks	*/
  2    32 
  2    33 declare	binoct		entry(fixed bin(31)) reducible
  2    34 			returns(char(12) aligned);
  2    35 			/* parameter 1:	(input)	binary value		*/
  2    36 			/* return:	(output)	char value with blanks	*/
  2    37 
  2    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  2    39 			returns(char(12) aligned);
  2    40 			/* parameter 1:	(input)	binary value		*/
  2    41 			/* return:	(output)	right-aligned char value	*/
  2    42 
  2    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  2    44 			returns(char(12) varying aligned);
  2    45 			/* parameter 1:	(input)	binary value		*/
  2    46 			/* returns:	(output)	char value without blanks	*/
  2    47 
  2    48 declare	compare_expression	entry(pointer,pointer) reducible
  2    49 			returns(bit(1) aligned);
  2    50 			/* parameter 1:	(input)	any node pointer		*/
  2    51 			/* parameter 2:	(input)	any node pointer		*/
  2    52 			/* return:	(output)	compare bit		*/
  2    53 
  2    54 declare	constant_length	entry (pointer, fixed bin (71))
  2    55 			returns (bit (1) aligned);
  2    56 			/* parameter 1:	(input)	reference node pointer	*/
  2    57 			/* parameter 2:	(input)	value of constant length	*/
  2    58 			/* return:	(output)	"1"b if constant length	*/
  2    59 
  2    60 declare	convert		entry(pointer,bit(36) aligned)
  2    61 			returns(pointer);
  2    62 			/* parameter 1:	(input)	any node pointer		*/
  2    63 			/* parameter 2:	(input)	target type		*/
  2    64 			/* return:	(output)	target value tree pointer	*/
  2    65 
  2    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  2    67 			returns(pointer);
  2    68 			/* parameter 1:	(input)	any node pointer		*/
  2    69 			/* parameter 2:	(input)	target type		*/
  2    70 			/* return:	(output)	target value tree pointer	*/
  2    71 
  2    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  2    73 			returns(pointer);
  2    74 			/* parameter 1:	(input)	any node pointer		*/
  2    75 			/* parameter 2:	(input)	target type		*/
  2    76 			/* return:	(output)	target value tree pointer	*/
  2    77 
  2    78 declare	convert$validate	entry(pointer,pointer);
  2    79 			/* parameter 1:	(input)	source value tree pointer	*/
  2    80 			/* parameter 2:	(input)	target reference node pointer	*/
  2    81 
  2    82 declare	convert$to_target_fb entry(pointer,pointer)
  2    83 			returns(pointer);
  2    84 			/* parameter 1:	(input)	source value tree pointer	*/
  2    85 			/* parameter 2:	(input)	target reference node pointer	*/
  2    86 			/* return:	(output)	target value tree pointer	*/
  2    87 
  2    88 declare	convert$to_target	entry(pointer,pointer)
  2    89 			returns(pointer);
  2    90 			/* parameter 1:	(input)	source value tree pointer	*/
  2    91 			/* parameter 2:	(input)	target reference node pointer	*/
  2    92 			/* return:	(output)	target value tree pointer	*/
  2    93 
  2    94 declare	copy_expression	entry(pointer unaligned)
  2    95 			returns(pointer);
  2    96 			/* parameter 1:	(input)	any node pointer		*/
  2    97 			/* return:	(output)	any node pointer		*/
  2    98 
  2    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  2   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  2   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  2   102 
  2   103 declare	copy_unique_expression entry(pointer)
  2   104 			returns(pointer);
  2   105 			/* parameter 1:	(input)	any node pointer		*/
  2   106 			/* return:	(output)	any node pointer		*/
  2   107 
  2   108 declare	create_array	entry()
  2   109 			returns(pointer);
  2   110 			/* return:	(output)	array node pointer		*/
  2   111 
  2   112 declare	create_block	entry(bit(9) aligned,pointer)
  2   113 			returns(pointer);
  2   114 			/* parameter 1:	(input)	block type		*/
  2   115 			/* parameter 2:	(input)	father block node pointer	*/
  2   116 			/* return:	(output)	block node pointer		*/
  2   117 
  2   118 declare	create_bound	entry()
  2   119 			returns(pointer);
  2   120 			/* return:	(output)	bound node pointer		*/
  2   121 
  2   122 declare	create_context	entry(pointer,pointer)
  2   123 			returns(pointer);
  2   124 			/* parameter 1:	(input)	block node pointer		*/
  2   125 			/* parameter 2:	(input)	token pointer		*/
  2   126 			/* return:	(output)	context node pointer	*/
  2   127 
  2   128 declare	create_cross_reference entry()
  2   129 			returns(pointer);
  2   130 			/* return:	(output)	cross reference node pointer	*/
  2   131 
  2   132 declare	create_default	entry
  2   133 			returns(pointer);
  2   134 			/* return:	(output)	default node pointer	*/
  2   135 
  2   136 declare	create_identifier	entry()
  2   137 			returns(pointer);
  2   138 			/* return:	(output)	token node pointer		*/
  2   139 
  2   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  2   141 			returns(pointer);
  2   142 			/* parameter 1:	(input)	block node pointer		*/
  2   143 			/* parameter 2:	(input)	token node pointer		*/
  2   144 			/* parameter 3:	(input)	declare type		*/
  2   145 			/* return:	(output)	label node pointer		*/
  2   146 
  2   147 declare	create_list	entry(fixed bin(15))
  2   148 			returns(pointer);
  2   149 			/* parameter 1:	(input)	number of list elements	*/
  2   150 			/* return:	(output)	list node pointer		*/
  2   151 
  2   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  2   153 			returns(pointer);
  2   154 			/* parameter 1:	(input)	operator type		*/
  2   155 			/* parameter 2:	(input)	number of operands		*/
  2   156 			/* return:	(output)	operator node pointer	*/
  2   157 
  2   158 declare	create_reference	entry(pointer)
  2   159 			returns(pointer);
  2   160 			/* parameter 1:	(input)	symbol node pointer		*/
  2   161 			/* return:	(output)	reference node pointer	*/
  2   162 
  2   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   164 			returns(pointer);
  2   165 			/* parameter 1:	(input)	statement type		*/
  2   166 			/* parameter 2:	(input)	block node pointer		*/
  2   167 			/* parameter 3:	(input)	label node pointer		*/
  2   168 			/* parameter 4:	(input)	conditions		*/
  2   169 			/* return:	(output)	statement node pointer	*/
  2   170 
  2   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   172 			returns(pointer);
  2   173 			/* parameter 1:	(input)	statement type		*/
  2   174 			/* parameter 2:	(input)	block node pointer		*/
  2   175 			/* parameter 3:	(input)	label node pointer		*/
  2   176 			/* parameter 4:	(input)	conditions		*/
  2   177 			/* return:	(output)	statement node pointer	*/
  2   178 
  2   179 declare	create_storage	entry(fixed bin(15))
  2   180 			returns(pointer);
  2   181 			/* parameter 1:	(input)	number of words		*/
  2   182 			/* return:	(output)	storage block pointer	*/
  2   183 
  2   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  2   185 			returns(pointer);
  2   186 			/* parameter 1:	(input)	block node pointer		*/
  2   187 			/* parameter 2:	(input)	token node pointer		*/
  2   188 			/* parameter 3:	(input)	declare type		*/
  2   189 			/* return:	(output)	symbol node pointer		*/
  2   190 
  2   191 declare	create_token	entry (character (*), bit (9) aligned)
  2   192 			returns (ptr);
  2   193 			/* parameter 1:	(input)	token string		*/
  2   194 			/* parameter 2:	(input)	token type		*/
  2   195 			/* return:	(output)	token node ptr		*/
  2   196 
  2   197 declare	create_token$init_hash_table entry ();
  2   198 
  2   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  2   200 			returns (ptr);
  2   201 			/* parameter 1:	(input)	token string		*/
  2   202 			/* parameter 2:	(input)	token type		*/
  2   203 			/* parameter 3:	(input)	protected flag		*/
  2   204 			/* return:	(output)	token node ptr		*/
  2   205 
  2   206 declare	decbin		entry(character(*) aligned) reducible
  2   207 			returns(fixed bin(31));
  2   208 			/* parameter 1:	(input)	decimal character string	*/
  2   209 			/* return:	(output)	binary value		*/
  2   210 
  2   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  2   212 			returns(pointer);
  2   213 			/* parameter 1:	(input)	value			*/
  2   214 			/* parameter 2:	(input)	type			*/
  2   215 			/* parameter 3:	(input)	size			*/
  2   216 			/* parameter 4:	(input)	scale			*/
  2   217 			/* return:	(output)	reference node pointer	*/
  2   218 
  2   219 declare	declare_constant$bit entry(bit(*) aligned)
  2   220 			returns(pointer);
  2   221 			/* parameter 1:	(input)	bit			*/
  2   222 			/* return:	(output)	reference node pointer	*/
  2   223 
  2   224 declare	declare_constant$char entry(character(*) aligned)
  2   225 			returns(pointer);
  2   226 			/* parameter 1:	(input)	character			*/
  2   227 			/* return:	(output)	reference node pointer	*/
  2   228 
  2   229 declare	declare_constant$desc entry(bit(*) aligned)
  2   230 			returns(pointer);
  2   231 			/* parameter 1:	(input)	descriptor bit value	*/
  2   232 			/* return:	(output)	reference node pointer	*/
  2   233 
  2   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  2   235 			returns(pointer);
  2   236 			/* parameter 1:	(input)	integer			*/
  2   237 			/* return:	(output)	reference node pointer	*/
  2   238 
  2   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   240 			returns(pointer);
  2   241 			/* parameter 1:	(input)	block node pointer		*/
  2   242 			/* parameter 2:	(input)	statement node pointer	*/
  2   243 			/* parameter 3:	(input)	symbol node pointer		*/
  2   244 			/* parameter 4:	(input)	loc pointer		*/
  2   245 			/* parameter 5:	(input)	array descriptor bit
  2   246*						cross_section bit	*/
  2   247 			/* return:	(output)	reference node pointer	*/
  2   248 
  2   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   250 			returns(pointer);
  2   251 			/* parameter 1:	(input)	block node pointer	*/
  2   252 			/* parameter 2:	(input)	statement node pointer 	*/
  2   253 			/* parameter 3:	(input)	symbol node pointer	*/
  2   254 			/* parameter 4:	(input)	loc pointer	*/
  2   255 			/* parameter 5:	(input)	array descriptor bit
  2   256*						cross_section bit	*/
  2   257 			/* return:	(output)	reference node pointer	*/
  2   258 
  2   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   260 			returns(pointer);
  2   261 			/* parameter 1:	(input)	block node pointer		*/
  2   262 			/* parameter 2:	(input)	statement node pointer	*/
  2   263 			/* parameter 3:	(input)	symbol node pointer		*/
  2   264 			/* parameter 4:	(input)	loc pointer		*/
  2   265 			/* parameter 5:	(input)	array descriptor bit
  2   266*						cross_section bit	*/
  2   267 			/* return:	(output)	reference node pointer	*/
  2   268 
  2   269 declare	declare_integer	entry(pointer)
  2   270 			returns(pointer);
  2   271 			/* parameter 1:	(input)	block node pointer		*/
  2   272 			/* return:	(output)	reference node pointer 	*/
  2   273 
  2   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  2   275 			/* parameter 1:	(input)	picture string		*/
  2   276 			/* parameter 2:	(input)	symbol node pointer		*/
  2   277 			/* parameter 3:	(output)	error code, if any		*/
  2   278 
  2   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  2   280 			returns(pointer);
  2   281 			/* parameter 1:	(input)	picture string		*/
  2   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  2   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  2   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  2   285 			/* return:	(output)	reference node pointer	*/
  2   286 
  2   287 declare	declare_pointer	entry(pointer)
  2   288 			returns(pointer);
  2   289 			/* parameter 1:	(input)	block node pointer		*/
  2   290 			/* return:	(output)	reference node pointer	*/
  2   291 
  2   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  2   293 			returns(pointer);
  2   294 			/* parameter 1:	(input)	type			*/
  2   295 			/* parameter 2:	(input)	precision			*/
  2   296 			/* parameter 3:	(input)	scale			*/
  2   297 			/* parameter 4:	(input)	length			*/
  2   298 			/* return:	(output)	reference node pointer	*/
  2   299 
  2   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  2   301 			returns(char(120) varying);
  2   302 			/* parameter 1:	(input)	node pointer		*/
  2   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   304 			/* return:	(output)	source line id		*/
  2   305 
  2   306 declare	decode_source_id	entry(
  3     1 			1 structure unaligned,
  3     2 			  2 /* file_number */	bit(8),
  3     3 			  2 /* line_number */	bit(14),
  3     4 			  2 /* stmt_number */	bit(5),
  2   307 
  2   308 			bit(1) aligned)
  2   309 			returns(char(120) varying);
  2   310 			/* parameter 1:	(input)	source id			*/
  2   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   312 			/* return:	(output)	source line id		*/
  2   313 
  2   314 declare	error		entry(fixed bin(15),pointer,pointer);
  2   315 			/* parameter 1:	(input)	error number		*/
  2   316 			/* parameter 2:	(input)	statement node pointer or null*/
  2   317 			/* parameter 3:	(input)	token node pointer 		*/
  2   318 
  2   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  2   320 			/* parameter 1:	(input)	error number		*/
  2   321 			/* parameter 2:	(input)	statement node pointer or null*/
  2   322 			/* parameter 3:	(input)	token node pointer 		*/
  2   323 
  2   324 declare	error_		entry(fixed bin(15),
  4     1 			1 structure unaligned,
  4     2 			  2 /* file_number */	bit(8),
  4     3 			  2 /* line_number */	bit(14),
  4     4 			  2 /* stmt_number */	bit(5),
  2   325 
  2   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  2   327 			/* parameter 1:	(input)	error number		*/
  2   328 			/* parameter 2:	(input)	statement id		*/
  2   329 			/* parameter 3:	(input)	any node pointer		*/
  2   330 			/* parameter 4:	(input)	source segment		*/
  2   331 			/* parameter 5:	(input)	source starting character	*/
  2   332 			/* parameter 6:	(input)	source length		*/
  2   333 
  2   334 declare	error_$no_text	entry(fixed bin(15),
  5     1 			1 structure unaligned,
  5     2 			  2 /* file_number */	bit(8),
  5     3 			  2 /* line_number */	bit(14),
  5     4 			  2 /* stmt_number */	bit(5),
  2   335 
  2   336 			pointer);
  2   337 			/* parameter 1:	(input)	error number		*/
  2   338 			/* parameter 2:	(input)	statement id		*/
  2   339 			/* parameter 3:	(input)	any node pointer		*/
  2   340 
  2   341 declare	error_$initialize_error entry();
  2   342 
  2   343 declare	error_$finish	entry();
  2   344 
  2   345 declare	free_node		entry(pointer);
  2   346 			/* parameter 1:	any node pointer			*/
  2   347 
  2   348 declare	get_array_size	entry(pointer,fixed bin(3));
  2   349 			/* parameter 1:	(input)	symbol node pointer		*/
  2   350 			/* parameter 2:	(input)	units			*/
  2   351 
  2   352 declare	get_size		entry(pointer);
  2   353 			/* parameter 1:	(input)	symbol node pointer		*/
  2   354 
  2   355 declare	merge_attributes	external entry(pointer,pointer)
  2   356 			returns(bit(1) aligned);
  2   357 			/* parameter 1:	(input)	target symbol node pointer */
  2   358 			/* parameter 2:	(input)	source symbol node pointer */
  2   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  2   360 
  2   361 declare	optimizer		entry(pointer);
  2   362 			/* parameter 1:	(input)	root pointer		*/
  2   363 
  2   364 declare	parse_error	entry(fixed bin(15),pointer);
  2   365 			/* parameter 1:	(input)	error number		*/
  2   366 			/* parameter 2:	(input)	any node pointer		*/
  2   367 
  2   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  2   369 			/* parameter 1:	(input)	error number		*/
  2   370 			/* parameter 2:	(input)	any node pointer		*/
  2   371 
  2   372 declare	pl1_error_print$write_out
  2   373 			entry(fixed bin(15),
  6     1 			1 structure unaligned,
  6     2 			  2 /* file_number */	bit(8),
  6     3 			  2 /* line_number */	bit(14),
  6     4 			  2 /* stmt_number */	bit(5),
  2   374 
  2   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  2   376 			/* parameter 1:	(input)	error number		*/
  2   377 			/* parameter 2:	(input)	statement identification	*/
  2   378 			/* parameter 3:	(input)	any node pointer		*/
  2   379 			/* parameter 4:	(input)	source segment		*/
  2   380 			/* parameter 5:	(input)	source character index	*/
  2   381 			/* parameter 6:	(input)	source length		*/
  2   382 			/* parameter 7:	(input)	source line		*/
  2   383 
  2   384 declare	pl1_error_print$listing_segment
  2   385 			entry(fixed bin(15),
  7     1 			1 structure unaligned,
  7     2 			  2 /* file_number */	bit(8),
  7     3 			  2 /* line_number */	bit(14),
  7     4 			  2 /* stmt_number */	bit(5),
  2   386 
  2   387 			pointer);
  2   388 			/* parameter 1:	(input)	error number		*/
  2   389 			/* parameter 2:	(input)	statement identification	*/
  2   390 			/* parameter 3:	(input)	token node pointer		*/
  2   391 
  2   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  2   393 			/* parameter 1:	(input)	string			*/
  2   394 
  2   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  2   396 			/* parameter 1:	(input)	string			*/
  2   397 
  2   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  2   399 			/* parameter 1:	(input)	string			*/
  2   400 			/* parameter 2:	(input)	string length or 0		*/
  2   401 
  2   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  2   403 			/* parameter 1:	(input)	string			*/
  2   404 			/* parameter 2:	(input)	string length or 0		*/
  2   405 
  2   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  2   407 			/* parameter 1:	(input)	string pointer		*/
  2   408 			/* parameter 2:	(input)	string size		*/
  2   409 
  2   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  2   411 			/* parameter 1:	(input)	string pointer		*/
  2   412 			/* parameter 2:	(input)	string length or 0		*/
  2   413 
  2   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  2   415 			/* parameter 1:	(input)	string			*/
  2   416 			/* parameter 2:	(input)	length			*/
  2   417 
  2   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  2   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  2   420 			/* parameter 2:	(input)	line number		*/
  2   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  2   422 			/* parameter 4:	(input)	number of chars to copy	*/
  2   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  2   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  2   425 
  2   426 declare	refer_extent	entry(pointer,pointer);
  2   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  2   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  2   429 
  2   430 declare	reserve$clear	entry()
  2   431 			returns(pointer);
  2   432 			/* return:	(output)	pointer			*/
  2   433 
  2   434 declare	reserve$declare_lib	entry(fixed bin(15))
  2   435 			returns(pointer);
  2   436 			/* parameter 1:	(input)	builtin function number	*/
  2   437 			/* return:	(output)	pointer			*/
  2   438 
  2   439 declare	reserve$read_lib	entry(fixed bin(15))
  2   440 			returns(pointer);
  2   441 			/* parameter 1:	(input)	builtin function number	*/
  2   442 			/* return:	(output)	pointer			*/
  2   443 
  2   444 declare	semantic_translator	entry();
  2   445 
  2   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  2   447 			/* parameter 1:	(input)	error number		*/
  2   448 			/* parameter 2:	(input)	any node pointer		*/
  2   449 
  2   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  2   451 			/* parameter 1:	(input)	error number		*/
  2   452 			/* parameter 2:	(input)	any node pointer		*/
  2   453 
  2   454 declare	share_expression	entry(ptr)
  2   455 			returns(ptr);
  2   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  2   457 			/* return:	(output)	tree pointer or null	*/
  2   458 
  2   459 declare	token_to_binary	entry(ptr) reducible
  2   460 			returns(fixed bin(31));
  2   461 			/* parameter 1:	(input)	token node pointer		*/
  2   462 			/* return:	(output)	converted binary value	*/
  2   463 
  2   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
  1   228 
  1   229 /* END INCLUDE FILE ... semant.incl.pl1 */
      665 
  8     1 
  8     2 dcl	1 default			based aligned,
  8     3 	2 node_type		bit(9) unaligned,
  8     4 	2 source_id		structure unaligned,
  8     5 	  3 file_number		bit(8),
  8     6 	  3 line_number		bit(14),
  8     7 	  3 statement_number	bit(5),
  8     8 	2 next			ptr unaligned,
  8     9 	2 predicate		ptr unaligned,
  8    10 	2 symbol			ptr unaligned,
  8    11 	2 system			bit(1) unaligned,
  8    12 	2 error			bit(1) unaligned,
  8    13 	2 no_defaults		bit(1) unaligned,
  8    14 	2 reserved		bit(29) unaligned;
      666 
  9     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
  9     2 
  9     3 dcl	1 symbol			based aligned,
  9     4 	2 node_type		bit(9) unal,
  9     5 	2 source_id		structure unal,
  9     6 	  3 file_number		bit(8),
  9     7 	  3 line_number		bit(14),
  9     8 	  3 statement_number	bit(5),
  9     9 	2 location		fixed(18) unal unsigned,
  9    10 	2 allocated		bit(1) unal,
  9    11 	2 dcl_type		bit(3) unal,
  9    12 	2 reserved		bit(6) unal,
  9    13 	2 pix			unal,
  9    14 	  3 pic_fixed		bit(1) unal,
  9    15 	  3 pic_float		bit(1) unal,
  9    16 	  3 pic_char		bit(1) unal,
  9    17 	  3 pic_scale		fixed(7) unal,
  9    18 	  3 pic_size		fixed(7) unal,
  9    19 	2 level			fixed(8) unal,
  9    20 	2 boundary		fixed(3) unal,
  9    21 	2 size_units		fixed(3) unal,
  9    22 	2 scale			fixed(7) unal,
  9    23 	2 runtime			bit(18) unal,
  9    24 	2 runtime_offset		bit(18) unal,
  9    25 	2 block_node		ptr unal,
  9    26 	2 token			ptr unal,
  9    27 	2 next			ptr unal,
  9    28 	2 multi_use		ptr unal,
  9    29 	2 cross_references		ptr unal,
  9    30 	2 initial			ptr unal,
  9    31 	2 array			ptr unal,
  9    32 	2 descriptor		ptr unal,
  9    33 	2 equivalence		ptr unal,
  9    34 	2 reference		ptr unal,
  9    35 	2 general			ptr unal,
  9    36 	2 father			ptr unal,
  9    37 	2 brother			ptr unal,
  9    38 	2 son			ptr unal,
  9    39 	2 word_size		ptr unal,
  9    40 	2 bit_size		ptr unal,
  9    41 	2 dcl_size		ptr unal,
  9    42 	2 symtab_size		ptr unal,
  9    43 	2 c_word_size		fixed(24),
  9    44 	2 c_bit_size		fixed(24),
  9    45 	2 c_dcl_size		fixed(24),
  9    46 
  9    47 	2 attributes		structure aligned,
  9    48 	  3 data_type		structure unal,
  9    49 	    4 structure		bit(1) ,
  9    50 	    4 fixed		bit(1),
  9    51 	    4 float		bit(1),
  9    52 	    4 bit			bit(1),
  9    53 	    4 char		bit(1),
  9    54 	    4 ptr			bit(1),
  9    55 	    4 offset		bit(1),
  9    56 	    4 area		bit(1),
  9    57 	    4 label		bit(1),
  9    58 	    4 entry		bit(1),
  9    59 	    4 file		bit(1),
  9    60 	    4 arg_descriptor	bit(1),
  9    61 	    4 storage_block		bit(1),
  9    62 	    4 explicit_packed	bit(1), /* options(packed) */
  9    63 	    4 condition		bit(1),
  9    64 	    4 format		bit(1),
  9    65 	    4 builtin		bit(1),
  9    66 	    4 generic		bit(1),
  9    67 	    4 picture		bit(1),
  9    68 
  9    69 	  3 misc_attributes		structure unal,
  9    70 	    4 dimensioned		bit(1),
  9    71 	    4 initialed		bit(1),
  9    72 	    4 aligned		bit(1),
  9    73 	    4 unaligned		bit(1),
  9    74 	    4 signed		bit(1),
  9    75 	    4 unsigned		bit(1),
  9    76 	    4 precision		bit(1),
  9    77 	    4 varying		bit(1),
  9    78 	    4 local		bit(1),
  9    79 	    4 decimal		bit(1),
  9    80 	    4 binary		bit(1),
  9    81 	    4 real		bit(1),
  9    82 	    4 complex		bit(1),
  9    83 	    4 variable		bit(1),
  9    84 	    4 reducible		bit(1),
  9    85 	    4 irreducible		bit(1),
  9    86 	    4 returns		bit(1),
  9    87 	    4 position		bit(1),
  9    88 	    4 internal		bit(1),
  9    89 	    4 external		bit(1),
  9    90 	    4 like		bit(1),
  9    91 	    4 member		bit(1),
  9    92 	    4 non_varying		bit(1),
  9    93 	    4 options		bit(1),
  9    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
  9    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
  9    96 
  9    97 	  3 storage_class		structure unal,
  9    98 	    4 auto		bit(1),
  9    99 	    4 based		bit(1),
  9   100 	    4 static		bit(1),
  9   101 	    4 controlled		bit(1),
  9   102 	    4 defined		bit(1),
  9   103 	    4 parameter		bit(1),
  9   104 	    4 param_desc		bit(1),
  9   105 	    4 constant		bit(1),
  9   106 	    4 temporary		bit(1),
  9   107 	    4 return_value		bit(1),
  9   108 
  9   109 	  3 file_attributes		structure unal,
  9   110 	    4 print		bit(1),
  9   111 	    4 input		bit(1),
  9   112 	    4 output		bit(1),
  9   113 	    4 update		bit(1),
  9   114 	    4 stream		bit(1),
  9   115 	    4 reserved_1		bit(1),
  9   116 	    4 record		bit(1),
  9   117 	    4 sequential		bit(1),
  9   118 	    4 direct		bit(1),
  9   119 	    4 interactive		bit(1),		/* env(interactive) */
  9   120 	    4 reserved_2		bit(1),
  9   121 	    4 reserved_3		bit(1),
  9   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
  9   123 	    4 keyed		bit(1),
  9   124 	    4 reserved_4		bit(1),
  9   125 	    4 environment		bit(1),
  9   126 
  9   127 	  3 compiler_developed	structure unal,
  9   128 	    4 aliasable		bit(1),
  9   129 	    4 packed		bit(1),
  9   130 	    4 passed_as_arg		bit(1),
  9   131 	    4 allocate		bit(1),
  9   132 	    4 set			bit(1),
  9   133 	    4 exp_extents		bit(1),
  9   134 	    4 refer_extents		bit(1),
  9   135 	    4 star_extents		bit(1),
  9   136 	    4 isub		bit(1),
  9   137 	    4 put_in_symtab		bit(1),
  9   138 	    4 contiguous		bit(1),
  9   139 	    4 put_data		bit(1),
  9   140 	    4 overlayed		bit(1),
  9   141 	    4 error		bit(1),
  9   142 	    4 symtab_processed	bit(1),
  9   143 	    4 overlayed_by_builtin	bit(1),
  9   144 	    4 defaulted		bit(1),
  9   145 	    4 connected		bit(1);
  9   146 
  9   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
      667 
 10     1 /* BEGIN INCLUDE FILE ... symbol_bits.incl.pl1 */
 10     2 
 10     3 dcl (	aliasable_bit	initial (72),
 10     4 	passed_as_arg_bit	initial (74),
 10     5 	set_bit		initial (76),
 10     6 	overlayed_by_builtin_bit initial (87)) fixed bin (15) internal static options (constant);
 10     7 
 10     8 /* END INCLUDE FILE ... symbol_bits.incl.pl1 */
      668 
 11     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
 11     2 
 11     3 dcl	1 reference		based aligned,
 11     4 	2 node_type		bit(9) unaligned,
 11     5 	2 array_ref		bit(1) unaligned,
 11     6 	2 varying_ref		bit(1) unaligned,
 11     7 	2 shared			bit(1) unaligned,
 11     8 	2 put_data_sw		bit(1) unaligned,
 11     9 	2 processed		bit(1) unaligned,
 11    10 	2 units			fixed(3) unaligned,
 11    11 	2 ref_count		fixed(17) unaligned,
 11    12 	2 c_offset		fixed(24),
 11    13 	2 c_length		fixed(24),
 11    14 	2 symbol			ptr unaligned,
 11    15 	2 qualifier		ptr unaligned,
 11    16 	2 offset			ptr unaligned,
 11    17 	2 length			ptr unaligned,
 11    18 	2 subscript_list		ptr unaligned,
 11    19 						/* these fields are used by the 645 code generator */
 11    20 	2 address			structure unaligned,
 11    21 	  3 base			bit(3),
 11    22 	  3 offset		bit(15),
 11    23 	  3 op			bit(9),
 11    24 	  3 no_address		bit(1),
 11    25 	  3 inhibit		bit(1),
 11    26 	  3 ext_base		bit(1),
 11    27 	  3 tag			bit(6),
 11    28 	2 info			structure unaligned,
 11    29 	  3 address_in		structure,
 11    30 	    4 b			dimension(0:7) bit(1),
 11    31 	    4 storage		bit(1),
 11    32 	  3 value_in		structure,
 11    33 	    4 a			bit(1),
 11    34 	    4 q			bit(1),
 11    35 	    4 aq			bit(1),
 11    36 	    4 string_aq		bit(1),
 11    37 	    4 complex_aq		bit(1),
 11    38 	    4 decimal_aq		bit(1),
 11    39 	    4 b			dimension(0:7) bit(1),
 11    40 	    4 storage		bit(1),
 11    41 	    4 indicators		bit(1),
 11    42 	    4 x			dimension(0:7) bit(1),
 11    43 	  3 other			structure,
 11    44 	    4 big_offset		bit(1),
 11    45 	    4 big_length		bit(1),
 11    46 	    4 modword_in_offset	bit(1),
 11    47 	2 data_type		fixed(5) unaligned,
 11    48 	2 bits			structure unaligned,
 11    49 	  3 padded_ref		bit(1),
 11    50 	  3 aligned_ref		bit(1),
 11    51 	  3 long_ref		bit(1),
 11    52 	  3 forward_ref		bit(1),
 11    53 	  3 ic_ref		bit(1),
 11    54 	  3 temp_ref		bit(1),
 11    55 	  3 defined_ref		bit(1),
 11    56 	  3 evaluated		bit(1),
 11    57 	  3 allocate		bit(1),
 11    58 	  3 allocated		bit(1),
 11    59 	  3 aliasable		bit(1),
 11    60 	  3 even			bit(1),
 11    61 	  3 perm_address		bit(1),
 11    62 	  3 aggregate		bit(1),
 11    63 	  3 hit_zero		bit(1),
 11    64 	  3 dont_save		bit(1),
 11    65 	  3 fo_in_qual		bit(1),
 11    66 	  3 hard_to_load		bit(1),
 11    67 	2 relocation		bit(12) unaligned,
 11    68 	2 more_bits		structure unaligned,
 11    69 	  3 substr		bit(1),
 11    70 	  3 padded_for_store_ref	bit(1),
 11    71 	  3 aligned_for_store_ref	bit(1),
 11    72 	  3 mbz			bit(15),
 11    73 	2 store_ins		bit(18) unaligned;
 11    74 
 11    75 /* END INCLUDE FILE ... reference.incl.pl1 */
      669 
 12     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
 12     2 
 12     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
 12     4 
 12     5 /* format: style3 */
 12     6 dcl	1 operator	based aligned,
 12     7 	  2 node_type	bit (9) unaligned,
 12     8 	  2 op_code	bit (9) unaligned,
 12     9 	  2 shared	bit (1) unaligned,
 12    10 	  2 processed	bit (1) unaligned,
 12    11 	  2 optimized	bit (1) unaligned,
 12    12 	  2 number	fixed (14) unaligned,
 12    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
 12    14 
 12    15 dcl	max_number_of_operands
 12    16 			fixed bin (15) int static options (constant) initial (32767);
 12    17 
 12    18 /* END INCLUDE FILE ... operator.incl.pl1 */
      670 
 13     1 /* BEGIN INCLUDE FILE ... token.incl.pl1 */
 13     2 
 13     3 dcl	1 token			based aligned,
 13     4 	2 node_type		bit(9) unaligned,
 13     5 	2 type			bit(9) unaligned,
 13     6 	2 loc			bit(18) unaligned,	/* symtab offset for identifiers, "p" flag for constants */
 13     7 	2 declaration		ptr unaligned,
 13     8 	2 next			ptr unaligned,
 13     9 	2 size			fixed(9),
 13    10 	2 string			char(n refer(token.size));
 13    11 
 13    12 /* END INCLUDE FILE ... token.incl.pl1 */
      671 
 14     1 /* BEGIN INCLUDE FILE ... token_types.incl.pl1 */
 14     2 
 14     3 dcl (	no_token		initial("000000000"b),	/*	token types		*/
 14     4 	identifier	initial("100000000"b),
 14     5 	isub		initial("010000000"b),
 14     6 	plus		initial("001000001"b),
 14     7 	minus		initial("001000010"b),
 14     8 	asterisk		initial("001000011"b),
 14     9 	slash		initial("001000100"b),
 14    10 	expon		initial("001000101"b),
 14    11 	not		initial("001000110"b),
 14    12 	and		initial("001000111"b),
 14    13 	or		initial("001001000"b),
 14    14 	cat		initial("001001001"b),
 14    15 	eq		initial("001001010"b),
 14    16 	ne		initial("001001011"b),
 14    17 	lt		initial("001001100"b),
 14    18 	gt		initial("001001101"b),
 14    19 	le		initial("001001110"b),
 14    20 	ge		initial("001001111"b),
 14    21 	ngt		initial("001010000"b),
 14    22 	nlt		initial("001010001"b),
 14    23 	assignment	initial("001010010"b),
 14    24 	colon		initial("001010011"b),
 14    25 	semi_colon	initial("001010100"b),
 14    26 	comma		initial("001010101"b),
 14    27 	period		initial("001010110"b),
 14    28 	arrow		initial("001010111"b),
 14    29 	left_parn		initial("001011000"b),
 14    30 	right_parn	initial("001011001"b),
 14    31 	percent		initial("001011100"b),
 14    32 	bit_string	initial("000100001"b),
 14    33 	char_string	initial("000100010"b),
 14    34 	bin_integer	initial("000110001"b),
 14    35 	dec_integer	initial("000110011"b),
 14    36 	fixed_bin		initial("000110000"b),
 14    37 	fixed_dec		initial("000110010"b),
 14    38 	float_bin		initial("000110100"b),
 14    39 	float_dec		initial("000110110"b),
 14    40 	i_bin_integer	initial("000111001"b),
 14    41 	i_dec_integer	initial("000111011"b),
 14    42 	i_fixed_bin	initial("000111000"b),
 14    43 	i_fixed_dec	initial("000111010"b),
 14    44 	i_float_bin	initial("000111100"b),
 14    45 	i_float_dec	initial("000111110"b)) bit (9) aligned internal static options (constant);
 14    46 
 14    47 dcl (	is_identifier		initial ("100000000"b),	/*	token type masks		*/
 14    48 	is_isub			initial ("010000000"b),
 14    49 	is_delimiter		initial ("001000000"b),
 14    50 	is_constant		initial ("000100000"b),
 14    51 	is_arith_constant		initial ("000010000"b),	/* N.B. not really a mask...s/b "000110000"b */
 14    52 	is_arithmetic_constant	initial ("000110000"b),
 14    53 	is_imaginary_constant	initial ("000111000"b),
 14    54 	is_float_constant		initial ("000110100"b),
 14    55 	is_decimal_constant		initial ("000110010"b),
 14    56 	is_integral_constant 	initial ("000110001"b)
 14    57 	) bit(9) internal static aligned options(constant);
 14    58 
 14    59 /* END INCLUDE FILE ... token_types.incl.pl1 */
      672 
 15     1 /* BEGIN INCLUDE FILE ... list.incl.pl1 */
 15     2 
 15     3 /* Modified 26 June 81 by EBush to add max_list_elements */
 15     4 
 15     5 
 15     6 dcl	1 list		based aligned,
 15     7 	2 node_type	bit(9) unaligned,
 15     8 	2 reserved	bit(12) unaligned,
 15     9 	2 number		fixed(14) unaligned,
 15    10 	2 element		dimension(n refer(list.number)) ptr unaligned;
 15    11 
 15    12 dcl       max_list_elements   fixed bin(17) internal static options (constant)
 15    13 	                    init(16383);
 15    14 
 15    15 /* END INCLUDE FILE ... list.incl.pl1 */
      673 
 16     1 /* BEGIN INCLUDE FILE ... block.incl.pl1 */
 16     2 /* Modified 22 Ocober 1980 by M. N. Davidoff to increase max block.number to 511 */
 16     3 /* format: style3,idind30 */
 16     4 
 16     5 declare	1 block			aligned based,
 16     6 	  2 node_type		bit (9) unaligned,
 16     7 	  2 source_id		structure unaligned,
 16     8 	    3 file_number		bit (8),
 16     9 	    3 line_number		bit (14),
 16    10 	    3 statement_number	bit (5),
 16    11 	  2 father		ptr unaligned,
 16    12 	  2 brother		ptr unaligned,
 16    13 	  2 son			ptr unaligned,
 16    14 	  2 declaration		ptr unaligned,
 16    15 	  2 end_declaration		ptr unaligned,
 16    16 	  2 default		ptr unaligned,
 16    17 	  2 end_default		ptr unaligned,
 16    18 	  2 context		ptr unaligned,
 16    19 	  2 prologue		ptr unaligned,
 16    20 	  2 end_prologue		ptr unaligned,
 16    21 	  2 main			ptr unaligned,
 16    22 	  2 end_main		ptr unaligned,
 16    23 	  2 return_values		ptr unaligned,
 16    24 	  2 return_count		ptr unaligned,
 16    25 	  2 plio_ps		ptr unaligned,
 16    26 	  2 plio_fa		ptr unaligned,
 16    27 	  2 plio_ffsb		ptr unaligned,
 16    28 	  2 plio_ssl		ptr unaligned,
 16    29 	  2 plio_fab2		ptr unaligned,
 16    30 	  2 block_type		bit (9) unaligned,
 16    31 	  2 prefix		bit (12) unaligned,
 16    32 	  2 like_attribute		bit (1) unaligned,
 16    33 	  2 no_stack		bit (1) unaligned,
 16    34 	  2 get_data		bit (1) unaligned,
 16    35 	  2 flush_at_call		bit (1) unaligned,
 16    36 	  2 processed		bit (1) unaligned,
 16    37 	  2 text_displayed		bit (1) unaligned,
 16    38 	  2 number		fixed bin (9) unsigned unaligned,
 16    39 	  2 free_temps		dimension (3) ptr,	/* these fields are used by the code generator */
 16    40 	  2 temp_list		ptr,
 16    41 	  2 entry_list		ptr,
 16    42 	  2 o_and_s		ptr,
 16    43 	  2 why_nonquick		aligned,
 16    44 	    3 auto_adjustable_storage bit (1) unaligned,
 16    45 	    3 returns_star_extents	bit (1) unaligned,
 16    46 	    3 stack_extended_by_args	bit (1) unaligned,
 16    47 	    3 invoked_by_format	bit (1) unaligned,
 16    48 	    3 format_statement	bit (1) unaligned,
 16    49 	    3 io_statements		bit (1) unaligned,
 16    50 	    3 assigned_to_entry_var	bit (1) unaligned,
 16    51 	    3 condition_statements	bit (1) unaligned,
 16    52 	    3 no_owner		bit (1) unaligned,
 16    53 	    3 recursive_call	bit (1) unaligned,
 16    54 	    3 options_non_quick	bit (1) unaligned,
 16    55 	    3 options_variable	bit (1) unaligned,
 16    56 	    3 never_referenced	bit (1) unaligned,
 16    57 	    3 pad_nonquick		bit (5) unaligned,
 16    58 	  2 prologue_flag		bit (1) unaligned,
 16    59 	  2 options_main		bit (1) unaligned,
 16    60 	  2 pad			bit (16) unaligned,
 16    61 	  2 number_of_entries	fixed bin (17),
 16    62 	  2 level			fixed bin (17),
 16    63 	  2 last_auto_loc		fixed bin (17),
 16    64 	  2 symbol_block		fixed bin (17),
 16    65 	  2 entry_info		fixed bin (18),
 16    66 	  2 enter			structure unaligned,
 16    67 	    3 start		fixed bin (17),
 16    68 	    3 end			fixed bin (17),
 16    69 	  2 leave			structure unaligned,
 16    70 	    3 start		fixed bin (17),
 16    71 	    3 end			fixed bin (17),
 16    72 	  2 owner			ptr;
 16    73 
 16    74 declare	max_block_number		fixed bin internal static options (constant) initial (511);
 16    75 
 16    76 /* END INCLUDE FILE ... block.incl.pl1 */
      674 
 17     1 /* BEGIN INCLUDE FILE ... op_codes.incl.pl1 */
 17     2 
 17     3 /* Modified: 25 Apr 1979 by PCK 4-bit decimal */
 17     4 /* Modified: 6 Jun 1979 by PG to add rank and byte */
 17     5 /* Modified: 26 Dec 1979 by PCK to add assign_by_name */
 17     6 /* Modified: 26 July 82 BIM wordno, segno */
 17     7 
 17     8 dcl (	add		initial("000010001"b),	/* opnd(1) <- opnd(2)+opnd(3)		*/
 17     9 	sub		initial("000010010"b),	/* opnd(1) <- opnd(2)-opnd(3)		*/
 17    10 	mult		initial("000010011"b),	/* opnd(1) <- opnd(2)*opnd(3)		*/
 17    11 	div		initial("000010100"b),	/* opnd(1) <- opnd(2)/opnd(3)		*/
 17    12 	negate		initial("000010101"b),	/* opnd(1) <- -opnd(2)  		*/
 17    13 	exp		initial("000010110"b),	/* opnd(1) <- opnd(2) ** opnd(3)	*/
 17    14 
 17    15 	and_bits		initial("000100001"b),	/* opnd(1) <- opnd(2) & opnd(3)	*/
 17    16 	or_bits		initial("000100010"b),	/* opnd(1) <- opnd(2)|opnd(3)		*/
 17    17 	xor_bits		initial("000100011"b),	/* opnd(1) <- opnd(2) xor opnd(3)	*/
 17    18 	not_bits		initial("000100100"b),	/* opnd(1) <- ^opnd(2)		*/
 17    19 	cat_string	initial("000100101"b),	/* opnd(1) <- opnd(2)||opnd(3)	*/
 17    20 	bool_fun		initial("000100110"b),	/* opnd(1) <- bool(opnd(2),opnd(3),opnd(4)) */
 17    21 
 17    22 	assign		initial("000110001"b),	/* opnd(1) <- opnd(2)		*/
 17    23 	assign_size_ck	initial("000110010"b),	/* opnd(1) <- opnd(2)		*/
 17    24 	assign_zero	initial("000110011"b),	/* opnd(1) <- 0			*/
 17    25 	copy_words	initial("000110100"b),	/* move opnd(2) to opnd(1) by opnd(3) words */
 17    26 	copy_string	initial("000110101"b),	/* move opnd(2) to opnd(1) by opnd(3) units */
 17    27 	make_desc		initial("000110110"b),	/* opnd(1) <- descriptor(opnd(2),opnd(3)) */
 17    28 	assign_round	initial("000110111"b),	/* opnd(1) <- opnd(2) rounded		*/
 17    29 	pack		initial("000111000"b),	/* opnd(1) <- encode to picture opnd(2) */
 17    30 	unpack		initial("000111001"b),	/* opnd(1) <- decode from picture opnd(2) */
 17    31 
 17    32 	less_than		initial("001000100"b),	/* opnd(1) <- opnd(2) < opnd(3)	*/
 17    33 	greater_than	initial("001000101"b),	/* opnd(1) <- opnd(2) > opnd(3)	*/
 17    34 	equal		initial("001000110"b),	/* opnd(1) <- opnd(2) = opnd(3)	*/
 17    35 	not_equal		initial("001000111"b),	/* opnd(1) <- opnd(2) ^= opnd(3)	*/
 17    36 	less_or_equal	initial("001001000"b),	/* opnd(1) <- opnd(2) <= opnd(3)	*/
 17    37 	greater_or_equal	initial("001001001"b),	/* opnd(1) <- opnd(2) >= opnd(3)	*/
 17    38 
 17    39 	jump		initial("001010001"b),	/* go to opnd(1) unconditionally	*/
 17    40 	jump_true		initial("001010010"b),	/* go to opnd(1) if opnd(2) is not 0	*/
 17    41 	jump_false	initial("001010011"b),	/* go to opnd(1) if opnd(2) is all 0	*/
 17    42 	jump_if_lt	initial("001010100"b),	/* go to opnd(1) if opnd(2) < opnd(3)	*/
 17    43 	jump_if_gt	initial("001010101"b),	/* go to opnd(1) if opnd(2) > opnd(3)	*/
 17    44 	jump_if_eq	initial("001010110"b),	/* go to opnd(1) if opnd(2) = opnd(3)	*/
 17    45 	jump_if_ne	initial("001010111"b),	/* go to opnd(1) if opnd(2) ^= opnd(3)	*/
 17    46 	jump_if_le	initial("001011000"b),	/* go to opnd(1) if opnd(2) <= opnd(3)	*/
 17    47 	jump_if_ge	initial("001011001"b),	/* go to opnd(1) if opnd(2) >= opnd(3)	*/
 17    48 
 17    49 	std_arg_list	initial("001100001"b),	/* opnd(1) <- arglist(opnd(2) desclist(opnd(3)))	*/
 17    50 	return_words	initial("001100010"b),	/* return aggregate opnd(1), opnd(2) is length in words */
 17    51 	std_call		initial("001100011"b),	/* opnd(1) <- call opnd(2) with opnd(3)		*/
 17    52 	return_bits	initial("001100100"b),	/* return aggregate opnd(1), opnd(2) is length in bits */
 17    53 	std_entry		initial("001100101"b),	/* entry(opnd(1)... opnd(n))			*/
 17    54 	return_string	initial("001100110"b),	/* return string opnd(1) */
 17    55 	ex_prologue	initial("001100111"b),	/* execute the prologue -no operands-		*/
 17    56 	allot_auto	initial("001101000"b),	/* opnd(1) <- addrel(stack,opnd(2))		*/
 17    57 	param_ptr		initial("001101001"b),	/* opnd(1) <- ptr to opnd(2) in  block opnd(3)	*/
 17    58 	param_desc_ptr	initial("001101010"b),	/* opnd(1) <- ptr to opnd(2) in block opnd(3)	*/
 17    59 	std_return	initial("001101011"b),	/* return -no arguments-			*/
 17    60 	allot_ctl		initial("001101100"b),	/* allocate opnd(1) , length in words is opnd(2) 	*/
 17    61 	free_ctl		initial("001101101"b),	/* free opnd(1)				*/
 17    62 	stop		initial("001101110"b),	/* stop - terminate run unit			*/
 17    63 
 17    64 	mod_bit		initial("001110000"b),	/* opnd(1) <- mod(opnd(3),36),
 17    65*						   opnd(2) <- opnd(3) / 36		*/
 17    66 	mod_byte		initial("001110001"b),	/* opnd(1) <- mod(opnd(3),4),
 17    67*						   opnd(2) <- opnd(3) / 4		*/
 17    68 	mod_half		initial("001110010"b),	/* opnd(1) <- mod(opnd(3),2),
 17    69*						   opnd(2) <- opnd(3) / 2		*/
 17    70 	mod_word		initial("001110011"b),	/* TO BE DEFINED BY BLW			*/
 17    71 
 17    72 	bit_to_char	initial("010000000"b),	/* opnd(1) <- (opnd(2)+8)/9		*/
 17    73 	bit_to_word	initial("010000001"b),	/* opnd(1) <- (opnd(2)+35)/36		*/
 17    74 	char_to_word	initial("010000010"b),	/* opnd(1) <- (opnd(2)+3)/4		*/
 17    75 	half_to_word	initial("010000011"b),	/* opnd(1) <- (opnd(2)+1)/2		*/
 17    76 	word_to_mod2	initial("010000100"b),	/* opnd(1) <- (opnd(2)+1)/2*2		*/
 17    77 	word_to_mod4	initial("010000101"b),	/* opnd(1) <- (opnd(2)+3)/4*4		*/
 17    78 	word_to_mod8	initial("010000110"b),	/* opnd(1) <- (opnd(2)+7)/8*8		*/
 17    79 	rel_fun		initial("010000111"b),	/* opnd(1) <- rel(opnd(2))		*/
 17    80 	baseno_fun	initial("010001000"b),	/* opnd(1) <- baseno(opnd(2))		*/
 17    81 	desc_size		initial("010001001"b),	/* opnd(1) <- substr(opnd(2),13,24)	*/
 17    82 	bit_pointer	initial("010001010"b),	/* opnd(1) <- bit offset of opnd(2)	*/
 17    83 	index_before_fun	initial("010001011"b),	/* opnd(1) <- length of before(opnd(2),opnd(3)) */
 17    84 	index_after_fun	initial("010001100"b),	/* opnd(1) <- offset of after(opnd(2),opnd(3)) in opnd(2) */
 17    85 	verify_ltrim_fun	initial("010001101"b),	/* opnd(1) <- offset of ltrim(opnd(2),opnd(3)) in opnd(2) */
 17    86 	verify_rtrim_fun	initial("010001110"b),	/* opnd(1) <- length(opnd(2))-length(rtrim(opnd(2),opnd(3))) */
 17    87 	digit_to_bit	initial("010001111"b),	/* opnd(1) <- 9*opnd(2)/2		*/
 17    88 
 17    89 	ceil_fun		initial("010010000"b),	/* opnd(1) <- ceil(opnd(2))		*/
 17    90 	floor_fun		initial("010010001"b),	/* opnd(1) <- floor(opnd(2))		*/
 17    91 	round_fun		initial("010010010"b),	/* opnd(1) <- round(opnd(2))		*/
 17    92 	sign_fun		initial("010010011"b),	/* opnd(1) <- sign(opnd(2))		*/
 17    93 	abs_fun		initial("010010100"b),	/* opnd(1) <- abs(opnd(2))		*/
 17    94 	trunc_fun		initial("010010101"b),	/* opnd(1) <- trunc(opnd(2))		*/
 17    95 	byte_fun		initial("010010110"b),	/* opnd(1) <- byte(opnd(2))		*/
 17    96 	rank_fun		initial("010010111"b),	/* opnd(1) <- rank(opnd(2))		*/
 17    97 	index_rev_fun	initial("010011000"b),	/* opnd(1) <- index(reverse(opnd(2)),reverse(opnd(3))) */
 17    98 	search_rev_fun	initial("010011001"b),	/* opnd(1) <- search(reverse(opnd(2)),opnd(3)) */
 17    99 	verify_rev_fun	initial("010011010"b),	/* opnd(1) <- verify(reverse(opnd(2)),opnd(3)) */
 17   100 	wordno_fun	initial("010011011"b),        /* opnd(1) <- wordno (opnd(2)) */
 17   101 	segno_fun		initial("010011100"b),        /* opnd(1) <- segno (opnd(2)) */
 17   102 	bitno_fun           initial("010011101"b),        /* opnd(1) <- bitno (opnd(2)) */
 17   103 	charno_fun	initial("010011110"b),        /* opnd(1) <- charno (opnd(2)) */
 17   104 
 17   105 	index_fun		initial("010100000"b),	/* opnd(1) <- index(opnd(2),opnd(3))	*/
 17   106 	off_fun		initial("010100001"b),	/* opnd(1) <- offset(opnd(2),opnd(3))	*/
 17   107 	complex_fun	initial("010100010"b),	/* opnd(1) <- complex(opnd(2),opnd(3))	*/
 17   108 	conjg_fun		initial("010100011"b),	/* opnd(1) <- conjg(opnd(2),opnd(3))	*/
 17   109 	mod_fun		initial("010100100"b),	/* opnd(1) <- mod(opnd(2),opnd(3))	*/
 17   110 	repeat_fun	initial("010100101"b),	/* opnd(1) <- repeat(opnd(2),opnd(3))	*/
 17   111 	verify_fun	initial("010100110"b),	/* opnd(1) <- verify(opnd(2),opnd(3))	*/
 17   112 	translate_fun	initial("010100111"b),	/* opnd(1) <- translate(opnd(2),opnd(3))*/
 17   113 	real_fun   	initial("010101001"b),	/* opnd(1) <- real(opnd(2))		*/
 17   114 	imag_fun   	initial("010101010"b),	/* opnd(1) <- imag(opnd(2))		*/
 17   115 	length_fun	initial("010101011"b),	/* opnd(1) <- length(opnd(2))	*/
 17   116 	pl1_mod_fun	initial("010101100"b),	/* opnd(1) <- mod(opnd(2)) */
 17   117 	search_fun	initial("010101101"b),	/* opnd(1) <- search(opnd(2),opnd(3)) */
 17   118 	allocation_fun	initial("010101110"b),	/* opnd(1) <- allocation(opnd(2)) */
 17   119 	reverse_fun	initial("010101111"b),	/* opnd(1) <- reverse(opnd(2)) */
 17   120 
 17   121 	addr_fun		initial("010110000"b),	/* opnd(1) <- addr(opnd(2))		*/
 17   122 	addr_fun_bits	initial("010110001"b),	/* opnd(1) <- addr(opnd(2))		*/
 17   123 	ptr_fun		initial("010110010"b),	/* opnd(1) <- ptr(opnd(2),opnd(3))	*/
 17   124 	baseptr_fun	initial("010110011"b),	/* opnd(1) <- baseptr(opnd(2))	*/
 17   125 	addrel_fun	initial("010110100"b),	/* opnd(1) <- addrel(opnd(2),opnd(3))	*/
 17   126 	codeptr_fun	initial("010110101"b),	/* opnd(1) <- codeptr(opnd(2))	*/
 17   127 	environmentptr_fun	initial("010110110"b),	/* opnd(1) <- environmentptr(opnd(2))	*/
 17   128 	stackbaseptr_fun	initial("010110111"b),	/* opnd(1) is ptr to base of current stack	*/
 17   129 	stackframeptr_fun	initial("010111000"b),	/* opnd(1) is ptr to current block's stack frame	*/
 17   130 	setcharno_fun	initial("010111001"b),	/* opnd(1) <- opnd(2) with charno opnd(3) */
 17   131 	addcharno_fun	initial("010111010"b),	/* opnd(1) <- opnd(2) with charno = charno + opnd(3) */
 17   132 	setbitno_fun	initial("010111011"b),	/* setcharno for bitsno */
 17   133 	addbitno_fun	initial("010111100"b),	/* addcharno for bitno */
 17   134 
 17   135 	min_fun		initial("011000000"b),	/* opnd(1) <- min(opnd(1),opnd(2),...)	*/
 17   136 	max_fun		initial("011000001"b),	/* opnd(1) <- max(opnd(1),opnd(2),...)	*/
 17   137 
 17   138 	stack_ptr		initial("011010001"b),	/* opnd(1) <- stack frame ptr		*/
 17   139 	empty_area	initial("011010010"b),	/* empty opnd(1), length in words is opnd(2) */
 17   140 	enable_on		initial("011010100"b),	/* opnd(1) is the cond name
 17   141*						   opnd(2) is the file name
 17   142*						   opnd(3) is the block	*/
 17   143 	revert_on		initial("011010101"b),	/* opnd(1) is the cond name,
 17   144*						   opnd(2) is the file name	*/
 17   145 	signal_on		initial("011010110"b),	/* opnd(1) is the cond name
 17   146*						   opnd(2) is the file name */
 17   147 
 17   148 	lock_fun		initial("011010111"b),	/* opnd(1) <- stac(opnd(2),opnd(3))	*/
 17   149 	stacq_fun		initial("011011000"b),	/* opnd(1) is result, opnd(2) is ptr to lock word,
 17   150*						   opnd(3) is old value, (4) is new value. */
 17   151 	clock_fun		initial("011011001"b),	/* opnd(1) is the clock time		*/
 17   152 	vclock_fun	initial("011011010"b),	/* opnd(1) is the virtual clock time	*/
 17   153 
 17   154 	bound_ck		initial("011100000"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 17   155 	range_ck		initial("011100001"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 17   156 	loop		initial("011100010"b),	/* do opnd(1) for opnd(2) from opnd(3) to opnd(4) by 1,
 17   157*						   opnd(5) is the list */
 17   158 	join		initial("011100011"b),	/* do opnd(1), opnd(2) ... opnd(n)	*/
 17   159 	allot_based	initial("011100100"b),	/* allocate opnd(2) words in opnd(3), set opnd(1) */
 17   160 	free_based	initial("011100101"b),	/* free opnd(1) in opnd(3), length is opnd(2) words */
 17   161 
 17   162 	r_parn		initial("011110001"b),	/* format op code			*/
 17   163 	l_parn		initial("011110010"b),
 17   164 	r_format		initial("011110011"b),
 17   165 	c_format		initial("011110100"b),
 17   166 	f_format		initial("011110101"b),
 17   167 	e_format		initial("011110110"b),
 17   168 	b_format		initial("011110111"b),
 17   169 	a_format		initial("011111000"b),
 17   170 	x_format		initial("011111001"b),
 17   171 	skip_format	initial("011111010"b),
 17   172 	column_format	initial("011111011"b),
 17   173 	page_format	initial("011111100"b),
 17   174 	line_format	initial("011111101"b),
 17   175 	picture_format	initial("011111110"b),
 17   176 	bn_format		initial("011111111"b),	/* bit format, length(opnd(2)), radix factor(opnd(3)) */
 17   177 
 17   178 	get_list_trans	initial("100000000"b),	/* getlist(opnd(2) with desc(opnd(1)))	*/
 17   179 	get_edit_trans	initial("100000001"b),	/* getedit(opnd(2) with desc(opnd(1)))	*/
 17   180 	get_data_trans	initial("100000010"b),	/* getdata(opnd(1) to opnd(n))	*/
 17   181 	put_list_trans	initial("100000011"b),	/* putlist(opnd(2) with desc(opnd(1)))	*/
 17   182 	put_edit_trans	initial("100000100"b),	/* putedit(opnd(2) with desc(opnd(1)))	*/
 17   183 	put_data_trans	initial("100000101"b),	/* putdata(opnd(2)) with subscript-list opnd(1) */
 17   184 	terminate_trans	initial("100000110"b),	/* terminate stream transmission	*/
 17   185 	stream_prep	initial("100000111"b),	/* initiate stream transmission	*/
 17   186 	record_io		initial("100001000"b),	/* perform record io operation	*/
 17   187 	fortran_read	initial("100001001"b),	/* A complete read statement		*/
 17   188 	fortran_write	initial("100001010"b),	/* A complete write statement		*/
 17   189 	ftn_file_manip	initial("100001011"b),	/* endfile,backspace,rewind,etc.	*/
 17   190 	ftn_trans_loop	initial("100001100"b),	/* An implied do in i/o list		*/
 17   191 	put_control	initial("100001101"b),	/* put control opnd(1) opnd(2) times	*/
 17   192 	put_field		initial("100001110"b),	/* putlist(opnd(2)) of length(opnd(1))	*/
 17   193 	put_field_chk	initial("100001111"b),	/* putlist(op(2)) of len(op(1)) check char index(op(3)) */
 17   194 
 17   195 /* These operators are produced by the parse but are not used as input to the code generator.	*/
 17   196 /* They are processed by the semantic translator.						*/
 17   197 
 17   198 	return_value	initial("100010010"b),	/* return(opnd(1))			*/
 17   199 	allot_var		initial("100010011"b),	/* allot opnd(1) in opnd(2)		*/
 17   200 	free_var		initial("100010100"b),	/* free opnd(1) out of opnd(2)	*/
 17   201 	get_file		initial("100010101"b),	/* opnd(1) is filename,opnd(2) is copy	*/
 17   202 						/* opnd(3) is skip, opnd(4) is list	*/
 17   203 	get_string	initial("100010110"b),	/* opnd(1) is string,opnd(2) is list	*/
 17   204 	put_file		initial("100010111"b),	/* opnd(1) is filename,opnd(2) is page	*/
 17   205 						/* opnd(3) is skip,opnd(4) is line	*/
 17   206 	put_string	initial("100011000"b),	/* opnd(1) is string,opnd(2) is list	*/
 17   207 	open_file		initial("100011001"b),
 17   208 	close_file	initial("100011010"b),
 17   209 	read_file		initial("100011011"b),
 17   210 	write_file	initial("100011100"b),
 17   211 	locate_file	initial("100011101"b),
 17   212 	do_fun		initial("100011110"b),	/* opnd(1) is join of a list		*/
 17   213 						/* opnd(2) is control variable ref	*/
 17   214 						/* opnd(3) is specification operator	*/
 17   215 	do_spec		initial("100011111"b),	/* opnd(1) to opnd(2) by opnd(3) 	*/
 17   216 						/* repeat opnd(4) while opnd(5)	*/
 17   217 						/* opnd(6) is next specification	*/
 17   218 
 17   219 	rewrite_file	initial("100100000"b),
 17   220 	delete_file	initial("100100001"b),
 17   221 	unlock_file	initial("100100010"b),
 17   222 	lock_file		initial("100100011"b),
 17   223 	refer		initial("100100101"b),	/* opnd(1) refer(opnd(2))		*/
 17   224 	prefix_plus	initial("100100110"b),	/* opnd(1) <- +opnd(2)		*/
 17   225 	nop		initial("100100111"b),	/* no-op */
 17   226 	assign_by_name	initial("100101000"b),	/* opnd(1) <- opnd(2),by name		*/
 17   227 
 17   228 /* These operators are produced by the semantic translator in processing the math
 17   229*   builtin functions and are used as input to the code generator			*/
 17   230 
 17   231 	sqrt_fun		initial("100110000"b),	/* opnd(1) <- sqrt(opnd(2))	*/
 17   232 	sin_fun		initial("100110001"b),	/* opnd(1) <- sin(opnd(2))	*/
 17   233 	sind_fun		initial("100110010"b),	/* opnd(1) <- sind(opnd(2))	*/
 17   234 	cos_fun		initial("100110011"b),	/* opnd(1) <- cos(opnd(2))	*/
 17   235 	cosd_fun		initial("100110100"b),	/* opnd(1) <- cosd(opnd(2))	*/
 17   236 	tan_fun		initial("100110101"b),	/* opnd(1) <- tan(opnd(2))	*/
 17   237 	tand_fun		initial("100110110"b),	/* opnd(1) <- tand(opnd(2))	*/
 17   238 	asin_fun		initial("100110111"b),	/* opnd(1) <- asin(opnd(2))	*/
 17   239 	asind_fun		initial("100111000"b),	/* opnd(1) <- asind(opnd(2))	*/
 17   240 	acos_fun		initial("100111001"b),	/* opnd(1) <- acos(opnd(2))	*/
 17   241 	acosd_fun		initial("100111010"b),	/* opnd(1) <- acosd(opnd(2))	*/
 17   242 	atan_fun		initial("100111011"b),	/* opnd(1) <- atan(opnd(2)[,opnd(3)])	*/
 17   243 	atand_fun		initial("100111100"b),	/* opnd(1) <- atand(opnd(2)[,opnd(3)])	*/
 17   244 	log2_fun		initial("100111101"b),	/* opnd(1) <- log2(opnd(2))	*/
 17   245 	log_fun		initial("100111110"b),	/* opnd(1) <- log(opnd(2))	*/
 17   246 	log10_fun		initial("100111111"b),	/* opnd(1) <- log10(opnd(2))	*/
 17   247 
 17   248 	exp_fun		initial("101000000"b))	/* opnd(1) <- exp(opnd(2))	*/
 17   249 
 17   250 			bit(9) aligned internal static options(constant);
 17   251 
 17   252 /* END INCLUDE FILE ... op_codes.incl.pl1 */
      675 
 18     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
 18     2 
 18     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
 18     4 
 18     5 dcl (	block_node		initial("000000001"b),
 18     6 	statement_node		initial("000000010"b),
 18     7 	operator_node		initial("000000011"b),
 18     8 	reference_node		initial("000000100"b),
 18     9 	token_node		initial("000000101"b),
 18    10 	symbol_node		initial("000000110"b),
 18    11 	context_node		initial("000000111"b),
 18    12 	array_node		initial("000001000"b),
 18    13 	bound_node		initial("000001001"b),
 18    14 	format_value_node		initial("000001010"b),
 18    15 	list_node			initial("000001011"b),
 18    16 	default_node		initial("000001100"b),
 18    17 	machine_state_node		initial("000001101"b),
 18    18 	source_node		initial("000001110"b),
 18    19 	label_node		initial("000001111"b),
 18    20 	cross_reference_node	initial("000010000"b),
 18    21 	sf_par_node		initial("000010001"b),
 18    22 	temporary_node		initial("000010010"b),
 18    23 	label_array_element_node	initial("000010011"b),
 18    24 	by_name_agg_node		initial("000010100"b))
 18    25 				bit(9) internal static aligned options(constant);
 18    26 
 18    27 dcl	1 node			based aligned,
 18    28 	2 type			unal bit(9),
 18    29 	2 source_id		unal structure,
 18    30 	  3 file_number		bit(8),
 18    31 	  3 line_number		bit(14),
 18    32 	  3 statement_number	bit(5);
 18    33 
 18    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
      676 
 19     1 /* BEGIN INCLUDE FILE ... system.incl.pl1 */
 19     2 
 19     3 /* Modified: 25 Apr 1979 by PCK to implemnt 4-bit decimal */
 19     4 
 19     5 dcl (	max_p_flt_bin_1			initial(27),
 19     6 	max_p_flt_bin_2			initial(63),
 19     7 	max_p_fix_bin_1			initial(35),
 19     8 	max_p_fix_bin_2			initial(71),
 19     9 
 19    10 	max_p_dec				initial(59),
 19    11 	max_p_bin_or_dec			initial (71),	/* max (max_p_fix_bin_2, max_p_dec) */
 19    12 
 19    13 	min_scale				initial(-128),
 19    14 	max_scale				initial(+127),
 19    15 	max_bit_string			initial(9437184),
 19    16 	max_char_string			initial(1048576),
 19    17 	max_area_size			initial(262144),
 19    18 	min_area_size			initial(28),
 19    19 
 19    20 	max_bit_string_constant		initial (253),	/* max length of bit literals */
 19    21 	max_char_string_constant		initial (254),	/* max length of character literals */
 19    22 	max_identifier_length		initial (256),
 19    23 	max_number_of_dimensions		initial (127),
 19    24 
 19    25 	max_length_precision		initial(24),
 19    26 	max_offset_precision		initial(24),	/* 18 bits for word offset + 6 bits for bit offset */
 19    27 
 19    28 	max_words_per_variable		initial (262144),
 19    29 
 19    30 	bits_per_word			initial(36),
 19    31 	bits_per_double			initial(72),
 19    32 	packed_digits_per_character		initial(2),
 19    33 	characters_per_half			initial(2),
 19    34 	characters_per_word			initial(4),
 19    35 	characters_per_double		initial(8),
 19    36 
 19    37 	bits_per_character			initial(9),
 19    38 	bits_per_half			initial(18),
 19    39 	bits_per_decimal_digit		initial(9),
 19    40 	bits_per_binary_exponent		initial(8),
 19    41 	bits_per_packed_ptr			initial(36),
 19    42 	words_per_packed_pointer		initial(1),
 19    43 
 19    44 	words_per_fix_bin_1			initial(1),
 19    45 	words_per_fix_bin_2			initial(2),
 19    46 	words_per_flt_bin_1			initial(1),
 19    47 	words_per_flt_bin_2			initial(2),
 19    48 	words_per_varying_string_header	initial(1),
 19    49 	words_per_offset			initial(1),
 19    50 	words_per_pointer			initial(2),
 19    51 	words_per_label_var			initial(4),
 19    52 	words_per_entry_var			initial(4),
 19    53 	words_per_file_var			initial(4),
 19    54 	words_per_format			initial(4),
 19    55 	words_per_condition_var		initial(6),
 19    56 
 19    57 	max_index_register_value		initial(262143),
 19    58 	max_signed_index_register_value	initial(131071),
 19    59 
 19    60 	max_signed_xreg_precision		initial(17),
 19    61 	max_uns_xreg_precision		initial(18),
 19    62 
 19    63 	default_area_size			initial(1024),
 19    64 	default_flt_bin_p			initial(27),
 19    65 	default_fix_bin_p			initial(17),
 19    66 	default_flt_dec_p			initial(10),
 19    67           default_fix_dec_p   		initial(7)) fixed bin(31) internal static options(constant);
 19    68 
 19    69 dcl	bits_per_digit			initial(4.5)  fixed bin(31,1) internal static options(constant);
 19    70 
 19    71 dcl (	integer_type		initial("010000000000000000000100000001100000"b),
 19    72 	dec_integer_type		initial("010000000000000000000100000010100000"b),
 19    73 	pointer_type		initial("000001000000000000000100000000000000"b),
 19    74 	real_type			initial("001000000000000000000100000001100000"b),
 19    75 	complex_type		initial("001000000000000000000100000001010000"b),
 19    76 	builtin_type		initial("000000000000000010000000000000000000"b),
 19    77 	storage_block_type		initial("000000000000100000000000000000000000"b),
 19    78 	arg_desc_type		initial("000000000001000000000000000000000000"b),
 19    79 	local_label_var_type	initial("000000001000000000000100000100001000"b),
 19    80 	entry_var_type		initial("000000000100000000000000000000001000"b),
 19    81 	bit_type			initial("000100000000000000000000000000000000"b),
 19    82 	char_type			initial("000010000000000000000000000000000000"b)) bit(36) aligned int static
 19    83 									options(constant);
 19    84 
 19    85 /* END INCLUDE FILE ... system.incl.pl1 */
      677 
 20     1 /* BEGIN INCLUDE FILE ... pl1_attribute_table.incl.pl1 */
 20     2 
 20     3 /* Modified 780628 by PG for unsigned */
 20     4 /* Modified 830426 by BIM for options (packed) on pointers */
 20     5 
 20     6 dcl	index_given_letter (97:122) fixed bin (8) unal internal static
 20     7 	initial (1, 5, 10, 19, 26, 31, 35, 83, 36, 83, 43,	/* A-K */
 20     8 	44, 47, 48, 50, 53, 83, 64, 69, 83, 75, 80, (4)83);	/* L-Z */
 20     9 
 20    10 dcl	keyword (83) char (11) aligned internal static initial (
 20    11 	"aligned", "area", "auto", "automatic", "based", "bin",
 20    12 	"binary", "bit", "builtin", "char", "character", "complex",
 20    13 	"cond", "condition", "constant", "controlled", "cplx", "ctl",
 20    14 	"dec", "decimal", "def", "defined", "dim", "dimension",
 20    15 	"direct", "entry", "env", "environment", "ext", "external",
 20    16 	"file", "fixed", "float", "format", "generic", "init",
 20    17 	"initial", "input", "int", "internal", "irred", "irreducible",
 20    18 	"keyed", "label", "like", "local", "member", "nonvar",
 20    19 	"nonvarying", "offset", "options", "output", "parameter", "parm",
 20    20 	"pic", "picture", "pointer", "pos", "position", "prec",
 20    21 	"precision", "print", "ptr", "real", "record", "red",
 20    22 	"reducible", "returns", "seql", "sequential", "signed", "static",
 20    23 	"stream", "structure", "unal", "unaligned", "uns", "unsigned",
 20    24 	"update", "var", "variable", "varying", "~");
 20    25 
 20    26 dcl	system_keyword (15) char (16) aligned internal static initial (
 20    27 	"aliasable", "arg-descriptor", "interactive", "options-constant",
 20    28 	"options-variable", "parameter-desc", "reserved-1", "reserved-2",
 20    29 	"reserved-3", "reserved-4", "return-value", "stringvalue",
 20    30 	"storage-block", "temporary", "options-packed");
 20    31 
 20    32 dcl	bit_index (82) fixed bin (8) unal internal static initial (
 20    33 	22, /* aligned */  8, /* area */ 46, /* auto */ 46, /* automatic */ 47, /* based */ 30, /* bin */
 20    34 	30, /* binary */  4, /* bit */ 17, /* builtin */  5, /* char */  5, /* character */ 32, /* complex */
 20    35 	15, /* cond */ 15, /* condition */ 53, /* constant */ 49, /* controlled */ 32, /* cplx */ 49, /* ctl */
 20    36 	29, /* dec */ 29, /* decimal */ 50, /* def */ 50, /* defined */ 20, /* dim */ 20, /* dimension */
 20    37 	64, /* direct */ 10, /* entry */ 71, /* env */ 71, /* environment */ 39, /* ext */ 39, /* external */
 20    38 	11, /* file */  2, /* fixed */  3, /* float */ 16, /* format */ 18, /* generic */ 21, /* init */
 20    39 	21, /* initial */ 57, /* input */ 38, /* int */ 38, /* internal */ 35, /* irred */ 35, /* irreducible */
 20    40 	69, /* keyed */  9, /* label */ 40, /* like */ 28, /* local */ 41, /* member */ 42, /* nonvar */
 20    41 	42, /* nonvarying */  7, /* offset */ 43, /* options */ 58, /* output */ 51, /* parameter */ 51, /* parm */
 20    42 	19, /* pic */ 19, /* picture */  6, /* pointer */ 37, /* pos */ 37, /* position */ 26, /* prec */
 20    43 	26, /* precision */ 56, /* print */  6, /* ptr */ 31, /* real */ 62, /* record */ 34, /* red */
 20    44 	34, /* reducible */ 36, /* returns */ 63, /* seql */ 63, /* sequential */ 24, /* signed */ 48, /* static */
 20    45 	60, /* stream */  1, /* structure */ 23, /* unal */ 23, /* unaligned */ 25, /* uns */ 25, /* unsigned */
 20    46 	59, /* update */ 27, /* var */ 33, /* variable */ 27 /* varying */);
 20    47 
 20    48 dcl	system_bit_index (15) fixed bin (8) unal internal static initial (
 20    49 	72, /* aliasable */ 12, /* arg-descriptor */ 65, /* env(interactive) */
 20    50 	45, /* options(constant) */ 44, /* options(variable) */ 52, /* param-desc */
 20    51 	61, /* reserved-1 */ 66, /* reserved-2 */ 67, /* reserved-3 */
 20    52 	70, /* reserved-4 */ 55, /* return-value */ 68, /* env(stringvalue) */
 20    53 	13, /* storage-block */ 54, /* temporary */ 14 /* options-variable */);
 20    54 
 20    55 dcl	incompatable (72) bit (72) aligned internal static initial (
 20    56 /*	          111111111122222222223333333333444444444455555555556666666666777
 20    57*	 123456789012345678901234567890123456789012345678901234567890123456789012
 20    58*	 ------------------------------------------------------------------------ */
 20    59 	"011111111111101111101001111111110111000001010000000010011111011110011010"b, /*  1 structure */
 20    60 	"101111111111101111100000001100000111100101010000000000011111011110011010"b, /*  2 fixed */
 20    61 	"110111111111101111100000101100000111100101010000000000011111011110011010"b, /*  3 float */
 20    62 	"111011111111101111100001110111110111000100010000000000011111011110011010"b, /*  4 bit */
 20    63 	"111101111111101111100001110111110111000100010000000000011111011110011010"b, /*  5 character */
 20    64 	"111110111111101111100001111111110111100101010000000010011111011110011010"b, /*  6 ptr */
 20    65 	"111111011111101111100001111111110111100101010000000010011111011110011010"b, /*  7 offset */
 20    66 	"111111101111101111100001111111110111100101010000000010011111011110011010"b, /*  8 area */
 20    67 	"111111110111101111100001111011110111100101010000000000011111011110011010"b, /*  9 label */
 20    68 	"111111111011101111100001111111110000100101000000000000011111011110011010"b, /* 10 entry */
 20    69 	"111111111101101111100001111111110111100101010000000000000000000000000000"b, /* 11 file */
 20    70 	"111111111110101111111111111111111111111111111111111101111111011110011010"b, /* 12 arg-descriptor */
 20    71 	"111111111111001111111111111111111111111111111111111101111111011110011010"b, /* 13 storage-block */
 20    72 	"111110111111101111100001111111110111100101010000000010011111011110011010"b, /* 14 options-packed */
 20    73 	"111111111111100111111111111111111111110111111111111111111111011110011010"b, /* 15 condition */
 20    74 	"111111111111101011100001111011110111100101010000000000011111011110011010"b, /* 16 format */
 20    75 	"111111111111101101111111111111111111101111111111111111111111011110011010"b, /* 17 builtin */
 20    76 	"111111111111101110111111111111111111101111111111111111111111011110011010"b, /* 18 generic */
 20    77 	"111111111111101111000001111111000111000101010000000010011111011110011010"b, /* 19 picture */
 20    78 	"000000000001101011000000000000000000000000000000000000011111011110011010"b, /* 20 dimension */
 20    79 	"100000000001101011000000000000000000100100000000011111111111011110011010"b, /* 21 initial */
 20    80 	"000000000001101011000010000000000000000000000000000010011111011110011010"b, /* 22 aligned */
 20    81 	"000000000001101011000100000000000000000000000000000010011111011110011010"b, /* 23 unaligned */
 20    82 	"100111111111101111100000101100000111100101010000000000011111011110011010"b, /* 24 signed */
 20    83 	"101111111111101111100001001110010111100101010000000000011111011110011010"b, /* 25 unsigned */
 20    84 	"100111111111101111100000001100000111100101010000000000011111011110011010"b, /* 26 precision */
 20    85 	"111001111111101111100001110111110111100101010000000010011111011110011010"b, /* 27 varying */
 20    86 	"111111110111101011100001111011110111100101010000000010011111011110011010"b, /* 28 local */
 20    87 	"100111111111101111100000101101000111100101010000000000011111011110011010"b, /* 29 decimal */
 20    88 	"100111111111101111100000001110000111100101010000000000011111011110011010"b, /* 30 binary */
 20    89 	"100111111111101111000000001100010111100101010000000000011111011110011010"b, /* 31 real */
 20    90 	"100111111111101111000000101100100111100101010000000000011111011110011010"b, /* 32 cplx */
 20    91 	"000000000001101011000000000000000000000000000000000110011111011110011010"b, /* 33 variable */
 20    92 	"111111111011101111100001111111110010100101000000000000011111011110011010"b, /* 34 reducible */
 20    93 	"111111111011101111100001111111110100100101000000000000011111011110011010"b, /* 35 irreducible */
 20    94 	"111111111011101111100001111111110000100101000000000000011111011110011010"b, /* 36 returns */
 20    95 	"011001111111101111001001111111110111001010111111101111111111011110011010"b, /* 37 position */
 20    96 	"000000000001101000000000000000000000001000000000000100000000000000000000"b, /* 38 internal */
 20    97 	"000000000001100011000000000000000000110010001110011101100000000000000000"b, /* 39 external */
 20    98 	"011111111111101111101001111111110111000001010000000010011111011110011010"b, /* 40 like */
 20    99 	"000000000001101011000000000000000000101000001111111011111111011110011010"b, /* 41 member */
 20   100 	"111001111111101111100001111111110111000100010000000010011111011110011010"b, /* 42 nonvarying */
 20   101 	"000000000001101011000000000000000000100000000000000000011111011110011010"b, /* 43 options */
 20   102 	"111111111011101111100001111111110000100101000000000000011111011110011010"b, /* 44 options-variable */
 20   103 	"000000000001101011000000000000000000101010000110111111111111011110011010"b, /* 45 options-constant */
 20   104 	"000000000001101011000000000000000000101010001011111111111111011110011010"b, /* 46 automatic */
 20   105 	"000000000001101011000000000000000000101010001101111111111111011110011010"b, /* 47 based */
 20   106 	"000000000001101011000000000000000000100010000110111111111111011110011010"b, /* 48 static */
 20   107 	"000000000001101011000000000000000000100010001111011111111111011110011010"b, /* 49 ctl */
 20   108 	"000000000001101011001000000000000000001010001111101111111111011110011010"b, /* 50 defined */
 20   109 	"000000000001101011001000000000000000101010001111110111111111011110011010"b, /* 51 parm */
 20   110 	"000000000001101011001000000000001000111000001111111011111111011110011010"b, /* 52 parameter-desc */
 20   111 	"100001110000001011101110001100001000100111001111111101100000000000000000"b, /* 53 constant */
 20   112 	"000000000001101011001000000000000000101010001111111110111111011110011010"b, /* 54 temporary */
 20   113 	"000000000001101011001000000000000000101010001111111111011111011110011010"b, /* 55 return-value */
 20   114 	"111111111101101111111111111111111111100111111111111101101010011100011000"b, /* 56 print */
 20   115 	"111111111101101111111111111111111111100111111111111101110110000010000000"b, /* 57 input */
 20   116 	"111111111101101111111111111111111111100111111111111101101010000000000000"b, /* 58 output */
 20   117 	"111111111101101111111111111111111111100111111111111101111101000010000000"b, /* 59 update */
 20   118 	"111111111101101111111111111111111111100111111111111101100010011100011000"b, /* 60 stream */
 20   119 	"000000000000000000000000000000000000000000000000000000000000000000000000"b, /* 61 reserved-1 */
 20   120 	"111111111101101111111111111111111111100111111111111101110001000010000000"b, /* 62 record */
 20   121 	"111111111101101111111111111111111111100111111111111101110001000110000000"b, /* 63 sequential */
 20   122 	"111111111101101111111111111111111111100111111111111101110001001010000000"b, /* 64 direct */
 20   123 	"111111111101101111111111111111111111100111111111111101101010011100011000"b, /* 65 interactive */
 20   124 	"000000000000000000000000000000000000000000000000000000000000000000000000"b, /* 66 reserved-2 */
 20   125 	"000000000000000000000000000000000000000000000000000000000000000000000000"b, /* 67 reserved-3 */
 20   126 	"111111111101101111111111111111111111100111111111111101110001000010000000"b, /* 68 stringvalue */
 20   127 	"111111111101101111111111111111111111100111111111111101110001000010000000"b, /* 69 keyed */
 20   128 	"000000000000000000000000000000000000000000000000000000000000000000000000"b, /* 70 reserved-4 */
 20   129 	"111111111101101111111111111111111111100111111111111101100000000000000000"b, /* 71 environment */
 20   130 	"000000000000000000000000000000000000000000000000000000000000000000000000"b); /* 72 aliasable */
 20   131 /*	 ------------------------------------------------------------------------
 20   132*	          111111111122222222223333333333444444444455555555556666666666777
 20   133*	 123456789012345678901234567890123456789012345678901234567890123456789012 */
 20   134 
 20   135 /* END INCLUDE FILE ... pl1_attribute_table.incl.pl1 */
      678 
 21     1 /* BEGIN INCLUDE FILE ... declare_type.incl.pl1 */
 21     2 
 21     3 /* Modified: 25 Apr 1979 by PCK to implement 4-bit decimal */
 21     4 
 21     5 dcl  (	by_declare	initial("001"b),
 21     6 	by_explicit_context initial("010"b),
 21     7 	by_context	initial("011"b),
 21     8 	by_implication	initial("100"b),
 21     9 	by_compiler	initial("101"b)) int static bit(3) aligned options(constant);
 21    10 
 21    11 /* END INCLUDE FILE ... declare_type.incl.pl1 */
      679 
      680      end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/25/90  0955.1  validate.pl1                      >spec>install>MR12.4-1049>validate.pl1
665          1    07/21/80  1646.3  semant.incl.pl1                   >ldd>include>semant.incl.pl1
1-228        2    08/01/89  1339.9  language_utility.incl.pl1         >ldd>include>language_utility.incl.pl1
2-307        3    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-325        4    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-335        5    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-374        6    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-386        7    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
666          8    05/06/74  1842.2  default.incl.pl1                  >ldd>include>default.incl.pl1
667          9    12/07/83  1801.7  symbol.incl.pl1                   >ldd>include>symbol.incl.pl1
668         10    07/21/80  1646.3  symbol_bits.incl.pl1              >ldd>include>symbol_bits.incl.pl1
669         11    07/21/80  1646.3  reference.incl.pl1                >ldd>include>reference.incl.pl1
670         12    07/21/80  1646.3  operator.incl.pl1                 >ldd>include>operator.incl.pl1
671         13    09/14/77  1805.7  token.incl.pl1                    >ldd>include>token.incl.pl1
672         14    11/30/78  1327.4  token_types.incl.pl1              >ldd>include>token_types.incl.pl1
673         15    08/13/81  2311.5  list.incl.pl1                     >ldd>include>list.incl.pl1
674         16    08/13/81  2143.5  block.incl.pl1                    >ldd>include>block.incl.pl1
675         17    04/07/83  1735.0  op_codes.incl.pl1                 >ldd>include>op_codes.incl.pl1
676         18    07/21/80  1646.3  nodes.incl.pl1                    >ldd>include>nodes.incl.pl1
677         19    12/07/83  1801.7  system.incl.pl1                   >ldd>include>system.incl.pl1
678         20    12/07/83  1800.1  pl1_attribute_table.incl.pl1      >ldd>include>pl1_attribute_table.incl.pl1
679         21    10/25/79  1745.8  declare_type.incl.pl1             >ldd>include>declare_type.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
a                               000150 automatic       structure                level 1 dcl 418 set ref 424* 428 428
adam                            000100 automatic       pointer                  dcl 447 in procedure "evaluate" set ref 458* 477*
                                                                                  499 499 501
adam                            000100 automatic       pointer                  dcl 58 in procedure "validate" set ref 81* 81* 82 86
                                                                                  86 96 117 117 117 117 125 125 125 153 162* 194 194
                                                                                  269 284 375 375 375 379 379 382 382 382
aligned                  31(21)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 622
                                                                                  651 655*
alloc_in_text            32(08)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 250*
                                                                                  260 265 272*
and_bits                               constant        bit(9)                   initial dcl 17-8 ref 481
area                     31(07)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 341
                                                                                  615
array                    12            based           pointer                  level 2 packed packed unaligned dcl 9-3 ref 232
attributes               31            based           structure                level 2 dcl 9-3 set ref 113* 137* 137 167 167 469
auto                     32(09)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 631*
                                                                                  645*
b                               000153 automatic       structure                level 1 dcl 418 in procedure "inconsistent" set ref
                                                                                  425* 428* 428 432
b                               000104 automatic       pointer                  dcl 58 in procedure "validate" set ref 153* 153*
                                                                                  155* 185
based                    32(10)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 379
binary                                                 builtin function         dcl 71 in procedure "validate" ref 463
binary                   31(29)        based           bit(1)                   level 4 in structure "symbol" packed packed
                                                                                  unaligned dcl 9-3 in procedure "validate" set ref
                                                                                  589* 591 597
bit                      31(03)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 121
                                                                                  295 339 388 602 651
bit_index                       000220 constant        fixed bin(8,0)           initial array packed unaligned dcl 20-32 ref 469
block                                  based           structure                level 1 dcl 16-5
block_node                4            based           pointer                  level 2 packed packed unaligned dcl 9-3 ref 153
builtin                  31(16)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 634
                                                                                  645
bv_adam                                parameter       pointer                  dcl 443 ref 438 458
bv_attributes                          parameter       structure                level 1 dcl 414 ref 409 424
bv_s                                   parameter       pointer                  dcl 443 ref 438 457
by_compiler                            constant        bit(3)                   initial dcl 21-5 ref 96 144
by_declare                             constant        bit(3)                   initial dcl 21-5 ref 194
c                               000114 automatic       char(1)                  packed unaligned dcl 450 set ref 526* 527 527
c_dcl_size               30            based           fixed bin(24,0)          level 2 dcl 9-3 set ref 309 311* 368* 591 591* 595*
                                                                                  597* 599* 607 607* 615 615*
char                     31(04)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 121
                                                                                  295 337 388 602 651
compiler_developed       32(35)        based           structure                level 3 packed packed unaligned dcl 9-3
complex                  31(31)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 590
condition                31(14)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 631
                                                                                  634 645
constant                 32(16)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 117
                                                                                  194 196* 501 582 627* 634 637 657
controlled               32(12)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 117
                                                                                  642
created_descriptor              000124 automatic       bit(1)                   dcl 62 set ref 86* 88 144 206
d                               000106 automatic       pointer                  dcl 58 in procedure "validate" set ref 155* 155* 156
                                                                                  160 162* 162 162 165* 184 348* 349 351 353 355*
d                                      parameter       pointer                  dcl 443 in procedure "evaluate" set ref 438 477* 547
                                                                                  549
data_type                31            based           structure                level 3 packed packed unaligned dcl 9-3 set ref 121
                                                                                  388 583
dcl_size                 24            based           pointer                  level 2 packed packed unaligned dcl 9-3 set ref 227
                                                                                  348 367* 607 615
dcl_type                  1(19)        based           bit(3)                   level 2 packed packed unaligned dcl 9-3 ref 96 144
                                                                                  194
dec_integer                            constant        bit(9)                   initial dcl 14-3 ref 353
decimal                  31(28)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 290
                                                                                  302 589
declaration               1            based           pointer                  level 2 packed packed unaligned dcl 13-3 ref 100
default                   6            based           pointer                  level 2 in structure "block" packed packed unaligned
                                                                                  dcl 16-5 in procedure "validate" ref 155
default                                based           structure                level 1 dcl 8-2 in procedure "validate"
default_area_size                      constant        fixed bin(31,0)          initial dcl 19-5 ref 615
default_fix_bin_p                      constant        fixed bin(31,0)          initial dcl 19-5 ref 591
default_fix_dec_p                      constant        fixed bin(31,0)          initial dcl 19-5 ref 595
default_flt_bin_p                      constant        fixed bin(31,0)          initial dcl 19-5 ref 597
default_flt_dec_p                      constant        fixed bin(31,0)          initial dcl 19-5 ref 599
defaulted                33(15)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 176*
defined                  32(13)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 125
dimensioned              31(19)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 232
                                                                                  235*
ds                              000110 automatic       pointer                  dcl 58 set ref 165* 165* 167 173* 179
e                                      parameter       pointer                  dcl 443 ref 438 459 461 462 472 473 477 479 481 483
                                                                                  487 489 491
element                   1            based           pointer                  array level 2 packed packed unaligned dcl 15-6 ref
                                                                                  505 507
entry                    31(09)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 194
                                                                                  219 501 562 569* 572 622 627 637
environment              32(34)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 257
                                                                                  562
error                     4(01)        based           bit(1)                   level 2 packed packed unaligned dcl 8-2 ref 162
error_$no_text                  000016 constant        entry                    external dcl 2-334 ref 547
exp_extents              33(04)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 382
explicit_packed          31(13)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 260
external                 32(02)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 117
                                                                                  281 631* 637* 640 642
father                    1            based           pointer                  level 2 in structure "block" packed packed unaligned
                                                                                  dcl 16-5 in procedure "validate" ref 185
father                   17            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 9-3 in procedure "validate" ref 81
                                                                                  82 105
file                     31(10)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 194
                                                                                  501 562 577* 622 627 637
file_attributes          32(19)        based           structure                level 3 packed packed unaligned dcl 9-3 set ref 577
fixed                    31(01)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 295
                                                                                  301 304 583* 585 591 657
float                    31(02)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 295
                                                                                  301 585 657
general                  16            based           pointer                  level 2 packed packed unaligned dcl 9-3 set ref 219
                                                                                  219 219* 237 252
generic                  31(17)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 252
                                                                                  255* 634 645
hbound                                                 builtin function         dcl 71 ref 427
i                               000156 automatic       fixed bin(17,0)          dcl 420 in procedure "inconsistent" set ref 427* 428
                                                                                  428*
i                               000110 automatic       fixed bin(17,0)          dcl 448 in procedure "evaluate" set ref 464* 464*
                                                                                  466 469 476* 477 477* 504* 505 507 507*
ident                           000120 automatic       varying char(256)        array dcl 452 set ref 507* 513 515 517 517 522 524
                                                                                  527 527
incompatable                    000000 constant        bit(72)                  initial array dcl 20-55 ref 427 427 428
index                                                  builtin function         dcl 71 ref 281
index_given_letter              000636 constant        fixed bin(8,0)           initial array packed unaligned dcl 20-6 ref 464
initial                  11            based           pointer                  level 2 packed packed unaligned dcl 9-3 ref 242 247
initialed                31(20)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 125
                                                                                  247 250* 269 622
interactive              32(28)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 257
internal                 32(01)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 269
                                                                                  637 640*
invalid                         000116 automatic       structure                level 1 dcl 61 set ref 113* 115 137 167* 169* 169*
                                                                                  171
invalid_attribute_set           000121 automatic       bit(1)                   dcl 62 set ref 159* 171* 173* 181
irreducible              31(34)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 569
                                                                                  572*
keyword                         000245 constant        char(11)                 initial array dcl 20-10 ref 464 466
lbound                                                 builtin function         dcl 71 ref 427
length                                                 builtin function         dcl 71 ref 513 517 522 524
letterx                         000111 automatic       fixed bin(17,0)          dcl 448 set ref 463* 464
level                     2(11)        based           fixed bin(8,0)           level 2 packed packed unaligned dcl 9-3 set ref 91
                                                                                  105 107* 144
list                                   based           structure                level 1 dcl 15-6
list_node                              constant        bit(9)                   initial dcl 18-5 ref 494
local                    31(27)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 284
location                  1            based           fixed bin(18,0)          level 2 packed packed unsigned unaligned dcl 9-3 ref
                                                                                  96 100
m                                      parameter       fixed bin(15,0)          dcl 401 in procedure "print" set ref 398 403*
m                               000112 automatic       fixed bin(15,0)          dcl 59 in procedure "validate" set ref 116* 117*
                                                                                  121* 125* 129* 132* 135 136* 226* 254* 257* 262*
                                                                                  271* 275 275* 374* 375* 379* 382* 388* 391 391*
m                               000113 automatic       fixed bin(15,0)          dcl 449 in procedure "evaluate" set ref 535* 538*
                                                                                  541* 547*
max_area_size                          constant        fixed bin(31,0)          initial dcl 19-5 ref 342
max_bit_string                         constant        fixed bin(31,0)          initial dcl 19-5 ref 339
max_char_string                        constant        fixed bin(31,0)          initial dcl 19-5 ref 337
max_p_dec                              constant        fixed bin(31,0)          initial dcl 19-5 ref 302
max_p_fix_bin_2                        constant        fixed bin(31,0)          initial dcl 19-5 ref 304
max_p_flt_bin_2                        constant        fixed bin(31,0)          initial dcl 19-5 ref 306
maximum                         000115 automatic       fixed bin(31,0)          dcl 60 set ref 337* 339* 342* 357 359
member                   32(04)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 91
                                                                                  93* 96 105 108* 129 622 645
merge_attributes                000020 constant        entry                    external dcl 2-355 ref 173
min_area_size                          constant        fixed bin(31,0)          initial dcl 19-5 ref 343
minimum                         000114 automatic       fixed bin(31,0)          dcl 60 set ref 336* 343* 362 364
misc_attributes          31(19)        based           structure                level 3 packed packed unaligned dcl 9-3
n                               000113 automatic       fixed bin(31,0)          dcl 60 in procedure "validate" set ref 302* 304*
                                                                                  306* 309 311 355* 357 359* 362 364* 368
n                               000112 automatic       fixed bin(17,0)          dcl 448 in procedure "evaluate" set ref 473* 474 474
                                                                                  476 496* 497 504 512
next                      1            based           pointer                  level 2 in structure "default" packed packed
                                                                                  unaligned dcl 8-2 in procedure "validate" ref 184
next                      6            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 9-3 in procedure "validate" ref 179
no_defaults               4(02)        based           bit(1)                   level 2 packed packed unaligned dcl 8-2 ref 156
node                                   based           structure                level 1 dcl 18-27
non_varying              32(05)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 606*
not_bits                               constant        bit(9)                   initial dcl 17-8 ref 483
null                                                   builtin function         dcl 71 ref 81 105 153 155 165 219 219 227 232 237
                                                                                  242 247 252 349 367 459 492 547 547 549 607 615
number                    0(21)        based           fixed bin(14,0)          level 2 in structure "list" packed packed unaligned
                                                                                  dcl 15-6 in procedure "validate" ref 219 496
number                    0(21)        based           fixed bin(14,0)          level 2 in structure "operator" packed packed
                                                                                  unaligned dcl 12-6 in procedure "validate" ref 473
offset                    5            based           pointer                  level 2 packed packed unaligned dcl 11-3 ref 491
op_code                   0(09)        based           bit(9)                   level 2 packed packed unaligned dcl 12-6 ref 479 481
                                                                                  483
operand                   1            based           pointer                  array level 2 packed packed unaligned dcl 12-6 ref
                                                                                  477
operator                               based           structure                level 1 dcl 12-6
operator_node                          constant        bit(9)                   initial dcl 18-5 ref 472
options                  32(06)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 260
                                                                                  263*
or_bits                                constant        bit(9)                   initial dcl 17-8 ref 479
packed                   33            based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 295*
param_desc               32(15)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 86
                                                                                  88* 125 209* 284 375 382 499
parameter                32(14)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 86
                                                                                  96 125 144 147* 208* 213* 375 382
picture                  31(18)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 237
                                                                                  240* 295 651
pl1_stat_$check_ansi            000010 external static bit(1)                   dcl 66 ref 266 280 562
pl1_stat_$unaligned_dec         000012 external static bit(1)                   dcl 67 set ref 290*
position                 32            based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 242
                                                                                  245*
precision                31(25)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 330*
predicate                 2            based           pointer                  level 2 packed packed unaligned dcl 8-2 set ref 162
                                                                                  549*
ptr                      31(05)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 295
r                               000102 automatic       pointer                  dcl 447 set ref 491* 492 494 496 505 507
real                     31(30)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 590*
reducible                31(33)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 569
                                                                                  572
refer_extents            33(05)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 379
reference                              based           structure                level 1 dcl 11-3
reference_node                         constant        bit(9)                   initial dcl 18-5 ref 487
return_parameter                000123 automatic       bit(1)                   dcl 62 set ref 144* 146 212
return_value             32(18)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 148*
                                                                                  214* 375 499 622
returns                  31(35)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 227
                                                                                  230* 569
s                               000104 automatic       pointer                  dcl 447 in procedure "evaluate" set ref 457* 469
                                                                                  477* 501 501 510
s                               000102 automatic       pointer                  dcl 58 in procedure "validate" set ref 75* 81 88 91
                                                                                  91 93 96 96 96 100 105 105 105 107 108 113 117 121
                                                                                  121 121 121 125 129 129 137 137 144 144 144 147
                                                                                  148 153 162* 167 173* 176 194 194 196 197* 208 209
                                                                                  213 214 219 219 219 219 227 227 230 232 232 235
                                                                                  237 237 240 242 242 245 247 247 250 250 252 252
                                                                                  255 257 257 257 260 260 260 260 263 265 269 269
                                                                                  269 272 281 281 284 290 290 290 295 295 295 295
                                                                                  295 295 295 295 301 301 302 304 309 311 330 337
                                                                                  339 341 348 367 368 375 379 382 388 388 388 388
                                                                                  403* 562 562 562 562 569 569 569 569 569 572 572
                                                                                  572 577 577 582 583 583 585 585 589 589 590 590
                                                                                  591 591 591 591 595 597 597 599 602 602 606 606
                                                                                  607 607 607 615 615 615 615 622 622 622 622 622
                                                                                  622 622 622 622 627 627 627 627 631 631 631 634
                                                                                  634 634 634 634 637 637 637 637 637 640 640 642
                                                                                  642 642 642 645 645 645 645 645 645 651 651 651
                                                                                  651 651 651 651 655 655 657 657 657 657 657 657
semantic_translator$error       000022 constant        entry                    external dcl 2-450 ref 403
signed                   31(23)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 657
                                                                                  657*
size                      3            based           fixed bin(9,0)           level 2 dcl 13-3 ref 281 462 489 507 513 517 526
source_id                 0(09)        based           structure                level 2 packed packed unaligned dcl 8-2 set ref 547*
sp                                     parameter       pointer                  dcl 54 ref 33 75
star_extents             33(06)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 375
static                   32(11)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 117
                                                                                  269 382 642*
storage_class            32(09)        based           structure                level 3 packed packed unaligned dcl 9-3 set ref 117
                                                                                  129 379 622 645
string                    4            based           char                     level 2 in structure "token" dcl 13-3 in procedure
                                                                                  "validate" ref 281 462 489 507 517 526
string                                                 builtin function         dcl 71 in procedure "validate" set ref 115 117 121
                                                                                  129 137* 137 137 167* 167 167 171 379 388 424* 424
                                                                                  425* 428 428* 428 428 469 577 583 622 645
stringvalue              32(31)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 257
structure                31            based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 269
                                                                                  651
substr                                                 builtin function         dcl 71 ref 428 463 469 517 622
symbol                    3            based           pointer                  level 2 in structure "default" packed packed
                                                                                  unaligned dcl 8-2 in procedure "validate" ref 165
symbol                    3            based           pointer                  level 2 in structure "reference" packed packed
                                                                                  unaligned dcl 11-3 in procedure "validate" ref 489
symbol                                 based           structure                level 1 dcl 9-3 in procedure "validate"
system                    4            based           bit(1)                   level 2 packed packed unaligned dcl 8-2 ref 160
t                               000106 automatic       pointer                  dcl 447 set ref 510* 513 517 526
temporary                32(17)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 153
                                                                                  290
token                                  based           structure                level 1 dcl 13-3 in procedure "validate"
token                     5            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 9-3 in procedure "validate" ref 100
                                                                                  281 510
token_node                             constant        bit(9)                   initial dcl 18-5 ref 351 461 505
token_to_binary                 000024 constant        entry                    external dcl 2-459 ref 355
type                      0(09)        based           bit(9)                   level 2 in structure "token" packed packed unaligned
                                                                                  dcl 13-3 in procedure "validate" ref 353
type                                   based           bit(9)                   level 2 in structure "node" packed packed unaligned
                                                                                  dcl 18-27 in procedure "validate" ref 351 461 472
                                                                                  487 494 505
unaligned                31(22)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 290
                                                                                  295 622 651* 655
unsigned                 31(24)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 657
unspec                                                 builtin function         dcl 71 ref 463
v                               000116 automatic       bit(1)                   array dcl 451 set ref 477* 479 479 481 481 483
valid_attribute_set             000122 automatic       bit(1)                   dcl 62 set ref 159* 177* 181
validate                        000014 constant        entry                    external dcl 1-225 ref 197
variable                 31(32)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 622*
                                                                                  627 634* 642
variable_arg_list        32(07)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 260
                                                                                  562 569
varying                  31(26)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 121
                                                                                  388 606 651
word                            000322 automatic       char(11)                 packed unaligned dcl 453 set ref 462* 463 464 466

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
a_format                               internal static bit(9)                   initial dcl 17-8
abs_fun                                internal static bit(9)                   initial dcl 17-8
acos_fun                               internal static bit(9)                   initial dcl 17-8
acosd_fun                              internal static bit(9)                   initial dcl 17-8
add                                    internal static bit(9)                   initial dcl 17-8
addbitno_fun                           internal static bit(9)                   initial dcl 17-8
addcharno_fun                          internal static bit(9)                   initial dcl 17-8
addr_fun                               internal static bit(9)                   initial dcl 17-8
addr_fun_bits                          internal static bit(9)                   initial dcl 17-8
addrel_fun                             internal static bit(9)                   initial dcl 17-8
adjust_count                    000000 constant        entry                    external dcl 2-20
aliasable_bit                          internal static fixed bin(15,0)          initial dcl 10-3
alloc_semantics                 000000 constant        entry                    external dcl 1-7
alloc_semantics$init_only       000000 constant        entry                    external dcl 1-12
allocation_fun                         internal static bit(9)                   initial dcl 17-8
allot_auto                             internal static bit(9)                   initial dcl 17-8
allot_based                            internal static bit(9)                   initial dcl 17-8
allot_ctl                              internal static bit(9)                   initial dcl 17-8
allot_var                              internal static bit(9)                   initial dcl 17-8
and                                    internal static bit(9)                   initial dcl 14-3
arg_desc_type                          internal static bit(36)                  initial dcl 19-71
array_node                             internal static bit(9)                   initial dcl 18-5
arrow                                  internal static bit(9)                   initial dcl 14-3
asin_fun                               internal static bit(9)                   initial dcl 17-8
asind_fun                              internal static bit(9)                   initial dcl 17-8
assign                                 internal static bit(9)                   initial dcl 17-8
assign_by_name                         internal static bit(9)                   initial dcl 17-8
assign_round                           internal static bit(9)                   initial dcl 17-8
assign_size_ck                         internal static bit(9)                   initial dcl 17-8
assign_zero                            internal static bit(9)                   initial dcl 17-8
assignment                             internal static bit(9)                   initial dcl 14-3
asterisk                               internal static bit(9)                   initial dcl 14-3
atan_fun                               internal static bit(9)                   initial dcl 17-8
atand_fun                              internal static bit(9)                   initial dcl 17-8
b_format                               internal static bit(9)                   initial dcl 17-8
baseno_fun                             internal static bit(9)                   initial dcl 17-8
baseptr_fun                            internal static bit(9)                   initial dcl 17-8
bin_integer                            internal static bit(9)                   initial dcl 14-3
binary_to_octal_string          000000 constant        entry                    external dcl 2-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 2-43
bindec                          000000 constant        entry                    external dcl 2-23
bindec$vs                       000000 constant        entry                    external dcl 2-28
binoct                          000000 constant        entry                    external dcl 2-33
bit_pointer                            internal static bit(9)                   initial dcl 17-8
bit_string                             internal static bit(9)                   initial dcl 14-3
bit_to_char                            internal static bit(9)                   initial dcl 17-8
bit_to_word                            internal static bit(9)                   initial dcl 17-8
bit_type                               internal static bit(36)                  initial dcl 19-71
bitno_fun                              internal static bit(9)                   initial dcl 17-8
bits_per_binary_exponent               internal static fixed bin(31,0)          initial dcl 19-5
bits_per_character                     internal static fixed bin(31,0)          initial dcl 19-5
bits_per_decimal_digit                 internal static fixed bin(31,0)          initial dcl 19-5
bits_per_digit                         internal static fixed bin(31,1)          initial dcl 19-69
bits_per_double                        internal static fixed bin(31,0)          initial dcl 19-5
bits_per_half                          internal static fixed bin(31,0)          initial dcl 19-5
bits_per_packed_ptr                    internal static fixed bin(31,0)          initial dcl 19-5
bits_per_word                          internal static fixed bin(31,0)          initial dcl 19-5
block_node                             internal static bit(9)                   initial dcl 18-5
bn_format                              internal static bit(9)                   initial dcl 17-8
bool_fun                               internal static bit(9)                   initial dcl 17-8
bound_ck                               internal static bit(9)                   initial dcl 17-8
bound_node                             internal static bit(9)                   initial dcl 18-5
builtin                         000000 constant        entry                    external dcl 1-17
builtin_type                           internal static bit(36)                  initial dcl 19-71
by_context                             internal static bit(3)                   initial dcl 21-5
by_explicit_context                    internal static bit(3)                   initial dcl 21-5
by_implication                         internal static bit(3)                   initial dcl 21-5
by_name_agg_node                       internal static bit(9)                   initial dcl 18-5
byte_fun                               internal static bit(9)                   initial dcl 17-8
c_format                               internal static bit(9)                   initial dcl 17-8
cat                                    internal static bit(9)                   initial dcl 14-3
cat_string                             internal static bit(9)                   initial dcl 17-8
ceil_fun                               internal static bit(9)                   initial dcl 17-8
char_string                            internal static bit(9)                   initial dcl 14-3
char_to_word                           internal static bit(9)                   initial dcl 17-8
char_type                              internal static bit(36)                  initial dcl 19-71
characters_per_double                  internal static fixed bin(31,0)          initial dcl 19-5
characters_per_half                    internal static fixed bin(31,0)          initial dcl 19-5
characters_per_word                    internal static fixed bin(31,0)          initial dcl 19-5
charno_fun                             internal static bit(9)                   initial dcl 17-8
check_star_extents              000000 constant        entry                    external dcl 1-27
clock_fun                              internal static bit(9)                   initial dcl 17-8
close_file                             internal static bit(9)                   initial dcl 17-8
codeptr_fun                            internal static bit(9)                   initial dcl 17-8
colon                                  internal static bit(9)                   initial dcl 14-3
column_format                          internal static bit(9)                   initial dcl 17-8
comma                                  internal static bit(9)                   initial dcl 14-3
compare_declaration             000000 constant        entry                    external dcl 1-31
compare_expression              000000 constant        entry                    external dcl 2-48
complex_fun                            internal static bit(9)                   initial dcl 17-8
complex_type                           internal static bit(36)                  initial dcl 19-71
conjg_fun                              internal static bit(9)                   initial dcl 17-8
constant_length                 000000 constant        entry                    external dcl 2-54
context_node                           internal static bit(9)                   initial dcl 18-5
context_processor               000000 constant        entry                    external dcl 1-38
convert                         000000 constant        entry                    external dcl 2-60
convert$from_builtin            000000 constant        entry                    external dcl 2-72
convert$to_integer              000000 constant        entry                    external dcl 2-66
convert$to_target               000000 constant        entry                    external dcl 2-88
convert$to_target_fb            000000 constant        entry                    external dcl 2-82
convert$validate                000000 constant        entry                    external dcl 2-78
copy_expression                 000000 constant        entry                    external dcl 2-94
copy_expression$copy_sons       000000 constant        entry                    external dcl 2-99
copy_string                            internal static bit(9)                   initial dcl 17-8
copy_unique_expression          000000 constant        entry                    external dcl 2-103
copy_words                             internal static bit(9)                   initial dcl 17-8
cos_fun                                internal static bit(9)                   initial dcl 17-8
cosd_fun                               internal static bit(9)                   initial dcl 17-8
create_array                    000000 constant        entry                    external dcl 2-108
create_block                    000000 constant        entry                    external dcl 2-112
create_bound                    000000 constant        entry                    external dcl 2-118
create_context                  000000 constant        entry                    external dcl 2-122
create_cross_reference          000000 constant        entry                    external dcl 2-128
create_default                  000000 constant        entry                    external dcl 2-132
create_identifier               000000 constant        entry                    external dcl 2-136
create_label                    000000 constant        entry                    external dcl 2-140
create_list                     000000 constant        entry                    external dcl 2-147
create_operator                 000000 constant        entry                    external dcl 2-152
create_reference                000000 constant        entry                    external dcl 2-158
create_statement                000000 constant        entry                    external dcl 2-163
create_statement$prologue       000000 constant        entry                    external dcl 2-171
create_storage                  000000 constant        entry                    external dcl 2-179
create_symbol                   000000 constant        entry                    external dcl 2-184
create_token                    000000 constant        entry                    external dcl 2-191
create_token$init_hash_table    000000 constant        entry                    external dcl 2-197
create_token$protected          000000 constant        entry                    external dcl 2-199
cross_reference_node                   internal static bit(9)                   initial dcl 18-5
dec_integer_type                       internal static bit(36)                  initial dcl 19-71
decbin                          000000 constant        entry                    external dcl 2-206
declare                         000000 constant        entry                    external dcl 1-41
declare_constant                000000 constant        entry                    external dcl 2-211
declare_constant$bit            000000 constant        entry                    external dcl 2-219
declare_constant$char           000000 constant        entry                    external dcl 2-224
declare_constant$desc           000000 constant        entry                    external dcl 2-229
declare_constant$integer        000000 constant        entry                    external dcl 2-234
declare_descriptor              000000 constant        entry                    external dcl 2-239
declare_descriptor$ctl          000000 constant        entry                    external dcl 2-249
declare_descriptor$param        000000 constant        entry                    external dcl 2-259
declare_integer                 000000 constant        entry                    external dcl 2-269
declare_picture                 000000 constant        entry                    external dcl 2-274
declare_picture_temp            000000 constant        entry                    external dcl 2-279
declare_pointer                 000000 constant        entry                    external dcl 2-287
declare_structure               000000 constant        entry                    external dcl 1-44
declare_temporary               000000 constant        entry                    external dcl 2-292
decode_node_id                  000000 constant        entry                    external dcl 2-300
decode_source_id                000000 constant        entry                    external dcl 2-306
default_node                           internal static bit(9)                   initial dcl 18-5
defined_reference               000000 constant        entry                    external dcl 1-47
delete_file                            internal static bit(9)                   initial dcl 17-8
desc_size                              internal static bit(9)                   initial dcl 17-8
digit_to_bit                           internal static bit(9)                   initial dcl 17-8
div                                    internal static bit(9)                   initial dcl 17-8
do_fun                                 internal static bit(9)                   initial dcl 17-8
do_semantics                    000000 constant        entry                    external dcl 1-57
do_spec                                internal static bit(9)                   initial dcl 17-8
e_format                               internal static bit(9)                   initial dcl 17-8
empty_area                             internal static bit(9)                   initial dcl 17-8
enable_on                              internal static bit(9)                   initial dcl 17-8
entry_var_type                         internal static bit(36)                  initial dcl 19-71
environmentptr_fun                     internal static bit(9)                   initial dcl 17-8
eq                                     internal static bit(9)                   initial dcl 14-3
equal                                  internal static bit(9)                   initial dcl 17-8
error                           000000 constant        entry                    external dcl 2-314
error$omit_text                 000000 constant        entry                    external dcl 2-319
error_                          000000 constant        entry                    external dcl 2-324
error_$finish                   000000 constant        entry                    external dcl 2-343
error_$initialize_error         000000 constant        entry                    external dcl 2-341
ex_prologue                            internal static bit(9)                   initial dcl 17-8
exp                                    internal static bit(9)                   initial dcl 17-8
exp_fun                                internal static bit(9)                   initial dcl 17-8
expand_assign                   000000 constant        entry                    external dcl 1-62
expand_by_name                  000000 constant        entry                    external dcl 1-71
expand_infix                    000000 constant        entry                    external dcl 1-76
expand_initial                  000000 constant        entry                    external dcl 1-84
expand_prefix                   000000 constant        entry                    external dcl 1-89
expand_primitive                000000 constant        entry                    external dcl 1-97
expon                                  internal static bit(9)                   initial dcl 14-3
expression_semantics            000000 constant        entry                    external dcl 1-105
f_format                               internal static bit(9)                   initial dcl 17-8
fill_refer                      000000 constant        entry                    external dcl 1-113
fixed_bin                              internal static bit(9)                   initial dcl 14-3
fixed_dec                              internal static bit(9)                   initial dcl 14-3
float_bin                              internal static bit(9)                   initial dcl 14-3
float_dec                              internal static bit(9)                   initial dcl 14-3
floor_fun                              internal static bit(9)                   initial dcl 17-8
format_value_node                      internal static bit(9)                   initial dcl 18-5
fortran_read                           internal static bit(9)                   initial dcl 17-8
fortran_write                          internal static bit(9)                   initial dcl 17-8
free_based                             internal static bit(9)                   initial dcl 17-8
free_ctl                               internal static bit(9)                   initial dcl 17-8
free_node                       000000 constant        entry                    external dcl 2-345
free_var                               internal static bit(9)                   initial dcl 17-8
ftn_file_manip                         internal static bit(9)                   initial dcl 17-8
ftn_trans_loop                         internal static bit(9)                   initial dcl 17-8
function                        000000 constant        entry                    external dcl 1-125
ge                                     internal static bit(9)                   initial dcl 14-3
generic_selector                000000 constant        entry                    external dcl 1-134
get_array_size                  000000 constant        entry                    external dcl 2-348
get_data_trans                         internal static bit(9)                   initial dcl 17-8
get_edit_trans                         internal static bit(9)                   initial dcl 17-8
get_file                               internal static bit(9)                   initial dcl 17-8
get_list_trans                         internal static bit(9)                   initial dcl 17-8
get_size                        000000 constant        entry                    external dcl 2-352
get_string                             internal static bit(9)                   initial dcl 17-8
greater_or_equal                       internal static bit(9)                   initial dcl 17-8
greater_than                           internal static bit(9)                   initial dcl 17-8
gt                                     internal static bit(9)                   initial dcl 14-3
half_to_word                           internal static bit(9)                   initial dcl 17-8
i_bin_integer                          internal static bit(9)                   initial dcl 14-3
i_dec_integer                          internal static bit(9)                   initial dcl 14-3
i_fixed_bin                            internal static bit(9)                   initial dcl 14-3
i_fixed_dec                            internal static bit(9)                   initial dcl 14-3
i_float_bin                            internal static bit(9)                   initial dcl 14-3
i_float_dec                            internal static bit(9)                   initial dcl 14-3
identifier                             internal static bit(9)                   initial dcl 14-3
imag_fun                               internal static bit(9)                   initial dcl 17-8
index_after_fun                        internal static bit(9)                   initial dcl 17-8
index_before_fun                       internal static bit(9)                   initial dcl 17-8
index_fun                              internal static bit(9)                   initial dcl 17-8
index_rev_fun                          internal static bit(9)                   initial dcl 17-8
integer_type                           internal static bit(36)                  initial dcl 19-71
io_data_list_semantics          000000 constant        entry                    external dcl 1-143
io_data_list_semantics$format_list_semantics
                                000000 constant        entry                    external dcl 1-120
io_semantics                    000000 constant        entry                    external dcl 1-148
is_arith_constant                      internal static bit(9)                   initial dcl 14-47
is_arithmetic_constant                 internal static bit(9)                   initial dcl 14-47
is_constant                            internal static bit(9)                   initial dcl 14-47
is_decimal_constant                    internal static bit(9)                   initial dcl 14-47
is_delimiter                           internal static bit(9)                   initial dcl 14-47
is_float_constant                      internal static bit(9)                   initial dcl 14-47
is_identifier                          internal static bit(9)                   initial dcl 14-47
is_imaginary_constant                  internal static bit(9)                   initial dcl 14-47
is_integral_constant                   internal static bit(9)                   initial dcl 14-47
is_isub                                internal static bit(9)                   initial dcl 14-47
isub                                   internal static bit(9)                   initial dcl 14-3
join                                   internal static bit(9)                   initial dcl 17-8
jump                                   internal static bit(9)                   initial dcl 17-8
jump_false                             internal static bit(9)                   initial dcl 17-8
jump_if_eq                             internal static bit(9)                   initial dcl 17-8
jump_if_ge                             internal static bit(9)                   initial dcl 17-8
jump_if_gt                             internal static bit(9)                   initial dcl 17-8
jump_if_le                             internal static bit(9)                   initial dcl 17-8
jump_if_lt                             internal static bit(9)                   initial dcl 17-8
jump_if_ne                             internal static bit(9)                   initial dcl 17-8
jump_true                              internal static bit(9)                   initial dcl 17-8
l_parn                                 internal static bit(9)                   initial dcl 17-8
label_array_element_node               internal static bit(9)                   initial dcl 18-5
label_node                             internal static bit(9)                   initial dcl 18-5
le                                     internal static bit(9)                   initial dcl 14-3
left_parn                              internal static bit(9)                   initial dcl 14-3
length_fun                             internal static bit(9)                   initial dcl 17-8
less_or_equal                          internal static bit(9)                   initial dcl 17-8
less_than                              internal static bit(9)                   initial dcl 17-8
line_format                            internal static bit(9)                   initial dcl 17-8
local_label_var_type                   internal static bit(36)                  initial dcl 19-71
locate_file                            internal static bit(9)                   initial dcl 17-8
lock_file                              internal static bit(9)                   initial dcl 17-8
lock_fun                               internal static bit(9)                   initial dcl 17-8
log10_fun                              internal static bit(9)                   initial dcl 17-8
log2_fun                               internal static bit(9)                   initial dcl 17-8
log_fun                                internal static bit(9)                   initial dcl 17-8
lookup                          000000 constant        entry                    external dcl 1-153
loop                                   internal static bit(9)                   initial dcl 17-8
lt                                     internal static bit(9)                   initial dcl 14-3
machine_state_node                     internal static bit(9)                   initial dcl 18-5
make_desc                              internal static bit(9)                   initial dcl 17-8
make_non_quick                  000000 constant        entry                    external dcl 1-162
match_arguments                 000000 constant        entry                    external dcl 1-166
max_bit_string_constant                internal static fixed bin(31,0)          initial dcl 19-5
max_block_number                       internal static fixed bin(17,0)          initial dcl 16-74
max_char_string_constant               internal static fixed bin(31,0)          initial dcl 19-5
max_fun                                internal static bit(9)                   initial dcl 17-8
max_identifier_length                  internal static fixed bin(31,0)          initial dcl 19-5
max_index_register_value               internal static fixed bin(31,0)          initial dcl 19-5
max_length_precision                   internal static fixed bin(31,0)          initial dcl 19-5
max_list_elements                      internal static fixed bin(17,0)          initial dcl 15-12
max_number_of_dimensions               internal static fixed bin(31,0)          initial dcl 19-5
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 12-15
max_offset_precision                   internal static fixed bin(31,0)          initial dcl 19-5
max_p_bin_or_dec                       internal static fixed bin(31,0)          initial dcl 19-5
max_p_fix_bin_1                        internal static fixed bin(31,0)          initial dcl 19-5
max_p_flt_bin_1                        internal static fixed bin(31,0)          initial dcl 19-5
max_scale                              internal static fixed bin(31,0)          initial dcl 19-5
max_signed_index_register_value        internal static fixed bin(31,0)          initial dcl 19-5
max_signed_xreg_precision              internal static fixed bin(31,0)          initial dcl 19-5
max_uns_xreg_precision                 internal static fixed bin(31,0)          initial dcl 19-5
max_words_per_variable                 internal static fixed bin(31,0)          initial dcl 19-5
min_fun                                internal static bit(9)                   initial dcl 17-8
min_scale                              internal static fixed bin(31,0)          initial dcl 19-5
minus                                  internal static bit(9)                   initial dcl 14-3
mod_bit                                internal static bit(9)                   initial dcl 17-8
mod_byte                               internal static bit(9)                   initial dcl 17-8
mod_fun                                internal static bit(9)                   initial dcl 17-8
mod_half                               internal static bit(9)                   initial dcl 17-8
mod_word                               internal static bit(9)                   initial dcl 17-8
mult                                   internal static bit(9)                   initial dcl 17-8
ne                                     internal static bit(9)                   initial dcl 14-3
negate                                 internal static bit(9)                   initial dcl 17-8
ngt                                    internal static bit(9)                   initial dcl 14-3
nlt                                    internal static bit(9)                   initial dcl 14-3
no_token                               internal static bit(9)                   initial dcl 14-3
nop                                    internal static bit(9)                   initial dcl 17-8
not                                    internal static bit(9)                   initial dcl 14-3
not_equal                              internal static bit(9)                   initial dcl 17-8
off_fun                                internal static bit(9)                   initial dcl 17-8
offset_adder                    000000 constant        entry                    external dcl 1-172
open_file                              internal static bit(9)                   initial dcl 17-8
operator_semantics              000000 constant        entry                    external dcl 1-184
optimizer                       000000 constant        entry                    external dcl 2-361
or                                     internal static bit(9)                   initial dcl 14-3
overlayed_by_builtin_bit               internal static fixed bin(15,0)          initial dcl 10-3
pack                                   internal static bit(9)                   initial dcl 17-8
packed_digits_per_character            internal static fixed bin(31,0)          initial dcl 19-5
page_format                            internal static bit(9)                   initial dcl 17-8
param_desc_ptr                         internal static bit(9)                   initial dcl 17-8
param_ptr                              internal static bit(9)                   initial dcl 17-8
parse_error                     000000 constant        entry                    external dcl 2-364
parse_error$no_text             000000 constant        entry                    external dcl 2-368
passed_as_arg_bit                      internal static fixed bin(15,0)          initial dcl 10-3
percent                                internal static bit(9)                   initial dcl 14-3
period                                 internal static bit(9)                   initial dcl 14-3
picture_format                         internal static bit(9)                   initial dcl 17-8
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 2-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 2-372
pl1_mod_fun                            internal static bit(9)                   initial dcl 17-8
pl1_print$for_lex               000000 constant        entry                    external dcl 2-418
pl1_print$non_varying           000000 constant        entry                    external dcl 2-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 2-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 2-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 2-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 2-414
pl1_print$varying               000000 constant        entry                    external dcl 2-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 2-395
plus                                   internal static bit(9)                   initial dcl 14-3
pointer_type                           internal static bit(36)                  initial dcl 19-71
prefix_plus                            internal static bit(9)                   initial dcl 17-8
propagate_bit                   000000 constant        entry                    external dcl 1-192
ptr_fun                                internal static bit(9)                   initial dcl 17-8
put_control                            internal static bit(9)                   initial dcl 17-8
put_data_trans                         internal static bit(9)                   initial dcl 17-8
put_edit_trans                         internal static bit(9)                   initial dcl 17-8
put_field                              internal static bit(9)                   initial dcl 17-8
put_field_chk                          internal static bit(9)                   initial dcl 17-8
put_file                               internal static bit(9)                   initial dcl 17-8
put_list_trans                         internal static bit(9)                   initial dcl 17-8
put_string                             internal static bit(9)                   initial dcl 17-8
r_format                               internal static bit(9)                   initial dcl 17-8
r_parn                                 internal static bit(9)                   initial dcl 17-8
range_ck                               internal static bit(9)                   initial dcl 17-8
rank_fun                               internal static bit(9)                   initial dcl 17-8
read_file                              internal static bit(9)                   initial dcl 17-8
real_fun                               internal static bit(9)                   initial dcl 17-8
real_type                              internal static bit(36)                  initial dcl 19-71
record_io                              internal static bit(9)                   initial dcl 17-8
refer                                  internal static bit(9)                   initial dcl 17-8
refer_extent                    000000 constant        entry                    external dcl 2-426
rel_fun                                internal static bit(9)                   initial dcl 17-8
repeat_fun                             internal static bit(9)                   initial dcl 17-8
reserve$clear                   000000 constant        entry                    external dcl 2-430
reserve$declare_lib             000000 constant        entry                    external dcl 2-434
reserve$read_lib                000000 constant        entry                    external dcl 2-439
return_bits                            internal static bit(9)                   initial dcl 17-8
return_string                          internal static bit(9)                   initial dcl 17-8
return_value                           internal static bit(9)                   initial dcl 17-8
return_words                           internal static bit(9)                   initial dcl 17-8
reverse_fun                            internal static bit(9)                   initial dcl 17-8
revert_on                              internal static bit(9)                   initial dcl 17-8
rewrite_file                           internal static bit(9)                   initial dcl 17-8
right_parn                             internal static bit(9)                   initial dcl 14-3
round_fun                              internal static bit(9)                   initial dcl 17-8
search_fun                             internal static bit(9)                   initial dcl 17-8
search_rev_fun                         internal static bit(9)                   initial dcl 17-8
segno_fun                              internal static bit(9)                   initial dcl 17-8
semantic_translator             000000 constant        entry                    external dcl 2-444
semantic_translator$abort       000000 constant        entry                    external dcl 2-446
semantic_translator$call_es     000000 constant        entry                    external dcl 1-196
semi_colon                             internal static bit(9)                   initial dcl 14-3
set_bit                                internal static fixed bin(15,0)          initial dcl 10-3
setbitno_fun                           internal static bit(9)                   initial dcl 17-8
setcharno_fun                          internal static bit(9)                   initial dcl 17-8
sf_par_node                            internal static bit(9)                   initial dcl 18-5
share_expression                000000 constant        entry                    external dcl 2-454
sign_fun                               internal static bit(9)                   initial dcl 17-8
signal_on                              internal static bit(9)                   initial dcl 17-8
simplify_expression             000000 constant        entry                    external dcl 1-205
simplify_offset                 000000 constant        entry                    external dcl 1-212
sin_fun                                internal static bit(9)                   initial dcl 17-8
sind_fun                               internal static bit(9)                   initial dcl 17-8
skip_format                            internal static bit(9)                   initial dcl 17-8
slash                                  internal static bit(9)                   initial dcl 14-3
source_node                            internal static bit(9)                   initial dcl 18-5
sqrt_fun                               internal static bit(9)                   initial dcl 17-8
stack_ptr                              internal static bit(9)                   initial dcl 17-8
stackbaseptr_fun                       internal static bit(9)                   initial dcl 17-8
stackframeptr_fun                      internal static bit(9)                   initial dcl 17-8
stacq_fun                              internal static bit(9)                   initial dcl 17-8
statement_node                         internal static bit(9)                   initial dcl 18-5
std_arg_list                           internal static bit(9)                   initial dcl 17-8
std_call                               internal static bit(9)                   initial dcl 17-8
std_entry                              internal static bit(9)                   initial dcl 17-8
std_return                             internal static bit(9)                   initial dcl 17-8
stop                                   internal static bit(9)                   initial dcl 17-8
storage_block_type                     internal static bit(36)                  initial dcl 19-71
stream_prep                            internal static bit(9)                   initial dcl 17-8
sub                                    internal static bit(9)                   initial dcl 17-8
subscripter                     000000 constant        entry                    external dcl 1-216
symbol_node                            internal static bit(9)                   initial dcl 18-5
system_bit_index                       internal static fixed bin(8,0)           initial array packed unaligned dcl 20-48
system_keyword                         internal static char(16)                 initial array dcl 20-26
tan_fun                                internal static bit(9)                   initial dcl 17-8
tand_fun                               internal static bit(9)                   initial dcl 17-8
temporary_node                         internal static bit(9)                   initial dcl 18-5
terminate_trans                        internal static bit(9)                   initial dcl 17-8
translate_fun                          internal static bit(9)                   initial dcl 17-8
trunc_fun                              internal static bit(9)                   initial dcl 17-8
unlock_file                            internal static bit(9)                   initial dcl 17-8
unpack                                 internal static bit(9)                   initial dcl 17-8
vclock_fun                             internal static bit(9)                   initial dcl 17-8
verify_fun                             internal static bit(9)                   initial dcl 17-8
verify_ltrim_fun                       internal static bit(9)                   initial dcl 17-8
verify_rev_fun                         internal static bit(9)                   initial dcl 17-8
verify_rtrim_fun                       internal static bit(9)                   initial dcl 17-8
word_to_mod2                           internal static bit(9)                   initial dcl 17-8
word_to_mod4                           internal static bit(9)                   initial dcl 17-8
word_to_mod8                           internal static bit(9)                   initial dcl 17-8
wordno_fun                             internal static bit(9)                   initial dcl 17-8
words_per_condition_var                internal static fixed bin(31,0)          initial dcl 19-5
words_per_entry_var                    internal static fixed bin(31,0)          initial dcl 19-5
words_per_file_var                     internal static fixed bin(31,0)          initial dcl 19-5
words_per_fix_bin_1                    internal static fixed bin(31,0)          initial dcl 19-5
words_per_fix_bin_2                    internal static fixed bin(31,0)          initial dcl 19-5
words_per_flt_bin_1                    internal static fixed bin(31,0)          initial dcl 19-5
words_per_flt_bin_2                    internal static fixed bin(31,0)          initial dcl 19-5
words_per_format                       internal static fixed bin(31,0)          initial dcl 19-5
words_per_label_var                    internal static fixed bin(31,0)          initial dcl 19-5
words_per_offset                       internal static fixed bin(31,0)          initial dcl 19-5
words_per_packed_pointer               internal static fixed bin(31,0)          initial dcl 19-5
words_per_pointer                      internal static fixed bin(31,0)          initial dcl 19-5
words_per_varying_string_header        internal static fixed bin(31,0)          initial dcl 19-5
write_file                             internal static bit(9)                   initial dcl 17-8
x_format                               internal static bit(9)                   initial dcl 17-8
xor_bits                               internal static bit(9)                   initial dcl 17-8

NAMES DECLARED BY EXPLICIT CONTEXT.
check_extent_type               002256 constant        entry                    internal dcl 371 ref 140 202
develop                         001564 constant        label                    dcl 206 ref 156
err0                            003030 constant        label                    dcl 535 ref 497 522 524
err1                            003033 constant        label                    dcl 538 ref 474 485
err2                            003036 constant        label                    dcl 541 ref 466 487 489 492 494 505
evaluate                        002446 constant        entry                    internal dcl 438 ref 162 477
exit                            003071 constant        label                    dcl 552 ref 515 519 529
fail                            003066 constant        label                    dcl 550 ref 459 499 501 513 517 527
inconsistent                    002366 constant        entry                    internal dcl 409 ref 113 169
print                           003040 constant        label                    dcl 547 in procedure "evaluate" ref 537 540
print                           002352 constant        entry                    internal dcl 398 in procedure "validate" ref 92 100
                                                                                  106 136 162 181 195 229 234 239 244 249 266 275
                                                                                  281 284 310 358 363 391 562
system                          003075 constant        entry                    internal dcl 557 ref 160 187
validate                        001022 constant        entry                    external dcl 33

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      3700        3726    3563        3710
Length      4522    3563        26         557     115           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
validate                            164 external procedure  is an external procedure.  
check_extent_type                       internal procedure  shares stack frame of external procedure validate.  
print                                   internal procedure  shares stack frame of external procedure validate.  
inconsistent                            internal procedure  shares stack frame of external procedure validate.  
evaluate                            234 internal procedure  calls itself recursively.  
system                                  internal procedure  shares stack frame of external procedure validate.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
evaluate                 000100 adam                        evaluate
                         000102 r                           evaluate
                         000104 s                           evaluate
                         000106 t                           evaluate
                         000110 i                           evaluate
                         000111 letterx                     evaluate
                         000112 n                           evaluate
                         000113 m                           evaluate
                         000114 c                           evaluate
                         000116 v                           evaluate
                         000120 ident                       evaluate
                         000322 word                        evaluate
validate                 000100 adam                        validate
                         000102 s                           validate
                         000104 b                           validate
                         000106 d                           validate
                         000110 ds                          validate
                         000112 m                           validate
                         000113 n                           validate
                         000114 minimum                     validate
                         000115 maximum                     validate
                         000116 invalid                     validate
                         000121 invalid_attribute_set       validate
                         000122 valid_attribute_set         validate
                         000123 return_parameter            validate
                         000124 created_descriptor          validate
                         000150 a                           inconsistent
                         000153 b                           inconsistent
                         000156 i                           inconsistent

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_l_a               r_e_as              alloc_bit_temp      call_ext_out        call_int_this       call_int_other
return_mac          shorten_stack       ext_entry           int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
error_$no_text                merge_attributes              semantic_translator$error     token_to_binary
validate

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pl1_stat_$check_ansi          pl1_stat_$unaligned_dec




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     33 001017        75 001027        81 001033        82 001040        86 001043        88 001054        91 001060
     92 001070        93 001074        96 001077       100 001117       105 001130       106 001144       107 001150
    108 001155       113 001157       115 001173       116 001177       117 001201       121 001216       125 001231
    129 001242       131 001252       132 001253       135 001254       136 001256       137 001260       140 001264
    144 001265       146 001314       147 001315       148 001317       153 001321       155 001334       156 001344
    159 001350       160 001352       162 001357       165 001413       167 001422       169 001437       171 001446
    173 001455       176 001476       177 001501       179 001503       181 001507       184 001517       185 001523
    187 001527       194 001530       195 001545       196 001551       197 001554       202 001563       206 001564
    208 001566       209 001571       212 001573       213 001575       214 001600       219 001602       226 001620
    227 001621       229 001627       230 001633       232 001636       234 001644       235 001650       237 001653
    239 001661       240 001665       242 001670       244 001676       245 001702       247 001705       249 001713
    250 001717       252 001724       254 001732       255 001734       257 001736       260 001746       262 001757
    263 001761       265 001763       266 001766       269 001775       271 002010       272 002012       275 002014
    280 002020       281 002023       284 002046       290 002062       295 002101       301 002110       302 002120
    304 002126       306 002133       309 002135       310 002137       311 002143       330 002146       331 002150
    336 002151       337 002152       339 002160       341 002166       342 002171       343 002173       344 002175
    345 002176       348 002177       349 002201       351 002205       353 002211       355 002216       357 002227
    358 002232       359 002236       362 002240       363 002242       364 002246       367 002250       368 002253
    369 002255       371 002256       374 002257       375 002260       379 002305       382 002320       388 002332
    391 002345       394 002351       398 002352       403 002354       405 002365       409 002366       424 002370
    425 002376       427 002401       428 002407       430 002426       432 002430       438 002445       457 002453
    458 002457       459 002462       461 002466       462 002474       463 002501       464 002504       465 002524
    466 002526       469 002527       472 002546       473 002550       474 002554       476 002560       477 002567
    478 002612       479 002614       481 002634       483 002646       485 002655       487 002656       489 002660
    491 002667       492 002671       494 002675       496 002701       497 002705       499 002707       501 002713
    504 002722       505 002731       507 002736       508 002752       510 002754       512 002757       513 002762
    515 002765       517 002772       519 003000       522 003001       524 003004       526 003007       527 003014
    529 003027       535 003030       537 003032       538 003033       540 003035       541 003036       547 003040
    549 003061       550 003066       552 003071       557 003075       562 003076       569 003122       572 003133
    577 003146       582 003153       583 003156       585 003163       589 003166       590 003176       591 003206
    595 003221       597 003224       599 003232       601 003234       602 003235       606 003240       607 003250
    615 003257       622 003271       627 003333       631 003343       634 003352       637 003402       640 003415
    642 003425       645 003440       651 003453       655 003463       657 003473       661 003506


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
