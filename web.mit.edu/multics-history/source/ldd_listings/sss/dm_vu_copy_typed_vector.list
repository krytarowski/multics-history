	COMPILATION LISTING OF SEGMENT dm_vu_copy_typed_vector
	Compiled by: Multics PL/I Compiler, Release 31a, of October 12, 1988
	Compiled at: Honeywell Bull, Phoenix AZ, SysM
	Compiled on: 10/24/88  1532.1 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 /* DESCRIPTION:
        7*         This subroutine takes a typed_vector and a pointer to its associated
        8*     typed_vector_array,  and a pointer to an area in which to put the output,
        9*     and creates a new typed_vector in the output area.  The  pointer  to  the
       10*     new typed_vector is returned.
       11**/
       12 
       13 /* HISTORY:
       14*Written by Lindsey L. Spratt, 02/07/83.
       15*Modified:
       16*12/18/84 by Lindsey L. Spratt:  Fixed to reference data_format_util_ instead
       17*            of the obsolete data_mgmt_util_.  Changed to have a cleanup
       18*            handler and be prepared to free the simple typed vector on
       19*            cleanup.  Moved the proc stmt.  Declared the unspec builtin.
       20**/
       21 /* format: style2,ind3 */
       22 
       23 /* format: style2,ind3 */
       24 dm_vu_copy_typed_vector:
       25    proc (p_caller_area_ptr, p_typed_vector_array_ptr, p_original_typed_vector_ptr, p_copy_typed_vector_ptr, p_code);
       26 
       27 /* START OF DECLARATIONS */
       28 /* Parameter */
       29 
       30       dcl	    p_caller_area_ptr      ptr parameter;
       31       dcl	    p_typed_vector_array_ptr
       32 			       ptr parameter;
       33       dcl	    p_original_typed_vector_ptr
       34 			       ptr parameter;
       35       dcl	    p_copy_typed_vector_ptr
       36 			       ptr parameter;
       37       dcl	    p_code	       fixed bin (35) parameter;
       38 
       39 /* Automatic */
       40 
       41       dcl	    caller_area_ptr	       ptr init (null);
       42       dcl	    dim_idx	       fixed bin (35) init (0);
       43       dcl	    value_string_size      fixed bin (35) init (0);
       44       dcl	    value_string_ptr       ptr init (null);
       45       dcl	    original_value_ptr     ptr init (null);
       46 
       47 /* Based */
       48 
       49       dcl	    caller_area	       area based (caller_area_ptr);
       50       dcl	    based_real_fix_bin_1u  fixed bin (35) unaligned based;
       51       dcl	    value_string	       bit (value_string_size) based (value_string_ptr) aligned;
       52 
       53 /* Builtin */
       54 
       55       dcl	    (null, unspec)	       builtin;
       56 
       57 /* Condition */
       58 
       59       dcl	    cleanup	       condition;
       60 
       61 /* Constant */
       62 
       63       dcl	    myname	       init ("dm_vu_copy_typed_vector") char (32) varying internal static
       64 			       options (constant);
       65       dcl	    (
       66 	    BITS_PER_BYTE	       init (9),
       67 	    BITS_PER_WORD	       init (36)
       68 	    )		       int static options (constant) fixed bin (17);
       69 
       70 /* Entry */
       71 
       72       dcl	    data_format_util_$get_data_bit_length
       73 			       entry (bit (36) aligned, fixed bin (35), fixed bin (35));
       74       dcl	    dm_vector_util_$free_typed_vector
       75 			       entry (ptr, ptr, ptr, fixed bin (35));
       76       dcl	    sub_err_	       entry () options (variable);
       77 
       78 /* External */
       79 
       80       dcl	    error_table_$unimplemented_version
       81 			       fixed bin (35) ext;
       82 
       83 /* END OF DECLARATIONS */
       84 
       85       caller_area_ptr = p_caller_area_ptr;
       86       p_code = 0;
       87       p_copy_typed_vector_ptr = null;
       88       call CHECK_VERSION ((p_original_typed_vector_ptr -> simple_typed_vector.type), (SIMPLE_TYPED_VECTOR_TYPE),
       89 	 "simple_typed_vector");
       90 
       91       typed_vector_array_ptr = p_typed_vector_array_ptr;
       92       call CHECK_VERSION (typed_vector_array.version, TYPED_VECTOR_ARRAY_VERSION_2, "typed_vector_array");
       93 
       94       simple_typed_vector_ptr = null;
       95       on cleanup call ERROR_FINISH ();
       96 
       97       stv_number_of_dimensions = p_original_typed_vector_ptr -> simple_typed_vector.number_of_dimensions;
       98       alloc simple_typed_vector in (caller_area);
       99       simple_typed_vector.type = SIMPLE_TYPED_VECTOR_TYPE;
      100 DIMENSION_LOOP:
      101       do dim_idx = 1 to simple_typed_vector.number_of_dimensions;
      102          arg_descriptor_ptr = typed_vector_array.dimension_table (dim_idx).descriptor_ptr;
      103          original_value_ptr = p_original_typed_vector_ptr -> simple_typed_vector.dimension (dim_idx).value_ptr;
      104          if arg_descriptor.type = varying_char_dtype
      105          then value_string_size = original_value_ptr -> based_real_fix_bin_1u * BITS_PER_BYTE + BITS_PER_WORD;
      106          else if arg_descriptor.type = varying_bit_dtype
      107          then value_string_size = original_value_ptr -> based_real_fix_bin_1u + BITS_PER_WORD;
      108          else
      109 	  do;
      110 	     call data_format_util_$get_data_bit_length (unspec (arg_descriptor), value_string_size, p_code);
      111 	     if p_code ^= 0
      112 	     then call ERROR_RETURN (p_code);
      113 	  end;
      114          alloc value_string in (caller_area);
      115          value_string = original_value_ptr -> value_string;
      116          simple_typed_vector.dimension (dim_idx).value_ptr = value_string_ptr;
      117 
      118       end DIMENSION_LOOP;
      119 
      120       p_copy_typed_vector_ptr = simple_typed_vector_ptr;
      121 
      122 MAIN_RETURN:
      123       return;
      124 
      125 
      126 ERROR_FINISH:
      127    proc ();
      128       if simple_typed_vector_ptr ^= null & p_copy_typed_vector_ptr ^= simple_typed_vector_ptr
      129       then call dm_vector_util_$free_typed_vector (caller_area_ptr, typed_vector_array_ptr, simple_typed_vector_ptr, (0));
      130    end ERROR_FINISH;
      131 
      132 ERROR_RETURN:
      133    proc (er_p_code);
      134       dcl	    er_p_code	       fixed bin (35) parm;
      135       call ERROR_FINISH ();
      136       p_code = er_p_code;
      137       goto MAIN_RETURN;
      138    end ERROR_RETURN;
      139 
      140 CHECK_VERSION:
      141    proc (cv_p_received_version, cv_p_expected_version, cv_p_structure_name);
      142       dcl	    cv_p_received_version  fixed bin (35);
      143       dcl	    cv_p_expected_version  fixed bin (35);
      144       dcl	    cv_p_structure_name    char (*);
      145       if cv_p_received_version ^= cv_p_expected_version
      146       then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
      147 	      "^/Expected version ^d of the ^a structure.
      148 Received version ^d instead.", cv_p_expected_version, cv_p_structure_name, cv_p_received_version);
      149    end CHECK_VERSION;
      150 
  1     1 /* BEGIN INCLUDE FILE sub_err_flags.incl.pl1 BIM 11/81 */
  1     2 /* format: style3 */
  1     3 
  1     4 /* These constants are to be used for the flags argument of sub_err_ */
  1     5 /* They are just "string (condition_info_header.action_flags)" */
  1     6 
  1     7 declare	(
  1     8 	ACTION_CAN_RESTART	init (""b),
  1     9 	ACTION_CANT_RESTART init ("1"b),
  1    10 	ACTION_DEFAULT_RESTART
  1    11 			init ("01"b),
  1    12 	ACTION_QUIET_RESTART
  1    13 			init ("001"b),
  1    14 	ACTION_SUPPORT_SIGNAL
  1    15 			init ("0001"b)
  1    16 	)		bit (36) aligned internal static options (constant);
  1    17 
  1    18 /* End include file */
      151 
      152 
  2     1 /* BEGIN INCLUDE FILE ... std_descriptor_types.incl.pl1 */
  2     2 
  2     3 
  2     4 /****^  HISTORY COMMENTS:
  2     5*  1) change(86-09-05,JMAthane), approve(86-09-05,MCR7525),
  2     6*     audit(86-09-11,Martinson), install(86-11-12,MR12.0-1208):
  2     7*     Added pascal_string_type_dtype descriptor type.  Its number is 87.
  2     8*     Objects of this type are PASCAL string types.
  2     9*  2) change(88-09-20,WAAnderson), approve(88-09-20,MCR7952),
  2    10*     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
  2    11*     Added the new C types.
  2    12*                                                   END HISTORY COMMENTS */
  2    13 
  2    14 /* This include file defines mnemonic names for the Multics
  2    15*   standard descriptor types, using both pl1 and cobol terminology.
  2    16*   PG 780613
  2    17*   JRD 790530
  2    18*   JRD 791016
  2    19*   MBW 810731
  2    20*   TGO 830614 Add hex types.
  2    21*   Modified June 83 JMAthane to add PASCAL data types
  2    22*   TGO 840120 Add float dec extended and generic, float binary generic
  2    23**/
  2    24 
  2    25      dcl	   (real_fix_bin_1_dtype  init (1),
  2    26 	   real_fix_bin_2_dtype   init (2),
  2    27 	   real_flt_bin_1_dtype   init (3),
  2    28 	   real_flt_bin_2_dtype   init (4),
  2    29 	   cplx_fix_bin_1_dtype   init (5),
  2    30 	   cplx_fix_bin_2_dtype   init (6),
  2    31 	   cplx_flt_bin_1_dtype   init (7),
  2    32 	   cplx_flt_bin_2_dtype   init (8),
  2    33 	   real_fix_dec_9bit_ls_dtype init (9),
  2    34 	   real_flt_dec_9bit_dtype init (10),
  2    35 	   cplx_fix_dec_9bit_ls_dtype init (11),
  2    36 	   cplx_flt_dec_9bit_dtype init (12),
  2    37 	   pointer_dtype	      init (13),
  2    38 	   offset_dtype	      init (14),
  2    39 	   label_dtype	      init (15),
  2    40 	   entry_dtype	      init (16),
  2    41 	   structure_dtype	      init (17),
  2    42 	   area_dtype	      init (18),
  2    43 	   bit_dtype	      init (19),
  2    44 	   varying_bit_dtype      init (20),
  2    45 	   char_dtype	      init (21),
  2    46 	   varying_char_dtype     init (22),
  2    47 	   file_dtype	      init (23),
  2    48 	   real_fix_dec_9bit_ls_overp_dtype init (29),
  2    49 	   real_fix_dec_9bit_ts_overp_dtype init (30),
  2    50 	   real_fix_bin_1_uns_dtype init (33),
  2    51 	   real_fix_bin_2_uns_dtype init (34),
  2    52 	   real_fix_dec_9bit_uns_dtype init (35),
  2    53 	   real_fix_dec_9bit_ts_dtype init (36),
  2    54 	   real_fix_dec_4bit_uns_dtype init (38),	/* digit-aligned */
  2    55 	   real_fix_dec_4bit_ts_dtype init (39),	/* byte-aligned */
  2    56 	   real_fix_dec_4bit_bytealigned_uns_dtype init (40), /* COBOL */
  2    57 	   real_fix_dec_4bit_ls_dtype init (41),	/* digit-aligned */
  2    58 	   real_flt_dec_4bit_dtype init (42),		/* digit-aligned */
  2    59 	   real_fix_dec_4bit_bytealigned_ls_dtype init (43),
  2    60 	   real_flt_dec_4bit_bytealigned_dtype init (44),
  2    61 	   cplx_fix_dec_4bit_bytealigned_ls_dtype init (45),
  2    62 	   cplx_flt_dec_4bit_bytealigned_dtype init (46),
  2    63 	   real_flt_hex_1_dtype   init (47),
  2    64 	   real_flt_hex_2_dtype   init (48),
  2    65 	   cplx_flt_hex_1_dtype   init (49),
  2    66 	   cplx_flt_hex_2_dtype   init (50),
  2    67 	   c_typeref_dtype        init (54),
  2    68 	   c_enum_dtype           init (55),
  2    69              c_enum_const_dtype     init (56),
  2    70 	   c_union_dtype          init (57),
  2    71 	   algol68_straight_dtype init (59),
  2    72 	   algol68_format_dtype   init (60),
  2    73 	   algol68_array_descriptor_dtype init (61),
  2    74 	   algol68_union_dtype    init (62),
  2    75 
  2    76 	   cobol_comp_6_dtype     init (1),
  2    77 	   cobol_comp_7_dtype     init (1),
  2    78 	   cobol_display_ls_dtype init (9),
  2    79 	   cobol_structure_dtype  init (17),
  2    80 	   cobol_char_string_dtype init (21),
  2    81 	   cobol_display_ls_overp_dtype init (29),
  2    82 	   cobol_display_ts_overp_dtype init (30),
  2    83 	   cobol_display_uns_dtype init (35),
  2    84 	   cobol_display_ts_dtype init (36),
  2    85 	   cobol_comp_8_uns_dtype init (38),		/* digit aligned */
  2    86 	   cobol_comp_5_ts_dtype  init (39),		/* byte aligned */
  2    87 	   cobol_comp_5_uns_dtype init (40),
  2    88 	   cobol_comp_8_ls_dtype  init (41),		/* digit aligned */
  2    89 	   real_flt_dec_extended_dtype init (81),	/* 9-bit exponent */
  2    90 	   cplx_flt_dec_extended_dtype init (82),	/* 9-bit exponent */
  2    91 	   real_flt_dec_generic_dtype init (83),	/* generic float decimal */
  2    92 	   cplx_flt_dec_generic_dtype init (84),
  2    93 	   real_flt_bin_generic_dtype init (85),	/* generic float binary */
  2    94 	   cplx_flt_bin_generic_dtype init (86)) fixed bin internal static options (constant);
  2    95 
  2    96      dcl	   (ft_integer_dtype      init (1),
  2    97 	   ft_real_dtype	      init (3),
  2    98 	   ft_double_dtype	      init (4),
  2    99 	   ft_complex_dtype	      init (7),
  2   100 	   ft_complex_double_dtype init (8),
  2   101 	   ft_external_dtype      init (16),
  2   102 	   ft_logical_dtype	      init (19),
  2   103 	   ft_char_dtype	      init (21),
  2   104 	   ft_hex_real_dtype      init (47),
  2   105 	   ft_hex_double_dtype    init (48),
  2   106 	   ft_hex_complex_dtype   init (49),
  2   107 	   ft_hex_complex_double_dtype init (50)
  2   108 	   )		      fixed bin internal static options (constant);
  2   109 
  2   110      dcl	   (algol68_short_int_dtype init (1),
  2   111 	   algol68_int_dtype      init (1),
  2   112 	   algol68_long_int_dtype init (2),
  2   113 	   algol68_real_dtype     init (3),
  2   114 	   algol68_long_real_dtype init (4),
  2   115 	   algol68_compl_dtype    init (7),
  2   116 	   algol68_long_compl_dtype init (8),
  2   117 	   algol68_bits_dtype     init (19),
  2   118 	   algol68_bool_dtype     init (19),
  2   119 	   algol68_char_dtype     init (21),
  2   120 	   algol68_byte_dtype     init (21),
  2   121 	   algol68_struct_struct_char_dtype init (22),
  2   122 	   algol68_struct_struct_bool_dtype init (20)
  2   123 	   )		      fixed bin internal static options (constant);
  2   124 
  2   125      dcl	   (label_constant_runtime_dtype init (24),
  2   126 	   int_entry_runtime_dtype init (25),
  2   127 	   ext_entry_runtime_dtype init (26),
  2   128 	   ext_procedure_runtime_dtype init (27),
  2   129 	   picture_runtime_dtype  init (63)
  2   130 	   )		      fixed bin internal static options (constant);
  2   131 
  2   132      dcl	   (pascal_integer_dtype  init (1),
  2   133 	   pascal_real_dtype      init (4),
  2   134 	   pascal_label_dtype     init (24),
  2   135 	   pascal_internal_procedure_dtype init (25),
  2   136 	   pascal_exportable_procedure_dtype init (26),
  2   137 	   pascal_imported_procedure_dtype init (27),
  2   138 	   pascal_typed_pointer_type_dtype init (64),
  2   139 	   pascal_char_dtype      init (65),
  2   140 	   pascal_boolean_dtype   init (66),
  2   141 	   pascal_record_file_type_dtype init (67),
  2   142 	   pascal_record_type_dtype init (68),
  2   143 	   pascal_set_dtype	      init (69),
  2   144 	   pascal_enumerated_type_dtype init (70),
  2   145 	   pascal_enumerated_type_element_dtype init (71),
  2   146 	   pascal_enumerated_type_instance_dtype init (72),
  2   147 	   pascal_user_defined_type_dtype init (73),
  2   148 	   pascal_user_defined_type_instance_dtype init (74),
  2   149 	   pascal_text_file_dtype init (75),
  2   150 	   pascal_procedure_type_dtype init (76),
  2   151 	   pascal_variable_formal_parameter_dtype init (77),
  2   152 	   pascal_value_formal_parameter_dtype init (78),
  2   153 	   pascal_entry_formal_parameter_dtype init (79),
  2   154 	   pascal_parameter_procedure_dtype init (80),
  2   155 	   pascal_string_type_dtype init (87)) fixed bin int static options (constant);
  2   156 
  2   157 
  2   158 /* END INCLUDE FILE ... std_descriptor_types.incl.pl1 */
      153 
      154 
  3     1 /* ***********************************************************
  3     2*   *                                                         *
  3     3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
  3     4*   *                                                         *
  3     5*   *********************************************************** */
  3     6 /* BEGIN INCLUDE FILE - vu_typed_vector.incl.pl1 */
  3     7 
  3     8 /* Written by Lindsey Spratt, 04/02/82.
  3     9*Modified:
  3    10*09/01/82 by Lindsey Spratt:  Changed value_ptr in simple_typed_vector to be
  3    11*	  unaligned.  Changed the type number of the simple_typed_vector to
  3    12*	  "3" from "1".  The OLD_SIMPLE_TYPED_VECTOR_TYPE is now an invalid
  3    13*	  type.
  3    14**/
  3    15 
  3    16 /* format: style2,ind3 */
  3    17      dcl	   1 simple_typed_vector  based (simple_typed_vector_ptr),
  3    18 	     2 type	      fixed bin (17) unal,
  3    19 	     2 number_of_dimensions
  3    20 			      fixed bin (17) unal,
  3    21 	     2 dimension	      (stv_number_of_dimensions refer (simple_typed_vector.number_of_dimensions)),
  3    22 	       3 value_ptr	      ptr unaligned;
  3    23 
  3    24      dcl	   1 general_typed_vector based (general_typed_vector_ptr),
  3    25 	     2 type	      fixed bin (17) unal,
  3    26 	     2 number_of_dimensions
  3    27 			      fixed bin (17) unal,
  3    28 	     2 dimension	      (gtv_number_of_dimensions refer (general_typed_vector.number_of_dimensions)),
  3    29 	       3 identifier	      fixed bin (17) unal,
  3    30 	       3 pad	      bit (18) unal,
  3    31 	       3 value_ptr	      ptr unal;
  3    32 
  3    33      dcl	   simple_typed_vector_ptr
  3    34 			      ptr;
  3    35      dcl	   stv_number_of_dimensions
  3    36 			      fixed bin (17);
  3    37 
  3    38      dcl	   general_typed_vector_ptr
  3    39 			      ptr;
  3    40      dcl	   gtv_number_of_dimensions
  3    41 			      fixed bin (17);
  3    42 
  3    43      dcl	   (
  3    44 	   OLD_SIMPLE_TYPED_VECTOR_TYPE
  3    45 			      init (1),		/* value_ptr was aligned. */
  3    46 	   GENERAL_TYPED_VECTOR_TYPE
  3    47 			      init (2),
  3    48 	   SIMPLE_TYPED_VECTOR_TYPE
  3    49 			      init (3)
  3    50 	   )		      fixed bin (17) internal static options (constant);
  3    51 
  3    52 /* END INCLUDE FILE - vu_typed_vector.incl.pl1 */
      155 
      156 
  4     1 /* ***********************************************************
  4     2*   *                                                         *
  4     3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
  4     4*   *                                                         *
  4     5*   *********************************************************** */
  4     6 /* BEGIN INCLUDE FILE vu_typed_vector_array.incl.pl1 */
  4     7 
  4     8 /* Written by Lindsey Spratt, 03/04/82.
  4     9*Modified:
  4    10*06/23/82 by Lindsey Spratt: Changed to version 2.  The cv entry declarations
  4    11*	  were altered.  cv_to_typed now takes ptr to the descriptor, ptr to
  4    12*	  the print_vector value (char varying), ptr to the typed_vector
  4    13*	  value location, and a code. cv_to_print now takes ptr to the
  4    14*	  descriptor, ptr to the typed_vector value, the print_vector value
  4    15*	  (char(*) varying), the maximum allowed length for the print_vector
  4    16*	  value, a temp_seg to put the value in if its to big to fit into
  4    17*	  the print_vector, and a code.
  4    18**/
  4    19 
  4    20 /* format: style2,ind3 */
  4    21      dcl	   1 typed_vector_array   based (typed_vector_array_ptr) aligned,
  4    22 	     2 version	      fixed bin (35),
  4    23 	     2 number_of_dimensions
  4    24 			      fixed bin (17),
  4    25 	     2 number_of_vectors  fixed bin (17),
  4    26 	     2 number_of_vector_slots
  4    27 			      fixed bin (17),
  4    28 	     2 maximum_dimension_name_length
  4    29 			      fixed bin (17),
  4    30 	     2 dimension_table    (tva_number_of_dimensions refer (typed_vector_array.number_of_dimensions)),
  4    31 	       3 name	      char (tva_maximum_dimension_name_length
  4    32 			      refer (typed_vector_array.maximum_dimension_name_length)) varying,
  4    33 	       3 descriptor_ptr   ptr,		/* call cv_to_print (descriptor_ptr, typed_value_ptr, */
  4    34 						/* temp_seg_ptr, max_length_for_print_value, */
  4    35 						/* print_value, code) */
  4    36 	       3 cv_to_print      entry (ptr, ptr, ptr, fixed bin (35), char (*) varying, fixed bin (35)),
  4    37 						/* call cv_to_typed (descriptor_ptr, area_ptr, */
  4    38 						/* print_value_ptr, typed_value_ptr, code) */
  4    39 	       3 cv_to_typed      entry (ptr, ptr, ptr, ptr, fixed bin (35)),
  4    40 	     2 vector_slot	      (tva_number_of_vector_slots refer (typed_vector_array.number_of_vector_slots))
  4    41 			      pointer;
  4    42 
  4    43      dcl	   typed_vector_array_ptr ptr;
  4    44      dcl	   tva_number_of_vector_slots
  4    45 			      fixed bin;
  4    46      dcl	   tva_number_of_dimensions
  4    47 			      fixed bin;
  4    48      dcl	   tva_maximum_dimension_name_length
  4    49 			      fixed bin;
  4    50      dcl	   TYPED_VECTOR_ARRAY_VERSION_2
  4    51 			      fixed bin (35) int static options (constant) init (2);
  4    52 
  4    53 /* END INCLUDE FILE vu_typed_vector_array.incl.pl1 */
      157 
      158 
  5     1 /* BEGIN INCLUDE FILE ... arg_descriptor.incl.pl1
  5     2*
  5     3*   James R. Davis 1 Mar 79 */
  5     4 /* Modified June 83 JMAthane for extended arg descriptor format */
  5     5 
  5     6      dcl	   1 arg_descriptor	      based (arg_descriptor_ptr) aligned,
  5     7 	     2 flag	      bit (1) unal,
  5     8 	     2 type	      fixed bin (6) unsigned unal,
  5     9 	     2 packed	      bit (1) unal,
  5    10 	     2 number_dims	      fixed bin (4) unsigned unal,
  5    11 	     2 size	      fixed bin (24) unsigned unal;
  5    12 
  5    13      dcl	   1 fixed_arg_descriptor based (arg_descriptor_ptr) aligned,
  5    14 	     2 flag	      bit (1) unal,
  5    15 	     2 type	      fixed bin (6) unsigned unal,
  5    16 	     2 packed	      bit (1) unal,
  5    17 	     2 number_dims	      fixed bin (4) unsigned unal,
  5    18 	     2 scale	      fixed bin (11) unal,
  5    19 	     2 precision	      fixed bin (12) unsigned unal;
  5    20 
  5    21      dcl	   1 extended_arg_descriptor based (arg_descriptor_ptr) aligned,
  5    22 	     2 flag	      bit (1) unal,		/* = "1"b */
  5    23 	     2 type	      fixed bin (6) unsigned unal, /* = 58 */
  5    24 	     2 packed	      bit (1) unal,		/* significant if number_dims ^= 0 */
  5    25 	     2 number_dims	      fixed (4) unsigned unal,/* number of variable dimensions */
  5    26 	     2 size	      bit (24) unal,
  5    27 	     2 dims	      (0 refer (extended_arg_descriptor.number_dims)), /* part referenced by called generated code */
  5    28 	       3 low	      fixed bin (35),
  5    29 	       3 high	      fixed bin (35),
  5    30 	       3 multiplier	      fixed bin (35),	/* in bits if packed, in words if not */
  5    31 	     2 real_type	      fixed bin (18) unsigned unal,
  5    32 	     2 type_offset	      fixed bin (18) unsigned unal; /* offset rel to symbol tree to symbol node for type, if any */
  5    33 
  5    34      dcl	   arg_descriptor_ptr     ptr;
  5    35 
  5    36      dcl	   extended_arg_type      fixed bin init (58);
  5    37 
  5    38 /* END INCLUDE file .... arg_descriptor.incl.pl1  */
      159 
      160    end dm_vu_copy_typed_vector;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/24/88  1400.1  dm_vu_copy_typed_vector.pl1       >special_ldd>install>MR12.2-1184>dm_vu_copy_typed_vector.pl1
151          1    04/16/82  0958.1  sub_err_flags.incl.pl1            >ldd>include>sub_err_flags.incl.pl1
153          2    10/24/88  1336.9  std_descriptor_types.incl.pl1     >special_ldd>install>MR12.2-1184>std_descriptor_types.incl.pl1
155          3    10/14/83  1609.1  vu_typed_vector.incl.pl1          >ldd>include>vu_typed_vector.incl.pl1
157          4    10/14/83  1609.1  vu_typed_vector_array.incl.pl1    >ldd>include>vu_typed_vector_array.incl.pl1
159          5    11/02/83  1845.0  arg_descriptor.incl.pl1           >ldd>include>arg_descriptor.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ACTION_CANT_RESTART             000000 constant        bit(36)                  initial dcl 1-7 set ref 145*
BITS_PER_BYTE                          constant        fixed bin(17,0)          initial dcl 65 ref 104
BITS_PER_WORD                          constant        fixed bin(17,0)          initial dcl 65 ref 104 106
SIMPLE_TYPED_VECTOR_TYPE               constant        fixed bin(17,0)          initial dcl 3-43 ref 88 99
TYPED_VECTOR_ARRAY_VERSION_2    000022 constant        fixed bin(35,0)          initial dcl 4-50 set ref 92*
arg_descriptor                         based           structure                level 1 dcl 5-6 ref 110 110
arg_descriptor_ptr              000124 automatic       pointer                  dcl 5-34 set ref 102* 104 106 110 110
based_real_fix_bin_1u                  based           fixed bin(35,0)          packed unaligned dcl 50 ref 104 106
caller_area                            based           area(1024)               dcl 49 ref 98 114
caller_area_ptr                 000100 automatic       pointer                  initial dcl 41 set ref 41* 85* 98 114 128*
cleanup                         000110 stack reference condition                dcl 59 ref 95
cv_p_expected_version                  parameter       fixed bin(35,0)          dcl 143 set ref 140 145 145*
cv_p_received_version                  parameter       fixed bin(35,0)          dcl 142 set ref 140 145 145*
cv_p_structure_name                    parameter       char                     packed unaligned dcl 144 set ref 140 145*
data_format_util_$get_data_bit_length
                                000010 constant        entry                    external dcl 72 ref 110
descriptor_ptr                         based           pointer                  array level 3 dcl 4-21 ref 102
dim_idx                         000102 automatic       fixed bin(35,0)          initial dcl 42 set ref 42* 100* 102 103 116*
dimension                 1            based           structure                array level 2 packed packed unaligned dcl 3-17
dimension_table           6            based           structure                array level 2 dcl 4-21
dm_vector_util_$free_typed_vector
                                000012 constant        entry                    external dcl 74 ref 128
er_p_code                              parameter       fixed bin(35,0)          dcl 134 ref 132 136
error_table_$unimplemented_version
                                000016 external static fixed bin(35,0)          dcl 80 set ref 145*
extended_arg_type               000126 automatic       fixed bin(17,0)          initial dcl 5-36 set ref 5-36*
maximum_dimension_name_length
                          4            based           fixed bin(17,0)          level 2 dcl 4-21 ref 102 102 102
myname                          000001 constant        varying char(32)         initial dcl 63 set ref 145*
null                                                   builtin function         dcl 55 ref 41 44 45 87 94 128 145 145
number_of_dimensions      0(18)        based           fixed bin(17,0)          level 2 packed packed unaligned dcl 3-17 set ref 97
                                                                                  98* 100
original_value_ptr              000106 automatic       pointer                  initial dcl 45 set ref 45* 103* 104 106 115
p_caller_area_ptr                      parameter       pointer                  dcl 30 ref 24 85
p_code                                 parameter       fixed bin(35,0)          dcl 37 set ref 24 86* 110* 111 111* 136*
p_copy_typed_vector_ptr                parameter       pointer                  dcl 35 set ref 24 87* 120* 128
p_original_typed_vector_ptr            parameter       pointer                  dcl 33 ref 24 88 97 103
p_typed_vector_array_ptr               parameter       pointer                  dcl 31 ref 24 91
simple_typed_vector                    based           structure                level 1 packed packed unaligned dcl 3-17 set ref 98
simple_typed_vector_ptr         000116 automatic       pointer                  dcl 3-33 set ref 94* 98* 99 100 116 120 128 128 128*
stv_number_of_dimensions        000120 automatic       fixed bin(17,0)          dcl 3-35 set ref 97* 98 98
sub_err_                        000014 constant        entry                    external dcl 76 ref 145
type                      0(01)        based           fixed bin(6,0)           level 2 in structure "arg_descriptor" packed packed
                                                                                  unsigned unaligned dcl 5-6 in procedure
                                                                                  "dm_vu_copy_typed_vector" ref 104 106
type                                   based           fixed bin(17,0)          level 2 in structure "simple_typed_vector" packed
                                                                                  packed unaligned dcl 3-17 in procedure
                                                                                  "dm_vu_copy_typed_vector" set ref 88 99*
typed_vector_array                     based           structure                level 1 dcl 4-21
typed_vector_array_ptr          000122 automatic       pointer                  dcl 4-43 set ref 91* 92 102 128*
unspec                                                 builtin function         dcl 55 ref 110 110
value_ptr                 1            based           pointer                  array level 3 packed packed unaligned dcl 3-17 set
                                                                                  ref 103 116*
value_string                           based           bit                      dcl 51 set ref 114 115* 115
value_string_ptr                000104 automatic       pointer                  initial dcl 44 set ref 44* 114* 115 116
value_string_size               000103 automatic       fixed bin(35,0)          initial dcl 43 set ref 43* 104* 106* 110* 114 114
                                                                                  115 115
varying_bit_dtype                      constant        fixed bin(17,0)          initial dcl 2-25 ref 106
varying_char_dtype                     constant        fixed bin(17,0)          initial dcl 2-25 ref 104
version                                based           fixed bin(35,0)          level 2 dcl 4-21 set ref 92*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ACTION_CAN_RESTART                     internal static bit(36)                  initial dcl 1-7
ACTION_DEFAULT_RESTART                 internal static bit(36)                  initial dcl 1-7
ACTION_QUIET_RESTART                   internal static bit(36)                  initial dcl 1-7
ACTION_SUPPORT_SIGNAL                  internal static bit(36)                  initial dcl 1-7
GENERAL_TYPED_VECTOR_TYPE              internal static fixed bin(17,0)          initial dcl 3-43
OLD_SIMPLE_TYPED_VECTOR_TYPE           internal static fixed bin(17,0)          initial dcl 3-43
algol68_array_descriptor_dtype         internal static fixed bin(17,0)          initial dcl 2-25
algol68_bits_dtype                     internal static fixed bin(17,0)          initial dcl 2-110
algol68_bool_dtype                     internal static fixed bin(17,0)          initial dcl 2-110
algol68_byte_dtype                     internal static fixed bin(17,0)          initial dcl 2-110
algol68_char_dtype                     internal static fixed bin(17,0)          initial dcl 2-110
algol68_compl_dtype                    internal static fixed bin(17,0)          initial dcl 2-110
algol68_format_dtype                   internal static fixed bin(17,0)          initial dcl 2-25
algol68_int_dtype                      internal static fixed bin(17,0)          initial dcl 2-110
algol68_long_compl_dtype               internal static fixed bin(17,0)          initial dcl 2-110
algol68_long_int_dtype                 internal static fixed bin(17,0)          initial dcl 2-110
algol68_long_real_dtype                internal static fixed bin(17,0)          initial dcl 2-110
algol68_real_dtype                     internal static fixed bin(17,0)          initial dcl 2-110
algol68_short_int_dtype                internal static fixed bin(17,0)          initial dcl 2-110
algol68_straight_dtype                 internal static fixed bin(17,0)          initial dcl 2-25
algol68_struct_struct_bool_dtype       internal static fixed bin(17,0)          initial dcl 2-110
algol68_struct_struct_char_dtype       internal static fixed bin(17,0)          initial dcl 2-110
algol68_union_dtype                    internal static fixed bin(17,0)          initial dcl 2-25
area_dtype                             internal static fixed bin(17,0)          initial dcl 2-25
bit_dtype                              internal static fixed bin(17,0)          initial dcl 2-25
c_enum_const_dtype                     internal static fixed bin(17,0)          initial dcl 2-25
c_enum_dtype                           internal static fixed bin(17,0)          initial dcl 2-25
c_typeref_dtype                        internal static fixed bin(17,0)          initial dcl 2-25
c_union_dtype                          internal static fixed bin(17,0)          initial dcl 2-25
char_dtype                             internal static fixed bin(17,0)          initial dcl 2-25
cobol_char_string_dtype                internal static fixed bin(17,0)          initial dcl 2-25
cobol_comp_5_ts_dtype                  internal static fixed bin(17,0)          initial dcl 2-25
cobol_comp_5_uns_dtype                 internal static fixed bin(17,0)          initial dcl 2-25
cobol_comp_6_dtype                     internal static fixed bin(17,0)          initial dcl 2-25
cobol_comp_7_dtype                     internal static fixed bin(17,0)          initial dcl 2-25
cobol_comp_8_ls_dtype                  internal static fixed bin(17,0)          initial dcl 2-25
cobol_comp_8_uns_dtype                 internal static fixed bin(17,0)          initial dcl 2-25
cobol_display_ls_dtype                 internal static fixed bin(17,0)          initial dcl 2-25
cobol_display_ls_overp_dtype           internal static fixed bin(17,0)          initial dcl 2-25
cobol_display_ts_dtype                 internal static fixed bin(17,0)          initial dcl 2-25
cobol_display_ts_overp_dtype           internal static fixed bin(17,0)          initial dcl 2-25
cobol_display_uns_dtype                internal static fixed bin(17,0)          initial dcl 2-25
cobol_structure_dtype                  internal static fixed bin(17,0)          initial dcl 2-25
cplx_fix_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 2-25
cplx_fix_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 2-25
cplx_fix_dec_4bit_bytealigned_ls_dtype internal static fixed bin(17,0)          initial dcl 2-25
cplx_fix_dec_9bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 2-25
cplx_flt_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 2-25
cplx_flt_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 2-25
cplx_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 2-25
cplx_flt_dec_4bit_bytealigned_dtype    internal static fixed bin(17,0)          initial dcl 2-25
cplx_flt_dec_9bit_dtype                internal static fixed bin(17,0)          initial dcl 2-25
cplx_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 2-25
cplx_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 2-25
cplx_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 2-25
cplx_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 2-25
entry_dtype                            internal static fixed bin(17,0)          initial dcl 2-25
ext_entry_runtime_dtype                internal static fixed bin(17,0)          initial dcl 2-125
ext_procedure_runtime_dtype            internal static fixed bin(17,0)          initial dcl 2-125
extended_arg_descriptor                based           structure                level 1 dcl 5-21
file_dtype                             internal static fixed bin(17,0)          initial dcl 2-25
fixed_arg_descriptor                   based           structure                level 1 dcl 5-13
ft_char_dtype                          internal static fixed bin(17,0)          initial dcl 2-96
ft_complex_double_dtype                internal static fixed bin(17,0)          initial dcl 2-96
ft_complex_dtype                       internal static fixed bin(17,0)          initial dcl 2-96
ft_double_dtype                        internal static fixed bin(17,0)          initial dcl 2-96
ft_external_dtype                      internal static fixed bin(17,0)          initial dcl 2-96
ft_hex_complex_double_dtype            internal static fixed bin(17,0)          initial dcl 2-96
ft_hex_complex_dtype                   internal static fixed bin(17,0)          initial dcl 2-96
ft_hex_double_dtype                    internal static fixed bin(17,0)          initial dcl 2-96
ft_hex_real_dtype                      internal static fixed bin(17,0)          initial dcl 2-96
ft_integer_dtype                       internal static fixed bin(17,0)          initial dcl 2-96
ft_logical_dtype                       internal static fixed bin(17,0)          initial dcl 2-96
ft_real_dtype                          internal static fixed bin(17,0)          initial dcl 2-96
general_typed_vector                   based           structure                level 1 packed packed unaligned dcl 3-24
general_typed_vector_ptr               automatic       pointer                  dcl 3-38
gtv_number_of_dimensions               automatic       fixed bin(17,0)          dcl 3-40
int_entry_runtime_dtype                internal static fixed bin(17,0)          initial dcl 2-125
label_constant_runtime_dtype           internal static fixed bin(17,0)          initial dcl 2-125
label_dtype                            internal static fixed bin(17,0)          initial dcl 2-25
offset_dtype                           internal static fixed bin(17,0)          initial dcl 2-25
pascal_boolean_dtype                   internal static fixed bin(17,0)          initial dcl 2-132
pascal_char_dtype                      internal static fixed bin(17,0)          initial dcl 2-132
pascal_entry_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 2-132
pascal_enumerated_type_dtype           internal static fixed bin(17,0)          initial dcl 2-132
pascal_enumerated_type_element_dtype   internal static fixed bin(17,0)          initial dcl 2-132
pascal_enumerated_type_instance_dtype  internal static fixed bin(17,0)          initial dcl 2-132
pascal_exportable_procedure_dtype      internal static fixed bin(17,0)          initial dcl 2-132
pascal_imported_procedure_dtype        internal static fixed bin(17,0)          initial dcl 2-132
pascal_integer_dtype                   internal static fixed bin(17,0)          initial dcl 2-132
pascal_internal_procedure_dtype        internal static fixed bin(17,0)          initial dcl 2-132
pascal_label_dtype                     internal static fixed bin(17,0)          initial dcl 2-132
pascal_parameter_procedure_dtype       internal static fixed bin(17,0)          initial dcl 2-132
pascal_procedure_type_dtype            internal static fixed bin(17,0)          initial dcl 2-132
pascal_real_dtype                      internal static fixed bin(17,0)          initial dcl 2-132
pascal_record_file_type_dtype          internal static fixed bin(17,0)          initial dcl 2-132
pascal_record_type_dtype               internal static fixed bin(17,0)          initial dcl 2-132
pascal_set_dtype                       internal static fixed bin(17,0)          initial dcl 2-132
pascal_string_type_dtype               internal static fixed bin(17,0)          initial dcl 2-132
pascal_text_file_dtype                 internal static fixed bin(17,0)          initial dcl 2-132
pascal_typed_pointer_type_dtype        internal static fixed bin(17,0)          initial dcl 2-132
pascal_user_defined_type_dtype         internal static fixed bin(17,0)          initial dcl 2-132
pascal_user_defined_type_instance_dtype
                                       internal static fixed bin(17,0)          initial dcl 2-132
pascal_value_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 2-132
pascal_variable_formal_parameter_dtype internal static fixed bin(17,0)          initial dcl 2-132
picture_runtime_dtype                  internal static fixed bin(17,0)          initial dcl 2-125
pointer_dtype                          internal static fixed bin(17,0)          initial dcl 2-25
real_fix_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 2-25
real_fix_bin_1_uns_dtype               internal static fixed bin(17,0)          initial dcl 2-25
real_fix_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 2-25
real_fix_bin_2_uns_dtype               internal static fixed bin(17,0)          initial dcl 2-25
real_fix_dec_4bit_bytealigned_ls_dtype internal static fixed bin(17,0)          initial dcl 2-25
real_fix_dec_4bit_bytealigned_uns_dtype
                                       internal static fixed bin(17,0)          initial dcl 2-25
real_fix_dec_4bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 2-25
real_fix_dec_4bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 2-25
real_fix_dec_4bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 2-25
real_fix_dec_9bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 2-25
real_fix_dec_9bit_ls_overp_dtype       internal static fixed bin(17,0)          initial dcl 2-25
real_fix_dec_9bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 2-25
real_fix_dec_9bit_ts_overp_dtype       internal static fixed bin(17,0)          initial dcl 2-25
real_fix_dec_9bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 2-25
real_flt_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 2-25
real_flt_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 2-25
real_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 2-25
real_flt_dec_4bit_bytealigned_dtype    internal static fixed bin(17,0)          initial dcl 2-25
real_flt_dec_4bit_dtype                internal static fixed bin(17,0)          initial dcl 2-25
real_flt_dec_9bit_dtype                internal static fixed bin(17,0)          initial dcl 2-25
real_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 2-25
real_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 2-25
real_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 2-25
real_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 2-25
structure_dtype                        internal static fixed bin(17,0)          initial dcl 2-25
tva_maximum_dimension_name_length      automatic       fixed bin(17,0)          dcl 4-48
tva_number_of_dimensions               automatic       fixed bin(17,0)          dcl 4-46
tva_number_of_vector_slots             automatic       fixed bin(17,0)          dcl 4-44

NAMES DECLARED BY EXPLICIT CONTEXT.
CHECK_VERSION                   000477 constant        entry                    internal dcl 140 ref 88 92
DIMENSION_LOOP                  000242 constant        label                    dcl 100
ERROR_FINISH                    000427 constant        entry                    internal dcl 126 ref 95 135
ERROR_RETURN                    000464 constant        entry                    internal dcl 132 ref 111
MAIN_RETURN                     000425 constant        label                    dcl 122 ref 137
dm_vu_copy_typed_vector         000071 constant        entry                    external dcl 24

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       732         752     612         742
Length      1250     612        20         262     120           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
dm_vu_copy_typed_vector             202 external procedure  is an external procedure.  
on unit on line 95                   64 on unit               
ERROR_FINISH                         76 internal procedure  is called by several nonquick procedures.  
ERROR_RETURN                            internal procedure  shares stack frame of external procedure dm_vu_copy_typed_vector.  
CHECK_VERSION                           internal procedure  shares stack frame of external procedure dm_vu_copy_typed_vector.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
dm_vu_copy_typed_vector  000100 caller_area_ptr             dm_vu_copy_typed_vector
                         000102 dim_idx                     dm_vu_copy_typed_vector
                         000103 value_string_size           dm_vu_copy_typed_vector
                         000104 value_string_ptr            dm_vu_copy_typed_vector
                         000106 original_value_ptr          dm_vu_copy_typed_vector
                         000116 simple_typed_vector_ptr     dm_vu_copy_typed_vector
                         000120 stv_number_of_dimensions    dm_vu_copy_typed_vector
                         000122 typed_vector_array_ptr      dm_vu_copy_typed_vector
                         000124 arg_descriptor_ptr          dm_vu_copy_typed_vector
                         000126 extended_arg_type           dm_vu_copy_typed_vector

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        call_int_this       call_int_other      return_mac          enable_op
ext_entry           int_entry           op_alloc_

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
data_format_util_$get_data_bit_length                       dm_vector_util_$free_typed_vector
sub_err_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$unimplemented_version




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     24 000064        41 000076        42 000100        43 000101        44 000102        45 000103    5   36 000104
     85 000106        86 000112        87 000113        88 000115        91 000135        92 000141        94 000166
     95 000170        97 000212        98 000223        99 000237       100 000242       102 000255       103 000301
    104 000312       106 000331       110 000345       111 000362       114 000373       115 000402       116 000407
    118 000415       120 000422       122 000425       126 000426       128 000434       130 000463       132 000464
    135 000466       136 000472       137 000476       140 000477       145 000510       149 000572


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
