	COMPILATION LISTING OF SEGMENT save_value
	Compiled by: Multics PL/I Compiler, Release 28d, of September 14, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 10/03/83  1656.7 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 /* Procedure to save value of a reference by converting it into an aligned temporary
       12*
       13*   Initial Version:  9 February 1972 by BLW
       14*	Modified: 12 December 1972 by BLW
       15*	Modified:	15 February 1973 by RAB
       16*	Modified:	9 March 1977 by RAB to change mod_word handling
       17*	Modified:	25 March 1977 by RAB to fix 1599
       18*	Modified:	9 April 1977 by RAB to remove mod_word
       19*	Modified:	30 March 1980 by RAB for reference.(padded aligned)_for_store_ref.
       20*		See prepare_operand for details.	*/
       21 
       22 save_value: proc(pt);
       23 
       24 dcl	pt ptr;		/* points at a reference node */
       25 
       26 dcl	(p,q) ptr,
       27 	n fixed bin,
       28 	(null,substr) builtin,
       29 	adjust_ref_count entry(ptr,fixed bin),
       30 	stack_temp$free_temp entry(ptr),
       31 	state_man$flush_address entry(ptr);
       32 
  1     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
  1     2 
  1     3 dcl	1 reference		based aligned,
  1     4 	2 node_type		bit(9) unaligned,
  1     5 	2 array_ref		bit(1) unaligned,
  1     6 	2 varying_ref		bit(1) unaligned,
  1     7 	2 shared			bit(1) unaligned,
  1     8 	2 put_data_sw		bit(1) unaligned,
  1     9 	2 processed		bit(1) unaligned,
  1    10 	2 units			fixed(3) unaligned,
  1    11 	2 ref_count		fixed(17) unaligned,
  1    12 	2 c_offset		fixed(24),
  1    13 	2 c_length		fixed(24),
  1    14 	2 symbol			ptr unaligned,
  1    15 	2 qualifier		ptr unaligned,
  1    16 	2 offset			ptr unaligned,
  1    17 	2 length			ptr unaligned,
  1    18 	2 subscript_list		ptr unaligned,
  1    19 						/* these fields are used by the 645 code generator */
  1    20 	2 address			structure unaligned,
  1    21 	  3 base			bit(3),
  1    22 	  3 offset		bit(15),
  1    23 	  3 op			bit(9),
  1    24 	  3 no_address		bit(1),
  1    25 	  3 inhibit		bit(1),
  1    26 	  3 ext_base		bit(1),
  1    27 	  3 tag			bit(6),
  1    28 	2 info			structure unaligned,
  1    29 	  3 address_in		structure,
  1    30 	    4 b			dimension(0:7) bit(1),
  1    31 	    4 storage		bit(1),
  1    32 	  3 value_in		structure,
  1    33 	    4 a			bit(1),
  1    34 	    4 q			bit(1),
  1    35 	    4 aq			bit(1),
  1    36 	    4 string_aq		bit(1),
  1    37 	    4 complex_aq		bit(1),
  1    38 	    4 decimal_aq		bit(1),
  1    39 	    4 b			dimension(0:7) bit(1),
  1    40 	    4 storage		bit(1),
  1    41 	    4 indicators		bit(1),
  1    42 	    4 x			dimension(0:7) bit(1),
  1    43 	  3 other			structure,
  1    44 	    4 big_offset		bit(1),
  1    45 	    4 big_length		bit(1),
  1    46 	    4 modword_in_offset	bit(1),
  1    47 	2 data_type		fixed(5) unaligned,
  1    48 	2 bits			structure unaligned,
  1    49 	  3 padded_ref		bit(1),
  1    50 	  3 aligned_ref		bit(1),
  1    51 	  3 long_ref		bit(1),
  1    52 	  3 forward_ref		bit(1),
  1    53 	  3 ic_ref		bit(1),
  1    54 	  3 temp_ref		bit(1),
  1    55 	  3 defined_ref		bit(1),
  1    56 	  3 evaluated		bit(1),
  1    57 	  3 allocate		bit(1),
  1    58 	  3 allocated		bit(1),
  1    59 	  3 aliasable		bit(1),
  1    60 	  3 even			bit(1),
  1    61 	  3 perm_address		bit(1),
  1    62 	  3 aggregate		bit(1),
  1    63 	  3 hit_zero		bit(1),
  1    64 	  3 dont_save		bit(1),
  1    65 	  3 fo_in_qual		bit(1),
  1    66 	  3 hard_to_load		bit(1),
  1    67 	2 relocation		bit(12) unaligned,
  1    68 	2 more_bits		structure unaligned,
  1    69 	  3 substr		bit(1),
  1    70 	  3 padded_for_store_ref	bit(1),
  1    71 	  3 aligned_for_store_ref	bit(1),
  1    72 	  3 mbz			bit(15),
  1    73 	2 store_ins		bit(18) unaligned;
  1    74 
  1    75 /* END INCLUDE FILE ... reference.incl.pl1 */
       33 
  2     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
  2     2 
  2     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
  2     4 
  2     5 /* format: style3 */
  2     6 dcl	1 operator	based aligned,
  2     7 	  2 node_type	bit (9) unaligned,
  2     8 	  2 op_code	bit (9) unaligned,
  2     9 	  2 shared	bit (1) unaligned,
  2    10 	  2 processed	bit (1) unaligned,
  2    11 	  2 optimized	bit (1) unaligned,
  2    12 	  2 number	fixed (14) unaligned,
  2    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
  2    14 
  2    15 dcl	max_number_of_operands
  2    16 			fixed bin (15) int static options (constant) initial (32767);
  2    17 
  2    18 /* END INCLUDE FILE ... operator.incl.pl1 */
       34 
  3     1 /* BEGIN INCLUDE FILE ... boundary.incl.pl1 */
  3     2 
  3     3 /* Modified: 26 Apr 1979 by PCK to implement 4-bit decimal */
  3     4 
  3     5 dcl (	bit_		init(1),
  3     6 	digit_		init(2),
  3     7 	character_	init(3),
  3     8 	half_		init(4),
  3     9 	word_		init(5),
  3    10 	mod2_		init(6),
  3    11 	mod4_		init(7)) fixed bin(3) int static options(constant);
  3    12 
  3    13 /* END INCLUDE FILE ... boundary.incl.pl1 */
       35 
  4     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
  4     2 
  4     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
  4     4 
  4     5 dcl (	block_node		initial("000000001"b),
  4     6 	statement_node		initial("000000010"b),
  4     7 	operator_node		initial("000000011"b),
  4     8 	reference_node		initial("000000100"b),
  4     9 	token_node		initial("000000101"b),
  4    10 	symbol_node		initial("000000110"b),
  4    11 	context_node		initial("000000111"b),
  4    12 	array_node		initial("000001000"b),
  4    13 	bound_node		initial("000001001"b),
  4    14 	format_value_node		initial("000001010"b),
  4    15 	list_node			initial("000001011"b),
  4    16 	default_node		initial("000001100"b),
  4    17 	machine_state_node		initial("000001101"b),
  4    18 	source_node		initial("000001110"b),
  4    19 	label_node		initial("000001111"b),
  4    20 	cross_reference_node	initial("000010000"b),
  4    21 	sf_par_node		initial("000010001"b),
  4    22 	temporary_node		initial("000010010"b),
  4    23 	label_array_element_node	initial("000010011"b),
  4    24 	by_name_agg_node		initial("000010100"b))
  4    25 				bit(9) internal static aligned options(constant);
  4    26 
  4    27 dcl	1 node			based aligned,
  4    28 	2 type			unal bit(9),
  4    29 	2 source_id		unal structure,
  4    30 	  3 file_number		bit(8),
  4    31 	  3 line_number		bit(14),
  4    32 	  3 statement_number	bit(5);
  4    33 
  4    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
       36 
       37 
       38 	p = pt;
       39 
       40 	if p -> reference.temp_ref & (p -> reference.aggregate | p -> reference.dont_save)
       41 	     then return;
       42 
       43 	q = p -> reference.length;
       44 	if q ^= null
       45 	then do;
       46 	     if q -> node.type = operator_node then q = q -> operand(1);
       47 	     if ^ q -> reference.shared
       48 		then call adjust_ref_count(q,-1);
       49 	     end;
       50 
       51 	q = p -> reference.qualifier;
       52 	if q ^= null
       53 	then do;
       54 	     if q -> node.type = temporary_node
       55 	     then call stack_temp$free_temp(p);
       56 	     else do;
       57 		if q -> node.type = operator_node
       58 		     then q = q -> operand(1);
       59 		if ^ q -> reference.shared
       60 		     then call adjust_ref_count(q,-1);
       61 		end;
       62 	     end;
       63 
       64 	q = p -> reference.offset;
       65 	if q ^= null
       66 	then do;
       67 	     if q -> node.type = operator_node
       68 		then q = q -> operand(1);
       69 
       70 	     if ^ q -> reference.shared
       71 		then call adjust_ref_count(q,-1);
       72 	     end;
       73 
       74 	p -> reference.aligned_ref,
       75 	p -> reference.temp_ref,
       76 	p -> reference.padded_ref,
       77 	p -> reference.aligned_for_store_ref,
       78 	p -> reference.padded_for_store_ref = "1"b;
       79 
       80 	p -> reference.units = word_;
       81 
       82 	p -> reference.length,
       83 	p -> reference.offset,
       84 	p -> reference.qualifier = null;
       85 
       86 	p -> reference.c_offset = 0;
       87 
       88 	p -> reference.fo_in_qual,
       89 	p -> reference.hard_to_load,
       90 	p -> reference.store_ins,
       91 	p -> reference.defined_ref,
       92 	p -> reference.allocated,
       93 	p -> reference.value_in.storage = "0"b;
       94 
       95 	if string(p -> reference.address_in)
       96 	     then call state_man$flush_address(p);
       97 	end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/03/83  1009.1  save_value.pl1                    >spec>on>pl128d>save_value.pl1
33           1    07/21/80  1546.3  reference.incl.pl1                >ldd>include>reference.incl.pl1
34           2    07/21/80  1546.3  operator.incl.pl1                 >ldd>include>operator.incl.pl1
35           3    10/25/79  1645.8  boundary.incl.pl1                 >ldd>include>boundary.incl.pl1
36           4    07/21/80  1546.3  nodes.incl.pl1                    >ldd>include>nodes.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
address_in               11            based           structure                level 3 packed unaligned dcl 1-3 ref 95
adjust_ref_count                000010 constant        entry                    external dcl 26 ref 47 59 70
aggregate                12(19)        based           bit(1)                   level 3 packed unaligned dcl 1-3 ref 40
aligned_for_store_ref
                         13(02)        based           bit(1)                   level 3 packed unaligned dcl 1-3 set ref 74*
aligned_ref              12(07)        based           bit(1)                   level 3 packed unaligned dcl 1-3 set ref 74*
allocated                12(15)        based           bit(1)                   level 3 packed unaligned dcl 1-3 set ref 88*
bits                     12(06)        based           structure                level 2 packed unaligned dcl 1-3
c_offset                  1            based           fixed bin(24,0)          level 2 dcl 1-3 set ref 86*
defined_ref              12(12)        based           bit(1)                   level 3 packed unaligned dcl 1-3 set ref 88*
dont_save                12(21)        based           bit(1)                   level 3 packed unaligned dcl 1-3 ref 40
fo_in_qual               12(22)        based           bit(1)                   level 3 packed unaligned dcl 1-3 set ref 88*
hard_to_load             12(23)        based           bit(1)                   level 3 packed unaligned dcl 1-3 set ref 88*
info                     11            based           structure                level 2 packed unaligned dcl 1-3
length                    6            based           pointer                  level 2 packed unaligned dcl 1-3 set ref 43 82*
more_bits                13            based           structure                level 2 packed unaligned dcl 1-3
node                                   based           structure                level 1 dcl 4-27
null                                                   builtin function         dcl 26 ref 44 52 65 82
offset                    5            based           pointer                  level 2 packed unaligned dcl 1-3 set ref 64 82*
operand                   1            based           pointer                  array level 2 packed unaligned dcl 2-6 ref 46 57 67
operator                               based           structure                level 1 dcl 2-6
operator_node                          constant        bit(9)                   initial dcl 4-5 ref 46 57 67
p                               000100 automatic       pointer                  dcl 26 set ref 38* 40 40 40 43 51 54* 64 74 74 74 74
                                                                                  74 80 82 82 82 86 88 88 88 88 88 88 95 95*
padded_for_store_ref     13(01)        based           bit(1)                   level 3 packed unaligned dcl 1-3 set ref 74*
padded_ref               12(06)        based           bit(1)                   level 3 packed unaligned dcl 1-3 set ref 74*
pt                                     parameter       pointer                  dcl 24 ref 22 38
q                               000102 automatic       pointer                  dcl 26 set ref 43* 44 46 46* 46 47 47* 51* 52 54 57
                                                                                  57* 57 59 59* 64* 65 67 67* 67 70 70*
qualifier                 4            based           pointer                  level 2 packed unaligned dcl 1-3 set ref 51 82*
reference                              based           structure                level 1 dcl 1-3
shared                    0(11)        based           bit(1)                   level 2 packed unaligned dcl 1-3 ref 47 59 70
stack_temp$free_temp            000012 constant        entry                    external dcl 26 ref 54
state_man$flush_address         000014 constant        entry                    external dcl 26 ref 95
storage                  11(23)        based           bit(1)                   level 4 packed unaligned dcl 1-3 set ref 88*
store_ins                13(18)        based           bit(18)                  level 2 packed unaligned dcl 1-3 set ref 88*
temp_ref                 12(11)        based           bit(1)                   level 3 packed unaligned dcl 1-3 set ref 40 74*
temporary_node                         constant        bit(9)                   initial dcl 4-5 ref 54
type                                   based           bit(9)                   level 2 packed unaligned dcl 4-27 ref 46 54 57 67
units                     0(14)        based           fixed bin(3,0)           level 2 packed unaligned dcl 1-3 set ref 80*
value_in                 11(09)        based           structure                level 3 packed unaligned dcl 1-3
word_                                  constant        fixed bin(3,0)           initial dcl 3-5 ref 80

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
array_node                             internal static bit(9)                   initial dcl 4-5
bit_                                   internal static fixed bin(3,0)           initial dcl 3-5
block_node                             internal static bit(9)                   initial dcl 4-5
bound_node                             internal static bit(9)                   initial dcl 4-5
by_name_agg_node                       internal static bit(9)                   initial dcl 4-5
character_                             internal static fixed bin(3,0)           initial dcl 3-5
context_node                           internal static bit(9)                   initial dcl 4-5
cross_reference_node                   internal static bit(9)                   initial dcl 4-5
default_node                           internal static bit(9)                   initial dcl 4-5
digit_                                 internal static fixed bin(3,0)           initial dcl 3-5
format_value_node                      internal static bit(9)                   initial dcl 4-5
half_                                  internal static fixed bin(3,0)           initial dcl 3-5
label_array_element_node               internal static bit(9)                   initial dcl 4-5
label_node                             internal static bit(9)                   initial dcl 4-5
list_node                              internal static bit(9)                   initial dcl 4-5
machine_state_node                     internal static bit(9)                   initial dcl 4-5
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 2-15
mod2_                                  internal static fixed bin(3,0)           initial dcl 3-5
mod4_                                  internal static fixed bin(3,0)           initial dcl 3-5
n                                      automatic       fixed bin(17,0)          dcl 26
reference_node                         internal static bit(9)                   initial dcl 4-5
sf_par_node                            internal static bit(9)                   initial dcl 4-5
source_node                            internal static bit(9)                   initial dcl 4-5
statement_node                         internal static bit(9)                   initial dcl 4-5
substr                                                 builtin function         dcl 26
symbol_node                            internal static bit(9)                   initial dcl 4-5
token_node                             internal static bit(9)                   initial dcl 4-5

NAME DECLARED BY EXPLICIT CONTEXT.
save_value                      000007 constant        entry                    external dcl 22

NAME DECLARED BY CONTEXT OR IMPLICATION.
string                                                 builtin function         ref 95

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       316         334     237         326
Length       562     237        16         211      57           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
save_value                           78 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
save_value               000100 p                           save_value
                         000102 q                           save_value

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
adjust_ref_count              stack_temp$free_temp          state_man$flush_address

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     22 000004        38 000014        40 000020        43 000026        44 000030        46 000034        47 000042
     51 000057        52 000062        54 000066        57 000103        59 000107        64 000125        65 000130
     67 000134        70 000142        74 000160        80 000173        82 000177        86 000203        88 000204
     95 000220        97 000232


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
