ASSEMBLY LISTING OF SEGMENT >special_ldd>install>MR12.2-1184>probe_break_.alm                                                                                                                       
ASSEMBLED ON:	10/24/88  1431.5 mst Mon
OPTIONS USED:	-target l68                              list symbols 
ASSEMBLED BY:	ALM Version 8.13 September 1988 
ASSEMBLER CREATED:	10/17/88  1015.1 mst Mon

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Bull Inc., 1988                *
                                     4  " *                                                         *
                                     5  " * Copyright, (C) Honeywell Information Systems Inc., 1982 *
                                     6  " *                                                         *
                                     7  " * Copyright (c) 1972 by Massachusetts Institute of        *
                                     8  " * Technology and Honeywell Information Systems, Inc.      *
                                     9  " *                                                         *
                                    10  " ***********************************************************
                                    11  
                                    12  " HISTORY COMMENTS:
                                    13  "  1) change(88-10-18,WAAnderson), approve(88-10-18,MCR7952),
                                    14  "     audit(88-10-18,JRGray), install(88-10-24,MR12.2-1184):
                                    15  "     Probe source archive split. Part of C-Probe support.
                                    16  "                                                      END HISTORY COMMENTS
                                    17  
                                    18  
                                    19  "
                                    20  "
                                    21  "	PROBE_BREAK_  --  Transfer vector for implementing probe breakpoints.
                                    22  "
                                    23  "	There are eight entries which correspond with the eight types of breakpoints
                                    24  "	presently implemented by operator_pointers_, type1 through type8. Of these
                                    25  "	eight, only type1 is presently used by ordinary probe -- the others are reserved
                                    26  "	for debugging and future use, and simply return if called.
                                    27  "
                                    28  "	06/27/79 WOS
                                    29  "
                                    30  
                        000000      31  	segdef	type1		" Standard probe breakpoint
                                    32  
    000000  aa  6 00000 3731 00     33  type1:	epbpsb	sp|0		" Get Stack Base pointer
    000001  0a   000001 2130 00     34  	epaq	*		" Get LP
    000002  aa  7 00026 7641 61     35  	lprplp	sb|stack_header.lot_ptr,*au
    000003  4a  4 00010 7101 20     36  	tra	probe_break_handler_$break_type_1 " Transfer to probe breakpoint handler
                                    37  
                                    38  
                        000004      39  	segdef	type2		" Types 2 through 8 are presently ignored.
                                    40  
    000004  aa  7 00044 7101 20     41  type2:	short_return
                                    42  
                                    43  
                        000005      44  	segdef	type3
                                    45  
    000005  aa  7 00044 7101 20     46  type3:	short_return
                                    47  
                                    48  
                        000006      49  	segdef	type4
                                    50  
    000006  aa  7 00044 7101 20     51  type4:	short_return
                                    52  
                                    53  
                        000007      54  	segdef	type5
                                    55  
    000007  aa  7 00044 7101 20     56  type5:	short_return
                                    57  
                                    58  
                        000010      59  	segdef	type6
                                    60  
    000010  aa  7 00044 7101 20     61  type6:	short_return
                                    62  
                                    63  
                        000011      64  	segdef	type7
                                    65  
    000011  aa  7 00044 7101 20     66  type7:	short_return
                                    67  
                                    68  
                        000012      69  	segdef	type8
                                    70  
    000012  aa  7 00044 7101 20     71  type8:	short_return
                                    72  
                                    73  
                                    74  "
                                    75  " 
                                    76  "
                                    77  
                                    78  	include	stack_header
                                   1-1  "	BEGIN INCLUDE FILE ... stack_header.incl.alm  3/72  Bill Silver
                                   1-2  "
                                   1-3  "	modified 7/76 by M. Weaver for *system links and more system use of areas
                                   1-4  "	modified 3/77 by M. Weaver  to add rnt_ptr
                                   1-5  "	modified 7/77 by S. Webber to add run_unit_depth and assign_linkage_ptr
                                   1-6  "	modified 6/83 by J. Ives to add trace_frames and in_trace.
                                   1-7  
                                   1-8  " HISTORY COMMENTS:
                                   1-9  "  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
                                  1-10  "     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
                                  1-11  "     added the heap_header_ptr definition
                                  1-12  "  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
                                  1-13  "     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
                                  1-14  "     Modified to support control point management.  These changes were
                                  1-15  "     actually made in February 1985 by G. Palter.
                                  1-16  "  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
                                  1-17  "     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
                                  1-18  "     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
                                  1-19  "     bit pad after cur_lot_size for the cpm_enabled. This was done to save
                                  1-20  "     some space int the stack header and change the cpd_ptr unal to
                                  1-21  "     cpm_data_ptr (ITS pair).
                                  1-22  "                                                      END HISTORY COMMENTS
                                  1-23  
                        000004    1-24  	equ	stack_header.cpm_data_ptr,4		ptr to control point for this stack
                        000006    1-25  	equ	stack_header.combined_stat_ptr,6	ptr to separate static area
                                  1-26  
                        000010    1-27  	equ	stack_header.clr_ptr,8		ptr to area containing linkage sections
                        000012    1-28  	equ	stack_header.max_lot_size,10		number of words allowed in lot (DU)
                        000012    1-29  	equ	stack_header.main_proc_invoked,10	nonzero if main proc was invoked in run unit (DL)
                        000012    1-30  	equ	stack_header.run_unit_depth,10	number of active run units stacked (DL)
                        000013    1-31  	equ	stack_header.cur_lot_size,11		DU number of words (entries) in lot
                        000013    1-32            equ	stack_header.cpm_enabled,11		DL  non-zero if control point management is enabled
                        000014    1-33  	equ	stack_header.system_free_ptr,12	ptr to system storage area
                        000016    1-34  	equ	stack_header.user_free_ptr,14		ptr to user storage area
                                  1-35  
                        000020    1-36  	equ	stack_header.parent_ptr,16		ptr to parent stack or null
                        000022    1-37  	equ	stack_header.stack_begin_ptr,18	ptr to first stack frame
                        000024    1-38  	equ	stack_header.stack_end_ptr,20		ptr to next useable stack frame
                        000026    1-39  	equ	stack_header.lot_ptr,22		ptr to the lot for the current ring
                                  1-40  
                        000030    1-41  	equ	stack_header.signal_ptr,24		ptr to signal proc for current ring
                        000032    1-42  	equ	stack_header.bar_mode_sp,26		value of sp before entering bar mode
                        000034    1-43  	equ	stack_header.pl1_operators_ptr,28	ptr: pl1_operators_$operator_table
                        000036    1-44  	equ	stack_header.call_op_ptr,30		ptr to standard call operator
                                  1-45  
                        000040    1-46  	equ	stack_header.push_op_ptr,32		ptr to standard push operator
                        000042    1-47  	equ	stack_header.return_op_ptr,34		ptr to standard return operator
                        000044    1-48  	equ	stack_header.ret_no_pop_op_ptr,36	ptr: stand. return/ no pop operator
                        000046    1-49  	equ	stack_header.entry_op_ptr,38		ptr to standard entry operator
                                  1-50  
                        000050    1-51  	equ	stack_header.trans_op_tv_ptr,40	ptr to table of translator operator ptrs
                        000052    1-52  	equ	stack_header.isot_ptr,42		pointer to ISOT
                        000054    1-53  	equ	stack_header.sct_ptr,44		pointer to System Condition Table
                        000056    1-54  	equ	stack_header.unwinder_ptr,46		pointer to unwinder for current ring
                                  1-55  
                        000060    1-56  	equ	stack_header.sys_link_info_ptr,48	ptr to *system link name table
                        000062    1-57  	equ	stack_header.rnt_ptr,50		ptr to reference name table
                        000064    1-58  	equ	stack_header.ect_ptr,52		ptr to event channel table
                        000066    1-59  	equ	stack_header.assign_linkage_ptr,54	ptr to area for hcs_$assign_linkage calls
                        000070    1-60  	equ	stack_header.heap_header_ptr,56	ptr to heap header.
                        000072    1-61  	equ	stack_header.trace_frames,58		stack of trace_catch_ frames
                        000073    1-62  	equ	stach_header.trace_top_ptr,59		trace pointer
                        000074    1-63  	equ	stack_header.in_trace,60		trace antirecurse bit
                        000100    1-64  	equ	stack_header_end,64			length of stack header
                                  1-65  
                                  1-66  
                                  1-67  
                                  1-68  
                        000000    1-69  	equ	trace_frames.count,0		number of trace frames on stack
                        000001    1-70  	equ	trace_frames.top_ptr,1		packed pointer to top one
                                  1-71  
                                  1-72  "	The  following constant is an offset within the  pl1  operators table.
                                  1-73  "	It  references a  transfer vector table.
                                  1-74  
                        000551    1-75  	bool	tv_offset,551
                                  1-76  
                                  1-77  
                                  1-78  "	The  following constants are offsets within this transfer vector table.
                                  1-79  
                        001170    1-80  	equ	call_offset,tv_offset+271
                        001171    1-81  	equ	push_offset,tv_offset+272
                        001172    1-82  	equ	return_offset,tv_offset+273
                        001173    1-83  	equ	return_no_pop_offset,tv_offset+274
                        001174    1-84  	equ	entry_offset,tv_offset+275
                                  1-85  
                                  1-86  
                                  1-87  " 	END INCLUDE FILE stack_header.incl.alm
                                    79  
                                    80  	end

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000014  5a   000003 000000 
    000015  5a   000071 600000 
    000016  aa   000000 000000 
    000017  55   000012 000002 
    000020  5a   000002 400003 
    000021  55   000006 000012 
    000022  aa  014 160 162 157
    000023  aa  142 145 137 142
    000024  aa  162 145 141 153
    000025  aa  137 000 000 000
    000026  55   000017 000003 
    000027  0a   000012 400000 
    000030  55   000015 000003 
    000031  aa  005 164 171 160         type8
    000032  aa  145 070 000 000
    000033  55   000024 000012 
    000034  0a   000011 400000 
    000035  55   000022 000003 
    000036  aa  005 164 171 160         type7
    000037  aa  145 067 000 000
    000040  55   000031 000017 
    000041  0a   000010 400000 
    000042  55   000027 000003 
    000043  aa  005 164 171 160         type6
    000044  aa  145 066 000 000
    000045  55   000036 000024 
    000046  0a   000007 400000 
    000047  55   000034 000003 
    000050  aa  005 164 171 160         type5
    000051  aa  145 065 000 000
    000052  55   000043 000031 
    000053  0a   000006 400000 
    000054  55   000041 000003 
    000055  aa  005 164 171 160         type4
    000056  aa  145 064 000 000
    000057  55   000050 000036 
    000060  0a   000005 400000 
    000061  55   000046 000003 
    000062  aa  005 164 171 160         type3
    000063  aa  145 063 000 000
    000064  55   000055 000043 
    000065  0a   000004 400000 
    000066  55   000053 000003 
    000067  aa  005 164 171 160         type2
    000070  aa  145 062 000 000
    000071  55   000062 000050 
    000072  0a   000000 400000 
    000073  55   000060 000003 
    000074  aa  005 164 171 160         type1
    000075  aa  145 061 000 000
    000076  55   000002 000055 
    000077  6a   000000 400002 
    000100  55   000065 000003 
    000101  aa  014 163 171 155         symbol_table
    000102  aa  142 157 154 137
    000103  aa  164 141 142 154
    000104  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000105  aa   000000 000015 
    000106  aa   000000 000000 
    000107  aa   000000 000000 
    000110  aa   000000 000000 
    000111  aa   000000 000000 
    000112  5a   000012 000000 
    000113  5a   000017 000000 
    000114  5a   000024 000000 
    000115  5a   000031 000000 
    000116  5a   000036 000000 
    000117  5a   000043 000000 
    000120  5a   000050 000000 
    000121  5a   000055 000000 
    000122  5a   000062 000000 

EXTERNAL NAMES

    000123  aa  014 142 162 145         break_type_1
    000124  aa  141 153 137 164
    000125  aa  171 160 145 137
    000126  aa  061 000 000 000
    000127  aa  024 160 162 157         probe_break_handler_
    000130  aa  142 145 137 142
    000131  aa  162 145 141 153
    000132  aa  137 150 141 156
    000133  aa  144 154 145 162
    000134  aa  137 000 000 000

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000135  aa   000004 000000 
    000136  55   000113 000107 
    000137  aa   000001 000000 
    000140  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    000141  5a   000121 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000014 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000012 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         probe_break_handler_|break_type_1
    000011  5a   000125 0000 00
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000010 
    000004  aa   000000 116575 
    000005  aa   012137 773040 
    000006  aa   000000 116606 
    000007  aa   026727 672743 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000160 
    000020  aa   000000 000124 
    000021  aa   000133 000127 
    000022  aa   000151 000124 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   070056 061063 
    000030  aa   040123 145160 
    000031  aa   164145 155142 
    000032  aa   145162 040061 
    000033  aa   071070 070040 
    000034  aa   110151 162156 
    000035  aa   145151 163145 
    000036  aa   156056 123171 
    000037  aa   163115 141151 
    000040  aa   156164 056141 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   055164 141162 
    000045  aa   147145 164040 
    000046  aa   154066 070040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040154 151163 
    000057  aa   164040 163171 
    000060  aa   155142 157154 
    000061  aa   163040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000002 
    000066  aa   000076 000061 
    000067  aa   166057 365105 
    000070  aa   000000 116606 
    000071  aa   005732 200000 
    000072  aa   000113 000042 
    000073  aa   147777 464111 
    000074  aa   000000 115000 
    000075  aa   507463 000000 
    000076  aa   076163 160145          >special_ldd>install>MR12.2-1184>probe_break_.alm
    000077  aa   143151 141154 
    000100  aa   137154 144144 
    000101  aa   076151 156163 
    000102  aa   164141 154154 
    000103  aa   076115 122061 
    000104  aa   062056 062055 
    000105  aa   061061 070064 
    000106  aa   076160 162157 
    000107  aa   142145 137142 
    000110  aa   162145 141153 
    000111  aa   137056 141154 
    000112  aa   155040 040040 
    000113  aa   076154 144144          >ldd>include>stack_header.incl.alm
    000114  aa   076151 156143 
    000115  aa   154165 144145 
    000116  aa   076163 164141 
    000117  aa   143153 137150 
    000120  aa   145141 144145 
    000121  aa   162056 151156 
    000122  aa   143154 056141 
    000123  aa   154155 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

                break_type_1             probe_break_:        36.
        1170    call_offset              stack_header:        80.
        1174    entry_offset             stack_header:        84.
                probe_break_handler_     probe_break_:        36.
        1171    push_offset              stack_header:        81.
        1173    return_no_pop_offset     stack_header:        83.
        1172    return_offset            stack_header:        82.
          73    stach_header.trace_top_ptr     stack_header:        62.
          66    stack_header.assign_linkage_ptr      stack_header:        59.
          32    stack_header.bar_mode_sp       stack_header:        42.
          36    stack_header.call_op_ptr       stack_header:        44.
          10    stack_header.clr_ptr     stack_header:        27.
           6    stack_header.combined_stat_ptr       stack_header:        25.
           4    stack_header.cpm_data_ptr      stack_header:        24.
          13    stack_header.cpm_enabled       stack_header:        32.
          13    stack_header.cur_lot_size      stack_header:        31.
          64    stack_header.ect_ptr     stack_header:        58.
          46    stack_header.entry_op_ptr      stack_header:        49.
          70    stack_header.heap_header_ptr   stack_header:        60.
          74    stack_header.in_trace    stack_header:        63.
          52    stack_header.isot_ptr    stack_header:        52.
          26    stack_header.lot_ptr     probe_break_:        35,
                                         stack_header:        39.
          12    stack_header.main_proc_invoked       stack_header:        29.
          12    stack_header.max_lot_size      stack_header:        28.
          20    stack_header.parent_ptr  stack_header:        36.
          34    stack_header.pl1_operators_ptr       stack_header:        43.
          40    stack_header.push_op_ptr       stack_header:        46.
          42    stack_header.return_op_ptr     stack_header:        47.
          44    stack_header.ret_no_pop_op_ptr       stack_header:        48.
          62    stack_header.rnt_ptr     stack_header:        57.
          12    stack_header.run_unit_depth    stack_header:        30.
          54    stack_header.sct_ptr     stack_header:        53.
          30    stack_header.signal_ptr  stack_header:        41.
          22    stack_header.stack_begin_ptr   stack_header:        37.
          24    stack_header.stack_end_ptr     stack_header:        38.
          14    stack_header.system_free_ptr   stack_header:        33.
          60    stack_header.sys_link_info_ptr       stack_header:        56.
          72    stack_header.trace_frames      stack_header:        61.
          50    stack_header.trans_op_tv_ptr   stack_header:        51.
          56    stack_header.unwinder_ptr      stack_header:        54.
          16    stack_header.user_free_ptr     stack_header:        34.
         100    stack_header_end         stack_header:        64.
           0    trace_frames.count       stack_header:        69.
           1    trace_frames.top_ptr     stack_header:        70.
         551    tv_offset                stack_header:        75,   80,   81,   82,   83,   84.
           0    type1                    probe_break_:        31,   33.
           4    type2                    probe_break_:        39,   41.
           5    type3                    probe_break_:        44,   46.
           6    type4                    probe_break_:        49,   51.
           7    type5                    probe_break_:        54,   56.
          10    type6                    probe_break_:        59,   61.
          11    type7                    probe_break_:        64,   66.
          12    type8                    probe_break_:        69,   71.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
