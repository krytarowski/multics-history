	COMPILATION LISTING OF SEGMENT om_put_opening
	Compiled by: Multics PL/I Compiler, Release 33e, of October 6, 1992
	Compiled at: CGI                             
	Compiled on: 2000-05-05_1827.90_Fri_mdt
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 
        7 /* DESCRIPTION:
        8*
        9*         Puts  an  opening in a table of pointers to opening info structures.
       10*     The info structure should have already been allocated by the callerin the
       11*     area pointed to  by  get_dm_free_area_.    The  argument  p_table_ptr
       12*     should point to a table set up previously by opening_manager_$init.
       13**/
       14 
       15 /* HISTORY:
       16*
       17*Written by Matthew Pierret, 07/26/82.
       18*Modified:
       19*08/10/82 by Matthew Pierret:  Changed p_code to fixed bin (35) from (17).
       20*08/11/82 by Matthew Pierret:  Changed to allow "put"-ing an opening that already
       21*            exists.
       22*04/12/83 by Matthew Pierret:  Changed to use OPENING_TABLE_VERSION_2.  This
       23*            version is 0-originned becaused hash_index_ can return a value of
       24*            0.  Also changed to use get_dm_free_area_ to get the pointer to an
       25*            area.
       26*09/01/83 by Lindsey L. Spratt:  Changed to call om_get_opening$hash_index
       27*            instead of hash_index_.
       28*11/07/84 by Stanford S. Cox:  MAIN: Chg to thread bead at top, chg to not modify
       29*            bead if it exists, moved ALLOCATE_HASH_BEAD inline.
       30**/
       31 
       32 /* format: style2,ind3 */
       33 om_put_opening:
       34    proc (p_table_ptr, p_id, p_info_ptr, p_code);
       35 
       36 /* START OF DECLARATIONS */
       37 /* Parameter */
       38 
       39       dcl	    p_table_ptr	       ptr parameter;
       40       dcl	    p_id		       bit (72) aligned parameter;
       41       dcl	    p_info_ptr	       ptr parameter;
       42       dcl	    p_code	       fixed bin (35) parameter;
       43 
       44 /* Automatic */
       45 
       46       dcl	    hash_index	       fixed bin (35);
       47       dcl	    opening_info_ptr       ptr;
       48       dcl	    opening_id	       bit (72) aligned;
       49       dcl	    previous_hash_bead_ptr ptr;
       50 
       51 /* Based */
       52 
       53       dcl	    dm_area	       area (sys_info$max_seg_size) based (dm_area_ptr);
       54 
       55 /* Static */
       56 
       57       dcl	    dm_area_ptr	       ptr int static;
       58 
       59 /* Builtin */
       60 
       61       dcl	    (null)	       builtin;
       62 
       63 /* Constant */
       64 
       65       dcl	    myname	       char (32) varying init ("om_put_opening") int static options (constant);
       66 
       67 /* Entry */
       68 
       69       dcl	    om_get_opening$hash_index
       70 			       entry (bit (72) aligned, fixed bin (35)) returns (fixed bin);
       71       dcl	    get_dm_free_area_      entry () returns (ptr);
       72       dcl	    sub_err_	       entry () options (variable);
       73 
       74 /* External */
       75 
       76       dcl	    sys_info$max_seg_size  ext fixed bin (35);
       77       dcl	    error_table_$unimplemented_version
       78 			       ext fixed bin (35);
       79 
       80 /* END OF DECLARATIONS */
       81 
       82       p_code = 0;
       83       opening_id = p_id;
       84       opening_info_ptr = p_info_ptr;
       85       opening_table_ptr = p_table_ptr;
       86       if dm_area_ptr = null ()
       87       then dm_area_ptr = get_dm_free_area_ ();
       88       call CHECK_VERSION ("opening_table", opening_table.version, OPENING_TABLE_VERSION_2);
       89 
       90       hash_index = om_get_opening$hash_index (opening_id, opening_table.upper_bound);
       91 
       92       hash_bead_ptr = opening_table.hash_entry_ptr (hash_index);
       93       previous_hash_bead_ptr = hash_bead_ptr;
       94 
       95       alloc hash_bead in (dm_area);
       96 
       97       hash_bead.key = opening_id;
       98       hash_bead.info_ptr = opening_info_ptr;
       99       hash_bead.next_ptr = null ();
      100 
      101       hash_bead.next_ptr = previous_hash_bead_ptr;
      102       opening_table.hash_entry_ptr (hash_index) = hash_bead_ptr;
      103 
      104       return;
      105 
      106 CHECK_VERSION:
      107    proc (cv_p_structure_name, cv_p_given_version, cv_p_correct_version);
      108 
      109       dcl	    cv_p_structure_name    char (*);
      110       dcl	    cv_p_given_version     char (8) aligned;
      111       dcl	    cv_p_correct_version   char (8) aligned;
      112 
      113       if cv_p_given_version ^= cv_p_correct_version
      114       then call sub_err_ (error_table_$unimplemented_version, myname, "s", null, 0,
      115 	      "^/Expected version ""^8a"" of ^a structure; received ""^8a"".", cv_p_correct_version,
      116 	      cv_p_structure_name, cv_p_given_version);
      117 
      118       return;
      119 
      120    end CHECK_VERSION;
      121 
  1     1 /* BEGIN INCLUDE FILE dm_om_table.incl.pl1 */
  1     2 
  1     3 
  1     4 /* 
  1     5*Modified:
  1     6*08/11/82 by Matthew Pierret:  Changed hash_entry_ptr array to be 0-originned.
  1     7*04/12/83 by Matthew Pierret:  Changed to version 2, which should have been done
  1     8*            on 08/11/82.
  1     9*10/29/84 by Stanford S. Cox:  Changed to not init version.
  1    10*12/04/84 by Stanford S. Cox:  Added HASH_UPPER_BOUND.
  1    11**/
  1    12 /* format: style2,ind3 */
  1    13 
  1    14      dcl	   1 opening_table	      aligned based (opening_table_ptr),
  1    15 	     2 version	      char (8),
  1    16 	     2 upper_bound	      fixed bin (35),
  1    17 	     2 hash_entry_ptr     (0:ot_upper_bound refer (opening_table.upper_bound)) ptr;
  1    18 
  1    19      dcl	   opening_table_ptr      ptr;
  1    20      dcl	   OPENING_TABLE_VERSION_2
  1    21 			      init ("opentbl2") char (8) aligned int static options (constant);
  1    22      dcl	   ot_upper_bound	      fixed bin (35);
  1    23      dcl HASH_UPPER_BOUND fixed bin (17) int static options (constant) init (10000);
  1    24 
  1    25 /* END INCLUDE FILE dm_om_table.incl.pl1 */
      122 
      123 
  2     1 /* BEGIN INCLUDE FILE dm_om_hash_bead.incl.pl1 */
  2     2 
  2     3 
  2     4 /* format: style2,ind3 */
  2     5      dcl	   1 hash_bead	      aligned based (hash_bead_ptr),
  2     6 	     2 key	      bit (72) aligned,
  2     7 	     2 info_ptr	      ptr,
  2     8 	     2 next_ptr	      ptr;
  2     9 
  2    10      dcl	   hash_bead_ptr	      ptr;
  2    11 
  2    12 
  2    13 /* END INCLUDE FILE dm_om_hash_bead.incl.pl1 */
      124 
      125 
  3     1 /* BEGIN INCLUDE FILE sub_err_flags.incl.pl1 BIM 11/81 */
  3     2 /* format: style3 */
  3     3 
  3     4 /* These constants are to be used for the flags argument of sub_err_ */
  3     5 /* They are just "string (condition_info_header.action_flags)" */
  3     6 
  3     7 declare	(
  3     8 	ACTION_CAN_RESTART	init (""b),
  3     9 	ACTION_CANT_RESTART init ("1"b),
  3    10 	ACTION_DEFAULT_RESTART
  3    11 			init ("01"b),
  3    12 	ACTION_QUIET_RESTART
  3    13 			init ("001"b),
  3    14 	ACTION_SUPPORT_SIGNAL
  3    15 			init ("0001"b)
  3    16 	)		bit (36) aligned internal static options (constant);
  3    17 
  3    18 /* End include file */
      126 
      127 
      128    end om_put_opening;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    05/05/00  1827.9  om_put_opening.pl1                >udd>sm>ds>w>ml>om_put_opening.pl1
122          1    01/07/85  1001.2  dm_om_table.incl.pl1              >ldd>incl>dm_om_table.incl.pl1
124          2    01/07/85  0959.3  dm_om_hash_bead.incl.pl1          >ldd>incl>dm_om_hash_bead.incl.pl1
126          3    04/16/82  1058.1  sub_err_flags.incl.pl1            >ldd>incl>sub_err_flags.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
OPENING_TABLE_VERSION_2         000000 constant        char(8)                  initial dcl 1-20 set ref 88*
cv_p_correct_version                   parameter       char(8)                  dcl 111 set ref 106 113 113*
cv_p_given_version                     parameter       char(8)                  dcl 110 set ref 106 113 113*
cv_p_structure_name                    parameter       char                     packed unaligned dcl 109 set ref 106 113*
dm_area                                based           area                     dcl 53 ref 95
dm_area_ptr                     000010 internal static pointer                  dcl 57 set ref 86 86* 95
error_table_$unimplemented_version
                                000020 external static fixed bin(35,0)          dcl 77 set ref 113*
get_dm_free_area_               000014 constant        entry                    external dcl 71 ref 86
hash_bead                              based           structure                level 1 dcl 2-5 set ref 95
hash_bead_ptr                   000112 automatic       pointer                  dcl 2-10 set ref 92* 93 95* 97 98 99 101 102
hash_entry_ptr            4            based           pointer                  array level 2 dcl 1-14 set ref 92 102*
hash_index                      000100 automatic       fixed bin(35,0)          dcl 46 set ref 90* 92 102
info_ptr                  2            based           pointer                  level 2 dcl 2-5 set ref 98*
key                                    based           bit(72)                  level 2 dcl 2-5 set ref 97*
myname                          000002 constant        varying char(32)         initial dcl 65 set ref 113*
next_ptr                  4            based           pointer                  level 2 dcl 2-5 set ref 99* 101*
null                                                   builtin function         dcl 61 ref 86 99 113 113
om_get_opening$hash_index       000012 constant        entry                    external dcl 69 ref 90
opening_id                      000104 automatic       bit(72)                  dcl 48 set ref 83* 90* 97
opening_info_ptr                000102 automatic       pointer                  dcl 47 set ref 84* 98
opening_table                          based           structure                level 1 dcl 1-14
opening_table_ptr               000110 automatic       pointer                  dcl 1-19 set ref 85* 88 90 92 102
p_code                                 parameter       fixed bin(35,0)          dcl 42 set ref 33 82*
p_id                                   parameter       bit(72)                  dcl 40 ref 33 83
p_info_ptr                             parameter       pointer                  dcl 41 ref 33 84
p_table_ptr                            parameter       pointer                  dcl 39 ref 33 85
previous_hash_bead_ptr          000106 automatic       pointer                  dcl 49 set ref 93* 101
sub_err_                        000016 constant        entry                    external dcl 72 ref 113
upper_bound               2            based           fixed bin(35,0)          level 2 dcl 1-14 set ref 90*
version                                based           char(8)                  level 2 dcl 1-14 set ref 88*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ACTION_CANT_RESTART                    internal static bit(36)                  initial dcl 3-7
ACTION_CAN_RESTART                     internal static bit(36)                  initial dcl 3-7
ACTION_DEFAULT_RESTART                 internal static bit(36)                  initial dcl 3-7
ACTION_QUIET_RESTART                   internal static bit(36)                  initial dcl 3-7
ACTION_SUPPORT_SIGNAL                  internal static bit(36)                  initial dcl 3-7
HASH_UPPER_BOUND                       internal static fixed bin(17,0)          initial dcl 1-23
ot_upper_bound                         automatic       fixed bin(35,0)          dcl 1-22
sys_info$max_seg_size                  external static fixed bin(35,0)          dcl 76

NAMES DECLARED BY EXPLICIT CONTEXT.
CHECK_VERSION                   000205 constant        entry                    internal dcl 106 ref 88
om_put_opening                  000060 constant        entry                    external dcl 33

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       404         426     311         414
Length       644     311        22         201      72           2

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
om_put_opening                      162 external procedure  is an external procedure.  
CHECK_VERSION                           internal procedure  shares stack frame of external procedure om_put_opening.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 dm_area_ptr                 om_put_opening

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
om_put_opening           000100 hash_index                  om_put_opening
                         000102 opening_info_ptr            om_put_opening
                         000104 opening_id                  om_put_opening
                         000106 previous_hash_bead_ptr      om_put_opening
                         000110 opening_table_ptr           om_put_opening
                         000112 hash_bead_ptr               om_put_opening

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return_mac          ext_entry           op_alloc_

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
get_dm_free_area_             om_get_opening$hash_index     sub_err_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$unimplemented_version




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     33 000053        82 000065        83 000067        84 000073        85 000076        86 000101        88 000113
     90 000136        92 000154        93 000160        95 000161        97 000170        98 000173        99 000175
    101 000177       102 000201       104 000204       106 000205       113 000216       118 000310


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
