	COMPILATION LISTING OF SEGMENT error
	Compiled by: Multics PL/I Compiler, Release 33e, of October 6, 1992
	Compiled at: CGI                             
	Compiled on: 2000-05-05_1826.65_Fri_mdt
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 
       14 /****^  HISTORY COMMENTS:
       15*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
       16*     install(89-07-31,MR12.3-1066):
       17*     Removed the obsolete parameter source_line from the call to error_().
       18*                                                   END HISTORY COMMENTS */
       19 
       20 
       21 /* format: style3,^indattr,ifthendo,ifthen,^indnoniterdo,indproc,^elsestmt,dclind9,idind23 */
       22 error:
       23      proc (err_no, statement_pt, token_pt);
       24 
       25 dcl      err_no fixed bin (15) parameter;
       26 dcl      (statement_pt, token_pt) ptr parameter;
       27 
       28 dcl      n fixed bin;
       29 dcl      p pointer;
       30 
       31 dcl      (null, string) builtin;
       32 
       33 dcl      pl1_stat_$err_stm ptr ext;
       34 
  1     1 /****^  *********************************************************
  1     2*        *                                                       *
  1     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  1     4*        *                                                       *
  1     5*        ********************************************************* */
  1     6 
  1     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  1     8 
  1     9 
  1    10 /****^  HISTORY COMMENTS:
  1    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  1    12*     install(89-07-31,MR12.3-1066):	
  1    13*     Removed the obsolete parameter source_line from the dcl of error_().
  1    14*                                                   END HISTORY COMMENTS */
  1    15 
  1    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  1    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  1    18* */
  1    19 
  1    20 declare	adjust_count	entry(pointer);
  1    21 			/* parameter 1:	(input)	any node pointer		*/
  1    22 
  1    23 declare	bindec		entry(fixed bin(31)) reducible
  1    24 			returns(character(12) aligned);
  1    25 			/* parameter 1:	(input)	bin value			*/
  1    26 			/* return:	(output)	character value with blanks	*/
  1    27 
  1    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  1    29 			returns(character(12) aligned varying);
  1    30 			/* parameter 1:	(input)	binary value		*/
  1    31 			/* return:	(output)	char value without blanks	*/
  1    32 
  1    33 declare	binoct		entry(fixed bin(31)) reducible
  1    34 			returns(char(12) aligned);
  1    35 			/* parameter 1:	(input)	binary value		*/
  1    36 			/* return:	(output)	char value with blanks	*/
  1    37 
  1    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  1    39 			returns(char(12) aligned);
  1    40 			/* parameter 1:	(input)	binary value		*/
  1    41 			/* return:	(output)	right-aligned char value	*/
  1    42 
  1    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  1    44 			returns(char(12) varying aligned);
  1    45 			/* parameter 1:	(input)	binary value		*/
  1    46 			/* returns:	(output)	char value without blanks	*/
  1    47 
  1    48 declare	compare_expression	entry(pointer,pointer) reducible
  1    49 			returns(bit(1) aligned);
  1    50 			/* parameter 1:	(input)	any node pointer		*/
  1    51 			/* parameter 2:	(input)	any node pointer		*/
  1    52 			/* return:	(output)	compare bit		*/
  1    53 
  1    54 declare	constant_length	entry (pointer, fixed bin (71))
  1    55 			returns (bit (1) aligned);
  1    56 			/* parameter 1:	(input)	reference node pointer	*/
  1    57 			/* parameter 2:	(input)	value of constant length	*/
  1    58 			/* return:	(output)	"1"b if constant length	*/
  1    59 
  1    60 declare	convert		entry(pointer,bit(36) aligned)
  1    61 			returns(pointer);
  1    62 			/* parameter 1:	(input)	any node pointer		*/
  1    63 			/* parameter 2:	(input)	target type		*/
  1    64 			/* return:	(output)	target value tree pointer	*/
  1    65 
  1    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  1    67 			returns(pointer);
  1    68 			/* parameter 1:	(input)	any node pointer		*/
  1    69 			/* parameter 2:	(input)	target type		*/
  1    70 			/* return:	(output)	target value tree pointer	*/
  1    71 
  1    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  1    73 			returns(pointer);
  1    74 			/* parameter 1:	(input)	any node pointer		*/
  1    75 			/* parameter 2:	(input)	target type		*/
  1    76 			/* return:	(output)	target value tree pointer	*/
  1    77 
  1    78 declare	convert$validate	entry(pointer,pointer);
  1    79 			/* parameter 1:	(input)	source value tree pointer	*/
  1    80 			/* parameter 2:	(input)	target reference node pointer	*/
  1    81 
  1    82 declare	convert$to_target_fb entry(pointer,pointer)
  1    83 			returns(pointer);
  1    84 			/* parameter 1:	(input)	source value tree pointer	*/
  1    85 			/* parameter 2:	(input)	target reference node pointer	*/
  1    86 			/* return:	(output)	target value tree pointer	*/
  1    87 
  1    88 declare	convert$to_target	entry(pointer,pointer)
  1    89 			returns(pointer);
  1    90 			/* parameter 1:	(input)	source value tree pointer	*/
  1    91 			/* parameter 2:	(input)	target reference node pointer	*/
  1    92 			/* return:	(output)	target value tree pointer	*/
  1    93 
  1    94 declare	copy_expression	entry(pointer unaligned)
  1    95 			returns(pointer);
  1    96 			/* parameter 1:	(input)	any node pointer		*/
  1    97 			/* return:	(output)	any node pointer		*/
  1    98 
  1    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  1   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  1   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  1   102 
  1   103 declare	copy_unique_expression entry(pointer)
  1   104 			returns(pointer);
  1   105 			/* parameter 1:	(input)	any node pointer		*/
  1   106 			/* return:	(output)	any node pointer		*/
  1   107 
  1   108 declare	create_array	entry()
  1   109 			returns(pointer);
  1   110 			/* return:	(output)	array node pointer		*/
  1   111 
  1   112 declare	create_block	entry(bit(9) aligned,pointer)
  1   113 			returns(pointer);
  1   114 			/* parameter 1:	(input)	block type		*/
  1   115 			/* parameter 2:	(input)	father block node pointer	*/
  1   116 			/* return:	(output)	block node pointer		*/
  1   117 
  1   118 declare	create_bound	entry()
  1   119 			returns(pointer);
  1   120 			/* return:	(output)	bound node pointer		*/
  1   121 
  1   122 declare	create_context	entry(pointer,pointer)
  1   123 			returns(pointer);
  1   124 			/* parameter 1:	(input)	block node pointer		*/
  1   125 			/* parameter 2:	(input)	token pointer		*/
  1   126 			/* return:	(output)	context node pointer	*/
  1   127 
  1   128 declare	create_cross_reference entry()
  1   129 			returns(pointer);
  1   130 			/* return:	(output)	cross reference node pointer	*/
  1   131 
  1   132 declare	create_default	entry
  1   133 			returns(pointer);
  1   134 			/* return:	(output)	default node pointer	*/
  1   135 
  1   136 declare	create_identifier	entry()
  1   137 			returns(pointer);
  1   138 			/* return:	(output)	token node pointer		*/
  1   139 
  1   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  1   141 			returns(pointer);
  1   142 			/* parameter 1:	(input)	block node pointer		*/
  1   143 			/* parameter 2:	(input)	token node pointer		*/
  1   144 			/* parameter 3:	(input)	declare type		*/
  1   145 			/* return:	(output)	label node pointer		*/
  1   146 
  1   147 declare	create_list	entry(fixed bin(15))
  1   148 			returns(pointer);
  1   149 			/* parameter 1:	(input)	number of list elements	*/
  1   150 			/* return:	(output)	list node pointer		*/
  1   151 
  1   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  1   153 			returns(pointer);
  1   154 			/* parameter 1:	(input)	operator type		*/
  1   155 			/* parameter 2:	(input)	number of operands		*/
  1   156 			/* return:	(output)	operator node pointer	*/
  1   157 
  1   158 declare	create_reference	entry(pointer)
  1   159 			returns(pointer);
  1   160 			/* parameter 1:	(input)	symbol node pointer		*/
  1   161 			/* return:	(output)	reference node pointer	*/
  1   162 
  1   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  1   164 			returns(pointer);
  1   165 			/* parameter 1:	(input)	statement type		*/
  1   166 			/* parameter 2:	(input)	block node pointer		*/
  1   167 			/* parameter 3:	(input)	label node pointer		*/
  1   168 			/* parameter 4:	(input)	conditions		*/
  1   169 			/* return:	(output)	statement node pointer	*/
  1   170 
  1   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  1   172 			returns(pointer);
  1   173 			/* parameter 1:	(input)	statement type		*/
  1   174 			/* parameter 2:	(input)	block node pointer		*/
  1   175 			/* parameter 3:	(input)	label node pointer		*/
  1   176 			/* parameter 4:	(input)	conditions		*/
  1   177 			/* return:	(output)	statement node pointer	*/
  1   178 
  1   179 declare	create_storage	entry(fixed bin(15))
  1   180 			returns(pointer);
  1   181 			/* parameter 1:	(input)	number of words		*/
  1   182 			/* return:	(output)	storage block pointer	*/
  1   183 
  1   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  1   185 			returns(pointer);
  1   186 			/* parameter 1:	(input)	block node pointer		*/
  1   187 			/* parameter 2:	(input)	token node pointer		*/
  1   188 			/* parameter 3:	(input)	declare type		*/
  1   189 			/* return:	(output)	symbol node pointer		*/
  1   190 
  1   191 declare	create_token	entry (character (*), bit (9) aligned)
  1   192 			returns (ptr);
  1   193 			/* parameter 1:	(input)	token string		*/
  1   194 			/* parameter 2:	(input)	token type		*/
  1   195 			/* return:	(output)	token node ptr		*/
  1   196 
  1   197 declare	create_token$init_hash_table entry ();
  1   198 
  1   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  1   200 			returns (ptr);
  1   201 			/* parameter 1:	(input)	token string		*/
  1   202 			/* parameter 2:	(input)	token type		*/
  1   203 			/* parameter 3:	(input)	protected flag		*/
  1   204 			/* return:	(output)	token node ptr		*/
  1   205 
  1   206 declare	decbin		entry(character(*) aligned) reducible
  1   207 			returns(fixed bin(31));
  1   208 			/* parameter 1:	(input)	decimal character string	*/
  1   209 			/* return:	(output)	binary value		*/
  1   210 
  1   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  1   212 			returns(pointer);
  1   213 			/* parameter 1:	(input)	value			*/
  1   214 			/* parameter 2:	(input)	type			*/
  1   215 			/* parameter 3:	(input)	size			*/
  1   216 			/* parameter 4:	(input)	scale			*/
  1   217 			/* return:	(output)	reference node pointer	*/
  1   218 
  1   219 declare	declare_constant$bit entry(bit(*) aligned)
  1   220 			returns(pointer);
  1   221 			/* parameter 1:	(input)	bit			*/
  1   222 			/* return:	(output)	reference node pointer	*/
  1   223 
  1   224 declare	declare_constant$char entry(character(*) aligned)
  1   225 			returns(pointer);
  1   226 			/* parameter 1:	(input)	character			*/
  1   227 			/* return:	(output)	reference node pointer	*/
  1   228 
  1   229 declare	declare_constant$desc entry(bit(*) aligned)
  1   230 			returns(pointer);
  1   231 			/* parameter 1:	(input)	descriptor bit value	*/
  1   232 			/* return:	(output)	reference node pointer	*/
  1   233 
  1   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  1   235 			returns(pointer);
  1   236 			/* parameter 1:	(input)	integer			*/
  1   237 			/* return:	(output)	reference node pointer	*/
  1   238 
  1   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  1   240 			returns(pointer);
  1   241 			/* parameter 1:	(input)	block node pointer		*/
  1   242 			/* parameter 2:	(input)	statement node pointer	*/
  1   243 			/* parameter 3:	(input)	symbol node pointer		*/
  1   244 			/* parameter 4:	(input)	loc pointer		*/
  1   245 			/* parameter 5:	(input)	array descriptor bit
  1   246*						cross_section bit	*/
  1   247 			/* return:	(output)	reference node pointer	*/
  1   248 
  1   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  1   250 			returns(pointer);
  1   251 			/* parameter 1:	(input)	block node pointer	*/
  1   252 			/* parameter 2:	(input)	statement node pointer 	*/
  1   253 			/* parameter 3:	(input)	symbol node pointer	*/
  1   254 			/* parameter 4:	(input)	loc pointer	*/
  1   255 			/* parameter 5:	(input)	array descriptor bit
  1   256*						cross_section bit	*/
  1   257 			/* return:	(output)	reference node pointer	*/
  1   258 
  1   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  1   260 			returns(pointer);
  1   261 			/* parameter 1:	(input)	block node pointer		*/
  1   262 			/* parameter 2:	(input)	statement node pointer	*/
  1   263 			/* parameter 3:	(input)	symbol node pointer		*/
  1   264 			/* parameter 4:	(input)	loc pointer		*/
  1   265 			/* parameter 5:	(input)	array descriptor bit
  1   266*						cross_section bit	*/
  1   267 			/* return:	(output)	reference node pointer	*/
  1   268 
  1   269 declare	declare_integer	entry(pointer)
  1   270 			returns(pointer);
  1   271 			/* parameter 1:	(input)	block node pointer		*/
  1   272 			/* return:	(output)	reference node pointer 	*/
  1   273 
  1   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  1   275 			/* parameter 1:	(input)	picture string		*/
  1   276 			/* parameter 2:	(input)	symbol node pointer		*/
  1   277 			/* parameter 3:	(output)	error code, if any		*/
  1   278 
  1   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  1   280 			returns(pointer);
  1   281 			/* parameter 1:	(input)	picture string		*/
  1   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  1   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  1   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  1   285 			/* return:	(output)	reference node pointer	*/
  1   286 
  1   287 declare	declare_pointer	entry(pointer)
  1   288 			returns(pointer);
  1   289 			/* parameter 1:	(input)	block node pointer		*/
  1   290 			/* return:	(output)	reference node pointer	*/
  1   291 
  1   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  1   293 			returns(pointer);
  1   294 			/* parameter 1:	(input)	type			*/
  1   295 			/* parameter 2:	(input)	precision			*/
  1   296 			/* parameter 3:	(input)	scale			*/
  1   297 			/* parameter 4:	(input)	length			*/
  1   298 			/* return:	(output)	reference node pointer	*/
  1   299 
  1   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  1   301 			returns(char(120) varying);
  1   302 			/* parameter 1:	(input)	node pointer		*/
  1   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  1   304 			/* return:	(output)	source line id		*/
  1   305 
  1   306 declare	decode_source_id	entry(
  2     1 			1 structure unaligned,
  2     2 			  2 /* file_number */	bit(8),
  2     3 			  2 /* line_number */	bit(14),
  2     4 			  2 /* stmt_number */	bit(5),
  1   307 
  1   308 			bit(1) aligned)
  1   309 			returns(char(120) varying);
  1   310 			/* parameter 1:	(input)	source id			*/
  1   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  1   312 			/* return:	(output)	source line id		*/
  1   313 
  1   314 declare	error		entry(fixed bin(15),pointer,pointer);
  1   315 			/* parameter 1:	(input)	error number		*/
  1   316 			/* parameter 2:	(input)	statement node pointer or null*/
  1   317 			/* parameter 3:	(input)	token node pointer 		*/
  1   318 
  1   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  1   320 			/* parameter 1:	(input)	error number		*/
  1   321 			/* parameter 2:	(input)	statement node pointer or null*/
  1   322 			/* parameter 3:	(input)	token node pointer 		*/
  1   323 
  1   324 declare	error_		entry(fixed bin(15),
  3     1 			1 structure unaligned,
  3     2 			  2 /* file_number */	bit(8),
  3     3 			  2 /* line_number */	bit(14),
  3     4 			  2 /* stmt_number */	bit(5),
  1   325 
  1   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  1   327 			/* parameter 1:	(input)	error number		*/
  1   328 			/* parameter 2:	(input)	statement id		*/
  1   329 			/* parameter 3:	(input)	any node pointer		*/
  1   330 			/* parameter 4:	(input)	source segment		*/
  1   331 			/* parameter 5:	(input)	source starting character	*/
  1   332 			/* parameter 6:	(input)	source length		*/
  1   333 
  1   334 declare	error_$no_text	entry(fixed bin(15),
  4     1 			1 structure unaligned,
  4     2 			  2 /* file_number */	bit(8),
  4     3 			  2 /* line_number */	bit(14),
  4     4 			  2 /* stmt_number */	bit(5),
  1   335 
  1   336 			pointer);
  1   337 			/* parameter 1:	(input)	error number		*/
  1   338 			/* parameter 2:	(input)	statement id		*/
  1   339 			/* parameter 3:	(input)	any node pointer		*/
  1   340 
  1   341 declare	error_$initialize_error entry();
  1   342 
  1   343 declare	error_$finish	entry();
  1   344 
  1   345 declare	free_node		entry(pointer);
  1   346 			/* parameter 1:	any node pointer			*/
  1   347 
  1   348 declare	get_array_size	entry(pointer,fixed bin(3));
  1   349 			/* parameter 1:	(input)	symbol node pointer		*/
  1   350 			/* parameter 2:	(input)	units			*/
  1   351 
  1   352 declare	get_size		entry(pointer);
  1   353 			/* parameter 1:	(input)	symbol node pointer		*/
  1   354 
  1   355 declare	merge_attributes	external entry(pointer,pointer)
  1   356 			returns(bit(1) aligned);
  1   357 			/* parameter 1:	(input)	target symbol node pointer */
  1   358 			/* parameter 2:	(input)	source symbol node pointer */
  1   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  1   360 
  1   361 declare	optimizer		entry(pointer);
  1   362 			/* parameter 1:	(input)	root pointer		*/
  1   363 
  1   364 declare	parse_error	entry(fixed bin(15),pointer);
  1   365 			/* parameter 1:	(input)	error number		*/
  1   366 			/* parameter 2:	(input)	any node pointer		*/
  1   367 
  1   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  1   369 			/* parameter 1:	(input)	error number		*/
  1   370 			/* parameter 2:	(input)	any node pointer		*/
  1   371 
  1   372 declare	pl1_error_print$write_out
  1   373 			entry(fixed bin(15),
  5     1 			1 structure unaligned,
  5     2 			  2 /* file_number */	bit(8),
  5     3 			  2 /* line_number */	bit(14),
  5     4 			  2 /* stmt_number */	bit(5),
  1   374 
  1   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  1   376 			/* parameter 1:	(input)	error number		*/
  1   377 			/* parameter 2:	(input)	statement identification	*/
  1   378 			/* parameter 3:	(input)	any node pointer		*/
  1   379 			/* parameter 4:	(input)	source segment		*/
  1   380 			/* parameter 5:	(input)	source character index	*/
  1   381 			/* parameter 6:	(input)	source length		*/
  1   382 			/* parameter 7:	(input)	source line		*/
  1   383 
  1   384 declare	pl1_error_print$listing_segment
  1   385 			entry(fixed bin(15),
  6     1 			1 structure unaligned,
  6     2 			  2 /* file_number */	bit(8),
  6     3 			  2 /* line_number */	bit(14),
  6     4 			  2 /* stmt_number */	bit(5),
  1   386 
  1   387 			pointer);
  1   388 			/* parameter 1:	(input)	error number		*/
  1   389 			/* parameter 2:	(input)	statement identification	*/
  1   390 			/* parameter 3:	(input)	token node pointer		*/
  1   391 
  1   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  1   393 			/* parameter 1:	(input)	string			*/
  1   394 
  1   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  1   396 			/* parameter 1:	(input)	string			*/
  1   397 
  1   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  1   399 			/* parameter 1:	(input)	string			*/
  1   400 			/* parameter 2:	(input)	string length or 0		*/
  1   401 
  1   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  1   403 			/* parameter 1:	(input)	string			*/
  1   404 			/* parameter 2:	(input)	string length or 0		*/
  1   405 
  1   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  1   407 			/* parameter 1:	(input)	string pointer		*/
  1   408 			/* parameter 2:	(input)	string size		*/
  1   409 
  1   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  1   411 			/* parameter 1:	(input)	string pointer		*/
  1   412 			/* parameter 2:	(input)	string length or 0		*/
  1   413 
  1   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  1   415 			/* parameter 1:	(input)	string			*/
  1   416 			/* parameter 2:	(input)	length			*/
  1   417 
  1   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  1   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  1   420 			/* parameter 2:	(input)	line number		*/
  1   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  1   422 			/* parameter 4:	(input)	number of chars to copy	*/
  1   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  1   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  1   425 
  1   426 declare	refer_extent	entry(pointer,pointer);
  1   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  1   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  1   429 
  1   430 declare	reserve$clear	entry()
  1   431 			returns(pointer);
  1   432 			/* return:	(output)	pointer			*/
  1   433 
  1   434 declare	reserve$declare_lib	entry(fixed bin(15))
  1   435 			returns(pointer);
  1   436 			/* parameter 1:	(input)	builtin function number	*/
  1   437 			/* return:	(output)	pointer			*/
  1   438 
  1   439 declare	reserve$read_lib	entry(fixed bin(15))
  1   440 			returns(pointer);
  1   441 			/* parameter 1:	(input)	builtin function number	*/
  1   442 			/* return:	(output)	pointer			*/
  1   443 
  1   444 declare	semantic_translator	entry();
  1   445 
  1   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  1   447 			/* parameter 1:	(input)	error number		*/
  1   448 			/* parameter 2:	(input)	any node pointer		*/
  1   449 
  1   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  1   451 			/* parameter 1:	(input)	error number		*/
  1   452 			/* parameter 2:	(input)	any node pointer		*/
  1   453 
  1   454 declare	share_expression	entry(ptr)
  1   455 			returns(ptr);
  1   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  1   457 			/* return:	(output)	tree pointer or null	*/
  1   458 
  1   459 declare	token_to_binary	entry(ptr) reducible
  1   460 			returns(fixed bin(31));
  1   461 			/* parameter 1:	(input)	token node pointer		*/
  1   462 			/* return:	(output)	converted binary value	*/
  1   463 
  1   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
       35 
       36 
  7     1 dcl	1 source_id		structure unaligned,
  7     2 	  2  file_number 		bit(8),
  7     3 	  2  line_number 		bit(14),
  7     4 	  2  statement_number	bit(5);
       37 
       38 
  8     1 /* ***********************************************************
  8     2*   *                                                         *
  8     3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
  8     4*   *                                                         *
  8     5*   *********************************************************** */
  8     6 /* BEGIN INCLUDE FILE ... statement.incl.pl1 */
  8     7 /* Internal interface of the PL/I compiler */
  8     8 
  8     9 dcl	1 statement		based aligned,
  8    10 	2 node_type		bit(9) unaligned,
  8    11 	2 source_id		structure unaligned,
  8    12 	  3 file_number		bit(8),
  8    13 	  3 line_number		bit(14),
  8    14 	  3 statement_number	bit(5),
  8    15 	2 next			ptr unaligned,
  8    16 	2 back			ptr unaligned,
  8    17 	2 root			ptr unaligned,
  8    18 	2 labels			ptr unaligned,
  8    19 	2 reference_list		ptr unaligned,
  8    20 	2 state_list		ptr unaligned,
  8    21 	2 reference_count		fixed(17) unaligned,
  8    22 	2 ref_count_copy		fixed(17) unaligned,
  8    23 	2 object			structure unaligned,
  8    24 	  3 start			fixed(17),
  8    25 	  3 finish		fixed(17),
  8    26 	2 source			structure unaligned,
  8    27 	  3 segment		fixed(11),
  8    28 	  3 start			fixed(23),
  8    29 	  3 length		fixed(11),
  8    30 	2 prefix			bit(12) unaligned,
  8    31 	2 optimized		bit(1) unaligned,
  8    32 	2 free_temps		bit(1) unaligned,
  8    33 	2 LHS_in_RHS		bit(1) unaligned,
  8    34 	2 statement_type		bit(9) unaligned,
  8    35 	2 bits			structure unaligned,
  8    36 	  3 processed		bit(1) unaligned,
  8    37 	  3 put_in_profile		bit(1) unaligned,
  8    38 	  3 generated		bit(1) unaligned,
  8    39 	  3 snap			bit(1) unaligned,
  8    40 	  3 system		bit(1) unaligned,
  8    41 	  3 irreducible		bit(1) unaligned,
  8    42 	  3 checked		bit(1) unaligned,
  8    43 	  3 save_temps		bit(1) unaligned,
  8    44 	  3 suppress_warnings	bit(1) unaligned,
  8    45 	  3 force_nonquick		bit(1) unaligned,
  8    46 	  3 expanded_by_name	bit(1) unaligned,
  8    47 	  3 begins_loop		bit(1) unaligned,
  8    48 	  3 pad			bit(24) unaligned;
  8    49 
  8    50 /* END INCLUDE FILE ... statement.incl.pl1 */
       39 
       40 
  9     1 dcl	m fixed bin(15);
  9     2 dcl	pl1_stat_$source_seg fixed bin(8) ext static;
  9     3 dcl	pl1_stat_$last_source fixed bin(15) ext static;
  9     4 dcl	pl1_stat_$source_list_ptr ptr ext static;
  9     5 dcl	source_list(0:source_list_length) ptr based(pl1_stat_$source_list_ptr);
  9     6 dcl	source_list_length fixed bin(15) internal static initial(255) options(constant);
  9     7 
  9     8 dcl	1 source			based(source_list(m)) aligned,
  9     9 	2 node_type		unal bit(9),
  9    10 	2 source_id		unal structure,
  9    11 	  3 file_number		bit(8),
  9    12 	  3 line_number		bit(14),
  9    13 	  3 statement_number	bit(5),
  9    14 	2 standard_object_info	aligned structure,
  9    15 	  3 uid			bit(36),
  9    16 	  3 dtm			fixed bin(71),
  9    17 	2 seg_ptr			unal ptr,
  9    18 	2 name			unal ptr,
  9    19 	2 source_length		unal fixed bin(24),
  9    20 	2 pathlen			unal fixed bin(10),
  9    21 	2 pathname		char(n refer(source.pathlen));
       41 
       42 
       43 /* program */
       44 	pl1_stat_$err_stm, p = statement_pt;
       45 	if p = null then do;
       46 	     string (source_id) = "0"b;
       47 	     call error_$no_text (err_no, source_id, token_pt);
       48 	end;
       49 	else
       50 	     call error_ (err_no, p -> statement.source_id, token_pt, (p -> statement.source.segment),
       51 		(p -> statement.source.start), (p -> statement.source.length));
       52 
       53 	return;
       54 
       55 /*
       56* *
       57* */
       58 error$omit_text:
       59      entry (err_no, statement_pt, token_pt);
       60 
       61 	pl1_stat_$err_stm, p = statement_pt;
       62 	if p = null then do;
       63 	     string (source_id) = "0"b;
       64 	     call error_$no_text (err_no, source_id, token_pt);
       65 	end;
       66 	else
       67 	     call error_$no_text (err_no, p -> statement.source_id, token_pt);
       68 	return;
       69      end error;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    05/05/00  1826.6  error.pl1                         >udd>sm>ds>w>ml>error.pl1
35           1    08/01/89  1339.9  language_utility.incl.pl1         >ldd>incl>language_utility.incl.pl1
1-307        2    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
1-325        3    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
1-335        4    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
1-374        5    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
1-386        6    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
37           7    05/06/74  1845.0  source_id.incl.pl1                >ldd>incl>source_id.incl.pl1
39           8    04/07/83  1735.0  statement.incl.pl1                >ldd>incl>statement.incl.pl1
41           9    05/03/76  1420.4  source_list.incl.pl1              >ldd>incl>source_list.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
err_no                                 parameter       fixed bin(15,0)          dcl 25 set ref 22 47* 49* 58 64* 66*
error_                          000012 constant        entry                    external dcl 1-324 ref 49
error_$no_text                  000014 constant        entry                    external dcl 1-334 ref 47 64 66
length                   12            based           fixed bin(11,0)          level 3 packed packed unaligned dcl 8-9 ref 49
null                                                   builtin function         dcl 31 ref 45 62
p                               000100 automatic       pointer                  dcl 29 set ref 44* 45 49 49 49 49 61* 62 66
pl1_stat_$err_stm               000010 external static pointer                  dcl 33 set ref 44* 61*
segment                  11            based           fixed bin(11,0)          level 3 packed packed unaligned dcl 8-9 ref 49
source                   11            based           structure                level 2 packed packed unaligned dcl 8-9
source_id                       000102 automatic       structure                level 1 packed packed unaligned dcl 7-1 in procedure
                                                                                  "error" set ref 46* 47* 63* 64*
source_id                 0(09)        based           structure                level 2 in structure "statement" packed packed
                                                                                  unaligned dcl 8-9 in procedure "error" set ref 49*
                                                                                  66*
start                    11(12)        based           fixed bin(23,0)          level 3 packed packed unaligned dcl 8-9 ref 49
statement                              based           structure                level 1 dcl 8-9
statement_pt                           parameter       pointer                  dcl 26 ref 22 44 58 61
string                                                 builtin function         dcl 31 set ref 46* 63*
token_pt                               parameter       pointer                  dcl 26 set ref 22 47* 49* 58 64* 66*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
adjust_count                    000000 constant        entry                    external dcl 1-20
binary_to_octal_string          000000 constant        entry                    external dcl 1-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 1-43
bindec                          000000 constant        entry                    external dcl 1-23
bindec$vs                       000000 constant        entry                    external dcl 1-28
binoct                          000000 constant        entry                    external dcl 1-33
compare_expression              000000 constant        entry                    external dcl 1-48
constant_length                 000000 constant        entry                    external dcl 1-54
convert                         000000 constant        entry                    external dcl 1-60
convert$from_builtin            000000 constant        entry                    external dcl 1-72
convert$to_integer              000000 constant        entry                    external dcl 1-66
convert$to_target               000000 constant        entry                    external dcl 1-88
convert$to_target_fb            000000 constant        entry                    external dcl 1-82
convert$validate                000000 constant        entry                    external dcl 1-78
copy_expression                 000000 constant        entry                    external dcl 1-94
copy_expression$copy_sons       000000 constant        entry                    external dcl 1-99
copy_unique_expression          000000 constant        entry                    external dcl 1-103
create_array                    000000 constant        entry                    external dcl 1-108
create_block                    000000 constant        entry                    external dcl 1-112
create_bound                    000000 constant        entry                    external dcl 1-118
create_context                  000000 constant        entry                    external dcl 1-122
create_cross_reference          000000 constant        entry                    external dcl 1-128
create_default                  000000 constant        entry                    external dcl 1-132
create_identifier               000000 constant        entry                    external dcl 1-136
create_label                    000000 constant        entry                    external dcl 1-140
create_list                     000000 constant        entry                    external dcl 1-147
create_operator                 000000 constant        entry                    external dcl 1-152
create_reference                000000 constant        entry                    external dcl 1-158
create_statement                000000 constant        entry                    external dcl 1-163
create_statement$prologue       000000 constant        entry                    external dcl 1-171
create_storage                  000000 constant        entry                    external dcl 1-179
create_symbol                   000000 constant        entry                    external dcl 1-184
create_token                    000000 constant        entry                    external dcl 1-191
create_token$init_hash_table    000000 constant        entry                    external dcl 1-197
create_token$protected          000000 constant        entry                    external dcl 1-199
decbin                          000000 constant        entry                    external dcl 1-206
declare_constant                000000 constant        entry                    external dcl 1-211
declare_constant$bit            000000 constant        entry                    external dcl 1-219
declare_constant$char           000000 constant        entry                    external dcl 1-224
declare_constant$desc           000000 constant        entry                    external dcl 1-229
declare_constant$integer        000000 constant        entry                    external dcl 1-234
declare_descriptor              000000 constant        entry                    external dcl 1-239
declare_descriptor$ctl          000000 constant        entry                    external dcl 1-249
declare_descriptor$param        000000 constant        entry                    external dcl 1-259
declare_integer                 000000 constant        entry                    external dcl 1-269
declare_picture                 000000 constant        entry                    external dcl 1-274
declare_picture_temp            000000 constant        entry                    external dcl 1-279
declare_pointer                 000000 constant        entry                    external dcl 1-287
declare_temporary               000000 constant        entry                    external dcl 1-292
decode_node_id                  000000 constant        entry                    external dcl 1-300
decode_source_id                000000 constant        entry                    external dcl 1-306
error                           000000 constant        entry                    external dcl 1-314
error$omit_text                 000000 constant        entry                    external dcl 1-319
error_$finish                   000000 constant        entry                    external dcl 1-343
error_$initialize_error         000000 constant        entry                    external dcl 1-341
free_node                       000000 constant        entry                    external dcl 1-345
get_array_size                  000000 constant        entry                    external dcl 1-348
get_size                        000000 constant        entry                    external dcl 1-352
m                                      automatic       fixed bin(15,0)          dcl 9-1
merge_attributes                000000 constant        entry                    external dcl 1-355
n                                      automatic       fixed bin(17,0)          dcl 28
optimizer                       000000 constant        entry                    external dcl 1-361
parse_error                     000000 constant        entry                    external dcl 1-364
parse_error$no_text             000000 constant        entry                    external dcl 1-368
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 1-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 1-372
pl1_print$for_lex               000000 constant        entry                    external dcl 1-418
pl1_print$non_varying           000000 constant        entry                    external dcl 1-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 1-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 1-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 1-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 1-414
pl1_print$varying               000000 constant        entry                    external dcl 1-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 1-395
pl1_stat_$last_source                  external static fixed bin(15,0)          dcl 9-3
pl1_stat_$source_list_ptr              external static pointer                  dcl 9-4
pl1_stat_$source_seg                   external static fixed bin(8,0)           dcl 9-2
refer_extent                    000000 constant        entry                    external dcl 1-426
reserve$clear                   000000 constant        entry                    external dcl 1-430
reserve$declare_lib             000000 constant        entry                    external dcl 1-434
reserve$read_lib                000000 constant        entry                    external dcl 1-439
semantic_translator             000000 constant        entry                    external dcl 1-444
semantic_translator$abort       000000 constant        entry                    external dcl 1-446
semantic_translator$error       000000 constant        entry                    external dcl 1-450
share_expression                000000 constant        entry                    external dcl 1-454
source                                 based           structure                level 1 dcl 9-8
source_list                            based           pointer                  array dcl 9-5
source_list_length                     internal static fixed bin(15,0)          initial dcl 9-6
token_to_binary                 000000 constant        entry                    external dcl 1-459

NAMES DECLARED BY EXPLICIT CONTEXT.
error                           000016 constant        entry                    external dcl 22
error$omit_text                 000110 constant        entry                    external dcl 58

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       244         262     161         254
Length       614     161        16         316      62           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
error                                94 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
error                    000100 p                           error
                         000102 source_id                   error

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
error_                        error_$no_text

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pl1_stat_$err_stm




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     22 000012        44 000023        45 000030        46 000034        47 000036        48 000050        49 000051
     53 000105        58 000106        61 000115        62 000123        63 000127        64 000131        65 000143
     66 000144        68 000160


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
