	COMPILATION LISTING OF SEGMENT probe_get_generation_
	Compiled by: Multics PL/I Compiler, Release 31a, of October 12, 1988
	Compiled at: Honeywell Bull, Phoenix AZ, SysM
	Compiled on: 11/11/88  1544.9 mst Fri
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1988                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 
       14 /****^  HISTORY COMMENTS:
       15*  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
       16*     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
       17*     Added format control comment to make the source more readable.
       18*                                                   END HISTORY COMMENTS */
       19 
       20 
       21 /* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */
       22 
       23 /****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
       24 
       25 probe_get_generation_:
       26   proc (P_probe_info_ptr, P_new_source_info_ptr, P_invocation, P_code);
       27 
       28   /* We parse a GENERATION that is, what can go inside square brackets after the name of a variable
       29*   we are in the business of returning a block pointer and a stack frame pointer for the
       30*   use of somebody trying to get the value of a variable
       31*
       32*   a GENERATION:
       33*
       34*   level N
       35*   -N
       36*   LINE
       37*   PROCEDURE
       38*
       39*   In the case of a relative invocation (-N) we can't set the actual block or source pointers, because
       40*   they aren't known until the symbol is resolved 8starting in the current block).  So we set P_invocation,
       41*   and our caller looks back the specified number of invocations.
       42*   James R. Davis 1 July 79
       43*   last modified: 17 Oct 79 JRD
       44**/
       45 
       46   dcl (
       47       P_probe_info_ptr	pointer,
       48       P_new_source_info_ptr	ptr parameter,
       49 				/* to source_info_ptr struc for us to fill out */
       50       P_invocation		fixed bin,/* relative generation interpreted by caller */
       51       P_code		fixed bin (35)
       52       )			parameter;
       53 
       54   dcl 1 new_source		aligned like source_info
       55 			based (new_source_info_ptr);
       56   dcl new_source_info_ptr	ptr;
       57 
       58   dcl level		fixed bin (35);
       59 				/* used with level _i */
       60   dcl inv_level		fixed bin;/* for relative invocation */
       61   dcl code		fixed bin (35);
       62   dcl saved_ct		ptr;
       63 
       64   dcl probe_get_$integer	entry (ptr, fixed bin (35), fixed bin (35));
       65   dcl probe_get_$line	entry (ptr, ptr, fixed bin, bit (36) aligned,
       66 			fixed bin, fixed bin (35));
       67   dcl probe_get_$object	entry (ptr, ptr, fixed bin (35));
       68   dcl probe_stack_trace_$get_level
       69 			entry (ptr, ptr, fixed bin, fixed bin);
       70   dcl probe_error_$record	entry options (variable);
       71 
       72   dcl probe_et_$recorded_message
       73 			fixed bin (35) external static;
       74 				/*  */
       75   new_source_info_ptr = P_new_source_info_ptr;
       76   probe_info_ptr = P_probe_info_ptr;
       77   P_invocation = 0;
       78   code = 0;
       79   saved_ct = probe_info.ct;
       80 
       81   if ct -> token.type = NAME_TYPE
       82        & ct -> token.next -> token.type = CONSTANT_TYPE
       83     then do;			/* level specified */
       84       if current_identifier_name ^= "level"
       85         then goto SYNTAX_ERROR;
       86       ct = ct -> token.next;
       87       call probe_get_$integer (probe_info_ptr, level, code);
       88       if code ^= 0 then do;
       89 	call probe_error_$record (probe_info_ptr, 0,
       90 	     "An integer must follow level in a generation.");
       91 	goto RECORDED_MESSAGE;
       92         end;
       93       if probe_info.execute
       94         then
       95 	   call probe_stack_trace_$get_level (probe_info_ptr,
       96 	        new_source_info_ptr, (level), 0);
       97     end;				/* level */
       98 
       99   /* may be a relative invocation: -_i */
      100 
      101   else if ct -> token.type = MINUS then do;
      102       ct = ct -> token.next;
      103       if ct -> token.type ^= CONSTANT_TYPE
      104         then goto SYNTAX_ERROR;	/* must be a constant here */
      105       call probe_get_$integer (probe_info_ptr, level, code);
      106       if code ^= 0
      107         then goto SYNTAX_ERROR;
      108       new_source = current_source;
      109       P_invocation = level;
      110     end;
      111   else do;
      112     call probe_get_$line (probe_info_ptr, new_source_info_ptr, inv_level,
      113          "1110"b, (0), code);
      114     if code = 0
      115       then P_invocation = inv_level;
      116       else do;			/* OBJECT */
      117         call probe_get_$object (probe_info_ptr, new_source_info_ptr, code);
      118         if code ^= 0
      119 	then goto SYNTAX_ERROR;
      120       end;			/* object */
      121   end;				/* line or path */
      122 
      123 
      124 MAIN_RETURN:
      125   P_code = code;
      126   return;
      127 
      128 
      129 SYNTAX_ERROR:
      130   call probe_error_$record (probe_info_ptr, 0, "Syntax error in generation");
      131   goto RECORDED_MESSAGE;
      132 
      133 RECORDED_MESSAGE:
      134   code = probe_et_$recorded_message;
      135   probe_info.ct = saved_ct;
      136   goto MAIN_RETURN;
      137 
      138 
      139   /*	INCLUDE FILES	*/
      140 
  1     1 /*	BEGIN INCLUDE FILE probe_info.incl.pl1		*/
  1     2 
  1     3 
  1     4 
  1     5 /****^  HISTORY COMMENTS:
  1     6*  1) change(88-10-24,WAAnderson), approve(88-10-24,MCR7952),
  1     7*     audit(88-10-24,RWaters), install(88-10-27,MR12.2-1194):
  1     8*     Added field 'retry_using_main' to add new C feature.
  1     9*                                                   END HISTORY COMMENTS */
  1    10 
  1    11 
  1    12 /* Created: 04/22/79 W. Olin Sibert, from subsystem_info	
  1    13*   Modified: 22 Sept 79 JRd to remove: 	default (ptr & (auto|based)) init (null ());
  1    14*   Added flags.setting_break 08/22/83 Steve Herbst
  1    15*   Added flags.executing_quit_request 01/15/85 Steve Herbst
  1    16**/
  1    17 
  1    18 dcl 1 probe_info aligned based (probe_info_ptr),		/* standard data for a probe invocation */
  1    19     2 probe_info_version fixed bin,			/* version of this structure */
  1    20 
  1    21     2 static_info_ptr pointer unaligned,		/* pointer to static information structure */
  1    22     2 modes_ptr pointer unaligned,			/* pointer to probe_modes structure */
  1    23 
  1    24     2 ptr_to_current_source ptr,			/* current_source is based on this */
  1    25     2 ptr_to_initial_source ptr,			/* initial_source is based on this */
  1    26     2 machine_cond_ptr pointer,			/* pointer to machine conditions, if we faulted to get here */
  1    27 
  1    28     2 token_info aligned,				/* information about token chain currently being processed */
  1    29       3 first_token pointer unaligned,			/* first token in chain */
  1    30       3 ct pointer unaligned, 			/* pointer to current token; updated in MANY places */
  1    31       3 end_token bit (18) aligned,			/* token type at which to stop scanning token chain */
  1    32       3 buffer_ptr pointer unaligned,			/* pointer to input buffer */
  1    33       3 buffer_lth fixed bin (21),			/* and length */
  1    34 
  1    35     2 random_info aligned,
  1    36       3 current_stack_frame pointer unaligned,		/* stack frame pointer for frame in which probe was invoked */
  1    37       3 input_type fixed bin, 			/* current input type */
  1    38       3 language_type fixed bin,			/* current language being processed */
  1    39       3 return_method fixed bin,			/* how we should return after exiting probe */
  1    40       3 entry_method fixed bin,			/* how we got here in the first place */
  1    41       3 pad1 (19) bit (36) aligned,
  1    42 
  1    43     2 break_info,					/* break info -- only interesting if we got here via a break */
  1    44       3 break_slot_ptr pointer,			/* pointer to break slot -- non-null IFF at a break */
  1    45       3 last_break_slot_ptr pointer unaligned,		/* pointer to previous break slot, not presently used */
  1    46       3 break_reset bit (1) aligned,			/* this break has been reset by somebody further on */
  1    47       3 real_break_return_loc pointer,			/* where to REALLY return to, modulo previous bit */
  1    48 
  1    49     2 probe_area_info,				/* information about various probe areas */
  1    50       3 break_segment_ptr pointer unaligned,		/* pointer to Personid.probe */
  1    51       3 break_area_ptr pointer unaligned,		/* pointer to area in break segment */
  1    52       3 scratch_area_ptr pointer unaligned,		/* pointer to probe scratch seg in process dir */
  1    53       3 probe_area_ptr pointer unaligned,		/* This area lasts as long as an invocation of probe. */
  1    54       3 work_area_ptr pointer unaligned,		/* This area lasts as long as the current request line */
  1    55       3 expression_area_ptr pointer unaligned,		/* This area lasts as long as the current command */
  1    56 
  1    57     2 flags aligned,				/* this, in particular, should be saved and restored correctly */
  1    58      (3 execute,					/* "1"b => execute requests, "0"b => just check syntax */
  1    59       3 in_listener,				/* ON => in probe listener loop */
  1    60       3 executing_request,				/* ON => executing a request */
  1    61       3 in_interpret_line,				/* executing in probe_listen_$interpret_line */
  1    62       3 setting_break,				/* executing "after" or "before": check syntax of "if" */
  1    63       3 executing_quit_request,			/* to prevent error looping during "quit" request */
  1    64       3 pad (30)) bit (1) unaligned,
  1    65 
  1    66     2 io_switches,					/* switches probe will do normal I/O on */
  1    67       3 input_switch pointer,
  1    68       3 output_switch pointer,
  1    69 
  1    70     2 error_info,					/* information about the last error saved for later printing */
  1    71       3 error_code fixed bin (35),
  1    72       3 error_message char (300) varying,
  1    73 
  1    74     2 listener_info,				/* internal use by probe listener */
  1    75       3 request_name character (32) varying,		/* primary name of the request being processed */
  1    76       3 abort_probe_label label variable,
  1    77       3 abort_line_label label variable,
  1    78       3 depth fixed binary,				/* count of active invocations of probe */
  1    79       3 previous pointer unaligned,			/* -> previous invocation's info */
  1    80       3 next pointer unaligned,
  1    81 
  1    82     2 end_of_probe_info pointer aligned,
  1    83     2 retry_using_main fixed bin aligned;
  1    84    
  1    85 
  1    86 dcl  probe_info_ptr pointer;
  1    87 
  1    88 dcl  probe_info_version fixed bin static options (constant) initial (1);
  1    89 
  1    90 dcl  probe_info_version_1 fixed bin static options (constant) initial (1);
  1    91 
  1    92 dcl  scratch_area area based (probe_info.scratch_area_ptr);
  1    93 dcl  probe_area area based (probe_info.probe_area_ptr);
  1    94 dcl  work_area area based (probe_info.work_area_ptr);
  1    95 dcl  expression_area area based (probe_info.expression_area_ptr);
  1    96 
  1    97 /*	END INCLUDE FILE probe_info.incl.pl1		*/
      141 
      142 
      143   /* ;;;;;;; */
      144 
  2     1 /*	BEGIN INCLUDE FILE probe_tokens.incl.pl1	*/
  2     2 /*	Split up into probe_tokens and probe_references, 04/22/79 WOS */
  2     3 
  2     4 dcl 1 token_header aligned based,			/* header information common to all tokens */
  2     5     2 next pointer unaligned,				/* pointer to next token in chain */
  2     6     2 prev pointer unaligned,				/* same for previous token */
  2     7     2 type bit (18) aligned,
  2     8     2 buffer_ptr pointer unaligned,			/* pointer to beginning of input buffer */
  2     9     2 location fixed bin (17) unal,			/* offset in input buffer */
  2    10     2 length fixed bin (17) unal,
  2    11     2 flags aligned,
  2    12      (3 leading_whitespace,				/* there is whitespace before thios token */
  2    13       3 trailing_whitespace) bit (1) unaligned,		/* and same for after */
  2    14       3 pad1 bit (34) unaligned;
  2    15 
  2    16 dcl 1 token aligned based,				/* produced by scan_probe_input_ */
  2    17     2 header aligned like token_header;			/* that's all there is */
  2    18 
  2    19 dcl 1 identifier aligned based,			/* keyword or identifier token */
  2    20     2 header aligned like token_header,
  2    21     2 length fixed bin,				/* length of name */
  2    22     2 name pointer unaligned;				/* to string in buffer containing name */
  2    23 
  2    24 dcl 1 operator aligned based,				/* for punctuation */
  2    25     2 header aligned like token_header;			/* nothing but a header here */
  2    26 
  2    27 dcl 1 constant aligned based,				/* for strings pointers numbers etc */
  2    28     2 header aligned like token_header,
  2    29     2 encoded_precision aligned,			/* encoded precision kludge for assign_ */
  2    30       3 scale fixed bin (17) unaligned,			/* arithmetic scale */
  2    31       3 precision fixed bin (17) unaligned,		/* arithmetic precision or other size */
  2    32     2 scale_and_precision fixed bin (35),		/* An identical copy of the two values above */
  2    33     2 data_type fixed bin,				/* standard data type code + packed bit */
  2    34     2 data_ptr pointer unaligned;
  2    35 
  2    36 
  2    37 dcl (OPERATOR_TYPE init ("100"b),			/* types for above */
  2    38      NAME_TYPE init ("010"b),
  2    39      CONSTANT_TYPE init ("001"b)) bit (18) internal static options (constant);
  2    40 
  2    41 
  2    42 dcl  current_identifier_name				/* Overlays for looking at the current tokens */
  2    43      char (probe_info.ct -> identifier.length) based (probe_info.ct -> identifier.name);
  2    44 dcl 1 current_constant aligned like constant based (probe_info.ct);
  2    45 dcl 1 current_token aligned like token based (probe_info.ct);
  2    46 
  2    47 /*	END INCLUDE FILE probe_tokens.incl.pl1		*/
      145 
      146 
      147   /* ;;;;;;; */
      148 
  3     1 /*	BEGIN INCLUDE FILE probe_references.incl.pl1	*/
  3     2 
  3     3 /****^  HISTORY COMMENTS:
  3     4*  1) change(88-09-20,WAAnderson), approve(88-09-20,MCR7952),
  3     5*     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
  3     6*     Added new field (c_symbol) for C-Probe support.
  3     7*  2) change(88-10-28,WAAnderson), approve(88-10-28,MCR7952),
  3     8*     audit(88-10-31,RWaters), install(88-11-11,MR12.2-1210):
  3     9*     Added new field (c_sub_c_ptr) for C-Probe_support.
  3    10*                                                   END HISTORY COMMENTS */
  3    11 
  3    12 /*	Split out of probe_tokens, 04/22/79 WOS 	*/
  3    13 /*       modified for probe variables Feb 19 80 JRD         */
  3    14 /*   Modified June 83 JMAthane to add "type_ptr" and "builtin" fields */
  3    15 
  3    16      dcl	   1 reference_node	      aligned based,	/* information about a reference */
  3    17 	     2 symbol_ptr	      pointer aligned,	/* to symbol table entry for reference */
  3    18 	     2 type_ptr	      pointer aligned,	/* to symbol table entry for type (null if none) */
  3    19 	     2 address_ptr	      pointer aligned,	/* to location of variable */
  3    20 	     2 base_addr	      pointer aligned,	/* pointer on which whole symbol is based */
  3    21 	     2 source_info_ptr    pointer aligned,	/* to symbol structure for reference */
  3    22 
  3    23 	     2 name	      char (256) unaligned varying, /* symbol name */
  3    24 
  3    25 	     2 type	      fixed bin (35),	/* data type */
  3    26 	     2 descriptor	      fixed bin (35),	/* type || packed */
  3    27 	     2 precision	      fixed bin (35),	/* scale and precision */
  3    28 	     2 flags,
  3    29 	       3 packed	      bit (1) unal,		/* data is in packed format */
  3    30 	       3 constant	      bit (1) unal,		/* data is really a constant */
  3    31 	       3 cross_section    bit (1) unal,		/* reference is an array cross-section */
  3    32 	       3 function	      bit (1) unal,		/* reference is function value */
  3    33 	       3 octal	      bit (1) unal,		/* indicates that this is the octal bif */
  3    34 	       3 star_extent      bit (1) unal,		/* reference is a star subscript for father */
  3    35 	       3 have_generation  bit (1) unal,		/* this reference has an explicitly specified generation */
  3    36 	       3 pseudo_var	      bit (1) unal,		/* it is ok to assign to it */
  3    37 	       3 probe_variable   bit (1) unal,
  3    38 	       3 path	      bit (1) unal,		/* it's a pathname/virtual entry */
  3    39 	       3 builtin	      bit (1) unal,		/* probe builtinvalue */
  3    40 	       3 c_ptr_to_char    bit (1)  unal,
  3    41                  3 c_sub_c_ptr      bit (1)  unal,
  3    42 	       3 pad2	      bit (23) unal,
  3    43 
  3    44 	     2 optional_info,			/* information which may or may not be present */
  3    45 	       3 argument_list    pointer unaligned,	/* pointer to reference_arg_list */
  3    46 	       3 subscript_ptr    pointer unaligned,	/* pointer to reference_subscripts */
  3    47 	       3 n_arguments      fixed bin,		/* number of arguments in argument list */
  3    48 	       3 n_subscripts     fixed bin,		/* number of subscripts present */
  3    49 
  3    50 	     2 constant_token_ptr pointer unaligned,	/* pointer to constant token if this is a constant */
  3    51 	     2 subscript_refs_ptr pointer unaligned,	/* pointer to array of subscript reference node pointers */
  3    52 	     2 invocation_level   fixed bin,		/* invocation level number ("[-17]") for this reference */
  3    53 	     2 probe_var_info_ptr ptr unal,		/* only if flags.probe_variable */
  3    54                2 c_symbol_ptr  ptr unal,
  3    55 	     2 pad1	      (9) pointer unaligned,
  3    56 	     2 end_of_reference_node pointer aligned;
  3    57 
  3    58 
  3    59      dcl	   1 reference_arg_list   aligned based,	/* argument list; based on reference.argument_list */
  3    60 	     2 number	      fixed bin,		/* number of arguments actually present */
  3    61 	     2 node	      (16) pointer aligned;	/* reference node pointers for each argument */
  3    62 
  3    63 
  3    64      dcl	   1 reference_subscripts aligned based,	/* subscript array; based on reference.subscript_ptr */
  3    65 	     2 number	      fixed bin,		/* number actually present */
  3    66 	     2 value	      (2, 16) fixed bin (24); /* values for lower and upper bound for each */
  3    67 
  3    68 
  3    69      dcl	   1 subscript_reference_ptrs aligned based,	/* array of pointers to subscript reference nodes */
  3    70 	     2 ptr	      (2, 16) pointer aligned;
  3    71 
  3    72 /*	END INCLUDE FILE probe_references.incl.pl1	*/
      149 
      150 
      151   /* ;;;;;;; */
      152 
  4     1 /* BEGIN INCLUDE FILE ... probe_source_info.incl.pl1
  4     2*
  4     3*  James R. Davis 2 July 79 */
  4     4 
  4     5 dcl 1 source_info based aligned,
  4     6       2 stmnt_map_entry_index fixed bin,		/* index in stmnt map for this stmnt */
  4     7       2 instruction_ptr ptr,				/* to last instruction executed  */
  4     8       2 block_ptr ptr,				/* to runtime_block node */
  4     9       2 stack_ptr ptr,				/* to a stack frame */
  4    10       2 entry_ptr ptr,				/* to entry seq. for this proc */
  4    11       2 seg_info_ptr ptr;				/* to seg_info */
  4    12 
  4    13 dcl 1 current_source aligned like source_info based (probe_info.ptr_to_current_source);
  4    14 dcl 1 initial_source aligned like source_info based (probe_info.ptr_to_initial_source);
  4    15 
  4    16 /* END INCLUDE FILE ... probe_source_info.incl.pl1 */
      153 
      154 
      155   /* ;;;;;;; */
      156 
  5     1 /* BEGIN INCLUDE FILE ... probe_operators.incl.pl1 */
  5     2 
  5     3 
  5     4 
  5     5 /****^  HISTORY COMMENTS:
  5     6*  1) change(88-09-20,WAAnderson), approve(88-09-20,MCR7952),
  5     7*     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
  5     8*     Added new C operators.
  5     9*                                                   END HISTORY COMMENTS */
  5    10 
  5    11 
  5    12 /* These are the operator.types for each defined operator */
  5    13 /* Modified June 83 JMAthane for PASCAL_ARROW new operator */
  5    14 /* Added PASCAL_RANGE and PASCAL_ASSIGN 07/26/83 S. Herbst */
  5    15 /* Modified April 88 Hinatsu Addition of C types */
  5    16 
  5    17      dcl	   (PLUS		      init ("400001"b3), MINUS init ("400002"b3),
  5    18 	   TIMES		      init ("400003"b3), SLASH init ("400004"b3),
  5    19 	   OR_BAR		      init ("400005"b3), NOT_SIGN init ("400006"b3),
  5    20 	   LESS_THAN	      init ("400007"b3), GREATER_THAN init ("400010"b3),
  5    21 	   EQUALS		      init ("400011"b3), NOT_EQUALS init ("400012"b3),
  5    22 	   NOT_GREATER_THAN	      init ("400013"b3), NOT_LESS_THAN init ("400014"b3),
  5    23 	   PERIOD		      init ("400015"b3), COLON init ("400016"b3),
  5    24 	   AMPERSAND	      init ("400017"b3), PERCENT init ("400020"b3),
  5    25 	   DOLLAR_SIGN	      init ("400021"b3), LEFT_BRACKET init ("400022"b3),
  5    26 	   RIGHT_BRACKET	      init ("400023"b3), ARROW init ("400024"b3),
  5    27 	   COMMA		      init ("400025"b3), QUESTION_MARK init ("400026"b3),
  5    28 	   PASCAL_ARROW	      init ("400027"b3), PASCAL_RANGE init ("400030"b3),
  5    29 	   PASCAL_ASSIGN	      init ("400031"b3),
  5    30 
  5    31 /* Additons to support C types */
  5    32 	   C_LEFT_SHIFT           init ("400032"b3), C_RIGHT_SHIFT init ("400033"b3),
  5    33 
  5    34 /* operator 28 are left for future expansion */
  5    35 
  5    36 	   LEFT_PAREN	      init ("400035"b3), RIGHT_PAREN init ("400036"b3),
  5    37              C_EQUAL                init ("400037"b3), C_NOT_EQUAL init ("400040"b3),
  5    38 	   SEMI_COLON	      init ("400041"b3), NEW_LINE init ("400042"b3),
  5    39 	   C_INDIRECTION          init ("400034"b3)
  5    40 
  5    41 	   )		      bit (18) aligned internal static options (constant);
  5    42 
  5    43      dcl	   OPERATOR_VALUES	      (0:34) char (4) varying internal static options (constant) init
  5    44 			      ("????", "+", "-", "*", "/", "|", "^", "<",
  5    45 			      ">", "=", "^=", "<=", ">=", ".", ":", "&",
  5    46 			      "%", "$", "[", "]", "->", ",", "?", "^",
  5    47 			      "..", ":=", "<<", ">>", "*", "(", ")",
  5    48 			      "==", "!=", ";","
  5    49 ");
  5    50 
  5    51 /* END INCLUDE FILE ... probe_operators.incl.pl1 */
      157 
      158 
      159   /* ;;;;;;; */
      160 
  6     1 /* BEGIN INCLUDE FILE ... std_descriptor_types.incl.pl1 */
  6     2 
  6     3 
  6     4 /****^  HISTORY COMMENTS:
  6     5*  1) change(86-09-05,JMAthane), approve(86-09-05,MCR7525),
  6     6*     audit(86-09-11,Martinson), install(86-11-12,MR12.0-1208):
  6     7*     Added pascal_string_type_dtype descriptor type.  Its number is 87.
  6     8*     Objects of this type are PASCAL string types.
  6     9*  2) change(88-09-20,WAAnderson), approve(88-09-20,MCR7952),
  6    10*     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
  6    11*     Added the new C types.
  6    12*                                                   END HISTORY COMMENTS */
  6    13 
  6    14 /* This include file defines mnemonic names for the Multics
  6    15*   standard descriptor types, using both pl1 and cobol terminology.
  6    16*   PG 780613
  6    17*   JRD 790530
  6    18*   JRD 791016
  6    19*   MBW 810731
  6    20*   TGO 830614 Add hex types.
  6    21*   Modified June 83 JMAthane to add PASCAL data types
  6    22*   TGO 840120 Add float dec extended and generic, float binary generic
  6    23**/
  6    24 
  6    25      dcl	   (real_fix_bin_1_dtype  init (1),
  6    26 	   real_fix_bin_2_dtype   init (2),
  6    27 	   real_flt_bin_1_dtype   init (3),
  6    28 	   real_flt_bin_2_dtype   init (4),
  6    29 	   cplx_fix_bin_1_dtype   init (5),
  6    30 	   cplx_fix_bin_2_dtype   init (6),
  6    31 	   cplx_flt_bin_1_dtype   init (7),
  6    32 	   cplx_flt_bin_2_dtype   init (8),
  6    33 	   real_fix_dec_9bit_ls_dtype init (9),
  6    34 	   real_flt_dec_9bit_dtype init (10),
  6    35 	   cplx_fix_dec_9bit_ls_dtype init (11),
  6    36 	   cplx_flt_dec_9bit_dtype init (12),
  6    37 	   pointer_dtype	      init (13),
  6    38 	   offset_dtype	      init (14),
  6    39 	   label_dtype	      init (15),
  6    40 	   entry_dtype	      init (16),
  6    41 	   structure_dtype	      init (17),
  6    42 	   area_dtype	      init (18),
  6    43 	   bit_dtype	      init (19),
  6    44 	   varying_bit_dtype      init (20),
  6    45 	   char_dtype	      init (21),
  6    46 	   varying_char_dtype     init (22),
  6    47 	   file_dtype	      init (23),
  6    48 	   real_fix_dec_9bit_ls_overp_dtype init (29),
  6    49 	   real_fix_dec_9bit_ts_overp_dtype init (30),
  6    50 	   real_fix_bin_1_uns_dtype init (33),
  6    51 	   real_fix_bin_2_uns_dtype init (34),
  6    52 	   real_fix_dec_9bit_uns_dtype init (35),
  6    53 	   real_fix_dec_9bit_ts_dtype init (36),
  6    54 	   real_fix_dec_4bit_uns_dtype init (38),	/* digit-aligned */
  6    55 	   real_fix_dec_4bit_ts_dtype init (39),	/* byte-aligned */
  6    56 	   real_fix_dec_4bit_bytealigned_uns_dtype init (40), /* COBOL */
  6    57 	   real_fix_dec_4bit_ls_dtype init (41),	/* digit-aligned */
  6    58 	   real_flt_dec_4bit_dtype init (42),		/* digit-aligned */
  6    59 	   real_fix_dec_4bit_bytealigned_ls_dtype init (43),
  6    60 	   real_flt_dec_4bit_bytealigned_dtype init (44),
  6    61 	   cplx_fix_dec_4bit_bytealigned_ls_dtype init (45),
  6    62 	   cplx_flt_dec_4bit_bytealigned_dtype init (46),
  6    63 	   real_flt_hex_1_dtype   init (47),
  6    64 	   real_flt_hex_2_dtype   init (48),
  6    65 	   cplx_flt_hex_1_dtype   init (49),
  6    66 	   cplx_flt_hex_2_dtype   init (50),
  6    67 	   c_typeref_dtype        init (54),
  6    68 	   c_enum_dtype           init (55),
  6    69              c_enum_const_dtype     init (56),
  6    70 	   c_union_dtype          init (57),
  6    71 	   algol68_straight_dtype init (59),
  6    72 	   algol68_format_dtype   init (60),
  6    73 	   algol68_array_descriptor_dtype init (61),
  6    74 	   algol68_union_dtype    init (62),
  6    75 
  6    76 	   cobol_comp_6_dtype     init (1),
  6    77 	   cobol_comp_7_dtype     init (1),
  6    78 	   cobol_display_ls_dtype init (9),
  6    79 	   cobol_structure_dtype  init (17),
  6    80 	   cobol_char_string_dtype init (21),
  6    81 	   cobol_display_ls_overp_dtype init (29),
  6    82 	   cobol_display_ts_overp_dtype init (30),
  6    83 	   cobol_display_uns_dtype init (35),
  6    84 	   cobol_display_ts_dtype init (36),
  6    85 	   cobol_comp_8_uns_dtype init (38),		/* digit aligned */
  6    86 	   cobol_comp_5_ts_dtype  init (39),		/* byte aligned */
  6    87 	   cobol_comp_5_uns_dtype init (40),
  6    88 	   cobol_comp_8_ls_dtype  init (41),		/* digit aligned */
  6    89 	   real_flt_dec_extended_dtype init (81),	/* 9-bit exponent */
  6    90 	   cplx_flt_dec_extended_dtype init (82),	/* 9-bit exponent */
  6    91 	   real_flt_dec_generic_dtype init (83),	/* generic float decimal */
  6    92 	   cplx_flt_dec_generic_dtype init (84),
  6    93 	   real_flt_bin_generic_dtype init (85),	/* generic float binary */
  6    94 	   cplx_flt_bin_generic_dtype init (86)) fixed bin internal static options (constant);
  6    95 
  6    96      dcl	   (ft_integer_dtype      init (1),
  6    97 	   ft_real_dtype	      init (3),
  6    98 	   ft_double_dtype	      init (4),
  6    99 	   ft_complex_dtype	      init (7),
  6   100 	   ft_complex_double_dtype init (8),
  6   101 	   ft_external_dtype      init (16),
  6   102 	   ft_logical_dtype	      init (19),
  6   103 	   ft_char_dtype	      init (21),
  6   104 	   ft_hex_real_dtype      init (47),
  6   105 	   ft_hex_double_dtype    init (48),
  6   106 	   ft_hex_complex_dtype   init (49),
  6   107 	   ft_hex_complex_double_dtype init (50)
  6   108 	   )		      fixed bin internal static options (constant);
  6   109 
  6   110      dcl	   (algol68_short_int_dtype init (1),
  6   111 	   algol68_int_dtype      init (1),
  6   112 	   algol68_long_int_dtype init (2),
  6   113 	   algol68_real_dtype     init (3),
  6   114 	   algol68_long_real_dtype init (4),
  6   115 	   algol68_compl_dtype    init (7),
  6   116 	   algol68_long_compl_dtype init (8),
  6   117 	   algol68_bits_dtype     init (19),
  6   118 	   algol68_bool_dtype     init (19),
  6   119 	   algol68_char_dtype     init (21),
  6   120 	   algol68_byte_dtype     init (21),
  6   121 	   algol68_struct_struct_char_dtype init (22),
  6   122 	   algol68_struct_struct_bool_dtype init (20)
  6   123 	   )		      fixed bin internal static options (constant);
  6   124 
  6   125      dcl	   (label_constant_runtime_dtype init (24),
  6   126 	   int_entry_runtime_dtype init (25),
  6   127 	   ext_entry_runtime_dtype init (26),
  6   128 	   ext_procedure_runtime_dtype init (27),
  6   129 	   picture_runtime_dtype  init (63)
  6   130 	   )		      fixed bin internal static options (constant);
  6   131 
  6   132      dcl	   (pascal_integer_dtype  init (1),
  6   133 	   pascal_real_dtype      init (4),
  6   134 	   pascal_label_dtype     init (24),
  6   135 	   pascal_internal_procedure_dtype init (25),
  6   136 	   pascal_exportable_procedure_dtype init (26),
  6   137 	   pascal_imported_procedure_dtype init (27),
  6   138 	   pascal_typed_pointer_type_dtype init (64),
  6   139 	   pascal_char_dtype      init (65),
  6   140 	   pascal_boolean_dtype   init (66),
  6   141 	   pascal_record_file_type_dtype init (67),
  6   142 	   pascal_record_type_dtype init (68),
  6   143 	   pascal_set_dtype	      init (69),
  6   144 	   pascal_enumerated_type_dtype init (70),
  6   145 	   pascal_enumerated_type_element_dtype init (71),
  6   146 	   pascal_enumerated_type_instance_dtype init (72),
  6   147 	   pascal_user_defined_type_dtype init (73),
  6   148 	   pascal_user_defined_type_instance_dtype init (74),
  6   149 	   pascal_text_file_dtype init (75),
  6   150 	   pascal_procedure_type_dtype init (76),
  6   151 	   pascal_variable_formal_parameter_dtype init (77),
  6   152 	   pascal_value_formal_parameter_dtype init (78),
  6   153 	   pascal_entry_formal_parameter_dtype init (79),
  6   154 	   pascal_parameter_procedure_dtype init (80),
  6   155 	   pascal_string_type_dtype init (87)) fixed bin int static options (constant);
  6   156 
  6   157 
  6   158 /* END INCLUDE FILE ... std_descriptor_types.incl.pl1 */
      161 
      162 
      163   /* ;;;;;;; */
      164 
  7     1 /* BEGIN INCLUDE FILE ... probe_seg_info.incl.pl1
  7     2*
  7     3*   25 June 79 JRDavis
  7     4*
  7     5*   Modified  7 April 1983, TO - Add fields for character offset/line
  7     6*	correction per file.
  7     7**/
  7     8 
  7     9 dcl 1 seg_info based aligned,				/* place to remember information about object seg */
  7    10     2 language_type fixed bin,			/* language of source program */
  7    11     2 bits aligned,
  7    12       3 ignore_case bit (1) unal,
  7    13       3 bound_segment bit (1) unaligned,
  7    14       3 component bit (1) unaligned,
  7    15       3 pad bit (33) unal,
  7    16     2 names,					/* where to find it */
  7    17       3 directory_name character (168) unal,		/* what directory */
  7    18       3 entry_name character (32) unal,			/* what segment */
  7    19       3 segname character (32) unal,			/* procedure segname definition */
  7    20     2 identifier fixed bin (71),			/* time of object creation */
  7    21     2 pointers,					/* location of various parts of segment */
  7    22       3 symbol_header_ptr ptr unal,			/* to symbol section */
  7    23       3 original_source_ptr ptr unal,			/* to segment source map */
  7    24       3 statement_map_ptr ptr unal,			/* to segment statement map */
  7    25       3 break_info ptr unal,				/* for unbound segments, and start of chain for
  7    26*						   bound ones, -> break_map !obsolete, I think! */
  7    27       3 chain ptr unal,				/* to entry for next component if bound */
  7    28       3 linkage_ptr ptr unal,				/* to linkage section */
  7    29     2 bounds aligned,				/* structure of bounds information */
  7    30       3 text_bounds,
  7    31         4 start fixed bin (35),
  7    32         4 end fixed bin (35),
  7    33       3 symbol_bounds,
  7    34         4 start fixed bin (35),
  7    35         4 end fixed bin (35),
  7    36     2 map_size fixed bin,				/* size of statement map */
  7    37     2 error_code fixed bin (35),			/* errors encoutered while getting info, are recorded here */
  7    38     2 bound_create_time fixed bin (71),			/* time seg containing was bound or compiled. */
  7    39     2 bound_sym_header ptr unal,			/* to sym. section header for bound seg */
  7    40     2 pad (1) fixed bin (35),
  7    41 
  7    42     2 nfiles fixed bin,
  7    43     2 per_file (seg_info_nfiles refer (seg_info.nfiles)),
  7    44       3 file_pointers ptr unal,
  7    45       3 break_line (0:3) fixed bin (18) unsigned unaligned;
  7    46 
  7    47 dcl  seg_info_nfiles fixed bin;			/* for allocation purposes */
  7    48 
  7    49 
  7    50 /* END INCLUDE FILE ... probe_seg_info.incl.pl1 */
      165 
      166 
      167   /* ;;;;;;; */
      168 
      169   end;				/* external procedure probe_get_generation_ */
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/11/88  1544.9  probe_get_generation_.pl1         >spec>install>MR12.2-1210>probe_get_generation_.pl1
141          1    10/27/88  1339.2  probe_info.incl.pl1               >ldd>include>probe_info.incl.pl1
145          2    11/26/79  1320.6  probe_tokens.incl.pl1             >ldd>include>probe_tokens.incl.pl1
149          3    11/11/88  1543.8  probe_references.incl.pl1         >spec>install>MR12.2-1210>probe_references.incl.pl1
153          4    11/26/79  1320.6  probe_source_info.incl.pl1        >ldd>include>probe_source_info.incl.pl1
157          5    10/26/88  1255.5  probe_operators.incl.pl1          >ldd>include>probe_operators.incl.pl1
161          6    10/26/88  1255.5  std_descriptor_types.incl.pl1     >ldd>include>std_descriptor_types.incl.pl1
165          7    11/02/83  1845.0  probe_seg_info.incl.pl1           >ldd>include>probe_seg_info.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
CONSTANT_TYPE                          constant        bit(18)                  initial packed unaligned dcl 2-37 ref 81 103
MINUS                                  constant        bit(18)                  initial dcl 5-17 ref 101
NAME_TYPE                              constant        bit(18)                  initial packed unaligned dcl 2-37 ref 81
P_code                                 parameter       fixed bin(35,0)          dcl 46 set ref 25 124*
P_invocation                           parameter       fixed bin(17,0)          dcl 46 set ref 25 77* 109* 114*
P_new_source_info_ptr                  parameter       pointer                  dcl 46 ref 25 75
P_probe_info_ptr                       parameter       pointer                  dcl 46 ref 25 76
code                            000104 automatic       fixed bin(35,0)          dcl 61 set ref 78* 87* 88 105* 106 112* 114 117* 118
                                                                                  124 133*
constant                               based           structure                level 1 dcl 2-27
ct                       13            based           pointer                  level 3 packed packed unaligned dcl 1-18 set ref 79
                                                                                  81 81 84 84 86* 86 101 102* 102 103 135*
current_identifier_name                based           char                     packed unaligned dcl 2-42 ref 84
current_source                         based           structure                level 1 dcl 4-13 ref 108
execute                  64            based           bit(1)                   level 3 packed packed unaligned dcl 1-18 ref 93
flags                    64            based           structure                level 2 dcl 1-18
header                                 based           structure                level 2 dcl 2-16
identifier                             based           structure                level 1 dcl 2-19
inv_level                       000103 automatic       fixed bin(17,0)          dcl 60 set ref 112* 114
length                    6            based           fixed bin(17,0)          level 2 dcl 2-19 ref 84
level                           000102 automatic       fixed bin(35,0)          dcl 58 set ref 87* 93 105* 109
name                      7            based           pointer                  level 2 packed packed unaligned dcl 2-19 ref 84
new_source                             based           structure                level 1 dcl 54 set ref 108*
new_source_info_ptr             000100 automatic       pointer                  dcl 56 set ref 75* 93* 108 112* 117*
next                                   based           pointer                  level 3 packed packed unaligned dcl 2-16 ref 81 86
                                                                                  102
probe_error_$record             000020 constant        entry                    external dcl 70 ref 89 129
probe_et_$recorded_message      000022 external static fixed bin(35,0)          dcl 72 ref 133
probe_get_$integer              000010 constant        entry                    external dcl 64 ref 87 105
probe_get_$line                 000012 constant        entry                    external dcl 65 ref 112
probe_get_$object               000014 constant        entry                    external dcl 67 ref 117
probe_info                             based           structure                level 1 dcl 1-18
probe_info_ptr                  000110 automatic       pointer                  dcl 1-86 set ref 76* 79 81 81 84 84 86 86 87* 89* 93
                                                                                  93* 101 102 102 103 105* 108 112* 117* 129* 135
probe_stack_trace_$get_level    000016 constant        entry                    external dcl 68 ref 93
ptr_to_current_source
                          4            based           pointer                  level 2 dcl 1-18 ref 108
saved_ct                        000106 automatic       pointer                  dcl 62 set ref 79* 135
source_info                            based           structure                level 1 dcl 4-5
token                                  based           structure                level 1 dcl 2-16
token_header                           based           structure                level 1 dcl 2-4
token_info               12            based           structure                level 2 dcl 1-18
type                      2            based           bit(18)                  level 3 dcl 2-16 ref 81 81 101 103

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
AMPERSAND                              internal static bit(18)                  initial dcl 5-17
ARROW                                  internal static bit(18)                  initial dcl 5-17
COLON                                  internal static bit(18)                  initial dcl 5-17
COMMA                                  internal static bit(18)                  initial dcl 5-17
C_EQUAL                                internal static bit(18)                  initial dcl 5-17
C_INDIRECTION                          internal static bit(18)                  initial dcl 5-17
C_LEFT_SHIFT                           internal static bit(18)                  initial dcl 5-17
C_NOT_EQUAL                            internal static bit(18)                  initial dcl 5-17
C_RIGHT_SHIFT                          internal static bit(18)                  initial dcl 5-17
DOLLAR_SIGN                            internal static bit(18)                  initial dcl 5-17
EQUALS                                 internal static bit(18)                  initial dcl 5-17
GREATER_THAN                           internal static bit(18)                  initial dcl 5-17
LEFT_BRACKET                           internal static bit(18)                  initial dcl 5-17
LEFT_PAREN                             internal static bit(18)                  initial dcl 5-17
LESS_THAN                              internal static bit(18)                  initial dcl 5-17
NEW_LINE                               internal static bit(18)                  initial dcl 5-17
NOT_EQUALS                             internal static bit(18)                  initial dcl 5-17
NOT_GREATER_THAN                       internal static bit(18)                  initial dcl 5-17
NOT_LESS_THAN                          internal static bit(18)                  initial dcl 5-17
NOT_SIGN                               internal static bit(18)                  initial dcl 5-17
OPERATOR_TYPE                          internal static bit(18)                  initial packed unaligned dcl 2-37
OPERATOR_VALUES                        internal static varying char(4)          initial array dcl 5-43
OR_BAR                                 internal static bit(18)                  initial dcl 5-17
PASCAL_ARROW                           internal static bit(18)                  initial dcl 5-17
PASCAL_ASSIGN                          internal static bit(18)                  initial dcl 5-17
PASCAL_RANGE                           internal static bit(18)                  initial dcl 5-17
PERCENT                                internal static bit(18)                  initial dcl 5-17
PERIOD                                 internal static bit(18)                  initial dcl 5-17
PLUS                                   internal static bit(18)                  initial dcl 5-17
QUESTION_MARK                          internal static bit(18)                  initial dcl 5-17
RIGHT_BRACKET                          internal static bit(18)                  initial dcl 5-17
RIGHT_PAREN                            internal static bit(18)                  initial dcl 5-17
SEMI_COLON                             internal static bit(18)                  initial dcl 5-17
SLASH                                  internal static bit(18)                  initial dcl 5-17
TIMES                                  internal static bit(18)                  initial dcl 5-17
algol68_array_descriptor_dtype         internal static fixed bin(17,0)          initial dcl 6-25
algol68_bits_dtype                     internal static fixed bin(17,0)          initial dcl 6-110
algol68_bool_dtype                     internal static fixed bin(17,0)          initial dcl 6-110
algol68_byte_dtype                     internal static fixed bin(17,0)          initial dcl 6-110
algol68_char_dtype                     internal static fixed bin(17,0)          initial dcl 6-110
algol68_compl_dtype                    internal static fixed bin(17,0)          initial dcl 6-110
algol68_format_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
algol68_int_dtype                      internal static fixed bin(17,0)          initial dcl 6-110
algol68_long_compl_dtype               internal static fixed bin(17,0)          initial dcl 6-110
algol68_long_int_dtype                 internal static fixed bin(17,0)          initial dcl 6-110
algol68_long_real_dtype                internal static fixed bin(17,0)          initial dcl 6-110
algol68_real_dtype                     internal static fixed bin(17,0)          initial dcl 6-110
algol68_short_int_dtype                internal static fixed bin(17,0)          initial dcl 6-110
algol68_straight_dtype                 internal static fixed bin(17,0)          initial dcl 6-25
algol68_struct_struct_bool_dtype       internal static fixed bin(17,0)          initial dcl 6-110
algol68_struct_struct_char_dtype       internal static fixed bin(17,0)          initial dcl 6-110
algol68_union_dtype                    internal static fixed bin(17,0)          initial dcl 6-25
area_dtype                             internal static fixed bin(17,0)          initial dcl 6-25
bit_dtype                              internal static fixed bin(17,0)          initial dcl 6-25
c_enum_const_dtype                     internal static fixed bin(17,0)          initial dcl 6-25
c_enum_dtype                           internal static fixed bin(17,0)          initial dcl 6-25
c_typeref_dtype                        internal static fixed bin(17,0)          initial dcl 6-25
c_union_dtype                          internal static fixed bin(17,0)          initial dcl 6-25
char_dtype                             internal static fixed bin(17,0)          initial dcl 6-25
cobol_char_string_dtype                internal static fixed bin(17,0)          initial dcl 6-25
cobol_comp_5_ts_dtype                  internal static fixed bin(17,0)          initial dcl 6-25
cobol_comp_5_uns_dtype                 internal static fixed bin(17,0)          initial dcl 6-25
cobol_comp_6_dtype                     internal static fixed bin(17,0)          initial dcl 6-25
cobol_comp_7_dtype                     internal static fixed bin(17,0)          initial dcl 6-25
cobol_comp_8_ls_dtype                  internal static fixed bin(17,0)          initial dcl 6-25
cobol_comp_8_uns_dtype                 internal static fixed bin(17,0)          initial dcl 6-25
cobol_display_ls_dtype                 internal static fixed bin(17,0)          initial dcl 6-25
cobol_display_ls_overp_dtype           internal static fixed bin(17,0)          initial dcl 6-25
cobol_display_ts_dtype                 internal static fixed bin(17,0)          initial dcl 6-25
cobol_display_ts_overp_dtype           internal static fixed bin(17,0)          initial dcl 6-25
cobol_display_uns_dtype                internal static fixed bin(17,0)          initial dcl 6-25
cobol_structure_dtype                  internal static fixed bin(17,0)          initial dcl 6-25
cplx_fix_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
cplx_fix_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
cplx_fix_dec_4bit_bytealigned_ls_dtype internal static fixed bin(17,0)          initial dcl 6-25
cplx_fix_dec_9bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 6-25
cplx_flt_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
cplx_flt_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
cplx_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 6-25
cplx_flt_dec_4bit_bytealigned_dtype    internal static fixed bin(17,0)          initial dcl 6-25
cplx_flt_dec_9bit_dtype                internal static fixed bin(17,0)          initial dcl 6-25
cplx_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 6-25
cplx_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 6-25
cplx_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
cplx_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
current_constant                       based           structure                level 1 dcl 2-44
current_token                          based           structure                level 1 dcl 2-45
entry_dtype                            internal static fixed bin(17,0)          initial dcl 6-25
expression_area                        based           area(1024)               dcl 1-95
ext_entry_runtime_dtype                internal static fixed bin(17,0)          initial dcl 6-125
ext_procedure_runtime_dtype            internal static fixed bin(17,0)          initial dcl 6-125
file_dtype                             internal static fixed bin(17,0)          initial dcl 6-25
ft_char_dtype                          internal static fixed bin(17,0)          initial dcl 6-96
ft_complex_double_dtype                internal static fixed bin(17,0)          initial dcl 6-96
ft_complex_dtype                       internal static fixed bin(17,0)          initial dcl 6-96
ft_double_dtype                        internal static fixed bin(17,0)          initial dcl 6-96
ft_external_dtype                      internal static fixed bin(17,0)          initial dcl 6-96
ft_hex_complex_double_dtype            internal static fixed bin(17,0)          initial dcl 6-96
ft_hex_complex_dtype                   internal static fixed bin(17,0)          initial dcl 6-96
ft_hex_double_dtype                    internal static fixed bin(17,0)          initial dcl 6-96
ft_hex_real_dtype                      internal static fixed bin(17,0)          initial dcl 6-96
ft_integer_dtype                       internal static fixed bin(17,0)          initial dcl 6-96
ft_logical_dtype                       internal static fixed bin(17,0)          initial dcl 6-96
ft_real_dtype                          internal static fixed bin(17,0)          initial dcl 6-96
initial_source                         based           structure                level 1 dcl 4-14
int_entry_runtime_dtype                internal static fixed bin(17,0)          initial dcl 6-125
label_constant_runtime_dtype           internal static fixed bin(17,0)          initial dcl 6-125
label_dtype                            internal static fixed bin(17,0)          initial dcl 6-25
offset_dtype                           internal static fixed bin(17,0)          initial dcl 6-25
operator                               based           structure                level 1 dcl 2-24
pascal_boolean_dtype                   internal static fixed bin(17,0)          initial dcl 6-132
pascal_char_dtype                      internal static fixed bin(17,0)          initial dcl 6-132
pascal_entry_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 6-132
pascal_enumerated_type_dtype           internal static fixed bin(17,0)          initial dcl 6-132
pascal_enumerated_type_element_dtype   internal static fixed bin(17,0)          initial dcl 6-132
pascal_enumerated_type_instance_dtype  internal static fixed bin(17,0)          initial dcl 6-132
pascal_exportable_procedure_dtype      internal static fixed bin(17,0)          initial dcl 6-132
pascal_imported_procedure_dtype        internal static fixed bin(17,0)          initial dcl 6-132
pascal_integer_dtype                   internal static fixed bin(17,0)          initial dcl 6-132
pascal_internal_procedure_dtype        internal static fixed bin(17,0)          initial dcl 6-132
pascal_label_dtype                     internal static fixed bin(17,0)          initial dcl 6-132
pascal_parameter_procedure_dtype       internal static fixed bin(17,0)          initial dcl 6-132
pascal_procedure_type_dtype            internal static fixed bin(17,0)          initial dcl 6-132
pascal_real_dtype                      internal static fixed bin(17,0)          initial dcl 6-132
pascal_record_file_type_dtype          internal static fixed bin(17,0)          initial dcl 6-132
pascal_record_type_dtype               internal static fixed bin(17,0)          initial dcl 6-132
pascal_set_dtype                       internal static fixed bin(17,0)          initial dcl 6-132
pascal_string_type_dtype               internal static fixed bin(17,0)          initial dcl 6-132
pascal_text_file_dtype                 internal static fixed bin(17,0)          initial dcl 6-132
pascal_typed_pointer_type_dtype        internal static fixed bin(17,0)          initial dcl 6-132
pascal_user_defined_type_dtype         internal static fixed bin(17,0)          initial dcl 6-132
pascal_user_defined_type_instance_dtype
                                       internal static fixed bin(17,0)          initial dcl 6-132
pascal_value_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 6-132
pascal_variable_formal_parameter_dtype internal static fixed bin(17,0)          initial dcl 6-132
picture_runtime_dtype                  internal static fixed bin(17,0)          initial dcl 6-125
pointer_dtype                          internal static fixed bin(17,0)          initial dcl 6-25
probe_area                             based           area(1024)               dcl 1-93
probe_info_version                     internal static fixed bin(17,0)          initial dcl 1-88
probe_info_version_1                   internal static fixed bin(17,0)          initial dcl 1-90
real_fix_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
real_fix_bin_1_uns_dtype               internal static fixed bin(17,0)          initial dcl 6-25
real_fix_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
real_fix_bin_2_uns_dtype               internal static fixed bin(17,0)          initial dcl 6-25
real_fix_dec_4bit_bytealigned_ls_dtype internal static fixed bin(17,0)          initial dcl 6-25
real_fix_dec_4bit_bytealigned_uns_dtype
                                       internal static fixed bin(17,0)          initial dcl 6-25
real_fix_dec_4bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 6-25
real_fix_dec_4bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 6-25
real_fix_dec_4bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 6-25
real_fix_dec_9bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 6-25
real_fix_dec_9bit_ls_overp_dtype       internal static fixed bin(17,0)          initial dcl 6-25
real_fix_dec_9bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 6-25
real_fix_dec_9bit_ts_overp_dtype       internal static fixed bin(17,0)          initial dcl 6-25
real_fix_dec_9bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 6-25
real_flt_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
real_flt_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
real_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 6-25
real_flt_dec_4bit_bytealigned_dtype    internal static fixed bin(17,0)          initial dcl 6-25
real_flt_dec_4bit_dtype                internal static fixed bin(17,0)          initial dcl 6-25
real_flt_dec_9bit_dtype                internal static fixed bin(17,0)          initial dcl 6-25
real_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 6-25
real_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 6-25
real_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
real_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
reference_arg_list                     based           structure                level 1 dcl 3-59
reference_node                         based           structure                level 1 dcl 3-16
reference_subscripts                   based           structure                level 1 dcl 3-64
scratch_area                           based           area(1024)               dcl 1-92
seg_info                               based           structure                level 1 dcl 7-9
seg_info_nfiles                        automatic       fixed bin(17,0)          dcl 7-47
structure_dtype                        internal static fixed bin(17,0)          initial dcl 6-25
subscript_reference_ptrs               based           structure                level 1 dcl 3-69
varying_bit_dtype                      internal static fixed bin(17,0)          initial dcl 6-25
varying_char_dtype                     internal static fixed bin(17,0)          initial dcl 6-25
work_area                              based           area(1024)               dcl 1-94

NAMES DECLARED BY EXPLICIT CONTEXT.
MAIN_RETURN                     000275 constant        label                    dcl 124 ref 136
RECORDED_MESSAGE                000327 constant        label                    dcl 133 ref 91 131
SYNTAX_ERROR                    000301 constant        label                    dcl 129 ref 84 103 106 118
probe_get_generation_           000040 constant        entry                    external dcl 25

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       446         472     336         456
Length      1016     336        24         307     110           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
probe_get_generation_               112 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
probe_get_generation_    000100 new_source_info_ptr         probe_get_generation_
                         000102 level                       probe_get_generation_
                         000103 inv_level                   probe_get_generation_
                         000104 code                        probe_get_generation_
                         000106 saved_ct                    probe_get_generation_
                         000110 probe_info_ptr              probe_get_generation_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
probe_error_$record           probe_get_$integer            probe_get_$line               probe_get_$object
probe_stack_trace_$get_level

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
probe_et_$recorded_message




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     25 000033        75 000045        76 000051        77 000054        78 000055        79 000056        81 000060
     84 000071        86 000077        87 000101        88 000113        89 000115        91 000142        93 000143
     97 000167       101 000170       102 000173       103 000175       105 000201       106 000213       108 000215
    109 000223       110 000226       112 000227       114 000252       117 000260       118 000273       124 000275
    126 000300       129 000301       131 000326       133 000327       135 000332       136 000335


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
