ASSEMBLY LISTING OF SEGMENT >special_ldd>install>MR12.0-1206>fixed_ops_.alm                  
ASSEMBLED ON:	11/05/86  1034.5 mst Wed
OPTIONS USED:	list 
ASSEMBLED BY:	ALM Version  6.7  October 1986  
ASSEMBLER CREATED:	10/08/86  1557.5 mst Wed

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Information Systems Inc., 1983 *
                                     4  " *                                                         *
                                     5  " * Copyright (c) 1972 by Massachusetts Institute of        *
                                     6  " * Technology and Honeywell Information Systems, Inc.      *
                                     7  " *                                                         *
                                     8  " ***********************************************************
                                     9  
    000000                          10  	name	fixed_ops_
                        000000      11  	entry	scaler_
                        000024      12  	entry	fixed_divide_
                        000043      13  	entry	fixed_round_
                        000064      14  	entry	float_round_
                        000114      15  	entry	size_check_
                                    16  "
                                    17  "	scaler_(var fixed bin(71),nbits fixed bin(17),code fixed bin(17))
                                    18  "
                                    19  "	(nbits is the amount of shifting to be done)
                                    20  "
    000000  aa  0 00004 7201 20     21  scaler_:	lxl0	ap|4,*	get nbits
    000001  0a   000010 6040 00     22  	tmi	scale_down
    000002  aa  0 00002 2371 20     23  	ldaq	ap|2,*	get var
    000003  aa   000000 7370 10     24  	lls	0,0	shift the appropriate amount
    000004  aa   000002 6020 04     25  	tnc	2,ic
    000005  aa  0 00006 0541 20     26  	aos	ap|6,*	set code if hi-order bits lost
    000006  aa  0 00002 7571 20     27  	staq	ap|2,*	store result back
    000007  aa  7 00044 7101 20     28  	short_return
                                    29  "
    000010                          30  scale_down:
    000010  aa  0 00004 3361 20     31  	lcq	ap|4,*	amount to shift is -nbits
    000011  aa   000000 6200 06     32  	eax0	0,ql	"
    000012  aa  0 00002 2371 20     33  	ldaq	ap|2,*	get var
    000013  0a   000017 6040 00     34  	tmi	scale_down_neg
                                    35  "
    000014  aa   000000 7330 10     36  	lrs	0,0	shift appropriate amount
    000015  aa  0 00002 7571 20     37  	staq	ap|2,*	store result back
    000016  aa  7 00044 7101 20     38  	short_return
                                    39  "
    000017                          40  scale_down_neg:
    000017  aa   000000 5330 00     41  	negl	0	make positive
    000020  aa   000000 7330 10     42  	lrs	0,0	shift appropriate amount
    000021  aa   000000 5330 00     43  	negl	0	restore sign
    000022  aa  0 00002 7571 20     44  	staq	ap|2,*	store result
    000023  aa  7 00044 7101 20     45  	short_return
                                    46  "
                                    47  "
                                    48  "	result fixed bin(71) = fixed_divide_((var1,var2) fixed bin(71),
                                    49  "				(scale1,scale2,scale3,code) fixed bin(17))
                                    50  "
                        000551      51  	bool	op_vec,551	from assembly of pl1_operators_
                        000046      52  	equ	tbp,38		""
                                    53  	tempd	dtemp(12)		NECESSARY TO SIMULATE PL/I STACK FRAME
    000024                          54  fixed_divide_:	
    000024  aa   000100 6270 00     55  	push
    000025  aa  7 00040 2721 20
    000026  0a   000026 3520 00     56  	eppbp	*	save ptr to base of text segment
    000027  aa  6 00046 2525 00     57  	spbpbp	sp|tbp
                                    58  "
    000030  aa  0 00006 2361 20     59  	ldq	ap|6,*		calculate scale1 - (scale2 - scale3) for shifting
    000031  aa  0 00010 1761 20     60  	sbq	ap|8,*
    000032  aa  0 00012 0761 20     61  	adq	ap|10,*
    000033  aa   000000 6210 06     62  	eax1	0,ql		save in index register for pl1_operators_
                                    63  "
    000034  aa  0 00002 2371 20     64  	ldaq	ap|2,*		load dividend
    000035  aa  0 00004 3521 20     65  	eppbp	ap|4,*		point to divisor
    000036  aa  0 00016 3535 20     66  	eppbb	ap|14,*		save ptr to result
    000037  aa  7 00034 3501 20     67  	eppap	sb|stack_header.pl1_operators_ptr,*
    000040  aa  0 01373 7001 00     68  	tsx0	ap|op_vec+402	call divide operator
                                    69  "
    000041  aa  3 00000 7571 00     70  	staq	bb|0		save result
    000042  aa  7 00042 7101 20     71  	return
                                    72  "
                                    73  "
                                    74  "	result fixed bin(71) = fixed_round_(var fixed bin(71),nplace fixed bin(17),
                                    75  "					inscale fixed bin(17))
                                    76  "
    000043                          77  fixed_round_:
                                    78  "
                                    79  "	assumption:	inscale > nplace
                                    80  "
    000043  aa  0 00006 2361 20     81  	ldq	ap|6,*	get inscale
    000044  aa  0 00004 1761 20     82  	sbq	ap|4,*	get inscale-nplace
    000045  aa   000000 6200 06     83  	eax0	0,ql	save it
    000046  aa  0 00002 2371 20     84  	ldaq	ap|2,*	get the variable
    000047  0a   000055 6040 00     85  	tmi	round_neg
                                    86  "
    000050  aa   777777 7330 10     87  	lrs	-1,0	shift out unnecessary bits
    000051  aa   000001 0330 07     88  	adl	1,dl	add rounding factor
    000052  aa   000001 7330 00     89  	lrs	1	truncate
    000053  aa  0 00010 7571 20     90  	staq	ap|8,*	store result
    000054  aa  7 00044 7101 20     91  	short_return
                                    92  "
    000055                          93  round_neg:
    000055  aa   000000 5330 00     94  	negl	0	get absolute value
    000056  aa   777777 7330 10     95  	lrs	-1,0	shift out unnecessary bits
    000057  aa   000001 0330 07     96  	adl	1,dl	add rounding factor
    000060  aa   000001 7330 00     97  	lrs	1	truncate
    000061  aa   000000 5330 00     98  	negl	0	restore sign
    000062  aa  0 00010 7571 20     99  	staq	ap|8,*	store result
    000063  aa  7 00044 7101 20    100  	short_return
                                   101  "
                                   102  "
                                   103  "	result float bin(63) = float_round_(var float bin(63),nplace fixed bin(17))
                                   104  "
    000064                         105  float_round_:
    000064  aa  0 00004 3361 20    106  	lcq	ap|4,*	amount to shift is 70 - nplace
    000065  aa   000106 6200 06    107  	eax0	70,ql	"
    000066  aa  0 00002 4331 20    108  	dfld	ap|2,*	get the variable
    000067  0a   000101 6040 00    109  	tmi	float_neg
                                   110  "
    000070  aa   000000 7330 10    111  	lrs	0,0	shift out unnecessary bits
    000071  aa   000001 0330 07    112  	adl	1,dl	add in rounding factor
    000072  aa   000001 7330 00    113  	lrs	1	truncate
    000073  aa   000001 7370 10    114  	lls	1,0	normalize
    000074  aa   000003 6020 04    115  	tnc	3,ic	transfer if no carry into sign bit
    000075  aa   002000 4150 03    116  	ade	1024,du	add one to exponent
    000076  aa   000001 7730 00    117  	lrl	1	shift aq back one bit
    000077  aa  0 00006 4571 20    118  	dfst	ap|6,*	store result
    000100  aa  7 00044 7101 20    119  	short_return
                                   120  "
    000101                         121  float_neg:
    000101  aa   000000 5130 00    122  	fneg	0	get abs(var)
    000102  aa   000000 7330 10    123  	lrs	0,0	shift out unnecessary bits
    000103  aa   000001 0330 07    124  	adl	1,dl	add rounding factor
    000104  aa   000001 7330 00    125  	lrs	1	truncate
    000105  aa   000001 7370 10    126  	lls	1,0	normalize
    000106  aa   000003 6020 04    127  	tnc	3,ic	transfer if no carry into sign bit
    000107  aa   002000 4150 03    128  	ade	1024,du	add one to exponent
    000110  aa   000001 7730 00    129  	lrl	1	shift aq back one bit
    000111  aa   000000 5130 00    130  	fneg	0	restore sign
    000112  aa  0 00006 4571 20    131  	dfst	ap|6,*	store result
    000113  aa  7 00044 7101 20    132  	short_return
                                   133  "
                                   134  "
                                   135  "	code fixed bin(17) = size_check_(var fixed bin(71),length fixed bin(17))
                                   136  "
    000114                         137  size_check_:
    000114  aa   000110 2360 07    138  	ldq	72,dl	amount to shift is 72 - length.
    000115  aa  0 00004 1761 20    139  	sbq	ap|4,*	""
    000116  0a   000123 6000 00    140  	tze	size_good
                                   141  "
    000117  aa   000000 6200 06    142  	eax0	0,ql
    000120  aa  0 00002 2371 20    143  	ldaq	ap|2,*	get var
    000121  aa   000000 7370 10    144  	lls	0,0	shift
    000122  0a   000125 6030 00    145  	trc	size_bad	if there is a carry, signal size.
                                   146  "
    000123                         147  size_good:
    000123  aa  0 00006 4501 20    148  	stz	ap|6,*	code = 0
    000124  aa  7 00044 7101 20    149  	short_return
                                   150  "
    000125                         151  size_bad:
    000125  aa  0 00006 4401 20    152  	sxl0	ap|6,*	code ^= 0
    000126  aa  7 00044 7101 20    153  	short_return
                                   154  "
                                   155  	include	stack_header
                                   1-1  "	BEGIN INCLUDE FILE ... stack_header.incl.alm  3/72  Bill Silver
                                   1-2  "
                                   1-3  "	modified 7/76 by M. Weaver for *system links and more system use of areas
                                   1-4  "	modified 3/77 by M. Weaver  to add rnt_ptr
                                   1-5  "	modified 7/77 by S. Webber to add run_unit_depth and assign_linkage_ptr
                                   1-6  "	modified 6/83 by J. Ives to add trace_frames and in_trace.
                                   1-7  
                                   1-8  " HISTORY COMMENTS:
                                   1-9  "  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
                                  1-10  "     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
                                  1-11  "     added the heap_header_ptr definition
                                  1-12  "  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
                                  1-13  "     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
                                  1-14  "     Modified to support control point management.  These changes were
                                  1-15  "     actually made in February 1985 by G. Palter.
                                  1-16  "  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
                                  1-17  "     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
                                  1-18  "     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
                                  1-19  "     bit pad after cur_lot_size for the cpm_enabled. This was done to save
                                  1-20  "     some space int the stack header and change the cpd_ptr unal to
                                  1-21  "     cpm_data_ptr (ITS pair).
                                  1-22  "                                                      END HISTORY COMMENTS
                                  1-23  
                        000004    1-24  	equ	stack_header.cpm_data_ptr,4		ptr to control point for this stack
                        000006    1-25  	equ	stack_header.combined_stat_ptr,6	ptr to separate static area
                                  1-26  
                        000010    1-27  	equ	stack_header.clr_ptr,8		ptr to area containing linkage sections
                        000012    1-28  	equ	stack_header.max_lot_size,10		number of words allowed in lot (DU)
                        000012    1-29  	equ	stack_header.main_proc_invoked,10	nonzero if main proc was invoked in run unit (DL)
                        000012    1-30  	equ	stack_header.run_unit_depth,10	number of active run units stacked (DL)
                        000013    1-31  	equ	stack_header.cur_lot_size,11		DU number of words (entries) in lot
                        000013    1-32            equ	stack_header.cpm_enabled,11		DL  non-zero if control point management is enabled
                        000014    1-33  	equ	stack_header.system_free_ptr,12	ptr to system storage area
                        000016    1-34  	equ	stack_header.user_free_ptr,14		ptr to user storage area
                                  1-35  
                        000020    1-36  	equ	stack_header.parent_ptr,16		ptr to parent stack or null
                        000022    1-37  	equ	stack_header.stack_begin_ptr,18	ptr to first stack frame
                        000024    1-38  	equ	stack_header.stack_end_ptr,20		ptr to next useable stack frame
                        000026    1-39  	equ	stack_header.lot_ptr,22		ptr to the lot for the current ring
                                  1-40  
                        000030    1-41  	equ	stack_header.signal_ptr,24		ptr to signal proc for current ring
                        000032    1-42  	equ	stack_header.bar_mode_sp,26		value of sp before entering bar mode
                        000034    1-43  	equ	stack_header.pl1_operators_ptr,28	ptr: pl1_operators_$operator_table
                        000036    1-44  	equ	stack_header.call_op_ptr,30		ptr to standard call operator
                                  1-45  
                        000040    1-46  	equ	stack_header.push_op_ptr,32		ptr to standard push operator
                        000042    1-47  	equ	stack_header.return_op_ptr,34		ptr to standard return operator
                        000044    1-48  	equ	stack_header.ret_no_pop_op_ptr,36	ptr: stand. return/ no pop operator
                        000046    1-49  	equ	stack_header.entry_op_ptr,38		ptr to standard entry operator
                                  1-50  
                        000050    1-51  	equ	stack_header.trans_op_tv_ptr,40	ptr to table of translator operator ptrs
                        000052    1-52  	equ	stack_header.isot_ptr,42		pointer to ISOT
                        000054    1-53  	equ	stack_header.sct_ptr,44		pointer to System Condition Table
                        000056    1-54  	equ	stack_header.unwinder_ptr,46		pointer to unwinder for current ring
                                  1-55  
                        000060    1-56  	equ	stack_header.sys_link_info_ptr,48	ptr to *system link name table
                        000062    1-57  	equ	stack_header.rnt_ptr,50		ptr to reference name table
                        000064    1-58  	equ	stack_header.ect_ptr,52		ptr to event channel table
                        000066    1-59  	equ	stack_header.assign_linkage_ptr,54	ptr to area for hcs_$assign_linkage calls
                        000070    1-60  	equ	stack_header.heap_header_ptr,56	ptr to heap header.
                        000072    1-61  	equ	stack_header.trace_frames,58		stack of trace_catch_ frames
                        000073    1-62  	equ	stach_header.trace_top_ptr,59		trace pointer
                        000074    1-63  	equ	stack_header.in_trace,60		trace antirecurse bit
                        000100    1-64  	equ	stack_header_end,64			length of stack header
                                  1-65  
                                  1-66  
                                  1-67  
                                  1-68  
                        000000    1-69  	equ	trace_frames.count,0		number of trace frames on stack
                        000001    1-70  	equ	trace_frames.top_ptr,1		packed pointer to top one
                                  1-71  
                                  1-72  "	The  following constant is an offset within the  pl1  operators table.
                                  1-73  "	It  references a  transfer vector table.
                                  1-74  
                        000551    1-75  	bool	tv_offset,551
                                  1-76  
                                  1-77  
                                  1-78  "	The  following constants are offsets within this transfer vector table.
                                  1-79  
                        001170    1-80  	equ	call_offset,tv_offset+271
                        001171    1-81  	equ	push_offset,tv_offset+272
                        001172    1-82  	equ	return_offset,tv_offset+273
                        001173    1-83  	equ	return_no_pop_offset,tv_offset+274
                        001174    1-84  	equ	entry_offset,tv_offset+275
                                  1-85  
                                  1-86  
                                  1-87  " 	END INCLUDE FILE stack_header.incl.alm
                                   156  	end
ENTRY SEQUENCES
     
    000127  5a   000044 0000 00
    000130  aa  7 00046 2721 20
    000131  0a   000000 7100 00
    000132  5a   000035 0000 00
    000133  aa  7 00046 2721 20
    000134  0a   000024 7100 00
    000135  5a   000026 0000 00
    000136  aa  7 00046 2721 20
    000137  0a   000043 7100 00
    000140  5a   000017 0000 00
    000141  aa  7 00046 2721 20
    000142  0a   000064 7100 00
    000143  5a   000011 0000 00
    000144  aa  7 00046 2721 20
    000145  0a   000114 7100 00

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000146  5a   000003 000000 
    000147  5a   000060 600000 
    000150  aa   000000 000000 
    000151  55   000011 000002 
    000152  5a   000002 400003 
    000153  55   000006 000011 
    000154  aa  012 146 151 170
    000155  aa  145 144 137 157
    000156  aa  160 163 137 000
    000157  55   000017 000003 
    000160  0a   000144 500000 
    000161  55   000014 000003 
    000162  aa  013 163 151 172         size_check_
    000163  aa  145 137 143 150
    000164  aa  145 143 153 137
    000165  55   000026 000011 
    000166  0a   000141 500000 
    000167  55   000022 000003 
    000170  aa  014 146 154 157         float_round_
    000171  aa  141 164 137 162
    000172  aa  157 165 156 144
    000173  aa  137 000 000 000
    000174  55   000035 000017 
    000175  0a   000136 500000 
    000176  55   000031 000003 
    000177  aa  014 146 151 170         fixed_round_
    000200  aa  145 144 137 162
    000201  aa  157 165 156 144
    000202  aa  137 000 000 000
    000203  55   000044 000026 
    000204  0a   000133 500000 
    000205  55   000040 000003 
    000206  aa  015 146 151 170         fixed_divide_
    000207  aa  145 144 137 144
    000210  aa  151 166 151 144
    000211  aa  145 137 000 000
    000212  55   000051 000035 
    000213  0a   000130 500000 
    000214  55   000047 000003 
    000215  aa  007 163 143 141         scaler_
    000216  aa  154 145 162 137
    000217  55   000002 000044 
    000220  6a   000000 400002 
    000221  55   000054 000003 
    000222  aa  014 163 171 155         symbol_table
    000223  aa  142 157 154 137
    000224  aa  164 141 142 154
    000225  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000226  aa   000000 000015 
    000227  5a   000044 000000 
    000230  aa   000000 000000 
    000231  5a   000026 000000 
    000232  aa   000000 000000 
    000233  aa   000000 000000 
    000234  aa   000000 000000 
    000235  5a   000051 000000 
    000236  aa   000000 000000 
    000237  5a   000017 000000 
    000240  5a   000011 000000 
    000241  5a   000035 000000 
    000242  aa   000000 000000 
    000243  aa   000000 000000 

NO EXTERNAL NAMES

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000244  aa   000001 000000 
    000245  aa   000000 000000 

INTERNAL EXPRESSION WORDS

LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000146 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000010 
    000007  a2   000000 000000 
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000004 
    000004  aa   000000 114732 
    000005  aa   732732 062314 
    000006  aa   000000 114775 
    000007  aa   662757 354575 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000154 
    000020  aa   000000 000130 
    000021  aa   000000 000142 
    000022  aa   000145 000130 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   040066 056067 
    000030  aa   040040 117143 
    000031  aa   164157 142145 
    000032  aa   162040 061071 
    000033  aa   070066 040040 
    000034  aa   107112 157150 
    000035  aa   156163 157156 
    000036  aa   056123 171163 
    000037  aa   115141 151156 
    000040  aa   164056 141040 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   154151 163164 
    000045  aa   040040 040040 
    000046  aa   040040 040040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040040 040040 
    000057  aa   040040 040040 
    000060  aa   040040 040040 
    000061  aa   040040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000002 
    000066  aa   000076 000057 
    000067  aa   147740 446222 
    000070  aa   000000 114774 
    000071  aa   460767 000000 
    000072  aa   000112 000066 
    000073  aa   147714 750316 
    000074  aa   000000 114774 
    000075  aa   453561 000000 
    000076  aa   076163 160145          >special_ldd>install>MR12.0-1206>fixed_ops_.alm
    000077  aa   143151 141154 
    000100  aa   137154 144144 
    000101  aa   076151 156163 
    000102  aa   164141 154154 
    000103  aa   076115 122061 
    000104  aa   062056 060055 
    000105  aa   061062 060066 
    000106  aa   076146 151170 
    000107  aa   145144 137157 
    000110  aa   160163 137056 
    000111  aa   141154 155040 
    000112  aa   076163 160145          >special_ldd>install>MR12.0-1206>stack_header.incl.alm
    000113  aa   143151 141154 
    000114  aa   137154 144144 
    000115  aa   076151 156163 
    000116  aa   164141 154154 
    000117  aa   076115 122061 
    000120  aa   062056 060055 
    000121  aa   061062 060066 
    000122  aa   076163 164141 
    000123  aa   143153 137150 
    000124  aa   145141 144145 
    000125  aa   162056 151156 
    000126  aa   143154 056141 
    000127  aa   154155 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

        1170    call_offset              stack_header:        80.
          50    dtemp                    fixed_ops_:    53.
        1174    entry_offset             stack_header:        84.
          24    fixed_divide_            fixed_ops_:    12,   54.
          43    fixed_round_             fixed_ops_:    13,   77.
         101    float_neg                fixed_ops_:   109,  121.
          64    float_round_             fixed_ops_:    14,  105.
         551    op_vec                   fixed_ops_:    51,   68.
        1171    push_offset              stack_header:        81.
        1173    return_no_pop_offset     stack_header:        83.
        1172    return_offset            stack_header:        82.
          55    round_neg                fixed_ops_:    85,   93.
           0    scaler_                  fixed_ops_:    11,   21.
          10    scale_down               fixed_ops_:    22,   30.
          17    scale_down_neg           fixed_ops_:    34,   40.
         125    size_bad                 fixed_ops_:   145,  151.
         114    size_check_              fixed_ops_:    15,  137.
         123    size_good                fixed_ops_:   140,  147.
          73    stach_header.trace_top_ptr     stack_header:        62.
          66    stack_header.assign_linkage_ptr      stack_header:        59.
          32    stack_header.bar_mode_sp       stack_header:        42.
          36    stack_header.call_op_ptr       stack_header:        44.
          10    stack_header.clr_ptr     stack_header:        27.
           6    stack_header.combined_stat_ptr       stack_header:        25.
           4    stack_header.cpm_data_ptr      stack_header:        24.
          13    stack_header.cpm_enabled       stack_header:        32.
          13    stack_header.cur_lot_size      stack_header:        31.
          64    stack_header.ect_ptr     stack_header:        58.
          46    stack_header.entry_op_ptr      stack_header:        49.
          70    stack_header.heap_header_ptr   stack_header:        60.
          74    stack_header.in_trace    stack_header:        63.
          52    stack_header.isot_ptr    stack_header:        52.
          26    stack_header.lot_ptr     stack_header:        39.
          12    stack_header.main_proc_invoked       stack_header:        29.
          12    stack_header.max_lot_size      stack_header:        28.
          20    stack_header.parent_ptr  stack_header:        36.
          34    stack_header.pl1_operators_ptr       fixed_ops_:    67,
                                                     stack_header:        43.
          40    stack_header.push_op_ptr       stack_header:        46.
          42    stack_header.return_op_ptr     stack_header:        47.
          44    stack_header.ret_no_pop_op_ptr       stack_header:        48.
          62    stack_header.rnt_ptr     stack_header:        57.
          12    stack_header.run_unit_depth    stack_header:        30.
          54    stack_header.sct_ptr     stack_header:        53.
          30    stack_header.signal_ptr  stack_header:        41.
          22    stack_header.stack_begin_ptr   stack_header:        37.
          24    stack_header.stack_end_ptr     stack_header:        38.
          14    stack_header.system_free_ptr   stack_header:        33.
          60    stack_header.sys_link_info_ptr       stack_header:        56.
          72    stack_header.trace_frames      stack_header:        61.
          50    stack_header.trans_op_tv_ptr   stack_header:        51.
          56    stack_header.unwinder_ptr      stack_header:        54.
          16    stack_header.user_free_ptr     stack_header:        34.
         100    stack_header_end         stack_header:        64.
          46    tbp                      fixed_ops_:    52,   57.
           0    trace_frames.count       stack_header:        69.
           1    trace_frames.top_ptr     stack_header:        70.
         551    tv_offset                stack_header:        75,   80,   81,   82,   83,   84.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
