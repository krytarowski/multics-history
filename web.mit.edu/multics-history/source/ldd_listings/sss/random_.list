ASSEMBLY LISTING OF SEGMENT >spec>on>pl128d>random_.alm                     
ASSEMBLED ON:	10/03/83  1347.5 mst Mon
OPTIONS USED:	list 
ASSEMBLED BY:	ALM Version  6.6  November 1982 
ASSEMBLER CREATED:	09/21/83  1227.3 mst Wed

                                     1  "  ******************************************************
                                     2  "  *                                                    *
                                     3  "  *                                                    *
                                     4  "  * Copyright (c) 1972 by Massachusetts Institute of   *
                                     5  "  * Technology and Honeywell Information Systems, Inc. *
                                     6  "  *                                                    *
                                     7  "  *                                                    *
                                     8  "  ******************************************************
                                     9  
                                    10  """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                    11  " This procedure generates pseudo-random numbers using the 
                                    12  " Tausworth method.  36 bits are used in the generation.
                                    13  "
                                    14  " There are multiple entry points.  For all entry points:
                                    15  "	The first argument is a fixed binary input argument,
                                    16  "     which is a non-zero integer.  This is an optional argument--
                                    17  "     if not provided by caller, a value maintained in internal
                                    18  "     static is used.  This value, from either source,
                                    19  "     is the seed for the random number generator.  Its value is
                                    20  "     modified so that upon return it has the value that should
                                    21  "     be used as the seed for the next call.
                                    22  "
                                    23  " There are a set of entry points with two arguments which
                                    24  " are used to generate a single random number.  For these:
                                    25  "	The second argument is a floating point return argument
                                    26  "     that returns the value of the random number generated.
                                    27  "
                                    28  " There are a set of entry points with three arguments which
                                    29  " are used to generate a sequence of random numbers.  For these:
                                    30  "	The second argument is an array of single precision
                                    31  "     floating point numbers.  This array returns a sequence of
                                    32  "     of random numbers, beginning at the base of the array.
                                    33  "	The third argument is a fixed binary(17) input
                                    34  "     argument the specifies the size of the array.
                                    35  "
                                    36  "	Coded 1 January 1970 by Roger R. Schell
                                    37  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
                                    38  
    000000                          39  	name	random_
                                    40  
                                    41  " Table of contents
                        000000      42  	entry	set_seed
                        000003      43  	entry	get_seed
                        000006      44  	entry	random_
                        000006      45  	entry	uniform
                        000010      46  	entry	uniform_ant
                        000012      47  	entry	uniform_seq
                        000014      48  	entry	uniform_ant_seq
                        000016      49  	entry	normal
                        000021      50  	entry	normal_ant
                        000024      51  	entry	normal_seq
                        000027      52  	entry	normal_ant_seq
                        000032      53  	entry	exponential
                        000034      54  	entry	exponential_seq
                                    55  
                                    56  
                        000013      57  	equ	shift,11
                        000044      58  	equ	size,36
                        000000      59  	equ	expon,0		exponent to convert integer to floating point
                                    60  
                                    61  
                                    62  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    63  "
                                    64  " CODING CONVENTIONS
                                    65  "
                                    66  "     XR0	used for return address for specific distribution subroutines
                                    67  "     XR1	used for return address for generator primitive subroutine
                                    68  "     XR2	general purpose register for distribution subroutines
                                    69  "     XR3	usedto indicate: 1=> antithetic variable, 0=> usual
                                    70  "     XR4	contains the address of the distribution subroutine for this call
                                    71  "     XR5	index into return array for the next random number
                                    72  "     XR6	count of the number of values to be generated after current one
                                    73  "     XR7	general purpose register
                                    74  "
                                    75  "     A-reg distribution routine uses to return floating point value
                                    76  "     Q-reg always has the seed used by primitive generator
                                    77  "
                                    78  "     BP	pointer to base of return arguments
                                    79  "     AP	pointer to the seed
                                    80  "
                                    81  " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
                                    82  
                                    83  
                                    84  
                                    85  
                                    86  "
                                    87  "	call random_$set_seed(seed);
                                    88  
                                    89  
    000000                          90  set_seed:
    000000  aa  0 00002 2361 20     91  	ldq	ap|2,*	qet new seed into Q-reg
    000001  9a  4 00010 7561 00     92  	stq	lp|internal_seed	save as new value of seed
    000002  0a   000063 7100 00     93  	tra	return	return to caller
                                    94  
                                    95  
                                    96  
                                    97  "
                                    98  "	call random_$get_seed(seed);
                                    99  
                                   100  
    000003                         101  get_seed:
    000003  9a  4 00010 2361 00    102  	ldq	lp|internal_seed	get current value of seed
    000004  aa  0 00002 7561 20    103  	stq	ap|2,*	return value to caller
    000005  0a   000063 7100 00    104  	tra	return	return to caller
                                   105  
                                   106  
                                   107  
                                   108  "
                                   109  "	call random_$uniform(seed,random_no);
                                   110  
                                   111  
    000006                         112  random_:
    000006                         113  uniform:
    000006  0a   000077 6240 00    114  	eax4	uniform_	set XR4 to the address of uniform distribution
    000007  0a   000044 7100 00    115  	tra	single	this entry generates a single random number
                                   116  
                                   117  
                                   118  
                                   119  "
                                   120  "	call random_$uniform_ant(seed,random_no);
                                   121  "		This entry gives negatively correlated value.
                                   122  
                                   123  
                                   124  
    000010                         125  uniform_ant:
    000010  0a   000105 6240 00    126  	eax4	uniform_ant_	set up the proper distribution
    000011  0a   000044 7100 00    127  	tra	single	this entry generates a single random number
                                   128  
                                   129  
                                   130  
                                   131  "
                                   132  "	call random_$uniform_seq(seed,array,array_size);
                                   133  "		This entry gives an array of return values
                                   134  
                                   135  
                                   136  
    000012                         137  uniform_seq:
    000012  0a   000077 6240 00    138  	eax4	uniform_	we generate sequence from uniform distribution
    000013  0a   000036 7100 00    139  	tra	sequence	this entry gives a sequence of numbers
                                   140  
                                   141  
                                   142  
                                   143  "
                                   144  "	call random_$uniform_ant_seq(seed,array,array_size);
                                   145  
                                   146  
    000014                         147  uniform_ant_seq:
    000014  0a   000105 6240 00    148  	eax4	uniform_ant_	negatively correlated generator
    000015  0a   000036 7100 00    149  	tra	sequence	this entry gives a sequence of numbers
                                   150  
                                   151  
                                   152  
                                   153  "
                                   154  "	call random_$normal(seed,random_no);
                                   155  
                                   156  
    000016                         157  normal:
    000016  0a   000137 6240 00    158  	eax4	normal_	normal distribution
    000017  aa   000000 6230 00    159  	eax3	0	not negatively correlated value
    000020  0a   000044 7100 00    160  	tra	single	this entry gives a single number
                                   161  
                                   162  
                                   163  
                                   164  "
                                   165  "	call random_$normal_ant(seed,random_no);
                                   166  
                                   167  
    000021                         168  normal_ant:
    000021  0a   000137 6240 00    169  	eax4	normal_	normal distribution
    000022  aa   000001 6230 00    170  	eax3	1	negatively correlated
    000023  0a   000044 7100 00    171  	tra	single	this entry gives single number
                                   172  
                                   173  
                                   174  
                                   175  "
                                   176  "	call random_$normal_seq(seed,array,array_size);
                                   177  
                                   178  
                                   179  
    000024                         180  normal_seq:
    000024  0a   000137 6240 00    181  	eax4	normal_	normal distribution
    000025  aa   000000 6230 00    182  	eax3	0	not negatively correlated value
    000026  0a   000036 7100 00    183  	tra	sequence	this entry gives a sequence of numbers
                                   184  
                                   185  
                                   186  
                                   187  "
                                   188  "	call random_$normal_ant_seq(seed,array,array_size);
                                   189  
                                   190  
    000027                         191  normal_ant_seq:
    000027  0a   000137 6240 00    192  	eax4	normal_	normal distribution
    000030  aa   000001 6230 00    193  	eax3	1	negatively correlated
    000031  0a   000036 7100 00    194  	tra	sequence	this entry gives a sequence of numbers
                                   195  
                                   196  
                                   197  
                                   198  "
                                   199  "	call random_$exponential(seed,random_no);
                                   200  
                                   201  
    000032                         202  exponential:
    000032  0a   000114 6240 00    203  	eax4	exponential_	exponential distribution
    000033  0a   000044 7100 00    204  	tra	single	this entry gives a single value
                                   205  
                                   206  
                                   207  
                                   208  "
                                   209  "	call random_$exponential_seq(seed,array,array_size);
                                   210  
                                   211  
    000034                         212  exponential_seq:
    000034  0a   000114 6240 00    213  	eax4	exponential_	exponential distribution
    000035  0a   000036 7100 00    214  	tra	sequence	this entry gives a sequence of numbers
                                   215  
                                   216  
                                   217  
                                   218  "!!!!!!!!!!--set up the number of values to be generated--!!!!!!!!!!
                                   219  
                                   220  
    000036                         221  sequence:
    000036  aa  0 00000 2271 00    222  	ldx7	ap|0	twice number of arguments in XR7
    000037  aa  0 00000 7261 37    223  	lxl6	ap|0,7*	length of sequence to XR6
    000040  aa   777776 6270 17    224  	eax7	-2,7	subtract two from XR7
    000041  aa   777777 6260 16    225  	eax6	-1,6	decrement by one
    000042  0a   000046 6050 00    226  	tpl	common	if positive value, use it
    000043  0a   000063 7100 00    227  	tra	return	if zero or negative, return
                                   228  
    000044                         229  single:
    000044  aa  0 00000 2271 00    230  	ldx7	ap|0	twice number of arguments in XR7
    000045  aa   000000 6260 00    231  	eax6	0	use sequence of length one
                                   232  
    000046                         233  common:
    000046  aa  0 00000 3521 37    234  	eppbp	ap|0,7*	set bp to point to first return value
    000047  aa   000000 6250 00    235  	eax5	0	index into array is in XR5
    000050  aa   777776 6350 17    236  	eaa	-2,7	upper A-reg has offset of seed in arglist
    000051  aa   000023 7310 00    237  	ars	19	should be one or zero in A-reg
    000052  0a   000064 7160 05    238  	xec	set_ap,al	set ap to point to the seed
    000053  aa  0 00000 2341 00    239  	szn	ap|0	test for a seed of zero
    000054  0a   000056 6010 00    240  	tnz	loop	if non-zero continue
    000055  0a   000075 6240 00    241  	eax4	zero_arg	if zero, generate zero return values
                                   242  
    000056                         243  loop:
    000056  aa   000000 7000 14    244  	tsx0	0,4	go to appropriate generator
    000057  aa  2 00000 4551 15    245  	fst	bp|0,5	store value returned by generator
    000060  aa   000001 6250 15    246  	eax5	1,5	increment index into array
    000061  aa   777777 6260 16    247  	eax6	-1,6	decrement count of remaining
    000062  0a   000056 6050 00    248  	tpl	loop	if not done, loop again
                                   249  
    000063                         250  return:
    000063  aa  7 00044 7101 20    251  	short_return
                                   252  
                                   253  
                                   254  
    000064                         255  set_ap:		"get pointer to seed--from caller or default
    000064  9a  4 00010 3501 00    256  	eppap	lp|internal_seed	use internal value if not provided in call
    000065  aa  0 00002 3501 20    257  	eppap	ap|2,*	seed is the first argument if provided
                                   258  
                                   259  
                                   260  
                                   261  
                                   262  "$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
                                   263  "$	This is the primitive that actually generates the
                                   264  "$	random number in integer form from the seed.
                                   265  "$
                                   266  "$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
                                   267  
                                   268  
                                   269  
    000066                         270  generate:
    000066  aa  0 00000 2361 00    271  	ldq	ap|0	load seed into Q-reg
    000067  aa   000013 7720 00    272  	qrl	shift	shift right the seed
    000070  aa  0 00000 6561 00    273  	ersq	ap|0	exclusive or to the seed
    000071  aa  0 00000 2361 00    274  	ldq	ap|0	put same value in Q-reg
    000072  aa   000031 7360 00    275  	qls	size-shift	shift the result left
    000073  aa  0 00000 6561 00    276  	ersq	ap|0	exclusive or to previous result
    000074  aa   000000 7100 11    277  	tra	0,1	return to the caller of primitive
                                   278  
                                   279  
                                   280  
                                   281  
                                   282  "!!!!!!!!!!--zero argument generator--!!!!!!!!!!
                                   283  
    000075                         284  zero_arg:		"used if input seed is zero
    000075  aa   400000 4310 03    285  	fld	=0.,du	load a floating point zero
    000076  aa   000000 7100 10    286  	tra	0,0	return
                                   287  
                                   288  
                                   289  
                                   290  
                                   291  "!!!!!!!!!!--uniform generator--!!!!!!!!!!
                                   292  
    000077                         293  uniform_:
    000077  0a   000066 7010 00    294  	tsx1	generate	generate one random number
    000100  aa  0 00000 2351 00    295  	lda	ap|0	load A-reg with integer value
    000101  aa   000001 7710 00    296  	arl	1	make it a positive number
    000102  aa   000000 4110 03    297  	lde	expon,du	convert to floating point
    000103  aa   400000 4750 03    298  	fad	=0.,du	normalize
    000104  aa   000000 7100 10    299  	tra	0,0	return
                                   300  
                                   301  
    000105                         302  uniform_ant_:
    000105  0a   000066 7010 00    303  	tsx1	generate	generate one random number
    000106  aa  0 00000 2351 00    304  	lda	ap|0	load integer value into A-reg
    000107  aa   000001 7710 00    305  	arl	1	make it a positive number
    000110  aa   000000 4110 03    306  	lde	expon,du	convert to floating point
    000111  aa   000000 5130 00    307  	fneg		"take negative value
    000112  aa   002400 4750 03    308  	fad	=1.,du	normalize
    000113  aa   000000 7100 10    309  	tra	0,0	return
                                   310  
                                   311  
                                   312  
                                   313  
                                   314  "!!!!!!!!!!--exponential generator--!!!!!!!!!!
                                   315  
    000114                         316  exponential_:
    000114  aa   777777 6270 00    317  	eax7	-1	count number of 'runs' with XR7
    000115                         318  outer:
    000115  aa   000001 6270 17    319  	eax7	1,7	add one to count of 'runs'
    000116  aa   000001 6220 00    320  	eax2	1	use as counter of 'run' length
                                   321  			"initialize XR2 with a count of one
    000117  0a   000066 7010 00    322  	tsx1	generate	go to primitive generator
    000120  aa  0 00000 2351 00    323  	lda	ap|0	get seed in A-reg
    000121  aa   000001 7710 00    324  	arl	1	make it a positive number
    000122  aa   000000 4110 03    325  	lde	expon,du	convert to floating point
    000123  aa  2 00000 4551 15    326  	fst	bp|0,5	store it temporarily in return value
    000124                         327  inner:
    000124  aa  0 00000 2351 00    328  	lda	ap|0	keep value in A-reg for comparison
    000125  0a   000066 7010 00    329  	tsx1	generate	generate another value
    000126  aa   000001 6220 12    330  	eax2	1,2	add one to count of 'run'length
    000127  aa  0 00000 1151 00    331  	cmpa	ap|0	compare last number with new one
    000130  0a   000124 6030 00    332  	trc	inner	if still a run down,loop again
    000131  aa   000001 3620 03    333  	anx2	=1,du	check if 'run' has even length
    000132  0a   000115 6010 00    334  	tnz	outer	if not even, get another run
    000133  aa   000000 6350 17    335  	eaa	0,7	no of runs before even length
    000134  aa   042000 4110 03    336  	lde	=17b25,du	convert to floating point
    000135  aa  2 00000 4751 15    337  	fad	bp|0,5	add first random number to number of 'runs'
    000136  aa   000000 7100 10    338  	tra 	0,0	return
                                   339  
                                   340  
                                   341  
                                   342  
                                   343  "!!!!!!!!!!--normal distribution generator--!!!!!!!!!!
                                   344  
    000137                         345  normal_:
    000137  aa   400000 4310 03    346  	fld	=0.,du	load a zero
    000140  aa   000014 6220 00    347  	eax2	12	use XR2 to count 12 times thru loop
    000141                         348  n_loop:
    000141  aa  2 00000 4551 15    349  	fst	bp|0,5	store the new sum
    000142  0a   000066 7010 00    350  	tsx1	generate	generate the next random number
    000143  aa  0 00000 2351 00    351  	lda	ap|0	load seed into A-reg
    000144  aa   000001 7710 00    352  	arl	1	make it a positive number
    000145  aa   000000 4110 03    353  	lde	expon,du	convert to floating point
    000146  aa  2 00000 4751 15    354  	fad	bp|0,5	add random number to sum
    000147  aa   777777 6220 12    355  	eax2	-1,2	decrement counter by one
    000150  0a   000141 6010 00    356  	tnz	n_loop	accumulate twelve numbers
    000151  aa   006600 5750 03    357  	fsb	=6.,du	give a mean of zero
    000152  0a   000154 7160 13    358  	xec	n_norm,3	antithetic if appropriate
    000153  aa   000000 7100 10    359  	tra	0,0	return
                                   360  
    000154                         361  n_norm:
    000154  aa   000000 0110 00    362  	nop	"o.k. as is if not antithetic
    000155  aa   000000 5130 00    363  	fneg	"take negative for antithetic
                                   364  
                                   365  
                                   366  
                                   367  
                                   368  
                                   369  "
                                   370  "	INTERNAL STATIC DATA
                                   371  "
                                   372  
                                   373  	use	.lkstat.
                                   374  	join	/link/.lkstat.
                                   375  
    000010                         376  internal_seed:
    000010  aa   036333 521620     377  	dec	4084114320	"initial internal seed for a new process
                                   378  
                                   379  	use	main
                                   380  
                                   381  
                                   382  	end
ENTRY SEQUENCES
     
    000156  5a   000120 0000 00
    000157  aa  7 00046 2721 20
    000160  0a   000000 7100 00
    000161  5a   000112 0000 00
    000162  aa  7 00046 2721 20
    000163  0a   000003 7100 00
    000164  5a   000105 0000 00
    000165  aa  7 00046 2721 20
    000166  0a   000006 7100 00
    000167  5a   000100 0000 00
    000170  aa  7 00046 2721 20
    000171  0a   000006 7100 00
    000172  5a   000072 0000 00
    000173  aa  7 00046 2721 20
    000174  0a   000010 7100 00
    000175  5a   000064 0000 00
    000176  aa  7 00046 2721 20
    000177  0a   000012 7100 00
    000200  5a   000055 0000 00
    000201  aa  7 00046 2721 20
    000202  0a   000014 7100 00
    000203  5a   000050 0000 00
    000204  aa  7 00046 2721 20
    000205  0a   000016 7100 00
    000206  5a   000042 0000 00
    000207  aa  7 00046 2721 20
    000210  0a   000021 7100 00
    000211  5a   000034 0000 00
    000212  aa  7 00046 2721 20
    000213  0a   000024 7100 00
    000214  5a   000025 0000 00
    000215  aa  7 00046 2721 20
    000216  0a   000027 7100 00
    000217  5a   000017 0000 00
    000220  aa  7 00046 2721 20
    000221  0a   000032 7100 00
    000222  5a   000010 0000 00
    000223  aa  7 00046 2721 20
    000224  0a   000034 7100 00

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000226  5a   000003 000000 
    000227  5a   000135 600000 
    000230  aa   000000 000000 
    000231  55   000010 000002 
    000232  5a   000002 400003 
    000233  55   000006 000010 
    000234  aa  007 162 141 156
    000235  aa  144 157 155 137
    000236  55   000017 000003 
    000237  0a   000223 500000 
    000240  55   000013 000003 
    000241  aa  017 145 170 160         exponential_seq
    000242  aa  157 156 145 156
    000243  aa  164 151 141 154
    000244  aa  137 163 145 161
    000245  55   000025 000010 
    000246  0a   000220 500000 
    000247  55   000022 000003 
    000250  aa  013 145 170 160         exponential
    000251  aa  157 156 145 156
    000252  aa  164 151 141 154
    000253  55   000034 000017 
    000254  0a   000215 500000 
    000255  55   000030 000003 
    000256  aa  016 156 157 162         normal_ant_seq
    000257  aa  155 141 154 137
    000260  aa  141 156 164 137
    000261  aa  163 145 161 000
    000262  55   000042 000025 
    000263  0a   000212 500000 
    000264  55   000037 000003 
    000265  aa  012 156 157 162         normal_seq
    000266  aa  155 141 154 137
    000267  aa  163 145 161 000
    000270  55   000050 000034 
    000271  0a   000207 500000 
    000272  55   000045 000003 
    000273  aa  012 156 157 162         normal_ant
    000274  aa  155 141 154 137
    000275  aa  141 156 164 000
    000276  55   000055 000042 
    000277  0a   000204 500000 
    000300  55   000053 000003 
    000301  aa  006 156 157 162         normal
    000302  aa  155 141 154 000
    000303  55   000064 000050 
    000304  0a   000201 500000 
    000305  55   000060 000003 
    000306  aa  017 165 156 151         uniform_ant_seq
    000307  aa  146 157 162 155
    000310  aa  137 141 156 164
    000311  aa  137 163 145 161
    000312  55   000072 000055 
    000313  0a   000176 500000 
    000314  55   000067 000003 
    000315  aa  013 165 156 151         uniform_seq
    000316  aa  146 157 162 155
    000317  aa  137 163 145 161
    000320  55   000100 000064 
    000321  0a   000173 500000 
    000322  55   000075 000003 
    000323  aa  013 165 156 151         uniform_ant
    000324  aa  146 157 162 155
    000325  aa  137 141 156 164
    000326  55   000105 000072 
    000327  0a   000170 500000 
    000330  55   000103 000003 
    000331  aa  007 165 156 151         uniform
    000332  aa  146 157 162 155
    000333  55   000112 000100 
    000334  0a   000165 500000 
    000335  55   000110 000003 
    000336  aa  007 162 141 156         random_
    000337  aa  144 157 155 137
    000340  55   000120 000105 
    000341  0a   000162 500000 
    000342  55   000115 000003 
    000343  aa  010 147 145 164         get_seed
    000344  aa  137 163 145 145
    000345  aa  144 000 000 000
    000346  55   000126 000112 
    000347  0a   000157 500000 
    000350  55   000123 000003 
    000351  aa  010 163 145 164         set_seed
    000352  aa  137 163 145 145
    000353  aa  144 000 000 000
    000354  55   000002 000120 
    000355  6a   000000 400002 
    000356  55   000131 000003 
    000357  aa  014 163 171 155         symbol_table
    000360  aa  142 157 154 137
    000361  aa  164 141 142 154
    000362  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000363  aa   000000 000033 
    000364  aa   000000 000000 
    000365  5a   000017 000000 
    000366  5a   000112 000000 
    000367  aa   000000 000000 
    000370  aa   000000 000000 
    000371  aa   000000 000000 
    000372  aa   000000 000000 
    000373  aa   000000 000000 
    000374  aa   000000 000000 
    000375  aa   000000 000000 
    000376  5a   000126 000000 
    000377  aa   000000 000000 
    000400  5a   000105 000000 
    000401  aa   000000 000000 
    000402  5a   000120 000000 
    000403  aa   000000 000000 
    000404  5a   000055 000000 
    000405  aa   000000 000000 
    000406  5a   000025 000000 
    000407  aa   000000 000000 
    000410  5a   000064 000000 
    000411  5a   000072 000000 
    000412  5a   000034 000000 
    000413  5a   000042 000000 
    000414  5a   000010 000000 
    000415  5a   000100 000000 
    000416  5a   000050 000000 

NO EXTERNAL NAMES

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000417  aa   000001 000000 
    000420  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    000421  aa   000000 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000226 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000012 000012 
    000007  a2   000000 000002 
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000004 
    000004  aa   000000 112143 
    000005  aa   305203 523135 
    000006  aa   000000 112162 
    000007  aa   425700 655616 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000134 
    000020  aa   000000 000101 
    000021  aa   000000 000123 
    000022  aa   000126 000101 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   040066 056066 
    000030  aa   040040 116157 
    000031  aa   166145 155142 
    000032  aa   145162 040061 
    000033  aa   071070 062040 
    000034  aa   107112 157150 
    000035  aa   156163 157156 
    000036  aa   056123 171163 
    000037  aa   115141 151156 
    000040  aa   164056 155040 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   154151 163164 
    000045  aa   040040 040040 
    000046  aa   040040 040040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040040 040040 
    000057  aa   040040 040040 
    000060  aa   040040 040040 
    000061  aa   040040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000001 
    000066  aa   000072 000033 
    000067  aa   121622 264430 
    000070  aa   000000 112162 
    000071  aa   262356 200000 
    000072  aa   076163 160145          >spec>on>pl128d>random_.alm
    000073  aa   143076 157156 
    000074  aa   076160 154061 
    000075  aa   062070 144076 
    000076  aa   162141 156144 
    000077  aa   157155 137056 
    000100  aa   141154 155040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

          10    .lkstat.                 random_:      373,  374.
          46    common                   random_:      226,  233.
           0    expon                    random_:       59,  297,  306,  325,  353.
          32    exponential              random_:       53,  202.
         114    exponential_             random_:      203,  213,  316.
          34    exponential_seq          random_:       54,  212.
          66    generate                 random_:      270,  294,  303,  322,  329,  350.
           3    get_seed                 random_:       43,  101.
         124    inner                    random_:      327,  332.
          10    internal_seed            random_:       92,  102,  256,  376.
          56    loop                     random_:      240,  243,  248.
         156    main                     random_:      379.
          16    normal                   random_:       49,  157.
         137    normal_                  random_:      158,  169,  181,  192,  345.
          21    normal_ant               random_:       50,  168.
          27    normal_ant_seq           random_:       52,  191.
          24    normal_seq               random_:       51,  180.
         141    n_loop                   random_:      348,  356.
         154    n_norm                   random_:      358,  361.
         115    outer                    random_:      318,  334.
           6    random_                  random_:       44,  112.
          63    return                   random_:       93,  104,  227,  250.
          36    sequence                 random_:      139,  149,  183,  194,  214,  221.
          64    set_ap                   random_:      238,  255.
           0    set_seed                 random_:       42,   90.
          13    shift                    random_:       57,  272,  275.
          44    single                   random_:      115,  127,  160,  171,  204,  229.
          44    size                     random_:       58,  275.
           6    uniform                  random_:       45,  113.
          77    uniform_                 random_:      114,  138,  293.
          10    uniform_ant              random_:       46,  125.
         105    uniform_ant_             random_:      126,  148,  302.
          14    uniform_ant_seq          random_:       48,  147.
          12    uniform_seq              random_:       47,  137.
          75    zero_arg                 random_:      241,  284.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
