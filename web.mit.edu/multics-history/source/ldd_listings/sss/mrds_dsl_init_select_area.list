	COMPILATION LISTING OF SEGMENT mrds_dsl_init_select_area
	Compiled by: Multics PL/I Compiler, Release 30, of February 16, 1988
	Compiled at: Honeywell Bull, Phoenix AZ, SysM
	Compiled on: 08/01/88  1326.0 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   *                                                         *
        4*   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        5*   *                                                         *
        6*   *                                                         *
        7*   *********************************************************** */
        8 
        9 /* ******************************************************
       10*   *                                                    *
       11*   *                                                    *
       12*   * Copyright (c) 1972 by Massachusetts Institute of   *
       13*   * Technology and Honeywell Information Systems, Inc. *
       14*   *                                                    *
       15*   *                                                    *
       16*   ****************************************************** */
       17 
       18 mrds_dsl_init_select_area: proc (dbcbp, code);
       19 	dcl     dbcbp		 ptr parm;	/* ptr to the dbcb (INPUT) */
       20 	dcl     code		 fixed bin (35) parm; /* error code (OUTPUT) */
       21 
       22 /* NOTES:
       23*   This procedure initializes the area used for all selection expression allocations.
       24*   */
       25 
       26 /* HISTORY:
       27*   Originally written by Al Kepner, June 1, 1979.
       28*
       29*   82-12-09 Davids: changed the area to a freeing area so that the
       30*   page_file relation manager will work. It should be changed back
       31*   to a freeing area on Jan 15, 1983.
       32*
       33*   83-04-04 Davids: Explicit declaration of the builtin functions null, 
       34*   pointer, and rel.
       35*
       36*   83-04-04 Davids: Changed the area back to non-freeing
       37*
       38*   83-05-04 Mike Kubicar : Changed the area back to freeing (temporarily)
       39*
       40*   84-09-05 John Hergert: removed call to hcs_$truncate_seg for 
       41*   performance improvement. Also took out 2nd parameter 'select_area_ptr'
       42*   since it is already in the dbcb. No point in passing it in twice.
       43*
       44**/
       45 	dbcb_ptr = dbcbp;
       46 	select_area_ptr = dbcb.select_area_ptr;
       47 
       48 	code = 0;
       49 	call mu_define_area (select_area_ptr, size (model_area), "MRDS.select",
       50 	     "0"b /* not extensible */, "0"b /* no freeing */, "0"b, "0"b /* no zeroing */, icode);
       51 	if icode ^= 0 then call error (icode);
       52 	allocate select_area_struct in (select_area);	/* Allocations in select_area are never freed.  This area
       53*						   is reinitialized at the beginning
       54*						   of each new selection expression. */
       55 	model_seg_ptr = pointer (select_area_ptr, 0);
       56 	model_seg.struct_offset = rel (select_area_struct_ptr);
       57 	select_area_struct.version = 1;
       58 	select_area_struct.dbcb_ptr = dbcb_ptr;
       59 exit:	;
       60 	return;
       61 
       62 error: proc (icode);
       63 	dcl     icode		 fixed bin (35) parm;
       64 	code = icode;
       65 	go to exit;
       66      end error;
       67 
       68 /* VARIABLES FOR MRDS_DSL_INIT_SELECT_AREA */
       69 
       70 	dcl     hcs_$truncate_seg	 entry (ptr, fixed bin (18), fixed bin (35));
       71 	dcl     icode		 fixed bin (35);
       72 	dcl     sys_info$max_seg_size	 fixed bin (35) ext;
       73 	declare mu_define_area	 entry (ptr, fixed bin (18), char (11),
       74 				 bit (1) aligned, bit (1) aligned, bit (1) aligned, bit (1) aligned, fixed bin (35));
       75 	dcl     (null, pointer, rel)	 builtin;
       76 
  1     1 /* BEGIN INCLUDE FILE mdbm_seg_area.incl.pl1 - - Jim Gray 2/19/79 */
  1     2 
  1     3 /* these structures provide a standard for
  1     4*   1) using an entire segment as an area, managed by the area manager
  1     5*   2) a constant header, that has an offset to the major common structure in the area
  1     6*   the pointer to that structure is obtained via pointer(model_seg_ptr, model_seg.offset)
  1     7*   the model_area_ptr is obtained via pointer(model_seg_ptr, size(model_seg)) */
  1     8 
  1     9 declare 1 model_seg aligned based (model_seg_ptr),	/* segment header, not to be changed */
  1    10         2 struct_offset bit (18),			/* offset to major structure allocated in area */
  1    11         2 padding (3) fixed bin ;			/* to set up four word boundary */
  1    12 
  1    13 declare  model_seg_ptr ptr int automatic init (null ());
  1    14 
  1    15 
  1    16 declare  model_area area (sys_info$max_seg_size - size (model_seg)) based (model_area_ptr) ; /* segment area */
  1    17 
  1    18 declare  model_area_ptr ptr int automatic init (null ());
  1    19 
  1    20 dcl size builtin;
  1    21 
  1    22 /* END INCLUDE FILE mdbm_seg_area.incl.pl1 */
  1    23 
       77 
       78 
  2     1 /* BEGIN INCLUDE FILE mrds_select_area.incl.pl1   (Kepner Multics)  05/29/79 1736.1 mst Tue */
  2     2 dcl 1 select_area_struct aligned based (select_area_struct_ptr), /* major structure in segment for current selection expression allocations */
  2     3     2 version fixed bin,
  2     4     2 dbcb_ptr ptr;					/* ptr ptr to dbcb */
  2     5 
  2     6 dcl  select_area_struct_ptr ptr int automatic init (null ());
  2     7 
  2     8 dcl  select_area area (sys_info$max_seg_size - size(model_seg)) based (select_area_ptr);
  2     9 
  2    10 dcl  select_area_ptr ptr int automatic init (null ());
  2    11 						/*   END INCLUDE FILE mrds_select_area.incl.pl1 */
  2    12 
       79 
       80 
  3     1 /* BEGIN mrds_dbcb.incl.pl1 -- jaw, 11/7/78 */
  3     2 
  3     3 
  3     4 
  3     5 /****^  HISTORY COMMENTS:
  3     6*  1) change(85-11-17,Dupuis), approve(85-12-16,MCR7314),
  3     7*     audit(86-02-04,Brunelle), install(86-02-05,MR12.0-1013):
  3     8*     This entry is being made to cover the change made on 85-07-01 by Thanh
  3     9*     Nguyen. The scopes_changed flag was added to make checking for this
  3    10*     more efficient (mrds error list #137).
  3    11*  2) change(86-06-10,Blair), approve(86-08-07,MCR7491),
  3    12*     audit(86-08-07,Gilcrease), install(86-08-15,MR12.0-1127):
  3    13*     Add a bit called dont_check_txn_id to indicate whether or not we should
  3    14*     care if multiple txns use the same selection_expression. (mrds #156)
  3    15*  3) change(87-11-23,Hergert), approve(88-06-28,MCR7903),
  3    16*     audit(88-06-28,Dupuis), install(88-08-01,MR12.2-1073):
  3    17*     Added parser_work_area_ptr and mrds_se_info_ptr for new parser.
  3    18*                                                   END HISTORY COMMENTS */
  3    19 
  3    20 
  3    21 /* WARNING
  3    22*          If the dbcb structure is changed then the mrds_data_
  3    23*          item saved_res_version MUST be incremented to invalidate all
  3    24*          existing saved resultants
  3    25**/
  3    26 
  3    27 /* HISTORY :
  3    28*
  3    29*   modified by Jim Gray - - 80-10-24, to add new_select_expr bit for
  3    30*   tid_list management
  3    31*
  3    32*   81-1-9 Jim Gray : added like reference for  ease  in  making  the
  3    33*   phony resultant in mu_database_index, without having the area dcl
  3    34*   included.
  3    35*
  3    36*   81-06-17 Roger Lackey :  added  last_store_rel_name  for  use  by
  3    37*   mrds_dsl_store
  3    38*
  3    39*   81-06-26 Roger Lackey : Added no_optimize and  print_search_order
  3    40*   switches
  3    41*
  3    42*   81-07-06 Jim Gray : added identifier for  the  current  selection
  3    43*   expression,  so  that relation statistics can be updated relative
  3    44*   to number of selection expressions seem. Also  removed  init  for
  3    45*   last_store_rel_name,   as   this   iw   now   properly   done  in
  3    46*   mrds_dsl_init_res.
  3    47*
  3    48*   81-07-17  Roger Lackey : added pred_ptr and unused_ptrs.
  3    49*
  3    50*   82-08-19  Mike Kubicar : added store_vector field.  This is needed
  3    51*   for the conversion to the relation manager.
  3    52*
  3    53*   82-08-23 Davids: added the relmgr_entries and access_costs
  3    54*   substructures so that the entries and costs can change
  3    55*   depending on the type of database that is opened.
  3    56*
  3    57*   82-09-09 Mike Kubicar : added modify_vector field.  This is needed
  3    58*   since modify uses a different vector type (general) than does store.
  3    59*
  3    60*   82-09-20 Davids: changed names of (store modify)_vector to
  3    61*   (store modify)_vector_ptr. Also (delete modify)_tuple_by_id to
  3    62*   (delete modify)_tuples_by_id. added the element cursor_storage_ptr
  3    63*   which should be inited to null and will be set by mu_cursor_manager_$get
  3    64*   during the first call.
  3    65*
  3    66*   82-09-21 Davids: renamed cursor_storage_ptr to cursor_ptrs_storage_ptr
  3    67*   since it deals with the pointers to the cursors and not the cursors
  3    68*   themelves and added the element cursor_storage_area_ptr which points
  3    69*   to the area where the cursors are kept.
  3    70*
  3    71*   82-09-22 Davids: renamed the transact_ctl_seg to transactions_needed.
  3    72*   the transact_ctl_seg always had a value of 0 and really didn't mean
  3    73*   anything.
  3    74*
  3    75*   82-09-22 Mike Kubicar : added create_relation, create_index and
  3    76*   destroy_relation_by_opening to relmgr_entries.  They are needed
  3    77*   by mrds_dsl_define_temp_rel.
  3    78*
  3    79*   82-09-24 Donna Woodka : added  put_tuple to  relmgr_entries. It
  3    80*   is needed by mu_store.
  3    81*
  3    82*   82-11-12 Davids: changed the declaration of the access_costs from fixed
  3    83*   bin to float bin since the values are not integers.
  3    84*
  3    85*   83-02-02 Davids: added the dbc_uid element. This will allow mrds to make
  3    86*   sure that the dbc_ptr still points to the correct segment. Element was 
  3    87*   added to the end of the structure to allow modules that don't use
  3    88*   the element to continue to reference the dbcb structure without recompiling.
  3    89*
  3    90*   83-02-25 Davids: added the concurrency_on and rollback_on elements. These
  3    91*   are needed so that temp rels can be created with the same file attributes
  3    92*   as the permanent relations.
  3    93*
  3    94*   83-05-02 Mike Kubicar : Deleted get_next_search_specification_ptr and
  3    95*   added the resultant_in_pdir bit.
  3    96*
  3    97*   83-05-18 Davids: reduced the number of reserved bits to 14 (from 15) and
  3    98*   added the res_already_made element.
  3    99*
  3   100*   83-05-24 Mike Kubicar : Updated the relation manager calling sequences.
  3   101*
  3   102*   83-08-03 Mike Kubicar : Added the element_id_list_segment_ptr and removed
  3   103*   one of the unused pointers.
  3   104*
  3   105*   83-09-20 Ron Harvey: Added relmgr_entries.get_population.
  3   106*
  3   107*   84-08-27 John Hergert:  Created compiled_se_info_ptr from unused_ptrs(2)
  3   108*   leaving unused_ptrs(1).
  3   109*
  3   110*   85-01-15 Thanh Nguyen:  Added the work_area_ptr and removed the last
  3   111*   unused_ptrs (1).
  3   112*
  3   113*   85-04-12 Thanh Nguyen:  Added user_started_transaction and 
  3   114*   non_shared_to_shared flags.  Also added se_transaction_id and some more
  3   115*   spare ptrs, entries and reserved storages for future enhancement, since
  3   116*   we changed the saved_res_version from rslt0001 to rslt0002.
  3   117*
  3   118*   85-07-01 Thanh Nguyen:  Added scopes_changed flag.  This flag is set by
  3   119*   common routine of mrds_dsl_set_scope, reset by mrds_dsl_optimize and 
  3   120*   mrds_dsl_gen_srch_prog when building of a new search_vars.
  3   121**/
  3   122 
  3   123 
  3   124 /* this structure is based on the {unique_name}.mrds.dbcb segment
  3   125*   that constitutes the non-secure portion of the resultant model that is
  3   126*   created during the opening of a database. it contains variables that
  3   127*   are used during the runtime access of the database, and an area
  3   128*   for evaluation of requests. it points to four other
  3   129*   segments in the resultant model, {unique_name}.mrds.rdbi, the secure
  3   130*   portion of the resultant(see mdbm_rm_db_info.incl.pl1),
  3   131*   {unique_name}.mrds.select, an area for selection expression evaluation,
  3   132*   {unique_name}.mrds.curdat, and {unique_name}.mrds.stadat, two segments
  3   133*   used in the elimination of duplicate tuples during a retrieve.
  3   134*   the dbcb area holds the structure in mdbm_scope_info.incl.pl1
  3   135*   that is used when the database is using the file scope mechanism
  3   136*   for concurrency control over file readying. the segment overlayed via
  3   137*   mrds_dbc.incl.pl1 structure is pointed to and also handles concurrency control,
  3   138*   across database openings. the pointer to this dbcb structure is kept in a table
  3   139*   which associates database indexes(returned from a call to dsl_$open), with particular
  3   140*   opening instances of resultant models. (see mu_database_index routine) */
  3   141 
  3   142      dcl	   1 dbcb		      aligned based (dbcb_ptr), /* DBCB -- non-secure portion */
  3   143 	     2 data	      like dbcb_data,
  3   144 	     2 static_area	      area (sys_info$max_seg_size - fixed (rel (addr (dbcb.static_area))));
  3   145 
  3   146      dcl	   dbcb_ptr	      ptr;
  3   147 
  3   148      declare 1 dbcb_data	      based,		/* info part of dbcb, separated out so that
  3   149*						   like references can avoid getting the area declaration */
  3   150 	     2 rdbi_ptr	      ptr,		/* pointer to write protected mdbm_util_ info. */
  3   151 	     2 range_ptr	      ptr,		/*  ptr to range structure, or null */
  3   152 	     2 select_ptr	      ptr,		/* ptr to select list, or null */
  3   153 	     2 sv_ptr	      ptr,		/* pointer to search variables */
  3   154 	     2 so_ptr	      ptr,		/* pointer to search operators */
  3   155 	     2 ti_ptr	      ptr,		/* pointer to tuple info */
  3   156 	     2 lit_ptr	      ptr,		/* pointer to the literal area, or null */
  3   157 	     2 current_ptr	      ptr,		/* ptr to select list resulting from -current clause */
  3   158 	     2 ss_ptr	      ptr,		/* ptr to select sets block if not simple s.e. */
  3   159 	     2 retr_info_ptr      ptr,		/* ptr to retrieve info area */
  3   160 	     2 trel_info_ptr      ptr,		/* ptr to retrieve info area */
  3   161 	     2 sti_ptr	      ptr,		/* pointer to store info */
  3   162 	     2 dbc_ptr	      ptr,		/*  pointer to the data base control segment */
  3   163 	     2 sfi_ptr	      ptr,		/* points to head of scalar function list */
  3   164 	     2 scope_ptr	      ptr,		/* points to array of scope tuples */
  3   165 	     2 select_area_ptr    ptr,		/* ptr to area for current selection expression allocations */
  3   166 	     2 current_data_ptr   ptr,		/* ptr to one of 2 segments used by mrds_dsl_retrieve
  3   167*						   for eliminating duplicate tuples. */
  3   168 	     2 static_data_ptr    ptr,		/* ptr to one of 2 segments used by mrds_dsl_retrieve
  3   169*						   for eliminating duplicate tuples. */
  3   170 	     2 store_area_ptr     ptr,		/* temp storage area for dsl_$store */
  3   171 	     2 retrieve_area_ptr  ptr,		/* temp storage for dsl_$retrieve */
  3   172 	     2 modify_area_ptr    ptr,		/* temp storage area for dsl_$modify */
  3   173 	     2 delete_area_ptr    ptr,		/* temp storage area for dsl_$delete */
  3   174 	     2 def_temp_rel_area_ptr ptr,		/* temp storage area for dsl_$define_temp_rel */
  3   175 	     2 pred_ptr	      ptr,		/* Pointer to pred_array */
  3   176 	     2 store_vector_ptr   ptr,		/* Vector structure used during store operations */
  3   177 	     2 modify_vector_ptr  ptr,		/* Used during modifies */
  3   178 	     2 element_id_list_segment_ptr ptr,		/* Points to the segment used to hold element_id_list structures */
  3   179                2 compiled_se_info_ptr ptr,                  /* points to the segment containing all info on compiled sexs */
  3   180 	     2 work_area_ptr        ptr,		/* Work area for encode/decode value allocations in mu_retrieve */
  3   181 	     2 se_info_ptr          ptr,                  /* Points to se_info struct. Primarily for error reports */
  3   182 	     2 parser_work_area_ptr ptr,		/*  work area for parser */
  3   183 	     2 reserved_ptrs      (4) ptr,		/* Reserved for future use */
  3   184 	     2 another_flag	      bit (1) unal,		/* on if predicate was -another */
  3   185 	     2 current_flag	      bit (1) unal,		/* on if predicate was -current clause */
  3   186 	     2 dbc_incr	      bit (1) unal,		/* on if dbc open mode has been incremented for this user */
  3   187 	     2 delete_flag	      bit (1) unal,		/* On if search was called from mrds_dsl_sec_delete */
  3   188 	     2 dup_retain	      bit (1) unaligned,	/* On if dup tuples allowed for retrieval */
  3   189 	     2 prev_select	      bit (1) unal,		/* on if prev. select block processed in this s.e. */
  3   190 	     2 possible_op	      bit (1) unal,		/* on of arith op. allowed */
  3   191 	     2 sel_clause	      bit (1) unal,		/* on if currently in select clause */
  3   192 	     2 dsm_sw	      bit (1) unal,		/* on if data base was opened via data submodel */
  3   193 	     2 val_rtrv	      bit (1) unal,		/* if s.e. valid for retrieve */
  3   194 	     2 val_mod	      bit (1) unal,		/* for modify */
  3   195 	     2 val_del	      bit (1) unal,		/* for delete */
  3   196 	     2 val_dtr	      bit (1) unal,		/* for define temp rel */
  3   197 	     2 transactions_needed bit (1) unal,	/* On => transaction must be started or in progress does
  3   198*                                                                     not imply that the database is of type page_file */
  3   199 	     2 open_mode	      bit (3) unal,		/* 0=>unknown, 1=>r, 2=>u, 3=>er, 4=>eu, >4=>bad */
  3   200 	     2 new_select_expr    bit (1) unal,		/* on => starting a new tid list management period */
  3   201 	     2 no_optimize	      bit (1) unal,		/* On => no optimize */
  3   202 	     2 print_search_order bit (1) unal,		/*  On => print the search order */
  3   203 	     2 resultant_in_pdir  bit (1) unal,		/* On => Temp segments are in the process dir */
  3   204 	     2 res_already_made   bit (1) unal,           /* On => resultant has been made based on a saved copy */
  3   205 	     2 user_started_transaction bit (1) unal,     /* On => user already started his own transaction. */
  3   206 	     2 non_shared_to_shared bit (1) unal,         /* On => user changed the scope from non shared to shared
  3   207*						   inside a sequence of -another selection expression. */
  3   208 	     2 scopes_changed     bit (1) unal,           /* On => scopes had been changed by set_scopes or delete_scopes */
  3   209 	     2 dont_check_txn_id  bit (1) unal,           /* On => cpmd needs same selection exp across multiple txns */
  3   210 	     2 reserved	      bit (10) unal,	/* reserved for future use */
  3   211 	     2 nseq_sch	      fixed bin (35),	/* no. tuples located via sequential search */
  3   212 	     2 nind_sch	      fixed bin (35),	/* no. tuples located via index search */
  3   213 	     2 nhash_sch	      fixed bin (35),	/* no. tuples located via hash search */
  3   214 	     2 nlk_sch	      fixed bin (35),	/* no tuples located via link search */
  3   215 	     2 cur_lit_offset     fixed bin (35),	/* current bit offset in literal string */
  3   216 	     2 dbi	      fixed bin (35),	/* database index for this opening */
  3   217 	     2 last_s_e_id_num    fixed bin (35),	/* identifying number for last selection expression seen */
  3   218 	     2 se_transaction_id  bit (36) aligned,       /* transaction id from beginning of select expression */
  3   219 	     2 last_store_rel_name char (32),		/* Name of relation last used  for store */
  3   220 	     2 cursor_ptrs_storage_ptr ptr,		/* pointer to space where cursor ptrs are stored */
  3   221 	     2 cursor_storage_area_ptr ptr,		/* pointer to area where the cursors are kept */
  3   222 	     2 reserved_words     (10) fixed bin (35),	/* Reserved for future use */
  3   223 	     2 relmgr_entries,			/* relation manager entries */
  3   224 	       3 open	      entry (char (*), char (*), bit (36) aligned, fixed bin (35)),
  3   225 	       3 close	      entry (bit (36) aligned, fixed bin (35)),
  3   226 	       3 create_cursor    entry (bit (36) aligned, ptr, ptr, fixed bin (35)),
  3   227 	       3 destroy_cursor   entry (ptr, ptr, fixed bin (35)),
  3   228 	       3 set_scope	      entry (bit (36) aligned, bit (2) aligned, bit (2) aligned, fixed bin (35)),
  3   229 	       3 delete_tuples_by_id entry (ptr, ptr, fixed bin (35), fixed bin (35)),
  3   230 	       3 modify_tuples_by_id entry (ptr, ptr, ptr, fixed bin (35), fixed bin (35)),
  3   231 	       3 get_tuple_by_id  entry (ptr, bit (36) aligned, ptr, ptr, ptr, fixed bin (35)),
  3   232 	       3 get_tuples_by_spec entry (ptr, ptr, ptr, ptr, ptr, fixed bin (35)),
  3   233 	       3 get_tuple_id     entry (ptr, ptr, ptr, ptr, fixed bin (35)),
  3   234 	       3 put_tuple	      entry (ptr, ptr, bit (36) aligned, fixed bin (35)),
  3   235 	       3 get_count	      entry (ptr, ptr, fixed bin (35), fixed bin (35)),
  3   236 	       3 get_duplicate_key_count entry (ptr, bit (36) aligned, fixed bin (17), fixed bin (35), fixed bin (35)),
  3   237 	       3 get_population   entry (ptr, fixed bin (35), fixed bin (35)),
  3   238 	       3 create_relation  entry (char (*), char (*), ptr, ptr, bit (36) aligned, bit (36) aligned, fixed bin (35)),
  3   239 	       3 create_index     entry (bit (36) aligned, ptr, bit (36) aligned, fixed bin (17), bit (36) aligned, fixed bin (35)),
  3   240 	       3 destroy_relation_by_path entry (char (*), char (*), fixed bin (35)),
  3   241 	       3 reserved_entries (5) entry (),
  3   242 	     2 access_costs,			/* access costs for permute */
  3   243 	       3 total_primary_key_cost float bin,
  3   244 	       3 access_cost      float bin,
  3   245 	       3 access_overhead  float bin,
  3   246 	       3 us_access_cost   float bin,
  3   247 	       3 os_access_cost   float bin,
  3   248 	     2 dbc_uid	      bit (36) aligned,	/* uid of the segment containing the dbc structure */
  3   249 	     2 concurrency_on     bit (1) unal,		/* "1"b implies dmfile concurrency is being used */
  3   250 	     2 rollback_on	      bit (1) unal;		/* "1"b iomplies before journaling is to be done */
  3   251 
  3   252 /* END mrds_dbcb.incl.pl1 */
  3   253 
  3   254 
       81 
       82      end mrds_dsl_init_select_area;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    08/01/88  1315.0  mrds_dsl_init_select_area.pl1     >special_ldd>install>MR12.2-1073>mrds_dsl_init_select_area.pl1
77           1    10/14/83  1608.6  mdbm_seg_area.incl.pl1            >ldd>include>mdbm_seg_area.incl.pl1
79           2    10/14/83  1608.6  mrds_select_area.incl.pl1         >ldd>include>mrds_select_area.incl.pl1
81           3    08/01/88  1300.0  mrds_dbcb.incl.pl1                >special_ldd>install>MR12.2-1073>mrds_dbcb.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
code                                   parameter       fixed bin(35,0)          dcl 20 set ref 18 48* 64*
data                                   based           structure                level 2 dcl 3-142
dbcb                                   based           structure                level 1 dcl 3-142
dbcb_data                              based           structure                level 1 unaligned dcl 3-148
dbcb_ptr                        000112 automatic       pointer                  dcl 3-146 in procedure "mrds_dsl_init_select_area"
                                                                                  set ref 45* 46 58
dbcb_ptr                  2            based           pointer                  level 2 in structure "select_area_struct" dcl 2-2
                                                                                  in procedure "mrds_dsl_init_select_area" set ref
                                                                                  58*
dbcbp                                  parameter       pointer                  dcl 19 ref 18 45
icode                           000100 automatic       fixed bin(35,0)          dcl 71 in procedure "mrds_dsl_init_select_area" set
                                                                                  ref 49* 51 51*
icode                                  parameter       fixed bin(35,0)          dcl 63 in procedure "error" ref 62 64
model_area                             based           area                     dcl 1-16 ref 49 49
model_area_ptr                  000104 automatic       pointer                  initial dcl 1-18 set ref 49 49 1-18*
model_seg                              based           structure                level 1 dcl 1-9 set ref 49 49
model_seg_ptr                   000102 automatic       pointer                  initial dcl 1-13 set ref 49 49 55* 56 1-13*
mu_define_area                  000012 constant        entry                    external dcl 73 ref 49
null                                                   builtin function         dcl 75 ref 1-13 1-18 2-6 2-10
pointer                                                builtin function         dcl 75 ref 55
rel                                                    builtin function         dcl 75 ref 56
select_area                            based           area                     dcl 2-8 ref 52
select_area_ptr          36            based           pointer                  level 3 in structure "dbcb" dcl 3-142 in procedure
                                                                                  "mrds_dsl_init_select_area" ref 46
select_area_ptr                 000110 automatic       pointer                  initial dcl 2-10 in procedure
                                                                                  "mrds_dsl_init_select_area" set ref 46* 49* 52 55
                                                                                  2-10*
select_area_struct                     based           structure                level 1 dcl 2-2 set ref 52
select_area_struct_ptr          000106 automatic       pointer                  initial dcl 2-6 set ref 52* 56 57 58 2-6*
size                                                   builtin function         dcl 1-20 ref 49 49 49 49
struct_offset                          based           bit(18)                  level 2 dcl 1-9 set ref 56*
sys_info$max_seg_size           000010 external static fixed bin(35,0)          dcl 72 ref 49 49
version                                based           fixed bin(17,0)          level 2 dcl 2-2 set ref 57*

NAME DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
hcs_$truncate_seg               000000 constant        entry                    external dcl 70

NAMES DECLARED BY EXPLICIT CONTEXT.
error                           000122 constant        entry                    internal dcl 62 ref 51
exit                            000120 constant        label                    dcl 59 ref 65
mrds_dsl_init_select_area       000013 constant        entry                    external dcl 18

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       206         222     134         216
Length       454     134        14         216      51           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
mrds_dsl_init_select_area           108 external procedure  is an external procedure.  
error                                   internal procedure  shares stack frame of external procedure mrds_dsl_init_select_area.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
mrds_dsl_init_select_area
                         000100 icode                       mrds_dsl_init_select_area
                         000102 model_seg_ptr               mrds_dsl_init_select_area
                         000104 model_area_ptr              mrds_dsl_init_select_area
                         000106 select_area_struct_ptr      mrds_dsl_init_select_area
                         000110 select_area_ptr             mrds_dsl_init_select_area
                         000112 dbcb_ptr                    mrds_dsl_init_select_area

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return_mac          ext_entry           op_alloc_

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
mu_define_area

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
sys_info$max_seg_size




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     18 000007    1   13 000020    1   18 000022    2    6 000023    2   10 000024        45 000025        46 000031
     48 000033        49 000034        51 000077        52 000103        55 000110        56 000112        57 000114
     58 000116        59 000120        60 000121        62 000122        64 000124        65 000127


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
