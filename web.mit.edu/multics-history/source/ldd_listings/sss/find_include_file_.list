	COMPILATION LISTING OF SEGMENT find_include_file_
	Compiled by: Multics PL/I Compiler, Release 27d, of October 11, 1982
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 11/04/82  1641.5 mst Thu
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 /*	Find an include file on behalf of translators
       12*
       13*	Rewritten to use search_paths_ 02-Nov-78 by Monte Davidoff.
       14**/
       15 find_include_file_:
       16 initiate_count:
       17      procedure (P_translator, P_referencing_ptr, P_entryname, P_bit_count, P_include_seg_ptr, P_code);
       18 
       19 	declare P_translator	 char (*);	/* (Input) name of the calling translator */
       20 	declare P_referencing_ptr	 pointer;		/* (Input) pointer into the segment needing the include file */
       21 	declare P_entryname		 char (*);	/* (Input) entryname of the include file */
       22 	declare P_bit_count		 fixed binary (24); /* (Output) include file bit count */
       23 	declare P_include_seg_ptr	 pointer;		/* (Output) pointer to the include file */
       24 	declare P_code		 fixed binary (35); /* (Output) standard status code */
       25 
       26 /* automatic */
       27 
       28 	declare ref_dir_name	 char (168);
       29 	declare ref_dir_name_length	 fixed binary;
       30 	declare ref_entryname	 char (32);
       31 	declare include_dir_name	 char (168);
       32 
       33 /* builtin */
       34 
       35 	declare null		 builtin;
       36 
       37 /* external static */
       38 
       39 	declare error_table_$zero_length_seg
       40 				 fixed binary (35) external static;
       41 
       42 /* external entry */
       43 
       44 	declare hcs_$fs_get_path_name	 entry (pointer, char (*), fixed binary, char (*), fixed binary (35));
       45 	declare hcs_$initiate_count	 entry (char (*), char (*), char (*), fixed binary (24), fixed binary (2), pointer,
       46 				 fixed binary (35));
       47 	declare search_paths_$find_dir entry (char (*), pointer, char (*), char (*), char (*), fixed binary (35));
       48 
       49 	P_bit_count = 0;
       50 	P_include_seg_ptr = null;
       51 	P_code = 0;
       52 
       53 	if P_referencing_ptr = null
       54 	then ref_dir_name = "";
       55 	else do;
       56 		call hcs_$fs_get_path_name (P_referencing_ptr, ref_dir_name, ref_dir_name_length, ref_entryname, P_code);
       57 		if P_code ^= 0
       58 		then return;
       59 	     end;
       60 
       61 	call search_paths_$find_dir ("translator", null, P_entryname, ref_dir_name, include_dir_name, P_code);
       62 	if P_code ^= 0
       63 	then return;
       64 
       65 	call hcs_$initiate_count (include_dir_name, P_entryname, "", P_bit_count, 1, P_include_seg_ptr, P_code);
       66 	if P_include_seg_ptr ^= null
       67 	then P_code = 0;
       68 
       69 	if P_code = 0 & P_bit_count = 0
       70 	then P_code = error_table_$zero_length_seg;
       71      end find_include_file_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/04/82  1613.2  find_include_file_.pl1            >dumps>old>recomp>find_include_file_.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
P_bit_count                            parameter       fixed bin(24,0)          dcl 22 set ref 15 15 49* 65* 69
P_code                                 parameter       fixed bin(35,0)          dcl 24 set ref 15 15 51* 56* 57 61* 62 65* 66* 69
                                                                                  69*
P_entryname                            parameter       char                     unaligned dcl 21 set ref 15 15 61* 65*
P_include_seg_ptr                      parameter       pointer                  dcl 23 set ref 15 15 50* 65* 66
P_referencing_ptr                      parameter       pointer                  dcl 20 set ref 15 15 53 56*
P_translator                           parameter       char                     unaligned dcl 19 ref 15 15
error_table_$zero_length_seg    000010 external static fixed bin(35,0)          dcl 39 ref 69
hcs_$fs_get_path_name           000012 constant        entry                    external dcl 44 ref 56
hcs_$initiate_count             000014 constant        entry                    external dcl 45 ref 65
include_dir_name                000163 automatic       char(168)                unaligned dcl 31 set ref 61* 65*
null                                                   builtin function         dcl 35 ref 50 53 61 61 66
ref_dir_name                    000100 automatic       char(168)                unaligned dcl 28 set ref 53* 56* 61*
ref_dir_name_length             000152 automatic       fixed bin(17,0)          dcl 29 set ref 56*
ref_entryname                   000153 automatic       char(32)                 unaligned dcl 30 set ref 56*
search_paths_$find_dir          000016 constant        entry                    external dcl 47 ref 61

NAMES DECLARED BY EXPLICIT CONTEXT.
find_include_file_              000050 constant        entry                    external dcl 15
initiate_count                  000025 constant        entry                    external dcl 15

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       370         410     270         400
Length       562     270        20         136      77           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
initiate_count                      242 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
initiate_count           000100 ref_dir_name                initiate_count
                         000152 ref_dir_name_length         initiate_count
                         000153 ref_entryname               initiate_count
                         000163 include_dir_name            initiate_count

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   return              ext_entry_desc

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
hcs_$fs_get_path_name         hcs_$initiate_count           search_paths_$find_dir

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$zero_length_seg




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     15 000017        49 000070        50 000072        51 000074        53 000075        56 000104        57 000134
     61 000137        62 000203        65 000206        66 000252        69 000260        71 000267


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
