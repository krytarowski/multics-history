	COMPILATION LISTING OF SEGMENT rs_open_seq_out_
	Compiled by: Multics PL/I Compiler, Release 29, of July 28, 1986
	Compiled at: Honeywell Bull, Phx, AZ, Sys-M  
	Compiled on: 09/10/87  1451.6 mst Thu
	    Options: optimize list

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 /* record_stream_ program for handling sequential output openings */
       12 rs_open_seq_out_:
       13      proc (iocb_ptr_arg);
       14 	iocb_ptr = iocb_ptr_arg;
       15 						/* set iocb entries for valid operations in this mode and return */
       16 	write_record = write_record_rs;
       17 	return;					/* end of opening routine */
       18 
       19 write_record_rs:
       20      entry (iocb_ptr_arg, buff_ptr, buff_len, code);
       21 	iocb_ptr = iocb_ptr_arg -> actual_iocb_ptr;
       22 	rsab_ptr = attach_data_ptr;
       23 	call iox_$put_chars (target_iocb_ptr, buff_ptr, buff_len, code);
       24 	if length_n = 0				/* then append newline character */
       25 	then call iox_$put_chars (target_iocb_ptr, addr (newline), 1, code);
       26 	return;					/* end of sequential write routine */
       27 
       28 /* declarations for  entire program */
       29 	dcl     (iocb_ptr_arg, iocb_ptr)
       30 				 ptr;
       31 	dcl     code		 fixed bin (35);
  1     1 /*  BEGIN:   rs_attach_block.incl.pl1			  *  *  *  *  *  */
  1     2 
  1     3 
  1     4 /****^  HISTORY COMMENTS:
  1     5*  1) change(75-02-13,Asherman), approve(), audit(), install():
  1     6*     Initial coding.
  1     7*  2) change(87-08-30,GWMay), approve(87-08-30,MCR7730), audit(87-09-10,GDixon),
  1     8*     install(87-09-10,MR12.1-1104):
  1     9*     Changed target_name to be unaligned.
  1    10*                                                   END HISTORY COMMENTS */
  1    11 
  1    12 
  1    13 dcl	   rsab_ptr	      ptr;
  1    14      dcl	   1 rs_attach_block      based (rsab_ptr) aligned,
  1    15 						/* record_stream_ attach block */
  1    16 						/* the following are set during attachment */
  1    17 	     2 attach_descrip,
  1    18 	       3 attach_descrip_len
  1    19 			      fixed (35),
  1    20 	       3 attach_descrip_string
  1    21 			      char (66),		/* "record_stream_ <targ_sw_name> <option>" */
  1    22 	     2 target_name	      char (32) unaligned,	/* name of the target switch */
  1    23 	     2 length_n	      fixed (21),		/* =-1 --> -nnl option, */
  1    24 						/* = 0 --> default option, */
  1    25 						/* > 0 --> -length option */
  1    26 	     2 i_attached_target  bit (1) aligned,	/* ="1"b --> target attached via -target option */
  1    27 						/* the following are set during opening */
  1    28 	     2 open_descrip,
  1    29 	       3 open_descrip_len fixed (35),
  1    30 	       3 open_descrip_string
  1    31 			      char (24),
  1    32 	     2 mode	      fixed,		/* opening mode-- may be 1,2,4, or 5 if open */
  1    33 	     2 target_iocb_ptr    ptr,		/* points to the iocb for the target switch */
  1    34 	     2 i_opened_target    bit (1) aligned,	/* ="1"b --> this opening caused target to be opened */
  1    35 	     2 base	      fixed (21),		/* offset of next byte in rs_buffer */
  1    36 	     2 n_left	      fixed (21);		/* number of unprocessed bytes in rs_buffer */
  1    37 
  1    38 /*  END OF:  rs_attach_block.incl.pl1			  *  *  *  *  *  */
       32 
  2     1 
  2     2      dcl	   1 iocb		      aligned based (iocb_ptr),
  2     3 						/* I/O control block. */
  2     4 	     2 iocb_version	      fixed init (1),	/* Version number of structure. */
  2     5 	     2 name	      char (32),		/* I/O name of this block. */
  2     6 	     2 actual_iocb_ptr    ptr,		/* IOCB ultimately SYNed to. */
  2     7 	     2 attach_descrip_ptr ptr,		/* Ptr to printable attach description. */
  2     8 	     2 attach_data_ptr    ptr,		/* Ptr to attach data structure. */
  2     9 	     2 open_descrip_ptr   ptr,		/* Ptr to printable open description. */
  2    10 	     2 open_data_ptr      ptr,		/* Ptr to open data structure (old SDB). */
  2    11 	     2 reserved	      bit (72),		/* Reserved for future use. */
  2    12 	     2 detach_iocb	      entry (ptr, fixed (35)),/* detach_iocb(p,s) */
  2    13 	     2 open	      entry (ptr, fixed, bit (1) aligned, fixed (35)),
  2    14 						/* open(p,mode,not_used,s) */
  2    15 	     2 close	      entry (ptr, fixed (35)),/* close(p,s) */
  2    16 	     2 get_line	      entry (ptr, ptr, fixed (21), fixed (21), fixed (35)),
  2    17 						/* get_line(p,bufptr,buflen,actlen,s) */
  2    18 	     2 get_chars	      entry (ptr, ptr, fixed (21), fixed (21), fixed (35)),
  2    19 						/* get_chars(p,bufptr,buflen,actlen,s) */
  2    20 	     2 put_chars	      entry (ptr, ptr, fixed (21), fixed (35)),
  2    21 						/* put_chars(p,bufptr,buflen,s) */
  2    22 	     2 modes	      entry (ptr, char (*), char (*), fixed (35)),
  2    23 						/* modes(p,newmode,oldmode,s) */
  2    24 	     2 position	      entry (ptr, fixed, fixed (21), fixed (35)),
  2    25 						/* position(p,u1,u2,s) */
  2    26 	     2 control	      entry (ptr, char (*), ptr, fixed (35)),
  2    27 						/* control(p,order,infptr,s) */
  2    28 	     2 read_record	      entry (ptr, ptr, fixed (21), fixed (21), fixed (35)),
  2    29 						/* read_record(p,bufptr,buflen,actlen,s) */
  2    30 	     2 write_record	      entry (ptr, ptr, fixed (21), fixed (35)),
  2    31 						/* write_record(p,bufptr,buflen,s) */
  2    32 	     2 rewrite_record     entry (ptr, ptr, fixed (21), fixed (35)),
  2    33 						/* rewrite_record(p,bufptr,buflen,s) */
  2    34 	     2 delete_record      entry (ptr, fixed (35)),/* delete_record(p,s) */
  2    35 	     2 seek_key	      entry (ptr, char (256) varying, fixed (21), fixed (35)),
  2    36 						/* seek_key(p,key,len,s) */
  2    37 	     2 read_key	      entry (ptr, char (256) varying, fixed (21), fixed (35)),
  2    38 						/* read_key(p,key,len,s) */
  2    39 	     2 read_length	      entry (ptr, fixed (21), fixed (35));
  2    40 						/* read_length(p,len,s) */
  2    41 
       33 
       34 	dcl     buff_ptr		 ptr;
       35 	dcl     buff_len		 fixed bin (21);
       36 	dcl     buffer		 char (buff_len) based (buff_ptr);
       37 	dcl     iox_$put_chars	 entry (ptr, ptr, fixed bin (21), fixed bin (35));
       38 	dcl     newline		 char (1) static internal aligned init ("
       39 ");
       40 
       41      end rs_open_seq_out_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    09/10/87  1447.6  rs_open_seq_out_.pl1              >special_ldd>install>MR12.1-1104>rs_open_seq_out_.pl1
32           1    09/10/87  1444.7  rs_attach_block.incl.pl1          >special_ldd>install>MR12.1-1104>rs_attach_block.incl.pl1
33           2    07/02/81  1905.0  iocbv.incl.pl1                    >ldd>include>iocbv.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
actual_iocb_ptr          12            based           pointer                  level 2 dcl 2-2 ref 21
attach_data_ptr          16            based           pointer                  level 2 dcl 2-2 ref 22
buff_len                               parameter       fixed bin(21,0)          dcl 35 set ref 19 23*
buff_ptr                               parameter       pointer                  dcl 34 set ref 19 23*
code                                   parameter       fixed bin(35,0)          dcl 31 set ref 19 23* 24*
iocb                                   based           structure                level 1 dcl 2-2
iocb_ptr                        000100 automatic       pointer                  dcl 29 set ref 14* 16 21* 22
iocb_ptr_arg                           parameter       pointer                  dcl 29 ref 12 14 19 21
iox_$put_chars                  000012 constant        entry                    external dcl 37 ref 23 24
length_n                 32            based           fixed bin(21,0)          level 2 dcl 1-14 ref 24
newline                         000010 internal static char(1)                  initial dcl 38 set ref 24 24
rs_attach_block                        based           structure                level 1 dcl 1-14
rsab_ptr                        000102 automatic       pointer                  dcl 1-13 set ref 22* 23 24 24
target_iocb_ptr          44            based           pointer                  level 2 dcl 1-14 set ref 23* 24*
write_record             76            based           entry variable           level 2 dcl 2-2 set ref 16*

NAME DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
buffer                                 based           char                     unaligned dcl 36

NAMES DECLARED BY EXPLICIT CONTEXT.
rs_open_seq_out_                000006 constant        entry                    external dcl 12
write_record_rs                 000031 constant        entry                    external dcl 19 ref 16

NAME DECLARED BY CONTEXT OR IMPLICATION.
addr                                                   builtin function         ref 24 24

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       160         174     112         170
Length       404     112        14         173      45           2

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
rs_open_seq_out_                     81 external procedure  is an external procedure.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 newline                     rs_open_seq_out_

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
rs_open_seq_out_         000100 iocb_ptr                    rs_open_seq_out_
                         000102 rsab_ptr                    rs_open_seq_out_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
iox_$put_chars

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.


CONSTANTS
000110  aa     077777000043
000111  aa     000001000000

000000  aa     404000000025

000001  aa     404000000043

000002  aa     464000000000

BEGIN PROCEDURE rs_open_seq_out_
ENTRY TO rs_open_seq_out_                                   STATEMENT 1 ON LINE 12
rs_open_seq_out_:
     proc (iocb_ptr_arg);

000003  at     000001000002
000004  ta     000003000000
000005  da     000032300000
000006  aa   000140 6270 00	eax7 	96
000007  aa  7 00034 3521 20	epp2 	pr7|28,*
000010  aa  2 01045 2721 00	tsp2 	pr2|549		ext_entry
000011  aa     000002000000
000012  aa     000000000000
						STATEMENT 1 ON LINE 14
	iocb_ptr = iocb_ptr_arg;

000013  aa  6 00032 3735 20	epp7 	pr6|26,*
000014  aa  7 00002 3715 20	epp5 	pr7|2,*		iocb_ptr_arg
000015  aa  5 00000 3715 20	epp5 	pr5|0,*		iocb_ptr_arg
000016  aa  6 00100 6515 00	spri5	pr6|64		iocb_ptr
						STATEMENT 1 ON LINE 16
	write_record = write_record_rs;

000017  aa   000012 3520 04	epp2 	10,ic		000031 = 000140627000
000020  aa  5 00076 2521 00	spri2	pr5|62		iocb.write_record
000021  aa   000067 2370 04	ldaq 	55,ic		000110 = 077777000043 000001000000
000022  aa  5 00100 7571 00	staq 	pr5|64		iocb.write_record
						STATEMENT 1 ON LINE 17
	return;

000023  aa  0 00631 7101 00	tra  	pr0|409		return_mac
ENTRY TO write_record_rs                                    STATEMENT 1 ON LINE 19
write_record_rs:
     entry (iocb_ptr_arg, buff_ptr, buff_len, code);

000024  at     000004000002
000025  tt     000002000000
000026  ta     000001000000
000027  ta     000024000000
000030  da     000041300000
000031  aa   000140 6270 00	eax7 	96
000032  aa  7 00034 3521 20	epp2 	pr7|28,*
000033  aa  2 01045 2721 00	tsp2 	pr2|549		ext_entry
000034  aa     000010000000
000035  aa     000000000000
						STATEMENT 1 ON LINE 21
	iocb_ptr = iocb_ptr_arg -> actual_iocb_ptr;

000036  aa  6 00032 3735 20	epp7 	pr6|26,*
000037  aa  7 00002 3715 20	epp5 	pr7|2,*		iocb_ptr_arg
000040  aa  5 00000 3715 20	epp5 	pr5|0,*		iocb_ptr_arg
000041  aa  5 00012 3535 20	epp3 	pr5|10,*		iocb.actual_iocb_ptr
000042  aa  6 00100 2535 00	spri3	pr6|64		iocb_ptr
						STATEMENT 1 ON LINE 22
	rsab_ptr = attach_data_ptr;

000043  aa  3 00016 3515 20	epp1 	pr3|14,*		iocb.attach_data_ptr
000044  aa  6 00102 2515 00	spri1	pr6|66		rsab_ptr
						STATEMENT 1 ON LINE 23
	call iox_$put_chars (target_iocb_ptr, buff_ptr, buff_len, code);

000045  aa  1 00044 3521 00	epp2 	pr1|36		rs_attach_block.target_iocb_ptr
000046  aa  6 00106 2521 00	spri2	pr6|70
000047  aa  7 00004 3521 20	epp2 	pr7|4,*		buff_ptr
000050  aa  6 00110 2521 00	spri2	pr6|72
000051  aa  7 00006 3521 20	epp2 	pr7|6,*		buff_len
000052  aa  6 00112 2521 00	spri2	pr6|74
000053  aa  7 00010 3521 20	epp2 	pr7|8,*		code
000054  aa  6 00114 2521 00	spri2	pr6|76
000055  aa  6 00104 6211 00	eax1 	pr6|68
000056  aa   020000 4310 07	fld  	8192,dl
000057  aa  6 00044 3701 20	epp4 	pr6|36,*
000060  la  4 00012 3521 20	epp2 	pr4|10,*		iox_$put_chars
000061  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 24
	if length_n = 0				/* then append newline character */
	then call iox_$put_chars (target_iocb_ptr, addr (newline), 1, code);

000062  aa  6 00102 3735 20	epp7 	pr6|66,*		rsab_ptr
000063  aa  7 00032 2361 00	ldq  	pr7|26		rs_attach_block.length_n
000064  aa   000023 6010 04	tnz  	19,ic		000107
000065  aa  6 00044 3701 20	epp4 	pr6|36,*
000066  ia  4 00010 3715 00	epp5 	pr4|8		newline
000067  aa  6 00116 6515 00	spri5	pr6|78
000070  aa   000001 2360 07	ldq  	1,dl
000071  aa  6 00120 7561 00	stq  	pr6|80
000072  aa  7 00044 3521 00	epp2 	pr7|36		rs_attach_block.target_iocb_ptr
000073  aa  6 00106 2521 00	spri2	pr6|70
000074  aa  6 00116 3521 00	epp2 	pr6|78
000075  aa  6 00110 2521 00	spri2	pr6|72
000076  aa  6 00120 3521 00	epp2 	pr6|80
000077  aa  6 00112 2521 00	spri2	pr6|74
000100  aa  6 00032 3535 20	epp3 	pr6|26,*
000101  aa  3 00010 3521 20	epp2 	pr3|8,*		code
000102  aa  6 00114 2521 00	spri2	pr6|76
000103  aa  6 00104 6211 00	eax1 	pr6|68
000104  aa   020000 4310 07	fld  	8192,dl
000105  la  4 00012 3521 20	epp2 	pr4|10,*		iox_$put_chars
000106  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 26
	return;

000107  aa  0 00631 7101 00	tra  	pr0|409		return_mac
						STATEMENT 1 ON LINE 41
     end rs_open_seq_out_;

  END PROCEDURE rs_open_seq_out_


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
