ASSEMBLY LISTING OF SEGMENT >special_ldd>install>MR12.0-1206>message_segment_.alm            
ASSEMBLED ON:	11/05/86  1042.0 mst Wed
OPTIONS USED:	list 
ASSEMBLED BY:	ALM Version  6.7  October 1986  
ASSEMBLER CREATED:	10/08/86  1557.5 mst Wed

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Information Systems Inc., 1982 *
                                     4  " *                                                         *
                                     5  " * Copyright (c) 1972 by Massachusetts Institute of        *
                                     6  " * Technology and Honeywell Information Systems, Inc.      *
                                     7  " *                                                         *
                                     8  " ***********************************************************
                                     9  
    000000                          10  	name	message_segment_
                                    11  
                                    12  
                                    13  "	Gate to the queue message segment facility
                                    14  
                                    15  "	Last modified: 02/01/79 W. Olin Sibert to convert to ALM
                                    16  "	Modified: February 1983 by G. Palter to add validate, copy, compact_index, and
                                    17  "	      compact_file entrypoints
                                    18  "         Modified: 1094-10-11 BIM for general_read_*
                                    19  "	Modified: 1985-14-21, BIM: new common gate target.
                                    20  
                                    21  	include  gate_macros
                                   1-1  " BEGIN INCLUDE FILE ...... gate_macros.incl.alm
                                   1-2  "   Last modified 6/77 by N. Morris, B. Greenberg, & T. VanVleck
                                   1-3  "   Modified 741212 by PG to inhibit while computing virtual CPU time
                                   1-4  "   Modified 83-03-14 by E. N. Kittlitz to clear IR
                                   1-5  "   Modified 83-06-01 BIM for ring alarm polling
                                   1-6  "   Modified 85-04-03 by Keith Loepere to make polling a little smarter.
                                   1-7  
                                   1-8  " This file contains several macros used when generating gate segments.
                                   1-9  " The major macros that are defined are:
                                  1-10  "
                                  1-11  "	gate_info		general setup code for normal gates
                                  1-12  "	hardcore_gate_info	general setup code for hardcore gates
                                  1-13  "	bad_dir_handler	setup and handler for bad_dir_ condition (goes at bottom)
                                  1-14  "	bad_dir_handler_entry	entrypoint for above (goes at top)
                                  1-15  "	gate		to define a normal gate
                                  1-16  "	hgate		to define a hardcore gate
                                  1-17  "	fgate		to define a fast hardcore gate
                                  1-18  "
                                  1-19  
                                  1-20  
    000000                        1-21  	maclist	off
                                  1-22  
                                  1-23  
                                  1-24  " HGATE - define a hardcore gate entry
                                  1-25  "
                                  1-26  "	hgate	gatename,procedure,entry,args{,bad_dir_trap}
                                  1-27  "
                                  1-28  " The entrypoint gatename is defined in the gate segment.  If args
                                  1-29  " is nonzero, the number of arguments passed to gatename must be
                                  1-30  " equal to args.  When gatename is called, it will in turn call
                                  1-31  " procedure$entry.
                                  1-32  "
                                  1-33  
                                  1-34  macro	hgate
                              1   1-35  	gentry	&1,&4*2,&1.t
                              2   1-36  	tsx2	.setup
                              3   1-37  &=&5,bad_dir_trap&[	tsx0	.set_dir_trap
                              4   1-38  &]	ldi	=0,dl
                              5   1-39  	short_call &2$&3(ap|0)
                              6   1-40  	eppbp	lp|&1.t
                              7   1-41  	tra	.return_code
                              8   1-42  	maclist	restore
                              9   1-43  	use	linkage
                             10   1-44  	even
                             11   1-45  	maclist	on,save
                             12   1-46  &1.t:
                             13   1-47  	bss	,gate_entry_data_size
                             14   1-48  
                             15   1-49  	maclist	restore
                             16   1-50  &end
                                  1-51  
                                  1-52  
                                  1-53  " FGATE - define a fast hardcore gate
                                  1-54  "
                                  1-55  "	fgate	gatename,procedure,entry
                                  1-56  "
                                  1-57  
                                  1-58  macro	fgate
                              1   1-59  	gentry	&1,0,0
                              2   1-60  	ldi	=0,dl
                              3   1-61  	epplp	.my_lp,*
                              4   1-62  	tra	&2$&3
                              5   1-63  
                              6   1-64  	maclist	off
                              7   1-65  &end
                                  1-66  
                                  1-67  
                                  1-68  " GATE - define a normal gate entry
                                  1-69  "
                                  1-70  "	gate	gatename,procedure,entry,args
                                  1-71  "
                                  1-72  
                                  1-73  macro	gate
                              1   1-74  	gentry	&1,&4*2,0
                              2   1-75  	tsx2	.setup
                              3   1-76  	ldi	=0,dl
                              4   1-77  	short_call &2$&3(ap|0)
                              5   1-78  	return
                              6   1-79  
                              7   1-80  	maclist	restore
                              8   1-81  &end
                                  1-82  
                                  1-83  
                                  1-84  
                                  1-85  macro	gentry
                              1   1-86  	maclist	on,save
                              2   1-87  	segdef	&1
                              3   1-88  	maclist	restore
                              4   1-89  	use	transfer_vector
                              5   1-90  	maclist	on,save
                              6   1-91  &1:
                              7   1-92  	tra	&1.e
                              8   1-93  	maclist	restore
                              9   1-94  	use	main
                             10   1-95  	maclist	on,save
                             11   1-96  	zero	&2,&3
                             12   1-97  &1.e:
                             13   1-98  &end
                                  1-99  
                                 1-100  
                                 1-101  " HARDCORE_GATE_INFO - general info for hardcore gates
                                 1-102  
                                 1-103  macro	hardcore_gate_info
                              1  1-104  	maclist	on,save
                              2  1-105  	name	&1
                              3  1-106  
                              4  1-107  	include	stack_header
                              5  1-108  
                              6  1-109  	include	stack_frame
                              7  1-110  	include	gate_data
                              8  1-111  
                              9  1-112  	maclist	restore
                             10  1-113  	eject
                             11  1-114  
                             12  1-115  	tempd	.temp
                             13  1-116  	tempd	.label_variable(0)
                             14  1-117  	tempd	.time1,.time2
                             15  1-118  	tempd	.unwinder_arglist(0)
                             16  1-119  	tempd	.on_unit(5)
                             17  1-120  	temp	.pf,.entryp
                             18  1-121  	tempd	.vfl_arglist(2)
                             19  1-122  	tempd	.mcptr
                             20  1-123  
                             21  1-124  	use	transfer_vector
                             22  1-125  	equ	.tv_begin,*
                             23  1-126  
                             24  1-127  	tra	.actor
                             25  1-128  
                             26  1-129  	use	tv_end
                             27  1-130  	entrybound
                             28  1-131  
                             29  1-132  	segdef	.tv_end
                             30  1-133  .tv_end:	vfd	14/(*-.tv_begin)
                             31  1-134  
                             32  1-135  	use	main
                             33  1-136  
                             34  1-137  	segdef	.my_lp
                             35  1-138  	even
                             36  1-139  .my_lp:	bss	,2
                             37  1-140  
                             38  1-141  	join	/text/transfer_vector,tv_end,main
                             39  1-142  
                             40  1-143  	use	linkage
                             41  1-144  	join	/link/linkage
                             42  1-145  
                             43  1-146  	use	main
                             44  1-147  
                             45  1-148  	maclist	restore
                             46  1-149  	eject
                             47  1-150  
                             48  1-151  .actor:	epplp	.my_lp,*
                             49  1-152  	maclist	restore
                             50  1-153  	gate_actor
                             51  1-154  
                             52  1-155  
                             53  1-156  
                             54  1-157  .setup:	push
                             55  1-158  	epplp	.my_lp,*
                             56  1-159  	sprilp	sp|stack_frame.lp_ptr
                             57  1-160  
                             58  1-161  	maclist	restore
                             59  1-162  	gcheck
                             60  1-163  
                             61  1-164  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
                             62  1-165  	rccl	sys_info$clock_,*	calculate times
                             63  1-166  	sbaq	pds$cpu_time
                             64  1-167  	staq	.time1
                             65  1-168  	sbaq	pds$virtual_delta
                             66  1-169  	staq	.time2
                             67  1-170  	lda	pds$page_waits
                             68  1-171  	sta	.pf
                             69  1-172  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                             70  1-173  	tra	0,2
                             71  1-174  
                             72  1-175  	maclist	restore
                             73  1-176  	eject
                             74  1-177  
                             75  1-178  .return_code:
                             76  1-179  
                             77  1-180  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
                             78  1-181  	rccl	sys_info$clock_,*	calculate times
                             79  1-182  	sbaq	pds$cpu_time
                             80  1-183  	staq	.temp
                             81  1-184  	sbaq	.time1
                             82  1-185  	adaq	bp|gate_entry_data.cpu_time
                             83  1-186  	staq	bp|gate_entry_data.cpu_time
                             84  1-187  	ldaq	.temp
                             85  1-188  	sbaq	pds$virtual_delta
                             86  1-189  	sbaq	.time2
                             87  1-190  	adaq	bp|gate_entry_data.vcpu_time
                             88  1-191  	staq	bp|gate_entry_data.vcpu_time
                             89  1-192  	lda	pds$page_waits
                             90  1-193  	sbla	.pf
                             91  1-194  	asa	bp|gate_entry_data.page_waits
                             92  1-195  	aos	bp|gate_entry_data.calls
                             93  1-196  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                             94  1-197  
                             95  1-198  			" Poll for ring alarms
                             96  1-199  	sra	.temp	Borrow from time calc
                             97  1-200  	szn	.temp	Zero?
                             98  1-201  	tze	.return_code_return
                             99  1-202  
                            100  1-203  	epp1	sp|stack_frame.prev_sp,*	"possible ring alarm
                            101  1-204  	epaq	pr1|stack_frame.return_ptr,*
                            102  1-205  	ana	7,dl	" ring number to which we return
                            103  1-206  	cmpa	.temp
                            104  1-207  	tpl	.ring_alarm	" ring alarm will occur
                            105  1-208  
                            106  1-209  .return_code_return:
                            107  1-210  	return
                            108  1-211  
                            109  1-212  .ring_alarm:		" perhaps we can handle without faults?
                            110  1-213  
                            111  1-214  	aos	bp|gate_entry_data.ring_alarms
                            112  1-215  	stz	.temp	" return argument for ring_alarm$poll
                            113  1-216  	ldaq	.one_arg_header
                            114  1-217  	staq	.ring_alarm_arg_list
                            115  1-218  	epp1	.temp
                            116  1-219  	spri1	.ring_alarm_arg_list+2
                            117  1-220  	eppap	.ring_alarm_arg_list
                            118  1-221  	short_call ring_alarm$poll
                            119  1-222  	szn	.temp
                            120  1-223  	tze	.return_code_return
                            121  1-224  	eppsp	sp|stack_frame.prev_sp,*
                            122  1-225  	sprisp	pds$pre_empt_poll_return          " short-return from here
                            123  1-226  	epp1	sb|stack_header.stack_begin_ptr,* " abandoning this stack frame.
                            124  1-227  	spri1	sb|stack_header.stack_end_ptr
                            125  1-228  " Leave SB as stack_0, so pxss can get to operators.
                            126  1-229  	tra	pxss$pre_empt_poll
                            127  1-230  
                            128  1-231  	tempd	.ring_alarm_arg_list(2)
                            129  1-232  	even
                            130  1-233  .one_arg_header:
                            131  1-234  	vfd	17/2,1/0,18/4
                            132  1-235  	vfd	18/0,18/0
                            133  1-236  
                            134  1-237  
                            135  1-238  	maclist	restore
                            136  1-239  	eject
                            137  1-240  	maclist	restore
                            138  1-241  &end
                                 1-242  
                                 1-243  
                                 1-244  " BAD_DIR_HANDLER - code to setup and handle bad_dir_ condition
                                 1-245  "			put this after the last hgate macro
                                 1-246  
                                 1-247  macro	bad_dir_handler
                              1  1-248  	maclist	on,save
                              2  1-249  
                              3  1-250  	include	on_unit
                              4  1-251  
                              5  1-252  	use	transfer_vector
                              6  1-253  .handler_entry:
                              7  1-254  	tra	.handler
                              8  1-255  .handler_restart_entry:
                              9  1-256  	tra	.handler_restart_point
                             10  1-257  
                             11  1-258  	use	main
                             12  1-259  .set_dir_trap:
                             13  1-260  	stx0	.entryp		save for restart
                             14  1-261  
                             15  1-262  	mlr	(),(pr),fill(000)
                             16  1-263  	desc9a	0,0
                             17  1-264  	desc9a	.on_unit,10*4
                             18  1-265  	eppbp	.bad_dir_name
                             19  1-266  	spribp	.on_unit+on_unit.name
                             20  1-267  	eppbp	.handler_entry
                             21  1-268  	spribp	.on_unit+on_unit.body
                             22  1-269  	lxl1	.bad_dir_desc
                             23  1-270  	sxl1	.on_unit+on_unit.size
                             24  1-271  	eaa	.on_unit		set up on-unit for bad_dir_
                             25  1-272  	sbla	sp|0,du		.. make rel to sp
                             26  1-273  	sta	sp|stack_frame.on_unit_rel_ptrs
                             27  1-274  	lda	stack_frame.condition_bit,dl
                             28  1-275  	orsa	sp|stack_frame.flag_word
                             29  1-276  	tra	0,0
                             30  1-277  
                             31  1-278  	string	bad_dir_
                             32  1-279  
                             33  1-280  
                             34  1-281  
                             35  1-282  .handler:	epaq	sp|0		verify that call came from ring 0
                             36  1-283  	cana	-1,dl		check ring number in AL
                             37  1-284  	tze	*+2
                             38  1-285  	zero	0		go way kid you bother me
                             39  1-286  
                             40  1-287  	push			" ok, we like the call
                             41  1-288  	epplp	.my_lp,*
                             42  1-289  	ldx0	ap|0		get display
                             43  1-290  	eppbp	ap|2,0*
                             44  1-291  	lda	bp|stack_frame.prev_sp
                             45  1-292  	cana	=o700000,dl	from another ring?
                             46  1-293  	tze	.continue_signal	if not, back to signal_
                             47  1-294  	eppap	ap|2,*		Get mcptr
                             48  1-295  	eppap	ap|0,*		..
                             49  1-296  	spriap	bp|.mcptr		.. save in gate frame
                             50  1-297  	spribp	.label_variable+2
                             51  1-298  	eppbp	.handler_restart_entry
                             52  1-299  	spribp	.label_variable
                             53  1-300  	eppbp	.label_variable
                             54  1-301  	spribp	.unwinder_arglist+2
                             55  1-302  	fld	=1b24,dl
                             56  1-303  	staq	.unwinder_arglist
                             57  1-304  	call	unwinder_$unwinder_(.unwinder_arglist)
                             58  1-305  
                             59  1-306  .continue_signal:
                             60  1-307  	lda	=o400000,du	"1"b
                             61  1-308  	sta	ap|10,*		set continue bit
                             62  1-309  	return
                             63  1-310  
                             64  1-311  .handler_restart_point:
                             65  1-312  	epaq	sp|0		check that call came from ring 0
                             66  1-313  	cana	-1,dl
                             67  1-314  	tze	*+2
                             68  1-315  	zero	1
                             69  1-316  	epplp	.my_lp,*
                             70  1-317  	lca	stack_frame.condition_bit+1,dl  Vanish on-unit
                             71  1-318  	ansa	sp|stack_frame.flag_word
                             72  1-319  	eppbp	.mcptr
                             73  1-320  	spribp	.vfl_arglist+2
                             74  1-321  	fld	=1b24,dl
                             75  1-322  	staq	.vfl_arglist
                             76  1-323  	short_call  verify_lock$verify_lock_bad_dir(.vfl_arglist)
                             77  1-324  	ldx0	.entryp
                             78  1-325  	eppap	sp|stack_frame.arg_ptr,*
                             79  1-326  	tra	0,0		retry the call
                             80  1-327  
                             81  1-328  	maclist	restore
                             82  1-329  	eject
                             83  1-330  	maclist	restore
                             84  1-331  &end
                                 1-332  
                                 1-333  
                                 1-334  " GATE_INFO - general info for non-hardcore gates
                                 1-335  
                                 1-336  macro	gate_info
                              1  1-337  	maclist	on,save
                              2  1-338  	use	transfer_vector
                              3  1-339  	tra	.actor
                              4  1-340  
                              5  1-341  	use	tv_end
                              6  1-342  	entrybound
                              7  1-343  
                              8  1-344  	use	main
                              9  1-345  	join	/text/transfer_vector,tv_end,main
                             10  1-346  
                             11  1-347  	maclist	restore
                             12  1-348  	eject
                             13  1-349  
                             14  1-350  .actor:	getlp
                             15  1-351  	maclist	restore
                             16  1-352  	gate_actor
                             17  1-353  
                             18  1-354  	maclist	restore
                             19  1-355  	eject
                             20  1-356  
                             21  1-357  .setup:	push
                             22  1-358  	getlp
                             23  1-359  	maclist	restore
                             24  1-360  	gcheck
                             25  1-361  	tra	0,2
                             26  1-362  
                             27  1-363  	maclist	restore
                             28  1-364  	eject
                             29  1-365  
                             30  1-366  	maclist	restore
                             31  1-367  &end
                                 1-368  
                                 1-369  
                                 1-370  " Macro to generate gate actor.
                                 1-371  
                                 1-372  macro	gate_actor
                              1  1-373  	maclist	on,save
                              2  1-374  	eppbp	ap|2,*
                              3  1-375  	lda	bp|-1		get length of string
                              4  1-376  	tze	.return_name	zero length => get name
                              5  1-377  
                              6  1-378  	adla	1,dl		include length of acc
                              7  1-379  	stz	ap|4,*
                              8  1-380  	tsx0	.search_defs
                              9  1-381  
                             10  1-382  	cmpc	(pr,rl),(pr,rl)	compare name
                             11  1-383  	desc9a	bp|-1(3),al
                             12  1-384  	desc9a	bb|0,al
                             13  1-385  	tnz	.next_def
                             14  1-386  
                             15  1-387  	lda	ab|1,2		return location
                             16  1-388  	arl	18
                             17  1-389  	sta	ap|4,*
                             18  1-390  
                             19  1-391  	short_return
                             20  1-392  
                             21  1-393  .return_name:
                             22  1-394  	lxl3	ap|4,*		get location
                             23  1-395  	tsx0	.search_defs
                             24  1-396  
                             25  1-397  	cmpx3	ab|1,2		compare location
                             26  1-398  	tnz	.next_def
                             27  1-399  
                             28  1-400  	lda	bb|0		get length of name
                             29  1-401  	arl	27
                             30  1-402  	sta	bp|-1		set length of varying string
                             31  1-403  	mlr	(pr,rl),(pr,rl)	return string
                             32  1-404  	desc9a	bb|0(1),al
                             33  1-405  	desc9a	bp|0,al
                             34  1-406  
                             35  1-407  	short_return
                             36  1-408  
                             37  1-409  .search_defs:
                             38  1-410  	eax2	0
                             39  1-411  	eppab	lp|0,*		ab -> defs
                             40  1-412  .defs_loop:
                             41  1-413  	lxl1	ab|1,2		get class and flags
                             42  1-414  	cmpx1	=o400000,du	must be class 0
                             43  1-415  	tnz	.next_def
                             44  1-416  
                             45  1-417  	ldx7	ab|2,2
                             46  1-418  	eppbb	ab|0,7		bb -> name
                             47  1-419  	tra	0,0		test definition
                             48  1-420  .next_def:
                             49  1-421  	ldx2	ab|0,2		chain to next def
                             50  1-422  	tnz	.defs_loop
                             51  1-423  
                             52  1-424  	short_return
                             53  1-425  
                             54  1-426  &end
                                 1-427  
                                 1-428  
                                 1-429  " Miscellaneous macros.
                                 1-430  
                                 1-431  macro	gcheck
                              1  1-432  	maclist	on,save
                              2  1-433  	ldx1	-2,2		get number of args expected
                              3  1-434  	tze	.no_gate_error	if zero, none or doesn't matter
                              4  1-435  	cmpx1	ap|0		compare against number given
                              5  1-436  	tze	.no_gate_error	args match, call procedure
                              6  1-437  
                              7  1-438  	call	signal_$signal_(signal_arglist)
                              8  1-439  	oct	0
                              9  1-440  
                             10  1-441  	even
                             11  1-442  signal_arglist:
                             12  1-443  	zero	2,4
                             13  1-444  	zero	2,0
                             14  1-445  	arg	.gate_errorname
                             15  1-446  	arg
                             16  1-447  	arg	.gate_errordesc
                             17  1-448  	arg
                             18  1-449  
                             19  1-450  	string	gate_error
                             20  1-451  
                             21  1-452  
                             22  1-453  .no_gate_error:
                             23  1-454  &end
                                 1-455  
                                 1-456  macro	string
                              1  1-457  .&1name:
                              2  1-458  	aci	"&1"
                              3  1-459  .&1desc:
                              4  1-460  	vfd	o9/525,o27/&l1
                              5  1-461  
                              6  1-462  &end
                                 1-463  
                                 1-464  macro	eject
                              1  1-465  	maclist	on,save
                              2  1-466  
                              3  1-467  &end
                                 1-468  
                                 1-469  " END INCLUDE FILE ...... gate_macros.incl.alm
                                 1-470  
                                 1-471  "  To arrange the return it wants to return, it will have to reach back  2 frames.
                                    22  
                                    23  	include	stack_header
                                   2-1  "	BEGIN INCLUDE FILE ... stack_header.incl.alm  3/72  Bill Silver
                                   2-2  "
                                   2-3  "	modified 7/76 by M. Weaver for *system links and more system use of areas
                                   2-4  "	modified 3/77 by M. Weaver  to add rnt_ptr
                                   2-5  "	modified 7/77 by S. Webber to add run_unit_depth and assign_linkage_ptr
                                   2-6  "	modified 6/83 by J. Ives to add trace_frames and in_trace.
                                   2-7  
                                   2-8  " HISTORY COMMENTS:
                                   2-9  "  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
                                  2-10  "     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
                                  2-11  "     added the heap_header_ptr definition
                                  2-12  "  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
                                  2-13  "     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
                                  2-14  "     Modified to support control point management.  These changes were
                                  2-15  "     actually made in February 1985 by G. Palter.
                                  2-16  "  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
                                  2-17  "     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
                                  2-18  "     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
                                  2-19  "     bit pad after cur_lot_size for the cpm_enabled. This was done to save
                                  2-20  "     some space int the stack header and change the cpd_ptr unal to
                                  2-21  "     cpm_data_ptr (ITS pair).
                                  2-22  "                                                      END HISTORY COMMENTS
                                  2-23  
                        000004    2-24  	equ	stack_header.cpm_data_ptr,4		ptr to control point for this stack
                        000006    2-25  	equ	stack_header.combined_stat_ptr,6	ptr to separate static area
                                  2-26  
                        000010    2-27  	equ	stack_header.clr_ptr,8		ptr to area containing linkage sections
                        000012    2-28  	equ	stack_header.max_lot_size,10		number of words allowed in lot (DU)
                        000012    2-29  	equ	stack_header.main_proc_invoked,10	nonzero if main proc was invoked in run unit (DL)
                        000012    2-30  	equ	stack_header.run_unit_depth,10	number of active run units stacked (DL)
                        000013    2-31  	equ	stack_header.cur_lot_size,11		DU number of words (entries) in lot
                        000013    2-32            equ	stack_header.cpm_enabled,11		DL  non-zero if control point management is enabled
                        000014    2-33  	equ	stack_header.system_free_ptr,12	ptr to system storage area
                        000016    2-34  	equ	stack_header.user_free_ptr,14		ptr to user storage area
                                  2-35  
                        000020    2-36  	equ	stack_header.parent_ptr,16		ptr to parent stack or null
                        000022    2-37  	equ	stack_header.stack_begin_ptr,18	ptr to first stack frame
                        000024    2-38  	equ	stack_header.stack_end_ptr,20		ptr to next useable stack frame
                        000026    2-39  	equ	stack_header.lot_ptr,22		ptr to the lot for the current ring
                                  2-40  
                        000030    2-41  	equ	stack_header.signal_ptr,24		ptr to signal proc for current ring
                        000032    2-42  	equ	stack_header.bar_mode_sp,26		value of sp before entering bar mode
                        000034    2-43  	equ	stack_header.pl1_operators_ptr,28	ptr: pl1_operators_$operator_table
                        000036    2-44  	equ	stack_header.call_op_ptr,30		ptr to standard call operator
                                  2-45  
                        000040    2-46  	equ	stack_header.push_op_ptr,32		ptr to standard push operator
                        000042    2-47  	equ	stack_header.return_op_ptr,34		ptr to standard return operator
                        000044    2-48  	equ	stack_header.ret_no_pop_op_ptr,36	ptr: stand. return/ no pop operator
                        000046    2-49  	equ	stack_header.entry_op_ptr,38		ptr to standard entry operator
                                  2-50  
                        000050    2-51  	equ	stack_header.trans_op_tv_ptr,40	ptr to table of translator operator ptrs
                        000052    2-52  	equ	stack_header.isot_ptr,42		pointer to ISOT
                        000054    2-53  	equ	stack_header.sct_ptr,44		pointer to System Condition Table
                        000056    2-54  	equ	stack_header.unwinder_ptr,46		pointer to unwinder for current ring
                                  2-55  
                        000060    2-56  	equ	stack_header.sys_link_info_ptr,48	ptr to *system link name table
                        000062    2-57  	equ	stack_header.rnt_ptr,50		ptr to reference name table
                        000064    2-58  	equ	stack_header.ect_ptr,52		ptr to event channel table
                        000066    2-59  	equ	stack_header.assign_linkage_ptr,54	ptr to area for hcs_$assign_linkage calls
                        000070    2-60  	equ	stack_header.heap_header_ptr,56	ptr to heap header.
                        000072    2-61  	equ	stack_header.trace_frames,58		stack of trace_catch_ frames
                        000073    2-62  	equ	stach_header.trace_top_ptr,59		trace pointer
                        000074    2-63  	equ	stack_header.in_trace,60		trace antirecurse bit
                        000100    2-64  	equ	stack_header_end,64			length of stack header
                                  2-65  
                                  2-66  
                                  2-67  
                                  2-68  
                        000000    2-69  	equ	trace_frames.count,0		number of trace frames on stack
                        000001    2-70  	equ	trace_frames.top_ptr,1		packed pointer to top one
                                  2-71  
                                  2-72  "	The  following constant is an offset within the  pl1  operators table.
                                  2-73  "	It  references a  transfer vector table.
                                  2-74  
                        000551    2-75  	bool	tv_offset,551
                                  2-76  
                                  2-77  
                                  2-78  "	The  following constants are offsets within this transfer vector table.
                                  2-79  
                        001170    2-80  	equ	call_offset,tv_offset+271
                        001171    2-81  	equ	push_offset,tv_offset+272
                        001172    2-82  	equ	return_offset,tv_offset+273
                        001173    2-83  	equ	return_no_pop_offset,tv_offset+274
                        001174    2-84  	equ	entry_offset,tv_offset+275
                                  2-85  
                                  2-86  
                                  2-87  " 	END INCLUDE FILE stack_header.incl.alm
                                    24  	include	stack_frame
                                   3-1  "
                                   3-2  "	BEGIN INCLUDE FILE ... stack_frame.incl.alm   6/72 RBS
                                   3-3  "
                                   3-4  " Modified: 16 Dec 1977, D. Levin - to add fio_ps_ptr
                                   3-5  " Modified:  3 Feb 1978, P. Krupp - to add run_unit_manager_bit & main_proc_bit
                                   3-6  " Modified: 21 March 1978, D. Levin - change fio_ps_ptr to support_ptr
                                   3-7  "
                        000020     3-8  	equ	stack_frame.prev_sp,16
                        000020     3-9  	equ	stack_frame.condition_word,16
                        000022    3-10  	equ	stack_frame.next_sp,18
                        000022    3-11  	equ	stack_frame.signaller_word,18
                        000024    3-12  	equ	stack_frame.return_ptr,20
                        000026    3-13  	equ	stack_frame.entry_ptr,22
                        000030    3-14  	equ	stack_frame.operator_ptr,24
                        000030    3-15  	equ	stack_frame.lp_ptr,24
                        000032    3-16  	equ	stack_frame.arg_ptr,26
                        000034    3-17  	equ	stack_frame.static_ptr,28
                        000035    3-18  	equ	stack_frame.support_ptr,29	" only used by fortran I/O
                        000036    3-19  	equ	stack_frame.on_unit_rel_ptrs,30
                        000037    3-20  	equ	stack_frame.operator_ret_ptr,31
                        000037    3-21  	equ	stack_frame.translator_id,31
                        000040    3-22  	equ	stack_frame.regs,32
                        000060    3-23  	equ	stack_frame.min_length,48
                        000020    3-24  	equ	stack_frame.flag_word,16
                        020000    3-25  	bool	stack_frame.main_proc_bit,020000	(DL)
                        010000    3-26  	bool	stack_frame.run_unit_manager,010000	(DL)
                        004000    3-27  	bool	stack_frame.signal_bit,004000		(DL)
                        002000    3-28  	bool	stack_frame.crawl_out_bit,002000	(DL)
                        001000    3-29  	bool	stack_frame.signaller_bit,001000	(DL)
                        000400    3-30  	bool	stack_frame.link_trap_bit,000400	(DL)
                        000200    3-31  	bool	stack_frame.support_bit,000200	(DL)
                        000100    3-32  	bool	stack_frame.condition_bit,000100	(DL)
                                  3-33  
                                  3-34  "
                                  3-35  "	END INCLUDE FILE  ... stack_frame.incl.alm
                                  3-36  "
                                    25  
                                    26  	gate_info
                                        	use	transfer_vector
    000000  0a   000050 7100 00         	tra	.actor
                                        
                                        	use	tv_end
                                        	entrybound
                                        
                                        	use	main
                                        	join	/text/transfer_vector,tv_end,main
                                        
                                        
                                        
    000050  aa  7 00046 2721 20         .actor:	getlp
    000051  aa  0 00002 3521 20         	eppbp	ap|2,*
    000052  aa  2 77777 2351 00         	lda	bp|-1		get length of string
    000053  0a   000067 6000 00         	tze	.return_name	zero length => get name
                                        
    000054  aa   000001 0350 07         	adla	1,dl		include length of acc
    000055  aa  0 00004 4501 20         	stz	ap|4,*
    000056  0a   000102 7000 00         	tsx0	.search_defs
                                        
    000057  aa  0 00140 1065 40         	cmpc	(pr,rl),(pr,rl)	compare name
    000060  aa   277777 600005          	desc9a	bp|-1(3),al
    000061  aa   300000 000005          	desc9a	bb|0,al
    000062  0a   000112 6010 00         	tnz	.next_def
                                        
    000063  aa  1 00001 2351 12         	lda	ab|1,2		return location
    000064  aa   000022 7710 00         	arl	18
    000065  aa  0 00004 7551 20         	sta	ap|4,*
                                        
    000066  aa  7 00044 7101 20         	short_return
                                        
    000067                              .return_name:
    000067  aa  0 00004 7231 20         	lxl3	ap|4,*		get location
    000070  0a   000102 7000 00         	tsx0	.search_defs
                                        
    000071  aa  1 00001 1031 12         	cmpx3	ab|1,2		compare location
    000072  0a   000112 6010 00         	tnz	.next_def
                                        
    000073  aa  3 00000 2351 00         	lda	bb|0		get length of name
    000074  aa   000033 7710 00         	arl	27
    000075  aa  2 77777 7551 00         	sta	bp|-1		set length of varying string
    000076  aa  0 00140 1005 40         	mlr	(pr,rl),(pr,rl)	return string
    000077  aa   300000 200005          	desc9a	bb|0(1),al
    000100  aa   200000 000005          	desc9a	bp|0,al
                                        
    000101  aa  7 00044 7101 20         	short_return
                                        
    000102                              .search_defs:
    000102  aa   000000 6220 00         	eax2	0
    000103  aa  4 00000 3515 20         	eppab	lp|0,*		ab -> defs
    000104                              .defs_loop:
    000104  aa  1 00001 7211 12         	lxl1	ab|1,2		get class and flags
    000105  aa   400000 1010 03         	cmpx1	=o400000,du	must be class 0
    000106  0a   000112 6010 00         	tnz	.next_def
                                        
    000107  aa  1 00002 2271 12         	ldx7	ab|2,2
    000110  aa  1 00000 3535 17         	eppbb	ab|0,7		bb -> name
    000111  aa   000000 7100 10         	tra	0,0		test definition
    000112                              .next_def:
    000112  aa  1 00000 2221 12         	ldx2	ab|0,2		chain to next def
    000113  0a   000104 6010 00         	tnz	.defs_loop
                                        
    000114  aa  7 00044 7101 20         	short_return
                                        
                                        
                                        
                                        
    000115  aa   000060 6270 00         .setup:	push
    000116  aa  7 00040 2721 20
    000117  aa  7 00046 2721 20         	getlp
    000120  aa   777776 2210 12         	ldx1	-2,2		get number of args expected
    000121  0a   000146 6000 00         	tze	.no_gate_error	if zero, none or doesn't matter
    000122  aa  0 00000 1011 00         	cmpx1	ap|0		compare against number given
    000123  0a   000146 6000 00         	tze	.no_gate_error	args match, call procedure
                                        
    000124  aa  6 00000 2541 00         	call	signal_$signal_(signal_arglist)
    000125  0a   000134 3500 00
    000126  4a  4 00010 3521 20
    000127  aa  6 00040 7531 00
    000130  aa  7 00036 6701 20
    000131  aa  6 00000 1731 00
    000132  aa  6 00040 0731 00
    000133  aa   000000 000000          	oct	0
                                        
                                        	even
    000134                              signal_arglist:
    000134  aa   000002 000004          	zero	2,4
    000135  aa   000002 000000          	zero	2,0
    000136  0a   000142 0000 00         	arg	.gate_errorname
    000137  aa   000000 0000 00         	arg
    000140  0a   000145 0000 00         	arg	.gate_errordesc
    000141  aa   000000 0000 00         	arg
                                        
                                        	string	gate_error
    000142                              .gate_errorname:
    000142  aa  147 141 164 145         	aci	"gate_error"
    000143  aa  137 145 162 162
    000144  aa  157 162 000 000
    000145                              .gate_errordesc:
    000145  aa   525000 000010          	vfd	o9/525,o27/10
                                        
                                        
                                        
    000146                              .no_gate_error:
    000146  aa   000000 7100 12         	tra	0,2
                                        
                                        
                                        
                                    27  
                                    28  
                                    29  	gate	validate,mseg_mbx_ms_gate_target_,validate,3
                        000001          	segdef	validate
    000001                              validate:
    000001  0a   000150 7100 00         	tra	validate.e
    000147  aa   000006 000000          	zero	3*2,0
    000150                              validate.e:
    000150  0a   000115 7020 00         	tsx2	.setup
    000151  aa   000000 6340 07         	ldi	=0,dl
    000152  4a  4 00012 3521 20         	short_call mseg_mbx_ms_gate_target_$validate(ap|0)
    000153  aa  7 00036 6701 20
    000154  aa  6 00030 3701 20
    000155  aa  7 00042 7101 20         	return
                                        
                                    30  	gate	create,mseg_mbx_ms_gate_target_,create,3
                        000002          	segdef	create
    000002                              create:
    000002  0a   000157 7100 00         	tra	create.e
    000156  aa   000006 000000          	zero	3*2,0
    000157                              create.e:
    000157  0a   000115 7020 00         	tsx2	.setup
    000160  aa   000000 6340 07         	ldi	=0,dl
    000161  4a  4 00014 3521 20         	short_call mseg_mbx_ms_gate_target_$create(ap|0)
    000162  aa  7 00036 6701 20
    000163  aa  6 00030 3701 20
    000164  aa  7 00042 7101 20         	return
                                        
                                    31  	gate	delete,mseg_mbx_ms_gate_target_,delete_mseg,3
                        000003          	segdef	delete
    000003                              delete:
    000003  0a   000166 7100 00         	tra	delete.e
    000165  aa   000006 000000          	zero	3*2,0
    000166                              delete.e:
    000166  0a   000115 7020 00         	tsx2	.setup
    000167  aa   000000 6340 07         	ldi	=0,dl
    000170  4a  4 00016 3521 20         	short_call mseg_mbx_ms_gate_target_$delete_mseg(ap|0)
    000171  aa  7 00036 6701 20
    000172  aa  6 00030 3701 20
    000173  aa  7 00042 7101 20         	return
                                        
                                    32  	gate	copy,mseg_mbx_ms_gate_target_,copy,6
                        000004          	segdef	copy
    000004                              copy:
    000004  0a   000175 7100 00         	tra	copy.e
    000174  aa   000014 000000          	zero	6*2,0
    000175                              copy.e:
    000175  0a   000115 7020 00         	tsx2	.setup
    000176  aa   000000 6340 07         	ldi	=0,dl
    000177  4a  4 00020 3521 20         	short_call mseg_mbx_ms_gate_target_$copy(ap|0)
    000200  aa  7 00036 6701 20
    000201  aa  6 00030 3701 20
    000202  aa  7 00042 7101 20         	return
                                        
                                    33  	gate	chname_file,mseg_mbx_ms_gate_target_,chname,5
                        000005          	segdef	chname_file
    000005                              chname_file:
    000005  0a   000204 7100 00         	tra	chname_file.e
    000203  aa   000012 000000          	zero	5*2,0
    000204                              chname_file.e:
    000204  0a   000115 7020 00         	tsx2	.setup
    000205  aa   000000 6340 07         	ldi	=0,dl
    000206  4a  4 00022 3521 20         	short_call mseg_mbx_ms_gate_target_$chname(ap|0)
    000207  aa  7 00036 6701 20
    000210  aa  6 00030 3701 20
    000211  aa  7 00042 7101 20         	return
                                        
                                    34  	gate	set_max_length_file,mseg_mbx_ms_gate_target_,set_max_length_file,4
                        000006          	segdef	set_max_length_file
    000006                              set_max_length_file:
    000006  0a   000213 7100 00         	tra	set_max_length_file.e
    000212  aa   000010 000000          	zero	4*2,0
    000213                              set_max_length_file.e:
    000213  0a   000115 7020 00         	tsx2	.setup
    000214  aa   000000 6340 07         	ldi	=0,dl
    000215  4a  4 00024 3521 20         	short_call mseg_mbx_ms_gate_target_$set_max_length_file(ap|0)
    000216  aa  7 00036 6701 20
    000217  aa  6 00030 3701 20
    000220  aa  7 00042 7101 20         	return
                                        
                                    35  	gate	set_safety_switch,mseg_mbx_ms_gate_target_,set_safety_switch,4
                        000007          	segdef	set_safety_switch
    000007                              set_safety_switch:
    000007  0a   000222 7100 00         	tra	set_safety_switch.e
    000221  aa   000010 000000          	zero	4*2,0
    000222                              set_safety_switch.e:
    000222  0a   000115 7020 00         	tsx2	.setup
    000223  aa   000000 6340 07         	ldi	=0,dl
    000224  4a  4 00026 3521 20         	short_call mseg_mbx_ms_gate_target_$set_safety_switch(ap|0)
    000225  aa  7 00036 6701 20
    000226  aa  6 00030 3701 20
    000227  aa  7 00042 7101 20         	return
                                        
                                    36  	gate	open,mseg_mbx_ms_gate_target_,open,4
                        000010          	segdef	open
    000010                              open:
    000010  0a   000231 7100 00         	tra	open.e
    000230  aa   000010 000000          	zero	4*2,0
    000231                              open.e:
    000231  0a   000115 7020 00         	tsx2	.setup
    000232  aa   000000 6340 07         	ldi	=0,dl
    000233  4a  4 00030 3521 20         	short_call mseg_mbx_ms_gate_target_$open(ap|0)
    000234  aa  7 00036 6701 20
    000235  aa  6 00030 3701 20
    000236  aa  7 00042 7101 20         	return
                                        
                                    37  	gate	close,mseg_mbx_ms_gate_target_,close,2
                        000011          	segdef	close
    000011                              close:
    000011  0a   000240 7100 00         	tra	close.e
    000237  aa   000004 000000          	zero	2*2,0
    000240                              close.e:
    000240  0a   000115 7020 00         	tsx2	.setup
    000241  aa   000000 6340 07         	ldi	=0,dl
    000242  4a  4 00032 3521 20         	short_call mseg_mbx_ms_gate_target_$close(ap|0)
    000243  aa  7 00036 6701 20
    000244  aa  6 00030 3701 20
    000245  aa  7 00042 7101 20         	return
                                        
                                    38  
                                    39  "**************************************************************
                                    40  
                                    41  	gate	ms_acl_add,mseg_mbx_ms_gate_target_,ex_acl_add,5
                        000012          	segdef	ms_acl_add
    000012                              ms_acl_add:
    000012  0a   000247 7100 00         	tra	ms_acl_add.e
    000246  aa   000012 000000          	zero	5*2,0
    000247                              ms_acl_add.e:
    000247  0a   000115 7020 00         	tsx2	.setup
    000250  aa   000000 6340 07         	ldi	=0,dl
    000251  4a  4 00034 3521 20         	short_call mseg_mbx_ms_gate_target_$ex_acl_add(ap|0)
    000252  aa  7 00036 6701 20
    000253  aa  6 00030 3701 20
    000254  aa  7 00042 7101 20         	return
                                        
                                    42  	gate	ms_acl_delete,mseg_mbx_ms_gate_target_,ex_acl_delete,6
                        000013          	segdef	ms_acl_delete
    000013                              ms_acl_delete:
    000013  0a   000256 7100 00         	tra	ms_acl_delete.e
    000255  aa   000014 000000          	zero	6*2,0
    000256                              ms_acl_delete.e:
    000256  0a   000115 7020 00         	tsx2	.setup
    000257  aa   000000 6340 07         	ldi	=0,dl
    000260  4a  4 00036 3521 20         	short_call mseg_mbx_ms_gate_target_$ex_acl_delete(ap|0)
    000261  aa  7 00036 6701 20
    000262  aa  6 00030 3701 20
    000263  aa  7 00042 7101 20         	return
                                        
                                    43  	gate	ms_acl_list,mseg_mbx_ms_gate_target_,ex_acl_list,6
                        000014          	segdef	ms_acl_list
    000014                              ms_acl_list:
    000014  0a   000265 7100 00         	tra	ms_acl_list.e
    000264  aa   000014 000000          	zero	6*2,0
    000265                              ms_acl_list.e:
    000265  0a   000115 7020 00         	tsx2	.setup
    000266  aa   000000 6340 07         	ldi	=0,dl
    000267  4a  4 00040 3521 20         	short_call mseg_mbx_ms_gate_target_$ex_acl_list(ap|0)
    000270  aa  7 00036 6701 20
    000271  aa  6 00030 3701 20
    000272  aa  7 00042 7101 20         	return
                                        
                                    44  	gate	ms_acl_replace,mseg_mbx_ms_gate_target_,ex_acl_replace,5
                        000015          	segdef	ms_acl_replace
    000015                              ms_acl_replace:
    000015  0a   000274 7100 00         	tra	ms_acl_replace.e
    000273  aa   000012 000000          	zero	5*2,0
    000274                              ms_acl_replace.e:
    000274  0a   000115 7020 00         	tsx2	.setup
    000275  aa   000000 6340 07         	ldi	=0,dl
    000276  4a  4 00042 3521 20         	short_call mseg_mbx_ms_gate_target_$ex_acl_replace(ap|0)
    000277  aa  7 00036 6701 20
    000300  aa  6 00030 3701 20
    000301  aa  7 00042 7101 20         	return
                                        
                                    45  
                                    46  "**************************************************************
                                    47  
                                    48  	gate	read_message_index,mseg_mbx_ms_gate_target_,general_read_index,4
                        000016          	segdef	read_message_index
    000016                              read_message_index:
    000016  0a   000303 7100 00         	tra	read_message_index.e
    000302  aa   000010 000000          	zero	4*2,0
    000303                              read_message_index.e:
    000303  0a   000115 7020 00         	tsx2	.setup
    000304  aa   000000 6340 07         	ldi	=0,dl
    000305  4a  4 00044 3521 20         	short_call mseg_mbx_ms_gate_target_$general_read_index(ap|0)
    000306  aa  7 00036 6701 20
    000307  aa  6 00030 3701 20
    000310  aa  7 00042 7101 20         	return
                                        
                                    49  	gate	read_message_file,mseg_mbx_ms_gate_target_,general_read_file,5
                        000017          	segdef	read_message_file
    000017                              read_message_file:
    000017  0a   000312 7100 00         	tra	read_message_file.e
    000311  aa   000012 000000          	zero	5*2,0
    000312                              read_message_file.e:
    000312  0a   000115 7020 00         	tsx2	.setup
    000313  aa   000000 6340 07         	ldi	=0,dl
    000314  4a  4 00046 3521 20         	short_call mseg_mbx_ms_gate_target_$general_read_file(ap|0)
    000315  aa  7 00036 6701 20
    000316  aa  6 00030 3701 20
    000317  aa  7 00042 7101 20         	return
                                        
                                    50  	gate	read_index,mseg_mbx_ms_gate_target_,read_index,5
                        000020          	segdef	read_index
    000020                              read_index:
    000020  0a   000321 7100 00         	tra	read_index.e
    000320  aa   000012 000000          	zero	5*2,0
    000321                              read_index.e:
    000321  0a   000115 7020 00         	tsx2	.setup
    000322  aa   000000 6340 07         	ldi	=0,dl
    000323  4a  4 00050 3521 20         	short_call mseg_mbx_ms_gate_target_$read_index(ap|0)
    000324  aa  7 00036 6701 20
    000325  aa  6 00030 3701 20
    000326  aa  7 00042 7101 20         	return
                                        
                                    51  	gate	delete_index,mseg_mbx_ms_gate_target_,delete_index,3
                        000021          	segdef	delete_index
    000021                              delete_index:
    000021  0a   000330 7100 00         	tra	delete_index.e
    000327  aa   000006 000000          	zero	3*2,0
    000330                              delete_index.e:
    000330  0a   000115 7020 00         	tsx2	.setup
    000331  aa   000000 6340 07         	ldi	=0,dl
    000332  4a  4 00052 3521 20         	short_call mseg_mbx_ms_gate_target_$delete_index(ap|0)
    000333  aa  7 00036 6701 20
    000334  aa  6 00030 3701 20
    000335  aa  7 00042 7101 20         	return
                                        
                                    52  	gate	read_delete_index,mseg_mbx_ms_gate_target_,read_delete_index,5
                        000022          	segdef	read_delete_index
    000022                              read_delete_index:
    000022  0a   000337 7100 00         	tra	read_delete_index.e
    000336  aa   000012 000000          	zero	5*2,0
    000337                              read_delete_index.e:
    000337  0a   000115 7020 00         	tsx2	.setup
    000340  aa   000000 6340 07         	ldi	=0,dl
    000341  4a  4 00054 3521 20         	short_call mseg_mbx_ms_gate_target_$read_delete_index(ap|0)
    000342  aa  7 00036 6701 20
    000343  aa  6 00030 3701 20
    000344  aa  7 00042 7101 20         	return
                                        
                                    53  	gate	add_index,mseg_mbx_ms_gate_target_,add_index,5
                        000023          	segdef	add_index
    000023                              add_index:
    000023  0a   000346 7100 00         	tra	add_index.e
    000345  aa   000012 000000          	zero	5*2,0
    000346                              add_index.e:
    000346  0a   000115 7020 00         	tsx2	.setup
    000347  aa   000000 6340 07         	ldi	=0,dl
    000350  4a  4 00056 3521 20         	short_call mseg_mbx_ms_gate_target_$add_index(ap|0)
    000351  aa  7 00036 6701 20
    000352  aa  6 00030 3701 20
    000353  aa  7 00042 7101 20         	return
                                        
                                    54  	gate	incremental_read_index,mseg_mbx_ms_gate_target_,incremental_read_index,6
                        000024          	segdef	incremental_read_index
    000024                              incremental_read_index:
    000024  0a   000355 7100 00         	tra	incremental_read_index.e
    000354  aa   000014 000000          	zero	6*2,0
    000355                              incremental_read_index.e:
    000355  0a   000115 7020 00         	tsx2	.setup
    000356  aa   000000 6340 07         	ldi	=0,dl
    000357  4a  4 00060 3521 20         	short_call mseg_mbx_ms_gate_target_$incremental_read_index(ap|0)
    000360  aa  7 00036 6701 20
    000361  aa  6 00030 3701 20
    000362  aa  7 00042 7101 20         	return
                                        
                                    55  	gate	get_message_count_index,mseg_mbx_ms_gate_target_,get_message_count_index,3
                        000025          	segdef	get_message_count_index
    000025                              get_message_count_index:
    000025  0a   000364 7100 00         	tra	get_message_count_index.e
    000363  aa   000006 000000          	zero	3*2,0
    000364                              get_message_count_index.e:
    000364  0a   000115 7020 00         	tsx2	.setup
    000365  aa   000000 6340 07         	ldi	=0,dl
    000366  4a  4 00062 3521 20         	short_call mseg_mbx_ms_gate_target_$get_message_count_index(ap|0)
    000367  aa  7 00036 6701 20
    000370  aa  6 00030 3701 20
    000371  aa  7 00042 7101 20         	return
                                        
                                    56  	gate	get_mode_index,mseg_mbx_ms_gate_target_,get_mode_index,3
                        000026          	segdef	get_mode_index
    000026                              get_mode_index:
    000026  0a   000373 7100 00         	tra	get_mode_index.e
    000372  aa   000006 000000          	zero	3*2,0
    000373                              get_mode_index.e:
    000373  0a   000115 7020 00         	tsx2	.setup
    000374  aa   000000 6340 07         	ldi	=0,dl
    000375  4a  4 00064 3521 20         	short_call mseg_mbx_ms_gate_target_$get_mode_index(ap|0)
    000376  aa  7 00036 6701 20
    000377  aa  6 00030 3701 20
    000400  aa  7 00042 7101 20         	return
                                        
                                    57  	gate	check_salv_bit_index,mseg_mbx_ms_gate_target_,check_salv_bit_index,4
                        000027          	segdef	check_salv_bit_index
    000027                              check_salv_bit_index:
    000027  0a   000402 7100 00         	tra	check_salv_bit_index.e
    000401  aa   000010 000000          	zero	4*2,0
    000402                              check_salv_bit_index.e:
    000402  0a   000115 7020 00         	tsx2	.setup
    000403  aa   000000 6340 07         	ldi	=0,dl
    000404  4a  4 00066 3521 20         	short_call mseg_mbx_ms_gate_target_$check_salv_bit_index(ap|0)
    000405  aa  7 00036 6701 20
    000406  aa  6 00030 3701 20
    000407  aa  7 00042 7101 20         	return
                                        
                                    58  	gate	update_message_index,mseg_mbx_ms_gate_target_,update_message_index,5
                        000030          	segdef	update_message_index
    000030                              update_message_index:
    000030  0a   000411 7100 00         	tra	update_message_index.e
    000410  aa   000012 000000          	zero	5*2,0
    000411                              update_message_index.e:
    000411  0a   000115 7020 00         	tsx2	.setup
    000412  aa   000000 6340 07         	ldi	=0,dl
    000413  4a  4 00070 3521 20         	short_call mseg_mbx_ms_gate_target_$update_message_index(ap|0)
    000414  aa  7 00036 6701 20
    000415  aa  6 00030 3701 20
    000416  aa  7 00042 7101 20         	return
                                        
                                    59  	gate	compact_index,mseg_mbx_ms_gate_target_,compact_index,3
                        000031          	segdef	compact_index
    000031                              compact_index:
    000031  0a   000420 7100 00         	tra	compact_index.e
    000417  aa   000006 000000          	zero	3*2,0
    000420                              compact_index.e:
    000420  0a   000115 7020 00         	tsx2	.setup
    000421  aa   000000 6340 07         	ldi	=0,dl
    000422  4a  4 00072 3521 20         	short_call mseg_mbx_ms_gate_target_$compact_index(ap|0)
    000423  aa  7 00036 6701 20
    000424  aa  6 00030 3701 20
    000425  aa  7 00042 7101 20         	return
                                        
                                    60  
                                    61  "**************************************************************
                                    62  
                                    63  	gate	read_file,mseg_mbx_ms_gate_target_,read_file,6
                        000032          	segdef	read_file
    000032                              read_file:
    000032  0a   000427 7100 00         	tra	read_file.e
    000426  aa   000014 000000          	zero	6*2,0
    000427                              read_file.e:
    000427  0a   000115 7020 00         	tsx2	.setup
    000430  aa   000000 6340 07         	ldi	=0,dl
    000431  4a  4 00074 3521 20         	short_call mseg_mbx_ms_gate_target_$read_file(ap|0)
    000432  aa  7 00036 6701 20
    000433  aa  6 00030 3701 20
    000434  aa  7 00042 7101 20         	return
                                        
                                    64  	gate	delete_file,mseg_mbx_ms_gate_target_,delete_file,4
                        000033          	segdef	delete_file
    000033                              delete_file:
    000033  0a   000436 7100 00         	tra	delete_file.e
    000435  aa   000010 000000          	zero	4*2,0
    000436                              delete_file.e:
    000436  0a   000115 7020 00         	tsx2	.setup
    000437  aa   000000 6340 07         	ldi	=0,dl
    000440  4a  4 00076 3521 20         	short_call mseg_mbx_ms_gate_target_$delete_file(ap|0)
    000441  aa  7 00036 6701 20
    000442  aa  6 00030 3701 20
    000443  aa  7 00042 7101 20         	return
                                        
                                    65  	gate	read_delete_file,mseg_mbx_ms_gate_target_,read_delete_file,6
                        000034          	segdef	read_delete_file
    000034                              read_delete_file:
    000034  0a   000445 7100 00         	tra	read_delete_file.e
    000444  aa   000014 000000          	zero	6*2,0
    000445                              read_delete_file.e:
    000445  0a   000115 7020 00         	tsx2	.setup
    000446  aa   000000 6340 07         	ldi	=0,dl
    000447  4a  4 00100 3521 20         	short_call mseg_mbx_ms_gate_target_$read_delete_file(ap|0)
    000450  aa  7 00036 6701 20
    000451  aa  6 00030 3701 20
    000452  aa  7 00042 7101 20         	return
                                        
                                    66  	gate	add_file,mseg_mbx_ms_gate_target_,add_file,6
                        000035          	segdef	add_file
    000035                              add_file:
    000035  0a   000454 7100 00         	tra	add_file.e
    000453  aa   000014 000000          	zero	6*2,0
    000454                              add_file.e:
    000454  0a   000115 7020 00         	tsx2	.setup
    000455  aa   000000 6340 07         	ldi	=0,dl
    000456  4a  4 00102 3521 20         	short_call mseg_mbx_ms_gate_target_$add_file(ap|0)
    000457  aa  7 00036 6701 20
    000460  aa  6 00030 3701 20
    000461  aa  7 00042 7101 20         	return
                                        
                                    67  	gate	incremental_read_file,mseg_mbx_ms_gate_target_,incremental_read_file,7
                        000036          	segdef	incremental_read_file
    000036                              incremental_read_file:
    000036  0a   000463 7100 00         	tra	incremental_read_file.e
    000462  aa   000016 000000          	zero	7*2,0
    000463                              incremental_read_file.e:
    000463  0a   000115 7020 00         	tsx2	.setup
    000464  aa   000000 6340 07         	ldi	=0,dl
    000465  4a  4 00104 3521 20         	short_call mseg_mbx_ms_gate_target_$incremental_read_file(ap|0)
    000466  aa  7 00036 6701 20
    000467  aa  6 00030 3701 20
    000470  aa  7 00042 7101 20         	return
                                        
                                    68  	gate	get_message_count_file,mseg_mbx_ms_gate_target_,get_message_count_file,4
                        000037          	segdef	get_message_count_file
    000037                              get_message_count_file:
    000037  0a   000472 7100 00         	tra	get_message_count_file.e
    000471  aa   000010 000000          	zero	4*2,0
    000472                              get_message_count_file.e:
    000472  0a   000115 7020 00         	tsx2	.setup
    000473  aa   000000 6340 07         	ldi	=0,dl
    000474  4a  4 00106 3521 20         	short_call mseg_mbx_ms_gate_target_$get_message_count_file(ap|0)
    000475  aa  7 00036 6701 20
    000476  aa  6 00030 3701 20
    000477  aa  7 00042 7101 20         	return
                                        
                                    69  	gate	get_mode_file,mseg_mbx_ms_gate_target_,get_mode_file,4
                        000040          	segdef	get_mode_file
    000040                              get_mode_file:
    000040  0a   000501 7100 00         	tra	get_mode_file.e
    000500  aa   000010 000000          	zero	4*2,0
    000501                              get_mode_file.e:
    000501  0a   000115 7020 00         	tsx2	.setup
    000502  aa   000000 6340 07         	ldi	=0,dl
    000503  4a  4 00110 3521 20         	short_call mseg_mbx_ms_gate_target_$get_mode_file(ap|0)
    000504  aa  7 00036 6701 20
    000505  aa  6 00030 3701 20
    000506  aa  7 00042 7101 20         	return
                                        
                                    70  	gate	check_salv_bit_file,mseg_mbx_ms_gate_target_,check_salv_bit_file,5
                        000041          	segdef	check_salv_bit_file
    000041                              check_salv_bit_file:
    000041  0a   000510 7100 00         	tra	check_salv_bit_file.e
    000507  aa   000012 000000          	zero	5*2,0
    000510                              check_salv_bit_file.e:
    000510  0a   000115 7020 00         	tsx2	.setup
    000511  aa   000000 6340 07         	ldi	=0,dl
    000512  4a  4 00112 3521 20         	short_call mseg_mbx_ms_gate_target_$check_salv_bit_file(ap|0)
    000513  aa  7 00036 6701 20
    000514  aa  6 00030 3701 20
    000515  aa  7 00042 7101 20         	return
                                        
                                    71  	gate	update_message_file,mseg_mbx_ms_gate_target_,update_message_file,6
                        000042          	segdef	update_message_file
    000042                              update_message_file:
    000042  0a   000517 7100 00         	tra	update_message_file.e
    000516  aa   000014 000000          	zero	6*2,0
    000517                              update_message_file.e:
    000517  0a   000115 7020 00         	tsx2	.setup
    000520  aa   000000 6340 07         	ldi	=0,dl
    000521  4a  4 00114 3521 20         	short_call mseg_mbx_ms_gate_target_$update_message_file(ap|0)
    000522  aa  7 00036 6701 20
    000523  aa  6 00030 3701 20
    000524  aa  7 00042 7101 20         	return
                                        
                                    72  	gate	compact_file,mseg_mbx_ms_gate_target_,compact_file,4
                        000043          	segdef	compact_file
    000043                              compact_file:
    000043  0a   000526 7100 00         	tra	compact_file.e
    000525  aa   000010 000000          	zero	4*2,0
    000526                              compact_file.e:
    000526  0a   000115 7020 00         	tsx2	.setup
    000527  aa   000000 6340 07         	ldi	=0,dl
    000530  4a  4 00116 3521 20         	short_call mseg_mbx_ms_gate_target_$compact_file(ap|0)
    000531  aa  7 00036 6701 20
    000532  aa  6 00030 3701 20
    000533  aa  7 00042 7101 20         	return
                                        
                                    73  
                                    74  "**************************************************************
                                    75  
                                    76  	gate	own_read_index,mseg_mbx_ms_gate_target_,o_read_index,5
                        000044          	segdef	own_read_index
    000044                              own_read_index:
    000044  0a   000535 7100 00         	tra	own_read_index.e
    000534  aa   000012 000000          	zero	5*2,0
    000535                              own_read_index.e:
    000535  0a   000115 7020 00         	tsx2	.setup
    000536  aa   000000 6340 07         	ldi	=0,dl
    000537  4a  4 00120 3521 20         	short_call mseg_mbx_ms_gate_target_$o_read_index(ap|0)
    000540  aa  7 00036 6701 20
    000541  aa  6 00030 3701 20
    000542  aa  7 00042 7101 20         	return
                                        
                                    77  	gate	own_incremental_read_index,mseg_mbx_ms_gate_target_,o_incremental_read_index,6
                        000045          	segdef	own_incremental_read_index
    000045                              own_incremental_read_index:
    000045  0a   000544 7100 00         	tra	own_incremental_read_index.e
    000543  aa   000014 000000          	zero	6*2,0
    000544                              own_incremental_read_index.e:
    000544  0a   000115 7020 00         	tsx2	.setup
    000545  aa   000000 6340 07         	ldi	=0,dl
    000546  4a  4 00122 3521 20         	short_call mseg_mbx_ms_gate_target_$o_incremental_read_index(ap|0)
    000547  aa  7 00036 6701 20
    000550  aa  6 00030 3701 20
    000551  aa  7 00042 7101 20         	return
                                        
                                    78  	gate	own_read_file,mseg_mbx_ms_gate_target_,o_read_file,6
                        000046          	segdef	own_read_file
    000046                              own_read_file:
    000046  0a   000553 7100 00         	tra	own_read_file.e
    000552  aa   000014 000000          	zero	6*2,0
    000553                              own_read_file.e:
    000553  0a   000115 7020 00         	tsx2	.setup
    000554  aa   000000 6340 07         	ldi	=0,dl
    000555  4a  4 00124 3521 20         	short_call mseg_mbx_ms_gate_target_$o_read_file(ap|0)
    000556  aa  7 00036 6701 20
    000557  aa  6 00030 3701 20
    000560  aa  7 00042 7101 20         	return
                                        
                                    79  	gate	own_incremental_read_file,mseg_mbx_ms_gate_target_,o_incremental_read_file,7
                        000047          	segdef	own_incremental_read_file
    000047                              own_incremental_read_file:
    000047  0a   000562 7100 00         	tra	own_incremental_read_file.e
    000561  aa   000016 000000          	zero	7*2,0
    000562                              own_incremental_read_file.e:
    000562  0a   000115 7020 00         	tsx2	.setup
    000563  aa   000000 6340 07         	ldi	=0,dl
    000564  4a  4 00126 3521 20         	short_call mseg_mbx_ms_gate_target_$o_incremental_read_file(ap|0)
    000565  aa  7 00036 6701 20
    000566  aa  6 00030 3701 20
    000567  aa  7 00042 7101 20         	return
                                        
                                    80  
                                    81  "**************************************************************
                                    82  
                                    83  	end

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000570  5a   000003 000000 
    000571  5a   000452 600000 
    000572  aa   000000 000000 
    000573  55   000013 000002 
    000574  5a   000002 400003 
    000575  55   000006 000013 
    000576  aa  020 155 145 163
    000577  aa  163 141 147 145
    000600  aa  137 163 145 147
    000601  aa  155 145 156 164
    000602  aa  137 000 000 000
    000603  55   000025 000003 
    000604  0a   000047 400000 
    000605  55   000016 000003 
    000606  aa  031 157 167 156         own_incremental_read_file
    000607  aa  137 151 156 143
    000610  aa  162 145 155 145
    000611  aa  156 164 141 154
    000612  aa  137 162 145 141
    000613  aa  144 137 146 151
    000614  aa  154 145 000 000
    000615  55   000034 000013 
    000616  0a   000046 400000 
    000617  55   000030 000003 
    000620  aa  015 157 167 156         own_read_file
    000621  aa  137 162 145 141
    000622  aa  144 137 146 151
    000623  aa  154 145 000 000
    000624  55   000046 000025 
    000625  0a   000045 400000 
    000626  55   000037 000003 
    000627  aa  032 157 167 156         own_incremental_read_index
    000630  aa  137 151 156 143
    000631  aa  162 145 155 145
    000632  aa  156 164 141 154
    000633  aa  137 162 145 141
    000634  aa  144 137 151 156
    000635  aa  144 145 170 000
    000636  55   000055 000034 
    000637  0a   000044 400000 
    000640  55   000051 000003 
    000641  aa  016 157 167 156         own_read_index
    000642  aa  137 162 145 141
    000643  aa  144 137 151 156
    000644  aa  144 145 170 000
    000645  55   000064 000046 
    000646  0a   000043 400000 
    000647  55   000060 000003 
    000650  aa  014 143 157 155         compact_file
    000651  aa  160 141 143 164
    000652  aa  137 146 151 154
    000653  aa  145 000 000 000
    000654  55   000074 000055 
    000655  0a   000042 400000 
    000656  55   000067 000003 
    000657  aa  023 165 160 144         update_message_file
    000660  aa  141 164 145 137
    000661  aa  155 145 163 163
    000662  aa  141 147 145 137
    000663  aa  146 151 154 145
    000664  55   000104 000064 
    000665  0a   000041 400000 
    000666  55   000077 000003 
    000667  aa  023 143 150 145         check_salv_bit_file
    000670  aa  143 153 137 163
    000671  aa  141 154 166 137
    000672  aa  142 151 164 137
    000673  aa  146 151 154 145
    000674  55   000113 000074 
    000675  0a   000040 400000 
    000676  55   000107 000003 
    000677  aa  015 147 145 164         get_mode_file
    000700  aa  137 155 157 144
    000701  aa  145 137 146 151
    000702  aa  154 145 000 000
    000703  55   000124 000104 
    000704  0a   000037 400000 
    000705  55   000116 000003 
    000706  aa  026 147 145 164         get_message_count_file
    000707  aa  137 155 145 163
    000710  aa  163 141 147 145
    000711  aa  137 143 157 165
    000712  aa  156 164 137 146
    000713  aa  151 154 145 000
    000714  55   000135 000113 
    000715  0a   000036 400000 
    000716  55   000127 000003 
    000717  aa  025 151 156 143         incremental_read_file
    000720  aa  162 145 155 145
    000721  aa  156 164 141 154
    000722  aa  137 162 145 141
    000723  aa  144 137 146 151
    000724  aa  154 145 000 000
    000725  55   000143 000124 
    000726  0a   000035 400000 
    000727  55   000140 000003 
    000730  aa  010 141 144 144         add_file
    000731  aa  137 146 151 154
    000732  aa  145 000 000 000
    000733  55   000153 000135 
    000734  0a   000034 400000 
    000735  55   000146 000003 
    000736  aa  020 162 145 141         read_delete_file
    000737  aa  144 137 144 145
    000740  aa  154 145 164 145
    000741  aa  137 146 151 154
    000742  aa  145 000 000 000
    000743  55   000161 000143 
    000744  0a   000033 400000 
    000745  55   000156 000003 
    000746  aa  013 144 145 154         delete_file
    000747  aa  145 164 145 137
    000750  aa  146 151 154 145
    000751  55   000167 000153 
    000752  0a   000032 400000 
    000753  55   000164 000003 
    000754  aa  011 162 145 141         read_file
    000755  aa  144 137 146 151
    000756  aa  154 145 000 000
    000757  55   000176 000161 
    000760  0a   000031 400000 
    000761  55   000172 000003 
    000762  aa  015 143 157 155         compact_index
    000763  aa  160 141 143 164
    000764  aa  137 151 156 144
    000765  aa  145 170 000 000
    000766  55   000207 000167 
    000767  0a   000030 400000 
    000770  55   000201 000003 
    000771  aa  024 165 160 144         update_message_index
    000772  aa  141 164 145 137
    000773  aa  155 145 163 163
    000774  aa  141 147 145 137
    000775  aa  151 156 144 145
    000776  aa  170 000 000 000
    000777  55   000220 000176 
    001000  0a   000027 400000 
    001001  55   000212 000003 
    001002  aa  024 143 150 145         check_salv_bit_index
    001003  aa  143 153 137 163
    001004  aa  141 154 166 137
    001005  aa  142 151 164 137
    001006  aa  151 156 144 145
    001007  aa  170 000 000 000
    001010  55   000227 000207 
    001011  0a   000026 400000 
    001012  55   000223 000003 
    001013  aa  016 147 145 164         get_mode_index
    001014  aa  137 155 157 144
    001015  aa  145 137 151 156
    001016  aa  144 145 170 000
    001017  55   000240 000220 
    001020  0a   000025 400000 
    001021  55   000232 000003 
    001022  aa  027 147 145 164         get_message_count_index
    001023  aa  137 155 145 163
    001024  aa  163 141 147 145
    001025  aa  137 143 157 165
    001026  aa  156 164 137 151
    001027  aa  156 144 145 170
    001030  55   000251 000227 
    001031  0a   000024 400000 
    001032  55   000243 000003 
    001033  aa  026 151 156 143         incremental_read_index
    001034  aa  162 145 155 145
    001035  aa  156 164 141 154
    001036  aa  137 162 145 141
    001037  aa  144 137 151 156
    001040  aa  144 145 170 000
    001041  55   000257 000240 
    001042  0a   000023 400000 
    001043  55   000254 000003 
    001044  aa  011 141 144 144         add_index
    001045  aa  137 151 156 144
    001046  aa  145 170 000 000
    001047  55   000267 000251 
    001050  0a   000022 400000 
    001051  55   000262 000003 
    001052  aa  021 162 145 141         read_delete_index
    001053  aa  144 137 144 145
    001054  aa  154 145 164 145
    001055  aa  137 151 156 144
    001056  aa  145 170 000 000
    001057  55   000276 000257 
    001060  0a   000021 400000 
    001061  55   000272 000003 
    001062  aa  014 144 145 154         delete_index
    001063  aa  145 164 145 137
    001064  aa  151 156 144 145
    001065  aa  170 000 000 000
    001066  55   000304 000267 
    001067  0a   000020 400000 
    001070  55   000301 000003 
    001071  aa  012 162 145 141         read_index
    001072  aa  144 137 151 156
    001073  aa  144 145 170 000
    001074  55   000314 000276 
    001075  0a   000017 400000 
    001076  55   000307 000003 
    001077  aa  021 162 145 141         read_message_file
    001100  aa  144 137 155 145
    001101  aa  163 163 141 147
    001102  aa  145 137 146 151
    001103  aa  154 145 000 000
    001104  55   000324 000304 
    001105  0a   000016 400000 
    001106  55   000317 000003 
    001107  aa  022 162 145 141         read_message_index
    001110  aa  144 137 155 145
    001111  aa  163 163 141 147
    001112  aa  145 137 151 156
    001113  aa  144 145 170 000
    001114  55   000333 000314 
    001115  0a   000015 400000 
    001116  55   000327 000003 
    001117  aa  016 155 163 137         ms_acl_replace
    001120  aa  141 143 154 137
    001121  aa  162 145 160 154
    001122  aa  141 143 145 000
    001123  55   000341 000324 
    001124  0a   000014 400000 
    001125  55   000336 000003 
    001126  aa  013 155 163 137         ms_acl_list
    001127  aa  141 143 154 137
    001130  aa  154 151 163 164
    001131  55   000350 000333 
    001132  0a   000013 400000 
    001133  55   000344 000003 
    001134  aa  015 155 163 137         ms_acl_delete
    001135  aa  141 143 154 137
    001136  aa  144 145 154 145
    001137  aa  164 145 000 000
    001140  55   000356 000341 
    001141  0a   000012 400000 
    001142  55   000353 000003 
    001143  aa  012 155 163 137         ms_acl_add
    001144  aa  141 143 154 137
    001145  aa  141 144 144 000
    001146  55   000363 000350 
    001147  0a   000011 400000 
    001150  55   000361 000003 
    001151  aa  005 143 154 157         close
    001152  aa  163 145 000 000
    001153  55   000370 000356 
    001154  0a   000010 400000 
    001155  55   000366 000003 
    001156  aa  004 157 160 145         open
    001157  aa  156 000 000 000
    001160  55   000400 000363 
    001161  0a   000007 400000 
    001162  55   000373 000003 
    001163  aa  021 163 145 164         set_safety_switch
    001164  aa  137 163 141 146
    001165  aa  145 164 171 137
    001166  aa  163 167 151 164
    001167  aa  143 150 000 000
    001170  55   000410 000370 
    001171  0a   000006 400000 
    001172  55   000403 000003 
    001173  aa  023 163 145 164         set_max_length_file
    001174  aa  137 155 141 170
    001175  aa  137 154 145 156
    001176  aa  147 164 150 137
    001177  aa  146 151 154 145
    001200  55   000416 000400 
    001201  0a   000005 400000 
    001202  55   000413 000003 
    001203  aa  013 143 150 156         chname_file
    001204  aa  141 155 145 137
    001205  aa  146 151 154 145
    001206  55   000423 000410 
    001207  0a   000004 400000 
    001210  55   000421 000003 
    001211  aa  004 143 157 160         copy
    001212  aa  171 000 000 000
    001213  55   000430 000416 
    001214  0a   000003 400000 
    001215  55   000426 000003 
    001216  aa  006 144 145 154         delete
    001217  aa  145 164 145 000
    001220  55   000435 000423 
    001221  0a   000002 400000 
    001222  55   000433 000003 
    001223  aa  006 143 162 145         create
    001224  aa  141 164 145 000
    001225  55   000443 000430 
    001226  0a   000001 400000 
    001227  55   000440 000003 
    001230  aa  010 166 141 154         validate
    001231  aa  151 144 141 164
    001232  aa  145 000 000 000
    001233  55   000002 000435 
    001234  6a   000000 400002 
    001235  55   000446 000003 
    001236  aa  014 163 171 155         symbol_table
    001237  aa  142 157 154 137
    001240  aa  164 141 142 154
    001241  aa  145 000 000 000

DEFINITIONS HASH TABLE

    001242  aa   000000 000065 
    001243  aa   000000 000000 
    001244  5a   000220 000000 
    001245  5a   000207 000000 
    001246  5a   000104 000000 
    001247  5a   000074 000000 
    001250  5a   000161 000000 
    001251  5a   000055 000000 
    001252  5a   000167 000000 
    001253  5a   000276 000000 
    001254  5a   000430 000000 
    001255  5a   000400 000000 
    001256  5a   000435 000000 
    001257  aa   000000 000000 
    001260  5a   000034 000000 
    001261  5a   000370 000000 
    001262  5a   000013 000000 
    001263  5a   000363 000000 
    001264  aa   000000 000000 
    001265  5a   000176 000000 
    001266  aa   000000 000000 
    001267  5a   000064 000000 
    001270  aa   000000 000000 
    001271  aa   000000 000000 
    001272  5a   000356 000000 
    001273  aa   000000 000000 
    001274  5a   000416 000000 
    001275  aa   000000 000000 
    001276  aa   000000 000000 
    001277  5a   000443 000000 
    001300  5a   000324 000000 
    001301  5a   000240 000000 
    001302  5a   000251 000000 
    001303  5a   000124 000000 
    001304  5a   000135 000000 
    001305  5a   000153 000000 
    001306  5a   000267 000000 
    001307  5a   000227 000000 
    001310  5a   000046 000000 
    001311  5a   000113 000000 
    001312  5a   000025 000000 
    001313  5a   000314 000000 
    001314  5a   000333 000000 
    001315  5a   000257 000000 
    001316  5a   000304 000000 
    001317  5a   000143 000000 
    001320  5a   000341 000000 
    001321  5a   000350 000000 
    001322  5a   000410 000000 
    001323  5a   000423 000000 
    001324  aa   000000 000000 
    001325  aa   000000 000000 
    001326  aa   000000 000000 
    001327  aa   000000 000000 

EXTERNAL NAMES

    001330  aa  027 157 137 151         o_incremental_read_file
    001331  aa  156 143 162 145
    001332  aa  155 145 156 164
    001333  aa  141 154 137 162
    001334  aa  145 141 144 137
    001335  aa  146 151 154 145
    001336  aa  013 157 137 162         o_read_file
    001337  aa  145 141 144 137
    001340  aa  146 151 154 145
    001341  aa  030 157 137 151         o_incremental_read_index
    001342  aa  156 143 162 145
    001343  aa  155 145 156 164
    001344  aa  141 154 137 162
    001345  aa  145 141 144 137
    001346  aa  151 156 144 145
    001347  aa  170 000 000 000
    001350  aa  014 157 137 162         o_read_index
    001351  aa  145 141 144 137
    001352  aa  151 156 144 145
    001353  aa  170 000 000 000
    001354  aa  021 147 145 156         general_read_file
    001355  aa  145 162 141 154
    001356  aa  137 162 145 141
    001357  aa  144 137 146 151
    001360  aa  154 145 000 000
    001361  aa  022 147 145 156         general_read_index
    001362  aa  145 162 141 154
    001363  aa  137 162 145 141
    001364  aa  144 137 151 156
    001365  aa  144 145 170 000
    001366  aa  016 145 170 137         ex_acl_replace
    001367  aa  141 143 154 137
    001370  aa  162 145 160 154
    001371  aa  141 143 145 000
    001372  aa  013 145 170 137         ex_acl_list
    001373  aa  141 143 154 137
    001374  aa  154 151 163 164
    001375  aa  015 145 170 137         ex_acl_delete
    001376  aa  141 143 154 137
    001377  aa  144 145 154 145
    001400  aa  164 145 000 000
    001401  aa  012 145 170 137         ex_acl_add
    001402  aa  141 143 154 137
    001403  aa  141 144 144 000
    001404  aa  006 143 150 156         chname
    001405  aa  141 155 145 000
    001406  aa  013 144 145 154         delete_mseg
    001407  aa  145 164 145 137
    001410  aa  155 163 145 147
    001411  aa  030 155 163 145         mseg_mbx_ms_gate_target_
    001412  aa  147 137 155 142
    001413  aa  170 137 155 163
    001414  aa  137 147 141 164
    001415  aa  145 137 164 141
    001416  aa  162 147 145 164
    001417  aa  137 000 000 000
    001420  aa  007 163 151 147         signal_
    001421  aa  156 141 154 137

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    001422  aa   000004 000000 
    001423  55   000621 000540 
    001424  aa   000004 000000 
    001425  55   000621 000546 
    001426  aa   000004 000000 
    001427  55   000621 000551 
    001430  aa   000004 000000 
    001431  55   000621 000560 
    001432  aa   000004 000000 
    001433  55   000621 000060 
    001434  aa   000004 000000 
    001435  55   000621 000067 
    001436  aa   000004 000000 
    001437  55   000621 000077 
    001440  aa   000004 000000 
    001441  55   000621 000107 
    001442  aa   000004 000000 
    001443  55   000621 000116 
    001444  aa   000004 000000 
    001445  55   000621 000127 
    001446  aa   000004 000000 
    001447  55   000621 000140 
    001450  aa   000004 000000 
    001451  55   000621 000146 
    001452  aa   000004 000000 
    001453  55   000621 000156 
    001454  aa   000004 000000 
    001455  55   000621 000164 
    001456  aa   000004 000000 
    001457  55   000621 000172 
    001460  aa   000004 000000 
    001461  55   000621 000201 
    001462  aa   000004 000000 
    001463  55   000621 000212 
    001464  aa   000004 000000 
    001465  55   000621 000223 
    001466  aa   000004 000000 
    001467  55   000621 000232 
    001470  aa   000004 000000 
    001471  55   000621 000243 
    001472  aa   000004 000000 
    001473  55   000621 000254 
    001474  aa   000004 000000 
    001475  55   000621 000262 
    001476  aa   000004 000000 
    001477  55   000621 000272 
    001500  aa   000004 000000 
    001501  55   000621 000301 
    001502  aa   000004 000000 
    001503  55   000621 000564 
    001504  aa   000004 000000 
    001505  55   000621 000571 
    001506  aa   000004 000000 
    001507  55   000621 000576 
    001510  aa   000004 000000 
    001511  55   000621 000602 
    001512  aa   000004 000000 
    001513  55   000621 000605 
    001514  aa   000004 000000 
    001515  55   000621 000611 
    001516  aa   000004 000000 
    001517  55   000621 000361 
    001520  aa   000004 000000 
    001521  55   000621 000366 
    001522  aa   000004 000000 
    001523  55   000621 000373 
    001524  aa   000004 000000 
    001525  55   000621 000403 
    001526  aa   000004 000000 
    001527  55   000621 000614 
    001530  aa   000004 000000 
    001531  55   000621 000421 
    001532  aa   000004 000000 
    001533  55   000621 000616 
    001534  aa   000004 000000 
    001535  55   000621 000433 
    001536  aa   000004 000000 
    001537  55   000621 000440 
    001540  aa   000004 000000 
    001541  55   000630 000630 
    001542  aa   000001 000000 
    001543  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    001544  5a   000632 000000 
    001545  5a   000634 000000 
    001546  5a   000636 000000 
    001547  5a   000640 000000 
    001550  5a   000642 000000 
    001551  5a   000644 000000 
    001552  5a   000646 000000 
    001553  5a   000650 000000 
    001554  5a   000652 000000 
    001555  5a   000654 000000 
    001556  5a   000656 000000 
    001557  5a   000660 000000 
    001560  5a   000662 000000 
    001561  5a   000664 000000 
    001562  5a   000666 000000 
    001563  5a   000670 000000 
    001564  5a   000672 000000 
    001565  5a   000674 000000 
    001566  5a   000676 000000 
    001567  5a   000700 000000 
    001570  5a   000702 000000 
    001571  5a   000704 000000 
    001572  5a   000706 000000 
    001573  5a   000710 000000 
    001574  5a   000712 000000 
    001575  5a   000714 000000 
    001576  5a   000716 000000 
    001577  5a   000720 000000 
    001600  5a   000722 000000 
    001601  5a   000724 000000 
    001602  5a   000726 000000 
    001603  5a   000730 000000 
    001604  5a   000732 000000 
    001605  5a   000734 000000 
    001606  5a   000736 000000 
    001607  5a   000740 000000 
    001610  5a   000742 000000 
    001611  5a   000744 000000 
    001612  5a   000746 000000 
    001613  5a   000750 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000570 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000130 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         signal_|signal_
    000011  5a   001023 0000 00
    000012  9a   777766 0000 46         mseg_mbx_ms_gate_target_|validate
    000013  5a   001022 0000 00
    000014  9a   777764 0000 46         mseg_mbx_ms_gate_target_|create
    000015  5a   001021 0000 00
    000016  9a   777762 0000 46         mseg_mbx_ms_gate_target_|delete_mseg
    000017  5a   001020 0000 00
    000020  9a   777760 0000 46         mseg_mbx_ms_gate_target_|copy
    000021  5a   001017 0000 00
    000022  9a   777756 0000 46         mseg_mbx_ms_gate_target_|chname
    000023  5a   001016 0000 00
    000024  9a   777754 0000 46         mseg_mbx_ms_gate_target_|set_max_length_file
    000025  5a   001015 0000 00
    000026  9a   777752 0000 46         mseg_mbx_ms_gate_target_|set_safety_switch
    000027  5a   001014 0000 00
    000030  9a   777750 0000 46         mseg_mbx_ms_gate_target_|open
    000031  5a   001013 0000 00
    000032  9a   777746 0000 46         mseg_mbx_ms_gate_target_|close
    000033  5a   001012 0000 00
    000034  9a   777744 0000 46         mseg_mbx_ms_gate_target_|ex_acl_add
    000035  5a   001011 0000 00
    000036  9a   777742 0000 46         mseg_mbx_ms_gate_target_|ex_acl_delete
    000037  5a   001010 0000 00
    000040  9a   777740 0000 46         mseg_mbx_ms_gate_target_|ex_acl_list
    000041  5a   001007 0000 00
    000042  9a   777736 0000 46         mseg_mbx_ms_gate_target_|ex_acl_replace
    000043  5a   001006 0000 00
    000044  9a   777734 0000 46         mseg_mbx_ms_gate_target_|general_read_index
    000045  5a   001005 0000 00
    000046  9a   777732 0000 46         mseg_mbx_ms_gate_target_|general_read_file
    000047  5a   001004 0000 00
    000050  9a   777730 0000 46         mseg_mbx_ms_gate_target_|read_index
    000051  5a   001003 0000 00
    000052  9a   777726 0000 46         mseg_mbx_ms_gate_target_|delete_index
    000053  5a   001002 0000 00
    000054  9a   777724 0000 46         mseg_mbx_ms_gate_target_|read_delete_index
    000055  5a   001001 0000 00
    000056  9a   777722 0000 46         mseg_mbx_ms_gate_target_|add_index
    000057  5a   001000 0000 00
    000060  9a   777720 0000 46         mseg_mbx_ms_gate_target_|incremental_read_index
    000061  5a   000777 0000 00
    000062  9a   777716 0000 46         mseg_mbx_ms_gate_target_|get_message_count_index
    000063  5a   000776 0000 00
    000064  9a   777714 0000 46         mseg_mbx_ms_gate_target_|get_mode_index
    000065  5a   000775 0000 00
    000066  9a   777712 0000 46         mseg_mbx_ms_gate_target_|check_salv_bit_index
    000067  5a   000774 0000 00
    000070  9a   777710 0000 46         mseg_mbx_ms_gate_target_|update_message_index
    000071  5a   000773 0000 00
    000072  9a   777706 0000 46         mseg_mbx_ms_gate_target_|compact_index
    000073  5a   000772 0000 00
    000074  9a   777704 0000 46         mseg_mbx_ms_gate_target_|read_file
    000075  5a   000771 0000 00
    000076  9a   777702 0000 46         mseg_mbx_ms_gate_target_|delete_file
    000077  5a   000770 0000 00
    000100  9a   777700 0000 46         mseg_mbx_ms_gate_target_|read_delete_file
    000101  5a   000767 0000 00
    000102  9a   777676 0000 46         mseg_mbx_ms_gate_target_|add_file
    000103  5a   000766 0000 00
    000104  9a   777674 0000 46         mseg_mbx_ms_gate_target_|incremental_read_file
    000105  5a   000765 0000 00
    000106  9a   777672 0000 46         mseg_mbx_ms_gate_target_|get_message_count_file
    000107  5a   000764 0000 00
    000110  9a   777670 0000 46         mseg_mbx_ms_gate_target_|get_mode_file
    000111  5a   000763 0000 00
    000112  9a   777666 0000 46         mseg_mbx_ms_gate_target_|check_salv_bit_file
    000113  5a   000762 0000 00
    000114  9a   777664 0000 46         mseg_mbx_ms_gate_target_|update_message_file
    000115  5a   000761 0000 00
    000116  9a   777662 0000 46         mseg_mbx_ms_gate_target_|compact_file
    000117  5a   000760 0000 00
    000120  9a   777660 0000 46         mseg_mbx_ms_gate_target_|o_read_index
    000121  5a   000757 0000 00
    000122  9a   777656 0000 46         mseg_mbx_ms_gate_target_|o_incremental_read_index
    000123  5a   000756 0000 00
    000124  9a   777654 0000 46         mseg_mbx_ms_gate_target_|o_read_file
    000125  5a   000755 0000 00
    000126  9a   777652 0000 46         mseg_mbx_ms_gate_target_|o_incremental_read_file
    000127  5a   000754 0000 00
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000004 
    000004  aa   000000 114732 
    000005  aa   732732 062314 
    000006  aa   000000 114775 
    000007  aa   666255 112500 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000264 
    000020  aa   000000 000164 
    000021  aa   000000 000232 
    000022  aa   000253 000164 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   040066 056067 
    000030  aa   040040 117143 
    000031  aa   164157 142145 
    000032  aa   162040 061071 
    000033  aa   070066 040040 
    000034  aa   107112 157150 
    000035  aa   156163 157156 
    000036  aa   056123 171163 
    000037  aa   115141 151156 
    000040  aa   164056 141040 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   154151 163164 
    000045  aa   040040 040040 
    000046  aa   040040 040040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040040 040040 
    000057  aa   040040 040040 
    000060  aa   040040 040040 
    000061  aa   040040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000004 
    000066  aa   000106 000065 
    000067  aa   147740 446153 
    000070  aa   000000 114774 
    000071  aa   460722 400000 
    000072  aa   000124 000041 
    000073  aa   134571 651553 
    000074  aa   000000 113462 
    000075  aa   317506 600000 
    000076  aa   000135 000066 
    000077  aa   147714 750316 
    000100  aa   000000 114774 
    000101  aa   453561 000000 
    000102  aa   000153 000041 
    000103  aa   052721 247134 
    000104  aa   000000 105272 
    000105  aa   317215 400000 
    000106  aa   076163 160145          >special_ldd>install>MR12.0-1206>message_segment_.alm
    000107  aa   143151 141154 
    000110  aa   137154 144144 
    000111  aa   076151 156163 
    000112  aa   164141 154154 
    000113  aa   076115 122061 
    000114  aa   062056 060055 
    000115  aa   061062 060066 
    000116  aa   076155 145163 
    000117  aa   163141 147145 
    000120  aa   137163 145147 
    000121  aa   155145 156164 
    000122  aa   137056 141154 
    000123  aa   155040 040040 
    000124  aa   076154 144144          >ldd>include>gate_macros.incl.alm
    000125  aa   076151 156143 
    000126  aa   154165 144145 
    000127  aa   076147 141164 
    000130  aa   145137 155141 
    000131  aa   143162 157163 
    000132  aa   056151 156143 
    000133  aa   154056 141154 
    000134  aa   155040 040040 
    000135  aa   076163 160145          >special_ldd>install>MR12.0-1206>stack_header.incl.alm
    000136  aa   143151 141154 
    000137  aa   137154 144144 
    000140  aa   076151 156163 
    000141  aa   164141 154154 
    000142  aa   076115 122061 
    000143  aa   062056 060055 
    000144  aa   061062 060066 
    000145  aa   076163 164141 
    000146  aa   143153 137150 
    000147  aa   145141 144145 
    000150  aa   162056 151156 
    000151  aa   143154 056141 
    000152  aa   154155 040040 
    000153  aa   076154 144144          >ldd>include>stack_frame.incl.alm
    000154  aa   076151 156143 
    000155  aa   154165 144145 
    000156  aa   076163 164141 
    000157  aa   143153 137146 
    000160  aa   162141 155145 
    000161  aa   056151 156143 
    000162  aa   154056 141154 
    000163  aa   155040 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

          50    .actor                   message_segment_:    26.
         104    .defs_loop               message_segment_:    26.
         145    .gate_errordesc          message_segment_:    26.
         142    .gate_errorname          message_segment_:    26.
         112    .next_def                message_segment_:    26.
         146    .no_gate_error           message_segment_:    26.
          67    .return_name             message_segment_:    26.
         102    .search_defs             message_segment_:    26.
         115    .setup                   message_segment_:    26,   29,   30,   31,   32,   33,   34,   35,   36,   37,   41,
                                                              42,   43,   44,   48,   49,   50,   51,   52,   53,   54,   55,
                                                              56,   57,   58,   59,   63,   64,   65,   66,   67,   68,   69,
                                                              70,   71,   72,   76,   77,   78,   79.
          35    add_file                 message_segment_:    66.
         454    add_file.e               message_segment_:    66.
          23    add_index                message_segment_:    53.
         346    add_index.e              message_segment_:    53.
        1170    call_offset              stack_header:        80.
          41    check_salv_bit_file      message_segment_:    70.
         510    check_salv_bit_file.e    message_segment_:    70.
          27    check_salv_bit_index     message_segment_:    57.
         402    check_salv_bit_index.e   message_segment_:    57.
                chname                   message_segment_:    33.
           5    chname_file              message_segment_:    33.
         204    chname_file.e            message_segment_:    33.
          11    close                    message_segment_:    37.
         240    close.e                  message_segment_:    37.
          43    compact_file             message_segment_:    72.
         526    compact_file.e           message_segment_:    72.
          31    compact_index            message_segment_:    59.
         420    compact_index.e          message_segment_:    59.
           4    copy                     message_segment_:    32.
         175    copy.e                   message_segment_:    32.
           2    create                   message_segment_:    30.
         157    create.e                 message_segment_:    30.
           3    delete                   message_segment_:    31.
         166    delete.e                 message_segment_:    31.
          33    delete_file              message_segment_:    64.
         436    delete_file.e            message_segment_:    64.
          21    delete_index             message_segment_:    51.
         330    delete_index.e           message_segment_:    51.
                delete_mseg              message_segment_:    31.
        1174    entry_offset             stack_header:        84.
                ex_acl_add               message_segment_:    41.
                ex_acl_delete            message_segment_:    42.
                ex_acl_list              message_segment_:    43.
                ex_acl_replace           message_segment_:    44.
                general_read_file        message_segment_:    49.
                general_read_index       message_segment_:    48.
          37    get_message_count_file   message_segment_:    68.
         472    get_message_count_file.e       message_segment_:    68.
          25    get_message_count_index  message_segment_:    55.
         364    get_message_count_index.e      message_segment_:    55.
          40    get_mode_file            message_segment_:    69.
         501    get_mode_file.e          message_segment_:    69.
          26    get_mode_index           message_segment_:    56.
         373    get_mode_index.e         message_segment_:    56.
          36    incremental_read_file    message_segment_:    67.
         463    incremental_read_file.e  message_segment_:    67.
          24    incremental_read_index   message_segment_:    54.
         355    incremental_read_index.e       message_segment_:    54.
          50    main                     message_segment_:    26,   29,   30,   31,   32,   33,   34,   35,   36,   37,   41,
                                                              42,   43,   44,   48,   49,   50,   51,   52,   53,   54,   55,
                                                              56,   57,   58,   59,   63,   64,   65,   66,   67,   68,   69,
                                                              70,   71,   72,   76,   77,   78,   79.
                mseg_mbx_ms_gate_target_       message_segment_:    29,   30,   31,   32,   33,   34,   35,   36,   37,   41,
                                                                    42,   43,   44,   48,   49,   50,   51,   52,   53,   54,
                                                                    55,   56,   57,   58,   59,   63,   64,   65,   66,   67,
                                                                    68,   69,   70,   71,   72,   76,   77,   78,   79.
          12    ms_acl_add               message_segment_:    41.
         247    ms_acl_add.e             message_segment_:    41.
          13    ms_acl_delete            message_segment_:    42.
         256    ms_acl_delete.e          message_segment_:    42.
          14    ms_acl_list              message_segment_:    43.
         265    ms_acl_list.e            message_segment_:    43.
          15    ms_acl_replace           message_segment_:    44.
         274    ms_acl_replace.e         message_segment_:    44.
          10    open                     message_segment_:    36.
         231    open.e                   message_segment_:    36.
          47    own_incremental_read_file      message_segment_:    79.
         562    own_incremental_read_file.e    message_segment_:    79.
          45    own_incremental_read_index     message_segment_:    77.
         544    own_incremental_read_index.e   message_segment_:    77.
          46    own_read_file            message_segment_:    78.
         553    own_read_file.e          message_segment_:    78.
          44    own_read_index           message_segment_:    76.
         535    own_read_index.e         message_segment_:    76.
                o_incremental_read_file  message_segment_:    79.
                o_incremental_read_index       message_segment_:    77.
                o_read_file              message_segment_:    78.
                o_read_index             message_segment_:    76.
        1171    push_offset              stack_header:        81.
          34    read_delete_file         message_segment_:    65.
         445    read_delete_file.e       message_segment_:    65.
          22    read_delete_index        message_segment_:    52.
         337    read_delete_index.e      message_segment_:    52.
          32    read_file                message_segment_:    63.
         427    read_file.e              message_segment_:    63.
          20    read_index               message_segment_:    50.
         321    read_index.e             message_segment_:    50.
          17    read_message_file        message_segment_:    49.
         312    read_message_file.e      message_segment_:    49.
          16    read_message_index       message_segment_:    48.
         303    read_message_index.e     message_segment_:    48.
        1173    return_no_pop_offset     stack_header:        83.
        1172    return_offset            stack_header:        82.
           6    set_max_length_file      message_segment_:    34.
         213    set_max_length_file.e    message_segment_:    34.
           7    set_safety_switch        message_segment_:    35.
         222    set_safety_switch.e      message_segment_:    35.
                signal_                  message_segment_:    26.
         134    signal_arglist           message_segment_:    26.
          73    stach_header.trace_top_ptr     stack_header:        62.
          32    stack_frame.arg_ptr      stack_frame:   16.
         100    stack_frame.condition_bit      stack_frame:   32.
          20    stack_frame.condition_word     stack_frame:    9.
        2000    stack_frame.crawl_out_bit      stack_frame:   28.
          26    stack_frame.entry_ptr    stack_frame:   13.
          20    stack_frame.flag_word    stack_frame:   24.
         400    stack_frame.link_trap_bit      stack_frame:   30.
          30    stack_frame.lp_ptr       stack_frame:   15.
       20000    stack_frame.main_proc_bit      stack_frame:   25.
          60    stack_frame.min_length   stack_frame:   23.
          22    stack_frame.next_sp      stack_frame:   10.
          36    stack_frame.on_unit_rel_ptrs   stack_frame:   19.
          30    stack_frame.operator_ptr       stack_frame:   14.
          37    stack_frame.operator_ret_ptr   stack_frame:   20.
          20    stack_frame.prev_sp      stack_frame:    8.
          40    stack_frame.regs         stack_frame:   22.
          24    stack_frame.return_ptr   stack_frame:   12.
       10000    stack_frame.run_unit_manager   stack_frame:   26.
        1000    stack_frame.signaller_bit      stack_frame:   29.
          22    stack_frame.signaller_word     stack_frame:   11.
        4000    stack_frame.signal_bit   stack_frame:   27.
          34    stack_frame.static_ptr   stack_frame:   17.
         200    stack_frame.support_bit  stack_frame:   31.
          35    stack_frame.support_ptr  stack_frame:   18.
          37    stack_frame.translator_id      stack_frame:   21.
          66    stack_header.assign_linkage_ptr      stack_header:        59.
          32    stack_header.bar_mode_sp       stack_header:        42.
          36    stack_header.call_op_ptr       stack_header:        44.
          10    stack_header.clr_ptr     stack_header:        27.
           6    stack_header.combined_stat_ptr       stack_header:        25.
           4    stack_header.cpm_data_ptr      stack_header:        24.
          13    stack_header.cpm_enabled       stack_header:        32.
          13    stack_header.cur_lot_size      stack_header:        31.
          64    stack_header.ect_ptr     stack_header:        58.
          46    stack_header.entry_op_ptr      stack_header:        49.
          70    stack_header.heap_header_ptr   stack_header:        60.
          74    stack_header.in_trace    stack_header:        63.
          52    stack_header.isot_ptr    stack_header:        52.
          26    stack_header.lot_ptr     stack_header:        39.
          12    stack_header.main_proc_invoked       stack_header:        29.
          12    stack_header.max_lot_size      stack_header:        28.
          20    stack_header.parent_ptr  stack_header:        36.
          34    stack_header.pl1_operators_ptr       stack_header:        43.
          40    stack_header.push_op_ptr       stack_header:        46.
          42    stack_header.return_op_ptr     stack_header:        47.
          44    stack_header.ret_no_pop_op_ptr       stack_header:        48.
          62    stack_header.rnt_ptr     stack_header:        57.
          12    stack_header.run_unit_depth    stack_header:        30.
          54    stack_header.sct_ptr     stack_header:        53.
          30    stack_header.signal_ptr  stack_header:        41.
          22    stack_header.stack_begin_ptr   stack_header:        37.
          24    stack_header.stack_end_ptr     stack_header:        38.
          14    stack_header.system_free_ptr   stack_header:        33.
          60    stack_header.sys_link_info_ptr       stack_header:        56.
          72    stack_header.trace_frames      stack_header:        61.
          50    stack_header.trans_op_tv_ptr   stack_header:        51.
          56    stack_header.unwinder_ptr      stack_header:        54.
          16    stack_header.user_free_ptr     stack_header:        34.
         100    stack_header_end         stack_header:        64.
           0    trace_frames.count       stack_header:        69.
           1    trace_frames.top_ptr     stack_header:        70.
           0    transfer_vector          message_segment_:    26,   29,   30,   31,   32,   33,   34,   35,   36,   37,   41,
                                                              42,   43,   44,   48,   49,   50,   51,   52,   53,   54,   55,
                                                              56,   57,   58,   59,   63,   64,   65,   66,   67,   68,   69,
                                                              70,   71,   72,   76,   77,   78,   79.
          50    tv_end                   message_segment_:    26.
         551    tv_offset                stack_header:        75,   80,   81,   82,   83,   84.
          42    update_message_file      message_segment_:    71.
         517    update_message_file.e    message_segment_:    71.
          30    update_message_index     message_segment_:    58.
         411    update_message_index.e   message_segment_:    58.
           1    validate                 message_segment_:    29.
         150    validate.e               message_segment_:    29.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
