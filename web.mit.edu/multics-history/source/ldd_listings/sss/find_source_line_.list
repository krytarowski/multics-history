	COMPILATION LISTING OF SEGMENT find_source_line_
	Compiled by: Multics PL/I Compiler, Release 28d, of September 14, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 10/03/83  1708.0 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 find_source_line_:
       12      procedure (strp, Line_no, Dirname, Ename, Offset, Length, Code);
       13 
       14 dcl strp ptr parameter;
       15 dcl Line_no char (*) parameter;
       16 dcl Dirname char (*) parameter;
       17 dcl Ename char (*) parameter;
       18 dcl Offset fixed bin (21) parameter;
       19 dcl Length fixed bin (21) parameter;
       20 dcl Code fixed bin (35);
       21 
       22 dcl source_name_ptr ptr;
       23 dcl source_name_len fixed bin (21);
       24 dcl source_name char (source_name_len) based (source_name_ptr);
       25 
       26 dcl code fixed bin (35);
       27 dcl (l_comp, l_num) fixed bin;
       28 dcl source_map_ptr ptr;
       29 
       30 dcl expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
       31 dcl ioa_$rsnnl entry options (variable);
       32 dcl stu_$get_line entry (ptr, fixed bin, fixed bin, fixed bin, fixed bin (21), fixed bin (21), fixed bin);
       33 
       34 dcl (addrel, binary) builtin;
       35 
       36 /* * * * * * * * * * FIND_SOURCE_LINE_ * * * * * * * ** */
       37 
       38 	Code = 0;
       39 	Offset, Length = 0;
       40 	Line_no, Dirname, Ename = "";
       41 
       42 	if ^struc.std_flag then return;
       43 	call stu_$get_line (struc.symbolp, struc.instruction_counter, 1, l_num, Offset, Length, l_comp);
       44 	if l_num = -1 then return;
       45 	call ioa_$rsnnl ("(line ^[^d-^;^s^]^d)", Line_no, (0), (l_comp ^= 0), l_comp, l_num);
       46 	if struc.sourcemap = 0 then return;
       47 	source_map_ptr = addrel (struc.symbolp, struc.sourcemap);
       48 	source_name_ptr = addrel (struc.symbolp, source_map_ptr -> source_map.map (l_comp + 1).pathname.offset);
       49 	source_name_len = binary (source_map_ptr -> source_map.map (l_comp + 1).pathname.size, 21);
       50 	call expand_pathname_ (source_name, Dirname, Ename, code);
       51 	if code ^= 0 then do;
       52 	     Dirname, Ename = "";
       53 	     return;
       54 	     end;
       55 	return;
       56 
       57 /* * * * * * * * * * * * * * * * * * */
       58 
  1     1 /* BEGIN INCLUDE FILE ... interpret_ptr_struc.incl.pl1 */
  1     2 
  1     3 dcl 1 struc based (strp) aligned,			/* This useful structure is in trace_stack pgms */
  1     4     2 comment char (64),				/* name of boundseg, or thing pointed to, or .. */
  1     5     2 segment char (32),				/* name of segment, or segment number with # */
  1     6     2 entryn char (33),				/* entry name, preceded by $, or blank */
  1     7     2 offset char (6),				/* offset in segment, or blank */
  1     8     2 opname char (32),				/* may be pl1 operator name */
  1     9     2 ring char (1) unal,				/* ring number of ptr */
  1    10     2 std_flag bit (1) unal,				/* TRUE if std object. */
  1    11     2 xpad bit (26) unal,
  1    12     2 bitoff char (4),				/* bit offset */
  1    13     2 modifier char (8),				/* ptr modifier, or special code like "noaccess" */
  1    14     2 symbolp ptr,					/* ptr to symbol section */
  1    15     2 instruction_counter fixed bin,			/* binary instruction counter */
  1    16     2 sourcemap fixed bin,				/* source map offset in symbol section */
  1    17     2 compiler char (8),				/* name of compiler */
  1    18     2 text_ptr ptr,					/* ptr to segment text */
  1    19     2 stack_ptr ptr;				/* ptr to stack frame */
  1    20 
  1    21 dcl 1 strbuf aligned like struc;			/* If referenced, will make storage for struc */
  1    22 
  1    23 /* END INCLUDE FILE ... interpret_ptr_struc.incl.pl1 */
       59 
  2     1 /* BEGIN INCLUDE FILE ... source_map.incl.pl1 */
  2     2 
  2     3 dcl	1 source_map	aligned based,
  2     4 	2 version		fixed bin,
  2     5 	2 number		fixed bin,
  2     6 	2 map(n refer(source_map.number))	 aligned,
  2     7 	  3 pathname	unaligned,
  2     8 	    4 offset	bit(18),
  2     9 	    4 size	bit(18),
  2    10 	  3 uid		bit(36),
  2    11 	  3 dtm		fixed bin(71);
  2    12 
  2    13 /* END INCLUDE FILE  ... source_map.incl.pl1 */
       60 
       61 
       62      end find_source_line_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/03/83  1009.5  find_source_line_.pl1             >spec>on>pl128d>find_source_line_.pl1
59           1    06/11/74  0602.3  interpret_ptr_struc.incl.pl1      >ldd>include>interpret_ptr_struc.incl.pl1
60           2    11/26/79  1320.6  source_map.incl.pl1               >ldd>include>source_map.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
Code                                   parameter       fixed bin(35,0)          dcl 20 set ref 11 38*
Dirname                                parameter       char                     unaligned dcl 16 set ref 11 40* 50* 52*
Ename                                  parameter       char                     unaligned dcl 17 set ref 11 40* 50* 52*
Length                                 parameter       fixed bin(21,0)          dcl 19 set ref 11 39* 43*
Line_no                                parameter       char                     unaligned dcl 15 set ref 11 40* 45*
Offset                                 parameter       fixed bin(21,0)          dcl 18 set ref 11 39* 43*
addrel                                                 builtin function         dcl 34 ref 47 48
binary                                                 builtin function         dcl 34 ref 49
code                            000103 automatic       fixed bin(35,0)          dcl 26 set ref 50* 51
expand_pathname_                000010 constant        entry                    external dcl 30 ref 50
instruction_counter      62            based           fixed bin(17,0)          level 2 dcl 1-3 set ref 43*
ioa_$rsnnl                      000012 constant        entry                    external dcl 31 ref 45
l_comp                          000104 automatic       fixed bin(17,0)          dcl 27 set ref 43* 45 45* 48 49
l_num                           000105 automatic       fixed bin(17,0)          dcl 27 set ref 43* 44 45*
map                       2            based           structure                array level 2 dcl 2-3
offset                    2            based           bit(18)                  array level 4 packed unaligned dcl 2-3 ref 48
pathname                  2            based           structure                array level 3 packed unaligned dcl 2-3
size                      2(18)        based           bit(18)                  array level 4 packed unaligned dcl 2-3 ref 49
source_map                             based           structure                level 1 dcl 2-3
source_map_ptr                  000106 automatic       pointer                  dcl 28 set ref 47* 48 49
source_name                            based           char                     unaligned dcl 24 set ref 50*
source_name_len                 000102 automatic       fixed bin(21,0)          dcl 23 set ref 49* 50 50
source_name_ptr                 000100 automatic       pointer                  dcl 22 set ref 48* 50
sourcemap                63            based           fixed bin(17,0)          level 2 dcl 1-3 ref 46 47
std_flag                 53(09)        based           bit(1)                   level 2 packed unaligned dcl 1-3 ref 42
strp                                   parameter       pointer                  dcl 14 ref 11 42 43 43 46 47 47 48
struc                                  based           structure                level 1 dcl 1-3
stu_$get_line                   000014 constant        entry                    external dcl 32 ref 43
symbolp                  60            based           pointer                  level 2 dcl 1-3 set ref 43* 47 48

NAME DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
strbuf                                 automatic       structure                level 1 dcl 1-21

NAME DECLARED BY EXPLICIT CONTEXT.
find_source_line_               000024 constant        entry                    external dcl 11

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       350         366     272         360
Length       574     272        16         171      55           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
find_source_line_                   120 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
find_source_line_        000100 source_name_ptr             find_source_line_
                         000102 source_name_len             find_source_line_
                         000103 code                        find_source_line_
                         000104 l_comp                      find_source_line_
                         000105 l_num                       find_source_line_
                         000106 source_map_ptr              find_source_line_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_ne_as             call_ext_out_desc   call_ext_out        return              ext_entry_desc

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
expand_pathname_              ioa_$rsnnl                    stu_$get_line

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000016        38 000051        39 000053        40 000055        42 000074        43 000101        44 000125
     45 000130        46 000175        47 000202        48 000205        49 000214        50 000222        51 000252
     52 000254        53 000267        55 000270


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
