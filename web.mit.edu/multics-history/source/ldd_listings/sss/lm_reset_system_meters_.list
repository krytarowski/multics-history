	COMPILATION LISTING OF SEGMENT lm_reset_system_meters_
	Compiled by: Multics PL/I Compiler, Release 28e, of February 14, 1985
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 04/04/85  0947.5 mst Thu
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 /* Program to reset lock meters for the system. This is a */
        7 /* PRIVILEGED function. */
        8 /* format: style2 */
        9 lm_reset_system_meters_:
       10      procedure;
       11 
       12 /* HISTORY:
       13*
       14*Written by Benson I. Margulies, 05/10/83.
       15*Modified:
       16*05/01/84 by R. Michael Tague:  Added the History section.  Added
       17*	  %include dm_lm_meters.  Changed meters assignment to reference
       18*	  the lm_meters structure, avoid zeroing the version information.
       19*10/18/84 by Stanford S. Cox:  For DM program standards.
       20*03/05/85 by Steve Herbst: Replaced dm_log_ with dm_misc_util_$log.
       21**/
       22 
       23 	declare (
       24 	        lock_manager_$lock_lock_data,
       25 	        lock_manager_$unlock_lock_data
       26 	        )			 entry (fixed bin (35));
       27 	declare get_group_id_	 entry () returns (char (32));
       28 	declare dm_misc_util_$log	 entry () options (variable);
       29 	declare sub_err_		 entry () options (variable);
       30 
       31 	declare lm_data_$lock_seg_ptr	 pointer external;
       32 	declare dm_system_data_$max_n_transactions
       33 				 fixed bin ext;
       34 	dcl     error_table_$unimplemented_version
       35 				 fixed bin (35) ext static;
       36 
       37 	declare code		 fixed bin (35);
       38 
       39 	declare cleanup		 condition;
       40 
       41 	dcl     ME		 char (23) int static options (constant) init ("lm_reset_system_meters_");
       42 
       43 
       44 	lock_seg_ptr = lm_data_$lock_seg_ptr;
       45 	call CHECK_VERSION (LOCK_SEG_VERSION_1, lock_seg.version, "lock_seg");
       46 	call dm_misc_util_$log (INFORM_SV, "Lock meters reset by ^a.", get_group_id_ ());
       47 	call lock_manager_$lock_lock_data (code);
       48 	if code = 0
       49 	then on cleanup call lock_manager_$unlock_lock_data ((0));
       50 	else call sub_err_ (code, ME, ACTION_CANT_RESTART, null (), (0), "Error locking lock data.");
       51 
       52 	lock_seg.lm_meters = 0;			/* Aggregate ! */
       53 	call lock_manager_$unlock_lock_data ((0));
       54 	return;
       55 
       56 CHECK_VERSION:
       57      proc (cv_p_expected_version, cv_p_received_version, cv_p_structure_name);
       58 
       59 	dcl     cv_p_expected_version	 char (8) aligned parameter;
       60 	dcl     cv_p_received_version	 char (8) aligned parameter;
       61 	dcl     cv_p_structure_name	 char (32) aligned parameter;
       62 
       63 	if cv_p_expected_version ^= cv_p_received_version
       64 	then call sub_err_ (error_table_$unimplemented_version, ME, ACTION_CANT_RESTART, null (), 0,
       65 		"^/Expected version ^a of the ^a structure." || "^/Received version ^a instead.",
       66 		cv_p_expected_version, cv_p_structure_name, cv_p_received_version);
       67      end CHECK_VERSION;
       68 
  1     1 /* BEGIN INCLUDE FILE - dm_lm_system_data.incl.pl1 */
  1     2 
  1     3 /* format: style3,idind25 */
  1     4 /* HISTORY:
  1     5*
  1     6*Written by Benson Margulies, 4/83.
  1     7*Modified:
  1     8*04/24/84 by R. Michael Tague:  moved the meters structure definition to
  1     9*   dm_lm_meters.incl.pl1.  Added this history section.
  1    10*05/01/84 by R. Michael Tague:  removed the %include dm_lm_meters.
  1    11*10/17/84 by Stanford S. Cox:  Added version constant, and changed 
  1    12*   transaction_table to use a refer extent (to allow outer ring reference).
  1    13**/
  1    14 
  1    15 dcl	lock_seg_ptr	     ptr;
  1    16 dcl	lock_transaction_table_ptr
  1    17 			     ptr;
  1    18 dcl	lock_hash_table_ptr	     ptr;
  1    19 dcl	lock_aux_seg_ptr	     ptr;
  1    20 dcl	lock_block_ptr	     ptr;
  1    21 dcl	lock_block_array_ptr     ptr;
  1    22 dcl	lock_free_block_ptr	     ptr;
  1    23 dcl	lock_object_ptr	     ptr;
  1    24 dcl	lock_owner_ptr	     ptr;
  1    25 dcl	lock_segments_ptr	     ptr;
  1    26 dcl	lock_waiter_ptr	     ptr;
  1    27 dcl	lock_deadlock_ptr	     ptr;
  1    28 
  1    29 dcl	n_lock_blocks	     fixed bin;
  1    30 dcl	n_lock_deadlock	     fixed bin;
  1    31 
  1    32 dcl	LOCK_SEG_VERSION_1	     char (8) aligned init ("locksg 1") int static options (constant);
  1    33 
  1    34 dcl	1 lock_seg	     aligned based (lock_seg_ptr),
  1    35 						/* Per-system lock data */
  1    36 	  2 version	     char (8) aligned,
  1    37 	  2 header	     aligned,
  1    38 	    3 lock	     fixed bin (71),	/* Fast Lock on system lock operations */
  1    39 	    3 n_lock_segments    fixed bin,		/* Number of segments in system lock data */
  1    40 	    3 lock_seg_size	     fixed bin (19),	/* Number of words per segment */
  1    41 	    3 max_lock_segments  fixed bin,		/* Maximum number of segments */
  1    42 	    3 n_transaction_table_entries
  1    43 			     fixed bin,		/* Size of transaction table */
  1    44 	    3 n_hash_table_entries
  1    45 			     fixed bin,		/* Size of hash table */
  1    46 	    3 hash_mask	     bit (36) aligned,	/* Used by hashing routine */
  1    47 	    3 free_list_ptr	     aligned like lock_virtual_ptr,
  1    48 						/* Thread of free blocks */
  1    49 	    3 transaction_table_offset
  1    50 			     fixed bin (18) unsigned aligned,
  1    51 						/* Offset of transaction table */
  1    52 	    3 hash_table_offset  fixed bin (18) unsigned aligned,
  1    53 						/* Offset of hash table */
  1    54 	    3 n_lock_blocks	     fixed bin,		/* Number of blocks crated */
  1    55 	    3 lock_array_offset  fixed bin (18) unsigned aligned,
  1    56 						/* Offset of block array */
  1    57 	  2 transaction_table    (0 refer (lock_seg.n_transaction_table_entries)) aligned like lock_transaction_table,
  1    58 	  2 hash_table	     aligned like lock_hash_table,
  1    59 	  2 meters	     aligned like lock_meters,
  1    60 	  2 free		     fixed bin (71);	/* Free space */
  1    61 
  1    62 dcl	1 lock_aux_seg	     aligned based (lock_aux_seg_ptr),
  1    63 						/* Other than first segment */
  1    64 	  2 n_lock_blocks	     fixed bin,		/* Number of blocks in this segment */
  1    65 	  2 lock_array_offset    fixed bin (18) unsigned aligned,
  1    66 						/* Offset of block array */
  1    67 	  2 free		     fixed bin (71);	/* Free space */
  1    68 
  1    69 dcl	1 lock_transaction_table aligned based (lock_transaction_table_ptr),
  1    70 						/* Process table entry */
  1    71 	  2 deadlock_inx	     fixed bin,		/* Index used for deadlock detection */
  1    72 	  2 process_id	     bit (36) aligned,	/* Multics process identifier */
  1    73 	  2 txn_id	     bit (36) aligned,	/* Current transaction ID */
  1    74 	  2 ev_channel	     fixed bin (71),
  1    75 	  2 own_ptr	     aligned like lock_virtual_ptr,
  1    76 						/* First in thread of owning blocks */
  1    77 	  2 wait_ptr	     aligned like lock_virtual_ptr;
  1    78 						/* Waiting block */
  1    79 
  1    80 dcl	1 lock_hash_table	     aligned based (lock_hash_table_ptr),
  1    81 	  2 buckets	     (lock_seg.n_hash_table_entries) aligned like lock_virtual_ptr;
  1    82 
  1    83 
  1    84 dcl	1 lock_block	     aligned based (lock_block_ptr),
  1    85 						/* Generic block */
  1    86 	  2 seg_inx	     fixed bin unal,
  1    87 	  2 type		     fixed bin unal,
  1    88 	  2 pad		     (5) bit (36) aligned;
  1    89 
  1    90 dcl	1 lock_block_array	     (n_lock_blocks) aligned like lock_block based (lock_block_array_ptr);
  1    91 
  1    92 dcl	1 lock_free_block	     aligned based (lock_free_block_ptr),
  1    93 						/* Free block */
  1    94 	  2 seg_inx	     fixed bin unal,
  1    95 	  2 type		     fixed bin unal,	/* TYPE_FREE */
  1    96 	  2 free_fp	     aligned like lock_virtual_ptr,
  1    97 						/* Thread of free blocks */
  1    98 	  2 pad		     (4) bit (36) aligned;
  1    99 
  1   100 dcl	1 lock_object	     aligned based (lock_object_ptr),
  1   101 						/* That which is locked */
  1   102 	  2 seg_inx	     fixed bin unal,
  1   103 	  2 type		     fixed bin unal,	/* TYPE_OBJECT */
  1   104 	  2 uid		     bit (36) aligned,	/* Page File UID */
  1   105 	  2 ci_no		     fixed bin (35),	/* Control Interval (-1 => Page File) */
  1   106 	  2 owners_ptr	     aligned like lock_virtual_ptr,
  1   107 						/* First in thread of owning blocks */
  1   108 	  2 waiters_ptr	     aligned like lock_virtual_ptr,
  1   109 						/* First in thread of waiting blocks */
  1   110 	  2 ht_fp		     aligned like lock_virtual_ptr;
  1   111 						/* Hash Table thread */
  1   112 
  1   113 dcl	1 lock_owner	     aligned based (lock_owner_ptr),
  1   114 						/* Owner of a lock */
  1   115 	  2 seg_inx	     fixed bin unal,
  1   116 	  2 type		     fixed bin unal,	/* TYPE_OWNER */
  1   117 	  2 lock_ptr	     aligned like lock_virtual_ptr,
  1   118 						/* Pointer to lock_object */
  1   119 	  2 mode		     fixed bin,		/* Type of lock */
  1   120 	  2 owners_fp	     aligned like lock_virtual_ptr,
  1   121 						/* Thread of owners */
  1   122 	  2 transaction_fp	     aligned like lock_virtual_ptr,
  1   123 						/* Thread of locks owned by this transaction */
  1   124 	  2 transaction_ptr	     aligned like lock_virtual_ptr;
  1   125 						/* Pointer to transaction table entry */
  1   126 
  1   127 
  1   128 dcl	1 lock_waiter	     aligned based (lock_waiter_ptr),
  1   129 						/* Waiter for a lock */
  1   130 	  2 seg_inx	     fixed bin unal,
  1   131 	  2 type		     fixed bin unal,	/* TYPE_WAITER */
  1   132 	  2 lock_ptr	     aligned like lock_virtual_ptr,
  1   133 						/* Pointer to lock_object */
  1   134 	  2 mode		     fixed bin,		/* Desired mode */
  1   135 	  2 waiters_fp	     aligned like lock_virtual_ptr,
  1   136 						/* Thread of waiters */
  1   137 	  2 transaction_ptr	     aligned like lock_virtual_ptr,
  1   138 						/* Process table entry of this proces */
  1   139 	  2 pad		     bit (36) aligned;
  1   140 
  1   141 
  1   142 dcl	1 lock_segments	     aligned based (lock_segments_ptr),
  1   143 	  2 seg_baseptr	     (lock_seg.n_lock_segments) ptr unal;
  1   144 
  1   145 dcl	1 lock_virtual_ptr	     aligned based,
  1   146 	  2 seg_inx	     fixed bin unal,
  1   147 	  2 offset	     fixed bin (18) unsigned unal;
  1   148 
  1   149 dcl	1 lock_deadlock	     aligned based (lock_deadlock_ptr),
  1   150 	  2 wait_own	     (n_lock_deadlock, n_lock_deadlock) bit (1) unaligned;
  1   151 
  1   152 declare	1 lock_deadlock_36	     aligned based (lock_deadlock_ptr),
  1   153 	  2 wait_own	     (36, 36) bit (1) unaligned;
  1   154 
  1   155 declare	1 lock_deadlock_72	     aligned based (lock_deadlock_ptr),
  1   156 	  2 wait_own	     (72, 72) bit (1) unaligned;
  1   157 						/* (x,y) ON => x waiting for lock owned by y */
  1   158 
  1   159 declare	lock_deadlock_txn_ids_ptr
  1   160 			     pointer;
  1   161 declare	lock_deadlock_txn_ids    (n_lock_deadlock) bit (36) aligned based (lock_deadlock_txn_ids_ptr);
  1   162 dcl	(
  1   163 	TYPE_FREE		     init (1),
  1   164 	TYPE_OBJECT	     init (2),
  1   165 	TYPE_OWNER	     init (3),
  1   166 	TYPE_WAITER	     init (4),
  1   167 	MAX_TYPE		     init (4)
  1   168 	)		     fixed bin int static options (constant);
  1   169 
  1   170 
  1   171 dcl	1 NULL_VPTR	     aligned int static options (constant),
  1   172 	  2 seg_inx	     fixed bin unal init (-1),
  1   173 	  2 offset	     fixed bin (18) unsigned unal init (0);
  1   174 
  1   175 
  1   176 dcl	LOCK_BLOCK_SIZE	     fixed bin int static options (constant) init (6);
  1   177 						/* Size of all lock blocks */
  1   178 
  1   179 dcl	LOCK_SEGNAME	

                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
