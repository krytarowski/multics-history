ASSEMBLY LISTING OF SEGMENT >special_ldd>install>MR12.2-1184>probe_map_sequence_.alm                                                                                                                
ASSEMBLED ON:	10/24/88  1432.0 mst Mon
OPTIONS USED:	-target l68                              list symbols 
ASSEMBLED BY:	ALM Version 8.13 September 1988 
ASSEMBLER CREATED:	10/17/88  1015.1 mst Mon

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Bull Inc., 1987                *
                                     4  " *                                                         *
                                     5  " * Copyright, (C) Honeywell Information Systems Inc., 1982 *
                                     6  " *                                                         *
                                     7  " * Copyright (c) 1972 by Massachusetts Institute of        *
                                     8  " * Technology and Honeywell Information Systems, Inc.      *
                                     9  " *                                                         *
                                    10  " ***********************************************************
                                    11  
                                    12  " HISTORY COMMENTS:
                                    13  "  1) change(87-06-18,RWaters), approve(87-06-18,MCR7687),
                                    14  "     audit(87-06-24,Huen), install(87-07-15,MR12.1-1040):
                                    15  "     Probe error #109: restore indicator registors correctly.
                                    16  "  2) change(88-10-18,WAAnderson), approve(88-10-18,MCR7952),
                                    17  "     audit(88-10-18,JRGray), install(88-10-24,MR12.2-1184):
                                    18  "     Probe source archive split. Part of C-Probe support.
                                    19  "                                                      END HISTORY COMMENTS
                                    20  
                                    21  
                                    22  "
                                    23  "
                                    24  "	This code is placed in the break map header in order to
                                    25  "	save registers, call the debugger, and restore the registers.
                                    26  "	Also has template code sequences for break slots.
                                    27  "
                                    28  "		Initial Version:  1 July 1974  --  Jeffrey M. Broughton
                                    29  "		       Modified:  13 August 1975 by JMB for new break sequence
                                    30  "		       Modified:  05 May 1977 by B. Greenberg for spri/lpri in
                                    31  "						break slot s.t. cobol works
                                    32  "		       Comments added: JRD 12 Sept 79
                                    33  "
                                    34  "		       Modified:  12 March 1984 by M. Weaver to copy return ptr as bit string
                                    35  "		       Modified:  01 May 1984 by S. Herbst to move sreg instruction before new sequence
                                    36  "			to copy return_ptr, which changes q register.
                                    37  "                          Modified:  05 May 1987 by R. Waters to correctly restore the indicator registers after continuing from a break.
                                    38  "
                                    39  
    000000                          40  	name	probe_map_sequence_
                                    41  
                        000040      42  	equ	probe_extension_size,32
                                    43  
                        000000      44  	segdef	code		This is the start of the code sequence
                        000021      45  	segdef	return		This is the code to return from a break
                        000043      46  	segdef	old_return
                        000042      47  	segdef	count		This is the number of words of code here
                        000066      48  	segdef	after_code	Slot sequences
                        000056      49  	segdef	before_code
                                    50  
                                    51  
                        000000      52  	equ	pointers,0	Will store pointer registers at start of extension
                        000020      53  	equ	registers,16	And registers at offset 16 (decimal)
                        000032      54  	equ	indicators,26	Indicators at offset 26
                        000034      55  	equ	slot_ptr,28	Return ptr into slot left here
                        000036      56  	equ	old_retptr_value,30	Old value of stack_frame.return_ptr
                                    57  "	see probe_break_extension.incl.pl1
                                    58  
                        000004      59  	equ	break_op,4	Offset in operator pointers of break handler ptr
                                    60  
                                    61  " 
                                    62  
                                    63  	even
    000000                          64  code:
                                    65  "
                                    66  "	called with lb set to return addr in map sequence code
                                    67  "
                                    68  	rem			develop address of extension
    000000  aa  6 00022 3521 20     69  	eppbp	sp|stack_frame.next_sp,*	grow frame 32 words
    000001  aa  6 00000 3731 00     70  	epbpsb	sp|0
    000002  aa  2 00040 3535 00     71  	eppbb	bp|probe_extension_size	bb -> new "next_sp"
    000003  aa   000000 0110 03     72  	even
    000004                          73  	inhibit	on
    000004  aa  6 00022 2537 00     74  	spribb	sp|stack_frame.next_sp	grow frame to hold extension
    000005  aa  7 00024 2537 00     75  	spribb	sb|stack_header.stack_end_ptr
    000006                          76  	inhibit	off
                                    77  
    000006  aa  2 00032 7541 00     78  	sti	bp|indicators
    000007  aa  2 00020 7531 00     79  	sreg	bp|registers		save in extension
    000010  aa  6 00024 2371 00     80  	ldaq	sp|stack_frame.return_ptr	pick up old ret_ptr, retaining any indicators
    000011  aa  2 00036 7571 00     81  	staq	bp|old_retptr_value		save it
    000012  aa  2 00034 6515 00     82  	sprilb	bp|slot_ptr		save before/after-code ret addr
                                    83  
    000013  aa   000006 3520 04     84  	eppbp	return-*,ic		remember where to return to
    000014  aa  6 00024 2521 00     85  	spribp	sp|stack_frame.return_ptr	PL/I to return to "return"
    000015  aa  6 00030 3701 20     86  	epplp	sp|stack_frame.lp_ptr,*	restore linkage ptr
    000016  aa   000020 3500 04     87  	eppap	arg_list-*,ic		set up ptr to arg list
    000017  aa  7 00050 3521 20     88  	eppbp	sb|stack_header.trans_op_tv_ptr,*	to operator_pointers_
    000020  aa  2 00004 7131 20     89  	callsp	bp|break_op,*		call break handler
                                    90  
    000021                          91  return:
    000021  aa  6 00022 3521 20     92  	eppbp	sp|stack_frame.next_sp,*	find extension
    000022  aa  2 77740 3521 00     93  	eppbp	bp|-probe_extension_size		bp -> extension
    000023  aa  6 00000 6531 00     94  	spbpsb	sp|0
                                    95  
    000024  aa  2 00036 2371 00     96  	ldaq	bp|old_retptr_value		"get saved info - saved indicators may show as tag bits
    000025  aa  6 00024 7571 00     97  	staq	sp|stack_frame.return_ptr
    000026  aa   000012 2370 04     98  	ldaq	spec_inst-*,ic		"get a pair of clever instructions
    000027  aa  2 00036 7571 00     99  	staq	bp|old_retptr_value		"put them into the extension
    000030  aa  2 00032 6341 00    100  	ldi	bp|indicators		"restore
    000031  aa  2 00020 0731 00    101  	lreg	bp|registers
                                   102  
                                   103  	even
    000032                         104  	inhibit	on			"shrink the stack
    000032  aa  6 00022 2523 00    105  	spribp	sp|stack_frame.next_sp
    000033  aa  7 00024 2523 00    106  	spribp	sb|stack_header.stack_end_ptr
    000034                         107  	inhibit 	off
                                   108  
    000034  aa  2 00036 7101 00    109  	tra	bp|old_retptr_value			go to break slot code
                                   110  
    000035  aa   000000 0110 03    111  	even
    000036                         112  arg_list:
    000036  aa   000000 000004     113  	zero	0,4			arglist header (no args)
    000037  aa   000000 000000     114  	zero	0,0
                                   115  
                                   116  	even
                                   117  
                                   118  "	these two instructions are placed on the stack and executed there!
                                   119  "	they are placed on top of a pointer in the extension
                                   120  "	the first of the pair is at loc old_retptr_value.  When executed, ic is the offset of
                                   121  "	old_retptr_value, so this loads the prs from the base of the extension.
                                   122  "	the second transfers in analogous way thru the ptr at slot_ptr 8which is a misnomer, for
                                   123  "	it is really the return address)
    000040                         124  spec_inst:
    000040  aa   777742 1730 04    125  	lpri	-old_retptr_value,ic
    000041  aa   777775 7100 24    126  	tra	slot_ptr-(old_retptr_value+1),ic*
                                   127  
    000042  aa   000000 000042     128  count:	zero	0,count-code		number of words used
                                   129  
                                   130  
    000043                         131  old_return:
    000043  aa  6 00022 3521 20    132  	eppbp	sp|stack_frame.next_sp,*	find extension
    000044  aa  2 77740 3521 00    133  	eppbp	bp|-32
    000045  aa  6 00000 6531 00    134  	spbpsb	sp|0
                                   135  
    000046  aa  2 00034 3535 20    136  	eppbb	bp|slot_ptr,*		restore saved info
    000047  aa  6 00024 2535 00    137  	spribb	sp|stack_frame.return_ptr
    000050  aa  2 00032 6341 00    138  	ldi	bp|indicators
    000051  aa  2 00020 0731 00    139  	lreg	bp|registers
                                   140  
    000052                         141  	inhibit	on
    000052  aa  6 00022 2523 00    142  	spribp	sp|stack_frame.next_sp
    000053  aa  7 00024 2523 00    143  	spribp	sb|stack_header.stack_end_ptr
    000054                         144  	inhibit 	off
                                   145  
    000054  aa  6 00022 1731 20    146  	lpri	sp|stack_frame.next_sp,*	restore pointers
    000055  aa  6 00024 6101 00    147  	rtcd	sp|stack_frame.return_ptr
                                   148  
                                   149  "	These are the template code sequences for the break slot code.
                                   150  "
    000056                         151  before_code:
    000056  aa  6 00022 2541 20    152  	spri	sp|stack_frame.next_sp,*	save ALL PR'S!
    000057  aa   000000 6710 00    153  	tsplb	*-*			go to map code- probe patches this
    000060  aa   000000 0110 03    154  	nop	0,du		DU holds offset of slot
    000061  aa   000000 0110 03    155  	nop	0,du		to be replaced by instruction
    000062  aa   000000 0110 03    156  	nop 	0,du
    000063  aa   000000 0110 03    157  	nop	0,du
    000064  aa   000000 0110 03    158  	nop	0,du
    000065  aa   000000 7100 00    159  	tra	0		to loc + inst_length
                                   160  
                                   161  
    000066                         162  after_code:
    000066  aa   000000 0110 03    163  	nop	0,du		instruction
    000067  aa   000000 0110 03    164  	nop	0,du
    000070  aa   000000 0110 03    165  	nop 	0,du
    000071  aa   000000 0110 03    166  	nop	0,du
    000072  aa  6 00022 2541 20    167  	spri	sp|stack_frame.next_sp,*	save ALL PR'S
    000073  aa   000000 6710 00    168  	tsplb	*-*			go to map code- patched by probe
    000074  aa   000000 0110 03    169  	nop	0,du		slot offset
    000075  aa   000000 7100 00    170  	tra	0		to loc + inst_length
                                   171  " 
                                   172  
                                   173  
                                   174  	include	stack_header
                                   1-1  "	BEGIN INCLUDE FILE ... stack_header.incl.alm  3/72  Bill Silver
                                   1-2  "
                                   1-3  "	modified 7/76 by M. Weaver for *system links and more system use of areas
                                   1-4  "	modified 3/77 by M. Weaver  to add rnt_ptr
                                   1-5  "	modified 7/77 by S. Webber to add run_unit_depth and assign_linkage_ptr
                                   1-6  "	modified 6/83 by J. Ives to add trace_frames and in_trace.
                                   1-7  
                                   1-8  " HISTORY COMMENTS:
                                   1-9  "  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
                                  1-10  "     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
                                  1-11  "     added the heap_header_ptr definition
                                  1-12  "  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
                                  1-13  "     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
                                  1-14  "     Modified to support control point management.  These changes were
                                  1-15  "     actually made in February 1985 by G. Palter.
                                  1-16  "  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
                                  1-17  "     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
                                  1-18  "     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
                                  1-19  "     bit pad after cur_lot_size for the cpm_enabled. This was done to save
                                  1-20  "     some space int the stack header and change the cpd_ptr unal to
                                  1-21  "     cpm_data_ptr (ITS pair).
                                  1-22  "                                                      END HISTORY COMMENTS
                                  1-23  
                        000004    1-24  	equ	stack_header.cpm_data_ptr,4		ptr to control point for this stack
                        000006    1-25  	equ	stack_header.combined_stat_ptr,6	ptr to separate static area
                                  1-26  
                        000010    1-27  	equ	stack_header.clr_ptr,8		ptr to area containing linkage sections
                        000012    1-28  	equ	stack_header.max_lot_size,10		number of words allowed in lot (DU)
                        000012    1-29  	equ	stack_header.main_proc_invoked,10	nonzero if main proc was invoked in run unit (DL)
                        000012    1-30  	equ	stack_header.run_unit_depth,10	number of active run units stacked (DL)
                        000013    1-31  	equ	stack_header.cur_lot_size,11		DU number of words (entries) in lot
                        000013    1-32            equ	stack_header.cpm_enabled,11		DL  non-zero if control point management is enabled
                        000014    1-33  	equ	stack_header.system_free_ptr,12	ptr to system storage area
                        000016    1-34  	equ	stack_header.user_free_ptr,14		ptr to user storage area
                                  1-35  
                        000020    1-36  	equ	stack_header.parent_ptr,16		ptr to parent stack or null
                        000022    1-37  	equ	stack_header.stack_begin_ptr,18	ptr to first stack frame
                        000024    1-38  	equ	stack_header.stack_end_ptr,20		ptr to next useable stack frame
                        000026    1-39  	equ	stack_header.lot_ptr,22		ptr to the lot for the current ring
                                  1-40  
                        000030    1-41  	equ	stack_header.signal_ptr,24		ptr to signal proc for current ring
                        000032    1-42  	equ	stack_header.bar_mode_sp,26		value of sp before entering bar mode
                        000034    1-43  	equ	stack_header.pl1_operators_ptr,28	ptr: pl1_operators_$operator_table
                        000036    1-44  	equ	stack_header.call_op_ptr,30		ptr to standard call operator
                                  1-45  
                        000040    1-46  	equ	stack_header.push_op_ptr,32		ptr to standard push operator
                        000042    1-47  	equ	stack_header.return_op_ptr,34		ptr to standard return operator
                        000044    1-48  	equ	stack_header.ret_no_pop_op_ptr,36	ptr: stand. return/ no pop operator
                        000046    1-49  	equ	stack_header.entry_op_ptr,38		ptr to standard entry operator
                                  1-50  
                        000050    1-51  	equ	stack_header.trans_op_tv_ptr,40	ptr to table of translator operator ptrs
                        000052    1-52  	equ	stack_header.isot_ptr,42		pointer to ISOT
                        000054    1-53  	equ	stack_header.sct_ptr,44		pointer to System Condition Table
                        000056    1-54  	equ	stack_header.unwinder_ptr,46		pointer to unwinder for current ring
                                  1-55  
                        000060    1-56  	equ	stack_header.sys_link_info_ptr,48	ptr to *system link name table
                        000062    1-57  	equ	stack_header.rnt_ptr,50		ptr to reference name table
                        000064    1-58  	equ	stack_header.ect_ptr,52		ptr to event channel table
                        000066    1-59  	equ	stack_header.assign_linkage_ptr,54	ptr to area for hcs_$assign_linkage calls
                        000070    1-60  	equ	stack_header.heap_header_ptr,56	ptr to heap header.
                        000072    1-61  	equ	stack_header.trace_frames,58		stack of trace_catch_ frames
                        000073    1-62  	equ	stach_header.trace_top_ptr,59		trace pointer
                        000074    1-63  	equ	stack_header.in_trace,60		trace antirecurse bit
                        000100    1-64  	equ	stack_header_end,64			length of stack header
                                  1-65  
                                  1-66  
                                  1-67  
                                  1-68  
                        000000    1-69  	equ	trace_frames.count,0		number of trace frames on stack
                        000001    1-70  	equ	trace_frames.top_ptr,1		packed pointer to top one
                                  1-71  
                                  1-72  "	The  following constant is an offset within the  pl1  operators table.
                                  1-73  "	It  references a  transfer vector table.
                                  1-74  
                        000551    1-75  	bool	tv_offset,551
                                  1-76  
                                  1-77  
                                  1-78  "	The  following constants are offsets within this transfer vector table.
                                  1-79  
                        001170    1-80  	equ	call_offset,tv_offset+271
                        001171    1-81  	equ	push_offset,tv_offset+272
                        001172    1-82  	equ	return_offset,tv_offset+273
                        001173    1-83  	equ	return_no_pop_offset,tv_offset+274
                        001174    1-84  	equ	entry_offset,tv_offset+275
                                  1-85  
                                  1-86  
                                  1-87  " 	END INCLUDE FILE stack_header.incl.alm
                                   175  	include	stack_frame
                                   2-1  "
                                   2-2  "	BEGIN INCLUDE FILE ... stack_frame.incl.alm   6/72 RBS
                                   2-3  "
                                   2-4  " Modified: 16 Dec 1977, D. Levin - to add fio_ps_ptr
                                   2-5  " Modified:  3 Feb 1978, P. Krupp - to add run_unit_manager_bit & main_proc_bit
                                   2-6  " Modified: 21 March 1978, D. Levin - change fio_ps_ptr to support_ptr
                                   2-7  "
                        000020     2-8  	equ	stack_frame.prev_sp,16
                        000020     2-9  	equ	stack_frame.condition_word,16
                        000022    2-10  	equ	stack_frame.next_sp,18
                        000022    2-11  	equ	stack_frame.signaller_word,18
                        000024    2-12  	equ	stack_frame.return_ptr,20
                        000026    2-13  	equ	stack_frame.entry_ptr,22
                        000030    2-14  	equ	stack_frame.operator_ptr,24
                        000030    2-15  	equ	stack_frame.lp_ptr,24
                        000032    2-16  	equ	stack_frame.arg_ptr,26
                        000034    2-17  	equ	stack_frame.static_ptr,28
                        000035    2-18  	equ	stack_frame.support_ptr,29	" only used by fortran I/O
                        000036    2-19  	equ	stack_frame.on_unit_rel_ptrs,30
                        000037    2-20  	equ	stack_frame.operator_ret_ptr,31
                        000037    2-21  	equ	stack_frame.translator_id,31
                        000040    2-22  	equ	stack_frame.regs,32
                        000060    2-23  	equ	stack_frame.min_length,48
                        000020    2-24  	equ	stack_frame.flag_word,16
                        020000    2-25  	bool	stack_frame.main_proc_bit,020000	(DL)
                        010000    2-26  	bool	stack_frame.run_unit_manager,010000	(DL)
                        004000    2-27  	bool	stack_frame.signal_bit,004000		(DL)
                        002000    2-28  	bool	stack_frame.crawl_out_bit,002000	(DL)
                        001000    2-29  	bool	stack_frame.signaller_bit,001000	(DL)
                        000400    2-30  	bool	stack_frame.link_trap_bit,000400	(DL)
                        000200    2-31  	bool	stack_frame.support_bit,000200	(DL)
                        000100    2-32  	bool	stack_frame.condition_bit,000100	(DL)
                                  2-33  
                                  2-34  "
                                  2-35  "	END INCLUDE FILE  ... stack_frame.incl.alm
                                  2-36  "
                                   176  	end

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000076  5a   000003 000000 
    000077  5a   000063 600000 
    000100  aa   000000 000000 
    000101  55   000013 000002 
    000102  5a   000002 400003 
    000103  55   000006 000013 
    000104  aa  023 160 162 157
    000105  aa  142 145 137 155
    000106  aa  141 160 137 163
    000107  aa  145 161 165 145
    000110  aa  156 143 145 137
    000111  55   000021 000003 
    000112  0a   000056 400000 
    000113  55   000016 000003 
    000114  aa  013 142 145 146         before_code
    000115  aa  157 162 145 137
    000116  aa  143 157 144 145
    000117  55   000027 000013 
    000120  0a   000066 400000 
    000121  55   000024 000003 
    000122  aa  012 141 146 164         after_code
    000123  aa  145 162 137 143
    000124  aa  157 144 145 000
    000125  55   000034 000021 
    000126  0a   000042 400000 
    000127  55   000032 000003 
    000130  aa  005 143 157 165         count
    000131  aa  156 164 000 000
    000132  55   000042 000027 
    000133  0a   000043 400000 
    000134  55   000037 000003 
    000135  aa  012 157 154 144         old_return
    000136  aa  137 162 145 164
    000137  aa  165 162 156 000
    000140  55   000047 000034 
    000141  0a   000021 400000 
    000142  55   000045 000003 
    000143  aa  006 162 145 164         return
    000144  aa  165 162 156 000
    000145  55   000054 000042 
    000146  0a   000000 400000 
    000147  55   000052 000003 
    000150  aa  004 143 157 144         code
    000151  aa  145 000 000 000
    000152  55   000002 000047 
    000153  6a   000000 400002 
    000154  55   000057 000003 
    000155  aa  014 163 171 155         symbol_table
    000156  aa  142 157 154 137
    000157  aa  164 141 142 154
    000160  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000161  aa   000000 000015 
    000162  5a   000034 000000 
    000163  aa   000000 000000 
    000164  5a   000027 000000 
    000165  5a   000047 000000 
    000166  aa   000000 000000 
    000167  aa   000000 000000 
    000170  5a   000054 000000 
    000171  aa   000000 000000 
    000172  aa   000000 000000 
    000173  5a   000042 000000 
    000174  aa   000000 000000 
    000175  5a   000021 000000 
    000176  5a   000013 000000 

NO EXTERNAL NAMES

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000177  aa   000001 000000 
    000200  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    000201  aa   000000 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000076 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000010 
    000007  a2   000000 000000 
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000010 
    000004  aa   000000 116575 
    000005  aa   012137 773040 
    000006  aa   000000 116606 
    000007  aa   027110 062774 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000177 
    000020  aa   000000 000142 
    000021  aa   000153 000150 
    000022  aa   000167 000142 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   070056 061063 
    000030  aa   040123 145160 
    000031  aa   164145 155142 
    000032  aa   145162 040061 
    000033  aa   071070 070040 
    000034  aa   110151 162156 
    000035  aa   145151 163145 
    000036  aa   156056 123171 
    000037  aa   163115 141151 
    000040  aa   156164 056141 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   055164 141162 
    000045  aa   147145 164040 
    000046  aa   154066 070040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040154 151163 
    000057  aa   164040 163171 
    000060  aa   155142 157154 
    000061  aa   163040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000003 
    000066  aa   000102 000070 
    000067  aa   166057 365021 
    000070  aa   000000 116606 
    000071  aa   001520 200000 
    000072  aa   000120 000042 
    000073  aa   147777 464111 
    000074  aa   000000 115000 
    000075  aa   507463 000000 
    000076  aa   000131 000041 
    000077  aa   052721 247134 
    000100  aa   000000 105272 
    000101  aa   317215 400000 
    000102  aa   076163 160145          >special_ldd>install>MR12.2-1184>probe_map_sequence_.alm
    000103  aa   143151 141154 
    000104  aa   137154 144144 
    000105  aa   076151 156163 
    000106  aa   164141 154154 
    000107  aa   076115 122061 
    000110  aa   062056 062055 
    000111  aa   061061 070064 
    000112  aa   076160 162157 
    000113  aa   142145 137155 
    000114  aa   141160 137163 
    000115  aa   145161 165145 
    000116  aa   156143 145137 
    000117  aa   056141 154155 
    000120  aa   076154 144144          >ldd>include>stack_header.incl.alm
    000121  aa   076151 156143 
    000122  aa   154165 144145 
    000123  aa   076163 164141 
    000124  aa   143153 137150 
    000125  aa   145141 144145 
    000126  aa   162056 151156 
    000127  aa   143154 056141 
    000130  aa   154155 040040 
    000131  aa   076154 144144          >ldd>include>stack_frame.incl.alm
    000132  aa   076151 156143 
    000133  aa   154165 144145 
    000134  aa   076163 164141 
    000135  aa   143153 137146 
    000136  aa   162141 155145 
    000137  aa   056151 156143 
    000140  aa   154056 141154 
    000141  aa   155040 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

          66    after_code               probe_map_sequence_:       48,  162.
          36    arg_list                 probe_map_sequence_:       87,  112.
          56    before_code              probe_map_sequence_:       49,  151.
           4    break_op                 probe_map_sequence_:       59,   89.
        1170    call_offset              stack_header:        80.
           0    code                     probe_map_sequence_:       44,   64,  128.
          42    count                    probe_map_sequence_:       47,  128.
        1174    entry_offset             stack_header:        84.
          32    indicators               probe_map_sequence_:       54,   78,  100,  138.
          36    old_retptr_value         probe_map_sequence_:       56,   81,   96,   99,  109,  125,  126.
          43    old_return               probe_map_sequence_:       46,  131.
           0    pointers                 probe_map_sequence_:       52.
          40    probe_extension_size     probe_map_sequence_:       42,   71,   93.
        1171    push_offset              stack_header:        81.
          20    registers                probe_map_sequence_:       53,   79,  101,  139.
          21    return                   probe_map_sequence_:       45,   84,   91.
        1173    return_no_pop_offset     stack_header:        83.
        1172    return_offset            stack_header:        82.
          34    slot_ptr                 probe_map_sequence_:       55,   82,  126,  136.
          40    spec_inst                probe_map_sequence_:       98,  124.
          73    stach_header.trace_top_ptr     stack_header:        62.
          32    stack_frame.arg_ptr      stack_frame:   16.
         100    stack_frame.condition_bit      stack_frame:   32.
          20    stack_frame.condition_word     stack_frame:    9.
        2000    stack_frame.crawl_out_bit      stack_frame:   28.
          26    stack_frame.entry_ptr    stack_frame:   13.
          20    stack_frame.flag_word    stack_frame:   24.
         400    stack_frame.link_trap_bit      stack_frame:   30.
          30    stack_frame.lp_ptr       probe_map_sequence_:       86,
                                         stack_frame:   15.
       20000    stack_frame.main_proc_bit      stack_frame:   25.
          60    stack_frame.min_length   stack_frame:   23.
          22    stack_frame.next_sp      probe_map_sequence_:       69,   74,   92,  105,  132,  142,  146,  152,  167,
                                         stack_frame:   10.
          36    stack_frame.on_unit_rel_ptrs   stack_frame:   19.
          30    stack_frame.operator_ptr       stack_frame:   14.
          37    stack_frame.operator_ret_ptr   stack_frame:   20.
          20    stack_frame.prev_sp      stack_frame:    8.
          40    stack_frame.regs         stack_frame:   22.
          24    stack_frame.return_ptr   probe_map_sequence_:       80,   85,   97,  137,  147,
                                         stack_frame:   12.
       10000    stack_frame.run_unit_manager   stack_frame:   26.
        1000    stack_frame.signaller_bit      stack_frame:   29.
          22    stack_frame.signaller_word     stack_frame:   11.
        4000    stack_frame.signal_bit   stack_frame:   27.
          34    stack_frame.static_ptr   stack_frame:   17.
         200    stack_frame.support_bit  stack_frame:   31.
          35    stack_frame.support_ptr  stack_frame:   18.
          37    stack_frame.translator_id      stack_frame:   21.
          66    stack_header.assign_linkage_ptr      stack_header:        59.
          32    stack_header.bar_mode_sp       stack_header:        42.
          36    stack_header.call_op_ptr       stack_header:        44.
          10    stack_header.clr_ptr     stack_header:        27.
           6    stack_header.combined_stat_ptr       stack_header:        25.
           4    stack_header.cpm_data_ptr      stack_header:        24.
          13    stack_header.cpm_enabled       stack_header:        32.
          13    stack_header.cur_lot_size      stack_header:        31.
          64    stack_header.ect_ptr     stack_header:        58.
          46    stack_header.entry_op_ptr      stack_header:        49.
          70    stack_header.heap_header_ptr   stack_header:        60.
          74    stack_header.in_trace    stack_header:        63.
          52    stack_header.isot_ptr    stack_header:        52.
          26    stack_header.lot_ptr     stack_header:        39.
          12    stack_header.main_proc_invoked       stack_header:        29.
          12    stack_header.max_lot_size      stack_header:        28.
          20    stack_header.parent_ptr  stack_header:        36.
          34    stack_header.pl1_operators_ptr       stack_header:        43.
          40    stack_header.push_op_ptr       stack_header:        46.
          42    stack_header.return_op_ptr     stack_header:        47.
          44    stack_header.ret_no_pop_op_ptr       stack_header:        48.
          62    stack_header.rnt_ptr     stack_header:        57.
          12    stack_header.run_unit_depth    stack_header:        30.
          54    stack_header.sct_ptr     stack_header:        53.
          30    stack_header.signal_ptr  stack_header:        41.
          22    stack_header.stack_begin_ptr   stack_header:        37.
          24    stack_header.stack_end_ptr     probe_map_sequence_:       75,  106,  143,
                                               stack_header:        38.
          14    stack_header.system_free_ptr   stack_header:        33.
          60    stack_header.sys_link_info_ptr       stack_header:        56.
          72    stack_header.trace_frames      stack_header:        61.
          50    stack_header.trans_op_tv_ptr   probe_map_sequence_:       88,
                                               stack_header:        51.
          56    stack_header.unwinder_ptr      stack_header:        54.
          16    stack_header.user_free_ptr     stack_header:        34.
         100    stack_header_end         stack_header:        64.
           0    trace_frames.count       stack_header:        69.
           1    trace_frames.top_ptr     stack_header:        70.
         551    tv_offset                stack_header:        75,   80,   81,   82,   83,   84.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
