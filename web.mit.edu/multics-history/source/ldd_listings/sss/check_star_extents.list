	COMPILATION LISTING OF SEGMENT check_star_extents
	Compiled by: Multics PL/I Compiler, Release 28d, of September 14, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 10/03/83  1528.2 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 check_star_extents:	proc(ps,plist);
       12 
       13 /* In any procedure call, if an operator_node having an output temporary with a length
       14*   expression appears as an argument in a position corresponding to a star extent parameter
       15*   descriptor (or in any position if the procedure is declared options(variable)), that
       16*   procedure and any procedures invoked in arguments following that one must be made
       17*   non-quick in order to avoid destroying the argument by shortening the stack.  (This fixes
       18*   bug 816.)  This program is called only when it has been determined by the caller that
       19*   descriptors are required.
       20*
       21*   Written by:	Richard A. Barnes	13 December 1973	*/
       22 
       23 dcl	(ps,plist) ptr;
       24 
       25 dcl	options_variable bit(1) aligned;
       26 dcl	(i,k,n) fixed bin;
       27 dcl	(a,arg_list,s) ptr;
       28 
       29 dcl	(fixed,null) builtin;
       30 
       31 dcl	make_non_quick entry(ptr, bit (36) aligned);
       32 
  1     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
  1     2 
  1     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
  1     4 
  1     5 dcl (	block_node		initial("000000001"b),
  1     6 	statement_node		initial("000000010"b),
  1     7 	operator_node		initial("000000011"b),
  1     8 	reference_node		initial("000000100"b),
  1     9 	token_node		initial("000000101"b),
  1    10 	symbol_node		initial("000000110"b),
  1    11 	context_node		initial("000000111"b),
  1    12 	array_node		initial("000001000"b),
  1    13 	bound_node		initial("000001001"b),
  1    14 	format_value_node		initial("000001010"b),
  1    15 	list_node			initial("000001011"b),
  1    16 	default_node		initial("000001100"b),
  1    17 	machine_state_node		initial("000001101"b),
  1    18 	source_node		initial("000001110"b),
  1    19 	label_node		initial("000001111"b),
  1    20 	cross_reference_node	initial("000010000"b),
  1    21 	sf_par_node		initial("000010001"b),
  1    22 	temporary_node		initial("000010010"b),
  1    23 	label_array_element_node	initial("000010011"b),
  1    24 	by_name_agg_node		initial("000010100"b))
  1    25 				bit(9) internal static aligned options(constant);
  1    26 
  1    27 dcl	1 node			based aligned,
  1    28 	2 type			unal bit(9),
  1    29 	2 source_id		unal structure,
  1    30 	  3 file_number		bit(8),
  1    31 	  3 line_number		bit(14),
  1    32 	  3 statement_number	bit(5);
  1    33 
  1    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
       33 
  2     1 /* BEGIN INCLUDE FILE ... block.incl.pl1 */
  2     2 /* Modified 22 Ocober 1980 by M. N. Davidoff to increase max block.number to 511 */
  2     3 /* format: style3,idind30 */
  2     4 
  2     5 declare	1 block			aligned based,
  2     6 	  2 node_type		bit (9) unaligned,
  2     7 	  2 source_id		structure unaligned,
  2     8 	    3 file_number		bit (8),
  2     9 	    3 line_number		bit (14),
  2    10 	    3 statement_number	bit (5),
  2    11 	  2 father		ptr unaligned,
  2    12 	  2 brother		ptr unaligned,
  2    13 	  2 son			ptr unaligned,
  2    14 	  2 declaration		ptr unaligned,
  2    15 	  2 end_declaration		ptr unaligned,
  2    16 	  2 default		ptr unaligned,
  2    17 	  2 end_default		ptr unaligned,
  2    18 	  2 context		ptr unaligned,
  2    19 	  2 prologue		ptr unaligned,
  2    20 	  2 end_prologue		ptr unaligned,
  2    21 	  2 main			ptr unaligned,
  2    22 	  2 end_main		ptr unaligned,
  2    23 	  2 return_values		ptr unaligned,
  2    24 	  2 return_count		ptr unaligned,
  2    25 	  2 plio_ps		ptr unaligned,
  2    26 	  2 plio_fa		ptr unaligned,
  2    27 	  2 plio_ffsb		ptr unaligned,
  2    28 	  2 plio_ssl		ptr unaligned,
  2    29 	  2 plio_fab2		ptr unaligned,
  2    30 	  2 block_type		bit (9) unaligned,
  2    31 	  2 prefix		bit (12) unaligned,
  2    32 	  2 like_attribute		bit (1) unaligned,
  2    33 	  2 no_stack		bit (1) unaligned,
  2    34 	  2 get_data		bit (1) unaligned,
  2    35 	  2 flush_at_call		bit (1) unaligned,
  2    36 	  2 processed		bit (1) unaligned,
  2    37 	  2 text_displayed		bit (1) unaligned,
  2    38 	  2 number		fixed bin (9) unsigned unaligned,
  2    39 	  2 free_temps		dimension (3) ptr,	/* these fields are used by the code generator */
  2    40 	  2 temp_list		ptr,
  2    41 	  2 entry_list		ptr,
  2    42 	  2 o_and_s		ptr,
  2    43 	  2 why_nonquick		aligned,
  2    44 	    3 auto_adjustable_storage bit (1) unaligned,
  2    45 	    3 returns_star_extents	bit (1) unaligned,
  2    46 	    3 stack_extended_by_args	bit (1) unaligned,
  2    47 	    3 invoked_by_format	bit (1) unaligned,
  2    48 	    3 format_statement	bit (1) unaligned,
  2    49 	    3 io_statements		bit (1) unaligned,
  2    50 	    3 assigned_to_entry_var	bit (1) unaligned,
  2    51 	    3 condition_statements	bit (1) unaligned,
  2    52 	    3 no_owner		bit (1) unaligned,
  2    53 	    3 recursive_call	bit (1) unaligned,
  2    54 	    3 options_non_quick	bit (1) unaligned,
  2    55 	    3 options_variable	bit (1) unaligned,
  2    56 	    3 never_referenced	bit (1) unaligned,
  2    57 	    3 pad_nonquick		bit (5) unaligned,
  2    58 	  2 prologue_flag		bit (1) unaligned,
  2    59 	  2 options_main		bit (1) unaligned,
  2    60 	  2 pad			bit (16) unaligned,
  2    61 	  2 number_of_entries	fixed bin (17),
  2    62 	  2 level			fixed bin (17),
  2    63 	  2 last_auto_loc		fixed bin (17),
  2    64 	  2 symbol_block		fixed bin (17),
  2    65 	  2 entry_info		fixed bin (18),
  2    66 	  2 enter			structure unaligned,
  2    67 	    3 start		fixed bin (17),
  2    68 	    3 end			fixed bin (17),
  2    69 	  2 leave			structure unaligned,
  2    70 	    3 start		fixed bin (17),
  2    71 	    3 end			fixed bin (17),
  2    72 	  2 owner			ptr;
  2    73 
  2    74 declare	max_block_number		fixed bin internal static options (constant) initial (511);
  2    75 
  2    76 /* END INCLUDE FILE ... block.incl.pl1 */
       34 
  3     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
  3     2 
  3     3 dcl	1 symbol			based aligned,
  3     4 	2 node_type		bit(9) unal,
  3     5 	2 source_id		structure unal,
  3     6 	  3 file_number		bit(8),
  3     7 	  3 line_number		bit(14),
  3     8 	  3 statement_number	bit(5),
  3     9 	2 location		fixed(18) unal unsigned,
  3    10 	2 allocated		bit(1) unal,
  3    11 	2 dcl_type		bit(3) unal,
  3    12 	2 reserved		bit(6) unal,
  3    13 	2 pix			unal,
  3    14 	  3 pic_fixed		bit(1) unal,
  3    15 	  3 pic_float		bit(1) unal,
  3    16 	  3 pic_char		bit(1) unal,
  3    17 	  3 pic_scale		fixed(7) unal,
  3    18 	  3 pic_size		fixed(7) unal,
  3    19 	2 level			fixed(8) unal,
  3    20 	2 boundary		fixed(3) unal,
  3    21 	2 size_units		fixed(3) unal,
  3    22 	2 scale			fixed(7) unal,
  3    23 	2 runtime			bit(18) unal,
  3    24 	2 runtime_offset		bit(18) unal,
  3    25 	2 block_node		ptr unal,
  3    26 	2 token			ptr unal,
  3    27 	2 next			ptr unal,
  3    28 	2 multi_use		ptr unal,
  3    29 	2 cross_references		ptr unal,
  3    30 	2 initial			ptr unal,
  3    31 	2 array			ptr unal,
  3    32 	2 descriptor		ptr unal,
  3    33 	2 equivalence		ptr unal,
  3    34 	2 reference		ptr unal,
  3    35 	2 general			ptr unal,
  3    36 	2 father			ptr unal,
  3    37 	2 brother			ptr unal,
  3    38 	2 son			ptr unal,
  3    39 	2 word_size		ptr unal,
  3    40 	2 bit_size		ptr unal,
  3    41 	2 dcl_size		ptr unal,
  3    42 	2 symtab_size		ptr unal,
  3    43 	2 c_word_size		fixed(24),
  3    44 	2 c_bit_size		fixed(24),
  3    45 	2 c_dcl_size		fixed(24),
  3    46 
  3    47 	2 attributes		structure aligned,
  3    48 	  3 data_type		structure unal,
  3    49 	    4 structure		bit(1) ,
  3    50 	    4 fixed		bit(1),
  3    51 	    4 float		bit(1),
  3    52 	    4 bit			bit(1),
  3    53 	    4 char		bit(1),
  3    54 	    4 ptr			bit(1),
  3    55 	    4 offset		bit(1),
  3    56 	    4 area		bit(1),
  3    57 	    4 label		bit(1),
  3    58 	    4 entry		bit(1),
  3    59 	    4 file		bit(1),
  3    60 	    4 arg_descriptor	bit(1),
  3    61 	    4 storage_block		bit(1),
  3    62 	    4 explicit_packed	bit(1), /* options(packed) */
  3    63 	    4 condition		bit(1),
  3    64 	    4 format		bit(1),
  3    65 	    4 builtin		bit(1),
  3    66 	    4 generic		bit(1),
  3    67 	    4 picture		bit(1),
  3    68 
  3    69 	  3 misc_attributes		structure unal,
  3    70 	    4 dimensioned		bit(1),
  3    71 	    4 initialed		bit(1),
  3    72 	    4 aligned		bit(1),
  3    73 	    4 unaligned		bit(1),
  3    74 	    4 signed		bit(1),
  3    75 	    4 unsigned		bit(1),
  3    76 	    4 precision		bit(1),
  3    77 	    4 varying		bit(1),
  3    78 	    4 local		bit(1),
  3    79 	    4 decimal		bit(1),
  3    80 	    4 binary		bit(1),
  3    81 	    4 real		bit(1),
  3    82 	    4 complex		bit(1),
  3    83 	    4 variable		bit(1),
  3    84 	    4 reducible		bit(1),
  3    85 	    4 irreducible		bit(1),
  3    86 	    4 returns		bit(1),
  3    87 	    4 position		bit(1),
  3    88 	    4 internal		bit(1),
  3    89 	    4 external		bit(1),
  3    90 	    4 like		bit(1),
  3    91 	    4 member		bit(1),
  3    92 	    4 non_varying		bit(1),
  3    93 	    4 options		bit(1),
  3    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
  3    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
  3    96 
  3    97 	  3 storage_class		structure unal,
  3    98 	    4 auto		bit(1),
  3    99 	    4 based		bit(1),
  3   100 	    4 static		bit(1),
  3   101 	    4 controlled		bit(1),
  3   102 	    4 defined		bit(1),
  3   103 	    4 parameter		bit(1),
  3   104 	    4 param_desc		bit(1),
  3   105 	    4 constant		bit(1),
  3   106 	    4 temporary		bit(1),
  3   107 	    4 return_value		bit(1),
  3   108 
  3   109 	  3 file_attributes		structure unal,
  3   110 	    4 print		bit(1),
  3   111 	    4 input		bit(1),
  3   112 	    4 output		bit(1),
  3   113 	    4 update		bit(1),
  3   114 	    4 stream		bit(1),
  3   115 	    4 reserved_1		bit(1),
  3   116 	    4 record		bit(1),
  3   117 	    4 sequential		bit(1),
  3   118 	    4 direct		bit(1),
  3   119 	    4 interactive		bit(1),		/* env(interactive) */
  3   120 	    4 reserved_2		bit(1),
  3   121 	    4 reserved_3		bit(1),
  3   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
  3   123 	    4 keyed		bit(1),
  3   124 	    4 reserved_4		bit(1),
  3   125 	    4 environment		bit(1),
  3   126 
  3   127 	  3 compiler_developed	structure unal,
  3   128 	    4 aliasable		bit(1),
  3   129 	    4 packed		bit(1),
  3   130 	    4 passed_as_arg		bit(1),
  3   131 	    4 allocate		bit(1),
  3   132 	    4 set			bit(1),
  3   133 	    4 exp_extents		bit(1),
  3   134 	    4 refer_extents		bit(1),
  3   135 	    4 star_extents		bit(1),
  3   136 	    4 isub		bit(1),
  3   137 	    4 put_in_symtab		bit(1),
  3   138 	    4 contiguous		bit(1),
  3   139 	    4 put_data		bit(1),
  3   140 	    4 overlayed		bit(1),
  3   141 	    4 error		bit(1),
  3   142 	    4 symtab_processed	bit(1),
  3   143 	    4 overlayed_by_builtin	bit(1),
  3   144 	    4 defaulted		bit(1),
  3   145 	    4 connected		bit(1);
  3   146 
  3   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
       35 
  4     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
  4     2 
  4     3 dcl	1 reference		based aligned,
  4     4 	2 node_type		bit(9) unaligned,
  4     5 	2 array_ref		bit(1) unaligned,
  4     6 	2 varying_ref		bit(1) unaligned,
  4     7 	2 shared			bit(1) unaligned,
  4     8 	2 put_data_sw		bit(1) unaligned,
  4     9 	2 processed		bit(1) unaligned,
  4    10 	2 units			fixed(3) unaligned,
  4    11 	2 ref_count		fixed(17) unaligned,
  4    12 	2 c_offset		fixed(24),
  4    13 	2 c_length		fixed(24),
  4    14 	2 symbol			ptr unaligned,
  4    15 	2 qualifier		ptr unaligned,
  4    16 	2 offset			ptr unaligned,
  4    17 	2 length			ptr unaligned,
  4    18 	2 subscript_list		ptr unaligned,
  4    19 						/* these fields are used by the 645 code generator */
  4    20 	2 address			structure unaligned,
  4    21 	  3 base			bit(3),
  4    22 	  3 offset		bit(15),
  4    23 	  3 op			bit(9),
  4    24 	  3 no_address		bit(1),
  4    25 	  3 inhibit		bit(1),
  4    26 	  3 ext_base		bit(1),
  4    27 	  3 tag			bit(6),
  4    28 	2 info			structure unaligned,
  4    29 	  3 address_in		structure,
  4    30 	    4 b			dimension(0:7) bit(1),
  4    31 	    4 storage		bit(1),
  4    32 	  3 value_in		structure,
  4    33 	    4 a			bit(1),
  4    34 	    4 q			bit(1),
  4    35 	    4 aq			bit(1),
  4    36 	    4 string_aq		bit(1),
  4    37 	    4 complex_aq		bit(1),
  4    38 	    4 decimal_aq		bit(1),
  4    39 	    4 b			dimension(0:7) bit(1),
  4    40 	    4 storage		bit(1),
  4    41 	    4 indicators		bit(1),
  4    42 	    4 x			dimension(0:7) bit(1),
  4    43 	  3 other			structure,
  4    44 	    4 big_offset		bit(1),
  4    45 	    4 big_length		bit(1),
  4    46 	    4 modword_in_offset	bit(1),
  4    47 	2 data_type		fixed(5) unaligned,
  4    48 	2 bits			structure unaligned,
  4    49 	  3 padded_ref		bit(1),
  4    50 	  3 aligned_ref		bit(1),
  4    51 	  3 long_ref		bit(1),
  4    52 	  3 forward_ref		bit(1),
  4    53 	  3 ic_ref		bit(1),
  4    54 	  3 temp_ref		bit(1),
  4    55 	  3 defined_ref		bit(1),
  4    56 	  3 evaluated		bit(1),
  4    57 	  3 allocate		bit(1),
  4    58 	  3 allocated		bit(1),
  4    59 	  3 aliasable		bit(1),
  4    60 	  3 even			bit(1),
  4    61 	  3 perm_address		bit(1),
  4    62 	  3 aggregate		bit(1),
  4    63 	  3 hit_zero		bit(1),
  4    64 	  3 dont_save		bit(1),
  4    65 	  3 fo_in_qual		bit(1),
  4    66 	  3 hard_to_load		bit(1),
  4    67 	2 relocation		bit(12) unaligned,
  4    68 	2 more_bits		structure unaligned,
  4    69 	  3 substr		bit(1),
  4    70 	  3 padded_for_store_ref	bit(1),
  4    71 	  3 aligned_for_store_ref	bit(1),
  4    72 	  3 mbz			bit(15),
  4    73 	2 store_ins		bit(18) unaligned;
  4    74 
  4    75 /* END INCLUDE FILE ... reference.incl.pl1 */
       36 
  5     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
  5     2 
  5     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
  5     4 
  5     5 /* format: style3 */
  5     6 dcl	1 operator	based aligned,
  5     7 	  2 node_type	bit (9) unaligned,
  5     8 	  2 op_code	bit (9) unaligned,
  5     9 	  2 shared	bit (1) unaligned,
  5    10 	  2 processed	bit (1) unaligned,
  5    11 	  2 optimized	bit (1) unaligned,
  5    12 	  2 number	fixed (14) unaligned,
  5    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
  5    14 
  5    15 dcl	max_number_of_operands
  5    16 			fixed bin (15) int static options (constant) initial (32767);
  5    17 
  5    18 /* END INCLUDE FILE ... operator.incl.pl1 */
       37 
  6     1 /* BEGIN INCLUDE FILE ... list.incl.pl1 */
  6     2 
  6     3 /* Modified 26 June 81 by EBush to add max_list_elements */
  6     4 
  6     5 
  6     6 dcl	1 list		based aligned,
  6     7 	2 node_type	bit(9) unaligned,
  6     8 	2 reserved	bit(12) unaligned,
  6     9 	2 number		fixed(14) unaligned,
  6    10 	2 element		dimension(n refer(list.number)) ptr unaligned;
  6    11 
  6    12 dcl       max_list_elements   fixed bin(17) internal static options (constant)
  6    13 	                    init(16383);
  6    14 
  6    15 /* END INCLUDE FILE ... list.incl.pl1 */
       38 
       39 
       40 
       41 	s = ps;
       42 	arg_list = plist;
       43 
       44 	n = arg_list -> list.number - fixed(s -> symbol.returns,1);
       45 
       46 	do k = 1 to n;
       47 	     a = arg_list -> element(k);
       48 	     if a -> node.type = operator_node
       49 	     then if a -> operand(1) -> reference.length ^= null
       50 	     then do;
       51 		if s -> symbol.constant
       52 		then if s -> symbol.equivalence ^= null
       53 		     then do;
       54 			     s -> symbol.equivalence -> block.why_nonquick.stack_extended_by_args = "1"b;
       55 			     s -> symbol.equivalence -> block.no_stack = "0"b;
       56 			end;
       57 
       58 		do i = k + 1 to n;
       59 		     call make_non_quick((arg_list -> element(i)), "001"b);	/* block.why_nonquick.stack_extended_by_args */
       60 		     end;
       61 
       62 		return;
       63 		end;
       64 
       65 	     end;
       66 end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/03/83  1006.4  check_star_extents.pl1            >spec>on>pl128d>check_star_extents.pl1
33           1    07/21/80  1546.3  nodes.incl.pl1                    >ldd>include>nodes.incl.pl1
34           2    08/13/81  2043.5  block.incl.pl1                    >ldd>include>block.incl.pl1
35           3    10/02/83  0828.4  symbol.incl.pl1                   >spec>on>pl128d>symbol.incl.pl1
36           4    07/21/80  1546.3  reference.incl.pl1                >ldd>include>reference.incl.pl1
37           5    07/21/80  1546.3  operator.incl.pl1                 >ldd>include>operator.incl.pl1
38           6    08/13/81  2211.5  list.incl.pl1                     >ldd>include>list.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
a                               000104 automatic       pointer                  dcl 27 set ref 47* 48 48
arg_list                        000106 automatic       pointer                  dcl 27 set ref 42* 44 47 59
attributes               31            based           structure                level 2 dcl 3-3
block                                  based           structure                level 1 dcl 2-5
constant                 32(16)        based           bit(1)                   level 4 packed unaligned dcl 3-3 ref 51
element                   1            based           pointer                  array level 2 packed unaligned dcl 6-6 ref 47 59
equivalence              14            based           pointer                  level 2 packed unaligned dcl 3-3 ref 51 54 55
fixed                                                  builtin function         dcl 29 ref 44
i                               000100 automatic       fixed bin(17,0)          dcl 26 set ref 58* 59*
k                               000101 automatic       fixed bin(17,0)          dcl 26 set ref 46* 47 58*
length                    6            based           pointer                  level 2 packed unaligned dcl 4-3 ref 48
list                                   based           structure                level 1 dcl 6-6
make_non_quick                  000010 constant        entry                    external dcl 31 ref 59
misc_attributes          31(19)        based           structure                level 3 packed unaligned dcl 3-3
n                               000102 automatic       fixed bin(17,0)          dcl 26 set ref 44* 46 58
no_stack                 24(22)        based           bit(1)                   level 2 packed unaligned dcl 2-5 set ref 55*
node                                   based           structure                level 1 dcl 1-27
null                                                   builtin function         dcl 29 ref 48 51
number                    0(21)        based           fixed bin(14,0)          level 2 packed unaligned dcl 6-6 ref 44
operand                   1            based           pointer                  array level 2 packed unaligned dcl 5-6 ref 48
operator                               based           structure                level 1 dcl 5-6
operator_node                          constant        bit(9)                   initial dcl 1-5 ref 48
plist                                  parameter       pointer                  dcl 23 ref 11 42
ps                                     parameter       pointer                  dcl 23 ref 11 41
reference                              based           structure                level 1 dcl 4-3
returns                  31(35)        based           bit(1)                   level 4 packed unaligned dcl 3-3 ref 44
s                               000110 automatic       pointer                  dcl 27 set ref 41* 44 51 51 54 55
stack_extended_by_args
                         42(02)        based           bit(1)                   level 3 packed unaligned dcl 2-5 set ref 54*
storage_class            32(09)        based           structure                level 3 packed unaligned dcl 3-3
symbol                                 based           structure                level 1 dcl 3-3
type                                   based           bit(9)                   level 2 packed unaligned dcl 1-27 ref 48
why_nonquick             42            based           structure                level 2 dcl 2-5

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
array_node                             internal static bit(9)                   initial dcl 1-5
block_node                             internal static bit(9)                   initial dcl 1-5
bound_node                             internal static bit(9)                   initial dcl 1-5
by_name_agg_node                       internal static bit(9)                   initial dcl 1-5
context_node                           internal static bit(9)                   initial dcl 1-5
cross_reference_node                   internal static bit(9)                   initial dcl 1-5
default_node                           internal static bit(9)                   initial dcl 1-5
format_value_node                      internal static bit(9)                   initial dcl 1-5
label_array_element_node               internal static bit(9)                   initial dcl 1-5
label_node                             internal static bit(9)                   initial dcl 1-5
list_node                              internal static bit(9)                   initial dcl 1-5
machine_state_node                     internal static bit(9)                   initial dcl 1-5
max_block_number                       internal static fixed bin(17,0)          initial dcl 2-74
max_list_elements                      internal static fixed bin(17,0)          initial dcl 6-12
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 5-15
options_variable                       automatic       bit(1)                   dcl 25
reference_node                         internal static bit(9)                   initial dcl 1-5
sf_par_node                            internal static bit(9)                   initial dcl 1-5
source_node                            internal static bit(9)                   initial dcl 1-5
statement_node                         internal static bit(9)                   initial dcl 1-5
symbol_node                            internal static bit(9)                   initial dcl 1-5
temporary_node                         internal static bit(9)                   initial dcl 1-5
token_node                             internal static bit(9)                   initial dcl 1-5

NAME DECLARED BY EXPLICIT CONTEXT.
check_star_extents              000010 constant        entry                    external dcl 11

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       164         176     126         174
Length       450     126        12         236      35           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
check_star_extents                   86 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
check_star_extents       000100 i                           check_star_extents
                         000101 k                           check_star_extents
                         000102 n                           check_star_extents
                         000104 a                           check_star_extents
                         000106 arg_list                    check_star_extents
                         000110 s                           check_star_extents

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
make_non_quick

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000004        41 000015        42 000021        44 000024        46 000034        47 000043        48 000045
     51 000055        54 000064        55 000067        58 000071        59 000101        60 000116        62 000120
     65 000121        66 000123


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
