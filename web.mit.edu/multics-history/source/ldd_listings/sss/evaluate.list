	COMPILATION LISTING OF SEGMENT evaluate
	Compiled by: Multics PL/I Compiler, Release 32c, of June 16, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 07/31/89  1409.9 mst Mon
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1988                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 
       14 
       15 /****^  HISTORY COMMENTS:
       16*  1) change(88-01-29,RWaters), approve(88-01-29,MCR7724), audit(88-02-05,Huen),
       17*     install(88-02-16,MR12.2-1024):
       18*     Changed to use assign_.
       19*                                                   END HISTORY COMMENTS */
       20 
       21 
       22 /* Procedure to evaluate operator with constant operands.
       23*
       24*   Preliminary version deals only with decimal integers and returns an operator
       25*   node if other types of constants appear
       26*
       27*   Initial Version: 16 October 1972 by BLW
       28*	Modified:	11 December 1976 by RAB for ||
       29*	Modified: 28 January 1988 by RW to use assign_
       30**/
       31 
       32 evaluate:	proc(opcode,r2,r3) returns(ptr);
       33 
       34 dcl	opcode bit(9) aligned,
       35 	(r2,r3) ptr;
       36 
       37 dcl	q ptr,
       38 	ans char(32) aligned,
       39 	(i,n,prec,prec2,prec3) fixed bin(35);
       40 
       41 dcl	(v2,v3) fixed decimal (31);
       42 dcl	v fixed decimal (50);
       43 dcl 	v_chars char (51) based (addr (v));
       44 
       45 dcl	string_max fixed bin int static init(256);
       46 
       47 dcl	(substr,length,max) builtin;
       48 
       49 dcl	assign_ entry (ptr, fixed bin, fixed bin(35), ptr, fixed bin, fixed bin(35));
       50 
  1     1 /* BEGIN INCLUDE FILE ... op_codes.incl.pl1 */
  1     2 
  1     3 /* Modified: 25 Apr 1979 by PCK 4-bit decimal */
  1     4 /* Modified: 6 Jun 1979 by PG to add rank and byte */
  1     5 /* Modified: 26 Dec 1979 by PCK to add assign_by_name */
  1     6 /* Modified: 26 July 82 BIM wordno, segno */
  1     7 
  1     8 dcl (	add		initial("000010001"b),	/* opnd(1) <- opnd(2)+opnd(3)		*/
  1     9 	sub		initial("000010010"b),	/* opnd(1) <- opnd(2)-opnd(3)		*/
  1    10 	mult		initial("000010011"b),	/* opnd(1) <- opnd(2)*opnd(3)		*/
  1    11 	div		initial("000010100"b),	/* opnd(1) <- opnd(2)/opnd(3)		*/
  1    12 	negate		initial("000010101"b),	/* opnd(1) <- -opnd(2)  		*/
  1    13 	exp		initial("000010110"b),	/* opnd(1) <- opnd(2) ** opnd(3)	*/
  1    14 
  1    15 	and_bits		initial("000100001"b),	/* opnd(1) <- opnd(2) & opnd(3)	*/
  1    16 	or_bits		initial("000100010"b),	/* opnd(1) <- opnd(2)|opnd(3)		*/
  1    17 	xor_bits		initial("000100011"b),	/* opnd(1) <- opnd(2) xor opnd(3)	*/
  1    18 	not_bits		initial("000100100"b),	/* opnd(1) <- ^opnd(2)		*/
  1    19 	cat_string	initial("000100101"b),	/* opnd(1) <- opnd(2)||opnd(3)	*/
  1    20 	bool_fun		initial("000100110"b),	/* opnd(1) <- bool(opnd(2),opnd(3),opnd(4)) */
  1    21 
  1    22 	assign		initial("000110001"b),	/* opnd(1) <- opnd(2)		*/
  1    23 	assign_size_ck	initial("000110010"b),	/* opnd(1) <- opnd(2)		*/
  1    24 	assign_zero	initial("000110011"b),	/* opnd(1) <- 0			*/
  1    25 	copy_words	initial("000110100"b),	/* move opnd(2) to opnd(1) by opnd(3) words */
  1    26 	copy_string	initial("000110101"b),	/* move opnd(2) to opnd(1) by opnd(3) units */
  1    27 	make_desc		initial("000110110"b),	/* opnd(1) <- descriptor(opnd(2),opnd(3)) */
  1    28 	assign_round	initial("000110111"b),	/* opnd(1) <- opnd(2) rounded		*/
  1    29 	pack		initial("000111000"b),	/* opnd(1) <- encode to picture opnd(2) */
  1    30 	unpack		initial("000111001"b),	/* opnd(1) <- decode from picture opnd(2) */
  1    31 
  1    32 	less_than		initial("001000100"b),	/* opnd(1) <- opnd(2) < opnd(3)	*/
  1    33 	greater_than	initial("001000101"b),	/* opnd(1) <- opnd(2) > opnd(3)	*/
  1    34 	equal		initial("001000110"b),	/* opnd(1) <- opnd(2) = opnd(3)	*/
  1    35 	not_equal		initial("001000111"b),	/* opnd(1) <- opnd(2) ^= opnd(3)	*/
  1    36 	less_or_equal	initial("001001000"b),	/* opnd(1) <- opnd(2) <= opnd(3)	*/
  1    37 	greater_or_equal	initial("001001001"b),	/* opnd(1) <- opnd(2) >= opnd(3)	*/
  1    38 
  1    39 	jump		initial("001010001"b),	/* go to opnd(1) unconditionally	*/
  1    40 	jump_true		initial("001010010"b),	/* go to opnd(1) if opnd(2) is not 0	*/
  1    41 	jump_false	initial("001010011"b),	/* go to opnd(1) if opnd(2) is all 0	*/
  1    42 	jump_if_lt	initial("001010100"b),	/* go to opnd(1) if opnd(2) < opnd(3)	*/
  1    43 	jump_if_gt	initial("001010101"b),	/* go to opnd(1) if opnd(2) > opnd(3)	*/
  1    44 	jump_if_eq	initial("001010110"b),	/* go to opnd(1) if opnd(2) = opnd(3)	*/
  1    45 	jump_if_ne	initial("001010111"b),	/* go to opnd(1) if opnd(2) ^= opnd(3)	*/
  1    46 	jump_if_le	initial("001011000"b),	/* go to opnd(1) if opnd(2) <= opnd(3)	*/
  1    47 	jump_if_ge	initial("001011001"b),	/* go to opnd(1) if opnd(2) >= opnd(3)	*/
  1    48 
  1    49 	std_arg_list	initial("001100001"b),	/* opnd(1) <- arglist(opnd(2) desclist(opnd(3)))	*/
  1    50 	return_words	initial("001100010"b),	/* return aggregate opnd(1), opnd(2) is length in words */
  1    51 	std_call		initial("001100011"b),	/* opnd(1) <- call opnd(2) with opnd(3)		*/
  1    52 	return_bits	initial("001100100"b),	/* return aggregate opnd(1), opnd(2) is length in bits */
  1    53 	std_entry		initial("001100101"b),	/* entry(opnd(1)... opnd(n))			*/
  1    54 	return_string	initial("001100110"b),	/* return string opnd(1) */
  1    55 	ex_prologue	initial("001100111"b),	/* execute the prologue -no operands-		*/
  1    56 	allot_auto	initial("001101000"b),	/* opnd(1) <- addrel(stack,opnd(2))		*/
  1    57 	param_ptr		initial("001101001"b),	/* opnd(1) <- ptr to opnd(2) in  block opnd(3)	*/
  1    58 	param_desc_ptr	initial("001101010"b),	/* opnd(1) <- ptr to opnd(2) in block opnd(3)	*/
  1    59 	std_return	initial("001101011"b),	/* return -no arguments-			*/
  1    60 	allot_ctl		initial("001101100"b),	/* allocate opnd(1) , length in words is opnd(2) 	*/
  1    61 	free_ctl		initial("001101101"b),	/* free opnd(1)				*/
  1    62 	stop		initial("001101110"b),	/* stop - terminate run unit			*/
  1    63 
  1    64 	mod_bit		initial("001110000"b),	/* opnd(1) <- mod(opnd(3),36),
  1    65*						   opnd(2) <- opnd(3) / 36		*/
  1    66 	mod_byte		initial("001110001"b),	/* opnd(1) <- mod(opnd(3),4),
  1    67*						   opnd(2) <- opnd(3) / 4		*/
  1    68 	mod_half		initial("001110010"b),	/* opnd(1) <- mod(opnd(3),2),
  1    69*						   opnd(2) <- opnd(3) / 2		*/
  1    70 	mod_word		initial("001110011"b),	/* TO BE DEFINED BY BLW			*/
  1    71 
  1    72 	bit_to_char	initial("010000000"b),	/* opnd(1) <- (opnd(2)+8)/9		*/
  1    73 	bit_to_word	initial("010000001"b),	/* opnd(1) <- (opnd(2)+35)/36		*/
  1    74 	char_to_word	initial("010000010"b),	/* opnd(1) <- (opnd(2)+3)/4		*/
  1    75 	half_to_word	initial("010000011"b),	/* opnd(1) <- (opnd(2)+1)/2		*/
  1    76 	word_to_mod2	initial("010000100"b),	/* opnd(1) <- (opnd(2)+1)/2*2		*/
  1    77 	word_to_mod4	initial("010000101"b),	/* opnd(1) <- (opnd(2)+3)/4*4		*/
  1    78 	word_to_mod8	initial("010000110"b),	/* opnd(1) <- (opnd(2)+7)/8*8		*/
  1    79 	rel_fun		initial("010000111"b),	/* opnd(1) <- rel(opnd(2))		*/
  1    80 	baseno_fun	initial("010001000"b),	/* opnd(1) <- baseno(opnd(2))		*/
  1    81 	desc_size		initial("010001001"b),	/* opnd(1) <- substr(opnd(2),13,24)	*/
  1    82 	bit_pointer	initial("010001010"b),	/* opnd(1) <- bit offset of opnd(2)	*/
  1    83 	index_before_fun	initial("010001011"b),	/* opnd(1) <- length of before(opnd(2),opnd(3)) */
  1    84 	index_after_fun	initial("010001100"b),	/* opnd(1) <- offset of after(opnd(2),opnd(3)) in opnd(2) */
  1    85 	verify_ltrim_fun	initial("010001101"b),	/* opnd(1) <- offset of ltrim(opnd(2),opnd(3)) in opnd(2) */
  1    86 	verify_rtrim_fun	initial("010001110"b),	/* opnd(1) <- length(opnd(2))-length(rtrim(opnd(2),opnd(3))) */
  1    87 	digit_to_bit	initial("010001111"b),	/* opnd(1) <- 9*opnd(2)/2		*/
  1    88 
  1    89 	ceil_fun		initial("010010000"b),	/* opnd(1) <- ceil(opnd(2))		*/
  1    90 	floor_fun		initial("010010001"b),	/* opnd(1) <- floor(opnd(2))		*/
  1    91 	round_fun		initial("010010010"b),	/* opnd(1) <- round(opnd(2))		*/
  1    92 	sign_fun		initial("010010011"b),	/* opnd(1) <- sign(opnd(2))		*/
  1    93 	abs_fun		initial("010010100"b),	/* opnd(1) <- abs(opnd(2))		*/
  1    94 	trunc_fun		initial("010010101"b),	/* opnd(1) <- trunc(opnd(2))		*/
  1    95 	byte_fun		initial("010010110"b),	/* opnd(1) <- byte(opnd(2))		*/
  1    96 	rank_fun		initial("010010111"b),	/* opnd(1) <- rank(opnd(2))		*/
  1    97 	index_rev_fun	initial("010011000"b),	/* opnd(1) <- index(reverse(opnd(2)),reverse(opnd(3))) */
  1    98 	search_rev_fun	initial("010011001"b),	/* opnd(1) <- search(reverse(opnd(2)),opnd(3)) */
  1    99 	verify_rev_fun	initial("010011010"b),	/* opnd(1) <- verify(reverse(opnd(2)),opnd(3)) */
  1   100 	wordno_fun	initial("010011011"b),        /* opnd(1) <- wordno (opnd(2)) */
  1   101 	segno_fun		initial("010011100"b),        /* opnd(1) <- segno (opnd(2)) */
  1   102 	bitno_fun           initial("010011101"b),        /* opnd(1) <- bitno (opnd(2)) */
  1   103 	charno_fun	initial("010011110"b),        /* opnd(1) <- charno (opnd(2)) */
  1   104 
  1   105 	index_fun		initial("010100000"b),	/* opnd(1) <- index(opnd(2),opnd(3))	*/
  1   106 	off_fun		initial("010100001"b),	/* opnd(1) <- offset(opnd(2),opnd(3))	*/
  1   107 	complex_fun	initial("010100010"b),	/* opnd(1) <- complex(opnd(2),opnd(3))	*/
  1   108 	conjg_fun		initial("010100011"b),	/* opnd(1) <- conjg(opnd(2),opnd(3))	*/
  1   109 	mod_fun		initial("010100100"b),	/* opnd(1) <- mod(opnd(2),opnd(3))	*/
  1   110 	repeat_fun	initial("010100101"b),	/* opnd(1) <- repeat(opnd(2),opnd(3))	*/
  1   111 	verify_fun	initial("010100110"b),	/* opnd(1) <- verify(opnd(2),opnd(3))	*/
  1   112 	translate_fun	initial("010100111"b),	/* opnd(1) <- translate(opnd(2),opnd(3))*/
  1   113 	real_fun   	initial("010101001"b),	/* opnd(1) <- real(opnd(2))		*/
  1   114 	imag_fun   	initial("010101010"b),	/* opnd(1) <- imag(opnd(2))		*/
  1   115 	length_fun	initial("010101011"b),	/* opnd(1) <- length(opnd(2))	*/
  1   116 	pl1_mod_fun	initial("010101100"b),	/* opnd(1) <- mod(opnd(2)) */
  1   117 	search_fun	initial("010101101"b),	/* opnd(1) <- search(opnd(2),opnd(3)) */
  1   118 	allocation_fun	initial("010101110"b),	/* opnd(1) <- allocation(opnd(2)) */
  1   119 	reverse_fun	initial("010101111"b),	/* opnd(1) <- reverse(opnd(2)) */
  1   120 
  1   121 	addr_fun		initial("010110000"b),	/* opnd(1) <- addr(opnd(2))		*/
  1   122 	addr_fun_bits	initial("010110001"b),	/* opnd(1) <- addr(opnd(2))		*/
  1   123 	ptr_fun		initial("010110010"b),	/* opnd(1) <- ptr(opnd(2),opnd(3))	*/
  1   124 	baseptr_fun	initial("010110011"b),	/* opnd(1) <- baseptr(opnd(2))	*/
  1   125 	addrel_fun	initial("010110100"b),	/* opnd(1) <- addrel(opnd(2),opnd(3))	*/
  1   126 	codeptr_fun	initial("010110101"b),	/* opnd(1) <- codeptr(opnd(2))	*/
  1   127 	environmentptr_fun	initial("010110110"b),	/* opnd(1) <- environmentptr(opnd(2))	*/
  1   128 	stackbaseptr_fun	initial("010110111"b),	/* opnd(1) is ptr to base of current stack	*/
  1   129 	stackframeptr_fun	initial("010111000"b),	/* opnd(1) is ptr to current block's stack frame	*/
  1   130 	setcharno_fun	initial("010111001"b),	/* opnd(1) <- opnd(2) with charno opnd(3) */
  1   131 	addcharno_fun	initial("010111010"b),	/* opnd(1) <- opnd(2) with charno = charno + opnd(3) */
  1   132 	setbitno_fun	initial("010111011"b),	/* setcharno for bitsno */
  1   133 	addbitno_fun	initial("010111100"b),	/* addcharno for bitno */
  1   134 
  1   135 	min_fun		initial("011000000"b),	/* opnd(1) <- min(opnd(1),opnd(2),...)	*/
  1   136 	max_fun		initial("011000001"b),	/* opnd(1) <- max(opnd(1),opnd(2),...)	*/
  1   137 
  1   138 	stack_ptr		initial("011010001"b),	/* opnd(1) <- stack frame ptr		*/
  1   139 	empty_area	initial("011010010"b),	/* empty opnd(1), length in words is opnd(2) */
  1   140 	enable_on		initial("011010100"b),	/* opnd(1) is the cond name
  1   141*						   opnd(2) is the file name
  1   142*						   opnd(3) is the block	*/
  1   143 	revert_on		initial("011010101"b),	/* opnd(1) is the cond name,
  1   144*						   opnd(2) is the file name	*/
  1   145 	signal_on		initial("011010110"b),	/* opnd(1) is the cond name
  1   146*						   opnd(2) is the file name */
  1   147 
  1   148 	lock_fun		initial("011010111"b),	/* opnd(1) <- stac(opnd(2),opnd(3))	*/
  1   149 	stacq_fun		initial("011011000"b),	/* opnd(1) is result, opnd(2) is ptr to lock word,
  1   150*						   opnd(3) is old value, (4) is new value. */
  1   151 	clock_fun		initial("011011001"b),	/* opnd(1) is the clock time		*/
  1   152 	vclock_fun	initial("011011010"b),	/* opnd(1) is the virtual clock time	*/
  1   153 
  1   154 	bound_ck		initial("011100000"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
  1   155 	range_ck		initial("011100001"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
  1   156 	loop		initial("011100010"b),	/* do opnd(1) for opnd(2) from opnd(3) to opnd(4) by 1,
  1   157*						   opnd(5) is the list */
  1   158 	join		initial("011100011"b),	/* do opnd(1), opnd(2) ... opnd(n)	*/
  1   159 	allot_based	initial("011100100"b),	/* allocate opnd(2) words in opnd(3), set opnd(1) */
  1   160 	free_based	initial("011100101"b),	/* free opnd(1) in opnd(3), length is opnd(2) words */
  1   161 
  1   162 	r_parn		initial("011110001"b),	/* format op code			*/
  1   163 	l_parn		initial("011110010"b),
  1   164 	r_format		initial("011110011"b),
  1   165 	c_format		initial("011110100"b),
  1   166 	f_format		initial("011110101"b),
  1   167 	e_format		initial("011110110"b),
  1   168 	b_format		initial("011110111"b),
  1   169 	a_format		initial("011111000"b),
  1   170 	x_format		initial("011111001"b),
  1   171 	skip_format	initial("011111010"b),
  1   172 	column_format	initial("011111011"b),
  1   173 	page_format	initial("011111100"b),
  1   174 	line_format	initial("011111101"b),
  1   175 	picture_format	initial("011111110"b),
  1   176 	bn_format		initial("011111111"b),	/* bit format, length(opnd(2)), radix factor(opnd(3)) */
  1   177 
  1   178 	get_list_trans	initial("100000000"b),	/* getlist(opnd(2) with desc(opnd(1)))	*/
  1   179 	get_edit_trans	initial("100000001"b),	/* getedit(opnd(2) with desc(opnd(1)))	*/
  1   180 	get_data_trans	initial("100000010"b),	/* getdata(opnd(1) to opnd(n))	*/
  1   181 	put_list_trans	initial("100000011"b),	/* putlist(opnd(2) with desc(opnd(1)))	*/
  1   182 	put_edit_trans	initial("100000100"b),	/* putedit(opnd(2) with desc(opnd(1)))	*/
  1   183 	put_data_trans	initial("100000101"b),	/* putdata(opnd(2)) with subscript-list opnd(1) */
  1   184 	terminate_trans	initial("100000110"b),	/* terminate stream transmission	*/
  1   185 	stream_prep	initial("100000111"b),	/* initiate stream transmission	*/
  1   186 	record_io		initial("100001000"b),	/* perform record io operation	*/
  1   187 	fortran_read	initial("100001001"b),	/* A complete read statement		*/
  1   188 	fortran_write	initial("100001010"b),	/* A complete write statement		*/
  1   189 	ftn_file_manip	initial("100001011"b),	/* endfile,backspace,rewind,etc.	*/
  1   190 	ftn_trans_loop	initial("100001100"b),	/* An implied do in i/o list		*/
  1   191 	put_control	initial("100001101"b),	/* put control opnd(1) opnd(2) times	*/
  1   192 	put_field		initial("100001110"b),	/* putlist(opnd(2)) of length(opnd(1))	*/
  1   193 	put_field_chk	initial("100001111"b),	/* putlist(op(2)) of len(op(1)) check char index(op(3)) */
  1   194 
  1   195 /* These operators are produced by the parse but are not used as input to the code generator.	*/
  1   196 /* They are processed by the semantic translator.						*/
  1   197 
  1   198 	return_value	initial("100010010"b),	/* return(opnd(1))			*/
  1   199 	allot_var		initial("100010011"b),	/* allot opnd(1) in opnd(2)		*/
  1   200 	free_var		initial("100010100"b),	/* free opnd(1) out of opnd(2)	*/
  1   201 	get_file		initial("100010101"b),	/* opnd(1) is filename,opnd(2) is copy	*/
  1   202 						/* opnd(3) is skip, opnd(4) is list	*/
  1   203 	get_string	initial("100010110"b),	/* opnd(1) is string,opnd(2) is list	*/
  1   204 	put_file		initial("100010111"b),	/* opnd(1) is filename,opnd(2) is page	*/
  1   205 						/* opnd(3) is skip,opnd(4) is line	*/
  1   206 	put_string	initial("100011000"b),	/* opnd(1) is string,opnd(2) is list	*/
  1   207 	open_file		initial("100011001"b),
  1   208 	close_file	initial("100011010"b),
  1   209 	read_file		initial("100011011"b),
  1   210 	write_file	initial("100011100"b),
  1   211 	locate_file	initial("100011101"b),
  1   212 	do_fun		initial("100011110"b),	/* opnd(1) is join of a list		*/
  1   213 						/* opnd(2) is control variable ref	*/
  1   214 						/* opnd(3) is specification operator	*/
  1   215 	do_spec		initial("100011111"b),	/* opnd(1) to opnd(2) by opnd(3) 	*/
  1   216 						/* repeat opnd(4) while opnd(5)	*/
  1   217 						/* opnd(6) is next specification	*/
  1   218 
  1   219 	rewrite_file	initial("100100000"b),
  1   220 	delete_file	initial("100100001"b),
  1   221 	unlock_file	initial("100100010"b),
  1   222 	lock_file		initial("100100011"b),
  1   223 	refer		initial("100100101"b),	/* opnd(1) refer(opnd(2))		*/
  1   224 	prefix_plus	initial("100100110"b),	/* opnd(1) <- +opnd(2)		*/
  1   225 	nop		initial("100100111"b),	/* no-op */
  1   226 	assign_by_name	initial("100101000"b),	/* opnd(1) <- opnd(2),by name		*/
  1   227 
  1   228 /* These operators are produced by the semantic translator in processing the math
  1   229*   builtin functions and are used as input to the code generator			*/
  1   230 
  1   231 	sqrt_fun		initial("100110000"b),	/* opnd(1) <- sqrt(opnd(2))	*/
  1   232 	sin_fun		initial("100110001"b),	/* opnd(1) <- sin(opnd(2))	*/
  1   233 	sind_fun		initial("100110010"b),	/* opnd(1) <- sind(opnd(2))	*/
  1   234 	cos_fun		initial("100110011"b),	/* opnd(1) <- cos(opnd(2))	*/
  1   235 	cosd_fun		initial("100110100"b),	/* opnd(1) <- cosd(opnd(2))	*/
  1   236 	tan_fun		initial("100110101"b),	/* opnd(1) <- tan(opnd(2))	*/
  1   237 	tand_fun		initial("100110110"b),	/* opnd(1) <- tand(opnd(2))	*/
  1   238 	asin_fun		initial("100110111"b),	/* opnd(1) <- asin(opnd(2))	*/
  1   239 	asind_fun		initial("100111000"b),	/* opnd(1) <- asind(opnd(2))	*/
  1   240 	acos_fun		initial("100111001"b),	/* opnd(1) <- acos(opnd(2))	*/
  1   241 	acosd_fun		initial("100111010"b),	/* opnd(1) <- acosd(opnd(2))	*/
  1   242 	atan_fun		initial("100111011"b),	/* opnd(1) <- atan(opnd(2)[,opnd(3)])	*/
  1   243 	atand_fun		initial("100111100"b),	/* opnd(1) <- atand(opnd(2)[,opnd(3)])	*/
  1   244 	log2_fun		initial("100111101"b),	/* opnd(1) <- log2(opnd(2))	*/
  1   245 	log_fun		initial("100111110"b),	/* opnd(1) <- log(opnd(2))	*/
  1   246 	log10_fun		initial("100111111"b),	/* opnd(1) <- log10(opnd(2))	*/
  1   247 
  1   248 	exp_fun		initial("101000000"b))	/* opnd(1) <- exp(opnd(2))	*/
  1   249 
  1   250 			bit(9) aligned internal static options(constant);
  1   251 
  1   252 /* END INCLUDE FILE ... op_codes.incl.pl1 */
       51 
  2     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
  2     2 
  2     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
  2     4 
  2     5 /* format: style3 */
  2     6 dcl	1 operator	based aligned,
  2     7 	  2 node_type	bit (9) unaligned,
  2     8 	  2 op_code	bit (9) unaligned,
  2     9 	  2 shared	bit (1) unaligned,
  2    10 	  2 processed	bit (1) unaligned,
  2    11 	  2 optimized	bit (1) unaligned,
  2    12 	  2 number	fixed (14) unaligned,
  2    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
  2    14 
  2    15 dcl	max_number_of_operands
  2    16 			fixed bin (15) int static options (constant) initial (32767);
  2    17 
  2    18 /* END INCLUDE FILE ... operator.incl.pl1 */
       52 
  3     1 /* BEGIN INCLUDE FILE ... token.incl.pl1 */
  3     2 
  3     3 dcl	1 token			based aligned,
  3     4 	2 node_type		bit(9) unaligned,
  3     5 	2 type			bit(9) unaligned,
  3     6 	2 loc			bit(18) unaligned,	/* symtab offset for identifiers, "p" flag for constants */
  3     7 	2 declaration		ptr unaligned,
  3     8 	2 next			ptr unaligned,
  3     9 	2 size			fixed(9),
  3    10 	2 string			char(n refer(token.size));
  3    11 
  3    12 /* END INCLUDE FILE ... token.incl.pl1 */
       53 
  4     1 /* BEGIN INCLUDE FILE ... token_types.incl.pl1 */
  4     2 
  4     3 dcl (	no_token		initial("000000000"b),	/*	token types		*/
  4     4 	identifier	initial("100000000"b),
  4     5 	isub		initial("010000000"b),
  4     6 	plus		initial("001000001"b),
  4     7 	minus		initial("001000010"b),
  4     8 	asterisk		initial("001000011"b),
  4     9 	slash		initial("001000100"b),
  4    10 	expon		initial("001000101"b),
  4    11 	not		initial("001000110"b),
  4    12 	and		initial("001000111"b),
  4    13 	or		initial("001001000"b),
  4    14 	cat		initial("001001001"b),
  4    15 	eq		initial("001001010"b),
  4    16 	ne		initial("001001011"b),
  4    17 	lt		initial("001001100"b),
  4    18 	gt		initial("001001101"b),
  4    19 	le		initial("001001110"b),
  4    20 	ge		initial("001001111"b),
  4    21 	ngt		initial("001010000"b),
  4    22 	nlt		initial("001010001"b),
  4    23 	assignment	initial("001010010"b),
  4    24 	colon		initial("001010011"b),
  4    25 	semi_colon	initial("001010100"b),
  4    26 	comma		initial("001010101"b),
  4    27 	period		initial("001010110"b),
  4    28 	arrow		initial("001010111"b),
  4    29 	left_parn		initial("001011000"b),
  4    30 	right_parn	initial("001011001"b),
  4    31 	percent		initial("001011100"b),
  4    32 	bit_string	initial("000100001"b),
  4    33 	char_string	initial("000100010"b),
  4    34 	bin_integer	initial("000110001"b),
  4    35 	dec_integer	initial("000110011"b),
  4    36 	fixed_bin		initial("000110000"b),
  4    37 	fixed_dec		initial("000110010"b),
  4    38 	float_bin		initial("000110100"b),
  4    39 	float_dec		initial("000110110"b),
  4    40 	i_bin_integer	initial("000111001"b),
  4    41 	i_dec_integer	initial("000111011"b),
  4    42 	i_fixed_bin	initial("000111000"b),
  4    43 	i_fixed_dec	initial("000111010"b),
  4    44 	i_float_bin	initial("000111100"b),
  4    45 	i_float_dec	initial("000111110"b)) bit (9) aligned internal static options (constant);
  4    46 
  4    47 dcl (	is_identifier		initial ("100000000"b),	/*	token type masks		*/
  4    48 	is_isub			initial ("010000000"b),
  4    49 	is_delimiter		initial ("001000000"b),
  4    50 	is_constant		initial ("000100000"b),
  4    51 	is_arith_constant		initial ("000010000"b),	/* N.B. not really a mask...s/b "000110000"b */
  4    52 	is_arithmetic_constant	initial ("000110000"b),
  4    53 	is_imaginary_constant	initial ("000111000"b),
  4    54 	is_float_constant		initial ("000110100"b),
  4    55 	is_decimal_constant		initial ("000110010"b),
  4    56 	is_integral_constant 	initial ("000110001"b)
  4    57 	) bit(9) internal static aligned options(constant);
  4    58 
  4    59 /* END INCLUDE FILE ... token_types.incl.pl1 */
       54 
  5     1 /****^  *********************************************************
  5     2*        *                                                       *
  5     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  5     4*        *                                                       *
  5     5*        ********************************************************* */
  5     6 
  5     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  5     8 
  5     9 
  5    10 /****^  HISTORY COMMENTS:
  5    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  5    12*     install(89-07-31,MR12.3-1066):	
  5    13*     Removed the obsolete parameter source_line from the dcl of error_().
  5    14*                                                   END HISTORY COMMENTS */
  5    15 
  5    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  5    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  5    18* */
  5    19 
  5    20 declare	adjust_count	entry(pointer);
  5    21 			/* parameter 1:	(input)	any node pointer		*/
  5    22 
  5    23 declare	bindec		entry(fixed bin(31)) reducible
  5    24 			returns(character(12) aligned);
  5    25 			/* parameter 1:	(input)	bin value			*/
  5    26 			/* return:	(output)	character value with blanks	*/
  5    27 
  5    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  5    29 			returns(character(12) aligned varying);
  5    30 			/* parameter 1:	(input)	binary value		*/
  5    31 			/* return:	(output)	char value without blanks	*/
  5    32 
  5    33 declare	binoct		entry(fixed bin(31)) reducible
  5    34 			returns(char(12) aligned);
  5    35 			/* parameter 1:	(input)	binary value		*/
  5    36 			/* return:	(output)	char value with blanks	*/
  5    37 
  5    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  5    39 			returns(char(12) aligned);
  5    40 			/* parameter 1:	(input)	binary value		*/
  5    41 			/* return:	(output)	right-aligned char value	*/
  5    42 
  5    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  5    44 			returns(char(12) varying aligned);
  5    45 			/* parameter 1:	(input)	binary value		*/
  5    46 			/* returns:	(output)	char value without blanks	*/
  5    47 
  5    48 declare	compare_expression	entry(pointer,pointer) reducible
  5    49 			returns(bit(1) aligned);
  5    50 			/* parameter 1:	(input)	any node pointer		*/
  5    51 			/* parameter 2:	(input)	any node pointer		*/
  5    52 			/* return:	(output)	compare bit		*/
  5    53 
  5    54 declare	constant_length	entry (pointer, fixed bin (71))
  5    55 			returns (bit (1) aligned);
  5    56 			/* parameter 1:	(input)	reference node pointer	*/
  5    57 			/* parameter 2:	(input)	value of constant length	*/
  5    58 			/* return:	(output)	"1"b if constant length	*/
  5    59 
  5    60 declare	convert		entry(pointer,bit(36) aligned)
  5    61 			returns(pointer);
  5    62 			/* parameter 1:	(input)	any node pointer		*/
  5    63 			/* parameter 2:	(input)	target type		*/
  5    64 			/* return:	(output)	target value tree pointer	*/
  5    65 
  5    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  5    67 			returns(pointer);
  5    68 			/* parameter 1:	(input)	any node pointer		*/
  5    69 			/* parameter 2:	(input)	target type		*/
  5    70 			/* return:	(output)	target value tree pointer	*/
  5    71 
  5    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  5    73 			returns(pointer);
  5    74 			/* parameter 1:	(input)	any node pointer		*/
  5    75 			/* parameter 2:	(input)	target type		*/
  5    76 			/* return:	(output)	target value tree pointer	*/
  5    77 
  5    78 declare	convert$validate	entry(pointer,pointer);
  5    79 			/* parameter 1:	(input)	source value tree pointer	*/
  5    80 			/* parameter 2:	(input)	target reference node pointer	*/
  5    81 
  5    82 declare	convert$to_target_fb entry(pointer,pointer)
  5    83 			returns(pointer);
  5    84 			/* parameter 1:	(input)	source value tree pointer	*/
  5    85 			/* parameter 2:	(input)	target reference node pointer	*/
  5    86 			/* return:	(output)	target value tree pointer	*/
  5    87 
  5    88 declare	convert$to_target	entry(pointer,pointer)
  5    89 			returns(pointer);
  5    90 			/* parameter 1:	(input)	source value tree pointer	*/
  5    91 			/* parameter 2:	(input)	target reference node pointer	*/
  5    92 			/* return:	(output)	target value tree pointer	*/
  5    93 
  5    94 declare	copy_expression	entry(pointer unaligned)
  5    95 			returns(pointer);
  5    96 			/* parameter 1:	(input)	any node pointer		*/
  5    97 			/* return:	(output)	any node pointer		*/
  5    98 
  5    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  5   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  5   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  5   102 
  5   103 declare	copy_unique_expression entry(pointer)
  5   104 			returns(pointer);
  5   105 			/* parameter 1:	(input)	any node pointer		*/
  5   106 			/* return:	(output)	any node pointer		*/
  5   107 
  5   108 declare	create_array	entry()
  5   109 			returns(pointer);
  5   110 			/* return:	(output)	array node pointer		*/
  5   111 
  5   112 declare	create_block	entry(bit(9) aligned,pointer)
  5   113 			returns(pointer);
  5   114 			/* parameter 1:	(input)	block type		*/
  5   115 			/* parameter 2:	(input)	father block node pointer	*/
  5   116 			/* return:	(output)	block node pointer		*/
  5   117 
  5   118 declare	create_bound	entry()
  5   119 			returns(pointer);
  5   120 			/* return:	(output)	bound node pointer		*/
  5   121 
  5   122 declare	create_context	entry(pointer,pointer)
  5   123 			returns(pointer);
  5   124 			/* parameter 1:	(input)	block node pointer		*/
  5   125 			/* parameter 2:	(input)	token pointer		*/
  5   126 			/* return:	(output)	context node pointer	*/
  5   127 
  5   128 declare	create_cross_reference entry()
  5   129 			returns(pointer);
  5   130 			/* return:	(output)	cross reference node pointer	*/
  5   131 
  5   132 declare	create_default	entry
  5   133 			returns(pointer);
  5   134 			/* return:	(output)	default node pointer	*/
  5   135 
  5   136 declare	create_identifier	entry()
  5   137 			returns(pointer);
  5   138 			/* return:	(output)	token node pointer		*/
  5   139 
  5   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  5   141 			returns(pointer);
  5   142 			/* parameter 1:	(input)	block node pointer		*/
  5   143 			/* parameter 2:	(input)	token node pointer		*/
  5   144 			/* parameter 3:	(input)	declare type		*/
  5   145 			/* return:	(output)	label node pointer		*/
  5   146 
  5   147 declare	create_list	entry(fixed bin(15))
  5   148 			returns(pointer);
  5   149 			/* parameter 1:	(input)	number of list elements	*/
  5   150 			/* return:	(output)	list node pointer		*/
  5   151 
  5   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  5   153 			returns(pointer);
  5   154 			/* parameter 1:	(input)	operator type		*/
  5   155 			/* parameter 2:	(input)	number of operands		*/
  5   156 			/* return:	(output)	operator node pointer	*/
  5   157 
  5   158 declare	create_reference	entry(pointer)
  5   159 			returns(pointer);
  5   160 			/* parameter 1:	(input)	symbol node pointer		*/
  5   161 			/* return:	(output)	reference node pointer	*/
  5   162 
  5   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  5   164 			returns(pointer);
  5   165 			/* parameter 1:	(input)	statement type		*/
  5   166 			/* parameter 2:	(input)	block node pointer		*/
  5   167 			/* parameter 3:	(input)	label node pointer		*/
  5   168 			/* parameter 4:	(input)	conditions		*/
  5   169 			/* return:	(output)	statement node pointer	*/
  5   170 
  5   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  5   172 			returns(pointer);
  5   173 			/* parameter 1:	(input)	statement type		*/
  5   174 			/* parameter 2:	(input)	block node pointer		*/
  5   175 			/* parameter 3:	(input)	label node pointer		*/
  5   176 			/* parameter 4:	(input)	conditions		*/
  5   177 			/* return:	(output)	statement node pointer	*/
  5   178 
  5   179 declare	create_storage	entry(fixed bin(15))
  5   180 			returns(pointer);
  5   181 			/* parameter 1:	(input)	number of words		*/
  5   182 			/* return:	(output)	storage block pointer	*/
  5   183 
  5   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  5   185 			returns(pointer);
  5   186 			/* parameter 1:	(input)	block node pointer		*/
  5   187 			/* parameter 2:	(input)	token node pointer		*/
  5   188 			/* parameter 3:	(input)	declare type		*/
  5   189 			/* return:	(output)	symbol node pointer		*/
  5   190 
  5   191 declare	create_token	entry (character (*), bit (9) aligned)
  5   192 			returns (ptr);
  5   193 			/* parameter 1:	(input)	token string		*/
  5   194 			/* parameter 2:	(input)	token type		*/
  5   195 			/* return:	(output)	token node ptr		*/
  5   196 
  5   197 declare	create_token$init_hash_table entry ();
  5   198 
  5   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  5   200 			returns (ptr);
  5   201 			/* parameter 1:	(input)	token string		*/
  5   202 			/* parameter 2:	(input)	token type		*/
  5   203 			/* parameter 3:	(input)	protected flag		*/
  5   204 			/* return:	(output)	token node ptr		*/
  5   205 
  5   206 declare	decbin		entry(character(*) aligned) reducible
  5   207 			returns(fixed bin(31));
  5   208 			/* parameter 1:	(input)	decimal character string	*/
  5   209 			/* return:	(output)	binary value		*/
  5   210 
  5   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  5   212 			returns(pointer);
  5   213 			/* parameter 1:	(input)	value			*/
  5   214 			/* parameter 2:	(input)	type			*/
  5   215 			/* parameter 3:	(input)	size			*/
  5   216 			/* parameter 4:	(input)	scale			*/
  5   217 			/* return:	(output)	reference node pointer	*/
  5   218 
  5   219 declare	declare_constant$bit entry(bit(*) aligned)
  5   220 			returns(pointer);
  5   221 			/* parameter 1:	(input)	bit			*/
  5   222 			/* return:	(output)	reference node pointer	*/
  5   223 
  5   224 declare	declare_constant$char entry(character(*) aligned)
  5   225 			returns(pointer);
  5   226 			/* parameter 1:	(input)	character			*/
  5   227 			/* return:	(output)	reference node pointer	*/
  5   228 
  5   229 declare	declare_constant$desc entry(bit(*) aligned)
  5   230 			returns(pointer);
  5   231 			/* parameter 1:	(input)	descriptor bit value	*/
  5   232 			/* return:	(output)	reference node pointer	*/
  5   233 
  5   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  5   235 			returns(pointer);
  5   236 			/* parameter 1:	(input)	integer			*/
  5   237 			/* return:	(output)	reference node pointer	*/
  5   238 
  5   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  5   240 			returns(pointer);
  5   241 			/* parameter 1:	(input)	block node pointer		*/
  5   242 			/* parameter 2:	(input)	statement node pointer	*/
  5   243 			/* parameter 3:	(input)	symbol node pointer		*/
  5   244 			/* parameter 4:	(input)	loc pointer		*/
  5   245 			/* parameter 5:	(input)	array descriptor bit
  5   246*						cross_section bit	*/
  5   247 			/* return:	(output)	reference node pointer	*/
  5   248 
  5   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  5   250 			returns(pointer);
  5   251 			/* parameter 1:	(input)	block node pointer	*/
  5   252 			/* parameter 2:	(input)	statement node pointer 	*/
  5   253 			/* parameter 3:	(input)	symbol node pointer	*/
  5   254 			/* parameter 4:	(input)	loc pointer	*/
  5   255 			/* parameter 5:	(input)	array descriptor bit
  5   256*						cross_section bit	*/
  5   257 			/* return:	(output)	reference node pointer	*/
  5   258 
  5   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  5   260 			returns(pointer);
  5   261 			/* parameter 1:	(input)	block node pointer		*/
  5   262 			/* parameter 2:	(input)	statement node pointer	*/
  5   263 			/* parameter 3:	(input)	symbol node pointer		*/
  5   264 			/* parameter 4:	(input)	loc pointer		*/
  5   265 			/* parameter 5:	(input)	array descriptor bit
  5   266*						cross_section bit	*/
  5   267 			/* return:	(output)	reference node pointer	*/
  5   268 
  5   269 declare	declare_integer	entry(pointer)
  5   270 			returns(pointer);
  5   271 			/* parameter 1:	(input)	block node pointer		*/
  5   272 			/* return:	(output)	reference node pointer 	*/
  5   273 
  5   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  5   275 			/* parameter 1:	(input)	picture string		*/
  5   276 			/* parameter 2:	(input)	symbol node pointer		*/
  5   277 			/* parameter 3:	(output)	error code, if any		*/
  5   278 
  5   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  5   280 			returns(pointer);
  5   281 			/* parameter 1:	(input)	picture string		*/
  5   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  5   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  5   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  5   285 			/* return:	(output)	reference node pointer	*/
  5   286 
  5   287 declare	declare_pointer	entry(pointer)
  5   288 			returns(pointer);
  5   289 			/* parameter 1:	(input)	block node pointer		*/
  5   290 			/* return:	(output)	reference node pointer	*/
  5   291 
  5   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  5   293 			returns(pointer);
  5   294 			/* parameter 1:	(input)	type			*/
  5   295 			/* parameter 2:	(input)	precision			*/
  5   296 			/* parameter 3:	(input)	scale			*/
  5   297 			/* parameter 4:	(input)	length			*/
  5   298 			/* return:	(output)	reference node pointer	*/
  5   299 
  5   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  5   301 			returns(char(120) varying);
  5   302 			/* parameter 1:	(input)	node pointer		*/
  5   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  5   304 			/* return:	(output)	source line id		*/
  5   305 
  5   306 declare	decode_source_id	entry(
  6     1 			1 structure unaligned,
  6     2 			  2 /* file_number */	bit(8),
  6     3 			  2 /* line_number */	bit(14),
  6     4 			  2 /* stmt_number */	bit(5),
  5   307 
  5   308 			bit(1) aligned)
  5   309 			returns(char(120) varying);
  5   310 			/* parameter 1:	(input)	source id			*/
  5   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  5   312 			/* return:	(output)	source line id		*/
  5   313 
  5   314 declare	error		entry(fixed bin(15),pointer,pointer);
  5   315 			/* parameter 1:	(input)	error number		*/
  5   316 			/* parameter 2:	(input)	statement node pointer or null*/
  5   317 			/* parameter 3:	(input)	token node pointer 		*/
  5   318 
  5   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  5   320 			/* parameter 1:	(input)	error number		*/
  5   321 			/* parameter 2:	(input)	statement node pointer or null*/
  5   322 			/* parameter 3:	(input)	token node pointer 		*/
  5   323 
  5   324 declare	error_		entry(fixed bin(15),
  7     1 			1 structure unaligned,
  7     2 			  2 /* file_number */	bit(8),
  7     3 			  2 /* line_number */	bit(14),
  7     4 			  2 /* stmt_number */	bit(5),
  5   325 
  5   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  5   327 			/* parameter 1:	(input)	error number		*/
  5   328 			/* parameter 2:	(input)	statement id		*/
  5   329 			/* parameter 3:	(input)	any node pointer		*/
  5   330 			/* parameter 4:	(input)	source segment		*/
  5   331 			/* parameter 5:	(input)	source starting character	*/
  5   332 			/* parameter 6:	(input)	source length		*/
  5   333 
  5   334 declare	error_$no_text	entry(fixed bin(15),
  8     1 			1 structure unaligned,
  8     2 			  2 /* file_number */	bit(8),
  8     3 			  2 /* line_number */	bit(14),
  8     4 			  2 /* stmt_number */	bit(5),
  5   335 
  5   336 			pointer);
  5   337 			/* parameter 1:	(input)	error number		*/
  5   338 			/* parameter 2:	(input)	statement id		*/
  5   339 			/* parameter 3:	(input)	any node pointer		*/
  5   340 
  5   341 declare	error_$initialize_error entry();
  5   342 
  5   343 declare	error_$finish	entry();
  5   344 
  5   345 declare	free_node		entry(pointer);
  5   346 			/* parameter 1:	any node pointer			*/
  5   347 
  5   348 declare	get_array_size	entry(pointer,fixed bin(3));
  5   349 			/* parameter 1:	(input)	symbol node pointer		*/
  5   350 			/* parameter 2:	(input)	units			*/
  5   351 
  5   352 declare	get_size		entry(pointer);
  5   353 			/* parameter 1:	(input)	symbol node pointer		*/
  5   354 
  5   355 declare	merge_attributes	external entry(pointer,pointer)
  5   356 			returns(bit(1) aligned);
  5   357 			/* parameter 1:	(input)	target symbol node pointer */
  5   358 			/* parameter 2:	(input)	source symbol node pointer */
  5   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  5   360 
  5   361 declare	optimizer		entry(pointer);
  5   362 			/* parameter 1:	(input)	root pointer		*/
  5   363 
  5   364 declare	parse_error	entry(fixed bin(15),pointer);
  5   365 			/* parameter 1:	(input)	error number		*/
  5   366 			/* parameter 2:	(input)	any node pointer		*/
  5   367 
  5   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  5   369 			/* parameter 1:	(input)	error number		*/
  5   370 			/* parameter 2:	(input)	any node pointer		*/
  5   371 
  5   372 declare	pl1_error_print$write_out
  5   373 			entry(fixed bin(15),
  9     1 			1 structure unaligned,
  9     2 			  2 /* file_number */	bit(8),
  9     3 			  2 /* line_number */	bit(14),
  9     4 			  2 /* stmt_number */	bit(5),
  5   374 
  5   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  5   376 			/* parameter 1:	(input)	error number		*/
  5   377 			/* parameter 2:	(input)	statement identification	*/
  5   378 			/* parameter 3:	(input)	any node pointer		*/
  5   379 			/* parameter 4:	(input)	source segment		*/
  5   380 			/* parameter 5:	(input)	source character index	*/
  5   381 			/* parameter 6:	(input)	source length		*/
  5   382 			/* parameter 7:	(input)	source line		*/
  5   383 
  5   384 declare	pl1_error_print$listing_segment
  5   385 			entry(fixed bin(15),
 10     1 			1 structure unaligned,
 10     2 			  2 /* file_number */	bit(8),
 10     3 			  2 /* line_number */	bit(14),
 10     4 			  2 /* stmt_number */	bit(5),
  5   386 
  5   387 			pointer);
  5   388 			/* parameter 1:	(input)	error number		*/
  5   389 			/* parameter 2:	(input)	statement identification	*/
  5   390 			/* parameter 3:	(input)	token node pointer		*/
  5   391 
  5   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  5   393 			/* parameter 1:	(input)	string			*/
  5   394 
  5   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  5   396 			/* parameter 1:	(input)	string			*/
  5   397 
  5   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  5   399 			/* parameter 1:	(input)	string			*/
  5   400 			/* parameter 2:	(input)	string length or 0		*/
  5   401 
  5   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  5   403 			/* parameter 1:	(input)	string			*/
  5   404 			/* parameter 2:	(input)	string length or 0		*/
  5   405 
  5   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  5   407 			/* parameter 1:	(input)	string pointer		*/
  5   408 			/* parameter 2:	(input)	string size		*/
  5   409 
  5   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  5   411 			/* parameter 1:	(input)	string pointer		*/
  5   412 			/* parameter 2:	(input)	string length or 0		*/
  5   413 
  5   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  5   415 			/* parameter 1:	(input)	string			*/
  5   416 			/* parameter 2:	(input)	length			*/
  5   417 
  5   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  5   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  5   420 			/* parameter 2:	(input)	line number		*/
  5   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  5   422 			/* parameter 4:	(input)	number of chars to copy	*/
  5   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  5   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  5   425 
  5   426 declare	refer_extent	entry(pointer,pointer);
  5   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  5   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  5   429 
  5   430 declare	reserve$clear	entry()
  5   431 			returns(pointer);
  5   432 			/* return:	(output)	pointer			*/
  5   433 
  5   434 declare	reserve$declare_lib	entry(fixed bin(15))
  5   435 			returns(pointer);
  5   436 			/* parameter 1:	(input)	builtin function number	*/
  5   437 			/* return:	(output)	pointer			*/
  5   438 
  5   439 declare	reserve$read_lib	entry(fixed bin(15))
  5   440 			returns(pointer);
  5   441 			/* parameter 1:	(input)	builtin function number	*/
  5   442 			/* return:	(output)	pointer			*/
  5   443 
  5   444 declare	semantic_translator	entry();
  5   445 
  5   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  5   447 			/* parameter 1:	(input)	error number		*/
  5   448 			/* parameter 2:	(input)	any node pointer		*/
  5   449 
  5   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  5   451 			/* parameter 1:	(input)	error number		*/
  5   452 			/* parameter 2:	(input)	any node pointer		*/
  5   453 
  5   454 declare	share_expression	entry(ptr)
  5   455 			returns(ptr);
  5   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  5   457 			/* return:	(output)	tree pointer or null	*/
  5   458 
  5   459 declare	token_to_binary	entry(ptr) reducible
  5   460 			returns(fixed bin(31));
  5   461 			/* parameter 1:	(input)	token node pointer		*/
  5   462 			/* return:	(output)	converted binary value	*/
  5   463 
  5   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
       55 
 11     1 /* BEGIN INCLUDE FILE ... std_descriptor_types.incl.pl1 */
 11     2 
 11     3 
 11     4 /****^  HISTORY COMMENTS:
 11     5*  1) change(86-09-05,JMAthane), approve(86-09-05,MCR7525),
 11     6*     audit(86-09-11,Martinson), install(86-11-12,MR12.0-1208):
 11     7*     Added pascal_string_type_dtype descriptor type.  Its number is 87.
 11     8*     Objects of this type are PASCAL string types.
 11     9*  2) change(88-09-20,WAAnderson), approve(88-09-20,MCR7952),
 11    10*     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
 11    11*     Added the new C types.
 11    12*                                                   END HISTORY COMMENTS */
 11    13 
 11    14 /* This include file defines mnemonic names for the Multics
 11    15*   standard descriptor types, using both pl1 and cobol terminology.
 11    16*   PG 780613
 11    17*   JRD 790530
 11    18*   JRD 791016
 11    19*   MBW 810731
 11    20*   TGO 830614 Add hex types.
 11    21*   Modified June 83 JMAthane to add PASCAL data types
 11    22*   TGO 840120 Add float dec extended and generic, float binary generic
 11    23**/
 11    24 
 11    25      dcl	   (real_fix_bin_1_dtype  init (1),
 11    26 	   real_fix_bin_2_dtype   init (2),
 11    27 	   real_flt_bin_1_dtype   init (3),
 11    28 	   real_flt_bin_2_dtype   init (4),
 11    29 	   cplx_fix_bin_1_dtype   init (5),
 11    30 	   cplx_fix_bin_2_dtype   init (6),
 11    31 	   cplx_flt_bin_1_dtype   init (7),
 11    32 	   cplx_flt_bin_2_dtype   init (8),
 11    33 	   real_fix_dec_9bit_ls_dtype init (9),
 11    34 	   real_flt_dec_9bit_dtype init (10),
 11    35 	   cplx_fix_dec_9bit_ls_dtype init (11),
 11    36 	   cplx_flt_dec_9bit_dtype init (12),
 11    37 	   pointer_dtype	      init (13),
 11    38 	   offset_dtype	      init (14),
 11    39 	   label_dtype	      init (15),
 11    40 	   entry_dtype	      init (16),
 11    41 	   structure_dtype	      init (17),
 11    42 	   area_dtype	      init (18),
 11    43 	   bit_dtype	      init (19),
 11    44 	   varying_bit_dtype      init (20),
 11    45 	   char_dtype	      init (21),
 11    46 	   varying_char_dtype     init (22),
 11    47 	   file_dtype	      init (23),
 11    48 	   real_fix_dec_9bit_ls_overp_dtype init (29),
 11    49 	   real_fix_dec_9bit_ts_overp_dtype init (30),
 11    50 	   real_fix_bin_1_uns_dtype init (33),
 11    51 	   real_fix_bin_2_uns_dtype init (34),
 11    52 	   real_fix_dec_9bit_uns_dtype init (35),
 11    53 	   real_fix_dec_9bit_ts_dtype init (36),
 11    54 	   real_fix_dec_4bit_uns_dtype init (38),	/* digit-aligned */
 11    55 	   real_fix_dec_4bit_ts_dtype init (39),	/* byte-aligned */
 11    56 	   real_fix_dec_4bit_bytealigned_uns_dtype init (40), /* COBOL */
 11    57 	   real_fix_dec_4bit_ls_dtype init (41),	/* digit-aligned */
 11    58 	   real_flt_dec_4bit_dtype init (42),		/* digit-aligned */
 11    59 	   real_fix_dec_4bit_bytealigned_ls_dtype init (43),
 11    60 	   real_flt_dec_4bit_bytealigned_dtype init (44),
 11    61 	   cplx_fix_dec_4bit_bytealigned_ls_dtype init (45),
 11    62 	   cplx_flt_dec_4bit_bytealigned_dtype init (46),
 11    63 	   real_flt_hex_1_dtype   init (47),
 11    64 	   real_flt_hex_2_dtype   init (48),
 11    65 	   cplx_flt_hex_1_dtype   init (49),
 11    66 	   cplx_flt_hex_2_dtype   init (50),
 11    67 	   c_typeref_dtype        init (54),
 11    68 	   c_enum_dtype           init (55),
 11    69              c_enum_const_dtype     init (56),
 11    70 	   c_union_dtype          init (57),
 11    71 	   algol68_straight_dtype init (59),
 11    72 	   algol68_format_dtype   init (60),
 11    73 	   algol68_array_descriptor_dtype init (61),
 11    74 	   algol68_union_dtype    init (62),
 11    75 
 11    76 	   cobol_comp_6_dtype     init (1),
 11    77 	   cobol_comp_7_dtype     init (1),
 11    78 	   cobol_display_ls_dtype init (9),
 11    79 	   cobol_structure_dtype  init (17),
 11    80 	   cobol_char_string_dtype init (21),
 11    81 	   cobol_display_ls_overp_dtype init (29),
 11    82 	   cobol_display_ts_overp_dtype init (30),
 11    83 	   cobol_display_uns_dtype init (35),
 11    84 	   cobol_display_ts_dtype init (36),
 11    85 	   cobol_comp_8_uns_dtype init (38),		/* digit aligned */
 11    86 	   cobol_comp_5_ts_dtype  init (39),		/* byte aligned */
 11    87 	   cobol_comp_5_uns_dtype init (40),
 11    88 	   cobol_comp_8_ls_dtype  init (41),		/* digit aligned */
 11    89 	   real_flt_dec_extended_dtype init (81),	/* 9-bit exponent */
 11    90 	   cplx_flt_dec_extended_dtype init (82),	/* 9-bit exponent */
 11    91 	   real_flt_dec_generic_dtype init (83),	/* generic float decimal */
 11    92 	   cplx_flt_dec_generic_dtype init (84),
 11    93 	   real_flt_bin_generic_dtype init (85),	/* generic float binary */
 11    94 	   cplx_flt_bin_generic_dtype init (86)) fixed bin internal static options (constant);
 11    95 
 11    96      dcl	   (ft_integer_dtype      init (1),
 11    97 	   ft_real_dtype	      init (3),
 11    98 	   ft_double_dtype	      init (4),
 11    99 	   ft_complex_dtype	      init (7),
 11   100 	   ft_complex_double_dtype init (8),
 11   101 	   ft_external_dtype      init (16),
 11   102 	   ft_logical_dtype	      init (19),
 11   103 	   ft_char_dtype	      init (21),
 11   104 	   ft_hex_real_dtype      init (47),
 11   105 	   ft_hex_double_dtype    init (48),
 11   106 	   ft_hex_complex_dtype   init (49),
 11   107 	   ft_hex_complex_double_dtype init (50)
 11   108 	   )		      fixed bin internal static options (constant);
 11   109 
 11   110      dcl	   (algol68_short_int_dtype init (1),
 11   111 	   algol68_int_dtype      init (1),
 11   112 	   algol68_long_int_dtype init (2),
 11   113 	   algol68_real_dtype     init (3),
 11   114 	   algol68_long_real_dtype init (4),
 11   115 	   algol68_compl_dtype    init (7),
 11   116 	   algol68_long_compl_dtype init (8),
 11   117 	   algol68_bits_dtype     init (19),
 11   118 	   algol68_bool_dtype     init (19),
 11   119 	   algol68_char_dtype     init (21),
 11   120 	   algol68_byte_dtype     init (21),
 11   121 	   algol68_struct_struct_char_dtype init (22),
 11   122 	   algol68_struct_struct_bool_dtype init (20)
 11   123 	   )		      fixed bin internal static options (constant);
 11   124 
 11   125      dcl	   (label_constant_runtime_dtype init (24),
 11   126 	   int_entry_runtime_dtype init (25),
 11   127 	   ext_entry_runtime_dtype init (26),
 11   128 	   ext_procedure_runtime_dtype init (27),
 11   129 	   picture_runtime_dtype  init (63)
 11   130 	   )		      fixed bin internal static options (constant);
 11   131 
 11   132      dcl	   (pascal_integer_dtype  init (1),
 11   133 	   pascal_real_dtype      init (4),
 11   134 	   pascal_label_dtype     init (24),
 11   135 	   pascal_internal_procedure_dtype init (25),
 11   136 	   pascal_exportable_procedure_dtype init (26),
 11   137 	   pascal_imported_procedure_dtype init (27),
 11   138 	   pascal_typed_pointer_type_dtype init (64),
 11   139 	   pascal_char_dtype      init (65),
 11   140 	   pascal_boolean_dtype   init (66),
 11   141 	   pascal_record_file_type_dtype init (67),
 11   142 	   pascal_record_type_dtype init (68),
 11   143 	   pascal_set_dtype	      init (69),
 11   144 	   pascal_enumerated_type_dtype init (70),
 11   145 	   pascal_enumerated_type_element_dtype init (71),
 11   146 	   pascal_enumerated_type_instance_dtype init (72),
 11   147 	   pascal_user_defined_type_dtype init (73),
 11   148 	   pascal_user_defined_type_instance_dtype init (74),
 11   149 	   pascal_text_file_dtype init (75),
 11   150 	   pascal_procedure_type_dtype init (76),
 11   151 	   pascal_variable_formal_parameter_dtype init (77),
 11   152 	   pascal_value_formal_parameter_dtype init (78),
 11   153 	   pascal_entry_formal_parameter_dtype init (79),
 11   154 	   pascal_parameter_procedure_dtype init (80),
 11   155 	   pascal_string_type_dtype init (87)) fixed bin int static options (constant);
 11   156 
 11   157 
 11   158 /* END INCLUDE FILE ... std_descriptor_types.incl.pl1 */
       56 
       57 
       58 	if opcode = cat_string then go to concatenate;
       59 
       60 	if opcode >= div
       61 	then do;
       62 make:	     q = create_operator(opcode,3);
       63 	     q -> operand(2) = r2;
       64 	     q -> operand(3) = r3;
       65 	     return(q);
       66 	     end;
       67 
       68 	if r2 -> token.type ^= r3 -> token.type then goto make;
       69 
       70 	if r2 -> token.type ^= dec_integer then goto make;
       71 
       72 	if r2 -> token.loc ^= r3 -> token.loc
       73 	then go to make;				/* require "p" flag to be same */
       74 
       75 	prec2 = length(r2 -> token.string);
       76 	prec3 = length(r3 -> token.string);
       77 
       78 	if prec2 > 31 | prec3 > 31 then goto make;
       79 
       80 	call assign_ (addr (v2), real_fix_dec_9bit_ls_dtype*2, 31,
       81 	     addr (r2 -> token.string), char_dtype*2, prec2);
       82 	call assign_ (addr (v3), real_fix_dec_9bit_ls_dtype*2, 31,
       83 	     addr (r3 -> token.string), char_dtype*2, prec3);
       84 
       85 	if opcode = add
       86 	then v = v2 + v3;
       87 
       88 	else if opcode = sub
       89 	     then v = v2 - v3;
       90 	     else v = v2 * v3;
       91 
       92 /* determine the resultant precision needed. */
       93 
       94 	i = verify (substr (v_chars, 2), "0");
       95 	prec = max (length (v_chars)-i, 1);
       96 
       97 	if substr (v_chars, 1, 1) ^= "-" then
       98 	     return (create_token$protected (substr (v_chars, length (v_chars)-prec+1, prec), dec_integer, (r2 -> token.loc)));
       99 	else return (create_token$protected ("-" || substr (v_chars, length (v_chars)-prec+1, prec), dec_integer, (r2 -> token.loc)));
      100 
      101 
      102 concatenate:
      103 	if r2 -> token.type ^= r3 -> token.type then goto make;
      104 
      105 	if r2 -> token.type = char_string
      106 	then prec2 = length(r2 -> token.string);
      107 	else if r2 -> token.type = bit_string
      108 	     then prec2 = length(r2 -> token.string) - 1;
      109 	     else go to make;
      110 
      111 	if prec2 + length(r3 -> token.string) > string_max
      112 	     then go to make;
      113 
      114 	return(create_token(substr(r2 -> token.string,1,prec2) || r3 -> token.string, (r2 -> token.type)));
      115 	end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/31/89  1338.0  evaluate.pl1                      >spec>install>MR12.3-1066>evaluate.pl1
51           1    04/07/83  1635.0  op_codes.incl.pl1                 >ldd>include>op_codes.incl.pl1
52           2    07/21/80  1546.3  operator.incl.pl1                 >ldd>include>operator.incl.pl1
53           3    09/14/77  1705.7  token.incl.pl1                    >ldd>include>token.incl.pl1
54           4    11/30/78  1227.4  token_types.incl.pl1              >ldd>include>token_types.incl.pl1
55           5    07/31/89  1332.6  language_utility.incl.pl1         >spec>install>MR12.3-1066>language_utility.incl.pl1
5-307        6    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
5-325        7    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
5-335        8    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
5-374        9    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
5-386       10    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
56          11    10/26/88  1255.5  std_descriptor_types.incl.pl1     >ldd>include>std_descriptor_types.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
add                                    constant        bit(9)                   initial dcl 1-8 ref 85
assign_                         000010 constant        entry                    external dcl 49 ref 80 82
bit_string                             constant        bit(9)                   initial dcl 4-3 ref 107
cat_string                             constant        bit(9)                   initial dcl 1-8 ref 58
char_dtype                             constant        fixed bin(17,0)          initial dcl 11-25 ref 80 82
char_string                            constant        bit(9)                   initial dcl 4-3 ref 105
create_operator                 000012 constant        entry                    external dcl 5-152 ref 62
create_token                    000014 constant        entry                    external dcl 5-191 ref 114
create_token$protected          000016 constant        entry                    external dcl 5-199 ref 97 99
dec_integer                     000000 constant        bit(9)                   initial dcl 4-3 set ref 70 97* 99*
div                                    constant        bit(9)                   initial dcl 1-8 ref 60
i                               000102 automatic       fixed bin(35,0)          dcl 37 set ref 94* 95
length                                                 builtin function         dcl 47 ref 75 76 95 97 97 99 105 107 111
loc                       0(18)        based           bit(18)                  level 2 packed packed unaligned dcl 3-3 ref 72 72 97
                                                                                  99
max                                                    builtin function         dcl 47 ref 95
opcode                                 parameter       bit(9)                   dcl 34 set ref 32 58 60 62* 85 88
operand                   1            based           pointer                  array level 2 packed packed unaligned dcl 2-6 set
                                                                                  ref 63* 64*
operator                               based           structure                level 1 dcl 2-6
prec                            000103 automatic       fixed bin(35,0)          dcl 37 set ref 95* 97 97 97 97 99 99
prec2                           000104 automatic       fixed bin(35,0)          dcl 37 set ref 75* 78 80* 105* 107* 111 114
prec3                           000105 automatic       fixed bin(35,0)          dcl 37 set ref 76* 78 82*
q                               000100 automatic       pointer                  dcl 37 set ref 62* 63 64 65
r2                                     parameter       pointer                  dcl 34 ref 32 63 68 70 72 75 80 80 97 99 102 105 105
                                                                                  107 107 114 114
r3                                     parameter       pointer                  dcl 34 ref 32 64 68 72 76 82 82 102 111 114
real_fix_dec_9bit_ls_dtype             constant        fixed bin(17,0)          initial dcl 11-25 ref 80 82
size                      3            based           fixed bin(9,0)           level 2 dcl 3-3 ref 75 76 80 80 82 82 105 107 111
                                                                                  114 114
string                    4            based           char                     level 2 dcl 3-3 set ref 75 76 80 80 82 82 105 107
                                                                                  111 114 114
string_max                             constant        fixed bin(17,0)          initial dcl 45 ref 111
sub                                    constant        bit(9)                   initial dcl 1-8 ref 88
substr                                                 builtin function         dcl 47 ref 94 97 97 97 99 114
token                                  based           structure                level 1 dcl 3-3
type                      0(09)        based           bit(9)                   level 2 packed packed unaligned dcl 3-3 ref 68 68 70
                                                                                  102 102 105 107 114
v                               000126 automatic       fixed dec(50,0)          dcl 42 set ref 85* 88* 90* 94 95 97 97 97 97 97 99
                                                                                  99
v2                              000106 automatic       fixed dec(31,0)          dcl 41 set ref 80 80 85 88 90
v3                              000116 automatic       fixed dec(31,0)          dcl 41 set ref 82 82 85 88 90
v_chars                                based           char(51)                 packed unaligned dcl 43 ref 94 95 97 97 97 97 97 99
                                                                                  99

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
a_format                               internal static bit(9)                   initial dcl 1-8
abs_fun                                internal static bit(9)                   initial dcl 1-8
acos_fun                               internal static bit(9)                   initial dcl 1-8
acosd_fun                              internal static bit(9)                   initial dcl 1-8
addbitno_fun                           internal static bit(9)                   initial dcl 1-8
addcharno_fun                          internal static bit(9)                   initial dcl 1-8
addr_fun                               internal static bit(9)                   initial dcl 1-8
addr_fun_bits                          internal static bit(9)                   initial dcl 1-8
addrel_fun                             internal static bit(9)                   initial dcl 1-8
adjust_count                    000000 constant        entry                    external dcl 5-20
algol68_array_descriptor_dtype         internal static fixed bin(17,0)          initial dcl 11-25
algol68_bits_dtype                     internal static fixed bin(17,0)          initial dcl 11-110
algol68_bool_dtype                     internal static fixed bin(17,0)          initial dcl 11-110
algol68_byte_dtype                     internal static fixed bin(17,0)          initial dcl 11-110
algol68_char_dtype                     internal static fixed bin(17,0)          initial dcl 11-110
algol68_compl_dtype                    internal static fixed bin(17,0)          initial dcl 11-110
algol68_format_dtype                   internal static fixed bin(17,0)          initial dcl 11-25
algol68_int_dtype                      internal static fixed bin(17,0)          initial dcl 11-110
algol68_long_compl_dtype               internal static fixed bin(17,0)          initial dcl 11-110
algol68_long_int_dtype                 internal static fixed bin(17,0)          initial dcl 11-110
algol68_long_real_dtype                internal static fixed bin(17,0)          initial dcl 11-110
algol68_real_dtype                     internal static fixed bin(17,0)          initial dcl 11-110
algol68_short_int_dtype                internal static fixed bin(17,0)          initial dcl 11-110
algol68_straight_dtype                 internal static fixed bin(17,0)          initial dcl 11-25
algol68_struct_struct_bool_dtype       internal static fixed bin(17,0)          initial dcl 11-110
algol68_struct_struct_char_dtype       internal static fixed bin(17,0)          initial dcl 11-110
algol68_union_dtype                    internal static fixed bin(17,0)          initial dcl 11-25
allocation_fun                         internal static bit(9)                   initial dcl 1-8
allot_auto                             internal static bit(9)                   initial dcl 1-8
allot_based                            internal static bit(9)                   initial dcl 1-8
allot_ctl                              internal static bit(9)                   initial dcl 1-8
allot_var                              internal static bit(9)                   initial dcl 1-8
and                                    internal static bit(9)                   initial dcl 4-3
and_bits                               internal static bit(9)                   initial dcl 1-8
ans                                    automatic       char(32)                 dcl 37
area_dtype                             internal static fixed bin(17,0)          initial dcl 11-25
arrow                                  internal static bit(9)                   initial dcl 4-3
asin_fun                               internal static bit(9)                   initial dcl 1-8
asind_fun                              internal static bit(9)                   initial dcl 1-8
assign                                 internal static bit(9)                   initial dcl 1-8
assign_by_name                         internal static bit(9)                   initial dcl 1-8
assign_round                           internal static bit(9)                   initial dcl 1-8
assign_size_ck                         internal static bit(9)                   initial dcl 1-8
assign_zero                            internal static bit(9)                   initial dcl 1-8
assignment                             internal static bit(9)                   initial dcl 4-3
asterisk                               internal static bit(9)                   initial dcl 4-3
atan_fun                               internal static bit(9)                   initial dcl 1-8
atand_fun                              internal static bit(9)                   initial dcl 1-8
b_format                               internal static bit(9)                   initial dcl 1-8
baseno_fun                             internal static bit(9)                   initial dcl 1-8
baseptr_fun                            internal static bit(9)                   initial dcl 1-8
bin_integer                            internal static bit(9)                   initial dcl 4-3
binary_to_octal_string          000000 constant        entry                    external dcl 5-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 5-43
bindec                          000000 constant        entry                    external dcl 5-23
bindec$vs                       000000 constant        entry                    external dcl 5-28
binoct                          000000 constant        entry                    external dcl 5-33
bit_dtype                              internal static fixed bin(17,0)          initial dcl 11-25
bit_pointer                            internal static bit(9)                   initial dcl 1-8
bit_to_char                            internal static bit(9)                   initial dcl 1-8
bit_to_word                            internal static bit(9)                   initial dcl 1-8
bitno_fun                              internal static bit(9)                   initial dcl 1-8
bn_format                              internal static bit(9)                   initial dcl 1-8
bool_fun                               internal static bit(9)                   initial dcl 1-8
bound_ck                               internal static bit(9)                   initial dcl 1-8
byte_fun                               internal static bit(9)                   initial dcl 1-8
c_enum_const_dtype                     internal static fixed bin(17,0)          initial dcl 11-25
c_enum_dtype                           internal static fixed bin(17,0)          initial dcl 11-25
c_format                               internal static bit(9)                   initial dcl 1-8
c_typeref_dtype                        internal static fixed bin(17,0)          initial dcl 11-25
c_union_dtype                          internal static fixed bin(17,0)          initial dcl 11-25
cat                                    internal static bit(9)                   initial dcl 4-3
ceil_fun                               internal static bit(9)                   initial dcl 1-8
char_to_word                           internal static bit(9)                   initial dcl 1-8
charno_fun                             internal static bit(9)                   initial dcl 1-8
clock_fun                              internal static bit(9)                   initial dcl 1-8
close_file                             internal static bit(9)                   initial dcl 1-8
cobol_char_string_dtype                internal static fixed bin(17,0)          initial dcl 11-25
cobol_comp_5_ts_dtype                  internal static fixed bin(17,0)          initial dcl 11-25
cobol_comp_5_uns_dtype                 internal static fixed bin(17,0)          initial dcl 11-25
cobol_comp_6_dtype                     internal static fixed bin(17,0)          initial dcl 11-25
cobol_comp_7_dtype                     internal static fixed bin(17,0)          initial dcl 11-25
cobol_comp_8_ls_dtype                  internal static fixed bin(17,0)          initial dcl 11-25
cobol_comp_8_uns_dtype                 internal static fixed bin(17,0)          initial dcl 11-25
cobol_display_ls_dtype                 internal static fixed bin(17,0)          initial dcl 11-25
cobol_display_ls_overp_dtype           internal static fixed bin(17,0)          initial dcl 11-25
cobol_display_ts_dtype                 internal static fixed bin(17,0)          initial dcl 11-25
cobol_display_ts_overp_dtype           internal static fixed bin(17,0)          initial dcl 11-25
cobol_display_uns_dtype                internal static fixed bin(17,0)          initial dcl 11-25
cobol_structure_dtype                  internal static fixed bin(17,0)          initial dcl 11-25
codeptr_fun                            internal static bit(9)                   initial dcl 1-8
colon                                  internal static bit(9)                   initial dcl 4-3
column_format                          internal static bit(9)                   initial dcl 1-8
comma                                  internal static bit(9)                   initial dcl 4-3
compare_expression              000000 constant        entry                    external dcl 5-48
complex_fun                            internal static bit(9)                   initial dcl 1-8
conjg_fun                              internal static bit(9)                   initial dcl 1-8
constant_length                 000000 constant        entry                    external dcl 5-54
convert                         000000 constant        entry                    external dcl 5-60
convert$from_builtin            000000 constant        entry                    external dcl 5-72
convert$to_integer              000000 constant        entry                    external dcl 5-66
convert$to_target               000000 constant        entry                    external dcl 5-88
convert$to_target_fb            000000 constant        entry                    external dcl 5-82
convert$validate                000000 constant        entry                    external dcl 5-78
copy_expression                 000000 constant        entry                    external dcl 5-94
copy_expression$copy_sons       000000 constant        entry                    external dcl 5-99
copy_string                            internal static bit(9)                   initial dcl 1-8
copy_unique_expression          000000 constant        entry                    external dcl 5-103
copy_words                             internal static bit(9)                   initial dcl 1-8
cos_fun                                internal static bit(9)                   initial dcl 1-8
cosd_fun                               internal static bit(9)                   initial dcl 1-8
cplx_fix_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 11-25
cplx_fix_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 11-25
cplx_fix_dec_4bit_bytealigned_ls_dtype internal static fixed bin(17,0)          initial dcl 11-25
cplx_fix_dec_9bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 11-25
cplx_flt_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 11-25
cplx_flt_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 11-25
cplx_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 11-25
cplx_flt_dec_4bit_bytealigned_dtype    internal static fixed bin(17,0)          initial dcl 11-25
cplx_flt_dec_9bit_dtype                internal static fixed bin(17,0)          initial dcl 11-25
cplx_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 11-25
cplx_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 11-25
cplx_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 11-25
cplx_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 11-25
create_array                    000000 constant        entry                    external dcl 5-108
create_block                    000000 constant        entry                    external dcl 5-112
create_bound                    000000 constant        entry                    external dcl 5-118
create_context                  000000 constant        entry                    external dcl 5-122
create_cross_reference          000000 constant        entry                    external dcl 5-128
create_default                  000000 constant        entry                    external dcl 5-132
create_identifier               000000 constant        entry                    external dcl 5-136
create_label                    000000 constant        entry                    external dcl 5-140
create_list                     000000 constant        entry                    external dcl 5-147
create_reference                000000 constant        entry                    external dcl 5-158
create_statement                000000 constant        entry                    external dcl 5-163
create_statement$prologue       000000 constant        entry                    external dcl 5-171
create_storage                  000000 constant        entry                    external dcl 5-179
create_symbol                   000000 constant        entry                    external dcl 5-184
create_token$init_hash_table    000000 constant        entry                    external dcl 5-197
decbin                          000000 constant        entry                    external dcl 5-206
declare_constant                000000 constant        entry                    external dcl 5-211
declare_constant$bit            000000 constant        entry                    external dcl 5-219
declare_constant$char           000000 constant        entry                    external dcl 5-224
declare_constant$desc           000000 constant        entry                    external dcl 5-229
declare_constant$integer        000000 constant        entry                    external dcl 5-234
declare_descriptor              000000 constant        entry                    external dcl 5-239
declare_descriptor$ctl          000000 constant        entry                    external dcl 5-249
declare_descriptor$param        000000 constant        entry                    external dcl 5-259
declare_integer                 000000 constant        entry                    external dcl 5-269
declare_picture                 000000 constant        entry                    external dcl 5-274
declare_picture_temp            000000 constant        entry                    external dcl 5-279
declare_pointer                 000000 constant        entry                    external dcl 5-287
declare_temporary               000000 constant        entry                    external dcl 5-292
decode_node_id                  000000 constant        entry                    external dcl 5-300
decode_source_id                000000 constant        entry                    external dcl 5-306
delete_file                            internal static bit(9)                   initial dcl 1-8
desc_size                              internal static bit(9)                   initial dcl 1-8
digit_to_bit                           internal static bit(9)                   initial dcl 1-8
do_fun                                 internal static bit(9)                   initial dcl 1-8
do_spec                                internal static bit(9)                   initial dcl 1-8
e_format                               internal static bit(9)                   initial dcl 1-8
empty_area                             internal static bit(9)                   initial dcl 1-8
enable_on                              internal static bit(9)                   initial dcl 1-8
entry_dtype                            internal static fixed bin(17,0)          initial dcl 11-25
environmentptr_fun                     internal static bit(9)                   initial dcl 1-8
eq                                     internal static bit(9)                   initial dcl 4-3
equal                                  internal static bit(9)                   initial dcl 1-8
error                           000000 constant        entry                    external dcl 5-314
error$omit_text                 000000 constant        entry                    external dcl 5-319
error_                          000000 constant        entry                    external dcl 5-324
error_$finish                   000000 constant        entry                    external dcl 5-343
error_$initialize_error         000000 constant        entry                    external dcl 5-341
error_$no_text                  000000 constant        entry                    external dcl 5-334
ex_prologue                            internal static bit(9)                   initial dcl 1-8
exp                                    internal static bit(9)                   initial dcl 1-8
exp_fun                                internal static bit(9)                   initial dcl 1-8
expon                                  internal static bit(9)                   initial dcl 4-3
ext_entry_runtime_dtype                internal static fixed bin(17,0)          initial dcl 11-125
ext_procedure_runtime_dtype            internal static fixed bin(17,0)          initial dcl 11-125
f_format                               internal static bit(9)                   initial dcl 1-8
file_dtype                             internal static fixed bin(17,0)          initial dcl 11-25
fixed_bin                              internal static bit(9)                   initial dcl 4-3
fixed_dec                              internal static bit(9)                   initial dcl 4-3
float_bin                              internal static bit(9)                   initial dcl 4-3
float_dec                              internal static bit(9)                   initial dcl 4-3
floor_fun                              internal static bit(9)                   initial dcl 1-8
fortran_read                           internal static bit(9)                   initial dcl 1-8
fortran_write                          internal static bit(9)                   initial dcl 1-8
free_based                             internal static bit(9)                   initial dcl 1-8
free_ctl                               internal static bit(9)                   initial dcl 1-8
free_node                       000000 constant        entry                    external dcl 5-345
free_var                               internal static bit(9)                   initial dcl 1-8
ft_char_dtype                          internal static fixed bin(17,0)          initial dcl 11-96
ft_complex_double_dtype                internal static fixed bin(17,0)          initial dcl 11-96
ft_complex_dtype                       internal static fixed bin(17,0)          initial dcl 11-96
ft_double_dtype                        internal static fixed bin(17,0)          initial dcl 11-96
ft_external_dtype                      internal static fixed bin(17,0)          initial dcl 11-96
ft_hex_complex_double_dtype            internal static fixed bin(17,0)          initial dcl 11-96
ft_hex_complex_dtype                   internal static fixed bin(17,0)          initial dcl 11-96
ft_hex_double_dtype                    internal static fixed bin(17,0)          initial dcl 11-96
ft_hex_real_dtype                      internal static fixed bin(17,0)          initial dcl 11-96
ft_integer_dtype                       internal static fixed bin(17,0)          initial dcl 11-96
ft_logical_dtype                       internal static fixed bin(17,0)          initial dcl 11-96
ft_real_dtype                          internal static fixed bin(17,0)          initial dcl 11-96
ftn_file_manip                         internal static bit(9)                   initial dcl 1-8
ftn_trans_loop                         internal static bit(9)                   initial dcl 1-8
ge                                     internal static bit(9)                   initial dcl 4-3
get_array_size                  000000 constant        entry                    external dcl 5-348
get_data_trans                         internal static bit(9)                   initial dcl 1-8
get_edit_trans                         internal static bit(9)                   initial dcl 1-8
get_file                               internal static bit(9)                   initial dcl 1-8
get_list_trans                         internal static bit(9)                   initial dcl 1-8
get_size                        000000 constant        entry                    external dcl 5-352
get_string                             internal static bit(9)                   initial dcl 1-8
greater_or_equal                       internal static bit(9)                   initial dcl 1-8
greater_than                           internal static bit(9)                   initial dcl 1-8
gt                                     internal static bit(9)                   initial dcl 4-3
half_to_word                           internal static bit(9)                   initial dcl 1-8
i_bin_integer                          internal static bit(9)                   initial dcl 4-3
i_dec_integer                          internal static bit(9)                   initial dcl 4-3
i_fixed_bin                            internal static bit(9)                   initial dcl 4-3
i_fixed_dec                            internal static bit(9)                   initial dcl 4-3
i_float_bin                            internal static bit(9)                   initial dcl 4-3
i_float_dec                            internal static bit(9)                   initial dcl 4-3
identifier                             internal static bit(9)                   initial dcl 4-3
imag_fun                               internal static bit(9)                   initial dcl 1-8
index_after_fun                        internal static bit(9)                   initial dcl 1-8
index_before_fun                       internal static bit(9)                   initial dcl 1-8
index_fun                              internal static bit(9)                   initial dcl 1-8
index_rev_fun                          internal static bit(9)                   initial dcl 1-8
int_entry_runtime_dtype                internal static fixed bin(17,0)          initial dcl 11-125
is_arith_constant                      internal static bit(9)                   initial dcl 4-47
is_arithmetic_constant                 internal static bit(9)                   initial dcl 4-47
is_constant                            internal static bit(9)                   initial dcl 4-47
is_decimal_constant                    internal static bit(9)                   initial dcl 4-47
is_delimiter                           internal static bit(9)                   initial dcl 4-47
is_float_constant                      internal static bit(9)                   initial dcl 4-47
is_identifier                          internal static bit(9)                   initial dcl 4-47
is_imaginary_constant                  internal static bit(9)                   initial dcl 4-47
is_integral_constant                   internal static bit(9)                   initial dcl 4-47
is_isub                                internal static bit(9)                   initial dcl 4-47
isub                                   internal static bit(9)                   initial dcl 4-3
join                                   internal static bit(9)                   initial dcl 1-8
jump                                   internal static bit(9)                   initial dcl 1-8
jump_false                             internal static bit(9)                   initial dcl 1-8
jump_if_eq                             internal static bit(9)                   initial dcl 1-8
jump_if_ge                             internal static bit(9)                   initial dcl 1-8
jump_if_gt                             internal static bit(9)                   initial dcl 1-8
jump_if_le                             internal static bit(9)                   initial dcl 1-8
jump_if_lt                             internal static bit(9)                   initial dcl 1-8
jump_if_ne                             internal static bit(9)                   initial dcl 1-8
jump_true                              internal static bit(9)                   initial dcl 1-8
l_parn                                 internal static bit(9)                   initial dcl 1-8
label_constant_runtime_dtype           internal static fixed bin(17,0)          initial dcl 11-125
label_dtype                            internal static fixed bin(17,0)          initial dcl 11-25
le                                     internal static bit(9)                   initial dcl 4-3
left_parn                              internal static bit(9)                   initial dcl 4-3
length_fun                             internal static bit(9)                   initial dcl 1-8
less_or_equal                          internal static bit(9)                   initial dcl 1-8
less_than                              internal static bit(9)                   initial dcl 1-8
line_format                            internal static bit(9)                   initial dcl 1-8
locate_file                            internal static bit(9)                   initial dcl 1-8
lock_file                              internal static bit(9)                   initial dcl 1-8
lock_fun                               internal static bit(9)                   initial dcl 1-8
log10_fun                              internal static bit(9)                   initial dcl 1-8
log2_fun                               internal static bit(9)                   initial dcl 1-8
log_fun                                internal static bit(9)                   initial dcl 1-8
loop                                   internal static bit(9)                   initial dcl 1-8
lt                                     internal static bit(9)                   initial dcl 4-3
make_desc                              internal static bit(9)                   initial dcl 1-8
max_fun                                internal static bit(9)                   initial dcl 1-8
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 2-15
merge_attributes                000000 constant        entry                    external dcl 5-355
min_fun                                internal static bit(9)                   initial dcl 1-8
minus                                  internal static bit(9)                   initial dcl 4-3
mod_bit                                internal static bit(9)                   initial dcl 1-8
mod_byte                               internal static bit(9)                   initial dcl 1-8
mod_fun                                internal static bit(9)                   initial dcl 1-8
mod_half                               internal static bit(9)                   initial dcl 1-8
mod_word                               internal static bit(9)                   initial dcl 1-8
mult                                   internal static bit(9)                   initial dcl 1-8
n                                      automatic       fixed bin(35,0)          dcl 37
ne                                     internal static bit(9)                   initial dcl 4-3
negate                                 internal static bit(9)                   initial dcl 1-8
ngt                                    internal static bit(9)                   initial dcl 4-3
nlt                                    internal static bit(9)                   initial dcl 4-3
no_token                               internal static bit(9)                   initial dcl 4-3
nop                                    internal static bit(9)                   initial dcl 1-8
not                                    internal static bit(9)                   initial dcl 4-3
not_bits                               internal static bit(9)                   initial dcl 1-8
not_equal                              internal static bit(9)                   initial dcl 1-8
off_fun                                internal static bit(9)                   initial dcl 1-8
offset_dtype                           internal static fixed bin(17,0)          initial dcl 11-25
open_file                              internal static bit(9)                   initial dcl 1-8
optimizer                       000000 constant        entry                    external dcl 5-361
or                                     internal static bit(9)                   initial dcl 4-3
or_bits                                internal static bit(9)                   initial dcl 1-8
pack                                   internal static bit(9)                   initial dcl 1-8
page_format                            internal static bit(9)                   initial dcl 1-8
param_desc_ptr                         internal static bit(9)                   initial dcl 1-8
param_ptr                              internal static bit(9)                   initial dcl 1-8
parse_error                     000000 constant        entry                    external dcl 5-364
parse_error$no_text             000000 constant        entry                    external dcl 5-368
pascal_boolean_dtype                   internal static fixed bin(17,0)          initial dcl 11-132
pascal_char_dtype                      internal static fixed bin(17,0)          initial dcl 11-132
pascal_entry_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 11-132
pascal_enumerated_type_dtype           internal static fixed bin(17,0)          initial dcl 11-132
pascal_enumerated_type_element_dtype   internal static fixed bin(17,0)          initial dcl 11-132
pascal_enumerated_type_instance_dtype  internal static fixed bin(17,0)          initial dcl 11-132
pascal_exportable_procedure_dtype      internal static fixed bin(17,0)          initial dcl 11-132
pascal_imported_procedure_dtype        internal static fixed bin(17,0)          initial dcl 11-132
pascal_integer_dtype                   internal static fixed bin(17,0)          initial dcl 11-132
pascal_internal_procedure_dtype        internal static fixed bin(17,0)          initial dcl 11-132
pascal_label_dtype                     internal static fixed bin(17,0)          initial dcl 11-132
pascal_parameter_procedure_dtype       internal static fixed bin(17,0)          initial dcl 11-132
pascal_procedure_type_dtype            internal static fixed bin(17,0)          initial dcl 11-132
pascal_real_dtype                      internal static fixed bin(17,0)          initial dcl 11-132
pascal_record_file_type_dtype          internal static fixed bin(17,0)          initial dcl 11-132
pascal_record_type_dtype               internal static fixed bin(17,0)          initial dcl 11-132
pascal_set_dtype                       internal static fixed bin(17,0)          initial dcl 11-132
pascal_string_type_dtype               internal static fixed bin(17,0)          initial dcl 11-132
pascal_text_file_dtype                 internal static fixed bin(17,0)          initial dcl 11-132
pascal_typed_pointer_type_dtype        internal static fixed bin(17,0)          initial dcl 11-132
pascal_user_defined_type_dtype         internal static fixed bin(17,0)          initial dcl 11-132
pascal_user_defined_type_instance_dtype
                                       internal static fixed bin(17,0)          initial dcl 11-132
pascal_value_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 11-132
pascal_variable_formal_parameter_dtype internal static fixed bin(17,0)          initial dcl 11-132
percent                                internal static bit(9)                   initial dcl 4-3
period                                 internal static bit(9)                   initial dcl 4-3
picture_format                         internal static bit(9)                   initial dcl 1-8
picture_runtime_dtype                  internal static fixed bin(17,0)          initial dcl 11-125
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 5-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 5-372
pl1_mod_fun                            internal static bit(9)                   initial dcl 1-8
pl1_print$for_lex               000000 constant        entry                    external dcl 5-418
pl1_print$non_varying           000000 constant        entry                    external dcl 5-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 5-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 5-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 5-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 5-414
pl1_print$varying               000000 constant        entry                    external dcl 5-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 5-395
plus                                   internal static bit(9)                   initial dcl 4-3
pointer_dtype                          internal static fixed bin(17,0)          initial dcl 11-25
prefix_plus                            internal static bit(9)                   initial dcl 1-8
ptr_fun                                internal static bit(9)                   initial dcl 1-8
put_control                            internal static bit(9)                   initial dcl 1-8
put_data_trans                         internal static bit(9)                   initial dcl 1-8
put_edit_trans                         internal static bit(9)                   initial dcl 1-8
put_field                              internal static bit(9)                   initial dcl 1-8
put_field_chk                          internal static bit(9)                   initial dcl 1-8
put_file                               internal static bit(9)                   initial dcl 1-8
put_list_trans                         internal static bit(9)                   initial dcl 1-8
put_string                             internal static bit(9)                   initial dcl 1-8
r_format                               internal static bit(9)                   initial dcl 1-8
r_parn                                 internal static bit(9)                   initial dcl 1-8
range_ck                               internal static bit(9)                   initial dcl 1-8
rank_fun                               internal static bit(9)                   initial dcl 1-8
read_file                              internal static bit(9)                   initial dcl 1-8
real_fix_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 11-25
real_fix_bin_1_uns_dtype               internal static fixed bin(17,0)          initial dcl 11-25
real_fix_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 11-25
real_fix_bin_2_uns_dtype               internal static fixed bin(17,0)          initial dcl 11-25
real_fix_dec_4bit_bytealigned_ls_dtype internal static fixed bin(17,0)          initial dcl 11-25
real_fix_dec_4bit_bytealigned_uns_dtype
                                       internal static fixed bin(17,0)          initial dcl 11-25
real_fix_dec_4bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 11-25
real_fix_dec_4bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 11-25
real_fix_dec_4bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 11-25
real_fix_dec_9bit_ls_overp_dtype       internal static fixed bin(17,0)          initial dcl 11-25
real_fix_dec_9bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 11-25
real_fix_dec_9bit_ts_overp_dtype       internal static fixed bin(17,0)          initial dcl 11-25
real_fix_dec_9bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 11-25
real_flt_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 11-25
real_flt_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 11-25
real_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 11-25
real_flt_dec_4bit_bytealigned_dtype    internal static fixed bin(17,0)          initial dcl 11-25
real_flt_dec_4bit_dtype                internal static fixed bin(17,0)          initial dcl 11-25
real_flt_dec_9bit_dtype                internal static fixed bin(17,0)          initial dcl 11-25
real_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 11-25
real_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 11-25
real_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 11-25
real_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 11-25
real_fun                               internal static bit(9)                   initial dcl 1-8
record_io                              internal static bit(9)                   initial dcl 1-8
refer                                  internal static bit(9)                   initial dcl 1-8
refer_extent                    000000 constant        entry                    external dcl 5-426
rel_fun                                internal static bit(9)                   initial dcl 1-8
repeat_fun                             internal static bit(9)                   initial dcl 1-8
reserve$clear                   000000 constant        entry                    external dcl 5-430
reserve$declare_lib             000000 constant        entry                    external dcl 5-434
reserve$read_lib                000000 constant        entry                    external dcl 5-439
return_bits                            internal static bit(9)                   initial dcl 1-8
return_string                          internal static bit(9)                   initial dcl 1-8
return_value                           internal static bit(9)                   initial dcl 1-8
return_words                           internal static bit(9)                   initial dcl 1-8
reverse_fun                            internal static bit(9)                   initial dcl 1-8
revert_on                              internal static bit(9)                   initial dcl 1-8
rewrite_file                           internal static bit(9)                   initial dcl 1-8
right_parn                             internal static bit(9)                   initial dcl 4-3
round_fun                              internal static bit(9)                   initial dcl 1-8
search_fun                             internal static bit(9)                   initial dcl 1-8
search_rev_fun                         internal static bit(9)                   initial dcl 1-8
segno_fun                              internal static bit(9)                   initial dcl 1-8
semantic_translator             000000 constant        entry                    external dcl 5-444
semantic_translator$abort       000000 constant        entry                    external dcl 5-446
semantic_translator$error       000000 constant        entry                    external dcl 5-450
semi_colon                             internal static bit(9)                   initial dcl 4-3
setbitno_fun                           internal static bit(9)                   initial dcl 1-8
setcharno_fun                          internal static bit(9)                   initial dcl 1-8
share_expression                000000 constant        entry                    external dcl 5-454
sign_fun                               internal static bit(9)                   initial dcl 1-8
signal_on                              internal static bit(9)                   initial dcl 1-8
sin_fun                                internal static bit(9)                   initial dcl 1-8
sind_fun                               internal static bit(9)                   initial dcl 1-8
skip_format                            internal static bit(9)                   initial dcl 1-8
slash                                  internal static bit(9)                   initial dcl 4-3
sqrt_fun                               internal static bit(9)                   initial dcl 1-8
stack_ptr                              internal static bit(9)                   initial dcl 1-8
stackbaseptr_fun                       internal static bit(9)                   initial dcl 1-8
stackframeptr_fun                      internal static bit(9)                   initial dcl 1-8
stacq_fun                              internal static bit(9)                   initial dcl 1-8
std_arg_list                           internal static bit(9)                   initial dcl 1-8
std_call                               internal static bit(9)                   initial dcl 1-8
std_entry                              internal static bit(9)                   initial dcl 1-8
std_return                             internal static bit(9)                   initial dcl 1-8
stop                                   internal static bit(9)                   initial dcl 1-8
stream_prep                            internal static bit(9)                   initial dcl 1-8
structure_dtype                        internal static fixed bin(17,0)          initial dcl 11-25
tan_fun                                internal static bit(9)                   initial dcl 1-8
tand_fun                               internal static bit(9)                   initial dcl 1-8
terminate_trans                        internal static bit(9)                   initial dcl 1-8
token_to_binary                 000000 constant        entry                    external dcl 5-459
translate_fun                          internal static bit(9)                   initial dcl 1-8
trunc_fun                              internal static bit(9)                   initial dcl 1-8
unlock_file                            internal static bit(9)                   initial dcl 1-8
unpack                                 internal static bit(9)                   initial dcl 1-8
varying_bit_dtype                      internal static fixed bin(17,0)          initial dcl 11-25
varying_char_dtype                     internal static fixed bin(17,0)          initial dcl 11-25
vclock_fun                             internal static bit(9)                   initial dcl 1-8
verify_fun                             internal static bit(9)                   initial dcl 1-8
verify_ltrim_fun                       internal static bit(9)                   initial dcl 1-8
verify_rev_fun                         internal static bit(9)                   initial dcl 1-8
verify_rtrim_fun                       internal static bit(9)                   initial dcl 1-8
word_to_mod2                           internal static bit(9)                   initial dcl 1-8
word_to_mod4                           internal static bit(9)                   initial dcl 1-8
word_to_mod8                           internal static bit(9)                   initial dcl 1-8
wordno_fun                             internal static bit(9)                   initial dcl 1-8
write_file                             internal static bit(9)                   initial dcl 1-8
x_format                               internal static bit(9)                   initial dcl 1-8
xor_bits                               internal static bit(9)                   initial dcl 1-8

NAMES DECLARED BY EXPLICIT CONTEXT.
concatenate                     000424 constant        label                    dcl 102 ref 58
evaluate                        000017 constant        entry                    external dcl 32
make                            000034 constant        label                    dcl 62 ref 68 70 72 78 102 107 111

NAMES DECLARED BY CONTEXT OR IMPLICATION.
addr                                                   builtin function         ref 80 80 80 80 82 82 82 82 94 95 97 97 97 97 97 99
                                                                                  99
verify                                                 builtin function         ref 94

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       610         630     532         620
Length      1232     532        20         365      55           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
evaluate                            152 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
evaluate                 000100 q                           evaluate
                         000102 i                           evaluate
                         000103 prec                        evaluate
                         000104 prec2                       evaluate
                         000105 prec3                       evaluate
                         000106 v2                          evaluate
                         000116 v3                          evaluate
                         000126 v                           evaluate

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_char_temp     call_ext_out_desc   call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
assign_                       create_operator               create_token                  create_token$protected

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     32 000012        58 000024        60 000032        62 000034        63 000052        64 000057        65 000062
     68 000064        70 000077        72 000101        75 000110        76 000113        78 000116        80 000124
     82 000160        85 000216        88 000231        90 000240        94 000244        95 000256        97 000272
     99 000347       102 000424       105 000437       107 000446       111 000454       114 000465


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
