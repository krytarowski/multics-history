	COMPILATION LISTING OF SEGMENT io_semantics
	Compiled by: Multics PL/I Compiler, Release 33a, of May 30, 1990
	Compiled at: ACTC Technologies Inc.          
	Compiled on: 10/17/90  0943.5 mdt Wed
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        6*        *                                                         *
        7*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        8*        *                                                         *
        9*        * Copyright (c) 1972 by Massachusetts Institute of        *
       10*        * Technology and Honeywell Information Systems, Inc.      *
       11*        *                                                         *
       12*        *********************************************************** */
       13 
       14 
       15 
       16 
       17 /****^  HISTORY COMMENTS:
       18*  1) change(87-06-26,Huen), approve(87-06-26,MCR7712), audit(87-12-01,RWaters),
       19*     install(87-12-01,MR12.2-1005):
       20*     Fix bug2164
       21*  2) change(90-08-24,Huen), approve(90-08-24,MCR8187),
       22*     audit(90-09-07,Zimmerman), install(90-10-17,MR12.4-1046):
       23*     pl1_2224: Fix the PL1 compiler use of variables that are targets of "read
       24*     into" statements.
       25*                                                   END HISTORY COMMENTS */
       26 
       27 
       28 io_semantics:proc(bb,ss,tt) ;
       29 	dcl    (bb,ss,tt) ptr;
       30 
       31 	/* Written by P. A. Belmont on 9-29-71
       32*	   called by expression_semantics "on the way down"
       33*	   upon encountering any of the  "outer" io op_codes:
       34*	   get_file,get_string,put_file,put_string,open_file,
       35*	   xxx_file for various xxx's
       36*
       37*	   or "inner op_codes:
       38*	   get_list_trans,put_list_trans,get_edit_trans,
       39*	   put_edit_trans,get_data_trans,put_data_trans.
       40*	*/
       41 
       42 
       43 	/* updated 12-17-74 to make not_bytebuffer in psr.job smarter and to add bit_string bit */
       44 
       45 	/* updated 7-31-74 to add propagate_bit at line 913,
       46*		abnormal_return for keyto (release-2,action(19),keyto_join:  */
       47 
       48 	/* updated 12-22-77 by P. Krupp to  fix bugs 1657, 1658, 1680          */
       49 	/* Modified 780616 by PG for unsigned */
       50 	/* Modified 790110 by RAB to fix 1813 (referenced but not set not diag for file vars) */
       51           /* Modified 4-10-87 by RW to fix bug 2164 */
       52 
       53 dcl type bit (36);
       54 dcl opcode_temp bit(9) aligned;
       55 dcl (a,b,cs,ns,vs,q,r,s,t,tp,tp1,dp) ptr;
       56 dcl (locate_var,locate_set,locate_size) ptr;
       57 dcl transop bit(9) aligned;
       58 dcl convtype bit(36) aligned;
       59 dcl (i,n,m,PS_offset,lal) fixed bin(15);
       60 dcl no_byte bit(1) aligned;
       61 dcl cbs fixed bin(24);
       62 dcl strlen fixed bin(31);
       63 dcl assign_list(21) ptr;
       64 dcl end_of_join ptr;
       65 
       66 /* builtins */
       67 
       68 dcl (addr, binary, bit, length, mod, null, substr, string) builtin;
       69 
       70 dcl job bit(36) aligned;
       71 dcl job_additions bit(36) aligned;
       72 dcl bb36 bit(36) aligned based;
       73 dcl constsize fixed bin(35);
       74 dcl stringdesc bit(36) aligned;
       75 
       76 dcl fab2mod2(7) ptr aligned;
       77 dcl fab2template_b bit(504) aligned based(addr(fab2mod2));
       78 dcl 1 fab2template based(addr(fab2mod2)),
       79 	2 bits bit(36) aligned,
       80 	2 name char(32) aligned,
       81 	2 ( ls,ps,bs ) fixed bin(15),
       82 	2 title168p	ptr;
       83 
       84 dcl pl1_stat_$generate_symtab ext bit(1);
       85 dcl pl1_stat_$check_ansi ext bit(1) aligned;
       86 
       87 dcl rand_index(35) fixed bin(15) static internal init(2,2,1,4,4, 4,1,1,1,1, 3,1,1,1,1,
       88 					    1,1,1,1,4, 3,3,3,1,1, 1,1,1,2,0,
       89 					    0,0,0,5,0);
       90 
       91 
       92 /* program */
       93 
       94 	t=tt;
       95 	if t->operator.op_code >= terminate_trans then goto main_io_operator;
       96 
       97 transmission_operators:
       98 
       99 	transop=t->operator.op_code;
      100 	tp=t->operator.operand(2);
      101 
      102 	if tp->node.type=operator_node
      103 	then if tp->op_code=join then
      104 		do;
      105 		/* builtin, processing a pseudovariable target
      106*		   of get-list or get-edit, will replace the PV
      107*		   with join(assign(temp,PV),temp,assign(PV,temp)) in the cases
      108*		   onsource, onchar, pageno.  This is because
      109*		   these PVs are implemented as calls instead of
      110*		   as storage references.  io_semantics must
      111*		   now rearange things.
      112*
      113*		   builtin must have completely processed its things
      114*		   and operator_semantics must copy the tree ("tt")
      115*		   argument back into the tree-proper. */
      116 
      117 		tt=tp;			/* replace GET with JOIN */
      118 		t->operand(2)=tp->operand(2);	/* GET's target is now the "temp"  */
      119 		tp->operand(2)=t;		/*  yielding JOIN(ASSIGN(temp,PV),GET(-,temp),ASSIGN(PV,temp)) */
      120 		tp=t->operand(2);		/* tp points to the target of GET */
      121 		end;
      122 
      123 	if tp->node.type=token_node then
      124 		do;
      125 		if ^(transop=put_list_trans|transop=put_edit_trans) then goto err471;
      126 		if (tp -> token.type & is_constant) ^= is_constant
      127 		then go to err472;
      128 
      129 		tp, t -> operator.operand (2) = convert (tp, decoded_type (binary (tp -> token.type, 9)));
      130 		end;
      131 
      132 	if tp->node.type=operator_node then
      133 		do;
      134 		if ^(transop=put_list_trans|transop=put_edit_trans) then
      135 			goto err471;
      136 		tp=tp->operator.operand(1);
      137 		end;
      138 
      139 	if tp->node.type=label_node
      140 		then convtype=local_label_var_type;
      141 	else if tp->reference.symbol->node.type=label_node
      142 		then convtype=local_label_var_type;
      143 	else if tp->reference.symbol->symbol.constant
      144 	     & (tp->reference.symbol->symbol.entry | tp->reference.symbol->symbol.format)
      145 		then convtype=substr(string(tp->reference.symbol->symbol.attributes),1,36);
      146 	else convtype=(36)"0"b;
      147 
      148 	if convtype^=(36)"0"b
      149 		then if transop=put_list_trans
      150 			then do;
      151 			t->operator.operand(2)=create_operator(assign,2);
      152 			t->operator.operand(2)->operator.operand(2)=tp;
      153 			t->operator.operand(2)->operator.operand(1),tp=declare_temporary(convtype,0,0,null);
      154 			t->operator.operand(2)->operator.processed="1"b;
      155 			end;
      156 			else call semantic_translator$abort(358,tp);
      157 
      158 	if tp->reference.symbol->symbol.picture
      159 	then do;
      160 		tp->reference.symbol->symbol.general->reference.symbol->symbol.allocate = "1"b;
      161 
      162 		if transop=put_list_trans
      163 		then do;
      164 			t->operator.op_code = put_field;
      165 			t->operand(1) = declare_constant$integer((tp->reference.c_length));
      166 		     end;
      167 	     end;
      168 
      169 	type = substr (string (tp -> reference.symbol -> symbol.attributes), 1, 36);
      170 
      171 	if (type & computational_mask) = ""b		/* is the symbol computational? */
      172 	then if (transop = put_data_trans) | (transop = put_list_trans)	/* Not computational, is this a put? */
      173 	     then do;				/* yes. */
      174 			t->operand(1) = declare_descriptor(bb,ss,(tp->reference.symbol),
      175 					(tp->reference.qualifier),"0"b);
      176 			if pl1_stat_$check_ansi
      177 			then do;
      178 				if t->operand(2)->node.type = operator_node
      179 				then	n = 352;
      180 				else	n = 351;
      181 			 	call semantic_translator$error(n,tp);
      182 			end;
      183 		end;
      184 	     else go to err472;
      185 
      186 	if transop=put_data_trans then
      187 		do;
      188 		t->operator.operand(1)=tp->reference.subscript_list;
      189 		tp=tp->reference.symbol;
      190 			do while(tp^=null);
      191 			tp->symbol.put_in_symtab="1"b;
      192 			tp=tp->symbol.father;
      193 			end;
      194 		return;
      195 		end;
      196 
      197 	if (type & arithmetic_mask) ^= ""b		/* arithmetic? */
      198 	then	if transop=put_list_trans
      199 		then do;
      200 			t->operator.op_code=put_field;
      201 			t->operator.operand(2)=convert$from_builtin((t->operand(2)),char_type);
      202 			t->operand(1)=declare_constant$integer((t->operand(2)->operand(1)->reference.c_length));
      203 			end;
      204 		else t->operand(1)=declare_descriptor(bb,ss,(tp->reference.symbol),(tp->reference.qualifier),"0"b);
      205 
      206 	if (type & string_mask) ^= ""b		/* string? */
      207 			/* NOTE: we do NOT make up a descriptor
      208*				in the case of a pictured value.
      209*				The lack of one tips off the code generator. */
      210 
      211 	then do;		/* string case - must manufacture a descriptor */
      212 			/* Note: we must here handle a substr as a
      213*			   storage reference (i.e., the symbol of the
      214*			   whole string but a reference with a possibly
      215*			   shorter length).  declare_descriptor would
      216*			   return a descriptor for the whole string;  the
      217*			   situation is _n_o_t analogous to argument passing
      218*			   since in that case a temporary is made.  */
      219 
      220 		if tp -> reference.symbol -> symbol.bit
      221 		then if tp -> reference.varying_ref
      222 		     then stringdesc = "1010100"b;	/* descriptor type 20 */
      223 		     else stringdesc = "1010011"b;	/* descriptor type 19 */
      224 		else if tp -> reference.varying_ref
      225 		     then stringdesc = "1010110"b;	/* descriptor type 22 */
      226 		     else stringdesc = "1010101"b;	/* descriptor type 21 */
      227 
      228 		substr(stringdesc,8,1)=tp->reference.symbol->symbol.packed;
      229 		q=null;
      230 
      231 		if tp->reference.varying_ref then
      232 			do;
      233 			s=tp->reference.symbol;
      234 			if s->symbol.dcl_size=null then
      235 			constsize=s->symbol.c_dcl_size;
      236 			else	do;
      237 				q=copy_expression(s->symbol.dcl_size);
      238 				if s->symbol.refer_extents then
      239 				call refer_extent(q,(tp->reference.qualifier));
      240 				string(context)="0"b;
      241 				q = expression_semantics(bb,ss,q,context);
      242 				end;
      243 			end;
      244 
      245 		else	do;	/* non varying */
      246 			if tp->reference.length=null then constsize=tp->reference.c_length;
      247 			else	q=copy_expression(tp->reference.length);
      248 			end;
      249 
      250 		if q=null then
      251 			do;
      252 			substr(stringdesc,13,24)=substr(addr(constsize)->bb36,13,24);
      253 			t->operator.operand(1)=declare_constant(stringdesc,arg_desc_type,length(stringdesc),0);
      254 			end;
      255 		else	do;
      256 			dp,t->operator.operand(1)=create_operator(make_desc,3);
      257 			dp->operator.operand(1)=declare_temporary(arg_desc_type,length(stringdesc),0,null);
      258 			dp->operator.operand(2)=declare_constant(stringdesc,arg_desc_type,length(stringdesc),0);
      259 			dp->operator.operand(3)=q;
      260 			end;
      261 		end;
      262 
      263 	if transop<=get_edit_trans then
      264 		do;
      265 		tp=tp->reference.symbol;
      266 		call propagate_bit(tp,set_bit);
      267 		call propagate_bit(tp,passed_as_arg_bit);
      268 		end;
      269 
      270 	return;
      271 
      272 err471:
      273 	n=471;
      274 	goto  abort_trans;
      275 
      276 err472:
      277 	n=472;
      278 
      279 abort_trans:
      280 	if t->operator.operand(2)->node.type=operator_node then n=n+3;
      281 	call semantic_translator$error(n,tp);
      282 	return;
      283 
      284 main_io_operator:
      285 	vs,cs=ss;
      286 	if ss->statement.labels=null then goto keep_statement;
      287 	cs=create_statement((ss->statement.statement_type),ss,null,(ss->statement.prefix));
      288 	cs->statement.root=ss->statement.root;
      289 	ss->statement.root=null;
      290 	ss->statement.statement_type=null_statement;
      291 	return;
      292 
      293 keep_statement:
      294 	lal=0;
      295 	end_of_join=null;
      296 	ns=cs->statement.next;
      297 	b=bb;
      298 	if b->block.plio_ps=null then
      299 		do;
      300 		call io_semantics_util$make_ps(b);
      301 		b -> block.why_nonquick.io_statements = "1"b;
      302 		b -> block.no_stack = "0"b;
      303 		end;
      304 
      305 
      306 		/* Map of PS for the curious:
      307*
      308*		PS|00 Stack_Frame_p
      309*		PS|02 Symbol_Table_Top_p
      310*		PS|04 Symbol_Table_Block_p
      311*		PS|06 Format_Area_p
      312*		PS|08 Subscript_List_p
      313*		PS|10 Abnormal_Return_Label
      314*		PS|16 Source_p	(addr(file) or addr(FFSB) or addr(ref))
      315*		PS|18 Special_List_p	/Set_P_p
      316*		PS|20 Copy_File_p
      317*		PS|21			/Variable_Bit_Length
      318*		PS|22 Job
      319*		PS|23 Number
      320*		PS|24 Value_p		/Variable_p
      321*		PS|26 Descriptor
      322*		PS|27 ..........
      323*		PS|28 Offset
      324*		PS|29 Prep_sw		/Locking_sw
      325*		PS|30 New_Format_sw
      326*		.....
      327*		PS|48 Key (char(256) varying  )
      328*							*/
      329 	m=t->operator.number;
      330 		t->operator.operand(m)=convert((t->operator.operand(m)),bit_type);
      331 		job=t->operator.operand(m)->reference.symbol->symbol.initial->bb36;
      332 		job_additions="0"b;
      333 		/* See: io_statement_parse;  the options etc are recorded as a bit 36. */
      334 	m=m-1;
      335 
      336 			/* Now handle the special cases and then call expression_semantics
      337*			   for all the ordinary operands. Check that all items but
      338*			   into and from are scalar. */
      339 
      340 	if substr(job,4,3)^="0"b then				/* data,edit,list */
      341 		do;
      342 		call io_data_list_semantics(b,cs,(t->operator.operand(4)));
      343 		if t->operator.operand(4)->operator.op_code=get_data_trans then
      344 			do;
      345 			if lal<20 then lal=lal+1;
      346 			else goto err467;
      347 			assign_list(lal)=t->operator.operand(4);
      348 			end;
      349 		t->operator.operand(4)=null;
      350 		goto loop1;
      351 		end;
      352 
      353 	if substr(job,20,1) then goto locate_prelim;		/* locate */
      354 
      355 loop1:
      356 	do i=1 to m;
      357 	if t->operator.operand(i)=null then goto end_loop1;
      358 	string(context)="0"b;
      359 
      360 	if i=1 then if (job & "000000000000000000000000101"b)^="0"b
      361 		then def_context.evaluate_offset="1"b;
      362 			/* force evaluation of offset for aggregate FROM,INTO */
      363 
      364 	t->operand(i) = expression_semantics(b,cs,(t->operand(i)),context);
      365 	if t -> operand (i) -> node.type = label_node
      366 	     then call semantic_translator$abort(78,null); /* illegal label constant */
      367 	if t -> operand(i) -> node.type = reference_node
      368 	then if t -> operand (i) -> reference.symbol -> node.type = label_node
      369 	     then call semantic_translator$abort(78,null); /* illegal label constant */
      370 	if i=1 then	if (job & "00000000000000000000000010101"b) ^="0"b	/* into,from,(ref) */
      371 			then goto end_loop1;
      372 	if def_context.aggregate then goto err62;	/* scalar */
      373 end_loop1:
      374 	end;
      375 /* 
      376*
      377*
      378*
      379*
      380*
      381*		JOB BITS
      382*
      383*	INPUT(PARSE)	AS ALTERED(HEREIN)		TO RUNTIME
      384*
      385*	1  file
      386*	2  string option
      387*	3 		varying
      388*	4  data
      389*	5  edit
      390*	6  list
      391*	7  get
      392*	8  put
      393*	9  page
      394*	10 line
      395*	11 skip
      396*	12 copy-file
      397*	13 p1p2
      398*	14 bit_string
      399*	15 unlock
      400*	16 read
      401*	17 write
      402*	18 rewrite
      403*	19 delete
      404*	20 locate
      405*	21 key
      406*	22 keyto
      407*	23 keyfrom
      408*	24 set		set
      409*	25 into
      410*	26 ignore
      411*	27 from
      412*	28					rel-6
      413*	29					rel-5	NB: RELEASE-NUMBER 6-bits
      414*	30					rel-4	    copied and reset to 0 by RECIO
      415*	31					rel-3
      416*	32					rel-2
      417*	33					rel-1
      418*	34 open		not-byte-buffer		not-byte-buffer
      419*	35
      420*	36		packedptr			packedptr
      421*
      422*	*/
      423 
      424 loop2:
      425 	do i=1 to 29,
      426 		34;	/* OPEN,TITLE,PSIZE,LSIZE */
      427 	if substr(job,i,1) then
      428 		do;
      429 		tp=t->operator.operand(rand_index(i));
      430 		goto action(i);
      431 		end;
      432 action(3):					/* varying */
      433 action(6):					/* list */
      434 action(9):					/* page */
      435 action(13):					/* p1p2 */
      436 
      437 end_loop2:
      438 	end;
      439 /*  */
      440 exit:
      441 	if end_of_join ^=null then
      442 		do;
      443 		if job_additions^="0"b then job=job|job_additions;
      444 		substr(job,28,6)="000010"b;	/* release 2 */
      445 
      446 				/* release-2 adds: abnormal-return after KEYTO.  See comment
      447*					at keyto_join:  
      448*				   release-1 adds: char(256) var KEYs
      449*						not_byte_buffer switch  */
      450 		end_of_join->operator.operand(1)=declare_constant$bit(job);	/* for record_io, stream_prep operators */
      451 					/* the bit36 "job" may have been changed  */
      452 		lal=lal+1;
      453 		assign_list(lal)=end_of_join;
      454 		end;
      455 	vs=create_statement(assignment_statement,(cs->statement.back),null,(cs->statement.prefix));
      456 	vs->statement.generated,vs->statement.processed="1"b;
      457 	if lal=1 then vs->statement.root=assign_list(1);
      458 	else	do;
      459 		vs->statement.root,tp=create_operator(join,lal);
      460 			do i=1 to lal;
      461 			tp->operator.operand(i)=assign_list(i);
      462 			end;
      463 		end;
      464 
      465 
      466 	/* original operator is nulled out */
      467 	do lal=1 to m+1;
      468 	t->operator.operand(lal)=null;
      469 	end;
      470 
      471 
      472 	return;
      473 err62:
      474 	n=62;
      475 	goto abort_null;
      476 
      477 err114:
      478 	n=114;
      479 	goto abort_tp;
      480 
      481 err115:
      482 	n=115;
      483 	goto abort_tp;
      484 
      485 err468:
      486 	n=468;
      487 	tp=q;
      488 	goto abort_tp;
      489 
      490 err461:
      491 	n=461;
      492 	goto abort_tp;
      493 
      494 err462:
      495 	n=462;
      496 	goto abort_tp;
      497 
      498 err463:
      499 	n=463;
      500 	goto abort_tp;
      501 
      502 err464:
      503 	n=464;
      504 	goto abort_tp;
      505 
      506 err465:
      507 	n=465;
      508 	goto abort_tp;
      509 
      510 err466:
      511 	n=466;
      512 	goto abort_null;
      513 
      514 err467:
      515 	n=467;
      516 	goto abort_null;
      517 
      518 
      519 abort_null:
      520 	tp=null;
      521 abort_tp:
      522 	call semantic_translator$error(n,tp);
      523 	if n=467 then return;
      524 	goto end_loop2;
      525 
      526 
      527 /*  */
      528 
      529 action(12):								/* copy_file */
      530 	PS_offset=ps_copy;
      531 	goto test_file;
      532 action(1):								/* file */
      533 	PS_offset=ps_source;
      534 test_file:
      535 	if ^tp->reference.symbol->symbol.file then goto err462;
      536 	goto set_addr;
      537 
      538 action(11):								/* skip */
      539 	if tp=null then tp=declare_constant$integer(1);
      540 action(10):								/* line */
      541 action(26):								/* ignore */
      542 	call assign_ps(tp,ps_number,"int",null);
      543 	goto end_loop2;
      544 
      545 action(21):								/* key */
      546 action(23):								/* keyfrom */
      547 
      548 	r=b->block.plio_ps->list.element(50);
      549 	if r=null then r=io_semantics_util$keys(b);
      550 	if tp->node.type=token_node then tp=convert(tp,char_type);
      551 	call assign_ps(tp,49,"aok",r);
      552 				/* c_offset must address the first data-word of the
      553*				   char256varying KEY; not the length-word !!   */
      554 	goto end_loop2;
      555 
      556 action(24):								/* set */
      557 	PS_offset=ps_special_list;
      558 	if substr(job,20,1)	/* locate */
      559 	then	tp=locate_set;
      560 	if ^tp->reference.symbol->symbol.ptr then goto err463;
      561 	call propagate_bit((tp->reference.symbol),set_bit);
      562 	if tp->reference.symbol->symbol.unaligned then substr(job_additions,36,1)="1"b;
      563 	goto set_addr;
      564 
      565 
      566 
      567 action(29):								/* (ref) for lock,unlock */
      568 
      569 	n=476;	/* (REF) not implemented now */
      570 		/* when it is, then check for data type:LOCK */
      571 	goto abort_tp;
      572 
      573 action(25):								/* into */
      574 	call propagate_bit((tp->reference.symbol),set_bit);
      575 	/* TR13134: Padded ref. bug occurs at read into statement */
      576 	call propagate_bit((tp->reference.symbol),passed_as_arg_bit);
      577 	/* if i=29 then goto set_variable_p; */
      578 action(27):								/* from */
      579 
      580 
      581 	/* generate    BITSIZE   and   BYTE-ALIGNMENT   */
      582 
      583 
      584 	no_byte="0"b;	/* we are prepared to find a byte-aligned, byte-length buffer */
      585 
      586 	s=tp->reference.symbol;
      587 	if s->symbol.dimensioned & ^tp->reference.array_ref then
      588 		do;
      589 				/* array-element case is special */
      590 		a=s->symbol.array;
      591 		q=a->array.element_size_bits;
      592 		cbs=a->array.c_element_size_bits;
      593 		if a->array.element_boundary=bit_ then no_byte="1"b;		/* BIT boundary */
      594 		end;
      595 
      596 	else	do;
      597                     if s -> node.type = symbol_node
      598                     then do;
      599 			q=s->symbol.bit_size;
      600 			cbs=s->symbol.c_bit_size;
      601                          end;
      602                     else do;            /* bug2164: s is sometimes a reference node */
      603       			q = s -> reference.symbol -> symbol.bit_size;
      604  			cbs = s -> reference.symbol -> symbol.c_bit_size;
      605 		     end;
      606 		if s->symbol.boundary=bit_ then no_byte="1"b;	/* aligned on BIT boundary */
      607 		end;
      608 
      609 
      610 	if s->symbol.bit then substr(job_additions,14,1)="1"b;	/*bit info needed for stringvalue */
      611 
      612 
      613 	if q=null then
      614 		do;
      615 		if mod(cbs,9)^=0 then no_byte="1"b;
      616 		 q=declare_constant$integer((cbs));
      617 		end;
      618 	else	do;
      619 		q=copy_expression((q));
      620 		if ^ byte_buffer(s)
      621 		     then no_byte = "1"b;
      622 		if s->symbol.refer_extents then
      623 		call refer_extent(q,(tp->reference.qualifier));
      624 		q = expression_semantics(b,cs,q,"0"b);
      625 		end;
      626 
      627 
      628 
      629 	if s->symbol.varying then
      630 		do;
      631 		 if tp->reference.array_ref then substr(job_additions,35,1)="1"b;	/* varying_array */
      632 		 substr(job_additions,3,1)="1"b;				/* varying */
      633 		 no_byte="0"b;		/* padding always exists in a varying string */
      634 		end;
      635 
      636 			/* NB: unless the file has env(stringvalue),
      637*			   the runtime will do addrel(p,-1) on variable_p
      638*			   if work.varying (3) is set; and will add 36 to
      639*			   variable_bitlen if work.varying is set UNLESS
      640*			   work.varying_array (35) is also set.  */
      641 
      642 	if no_byte then substr(job_additions,34,1)="1"b;	/* probable non-byte-buffer */
      643 	call assign_ps(q,ps_var_bitlen,"int",null);		/* variable_bitlen */
      644 
      645 set_variable_p:
      646 	PS_offset=ps_var_p;
      647 	goto set_addr;			/* variable_p */
      648 
      649 action(22):								/* keyto */
      650 	s=tp->reference.symbol;
      651 	if ^s->symbol.char then goto err464;
      652 	call propagate_bit(s,set_bit);
      653 
      654 	vs=create_statement(assignment_statement,cs,null,(cs->statement.prefix));
      655 	vs->statement.generated,vs->statement.processed="1"b;
      656 	q=create_operator(assign,2);
      657 	q->operator.operand(1)=tp;
      658 
      659 
      660 	r=b->block.plio_ps->list.element(50);
      661 	if r=null then r=io_semantics_util$keys(b);
      662 	r=copy_expression((r));
      663 
      664 	r->reference.c_length=0;	/* rule for varying string on RHS */
      665 	q->operator.operand(2)=r;
      666 	vs->statement.root=operator_semantics(b,cs,q,"0"b);
      667 
      668 		/* i.e., key=PS|48->defined,aligned,char(256) varying */
      669 	goto end_loop2;
      670 
      671 
      672 
      673 action(28):								/* else for lock */
      674 	t->operator.operand(1)=declare_temporary(bit_type,36,0,null);
      675 		/* code generator will call lock and then
      676*		   assign PS|31 to this temp. */
      677 
      678 	goto end_loop2;
      679 
      680 action(20):								/* locate */
      681 	call alloc_semantics$init_only(locate_set,cs,(locate_var->reference.symbol));
      682 
      683 
      684 action(14):								/* lock */
      685 action(15):								/* unlock */
      686 action(16):								/* read */
      687 action(17):								/* write */
      688 action(18):								/* rewrite */
      689 action(19):								/* delete */
      690 	if ss->statement.root=tt then
      691 		do;
      692 		ss->statement.statement_type=null_statement;
      693 		ss->statement.root=null;
      694 		end;
      695 			/* takes care of all RECIO except lock_file with ELSE */
      696 
      697 	if  substr(job,22,1) /* KEYTO */ then
      698 		do;
      699 		opcode_temp=record_io;
      700 		goto keyto_join;
      701 		end;
      702 
      703 	end_of_join=create_operator(record_io,1);
      704 
      705 	goto end_loop2;
      706 
      707 action(2):								/* string option */
      708 	r=tp;
      709 	if substr(job,7,1) then
      710 		do;	/* get */
      711 		r,tp=convert(tp,char_type);
      712 		if tp->node.type=operator_node then r=tp->operator.operand(1);
      713 		s=r->reference.symbol;
      714 		end;
      715 	else	do;	/* put */
      716 		if r->node.type ^= reference_node then goto err466;
      717 		s=r->reference.symbol;
      718 		if ^s->symbol.char then if ^s->symbol.picture then goto err466;
      719 		call propagate_bit(s,set_bit);
      720 		end;
      721 
      722 	if b->block.plio_ffsb=null then call io_semantics_util$make_ffsb(b);
      723 
      724 	if r->reference.varying_ref then
      725 		do;
      726 		substr(job_additions,3,1)="1"b;	/* set the varying bit */
      727 		q=s->symbol.dcl_size;
      728 		if q=null then q=declare_constant$integer((s->symbol.c_dcl_size));
      729 		else	do;
      730 			q=copy_expression((q));
      731 			if s->symbol.refer_extents then call refer_extent(q,(r->reference.qualifier));
      732 			q = expression_semantics(b,cs,q,"0"b);
      733 			end;
      734 		end;
      735 	else	do;
      736 		q=r->reference.length;
      737 		if q=null then q=declare_constant$integer((r->reference.c_length));
      738 		else q=copy_expression((q));
      739 		end;
      740 
      741 	call assign_ps(q,ps_number,"aok",null);	/* ps|ps_number = (max)length */
      742 	r=tp;
      743 	tp=b->block.plio_ffsb->symbol.reference;
      744 	call assign_ps(r,6,"adr",tp);	/* ffsb|6 = addr(string expression)  */
      745 	PS_offset=ps_source;
      746 	goto set_addr;		/* ps|16 = addr(ffsb)  */
      747 
      748 action(4):								/* data */
      749 	pl1_stat_$generate_symtab="1"b;	/* generate SOME of the s.t.  */
      750 	if substr(job,7,1)
      751 	     then go to end_loop2;	/* get */
      752 
      753 	if b->block.plio_ssl=null then call io_semantics_util$make_ssl(b);
      754 
      755 	goto end_loop2;
      756 
      757 
      758 
      759 action(5):								/* edit */
      760 
      761 	if b->block.plio_fa=null then call io_semantics_util$make_fa(b);
      762 	goto end_loop2;
      763 
      764 action(7):								/* get */
      765 action(8):								/* put */
      766 
      767 	vs=create_statement((cs->statement.statement_type),(ns->statement.back),null,(cs->statement.prefix));
      768 	vs->statement.generated,vs->statement.processed="1"b;
      769 
      770 	cs->statement.statement_type=null_statement;
      771 	cs->statement.root=null;	/* place holder only */
      772 
      773 	vs->statement.root=t;	/* will generate the terminate call */
      774 	t->operator.op_code=terminate_trans;
      775 	opcode_temp=stream_prep;
      776 
      777 keyto_join:
      778 	/* of all the recio statements, read with keyto needs a null-statement
      779*	   for abnormal return since the assignment to the keyto variable
      780*	   follows the recio operator.  Changes must also be made in the CG
      781*	   and in pl1_operators, not to mention in PLIO.  version-2. (7-74)  */
      782 
      783 
      784 	vs=create_statement(null_statement,(ns->statement.back),null,(cs->statement.prefix));
      785 				/* creates a null-statement for abnormal returns;
      786*				   principally for the get and put statements
      787*				   but also (7-74) for recio with keyto  */
      788 	vs->statement.generated,vs->statement.processed="1"b;
      789 	r=create_label(b,null,by_compiler);
      790 	r->label.statement=vs;
      791 	vs->statement.labels=create_list(2);
      792 	vs->statement.labels->list.element(2)=r;	/* return label */
      793 
      794 	end_of_join=create_operator(opcode_temp,2);
      795 	end_of_join->operator.operand(2)=r;	/* ab ret label */
      796 	goto end_loop2;
      797 
      798 action(34):								/* OPEN */
      799 	if b->block.plio_fab2=null then call io_semantics_util$make_fab2(b);
      800 	r=b->block.plio_fab2->symbol.reference;
      801 
      802 	if tp->node.type=token_node then fab2template.bits=bit(substr(tp->token.string,1,36),36);
      803 	else fab2template.bits=tp->reference.symbol->symbol.initial->bb36;
      804 	fab2template.bits=fab2template.bits | "001"b;	/* signifying the title168 changes */
      805 	fab2template.name=" ";
      806 	fab2template.ls,
      807 	fab2template.ps,
      808 	fab2template.bs=0;
      809 	fab2template.title168p = null;
      810 
      811 	tp=t->operator.operand(4);	/* pagesize */
      812 	if tp^=null then call assign_ps(tp,10,"int",r);
      813 
      814 	tp=t->operator.operand(1);	/* linesize */
      815 	if tp^=null then call assign_ps(tp,9,"int",r);
      816 
      817 	tp=t->operator.operand(3);	/* title */
      818 	if tp^=null then
      819 		do;
      820 		call assign_ps(tp,1,"c32",r);
      821 		if b->block.plio_ffsb=null then call io_semantics_util$make_ffsb(b);
      822 					/* we'll use fake-fsb to store title168 */
      823 		tp1=b->block.plio_ffsb->symbol.reference;
      824 		call assign_ps(tp1,12,"adr",r);	/* fab2.title168p=addr(ffsb) */
      825 		call assign_ps(share_expression(tp), 0,"ttl",tp1);	/* ffsb=char(title_exp,168) */
      826 		end;
      827 
      828 			/* the mechanism "convert$to_target" might
      829*			   have been used, and used to be used, to
      830*			   handle constant page_size,line_size, and
      831*			   title options:  but (at least for title,
      832*			   i.e., for strings) this procedure was capable
      833*			   of returning an assignment operator
      834*			   rather than a reference to a constant: thus
      835*			   I could not rely on its use as a mechanism
      836*			   for producing constant components for FAB2.
      837*
      838*			   [I had used: fab2template.X=convert$to_target(
      839*			    tp,declare_temporary(XX,...)->reference.symbol->
      840*			    symbol.initial->based.XX  ]
      841*							*/
      842 	q=declare_constant$bit((fab2template_b));
      843 	call assign_ps(q,0,"aok",r);
      844 	if lal>1 then
      845 		do;
      846 		q=assign_list(1);
      847 		assign_list(1)=assign_list(lal);
      848 		assign_list(lal)=q;		/* assign whole fab2 template
      849*					   before filling in the individual
      850*					   variable fields */
      851 		end;
      852 	call assign_ps(r,ps_special_list,"adr",null);	/* PS|special_list_p=addr(fab2) */
      853 	goto exit;
      854 
      855 		/* Code Generator generates calls to runtime routines as follows:
      856*		a) record_io:	call plio2_recio_(psp)
      857*		b) open_file:	call plio2_$open_explicit_(psp)
      858*		c) close_file:	call plio2_$close1_(psp)
      859*		d) stream_prep:	call plio2_$get_prep_(psp)
      860*				call plio2_$put_prep_(psp)
      861*		e)terminate_trans:	if GET statement then call plio2_$get_terminate_(psp)
      862*				if PUT statement then call plio2_$put_terminate_(psp)
      863*		f) put_data_trans:
      864*		g) put_edit_trans:
      865*		h) put_list_trans:
      866*		i) get_edit_trans:
      867*		j) get_list_trans:
      868*		*/
      869 /*  */
      870 set_addr:
      871 	call assign_ps(tp,PS_offset,"adr",null);
      872 	goto end_loop2;
      873 
      874 locate_prelim:
      875 	tp=t->operator.operand(4);
      876 	if tp->node.type ^= token_node then goto err461;
      877 	if tp->token.type ^= identifier then goto err461;
      878 
      879 	if substr(job,24,1) then
      880 		do;
      881 		tp=create_reference(tp);
      882 		tp->reference.qualifier=t->operator.operand(1);
      883 		t->operator.operand(1)=null;
      884 		end;
      885 	else	substr(job,24,1)="1"b;
      886 		/* we place this directly in job rather than in job_additions, as it will be tested */
      887 
      888 	string(context)="0"b;
      889 	tp = expression_semantics(b,cs,tp,context);
      890 	s=tp->reference.symbol;
      891 	if s->symbol.controlled then goto err114;
      892 	if ^s->symbol.based then goto err115;
      893 	if s->symbol.level>=2 then goto err465;
      894 	locate_set,q=tp->reference.qualifier;
      895 	if q=null then goto err468;
      896 	if q->node.type=operator_node then goto err468;
      897 			/* assignment of pointer must be to a pointer variable
      898*			   not to a pointer expression */
      899 	if ^q->reference.symbol->symbol.ptr then goto err468;
      900 
      901 	locate_var=tp;
      902 	locate_size=s->symbol.bit_size;
      903 	if locate_size=null then locate_size=declare_constant$integer((s->symbol.c_bit_size));
      904 	else	do;
      905 		locate_size=copy_expression((locate_size));
      906 		/* "refer_extent" is not called: we wish to use the left-hand sides */
      907 		string(context)="0"b;
      908 		locate_size = expression_semantics(b,cs,locate_size,context);
      909 		end;
      910 
      911 	call assign_ps(locate_size,ps_var_bitlen,"aok",null);
      912 
      913 	t->operator.operand(4)=null;
      914 	goto loop1;
      915 /*  */
      916 
      917 assign_ps:proc(x,PS_offset,dtype,tref);
      918 	dcl (x,tref) ptr;
      919 	dcl PS_offset fixed bin(15);
      920 	dcl dtype char(3) aligned;	/* "int","ptr","c32","ttl","adr","spf","aok","cvr" */
      921 	dcl (tp,ap) ptr;
      922 	dcl outtype bit(36) aligned;
      923 
      924 	/* This subroutine has as its principal use
      925*	   the assignment with coercive conversion
      926*	   of some element to PS.  It has been extended
      927*	   to do addressing and to assign to storage blocks
      928*	   other than PS */
      929 
      930 	if lal<20 then lal=lal+1;
      931 	else goto err467;
      932 	assign_list(lal),tp=create_operator(assign,2);
      933 
      934      /* SET TARGET */
      935 	if tref ^= null then		/* not directed at PS */
      936 		do;
      937 		tp->operator.operand(1)=copy_expression((tref));
      938 		tp->operator.operand(1)->reference.c_offset=PS_offset;	/* ? */
      939 		end;
      940 	else	do;
      941 		tp->operator.operand(1),ap=b->block.plio_ps->list.element(PS_offset+2);
      942 		if PS_offset=ps_key then if ap=null then tp->operator.operand(1)=
      943 					io_semantics_util$keys(b);
      944 		end;
      945 
      946      /* SET "RIGHT-HAND-SIDE"  */
      947 	if dtype="aok" then tp->operator.operand(2)=x;
      948 
      949 	else if dtype="adr" then		/* store addr(x)  */
      950 		do;
      951 		tp->operator.operand(2),ap=create_operator(addr_fun_bits,2);
      952 		ap->operator.operand(2)=x;
      953 		if x->node.type = reference_node
      954 		then if ^ x->reference.symbol->symbol.file	/* 1-79 */
      955 		     then call propagate_bit((x->reference.symbol), aliasable_bit);	/* 6-73, 7-74 */
      956 		ap->operator.operand(1)=declare_temporary(pointer_type,0,0,null);
      957 		end;
      958 
      959 	else	do;		/* COERCIONS */
      960 		if dtype="int" then
      961 			outtype=integer_type;
      962 		else if dtype="ptr" then
      963 			outtype=pointer_type;
      964 		else	outtype=char_type;
      965 
      966 		if dtype="ttl" then strlen=168;
      967 		else strlen=32;
      968 		tp->operator.operand(2)=convert$to_target(x,
      969 		declare_temporary(outtype,strlen,0,null));
      970 		end;
      971 end assign_ps;
      972 /*  */
      973 
      974 io_semantics_util:proc;
      975 
      976 dcl	(b,s,t,tp,q,r) ptr;
      977 dcl	(i,n) fixed bin(15);
      978 dcl	bp ptr unaligned based;
      979 
      980 
      981 
      982 
      983 
      984 io_semantics_util$make_ps:entry(b);
      985 	n=48;		/* Builds the ordinary PS, 48 words long */
      986 	q=addr(b->block.plio_ps);
      987 	goto make;
      988 
      989 end_make_ps:
      990 	tp=create_list(50);
      991 	tp->list.element(1)=s;
      992 	q->bp=tp;	/* block.plio_ps -> list; list(1)->ps_symbol */
      993 
      994 	do i=2 to 22 by 2     ,    23 to 31 ;	/* We leave element 32 null as a flag to io_data_l_sem,	*/
      995 					/* if a new_format is needed they will make one,along	*/
      996 					/* with a defined ref. to protect it from the optimizer	*/
      997 					/* messing around with it.				*/
      998 	tp->list.element(i),r=copy_expression(s->symbol.reference);
      999 	r->reference.c_offset=i-2;
     1000 	r->reference.units=word_;
     1001 	end;
     1002 	return;
     1003 
     1004 io_semantics_util$keys:entry(b) returns(ptr);
     1005 			/* Extends the size of PS to 48+65 words long
     1006*			   to accomodate the new key, which is char256varying.
     1007*			   Also sets list.element(50)=ref to defined char256varying
     1008*			   whose qualifier is PS|48  */
     1009 
     1010 	t=b->block.plio_ps->list.element(1);
     1011 	t->symbol.c_word_size,
     1012 	t->symbol.c_dcl_size=113;
     1013 	t->symbol.c_bit_size=113*bits_per_word;	/* 113=48+65, 65=length of c-256-var, KEY as of 73-12-6 */
     1014 
     1015 		s=create_symbol(null,null,by_compiler);
     1016 		s->symbol.char,
     1017 		s->symbol.varying,		/* key is c256var 73-12-6 */
     1018 		s->symbol.aligned,
     1019 		s->symbol.overlayed,
     1020 		s->symbol.aliasable,		/* 6-73 */
     1021 		s->symbol.defined="1"b;
     1022 		s->symbol.dcl_size=create_token("256",dec_integer);
     1023 		/* s->symbol.initial=create_token("1",dec_integer); */
     1024 		/* s->symbol.position="1"b; */
     1025 
     1026 		call declare(s);
     1027 
     1028 	r=s->symbol.reference;
     1029 	r->reference.units=word_;
     1030 	r->reference.c_offset=49;
     1031 			/* c_offset addresses first data-word, not length-word !! */
     1032 	r->reference.c_length=256;		/* must =0 if on R.H.S.  */
     1033 	r->reference.qualifier=copy_expression(t->symbol.reference);
     1034 
     1035 	b->block.plio_ps->list.element(50)=r;
     1036 	return(r);
     1037 
     1038 
     1039 io_semantics_util$make_fa:entry(b);
     1040 	n=122;
     1041 	q=addr(b->block.plio_fa);
     1042 	goto make;
     1043 
     1044 io_semantics_util$make_ffsb:entry(b);
     1045 	n=42;
     1046 				/* 32 are needed for the original use,
     1047*				   viz., the "fake fsb" used for string option.
     1048*				   But 42 are needed for the newer use (6-30-72)
     1049*				   for the title168.  */
     1050 	q=addr(b->block.plio_ffsb);
     1051 	goto make;
     1052 
     1053 io_semantics_util$make_ssl:entry(b);
     1054 	n=1;	/* WILL BE RESET AT SEMANT TIME TO LENGTH OF LONGEST SSL */
     1055 	q=addr(b->block.plio_ssl);
     1056 	goto make;
     1057 
     1058 io_semantics_util$make_fab2:entry(b);
     1059 	n=14;
     1060 	q=addr(b->block.plio_fab2);
     1061 	goto make;
     1062 
     1063 make:
     1064 	if q->bp ^=null then return;			/* this is a mild error. */
     1065 
     1066 	q->bp,s=create_symbol(b,(null),by_compiler);
     1067 
     1068 	s->symbol.storage_block,
     1069 	s->symbol.auto,
     1070 	s->symbol.allocate,
     1071 	s->symbol.internal="1"b;
     1072 
     1073 	s->symbol.boundary=mod2_;
     1074 	s->symbol.c_word_size,
     1075 	s->symbol.c_dcl_size=n;
     1076 	s->symbol.c_bit_size=n*bits_per_word;
     1077 
     1078 	if n=48 then goto end_make_ps;
     1079 	return;
     1080 end io_semantics_util;
     1081 
     1082 /**/
     1083 byte_buffer:	proc(sym) reducible returns(bit(1) aligned);
     1084 
     1085 /* determines if a symbol is eligible to be a buffer whose length is an integral number of bytes */
     1086 
     1087 dcl	(adam,s,sym) ptr;
     1088 
     1089 	s, adam = sym;
     1090 
     1091 loop:	do while(s -> symbol.structure);
     1092 	     s = s -> symbol.son;
     1093 	     end;
     1094 
     1095 	if ^ s -> symbol.char
     1096 	then if ^ s -> symbol.picture
     1097 	     then if ^ s -> symbol.decimal
     1098 		then if s -> symbol.bit | s -> symbol.packed
     1099 		     then return("0"b);
     1100 
     1101 	if s = adam
     1102 	     then return("1"b);
     1103 
     1104 	do while(s -> symbol.brother = null);
     1105 	     s = s -> symbol.father;
     1106 	     if s = adam
     1107 		then return("1"b);
     1108 	     end;
     1109 
     1110 	s = s -> symbol.brother;
     1111 	go to loop;
     1112 end byte_buffer;
     1113 
     1114 /* include files */
     1115 
  1     1 /* BEGIN INCLUDE FILE ... semant.incl.pl1 */
  1     2 
  1     3 /* Modified: 30 Aug 1979 by PCK to fix 1804 and 1823 */
  1     4 /* Modified: 26 Aug 1979 by PCK to implement by name assignment */
  1     5 
  1     6 
  1     7 declare	alloc_semantics	entry(pointer,pointer,pointer);
  1     8 			/* parameter 1:	(input)	block node pointer		*/
  1     9 			/* parameter 2:	(input)	statement node pointer	*/
  1    10 			/* parameter 3:	(in/out)	tree pointer		*/
  1    11 
  1    12 declare	alloc_semantics$init_only entry(pointer,pointer,pointer);
  1    13 			/* parameter 1:	(input)	qualifier pointer		*/
  1    14 			/* parameter 2:	(input)	statement node pointer	*/
  1    15 			/* parameter 3:	(input)	symbol node pointer		*/
  1    16 
  1    17 declare	builtin		entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  1    18 			returns(pointer);
  1    19 			/* parameter 1:	(input)	block node pointer		*/
  1    20 			/* parameter 2:	(input)	statement node pointer	*/
  1    21 			/* parameter 3:	(input)	tree pointer		*/
  1    22 			/* parameter 4:	(input)	subscript pointer		*/
  1    23 			/* parameter 5:	(input)	builtin symbol node pointer	*/
  1    24 			/* parameter 6:	(in/out)	context			*/
  1    25 			/* return:	(output)	tree pointer		*/
  1    26 
  1    27 declare	check_star_extents	entry(pointer,pointer);
  1    28 			/* parameter 1:	(input) symbol node of procedure	*/
  1    29 			/* parameter 2:	(input) argument list pointer		*/
  1    30 
  1    31 declare	compare_declaration	entry(pointer,pointer,bit(1) aligned) reducible
  1    32 			returns(bit(1) aligned);
  1    33 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  1    34 			/* parameter 2:	(input)	symbol node ptr	*/
  1    35 			/* parameter 3:	(input)	"1"b if aligned attribute ignored for string	*/
  1    36 			/* return:	(output)	compare bit		*/
  1    37 
  1    38 declare	context_processor	entry(pointer,label);
  1    39 			/* parameter 1:	(input)	root block node pointer	*/
  1    40 
  1    41 declare	declare		entry(pointer);
  1    42 			/* parameter 1:	(input)	symbol node pointer		*/
  1    43 
  1    44 declare	declare_structure	entry(pointer);
  1    45 			/* parameter 1:	(input)	symbol node pointer		*/
  1    46 
  1    47 declare	defined_reference	entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  1    48 			returns(pointer);
  1    49 			/* parameter 1:	(input)	block node pointer		*/
  1    50 			/* parameter 2:	(input)	statement node pointer	*/
  1    51 			/* parameter 3:	(input)	tree pointer		*/
  1    52 			/* parameter 4:	(input)	subscript list pointer or null*/
  1    53 			/* parameter 5:	(input)	symbol node pointer		*/
  1    54 			/* parameter 6:	(in/out)	context			*/
  1    55 			/* return:	(output)	tree pointer		*/
  1    56 
  1    57 declare	do_semantics	entry(pointer,pointer,pointer);
  1    58 			/* parameter 1:	(input)	block node pointer		*/
  1    59 			/* parameter 2:	(input)	statement node pointer	*/
  1    60 			/* parameter 3:	(input)	tree pointer		*/
  1    61 
  1    62 declare	expand_assign	entry(pointer,pointer,pointer,bit(36) aligned,pointer)
  1    63 			returns(pointer);
  1    64 			/* parameter 1:	(input)	block node pointer		*/
  1    65 			/* parameter 2:	(input)	statement node pointer	*/
  1    66 			/* parameter 3:	(input)	tree pointer		*/
  1    67 			/* parameter 4:	(in/out)	context			*/
  1    68 			/* parameter 5:	(input)	aggregate reference node ptr	*/
  1    69 			/* return:	(output)	tree pointer		*/
  1    70 
  1    71 declare	expand_by_name	entry(pointer,pointer,pointer);
  1    72 			/* parameter 1:	(input)	block node pointer		*/
  1    73 			/* parameter 2:	(input)	statement node pointer	*/
  1    74 			/* parameter 3:	(input/output)	tree pointer		*/
  1    75 
  1    76 declare	expand_infix	entry(pointer,pointer,pointer,bit(36) aligned)
  1    77 			returns(pointer);
  1    78 			/* parameter 1:	(input)	block node pointer		*/
  1    79 			/* parameter 2:	(input)	statement node pointer	*/
  1    80 			/* parameter 3:	(input)	tree pointer		*/
  1    81 			/* parameter 4:	(in/out)	context			*/
  1    82 			/* return:	(output)	tree pointer		*/
  1    83 
  1    84 declare	expand_initial	entry(pointer,pointer,pointer);
  1    85 			/* parameter 1:	(input)	symbol node pointer		*/
  1    86 			/* parameter 2:	(input)	statement node pointer	*/
  1    87 			/* parameter 3:	(input)	locator			*/
  1    88 
  1    89 declare	expand_prefix	entry(pointer,pointer,pointer,bit(36) aligned)
  1    90 			returns(pointer);
  1    91 			/* parameter 1:	(input)	block node pointer		*/
  1    92 			/* parameter 2:	(input)	statement node pointer	*/
  1    93 			/* parameter 3:	(input)	tree pointer		*/
  1    94 			/* parameter 4:	(in/out)	context			*/
  1    95 			/* return:	(output)	tree pointer		*/
  1    96 
  1    97 declare	expand_primitive	entry(pointer,pointer,pointer,bit(36) aligned)
  1    98 			returns(pointer);
  1    99 			/* parameter 1:	(input)	block node pointer		*/
  1   100 			/* parameter 2:	(input)	statement node pointer	*/
  1   101 			/* parameter 3:	(input)	tree pointer		*/
  1   102 			/* parameter 4:	(input)	context			*/
  1   103 			/* return:	(output)	tree pointer		*/
  1   104 
  1   105 declare	expression_semantics entry(pointer,pointer,pointer,bit(36) aligned)
  1   106 			returns(pointer);
  1   107 			/* parameter 1:	(input)	block node pointer		*/
  1   108 			/* parameter 2:	(input)	statement node pointer	*/
  1   109 			/* parameter 3:	(input)	tree pointer		*/
  1   110 			/* parameter 4:	(in/out)	context			*/
  1   111 			/* return:	(output)	tree pointer		*/
  1   112 
  1   113 declare	fill_refer	entry(pointer,pointer,bit(1) aligned)
  1   114 			returns(pointer);
  1   115 			/* parameter 1:	(input)	null,ref node,op node ptr */
  1   116 			/* parameter 2:	(input)	null,ref node,op node ptr */
  1   117 			/* parameter 3:	(input)	copy switch for param 2 */
  1   118 			/* return:	(output)	ptr to processed tree */
  1   119 
  1   120 declare	io_data_list_semantics$format_list_semantics entry(pointer,pointer,pointer);
  1   121 			/* parameter 1:	(input)	block node pointer		*/
  1   122 			/* parameter 2:	(input)	statement node pointer	*/
  1   123 			/* parameter 3:	(in/out)	tree pointer		*/
  1   124 
  1   125 declare	function		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   126 			returns(pointer);
  1   127 			/* parameter 1:	(input)	block node pointer		*/
  1   128 			/* parameter 2:	(input)	statement node pointer	*/
  1   129 			/* parameter 3:	(input)	tree pointer		*/
  1   130 			/* parameter 4:	(input)	symbol node pointer		*/
  1   131 			/* parameter 5:	(in/out)	context			*/
  1   132 			/* return:	(output)	tree pointer		*/
  1   133 
  1   134 declare	generic_selector	entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   135 			returns(pointer);
  1   136 			/* parameter 1:	(input)	block node pointer	*/
  1   137 			/* parameter 2:	(input)	statement node pointer	*/
  1   138 			/* parameter 3:	(input)	tree pointer	*/
  1   139 			/* parameter 4:	(input)	pointer to argument list	*/
  1   140 			/* parameter 5:	(in/out)	context		*/
  1   141 			/* return:	(output)	tree pointer	*/
  1   142 
  1   143 declare	io_data_list_semantics entry(pointer,pointer,pointer);
  1   144 			/* parameter 1:	(input)	block node pointer		*/
  1   145 			/* parameter 2:	(input)	statement node pointer	*/
  1   146 			/* parameter 3:	(input)	operator node pointer	*/
  1   147 
  1   148 declare	io_semantics	entry(pointer,pointer,pointer);
  1   149 			/* parameter 1:	(input)	block node pointer		*/
  1   150 			/* parameter 2:	(input)	statement node pointer	*/
  1   151 			/* parameter 3:	(input)	tree pointer		*/
  1   152 
  1   153 declare	lookup		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   154 			returns(bit(1) aligned);
  1   155 			/* parameter 1:	(input)	block node pointer		*/
  1   156 			/* parameter 2:	(input)	stmnt|symbol node pointer	*/
  1   157 			/* parameter 3:	(input)	token or reference node ptr	*/
  1   158 			/* parameter 4:	(output)	symbol node pointer		*/
  1   159 			/* parameter 5:	(in/out)	context			*/
  1   160 			/* return:	(output)	symbol found bit		*/
  1   161 
  1   162 declare	make_non_quick	entry(pointer, bit (36) aligned);
  1   163 			/* parameter 1:	(input)	tree pointer	*/
  1   164 			/* parameter 2:	(input)	reason why being made nonquick */
  1   165 
  1   166 declare	match_arguments	entry(pointer,pointer) reducible
  1   167 			returns(bit(1) aligned);
  1   168 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  1   169 			/* parameter 2:	(input)	reference or symbol node ptr	*/
  1   170 			/* return:	(output)	compare bit		*/
  1   171 
  1   172 declare	offset_adder	entry(pointer,fixed binary(31),fixed binary(3),bit(1) aligned,
  1   173 			      pointer,fixed binary(31),fixed binary(3),bit(1) aligned,bit(1));
  1   174 			/* parameter 1:	(in/out)	tree pointer		*/
  1   175 			/* parameter 2:	(in/out)	constant size		*/
  1   176 			/* parameter 3:	(in/out)	units			*/
  1   177 			/* parameter 4:	(in/out) 	ON if units ^= word_, but tree in words	*/
  1   178 			/* parameter 5:	(input)	tree pointer		*/
  1   179 			/* parameter 6:	(input)	constant size		*/
  1   180 			/* parameter 7:	(input)	units			*/
  1   181 			/* parameter 8:	(input)	ON if units ^= word_, but tree in words	*/
  1   182 			/* parameter 9:	(input)	ON if should not improve units	*/
  1   183 
  1   184 declare	operator_semantics	entry(pointer,pointer,pointer,bit(36) aligned)
  1   185 			returns(pointer);
  1   186 			/* parameter 1:	(input)	block node pointer		*/
  1   187 			/* parameter 2:	(input)	statement node pointer	*/
  1   188 			/* parameter 3:	(input)	tree pointer		*/
  1   189 			/* parameter 4:	(in/out)	context			*/
  1   190 			/* return:	(output)	tree pointer		*/
  1   191 
  1   192 declare	propagate_bit	entry(pointer,fixed binary(15));
  1   193 			/* parameter 1:	(input)	symbol node pointer		*/
  1   194 			/* parameter 2:	(input)	attribute number		*/
  1   195 
  1   196 declare	semantic_translator$call_es entry(pointer,pointer,pointer,label,bit(1) aligned)
  1   197 			returns(pointer);
  1   198 			/* parameter 1:	(input)	block ptr	*/
  1   199 			/* parameter 2:	(input)	statement ptr	*/
  1   200 			/* parameter 3:	(input)	tree ptr	*/
  1   201 			/* parameter 4:	(input)	failure label	*/
  1   202 			/* parameter 5:	(input)	"1"b -- convert to integer	*/
  1   203 			/* return:	(output)	tree ptr		*/
  1   204 
  1   205 declare	simplify_expression	entry(pointer,fixed bin,bit(1)aligned);
  1   206 			/* parameter 1:	(in/out)	tree pointer		*/
  1   207 			/* parameter 2:	(output)	value of constant, if the entire tree
  1   208*						is simplified		*/
  1   209 			/* parameter 3:	(output)	bit indicating if the tree has
  1   210*						been simplified		*/
  1   211 
  1   212 declare	simplify_offset	entry(pointer,bit(36) aligned);
  1   213 			/* parameter 1:	(input)	reference node pointer	*/
  1   214 			/* parameter 2:	(input)	context			*/
  1   215 
  1   216 declare	subscripter	entry(pointer,pointer,pointer,pointer,pointer)
  1   217 			returns(pointer);
  1   218 			/* parameter 1:	(input)	block node pointer		*/
  1   219 			/* parameter 2:	(input)	statement node pointer	*/
  1   220 			/* parameter 3:	(input)	tree pointer		*/
  1   221 			/* parameter 4:	(in/out)	subscript list pointer	*/
  1   222 			/* parameter 5:	(input)	symbol node pointer		*/
  1   223 			/* return:	(output)	reference node pointer	*/
  1   224 
  1   225 declare	validate		entry(pointer);
  1   226 			/* parameter 1:	(input)	symbol node pointer		*/
  1   227 
  2     1 /****^  *********************************************************
  2     2*        *                                                       *
  2     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  2     4*        *                                                       *
  2     5*        ********************************************************* */
  2     6 
  2     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  2     8 
  2     9 
  2    10 /****^  HISTORY COMMENTS:
  2    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  2    12*     install(89-07-31,MR12.3-1066):	
  2    13*     Removed the obsolete parameter source_line from the dcl of error_().
  2    14*                                                   END HISTORY COMMENTS */
  2    15 
  2    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  2    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  2    18* */
  2    19 
  2    20 declare	adjust_count	entry(pointer);
  2    21 			/* parameter 1:	(input)	any node pointer		*/
  2    22 
  2    23 declare	bindec		entry(fixed bin(31)) reducible
  2    24 			returns(character(12) aligned);
  2    25 			/* parameter 1:	(input)	bin value			*/
  2    26 			/* return:	(output)	character value with blanks	*/
  2    27 
  2    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  2    29 			returns(character(12) aligned varying);
  2    30 			/* parameter 1:	(input)	binary value		*/
  2    31 			/* return:	(output)	char value without blanks	*/
  2    32 
  2    33 declare	binoct		entry(fixed bin(31)) reducible
  2    34 			returns(char(12) aligned);
  2    35 			/* parameter 1:	(input)	binary value		*/
  2    36 			/* return:	(output)	char value with blanks	*/
  2    37 
  2    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  2    39 			returns(char(12) aligned);
  2    40 			/* parameter 1:	(input)	binary value		*/
  2    41 			/* return:	(output)	right-aligned char value	*/
  2    42 
  2    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  2    44 			returns(char(12) varying aligned);
  2    45 			/* parameter 1:	(input)	binary value		*/
  2    46 			/* returns:	(output)	char value without blanks	*/
  2    47 
  2    48 declare	compare_expression	entry(pointer,pointer) reducible
  2    49 			returns(bit(1) aligned);
  2    50 			/* parameter 1:	(input)	any node pointer		*/
  2    51 			/* parameter 2:	(input)	any node pointer		*/
  2    52 			/* return:	(output)	compare bit		*/
  2    53 
  2    54 declare	constant_length	entry (pointer, fixed bin (71))
  2    55 			returns (bit (1) aligned);
  2    56 			/* parameter 1:	(input)	reference node pointer	*/
  2    57 			/* parameter 2:	(input)	value of constant length	*/
  2    58 			/* return:	(output)	"1"b if constant length	*/
  2    59 
  2    60 declare	convert		entry(pointer,bit(36) aligned)
  2    61 			returns(pointer);
  2    62 			/* parameter 1:	(input)	any node pointer		*/
  2    63 			/* parameter 2:	(input)	target type		*/
  2    64 			/* return:	(output)	target value tree pointer	*/
  2    65 
  2    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  2    67 			returns(pointer);
  2    68 			/* parameter 1:	(input)	any node pointer		*/
  2    69 			/* parameter 2:	(input)	target type		*/
  2    70 			/* return:	(output)	target value tree pointer	*/
  2    71 
  2    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  2    73 			returns(pointer);
  2    74 			/* parameter 1:	(input)	any node pointer		*/
  2    75 			/* parameter 2:	(input)	target type		*/
  2    76 			/* return:	(output)	target value tree pointer	*/
  2    77 
  2    78 declare	convert$validate	entry(pointer,pointer);
  2    79 			/* parameter 1:	(input)	source value tree pointer	*/
  2    80 			/* parameter 2:	(input)	target reference node pointer	*/
  2    81 
  2    82 declare	convert$to_target_fb entry(pointer,pointer)
  2    83 			returns(pointer);
  2    84 			/* parameter 1:	(input)	source value tree pointer	*/
  2    85 			/* parameter 2:	(input)	target reference node pointer	*/
  2    86 			/* return:	(output)	target value tree pointer	*/
  2    87 
  2    88 declare	convert$to_target	entry(pointer,pointer)
  2    89 			returns(pointer);
  2    90 			/* parameter 1:	(input)	source value tree pointer	*/
  2    91 			/* parameter 2:	(input)	target reference node pointer	*/
  2    92 			/* return:	(output)	target value tree pointer	*/
  2    93 
  2    94 declare	copy_expression	entry(pointer unaligned)
  2    95 			returns(pointer);
  2    96 			/* parameter 1:	(input)	any node pointer		*/
  2    97 			/* return:	(output)	any node pointer		*/
  2    98 
  2    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  2   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  2   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  2   102 
  2   103 declare	copy_unique_expression entry(pointer)
  2   104 			returns(pointer);
  2   105 			/* parameter 1:	(input)	any node pointer		*/
  2   106 			/* return:	(output)	any node pointer		*/
  2   107 
  2   108 declare	create_array	entry()
  2   109 			returns(pointer);
  2   110 			/* return:	(output)	array node pointer		*/
  2   111 
  2   112 declare	create_block	entry(bit(9) aligned,pointer)
  2   113 			returns(pointer);
  2   114 			/* parameter 1:	(input)	block type		*/
  2   115 			/* parameter 2:	(input)	father block node pointer	*/
  2   116 			/* return:	(output)	block node pointer		*/
  2   117 
  2   118 declare	create_bound	entry()
  2   119 			returns(pointer);
  2   120 			/* return:	(output)	bound node pointer		*/
  2   121 
  2   122 declare	create_context	entry(pointer,pointer)
  2   123 			returns(pointer);
  2   124 			/* parameter 1:	(input)	block node pointer		*/
  2   125 			/* parameter 2:	(input)	token pointer		*/
  2   126 			/* return:	(output)	context node pointer	*/
  2   127 
  2   128 declare	create_cross_reference entry()
  2   129 			returns(pointer);
  2   130 			/* return:	(output)	cross reference node pointer	*/
  2   131 
  2   132 declare	create_default	entry
  2   133 			returns(pointer);
  2   134 			/* return:	(output)	default node pointer	*/
  2   135 
  2   136 declare	create_identifier	entry()
  2   137 			returns(pointer);
  2   138 			/* return:	(output)	token node pointer		*/
  2   139 
  2   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  2   141 			returns(pointer);
  2   142 			/* parameter 1:	(input)	block node pointer		*/
  2   143 			/* parameter 2:	(input)	token node pointer		*/
  2   144 			/* parameter 3:	(input)	declare type		*/
  2   145 			/* return:	(output)	label node pointer		*/
  2   146 
  2   147 declare	create_list	entry(fixed bin(15))
  2   148 			returns(pointer);
  2   149 			/* parameter 1:	(input)	number of list elements	*/
  2   150 			/* return:	(output)	list node pointer		*/
  2   151 
  2   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  2   153 			returns(pointer);
  2   154 			/* parameter 1:	(input)	operator type		*/
  2   155 			/* parameter 2:	(input)	number of operands		*/
  2   156 			/* return:	(output)	operator node pointer	*/
  2   157 
  2   158 declare	create_reference	entry(pointer)
  2   159 			returns(pointer);
  2   160 			/* parameter 1:	(input)	symbol node pointer		*/
  2   161 			/* return:	(output)	reference node pointer	*/
  2   162 
  2   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   164 			returns(pointer);
  2   165 			/* parameter 1:	(input)	statement type		*/
  2   166 			/* parameter 2:	(input)	block node pointer		*/
  2   167 			/* parameter 3:	(input)	label node pointer		*/
  2   168 			/* parameter 4:	(input)	conditions		*/
  2   169 			/* return:	(output)	statement node pointer	*/
  2   170 
  2   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   172 			returns(pointer);
  2   173 			/* parameter 1:	(input)	statement type		*/
  2   174 			/* parameter 2:	(input)	block node pointer		*/
  2   175 			/* parameter 3:	(input)	label node pointer		*/
  2   176 			/* parameter 4:	(input)	conditions		*/
  2   177 			/* return:	(output)	statement node pointer	*/
  2   178 
  2   179 declare	create_storage	entry(fixed bin(15))
  2   180 			returns(pointer);
  2   181 			/* parameter 1:	(input)	number of words		*/
  2   182 			/* return:	(output)	storage block pointer	*/
  2   183 
  2   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  2   185 			returns(pointer);
  2   186 			/* parameter 1:	(input)	block node pointer		*/
  2   187 			/* parameter 2:	(input)	token node pointer		*/
  2   188 			/* parameter 3:	(input)	declare type		*/
  2   189 			/* return:	(output)	symbol node pointer		*/
  2   190 
  2   191 declare	create_token	entry (character (*), bit (9) aligned)
  2   192 			returns (ptr);
  2   193 			/* parameter 1:	(input)	token string		*/
  2   194 			/* parameter 2:	(input)	token type		*/
  2   195 			/* return:	(output)	token node ptr		*/
  2   196 
  2   197 declare	create_token$init_hash_table entry ();
  2   198 
  2   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  2   200 			returns (ptr);
  2   201 			/* parameter 1:	(input)	token string		*/
  2   202 			/* parameter 2:	(input)	token type		*/
  2   203 			/* parameter 3:	(input)	protected flag		*/
  2   204 			/* return:	(output)	token node ptr		*/
  2   205 
  2   206 declare	decbin		entry(character(*) aligned) reducible
  2   207 			returns(fixed bin(31));
  2   208 			/* parameter 1:	(input)	decimal character string	*/
  2   209 			/* return:	(output)	binary value		*/
  2   210 
  2   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  2   212 			returns(pointer);
  2   213 			/* parameter 1:	(input)	value			*/
  2   214 			/* parameter 2:	(input)	type			*/
  2   215 			/* parameter 3:	(input)	size			*/
  2   216 			/* parameter 4:	(input)	scale			*/
  2   217 			/* return:	(output)	reference node pointer	*/
  2   218 
  2   219 declare	declare_constant$bit entry(bit(*) aligned)
  2   220 			returns(pointer);
  2   221 			/* parameter 1:	(input)	bit			*/
  2   222 			/* return:	(output)	reference node pointer	*/
  2   223 
  2   224 declare	declare_constant$char entry(character(*) aligned)
  2   225 			returns(pointer);
  2   226 			/* parameter 1:	(input)	character			*/
  2   227 			/* return:	(output)	reference node pointer	*/
  2   228 
  2   229 declare	declare_constant$desc entry(bit(*) aligned)
  2   230 			returns(pointer);
  2   231 			/* parameter 1:	(input)	descriptor bit value	*/
  2   232 			/* return:	(output)	reference node pointer	*/
  2   233 
  2   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  2   235 			returns(pointer);
  2   236 			/* parameter 1:	(input)	integer			*/
  2   237 			/* return:	(output)	reference node pointer	*/
  2   238 
  2   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   240 			returns(pointer);
  2   241 			/* parameter 1:	(input)	block node pointer		*/
  2   242 			/* parameter 2:	(input)	statement node pointer	*/
  2   243 			/* parameter 3:	(input)	symbol node pointer		*/
  2   244 			/* parameter 4:	(input)	loc pointer		*/
  2   245 			/* parameter 5:	(input)	array descriptor bit
  2   246*						cross_section bit	*/
  2   247 			/* return:	(output)	reference node pointer	*/
  2   248 
  2   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   250 			returns(pointer);
  2   251 			/* parameter 1:	(input)	block node pointer	*/
  2   252 			/* parameter 2:	(input)	statement node pointer 	*/
  2   253 			/* parameter 3:	(input)	symbol node pointer	*/
  2   254 			/* parameter 4:	(input)	loc pointer	*/
  2   255 			/* parameter 5:	(input)	array descriptor bit
  2   256*						cross_section bit	*/
  2   257 			/* return:	(output)	reference node pointer	*/
  2   258 
  2   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   260 			returns(pointer);
  2   261 			/* parameter 1:	(input)	block node pointer		*/
  2   262 			/* parameter 2:	(input)	statement node pointer	*/
  2   263 			/* parameter 3:	(input)	symbol node pointer		*/
  2   264 			/* parameter 4:	(input)	loc pointer		*/
  2   265 			/* parameter 5:	(input)	array descriptor bit
  2   266*						cross_section bit	*/
  2   267 			/* return:	(output)	reference node pointer	*/
  2   268 
  2   269 declare	declare_integer	entry(pointer)
  2   270 			returns(pointer);
  2   271 			/* parameter 1:	(input)	block node pointer		*/
  2   272 			/* return:	(output)	reference node pointer 	*/
  2   273 
  2   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  2   275 			/* parameter 1:	(input)	picture string		*/
  2   276 			/* parameter 2:	(input)	symbol node pointer		*/
  2   277 			/* parameter 3:	(output)	error code, if any		*/
  2   278 
  2   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  2   280 			returns(pointer);
  2   281 			/* parameter 1:	(input)	picture string		*/
  2   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  2   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  2   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  2   285 			/* return:	(output)	reference node pointer	*/
  2   286 
  2   287 declare	declare_pointer	entry(pointer)
  2   288 			returns(pointer);
  2   289 			/* parameter 1:	(input)	block node pointer		*/
  2   290 			/* return:	(output)	reference node pointer	*/
  2   291 
  2   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  2   293 			returns(pointer);
  2   294 			/* parameter 1:	(input)	type			*/
  2   295 			/* parameter 2:	(input)	precision			*/
  2   296 			/* parameter 3:	(input)	scale			*/
  2   297 			/* parameter 4:	(input)	length			*/
  2   298 			/* return:	(output)	reference node pointer	*/
  2   299 
  2   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  2   301 			returns(char(120) varying);
  2   302 			/* parameter 1:	(input)	node pointer		*/
  2   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   304 			/* return:	(output)	source line id		*/
  2   305 
  2   306 declare	decode_source_id	entry(
  3     1 			1 structure unaligned,
  3     2 			  2 /* file_number */	bit(8),
  3     3 			  2 /* line_number */	bit(14),
  3     4 			  2 /* stmt_number */	bit(5),
  2   307 
  2   308 			bit(1) aligned)
  2   309 			returns(char(120) varying);
  2   310 			/* parameter 1:	(input)	source id			*/
  2   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   312 			/* return:	(output)	source line id		*/
  2   313 
  2   314 declare	error		entry(fixed bin(15),pointer,pointer);
  2   315 			/* parameter 1:	(input)	error number		*/
  2   316 			/* parameter 2:	(input)	statement node pointer or null*/
  2   317 			/* parameter 3:	(input)	token node pointer 		*/
  2   318 
  2   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  2   320 			/* parameter 1:	(input)	error number		*/
  2   321 			/* parameter 2:	(input)	statement node pointer or null*/
  2   322 			/* parameter 3:	(input)	token node pointer 		*/
  2   323 
  2   324 declare	error_		entry(fixed bin(15),
  4     1 			1 structure unaligned,
  4     2 			  2 /* file_number */	bit(8),
  4     3 			  2 /* line_number */	bit(14),
  4     4 			  2 /* stmt_number */	bit(5),
  2   325 
  2   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  2   327 			/* parameter 1:	(input)	error number		*/
  2   328 			/* parameter 2:	(input)	statement id		*/
  2   329 			/* parameter 3:	(input)	any node pointer		*/
  2   330 			/* parameter 4:	(input)	source segment		*/
  2   331 			/* parameter 5:	(input)	source starting character	*/
  2   332 			/* parameter 6:	(input)	source length		*/
  2   333 
  2   334 declare	error_$no_text	entry(fixed bin(15),
  5     1 			1 structure unaligned,
  5     2 			  2 /* file_number */	bit(8),
  5     3 			  2 /* line_number */	bit(14),
  5     4 			  2 /* stmt_number */	bit(5),
  2   335 
  2   336 			pointer);
  2   337 			/* parameter 1:	(input)	error number		*/
  2   338 			/* parameter 2:	(input)	statement id		*/
  2   339 			/* parameter 3:	(input)	any node pointer		*/
  2   340 
  2   341 declare	error_$initialize_error entry();
  2   342 
  2   343 declare	error_$finish	entry();
  2   344 
  2   345 declare	free_node		entry(pointer);
  2   346 			/* parameter 1:	any node pointer			*/
  2   347 
  2   348 declare	get_array_size	entry(pointer,fixed bin(3));
  2   349 			/* parameter 1:	(input)	symbol node pointer		*/
  2   350 			/* parameter 2:	(input)	units			*/
  2   351 
  2   352 declare	get_size		entry(pointer);
  2   353 			/* parameter 1:	(input)	symbol node pointer		*/
  2   354 
  2   355 declare	merge_attributes	external entry(pointer,pointer)
  2   356 			returns(bit(1) aligned);
  2   357 			/* parameter 1:	(input)	target symbol node pointer */
  2   358 			/* parameter 2:	(input)	source symbol node pointer */
  2   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  2   360 
  2   361 declare	optimizer		entry(pointer);
  2   362 			/* parameter 1:	(input)	root pointer		*/
  2   363 
  2   364 declare	parse_error	entry(fixed bin(15),pointer);
  2   365 			/* parameter 1:	(input)	error number		*/
  2   366 			/* parameter 2:	(input)	any node pointer		*/
  2   367 
  2   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  2   369 			/* parameter 1:	(input)	error number		*/
  2   370 			/* parameter 2:	(input)	any node pointer		*/
  2   371 
  2   372 declare	pl1_error_print$write_out
  2   373 			entry(fixed bin(15),
  6     1 			1 structure unaligned,
  6     2 			  2 /* file_number */	bit(8),
  6     3 			  2 /* line_number */	bit(14),
  6     4 			  2 /* stmt_number */	bit(5),
  2   374 
  2   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  2   376 			/* parameter 1:	(input)	error number		*/
  2   377 			/* parameter 2:	(input)	statement identification	*/
  2   378 			/* parameter 3:	(input)	any node pointer		*/
  2   379 			/* parameter 4:	(input)	source segment		*/
  2   380 			/* parameter 5:	(input)	source character index	*/
  2   381 			/* parameter 6:	(input)	source length		*/
  2   382 			/* parameter 7:	(input)	source line		*/
  2   383 
  2   384 declare	pl1_error_print$listing_segment
  2   385 			entry(fixed bin(15),
  7     1 			1 structure unaligned,
  7     2 			  2 /* file_number */	bit(8),
  7     3 			  2 /* line_number */	bit(14),
  7     4 			  2 /* stmt_number */	bit(5),
  2   386 
  2   387 			pointer);
  2   388 			/* parameter 1:	(input)	error number		*/
  2   389 			/* parameter 2:	(input)	statement identification	*/
  2   390 			/* parameter 3:	(input)	token node pointer		*/
  2   391 
  2   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  2   393 			/* parameter 1:	(input)	string			*/
  2   394 
  2   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  2   396 			/* parameter 1:	(input)	string			*/
  2   397 
  2   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  2   399 			/* parameter 1:	(input)	string			*/
  2   400 			/* parameter 2:	(input)	string length or 0		*/
  2   401 
  2   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  2   403 			/* parameter 1:	(input)	string			*/
  2   404 			/* parameter 2:	(input)	string length or 0		*/
  2   405 
  2   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  2   407 			/* parameter 1:	(input)	string pointer		*/
  2   408 			/* parameter 2:	(input)	string size		*/
  2   409 
  2   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  2   411 			/* parameter 1:	(input)	string pointer		*/
  2   412 			/* parameter 2:	(input)	string length or 0		*/
  2   413 
  2   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  2   415 			/* parameter 1:	(input)	string			*/
  2   416 			/* parameter 2:	(input)	length			*/
  2   417 
  2   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  2   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  2   420 			/* parameter 2:	(input)	line number		*/
  2   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  2   422 			/* parameter 4:	(input)	number of chars to copy	*/
  2   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  2   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  2   425 
  2   426 declare	refer_extent	entry(pointer,pointer);
  2   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  2   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  2   429 
  2   430 declare	reserve$clear	entry()
  2   431 			returns(pointer);
  2   432 			/* return:	(output)	pointer			*/
  2   433 
  2   434 declare	reserve$declare_lib	entry(fixed bin(15))
  2   435 			returns(pointer);
  2   436 			/* parameter 1:	(input)	builtin function number	*/
  2   437 			/* return:	(output)	pointer			*/
  2   438 
  2   439 declare	reserve$read_lib	entry(fixed bin(15))
  2   440 			returns(pointer);
  2   441 			/* parameter 1:	(input)	builtin function number	*/
  2   442 			/* return:	(output)	pointer			*/
  2   443 
  2   444 declare	semantic_translator	entry();
  2   445 
  2   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  2   447 			/* parameter 1:	(input)	error number		*/
  2   448 			/* parameter 2:	(input)	any node pointer		*/
  2   449 
  2   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  2   451 			/* parameter 1:	(input)	error number		*/
  2   452 			/* parameter 2:	(input)	any node pointer		*/
  2   453 
  2   454 declare	share_expression	entry(ptr)
  2   455 			returns(ptr);
  2   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  2   457 			/* return:	(output)	tree pointer or null	*/
  2   458 
  2   459 declare	token_to_binary	entry(ptr) reducible
  2   460 			returns(fixed bin(31));
  2   461 			/* parameter 1:	(input)	token node pointer		*/
  2   462 			/* return:	(output)	converted binary value	*/
  2   463 
  2   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
  1   228 
  1   229 /* END INCLUDE FILE ... semant.incl.pl1 */
     1116 
     1117 /*  */
  8     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
  8     2 
  8     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
  8     4 
  8     5 dcl (	block_node		initial("000000001"b),
  8     6 	statement_node		initial("000000010"b),
  8     7 	operator_node		initial("000000011"b),
  8     8 	reference_node		initial("000000100"b),
  8     9 	token_node		initial("000000101"b),
  8    10 	symbol_node		initial("000000110"b),
  8    11 	context_node		initial("000000111"b),
  8    12 	array_node		initial("000001000"b),
  8    13 	bound_node		initial("000001001"b),
  8    14 	format_value_node		initial("000001010"b),
  8    15 	list_node			initial("000001011"b),
  8    16 	default_node		initial("000001100"b),
  8    17 	machine_state_node		initial("000001101"b),
  8    18 	source_node		initial("000001110"b),
  8    19 	label_node		initial("000001111"b),
  8    20 	cross_reference_node	initial("000010000"b),
  8    21 	sf_par_node		initial("000010001"b),
  8    22 	temporary_node		initial("000010010"b),
  8    23 	label_array_element_node	initial("000010011"b),
  8    24 	by_name_agg_node		initial("000010100"b))
  8    25 				bit(9) internal static aligned options(constant);
  8    26 
  8    27 dcl	1 node			based aligned,
  8    28 	2 type			unal bit(9),
  8    29 	2 source_id		unal structure,
  8    30 	  3 file_number		bit(8),
  8    31 	  3 line_number		bit(14),
  8    32 	  3 statement_number	bit(5);
  8    33 
  8    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
     1118 
  9     1 /* BEGIN INCLUDE FILE ... block.incl.pl1 */
  9     2 /* Modified 22 Ocober 1980 by M. N. Davidoff to increase max block.number to 511 */
  9     3 /* format: style3,idind30 */
  9     4 
  9     5 declare	1 block			aligned based,
  9     6 	  2 node_type		bit (9) unaligned,
  9     7 	  2 source_id		structure unaligned,
  9     8 	    3 file_number		bit (8),
  9     9 	    3 line_number		bit (14),
  9    10 	    3 statement_number	bit (5),
  9    11 	  2 father		ptr unaligned,
  9    12 	  2 brother		ptr unaligned,
  9    13 	  2 son			ptr unaligned,
  9    14 	  2 declaration		ptr unaligned,
  9    15 	  2 end_declaration		ptr unaligned,
  9    16 	  2 default		ptr unaligned,
  9    17 	  2 end_default		ptr unaligned,
  9    18 	  2 context		ptr unaligned,
  9    19 	  2 prologue		ptr unaligned,
  9    20 	  2 end_prologue		ptr unaligned,
  9    21 	  2 main			ptr unaligned,
  9    22 	  2 end_main		ptr unaligned,
  9    23 	  2 return_values		ptr unaligned,
  9    24 	  2 return_count		ptr unaligned,
  9    25 	  2 plio_ps		ptr unaligned,
  9    26 	  2 plio_fa		ptr unaligned,
  9    27 	  2 plio_ffsb		ptr unaligned,
  9    28 	  2 plio_ssl		ptr unaligned,
  9    29 	  2 plio_fab2		ptr unaligned,
  9    30 	  2 block_type		bit (9) unaligned,
  9    31 	  2 prefix		bit (12) unaligned,
  9    32 	  2 like_attribute		bit (1) unaligned,
  9    33 	  2 no_stack		bit (1) unaligned,
  9    34 	  2 get_data		bit (1) unaligned,
  9    35 	  2 flush_at_call		bit (1) unaligned,
  9    36 	  2 processed		bit (1) unaligned,
  9    37 	  2 text_displayed		bit (1) unaligned,
  9    38 	  2 number		fixed bin (9) unsigned unaligned,
  9    39 	  2 free_temps		dimension (3) ptr,	/* these fields are used by the code generator */
  9    40 	  2 temp_list		ptr,
  9    41 	  2 entry_list		ptr,
  9    42 	  2 o_and_s		ptr,
  9    43 	  2 why_nonquick		aligned,
  9    44 	    3 auto_adjustable_storage bit (1) unaligned,
  9    45 	    3 returns_star_extents	bit (1) unaligned,
  9    46 	    3 stack_extended_by_args	bit (1) unaligned,
  9    47 	    3 invoked_by_format	bit (1) unaligned,
  9    48 	    3 format_statement	bit (1) unaligned,
  9    49 	    3 io_statements		bit (1) unaligned,
  9    50 	    3 assigned_to_entry_var	bit (1) unaligned,
  9    51 	    3 condition_statements	bit (1) unaligned,
  9    52 	    3 no_owner		bit (1) unaligned,
  9    53 	    3 recursive_call	bit (1) unaligned,
  9    54 	    3 options_non_quick	bit (1) unaligned,
  9    55 	    3 options_variable	bit (1) unaligned,
  9    56 	    3 never_referenced	bit (1) unaligned,
  9    57 	    3 pad_nonquick		bit (5) unaligned,
  9    58 	  2 prologue_flag		bit (1) unaligned,
  9    59 	  2 options_main		bit (1) unaligned,
  9    60 	  2 pad			bit (16) unaligned,
  9    61 	  2 number_of_entries	fixed bin (17),
  9    62 	  2 level			fixed bin (17),
  9    63 	  2 last_auto_loc		fixed bin (17),
  9    64 	  2 symbol_block		fixed bin (17),
  9    65 	  2 entry_info		fixed bin (18),
  9    66 	  2 enter			structure unaligned,
  9    67 	    3 start		fixed bin (17),
  9    68 	    3 end			fixed bin (17),
  9    69 	  2 leave			structure unaligned,
  9    70 	    3 start		fixed bin (17),
  9    71 	    3 end			fixed bin (17),
  9    72 	  2 owner			ptr;
  9    73 
  9    74 declare	max_block_number		fixed bin internal static options (constant) initial (511);
  9    75 
  9    76 /* END INCLUDE FILE ... block.incl.pl1 */
     1119 
 10     1 /* BEGIN INCLUDE FILE ... list.incl.pl1 */
 10     2 
 10     3 /* Modified 26 June 81 by EBush to add max_list_elements */
 10     4 
 10     5 
 10     6 dcl	1 list		based aligned,
 10     7 	2 node_type	bit(9) unaligned,
 10     8 	2 reserved	bit(12) unaligned,
 10     9 	2 number		fixed(14) unaligned,
 10    10 	2 element		dimension(n refer(list.number)) ptr unaligned;
 10    11 
 10    12 dcl       max_list_elements   fixed bin(17) internal static options (constant)
 10    13 	                    init(16383);
 10    14 
 10    15 /* END INCLUDE FILE ... list.incl.pl1 */
     1120 
 11     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
 11     2 
 11     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
 11     4 
 11     5 /* format: style3 */
 11     6 dcl	1 operator	based aligned,
 11     7 	  2 node_type	bit (9) unaligned,
 11     8 	  2 op_code	bit (9) unaligned,
 11     9 	  2 shared	bit (1) unaligned,
 11    10 	  2 processed	bit (1) unaligned,
 11    11 	  2 optimized	bit (1) unaligned,
 11    12 	  2 number	fixed (14) unaligned,
 11    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
 11    14 
 11    15 dcl	max_number_of_operands
 11    16 			fixed bin (15) int static options (constant) initial (32767);
 11    17 
 11    18 /* END INCLUDE FILE ... operator.incl.pl1 */
     1121 
 12     1 /* BEGIN INCLUDE FILE ... op_codes.incl.pl1 */
 12     2 
 12     3 /* Modified: 25 Apr 1979 by PCK 4-bit decimal */
 12     4 /* Modified: 6 Jun 1979 by PG to add rank and byte */
 12     5 /* Modified: 26 Dec 1979 by PCK to add assign_by_name */
 12     6 /* Modified: 26 July 82 BIM wordno, segno */
 12     7 
 12     8 dcl (	add		initial("000010001"b),	/* opnd(1) <- opnd(2)+opnd(3)		*/
 12     9 	sub		initial("000010010"b),	/* opnd(1) <- opnd(2)-opnd(3)		*/
 12    10 	mult		initial("000010011"b),	/* opnd(1) <- opnd(2)*opnd(3)		*/
 12    11 	div		initial("000010100"b),	/* opnd(1) <- opnd(2)/opnd(3)		*/
 12    12 	negate		initial("000010101"b),	/* opnd(1) <- -opnd(2)  		*/
 12    13 	exp		initial("000010110"b),	/* opnd(1) <- opnd(2) ** opnd(3)	*/
 12    14 
 12    15 	and_bits		initial("000100001"b),	/* opnd(1) <- opnd(2) & opnd(3)	*/
 12    16 	or_bits		initial("000100010"b),	/* opnd(1) <- opnd(2)|opnd(3)		*/
 12    17 	xor_bits		initial("000100011"b),	/* opnd(1) <- opnd(2) xor opnd(3)	*/
 12    18 	not_bits		initial("000100100"b),	/* opnd(1) <- ^opnd(2)		*/
 12    19 	cat_string	initial("000100101"b),	/* opnd(1) <- opnd(2)||opnd(3)	*/
 12    20 	bool_fun		initial("000100110"b),	/* opnd(1) <- bool(opnd(2),opnd(3),opnd(4)) */
 12    21 
 12    22 	assign		initial("000110001"b),	/* opnd(1) <- opnd(2)		*/
 12    23 	assign_size_ck	initial("000110010"b),	/* opnd(1) <- opnd(2)		*/
 12    24 	assign_zero	initial("000110011"b),	/* opnd(1) <- 0			*/
 12    25 	copy_words	initial("000110100"b),	/* move opnd(2) to opnd(1) by opnd(3) words */
 12    26 	copy_string	initial("000110101"b),	/* move opnd(2) to opnd(1) by opnd(3) units */
 12    27 	make_desc		initial("000110110"b),	/* opnd(1) <- descriptor(opnd(2),opnd(3)) */
 12    28 	assign_round	initial("000110111"b),	/* opnd(1) <- opnd(2) rounded		*/
 12    29 	pack		initial("000111000"b),	/* opnd(1) <- encode to picture opnd(2) */
 12    30 	unpack		initial("000111001"b),	/* opnd(1) <- decode from picture opnd(2) */
 12    31 
 12    32 	less_than		initial("001000100"b),	/* opnd(1) <- opnd(2) < opnd(3)	*/
 12    33 	greater_than	initial("001000101"b),	/* opnd(1) <- opnd(2) > opnd(3)	*/
 12    34 	equal		initial("001000110"b),	/* opnd(1) <- opnd(2) = opnd(3)	*/
 12    35 	not_equal		initial("001000111"b),	/* opnd(1) <- opnd(2) ^= opnd(3)	*/
 12    36 	less_or_equal	initial("001001000"b),	/* opnd(1) <- opnd(2) <= opnd(3)	*/
 12    37 	greater_or_equal	initial("001001001"b),	/* opnd(1) <- opnd(2) >= opnd(3)	*/
 12    38 
 12    39 	jump		initial("001010001"b),	/* go to opnd(1) unconditionally	*/
 12    40 	jump_true		initial("001010010"b),	/* go to opnd(1) if opnd(2) is not 0	*/
 12    41 	jump_false	initial("001010011"b),	/* go to opnd(1) if opnd(2) is all 0	*/
 12    42 	jump_if_lt	initial("001010100"b),	/* go to opnd(1) if opnd(2) < opnd(3)	*/
 12    43 	jump_if_gt	initial("001010101"b),	/* go to opnd(1) if opnd(2) > opnd(3)	*/
 12    44 	jump_if_eq	initial("001010110"b),	/* go to opnd(1) if opnd(2) = opnd(3)	*/
 12    45 	jump_if_ne	initial("001010111"b),	/* go to opnd(1) if opnd(2) ^= opnd(3)	*/
 12    46 	jump_if_le	initial("001011000"b),	/* go to opnd(1) if opnd(2) <= opnd(3)	*/
 12    47 	jump_if_ge	initial("001011001"b),	/* go to opnd(1) if opnd(2) >= opnd(3)	*/
 12    48 
 12    49 	std_arg_list	initial("001100001"b),	/* opnd(1) <- arglist(opnd(2) desclist(opnd(3)))	*/
 12    50 	return_words	initial("001100010"b),	/* return aggregate opnd(1), opnd(2) is length in words */
 12    51 	std_call		initial("001100011"b),	/* opnd(1) <- call opnd(2) with opnd(3)		*/
 12    52 	return_bits	initial("001100100"b),	/* return aggregate opnd(1), opnd(2) is length in bits */
 12    53 	std_entry		initial("001100101"b),	/* entry(opnd(1)... opnd(n))			*/
 12    54 	return_string	initial("001100110"b),	/* return string opnd(1) */
 12    55 	ex_prologue	initial("001100111"b),	/* execute the prologue -no operands-		*/
 12    56 	allot_auto	initial("001101000"b),	/* opnd(1) <- addrel(stack,opnd(2))		*/
 12    57 	param_ptr		initial("001101001"b),	/* opnd(1) <- ptr to opnd(2) in  block opnd(3)	*/
 12    58 	param_desc_ptr	initial("001101010"b),	/* opnd(1) <- ptr to opnd(2) in block opnd(3)	*/
 12    59 	std_return	initial("001101011"b),	/* return -no arguments-			*/
 12    60 	allot_ctl		initial("001101100"b),	/* allocate opnd(1) , length in words is opnd(2) 	*/
 12    61 	free_ctl		initial("001101101"b),	/* free opnd(1)				*/
 12    62 	stop		initial("001101110"b),	/* stop - terminate run unit			*/
 12    63 
 12    64 	mod_bit		initial("001110000"b),	/* opnd(1) <- mod(opnd(3),36),
 12    65*						   opnd(2) <- opnd(3) / 36		*/
 12    66 	mod_byte		initial("001110001"b),	/* opnd(1) <- mod(opnd(3),4),
 12    67*						   opnd(2) <- opnd(3) / 4		*/
 12    68 	mod_half		initial("001110010"b),	/* opnd(1) <- mod(opnd(3),2),
 12    69*						   opnd(2) <- opnd(3) / 2		*/
 12    70 	mod_word		initial("001110011"b),	/* TO BE DEFINED BY BLW			*/
 12    71 
 12    72 	bit_to_char	initial("010000000"b),	/* opnd(1) <- (opnd(2)+8)/9		*/
 12    73 	bit_to_word	initial("010000001"b),	/* opnd(1) <- (opnd(2)+35)/36		*/
 12    74 	char_to_word	initial("010000010"b),	/* opnd(1) <- (opnd(2)+3)/4		*/
 12    75 	half_to_word	initial("010000011"b),	/* opnd(1) <- (opnd(2)+1)/2		*/
 12    76 	word_to_mod2	initial("010000100"b),	/* opnd(1) <- (opnd(2)+1)/2*2		*/
 12    77 	word_to_mod4	initial("010000101"b),	/* opnd(1) <- (opnd(2)+3)/4*4		*/
 12    78 	word_to_mod8	initial("010000110"b),	/* opnd(1) <- (opnd(2)+7)/8*8		*/
 12    79 	rel_fun		initial("010000111"b),	/* opnd(1) <- rel(opnd(2))		*/
 12    80 	baseno_fun	initial("010001000"b),	/* opnd(1) <- baseno(opnd(2))		*/
 12    81 	desc_size		initial("010001001"b),	/* opnd(1) <- substr(opnd(2),13,24)	*/
 12    82 	bit_pointer	initial("010001010"b),	/* opnd(1) <- bit offset of opnd(2)	*/
 12    83 	index_before_fun	initial("010001011"b),	/* opnd(1) <- length of before(opnd(2),opnd(3)) */
 12    84 	index_after_fun	initial("010001100"b),	/* opnd(1) <- offset of after(opnd(2),opnd(3)) in opnd(2) */
 12    85 	verify_ltrim_fun	initial("010001101"b),	/* opnd(1) <- offset of ltrim(opnd(2),opnd(3)) in opnd(2) */
 12    86 	verify_rtrim_fun	initial("010001110"b),	/* opnd(1) <- length(opnd(2))-length(rtrim(opnd(2),opnd(3))) */
 12    87 	digit_to_bit	initial("010001111"b),	/* opnd(1) <- 9*opnd(2)/2		*/
 12    88 
 12    89 	ceil_fun		initial("010010000"b),	/* opnd(1) <- ceil(opnd(2))		*/
 12    90 	floor_fun		initial("010010001"b),	/* opnd(1) <- floor(opnd(2))		*/
 12    91 	round_fun		initial("010010010"b),	/* opnd(1) <- round(opnd(2))		*/
 12    92 	sign_fun		initial("010010011"b),	/* opnd(1) <- sign(opnd(2))		*/
 12    93 	abs_fun		initial("010010100"b),	/* opnd(1) <- abs(opnd(2))		*/
 12    94 	trunc_fun		initial("010010101"b),	/* opnd(1) <- trunc(opnd(2))		*/
 12    95 	byte_fun		initial("010010110"b),	/* opnd(1) <- byte(opnd(2))		*/
 12    96 	rank_fun		initial("010010111"b),	/* opnd(1) <- rank(opnd(2))		*/
 12    97 	index_rev_fun	initial("010011000"b),	/* opnd(1) <- index(reverse(opnd(2)),reverse(opnd(3))) */
 12    98 	search_rev_fun	initial("010011001"b),	/* opnd(1) <- search(reverse(opnd(2)),opnd(3)) */
 12    99 	verify_rev_fun	initial("010011010"b),	/* opnd(1) <- verify(reverse(opnd(2)),opnd(3)) */
 12   100 	wordno_fun	initial("010011011"b),        /* opnd(1) <- wordno (opnd(2)) */
 12   101 	segno_fun		initial("010011100"b),        /* opnd(1) <- segno (opnd(2)) */
 12   102 	bitno_fun           initial("010011101"b),        /* opnd(1) <- bitno (opnd(2)) */
 12   103 	charno_fun	initial("010011110"b),        /* opnd(1) <- charno (opnd(2)) */
 12   104 
 12   105 	index_fun		initial("010100000"b),	/* opnd(1) <- index(opnd(2),opnd(3))	*/
 12   106 	off_fun		initial("010100001"b),	/* opnd(1) <- offset(opnd(2),opnd(3))	*/
 12   107 	complex_fun	initial("010100010"b),	/* opnd(1) <- complex(opnd(2),opnd(3))	*/
 12   108 	conjg_fun		initial("010100011"b),	/* opnd(1) <- conjg(opnd(2),opnd(3))	*/
 12   109 	mod_fun		initial("010100100"b),	/* opnd(1) <- mod(opnd(2),opnd(3))	*/
 12   110 	repeat_fun	initial("010100101"b),	/* opnd(1) <- repeat(opnd(2),opnd(3))	*/
 12   111 	verify_fun	initial("010100110"b),	/* opnd(1) <- verify(opnd(2),opnd(3))	*/
 12   112 	translate_fun	initial("010100111"b),	/* opnd(1) <- translate(opnd(2),opnd(3))*/
 12   113 	real_fun   	initial("010101001"b),	/* opnd(1) <- real(opnd(2))		*/
 12   114 	imag_fun   	initial("010101010"b),	/* opnd(1) <- imag(opnd(2))		*/
 12   115 	length_fun	initial("010101011"b),	/* opnd(1) <- length(opnd(2))	*/
 12   116 	pl1_mod_fun	initial("010101100"b),	/* opnd(1) <- mod(opnd(2)) */
 12   117 	search_fun	initial("010101101"b),	/* opnd(1) <- search(opnd(2),opnd(3)) */
 12   118 	allocation_fun	initial("010101110"b),	/* opnd(1) <- allocation(opnd(2)) */
 12   119 	reverse_fun	initial("010101111"b),	/* opnd(1) <- reverse(opnd(2)) */
 12   120 
 12   121 	addr_fun		initial("010110000"b),	/* opnd(1) <- addr(opnd(2))		*/
 12   122 	addr_fun_bits	initial("010110001"b),	/* opnd(1) <- addr(opnd(2))		*/
 12   123 	ptr_fun		initial("010110010"b),	/* opnd(1) <- ptr(opnd(2),opnd(3))	*/
 12   124 	baseptr_fun	initial("010110011"b),	/* opnd(1) <- baseptr(opnd(2))	*/
 12   125 	addrel_fun	initial("010110100"b),	/* opnd(1) <- addrel(opnd(2),opnd(3))	*/
 12   126 	codeptr_fun	initial("010110101"b),	/* opnd(1) <- codeptr(opnd(2))	*/
 12   127 	environmentptr_fun	initial("010110110"b),	/* opnd(1) <- environmentptr(opnd(2))	*/
 12   128 	stackbaseptr_fun	initial("010110111"b),	/* opnd(1) is ptr to base of current stack	*/
 12   129 	stackframeptr_fun	initial("010111000"b),	/* opnd(1) is ptr to current block's stack frame	*/
 12   130 	setcharno_fun	initial("010111001"b),	/* opnd(1) <- opnd(2) with charno opnd(3) */
 12   131 	addcharno_fun	initial("010111010"b),	/* opnd(1) <- opnd(2) with charno = charno + opnd(3) */
 12   132 	setbitno_fun	initial("010111011"b),	/* setcharno for bitsno */
 12   133 	addbitno_fun	initial("010111100"b),	/* addcharno for bitno */
 12   134 
 12   135 	min_fun		initial("011000000"b),	/* opnd(1) <- min(opnd(1),opnd(2),...)	*/
 12   136 	max_fun		initial("011000001"b),	/* opnd(1) <- max(opnd(1),opnd(2),...)	*/
 12   137 
 12   138 	stack_ptr		initial("011010001"b),	/* opnd(1) <- stack frame ptr		*/
 12   139 	empty_area	initial("011010010"b),	/* empty opnd(1), length in words is opnd(2) */
 12   140 	enable_on		initial("011010100"b),	/* opnd(1) is the cond name
 12   141*						   opnd(2) is the file name
 12   142*						   opnd(3) is the block	*/
 12   143 	revert_on		initial("011010101"b),	/* opnd(1) is the cond name,
 12   144*						   opnd(2) is the file name	*/
 12   145 	signal_on		initial("011010110"b),	/* opnd(1) is the cond name
 12   146*						   opnd(2) is the file name */
 12   147 
 12   148 	lock_fun		initial("011010111"b),	/* opnd(1) <- stac(opnd(2),opnd(3))	*/
 12   149 	stacq_fun		initial("011011000"b),	/* opnd(1) is result, opnd(2) is ptr to lock word,
 12   150*						   opnd(3) is old value, (4) is new value. */
 12   151 	clock_fun		initial("011011001"b),	/* opnd(1) is the clock time		*/
 12   152 	vclock_fun	initial("011011010"b),	/* opnd(1) is the virtual clock time	*/
 12   153 
 12   154 	bound_ck		initial("011100000"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 12   155 	range_ck		initial("011100001"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 12   156 	loop		initial("011100010"b),	/* do opnd(1) for opnd(2) from opnd(3) to opnd(4) by 1,
 12   157*						   opnd(5) is the list */
 12   158 	join		initial("011100011"b),	/* do opnd(1), opnd(2) ... opnd(n)	*/
 12   159 	allot_based	initial("011100100"b),	/* allocate opnd(2) words in opnd(3), set opnd(1) */
 12   160 	free_based	initial("011100101"b),	/* free opnd(1) in opnd(3), length is opnd(2) words */
 12   161 
 12   162 	r_parn		initial("011110001"b),	/* format op code			*/
 12   163 	l_parn		initial("011110010"b),
 12   164 	r_format		initial("011110011"b),
 12   165 	c_format		initial("011110100"b),
 12   166 	f_format		initial("011110101"b),
 12   167 	e_format		initial("011110110"b),
 12   168 	b_format		initial("011110111"b),
 12   169 	a_format		initial("011111000"b),
 12   170 	x_format		initial("011111001"b),
 12   171 	skip_format	initial("011111010"b),
 12   172 	column_format	initial("011111011"b),
 12   173 	page_format	initial("011111100"b),
 12   174 	line_format	initial("011111101"b),
 12   175 	picture_format	initial("011111110"b),
 12   176 	bn_format		initial("011111111"b),	/* bit format, length(opnd(2)), radix factor(opnd(3)) */
 12   177 
 12   178 	get_list_trans	initial("100000000"b),	/* getlist(opnd(2) with desc(opnd(1)))	*/
 12   179 	get_edit_trans	initial("100000001"b),	/* getedit(opnd(2) with desc(opnd(1)))	*/
 12   180 	get_data_trans	initial("100000010"b),	/* getdata(opnd(1) to opnd(n))	*/
 12   181 	put_list_trans	initial("100000011"b),	/* putlist(opnd(2) with desc(opnd(1)))	*/
 12   182 	put_edit_trans	initial("100000100"b),	/* putedit(opnd(2) with desc(opnd(1)))	*/
 12   183 	put_data_trans	initial("100000101"b),	/* putdata(opnd(2)) with subscript-list opnd(1) */
 12   184 	terminate_trans	initial("100000110"b),	/* terminate stream transmission	*/
 12   185 	stream_prep	initial("100000111"b),	/* initiate stream transmission	*/
 12   186 	record_io		initial("100001000"b),	/* perform record io operation	*/
 12   187 	fortran_read	initial("100001001"b),	/* A complete read statement		*/
 12   188 	fortran_write	initial("100001010"b),	/* A complete write statement		*/
 12   189 	ftn_file_manip	initial("100001011"b),	/* endfile,backspace,rewind,etc.	*/
 12   190 	ftn_trans_loop	initial("100001100"b),	/* An implied do in i/o list		*/
 12   191 	put_control	initial("100001101"b),	/* put control opnd(1) opnd(2) times	*/
 12   192 	put_field		initial("100001110"b),	/* putlist(opnd(2)) of length(opnd(1))	*/
 12   193 	put_field_chk	initial("100001111"b),	/* putlist(op(2)) of len(op(1)) check char index(op(3)) */
 12   194 
 12   195 /* These operators are produced by the parse but are not used as input to the code generator.	*/
 12   196 /* They are processed by the semantic translator.						*/
 12   197 
 12   198 	return_value	initial("100010010"b),	/* return(opnd(1))			*/
 12   199 	allot_var		initial("100010011"b),	/* allot opnd(1) in opnd(2)		*/
 12   200 	free_var		initial("100010100"b),	/* free opnd(1) out of opnd(2)	*/
 12   201 	get_file		initial("100010101"b),	/* opnd(1) is filename,opnd(2) is copy	*/
 12   202 						/* opnd(3) is skip, opnd(4) is list	*/
 12   203 	get_string	initial("100010110"b),	/* opnd(1) is string,opnd(2) is list	*/
 12   204 	put_file		initial("100010111"b),	/* opnd(1) is filename,opnd(2) is page	*/
 12   205 						/* opnd(3) is skip,opnd(4) is line	*/
 12   206 	put_string	initial("100011000"b),	/* opnd(1) is string,opnd(2) is list	*/
 12   207 	open_file		initial("100011001"b),
 12   208 	close_file	initial("100011010"b),
 12   209 	read_file		initial("100011011"b),
 12   210 	write_file	initial("100011100"b),
 12   211 	locate_file	initial("100011101"b),
 12   212 	do_fun		initial("100011110"b),	/* opnd(1) is join of a list		*/
 12   213 						/* opnd(2) is control variable ref	*/
 12   214 						/* opnd(3) is specification operator	*/
 12   215 	do_spec		initial("100011111"b),	/* opnd(1) to opnd(2) by opnd(3) 	*/
 12   216 						/* repeat opnd(4) while opnd(5)	*/
 12   217 						/* opnd(6) is next specification	*/
 12   218 
 12   219 	rewrite_file	initial("100100000"b),
 12   220 	delete_file	initial("100100001"b),
 12   221 	unlock_file	initial("100100010"b),
 12   222 	lock_file		initial("100100011"b),
 12   223 	refer		initial("100100101"b),	/* opnd(1) refer(opnd(2))		*/
 12   224 	prefix_plus	initial("100100110"b),	/* opnd(1) <- +opnd(2)		*/
 12   225 	nop		initial("100100111"b),	/* no-op */
 12   226 	assign_by_name	initial("100101000"b),	/* opnd(1) <- opnd(2),by name		*/
 12   227 
 12   228 /* These operators are produced by the semantic translator in processing the math
 12   229*   builtin functions and are used as input to the code generator			*/
 12   230 
 12   231 	sqrt_fun		initial("100110000"b),	/* opnd(1) <- sqrt(opnd(2))	*/
 12   232 	sin_fun		initial("100110001"b),	/* opnd(1) <- sin(opnd(2))	*/
 12   233 	sind_fun		initial("100110010"b),	/* opnd(1) <- sind(opnd(2))	*/
 12   234 	cos_fun		initial("100110011"b),	/* opnd(1) <- cos(opnd(2))	*/
 12   235 	cosd_fun		initial("100110100"b),	/* opnd(1) <- cosd(opnd(2))	*/
 12   236 	tan_fun		initial("100110101"b),	/* opnd(1) <- tan(opnd(2))	*/
 12   237 	tand_fun		initial("100110110"b),	/* opnd(1) <- tand(opnd(2))	*/
 12   238 	asin_fun		initial("100110111"b),	/* opnd(1) <- asin(opnd(2))	*/
 12   239 	asind_fun		initial("100111000"b),	/* opnd(1) <- asind(opnd(2))	*/
 12   240 	acos_fun		initial("100111001"b),	/* opnd(1) <- acos(opnd(2))	*/
 12   241 	acosd_fun		initial("100111010"b),	/* opnd(1) <- acosd(opnd(2))	*/
 12   242 	atan_fun		initial("100111011"b),	/* opnd(1) <- atan(opnd(2)[,opnd(3)])	*/
 12   243 	atand_fun		initial("100111100"b),	/* opnd(1) <- atand(opnd(2)[,opnd(3)])	*/
 12   244 	log2_fun		initial("100111101"b),	/* opnd(1) <- log2(opnd(2))	*/
 12   245 	log_fun		initial("100111110"b),	/* opnd(1) <- log(opnd(2))	*/
 12   246 	log10_fun		initial("100111111"b),	/* opnd(1) <- log10(opnd(2))	*/
 12   247 
 12   248 	exp_fun		initial("101000000"b))	/* opnd(1) <- exp(opnd(2))	*/
 12   249 
 12   250 			bit(9) aligned internal static options(constant);
 12   251 
 12   252 /* END INCLUDE FILE ... op_codes.incl.pl1 */
     1122 
 13     1 /* BEGIN INCLUDE FILE ... semantic_bits.incl.pl1 */
 13     2 
 13     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
 13     4 
 13     5 dcl	context aligned bit(36),
 13     6 	this_context aligned bit(36);
 13     7 
 13     8 dcl	1 def_context		aligned based(addr(context)),
 13     9 	2 aggregate		unaligned bit(1),
 13    10 	2 arg_list		unaligned bit(1),
 13    11 	2 left_side		unaligned bit(1),
 13    12 	2 return			unaligned bit(1),
 13    13 	2 evaluate_offset		unaligned bit(1),
 13    14 	2 top			unaligned bit(1),
 13    15 	2 RHS_aggregate		unaligned bit(1),
 13    16 	2 return_from_empty		unaligned bit(1),
 13    17 	2 ignore_based		unaligned bit(1),
 13    18 	2 ext_param		unaligned bit(1),
 13    19 	2 cross_section		unaligned bit(1),
 13    20 	2 string_unspec		unaligned bit(1),
 13    21 	2 f_offset_to_be_added	unaligned bit(1),
 13    22 	2 suppress_cross_ref	unaligned bit(1),
 13    23 	2 by_name_assignment	unaligned bit(1),
 13    24 	2 by_name_lookup		unaligned bit(1),
 13    25 	2 pad			unaligned bit(20);
 13    26 
 13    27 dcl	1 def_this_context		aligned like def_context based(addr(this_context));
 13    28 
 13    29 /* END INCLUDE FILE ... semantic_bits.incl.pl1 */
     1123 
 14     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
 14     2 
 14     3 dcl	1 symbol			based aligned,
 14     4 	2 node_type		bit(9) unal,
 14     5 	2 source_id		structure unal,
 14     6 	  3 file_number		bit(8),
 14     7 	  3 line_number		bit(14),
 14     8 	  3 statement_number	bit(5),
 14     9 	2 location		fixed(18) unal unsigned,
 14    10 	2 allocated		bit(1) unal,
 14    11 	2 dcl_type		bit(3) unal,
 14    12 	2 reserved		bit(6) unal,
 14    13 	2 pix			unal,
 14    14 	  3 pic_fixed		bit(1) unal,
 14    15 	  3 pic_float		bit(1) unal,
 14    16 	  3 pic_char		bit(1) unal,
 14    17 	  3 pic_scale		fixed(7) unal,
 14    18 	  3 pic_size		fixed(7) unal,
 14    19 	2 level			fixed(8) unal,
 14    20 	2 boundary		fixed(3) unal,
 14    21 	2 size_units		fixed(3) unal,
 14    22 	2 scale			fixed(7) unal,
 14    23 	2 runtime			bit(18) unal,
 14    24 	2 runtime_offset		bit(18) unal,
 14    25 	2 block_node		ptr unal,
 14    26 	2 token			ptr unal,
 14    27 	2 next			ptr unal,
 14    28 	2 multi_use		ptr unal,
 14    29 	2 cross_references		ptr unal,
 14    30 	2 initial			ptr unal,
 14    31 	2 array			ptr unal,
 14    32 	2 descriptor		ptr unal,
 14    33 	2 equivalence		ptr unal,
 14    34 	2 reference		ptr unal,
 14    35 	2 general			ptr unal,
 14    36 	2 father			ptr unal,
 14    37 	2 brother			ptr unal,
 14    38 	2 son			ptr unal,
 14    39 	2 word_size		ptr unal,
 14    40 	2 bit_size		ptr unal,
 14    41 	2 dcl_size		ptr unal,
 14    42 	2 symtab_size		ptr unal,
 14    43 	2 c_word_size		fixed(24),
 14    44 	2 c_bit_size		fixed(24),
 14    45 	2 c_dcl_size		fixed(24),
 14    46 
 14    47 	2 attributes		structure aligned,
 14    48 	  3 data_type		structure unal,
 14    49 	    4 structure		bit(1) ,
 14    50 	    4 fixed		bit(1),
 14    51 	    4 float		bit(1),
 14    52 	    4 bit			bit(1),
 14    53 	    4 char		bit(1),
 14    54 	    4 ptr			bit(1),
 14    55 	    4 offset		bit(1),
 14    56 	    4 area		bit(1),
 14    57 	    4 label		bit(1),
 14    58 	    4 entry		bit(1),
 14    59 	    4 file		bit(1),
 14    60 	    4 arg_descriptor	bit(1),
 14    61 	    4 storage_block		bit(1),
 14    62 	    4 explicit_packed	bit(1), /* options(packed) */
 14    63 	    4 condition		bit(1),
 14    64 	    4 format		bit(1),
 14    65 	    4 builtin		bit(1),
 14    66 	    4 generic		bit(1),
 14    67 	    4 picture		bit(1),
 14    68 
 14    69 	  3 misc_attributes		structure unal,
 14    70 	    4 dimensioned		bit(1),
 14    71 	    4 initialed		bit(1),
 14    72 	    4 aligned		bit(1),
 14    73 	    4 unaligned		bit(1),
 14    74 	    4 signed		bit(1),
 14    75 	    4 unsigned		bit(1),
 14    76 	    4 precision		bit(1),
 14    77 	    4 varying		bit(1),
 14    78 	    4 local		bit(1),
 14    79 	    4 decimal		bit(1),
 14    80 	    4 binary		bit(1),
 14    81 	    4 real		bit(1),
 14    82 	    4 complex		bit(1),
 14    83 	    4 variable		bit(1),
 14    84 	    4 reducible		bit(1),
 14    85 	    4 irreducible		bit(1),
 14    86 	    4 returns		bit(1),
 14    87 	    4 position		bit(1),
 14    88 	    4 internal		bit(1),
 14    89 	    4 external		bit(1),
 14    90 	    4 like		bit(1),
 14    91 	    4 member		bit(1),
 14    92 	    4 non_varying		bit(1),
 14    93 	    4 options		bit(1),
 14    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
 14    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
 14    96 
 14    97 	  3 storage_class		structure unal,
 14    98 	    4 auto		bit(1),
 14    99 	    4 based		bit(1),
 14   100 	    4 static		bit(1),
 14   101 	    4 controlled		bit(1),
 14   102 	    4 defined		bit(1),
 14   103 	    4 parameter		bit(1),
 14   104 	    4 param_desc		bit(1),
 14   105 	    4 constant		bit(1),
 14   106 	    4 temporary		bit(1),
 14   107 	    4 return_value		bit(1),
 14   108 
 14   109 	  3 file_attributes		structure unal,
 14   110 	    4 print		bit(1),
 14   111 	    4 input		bit(1),
 14   112 	    4 output		bit(1),
 14   113 	    4 update		bit(1),
 14   114 	    4 stream		bit(1),
 14   115 	    4 reserved_1		bit(1),
 14   116 	    4 record		bit(1),
 14   117 	    4 sequential		bit(1),
 14   118 	    4 direct		bit(1),
 14   119 	    4 interactive		bit(1),		/* env(interactive) */
 14   120 	    4 reserved_2		bit(1),
 14   121 	    4 reserved_3		bit(1),
 14   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
 14   123 	    4 keyed		bit(1),
 14   124 	    4 reserved_4		bit(1),
 14   125 	    4 environment		bit(1),
 14   126 
 14   127 	  3 compiler_developed	structure unal,
 14   128 	    4 aliasable		bit(1),
 14   129 	    4 packed		bit(1),
 14   130 	    4 passed_as_arg		bit(1),
 14   131 	    4 allocate		bit(1),
 14   132 	    4 set			bit(1),
 14   133 	    4 exp_extents		bit(1),
 14   134 	    4 refer_extents		bit(1),
 14   135 	    4 star_extents		bit(1),
 14   136 	    4 isub		bit(1),
 14   137 	    4 put_in_symtab		bit(1),
 14   138 	    4 contiguous		bit(1),
 14   139 	    4 put_data		bit(1),
 14   140 	    4 overlayed		bit(1),
 14   141 	    4 error		bit(1),
 14   142 	    4 symtab_processed	bit(1),
 14   143 	    4 overlayed_by_builtin	bit(1),
 14   144 	    4 defaulted		bit(1),
 14   145 	    4 connected		bit(1);
 14   146 
 14   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
     1124 
 15     1 dcl	1 array			based aligned,
 15     2 	2 node_type		bit(9) unaligned,
 15     3 	2 reserved		bit(34) unaligned,
 15     4 	2 number_of_dimensions	fixed(7) unaligned,
 15     5 	2 own_number_of_dimensions	fixed(7) unaligned,
 15     6 	2 element_boundary		fixed(3) unaligned,
 15     7 	2 size_units		fixed(3) unaligned,
 15     8 	2 offset_units		fixed(3) unaligned,
 15     9 	2 interleaved		bit(1) unaligned,
 15    10 	2 c_element_size		fixed(24),
 15    11 	2 c_element_size_bits	fixed(24),
 15    12 	2 c_virtual_origin		fixed(24),
 15    13 	2 element_size		ptr unaligned,
 15    14 	2 element_size_bits		ptr unaligned,
 15    15 	2 virtual_origin		ptr unaligned,
 15    16 	2 symtab_virtual_origin	ptr unaligned,
 15    17 	2 symtab_element_size	ptr unaligned,
 15    18 	2 bounds			ptr unaligned,
 15    19 	2 element_descriptor	ptr unaligned;
 15    20 
 15    21 dcl	1 bound			based aligned,
 15    22 	2 node_type		bit(9),
 15    23 	2 c_lower			fixed(24),
 15    24 	2 c_upper			fixed(24),
 15    25 	2 c_multiplier		fixed(24),
 15    26 	2 c_desc_multiplier		fixed(24),
 15    27 	2 lower			ptr unaligned,
 15    28 	2 upper			ptr unaligned,
 15    29 	2 multiplier		ptr unaligned,
 15    30 	2 desc_multiplier		ptr unaligned,
 15    31 	2 symtab_lower		ptr unaligned,
 15    32 	2 symtab_upper		ptr unaligned,
 15    33 	2 symtab_multiplier		ptr unaligned,
 15    34 	2 next			ptr unaligned;
     1125 
 16     1 /* BEGIN INCLUDE FILE ... system.incl.pl1 */
 16     2 
 16     3 /* Modified: 25 Apr 1979 by PCK to implemnt 4-bit decimal */
 16     4 
 16     5 dcl (	max_p_flt_bin_1			initial(27),
 16     6 	max_p_flt_bin_2			initial(63),
 16     7 	max_p_fix_bin_1			initial(35),
 16     8 	max_p_fix_bin_2			initial(71),
 16     9 
 16    10 	max_p_dec				initial(59),
 16    11 	max_p_bin_or_dec			initial (71),	/* max (max_p_fix_bin_2, max_p_dec) */
 16    12 
 16    13 	min_scale				initial(-128),
 16    14 	max_scale				initial(+127),
 16    15 	max_bit_string			initial(9437184),
 16    16 	max_char_string			initial(1048576),
 16    17 	max_area_size			initial(262144),
 16    18 	min_area_size			initial(28),
 16    19 
 16    20 	max_bit_string_constant		initial (253),	/* max length of bit literals */
 16    21 	max_char_string_constant		initial (254),	/* max length of character literals */
 16    22 	max_identifier_length		initial (256),
 16    23 	max_number_of_dimensions		initial (127),
 16    24 
 16    25 	max_length_precision		initial(24),
 16    26 	max_offset_precision		initial(24),	/* 18 bits for word offset + 6 bits for bit offset */
 16    27 
 16    28 	max_words_per_variable		initial (262144),
 16    29 
 16    30 	bits_per_word			initial(36),
 16    31 	bits_per_double			initial(72),
 16    32 	packed_digits_per_character		initial(2),
 16    33 	characters_per_half			initial(2),
 16    34 	characters_per_word			initial(4),
 16    35 	characters_per_double		initial(8),
 16    36 
 16    37 	bits_per_character			initial(9),
 16    38 	bits_per_half			initial(18),
 16    39 	bits_per_decimal_digit		initial(9),
 16    40 	bits_per_binary_exponent		initial(8),
 16    41 	bits_per_packed_ptr			initial(36),
 16    42 	words_per_packed_pointer		initial(1),
 16    43 
 16    44 	words_per_fix_bin_1			initial(1),
 16    45 	words_per_fix_bin_2			initial(2),
 16    46 	words_per_flt_bin_1			initial(1),
 16    47 	words_per_flt_bin_2			initial(2),
 16    48 	words_per_varying_string_header	initial(1),
 16    49 	words_per_offset			initial(1),
 16    50 	words_per_pointer			initial(2),
 16    51 	words_per_label_var			initial(4),
 16    52 	words_per_entry_var			initial(4),
 16    53 	words_per_file_var			initial(4),
 16    54 	words_per_format			initial(4),
 16    55 	words_per_condition_var		initial(6),
 16    56 
 16    57 	max_index_register_value		initial(262143),
 16    58 	max_signed_index_register_value	initial(131071),
 16    59 
 16    60 	max_signed_xreg_precision		initial(17),
 16    61 	max_uns_xreg_precision		initial(18),
 16    62 
 16    63 	default_area_size			initial(1024),
 16    64 	default_flt_bin_p			initial(27),
 16    65 	default_fix_bin_p			initial(17),
 16    66 	default_flt_dec_p			initial(10),
 16    67           default_fix_dec_p   		initial(7)) fixed bin(31) internal static options(constant);
 16    68 
 16    69 dcl	bits_per_digit			initial(4.5)  fixed bin(31,1) internal static options(constant);
 16    70 
 16    71 dcl (	integer_type		initial("010000000000000000000100000001100000"b),
 16    72 	dec_integer_type		initial("010000000000000000000100000010100000"b),
 16    73 	pointer_type		initial("000001000000000000000100000000000000"b),
 16    74 	real_type			initial("001000000000000000000100000001100000"b),
 16    75 	complex_type		initial("001000000000000000000100000001010000"b),
 16    76 	builtin_type		initial("000000000000000010000000000000000000"b),
 16    77 	storage_block_type		initial("000000000000100000000000000000000000"b),
 16    78 	arg_desc_type		initial("000000000001000000000000000000000000"b),
 16    79 	local_label_var_type	initial("000000001000000000000100000100001000"b),
 16    80 	entry_var_type		initial("000000000100000000000000000000001000"b),
 16    81 	bit_type			initial("000100000000000000000000000000000000"b),
 16    82 	char_type			initial("000010000000000000000000000000000000"b)) bit(36) aligned int static
 16    83 									options(constant);
 16    84 
 16    85 /* END INCLUDE FILE ... system.incl.pl1 */
     1126 
 17     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
 17     2 
 17     3 dcl	1 reference		based aligned,
 17     4 	2 node_type		bit(9) unaligned,
 17     5 	2 array_ref		bit(1) unaligned,
 17     6 	2 varying_ref		bit(1) unaligned,
 17     7 	2 shared			bit(1) unaligned,
 17     8 	2 put_data_sw		bit(1) unaligned,
 17     9 	2 processed		bit(1) unaligned,
 17    10 	2 units			fixed(3) unaligned,
 17    11 	2 ref_count		fixed(17) unaligned,
 17    12 	2 c_offset		fixed(24),
 17    13 	2 c_length		fixed(24),
 17    14 	2 symbol			ptr unaligned,
 17    15 	2 qualifier		ptr unaligned,
 17    16 	2 offset			ptr unaligned,
 17    17 	2 length			ptr unaligned,
 17    18 	2 subscript_list		ptr unaligned,
 17    19 						/* these fields are used by the 645 code generator */
 17    20 	2 address			structure unaligned,
 17    21 	  3 base			bit(3),
 17    22 	  3 offset		bit(15),
 17    23 	  3 op			bit(9),
 17    24 	  3 no_address		bit(1),
 17    25 	  3 inhibit		bit(1),
 17    26 	  3 ext_base		bit(1),
 17    27 	  3 tag			bit(6),
 17    28 	2 info			structure unaligned,
 17    29 	  3 address_in		structure,
 17    30 	    4 b			dimension(0:7) bit(1),
 17    31 	    4 storage		bit(1),
 17    32 	  3 value_in		structure,
 17    33 	    4 a			bit(1),
 17    34 	    4 q			bit(1),
 17    35 	    4 aq			bit(1),
 17    36 	    4 string_aq		bit(1),
 17    37 	    4 complex_aq		bit(1),
 17    38 	    4 decimal_aq		bit(1),
 17    39 	    4 b			dimension(0:7) bit(1),
 17    40 	    4 storage		bit(1),
 17    41 	    4 indicators		bit(1),
 17    42 	    4 x			dimension(0:7) bit(1),
 17    43 	  3 other			structure,
 17    44 	    4 big_offset		bit(1),
 17    45 	    4 big_length		bit(1),
 17    46 	    4 modword_in_offset	bit(1),
 17    47 	2 data_type		fixed(5) unaligned,
 17    48 	2 bits			structure unaligned,
 17    49 	  3 padded_ref		bit(1),
 17    50 	  3 aligned_ref		bit(1),
 17    51 	  3 long_ref		bit(1),
 17    52 	  3 forward_ref		bit(1),
 17    53 	  3 ic_ref		bit(1),
 17    54 	  3 temp_ref		bit(1),
 17    55 	  3 defined_ref		bit(1),
 17    56 	  3 evaluated		bit(1),
 17    57 	  3 allocate		bit(1),
 17    58 	  3 allocated		bit(1),
 17    59 	  3 aliasable		bit(1),
 17    60 	  3 even			bit(1),
 17    61 	  3 perm_address		bit(1),
 17    62 	  3 aggregate		bit(1),
 17    63 	  3 hit_zero		bit(1),
 17    64 	  3 dont_save		bit(1),
 17    65 	  3 fo_in_qual		bit(1),
 17    66 	  3 hard_to_load		bit(1),
 17    67 	2 relocation		bit(12) unaligned,
 17    68 	2 more_bits		structure unaligned,
 17    69 	  3 substr		bit(1),
 17    70 	  3 padded_for_store_ref	bit(1),
 17    71 	  3 aligned_for_store_ref	bit(1),
 17    72 	  3 mbz			bit(15),
 17    73 	2 store_ins		bit(18) unaligned;
 17    74 
 17    75 /* END INCLUDE FILE ... reference.incl.pl1 */
     1127 
 18     1 /* BEGIN INCLUDE FILE ... token.incl.pl1 */
 18     2 
 18     3 dcl	1 token			based aligned,
 18     4 	2 node_type		bit(9) unaligned,
 18     5 	2 type			bit(9) unaligned,
 18     6 	2 loc			bit(18) unaligned,	/* symtab offset for identifiers, "p" flag for constants */
 18     7 	2 declaration		ptr unaligned,
 18     8 	2 next			ptr unaligned,
 18     9 	2 size			fixed(9),
 18    10 	2 string			char(n refer(token.size));
 18    11 
 18    12 /* END INCLUDE FILE ... token.incl.pl1 */
     1128 
 19     1 /* BEGIN INCLUDE FILE ... token_types.incl.pl1 */
 19     2 
 19     3 dcl (	no_token		initial("000000000"b),	/*	token types		*/
 19     4 	identifier	initial("100000000"b),
 19     5 	isub		initial("010000000"b),
 19     6 	plus		initial("001000001"b),
 19     7 	minus		initial("001000010"b),
 19     8 	asterisk		initial("001000011"b),
 19     9 	slash		initial("001000100"b),
 19    10 	expon		initial("001000101"b),
 19    11 	not		initial("001000110"b),
 19    12 	and		initial("001000111"b),
 19    13 	or		initial("001001000"b),
 19    14 	cat		initial("001001001"b),
 19    15 	eq		initial("001001010"b),
 19    16 	ne		initial("001001011"b),
 19    17 	lt		initial("001001100"b),
 19    18 	gt		initial("001001101"b),
 19    19 	le		initial("001001110"b),
 19    20 	ge		initial("001001111"b),
 19    21 	ngt		initial("001010000"b),
 19    22 	nlt		initial("001010001"b),
 19    23 	assignment	initial("001010010"b),
 19    24 	colon		initial("001010011"b),
 19    25 	semi_colon	initial("001010100"b),
 19    26 	comma		initial("001010101"b),
 19    27 	period		initial("001010110"b),
 19    28 	arrow		initial("001010111"b),
 19    29 	left_parn		initial("001011000"b),
 19    30 	right_parn	initial("001011001"b),
 19    31 	percent		initial("001011100"b),
 19    32 	bit_string	initial("000100001"b),
 19    33 	char_string	initial("000100010"b),
 19    34 	bin_integer	initial("000110001"b),
 19    35 	dec_integer	initial("000110011"b),
 19    36 	fixed_bin		initial("000110000"b),
 19    37 	fixed_dec		initial("000110010"b),
 19    38 	float_bin		initial("000110100"b),
 19    39 	float_dec		initial("000110110"b),
 19    40 	i_bin_integer	initial("000111001"b),
 19    41 	i_dec_integer	initial("000111011"b),
 19    42 	i_fixed_bin	initial("000111000"b),
 19    43 	i_fixed_dec	initial("000111010"b),
 19    44 	i_float_bin	initial("000111100"b),
 19    45 	i_float_dec	initial("000111110"b)) bit (9) aligned internal static options (constant);
 19    46 
 19    47 dcl (	is_identifier		initial ("100000000"b),	/*	token type masks		*/
 19    48 	is_isub			initial ("010000000"b),
 19    49 	is_delimiter		initial ("001000000"b),
 19    50 	is_constant		initial ("000100000"b),
 19    51 	is_arith_constant		initial ("000010000"b),	/* N.B. not really a mask...s/b "000110000"b */
 19    52 	is_arithmetic_constant	initial ("000110000"b),
 19    53 	is_imaginary_constant	initial ("000111000"b),
 19    54 	is_float_constant		initial ("000110100"b),
 19    55 	is_decimal_constant		initial ("000110010"b),
 19    56 	is_integral_constant 	initial ("000110001"b)
 19    57 	) bit(9) internal static aligned options(constant);
 19    58 
 19    59 /* END INCLUDE FILE ... token_types.incl.pl1 */
     1129 
 20     1 /* ***********************************************************
 20     2*   *                                                         *
 20     3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
 20     4*   *                                                         *
 20     5*   *********************************************************** */
 20     6 /* BEGIN INCLUDE FILE ... statement.incl.pl1 */
 20     7 /* Internal interface of the PL/I compiler */
 20     8 
 20     9 dcl	1 statement		based aligned,
 20    10 	2 node_type		bit(9) unaligned,
 20    11 	2 source_id		structure unaligned,
 20    12 	  3 file_number		bit(8),
 20    13 	  3 line_number		bit(14),
 20    14 	  3 statement_number	bit(5),
 20    15 	2 next			ptr unaligned,
 20    16 	2 back			ptr unaligned,
 20    17 	2 root			ptr unaligned,
 20    18 	2 labels			ptr unaligned,
 20    19 	2 reference_list		ptr unaligned,
 20    20 	2 state_list		ptr unaligned,
 20    21 	2 reference_count		fixed(17) unaligned,
 20    22 	2 ref_count_copy		fixed(17) unaligned,
 20    23 	2 object			structure unaligned,
 20    24 	  3 start			fixed(17),
 20    25 	  3 finish		fixed(17),
 20    26 	2 source			structure unaligned,
 20    27 	  3 segment		fixed(11),
 20    28 	  3 start			fixed(23),
 20    29 	  3 length		fixed(11),
 20    30 	2 prefix			bit(12) unaligned,
 20    31 	2 optimized		bit(1) unaligned,
 20    32 	2 free_temps		bit(1) unaligned,
 20    33 	2 LHS_in_RHS		bit(1) unaligned,
 20    34 	2 statement_type		bit(9) unaligned,
 20    35 	2 bits			structure unaligned,
 20    36 	  3 processed		bit(1) unaligned,
 20    37 	  3 put_in_profile		bit(1) unaligned,
 20    38 	  3 generated		bit(1) unaligned,
 20    39 	  3 snap			bit(1) unaligned,
 20    40 	  3 system		bit(1) unaligned,
 20    41 	  3 irreducible		bit(1) unaligned,
 20    42 	  3 checked		bit(1) unaligned,
 20    43 	  3 save_temps		bit(1) unaligned,
 20    44 	  3 suppress_warnings	bit(1) unaligned,
 20    45 	  3 force_nonquick		bit(1) unaligned,
 20    46 	  3 expanded_by_name	bit(1) unaligned,
 20    47 	  3 begins_loop		bit(1) unaligned,
 20    48 	  3 pad			bit(24) unaligned;
 20    49 
 20    50 /* END INCLUDE FILE ... statement.incl.pl1 */
     1130 
 21     1 	/* statement types */
 21     2 
 21     3 dcl (	unknown_statement		initial("000000000"b),
 21     4 	allocate_statement		initial("000000001"b),
 21     5 	assignment_statement	initial("000000010"b),
 21     6 	begin_statement		initial("000000011"b),
 21     7 	call_statement		initial("000000100"b),
 21     8 	close_statement		initial("000000101"b),
 21     9 	declare_statement		initial("000000110"b),
 21    10 	lock_statement		initial("000000111"b),
 21    11 	delete_statement		initial("000001000"b),
 21    12 	display_statement		initial("000001001"b),
 21    13 	do_statement		initial("000001010"b),
 21    14 	else_clause		initial("000001011"b),
 21    15 	end_statement		initial("000001100"b),
 21    16 	entry_statement		initial("000001101"b),
 21    17 	exit_statement		initial("000001110"b),
 21    18 	format_statement		initial("000001111"b),
 21    19 	free_statement		initial("000010000"b),
 21    20 	get_statement		initial("000010001"b),
 21    21 	goto_statement		initial("000010010"b),
 21    22 	if_statement		initial("000010011"b),
 21    23 	locate_statement		initial("000010100"b),
 21    24 	null_statement		initial("000010101"b),
 21    25 	on_statement		initial("000010110"b),
 21    26 	open_statement		initial("000010111"b),
 21    27 	procedure_statement 	initial("000011000"b),
 21    28 	put_statement		initial("000011001"b),
 21    29 	read_statement		initial("000011010"b),
 21    30 	return_statement		initial("000011011"b),
 21    31 	revert_statement		initial("000011100"b),
 21    32 	rewrite_statement		initial("000011101"b),
 21    33 	signal_statement		initial("000011110"b),
 21    34 	stop_statement		initial("000011111"b),
 21    35 	system_on_unit		initial("000100000"b),
 21    36 	unlock_statement		initial("000100001"b),
 21    37 	wait_statement		initial("000100010"b),
 21    38 	write_statement		initial("000100011"b),
 21    39 	default_statement		initial("000100100"b),
 21    40 	continue_statement		initial("000100101"b)) bit(9) internal static aligned options(constant);
     1131 
 22     1 /* BEGIN INCLUDE FILE ... declare_type.incl.pl1 */
 22     2 
 22     3 /* Modified: 25 Apr 1979 by PCK to implement 4-bit decimal */
 22     4 
 22     5 dcl  (	by_declare	initial("001"b),
 22     6 	by_explicit_context initial("010"b),
 22     7 	by_context	initial("011"b),
 22     8 	by_implication	initial("100"b),
 22     9 	by_compiler	initial("101"b)) int static bit(3) aligned options(constant);
 22    10 
 22    11 /* END INCLUDE FILE ... declare_type.incl.pl1 */
     1132 
 23     1 dcl	1 label			based aligned,
 23     2 	2 node_type		bit(9) unaligned,
 23     3 	2 source_id		structure unaligned,
 23     4 	  3 file_number		bit(8),
 23     5 	  3 line_number		bit(14),
 23     6 	  3 statement_number	bit(5),
 23     7 	2 location		fixed(17) unaligned,
 23     8 	2 allocated		bit(1) unaligned,
 23     9 	2 dcl_type		bit(3) unaligned,
 23    10 	2 reserved		bit(29) unaligned,
 23    11 	2 array			bit(1) unaligned,
 23    12 	2 used_as_format		bit(1) unaligned,
 23    13 	2 used_in_goto		bit(1) unaligned,
 23    14 	2 symbol_table		bit(18) unaligned,
 23    15 	2 low_bound		fixed(17) unaligned,
 23    16 	2 high_bound		fixed(17) unaligned,
 23    17 	2 block_node		ptr unaligned,
 23    18 	2 token			ptr unaligned,
 23    19 	2 next			ptr unaligned,
 23    20 	2 multi_use		ptr unaligned,
 23    21 	2 cross_reference		ptr unaligned,
 23    22 	2 statement		ptr unaligned;
     1133 
 24     1 
 24     2 			/* ps_map.incl.pl1 for PLIO2 */
 24     3 dcl (	ps_stack		init(0),
 24     4 	ps_symbol_top	init(2),
 24     5 	ps_symbol_block	init(4),
 24     6 	ps_format_area	init(6),
 24     7 	ps_ssl		init(8),
 24     8 	ps_label		init(10),
 24     9 	ps_source		init(16),
 24    10 	ps_special_list	init(18),
 24    11 	ps_set_p		init(18),
 24    12 	ps_copy		init(20),
 24    13 	ps_var_bitlen	init(21),
 24    14 	ps_job		init(22),
 24    15 	ps_number		init(23),
 24    16 	ps_value		init(24),
 24    17 	ps_var_p		init(24),
 24    18 	ps_descriptor	init(26),
 24    19 	ps_offset		init(28),
 24    20 	ps_prep		init(29),
 24    21 	ps_lock_sw	init(29),
 24    22 	ps_new_format	init(30),
 24    23 	ps_key		init(48) )  fixed bin(15) static internal options(constant);
 24    24 
     1134 
 25     1 /* BEGIN INCLUDE FILE ... symbol_bits.incl.pl1 */
 25     2 
 25     3 dcl (	aliasable_bit	initial (72),
 25     4 	passed_as_arg_bit	initial (74),
 25     5 	set_bit		initial (76),
 25     6 	overlayed_by_builtin_bit initial (87)) fixed bin (15) internal static options (constant);
 25     7 
 25     8 /* END INCLUDE FILE ... symbol_bits.incl.pl1 */
     1135 
 26     1 /* BEGIN INCLUDE FILE ... boundary.incl.pl1 */
 26     2 
 26     3 /* Modified: 26 Apr 1979 by PCK to implement 4-bit decimal */
 26     4 
 26     5 dcl (	bit_		init(1),
 26     6 	digit_		init(2),
 26     7 	character_	init(3),
 26     8 	half_		init(4),
 26     9 	word_		init(5),
 26    10 	mod2_		init(6),
 26    11 	mod4_		init(7)) fixed bin(3) int static options(constant);
 26    12 
 26    13 /* END INCLUDE FILE ... boundary.incl.pl1 */
     1136 
 27     1 /* BEGIN INCLUDE FILE ... mask.incl.pl1 */
 27     2 
 27     3 dcl (	structure_mask		init("100000000000000000000000000000000000"b),
 27     4 	fixed_mask		init("010000000000000000000000000000000000"b),
 27     5 	float_mask		init("001000000000000000000000000000000000"b),
 27     6 	bit_mask			init("000100000000000000000000000000000000"b),
 27     7 	char_mask			init("000010000000000000000000000000000000"b),
 27     8 	ptr_mask			init("000001000000000000000000000000000000"b),
 27     9 	offset_mask		init("000000100000000000000000000000000000"b),
 27    10 	area_mask			init("000000010000000000000000000000000000"b),
 27    11 	label_mask		init("000000001000000000000000000000000000"b),
 27    12 	entry_mask		init("000000000100000000000000000000000000"b),
 27    13 	file_mask			init("000000000010000000000000000000000000"b),
 27    14 	arg_descriptor_mask		init("000000000001000000000000000000000000"b),
 27    15 	storage_block_mask		init("000000000000100000000000000000000000"b),
 27    16 	lock_mask			init("000000000000010000000000000000000000"b),
 27    17 	condition_mask		init("000000000000001000000000000000000000"b),
 27    18 	format_mask		init("000000000000000100000000000000000000"b),
 27    19 	builtin_mask		init("000000000000000010000000000000000000"b),
 27    20 	generic_mask		init("000000000000000001000000000000000000"b),
 27    21 	picture_mask		init("000000000000000000100000000000000000"b),
 27    22 	dimensioned_mask		init("000000000000000000010000000000000000"b),
 27    23 	initialed_mask		init("000000000000000000001000000000000000"b),
 27    24 	aligned_mask		init("000000000000000000000100000000000000"b),
 27    25 	unaligned_mask		init("000000000000000000000010000000000000"b),
 27    26 	signed_mask		init("000000000000000000000001000000000000"b),
 27    27 	unsigned_mask		init("000000000000000000000000100000000000"b),
 27    28 	precision_mask		init("000000000000000000000000010000000000"b),
 27    29 	varying_mask		init("000000000000000000000000001000000000"b),
 27    30 	local_mask		init("000000000000000000000000000100000000"b),
 27    31 	decimal_mask		init("000000000000000000000000000010000000"b),
 27    32 	binary_mask		init("000000000000000000000000000001000000"b),
 27    33 	real_mask			init("000000000000000000000000000000100000"b),
 27    34 	complex_mask		init("000000000000000000000000000000010000"b),
 27    35 	variable_mask		init("000000000000000000000000000000001000"b),
 27    36 	reducible_mask		init("000000000000000000000000000000000100"b),
 27    37 	irreducible_mask		init("000000000000000000000000000000000010"b),
 27    38 	returns_mask		init("000000000000000000000000000000000001"b)) bit(36) aligned int static
 27    39 				options(constant);
 27    40 
 27    41 dcl (	arithmetic_mask		init("011000000000000000000000000011110000"b),
 27    42 	computational_mask		init("011110000000000000100000000011110000"b),
 27    43 	fixed_binary_real_mask	init("010000000000000000000000000001100000"b),
 27    44 	fixed_decimal_real_mask	init("010000000000000000000000000010100000"b),
 27    45 	float_decimal_real_mask	init("001000000000000000000000000010100000"b),
 27    46 	fixed_decimal_complex_mask	init("010000000000000000000000000010010000"b),
 27    47 	float_decimal_complex_mask	init("001000000000000000000000000010010000"b),
 27    48 	string_mask		init("000110000000000000000000000000000000"b),
 27    49 	undesirable_mask		init("111111111111111111100111110111110111"b),
 27    50 	convert_mask		init("011111111111111111100111110111111110"b),
 27    51 	declare_constant_mask	init("111111111111111111100000000011110000"b)
 27    52 								     ) bit(36) aligned int static
 27    53 									options(constant);
 27    54 
 27    55 /* END INCLUDE FILE ... mask.incl.pl1 */
     1137 
 28     1 /* BEGIN INCLUDE FILE ... decoded_token_types.incl.pl1 */
 28     2 
 28     3 /* This array maps token types into declaration types suitable
 28     4*   for passing to convert. */
 28     5 
 28     6 dcl	decoded_type(33:62) bit(36) aligned int static options(constant) init
 28     7 	(	"000100000000000000000000000000000000"b,	/* bit_string */
 28     8 		"000010000000000000000000000000000000"b,	/* char_string */
 28     9 		(13) (36) "0"b,
 28    10 		"010000000000000000000101000001100000"b,	/* fixed_bin */
 28    11 		"010000000000000000000101000001100000"b,	/* bin_integer */
 28    12 		"010000000000000000000101000010100000"b,	/* fixed_dec */
 28    13 		"010000000000000000000101000001100000"b,	/* dec_integer */
 28    14 		"001000000000000000000101000001100000"b,	/* float_bin */
 28    15 		"0"b,
 28    16 		"001000000000000000000101000010100000"b,	/* float_dec */
 28    17 		"0"b,
 28    18 		"010000000000000000000101000001010000"b,	/* i_fixed_bin */
 28    19 		"010000000000000000000101000001010000"b,	/* i_bin_integer */
 28    20 		"010000000000000000000101000010010000"b,	/* i_fixed_dec */
 28    21 		"010000000000000000000101000010010000"b,	/* i_dec_integer */
 28    22 		"001000000000000000000101000001010000"b,	/* i_float_bin */
 28    23 		"0"b,
 28    24 		"001000000000000000000101000010010000"b);	/* i_float_dec */
 28    25 
 28    26 /* END INCLUDE FILE ... decoded_token_types.incl.pl1 */
     1138 
     1139      end /* io_semantics */;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/17/90  0942.0  io_semantics.pl1                  >spec>install>1046>io_semantics.pl1
1116         1    07/21/80  1646.3  semant.incl.pl1                   >ldd>include>semant.incl.pl1
1-228        2    08/01/89  1339.9  language_utility.incl.pl1         >ldd>include>language_utility.incl.pl1
2-307        3    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-325        4    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-335        5    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-374        6    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
2-386        7    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
1118         8    07/21/80  1646.3  nodes.incl.pl1                    >ldd>include>nodes.incl.pl1
1119         9    08/13/81  2143.5  block.incl.pl1                    >ldd>include>block.incl.pl1
1120        10    08/13/81  2311.5  list.incl.pl1                     >ldd>include>list.incl.pl1
1121        11    07/21/80  1646.3  operator.incl.pl1                 >ldd>include>operator.incl.pl1
1122        12    04/07/83  1735.0  op_codes.incl.pl1                 >ldd>include>op_codes.incl.pl1
1123        13    07/21/80  1646.3  semantic_bits.incl.pl1            >ldd>include>semantic_bits.incl.pl1
1124        14    12/07/83  1801.7  symbol.incl.pl1                   >ldd>include>symbol.incl.pl1
1125        15    05/06/74  1841.6  array.incl.pl1                    >ldd>include>array.incl.pl1
1126        16    12/07/83  1801.7  system.incl.pl1                   >ldd>include>system.incl.pl1
1127        17    07/21/80  1646.3  reference.incl.pl1                >ldd>include>reference.incl.pl1
1128        18    09/14/77  1805.7  token.incl.pl1                    >ldd>include>token.incl.pl1
1129        19    11/30/78  1327.4  token_types.incl.pl1              >ldd>include>token_types.incl.pl1
1130        20    04/07/83  1735.0  statement.incl.pl1                >ldd>include>statement.incl.pl1
1131        21    05/03/76  1420.4  statement_types.incl.pl1          >ldd>include>statement_types.incl.pl1
1132        22    10/25/79  1745.8  declare_type.incl.pl1             >ldd>include>declare_type.incl.pl1
1133        23    05/06/74  1842.1  label.incl.pl1                    >ldd>include>label.incl.pl1
1134        24    05/03/76  1420.4  ps_map.incl.pl1                   >ldd>include>ps_map.incl.pl1
1135        25    07/21/80  1646.3  symbol_bits.incl.pl1              >ldd>include>symbol_bits.incl.pl1
1136        26    10/25/79  1745.8  boundary.incl.pl1                 >ldd>include>boundary.incl.pl1
1137        27    11/30/78  1327.5  mask.incl.pl1                     >ldd>include>mask.incl.pl1
1138        28    11/30/78  1327.5  decoded_token_types.incl.pl1      >ldd>include>decoded_token_types.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
PS_offset                       000145 automatic       fixed bin(15,0)          dcl 59 in procedure "io_semantics" set ref 529* 532*
                                                                                  556* 645* 745* 870*
PS_offset                              parameter       fixed bin(15,0)          dcl 919 in procedure "assign_ps" ref 917 938 941 942
a                               000102 automatic       pointer                  dcl 55 set ref 590* 591 592 593
adam                            000326 automatic       pointer                  dcl 1087 set ref 1089* 1101 1106
addr                                                   builtin function         dcl 68 ref 252 360 372 802 803 804 804 805 806 806
                                                                                  806 809 842 986 1041 1050 1055 1060
addr_fun_bits                   000121 constant        bit(9)                   initial dcl 12-8 set ref 951*
aggregate                              based           bit(1)                   level 2 packed packed unaligned dcl 13-8 ref 372
aliasable                32(35)        based           bit(1)                   level 4 packed packed unaligned dcl 14-3 set ref
                                                                                  1016*
aliasable_bit                   000104 constant        fixed bin(15,0)          initial dcl 25-3 set ref 953*
aligned                  31(21)        based           bit(1)                   level 4 packed packed unaligned dcl 14-3 set ref
                                                                                  1016*
alloc_semantics$init_only       000014 constant        entry                    external dcl 1-12 ref 680
allocate                 33(02)        based           bit(1)                   level 4 packed packed unaligned dcl 14-3 set ref
                                                                                  160* 1068*
ap                              000266 automatic       pointer                  dcl 921 set ref 941* 942 951* 952 956
arg_desc_type                   000114 constant        bit(36)                  initial dcl 16-71 set ref 253* 257* 258*
arithmetic_mask                 000101 constant        bit(36)                  initial dcl 27-41 ref 197
array                                  based           structure                level 1 dcl 15-1 in procedure "io_semantics"
array                    12            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 14-3 in procedure "io_semantics" ref
                                                                                  590
array_ref                 0(09)        based           bit(1)                   level 2 packed packed unaligned dcl 17-3 ref 587 631
assign                          000123 constant        bit(9)                   initial dcl 12-8 set ref 151* 656* 932*
assign_list                     000152 automatic       pointer                  array dcl 63 set ref 347* 453* 457 461 846 847* 847
                                                                                  848* 932*
assignment_statement            000111 constant        bit(9)                   initial dcl 21-3 set ref 455* 654*
attributes               31            based           structure                level 2 dcl 14-3 set ref 143 169
auto                     32(09)        based           bit(1)                   level 4 packed packed unaligned dcl 14-3 set ref
                                                                                  1068*
b                               000104 automatic       pointer                  dcl 55 in procedure "io_semantics" set ref 297* 298
                                                                                  300* 301 302 342* 364* 545 549* 624* 660 661* 666*
                                                                                  722 722* 732* 743 753 753* 759 759* 789* 798 798*
                                                                                  800 821 821* 823 889* 908* 941 942*
b                                      parameter       pointer                  dcl 976 in procedure "io_semantics_util" set ref 984
                                                                                  986 1004 1010 1035 1039 1041 1044 1050 1053 1055
                                                                                  1058 1060 1066*
back                      2            based           pointer                  level 2 packed packed unaligned dcl 20-9 ref 455 764
                                                                                  777
based                    32(10)        based           bit(1)                   level 4 packed packed unaligned dcl 14-3 ref 892
bb                                     parameter       pointer                  dcl 29 set ref 28 174* 204* 241* 297
bb36                                   based           bit(36)                  dcl 72 ref 252 331 803
binary                                                 builtin function         dcl 68 ref 129
bit                      31(03)        based           bit(1)                   level 4 in structure "symbol" packed packed
                                                                                  unaligned dcl 14-3 in procedure "io_semantics" ref
                                                                                  220 610 1095
bit                                                    builtin function         dcl 68 in procedure "io_semantics" ref 802
bit_                                   constant        fixed bin(3,0)           initial dcl 26-5 ref 593 606
bit_size                 23            based           pointer                  level 2 packed packed unaligned dcl 14-3 ref 599 603
                                                                                  902
bit_type                        000177 constant        bit(36)                  initial dcl 16-71 set ref 330* 673*
bits                     13            based           structure                level 2 in structure "statement" packed packed
                                                                                  unaligned dcl 20-9 in procedure "io_semantics"
bits                                   based           bit(36)                  level 2 in structure "fab2template" dcl 78
                                                                                  in procedure "io_semantics" set ref 802* 803* 804*
                                                                                  804
bits_per_word                          constant        fixed bin(31,0)          initial dcl 16-5 ref 1013 1076
block                                  based           structure                level 1 dcl 9-5
boundary                  2(20)        based           fixed bin(3,0)           level 2 packed packed unaligned dcl 14-3 set ref 606
                                                                                  1073*
bp                                     based           pointer                  packed unaligned dcl 978 set ref 992* 1063 1066*
brother                  20            based           pointer                  level 2 packed packed unaligned dcl 14-3 ref 1104
                                                                                  1110
bs                       13            based           fixed bin(15,0)          level 2 dcl 78 set ref 806*
by_compiler                     000107 constant        bit(3)                   initial dcl 22-5 set ref 789* 1015* 1066*
c_bit_size               27            based           fixed bin(24,0)          level 2 dcl 14-3 set ref 600 604 903 1013* 1076*
c_dcl_size               30            based           fixed bin(24,0)          level 2 dcl 14-3 set ref 234 728 1011* 1074*
c_element_size_bits       3            based           fixed bin(24,0)          level 2 dcl 15-1 ref 592
c_length                  2            based           fixed bin(24,0)          level 2 dcl 17-3 set ref 165 202 246 664* 737 1032*
c_offset                  1            based           fixed bin(24,0)          level 2 dcl 17-3 set ref 938* 999* 1030*
c_word_size              26            based           fixed bin(24,0)          level 2 dcl 14-3 set ref 1011* 1074*
cbs                             000150 automatic       fixed bin(24,0)          dcl 61 set ref 592* 600* 604* 615 616
char                     31(04)        based           bit(1)                   level 4 packed packed unaligned dcl 14-3 set ref 651
                                                                                  718 1016* 1095
char_type                       000203 constant        bit(36)                  initial dcl 16-71 set ref 201* 550* 711* 964
compiler_developed       32(35)        based           structure                level 3 packed packed unaligned dcl 14-3
computational_mask              000100 constant        bit(36)                  initial dcl 27-41 ref 171
constant                 32(16)        based           bit(1)                   level 4 packed packed unaligned dcl 14-3 ref 143
constsize                       000230 automatic       fixed bin(35,0)          dcl 73 set ref 234* 246* 252
context                         000250 automatic       bit(36)                  dcl 13-5 set ref 240* 241* 358* 360 364* 372 888*
                                                                                  889* 907* 908*
controlled               32(12)        based           bit(1)                   level 4 packed packed unaligned dcl 14-3 ref 891
convert                         000030 constant        entry                    external dcl 2-60 ref 129 330 550 711
convert$from_builtin            000032 constant        entry                    external dcl 2-72 ref 201
convert$to_target               000034 constant        entry                    external dcl 2-88 ref 968
convtype                        000141 automatic       bit(36)                  dcl 58 set ref 139* 141* 143* 146* 148 153*
copy_expression                 000036 constant        entry                    external dcl 2-94 ref 237 247 619 662 730 738 905
                                                                                  937 998 1033
create_label                    000040 constant        entry                    external dcl 2-140 ref 789
create_list                     000042 constant        entry                    external dcl 2-147 ref 791 989
create_operator                 000044 constant        entry                    external dcl 2-152 ref 151 256 459 656 703 794 932
                                                                                  951
create_reference                000046 constant        entry                    external dcl 2-158 ref 881
create_statement                000050 constant        entry                    external dcl 2-163 ref 287 455 654 764 777
create_symbol                   000052 constant        entry                    external dcl 2-184 ref 1015 1066
create_token                    000054 constant        entry                    external dcl 2-191 ref 1022
cs                              000106 automatic       pointer                  dcl 55 set ref 284* 287* 288 296 342* 364* 455 455
                                                                                  624* 654* 654 666* 680* 732* 764 764 770 771 777
                                                                                  889* 908*
data_type                31            based           structure                level 3 packed packed unaligned dcl 14-3
dcl_size                 24            based           pointer                  level 2 packed packed unaligned dcl 14-3 set ref 234
                                                                                  237* 727 1022*
dec_integer                     000112 constant        bit(9)                   initial dcl 19-3 set ref 1022*
decimal                  31(28)        based           bit(1)                   level 4 packed packed unaligned dcl 14-3 ref 1095
declare                         000016 constant        entry                    external dcl 1-41 ref 1026
declare_constant                000056 constant        entry                    external dcl 2-211 ref 253 258
declare_constant$bit            000060 constant        entry                    external dcl 2-219 ref 450 842
declare_constant$integer        000062 constant        entry                    external dcl 2-234 ref 165 202 538 616 728 737 903
declare_descriptor              000064 constant        entry                    external dcl 2-239 ref 174 204
declare_temporary               000066 constant        entry                    external dcl 2-292 ref 153 257 673 956 968 968
decoded_type                    000042 constant        bit(36)                  initial array dcl 28-6 set ref 129*
def_context                            based           structure                level 1 dcl 13-8
defined                  32(13)        based           bit(1)                   level 4 packed packed unaligned dcl 14-3 set ref
                                                                                  1016*
dimensioned              31(19)        based           bit(1)                   level 4 packed packed unaligned dcl 14-3 ref 587
dp                              000130 automatic       pointer                  dcl 55 set ref 256* 257 258 259
dtype                                  parameter       char(3)                  dcl 920 ref 917 947 949 960 962 966
element                   1            based           pointer                  array level 2 packed packed unaligned dcl 10-6 set
                                                                                  ref 545 660 792* 941 991* 998* 1010 1035*
element_boundary          1(23)        based           fixed bin(3,0)           level 2 packed packed unaligned dcl 15-1 ref 593
element_size_bits         6            based           pointer                  level 2 packed packed unaligned dcl 15-1 ref 591
end_of_join                     000224 automatic       pointer                  dcl 64 set ref 295* 440 450 453 703* 794* 795
entry                    31(09)        based           bit(1)                   level 4 packed packed unaligned dcl 14-3 ref 143
evaluate_offset           0(04)        based           bit(1)                   level 2 packed packed unaligned dcl 13-8 set ref
                                                                                  360*
expression_semantics            000020 constant        entry                    external dcl 1-105 ref 241 364 624 732 889 908
fab2mod2                        000232 automatic       pointer                  array dcl 76 set ref 802 803 804 804 805 806 806 806
                                                                                  809 842
fab2template                           based           structure                level 1 unaligned dcl 78
fab2template_b                         based           bit(504)                 dcl 77 ref 842
father                   17            based           pointer                  level 2 packed packed unaligned dcl 14-3 ref 192
                                                                                  1105
file                     31(10)        based           bit(1)                   level 4 packed packed unaligned dcl 14-3 ref 534 953
format                   31(15)        based           bit(1)                   level 4 packed packed unaligned dcl 14-3 ref 143
general                  16            based           pointer                  level 2 packed packed unaligned dcl 14-3 ref 160
generated                13(02)        based           bit(1)                   level 3 packed packed unaligned dcl 20-9 set ref
                                                                                  456* 655* 768* 788*
get_data_trans                         constant        bit(9)                   initial dcl 12-8 ref 343
get_edit_trans                         constant        bit(9)                   initial dcl 12-8 ref 263
i                               000312 automatic       fixed bin(15,0)          dcl 977 in procedure "io_semantics_util" set ref
                                                                                  994* 998 999*
i                               000142 automatic       fixed bin(15,0)          dcl 59 in procedure "io_semantics" set ref 355* 357
                                                                                  360 364 364 365 367 367 370* 424* 427 429 430*
                                                                                  460* 461 461*
identifier                             constant        bit(9)                   initial dcl 19-3 ref 877
initial                  11            based           pointer                  level 2 packed packed unaligned dcl 14-3 ref 331 803
integer_type                    000116 constant        bit(36)                  initial dcl 16-71 ref 960
internal                 32(01)        based           bit(1)                   level 4 packed packed unaligned dcl 14-3 set ref
                                                                                  1068*
io_data_list_semantics          000022 constant        entry                    external dcl 1-143 ref 342
io_statements            42(05)        based           bit(1)                   level 3 packed packed unaligned dcl 9-5 set ref 301*
is_constant                            constant        bit(9)                   initial dcl 19-47 ref 126 126
job                             000226 automatic       bit(36)                  dcl 70 set ref 331* 340 353 360 370 427 443* 443
                                                                                  444* 450* 558 697 709 750 879 885*
job_additions                   000227 automatic       bit(36)                  dcl 71 set ref 332* 443 443 562* 610* 631* 632* 642*
                                                                                  726*
join                            000120 constant        bit(9)                   initial dcl 12-8 set ref 102 459*
label                                  based           structure                level 1 dcl 23-1
label_node                             constant        bit(9)                   initial dcl 8-5 ref 139 141 365 367
labels                    4            based           pointer                  level 2 packed packed unaligned dcl 20-9 set ref 286
                                                                                  791* 792
lal                             000146 automatic       fixed bin(15,0)          dcl 59 set ref 293* 345 345* 345 347 452* 452 453
                                                                                  457 459* 460 467* 468* 844 847 848 930 930* 930
                                                                                  932
length                    6            based           pointer                  level 2 in structure "reference" packed packed
                                                                                  unaligned dcl 17-3 in procedure "io_semantics" set
                                                                                  ref 246 247* 736
length                                                 builtin function         dcl 68 in procedure "io_semantics" ref 253 253 257
                                                                                  257 258 258
level                     2(11)        based           fixed bin(8,0)           level 2 packed packed unaligned dcl 14-3 ref 893
list                                   based           structure                level 1 dcl 10-6
local_label_var_type            000113 constant        bit(36)                  initial dcl 16-71 ref 139 141
locate_set                      000134 automatic       pointer                  dcl 56 set ref 558 680* 894*
locate_size                     000136 automatic       pointer                  dcl 56 set ref 902* 903 903* 905* 905 908* 908* 911*
locate_var                      000132 automatic       pointer                  dcl 56 set ref 680 901*
ls                       11            based           fixed bin(15,0)          level 2 dcl 78 set ref 806*
m                               000144 automatic       fixed bin(15,0)          dcl 59 set ref 329* 330 330 331 334* 334 355 467
make_desc                       000122 constant        bit(9)                   initial dcl 12-8 set ref 256*
misc_attributes          31(19)        based           structure                level 3 packed packed unaligned dcl 14-3
mod                                                    builtin function         dcl 68 ref 615
mod2_                                  constant        fixed bin(3,0)           initial dcl 26-5 ref 1073
n                               000143 automatic       fixed bin(15,0)          dcl 59 in procedure "io_semantics" set ref 178* 180*
                                                                                  181* 272* 276* 279* 279 281* 473* 477* 481* 485*
                                                                                  490* 494* 498* 502* 506* 510* 514* 521* 523 567*
n                               000313 automatic       fixed bin(15,0)          dcl 977 in procedure "io_semantics_util" set ref
                                                                                  985* 1040* 1045* 1054* 1059* 1074 1076 1078
name                      1            based           char(32)                 level 2 dcl 78 set ref 805*
next                      1            based           pointer                  level 2 packed packed unaligned dcl 20-9 ref 296
no_byte                         000147 automatic       bit(1)                   dcl 60 set ref 578* 593* 606* 615* 620* 633* 642
no_stack                 24(22)        based           bit(1)                   level 2 packed packed unaligned dcl 9-5 set ref 302*
node                                   based           structure                level 1 dcl 8-27
ns                              000110 automatic       pointer                  dcl 55 set ref 296* 764 777
null                                                   builtin function         dcl 68 ref 153 153 190 229 234 246 250 257 257 286
                                                                                  287 287 289 295 298 349 357 365 365 367 367 440
                                                                                  455 455 468 519 538 540 540 549 613 643 643 654
                                                                                  654 661 673 673 693 722 728 737 741 741 753 759
                                                                                  764 764 771 777 777 789 789 798 809 812 815 818
                                                                                  821 852 852 870 870 883 895 903 911 911 913 935
                                                                                  942 956 956 968 968 968 968 1015 1015 1015 1015
                                                                                  1063 1066 1104
null_statement                  000110 constant        bit(9)                   initial dcl 21-3 set ref 290 692 770 777*
number                    0(21)        based           fixed bin(14,0)          level 2 packed packed unaligned dcl 11-6 ref 329
op_code                   0(09)        based           bit(9)                   level 2 packed packed unaligned dcl 11-6 set ref 95
                                                                                  97 102 164* 200* 343 774*
opcode_temp                     000101 automatic       bit(9)                   dcl 54 set ref 699* 775* 794*
operand                   1            based           pointer                  array level 2 packed packed unaligned dcl 11-6 set
                                                                                  ref 100 118* 118 119* 120 129* 136 151* 152* 152
                                                                                  153* 153 154 165* 174* 178 188* 201* 201 202* 202
                                                                                  202 204* 253* 256* 257* 258* 259* 279 330* 330 331
                                                                                  342 343 347 349* 357 364* 364 365 367 367 429 450*
                                                                                  461* 468* 657* 665* 673* 712 795* 811 814 817 874
                                                                                  882 883* 913* 937* 938 941* 942* 947* 951* 952*
                                                                                  956* 968*
operator                               based           structure                level 1 dcl 11-6
operator_node                          constant        bit(9)                   initial dcl 8-5 ref 102 132 178 279 712 896
operator_semantics              000024 constant        entry                    external dcl 1-184 ref 666
outtype                         000270 automatic       bit(36)                  dcl 922 set ref 960* 962* 964* 968* 968*
overlayed                33(11)        based           bit(1)                   level 4 packed packed unaligned dcl 14-3 set ref
                                                                                  1016*
packed                   33            based           bit(1)                   level 4 packed packed unaligned dcl 14-3 ref 228
                                                                                  1095
passed_as_arg_bit               000103 constant        fixed bin(15,0)          initial dcl 25-3 set ref 267* 576*
picture                  31(18)        based           bit(1)                   level 4 packed packed unaligned dcl 14-3 ref 158 718
                                                                                  1095
pl1_stat_$check_ansi            000012 external static bit(1)                   dcl 85 ref 176
pl1_stat_$generate_symtab       000010 external static bit(1)                   packed unaligned dcl 84 set ref 748*
plio_fa                  20            based           pointer                  level 2 packed packed unaligned dcl 9-5 set ref 759
                                                                                  1041
plio_fab2                23            based           pointer                  level 2 packed packed unaligned dcl 9-5 set ref 798
                                                                                  800 1060
plio_ffsb                21            based           pointer                  level 2 packed packed unaligned dcl 9-5 set ref 722
                                                                                  743 821 823 1050
plio_ps                  17            based           pointer                  level 2 packed packed unaligned dcl 9-5 set ref 298
                                                                                  545 660 941 986 1010 1035
plio_ssl                 22            based           pointer                  level 2 packed packed unaligned dcl 9-5 set ref 753
                                                                                  1055
pointer_type                    000115 constant        bit(36)                  initial dcl 16-71 set ref 956* 962
prefix                   12(12)        based           bit(12)                  level 2 packed packed unaligned dcl 20-9 ref 287 455
                                                                                  654 764 777
processed                13            based           bit(1)                   level 3 in structure "statement" packed packed
                                                                                  unaligned dcl 20-9 in procedure "io_semantics" set
                                                                                  ref 456* 655* 768* 788*
processed                 0(19)        based           bit(1)                   level 2 in structure "operator" packed packed
                                                                                  unaligned dcl 11-6 in procedure "io_semantics" set
                                                                                  ref 154*
propagate_bit                   000026 constant        entry                    external dcl 1-192 ref 266 267 561 573 576 652 719
                                                                                  953
ps                       12            based           fixed bin(15,0)          level 2 dcl 78 set ref 806*
ps_copy                                constant        fixed bin(15,0)          initial dcl 24-3 ref 529
ps_key                                 constant        fixed bin(15,0)          initial dcl 24-3 ref 942
ps_number                              constant        fixed bin(15,0)          initial dcl 24-3 set ref 540* 741*
ps_source                              constant        fixed bin(15,0)          initial dcl 24-3 ref 532 745
ps_special_list                 000106 constant        fixed bin(15,0)          initial dcl 24-3 set ref 556 852*
ps_var_bitlen                   000105 constant        fixed bin(15,0)          initial dcl 24-3 set ref 643* 911*
ps_var_p                               constant        fixed bin(15,0)          initial dcl 24-3 ref 645
ptr                      31(05)        based           bit(1)                   level 4 packed packed unaligned dcl 14-3 ref 560 899
put_data_trans                         constant        bit(9)                   initial dcl 12-8 ref 171 186
put_edit_trans                         constant        bit(9)                   initial dcl 12-8 ref 125 134
put_field                              constant        bit(9)                   initial dcl 12-8 ref 164 200
put_in_symtab            33(08)        based           bit(1)                   level 4 packed packed unaligned dcl 14-3 set ref
                                                                                  191*
put_list_trans                         constant        bit(9)                   initial dcl 12-8 ref 125 134 148 162 171 197
q                               000114 automatic       pointer                  dcl 55 in procedure "io_semantics" set ref 229* 237*
                                                                                  238* 241* 241* 247* 250 259 487 591* 599* 603* 613
                                                                                  616* 619* 619 622* 624* 624* 643* 656* 657 665
                                                                                  666* 727* 728 728* 730* 730 731* 732* 732* 736*
                                                                                  737 737* 738* 738 741* 842* 843* 846* 848 894* 895
                                                                                  896 899
q                               000306 automatic       pointer                  dcl 976 in procedure "io_semantics_util" set ref
                                                                                  986* 992 1041* 1050* 1055* 1060* 1063 1066
qualifier                 4            based           pointer                  level 2 packed packed unaligned dcl 17-3 set ref 174
                                                                                  204 238 622 731 882* 894 1033*
r                               000310 automatic       pointer                  dcl 976 in procedure "io_semantics_util" set ref
                                                                                  998* 999 1000 1028* 1029 1030 1032 1033 1035 1036
r                               000116 automatic       pointer                  dcl 55 in procedure "io_semantics" set ref 545* 549
                                                                                  549* 551* 660* 661 661* 662* 662 664 665 707* 711*
                                                                                  712* 713 716 717 724 731 736 737 742* 744* 789*
                                                                                  790 792 795 800* 812* 815* 820* 824* 843* 852*
rand_index                      000124 constant        fixed bin(15,0)          initial array dcl 87 ref 429
record_io                       000117 constant        bit(9)                   initial dcl 12-8 set ref 699 703*
refer_extent                    000070 constant        entry                    external dcl 2-426 ref 238 622 731
refer_extents            33(05)        based           bit(1)                   level 4 packed packed unaligned dcl 14-3 ref 238 622
                                                                                  731
reference                15            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 14-3 in procedure "io_semantics" set
                                                                                  ref 743 800 823 998* 1028 1033*
reference                              based           structure                level 1 dcl 17-3 in procedure "io_semantics"
reference_node                         constant        bit(9)                   initial dcl 8-5 ref 367 716 953
root                      3            based           pointer                  level 2 packed packed unaligned dcl 20-9 set ref
                                                                                  288* 288 289* 457* 459* 666* 684 693* 771* 773*
s                               000330 automatic       pointer                  dcl 1087 in procedure "byte_buffer" set ref 1089*
                                                                                  1091 1092* 1092 1095 1095 1095 1095 1095 1101 1104
                                                                                  1105* 1105 1106 1110* 1110
s                               000120 automatic       pointer                  dcl 55 in procedure "io_semantics" set ref 233* 234
                                                                                  234 237 238 586* 587 590 597 599 600 603 604 606
                                                                                  610 620* 622 629 649* 651 652* 713* 717* 718 718
                                                                                  719* 727 728 731 890* 891 892 893 902 903
s                               000300 automatic       pointer                  dcl 976 in procedure "io_semantics_util" set ref 991
                                                                                  998 1015* 1016 1016 1016 1016 1016 1016 1022 1026*
                                                                                  1028 1066* 1068 1068 1068 1068 1073 1074 1074 1076
semantic_translator$abort       000072 constant        entry                    external dcl 2-446 ref 156 365 367
semantic_translator$error       000074 constant        entry                    external dcl 2-450 ref 181 281 521
set_bit                         000102 constant        fixed bin(15,0)          initial dcl 25-3 set ref 266* 561* 573* 652* 719*
share_expression                000076 constant        entry                    external dcl 2-454 ref 825 825
size                      3            based           fixed bin(9,0)           level 2 dcl 18-3 ref 802
son                      21            based           pointer                  level 2 packed packed unaligned dcl 14-3 ref 1092
ss                                     parameter       pointer                  dcl 29 set ref 28 174* 204* 241* 284 286 287 287*
                                                                                  287 288 289 290 684 692 693
statement                              based           structure                level 1 dcl 20-9 in procedure "io_semantics"
statement                11            based           pointer                  level 2 in structure "label" packed packed unaligned
                                                                                  dcl 23-1 in procedure "io_semantics" set ref 790*
statement_type           12(27)        based           bit(9)                   level 2 packed packed unaligned dcl 20-9 set ref 287
                                                                                  290* 692* 764 770*
storage_block            31(12)        based           bit(1)                   level 4 packed packed unaligned dcl 14-3 set ref
                                                                                  1068*
storage_class            32(09)        based           structure                level 3 packed packed unaligned dcl 14-3
stream_prep                            constant        bit(9)                   initial dcl 12-8 ref 775
string                    4            based           char                     level 2 in structure "token" dcl 18-3 in procedure
                                                                                  "io_semantics" ref 802
string                                                 builtin function         dcl 68 in procedure "io_semantics" set ref 143 169
                                                                                  240* 358* 888* 907*
string_mask                            constant        bit(36)                  initial dcl 27-41 ref 206
stringdesc                      000231 automatic       bit(36)                  dcl 74 set ref 220* 223* 224* 226* 228* 252* 253*
                                                                                  253 253 257 257 258* 258 258
strlen                          000151 automatic       fixed bin(31,0)          dcl 62 set ref 966* 967* 968* 968*
structure                31            based           bit(1)                   level 4 packed packed unaligned dcl 14-3 ref 1091
subscript_list            7            based           pointer                  level 2 packed packed unaligned dcl 17-3 ref 188
substr                                                 builtin function         dcl 68 set ref 143 169 228* 252* 252 340 353 427
                                                                                  444* 558 562* 610* 631* 632* 642* 697 709 726* 750
                                                                                  802 879 885*
sym                                    parameter       pointer                  dcl 1087 ref 1083 1089
symbol                    3            based           pointer                  level 2 in structure "reference" packed packed
                                                                                  unaligned dcl 17-3 in procedure "io_semantics" ref
                                                                                  141 143 143 143 143 158 160 160 169 174 189 204
                                                                                  220 228 233 265 331 367 534 560 561 562 573 576
                                                                                  586 603 604 649 680 713 717 803 890 899 953 953
symbol                                 based           structure                level 1 dcl 14-3 in procedure "io_semantics"
symbol_node                            constant        bit(9)                   initial dcl 8-5 ref 597
t                               000302 automatic       pointer                  dcl 976 in procedure "io_semantics_util" set ref
                                                                                  1010* 1011 1011 1013 1033
t                               000122 automatic       pointer                  dcl 55 in procedure "io_semantics" set ref 94* 95 97
                                                                                  100 118 119 120 129 151 152 153 154 164 165 174
                                                                                  178 188 200 201 201 202 202 204 253 256 279 329
                                                                                  330 330 331 342 343 347 349 357 364 364 365 367
                                                                                  367 429 468 673 773 774 811 814 817 874 882 883
                                                                                  913
terminate_trans                        constant        bit(9)                   initial dcl 12-8 ref 95 774
title168p                14            based           pointer                  level 2 dcl 78 set ref 809*
token                                  based           structure                level 1 dcl 18-3
token_node                             constant        bit(9)                   initial dcl 8-5 ref 123 550 802 876
tp                              000264 automatic       pointer                  dcl 921 in procedure "assign_ps" set ref 932* 937
                                                                                  938 941 942 947 951 968
tp                              000304 automatic       pointer                  dcl 976 in procedure "io_semantics_util" set ref
                                                                                  989* 991 992 998
tp                              000124 automatic       pointer                  dcl 55 in procedure "io_semantics" set ref 100* 102
                                                                                  102 117 118 119 120* 123 126 129* 129 129* 132
                                                                                  136* 136 139 141 143 143 143 143 152 153* 156* 158
                                                                                  160 165 169 174 174 181* 188 189* 189 190 191 192*
                                                                                  192 204 204 220 220 224 228 231 233 238 246 246
                                                                                  247 265* 265 266* 267* 281* 429* 459* 461 487*
                                                                                  519* 521* 534 538 538* 540* 550 550* 550* 551*
                                                                                  558* 560 561 562 573 576 586 587 622 631 649 657
                                                                                  707 711* 711* 712 712 742 743* 744* 802 802 803
                                                                                  811* 812 812* 814* 815 815* 817* 818 820* 825*
                                                                                  825* 870* 874* 876 877 881* 881* 882 889* 889* 890
                                                                                  894 901
tp1                             000126 automatic       pointer                  dcl 55 set ref 823* 824* 825*
transop                         000140 automatic       bit(9)                   dcl 57 set ref 97* 125 125 134 134 148 162 171 171
                                                                                  186 197 263
tref                                   parameter       pointer                  dcl 918 ref 917 935 937
tt                                     parameter       pointer                  dcl 29 set ref 28 94 117* 684
type                            000100 automatic       bit(36)                  packed unaligned dcl 53 in procedure "io_semantics"
                                                                                  set ref 169* 171 197 206
type                      0(09)        based           bit(9)                   level 2 in structure "token" packed packed unaligned
                                                                                  dcl 18-3 in procedure "io_semantics" ref 126 129
                                                                                  877
type                                   based           bit(9)                   level 2 in structure "node" packed packed unaligned
                                                                                  dcl 8-27 in procedure "io_semantics" ref 102 123
                                                                                  132 139 141 178 279 365 367 367 550 597 712 716
                                                                                  802 876 896 953
unaligned                31(22)        based           bit(1)                   level 4 packed packed unaligned dcl 14-3 ref 562
units                     0(14)        based           fixed bin(3,0)           level 2 packed packed unaligned dcl 17-3 set ref
                                                                                  1000* 1029*
varying                  31(26)        based           bit(1)                   level 4 packed packed unaligned dcl 14-3 set ref 629
                                                                                  1016*
varying_ref               0(10)        based           bit(1)                   level 2 packed packed unaligned dcl 17-3 ref 220 224
                                                                                  231 724
vs                              000112 automatic       pointer                  dcl 55 set ref 284* 455* 456 456 457 459 654* 655
                                                                                  655 666 764* 768 768 773 777* 788 788 790 791 792
why_nonquick             42            based           structure                level 2 dcl 9-5
word_                                  constant        fixed bin(3,0)           initial dcl 26-5 ref 1000 1029
x                                      parameter       pointer                  dcl 918 set ref 917 947 952 953 953 953 968*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
a_format                               internal static bit(9)                   initial dcl 12-8
abs_fun                                internal static bit(9)                   initial dcl 12-8
acos_fun                               internal static bit(9)                   initial dcl 12-8
acosd_fun                              internal static bit(9)                   initial dcl 12-8
add                                    internal static bit(9)                   initial dcl 12-8
addbitno_fun                           internal static bit(9)                   initial dcl 12-8
addcharno_fun                          internal static bit(9)                   initial dcl 12-8
addr_fun                               internal static bit(9)                   initial dcl 12-8
addrel_fun                             internal static bit(9)                   initial dcl 12-8
adjust_count                    000000 constant        entry                    external dcl 2-20
aligned_mask                           internal static bit(36)                  initial dcl 27-3
alloc_semantics                 000000 constant        entry                    external dcl 1-7
allocate_statement                     internal static bit(9)                   initial dcl 21-3
allocation_fun                         internal static bit(9)                   initial dcl 12-8
allot_auto                             internal static bit(9)                   initial dcl 12-8
allot_based                            internal static bit(9)                   initial dcl 12-8
allot_ctl                              internal static bit(9)                   initial dcl 12-8
allot_var                              internal static bit(9)                   initial dcl 12-8
and                                    internal static bit(9)                   initial dcl 19-3
and_bits                               internal static bit(9)                   initial dcl 12-8
area_mask                              internal static bit(36)                  initial dcl 27-3
arg_descriptor_mask                    internal static bit(36)                  initial dcl 27-3
array_node                             internal static bit(9)                   initial dcl 8-5
arrow                                  internal static bit(9)                   initial dcl 19-3
asin_fun                               internal static bit(9)                   initial dcl 12-8
asind_fun                              internal static bit(9)                   initial dcl 12-8
assign_by_name                         internal static bit(9)                   initial dcl 12-8
assign_round                           internal static bit(9)                   initial dcl 12-8
assign_size_ck                         internal static bit(9)                   initial dcl 12-8
assign_zero                            internal static bit(9)                   initial dcl 12-8
assignment                             internal static bit(9)                   initial dcl 19-3
asterisk                               internal static bit(9)                   initial dcl 19-3
atan_fun                               internal static bit(9)                   initial dcl 12-8
atand_fun                              internal static bit(9)                   initial dcl 12-8
b_format                               internal static bit(9)                   initial dcl 12-8
baseno_fun                             internal static bit(9)                   initial dcl 12-8
baseptr_fun                            internal static bit(9)                   initial dcl 12-8
begin_statement                        internal static bit(9)                   initial dcl 21-3
bin_integer                            internal static bit(9)                   initial dcl 19-3
binary_mask                            internal static bit(36)                  initial dcl 27-3
binary_to_octal_string          000000 constant        entry                    external dcl 2-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 2-43
bindec                          000000 constant        entry                    external dcl 2-23
bindec$vs                       000000 constant        entry                    external dcl 2-28
binoct                          000000 constant        entry                    external dcl 2-33
bit_mask                               internal static bit(36)                  initial dcl 27-3
bit_pointer                            internal static bit(9)                   initial dcl 12-8
bit_string                             internal static bit(9)                   initial dcl 19-3
bit_to_char                            internal static bit(9)                   initial dcl 12-8
bit_to_word                            internal static bit(9)                   initial dcl 12-8
bitno_fun                              internal static bit(9)                   initial dcl 12-8
bits_per_binary_exponent               internal static fixed bin(31,0)          initial dcl 16-5
bits_per_character                     internal static fixed bin(31,0)          initial dcl 16-5
bits_per_decimal_digit                 internal static fixed bin(31,0)          initial dcl 16-5
bits_per_digit                         internal static fixed bin(31,1)          initial dcl 16-69
bits_per_double                        internal static fixed bin(31,0)          initial dcl 16-5
bits_per_half                          internal static fixed bin(31,0)          initial dcl 16-5
bits_per_packed_ptr                    internal static fixed bin(31,0)          initial dcl 16-5
block_node                             internal static bit(9)                   initial dcl 8-5
bn_format                              internal static bit(9)                   initial dcl 12-8
bool_fun                               internal static bit(9)                   initial dcl 12-8
bound                                  based           structure                level 1 dcl 15-21
bound_ck                               internal static bit(9)                   initial dcl 12-8
bound_node                             internal static bit(9)                   initial dcl 8-5
builtin                         000000 constant        entry                    external dcl 1-17
builtin_mask                           internal static bit(36)                  initial dcl 27-3
builtin_type                           internal static bit(36)                  initial dcl 16-71
by_context                             internal static bit(3)                   initial dcl 22-5
by_declare                             internal static bit(3)                   initial dcl 22-5
by_explicit_context                    internal static bit(3)                   initial dcl 22-5
by_implication                         internal static bit(3)                   initial dcl 22-5
by_name_agg_node                       internal static bit(9)                   initial dcl 8-5
byte_fun                               internal static bit(9)                   initial dcl 12-8
c_format                               internal static bit(9)                   initial dcl 12-8
call_statement                         internal static bit(9)                   initial dcl 21-3
cat                                    internal static bit(9)                   initial dcl 19-3
cat_string                             internal static bit(9)                   initial dcl 12-8
ceil_fun                               internal static bit(9)                   initial dcl 12-8
char_mask                              internal static bit(36)                  initial dcl 27-3
char_string                            internal static bit(9)                   initial dcl 19-3
char_to_word                           internal static bit(9)                   initial dcl 12-8
character_                             internal static fixed bin(3,0)           initial dcl 26-5
characters_per_double                  internal static fixed bin(31,0)          initial dcl 16-5
characters_per_half                    internal static fixed bin(31,0)          initial dcl 16-5
characters_per_word                    internal static fixed bin(31,0)          initial dcl 16-5
charno_fun                             internal static bit(9)                   initial dcl 12-8
check_star_extents              000000 constant        entry                    external dcl 1-27
clock_fun                              internal static bit(9)                   initial dcl 12-8
close_file                             internal static bit(9)                   initial dcl 12-8
close_statement                        internal static bit(9)                   initial dcl 21-3
codeptr_fun                            internal static bit(9)                   initial dcl 12-8
colon                                  internal static bit(9)                   initial dcl 19-3
column_format                          internal static bit(9)                   initial dcl 12-8
comma                                  internal static bit(9)                   initial dcl 19-3
compare_declaration             000000 constant        entry                    external dcl 1-31
compare_expression              000000 constant        entry                    external dcl 2-48
complex_fun                            internal static bit(9)                   initial dcl 12-8
complex_mask                           internal static bit(36)                  initial dcl 27-3
complex_type                           internal static bit(36)                  initial dcl 16-71
condition_mask                         internal static bit(36)                  initial dcl 27-3
conjg_fun                              internal static bit(9)                   initial dcl 12-8
constant_length                 000000 constant        entry                    external dcl 2-54
context_node                           internal static bit(9)                   initial dcl 8-5
context_processor               000000 constant        entry                    external dcl 1-38
continue_statement                     internal static bit(9)                   initial dcl 21-3
convert$to_integer              000000 constant        entry                    external dcl 2-66
convert$to_target_fb            000000 constant        entry                    external dcl 2-82
convert$validate                000000 constant        entry                    external dcl 2-78
convert_mask                           internal static bit(36)                  initial dcl 27-41
copy_expression$copy_sons       000000 constant        entry                    external dcl 2-99
copy_string                            internal static bit(9)                   initial dcl 12-8
copy_unique_expression          000000 constant        entry                    external dcl 2-103
copy_words                             internal static bit(9)                   initial dcl 12-8
cos_fun                                internal static bit(9)                   initial dcl 12-8
cosd_fun                               internal static bit(9)                   initial dcl 12-8
create_array                    000000 constant        entry                    external dcl 2-108
create_block                    000000 constant        entry                    external dcl 2-112
create_bound                    000000 constant        entry                    external dcl 2-118
create_context                  000000 constant        entry                    external dcl 2-122
create_cross_reference          000000 constant        entry                    external dcl 2-128
create_default                  000000 constant        entry                    external dcl 2-132
create_identifier               000000 constant        entry                    external dcl 2-136
create_statement$prologue       000000 constant        entry                    external dcl 2-171
create_storage                  000000 constant        entry                    external dcl 2-179
create_token$init_hash_table    000000 constant        entry                    external dcl 2-197
create_token$protected          000000 constant        entry                    external dcl 2-199
cross_reference_node                   internal static bit(9)                   initial dcl 8-5
dec_integer_type                       internal static bit(36)                  initial dcl 16-71
decbin                          000000 constant        entry                    external dcl 2-206
decimal_mask                           internal static bit(36)                  initial dcl 27-3
declare_constant$char           000000 constant        entry                    external dcl 2-224
declare_constant$desc           000000 constant        entry                    external dcl 2-229
declare_constant_mask                  internal static bit(36)                  initial dcl 27-41
declare_descriptor$ctl          000000 constant        entry                    external dcl 2-249
declare_descriptor$param        000000 constant        entry                    external dcl 2-259
declare_integer                 000000 constant        entry                    external dcl 2-269
declare_picture                 000000 constant        entry                    external dcl 2-274
declare_picture_temp            000000 constant        entry                    external dcl 2-279
declare_pointer                 000000 constant        entry                    external dcl 2-287
declare_statement                      internal static bit(9)                   initial dcl 21-3
declare_structure               000000 constant        entry                    external dcl 1-44
decode_node_id                  000000 constant        entry                    external dcl 2-300
decode_source_id                000000 constant        entry                    external dcl 2-306
def_this_context                       based           structure                level 1 dcl 13-27
default_area_size                      internal static fixed bin(31,0)          initial dcl 16-5
default_fix_bin_p                      internal static fixed bin(31,0)          initial dcl 16-5
default_fix_dec_p                      internal static fixed bin(31,0)          initial dcl 16-5
default_flt_bin_p                      internal static fixed bin(31,0)          initial dcl 16-5
default_flt_dec_p                      internal static fixed bin(31,0)          initial dcl 16-5
default_node                           internal static bit(9)                   initial dcl 8-5
default_statement                      internal static bit(9)                   initial dcl 21-3
defined_reference               000000 constant        entry                    external dcl 1-47
delete_file                            internal static bit(9)                   initial dcl 12-8
delete_statement                       internal static bit(9)                   initial dcl 21-3
desc_size                              internal static bit(9)                   initial dcl 12-8
digit_                                 internal static fixed bin(3,0)           initial dcl 26-5
digit_to_bit                           internal static bit(9)                   initial dcl 12-8
dimensioned_mask                       internal static bit(36)                  initial dcl 27-3
display_statement                      internal static bit(9)                   initial dcl 21-3
div                                    internal static bit(9)                   initial dcl 12-8
do_fun                                 internal static bit(9)                   initial dcl 12-8
do_semantics                    000000 constant        entry                    external dcl 1-57
do_spec                                internal static bit(9)                   initial dcl 12-8
do_statement                           internal static bit(9)                   initial dcl 21-3
e_format                               internal static bit(9)                   initial dcl 12-8
else_clause                            internal static bit(9)                   initial dcl 21-3
empty_area                             internal static bit(9)                   initial dcl 12-8
enable_on                              internal static bit(9)                   initial dcl 12-8
end_statement                          internal static bit(9)                   initial dcl 21-3
entry_mask                             internal static bit(36)                  initial dcl 27-3
entry_statement                        internal static bit(9)                   initial dcl 21-3
entry_var_type                         internal static bit(36)                  initial dcl 16-71
environmentptr_fun                     internal static bit(9)                   initial dcl 12-8
eq                                     internal static bit(9)                   initial dcl 19-3
equal                                  internal static bit(9)                   initial dcl 12-8
error                           000000 constant        entry                    external dcl 2-314
error$omit_text                 000000 constant        entry                    external dcl 2-319
error_                          000000 constant        entry                    external dcl 2-324
error_$finish                   000000 constant        entry                    external dcl 2-343
error_$initialize_error         000000 constant        entry                    external dcl 2-341
error_$no_text                  000000 constant        entry                    external dcl 2-334
ex_prologue                            internal static bit(9)                   initial dcl 12-8
exit_statement                         internal static bit(9)                   initial dcl 21-3
exp                                    internal static bit(9)                   initial dcl 12-8
exp_fun                                internal static bit(9)                   initial dcl 12-8
expand_assign                   000000 constant        entry                    external dcl 1-62
expand_by_name                  000000 constant        entry                    external dcl 1-71
expand_infix                    000000 constant        entry                    external dcl 1-76
expand_initial                  000000 constant        entry                    external dcl 1-84
expand_prefix                   000000 constant        entry                    external dcl 1-89
expand_primitive                000000 constant        entry                    external dcl 1-97
expon                                  internal static bit(9)                   initial dcl 19-3
f_format                               internal static bit(9)                   initial dcl 12-8
file_mask                              internal static bit(36)                  initial dcl 27-3
fill_refer                      000000 constant        entry                    external dcl 1-113
fixed_bin                              internal static bit(9)                   initial dcl 19-3
fixed_binary_real_mask                 internal static bit(36)                  initial dcl 27-41
fixed_dec                              internal static bit(9)                   initial dcl 19-3
fixed_decimal_complex_mask             internal static bit(36)                  initial dcl 27-41
fixed_decimal_real_mask                internal static bit(36)                  initial dcl 27-41
fixed_mask                             internal static bit(36)                  initial dcl 27-3
float_bin                              internal static bit(9)                   initial dcl 19-3
float_dec                              internal static bit(9)                   initial dcl 19-3
float_decimal_complex_mask             internal static bit(36)                  initial dcl 27-41
float_decimal_real_mask                internal static bit(36)                  initial dcl 27-41
float_mask                             internal static bit(36)                  initial dcl 27-3
floor_fun                              internal static bit(9)                   initial dcl 12-8
format_mask                            internal static bit(36)                  initial dcl 27-3
format_statement                       internal static bit(9)                   initial dcl 21-3
format_value_node                      internal static bit(9)                   initial dcl 8-5
fortran_read                           internal static bit(9)                   initial dcl 12-8
fortran_write                          internal static bit(9)                   initial dcl 12-8
free_based                             internal static bit(9)                   initial dcl 12-8
free_ctl                               internal static bit(9)                   initial dcl 12-8
free_node                       000000 constant        entry                    external dcl 2-345
free_statement                         internal static bit(9)                   initial dcl 21-3
free_var                               internal static bit(9)                   initial dcl 12-8
ftn_file_manip                         internal static bit(9)                   initial dcl 12-8
ftn_trans_loop                         internal static bit(9)                   initial dcl 12-8
function                        000000 constant        entry                    external dcl 1-125
ge                                     internal static bit(9)                   initial dcl 19-3
generic_mask                           internal static bit(36)                  initial dcl 27-3
generic_selector                000000 constant        entry                    external dcl 1-134
get_array_size                  000000 constant        entry                    external dcl 2-348
get_file                               internal static bit(9)                   initial dcl 12-8
get_list_trans                         internal static bit(9)                   initial dcl 12-8
get_size                        000000 constant        entry                    external dcl 2-352
get_statement                          internal static bit(9)                   initial dcl 21-3
get_string                             internal static bit(9)                   initial dcl 12-8
goto_statement                         internal static bit(9)                   initial dcl 21-3
greater_or_equal                       internal static bit(9)                   initial dcl 12-8
greater_than                           internal static bit(9)                   initial dcl 12-8
gt                                     internal static bit(9)                   initial dcl 19-3
half_                                  internal static fixed bin(3,0)           initial dcl 26-5
half_to_word                           internal static bit(9)                   initial dcl 12-8
i_bin_integer                          internal static bit(9)                   initial dcl 19-3
i_dec_integer                          internal static bit(9)                   initial dcl 19-3
i_fixed_bin                            internal static bit(9)                   initial dcl 19-3
i_fixed_dec                            internal static bit(9)                   initial dcl 19-3
i_float_bin                            internal static bit(9)                   initial dcl 19-3
i_float_dec                            internal static bit(9)                   initial dcl 19-3
if_statement                           internal static bit(9)                   initial dcl 21-3
imag_fun                               internal static bit(9)                   initial dcl 12-8
index_after_fun                        internal static bit(9)                   initial dcl 12-8
index_before_fun                       internal static bit(9)                   initial dcl 12-8
index_fun                              internal static bit(9)                   initial dcl 12-8
index_rev_fun                          internal static bit(9)                   initial dcl 12-8
initialed_mask                         internal static bit(36)                  initial dcl 27-3
io_data_list_semantics$format_list_semantics
                                000000 constant        entry                    external dcl 1-120
io_semantics                    000000 constant        entry                    external dcl 1-148
irreducible_mask                       internal static bit(36)                  initial dcl 27-3
is_arith_constant                      internal static bit(9)                   initial dcl 19-47
is_arithmetic_constant                 internal static bit(9)                   initial dcl 19-47
is_decimal_constant                    internal static bit(9)                   initial dcl 19-47
is_delimiter                           internal static bit(9)                   initial dcl 19-47
is_float_constant                      internal static bit(9)                   initial dcl 19-47
is_identifier                          internal static bit(9)                   initial dcl 19-47
is_imaginary_constant                  internal static bit(9)                   initial dcl 19-47
is_integral_constant                   internal static bit(9)                   initial dcl 19-47
is_isub                                internal static bit(9)                   initial dcl 19-47
isub                                   internal static bit(9)                   initial dcl 19-3
jump                                   internal static bit(9)                   initial dcl 12-8
jump_false                             internal static bit(9)                   initial dcl 12-8
jump_if_eq                             internal static bit(9)                   initial dcl 12-8
jump_if_ge                             internal static bit(9)                   initial dcl 12-8
jump_if_gt                             internal static bit(9)                   initial dcl 12-8
jump_if_le                             internal static bit(9)                   initial dcl 12-8
jump_if_lt                             internal static bit(9)                   initial dcl 12-8
jump_if_ne                             internal static bit(9)                   initial dcl 12-8
jump_true                              internal static bit(9)                   initial dcl 12-8
l_parn                                 internal static bit(9)                   initial dcl 12-8
label_array_element_node               internal static bit(9)                   initial dcl 8-5
label_mask                             internal static bit(36)                  initial dcl 27-3
le                                     internal static bit(9)                   initial dcl 19-3
left_parn                              internal static bit(9)                   initial dcl 19-3
length_fun                             internal static bit(9)                   initial dcl 12-8
less_or_equal                          internal static bit(9)                   initial dcl 12-8
less_than                              internal static bit(9)                   initial dcl 12-8
line_format                            internal static bit(9)                   initial dcl 12-8
list_node                              internal static bit(9)                   initial dcl 8-5
local_mask                             internal static bit(36)                  initial dcl 27-3
locate_file                            internal static bit(9)                   initial dcl 12-8
locate_statement                       internal static bit(9)                   initial dcl 21-3
lock_file                              internal static bit(9)                   initial dcl 12-8
lock_fun                               internal static bit(9)                   initial dcl 12-8
lock_mask                              internal static bit(36)                  initial dcl 27-3
lock_statement                         internal static bit(9)                   initial dcl 21-3
log10_fun                              internal static bit(9)                   initial dcl 12-8
log2_fun                               internal static bit(9)                   initial dcl 12-8
log_fun                                internal static bit(9)                   initial dcl 12-8
lookup                          000000 constant        entry                    external dcl 1-153
loop                                   internal static bit(9)                   initial dcl 12-8
lt                                     internal static bit(9)                   initial dcl 19-3
machine_state_node                     internal static bit(9)                   initial dcl 8-5
make_non_quick                  000000 constant        entry                    external dcl 1-162
match_arguments                 000000 constant        entry                    external dcl 1-166
max_area_size                          internal static fixed bin(31,0)          initial dcl 16-5
max_bit_string                         internal static fixed bin(31,0)          initial dcl 16-5
max_bit_string_constant                internal static fixed bin(31,0)          initial dcl 16-5
max_block_number                       internal static fixed bin(17,0)          initial dcl 9-74
max_char_string                        internal static fixed bin(31,0)          initial dcl 16-5
max_char_string_constant               internal static fixed bin(31,0)          initial dcl 16-5
max_fun                                internal static bit(9)                   initial dcl 12-8
max_identifier_length                  internal static fixed bin(31,0)          initial dcl 16-5
max_index_register_value               internal static fixed bin(31,0)          initial dcl 16-5
max_length_precision                   internal static fixed bin(31,0)          initial dcl 16-5
max_list_elements                      internal static fixed bin(17,0)          initial dcl 10-12
max_number_of_dimensions               internal static fixed bin(31,0)          initial dcl 16-5
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 11-15
max_offset_precision                   internal static fixed bin(31,0)          initial dcl 16-5
max_p_bin_or_dec                       internal static fixed bin(31,0)          initial dcl 16-5
max_p_dec                              internal static fixed bin(31,0)          initial dcl 16-5
max_p_fix_bin_1                        internal static fixed bin(31,0)          initial dcl 16-5
max_p_fix_bin_2                        internal static fixed bin(31,0)          initial dcl 16-5
max_p_flt_bin_1                        internal static fixed bin(31,0)          initial dcl 16-5
max_p_flt_bin_2                        internal static fixed bin(31,0)          initial dcl 16-5
max_scale                              internal static fixed bin(31,0)          initial dcl 16-5
max_signed_index_register_value        internal static fixed bin(31,0)          initial dcl 16-5
max_signed_xreg_precision              internal static fixed bin(31,0)          initial dcl 16-5
max_uns_xreg_precision                 internal static fixed bin(31,0)          initial dcl 16-5
max_words_per_variable                 internal static fixed bin(31,0)          initial dcl 16-5
merge_attributes                000000 constant        entry                    external dcl 2-355
min_area_size                          internal static fixed bin(31,0)          initial dcl 16-5
min_fun                                internal static bit(9)                   initial dcl 12-8
min_scale                              internal static fixed bin(31,0)          initial dcl 16-5
minus                                  internal static bit(9)                   initial dcl 19-3
mod4_                                  internal static fixed bin(3,0)           initial dcl 26-5
mod_bit                                internal static bit(9)                   initial dcl 12-8
mod_byte                               internal static bit(9)                   initial dcl 12-8
mod_fun                                internal static bit(9)                   initial dcl 12-8
mod_half                               internal static bit(9)                   initial dcl 12-8
mod_word                               internal static bit(9)                   initial dcl 12-8
mult                                   internal static bit(9)                   initial dcl 12-8
ne                                     internal static bit(9)                   initial dcl 19-3
negate                                 internal static bit(9)                   initial dcl 12-8
ngt                                    internal static bit(9)                   initial dcl 19-3
nlt                                    internal static bit(9)                   initial dcl 19-3
no_token                               internal static bit(9)                   initial dcl 19-3
nop                                    internal static bit(9)                   initial dcl 12-8
not                                    internal static bit(9)                   initial dcl 19-3
not_bits                               internal static bit(9)                   initial dcl 12-8
not_equal                              internal static bit(9)                   initial dcl 12-8
off_fun                                internal static bit(9)                   initial dcl 12-8
offset_adder                    000000 constant        entry                    external dcl 1-172
offset_mask                            internal static bit(36)                  initial dcl 27-3
on_statement                           internal static bit(9)                   initial dcl 21-3
open_file                              internal static bit(9)                   initial dcl 12-8
open_statement                         internal static bit(9)                   initial dcl 21-3
optimizer                       000000 constant        entry                    external dcl 2-361
or                                     internal static bit(9)                   initial dcl 19-3
or_bits                                internal static bit(9)                   initial dcl 12-8
overlayed_by_builtin_bit               internal static fixed bin(15,0)          initial dcl 25-3
pack                                   internal static bit(9)                   initial dcl 12-8
packed_digits_per_character            internal static fixed bin(31,0)          initial dcl 16-5
page_format                            internal static bit(9)                   initial dcl 12-8
param_desc_ptr                         internal static bit(9)                   initial dcl 12-8
param_ptr                              internal static bit(9)                   initial dcl 12-8
parse_error                     000000 constant        entry                    external dcl 2-364
parse_error$no_text             000000 constant        entry                    external dcl 2-368
percent                                internal static bit(9)                   initial dcl 19-3
period                                 internal static bit(9)                   initial dcl 19-3
picture_format                         internal static bit(9)                   initial dcl 12-8
picture_mask                           internal static bit(36)                  initial dcl 27-3
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 2-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 2-372
pl1_mod_fun                            internal static bit(9)                   initial dcl 12-8
pl1_print$for_lex               000000 constant        entry                    external dcl 2-418
pl1_print$non_varying           000000 constant        entry                    external dcl 2-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 2-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 2-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 2-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 2-414
pl1_print$varying               000000 constant        entry                    external dcl 2-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 2-395
plus                                   internal static bit(9)                   initial dcl 19-3
precision_mask                         internal static bit(36)                  initial dcl 27-3
prefix_plus                            internal static bit(9)                   initial dcl 12-8
procedure_statement                    internal static bit(9)                   initial dcl 21-3
ps_descriptor                          internal static fixed bin(15,0)          initial dcl 24-3
ps_format_area                         internal static fixed bin(15,0)          initial dcl 24-3
ps_job                                 internal static fixed bin(15,0)          initial dcl 24-3
ps_label                               internal static fixed bin(15,0)          initial dcl 24-3
ps_lock_sw                             internal static fixed bin(15,0)          initial dcl 24-3
ps_new_format                          internal static fixed bin(15,0)          initial dcl 24-3
ps_offset                              internal static fixed bin(15,0)          initial dcl 24-3
ps_prep                                internal static fixed bin(15,0)          initial dcl 24-3
ps_set_p                               internal static fixed bin(15,0)          initial dcl 24-3
ps_ssl                                 internal static fixed bin(15,0)          initial dcl 24-3
ps_stack                               internal static fixed bin(15,0)          initial dcl 24-3
ps_symbol_block                        internal static fixed bin(15,0)          initial dcl 24-3
ps_symbol_top                          internal static fixed bin(15,0)          initial dcl 24-3
ps_value                               internal static fixed bin(15,0)          initial dcl 24-3
ptr_fun                                internal static bit(9)                   initial dcl 12-8
ptr_mask                               internal static bit(36)                  initial dcl 27-3
put_control                            internal static bit(9)                   initial dcl 12-8
put_field_chk                          internal static bit(9)                   initial dcl 12-8
put_file                               internal static bit(9)                   initial dcl 12-8
put_statement                          internal static bit(9)                   initial dcl 21-3
put_string                             internal static bit(9)                   initial dcl 12-8
r_format                               internal static bit(9)                   initial dcl 12-8
r_parn                                 internal static bit(9)                   initial dcl 12-8
range_ck                               internal static bit(9)                   initial dcl 12-8
rank_fun                               internal static bit(9)                   initial dcl 12-8
read_file                              internal static bit(9)                   initial dcl 12-8
read_statement                         internal static bit(9)                   initial dcl 21-3
real_fun                               internal static bit(9)                   initial dcl 12-8
real_mask                              internal static bit(36)                  initial dcl 27-3
real_type                              internal static bit(36)                  initial dcl 16-71
reducible_mask                         internal static bit(36)                  initial dcl 27-3
refer                                  internal static bit(9)                   initial dcl 12-8
rel_fun                                internal static bit(9)                   initial dcl 12-8
repeat_fun                             internal static bit(9)                   initial dcl 12-8
reserve$clear                   000000 constant        entry                    external dcl 2-430
reserve$declare_lib             000000 constant        entry                    external dcl 2-434
reserve$read_lib                000000 constant        entry                    external dcl 2-439
return_bits                            internal static bit(9)                   initial dcl 12-8
return_statement                       internal static bit(9)                   initial dcl 21-3
return_string                          internal static bit(9)                   initial dcl 12-8
return_value                           internal static bit(9)                   initial dcl 12-8
return_words                           internal static bit(9)                   initial dcl 12-8
returns_mask                           internal static bit(36)                  initial dcl 27-3
reverse_fun                            internal static bit(9)                   initial dcl 12-8
revert_on                              internal static bit(9)                   initial dcl 12-8
revert_statement                       internal static bit(9)                   initial dcl 21-3
rewrite_file                           internal static bit(9)                   initial dcl 12-8
rewrite_statement                      internal static bit(9)                   initial dcl 21-3
right_parn                             internal static bit(9)                   initial dcl 19-3
round_fun                              internal static bit(9)                   initial dcl 12-8
search_fun                             internal static bit(9)                   initial dcl 12-8
search_rev_fun                         internal static bit(9)                   initial dcl 12-8
segno_fun                              internal static bit(9)                   initial dcl 12-8
semantic_translator             000000 constant        entry                    external dcl 2-444
semantic_translator$call_es     000000 constant        entry                    external dcl 1-196
semi_colon                             internal static bit(9)                   initial dcl 19-3
setbitno_fun                           internal static bit(9)                   initial dcl 12-8
setcharno_fun                          internal static bit(9)                   initial dcl 12-8
sf_par_node                            internal static bit(9)                   initial dcl 8-5
sign_fun                               internal static bit(9)                   initial dcl 12-8
signal_on                              internal static bit(9)                   initial dcl 12-8
signal_statement                       internal static bit(9)                   initial dcl 21-3
signed_mask                            internal static bit(36)                  initial dcl 27-3
simplify_expression             000000 constant        entry                    external dcl 1-205
simplify_offset                 000000 constant        entry                    external dcl 1-212
sin_fun                                internal static bit(9)                   initial dcl 12-8
sind_fun                               internal static bit(9)                   initial dcl 12-8
skip_format                            internal static bit(9)                   initial dcl 12-8
slash                                  internal static bit(9)                   initial dcl 19-3
source_node                            internal static bit(9)                   initial dcl 8-5
sqrt_fun                               internal static bit(9)                   initial dcl 12-8
stack_ptr                              internal static bit(9)                   initial dcl 12-8
stackbaseptr_fun                       internal static bit(9)                   initial dcl 12-8
stackframeptr_fun                      internal static bit(9)                   initial dcl 12-8
stacq_fun                              internal static bit(9)                   initial dcl 12-8
statement_node                         internal static bit(9)                   initial dcl 8-5
std_arg_list                           internal static bit(9)                   initial dcl 12-8
std_call                               internal static bit(9)                   initial dcl 12-8
std_entry                              internal static bit(9)                   initial dcl 12-8
std_return                             internal static bit(9)                   initial dcl 12-8
stop                                   internal static bit(9)                   initial dcl 12-8
stop_statement                         internal static bit(9)                   initial dcl 21-3
storage_block_mask                     internal static bit(36)                  initial dcl 27-3
storage_block_type                     internal static bit(36)                  initial dcl 16-71
structure_mask                         internal static bit(36)                  initial dcl 27-3
sub                                    internal static bit(9)                   initial dcl 12-8
subscripter                     000000 constant        entry                    external dcl 1-216
system_on_unit                         internal static bit(9)                   initial dcl 21-3
tan_fun                                internal static bit(9)                   initial dcl 12-8
tand_fun                               internal static bit(9)                   initial dcl 12-8
temporary_node                         internal static bit(9)                   initial dcl 8-5
this_context                           automatic       bit(36)                  dcl 13-5
token_to_binary                 000000 constant        entry                    external dcl 2-459
translate_fun                          internal static bit(9)                   initial dcl 12-8
trunc_fun                              internal static bit(9)                   initial dcl 12-8
unaligned_mask                         internal static bit(36)                  initial dcl 27-3
undesirable_mask                       internal static bit(36)                  initial dcl 27-41
unknown_statement                      internal static bit(9)                   initial dcl 21-3
unlock_file                            internal static bit(9)                   initial dcl 12-8
unlock_statement                       internal static bit(9)                   initial dcl 21-3
unpack                                 internal static bit(9)                   initial dcl 12-8
unsigned_mask                          internal static bit(36)                  initial dcl 27-3
validate                        000000 constant        entry                    external dcl 1-225
variable_mask                          internal static bit(36)                  initial dcl 27-3
varying_mask                           internal static bit(36)                  initial dcl 27-3
vclock_fun                             internal static bit(9)                   initial dcl 12-8
verify_fun                             internal static bit(9)                   initial dcl 12-8
verify_ltrim_fun                       internal static bit(9)                   initial dcl 12-8
verify_rev_fun                         internal static bit(9)                   initial dcl 12-8
verify_rtrim_fun                       internal static bit(9)                   initial dcl 12-8
wait_statement                         internal static bit(9)                   initial dcl 21-3
word_to_mod2                           internal static bit(9)                   initial dcl 12-8
word_to_mod4                           internal static bit(9)                   initial dcl 12-8
word_to_mod8                           internal static bit(9)                   initial dcl 12-8
wordno_fun                             internal static bit(9)                   initial dcl 12-8
words_per_condition_var                internal static fixed bin(31,0)          initial dcl 16-5
words_per_entry_var                    internal static fixed bin(31,0)          initial dcl 16-5
words_per_file_var                     internal static fixed bin(31,0)          initial dcl 16-5
words_per_fix_bin_1                    internal static fixed bin(31,0)          initial dcl 16-5
words_per_fix_bin_2                    internal static fixed bin(31,0)          initial dcl 16-5
words_per_flt_bin_1                    internal static fixed bin(31,0)          initial dcl 16-5
words_per_flt_bin_2                    internal static fixed bin(31,0)          initial dcl 16-5
words_per_format                       internal static fixed bin(31,0)          initial dcl 16-5
words_per_label_var                    internal static fixed bin(31,0)          initial dcl 16-5
words_per_offset                       internal static fixed bin(31,0)          initial dcl 16-5
words_per_packed_pointer               internal static fixed bin(31,0)          initial dcl 16-5
words_per_pointer                      internal static fixed bin(31,0)          initial dcl 16-5
words_per_varying_string_header        internal static fixed bin(31,0)          initial dcl 16-5
write_file                             internal static bit(9)                   initial dcl 12-8
write_statement                        internal static bit(9)                   initial dcl 21-3
x_format                               internal static bit(9)                   initial dcl 12-8
xor_bits                               internal static bit(9)                   initial dcl 12-8

NAMES DECLARED BY EXPLICIT CONTEXT.
abort_null                      002206 constant        label                    dcl 519 ref 475 512 516
abort_tp                        002210 constant        label                    dcl 521 ref 479 483 488 492 496 500 504 508 571
abort_trans                     001355 constant        label                    dcl 279 ref 274
action                          000000 constant        label                    array(34) dcl 432 ref 430
assign_ps                       004257 constant        entry                    internal dcl 917 ref 540 551 643 741 744 812 815 820
                                                                                  824 825 843 852 870 911
byte_buffer                     005254 constant        entry                    internal dcl 1083 ref 620
end_loop1                       001734 constant        label                    dcl 373 ref 357 370
end_loop2                       001756 constant        label                    dcl 432 ref 524 543 554 669 678 705 750 755 762 796
                                                                                  872
end_make_ps                     004606 constant        label                    dcl 989 ref 1078
err114                          002146 constant        label                    dcl 477 ref 891
err115                          002151 constant        label                    dcl 481 ref 892
err461                          002161 constant        label                    dcl 490 ref 876 877
err462                          002164 constant        label                    dcl 494 ref 534
err463                          002167 constant        label                    dcl 498 ref 560
err464                          002172 constant        label                    dcl 502 ref 651
err465                          002175 constant        label                    dcl 506 ref 893
err466                          002200 constant        label                    dcl 510 ref 716 718
err467                          002203 constant        label                    dcl 514 ref 345 930
err468                          002154 constant        label                    dcl 485 ref 895 896 899
err471                          001350 constant        label                    dcl 272 ref 125 134
err472                          001353 constant        label                    dcl 276 ref 126 171
err62                           002143 constant        label                    dcl 473 ref 372
exit                            001766 constant        label                    dcl 440 ref 853
io_semantics                    000230 constant        entry                    external dcl 28
io_semantics_util               004566 constant        entry                    internal dcl 974
io_semantics_util$keys          004715 constant        entry                    internal dcl 1004 ref 549 661 942
io_semantics_util$make_fa       005074 constant        entry                    internal dcl 1039 ref 759
io_semantics_util$make_fab2     005140 constant        entry                    internal dcl 1058 ref 798
io_semantics_util$make_ffsb     005110 constant        entry                    internal dcl 1044 ref 722 821
io_semantics_util$make_ps       004572 constant        entry                    internal dcl 984 ref 300
io_semantics_util$make_ssl      005124 constant        entry                    internal dcl 1053 ref 753
keep_statement                  001453 constant        label                    dcl 293 ref 286
keyto_join                      003500 constant        label                    dcl 777 ref 700
locate_prelim                   004051 constant        label                    dcl 874 ref 353
loop                            005262 constant        label                    dcl 1091 ref 1111
loop1                           001602 constant        label                    dcl 355 ref 350 914
loop2                           001736 constant        label                    dcl 424
main_io_operator                001400 constant        label                    dcl 284 ref 95
make                            005154 constant        label                    dcl 1063 ref 987 1042 1051 1056 1061
set_addr                        004042 constant        label                    dcl 870 ref 536 563 647 746
set_variable_p                  002640 constant        label                    dcl 645
test_file                       002232 constant        label                    dcl 534 ref 531
transmission_operators          000247 constant        label                    dcl 97

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      6130        6230    5570        6140
Length      7246    5570       100        1001     337           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
io_semantics                        558 external procedure  is an external procedure.  
assign_ps                               internal procedure  shares stack frame of external procedure io_semantics.  
io_semantics_util                       internal procedure  shares stack frame of external procedure io_semantics.  
byte_buffer                             internal procedure  shares stack frame of external procedure io_semantics.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
io_semantics             000100 type                        io_semantics
                         000101 opcode_temp                 io_semantics
                         000102 a                           io_semantics
                         000104 b                           io_semantics
                         000106 cs                          io_semantics
                         000110 ns                          io_semantics
                         000112 vs                          io_semantics
                         000114 q                           io_semantics
                         000116 r                           io_semantics
                         000120 s                           io_semantics
                         000122 t                           io_semantics
                         000124 tp                          io_semantics
                         000126 tp1                         io_semantics
                         000130 dp                          io_semantics
                         000132 locate_var                  io_semantics
                         000134 locate_set                  io_semantics
                         000136 locate_size                 io_semantics
                         000140 transop                     io_semantics
                         000141 convtype                    io_semantics
                         000142 i                           io_semantics
                         000143 n                           io_semantics
                         000144 m                           io_semantics
                         000145 PS_offset                   io_semantics
                         000146 lal                         io_semantics
                         000147 no_byte                     io_semantics
                         000150 cbs                         io_semantics
                         000151 strlen                      io_semantics
                         000152 assign_list                 io_semantics
                         000224 end_of_join                 io_semantics
                         000226 job                         io_semantics
                         000227 job_additions               io_semantics
                         000230 constsize                   io_semantics
                         000231 stringdesc                  io_semantics
                         000232 fab2mod2                    io_semantics
                         000250 context                     io_semantics
                         000264 tp                          assign_ps
                         000266 ap                          assign_ps
                         000270 outtype                     assign_ps
                         000300 s                           io_semantics_util
                         000302 t                           io_semantics_util
                         000304 tp                          io_semantics_util
                         000306 q                           io_semantics_util
                         000310 r                           io_semantics_util
                         000312 i                           io_semantics_util
                         000313 n                           io_semantics_util
                         000326 adam                        byte_buffer
                         000330 s                           byte_buffer

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
unpk_to_pk          call_ext_out_desc   call_ext_out        return_mac          mdfx1               signal_op
ext_entry           any_to_any_truncate_

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
alloc_semantics$init_only     convert                       convert$from_builtin          convert$to_target
copy_expression               create_label                  create_list                   create_operator
create_reference              create_statement              create_symbol                 create_token
declare                       declare_constant              declare_constant$bit          declare_constant$integer
declare_descriptor            declare_temporary             expression_semantics          io_data_list_semantics
operator_semantics            propagate_bit                 refer_extent                  semantic_translator$abort
semantic_translator$error     share_expression

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pl1_stat_$check_ansi          pl1_stat_$generate_symtab




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     28 000224        94 000235        95 000241        97 000247       100 000250       102 000252       117 000263
    118 000264       119 000266       120 000267       123 000271       125 000275       126 000302       129 000311
    132 000331       134 000335       136 000342       139 000345       141 000354       143 000366       146 000377
    148 000400       151 000405       152 000425       153 000430       154 000460       155 000464       156 000465
    158 000500       160 000505       162 000511       164 000514       165 000517       169 000536       171 000542
    174 000551       176 000606       178 000611       180 000622       181 000624       186 000634       188 000637
    189 000643       190 000645       191 000652       192 000655       193 000657       194 000660       197 000661
    200 000667       201 000672       202 000713       203 000733       204 000734       206 000771       220 000774
    223 001010       224 001013       226 001021       228 001023       229 001030       231 001032       233 001035
    234 001040       237 001046       238 001057       240 001077       241 001100       243 001120       246 001121
    247 001130       250 001141       252 001145       253 001147       254 001205       256 001206       257 001227
    258 001256       259 001314       263 001316       265 001322       266 001325       267 001336       270 001347
    272 001350       274 001352       276 001353       279 001355       281 001366       282 001377       284 001400
    286 001404       287 001411       288 001440       289 001446       290 001450       291 001452       293 001453
    295 001454       296 001456       297 001460       298 001463       300 001466       301 001470       302 001473
    329 001475       330 001501       331 001521       332 001526       334 001527       340 001531       342 001534
    343 001552       345 001562       347 001566       349 001573       350 001576       353 001577       355 001602
    357 001611       358 001614       360 001615       364 001625       365 001651       367 001673       370 001723
    372 001731       373 001734       424 001736       427 001745       429 001752       430 001755       432 001756
    440 001766       443 001772       444 001775       450 002001       452 002021       453 002022       455 002025
    456 002056       457 002063       459 002071       460 002110       461 002117       462 002123       467 002125
    468 002135       469 002140       472 002142       473 002143       475 002145       477 002146       479 002150
    481 002151       483 002153       485 002154       487 002156       488 002160       490 002161       492 002163
    494 002164       496 002166       498 002167       500 002171       502 002172       504 002174       506 002175
    508 002177       510 002200       512 002202       514 002203       516 002205       519 002206       521 002210
    523 002221       524 002224       529 002225       531 002227       532 002230       534 002232       536 002236
    538 002237       540 002256       543 002264       545 002265       549 002271       550 002277       551 002316
    554 002324       556 002325       558 002327       560 002334       561 002341       562 002355       563 002364
    567 002365       571 002367       573 002370       576 002403       578 002417       586 002420       587 002423
    590 002431       591 002433       592 002435       593 002437       594 002446       597 002447       599 002453
    600 002455       601 002457       603 002460       604 002463       606 002465       610 002474       613 002501
    615 002505       616 002513       617 002526       619 002527       620 002542       622 002551       624 002571
    629 002612       631 002616       632 002623       633 002625       642 002626       643 002632       645 002640
    647 002642       649 002643       651 002645       652 002650       654 002661       655 002707       656 002714
    657 002731       660 002734       661 002740       662 002746       664 002761       665 002763       666 002765
    669 003011       673 003012       678 003041       680 003042       684 003060       692 003067       693 003071
    697 003073       699 003076       700 003100       703 003101       705 003116       707 003117       709 003120
    711 003123       712 003141       713 003150       714 003153       716 003154       717 003160       718 003163
    719 003171       722 003202       724 003210       726 003213       727 003215       728 003220       730 003241
    731 003253       732 003273       734 003314       736 003315       737 003320       738 003341       741 003353
    742 003361       743 003363       744 003367       745 003375       746 003377       748 003400       750 003403
    753 003406       755 003414       759 003415       762 003423       764 003424       768 003460       770 003465
    771 003470       773 003472       774 003474       775 003476       777 003500       788 003531       789 003536
    790 003555       791 003560       792 003576       794 003601       795 003616       796 003621       798 003622
    800 003630       802 003634       803 003652       804 003657       805 003661       806 003664       809 003667
    811 003671       812 003674       814 003705       815 003710       817 003722       818 003725       820 003731
    821 003737       823 003745       824 003751       825 003757       842 003775       843 004015       844 004022
    846 004025       847 004027       848 004032       852 004033       853 004041       870 004042       872 004050
    874 004051       876 004054       877 004060       879 004065       881 004070       882 004100       883 004104
    884 004106       885 004107       888 004111       889 004112       890 004131       891 004134       892 004137
    893 004142       894 004147       895 004153       896 004157       899 004163       901 004167       902 004171
    903 004173       905 004213       907 004225       908 004226       911 004245       913 004253       914 004256
    917 004257       930 004261       932 004265       935 004307       937 004314       938 004333       939 004337
    941 004340       942 004347       947 004363       949 004376       951 004400       952 004421       953 004426
    956 004451       957 004477       960 004500       962 004505       964 004512       966 004514       967 004522
    968 004524       971 004565       974 004566       984 004571       985 004576       986 004600       987 004605
    989 004606       991 004621       992 004624       994 004631       998 004641       999 004657      1000 004663
   1001 004667      1002 004706      1004 004715      1010 004720      1011 004726      1013 004731      1015 004734
   1016 004754      1022 004771      1026 005017      1028 005026      1029 005031      1030 005035      1032 005037
   1033 005041      1035 005056      1036 005064      1039 005074      1040 005100      1041 005102      1042 005107
   1044 005110      1045 005114      1050 005116      1051 005123      1053 005124      1054 005130      1055 005132
   1056 005137      1058 005140      1059 005144      1060 005146      1061 005153      1063 005154      1066 005172
   1068 005220      1073 005231      1074 005235      1076 005240      1078 005242      1079 005245      1083 005254
   1089 005256      1091 005262      1092 005266      1093 005270      1095 005271      1101 005313      1104 005323
   1105 005330      1106 005332      1108 005342      1110 005343      1111 005345


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
