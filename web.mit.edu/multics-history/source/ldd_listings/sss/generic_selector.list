	COMPILATION LISTING OF SEGMENT generic_selector
	Compiled by: Multics PL/I Compiler, Release 33e, of October 6, 1992
	Compiled at: CGI                             
	Compiled on: 2000-04-17_1936.36_Mon_mdt
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 generic_selector:	proc(blk,stmnt,tree,subs,context) returns (ptr);
       12 
       13 /*	Written 13 November 1972 by Richard A. Barnes */
       14 
       15 
       16 dcl	(blk,stmnt,tree,subs) ptr;
       17 
       18 dcl	(arg_list,a,alt,g,lp,old,p,q,r,st) ptr;
       19 dcl	asym(subs->list.number) ptr;
       20 dcl	(i,j,n_args) fixed bin(17);
       21 dcl	leave_it bit(1) aligned;
       22 
       23 dcl	(bool,hbound,null,string,substr) builtin;
       24 
  1     1 /* BEGIN INCLUDE FILE ... semant.incl.pl1 */
  1     2 
  1     3 /* Modified: 30 Aug 1979 by PCK to fix 1804 and 1823 */
  1     4 /* Modified: 26 Aug 1979 by PCK to implement by name assignment */
  1     5 
  1     6 
  1     7 declare	alloc_semantics	entry(pointer,pointer,pointer);
  1     8 			/* parameter 1:	(input)	block node pointer		*/
  1     9 			/* parameter 2:	(input)	statement node pointer	*/
  1    10 			/* parameter 3:	(in/out)	tree pointer		*/
  1    11 
  1    12 declare	alloc_semantics$init_only entry(pointer,pointer,pointer);
  1    13 			/* parameter 1:	(input)	qualifier pointer		*/
  1    14 			/* parameter 2:	(input)	statement node pointer	*/
  1    15 			/* parameter 3:	(input)	symbol node pointer		*/
  1    16 
  1    17 declare	builtin		entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  1    18 			returns(pointer);
  1    19 			/* parameter 1:	(input)	block node pointer		*/
  1    20 			/* parameter 2:	(input)	statement node pointer	*/
  1    21 			/* parameter 3:	(input)	tree pointer		*/
  1    22 			/* parameter 4:	(input)	subscript pointer		*/
  1    23 			/* parameter 5:	(input)	builtin symbol node pointer	*/
  1    24 			/* parameter 6:	(in/out)	context			*/
  1    25 			/* return:	(output)	tree pointer		*/
  1    26 
  1    27 declare	check_star_extents	entry(pointer,pointer);
  1    28 			/* parameter 1:	(input) symbol node of procedure	*/
  1    29 			/* parameter 2:	(input) argument list pointer		*/
  1    30 
  1    31 declare	compare_declaration	entry(pointer,pointer,bit(1) aligned) reducible
  1    32 			returns(bit(1) aligned);
  1    33 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  1    34 			/* parameter 2:	(input)	symbol node ptr	*/
  1    35 			/* parameter 3:	(input)	"1"b if aligned attribute ignored for string	*/
  1    36 			/* return:	(output)	compare bit		*/
  1    37 
  1    38 declare	context_processor	entry(pointer,label);
  1    39 			/* parameter 1:	(input)	root block node pointer	*/
  1    40 
  1    41 declare	declare		entry(pointer);
  1    42 			/* parameter 1:	(input)	symbol node pointer		*/
  1    43 
  1    44 declare	declare_structure	entry(pointer);
  1    45 			/* parameter 1:	(input)	symbol node pointer		*/
  1    46 
  1    47 declare	defined_reference	entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  1    48 			returns(pointer);
  1    49 			/* parameter 1:	(input)	block node pointer		*/
  1    50 			/* parameter 2:	(input)	statement node pointer	*/
  1    51 			/* parameter 3:	(input)	tree pointer		*/
  1    52 			/* parameter 4:	(input)	subscript list pointer or null*/
  1    53 			/* parameter 5:	(input)	symbol node pointer		*/
  1    54 			/* parameter 6:	(in/out)	context			*/
  1    55 			/* return:	(output)	tree pointer		*/
  1    56 
  1    57 declare	do_semantics	entry(pointer,pointer,pointer);
  1    58 			/* parameter 1:	(input)	block node pointer		*/
  1    59 			/* parameter 2:	(input)	statement node pointer	*/
  1    60 			/* parameter 3:	(input)	tree pointer		*/
  1    61 
  1    62 declare	expand_assign	entry(pointer,pointer,pointer,bit(36) aligned,pointer)
  1    63 			returns(pointer);
  1    64 			/* parameter 1:	(input)	block node pointer		*/
  1    65 			/* parameter 2:	(input)	statement node pointer	*/
  1    66 			/* parameter 3:	(input)	tree pointer		*/
  1    67 			/* parameter 4:	(in/out)	context			*/
  1    68 			/* parameter 5:	(input)	aggregate reference node ptr	*/
  1    69 			/* return:	(output)	tree pointer		*/
  1    70 
  1    71 declare	expand_by_name	entry(pointer,pointer,pointer);
  1    72 			/* parameter 1:	(input)	block node pointer		*/
  1    73 			/* parameter 2:	(input)	statement node pointer	*/
  1    74 			/* parameter 3:	(input/output)	tree pointer		*/
  1    75 
  1    76 declare	expand_infix	entry(pointer,pointer,pointer,bit(36) aligned)
  1    77 			returns(pointer);
  1    78 			/* parameter 1:	(input)	block node pointer		*/
  1    79 			/* parameter 2:	(input)	statement node pointer	*/
  1    80 			/* parameter 3:	(input)	tree pointer		*/
  1    81 			/* parameter 4:	(in/out)	context			*/
  1    82 			/* return:	(output)	tree pointer		*/
  1    83 
  1    84 declare	expand_initial	entry(pointer,pointer,pointer);
  1    85 			/* parameter 1:	(input)	symbol node pointer		*/
  1    86 			/* parameter 2:	(input)	statement node pointer	*/
  1    87 			/* parameter 3:	(input)	locator			*/
  1    88 
  1    89 declare	expand_prefix	entry(pointer,pointer,pointer,bit(36) aligned)
  1    90 			returns(pointer);
  1    91 			/* parameter 1:	(input)	block node pointer		*/
  1    92 			/* parameter 2:	(input)	statement node pointer	*/
  1    93 			/* parameter 3:	(input)	tree pointer		*/
  1    94 			/* parameter 4:	(in/out)	context			*/
  1    95 			/* return:	(output)	tree pointer		*/
  1    96 
  1    97 declare	expand_primitive	entry(pointer,pointer,pointer,bit(36) aligned)
  1    98 			returns(pointer);
  1    99 			/* parameter 1:	(input)	block node pointer		*/
  1   100 			/* parameter 2:	(input)	statement node pointer	*/
  1   101 			/* parameter 3:	(input)	tree pointer		*/
  1   102 			/* parameter 4:	(input)	context			*/
  1   103 			/* return:	(output)	tree pointer		*/
  1   104 
  1   105 declare	expression_semantics entry(pointer,pointer,pointer,bit(36) aligned)
  1   106 			returns(pointer);
  1   107 			/* parameter 1:	(input)	block node pointer		*/
  1   108 			/* parameter 2:	(input)	statement node pointer	*/
  1   109 			/* parameter 3:	(input)	tree pointer		*/
  1   110 			/* parameter 4:	(in/out)	context			*/
  1   111 			/* return:	(output)	tree pointer		*/
  1   112 
  1   113 declare	fill_refer	entry(pointer,pointer,bit(1) aligned)
  1   114 			returns(pointer);
  1   115 			/* parameter 1:	(input)	null,ref node,op node ptr */
  1   116 			/* parameter 2:	(input)	null,ref node,op node ptr */
  1   117 			/* parameter 3:	(input)	copy switch for param 2 */
  1   118 			/* return:	(output)	ptr to processed tree */
  1   119 
  1   120 declare	io_data_list_semantics$format_list_semantics entry(pointer,pointer,pointer);
  1   121 			/* parameter 1:	(input)	block node pointer		*/
  1   122 			/* parameter 2:	(input)	statement node pointer	*/
  1   123 			/* parameter 3:	(in/out)	tree pointer		*/
  1   124 
  1   125 declare	function		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   126 			returns(pointer);
  1   127 			/* parameter 1:	(input)	block node pointer		*/
  1   128 			/* parameter 2:	(input)	statement node pointer	*/
  1   129 			/* parameter 3:	(input)	tree pointer		*/
  1   130 			/* parameter 4:	(input)	symbol node pointer		*/
  1   131 			/* parameter 5:	(in/out)	context			*/
  1   132 			/* return:	(output)	tree pointer		*/
  1   133 
  1   134 declare	generic_selector	entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   135 			returns(pointer);
  1   136 			/* parameter 1:	(input)	block node pointer	*/
  1   137 			/* parameter 2:	(input)	statement node pointer	*/
  1   138 			/* parameter 3:	(input)	tree pointer	*/
  1   139 			/* parameter 4:	(input)	pointer to argument list	*/
  1   140 			/* parameter 5:	(in/out)	context		*/
  1   141 			/* return:	(output)	tree pointer	*/
  1   142 
  1   143 declare	io_data_list_semantics entry(pointer,pointer,pointer);
  1   144 			/* parameter 1:	(input)	block node pointer		*/
  1   145 			/* parameter 2:	(input)	statement node pointer	*/
  1   146 			/* parameter 3:	(input)	operator node pointer	*/
  1   147 
  1   148 declare	io_semantics	entry(pointer,pointer,pointer);
  1   149 			/* parameter 1:	(input)	block node pointer		*/
  1   150 			/* parameter 2:	(input)	statement node pointer	*/
  1   151 			/* parameter 3:	(input)	tree pointer		*/
  1   152 
  1   153 declare	lookup		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  1   154 			returns(bit(1) aligned);
  1   155 			/* parameter 1:	(input)	block node pointer		*/
  1   156 			/* parameter 2:	(input)	stmnt|symbol node pointer	*/
  1   157 			/* parameter 3:	(input)	token or reference node ptr	*/
  1   158 			/* parameter 4:	(output)	symbol node pointer		*/
  1   159 			/* parameter 5:	(in/out)	context			*/
  1   160 			/* return:	(output)	symbol found bit		*/
  1   161 
  1   162 declare	make_non_quick	entry(pointer, bit (36) aligned);
  1   163 			/* parameter 1:	(input)	tree pointer	*/
  1   164 			/* parameter 2:	(input)	reason why being made nonquick */
  1   165 
  1   166 declare	match_arguments	entry(pointer,pointer) reducible
  1   167 			returns(bit(1) aligned);
  1   168 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  1   169 			/* parameter 2:	(input)	reference or symbol node ptr	*/
  1   170 			/* return:	(output)	compare bit		*/
  1   171 
  1   172 declare	offset_adder	entry(pointer,fixed binary(31),fixed binary(3),bit(1) aligned,
  1   173 			      pointer,fixed binary(31),fixed binary(3),bit(1) aligned,bit(1));
  1   174 			/* parameter 1:	(in/out)	tree pointer		*/
  1   175 			/* parameter 2:	(in/out)	constant size		*/
  1   176 			/* parameter 3:	(in/out)	units			*/
  1   177 			/* parameter 4:	(in/out) 	ON if units ^= word_, but tree in words	*/
  1   178 			/* parameter 5:	(input)	tree pointer		*/
  1   179 			/* parameter 6:	(input)	constant size		*/
  1   180 			/* parameter 7:	(input)	units			*/
  1   181 			/* parameter 8:	(input)	ON if units ^= word_, but tree in words	*/
  1   182 			/* parameter 9:	(input)	ON if should not improve units	*/
  1   183 
  1   184 declare	operator_semantics	entry(pointer,pointer,pointer,bit(36) aligned)
  1   185 			returns(pointer);
  1   186 			/* parameter 1:	(input)	block node pointer		*/
  1   187 			/* parameter 2:	(input)	statement node pointer	*/
  1   188 			/* parameter 3:	(input)	tree pointer		*/
  1   189 			/* parameter 4:	(in/out)	context			*/
  1   190 			/* return:	(output)	tree pointer		*/
  1   191 
  1   192 declare	propagate_bit	entry(pointer,fixed binary(15));
  1   193 			/* parameter 1:	(input)	symbol node pointer		*/
  1   194 			/* parameter 2:	(input)	attribute number		*/
  1   195 
  1   196 declare	semantic_translator$call_es entry(pointer,pointer,pointer,label,bit(1) aligned)
  1   197 			returns(pointer);
  1   198 			/* parameter 1:	(input)	block ptr	*/
  1   199 			/* parameter 2:	(input)	statement ptr	*/
  1   200 			/* parameter 3:	(input)	tree ptr	*/
  1   201 			/* parameter 4:	(input)	failure label	*/
  1   202 			/* parameter 5:	(input)	"1"b -- convert to integer	*/
  1   203 			/* return:	(output)	tree ptr		*/
  1   204 
  1   205 declare	simplify_expression	entry(pointer,fixed bin,bit(1)aligned);
  1   206 			/* parameter 1:	(in/out)	tree pointer		*/
  1   207 			/* parameter 2:	(output)	value of constant, if the entire tree
  1   208*						is simplified		*/
  1   209 			/* parameter 3:	(output)	bit indicating if the tree has
  1   210*						been simplified		*/
  1   211 
  1   212 declare	simplify_offset	entry(pointer,bit(36) aligned);
  1   213 			/* parameter 1:	(input)	reference node pointer	*/
  1   214 			/* parameter 2:	(input)	context			*/
  1   215 
  1   216 declare	subscripter	entry(pointer,pointer,pointer,pointer,pointer)
  1   217 			returns(pointer);
  1   218 			/* parameter 1:	(input)	block node pointer		*/
  1   219 			/* parameter 2:	(input)	statement node pointer	*/
  1   220 			/* parameter 3:	(input)	tree pointer		*/
  1   221 			/* parameter 4:	(in/out)	subscript list pointer	*/
  1   222 			/* parameter 5:	(input)	symbol node pointer		*/
  1   223 			/* return:	(output)	reference node pointer	*/
  1   224 
  1   225 declare	validate		entry(pointer);
  1   226 			/* parameter 1:	(input)	symbol node pointer		*/
  1   227 
  2     1 /****^  *********************************************************
  2     2*        *                                                       *
  2     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  2     4*        *                                                       *
  2     5*        ********************************************************* */
  2     6 
  2     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  2     8 
  2     9 
  2    10 /****^  HISTORY COMMENTS:
  2    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  2    12*     install(89-07-31,MR12.3-1066):	
  2    13*     Removed the obsolete parameter source_line from the dcl of error_().
  2    14*                                                   END HISTORY COMMENTS */
  2    15 
  2    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  2    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  2    18* */
  2    19 
  2    20 declare	adjust_count	entry(pointer);
  2    21 			/* parameter 1:	(input)	any node pointer		*/
  2    22 
  2    23 declare	bindec		entry(fixed bin(31)) reducible
  2    24 			returns(character(12) aligned);
  2    25 			/* parameter 1:	(input)	bin value			*/
  2    26 			/* return:	(output)	character value with blanks	*/
  2    27 
  2    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  2    29 			returns(character(12) aligned varying);
  2    30 			/* parameter 1:	(input)	binary value		*/
  2    31 			/* return:	(output)	char value without blanks	*/
  2    32 
  2    33 declare	binoct		entry(fixed bin(31)) reducible
  2    34 			returns(char(12) aligned);
  2    35 			/* parameter 1:	(input)	binary value		*/
  2    36 			/* return:	(output)	char value with blanks	*/
  2    37 
  2    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  2    39 			returns(char(12) aligned);
  2    40 			/* parameter 1:	(input)	binary value		*/
  2    41 			/* return:	(output)	right-aligned char value	*/
  2    42 
  2    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  2    44 			returns(char(12) varying aligned);
  2    45 			/* parameter 1:	(input)	binary value		*/
  2    46 			/* returns:	(output)	char value without blanks	*/
  2    47 
  2    48 declare	compare_expression	entry(pointer,pointer) reducible
  2    49 			returns(bit(1) aligned);
  2    50 			/* parameter 1:	(input)	any node pointer		*/
  2    51 			/* parameter 2:	(input)	any node pointer		*/
  2    52 			/* return:	(output)	compare bit		*/
  2    53 
  2    54 declare	constant_length	entry (pointer, fixed bin (71))
  2    55 			returns (bit (1) aligned);
  2    56 			/* parameter 1:	(input)	reference node pointer	*/
  2    57 			/* parameter 2:	(input)	value of constant length	*/
  2    58 			/* return:	(output)	"1"b if constant length	*/
  2    59 
  2    60 declare	convert		entry(pointer,bit(36) aligned)
  2    61 			returns(pointer);
  2    62 			/* parameter 1:	(input)	any node pointer		*/
  2    63 			/* parameter 2:	(input)	target type		*/
  2    64 			/* return:	(output)	target value tree pointer	*/
  2    65 
  2    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  2    67 			returns(pointer);
  2    68 			/* parameter 1:	(input)	any node pointer		*/
  2    69 			/* parameter 2:	(input)	target type		*/
  2    70 			/* return:	(output)	target value tree pointer	*/
  2    71 
  2    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  2    73 			returns(pointer);
  2    74 			/* parameter 1:	(input)	any node pointer		*/
  2    75 			/* parameter 2:	(input)	target type		*/
  2    76 			/* return:	(output)	target value tree pointer	*/
  2    77 
  2    78 declare	convert$validate	entry(pointer,pointer);
  2    79 			/* parameter 1:	(input)	source value tree pointer	*/
  2    80 			/* parameter 2:	(input)	target reference node pointer	*/
  2    81 
  2    82 declare	convert$to_target_fb entry(pointer,pointer)
  2    83 			returns(pointer);
  2    84 			/* parameter 1:	(input)	source value tree pointer	*/
  2    85 			/* parameter 2:	(input)	target reference node pointer	*/
  2    86 			/* return:	(output)	target value tree pointer	*/
  2    87 
  2    88 declare	convert$to_target	entry(pointer,pointer)
  2    89 			returns(pointer);
  2    90 			/* parameter 1:	(input)	source value tree pointer	*/
  2    91 			/* parameter 2:	(input)	target reference node pointer	*/
  2    92 			/* return:	(output)	target value tree pointer	*/
  2    93 
  2    94 declare	copy_expression	entry(pointer unaligned)
  2    95 			returns(pointer);
  2    96 			/* parameter 1:	(input)	any node pointer		*/
  2    97 			/* return:	(output)	any node pointer		*/
  2    98 
  2    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  2   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  2   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  2   102 
  2   103 declare	copy_unique_expression entry(pointer)
  2   104 			returns(pointer);
  2   105 			/* parameter 1:	(input)	any node pointer		*/
  2   106 			/* return:	(output)	any node pointer		*/
  2   107 
  2   108 declare	create_array	entry()
  2   109 			returns(pointer);
  2   110 			/* return:	(output)	array node pointer		*/
  2   111 
  2   112 declare	create_block	entry(bit(9) aligned,pointer)
  2   113 			returns(pointer);
  2   114 			/* parameter 1:	(input)	block type		*/
  2   115 			/* parameter 2:	(input)	father block node pointer	*/
  2   116 			/* return:	(output)	block node pointer		*/
  2   117 
  2   118 declare	create_bound	entry()
  2   119 			returns(pointer);
  2   120 			/* return:	(output)	bound node pointer		*/
  2   121 
  2   122 declare	create_context	entry(pointer,pointer)
  2   123 			returns(pointer);
  2   124 			/* parameter 1:	(input)	block node pointer		*/
  2   125 			/* parameter 2:	(input)	token pointer		*/
  2   126 			/* return:	(output)	context node pointer	*/
  2   127 
  2   128 declare	create_cross_reference entry()
  2   129 			returns(pointer);
  2   130 			/* return:	(output)	cross reference node pointer	*/
  2   131 
  2   132 declare	create_default	entry
  2   133 			returns(pointer);
  2   134 			/* return:	(output)	default node pointer	*/
  2   135 
  2   136 declare	create_identifier	entry()
  2   137 			returns(pointer);
  2   138 			/* return:	(output)	token node pointer		*/
  2   139 
  2   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  2   141 			returns(pointer);
  2   142 			/* parameter 1:	(input)	block node pointer		*/
  2   143 			/* parameter 2:	(input)	token node pointer		*/
  2   144 			/* parameter 3:	(input)	declare type		*/
  2   145 			/* return:	(output)	label node pointer		*/
  2   146 
  2   147 declare	create_list	entry(fixed bin(15))
  2   148 			returns(pointer);
  2   149 			/* parameter 1:	(input)	number of list elements	*/
  2   150 			/* return:	(output)	list node pointer		*/
  2   151 
  2   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  2   153 			returns(pointer);
  2   154 			/* parameter 1:	(input)	operator type		*/
  2   155 			/* parameter 2:	(input)	number of operands		*/
  2   156 			/* return:	(output)	operator node pointer	*/
  2   157 
  2   158 declare	create_reference	entry(pointer)
  2   159 			returns(pointer);
  2   160 			/* parameter 1:	(input)	symbol node pointer		*/
  2   161 			/* return:	(output)	reference node pointer	*/
  2   162 
  2   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   164 			returns(pointer);
  2   165 			/* parameter 1:	(input)	statement type		*/
  2   166 			/* parameter 2:	(input)	block node pointer		*/
  2   167 			/* parameter 3:	(input)	label node pointer		*/
  2   168 			/* parameter 4:	(input)	conditions		*/
  2   169 			/* return:	(output)	statement node pointer	*/
  2   170 
  2   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   172 			returns(pointer);
  2   173 			/* parameter 1:	(input)	statement type		*/
  2   174 			/* parameter 2:	(input)	block node pointer		*/
  2   175 			/* parameter 3:	(input)	label node pointer		*/
  2   176 			/* parameter 4:	(input)	conditions		*/
  2   177 			/* return:	(output)	statement node pointer	*/
  2   178 
  2   179 declare	create_storage	entry(fixed bin(15))
  2   180 			returns(pointer);
  2   181 			/* parameter 1:	(input)	number of words		*/
  2   182 			/* return:	(output)	storage block pointer	*/
  2   183 
  2   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  2   185 			returns(pointer);
  2   186 			/* parameter 1:	(input)	block node pointer		*/
  2   187 			/* parameter 2:	(input)	token node pointer		*/
  2   188 			/* parameter 3:	(input)	declare type		*/
  2   189 			/* return:	(output)	symbol node pointer		*/
  2   190 
  2   191 declare	create_token	entry (character (*), bit (9) aligned)
  2   192 			returns (ptr);
  2   193 			/* parameter 1:	(input)	token string		*/
  2   194 			/* parameter 2:	(input)	token type		*/
  2   195 			/* return:	(output)	token node ptr		*/
  2   196 
  2   197 declare	create_token$init_hash_table entry ();
  2   198 
  2   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  2   200 			returns (ptr);
  2   201 			/* parameter 1:	(input)	token string		*/
  2   202 			/* parameter 2:	(input)	token type		*/
  2   203 			/* parameter 3:	(input)	protected flag		*/
  2   204 			/* return:	(output)	token node ptr		*/
  2   205 
  2   206 declare	decbin		entry(character(*) aligned) reducible
  2   207 			returns(fixed bin(31));
  2   208 			/* parameter 1:	(input)	decimal character string	*/
  2   209 			/* return:	(output)	binary value		*/
  2   210 
  2   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  2   212 			returns(pointer);
  2   213 			/* parameter 1:	(input)	value			*/
  2   214 			/* parameter 2:	(input)	type			*/
  2   215 			/* parameter 3:	(input)	size			*/
  2   216 			/* parameter 4:	(input)	scale			*/
  2   217 			/* return:	(output)	reference node pointer	*/
  2   218 
  2   219 declare	declare_constant$bit entry(bit(*) aligned)
  2   220 			returns(pointer);
  2   221 			/* parameter 1:	(input)	bit			*/
  2   222 			/* return:	(output)	reference node pointer	*/
  2   223 
  2   224 declare	declare_constant$char entry(character(*) aligned)
  2   225 			returns(pointer);
  2   226 			/* parameter 1:	(input)	character			*/
  2   227 			/* return:	(output)	reference node pointer	*/
  2   228 
  2   229 declare	declare_constant$desc entry(bit(*) aligned)
  2   230 			returns(pointer);
  2   231 			/* parameter 1:	(input)	descriptor bit value	*/
  2   232 			/* return:	(output)	reference node pointer	*/
  2   233 
  2   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  2   235 			returns(pointer);
  2   236 			/* parameter 1:	(input)	integer			*/
  2   237 			/* return:	(output)	reference node pointer	*/
  2   238 
  2   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   240 			returns(pointer);
  2   241 			/* parameter 1:	(input)	block node pointer		*/
  2   242 			/* parameter 2:	(input)	statement node pointer	*/
  2   243 			/* parameter 3:	(input)	symbol node pointer		*/
  2   244 			/* parameter 4:	(input)	loc pointer		*/
  2   245 			/* parameter 5:	(input)	array descriptor bit
  2   246*						cross_section bit	*/
  2   247 			/* return:	(output)	reference node pointer	*/
  2   248 
  2   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   250 			returns(pointer);
  2   251 			/* parameter 1:	(input)	block node pointer	*/
  2   252 			/* parameter 2:	(input)	statement node pointer 	*/
  2   253 			/* parameter 3:	(input)	symbol node pointer	*/
  2   254 			/* parameter 4:	(input)	loc pointer	*/
  2   255 			/* parameter 5:	(input)	array descriptor bit
  2   256*						cross_section bit	*/
  2   257 			/* return:	(output)	reference node pointer	*/
  2   258 
  2   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   260 			returns(pointer);
  2   261 			/* parameter 1:	(input)	block node pointer		*/
  2   262 			/* parameter 2:	(input)	statement node pointer	*/
  2   263 			/* parameter 3:	(input)	symbol node pointer		*/
  2   264 			/* parameter 4:	(input)	loc pointer		*/
  2   265 			/* parameter 5:	(input)	array descriptor bit
  2   266*						cross_section bit	*/
  2   267 			/* return:	(output)	reference node pointer	*/
  2   268 
  2   269 declare	declare_integer	entry(pointer)
  2   270 			returns(pointer);
  2   271 			/* parameter 1:	(input)	block node pointer		*/
  2   272 			/* return:	(output)	reference node pointer 	*/
  2   273 
  2   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  2   275 			/* parameter 1:	(input)	picture string		*/
  2   276 			/* parameter 2:	(input)	symbol node pointer		*/
  2   277 			/* parameter 3:	(output)	error code, if any		*/
  2   278 
  2   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  2   280 			returns(pointer);
  2   281 			/* parameter 1:	(input)	picture string		*/
  2   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  2   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  2   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  2   285 			/* return:	(output)	reference node pointer	*/
  2   286 
  2   287 declare	declare_pointer	entry(pointer)
  2   288 			returns(pointer);
  2   289 			/* parameter 1:	(input)	block node pointer		*/
  2   290 			/* return:	(output)	reference node pointer	*/
  2   291 
  2   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  2   293 			returns(pointer);
  2   294 			/* parameter 1:	(input)	type			*/
  2   295 			/* parameter 2:	(input)	precision			*/
  2   296 			/* parameter 3:	(input)	scale			*/
  2   297 			/* parameter 4:	(input)	length			*/
  2   298 			/* return:	(output)	reference node pointer	*/
  2   299 
  2   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  2   301 			returns(char(120) varying);
  2   302 			/* parameter 1:	(input)	node pointer		*/
  2   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   304 			/* return:	(output)	source line id		*/
  2   305 
  2   306 declare	decode_source_id	entry(
  3     1 			1 structure unaligned,
  3     2 			  2 /* file_number */	bit(8),
  3     3 			  2 /* line_number */	bit(14),
  3     4 			  2 /* stmt_number */	bit(5),
  2   307 
  2   308 			bit(1) aligned)
  2   309 			returns(char(120) varying);
  2   310 			/* parameter 1:	(input)	source id			*/
  2   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   312 			/* return:	(output)	source line id		*/
  2   313 
  2   314 declare	error		entry(fixed bin(15),pointer,pointer);
  2   315 			/* parameter 1:	(input)	error number		*/
  2   316 			/* parameter 2:	(input)	statement node pointer or null*/
  2   317 			/* parameter 3:	(input)	token node pointer 		*/
  2   318 
  2   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  2   320 			/* parameter 1:	(input)	error number		*/
  2   321 			/* parameter 2:	(input)	statement node pointer or null*/
  2   322 			/* parameter 3:	(input)	token node pointer 		*/
  2   323 
  2   324 declare	error_		entry(fixed bin(15),
  4     1 			1 structure unaligned,
  4     2 			  2 /* file_number */	bit(8),
  4     3 			  2 /* line_number */	bit(14),
  4     4 			  2 /* stmt_number */	bit(5),
  2   325 
  2   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  2   327 			/* parameter 1:	(input)	error number		*/
  2   328 			/* parameter 2:	(input)	statement id		*/
  2   329 			/* parameter 3:	(input)	any node pointer		*/
  2   330 			/* parameter 4:	(input)	source segment		*/
  2   331 			/* parameter 5:	(input)	source starting character	*/
  2   332 			/* parameter 6:	(input)	source length		*/
  2   333 
  2   334 declare	error_$no_text	entry(fixed bin(15),
  5     1 			1 structure unaligned,
  5     2 			  2 /* file_number */	bit(8),
  5     3 			  2 /* line_number */	bit(14),
  5     4 			  2 /* stmt_number */	bit(5),
  2   335 
  2   336 			pointer);
  2   337 			/* parameter 1:	(input)	error number		*/
  2   338 			/* parameter 2:	(input)	statement id		*/
  2   339 			/* parameter 3:	(input)	any node pointer		*/
  2   340 
  2   341 declare	error_$initialize_error entry();
  2   342 
  2   343 declare	error_$finish	entry();
  2   344 
  2   345 declare	free_node		entry(pointer);
  2   346 			/* parameter 1:	any node pointer			*/
  2   347 
  2   348 declare	get_array_size	entry(pointer,fixed bin(3));
  2   349 			/* parameter 1:	(input)	symbol node pointer		*/
  2   350 			/* parameter 2:	(input)	units			*/
  2   351 
  2   352 declare	get_size		entry(pointer);
  2   353 			/* parameter 1:	(input)	symbol node pointer		*/
  2   354 
  2   355 declare	merge_attributes	external entry(pointer,pointer)
  2   356 			returns(bit(1) aligned);
  2   357 			/* parameter 1:	(input)	target symbol node pointer */
  2   358 			/* parameter 2:	(input)	source symbol node pointer */
  2   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  2   360 
  2   361 declare	optimizer		entry(pointer);
  2   362 			/* parameter 1:	(input)	root pointer		*/
  2   363 
  2   364 declare	parse_error	entry(fixed bin(15),pointer);
  2   365 			/* parameter 1:	(input)	error number		*/
  2   366 			/* parameter 2:	(input)	any node pointer		*/
  2   367 
  2   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  2   369 			/* parameter 1:	(input)	error number		*/
  2   370 			/* parameter 2:	(input)	any node pointer		*/
  2   371 
  2   372 declare	pl1_error_print$write_out
  2   373 			entry(fixed bin(15),
  6     1 			1 structure unaligned,
  6     2 			  2 /* file_number */	bit(8),
  6     3 			  2 /* line_number */	bit(14),
  6     4 			  2 /* stmt_number */	bit(5),
  2   374 
  2   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  2   376 			/* parameter 1:	(input)	error number		*/
  2   377 			/* parameter 2:	(input)	statement identification	*/
  2   378 			/* parameter 3:	(input)	any node pointer		*/
  2   379 			/* parameter 4:	(input)	source segment		*/
  2   380 			/* parameter 5:	(input)	source character index	*/
  2   381 			/* parameter 6:	(input)	source length		*/
  2   382 			/* parameter 7:	(input)	source line		*/
  2   383 
  2   384 declare	pl1_error_print$listing_segment
  2   385 			entry(fixed bin(15),
  7     1 			1 structure unaligned,
  7     2 			  2 /* file_number */	bit(8),
  7     3 			  2 /* line_number */	bit(14),
  7     4 			  2 /* stmt_number */	bit(5),
  2   386 
  2   387 			pointer);
  2   388 			/* parameter 1:	(input)	error number		*/
  2   389 			/* parameter 2:	(input)	statement identification	*/
  2   390 			/* parameter 3:	(input)	token node pointer		*/
  2   391 
  2   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  2   393 			/* parameter 1:	(input)	string			*/
  2   394 
  2   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  2   396 			/* parameter 1:	(input)	string			*/
  2   397 
  2   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  2   399 			/* parameter 1:	(input)	string			*/
  2   400 			/* parameter 2:	(input)	string length or 0		*/
  2   401 
  2   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  2   403 			/* parameter 1:	(input)	string			*/
  2   404 			/* parameter 2:	(input)	string length or 0		*/
  2   405 
  2   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  2   407 			/* parameter 1:	(input)	string pointer		*/
  2   408 			/* parameter 2:	(input)	string size		*/
  2   409 
  2   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  2   411 			/* parameter 1:	(input)	string pointer		*/
  2   412 			/* parameter 2:	(input)	string length or 0		*/
  2   413 
  2   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  2   415 			/* parameter 1:	(input)	string			*/
  2   416 			/* parameter 2:	(input)	length			*/
  2   417 
  2   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  2   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  2   420 			/* parameter 2:	(input)	line number		*/
  2   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  2   422 			/* parameter 4:	(input)	number of chars to copy	*/
  2   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  2   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  2   425 
  2   426 declare	refer_extent	entry(pointer,pointer);
  2   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  2   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  2   429 
  2   430 declare	reserve$clear	entry()
  2   431 			returns(pointer);
  2   432 			/* return:	(output)	pointer			*/
  2   433 
  2   434 declare	reserve$declare_lib	entry(fixed bin(15))
  2   435 			returns(pointer);
  2   436 			/* parameter 1:	(input)	builtin function number	*/
  2   437 			/* return:	(output)	pointer			*/
  2   438 
  2   439 declare	reserve$read_lib	entry(fixed bin(15))
  2   440 			returns(pointer);
  2   441 			/* parameter 1:	(input)	builtin function number	*/
  2   442 			/* return:	(output)	pointer			*/
  2   443 
  2   444 declare	semantic_translator	entry();
  2   445 
  2   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  2   447 			/* parameter 1:	(input)	error number		*/
  2   448 			/* parameter 2:	(input)	any node pointer		*/
  2   449 
  2   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  2   451 			/* parameter 1:	(input)	error number		*/
  2   452 			/* parameter 2:	(input)	any node pointer		*/
  2   453 
  2   454 declare	share_expression	entry(ptr)
  2   455 			returns(ptr);
  2   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  2   457 			/* return:	(output)	tree pointer or null	*/
  2   458 
  2   459 declare	token_to_binary	entry(ptr) reducible
  2   460 			returns(fixed bin(31));
  2   461 			/* parameter 1:	(input)	token node pointer		*/
  2   462 			/* return:	(output)	converted binary value	*/
  2   463 
  2   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
  1   228 
  1   229 /* END INCLUDE FILE ... semant.incl.pl1 */
       25 
       26 
  8     1 /* BEGIN INCLUDE FILE ... semantic_bits.incl.pl1 */
  8     2 
  8     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
  8     4 
  8     5 dcl	context aligned bit(36),
  8     6 	this_context aligned bit(36);
  8     7 
  8     8 dcl	1 def_context		aligned based(addr(context)),
  8     9 	2 aggregate		unaligned bit(1),
  8    10 	2 arg_list		unaligned bit(1),
  8    11 	2 left_side		unaligned bit(1),
  8    12 	2 return			unaligned bit(1),
  8    13 	2 evaluate_offset		unaligned bit(1),
  8    14 	2 top			unaligned bit(1),
  8    15 	2 RHS_aggregate		unaligned bit(1),
  8    16 	2 return_from_empty		unaligned bit(1),
  8    17 	2 ignore_based		unaligned bit(1),
  8    18 	2 ext_param		unaligned bit(1),
  8    19 	2 cross_section		unaligned bit(1),
  8    20 	2 string_unspec		unaligned bit(1),
  8    21 	2 f_offset_to_be_added	unaligned bit(1),
  8    22 	2 suppress_cross_ref	unaligned bit(1),
  8    23 	2 by_name_assignment	unaligned bit(1),
  8    24 	2 by_name_lookup		unaligned bit(1),
  8    25 	2 pad			unaligned bit(20);
  8    26 
  8    27 dcl	1 def_this_context		aligned like def_context based(addr(this_context));
  8    28 
  8    29 /* END INCLUDE FILE ... semantic_bits.incl.pl1 */
       27 
       28 
  9     1 /* BEGIN INCLUDE FILE ... list.incl.pl1 */
  9     2 
  9     3 /* Modified 26 June 81 by EBush to add max_list_elements */
  9     4 
  9     5 
  9     6 dcl	1 list		based aligned,
  9     7 	2 node_type	bit(9) unaligned,
  9     8 	2 reserved	bit(12) unaligned,
  9     9 	2 number		fixed(14) unaligned,
  9    10 	2 element		dimension(n refer(list.number)) ptr unaligned;
  9    11 
  9    12 dcl       max_list_elements   fixed bin(17) internal static options (constant)
  9    13 	                    init(16383);
  9    14 
  9    15 /* END INCLUDE FILE ... list.incl.pl1 */
       29 
       30 
 10     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
 10     2 
 10     3 dcl	1 symbol			based aligned,
 10     4 	2 node_type		bit(9) unal,
 10     5 	2 source_id		structure unal,
 10     6 	  3 file_number		bit(8),
 10     7 	  3 line_number		bit(14),
 10     8 	  3 statement_number	bit(5),
 10     9 	2 location		fixed(18) unal unsigned,
 10    10 	2 allocated		bit(1) unal,
 10    11 	2 dcl_type		bit(3) unal,
 10    12 	2 reserved		bit(6) unal,
 10    13 	2 pix			unal,
 10    14 	  3 pic_fixed		bit(1) unal,
 10    15 	  3 pic_float		bit(1) unal,
 10    16 	  3 pic_char		bit(1) unal,
 10    17 	  3 pic_scale		fixed(7) unal,
 10    18 	  3 pic_size		fixed(7) unal,
 10    19 	2 level			fixed(8) unal,
 10    20 	2 boundary		fixed(3) unal,
 10    21 	2 size_units		fixed(3) unal,
 10    22 	2 scale			fixed(7) unal,
 10    23 	2 runtime			bit(18) unal,
 10    24 	2 runtime_offset		bit(18) unal,
 10    25 	2 block_node		ptr unal,
 10    26 	2 token			ptr unal,
 10    27 	2 next			ptr unal,
 10    28 	2 multi_use		ptr unal,
 10    29 	2 cross_references		ptr unal,
 10    30 	2 initial			ptr unal,
 10    31 	2 array			ptr unal,
 10    32 	2 descriptor		ptr unal,
 10    33 	2 equivalence		ptr unal,
 10    34 	2 reference		ptr unal,
 10    35 	2 general			ptr unal,
 10    36 	2 father			ptr unal,
 10    37 	2 brother			ptr unal,
 10    38 	2 son			ptr unal,
 10    39 	2 word_size		ptr unal,
 10    40 	2 bit_size		ptr unal,
 10    41 	2 dcl_size		ptr unal,
 10    42 	2 symtab_size		ptr unal,
 10    43 	2 c_word_size		fixed(24),
 10    44 	2 c_bit_size		fixed(24),
 10    45 	2 c_dcl_size		fixed(24),
 10    46 
 10    47 	2 attributes		structure aligned,
 10    48 	  3 data_type		structure unal,
 10    49 	    4 structure		bit(1) ,
 10    50 	    4 fixed		bit(1),
 10    51 	    4 float		bit(1),
 10    52 	    4 bit			bit(1),
 10    53 	    4 char		bit(1),
 10    54 	    4 ptr			bit(1),
 10    55 	    4 offset		bit(1),
 10    56 	    4 area		bit(1),
 10    57 	    4 label		bit(1),
 10    58 	    4 entry		bit(1),
 10    59 	    4 file		bit(1),
 10    60 	    4 arg_descriptor	bit(1),
 10    61 	    4 storage_block		bit(1),
 10    62 	    4 explicit_packed	bit(1), /* options(packed) */
 10    63 	    4 condition		bit(1),
 10    64 	    4 format		bit(1),
 10    65 	    4 builtin		bit(1),
 10    66 	    4 generic		bit(1),
 10    67 	    4 picture		bit(1),
 10    68 
 10    69 	  3 misc_attributes		structure unal,
 10    70 	    4 dimensioned		bit(1),
 10    71 	    4 initialed		bit(1),
 10    72 	    4 aligned		bit(1),
 10    73 	    4 unaligned		bit(1),
 10    74 	    4 signed		bit(1),
 10    75 	    4 unsigned		bit(1),
 10    76 	    4 precision		bit(1),
 10    77 	    4 varying		bit(1),
 10    78 	    4 local		bit(1),
 10    79 	    4 decimal		bit(1),
 10    80 	    4 binary		bit(1),
 10    81 	    4 real		bit(1),
 10    82 	    4 complex		bit(1),
 10    83 	    4 variable		bit(1),
 10    84 	    4 reducible		bit(1),
 10    85 	    4 irreducible		bit(1),
 10    86 	    4 returns		bit(1),
 10    87 	    4 position		bit(1),
 10    88 	    4 internal		bit(1),
 10    89 	    4 external		bit(1),
 10    90 	    4 like		bit(1),
 10    91 	    4 member		bit(1),
 10    92 	    4 non_varying		bit(1),
 10    93 	    4 options		bit(1),
 10    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
 10    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
 10    96 
 10    97 	  3 storage_class		structure unal,
 10    98 	    4 auto		bit(1),
 10    99 	    4 based		bit(1),
 10   100 	    4 static		bit(1),
 10   101 	    4 controlled		bit(1),
 10   102 	    4 defined		bit(1),
 10   103 	    4 parameter		bit(1),
 10   104 	    4 param_desc		bit(1),
 10   105 	    4 constant		bit(1),
 10   106 	    4 temporary		bit(1),
 10   107 	    4 return_value		bit(1),
 10   108 
 10   109 	  3 file_attributes		structure unal,
 10   110 	    4 print		bit(1),
 10   111 	    4 input		bit(1),
 10   112 	    4 output		bit(1),
 10   113 	    4 update		bit(1),
 10   114 	    4 stream		bit(1),
 10   115 	    4 reserved_1		bit(1),
 10   116 	    4 record		bit(1),
 10   117 	    4 sequential		bit(1),
 10   118 	    4 direct		bit(1),
 10   119 	    4 interactive		bit(1),		/* env(interactive) */
 10   120 	    4 reserved_2		bit(1),
 10   121 	    4 reserved_3		bit(1),
 10   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
 10   123 	    4 keyed		bit(1),
 10   124 	    4 reserved_4		bit(1),
 10   125 	    4 environment		bit(1),
 10   126 
 10   127 	  3 compiler_developed	structure unal,
 10   128 	    4 aliasable		bit(1),
 10   129 	    4 packed		bit(1),
 10   130 	    4 passed_as_arg		bit(1),
 10   131 	    4 allocate		bit(1),
 10   132 	    4 set			bit(1),
 10   133 	    4 exp_extents		bit(1),
 10   134 	    4 refer_extents		bit(1),
 10   135 	    4 star_extents		bit(1),
 10   136 	    4 isub		bit(1),
 10   137 	    4 put_in_symtab		bit(1),
 10   138 	    4 contiguous		bit(1),
 10   139 	    4 put_data		bit(1),
 10   140 	    4 overlayed		bit(1),
 10   141 	    4 error		bit(1),
 10   142 	    4 symtab_processed	bit(1),
 10   143 	    4 overlayed_by_builtin	bit(1),
 10   144 	    4 defaulted		bit(1),
 10   145 	    4 connected		bit(1);
 10   146 
 10   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
       31 
       32 
 11     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
 11     2 
 11     3 dcl	1 reference		based aligned,
 11     4 	2 node_type		bit(9) unaligned,
 11     5 	2 array_ref		bit(1) unaligned,
 11     6 	2 varying_ref		bit(1) unaligned,
 11     7 	2 shared			bit(1) unaligned,
 11     8 	2 put_data_sw		bit(1) unaligned,
 11     9 	2 processed		bit(1) unaligned,
 11    10 	2 units			fixed(3) unaligned,
 11    11 	2 ref_count		fixed(17) unaligned,
 11    12 	2 c_offset		fixed(24),
 11    13 	2 c_length		fixed(24),
 11    14 	2 symbol			ptr unaligned,
 11    15 	2 qualifier		ptr unaligned,
 11    16 	2 offset			ptr unaligned,
 11    17 	2 length			ptr unaligned,
 11    18 	2 subscript_list		ptr unaligned,
 11    19 						/* these fields are used by the 645 code generator */
 11    20 	2 address			structure unaligned,
 11    21 	  3 base			bit(3),
 11    22 	  3 offset		bit(15),
 11    23 	  3 op			bit(9),
 11    24 	  3 no_address		bit(1),
 11    25 	  3 inhibit		bit(1),
 11    26 	  3 ext_base		bit(1),
 11    27 	  3 tag			bit(6),
 11    28 	2 info			structure unaligned,
 11    29 	  3 address_in		structure,
 11    30 	    4 b			dimension(0:7) bit(1),
 11    31 	    4 storage		bit(1),
 11    32 	  3 value_in		structure,
 11    33 	    4 a			bit(1),
 11    34 	    4 q			bit(1),
 11    35 	    4 aq			bit(1),
 11    36 	    4 string_aq		bit(1),
 11    37 	    4 complex_aq		bit(1),
 11    38 	    4 decimal_aq		bit(1),
 11    39 	    4 b			dimension(0:7) bit(1),
 11    40 	    4 storage		bit(1),
 11    41 	    4 indicators		bit(1),
 11    42 	    4 x			dimension(0:7) bit(1),
 11    43 	  3 other			structure,
 11    44 	    4 big_offset		bit(1),
 11    45 	    4 big_length		bit(1),
 11    46 	    4 modword_in_offset	bit(1),
 11    47 	2 data_type		fixed(5) unaligned,
 11    48 	2 bits			structure unaligned,
 11    49 	  3 padded_ref		bit(1),
 11    50 	  3 aligned_ref		bit(1),
 11    51 	  3 long_ref		bit(1),
 11    52 	  3 forward_ref		bit(1),
 11    53 	  3 ic_ref		bit(1),
 11    54 	  3 temp_ref		bit(1),
 11    55 	  3 defined_ref		bit(1),
 11    56 	  3 evaluated		bit(1),
 11    57 	  3 allocate		bit(1),
 11    58 	  3 allocated		bit(1),
 11    59 	  3 aliasable		bit(1),
 11    60 	  3 even			bit(1),
 11    61 	  3 perm_address		bit(1),
 11    62 	  3 aggregate		bit(1),
 11    63 	  3 hit_zero		bit(1),
 11    64 	  3 dont_save		bit(1),
 11    65 	  3 fo_in_qual		bit(1),
 11    66 	  3 hard_to_load		bit(1),
 11    67 	2 relocation		bit(12) unaligned,
 11    68 	2 more_bits		structure unaligned,
 11    69 	  3 substr		bit(1),
 11    70 	  3 padded_for_store_ref	bit(1),
 11    71 	  3 aligned_for_store_ref	bit(1),
 11    72 	  3 mbz			bit(15),
 11    73 	2 store_ins		bit(18) unaligned;
 11    74 
 11    75 /* END INCLUDE FILE ... reference.incl.pl1 */
       33 
       34 
 12     1 /* BEGIN INCLUDE FILE ... token.incl.pl1 */
 12     2 
 12     3 dcl	1 token			based aligned,
 12     4 	2 node_type		bit(9) unaligned,
 12     5 	2 type			bit(9) unaligned,
 12     6 	2 loc			bit(18) unaligned,	/* symtab offset for identifiers, "p" flag for constants */
 12     7 	2 declaration		ptr unaligned,
 12     8 	2 next			ptr unaligned,
 12     9 	2 size			fixed(9),
 12    10 	2 string			char(n refer(token.size));
 12    11 
 12    12 /* END INCLUDE FILE ... token.incl.pl1 */
       35 
       36 
 13     1 /* BEGIN INCLUDE FILE ... token_types.incl.pl1 */
 13     2 
 13     3 dcl (	no_token		initial("000000000"b),	/*	token types		*/
 13     4 	identifier	initial("100000000"b),
 13     5 	isub		initial("010000000"b),
 13     6 	plus		initial("001000001"b),
 13     7 	minus		initial("001000010"b),
 13     8 	asterisk		initial("001000011"b),
 13     9 	slash		initial("001000100"b),
 13    10 	expon		initial("001000101"b),
 13    11 	not		initial("001000110"b),
 13    12 	and		initial("001000111"b),
 13    13 	or		initial("001001000"b),
 13    14 	cat		initial("001001001"b),
 13    15 	eq		initial("001001010"b),
 13    16 	ne		initial("001001011"b),
 13    17 	lt		initial("001001100"b),
 13    18 	gt		initial("001001101"b),
 13    19 	le		initial("001001110"b),
 13    20 	ge		initial("001001111"b),
 13    21 	ngt		initial("001010000"b),
 13    22 	nlt		initial("001010001"b),
 13    23 	assignment	initial("001010010"b),
 13    24 	colon		initial("001010011"b),
 13    25 	semi_colon	initial("001010100"b),
 13    26 	comma		initial("001010101"b),
 13    27 	period		initial("001010110"b),
 13    28 	arrow		initial("001010111"b),
 13    29 	left_parn		initial("001011000"b),
 13    30 	right_parn	initial("001011001"b),
 13    31 	percent		initial("001011100"b),
 13    32 	bit_string	initial("000100001"b),
 13    33 	char_string	initial("000100010"b),
 13    34 	bin_integer	initial("000110001"b),
 13    35 	dec_integer	initial("000110011"b),
 13    36 	fixed_bin		initial("000110000"b),
 13    37 	fixed_dec		initial("000110010"b),
 13    38 	float_bin		initial("000110100"b),
 13    39 	float_dec		initial("000110110"b),
 13    40 	i_bin_integer	initial("000111001"b),
 13    41 	i_dec_integer	initial("000111011"b),
 13    42 	i_fixed_bin	initial("000111000"b),
 13    43 	i_fixed_dec	initial("000111010"b),
 13    44 	i_float_bin	initial("000111100"b),
 13    45 	i_float_dec	initial("000111110"b)) bit (9) aligned internal static options (constant);
 13    46 
 13    47 dcl (	is_identifier		initial ("100000000"b),	/*	token type masks		*/
 13    48 	is_isub			initial ("010000000"b),
 13    49 	is_delimiter		initial ("001000000"b),
 13    50 	is_constant		initial ("000100000"b),
 13    51 	is_arith_constant		initial ("000010000"b),	/* N.B. not really a mask...s/b "000110000"b */
 13    52 	is_arithmetic_constant	initial ("000110000"b),
 13    53 	is_imaginary_constant	initial ("000111000"b),
 13    54 	is_float_constant		initial ("000110100"b),
 13    55 	is_decimal_constant		initial ("000110010"b),
 13    56 	is_integral_constant 	initial ("000110001"b)
 13    57 	) bit(9) internal static aligned options(constant);
 13    58 
 13    59 /* END INCLUDE FILE ... token_types.incl.pl1 */
       37 
       38 
 14     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
 14     2 
 14     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
 14     4 
 14     5 dcl (	block_node		initial("000000001"b),
 14     6 	statement_node		initial("000000010"b),
 14     7 	operator_node		initial("000000011"b),
 14     8 	reference_node		initial("000000100"b),
 14     9 	token_node		initial("000000101"b),
 14    10 	symbol_node		initial("000000110"b),
 14    11 	context_node		initial("000000111"b),
 14    12 	array_node		initial("000001000"b),
 14    13 	bound_node		initial("000001001"b),
 14    14 	format_value_node		initial("000001010"b),
 14    15 	list_node			initial("000001011"b),
 14    16 	default_node		initial("000001100"b),
 14    17 	machine_state_node		initial("000001101"b),
 14    18 	source_node		initial("000001110"b),
 14    19 	label_node		initial("000001111"b),
 14    20 	cross_reference_node	initial("000010000"b),
 14    21 	sf_par_node		initial("000010001"b),
 14    22 	temporary_node		initial("000010010"b),
 14    23 	label_array_element_node	initial("000010011"b),
 14    24 	by_name_agg_node		initial("000010100"b))
 14    25 				bit(9) internal static aligned options(constant);
 14    26 
 14    27 dcl	1 node			based aligned,
 14    28 	2 type			unal bit(9),
 14    29 	2 source_id		unal structure,
 14    30 	  3 file_number		bit(8),
 14    31 	  3 line_number		bit(14),
 14    32 	  3 statement_number	bit(5);
 14    33 
 14    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
       39 
       40 
 15     1 /* ***********************************************************
 15     2*   *                                                         *
 15     3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
 15     4*   *                                                         *
 15     5*   *********************************************************** */
 15     6 /* BEGIN INCLUDE FILE ... statement.incl.pl1 */
 15     7 /* Internal interface of the PL/I compiler */
 15     8 
 15     9 dcl	1 statement		based aligned,
 15    10 	2 node_type		bit(9) unaligned,
 15    11 	2 source_id		structure unaligned,
 15    12 	  3 file_number		bit(8),
 15    13 	  3 line_number		bit(14),
 15    14 	  3 statement_number	bit(5),
 15    15 	2 next			ptr unaligned,
 15    16 	2 back			ptr unaligned,
 15    17 	2 root			ptr unaligned,
 15    18 	2 labels			ptr unaligned,
 15    19 	2 reference_list		ptr unaligned,
 15    20 	2 state_list		ptr unaligned,
 15    21 	2 reference_count		fixed(17) unaligned,
 15    22 	2 ref_count_copy		fixed(17) unaligned,
 15    23 	2 object			structure unaligned,
 15    24 	  3 start			fixed(17),
 15    25 	  3 finish		fixed(17),
 15    26 	2 source			structure unaligned,
 15    27 	  3 segment		fixed(11),
 15    28 	  3 start			fixed(23),
 15    29 	  3 length		fixed(11),
 15    30 	2 prefix			bit(12) unaligned,
 15    31 	2 optimized		bit(1) unaligned,
 15    32 	2 free_temps		bit(1) unaligned,
 15    33 	2 LHS_in_RHS		bit(1) unaligned,
 15    34 	2 statement_type		bit(9) unaligned,
 15    35 	2 bits			structure unaligned,
 15    36 	  3 processed		bit(1) unaligned,
 15    37 	  3 put_in_profile		bit(1) unaligned,
 15    38 	  3 generated		bit(1) unaligned,
 15    39 	  3 snap			bit(1) unaligned,
 15    40 	  3 system		bit(1) unaligned,
 15    41 	  3 irreducible		bit(1) unaligned,
 15    42 	  3 checked		bit(1) unaligned,
 15    43 	  3 save_temps		bit(1) unaligned,
 15    44 	  3 suppress_warnings	bit(1) unaligned,
 15    45 	  3 force_nonquick		bit(1) unaligned,
 15    46 	  3 expanded_by_name	bit(1) unaligned,
 15    47 	  3 begins_loop		bit(1) unaligned,
 15    48 	  3 pad			bit(24) unaligned;
 15    49 
 15    50 /* END INCLUDE FILE ... statement.incl.pl1 */
       41 
       42 
 16     1 	/* statement types */
 16     2 
 16     3 dcl (	unknown_statement		initial("000000000"b),
 16     4 	allocate_statement		initial("000000001"b),
 16     5 	assignment_statement	initial("000000010"b),
 16     6 	begin_statement		initial("000000011"b),
 16     7 	call_statement		initial("000000100"b),
 16     8 	close_statement		initial("000000101"b),
 16     9 	declare_statement		initial("000000110"b),
 16    10 	lock_statement		initial("000000111"b),
 16    11 	delete_statement		initial("000001000"b),
 16    12 	display_statement		initial("000001001"b),
 16    13 	do_statement		initial("000001010"b),
 16    14 	else_clause		initial("000001011"b),
 16    15 	end_statement		initial("000001100"b),
 16    16 	entry_statement		initial("000001101"b),
 16    17 	exit_statement		initial("000001110"b),
 16    18 	format_statement		initial("000001111"b),
 16    19 	free_statement		initial("000010000"b),
 16    20 	get_statement		initial("000010001"b),
 16    21 	goto_statement		initial("000010010"b),
 16    22 	if_statement		initial("000010011"b),
 16    23 	locate_statement		initial("000010100"b),
 16    24 	null_statement		initial("000010101"b),
 16    25 	on_statement		initial("000010110"b),
 16    26 	open_statement		initial("000010111"b),
 16    27 	procedure_statement 	initial("000011000"b),
 16    28 	put_statement		initial("000011001"b),
 16    29 	read_statement		initial("000011010"b),
 16    30 	return_statement		initial("000011011"b),
 16    31 	revert_statement		initial("000011100"b),
 16    32 	rewrite_statement		initial("000011101"b),
 16    33 	signal_statement		initial("000011110"b),
 16    34 	stop_statement		initial("000011111"b),
 16    35 	system_on_unit		initial("000100000"b),
 16    36 	unlock_statement		initial("000100001"b),
 16    37 	wait_statement		initial("000100010"b),
 16    38 	write_statement		initial("000100011"b),
 16    39 	default_statement		initial("000100100"b),
 16    40 	continue_statement		initial("000100101"b)) bit(9) internal static aligned options(constant);
       43 
       44 
 17     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
 17     2 
 17     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
 17     4 
 17     5 /* format: style3 */
 17     6 dcl	1 operator	based aligned,
 17     7 	  2 node_type	bit (9) unaligned,
 17     8 	  2 op_code	bit (9) unaligned,
 17     9 	  2 shared	bit (1) unaligned,
 17    10 	  2 processed	bit (1) unaligned,
 17    11 	  2 optimized	bit (1) unaligned,
 17    12 	  2 number	fixed (14) unaligned,
 17    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
 17    14 
 17    15 dcl	max_number_of_operands
 17    16 			fixed bin (15) int static options (constant) initial (32767);
 17    17 
 17    18 /* END INCLUDE FILE ... operator.incl.pl1 */
       45 
       46 
 18     1 /* BEGIN INCLUDE FILE ... op_codes.incl.pl1 */
 18     2 
 18     3 /* Modified: 25 Apr 1979 by PCK 4-bit decimal */
 18     4 /* Modified: 6 Jun 1979 by PG to add rank and byte */
 18     5 /* Modified: 26 Dec 1979 by PCK to add assign_by_name */
 18     6 /* Modified: 26 July 82 BIM wordno, segno */
 18     7 
 18     8 dcl (	add		initial("000010001"b),	/* opnd(1) <- opnd(2)+opnd(3)		*/
 18     9 	sub		initial("000010010"b),	/* opnd(1) <- opnd(2)-opnd(3)		*/
 18    10 	mult		initial("000010011"b),	/* opnd(1) <- opnd(2)*opnd(3)		*/
 18    11 	div		initial("000010100"b),	/* opnd(1) <- opnd(2)/opnd(3)		*/
 18    12 	negate		initial("000010101"b),	/* opnd(1) <- -opnd(2)  		*/
 18    13 	exp		initial("000010110"b),	/* opnd(1) <- opnd(2) ** opnd(3)	*/
 18    14 
 18    15 	and_bits		initial("000100001"b),	/* opnd(1) <- opnd(2) & opnd(3)	*/
 18    16 	or_bits		initial("000100010"b),	/* opnd(1) <- opnd(2)|opnd(3)		*/
 18    17 	xor_bits		initial("000100011"b),	/* opnd(1) <- opnd(2) xor opnd(3)	*/
 18    18 	not_bits		initial("000100100"b),	/* opnd(1) <- ^opnd(2)		*/
 18    19 	cat_string	initial("000100101"b),	/* opnd(1) <- opnd(2)||opnd(3)	*/
 18    20 	bool_fun		initial("000100110"b),	/* opnd(1) <- bool(opnd(2),opnd(3),opnd(4)) */
 18    21 
 18    22 	assign		initial("000110001"b),	/* opnd(1) <- opnd(2)		*/
 18    23 	assign_size_ck	initial("000110010"b),	/* opnd(1) <- opnd(2)		*/
 18    24 	assign_zero	initial("000110011"b),	/* opnd(1) <- 0			*/
 18    25 	copy_words	initial("000110100"b),	/* move opnd(2) to opnd(1) by opnd(3) words */
 18    26 	copy_string	initial("000110101"b),	/* move opnd(2) to opnd(1) by opnd(3) units */
 18    27 	make_desc		initial("000110110"b),	/* opnd(1) <- descriptor(opnd(2),opnd(3)) */
 18    28 	assign_round	initial("000110111"b),	/* opnd(1) <- opnd(2) rounded		*/
 18    29 	pack		initial("000111000"b),	/* opnd(1) <- encode to picture opnd(2) */
 18    30 	unpack		initial("000111001"b),	/* opnd(1) <- decode from picture opnd(2) */
 18    31 
 18    32 	less_than		initial("001000100"b),	/* opnd(1) <- opnd(2) < opnd(3)	*/
 18    33 	greater_than	initial("001000101"b),	/* opnd(1) <- opnd(2) > opnd(3)	*/
 18    34 	equal		initial("001000110"b),	/* opnd(1) <- opnd(2) = opnd(3)	*/
 18    35 	not_equal		initial("001000111"b),	/* opnd(1) <- opnd(2) ^= opnd(3)	*/
 18    36 	less_or_equal	initial("001001000"b),	/* opnd(1) <- opnd(2) <= opnd(3)	*/
 18    37 	greater_or_equal	initial("001001001"b),	/* opnd(1) <- opnd(2) >= opnd(3)	*/
 18    38 
 18    39 	jump		initial("001010001"b),	/* go to opnd(1) unconditionally	*/
 18    40 	jump_true		initial("001010010"b),	/* go to opnd(1) if opnd(2) is not 0	*/
 18    41 	jump_false	initial("001010011"b),	/* go to opnd(1) if opnd(2) is all 0	*/
 18    42 	jump_if_lt	initial("001010100"b),	/* go to opnd(1) if opnd(2) < opnd(3)	*/
 18    43 	jump_if_gt	initial("001010101"b),	/* go to opnd(1) if opnd(2) > opnd(3)	*/
 18    44 	jump_if_eq	initial("001010110"b),	/* go to opnd(1) if opnd(2) = opnd(3)	*/
 18    45 	jump_if_ne	initial("001010111"b),	/* go to opnd(1) if opnd(2) ^= opnd(3)	*/
 18    46 	jump_if_le	initial("001011000"b),	/* go to opnd(1) if opnd(2) <= opnd(3)	*/
 18    47 	jump_if_ge	initial("001011001"b),	/* go to opnd(1) if opnd(2) >= opnd(3)	*/
 18    48 
 18    49 	std_arg_list	initial("001100001"b),	/* opnd(1) <- arglist(opnd(2) desclist(opnd(3)))	*/
 18    50 	return_words	initial("001100010"b),	/* return aggregate opnd(1), opnd(2) is length in words */
 18    51 	std_call		initial("001100011"b),	/* opnd(1) <- call opnd(2) with opnd(3)		*/
 18    52 	return_bits	initial("001100100"b),	/* return aggregate opnd(1), opnd(2) is length in bits */
 18    53 	std_entry		initial("001100101"b),	/* entry(opnd(1)... opnd(n))			*/
 18    54 	return_string	initial("001100110"b),	/* return string opnd(1) */
 18    55 	ex_prologue	initial("001100111"b),	/* execute the prologue -no operands-		*/
 18    56 	allot_auto	initial("001101000"b),	/* opnd(1) <- addrel(stack,opnd(2))		*/
 18    57 	param_ptr		initial("001101001"b),	/* opnd(1) <- ptr to opnd(2) in  block opnd(3)	*/
 18    58 	param_desc_ptr	initial("001101010"b),	/* opnd(1) <- ptr to opnd(2) in block opnd(3)	*/
 18    59 	std_return	initial("001101011"b),	/* return -no arguments-			*/
 18    60 	allot_ctl		initial("001101100"b),	/* allocate opnd(1) , length in words is opnd(2) 	*/
 18    61 	free_ctl		initial("001101101"b),	/* free opnd(1)				*/
 18    62 	stop		initial("001101110"b),	/* stop - terminate run unit			*/
 18    63 
 18    64 	mod_bit		initial("001110000"b),	/* opnd(1) <- mod(opnd(3),36),
 18    65*						   opnd(2) <- opnd(3) / 36		*/
 18    66 	mod_byte		initial("001110001"b),	/* opnd(1) <- mod(opnd(3),4),
 18    67*						   opnd(2) <- opnd(3) / 4		*/
 18    68 	mod_half		initial("001110010"b),	/* opnd(1) <- mod(opnd(3),2),
 18    69*						   opnd(2) <- opnd(3) / 2		*/
 18    70 	mod_word		initial("001110011"b),	/* TO BE DEFINED BY BLW			*/
 18    71 
 18    72 	bit_to_char	initial("010000000"b),	/* opnd(1) <- (opnd(2)+8)/9		*/
 18    73 	bit_to_word	initial("010000001"b),	/* opnd(1) <- (opnd(2)+35)/36		*/
 18    74 	char_to_word	initial("010000010"b),	/* opnd(1) <- (opnd(2)+3)/4		*/
 18    75 	half_to_word	initial("010000011"b),	/* opnd(1) <- (opnd(2)+1)/2		*/
 18    76 	word_to_mod2	initial("010000100"b),	/* opnd(1) <- (opnd(2)+1)/2*2		*/
 18    77 	word_to_mod4	initial("010000101"b),	/* opnd(1) <- (opnd(2)+3)/4*4		*/
 18    78 	word_to_mod8	initial("010000110"b),	/* opnd(1) <- (opnd(2)+7)/8*8		*/
 18    79 	rel_fun		initial("010000111"b),	/* opnd(1) <- rel(opnd(2))		*/
 18    80 	baseno_fun	initial("010001000"b),	/* opnd(1) <- baseno(opnd(2))		*/
 18    81 	desc_size		initial("010001001"b),	/* opnd(1) <- substr(opnd(2),13,24)	*/
 18    82 	bit_pointer	initial("010001010"b),	/* opnd(1) <- bit offset of opnd(2)	*/
 18    83 	index_before_fun	initial("010001011"b),	/* opnd(1) <- length of before(opnd(2),opnd(3)) */
 18    84 	index_after_fun	initial("010001100"b),	/* opnd(1) <- offset of after(opnd(2),opnd(3)) in opnd(2) */
 18    85 	verify_ltrim_fun	initial("010001101"b),	/* opnd(1) <- offset of ltrim(opnd(2),opnd(3)) in opnd(2) */
 18    86 	verify_rtrim_fun	initial("010001110"b),	/* opnd(1) <- length(opnd(2))-length(rtrim(opnd(2),opnd(3))) */
 18    87 	digit_to_bit	initial("010001111"b),	/* opnd(1) <- 9*opnd(2)/2		*/
 18    88 
 18    89 	ceil_fun		initial("010010000"b),	/* opnd(1) <- ceil(opnd(2))		*/
 18    90 	floor_fun		initial("010010001"b),	/* opnd(1) <- floor(opnd(2))		*/
 18    91 	round_fun		initial("010010010"b),	/* opnd(1) <- round(opnd(2))		*/
 18    92 	sign_fun		initial("010010011"b),	/* opnd(1) <- sign(opnd(2))		*/
 18    93 	abs_fun		initial("010010100"b),	/* opnd(1) <- abs(opnd(2))		*/
 18    94 	trunc_fun		initial("010010101"b),	/* opnd(1) <- trunc(opnd(2))		*/
 18    95 	byte_fun		initial("010010110"b),	/* opnd(1) <- byte(opnd(2))		*/
 18    96 	rank_fun		initial("010010111"b),	/* opnd(1) <- rank(opnd(2))		*/
 18    97 	index_rev_fun	initial("010011000"b),	/* opnd(1) <- index(reverse(opnd(2)),reverse(opnd(3))) */
 18    98 	search_rev_fun	initial("010011001"b),	/* opnd(1) <- search(reverse(opnd(2)),opnd(3)) */
 18    99 	verify_rev_fun	initial("010011010"b),	/* opnd(1) <- verify(reverse(opnd(2)),opnd(3)) */
 18   100 	wordno_fun	initial("010011011"b),        /* opnd(1) <- wordno (opnd(2)) */
 18   101 	segno_fun		initial("010011100"b),        /* opnd(1) <- segno (opnd(2)) */
 18   102 	bitno_fun           initial("010011101"b),        /* opnd(1) <- bitno (opnd(2)) */
 18   103 	charno_fun	initial("010011110"b),        /* opnd(1) <- charno (opnd(2)) */
 18   104 
 18   105 	index_fun		initial("010100000"b),	/* opnd(1) <- index(opnd(2),opnd(3))	*/
 18   106 	off_fun		initial("010100001"b),	/* opnd(1) <- offset(opnd(2),opnd(3))	*/
 18   107 	complex_fun	initial("010100010"b),	/* opnd(1) <- complex(opnd(2),opnd(3))	*/
 18   108 	conjg_fun		initial("010100011"b),	/* opnd(1) <- conjg(opnd(2),opnd(3))	*/
 18   109 	mod_fun		initial("010100100"b),	/* opnd(1) <- mod(opnd(2),opnd(3))	*/
 18   110 	repeat_fun	initial("010100101"b),	/* opnd(1) <- repeat(opnd(2),opnd(3))	*/
 18   111 	verify_fun	initial("010100110"b),	/* opnd(1) <- verify(opnd(2),opnd(3))	*/
 18   112 	translate_fun	initial("010100111"b),	/* opnd(1) <- translate(opnd(2),opnd(3))*/
 18   113 	real_fun   	initial("010101001"b),	/* opnd(1) <- real(opnd(2))		*/
 18   114 	imag_fun   	initial("010101010"b),	/* opnd(1) <- imag(opnd(2))		*/
 18   115 	length_fun	initial("010101011"b),	/* opnd(1) <- length(opnd(2))	*/
 18   116 	pl1_mod_fun	initial("010101100"b),	/* opnd(1) <- mod(opnd(2)) */
 18   117 	search_fun	initial("010101101"b),	/* opnd(1) <- search(opnd(2),opnd(3)) */
 18   118 	allocation_fun	initial("010101110"b),	/* opnd(1) <- allocation(opnd(2)) */
 18   119 	reverse_fun	initial("010101111"b),	/* opnd(1) <- reverse(opnd(2)) */
 18   120 
 18   121 	addr_fun		initial("010110000"b),	/* opnd(1) <- addr(opnd(2))		*/
 18   122 	addr_fun_bits	initial("010110001"b),	/* opnd(1) <- addr(opnd(2))		*/
 18   123 	ptr_fun		initial("010110010"b),	/* opnd(1) <- ptr(opnd(2),opnd(3))	*/
 18   124 	baseptr_fun	initial("010110011"b),	/* opnd(1) <- baseptr(opnd(2))	*/
 18   125 	addrel_fun	initial("010110100"b),	/* opnd(1) <- addrel(opnd(2),opnd(3))	*/
 18   126 	codeptr_fun	initial("010110101"b),	/* opnd(1) <- codeptr(opnd(2))	*/
 18   127 	environmentptr_fun	initial("010110110"b),	/* opnd(1) <- environmentptr(opnd(2))	*/
 18   128 	stackbaseptr_fun	initial("010110111"b),	/* opnd(1) is ptr to base of current stack	*/
 18   129 	stackframeptr_fun	initial("010111000"b),	/* opnd(1) is ptr to current block's stack frame	*/
 18   130 	setcharno_fun	initial("010111001"b),	/* opnd(1) <- opnd(2) with charno opnd(3) */
 18   131 	addcharno_fun	initial("010111010"b),	/* opnd(1) <- opnd(2) with charno = charno + opnd(3) */
 18   132 	setbitno_fun	initial("010111011"b),	/* setcharno for bitsno */
 18   133 	addbitno_fun	initial("010111100"b),	/* addcharno for bitno */
 18   134 
 18   135 	min_fun		initial("011000000"b),	/* opnd(1) <- min(opnd(1),opnd(2),...)	*/
 18   136 	max_fun		initial("011000001"b),	/* opnd(1) <- max(opnd(1),opnd(2),...)	*/
 18   137 
 18   138 	stack_ptr		initial("011010001"b),	/* opnd(1) <- stack frame ptr		*/
 18   139 	empty_area	initial("011010010"b),	/* empty opnd(1), length in words is opnd(2) */
 18   140 	enable_on		initial("011010100"b),	/* opnd(1) is the cond name
 18   141*						   opnd(2) is the file name
 18   142*						   opnd(3) is the block	*/
 18   143 	revert_on		initial("011010101"b),	/* opnd(1) is the cond name,
 18   144*						   opnd(2) is the file name	*/
 18   145 	signal_on		initial("011010110"b),	/* opnd(1) is the cond name
 18   146*						   opnd(2) is the file name */
 18   147 
 18   148 	lock_fun		initial("011010111"b),	/* opnd(1) <- stac(opnd(2),opnd(3))	*/
 18   149 	stacq_fun		initial("011011000"b),	/* opnd(1) is result, opnd(2) is ptr to lock word,
 18   150*						   opnd(3) is old value, (4) is new value. */
 18   151 	clock_fun		initial("011011001"b),	/* opnd(1) is the clock time		*/
 18   152 	vclock_fun	initial("011011010"b),	/* opnd(1) is the virtual clock time	*/
 18   153 
 18   154 	bound_ck		initial("011100000"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 18   155 	range_ck		initial("011100001"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 18   156 	loop		initial("011100010"b),	/* do opnd(1) for opnd(2) from opnd(3) to opnd(4) by 1,
 18   157*						   opnd(5) is the list */
 18   158 	join		initial("011100011"b),	/* do opnd(1), opnd(2) ... opnd(n)	*/
 18   159 	allot_based	initial("011100100"b),	/* allocate opnd(2) words in opnd(3), set opnd(1) */
 18   160 	free_based	initial("011100101"b),	/* free opnd(1) in opnd(3), length is opnd(2) words */
 18   161 
 18   162 	r_parn		initial("011110001"b),	/* format op code			*/
 18   163 	l_parn		initial("011110010"b),
 18   164 	r_format		initial("011110011"b),
 18   165 	c_format		initial("011110100"b),
 18   166 	f_format		initial("011110101"b),
 18   167 	e_format		initial("011110110"b),
 18   168 	b_format		initial("011110111"b),
 18   169 	a_format		initial("011111000"b),
 18   170 	x_format		initial("011111001"b),
 18   171 	skip_format	initial("011111010"b),
 18   172 	column_format	initial("011111011"b),
 18   173 	page_format	initial("011111100"b),
 18   174 	line_format	initial("011111101"b),
 18   175 	picture_format	initial("011111110"b),
 18   176 	bn_format		initial("011111111"b),	/* bit format, length(opnd(2)), radix factor(opnd(3)) */
 18   177 
 18   178 	get_list_trans	initial("100000000"b),	/* getlist(opnd(2) with desc(opnd(1)))	*/
 18   179 	get_edit_trans	initial("100000001"b),	/* getedit(opnd(2) with desc(opnd(1)))	*/
 18   180 	get_data_trans	initial("100000010"b),	/* getdata(opnd(1) to opnd(n))	*/
 18   181 	put_list_trans	initial("100000011"b),	/* putlist(opnd(2) with desc(opnd(1)))	*/
 18   182 	put_edit_trans	initial("100000100"b),	/* putedit(opnd(2) with desc(opnd(1)))	*/
 18   183 	put_data_trans	initial("100000101"b),	/* putdata(opnd(2)) with subscript-list opnd(1) */
 18   184 	terminate_trans	initial("100000110"b),	/* terminate stream transmission	*/
 18   185 	stream_prep	initial("100000111"b),	/* initiate stream transmission	*/
 18   186 	record_io		initial("100001000"b),	/* perform record io operation	*/
 18   187 	fortran_read	initial("100001001"b),	/* A complete read statement		*/
 18   188 	fortran_write	initial("100001010"b),	/* A complete write statement		*/
 18   189 	ftn_file_manip	initial("100001011"b),	/* endfile,backspace,rewind,etc.	*/
 18   190 	ftn_trans_loop	initial("100001100"b),	/* An implied do in i/o list		*/
 18   191 	put_control	initial("100001101"b),	/* put control opnd(1) opnd(2) times	*/
 18   192 	put_field		initial("100001110"b),	/* putlist(opnd(2)) of length(opnd(1))	*/
 18   193 	put_field_chk	initial("100001111"b),	/* putlist(op(2)) of len(op(1)) check char index(op(3)) */
 18   194 
 18   195 /* These operators are produced by the parse but are not used as input to the code generator.	*/
 18   196 /* They are processed by the semantic translator.						*/
 18   197 
 18   198 	return_value	initial("100010010"b),	/* return(opnd(1))			*/
 18   199 	allot_var		initial("100010011"b),	/* allot opnd(1) in opnd(2)		*/
 18   200 	free_var		initial("100010100"b),	/* free opnd(1) out of opnd(2)	*/
 18   201 	get_file		initial("100010101"b),	/* opnd(1) is filename,opnd(2) is copy	*/
 18   202 						/* opnd(3) is skip, opnd(4) is list	*/
 18   203 	get_string	initial("100010110"b),	/* opnd(1) is string,opnd(2) is list	*/
 18   204 	put_file		initial("100010111"b),	/* opnd(1) is filename,opnd(2) is page	*/
 18   205 						/* opnd(3) is skip,opnd(4) is line	*/
 18   206 	put_string	initial("100011000"b),	/* opnd(1) is string,opnd(2) is list	*/
 18   207 	open_file		initial("100011001"b),
 18   208 	close_file	initial("100011010"b),
 18   209 	read_file		initial("100011011"b),
 18   210 	write_file	initial("100011100"b),
 18   211 	locate_file	initial("100011101"b),
 18   212 	do_fun		initial("100011110"b),	/* opnd(1) is join of a list		*/
 18   213 						/* opnd(2) is control variable ref	*/
 18   214 						/* opnd(3) is specification operator	*/
 18   215 	do_spec		initial("100011111"b),	/* opnd(1) to opnd(2) by opnd(3) 	*/
 18   216 						/* repeat opnd(4) while opnd(5)	*/
 18   217 						/* opnd(6) is next specification	*/
 18   218 
 18   219 	rewrite_file	initial("100100000"b),
 18   220 	delete_file	initial("100100001"b),
 18   221 	unlock_file	initial("100100010"b),
 18   222 	lock_file		initial("100100011"b),
 18   223 	refer		initial("100100101"b),	/* opnd(1) refer(opnd(2))		*/
 18   224 	prefix_plus	initial("100100110"b),	/* opnd(1) <- +opnd(2)		*/
 18   225 	nop		initial("100100111"b),	/* no-op */
 18   226 	assign_by_name	initial("100101000"b),	/* opnd(1) <- opnd(2),by name		*/
 18   227 
 18   228 /* These operators are produced by the semantic translator in processing the math
 18   229*   builtin functions and are used as input to the code generator			*/
 18   230 
 18   231 	sqrt_fun		initial("100110000"b),	/* opnd(1) <- sqrt(opnd(2))	*/
 18   232 	sin_fun		initial("100110001"b),	/* opnd(1) <- sin(opnd(2))	*/
 18   233 	sind_fun		initial("100110010"b),	/* opnd(1) <- sind(opnd(2))	*/
 18   234 	cos_fun		initial("100110011"b),	/* opnd(1) <- cos(opnd(2))	*/
 18   235 	cosd_fun		initial("100110100"b),	/* opnd(1) <- cosd(opnd(2))	*/
 18   236 	tan_fun		initial("100110101"b),	/* opnd(1) <- tan(opnd(2))	*/
 18   237 	tand_fun		initial("100110110"b),	/* opnd(1) <- tand(opnd(2))	*/
 18   238 	asin_fun		initial("100110111"b),	/* opnd(1) <- asin(opnd(2))	*/
 18   239 	asind_fun		initial("100111000"b),	/* opnd(1) <- asind(opnd(2))	*/
 18   240 	acos_fun		initial("100111001"b),	/* opnd(1) <- acos(opnd(2))	*/
 18   241 	acosd_fun		initial("100111010"b),	/* opnd(1) <- acosd(opnd(2))	*/
 18   242 	atan_fun		initial("100111011"b),	/* opnd(1) <- atan(opnd(2)[,opnd(3)])	*/
 18   243 	atand_fun		initial("100111100"b),	/* opnd(1) <- atand(opnd(2)[,opnd(3)])	*/
 18   244 	log2_fun		initial("100111101"b),	/* opnd(1) <- log2(opnd(2))	*/
 18   245 	log_fun		initial("100111110"b),	/* opnd(1) <- log(opnd(2))	*/
 18   246 	log10_fun		initial("100111111"b),	/* opnd(1) <- log10(opnd(2))	*/
 18   247 
 18   248 	exp_fun		initial("101000000"b))	/* opnd(1) <- exp(opnd(2))	*/
 18   249 
 18   250 			bit(9) aligned internal static options(constant);
 18   251 
 18   252 /* END INCLUDE FILE ... op_codes.incl.pl1 */
       47 
       48 
 19     1 dcl	1 array			based aligned,
 19     2 	2 node_type		bit(9) unaligned,
 19     3 	2 reserved		bit(34) unaligned,
 19     4 	2 number_of_dimensions	fixed(7) unaligned,
 19     5 	2 own_number_of_dimensions	fixed(7) unaligned,
 19     6 	2 element_boundary		fixed(3) unaligned,
 19     7 	2 size_units		fixed(3) unaligned,
 19     8 	2 offset_units		fixed(3) unaligned,
 19     9 	2 interleaved		bit(1) unaligned,
 19    10 	2 c_element_size		fixed(24),
 19    11 	2 c_element_size_bits	fixed(24),
 19    12 	2 c_virtual_origin		fixed(24),
 19    13 	2 element_size		ptr unaligned,
 19    14 	2 element_size_bits		ptr unaligned,
 19    15 	2 virtual_origin		ptr unaligned,
 19    16 	2 symtab_virtual_origin	ptr unaligned,
 19    17 	2 symtab_element_size	ptr unaligned,
 19    18 	2 bounds			ptr unaligned,
 19    19 	2 element_descriptor	ptr unaligned;
 19    20 
 19    21 dcl	1 bound			based aligned,
 19    22 	2 node_type		bit(9),
 19    23 	2 c_lower			fixed(24),
 19    24 	2 c_upper			fixed(24),
 19    25 	2 c_multiplier		fixed(24),
 19    26 	2 c_desc_multiplier		fixed(24),
 19    27 	2 lower			ptr unaligned,
 19    28 	2 upper			ptr unaligned,
 19    29 	2 multiplier		ptr unaligned,
 19    30 	2 desc_multiplier		ptr unaligned,
 19    31 	2 symtab_lower		ptr unaligned,
 19    32 	2 symtab_upper		ptr unaligned,
 19    33 	2 symtab_multiplier		ptr unaligned,
 19    34 	2 next			ptr unaligned;
       49 
       50 
 20     1 /* BEGIN INCLUDE FILE ... declare_type.incl.pl1 */
 20     2 
 20     3 /* Modified: 25 Apr 1979 by PCK to implement 4-bit decimal */
 20     4 
 20     5 dcl  (	by_declare	initial("001"b),
 20     6 	by_explicit_context initial("010"b),
 20     7 	by_context	initial("011"b),
 20     8 	by_implication	initial("100"b),
 20     9 	by_compiler	initial("101"b)) int static bit(3) aligned options(constant);
 20    10 
 20    11 /* END INCLUDE FILE ... declare_type.incl.pl1 */
       51 
       52 
 21     1 /* BEGIN INCLUDE FILE ... picture_image.incl.pl1
 21     2*
 21     3*   James R. Davis  12 Mar 79
 21     4**/
 21     5 
 21     6      dcl	   1 picture_image	      aligned based,
 21     7 	     2 type	      fixed bin (8) unal,
 21     8 	     2 prec	      fixed bin (8) unal,	/* precision or length of associated value */
 21     9 	     2 scale	      fixed bin (8) unal,	/* for both fixed and float pictures,
 21    10*							=ndigits after "v" - scale_factor */
 21    11 	     2 piclength	      fixed bin (8) unal,	/* length of picture_constant.chars, <64
 21    12*							=length of normalized-picture-string */
 21    13 	     2 varlength	      fixed bin (8) unal,	/* length of pictured variable in chars, <64
 21    14*							=length of normalized_picture_string - "k" and "v" */
 21    15 	     2 scalefactor	      fixed bin (8) unal,	/* value of pict-sc-f, -256<=x<256  */
 21    16 	     2 explength	      fixed bin (8) unal,	/* length of exp field for float */
 21    17 	     2 drift_character    char (1) unal,
 21    18 	     2 chars	      char (0 refer (picture_image.piclength)) aligned;
 21    19 
 21    20      dcl	   (
 21    21 	   picture_char_type      init (24),
 21    22 	   picture_realfix_type   init (25),
 21    23 	   picture_complexfix_type
 21    24 			      init (26),
 21    25 	   picture_realflo_type   init (27),
 21    26 	   picture_complexflo_type
 21    27 			      init (28)
 21    28 	   )		      fixed bin (8) unal static internal options (constant);
 21    29 
 21    30 /* END INCLUDE FILE  ... picture_image.incl.pl1  */
       53 
       54 
       55 /*  */
       56 
       57 /* We will compare the arguments of the generic reference to each of the descriptor
       58*   lists in the generic declaration until we get a hit */
       59 
       60 /* First, we must get symbol nodes for each of the arguments
       61*
       62*   (subs has the arguments in reverse order!) */
       63 
       64 begin:
       65 	st = stmnt;
       66 	arg_list = subs;
       67 	n_args = hbound(asym,1);
       68 	g = tree->reference.symbol;
       69 
       70 	j = 0;
       71 	do i = n_args to 1 by -1;
       72 		j = j + 1;
       73 		leave_it = "0"b;
       74 		old = st->statement.back;	/* prepare to nullify statements
       75*					   generated for the j-th argument */
       76 		this_context = "01"b;
       77 		a = arg_list->list.element(i);
       78 		if a->node.type = operator_node
       79 		then do;
       80 			if a->operator.op_code = assign /* assuming only kind of assignment is to t0 */
       81 			     then arg_list->list.element(i) = a->operand(2);
       82 			go to by_value;
       83 		     end;
       84 		if a->node.type = token_node
       85 		     then if a->token.type & is_constant
       86 			then do;
       87 				leave_it = "1"b;
       88 				go to by_value;
       89 			     end;
       90 		q = copy_expression((a));
       91 		if q->node.type = reference_node
       92 		     then if ^q->reference.shared
       93 			then q->reference.ref_count = q->reference.ref_count - 1;
       94 		q = expression_semantics(blk,st,q,this_context);
       95 		if q->node.type ^= reference_node
       96 		     then go to undo;
       97 		if q->reference.symbol->symbol.constant
       98 		     then go to undo;
       99 		a = q;
      100 		asym(j) = a->reference.symbol;
      101 		go to next;
      102 
      103 undo:		do q = old->statement.next repeat q->statement.next while (q^=st);
      104 			q->statement.root = null;
      105 			q->statement.statement_type = null_statement;
      106 		end;
      107 
      108 by_value:
      109 		a = create_operator(assign,2);
      110 		q = create_symbol(null,null,by_compiler);
      111 		q->symbol.temporary = "1"b;
      112 		a->operand(1) = q->symbol.reference;
      113 		a->operand(2) = arg_list->list.element(i);
      114 		a = expression_semantics(blk,st,a,this_context);
      115 		q = a;
      116 		if q->node.type = operator_node
      117 		     then q = q->operand(1);
      118 		asym(j) = q->reference.symbol;
      119 
      120 next:
      121 		if ^leave_it
      122 		     then arg_list->list.element(i) = a;
      123 	end;
      124 
      125 /* Now the search for a suitable entry begins */
      126 
      127 	do alt = g->symbol.general
      128 	     repeat alt->list.element(3) while (alt ^= null);
      129 		i = 0;
      130 		do lp = alt->list.element(2) repeat lp->list.element(2) while (lp ^= null);
      131 			i = i + 1;
      132 			if i > n_args
      133 			     then go to try_another;
      134 			if lp->list.element(1) ^= null
      135 			     then if ^compare_generic(asym(i),(lp->list.element(1)))
      136 				     then go to try_another;
      137 		end;
      138 		if i = n_args then go to hit;
      139 
      140 try_another:
      141 	end;
      142 
      143 /* We have failed to find a match */
      144 
      145 	call semantic_translator$abort(65,tree);
      146 
      147 /* We've got an entry reference, so let's build a std_call operator and process it */
      148 
      149 hit:
      150 	p = create_operator(std_arg_list,3);
      151 	p->operand(2) = arg_list;
      152 	q = create_operator(std_call,3);
      153 	r = copy_expression(alt->list.element(1));
      154 	q->operand(2) = expression_semantics((g->symbol.block_node),st,r,"0"b);
      155 	q->operand(3) = p;
      156 	q = expression_semantics(blk,st,q,context);
      157 	stmnt = st;
      158 	return(q);
      159 
      160 /*  */
      161 /* compare_generic checks to see if an argument fits the description given for a
      162*   specific alternative in the generic declaration */
      163 
      164 compare_generic:	proc(pa,pg) returns(bit(1) aligned);
      165 dcl	(pa,pg) ptr;
      166 dcl	(a,g,as,gs) ptr;
      167 dcl	(genbits,argmask) bit(72) aligned;
      168 dcl	asize fixed bin(24);
      169 dcl	ascale fixed bin(7);
      170 dcl	1 genmask aligned based(addr(genbits)),
      171 		2 attributes unaligned like symbol.data_type,
      172 		2 misc_attributes unaligned like symbol.misc_attributes;
      173 
      174 begin:
      175 	a = pa;
      176 	g = pg;
      177 
      178 	genbits = substr(string(g->symbol.attributes),1,72);
      179 	genmask.precision = "0"b;
      180 	argmask = substr(string(a->symbol.attributes),1,72) & genbits;
      181 	if bool(genbits,argmask,"0110"b)	/* exclusive or */
      182 	     then go to fail;
      183 
      184 	if g->symbol.variable_arg_list
      185 	     then if ^a->symbol.variable_arg_list
      186 		     then go to fail;
      187 	if g->symbol.non_varying
      188 	     then if ^a->symbol.non_varying
      189 		     then go to fail;
      190 
      191 	if g->symbol.precision
      192 	then do;
      193 		asize = a->symbol.c_dcl_size;
      194 		if asize < g->symbol.c_dcl_size
      195 		     then go to fail;
      196 		if asize > g->symbol.pic_size
      197 		     then go to fail;
      198 		if g->symbol.fixed
      199 		then do;
      200 			ascale = a->symbol.scale;
      201 			if ascale < g->symbol.scale
      202 			     then go to fail;
      203 			if ascale > g->symbol.pic_scale
      204 			     then go to fail;
      205 		     end;
      206 	     end;
      207 
      208 	if g->symbol.array ^= null
      209 	     then if g->symbol.array->array.number_of_dimensions ^= a->symbol.array->array.number_of_dimensions
      210 		     then go to fail;
      211 
      212 	if g -> symbol.picture
      213 	then if g -> symbol.general -> reference.symbol -> symbol.initial -> picture_image.chars
      214 	     ^= a -> symbol.general -> reference.symbol -> symbol.initial  -> picture_image.chars
      215 	     then go to fail;
      216 
      217 	if g->symbol.structure
      218 	then do;
      219 		gs = g->symbol.son;
      220 		as = a->symbol.son;
      221 		do while (gs ^= null);
      222 			if as = null
      223 			     then go to fail;
      224 			if ^compare_generic(as,gs)
      225 			     then go to fail;
      226 			as = as->symbol.brother;
      227 			gs = gs->symbol.brother;
      228 		end;
      229 		if as ^= null
      230 		     then go to fail;
      231 	     end;
      232 
      233 /* We've passed the test */
      234 
      235 	return("1"b);
      236 
      237 /* We've flunked the test */
      238 
      239 fail:
      240 	return("0"b);
      241 end;
      242 end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/17/00  1936.3  generic_selector.pl1              >udd>sm>ds>w>ml>generic_selector.pl1
25           1    07/21/80  1646.3  semant.incl.pl1                   >ldd>incl>semant.incl.pl1
1-228        2    08/01/89  1339.9  language_utility.incl.pl1         >ldd>incl>language_utility.incl.pl1
2-307        3    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-325        4    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-335        5    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-374        6    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-386        7    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
27           8    07/21/80  1646.3  semantic_bits.incl.pl1            >ldd>incl>semantic_bits.incl.pl1
29           9    08/13/81  2311.5  list.incl.pl1                     >ldd>incl>list.incl.pl1
31          10    12/07/83  1801.7  symbol.incl.pl1                   >ldd>incl>symbol.incl.pl1
33          11    07/21/80  1646.3  reference.incl.pl1                >ldd>incl>reference.incl.pl1
35          12    09/14/77  1805.7  token.incl.pl1                    >ldd>incl>token.incl.pl1
37          13    11/30/78  1327.4  token_types.incl.pl1              >ldd>incl>token_types.incl.pl1
39          14    07/21/80  1646.3  nodes.incl.pl1                    >ldd>incl>nodes.incl.pl1
41          15    04/07/83  1735.0  statement.incl.pl1                >ldd>incl>statement.incl.pl1
43          16    05/03/76  1420.4  statement_types.incl.pl1          >ldd>incl>statement_types.incl.pl1
45          17    07/21/80  1646.3  operator.incl.pl1                 >ldd>incl>operator.incl.pl1
47          18    04/07/83  1735.0  op_codes.incl.pl1                 >ldd>incl>op_codes.incl.pl1
49          19    05/06/74  1841.6  array.incl.pl1                    >ldd>incl>array.incl.pl1
51          20    10/25/79  1745.8  declare_type.incl.pl1             >ldd>incl>declare_type.incl.pl1
53          21    06/28/79  1304.8  picture_image.incl.pl1            >ldd>incl>picture_image.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
a                               000102 automatic       pointer                  dcl 18 in procedure "generic_selector" set ref 77*
                                                                                  78 80 80 84 84 90 99* 100 108* 112 113 114* 114*
                                                                                  115 120
a                               000100 automatic       pointer                  dcl 166 in procedure "compare_generic" set ref 174*
                                                                                  180 184 187 193 200 208 212 220
alt                             000104 automatic       pointer                  dcl 18 set ref 127* 127* 130* 140 153
arg_list                        000100 automatic       pointer                  dcl 18 set ref 66* 77 80 113 120 151
argmask                         000112 automatic       bit(72)                  dcl 167 set ref 180* 181
array                    12            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 10-3 in procedure "generic_selector"
                                                                                  ref 208 208 208
array                                  based           structure                level 1 dcl 19-1 in procedure "generic_selector"
as                              000104 automatic       pointer                  dcl 166 set ref 220* 222 224* 226* 226 229
ascale                          000115 automatic       fixed bin(7,0)           dcl 169 set ref 200* 201 203
asize                           000114 automatic       fixed bin(24,0)          dcl 168 set ref 193* 194 196
assign                          000003 constant        bit(9)                   initial dcl 18-8 set ref 80 108*
asym                            000124 automatic       pointer                  array dcl 19 set ref 67 100* 118* 134*
attributes               31            based           structure                level 2 dcl 10-3 set ref 178 180
back                      2            based           pointer                  level 2 packed packed unaligned dcl 15-9 ref 74
blk                                    parameter       pointer                  dcl 16 set ref 11 94* 114* 156*
block_node                4            based           pointer                  level 2 packed packed unaligned dcl 10-3 ref 154
bool                                                   builtin function         dcl 23 ref 181
brother                  20            based           pointer                  level 2 packed packed unaligned dcl 10-3 ref 226 227
by_compiler                     000000 constant        bit(3)                   initial dcl 20-5 set ref 110*
c_dcl_size               30            based           fixed bin(24,0)          level 2 dcl 10-3 ref 193 194
chars                     2            based           char                     level 2 dcl 21-6 ref 212 212
constant                 32(16)        based           bit(1)                   level 4 packed packed unaligned dcl 10-3 ref 97
context                                parameter       bit(36)                  dcl 8-5 set ref 11 156*
copy_expression                 000012 constant        entry                    external dcl 2-94 ref 90 153
create_operator                 000014 constant        entry                    external dcl 2-152 ref 108 149 152
create_symbol                   000016 constant        entry                    external dcl 2-184 ref 110
data_type                31            based           structure                level 3 packed packed unaligned dcl 10-3
def_context                            based           structure                level 1 dcl 8-8
element                   1            based           pointer                  array level 2 packed packed unaligned dcl 9-6 set
                                                                                  ref 77 80* 113 120* 130 134 134 137 140 153*
expression_semantics            000010 constant        entry                    external dcl 1-105 ref 94 114 154 156
fixed                    31(01)        based           bit(1)                   level 4 packed packed unaligned dcl 10-3 ref 198
g                               000102 automatic       pointer                  dcl 166 in procedure "compare_generic" set ref 176*
                                                                                  178 184 187 191 194 196 198 201 203 208 208 212
                                                                                  212 217 219
g                               000106 automatic       pointer                  dcl 18 in procedure "generic_selector" set ref 68*
                                                                                  127 154
genbits                         000110 automatic       bit(72)                  dcl 167 set ref 178* 179 180 181
general                  16            based           pointer                  level 2 packed packed unaligned dcl 10-3 ref 127 212
                                                                                  212
genmask                                based           structure                level 1 dcl 170
gs                              000106 automatic       pointer                  dcl 166 set ref 219* 221 224* 227* 227
hbound                                                 builtin function         dcl 23 ref 67
i                               000124 automatic       fixed bin(17,0)          dcl 20 set ref 71* 77 80 113 120* 129* 131* 131 132
                                                                                  134 138
initial                  11            based           pointer                  level 2 packed packed unaligned dcl 10-3 ref 212 212
is_constant                            constant        bit(9)                   initial dcl 13-47 ref 84
j                               000125 automatic       fixed bin(17,0)          dcl 20 set ref 70* 72* 72 100 118
leave_it                        000127 automatic       bit(1)                   dcl 21 set ref 73* 87* 120
list                                   based           structure                level 1 dcl 9-6
lp                              000110 automatic       pointer                  dcl 18 set ref 130* 130* 134 134* 137
misc_attributes          31(19)        based           structure                level 3 in structure "symbol" packed packed
                                                                                  unaligned dcl 10-3 in procedure "generic_selector"
misc_attributes           0(19)        based           structure                level 2 in structure "genmask" packed packed
                                                                                  unaligned dcl 170 in procedure "compare_generic"
n_args                          000126 automatic       fixed bin(17,0)          dcl 20 set ref 67* 71 132 138
next                      1            based           pointer                  level 2 packed packed unaligned dcl 15-9 ref 103 106
node                                   based           structure                level 1 dcl 14-27
non_varying              32(05)        based           bit(1)                   level 4 packed packed unaligned dcl 10-3 ref 187 187
null                                                   builtin function         dcl 23 ref 104 110 110 110 110 127 130 134 208 221
                                                                                  222 229
null_statement                         constant        bit(9)                   initial dcl 16-3 ref 105
number                    0(21)        based           fixed bin(14,0)          level 2 packed packed unaligned dcl 9-6 ref 19
number_of_dimensions      1(07)        based           fixed bin(7,0)           level 2 packed packed unaligned dcl 19-1 ref 208 208
old                             000112 automatic       pointer                  dcl 18 set ref 74* 103
op_code                   0(09)        based           bit(9)                   level 2 packed packed unaligned dcl 17-6 ref 80
operand                   1            based           pointer                  array level 2 packed packed unaligned dcl 17-6 set
                                                                                  ref 80 112* 113* 116 151* 154* 155*
operator                               based           structure                level 1 dcl 17-6
operator_node                          constant        bit(9)                   initial dcl 14-5 ref 78 116
p                               000114 automatic       pointer                  dcl 18 set ref 149* 151 155
pa                                     parameter       pointer                  dcl 165 ref 164 174
pg                                     parameter       pointer                  dcl 165 ref 164 176
pic_scale                 1(31)        based           fixed bin(7,0)           level 3 packed packed unaligned dcl 10-3 ref 203
pic_size                  2(03)        based           fixed bin(7,0)           level 3 packed packed unaligned dcl 10-3 ref 196
piclength                 0(27)        based           fixed bin(8,0)           level 2 packed packed unaligned dcl 21-6 ref 212 212
picture                  31(18)        based           bit(1)                   level 4 packed packed unaligned dcl 10-3 ref 212
picture_image                          based           structure                level 1 dcl 21-6
pix                       1(28)        based           structure                level 2 packed packed unaligned dcl 10-3
precision                 0(25)        based           bit(1)                   level 3 in structure "genmask" packed packed
                                                                                  unaligned dcl 170 in procedure "compare_generic"
                                                                                  set ref 179*
precision                31(25)        based           bit(1)                   level 4 in structure "symbol" packed packed
                                                                                  unaligned dcl 10-3 in procedure "generic_selector"
                                                                                  ref 191
q                               000116 automatic       pointer                  dcl 18 set ref 90* 91 91 91 91 94* 94* 95 97 99 103*
                                                                                  103* 104 105* 106 110* 111 112 115* 116 116* 116
                                                                                  118 152* 154 155 156* 156* 158
r                               000120 automatic       pointer                  dcl 18 set ref 153* 154*
ref_count                 0(18)        based           fixed bin(17,0)          level 2 packed packed unaligned dcl 11-3 set ref 91*
                                                                                  91
reference                15            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 10-3 in procedure "generic_selector"
                                                                                  ref 112
reference                              based           structure                level 1 dcl 11-3 in procedure "generic_selector"
reference_node                         constant        bit(9)                   initial dcl 14-5 ref 91 95
root                      3            based           pointer                  level 2 packed packed unaligned dcl 15-9 set ref
                                                                                  104*
scale                     2(28)        based           fixed bin(7,0)           level 2 packed packed unaligned dcl 10-3 ref 200 201
semantic_translator$abort       000020 constant        entry                    external dcl 2-446 ref 145
shared                    0(11)        based           bit(1)                   level 2 packed packed unaligned dcl 11-3 ref 91
son                      21            based           pointer                  level 2 packed packed unaligned dcl 10-3 ref 219 220
st                              000122 automatic       pointer                  dcl 18 set ref 64* 74 94* 103 114* 154* 156* 157
statement                              based           structure                level 1 dcl 15-9
statement_type           12(27)        based           bit(9)                   level 2 packed packed unaligned dcl 15-9 set ref
                                                                                  105*
std_arg_list                    000002 constant        bit(9)                   initial dcl 18-8 set ref 149*
std_call                        000001 constant        bit(9)                   initial dcl 18-8 set ref 152*
stmnt                                  parameter       pointer                  dcl 16 set ref 11 64 157*
storage_class            32(09)        based           structure                level 3 packed packed unaligned dcl 10-3
string                                                 builtin function         dcl 23 ref 178 180
structure                31            based           bit(1)                   level 4 packed packed unaligned dcl 10-3 ref 217
subs                                   parameter       pointer                  dcl 16 ref 11 19 66
substr                                                 builtin function         dcl 23 ref 178 180
symbol                                 based           structure                level 1 dcl 10-3 in procedure "generic_selector"
symbol                    3            based           pointer                  level 2 in structure "reference" packed packed
                                                                                  unaligned dcl 11-3 in procedure "generic_selector"
                                                                                  ref 68 97 100 118 212 212
temporary                32(17)        based           bit(1)                   level 4 packed packed unaligned dcl 10-3 set ref
                                                                                  111*
this_context                    000130 automatic       bit(36)                  dcl 8-5 set ref 76* 94* 114*
token                                  based           structure                level 1 dcl 12-3
token_node                             constant        bit(9)                   initial dcl 14-5 ref 84
tree                                   parameter       pointer                  dcl 16 set ref 11 68 145*
type                      0(09)        based           bit(9)                   level 2 in structure "token" packed packed unaligned
                                                                                  dcl 12-3 in procedure "generic_selector" ref 84
type                                   based           bit(9)                   level 2 in structure "node" packed packed unaligned
                                                                                  dcl 14-27 in procedure "generic_selector" ref 78
                                                                                  84 91 95 116
variable_arg_list        32(07)        based           bit(1)                   level 4 packed packed unaligned dcl 10-3 ref 184 184

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
a_format                               internal static bit(9)                   initial dcl 18-8
abs_fun                                internal static bit(9)                   initial dcl 18-8
acos_fun                               internal static bit(9)                   initial dcl 18-8
acosd_fun                              internal static bit(9)                   initial dcl 18-8
add                                    internal static bit(9)                   initial dcl 18-8
addbitno_fun                           internal static bit(9)                   initial dcl 18-8
addcharno_fun                          internal static bit(9)                   initial dcl 18-8
addr_fun                               internal static bit(9)                   initial dcl 18-8
addr_fun_bits                          internal static bit(9)                   initial dcl 18-8
addrel_fun                             internal static bit(9)                   initial dcl 18-8
adjust_count                    000000 constant        entry                    external dcl 2-20
alloc_semantics                 000000 constant        entry                    external dcl 1-7
alloc_semantics$init_only       000000 constant        entry                    external dcl 1-12
allocate_statement                     internal static bit(9)                   initial dcl 16-3
allocation_fun                         internal static bit(9)                   initial dcl 18-8
allot_auto                             internal static bit(9)                   initial dcl 18-8
allot_based                            internal static bit(9)                   initial dcl 18-8
allot_ctl                              internal static bit(9)                   initial dcl 18-8
allot_var                              internal static bit(9)                   initial dcl 18-8
and                                    internal static bit(9)                   initial dcl 13-3
and_bits                               internal static bit(9)                   initial dcl 18-8
array_node                             internal static bit(9)                   initial dcl 14-5
arrow                                  internal static bit(9)                   initial dcl 13-3
asin_fun                               internal static bit(9)                   initial dcl 18-8
asind_fun                              internal static bit(9)                   initial dcl 18-8
assign_by_name                         internal static bit(9)                   initial dcl 18-8
assign_round                           internal static bit(9)                   initial dcl 18-8
assign_size_ck                         internal static bit(9)                   initial dcl 18-8
assign_zero                            internal static bit(9)                   initial dcl 18-8
assignment                             internal static bit(9)                   initial dcl 13-3
assignment_statement                   internal static bit(9)                   initial dcl 16-3
asterisk                               internal static bit(9)                   initial dcl 13-3
atan_fun                               internal static bit(9)                   initial dcl 18-8
atand_fun                              internal static bit(9)                   initial dcl 18-8
b_format                               internal static bit(9)                   initial dcl 18-8
baseno_fun                             internal static bit(9)                   initial dcl 18-8
baseptr_fun                            internal static bit(9)                   initial dcl 18-8
begin_statement                        internal static bit(9)                   initial dcl 16-3
bin_integer                            internal static bit(9)                   initial dcl 13-3
binary_to_octal_string          000000 constant        entry                    external dcl 2-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 2-43
bindec                          000000 constant        entry                    external dcl 2-23
bindec$vs                       000000 constant        entry                    external dcl 2-28
binoct                          000000 constant        entry                    external dcl 2-33
bit_pointer                            internal static bit(9)                   initial dcl 18-8
bit_string                             internal static bit(9)                   initial dcl 13-3
bit_to_char                            internal static bit(9)                   initial dcl 18-8
bit_to_word                            internal static bit(9)                   initial dcl 18-8
bitno_fun                              internal static bit(9)                   initial dcl 18-8
block_node                             internal static bit(9)                   initial dcl 14-5
bn_format                              internal static bit(9)                   initial dcl 18-8
bool_fun                               internal static bit(9)                   initial dcl 18-8
bound                                  based           structure                level 1 dcl 19-21
bound_ck                               internal static bit(9)                   initial dcl 18-8
bound_node                             internal static bit(9)                   initial dcl 14-5
builtin                         000000 constant        entry                    external dcl 1-17
by_context                             internal static bit(3)                   initial dcl 20-5
by_declare                             internal static bit(3)                   initial dcl 20-5
by_explicit_context                    internal static bit(3)                   initial dcl 20-5
by_implication                         internal static bit(3)                   initial dcl 20-5
by_name_agg_node                       internal static bit(9)                   initial dcl 14-5
byte_fun                               internal static bit(9)                   initial dcl 18-8
c_format                               internal static bit(9)                   initial dcl 18-8
call_statement                         internal static bit(9)                   initial dcl 16-3
cat                                    internal static bit(9)                   initial dcl 13-3
cat_string                             internal static bit(9)                   initial dcl 18-8
ceil_fun                               internal static bit(9)                   initial dcl 18-8
char_string                            internal static bit(9)                   initial dcl 13-3
char_to_word                           internal static bit(9)                   initial dcl 18-8
charno_fun                             internal static bit(9)                   initial dcl 18-8
check_star_extents              000000 constant        entry                    external dcl 1-27
clock_fun                              internal static bit(9)                   initial dcl 18-8
close_file                             internal static bit(9)                   initial dcl 18-8
close_statement                        internal static bit(9)                   initial dcl 16-3
codeptr_fun                            internal static bit(9)                   initial dcl 18-8
colon                                  internal static bit(9)                   initial dcl 13-3
column_format                          internal static bit(9)                   initial dcl 18-8
comma                                  internal static bit(9)                   initial dcl 13-3
compare_declaration             000000 constant        entry                    external dcl 1-31
compare_expression              000000 constant        entry                    external dcl 2-48
complex_fun                            internal static bit(9)                   initial dcl 18-8
conjg_fun                              internal static bit(9)                   initial dcl 18-8
constant_length                 000000 constant        entry                    external dcl 2-54
context_node                           internal static bit(9)                   initial dcl 14-5
context_processor               000000 constant        entry                    external dcl 1-38
continue_statement                     internal static bit(9)                   initial dcl 16-3
convert                         000000 constant        entry                    external dcl 2-60
convert$from_builtin            000000 constant        entry                    external dcl 2-72
convert$to_integer              000000 constant        entry                    external dcl 2-66
convert$to_target               000000 constant        entry                    external dcl 2-88
convert$to_target_fb            000000 constant        entry                    external dcl 2-82
convert$validate                000000 constant        entry                    external dcl 2-78
copy_expression$copy_sons       000000 constant        entry                    external dcl 2-99
copy_string                            internal static bit(9)                   initial dcl 18-8
copy_unique_expression          000000 constant        entry                    external dcl 2-103
copy_words                             internal static bit(9)                   initial dcl 18-8
cos_fun                                internal static bit(9)                   initial dcl 18-8
cosd_fun                               internal static bit(9)                   initial dcl 18-8
create_array                    000000 constant        entry                    external dcl 2-108
create_block                    000000 constant        entry                    external dcl 2-112
create_bound                    000000 constant        entry                    external dcl 2-118
create_context                  000000 constant        entry                    external dcl 2-122
create_cross_reference          000000 constant        entry                    external dcl 2-128
create_default                  000000 constant        entry                    external dcl 2-132
create_identifier               000000 constant        entry                    external dcl 2-136
create_label                    000000 constant        entry                    external dcl 2-140
create_list                     000000 constant        entry                    external dcl 2-147
create_reference                000000 constant        entry                    external dcl 2-158
create_statement                000000 constant        entry                    external dcl 2-163
create_statement$prologue       000000 constant        entry                    external dcl 2-171
create_storage                  000000 constant        entry                    external dcl 2-179
create_token                    000000 constant        entry                    external dcl 2-191
create_token$init_hash_table    000000 constant        entry                    external dcl 2-197
create_token$protected          000000 constant        entry                    external dcl 2-199
cross_reference_node                   internal static bit(9)                   initial dcl 14-5
dec_integer                            internal static bit(9)                   initial dcl 13-3
decbin                          000000 constant        entry                    external dcl 2-206
declare                         000000 constant        entry                    external dcl 1-41
declare_constant                000000 constant        entry                    external dcl 2-211
declare_constant$bit            000000 constant        entry                    external dcl 2-219
declare_constant$char           000000 constant        entry                    external dcl 2-224
declare_constant$desc           000000 constant        entry                    external dcl 2-229
declare_constant$integer        000000 constant        entry                    external dcl 2-234
declare_descriptor              000000 constant        entry                    external dcl 2-239
declare_descriptor$ctl          000000 constant        entry                    external dcl 2-249
declare_descriptor$param        000000 constant        entry                    external dcl 2-259
declare_integer                 000000 constant        entry                    external dcl 2-269
declare_picture                 000000 constant        entry                    external dcl 2-274
declare_picture_temp            000000 constant        entry                    external dcl 2-279
declare_pointer                 000000 constant        entry                    external dcl 2-287
declare_statement                      internal static bit(9)                   initial dcl 16-3
declare_structure               000000 constant        entry                    external dcl 1-44
declare_temporary               000000 constant        entry                    external dcl 2-292
decode_node_id                  000000 constant        entry                    external dcl 2-300
decode_source_id                000000 constant        entry                    external dcl 2-306
def_this_context                       based           structure                level 1 dcl 8-27
default_node                           internal static bit(9)                   initial dcl 14-5
default_statement                      internal static bit(9)                   initial dcl 16-3
defined_reference               000000 constant        entry                    external dcl 1-47
delete_file                            internal static bit(9)                   initial dcl 18-8
delete_statement                       internal static bit(9)                   initial dcl 16-3
desc_size                              internal static bit(9)                   initial dcl 18-8
digit_to_bit                           internal static bit(9)                   initial dcl 18-8
display_statement                      internal static bit(9)                   initial dcl 16-3
div                                    internal static bit(9)                   initial dcl 18-8
do_fun                                 internal static bit(9)                   initial dcl 18-8
do_semantics                    000000 constant        entry                    external dcl 1-57
do_spec                                internal static bit(9)                   initial dcl 18-8
do_statement                           internal static bit(9)                   initial dcl 16-3
e_format                               internal static bit(9)                   initial dcl 18-8
else_clause                            internal static bit(9)                   initial dcl 16-3
empty_area                             internal static bit(9)                   initial dcl 18-8
enable_on                              internal static bit(9)                   initial dcl 18-8
end_statement                          internal static bit(9)                   initial dcl 16-3
entry_statement                        internal static bit(9)                   initial dcl 16-3
environmentptr_fun                     internal static bit(9)                   initial dcl 18-8
eq                                     internal static bit(9)                   initial dcl 13-3
equal                                  internal static bit(9)                   initial dcl 18-8
error                           000000 constant        entry                    external dcl 2-314
error$omit_text                 000000 constant        entry                    external dcl 2-319
error_                          000000 constant        entry                    external dcl 2-324
error_$finish                   000000 constant        entry                    external dcl 2-343
error_$initialize_error         000000 constant        entry                    external dcl 2-341
error_$no_text                  000000 constant        entry                    external dcl 2-334
ex_prologue                            internal static bit(9)                   initial dcl 18-8
exit_statement                         internal static bit(9)                   initial dcl 16-3
exp                                    internal static bit(9)                   initial dcl 18-8
exp_fun                                internal static bit(9)                   initial dcl 18-8
expand_assign                   000000 constant        entry                    external dcl 1-62
expand_by_name                  000000 constant        entry                    external dcl 1-71
expand_infix                    000000 constant        entry                    external dcl 1-76
expand_initial                  000000 constant        entry                    external dcl 1-84
expand_prefix                   000000 constant        entry                    external dcl 1-89
expand_primitive                000000 constant        entry                    external dcl 1-97
expon                                  internal static bit(9)                   initial dcl 13-3
f_format                               internal static bit(9)                   initial dcl 18-8
fill_refer                      000000 constant        entry                    external dcl 1-113
fixed_bin                              internal static bit(9)                   initial dcl 13-3
fixed_dec                              internal static bit(9)                   initial dcl 13-3
float_bin                              internal static bit(9)                   initial dcl 13-3
float_dec                              internal static bit(9)                   initial dcl 13-3
floor_fun                              internal static bit(9)                   initial dcl 18-8
format_statement                       internal static bit(9)                   initial dcl 16-3
format_value_node                      internal static bit(9)                   initial dcl 14-5
fortran_read                           internal static bit(9)                   initial dcl 18-8
fortran_write                          internal static bit(9)                   initial dcl 18-8
free_based                             internal static bit(9)                   initial dcl 18-8
free_ctl                               internal static bit(9)                   initial dcl 18-8
free_node                       000000 constant        entry                    external dcl 2-345
free_statement                         internal static bit(9)                   initial dcl 16-3
free_var                               internal static bit(9)                   initial dcl 18-8
ftn_file_manip                         internal static bit(9)                   initial dcl 18-8
ftn_trans_loop                         internal static bit(9)                   initial dcl 18-8
function                        000000 constant        entry                    external dcl 1-125
ge                                     internal static bit(9)                   initial dcl 13-3
generic_selector                000000 constant        entry                    external dcl 1-134
get_array_size                  000000 constant        entry                    external dcl 2-348
get_data_trans                         internal static bit(9)                   initial dcl 18-8
get_edit_trans                         internal static bit(9)                   initial dcl 18-8
get_file                               internal static bit(9)                   initial dcl 18-8
get_list_trans                         internal static bit(9)                   initial dcl 18-8
get_size                        000000 constant        entry                    external dcl 2-352
get_statement                          internal static bit(9)                   initial dcl 16-3
get_string                             internal static bit(9)                   initial dcl 18-8
goto_statement                         internal static bit(9)                   initial dcl 16-3
greater_or_equal                       internal static bit(9)                   initial dcl 18-8
greater_than                           internal static bit(9)                   initial dcl 18-8
gt                                     internal static bit(9)                   initial dcl 13-3
half_to_word                           internal static bit(9)                   initial dcl 18-8
i_bin_integer                          internal static bit(9)                   initial dcl 13-3
i_dec_integer                          internal static bit(9)                   initial dcl 13-3
i_fixed_bin                            internal static bit(9)                   initial dcl 13-3
i_fixed_dec                            internal static bit(9)                   initial dcl 13-3
i_float_bin                            internal static bit(9)                   initial dcl 13-3
i_float_dec                            internal static bit(9)                   initial dcl 13-3
identifier                             internal static bit(9)                   initial dcl 13-3
if_statement                           internal static bit(9)                   initial dcl 16-3
imag_fun                               internal static bit(9)                   initial dcl 18-8
index_after_fun                        internal static bit(9)                   initial dcl 18-8
index_before_fun                       internal static bit(9)                   initial dcl 18-8
index_fun                              internal static bit(9)                   initial dcl 18-8
index_rev_fun                          internal static bit(9)                   initial dcl 18-8
io_data_list_semantics          000000 constant        entry                    external dcl 1-143
io_data_list_semantics$format_list_semantics
                                000000 constant        entry                    external dcl 1-120
io_semantics                    000000 constant        entry                    external dcl 1-148
is_arith_constant                      internal static bit(9)                   initial dcl 13-47
is_arithmetic_constant                 internal static bit(9)                   initial dcl 13-47
is_decimal_constant                    internal static bit(9)                   initial dcl 13-47
is_delimiter                           internal static bit(9)                   initial dcl 13-47
is_float_constant                      internal static bit(9)                   initial dcl 13-47
is_identifier                          internal static bit(9)                   initial dcl 13-47
is_imaginary_constant                  internal static bit(9)                   initial dcl 13-47
is_integral_constant                   internal static bit(9)                   initial dcl 13-47
is_isub                                internal static bit(9)                   initial dcl 13-47
isub                                   internal static bit(9)                   initial dcl 13-3
join                                   internal static bit(9)                   initial dcl 18-8
jump                                   internal static bit(9)                   initial dcl 18-8
jump_false                             internal static bit(9)                   initial dcl 18-8
jump_if_eq                             internal static bit(9)                   initial dcl 18-8
jump_if_ge                             internal static bit(9)                   initial dcl 18-8
jump_if_gt                             internal static bit(9)                   initial dcl 18-8
jump_if_le                             internal static bit(9)                   initial dcl 18-8
jump_if_lt                             internal static bit(9)                   initial dcl 18-8
jump_if_ne                             internal static bit(9)                   initial dcl 18-8
jump_true                              internal static bit(9)                   initial dcl 18-8
l_parn                                 internal static bit(9)                   initial dcl 18-8
label_array_element_node               internal static bit(9)                   initial dcl 14-5
label_node                             internal static bit(9)                   initial dcl 14-5
le                                     internal static bit(9)                   initial dcl 13-3
left_parn                              internal static bit(9)                   initial dcl 13-3
length_fun                             internal static bit(9)                   initial dcl 18-8
less_or_equal                          internal static bit(9)                   initial dcl 18-8
less_than                              internal static bit(9)                   initial dcl 18-8
line_format                            internal static bit(9)                   initial dcl 18-8
list_node                              internal static bit(9)                   initial dcl 14-5
locate_file                            internal static bit(9)                   initial dcl 18-8
locate_statement                       internal static bit(9)                   initial dcl 16-3
lock_file                              internal static bit(9)                   initial dcl 18-8
lock_fun                               internal static bit(9)                   initial dcl 18-8
lock_statement                         internal static bit(9)                   initial dcl 16-3
log10_fun                              internal static bit(9)                   initial dcl 18-8
log2_fun                               internal static bit(9)                   initial dcl 18-8
log_fun                                internal static bit(9)                   initial dcl 18-8
lookup                          000000 constant        entry                    external dcl 1-153
loop                                   internal static bit(9)                   initial dcl 18-8
lt                                     internal static bit(9)                   initial dcl 13-3
machine_state_node                     internal static bit(9)                   initial dcl 14-5
make_desc                              internal static bit(9)                   initial dcl 18-8
make_non_quick                  000000 constant        entry                    external dcl 1-162
match_arguments                 000000 constant        entry                    external dcl 1-166
max_fun                                internal static bit(9)                   initial dcl 18-8
max_list_elements                      internal static fixed bin(17,0)          initial dcl 9-12
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 17-15
merge_attributes                000000 constant        entry                    external dcl 2-355
min_fun                                internal static bit(9)                   initial dcl 18-8
minus                                  internal static bit(9)                   initial dcl 13-3
mod_bit                                internal static bit(9)                   initial dcl 18-8
mod_byte                               internal static bit(9)                   initial dcl 18-8
mod_fun                                internal static bit(9)                   initial dcl 18-8
mod_half                               internal static bit(9)                   initial dcl 18-8
mod_word                               internal static bit(9)                   initial dcl 18-8
mult                                   internal static bit(9)                   initial dcl 18-8
ne                                     internal static bit(9)                   initial dcl 13-3
negate                                 internal static bit(9)                   initial dcl 18-8
ngt                                    internal static bit(9)                   initial dcl 13-3
nlt                                    internal static bit(9)                   initial dcl 13-3
no_token                               internal static bit(9)                   initial dcl 13-3
nop                                    internal static bit(9)                   initial dcl 18-8
not                                    internal static bit(9)                   initial dcl 13-3
not_bits                               internal static bit(9)                   initial dcl 18-8
not_equal                              internal static bit(9)                   initial dcl 18-8
off_fun                                internal static bit(9)                   initial dcl 18-8
offset_adder                    000000 constant        entry                    external dcl 1-172
on_statement                           internal static bit(9)                   initial dcl 16-3
open_file                              internal static bit(9)                   initial dcl 18-8
open_statement                         internal static bit(9)                   initial dcl 16-3
operator_semantics              000000 constant        entry                    external dcl 1-184
optimizer                       000000 constant        entry                    external dcl 2-361
or                                     internal static bit(9)                   initial dcl 13-3
or_bits                                internal static bit(9)                   initial dcl 18-8
pack                                   internal static bit(9)                   initial dcl 18-8
page_format                            internal static bit(9)                   initial dcl 18-8
param_desc_ptr                         internal static bit(9)                   initial dcl 18-8
param_ptr                              internal static bit(9)                   initial dcl 18-8
parse_error                     000000 constant        entry                    external dcl 2-364
parse_error$no_text             000000 constant        entry                    external dcl 2-368
percent                                internal static bit(9)                   initial dcl 13-3
period                                 internal static bit(9)                   initial dcl 13-3
picture_char_type                      internal static fixed bin(8,0)           initial packed unaligned dcl 21-20
picture_complexfix_type                internal static fixed bin(8,0)           initial packed unaligned dcl 21-20
picture_complexflo_type                internal static fixed bin(8,0)           initial packed unaligned dcl 21-20
picture_format                         internal static bit(9)                   initial dcl 18-8
picture_realfix_type                   internal static fixed bin(8,0)           initial packed unaligned dcl 21-20
picture_realflo_type                   internal static fixed bin(8,0)           initial packed unaligned dcl 21-20
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 2-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 2-372
pl1_mod_fun                            internal static bit(9)                   initial dcl 18-8
pl1_print$for_lex               000000 constant        entry                    external dcl 2-418
pl1_print$non_varying           000000 constant        entry                    external dcl 2-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 2-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 2-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 2-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 2-414
pl1_print$varying               000000 constant        entry                    external dcl 2-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 2-395
plus                                   internal static bit(9)                   initial dcl 13-3
prefix_plus                            internal static bit(9)                   initial dcl 18-8
procedure_statement                    internal static bit(9)                   initial dcl 16-3
propagate_bit                   000000 constant        entry                    external dcl 1-192
ptr_fun                                internal static bit(9)                   initial dcl 18-8
put_control                            internal static bit(9)                   initial dcl 18-8
put_data_trans                         internal static bit(9)                   initial dcl 18-8
put_edit_trans                         internal static bit(9)                   initial dcl 18-8
put_field                              internal static bit(9)                   initial dcl 18-8
put_field_chk                          internal static bit(9)                   initial dcl 18-8
put_file                               internal static bit(9)                   initial dcl 18-8
put_list_trans                         internal static bit(9)                   initial dcl 18-8
put_statement                          internal static bit(9)                   initial dcl 16-3
put_string                             internal static bit(9)                   initial dcl 18-8
r_format                               internal static bit(9)                   initial dcl 18-8
r_parn                                 internal static bit(9)                   initial dcl 18-8
range_ck                               internal static bit(9)                   initial dcl 18-8
rank_fun                               internal static bit(9)                   initial dcl 18-8
read_file                              internal static bit(9)                   initial dcl 18-8
read_statement                         internal static bit(9)                   initial dcl 16-3
real_fun                               internal static bit(9)                   initial dcl 18-8
record_io                              internal static bit(9)                   initial dcl 18-8
refer                                  internal static bit(9)                   initial dcl 18-8
refer_extent                    000000 constant        entry                    external dcl 2-426
rel_fun                                internal static bit(9)                   initial dcl 18-8
repeat_fun                             internal static bit(9)                   initial dcl 18-8
reserve$clear                   000000 constant        entry                    external dcl 2-430
reserve$declare_lib             000000 constant        entry                    external dcl 2-434
reserve$read_lib                000000 constant        entry                    external dcl 2-439
return_bits                            internal static bit(9)                   initial dcl 18-8
return_statement                       internal static bit(9)                   initial dcl 16-3
return_string                          internal static bit(9)                   initial dcl 18-8
return_value                           internal static bit(9)                   initial dcl 18-8
return_words                           internal static bit(9)                   initial dcl 18-8
reverse_fun                            internal static bit(9)                   initial dcl 18-8
revert_on                              internal static bit(9)                   initial dcl 18-8
revert_statement                       internal static bit(9)                   initial dcl 16-3
rewrite_file                           internal static bit(9)                   initial dcl 18-8
rewrite_statement                      internal static bit(9)                   initial dcl 16-3
right_parn                             internal static bit(9)                   initial dcl 13-3
round_fun                              internal static bit(9)                   initial dcl 18-8
search_fun                             internal static bit(9)                   initial dcl 18-8
search_rev_fun                         internal static bit(9)                   initial dcl 18-8
segno_fun                              internal static bit(9)                   initial dcl 18-8
semantic_translator             000000 constant        entry                    external dcl 2-444
semantic_translator$call_es     000000 constant        entry                    external dcl 1-196
semantic_translator$error       000000 constant        entry                    external dcl 2-450
semi_colon                             internal static bit(9)                   initial dcl 13-3
setbitno_fun                           internal static bit(9)                   initial dcl 18-8
setcharno_fun                          internal static bit(9)                   initial dcl 18-8
sf_par_node                            internal static bit(9)                   initial dcl 14-5
share_expression                000000 constant        entry                    external dcl 2-454
sign_fun                               internal static bit(9)                   initial dcl 18-8
signal_on                              internal static bit(9)                   initial dcl 18-8
signal_statement                       internal static bit(9)                   initial dcl 16-3
simplify_expression             000000 constant        entry                    external dcl 1-205
simplify_offset                 000000 constant        entry                    external dcl 1-212
sin_fun                                internal static bit(9)                   initial dcl 18-8
sind_fun                               internal static bit(9)                   initial dcl 18-8
skip_format                            internal static bit(9)                   initial dcl 18-8
slash                                  internal static bit(9)                   initial dcl 13-3
source_node                            internal static bit(9)                   initial dcl 14-5
sqrt_fun                               internal static bit(9)                   initial dcl 18-8
stack_ptr                              internal static bit(9)                   initial dcl 18-8
stackbaseptr_fun                       internal static bit(9)                   initial dcl 18-8
stackframeptr_fun                      internal static bit(9)                   initial dcl 18-8
stacq_fun                              internal static bit(9)                   initial dcl 18-8
statement_node                         internal static bit(9)                   initial dcl 14-5
std_entry                              internal static bit(9)                   initial dcl 18-8
std_return                             internal static bit(9)                   initial dcl 18-8
stop                                   internal static bit(9)                   initial dcl 18-8
stop_statement                         internal static bit(9)                   initial dcl 16-3
stream_prep                            internal static bit(9)                   initial dcl 18-8
sub                                    internal static bit(9)                   initial dcl 18-8
subscripter                     000000 constant        entry                    external dcl 1-216
symbol_node                            internal static bit(9)                   initial dcl 14-5
system_on_unit                         internal static bit(9)                   initial dcl 16-3
tan_fun                                internal static bit(9)                   initial dcl 18-8
tand_fun                               internal static bit(9)                   initial dcl 18-8
temporary_node                         internal static bit(9)                   initial dcl 14-5
terminate_trans                        internal static bit(9)                   initial dcl 18-8
token_to_binary                 000000 constant        entry                    external dcl 2-459
translate_fun                          internal static bit(9)                   initial dcl 18-8
trunc_fun                              internal static bit(9)                   initial dcl 18-8
unknown_statement                      internal static bit(9)                   initial dcl 16-3
unlock_file                            internal static bit(9)                   initial dcl 18-8
unlock_statement                       internal static bit(9)                   initial dcl 16-3
unpack                                 internal static bit(9)                   initial dcl 18-8
validate                        000000 constant        entry                    external dcl 1-225
vclock_fun                             internal static bit(9)                   initial dcl 18-8
verify_fun                             internal static bit(9)                   initial dcl 18-8
verify_ltrim_fun                       internal static bit(9)                   initial dcl 18-8
verify_rev_fun                         internal static bit(9)                   initial dcl 18-8
verify_rtrim_fun                       internal static bit(9)                   initial dcl 18-8
wait_statement                         internal static bit(9)                   initial dcl 16-3
word_to_mod2                           internal static bit(9)                   initial dcl 18-8
word_to_mod4                           internal static bit(9)                   initial dcl 18-8
word_to_mod8                           internal static bit(9)                   initial dcl 18-8
wordno_fun                             internal static bit(9)                   initial dcl 18-8
write_file                             internal static bit(9)                   initial dcl 18-8
write_statement                        internal static bit(9)                   initial dcl 16-3
x_format                               internal static bit(9)                   initial dcl 18-8
xor_bits                               internal static bit(9)                   initial dcl 18-8

NAMES DECLARED BY EXPLICIT CONTEXT.
begin                           000605 constant        label                    dcl 174 in procedure "compare_generic"
begin                           000043 constant        label                    dcl 64 in procedure "generic_selector"
by_value                        000234 constant        label                    dcl 108 ref 82 88
compare_generic                 000600 constant        entry                    internal dcl 164 ref 134 224
fail                            001023 constant        label                    dcl 239 ref 181 184 187 194 196 201 203 208 212 222
                                                                                  224 229
generic_selector                000024 constant        entry                    external dcl 11
hit                             000451 constant        label                    dcl 149 ref 138
next                            000341 constant        label                    dcl 120 ref 101
try_another                     000431 constant        label                    dcl 140 ref 132 134
undo                            000215 constant        label                    dcl 103 ref 95 97

NAME DECLARED BY CONTEXT OR IMPLICATION.
addr                                                   builtin function         ref 179

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1136        1160    1030        1146
Length      1730    1030        22         534     105           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
generic_selector                    118 external procedure  is an external procedure.  
compare_generic                      90 internal procedure  calls itself recursively.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
compare_generic          000100 a                           compare_generic
                         000102 g                           compare_generic
                         000104 as                          compare_generic
                         000106 gs                          compare_generic
                         000110 genbits                     compare_generic
                         000112 argmask                     compare_generic
                         000114 asize                       compare_generic
                         000115 ascale                      compare_generic
generic_selector         000100 arg_list                    generic_selector
                         000102 a                           generic_selector
                         000104 alt                         generic_selector
                         000106 g                           generic_selector
                         000110 lp                          generic_selector
                         000112 old                         generic_selector
                         000114 p                           generic_selector
                         000116 q                           generic_selector
                         000120 r                           generic_selector
                         000122 st                          generic_selector
                         000124 asym                        generic_selector
                         000124 i                           generic_selector
                         000125 j                           generic_selector
                         000126 n_args                      generic_selector
                         000127 leave_it                    generic_selector
                         000130 this_context                generic_selector

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        call_int_this       call_int_other      return_mac          alloc_auto_adj      ext_entry
int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
copy_expression               create_operator               create_symbol                 expression_semantics
semantic_translator$abort

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000016        19 000031        64 000043        66 000046        67 000050        68 000052        70 000056
     71 000057        72 000063        73 000064        74 000065        76 000070        77 000072        78 000074
     80 000101        82 000111        84 000112        87 000121        88 000123        90 000124        91 000136
     94 000153        95 000173        97 000177        99 000204       100 000206       101 000214       103 000215
    104 000224       105 000227       106 000231       108 000234       110 000251       111 000271       112 000274
    113 000277       114 000302       115 000322       116 000324       118 000333       120 000341       123 000346
    127 000351       129 000360       130 000361       131 000370       132 000371       134 000374       137 000422
    138 000426       140 000431       145 000435       149 000451       151 000466       152 000471       153 000506
    154 000520       155 000547       156 000551       157 000571       158 000574       164 000577       174 000605
    176 000611       178 000614       179 000617       180 000621       181 000625       184 000627       187 000635
    191 000643       193 000646       194 000650       196 000652       198 000657       200 000662       201 000666
    203 000673       208 000701       212 000717       217 000745       219 000751       220 000753       221 000756
    222 000762       224 000766       226 001004       227 001007       228 001012       229 001013       235 001017
    239 001023


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
