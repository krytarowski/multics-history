	COMPILATION LISTING OF SEGMENT prwrd_
	Compiled by: Multics PL/I Compiler, Release 33e, of October 6, 1992
	Compiled at: CGI                             
	Compiled on: 2000-04-18_1135.76_Tue_mdt
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1988                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 
       14 
       15 /****^  HISTORY COMMENTS:
       16*  1) change(86-10-01,JRGray), approve(86-10-01,MCR7507),
       17*     audit(86-10-27,RWaters), install(86-11-12,MR12.0-1202):
       18*     Modified to support error severity, block joined to the definition
       19*     section, and to remove pads from the listing.
       20*                                                   END HISTORY COMMENTS */
       21 
       22 
       23 prwrd_$prwrd_: procedure (pc, word, how);
       24 
       25 /*
       26*   Modified 4/29/81 by EBush to make A error fatal and B non-fatal.
       27*   Modified 2/5/81 by EBush to add A error.
       28*   Modified 3/25/77 by Greenberg for iox_ and no line buffer.
       29*   Modified 3/23/77 by Noel I. Morris for macro processing.
       30*   modified in 01/74 by E Stone to convert to v2 and to change check for end of listing seg
       31*   modified on 11/28/72 at 20:49:00 by R F Mabee.
       32*   Another line numbering change and 36-bit values for equ, 28 November 1972, R F Mabee.
       33*   Minor change to line numbering, 23 July 1972, R F Mabee.
       34*   Added B and C error codes, 16 April 1972, R F Mabee.
       35*   by RHG on 3 June 1971 to get binlin right even if no list
       36*   by R H Campbell 15 Nov 1970
       37*   */
       38 	relwrd = ""b;
       39 	go to pr_common;
       40 
       41 prwrd_$source_only:
       42 	entry;
       43 	source_only_flag = "1"b;
       44 	go to common;
       45 
       46 prwrd_$prwrd2:
       47 	entry (pc, word, how, relarg);
       48 	relwrd = relarg;
       49 pr_common:
       50 	source_only_flag = ""b;
       51 	go to common;				/* Go to it. */
       52 						/*  */
       53 dcl  prlst_$new_list_seg entry;
       54 dcl  eb_data_$ib6 external fixed bin;			/* character (4) */
       55 dcl  eb_data_$macro_linect external fixed bin;
       56 dcl  eb_data_$listing_max_length external fixed bin (35);
       57 dcl  eb_data_$nlpads external character (4);
       58 dcl  eb_data_$macro_depth fixed bin external,
       59      eb_data_$include_control bit (110) aligned external;
       60 dcl  eb_data_$include_number fixed bin external;
       61 dcl  eb_data_$macro_listing_control bit (36) aligned external;
       62 dcl  err_count fixed bin;
       63 dcl  source_had_been_printed bit (1) aligned;
       64 dcl  flag_character char (18) static options (constant) init
       65     ("EFMNOPRSTUXBCDA567");
       66 dcl  error_sv(18) fixed bin int static options(constant) init
       67     (3, 1, 3, 2, 3, 3, 1, 2, 2, 3, 0, 1, 0, 3, 3, 0, 0, 1);
       68 dcl  how fixed bin (35);				/* character (4) aligned */
       69 dcl  i fixed bin;
       70 dcl  hdrlen fixed bin;
       71 dcl  source_charray char (1) unal based (source) dim (srclen);
       72 dcl  source_line char (linelen) based (addr (source_charray (begin_line + 1)));
       73 dcl  linelen fixed bin;
       74 dcl  padlen fixed bin;
       75 dcl  iox_$user_output ptr ext;
       76 dcl  iox_$put_chars entry (ptr, ptr, fixed bin, fixed bin (35));
       77 dcl  prwrd_util_$pc entry (char (40), bit (36) aligned);
       78 dcl  prwrd_util_$inst entry (char (40), bit (36) aligned, fixed bin (35));
       79 dcl  j fixed bin;
       80 dcl  listing_buf char (40);
       81 dcl  (strstart, strlen, strmaxlen) fixed bin(21);
       82 dcl  listing_segment char(strlen) based(list);
       83 dcl  based_listing_buf char (hdrlen) based (addr (listing_buf));
       84 dcl 1 listline aligned based (addrel (list, lstlen)),	/* to listing */
       85     2 chars char (linelen) unal,
       86     2 pads char (padlen) unal;
       87 
       88 dcl  listing_buf_pointer pointer;
       89 dcl  NL static character (1) initial ("
       90 ");						/* New line. */
       91 dcl  num pic "zzzzzzz9";
       92 dcl  zzzz9 pic "zzzz9";
       93 dcl  pc bit (36) aligned;				/* fixed bin (35) */
       94 dcl  relarg bit (36) aligned;
       95 dcl  reloc_character char (32) static options (constant) init
       96     ("a???????????????0123456789Ld???*");
       97 dcl  relwrd bit (36) aligned;
       98 dcl  source_only_flag bit (1) aligned;
       99 dcl  source_segment character (srclen) based (source) aligned;
      100 dcl  word bit (36) aligned;
      101 dcl (addr, addrel, bin, divide, index, length, ltrim, min, substr) builtin;
  1     1 
  1     2 
  1     3 
  1     4 	/*	include file for CONCOM */
  1     5 
  1     6 declare 1 eb_data_$concom ext aligned,
  1     7         2 (ap,	ab,	bp,	bb,	lp,	lb,	sp,	sb,
  1     8 		clunk,	clint,	clext,	clbas,	clstk,	clndx,	clmlc,	fdef,
  1     9 		fmul,	fphs,	fset,	frel,	fabs,	fbol,	fcom,	find,
  1    10 		flocrf,	fequrf,	fbolrf,	fsetrf,	fbasrf,	fsegrf,	fstkrf,	fndxrf,
  1    11 		fmlcrf,	onesev,	twosev,	thrsev,	forsev,	fivsev,	sixsev,	allsev,
  1    12 		symbas(8),mir,	mri,	mdu,	mdl,	mx0,	mx1,	mpc,	
  1    13 		mpci,	mfi,	mits,	mitb,	ixtern,	intern,	iassgn,	iserch,
  1    14 		ixvrvl,	ixvrvp,	invrvl,	invrvp,	ibvrvl,	ibvrvp,	iaccvl,	iacivl,
  1    15 		mcmpq,	mcmpx0,	mldaq,	mldq,	mldx0,	mnopdu,	mstcd,	mtra,
  1    16 		mtnc,	mtnz,	meabsp,	meapap,	meapbp,	meaplp,	meapsp,	mstpap,
  1    17 		mstpbp,	mstplp,	mstpsp,	i1542,	i642,	i3333,	i66,	ibb,
  1    18 		ibsp,	nullf,	smxer(2),	sentry(2),sretrn(2),	dzero(2) ) fixed bin (26) aligned ;
  1    19   
  1    20 	/* end of the include file for CONCOM */
      102 
  2     1 
  2     2 /* Last modified by EBush on 2/5/81 to add prnta */
  2     3 
  2     4 
  2     5  declare 1 eb_data_$erflgs ext aligned,
  2     6           2 flgvec (36) fixed bin  (17) aligned ;
  2     7   
  2     8   
  2     9   declare 1 eb_data_$erflgs_overlay ext aligned,	/* overlays the FLGVEC */
  2    10           2 (prnte, prntf, prntm, prntn, prnto, prntp,
  2    11   	 prntr, prnts, prntt, prntu, prntx, prntb,
  2    12   	 prntc, prntd, prnta, prnt5, prnt6, prnt7,
  2    13   	 tstsw(18)	) fixed bin (17) aligned ;
  2    14   
  2    15   
      103 
  3     1 
  3     2 
  3     3 
  3     4 	/* the include file LSTCOM */
  3     5 
  3     6 declare 1 eb_data_$lstcom ext aligned,
  3     7         2 tnolst fixed bin (17) ;
  3     8 
  3     9 
  3    10 	/* end of the include file LSTCOM */
  3    11 
      104 
  4     1 /* BEGIN INCLUDE FILE segnfo.incl.pl1 for alm  (see also segnfo.incl.alm) */
  4     2 
  4     3 
  4     4 /****^  HISTORY COMMENTS:
  4     5*  1) change(86-10-01,JRGray), approve(86-10-01,MCR7507),
  4     6*     audit(86-10-27,RWaters), install(86-11-12,MR12.0-1202):
  4     7*     Modified to keep a ptr to the list FCB. This is part of the fix that
  4     8*     removes PAD characters from the listing segment.
  4     9*                                                   END HISTORY COMMENTS */
  4    10 
  4    11 declare	1 eb_data_$segnfo	ext aligned,
  4    12 	  2 (text, source, list, list_fcb, scrtch) ptr aligned,
  4    13 	  2 (txtlen, srclen, lstlen) fixed bin (26) aligned;
  4    14 
  4    15 /* END INCLUDE FILE segnfo.incl.pl1 */
      105 
  5     1 /* Begin include file varcom.incl.pl1. */
  5     2 /* RHG added new variables 9/7/70. */
  5     3 /* RFM added new cells for new object segment format and first-reference trap, 27 March 1972. */
  5     4 /* RFM added include file stuff, then cross referencer stuff, 23 July 1972. */
  5     5 /* Last modified on 07/23/72 at 04:19:25 by R F Mabee. */
  5     6   
  5     7  declare	1 eb_data_$varcom external aligned,
  5     8 	  2 (brk(2),	nbrk(2),	sym(8),	dsym(8),old_locsym,	pc,	spc,	tpc,
  5     9 	   pclst,		p2pcl,	old_ndpcls,	tvorg,	tvcnt,	tvlth,	litorg,
  5    10 	   litc,		deforg,	defc,	defcnt,	stkc,	lnkc,	lnkno,
  5    11 	   litlst,	old_ndltls, lnklst,	old_ndlkls,	explst,	blklst,	namlst,
  5    12 	   trplst,	xdflst,	tvlst,	begin_line, tpass1,	tpass2,	tpostp,
  5    13 	   tinhib,	tmmode,	txonly,	tmm2,	txo2,	tprot,	tcall,
  5    14 	   tmvdef,	tpulnk,	tfatal,	calrho,	lreter,	passwd,	binlin,
  5    15 	   nboxes,   box(0:210),   myfil,	mynam,	myblk,	mylnk,	tpost1 ) fixed bin (26) ,
  5    16 	  2 source_printed bit(1) aligned,
  5    17 	  2 (ndpcls,	ndltls,	ndlkls,	ndtvls) ptr,
  5    18 	  2 (basno,	value,	admod,	b29,	iaddr,	symlnk ) fixed bin (26),
  5    19 	  2 (itxtmod, ilnkmod, entrieslc, include_file_list, include_index,
  5    20 	     first_ref_trap_proc_linkno, first_ref_trap_arg_linkno,
  5    21 	     text_section_length) fixed binary (26),
  5    22 	  2 (include_info_stack, include_name_list_base, include_name_list_top) pointer,
  5    23 	  2 symbol_tree_rel fixed binary (26);
  5    24 
  5    25 /* End of the include file varcom.incl.pl1. */
      106 
  6     1 /* Begin include file alm_options.incl.pl1.
  6     2*   This file defines the external cells used to pass options to the various modules of the assembler.
  6     3*   Created on 03/17/72 at 01:39:44 by R F Mabee.
  6     4*   Last modified on 07/23/72 at 22:02:34 by R F Mabee. */
  6     5 
  6     6  declare	1 eb_data_$alm_options external static aligned,
  6     7 	  2 tnewcall fixed binary,		/* Use new call/save/return operators. */
  6     8 	  2 tnewmachine fixed binary,		/* Use followon hardware instruction set. */
  6     9 	  2 tnewobject fixed binary,		/* Use new object segment format. */
  6    10 	  2 tcheckcompatibility fixed binary,	/* Check for instructions changed in followon. */
  6    11 	  2 tquietsw fixed binary,		/* Suppress online printout of error messages. */
  6    12 	  2 tfirstreftrap fixed binary,	/* A first reference trap procedure was given. */
  6    13 	  2 tnoxref fixed binary;		/* Zero if cross reference if to be produced. */
  6    14 
  6    15 /* End of include file alm_options.incl.pl1  */
      107 
      108 /*  */
      109 /* FIRST CLEAR THE LISTING BUFFER */
      110 common:	listing_buf = " ";				/* Blank out listing buffer header */
      111 						/* FIRST PRINT THE FLAGS IF ANY */
      112 	err_count = 0;
      113 	do i = 1 to 18;				/* Print out the error flags, if any. */
      114 	     if flgvec (i) ^= 0 then do;		/* Is this flag set? */
      115 		tfatal = max(tfatal, error_sv(i));	/* Severity of worst error. */
      116 		flgvec (i) = 0;			/* Clear the flag now that we are printing it. */
      117 		if err_count < 3 then do;		/* Do we have room for this flag? */
      118 		     substr (listing_buf, err_count + 1, 1) = substr (flag_character, i, 1); /* Yes, print it. */
      119 		     err_count = err_count + 1;
      120 		end;
      121 	     end;
      122 	end;
      123 
      124 	if err_count = 0 & tnolst ^= 0 then do;
      125 	     source_printed = "1"b;			/* Don't print if no list, no errors. */
      126 	     return;
      127 	end;
      128 
      129 	if (eb_data_$macro_depth > 0) & (err_count = 0) then do;
      130 	     if substr (eb_data_$macro_listing_control, 1, 1) then
      131 		source_printed = "1"b;
      132 	     if substr (eb_data_$macro_listing_control, 2, 1) then
      133 		return;
      134 	end;
      135 
      136 	if ^source_only_flag then do;
      137 
      138 /* NOW PRINT OUT THE PROGRAM COUNTER */
      139 	     if how ^= eb_data_$ib6 then
      140 		call prwrd_util_$pc (listing_buf, pc);
      141 
      142 /* CHECK IF LEFT HALF OF WORD IS BLANK */
      143 	     if how = ibb then;
      144 	     else if (how = eb_data_$ib6) then
      145 		if (substr (word, 1, 18) ^= "0"b) then
      146 		     call prwrd_util_$inst (listing_buf, word, (i66));
      147 		else call prwrd_util_$inst (listing_buf, word, how);
      148 	     else do;
      149 		substr (listing_buf, 13, 1) = substr (reloc_character, bin (substr (relwrd, 1, 18), 18) + 1, 1);
      150 		substr (listing_buf, 14, 1) = substr (reloc_character, bin (substr (relwrd, 19, 18), 18) + 1, 1);
      151 		call prwrd_util_$inst (listing_buf, word, how);
      152 	     end;
      153 	end;
      154 	else if eb_data_$macro_linect > 0 then do;	/* List macro def line */
      155 	     zzzz9 = eb_data_$macro_linect;
      156 	     substr (listing_buf, 27, 5) = zzzz9;
      157 	end;
      158 
      159 /* NOW ADD THE SOURCE IF IT HAS NOT ALREADY BEEN PRINTED */
      160 	source_had_been_printed = source_printed;
      161 	if tquietsw ^= 0 then err_count = 0;		/* Force error count zero in quiet mode. */
      162 	if source_printed & err_count = 0 then do;	/* Only octal word to print. */
      163 	     substr (listing_buf, 32, 1) = NL;		/* Append a new-line character. */
      164 	     hdrlen = 32;
      165 	end;
      166 	else do;
      167 	     hdrlen = 40;
      168 	     if tpostp = 0 then do;
      169 
      170 		num = binlin;
      171 		j = length (ltrim (num));
      172 		i = 39 - j;
      173 		substr (listing_buf, i, j) = ltrim (num);
      174 
      175 		if include_index > 0 then do;		/* Insert include file number into listing. */
      176 		     num = eb_data_$include_number;
      177 		     j = length (ltrim (num));
      178 		     i = i - 1;
      179 		     substr (listing_buf, i, 1) = "-";
      180 		     i = i - j;
      181 		     substr (listing_buf, i, j) = ltrim (num);
      182 		end;
      183 
      184 	     end;
      185 	     linelen = index (substr (source_segment, begin_line + 1), NL) - 1; /* Find last character on this line. */
      186 	     if linelen < 0 then linelen = srclen - begin_line;
      187 	     if err_count ^= 0 & tquietsw = 0 then do;	/* Output problems to iox_ */
      188 		call iox_$put_chars (iox_$user_output, addr (listing_buf), hdrlen, (0));
      189 		call iox_$put_chars (iox_$user_output, addr (source_line), length (source_line)+1, (0));
      190 	     end;
      191 
      192 	     if source_had_been_printed then
      193 		substr (listing_buf, 40, 1) = NL;
      194 	     source_only_flag = "0"b;			/* make sure we print. */
      195 	     source_printed = "1"b;
      196 	     if substr (eb_data_$include_control, 1, 1) | source_had_been_printed then
      197 		substr (listing_buf, 33, 6) = "";	/* Greenberg doesn't like this. */
      198 	end;
      199 	if source_only_flag then return;
      200 	if tnolst ^= 0 then return;			/* As you like it, mister. */
      201 
      202 	strstart = lstlen + 1;
      203 	strmaxlen = 4*eb_data_$listing_max_length - lstlen;
      204 	if hdrlen > strmaxlen then do;
      205 		lstlen = lstlen + strmaxlen;
      206 		substr(listing_segment, strstart, strmaxlen) = substr(listing_buf, 1, strmaxlen);
      207 		call prlst_$new_list_seg;
      208 		lstlen = hdrlen - strmaxlen;
      209 		substr(listing_segment, 1, lstlen) = substr(listing_buf, strmaxlen+1, lstlen);
      210 	  end;
      211 	else do;
      212 	     lstlen = lstlen + hdrlen;
      213 	     substr(listing_segment, strstart, hdrlen) = based_listing_buf;
      214 	  end;
      215 
      216 	if source_had_been_printed then return;		/* detail line */
      217 
      218 	strstart = lstlen + 1;
      219 	strlen = length(source_line) + 1;
      220 	strmaxlen = 4*eb_data_$listing_max_length - lstlen;
      221 	if strlen > strmaxlen then do;
      222 		lstlen = lstlen + strmaxlen;
      223 		substr(listing_segment, strstart, strmaxlen) = substr(source_line, 1, strmaxlen);
      224 		call prlst_$new_list_seg;
      225 		lstlen = strlen - strmaxlen;
      226 		substr(listing_segment, 1, lstlen) = substr(source_line || NL, strmaxlen+1, lstlen);
      227 		return;
      228 	  end;
      229 	lstlen = lstlen + strlen;
      230 	substr(listing_segment, strstart, strlen) = source_line || NL;
      231 	return;
      232 
      233 end prwrd_$prwrd_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/18/00  1135.7  prwrd_.pl1                        >udd>sm>ds>w>ml>prwrd_.pl1
102          1    10/21/74  1343.0  concom.incl.pl1                   >ldd>incl>concom.incl.pl1
103          2    07/17/81  2011.5  erflgs.incl.pl1                   >ldd>incl>erflgs.incl.pl1
104          3    05/06/74  1842.2  lstcom.incl.pl1                   >ldd>incl>lstcom.incl.pl1
105          4    11/12/86  1203.0  segnfo.incl.pl1                   >ldd>incl>segnfo.incl.pl1
106          5    10/21/74  1342.9  varcom.incl.pl1                   >ldd>incl>varcom.incl.pl1
107          6    05/06/74  1840.2  alm_options.incl.pl1              >ldd>incl>alm_options.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
NL                              001000 constant        char(1)                  initial packed unaligned dcl 89 ref 163 185 192 226
                                                                                  230
addr                                                   builtin function         dcl 101 ref 188 188 189 189 189 189 189 213 219 223
                                                                                  226 230
based_listing_buf                      based           char                     packed unaligned dcl 83 ref 213
begin_line               60     000050 external static fixed bin(26,0)          level 2 dcl 5-7 ref 185 186 189 189 189 219 223 226
                                                                                  230
bin                                                    builtin function         dcl 101 ref 149 150
binlin                  101     000050 external static fixed bin(26,0)          level 2 dcl 5-7 ref 170
eb_data_$alm_options            000052 external static structure                level 1 dcl 6-6
eb_data_$concom                 000040 external static structure                level 1 dcl 1-6
eb_data_$erflgs                 000042 external static structure                level 1 dcl 2-5
eb_data_$ib6                    000012 external static fixed bin(17,0)          dcl 54 ref 139 144
eb_data_$include_control        000022 external static bit(110)                 dcl 58 ref 196
eb_data_$include_number         000024 external static fixed bin(17,0)          dcl 60 ref 176
eb_data_$listing_max_length     000016 external static fixed bin(35,0)          dcl 56 ref 203 220
eb_data_$lstcom                 000044 external static structure                level 1 dcl 3-6
eb_data_$macro_depth            000020 external static fixed bin(17,0)          dcl 58 ref 129
eb_data_$macro_linect           000014 external static fixed bin(17,0)          dcl 55 ref 154 155
eb_data_$macro_listing_control  000026 external static bit(36)                  dcl 61 ref 130 132
eb_data_$segnfo                 000046 external static structure                level 1 dcl 4-11
eb_data_$varcom                 000050 external static structure                level 1 dcl 5-7
err_count                       000100 automatic       fixed bin(17,0)          dcl 62 set ref 112* 117 118 119* 119 124 129 161*
                                                                                  162 187
error_sv                        000010 constant        fixed bin(17,0)          initial array dcl 66 ref 115
flag_character                  000032 constant        char(18)                 initial packed unaligned dcl 64 ref 118
flgvec                          000042 external static fixed bin(17,0)          array level 2 dcl 2-5 set ref 114 116*
hdrlen                          000103 automatic       fixed bin(17,0)          dcl 70 set ref 164* 167* 188* 204 208 212 213 213
how                                    parameter       fixed bin(35,0)          dcl 68 set ref 23 46 139 143 144 147* 151*
i                               000102 automatic       fixed bin(17,0)          dcl 69 set ref 113* 114 115 116 118* 172* 173 178*
                                                                                  178 179 180* 180 181
i66                     135     000040 external static fixed bin(26,0)          level 2 dcl 1-6 ref 144
ibb                     136     000040 external static fixed bin(26,0)          level 2 dcl 1-6 ref 143
include_index           456     000050 external static fixed bin(26,0)          level 2 dcl 5-7 ref 175
index                                                  builtin function         dcl 101 ref 185
iox_$put_chars                  000032 constant        entry                    external dcl 76 ref 188 189
iox_$user_output                000030 external static pointer                  dcl 75 set ref 188* 189*
j                               000105 automatic       fixed bin(17,0)          dcl 79 set ref 171* 172 173 177* 180 181
length                                                 builtin function         dcl 101 ref 171 177 189 219
linelen                         000104 automatic       fixed bin(17,0)          dcl 73 set ref 185* 186 186* 189 189 189 219 223 226
                                                                                  230
list                      4     000046 external static pointer                  level 2 dcl 4-11 ref 206 209 213 223 226 230
listing_buf                     000106 automatic       char(40)                 packed unaligned dcl 80 set ref 110* 118* 139* 144*
                                                                                  147* 149* 150* 151* 156* 163* 173* 179* 181* 188
                                                                                  188 192* 196* 206 209 213
listing_segment                        based           char                     packed unaligned dcl 82 set ref 206* 209* 213* 223*
                                                                                  226* 230*
lstlen                   14     000046 external static fixed bin(26,0)          level 2 dcl 4-11 set ref 202 203 205* 205 208* 209
                                                                                  209 212* 212 218 220 222* 222 225* 226 226 229*
                                                                                  229
ltrim                                                  builtin function         dcl 101 ref 171 173 177 181
num                             000124 automatic       picture(8)               packed unaligned dcl 91 set ref 170* 171 173 176*
                                                                                  177 181
pc                                     parameter       bit(36)                  dcl 93 set ref 23 46 139*
prlst_$new_list_seg             000010 constant        entry                    external dcl 53 ref 207 224
prwrd_util_$inst                000036 constant        entry                    external dcl 78 ref 144 147 151
prwrd_util_$pc                  000034 constant        entry                    external dcl 77 ref 139
relarg                                 parameter       bit(36)                  dcl 94 ref 46 48
reloc_character                 000000 constant        char(32)                 initial packed unaligned dcl 95 ref 149 150
relwrd                          000130 automatic       bit(36)                  dcl 97 set ref 38* 48* 149 150
source                    2     000046 external static pointer                  level 2 dcl 4-11 ref 185 189 189 189 219 223 226 230
source_charray                         based           char(1)                  array packed unaligned dcl 71 set ref 189 189 189
                                                                                  219 223 226 230
source_had_been_printed         000101 automatic       bit(1)                   dcl 63 set ref 160* 192 196 216
source_line                            based           char                     packed unaligned dcl 72 set ref 189 189 189 219 223
                                                                                  226 230
source_only_flag                000131 automatic       bit(1)                   dcl 98 set ref 43* 49* 136 194* 199
source_printed          433     000050 external static bit(1)                   level 2 dcl 5-7 set ref 125* 130* 160 162 195*
source_segment                         based           char                     dcl 99 ref 185
srclen                   13     000046 external static fixed bin(26,0)          level 2 dcl 4-11 ref 185 186
strlen                          000121 automatic       fixed bin(21,0)          dcl 81 set ref 206 209 213 219* 221 223 225 226 229
                                                                                  230 230
strmaxlen                       000122 automatic       fixed bin(21,0)          dcl 81 set ref 203* 204 205 206 206 208 209 220* 221
                                                                                  222 223 223 225 226
strstart                        000120 automatic       fixed bin(21,0)          dcl 81 set ref 202* 206 213 218* 223 230
substr                                                 builtin function         dcl 101 set ref 118* 118 130 132 144 149* 149 149
                                                                                  150* 150 150 156* 163* 173* 179* 181* 185 192* 196
                                                                                  196* 206* 206 209* 209 213* 223* 223 226* 226 230*
tfatal                   75     000050 external static fixed bin(26,0)          level 2 dcl 5-7 set ref 115* 115
tnolst                          000044 external static fixed bin(17,0)          level 2 dcl 3-6 ref 124 200
tpostp                   63     000050 external static fixed bin(26,0)          level 2 dcl 5-7 ref 168
tquietsw                  4     000052 external static fixed bin(17,0)          level 2 dcl 6-6 ref 161 187
word                                   parameter       bit(36)                  dcl 100 set ref 23 46 144 144* 147* 151*
zzzz9                           000126 automatic       picture(5)               packed unaligned dcl 92 set ref 155* 156

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
addrel                                                 builtin function         dcl 101
divide                                                 builtin function         dcl 101
eb_data_$erflgs_overlay                external static structure                level 1 dcl 2-9
eb_data_$nlpads                        external static char(4)                  packed unaligned dcl 57
listing_buf_pointer                    automatic       pointer                  dcl 88
listline                               based           structure                level 1 dcl 84
min                                                    builtin function         dcl 101
padlen                                 automatic       fixed bin(17,0)          dcl 74

NAMES DECLARED BY EXPLICIT CONTEXT.
common                          000107 constant        label                    dcl 110 ref 44 51
pr_common                       000105 constant        label                    dcl 49 ref 39
prwrd_$prwrd2                   000075 constant        entry                    external dcl 46
prwrd_$prwrd_                   000050 constant        entry                    external dcl 23
prwrd_$source_only              000060 constant        entry                    external dcl 41

NAME DECLARED BY CONTEXT OR IMPLICATION.
max                                                    builtin function         ref 115

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1252        1326    1001        1262
Length      1642    1001        54         300     251           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
prwrd_$prwrd_                       120 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
prwrd_$prwrd_            000100 err_count                   prwrd_$prwrd_
                         000101 source_had_been_printed     prwrd_$prwrd_
                         000102 i                           prwrd_$prwrd_
                         000103 hdrlen                      prwrd_$prwrd_
                         000104 linelen                     prwrd_$prwrd_
                         000105 j                           prwrd_$prwrd_
                         000106 listing_buf                 prwrd_$prwrd_
                         000120 strstart                    prwrd_$prwrd_
                         000121 strlen                      prwrd_$prwrd_
                         000122 strmaxlen                   prwrd_$prwrd_
                         000124 num                         prwrd_$prwrd_
                         000126 zzzz9                       prwrd_$prwrd_
                         000130 relwrd                      prwrd_$prwrd_
                         000131 source_only_flag            prwrd_$prwrd_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_e_as              alloc_char_temp     call_ext_out        return_mac          shorten_stack       ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
iox_$put_chars                prlst_$new_list_seg           prwrd_util_$inst              prwrd_util_$pc

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
eb_data_$alm_options          eb_data_$concom               eb_data_$erflgs               eb_data_$ib6
eb_data_$include_control      eb_data_$include_number       eb_data_$listing_max_length   eb_data_$lstcom
eb_data_$macro_depth          eb_data_$macro_linect         eb_data_$macro_listing_control
eb_data_$segnfo               eb_data_$varcom               iox_$user_output




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     23 000044        38 000055        39 000056        41 000057        43 000065        44 000067        46 000070
     48 000102        49 000105        51 000106       110 000107       112 000112       113 000113       114 000121
    115 000125       116 000134       117 000135       118 000140       119 000143       122 000144       124 000146
    125 000155       126 000160       129 000161       130 000166       132 000174       136 000177       139 000201
    143 000215       144 000224       147 000246       149 000261       150 000266       151 000273       153 000305
    154 000306       155 000310       156 000321       160 000325       161 000331       162 000335       163 000341
    164 000343       165 000345       167 000346       168 000350       170 000352       171 000361       172 000373
    173 000376       175 000406       176 000410       177 000420       178 000432       179 000434       180 000440
    181 000442       185 000452       186 000467       187 000473       188 000477       189 000516       192 000545
    194 000551       195 000552       196 000556       199 000566       200 000570       202 000572       203 000576
    204 000604       205 000606       206 000607       207 000615       208 000621       209 000626       210 000633
    212 000634       213 000636       216 000643       218 000645       219 000651       220 000654       221 000662
    222 000664       223 000665       224 000701       225 000705       226 000712       227 000736       229 000740
    230 000742       231 000772


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
