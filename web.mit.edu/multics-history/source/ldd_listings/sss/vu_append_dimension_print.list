	COMPILATION LISTING OF SEGMENT vu_append_dimension_print
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 02/16/84  1305.0 mst Thu
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 /* format: style2,ind3 */
        7 vu_append_dimension_print:
        8 append_dimension_print:
        9    proc (p_work_area_ptr, p_free_old_print_vector_array, p_dimension_name, p_descriptor_ptr, p_print_vector_array_ptr,
       10       p_dimension_identifier, p_code);
       11 
       12 /* DESCRIPTION:
       13*          This module adds a new dimension to an existing print_vector_array.
       14**/
       15 
       16 /* HISTORY:
       17*Written by Lindsey Spratt, 06/01/82.
       18*Modified:
       19*06/30/83 by Lindsey L. Spratt:  Due to an apparent bug in the PL/1 compiler,
       20*            an assignment of structure element of an array to a new copy of
       21*            the array was not working (off by a word, or so).  This assignment
       22*            was replaced with a set of explicit assignments, one for each
       23*            element of the structure.
       24**/
       25 
       26 /* START OF DECLARATIONS */
       27 /* Parameter */
       28 
       29       dcl	    p_work_area_ptr	       ptr;
       30       dcl	    p_free_old_print_vector_array
       31 			       bit (1) aligned;
       32       dcl	    p_dimension_name       char (*);
       33       dcl	    p_descriptor_ptr       ptr;
       34       dcl	    p_print_vector_array_ptr
       35 			       ptr;
       36       dcl	    p_dimension_identifier fixed bin;
       37       dcl	    p_code	       fixed bin (35);
       38 
       39 /* Automatic */
       40 
       41       dcl	    dim_idx	       fixed bin;
       42       dcl	    old_pva_ptr	       ptr;
       43       dcl	    vector_idx	       fixed bin;
       44 
       45 
       46 /* Based */
       47 
       48       dcl	    descriptor_string      bit (36) aligned based;
       49       dcl	    work_area	       area based (p_work_area_ptr);
       50 
       51 /* Builtin */
       52 
       53       dcl	    null		       builtin;
       54 
       55 /* Controlled */
       56 /* Constant */
       57 
       58       dcl	    MYNAME	       init ("vu_append_dimension_print") char (40) varying internal static
       59 			       options (constant);
       60 
       61 /* Entry */
       62 
       63       dcl	    sub_err_	       entry () options (variable);
       64 
       65 /* External */
       66 
       67       dcl	    vd_error_$dimension_already_defined
       68 			       fixed bin (35) ext;
       69       dcl	    error_table_$bad_arg   fixed bin (35) ext;
       70       dcl	    vd_error_$mismatched_descriptors
       71 			       fixed bin (35) ext;
       72       dcl	    error_table_$fatal_error
       73 			       fixed bin (35) ext;
       74 
       75 /* END OF DECLARATIONS */
       76 
       77       print_vector_array_ptr = p_print_vector_array_ptr;
       78 
       79       do p_dimension_identifier = 1 to print_vector_array.number_of_dimensions
       80          while (print_vector_array.dimension_table (p_dimension_identifier).name ^= p_dimension_name);
       81       end;
       82       if p_dimension_identifier <= print_vector_array.number_of_dimensions
       83       then
       84          do;
       85 	  p_code = vd_error_$dimension_already_defined;
       86 	  if p_descriptor_ptr = print_vector_array.dimension_table (p_dimension_identifier).descriptor_ptr
       87 	  then return;
       88 	  else if p_descriptor_ptr = null
       89 		| print_vector_array.dimension_table (p_dimension_identifier).descriptor_ptr = null
       90 	  then return;
       91 	  else if p_descriptor_ptr -> descriptor_string
       92 		= print_vector_array.dimension_table (p_dimension_identifier).descriptor_ptr -> descriptor_string
       93 	  then return;
       94 	  else
       95 	     do;
       96 	        p_code = vd_error_$mismatched_descriptors;
       97 	        return;
       98 	     end;
       99          end;
      100       pva_number_of_vector_slots = print_vector_array.number_of_vector_slots;
      101       pva_number_of_dimensions = p_dimension_identifier;
      102 
      103       pva_maximum_dimension_name_length =
      104          max (print_vector_array.maximum_dimension_name_length, length (p_dimension_name));
      105 
      106       old_pva_ptr = print_vector_array_ptr;
      107       alloc print_vector_array in (work_area);
      108       print_vector_array.version = PRINT_VECTOR_ARRAY_VERSION_2;
      109       print_vector_array.number_of_vectors = old_pva_ptr -> print_vector_array.number_of_vectors;
      110 
      111       print_vector_array.vector_slot = old_pva_ptr -> print_vector_array.vector_slot;
      112 
      113       do p_dimension_identifier = 1 to print_vector_array.number_of_dimensions - 1;
      114          print_vector_array.dimension_table (p_dimension_identifier).name =
      115 	  old_pva_ptr -> print_vector_array.dimension_table (p_dimension_identifier).name;
      116          print_vector_array.dimension_table (p_dimension_identifier).descriptor_ptr =
      117 	  old_pva_ptr -> print_vector_array.dimension_table (p_dimension_identifier).descriptor_ptr;
      118          print_vector_array.dimension_table (p_dimension_identifier).cv_to_print =
      119 	  old_pva_ptr -> print_vector_array.dimension_table (p_dimension_identifier).cv_to_print;
      120          print_vector_array.dimension_table (p_dimension_identifier).cv_to_typed =
      121 	  old_pva_ptr -> print_vector_array.dimension_table (p_dimension_identifier).cv_to_typed;
      122          print_vector_array.dimension_table (p_dimension_identifier).maximum_value_length =
      123 	  old_pva_ptr -> print_vector_array.dimension_table (p_dimension_identifier).maximum_value_length;
      124       end;
      125 
      126       print_vector_array.dimension_table (p_dimension_identifier).name = p_dimension_name;
      127       print_vector_array.dimension_table (p_dimension_identifier).descriptor_ptr = p_descriptor_ptr;
      128 
      129       print_vector_array.dimension_table (p_dimension_identifier).maximum_value_length = 0;
      130       print_vector_array.dimension_table (p_dimension_identifier).cv_to_print = vector_util_$err_no_operation;
      131       print_vector_array.dimension_table (p_dimension_identifier).cv_to_typed = vector_util_$err_no_operation;
      132       p_print_vector_array_ptr = print_vector_array_ptr;
      133       p_dimension_identifier = pva_number_of_dimensions;
      134       p_code = 0;
      135       if p_free_old_print_vector_array
      136       then free old_pva_ptr -> print_vector_array in (work_area);
      137       return;
      138 
  1     1 /* ***********************************************************
  1     2*   *                                                         *
  1     3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
  1     4*   *                                                         *
  1     5*   *********************************************************** */
  1     6 /* BEGIN INCLUDE FILE  -  vu_print_vector_array.incl.pl1 */
  1     7 /* Written by Matthew C. Pierret, 01/21/82
  1     8*Modified:
  1     9**/
  1    10 
  1    11 /* format: style2,ind3 */
  1    12      dcl	   1 print_vector_array   based (print_vector_array_ptr),
  1    13 	     2 version	      fixed bin (35),
  1    14 	     2 number_of_dimensions
  1    15 			      fixed bin (17),
  1    16 	     2 maximum_dimension_name_length
  1    17 			      fixed bin (17),
  1    18 	     2 number_of_vectors  fixed bin (17),
  1    19 	     2 number_of_vector_slots
  1    20 			      fixed bin (17),
  1    21 	     2 dimension_table    (pva_number_of_dimensions refer (print_vector_array.number_of_dimensions)),
  1    22 	       3 name	      char (pva_maximum_dimension_name_length
  1    23 			      refer (print_vector_array.maximum_dimension_name_length)) varying,
  1    24 	       3 descriptor_ptr   ptr,
  1    25 	       3 cv_to_print      entry (ptr, fixed bin (17), fixed bin (17), ptr, ptr, fixed bin (35)),
  1    26 	       3 cv_to_typed      entry (ptr, fixed bin (17), fixed bin (17), ptr, ptr, fixed bin (35)),
  1    27 	       3 maximum_value_length
  1    28 			      fixed bin (17),
  1    29 	     2 vector_slot	      (pva_number_of_vector_slots refer (print_vector_array.number_of_vector_slots)) ptr;
  1    30 
  1    31      dcl	   1 print_vector	      based (print_vector_ptr),
  1    32 	     2 number_of_dimensions
  1    33 			      fixed bin (17),
  1    34 	     2 maximum_value_length
  1    35 			      fixed bin (35),
  1    36 	     2 dimension	      (pv_number_of_dimensions refer (print_vector.number_of_dimensions)),
  1    37 	       3 identifier	      fixed bin (17),
  1    38 	       3 value	      char (pv_maximum_value_length refer (print_vector.maximum_value_length)) varying;
  1    39 
  1    40      dcl	   pva_number_of_dimensions
  1    41 			      fixed bin;
  1    42      dcl	   pva_number_of_vector_slots
  1    43 			      fixed bin;
  1    44      dcl	   pva_maximum_dimension_name_length
  1    45 			      fixed bin;
  1    46      dcl	   pv_number_of_dimensions
  1    47 			      fixed bin;
  1    48      dcl	   pv_maximum_value_length
  1    49 			      fixed bin;
  1    50 
  1    51      dcl	   print_vector_array_ptr ptr;
  1    52      dcl	   print_vector_ptr	      ptr;
  1    53      dcl	   PRINT_VECTOR_ARRAY_VERSION_2
  1    54 			      fixed bin (35) init (2) internal static options (constant);
  1    55 
  1    56 /* END INCLUDE FILE  -  vu_print_vector_array.incl.pl1 */
      139 
      140 
  2     1 dcl (	s_fixed_real_desc		init( 1),
  2     2 	d_fixed_real_desc		init( 2),
  2     3 	s_float_real_desc		init( 3),
  2     4 	d_float_real_desc		init( 4),
  2     5 	s_fixed_cplx_desc		init( 5),
  2     6 	d_fixed_cplx_desc		init( 6),
  2     7 	s_float_cplx_desc		init( 7),
  2     8 	d_float_cplx_desc		init( 8),
  2     9 
  2    10 	D_fixed_real_desc		init( 9),
  2    11 	D_float_real_desc		init(10),
  2    12 	D_fixed_cplx_desc		init(11),
  2    13 	D_float_cplx_desc		init(12),
  2    14 
  2    15 	pointer_desc		init(13),
  2    16 	offset_desc		init(14),
  2    17 	label_desc		init(15),
  2    18 	entry_desc		init(16),
  2    19 	structure_desc		init(17),
  2    20 	area_desc			init(18),
  2    21 
  2    22 	bit_desc			init(19),
  2    23 	v_bit_desc		init(20),
  2    24 
  2    25 	char_desc			init(21),
  2    26 	v_char_desc		init(22),
  2    27 
  2    28 	file_desc			init(23)
  2    29 					) fixed bin int static options(constant);
      141 
      142 
  3     1 /*	BEGIN INCLUDE FILE ... descriptor.incl.pl1	*/
  3     2 
  3     3 dcl	1 desc_		aligned,
  3     4 	2 version2_	bit(1) unal,
  3     5 	2 type_		fixed bin(6) unsigned unal,
  3     6 	2 pack_		bit(1) unal,
  3     7 	2 dimension_	bit(4) unal,
  3     8 	2 scale_		fixed bin(11) unal,
  3     9 	2 precision_	fixed bin(11) unal;
  3    10 
  3    11 /*	END INCLUDE FILE ... descriptor.incl.pl1	*/
      143 
      144 
  4     1 /* BEGIN INCLUDE FILE ... arg_list.incl.pl1
  4     2*
  4     3*   James R. Davis 10 May 79 */
  4     4 
  4     5      dcl	   1 arg_list	      aligned based,
  4     6 	     2 header,
  4     7 	       3 arg_count	      fixed bin (17) unsigned unal,
  4     8 	       3 pad1	      bit (1) unal,
  4     9 	       3 call_type	      fixed bin (18) unsigned unal,
  4    10 	       3 desc_count	      fixed bin (17) unsigned unal,
  4    11 	       3 pad2	      bit (19) unal,
  4    12 	     2 arg_ptrs	      (arg_list_arg_count refer (arg_list.arg_count)) ptr,
  4    13 	     2 desc_ptrs	      (arg_list_arg_count refer (arg_list.arg_count)) ptr;
  4    14 
  4    15 
  4    16 
  4    17      dcl	   1 arg_list_with_envptr aligned based,	/* used with non-quick int and entry-var calls */
  4    18 	     2 header,
  4    19 	       3 arg_count	      fixed bin (17) unsigned unal,
  4    20 	       3 pad1	      bit (1) unal,
  4    21 	       3 call_type	      fixed bin (18) unsigned unal,
  4    22 	       3 desc_count	      fixed bin (17) unsigned unal,
  4    23 	       3 pad2	      bit (19) unal,
  4    24 	     2 arg_ptrs	      (arg_list_arg_count refer (arg_list_with_envptr.arg_count)) ptr,
  4    25 	     2 envptr	      ptr,
  4    26 	     2 desc_ptrs	      (arg_list_arg_count refer (arg_list_with_envptr.arg_count)) ptr;
  4    27 
  4    28 
  4    29      dcl	   (
  4    30 	   Quick_call_type	      init (0),
  4    31 	   Interseg_call_type     init (4),
  4    32 	   Envptr_supplied_call_type
  4    33 			      init (8)
  4    34 	   )		      fixed bin (18) unsigned unal int static options (constant);
  4    35 
  4    36 /* The user must declare arg_list_arg_count - if an adjustable automatic structure
  4    37*   is being "liked" then arg_list_arg_count may be a parameter, in order to allocate
  4    38*   an argument list of the proper size in the user's stack
  4    39*
  4    40**/
  4    41 /* END INCLUDE FILE ... arg_list.incl.pl1 */
      145 
      146 
  5     1 /* ***********************************************************
  5     2*   *                                                         *
  5     3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
  5     4*   *                                                         *
  5     5*   *********************************************************** */
  5     6 /* BEGIN INCLUDE FILE - vu_entry_dcls.incl.pl1 */
  5     7 
  5     8 /* Written 03/01/82 by Lindsey Spratt.
  5     9*Modified:
  5    10*09/23/82 by Lindsey Spratt:  Added the append_simple_typed_vector,
  5    11*            free_typed_vector_array, and free_typed_vector entries.
  5    12*07/24/83 by Lindsey Spratt:  Added $cv_pva_to_string and $cv_string_to_pva.
  5    13**/
  5    14 
  5    15 /* format: style2,ind3 */
  5    16      dcl     vector_util_$display   entry (ptr, ptr, fixed bin (35));
  5    17      dcl     vector_util_$sort_print
  5    18                                     entry (ptr, ptr, fixed bin (35));
  5    19 
  5    20      dcl     vector_util_$init_print_vector_array
  5    21                                     entry options (variable);
  5    22      dcl     vector_util_$init_typed_vector_array
  5    23                                     entry options (variable);
  5    24 
  5    25      dcl     vector_util_$append_dimension_print
  5    26                                     entry (ptr, bit (1) aligned, char (*), ptr, ptr, fixed bin, fixed bin (35));
  5    27 
  5    28      dcl     vector_util_$append_simple_print_vector
  5    29                                     entry options (variable);
  5    30      dcl     vector_util_$append_general_print_vector
  5    31                                     entry options (variable);
  5    32 
  5    33      dcl     vector_util_$append_simple_typed_vector
  5    34                                     entry options (variable);
  5    35 
  5    36 /* call vector_util_$free_typed_vector_array (work_area_ptr, typed_vector_array_ptr, code) */
  5    37      dcl     vector_util_$free_typed_vector_array
  5    38                                     entry (ptr, ptr, fixed bin (35));
  5    39 
  5    40 /* call vector_util_$free_typed_vector (work_area_ptr,typed_vector_array_ptr,typed_vector_ptr,code) */
  5    41      dcl     vector_util_$free_typed_vector
  5    42                                     entry (ptr, ptr, ptr, fixed bin (35));
  5    43 
  5    44      dcl     vector_util_$cv_typed_to_print
  5    45                                     entry (ptr, ptr, ptr, fixed bin (35));
  5    46      dcl     vector_util_$cv_any_to_print_dimension
  5    47                                     entry (ptr, ptr, ptr, fixed bin (35), char (*) varying, fixed bin (35));
  5    48 
  5    49      dcl     vector_util_$cv_pva_to_string
  5    50                                     entry (ptr, ptr, fixed bin (35), fixed bin (35));
  5    51      dcl     vector_util_$cv_string_to_pva
  5    52                                     entry (ptr, fixed bin (35), ptr, ptr, fixed bin (35));
  5    53 
  5    54      dcl     vector_util_$err_no_operation
  5    55                                     entry (ptr, fixed bin (17), fixed bin (17), ptr, ptr, fixed bin (35));
  5    56 
  5    57 /*  END INCLUDE FILE - vu_entry_dcls.incl.pl1 */
  5    58 
      147 
      148    end vu_append_dimension_print;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    02/16/84  1249.9  vu_append_dimension_print.pl1     >spec>on>mtape>vu_append_dimension_print.pl1
139          1    02/16/84  1230.3  vu_print_vector_array.incl.pl1    >spec>on>mtape>vu_print_vector_array.incl.pl1
141          2    01/12/79  1059.7  desc_types.incl.pl1               >ldd>include>desc_types.incl.pl1
143          3    11/30/78  1227.5  descriptor.incl.pl1               >ldd>include>descriptor.incl.pl1
145          4    10/23/81  1948.6  arg_list.incl.pl1                 >ldd>include>arg_list.incl.pl1
147          5    02/16/84  1230.3  vu_entry_dcls.incl.pl1            >spec>on>mtape>vu_entry_dcls.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
PRINT_VECTOR_ARRAY_VERSION_2           constant        fixed bin(35,0)          initial dcl 1-53 ref 108
cv_to_print                            based           entry variable           array level 3 dcl 1-12 set ref 118* 118 130*
cv_to_typed                            based           entry variable           array level 3 dcl 1-12 set ref 120* 120 131*
descriptor_ptr                         based           pointer                  array level 3 dcl 1-12 set ref 86 88 91 116* 116
                                                                                  127*
descriptor_string                      based           bit(36)                  dcl 48 ref 91 91
dimension_table           6            based           structure                array level 2 unaligned dcl 1-12
maximum_dimension_name_length
                          2            based           fixed bin(17,0)          level 2 dcl 1-12 set ref 79 79 86 86 86 88 88 88 91
                                                                                  91 91 103 107* 111 111 114 114 114 114 114 116 116
                                                                                  116 116 116 116 118 118 118 118 118 118 120 120
                                                                                  120 120 120 120 122 122 122 122 122 122 126 126
                                                                                  126 127 127 127 129 129 129 130 130 130 131 131
                                                                                  131 135
maximum_value_length                   based           fixed bin(17,0)          array level 3 dcl 1-12 set ref 122* 122 129*
name                      6            based           varying char             array level 3 dcl 1-12 set ref 79 114* 114 126*
null                                                   builtin function         dcl 53 ref 88 88
number_of_dimensions      1            based           fixed bin(17,0)          level 2 dcl 1-12 set ref 79 82 107* 111 111 113 135
number_of_vector_slots
                          4            based           fixed bin(17,0)          level 2 dcl 1-12 set ref 100 107* 111 135
number_of_vectors         3            based           fixed bin(17,0)          level 2 dcl 1-12 set ref 109* 109
old_pva_ptr                     000100 automatic       pointer                  dcl 42 set ref 106* 109 111 114 116 118 120 122 135
p_code                                 parameter       fixed bin(35,0)          dcl 37 set ref 7 7 85* 96* 134*
p_descriptor_ptr                       parameter       pointer                  dcl 33 ref 7 7 86 88 91 127
p_dimension_identifier                 parameter       fixed bin(17,0)          dcl 36 set ref 7 7 79* 79* 82 86 88 91 101 113* 114
                                                                                  114 116 116 118 118 120 120 122 122* 126 127 129
                                                                                  130 131 133*
p_dimension_name                       parameter       char                     unaligned dcl 32 ref 7 7 79 103 126
p_free_old_print_vector_array          parameter       bit(1)                   dcl 30 ref 7 7 135
p_print_vector_array_ptr               parameter       pointer                  dcl 34 set ref 7 7 77 132*
p_work_area_ptr                        parameter       pointer                  dcl 29 ref 7 7 107 135
print_vector_array                     based           structure                level 1 unaligned dcl 1-12 set ref 107 135
print_vector_array_ptr          000106 automatic       pointer                  dcl 1-51 set ref 77* 79 79 82 86 88 91 100 103 106
                                                                                  107* 108 109 111 113 114 116 118 120 122 126 127
                                                                                  129 130 131 132
pva_maximum_dimension_name_length
                                000104 automatic       fixed bin(17,0)          dcl 1-44 set ref 103* 107 107
pva_number_of_dimensions        000102 automatic       fixed bin(17,0)          dcl 1-40 set ref 101* 107 107 133
pva_number_of_vector_slots      000103 automatic       fixed bin(17,0)          dcl 1-42 set ref 100* 107 107
vd_error_$dimension_already_defined
                                000010 external static fixed bin(35,0)          dcl 67 ref 85
vd_error_$mismatched_descriptors
                                000012 external static fixed bin(35,0)          dcl 70 ref 96
vector_slot                            based           pointer                  array level 2 dcl 1-12 set ref 111* 111
vector_util_$err_no_operation   000014 constant        entry                    external dcl 5-54 ref 130 131
version                                based           fixed bin(35,0)          level 2 dcl 1-12 set ref 108*
work_area                              based           area(1024)               dcl 49 ref 107 135

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
D_fixed_cplx_desc                      internal static fixed bin(17,0)          initial dcl 2-1
D_fixed_real_desc                      internal static fixed bin(17,0)          initial dcl 2-1
D_float_cplx_desc                      internal static fixed bin(17,0)          initial dcl 2-1
D_float_real_desc                      internal static fixed bin(17,0)          initial dcl 2-1
Envptr_supplied_call_type              internal static fixed bin(18,0)          initial unsigned unaligned dcl 4-29
Interseg_call_type                     internal static fixed bin(18,0)          initial unsigned unaligned dcl 4-29
MYNAME                                 internal static varying char(40)         initial dcl 58
Quick_call_type                        internal static fixed bin(18,0)          initial unsigned unaligned dcl 4-29
area_desc                              internal static fixed bin(17,0)          initial dcl 2-1
arg_list                               based           structure                level 1 dcl 4-5
arg_list_with_envptr                   based           structure                level 1 dcl 4-17
bit_desc                               internal static fixed bin(17,0)          initial dcl 2-1
char_desc                              internal static fixed bin(17,0)          initial dcl 2-1
d_fixed_cplx_desc                      internal static fixed bin(17,0)          initial dcl 2-1
d_fixed_real_desc                      internal static fixed bin(17,0)          initial dcl 2-1
d_float_cplx_desc                      internal static fixed bin(17,0)          initial dcl 2-1
d_float_real_desc                      internal static fixed bin(17,0)          initial dcl 2-1
desc_                                  automatic       structure                level 1 dcl 3-3
dim_idx                                automatic       fixed bin(17,0)          dcl 41
entry_desc                             internal static fixed bin(17,0)          initial dcl 2-1
error_table_$bad_arg                   external static fixed bin(35,0)          dcl 69
error_table_$fatal_error               external static fixed bin(35,0)          dcl 72
file_desc                              internal static fixed bin(17,0)          initial dcl 2-1
label_desc                             internal static fixed bin(17,0)          initial dcl 2-1
offset_desc                            internal static fixed bin(17,0)          initial dcl 2-1
pointer_desc                           internal static fixed bin(17,0)          initial dcl 2-1
print_vector                           based           structure                level 1 unaligned dcl 1-31
print_vector_ptr                       automatic       pointer                  dcl 1-52
pv_maximum_value_length                automatic       fixed bin(17,0)          dcl 1-48
pv_number_of_dimensions                automatic       fixed bin(17,0)          dcl 1-46
s_fixed_cplx_desc                      internal static fixed bin(17,0)          initial dcl 2-1
s_fixed_real_desc                      internal static fixed bin(17,0)          initial dcl 2-1
s_float_cplx_desc                      internal static fixed bin(17,0)          initial dcl 2-1
s_float_real_desc                      internal static fixed bin(17,0)          initial dcl 2-1
structure_desc                         internal static fixed bin(17,0)          initial dcl 2-1
sub_err_                        000000 constant        entry                    external dcl 63
v_bit_desc                             internal static fixed bin(17,0)          initial dcl 2-1
v_char_desc                            internal static fixed bin(17,0)          initial dcl 2-1
vector_idx                             automatic       fixed bin(17,0)          dcl 43
vector_util_$append_dimension_print
                                000000 constant        entry                    external dcl 5-25
vector_util_$append_general_print_vector
                                000000 constant        entry                    external dcl 5-30
vector_util_$append_simple_print_vector
                                000000 constant        entry                    external dcl 5-28
vector_util_$append_simple_typed_vector
                                000000 constant        entry                    external dcl 5-33
vector_util_$cv_any_to_print_dimension
                                000000 constant        entry                    external dcl 5-46
vector_util_$cv_pva_to_string   000000 constant        entry                    external dcl 5-49
vector_util_$cv_string_to_pva   000000 constant        entry                    external dcl 5-51
vector_util_$cv_typed_to_print  000000 constant        entry                    external dcl 5-44
vector_util_$display            000000 constant        entry                    external dcl 5-16
vector_util_$free_typed_vector  000000 constant        entry                    external dcl 5-41
vector_util_$free_typed_vector_array
                                000000 constant        entry                    external dcl 5-37
vector_util_$init_print_vector_array
                                000000 constant        entry                    external dcl 5-20
vector_util_$init_typed_vector_array
                                000000 constant        entry                    external dcl 5-22
vector_util_$sort_print         000000 constant        entry                    external dcl 5-17

NAMES DECLARED BY EXPLICIT CONTEXT.
append_dimension_print          000016 constant        entry                    external dcl 7
vu_append_dimension_print       000034 constant        entry                    external dcl 7

NAMES DECLARED BY CONTEXT OR IMPLICATION.
length                                                 builtin function         ref 103
max                                                    builtin function         ref 103

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       752         770     646         762
Length      1250     646        16         243     103           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
append_dimension_print               81 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
append_dimension_print   000100 old_pva_ptr                 append_dimension_print
                         000102 pva_number_of_dimensions    append_dimension_print
                         000103 pva_number_of_vector_slots  append_dimension_print
                         000104 pva_maximum_dimension_name_length
                                                            append_dimension_print
                         000106 print_vector_array_ptr      append_dimension_print

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
return              ext_entry_desc      alloc_based         free_based

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
vector_util_$err_no_operation

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
vd_error_$dimension_already_defined                         vd_error_$mismatched_descriptors




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
      7 000010        77 000047        79 000053        81 000112        82 000114        85 000120        86 000123
     88 000151        91 000161        96 000165        97 000167       100 000170       101 000172       103 000174
    106 000201       107 000202       108 000241       109 000243       111 000246       113 000315       114 000330
    116 000401       118 000423       120 000443       122 000462       124 000473       126 000475       127 000527
    129 000541       130 000545       131 000576       132 000605       133 000606       134 000610       135 000611
    137 000642


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
