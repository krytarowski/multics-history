	COMPILATION LISTING OF SEGMENT dmu_compare_strings
	Compiled by: Multics PL/I Compiler, Release 31a, of October 12, 1988
	Compiled at: Honeywell Bull, Phoenix AZ, SysM
	Compiled on: 10/24/88  1531.0 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 
        7 /* DESCRIPTION:  
        8*          This program compares the value of two keys.
        9*     It is responsible for "parsing" the key bit string into its constituent
       10*     fields, using the information provided by the field_table.
       11*          The comparison is done a-field-at-a-time, starting with field 1 and
       12*     continuing with field 2, field 3, etc. until either an inequality is
       13*     found or all of the fields have been compared.  
       14*          Key1 must be a full key string.  Key2 may be a "truncated" key as 
       15*     produced by the im_make_parent_key module.
       16**/
       17 
       18 /* HISTORY:
       19*
       20*Written by Lindsey Spratt, 11/03/82.
       21*
       22*Modified:
       23*12/08/82 by Lindsey Spratt:  Fixed code which extracts lengths of varying
       24*	  strings to cope with different size variable lengths (currently 9,
       25*	  18 and 36 bit length variables are possible).
       26*06/29/83 by Lindsey L. Spratt:  Fixed to support comparison of a full key1
       27*            string with a "truncated" key2 string.
       28*05/03/84 by Matthew Pierret:  Changed to FIELD_TABLE_VERSION_3.
       29*11/09/84 by Lindsey L. Spratt:  Minor format changes.  Declared the builtins.
       30**/
       31 
       32 /* format: style2,ind3 */
       33 dmu_compare_strings:
       34    proc (p_field_table_ptr, p_key1_string_ptr, p_key1_string_length, p_key2_string_ptr, p_key2_string_length,
       35         p_key2_last_field_idx, p_first_inequal_field_id, p_key1_equal_to_key2, p_key1_less_than_key2, p_code);
       36 
       37 /* START OF DECLARATIONS */
       38 /* Parameter */
       39 
       40       dcl	    p_field_table_ptr      ptr;
       41       dcl	    p_key1_string_ptr      ptr parameter;
       42       dcl	    p_key1_string_length   fixed bin (24) parameter;
       43       dcl	    p_key2_string_ptr      ptr;
       44       dcl	    p_key2_string_length   fixed bin (24);
       45       dcl	    p_key2_last_field_idx  fixed bin (17) unaligned;
       46       dcl	    p_first_inequal_field_id
       47 			       fixed bin (17) parameter;
       48       dcl	    p_key1_equal_to_key2   bit (1) aligned;
       49       dcl	    p_key1_less_than_key2  bit (1) aligned;
       50       dcl	    p_code	       fixed bin (35);
       51 
       52 /* Automatic */
       53 
       54       dcl	    1 truncated_field_descriptor
       55 			       like arg_descriptor;
       56       dcl	    last_field_is_truncated
       57 			       bit (1) aligned init ("0"b);
       58       dcl	    last_field_value_ptr   ptr init (null);
       59       dcl	    (last_field_value_length, last_field_value_length_in_bits)
       60 			       fixed bin (35) init (-1);
       61 
       62       dcl	    field_idx	       fixed bin init (-1);
       63       dcl	    (current_field_id, current_field_variable_length, current_field_location)
       64 			       fixed bin (35) init (-1);
       65       dcl	    maximum_field_idx      fixed bin (17) init (-1);
       66       dcl	    varying_field_idx      fixed bin init (-1);
       67       dcl	    myname	       init ("dmu_compare_strings") char (32) varying;
       68       dcl	    key2_field_value_length
       69 			       fixed bin (35);
       70       dcl	    key2_field_value_ptr   ptr;
       71       dcl	    key2_field_value_offset
       72 			       fixed bin (24);
       73       dcl	    key1_field_value_length
       74 			       fixed bin (35);
       75       dcl	    key1_field_value_ptr   ptr;
       76       dcl	    key1_field_value_offset
       77 			       fixed bin (24);
       78       dcl	    (key1_location_of_first_varying_field, key2_location_of_first_varying_field)
       79 			       fixed bin (35) init (-1);
       80       dcl	    last_field_length_in_bits
       81 			       fixed bin (35) init (-1);
       82       dcl	    field_descriptor_ptr   ptr init (null);
       83 
       84 /* Based */
       85 
       86       dcl	    based_real_fix_bin_1u  based fixed bin (35) unaligned;
       87 
       88       dcl	    p_key1_string	       based (p_key1_string_ptr) bit (p_key1_string_length);
       89       dcl	    key1_bit_array	       (p_key1_string_length) bit (1) based (p_key1_string_ptr);
       90       dcl	    p_key2_string	       based (p_key2_string_ptr) bit (p_key2_string_length);
       91       dcl	    key2_bit_array	       (p_key2_string_length) bit (1) based (p_key2_string_ptr);
       92 
       93 
       94 /* Builtin */
       95 
       96       dcl	    (addr, bin, copy, hbound, null, substr, unspec)
       97 			       builtin;
       98 
       99 /* Controlled */
      100 /* Constant */
      101 
      102       dcl	    (
      103 	    BITS_PER_WORD	       init (36),
      104 	    BITS_PER_BYTE	       init (9),
      105 	    BYTES_PER_WORD	       init (4)
      106 	    )		       internal static options (constant) fixed bin (17);
      107 
      108 /* Entry */
      109 
      110       dcl	    dmu_compare_values$field_to_field
      111 			       entry (ptr, ptr, fixed bin (35), ptr, fixed bin (35), bit (1) aligned,
      112 			       bit (1) aligned, fixed bin (35));
      113       dcl	    sub_err_	       entry () options (variable);
      114 
      115 /* External */
      116 
      117       dcl	    error_table_$unimplemented_version
      118 			       fixed bin (35) ext;
      119 
      120 /* END OF DECLARATIONS */
      121 
      122       field_table_ptr = p_field_table_ptr;
      123       call CHECK_VERSION_CHAR (field_table.version, FIELD_TABLE_VERSION_3, "field_table");
      124 
      125       p_code = 0;
      126       p_key1_equal_to_key2 = "1"b;
      127       p_key1_less_than_key2 = "0"b;
      128 
      129       if p_key2_last_field_idx = -1
      130       then
      131          do;
      132 	  maximum_field_idx = hbound (field_table.field, 1);
      133 	  key1_location_of_first_varying_field, key2_location_of_first_varying_field =
      134 	       field_table.location_of_first_varying_field;
      135 	  last_field_is_truncated = "0"b;
      136          end;
      137       else
      138 SETUP_TRUNCATED_FIELD:
      139          do;
      140 	  maximum_field_idx = p_key2_last_field_idx;
      141 	  arg_descriptor_ptr = addr (field_table.field (p_key2_last_field_idx).descriptor);
      142 
      143 	  if field_table.varying_field_map (p_key2_last_field_idx).varying_field_index = 0
      144 	  then if arg_descriptor.type = bit_dtype
      145 	       then
      146 		do;
      147 		   if arg_descriptor.size > BITS_PER_WORD + BITS_PER_BYTE
      148 		   then
      149 		      do;
      150 		         truncated_field_descriptor.packed = "1"b;
      151 		         truncated_field_descriptor.flag = "1"b;
      152 		         truncated_field_descriptor.type = varying_bit_dtype;
      153 		         truncated_field_descriptor.size = arg_descriptor.size;
      154 		         last_field_value_length =
      155 			    addr (key2_bit_array (field_table.field (p_key2_last_field_idx).location))
      156 			    -> based_real_fix_bin_1u;
      157 		         last_field_length_in_bits = last_field_value_length + BITS_PER_WORD;
      158 		         last_field_value_ptr =
      159 			    addr (
      160 			    key2_bit_array (field_table.field (p_key2_last_field_idx).location + BITS_PER_WORD));
      161 		         last_field_is_truncated = "1"b;
      162 		      end;
      163 		end;
      164 	       else if arg_descriptor.type = char_dtype
      165 	       then
      166 		do;
      167 		   if arg_descriptor.size > BYTES_PER_WORD + 1
      168 		   then
      169 		      do;
      170 		         truncated_field_descriptor.packed = "1"b;
      171 		         truncated_field_descriptor.flag = "1"b;
      172 
      173 		         truncated_field_descriptor.type = varying_char_dtype;
      174 		         truncated_field_descriptor.size = arg_descriptor.size;
      175 		         last_field_value_length =
      176 			    addr (key2_bit_array (field_table.field (p_key2_last_field_idx).location))
      177 			    -> based_real_fix_bin_1u;
      178 		         last_field_value_length_in_bits = last_field_value_length * BITS_PER_BYTE + BITS_PER_WORD;
      179 		         last_field_value_ptr =
      180 			    addr (
      181 			    key2_bit_array (field_table.field (p_key2_last_field_idx).location + BITS_PER_WORD));
      182 		         last_field_is_truncated = "1"b;
      183 		      end;
      184 		end;
      185 
      186 	  if last_field_is_truncated
      187 	  then key2_location_of_first_varying_field =
      188 		  field_table.field (p_key2_last_field_idx).location + last_field_length_in_bits;
      189 	  else if p_key2_last_field_idx < field_table.number_of_fields
      190 	  then key2_location_of_first_varying_field = field_table.field (p_key2_last_field_idx + 1).location;
      191 	  else key2_location_of_first_varying_field = field_table.location_of_first_varying_field;
      192          end SETUP_TRUNCATED_FIELD;
      193 
      194 FIELD_LOOP:
      195       do field_idx = 1 to maximum_field_idx while (p_code = 0 & p_key1_equal_to_key2);
      196          if last_field_is_truncated & p_key2_last_field_idx = field_idx
      197          then
      198 PREPARE_TRUNCATED_FIELD:
      199 	  do;
      200 	     key1_field_value_length = truncated_field_descriptor.size;
      201 	     key1_field_value_ptr = addr (key1_bit_array (field_table.field (field_idx).location));
      202 	     key2_field_value_length = last_field_value_length;
      203 	     key2_field_value_ptr = last_field_value_ptr;
      204 	     field_descriptor_ptr = addr (truncated_field_descriptor);
      205 	  end PREPARE_TRUNCATED_FIELD;
      206          else if field_table.varying_field_map (field_idx).varying_field_index = 0
      207          then
      208 PREPARE_NONVARYING_FIELD:
      209 	  do;
      210 	     key1_field_value_length = -1;
      211 	     key1_field_value_ptr = addr (key1_bit_array (field_table.field (field_idx).location));
      212 	     key2_field_value_length = -1;
      213 	     key2_field_value_ptr = addr (key2_bit_array (field_table.field (field_idx).location));
      214 	     field_descriptor_ptr = addr (field_table.field (field_idx).descriptor);
      215 	  end PREPARE_NONVARYING_FIELD;
      216          else
      217 PREPARE_VARYING_FIELD:
      218 	  do;
      219 	     unspec (key1_field_value_length) =
      220 		copy ("0"b, BITS_PER_WORD - field_table.field (field_idx).length_in_bits)
      221 		||
      222 		substr (p_key1_string, field_table.field (field_idx).location,
      223 		field_table.field (field_idx).length_in_bits);
      224 	     key1_field_value_offset = key1_location_of_first_varying_field;
      225 	     unspec (key2_field_value_length) =
      226 		copy ("0"b, BITS_PER_WORD - field_table.field (field_idx).length_in_bits)
      227 		||
      228 		substr (p_key2_string, field_table.field (field_idx).location,
      229 		field_table.field (field_idx).length_in_bits);
      230 	     key2_field_value_offset = key2_location_of_first_varying_field;
      231 SET_VARYING_FIELD_VALUE_OFFSET:
      232 	     do varying_field_idx = 1 to field_table.varying_field_map (field_idx).varying_field_index - 1;
      233 	        current_field_id = field_table.varying_field_map (varying_field_idx).field_id;
      234 	        current_field_location = field_table.field (current_field_id).location;
      235 	        current_field_variable_length = field_table.field (current_field_id).length_in_bits;
      236 
      237 	        key1_field_value_offset =
      238 		   key1_field_value_offset
      239 		   + bin (substr (p_key1_string, current_field_location, current_field_variable_length), 24, 0);
      240 	        key2_field_value_offset =
      241 		   key2_field_value_offset
      242 		   + bin (substr (p_key2_string, current_field_location, current_field_variable_length), 24, 0);
      243 	     end SET_VARYING_FIELD_VALUE_OFFSET;
      244 
      245 	     key1_field_value_ptr = addr (key1_bit_array (key1_field_value_offset));
      246 	     key2_field_value_ptr = addr (key2_bit_array (key2_field_value_offset));
      247 	     field_descriptor_ptr = addr (field_table.field (field_idx).descriptor);
      248 	  end PREPARE_VARYING_FIELD;
      249 
      250          call dmu_compare_values$field_to_field (field_descriptor_ptr, key1_field_value_ptr, key1_field_value_length,
      251 	    key2_field_value_ptr, key2_field_value_length, p_key1_equal_to_key2, p_key1_less_than_key2, p_code);
      252 
      253 
      254       end FIELD_LOOP;
      255 
      256       p_first_inequal_field_id = field_idx - bin (^p_key1_equal_to_key2);
      257 
      258       return;
      259 
      260 CHECK_VERSION_CHAR:
      261    proc (p_expected_version, p_received_version, p_structure_name);
      262       dcl	    (p_expected_version, p_received_version, p_structure_name)
      263 			       char (*) aligned parameter;
      264       if p_expected_version ^= p_received_version
      265       then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
      266 	      "^/Expected version ^a of the ^a structure.  
      267 Received version ^a, instead.", p_expected_version, p_structure_name, p_received_version);
      268    end CHECK_VERSION_CHAR;
      269 
  1     1 /* BEGIN INCLUDE FILE sub_err_flags.incl.pl1 BIM 11/81 */
  1     2 /* format: style3 */
  1     3 
  1     4 /* These constants are to be used for the flags argument of sub_err_ */
  1     5 /* They are just "string (condition_info_header.action_flags)" */
  1     6 
  1     7 declare	(
  1     8 	ACTION_CAN_RESTART	init (""b),
  1     9 	ACTION_CANT_RESTART init ("1"b),
  1    10 	ACTION_DEFAULT_RESTART
  1    11 			init ("01"b),
  1    12 	ACTION_QUIET_RESTART
  1    13 			init ("001"b),
  1    14 	ACTION_SUPPORT_SIGNAL
  1    15 			init ("0001"b)
  1    16 	)		bit (36) aligned internal static options (constant);
  1    17 
  1    18 /* End include file */
      270 
      271 
  2     1 /* ********** BEGIN INCLUDE FILE dm_field_table.incl.pl1 ********** */
  2     2 
  2     3 /* DESCRIPTION:
  2     4*
  2     5*          The field_table describes the layout of a set of fields in a
  2     6*     formatted data string.  Such a string is the stored representation of a
  2     7*     record or a key.  Fields are placed side-by-side in the string in the
  2     8*     order they appear in the field_table.field array.  The string is divided
  2     9*     into the fixed portion and the varying portion.  In the fixed portion
  2    10*     appear fixed-length fields and fixed-size length-fields for
  2    11*     varying-length fields.  In the varying portion appear varying length
  2    12*     fields.  The length-field for a varying-length field contains the length
  2    13*     of the field values either in bits or in characters, depending on the
  2    14*     data type of the field.
  2    15**/
  2    16 
  2    17 /* HISTORY:
  2    18*Written by Matthew Pierret, 04/01/82.
  2    19*Modified:
  2    20*04/20/82 by Matthew Pierret: Added length_is_in_characters, meaning, if on,
  2    21*	  that if the field is varying, its length is expressed in
  2    22*	  bytes/characters.
  2    23*03/22/83 by Lindsey Spratt:  Changed lofvf to have a precision of 35 instead
  2    24*	  of 17, changed version to 2, changed version field to char(8) from
  2    25*	  fixed bin (17).
  2    26*05/01/84 by Matthew Pierret:  Changed version to 3. Removed field.name and
  2    27*            put field names in one string (field_names) at the end of the 
  2    28*            structure. Added field.location_of_name and field.length_of_name
  2    29*            for locating the field name in field_names. Aligned all "fixed bin"
  2    30*            structure elements.  Changed maximum_field_name_length to 
  2    31*            length_of_field_names.
  2    32**/
  2    33 
  2    34 /* format: style2 */
  2    35 
  2    36      dcl	   1 field_table	      aligned based (field_table_ptr),
  2    37 	     2 version	      char (8) aligned init (FIELD_TABLE_VERSION_3),
  2    38 	     2 number_of_fields   fixed bin (17),
  2    39 	     2 length_of_field_names
  2    40 			      fixed bin (17),	/* length of field_names in characters */
  2    41 	     2 location_of_first_varying_field
  2    42 			      fixed bin (35),	/* location of first bit in the varying portion of the formatted string */
  2    43 	     2 field	      (ft_number_of_fields refer (field_table.number_of_fields)),
  2    44 	       3 flags	      aligned,
  2    45 	         4 descriptor_is_varying
  2    46 			      bit (1) unal,		/* if on, the descriptor is not limited to the standard 36 bits */
  2    47 						/* and is stored in a stand-alone fashion, with field.descriptor */
  2    48 						/* containing the id of the element in which the descriptor is stored. */
  2    49 	         4 length_is_in_characters
  2    50 			      bit (1) unal,		/* if field is varying, the length field describes its length */
  2    51 						/* in characters instead of in bits */
  2    52 	         4 must_be_zero   bit (34) unal,
  2    53 	       3 descriptor	      bit (36) aligned,
  2    54 	       3 location	      fixed bin (35),	/* location of first bit of field in formatted string */
  2    55 	       3 length_in_bits   fixed bin (35),	/* length of field in bits */
  2    56 	     3 location_of_name   fixed bin (17),	/* location of first character of field name in field_names */
  2    57 	     3 length_of_name     fixed bin (17),	/* length of name in characters */
  2    58 	     2 varying_field_map  (ft_number_of_fields refer (field_table.number_of_fields)),
  2    59 	       3 field_id	      fixed bin (17),	/* field_id of Nth varying field */
  2    60 	       3 varying_field_index
  2    61 			      fixed bin (17),	/* ordinality among varying fields of field N */
  2    62 	     2 field_names	      char (ft_length_of_field_names refer (field_table.length_of_field_names));
  2    63 
  2    64 
  2    65      dcl	   field_table_ptr	      ptr;
  2    66      dcl	   ft_length_of_field_names
  2    67 			      fixed bin;
  2    68      dcl	   ft_number_of_fields    fixed bin;
  2    69      dcl	   FIELD_TABLE_VERSION_3  char (8) aligned init ("FldTbl 3") internal static options (constant);
  2    70 
  2    71 dcl field_name char (field_name_length) based (field_name_ptr);
  2    72 
  2    73 dcl field_name_length fixed bin;
  2    74 dcl field_name_ptr ptr;
  2    75 
  2    76 /* END INCLUDE FILE dm_field_table.incl.pl1 */
      272 
      273 
  3     1 /* ***********************************************************
  3     2*   *                                                         *
  3     3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
  3     4*   *                                                         *
  3     5*   *********************************************************** */
  3     6 /* BEGIN INCLUDE FILE - vu_typed_vector.incl.pl1 */
  3     7 
  3     8 /* Written by Lindsey Spratt, 04/02/82.
  3     9*Modified:
  3    10*09/01/82 by Lindsey Spratt:  Changed value_ptr in simple_typed_vector to be
  3    11*	  unaligned.  Changed the type number of the simple_typed_vector to
  3    12*	  "3" from "1".  The OLD_SIMPLE_TYPED_VECTOR_TYPE is now an invalid
  3    13*	  type.
  3    14**/
  3    15 
  3    16 /* format: style2,ind3 */
  3    17      dcl	   1 simple_typed_vector  based (simple_typed_vector_ptr),
  3    18 	     2 type	      fixed bin (17) unal,
  3    19 	     2 number_of_dimensions
  3    20 			      fixed bin (17) unal,
  3    21 	     2 dimension	      (stv_number_of_dimensions refer (simple_typed_vector.number_of_dimensions)),
  3    22 	       3 value_ptr	      ptr unaligned;
  3    23 
  3    24      dcl	   1 general_typed_vector based (general_typed_vector_ptr),
  3    25 	     2 type	      fixed bin (17) unal,
  3    26 	     2 number_of_dimensions
  3    27 			      fixed bin (17) unal,
  3    28 	     2 dimension	      (gtv_number_of_dimensions refer (general_typed_vector.number_of_dimensions)),
  3    29 	       3 identifier	      fixed bin (17) unal,
  3    30 	       3 pad	      bit (18) unal,
  3    31 	       3 value_ptr	      ptr unal;
  3    32 
  3    33      dcl	   simple_typed_vector_ptr
  3    34 			      ptr;
  3    35      dcl	   stv_number_of_dimensions
  3    36 			      fixed bin (17);
  3    37 
  3    38      dcl	   general_typed_vector_ptr
  3    39 			      ptr;
  3    40      dcl	   gtv_number_of_dimensions
  3    41 			      fixed bin (17);
  3    42 
  3    43      dcl	   (
  3    44 	   OLD_SIMPLE_TYPED_VECTOR_TYPE
  3    45 			      init (1),		/* value_ptr was aligned. */
  3    46 	   GENERAL_TYPED_VECTOR_TYPE
  3    47 			      init (2),
  3    48 	   SIMPLE_TYPED_VECTOR_TYPE
  3    49 			      init (3)
  3    50 	   )		      fixed bin (17) internal static options (constant);
  3    51 
  3    52 /* END INCLUDE FILE - vu_typed_vector.incl.pl1 */
      274 
      275 
  4     1 /* BEGIN INCLUDE FILE ... arg_descriptor.incl.pl1
  4     2*
  4     3*   James R. Davis 1 Mar 79 */
  4     4 /* Modified June 83 JMAthane for extended arg descriptor format */
  4     5 
  4     6      dcl	   1 arg_descriptor	      based (arg_descriptor_ptr) aligned,
  4     7 	     2 flag	      bit (1) unal,
  4     8 	     2 type	      fixed bin (6) unsigned unal,
  4     9 	     2 packed	      bit (1) unal,
  4    10 	     2 number_dims	      fixed bin (4) unsigned unal,
  4    11 	     2 size	      fixed bin (24) unsigned unal;
  4    12 
  4    13      dcl	   1 fixed_arg_descriptor based (arg_descriptor_ptr) aligned,
  4    14 	     2 flag	      bit (1) unal,
  4    15 	     2 type	      fixed bin (6) unsigned unal,
  4    16 	     2 packed	      bit (1) unal,
  4    17 	     2 number_dims	      fixed bin (4) unsigned unal,
  4    18 	     2 scale	      fixed bin (11) unal,
  4    19 	     2 precision	      fixed bin (12) unsigned unal;
  4    20 
  4    21      dcl	   1 extended_arg_descriptor based (arg_descriptor_ptr) aligned,
  4    22 	     2 flag	      bit (1) unal,		/* = "1"b */
  4    23 	     2 type	      fixed bin (6) unsigned unal, /* = 58 */
  4    24 	     2 packed	      bit (1) unal,		/* significant if number_dims ^= 0 */
  4    25 	     2 number_dims	      fixed (4) unsigned unal,/* number of variable dimensions */
  4    26 	     2 size	      bit (24) unal,
  4    27 	     2 dims	      (0 refer (extended_arg_descriptor.number_dims)), /* part referenced by called generated code */
  4    28 	       3 low	      fixed bin (35),
  4    29 	       3 high	      fixed bin (35),
  4    30 	       3 multiplier	      fixed bin (35),	/* in bits if packed, in words if not */
  4    31 	     2 real_type	      fixed bin (18) unsigned unal,
  4    32 	     2 type_offset	      fixed bin (18) unsigned unal; /* offset rel to symbol tree to symbol node for type, if any */
  4    33 
  4    34      dcl	   arg_descriptor_ptr     ptr;
  4    35 
  4    36      dcl	   extended_arg_type      fixed bin init (58);
  4    37 
  4    38 /* END INCLUDE file .... arg_descriptor.incl.pl1  */
      276 
      277 
  5     1 /* BEGIN INCLUDE FILE ... std_descriptor_types.incl.pl1 */
  5     2 
  5     3 
  5     4 /****^  HISTORY COMMENTS:
  5     5*  1) change(86-09-05,JMAthane), approve(86-09-05,MCR7525),
  5     6*     audit(86-09-11,Martinson), install(86-11-12,MR12.0-1208):
  5     7*     Added pascal_string_type_dtype descriptor type.  Its number is 87.
  5     8*     Objects of this type are PASCAL string types.
  5     9*  2) change(88-09-20,WAAnderson), approve(88-09-20,MCR7952),
  5    10*     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
  5    11*     Added the new C types.
  5    12*                                                   END HISTORY COMMENTS */
  5    13 
  5    14 /* This include file defines mnemonic names for the Multics
  5    15*   standard descriptor types, using both pl1 and cobol terminology.
  5    16*   PG 780613
  5    17*   JRD 790530
  5    18*   JRD 791016
  5    19*   MBW 810731
  5    20*   TGO 830614 Add hex types.
  5    21*   Modified June 83 JMAthane to add PASCAL data types
  5    22*   TGO 840120 Add float dec extended and generic, float binary generic
  5    23**/
  5    24 
  5    25      dcl	   (real_fix_bin_1_dtype  init (1),
  5    26 	   real_fix_bin_2_dtype   init (2),
  5    27 	   real_flt_bin_1_dtype   init (3),
  5    28 	   real_flt_bin_2_dtype   init (4),
  5    29 	   cplx_fix_bin_1_dtype   init (5),
  5    30 	   cplx_fix_bin_2_dtype   init (6),
  5    31 	   cplx_flt_bin_1_dtype   init (7),
  5    32 	   cplx_flt_bin_2_dtype   init (8),
  5    33 	   real_fix_dec_9bit_ls_dtype init (9),
  5    34 	   real_flt_dec_9bit_dtype init (10),
  5    35 	   cplx_fix_dec_9bit_ls_dtype init (11),
  5    36 	   cplx_flt_dec_9bit_dtype init (12),
  5    37 	   pointer_dtype	      init (13),
  5    38 	   offset_dtype	      init (14),
  5    39 	   label_dtype	      init (15),
  5    40 	   entry_dtype	      init (16),
  5    41 	   structure_dtype	      init (17),
  5    42 	   area_dtype	      init (18),
  5    43 	   bit_dtype	      init (19),
  5    44 	   varying_bit_dtype      init (20),
  5    45 	   char_dtype	      init (21),
  5    46 	   varying_char_dtype     init (22),
  5    47 	   file_dtype	      init (23),
  5    48 	   real_fix_dec_9bit_ls_overp_dtype init (29),
  5    49 	   real_fix_dec_9bit_ts_overp_dtype init (30),
  5    50 	   real_fix_bin_1_uns_dtype init (33),
  5    51 	   real_fix_bin_2_uns_dtype init (34),
  5    52 	   real_fix_dec_9bit_uns_dtype init (35),
  5    53 	   real_fix_dec_9bit_ts_dtype init (36),
  5    54 	   real_fix_dec_4bit_uns_dtype init (38),	/* digit-aligned */
  5    55 	   real_fix_dec_4bit_ts_dtype init (39),	/* byte-aligned */
  5    56 	   real_fix_dec_4bit_bytealigned_uns_dtype init (40), /* COBOL */
  5    57 	   real_fix_dec_4bit_ls_dtype init (41),	/* digit-aligned */
  5    58 	   real_flt_dec_4bit_dtype init (42),		/* digit-aligned */
  5    59 	   real_fix_dec_4bit_bytealigned_ls_dtype init (43),
  5    60 	   real_flt_dec_4bit_bytealigned_dtype init (44),
  5    61 	   cplx_fix_dec_4bit_bytealigned_ls_dtype init (45),
  5    62 	   cplx_flt_dec_4bit_bytealigned_dtype init (46),
  5    63 	   real_flt_hex_1_dtype   init (47),
  5    64 	   real_flt_hex_2_dtype   init (48),
  5    65 	   cplx_flt_hex_1_dtype   init (49),
  5    66 	   cplx_flt_hex_2_dtype   init (50),
  5    67 	   c_typeref_dtype        init (54),
  5    68 	   c_enum_dtype           init (55),
  5    69              c_enum_const_dtype     init (56),
  5    70 	   c_union_dtype          init (57),
  5    71 	   algol68_straight_dtype init (59),
  5    72 	   algol68_format_dtype   init (60),
  5    73 	   algol68_array_descriptor_dtype init (61),
  5    74 	   algol68_union_dtype    init (62),
  5    75 
  5    76 	   cobol_comp_6_dtype     init (1),
  5    77 	   cobol_comp_7_dtype     init (1),
  5    78 	   cobol_display_ls_dtype init (9),
  5    79 	   cobol_structure_dtype  init (17),
  5    80 	   cobol_char_string_dtype init (21),
  5    81 	   cobol_display_ls_overp_dtype init (29),
  5    82 	   cobol_display_ts_overp_dtype init (30),
  5    83 	   cobol_display_uns_dtype init (35),
  5    84 	   cobol_display_ts_dtype init (36),
  5    85 	   cobol_comp_8_uns_dtype init (38),		/* digit aligned */
  5    86 	   cobol_comp_5_ts_dtype  init (39),		/* byte aligned */
  5    87 	   cobol_comp_5_uns_dtype init (40),
  5    88 	   cobol_comp_8_ls_dtype  init (41),		/* digit aligned */
  5    89 	   real_flt_dec_extended_dtype init (81),	/* 9-bit exponent */
  5    90 	   cplx_flt_dec_extended_dtype init (82),	/* 9-bit exponent */
  5    91 	   real_flt_dec_generic_dtype init (83),	/* generic float decimal */
  5    92 	   cplx_flt_dec_generic_dtype init (84),
  5    93 	   real_flt_bin_generic_dtype init (85),	/* generic float binary */
  5    94 	   cplx_flt_bin_generic_dtype init (86)) fixed bin internal static options (constant);
  5    95 
  5    96      dcl	   (ft_integer_dtype      init (1),
  5    97 	   ft_real_dtype	      init (3),
  5    98 	   ft_double_dtype	      init (4),
  5    99 	   ft_complex_dtype	      init (7),
  5   100 	   ft_complex_double_dtype init (8),
  5   101 	   ft_external_dtype      init (16),
  5   102 	   ft_logical_dtype	      init (19),
  5   103 	   ft_char_dtype	      init (21),
  5   104 	   ft_hex_real_dtype      init (47),
  5   105 	   ft_hex_double_dtype    init (48),
  5   106 	   ft_hex_complex_dtype   init (49),
  5   107 	   ft_hex_complex_double_dtype init (50)
  5   108 	   )		      fixed bin internal static options (constant);
  5   109 
  5   110      dcl	   (algol68_short_int_dtype init (1),
  5   111 	   algol68_int_dtype      init (1),
  5   112 	   algol68_long_int_dtype init (2),
  5   113 	   algol68_real_dtype     init (3),
  5   114 	   algol68_long_real_dtype init (4),
  5   115 	   algol68_compl_dtype    init (7),
  5   116 	   algol68_long_compl_dtype init (8),
  5   117 	   algol68_bits_dtype     init (19),
  5   118 	   algol68_bool_dtype     init (19),
  5   119 	   algol68_char_dtype     init (21),
  5   120 	   algol68_byte_dtype     init (21),
  5   121 	   algol68_struct_struct_char_dtype init (22),
  5   122 	   algol68_struct_struct_bool_dtype init (20)
  5   123 	   )		      fixed bin internal static options (constant);
  5   124 
  5   125      dcl	   (label_constant_runtime_dtype init (24),
  5   126 	   int_entry_runtime_dtype init (25),
  5   127 	   ext_entry_runtime_dtype init (26),
  5   128 	   ext_procedure_runtime_dtype init (27),
  5   129 	   picture_runtime_dtype  init (63)
  5   130 	   )		      fixed bin internal static options (constant);
  5   131 
  5   132      dcl	   (pascal_integer_dtype  init (1),
  5   133 	   pascal_real_dtype      init (4),
  5   134 	   pascal_label_dtype     init (24),
  5   135 	   pascal_internal_procedure_dtype init (25),
  5   136 	   pascal_exportable_procedure_dtype init (26),
  5   137 	   pascal_imported_procedure_dtype init (27),
  5   138 	   pascal_typed_pointer_type_dtype init (64),
  5   139 	   pascal_char_dtype      init (65),
  5   140 	   pascal_boolean_dtype   init (66),
  5   141 	   pascal_record_file_type_dtype init (67),
  5   142 	   pascal_record_type_dtype init (68),
  5   143 	   pascal_set_dtype	      init (69),
  5   144 	   pascal_enumerated_type_dtype init (70),
  5   145 	   pascal_enumerated_type_element_dtype init (71),
  5   146 	   pascal_enumerated_type_instance_dtype init (72),
  5   147 	   pascal_user_defined_type_dtype init (73),
  5   148 	   pascal_user_defined_type_instance_dtype init (74),
  5   149 	   pascal_text_file_dtype init (75),
  5   150 	   pascal_procedure_type_dtype init (76),
  5   151 	   pascal_variable_formal_parameter_dtype init (77),
  5   152 	   pascal_value_formal_parameter_dtype init (78),
  5   153 	   pascal_entry_formal_parameter_dtype init (79),
  5   154 	   pascal_parameter_procedure_dtype init (80),
  5   155 	   pascal_string_type_dtype init (87)) fixed bin int static options (constant);
  5   156 
  5   157 
  5   158 /* END INCLUDE FILE ... std_descriptor_types.incl.pl1 */
      278 
      279    end dmu_compare_strings;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/24/88  1400.1  dmu_compare_strings.pl1           >special_ldd>install>MR12.2-1184>dmu_compare_strings.pl1
270          1    04/16/82  0958.1  sub_err_flags.incl.pl1            >ldd>include>sub_err_flags.incl.pl1
272          2    01/07/85  0858.8  dm_field_table.incl.pl1           >ldd>include>dm_field_table.incl.pl1
274          3    10/14/83  1609.1  vu_typed_vector.incl.pl1          >ldd>include>vu_typed_vector.incl.pl1
276          4    11/02/83  1845.0  arg_descriptor.incl.pl1           >ldd>include>arg_descriptor.incl.pl1
278          5    10/24/88  1336.9  std_descriptor_types.incl.pl1     >special_ldd>install>MR12.2-1184>std_descriptor_types.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ACTION_CANT_RESTART             000007 constant        bit(36)                  initial dcl 1-7 set ref 264*
BITS_PER_BYTE                          constant        fixed bin(17,0)          initial dcl 102 ref 147 178
BITS_PER_WORD                          constant        fixed bin(17,0)          initial dcl 102 ref 147 157 158 178 179 219 225
BYTES_PER_WORD                         constant        fixed bin(17,0)          initial dcl 102 ref 167
FIELD_TABLE_VERSION_3           000000 constant        char(8)                  initial dcl 2-69 set ref 123*
addr                                                   builtin function         dcl 96 ref 141 154 158 175 179 201 204 211 213 214
                                                                                  245 246 247
arg_descriptor                         based           structure                level 1 dcl 4-6
arg_descriptor_ptr              000144 automatic       pointer                  dcl 4-34 set ref 141* 143 147 153 164 167 174
based_real_fix_bin_1u                  based           fixed bin(35,0)          packed unaligned dcl 86 ref 154 175
bin                                                    builtin function         dcl 96 ref 237 240 256
bit_dtype                              constant        fixed bin(17,0)          initial dcl 5-25 ref 143
char_dtype                             constant        fixed bin(17,0)          initial dcl 5-25 ref 164
copy                                                   builtin function         dcl 96 ref 219 225
current_field_id                000107 automatic       fixed bin(35,0)          initial dcl 63 set ref 63* 233* 234 235
current_field_location          000111 automatic       fixed bin(35,0)          initial dcl 63 set ref 63* 234* 237 240
current_field_variable_length   000110 automatic       fixed bin(35,0)          initial dcl 63 set ref 63* 235* 237 240
descriptor                6            based           bit(36)                  array level 3 dcl 2-36 set ref 141 214 247
dmu_compare_values$field_to_field
                                000010 constant        entry                    external dcl 110 ref 250
error_table_$unimplemented_version
                                000014 external static fixed bin(35,0)          dcl 117 set ref 264*
extended_arg_type               000146 automatic       fixed bin(17,0)          initial dcl 4-36 set ref 4-36*
field                     5            based           structure                array level 2 dcl 2-36 set ref 132
field_descriptor_ptr            000140 automatic       pointer                  initial dcl 82 set ref 82* 204* 214* 247* 250*
field_id                               based           fixed bin(17,0)          array level 3 dcl 2-36 ref 233
field_idx                       000106 automatic       fixed bin(17,0)          initial dcl 62 set ref 62* 194* 196 201 206 211 213
                                                                                  214 219 219 219 225 225 225 231 247* 256
field_table                            based           structure                level 1 dcl 2-36
field_table_ptr                 000142 automatic       pointer                  dcl 2-65 set ref 122* 123 132 133 141 143 154 158
                                                                                  175 179 186 189 189 191 201 206 211 213 214 219
                                                                                  219 219 225 225 225 231 233 234 235 247
flag                            000100 automatic       bit(1)                   level 2 packed packed unaligned dcl 54 set ref 151*
                                                                                  171*
hbound                                                 builtin function         dcl 96 ref 132
key1_bit_array                         based           bit(1)                   array packed unaligned dcl 89 set ref 201 211 245
key1_field_value_length         000131 automatic       fixed bin(35,0)          dcl 73 set ref 200* 210* 219* 250*
key1_field_value_offset         000134 automatic       fixed bin(24,0)          dcl 76 set ref 224* 237* 237 245
key1_field_value_ptr            000132 automatic       pointer                  dcl 75 set ref 201* 211* 245* 250*
key1_location_of_first_varying_field
                                000135 automatic       fixed bin(35,0)          initial dcl 78 set ref 78* 133* 224
key2_bit_array                         based           bit(1)                   array packed unaligned dcl 91 set ref 154 158 175
                                                                                  179 213 246
key2_field_value_length         000125 automatic       fixed bin(35,0)          dcl 68 set ref 202* 212* 225* 250*
key2_field_value_offset         000130 automatic       fixed bin(24,0)          dcl 71 set ref 230* 240* 240 246
key2_field_value_ptr            000126 automatic       pointer                  dcl 70 set ref 203* 213* 246* 250*
key2_location_of_first_varying_field
                                000136 automatic       fixed bin(35,0)          initial dcl 78 set ref 78* 133* 186* 189* 191* 230
last_field_is_truncated         000101 automatic       bit(1)                   initial dcl 56 set ref 56* 135* 161* 182* 186 196
last_field_length_in_bits       000137 automatic       fixed bin(35,0)          initial dcl 80 set ref 80* 157* 186
last_field_value_length         000104 automatic       fixed bin(35,0)          initial dcl 59 set ref 59* 154* 157 175* 178 202
last_field_value_length_in_bits 000105 automatic       fixed bin(35,0)          initial dcl 59 set ref 59* 178*
last_field_value_ptr            000102 automatic       pointer                  initial dcl 58 set ref 58* 158* 179* 203
length_in_bits           10            based           fixed bin(35,0)          array level 3 dcl 2-36 ref 219 219 225 225 235
location                  7            based           fixed bin(35,0)          array level 3 dcl 2-36 ref 154 158 175 179 186 189
                                                                                  201 211 213 219 225 234
location_of_first_varying_field
                          4            based           fixed bin(35,0)          level 2 dcl 2-36 ref 133 191
maximum_field_idx               000112 automatic       fixed bin(17,0)          initial dcl 65 set ref 65* 132* 140* 194
myname                          000114 automatic       varying char(32)         initial dcl 67 set ref 67* 264*
null                                                   builtin function         dcl 96 ref 58 82 264 264
number_of_fields          2            based           fixed bin(17,0)          level 2 dcl 2-36 ref 132 143 189 206 231 233
p_code                                 parameter       fixed bin(35,0)          dcl 50 set ref 33 125* 194 250*
p_expected_version                     parameter       char                     dcl 262 set ref 260 264 264*
p_field_table_ptr                      parameter       pointer                  dcl 40 ref 33 122
p_first_inequal_field_id               parameter       fixed bin(17,0)          dcl 46 set ref 33 256*
p_key1_equal_to_key2                   parameter       bit(1)                   dcl 48 set ref 33 126* 194 250* 256
p_key1_less_than_key2                  parameter       bit(1)                   dcl 49 set ref 33 127* 250*
p_key1_string                          based           bit                      packed unaligned dcl 88 ref 219 237
p_key1_string_length                   parameter       fixed bin(24,0)          dcl 42 ref 33 219 237
p_key1_string_ptr                      parameter       pointer                  dcl 41 ref 33 201 211 219 237 245
p_key2_last_field_idx                  parameter       fixed bin(17,0)          packed unaligned dcl 45 ref 33 129 140 141 143 154
                                                                                  158 175 179 186 189 189 196
p_key2_string                          based           bit                      packed unaligned dcl 90 ref 225 240
p_key2_string_length                   parameter       fixed bin(24,0)          dcl 44 ref 33 225 240
p_key2_string_ptr                      parameter       pointer                  dcl 43 ref 33 154 158 175 179 213 225 240 246
p_received_version                     parameter       char                     dcl 262 set ref 260 264 264*
p_structure_name                       parameter       char                     dcl 262 set ref 260 264*
packed                    0(07) 000100 automatic       bit(1)                   level 2 packed packed unaligned dcl 54 set ref 150*
                                                                                  170*
size                      0(12) 000100 automatic       fixed bin(24,0)          level 2 in structure "truncated_field_descriptor"
                                                                                  packed packed unsigned unaligned dcl 54
                                                                                  in procedure "dmu_compare_strings" set ref 153*
                                                                                  174* 200
size                      0(12)        based           fixed bin(24,0)          level 2 in structure "arg_descriptor" packed packed
                                                                                  unsigned unaligned dcl 4-6 in procedure
                                                                                  "dmu_compare_strings" ref 147 153 167 174
sub_err_                        000012 constant        entry                    external dcl 113 ref 264
substr                                                 builtin function         dcl 96 ref 219 225 237 240
truncated_field_descriptor      000100 automatic       structure                level 1 packed packed unaligned dcl 54 set ref 204
type                      0(01) 000100 automatic       fixed bin(6,0)           level 2 in structure "truncated_field_descriptor"
                                                                                  packed packed unsigned unaligned dcl 54
                                                                                  in procedure "dmu_compare_strings" set ref 152*
                                                                                  173*
type                      0(01)        based           fixed bin(6,0)           level 2 in structure "arg_descriptor" packed packed
                                                                                  unsigned unaligned dcl 4-6 in procedure
                                                                                  "dmu_compare_strings" ref 143 164
unspec                                                 builtin function         dcl 96 set ref 219* 225*
varying_bit_dtype                      constant        fixed bin(17,0)          initial dcl 5-25 ref 152
varying_char_dtype                     constant        fixed bin(17,0)          initial dcl 5-25 ref 173
varying_field_idx               000113 automatic       fixed bin(17,0)          initial dcl 66 set ref 66* 231* 233*
varying_field_index                    based           fixed bin(17,0)          array level 3 dcl 2-36 ref 143 206 231
varying_field_map                      based           structure                array level 2 dcl 2-36
version                                based           char(8)                  initial level 2 dcl 2-36 set ref 123*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ACTION_CAN_RESTART                     internal static bit(36)                  initial dcl 1-7
ACTION_DEFAULT_RESTART                 internal static bit(36)                  initial dcl 1-7
ACTION_QUIET_RESTART                   internal static bit(36)                  initial dcl 1-7
ACTION_SUPPORT_SIGNAL                  internal static bit(36)                  initial dcl 1-7
GENERAL_TYPED_VECTOR_TYPE              internal static fixed bin(17,0)          initial dcl 3-43
OLD_SIMPLE_TYPED_VECTOR_TYPE           internal static fixed bin(17,0)          initial dcl 3-43
SIMPLE_TYPED_VECTOR_TYPE               internal static fixed bin(17,0)          initial dcl 3-43
algol68_array_descriptor_dtype         internal static fixed bin(17,0)          initial dcl 5-25
algol68_bits_dtype                     internal static fixed bin(17,0)          initial dcl 5-110
algol68_bool_dtype                     internal static fixed bin(17,0)          initial dcl 5-110
algol68_byte_dtype                     internal static fixed bin(17,0)          initial dcl 5-110
algol68_char_dtype                     internal static fixed bin(17,0)          initial dcl 5-110
algol68_compl_dtype                    internal static fixed bin(17,0)          initial dcl 5-110
algol68_format_dtype                   internal static fixed bin(17,0)          initial dcl 5-25
algol68_int_dtype                      internal static fixed bin(17,0)          initial dcl 5-110
algol68_long_compl_dtype               internal static fixed bin(17,0)          initial dcl 5-110
algol68_long_int_dtype                 internal static fixed bin(17,0)          initial dcl 5-110
algol68_long_real_dtype                internal static fixed bin(17,0)          initial dcl 5-110
algol68_real_dtype                     internal static fixed bin(17,0)          initial dcl 5-110
algol68_short_int_dtype                internal static fixed bin(17,0)          initial dcl 5-110
algol68_straight_dtype                 internal static fixed bin(17,0)          initial dcl 5-25
algol68_struct_struct_bool_dtype       internal static fixed bin(17,0)          initial dcl 5-110
algol68_struct_struct_char_dtype       internal static fixed bin(17,0)          initial dcl 5-110
algol68_union_dtype                    internal static fixed bin(17,0)          initial dcl 5-25
area_dtype                             internal static fixed bin(17,0)          initial dcl 5-25
c_enum_const_dtype                     internal static fixed bin(17,0)          initial dcl 5-25
c_enum_dtype                           internal static fixed bin(17,0)          initial dcl 5-25
c_typeref_dtype                        internal static fixed bin(17,0)          initial dcl 5-25
c_union_dtype                          internal static fixed bin(17,0)          initial dcl 5-25
cobol_char_string_dtype                internal static fixed bin(17,0)          initial dcl 5-25
cobol_comp_5_ts_dtype                  internal static fixed bin(17,0)          initial dcl 5-25
cobol_comp_5_uns_dtype                 internal static fixed bin(17,0)          initial dcl 5-25
cobol_comp_6_dtype                     internal static fixed bin(17,0)          initial dcl 5-25
cobol_comp_7_dtype                     internal static fixed bin(17,0)          initial dcl 5-25
cobol_comp_8_ls_dtype                  internal static fixed bin(17,0)          initial dcl 5-25
cobol_comp_8_uns_dtype                 internal static fixed bin(17,0)          initial dcl 5-25
cobol_display_ls_dtype                 internal static fixed bin(17,0)          initial dcl 5-25
cobol_display_ls_overp_dtype           internal static fixed bin(17,0)          initial dcl 5-25
cobol_display_ts_dtype                 internal static fixed bin(17,0)          initial dcl 5-25
cobol_display_ts_overp_dtype           internal static fixed bin(17,0)          initial dcl 5-25
cobol_display_uns_dtype                internal static fixed bin(17,0)          initial dcl 5-25
cobol_structure_dtype                  internal static fixed bin(17,0)          initial dcl 5-25
cplx_fix_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 5-25
cplx_fix_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 5-25
cplx_fix_dec_4bit_bytealigned_ls_dtype internal static fixed bin(17,0)          initial dcl 5-25
cplx_fix_dec_9bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 5-25
cplx_flt_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 5-25
cplx_flt_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 5-25
cplx_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 5-25
cplx_flt_dec_4bit_bytealigned_dtype    internal static fixed bin(17,0)          initial dcl 5-25
cplx_flt_dec_9bit_dtype                internal static fixed bin(17,0)          initial dcl 5-25
cplx_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 5-25
cplx_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 5-25
cplx_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 5-25
cplx_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 5-25
entry_dtype                            internal static fixed bin(17,0)          initial dcl 5-25
ext_entry_runtime_dtype                internal static fixed bin(17,0)          initial dcl 5-125
ext_procedure_runtime_dtype            internal static fixed bin(17,0)          initial dcl 5-125
extended_arg_descriptor                based           structure                level 1 dcl 4-21
field_name                             based           char                     packed unaligned dcl 2-71
field_name_length                      automatic       fixed bin(17,0)          dcl 2-73
field_name_ptr                         automatic       pointer                  dcl 2-74
file_dtype                             internal static fixed bin(17,0)          initial dcl 5-25
fixed_arg_descriptor                   based           structure                level 1 dcl 4-13
ft_char_dtype                          internal static fixed bin(17,0)          initial dcl 5-96
ft_complex_double_dtype                internal static fixed bin(17,0)          initial dcl 5-96
ft_complex_dtype                       internal static fixed bin(17,0)          initial dcl 5-96
ft_double_dtype                        internal static fixed bin(17,0)          initial dcl 5-96
ft_external_dtype                      internal static fixed bin(17,0)          initial dcl 5-96
ft_hex_complex_double_dtype            internal static fixed bin(17,0)          initial dcl 5-96
ft_hex_complex_dtype                   internal static fixed bin(17,0)          initial dcl 5-96
ft_hex_double_dtype                    internal static fixed bin(17,0)          initial dcl 5-96
ft_hex_real_dtype                      internal static fixed bin(17,0)          initial dcl 5-96
ft_integer_dtype                       internal static fixed bin(17,0)          initial dcl 5-96
ft_length_of_field_names               automatic       fixed bin(17,0)          dcl 2-66
ft_logical_dtype                       internal static fixed bin(17,0)          initial dcl 5-96
ft_number_of_fields                    automatic       fixed bin(17,0)          dcl 2-68
ft_real_dtype                          internal static fixed bin(17,0)          initial dcl 5-96
general_typed_vector                   based           structure                level 1 packed packed unaligned dcl 3-24
general_typed_vector_ptr               automatic       pointer                  dcl 3-38
gtv_number_of_dimensions               automatic       fixed bin(17,0)          dcl 3-40
int_entry_runtime_dtype                internal static fixed bin(17,0)          initial dcl 5-125
label_constant_runtime_dtype           internal static fixed bin(17,0)          initial dcl 5-125
label_dtype                            internal static fixed bin(17,0)          initial dcl 5-25
offset_dtype                           internal static fixed bin(17,0)          initial dcl 5-25
pascal_boolean_dtype                   internal static fixed bin(17,0)          initial dcl 5-132
pascal_char_dtype                      internal static fixed bin(17,0)          initial dcl 5-132
pascal_entry_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 5-132
pascal_enumerated_type_dtype           internal static fixed bin(17,0)          initial dcl 5-132
pascal_enumerated_type_element_dtype   internal static fixed bin(17,0)          initial dcl 5-132
pascal_enumerated_type_instance_dtype  internal static fixed bin(17,0)          initial dcl 5-132
pascal_exportable_procedure_dtype      internal static fixed bin(17,0)          initial dcl 5-132
pascal_imported_procedure_dtype        internal static fixed bin(17,0)          initial dcl 5-132
pascal_integer_dtype                   internal static fixed bin(17,0)          initial dcl 5-132
pascal_internal_procedure_dtype        internal static fixed bin(17,0)          initial dcl 5-132
pascal_label_dtype                     internal static fixed bin(17,0)          initial dcl 5-132
pascal_parameter_procedure_dtype       internal static fixed bin(17,0)          initial dcl 5-132
pascal_procedure_type_dtype            internal static fixed bin(17,0)          initial dcl 5-132
pascal_real_dtype                      internal static fixed bin(17,0)          initial dcl 5-132
pascal_record_file_type_dtype          internal static fixed bin(17,0)          initial dcl 5-132
pascal_record_type_dtype               internal static fixed bin(17,0)          initial dcl 5-132
pascal_set_dtype                       internal static fixed bin(17,0)          initial dcl 5-132
pascal_string_type_dtype               internal static fixed bin(17,0)          initial dcl 5-132
pascal_text_file_dtype                 internal static fixed bin(17,0)          initial dcl 5-132
pascal_typed_pointer_type_dtype        internal static fixed bin(17,0)          initial dcl 5-132
pascal_user_defined_type_dtype         internal static fixed bin(17,0)          initial dcl 5-132
pascal_user_defined_type_instance_dtype
                                       internal static fixed bin(17,0)          initial dcl 5-132
pascal_value_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 5-132
pascal_variable_formal_parameter_dtype internal static fixed bin(17,0)          initial dcl 5-132
picture_runtime_dtype                  internal static fixed bin(17,0)          initial dcl 5-125
pointer_dtype                          internal static fixed bin(17,0)          initial dcl 5-25
real_fix_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 5-25
real_fix_bin_1_uns_dtype               internal static fixed bin(17,0)          initial dcl 5-25
real_fix_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 5-25
real_fix_bin_2_uns_dtype               internal static fixed bin(17,0)          initial dcl 5-25
real_fix_dec_4bit_bytealigned_ls_dtype internal static fixed bin(17,0)          initial dcl 5-25
real_fix_dec_4bit_bytealigned_uns_dtype
                                       internal static fixed bin(17,0)          initial dcl 5-25
real_fix_dec_4bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 5-25
real_fix_dec_4bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 5-25
real_fix_dec_4bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 5-25
real_fix_dec_9bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 5-25
real_fix_dec_9bit_ls_overp_dtype       internal static fixed bin(17,0)          initial dcl 5-25
real_fix_dec_9bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 5-25
real_fix_dec_9bit_ts_overp_dtype       internal static fixed bin(17,0)          initial dcl 5-25
real_fix_dec_9bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 5-25
real_flt_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 5-25
real_flt_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 5-25
real_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 5-25
real_flt_dec_4bit_bytealigned_dtype    internal static fixed bin(17,0)          initial dcl 5-25
real_flt_dec_4bit_dtype                internal static fixed bin(17,0)          initial dcl 5-25
real_flt_dec_9bit_dtype                internal static fixed bin(17,0)          initial dcl 5-25
real_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 5-25
real_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 5-25
real_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 5-25
real_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 5-25
simple_typed_vector                    based           structure                level 1 packed packed unaligned dcl 3-17
simple_typed_vector_ptr                automatic       pointer                  dcl 3-33
structure_dtype                        internal static fixed bin(17,0)          initial dcl 5-25
stv_number_of_dimensions               automatic       fixed bin(17,0)          dcl 3-35

NAMES DECLARED BY EXPLICIT CONTEXT.
CHECK_VERSION_CHAR              000743 constant        entry                    internal dcl 260 ref 123
FIELD_LOOP                      000370 constant        label                    dcl 194
PREPARE_NONVARYING_FIELD        000456 constant        label                    dcl 206
PREPARE_TRUNCATED_FIELD         000417 constant        label                    dcl 196
PREPARE_VARYING_FIELD           000504 constant        label                    dcl 216
SETUP_TRUNCATED_FIELD           000203 constant        label                    dcl 137
SET_VARYING_FIELD_VALUE_OFFSET  000602 constant        label                    dcl 231
dmu_compare_strings             000065 constant        entry                    external dcl 33

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1146        1164    1061        1156
Length      1452    1061        16         251      65           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
dmu_compare_strings                 220 external procedure  is an external procedure.  
CHECK_VERSION_CHAR                      internal procedure  shares stack frame of external procedure dmu_compare_strings.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
dmu_compare_strings      000100 truncated_field_descriptor  dmu_compare_strings
                         000101 last_field_is_truncated     dmu_compare_strings
                         000102 last_field_value_ptr        dmu_compare_strings
                         000104 last_field_value_length     dmu_compare_strings
                         000105 last_field_value_length_in_bits
                                                            dmu_compare_strings
                         000106 field_idx                   dmu_compare_strings
                         000107 current_field_id            dmu_compare_strings
                         000110 current_field_variable_length
                                                            dmu_compare_strings
                         000111 current_field_location      dmu_compare_strings
                         000112 maximum_field_idx           dmu_compare_strings
                         000113 varying_field_idx           dmu_compare_strings
                         000114 myname                      dmu_compare_strings
                         000125 key2_field_value_length     dmu_compare_strings
                         000126 key2_field_value_ptr        dmu_compare_strings
                         000130 key2_field_value_offset     dmu_compare_strings
                         000131 key1_field_value_length     dmu_compare_strings
                         000132 key1_field_value_ptr        dmu_compare_strings
                         000134 key1_field_value_offset     dmu_compare_strings
                         000135 key1_location_of_first_varying_field
                                                            dmu_compare_strings
                         000136 key2_location_of_first_varying_field
                                                            dmu_compare_strings
                         000137 last_field_length_in_bits   dmu_compare_strings
                         000140 field_descriptor_ptr        dmu_compare_strings
                         000142 field_table_ptr             dmu_compare_strings
                         000144 arg_descriptor_ptr          dmu_compare_strings
                         000146 extended_arg_type           dmu_compare_strings

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_bit_temp      cat_realloc_bits    call_ext_out_desc   call_ext_out        return_mac          longbs_to_fx2
shorten_stack       ext_entry           set_bits_eis

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
dmu_compare_values$field_to_field                           sub_err_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$unimplemented_version




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     33 000055        56 000072        58 000073        59 000075        62 000100        63 000102        65 000106
     66 000110        67 000111        78 000116        80 000121        82 000122    4   36 000124       122 000126
    123 000132       125 000155       126 000157       127 000161       129 000162       132 000173       133 000176
    135 000201       136 000202       140 000203       141 000204       143 000210       147 000231       150 000237
    151 000241       152 000243       153 000247       154 000250       157 000262       158 000266       161 000275
    163 000277       164 000300       167 000302       170 000310       171 000312       173 000314       174 000320
    175 000321       178 000333       179 000336       182 000345       186 000347       189 000357       191 000366
    194 000370       196 000405       200 000417       201 000422       202 000434       203 000436       204 000440
    205 000442       206 000443       210 000456       211 000460       212 000471       213 000474       214 000501
    215 000503       219 000504       224 000545       225 000550       230 000577       231 000602       233 000613
    234 000624       235 000630       237 000632       240 000644       243 000656       245 000660       246 000670
    247 000677       250 000703       254 000730       256 000732       258 000742       260 000743       264 000766
    268 001057


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
