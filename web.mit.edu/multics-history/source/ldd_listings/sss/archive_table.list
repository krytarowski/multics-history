	COMPILATION LISTING OF SEGMENT archive_table
	Compiled by: Multics PL/I Compiler, Release 28e, of February 14, 1985
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 04/09/85  1103.7 mst Tue
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 /* format: style4 */
        7 archive_table: act: proc;
        8 
        9 /* Returns names of archive components matching starnames, or all.
       10*
       11*   Usage:     act archive_path {starnames} {-control_args}
       12*   Usage:     [act archive_path {starnames} {-control_args}]
       13*
       14*   where archive_path cannot contain stars, and starnames can.
       15*   control_arg can be -absolute_pathname (-absp).
       16*
       17*   Coded 08/29/79 S. Herbst */
       18 /* TR7460  Add -absolute_pathname 10/30/80 S. Herbst */
       19 /* TR11457 Have act use archive_ to prevent misbehavior with static storage 01/10/82 L. Baldwin */
       20 /* Added many control arguments 11/30/82 E. N. Kittlitz */
       21 /* Fixed no_star error message 06/17/83 E. N. Kittlitz */
       22 /* Change to use date_time_$format 06/19/84 J A Falksen
       23*   	Fix undocumented bug with -mode output */
       24 /* Fix 2 bugs introduced above. AF output needs rtrim before requote.
       25*	-absp strings must include "::". 84-11-14 jaf */
       26 
       27 dcl  area area based (area_ptr);
       28 dcl  arg char (arg_len) based (arg_ptr);
       29 dcl  return_arg char (return_len) varying based (return_ptr);
       30 dcl  starname (starname_count) char (32) based (starname_ptr);
       31 
       32 dcl  archive_string char (168) varying;
       33 dcl  dn char (168);
       34 dcl  en char (32);
       35 dcl  item char (512) varying;
       36 
       37 dcl  date_format char (15) int static options (constant) init ("^<date>_^<time>");
       38 dcl  dt_len fixed bin;				/* length of date field	       */
       39 dcl  bc_pic picture "(8)z9";
       40 dcl  REW char (3) int static options (constant) init ("rew");
       41 
       42 /* max_day is "1999-12-31  23:59:59.999999 gmt Fri"		       */
       43 /* None of the component values have leading or trailing zeroes, so no       */
       44 /*  matter what kind of space or zero suppression has been called for in a   */
       45 /*  user's default formats, this value will cause a max-length result from   */
       46 /*  date_time_$format.					       */
       47 dcl  max_day fixed bin (71) int static options (constant) init (3124137599999999);
       48 
       49 dcl  (absp_sw, af_sw, bc_sw, dtcm_sw, dtud_sw, got_path_sw, he_sw, mode_sw, name_sw, requote_sw) bit (1) aligned;
       50 
       51 dcl  (area_ptr, arg_ptr, return_ptr, seg_ptr, starname_ptr) ptr;
       52 
       53 dcl  (arg_count, starname_count, i) fixed bin;
       54 dcl  (arg_len, return_len) fixed bin;
       55 dcl  first_starname_index fixed bin;
       56 dcl  archive_bit_count fixed bin (24);
       57 dcl  code fixed bin (35);
       58 dcl  mode_v fixed bin;
       59 dcl  name_v fixed bin;
       60 
       61 dcl  1 l_archive_component_info aligned like archive_component_info;
       62 
       63 dcl  ME char (16) static options (constant) init ("archive_table");
       64 
       65 dcl  error_table_$badopt fixed bin (35) ext;
       66 dcl  error_table_$badstar fixed bin (35) ext;
       67 dcl  error_table_$inconsistent fixed bin (35) ext;
       68 dcl  error_table_$noarg fixed bin (35) ext static;
       69 dcl  error_table_$nostars fixed bin (35) ext;
       70 dcl  error_table_$not_act_fnc fixed bin (35) ext;
       71 dcl  complain entry variable options (variable);
       72 
       73 dcl  (active_fnc_err_, active_fnc_err_$suppress_name) entry options (variable);
       74 dcl  archive_$next_component_info entry (ptr, fixed bin (24), ptr, ptr, fixed bin (35));
       75 dcl  check_star_name_$entry entry (char (*), fixed bin (35));
       76 dcl  (com_err_, com_err_$suppress_name) entry options (variable);
       77 dcl  cu_$af_return_arg entry (fixed bin, ptr, fixed bin, fixed bin (35));
       78 dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
       79 dcl  date_time_$format entry (char (*), fixed bin (71), char (*), char (*))
       80 	returns (char (250) var);
       81 dcl  expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed bin (35));
       82 dcl  get_system_free_area_ entry returns (ptr);
       83 dcl  initiate_file_ entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
       84 dcl  ioa_ entry options (variable);
       85 dcl  match_star_name_ entry (char (*), char (*), fixed bin (35));
       86 dcl  pathname_ entry (char (*), char (*)) returns (char (168));
       87 dcl  requote_string_ entry (char (*) aligned) returns (char (*));
       88 dcl  terminate_file_ entry (ptr, fixed bin (24), bit (*), fixed bin (35));
       89 
       90 dcl  (addr, bin, char, fixed, index, length, ltrim, null, rtrim, substr
       91      ) builtin;
       92 
       93 dcl  cleanup condition;
       94 
       95 	seg_ptr, starname_ptr = null;
       96 	archive_component_info_ptr = addr (l_archive_component_info);
       97 	l_archive_component_info.version = ARCHIVE_COMPONENT_INFO_VERSION_1;
       98 
       99 	on cleanup call clean_up;
      100 
      101 /* Arg processing */
      102 
      103 	call cu_$af_return_arg (arg_count, return_ptr, return_len, code);
      104 	if code = error_table_$not_act_fnc then do;
      105 	     af_sw = "0"b;
      106 	     complain = com_err_;
      107 	end;
      108 	else do;
      109 	     af_sw = "1"b;
      110 	     complain = active_fnc_err_;
      111 	     return_arg = "";
      112 	end;
      113 
      114 	if arg_count = 0 then do;
      115 	     if af_sw then call active_fnc_err_$suppress_name
      116 		     (0, ME, "Usage:  [act archive_path {starnames} {-control_args}]");
      117 	     else call com_err_$suppress_name
      118 		     (0, ME, "Usage:  act archive_path {starnames} {-control_args}");
      119 	     call clean_up;
      120 	     return;
      121 	end;
      122 
      123 	absp_sw, bc_sw, dtcm_sw, dtud_sw, got_path_sw, he_sw, mode_sw = "0"b;
      124 	name_sw = "1"b;				/* default attribute */
      125 	requote_sw = af_sw;				/* assume requote if active function */
      126 
      127 	if af_sw then
      128 	     mode_v, name_v = 0;
      129 	else do;
      130 	     mode_v = 4;
      131 	     name_v = 32;
      132 	end;
      133 
      134 	do i = 1 to arg_count;
      135 	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
      136 	     if index (arg, "-") = 1 then do;
      137 		if arg = "-absolute_pathname" | arg = "-absp" then absp_sw = "1"b;
      138 		else if arg = "-bit_count" | arg = "-bc" then bc_sw = "1"b;
      139 		else if arg = "-component_name" | arg = "-cnm" then absp_sw = "0"b;
      140 		else if arg = "-date_time_contents_modified" | arg = "-dtcm" then dtcm_sw = "1"b;
      141 		else if arg = "-date_time_updated" | arg = "-dtud" then dtud_sw = "1"b;
      142 		else if arg = "-header" | arg = "-he" then he_sw = "1"b;
      143 		else if arg = "-mode" | arg = "-md" then mode_sw = "1"b;
      144 		else if arg = "-name" | arg = "-nm" then name_sw = "1"b;
      145 		else if arg = "-no_bit_count" | arg = "-nbc" then bc_sw = "0"b;
      146 		else if arg = "-no_date_time_contents_modified" | arg = "-ndtcm" then dtcm_sw = "0"b;
      147 		else if arg = "-no_date_time_updated" | arg = "-ndtud" then dtud_sw = "0"b;
      148 		else if arg = "-no_header" | arg = "-nhe" then he_sw = "0"b;
      149 		else if arg = "-no_mode" | arg = "-nmd" then mode_sw = "0"b;
      150 		else if arg = "-no_name" | arg = "-nnm" then name_sw = "0"b;
      151 		else if arg = "-no_requote" then requote_sw = "0"b;
      152 		else if arg = "-requote" then requote_sw = af_sw; /* only turn it on for AF call */
      153 
      154 		else do;
      155 		     call complain (error_table_$badopt, ME, "^a", arg);
      156 		     return;
      157 		end;
      158 	     end;
      159 	     else if ^got_path_sw then do;
      160 		got_path_sw = "1"b;
      161 		first_starname_index = i + 1;
      162 		call expand_pathname_$add_suffix (arg, "archive", dn, en, code);
      163 		if code ^= 0 then do;
      164 		     call complain (code, ME, "^a", arg);
      165 		     return;
      166 		end;
      167 		call check_star_name_$entry (en, code);
      168 		if code = 1 | code = 2 then code = error_table_$nostars;
      169 		if code ^= 0 then do;
      170 		     call complain (code, ME, "^a", arg);
      171 		     call clean_up;
      172 		     return;
      173 		end;
      174 	     end;
      175 	end;
      176 
      177 	if ^(bc_sw | dtcm_sw | dtud_sw | mode_sw | name_sw) then do;
      178 	     call complain (error_table_$inconsistent, ME, "No component attributes were selected.");
      179 	     return;
      180 	end;
      181 	if af_sw then
      182 	     if bin (bc_sw) + bin (dtcm_sw) + bin (dtud_sw) + bin (mode_sw) + bin (name_sw) < 2 then /* only one attribute */
      183 		requote_sw = "0"b;			/* so no item requoting */
      184 	if af_sw & he_sw then do;
      185 	     call complain (error_table_$inconsistent, ME, "-header cannot be specified as an active function control argument.");
      186 	     return;
      187 	end;
      188 	if ^got_path_sw then do;
      189 	     call complain (error_table_$noarg, ME, "An archive must be specified.");
      190 	     return;
      191 	end;
      192 
      193 /* initiate everything, checking access, etc. */
      194 
      195 	call initiate_file_ (dn, en, R_ACCESS, seg_ptr, archive_bit_count, code);
      196 	if seg_ptr = null then do;
      197 	     call complain (code, ME, "^a", pathname_ (dn, en));
      198 	     return;
      199 	end;
      200 
      201 /* get the first component of the archive */
      202 
      203 	l_archive_component_info.comp_ptr = null ();
      204 	call archive_$next_component_info (seg_ptr, archive_bit_count, (l_archive_component_info.comp_ptr), archive_component_info_ptr, code);
      205 	if code ^= 0 then do;
      206 	     call complain (code, ME, "^a", pathname_ (dn, en));
      207 	     return;
      208 	end;
      209 
      210 /* if starnames are specified, allocate storage, check for valid starnames */
      211 
      212 	if arg_count >= first_starname_index then do;
      213 	     starname_count = arg_count - 1;
      214 	     area_ptr = get_system_free_area_ ();
      215 	     allocate starname in (area) set (starname_ptr);
      216 	     starname_count = 0;
      217 
      218 	     do i = first_starname_index to arg_count;
      219 		call cu_$arg_ptr (i, arg_ptr, arg_len, code);
      220 		if index (arg, "-") ^= 1 then do;
      221 		     call check_star_name_$entry (arg, code);
      222 		     if code = error_table_$badstar then do;
      223 			call complain (code, ME, "^a", arg);
      224 			return;
      225 		     end;
      226 		     starname_count = starname_count + 1;
      227 		     starname (starname_count) = arg;
      228 		end;
      229 	     end;
      230 	end;
      231 	else starname_count = 0;
      232 
      233 	if (dtcm_sw | dtud_sw) & ^af_sw
      234 	then dt_len = length (date_time_$format (date_format, max_day, "", ""));
      235 	else dt_len = 1;
      236 						/* if -absp has been specified, precede each comp_nm with "dn>en.archive::" */
      237 
      238 	if absp_sw
      239 	then archive_string = rtrim (pathname_ (dn, en)) || "::";
      240 	else archive_string = "";
      241 
      242 /* find components matching starnames and return them to the user */
      243 
      244 	do while (l_archive_component_info.comp_ptr ^= null);
      245 	     code = 1;				/* nonzero */
      246 	     if starname_count ^= 0 then do;
      247 		do i = 1 to starname_count while (code ^= 0);
      248 		     call match_star_name_ (l_archive_component_info.name, starname (i), code);
      249 		end;
      250 		if code ^= 0 then go to SKIP;
      251 	     end;
      252 
      253 	     item = "";
      254 
      255 	     if name_sw
      256 	     then call add_string (archive_string || l_archive_component_info.name, length (archive_string) + length (rtrim (l_archive_component_info.name)));
      257 
      258 	     if dtud_sw
      259 	     then call add_string (date_time_$format (date_format, l_archive_component_info.time_updated, "", ""), dt_len);
      260 
      261 	     if mode_sw
      262 	     then call add_string (" " ||
      263 		     substr (REW, 1, fixed ((l_archive_component_info.access & R_ACCESS) ^= ""b))
      264 		     || substr (REW, 2, fixed ((l_archive_component_info.access & E_ACCESS) ^= ""b))
      265 		     || substr (REW, 3, fixed ((l_archive_component_info.access & W_ACCESS) ^= ""b)), 5);
      266 
      267 	     if dtcm_sw
      268 	     then call add_string (date_time_$format (date_format, l_archive_component_info.time_modified, "", ""), dt_len);
      269 
      270 	     if bc_sw
      271 	     then do;
      272 		if (length (item) > 0)
      273 		then item = item || " ";
      274 		bc_pic = l_archive_component_info.comp_bc;
      275 		if af_sw
      276 		then item = item || ltrim (bc_pic);
      277 		else item = item || bc_pic;
      278 	     end;
      279 
      280 	     if he_sw then do;
      281 		he_sw = ""b;
      282 		call ioa_ ("^/^11t^a^2/^[ name^27x^]^[ ^a^vx^;^2s^]^[ mode ^]^[ ^a^vx^;^2s^]^[    length^]^/",
      283 		     pathname_ (dn, en), name_sw,
      284 		     dtud_sw, "updated", dt_len - length ("updated"),
      285 		     mode_sw,
      286 		     dtcm_sw, "modified", dt_len - length ("modified"),
      287 		     bc_sw);
      288 	     end;
      289 	     if ^af_sw then call ioa_ ("^a", item);
      290 	     else do;
      291 		if length (return_arg) > 0 then return_arg = return_arg || " ";
      292 		if requote_sw then
      293 		     return_arg = return_arg || requote_string_ ((item));
      294 		else return_arg = return_arg || item;
      295 	     end;
      296 
      297 SKIP:	     call archive_$next_component_info (seg_ptr, archive_bit_count, (l_archive_component_info.comp_ptr), archive_component_info_ptr, code);
      298 	     if code ^= 0 then do;
      299 		call complain (code, ME, "^a", pathname_ (dn, en));
      300 		return;
      301 	     end;
      302 	end;
      303 
      304 	call clean_up;
      305 
      306 clean_up: proc;
      307 	call terminate_file_ (seg_ptr, 0, TERM_FILE_TERM, 0);
      308 	if starname_ptr ^= null then free starname in (area);
      309      end clean_up; 





      310 add_string: proc (str, len);
      311 
      312 dcl  str char (*) var,
      313      len fixed bin;
      314 
      315 	if (length (item) > 0)
      316 	then item = item || " ";
      317 	if af_sw
      318 	then item = item || requote_string_ (rtrim (str));
      319 	else item = item || char (str, len);
      320 
      321      end add_string;
      322 
  1     1 /* BEGIN INCLUDE FILE ... access_mode_values.incl.pl1
  1     2*
  1     3*   Values for the "access mode" argument so often used in hardcore
  1     4*   James R. Davis 26 Jan 81  MCR 4844
  1     5*   Added constants for SM access 4/28/82 Jay Pattin
  1     6*   Added text strings 03/19/85 Chris Jones
  1     7**/
  1     8 
  1     9 
  1    10 /* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
  1    11 dcl	(
  1    12 	N_ACCESS		   init ("000"b),
  1    13 	R_ACCESS		   init ("100"b),
  1    14 	E_ACCESS		   init ("010"b),
  1    15 	W_ACCESS		   init ("001"b),
  1    16 	RE_ACCESS		   init ("110"b),
  1    17 	REW_ACCESS	   init ("111"b),
  1    18 	RW_ACCESS		   init ("101"b),
  1    19 	S_ACCESS		   init ("100"b),
  1    20 	M_ACCESS		   init ("010"b),
  1    21 	A_ACCESS		   init ("001"b),
  1    22 	SA_ACCESS		   init ("101"b),
  1    23 	SM_ACCESS		   init ("110"b),
  1    24 	SMA_ACCESS	   init ("111"b)
  1    25 	)		   bit (3) internal static options (constant);
  1    26 
  1    27 /* The following arrays are meant to be accessed by doing either 1) bin (bit_value) or
  1    28*   2) divide (bin_value, 2) to come up with an index into the array. */
  1    29 
  1    30 dcl	SEG_ACCESS_MODE_NAMES  (0:7) init ("null", "W", "E", "EW", "R", "RW", "RE", "REW") char (4) internal
  1    31 			   static options (constant);
  1    32 
  1    33 dcl	DIR_ACCESS_MODE_NAMES  (0:7) init ("null", "A", "M", "MA", "S", "SA", "SM", "SMA") char (4) internal
  1    34 			   static options (constant);
  1    35 
  1    36 dcl	(
  1    37 	N_ACCESS_BIN	   init (00000b),
  1    38 	R_ACCESS_BIN	   init (01000b),
  1    39 	E_ACCESS_BIN	   init (00100b),
  1    40 	W_ACCESS_BIN	   init (00010b),
  1    41 	RW_ACCESS_BIN	   init (01010b),
  1    42 	RE_ACCESS_BIN	   init (01100b),
  1    43 	REW_ACCESS_BIN	   init (01110b),
  1    44 	S_ACCESS_BIN	   init (01000b),
  1    45 	M_ACCESS_BIN	   init (00010b),
  1    46 	A_ACCESS_BIN	   init (00001b),
  1    47 	SA_ACCESS_BIN	   init (01001b),
  1    48 	SM_ACCESS_BIN	   init (01010b),
  1    49 	SMA_ACCESS_BIN	   init (01011b)
  1    50 	)		   fixed bin (5) internal static options (constant);
  1    51 
  1    52 /* END INCLUDE FILE ... access_mode_values.incl.pl1 */
      323 
      324 
  2     1 /* BEGIN INCLUDE FILE ... archive_component_info.incl.pl1 ... WOS 01/13/81 */
  2     2 /* Structure describing an archive component, used by archive_ */
  2     3 
  2     4 dcl  archive_component_info_ptr pointer;
  2     5 
  2     6 dcl 1 archive_component_info aligned based (archive_component_info_ptr),
  2     7     2 version fixed bin,
  2     8     2 comp_bc fixed bin (24),
  2     9     2 comp_ptr pointer,
  2    10     2 name char (32) unaligned,
  2    11     2 time_modified fixed bin (71),
  2    12     2 time_updated fixed bin (71),
  2    13     2 comp_lth fixed bin (19),
  2    14     2 access bit (36) unaligned;
  2    15 
  2    16 dcl  ARCHIVE_COMPONENT_INFO_VERSION_1 fixed bin internal static options (constant) init (1);
  2    17 
  2    18 /* BEGIN INCLUDE FILE ... archive_component_info.incl.pl1 ... WOS 01/13/81 */
      325 
      326 
  3     1 /* BEGIN INCLUDE FILE ... terminate_file.incl.pl1 */
  3     2 /* format: style2,^inddcls,idind32 */
  3     3 
  3     4 declare 1 terminate_file_switches	based,
  3     5 	2 truncate		bit (1) unaligned,
  3     6 	2 set_bc			bit (1) unaligned,
  3     7 	2 terminate		bit (1) unaligned,
  3     8 	2 force_write		bit (1) unaligned,
  3     9 	2 delete			bit (1) unaligned;
  3    10 
  3    11 declare TERM_FILE_TRUNC		bit (1) internal static options (constant) initial ("1"b);
  3    12 declare TERM_FILE_BC		bit (2) internal static options (constant) initial ("01"b);
  3    13 declare TERM_FILE_TRUNC_BC		bit (2) internal static options (constant) initial ("11"b);
  3    14 declare TERM_FILE_TERM		bit (3) internal static options (constant) initial ("001"b);
  3    15 declare TERM_FILE_TRUNC_BC_TERM	bit (3) internal static options (constant) initial ("111"b);
  3    16 declare TERM_FILE_FORCE_WRITE		bit (4) internal static options (constant) initial ("0001"b);
  3    17 declare TERM_FILE_DELETE		bit (5) internal static options (constant) initial ("00001"b);
  3    18 
  3    19 /* END INCLUDE FILE ... terminate_file.incl.pl1 */
      327 
      328 
      329 
      330      end archive_table;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/08/85  1128.9  archive_table.pl1                 >spec>on>41-15>archive_table.pl1
323          1    04/08/85  1113.3  access_mode_values.incl.pl1       >spec>on>41-15>access_mode_values.incl.pl1
325          2    04/16/81  0942.6  archive_component_info.incl.pl1   >ldd>include>archive_component_info.incl.pl1
327          3    04/06/83  1239.4  terminate_file.incl.pl1           >ldd>include>terminate_file.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ARCHIVE_COMPONENT_INFO_VERSION_1       constant        fixed bin(17,0)          initial dcl 2-16 ref 97
E_ACCESS                               constant        bit(3)                   initial unaligned dcl 1-11 ref 261
ME                              000001 constant        char(16)                 initial unaligned dcl 63 set ref 115* 117* 155* 164*
                                                                                  170* 178* 185* 189* 197* 206* 223* 299*
REW                             000010 constant        char(3)                  initial unaligned dcl 40 ref 261 261 261
R_ACCESS                        000060 constant        bit(3)                   initial unaligned dcl 1-11 set ref 195* 261
TERM_FILE_TERM                  000000 constant        bit(3)                   initial unaligned dcl 3-14 set ref 307*
W_ACCESS                        000000 constant        bit(3)                   initial unaligned dcl 1-11 ref 261
absp_sw                         000442 automatic       bit(1)                   dcl 49 set ref 123* 137* 139* 238
access                   21     000500 automatic       bit(36)                  level 2 packed unaligned dcl 61 set ref 261 261 261
active_fnc_err_                 000024 constant        entry                    external dcl 73 ref 110
active_fnc_err_$suppress_name   000026 constant        entry                    external dcl 73 ref 115
addr                                                   builtin function         dcl 90 ref 96
af_sw                           000443 automatic       bit(1)                   dcl 49 set ref 105* 109* 115 125 127 152 181 184 233
                                                                                  275 289 317
archive_$next_component_info    000030 constant        entry                    external dcl 74 ref 204 297
archive_bit_count               000474 automatic       fixed bin(24,0)          dcl 56 set ref 195* 204* 297*
archive_component_info                 based           structure                level 1 dcl 2-6
archive_component_info_ptr      000534 automatic       pointer                  dcl 2-4 set ref 96* 204* 297*
archive_string                  000100 automatic       varying char(168)        dcl 32 set ref 238* 240* 255 255
area                                   based           area(1024)               dcl 27 ref 215 308
area_ptr                        000454 automatic       pointer                  dcl 51 set ref 214* 215 308
arg                                    based           char                     unaligned dcl 28 set ref 136 137 137 138 138 139 139
                                                                                  140 140 141 141 142 142 143 143 144 144 145 145
                                                                                  146 146 147 147 148 148 149 149 150 150 151 152
                                                                                  155* 162* 164* 170* 220 221* 223* 227
arg_count                       000466 automatic       fixed bin(17,0)          dcl 53 set ref 103* 114 134 212 213 218
arg_len                         000471 automatic       fixed bin(17,0)          dcl 54 set ref 135* 136 137 137 138 138 139 139 140
                                                                                  140 141 141 142 142 143 143 144 144 145 145 146
                                                                                  146 147 147 148 148 149 149 150 150 151 152 155
                                                                                  155 162 162 164 164 170 170 219* 220 221 221 223
                                                                                  223 227
arg_ptr                         000456 automatic       pointer                  dcl 51 set ref 135* 136 137 137 138 138 139 139 140
                                                                                  140 141 141 142 142 143 143 144 144 145 145 146
                                                                                  146 147 147 148 148 149 149 150 150 151 152 155
                                                                                  162 164 170 219* 220 221 223 227
bc_pic                          000437 automatic       picture(9)               unaligned dcl 39 set ref 274* 275 277
bc_sw                           000444 automatic       bit(1)                   dcl 49 set ref 123* 138* 145* 177 181 270 282*
bin                                                    builtin function         dcl 90 ref 181 181 181 181 181
char                                                   builtin function         dcl 90 ref 319
check_star_name_$entry          000032 constant        entry                    external dcl 75 ref 167 221
cleanup                         000526 stack reference condition                dcl 93 ref 99
code                            000475 automatic       fixed bin(35,0)          dcl 57 set ref 103* 104 135* 162* 163 164* 167* 168
                                                                                  168 168* 169 170* 195* 197* 204* 205 206* 219*
                                                                                  221* 222 223* 245* 247 248* 250 297* 298 299*
com_err_                        000034 constant        entry                    external dcl 76 ref 106
com_err_$suppress_name          000036 constant        entry                    external dcl 76 ref 117
comp_bc                   1     000500 automatic       fixed bin(24,0)          level 2 dcl 61 set ref 274
comp_ptr                  2     000500 automatic       pointer                  level 2 dcl 61 set ref 203* 204 244 297
complain                        000522 automatic       entry variable           dcl 71 set ref 106* 110* 155 164 170 178 185 189 197
                                                                                  206 223 299
cu_$af_return_arg               000040 constant        entry                    external dcl 77 ref 103
cu_$arg_ptr                     000042 constant        entry                    external dcl 78 ref 135 219
date_format                     000011 constant        char(15)                 initial unaligned dcl 37 set ref 233* 258* 267*
date_time_$format               000044 constant        entry                    external dcl 79 ref 233 258 267
dn                              000153 automatic       char(168)                unaligned dcl 33 set ref 162* 195* 197* 197* 206*
                                                                                  206* 238* 282* 282* 299* 299*
dt_len                          000436 automatic       fixed bin(17,0)          dcl 38 set ref 233* 235* 258* 267* 282 282
dtcm_sw                         000445 automatic       bit(1)                   dcl 49 set ref 123* 140* 146* 177 181 233 267 282*
dtud_sw                         000446 automatic       bit(1)                   dcl 49 set ref 123* 141* 147* 177 181 233 258 282*
en                              000225 automatic       char(32)                 unaligned dcl 34 set ref 162* 167* 195* 197* 197*
                                                                                  206* 206* 238* 282* 282* 299* 299*
error_table_$badopt             000010 external static fixed bin(35,0)          dcl 65 set ref 155*
error_table_$badstar            000012 external static fixed bin(35,0)          dcl 66 ref 222
error_table_$inconsistent       000014 external static fixed bin(35,0)          dcl 67 set ref 178* 185*
error_table_$noarg              000016 external static fixed bin(35,0)          dcl 68 set ref 189*
error_table_$nostars            000020 external static fixed bin(35,0)          dcl 69 ref 168
error_table_$not_act_fnc        000022 external static fixed bin(35,0)          dcl 70 ref 104
expand_pathname_$add_suffix     000046 constant        entry                    external dcl 81 ref 162
first_starname_index            000473 automatic       fixed bin(17,0)          dcl 55 set ref 161* 212 218
fixed                                                  builtin function         dcl 90 ref 261 261 261
get_system_free_area_           000050 constant        entry                    external dcl 82 ref 214
got_path_sw                     000447 automatic       bit(1)                   dcl 49 set ref 123* 159 160* 188
he_sw                           000450 automatic       bit(1)                   dcl 49 set ref 123* 142* 148* 184 280 281*
i                               000470 automatic       fixed bin(17,0)          dcl 53 set ref 134* 135* 161* 218* 219* 247* 248*
index                                                  builtin function         dcl 90 ref 136 220
initiate_file_                  000052 constant        entry                    external dcl 83 ref 195
ioa_                            000054 constant        entry                    external dcl 84 ref 282 289
item                            000235 automatic       varying char(512)        dcl 35 set ref 253* 272 272* 272 275* 275 277* 277
                                                                                  289* 292 294 315 315* 315 317* 317 319* 319
l_archive_component_info        000500 automatic       structure                level 1 dcl 61 set ref 96
len                                    parameter       fixed bin(17,0)          dcl 312 ref 310 319
length                                                 builtin function         dcl 90 ref 233 255 255 272 282 282 291 315
ltrim                                                  builtin function         dcl 90 ref 275
match_star_name_                000056 constant        entry                    external dcl 85 ref 248
max_day                         000006 constant        fixed bin(71,0)          initial dcl 47 set ref 233*
mode_sw                         000451 automatic       bit(1)                   dcl 49 set ref 123* 143* 149* 177 181 261 282*
mode_v                          000476 automatic       fixed bin(17,0)          dcl 58 set ref 127* 130*
name                      4     000500 automatic       char(32)                 level 2 packed unaligned dcl 61 set ref 248* 255 255
name_sw                         000452 automatic       bit(1)                   dcl 49 set ref 124* 144* 150* 177 181 255 282*
name_v                          000477 automatic       fixed bin(17,0)          dcl 59 set ref 127* 131*
null                                                   builtin function         dcl 90 ref 95 196 203 244 308
pathname_                       000060 constant        entry                    external dcl 86 ref 197 197 206 206 238 282 282 299
                                                                                  299
requote_string_                 000062 constant        entry                    external dcl 87 ref 292 317
requote_sw                      000453 automatic       bit(1)                   dcl 49 set ref 125* 151* 152* 181* 292
return_arg                             based           varying char             dcl 29 set ref 111* 291 291* 291 292* 292 294* 294
return_len                      000472 automatic       fixed bin(17,0)          dcl 54 set ref 103* 111 291 292 294
return_ptr                      000460 automatic       pointer                  dcl 51 set ref 103* 111 291 291 291 292 292 294 294
rtrim                                                  builtin function         dcl 90 ref 238 255 317 317
seg_ptr                         000462 automatic       pointer                  dcl 51 set ref 95* 195* 196 204* 297* 307*
starname                               based           char(32)                 array unaligned dcl 30 set ref 215 227* 248* 308
starname_count                  000467 automatic       fixed bin(17,0)          dcl 53 set ref 213* 215 216* 226* 226 227 231* 246
                                                                                  247 308
starname_ptr                    000464 automatic       pointer                  dcl 51 set ref 95* 215* 227 248 308 308
str                                    parameter       varying char             dcl 312 ref 310 317 317 319
substr                                                 builtin function         dcl 90 ref 261 261 261
terminate_file_                 000064 constant        entry                    external dcl 88 ref 307
time_modified            14     000500 automatic       fixed bin(71,0)          level 2 dcl 61 set ref 267*
time_updated             16     000500 automatic       fixed bin(71,0)          level 2 dcl 61 set ref 258*
version                         000500 automatic       fixed bin(17,0)          level 2 dcl 61 set ref 97*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
A_ACCESS                               internal static bit(3)                   initial unaligned dcl 1-11
A_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 1-36
DIR_ACCESS_MODE_NAMES                  internal static char(4)                  initial array unaligned dcl 1-33
E_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 1-36
M_ACCESS                               internal static bit(3)                   initial unaligned dcl 1-11
M_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 1-36
N_ACCESS                               internal static bit(3)                   initial unaligned dcl 1-11
N_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 1-36
REW_ACCESS                             internal static bit(3)                   initial unaligned dcl 1-11
REW_ACCESS_BIN                         internal static fixed bin(5,0)           initial dcl 1-36
RE_ACCESS                              internal static bit(3)                   initial unaligned dcl 1-11
RE_ACCESS_BIN                          internal static fixed bin(5,0)           initial dcl 1-36
RW_ACCESS                              internal static bit(3)                   initial unaligned dcl 1-11
RW_ACCESS_BIN                          internal static fixed bin(5,0)           initial dcl 1-36
R_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 1-36
SA_ACCESS                              internal static bit(3)                   initial unaligned dcl 1-11
SA_ACCESS_BIN                          internal static fixed bin(5,0)           initial dcl 1-36
SEG_ACCESS_MODE_NAMES                  internal static char(4)                  initial array unaligned dcl 1-30
SMA_ACCESS                             internal static bit(3)                   initial unaligned dcl 1-11
SMA_ACCESS_BIN                         internal static fixed bin(5,0)           initial dcl 1-36
SM_ACCESS                              internal static bit(3)                   initial unaligned dcl 1-11
SM_ACCESS_BIN                          internal static fixed bin(5,0)           initial dcl 1-36
S_ACCESS                               internal static bit(3)                   initial unaligned dcl 1-11
S_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 1-36
TERM_FILE_BC                           internal static bit(2)                   initial unaligned dcl 3-12
TERM_FILE_DELETE                       internal static bit(5)                   initial unaligned dcl 3-17
TERM_FILE_FORCE_WRITE                  internal static bit(4)                   initial unaligned dcl 3-16
TERM_FILE_TRUNC                        internal static bit(1)                   initial unaligned dcl 3-11
TERM_FILE_TRUNC_BC                     internal static bit(2)                   initial unaligned dcl 3-13
TERM_FILE_TRUNC_BC_TERM                internal static bit(3)                   initial unaligned dcl 3-15
W_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 1-36
terminate_file_switches                based           structure                level 1 packed unaligned dcl 3-4

NAMES DECLARED BY EXPLICIT CONTEXT.
SKIP                            003043 constant        label                    dcl 297 ref 250
act                             000327 constant        entry                    external dcl 7
add_string                      003213 constant        entry                    internal dcl 310 ref 255 258 261 267
archive_table                   000336 constant        entry                    external dcl 7
clean_up                        003144 constant        entry                    internal dcl 306 ref 99 119 171 304

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      3674        3762    3356        3704
Length      4254    3356        66         256     315           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
act                                 578 external procedure  is an external procedure.  
on unit on line 99                   64 on unit               
clean_up                             84 internal procedure  is called by several nonquick procedures.  
add_string                           82 internal procedure  is called during a stack extension.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
act                      000100 archive_string              act
                         000153 dn                          act
                         000225 en                          act
                         000235 item                        act
                         000436 dt_len                      act
                         000437 bc_pic                      act
                         000442 absp_sw                     act
                         000443 af_sw                       act
                         000444 bc_sw                       act
                         000445 dtcm_sw                     act
                         000446 dtud_sw                     act
                         000447 got_path_sw                 act
                         000450 he_sw                       act
                         000451 mode_sw                     act
                         000452 name_sw                     act
                         000453 requote_sw                  act
                         000454 area_ptr                    act
                         000456 arg_ptr                     act
                         000460 return_ptr                  act
                         000462 seg_ptr                     act
                         000464 starname_ptr                act
                         000466 arg_count                   act
                         000467 starname_count              act
                         000470 i                           act
                         000471 arg_len                     act
                         000472 return_len                  act
                         000473 first_starname_index        act
                         000474 archive_bit_count           act
                         000475 code                        act
                         000476 mode_v                      act
                         000477 name_v                      act
                         000500 l_archive_component_info    act
                         000522 complain                    act
                         000534 archive_component_info_ptr  act

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_ne_as             alloc_cs            realloc_cs          cat_realloc_cs      call_var_desc       call_ext_out_desc
call_ext_out        call_int_this_desc  call_int_this       call_int_other      return              enable
shorten_stack       ext_entry           int_entry           int_entry_desc      alloc_based         free_based

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
active_fnc_err_               active_fnc_err_$suppress_name archive_$next_component_info  check_star_name_$entry
com_err_                      com_err_$suppress_name        cu_$af_return_arg             cu_$arg_ptr
date_time_$format             expand_pathname_$add_suffix   get_system_free_area_         initiate_file_
ioa_                          match_star_name_              pathname_                     requote_string_
terminate_file_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$badopt           error_table_$badstar          error_table_$inconsistent     error_table_$noarg
error_table_$nostars          error_table_$not_act_fnc




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
      7 000326        95 000343        96 000346        97 000350        99 000352       103 000374       104 000411
    105 000415       106 000416       107 000422       109 000423       110 000425       111 000431       114 000432
    115 000434       117 000463       119 000507       120 000513       123 000514       124 000523       125 000525
    127 000527       130 000533       131 000535       134 000537       135 000547       136 000564       137 000600
    138 000613       139 000626       140 000640       141 000653       142 000666       143 000701       144 000714
    145 000727       146 000741       147 000753       148 000765       149 000777       150 001011       151 001023
    152 001031       155 001040       156 001072       158 001073       159 001074       160 001076       161 001100
    162 001103       163 001141       164 001143       165 001174       167 001175       168 001212       169 001222
    170 001224       171 001255       172 001261       175 001262       177 001264       178 001303       179 001327
    181 001330       184 001362       185 001366       186 001412       188 001413       189 001415       190 001441
    195 001442       196 001477       197 001503       198 001551       203 001552       204 001554       205 001575
    206 001577       207 001645       212 001646       213 001651       214 001653       215 001662       216 001670
    218 001671       219 001701       220 001716       221 001732       222 001752       223 001756       224 002007
    226 002010       227 002011       229 002022       230 002024       231 002025       233 002026       235 002071
    238 002073       240 002150       244 002152       245 002156       246 002160       247 002162       248 002173
    249 002221       250 002223       253 002225       255 002226       258 002300       261 002350       267 002451
    270 002521       272 002524       274 002535       275 002544       277 002574       280 002606       281 002610
    282 002611       289 002722       291 002744       292 002756       294 003027       297 003043       298 003064
    299 003066       300 003134       302 003135       304 003136       330 003142       306 003143       307 003151
    308 003200       309 003211       310 003212       315 003226       317 003240       319 003323       321 003346


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
