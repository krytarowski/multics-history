	COMPILATION LISTING OF SEGMENT expand_assign
	Compiled by: Multics PL/I Compiler, Release 33e, of October 6, 1992
	Compiled at: CGI                             
	Compiled on: 2000-04-17_1932.27_Mon_mdt
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        6*        *                                                         *
        7*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        8*        *                                                         *
        9*        * Copyright (c) 1972 by Massachusetts Institute of        *
       10*        * Technology and Honeywell Information Systems, Inc.      *
       11*        *                                                         *
       12*        *********************************************************** */
       13 
       14 
       15 
       16 
       17 /****^  HISTORY COMMENTS:
       18*  1) change(86-07-15,Ginter), approve(86-07-15,MCR7287), audit(86-07-16,Mabey),
       19*     install(86-07-28,MR12.0-1105):
       20*     Bug fixes for the MR12.0 release of the compiler.
       21*  2) change(87-04-15,RWaters), approve(87-04-15,MCR7635), audit(87-04-28,Huen),
       22*     install(87-05-21,MR12.1-1033):
       23*     Fix bug #2124
       24*  3) change(89-02-28,RWaters), approve(89-02-28,MCR8068), audit(89-09-07,Vu),
       25*     install(89-09-19,MR12.3-1068):
       26*     Fix bug 1819.
       27*                                                   END HISTORY COMMENTS */
       28 
       29 
       30 /* format: style3,^indattr,ifthendo,ifthen,^indnoniterdo,indproc,^elsestmt,dclind9,idind23 */
       31 expand_assign:
       32      proc (blk, stmnt, input_tree, context, agg_ref) returns (ptr);
       33 
       34 /* Modified 780619 by PG for unsigned */
       35 /* Modified 780814 by RAB to fix 1743 */
       36 /* Modified 790806 by RAB to fix 1841 (return((*) bit(*)) gets FATAL ERROR 310) */
       37 /* Modified 790807 by RAB to fix 1847 (bad descriptor built when char(*) varying
       38*   promoted to array.  Bug caused by maker not setting symbol.exp_extents) */
       39 /* Modified: 17 Mar 1980 by PCK to implement by name assignment */
       40 /* Modified 830427 BIM to not check refer extents when the assignment */
       41 /*          is not an array assignment. */
       42 /* Modified 850607 MM to fix 2109 by name assignments to retain the token */
       43 /*	  pointer from the original structure in any temporary structures */
       44 /*	  that are generated in the assignment. */
       45 /* Modified 871504 RW to fix 2124 incompatible attributes in compiler variable */
       46 /* Modified 880101 RW diagnose passing a label array as a parameter */
       47 
       48 dcl      (agg_ref, blk, stmnt, tree, input_tree, a, b, s, sa, sb, t, p, q, qual, aqual, bqual) ptr,
       49          (a_for_return, sa_for_return) ptr,
       50          image ptr init (null);
       51 
       52 dcl      k fixed bin (15),				/* used by fill_desc and descendants */
       53          constant fixed bin,
       54          (have_varying, modified) bit (1) aligned,
       55          (cross_section, doing_return, no_data_type, interleaved) bit (1) init ("0"b) aligned;
       56 
       57 dcl      based_integer fixed bin (15) based;
       58 
       59 dcl      pl1_stat_$locator (128) ptr ext static;
       60 dcl      pl1_stat_$index fixed bin (15) ext static;
       61 
       62 dcl      (addr, string, fixed, hbound, null, substr) builtin;
       63 
       64 	s = stmnt;
       65 	tree = input_tree;
       66 
       67 	a = tree -> operand (1);
       68 	b = tree -> operand (2);
       69 
       70 	if a -> node.type ^= reference_node then
       71 	     if a -> node.type = operator_node then
       72 		if a -> op_code = loop | a -> op_code = join then
       73 		     goto infix;
       74 		else
       75 		     call semantic_translator$abort (90, null);
       76 	     else
       77 		call semantic_translator$abort (90, null);
       78 
       79 	sa = a -> reference.symbol;
       80 
       81 	if sa -> node.type ^= symbol_node then
       82 	     call semantic_translator$abort (91, null);
       83 
       84 	if sa -> symbol.constant then
       85 	     call semantic_translator$abort (91, null);
       86 
       87 	if a -> reference.array_ref then do;
       88 	     if sa -> symbol.array -> array.interleaved then
       89 		interleaved = "1"b;
       90 
       91 	     if a -> reference.offset ^= null then
       92 		if a -> reference.offset -> node.type = list_node then
       93 		     cross_section = "1"b;
       94 	end;
       95 
       96 	if ^a -> reference.array_ref & ^sa -> symbol.structure & string (sa -> symbol.data_type) ^= "0"b then
       97 	     call semantic_translator$abort (93, b);
       98 
       99 	if b -> node.type
      100 	     =
      101 	     token_node
      102 	     /* we need a symbol node for use now but real processing of this	*/
      103 	     /* token node will be done when op_semantics gets it later.		*/ then
      104 	     b = convert (b, decoded_type (fixed (b -> token.type, 9)));
      105 
      106 	if b -> node.type = reference_node then do;
      107 	     sb = b -> reference.symbol;
      108 	     qual = b -> reference.qualifier;
      109 
      110 	     if b -> reference.array_ref then do;
      111 
      112 		if sb -> node.type = label_node then	/* passing a label array as a prarmeter */
      113 		     call semantic_translator$abort (83, b);
      114 		else if sb -> node.type ^= symbol_node then
      115 		     call semantic_translator$abort (195, null);
      116 						/* somewhat inapropriate, but it shouldnt happen anyway */
      117 
      118 		if b -> reference.offset ^= null then
      119 		     if b -> reference.offset -> node.type = list_node then
      120 			cross_section = "1"b;
      121 
      122 		if sb -> symbol.array -> array.interleaved then
      123 		     interleaved = "1"b;
      124 	     end;
      125 	end;
      126 
      127 	if ^def_context.RHS_aggregate then
      128 	     goto check_context;
      129 
      130 	if b -> node.type ^= reference_node then
      131 	     if b -> op_code = loop | b -> op_code = join then
      132 		sb, qual = null;
      133 	     else do;
      134 
      135 /* expression is an aggregate-valued function reference.
      136*			   This has been pulled out into its own statement, so
      137*			   we can replace the operator with its result in this
      138*			   tree. */
      139 
      140 		tree -> operand (2), b = b -> operand (1);
      141 		sb = b -> reference.symbol;
      142 	     end;
      143 
      144 	if stmnt -> statement.LHS_in_RHS then do;
      145 	     stmnt -> statement.LHS_in_RHS = "0"b;
      146 
      147 /*   a(*) = . . .   */
      148 	     s = create_statement (assignment_statement, (stmnt -> statement.back), null, (stmnt -> statement.prefix));
      149 
      150 /*   t0 = b   */
      151 	     q = create_operator (assign, 2);
      152 	     p = create_symbol (null, null, by_compiler);
      153 	     p -> symbol.temporary = "1"b;
      154 	     q -> operand (1) = p -> symbol.reference;
      155 	     q -> operand (2) = b;
      156 
      157 	     s -> statement.root = expand_assign (blk, s, q, context, image);
      158 
      159 /*   a = t0   */
      160 	     b, tree -> operand (2) = image;
      161 	     sb = b -> reference.symbol;
      162 	end;
      163 
      164 /* If the left hand side (LHS) is a temporary with no data type, replace it with a
      165*   temporary whose type and extents are given by the right hand side (RHS).  */
      166 
      167 	if string (sa -> symbol.data_type) = "0"b then do;
      168 	     no_data_type = "1"b;
      169 
      170 /*   to = . . .   */
      171 	     if sb = null then
      172 		sb = declare_expression (b, null, 1);
      173 
      174 	     call maker (sb, sb, sa, "1"b, 1, b);
      175 
      176 	     tree -> operand (1), agg_ref, a = copy_expression (sa -> symbol.reference);
      177 
      178 	     if b -> node.type = reference_node then
      179 		a -> reference.array_ref = b -> reference.array_ref;
      180 	end;
      181 
      182 check_context:
      183 	if def_context.arg_list | def_context.return then do;
      184 	     if ^sa -> symbol.star_extents then do;
      185 		qual = a -> reference.qualifier;
      186 		call maker (sa, sa, t, "0"b, 1, null);
      187 	     end;
      188 	     else do;
      189 		if b -> node.type = operator_node then
      190 		     if b -> operator.op_code ^= loop & b -> operator.op_code ^= join then do;
      191 
      192 /* we are promoting scalar expression to aggregate (fixes 1743) */
      193 
      194 			b = b -> operand (1);
      195 			sb = b -> reference.symbol;
      196 		     end;
      197 
      198 		if sb = null then
      199 		     sb = declare_expression (b, null, 1);
      200 
      201 
      202 		doing_return = def_context.return;
      203 		call maker (sa, sb, t, "0"b, 1, b);	/* pass sa to provide template for the temporary, 
      204*						   sb to fill in star_extents info.		*/
      205 	     end;
      206 
      207 	     a_for_return = a;
      208 	     sa_for_return = sa;
      209 
      210 	     tree -> operand (1), agg_ref, a = copy_expression (t -> symbol.reference);
      211 
      212 	     sa = t;
      213 
      214 	     a -> reference.shared = "0"b;
      215 	     a -> reference.ref_count = 2;
      216 
      217 	     s = create_statement (assignment_statement, (stmnt -> statement.back), null, (stmnt -> statement.prefix));
      218 	end;
      219 	else
      220 	     s = stmnt;
      221 
      222 	if ^def_context.RHS_aggregate | def_context.by_name_assignment then
      223 	     goto infix;
      224 
      225 	if b -> node.type ^= reference_node | cross_section | interleaved then
      226 	     goto infix;
      227 
      228 	if ^compare_declaration (a, (b -> reference.symbol), "0"b) then
      229 	     goto infix;
      230 
      231 
      232 	if sa -> symbol.defined | sb -> symbol.defined then
      233 	     goto infix;
      234 
      235 	if a -> reference.array_ref ^= b -> reference.array_ref then
      236 	     goto infix;
      237 
      238 	if a -> reference.array_ref then
      239 	     if substr (stmnt -> statement.prefix, 7, 1) then
      240 		if sa -> symbol.refer_extents then do;
      241 		     aqual = a -> reference.qualifier;
      242 		     bqual = b -> reference.qualifier;
      243 		     call check_refers (sa, sb);
      244 		end;
      245 
      246 	call process_offset (a);
      247 	call process_offset (b);
      248 
      249 	tree = make_copy (a, b);
      250 
      251 	goto ret;
      252 
      253 infix:
      254 	tree = expand_infix (blk, s, tree, context);
      255 
      256 	goto ret;
      257 
      258 ret:
      259 	if def_context.arg_list then do;
      260 	     s -> statement.root = tree;
      261 	     return (t -> symbol.reference);
      262 	end;
      263 
      264 	if def_context.return then do;
      265 	     s -> statement.root = tree;
      266 
      267 	     if sa_for_return -> symbol.star_extents then do;
      268 		k = 0;
      269 		call fill_desc (sa);
      270 
      271 /* since the cg ignores the length expr when
      272*			   compiling the return_words or return_bits
      273*			   operators, and since prepare_operand expects
      274*			   to see processed length exprs or no length exprs,
      275*			   null the length expr */
      276 
      277 		a -> reference.length = null;
      278 
      279 		return (a);
      280 	     end;
      281 
      282 	     p = create_statement (assignment_statement, (stmnt -> statement.back), null, (stmnt -> statement.prefix));
      283 	     p -> statement.root, tree = make_copy (a_for_return, a);
      284 	end;
      285 
      286 	return (tree);
      287 
      288 process_offset:
      289      proc (pt);
      290 
      291 /* processes raw offset exprs */
      292 
      293 dcl      (pt, a, sa, p) ptr;
      294 dcl      i fixed bin;
      295 
      296 	a = pt;
      297 
      298 /* since the code generator ignores the length expr when compiling
      299*	   the copy operators, and since prepare_operand expects to see
      300*	   either processed length exprs or null length exprs, null the
      301*	   length expr */
      302 
      303 	a -> reference.length = null;
      304 
      305 /* now, process the offset expr , if any */
      306 
      307 	if a -> reference.offset ^= null then
      308 	     if a -> reference.offset -> node.type = list_node then do;
      309 		p = a -> reference.offset;
      310 
      311 		do i = 1 to p -> list.number;
      312 		     if p -> element (i) -> node.type = token_node then
      313 			if p -> element (i) -> token.type = asterisk then
      314 			     goto infix;
      315 		end;
      316 
      317 		if a -> reference.qualifier ^= null then do;
      318 		     pl1_stat_$index = pl1_stat_$index + 1;
      319 		     if pl1_stat_$index > hbound (pl1_stat_$locator, 1) then
      320 			call semantic_translator$abort (70, null);
      321 		     pl1_stat_$locator (pl1_stat_$index) = a;
      322 		end;
      323 
      324 		sa = a -> reference.symbol;
      325 		a -> reference.offset = copy_expression (sa -> symbol.reference -> reference.offset);
      326 		a = subscripter (blk, s, a, p, sa);
      327 
      328 		if a -> reference.offset ^= null then do;
      329 		     a -> reference.offset = expression_semantics (blk, s, (a -> reference.offset), "0"b);
      330 		     a -> reference.offset = convert$to_integer ((a -> reference.offset), integer_type);
      331 
      332 		     call simplify_offset (a, "0"b);
      333 		end;
      334 
      335 		if a -> reference.qualifier ^= null then
      336 		     pl1_stat_$index = pl1_stat_$index - 1;
      337 	     end;
      338 
      339      end;
      340 
      341 /* subroutine to check that refer array extents are compatable.   */
      342 
      343 check_refers:
      344      proc (asym, bsym);
      345 
      346 dcl      (asym, bsym, anext, bnext, abound, bbound, p, q) ptr;
      347 dcl      (own_bounds, processed_bounds) fixed bin;
      348 
      349 	if asym -> symbol.array ^= null then do;
      350 	     processed_bounds = 0;
      351 	     bbound = bsym -> symbol.array -> array.bounds;
      352 	     own_bounds = asym -> symbol.array -> own_number_of_dimensions;
      353 
      354 	     do abound = asym -> symbol.array -> array.bounds repeat abound -> bound.next
      355 		while (processed_bounds < own_bounds);
      356 		if is_refer ((abound -> bound.upper)) then
      357 		     if is_refer ((abound -> bound.lower)) then do;
      358 			p = subtract_bounds (abound);
      359 			q = subtract_bounds (bbound);
      360 			call make_check_stmnt (p, q);
      361 		     end;
      362 		     else
      363 			call make_check_stmnt (copy_expression (abound -> bound.upper),
      364 			     copy_expression (bbound -> bound.upper));
      365 		else if is_refer ((abound -> bound.lower)) then
      366 		     call make_check_stmnt (copy_expression (abound -> bound.lower),
      367 			copy_expression (bbound -> bound.lower));
      368 		processed_bounds = processed_bounds + 1;
      369 		bbound = bbound -> bound.next;
      370 	     end;
      371 	end;
      372 
      373 	bnext = bsym -> symbol.son;
      374 
      375 	do anext = asym -> symbol.son repeat anext -> symbol.brother while (anext ^= null);
      376 	     call check_refers (anext, bnext);
      377 	     bnext = bnext -> symbol.brother;
      378 	end;
      379 
      380      end;
      381 
      382 /* subroutine to test if a node is a refer operator node.   */
      383 
      384 is_refer:
      385      proc (p) returns (bit (1) aligned);
      386 
      387 dcl      p ptr;
      388 
      389 	if p ^= null then
      390 	     if p -> node.type = operator_node then
      391 		if p -> operator.op_code = refer then
      392 		     return ("1"b);
      393 
      394 	return ("0"b);
      395 
      396      end;
      397 
      398 /* subroutine to create an operator that subtracts the lower bound node from the upper bound node.   */
      399 
      400 subtract_bounds:
      401      proc (p) returns (ptr);
      402 
      403 dcl      (p, r) ptr;
      404 
      405 	r = create_operator (sub, 3);
      406 	r -> operator.operand (2) = copy_expression (p -> bound.upper);
      407 	r -> operator.operand (3) = copy_expression (p -> bound.lower);
      408 	return (r);
      409 
      410      end;
      411 
      412 /* subroutine to create a bound_ck operator.   */
      413 
      414 make_check_stmnt:
      415      proc (p, q);
      416 
      417 dcl      (p, q, r) ptr;
      418 
      419 	r = create_statement (assignment_statement, (stmnt -> statement.back), null, (stmnt -> statement.prefix));
      420 	r -> statement.root = create_operator (bound_ck, 4);
      421 	call refer_extent (p, aqual);
      422 	call refer_extent (q, bqual);
      423 	r -> statement.root -> operator.operand (2) = p;
      424 	r -> statement.root -> operator.operand (3) = q;
      425 	r -> statement.root -> operator.operand (4) = copy_expression ((q));
      426 	r -> statement.root = expression_semantics (blk, r, (r -> statement.root), "0"b);
      427      end;
      428 
      429 /* subroutine to create assignments that fill in the descriptor of the left side.  */
      430 
      431 fill_desc:
      432      proc (sp);
      433 
      434 dcl      (sp, s, b) ptr;
      435 
      436 	s = sp;
      437 
      438 	call fill (s);
      439 
      440 	if s -> symbol.dimensioned then do;
      441 	     do b = s -> symbol.array -> array.bounds repeat b -> bound.next while (b ^= null);
      442 		call fill (b);
      443 		k = k + 3;
      444 	     end;
      445 	end;
      446 
      447 	do b = s -> symbol.son repeat b -> symbol.brother while (b ^= null);
      448 	     k = k + 1;
      449 	     call fill_desc (b);
      450 	end;
      451 
      452 fill:
      453 	proc (pt);
      454 
      455 dcl      (pt, p, r, q, dr, size, d_template) ptr;
      456 dcl      i fixed bin (15);
      457 
  1     1 /* BEGIN INCLUDE FILE ... pl1_descriptor.incl.pl1 */
  1     2 
  1     3 /* Declaration of PL/I arg descriptor seen as an array of structures of bits */
  1     4 
  1     5 dcl	1 descriptor(0:k)	based aligned,
  1     6 	2 bit_type	unaligned,
  1     7 	  3 flag		bit(1) unaligned,
  1     8 	  3 type		bit(6) unaligned,
  1     9 	  3 packed	bit(1) unaligned,
  1    10 	  3 number_dims	bit(4) unaligned,
  1    11 	2 size		bit(24) unaligned;
  1    12 
  1    13 /* END INCLUDE FILE ... pl1_descriptor.incl.pl1 */
      458 
      459 
      460 	     p = pt;
      461 
      462 	     if p -> node.type = symbol_node then do;
      463 		d_template =
      464 		     sa_for_return -> symbol.descriptor -> reference.symbol -> symbol.descriptor -> symbol.initial;
      465 		if s -> symbol.bit | s -> symbol.char then do;
      466 		     r = copy_expression (p -> symbol.reference);
      467 		     r = expression_semantics (blk, stmnt, r, context);
      468 		     if r -> reference.varying_ref then do;
      469 			if k > 0 | r -> reference.array_ref then do;
      470 			     if p -> symbol.dcl_size = null then
      471 				size = declare_constant$integer ((p -> symbol.c_dcl_size));
      472 			     else do;
      473 				size = copy_expression (p -> symbol.dcl_size);
      474 				if p -> symbol.refer_extents then
      475 				     call refer_extent (size, (a_for_return -> reference.qualifier));
      476 				size = expression_semantics (blk, stmnt, size, "0"b);
      477 			     end;
      478 			end;
      479 			else do;
      480 			     size = create_operator ((length_fun), 2);
      481 			     size -> operand (1) = declare_temporary (integer_type, max_length_precision, 0, null);
      482 			     size -> operand (2) = r;
      483 			end;
      484 		     end;
      485 		     else if r -> reference.length = null then
      486 			size = declare_constant$integer ((r -> reference.c_length));
      487 		     else
      488 			size = r -> reference.length;
      489 		     q = create_operator (make_desc, 3);
      490 		     q -> operand (3) = size;
      491 		     q -> operand (2) = declare_constant$desc (string (d_template -> descriptor (k).bit_type));
      492 		end;
      493 		else do;
      494 		     q = create_operator (assign, 2);
      495 		     q -> operand (2) = declare_constant$desc (string (d_template -> descriptor (k)));
      496 		end;
      497 		q -> operand (1), r = copy_expression (sa_for_return -> symbol.descriptor);
      498 		r -> reference.c_offset = k;
      499 		r -> reference.shared = "0"b;
      500 		r -> reference.ref_count = 1;
      501 		r = expression_semantics (blk, stmnt, r, context);
      502 		dr = create_statement (assignment_statement, (stmnt -> statement.back), null,
      503 		     (stmnt -> statement.prefix));
      504 		dr -> statement.root = q;
      505 	     end;
      506 	     else do;
      507 		if p -> bound.lower = null then
      508 		     p -> bound.lower = declare_constant$integer ((p -> bound.c_lower));
      509 		if p -> bound.upper = null then
      510 		     p -> bound.upper = declare_constant$integer ((p -> bound.c_upper));
      511 
      512 		i = 0;
      513 		do r = p -> bound.lower, p -> bound.upper, p -> bound.desc_multiplier;
      514 		     i = i + 1;
      515 		     q = create_operator (assign, 2);
      516 		     q -> operand (1), dr = copy_expression (sa_for_return -> symbol.descriptor);
      517 		     dr -> reference.units = word_;
      518 		     dr -> reference.c_offset = k + i;
      519 		     r = copy_expression ((r));
      520 		     if s -> symbol.refer_extents then
      521 			call refer_extent (r, (a_for_return -> reference.qualifier));
      522 		     q -> operand (2) = expression_semantics (blk, stmnt, r, context);
      523 		     dr = create_statement (assignment_statement, (stmnt -> statement.back), null,
      524 			(stmnt -> statement.prefix));
      525 		     dr -> statement.root = q;
      526 		end;
      527 	     end;
      528 
      529 	end fill;
      530 
      531      end fill_desc;
      532 
      533 /* subroutine to create a copy operator.  */
      534 
      535 make_copy:
      536      proc (a, b) returns (ptr);
      537 
      538 dcl      (a, b, sb, p, q, ref, arrayp) ptr;
      539 dcl      opcode bit (9) aligned;
      540 
      541 /* Because get_array_size pads out the array element size if each
      542*	   element must start on a > word_ boundary, a dangerous anomaly
      543*	   could arise if the target is a nondimensioned structure while
      544*	   the source is an array element.  Therefore, in such a case
      545*	   the size of the nondimensioned structure must be used for
      546*	   the assignment rather than the source size.  This fixes bug
      547*	   1500.  */
      548 
      549 	if b -> reference.symbol -> symbol.dimensioned & ^a -> reference.symbol -> symbol.dimensioned then
      550 	     ref = a;
      551 	else
      552 	     ref = b;
      553 
      554 	sb = ref -> reference.symbol;
      555 
      556 	if sb -> symbol.dimensioned then
      557 	     arrayp = sb -> symbol.array;
      558 	else
      559 	     arrayp = null;
      560 
      561 	if sb -> symbol.packed then
      562 	     opcode = copy_string;
      563 	else
      564 	     opcode = copy_words;
      565 
      566 	if arrayp ^= null & ^ref -> reference.array_ref then
      567 	     if sb -> symbol.packed then
      568 		if arrayp -> array.element_size_bits = null then
      569 		     p = declare_constant$integer ((arrayp -> array.c_element_size_bits));
      570 		else
      571 		     p = arrayp -> array.element_size_bits;
      572 	     else if arrayp -> array.element_size = null then
      573 		p = declare_constant$integer ((arrayp -> array.c_element_size));
      574 	     else
      575 		p = arrayp -> array.element_size;
      576 
      577 	else if sb -> symbol.packed then
      578 	     if sb -> symbol.bit_size = null then
      579 		p = declare_constant$integer ((sb -> symbol.c_bit_size));
      580 	     else
      581 		p = sb -> symbol.bit_size;
      582 	else if sb -> symbol.word_size = null then
      583 	     p = declare_constant$integer ((sb -> symbol.c_word_size));
      584 	else do;
      585 	     p = sb -> symbol.word_size;
      586 	     if sb -> symbol.temporary then
      587 		sb -> symbol.word_size = expression_semantics (blk, stmnt, copy_expression ((p)), "0"b);
      588 	end;
      589 
      590 	this_context = "0"b;
      591 	p = copy_expression ((p));
      592 	if sb -> symbol.refer_extents then
      593 	     call refer_extent (p, (b -> reference.qualifier));
      594 	p = expression_semantics (blk, stmnt, p, this_context);
      595 
      596 	call simplify_expression (p, constant, modified);
      597 	if modified then
      598 	     p = declare_constant$integer ((constant));
      599 
      600 	q = create_operator (opcode, 3);
      601 	q -> operand (1) = a;
      602 	q -> operand (2) = b;
      603 	q -> operand (3) = p;
      604 
      605 	return (q);
      606 
      607      end make_copy;
      608 
      609 /* subroutine to make a source-like declaration of a temporary.  */
      610 
      611 maker:
      612      proc (t, e, s, given, level_number, er);
      613 
      614 dcl      (s, p, q, f, a, r, t1, e1, s1, eb, subs) ptr;
      615 dcl      (t, e) ptr;				/* t points to the param_desc (the target) symbol, e points to the expression symbol */
      616 dcl      er ptr;					/* er points to the expression reference or is null */
      617 dcl      (n, i, level_number, sdims) fixed bin (15);
      618 dcl      (given, refer_extents, have_subs, ignore_e_array) aligned bit (1);
      619 
      620 	n = 0;
      621 	ignore_e_array, have_subs = "0"b;
      622 	if ^given then
      623 	     s = create_symbol (blk, null, by_compiler);
      624 	string (s -> symbol.data_type) = string (t -> symbol.data_type);
      625 	string (s -> symbol.misc_attributes) = string (t -> symbol.misc_attributes);
      626 	s -> symbol.star_extents, s -> symbol.member, s -> symbol.external, s -> symbol.initialed = "0"b;
      627 
      628 	refer_extents = e -> symbol.refer_extents;
      629 
      630 	if t -> symbol.array ^= null then
      631 	     if level_number = 1 then do;
      632 		n, sdims = t -> symbol.array -> array.number_of_dimensions;
      633 		if er ^= null then
      634 		     if er -> node.type = reference_node then
      635 			if ^er -> reference.array_ref then
      636 			     if t = e then
      637 				n, sdims = 0;
      638 			     else
      639 				ignore_e_array = "1"b;
      640 			else if er -> reference.offset ^= null then
      641 			     if er -> reference.offset -> node.type = list_node then do;
      642 				subs = er -> reference.offset;
      643 				have_subs = "1"b;
      644 				sdims = 0;
      645 			     end;
      646 	     end;
      647 
      648 	     else
      649 		n, sdims = t -> symbol.array -> array.own_number_of_dimensions;
      650 
      651 	s -> symbol.dimensioned = (n ^= 0);
      652 	s -> symbol.block_node = t -> symbol.block_node;
      653 	s -> symbol.general = t -> symbol.general;
      654 
      655 	s -> symbol.pix = t -> symbol.pix;
      656 
      657 	s -> symbol.c_dcl_size = t -> symbol.c_dcl_size;
      658 
      659 	if t -> symbol.param_desc then
      660 	     if t -> symbol.dcl_size ^= null then
      661 		if t -> symbol.dcl_size -> node.type = token_node then
      662 		     if t -> symbol.dcl_size -> token.type = asterisk then
      663 			if e -> symbol.fixed | e -> symbol.float then do;
      664 			     a = convert$from_builtin ((e -> symbol.reference),
      665 				(substr (string (t -> symbol.attributes), 1, 36) & string_mask));
      666 			     s -> symbol.c_dcl_size =
      667 				a -> operator.operand (1) -> reference.symbol -> symbol.c_dcl_size;
      668 			end;
      669 			else
      670 			     s -> symbol.c_dcl_size = e -> symbol.c_dcl_size;
      671 
      672 	if doing_return then
      673 	     if t -> symbol.dcl_size ^= null then
      674 		if t -> symbol.dcl_size -> node.type = operator_node then
      675 		     if t -> symbol.dcl_size -> operator.op_code = desc_size then
      676 			if e -> symbol.fixed | e -> symbol.float then do;
      677 			     a = convert$from_builtin ((e -> symbol.reference),
      678 				(substr (string (t -> symbol.attributes), 1, 36) & string_mask));
      679 			     s -> symbol.c_dcl_size =
      680 				a -> operator.operand (1) -> reference.symbol -> symbol.c_dcl_size;
      681 			end;
      682 			else
      683 			     s -> symbol.c_dcl_size = e -> symbol.c_dcl_size;
      684 
      685 	if s -> symbol.entry then
      686 	     s -> symbol.dcl_size = t -> symbol.dcl_size;
      687 	else do;
      688 	     s -> symbol.dcl_size = e -> symbol.dcl_size;
      689 	     if s -> symbol.dcl_size ^= null then do;
      690 		s -> symbol.exp_extents = "1"b;
      691 		if s -> symbol.dcl_size -> node.type = token_node then
      692 		     if s -> symbol.dcl_size -> token.type = dec_integer then
      693 			s -> symbol.exp_extents = "0"b;
      694 	     end;
      695 	end;
      696 
      697 	if refer_extents then do;
      698 	     r = copy_expression (s -> symbol.dcl_size);
      699 	     call refer_extent (r, qual);
      700 	     s -> symbol.dcl_size = r;
      701 	end;
      702 
      703 	s -> symbol.scale = t -> symbol.scale;
      704 	s -> symbol.level = level_number;
      705 
      706 	if n ^= 0 then do;
      707 	     s -> symbol.array, a = create_array ();
      708 	     p = t -> symbol.array -> array.bounds;
      709 
      710 	     if ^ignore_e_array then
      711 		eb = e -> symbol.array;
      712 	     else
      713 		eb = null;
      714 
      715 	     if eb ^= null then
      716 		eb = eb -> array.bounds;
      717 
      718 	     do i = 1 to n while (p ^= null);
      719 		if have_subs then do;
      720 		     if subs -> element (i) -> node.type ^= token_node then
      721 			goto step;
      722 		     if subs -> element (i) -> token.type ^= asterisk then
      723 			goto step;
      724 
      725 		     sdims = sdims + 1;
      726 		end;
      727 
      728 		q = create_bound ();
      729 		q -> bound.c_lower = p -> bound.c_lower;
      730 		q -> bound.c_upper = p -> bound.c_upper;
      731 
      732 		q -> bound.lower = p -> bound.lower;
      733 		q -> bound.upper = p -> bound.upper;
      734 
      735 		if t -> symbol.param_desc then
      736 		     if q -> bound.lower ^= null then
      737 			if q -> bound.lower -> node.type = token_node then
      738 			     if q -> bound.lower -> token.type = asterisk /* fill in star_extents from e */ then
      739 				call use_eb;
      740 
      741 		if doing_return then
      742 		     if q -> bound.lower ^= null then
      743 			if q -> bound.lower -> node.type = reference_node then
      744 			     if q -> bound.lower -> reference.symbol -> node.type = symbol_node then
      745 				if q -> bound.lower -> reference.symbol -> symbol.arg_descriptor then
      746 				     call use_eb;
      747 
      748 		if refer_extents then do;
      749 		     r = copy_expression (q -> bound.lower);
      750 		     call refer_extent (r, qual);
      751 		     q -> bound.lower = r;
      752 		     r = copy_expression (q -> bound.upper);
      753 		     call refer_extent (r, qual);
      754 		     q -> bound.upper = r;
      755 		end;
      756 
      757 		if q -> bound.lower ^= null then do;
      758 		     call simplify_expression ((q -> bound.lower), constant, modified);
      759 
      760 		     if modified then do;
      761 			q -> bound.lower = null;
      762 			q -> bound.c_lower = constant;
      763 		     end;
      764 		     else
      765 			s -> symbol.exp_extents = "1"b;
      766 		end;
      767 
      768 		if q -> bound.upper ^= null then do;
      769 		     call simplify_expression ((q -> bound.upper), constant, modified);
      770 
      771 		     if modified then do;
      772 			q -> bound.upper = null;
      773 			q -> bound.c_upper = constant;
      774 		     end;
      775 		     else
      776 			s -> symbol.exp_extents = "1"b;
      777 		end;
      778 
      779 		if a -> array.bounds = null then
      780 		     a -> array.bounds = q;
      781 		else
      782 		     f -> bound.next = q;
      783 
      784 		f = q;
      785 
      786 step:
      787 		p = p -> bound.next;
      788 
      789 		if eb ^= null then
      790 		     eb = eb -> bound.next;
      791 	     end;
      792 
      793 	     a -> array.own_number_of_dimensions = sdims;
      794 	end;
      795 
      796 	f = null;
      797 	t1 = t -> symbol.son;
      798 	e1 = e -> symbol.son;
      799 
      800 	do while (t1 ^= null);
      801 	     if e -> symbol.son = null then
      802 		e1 = e;
      803 
      804 	     if def_context.by_name_assignment /* Fixes 2109 */ then do;
      805 		s1 = create_symbol (blk, (e1 -> symbol.token), by_compiler);
      806 		call maker (t1, e1, s1, "1"b, level_number + 1, null);
      807 	     end;
      808 	     else
      809 		call maker (t1, e1, s1, "0"b, level_number + 1, null);
      810 
      811 	     s1 -> symbol.member = "1"b;
      812 	     s1 -> symbol.father = s;
      813 	     if f = null then
      814 		s -> symbol.son = s1;
      815 	     else
      816 		f -> symbol.brother = s1;
      817 	     f = s1;
      818 	     t1 = t1 -> symbol.brother;
      819 	     e1 = e1 -> symbol.brother;
      820 	end;
      821 
      822 	if level_number = 1 then do;
      823 	     if s -> symbol.dcl_size ^= null then do;
      824 		call simplify_expression ((s -> symbol.dcl_size), constant, modified);
      825 
      826 		if modified then do;
      827 		     s -> symbol.dcl_size = null;
      828 		     s -> symbol.c_dcl_size = constant;
      829 		end;
      830 	     end;
      831 
      832 	     s -> symbol.temporary = "1"b;
      833 	     s -> symbol.position = "0"b;		/* fixes bug #2124 */
      834 	     call declare (s);
      835 
      836 	     if s -> symbol.word_size ^= null then do;	/* process aggregrate expression size for use by code generator */
      837 		s -> symbol.word_size =
      838 		     expression_semantics (blk, stmnt, copy_expression (s -> symbol.word_size), "0"b);
      839 
      840 		call simplify_expression ((s -> symbol.word_size), constant, modified);
      841 
      842 		if modified then do;
      843 		     s -> symbol.word_size = null;
      844 		     s -> symbol.c_word_size = constant;
      845 		end;
      846 	     end;
      847 	end;
      848 
      849 
      850 use_eb:
      851 	proc;
      852 
      853 	     if eb ^= null then do;
      854 		q -> bound.lower = eb -> bound.lower;
      855 		q -> bound.upper = eb -> bound.upper;
      856 		q -> bound.c_lower = eb -> bound.c_lower;
      857 		q -> bound.c_upper = eb -> bound.c_upper;
      858 	     end;
      859 	     else do;
      860 		q -> bound.lower, q -> bound.upper = null;
      861 		q -> bound.c_lower, q -> bound.c_upper = 1;
      862 	     end;
      863 
      864 	end use_eb;
      865 
      866      end maker;
      867 
      868 /* subroutine to create a declaration which represents the result of an aggregate valued expression.  */
      869 
      870 declare_expression:
      871      proc (tree, last, level_number) returns (ptr);
      872 
      873 dcl      (tree, last, s, f, a, b) ptr;
      874 dcl      (i, level_number) fixed bin (15);
      875 
      876 	if tree = null then
      877 	     return (null);
      878 
      879 	if tree -> node.type = reference_node then do;
      880 	     call maker ((tree -> reference.symbol), (tree -> reference.symbol), a, "0"b, level_number, null);
      881 	     return (a);
      882 	end;
      883 
      884 	if tree -> node.type ^= operator_node then
      885 	     return (tree);
      886 
      887 	if tree -> operator.op_code = join then do;
      888 	     b = null;
      889 	     f = create_symbol (blk, null, by_compiler);
      890 	     f -> symbol.structure = "1"b;
      891 
      892 	     do i = 1 to tree -> operator.number;
      893 		s = declare_expression ((tree -> operand (i)), null, level_number + 1);
      894 		s -> symbol.father = f;
      895 		s -> symbol.member = "1"b;
      896 
      897 		if b ^= null then
      898 		     b -> symbol.brother = s;
      899 		else
      900 		     f -> symbol.son = s;
      901 
      902 		b = s;
      903 	     end;
      904 
      905 	     f -> symbol.level = level_number;
      906 
      907 	     return (f);
      908 	end;
      909 
      910 	if tree -> operator.op_code = loop then do;
      911 	     b = create_bound ();
      912 	     b -> bound.next = last;
      913 	     last = b;
      914 	     b -> bound.c_lower = 1;
      915 	     b -> bound.upper = tree -> operand (4);
      916 	     if tree -> operand (4) -> node.type = reference_node then
      917 		if tree -> operand (4) -> reference.symbol -> symbol.constant then do;
      918 		     b -> bound.upper = null;
      919 		     b -> bound.c_upper = tree -> operand (4) -> reference.symbol -> symbol.initial -> based_integer;
      920 		end;
      921 
      922 	     s = declare_expression ((tree -> operand (1)), last, level_number);
      923 
      924 	     if last ^= null then do;
      925 		s -> symbol.dimensioned = "1"b;
      926 		s -> symbol.array = create_array ();
      927 		s -> symbol.array -> array.bounds = last;
      928 
      929 		s -> symbol.array -> array.own_number_of_dimensions =
      930 		     s -> symbol.array -> array.own_number_of_dimensions + 1;
      931 		s -> symbol.array -> array.number_of_dimensions = s -> symbol.array -> array.number_of_dimensions + 1;
      932 
      933 		last = null;
      934 
      935 		s -> symbol.reference -> reference.array_ref = "1"b;
      936 	     end;
      937 
      938 	     s -> symbol.array -> array.own_number_of_dimensions =
      939 		s -> symbol.array -> array.own_number_of_dimensions + 1;
      940 	     s -> symbol.array -> array.number_of_dimensions = s -> symbol.array -> array.number_of_dimensions + 1;
      941 
      942 	     return (s);
      943 	end;
      944 
      945 	s = tree -> operand (1) -> reference.symbol;
      946 	call maker (s, s, a, "0"b, level_number, null);
      947 
      948 	if last ^= null & (s -> symbol.bit | s -> symbol.char) then do;
      949 	     have_varying = "0"b;
      950 	     a -> symbol.c_dcl_size = 0;
      951 	     a -> symbol.dcl_size = size (tree);
      952 
      953 	     if no_data_type & have_varying then do;
      954 		a -> symbol.varying, a -> symbol.aligned = "1"b;
      955 		a -> symbol.unaligned, a -> symbol.packed = "0"b;
      956 	     end;
      957 	     a -> symbol.exp_extents = "1"b;
      958 	end;
      959 
      960 	if a -> symbol.dcl_size ^= null then do;
      961 	     call simplify_expression ((a -> symbol.dcl_size), constant, modified);
      962 
      963 	     if modified then do;
      964 		a -> symbol.dcl_size = null;
      965 		a -> symbol.c_dcl_size = constant;
      966 	     end;
      967 	end;
      968 
      969 	if level_number = 1 then do;
      970 	     a -> symbol.temporary = "1"b;
      971 	     call declare (a);
      972 
      973 	     if a -> symbol.word_size ^= null then do;
      974 		a -> symbol.word_size =
      975 		     expression_semantics (blk, stmnt, copy_expression (a -> symbol.word_size), "0"b);
      976 		call simplify_expression ((a -> symbol.word_size), constant, modified);
      977 
      978 		if modified then do;
      979 		     a -> symbol.word_size = null;
      980 		     a -> symbol.c_word_size = constant;
      981 		end;
      982 	     end;
      983 	end;
      984 
      985 	return (a);
      986 
      987      end declare_expression;
      988 
      989 /* subroutine to determine the size of a string array temporary.  */
      990 
      991 size:
      992      proc (e) returns (ptr);
      993 
      994 dcl      (e, s, q) ptr;
      995 dcl      opcode bit (9) aligned;
      996 
      997 	if e = null then
      998 	     call semantic_translator$abort (195, null);
      999 
     1000 	if e -> node.type = reference_node then do;
     1001 	     s = e -> reference.symbol;
     1002 	     if s -> symbol.dcl_size = null then
     1003 		q = declare_constant$integer ((s -> symbol.c_dcl_size));
     1004 	     else
     1005 		q = s -> symbol.dcl_size;
     1006 
     1007 	     if s -> symbol.varying then
     1008 		have_varying = "1"b;
     1009 
     1010 	     q = copy_expression ((q));
     1011 	     this_context = "0"b;
     1012 	     if s -> symbol.refer_extents then
     1013 		call refer_extent (q, (e -> reference.qualifier));
     1014 	     q = expression_semantics (blk, stmnt, q, this_context);
     1015 	     return (q);
     1016 	end;
     1017 
     1018 	if e -> node.type ^= operator_node then
     1019 	     call semantic_translator$abort (195, null);
     1020 
     1021 	opcode = e -> operator.op_code;
     1022 
     1023 	if opcode = cat_string then do;
     1024 	     q = create_operator (add, 3);
     1025 	     q -> operand (1) = declare_temporary (integer_type, default_fix_bin_p, 0, null);
     1026 	     q -> operand (2) = size ((e -> operand (2)));
     1027 	     q -> operand (3) = size ((e -> operand (3)));
     1028 	     return (q);
     1029 	end;
     1030 
     1031 	if opcode = or_bits | opcode = and_bits | opcode = xor_bits | opcode = bool_fun then do;
     1032 	     q = create_operator (max_fun, 3);
     1033 	     q -> operand (1) = declare_temporary (integer_type, default_fix_bin_p, 0, null);
     1034 	     q -> operand (2) = size ((e -> operand (2)));
     1035 	     q -> operand (3) = size ((e -> operand (3)));
     1036 	     return (q);
     1037 	end;
     1038 
     1039 	if opcode = repeat_fun then do;
     1040 	     q = create_operator (mult, 3);
     1041 	     q -> operand (2) = size ((e -> operand (2)));
     1042 	     q -> operand (3) = copy_expression (e -> operand (3));
     1043 	     return (q);
     1044 	end;
     1045 
     1046 	q = size ((e -> operand (1)));
     1047 
     1048 	if q -> node.type = operator_node then
     1049 	     if q -> operator.op_code = length_fun then
     1050 		if q -> operand (2) = e -> operand (2) then do;
     1051 		     if ^q -> operand (1) -> reference.shared then
     1052 			q -> operand (1) -> reference.ref_count = q -> operand (1) -> reference.ref_count - 1;
     1053 		     else do;
     1054 			q = q -> operand (2);
     1055 			if q -> node.type = operator_node then
     1056 			     q = q -> operand (1);
     1057 			if ^q -> reference.shared then
     1058 			     q -> reference.ref_count = q -> reference.ref_count - 1;
     1059 		     end;
     1060 		     return (size ((e -> operand (2))));
     1061 		end;
     1062 
     1063 	return (q);
     1064 
     1065      end size;
     1066 
  2     1 /* BEGIN INCLUDE FILE ... semant.incl.pl1 */
  2     2 
  2     3 /* Modified: 30 Aug 1979 by PCK to fix 1804 and 1823 */
  2     4 /* Modified: 26 Aug 1979 by PCK to implement by name assignment */
  2     5 
  2     6 
  2     7 declare	alloc_semantics	entry(pointer,pointer,pointer);
  2     8 			/* parameter 1:	(input)	block node pointer		*/
  2     9 			/* parameter 2:	(input)	statement node pointer	*/
  2    10 			/* parameter 3:	(in/out)	tree pointer		*/
  2    11 
  2    12 declare	alloc_semantics$init_only entry(pointer,pointer,pointer);
  2    13 			/* parameter 1:	(input)	qualifier pointer		*/
  2    14 			/* parameter 2:	(input)	statement node pointer	*/
  2    15 			/* parameter 3:	(input)	symbol node pointer		*/
  2    16 
  2    17 declare	builtin		entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  2    18 			returns(pointer);
  2    19 			/* parameter 1:	(input)	block node pointer		*/
  2    20 			/* parameter 2:	(input)	statement node pointer	*/
  2    21 			/* parameter 3:	(input)	tree pointer		*/
  2    22 			/* parameter 4:	(input)	subscript pointer		*/
  2    23 			/* parameter 5:	(input)	builtin symbol node pointer	*/
  2    24 			/* parameter 6:	(in/out)	context			*/
  2    25 			/* return:	(output)	tree pointer		*/
  2    26 
  2    27 declare	check_star_extents	entry(pointer,pointer);
  2    28 			/* parameter 1:	(input) symbol node of procedure	*/
  2    29 			/* parameter 2:	(input) argument list pointer		*/
  2    30 
  2    31 declare	compare_declaration	entry(pointer,pointer,bit(1) aligned) reducible
  2    32 			returns(bit(1) aligned);
  2    33 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  2    34 			/* parameter 2:	(input)	symbol node ptr	*/
  2    35 			/* parameter 3:	(input)	"1"b if aligned attribute ignored for string	*/
  2    36 			/* return:	(output)	compare bit		*/
  2    37 
  2    38 declare	context_processor	entry(pointer,label);
  2    39 			/* parameter 1:	(input)	root block node pointer	*/
  2    40 
  2    41 declare	declare		entry(pointer);
  2    42 			/* parameter 1:	(input)	symbol node pointer		*/
  2    43 
  2    44 declare	declare_structure	entry(pointer);
  2    45 			/* parameter 1:	(input)	symbol node pointer		*/
  2    46 
  2    47 declare	defined_reference	entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  2    48 			returns(pointer);
  2    49 			/* parameter 1:	(input)	block node pointer		*/
  2    50 			/* parameter 2:	(input)	statement node pointer	*/
  2    51 			/* parameter 3:	(input)	tree pointer		*/
  2    52 			/* parameter 4:	(input)	subscript list pointer or null*/
  2    53 			/* parameter 5:	(input)	symbol node pointer		*/
  2    54 			/* parameter 6:	(in/out)	context			*/
  2    55 			/* return:	(output)	tree pointer		*/
  2    56 
  2    57 declare	do_semantics	entry(pointer,pointer,pointer);
  2    58 			/* parameter 1:	(input)	block node pointer		*/
  2    59 			/* parameter 2:	(input)	statement node pointer	*/
  2    60 			/* parameter 3:	(input)	tree pointer		*/
  2    61 
  2    62 declare	expand_assign	entry(pointer,pointer,pointer,bit(36) aligned,pointer)
  2    63 			returns(pointer);
  2    64 			/* parameter 1:	(input)	block node pointer		*/
  2    65 			/* parameter 2:	(input)	statement node pointer	*/
  2    66 			/* parameter 3:	(input)	tree pointer		*/
  2    67 			/* parameter 4:	(in/out)	context			*/
  2    68 			/* parameter 5:	(input)	aggregate reference node ptr	*/
  2    69 			/* return:	(output)	tree pointer		*/
  2    70 
  2    71 declare	expand_by_name	entry(pointer,pointer,pointer);
  2    72 			/* parameter 1:	(input)	block node pointer		*/
  2    73 			/* parameter 2:	(input)	statement node pointer	*/
  2    74 			/* parameter 3:	(input/output)	tree pointer		*/
  2    75 
  2    76 declare	expand_infix	entry(pointer,pointer,pointer,bit(36) aligned)
  2    77 			returns(pointer);
  2    78 			/* parameter 1:	(input)	block node pointer		*/
  2    79 			/* parameter 2:	(input)	statement node pointer	*/
  2    80 			/* parameter 3:	(input)	tree pointer		*/
  2    81 			/* parameter 4:	(in/out)	context			*/
  2    82 			/* return:	(output)	tree pointer		*/
  2    83 
  2    84 declare	expand_initial	entry(pointer,pointer,pointer);
  2    85 			/* parameter 1:	(input)	symbol node pointer		*/
  2    86 			/* parameter 2:	(input)	statement node pointer	*/
  2    87 			/* parameter 3:	(input)	locator			*/
  2    88 
  2    89 declare	expand_prefix	entry(pointer,pointer,pointer,bit(36) aligned)
  2    90 			returns(pointer);
  2    91 			/* parameter 1:	(input)	block node pointer		*/
  2    92 			/* parameter 2:	(input)	statement node pointer	*/
  2    93 			/* parameter 3:	(input)	tree pointer		*/
  2    94 			/* parameter 4:	(in/out)	context			*/
  2    95 			/* return:	(output)	tree pointer		*/
  2    96 
  2    97 declare	expand_primitive	entry(pointer,pointer,pointer,bit(36) aligned)
  2    98 			returns(pointer);
  2    99 			/* parameter 1:	(input)	block node pointer		*/
  2   100 			/* parameter 2:	(input)	statement node pointer	*/
  2   101 			/* parameter 3:	(input)	tree pointer		*/
  2   102 			/* parameter 4:	(input)	context			*/
  2   103 			/* return:	(output)	tree pointer		*/
  2   104 
  2   105 declare	expression_semantics entry(pointer,pointer,pointer,bit(36) aligned)
  2   106 			returns(pointer);
  2   107 			/* parameter 1:	(input)	block node pointer		*/
  2   108 			/* parameter 2:	(input)	statement node pointer	*/
  2   109 			/* parameter 3:	(input)	tree pointer		*/
  2   110 			/* parameter 4:	(in/out)	context			*/
  2   111 			/* return:	(output)	tree pointer		*/
  2   112 
  2   113 declare	fill_refer	entry(pointer,pointer,bit(1) aligned)
  2   114 			returns(pointer);
  2   115 			/* parameter 1:	(input)	null,ref node,op node ptr */
  2   116 			/* parameter 2:	(input)	null,ref node,op node ptr */
  2   117 			/* parameter 3:	(input)	copy switch for param 2 */
  2   118 			/* return:	(output)	ptr to processed tree */
  2   119 
  2   120 declare	io_data_list_semantics$format_list_semantics entry(pointer,pointer,pointer);
  2   121 			/* parameter 1:	(input)	block node pointer		*/
  2   122 			/* parameter 2:	(input)	statement node pointer	*/
  2   123 			/* parameter 3:	(in/out)	tree pointer		*/
  2   124 
  2   125 declare	function		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  2   126 			returns(pointer);
  2   127 			/* parameter 1:	(input)	block node pointer		*/
  2   128 			/* parameter 2:	(input)	statement node pointer	*/
  2   129 			/* parameter 3:	(input)	tree pointer		*/
  2   130 			/* parameter 4:	(input)	symbol node pointer		*/
  2   131 			/* parameter 5:	(in/out)	context			*/
  2   132 			/* return:	(output)	tree pointer		*/
  2   133 
  2   134 declare	generic_selector	entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  2   135 			returns(pointer);
  2   136 			/* parameter 1:	(input)	block node pointer	*/
  2   137 			/* parameter 2:	(input)	statement node pointer	*/
  2   138 			/* parameter 3:	(input)	tree pointer	*/
  2   139 			/* parameter 4:	(input)	pointer to argument list	*/
  2   140 			/* parameter 5:	(in/out)	context		*/
  2   141 			/* return:	(output)	tree pointer	*/
  2   142 
  2   143 declare	io_data_list_semantics entry(pointer,pointer,pointer);
  2   144 			/* parameter 1:	(input)	block node pointer		*/
  2   145 			/* parameter 2:	(input)	statement node pointer	*/
  2   146 			/* parameter 3:	(input)	operator node pointer	*/
  2   147 
  2   148 declare	io_semantics	entry(pointer,pointer,pointer);
  2   149 			/* parameter 1:	(input)	block node pointer		*/
  2   150 			/* parameter 2:	(input)	statement node pointer	*/
  2   151 			/* parameter 3:	(input)	tree pointer		*/
  2   152 
  2   153 declare	lookup		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  2   154 			returns(bit(1) aligned);
  2   155 			/* parameter 1:	(input)	block node pointer		*/
  2   156 			/* parameter 2:	(input)	stmnt|symbol node pointer	*/
  2   157 			/* parameter 3:	(input)	token or reference node ptr	*/
  2   158 			/* parameter 4:	(output)	symbol node pointer		*/
  2   159 			/* parameter 5:	(in/out)	context			*/
  2   160 			/* return:	(output)	symbol found bit		*/
  2   161 
  2   162 declare	make_non_quick	entry(pointer, bit (36) aligned);
  2   163 			/* parameter 1:	(input)	tree pointer	*/
  2   164 			/* parameter 2:	(input)	reason why being made nonquick */
  2   165 
  2   166 declare	match_arguments	entry(pointer,pointer) reducible
  2   167 			returns(bit(1) aligned);
  2   168 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  2   169 			/* parameter 2:	(input)	reference or symbol node ptr	*/
  2   170 			/* return:	(output)	compare bit		*/
  2   171 
  2   172 declare	offset_adder	entry(pointer,fixed binary(31),fixed binary(3),bit(1) aligned,
  2   173 			      pointer,fixed binary(31),fixed binary(3),bit(1) aligned,bit(1));
  2   174 			/* parameter 1:	(in/out)	tree pointer		*/
  2   175 			/* parameter 2:	(in/out)	constant size		*/
  2   176 			/* parameter 3:	(in/out)	units			*/
  2   177 			/* parameter 4:	(in/out) 	ON if units ^= word_, but tree in words	*/
  2   178 			/* parameter 5:	(input)	tree pointer		*/
  2   179 			/* parameter 6:	(input)	constant size		*/
  2   180 			/* parameter 7:	(input)	units			*/
  2   181 			/* parameter 8:	(input)	ON if units ^= word_, but tree in words	*/
  2   182 			/* parameter 9:	(input)	ON if should not improve units	*/
  2   183 
  2   184 declare	operator_semantics	entry(pointer,pointer,pointer,bit(36) aligned)
  2   185 			returns(pointer);
  2   186 			/* parameter 1:	(input)	block node pointer		*/
  2   187 			/* parameter 2:	(input)	statement node pointer	*/
  2   188 			/* parameter 3:	(input)	tree pointer		*/
  2   189 			/* parameter 4:	(in/out)	context			*/
  2   190 			/* return:	(output)	tree pointer		*/
  2   191 
  2   192 declare	propagate_bit	entry(pointer,fixed binary(15));
  2   193 			/* parameter 1:	(input)	symbol node pointer		*/
  2   194 			/* parameter 2:	(input)	attribute number		*/
  2   195 
  2   196 declare	semantic_translator$call_es entry(pointer,pointer,pointer,label,bit(1) aligned)
  2   197 			returns(pointer);
  2   198 			/* parameter 1:	(input)	block ptr	*/
  2   199 			/* parameter 2:	(input)	statement ptr	*/
  2   200 			/* parameter 3:	(input)	tree ptr	*/
  2   201 			/* parameter 4:	(input)	failure label	*/
  2   202 			/* parameter 5:	(input)	"1"b -- convert to integer	*/
  2   203 			/* return:	(output)	tree ptr		*/
  2   204 
  2   205 declare	simplify_expression	entry(pointer,fixed bin,bit(1)aligned);
  2   206 			/* parameter 1:	(in/out)	tree pointer		*/
  2   207 			/* parameter 2:	(output)	value of constant, if the entire tree
  2   208*						is simplified		*/
  2   209 			/* parameter 3:	(output)	bit indicating if the tree has
  2   210*						been simplified		*/
  2   211 
  2   212 declare	simplify_offset	entry(pointer,bit(36) aligned);
  2   213 			/* parameter 1:	(input)	reference node pointer	*/
  2   214 			/* parameter 2:	(input)	context			*/
  2   215 
  2   216 declare	subscripter	entry(pointer,pointer,pointer,pointer,pointer)
  2   217 			returns(pointer);
  2   218 			/* parameter 1:	(input)	block node pointer		*/
  2   219 			/* parameter 2:	(input)	statement node pointer	*/
  2   220 			/* parameter 3:	(input)	tree pointer		*/
  2   221 			/* parameter 4:	(in/out)	subscript list pointer	*/
  2   222 			/* parameter 5:	(input)	symbol node pointer		*/
  2   223 			/* return:	(output)	reference node pointer	*/
  2   224 
  2   225 declare	validate		entry(pointer);
  2   226 			/* parameter 1:	(input)	symbol node pointer		*/
  2   227 
  3     1 /****^  *********************************************************
  3     2*        *                                                       *
  3     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  3     4*        *                                                       *
  3     5*        ********************************************************* */
  3     6 
  3     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  3     8 
  3     9 
  3    10 /****^  HISTORY COMMENTS:
  3    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  3    12*     install(89-07-31,MR12.3-1066):	
  3    13*     Removed the obsolete parameter source_line from the dcl of error_().
  3    14*                                                   END HISTORY COMMENTS */
  3    15 
  3    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  3    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  3    18* */
  3    19 
  3    20 declare	adjust_count	entry(pointer);
  3    21 			/* parameter 1:	(input)	any node pointer		*/
  3    22 
  3    23 declare	bindec		entry(fixed bin(31)) reducible
  3    24 			returns(character(12) aligned);
  3    25 			/* parameter 1:	(input)	bin value			*/
  3    26 			/* return:	(output)	character value with blanks	*/
  3    27 
  3    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  3    29 			returns(character(12) aligned varying);
  3    30 			/* parameter 1:	(input)	binary value		*/
  3    31 			/* return:	(output)	char value without blanks	*/
  3    32 
  3    33 declare	binoct		entry(fixed bin(31)) reducible
  3    34 			returns(char(12) aligned);
  3    35 			/* parameter 1:	(input)	binary value		*/
  3    36 			/* return:	(output)	char value with blanks	*/
  3    37 
  3    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  3    39 			returns(char(12) aligned);
  3    40 			/* parameter 1:	(input)	binary value		*/
  3    41 			/* return:	(output)	right-aligned char value	*/
  3    42 
  3    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  3    44 			returns(char(12) varying aligned);
  3    45 			/* parameter 1:	(input)	binary value		*/
  3    46 			/* returns:	(output)	char value without blanks	*/
  3    47 
  3    48 declare	compare_expression	entry(pointer,pointer) reducible
  3    49 			returns(bit(1) aligned);
  3    50 			/* parameter 1:	(input)	any node pointer		*/
  3    51 			/* parameter 2:	(input)	any node pointer		*/
  3    52 			/* return:	(output)	compare bit		*/
  3    53 
  3    54 declare	constant_length	entry (pointer, fixed bin (71))
  3    55 			returns (bit (1) aligned);
  3    56 			/* parameter 1:	(input)	reference node pointer	*/
  3    57 			/* parameter 2:	(input)	value of constant length	*/
  3    58 			/* return:	(output)	"1"b if constant length	*/
  3    59 
  3    60 declare	convert		entry(pointer,bit(36) aligned)
  3    61 			returns(pointer);
  3    62 			/* parameter 1:	(input)	any node pointer		*/
  3    63 			/* parameter 2:	(input)	target type		*/
  3    64 			/* return:	(output)	target value tree pointer	*/
  3    65 
  3    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  3    67 			returns(pointer);
  3    68 			/* parameter 1:	(input)	any node pointer		*/
  3    69 			/* parameter 2:	(input)	target type		*/
  3    70 			/* return:	(output)	target value tree pointer	*/
  3    71 
  3    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  3    73 			returns(pointer);
  3    74 			/* parameter 1:	(input)	any node pointer		*/
  3    75 			/* parameter 2:	(input)	target type		*/
  3    76 			/* return:	(output)	target value tree pointer	*/
  3    77 
  3    78 declare	convert$validate	entry(pointer,pointer);
  3    79 			/* parameter 1:	(input)	source value tree pointer	*/
  3    80 			/* parameter 2:	(input)	target reference node pointer	*/
  3    81 
  3    82 declare	convert$to_target_fb entry(pointer,pointer)
  3    83 			returns(pointer);
  3    84 			/* parameter 1:	(input)	source value tree pointer	*/
  3    85 			/* parameter 2:	(input)	target reference node pointer	*/
  3    86 			/* return:	(output)	target value tree pointer	*/
  3    87 
  3    88 declare	convert$to_target	entry(pointer,pointer)
  3    89 			returns(pointer);
  3    90 			/* parameter 1:	(input)	source value tree pointer	*/
  3    91 			/* parameter 2:	(input)	target reference node pointer	*/
  3    92 			/* return:	(output)	target value tree pointer	*/
  3    93 
  3    94 declare	copy_expression	entry(pointer unaligned)
  3    95 			returns(pointer);
  3    96 			/* parameter 1:	(input)	any node pointer		*/
  3    97 			/* return:	(output)	any node pointer		*/
  3    98 
  3    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  3   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  3   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  3   102 
  3   103 declare	copy_unique_expression entry(pointer)
  3   104 			returns(pointer);
  3   105 			/* parameter 1:	(input)	any node pointer		*/
  3   106 			/* return:	(output)	any node pointer		*/
  3   107 
  3   108 declare	create_array	entry()
  3   109 			returns(pointer);
  3   110 			/* return:	(output)	array node pointer		*/
  3   111 
  3   112 declare	create_block	entry(bit(9) aligned,pointer)
  3   113 			returns(pointer);
  3   114 			/* parameter 1:	(input)	block type		*/
  3   115 			/* parameter 2:	(input)	father block node pointer	*/
  3   116 			/* return:	(output)	block node pointer		*/
  3   117 
  3   118 declare	create_bound	entry()
  3   119 			returns(pointer);
  3   120 			/* return:	(output)	bound node pointer		*/
  3   121 
  3   122 declare	create_context	entry(pointer,pointer)
  3   123 			returns(pointer);
  3   124 			/* parameter 1:	(input)	block node pointer		*/
  3   125 			/* parameter 2:	(input)	token pointer		*/
  3   126 			/* return:	(output)	context node pointer	*/
  3   127 
  3   128 declare	create_cross_reference entry()
  3   129 			returns(pointer);
  3   130 			/* return:	(output)	cross reference node pointer	*/
  3   131 
  3   132 declare	create_default	entry
  3   133 			returns(pointer);
  3   134 			/* return:	(output)	default node pointer	*/
  3   135 
  3   136 declare	create_identifier	entry()
  3   137 			returns(pointer);
  3   138 			/* return:	(output)	token node pointer		*/
  3   139 
  3   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  3   141 			returns(pointer);
  3   142 			/* parameter 1:	(input)	block node pointer		*/
  3   143 			/* parameter 2:	(input)	token node pointer		*/
  3   144 			/* parameter 3:	(input)	declare type		*/
  3   145 			/* return:	(output)	label node pointer		*/
  3   146 
  3   147 declare	create_list	entry(fixed bin(15))
  3   148 			returns(pointer);
  3   149 			/* parameter 1:	(input)	number of list elements	*/
  3   150 			/* return:	(output)	list node pointer		*/
  3   151 
  3   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  3   153 			returns(pointer);
  3   154 			/* parameter 1:	(input)	operator type		*/
  3   155 			/* parameter 2:	(input)	number of operands		*/
  3   156 			/* return:	(output)	operator node pointer	*/
  3   157 
  3   158 declare	create_reference	entry(pointer)
  3   159 			returns(pointer);
  3   160 			/* parameter 1:	(input)	symbol node pointer		*/
  3   161 			/* return:	(output)	reference node pointer	*/
  3   162 
  3   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  3   164 			returns(pointer);
  3   165 			/* parameter 1:	(input)	statement type		*/
  3   166 			/* parameter 2:	(input)	block node pointer		*/
  3   167 			/* parameter 3:	(input)	label node pointer		*/
  3   168 			/* parameter 4:	(input)	conditions		*/
  3   169 			/* return:	(output)	statement node pointer	*/
  3   170 
  3   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  3   172 			returns(pointer);
  3   173 			/* parameter 1:	(input)	statement type		*/
  3   174 			/* parameter 2:	(input)	block node pointer		*/
  3   175 			/* parameter 3:	(input)	label node pointer		*/
  3   176 			/* parameter 4:	(input)	conditions		*/
  3   177 			/* return:	(output)	statement node pointer	*/
  3   178 
  3   179 declare	create_storage	entry(fixed bin(15))
  3   180 			returns(pointer);
  3   181 			/* parameter 1:	(input)	number of words		*/
  3   182 			/* return:	(output)	storage block pointer	*/
  3   183 
  3   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  3   185 			returns(pointer);
  3   186 			/* parameter 1:	(input)	block node pointer		*/
  3   187 			/* parameter 2:	(input)	token node pointer		*/
  3   188 			/* parameter 3:	(input)	declare type		*/
  3   189 			/* return:	(output)	symbol node pointer		*/
  3   190 
  3   191 declare	create_token	entry (character (*), bit (9) aligned)
  3   192 			returns (ptr);
  3   193 			/* parameter 1:	(input)	token string		*/
  3   194 			/* parameter 2:	(input)	token type		*/
  3   195 			/* return:	(output)	token node ptr		*/
  3   196 
  3   197 declare	create_token$init_hash_table entry ();
  3   198 
  3   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  3   200 			returns (ptr);
  3   201 			/* parameter 1:	(input)	token string		*/
  3   202 			/* parameter 2:	(input)	token type		*/
  3   203 			/* parameter 3:	(input)	protected flag		*/
  3   204 			/* return:	(output)	token node ptr		*/
  3   205 
  3   206 declare	decbin		entry(character(*) aligned) reducible
  3   207 			returns(fixed bin(31));
  3   208 			/* parameter 1:	(input)	decimal character string	*/
  3   209 			/* return:	(output)	binary value		*/
  3   210 
  3   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  3   212 			returns(pointer);
  3   213 			/* parameter 1:	(input)	value			*/
  3   214 			/* parameter 2:	(input)	type			*/
  3   215 			/* parameter 3:	(input)	size			*/
  3   216 			/* parameter 4:	(input)	scale			*/
  3   217 			/* return:	(output)	reference node pointer	*/
  3   218 
  3   219 declare	declare_constant$bit entry(bit(*) aligned)
  3   220 			returns(pointer);
  3   221 			/* parameter 1:	(input)	bit			*/
  3   222 			/* return:	(output)	reference node pointer	*/
  3   223 
  3   224 declare	declare_constant$char entry(character(*) aligned)
  3   225 			returns(pointer);
  3   226 			/* parameter 1:	(input)	character			*/
  3   227 			/* return:	(output)	reference node pointer	*/
  3   228 
  3   229 declare	declare_constant$desc entry(bit(*) aligned)
  3   230 			returns(pointer);
  3   231 			/* parameter 1:	(input)	descriptor bit value	*/
  3   232 			/* return:	(output)	reference node pointer	*/
  3   233 
  3   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  3   235 			returns(pointer);
  3   236 			/* parameter 1:	(input)	integer			*/
  3   237 			/* return:	(output)	reference node pointer	*/
  3   238 
  3   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  3   240 			returns(pointer);
  3   241 			/* parameter 1:	(input)	block node pointer		*/
  3   242 			/* parameter 2:	(input)	statement node pointer	*/
  3   243 			/* parameter 3:	(input)	symbol node pointer		*/
  3   244 			/* parameter 4:	(input)	loc pointer		*/
  3   245 			/* parameter 5:	(input)	array descriptor bit
  3   246*						cross_section bit	*/
  3   247 			/* return:	(output)	reference node pointer	*/
  3   248 
  3   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  3   250 			returns(pointer);
  3   251 			/* parameter 1:	(input)	block node pointer	*/
  3   252 			/* parameter 2:	(input)	statement node pointer 	*/
  3   253 			/* parameter 3:	(input)	symbol node pointer	*/
  3   254 			/* parameter 4:	(input)	loc pointer	*/
  3   255 			/* parameter 5:	(input)	array descriptor bit
  3   256*						cross_section bit	*/
  3   257 			/* return:	(output)	reference node pointer	*/
  3   258 
  3   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  3   260 			returns(pointer);
  3   261 			/* parameter 1:	(input)	block node pointer		*/
  3   262 			/* parameter 2:	(input)	statement node pointer	*/
  3   263 			/* parameter 3:	(input)	symbol node pointer		*/
  3   264 			/* parameter 4:	(input)	loc pointer		*/
  3   265 			/* parameter 5:	(input)	array descriptor bit
  3   266*						cross_section bit	*/
  3   267 			/* return:	(output)	reference node pointer	*/
  3   268 
  3   269 declare	declare_integer	entry(pointer)
  3   270 			returns(pointer);
  3   271 			/* parameter 1:	(input)	block node pointer		*/
  3   272 			/* return:	(output)	reference node pointer 	*/
  3   273 
  3   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  3   275 			/* parameter 1:	(input)	picture string		*/
  3   276 			/* parameter 2:	(input)	symbol node pointer		*/
  3   277 			/* parameter 3:	(output)	error code, if any		*/
  3   278 
  3   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  3   280 			returns(pointer);
  3   281 			/* parameter 1:	(input)	picture string		*/
  3   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  3   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  3   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  3   285 			/* return:	(output)	reference node pointer	*/
  3   286 
  3   287 declare	declare_pointer	entry(pointer)
  3   288 			returns(pointer);
  3   289 			/* parameter 1:	(input)	block node pointer		*/
  3   290 			/* return:	(output)	reference node pointer	*/
  3   291 
  3   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  3   293 			returns(pointer);
  3   294 			/* parameter 1:	(input)	type			*/
  3   295 			/* parameter 2:	(input)	precision			*/
  3   296 			/* parameter 3:	(input)	scale			*/
  3   297 			/* parameter 4:	(input)	length			*/
  3   298 			/* return:	(output)	reference node pointer	*/
  3   299 
  3   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  3   301 			returns(char(120) varying);
  3   302 			/* parameter 1:	(input)	node pointer		*/
  3   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  3   304 			/* return:	(output)	source line id		*/
  3   305 
  3   306 declare	decode_source_id	entry(
  4     1 			1 structure unaligned,
  4     2 			  2 /* file_number */	bit(8),
  4     3 			  2 /* line_number */	bit(14),
  4     4 			  2 /* stmt_number */	bit(5),
  3   307 
  3   308 			bit(1) aligned)
  3   309 			returns(char(120) varying);
  3   310 			/* parameter 1:	(input)	source id			*/
  3   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  3   312 			/* return:	(output)	source line id		*/
  3   313 
  3   314 declare	error		entry(fixed bin(15),pointer,pointer);
  3   315 			/* parameter 1:	(input)	error number		*/
  3   316 			/* parameter 2:	(input)	statement node pointer or null*/
  3   317 			/* parameter 3:	(input)	token node pointer 		*/
  3   318 
  3   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  3   320 			/* parameter 1:	(input)	error number		*/
  3   321 			/* parameter 2:	(input)	statement node pointer or null*/
  3   322 			/* parameter 3:	(input)	token node pointer 		*/
  3   323 
  3   324 declare	error_		entry(fixed bin(15),
  5     1 			1 structure unaligned,
  5     2 			  2 /* file_number */	bit(8),
  5     3 			  2 /* line_number */	bit(14),
  5     4 			  2 /* stmt_number */	bit(5),
  3   325 
  3   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  3   327 			/* parameter 1:	(input)	error number		*/
  3   328 			/* parameter 2:	(input)	statement id		*/
  3   329 			/* parameter 3:	(input)	any node pointer		*/
  3   330 			/* parameter 4:	(input)	source segment		*/
  3   331 			/* parameter 5:	(input)	source starting character	*/
  3   332 			/* parameter 6:	(input)	source length		*/
  3   333 
  3   334 declare	error_$no_text	entry(fixed bin(15),
  6     1 			1 structure unaligned,
  6     2 			  2 /* file_number */	bit(8),
  6     3 			  2 /* line_number */	bit(14),
  6     4 			  2 /* stmt_number */	bit(5),
  3   335 
  3   336 			pointer);
  3   337 			/* parameter 1:	(input)	error number		*/
  3   338 			/* parameter 2:	(input)	statement id		*/
  3   339 			/* parameter 3:	(input)	any node pointer		*/
  3   340 
  3   341 declare	error_$initialize_error entry();
  3   342 
  3   343 declare	error_$finish	entry();
  3   344 
  3   345 declare	free_node		entry(pointer);
  3   346 			/* parameter 1:	any node pointer			*/
  3   347 
  3   348 declare	get_array_size	entry(pointer,fixed bin(3));
  3   349 			/* parameter 1:	(input)	symbol node pointer		*/
  3   350 			/* parameter 2:	(input)	units			*/
  3   351 
  3   352 declare	get_size		entry(pointer);
  3   353 			/* parameter 1:	(input)	symbol node pointer		*/
  3   354 
  3   355 declare	merge_attributes	external entry(pointer,pointer)
  3   356 			returns(bit(1) aligned);
  3   357 			/* parameter 1:	(input)	target symbol node pointer */
  3   358 			/* parameter 2:	(input)	source symbol node pointer */
  3   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  3   360 
  3   361 declare	optimizer		entry(pointer);
  3   362 			/* parameter 1:	(input)	root pointer		*/
  3   363 
  3   364 declare	parse_error	entry(fixed bin(15),pointer);
  3   365 			/* parameter 1:	(input)	error number		*/
  3   366 			/* parameter 2:	(input)	any node pointer		*/
  3   367 
  3   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  3   369 			/* parameter 1:	(input)	error number		*/
  3   370 			/* parameter 2:	(input)	any node pointer		*/
  3   371 
  3   372 declare	pl1_error_print$write_out
  3   373 			entry(fixed bin(15),
  7     1 			1 structure unaligned,
  7     2 			  2 /* file_number */	bit(8),
  7     3 			  2 /* line_number */	bit(14),
  7     4 			  2 /* stmt_number */	bit(5),
  3   374 
  3   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  3   376 			/* parameter 1:	(input)	error number		*/
  3   377 			/* parameter 2:	(input)	statement identification	*/
  3   378 			/* parameter 3:	(input)	any node pointer		*/
  3   379 			/* parameter 4:	(input)	source segment		*/
  3   380 			/* parameter 5:	(input)	source character index	*/
  3   381 			/* parameter 6:	(input)	source length		*/
  3   382 			/* parameter 7:	(input)	source line		*/
  3   383 
  3   384 declare	pl1_error_print$listing_segment
  3   385 			entry(fixed bin(15),
  8     1 			1 structure unaligned,
  8     2 			  2 /* file_number */	bit(8),
  8     3 			  2 /* line_number */	bit(14),
  8     4 			  2 /* stmt_number */	bit(5),
  3   386 
  3   387 			pointer);
  3   388 			/* parameter 1:	(input)	error number		*/
  3   389 			/* parameter 2:	(input)	statement identification	*/
  3   390 			/* parameter 3:	(input)	token node pointer		*/
  3   391 
  3   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  3   393 			/* parameter 1:	(input)	string			*/
  3   394 
  3   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  3   396 			/* parameter 1:	(input)	string			*/
  3   397 
  3   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  3   399 			/* parameter 1:	(input)	string			*/
  3   400 			/* parameter 2:	(input)	string length or 0		*/
  3   401 
  3   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  3   403 			/* parameter 1:	(input)	string			*/
  3   404 			/* parameter 2:	(input)	string length or 0		*/
  3   405 
  3   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  3   407 			/* parameter 1:	(input)	string pointer		*/
  3   408 			/* parameter 2:	(input)	string size		*/
  3   409 
  3   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  3   411 			/* parameter 1:	(input)	string pointer		*/
  3   412 			/* parameter 2:	(input)	string length or 0		*/
  3   413 
  3   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  3   415 			/* parameter 1:	(input)	string			*/
  3   416 			/* parameter 2:	(input)	length			*/
  3   417 
  3   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  3   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  3   420 			/* parameter 2:	(input)	line number		*/
  3   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  3   422 			/* parameter 4:	(input)	number of chars to copy	*/
  3   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  3   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  3   425 
  3   426 declare	refer_extent	entry(pointer,pointer);
  3   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  3   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  3   429 
  3   430 declare	reserve$clear	entry()
  3   431 			returns(pointer);
  3   432 			/* return:	(output)	pointer			*/
  3   433 
  3   434 declare	reserve$declare_lib	entry(fixed bin(15))
  3   435 			returns(pointer);
  3   436 			/* parameter 1:	(input)	builtin function number	*/
  3   437 			/* return:	(output)	pointer			*/
  3   438 
  3   439 declare	reserve$read_lib	entry(fixed bin(15))
  3   440 			returns(pointer);
  3   441 			/* parameter 1:	(input)	builtin function number	*/
  3   442 			/* return:	(output)	pointer			*/
  3   443 
  3   444 declare	semantic_translator	entry();
  3   445 
  3   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  3   447 			/* parameter 1:	(input)	error number		*/
  3   448 			/* parameter 2:	(input)	any node pointer		*/
  3   449 
  3   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  3   451 			/* parameter 1:	(input)	error number		*/
  3   452 			/* parameter 2:	(input)	any node pointer		*/
  3   453 
  3   454 declare	share_expression	entry(ptr)
  3   455 			returns(ptr);
  3   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  3   457 			/* return:	(output)	tree pointer or null	*/
  3   458 
  3   459 declare	token_to_binary	entry(ptr) reducible
  3   460 			returns(fixed bin(31));
  3   461 			/* parameter 1:	(input)	token node pointer		*/
  3   462 			/* return:	(output)	converted binary value	*/
  3   463 
  3   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
  2   228 
  2   229 /* END INCLUDE FILE ... semant.incl.pl1 */
     1067 
  9     1 dcl	1 array			based aligned,
  9     2 	2 node_type		bit(9) unaligned,
  9     3 	2 reserved		bit(34) unaligned,
  9     4 	2 number_of_dimensions	fixed(7) unaligned,
  9     5 	2 own_number_of_dimensions	fixed(7) unaligned,
  9     6 	2 element_boundary		fixed(3) unaligned,
  9     7 	2 size_units		fixed(3) unaligned,
  9     8 	2 offset_units		fixed(3) unaligned,
  9     9 	2 interleaved		bit(1) unaligned,
  9    10 	2 c_element_size		fixed(24),
  9    11 	2 c_element_size_bits	fixed(24),
  9    12 	2 c_virtual_origin		fixed(24),
  9    13 	2 element_size		ptr unaligned,
  9    14 	2 element_size_bits		ptr unaligned,
  9    15 	2 virtual_origin		ptr unaligned,
  9    16 	2 symtab_virtual_origin	ptr unaligned,
  9    17 	2 symtab_element_size	ptr unaligned,
  9    18 	2 bounds			ptr unaligned,
  9    19 	2 element_descriptor	ptr unaligned;
  9    20 
  9    21 dcl	1 bound			based aligned,
  9    22 	2 node_type		bit(9),
  9    23 	2 c_lower			fixed(24),
  9    24 	2 c_upper			fixed(24),
  9    25 	2 c_multiplier		fixed(24),
  9    26 	2 c_desc_multiplier		fixed(24),
  9    27 	2 lower			ptr unaligned,
  9    28 	2 upper			ptr unaligned,
  9    29 	2 multiplier		ptr unaligned,
  9    30 	2 desc_multiplier		ptr unaligned,
  9    31 	2 symtab_lower		ptr unaligned,
  9    32 	2 symtab_upper		ptr unaligned,
  9    33 	2 symtab_multiplier		ptr unaligned,
  9    34 	2 next			ptr unaligned;
     1068 
 10     1 /* BEGIN INCLUDE FILE ... block.incl.pl1 */
 10     2 /* Modified 22 Ocober 1980 by M. N. Davidoff to increase max block.number to 511 */
 10     3 /* format: style3,idind30 */
 10     4 
 10     5 declare	1 block			aligned based,
 10     6 	  2 node_type		bit (9) unaligned,
 10     7 	  2 source_id		structure unaligned,
 10     8 	    3 file_number		bit (8),
 10     9 	    3 line_number		bit (14),
 10    10 	    3 statement_number	bit (5),
 10    11 	  2 father		ptr unaligned,
 10    12 	  2 brother		ptr unaligned,
 10    13 	  2 son			ptr unaligned,
 10    14 	  2 declaration		ptr unaligned,
 10    15 	  2 end_declaration		ptr unaligned,
 10    16 	  2 default		ptr unaligned,
 10    17 	  2 end_default		ptr unaligned,
 10    18 	  2 context		ptr unaligned,
 10    19 	  2 prologue		ptr unaligned,
 10    20 	  2 end_prologue		ptr unaligned,
 10    21 	  2 main			ptr unaligned,
 10    22 	  2 end_main		ptr unaligned,
 10    23 	  2 return_values		ptr unaligned,
 10    24 	  2 return_count		ptr unaligned,
 10    25 	  2 plio_ps		ptr unaligned,
 10    26 	  2 plio_fa		ptr unaligned,
 10    27 	  2 plio_ffsb		ptr unaligned,
 10    28 	  2 plio_ssl		ptr unaligned,
 10    29 	  2 plio_fab2		ptr unaligned,
 10    30 	  2 block_type		bit (9) unaligned,
 10    31 	  2 prefix		bit (12) unaligned,
 10    32 	  2 like_attribute		bit (1) unaligned,
 10    33 	  2 no_stack		bit (1) unaligned,
 10    34 	  2 get_data		bit (1) unaligned,
 10    35 	  2 flush_at_call		bit (1) unaligned,
 10    36 	  2 processed		bit (1) unaligned,
 10    37 	  2 text_displayed		bit (1) unaligned,
 10    38 	  2 number		fixed bin (9) unsigned unaligned,
 10    39 	  2 free_temps		dimension (3) ptr,	/* these fields are used by the code generator */
 10    40 	  2 temp_list		ptr,
 10    41 	  2 entry_list		ptr,
 10    42 	  2 o_and_s		ptr,
 10    43 	  2 why_nonquick		aligned,
 10    44 	    3 auto_adjustable_storage bit (1) unaligned,
 10    45 	    3 returns_star_extents	bit (1) unaligned,
 10    46 	    3 stack_extended_by_args	bit (1) unaligned,
 10    47 	    3 invoked_by_format	bit (1) unaligned,
 10    48 	    3 format_statement	bit (1) unaligned,
 10    49 	    3 io_statements		bit (1) unaligned,
 10    50 	    3 assigned_to_entry_var	bit (1) unaligned,
 10    51 	    3 condition_statements	bit (1) unaligned,
 10    52 	    3 no_owner		bit (1) unaligned,
 10    53 	    3 recursive_call	bit (1) unaligned,
 10    54 	    3 options_non_quick	bit (1) unaligned,
 10    55 	    3 options_variable	bit (1) unaligned,
 10    56 	    3 never_referenced	bit (1) unaligned,
 10    57 	    3 pad_nonquick		bit (5) unaligned,
 10    58 	  2 prologue_flag		bit (1) unaligned,
 10    59 	  2 options_main		bit (1) unaligned,
 10    60 	  2 pad			bit (16) unaligned,
 10    61 	  2 number_of_entries	fixed bin (17),
 10    62 	  2 level			fixed bin (17),
 10    63 	  2 last_auto_loc		fixed bin (17),
 10    64 	  2 symbol_block		fixed bin (17),
 10    65 	  2 entry_info		fixed bin (18),
 10    66 	  2 enter			structure unaligned,
 10    67 	    3 start		fixed bin (17),
 10    68 	    3 end			fixed bin (17),
 10    69 	  2 leave			structure unaligned,
 10    70 	    3 start		fixed bin (17),
 10    71 	    3 end			fixed bin (17),
 10    72 	  2 owner			ptr;
 10    73 
 10    74 declare	max_block_number		fixed bin internal static options (constant) initial (511);
 10    75 
 10    76 /* END INCLUDE FILE ... block.incl.pl1 */
     1069 
 11     1 /* BEGIN INCLUDE FILE ... boundary.incl.pl1 */
 11     2 
 11     3 /* Modified: 26 Apr 1979 by PCK to implement 4-bit decimal */
 11     4 
 11     5 dcl (	bit_		init(1),
 11     6 	digit_		init(2),
 11     7 	character_	init(3),
 11     8 	half_		init(4),
 11     9 	word_		init(5),
 11    10 	mod2_		init(6),
 11    11 	mod4_		init(7)) fixed bin(3) int static options(constant);
 11    12 
 11    13 /* END INCLUDE FILE ... boundary.incl.pl1 */
     1070 
 12     1 /* BEGIN INCLUDE FILE ... declare_type.incl.pl1 */
 12     2 
 12     3 /* Modified: 25 Apr 1979 by PCK to implement 4-bit decimal */
 12     4 
 12     5 dcl  (	by_declare	initial("001"b),
 12     6 	by_explicit_context initial("010"b),
 12     7 	by_context	initial("011"b),
 12     8 	by_implication	initial("100"b),
 12     9 	by_compiler	initial("101"b)) int static bit(3) aligned options(constant);
 12    10 
 12    11 /* END INCLUDE FILE ... declare_type.incl.pl1 */
     1071 
 13     1 /* BEGIN INCLUDE FILE ... decoded_token_types.incl.pl1 */
 13     2 
 13     3 /* This array maps token types into declaration types suitable
 13     4*   for passing to convert. */
 13     5 
 13     6 dcl	decoded_type(33:62) bit(36) aligned int static options(constant) init
 13     7 	(	"000100000000000000000000000000000000"b,	/* bit_string */
 13     8 		"000010000000000000000000000000000000"b,	/* char_string */
 13     9 		(13) (36) "0"b,
 13    10 		"010000000000000000000101000001100000"b,	/* fixed_bin */
 13    11 		"010000000000000000000101000001100000"b,	/* bin_integer */
 13    12 		"010000000000000000000101000010100000"b,	/* fixed_dec */
 13    13 		"010000000000000000000101000001100000"b,	/* dec_integer */
 13    14 		"001000000000000000000101000001100000"b,	/* float_bin */
 13    15 		"0"b,
 13    16 		"001000000000000000000101000010100000"b,	/* float_dec */
 13    17 		"0"b,
 13    18 		"010000000000000000000101000001010000"b,	/* i_fixed_bin */
 13    19 		"010000000000000000000101000001010000"b,	/* i_bin_integer */
 13    20 		"010000000000000000000101000010010000"b,	/* i_fixed_dec */
 13    21 		"010000000000000000000101000010010000"b,	/* i_dec_integer */
 13    22 		"001000000000000000000101000001010000"b,	/* i_float_bin */
 13    23 		"0"b,
 13    24 		"001000000000000000000101000010010000"b);	/* i_float_dec */
 13    25 
 13    26 /* END INCLUDE FILE ... decoded_token_types.incl.pl1 */
     1072 
 14     1 /* BEGIN INCLUDE FILE ... list.incl.pl1 */
 14     2 
 14     3 /* Modified 26 June 81 by EBush to add max_list_elements */
 14     4 
 14     5 
 14     6 dcl	1 list		based aligned,
 14     7 	2 node_type	bit(9) unaligned,
 14     8 	2 reserved	bit(12) unaligned,
 14     9 	2 number		fixed(14) unaligned,
 14    10 	2 element		dimension(n refer(list.number)) ptr unaligned;
 14    11 
 14    12 dcl       max_list_elements   fixed bin(17) internal static options (constant)
 14    13 	                    init(16383);
 14    14 
 14    15 /* END INCLUDE FILE ... list.incl.pl1 */
     1073 
 15     1 /* BEGIN INCLUDE FILE ... mask.incl.pl1 */
 15     2 
 15     3 dcl (	structure_mask		init("100000000000000000000000000000000000"b),
 15     4 	fixed_mask		init("010000000000000000000000000000000000"b),
 15     5 	float_mask		init("001000000000000000000000000000000000"b),
 15     6 	bit_mask			init("000100000000000000000000000000000000"b),
 15     7 	char_mask			init("000010000000000000000000000000000000"b),
 15     8 	ptr_mask			init("000001000000000000000000000000000000"b),
 15     9 	offset_mask		init("000000100000000000000000000000000000"b),
 15    10 	area_mask			init("000000010000000000000000000000000000"b),
 15    11 	label_mask		init("000000001000000000000000000000000000"b),
 15    12 	entry_mask		init("000000000100000000000000000000000000"b),
 15    13 	file_mask			init("000000000010000000000000000000000000"b),
 15    14 	arg_descriptor_mask		init("000000000001000000000000000000000000"b),
 15    15 	storage_block_mask		init("000000000000100000000000000000000000"b),
 15    16 	lock_mask			init("000000000000010000000000000000000000"b),
 15    17 	condition_mask		init("000000000000001000000000000000000000"b),
 15    18 	format_mask		init("000000000000000100000000000000000000"b),
 15    19 	builtin_mask		init("000000000000000010000000000000000000"b),
 15    20 	generic_mask		init("000000000000000001000000000000000000"b),
 15    21 	picture_mask		init("000000000000000000100000000000000000"b),
 15    22 	dimensioned_mask		init("000000000000000000010000000000000000"b),
 15    23 	initialed_mask		init("000000000000000000001000000000000000"b),
 15    24 	aligned_mask		init("000000000000000000000100000000000000"b),
 15    25 	unaligned_mask		init("000000000000000000000010000000000000"b),
 15    26 	signed_mask		init("000000000000000000000001000000000000"b),
 15    27 	unsigned_mask		init("000000000000000000000000100000000000"b),
 15    28 	precision_mask		init("000000000000000000000000010000000000"b),
 15    29 	varying_mask		init("000000000000000000000000001000000000"b),
 15    30 	local_mask		init("000000000000000000000000000100000000"b),
 15    31 	decimal_mask		init("000000000000000000000000000010000000"b),
 15    32 	binary_mask		init("000000000000000000000000000001000000"b),
 15    33 	real_mask			init("000000000000000000000000000000100000"b),
 15    34 	complex_mask		init("000000000000000000000000000000010000"b),
 15    35 	variable_mask		init("000000000000000000000000000000001000"b),
 15    36 	reducible_mask		init("000000000000000000000000000000000100"b),
 15    37 	irreducible_mask		init("000000000000000000000000000000000010"b),
 15    38 	returns_mask		init("000000000000000000000000000000000001"b)) bit(36) aligned int static
 15    39 				options(constant);
 15    40 
 15    41 dcl (	arithmetic_mask		init("011000000000000000000000000011110000"b),
 15    42 	computational_mask		init("011110000000000000100000000011110000"b),
 15    43 	fixed_binary_real_mask	init("010000000000000000000000000001100000"b),
 15    44 	fixed_decimal_real_mask	init("010000000000000000000000000010100000"b),
 15    45 	float_decimal_real_mask	init("001000000000000000000000000010100000"b),
 15    46 	fixed_decimal_complex_mask	init("010000000000000000000000000010010000"b),
 15    47 	float_decimal_complex_mask	init("001000000000000000000000000010010000"b),
 15    48 	string_mask		init("000110000000000000000000000000000000"b),
 15    49 	undesirable_mask		init("111111111111111111100111110111110111"b),
 15    50 	convert_mask		init("011111111111111111100111110111111110"b),
 15    51 	declare_constant_mask	init("111111111111111111100000000011110000"b)
 15    52 								     ) bit(36) aligned int static
 15    53 									options(constant);
 15    54 
 15    55 /* END INCLUDE FILE ... mask.incl.pl1 */
     1074 
 16     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
 16     2 
 16     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
 16     4 
 16     5 dcl (	block_node		initial("000000001"b),
 16     6 	statement_node		initial("000000010"b),
 16     7 	operator_node		initial("000000011"b),
 16     8 	reference_node		initial("000000100"b),
 16     9 	token_node		initial("000000101"b),
 16    10 	symbol_node		initial("000000110"b),
 16    11 	context_node		initial("000000111"b),
 16    12 	array_node		initial("000001000"b),
 16    13 	bound_node		initial("000001001"b),
 16    14 	format_value_node		initial("000001010"b),
 16    15 	list_node			initial("000001011"b),
 16    16 	default_node		initial("000001100"b),
 16    17 	machine_state_node		initial("000001101"b),
 16    18 	source_node		initial("000001110"b),
 16    19 	label_node		initial("000001111"b),
 16    20 	cross_reference_node	initial("000010000"b),
 16    21 	sf_par_node		initial("000010001"b),
 16    22 	temporary_node		initial("000010010"b),
 16    23 	label_array_element_node	initial("000010011"b),
 16    24 	by_name_agg_node		initial("000010100"b))
 16    25 				bit(9) internal static aligned options(constant);
 16    26 
 16    27 dcl	1 node			based aligned,
 16    28 	2 type			unal bit(9),
 16    29 	2 source_id		unal structure,
 16    30 	  3 file_number		bit(8),
 16    31 	  3 line_number		bit(14),
 16    32 	  3 statement_number	bit(5);
 16    33 
 16    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
     1075 
 17     1 /* BEGIN INCLUDE FILE ... op_codes.incl.pl1 */
 17     2 
 17     3 /* Modified: 25 Apr 1979 by PCK 4-bit decimal */
 17     4 /* Modified: 6 Jun 1979 by PG to add rank and byte */
 17     5 /* Modified: 26 Dec 1979 by PCK to add assign_by_name */
 17     6 /* Modified: 26 July 82 BIM wordno, segno */
 17     7 
 17     8 dcl (	add		initial("000010001"b),	/* opnd(1) <- opnd(2)+opnd(3)		*/
 17     9 	sub		initial("000010010"b),	/* opnd(1) <- opnd(2)-opnd(3)		*/
 17    10 	mult		initial("000010011"b),	/* opnd(1) <- opnd(2)*opnd(3)		*/
 17    11 	div		initial("000010100"b),	/* opnd(1) <- opnd(2)/opnd(3)		*/
 17    12 	negate		initial("000010101"b),	/* opnd(1) <- -opnd(2)  		*/
 17    13 	exp		initial("000010110"b),	/* opnd(1) <- opnd(2) ** opnd(3)	*/
 17    14 
 17    15 	and_bits		initial("000100001"b),	/* opnd(1) <- opnd(2) & opnd(3)	*/
 17    16 	or_bits		initial("000100010"b),	/* opnd(1) <- opnd(2)|opnd(3)		*/
 17    17 	xor_bits		initial("000100011"b),	/* opnd(1) <- opnd(2) xor opnd(3)	*/
 17    18 	not_bits		initial("000100100"b),	/* opnd(1) <- ^opnd(2)		*/
 17    19 	cat_string	initial("000100101"b),	/* opnd(1) <- opnd(2)||opnd(3)	*/
 17    20 	bool_fun		initial("000100110"b),	/* opnd(1) <- bool(opnd(2),opnd(3),opnd(4)) */
 17    21 
 17    22 	assign		initial("000110001"b),	/* opnd(1) <- opnd(2)		*/
 17    23 	assign_size_ck	initial("000110010"b),	/* opnd(1) <- opnd(2)		*/
 17    24 	assign_zero	initial("000110011"b),	/* opnd(1) <- 0			*/
 17    25 	copy_words	initial("000110100"b),	/* move opnd(2) to opnd(1) by opnd(3) words */
 17    26 	copy_string	initial("000110101"b),	/* move opnd(2) to opnd(1) by opnd(3) units */
 17    27 	make_desc		initial("000110110"b),	/* opnd(1) <- descriptor(opnd(2),opnd(3)) */
 17    28 	assign_round	initial("000110111"b),	/* opnd(1) <- opnd(2) rounded		*/
 17    29 	pack		initial("000111000"b),	/* opnd(1) <- encode to picture opnd(2) */
 17    30 	unpack		initial("000111001"b),	/* opnd(1) <- decode from picture opnd(2) */
 17    31 
 17    32 	less_than		initial("001000100"b),	/* opnd(1) <- opnd(2) < opnd(3)	*/
 17    33 	greater_than	initial("001000101"b),	/* opnd(1) <- opnd(2) > opnd(3)	*/
 17    34 	equal		initial("001000110"b),	/* opnd(1) <- opnd(2) = opnd(3)	*/
 17    35 	not_equal		initial("001000111"b),	/* opnd(1) <- opnd(2) ^= opnd(3)	*/
 17    36 	less_or_equal	initial("001001000"b),	/* opnd(1) <- opnd(2) <= opnd(3)	*/
 17    37 	greater_or_equal	initial("001001001"b),	/* opnd(1) <- opnd(2) >= opnd(3)	*/
 17    38 
 17    39 	jump		initial("001010001"b),	/* go to opnd(1) unconditionally	*/
 17    40 	jump_true		initial("001010010"b),	/* go to opnd(1) if opnd(2) is not 0	*/
 17    41 	jump_false	initial("001010011"b),	/* go to opnd(1) if opnd(2) is all 0	*/
 17    42 	jump_if_lt	initial("001010100"b),	/* go to opnd(1) if opnd(2) < opnd(3)	*/
 17    43 	jump_if_gt	initial("001010101"b),	/* go to opnd(1) if opnd(2) > opnd(3)	*/
 17    44 	jump_if_eq	initial("001010110"b),	/* go to opnd(1) if opnd(2) = opnd(3)	*/
 17    45 	jump_if_ne	initial("001010111"b),	/* go to opnd(1) if opnd(2) ^= opnd(3)	*/
 17    46 	jump_if_le	initial("001011000"b),	/* go to opnd(1) if opnd(2) <= opnd(3)	*/
 17    47 	jump_if_ge	initial("001011001"b),	/* go to opnd(1) if opnd(2) >= opnd(3)	*/
 17    48 
 17    49 	std_arg_list	initial("001100001"b),	/* opnd(1) <- arglist(opnd(2) desclist(opnd(3)))	*/
 17    50 	return_words	initial("001100010"b),	/* return aggregate opnd(1), opnd(2) is length in words */
 17    51 	std_call		initial("001100011"b),	/* opnd(1) <- call opnd(2) with opnd(3)		*/
 17    52 	return_bits	initial("001100100"b),	/* return aggregate opnd(1), opnd(2) is length in bits */
 17    53 	std_entry		initial("001100101"b),	/* entry(opnd(1)... opnd(n))			*/
 17    54 	return_string	initial("001100110"b),	/* return string opnd(1) */
 17    55 	ex_prologue	initial("001100111"b),	/* execute the prologue -no operands-		*/
 17    56 	allot_auto	initial("001101000"b),	/* opnd(1) <- addrel(stack,opnd(2))		*/
 17    57 	param_ptr		initial("001101001"b),	/* opnd(1) <- ptr to opnd(2) in  block opnd(3)	*/
 17    58 	param_desc_ptr	initial("001101010"b),	/* opnd(1) <- ptr to opnd(2) in block opnd(3)	*/
 17    59 	std_return	initial("001101011"b),	/* return -no arguments-			*/
 17    60 	allot_ctl		initial("001101100"b),	/* allocate opnd(1) , length in words is opnd(2) 	*/
 17    61 	free_ctl		initial("001101101"b),	/* free opnd(1)				*/
 17    62 	stop		initial("001101110"b),	/* stop - terminate run unit			*/
 17    63 
 17    64 	mod_bit		initial("001110000"b),	/* opnd(1) <- mod(opnd(3),36),
 17    65*						   opnd(2) <- opnd(3) / 36		*/
 17    66 	mod_byte		initial("001110001"b),	/* opnd(1) <- mod(opnd(3),4),
 17    67*						   opnd(2) <- opnd(3) / 4		*/
 17    68 	mod_half		initial("001110010"b),	/* opnd(1) <- mod(opnd(3),2),
 17    69*						   opnd(2) <- opnd(3) / 2		*/
 17    70 	mod_word		initial("001110011"b),	/* TO BE DEFINED BY BLW			*/
 17    71 
 17    72 	bit_to_char	initial("010000000"b),	/* opnd(1) <- (opnd(2)+8)/9		*/
 17    73 	bit_to_word	initial("010000001"b),	/* opnd(1) <- (opnd(2)+35)/36		*/
 17    74 	char_to_word	initial("010000010"b),	/* opnd(1) <- (opnd(2)+3)/4		*/
 17    75 	half_to_word	initial("010000011"b),	/* opnd(1) <- (opnd(2)+1)/2		*/
 17    76 	word_to_mod2	initial("010000100"b),	/* opnd(1) <- (opnd(2)+1)/2*2		*/
 17    77 	word_to_mod4	initial("010000101"b),	/* opnd(1) <- (opnd(2)+3)/4*4		*/
 17    78 	word_to_mod8	initial("010000110"b),	/* opnd(1) <- (opnd(2)+7)/8*8		*/
 17    79 	rel_fun		initial("010000111"b),	/* opnd(1) <- rel(opnd(2))		*/
 17    80 	baseno_fun	initial("010001000"b),	/* opnd(1) <- baseno(opnd(2))		*/
 17    81 	desc_size		initial("010001001"b),	/* opnd(1) <- substr(opnd(2),13,24)	*/
 17    82 	bit_pointer	initial("010001010"b),	/* opnd(1) <- bit offset of opnd(2)	*/
 17    83 	index_before_fun	initial("010001011"b),	/* opnd(1) <- length of before(opnd(2),opnd(3)) */
 17    84 	index_after_fun	initial("010001100"b),	/* opnd(1) <- offset of after(opnd(2),opnd(3)) in opnd(2) */
 17    85 	verify_ltrim_fun	initial("010001101"b),	/* opnd(1) <- offset of ltrim(opnd(2),opnd(3)) in opnd(2) */
 17    86 	verify_rtrim_fun	initial("010001110"b),	/* opnd(1) <- length(opnd(2))-length(rtrim(opnd(2),opnd(3))) */
 17    87 	digit_to_bit	initial("010001111"b),	/* opnd(1) <- 9*opnd(2)/2		*/
 17    88 
 17    89 	ceil_fun		initial("010010000"b),	/* opnd(1) <- ceil(opnd(2))		*/
 17    90 	floor_fun		initial("010010001"b),	/* opnd(1) <- floor(opnd(2))		*/
 17    91 	round_fun		initial("010010010"b),	/* opnd(1) <- round(opnd(2))		*/
 17    92 	sign_fun		initial("010010011"b),	/* opnd(1) <- sign(opnd(2))		*/
 17    93 	abs_fun		initial("010010100"b),	/* opnd(1) <- abs(opnd(2))		*/
 17    94 	trunc_fun		initial("010010101"b),	/* opnd(1) <- trunc(opnd(2))		*/
 17    95 	byte_fun		initial("010010110"b),	/* opnd(1) <- byte(opnd(2))		*/
 17    96 	rank_fun		initial("010010111"b),	/* opnd(1) <- rank(opnd(2))		*/
 17    97 	index_rev_fun	initial("010011000"b),	/* opnd(1) <- index(reverse(opnd(2)),reverse(opnd(3))) */
 17    98 	search_rev_fun	initial("010011001"b),	/* opnd(1) <- search(reverse(opnd(2)),opnd(3)) */
 17    99 	verify_rev_fun	initial("010011010"b),	/* opnd(1) <- verify(reverse(opnd(2)),opnd(3)) */
 17   100 	wordno_fun	initial("010011011"b),        /* opnd(1) <- wordno (opnd(2)) */
 17   101 	segno_fun		initial("010011100"b),        /* opnd(1) <- segno (opnd(2)) */
 17   102 	bitno_fun           initial("010011101"b),        /* opnd(1) <- bitno (opnd(2)) */
 17   103 	charno_fun	initial("010011110"b),        /* opnd(1) <- charno (opnd(2)) */
 17   104 
 17   105 	index_fun		initial("010100000"b),	/* opnd(1) <- index(opnd(2),opnd(3))	*/
 17   106 	off_fun		initial("010100001"b),	/* opnd(1) <- offset(opnd(2),opnd(3))	*/
 17   107 	complex_fun	initial("010100010"b),	/* opnd(1) <- complex(opnd(2),opnd(3))	*/
 17   108 	conjg_fun		initial("010100011"b),	/* opnd(1) <- conjg(opnd(2),opnd(3))	*/
 17   109 	mod_fun		initial("010100100"b),	/* opnd(1) <- mod(opnd(2),opnd(3))	*/
 17   110 	repeat_fun	initial("010100101"b),	/* opnd(1) <- repeat(opnd(2),opnd(3))	*/
 17   111 	verify_fun	initial("010100110"b),	/* opnd(1) <- verify(opnd(2),opnd(3))	*/
 17   112 	translate_fun	initial("010100111"b),	/* opnd(1) <- translate(opnd(2),opnd(3))*/
 17   113 	real_fun   	initial("010101001"b),	/* opnd(1) <- real(opnd(2))		*/
 17   114 	imag_fun   	initial("010101010"b),	/* opnd(1) <- imag(opnd(2))		*/
 17   115 	length_fun	initial("010101011"b),	/* opnd(1) <- length(opnd(2))	*/
 17   116 	pl1_mod_fun	initial("010101100"b),	/* opnd(1) <- mod(opnd(2)) */
 17   117 	search_fun	initial("010101101"b),	/* opnd(1) <- search(opnd(2),opnd(3)) */
 17   118 	allocation_fun	initial("010101110"b),	/* opnd(1) <- allocation(opnd(2)) */
 17   119 	reverse_fun	initial("010101111"b),	/* opnd(1) <- reverse(opnd(2)) */
 17   120 
 17   121 	addr_fun		initial("010110000"b),	/* opnd(1) <- addr(opnd(2))		*/
 17   122 	addr_fun_bits	initial("010110001"b),	/* opnd(1) <- addr(opnd(2))		*/
 17   123 	ptr_fun		initial("010110010"b),	/* opnd(1) <- ptr(opnd(2),opnd(3))	*/
 17   124 	baseptr_fun	initial("010110011"b),	/* opnd(1) <- baseptr(opnd(2))	*/
 17   125 	addrel_fun	initial("010110100"b),	/* opnd(1) <- addrel(opnd(2),opnd(3))	*/
 17   126 	codeptr_fun	initial("010110101"b),	/* opnd(1) <- codeptr(opnd(2))	*/
 17   127 	environmentptr_fun	initial("010110110"b),	/* opnd(1) <- environmentptr(opnd(2))	*/
 17   128 	stackbaseptr_fun	initial("010110111"b),	/* opnd(1) is ptr to base of current stack	*/
 17   129 	stackframeptr_fun	initial("010111000"b),	/* opnd(1) is ptr to current block's stack frame	*/
 17   130 	setcharno_fun	initial("010111001"b),	/* opnd(1) <- opnd(2) with charno opnd(3) */
 17   131 	addcharno_fun	initial("010111010"b),	/* opnd(1) <- opnd(2) with charno = charno + opnd(3) */
 17   132 	setbitno_fun	initial("010111011"b),	/* setcharno for bitsno */
 17   133 	addbitno_fun	initial("010111100"b),	/* addcharno for bitno */
 17   134 
 17   135 	min_fun		initial("011000000"b),	/* opnd(1) <- min(opnd(1),opnd(2),...)	*/
 17   136 	max_fun		initial("011000001"b),	/* opnd(1) <- max(opnd(1),opnd(2),...)	*/
 17   137 
 17   138 	stack_ptr		initial("011010001"b),	/* opnd(1) <- stack frame ptr		*/
 17   139 	empty_area	initial("011010010"b),	/* empty opnd(1), length in words is opnd(2) */
 17   140 	enable_on		initial("011010100"b),	/* opnd(1) is the cond name
 17   141*						   opnd(2) is the file name
 17   142*						   opnd(3) is the block	*/
 17   143 	revert_on		initial("011010101"b),	/* opnd(1) is the cond name,
 17   144*						   opnd(2) is the file name	*/
 17   145 	signal_on		initial("011010110"b),	/* opnd(1) is the cond name
 17   146*						   opnd(2) is the file name */
 17   147 
 17   148 	lock_fun		initial("011010111"b),	/* opnd(1) <- stac(opnd(2),opnd(3))	*/
 17   149 	stacq_fun		initial("011011000"b),	/* opnd(1) is result, opnd(2) is ptr to lock word,
 17   150*						   opnd(3) is old value, (4) is new value. */
 17   151 	clock_fun		initial("011011001"b),	/* opnd(1) is the clock time		*/
 17   152 	vclock_fun	initial("011011010"b),	/* opnd(1) is the virtual clock time	*/
 17   153 
 17   154 	bound_ck		initial("011100000"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 17   155 	range_ck		initial("011100001"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 17   156 	loop		initial("011100010"b),	/* do opnd(1) for opnd(2) from opnd(3) to opnd(4) by 1,
 17   157*						   opnd(5) is the list */
 17   158 	join		initial("011100011"b),	/* do opnd(1), opnd(2) ... opnd(n)	*/
 17   159 	allot_based	initial("011100100"b),	/* allocate opnd(2) words in opnd(3), set opnd(1) */
 17   160 	free_based	initial("011100101"b),	/* free opnd(1) in opnd(3), length is opnd(2) words */
 17   161 
 17   162 	r_parn		initial("011110001"b),	/* format op code			*/
 17   163 	l_parn		initial("011110010"b),
 17   164 	r_format		initial("011110011"b),
 17   165 	c_format		initial("011110100"b),
 17   166 	f_format		initial("011110101"b),
 17   167 	e_format		initial("011110110"b),
 17   168 	b_format		initial("011110111"b),
 17   169 	a_format		initial("011111000"b),
 17   170 	x_format		initial("011111001"b),
 17   171 	skip_format	initial("011111010"b),
 17   172 	column_format	initial("011111011"b),
 17   173 	page_format	initial("011111100"b),
 17   174 	line_format	initial("011111101"b),
 17   175 	picture_format	initial("011111110"b),
 17   176 	bn_format		initial("011111111"b),	/* bit format, length(opnd(2)), radix factor(opnd(3)) */
 17   177 
 17   178 	get_list_trans	initial("100000000"b),	/* getlist(opnd(2) with desc(opnd(1)))	*/
 17   179 	get_edit_trans	initial("100000001"b),	/* getedit(opnd(2) with desc(opnd(1)))	*/
 17   180 	get_data_trans	initial("100000010"b),	/* getdata(opnd(1) to opnd(n))	*/
 17   181 	put_list_trans	initial("100000011"b),	/* putlist(opnd(2) with desc(opnd(1)))	*/
 17   182 	put_edit_trans	initial("100000100"b),	/* putedit(opnd(2) with desc(opnd(1)))	*/
 17   183 	put_data_trans	initial("100000101"b),	/* putdata(opnd(2)) with subscript-list opnd(1) */
 17   184 	terminate_trans	initial("100000110"b),	/* terminate stream transmission	*/
 17   185 	stream_prep	initial("100000111"b),	/* initiate stream transmission	*/
 17   186 	record_io		initial("100001000"b),	/* perform record io operation	*/
 17   187 	fortran_read	initial("100001001"b),	/* A complete read statement		*/
 17   188 	fortran_write	initial("100001010"b),	/* A complete write statement		*/
 17   189 	ftn_file_manip	initial("100001011"b),	/* endfile,backspace,rewind,etc.	*/
 17   190 	ftn_trans_loop	initial("100001100"b),	/* An implied do in i/o list		*/
 17   191 	put_control	initial("100001101"b),	/* put control opnd(1) opnd(2) times	*/
 17   192 	put_field		initial("100001110"b),	/* putlist(opnd(2)) of length(opnd(1))	*/
 17   193 	put_field_chk	initial("100001111"b),	/* putlist(op(2)) of len(op(1)) check char index(op(3)) */
 17   194 
 17   195 /* These operators are produced by the parse but are not used as input to the code generator.	*/
 17   196 /* They are processed by the semantic translator.						*/
 17   197 
 17   198 	return_value	initial("100010010"b),	/* return(opnd(1))			*/
 17   199 	allot_var		initial("100010011"b),	/* allot opnd(1) in opnd(2)		*/
 17   200 	free_var		initial("100010100"b),	/* free opnd(1) out of opnd(2)	*/
 17   201 	get_file		initial("100010101"b),	/* opnd(1) is filename,opnd(2) is copy	*/
 17   202 						/* opnd(3) is skip, opnd(4) is list	*/
 17   203 	get_string	initial("100010110"b),	/* opnd(1) is string,opnd(2) is list	*/
 17   204 	put_file		initial("100010111"b),	/* opnd(1) is filename,opnd(2) is page	*/
 17   205 						/* opnd(3) is skip,opnd(4) is line	*/
 17   206 	put_string	initial("100011000"b),	/* opnd(1) is string,opnd(2) is list	*/
 17   207 	open_file		initial("100011001"b),
 17   208 	close_file	initial("100011010"b),
 17   209 	read_file		initial("100011011"b),
 17   210 	write_file	initial("100011100"b),
 17   211 	locate_file	initial("100011101"b),
 17   212 	do_fun		initial("100011110"b),	/* opnd(1) is join of a list		*/
 17   213 						/* opnd(2) is control variable ref	*/
 17   214 						/* opnd(3) is specification operator	*/
 17   215 	do_spec		initial("100011111"b),	/* opnd(1) to opnd(2) by opnd(3) 	*/
 17   216 						/* repeat opnd(4) while opnd(5)	*/
 17   217 						/* opnd(6) is next specification	*/
 17   218 
 17   219 	rewrite_file	initial("100100000"b),
 17   220 	delete_file	initial("100100001"b),
 17   221 	unlock_file	initial("100100010"b),
 17   222 	lock_file		initial("100100011"b),
 17   223 	refer		initial("100100101"b),	/* opnd(1) refer(opnd(2))		*/
 17   224 	prefix_plus	initial("100100110"b),	/* opnd(1) <- +opnd(2)		*/
 17   225 	nop		initial("100100111"b),	/* no-op */
 17   226 	assign_by_name	initial("100101000"b),	/* opnd(1) <- opnd(2),by name		*/
 17   227 
 17   228 /* These operators are produced by the semantic translator in processing the math
 17   229*   builtin functions and are used as input to the code generator			*/
 17   230 
 17   231 	sqrt_fun		initial("100110000"b),	/* opnd(1) <- sqrt(opnd(2))	*/
 17   232 	sin_fun		initial("100110001"b),	/* opnd(1) <- sin(opnd(2))	*/
 17   233 	sind_fun		initial("100110010"b),	/* opnd(1) <- sind(opnd(2))	*/
 17   234 	cos_fun		initial("100110011"b),	/* opnd(1) <- cos(opnd(2))	*/
 17   235 	cosd_fun		initial("100110100"b),	/* opnd(1) <- cosd(opnd(2))	*/
 17   236 	tan_fun		initial("100110101"b),	/* opnd(1) <- tan(opnd(2))	*/
 17   237 	tand_fun		initial("100110110"b),	/* opnd(1) <- tand(opnd(2))	*/
 17   238 	asin_fun		initial("100110111"b),	/* opnd(1) <- asin(opnd(2))	*/
 17   239 	asind_fun		initial("100111000"b),	/* opnd(1) <- asind(opnd(2))	*/
 17   240 	acos_fun		initial("100111001"b),	/* opnd(1) <- acos(opnd(2))	*/
 17   241 	acosd_fun		initial("100111010"b),	/* opnd(1) <- acosd(opnd(2))	*/
 17   242 	atan_fun		initial("100111011"b),	/* opnd(1) <- atan(opnd(2)[,opnd(3)])	*/
 17   243 	atand_fun		initial("100111100"b),	/* opnd(1) <- atand(opnd(2)[,opnd(3)])	*/
 17   244 	log2_fun		initial("100111101"b),	/* opnd(1) <- log2(opnd(2))	*/
 17   245 	log_fun		initial("100111110"b),	/* opnd(1) <- log(opnd(2))	*/
 17   246 	log10_fun		initial("100111111"b),	/* opnd(1) <- log10(opnd(2))	*/
 17   247 
 17   248 	exp_fun		initial("101000000"b))	/* opnd(1) <- exp(opnd(2))	*/
 17   249 
 17   250 			bit(9) aligned internal static options(constant);
 17   251 
 17   252 /* END INCLUDE FILE ... op_codes.incl.pl1 */
     1076 
 18     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
 18     2 
 18     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
 18     4 
 18     5 /* format: style3 */
 18     6 dcl	1 operator	based aligned,
 18     7 	  2 node_type	bit (9) unaligned,
 18     8 	  2 op_code	bit (9) unaligned,
 18     9 	  2 shared	bit (1) unaligned,
 18    10 	  2 processed	bit (1) unaligned,
 18    11 	  2 optimized	bit (1) unaligned,
 18    12 	  2 number	fixed (14) unaligned,
 18    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
 18    14 
 18    15 dcl	max_number_of_operands
 18    16 			fixed bin (15) int static options (constant) initial (32767);
 18    17 
 18    18 /* END INCLUDE FILE ... operator.incl.pl1 */
     1077 
 19     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
 19     2 
 19     3 dcl	1 reference		based aligned,
 19     4 	2 node_type		bit(9) unaligned,
 19     5 	2 array_ref		bit(1) unaligned,
 19     6 	2 varying_ref		bit(1) unaligned,
 19     7 	2 shared			bit(1) unaligned,
 19     8 	2 put_data_sw		bit(1) unaligned,
 19     9 	2 processed		bit(1) unaligned,
 19    10 	2 units			fixed(3) unaligned,
 19    11 	2 ref_count		fixed(17) unaligned,
 19    12 	2 c_offset		fixed(24),
 19    13 	2 c_length		fixed(24),
 19    14 	2 symbol			ptr unaligned,
 19    15 	2 qualifier		ptr unaligned,
 19    16 	2 offset			ptr unaligned,
 19    17 	2 length			ptr unaligned,
 19    18 	2 subscript_list		ptr unaligned,
 19    19 						/* these fields are used by the 645 code generator */
 19    20 	2 address			structure unaligned,
 19    21 	  3 base			bit(3),
 19    22 	  3 offset		bit(15),
 19    23 	  3 op			bit(9),
 19    24 	  3 no_address		bit(1),
 19    25 	  3 inhibit		bit(1),
 19    26 	  3 ext_base		bit(1),
 19    27 	  3 tag			bit(6),
 19    28 	2 info			structure unaligned,
 19    29 	  3 address_in		structure,
 19    30 	    4 b			dimension(0:7) bit(1),
 19    31 	    4 storage		bit(1),
 19    32 	  3 value_in		structure,
 19    33 	    4 a			bit(1),
 19    34 	    4 q			bit(1),
 19    35 	    4 aq			bit(1),
 19    36 	    4 string_aq		bit(1),
 19    37 	    4 complex_aq		bit(1),
 19    38 	    4 decimal_aq		bit(1),
 19    39 	    4 b			dimension(0:7) bit(1),
 19    40 	    4 storage		bit(1),
 19    41 	    4 indicators		bit(1),
 19    42 	    4 x			dimension(0:7) bit(1),
 19    43 	  3 other			structure,
 19    44 	    4 big_offset		bit(1),
 19    45 	    4 big_length		bit(1),
 19    46 	    4 modword_in_offset	bit(1),
 19    47 	2 data_type		fixed(5) unaligned,
 19    48 	2 bits			structure unaligned,
 19    49 	  3 padded_ref		bit(1),
 19    50 	  3 aligned_ref		bit(1),
 19    51 	  3 long_ref		bit(1),
 19    52 	  3 forward_ref		bit(1),
 19    53 	  3 ic_ref		bit(1),
 19    54 	  3 temp_ref		bit(1),
 19    55 	  3 defined_ref		bit(1),
 19    56 	  3 evaluated		bit(1),
 19    57 	  3 allocate		bit(1),
 19    58 	  3 allocated		bit(1),
 19    59 	  3 aliasable		bit(1),
 19    60 	  3 even			bit(1),
 19    61 	  3 perm_address		bit(1),
 19    62 	  3 aggregate		bit(1),
 19    63 	  3 hit_zero		bit(1),
 19    64 	  3 dont_save		bit(1),
 19    65 	  3 fo_in_qual		bit(1),
 19    66 	  3 hard_to_load		bit(1),
 19    67 	2 relocation		bit(12) unaligned,
 19    68 	2 more_bits		structure unaligned,
 19    69 	  3 substr		bit(1),
 19    70 	  3 padded_for_store_ref	bit(1),
 19    71 	  3 aligned_for_store_ref	bit(1),
 19    72 	  3 mbz			bit(15),
 19    73 	2 store_ins		bit(18) unaligned;
 19    74 
 19    75 /* END INCLUDE FILE ... reference.incl.pl1 */
     1078 
 20     1 /* BEGIN INCLUDE FILE ... semantic_bits.incl.pl1 */
 20     2 
 20     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
 20     4 
 20     5 dcl	context aligned bit(36),
 20     6 	this_context aligned bit(36);
 20     7 
 20     8 dcl	1 def_context		aligned based(addr(context)),
 20     9 	2 aggregate		unaligned bit(1),
 20    10 	2 arg_list		unaligned bit(1),
 20    11 	2 left_side		unaligned bit(1),
 20    12 	2 return			unaligned bit(1),
 20    13 	2 evaluate_offset		unaligned bit(1),
 20    14 	2 top			unaligned bit(1),
 20    15 	2 RHS_aggregate		unaligned bit(1),
 20    16 	2 return_from_empty		unaligned bit(1),
 20    17 	2 ignore_based		unaligned bit(1),
 20    18 	2 ext_param		unaligned bit(1),
 20    19 	2 cross_section		unaligned bit(1),
 20    20 	2 string_unspec		unaligned bit(1),
 20    21 	2 f_offset_to_be_added	unaligned bit(1),
 20    22 	2 suppress_cross_ref	unaligned bit(1),
 20    23 	2 by_name_assignment	unaligned bit(1),
 20    24 	2 by_name_lookup		unaligned bit(1),
 20    25 	2 pad			unaligned bit(20);
 20    26 
 20    27 dcl	1 def_this_context		aligned like def_context based(addr(this_context));
 20    28 
 20    29 /* END INCLUDE FILE ... semantic_bits.incl.pl1 */
     1079 
 21     1 /* ***********************************************************
 21     2*   *                                                         *
 21     3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
 21     4*   *                                                         *
 21     5*   *********************************************************** */
 21     6 /* BEGIN INCLUDE FILE ... statement.incl.pl1 */
 21     7 /* Internal interface of the PL/I compiler */
 21     8 
 21     9 dcl	1 statement		based aligned,
 21    10 	2 node_type		bit(9) unaligned,
 21    11 	2 source_id		structure unaligned,
 21    12 	  3 file_number		bit(8),
 21    13 	  3 line_number		bit(14),
 21    14 	  3 statement_number	bit(5),
 21    15 	2 next			ptr unaligned,
 21    16 	2 back			ptr unaligned,
 21    17 	2 root			ptr unaligned,
 21    18 	2 labels			ptr unaligned,
 21    19 	2 reference_list		ptr unaligned,
 21    20 	2 state_list		ptr unaligned,
 21    21 	2 reference_count		fixed(17) unaligned,
 21    22 	2 ref_count_copy		fixed(17) unaligned,
 21    23 	2 object			structure unaligned,
 21    24 	  3 start			fixed(17),
 21    25 	  3 finish		fixed(17),
 21    26 	2 source			structure unaligned,
 21    27 	  3 segment		fixed(11),
 21    28 	  3 start			fixed(23),
 21    29 	  3 length		fixed(11),
 21    30 	2 prefix			bit(12) unaligned,
 21    31 	2 optimized		bit(1) unaligned,
 21    32 	2 free_temps		bit(1) unaligned,
 21    33 	2 LHS_in_RHS		bit(1) unaligned,
 21    34 	2 statement_type		bit(9) unaligned,
 21    35 	2 bits			structure unaligned,
 21    36 	  3 processed		bit(1) unaligned,
 21    37 	  3 put_in_profile		bit(1) unaligned,
 21    38 	  3 generated		bit(1) unaligned,
 21    39 	  3 snap			bit(1) unaligned,
 21    40 	  3 system		bit(1) unaligned,
 21    41 	  3 irreducible		bit(1) unaligned,
 21    42 	  3 checked		bit(1) unaligned,
 21    43 	  3 save_temps		bit(1) unaligned,
 21    44 	  3 suppress_warnings	bit(1) unaligned,
 21    45 	  3 force_nonquick		bit(1) unaligned,
 21    46 	  3 expanded_by_name	bit(1) unaligned,
 21    47 	  3 begins_loop		bit(1) unaligned,
 21    48 	  3 pad			bit(24) unaligned;
 21    49 
 21    50 /* END INCLUDE FILE ... statement.incl.pl1 */
     1080 
 22     1 	/* statement types */
 22     2 
 22     3 dcl (	unknown_statement		initial("000000000"b),
 22     4 	allocate_statement		initial("000000001"b),
 22     5 	assignment_statement	initial("000000010"b),
 22     6 	begin_statement		initial("000000011"b),
 22     7 	call_statement		initial("000000100"b),
 22     8 	close_statement		initial("000000101"b),
 22     9 	declare_statement		initial("000000110"b),
 22    10 	lock_statement		initial("000000111"b),
 22    11 	delete_statement		initial("000001000"b),
 22    12 	display_statement		initial("000001001"b),
 22    13 	do_statement		initial("000001010"b),
 22    14 	else_clause		initial("000001011"b),
 22    15 	end_statement		initial("000001100"b),
 22    16 	entry_statement		initial("000001101"b),
 22    17 	exit_statement		initial("000001110"b),
 22    18 	format_statement		initial("000001111"b),
 22    19 	free_statement		initial("000010000"b),
 22    20 	get_statement		initial("000010001"b),
 22    21 	goto_statement		initial("000010010"b),
 22    22 	if_statement		initial("000010011"b),
 22    23 	locate_statement		initial("000010100"b),
 22    24 	null_statement		initial("000010101"b),
 22    25 	on_statement		initial("000010110"b),
 22    26 	open_statement		initial("000010111"b),
 22    27 	procedure_statement 	initial("000011000"b),
 22    28 	put_statement		initial("000011001"b),
 22    29 	read_statement		initial("000011010"b),
 22    30 	return_statement		initial("000011011"b),
 22    31 	revert_statement		initial("000011100"b),
 22    32 	rewrite_statement		initial("000011101"b),
 22    33 	signal_statement		initial("000011110"b),
 22    34 	stop_statement		initial("000011111"b),
 22    35 	system_on_unit		initial("000100000"b),
 22    36 	unlock_statement		initial("000100001"b),
 22    37 	wait_statement		initial("000100010"b),
 22    38 	write_statement		initial("000100011"b),
 22    39 	default_statement		initial("000100100"b),
 22    40 	continue_statement		initial("000100101"b)) bit(9) internal static aligned options(constant);
     1081 
 23     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
 23     2 
 23     3 dcl	1 symbol			based aligned,
 23     4 	2 node_type		bit(9) unal,
 23     5 	2 source_id		structure unal,
 23     6 	  3 file_number		bit(8),
 23     7 	  3 line_number		bit(14),
 23     8 	  3 statement_number	bit(5),
 23     9 	2 location		fixed(18) unal unsigned,
 23    10 	2 allocated		bit(1) unal,
 23    11 	2 dcl_type		bit(3) unal,
 23    12 	2 reserved		bit(6) unal,
 23    13 	2 pix			unal,
 23    14 	  3 pic_fixed		bit(1) unal,
 23    15 	  3 pic_float		bit(1) unal,
 23    16 	  3 pic_char		bit(1) unal,
 23    17 	  3 pic_scale		fixed(7) unal,
 23    18 	  3 pic_size		fixed(7) unal,
 23    19 	2 level			fixed(8) unal,
 23    20 	2 boundary		fixed(3) unal,
 23    21 	2 size_units		fixed(3) unal,
 23    22 	2 scale			fixed(7) unal,
 23    23 	2 runtime			bit(18) unal,
 23    24 	2 runtime_offset		bit(18) unal,
 23    25 	2 block_node		ptr unal,
 23    26 	2 token			ptr unal,
 23    27 	2 next			ptr unal,
 23    28 	2 multi_use		ptr unal,
 23    29 	2 cross_references		ptr unal,
 23    30 	2 initial			ptr unal,
 23    31 	2 array			ptr unal,
 23    32 	2 descriptor		ptr unal,
 23    33 	2 equivalence		ptr unal,
 23    34 	2 reference		ptr unal,
 23    35 	2 general			ptr unal,
 23    36 	2 father			ptr unal,
 23    37 	2 brother			ptr unal,
 23    38 	2 son			ptr unal,
 23    39 	2 word_size		ptr unal,
 23    40 	2 bit_size		ptr unal,
 23    41 	2 dcl_size		ptr unal,
 23    42 	2 symtab_size		ptr unal,
 23    43 	2 c_word_size		fixed(24),
 23    44 	2 c_bit_size		fixed(24),
 23    45 	2 c_dcl_size		fixed(24),
 23    46 
 23    47 	2 attributes		structure aligned,
 23    48 	  3 data_type		structure unal,
 23    49 	    4 structure		bit(1) ,
 23    50 	    4 fixed		bit(1),
 23    51 	    4 float		bit(1),
 23    52 	    4 bit			bit(1),
 23    53 	    4 char		bit(1),
 23    54 	    4 ptr			bit(1),
 23    55 	    4 offset		bit(1),
 23    56 	    4 area		bit(1),
 23    57 	    4 label		bit(1),
 23    58 	    4 entry		bit(1),
 23    59 	    4 file		bit(1),
 23    60 	    4 arg_descriptor	bit(1),
 23    61 	    4 storage_block		bit(1),
 23    62 	    4 explicit_packed	bit(1), /* options(packed) */
 23    63 	    4 condition		bit(1),
 23    64 	    4 format		bit(1),
 23    65 	    4 builtin		bit(1),
 23    66 	    4 generic		bit(1),
 23    67 	    4 picture		bit(1),
 23    68 
 23    69 	  3 misc_attributes		structure unal,
 23    70 	    4 dimensioned		bit(1),
 23    71 	    4 initialed		bit(1),
 23    72 	    4 aligned		bit(1),
 23    73 	    4 unaligned		bit(1),
 23    74 	    4 signed		bit(1),
 23    75 	    4 unsigned		bit(1),
 23    76 	    4 precision		bit(1),
 23    77 	    4 varying		bit(1),
 23    78 	    4 local		bit(1),
 23    79 	    4 decimal		bit(1),
 23    80 	    4 binary		bit(1),
 23    81 	    4 real		bit(1),
 23    82 	    4 complex		bit(1),
 23    83 	    4 variable		bit(1),
 23    84 	    4 reducible		bit(1),
 23    85 	    4 irreducible		bit(1),
 23    86 	    4 returns		bit(1),
 23    87 	    4 position		bit(1),
 23    88 	    4 internal		bit(1),
 23    89 	    4 external		bit(1),
 23    90 	    4 like		bit(1),
 23    91 	    4 member		bit(1),
 23    92 	    4 non_varying		bit(1),
 23    93 	    4 options		bit(1),
 23    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
 23    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
 23    96 
 23    97 	  3 storage_class		structure unal,
 23    98 	    4 auto		bit(1),
 23    99 	    4 based		bit(1),
 23   100 	    4 static		bit(1),
 23   101 	    4 controlled		bit(1),
 23   102 	    4 defined		bit(1),
 23   103 	    4 parameter		bit(1),
 23   104 	    4 param_desc		bit(1),
 23   105 	    4 constant		bit(1),
 23   106 	    4 temporary		bit(1),
 23   107 	    4 return_value		bit(1),
 23   108 
 23   109 	  3 file_attributes		structure unal,
 23   110 	    4 print		bit(1),
 23   111 	    4 input		bit(1),
 23   112 	    4 output		bit(1),
 23   113 	    4 update		bit(1),
 23   114 	    4 stream		bit(1),
 23   115 	    4 reserved_1		bit(1),
 23   116 	    4 record		bit(1),
 23   117 	    4 sequential		bit(1),
 23   118 	    4 direct		bit(1),
 23   119 	    4 interactive		bit(1),		/* env(interactive) */
 23   120 	    4 reserved_2		bit(1),
 23   121 	    4 reserved_3		bit(1),
 23   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
 23   123 	    4 keyed		bit(1),
 23   124 	    4 reserved_4		bit(1),
 23   125 	    4 environment		bit(1),
 23   126 
 23   127 	  3 compiler_developed	structure unal,
 23   128 	    4 aliasable		bit(1),
 23   129 	    4 packed		bit(1),
 23   130 	    4 passed_as_arg		bit(1),
 23   131 	    4 allocate		bit(1),
 23   132 	    4 set			bit(1),
 23   133 	    4 exp_extents		bit(1),
 23   134 	    4 refer_extents		bit(1),
 23   135 	    4 star_extents		bit(1),
 23   136 	    4 isub		bit(1),
 23   137 	    4 put_in_symtab		bit(1),
 23   138 	    4 contiguous		bit(1),
 23   139 	    4 put_data		bit(1),
 23   140 	    4 overlayed		bit(1),
 23   141 	    4 error		bit(1),
 23   142 	    4 symtab_processed	bit(1),
 23   143 	    4 overlayed_by_builtin	bit(1),
 23   144 	    4 defaulted		bit(1),
 23   145 	    4 connected		bit(1);
 23   146 
 23   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
     1082 
 24     1 /* BEGIN INCLUDE FILE ... symbol_bits.incl.pl1 */
 24     2 
 24     3 dcl (	aliasable_bit	initial (72),
 24     4 	passed_as_arg_bit	initial (74),
 24     5 	set_bit		initial (76),
 24     6 	overlayed_by_builtin_bit initial (87)) fixed bin (15) internal static options (constant);
 24     7 
 24     8 /* END INCLUDE FILE ... symbol_bits.incl.pl1 */
     1083 
 25     1 /* BEGIN INCLUDE FILE ... system.incl.pl1 */
 25     2 
 25     3 /* Modified: 25 Apr 1979 by PCK to implemnt 4-bit decimal */
 25     4 
 25     5 dcl (	max_p_flt_bin_1			initial(27),
 25     6 	max_p_flt_bin_2			initial(63),
 25     7 	max_p_fix_bin_1			initial(35),
 25     8 	max_p_fix_bin_2			initial(71),
 25     9 
 25    10 	max_p_dec				initial(59),
 25    11 	max_p_bin_or_dec			initial (71),	/* max (max_p_fix_bin_2, max_p_dec) */
 25    12 
 25    13 	min_scale				initial(-128),
 25    14 	max_scale				initial(+127),
 25    15 	max_bit_string			initial(9437184),
 25    16 	max_char_string			initial(1048576),
 25    17 	max_area_size			initial(262144),
 25    18 	min_area_size			initial(28),
 25    19 
 25    20 	max_bit_string_constant		initial (253),	/* max length of bit literals */
 25    21 	max_char_string_constant		initial (254),	/* max length of character literals */
 25    22 	max_identifier_length		initial (256),
 25    23 	max_number_of_dimensions		initial (127),
 25    24 
 25    25 	max_length_precision		initial(24),
 25    26 	max_offset_precision		initial(24),	/* 18 bits for word offset + 6 bits for bit offset */
 25    27 
 25    28 	max_words_per_variable		initial (262144),
 25    29 
 25    30 	bits_per_word			initial(36),
 25    31 	bits_per_double			initial(72),
 25    32 	packed_digits_per_character		initial(2),
 25    33 	characters_per_half			initial(2),
 25    34 	characters_per_word			initial(4),
 25    35 	characters_per_double		initial(8),
 25    36 
 25    37 	bits_per_character			initial(9),
 25    38 	bits_per_half			initial(18),
 25    39 	bits_per_decimal_digit		initial(9),
 25    40 	bits_per_binary_exponent		initial(8),
 25    41 	bits_per_packed_ptr			initial(36),
 25    42 	words_per_packed_pointer		initial(1),
 25    43 
 25    44 	words_per_fix_bin_1			initial(1),
 25    45 	words_per_fix_bin_2			initial(2),
 25    46 	words_per_flt_bin_1			initial(1),
 25    47 	words_per_flt_bin_2			initial(2),
 25    48 	words_per_varying_string_header	initial(1),
 25    49 	words_per_offset			initial(1),
 25    50 	words_per_pointer			initial(2),
 25    51 	words_per_label_var			initial(4),
 25    52 	words_per_entry_var			initial(4),
 25    53 	words_per_file_var			initial(4),
 25    54 	words_per_format			initial(4),
 25    55 	words_per_condition_var		initial(6),
 25    56 
 25    57 	max_index_register_value		initial(262143),
 25    58 	max_signed_index_register_value	initial(131071),
 25    59 
 25    60 	max_signed_xreg_precision		initial(17),
 25    61 	max_uns_xreg_precision		initial(18),
 25    62 
 25    63 	default_area_size			initial(1024),
 25    64 	default_flt_bin_p			initial(27),
 25    65 	default_fix_bin_p			initial(17),
 25    66 	default_flt_dec_p			initial(10),
 25    67           default_fix_dec_p   		initial(7)) fixed bin(31) internal static options(constant);
 25    68 
 25    69 dcl	bits_per_digit			initial(4.5)  fixed bin(31,1) internal static options(constant);
 25    70 
 25    71 dcl (	integer_type		initial("010000000000000000000100000001100000"b),
 25    72 	dec_integer_type		initial("010000000000000000000100000010100000"b),
 25    73 	pointer_type		initial("000001000000000000000100000000000000"b),
 25    74 	real_type			initial("001000000000000000000100000001100000"b),
 25    75 	complex_type		initial("001000000000000000000100000001010000"b),
 25    76 	builtin_type		initial("000000000000000010000000000000000000"b),
 25    77 	storage_block_type		initial("000000000000100000000000000000000000"b),
 25    78 	arg_desc_type		initial("000000000001000000000000000000000000"b),
 25    79 	local_label_var_type	initial("000000001000000000000100000100001000"b),
 25    80 	entry_var_type		initial("000000000100000000000000000000001000"b),
 25    81 	bit_type			initial("000100000000000000000000000000000000"b),
 25    82 	char_type			initial("000010000000000000000000000000000000"b)) bit(36) aligned int static
 25    83 									options(constant);
 25    84 
 25    85 /* END INCLUDE FILE ... system.incl.pl1 */
     1084 
 26     1 /* BEGIN INCLUDE FILE ... token.incl.pl1 */
 26     2 
 26     3 dcl	1 token			based aligned,
 26     4 	2 node_type		bit(9) unaligned,
 26     5 	2 type			bit(9) unaligned,
 26     6 	2 loc			bit(18) unaligned,	/* symtab offset for identifiers, "p" flag for constants */
 26     7 	2 declaration		ptr unaligned,
 26     8 	2 next			ptr unaligned,
 26     9 	2 size			fixed(9),
 26    10 	2 string			char(n refer(token.size));
 26    11 
 26    12 /* END INCLUDE FILE ... token.incl.pl1 */
     1085 
 27     1 /* BEGIN INCLUDE FILE ... token_types.incl.pl1 */
 27     2 
 27     3 dcl (	no_token		initial("000000000"b),	/*	token types		*/
 27     4 	identifier	initial("100000000"b),
 27     5 	isub		initial("010000000"b),
 27     6 	plus		initial("001000001"b),
 27     7 	minus		initial("001000010"b),
 27     8 	asterisk		initial("001000011"b),
 27     9 	slash		initial("001000100"b),
 27    10 	expon		initial("001000101"b),
 27    11 	not		initial("001000110"b),
 27    12 	and		initial("001000111"b),
 27    13 	or		initial("001001000"b),
 27    14 	cat		initial("001001001"b),
 27    15 	eq		initial("001001010"b),
 27    16 	ne		initial("001001011"b),
 27    17 	lt		initial("001001100"b),
 27    18 	gt		initial("001001101"b),
 27    19 	le		initial("001001110"b),
 27    20 	ge		initial("001001111"b),
 27    21 	ngt		initial("001010000"b),
 27    22 	nlt		initial("001010001"b),
 27    23 	assignment	initial("001010010"b),
 27    24 	colon		initial("001010011"b),
 27    25 	semi_colon	initial("001010100"b),
 27    26 	comma		initial("001010101"b),
 27    27 	period		initial("001010110"b),
 27    28 	arrow		initial("001010111"b),
 27    29 	left_parn		initial("001011000"b),
 27    30 	right_parn	initial("001011001"b),
 27    31 	percent		initial("001011100"b),
 27    32 	bit_string	initial("000100001"b),
 27    33 	char_string	initial("000100010"b),
 27    34 	bin_integer	initial("000110001"b),
 27    35 	dec_integer	initial("000110011"b),
 27    36 	fixed_bin		initial("000110000"b),
 27    37 	fixed_dec		initial("000110010"b),
 27    38 	float_bin		initial("000110100"b),
 27    39 	float_dec		initial("000110110"b),
 27    40 	i_bin_integer	initial("000111001"b),
 27    41 	i_dec_integer	initial("000111011"b),
 27    42 	i_fixed_bin	initial("000111000"b),
 27    43 	i_fixed_dec	initial("000111010"b),
 27    44 	i_float_bin	initial("000111100"b),
 27    45 	i_float_dec	initial("000111110"b)) bit (9) aligned internal static options (constant);
 27    46 
 27    47 dcl (	is_identifier		initial ("100000000"b),	/*	token type masks		*/
 27    48 	is_isub			initial ("010000000"b),
 27    49 	is_delimiter		initial ("001000000"b),
 27    50 	is_constant		initial ("000100000"b),
 27    51 	is_arith_constant		initial ("000010000"b),	/* N.B. not really a mask...s/b "000110000"b */
 27    52 	is_arithmetic_constant	initial ("000110000"b),
 27    53 	is_imaginary_constant	initial ("000111000"b),
 27    54 	is_float_constant		initial ("000110100"b),
 27    55 	is_decimal_constant		initial ("000110010"b),
 27    56 	is_integral_constant 	initial ("000110001"b)
 27    57 	) bit(9) internal static aligned options(constant);
 27    58 
 27    59 /* END INCLUDE FILE ... token_types.incl.pl1 */
     1086 
     1087 
     1088      end expand_assign;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/17/00  1932.2  expand_assign.pl1                 >udd>sm>ds>w>ml>expand_assign.pl1
458          1    09/14/77  1805.7  pl1_descriptor.incl.pl1           >ldd>incl>pl1_descriptor.incl.pl1
1067         2    07/21/80  1646.3  semant.incl.pl1                   >ldd>incl>semant.incl.pl1
2-228        3    08/01/89  1339.9  language_utility.incl.pl1         >ldd>incl>language_utility.incl.pl1
3-307        4    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
3-325        5    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
3-335        6    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
3-374        7    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
3-386        8    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
1068         9    05/06/74  1841.6  array.incl.pl1                    >ldd>incl>array.incl.pl1
1069        10    08/13/81  2143.5  block.incl.pl1                    >ldd>incl>block.incl.pl1
1070        11    10/25/79  1745.8  boundary.incl.pl1                 >ldd>incl>boundary.incl.pl1
1071        12    10/25/79  1745.8  declare_type.incl.pl1             >ldd>incl>declare_type.incl.pl1
1072        13    11/30/78  1327.5  decoded_token_types.incl.pl1      >ldd>incl>decoded_token_types.incl.pl1
1073        14    08/13/81  2311.5  list.incl.pl1                     >ldd>incl>list.incl.pl1
1074        15    11/30/78  1327.5  mask.incl.pl1                     >ldd>incl>mask.incl.pl1
1075        16    07/21/80  1646.3  nodes.incl.pl1                    >ldd>incl>nodes.incl.pl1
1076        17    04/07/83  1735.0  op_codes.incl.pl1                 >ldd>incl>op_codes.incl.pl1
1077        18    07/21/80  1646.3  operator.incl.pl1                 >ldd>incl>operator.incl.pl1
1078        19    07/21/80  1646.3  reference.incl.pl1                >ldd>incl>reference.incl.pl1
1079        20    07/21/80  1646.3  semantic_bits.incl.pl1            >ldd>incl>semantic_bits.incl.pl1
1080        21    04/07/83  1735.0  statement.incl.pl1                >ldd>incl>statement.incl.pl1
1081        22    05/03/76  1420.4  statement_types.incl.pl1          >ldd>incl>statement_types.incl.pl1
1082        23    12/07/83  1801.7  symbol.incl.pl1                   >ldd>incl>symbol.incl.pl1
1083        24    07/21/80  1646.3  symbol_bits.incl.pl1              >ldd>incl>symbol_bits.incl.pl1
1084        25    12/07/83  1801.7  system.incl.pl1                   >ldd>incl>system.incl.pl1
1085        26    09/14/77  1805.7  token.incl.pl1                    >ldd>incl>token.incl.pl1
1086        27    11/30/78  1327.4  token_types.incl.pl1              >ldd>incl>token_types.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
LHS_in_RHS               12(26)        based           bit(1)                   level 2 packed packed unaligned dcl 21-9 set ref 144
                                                                                  145*
RHS_aggregate             0(06)        based           bit(1)                   level 2 packed packed unaligned dcl 20-8 ref 127 222
a                               000106 automatic       pointer                  dcl 614 in procedure "maker" set ref 664* 666 677*
                                                                                  679 707* 779 779 793
a                               000102 automatic       pointer                  dcl 48 in procedure "expand_assign" set ref 67* 70
                                                                                  70 70 70 79 87 91 91 96 176* 178 185 207 210* 214
                                                                                  215 228* 235 238 241 246* 249* 277 279 283*
a                                      parameter       pointer                  dcl 538 in procedure "make_copy" ref 535 549 549 601
a                               000104 automatic       pointer                  dcl 873 in procedure "declare_expression" set ref
                                                                                  880* 881 946* 950 951 954 954 955 955 957 960 961
                                                                                  964 965 970 971* 973 974 974 974 976 979 980 985
a                               000156 automatic       pointer                  dcl 293 in procedure "process_offset" set ref 296*
                                                                                  303 307 307 309 317 321 324 325 326* 326* 328 329
                                                                                  329 330 330 332* 335
a_for_return                    000130 automatic       pointer                  dcl 48 set ref 207* 283* 474 520
abound                          000104 automatic       pointer                  dcl 346 set ref 354* 356 356 358* 362 362 365 365
                                                                                  365* 370*
add                             000012 constant        bit(9)                   initial dcl 17-8 set ref 1024*
addr                                                   builtin function         dcl 62 ref 127 182 182 202 222 222 258 264 804
agg_ref                                parameter       pointer                  dcl 48 set ref 31 176* 210*
aligned                  31(21)        based           bit(1)                   level 4 packed packed unaligned dcl 23-3 set ref
                                                                                  954*
and_bits                               constant        bit(9)                   initial dcl 17-8 ref 1031
anext                           000100 automatic       pointer                  dcl 346 set ref 375* 375* 376* 378
aqual                           000124 automatic       pointer                  dcl 48 set ref 241* 421*
arg_descriptor           31(11)        based           bit(1)                   level 4 packed packed unaligned dcl 23-3 set ref 741
arg_list                  0(01)        based           bit(1)                   level 2 packed packed unaligned dcl 20-8 ref 182 258
array                    12            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 23-3 in procedure "expand_assign"
                                                                                  set ref 88 122 349 351 352 354 441 556 630 632 648
                                                                                  707* 708 710 926* 927 929 929 931 931 938 938 940
                                                                                  940
array                                  based           structure                level 1 dcl 9-1 in procedure "expand_assign"
array_ref                 0(09)        based           bit(1)                   level 2 packed packed unaligned dcl 19-3 set ref 87
                                                                                  96 110 178* 178 235 235 238 469 566 633 935*
arrayp                          000222 automatic       pointer                  dcl 538 set ref 556* 558* 566 566 566 570 572 572
                                                                                  574
assign                          000007 constant        bit(9)                   initial dcl 17-8 set ref 151* 494* 515*
assignment_statement            000003 constant        bit(9)                   initial dcl 22-3 set ref 148* 217* 282* 419* 502*
                                                                                  523*
asterisk                               constant        bit(9)                   initial dcl 27-3 ref 312 659 722 735
asym                                   parameter       pointer                  dcl 346 ref 343 349 352 354 375
attributes               31            based           structure                level 2 dcl 23-3 set ref 664 677
b                               000104 automatic       pointer                  dcl 48 in procedure "expand_assign" set ref 68* 96*
                                                                                  99 99* 99* 99 106 107 108 110 112* 118 118 130 130
                                                                                  130 140 140* 141 155 160* 161 171* 174* 178 178
                                                                                  189 189 189 194* 194 195 198* 203* 225 228 235 242
                                                                                  247* 249*
b                               000106 automatic       pointer                  dcl 873 in procedure "declare_expression" set ref
                                                                                  888* 897 897 902* 911* 912 913 914 915 918 919
b                                      parameter       pointer                  dcl 538 in procedure "make_copy" ref 535 549 551 592
                                                                                  602
b                               000102 automatic       pointer                  dcl 434 in procedure "fill_desc" set ref 441* 441*
                                                                                  442* 444 447* 447* 449* 450
back                      2            based           pointer                  level 2 packed packed unaligned dcl 21-9 ref 148 217
                                                                                  282 419 502 523
based_integer                          based           fixed bin(15,0)          dcl 57 ref 919
bbound                          000106 automatic       pointer                  dcl 346 set ref 351* 359* 362 362 365 365 369* 369
bit                      31(03)        based           bit(1)                   level 4 packed packed unaligned dcl 23-3 set ref 465
                                                                                  948
bit_size                 23            based           pointer                  level 2 packed packed unaligned dcl 23-3 ref 577 580
bit_type                               based           structure                array level 2 packed packed unaligned dcl 1-5 ref
                                                                                  491 491
blk                                    parameter       pointer                  dcl 48 set ref 31 157* 253* 326* 329* 426* 467* 476*
                                                                                  501* 522* 586* 594* 622* 805* 837* 889* 974* 1014*
block_node                4            based           pointer                  level 2 packed packed unaligned dcl 23-3 set ref
                                                                                  652* 652
bnext                           000102 automatic       pointer                  dcl 346 set ref 373* 376* 377* 377
bool_fun                               constant        bit(9)                   initial dcl 17-8 ref 1031
bound                                  based           structure                level 1 dcl 9-21
bound_ck                        000004 constant        bit(9)                   initial dcl 17-8 set ref 420*
bounds                   12            based           pointer                  level 2 packed packed unaligned dcl 9-1 set ref 351
                                                                                  354 441 708 715 779 779* 927*
bqual                           000126 automatic       pointer                  dcl 48 set ref 242* 422*
brother                  20            based           pointer                  level 2 packed packed unaligned dcl 23-3 set ref 377
                                                                                  378 450 815* 818 819 897*
bsym                                   parameter       pointer                  dcl 346 ref 343 351 373
by_compiler                     000051 constant        bit(3)                   initial dcl 12-5 set ref 152* 622* 805* 889*
by_name_assignment        0(14)        based           bit(1)                   level 2 packed packed unaligned dcl 20-8 ref 222 804
c_bit_size               27            based           fixed bin(24,0)          level 2 dcl 23-3 ref 577
c_dcl_size               30            based           fixed bin(24,0)          level 2 dcl 23-3 set ref 470 657* 657 666* 666 669*
                                                                                  669 679* 679 682* 682 828* 950* 965* 1002
c_element_size            2            based           fixed bin(24,0)          level 2 dcl 9-1 ref 572
c_element_size_bits       3            based           fixed bin(24,0)          level 2 dcl 9-1 ref 566
c_length                  2            based           fixed bin(24,0)          level 2 dcl 19-3 ref 485
c_lower                   1            based           fixed bin(24,0)          level 2 dcl 9-21 set ref 507 729* 729 762* 856* 856
                                                                                  861* 914*
c_offset                  1            based           fixed bin(24,0)          level 2 dcl 19-3 set ref 498* 518*
c_upper                   2            based           fixed bin(24,0)          level 2 dcl 9-21 set ref 509 730* 730 773* 857* 857
                                                                                  861* 919*
c_word_size              26            based           fixed bin(24,0)          level 2 dcl 23-3 set ref 582 844* 980*
cat_string                             constant        bit(9)                   initial dcl 17-8 ref 1023
char                     31(04)        based           bit(1)                   level 4 packed packed unaligned dcl 23-3 set ref 465
                                                                                  948
compare_declaration             000014 constant        entry                    external dcl 2-31 ref 228
compiler_developed       32(35)        based           structure                level 3 packed packed unaligned dcl 23-3
constant                        000137 automatic       fixed bin(17,0)          dcl 52 in procedure "expand_assign" set ref 596* 597
                                                                                  758* 762 769* 773 824* 828 840* 844 961* 965 976*
                                                                                  980
constant                 32(16)        based           bit(1)                   level 4 in structure "symbol" packed packed
                                                                                  unaligned dcl 23-3 in procedure "expand_assign"
                                                                                  ref 84 916
context                                parameter       bit(36)                  dcl 20-5 set ref 31 127 157* 182 182 202 222 222
                                                                                  253* 258 264 467* 501* 522* 804
convert                         000034 constant        entry                    external dcl 3-60 ref 99
convert$from_builtin            000040 constant        entry                    external dcl 3-72 ref 664 677
convert$to_integer              000036 constant        entry                    external dcl 3-66 ref 330
copy_expression                 000042 constant        entry                    external dcl 3-94 ref 176 210 325 362 362 362 362
                                                                                  365 365 365 365 406 407 425 466 473 497 516 519
                                                                                  586 586 591 698 749 752 837 837 974 974 1010 1042
copy_string                            constant        bit(9)                   initial dcl 17-8 ref 561
copy_words                             constant        bit(9)                   initial dcl 17-8 ref 563
create_array                    000044 constant        entry                    external dcl 3-108 ref 707 926
create_bound                    000046 constant        entry                    external dcl 3-118 ref 728 911
create_operator                 000050 constant        entry                    external dcl 3-152 ref 151 405 420 480 489 494 515
                                                                                  600 1024 1032 1040
create_statement                000052 constant        entry                    external dcl 3-163 ref 148 217 282 419 502 523
create_symbol                   000054 constant        entry                    external dcl 3-184 ref 152 622 805 889
cross_section                   000142 automatic       bit(1)                   initial dcl 52 set ref 52* 91* 118* 225
d_template                      000124 automatic       pointer                  dcl 455 set ref 463* 491 491 495 495
data_type                31            based           structure                level 3 packed packed unaligned dcl 23-3 set ref 96
                                                                                  167 624* 624
dcl_size                 24            based           pointer                  level 2 packed packed unaligned dcl 23-3 set ref 470
                                                                                  473* 659 659 659 672 672 672 685* 685 688* 688 689
                                                                                  691 691 698* 700* 823 824 827* 951* 960 961 964*
                                                                                  1002 1004
dec_integer                            constant        bit(9)                   initial dcl 27-3 ref 691
declare                         000016 constant        entry                    external dcl 2-41 ref 834 971
declare_constant$desc           000056 constant        entry                    external dcl 3-229 ref 491 495
declare_constant$integer        000060 constant        entry                    external dcl 3-234 ref 470 485 507 509 566 572 577
                                                                                  582 597 1002
declare_temporary               000062 constant        entry                    external dcl 3-292 ref 481 1025 1033
decoded_type                    000013 constant        bit(36)                  initial array dcl 13-6 set ref 99*
def_context                            based           structure                level 1 dcl 20-8
default_fix_bin_p               000001 constant        fixed bin(31,0)          initial dcl 25-5 set ref 1025* 1033*
defined                  32(13)        based           bit(1)                   level 4 packed packed unaligned dcl 23-3 ref 232 232
desc_multiplier          10            based           pointer                  level 2 packed packed unaligned dcl 9-21 ref 513
desc_size                              constant        bit(9)                   initial dcl 17-8 ref 672
descriptor                             based           structure                array level 1 dcl 1-5 in procedure "fill" ref 495
                                                                                  495
descriptor               13            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 23-3 in procedure "expand_assign"
                                                                                  set ref 463 463 497* 516*
dimensioned              31(19)        based           bit(1)                   level 4 packed packed unaligned dcl 23-3 set ref 440
                                                                                  549 549 556 651* 925*
doing_return                    000143 automatic       bit(1)                   initial dcl 52 set ref 52* 202* 672 741
dr                              000120 automatic       pointer                  dcl 455 set ref 502* 504 516* 517 518 523* 525
e                                      parameter       pointer                  dcl 994 in procedure "size" ref 991 997 1000 1001
                                                                                  1012 1018 1021 1026 1027 1034 1035 1041 1042 1046
                                                                                  1048 1060
e                                      parameter       pointer                  dcl 615 in procedure "maker" ref 611 628 633 659 659
                                                                                  664 669 672 672 677 682 688 710 798 801 801
e1                              000114 automatic       pointer                  dcl 614 set ref 798* 801* 805 806* 808* 819* 819
eb                              000120 automatic       pointer                  dcl 614 set ref 710* 712* 715 715* 715 789 789* 789
                                                                                  853 854 855 856 857
element                   1            based           pointer                  array level 2 packed packed unaligned dcl 14-6 ref
                                                                                  312 312 720 722
element_size              5            based           pointer                  level 2 packed packed unaligned dcl 9-1 ref 572 574
element_size_bits         6            based           pointer                  level 2 packed packed unaligned dcl 9-1 ref 566 570
entry                    31(09)        based           bit(1)                   level 4 packed packed unaligned dcl 23-3 set ref 685
er                                     parameter       pointer                  dcl 616 ref 611 633 633 633 640 640 642
exp_extents              33(04)        based           bit(1)                   level 4 packed packed unaligned dcl 23-3 set ref
                                                                                  690* 691* 764* 775* 957*
expand_assign                   000020 constant        entry                    external dcl 2-62 ref 157
expand_infix                    000022 constant        entry                    external dcl 2-76 ref 253
expression_semantics            000024 constant        entry                    external dcl 2-105 ref 329 426 467 476 501 522 586
                                                                                  594 837 974 1014
external                 32(02)        based           bit(1)                   level 4 packed packed unaligned dcl 23-3 set ref
                                                                                  626*
f                               000102 automatic       pointer                  dcl 873 in procedure "declare_expression" set ref
                                                                                  889* 890 894 899 905 907
f                               000104 automatic       pointer                  dcl 614 in procedure "maker" set ref 781 784* 796*
                                                                                  813 815 817*
father                   17            based           pointer                  level 2 packed packed unaligned dcl 23-3 set ref
                                                                                  812* 894*
fixed                                                  builtin function         dcl 62 in procedure "expand_assign" ref 99
fixed                    31(01)        based           bit(1)                   level 4 in structure "symbol" packed packed
                                                                                  unaligned dcl 23-3 in procedure "expand_assign"
                                                                                  set ref 659 672
float                    31(02)        based           bit(1)                   level 4 packed packed unaligned dcl 23-3 set ref 659
                                                                                  672
general                  16            based           pointer                  level 2 packed packed unaligned dcl 23-3 set ref
                                                                                  653* 653
given                                  parameter       bit(1)                   dcl 618 ref 611 622
have_subs                       000130 automatic       bit(1)                   dcl 618 set ref 621* 643* 719
have_varying                    000140 automatic       bit(1)                   dcl 52 set ref 949* 953 1007*
hbound                                                 builtin function         dcl 62 ref 319
i                               000164 automatic       fixed bin(17,0)          dcl 294 in procedure "process_offset" set ref 311*
                                                                                  312 312*
i                               000110 automatic       fixed bin(15,0)          dcl 874 in procedure "declare_expression" set ref
                                                                                  892* 893*
i                               000126 automatic       fixed bin(15,0)          dcl 456 in procedure "fill" set ref 512* 514* 514
                                                                                  518
i                               000125 automatic       fixed bin(15,0)          dcl 617 in procedure "maker" set ref 718* 720 722*
ignore_e_array                  000131 automatic       bit(1)                   dcl 618 set ref 621* 638* 710
image                           000134 automatic       pointer                  initial dcl 48 set ref 48* 157* 160
initial                  11            based           pointer                  level 2 packed packed unaligned dcl 23-3 ref 463 919
initialed                31(20)        based           bit(1)                   level 4 packed packed unaligned dcl 23-3 set ref
                                                                                  626*
input_tree                             parameter       pointer                  dcl 48 ref 31 65
integer_type                    000000 constant        bit(36)                  initial dcl 25-71 set ref 330* 481* 1025* 1033*
interleaved               1(35)        based           bit(1)                   level 2 in structure "array" packed packed unaligned
                                                                                  dcl 9-1 in procedure "expand_assign" ref 88 122
interleaved                     000145 automatic       bit(1)                   initial dcl 52 in procedure "expand_assign" set ref
                                                                                  52* 88* 122* 225
join                                   constant        bit(9)                   initial dcl 17-8 ref 70 130 189 887
k                               000136 automatic       fixed bin(15,0)          dcl 52 set ref 268* 443* 443 448* 448 469 491 491
                                                                                  495 495 498 518
label_node                             constant        bit(9)                   initial dcl 16-5 ref 112
last                                   parameter       pointer                  dcl 873 set ref 870 912 913* 922* 924 927 933* 948
length                    6            based           pointer                  level 2 packed packed unaligned dcl 19-3 set ref
                                                                                  277* 303* 485 487
length_fun                             constant        bit(9)                   initial dcl 17-8 ref 480 1048
level                     2(11)        based           fixed bin(8,0)           level 2 packed packed unaligned dcl 23-3 set ref
                                                                                  704* 905*
level_number                           parameter       fixed bin(15,0)          dcl 874 in procedure "declare_expression" set ref
                                                                                  870 880* 893 905 922* 946* 969
level_number                           parameter       fixed bin(15,0)          dcl 617 in procedure "maker" ref 611 630 704 806 808
                                                                                  822
list                                   based           structure                level 1 dcl 14-6
list_node                              constant        bit(9)                   initial dcl 16-5 ref 91 118 307 640
loop                                   constant        bit(9)                   initial dcl 17-8 ref 70 130 189 910
lower                     5            based           pointer                  level 2 packed packed unaligned dcl 9-21 set ref 356
                                                                                  365 365* 365* 365* 365* 407* 507 507* 513 732* 732
                                                                                  735 735 735 741 741 741 741 749* 751* 757 758 761*
                                                                                  854* 854 860*
make_desc                       000006 constant        bit(9)                   initial dcl 17-8 set ref 489*
max_fun                         000005 constant        bit(9)                   initial dcl 17-8 set ref 1032*
max_length_precision            000002 constant        fixed bin(31,0)          initial dcl 25-5 set ref 481*
member                   32(04)        based           bit(1)                   level 4 packed packed unaligned dcl 23-3 set ref
                                                                                  626* 811* 895*
misc_attributes          31(19)        based           structure                level 3 packed packed unaligned dcl 23-3 set ref
                                                                                  625* 625
modified                        000141 automatic       bit(1)                   dcl 52 set ref 596* 597 758* 760 769* 771 824* 826
                                                                                  840* 842 961* 963 976* 978
mult                            000010 constant        bit(9)                   initial dcl 17-8 set ref 1040*
n                               000124 automatic       fixed bin(15,0)          dcl 617 set ref 620* 632* 633* 648* 651 706 718
next                     14            based           pointer                  level 2 packed packed unaligned dcl 9-21 set ref 369
                                                                                  370 444 781* 786 789 912*
no_data_type                    000144 automatic       bit(1)                   initial dcl 52 set ref 52* 168* 953
node                                   based           structure                level 1 dcl 16-27
null                                                   builtin function         dcl 62 ref 48 74 74 76 76 81 81 84 84 91 114 114 118
                                                                                  130 148 148 152 152 152 152 171 171 171 186 186
                                                                                  198 198 198 217 217 277 282 282 303 307 317 319
                                                                                  319 328 335 349 375 389 419 419 441 447 470 481
                                                                                  481 485 502 502 507 509 523 523 558 566 566 572
                                                                                  577 582 622 622 630 633 640 659 672 689 712 715
                                                                                  718 735 741 757 761 768 772 779 789 796 800 801
                                                                                  806 806 808 808 813 823 827 836 843 853 860 876
                                                                                  876 880 880 888 889 889 893 893 897 918 924 933
                                                                                  946 946 948 960 964 973 979 997 997 997 1002 1018
                                                                                  1018 1025 1025 1033 1033
number                    0(21)        based           fixed bin(14,0)          level 2 in structure "list" packed packed unaligned
                                                                                  dcl 14-6 in procedure "expand_assign" ref 311
number                    0(21)        based           fixed bin(14,0)          level 2 in structure "operator" packed packed
                                                                                  unaligned dcl 18-6 in procedure "expand_assign"
                                                                                  ref 892
number_of_dimensions      1(07)        based           fixed bin(7,0)           level 2 packed packed unaligned dcl 9-1 set ref 632
                                                                                  931* 931 940* 940
offset                    5            based           pointer                  level 2 packed packed unaligned dcl 19-3 set ref 91
                                                                                  91 118 118 307 307 309 325* 325* 328 329* 329 330*
                                                                                  330 640 640 642
op_code                   0(09)        based           bit(9)                   level 2 packed packed unaligned dcl 18-6 ref 70 70
                                                                                  130 130 189 189 389 672 887 910 1021 1048
opcode                          000104 automatic       bit(9)                   dcl 995 in procedure "size" set ref 1021* 1023 1031
                                                                                  1031 1031 1031 1039
opcode                          000224 automatic       bit(9)                   dcl 539 in procedure "make_copy" set ref 561* 563*
                                                                                  600*
operand                   1            based           pointer                  array level 2 packed packed unaligned dcl 18-6 set
                                                                                  ref 67 68 140 140* 154* 155* 160* 176* 194 210*
                                                                                  406* 407* 423* 424* 425* 481* 482* 490* 491* 495*
                                                                                  497* 516* 522* 601* 602* 603* 666 679 893 915 916
                                                                                  916 919 922 945 1025* 1026* 1026 1027* 1027 1033*
                                                                                  1034* 1034 1035* 1035 1041* 1041 1042* 1042* 1046
                                                                                  1048 1048 1051 1051 1051 1054 1055 1060
operator                               based           structure                level 1 dcl 18-6
operator_node                          constant        bit(9)                   initial dcl 16-5 ref 70 189 389 672 884 1018 1048
                                                                                  1055
or_bits                                constant        bit(9)                   initial dcl 17-8 ref 1031
own_bounds                      000114 automatic       fixed bin(17,0)          dcl 347 set ref 352* 354
own_number_of_dimensions
                          1(15)        based           fixed bin(7,0)           level 2 packed packed unaligned dcl 9-1 set ref 352
                                                                                  648 793* 929* 929 938* 938
p                               000110 automatic       pointer                  dcl 346 in procedure "check_refers" set ref 358*
                                                                                  360*
p                               000214 automatic       pointer                  dcl 538 in procedure "make_copy" set ref 566* 570*
                                                                                  572* 574* 577* 580* 582* 585* 586 586 591* 591
                                                                                  592* 594* 594* 596* 597* 603
p                               000112 automatic       pointer                  dcl 455 in procedure "fill" set ref 460* 462 466 470
                                                                                  470 473 474 507 507 507 509 509 509 513 513 513
p                                      parameter       pointer                  dcl 387 in procedure "is_refer" ref 384 389 389 389
p                                      parameter       pointer                  dcl 417 in procedure "make_check_stmnt" set ref 414
                                                                                  421* 423
p                               000162 automatic       pointer                  dcl 293 in procedure "process_offset" set ref 309*
                                                                                  311 312 312 326*
p                               000116 automatic       pointer                  dcl 48 in procedure "expand_assign" set ref 152* 153
                                                                                  154 282* 283
p                                      parameter       pointer                  dcl 403 in procedure "subtract_bounds" ref 400 406
                                                                                  407
p                               000100 automatic       pointer                  dcl 614 in procedure "maker" set ref 708* 718 729
                                                                                  730 732 733 786* 786
packed                   33            based           bit(1)                   level 4 packed packed unaligned dcl 23-3 set ref 561
                                                                                  566 577 955*
param_desc               32(15)        based           bit(1)                   level 4 packed packed unaligned dcl 23-3 ref 659 735
pix                       1(28)        based           structure                level 2 packed packed unaligned dcl 23-3 set ref
                                                                                  655* 655
pl1_stat_$index                 000012 external static fixed bin(15,0)          dcl 60 set ref 318* 318 319 321 335* 335
pl1_stat_$locator               000010 external static pointer                  array dcl 59 set ref 319 321*
position                 32            based           bit(1)                   level 4 packed packed unaligned dcl 23-3 set ref
                                                                                  833*
prefix                   12(12)        based           bit(12)                  level 2 packed packed unaligned dcl 21-9 ref 148 217
                                                                                  238 282 419 502 523
processed_bounds                000115 automatic       fixed bin(17,0)          dcl 347 set ref 350* 354 368* 368
pt                                     parameter       pointer                  dcl 293 in procedure "process_offset" ref 288 296
pt                                     parameter       pointer                  dcl 455 in procedure "fill" ref 452 460
q                               000120 automatic       pointer                  dcl 48 in procedure "expand_assign" set ref 151* 154
                                                                                  155 157*
q                               000102 automatic       pointer                  dcl 614 in procedure "maker" set ref 728* 729 730
                                                                                  732 733 735 735 735 741 741 741 741 749 751 752
                                                                                  754 757 758 761 762 768 769 772 773 779 781 784
                                                                                  854 855 856 857 860 860 861 861
q                               000112 automatic       pointer                  dcl 346 in procedure "check_refers" set ref 359*
                                                                                  360*
q                               000216 automatic       pointer                  dcl 538 in procedure "make_copy" set ref 600* 601
                                                                                  602 603 605
q                               000116 automatic       pointer                  dcl 455 in procedure "fill" set ref 489* 490 491
                                                                                  494* 495 497 504 515* 516 522 525
q                                      parameter       pointer                  dcl 417 in procedure "make_check_stmnt" set ref 414
                                                                                  422* 424 425
q                               000102 automatic       pointer                  dcl 994 in procedure "size" set ref 1002* 1004*
                                                                                  1010* 1010 1012* 1014* 1014* 1015 1024* 1025 1026
                                                                                  1027 1028 1032* 1033 1034 1035 1036 1040* 1041
                                                                                  1042 1043 1046* 1048 1048 1048 1051 1051 1051
                                                                                  1054* 1054 1055 1055* 1055 1057 1057 1057 1063
qual                            000122 automatic       pointer                  dcl 48 set ref 108* 130* 185* 699* 750* 753*
qualifier                 4            based           pointer                  level 2 packed packed unaligned dcl 19-3 ref 108 185
                                                                                  241 242 317 335 474 520 592 1012
r                               000114 automatic       pointer                  dcl 455 in procedure "fill" set ref 466* 467* 467*
                                                                                  468 469 482 485 485 487 497* 498 499 500 501* 501*
                                                                                  513* 519* 519 520* 522*
r                               000142 automatic       pointer                  dcl 417 in procedure "make_check_stmnt" set ref 419*
                                                                                  420 423 424 425 426 426* 426
r                               000132 automatic       pointer                  dcl 403 in procedure "subtract_bounds" set ref 405*
                                                                                  406 407 408
r                               000110 automatic       pointer                  dcl 614 in procedure "maker" set ref 698* 699* 700
                                                                                  749* 750* 751 752* 753* 754
ref                             000220 automatic       pointer                  dcl 538 set ref 549* 551* 554 566
ref_count                 0(18)        based           fixed bin(17,0)          level 2 packed packed unaligned dcl 19-3 set ref
                                                                                  215* 500* 1051* 1051 1057* 1057
refer                                  constant        bit(9)                   initial dcl 17-8 ref 389
refer_extent                    000064 constant        entry                    external dcl 3-426 ref 421 422 474 520 592 699 750
                                                                                  753 1012
refer_extents            33(05)        based           bit(1)                   level 4 in structure "symbol" packed packed
                                                                                  unaligned dcl 23-3 in procedure "expand_assign"
                                                                                  ref 238 474 520 592 628 1012
refer_extents                   000127 automatic       bit(1)                   dcl 618 in procedure "maker" set ref 628* 697 748
reference                15            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 23-3 in procedure "expand_assign"
                                                                                  set ref 154 176* 210* 261 325 466* 664 677 935
reference                              based           structure                level 1 dcl 19-3 in procedure "expand_assign"
reference_node                         constant        bit(9)                   initial dcl 16-5 ref 70 106 130 178 225 633 741 879
                                                                                  916 1000
repeat_fun                             constant        bit(9)                   initial dcl 17-8 ref 1039
return                    0(03)        based           bit(1)                   level 2 packed packed unaligned dcl 20-8 ref 182 202
                                                                                  264
root                      3            based           pointer                  level 2 packed packed unaligned dcl 21-9 set ref
                                                                                  157* 260* 265* 283* 420* 423 424 425 426* 426 504*
                                                                                  525*
s                               000100 automatic       pointer                  dcl 994 in procedure "size" set ref 1001* 1002 1002
                                                                                  1004 1007 1012
s                               000100 automatic       pointer                  dcl 434 in procedure "fill_desc" set ref 436* 438*
                                                                                  440 441 447 465 465 520
s                               000106 automatic       pointer                  dcl 48 in procedure "expand_assign" set ref 64* 148*
                                                                                  157 157* 217* 219* 253* 260 265 326* 329*
s                                      parameter       pointer                  dcl 614 in procedure "maker" set ref 611 622* 624
                                                                                  625 626 626 626 626 651 652 653 655 657 666 669
                                                                                  679 682 685 685 688 689 690 691 691 691 698 700
                                                                                  703 704 707 764 775 812 813 823 824 827 828 832
                                                                                  833 834* 836 837 837 837 840 843 844
s                               000100 automatic       pointer                  dcl 873 in procedure "declare_expression" set ref
                                                                                  893* 894 895 897 899 902 922* 925 926 927 929 929
                                                                                  931 931 935 938 938 940 940 942 945* 946* 946* 948
                                                                                  948
s1                              000116 automatic       pointer                  dcl 614 set ref 805* 806* 808* 811 812 813 815 817
sa                              000160 automatic       pointer                  dcl 293 in procedure "process_offset" set ref 324*
                                                                                  325 326*
sa                              000110 automatic       pointer                  dcl 48 in procedure "expand_assign" set ref 79* 81
                                                                                  84 88 96 96 167 174* 176 184 186* 186* 203* 208
                                                                                  212* 232 238 243* 269*
sa_for_return                   000132 automatic       pointer                  dcl 48 set ref 208* 267 463 497 516
sb                              000112 automatic       pointer                  dcl 48 in procedure "expand_assign" set ref 107* 112
                                                                                  114 122 130* 141* 161* 171 171* 174* 174* 195* 198
                                                                                  198* 203* 232 243*
sb                              000212 automatic       pointer                  dcl 538 in procedure "make_copy" set ref 554* 556
                                                                                  556 561 566 577 577 577 580 582 582 585 586 586
                                                                                  592
scale                     2(28)        based           fixed bin(7,0)           level 2 packed packed unaligned dcl 23-3 set ref
                                                                                  703* 703
sdims                           000126 automatic       fixed bin(15,0)          dcl 617 set ref 632* 633* 644* 648* 725* 725 793
semantic_translator$abort       000066 constant        entry                    external dcl 3-446 ref 74 76 81 84 96 112 114 319
                                                                                  997 1018
shared                    0(11)        based           bit(1)                   level 2 packed packed unaligned dcl 19-3 set ref
                                                                                  214* 499* 1051 1057
simplify_expression             000026 constant        entry                    external dcl 2-205 ref 596 758 769 824 840 961 976
simplify_offset                 000030 constant        entry                    external dcl 2-212 ref 332
size                            000122 automatic       pointer                  dcl 455 set ref 470* 473* 474* 476* 476* 480* 481
                                                                                  482 485* 487* 490
son                      21            based           pointer                  level 2 packed packed unaligned dcl 23-3 set ref 373
                                                                                  375 447 797 798 801 813* 899*
sp                                     parameter       pointer                  dcl 434 ref 431 436
star_extents             33(06)        based           bit(1)                   level 4 packed packed unaligned dcl 23-3 set ref 184
                                                                                  267 626*
statement                              based           structure                level 1 dcl 21-9
stmnt                                  parameter       pointer                  dcl 48 set ref 31 64 144 145 148 148 217 217 219 238
                                                                                  282 282 419 419 467* 476* 501* 502 502 522* 523
                                                                                  523 586* 594* 837* 974* 1014*
storage_class            32(09)        based           structure                level 3 packed packed unaligned dcl 23-3
string                                                 builtin function         dcl 62 set ref 96 167 491 491 495 495 624* 624 625*
                                                                                  625 664 677
string_mask                            constant        bit(36)                  initial dcl 15-41 ref 664 677
structure                31            based           bit(1)                   level 4 packed packed unaligned dcl 23-3 set ref 96
                                                                                  890*
sub                             000011 constant        bit(9)                   initial dcl 17-8 set ref 405*
subs                            000122 automatic       pointer                  dcl 614 set ref 642* 720 722
subscripter                     000032 constant        entry                    external dcl 2-216 ref 326
substr                                                 builtin function         dcl 62 ref 238 664 677
symbol                    3            based           pointer                  level 2 in structure "reference" packed packed
                                                                                  unaligned dcl 19-3 in procedure "expand_assign"
                                                                                  ref 79 107 141 161 195 228 324 463 549 549 554 666
                                                                                  679 741 741 880 880 916 919 945 1001
symbol                                 based           structure                level 1 dcl 23-3 in procedure "expand_assign"
symbol_node                            constant        bit(9)                   initial dcl 16-5 ref 81 114 462 741
t                                      parameter       pointer                  dcl 615 in procedure "maker" ref 611 624 625 630 632
                                                                                  633 648 652 653 655 657 659 659 659 659 664 672
                                                                                  672 672 677 685 703 708 735 797
t                               000114 automatic       pointer                  dcl 48 in procedure "expand_assign" set ref 186*
                                                                                  203* 210 212 261
t1                              000112 automatic       pointer                  dcl 614 set ref 797* 800 806* 808* 818* 818
temporary                32(17)        based           bit(1)                   level 4 packed packed unaligned dcl 23-3 set ref
                                                                                  153* 586 832* 970*
this_context                    000146 automatic       bit(36)                  dcl 20-5 set ref 590* 594* 1011* 1014*
token                                  based           structure                level 1 dcl 26-3 in procedure "expand_assign"
token                     5            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 23-3 in procedure "expand_assign"
                                                                                  ref 805
token_node                             constant        bit(9)                   initial dcl 16-5 ref 99 312 659 691 720 735
tree                                   parameter       pointer                  dcl 873 in procedure "declare_expression" set ref
                                                                                  870 876 879 880 880 884 884 887 892 893 910 915
                                                                                  916 916 919 922 945 951*
tree                            000100 automatic       pointer                  dcl 48 in procedure "expand_assign" set ref 65* 67
                                                                                  68 140 160 176 210 249* 253* 253* 260 265 283* 286
type                      0(09)        based           bit(9)                   level 2 in structure "token" packed packed unaligned
                                                                                  dcl 26-3 in procedure "expand_assign" ref 99 312
                                                                                  659 691 722 735
type                                   based           bit(9)                   level 2 in structure "node" packed packed unaligned
                                                                                  dcl 16-27 in procedure "expand_assign" ref 70 70
                                                                                  81 91 99 106 112 114 118 130 178 189 225 307 312
                                                                                  389 462 633 640 659 672 691 720 735 741 741 879
                                                                                  884 916 1000 1018 1048 1055
unaligned                31(22)        based           bit(1)                   level 4 packed packed unaligned dcl 23-3 set ref
                                                                                  955*
units                     0(14)        based           fixed bin(3,0)           level 2 packed packed unaligned dcl 19-3 set ref
                                                                                  517*
upper                     6            based           pointer                  level 2 packed packed unaligned dcl 9-21 set ref 356
                                                                                  362* 362* 362* 362* 406* 509 509* 513 733* 733
                                                                                  752* 754* 768 769 772* 855* 855 860* 915* 918*
varying                  31(26)        based           bit(1)                   level 4 packed packed unaligned dcl 23-3 set ref
                                                                                  954* 1007
varying_ref               0(10)        based           bit(1)                   level 2 packed packed unaligned dcl 19-3 ref 468
word_                                  constant        fixed bin(3,0)           initial dcl 11-5 ref 517
word_size                22            based           pointer                  level 2 packed packed unaligned dcl 23-3 set ref 582
                                                                                  585 586* 836 837* 837* 837* 840 843* 973 974* 974*
                                                                                  974* 976 979*
xor_bits                               constant        bit(9)                   initial dcl 17-8 ref 1031

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
a_format                               internal static bit(9)                   initial dcl 17-8
abs_fun                                internal static bit(9)                   initial dcl 17-8
acos_fun                               internal static bit(9)                   initial dcl 17-8
acosd_fun                              internal static bit(9)                   initial dcl 17-8
addbitno_fun                           internal static bit(9)                   initial dcl 17-8
addcharno_fun                          internal static bit(9)                   initial dcl 17-8
addr_fun                               internal static bit(9)                   initial dcl 17-8
addr_fun_bits                          internal static bit(9)                   initial dcl 17-8
addrel_fun                             internal static bit(9)                   initial dcl 17-8
adjust_count                    000000 constant        entry                    external dcl 3-20
aliasable_bit                          internal static fixed bin(15,0)          initial dcl 24-3
aligned_mask                           internal static bit(36)                  initial dcl 15-3
alloc_semantics                 000000 constant        entry                    external dcl 2-7
alloc_semantics$init_only       000000 constant        entry                    external dcl 2-12
allocate_statement                     internal static bit(9)                   initial dcl 22-3
allocation_fun                         internal static bit(9)                   initial dcl 17-8
allot_auto                             internal static bit(9)                   initial dcl 17-8
allot_based                            internal static bit(9)                   initial dcl 17-8
allot_ctl                              internal static bit(9)                   initial dcl 17-8
allot_var                              internal static bit(9)                   initial dcl 17-8
and                                    internal static bit(9)                   initial dcl 27-3
area_mask                              internal static bit(36)                  initial dcl 15-3
arg_desc_type                          internal static bit(36)                  initial dcl 25-71
arg_descriptor_mask                    internal static bit(36)                  initial dcl 15-3
arithmetic_mask                        internal static bit(36)                  initial dcl 15-41
array_node                             internal static bit(9)                   initial dcl 16-5
arrow                                  internal static bit(9)                   initial dcl 27-3
asin_fun                               internal static bit(9)                   initial dcl 17-8
asind_fun                              internal static bit(9)                   initial dcl 17-8
assign_by_name                         internal static bit(9)                   initial dcl 17-8
assign_round                           internal static bit(9)                   initial dcl 17-8
assign_size_ck                         internal static bit(9)                   initial dcl 17-8
assign_zero                            internal static bit(9)                   initial dcl 17-8
assignment                             internal static bit(9)                   initial dcl 27-3
atan_fun                               internal static bit(9)                   initial dcl 17-8
atand_fun                              internal static bit(9)                   initial dcl 17-8
b_format                               internal static bit(9)                   initial dcl 17-8
baseno_fun                             internal static bit(9)                   initial dcl 17-8
baseptr_fun                            internal static bit(9)                   initial dcl 17-8
begin_statement                        internal static bit(9)                   initial dcl 22-3
bin_integer                            internal static bit(9)                   initial dcl 27-3
binary_mask                            internal static bit(36)                  initial dcl 15-3
binary_to_octal_string          000000 constant        entry                    external dcl 3-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 3-43
bindec                          000000 constant        entry                    external dcl 3-23
bindec$vs                       000000 constant        entry                    external dcl 3-28
binoct                          000000 constant        entry                    external dcl 3-33
bit_                                   internal static fixed bin(3,0)           initial dcl 11-5
bit_mask                               internal static bit(36)                  initial dcl 15-3
bit_pointer                            internal static bit(9)                   initial dcl 17-8
bit_string                             internal static bit(9)                   initial dcl 27-3
bit_to_char                            internal static bit(9)                   initial dcl 17-8
bit_to_word                            internal static bit(9)                   initial dcl 17-8
bit_type                               internal static bit(36)                  initial dcl 25-71
bitno_fun                              internal static bit(9)                   initial dcl 17-8
bits_per_binary_exponent               internal static fixed bin(31,0)          initial dcl 25-5
bits_per_character                     internal static fixed bin(31,0)          initial dcl 25-5
bits_per_decimal_digit                 internal static fixed bin(31,0)          initial dcl 25-5
bits_per_digit                         internal static fixed bin(31,1)          initial dcl 25-69
bits_per_double                        internal static fixed bin(31,0)          initial dcl 25-5
bits_per_half                          internal static fixed bin(31,0)          initial dcl 25-5
bits_per_packed_ptr                    internal static fixed bin(31,0)          initial dcl 25-5
bits_per_word                          internal static fixed bin(31,0)          initial dcl 25-5
block                                  based           structure                level 1 dcl 10-5
block_node                             internal static bit(9)                   initial dcl 16-5
bn_format                              internal static bit(9)                   initial dcl 17-8
bound_node                             internal static bit(9)                   initial dcl 16-5
builtin                         000000 constant        entry                    external dcl 2-17
builtin_mask                           internal static bit(36)                  initial dcl 15-3
builtin_type                           internal static bit(36)                  initial dcl 25-71
by_context                             internal static bit(3)                   initial dcl 12-5
by_declare                             internal static bit(3)                   initial dcl 12-5
by_explicit_context                    internal static bit(3)                   initial dcl 12-5
by_implication                         internal static bit(3)                   initial dcl 12-5
by_name_agg_node                       internal static bit(9)                   initial dcl 16-5
byte_fun                               internal static bit(9)                   initial dcl 17-8
c_format                               internal static bit(9)                   initial dcl 17-8
call_statement                         internal static bit(9)                   initial dcl 22-3
cat                                    internal static bit(9)                   initial dcl 27-3
ceil_fun                               internal static bit(9)                   initial dcl 17-8
char_mask                              internal static bit(36)                  initial dcl 15-3
char_string                            internal static bit(9)                   initial dcl 27-3
char_to_word                           internal static bit(9)                   initial dcl 17-8
char_type                              internal static bit(36)                  initial dcl 25-71
character_                             internal static fixed bin(3,0)           initial dcl 11-5
characters_per_double                  internal static fixed bin(31,0)          initial dcl 25-5
characters_per_half                    internal static fixed bin(31,0)          initial dcl 25-5
characters_per_word                    internal static fixed bin(31,0)          initial dcl 25-5
charno_fun                             internal static bit(9)                   initial dcl 17-8
check_star_extents              000000 constant        entry                    external dcl 2-27
clock_fun                              internal static bit(9)                   initial dcl 17-8
close_file                             internal static bit(9)                   initial dcl 17-8
close_statement                        internal static bit(9)                   initial dcl 22-3
codeptr_fun                            internal static bit(9)                   initial dcl 17-8
colon                                  internal static bit(9)                   initial dcl 27-3
column_format                          internal static bit(9)                   initial dcl 17-8
comma                                  internal static bit(9)                   initial dcl 27-3
compare_expression              000000 constant        entry                    external dcl 3-48
complex_fun                            internal static bit(9)                   initial dcl 17-8
complex_mask                           internal static bit(36)                  initial dcl 15-3
complex_type                           internal static bit(36)                  initial dcl 25-71
computational_mask                     internal static bit(36)                  initial dcl 15-41
condition_mask                         internal static bit(36)                  initial dcl 15-3
conjg_fun                              internal static bit(9)                   initial dcl 17-8
constant_length                 000000 constant        entry                    external dcl 3-54
context_node                           internal static bit(9)                   initial dcl 16-5
context_processor               000000 constant        entry                    external dcl 2-38
continue_statement                     internal static bit(9)                   initial dcl 22-3
convert$to_target               000000 constant        entry                    external dcl 3-88
convert$to_target_fb            000000 constant        entry                    external dcl 3-82
convert$validate                000000 constant        entry                    external dcl 3-78
convert_mask                           internal static bit(36)                  initial dcl 15-41
copy_expression$copy_sons       000000 constant        entry                    external dcl 3-99
copy_unique_expression          000000 constant        entry                    external dcl 3-103
cos_fun                                internal static bit(9)                   initial dcl 17-8
cosd_fun                               internal static bit(9)                   initial dcl 17-8
create_block                    000000 constant        entry                    external dcl 3-112
create_context                  000000 constant        entry                    external dcl 3-122
create_cross_reference          000000 constant        entry                    external dcl 3-128
create_default                  000000 constant        entry                    external dcl 3-132
create_identifier               000000 constant        entry                    external dcl 3-136
create_label                    000000 constant        entry                    external dcl 3-140
create_list                     000000 constant        entry                    external dcl 3-147
create_reference                000000 constant        entry                    external dcl 3-158
create_statement$prologue       000000 constant        entry                    external dcl 3-171
create_storage                  000000 constant        entry                    external dcl 3-179
create_token                    000000 constant        entry                    external dcl 3-191
create_token$init_hash_table    000000 constant        entry                    external dcl 3-197
create_token$protected          000000 constant        entry                    external dcl 3-199
cross_reference_node                   internal static bit(9)                   initial dcl 16-5
dec_integer_type                       internal static bit(36)                  initial dcl 25-71
decbin                          000000 constant        entry                    external dcl 3-206
decimal_mask                           internal static bit(36)                  initial dcl 15-3
declare_constant                000000 constant        entry                    external dcl 3-211
declare_constant$bit            000000 constant        entry                    external dcl 3-219
declare_constant$char           000000 constant        entry                    external dcl 3-224
declare_constant_mask                  internal static bit(36)                  initial dcl 15-41
declare_descriptor              000000 constant        entry                    external dcl 3-239
declare_descriptor$ctl          000000 constant        entry                    external dcl 3-249
declare_descriptor$param        000000 constant        entry                    external dcl 3-259
declare_integer                 000000 constant        entry                    external dcl 3-269
declare_picture                 000000 constant        entry                    external dcl 3-274
declare_picture_temp            000000 constant        entry                    external dcl 3-279
declare_pointer                 000000 constant        entry                    external dcl 3-287
declare_statement                      internal static bit(9)                   initial dcl 22-3
declare_structure               000000 constant        entry                    external dcl 2-44
decode_node_id                  000000 constant        entry                    external dcl 3-300
decode_source_id                000000 constant        entry                    external dcl 3-306
def_this_context                       based           structure                level 1 dcl 20-27
default_area_size                      internal static fixed bin(31,0)          initial dcl 25-5
default_fix_dec_p                      internal static fixed bin(31,0)          initial dcl 25-5
default_flt_bin_p                      internal static fixed bin(31,0)          initial dcl 25-5
default_flt_dec_p                      internal static fixed bin(31,0)          initial dcl 25-5
default_node                           internal static bit(9)                   initial dcl 16-5
default_statement                      internal static bit(9)                   initial dcl 22-3
defined_reference               000000 constant        entry                    external dcl 2-47
delete_file                            internal static bit(9)                   initial dcl 17-8
delete_statement                       internal static bit(9)                   initial dcl 22-3
digit_                                 internal static fixed bin(3,0)           initial dcl 11-5
digit_to_bit                           internal static bit(9)                   initial dcl 17-8
dimensioned_mask                       internal static bit(36)                  initial dcl 15-3
display_statement                      internal static bit(9)                   initial dcl 22-3
div                                    internal static bit(9)                   initial dcl 17-8
do_fun                                 internal static bit(9)                   initial dcl 17-8
do_semantics                    000000 constant        entry                    external dcl 2-57
do_spec                                internal static bit(9)                   initial dcl 17-8
do_statement                           internal static bit(9)                   initial dcl 22-3
e_format                               internal static bit(9)                   initial dcl 17-8
else_clause                            internal static bit(9)                   initial dcl 22-3
empty_area                             internal static bit(9)                   initial dcl 17-8
enable_on                              internal static bit(9)                   initial dcl 17-8
end_statement                          internal static bit(9)                   initial dcl 22-3
entry_mask                             internal static bit(36)                  initial dcl 15-3
entry_statement                        internal static bit(9)                   initial dcl 22-3
entry_var_type                         internal static bit(36)                  initial dcl 25-71
environmentptr_fun                     internal static bit(9)                   initial dcl 17-8
eq                                     internal static bit(9)                   initial dcl 27-3
equal                                  internal static bit(9)                   initial dcl 17-8
error                           000000 constant        entry                    external dcl 3-314
error$omit_text                 000000 constant        entry                    external dcl 3-319
error_                          000000 constant        entry                    external dcl 3-324
error_$finish                   000000 constant        entry                    external dcl 3-343
error_$initialize_error         000000 constant        entry                    external dcl 3-341
error_$no_text                  000000 constant        entry                    external dcl 3-334
ex_prologue                            internal static bit(9)                   initial dcl 17-8
exit_statement                         internal static bit(9)                   initial dcl 22-3
exp                                    internal static bit(9)                   initial dcl 17-8
exp_fun                                internal static bit(9)                   initial dcl 17-8
expand_by_name                  000000 constant        entry                    external dcl 2-71
expand_initial                  000000 constant        entry                    external dcl 2-84
expand_prefix                   000000 constant        entry                    external dcl 2-89
expand_primitive                000000 constant        entry                    external dcl 2-97
expon                                  internal static bit(9)                   initial dcl 27-3
f_format                               internal static bit(9)                   initial dcl 17-8
file_mask                              internal static bit(36)                  initial dcl 15-3
fill_refer                      000000 constant        entry                    external dcl 2-113
fixed_bin                              internal static bit(9)                   initial dcl 27-3
fixed_binary_real_mask                 internal static bit(36)                  initial dcl 15-41
fixed_dec                              internal static bit(9)                   initial dcl 27-3
fixed_decimal_complex_mask             internal static bit(36)                  initial dcl 15-41
fixed_decimal_real_mask                internal static bit(36)                  initial dcl 15-41
fixed_mask                             internal static bit(36)                  initial dcl 15-3
float_bin                              internal static bit(9)                   initial dcl 27-3
float_dec                              internal static bit(9)                   initial dcl 27-3
float_decimal_complex_mask             internal static bit(36)                  initial dcl 15-41
float_decimal_real_mask                internal static bit(36)                  initial dcl 15-41
float_mask                             internal static bit(36)                  initial dcl 15-3
floor_fun                              internal static bit(9)                   initial dcl 17-8
format_mask                            internal static bit(36)                  initial dcl 15-3
format_statement                       internal static bit(9)                   initial dcl 22-3
format_value_node                      internal static bit(9)                   initial dcl 16-5
fortran_read                           internal static bit(9)                   initial dcl 17-8
fortran_write                          internal static bit(9)                   initial dcl 17-8
free_based                             internal static bit(9)                   initial dcl 17-8
free_ctl                               internal static bit(9)                   initial dcl 17-8
free_node                       000000 constant        entry                    external dcl 3-345
free_statement                         internal static bit(9)                   initial dcl 22-3
free_var                               internal static bit(9)                   initial dcl 17-8
ftn_file_manip                         internal static bit(9)                   initial dcl 17-8
ftn_trans_loop                         internal static bit(9)                   initial dcl 17-8
function                        000000 constant        entry                    external dcl 2-125
ge                                     internal static bit(9)                   initial dcl 27-3
generic_mask                           internal static bit(36)                  initial dcl 15-3
generic_selector                000000 constant        entry                    external dcl 2-134
get_array_size                  000000 constant        entry                    external dcl 3-348
get_data_trans                         internal static bit(9)                   initial dcl 17-8
get_edit_trans                         internal static bit(9)                   initial dcl 17-8
get_file                               internal static bit(9)                   initial dcl 17-8
get_list_trans                         internal static bit(9)                   initial dcl 17-8
get_size                        000000 constant        entry                    external dcl 3-352
get_statement                          internal static bit(9)                   initial dcl 22-3
get_string                             internal static bit(9)                   initial dcl 17-8
goto_statement                         internal static bit(9)                   initial dcl 22-3
greater_or_equal                       internal static bit(9)                   initial dcl 17-8
greater_than                           internal static bit(9)                   initial dcl 17-8
gt                                     internal static bit(9)                   initial dcl 27-3
half_                                  internal static fixed bin(3,0)           initial dcl 11-5
half_to_word                           internal static bit(9)                   initial dcl 17-8
i_bin_integer                          internal static bit(9)                   initial dcl 27-3
i_dec_integer                          internal static bit(9)                   initial dcl 27-3
i_fixed_bin                            internal static bit(9)                   initial dcl 27-3
i_fixed_dec                            internal static bit(9)                   initial dcl 27-3
i_float_bin                            internal static bit(9)                   initial dcl 27-3
i_float_dec                            internal static bit(9)                   initial dcl 27-3
identifier                             internal static bit(9)                   initial dcl 27-3
if_statement                           internal static bit(9)                   initial dcl 22-3
imag_fun                               internal static bit(9)                   initial dcl 17-8
index_after_fun                        internal static bit(9)                   initial dcl 17-8
index_before_fun                       internal static bit(9)                   initial dcl 17-8
index_fun                              internal static bit(9)                   initial dcl 17-8
index_rev_fun                          internal static bit(9)                   initial dcl 17-8
initialed_mask                         internal static bit(36)                  initial dcl 15-3
io_data_list_semantics          000000 constant        entry                    external dcl 2-143
io_data_list_semantics$format_list_semantics
                                000000 constant        entry                    external dcl 2-120
io_semantics                    000000 constant        entry                    external dcl 2-148
irreducible_mask                       internal static bit(36)                  initial dcl 15-3
is_arith_constant                      internal static bit(9)                   initial dcl 27-47
is_arithmetic_constant                 internal static bit(9)                   initial dcl 27-47
is_constant                            internal static bit(9)                   initial dcl 27-47
is_decimal_constant                    internal static bit(9)                   initial dcl 27-47
is_delimiter                           internal static bit(9)                   initial dcl 27-47
is_float_constant                      internal static bit(9)                   initial dcl 27-47
is_identifier                          internal static bit(9)                   initial dcl 27-47
is_imaginary_constant                  internal static bit(9)                   initial dcl 27-47
is_integral_constant                   internal static bit(9)                   initial dcl 27-47
is_isub                                internal static bit(9)                   initial dcl 27-47
isub                                   internal static bit(9)                   initial dcl 27-3
jump                                   internal static bit(9)                   initial dcl 17-8
jump_false                             internal static bit(9)                   initial dcl 17-8
jump_if_eq                             internal static bit(9)                   initial dcl 17-8
jump_if_ge                             internal static bit(9)                   initial dcl 17-8
jump_if_gt                             internal static bit(9)                   initial dcl 17-8
jump_if_le                             internal static bit(9)                   initial dcl 17-8
jump_if_lt                             internal static bit(9)                   initial dcl 17-8
jump_if_ne                             internal static bit(9)                   initial dcl 17-8
jump_true                              internal static bit(9)                   initial dcl 17-8
l_parn                                 internal static bit(9)                   initial dcl 17-8
label_array_element_node               internal static bit(9)                   initial dcl 16-5
label_mask                             internal static bit(36)                  initial dcl 15-3
le                                     internal static bit(9)                   initial dcl 27-3
left_parn                              internal static bit(9)                   initial dcl 27-3
less_or_equal                          internal static bit(9)                   initial dcl 17-8
less_than                              internal static bit(9)                   initial dcl 17-8
line_format                            internal static bit(9)                   initial dcl 17-8
local_label_var_type                   internal static bit(36)                  initial dcl 25-71
local_mask                             internal static bit(36)                  initial dcl 15-3
locate_file                            internal static bit(9)                   initial dcl 17-8
locate_statement                       internal static bit(9)                   initial dcl 22-3
lock_file                              internal static bit(9)                   initial dcl 17-8
lock_fun                               internal static bit(9)                   initial dcl 17-8
lock_mask                              internal static bit(36)                  initial dcl 15-3
lock_statement                         internal static bit(9)                   initial dcl 22-3
log10_fun                              internal static bit(9)                   initial dcl 17-8
log2_fun                               internal static bit(9)                   initial dcl 17-8
log_fun                                internal static bit(9)                   initial dcl 17-8
lookup                          000000 constant        entry                    external dcl 2-153
lt                                     internal static bit(9)                   initial dcl 27-3
machine_state_node                     internal static bit(9)                   initial dcl 16-5
make_non_quick                  000000 constant        entry                    external dcl 2-162
match_arguments                 000000 constant        entry                    external dcl 2-166
max_area_size                          internal static fixed bin(31,0)          initial dcl 25-5
max_bit_string                         internal static fixed bin(31,0)          initial dcl 25-5
max_bit_string_constant                internal static fixed bin(31,0)          initial dcl 25-5
max_block_number                       internal static fixed bin(17,0)          initial dcl 10-74
max_char_string                        internal static fixed bin(31,0)          initial dcl 25-5
max_char_string_constant               internal static fixed bin(31,0)          initial dcl 25-5
max_identifier_length                  internal static fixed bin(31,0)          initial dcl 25-5
max_index_register_value               internal static fixed bin(31,0)          initial dcl 25-5
max_list_elements                      internal static fixed bin(17,0)          initial dcl 14-12
max_number_of_dimensions               internal static fixed bin(31,0)          initial dcl 25-5
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 18-15
max_offset_precision                   internal static fixed bin(31,0)          initial dcl 25-5
max_p_bin_or_dec                       internal static fixed bin(31,0)          initial dcl 25-5
max_p_dec                              internal static fixed bin(31,0)          initial dcl 25-5
max_p_fix_bin_1                        internal static fixed bin(31,0)          initial dcl 25-5
max_p_fix_bin_2                        internal static fixed bin(31,0)          initial dcl 25-5
max_p_flt_bin_1                        internal static fixed bin(31,0)          initial dcl 25-5
max_p_flt_bin_2                        internal static fixed bin(31,0)          initial dcl 25-5
max_scale                              internal static fixed bin(31,0)          initial dcl 25-5
max_signed_index_register_value        internal static fixed bin(31,0)          initial dcl 25-5
max_signed_xreg_precision              internal static fixed bin(31,0)          initial dcl 25-5
max_uns_xreg_precision                 internal static fixed bin(31,0)          initial dcl 25-5
max_words_per_variable                 internal static fixed bin(31,0)          initial dcl 25-5
merge_attributes                000000 constant        entry                    external dcl 3-355
min_area_size                          internal static fixed bin(31,0)          initial dcl 25-5
min_fun                                internal static bit(9)                   initial dcl 17-8
min_scale                              internal static fixed bin(31,0)          initial dcl 25-5
minus                                  internal static bit(9)                   initial dcl 27-3
mod2_                                  internal static fixed bin(3,0)           initial dcl 11-5
mod4_                                  internal static fixed bin(3,0)           initial dcl 11-5
mod_bit                                internal static bit(9)                   initial dcl 17-8
mod_byte                               internal static bit(9)                   initial dcl 17-8
mod_fun                                internal static bit(9)                   initial dcl 17-8
mod_half                               internal static bit(9)                   initial dcl 17-8
mod_word                               internal static bit(9)                   initial dcl 17-8
ne                                     internal static bit(9)                   initial dcl 27-3
negate                                 internal static bit(9)                   initial dcl 17-8
ngt                                    internal static bit(9)                   initial dcl 27-3
nlt                                    internal static bit(9)                   initial dcl 27-3
no_token                               internal static bit(9)                   initial dcl 27-3
nop                                    internal static bit(9)                   initial dcl 17-8
not                                    internal static bit(9)                   initial dcl 27-3
not_bits                               internal static bit(9)                   initial dcl 17-8
not_equal                              internal static bit(9)                   initial dcl 17-8
null_statement                         internal static bit(9)                   initial dcl 22-3
off_fun                                internal static bit(9)                   initial dcl 17-8
offset_adder                    000000 constant        entry                    external dcl 2-172
offset_mask                            internal static bit(36)                  initial dcl 15-3
on_statement                           internal static bit(9)                   initial dcl 22-3
open_file                              internal static bit(9)                   initial dcl 17-8
open_statement                         internal static bit(9)                   initial dcl 22-3
operator_semantics              000000 constant        entry                    external dcl 2-184
optimizer                       000000 constant        entry                    external dcl 3-361
or                                     internal static bit(9)                   initial dcl 27-3
overlayed_by_builtin_bit               internal static fixed bin(15,0)          initial dcl 24-3
pack                                   internal static bit(9)                   initial dcl 17-8
packed_digits_per_character            internal static fixed bin(31,0)          initial dcl 25-5
page_format                            internal static bit(9)                   initial dcl 17-8
param_desc_ptr                         internal static bit(9)                   initial dcl 17-8
param_ptr                              internal static bit(9)                   initial dcl 17-8
parse_error                     000000 constant        entry                    external dcl 3-364
parse_error$no_text             000000 constant        entry                    external dcl 3-368
passed_as_arg_bit                      internal static fixed bin(15,0)          initial dcl 24-3
percent                                internal static bit(9)                   initial dcl 27-3
period                                 internal static bit(9)                   initial dcl 27-3
picture_format                         internal static bit(9)                   initial dcl 17-8
picture_mask                           internal static bit(36)                  initial dcl 15-3
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 3-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 3-372
pl1_mod_fun                            internal static bit(9)                   initial dcl 17-8
pl1_print$for_lex               000000 constant        entry                    external dcl 3-418
pl1_print$non_varying           000000 constant        entry                    external dcl 3-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 3-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 3-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 3-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 3-414
pl1_print$varying               000000 constant        entry                    external dcl 3-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 3-395
plus                                   internal static bit(9)                   initial dcl 27-3
pointer_type                           internal static bit(36)                  initial dcl 25-71
precision_mask                         internal static bit(36)                  initial dcl 15-3
prefix_plus                            internal static bit(9)                   initial dcl 17-8
procedure_statement                    internal static bit(9)                   initial dcl 22-3
propagate_bit                   000000 constant        entry                    external dcl 2-192
ptr_fun                                internal static bit(9)                   initial dcl 17-8
ptr_mask                               internal static bit(36)                  initial dcl 15-3
put_control                            internal static bit(9)                   initial dcl 17-8
put_data_trans                         internal static bit(9)                   initial dcl 17-8
put_edit_trans                         internal static bit(9)                   initial dcl 17-8
put_field                              internal static bit(9)                   initial dcl 17-8
put_field_chk                          internal static bit(9)                   initial dcl 17-8
put_file                               internal static bit(9)                   initial dcl 17-8
put_list_trans                         internal static bit(9)                   initial dcl 17-8
put_statement                          internal static bit(9)                   initial dcl 22-3
put_string                             internal static bit(9)                   initial dcl 17-8
r_format                               internal static bit(9)                   initial dcl 17-8
r_parn                                 internal static bit(9)                   initial dcl 17-8
range_ck                               internal static bit(9)                   initial dcl 17-8
rank_fun                               internal static bit(9)                   initial dcl 17-8
read_file                              internal static bit(9)                   initial dcl 17-8
read_statement                         internal static bit(9)                   initial dcl 22-3
real_fun                               internal static bit(9)                   initial dcl 17-8
real_mask                              internal static bit(36)                  initial dcl 15-3
real_type                              internal static bit(36)                  initial dcl 25-71
record_io                              internal static bit(9)                   initial dcl 17-8
reducible_mask                         internal static bit(36)                  initial dcl 15-3
rel_fun                                internal static bit(9)                   initial dcl 17-8
reserve$clear                   000000 constant        entry                    external dcl 3-430
reserve$declare_lib             000000 constant        entry                    external dcl 3-434
reserve$read_lib                000000 constant        entry                    external dcl 3-439
return_bits                            internal static bit(9)                   initial dcl 17-8
return_statement                       internal static bit(9)                   initial dcl 22-3
return_string                          internal static bit(9)                   initial dcl 17-8
return_value                           internal static bit(9)                   initial dcl 17-8
return_words                           internal static bit(9)                   initial dcl 17-8
returns_mask                           internal static bit(36)                  initial dcl 15-3
reverse_fun                            internal static bit(9)                   initial dcl 17-8
revert_on                              internal static bit(9)                   initial dcl 17-8
revert_statement                       internal static bit(9)                   initial dcl 22-3
rewrite_file                           internal static bit(9)                   initial dcl 17-8
rewrite_statement                      internal static bit(9)                   initial dcl 22-3
right_parn                             internal static bit(9)                   initial dcl 27-3
round_fun                              internal static bit(9)                   initial dcl 17-8
search_fun                             internal static bit(9)                   initial dcl 17-8
search_rev_fun                         internal static bit(9)                   initial dcl 17-8
segno_fun                              internal static bit(9)                   initial dcl 17-8
semantic_translator             000000 constant        entry                    external dcl 3-444
semantic_translator$call_es     000000 constant        entry                    external dcl 2-196
semantic_translator$error       000000 constant        entry                    external dcl 3-450
semi_colon                             internal static bit(9)                   initial dcl 27-3
set_bit                                internal static fixed bin(15,0)          initial dcl 24-3
setbitno_fun                           internal static bit(9)                   initial dcl 17-8
setcharno_fun                          internal static bit(9)                   initial dcl 17-8
sf_par_node                            internal static bit(9)                   initial dcl 16-5
share_expression                000000 constant        entry                    external dcl 3-454
sign_fun                               internal static bit(9)                   initial dcl 17-8
signal_on                              internal static bit(9)                   initial dcl 17-8
signal_statement                       internal static bit(9)                   initial dcl 22-3
signed_mask                            internal static bit(36)                  initial dcl 15-3
sin_fun                                internal static bit(9)                   initial dcl 17-8
sind_fun                               internal static bit(9)                   initial dcl 17-8
skip_format                            internal static bit(9)                   initial dcl 17-8
slash                                  internal static bit(9)                   initial dcl 27-3
source_node                            internal static bit(9)                   initial dcl 16-5
sqrt_fun                               internal static bit(9)                   initial dcl 17-8
stack_ptr                              internal static bit(9)                   initial dcl 17-8
stackbaseptr_fun                       internal static bit(9)                   initial dcl 17-8
stackframeptr_fun                      internal static bit(9)                   initial dcl 17-8
stacq_fun                              internal static bit(9)                   initial dcl 17-8
statement_node                         internal static bit(9)                   initial dcl 16-5
std_arg_list                           internal static bit(9)                   initial dcl 17-8
std_call                               internal static bit(9)                   initial dcl 17-8
std_entry                              internal static bit(9)                   initial dcl 17-8
std_return                             internal static bit(9)                   initial dcl 17-8
stop                                   internal static bit(9)                   initial dcl 17-8
stop_statement                         internal static bit(9)                   initial dcl 22-3
storage_block_mask                     internal static bit(36)                  initial dcl 15-3
storage_block_type                     internal static bit(36)                  initial dcl 25-71
stream_prep                            internal static bit(9)                   initial dcl 17-8
structure_mask                         internal static bit(36)                  initial dcl 15-3
system_on_unit                         internal static bit(9)                   initial dcl 22-3
tan_fun                                internal static bit(9)                   initial dcl 17-8
tand_fun                               internal static bit(9)                   initial dcl 17-8
temporary_node                         internal static bit(9)                   initial dcl 16-5
terminate_trans                        internal static bit(9)                   initial dcl 17-8
token_to_binary                 000000 constant        entry                    external dcl 3-459
translate_fun                          internal static bit(9)                   initial dcl 17-8
trunc_fun                              internal static bit(9)                   initial dcl 17-8
unaligned_mask                         internal static bit(36)                  initial dcl 15-3
undesirable_mask                       internal static bit(36)                  initial dcl 15-41
unknown_statement                      internal static bit(9)                   initial dcl 22-3
unlock_file                            internal static bit(9)                   initial dcl 17-8
unlock_statement                       internal static bit(9)                   initial dcl 22-3
unpack                                 internal static bit(9)                   initial dcl 17-8
unsigned_mask                          internal static bit(36)                  initial dcl 15-3
validate                        000000 constant        entry                    external dcl 2-225
variable_mask                          internal static bit(36)                  initial dcl 15-3
varying_mask                           internal static bit(36)                  initial dcl 15-3
vclock_fun                             internal static bit(9)                   initial dcl 17-8
verify_fun                             internal static bit(9)                   initial dcl 17-8
verify_ltrim_fun                       internal static bit(9)                   initial dcl 17-8
verify_rev_fun                         internal static bit(9)                   initial dcl 17-8
verify_rtrim_fun                       internal static bit(9)                   initial dcl 17-8
wait_statement                         internal static bit(9)                   initial dcl 22-3
word_to_mod2                           internal static bit(9)                   initial dcl 17-8
word_to_mod4                           internal static bit(9)                   initial dcl 17-8
word_to_mod8                           internal static bit(9)                   initial dcl 17-8
wordno_fun                             internal static bit(9)                   initial dcl 17-8
words_per_condition_var                internal static fixed bin(31,0)          initial dcl 25-5
words_per_entry_var                    internal static fixed bin(31,0)          initial dcl 25-5
words_per_file_var                     internal static fixed bin(31,0)          initial dcl 25-5
words_per_fix_bin_1                    internal static fixed bin(31,0)          initial dcl 25-5
words_per_fix_bin_2                    internal static fixed bin(31,0)          initial dcl 25-5
words_per_flt_bin_1                    internal static fixed bin(31,0)          initial dcl 25-5
words_per_flt_bin_2                    internal static fixed bin(31,0)          initial dcl 25-5
words_per_format                       internal static fixed bin(31,0)          initial dcl 25-5
words_per_label_var                    internal static fixed bin(31,0)          initial dcl 25-5
words_per_offset                       internal static fixed bin(31,0)          initial dcl 25-5
words_per_packed_pointer               internal static fixed bin(31,0)          initial dcl 25-5
words_per_pointer                      internal static fixed bin(31,0)          initial dcl 25-5
words_per_varying_string_header        internal static fixed bin(31,0)          initial dcl 25-5
write_file                             internal static bit(9)                   initial dcl 17-8
write_statement                        internal static bit(9)                   initial dcl 22-3
x_format                               internal static bit(9)                   initial dcl 17-8

NAMES DECLARED BY EXPLICIT CONTEXT.
check_context                   000735 constant        label                    dcl 182 ref 127
check_refers                    001705 constant        entry                    internal dcl 343 ref 243 376
declare_expression              005537 constant        entry                    internal dcl 870 ref 171 198 893 922
expand_assign                   000074 constant        entry                    external dcl 31
fill                            002506 constant        entry                    internal dcl 452 ref 438 442
fill_desc                       002421 constant        entry                    internal dcl 431 ref 269 449
infix                           001313 constant        label                    dcl 253 ref 70 222 225 228 232 235 312
is_refer                        002123 constant        entry                    internal dcl 384 ref 356 356 365
make_check_stmnt                002230 constant        entry                    internal dcl 414 ref 360 362 365
make_copy                       003454 constant        entry                    internal dcl 535 ref 249 283
maker                           004052 constant        entry                    internal dcl 611 ref 174 186 203 806 808 880 946
process_offset                  001443 constant        entry                    internal dcl 288 ref 246 247
ret                             001334 constant        label                    dcl 258 ref 251 256
size                            006415 constant        entry                    internal dcl 991 ref 951 1026 1027 1034 1035 1041
                                                                                  1046 1060
step                            005117 constant        label                    dcl 786 ref 720 722
subtract_bounds                 002150 constant        entry                    internal dcl 400 ref 358 359
use_eb                          005506 constant        entry                    internal dcl 850 ref 735 741

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      7724       10014    7370        7734
Length     11014    7370        70         764     333           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
expand_assign                       272 external procedure  is an external procedure.  
process_offset                          internal procedure  shares stack frame of external procedure expand_assign.  
check_refers                        156 internal procedure  calls itself recursively.  
is_refer                                internal procedure  shares stack frame of internal procedure check_refers.  
subtract_bounds                         internal procedure  shares stack frame of internal procedure check_refers.  
make_check_stmnt                        internal procedure  shares stack frame of internal procedure check_refers.  
fill_desc                           136 internal procedure  calls itself recursively.  
fill                                    internal procedure  shares stack frame of internal procedure fill_desc.  
make_copy                               internal procedure  shares stack frame of external procedure expand_assign.  
maker                               134 internal procedure  calls itself recursively.  
use_eb                                  internal procedure  shares stack frame of internal procedure maker.  
declare_expression                  114 internal procedure  calls itself recursively.  
size                                110 internal procedure  calls itself recursively.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
check_refers             000100 anext                       check_refers
                         000102 bnext                       check_refers
                         000104 abound                      check_refers
                         000106 bbound                      check_refers
                         000110 p                           check_refers
                         000112 q                           check_refers
                         000114 own_bounds                  check_refers
                         000115 processed_bounds            check_refers
                         000132 r                           subtract_bounds
                         000142 r                           make_check_stmnt
declare_expression       000100 s                           declare_expression
                         000102 f                           declare_expression
                         000104 a                           declare_expression
                         000106 b                           declare_expression
                         000110 i                           declare_expression
expand_assign            000100 tree                        expand_assign
                         000102 a                           expand_assign
                         000104 b                           expand_assign
                         000106 s                           expand_assign
                         000110 sa                          expand_assign
                         000112 sb                          expand_assign
                         000114 t                           expand_assign
                         000116 p                           expand_assign
                         000120 q                           expand_assign
                         000122 qual                        expand_assign
                         000124 aqual                       expand_assign
                         000126 bqual                       expand_assign
                         000130 a_for_return                expand_assign
                         000132 sa_for_return               expand_assign
                         000134 image                       expand_assign
                         000136 k                           expand_assign
                         000137 constant                    expand_assign
                         000140 have_varying                expand_assign
                         000141 modified                    expand_assign
                         000142 cross_section               expand_assign
                         000143 doing_return                expand_assign
                         000144 no_data_type                expand_assign
                         000145 interleaved                 expand_assign
                         000146 this_context                expand_assign
                         000156 a                           process_offset
                         000160 sa                          process_offset
                         000162 p                           process_offset
                         000164 i                           process_offset
                         000212 sb                          make_copy
                         000214 p                           make_copy
                         000216 q                           make_copy
                         000220 ref                         make_copy
                         000222 arrayp                      make_copy
                         000224 opcode                      make_copy
fill_desc                000100 s                           fill_desc
                         000102 b                           fill_desc
                         000112 p                           fill
                         000114 r                           fill
                         000116 q                           fill
                         000120 dr                          fill
                         000122 size                        fill
                         000124 d_template                  fill
                         000126 i                           fill
maker                    000100 p                           maker
                         000102 q                           maker
                         000104 f                           maker
                         000106 a                           maker
                         000110 r                           maker
                         000112 t1                          maker
                         000114 e1                          maker
                         000116 s1                          maker
                         000120 eb                          maker
                         000122 subs                        maker
                         000124 n                           maker
                         000125 i                           maker
                         000126 sdims                       maker
                         000127 refer_extents               maker
                         000130 have_subs                   maker
                         000131 ignore_e_array              maker
size                     000100 s                           size
                         000102 q                           size
                         000104 opcode                      size

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_ne_as             call_ext_out_desc   call_ext_out        call_int_this       call_int_other      return_mac
ext_entry           int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
compare_declaration           convert                       convert$from_builtin          convert$to_integer
copy_expression               create_array                  create_bound                  create_operator
create_statement              create_symbol                 declare                       declare_constant$desc
declare_constant$integer      declare_temporary             expand_assign                 expand_infix
expression_semantics          refer_extent                  semantic_translator$abort     simplify_expression
simplify_offset               subscripter

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pl1_stat_$index               pl1_stat_$locator




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     31 000066        48 000101        52 000103        64 000107        65 000113        67 000116        68 000120
     70 000122        74 000140        76 000155        79 000171        81 000174        84 000215        87 000236
     88 000243        91 000253        96 000267        99 000313       106 000335       107 000341       108 000344
    110 000347       112 000352       114 000373       118 000412       122 000426       127 000436       130 000442
    140 000462       141 000467       144 000471       145 000476       148 000500       151 000527       152 000544
    153 000564       154 000567       155 000572       157 000574       160 000621       161 000625       167 000630
    168 000634       171 000636       174 000662       176 000705       178 000725       182 000735       184 000743
    185 000747       186 000752       187 000777       189 001000       194 001013       195 001016       198 001020
    202 001044       203 001051       207 001075       208 001077       210 001101       212 001121       214 001123
    215 001125       217 001130       218 001161       219 001162       222 001165       225 001175       228 001205
    232 001232       235 001242       238 001253       241 001266       242 001271       243 001274       246 001304
    247 001306       249 001310       251 001312       253 001313       256 001333       258 001334       260 001342
    261 001345       264 001351       265 001354       267 001357       268 001363       269 001364       277 001372
    279 001375       282 001400       283 001431       286 001437       288 001443       296 001445       303 001450
    307 001452       309 001461       311 001463       312 001475       315 001510       317 001512       318 001516
    319 001520       321 001537       324 001545       325 001547       326 001564       328 001606       329 001612
    330 001641       332 001661       335 001674       339 001703       343 001704       349 001712       350 001720
    351 001721       352 001726       354 001733       356 001741       358 001761       359 001763       360 001765
    361 001767       362 001770       365 002017       368 002055       369 002056       370 002061       373 002065
    375 002072       376 002102       377 002113       378 002116       380 002122       384 002123       389 002125
    394 002146       400 002150       405 002152       406 002167       407 002206       408 002225       414 002230
    419 002232       420 002265       421 002305       422 002320       423 002333       424 002341       425 002346
    426 002366       427 002417       431 002420       436 002426       438 002432       440 002434       441 002440
    442 002450       443 002452       444 002455       447 002461       448 002470       449 002472       450 002501
    531 002505       452 002506       460 002510       462 002513       463 002517       465 002526       466 002532
    467 002543       468 002564       469 002567       470 002575       473 002615       474 002626       476 002647
    478 002672       480 002673       481 002712       482 002737       484 002741       485 002742       487 002762
    489 002764       490 003001       491 003004       492 003031       494 003032       495 003047       497 003073
    498 003112       499 003116       500 003120       501 003122       502 003142       504 003175       505 003200
    507 003201       509 003222       512 003244       513 003245       514 003252       515 003253       516 003270
    517 003307       518 003313       519 003320       520 003333       522 003354       523 003400       525 003433
    526 003436       529 003453       535 003454       549 003456       551 003476       554 003477       556 003502
    558 003510       561 003512       563 003521       566 003523       570 003554       572 003557       574 003577
    577 003602       580 003623       582 003626       585 003645       586 003647       590 003711       591 003712
    592 003725       594 003747       596 003767       597 004002       600 004020       601 004035       602 004042
    603 004045       605 004047       611 004051       620 004057       621 004060       622 004062       624 004106
    625 004117       626 004126       628 004136       630 004144       632 004152       633 004160       638 004205
    640 004210       642 004221       643 004226       644 004230       646 004231       648 004232       651 004240
    652 004246       653 004250       655 004252       657 004256       659 004260       664 004303       666 004323
    668 004333       669 004334       672 004336       677 004366       679 004406       681 004416       682 004417
    685 004423       688 004436       689 004442       690 004444       691 004446       697 004463       698 004465
    699 004476       700 004510       703 004515       704 004526       706 004533       707 004535       708 004552
    710 004557       712 004566       715 004570       718 004577       719 004613       720 004615       722 004623
    725 004630       728 004631       729 004640       730 004644       732 004646       733 004650       735 004652
    741 004676       748 004723       749 004725       750 004737       751 004751       752 004754       753 004765
    754 004777       757 005002       758 005006       760 005024       761 005030       762 005033       763 005035
    764 005036       768 005043       769 005047       771 005065       772 005071       773 005074       774 005076
    775 005077       779 005104       781 005113       784 005116       786 005117       789 005122       791 005131
    793 005133       796 005141       797 005143       798 005150       800 005154       801 005160       804 005167
    805 005174       806 005214       807 005245       808 005246       811 005276       812 005301       813 005305
    815 005313       817 005315       818 005316       819 005321       820 005324       822 005325       823 005331
    824 005336       826 005354       827 005360       828 005365       832 005367       833 005374       834 005376
    836 005405       837 005413       840 005454       842 005472       843 005476       844 005503       866 005505
    850 005506       853 005507       854 005513       855 005517       856 005521       857 005523       858 005525
    860 005526       861 005532       864 005535       870 005536       876 005544       879 005554       880 005562
    881 005615       884 005621       887 005626       888 005634       889 005636       890 005656       892 005661
    893 005675       894 005723       895 005726       897 005730       899 005737       902 005740       903 005741
    905 005743       907 005752       910 005754       911 005756       912 005764       913 005771       914 005772
    915 005774       916 006000       918 006011       919 006014       922 006022       924 006041       925 006046
    926 006051       927 006063       929 006070       931 006102       933 006112       935 006114       938 006117
    940 006131       942 006141       945 006145       946 006151       948 006175       949 006206       950 006210
    951 006212       953 006226       954 006233       955 006237       957 006243       960 006245       961 006251
    963 006267       964 006273       965 006276       969 006300       970 006304       971 006307       973 006316
    974 006322       976 006361       978 006377       979 006403       980 006406       985 006410       991 006414
    997 006422      1000 006443      1001 006452      1002 006455      1004 006474      1007 006476      1010 006505
   1011 006520      1012 006522      1014 006544      1015 006565      1018 006571      1021 006610      1023 006616
   1024 006620      1025 006635      1026 006662      1027 006703      1028 006724      1031 006727      1032 006737
   1033 006754      1034 007001      1035 007022      1036 007043      1039 007046      1040 007050      1041 007065
   1042 007106      1043 007125      1046 007130      1048 007144      1051 007164      1054 007177      1055 007201
   1057 007207      1060 007220      1063 007237


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
