	COMPILATION LISTING OF SEGMENT copy_expression
	Compiled by: Multics PL/I Compiler, Release 32c, of June 16, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 07/31/89  1405.7 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 /* Modified 3 October 1980 by M. N. Davidoff to eliminate internal static for previous.  Fixes 2023.
       12**/
       13 /* format: style3 */
       14 copy_expression:
       15      procedure (a) returns (pointer);
       16 
       17 dcl	a		ptr unaligned;
       18 dcl	father		ptr;
       19 dcl	stepfather	ptr;
       20 
       21 /* automatic */
       22 
       23 dcl	i		fixed bin;
       24 dcl	inptr		ptr;
       25 dcl	nodetype		bit (9) aligned;
       26 dcl	outptr		ptr;
       27 dcl	p		ptr;
       28 
       29 /* builtin */
       30 
       31 dcl	null		builtin;
       32 
       33 /* external static */
       34 
       35 dcl	pl1_stat_$util_abort
       36 			external static entry (fixed bin (15), ptr) variable;
       37 
  1     1 /****^  *********************************************************
  1     2*        *                                                       *
  1     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  1     4*        *                                                       *
  1     5*        ********************************************************* */
  1     6 
  1     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  1     8 
  1     9 
  1    10 /****^  HISTORY COMMENTS:
  1    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  1    12*     install(89-07-31,MR12.3-1066):	
  1    13*     Removed the obsolete parameter source_line from the dcl of error_().
  1    14*                                                   END HISTORY COMMENTS */
  1    15 
  1    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  1    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  1    18* */
  1    19 
  1    20 declare	adjust_count	entry(pointer);
  1    21 			/* parameter 1:	(input)	any node pointer		*/
  1    22 
  1    23 declare	bindec		entry(fixed bin(31)) reducible
  1    24 			returns(character(12) aligned);
  1    25 			/* parameter 1:	(input)	bin value			*/
  1    26 			/* return:	(output)	character value with blanks	*/
  1    27 
  1    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  1    29 			returns(character(12) aligned varying);
  1    30 			/* parameter 1:	(input)	binary value		*/
  1    31 			/* return:	(output)	char value without blanks	*/
  1    32 
  1    33 declare	binoct		entry(fixed bin(31)) reducible
  1    34 			returns(char(12) aligned);
  1    35 			/* parameter 1:	(input)	binary value		*/
  1    36 			/* return:	(output)	char value with blanks	*/
  1    37 
  1    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  1    39 			returns(char(12) aligned);
  1    40 			/* parameter 1:	(input)	binary value		*/
  1    41 			/* return:	(output)	right-aligned char value	*/
  1    42 
  1    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  1    44 			returns(char(12) varying aligned);
  1    45 			/* parameter 1:	(input)	binary value		*/
  1    46 			/* returns:	(output)	char value without blanks	*/
  1    47 
  1    48 declare	compare_expression	entry(pointer,pointer) reducible
  1    49 			returns(bit(1) aligned);
  1    50 			/* parameter 1:	(input)	any node pointer		*/
  1    51 			/* parameter 2:	(input)	any node pointer		*/
  1    52 			/* return:	(output)	compare bit		*/
  1    53 
  1    54 declare	constant_length	entry (pointer, fixed bin (71))
  1    55 			returns (bit (1) aligned);
  1    56 			/* parameter 1:	(input)	reference node pointer	*/
  1    57 			/* parameter 2:	(input)	value of constant length	*/
  1    58 			/* return:	(output)	"1"b if constant length	*/
  1    59 
  1    60 declare	convert		entry(pointer,bit(36) aligned)
  1    61 			returns(pointer);
  1    62 			/* parameter 1:	(input)	any node pointer		*/
  1    63 			/* parameter 2:	(input)	target type		*/
  1    64 			/* return:	(output)	target value tree pointer	*/
  1    65 
  1    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  1    67 			returns(pointer);
  1    68 			/* parameter 1:	(input)	any node pointer		*/
  1    69 			/* parameter 2:	(input)	target type		*/
  1    70 			/* return:	(output)	target value tree pointer	*/
  1    71 
  1    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  1    73 			returns(pointer);
  1    74 			/* parameter 1:	(input)	any node pointer		*/
  1    75 			/* parameter 2:	(input)	target type		*/
  1    76 			/* return:	(output)	target value tree pointer	*/
  1    77 
  1    78 declare	convert$validate	entry(pointer,pointer);
  1    79 			/* parameter 1:	(input)	source value tree pointer	*/
  1    80 			/* parameter 2:	(input)	target reference node pointer	*/
  1    81 
  1    82 declare	convert$to_target_fb entry(pointer,pointer)
  1    83 			returns(pointer);
  1    84 			/* parameter 1:	(input)	source value tree pointer	*/
  1    85 			/* parameter 2:	(input)	target reference node pointer	*/
  1    86 			/* return:	(output)	target value tree pointer	*/
  1    87 
  1    88 declare	convert$to_target	entry(pointer,pointer)
  1    89 			returns(pointer);
  1    90 			/* parameter 1:	(input)	source value tree pointer	*/
  1    91 			/* parameter 2:	(input)	target reference node pointer	*/
  1    92 			/* return:	(output)	target value tree pointer	*/
  1    93 
  1    94 declare	copy_expression	entry(pointer unaligned)
  1    95 			returns(pointer);
  1    96 			/* parameter 1:	(input)	any node pointer		*/
  1    97 			/* return:	(output)	any node pointer		*/
  1    98 
  1    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  1   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  1   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  1   102 
  1   103 declare	copy_unique_expression entry(pointer)
  1   104 			returns(pointer);
  1   105 			/* parameter 1:	(input)	any node pointer		*/
  1   106 			/* return:	(output)	any node pointer		*/
  1   107 
  1   108 declare	create_array	entry()
  1   109 			returns(pointer);
  1   110 			/* return:	(output)	array node pointer		*/
  1   111 
  1   112 declare	create_block	entry(bit(9) aligned,pointer)
  1   113 			returns(pointer);
  1   114 			/* parameter 1:	(input)	block type		*/
  1   115 			/* parameter 2:	(input)	father block node pointer	*/
  1   116 			/* return:	(output)	block node pointer		*/
  1   117 
  1   118 declare	create_bound	entry()
  1   119 			returns(pointer);
  1   120 			/* return:	(output)	bound node pointer		*/
  1   121 
  1   122 declare	create_context	entry(pointer,pointer)
  1   123 			returns(pointer);
  1   124 			/* parameter 1:	(input)	block node pointer		*/
  1   125 			/* parameter 2:	(input)	token pointer		*/
  1   126 			/* return:	(output)	context node pointer	*/
  1   127 
  1   128 declare	create_cross_reference entry()
  1   129 			returns(pointer);
  1   130 			/* return:	(output)	cross reference node pointer	*/
  1   131 
  1   132 declare	create_default	entry
  1   133 			returns(pointer);
  1   134 			/* return:	(output)	default node pointer	*/
  1   135 
  1   136 declare	create_identifier	entry()
  1   137 			returns(pointer);
  1   138 			/* return:	(output)	token node pointer		*/
  1   139 
  1   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  1   141 			returns(pointer);
  1   142 			/* parameter 1:	(input)	block node pointer		*/
  1   143 			/* parameter 2:	(input)	token node pointer		*/
  1   144 			/* parameter 3:	(input)	declare type		*/
  1   145 			/* return:	(output)	label node pointer		*/
  1   146 
  1   147 declare	create_list	entry(fixed bin(15))
  1   148 			returns(pointer);
  1   149 			/* parameter 1:	(input)	number of list elements	*/
  1   150 			/* return:	(output)	list node pointer		*/
  1   151 
  1   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  1   153 			returns(pointer);
  1   154 			/* parameter 1:	(input)	operator type		*/
  1   155 			/* parameter 2:	(input)	number of operands		*/
  1   156 			/* return:	(output)	operator node pointer	*/
  1   157 
  1   158 declare	create_reference	entry(pointer)
  1   159 			returns(pointer);
  1   160 			/* parameter 1:	(input)	symbol node pointer		*/
  1   161 			/* return:	(output)	reference node pointer	*/
  1   162 
  1   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  1   164 			returns(pointer);
  1   165 			/* parameter 1:	(input)	statement type		*/
  1   166 			/* parameter 2:	(input)	block node pointer		*/
  1   167 			/* parameter 3:	(input)	label node pointer		*/
  1   168 			/* parameter 4:	(input)	conditions		*/
  1   169 			/* return:	(output)	statement node pointer	*/
  1   170 
  1   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  1   172 			returns(pointer);
  1   173 			/* parameter 1:	(input)	statement type		*/
  1   174 			/* parameter 2:	(input)	block node pointer		*/
  1   175 			/* parameter 3:	(input)	label node pointer		*/
  1   176 			/* parameter 4:	(input)	conditions		*/
  1   177 			/* return:	(output)	statement node pointer	*/
  1   178 
  1   179 declare	create_storage	entry(fixed bin(15))
  1   180 			returns(pointer);
  1   181 			/* parameter 1:	(input)	number of words		*/
  1   182 			/* return:	(output)	storage block pointer	*/
  1   183 
  1   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  1   185 			returns(pointer);
  1   186 			/* parameter 1:	(input)	block node pointer		*/
  1   187 			/* parameter 2:	(input)	token node pointer		*/
  1   188 			/* parameter 3:	(input)	declare type		*/
  1   189 			/* return:	(output)	symbol node pointer		*/
  1   190 
  1   191 declare	create_token	entry (character (*), bit (9) aligned)
  1   192 			returns (ptr);
  1   193 			/* parameter 1:	(input)	token string		*/
  1   194 			/* parameter 2:	(input)	token type		*/
  1   195 			/* return:	(output)	token node ptr		*/
  1   196 
  1   197 declare	create_token$init_hash_table entry ();
  1   198 
  1   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  1   200 			returns (ptr);
  1   201 			/* parameter 1:	(input)	token string		*/
  1   202 			/* parameter 2:	(input)	token type		*/
  1   203 			/* parameter 3:	(input)	protected flag		*/
  1   204 			/* return:	(output)	token node ptr		*/
  1   205 
  1   206 declare	decbin		entry(character(*) aligned) reducible
  1   207 			returns(fixed bin(31));
  1   208 			/* parameter 1:	(input)	decimal character string	*/
  1   209 			/* return:	(output)	binary value		*/
  1   210 
  1   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  1   212 			returns(pointer);
  1   213 			/* parameter 1:	(input)	value			*/
  1   214 			/* parameter 2:	(input)	type			*/
  1   215 			/* parameter 3:	(input)	size			*/
  1   216 			/* parameter 4:	(input)	scale			*/
  1   217 			/* return:	(output)	reference node pointer	*/
  1   218 
  1   219 declare	declare_constant$bit entry(bit(*) aligned)
  1   220 			returns(pointer);
  1   221 			/* parameter 1:	(input)	bit			*/
  1   222 			/* return:	(output)	reference node pointer	*/
  1   223 
  1   224 declare	declare_constant$char entry(character(*) aligned)
  1   225 			returns(pointer);
  1   226 			/* parameter 1:	(input)	character			*/
  1   227 			/* return:	(output)	reference node pointer	*/
  1   228 
  1   229 declare	declare_constant$desc entry(bit(*) aligned)
  1   230 			returns(pointer);
  1   231 			/* parameter 1:	(input)	descriptor bit value	*/
  1   232 			/* return:	(output)	reference node pointer	*/
  1   233 
  1   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  1   235 			returns(pointer);
  1   236 			/* parameter 1:	(input)	integer			*/
  1   237 			/* return:	(output)	reference node pointer	*/
  1   238 
  1   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  1   240 			returns(pointer);
  1   241 			/* parameter 1:	(input)	block node pointer		*/
  1   242 			/* parameter 2:	(input)	statement node pointer	*/
  1   243 			/* parameter 3:	(input)	symbol node pointer		*/
  1   244 			/* parameter 4:	(input)	loc pointer		*/
  1   245 			/* parameter 5:	(input)	array descriptor bit
  1   246*						cross_section bit	*/
  1   247 			/* return:	(output)	reference node pointer	*/
  1   248 
  1   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  1   250 			returns(pointer);
  1   251 			/* parameter 1:	(input)	block node pointer	*/
  1   252 			/* parameter 2:	(input)	statement node pointer 	*/
  1   253 			/* parameter 3:	(input)	symbol node pointer	*/
  1   254 			/* parameter 4:	(input)	loc pointer	*/
  1   255 			/* parameter 5:	(input)	array descriptor bit
  1   256*						cross_section bit	*/
  1   257 			/* return:	(output)	reference node pointer	*/
  1   258 
  1   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  1   260 			returns(pointer);
  1   261 			/* parameter 1:	(input)	block node pointer		*/
  1   262 			/* parameter 2:	(input)	statement node pointer	*/
  1   263 			/* parameter 3:	(input)	symbol node pointer		*/
  1   264 			/* parameter 4:	(input)	loc pointer		*/
  1   265 			/* parameter 5:	(input)	array descriptor bit
  1   266*						cross_section bit	*/
  1   267 			/* return:	(output)	reference node pointer	*/
  1   268 
  1   269 declare	declare_integer	entry(pointer)
  1   270 			returns(pointer);
  1   271 			/* parameter 1:	(input)	block node pointer		*/
  1   272 			/* return:	(output)	reference node pointer 	*/
  1   273 
  1   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  1   275 			/* parameter 1:	(input)	picture string		*/
  1   276 			/* parameter 2:	(input)	symbol node pointer		*/
  1   277 			/* parameter 3:	(output)	error code, if any		*/
  1   278 
  1   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  1   280 			returns(pointer);
  1   281 			/* parameter 1:	(input)	picture string		*/
  1   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  1   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  1   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  1   285 			/* return:	(output)	reference node pointer	*/
  1   286 
  1   287 declare	declare_pointer	entry(pointer)
  1   288 			returns(pointer);
  1   289 			/* parameter 1:	(input)	block node pointer		*/
  1   290 			/* return:	(output)	reference node pointer	*/
  1   291 
  1   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  1   293 			returns(pointer);
  1   294 			/* parameter 1:	(input)	type			*/
  1   295 			/* parameter 2:	(input)	precision			*/
  1   296 			/* parameter 3:	(input)	scale			*/
  1   297 			/* parameter 4:	(input)	length			*/
  1   298 			/* return:	(output)	reference node pointer	*/
  1   299 
  1   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  1   301 			returns(char(120) varying);
  1   302 			/* parameter 1:	(input)	node pointer		*/
  1   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  1   304 			/* return:	(output)	source line id		*/
  1   305 
  1   306 declare	decode_source_id	entry(
  2     1 			1 structure unaligned,
  2     2 			  2 /* file_number */	bit(8),
  2     3 			  2 /* line_number */	bit(14),
  2     4 			  2 /* stmt_number */	bit(5),
  1   307 
  1   308 			bit(1) aligned)
  1   309 			returns(char(120) varying);
  1   310 			/* parameter 1:	(input)	source id			*/
  1   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  1   312 			/* return:	(output)	source line id		*/
  1   313 
  1   314 declare	error		entry(fixed bin(15),pointer,pointer);
  1   315 			/* parameter 1:	(input)	error number		*/
  1   316 			/* parameter 2:	(input)	statement node pointer or null*/
  1   317 			/* parameter 3:	(input)	token node pointer 		*/
  1   318 
  1   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  1   320 			/* parameter 1:	(input)	error number		*/
  1   321 			/* parameter 2:	(input)	statement node pointer or null*/
  1   322 			/* parameter 3:	(input)	token node pointer 		*/
  1   323 
  1   324 declare	error_		entry(fixed bin(15),
  3     1 			1 structure unaligned,
  3     2 			  2 /* file_number */	bit(8),
  3     3 			  2 /* line_number */	bit(14),
  3     4 			  2 /* stmt_number */	bit(5),
  1   325 
  1   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  1   327 			/* parameter 1:	(input)	error number		*/
  1   328 			/* parameter 2:	(input)	statement id		*/
  1   329 			/* parameter 3:	(input)	any node pointer		*/
  1   330 			/* parameter 4:	(input)	source segment		*/
  1   331 			/* parameter 5:	(input)	source starting character	*/
  1   332 			/* parameter 6:	(input)	source length		*/
  1   333 
  1   334 declare	error_$no_text	entry(fixed bin(15),
  4     1 			1 structure unaligned,
  4     2 			  2 /* file_number */	bit(8),
  4     3 			  2 /* line_number */	bit(14),
  4     4 			  2 /* stmt_number */	bit(5),
  1   335 
  1   336 			pointer);
  1   337 			/* parameter 1:	(input)	error number		*/
  1   338 			/* parameter 2:	(input)	statement id		*/
  1   339 			/* parameter 3:	(input)	any node pointer		*/
  1   340 
  1   341 declare	error_$initialize_error entry();
  1   342 
  1   343 declare	error_$finish	entry();
  1   344 
  1   345 declare	free_node		entry(pointer);
  1   346 			/* parameter 1:	any node pointer			*/
  1   347 
  1   348 declare	get_array_size	entry(pointer,fixed bin(3));
  1   349 			/* parameter 1:	(input)	symbol node pointer		*/
  1   350 			/* parameter 2:	(input)	units			*/
  1   351 
  1   352 declare	get_size		entry(pointer);
  1   353 			/* parameter 1:	(input)	symbol node pointer		*/
  1   354 
  1   355 declare	merge_attributes	external entry(pointer,pointer)
  1   356 			returns(bit(1) aligned);
  1   357 			/* parameter 1:	(input)	target symbol node pointer */
  1   358 			/* parameter 2:	(input)	source symbol node pointer */
  1   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  1   360 
  1   361 declare	optimizer		entry(pointer);
  1   362 			/* parameter 1:	(input)	root pointer		*/
  1   363 
  1   364 declare	parse_error	entry(fixed bin(15),pointer);
  1   365 			/* parameter 1:	(input)	error number		*/
  1   366 			/* parameter 2:	(input)	any node pointer		*/
  1   367 
  1   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  1   369 			/* parameter 1:	(input)	error number		*/
  1   370 			/* parameter 2:	(input)	any node pointer		*/
  1   371 
  1   372 declare	pl1_error_print$write_out
  1   373 			entry(fixed bin(15),
  5     1 			1 structure unaligned,
  5     2 			  2 /* file_number */	bit(8),
  5     3 			  2 /* line_number */	bit(14),
  5     4 			  2 /* stmt_number */	bit(5),
  1   374 
  1   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  1   376 			/* parameter 1:	(input)	error number		*/
  1   377 			/* parameter 2:	(input)	statement identification	*/
  1   378 			/* parameter 3:	(input)	any node pointer		*/
  1   379 			/* parameter 4:	(input)	source segment		*/
  1   380 			/* parameter 5:	(input)	source character index	*/
  1   381 			/* parameter 6:	(input)	source length		*/
  1   382 			/* parameter 7:	(input)	source line		*/
  1   383 
  1   384 declare	pl1_error_print$listing_segment
  1   385 			entry(fixed bin(15),
  6     1 			1 structure unaligned,
  6     2 			  2 /* file_number */	bit(8),
  6     3 			  2 /* line_number */	bit(14),
  6     4 			  2 /* stmt_number */	bit(5),
  1   386 
  1   387 			pointer);
  1   388 			/* parameter 1:	(input)	error number		*/
  1   389 			/* parameter 2:	(input)	statement identification	*/
  1   390 			/* parameter 3:	(input)	token node pointer		*/
  1   391 
  1   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  1   393 			/* parameter 1:	(input)	string			*/
  1   394 
  1   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  1   396 			/* parameter 1:	(input)	string			*/
  1   397 
  1   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  1   399 			/* parameter 1:	(input)	string			*/
  1   400 			/* parameter 2:	(input)	string length or 0		*/
  1   401 
  1   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  1   403 			/* parameter 1:	(input)	string			*/
  1   404 			/* parameter 2:	(input)	string length or 0		*/
  1   405 
  1   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  1   407 			/* parameter 1:	(input)	string pointer		*/
  1   408 			/* parameter 2:	(input)	string size		*/
  1   409 
  1   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  1   411 			/* parameter 1:	(input)	string pointer		*/
  1   412 			/* parameter 2:	(input)	string length or 0		*/
  1   413 
  1   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  1   415 			/* parameter 1:	(input)	string			*/
  1   416 			/* parameter 2:	(input)	length			*/
  1   417 
  1   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  1   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  1   420 			/* parameter 2:	(input)	line number		*/
  1   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  1   422 			/* parameter 4:	(input)	number of chars to copy	*/
  1   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  1   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  1   425 
  1   426 declare	refer_extent	entry(pointer,pointer);
  1   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  1   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  1   429 
  1   430 declare	reserve$clear	entry()
  1   431 			returns(pointer);
  1   432 			/* return:	(output)	pointer			*/
  1   433 
  1   434 declare	reserve$declare_lib	entry(fixed bin(15))
  1   435 			returns(pointer);
  1   436 			/* parameter 1:	(input)	builtin function number	*/
  1   437 			/* return:	(output)	pointer			*/
  1   438 
  1   439 declare	reserve$read_lib	entry(fixed bin(15))
  1   440 			returns(pointer);
  1   441 			/* parameter 1:	(input)	builtin function number	*/
  1   442 			/* return:	(output)	pointer			*/
  1   443 
  1   444 declare	semantic_translator	entry();
  1   445 
  1   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  1   447 			/* parameter 1:	(input)	error number		*/
  1   448 			/* parameter 2:	(input)	any node pointer		*/
  1   449 
  1   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  1   451 			/* parameter 1:	(input)	error number		*/
  1   452 			/* parameter 2:	(input)	any node pointer		*/
  1   453 
  1   454 declare	share_expression	entry(ptr)
  1   455 			returns(ptr);
  1   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  1   457 			/* return:	(output)	tree pointer or null	*/
  1   458 
  1   459 declare	token_to_binary	entry(ptr) reducible
  1   460 			returns(fixed bin(31));
  1   461 			/* parameter 1:	(input)	token node pointer		*/
  1   462 			/* return:	(output)	converted binary value	*/
  1   463 
  1   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
       38 
  7     1 dcl	1 array			based aligned,
  7     2 	2 node_type		bit(9) unaligned,
  7     3 	2 reserved		bit(34) unaligned,
  7     4 	2 number_of_dimensions	fixed(7) unaligned,
  7     5 	2 own_number_of_dimensions	fixed(7) unaligned,
  7     6 	2 element_boundary		fixed(3) unaligned,
  7     7 	2 size_units		fixed(3) unaligned,
  7     8 	2 offset_units		fixed(3) unaligned,
  7     9 	2 interleaved		bit(1) unaligned,
  7    10 	2 c_element_size		fixed(24),
  7    11 	2 c_element_size_bits	fixed(24),
  7    12 	2 c_virtual_origin		fixed(24),
  7    13 	2 element_size		ptr unaligned,
  7    14 	2 element_size_bits		ptr unaligned,
  7    15 	2 virtual_origin		ptr unaligned,
  7    16 	2 symtab_virtual_origin	ptr unaligned,
  7    17 	2 symtab_element_size	ptr unaligned,
  7    18 	2 bounds			ptr unaligned,
  7    19 	2 element_descriptor	ptr unaligned;
  7    20 
  7    21 dcl	1 bound			based aligned,
  7    22 	2 node_type		bit(9),
  7    23 	2 c_lower			fixed(24),
  7    24 	2 c_upper			fixed(24),
  7    25 	2 c_multiplier		fixed(24),
  7    26 	2 c_desc_multiplier		fixed(24),
  7    27 	2 lower			ptr unaligned,
  7    28 	2 upper			ptr unaligned,
  7    29 	2 multiplier		ptr unaligned,
  7    30 	2 desc_multiplier		ptr unaligned,
  7    31 	2 symtab_lower		ptr unaligned,
  7    32 	2 symtab_upper		ptr unaligned,
  7    33 	2 symtab_multiplier		ptr unaligned,
  7    34 	2 next			ptr unaligned;
       39 
  8     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
  8     2 
  8     3 dcl	1 symbol			based aligned,
  8     4 	2 node_type		bit(9) unal,
  8     5 	2 source_id		structure unal,
  8     6 	  3 file_number		bit(8),
  8     7 	  3 line_number		bit(14),
  8     8 	  3 statement_number	bit(5),
  8     9 	2 location		fixed(18) unal unsigned,
  8    10 	2 allocated		bit(1) unal,
  8    11 	2 dcl_type		bit(3) unal,
  8    12 	2 reserved		bit(6) unal,
  8    13 	2 pix			unal,
  8    14 	  3 pic_fixed		bit(1) unal,
  8    15 	  3 pic_float		bit(1) unal,
  8    16 	  3 pic_char		bit(1) unal,
  8    17 	  3 pic_scale		fixed(7) unal,
  8    18 	  3 pic_size		fixed(7) unal,
  8    19 	2 level			fixed(8) unal,
  8    20 	2 boundary		fixed(3) unal,
  8    21 	2 size_units		fixed(3) unal,
  8    22 	2 scale			fixed(7) unal,
  8    23 	2 runtime			bit(18) unal,
  8    24 	2 runtime_offset		bit(18) unal,
  8    25 	2 block_node		ptr unal,
  8    26 	2 token			ptr unal,
  8    27 	2 next			ptr unal,
  8    28 	2 multi_use		ptr unal,
  8    29 	2 cross_references		ptr unal,
  8    30 	2 initial			ptr unal,
  8    31 	2 array			ptr unal,
  8    32 	2 descriptor		ptr unal,
  8    33 	2 equivalence		ptr unal,
  8    34 	2 reference		ptr unal,
  8    35 	2 general			ptr unal,
  8    36 	2 father			ptr unal,
  8    37 	2 brother			ptr unal,
  8    38 	2 son			ptr unal,
  8    39 	2 word_size		ptr unal,
  8    40 	2 bit_size		ptr unal,
  8    41 	2 dcl_size		ptr unal,
  8    42 	2 symtab_size		ptr unal,
  8    43 	2 c_word_size		fixed(24),
  8    44 	2 c_bit_size		fixed(24),
  8    45 	2 c_dcl_size		fixed(24),
  8    46 
  8    47 	2 attributes		structure aligned,
  8    48 	  3 data_type		structure unal,
  8    49 	    4 structure		bit(1) ,
  8    50 	    4 fixed		bit(1),
  8    51 	    4 float		bit(1),
  8    52 	    4 bit			bit(1),
  8    53 	    4 char		bit(1),
  8    54 	    4 ptr			bit(1),
  8    55 	    4 offset		bit(1),
  8    56 	    4 area		bit(1),
  8    57 	    4 label		bit(1),
  8    58 	    4 entry		bit(1),
  8    59 	    4 file		bit(1),
  8    60 	    4 arg_descriptor	bit(1),
  8    61 	    4 storage_block		bit(1),
  8    62 	    4 explicit_packed	bit(1), /* options(packed) */
  8    63 	    4 condition		bit(1),
  8    64 	    4 format		bit(1),
  8    65 	    4 builtin		bit(1),
  8    66 	    4 generic		bit(1),
  8    67 	    4 picture		bit(1),
  8    68 
  8    69 	  3 misc_attributes		structure unal,
  8    70 	    4 dimensioned		bit(1),
  8    71 	    4 initialed		bit(1),
  8    72 	    4 aligned		bit(1),
  8    73 	    4 unaligned		bit(1),
  8    74 	    4 signed		bit(1),
  8    75 	    4 unsigned		bit(1),
  8    76 	    4 precision		bit(1),
  8    77 	    4 varying		bit(1),
  8    78 	    4 local		bit(1),
  8    79 	    4 decimal		bit(1),
  8    80 	    4 binary		bit(1),
  8    81 	    4 real		bit(1),
  8    82 	    4 complex		bit(1),
  8    83 	    4 variable		bit(1),
  8    84 	    4 reducible		bit(1),
  8    85 	    4 irreducible		bit(1),
  8    86 	    4 returns		bit(1),
  8    87 	    4 position		bit(1),
  8    88 	    4 internal		bit(1),
  8    89 	    4 external		bit(1),
  8    90 	    4 like		bit(1),
  8    91 	    4 member		bit(1),
  8    92 	    4 non_varying		bit(1),
  8    93 	    4 options		bit(1),
  8    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
  8    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
  8    96 
  8    97 	  3 storage_class		structure unal,
  8    98 	    4 auto		bit(1),
  8    99 	    4 based		bit(1),
  8   100 	    4 static		bit(1),
  8   101 	    4 controlled		bit(1),
  8   102 	    4 defined		bit(1),
  8   103 	    4 parameter		bit(1),
  8   104 	    4 param_desc		bit(1),
  8   105 	    4 constant		bit(1),
  8   106 	    4 temporary		bit(1),
  8   107 	    4 return_value		bit(1),
  8   108 
  8   109 	  3 file_attributes		structure unal,
  8   110 	    4 print		bit(1),
  8   111 	    4 input		bit(1),
  8   112 	    4 output		bit(1),
  8   113 	    4 update		bit(1),
  8   114 	    4 stream		bit(1),
  8   115 	    4 reserved_1		bit(1),
  8   116 	    4 record		bit(1),
  8   117 	    4 sequential		bit(1),
  8   118 	    4 direct		bit(1),
  8   119 	    4 interactive		bit(1),		/* env(interactive) */
  8   120 	    4 reserved_2		bit(1),
  8   121 	    4 reserved_3		bit(1),
  8   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
  8   123 	    4 keyed		bit(1),
  8   124 	    4 reserved_4		bit(1),
  8   125 	    4 environment		bit(1),
  8   126 
  8   127 	  3 compiler_developed	structure unal,
  8   128 	    4 aliasable		bit(1),
  8   129 	    4 packed		bit(1),
  8   130 	    4 passed_as_arg		bit(1),
  8   131 	    4 allocate		bit(1),
  8   132 	    4 set			bit(1),
  8   133 	    4 exp_extents		bit(1),
  8   134 	    4 refer_extents		bit(1),
  8   135 	    4 star_extents		bit(1),
  8   136 	    4 isub		bit(1),
  8   137 	    4 put_in_symtab		bit(1),
  8   138 	    4 contiguous		bit(1),
  8   139 	    4 put_data		bit(1),
  8   140 	    4 overlayed		bit(1),
  8   141 	    4 error		bit(1),
  8   142 	    4 symtab_processed	bit(1),
  8   143 	    4 overlayed_by_builtin	bit(1),
  8   144 	    4 defaulted		bit(1),
  8   145 	    4 connected		bit(1);
  8   146 
  8   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
       40 
  9     1 /* BEGIN INCLUDE FILE ... declare_type.incl.pl1 */
  9     2 
  9     3 /* Modified: 25 Apr 1979 by PCK to implement 4-bit decimal */
  9     4 
  9     5 dcl  (	by_declare	initial("001"b),
  9     6 	by_explicit_context initial("010"b),
  9     7 	by_context	initial("011"b),
  9     8 	by_implication	initial("100"b),
  9     9 	by_compiler	initial("101"b)) int static bit(3) aligned options(constant);
  9    10 
  9    11 /* END INCLUDE FILE ... declare_type.incl.pl1 */
       41 
 10     1 /* BEGIN INCLUDE FILE ... list.incl.pl1 */
 10     2 
 10     3 /* Modified 26 June 81 by EBush to add max_list_elements */
 10     4 
 10     5 
 10     6 dcl	1 list		based aligned,
 10     7 	2 node_type	bit(9) unaligned,
 10     8 	2 reserved	bit(12) unaligned,
 10     9 	2 number		fixed(14) unaligned,
 10    10 	2 element		dimension(n refer(list.number)) ptr unaligned;
 10    11 
 10    12 dcl       max_list_elements   fixed bin(17) internal static options (constant)
 10    13 	                    init(16383);
 10    14 
 10    15 /* END INCLUDE FILE ... list.incl.pl1 */
       42 
 11     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
 11     2 
 11     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
 11     4 
 11     5 dcl (	block_node		initial("000000001"b),
 11     6 	statement_node		initial("000000010"b),
 11     7 	operator_node		initial("000000011"b),
 11     8 	reference_node		initial("000000100"b),
 11     9 	token_node		initial("000000101"b),
 11    10 	symbol_node		initial("000000110"b),
 11    11 	context_node		initial("000000111"b),
 11    12 	array_node		initial("000001000"b),
 11    13 	bound_node		initial("000001001"b),
 11    14 	format_value_node		initial("000001010"b),
 11    15 	list_node			initial("000001011"b),
 11    16 	default_node		initial("000001100"b),
 11    17 	machine_state_node		initial("000001101"b),
 11    18 	source_node		initial("000001110"b),
 11    19 	label_node		initial("000001111"b),
 11    20 	cross_reference_node	initial("000010000"b),
 11    21 	sf_par_node		initial("000010001"b),
 11    22 	temporary_node		initial("000010010"b),
 11    23 	label_array_element_node	initial("000010011"b),
 11    24 	by_name_agg_node		initial("000010100"b))
 11    25 				bit(9) internal static aligned options(constant);
 11    26 
 11    27 dcl	1 node			based aligned,
 11    28 	2 type			unal bit(9),
 11    29 	2 source_id		unal structure,
 11    30 	  3 file_number		bit(8),
 11    31 	  3 line_number		bit(14),
 11    32 	  3 statement_number	bit(5);
 11    33 
 11    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
       43 
 12     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
 12     2 
 12     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
 12     4 
 12     5 /* format: style3 */
 12     6 dcl	1 operator	based aligned,
 12     7 	  2 node_type	bit (9) unaligned,
 12     8 	  2 op_code	bit (9) unaligned,
 12     9 	  2 shared	bit (1) unaligned,
 12    10 	  2 processed	bit (1) unaligned,
 12    11 	  2 optimized	bit (1) unaligned,
 12    12 	  2 number	fixed (14) unaligned,
 12    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
 12    14 
 12    15 dcl	max_number_of_operands
 12    16 			fixed bin (15) int static options (constant) initial (32767);
 12    17 
 12    18 /* END INCLUDE FILE ... operator.incl.pl1 */
       44 
 13     1 /* BEGIN INCLUDE FILE ... op_codes.incl.pl1 */
 13     2 
 13     3 /* Modified: 25 Apr 1979 by PCK 4-bit decimal */
 13     4 /* Modified: 6 Jun 1979 by PG to add rank and byte */
 13     5 /* Modified: 26 Dec 1979 by PCK to add assign_by_name */
 13     6 /* Modified: 26 July 82 BIM wordno, segno */
 13     7 
 13     8 dcl (	add		initial("000010001"b),	/* opnd(1) <- opnd(2)+opnd(3)		*/
 13     9 	sub		initial("000010010"b),	/* opnd(1) <- opnd(2)-opnd(3)		*/
 13    10 	mult		initial("000010011"b),	/* opnd(1) <- opnd(2)*opnd(3)		*/
 13    11 	div		initial("000010100"b),	/* opnd(1) <- opnd(2)/opnd(3)		*/
 13    12 	negate		initial("000010101"b),	/* opnd(1) <- -opnd(2)  		*/
 13    13 	exp		initial("000010110"b),	/* opnd(1) <- opnd(2) ** opnd(3)	*/
 13    14 
 13    15 	and_bits		initial("000100001"b),	/* opnd(1) <- opnd(2) & opnd(3)	*/
 13    16 	or_bits		initial("000100010"b),	/* opnd(1) <- opnd(2)|opnd(3)		*/
 13    17 	xor_bits		initial("000100011"b),	/* opnd(1) <- opnd(2) xor opnd(3)	*/
 13    18 	not_bits		initial("000100100"b),	/* opnd(1) <- ^opnd(2)		*/
 13    19 	cat_string	initial("000100101"b),	/* opnd(1) <- opnd(2)||opnd(3)	*/
 13    20 	bool_fun		initial("000100110"b),	/* opnd(1) <- bool(opnd(2),opnd(3),opnd(4)) */
 13    21 
 13    22 	assign		initial("000110001"b),	/* opnd(1) <- opnd(2)		*/
 13    23 	assign_size_ck	initial("000110010"b),	/* opnd(1) <- opnd(2)		*/
 13    24 	assign_zero	initial("000110011"b),	/* opnd(1) <- 0			*/
 13    25 	copy_words	initial("000110100"b),	/* move opnd(2) to opnd(1) by opnd(3) words */
 13    26 	copy_string	initial("000110101"b),	/* move opnd(2) to opnd(1) by opnd(3) units */
 13    27 	make_desc		initial("000110110"b),	/* opnd(1) <- descriptor(opnd(2),opnd(3)) */
 13    28 	assign_round	initial("000110111"b),	/* opnd(1) <- opnd(2) rounded		*/
 13    29 	pack		initial("000111000"b),	/* opnd(1) <- encode to picture opnd(2) */
 13    30 	unpack		initial("000111001"b),	/* opnd(1) <- decode from picture opnd(2) */
 13    31 
 13    32 	less_than		initial("001000100"b),	/* opnd(1) <- opnd(2) < opnd(3)	*/
 13    33 	greater_than	initial("001000101"b),	/* opnd(1) <- opnd(2) > opnd(3)	*/
 13    34 	equal		initial("001000110"b),	/* opnd(1) <- opnd(2) = opnd(3)	*/
 13    35 	not_equal		initial("001000111"b),	/* opnd(1) <- opnd(2) ^= opnd(3)	*/
 13    36 	less_or_equal	initial("001001000"b),	/* opnd(1) <- opnd(2) <= opnd(3)	*/
 13    37 	greater_or_equal	initial("001001001"b),	/* opnd(1) <- opnd(2) >= opnd(3)	*/
 13    38 
 13    39 	jump		initial("001010001"b),	/* go to opnd(1) unconditionally	*/
 13    40 	jump_true		initial("001010010"b),	/* go to opnd(1) if opnd(2) is not 0	*/
 13    41 	jump_false	initial("001010011"b),	/* go to opnd(1) if opnd(2) is all 0	*/
 13    42 	jump_if_lt	initial("001010100"b),	/* go to opnd(1) if opnd(2) < opnd(3)	*/
 13    43 	jump_if_gt	initial("001010101"b),	/* go to opnd(1) if opnd(2) > opnd(3)	*/
 13    44 	jump_if_eq	initial("001010110"b),	/* go to opnd(1) if opnd(2) = opnd(3)	*/
 13    45 	jump_if_ne	initial("001010111"b),	/* go to opnd(1) if opnd(2) ^= opnd(3)	*/
 13    46 	jump_if_le	initial("001011000"b),	/* go to opnd(1) if opnd(2) <= opnd(3)	*/
 13    47 	jump_if_ge	initial("001011001"b),	/* go to opnd(1) if opnd(2) >= opnd(3)	*/
 13    48 
 13    49 	std_arg_list	initial("001100001"b),	/* opnd(1) <- arglist(opnd(2) desclist(opnd(3)))	*/
 13    50 	return_words	initial("001100010"b),	/* return aggregate opnd(1), opnd(2) is length in words */
 13    51 	std_call		initial("001100011"b),	/* opnd(1) <- call opnd(2) with opnd(3)		*/
 13    52 	return_bits	initial("001100100"b),	/* return aggregate opnd(1), opnd(2) is length in bits */
 13    53 	std_entry		initial("001100101"b),	/* entry(opnd(1)... opnd(n))			*/
 13    54 	return_string	initial("001100110"b),	/* return string opnd(1) */
 13    55 	ex_prologue	initial("001100111"b),	/* execute the prologue -no operands-		*/
 13    56 	allot_auto	initial("001101000"b),	/* opnd(1) <- addrel(stack,opnd(2))		*/
 13    57 	param_ptr		initial("001101001"b),	/* opnd(1) <- ptr to opnd(2) in  block opnd(3)	*/
 13    58 	param_desc_ptr	initial("001101010"b),	/* opnd(1) <- ptr to opnd(2) in block opnd(3)	*/
 13    59 	std_return	initial("001101011"b),	/* return -no arguments-			*/
 13    60 	allot_ctl		initial("001101100"b),	/* allocate opnd(1) , length in words is opnd(2) 	*/
 13    61 	free_ctl		initial("001101101"b),	/* free opnd(1)				*/
 13    62 	stop		initial("001101110"b),	/* stop - terminate run unit			*/
 13    63 
 13    64 	mod_bit		initial("001110000"b),	/* opnd(1) <- mod(opnd(3),36),
 13    65*						   opnd(2) <- opnd(3) / 36		*/
 13    66 	mod_byte		initial("001110001"b),	/* opnd(1) <- mod(opnd(3),4),
 13    67*						   opnd(2) <- opnd(3) / 4		*/
 13    68 	mod_half		initial("001110010"b),	/* opnd(1) <- mod(opnd(3),2),
 13    69*						   opnd(2) <- opnd(3) / 2		*/
 13    70 	mod_word		initial("001110011"b),	/* TO BE DEFINED BY BLW			*/
 13    71 
 13    72 	bit_to_char	initial("010000000"b),	/* opnd(1) <- (opnd(2)+8)/9		*/
 13    73 	bit_to_word	initial("010000001"b),	/* opnd(1) <- (opnd(2)+35)/36		*/
 13    74 	char_to_word	initial("010000010"b),	/* opnd(1) <- (opnd(2)+3)/4		*/
 13    75 	half_to_word	initial("010000011"b),	/* opnd(1) <- (opnd(2)+1)/2		*/
 13    76 	word_to_mod2	initial("010000100"b),	/* opnd(1) <- (opnd(2)+1)/2*2		*/
 13    77 	word_to_mod4	initial("010000101"b),	/* opnd(1) <- (opnd(2)+3)/4*4		*/
 13    78 	word_to_mod8	initial("010000110"b),	/* opnd(1) <- (opnd(2)+7)/8*8		*/
 13    79 	rel_fun		initial("010000111"b),	/* opnd(1) <- rel(opnd(2))		*/
 13    80 	baseno_fun	initial("010001000"b),	/* opnd(1) <- baseno(opnd(2))		*/
 13    81 	desc_size		initial("010001001"b),	/* opnd(1) <- substr(opnd(2),13,24)	*/
 13    82 	bit_pointer	initial("010001010"b),	/* opnd(1) <- bit offset of opnd(2)	*/
 13    83 	index_before_fun	initial("010001011"b),	/* opnd(1) <- length of before(opnd(2),opnd(3)) */
 13    84 	index_after_fun	initial("010001100"b),	/* opnd(1) <- offset of after(opnd(2),opnd(3)) in opnd(2) */
 13    85 	verify_ltrim_fun	initial("010001101"b),	/* opnd(1) <- offset of ltrim(opnd(2),opnd(3)) in opnd(2) */
 13    86 	verify_rtrim_fun	initial("010001110"b),	/* opnd(1) <- length(opnd(2))-length(rtrim(opnd(2),opnd(3))) */
 13    87 	digit_to_bit	initial("010001111"b),	/* opnd(1) <- 9*opnd(2)/2		*/
 13    88 
 13    89 	ceil_fun		initial("010010000"b),	/* opnd(1) <- ceil(opnd(2))		*/
 13    90 	floor_fun		initial("010010001"b),	/* opnd(1) <- floor(opnd(2))		*/
 13    91 	round_fun		initial("010010010"b),	/* opnd(1) <- round(opnd(2))		*/
 13    92 	sign_fun		initial("010010011"b),	/* opnd(1) <- sign(opnd(2))		*/
 13    93 	abs_fun		initial("010010100"b),	/* opnd(1) <- abs(opnd(2))		*/
 13    94 	trunc_fun		initial("010010101"b),	/* opnd(1) <- trunc(opnd(2))		*/
 13    95 	byte_fun		initial("010010110"b),	/* opnd(1) <- byte(opnd(2))		*/
 13    96 	rank_fun		initial("010010111"b),	/* opnd(1) <- rank(opnd(2))		*/
 13    97 	index_rev_fun	initial("010011000"b),	/* opnd(1) <- index(reverse(opnd(2)),reverse(opnd(3))) */
 13    98 	search_rev_fun	initial("010011001"b),	/* opnd(1) <- search(reverse(opnd(2)),opnd(3)) */
 13    99 	verify_rev_fun	initial("010011010"b),	/* opnd(1) <- verify(reverse(opnd(2)),opnd(3)) */
 13   100 	wordno_fun	initial("010011011"b),        /* opnd(1) <- wordno (opnd(2)) */
 13   101 	segno_fun		initial("010011100"b),        /* opnd(1) <- segno (opnd(2)) */
 13   102 	bitno_fun           initial("010011101"b),        /* opnd(1) <- bitno (opnd(2)) */
 13   103 	charno_fun	initial("010011110"b),        /* opnd(1) <- charno (opnd(2)) */
 13   104 
 13   105 	index_fun		initial("010100000"b),	/* opnd(1) <- index(opnd(2),opnd(3))	*/
 13   106 	off_fun		initial("010100001"b),	/* opnd(1) <- offset(opnd(2),opnd(3))	*/
 13   107 	complex_fun	initial("010100010"b),	/* opnd(1) <- complex(opnd(2),opnd(3))	*/
 13   108 	conjg_fun		initial("010100011"b),	/* opnd(1) <- conjg(opnd(2),opnd(3))	*/
 13   109 	mod_fun		initial("010100100"b),	/* opnd(1) <- mod(opnd(2),opnd(3))	*/
 13   110 	repeat_fun	initial("010100101"b),	/* opnd(1) <- repeat(opnd(2),opnd(3))	*/
 13   111 	verify_fun	initial("010100110"b),	/* opnd(1) <- verify(opnd(2),opnd(3))	*/
 13   112 	translate_fun	initial("010100111"b),	/* opnd(1) <- translate(opnd(2),opnd(3))*/
 13   113 	real_fun   	initial("010101001"b),	/* opnd(1) <- real(opnd(2))		*/
 13   114 	imag_fun   	initial("010101010"b),	/* opnd(1) <- imag(opnd(2))		*/
 13   115 	length_fun	initial("010101011"b),	/* opnd(1) <- length(opnd(2))	*/
 13   116 	pl1_mod_fun	initial("010101100"b),	/* opnd(1) <- mod(opnd(2)) */
 13   117 	search_fun	initial("010101101"b),	/* opnd(1) <- search(opnd(2),opnd(3)) */
 13   118 	allocation_fun	initial("010101110"b),	/* opnd(1) <- allocation(opnd(2)) */
 13   119 	reverse_fun	initial("010101111"b),	/* opnd(1) <- reverse(opnd(2)) */
 13   120 
 13   121 	addr_fun		initial("010110000"b),	/* opnd(1) <- addr(opnd(2))		*/
 13   122 	addr_fun_bits	initial("010110001"b),	/* opnd(1) <- addr(opnd(2))		*/
 13   123 	ptr_fun		initial("010110010"b),	/* opnd(1) <- ptr(opnd(2),opnd(3))	*/
 13   124 	baseptr_fun	initial("010110011"b),	/* opnd(1) <- baseptr(opnd(2))	*/
 13   125 	addrel_fun	initial("010110100"b),	/* opnd(1) <- addrel(opnd(2),opnd(3))	*/
 13   126 	codeptr_fun	initial("010110101"b),	/* opnd(1) <- codeptr(opnd(2))	*/
 13   127 	environmentptr_fun	initial("010110110"b),	/* opnd(1) <- environmentptr(opnd(2))	*/
 13   128 	stackbaseptr_fun	initial("010110111"b),	/* opnd(1) is ptr to base of current stack	*/
 13   129 	stackframeptr_fun	initial("010111000"b),	/* opnd(1) is ptr to current block's stack frame	*/
 13   130 	setcharno_fun	initial("010111001"b),	/* opnd(1) <- opnd(2) with charno opnd(3) */
 13   131 	addcharno_fun	initial("010111010"b),	/* opnd(1) <- opnd(2) with charno = charno + opnd(3) */
 13   132 	setbitno_fun	initial("010111011"b),	/* setcharno for bitsno */
 13   133 	addbitno_fun	initial("010111100"b),	/* addcharno for bitno */
 13   134 
 13   135 	min_fun		initial("011000000"b),	/* opnd(1) <- min(opnd(1),opnd(2),...)	*/
 13   136 	max_fun		initial("011000001"b),	/* opnd(1) <- max(opnd(1),opnd(2),...)	*/
 13   137 
 13   138 	stack_ptr		initial("011010001"b),	/* opnd(1) <- stack frame ptr		*/
 13   139 	empty_area	initial("011010010"b),	/* empty opnd(1), length in words is opnd(2) */
 13   140 	enable_on		initial("011010100"b),	/* opnd(1) is the cond name
 13   141*						   opnd(2) is the file name
 13   142*						   opnd(3) is the block	*/
 13   143 	revert_on		initial("011010101"b),	/* opnd(1) is the cond name,
 13   144*						   opnd(2) is the file name	*/
 13   145 	signal_on		initial("011010110"b),	/* opnd(1) is the cond name
 13   146*						   opnd(2) is the file name */
 13   147 
 13   148 	lock_fun		initial("011010111"b),	/* opnd(1) <- stac(opnd(2),opnd(3))	*/
 13   149 	stacq_fun		initial("011011000"b),	/* opnd(1) is result, opnd(2) is ptr to lock word,
 13   150*						   opnd(3) is old value, (4) is new value. */
 13   151 	clock_fun		initial("011011001"b),	/* opnd(1) is the clock time		*/
 13   152 	vclock_fun	initial("011011010"b),	/* opnd(1) is the virtual clock time	*/
 13   153 
 13   154 	bound_ck		initial("011100000"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 13   155 	range_ck		initial("011100001"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 13   156 	loop		initial("011100010"b),	/* do opnd(1) for opnd(2) from opnd(3) to opnd(4) by 1,
 13   157*						   opnd(5) is the list */
 13   158 	join		initial("011100011"b),	/* do opnd(1), opnd(2) ... opnd(n)	*/
 13   159 	allot_based	initial("011100100"b),	/* allocate opnd(2) words in opnd(3), set opnd(1) */
 13   160 	free_based	initial("011100101"b),	/* free opnd(1) in opnd(3), length is opnd(2) words */
 13   161 
 13   162 	r_parn		initial("011110001"b),	/* format op code			*/
 13   163 	l_parn		initial("011110010"b),
 13   164 	r_format		initial("011110011"b),
 13   165 	c_format		initial("011110100"b),
 13   166 	f_format		initial("011110101"b),
 13   167 	e_format		initial("011110110"b),
 13   168 	b_format		initial("011110111"b),
 13   169 	a_format		initial("011111000"b),
 13   170 	x_format		initial("011111001"b),
 13   171 	skip_format	initial("011111010"b),
 13   172 	column_format	initial("011111011"b),
 13   173 	page_format	initial("011111100"b),
 13   174 	line_format	initial("011111101"b),
 13   175 	picture_format	initial("011111110"b),
 13   176 	bn_format		initial("011111111"b),	/* bit format, length(opnd(2)), radix factor(opnd(3)) */
 13   177 
 13   178 	get_list_trans	initial("100000000"b),	/* getlist(opnd(2) with desc(opnd(1)))	*/
 13   179 	get_edit_trans	initial("100000001"b),	/* getedit(opnd(2) with desc(opnd(1)))	*/
 13   180 	get_data_trans	initial("100000010"b),	/* getdata(opnd(1) to opnd(n))	*/
 13   181 	put_list_trans	initial("100000011"b),	/* putlist(opnd(2) with desc(opnd(1)))	*/
 13   182 	put_edit_trans	initial("100000100"b),	/* putedit(opnd(2) with desc(opnd(1)))	*/
 13   183 	put_data_trans	initial("100000101"b),	/* putdata(opnd(2)) with subscript-list opnd(1) */
 13   184 	terminate_trans	initial("100000110"b),	/* terminate stream transmission	*/
 13   185 	stream_prep	initial("100000111"b),	/* initiate stream transmission	*/
 13   186 	record_io		initial("100001000"b),	/* perform record io operation	*/
 13   187 	fortran_read	initial("100001001"b),	/* A complete read statement		*/
 13   188 	fortran_write	initial("100001010"b),	/* A complete write statement		*/
 13   189 	ftn_file_manip	initial("100001011"b),	/* endfile,backspace,rewind,etc.	*/
 13   190 	ftn_trans_loop	initial("100001100"b),	/* An implied do in i/o list		*/
 13   191 	put_control	initial("100001101"b),	/* put control opnd(1) opnd(2) times	*/
 13   192 	put_field		initial("100001110"b),	/* putlist(opnd(2)) of length(opnd(1))	*/
 13   193 	put_field_chk	initial("100001111"b),	/* putlist(op(2)) of len(op(1)) check char index(op(3)) */
 13   194 
 13   195 /* These operators are produced by the parse but are not used as input to the code generator.	*/
 13   196 /* They are processed by the semantic translator.						*/
 13   197 
 13   198 	return_value	initial("100010010"b),	/* return(opnd(1))			*/
 13   199 	allot_var		initial("100010011"b),	/* allot opnd(1) in opnd(2)		*/
 13   200 	free_var		initial("100010100"b),	/* free opnd(1) out of opnd(2)	*/
 13   201 	get_file		initial("100010101"b),	/* opnd(1) is filename,opnd(2) is copy	*/
 13   202 						/* opnd(3) is skip, opnd(4) is list	*/
 13   203 	get_string	initial("100010110"b),	/* opnd(1) is string,opnd(2) is list	*/
 13   204 	put_file		initial("100010111"b),	/* opnd(1) is filename,opnd(2) is page	*/
 13   205 						/* opnd(3) is skip,opnd(4) is line	*/
 13   206 	put_string	initial("100011000"b),	/* opnd(1) is string,opnd(2) is list	*/
 13   207 	open_file		initial("100011001"b),
 13   208 	close_file	initial("100011010"b),
 13   209 	read_file		initial("100011011"b),
 13   210 	write_file	initial("100011100"b),
 13   211 	locate_file	initial("100011101"b),
 13   212 	do_fun		initial("100011110"b),	/* opnd(1) is join of a list		*/
 13   213 						/* opnd(2) is control variable ref	*/
 13   214 						/* opnd(3) is specification operator	*/
 13   215 	do_spec		initial("100011111"b),	/* opnd(1) to opnd(2) by opnd(3) 	*/
 13   216 						/* repeat opnd(4) while opnd(5)	*/
 13   217 						/* opnd(6) is next specification	*/
 13   218 
 13   219 	rewrite_file	initial("100100000"b),
 13   220 	delete_file	initial("100100001"b),
 13   221 	unlock_file	initial("100100010"b),
 13   222 	lock_file		initial("100100011"b),
 13   223 	refer		initial("100100101"b),	/* opnd(1) refer(opnd(2))		*/
 13   224 	prefix_plus	initial("100100110"b),	/* opnd(1) <- +opnd(2)		*/
 13   225 	nop		initial("100100111"b),	/* no-op */
 13   226 	assign_by_name	initial("100101000"b),	/* opnd(1) <- opnd(2),by name		*/
 13   227 
 13   228 /* These operators are produced by the semantic translator in processing the math
 13   229*   builtin functions and are used as input to the code generator			*/
 13   230 
 13   231 	sqrt_fun		initial("100110000"b),	/* opnd(1) <- sqrt(opnd(2))	*/
 13   232 	sin_fun		initial("100110001"b),	/* opnd(1) <- sin(opnd(2))	*/
 13   233 	sind_fun		initial("100110010"b),	/* opnd(1) <- sind(opnd(2))	*/
 13   234 	cos_fun		initial("100110011"b),	/* opnd(1) <- cos(opnd(2))	*/
 13   235 	cosd_fun		initial("100110100"b),	/* opnd(1) <- cosd(opnd(2))	*/
 13   236 	tan_fun		initial("100110101"b),	/* opnd(1) <- tan(opnd(2))	*/
 13   237 	tand_fun		initial("100110110"b),	/* opnd(1) <- tand(opnd(2))	*/
 13   238 	asin_fun		initial("100110111"b),	/* opnd(1) <- asin(opnd(2))	*/
 13   239 	asind_fun		initial("100111000"b),	/* opnd(1) <- asind(opnd(2))	*/
 13   240 	acos_fun		initial("100111001"b),	/* opnd(1) <- acos(opnd(2))	*/
 13   241 	acosd_fun		initial("100111010"b),	/* opnd(1) <- acosd(opnd(2))	*/
 13   242 	atan_fun		initial("100111011"b),	/* opnd(1) <- atan(opnd(2)[,opnd(3)])	*/
 13   243 	atand_fun		initial("100111100"b),	/* opnd(1) <- atand(opnd(2)[,opnd(3)])	*/
 13   244 	log2_fun		initial("100111101"b),	/* opnd(1) <- log2(opnd(2))	*/
 13   245 	log_fun		initial("100111110"b),	/* opnd(1) <- log(opnd(2))	*/
 13   246 	log10_fun		initial("100111111"b),	/* opnd(1) <- log10(opnd(2))	*/
 13   247 
 13   248 	exp_fun		initial("101000000"b))	/* opnd(1) <- exp(opnd(2))	*/
 13   249 
 13   250 			bit(9) aligned internal static options(constant);
 13   251 
 13   252 /* END INCLUDE FILE ... op_codes.incl.pl1 */
       45 
 14     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
 14     2 
 14     3 dcl	1 reference		based aligned,
 14     4 	2 node_type		bit(9) unaligned,
 14     5 	2 array_ref		bit(1) unaligned,
 14     6 	2 varying_ref		bit(1) unaligned,
 14     7 	2 shared			bit(1) unaligned,
 14     8 	2 put_data_sw		bit(1) unaligned,
 14     9 	2 processed		bit(1) unaligned,
 14    10 	2 units			fixed(3) unaligned,
 14    11 	2 ref_count		fixed(17) unaligned,
 14    12 	2 c_offset		fixed(24),
 14    13 	2 c_length		fixed(24),
 14    14 	2 symbol			ptr unaligned,
 14    15 	2 qualifier		ptr unaligned,
 14    16 	2 offset			ptr unaligned,
 14    17 	2 length			ptr unaligned,
 14    18 	2 subscript_list		ptr unaligned,
 14    19 						/* these fields are used by the 645 code generator */
 14    20 	2 address			structure unaligned,
 14    21 	  3 base			bit(3),
 14    22 	  3 offset		bit(15),
 14    23 	  3 op			bit(9),
 14    24 	  3 no_address		bit(1),
 14    25 	  3 inhibit		bit(1),
 14    26 	  3 ext_base		bit(1),
 14    27 	  3 tag			bit(6),
 14    28 	2 info			structure unaligned,
 14    29 	  3 address_in		structure,
 14    30 	    4 b			dimension(0:7) bit(1),
 14    31 	    4 storage		bit(1),
 14    32 	  3 value_in		structure,
 14    33 	    4 a			bit(1),
 14    34 	    4 q			bit(1),
 14    35 	    4 aq			bit(1),
 14    36 	    4 string_aq		bit(1),
 14    37 	    4 complex_aq		bit(1),
 14    38 	    4 decimal_aq		bit(1),
 14    39 	    4 b			dimension(0:7) bit(1),
 14    40 	    4 storage		bit(1),
 14    41 	    4 indicators		bit(1),
 14    42 	    4 x			dimension(0:7) bit(1),
 14    43 	  3 other			structure,
 14    44 	    4 big_offset		bit(1),
 14    45 	    4 big_length		bit(1),
 14    46 	    4 modword_in_offset	bit(1),
 14    47 	2 data_type		fixed(5) unaligned,
 14    48 	2 bits			structure unaligned,
 14    49 	  3 padded_ref		bit(1),
 14    50 	  3 aligned_ref		bit(1),
 14    51 	  3 long_ref		bit(1),
 14    52 	  3 forward_ref		bit(1),
 14    53 	  3 ic_ref		bit(1),
 14    54 	  3 temp_ref		bit(1),
 14    55 	  3 defined_ref		bit(1),
 14    56 	  3 evaluated		bit(1),
 14    57 	  3 allocate		bit(1),
 14    58 	  3 allocated		bit(1),
 14    59 	  3 aliasable		bit(1),
 14    60 	  3 even			bit(1),
 14    61 	  3 perm_address		bit(1),
 14    62 	  3 aggregate		bit(1),
 14    63 	  3 hit_zero		bit(1),
 14    64 	  3 dont_save		bit(1),
 14    65 	  3 fo_in_qual		bit(1),
 14    66 	  3 hard_to_load		bit(1),
 14    67 	2 relocation		bit(12) unaligned,
 14    68 	2 more_bits		structure unaligned,
 14    69 	  3 substr		bit(1),
 14    70 	  3 padded_for_store_ref	bit(1),
 14    71 	  3 aligned_for_store_ref	bit(1),
 14    72 	  3 mbz			bit(15),
 14    73 	2 store_ins		bit(18) unaligned;
 14    74 
 14    75 /* END INCLUDE FILE ... reference.incl.pl1 */
       46 
       47 
       48 /* program */
       49 
       50 	inptr = a;
       51 
       52 	if inptr = null
       53 	then return (inptr);
       54 
       55 	nodetype = inptr -> node.type;
       56 
       57 	if nodetype = operator_node
       58 	then do;
       59 		if inptr -> operator.number = 0
       60 		then return (inptr);
       61 
       62 		if inptr -> operator.operand (1) ^= null
       63 		then if inptr -> operator.operand (1) -> node.type = reference_node
       64 		     then if ^inptr -> operator.operand (1) -> reference.shared
       65 			then do;
       66 				inptr -> operator.operand (1) -> reference.ref_count =
       67 				     inptr -> operator.operand (1) -> reference.ref_count + 1;
       68 				return (inptr);
       69 			     end;
       70 
       71 		outptr = create_operator ((inptr -> operator.op_code), (inptr -> operator.number));
       72 
       73 		do i = 1 to inptr -> operator.number;
       74 		     if inptr -> operator.operand (i) ^= null
       75 		     then outptr -> operator.operand (i) = copy_expression (inptr -> operator.operand (i));
       76 		end;
       77 
       78 		outptr -> operator.processed = inptr -> operator.processed;
       79 
       80 		if outptr -> operator.op_code = std_call
       81 		then if outptr -> operator.operand (1) ^= null
       82 		     then do;
       83 			     p = outptr -> operator.operand (3) -> operator.operand (2);
       84 			     outptr -> operator.operand (1) = p -> list.element (p -> list.number);
       85 			end;
       86 
       87 		return (outptr);
       88 	     end;
       89 
       90 	else if nodetype = list_node
       91 	then do;
       92 		outptr = create_list ((inptr -> list.number));
       93 
       94 		do i = 1 to inptr -> list.number;
       95 		     outptr -> list.element (i) = copy_expression (inptr -> list.element (i));
       96 		end;
       97 
       98 		return (outptr);
       99 	     end;
      100 
      101 	else if nodetype = reference_node
      102 	then do;
      103 		if inptr -> reference.symbol ^= null
      104 		then do;
      105 			p = inptr -> reference.symbol;
      106 			if p -> node.type = symbol_node
      107 			then if p -> symbol.constant & ^p -> symbol.file & ^p -> symbol.entry & ^p -> symbol.format
      108 			     then return (inptr);
      109 		     end;
      110 
      111 		if ^inptr -> reference.shared
      112 		then do;
      113 			inptr -> reference.ref_count = inptr -> reference.ref_count + 1;
      114 			return (inptr);
      115 		     end;
      116 
      117 		outptr = create_reference ((inptr -> reference.symbol));
      118 
      119 		outptr -> reference = inptr -> reference;
      120 
      121 		if outptr -> reference.offset ^= null
      122 		then outptr -> reference.offset = copy_expression (inptr -> reference.offset);
      123 
      124 		if outptr -> reference.length ^= null
      125 		then outptr -> reference.length = copy_expression (inptr -> reference.length);
      126 
      127 		if outptr -> reference.qualifier ^= null
      128 		then outptr -> reference.qualifier = copy_expression (inptr -> reference.qualifier);
      129 
      130 		return (outptr);
      131 	     end;
      132 
      133 	else if nodetype = token_node | nodetype = label_node | nodetype = sf_par_node | nodetype = block_node
      134 	then return (inptr);
      135 
      136 	else if nodetype = array_node
      137 	then do;
      138 		outptr = create_array ();
      139 		outptr -> array = inptr -> array;
      140 		outptr -> array.element_size = copy_expression (inptr -> array.element_size);
      141 		outptr -> array.element_size_bits = copy_expression (inptr -> array.element_size_bits);
      142 		outptr -> array.virtual_origin = copy_expression (inptr -> array.virtual_origin);
      143 		outptr -> array.bounds = copy_expression (inptr -> array.bounds);
      144 		outptr -> array.element_descriptor = copy_expression (inptr -> array.element_descriptor);
      145 
      146 		return (outptr);
      147 	     end;
      148 
      149 	else if nodetype = bound_node
      150 	then do;
      151 		outptr = create_bound ();
      152 		outptr -> bound = inptr -> bound;
      153 		outptr -> bound.next = copy_expression (inptr -> bound.next);
      154 		outptr -> bound.lower = copy_expression (inptr -> bound.lower);
      155 		outptr -> bound.upper = copy_expression (inptr -> bound.upper);
      156 		outptr -> bound.desc_multiplier = copy_expression (inptr -> bound.desc_multiplier);
      157 		outptr -> bound.multiplier = copy_expression (inptr -> bound.multiplier);
      158 
      159 		return (outptr);
      160 	     end;
      161 
      162 	else if nodetype = symbol_node
      163 	then return (copy_symbol (inptr, null));
      164 
      165 	call pl1_stat_$util_abort (32, inptr);
      166 
      167 	return (inptr);
      168 
      169 /* Copy the sons of a symbol node.
      170*
      171*   The caller is responsible for threading the new symbol.next chain onto an
      172*   existing symbol.next chain for a block. */
      173 
      174 copy_sons:
      175      entry (father, stepfather);
      176 
      177 	stepfather -> symbol.son = null;
      178 
      179 	if father -> symbol.son = null
      180 	then return;
      181 
      182 	stepfather -> symbol.son = copy_symbol ((father -> symbol.son), stepfather);
      183 
      184 	return;
      185 
      186 /* This procedure copies a symbol node.  If the symbol node is a structure
      187*   declaration, this procedure makes a prefix walk of the member symbol nodes
      188*   and copies them also.  The brothers of the root are copied if stepfather is
      189*   not null. */
      190 
      191 copy_symbol:
      192      procedure (root, stepfather) returns (ptr);
      193 
      194 dcl	root		ptr;
      195 dcl	stepfather	ptr;
      196 
      197 dcl	more_nodes	bit (1) aligned;
      198 dcl	new_s		ptr;
      199 dcl	new_tree		ptr;
      200 dcl	previous		ptr;
      201 dcl	s		ptr;
      202 
      203 	s = root;
      204 	new_tree, previous, new_s = copy_symbol_node (root);
      205 	new_s -> symbol.father = stepfather;
      206 
      207 	more_nodes = "1"b;
      208 	do while (more_nodes);
      209 	     if s -> symbol.son ^= null
      210 	     then do;
      211 		     new_s -> symbol.son, previous -> symbol.next = copy_symbol_node ((s -> symbol.son));
      212 		     new_s -> symbol.son -> symbol.father = new_s;
      213 		     s = s -> symbol.son;
      214 		     previous, new_s = new_s -> symbol.son;
      215 		end;
      216 	     else do;
      217 		     more_nodes = "0"b;
      218 		     do while (s ^= root -> symbol.father & ^more_nodes);
      219 			if s -> symbol.brother ^= null & (s ^= root | stepfather ^= null)
      220 			then more_nodes = "1"b;
      221 			else do;
      222 				s = s -> symbol.father;
      223 				new_s = new_s -> symbol.father;
      224 			     end;
      225 		     end;
      226 
      227 		     if more_nodes
      228 		     then do;
      229 			     new_s -> symbol.brother,
      230 				previous -> symbol.next = copy_symbol_node ((s -> symbol.brother));
      231 			     new_s -> symbol.brother -> symbol.father = new_s -> symbol.father;
      232 			     s = s -> symbol.brother;
      233 			     previous, new_s = new_s -> symbol.brother;
      234 			end;
      235 		end;
      236 	end;
      237 
      238 	return (new_tree);
      239 
      240 copy_symbol_node:
      241      procedure (s) returns (ptr);
      242 
      243 dcl	s		ptr;
      244 
      245 dcl	p		ptr;
      246 
      247 	p = create_symbol (null, null, by_compiler);
      248 
      249 	p -> symbol = s -> symbol;
      250 	p -> symbol.dcl_type = by_compiler;
      251 	p -> symbol.next, p -> symbol.multi_use = null;
      252 	p -> symbol.reference = copy_expression (s -> symbol.reference);
      253 	p -> symbol.reference -> reference.symbol = p;
      254 	p -> symbol.array = copy_expression (s -> symbol.array);
      255 	p -> symbol.general = copy_expression (s -> symbol.general);
      256 	p -> symbol.initial = copy_expression (s -> symbol.initial);
      257 
      258 	return (p);
      259      end copy_symbol_node;
      260 
      261      end copy_symbol;
      262 
      263      end copy_expression;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/31/89  1338.2  copy_expression.pl1               >spec>install>MR12.3-1066>copy_expression.pl1
38           1    07/31/89  1332.6  language_utility.incl.pl1         >spec>install>MR12.3-1066>language_utility.incl.pl1
1-307        2    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
1-325        3    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
1-335        4    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
1-374        5    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
1-386        6    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
39           7    05/06/74  1741.6  array.incl.pl1                    >ldd>include>array.incl.pl1
40           8    12/07/83  1701.7  symbol.incl.pl1                   >ldd>include>symbol.incl.pl1
41           9    10/25/79  1645.8  declare_type.incl.pl1             >ldd>include>declare_type.incl.pl1
42          10    08/13/81  2211.5  list.incl.pl1                     >ldd>include>list.incl.pl1
43          11    07/21/80  1546.3  nodes.incl.pl1                    >ldd>include>nodes.incl.pl1
44          12    07/21/80  1546.3  operator.incl.pl1                 >ldd>include>operator.incl.pl1
45          13    04/07/83  1635.0  op_codes.incl.pl1                 >ldd>include>op_codes.incl.pl1
46          14    07/21/80  1546.3  reference.incl.pl1                >ldd>include>reference.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
a                                      parameter       pointer                  packed unaligned dcl 17 ref 14 50
array                                  based           structure                level 1 dcl 7-1 in procedure "copy_expression" set
                                                                                  ref 139* 139
array                    12            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 8-3 in procedure "copy_expression"
                                                                                  set ref 254* 254*
array_node                             constant        bit(9)                   initial dcl 11-5 ref 136
attributes               31            based           structure                level 2 dcl 8-3
block_node                             constant        bit(9)                   initial dcl 11-5 ref 133
bound                                  based           structure                level 1 dcl 7-21 set ref 152* 152
bound_node                             constant        bit(9)                   initial dcl 11-5 ref 149
bounds                   12            based           pointer                  level 2 packed packed unaligned dcl 7-1 set ref 143*
                                                                                  143*
brother                  20            based           pointer                  level 2 packed packed unaligned dcl 8-3 set ref 219
                                                                                  229 229* 231 232 233
by_compiler                     000000 constant        bit(3)                   initial dcl 9-5 set ref 247* 250
constant                 32(16)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 106
copy_expression                 000012 constant        entry                    external dcl 1-94 ref 74 95 121 124 127 140 141 142
                                                                                  143 144 153 154 155 156 157 252 254 255 256
create_array                    000014 constant        entry                    external dcl 1-108 ref 138
create_bound                    000016 constant        entry                    external dcl 1-118 ref 151
create_list                     000020 constant        entry                    external dcl 1-147 ref 92
create_operator                 000022 constant        entry                    external dcl 1-152 ref 71
create_reference                000024 constant        entry                    external dcl 1-158 ref 117
create_symbol                   000026 constant        entry                    external dcl 1-184 ref 247
data_type                31            based           structure                level 3 packed packed unaligned dcl 8-3
dcl_type                  1(19)        based           bit(3)                   level 2 packed packed unaligned dcl 8-3 set ref 250*
desc_multiplier          10            based           pointer                  level 2 packed packed unaligned dcl 7-21 set ref
                                                                                  156* 156*
element                   1            based           pointer                  array level 2 packed packed unaligned dcl 10-6 set
                                                                                  ref 84 95* 95*
element_descriptor       13            based           pointer                  level 2 packed packed unaligned dcl 7-1 set ref 144*
                                                                                  144*
element_size              5            based           pointer                  level 2 packed packed unaligned dcl 7-1 set ref 140*
                                                                                  140*
element_size_bits         6            based           pointer                  level 2 packed packed unaligned dcl 7-1 set ref 141*
                                                                                  141*
entry                    31(09)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 106
father                                 parameter       pointer                  dcl 18 in procedure "copy_expression" ref 174 179
                                                                                  182
father                   17            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 8-3 in procedure "copy_expression"
                                                                                  set ref 205* 212* 218 222 223 231* 231
file                     31(10)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 106
format                   31(15)        based           bit(1)                   level 4 packed packed unaligned dcl 8-3 set ref 106
general                  16            based           pointer                  level 2 packed packed unaligned dcl 8-3 set ref 255*
                                                                                  255*
i                               000100 automatic       fixed bin(17,0)          dcl 23 set ref 73* 74 74 74* 94* 95 95*
initial                  11            based           pointer                  level 2 packed packed unaligned dcl 8-3 set ref 256*
                                                                                  256*
inptr                           000102 automatic       pointer                  dcl 24 set ref 50* 52 52 55 59 59 62 62 62 66 66 68
                                                                                  71 71 73 74 74 78 92 94 95 103 105 106 111 113 113
                                                                                  114 117 119 121 124 127 133 139 140 141 142 143
                                                                                  144 152 153 154 155 156 157 162* 165* 167
label_node                             constant        bit(9)                   initial dcl 11-5 ref 133
length                    6            based           pointer                  level 2 packed packed unaligned dcl 14-3 set ref 124
                                                                                  124* 124*
list                                   based           structure                level 1 dcl 10-6
list_node                              constant        bit(9)                   initial dcl 11-5 ref 90
lower                     5            based           pointer                  level 2 packed packed unaligned dcl 7-21 set ref
                                                                                  154* 154*
more_nodes                      000160 automatic       bit(1)                   dcl 197 set ref 207* 208 217* 218 219* 227
multi_use                 7            based           pointer                  level 2 packed packed unaligned dcl 8-3 set ref 251*
multiplier                7            based           pointer                  level 2 packed packed unaligned dcl 7-21 set ref
                                                                                  157* 157*
new_s                           000162 automatic       pointer                  dcl 198 set ref 204* 205 211 212 212 214 214* 223*
                                                                                  223 229 231 231 233 233*
new_tree                        000164 automatic       pointer                  dcl 199 set ref 204* 238
next                     14            based           pointer                  level 2 in structure "bound" packed packed unaligned
                                                                                  dcl 7-21 in procedure "copy_expression" set ref
                                                                                  153* 153*
next                      6            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 8-3 in procedure "copy_expression"
                                                                                  set ref 211* 229* 251*
node                                   based           structure                level 1 dcl 11-27
nodetype                        000104 automatic       bit(9)                   dcl 25 set ref 55* 57 90 101 133 133 133 133 136 149
                                                                                  162
null                                                   builtin function         dcl 31 ref 52 62 74 80 103 121 124 127 162 162 177
                                                                                  179 209 219 219 247 247 247 247 251
number                    0(21)        based           fixed bin(14,0)          level 2 in structure "operator" packed packed
                                                                                  unaligned dcl 12-6 in procedure "copy_expression"
                                                                                  ref 59 71 73
number                    0(21)        based           fixed bin(14,0)          level 2 in structure "list" packed packed unaligned
                                                                                  dcl 10-6 in procedure "copy_expression" ref 84 92
                                                                                  94
offset                    5            based           pointer                  level 2 packed packed unaligned dcl 14-3 set ref 121
                                                                                  121* 121*
op_code                   0(09)        based           bit(9)                   level 2 packed packed unaligned dcl 12-6 ref 71 80
operand                   1            based           pointer                  array level 2 packed packed unaligned dcl 12-6 set
                                                                                  ref 62 62 62 66 66 74 74* 74* 80 83 83 84*
operator                               based           structure                level 1 dcl 12-6
operator_node                          constant        bit(9)                   initial dcl 11-5 ref 57
outptr                          000106 automatic       pointer                  dcl 26 set ref 71* 74 78 80 80 83 84 87 92* 95 98
                                                                                  117* 119 121 121 124 124 127 127 130 138* 139 140
                                                                                  141 142 143 144 146 151* 152 153 154 155 156 157
                                                                                  159
p                               000110 automatic       pointer                  dcl 27 in procedure "copy_expression" set ref 83* 84
                                                                                  84 105* 106 106 106 106 106
p                               000200 automatic       pointer                  dcl 245 in procedure "copy_symbol_node" set ref 247*
                                                                                  249 250 251 251 252 253 253 254 255 256 258
pl1_stat_$util_abort            000010 external static entry variable           dcl 35 ref 165
previous                        000166 automatic       pointer                  dcl 200 set ref 204* 211 214* 229 233*
processed                 0(19)        based           bit(1)                   level 2 packed packed unaligned dcl 12-6 set ref 78*
                                                                                  78
qualifier                 4            based           pointer                  level 2 packed packed unaligned dcl 14-3 set ref 127
                                                                                  127* 127*
ref_count                 0(18)        based           fixed bin(17,0)          level 2 packed packed unaligned dcl 14-3 set ref 66*
                                                                                  66 113* 113
reference                              based           structure                level 1 dcl 14-3 in procedure "copy_expression" set
                                                                                  ref 119* 119
reference                15            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 8-3 in procedure "copy_expression"
                                                                                  set ref 252* 252* 253
reference_node                         constant        bit(9)                   initial dcl 11-5 ref 62 101
root                                   parameter       pointer                  dcl 194 set ref 191 203 204* 218 219
s                                      parameter       pointer                  dcl 243 in procedure "copy_symbol_node" ref 240 249
                                                                                  252 254 255 256
s                               000170 automatic       pointer                  dcl 201 in procedure "copy_symbol" set ref 203* 209
                                                                                  211 213* 213 218 219 219 222* 222 229 232* 232
sf_par_node                            constant        bit(9)                   initial dcl 11-5 ref 133
shared                    0(11)        based           bit(1)                   level 2 packed packed unaligned dcl 14-3 set ref 62
                                                                                  111
son                      21            based           pointer                  level 2 packed packed unaligned dcl 8-3 set ref 177*
                                                                                  179 182* 182 209 211 211* 212 213 214
std_call                               constant        bit(9)                   initial dcl 13-8 ref 80
stepfather                             parameter       pointer                  dcl 19 in procedure "copy_expression" set ref 174
                                                                                  177 182 182*
stepfather                             parameter       pointer                  dcl 195 in procedure "copy_symbol" ref 191 205 219
storage_class            32(09)        based           structure                level 3 packed packed unaligned dcl 8-3
symbol                                 based           structure                level 1 dcl 8-3 in procedure "copy_expression" set
                                                                                  ref 249* 249
symbol                    3            based           pointer                  level 2 in structure "reference" packed packed
                                                                                  unaligned dcl 14-3 in procedure "copy_expression"
                                                                                  set ref 103 105 117 253*
symbol_node                            constant        bit(9)                   initial dcl 11-5 ref 106 162
token_node                             constant        bit(9)                   initial dcl 11-5 ref 133
type                                   based           bit(9)                   level 2 packed packed unaligned dcl 11-27 ref 55 62
                                                                                  106
upper                     6            based           pointer                  level 2 packed packed unaligned dcl 7-21 set ref
                                                                                  155* 155*
virtual_origin            7            based           pointer                  level 2 packed packed unaligned dcl 7-1 set ref 142*
                                                                                  142*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
a_format                               internal static bit(9)                   initial dcl 13-8
abs_fun                                internal static bit(9)                   initial dcl 13-8
acos_fun                               internal static bit(9)                   initial dcl 13-8
acosd_fun                              internal static bit(9)                   initial dcl 13-8
add                                    internal static bit(9)                   initial dcl 13-8
addbitno_fun                           internal static bit(9)                   initial dcl 13-8
addcharno_fun                          internal static bit(9)                   initial dcl 13-8
addr_fun                               internal static bit(9)                   initial dcl 13-8
addr_fun_bits                          internal static bit(9)                   initial dcl 13-8
addrel_fun                             internal static bit(9)                   initial dcl 13-8
adjust_count                    000000 constant        entry                    external dcl 1-20
allocation_fun                         internal static bit(9)                   initial dcl 13-8
allot_auto                             internal static bit(9)                   initial dcl 13-8
allot_based                            internal static bit(9)                   initial dcl 13-8
allot_ctl                              internal static bit(9)                   initial dcl 13-8
allot_var                              internal static bit(9)                   initial dcl 13-8
and_bits                               internal static bit(9)                   initial dcl 13-8
asin_fun                               internal static bit(9)                   initial dcl 13-8
asind_fun                              internal static bit(9)                   initial dcl 13-8
assign                                 internal static bit(9)                   initial dcl 13-8
assign_by_name                         internal static bit(9)                   initial dcl 13-8
assign_round                           internal static bit(9)                   initial dcl 13-8
assign_size_ck                         internal static bit(9)                   initial dcl 13-8
assign_zero                            internal static bit(9)                   initial dcl 13-8
atan_fun                               internal static bit(9)                   initial dcl 13-8
atand_fun                              internal static bit(9)                   initial dcl 13-8
b_format                               internal static bit(9)                   initial dcl 13-8
baseno_fun                             internal static bit(9)                   initial dcl 13-8
baseptr_fun                            internal static bit(9)                   initial dcl 13-8
binary_to_octal_string          000000 constant        entry                    external dcl 1-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 1-43
bindec                          000000 constant        entry                    external dcl 1-23
bindec$vs                       000000 constant        entry                    external dcl 1-28
binoct                          000000 constant        entry                    external dcl 1-33
bit_pointer                            internal static bit(9)                   initial dcl 13-8
bit_to_char                            internal static bit(9)                   initial dcl 13-8
bit_to_word                            internal static bit(9)                   initial dcl 13-8
bitno_fun                              internal static bit(9)                   initial dcl 13-8
bn_format                              internal static bit(9)                   initial dcl 13-8
bool_fun                               internal static bit(9)                   initial dcl 13-8
bound_ck                               internal static bit(9)                   initial dcl 13-8
by_context                             internal static bit(3)                   initial dcl 9-5
by_declare                             internal static bit(3)                   initial dcl 9-5
by_explicit_context                    internal static bit(3)                   initial dcl 9-5
by_implication                         internal static bit(3)                   initial dcl 9-5
by_name_agg_node                       internal static bit(9)                   initial dcl 11-5
byte_fun                               internal static bit(9)                   initial dcl 13-8
c_format                               internal static bit(9)                   initial dcl 13-8
cat_string                             internal static bit(9)                   initial dcl 13-8
ceil_fun                               internal static bit(9)                   initial dcl 13-8
char_to_word                           internal static bit(9)                   initial dcl 13-8
charno_fun                             internal static bit(9)                   initial dcl 13-8
clock_fun                              internal static bit(9)                   initial dcl 13-8
close_file                             internal static bit(9)                   initial dcl 13-8
codeptr_fun                            internal static bit(9)                   initial dcl 13-8
column_format                          internal static bit(9)                   initial dcl 13-8
compare_expression              000000 constant        entry                    external dcl 1-48
complex_fun                            internal static bit(9)                   initial dcl 13-8
conjg_fun                              internal static bit(9)                   initial dcl 13-8
constant_length                 000000 constant        entry                    external dcl 1-54
context_node                           internal static bit(9)                   initial dcl 11-5
convert                         000000 constant        entry                    external dcl 1-60
convert$from_builtin            000000 constant        entry                    external dcl 1-72
convert$to_integer              000000 constant        entry                    external dcl 1-66
convert$to_target               000000 constant        entry                    external dcl 1-88
convert$to_target_fb            000000 constant        entry                    external dcl 1-82
convert$validate                000000 constant        entry                    external dcl 1-78
copy_expression$copy_sons       000000 constant        entry                    external dcl 1-99
copy_string                            internal static bit(9)                   initial dcl 13-8
copy_unique_expression          000000 constant        entry                    external dcl 1-103
copy_words                             internal static bit(9)                   initial dcl 13-8
cos_fun                                internal static bit(9)                   initial dcl 13-8
cosd_fun                               internal static bit(9)                   initial dcl 13-8
create_block                    000000 constant        entry                    external dcl 1-112
create_context                  000000 constant        entry                    external dcl 1-122
create_cross_reference          000000 constant        entry                    external dcl 1-128
create_default                  000000 constant        entry                    external dcl 1-132
create_identifier               000000 constant        entry                    external dcl 1-136
create_label                    000000 constant        entry                    external dcl 1-140
create_statement                000000 constant        entry                    external dcl 1-163
create_statement$prologue       000000 constant        entry                    external dcl 1-171
create_storage                  000000 constant        entry                    external dcl 1-179
create_token                    000000 constant        entry                    external dcl 1-191
create_token$init_hash_table    000000 constant        entry                    external dcl 1-197
create_token$protected          000000 constant        entry                    external dcl 1-199
cross_reference_node                   internal static bit(9)                   initial dcl 11-5
decbin                          000000 constant        entry                    external dcl 1-206
declare_constant                000000 constant        entry                    external dcl 1-211
declare_constant$bit            000000 constant        entry                    external dcl 1-219
declare_constant$char           000000 constant        entry                    external dcl 1-224
declare_constant$desc           000000 constant        entry                    external dcl 1-229
declare_constant$integer        000000 constant        entry                    external dcl 1-234
declare_descriptor              000000 constant        entry                    external dcl 1-239
declare_descriptor$ctl          000000 constant        entry                    external dcl 1-249
declare_descriptor$param        000000 constant        entry                    external dcl 1-259
declare_integer                 000000 constant        entry                    external dcl 1-269
declare_picture                 000000 constant        entry                    external dcl 1-274
declare_picture_temp            000000 constant        entry                    external dcl 1-279
declare_pointer                 000000 constant        entry                    external dcl 1-287
declare_temporary               000000 constant        entry                    external dcl 1-292
decode_node_id                  000000 constant        entry                    external dcl 1-300
decode_source_id                000000 constant        entry                    external dcl 1-306
default_node                           internal static bit(9)                   initial dcl 11-5
delete_file                            internal static bit(9)                   initial dcl 13-8
desc_size                              internal static bit(9)                   initial dcl 13-8
digit_to_bit                           internal static bit(9)                   initial dcl 13-8
div                                    internal static bit(9)                   initial dcl 13-8
do_fun                                 internal static bit(9)                   initial dcl 13-8
do_spec                                internal static bit(9)                   initial dcl 13-8
e_format                               internal static bit(9)                   initial dcl 13-8
empty_area                             internal static bit(9)                   initial dcl 13-8
enable_on                              internal static bit(9)                   initial dcl 13-8
environmentptr_fun                     internal static bit(9)                   initial dcl 13-8
equal                                  internal static bit(9)                   initial dcl 13-8
error                           000000 constant        entry                    external dcl 1-314
error$omit_text                 000000 constant        entry                    external dcl 1-319
error_                          000000 constant        entry                    external dcl 1-324
error_$finish                   000000 constant        entry                    external dcl 1-343
error_$initialize_error         000000 constant        entry                    external dcl 1-341
error_$no_text                  000000 constant        entry                    external dcl 1-334
ex_prologue                            internal static bit(9)                   initial dcl 13-8
exp                                    internal static bit(9)                   initial dcl 13-8
exp_fun                                internal static bit(9)                   initial dcl 13-8
f_format                               internal static bit(9)                   initial dcl 13-8
floor_fun                              internal static bit(9)                   initial dcl 13-8
format_value_node                      internal static bit(9)                   initial dcl 11-5
fortran_read                           internal static bit(9)                   initial dcl 13-8
fortran_write                          internal static bit(9)                   initial dcl 13-8
free_based                             internal static bit(9)                   initial dcl 13-8
free_ctl                               internal static bit(9)                   initial dcl 13-8
free_node                       000000 constant        entry                    external dcl 1-345
free_var                               internal static bit(9)                   initial dcl 13-8
ftn_file_manip                         internal static bit(9)                   initial dcl 13-8
ftn_trans_loop                         internal static bit(9)                   initial dcl 13-8
get_array_size                  000000 constant        entry                    external dcl 1-348
get_data_trans                         internal static bit(9)                   initial dcl 13-8
get_edit_trans                         internal static bit(9)                   initial dcl 13-8
get_file                               internal static bit(9)                   initial dcl 13-8
get_list_trans                         internal static bit(9)                   initial dcl 13-8
get_size                        000000 constant        entry                    external dcl 1-352
get_string                             internal static bit(9)                   initial dcl 13-8
greater_or_equal                       internal static bit(9)                   initial dcl 13-8
greater_than                           internal static bit(9)                   initial dcl 13-8
half_to_word                           internal static bit(9)                   initial dcl 13-8
imag_fun                               internal static bit(9)                   initial dcl 13-8
index_after_fun                        internal static bit(9)                   initial dcl 13-8
index_before_fun                       internal static bit(9)                   initial dcl 13-8
index_fun                              internal static bit(9)                   initial dcl 13-8
index_rev_fun                          internal static bit(9)                   initial dcl 13-8
join                                   internal static bit(9)                   initial dcl 13-8
jump                                   internal static bit(9)                   initial dcl 13-8
jump_false                             internal static bit(9)                   initial dcl 13-8
jump_if_eq                             internal static bit(9)                   initial dcl 13-8
jump_if_ge                             internal static bit(9)                   initial dcl 13-8
jump_if_gt                             internal static bit(9)                   initial dcl 13-8
jump_if_le                             internal static bit(9)                   initial dcl 13-8
jump_if_lt                             internal static bit(9)                   initial dcl 13-8
jump_if_ne                             internal static bit(9)                   initial dcl 13-8
jump_true                              internal static bit(9)                   initial dcl 13-8
l_parn                                 internal static bit(9)                   initial dcl 13-8
label_array_element_node               internal static bit(9)                   initial dcl 11-5
length_fun                             internal static bit(9)                   initial dcl 13-8
less_or_equal                          internal static bit(9)                   initial dcl 13-8
less_than                              internal static bit(9)                   initial dcl 13-8
line_format                            internal static bit(9)                   initial dcl 13-8
locate_file                            internal static bit(9)                   initial dcl 13-8
lock_file                              internal static bit(9)                   initial dcl 13-8
lock_fun                               internal static bit(9)                   initial dcl 13-8
log10_fun                              internal static bit(9)                   initial dcl 13-8
log2_fun                               internal static bit(9)                   initial dcl 13-8
log_fun                                internal static bit(9)                   initial dcl 13-8
loop                                   internal static bit(9)                   initial dcl 13-8
machine_state_node                     internal static bit(9)                   initial dcl 11-5
make_desc                              internal static bit(9)                   initial dcl 13-8
max_fun                                internal static bit(9)                   initial dcl 13-8
max_list_elements                      internal static fixed bin(17,0)          initial dcl 10-12
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 12-15
merge_attributes                000000 constant        entry                    external dcl 1-355
min_fun                                internal static bit(9)                   initial dcl 13-8
mod_bit                                internal static bit(9)                   initial dcl 13-8
mod_byte                               internal static bit(9)                   initial dcl 13-8
mod_fun                                internal static bit(9)                   initial dcl 13-8
mod_half                               internal static bit(9)                   initial dcl 13-8
mod_word                               internal static bit(9)                   initial dcl 13-8
mult                                   internal static bit(9)                   initial dcl 13-8
negate                                 internal static bit(9)                   initial dcl 13-8
nop                                    internal static bit(9)                   initial dcl 13-8
not_bits                               internal static bit(9)                   initial dcl 13-8
not_equal                              internal static bit(9)                   initial dcl 13-8
off_fun                                internal static bit(9)                   initial dcl 13-8
open_file                              internal static bit(9)                   initial dcl 13-8
optimizer                       000000 constant        entry                    external dcl 1-361
or_bits                                internal static bit(9)                   initial dcl 13-8
pack                                   internal static bit(9)                   initial dcl 13-8
page_format                            internal static bit(9)                   initial dcl 13-8
param_desc_ptr                         internal static bit(9)                   initial dcl 13-8
param_ptr                              internal static bit(9)                   initial dcl 13-8
parse_error                     000000 constant        entry                    external dcl 1-364
parse_error$no_text             000000 constant        entry                    external dcl 1-368
picture_format                         internal static bit(9)                   initial dcl 13-8
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 1-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 1-372
pl1_mod_fun                            internal static bit(9)                   initial dcl 13-8
pl1_print$for_lex               000000 constant        entry                    external dcl 1-418
pl1_print$non_varying           000000 constant        entry                    external dcl 1-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 1-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 1-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 1-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 1-414
pl1_print$varying               000000 constant        entry                    external dcl 1-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 1-395
prefix_plus                            internal static bit(9)                   initial dcl 13-8
ptr_fun                                internal static bit(9)                   initial dcl 13-8
put_control                            internal static bit(9)                   initial dcl 13-8
put_data_trans                         internal static bit(9)                   initial dcl 13-8
put_edit_trans                         internal static bit(9)                   initial dcl 13-8
put_field                              internal static bit(9)                   initial dcl 13-8
put_field_chk                          internal static bit(9)                   initial dcl 13-8
put_file                               internal static bit(9)                   initial dcl 13-8
put_list_trans                         internal static bit(9)                   initial dcl 13-8
put_string                             internal static bit(9)                   initial dcl 13-8
r_format                               internal static bit(9)                   initial dcl 13-8
r_parn                                 internal static bit(9)                   initial dcl 13-8
range_ck                               internal static bit(9)                   initial dcl 13-8
rank_fun                               internal static bit(9)                   initial dcl 13-8
read_file                              internal static bit(9)                   initial dcl 13-8
real_fun                               internal static bit(9)                   initial dcl 13-8
record_io                              internal static bit(9)                   initial dcl 13-8
refer                                  internal static bit(9)                   initial dcl 13-8
refer_extent                    000000 constant        entry                    external dcl 1-426
rel_fun                                internal static bit(9)                   initial dcl 13-8
repeat_fun                             internal static bit(9)                   initial dcl 13-8
reserve$clear                   000000 constant        entry                    external dcl 1-430
reserve$declare_lib             000000 constant        entry                    external dcl 1-434
reserve$read_lib                000000 constant        entry                    external dcl 1-439
return_bits                            internal static bit(9)                   initial dcl 13-8
return_string                          internal static bit(9)                   initial dcl 13-8
return_value                           internal static bit(9)                   initial dcl 13-8
return_words                           internal static bit(9)                   initial dcl 13-8
reverse_fun                            internal static bit(9)                   initial dcl 13-8
revert_on                              internal static bit(9)                   initial dcl 13-8
rewrite_file                           internal static bit(9)                   initial dcl 13-8
round_fun                              internal static bit(9)                   initial dcl 13-8
search_fun                             internal static bit(9)                   initial dcl 13-8
search_rev_fun                         internal static bit(9)                   initial dcl 13-8
segno_fun                              internal static bit(9)                   initial dcl 13-8
semantic_translator             000000 constant        entry                    external dcl 1-444
semantic_translator$abort       000000 constant        entry                    external dcl 1-446
semantic_translator$error       000000 constant        entry                    external dcl 1-450
setbitno_fun                           internal static bit(9)                   initial dcl 13-8
setcharno_fun                          internal static bit(9)                   initial dcl 13-8
share_expression                000000 constant        entry                    external dcl 1-454
sign_fun                               internal static bit(9)                   initial dcl 13-8
signal_on                              internal static bit(9)                   initial dcl 13-8
sin_fun                                internal static bit(9)                   initial dcl 13-8
sind_fun                               internal static bit(9)                   initial dcl 13-8
skip_format                            internal static bit(9)                   initial dcl 13-8
source_node                            internal static bit(9)                   initial dcl 11-5
sqrt_fun                               internal static bit(9)                   initial dcl 13-8
stack_ptr                              internal static bit(9)                   initial dcl 13-8
stackbaseptr_fun                       internal static bit(9)                   initial dcl 13-8
stackframeptr_fun                      internal static bit(9)                   initial dcl 13-8
stacq_fun                              internal static bit(9)                   initial dcl 13-8
statement_node                         internal static bit(9)                   initial dcl 11-5
std_arg_list                           internal static bit(9)                   initial dcl 13-8
std_entry                              internal static bit(9)                   initial dcl 13-8
std_return                             internal static bit(9)                   initial dcl 13-8
stop                                   internal static bit(9)                   initial dcl 13-8
stream_prep                            internal static bit(9)                   initial dcl 13-8
sub                                    internal static bit(9)                   initial dcl 13-8
tan_fun                                internal static bit(9)                   initial dcl 13-8
tand_fun                               internal static bit(9)                   initial dcl 13-8
temporary_node                         internal static bit(9)                   initial dcl 11-5
terminate_trans                        internal static bit(9)                   initial dcl 13-8
token_to_binary                 000000 constant        entry                    external dcl 1-459
translate_fun                          internal static bit(9)                   initial dcl 13-8
trunc_fun                              internal static bit(9)                   initial dcl 13-8
unlock_file                            internal static bit(9)                   initial dcl 13-8
unpack                                 internal static bit(9)                   initial dcl 13-8
vclock_fun                             internal static bit(9)                   initial dcl 13-8
verify_fun                             internal static bit(9)                   initial dcl 13-8
verify_ltrim_fun                       internal static bit(9)                   initial dcl 13-8
verify_rev_fun                         internal static bit(9)                   initial dcl 13-8
verify_rtrim_fun                       internal static bit(9)                   initial dcl 13-8
word_to_mod2                           internal static bit(9)                   initial dcl 13-8
word_to_mod4                           internal static bit(9)                   initial dcl 13-8
word_to_mod8                           internal static bit(9)                   initial dcl 13-8
wordno_fun                             internal static bit(9)                   initial dcl 13-8
write_file                             internal static bit(9)                   initial dcl 13-8
x_format                               internal static bit(9)                   initial dcl 13-8
xor_bits                               internal static bit(9)                   initial dcl 13-8

NAMES DECLARED BY EXPLICIT CONTEXT.
copy_expression                 000024 constant        entry                    external dcl 14
copy_sons                       001052 constant        entry                    external dcl 174
copy_symbol                     001126 constant        entry                    internal dcl 191 ref 162 182
copy_symbol_node                001300 constant        entry                    internal dcl 240 ref 204 211 229

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1604        1634    1463        1614
Length      2322    1463        30         451     121           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
copy_expression                     224 external procedure  is an external procedure.  
copy_symbol                             internal procedure  shares stack frame of external procedure copy_expression.  
copy_symbol_node                        internal procedure  shares stack frame of external procedure copy_expression.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
copy_expression          000100 i                           copy_expression
                         000102 inptr                       copy_expression
                         000104 nodetype                    copy_expression
                         000106 outptr                      copy_expression
                         000110 p                           copy_expression
                         000160 more_nodes                  copy_symbol
                         000162 new_s                       copy_symbol
                         000164 new_tree                    copy_symbol
                         000166 previous                    copy_symbol
                         000170 s                           copy_symbol
                         000200 p                           copy_symbol_node

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
unpk_to_pk          call_ent_var        call_ext_out        return_mac          signal_op           ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
copy_expression               create_array                  create_bound                  create_list
create_operator               create_reference              create_symbol

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pl1_stat_$util_abort




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     14 000020        50 000033        52 000042        55 000056        57 000061        59 000063        62 000100
     66 000114        68 000121        71 000131        73 000151        74 000163        76 000203        78 000205
     80 000211        83 000222        84 000225        87 000232        90 000244        92 000246        94 000262
     95 000273        96 000307        98 000311       101 000323       103 000325       105 000330       106 000332
    111 000354       113 000357       114 000364       117 000374       119 000406       121 000413       124 000432
    127 000453       130 000474       133 000506       136 000526       138 000530       139 000536       140 000543
    141 000557       142 000574       143 000611       144 000626       146 000643       149 000654       151 000656
    152 000664       153 000671       154 000705       155 000722       156 000737       157 000754       159 000771
    162 001002       165 001022       167 001034       174 001046       177 001060       179 001065       182 001077
    184 001120       191 001126       203 001130       204 001133       205 001147       207 001154       208 001156
    209 001160       211 001164       212 001175       213 001177       214 001202       215 001205       217 001206
    218 001207       219 001221       222 001240       223 001242       225 001245       227 001246       229 001250
    231 001262       232 001265       233 001270       236 001273       238 001274       240 001300       247 001302
    249 001322       250 001331       251 001335       252 001340       253 001354       254 001356       255 001375
    256 001414       258 001433


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
