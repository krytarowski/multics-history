	COMPILATION LISTING OF SEGMENT watch
	Compiled by: Multics PL/I Compiler, Release 28d, of October 4, 1983
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 01/11/85  1040.5 mst Fri
	    Options: optimize list

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 /*
        7*
        8*   This is the command interface to the watch part of the trace facility.
        9*
       10*   Written: May 1984 by Jeffrey D. Ives.
       11**/
       12 /* format: style2,ifthendo,^indnoniterdo,thendo,^inditerdo,indproc,ind2,dclind5,idind32 */
       13 
       14 watch:
       15   procedure options (variable);
       16 
       17 /* DISABLE TRACE_CATCH_ */
       18 
       19     transaction_id = clock ();
       20     on cleanup status = trace_$transaction_end (transaction_id);
       21 						/* Disregard nonstandard use of status.	*/
       22     if ^trace_$transaction_begin (transaction_id) /* Temporarily disables trace_catch_.			*/
       23     then do;
       24       call com_err_ (code, ME, "There seems to be an incomplete invocation of trace,
       25 watch, or trace_meters still on the stack.  Try the release command.");
       26       return;
       27     end;
       28 
       29 /* SET UP A SUB_ERROR_ CONDITION HANDLER */
       30 
       31     call condition_ ("sub_error_", SUB_ERROR_HANDLER);
       32 
       33 /* SET DEFAULT ACTIONS */
       34 
       35     add_remove_action = "";
       36     status = "0"b;
       37 
       38 /* READ THE ARGUMENTS */
       39 
       40     call cu_$arg_count (arg_count, code);
       41     if code ^= 0
       42     then do;
       43       call com_err_ (code, ME);
       44       go to TRANSACTION_END;
       45     end;
       46 
       47     arg_idx = 1;
       48 ARGUMENT_LOOP:
       49     do while (arg_idx <= arg_count);
       50       call cu_$arg_ptr (arg_idx, arg_ptr, arg_len, code);
       51       if code ^= 0
       52       then do;
       53         call com_err_ (code, ME);
       54         go to TRANSACTION_END;
       55       end;
       56 
       57       if length (arg) = 0
       58       then do;
       59         call com_err_ (code, ME, "A null argument was found where a location was expected.");
       60         go to TRANSACTION_END;
       61       end;
       62 
       63       if substr (arg, 1, 1) ^= "-"
       64       then
       65 ENTRYPOINTS_ARGUMENT:
       66         do;
       67         call CHECK_NEXT_ARG (arg, 256, "watch", "locations", " control_args");
       68         call trace_$specify_locations ((arg));
       69         arg_idx = arg_idx + 1;
       70       end ENTRYPOINTS_ARGUMENT;
       71 
       72       else
       73 CONTROL_ARGUMENT:
       74         do;
       75         if arg_idx + 1 > arg_count
       76         then next_arg_ptr = null ();
       77         else do;
       78 	call cu_$arg_ptr (arg_idx + 1, next_arg_ptr, next_arg_len, code);
       79 	if code ^= 0
       80 	then do;
       81 	  call com_err_ (code, ME);
       82 	  go to TRANSACTION_END;
       83 	end;
       84 
       85 	if length (next_arg) > 0
       86 	then if substr (next_arg, 1, 1) = "-"
       87 	     then next_arg_ptr = null ();
       88         end;
       89 
       90         if arg = "-add" /* -add */
       91         then do;
       92 	add_remove_action = "add";
       93 	arg_idx = arg_idx + 1;
       94         end;
       95 
       96         else if arg = "-changed" /* -changed */
       97         then do;
       98 	call trace_$specify_changed_locations ();
       99 	arg_idx = arg_idx + 1;
      100         end;
      101 
      102         else if arg = "-remove" | arg = "-rm" /* -remove, -rm */
      103         then do;
      104 	add_remove_action = "remove";
      105 	arg_idx = arg_idx + 1;
      106         end;
      107 
      108         else if arg = "-status" | arg = "-st" /* -status, -st */
      109         then do;
      110 	status = "1"b;
      111 	arg_idx = arg_idx + 1;
      112         end;
      113 
      114         else do;
      115 	call com_err_ (error_table_$badopt, ME, """^a""", arg);
      116 	go to TRANSACTION_END;
      117         end;
      118       end CONTROL_ARGUMENT;
      119     end ARGUMENT_LOOP;
      120 
      121 /* COMMIT ACTION and print a nice message something like this:
      122*
      123*   Trace: 2 locations specified, 2 locations added.
      124**/
      125 
      126     call SAY_BEGIN ();
      127 
      128     n_specified = trace_$num_specified_locations ();
      129 
      130     if n_specified > 0
      131     then
      132 LOCATION_ACTION:
      133       do;
      134       call SAY_N_LOCATIONS (n_specified, "specified");
      135 
      136       if add_remove_action = "" & ^status
      137       then add_remove_action = "add";
      138 
      139       if add_remove_action = "add"
      140       then
      141         begin;
      142 	dcl  n_added		       fixed bin;
      143 	dcl  n_updated		       fixed bin;
      144 	call trace_$add_specified_locs (n_added, n_updated);
      145 	call SAY_N_LOCATIONS (n_added, "added");
      146 	if n_updated > 0
      147 	then call SAY_N_LOCATIONS (n_updated, "updated");
      148         end;
      149 
      150       if add_remove_action = "remove"
      151       then
      152         begin;
      153 	dcl  n_removed		       fixed bin;
      154 	call trace_$remove_specified_locs (n_removed);
      155 	call SAY_N_LOCATIONS (n_removed, "removed");
      156         end;
      157     end LOCATION_ACTION;
      158 
      159     n_locations = trace_$num_locations ();
      160     if n_locations = 0
      161     then call SAY ("watch table empty");
      162     else call SAY_N_LOCATIONS (n_locations, "in watch table");
      163 
      164     if ^trace_$enabled ()
      165     then call SAY ("trace is disabled");
      166     else if trace_$in_trace ()
      167     then call SAY ("trace is temporarily disabled");
      168     else if trace_$num_entrypoints () = 0
      169     then call SAY ("trace table empty");
      170 
      171     call SAY_END ();
      172 
      173     if status & n_locations ^= 0
      174     then
      175 STATUS:
      176       begin;
      177         dcl  loc_idx		     fixed bin;
      178         dcl  loc_ptr		     ptr;
      179         dcl  n_not_in_wt		     fixed bin;
      180         dcl  old_seg_no		     bit (18) aligned;
      181         dcl  specified_loc_idx	     fixed bin;
      182         old_seg_no = ""b;
      183         n_not_in_wt = 0;
      184         if n_specified = 0
      185         then call ioa_ ("If you want status, you must specify some locations.");
      186         do specified_loc_idx = 0 to n_specified - 1;
      187 	loc_idx = trace_$specified_location_index (specified_loc_idx);
      188 	if loc_idx < 0
      189 	then n_not_in_wt = n_not_in_wt + 1;
      190 	else do;
      191 	  loc_ptr = trace_$location_ptr (loc_idx);
      192 	  if baseno (loc_ptr) ^= old_seg_no
      193 	  then do;
      194 	    call ioa_ ("^a", trace_$location_seg_path (loc_idx));
      195 	    old_seg_no = baseno (loc_ptr);
      196 	  end;
      197 	  watch_values = trace_$location_values (loc_idx);
      198 	  if watch_values.old = watch_values.new
      199 	  then call ioa_ ("^20x^w    ^12x at ^p", watch_values.old, loc_ptr);
      200 	  else call ioa_ ("^20x^w -> ^w at ^p", watch_values.old, watch_values.new, loc_ptr);
      201 	end;
      202         end;
      203         if n_not_in_wt > 0
      204         then do;
      205 	if n_not_in_wt = 1
      206 	then call ioa_ ("^d of the specified locations was not in the watch table.", n_not_in_wt);
      207 	else call ioa_ ("^d of the specified locations were not in the watch table.", n_not_in_wt);
      208         end;
      209       end STATUS;
      210 
      211     if arg_count = 0
      212     then call ioa_ ("Acts: -add/-remove -status.");
      213 
      214 TRANSACTION_END:
      215     if ^trace_$transaction_end (transaction_id)		/* Re-enable trace_catch_. */
      216     then call com_err_ (ZERO, ME, "This invocation of the watch command ended abnormally.");
      217 
      218     return;
      219 
      220 
      221 
      222 SAY:
      223   proc (action_i);
      224     if trace_$loud ()
      225     then do;
      226       call INIT ();
      227       call ioa_$nnl ("^a", action_i);
      228     end;
      229     return;
      230 
      231 SAY_N_LOCATIONS:
      232   entry (num_i, action_i);
      233     if trace_$loud ()
      234     then do;
      235       call INIT ();
      236       if num_i = 1
      237       then call ioa_$nnl ("^d loc ^a", num_i, action_i);
      238       else call ioa_$nnl ("^d locs ^a", num_i, action_i);
      239     end;
      240     return;
      241 
      242 SAY_BEGIN:
      243   entry ();
      244     n_things_said = 0;
      245     return;
      246 
      247 SAY_END:
      248   entry ();
      249     if n_things_said > 0
      250     then call ioa_ (".");
      251     return;
      252 
      253 INIT:
      254     proc ();
      255       if n_things_said = 0
      256       then call ioa_$nnl ("^a: ", ME);
      257       else call ioa_$nnl (", ");
      258       n_things_said = n_things_said + 1;
      259     end INIT;
      260 
      261     dcl  action_i			 char (*) parm;
      262     dcl  num_i			 fixed bin parm;
      263   end SAY;
      264 
      265 CHECK_NEXT_ARG:
      266   proc (next_arg_i, max_arg_len_i, control_arg_i, syntax_i, comment_i);
      267     dcl  (next_arg_i, control_arg_i, syntax_i, comment_i)
      268 				 char (*) parm;
      269     dcl  max_arg_len_i		 fixed bin (21);
      270 
      271     if addr (next_arg_i) = null ()
      272     then do;
      273       call com_err_ (error_table_$noarg, ME, "The syntax is: ^a ^a^a.", control_arg_i, syntax_i, comment_i);
      274       go to TRANSACTION_END;
      275     end;
      276 
      277     if length (next_arg_i) > max_arg_len_i
      278     then do;
      279       call com_err_ (error_table_$bigarg, ME, "The maximum length for ^a is ^d characters.
      280 The syntax is: ^a ^a^a.", syntax_i, max_arg_len_i, control_arg_i, syntax_i, comment_i);
      281       go to TRANSACTION_END;
      282     end;
      283   end CHECK_NEXT_ARG;
      284 
      285 /* SUBROUTINES */
      286 
      287 SUB_ERROR_HANDLER:
      288   proc (mcptr_i, a_name_i, wcptr_i, info_ptr_i, continue_o);
      289     sub_error_info_ptr = info_ptr_i;
      290     condition_info_header_ptr = null ();
      291     if sub_error_info.name ^= trace_$me ()
      292     then go to CONTINUE;
      293     if sub_error_info.header.support_signal | sub_error_info.header.quiet_restart
      294     then go to HANDLED;
      295     if sub_error_info.header.default_restart
      296     then go to REPORT;
      297     if sub_error_info.header.cant_restart
      298     then go to REPORT_AND_ABORT;
      299     else go to CONTINUE;
      300 
      301 REPORT_AND_ABORT:
      302     call com_err_ (sub_error_info.header.status_code, ME, "^a", sub_error_info.header.info_string);
      303     go to TRANSACTION_END;
      304 
      305 REPORT:
      306     call com_err_ (sub_error_info.header.status_code, ME, "^a", sub_error_info.header.info_string);
      307 
      308 HANDLED:
      309     continue_o = "0"b;
      310     return;
      311 
      312 CONTINUE:
      313     continue_o = "1"b;
      314     return;
      315 
      316     dcl  mcptr_i			 ptr parm;
      317     dcl  a_name_i			 char (*) parm;
      318     dcl  info_ptr_i			 ptr parm;
      319     dcl  wcptr_i			 ptr parm;
      320     dcl  continue_o			 bit aligned;
      321 
  1     1 /* BEGIN INCLUDE FILE condition_info_header.incl.pl1 BIM 1981 */
  1     2 /* format: style2 */
  1     3 
  1     4      declare condition_info_header_ptr
  1     5 			      pointer;
  1     6      declare 1 condition_info_header
  1     7 			      aligned based (condition_info_header_ptr),
  1     8 	     2 length	      fixed bin,		/* length in words of this structure */
  1     9 	     2 version	      fixed bin,		/* version number of this structure */
  1    10 	     2 action_flags	      aligned,		/* tell handler how to proceed */
  1    11 	       3 cant_restart     bit (1) unaligned,	/* caller doesn't ever want to be returned to */
  1    12 	       3 default_restart  bit (1) unaligned,	/* caller can be returned to with no further action */
  1    13 	       3 quiet_restart    bit (1) unaligned,	/* return, and print no message */
  1    14 	       3 support_signal   bit (1) unaligned,	/* treat this signal as if the signalling procedure had the support bit set */
  1    15 						/* if the signalling procedure had the support bit set, do the same for its caller */
  1    16 	       3 pad	      bit (32) unaligned,
  1    17 	     2 info_string	      char (256) varying,	/* may contain printable message */
  1    18 	     2 status_code	      fixed bin (35);	/* if^=0, code interpretable by com_err_ */
  1    19 
  1    20 /* END INCLUDE FILE condition_info_header.incl.pl1 */
      322 
      323 
  2     1 /* BEGIN INCLUDE FILE sub_error_info.incl.pl1 */
  2     2 /* format: style2 */
  2     3 
  2     4 /* The include file condition_info_header must be used with this file */
  2     5 
  2     6      declare sub_error_info_ptr     pointer;
  2     7      declare 1 sub_error_info	      aligned based (sub_error_info_ptr),
  2     8 	     2 header	      aligned like condition_info_header,
  2     9 	     2 retval	      fixed bin (35),	/* return value */
  2    10 	     2 name	      char (32),		/* module name */
  2    11 	     2 info_ptr	      ptr;
  2    12 
  2    13      declare sub_error_info_version_1
  2    14 			      internal static options (constant) fixed bin init (1);
  2    15 
  2    16 /* END INCLUDE FILE sub_error_info.incl.pl1 */
      324 
      325 
      326   end SUB_ERROR_HANDLER;
      327 
      328 /* START OF DECLARATIONS */
      329 /* format: ^insnl,^delnl */
      330 
      331 
      332 /* Automatic */
      333 
      334     dcl  add_remove_action		 char (8) init ("");
      335     dcl  arg_count			 fixed bin init (0);
      336     dcl  arg_idx			 fixed bin init (0);
      337     dcl  arg_len			 fixed bin (21) init (0);
      338     dcl  arg_ptr			 ptr init (null ());
      339     dcl  code			 fixed bin (35) init (0);
      340     dcl  n_locations		 fixed bin;
      341     dcl  n_specified		 fixed bin init (0);
      342     dcl  n_things_said		 fixed bin init (0);
      343     dcl  next_arg_idx		 fixed bin init (0);
      344     dcl  next_arg_len		 fixed bin (21) init (0);
      345     dcl  next_arg_ptr		 ptr init (null ());
      346     dcl  status			 bit aligned init ("0"b);
      347     dcl  transaction_id		 fixed bin (71) init (0);
      348 
      349 
      350 /* Static */
      351 
      352     dcl  ME			 char (32) static options (constant) init ("watch");
      353     dcl  ZERO			 fixed bin (35) static options (constant) init (0);
      354 
      355 
      356 /* Conditions */
      357 
      358     dcl  cleanup			 condition;
      359 
      360 
      361 /* Based */
      362 
      363     dcl  arg			 char (arg_len) based (arg_ptr);
      364     dcl  next_arg			 char (next_arg_len) based (next_arg_ptr);
      365 
      366 
      367 /* External Variables */
      368 
      369     dcl  error_table_$badopt		 fixed bin (35) ext;
      370     dcl  error_table_$bigarg		 fixed bin (35) ext;
      371     dcl  error_table_$noarg		 fixed bin (35) ext;
      372 
      373 
      374 /* External Entries */
      375 
      376     dcl  com_err_			 entry options (variable);
      377     dcl  condition_			 entry (char (*), entry);
      378     dcl  cu_$arg_count		 entry (fixed bin, fixed bin (35));
      379     dcl  cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
      380     dcl  ioa_			 entry () options (variable);
      381     dcl  ioa_$nnl			 entry () options (variable);
      382 
      383 
      384 /* format: insnl,delnl */
      385 /* END OF DECLARATIONS */
      386 
      387 /* START OF INCLUDE FILES */
      388 
      389 
  3     1 /*  START OF:	trace_interface.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
  3     2 /* Written: May 1984 by Jeffrey D. Ives. */
  3     3 /* format: style2,^inddcls,^indnoniterdo,^inditerdo,dclind5,idind35 */
  3     4 
  3     5 /* IDENTIFICATION */
  3     6 
  3     7 dcl  trace_$me			entry () returns (char (32));
  3     8 dcl  trace_$version			entry () returns (char (32));
  3     9 
  3    10 /* TRANSACTIONS */
  3    11 
  3    12 dcl  trace_$transaction_begin		entry (fixed bin (71)) returns (bit aligned);
  3    13 dcl  trace_$transaction_begin_force	entry (fixed bin (71));
  3    14 dcl  trace_$transaction_end		entry (fixed bin (71)) returns (bit aligned);
  3    15 
  3    16 /* ACTIONS */
  3    17 
  3    18 dcl  trace_$update_default_parms	entry () returns (bit aligned);
  3    19 dcl  trace_$update_global_parms	entry () returns (bit aligned);
  3    20 dcl  trace_$add_specified_eps		entry (fixed bin, fixed bin);
  3    21 dcl  trace_$add_specified_locs	entry (fixed bin, fixed bin);
  3    22 dcl  trace_$remove_specified_eps	entry (fixed bin);
  3    23 dcl  trace_$remove_specified_locs	entry (fixed bin);
  3    24 dcl  trace_$turn_on_specified_eps	entry (fixed bin);
  3    25 dcl  trace_$turn_off_specified_eps	entry (fixed bin);
  3    26 
  3    27 /* CONVERSION */
  3    28 
  3    29 dcl  trace_$cv_inout_to_bits		entry (char (8) aligned) returns (bit (2) aligned);
  3    30 dcl  trace_$cv_bits_to_inout		entry (bit (2) aligned) returns (char (8) aligned);
  3    31 dcl  trace_$cv_n_to_number		entry (char (16)) returns (fixed bin (34));
  3    32 dcl  trace_$cv_onoff_to_bit		entry (char (8) aligned) returns (bit aligned);
  3    33 dcl  trace_$cv_bit_to_onoff		entry (bit aligned) returns (char (8) aligned);
  3    34 dcl  trace_$cv_entry_name_to_spp	entry (char (256) var, ptr) returns (1 like stop_proc aligned);
  3    35 dcl  trace_$cv_file_path_to_osw	entry (char (256) var, ptr) returns (1 like output_switch aligned);
  3    36 dcl  trace_$cv_stream_name_to_osw	entry (char (32) var) returns (1 like output_switch aligned);
  3    37 
  3    38 /* METERS */
  3    39 
  3    40 dcl  trace_$entrypoint_counts		entry (fixed bin) returns (1 aligned like counts);
  3    41 dcl  trace_$entrypoint_global_meters	entry (fixed bin) returns (1 like meters aligned);
  3    42 dcl  trace_$entrypoint_local_meters	entry (fixed bin) returns (1 like meters aligned);
  3    43 dcl  trace_$metered			entry () returns (1 like meters aligned);
  3    44 dcl  trace_$removed			entry () returns (1 like meters aligned);
  3    45 dcl  trace_$reset_meters		entry ();
  3    46 
  3    47 /* ENTRYPOINTS */
  3    48 
  3    49 dcl  trace_$entrypoint_index		entry (ptr unal) returns (fixed bin);
  3    50 dcl  trace_$entrypoint_name		entry (fixed bin) returns (char (65) var);
  3    51 dcl  trace_$entrypoint_ptr		entry (fixed bin) returns (ptr);
  3    52 dcl  trace_$entrypoint_seg_path	entry (fixed bin) returns (char (256) var);
  3    53 dcl  trace_$entrypoint_status		entry (fixed bin) returns (char (32) var);
  3    54 dcl  trace_$function		entry (fixed bin) returns (bit aligned);
  3    55 dcl  trace_$num_entrypoints		entry () returns (fixed bin);
  3    56 dcl  trace_$num_specified_entrypoints	entry () returns (fixed bin);
  3    57 dcl  trace_$specified_entrypoint_index	entry (fixed bin) returns (fixed bin);
  3    58 dcl  trace_$specify_entrypoints	entry (char (256) var, ptr);
  3    59 dcl  trace_$translator_id		entry (fixed bin) returns (fixed bin);
  3    60 
  3    61 /* LOCATIONS */
  3    62 
  3    63 dcl  trace_$location_ptr		entry (fixed bin) returns (ptr);
  3    64 dcl  trace_$location_seg_path		entry (fixed bin) returns (char (256) var);
  3    65 dcl  trace_$location_values		entry (fixed bin) returns (1 aligned like watch_values);
  3    66 dcl  trace_$num_locations		entry () returns (fixed bin);
  3    67 dcl  trace_$num_specified_locations	entry () returns (fixed bin);
  3    68 dcl  trace_$specified_location_index	entry (fixed bin) returns (fixed bin);
  3    69 dcl  trace_$specify_locations		entry (char (256) var);
  3    70 dcl  trace_$specify_changed_locations	entry ();
  3    71 
  3    72 /* EVENT BUFFER */
  3    73 
  3    74 dcl  trace_$buffer_counts		entry (fixed bin (34), fixed bin (34));
  3    75 dcl  trace_$buffer_event		entry (fixed bin (34), fixed bin, char (2), ptr unal, 1 like counts aligned, 1 like meters aligned);
  3    76 dcl  trace_$buffer_event_header	entry (fixed bin (34)) returns (char (256) var);
  3    77 dcl  trace_$buffer_event_string	entry (fixed bin (34)) returns (char (256) var);
  3    78 dcl  trace_$buffer_ptr		entry () returns (ptr unal);
  3    79 
  3    80 /* TRACE PARAMETERS */
  3    81 
  3    82 dcl  trace_$arguments		entry (fixed bin) returns (bit (2) aligned);
  3    83 dcl  trace_$set_arguments		entry (bit (2) aligned);
  3    84 dcl  trace_$call			entry (fixed bin) returns (char (256) var);
  3    85 dcl  trace_$set_call		entry (char (256) var);
  3    86 dcl  trace_$every			entry (fixed bin) returns (fixed bin (34));
  3    87 dcl  trace_$set_every		entry (fixed bin (34));
  3    88 dcl  trace_$first			entry (fixed bin) returns (fixed bin (34));
  3    89 dcl  trace_$set_first		entry (fixed bin (34));
  3    90 dcl  trace_$high			entry (fixed bin) returns (fixed bin (34));
  3    91 dcl  trace_$set_high		entry (fixed bin (34));
  3    92 dcl  trace_$last			entry (fixed bin) returns (fixed bin (34));
  3    93 dcl  trace_$set_last		entry (fixed bin (34));
  3    94 dcl  trace_$low			entry (fixed bin) returns (fixed bin (34));
  3    95 dcl  trace_$set_low			entry (fixed bin (34));
  3    96 dcl  trace_$new_high		entry (fixed bin) returns (bit aligned);
  3    97 dcl  trace_$set_new_high		entry (bit aligned);
  3    98 dcl  trace_$parms_string		entry (fixed bin, bit aligned) returns (char (256) var);
  3    99 dcl  trace_$parms_specified		entry () returns (bit aligned);
  3   100 dcl  trace_$stop			entry (fixed bin) returns (bit (2) aligned);
  3   101 dcl  trace_$set_stop		entry (bit (2) aligned);
  3   102 dcl  trace_$stop_every		entry (fixed bin) returns (fixed bin (34));
  3   103 dcl  trace_$set_stop_every		entry (fixed bin (34));
  3   104 dcl  trace_$stop_low		entry (fixed bin) returns (fixed bin (34));
  3   105 dcl  trace_$set_stop_low		entry (fixed bin (34));
  3   106 dcl  trace_$trace			entry (fixed bin) returns (bit (2) aligned);
  3   107 dcl  trace_$set_trace		entry (bit (2) aligned);
  3   108 
  3   109 /* GLOBAL PARAMETERS */
  3   110 
  3   111 dcl  trace_$alm			entry () returns (bit aligned);
  3   112 dcl  trace_$set_alm			entry (bit aligned);
  3   113 dcl  trace_$automatic		entry () returns (bit aligned);
  3   114 dcl  trace_$set_automatic		entry (bit aligned);
  3   115 dcl  trace_$buffer			entry () returns (bit aligned);
  3   116 dcl  trace_$set_buffer		entry (bit aligned);
  3   117 dcl  trace_$calibrate		entry () returns (bit aligned);
  3   118 dcl  trace_$set_calibrate		entry (bit aligned);
  3   119 dcl  trace_$compensation		entry (fixed bin) returns (1 aligned like compensation);
  3   120 dcl  trace_$set_compensation		entry (fixed bin, 1 aligned like compensation);
  3   121 dcl  trace_$enabled			entry () returns (bit aligned);
  3   122 dcl  trace_$set_enabled		entry (bit aligned);
  3   123 dcl  trace_$global_parms_string	entry () returns (char (256) var);
  3   124 dcl  trace_$long			entry () returns (bit aligned);
  3   125 dcl  trace_$set_long		entry (bit aligned);
  3   126 dcl  trace_$meter			entry () returns (bit aligned);
  3   127 dcl  trace_$set_meter		entry (bit aligned);
  3   128 dcl  trace_$output_switch		entry () returns (1 like output_switch aligned);
  3   129 dcl  trace_$set_output_switch		entry (1 like output_switch aligned);
  3   130 dcl  trace_$signals			entry () returns (bit aligned);
  3   131 dcl  trace_$set_signals		entry (bit aligned);
  3   132 dcl  trace_$stop_proc		entry () returns (1 like stop_proc);
  3   133 dcl  trace_$set_stop_proc		entry (1 like stop_proc);
  3   134 dcl  trace_$stop_routine		entry () returns (entry);
  3   135 dcl  trace_$set_stop_routine		entry (entry);
  3   136 dcl  trace_$trace_routine		entry () returns (entry);
  3   137 dcl  trace_$set_trace_routine		entry (entry);
  3   138 dcl  trace_$loud			entry () returns (bit aligned);
  3   139 dcl  trace_$set_loud		entry (bit aligned);
  3   140 
  3   141 /* MISCELLANEOUS */
  3   142 
  3   143 dcl  trace_$in_trace		entry () returns (bit aligned);
  3   144 
  3   145 /* STRUCTURES AND CONSTANTS */
  3   146 
  3   147 dcl  1 watch_values			aligned,
  3   148        2 old			bit (36),
  3   149        2 new			bit (36);
  3   150 
  3   151 dcl  1 counts			aligned,
  3   152        2 calls			fixed bin (53),	/* total number of calls			*/
  3   153        2 level			fixed bin (34),	/* current recursion level			*/
  3   154        2 max_level			fixed bin (34);	/* max ever recursion level			*/
  3   155 
  3   156 
  3   157 dcl  1 meters			aligned,
  3   158        2 real_time			fixed bin (53),	/* The total amount of real time metered.	*/
  3   159        2 vcpu_time			fixed bin (53),	/* The total amount of virtual cpu time metered.	*/
  3   160        2 page_faults		fixed bin (34);	/* The total number of page faults metered.	*/
  3   161 
  3   162 dcl  1 output_switch		aligned based,
  3   163        2 iocb_ptr			ptr,
  3   164        2 stream_name		char (32) var,
  3   165        2 file_path			char (256) var;
  3   166 
  3   167 dcl  1 stop_proc			aligned based,
  3   168        2 entry_value		entry (),
  3   169        2 entry_name			char (256) var;
  3   170 
  3   171 dcl  1 compensation			aligned,
  3   172        2 real_time			fixed bin (53),
  3   173        2 vcpu_time			fixed bin (53);
  3   174 
  3   175 dcl  (
  3   176      COMPENSATION_FROM_ENTRY_TO_ENTRY	init (1),
  3   177      COMPENSATION_FROM_ENTRY_TO_RETURN	init (2),
  3   178      COMPENSATION_FROM_RETURN_TO_ENTRY	init (3),
  3   179      COMPENSATION_FROM_RETURN_TO_RETURN init (4)
  3   180      )				static options (constant);
  3   181 
  3   182 /*  END OF:	trace_interface.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
      390 
      391 
      392 
      393   end watch;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    01/11/85  1035.0  watch.pl1                         >special_ldd>online>6972.pbf>watch.pl1
322          1    03/24/82  1347.2  condition_info_header.incl.pl1    >ldd>include>condition_info_header.incl.pl1
324          2    07/18/81  1100.0  sub_error_info.incl.pl1           >ldd>include>sub_error_info.incl.pl1
390          3    10/23/84  1349.5  trace_interface.incl.pl1          >ldd>include>trace_interface.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ME                              000000 constant        char(32)                 initial unaligned dcl 352 set ref 24* 43* 53* 59*
                                                                                  81* 115* 214* 255* 273* 279* 301* 305*
ZERO                            000046 constant        fixed bin(35,0)          initial dcl 353 set ref 214*
a_name_i                               parameter       char                     unaligned dcl 317 ref 287
action_flags              2            based           structure                level 3 dcl 2-7
action_i                               parameter       char                     unaligned dcl 261 set ref 222 227* 231 236* 238*
add_remove_action               000100 automatic       char(8)                  initial unaligned dcl 334 set ref 35* 92* 104* 136
                                                                                  136* 139 150 334*
arg                                    based           char                     unaligned dcl 363 set ref 57 63 67* 68 90 96 102 102
                                                                                  108 108 115*
arg_count                       000102 automatic       fixed bin(17,0)          initial dcl 335 set ref 40* 48 75 211 335*
arg_idx                         000103 automatic       fixed bin(17,0)          initial dcl 336 set ref 47* 48 50* 69* 69 75 78 93*
                                                                                  93 99* 99 105* 105 111* 111 336*
arg_len                         000104 automatic       fixed bin(21,0)          initial dcl 337 set ref 50* 57 63 67 67 68 90 96 102
                                                                                  102 108 108 115 115 337*
arg_ptr                         000106 automatic       pointer                  initial dcl 338 set ref 50* 57 63 67 68 90 96 102
                                                                                  102 108 108 115 338*
cant_restart              2            based           bit(1)                   level 4 packed unaligned dcl 2-7 ref 297
cleanup                         000124 stack reference condition                dcl 358 ref 20
code                            000110 automatic       fixed bin(35,0)          initial dcl 339 set ref 24* 40* 41 43* 50* 51 53*
                                                                                  59* 78* 79 81* 339*
com_err_                        000016 constant        entry                    external dcl 376 ref 24 43 53 59 81 115 214 273 279
                                                                                  301 305
comment_i                              parameter       char                     unaligned dcl 267 set ref 265 273* 279*
compensation                    000146 automatic       structure                level 1 dcl 3-171
condition_                      000020 constant        entry                    external dcl 377 ref 31
condition_info_header                  based           structure                level 1 dcl 1-6
condition_info_header_ptr       000100 automatic       pointer                  dcl 1-4 set ref 290*
continue_o                             parameter       bit(1)                   dcl 320 set ref 287 308* 312*
control_arg_i                          parameter       char                     unaligned dcl 267 set ref 265 273* 279*
counts                          000134 automatic       structure                level 1 dcl 3-151
cu_$arg_count                   000022 constant        entry                    external dcl 378 ref 40
cu_$arg_ptr                     000024 constant        entry                    external dcl 379 ref 50 78
default_restart           2(01)        based           bit(1)                   level 4 packed unaligned dcl 2-7 ref 295
error_table_$badopt             000010 external static fixed bin(35,0)          dcl 369 set ref 115*
error_table_$bigarg             000012 external static fixed bin(35,0)          dcl 370 set ref 279*
error_table_$noarg              000014 external static fixed bin(35,0)          dcl 371 set ref 273*
header                                 based           structure                level 2 dcl 2-7
info_ptr_i                             parameter       pointer                  dcl 318 ref 287 289
info_string               3            based           varying char(256)        level 3 dcl 2-7 set ref 301* 305*
ioa_                            000026 constant        entry                    external dcl 380 ref 184 194 198 200 205 207 211 249
ioa_$nnl                        000030 constant        entry                    external dcl 381 ref 227 236 238 255 257
loc_idx                         000155 automatic       fixed bin(17,0)          dcl 177 set ref 187* 188 191* 194* 197*
loc_ptr                         000156 automatic       pointer                  dcl 178 set ref 191* 192 195 198* 200*
max_arg_len_i                          parameter       fixed bin(21,0)          dcl 269 set ref 265 277 279*
mcptr_i                                parameter       pointer                  dcl 316 ref 287
meters                          000140 automatic       structure                level 1 dcl 3-157
n_added                         000152 automatic       fixed bin(17,0)          dcl 142 set ref 144* 145*
n_locations                     000111 automatic       fixed bin(17,0)          dcl 340 set ref 159* 160 162* 173
n_not_in_wt                     000160 automatic       fixed bin(17,0)          dcl 179 set ref 183* 188* 188 203 205 205* 207*
n_removed                       000154 automatic       fixed bin(17,0)          dcl 153 set ref 154* 155*
n_specified                     000112 automatic       fixed bin(17,0)          initial dcl 341 set ref 128* 130 134* 184 186 341*
n_things_said                   000113 automatic       fixed bin(17,0)          initial dcl 342 set ref 244* 249 255 258* 258 342*
n_updated                       000153 automatic       fixed bin(17,0)          dcl 143 set ref 144* 146 146*
name                    106            based           char(32)                 level 2 dcl 2-7 ref 291
new                       1     000132 automatic       bit(36)                  level 2 dcl 3-147 set ref 198 200*
next_arg                               based           char                     unaligned dcl 364 ref 85 85
next_arg_i                             parameter       char                     unaligned dcl 267 set ref 265 271 277
next_arg_idx                    000114 automatic       fixed bin(17,0)          initial dcl 343 set ref 343*
next_arg_len                    000115 automatic       fixed bin(21,0)          initial dcl 344 set ref 78* 85 85 344*
next_arg_ptr                    000116 automatic       pointer                  initial dcl 345 set ref 75* 78* 85 85 85* 345*
num_i                                  parameter       fixed bin(17,0)          dcl 262 set ref 231 236 236* 238*
old                             000132 automatic       bit(36)                  level 2 dcl 3-147 set ref 198 198* 200*
old_seg_no                      000161 automatic       bit(18)                  dcl 180 set ref 182* 192 195*
output_switch                          based           structure                level 1 dcl 3-162
quiet_restart             2(02)        based           bit(1)                   level 4 packed unaligned dcl 2-7 ref 293
specified_loc_idx               000162 automatic       fixed bin(17,0)          dcl 181 set ref 186* 187*
status                          000120 automatic       bit(1)                   initial dcl 346 set ref 20* 36* 110* 136 173 346*
status_code             104            based           fixed bin(35,0)          level 3 dcl 2-7 set ref 301* 305*
stop_proc                              based           structure                level 1 dcl 3-167
sub_error_info                         based           structure                level 1 dcl 2-7
sub_error_info_ptr              000102 automatic       pointer                  dcl 2-6 set ref 289* 291 293 293 295 297 301 301 305
                                                                                  305
support_signal            2(03)        based           bit(1)                   level 4 packed unaligned dcl 2-7 ref 293
syntax_i                               parameter       char                     unaligned dcl 267 set ref 265 273* 279* 279*
trace_$add_specified_locs       000040 constant        entry                    external dcl 3-21 ref 144
trace_$enabled                  000066 constant        entry                    external dcl 3-121 ref 164
trace_$in_trace                 000072 constant        entry                    external dcl 3-143 ref 166
trace_$location_ptr             000046 constant        entry                    external dcl 3-63 ref 191
trace_$location_seg_path        000050 constant        entry                    external dcl 3-64 ref 194
trace_$location_values          000052 constant        entry                    external dcl 3-65 ref 197
trace_$loud                     000070 constant        entry                    external dcl 3-138 ref 224 233
trace_$me                       000032 constant        entry                    external dcl 3-7 ref 291
trace_$num_entrypoints          000044 constant        entry                    external dcl 3-55 ref 168
trace_$num_locations            000054 constant        entry                    external dcl 3-66 ref 159
trace_$num_specified_locations  000056 constant        entry                    external dcl 3-67 ref 128
trace_$remove_specified_locs    000042 constant        entry                    external dcl 3-23 ref 154
trace_$specified_location_index 000060 constant        entry                    external dcl 3-68 ref 187
trace_$specify_changed_locations
                                000064 constant        entry                    external dcl 3-70 ref 98
trace_$specify_locations        000062 constant        entry                    external dcl 3-69 ref 68
trace_$transaction_begin        000034 constant        entry                    external dcl 3-12 ref 22
trace_$transaction_end          000036 constant        entry                    external dcl 3-14 ref 20 214
transaction_id                  000122 automatic       fixed bin(71,0)          initial dcl 347 set ref 19* 20* 22* 214* 347*
watch_values                    000132 automatic       structure                level 1 dcl 3-147 set ref 197*
wcptr_i                                parameter       pointer                  dcl 319 ref 287

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
COMPENSATION_FROM_ENTRY_TO_ENTRY       internal static fixed bin(17,0)          initial dcl 3-175
COMPENSATION_FROM_ENTRY_TO_RETURN      internal static fixed bin(17,0)          initial dcl 3-175
COMPENSATION_FROM_RETURN_TO_ENTRY      internal static fixed bin(17,0)          initial dcl 3-175
COMPENSATION_FROM_RETURN_TO_RETURN     internal static fixed bin(17,0)          initial dcl 3-175
sub_error_info_version_1               internal static fixed bin(17,0)          initial dcl 2-13
trace_$add_specified_eps        000000 constant        entry                    external dcl 3-20
trace_$alm                      000000 constant        entry                    external dcl 3-111
trace_$arguments                000000 constant        entry                    external dcl 3-82
trace_$automatic                000000 constant        entry                    external dcl 3-113
trace_$buffer                   000000 constant        entry                    external dcl 3-115
trace_$buffer_counts            000000 constant        entry                    external dcl 3-74
trace_$buffer_event             000000 constant        entry                    external dcl 3-75
trace_$buffer_event_header      000000 constant        entry                    external dcl 3-76
trace_$buffer_event_string      000000 constant        entry                    external dcl 3-77
trace_$buffer_ptr               000000 constant        entry                    external dcl 3-78
trace_$calibrate                000000 constant        entry                    external dcl 3-117
trace_$call                     000000 constant        entry                    external dcl 3-84
trace_$compensation             000000 constant        entry                    external dcl 3-119
trace_$cv_bit_to_onoff          000000 constant        entry                    external dcl 3-33
trace_$cv_bits_to_inout         000000 constant        entry                    external dcl 3-30
trace_$cv_entry_name_to_spp     000000 constant        entry                    external dcl 3-34
trace_$cv_file_path_to_osw      000000 constant        entry                    external dcl 3-35
trace_$cv_inout_to_bits         000000 constant        entry                    external dcl 3-29
trace_$cv_n_to_number           000000 constant        entry                    external dcl 3-31
trace_$cv_onoff_to_bit          000000 constant        entry                    external dcl 3-32
trace_$cv_stream_name_to_osw    000000 constant        entry                    external dcl 3-36
trace_$entrypoint_counts        000000 constant        entry                    external dcl 3-40
trace_$entrypoint_global_meters 000000 constant        entry                    external dcl 3-41
trace_$entrypoint_index         000000 constant        entry                    external dcl 3-49
trace_$entrypoint_local_meters  000000 constant        entry                    external dcl 3-42
trace_$entrypoint_name          000000 constant        entry                    external dcl 3-50
trace_$entrypoint_ptr           000000 constant        entry                    external dcl 3-51
trace_$entrypoint_seg_path      000000 constant        entry                    external dcl 3-52
trace_$entrypoint_status        000000 constant        entry                    external dcl 3-53
trace_$every                    000000 constant        entry                    external dcl 3-86
trace_$first                    000000 constant        entry                    external dcl 3-88
trace_$function                 000000 constant        entry                    external dcl 3-54
trace_$global_parms_string      000000 constant        entry                    external dcl 3-123
trace_$high                     000000 constant        entry                    external dcl 3-90
trace_$last                     000000 constant        entry                    external dcl 3-92
trace_$long                     000000 constant        entry                    external dcl 3-124
trace_$low                      000000 constant        entry                    external dcl 3-94
trace_$meter                    000000 constant        entry                    external dcl 3-126
trace_$metered                  000000 constant        entry                    external dcl 3-43
trace_$new_high                 000000 constant        entry                    external dcl 3-96
trace_$num_specified_entrypoints
                                000000 constant        entry                    external dcl 3-56
trace_$output_switch            000000 constant        entry                    external dcl 3-128
trace_$parms_specified          000000 constant        entry                    external dcl 3-99
trace_$parms_string             000000 constant        entry                    external dcl 3-98
trace_$remove_specified_eps     000000 constant        entry                    external dcl 3-22
trace_$removed                  000000 constant        entry                    external dcl 3-44
trace_$reset_meters             000000 constant        entry                    external dcl 3-45
trace_$set_alm                  000000 constant        entry                    external dcl 3-112
trace_$set_arguments            000000 constant        entry                    external dcl 3-83
trace_$set_automatic            000000 constant        entry                    external dcl 3-114
trace_$set_buffer               000000 constant        entry                    external dcl 3-116
trace_$set_calibrate            000000 constant        entry                    external dcl 3-118
trace_$set_call                 000000 constant        entry                    external dcl 3-85
trace_$set_compensation         000000 constant        entry                    external dcl 3-120
trace_$set_enabled              000000 constant        entry                    external dcl 3-122
trace_$set_every                000000 constant        entry                    external dcl 3-87
trace_$set_first                000000 constant        entry                    external dcl 3-89
trace_$set_high                 000000 constant        entry                    external dcl 3-91
trace_$set_last                 000000 constant        entry                    external dcl 3-93
trace_$set_long                 000000 constant        entry                    external dcl 3-125
trace_$set_loud                 000000 constant        entry                    external dcl 3-139
trace_$set_low                  000000 constant        entry                    external dcl 3-95
trace_$set_meter                000000 constant        entry                    external dcl 3-127
trace_$set_new_high             000000 constant        entry                    external dcl 3-97
trace_$set_output_switch        000000 constant        entry                    external dcl 3-129
trace_$set_signals              000000 constant        entry                    external dcl 3-131
trace_$set_stop                 000000 constant        entry                    external dcl 3-101
trace_$set_stop_every           000000 constant        entry                    external dcl 3-103
trace_$set_stop_low             000000 constant        entry                    external dcl 3-105
trace_$set_stop_proc            000000 constant        entry                    external dcl 3-133
trace_$set_stop_routine         000000 constant        entry                    external dcl 3-135
trace_$set_trace                000000 constant        entry                    external dcl 3-107
trace_$set_trace_routine        000000 constant        entry                    external dcl 3-137
trace_$signals                  000000 constant        entry                    external dcl 3-130
trace_$specified_entrypoint_index
                                000000 constant        entry                    external dcl 3-57
trace_$specify_entrypoints      000000 constant        entry                    external dcl 3-58
trace_$stop                     000000 constant        entry                    external dcl 3-100
trace_$stop_every               000000 constant        entry                    external dcl 3-102
trace_$stop_low                 000000 constant        entry                    external dcl 3-104
trace_$stop_proc                000000 constant        entry                    external dcl 3-132
trace_$stop_routine             000000 constant        entry                    external dcl 3-134
trace_$trace                    000000 constant        entry                    external dcl 3-106
trace_$trace_routine            000000 constant        entry                    external dcl 3-136
trace_$transaction_begin_force  000000 constant        entry                    external dcl 3-13
trace_$translator_id            000000 constant        entry                    external dcl 3-59
trace_$turn_off_specified_eps   000000 constant        entry                    external dcl 3-25
trace_$turn_on_specified_eps    000000 constant        entry                    external dcl 3-24
trace_$update_default_parms     000000 constant        entry                    external dcl 3-18
trace_$update_global_parms      000000 constant        entry                    external dcl 3-19
trace_$version                  000000 constant        entry                    external dcl 3-8

NAMES DECLARED BY EXPLICIT CONTEXT.
ARGUMENT_LOOP                   000644 constant        label                    dcl 48
CHECK_NEXT_ARG                  002244 constant        entry                    internal dcl 265 ref 67
CONTINUE                        002556 constant        label                    dcl 312 ref 291 299
CONTROL_ARGUMENT                001031 constant        label                    dcl 72
ENTRYPOINTS_ARGUMENT            000740 constant        label                    dcl 63
HANDLED                         002553 constant        label                    dcl 308 ref 293
INIT                            002204 constant        entry                    internal dcl 253 ref 226 235
LOCATION_ACTION                 001234 constant        label                    dcl 130
REPORT                          002524 constant        label                    dcl 305 ref 295
REPORT_AND_ABORT                002472 constant        label                    dcl 301 ref 297
SAY                             002011 constant        entry                    internal dcl 222 ref 160 164 166 168
SAY_BEGIN                       002162 constant        entry                    internal dcl 242 ref 126
SAY_END                         002165 constant        entry                    internal dcl 247 ref 171
SAY_N_LOCATIONS                 002055 constant        entry                    internal dcl 231 ref 134 145 146 155 162
STATUS                          001452 constant        label                    dcl 173
SUB_ERROR_HANDLER               002424 constant        entry                    internal dcl 287 ref 31 31
TRANSACTION_END                 001750 constant        label                    dcl 214 ref 44 54 60 82 116 274 281 303
watch                           000444 constant        entry                    external dcl 14

NAMES DECLARED BY CONTEXT OR IMPLICATION.
addr                                                   builtin function         ref 271
baseno                                                 builtin function         ref 192 195
clock                                                  builtin function         ref 19
length                                                 builtin function         ref 57 85 277
null                                                   builtin function         ref 75 85 271 290 338 345
substr                                                 builtin function         ref 63 85

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      3206        3302    2661        3216
Length      3614    2661        74         276     324           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
watch                               476 external procedure  is an external procedure.  
on unit on line 20                   70 on unit               
begin block on line 139                 begin block         shares stack frame of external procedure watch.  
begin block on line 150                 begin block         shares stack frame of external procedure watch.  
begin block on line 173                 begin block         shares stack frame of external procedure watch.  
SAY                                     internal procedure  shares stack frame of external procedure watch.  
INIT                                    internal procedure  shares stack frame of external procedure watch.  
CHECK_NEXT_ARG                          internal procedure  shares stack frame of external procedure watch.  
SUB_ERROR_HANDLER                   100 internal procedure  is assigned to an entry variable.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
SUB_ERROR_HANDLER        000100 condition_info_header_ptr   SUB_ERROR_HANDLER
                         000102 sub_error_info_ptr          SUB_ERROR_HANDLER
watch                    000100 add_remove_action           watch
                         000102 arg_count                   watch
                         000103 arg_idx                     watch
                         000104 arg_len                     watch
                         000106 arg_ptr                     watch
                         000110 code                        watch
                         000111 n_locations                 watch
                         000112 n_specified                 watch
                         000113 n_things_said               watch
                         000114 next_arg_idx                watch
                         000115 next_arg_len                watch
                         000116 next_arg_ptr                watch
                         000120 status                      watch
                         000122 transaction_id              watch
                         000132 watch_values                watch
                         000134 counts                      watch
                         000140 meters                      watch
                         000146 compensation                watch
                         000152 n_added                     begin block on line 139
                         000153 n_updated                   begin block on line 139
                         000154 n_removed                   begin block on line 150
                         000155 loc_idx                     begin block on line 173
                         000156 loc_ptr                     begin block on line 173
                         000160 n_not_in_wt                 begin block on line 173
                         000161 old_seg_no                  begin block on line 173
                         000162 specified_loc_idx           begin block on line 173

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              tra_ext             enable              ext_entry
int_entry           int_entry_desc      clock

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      condition_                    cu_$arg_count                 cu_$arg_ptr
ioa_                          ioa_$nnl                      trace_$add_specified_locs     trace_$enabled
trace_$in_trace               trace_$location_ptr           trace_$location_seg_path      trace_$location_values
trace_$loud                   trace_$me                     trace_$num_entrypoints        trace_$num_locations
trace_$num_specified_locations                              trace_$remove_specified_locs
trace_$specified_location_index                             trace_$specify_changed_locations
trace_$specify_locations      trace_$transaction_begin      trace_$transaction_end

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$badopt           error_table_$bigarg           error_table_$noarg


CONSTANTS
002562  aa     000002000000
002563  aa     000002000000
002564  aa     600000000041
002565  aa     000262000000
002566  ta     000027000000
002567  aa     000000000000

002570  aa     000004000000
002571  aa     000004000000
002572  aa     600000000041
002573  aa     000111000000
002574  aa     600000000041
002575  aa     000214000000
002576  ta     000060000000
002577  aa     000000000000
002600  ta     000030000000
002601  aa     000000000000

002602  aa     000002000000
002603  aa     000002000000
002604  aa     600000000041
002605  aa     000214000000
002606  ta     000031000000
002607  aa     000000000000

002610  aa     000004000000
002611  aa     000004000000
002612  aa     600000000041
002613  aa     000154000000
002614  aa     600000000041
002615  aa     000420000000
002616  ta     000060000000
002617  aa     000000000000
002620  ta     000024000000
002621  aa     000000000000

002622  aa     000004000000
002623  aa     000004000000
002624  aa     600000000041
002625  aa     000153000000
002626  aa     600000000041
002627  aa     000412000000
002630  ta     000060000000
002631  aa     000000000000
002632  ta     000024000000
002633  aa     000000000000

002634  aa     000004000000
002635  aa     000004000000
002636  aa     600000000041
002637  aa     000152000000
002640  aa     600000000041
002641  aa     000412000000
002642  ta     000060000000
002643  aa     000000000000
002644  ta     000042000000
002645  aa     000000000000

002646  aa     000004000000
002647  aa     000004000000
002650  aa     600000000041
002651  aa     000112000000
002652  aa     600000000041
002653  aa     000214000000
002654  ta     000060000000
002655  aa     000000000000
002656  ta     000041000000
002657  aa     000000000000

000000  aa  167 141 164 143	watc
000001  aa  150 040 040 040	h   
000002  aa  040 040 040 040	    
000003  aa  040 040 040 040	    
000004  aa  040 040 040 040	    
000005  aa  040 040 040 040	    
000006  aa  040 040 040 040	    
000007  aa  040 040 040 040	    

000010  aa     524000000103

000011  aa     524000000027

000012  aa  136 141 072 040	^a: 

000013  aa     524000000001

000014  aa     526077777777

000015  aa     524000000072

000016  aa     524000000071

000017  aa     524000000022

000020  aa     514000000044

000021  aa     524000000024

000022  aa     524000000002

000023  aa     524000000064

000024  aa     524000000007

000025  aa     524000000066

000026  aa     524000000033

000027  aa     524000000035

000030  aa     524000000016

000031  aa     524000000021

000032  aa  141 144 144 000	add

000033  aa     524000000004

000034  aa  042 136 141 042	"^a"

000035  aa  055 163 164 000	-st

000036  aa  055 162 155 000	-rm

000037  aa  055 141 144 144	-add

000040  aa     524000000015

000041  aa     524000000011

000042  aa     524000000005

000043  aa     404000000025

000044  aa     526000000000

002660  aa  055 000 000 000	-

000045  aa     524000000070

000046  aa     000000000000

000047  aa     524000000012

000050  aa     524000000171

000051  aa     404000000043

000052  aa     500000000000

000053  aa     466000000000

000054  aa     530000000040

000055  aa     530000000400

000056  aa     464000000000

000057  aa     530000000101

000060  aa     404000000021

000061  aa     404000000042

000062  aa     524000000010

000063  aa     514000000002

000064  aa     514000000001

000065  aa     526000000040

000066  aa  162 145 155 157	remo
000067  aa  166 145 144 000	ved

000070  aa  165 160 144 141	upda
000071  aa  164 145 144 000	ted

000072  aa  141 144 144 145	adde
000073  aa  144 000 000 000	d

000074  aa     000000000000
000075  aa     000000000000

000076  aa  162 145 155 157	remo
000077  aa  166 145 000 000	ve

000100  aa  055 163 164 141	-sta
000101  aa  164 165 163 000	tus

000102  aa  162 145 155 157	remo
000103  aa  166 145 040 040	ve  

000104  aa  055 162 145 155	-rem
000105  aa  157 166 145 000	ove

000106  aa  055 143 150 141	-cha
000107  aa  156 147 145 144	nged

000110  aa  141 144 144 040	add 
000111  aa  040 040 040 040	    

000112  aa     077777000043
000113  aa     000001000000

000114  aa  167 141 164 143	watc
000115  aa  150 000 000 000	h

000116  aa  040 040 040 040	    
000117  aa  040 040 040 040	    

000120  aa  143 154 145 141	clea
000121  aa  156 165 160 000	nup

000122  aa  136 144 040 154	^d l
000123  aa  157 143 163 040	ocs 
000124  aa  136 141 000 000	^a

000125  aa  136 144 040 154	^d l
000126  aa  157 143 040 136	oc ^
000127  aa  141 000 000 000	a

000130  aa  163 160 145 143	spec
000131  aa  151 146 151 145	ifie
000132  aa  144 000 000 000	d

000133  aa  154 157 143 141	loca
000134  aa  164 151 157 156	tion
000135  aa  163 000 000 000	s

000136  aa  163 165 142 137	sub_
000137  aa  145 162 162 157	erro
000140  aa  162 137 000 000	r_

000141  aa     504000000002
000142  aa     410000000065
000143  aa     410000000065

000144  aa     504000000002
000145  aa     514000000044
000146  aa     514000000044

000147  aa     504000000002
000150  aa     500000000000
000151  aa     530000000400

000152  aa  151 156 040 167	in w
000153  aa  141 164 143 150	atch
000154  aa  040 164 141 142	 tab
000155  aa  154 145 000 000	le

000156  aa  040 143 157 156	 con
000157  aa  164 162 157 154	trol
000160  aa  137 141 162 147	_arg
000161  aa  163 000 000 000	s

000162  aa     504000000003
000163  aa     410000000065
000164  aa     410000000065
000165  aa     404000000042

000166  aa     504000000003
000167  aa     410000000065
000170  aa     404000000042
000171  aa     404000000042

000172  aa     504000000003
000173  aa     464000000000
000174  aa     530000000040
000175  aa     530000000400

000176  aa  136 062 060 170	^20x
000177  aa  136 167 040 055	^w -
000200  aa  076 040 136 167	> ^w
000201  aa  040 141 164 040	 at 
000202  aa  136 160 000 000	^p

000203  aa  136 062 060 170	^20x
000204  aa  136 167 040 040	^w  
000205  aa  040 040 136 061	  ^1
000206  aa  062 170 040 141	2x a
000207  aa  164 040 136 160	t ^p

000210  aa  164 162 141 143	trac
000211  aa  145 040 164 141	e ta
000212  aa  142 154 145 040	ble 
000213  aa  145 155 160 164	empt
000214  aa  171 000 000 000	y

000215  aa  164 162 141 143	trac
000216  aa  145 040 151 163	e is
000217  aa  040 144 151 163	 dis
000220  aa  141 142 154 145	able
000221  aa  144 000 000 000	d

000222  aa  167 141 164 143	watc
000223  aa  150 040 164 141	h ta
000224  aa  142 154 145 040	ble 
000225  aa  145 155 160 164	empt
000226  aa  171 000 000 000	y

000227  aa  124 150 145 040	The 
000230  aa  163 171 156 164	synt
000231  aa  141 170 040 151	ax i
000232  aa  163 072 040 136	s: ^
000233  aa  141 040 136 141	a ^a
000234  aa  136 141 056 000	^a.

000235  aa  101 143 164 163	Acts
000236  aa  072 040 055 141	: -a
000237  aa  144 144 057 055	dd/-
000240  aa  162 145 155 157	remo
000241  aa  166 145 040 055	ve -
000242  aa  163 164 141 164	stat
000243  aa  165 163 056 000	us.

000244  aa  164 162 141 143	trac
000245  aa  145 040 151 163	e is
000246  aa  040 164 145 155	 tem
000247  aa  160 157 162 141	pora
000250  aa  162 151 154 171	rily
000251  aa  040 144 151 163	 dis
000252  aa  141 142 154 145	able
000253  aa  144 000 000 000	d

000254  aa  111 146 040 171	If y
000255  aa  157 165 040 167	ou w
000256  aa  141 156 164 040	ant 
000257  aa  163 164 141 164	stat
000260  aa  165 163 054 040	us, 
000261  aa  171 157 165 040	you 
000262  aa  155 165 163 164	must
000263  aa  040 163 160 145	 spe
000264  aa  143 151 146 171	cify
000265  aa  040 163 157 155	 som
000266  aa  145 040 154 157	e lo
000267  aa  143 141 164 151	cati
000270  aa  157 156 163 056	ons.

000271  aa  124 150 151 163	This
000272  aa  040 151 156 166	 inv
000273  aa  157 143 141 164	ocat
000274  aa  151 157 156 040	ion 
000275  aa  157 146 040 164	of t
000276  aa  150 145 040 167	he w
000277  aa  141 164 143 150	atch
000300  aa  040 143 157 155	 com
000301  aa  155 141 156 144	mand
000302  aa  040 145 156 144	 end
000303  aa  145 144 040 141	ed a
000304  aa  142 156 157 162	bnor
000305  aa  155 141 154 154	mall
000306  aa  171 056 000 000	y.

000307  aa  101 040 156 165	A nu
000310  aa  154 154 040 141	ll a
000311  aa  162 147 165 155	rgum
000312  aa  145 156 164 040	ent 
000313  aa  167 141 163 040	was 
000314  aa  146 157 165 156	foun
000315  aa  144 040 167 150	d wh
000316  aa  145 162 145 040	ere 
000317  aa  141 040 154 157	a lo
000320  aa  143 141 164 151	cati
000321  aa  157 156 040 167	on w
000322  aa  141 163 040 145	as e
000323  aa  170 160 145 143	xpec
000324  aa  164 145 144 056	ted.

000325  aa  136 144 040 157	^d o
000326  aa  146 040 164 150	f th
000327  aa  145 040 163 160	e sp
000330  aa  145 143 151 146	ecif
000331  aa  151 145 144 040	ied 
000332  aa  154 157 143 141	loca
000333  aa  164 151 157 156	tion
000334  aa  163 040 167 145	s we
000335  aa  162 145 040 156	re n
000336  aa  157 164 040 151	ot i
000337  aa  156 040 164 150	n th
000340  aa  145 040 167 141	e wa
000341  aa  164 143 150 040	tch 
000342  aa  164 141 142 154	tabl
000343  aa  145 056 000 000	e.

000344  aa  136 144 040 157	^d o
000345  aa  146 040 164 150	f th
000346  aa  145 040 163 160	e sp
000347  aa  145 143 151 146	ecif
000350  aa  151 145 144 040	ied 
000351  aa  154 157 143 141	loca
000352  aa  164 151 157 156	tion
000353  aa  163 040 167 141	s wa
000354  aa  163 040 156 157	s no
000355  aa  164 040 151 156	t in
000356  aa  040 164 150 145	 the
000357  aa  040 167 141 164	 wat
000360  aa  143 150 040 164	ch t
000361  aa  141 142 154 145	able
000362  aa  056 000 000 000	.

000363  aa  124 150 145 040	The 
000364  aa  155 141 170 151	maxi
000365  aa  155 165 155 040	mum 
000366  aa  154 145 156 147	leng
000367  aa  164 150 040 146	th f
000370  aa  157 162 040 136	or ^
000371  aa  141 040 151 163	a is
000372  aa  040 136 144 040	 ^d 
000373  aa  143 150 141 162	char
000374  aa  141 143 164 145	acte
000375  aa  162 163 056 012	rs.

000376  aa  124 150 145 040	The 
000377  aa  163 171 156 164	synt
000400  aa  141 170 040 151	ax i
000401  aa  163 072 040 136	s: ^
000402  aa  141 040 136 141	a ^a
000403  aa  136 141 056 000	^a.

000404  aa  124 150 145 162	Ther
000405  aa  145 040 163 145	e se
000406  aa  145 155 163 040	ems 
000407  aa  164 157 040 142	to b
000410  aa  145 040 141 156	e an
000411  aa  040 151 156 143	 inc
000412  aa  157 155 160 154	ompl
000413  aa  145 164 145 040	ete 
000414  aa  151 156 166 157	invo
000415  aa  143 141 164 151	cati
000416  aa  157 156 040 157	on o
000417  aa  146 040 164 162	f tr
000420  aa  141 143 145 054	ace,
000421  aa  012 167 141 164	
wat
000422  aa  143 150 054 040	ch, 
000423  aa  157 162 040 164	or t
000424  aa  162 141 143 145	race
000425  aa  137 155 145 164	_met
000426  aa  145 162 163 040	ers 
000427  aa  163 164 151 154	stil
000430  aa  154 040 157 156	l on
000431  aa  040 164 150 145	 the
000432  aa  040 163 164 141	 sta
000433  aa  143 153 056 040	ck. 
000434  aa  040 124 162 171	 Try
000435  aa  040 164 150 145	 the
000436  aa  040 162 145 154	 rel
000437  aa  145 141 163 145	ease
000440  aa  040 143 157 155	 com
000441  aa  155 141 156 144	mand
000442  aa  056 000 000 000	.

BEGIN PROCEDURE watch
ENTRY TO watch                                              STATEMENT 1 ON LINE 14
watch:
  procedure options (variable);

000443  da     000302240000
000444  aa   000740 6270 00	eax7 	480
000445  aa  7 00034 3521 20	epp2 	pr7|28,*
000446  aa  2 01045 2721 00	tsp2 	pr2|549		ext_entry
000447  aa     000000000000
000450  aa     000000000000
						STATEMENT 1 ON LINE 334
000451  aa   777445 2370 04	ldaq 	-219,ic		000116 = 040040040040 040040040040
000452  aa  6 00100 7571 00	staq 	pr6|64		add_remove_action
						STATEMENT 1 ON LINE 335
000453  aa  6 00102 4501 00	stz  	pr6|66		arg_count
						STATEMENT 1 ON LINE 336
000454  aa  6 00103 4501 00	stz  	pr6|67		arg_idx
						STATEMENT 1 ON LINE 337
000455  aa  6 00104 4501 00	stz  	pr6|68		arg_len
						STATEMENT 1 ON LINE 338
000456  aa   777434 2370 04	ldaq 	-228,ic		000112 = 077777000043 000001000000
000457  aa  6 00106 7571 00	staq 	pr6|70		arg_ptr
						STATEMENT 1 ON LINE 339
000460  aa  6 00110 4501 00	stz  	pr6|72		code
						STATEMENT 1 ON LINE 341
000461  aa  6 00112 4501 00	stz  	pr6|74		n_specified
						STATEMENT 1 ON LINE 342
000462  aa  6 00113 4501 00	stz  	pr6|75		n_things_said
						STATEMENT 1 ON LINE 343
000463  aa  6 00114 4501 00	stz  	pr6|76		next_arg_idx
						STATEMENT 1 ON LINE 344
000464  aa  6 00115 4501 00	stz  	pr6|77		next_arg_len
						STATEMENT 1 ON LINE 345
000465  aa  6 00116 7571 00	staq 	pr6|78		next_arg_ptr
						STATEMENT 1 ON LINE 346
000466  aa  6 00120 4501 00	stz  	pr6|80		status
						STATEMENT 1 ON LINE 347
000467  aa   777405 2370 04	ldaq 	-251,ic		000074 = 000000000000 000000000000
000470  aa  6 00122 7571 00	staq 	pr6|82		transaction_id
						STATEMENT 1 ON LINE 19
    transaction_id = clock ();

000471  aa  0 01435 7001 00	tsx0 	pr0|797		clock
000472  aa  6 00122 7571 00	staq 	pr6|82		transaction_id
						STATEMENT 1 ON LINE 20
    on cleanup status = trace_$transaction_end (transaction_id);

000473  aa   000007 7260 07	lxl6 	7,dl
000474  aa   777424 3520 04	epp2 	-236,ic		000120 = 143154145141
000475  aa  0 00717 7001 00	tsx0 	pr0|463		enable
000476  aa   000004 7100 04	tra  	4,ic		000502
000477  aa     000124000000
000500  aa   000021 7100 04	tra  	17,ic		000521
BEGIN CONDITION cleanup.1
ENTRY TO cleanup.1                                          STATEMENT 1 ON LINE 20
    on cleanup status = trace_$transaction_end (transaction_id);

000501  da     000310200000
000502  aa   000120 6270 00	eax7 	80
000503  aa  7 00034 3521 20	epp2 	pr7|28,*
000504  aa  2 01047 2721 00	tsp2 	pr2|551		int_entry
000505  aa     000000000000
000506  aa     000000000000
000507  aa  6 00040 3735 20	epp7 	pr6|32,*
000510  aa  7 00122 3521 00	epp2 	pr7|82		transaction_id
000511  aa  6 00102 2521 00	spri2	pr6|66
000512  aa  7 00120 3521 00	epp2 	pr7|80		status
000513  aa  6 00104 2521 00	spri2	pr6|68
000514  aa  6 00100 6211 00	eax1 	pr6|64
000515  aa   010000 4310 07	fld  	4096,dl
000516  la  4 00036 3521 20	epp2 	pr4|30,*		trace_$transaction_end
000517  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
000520  aa  0 00631 7101 00	tra  	pr0|409		return
  END CONDITION cleanup.1
						STATEMENT 1 ON LINE 22
    if ^trace_$transaction_begin (transaction_id) /* Temporarily disables trace_catch_.			*/
    then do;

000521  aa  6 00122 3521 00	epp2 	pr6|82		transaction_id
000522  aa  6 00216 2521 00	spri2	pr6|142
000523  aa  6 00212 3521 00	epp2 	pr6|138
000524  aa  6 00220 2521 00	spri2	pr6|144
000525  aa  6 00214 6211 00	eax1 	pr6|140
000526  aa   010000 4310 07	fld  	4096,dl
000527  aa  6 00044 3701 20	epp4 	pr6|36,*
000530  la  4 00034 3521 20	epp2 	pr4|28,*		trace_$transaction_begin
000531  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
000532  aa  6 00212 2351 00	lda  	pr6|138
000533  aa   400000 3150 03	cana 	131072,du
000534  aa   000026 6010 04	tnz  	22,ic		000562
						STATEMENT 1 ON LINE 24
      call com_err_ (code, ME, "There seems to be an incomplete invocation of trace,
watch, or trace_meters still on the stack.  Try the release command.");

000535  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
000536  aa   777647 00 0174	desc9a	-89,124		000404 = 124150145162
000537  aa  6 00222 00 0174	desc9a	pr6|146,124
000540  aa  6 00110 3521 00	epp2 	pr6|72		code
000541  aa  6 00264 2521 00	spri2	pr6|180
000542  aa   777236 3520 04	epp2 	-354,ic		000000 = 167141164143
000543  aa  6 00266 2521 00	spri2	pr6|182
000544  aa  6 00222 3521 00	epp2 	pr6|146
000545  aa  6 00270 2521 00	spri2	pr6|184
000546  aa   777303 3520 04	epp2 	-317,ic		000051 = 404000000043
000547  aa  6 00272 2521 00	spri2	pr6|186
000550  aa   777315 3520 04	epp2 	-307,ic		000065 = 526000000040
000551  aa  6 00274 2521 00	spri2	pr6|188
000552  aa   777276 3520 04	epp2 	-322,ic		000050 = 524000000171
000553  aa  6 00276 2521 00	spri2	pr6|190
000554  aa  6 00262 6211 00	eax1 	pr6|178
000555  aa   014000 4310 07	fld  	6144,dl
000556  aa  6 00044 3701 20	epp4 	pr6|36,*
000557  la  4 00016 3521 20	epp2 	pr4|14,*		com_err_
000560  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 26
      return;

000561  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 27
    end;

						STATEMENT 1 ON LINE 31
    call condition_ ("sub_error_", SUB_ERROR_HANDLER);

000562  aa   777354 2370 04	ldaq 	-276,ic		000136 = 163165142137 145162162157
000563  aa  6 00214 7571 00	staq 	pr6|140
000564  aa   162137 2350 03	lda  	58463,du
000565  aa  6 00216 7551 00	sta  	pr6|142
000566  aa   001636 3520 04	epp2 	926,ic		002424 = 000160627000
000567  aa  6 00262 2521 00	spri2	pr6|178		cp.225
000570  aa  6 00264 6521 00	spri6	pr6|180		cp.225
000571  aa  6 00214 3521 00	epp2 	pr6|140
000572  aa  6 00224 2521 00	spri2	pr6|148
000573  aa  6 00262 3521 00	epp2 	pr6|178		cp.225
000574  aa  6 00226 2521 00	spri2	pr6|150
000575  aa   777252 3520 04	epp2 	-342,ic		000047 = 524000000012
000576  aa  6 00230 2521 00	spri2	pr6|152
000577  aa   777253 3520 04	epp2 	-341,ic		000052 = 500000000000
000600  aa  6 00232 2521 00	spri2	pr6|154
000601  aa  6 00222 6211 00	eax1 	pr6|146
000602  aa   010000 4310 07	fld  	4096,dl
000603  aa  6 00044 3701 20	epp4 	pr6|36,*
000604  la  4 00020 3521 20	epp2 	pr4|16,*		condition_
000605  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 35
    add_remove_action = "";

000606  aa   777310 2370 04	ldaq 	-312,ic		000116 = 040040040040 040040040040
000607  aa  6 00100 7571 00	staq 	pr6|64		add_remove_action
						STATEMENT 1 ON LINE 36
    status = "0"b;

000610  aa  6 00120 4501 00	stz  	pr6|80		status
						STATEMENT 1 ON LINE 40
    call cu_$arg_count (arg_count, code);

000611  aa  6 00102 3521 00	epp2 	pr6|66		arg_count
000612  aa  6 00216 2521 00	spri2	pr6|142
000613  aa  6 00110 3521 00	epp2 	pr6|72		code
000614  aa  6 00220 2521 00	spri2	pr6|144
000615  aa  6 00214 6211 00	eax1 	pr6|140
000616  aa   010000 4310 07	fld  	4096,dl
000617  aa  6 00044 3701 20	epp4 	pr6|36,*
000620  la  4 00022 3521 20	epp2 	pr4|18,*		cu_$arg_count
000621  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 41
    if code ^= 0
    then do;

000622  aa  6 00110 2361 00	ldq  	pr6|72		code
000623  aa   000017 6000 04	tze  	15,ic		000642
						STATEMENT 1 ON LINE 43
      call com_err_ (code, ME);

000624  aa  6 00110 3521 00	epp2 	pr6|72		code
000625  aa  6 00264 2521 00	spri2	pr6|180
000626  aa   777152 3520 04	epp2 	-406,ic		000000 = 167141164143
000627  aa  6 00266 2521 00	spri2	pr6|182
000630  aa   777221 3520 04	epp2 	-367,ic		000051 = 404000000043
000631  aa  6 00270 2521 00	spri2	pr6|184
000632  aa   777233 3520 04	epp2 	-357,ic		000065 = 526000000040
000633  aa  6 00272 2521 00	spri2	pr6|186
000634  aa  6 00262 6211 00	eax1 	pr6|178
000635  aa   010000 4310 07	fld  	4096,dl
000636  aa  6 00044 3701 20	epp4 	pr6|36,*
000637  la  4 00016 3521 20	epp2 	pr4|14,*		com_err_
000640  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 44
      go to TRANSACTION_END;

000641  aa   001107 7100 04	tra  	583,ic		001750
						STATEMENT 1 ON LINE 45
    end;

						STATEMENT 1 ON LINE 47
    arg_idx = 1;

000642  aa   000001 2360 07	ldq  	1,dl
000643  aa  6 00103 7561 00	stq  	pr6|67		arg_idx
						STATEMENT 1 ON LINE 48
ARGUMENT_LOOP:
    do while (arg_idx <= arg_count);

000644  aa  6 00103 2361 00	ldq  	pr6|67		arg_idx
000645  aa  6 00102 1161 00	cmpq 	pr6|66		arg_count
000646  aa   000354 6054 04	tpnz 	236,ic		001222
						STATEMENT 1 ON LINE 50
      call cu_$arg_ptr (arg_idx, arg_ptr, arg_len, code);

000647  aa  6 00103 3521 00	epp2 	pr6|67		arg_idx
000650  aa  6 00264 2521 00	spri2	pr6|180
000651  aa  6 00106 3521 00	epp2 	pr6|70		arg_ptr
000652  aa  6 00266 2521 00	spri2	pr6|182
000653  aa  6 00104 3521 00	epp2 	pr6|68		arg_len
000654  aa  6 00270 2521 00	spri2	pr6|184
000655  aa  6 00110 3521 00	epp2 	pr6|72		code
000656  aa  6 00272 2521 00	spri2	pr6|186
000657  aa  6 00262 6211 00	eax1 	pr6|178
000660  aa   020000 4310 07	fld  	8192,dl
000661  aa  6 00044 3701 20	epp4 	pr6|36,*
000662  la  4 00024 3521 20	epp2 	pr4|20,*		cu_$arg_ptr
000663  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 51
      if code ^= 0
      then do;

000664  aa  6 00110 2361 00	ldq  	pr6|72		code
000665  aa   000017 6000 04	tze  	15,ic		000704
						STATEMENT 1 ON LINE 53
        call com_err_ (code, ME);

000666  aa  6 00110 3521 00	epp2 	pr6|72		code
000667  aa  6 00264 2521 00	spri2	pr6|180
000670  aa   777110 3520 04	epp2 	-440,ic		000000 = 167141164143
000671  aa  6 00266 2521 00	spri2	pr6|182
000672  aa   777157 3520 04	epp2 	-401,ic		000051 = 404000000043
000673  aa  6 00270 2521 00	spri2	pr6|184
000674  aa   777171 3520 04	epp2 	-391,ic		000065 = 526000000040
000675  aa  6 00272 2521 00	spri2	pr6|186
000676  aa  6 00262 6211 00	eax1 	pr6|178
000677  aa   010000 4310 07	fld  	4096,dl
000700  aa  6 00044 3701 20	epp4 	pr6|36,*
000701  la  4 00016 3521 20	epp2 	pr4|14,*		com_err_
000702  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 54
        go to TRANSACTION_END;

000703  aa   001045 7100 04	tra  	549,ic		001750
						STATEMENT 1 ON LINE 55
      end;

						STATEMENT 1 ON LINE 57
      if length (arg) = 0
      then do;

000704  aa  6 00104 2361 00	ldq  	pr6|68		arg_len
000705  aa   000026 6010 04	tnz  	22,ic		000733
						STATEMENT 1 ON LINE 59
        call com_err_ (code, ME, "A null argument was found where a location was expected.");

000706  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
000707  aa   777401 00 0070	desc9a	-255,56		000307 = 101040156165
000710  aa  6 00262 00 0070	desc9a	pr6|178,56
000711  aa  6 00110 3521 00	epp2 	pr6|72		code
000712  aa  6 00224 2521 00	spri2	pr6|148
000713  aa   777065 3520 04	epp2 	-459,ic		000000 = 167141164143
000714  aa  6 00226 2521 00	spri2	pr6|150
000715  aa  6 00262 3521 00	epp2 	pr6|178
000716  aa  6 00230 2521 00	spri2	pr6|152
000717  aa   777132 3520 04	epp2 	-422,ic		000051 = 404000000043
000720  aa  6 00232 2521 00	spri2	pr6|154
000721  aa   777144 3520 04	epp2 	-412,ic		000065 = 526000000040
000722  aa  6 00234 2521 00	spri2	pr6|156
000723  aa   777122 3520 04	epp2 	-430,ic		000045 = 524000000070
000724  aa  6 00236 2521 00	spri2	pr6|158
000725  aa  6 00222 6211 00	eax1 	pr6|146
000726  aa   014000 4310 07	fld  	6144,dl
000727  aa  6 00044 3701 20	epp4 	pr6|36,*
000730  la  4 00016 3521 20	epp2 	pr4|14,*		com_err_
000731  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 60
        go to TRANSACTION_END;

000732  aa   001016 7100 04	tra  	526,ic		001750
						STATEMENT 1 ON LINE 61
      end;

						STATEMENT 1 ON LINE 63
      if substr (arg, 1, 1) ^= "-"
      then
ENTRYPOINTS_ARGUMENT:
        do;

000733  aa  6 00106 3735 20	epp7 	pr6|70,*		arg_ptr
000734  aa  040 004 106 500	cmpc 	(pr),(ic),fill(040)
000735  aa  7 00000 00 0001	desc9a	pr7|0,1		arg
000736  aa   001724 00 0001	desc9a	980,1		002660 = 055000000000
000737  aa   000072 6000 04	tze  	58,ic		001031
						STATEMENT 1 ON LINE 67
        call CHECK_NEXT_ARG (arg, 256, "watch", "locations", " control_args");

000740  aa   526000 2760 03	orq  	175104,du
000741  aa  6 00261 7561 00	stq  	pr6|177
000742  aa   000400 2360 07	ldq  	256,dl
000743  aa  6 00212 7561 00	stq  	pr6|138
000744  aa   777150 2370 04	ldaq 	-408,ic		000114 = 167141164143 150000000000
000745  aa  6 00300 7571 00	staq 	pr6|192
000746  aa   777165 2350 04	lda  	-395,ic		000133 = 154157143141
000747  aa   777165 2360 04	ldq  	-395,ic		000134 = 164151157156
000750  aa  6 00214 7571 00	staq 	pr6|140
000751  aa   163000 2350 03	lda  	58880,du
000752  aa  6 00216 7551 00	sta  	pr6|142
000753  aa   777203 2370 04	ldaq 	-381,ic		000156 = 040143157156 164162157154
000754  aa  6 00262 7571 00	staq 	pr6|178
000755  aa   777203 2370 04	ldaq 	-381,ic		000160 = 137141162147 163000000000
000756  aa  6 00264 7571 00	staq 	pr6|180
000757  aa  7 00000 3521 00	epp2 	pr7|0		arg
000760  aa  6 00224 2521 00	spri2	pr6|148
000761  aa  6 00212 3521 00	epp2 	pr6|138
000762  aa  6 00226 2521 00	spri2	pr6|150
000763  aa  6 00300 3521 00	epp2 	pr6|192
000764  aa  6 00230 2521 00	spri2	pr6|152
000765  aa  6 00214 3521 00	epp2 	pr6|140
000766  aa  6 00232 2521 00	spri2	pr6|154
000767  aa  6 00262 3521 00	epp2 	pr6|178
000770  aa  6 00234 2521 00	spri2	pr6|156
000771  aa  6 00261 3521 00	epp2 	pr6|177
000772  aa  6 00236 2521 00	spri2	pr6|158
000773  aa   777050 3520 04	epp2 	-472,ic		000043 = 404000000025
000774  aa  6 00240 2521 00	spri2	pr6|160
000775  aa   777045 3520 04	epp2 	-475,ic		000042 = 524000000005
000776  aa  6 00242 2521 00	spri2	pr6|162
000777  aa   777042 3520 04	epp2 	-478,ic		000041 = 524000000011
001000  aa  6 00244 2521 00	spri2	pr6|164
001001  aa   777037 3520 04	epp2 	-481,ic		000040 = 524000000015
001002  aa  6 00246 2521 00	spri2	pr6|166
001003  aa  6 00222 3521 00	epp2 	pr6|146
001004  aa   024000 4310 07	fld  	10240,dl
001005  aa  2 00000 7571 00	staq 	pr2|0
001006  aa   001236 6700 04	tsp4 	670,ic		002244
						STATEMENT 1 ON LINE 68
        call trace_$specify_locations ((arg));

001007  aa  6 00104 2361 00	ldq  	pr6|68		arg_len
001010  aa   000400 1160 07	cmpq 	256,dl
001011  aa   000002 6040 04	tmi  	2,ic		001013
001012  aa   000400 2360 07	ldq  	256,dl
001013  aa  6 00302 7561 00	stq  	pr6|194
001014  aa  6 00106 3735 20	epp7 	pr6|70,*		arg_ptr
001015  aa  040 140 100 540	mlr  	(pr,rl),(pr,rl),fill(040)
001016  aa  7 00000 00 0006	desc9a	pr7|0,ql		arg
001017  aa  6 00303 00 0006	desc9a	pr6|195,ql
001020  aa  6 00303 3521 00	epp2 	pr6|195
001021  aa  6 00216 2521 00	spri2	pr6|142
001022  aa  6 00214 6211 00	eax1 	pr6|140
001023  aa   004000 4310 07	fld  	2048,dl
001024  aa  6 00044 3701 20	epp4 	pr6|36,*
001025  la  4 00062 3521 20	epp2 	pr4|50,*		trace_$specify_locations
001026  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 69
        arg_idx = arg_idx + 1;

001027  aa  6 00103 0541 00	aos  	pr6|67		arg_idx
						STATEMENT 1 ON LINE 70
      end ENTRYPOINTS_ARGUMENT;

001030  aa   777614 7100 04	tra  	-116,ic		000644
						STATEMENT 1 ON LINE 72
      else
CONTROL_ARGUMENT:
        do;

						STATEMENT 1 ON LINE 75
        if arg_idx + 1 > arg_count
        then next_arg_ptr = null ();

001031  aa  6 00103 2361 00	ldq  	pr6|67		arg_idx
001032  aa   000001 0760 07	adq  	1,dl
001033  aa  6 00102 1161 00	cmpq 	pr6|66		arg_count
001034  aa   000004 6044 04	tmoz 	4,ic		001040
001035  aa   777055 2370 04	ldaq 	-467,ic		000112 = 077777000043 000001000000
001036  aa  6 00116 7571 00	staq 	pr6|78		next_arg_ptr
001037  aa   000052 7100 04	tra  	42,ic		001111
						STATEMENT 1 ON LINE 77
        else do;

						STATEMENT 1 ON LINE 78
	call cu_$arg_ptr (arg_idx + 1, next_arg_ptr, next_arg_len, code);

001040  aa  6 00103 2361 00	ldq  	pr6|67		arg_idx
001041  aa   000001 0760 07	adq  	1,dl
001042  aa  6 00261 7561 00	stq  	pr6|177
001043  aa  6 00261 3521 00	epp2 	pr6|177
001044  aa  6 00264 2521 00	spri2	pr6|180
001045  aa  6 00116 3521 00	epp2 	pr6|78		next_arg_ptr
001046  aa  6 00266 2521 00	spri2	pr6|182
001047  aa  6 00115 3521 00	epp2 	pr6|77		next_arg_len
001050  aa  6 00270 2521 00	spri2	pr6|184
001051  aa  6 00110 3521 00	epp2 	pr6|72		code
001052  aa  6 00272 2521 00	spri2	pr6|186
001053  aa  6 00262 6211 00	eax1 	pr6|178
001054  aa   020000 4310 07	fld  	8192,dl
001055  aa  6 00044 3701 20	epp4 	pr6|36,*
001056  la  4 00024 3521 20	epp2 	pr4|20,*		cu_$arg_ptr
001057  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 79
	if code ^= 0
	then do;

001060  aa  6 00110 2361 00	ldq  	pr6|72		code
001061  aa   000017 6000 04	tze  	15,ic		001100
						STATEMENT 1 ON LINE 81
	  call com_err_ (code, ME);

001062  aa  6 00110 3521 00	epp2 	pr6|72		code
001063  aa  6 00264 2521 00	spri2	pr6|180
001064  aa   776714 3520 04	epp2 	-564,ic		000000 = 167141164143
001065  aa  6 00266 2521 00	spri2	pr6|182
001066  aa   776763 3520 04	epp2 	-525,ic		000051 = 404000000043
001067  aa  6 00270 2521 00	spri2	pr6|184
001070  aa   776775 3520 04	epp2 	-515,ic		000065 = 526000000040
001071  aa  6 00272 2521 00	spri2	pr6|186
001072  aa  6 00262 6211 00	eax1 	pr6|178
001073  aa   010000 4310 07	fld  	4096,dl
001074  aa  6 00044 3701 20	epp4 	pr6|36,*
001075  la  4 00016 3521 20	epp2 	pr4|14,*		com_err_
001076  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 82
	  go to TRANSACTION_END;

001077  aa   000651 7100 04	tra  	425,ic		001750
						STATEMENT 1 ON LINE 83
	end;

						STATEMENT 1 ON LINE 85
	if length (next_arg) > 0
	then if substr (next_arg, 1, 1) = "-"
	     then next_arg_ptr = null ();

001100  aa  6 00115 2361 00	ldq  	pr6|77		next_arg_len
001101  aa   000010 6044 04	tmoz 	8,ic		001111
001102  aa  6 00116 3735 20	epp7 	pr6|78,*		next_arg_ptr
001103  aa  040 004 106 500	cmpc 	(pr),(ic),fill(040)
001104  aa  7 00000 00 0001	desc9a	pr7|0,1		next_arg
001105  aa   001555 00 0001	desc9a	877,1		002660 = 055000000000
001106  aa   000003 6010 04	tnz  	3,ic		001111
001107  aa   777003 2370 04	ldaq 	-509,ic		000112 = 077777000043 000001000000
001110  aa  6 00116 7571 00	staq 	pr6|78		next_arg_ptr
						STATEMENT 1 ON LINE 88
        end;

						STATEMENT 1 ON LINE 90
        if arg = "-add" /* -add */
        then do;

001111  aa  6 00106 3735 20	epp7 	pr6|70,*		arg_ptr
001112  aa  6 00104 2351 00	lda  	pr6|68		arg_len
001113  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
001114  aa  7 00000 00 0005	desc9a	pr7|0,al		arg
001115  aa   776724 00 0004	desc9a	-556,4		000037 = 055141144144
001116  aa   000005 6010 04	tnz  	5,ic		001123
						STATEMENT 1 ON LINE 92
	add_remove_action = "add";

001117  aa   776771 2370 04	ldaq 	-519,ic		000110 = 141144144040 040040040040
001120  aa  6 00100 7571 00	staq 	pr6|64		add_remove_action
						STATEMENT 1 ON LINE 93
	arg_idx = arg_idx + 1;

001121  aa  6 00103 0541 00	aos  	pr6|67		arg_idx
						STATEMENT 1 ON LINE 94
        end;

001122  aa   777522 7100 04	tra  	-174,ic		000644
						STATEMENT 1 ON LINE 96
        else if arg = "-changed" /* -changed */
        then do;

001123  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
001124  aa  7 00000 00 0005	desc9a	pr7|0,al		arg
001125  aa   776763 00 0010	desc9a	-525,8		000106 = 055143150141
001126  aa   000010 6010 04	tnz  	8,ic		001136
						STATEMENT 1 ON LINE 98
	call trace_$specify_changed_locations ();

001127  aa  6 00056 6211 00	eax1 	pr6|46
001130  aa   000000 4310 07	fld  	0,dl
001131  aa  6 00044 3701 20	epp4 	pr6|36,*
001132  la  4 00064 3521 20	epp2 	pr4|52,*		trace_$specify_changed_locations
001133  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 99
	arg_idx = arg_idx + 1;

001134  aa  6 00103 0541 00	aos  	pr6|67		arg_idx
						STATEMENT 1 ON LINE 100
        end;

001135  aa   777507 7100 04	tra  	-185,ic		000644
						STATEMENT 1 ON LINE 102
        else if arg = "-remove" | arg = "-rm" /* -remove, -rm */
        then do;

001136  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
001137  aa  7 00000 00 0005	desc9a	pr7|0,al		arg
001140  aa   776746 00 0007	desc9a	-538,7		000104 = 055162145155
001141  aa   000005 6000 04	tze  	5,ic		001146
001142  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
001143  aa  7 00000 00 0005	desc9a	pr7|0,al		arg
001144  aa   776674 00 0003	desc9a	-580,3		000036 = 055162155000
001145  aa   000005 6010 04	tnz  	5,ic		001152
						STATEMENT 1 ON LINE 104
	add_remove_action = "remove";

001146  aa   776734 2370 04	ldaq 	-548,ic		000102 = 162145155157 166145040040
001147  aa  6 00100 7571 00	staq 	pr6|64		add_remove_action
						STATEMENT 1 ON LINE 105
	arg_idx = arg_idx + 1;

001150  aa  6 00103 0541 00	aos  	pr6|67		arg_idx
						STATEMENT 1 ON LINE 106
        end;

001151  aa   777473 7100 04	tra  	-197,ic		000644
						STATEMENT 1 ON LINE 108
        else if arg = "-status" | arg = "-st" /* -status, -st */
        then do;

001152  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
001153  aa  7 00000 00 0005	desc9a	pr7|0,al		arg
001154  aa   776726 00 0007	desc9a	-554,7		000100 = 055163164141
001155  aa   000005 6000 04	tze  	5,ic		001162
001156  aa  040 004 106 540	cmpc 	(pr,rl),(ic),fill(040)
001157  aa  7 00000 00 0005	desc9a	pr7|0,al		arg
001160  aa   776657 00 0003	desc9a	-593,3		000035 = 055163164000
001161  aa   000005 6010 04	tnz  	5,ic		001166
						STATEMENT 1 ON LINE 110
	status = "1"b;

001162  aa   400000 2350 03	lda  	131072,du
001163  aa  6 00120 7551 00	sta  	pr6|80		status
						STATEMENT 1 ON LINE 111
	arg_idx = arg_idx + 1;

001164  aa  6 00103 0541 00	aos  	pr6|67		arg_idx
						STATEMENT 1 ON LINE 112
        end;

001165  aa   777457 7100 04	tra  	-209,ic		000644
						STATEMENT 1 ON LINE 114
        else do;

						STATEMENT 1 ON LINE 115
	call com_err_ (error_table_$badopt, ME, """^a""", arg);

001166  aa  6 00104 2361 00	ldq  	pr6|68		arg_len
001167  aa   526000 2760 03	orq  	175104,du
001170  aa  6 00261 7561 00	stq  	pr6|177
001171  aa   776643 2350 04	lda  	-605,ic		000034 = 042136141042
001172  aa  6 00212 7551 00	sta  	pr6|138
001173  aa  6 00044 3701 20	epp4 	pr6|36,*
001174  la  4 00010 3521 20	epp2 	pr4|8,*		error_table_$badopt
001175  aa  6 00224 2521 00	spri2	pr6|148
001176  aa   776602 3520 04	epp2 	-638,ic		000000 = 167141164143
001177  aa  6 00226 2521 00	spri2	pr6|150
001200  aa  6 00212 3521 00	epp2 	pr6|138
001201  aa  6 00230 2521 00	spri2	pr6|152
001202  aa  7 00000 3521 00	epp2 	pr7|0		arg
001203  aa  6 00232 2521 00	spri2	pr6|154
001204  aa   776645 3520 04	epp2 	-603,ic		000051 = 404000000043
001205  aa  6 00234 2521 00	spri2	pr6|156
001206  aa   776657 3520 04	epp2 	-593,ic		000065 = 526000000040
001207  aa  6 00236 2521 00	spri2	pr6|158
001210  aa   776623 3520 04	epp2 	-621,ic		000033 = 524000000004
001211  aa  6 00240 2521 00	spri2	pr6|160
001212  aa  6 00261 3521 00	epp2 	pr6|177
001213  aa  6 00242 2521 00	spri2	pr6|162
001214  aa  6 00222 6211 00	eax1 	pr6|146
001215  aa   020000 4310 07	fld  	8192,dl
001216  la  4 00016 3521 20	epp2 	pr4|14,*		com_err_
001217  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 116
	go to TRANSACTION_END;

001220  aa   000530 7100 04	tra  	344,ic		001750
						STATEMENT 1 ON LINE 117
        end;

						STATEMENT 1 ON LINE 118
      end CONTROL_ARGUMENT;

						STATEMENT 1 ON LINE 119
    end ARGUMENT_LOOP;

001221  aa   777423 7100 04	tra  	-237,ic		000644
						STATEMENT 1 ON LINE 126
    call SAY_BEGIN ();

001222  aa   000740 6700 04	tsp4 	480,ic		002162
						STATEMENT 1 ON LINE 128
    n_specified = trace_$num_specified_locations ();

001223  aa  6 00112 3521 00	epp2 	pr6|74		n_specified
001224  aa  6 00216 2521 00	spri2	pr6|142
001225  aa  6 00214 6211 00	eax1 	pr6|140
001226  aa   004000 4310 07	fld  	2048,dl
001227  aa  6 00044 3701 20	epp4 	pr6|36,*
001230  la  4 00056 3521 20	epp2 	pr4|46,*		trace_$num_specified_locations
001231  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 130
    if n_specified > 0
    then
LOCATION_ACTION:
      do;

001232  aa  6 00112 2361 00	ldq  	pr6|74		n_specified
001233  aa   000073 6044 04	tmoz 	59,ic		001326
						STATEMENT 1 ON LINE 134
      call SAY_N_LOCATIONS (n_specified, "specified");

001234  aa   776674 2370 04	ldaq 	-580,ic		000130 = 163160145143 151146151145
001235  aa  6 00214 7571 00	staq 	pr6|140
001236  aa   144000 2350 03	lda  	51200,du
001237  aa  6 00216 7551 00	sta  	pr6|142
001240  aa   001406 3520 04	epp2 	774,ic		002646 = 000004000000
001241  aa  2 00000 2351 00	lda  	pr2|0
001242  aa   000613 6700 04	tsp4 	395,ic		002055
						STATEMENT 1 ON LINE 136
      if add_remove_action = "" & ^status
      then add_remove_action = "add";

001243  aa   000000 4310 07	fld  	0,dl
001244  aa  0 00440 2771 00	oraq 	pr0|288		= 040040040040 040040040040
001245  aa  6 00100 1171 00	cmpaq	pr6|64		add_remove_action
001246  aa   000006 6010 04	tnz  	6,ic		001254
001247  aa  6 00120 2351 00	lda  	pr6|80		status
001250  aa   400000 3150 03	cana 	131072,du
001251  aa   000003 6010 04	tnz  	3,ic		001254
001252  aa   776636 2370 04	ldaq 	-610,ic		000110 = 141144144040 040040040040
001253  aa  6 00100 7571 00	staq 	pr6|64		add_remove_action
						STATEMENT 1 ON LINE 139
      if add_remove_action = "add"
      then
        begin;

001254  aa   776556 2350 04	lda  	-658,ic		000032 = 141144144000
001255  aa  0 00066 3771 00	anaq 	pr0|54		= 777777777000 000000000000
001256  aa  0 00446 2771 00	oraq 	pr0|294		= 000000000040 040040040040
001257  aa  6 00100 1171 00	cmpaq	pr6|64		add_remove_action
001260  aa   000026 6010 04	tnz  	22,ic		001306
BEGIN BLOCK  1                                              STATEMENT 1 ON LINE 144
	call trace_$add_specified_locs (n_added, n_updated);

001261  aa  6 00152 3521 00	epp2 	pr6|106		n_added
001262  aa  6 00406 2521 00	spri2	pr6|262
001263  aa  6 00153 3521 00	epp2 	pr6|107		n_updated
001264  aa  6 00410 2521 00	spri2	pr6|264
001265  aa  6 00404 6211 00	eax1 	pr6|260
001266  aa   010000 4310 07	fld  	4096,dl
001267  aa  6 00044 3701 20	epp4 	pr6|36,*
001270  la  4 00040 3521 20	epp2 	pr4|32,*		trace_$add_specified_locs
001271  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 145
	call SAY_N_LOCATIONS (n_added, "added");

001272  aa   776600 2370 04	ldaq 	-640,ic		000072 = 141144144145 144000000000
001273  aa  6 00412 7571 00	staq 	pr6|266
001274  aa   001340 3520 04	epp2 	736,ic		002634 = 000004000000
001275  aa  2 00000 2351 00	lda  	pr2|0
001276  aa   000557 6700 04	tsp4 	367,ic		002055
						STATEMENT 1 ON LINE 146
	if n_updated > 0
	then call SAY_N_LOCATIONS (n_updated, "updated");

001277  aa  6 00153 2361 00	ldq  	pr6|107		n_updated
001300  aa   000006 6044 04	tmoz 	6,ic		001306
001301  aa   776567 2370 04	ldaq 	-649,ic		000070 = 165160144141 164145144000
001302  aa  6 00412 7571 00	staq 	pr6|266
001303  aa   001317 3520 04	epp2 	719,ic		002622 = 000004000000
001304  aa  2 00000 2351 00	lda  	pr2|0
001305  aa   000550 6700 04	tsp4 	360,ic		002055
						STATEMENT 1 ON LINE 148
        end;

  END BLOCK  1
						STATEMENT 1 ON LINE 150
      if add_remove_action = "remove"
      then
        begin;

001306  aa   776570 2370 04	ldaq 	-648,ic		000076 = 162145155157 166145000000
001307  aa  0 00454 2771 00	oraq 	pr0|300		= 000000000000 000000040040
001310  aa  6 00100 1171 00	cmpaq	pr6|64		add_remove_action
001311  aa   000015 6010 04	tnz  	13,ic		001326
BEGIN BLOCK  2                                              STATEMENT 1 ON LINE 154
	call trace_$remove_specified_locs (n_removed);

001312  aa  6 00154 3521 00	epp2 	pr6|108		n_removed
001313  aa  6 00416 2521 00	spri2	pr6|270
001314  aa  6 00414 6211 00	eax1 	pr6|268
001315  aa   004000 4310 07	fld  	2048,dl
001316  aa  6 00044 3701 20	epp4 	pr6|36,*
001317  la  4 00042 3521 20	epp2 	pr4|34,*		trace_$remove_specified_locs
001320  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 155
	call SAY_N_LOCATIONS (n_removed, "removed");

001321  aa   776545 2370 04	ldaq 	-667,ic		000066 = 162145155157 166145144000
001322  aa  6 00420 7571 00	staq 	pr6|272
001323  aa   001265 3520 04	epp2 	693,ic		002610 = 000004000000
001324  aa  2 00000 2351 00	lda  	pr2|0
001325  aa   000530 6700 04	tsp4 	344,ic		002055
						STATEMENT 1 ON LINE 156
        end;

  END BLOCK  2
						STATEMENT 1 ON LINE 157
    end LOCATION_ACTION;

						STATEMENT 1 ON LINE 159
    n_locations = trace_$num_locations ();

001326  aa  6 00111 3521 00	epp2 	pr6|73		n_locations
001327  aa  6 00216 2521 00	spri2	pr6|142
001330  aa  6 00214 6211 00	eax1 	pr6|140
001331  aa   004000 4310 07	fld  	2048,dl
001332  aa  6 00044 3701 20	epp4 	pr6|36,*
001333  la  4 00054 3521 20	epp2 	pr4|44,*		trace_$num_locations
001334  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 160
    if n_locations = 0
    then call SAY ("watch table empty");

001335  aa  6 00111 2361 00	ldq  	pr6|73		n_locations
001336  aa   000013 6010 04	tnz  	11,ic		001351
001337  aa   776663 2370 04	ldaq 	-589,ic		000222 = 167141164143 150040164141
001340  aa  6 00214 7571 00	staq 	pr6|140
001341  aa   776663 2370 04	ldaq 	-589,ic		000224 = 142154145040 145155160164
001342  aa  6 00216 7571 00	staq 	pr6|142
001343  aa   171000 2350 03	lda  	61952,du
001344  aa  6 00220 7551 00	sta  	pr6|144
001345  aa   001235 3520 04	epp2 	669,ic		002602 = 000002000000
001346  aa  2 00000 2351 00	lda  	pr2|0
001347  aa   000442 6700 04	tsp4 	290,ic		002011
001350  aa   000010 7100 04	tra  	8,ic		001360
						STATEMENT 1 ON LINE 162
    else call SAY_N_LOCATIONS (n_locations, "in watch table");

001351  aa   776601 2370 04	ldaq 	-639,ic		000152 = 151156040167 141164143150
001352  aa  6 00214 7571 00	staq 	pr6|140
001353  aa   776601 2370 04	ldaq 	-639,ic		000154 = 040164141142 154145000000
001354  aa  6 00216 7571 00	staq 	pr6|142
001355  aa   001213 3520 04	epp2 	651,ic		002570 = 000004000000
001356  aa  2 00000 2351 00	lda  	pr2|0
001357  aa   000476 6700 04	tsp4 	318,ic		002055
						STATEMENT 1 ON LINE 164
    if ^trace_$enabled ()
    then call SAY ("trace is disabled");

001360  aa  6 00261 3521 00	epp2 	pr6|177
001361  aa  6 00216 2521 00	spri2	pr6|142
001362  aa  6 00214 6211 00	eax1 	pr6|140
001363  aa   004000 4310 07	fld  	2048,dl
001364  aa  6 00044 3701 20	epp4 	pr6|36,*
001365  la  4 00066 3521 20	epp2 	pr4|54,*		trace_$enabled
001366  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
001367  aa  6 00261 2351 00	lda  	pr6|177
001370  aa   400000 3150 03	cana 	131072,du
001371  aa   000010 6010 04	tnz  	8,ic		001401
001372  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
001373  aa   776623 00 0024	desc9a	-621,20		000215 = 164162141143
001374  aa  6 00214 00 0024	desc9a	pr6|140,20
001375  aa   001205 3520 04	epp2 	645,ic		002602 = 000002000000
001376  aa  2 00000 2351 00	lda  	pr2|0
001377  aa   000412 6700 04	tsp4 	266,ic		002011
001400  aa   000044 7100 04	tra  	36,ic		001444
						STATEMENT 1 ON LINE 166
    else if trace_$in_trace ()
    then call SAY ("trace is temporarily disabled");

001401  aa  6 00261 3521 00	epp2 	pr6|177
001402  aa  6 00216 2521 00	spri2	pr6|142
001403  aa  6 00214 6211 00	eax1 	pr6|140
001404  aa   004000 4310 07	fld  	2048,dl
001405  aa  6 00044 3701 20	epp4 	pr6|36,*
001406  la  4 00072 3521 20	epp2 	pr4|58,*		trace_$in_trace
001407  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
001410  aa  6 00261 2351 00	lda  	pr6|177
001411  aa   400000 3150 03	cana 	131072,du
001412  aa   000010 6000 04	tze  	8,ic		001422
001413  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
001414  aa   776631 00 0040	desc9a	-615,32		000244 = 164162141143
001415  aa  6 00262 00 0040	desc9a	pr6|178,32
001416  aa   001144 3520 04	epp2 	612,ic		002562 = 000002000000
001417  aa  2 00000 2351 00	lda  	pr2|0
001420  aa   000371 6700 04	tsp4 	249,ic		002011
001421  aa   000023 7100 04	tra  	19,ic		001444
						STATEMENT 1 ON LINE 168
    else if trace_$num_entrypoints () = 0
    then call SAY ("trace table empty");

001422  aa  6 00261 3521 00	epp2 	pr6|177
001423  aa  6 00216 2521 00	spri2	pr6|142
001424  aa  6 00214 6211 00	eax1 	pr6|140
001425  aa   004000 4310 07	fld  	2048,dl
001426  aa  6 00044 3701 20	epp4 	pr6|36,*
001427  la  4 00044 3521 20	epp2 	pr4|36,*		trace_$num_entrypoints
001430  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
001431  aa  6 00261 2361 00	ldq  	pr6|177
001432  aa   000012 6010 04	tnz  	10,ic		001444
001433  aa   776555 2370 04	ldaq 	-659,ic		000210 = 164162141143 145040164141
001434  aa  6 00214 7571 00	staq 	pr6|140
001435  aa   776555 2370 04	ldaq 	-659,ic		000212 = 142154145040 145155160164
001436  aa  6 00216 7571 00	staq 	pr6|142
001437  aa   171000 2350 03	lda  	61952,du
001440  aa  6 00220 7551 00	sta  	pr6|144
001441  aa   001141 3520 04	epp2 	609,ic		002602 = 000002000000
001442  aa  2 00000 2351 00	lda  	pr2|0
001443  aa   000346 6700 04	tsp4 	230,ic		002011
						STATEMENT 1 ON LINE 171
    call SAY_END ();

001444  aa   000521 6700 04	tsp4 	337,ic		002165
						STATEMENT 1 ON LINE 173
    if status & n_locations ^= 0
    then
STATUS:
      begin;

001445  aa  6 00120 2351 00	lda  	pr6|80		status
001446  aa   400000 3150 03	cana 	131072,du
001447  aa   000263 6000 04	tze  	179,ic		001732
001450  aa  6 00111 2361 00	ldq  	pr6|73		n_locations
001451  aa   000261 6000 04	tze  	177,ic		001732
BEGIN BLOCK  3                                              STATEMENT 1 ON LINE 182
        old_seg_no = ""b;

001452  aa  6 00161 4501 00	stz  	pr6|113		old_seg_no
						STATEMENT 1 ON LINE 183
        n_not_in_wt = 0;

001453  aa  6 00160 4501 00	stz  	pr6|112		n_not_in_wt
						STATEMENT 1 ON LINE 184
        if n_specified = 0
        then call ioa_ ("If you want status, you must specify some locations.");

001454  aa  6 00112 2361 00	ldq  	pr6|74		n_specified
001455  aa   000015 6010 04	tnz  	13,ic		001472
001456  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
001457  aa   776576 00 0064	desc9a	-642,52		000254 = 111146040171
001460  aa  6 00422 00 0064	desc9a	pr6|274,52
001461  aa  6 00422 3521 00	epp2 	pr6|274
001462  aa  6 00442 2521 00	spri2	pr6|290
001463  aa   776340 3520 04	epp2 	-800,ic		000023 = 524000000064
001464  aa  6 00444 2521 00	spri2	pr6|292
001465  aa  6 00440 6211 00	eax1 	pr6|288
001466  aa   004000 4310 07	fld  	2048,dl
001467  aa  6 00044 3701 20	epp4 	pr6|36,*
001470  la  4 00026 3521 20	epp2 	pr4|22,*		ioa_
001471  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 186
        do specified_loc_idx = 0 to n_specified - 1;

001472  aa  6 00112 2361 00	ldq  	pr6|74		n_specified
001473  aa   000001 1760 07	sbq  	1,dl
001474  aa  6 00163 7561 00	stq  	pr6|115
001475  aa  6 00162 4501 00	stz  	pr6|114		specified_loc_idx
001476  aa  6 00162 2361 00	ldq  	pr6|114		specified_loc_idx
001477  aa  6 00163 1161 00	cmpq 	pr6|115
001500  aa   000165 6054 04	tpnz 	117,ic		001665
						STATEMENT 1 ON LINE 187
	loc_idx = trace_$specified_location_index (specified_loc_idx);

001501  aa  6 00162 3521 00	epp2 	pr6|114		specified_loc_idx
001502  aa  6 00442 2521 00	spri2	pr6|290
001503  aa  6 00155 3521 00	epp2 	pr6|109		loc_idx
001504  aa  6 00444 2521 00	spri2	pr6|292
001505  aa  6 00440 6211 00	eax1 	pr6|288
001506  aa   010000 4310 07	fld  	4096,dl
001507  aa  6 00044 3701 20	epp4 	pr6|36,*
001510  la  4 00060 3521 20	epp2 	pr4|48,*		trace_$specified_location_index
001511  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 188
	if loc_idx < 0
	then n_not_in_wt = n_not_in_wt + 1;

001512  aa  6 00155 2361 00	ldq  	pr6|109		loc_idx
001513  aa   000003 6050 04	tpl  	3,ic		001516
001514  aa  6 00160 0541 00	aos  	pr6|112		n_not_in_wt
001515  aa   000146 7100 04	tra  	102,ic		001663
						STATEMENT 1 ON LINE 190
	else do;

						STATEMENT 1 ON LINE 191
	  loc_ptr = trace_$location_ptr (loc_idx);

001516  aa  6 00155 3521 00	epp2 	pr6|109		loc_idx
001517  aa  6 00442 2521 00	spri2	pr6|290
001520  aa  6 00156 3521 00	epp2 	pr6|110		loc_ptr
001521  aa  6 00444 2521 00	spri2	pr6|292
001522  aa  6 00440 6211 00	eax1 	pr6|288
001523  aa   010000 4310 07	fld  	4096,dl
001524  aa  6 00044 3701 20	epp4 	pr6|36,*
001525  la  4 00046 3521 20	epp2 	pr4|38,*		trace_$location_ptr
001526  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
						STATEMENT 1 ON LINE 192
	  if baseno (loc_ptr) ^= old_seg_no
	  then do;

001527  aa  6 00156 2131 20	epaq 	pr6|110,*		loc_ptr
001530  aa   077777 3750 03	ana  	32767,du
001531  aa  6 00161 1151 00	cmpa 	pr6|113		old_seg_no
001532  aa   000034 6000 04	tze  	28,ic		001566
						STATEMENT 1 ON LINE 194
	    call ioa_ ("^a", trace_$location_seg_path (loc_idx));

001533  aa   136141 2350 03	lda  	48225,du
001534  aa  6 00437 7551 00	sta  	pr6|287
001535  aa  6 00155 3521 00	epp2 	pr6|109		loc_idx
001536  aa  6 00442 2521 00	spri2	pr6|290
001537  aa  6 00447 3521 00	epp2 	pr6|295
001540  aa  6 00444 2521 00	spri2	pr6|292
001541  aa  6 00440 6211 00	eax1 	pr6|288
001542  aa   010000 4310 07	fld  	4096,dl
001543  aa  6 00044 3701 20	epp4 	pr6|36,*
001544  la  4 00050 3521 20	epp2 	pr4|40,*		trace_$location_seg_path
001545  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
001546  aa  6 00437 3521 00	epp2 	pr6|287
001547  aa  6 00424 2521 00	spri2	pr6|276
001550  aa  6 00447 3521 00	epp2 	pr6|295
001551  aa  6 00426 2521 00	spri2	pr6|278
001552  aa   776250 3520 04	epp2 	-856,ic		000022 = 524000000002
001553  aa  6 00430 2521 00	spri2	pr6|280
001554  aa   776301 3520 04	epp2 	-831,ic		000055 = 530000000400
001555  aa  6 00432 2521 00	spri2	pr6|282
001556  aa  6 00422 6211 00	eax1 	pr6|274
001557  aa   010000 4310 07	fld  	4096,dl
001560  aa  6 00044 3701 20	epp4 	pr6|36,*
001561  la  4 00026 3521 20	epp2 	pr4|22,*		ioa_
001562  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 195
	    old_seg_no = baseno (loc_ptr);

001563  aa  6 00156 2131 20	epaq 	pr6|110,*		loc_ptr
001564  aa   077777 3750 03	ana  	32767,du
001565  aa  6 00161 7551 00	sta  	pr6|113		old_seg_no
						STATEMENT 1 ON LINE 196
	  end;

						STATEMENT 1 ON LINE 197
	  watch_values = trace_$location_values (loc_idx);

001566  aa  6 00155 3521 00	epp2 	pr6|109		loc_idx
001567  aa  6 00442 2521 00	spri2	pr6|290
001570  aa  6 00550 3521 00	epp2 	pr6|360
001571  aa  6 00444 2521 00	spri2	pr6|292
001572  aa  6 00440 6211 00	eax1 	pr6|288
001573  aa   010000 4310 07	fld  	4096,dl
001574  aa  6 00044 3701 20	epp4 	pr6|36,*
001575  la  4 00052 3521 20	epp2 	pr4|42,*		trace_$location_values
001576  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
001577  aa  6 00550 2371 00	ldaq 	pr6|360
001600  aa  6 00132 7571 00	staq 	pr6|90		watch_values
						STATEMENT 1 ON LINE 198
	  if watch_values.old = watch_values.new
	  then call ioa_ ("^20x^w    ^12x at ^p", watch_values.old, loc_ptr);

001601  aa  6 00132 2351 00	lda  	pr6|90		watch_values.old
001602  aa  6 00133 1151 00	cmpa 	pr6|91		watch_values.new
001603  aa   000026 6010 04	tnz  	22,ic		001631
001604  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
001605  aa   776377 00 0024	desc9a	-769,20		000203 = 136062060170
001606  aa  6 00440 00 0024	desc9a	pr6|288,20
001607  aa  6 00440 3521 00	epp2 	pr6|288
001610  aa  6 00450 2521 00	spri2	pr6|296
001611  aa  6 00132 3521 00	epp2 	pr6|90		watch_values.old
001612  aa  6 00452 2521 00	spri2	pr6|298
001613  aa  6 00156 3521 00	epp2 	pr6|110		loc_ptr
001614  aa  6 00454 2521 00	spri2	pr6|300
001615  aa   776204 3520 04	epp2 	-892,ic		000021 = 524000000024
001616  aa  6 00456 2521 00	spri2	pr6|302
001617  aa   776201 3520 04	epp2 	-895,ic		000020 = 514000000044
001620  aa  6 00460 2521 00	spri2	pr6|304
001621  aa   776235 3520 04	epp2 	-867,ic		000056 = 464000000000
001622  aa  6 00462 2521 00	spri2	pr6|306
001623  aa  6 00446 6211 00	eax1 	pr6|294
001624  aa   014000 4310 07	fld  	6144,dl
001625  aa  6 00044 3701 20	epp4 	pr6|36,*
001626  la  4 00026 3521 20	epp2 	pr4|22,*		ioa_
001627  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
001630  aa   000033 7100 04	tra  	27,ic		001663
						STATEMENT 1 ON LINE 200
	  else call ioa_ ("^20x^w -> ^w at ^p", watch_values.old, watch_values.new, loc_ptr);

001631  aa   776345 2370 04	ldaq 	-795,ic		000176 = 136062060170 136167040055
001632  aa  6 00440 7571 00	staq 	pr6|288
001633  aa   776345 2370 04	ldaq 	-795,ic		000200 = 076040136167 040141164040
001634  aa  6 00442 7571 00	staq 	pr6|290
001635  aa   136160 2350 03	lda  	48240,du
001636  aa  6 00444 7551 00	sta  	pr6|292
001637  aa  6 00440 3521 00	epp2 	pr6|288
001640  aa  6 00450 2521 00	spri2	pr6|296
001641  aa  6 00132 3521 00	epp2 	pr6|90		watch_values.old
001642  aa  6 00452 2521 00	spri2	pr6|298
001643  aa  6 00133 3521 00	epp2 	pr6|91		watch_values.new
001644  aa  6 00454 2521 00	spri2	pr6|300
001645  aa  6 00156 3521 00	epp2 	pr6|110		loc_ptr
001646  aa  6 00456 2521 00	spri2	pr6|302
001647  aa   776150 3520 04	epp2 	-920,ic		000017 = 524000000022
001650  aa  6 00460 2521 00	spri2	pr6|304
001651  aa   776147 3520 04	epp2 	-921,ic		000020 = 514000000044
001652  aa  6 00462 2521 00	spri2	pr6|306
001653  aa  6 00464 2521 00	spri2	pr6|308
001654  aa   776202 3520 04	epp2 	-894,ic		000056 = 464000000000
001655  aa  6 00466 2521 00	spri2	pr6|310
001656  aa  6 00446 6211 00	eax1 	pr6|294
001657  aa   020000 4310 07	fld  	8192,dl
001660  aa  6 00044 3701 20	epp4 	pr6|36,*
001661  la  4 00026 3521 20	epp2 	pr4|22,*		ioa_
001662  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 201
	end;

						STATEMENT 1 ON LINE 202
        end;

001663  aa  6 00162 0541 00	aos  	pr6|114		specified_loc_idx
001664  aa   777612 7100 04	tra  	-118,ic		001476
						STATEMENT 1 ON LINE 203
        if n_not_in_wt > 0
        then do;

001665  aa  6 00160 2361 00	ldq  	pr6|112		n_not_in_wt
001666  aa   000044 6044 04	tmoz 	36,ic		001732
						STATEMENT 1 ON LINE 205
	if n_not_in_wt = 1
	then call ioa_ ("^d of the specified locations was not in the watch table.", n_not_in_wt);

001667  aa   000001 1160 07	cmpq 	1,dl
001670  aa   000022 6010 04	tnz  	18,ic		001712
001671  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
001672  aa   776453 00 0074	desc9a	-725,60		000344 = 136144040157
001673  aa  6 00446 00 0074	desc9a	pr6|294,60
001674  aa  6 00446 3521 00	epp2 	pr6|294
001675  aa  6 00424 2521 00	spri2	pr6|276
001676  aa  6 00160 3521 00	epp2 	pr6|112		n_not_in_wt
001677  aa  6 00426 2521 00	spri2	pr6|278
001700  aa   776116 3520 04	epp2 	-946,ic		000016 = 524000000071
001701  aa  6 00430 2521 00	spri2	pr6|280
001702  aa   776156 3520 04	epp2 	-914,ic		000060 = 404000000021
001703  aa  6 00432 2521 00	spri2	pr6|282
001704  aa  6 00422 6211 00	eax1 	pr6|274
001705  aa   010000 4310 07	fld  	4096,dl
001706  aa  6 00044 3701 20	epp4 	pr6|36,*
001707  la  4 00026 3521 20	epp2 	pr4|22,*		ioa_
001710  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
001711  aa   000021 7100 04	tra  	17,ic		001732
						STATEMENT 1 ON LINE 207
	else call ioa_ ("^d of the specified locations were not in the watch table.", n_not_in_wt);

001712  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
001713  aa   776413 00 0074	desc9a	-757,60		000325 = 136144040157
001714  aa  6 00446 00 0074	desc9a	pr6|294,60
001715  aa  6 00446 3521 00	epp2 	pr6|294
001716  aa  6 00424 2521 00	spri2	pr6|276
001717  aa  6 00160 3521 00	epp2 	pr6|112		n_not_in_wt
001720  aa  6 00426 2521 00	spri2	pr6|278
001721  aa   776074 3520 04	epp2 	-964,ic		000015 = 524000000072
001722  aa  6 00430 2521 00	spri2	pr6|280
001723  aa   776135 3520 04	epp2 	-931,ic		000060 = 404000000021
001724  aa  6 00432 2521 00	spri2	pr6|282
001725  aa  6 00422 6211 00	eax1 	pr6|274
001726  aa   010000 4310 07	fld  	4096,dl
001727  aa  6 00044 3701 20	epp4 	pr6|36,*
001730  la  4 00026 3521 20	epp2 	pr4|22,*		ioa_
001731  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 208
        end;

						STATEMENT 1 ON LINE 209
      end STATUS;

  END BLOCK  3
						STATEMENT 1 ON LINE 211
    if arg_count = 0
    then call ioa_ ("Acts: -add/-remove -status.");

001732  aa  6 00102 2361 00	ldq  	pr6|66		arg_count
001733  aa   000015 6010 04	tnz  	13,ic		001750
001734  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
001735  aa   776301 00 0034	desc9a	-831,28		000235 = 101143164163
001736  aa  6 00262 00 0034	desc9a	pr6|178,28
001737  aa  6 00262 3521 00	epp2 	pr6|178
001740  aa  6 00216 2521 00	spri2	pr6|142
001741  aa   776065 3520 04	epp2 	-971,ic		000026 = 524000000033
001742  aa  6 00220 2521 00	spri2	pr6|144
001743  aa  6 00214 6211 00	eax1 	pr6|140
001744  aa   004000 4310 07	fld  	2048,dl
001745  aa  6 00044 3701 20	epp4 	pr6|36,*
001746  la  4 00026 3521 20	epp2 	pr4|22,*		ioa_
001747  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 214
TRANSACTION_END:
    if ^trace_$transaction_end (transaction_id)		/* Re-enable trace_catch_. */
    then call com_err_ (ZERO, ME, "This invocation of the watch command ended abnormally.");

001750  aa  6 00122 3521 00	epp2 	pr6|82		transaction_id
001751  aa  6 00216 2521 00	spri2	pr6|142
001752  aa  6 00261 3521 00	epp2 	pr6|177
001753  aa  6 00220 2521 00	spri2	pr6|144
001754  aa  6 00214 6211 00	eax1 	pr6|140
001755  aa   010000 4310 07	fld  	4096,dl
001756  aa  6 00044 3701 20	epp4 	pr6|36,*
001757  la  4 00036 3521 20	epp2 	pr4|30,*		trace_$transaction_end
001760  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
001761  aa  6 00261 2351 00	lda  	pr6|177
001762  aa   400000 3150 03	cana 	131072,du
001763  aa   000025 6010 04	tnz  	21,ic		002010
001764  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
001765  aa   776305 00 0070	desc9a	-827,56		000271 = 124150151163
001766  aa  6 00262 00 0070	desc9a	pr6|178,56
001767  aa   776057 3520 04	epp2 	-977,ic		000046 = 000000000000
001770  aa  6 00224 2521 00	spri2	pr6|148
001771  aa   776007 3520 04	epp2 	-1017,ic		000000 = 167141164143
001772  aa  6 00226 2521 00	spri2	pr6|150
001773  aa  6 00262 3521 00	epp2 	pr6|178
001774  aa  6 00230 2521 00	spri2	pr6|152
001775  aa   776054 3520 04	epp2 	-980,ic		000051 = 404000000043
001776  aa  6 00232 2521 00	spri2	pr6|154
001777  aa   776066 3520 04	epp2 	-970,ic		000065 = 526000000040
002000  aa  6 00234 2521 00	spri2	pr6|156
002001  aa   776024 3520 04	epp2 	-1004,ic		000025 = 524000000066
002002  aa  6 00236 2521 00	spri2	pr6|158
002003  aa  6 00222 6211 00	eax1 	pr6|146
002004  aa   014000 4310 07	fld  	6144,dl
002005  aa  6 00044 3701 20	epp4 	pr6|36,*
002006  la  4 00016 3521 20	epp2 	pr4|14,*		com_err_
002007  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 218
    return;

002010  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 393
  end watch;

BEGIN PROCEDURE SAY
ENTRY TO SAY                                                STATEMENT 1 ON LINE 222
SAY:
  proc (action_i);

002011  aa  6 00164 6501 00	spri4	pr6|116
002012  aa  6 00166 2521 00	spri2	pr6|118
002013  aa  2 00002 3521 01	epp2 	pr2|2,au
002014  aa  6 00170 2521 00	spri2	pr6|120
002015  aa  6 00166 3735 20	epp7 	pr6|118,*
002016  aa  7 00002 3715 20	epp5 	pr7|2,*
002017  aa  6 00174 6515 00	spri5	pr6|124
002020  aa  2 00000 3535 20	epp3 	pr2|0,*
002021  aa  6 00172 2535 00	spri3	pr6|122
						STATEMENT 1 ON LINE 224
    if trace_$loud ()
    then do;

002022  aa  6 00552 3521 00	epp2 	pr6|362
002023  aa  6 00556 2521 00	spri2	pr6|366
002024  aa  6 00554 6211 00	eax1 	pr6|364
002025  aa   004000 4310 07	fld  	2048,dl
002026  aa  6 00044 3701 20	epp4 	pr6|36,*
002027  la  4 00070 3521 20	epp2 	pr4|56,*		trace_$loud
002030  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
002031  aa  6 00552 2351 00	lda  	pr6|362
002032  aa   400000 3150 03	cana 	131072,du
002033  aa   000021 6000 04	tze  	17,ic		002054
						STATEMENT 1 ON LINE 226
      call INIT ();

002034  aa   000150 6700 04	tsp4 	104,ic		002204
						STATEMENT 1 ON LINE 227
      call ioa_$nnl ("^a", action_i);

002035  aa   136141 2350 03	lda  	48225,du
002036  aa  6 00552 7551 00	sta  	pr6|362
002037  aa  6 00552 3521 00	epp2 	pr6|362
002040  aa  6 00562 2521 00	spri2	pr6|370
002041  aa  6 00174 3521 20	epp2 	pr6|124,*		action_i
002042  aa  6 00564 2521 00	spri2	pr6|372
002043  aa   775757 3520 04	epp2 	-1041,ic		000022 = 524000000002
002044  aa  6 00566 2521 00	spri2	pr6|374
002045  aa  6 00172 3521 20	epp2 	pr6|122,*
002046  aa  6 00570 2521 00	spri2	pr6|376
002047  aa  6 00560 6211 00	eax1 	pr6|368
002050  aa   010000 4310 07	fld  	4096,dl
002051  aa  6 00044 3701 20	epp4 	pr6|36,*
002052  la  4 00030 3521 20	epp2 	pr4|24,*		ioa_$nnl
002053  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 228
    end;

						STATEMENT 1 ON LINE 229
    return;

002054  aa  6 00164 6101 00	rtcd 	pr6|116
ENTRY TO SAY_N_LOCATIONS                                    STATEMENT 1 ON LINE 231
SAY_N_LOCATIONS:
  entry (num_i, action_i);

002055  aa  6 00164 6501 00	spri4	pr6|116
002056  aa  6 00166 2521 00	spri2	pr6|118
002057  aa  2 00002 3521 01	epp2 	pr2|2,au
002060  aa  6 00170 2521 00	spri2	pr6|120
002061  aa  6 00166 3735 20	epp7 	pr6|118,*
002062  aa  7 00004 3715 20	epp5 	pr7|4,*
002063  aa  6 00174 6515 00	spri5	pr6|124
002064  aa  2 00002 3535 20	epp3 	pr2|2,*
002065  aa  6 00172 2535 00	spri3	pr6|122
						STATEMENT 1 ON LINE 233
    if trace_$loud ()
    then do;

002066  aa  6 00552 3521 00	epp2 	pr6|362
002067  aa  6 00556 2521 00	spri2	pr6|366
002070  aa  6 00554 6211 00	eax1 	pr6|364
002071  aa   004000 4310 07	fld  	2048,dl
002072  aa  6 00044 3701 20	epp4 	pr6|36,*
002073  la  4 00070 3521 20	epp2 	pr4|56,*		trace_$loud
002074  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
002075  aa  6 00552 2351 00	lda  	pr6|362
002076  aa   400000 3150 03	cana 	131072,du
002077  aa   000062 6000 04	tze  	50,ic		002161
						STATEMENT 1 ON LINE 235
      call INIT ();

002100  aa   000104 6700 04	tsp4 	68,ic		002204
						STATEMENT 1 ON LINE 236
      if num_i = 1
      then call ioa_$nnl ("^d loc ^a", num_i, action_i);

002101  aa  6 00166 3735 20	epp7 	pr6|118,*
002102  aa  7 00002 2361 20	ldq  	pr7|2,*		num_i
002103  aa   000001 1160 07	cmpq 	1,dl
002104  aa   000030 6010 04	tnz  	24,ic		002134
002105  aa   776020 2350 04	lda  	-1008,ic		000125 = 136144040154
002106  aa   776020 2360 04	ldq  	-1008,ic		000126 = 157143040136
002107  aa  6 00554 7571 00	staq 	pr6|364
002110  aa   141000 2350 03	lda  	49664,du
002111  aa  6 00556 7551 00	sta  	pr6|366
002112  aa  6 00554 3521 00	epp2 	pr6|364
002113  aa  6 00574 2521 00	spri2	pr6|380
002114  aa  7 00002 3521 20	epp2 	pr7|2,*		num_i
002115  aa  6 00576 2521 00	spri2	pr6|382
002116  aa  6 00174 3521 20	epp2 	pr6|124,*		action_i
002117  aa  6 00600 2521 00	spri2	pr6|384
002120  aa   775721 3520 04	epp2 	-1071,ic		000041 = 524000000011
002121  aa  6 00602 2521 00	spri2	pr6|386
002122  aa   775736 3520 04	epp2 	-1058,ic		000060 = 404000000021
002123  aa  6 00604 2521 00	spri2	pr6|388
002124  aa  6 00172 3521 20	epp2 	pr6|122,*
002125  aa  6 00606 2521 00	spri2	pr6|390
002126  aa  6 00572 6211 00	eax1 	pr6|378
002127  aa   014000 4310 07	fld  	6144,dl
002130  aa  6 00044 3701 20	epp4 	pr6|36,*
002131  la  4 00030 3521 20	epp2 	pr4|24,*		ioa_$nnl
002132  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
002133  aa   000026 7100 04	tra  	22,ic		002161
						STATEMENT 1 ON LINE 238
      else call ioa_$nnl ("^d locs ^a", num_i, action_i);

002134  aa   775766 2370 04	ldaq 	-1034,ic		000122 = 136144040154 157143163040
002135  aa  6 00554 7571 00	staq 	pr6|364
002136  aa   136141 2350 03	lda  	48225,du
002137  aa  6 00556 7551 00	sta  	pr6|366
002140  aa  6 00554 3521 00	epp2 	pr6|364
002141  aa  6 00574 2521 00	spri2	pr6|380
002142  aa  7 00002 3521 20	epp2 	pr7|2,*		num_i
002143  aa  6 00576 2521 00	spri2	pr6|382
002144  aa  6 00174 3521 20	epp2 	pr6|124,*		action_i
002145  aa  6 00600 2521 00	spri2	pr6|384
002146  aa   775701 3520 04	epp2 	-1087,ic		000047 = 524000000012
002147  aa  6 00602 2521 00	spri2	pr6|386
002150  aa   775710 3520 04	epp2 	-1080,ic		000060 = 404000000021
002151  aa  6 00604 2521 00	spri2	pr6|388
002152  aa  6 00172 3521 20	epp2 	pr6|122,*
002153  aa  6 00606 2521 00	spri2	pr6|390
002154  aa  6 00572 6211 00	eax1 	pr6|378
002155  aa   014000 4310 07	fld  	6144,dl
002156  aa  6 00044 3701 20	epp4 	pr6|36,*
002157  la  4 00030 3521 20	epp2 	pr4|24,*		ioa_$nnl
002160  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 239
    end;

						STATEMENT 1 ON LINE 240
    return;

002161  aa  6 00164 6101 00	rtcd 	pr6|116
ENTRY TO SAY_BEGIN                                          STATEMENT 1 ON LINE 242
SAY_BEGIN:
  entry ();

002162  aa  6 00164 6501 00	spri4	pr6|116
						STATEMENT 1 ON LINE 244
    n_things_said = 0;

002163  aa  6 00113 4501 00	stz  	pr6|75		n_things_said
						STATEMENT 1 ON LINE 245
    return;

002164  aa  6 00164 6101 00	rtcd 	pr6|116
ENTRY TO SAY_END                                            STATEMENT 1 ON LINE 247
SAY_END:
  entry ();

002165  aa  6 00164 6501 00	spri4	pr6|116
						STATEMENT 1 ON LINE 249
    if n_things_said > 0
    then call ioa_ (".");

002166  aa  6 00113 2361 00	ldq  	pr6|75		n_things_said
002167  aa   000014 6044 04	tmoz 	12,ic		002203
002170  aa   056000 2350 03	lda  	23552,du
002171  aa  6 00552 7551 00	sta  	pr6|362
002172  aa  6 00552 3521 00	epp2 	pr6|362
002173  aa  6 00562 2521 00	spri2	pr6|370
002174  aa   775617 3520 04	epp2 	-1137,ic		000013 = 524000000001
002175  aa  6 00564 2521 00	spri2	pr6|372
002176  aa  6 00560 6211 00	eax1 	pr6|368
002177  aa   004000 4310 07	fld  	2048,dl
002200  aa  6 00044 3701 20	epp4 	pr6|36,*
002201  la  4 00026 3521 20	epp2 	pr4|22,*		ioa_
002202  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 251
    return;

002203  aa  6 00164 6101 00	rtcd 	pr6|116
						STATEMENT 1 ON LINE 263
  end SAY;

BEGIN PROCEDURE INIT
ENTRY TO INIT                                               STATEMENT 1 ON LINE 253
INIT:
    proc ();

002204  aa  6 00176 6501 00	spri4	pr6|126
						STATEMENT 1 ON LINE 255
      if n_things_said = 0
      then call ioa_$nnl ("^a: ", ME);

002205  aa  6 00113 2361 00	ldq  	pr6|75		n_things_said
002206  aa   000021 6010 04	tnz  	17,ic		002227
002207  aa   775603 2350 04	lda  	-1149,ic		000012 = 136141072040
002210  aa  6 00610 7551 00	sta  	pr6|392
002211  aa  6 00610 3521 00	epp2 	pr6|392
002212  aa  6 00614 2521 00	spri2	pr6|396
002213  aa   775565 3520 04	epp2 	-1163,ic		000000 = 167141164143
002214  aa  6 00616 2521 00	spri2	pr6|398
002215  aa   775616 3520 04	epp2 	-1138,ic		000033 = 524000000004
002216  aa  6 00620 2521 00	spri2	pr6|400
002217  aa   775646 3520 04	epp2 	-1114,ic		000065 = 526000000040
002220  aa  6 00622 2521 00	spri2	pr6|402
002221  aa  6 00612 6211 00	eax1 	pr6|394
002222  aa   010000 4310 07	fld  	4096,dl
002223  aa  6 00044 3701 20	epp4 	pr6|36,*
002224  la  4 00030 3521 20	epp2 	pr4|24,*		ioa_$nnl
002225  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
002226  aa   000014 7100 04	tra  	12,ic		002242
						STATEMENT 1 ON LINE 257
      else call ioa_$nnl (", ");

002227  aa   054040 2350 03	lda  	22560,du
002230  aa  6 00610 7551 00	sta  	pr6|392
002231  aa  6 00610 3521 00	epp2 	pr6|392
002232  aa  6 00614 2521 00	spri2	pr6|396
002233  aa   775567 3520 04	epp2 	-1161,ic		000022 = 524000000002
002234  aa  6 00616 2521 00	spri2	pr6|398
002235  aa  6 00612 6211 00	eax1 	pr6|394
002236  aa   004000 4310 07	fld  	2048,dl
002237  aa  6 00044 3701 20	epp4 	pr6|36,*
002240  la  4 00030 3521 20	epp2 	pr4|24,*		ioa_$nnl
002241  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 258
      n_things_said = n_things_said + 1;

002242  aa  6 00113 0541 00	aos  	pr6|75		n_things_said
						STATEMENT 1 ON LINE 259
    end INIT;

002243  aa  6 00176 6101 00	rtcd 	pr6|126
  END PROCEDURE INIT
  END PROCEDURE SAY
BEGIN PROCEDURE CHECK_NEXT_ARG
ENTRY TO CHECK_NEXT_ARG                                     STATEMENT 1 ON LINE 265
CHECK_NEXT_ARG:
  proc (next_arg_i, max_arg_len_i, control_arg_i, syntax_i, comment_i);

002244  aa  6 00204 6501 00	spri4	pr6|132
002245  aa  6 00206 2521 00	spri2	pr6|134
002246  aa  2 00002 3521 01	epp2 	pr2|2,au
002247  aa  6 00210 2521 00	spri2	pr6|136
002250  aa  2 00000 2361 20	ldq  	pr2|0,*
002251  aa   000002 6040 04	tmi  	2,ic		002253
002252  aa   777777 3760 07	anq  	262143,dl
002253  aa  0 00250 3761 00	anq  	pr0|168		= 000077777777
002254  aa  6 00624 7561 00	stq  	pr6|404
002255  aa  2 00004 2361 20	ldq  	pr2|4,*
002256  aa   000002 6040 04	tmi  	2,ic		002260
002257  aa   777777 3760 07	anq  	262143,dl
002260  aa  0 00250 3761 00	anq  	pr0|168		= 000077777777
002261  aa  6 00625 7561 00	stq  	pr6|405
002262  aa  2 00006 2361 20	ldq  	pr2|6,*
002263  aa   000002 6040 04	tmi  	2,ic		002265
002264  aa   777777 3760 07	anq  	262143,dl
002265  aa  0 00250 3761 00	anq  	pr0|168		= 000077777777
002266  aa  6 00626 7561 00	stq  	pr6|406
002267  aa  2 00010 2361 20	ldq  	pr2|8,*
002270  aa   000002 6040 04	tmi  	2,ic		002272
002271  aa   777777 3760 07	anq  	262143,dl
002272  aa  0 00250 3761 00	anq  	pr0|168		= 000077777777
002273  aa  6 00627 7561 00	stq  	pr6|407
						STATEMENT 1 ON LINE 271
    if addr (next_arg_i) = null ()
    then do;

002274  aa  6 00206 3735 20	epp7 	pr6|134,*
002275  aa  7 00002 3521 20	epp2 	pr7|2,*		next_arg_i
002276  aa  6 00630 2521 00	spri2	pr6|408
002277  aa  6 00630 2371 00	ldaq 	pr6|408
002300  aa   775612 6770 04	eraq 	-1142,ic		000112 = 077777000043 000001000000
002301  aa  0 00460 3771 00	anaq 	pr0|304		= 077777000077 777777077077
002302  aa   000043 6010 04	tnz  	35,ic		002345
						STATEMENT 1 ON LINE 273
      call com_err_ (error_table_$noarg, ME, "The syntax is: ^a ^a^a.", control_arg_i, syntax_i, comment_i);

002303  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
002304  aa   775724 00 0030	desc9a	-1068,24		000227 = 124150145040
002305  aa  6 00632 00 0030	desc9a	pr6|410,24
002306  aa  6 00044 3701 20	epp4 	pr6|36,*
002307  la  4 00014 3521 20	epp2 	pr4|12,*		error_table_$noarg
002310  aa  6 00642 2521 00	spri2	pr6|418
002311  aa   775467 3520 04	epp2 	-1225,ic		000000 = 167141164143
002312  aa  6 00644 2521 00	spri2	pr6|420
002313  aa  6 00632 3521 00	epp2 	pr6|410
002314  aa  6 00646 2521 00	spri2	pr6|422
002315  aa  7 00006 3521 20	epp2 	pr7|6,*		control_arg_i
002316  aa  6 00650 2521 00	spri2	pr6|424
002317  aa  7 00010 3521 20	epp2 	pr7|8,*		syntax_i
002320  aa  6 00652 2521 00	spri2	pr6|426
002321  aa  7 00012 3521 20	epp2 	pr7|10,*		comment_i
002322  aa  6 00654 2521 00	spri2	pr6|428
002323  aa   775526 3520 04	epp2 	-1194,ic		000051 = 404000000043
002324  aa  6 00656 2521 00	spri2	pr6|430
002325  aa   775540 3520 04	epp2 	-1184,ic		000065 = 526000000040
002326  aa  6 00660 2521 00	spri2	pr6|432
002327  aa   775462 3520 04	epp2 	-1230,ic		000011 = 524000000027
002330  aa  6 00662 2521 00	spri2	pr6|434
002331  aa  6 00210 3715 20	epp5 	pr6|136,*
002332  aa  5 00004 3521 20	epp2 	pr5|4,*
002333  aa  6 00664 2521 00	spri2	pr6|436
002334  aa  5 00006 3521 20	epp2 	pr5|6,*
002335  aa  6 00666 2521 00	spri2	pr6|438
002336  aa  5 00010 3521 20	epp2 	pr5|8,*
002337  aa  6 00670 2521 00	spri2	pr6|440
002340  aa  6 00640 6211 00	eax1 	pr6|416
002341  aa   030000 4310 07	fld  	12288,dl
002342  la  4 00016 3521 20	epp2 	pr4|14,*		com_err_
002343  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 274
      go to TRANSACTION_END;

002344  aa   777404 7100 04	tra  	-252,ic		001750
						STATEMENT 1 ON LINE 275
    end;

						STATEMENT 1 ON LINE 277
    if length (next_arg_i) > max_arg_len_i
    then do;

002345  aa  6 00624 2361 00	ldq  	pr6|404
002346  aa  7 00004 1161 20	cmpq 	pr7|4,*		max_arg_len_i
002347  aa   000053 6044 04	tmoz 	43,ic		002422
						STATEMENT 1 ON LINE 279
      call com_err_ (error_table_$bigarg, ME, "The maximum length for ^a is ^d characters.
The syntax is: ^a ^a^a.", syntax_i, max_arg_len_i, control_arg_i, syntax_i, comment_i);

002350  aa  000 100 100 404	mlr  	(ic),(pr),fill(000)
002351  aa   776013 00 0104	desc9a	-1013,68		000363 = 124150145040
002352  aa  6 00640 00 0104	desc9a	pr6|416,68
002353  aa  6 00044 3701 20	epp4 	pr6|36,*
002354  la  4 00012 3521 20	epp2 	pr4|10,*		error_table_$bigarg
002355  aa  6 00674 2521 00	spri2	pr6|444
002356  aa   775422 3520 04	epp2 	-1262,ic		000000 = 167141164143
002357  aa  6 00676 2521 00	spri2	pr6|446
002360  aa  6 00640 3521 00	epp2 	pr6|416
002361  aa  6 00700 2521 00	spri2	pr6|448
002362  aa  7 00010 3521 20	epp2 	pr7|8,*		syntax_i
002363  aa  6 00702 2521 00	spri2	pr6|450
002364  aa  7 00004 3521 20	epp2 	pr7|4,*		max_arg_len_i
002365  aa  6 00704 2521 00	spri2	pr6|452
002366  aa  7 00006 3521 20	epp2 	pr7|6,*		control_arg_i
002367  aa  6 00706 2521 00	spri2	pr6|454
002370  aa  7 00010 3521 20	epp2 	pr7|8,*		syntax_i
002371  aa  6 00710 2521 00	spri2	pr6|456
002372  aa  7 00012 3521 20	epp2 	pr7|10,*		comment_i
002373  aa  6 00712 2521 00	spri2	pr6|458
002374  aa   775455 3520 04	epp2 	-1235,ic		000051 = 404000000043
002375  aa  6 00714 2521 00	spri2	pr6|460
002376  aa   775467 3520 04	epp2 	-1225,ic		000065 = 526000000040
002377  aa  6 00716 2521 00	spri2	pr6|462
002400  aa   775410 3520 04	epp2 	-1272,ic		000010 = 524000000103
002401  aa  6 00720 2521 00	spri2	pr6|464
002402  aa  6 00210 3715 20	epp5 	pr6|136,*
002403  aa  5 00006 3521 20	epp2 	pr5|6,*
002404  aa  6 00722 2521 00	spri2	pr6|466
002405  aa   775436 3520 04	epp2 	-1250,ic		000043 = 404000000025
002406  aa  6 00724 2521 00	spri2	pr6|468
002407  aa  5 00004 3521 20	epp2 	pr5|4,*
002410  aa  6 00726 2521 00	spri2	pr6|470
002411  aa  5 00006 3521 20	epp2 	pr5|6,*
002412  aa  6 00730 2521 00	spri2	pr6|472
002413  aa  5 00010 3521 20	epp2 	pr5|8,*
002414  aa  6 00732 2521 00	spri2	pr6|474
002415  aa  6 00672 6211 00	eax1 	pr6|442
002416  aa   040000 4310 07	fld  	16384,dl
002417  la  4 00016 3521 20	epp2 	pr4|14,*		com_err_
002420  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 281
      go to TRANSACTION_END;

002421  aa   777327 7100 04	tra  	-297,ic		001750
						STATEMENT 1 ON LINE 282
    end;

						STATEMENT 1 ON LINE 283
  end CHECK_NEXT_ARG;

002422  aa  6 00204 6101 00	rtcd 	pr6|132
  END PROCEDURE CHECK_NEXT_ARG
BEGIN PROCEDURE SUB_ERROR_HANDLER
ENTRY TO SUB_ERROR_HANDLER                                  STATEMENT 1 ON LINE 287
SUB_ERROR_HANDLER:
  proc (mcptr_i, a_name_i, wcptr_i, info_ptr_i, continue_o);

002423  da     000320200000
002424  aa   000160 6270 00	eax7 	112
002425  aa  7 00034 3521 20	epp2 	pr7|28,*
002426  aa  2 01050 2721 00	tsp2 	pr2|552		int_entry_desc
002427  aa     000012000000
002430  aa     000000000000
002431  aa  6 00042 3735 20	epp7 	pr6|34,*
002432  aa  7 00002 2361 20	ldq  	pr7|2,*
002433  aa   000002 6040 04	tmi  	2,ic		002435
002434  aa   777777 3760 07	anq  	262143,dl
002435  aa  0 00250 3761 00	anq  	pr0|168		= 000077777777
002436  aa  6 00104 7561 00	stq  	pr6|68
						STATEMENT 1 ON LINE 289
    sub_error_info_ptr = info_ptr_i;

002437  aa  6 00032 3715 20	epp5 	pr6|26,*
002440  aa  5 00010 3535 20	epp3 	pr5|8,*		info_ptr_i
002441  aa  3 00000 3535 20	epp3 	pr3|0,*		info_ptr_i
002442  aa  6 00102 2535 00	spri3	pr6|66		sub_error_info_ptr
						STATEMENT 1 ON LINE 290
    condition_info_header_ptr = null ();

002443  aa   775447 2370 04	ldaq 	-1241,ic		000112 = 077777000043 000001000000
002444  aa  6 00100 7571 00	staq 	pr6|64		condition_info_header_ptr
						STATEMENT 1 ON LINE 291
    if sub_error_info.name ^= trace_$me ()
    then go to CONTINUE;

002445  aa  6 00106 3521 00	epp2 	pr6|70
002446  aa  6 00120 2521 00	spri2	pr6|80
002447  aa  6 00116 6211 00	eax1 	pr6|78
002450  aa   004000 4310 07	fld  	2048,dl
002451  la  4 00032 3521 20	epp2 	pr4|26,*		trace_$me
002452  aa  0 00623 7001 00	tsx0 	pr0|403		call_ext_out
002453  aa  6 00102 3735 20	epp7 	pr6|66,*		sub_error_info_ptr
002454  aa  040 100 106 500	cmpc 	(pr),(pr),fill(040)
002455  aa  7 00106 00 0040	desc9a	pr7|70,32		sub_error_info.name
002456  aa  6 00106 00 0040	desc9a	pr6|70,32
002457  aa   000077 6010 04	tnz  	63,ic		002556
						STATEMENT 1 ON LINE 293
    if sub_error_info.header.support_signal | sub_error_info.header.quiet_restart
    then go to HANDLED;

002460  aa  7 00002 2351 00	lda  	pr7|2		sub_error_info.quiet_restart
002461  aa   140000 3150 03	cana 	49152,du
002462  aa   000071 6010 04	tnz  	57,ic		002553
						STATEMENT 1 ON LINE 295
    if sub_error_info.header.default_restart
    then go to REPORT;

002463  aa  7 00002 2351 00	lda  	pr7|2		sub_error_info.default_restart
002464  aa   200000 3150 03	cana 	65536,du
002465  aa   000037 6010 04	tnz  	31,ic		002524
						STATEMENT 1 ON LINE 297
    if sub_error_info.header.cant_restart
    then go to REPORT_AND_ABORT;

002466  aa  7 00002 2351 00	lda  	pr7|2		sub_error_info.cant_restart
002467  aa   400000 3150 03	cana 	131072,du
002470  aa   000002 6010 04	tnz  	2,ic		002472
						STATEMENT 1 ON LINE 299
    else go to CONTINUE;

002471  aa   000065 7100 04	tra  	53,ic		002556
						STATEMENT 1 ON LINE 301
REPORT_AND_ABORT:
    call com_err_ (sub_error_info.header.status_code, ME, "^a", sub_error_info.header.info_string);

002472  aa   136141 2350 03	lda  	48225,du
002473  aa  6 00105 7551 00	sta  	pr6|69
002474  aa  7 00104 3521 00	epp2 	pr7|68		sub_error_info.status_code
002475  aa  6 00124 2521 00	spri2	pr6|84
002476  aa   775302 3520 04	epp2 	-1342,ic		000000 = 167141164143
002477  aa  6 00126 2521 00	spri2	pr6|86
002500  aa  6 00105 3521 00	epp2 	pr6|69
002501  aa  6 00130 2521 00	spri2	pr6|88
002502  aa  7 00004 3521 00	epp2 	pr7|4		sub_error_info.info_string
002503  aa  6 00132 2521 00	spri2	pr6|90
002504  aa   775345 3520 04	epp2 	-1307,ic		000051 = 404000000043
002505  aa  6 00134 2521 00	spri2	pr6|92
002506  aa   775357 3520 04	epp2 	-1297,ic		000065 = 526000000040
002507  aa  6 00136 2521 00	spri2	pr6|94
002510  aa   775312 3520 04	epp2 	-1334,ic		000022 = 524000000002
002511  aa  6 00140 2521 00	spri2	pr6|96
002512  aa   775343 3520 04	epp2 	-1309,ic		000055 = 530000000400
002513  aa  6 00142 2521 00	spri2	pr6|98
002514  aa  6 00122 6211 00	eax1 	pr6|82
002515  aa   020000 4310 07	fld  	8192,dl
002516  aa  6 00044 3701 20	epp4 	pr6|36,*
002517  la  4 00016 3521 20	epp2 	pr4|14,*		com_err_
002520  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 303
    go to TRANSACTION_END;

002521  aa   777227 3520 04	epp2 	-361,ic		001750 = 600122352100
002522  aa   000001 7270 07	lxl7 	1,dl
002523  aa  0 00657 7101 00	tra  	pr0|431		tra_ext
						STATEMENT 1 ON LINE 305
REPORT:
    call com_err_ (sub_error_info.header.status_code, ME, "^a", sub_error_info.header.info_string);

002524  aa   136141 2350 03	lda  	48225,du
002525  aa  6 00105 7551 00	sta  	pr6|69
002526  aa  7 00104 3521 00	epp2 	pr7|68		sub_error_info.status_code
002527  aa  6 00124 2521 00	spri2	pr6|84
002530  aa   775250 3520 04	epp2 	-1368,ic		000000 = 167141164143
002531  aa  6 00126 2521 00	spri2	pr6|86
002532  aa  6 00105 3521 00	epp2 	pr6|69
002533  aa  6 00130 2521 00	spri2	pr6|88
002534  aa  7 00004 3521 00	epp2 	pr7|4		sub_error_info.info_string
002535  aa  6 00132 2521 00	spri2	pr6|90
002536  aa   775313 3520 04	epp2 	-1333,ic		000051 = 404000000043
002537  aa  6 00134 2521 00	spri2	pr6|92
002540  aa   775325 3520 04	epp2 	-1323,ic		000065 = 526000000040
002541  aa  6 00136 2521 00	spri2	pr6|94
002542  aa   775260 3520 04	epp2 	-1360,ic		000022 = 524000000002
002543  aa  6 00140 2521 00	spri2	pr6|96
002544  aa   775311 3520 04	epp2 	-1335,ic		000055 = 530000000400
002545  aa  6 00142 2521 00	spri2	pr6|98
002546  aa  6 00122 6211 00	eax1 	pr6|82
002547  aa   020000 4310 07	fld  	8192,dl
002550  aa  6 00044 3701 20	epp4 	pr6|36,*
002551  la  4 00016 3521 20	epp2 	pr4|14,*		com_err_
002552  aa  0 00622 7001 00	tsx0 	pr0|402		call_ext_out_desc
						STATEMENT 1 ON LINE 308
HANDLED:
    continue_o = "0"b;

002553  aa  6 00032 3735 20	epp7 	pr6|26,*
002554  aa  7 00012 4501 20	stz  	pr7|10,*		continue_o
						STATEMENT 1 ON LINE 310
    return;

002555  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 312
CONTINUE:
    continue_o = "1"b;

002556  aa   400000 2350 03	lda  	131072,du
002557  aa  6 00032 3715 20	epp5 	pr6|26,*
002560  aa  5 00012 7551 20	sta  	pr5|10,*		continue_o
						STATEMENT 1 ON LINE 314
    return;

002561  aa  0 00631 7101 00	tra  	pr0|409		return
						STATEMENT 1 ON LINE 326
  end SUB_ERROR_HANDLER;

  END PROCEDURE SUB_ERROR_HANDLER
  END PROCEDURE watch


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
