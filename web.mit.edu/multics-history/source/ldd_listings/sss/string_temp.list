	COMPILATION LISTING OF SEGMENT string_temp
	Compiled by: Multics PL/I Compiler, Release 28d, of September 14, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 10/03/83  1705.0 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 /* format: style3 */
       12 string_temp:
       13      proc (pt, pt2, pt3) returns (ptr);
       14 
       15 /* Program to standardize the allocation of long string temps for string_op and cat_op */
       16 
       17 /*	Written:	by Richard A. Barnes for EIS compiler
       18*	Modified:	21 August 1978 by RAB to tighten restrictions in need_temp
       19*	Modified:	1 April 1979 by RAB to improve code generated for equal
       20*		expression lengths
       21*	Modified:	15 April 1979 by RAB to make the determination in need_temp
       22*		more precise by checking if generation overlaps are exact
       23*	Modified:	30 March 1980 by RAB for reference.aligned_for_store_ref.
       24*		See prepare_operand for details.
       25**/
       26 
       27 dcl	pt		ptr,			/* operator node */
       28 	pt2		ptr,			/* reference node of source to be optionally moved into temp.
       29*			   the space for the source may be reused for the temp */
       30 	pt3		ptr;			/* reference node of other operand */
       31 
       32 dcl	(
       33 	op,
       34 	p1,
       35 	p		(2:3),
       36 	q
       37 	)		ptr;
       38 dcl	(dt, icat, k, size, type)
       39 			fixed bin;
       40 dcl	dont_move		bit (1) aligned;		/* ON if p(2) should NOT be moved into the new temp */
       41 
       42 dcl	cg_stat$eis_temp	ptr ext;
       43 dcl	cg_stat$for_test_called
       44 			bit (1) aligned ext;
       45 
       46 dcl	(
       47 	realloc_char_temp	(0:1) init (92, 200),
       48 	alloc_char_temp	init (89),
       49 	zero_mac		(0:1) init (308, 307),
       50 	move_chars	(0:1) init (98, 218)
       51 	)		fixed bin (15) int static;
       52 
       53 dcl	adjust_ref_count	entry (ptr, fixed bin);
       54 dcl	copy_temp		entry (ptr) returns (ptr);
       55 dcl	long_op$eis	entry (ptr, fixed bin, fixed bin (15));
       56 dcl	expmac		entry (fixed bin (15), ptr);
       57 dcl	get_reference	entry () returns (ptr);
       58 dcl	long_op$extend_stack
       59 			entry (ptr, fixed bin (15));
       60 dcl	share_expression	entry (ptr) returns (ptr);
       61 dcl	stack_temp$assign_temp
       62 			entry (ptr);
       63 dcl	state_man$update_ref
       64 			entry (ptr);
       65 dcl	base_man$update_base
       66 			entry (fixed bin, ptr, fixed bin);
       67 
       68 dcl	(fixed, min, mod, null)
       69 			builtin;
       70 
  1     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
  1     2 
  1     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
  1     4 
  1     5 /* format: style3 */
  1     6 dcl	1 operator	based aligned,
  1     7 	  2 node_type	bit (9) unaligned,
  1     8 	  2 op_code	bit (9) unaligned,
  1     9 	  2 shared	bit (1) unaligned,
  1    10 	  2 processed	bit (1) unaligned,
  1    11 	  2 optimized	bit (1) unaligned,
  1    12 	  2 number	fixed (14) unaligned,
  1    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
  1    14 
  1    15 dcl	max_number_of_operands
  1    16 			fixed bin (15) int static options (constant) initial (32767);
  1    17 
  1    18 /* END INCLUDE FILE ... operator.incl.pl1 */
       71 
  2     1 /* BEGIN INCLUDE FILE ... op_codes.incl.pl1 */
  2     2 
  2     3 /* Modified: 25 Apr 1979 by PCK 4-bit decimal */
  2     4 /* Modified: 6 Jun 1979 by PG to add rank and byte */
  2     5 /* Modified: 26 Dec 1979 by PCK to add assign_by_name */
  2     6 /* Modified: 26 July 82 BIM wordno, segno */
  2     7 
  2     8 dcl (	add		initial("000010001"b),	/* opnd(1) <- opnd(2)+opnd(3)		*/
  2     9 	sub		initial("000010010"b),	/* opnd(1) <- opnd(2)-opnd(3)		*/
  2    10 	mult		initial("000010011"b),	/* opnd(1) <- opnd(2)*opnd(3)		*/
  2    11 	div		initial("000010100"b),	/* opnd(1) <- opnd(2)/opnd(3)		*/
  2    12 	negate		initial("000010101"b),	/* opnd(1) <- -opnd(2)  		*/
  2    13 	exp		initial("000010110"b),	/* opnd(1) <- opnd(2) ** opnd(3)	*/
  2    14 
  2    15 	and_bits		initial("000100001"b),	/* opnd(1) <- opnd(2) & opnd(3)	*/
  2    16 	or_bits		initial("000100010"b),	/* opnd(1) <- opnd(2)|opnd(3)		*/
  2    17 	xor_bits		initial("000100011"b),	/* opnd(1) <- opnd(2) xor opnd(3)	*/
  2    18 	not_bits		initial("000100100"b),	/* opnd(1) <- ^opnd(2)		*/
  2    19 	cat_string	initial("000100101"b),	/* opnd(1) <- opnd(2)||opnd(3)	*/
  2    20 	bool_fun		initial("000100110"b),	/* opnd(1) <- bool(opnd(2),opnd(3),opnd(4)) */
  2    21 
  2    22 	assign		initial("000110001"b),	/* opnd(1) <- opnd(2)		*/
  2    23 	assign_size_ck	initial("000110010"b),	/* opnd(1) <- opnd(2)		*/
  2    24 	assign_zero	initial("000110011"b),	/* opnd(1) <- 0			*/
  2    25 	copy_words	initial("000110100"b),	/* move opnd(2) to opnd(1) by opnd(3) words */
  2    26 	copy_string	initial("000110101"b),	/* move opnd(2) to opnd(1) by opnd(3) units */
  2    27 	make_desc		initial("000110110"b),	/* opnd(1) <- descriptor(opnd(2),opnd(3)) */
  2    28 	assign_round	initial("000110111"b),	/* opnd(1) <- opnd(2) rounded		*/
  2    29 	pack		initial("000111000"b),	/* opnd(1) <- encode to picture opnd(2) */
  2    30 	unpack		initial("000111001"b),	/* opnd(1) <- decode from picture opnd(2) */
  2    31 
  2    32 	less_than		initial("001000100"b),	/* opnd(1) <- opnd(2) < opnd(3)	*/
  2    33 	greater_than	initial("001000101"b),	/* opnd(1) <- opnd(2) > opnd(3)	*/
  2    34 	equal		initial("001000110"b),	/* opnd(1) <- opnd(2) = opnd(3)	*/
  2    35 	not_equal		initial("001000111"b),	/* opnd(1) <- opnd(2) ^= opnd(3)	*/
  2    36 	less_or_equal	initial("001001000"b),	/* opnd(1) <- opnd(2) <= opnd(3)	*/
  2    37 	greater_or_equal	initial("001001001"b),	/* opnd(1) <- opnd(2) >= opnd(3)	*/
  2    38 
  2    39 	jump		initial("001010001"b),	/* go to opnd(1) unconditionally	*/
  2    40 	jump_true		initial("001010010"b),	/* go to opnd(1) if opnd(2) is not 0	*/
  2    41 	jump_false	initial("001010011"b),	/* go to opnd(1) if opnd(2) is all 0	*/
  2    42 	jump_if_lt	initial("001010100"b),	/* go to opnd(1) if opnd(2) < opnd(3)	*/
  2    43 	jump_if_gt	initial("001010101"b),	/* go to opnd(1) if opnd(2) > opnd(3)	*/
  2    44 	jump_if_eq	initial("001010110"b),	/* go to opnd(1) if opnd(2) = opnd(3)	*/
  2    45 	jump_if_ne	initial("001010111"b),	/* go to opnd(1) if opnd(2) ^= opnd(3)	*/
  2    46 	jump_if_le	initial("001011000"b),	/* go to opnd(1) if opnd(2) <= opnd(3)	*/
  2    47 	jump_if_ge	initial("001011001"b),	/* go to opnd(1) if opnd(2) >= opnd(3)	*/
  2    48 
  2    49 	std_arg_list	initial("001100001"b),	/* opnd(1) <- arglist(opnd(2) desclist(opnd(3)))	*/
  2    50 	return_words	initial("001100010"b),	/* return aggregate opnd(1), opnd(2) is length in words */
  2    51 	std_call		initial("001100011"b),	/* opnd(1) <- call opnd(2) with opnd(3)		*/
  2    52 	return_bits	initial("001100100"b),	/* return aggregate opnd(1), opnd(2) is length in bits */
  2    53 	std_entry		initial("001100101"b),	/* entry(opnd(1)... opnd(n))			*/
  2    54 	return_string	initial("001100110"b),	/* return string opnd(1) */
  2    55 	ex_prologue	initial("001100111"b),	/* execute the prologue -no operands-		*/
  2    56 	allot_auto	initial("001101000"b),	/* opnd(1) <- addrel(stack,opnd(2))		*/
  2    57 	param_ptr		initial("001101001"b),	/* opnd(1) <- ptr to opnd(2) in  block opnd(3)	*/
  2    58 	param_desc_ptr	initial("001101010"b),	/* opnd(1) <- ptr to opnd(2) in block opnd(3)	*/
  2    59 	std_return	initial("001101011"b),	/* return -no arguments-			*/
  2    60 	allot_ctl		initial("001101100"b),	/* allocate opnd(1) , length in words is opnd(2) 	*/
  2    61 	free_ctl		initial("001101101"b),	/* free opnd(1)				*/
  2    62 	stop		initial("001101110"b),	/* stop - terminate run unit			*/
  2    63 
  2    64 	mod_bit		initial("001110000"b),	/* opnd(1) <- mod(opnd(3),36),
  2    65*						   opnd(2) <- opnd(3) / 36		*/
  2    66 	mod_byte		initial("001110001"b),	/* opnd(1) <- mod(opnd(3),4),
  2    67*						   opnd(2) <- opnd(3) / 4		*/
  2    68 	mod_half		initial("001110010"b),	/* opnd(1) <- mod(opnd(3),2),
  2    69*						   opnd(2) <- opnd(3) / 2		*/
  2    70 	mod_word		initial("001110011"b),	/* TO BE DEFINED BY BLW			*/
  2    71 
  2    72 	bit_to_char	initial("010000000"b),	/* opnd(1) <- (opnd(2)+8)/9		*/
  2    73 	bit_to_word	initial("010000001"b),	/* opnd(1) <- (opnd(2)+35)/36		*/
  2    74 	char_to_word	initial("010000010"b),	/* opnd(1) <- (opnd(2)+3)/4		*/
  2    75 	half_to_word	initial("010000011"b),	/* opnd(1) <- (opnd(2)+1)/2		*/
  2    76 	word_to_mod2	initial("010000100"b),	/* opnd(1) <- (opnd(2)+1)/2*2		*/
  2    77 	word_to_mod4	initial("010000101"b),	/* opnd(1) <- (opnd(2)+3)/4*4		*/
  2    78 	word_to_mod8	initial("010000110"b),	/* opnd(1) <- (opnd(2)+7)/8*8		*/
  2    79 	rel_fun		initial("010000111"b),	/* opnd(1) <- rel(opnd(2))		*/
  2    80 	baseno_fun	initial("010001000"b),	/* opnd(1) <- baseno(opnd(2))		*/
  2    81 	desc_size		initial("010001001"b),	/* opnd(1) <- substr(opnd(2),13,24)	*/
  2    82 	bit_pointer	initial("010001010"b),	/* opnd(1) <- bit offset of opnd(2)	*/
  2    83 	index_before_fun	initial("010001011"b),	/* opnd(1) <- length of before(opnd(2),opnd(3)) */
  2    84 	index_after_fun	initial("010001100"b),	/* opnd(1) <- offset of after(opnd(2),opnd(3)) in opnd(2) */
  2    85 	verify_ltrim_fun	initial("010001101"b),	/* opnd(1) <- offset of ltrim(opnd(2),opnd(3)) in opnd(2) */
  2    86 	verify_rtrim_fun	initial("010001110"b),	/* opnd(1) <- length(opnd(2))-length(rtrim(opnd(2),opnd(3))) */
  2    87 	digit_to_bit	initial("010001111"b),	/* opnd(1) <- 9*opnd(2)/2		*/
  2    88 
  2    89 	ceil_fun		initial("010010000"b),	/* opnd(1) <- ceil(opnd(2))		*/
  2    90 	floor_fun		initial("010010001"b),	/* opnd(1) <- floor(opnd(2))		*/
  2    91 	round_fun		initial("010010010"b),	/* opnd(1) <- round(opnd(2))		*/
  2    92 	sign_fun		initial("010010011"b),	/* opnd(1) <- sign(opnd(2))		*/
  2    93 	abs_fun		initial("010010100"b),	/* opnd(1) <- abs(opnd(2))		*/
  2    94 	trunc_fun		initial("010010101"b),	/* opnd(1) <- trunc(opnd(2))		*/
  2    95 	byte_fun		initial("010010110"b),	/* opnd(1) <- byte(opnd(2))		*/
  2    96 	rank_fun		initial("010010111"b),	/* opnd(1) <- rank(opnd(2))		*/
  2    97 	index_rev_fun	initial("010011000"b),	/* opnd(1) <- index(reverse(opnd(2)),reverse(opnd(3))) */
  2    98 	search_rev_fun	initial("010011001"b),	/* opnd(1) <- search(reverse(opnd(2)),opnd(3)) */
  2    99 	verify_rev_fun	initial("010011010"b),	/* opnd(1) <- verify(reverse(opnd(2)),opnd(3)) */
  2   100 	wordno_fun	initial("010011011"b),        /* opnd(1) <- wordno (opnd(2)) */
  2   101 	segno_fun		initial("010011100"b),        /* opnd(1) <- segno (opnd(2)) */
  2   102 	bitno_fun           initial("010011101"b),        /* opnd(1) <- bitno (opnd(2)) */
  2   103 	charno_fun	initial("010011110"b),        /* opnd(1) <- charno (opnd(2)) */
  2   104 
  2   105 	index_fun		initial("010100000"b),	/* opnd(1) <- index(opnd(2),opnd(3))	*/
  2   106 	off_fun		initial("010100001"b),	/* opnd(1) <- offset(opnd(2),opnd(3))	*/
  2   107 	complex_fun	initial("010100010"b),	/* opnd(1) <- complex(opnd(2),opnd(3))	*/
  2   108 	conjg_fun		initial("010100011"b),	/* opnd(1) <- conjg(opnd(2),opnd(3))	*/
  2   109 	mod_fun		initial("010100100"b),	/* opnd(1) <- mod(opnd(2),opnd(3))	*/
  2   110 	repeat_fun	initial("010100101"b),	/* opnd(1) <- repeat(opnd(2),opnd(3))	*/
  2   111 	verify_fun	initial("010100110"b),	/* opnd(1) <- verify(opnd(2),opnd(3))	*/
  2   112 	translate_fun	initial("010100111"b),	/* opnd(1) <- translate(opnd(2),opnd(3))*/
  2   113 	real_fun   	initial("010101001"b),	/* opnd(1) <- real(opnd(2))		*/
  2   114 	imag_fun   	initial("010101010"b),	/* opnd(1) <- imag(opnd(2))		*/
  2   115 	length_fun	initial("010101011"b),	/* opnd(1) <- length(opnd(2))	*/
  2   116 	pl1_mod_fun	initial("010101100"b),	/* opnd(1) <- mod(opnd(2)) */
  2   117 	search_fun	initial("010101101"b),	/* opnd(1) <- search(opnd(2),opnd(3)) */
  2   118 	allocation_fun	initial("010101110"b),	/* opnd(1) <- allocation(opnd(2)) */
  2   119 	reverse_fun	initial("010101111"b),	/* opnd(1) <- reverse(opnd(2)) */
  2   120 
  2   121 	addr_fun		initial("010110000"b),	/* opnd(1) <- addr(opnd(2))		*/
  2   122 	addr_fun_bits	initial("010110001"b),	/* opnd(1) <- addr(opnd(2))		*/
  2   123 	ptr_fun		initial("010110010"b),	/* opnd(1) <- ptr(opnd(2),opnd(3))	*/
  2   124 	baseptr_fun	initial("010110011"b),	/* opnd(1) <- baseptr(opnd(2))	*/
  2   125 	addrel_fun	initial("010110100"b),	/* opnd(1) <- addrel(opnd(2),opnd(3))	*/
  2   126 	codeptr_fun	initial("010110101"b),	/* opnd(1) <- codeptr(opnd(2))	*/
  2   127 	environmentptr_fun	initial("010110110"b),	/* opnd(1) <- environmentptr(opnd(2))	*/
  2   128 	stackbaseptr_fun	initial("010110111"b),	/* opnd(1) is ptr to base of current stack	*/
  2   129 	stackframeptr_fun	initial("010111000"b),	/* opnd(1) is ptr to current block's stack frame	*/
  2   130 	setcharno_fun	initial("010111001"b),	/* opnd(1) <- opnd(2) with charno opnd(3) */
  2   131 	addcharno_fun	initial("010111010"b),	/* opnd(1) <- opnd(2) with charno = charno + opnd(3) */
  2   132 	setbitno_fun	initial("010111011"b),	/* setcharno for bitsno */
  2   133 	addbitno_fun	initial("010111100"b),	/* addcharno for bitno */
  2   134 
  2   135 	min_fun		initial("011000000"b),	/* opnd(1) <- min(opnd(1),opnd(2),...)	*/
  2   136 	max_fun		initial("011000001"b),	/* opnd(1) <- max(opnd(1),opnd(2),...)	*/
  2   137 
  2   138 	stack_ptr		initial("011010001"b),	/* opnd(1) <- stack frame ptr		*/
  2   139 	empty_area	initial("011010010"b),	/* empty opnd(1), length in words is opnd(2) */
  2   140 	enable_on		initial("011010100"b),	/* opnd(1) is the cond name
  2   141*						   opnd(2) is the file name
  2   142*						   opnd(3) is the block	*/
  2   143 	revert_on		initial("011010101"b),	/* opnd(1) is the cond name,
  2   144*						   opnd(2) is the file name	*/
  2   145 	signal_on		initial("011010110"b),	/* opnd(1) is the cond name
  2   146*						   opnd(2) is the file name */
  2   147 
  2   148 	lock_fun		initial("011010111"b),	/* opnd(1) <- stac(opnd(2),opnd(3))	*/
  2   149 	stacq_fun		initial("011011000"b),	/* opnd(1) is result, opnd(2) is ptr to lock word,
  2   150*						   opnd(3) is old value, (4) is new value. */
  2   151 	clock_fun		initial("011011001"b),	/* opnd(1) is the clock time		*/
  2   152 	vclock_fun	initial("011011010"b),	/* opnd(1) is the virtual clock time	*/
  2   153 
  2   154 	bound_ck		initial("011100000"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
  2   155 	range_ck		initial("011100001"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
  2   156 	loop		initial("011100010"b),	/* do opnd(1) for opnd(2) from opnd(3) to opnd(4) by 1,
  2   157*						   opnd(5) is the list */
  2   158 	join		initial("011100011"b),	/* do opnd(1), opnd(2) ... opnd(n)	*/
  2   159 	allot_based	initial("011100100"b),	/* allocate opnd(2) words in opnd(3), set opnd(1) */
  2   160 	free_based	initial("011100101"b),	/* free opnd(1) in opnd(3), length is opnd(2) words */
  2   161 
  2   162 	r_parn		initial("011110001"b),	/* format op code			*/
  2   163 	l_parn		initial("011110010"b),
  2   164 	r_format		initial("011110011"b),
  2   165 	c_format		initial("011110100"b),
  2   166 	f_format		initial("011110101"b),
  2   167 	e_format		initial("011110110"b),
  2   168 	b_format		initial("011110111"b),
  2   169 	a_format		initial("011111000"b),
  2   170 	x_format		initial("011111001"b),
  2   171 	skip_format	initial("011111010"b),
  2   172 	column_format	initial("011111011"b),
  2   173 	page_format	initial("011111100"b),
  2   174 	line_format	initial("011111101"b),
  2   175 	picture_format	initial("011111110"b),
  2   176 	bn_format		initial("011111111"b),	/* bit format, length(opnd(2)), radix factor(opnd(3)) */
  2   177 
  2   178 	get_list_trans	initial("100000000"b),	/* getlist(opnd(2) with desc(opnd(1)))	*/
  2   179 	get_edit_trans	initial("100000001"b),	/* getedit(opnd(2) with desc(opnd(1)))	*/
  2   180 	get_data_trans	initial("100000010"b),	/* getdata(opnd(1) to opnd(n))	*/
  2   181 	put_list_trans	initial("100000011"b),	/* putlist(opnd(2) with desc(opnd(1)))	*/
  2   182 	put_edit_trans	initial("100000100"b),	/* putedit(opnd(2) with desc(opnd(1)))	*/
  2   183 	put_data_trans	initial("100000101"b),	/* putdata(opnd(2)) with subscript-list opnd(1) */
  2   184 	terminate_trans	initial("100000110"b),	/* terminate stream transmission	*/
  2   185 	stream_prep	initial("100000111"b),	/* initiate stream transmission	*/
  2   186 	record_io		initial("100001000"b),	/* perform record io operation	*/
  2   187 	fortran_read	initial("100001001"b),	/* A complete read statement		*/
  2   188 	fortran_write	initial("100001010"b),	/* A complete write statement		*/
  2   189 	ftn_file_manip	initial("100001011"b),	/* endfile,backspace,rewind,etc.	*/
  2   190 	ftn_trans_loop	initial("100001100"b),	/* An implied do in i/o list		*/
  2   191 	put_control	initial("100001101"b),	/* put control opnd(1) opnd(2) times	*/
  2   192 	put_field		initial("100001110"b),	/* putlist(opnd(2)) of length(opnd(1))	*/
  2   193 	put_field_chk	initial("100001111"b),	/* putlist(op(2)) of len(op(1)) check char index(op(3)) */
  2   194 
  2   195 /* These operators are produced by the parse but are not used as input to the code generator.	*/
  2   196 /* They are processed by the semantic translator.						*/
  2   197 
  2   198 	return_value	initial("100010010"b),	/* return(opnd(1))			*/
  2   199 	allot_var		initial("100010011"b),	/* allot opnd(1) in opnd(2)		*/
  2   200 	free_var		initial("100010100"b),	/* free opnd(1) out of opnd(2)	*/
  2   201 	get_file		initial("100010101"b),	/* opnd(1) is filename,opnd(2) is copy	*/
  2   202 						/* opnd(3) is skip, opnd(4) is list	*/
  2   203 	get_string	initial("100010110"b),	/* opnd(1) is string,opnd(2) is list	*/
  2   204 	put_file		initial("100010111"b),	/* opnd(1) is filename,opnd(2) is page	*/
  2   205 						/* opnd(3) is skip,opnd(4) is line	*/
  2   206 	put_string	initial("100011000"b),	/* opnd(1) is string,opnd(2) is list	*/
  2   207 	open_file		initial("100011001"b),
  2   208 	close_file	initial("100011010"b),
  2   209 	read_file		initial("100011011"b),
  2   210 	write_file	initial("100011100"b),
  2   211 	locate_file	initial("100011101"b),
  2   212 	do_fun		initial("100011110"b),	/* opnd(1) is join of a list		*/
  2   213 						/* opnd(2) is control variable ref	*/
  2   214 						/* opnd(3) is specification operator	*/
  2   215 	do_spec		initial("100011111"b),	/* opnd(1) to opnd(2) by opnd(3) 	*/
  2   216 						/* repeat opnd(4) while opnd(5)	*/
  2   217 						/* opnd(6) is next specification	*/
  2   218 
  2   219 	rewrite_file	initial("100100000"b),
  2   220 	delete_file	initial("100100001"b),
  2   221 	unlock_file	initial("100100010"b),
  2   222 	lock_file		initial("100100011"b),
  2   223 	refer		initial("100100101"b),	/* opnd(1) refer(opnd(2))		*/
  2   224 	prefix_plus	initial("100100110"b),	/* opnd(1) <- +opnd(2)		*/
  2   225 	nop		initial("100100111"b),	/* no-op */
  2   226 	assign_by_name	initial("100101000"b),	/* opnd(1) <- opnd(2),by name		*/
  2   227 
  2   228 /* These operators are produced by the semantic translator in processing the math
  2   229*   builtin functions and are used as input to the code generator			*/
  2   230 
  2   231 	sqrt_fun		initial("100110000"b),	/* opnd(1) <- sqrt(opnd(2))	*/
  2   232 	sin_fun		initial("100110001"b),	/* opnd(1) <- sin(opnd(2))	*/
  2   233 	sind_fun		initial("100110010"b),	/* opnd(1) <- sind(opnd(2))	*/
  2   234 	cos_fun		initial("100110011"b),	/* opnd(1) <- cos(opnd(2))	*/
  2   235 	cosd_fun		initial("100110100"b),	/* opnd(1) <- cosd(opnd(2))	*/
  2   236 	tan_fun		initial("100110101"b),	/* opnd(1) <- tan(opnd(2))	*/
  2   237 	tand_fun		initial("100110110"b),	/* opnd(1) <- tand(opnd(2))	*/
  2   238 	asin_fun		initial("100110111"b),	/* opnd(1) <- asin(opnd(2))	*/
  2   239 	asind_fun		initial("100111000"b),	/* opnd(1) <- asind(opnd(2))	*/
  2   240 	acos_fun		initial("100111001"b),	/* opnd(1) <- acos(opnd(2))	*/
  2   241 	acosd_fun		initial("100111010"b),	/* opnd(1) <- acosd(opnd(2))	*/
  2   242 	atan_fun		initial("100111011"b),	/* opnd(1) <- atan(opnd(2)[,opnd(3)])	*/
  2   243 	atand_fun		initial("100111100"b),	/* opnd(1) <- atand(opnd(2)[,opnd(3)])	*/
  2   244 	log2_fun		initial("100111101"b),	/* opnd(1) <- log2(opnd(2))	*/
  2   245 	log_fun		initial("100111110"b),	/* opnd(1) <- log(opnd(2))	*/
  2   246 	log10_fun		initial("100111111"b),	/* opnd(1) <- log10(opnd(2))	*/
  2   247 
  2   248 	exp_fun		initial("101000000"b))	/* opnd(1) <- exp(opnd(2))	*/
  2   249 
  2   250 			bit(9) aligned internal static options(constant);
  2   251 
  2   252 /* END INCLUDE FILE ... op_codes.incl.pl1 */
       72 
  3     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
  3     2 
  3     3 dcl	1 reference		based aligned,
  3     4 	2 node_type		bit(9) unaligned,
  3     5 	2 array_ref		bit(1) unaligned,
  3     6 	2 varying_ref		bit(1) unaligned,
  3     7 	2 shared			bit(1) unaligned,
  3     8 	2 put_data_sw		bit(1) unaligned,
  3     9 	2 processed		bit(1) unaligned,
  3    10 	2 units			fixed(3) unaligned,
  3    11 	2 ref_count		fixed(17) unaligned,
  3    12 	2 c_offset		fixed(24),
  3    13 	2 c_length		fixed(24),
  3    14 	2 symbol			ptr unaligned,
  3    15 	2 qualifier		ptr unaligned,
  3    16 	2 offset			ptr unaligned,
  3    17 	2 length			ptr unaligned,
  3    18 	2 subscript_list		ptr unaligned,
  3    19 						/* these fields are used by the 645 code generator */
  3    20 	2 address			structure unaligned,
  3    21 	  3 base			bit(3),
  3    22 	  3 offset		bit(15),
  3    23 	  3 op			bit(9),
  3    24 	  3 no_address		bit(1),
  3    25 	  3 inhibit		bit(1),
  3    26 	  3 ext_base		bit(1),
  3    27 	  3 tag			bit(6),
  3    28 	2 info			structure unaligned,
  3    29 	  3 address_in		structure,
  3    30 	    4 b			dimension(0:7) bit(1),
  3    31 	    4 storage		bit(1),
  3    32 	  3 value_in		structure,
  3    33 	    4 a			bit(1),
  3    34 	    4 q			bit(1),
  3    35 	    4 aq			bit(1),
  3    36 	    4 string_aq		bit(1),
  3    37 	    4 complex_aq		bit(1),
  3    38 	    4 decimal_aq		bit(1),
  3    39 	    4 b			dimension(0:7) bit(1),
  3    40 	    4 storage		bit(1),
  3    41 	    4 indicators		bit(1),
  3    42 	    4 x			dimension(0:7) bit(1),
  3    43 	  3 other			structure,
  3    44 	    4 big_offset		bit(1),
  3    45 	    4 big_length		bit(1),
  3    46 	    4 modword_in_offset	bit(1),
  3    47 	2 data_type		fixed(5) unaligned,
  3    48 	2 bits			structure unaligned,
  3    49 	  3 padded_ref		bit(1),
  3    50 	  3 aligned_ref		bit(1),
  3    51 	  3 long_ref		bit(1),
  3    52 	  3 forward_ref		bit(1),
  3    53 	  3 ic_ref		bit(1),
  3    54 	  3 temp_ref		bit(1),
  3    55 	  3 defined_ref		bit(1),
  3    56 	  3 evaluated		bit(1),
  3    57 	  3 allocate		bit(1),
  3    58 	  3 allocated		bit(1),
  3    59 	  3 aliasable		bit(1),
  3    60 	  3 even			bit(1),
  3    61 	  3 perm_address		bit(1),
  3    62 	  3 aggregate		bit(1),
  3    63 	  3 hit_zero		bit(1),
  3    64 	  3 dont_save		bit(1),
  3    65 	  3 fo_in_qual		bit(1),
  3    66 	  3 hard_to_load		bit(1),
  3    67 	2 relocation		bit(12) unaligned,
  3    68 	2 more_bits		structure unaligned,
  3    69 	  3 substr		bit(1),
  3    70 	  3 padded_for_store_ref	bit(1),
  3    71 	  3 aligned_for_store_ref	bit(1),
  3    72 	  3 mbz			bit(15),
  3    73 	2 store_ins		bit(18) unaligned;
  3    74 
  3    75 /* END INCLUDE FILE ... reference.incl.pl1 */
       73 
  4     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
  4     2 
  4     3 dcl	1 symbol			based aligned,
  4     4 	2 node_type		bit(9) unal,
  4     5 	2 source_id		structure unal,
  4     6 	  3 file_number		bit(8),
  4     7 	  3 line_number		bit(14),
  4     8 	  3 statement_number	bit(5),
  4     9 	2 location		fixed(18) unal unsigned,
  4    10 	2 allocated		bit(1) unal,
  4    11 	2 dcl_type		bit(3) unal,
  4    12 	2 reserved		bit(6) unal,
  4    13 	2 pix			unal,
  4    14 	  3 pic_fixed		bit(1) unal,
  4    15 	  3 pic_float		bit(1) unal,
  4    16 	  3 pic_char		bit(1) unal,
  4    17 	  3 pic_scale		fixed(7) unal,
  4    18 	  3 pic_size		fixed(7) unal,
  4    19 	2 level			fixed(8) unal,
  4    20 	2 boundary		fixed(3) unal,
  4    21 	2 size_units		fixed(3) unal,
  4    22 	2 scale			fixed(7) unal,
  4    23 	2 runtime			bit(18) unal,
  4    24 	2 runtime_offset		bit(18) unal,
  4    25 	2 block_node		ptr unal,
  4    26 	2 token			ptr unal,
  4    27 	2 next			ptr unal,
  4    28 	2 multi_use		ptr unal,
  4    29 	2 cross_references		ptr unal,
  4    30 	2 initial			ptr unal,
  4    31 	2 array			ptr unal,
  4    32 	2 descriptor		ptr unal,
  4    33 	2 equivalence		ptr unal,
  4    34 	2 reference		ptr unal,
  4    35 	2 general			ptr unal,
  4    36 	2 father			ptr unal,
  4    37 	2 brother			ptr unal,
  4    38 	2 son			ptr unal,
  4    39 	2 word_size		ptr unal,
  4    40 	2 bit_size		ptr unal,
  4    41 	2 dcl_size		ptr unal,
  4    42 	2 symtab_size		ptr unal,
  4    43 	2 c_word_size		fixed(24),
  4    44 	2 c_bit_size		fixed(24),
  4    45 	2 c_dcl_size		fixed(24),
  4    46 
  4    47 	2 attributes		structure aligned,
  4    48 	  3 data_type		structure unal,
  4    49 	    4 structure		bit(1) ,
  4    50 	    4 fixed		bit(1),
  4    51 	    4 float		bit(1),
  4    52 	    4 bit			bit(1),
  4    53 	    4 char		bit(1),
  4    54 	    4 ptr			bit(1),
  4    55 	    4 offset		bit(1),
  4    56 	    4 area		bit(1),
  4    57 	    4 label		bit(1),
  4    58 	    4 entry		bit(1),
  4    59 	    4 file		bit(1),
  4    60 	    4 arg_descriptor	bit(1),
  4    61 	    4 storage_block		bit(1),
  4    62 	    4 explicit_packed	bit(1), /* options(packed) */
  4    63 	    4 condition		bit(1),
  4    64 	    4 format		bit(1),
  4    65 	    4 builtin		bit(1),
  4    66 	    4 generic		bit(1),
  4    67 	    4 picture		bit(1),
  4    68 
  4    69 	  3 misc_attributes		structure unal,
  4    70 	    4 dimensioned		bit(1),
  4    71 	    4 initialed		bit(1),
  4    72 	    4 aligned		bit(1),
  4    73 	    4 unaligned		bit(1),
  4    74 	    4 signed		bit(1),
  4    75 	    4 unsigned		bit(1),
  4    76 	    4 precision		bit(1),
  4    77 	    4 varying		bit(1),
  4    78 	    4 local		bit(1),
  4    79 	    4 decimal		bit(1),
  4    80 	    4 binary		bit(1),
  4    81 	    4 real		bit(1),
  4    82 	    4 complex		bit(1),
  4    83 	    4 variable		bit(1),
  4    84 	    4 reducible		bit(1),
  4    85 	    4 irreducible		bit(1),
  4    86 	    4 returns		bit(1),
  4    87 	    4 position		bit(1),
  4    88 	    4 internal		bit(1),
  4    89 	    4 external		bit(1),
  4    90 	    4 like		bit(1),
  4    91 	    4 member		bit(1),
  4    92 	    4 non_varying		bit(1),
  4    93 	    4 options		bit(1),
  4    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
  4    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
  4    96 
  4    97 	  3 storage_class		structure unal,
  4    98 	    4 auto		bit(1),
  4    99 	    4 based		bit(1),
  4   100 	    4 static		bit(1),
  4   101 	    4 controlled		bit(1),
  4   102 	    4 defined		bit(1),
  4   103 	    4 parameter		bit(1),
  4   104 	    4 param_desc		bit(1),
  4   105 	    4 constant		bit(1),
  4   106 	    4 temporary		bit(1),
  4   107 	    4 return_value		bit(1),
  4   108 
  4   109 	  3 file_attributes		structure unal,
  4   110 	    4 print		bit(1),
  4   111 	    4 input		bit(1),
  4   112 	    4 output		bit(1),
  4   113 	    4 update		bit(1),
  4   114 	    4 stream		bit(1),
  4   115 	    4 reserved_1		bit(1),
  4   116 	    4 record		bit(1),
  4   117 	    4 sequential		bit(1),
  4   118 	    4 direct		bit(1),
  4   119 	    4 interactive		bit(1),		/* env(interactive) */
  4   120 	    4 reserved_2		bit(1),
  4   121 	    4 reserved_3		bit(1),
  4   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
  4   123 	    4 keyed		bit(1),
  4   124 	    4 reserved_4		bit(1),
  4   125 	    4 environment		bit(1),
  4   126 
  4   127 	  3 compiler_developed	structure unal,
  4   128 	    4 aliasable		bit(1),
  4   129 	    4 packed		bit(1),
  4   130 	    4 passed_as_arg		bit(1),
  4   131 	    4 allocate		bit(1),
  4   132 	    4 set			bit(1),
  4   133 	    4 exp_extents		bit(1),
  4   134 	    4 refer_extents		bit(1),
  4   135 	    4 star_extents		bit(1),
  4   136 	    4 isub		bit(1),
  4   137 	    4 put_in_symtab		bit(1),
  4   138 	    4 contiguous		bit(1),
  4   139 	    4 put_data		bit(1),
  4   140 	    4 overlayed		bit(1),
  4   141 	    4 error		bit(1),
  4   142 	    4 symtab_processed	bit(1),
  4   143 	    4 overlayed_by_builtin	bit(1),
  4   144 	    4 defaulted		bit(1),
  4   145 	    4 connected		bit(1);
  4   146 
  4   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
       74 
  5     1 dcl (	real_fix_bin_1		init(1),
  5     2 	real_fix_bin_2		init(2),
  5     3 	real_flt_bin_1		init(3),
  5     4 	real_flt_bin_2		init(4),
  5     5 	complex_fix_bin_1		init(5),
  5     6 	complex_fix_bin_2		init(6),
  5     7 	complex_flt_bin_1		init(7),
  5     8 	complex_flt_bin_2		init(8),
  5     9 	real_fix_dec		init(9),
  5    10 	real_flt_dec		init(10),
  5    11 	complex_fix_dec		init(11),
  5    12 	complex_flt_dec		init(12),
  5    13 	char_string		init(13),
  5    14 	bit_string		init(14),
  5    15 	label_constant		init(15),
  5    16 	local_label_variable	init(16),
  5    17 	label_variable		init(17),
  5    18 	entry_variable		init(18),
  5    19 	ext_entry_in		init(19),
  5    20 	ext_entry_out		init(20),
  5    21 	int_entry			init(21),
  5    22 	int_entry_other		init(22),
  5    23 	unpacked_ptr		init(23),
  5    24 	packed_ptr		init(24)) fixed bin(15) int static options(constant);
       75 
  6     1 /* BEGIN INCLUDE FILE ... boundary.incl.pl1 */
  6     2 
  6     3 /* Modified: 26 Apr 1979 by PCK to implement 4-bit decimal */
  6     4 
  6     5 dcl (	bit_		init(1),
  6     6 	digit_		init(2),
  6     7 	character_	init(3),
  6     8 	half_		init(4),
  6     9 	word_		init(5),
  6    10 	mod2_		init(6),
  6    11 	mod4_		init(7)) fixed bin(3) int static options(constant);
  6    12 
  6    13 /* END INCLUDE FILE ... boundary.incl.pl1 */
       76 
  7     1 /* BEGIN INCLUDE FILE ... cgsystem.incl.pl1 */
  7     2 
  7     3 /* Modified: 25 Apr 1979 by PCK to implement 4-bit decimal */
  7     4 
  7     5 dcl (	bits_per_char		init(9),
  7     6 	bits_per_half		init(18),
  7     7 	bits_per_word		init(36),
  7     8 	bits_per_two_words		init(72),
  7     9 	bits_per_four_words		init(144),
  7    10 	bits_per_words(2)		init(36,72),
  7    11 	packed_digits_per_char	init(2),
  7    12 	chars_per_word		init(4),
  7    13 	packed_digits_per_word	init(8),
  7    14 
  7    15 	break_even_bits		init(216),
  7    16 	break_even_words		init(6),
  7    17 
  7    18 	label_size		init(4),
  7    19 
  7    20 	convert_size(13:14)		init(9,1),
  7    21 	max_offset(13:14)		init(27,35),
  7    22 	max_short_size(13:14)	init(8,72),
  7    23 
  7    24 	units_per_word(0:5)		init(1,36,8,4,2,1),
  7    25 
  7    26 	max_dec_scale		init(32),
  7    27 	min_dec_scale		init(-31),
  7    28 	max_p_xreg		init(18),
  7    29 	max_p_fix_bin_1		init(35),
  7    30 	max_p_flt_bin_1		init(27),
  7    31 	max_p_fix_dec		init(59),
  7    32 	max_length_p		init(24),
  7    33 	default_fix_bin_p		init(17)) fixed bin(8) int static options(constant);
  7    34 
  7    35 dcl      (convert_offset(0:5)		init(36,1,4.5,9,18,36),
  7    36 	bits_per_packed_digit	init(4.5)) fixed bin(8,1) int static options(constant);
  7    37 
  7    38 dcl	max_index_register_value	init(262143) fixed bin(31) int static options(constant);
  7    39 
  7    40 /* END INCLUDE FILE ... cgsystem.incl.pl1 */
  7    41 
       77 
       78 
       79 	op = pt;
       80 	p (3) = pt3;
       81 	p (2) = pt2;
       82 
       83 	p1 = op -> operand (1);
       84 	type = p1 -> reference.data_type;
       85 	dt = type - char_string;
       86 	icat = fixed (op -> operator.op_code = cat_string, 1);
       87 	dont_move = p (3) = null;
       88 
       89 /* If for_test_called, we don't need a temporary */
       90 
       91 	if cg_stat$for_test_called
       92 	then do;
       93 		cg_stat$eis_temp = p (2);
       94 		if ^p (2) -> reference.shared
       95 		then p (2) -> reference.ref_count = p (2) -> reference.ref_count + 1;
       96 		return (p1);
       97 	     end;
       98 
       99 /* If operand(1) is a nontemporary, we must either create a temporary to work in,
      100*   or use operand(1) as the output if it does not appear as an input operand
      101*   in such a way as to destroy its value before it is used. */
      102 
      103 	q = p1;
      104 
      105 	if ^p1 -> reference.temp_ref
      106 	then if need_temp ()
      107 	     then do;
      108 		     q = get_reference ();
      109 		     q -> reference.data_type = p1 -> reference.data_type;
      110 		     q -> reference.units = word_;
      111 		     q -> reference.aligned_ref, q -> reference.aligned_for_store_ref, q -> reference.temp_ref = "1"b;
      112 		     q -> reference.long_ref = p1 -> reference.long_ref;
      113 		     q -> reference.c_length = p1 -> reference.c_length;
      114 		     if p1 -> reference.length ^= null
      115 		     then q -> reference.length = share_expression ((p1 -> reference.length));
      116 		end;
      117 	     else if q -> reference.length ^= null
      118 	     then go to set_eis;
      119 
      120 /* If the temporary is short, make sure it is unshared and has its allocate bit
      121*   on so that storage may be associated with it */
      122 
      123 	if ^q -> reference.long_ref
      124 	then if ^q -> reference.allocate
      125 	     then do;
      126 		     q = copy_temp (q);
      127 		     if p1 -> reference.temp_ref
      128 		     then op -> operand (1) = q;
      129 		end;
      130 
      131 /* If the temporary has a constant length and is used more than once (or has allocate bit
      132*   on), then we will now give it a spot in the stack rather than making a stack
      133*   extension for it */
      134 
      135 	if q -> reference.length = null
      136 	then if q -> reference.allocate
      137 	     then do;
      138 		     if ^q -> reference.allocated
      139 		     then if q -> reference.temp_ref
      140 			then call stack_temp$assign_temp (q);
      141 		     if ^q -> reference.long_ref
      142 		     then if dt >= 0
      143 			then do;
      144 
      145 /* if operand(1) is an aligned ref, but its size does not fill out
      146*                                 the word(s), zero out (last) word                                */
      147 
      148 				q -> reference.value_in.storage = "1"b;
      149 				size = q -> reference.c_length * convert_size (type);
      150 				if mod (size, bits_per_word) ^= 0 & q -> reference.aligned_for_store_ref
      151 				then do;
      152 					q -> reference.ref_count = q -> reference.ref_count + 1;
      153 					call expmac ((zero_mac (fixed (size > bits_per_word, 1))), q);
      154 				     end;
      155 			     end;
      156 		     go to set_eis;
      157 		end;
      158 
      159 /* Aggregate temporaries have already been allocated, so it is wrong to
      160*   allocate them again. */
      161 
      162 	if q -> reference.aggregate
      163 	then go to set_eis;
      164 
      165 /* If we get here, we want to use a stack extension for the temporary, but we can still
      166*   check to see if we can reuse a previously made extension or if we can extend it.
      167*   This can be done if the relationship between the operand lengths is known
      168*   at compile time. */
      169 
      170 	if icat > 0
      171 	then if p (2) -> reference.value_in.string_aq
      172 	     then go to re_alloc;
      173 	     else ;
      174 	else if p (2) -> reference.value_in.string_aq
      175 	then if q -> reference.length ^= null
      176 	     then if dont_move
      177 		then go to reuse;
      178 		else if ^p (3) -> reference.varying_ref
      179 			& (^p (3) -> reference.long_ref
      180 			| (p (2) -> reference.length = p (3) -> reference.length & ^p (2) -> reference.varying_ref))
      181 		then go to reuse;
      182 		else ;
      183 
      184 	     else do;
      185 		     if q -> reference.c_length > p (2) -> reference.c_length
      186 		     then do;
      187 re_alloc:
      188 			     call long_op$extend_stack (q, realloc_char_temp (icat) + dt);
      189 			end;
      190 
      191 		     else do;
      192 reuse:
      193 			     call state_man$update_ref (q);
      194 			     if ^dont_move & p (2) -> reference.address_in.b (1)
      195 			     then call base_man$update_base (2, q, 1);
      196 			end;
      197 
      198 		     if ^dont_move
      199 		     then if ^p (2) -> reference.shared
      200 			then call adjust_ref_count (p (2), -1);
      201 		     cg_stat$eis_temp = q;
      202 		     return (q);
      203 		end;
      204 	else ;
      205 
      206 /* We must get a new stack extension */
      207 
      208 	call long_op$extend_stack (q, alloc_char_temp + dt);
      209 
      210 /* Update cg_stat$eis_temp and move in source operand */
      211 
      212 set_eis:
      213 	cg_stat$eis_temp = q;
      214 
      215 	if ^dont_move
      216 	then do;
      217 		if op -> operator.op_code = and_bits
      218 		then k = min (p (2) -> reference.c_length, p (3) -> reference.c_length);
      219 		else k = 0;
      220 		call long_op$eis (p (2), k, move_chars (icat) + dt);
      221 	     end;
      222 
      223 	return (q);
      224 
      225 
      226 need_temp:
      227      proc returns (bit (1) aligned);
      228 
      229 /* need_temp is called when operand(1) is not a temporary to determine if
      230*   string_temp should replace operand(1) with a temporary in order to compile
      231*   the expression.  need_temp tries to determine whether the generations of
      232*   storage of operand(1) and the other operands overlap. */
      233 
      234 dcl	alias		bit (1) aligned;
      235 dcl	(i, n)		fixed bin;
      236 dcl	(may_overlap, overlap_must_be_same_generation)
      237 			bit (1) aligned;
      238 
      239 	if q -> reference.defined_ref
      240 	then return ("1"b);
      241 
      242 	alias = q -> reference.aliasable;
      243 	if dont_move
      244 	then n = 2;
      245 	else n = 3;
      246 
      247 	do i = 2 to n;
      248 	     call check_overlap (q, (p (i)), may_overlap, overlap_must_be_same_generation);
      249 
      250 	     if may_overlap
      251 	     then if ^overlap_must_be_same_generation | icat > 0 | i > 2
      252 		then return ("1"b);
      253 	end;
      254 
      255 	if ^dont_move
      256 	then if ^q -> reference.shared
      257 	     then q -> reference.ref_count = q -> reference.ref_count + 1;
      258 	return ("0"b);
      259 
      260 
      261 check_overlap:
      262      proc (out, in, may_overlap, overlap_must_be_same_generation);
      263 
      264 /* check_overlap determines if two operands may overlap, and, if they may, if
      265*   the operands describe the same generation if they actually do
      266*   overlap. */
      267 
      268 dcl	out		ptr,			/* -> target reference node */
      269 	in		ptr,			/* -> input reference node */
      270 	may_overlap	bit (1) aligned,		/* ON if references may have overlapping storage (output) */
      271 	overlap_must_be_same_generation
      272 			bit (1) aligned;		/* ON -- if references overlap at all, they must
      273*				   describe the same generation of storage (output) */
      274 
      275 	may_overlap, overlap_must_be_same_generation = "0"b;
      276 
      277 	if out -> reference.symbol = in -> reference.symbol
      278 	then may_overlap = "1"b;
      279 	else if alias
      280 	then if in -> reference.aliasable
      281 	     then if out -> reference.symbol -> symbol.aligned = in -> reference.symbol -> symbol.aligned
      282 		then if out -> reference.symbol -> symbol.varying = in -> reference.symbol -> symbol.varying
      283 		     then may_overlap = "1"b;
      284 
      285 	if may_overlap
      286 	then if ^in -> reference.substr & ^out -> reference.substr
      287 		& (out -> reference.symbol -> symbol.aligned | out -> reference.symbol -> symbol.varying)
      288 	     then overlap_must_be_same_generation = "1"b;
      289 
      290      end /* check_overlap */;
      291 
      292 
      293      end /* need_temp */;
      294 
      295      end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/03/83  1009.4  string_temp.pl1                   >spec>on>pl128d>string_temp.pl1
71           1    07/21/80  1546.3  operator.incl.pl1                 >ldd>include>operator.incl.pl1
72           2    04/07/83  1635.0  op_codes.incl.pl1                 >ldd>include>op_codes.incl.pl1
73           3    07/21/80  1546.3  reference.incl.pl1                >ldd>include>reference.incl.pl1
74           4    10/02/83  0828.4  symbol.incl.pl1                   >spec>on>pl128d>symbol.incl.pl1
75           5    05/03/76  1320.4  data_types.incl.pl1               >ldd>include>data_types.incl.pl1
76           6    10/25/79  1645.8  boundary.incl.pl1                 >ldd>include>boundary.incl.pl1
77           7    10/25/79  1645.8  cgsystem.incl.pl1                 >ldd>include>cgsystem.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
address_in               11            based           structure                level 3 packed unaligned dcl 3-3
adjust_ref_count                000014 constant        entry                    external dcl 53 ref 198
aggregate                12(19)        based           bit(1)                   level 3 packed unaligned dcl 3-3 ref 162
alias                           000126 automatic       bit(1)                   dcl 234 set ref 242* 279
aliasable                12(16)        based           bit(1)                   level 3 packed unaligned dcl 3-3 ref 242 279
aligned                  31(21)        based           bit(1)                   level 4 packed unaligned dcl 4-3 ref 279 279 285
aligned_for_store_ref
                         13(02)        based           bit(1)                   level 3 packed unaligned dcl 3-3 set ref 111* 150
aligned_ref              12(07)        based           bit(1)                   level 3 packed unaligned dcl 3-3 set ref 111*
alloc_char_temp                        constant        fixed bin(15,0)          initial dcl 46 ref 208
allocate                 12(14)        based           bit(1)                   level 3 packed unaligned dcl 3-3 ref 123 135
allocated                12(15)        based           bit(1)                   level 3 packed unaligned dcl 3-3 ref 138
and_bits                               constant        bit(9)                   initial dcl 2-8 ref 217
attributes               31            based           structure                level 2 dcl 4-3
b                        11            based           bit(1)                   array level 4 packed unaligned dcl 3-3 ref 194
base_man$update_base            000036 constant        entry                    external dcl 65 ref 194
bits                     12(06)        based           structure                level 2 packed unaligned dcl 3-3
bits_per_word                   000754 constant        fixed bin(8,0)           initial dcl 7-5 ref 150 153
c_length                  2            based           fixed bin(24,0)          level 2 dcl 3-3 set ref 113* 113 149 185 185 217 217
cat_string                             constant        bit(9)                   initial dcl 2-8 ref 86
cg_stat$eis_temp                000010 external static pointer                  dcl 42 set ref 93* 201* 212*
cg_stat$for_test_called         000012 external static bit(1)                   dcl 43 ref 91
char_string                            constant        fixed bin(15,0)          initial dcl 5-1 ref 85
convert_size                    000000 constant        fixed bin(8,0)           initial array dcl 7-5 ref 149
copy_temp                       000016 constant        entry                    external dcl 54 ref 126
data_type                12            based           fixed bin(5,0)           level 2 packed unaligned dcl 3-3 set ref 84 109* 109
defined_ref              12(12)        based           bit(1)                   level 3 packed unaligned dcl 3-3 ref 239
dont_move                       000117 automatic       bit(1)                   dcl 40 set ref 87* 174 194 198 215 243 255
dt                              000112 automatic       fixed bin(17,0)          dcl 38 set ref 85* 141 187 208 220
expmac                          000022 constant        entry                    external dcl 56 ref 153
fixed                                                  builtin function         dcl 68 ref 86 153
get_reference                   000024 constant        entry                    external dcl 57 ref 108
i                               000127 automatic       fixed bin(17,0)          dcl 235 set ref 247* 248 250*
icat                            000113 automatic       fixed bin(17,0)          dcl 38 set ref 86* 170 187 220 250
in                                     parameter       pointer                  dcl 268 ref 261 277 279 279 279 285
info                     11            based           structure                level 2 packed unaligned dcl 3-3
k                               000114 automatic       fixed bin(17,0)          dcl 38 set ref 217* 219* 220*
length                    6            based           pointer                  level 2 packed unaligned dcl 3-3 set ref 114 114*
                                                                                  114 117 135 174 178 178
long_op$eis                     000020 constant        entry                    external dcl 55 ref 220
long_op$extend_stack            000026 constant        entry                    external dcl 58 ref 187 208
long_ref                 12(08)        based           bit(1)                   level 3 packed unaligned dcl 3-3 set ref 112* 112
                                                                                  123 141 178
may_overlap                     000131 automatic       bit(1)                   dcl 236 in procedure "need_temp" set ref 248* 250
may_overlap                            parameter       bit(1)                   dcl 268 in procedure "check_overlap" set ref 261
                                                                                  275* 277* 279* 285
min                                                    builtin function         dcl 68 ref 217
misc_attributes          31(19)        based           structure                level 3 packed unaligned dcl 4-3
mod                                                    builtin function         dcl 68 ref 150
more_bits                13            based           structure                level 2 packed unaligned dcl 3-3
move_chars                      000002 constant        fixed bin(15,0)          initial array dcl 46 ref 220
n                               000130 automatic       fixed bin(17,0)          dcl 235 set ref 243* 245* 247
null                                                   builtin function         dcl 68 ref 87 114 117 135 174
op                              000100 automatic       pointer                  dcl 32 set ref 79* 83 86 127 217
op_code                   0(09)        based           bit(9)                   level 2 packed unaligned dcl 1-6 ref 86 217
operand                   1            based           pointer                  array level 2 packed unaligned dcl 1-6 set ref 83
                                                                                  127*
operator                               based           structure                level 1 dcl 1-6
out                                    parameter       pointer                  dcl 268 ref 261 277 279 279 285 285 285
overlap_must_be_same_generation 000132 automatic       bit(1)                   dcl 236 in procedure "need_temp" set ref 248* 250
overlap_must_be_same_generation        parameter       bit(1)                   dcl 268 in procedure "check_overlap" set ref 261
                                                                                  275* 285*
p                               000104 automatic       pointer                  array dcl 32 set ref 80* 81* 87 93 94 94 94 170 174
                                                                                  178 178 178 178 178 185 194 198 198* 217 217 220*
                                                                                  248
p1                              000102 automatic       pointer                  dcl 32 set ref 83* 84 96 103 105 109 112 113 114 114
                                                                                  127
pt                                     parameter       pointer                  dcl 27 ref 12 79
pt2                                    parameter       pointer                  dcl 27 ref 12 81
pt3                                    parameter       pointer                  dcl 27 ref 12 80
q                               000110 automatic       pointer                  dcl 32 set ref 103* 108* 109 110 111 111 111 112 113
                                                                                  114 117 123 123 126* 126* 127 135 135 138 138 138*
                                                                                  141 148 149 150 152 152 153* 162 174 185 187* 192*
                                                                                  194* 201 202 208* 212 223 239 242 248* 255 255 255
realloc_char_temp               000006 constant        fixed bin(15,0)          initial array dcl 46 ref 187
ref_count                 0(18)        based           fixed bin(17,0)          level 2 packed unaligned dcl 3-3 set ref 94* 94 152*
                                                                                  152 255* 255
reference                              based           structure                level 1 dcl 3-3
share_expression                000030 constant        entry                    external dcl 60 ref 114
shared                    0(11)        based           bit(1)                   level 2 packed unaligned dcl 3-3 ref 94 198 255
size                            000115 automatic       fixed bin(17,0)          dcl 38 set ref 149* 150 153
stack_temp$assign_temp          000032 constant        entry                    external dcl 61 ref 138
state_man$update_ref            000034 constant        entry                    external dcl 63 ref 192
storage                  11(23)        based           bit(1)                   level 4 packed unaligned dcl 3-3 set ref 148*
string_aq                11(12)        based           bit(1)                   level 4 packed unaligned dcl 3-3 ref 170 174
substr                   13            based           bit(1)                   level 3 packed unaligned dcl 3-3 ref 285 285
symbol                                 based           structure                level 1 dcl 4-3 in procedure "string_temp"
symbol                    3            based           pointer                  level 2 in structure "reference" packed unaligned
                                                                                  dcl 3-3 in procedure "string_temp" ref 277 277 279
                                                                                  279 279 279 285 285
temp_ref                 12(11)        based           bit(1)                   level 3 packed unaligned dcl 3-3 set ref 105 111*
                                                                                  127 138
type                            000116 automatic       fixed bin(17,0)          dcl 38 set ref 84* 85 149
units                     0(14)        based           fixed bin(3,0)           level 2 packed unaligned dcl 3-3 set ref 110*
value_in                 11(09)        based           structure                level 3 packed unaligned dcl 3-3
varying                  31(26)        based           bit(1)                   level 4 packed unaligned dcl 4-3 ref 279 279 285
varying_ref               0(10)        based           bit(1)                   level 2 packed unaligned dcl 3-3 ref 178 178
word_                                  constant        fixed bin(3,0)           initial dcl 6-5 ref 110
zero_mac                        000004 constant        fixed bin(15,0)          initial array dcl 46 ref 153

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
a_format                               internal static bit(9)                   initial dcl 2-8
abs_fun                                internal static bit(9)                   initial dcl 2-8
acos_fun                               internal static bit(9)                   initial dcl 2-8
acosd_fun                              internal static bit(9)                   initial dcl 2-8
add                                    internal static bit(9)                   initial dcl 2-8
addbitno_fun                           internal static bit(9)                   initial dcl 2-8
addcharno_fun                          internal static bit(9)                   initial dcl 2-8
addr_fun                               internal static bit(9)                   initial dcl 2-8
addr_fun_bits                          internal static bit(9)                   initial dcl 2-8
addrel_fun                             internal static bit(9)                   initial dcl 2-8
allocation_fun                         internal static bit(9)                   initial dcl 2-8
allot_auto                             internal static bit(9)                   initial dcl 2-8
allot_based                            internal static bit(9)                   initial dcl 2-8
allot_ctl                              internal static bit(9)                   initial dcl 2-8
allot_var                              internal static bit(9)                   initial dcl 2-8
asin_fun                               internal static bit(9)                   initial dcl 2-8
asind_fun                              internal static bit(9)                   initial dcl 2-8
assign                                 internal static bit(9)                   initial dcl 2-8
assign_by_name                         internal static bit(9)                   initial dcl 2-8
assign_round                           internal static bit(9)                   initial dcl 2-8
assign_size_ck                         internal static bit(9)                   initial dcl 2-8
assign_zero                            internal static bit(9)                   initial dcl 2-8
atan_fun                               internal static bit(9)                   initial dcl 2-8
atand_fun                              internal static bit(9)                   initial dcl 2-8
b_format                               internal static bit(9)                   initial dcl 2-8
baseno_fun                             internal static bit(9)                   initial dcl 2-8
baseptr_fun                            internal static bit(9)                   initial dcl 2-8
bit_                                   internal static fixed bin(3,0)           initial dcl 6-5
bit_pointer                            internal static bit(9)                   initial dcl 2-8
bit_string                             internal static fixed bin(15,0)          initial dcl 5-1
bit_to_char                            internal static bit(9)                   initial dcl 2-8
bit_to_word                            internal static bit(9)                   initial dcl 2-8
bitno_fun                              internal static bit(9)                   initial dcl 2-8
bits_per_char                          internal static fixed bin(8,0)           initial dcl 7-5
bits_per_four_words                    internal static fixed bin(8,0)           initial dcl 7-5
bits_per_half                          internal static fixed bin(8,0)           initial dcl 7-5
bits_per_packed_digit                  internal static fixed bin(8,1)           initial dcl 7-35
bits_per_two_words                     internal static fixed bin(8,0)           initial dcl 7-5
bits_per_words                         internal static fixed bin(8,0)           initial array dcl 7-5
bn_format                              internal static bit(9)                   initial dcl 2-8
bool_fun                               internal static bit(9)                   initial dcl 2-8
bound_ck                               internal static bit(9)                   initial dcl 2-8
break_even_bits                        internal static fixed bin(8,0)           initial dcl 7-5
break_even_words                       internal static fixed bin(8,0)           initial dcl 7-5
byte_fun                               internal static bit(9)                   initial dcl 2-8
c_format                               internal static bit(9)                   initial dcl 2-8
ceil_fun                               internal static bit(9)                   initial dcl 2-8
char_to_word                           internal static bit(9)                   initial dcl 2-8
character_                             internal static fixed bin(3,0)           initial dcl 6-5
charno_fun                             internal static bit(9)                   initial dcl 2-8
chars_per_word                         internal static fixed bin(8,0)           initial dcl 7-5
clock_fun                              internal static bit(9)                   initial dcl 2-8
close_file                             internal static bit(9)                   initial dcl 2-8
codeptr_fun                            internal static bit(9)                   initial dcl 2-8
column_format                          internal static bit(9)                   initial dcl 2-8
complex_fix_bin_1                      internal static fixed bin(15,0)          initial dcl 5-1
complex_fix_bin_2                      internal static fixed bin(15,0)          initial dcl 5-1
complex_fix_dec                        internal static fixed bin(15,0)          initial dcl 5-1
complex_flt_bin_1                      internal static fixed bin(15,0)          initial dcl 5-1
complex_flt_bin_2                      internal static fixed bin(15,0)          initial dcl 5-1
complex_flt_dec                        internal static fixed bin(15,0)          initial dcl 5-1
complex_fun                            internal static bit(9)                   initial dcl 2-8
conjg_fun                              internal static bit(9)                   initial dcl 2-8
convert_offset                         internal static fixed bin(8,1)           initial array dcl 7-35
copy_string                            internal static bit(9)                   initial dcl 2-8
copy_words                             internal static bit(9)                   initial dcl 2-8
cos_fun                                internal static bit(9)                   initial dcl 2-8
cosd_fun                               internal static bit(9)                   initial dcl 2-8
default_fix_bin_p                      internal static fixed bin(8,0)           initial dcl 7-5
delete_file                            internal static bit(9)                   initial dcl 2-8
desc_size                              internal static bit(9)                   initial dcl 2-8
digit_                                 internal static fixed bin(3,0)           initial dcl 6-5
digit_to_bit                           internal static bit(9)                   initial dcl 2-8
div                                    internal static bit(9)                   initial dcl 2-8
do_fun                                 internal static bit(9)                   initial dcl 2-8
do_spec                                internal static bit(9)                   initial dcl 2-8
e_format                               internal static bit(9)                   initial dcl 2-8
empty_area                             internal static bit(9)                   initial dcl 2-8
enable_on                              internal static bit(9)                   initial dcl 2-8
entry_variable                         internal static fixed bin(15,0)          initial dcl 5-1
environmentptr_fun                     internal static bit(9)                   initial dcl 2-8
equal                                  internal static bit(9)                   initial dcl 2-8
ex_prologue                            internal static bit(9)                   initial dcl 2-8
exp                                    internal static bit(9)                   initial dcl 2-8
exp_fun                                internal static bit(9)                   initial dcl 2-8
ext_entry_in                           internal static fixed bin(15,0)          initial dcl 5-1
ext_entry_out                          internal static fixed bin(15,0)          initial dcl 5-1
f_format                               internal static bit(9)                   initial dcl 2-8
floor_fun                              internal static bit(9)                   initial dcl 2-8
fortran_read                           internal static bit(9)                   initial dcl 2-8
fortran_write                          internal static bit(9)                   initial dcl 2-8
free_based                             internal static bit(9)                   initial dcl 2-8
free_ctl                               internal static bit(9)                   initial dcl 2-8
free_var                               internal static bit(9)                   initial dcl 2-8
ftn_file_manip                         internal static bit(9)                   initial dcl 2-8
ftn_trans_loop                         internal static bit(9)                   initial dcl 2-8
get_data_trans                         internal static bit(9)                   initial dcl 2-8
get_edit_trans                         internal static bit(9)                   initial dcl 2-8
get_file                               internal static bit(9)                   initial dcl 2-8
get_list_trans                         internal static bit(9)                   initial dcl 2-8
get_string                             internal static bit(9)                   initial dcl 2-8
greater_or_equal                       internal static bit(9)                   initial dcl 2-8
greater_than                           internal static bit(9)                   initial dcl 2-8
half_                                  internal static fixed bin(3,0)           initial dcl 6-5
half_to_word                           internal static bit(9)                   initial dcl 2-8
imag_fun                               internal static bit(9)                   initial dcl 2-8
index_after_fun                        internal static bit(9)                   initial dcl 2-8
index_before_fun                       internal static bit(9)                   initial dcl 2-8
index_fun                              internal static bit(9)                   initial dcl 2-8
index_rev_fun                          internal static bit(9)                   initial dcl 2-8
int_entry                              internal static fixed bin(15,0)          initial dcl 5-1
int_entry_other                        internal static fixed bin(15,0)          initial dcl 5-1
join                                   internal static bit(9)                   initial dcl 2-8
jump                                   internal static bit(9)                   initial dcl 2-8
jump_false                             internal static bit(9)                   initial dcl 2-8
jump_if_eq                             internal static bit(9)                   initial dcl 2-8
jump_if_ge                             internal static bit(9)                   initial dcl 2-8
jump_if_gt                             internal static bit(9)                   initial dcl 2-8
jump_if_le                             internal static bit(9)                   initial dcl 2-8
jump_if_lt                             internal static bit(9)                   initial dcl 2-8
jump_if_ne                             internal static bit(9)                   initial dcl 2-8
jump_true                              internal static bit(9)                   initial dcl 2-8
l_parn                                 internal static bit(9)                   initial dcl 2-8
label_constant                         internal static fixed bin(15,0)          initial dcl 5-1
label_size                             internal static fixed bin(8,0)           initial dcl 7-5
label_variable                         internal static fixed bin(15,0)          initial dcl 5-1
length_fun                             internal static bit(9)                   initial dcl 2-8
less_or_equal                          internal static bit(9)                   initial dcl 2-8
less_than                              internal static bit(9)                   initial dcl 2-8
line_format                            internal static bit(9)                   initial dcl 2-8
local_label_variable                   internal static fixed bin(15,0)          initial dcl 5-1
locate_file                            internal static bit(9)                   initial dcl 2-8
lock_file                              internal static bit(9)                   initial dcl 2-8
lock_fun                               internal static bit(9)                   initial dcl 2-8
log10_fun                              internal static bit(9)                   initial dcl 2-8
log2_fun                               internal static bit(9)                   initial dcl 2-8
log_fun                                internal static bit(9)                   initial dcl 2-8
loop                                   internal static bit(9)                   initial dcl 2-8
make_desc                              internal static bit(9)                   initial dcl 2-8
max_dec_scale                          internal static fixed bin(8,0)           initial dcl 7-5
max_fun                                internal static bit(9)                   initial dcl 2-8
max_index_register_value               internal static fixed bin(31,0)          initial dcl 7-38
max_length_p                           internal static fixed bin(8,0)           initial dcl 7-5
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 1-15
max_offset                             internal static fixed bin(8,0)           initial array dcl 7-5
max_p_fix_bin_1                        internal static fixed bin(8,0)           initial dcl 7-5
max_p_fix_dec                          internal static fixed bin(8,0)           initial dcl 7-5
max_p_flt_bin_1                        internal static fixed bin(8,0)           initial dcl 7-5
max_p_xreg                             internal static fixed bin(8,0)           initial dcl 7-5
max_short_size                         internal static fixed bin(8,0)           initial array dcl 7-5
min_dec_scale                          internal static fixed bin(8,0)           initial dcl 7-5
min_fun                                internal static bit(9)                   initial dcl 2-8
mod2_                                  internal static fixed bin(3,0)           initial dcl 6-5
mod4_                                  internal static fixed bin(3,0)           initial dcl 6-5
mod_bit                                internal static bit(9)                   initial dcl 2-8
mod_byte                               internal static bit(9)                   initial dcl 2-8
mod_fun                                internal static bit(9)                   initial dcl 2-8
mod_half                               internal static bit(9)                   initial dcl 2-8
mod_word                               internal static bit(9)                   initial dcl 2-8
mult                                   internal static bit(9)                   initial dcl 2-8
negate                                 internal static bit(9)                   initial dcl 2-8
nop                                    internal static bit(9)                   initial dcl 2-8
not_bits                               internal static bit(9)                   initial dcl 2-8
not_equal                              internal static bit(9)                   initial dcl 2-8
off_fun                                internal static bit(9)                   initial dcl 2-8
open_file                              internal static bit(9)                   initial dcl 2-8
or_bits                                internal static bit(9)                   initial dcl 2-8
pack                                   internal static bit(9)                   initial dcl 2-8
packed_digits_per_char                 internal static fixed bin(8,0)           initial dcl 7-5
packed_digits_per_word                 internal static fixed bin(8,0)           initial dcl 7-5
packed_ptr                             internal static fixed bin(15,0)          initial dcl 5-1
page_format                            internal static bit(9)                   initial dcl 2-8
param_desc_ptr                         internal static bit(9)                   initial dcl 2-8
param_ptr                              internal static bit(9)                   initial dcl 2-8
picture_format                         internal static bit(9)                   initial dcl 2-8
pl1_mod_fun                            internal static bit(9)                   initial dcl 2-8
prefix_plus                            internal static bit(9)                   initial dcl 2-8
ptr_fun                                internal static bit(9)                   initial dcl 2-8
put_control                            internal static bit(9)                   initial dcl 2-8
put_data_trans                         internal static bit(9)                   initial dcl 2-8
put_edit_trans                         internal static bit(9)                   initial dcl 2-8
put_field                              internal static bit(9)                   initial dcl 2-8
put_field_chk                          internal static bit(9)                   initial dcl 2-8
put_file                               internal static bit(9)                   initial dcl 2-8
put_list_trans                         internal static bit(9)                   initial dcl 2-8
put_string                             internal static bit(9)                   initial dcl 2-8
r_format                               internal static bit(9)                   initial dcl 2-8
r_parn                                 internal static bit(9)                   initial dcl 2-8
range_ck                               internal static bit(9)                   initial dcl 2-8
rank_fun                               internal static bit(9)                   initial dcl 2-8
read_file                              internal static bit(9)                   initial dcl 2-8
real_fix_bin_1                         internal static fixed bin(15,0)          initial dcl 5-1
real_fix_bin_2                         internal static fixed bin(15,0)          initial dcl 5-1
real_fix_dec                           internal static fixed bin(15,0)          initial dcl 5-1
real_flt_bin_1                         internal static fixed bin(15,0)          initial dcl 5-1
real_flt_bin_2                         internal static fixed bin(15,0)          initial dcl 5-1
real_flt_dec                           internal static fixed bin(15,0)          initial dcl 5-1
real_fun                               internal static bit(9)                   initial dcl 2-8
record_io                              internal static bit(9)                   initial dcl 2-8
refer                                  internal static bit(9)                   initial dcl 2-8
rel_fun                                internal static bit(9)                   initial dcl 2-8
repeat_fun                             internal static bit(9)                   initial dcl 2-8
return_bits                            internal static bit(9)                   initial dcl 2-8
return_string                          internal static bit(9)                   initial dcl 2-8
return_value                           internal static bit(9)                   initial dcl 2-8
return_words                           internal static bit(9)                   initial dcl 2-8
reverse_fun                            internal static bit(9)                   initial dcl 2-8
revert_on                              internal static bit(9)                   initial dcl 2-8
rewrite_file                           internal static bit(9)                   initial dcl 2-8
round_fun                              internal static bit(9)                   initial dcl 2-8
search_fun                             internal static bit(9)                   initial dcl 2-8
search_rev_fun                         internal static bit(9)                   initial dcl 2-8
segno_fun                              internal static bit(9)                   initial dcl 2-8
setbitno_fun                           internal static bit(9)                   initial dcl 2-8
setcharno_fun                          internal static bit(9)                   initial dcl 2-8
sign_fun                               internal static bit(9)                   initial dcl 2-8
signal_on                              internal static bit(9)                   initial dcl 2-8
sin_fun                                internal static bit(9)                   initial dcl 2-8
sind_fun                               internal static bit(9)                   initial dcl 2-8
skip_format                            internal static bit(9)                   initial dcl 2-8
sqrt_fun                               internal static bit(9)                   initial dcl 2-8
stack_ptr                              internal static bit(9)                   initial dcl 2-8
stackbaseptr_fun                       internal static bit(9)                   initial dcl 2-8
stackframeptr_fun                      internal static bit(9)                   initial dcl 2-8
stacq_fun                              internal static bit(9)                   initial dcl 2-8
std_arg_list                           internal static bit(9)                   initial dcl 2-8
std_call                               internal static bit(9)                   initial dcl 2-8
std_entry                              internal static bit(9)                   initial dcl 2-8
std_return                             internal static bit(9)                   initial dcl 2-8
stop                                   internal static bit(9)                   initial dcl 2-8
stream_prep                            internal static bit(9)                   initial dcl 2-8
sub                                    internal static bit(9)                   initial dcl 2-8
tan_fun                                internal static bit(9)                   initial dcl 2-8
tand_fun                               internal static bit(9)                   initial dcl 2-8
terminate_trans                        internal static bit(9)                   initial dcl 2-8
translate_fun                          internal static bit(9)                   initial dcl 2-8
trunc_fun                              internal static bit(9)                   initial dcl 2-8
units_per_word                         internal static fixed bin(8,0)           initial array dcl 7-5
unlock_file                            internal static bit(9)                   initial dcl 2-8
unpack                                 internal static bit(9)                   initial dcl 2-8
unpacked_ptr                           internal static fixed bin(15,0)          initial dcl 5-1
vclock_fun                             internal static bit(9)                   initial dcl 2-8
verify_fun                             internal static bit(9)                   initial dcl 2-8
verify_ltrim_fun                       internal static bit(9)                   initial dcl 2-8
verify_rev_fun                         internal static bit(9)                   initial dcl 2-8
verify_rtrim_fun                       internal static bit(9)                   initial dcl 2-8
word_to_mod2                           internal static bit(9)                   initial dcl 2-8
word_to_mod4                           internal static bit(9)                   initial dcl 2-8
word_to_mod8                           internal static bit(9)                   initial dcl 2-8
wordno_fun                             internal static bit(9)                   initial dcl 2-8
write_file                             internal static bit(9)                   initial dcl 2-8
x_format                               internal static bit(9)                   initial dcl 2-8
xor_bits                               internal static bit(9)                   initial dcl 2-8

NAMES DECLARED BY EXPLICIT CONTEXT.
check_overlap                   000637 constant        entry                    internal dcl 261 ref 248
need_temp                       000540 constant        entry                    internal dcl 226 ref 105
re_alloc                        000357 constant        label                    dcl 187 ref 170
reuse                           000375 constant        label                    dcl 192 ref 174 178
set_eis                         000473 constant        label                    dcl 212 ref 117 156 162
string_temp                     000021 constant        entry                    external dcl 12

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1132        1172     755        1142
Length      1506     755        40         277     155           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
string_temp                         130 external procedure  is an external procedure.  
need_temp                               internal procedure  shares stack frame of external procedure string_temp.  
check_overlap                           internal procedure  shares stack frame of external procedure string_temp.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
string_temp              000100 op                          string_temp
                         000102 p1                          string_temp
                         000104 p                           string_temp
                         000110 q                           string_temp
                         000112 dt                          string_temp
                         000113 icat                        string_temp
                         000114 k                           string_temp
                         000115 size                        string_temp
                         000116 type                        string_temp
                         000117 dont_move                   string_temp
                         000126 alias                       need_temp
                         000127 i                           need_temp
                         000130 n                           need_temp
                         000131 may_overlap                 need_temp
                         000132 overlap_must_be_same_generation
                                                            need_temp

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_g_a               r_e_as              call_ext_out        return              mod_fx1             ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
adjust_ref_count              base_man$update_base          copy_temp                     expmac
get_reference                 long_op$eis                   long_op$extend_stack          share_expression
stack_temp$assign_temp        state_man$update_ref

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
cg_stat$eis_temp              cg_stat$for_test_called




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     12 000014        79 000026        80 000032        81 000035        83 000040        84 000042        85 000045
     86 000047        87 000056        91 000063        93 000065        94 000066        96 000076       103 000100
    105 000101       108 000111       109 000120       110 000124       111 000130       112 000136       113 000142
    114 000144       116 000165       117 000166       123 000172       126 000201       127 000211       135 000220
    138 000227       141 000244       148 000252       149 000254       150 000260       152 000266       153 000273
    156 000312       162 000313       170 000316       173 000324       174 000325       178 000336       182 000353
    185 000354       187 000357       189 000374       192 000375       194 000404       198 000431       201 000451
    202 000454       208 000457       212 000473       215 000476       217 000500       219 000515       220 000516
    223 000534       226 000540       239 000542       242 000551       243 000555       245 000562       247 000564
    248 000573       250 000600       253 000617       255 000621       258 000634       261 000637       275 000641
    277 000643       279 000655       285 000712       290 000732


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
