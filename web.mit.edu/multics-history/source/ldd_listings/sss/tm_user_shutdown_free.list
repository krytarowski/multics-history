	COMPILATION LISTING OF SEGMENT tm_user_shutdown_free
	Compiled by: Multics PL/I Compiler, Release 28e, of February 14, 1985
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 04/04/85  0949.6 mst Thu
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 /* format: style4,ifthenstmt,^indproc,^indcomtxt */
        7 /*---------------*/
        8 
        9 tm_user_shutdown_free: proc (A_code);
       10 
       11 /* DESCRIPTION:
       12*
       13*	This program frees any TDT entries held by the calling process.  It
       14*     is only to be called as part of user shutdown just before resetting the
       15*     first reference traps for the DM ring managers.  If an entry is not
       16*     really free (tid ^= 0), the entry is not freed, and an error code is
       17*     returned.
       18**/
       19 
       20 /* HISTORY:
       21*
       22*Written by Steve Herbst, 05/01/84.
       23*Modified:
       24*05/10/84 by Lee A. Newcomb: Changed to match on user process id instead of
       25*	  user name.project to prevent multi-process conflicts.
       26*10/23/84 by Steve Herbst: Changed in response to audit comments.
       27*03/05/85 by Steve Herbst: Replaced dm_log_ with dm_misc_util_$log.
       28**/
       29 
       30 /* DECLARATIONS */
       31 
       32 /* Parameters */
       33 
       34 dcl A_code fixed bin (35) parameter;
       35 
       36 /* Constants */
       37 
       38 dcl ME char (32) int static options (constant) init ("tm_user_shutdown_free");
       39 
       40 /* Automatic */
       41 
       42 dcl my_process_id bit (36);
       43 dcl txn_index fixed bin;
       44 dcl code fixed bin (35);
       45 
       46 /* External */
       47 
       48 dcl dm_data_$tm_tdt_ptr ptr ext;
       49 dcl dm_error_$tdt_entry_not_freed fixed bin (35) ext;
       50 dcl error_table_$unimplemented_version fixed bin (35) ext;
       51 
       52 /* Entries */
       53 
       54 dcl dm_misc_util_$log entry options (variable);
       55 dcl get_process_id_ entry () returns (bit (36));
       56 dcl ipc_$delete_ev_chn entry (fixed bin (71), fixed bin (35));
       57 dcl user_info_ entry (char (*), char (*));
       58 
       59 /* Builtins */
       60 
       61 dcl (rtrim, stacq, unspec) builtin;
       62 
       63 /* Conditions */
       64 
       65 /* END OF DECLARATIONS */
       66 
       67 	A_code = 0;
       68 
       69 	tm_tdt_ptr = dm_data_$tm_tdt_ptr;
       70 
       71 	if tm_tdt.version ^= TM_TDT_VERSION_3 then do;
       72 	     A_code = error_table_$unimplemented_version;
       73 	     call dm_misc_util_$log (ERROR_SV, A_code, ME);
       74 	     return;
       75 	end;
       76 
       77 	my_process_id = get_process_id_ ();
       78 
       79 	do txn_index = 1 to tm_tdt.entry_count;
       80 
       81 	     tm_tdt_entry_ptr = addr (tm_tdt.entry (txn_index));
       82 
       83 	     if tm_tdt_entry.process_id = my_process_id & ^tm_tdt_entry.abandoned_sw then do;
       84 
       85 		if tm_tdt_entry.txn_id ^= "0"b then do;
       86 		     A_code = dm_error_$tdt_entry_not_freed;
       87 		     call dm_misc_util_$log (ERROR_SV, A_code, ME);
       88 		end;
       89 		else do;
       90 		     tm_tdt_entry.owner_name = "";
       91 		     if tm_tdt_entry.event_channel ^= 0 then do;
       92 			call ipc_$delete_ev_chn (tm_tdt_entry.event_channel, code);
       93 			if code ^= 0 then call dm_misc_util_$log (ERROR_SV, code, ME,
       94 				"Error freeing event channel ^w for user ^a",
       95 				tm_tdt_entry.event_channel, tm_tdt_entry.owner_name);
       96 		     end;
       97 
       98 		     unspec (tm_tdt_entry.transaction) = "0"b;
       99 
      100 		     if stacq (tm_tdt_entry.process_id, "0"b, tm_tdt_entry.process_id) then ;
      101 						/* free TDT entry indivisibly */
      102 		end;
      103 	     end;
      104 	end;
      105 
      106 	return;
      107 
  1     1 /*  START OF:	dm_tm_tdt.incl.pl1		*/
  1     2 
  1     3 /* Transaction Definition Table for transaction_manager_ */
  1     4 /* This structure is used to reference the TDT. The process_id field for the
  1     5*   i'th TDT entry, for example, is usually referenced as tm_tdt.process_id (i).
  1     6*   A TDT entry is in use by a process when its process_id field is nonzero.
  1     7*   An entry is reserved by using the stacq builtin to set process_id, if and
  1     8*   only if it is already zero. The entry is being used for a transaction when
  1     9*   tm_tdt.txn_id (i) is nonzero. The possible values of tm_tdt.state (i) are
  1    10*   listed in dm_tm_states.incl.pl1. If state = 0, no operation has been
  1    11*   performed yet on the transaction. */
  1    12 
  1    13 
  1    14 /* HISTORY:
  1    15*Designed by Matt Pierret, 01/26/82.
  1    16*Coded by Steve Herbst, 07/27/82.
  1    17*Modified:
  1    18*08/05/82 by Steve Herbst: Added tm_tdt.operation and padded last_uid to full word.
  1    19*08/05/82 by Steve Herbst: Changed creator_process_id to bit (36).
  1    20*08/16/82 by Steve Herbst: Added contents of dm_tm_tdt_entry.incl.pl1.
  1    21*09/09/82 by Steve Herbst: Removed in_use flag from TDT entry and rearranged fields.
  1    22*09/20/82 by Steve Herbst: Removed tm_tdt.operation.
  1    23*11/01/82 by Steve Herbst: Added event_channel and error_sw to tm_tdt_entry.
  1    24*11/05/82 by Steve Herbst: Added suspended_sw and error_code to tm_tdt_entry.
  1    25*11/11/82 by Steve Herbst: Deleted tm_tdt_entry.alloc_complete.
  1    26*11/23/82 by Steve Herbst: Compacted, changed some numbers to unsigned.
  1    27*12/14/82 by Steve Herbst: Added tm_tdt_entry.daemon_error_sw.
  1    28*01/11/83 by Steve Herbst: Added owner_name, abandoned_sw & kill_sw to tm_tdt_entry.
  1    29*01/24/83 by Steve Herbst: Replaced daemon_error_sw with daemon_adjust_count.
  1    30*01/25/83 by Steve Herbst: Moved abandoned_sw from transaction portion to entry header portion.
  1    31*05/13/83 by Steve Herbst: Version 3, changed all fixed bin (18) unal uns numbers to fixed bin (17) unaligned.
  1    32*05/26/83 by Steve Herbst: Added rollback_count and checkpoint_id.
  1    33**/
  1    34 
  1    35 dcl	tm_tdt_ptr	ptr;
  1    36 dcl	tdt_max_count	fixed bin;
  1    37 
  1    38 dcl TM_TDT_VERSION_3 char (8) int static options (constant) init ("TM-TDT 3");
  1    39 
  1    40 
  1    41 dcl  1	tm_tdt		aligned based (tm_tdt_ptr),
  1    42       2	version char (8),				/* = "TM-TDT 3" */
  1    43       2	lock fixed bin (71),			/* (currently not used) */
  1    44       2	last_uid		bit (27) aligned,		/* last transaction uid assigned */
  1    45       2	flags,
  1    46        3	no_begins		bit (1) unaligned,		/* ON => only priv process can begin transaction */
  1    47        3	mbz1		bit (35) unaligned,
  1    48       2	entry_count	fixed bin,		/* number of slots allocated */
  1    49       2	mbz2		fixed bin,		/* for even word boundary */
  1    50       2	entry  (tdt_max_count refer (tm_tdt.entry_count))
  1    51 			like tm_tdt_entry;
  1    52 
  1    53 
  1    54 
  1    55 /* TDT entries: */
  1    56 
  1    57 dcl	tm_tdt_entry_ptr	ptr;
  1    58 
  1    59 dcl  1	tm_tdt_entry	aligned based (tm_tdt_entry_ptr),
  1    60       2	event_channel	fixed bin (71),		/* for communication with the process */
  1    61       2	process_id	bit (36) aligned,		/* process for which this entry is reserved */
  1    62       2	owner_name	char (32),		/* person.project of owner process */
  1    63       2	entry_flags,
  1    64        3	abandoned_sw	bit (1) unaligned,		/* ON => owner has called tm_$abandon on this entry */
  1    65        3	mbz3		bit (35) unaligned,
  1    66       2	transaction	unaligned,
  1    67        3	txn_id		bit (36) aligned,		/* unique identifier assigned at begin time */
  1    68        3	date_time_created	fixed bin (71) aligned,
  1    69        3	mode		fixed bin (17) unaligned,	/* mode specified with transaction begin */
  1    70        3	state		fixed bin (17) unaligned,	/* state transaction is currently in */
  1    71        3  error_code	fixed bin (35) aligned,	/* goes along with error_sw and error state */
  1    72        3 	checkpoint_id	fixed bin (17) unaligned,	/* identifier of the current rollback checkpoint */
  1    73        3	rollback_count	fixed bin (17) unaligned,	/* number of times bjm_$rollback has been called */
  1    74        3	daemon_adjust_count	fixed bin (17) unaligned,	/* number of times daemon has tried to adjust since user */
  1    75        3	return_idx	fixed bin (17) unaligned,	/* parent transaction, or zero */
  1    76        3	flags,
  1    77         4 dead_process_sw	bit (1) unaligned,		/* ON => treat process as dead even if it isn't yet */
  1    78         4 suspended_sw	bit (1) unaligned,		/* ON => suspended by tm_$suspend_txn */
  1    79         4 error_sw		bit (1) unaligned,		/* ON => state is one of the error states */
  1    80         4 kill_sw		bit (1) unaligned,		/* ON => being processed by tm_$kill */
  1    81         4	mbz4		bit (29) unaligned,
  1    82        3	post_commit_flags,
  1    83         4 (fmgr,
  1    84 	 bjmgr,
  1    85 	 ajmgr)	 	 bit (1) unaligned,
  1    86        3	mbz4		fixed bin;
  1    87 
  1    88 
  1    89 /*  END OF:	dm_tm_tdt.incl.pl1		*/
      108 
      109 
  2     1 /* BEGIN INCLUDE FILE dm_log_sv_codes.incl.pl1 */
  2     2 
  2     3 /* format: ^indcom */
  2     4 
  2     5 /* DESCRIPTION:
  2     6*   These are the severity codes used by the dms daemon when calling its logger.
  2     7*   The severity is ranked thusly:
  2     8*
  2     9*   severity log write situation
  2    10*   -------- --- ----- ---------
  2    11*          0 no  yes   standard output, query, etc.
  2    12*          1 yes yes   fatal error, terminate dms daemon.
  2    13*          2 yes yes   nonfatal error.
  2    14*          3 yes yes   informative message.
  2    15*          4 yes no    log information only.
  2    16**/
  2    17 
  2    18 /* HISTORY:
  2    19*
  2    20*Written by M. Pandolf, 10/06/82.
  2    21*Modified:
  2    22*12/10/84 by R. Michael Tague: Rename and reformat description/history.
  2    23*01/13/85 by Lee A. Newcomb:  Renamed to dm_log_sv_codes from
  2    24*            dm_daemon_sv_codes as the severity codes for the DM log are not
  2    25*            restrained to the DM Daemon's use.
  2    26*01/24/85 by Lee A. Newcomb:  Fixed to say dm_log_sv_codes.incl.pl1 in the
  2    27*            BEGIN and END INCLUDE comments, instead of dm_daemon_sv_codes.==.
  2    28**/
  2    29 
  2    30 /* format: style5 */
  2    31 
  2    32      dcl	   (PRINT_SV, QUERY_SV)    fixed bin internal static
  2    33 			       options (constant) init (0);
  2    34      dcl	   (CRASH_SV, FATAL_SV)    fixed bin internal static
  2    35 			       options (constant) init (1);
  2    36      dcl	   ERROR_SV	       fixed bin internal static
  2    37 			       options (constant) init (2);
  2    38      dcl	   INFORM_SV	       fixed bin internal static
  2    39 			       options (constant) init (3);
  2    40      dcl	   LOG_SV		       fixed bin internal static
  2    41 			       options (constant) init (4);
  2    42 
  2    43 /* END INCLUDE FILE dm_log_sv_codes.incl.pl1 */
      110 
      111 
      112 
      113 end tm_user_shutdown_free;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/04/85  0827.2  tm_user_shutdown_free.pl1         >spec>on>7192.pbf-04/04/85>tm_user_shutdown_free.pl1
108          1    01/07/85  0900.1  dm_tm_tdt.incl.pl1                >ldd>include>dm_tm_tdt.incl.pl1
110          2    03/06/85  1031.1  dm_log_sv_codes.incl.pl1          >ldd>include>dm_log_sv_codes.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
A_code                                 parameter       fixed bin(35,0)          dcl 34 set ref 9 67* 72* 73* 86* 87*
ERROR_SV                        000000 constant        fixed bin(17,0)          initial dcl 2-36 set ref 73* 87* 93*
ME                              000004 constant        char(32)                 initial unaligned dcl 38 set ref 73* 87* 93*
TM_TDT_VERSION_3                000002 constant        char(8)                  initial unaligned dcl 1-38 ref 71
abandoned_sw             13            based           bit(1)                   level 3 packed unaligned dcl 1-59 ref 83
code                            000102 automatic       fixed bin(35,0)          dcl 44 set ref 92* 93 93*
dm_data_$tm_tdt_ptr             000010 external static pointer                  dcl 48 ref 69
dm_error_$tdt_entry_not_freed   000012 external static fixed bin(35,0)          dcl 49 ref 86
dm_misc_util_$log               000016 constant        entry                    external dcl 54 ref 73 87 93
entry                    10            based           structure                array level 2 dcl 1-41 set ref 81
entry_count               6            based           fixed bin(17,0)          level 2 dcl 1-41 ref 79
entry_flags              13            based           structure                level 2 dcl 1-59
error_table_$unimplemented_version
                                000014 external static fixed bin(35,0)          dcl 50 ref 72
event_channel                          based           fixed bin(71,0)          level 2 dcl 1-59 set ref 91 92* 93*
get_process_id_                 000020 constant        entry                    external dcl 55 ref 77
ipc_$delete_ev_chn              000022 constant        entry                    external dcl 56 ref 92
my_process_id                   000100 automatic       bit(36)                  unaligned dcl 42 set ref 77* 83
owner_name                3            based           char(32)                 level 2 dcl 1-59 set ref 90* 93*
process_id                2            based           bit(36)                  level 2 dcl 1-59 ref 83 100 100
stacq                                                  builtin function         dcl 61 ref 100
tm_tdt                                 based           structure                level 1 dcl 1-41
tm_tdt_entry                           based           structure                level 1 dcl 1-59
tm_tdt_entry_ptr                000106 automatic       pointer                  dcl 1-57 set ref 81* 83 83 85 90 91 92 93 93 98 100
                                                                                  100
tm_tdt_ptr                      000104 automatic       pointer                  dcl 1-35 set ref 69* 71 79 81
transaction              14            based           structure                level 2 unaligned dcl 1-59 set ref 98*
txn_id                   14            based           bit(36)                  level 3 dcl 1-59 set ref 85
txn_index                       000101 automatic       fixed bin(17,0)          dcl 43 set ref 79* 81*
unspec                                                 builtin function         dcl 61 set ref 98*
version                                based           char(8)                  level 2 dcl 1-41 ref 71

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
CRASH_SV                               internal static fixed bin(17,0)          initial dcl 2-34
FATAL_SV                               internal static fixed bin(17,0)          initial dcl 2-34
INFORM_SV                              internal static fixed bin(17,0)          initial dcl 2-38
LOG_SV                                 internal static fixed bin(17,0)          initial dcl 2-40
PRINT_SV                               internal static fixed bin(17,0)          initial dcl 2-32
QUERY_SV                               internal static fixed bin(17,0)          initial dcl 2-32
rtrim                                                  builtin function         dcl 61
tdt_max_count                          automatic       fixed bin(17,0)          dcl 1-36
user_info_                      000000 constant        entry                    external dcl 57

NAME DECLARED BY EXPLICIT CONTEXT.
tm_user_shutdown_free           000041 constant        entry                    external dcl 9

NAME DECLARED BY CONTEXT OR IMPLICATION.
addr                                                   builtin function         ref 81

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       400         424     257         410
Length       640     257        24         177     120           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
tm_user_shutdown_free               114 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
tm_user_shutdown_free    000100 my_process_id               tm_user_shutdown_free
                         000101 txn_index                   tm_user_shutdown_free
                         000102 code                        tm_user_shutdown_free
                         000104 tm_tdt_ptr                  tm_user_shutdown_free
                         000106 tm_tdt_entry_ptr            tm_user_shutdown_free

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return              ext_entry           stacq

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
dm_misc_util_$log             get_process_id_               ipc_$delete_ev_chn

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
dm_data_$tm_tdt_ptr           dm_error_$tdt_entry_not_freed error_table_$unimplemented_version




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
      9 000036        67 000046        69 000050        71 000053        72 000060        73 000062        74 000102
     77 000103        79 000111        81 000121        83 000125        85 000133        86 000135        87 000141
     88 000161        90 000162        91 000165        92 000167        93 000200        98 000243       100 000247
    104 000254       106 000256


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
