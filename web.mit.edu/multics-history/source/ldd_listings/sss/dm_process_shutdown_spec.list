	COMPILATION LISTING OF SEGMENT dm_process_shutdown_spec
	Compiled by: Multics PL/I Compiler, Release 28e, of February 14, 1985
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 03/05/85  0901.5 mst Tue
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 
        7 /* DESCRIPTION:
        8*
        9*         This    routine    takes    a    shutdown_spec,     pointed   to   by
       10*     p_shutdown_spec_ptr, and processes it to  determine  a  complete  set  of
       11*     shutdown  info,  returning  the info in the caller-supplied shutdown_info
       12*     structure pointed to by p_shutdown_info_ptr.  Shutdown info consists of a
       13*     reason for shutdown, which is copied directly from the shutdown_spec, and
       14*     a set of times - one time for each of the five events which  comprise  DM
       15*     shutdown.  The times are determined as follows:
       16*
       17*     1)  Any  time in shutdown_spec.times which is not equal to 0 is copied to
       18*     shutdown_info.times.  These times are referred to as "specified times".
       19*
       20*     2) If no times are specified (i.e., all times in shutdown_spec.times  are
       21*     equal to 0) then shutdown_info.times.user_bump_time is set to the current
       22*     Multics scheduled down time.  If there is no Multics down time scheduled,
       23*     set shutdown_info.output_flags.no_time_specified to "1"b and return.
       24*
       25*     3)  Starting  with  the  begin_shutdown_time  and  proceeding through the
       26*     daemon_logout_time, for each shutdown_info.times cell which  is  not  yet
       27*     set (i.e., shutdown_info.times.<time> is equal to 0), attempt to set that
       28*     time as follows:
       29*        3.1) If the previous time in shutdown_info.times is equal to 0,
       30*             we have no way of determining the this time, so skip to
       31*             the next time.
       32*        3.2) Otherwise, set the time based on the previous time using
       33*             a delay.  If there is a delay for this event specified in
       34*             shutdown_spec.delays, add that delay to the previous time;
       35*             otherwise use the default delay for this event stored in
       36*             dm_system_data_.
       37*
       38*     4)    Stepping    backwards    from   the   user_shutdown_time   to   the
       39*     user_warning_time, for each time in shutdown_info.times  which  is  still
       40*     set  to  0,  determine the time subtracting a delay from the time for the
       41*     next event.  It is guaranteed that when stepping  through  the  times  in
       42*     this  way,  if  the time for an event is still set to 0, the time for the
       43*     next event is not 0.  Determine the delay as follows:
       44*        4.1) If the delay for the NEXT event is specified in
       45*             shutdown_spec.delays, subtract it from the time in
       46*             shutdown_info.times for the NEXT event to get the time
       47*             for the current event.
       48*        4.2) Otherwise, subtract the delay for the next event in
       49*             dm_system_data_ from the time for the next event to get
       50*             the time for the current event.
       51**/
       52 
       53 /* HISTORY:
       54*
       55*Written by Matthew C. Pierret, 09/11/84.
       56*Modified:
       57*09/27/84 by Lee A. Newcomb:  Added setting of reason to default value if times
       58*            are calculated from the Multics down time.
       59**/
       60 
       61 /* format: style2,ind3,^indprocbody,^indnoniterdo,indnoniterend */
       62 /* format: ll79,comcol50,indblkcom */
       63 
       64 dm_process_shutdown_spec:
       65    proc (p_shutdown_spec_ptr, p_shutdown_info_ptr);
       66 
       67 /* START OF DECLARATIONS */
       68 /* Parameter */
       69 
       70    dcl	 p_shutdown_spec_ptr    ptr;	         /*points to a shutdown_spec.*/
       71    dcl	 p_shutdown_info_ptr    ptr;	         /*points to a shutdown_info*/
       72 
       73 /* Automatic */
       74 
       75    dcl	 1 my_shutdown_info	    aligned like shutdown_info;
       76    dcl	 user_bump_time_str	    char (24);
       77    dcl	 whoptr		    ptr init (null ());
       78 
       79 /* Based */
       80 /* Builtin */
       81 
       82    dcl	 (null, unspec)	    builtin;
       83 
       84 /* Constant */
       85 
       86    dcl	 myname		    init ("dm_process_shutdown_spec")
       87 			    char (32) varying internal static
       88 			    options (constant);
       89 
       90 /* Entry */
       91 
       92    dcl	 date_time_	    entry (fixed bin (71), char (*));
       93    dcl	 hcs_$initiate	    entry (char (*), char (*), char (*),
       94 			    fixed bin (1), fixed bin (2), ptr,
       95 			    fixed bin (35));
       96    dcl	 sub_err_		    entry () options (variable);
       97    dcl	 system_info_$next_shutdown
       98 			    entry (fixed bin (71), char (*),
       99 			    fixed bin (71));
      100 
      101 /* External */
      102 
      103    dcl	 (
      104 	 dm_system_data_$begin_shutdown_delay,
      105 	 dm_system_data_$user_shutdown_delay,
      106 	 dm_system_data_$user_bump_delay,
      107 	 dm_system_data_$daemon_logout_delay
      108 	 )		    ext fixed bin (71);
      109    dcl	 sys_info$system_control_dir
      110 			    ext char (168) varying;
      111    dcl	 error_table_$unimplemented_version
      112 			    fixed bin (35) ext;
      113 
      114 /* END OF DECLARATIONS */
      115 
      116    shutdown_spec_ptr = p_shutdown_spec_ptr;
      117    call CHECK_VERSION (shutdown_spec.version, SHUTDOWN_SPEC_VERSION_1,
      118         "shutdown_spec");
      119    call CHECK_VERSION (p_shutdown_info_ptr -> shutdown_info.version,
      120         SHUTDOWN_INFO_VERSION_1, "shutdown_info");
      121 
      122    unspec (my_shutdown_info) = ""b;
      123    my_shutdown_info.version = SHUTDOWN_INFO_VERSION_1;
      124    my_shutdown_info.reason = shutdown_spec.reason;
      125 
      126    /*** Steps (1) and (2) of DESCRIPTION. ***/
      127 
      128    if unspec (shutdown_spec.times) ^= ""b
      129    then unspec (my_shutdown_info.times) = unspec (shutdown_spec.times);
      130    else
      131 GET_DEFAULTS_FROM_MULTICS_DOWN_TIME:
      132       do;
      133       call system_info_$next_shutdown (my_shutdown_info.times.user_bump_time,
      134 	 (""), (0));		         /* only want down time */
      135       if unspec (my_shutdown_info.reason) = ""b
      136       then
      137 GET_DEFAULT_SHUTDOWN_REASON:
      138          do;
      139          call date_time_ (my_shutdown_info.times.user_bump_time,
      140 	    user_bump_time_str);
      141          my_shutdown_info.reason =
      142 	    "Multics is shutting down @ "
      143 	    || substr (user_bump_time_str, 11, 6);
      144 				         /* just use HHMM.M part */
      145          end GET_DEFAULT_SHUTDOWN_REASON;
      146       end GET_DEFAULTS_FROM_MULTICS_DOWN_TIME;
      147 
      148    if unspec (my_shutdown_info.times) = ""b
      149    then
      150 CANT_CALCULATE_TIMES:
      151       my_shutdown_info.output_flags.no_time_specified = "1"b;
      152    else
      153 CALCULATE_UNSPECIFIED_TIMES:
      154       do;
      155       my_shutdown_info.output_flags.no_time_specified = "0"b;
      156 FIRST_PASS_FORWARD:
      157       do;
      158 
      159          /*** Step (3) of DESCRIPTION. ***/
      160 
      161          if my_shutdown_info.times.begin_shutdown_time = 0
      162 	    & my_shutdown_info.times.user_warning_time ^= 0
      163          then if shutdown_spec.delays.begin_shutdown_delay = 0
      164 	    then my_shutdown_info.times.begin_shutdown_time =
      165 		    my_shutdown_info.times.user_warning_time
      166 		    + dm_system_data_$begin_shutdown_delay;
      167 	    else my_shutdown_info.times.begin_shutdown_time =
      168 		    my_shutdown_info.times.user_warning_time
      169 		    + shutdown_spec.delays.begin_shutdown_delay;
      170 
      171          if my_shutdown_info.times.user_shutdown_time = 0
      172 	    & my_shutdown_info.times.begin_shutdown_time ^= 0
      173          then if shutdown_spec.delays.user_shutdown_delay = 0
      174 	    then my_shutdown_info.times.user_shutdown_time =
      175 		    my_shutdown_info.times.begin_shutdown_time
      176 		    + dm_system_data_$user_shutdown_delay;
      177 	    else my_shutdown_info.times.user_shutdown_time =
      178 		    my_shutdown_info.times.begin_shutdown_time
      179 		    + shutdown_spec.delays.user_shutdown_delay;
      180 
      181          if my_shutdown_info.times.user_bump_time = 0
      182 	    & my_shutdown_info.times.user_shutdown_time ^= 0
      183          then if shutdown_spec.delays.user_bump_delay = 0
      184 	    then my_shutdown_info.times.user_bump_time =
      185 		    my_shutdown_info.times.user_shutdown_time
      186 		    + dm_system_data_$user_bump_delay;
      187 	    else my_shutdown_info.times.user_bump_time =
      188 		    my_shutdown_info.times.user_shutdown_time
      189 		    + shutdown_spec.delays.user_bump_delay;
      190 
      191          if my_shutdown_info.times.daemon_logout_time = 0
      192 	    & my_shutdown_info.times.user_bump_time ^= 0
      193          then if shutdown_spec.delays.daemon_logout_delay = 0
      194 	    then my_shutdown_info.times.daemon_logout_time =
      195 		    my_shutdown_info.times.user_bump_time
      196 		    + dm_system_data_$daemon_logout_delay;
      197 	    else my_shutdown_info.times.daemon_logout_time =
      198 		    my_shutdown_info.times.user_bump_time
      199 		    + shutdown_spec.delays.daemon_logout_delay;
      200 
      201       end FIRST_PASS_FORWARD;
      202 SECOND_PASS_BACKWARD:
      203       do;
      204 
      205          /*** Step (4) of DESCRIPTION. ***/
      206 
      207          if my_shutdown_info.times.user_bump_time = 0
      208          then if shutdown_spec.delays.daemon_logout_delay = 0
      209 	    then my_shutdown_info.times.user_bump_time =
      210 		    my_shutdown_info.times.daemon_logout_time
      211 		    - dm_system_data_$daemon_logout_delay;
      212 	    else my_shutdown_info.times.user_bump_time =
      213 		    my_shutdown_info.times.daemon_logout_time
      214 		    - shutdown_spec.delays.daemon_logout_delay;
      215 
      216          if my_shutdown_info.times.user_shutdown_time = 0
      217          then if shutdown_spec.delays.user_bump_delay = 0
      218 	    then my_shutdown_info.times.user_shutdown_time =
      219 		    my_shutdown_info.times.user_bump_time
      220 		    - dm_system_data_$user_bump_delay;
      221 	    else my_shutdown_info.times.user_shutdown_time =
      222 		    my_shutdown_info.times.user_bump_time
      223 		    - shutdown_spec.delays.user_bump_delay;
      224 
      225          if my_shutdown_info.times.begin_shutdown_time = 0
      226          then if shutdown_spec.delays.user_shutdown_delay = 0
      227 	    then my_shutdown_info.times.begin_shutdown_time =
      228 		    my_shutdown_info.times.user_shutdown_time
      229 		    - dm_system_data_$user_shutdown_delay;
      230 	    else my_shutdown_info.times.begin_shutdown_time =
      231 		    my_shutdown_info.times.user_shutdown_time
      232 		    - shutdown_spec.delays.user_shutdown_delay;
      233 
      234          if my_shutdown_info.times.user_warning_time = 0
      235          then if shutdown_spec.delays.begin_shutdown_delay = 0
      236 	    then my_shutdown_info.times.user_warning_time =
      237 		    my_shutdown_info.times.begin_shutdown_time
      238 		    - dm_system_data_$begin_shutdown_delay;
      239 	    else my_shutdown_info.times.user_warning_time =
      240 		    my_shutdown_info.times.begin_shutdown_time
      241 		    - shutdown_spec.delays.begin_shutdown_delay;
      242 
      243       end SECOND_PASS_BACKWARD;
      244 
      245       end CALCULATE_UNSPECIFIED_TIMES;
      246 
      247    p_shutdown_info_ptr -> shutdown_info = my_shutdown_info;
      248 
      249    return;
      250 
      251 
      252 
      253 
      254 
      255 CHECK_VERSION:
      256    proc (cv_p_received_version, cv_p_expected_version, cv_p_structure_name);
      257    dcl	 cv_p_received_version  char (8) aligned;
      258    dcl	 cv_p_expected_version  char (8) aligned;
      259    dcl	 cv_p_structure_name    char (*);
      260 
      261    if cv_p_received_version ^= cv_p_expected_version
      262    then call sub_err_ (error_table_$unimplemented_version, myname,
      263 	   ACTION_CANT_RESTART, null, 0,
      264 	   "^/Expected version ^a of the ^a structure.
      265 Received version ^d instead.", cv_p_expected_version, cv_p_structure_name,
      266 	   cv_p_received_version);
      267 
      268    end CHECK_VERSION;
      269 
  1     1 /* ***** BEGIN INCLUDE FILE  dm_shutdown_spec.incl.pl1 ***** */
  1     2 
  1     3 /* DESCRIPTION:
  1     4*
  1     5*   Contains the shutdown_spec structure and the shutdown_info
  1     6*   structure.  The shutdown_spec structure a reason for a DM
  1     7*   shutdown, a set of times and a set of delays.  Only times and
  1     8*   delays which explicitly specified are set, the others are equal to
  1     9*   0.
  1    10*   
  1    11*   The shutdown_spec is processed with the result being a
  1    12*   shutdown_info structure.  It contains a reason and a set of times.
  1    13*   The times are either those times specified in the shutdown_spec or
  1    14*   times calculated from those times using delays.  The delays are
  1    15*   those specified in the shutdown_spec, or, if not specified,
  1    16*   default delays.  Default delays are kept in dm_system_data.
  1    17**/
  1    18 
  1    19 /* HISTORY:
  1    20*Written by Matthew Pierret, 09/06/84.
  1    21*Modified:
  1    22**/
  1    23 
  1    24 /* format: style2,ind3 */
  1    25      dcl	   1 shutdown_spec	      aligned based (shutdown_spec_ptr),
  1    26 	     2 version	      char (8) aligned,
  1    27 	     2 reason	      char (64),
  1    28 	     2 times,
  1    29 	       3 user_warning_time
  1    30 			      fixed bin (71),
  1    31 	       3 begin_shutdown_time
  1    32 			      fixed bin (71),
  1    33 	       3 user_shutdown_time
  1    34 			      fixed bin (71),
  1    35 	       3 user_bump_time   fixed bin (71),
  1    36 	       3 daemon_logout_time
  1    37 			      fixed bin (71),
  1    38 	     2 delays,
  1    39 	       3 begin_shutdown_delay
  1    40 			      fixed bin (71),
  1    41 	       3 user_shutdown_delay
  1    42 			      fixed bin (71),
  1    43 	       3 user_bump_delay  fixed bin (71),
  1    44 	       3 daemon_logout_delay
  1    45 			      fixed bin (71);
  1    46 
  1    47      dcl	   shutdown_spec_ptr      ptr;
  1    48      dcl	   SHUTDOWN_SPEC_VERSION_1
  1    49 			      init ("ShutSp 1") char (8) aligned internal static options (constant);
  1    50 
  1    51      dcl	   1 shutdown_info	      aligned based (shutdown_info_ptr),
  1    52 	     2 version	      char (8) aligned,
  1    53 	     2 reason	      char (64),
  1    54 	     2 times	      like shutdown_spec.times,
  1    55 	     2 output_flags	      aligned,
  1    56 	       3 no_time_specified
  1    57 			      bit (1) unal,
  1    58 	       3 times_have_changed
  1    59 			      bit (1) unal,
  1    60 	       3 mbz	      bit (34) unal;
  1    61 
  1    62      dcl	   shutdown_info_ptr      ptr init (null ());
  1    63      dcl	   SHUTDOWN_INFO_VERSION_1
  1    64 			      init ("ShutIn 1") char (8) aligned internal static options (constant);
  1    65 
  1    66 /* ******* END INCLUDE FILE dm_shutdown_spec.incl.pl1 ***** */
      270 
      271 
  2     1 /* BEGIN INCLUDE FILE sub_err_flags.incl.pl1 BIM 11/81 */
  2     2 /* format: style3 */
  2     3 
  2     4 /* These constants are to be used for the flags argument of sub_err_ */
  2     5 /* They are just "string (condition_info_header.action_flags)" */
  2     6 
  2     7 declare	(
  2     8 	ACTION_CAN_RESTART	init (""b),
  2     9 	ACTION_CANT_RESTART init ("1"b),
  2    10 	ACTION_DEFAULT_RESTART
  2    11 			init ("01"b),
  2    12 	ACTION_QUIET_RESTART
  2    13 			init ("001"b),
  2    14 	ACTION_SUPPORT_SIGNAL
  2    15 			init ("0001"b)
  2    16 	)		bit (36) aligned internal static options (constant);
  2    17 
  2    18 /* End include file */
      272 
      273 
      274    end dm_process_shutdown_spec;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    03/05/85  0758.6  dm_process_shutdown_spec.pl1      >spec>on>7138.pbf>dm_process_shutdown_spec.pl1
270          1    01/07/85  0859.8  dm_shutdown_spec.incl.pl1         >ldd>include>dm_shutdown_spec.incl.pl1
272          2    04/16/82  0958.1  sub_err_flags.incl.pl1            >ldd>include>sub_err_flags.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ACTION_CANT_RESTART             000023 constant        bit(36)                  initial dcl 2-7 set ref 261*
SHUTDOWN_INFO_VERSION_1         000000 constant        char(8)                  initial dcl 1-63 set ref 119* 123
SHUTDOWN_SPEC_VERSION_1         000002 constant        char(8)                  initial dcl 1-48 set ref 117*
begin_shutdown_delay     34            based           fixed bin(71,0)          level 3 dcl 1-25 ref 161 167 234 239
begin_shutdown_time      24     000100 automatic       fixed bin(71,0)          level 3 dcl 75 set ref 161 161* 167* 171 171 177 225
                                                                                  225* 230* 234 239
cv_p_expected_version                  parameter       char(8)                  dcl 258 set ref 255 261 261*
cv_p_received_version                  parameter       char(8)                  dcl 257 set ref 255 261 261*
cv_p_structure_name                    parameter       char                     unaligned dcl 259 set ref 255 261*
daemon_logout_delay      42            based           fixed bin(71,0)          level 3 dcl 1-25 ref 191 197 207 212
daemon_logout_time       32     000100 automatic       fixed bin(71,0)          level 3 dcl 75 set ref 191 191* 197* 207 212
date_time_                      000010 constant        entry                    external dcl 92 ref 139
delays                   34            based           structure                level 2 dcl 1-25
dm_system_data_$begin_shutdown_delay
                                000016 external static fixed bin(71,0)          dcl 103 ref 161 234
dm_system_data_$daemon_logout_delay
                                000024 external static fixed bin(71,0)          dcl 103 ref 191 207
dm_system_data_$user_bump_delay 000022 external static fixed bin(71,0)          dcl 103 ref 181 216
dm_system_data_$user_shutdown_delay
                                000020 external static fixed bin(71,0)          dcl 103 ref 171 225
error_table_$unimplemented_version
                                000026 external static fixed bin(35,0)          dcl 111 set ref 261*
my_shutdown_info                000100 automatic       structure                level 1 dcl 75 set ref 122* 247
myname                          000004 constant        varying char(32)         initial dcl 86 set ref 261*
no_time_specified        34     000100 automatic       bit(1)                   level 3 packed unaligned dcl 75 set ref 148* 155*
null                                                   builtin function         dcl 82 ref 77 1-62 261 261
output_flags             34     000100 automatic       structure                level 2 dcl 75
p_shutdown_info_ptr                    parameter       pointer                  dcl 71 ref 64 119 247
p_shutdown_spec_ptr                    parameter       pointer                  dcl 70 ref 64 116
reason                    2            based           char(64)                 level 2 in structure "shutdown_spec" dcl 1-25
                                                                                  in procedure "dm_process_shutdown_spec" ref 124
reason                    2     000100 automatic       char(64)                 level 2 in structure "my_shutdown_info" dcl 75
                                                                                  in procedure "dm_process_shutdown_spec" set ref
                                                                                  124* 135 141*
shutdown_info                          based           structure                level 1 dcl 1-51 set ref 247*
shutdown_info_ptr               000150 automatic       pointer                  initial dcl 1-62 set ref 1-62*
shutdown_spec                          based           structure                level 1 dcl 1-25
shutdown_spec_ptr               000146 automatic       pointer                  dcl 1-47 set ref 116* 117 124 128 128 161 167 171
                                                                                  177 181 187 191 197 207 212 216 221 225 230 234
                                                                                  239
sub_err_                        000012 constant        entry                    external dcl 96 ref 261
system_info_$next_shutdown      000014 constant        entry                    external dcl 97 ref 133
times                    22            based           structure                level 2 in structure "shutdown_spec" dcl 1-25
                                                                                  in procedure "dm_process_shutdown_spec" ref 128
                                                                                  128
times                    22     000100 automatic       structure                level 2 in structure "my_shutdown_info" dcl 75
                                                                                  in procedure "dm_process_shutdown_spec" set ref
                                                                                  128* 148
unspec                                                 builtin function         dcl 82 set ref 122* 128 128* 128 135 148
user_bump_delay          40            based           fixed bin(71,0)          level 3 dcl 1-25 ref 181 187 216 221
user_bump_time           30     000100 automatic       fixed bin(71,0)          level 3 dcl 75 set ref 133* 139* 181 181* 187* 191
                                                                                  191 197 207 207* 212* 216 221
user_bump_time_str              000135 automatic       char(24)                 unaligned dcl 76 set ref 139* 141
user_shutdown_delay      36            based           fixed bin(71,0)          level 3 dcl 1-25 ref 171 177 225 230
user_shutdown_time       26     000100 automatic       fixed bin(71,0)          level 3 dcl 75 set ref 171 171* 177* 181 181 187 216
                                                                                  216* 221* 225 230
user_warning_time        22     000100 automatic       fixed bin(71,0)          level 3 dcl 75 set ref 161 161 167 234 234* 239*
version                         000100 automatic       char(8)                  level 2 in structure "my_shutdown_info" dcl 75
                                                                                  in procedure "dm_process_shutdown_spec" set ref
                                                                                  123*
version                                based           char(8)                  level 2 in structure "shutdown_spec" dcl 1-25
                                                                                  in procedure "dm_process_shutdown_spec" set ref
                                                                                  117*
version                                based           char(8)                  level 2 in structure "shutdown_info" dcl 1-51
                                                                                  in procedure "dm_process_shutdown_spec" set ref
                                                                                  119*
whoptr                          000144 automatic       pointer                  initial dcl 77 set ref 77*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ACTION_CAN_RESTART                     internal static bit(36)                  initial dcl 2-7
ACTION_DEFAULT_RESTART                 internal static bit(36)                  initial dcl 2-7
ACTION_QUIET_RESTART                   internal static bit(36)                  initial dcl 2-7
ACTION_SUPPORT_SIGNAL                  internal static bit(36)                  initial dcl 2-7
hcs_$initiate                   000000 constant        entry                    external dcl 93
sys_info$system_control_dir            external static varying char(168)        dcl 109

NAMES DECLARED BY EXPLICIT CONTEXT.
CALCULATE_UNSPECIFIED_TIMES     000276 constant        label                    dcl 152
CANT_CALCULATE_TIMES            000273 constant        label                    dcl 148
CHECK_VERSION                   000463 constant        entry                    internal dcl 255 ref 117 119
FIRST_PASS_FORWARD              000300 constant        label                    dcl 156
GET_DEFAULTS_FROM_MULTICS_DOWN_TIME
                                000210 constant        label                    dcl 130
GET_DEFAULT_SHUTDOWN_REASON     000236 constant        label                    dcl 135
SECOND_PASS_BACKWARD            000370 constant        label                    dcl 202
dm_process_shutdown_spec        000103 constant        entry                    external dcl 64

NAME DECLARED BY CONTEXT OR IMPLICATION.
substr                                                 builtin function         ref 141

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       726         756     566         736
Length      1176     566        30         204     140           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
dm_process_shutdown_spec            196 external procedure  is an external procedure.  
CHECK_VERSION                           internal procedure  shares stack frame of external procedure dm_process_shutdown_spec.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
dm_process_shutdown_spec 000100 my_shutdown_info            dm_process_shutdown_spec
                         000135 user_bump_time_str          dm_process_shutdown_spec
                         000144 whoptr                      dm_process_shutdown_spec
                         000146 shutdown_spec_ptr           dm_process_shutdown_spec
                         000150 shutdown_info_ptr           dm_process_shutdown_spec

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_cs            call_ext_out_desc   return              shorten_stack       ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
date_time_                    sub_err_                      system_info_$next_shutdown

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
dm_system_data_$begin_shutdown_delay                        dm_system_data_$daemon_logout_delay
dm_system_data_$user_bump_delay                             dm_system_data_$user_shutdown_delay
error_table_$unimplemented_version




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     64 000077        77 000110    1   62 000112       116 000113       117 000117       119 000142       122 000167
    123 000172       124 000174       128 000200       133 000210       135 000232       139 000236       141 000253
    145 000266       148 000267       155 000276       161 000300       167 000314       171 000316       177 000332
    181 000334       187 000350       191 000352       197 000366       207 000370       212 000402       216 000405
    221 000417       225 000422       230 000434       234 000437       239 000451       247 000454       249 000462
    255 000463       261 000474       268 000564


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
