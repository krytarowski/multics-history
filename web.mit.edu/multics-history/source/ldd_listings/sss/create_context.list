	COMPILATION LISTING OF SEGMENT create_context
	Compiled by: Multics PL/I Compiler, Release 28d, of September 14, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 10/03/83  1603.5 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 
        7 /* ******************************************************
        8*   *                                                    *
        9*   *                                                    *
       10*   * Copyright (c) 1972 by Massachusetts Institute of   *
       11*   * Technology and Honeywell Information Systems, Inc. *
       12*   *                                                    *
       13*   *                                                    *
       14*   ****************************************************** */
       15 
       16 create_context:
       17 	proc(cblock,t) returns(ptr);
       18 
       19 /*	Modified on:	April 1977 by RHS for new allocation methods */
       20 
       21 dcl	(cblock, p, t) ptr;
       22 dcl	pl1_stat_$node_uses(32) fixed bin ext;
       23 
  1     1 /* BEGIN INCLUDE FILE ... pl1_tree_areas.incl.pl1 */
  1     2 
  1     3 /* format: style3 */
  1     4 dcl	tree_area		area based (pl1_stat_$tree_area_ptr);
  1     5 dcl	xeq_tree_area	area based (pl1_stat_$xeq_tree_area_ptr);
  1     6 
  1     7 dcl	pl1_stat_$tree_area_ptr
  1     8 			ptr ext static,
  1     9 	pl1_stat_$xeq_tree_area_ptr
  1    10 			ptr ext static;
  1    11 
  1    12 /* END INCLUDE FILE ... op_codes.incl.pl1 */
       24 
  2     1 /* BEGIN INCLUDE FILE ... context.incl.pl1 */
  2     2 
  2     3 dcl	1 context			based aligned,
  2     4 	2 node_type		bit(9) unaligned,
  2     5 	2 bits			structure unaligned,
  2     6 	  3 types			structure,
  2     7 	    4 structure		bit(1),
  2     8 	    4 fixed		bit(1),
  2     9 	    4 float		bit(1),
  2    10 	    4 bit			bit(1),
  2    11 	    4 char		bit(1),
  2    12 	    4 ptr			bit(1),
  2    13 	    4 offset		bit(1),
  2    14 	    4 area		bit(1),
  2    15 	    4 label		bit(1),
  2    16 	    4 entry		bit(1),
  2    17 	    4 file		bit(1),
  2    18 	    4 arg_descriptor	bit(1),
  2    19 	    4 storage_block		bit(1),
  2    20 	    4 unused_1		bit(1),
  2    21 	    4 condition		bit(1),
  2    22 	    4 format		bit(1),
  2    23 	    4 builtin		bit(1),
  2    24 	    4 generic		bit(1),
  2    25 	    4 picture		bit(1),
  2    26 	  3 parameter		bit(1),
  2    27 	2 reserved		bit(7) unaligned,
  2    28 	2 next			ptr unaligned,
  2    29 	2 token			ptr unaligned;
  2    30 
  2    31 /* END INCLUDE FILE ... context.incl.pl1 */
       25 
  3     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
  3     2 
  3     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
  3     4 
  3     5 dcl (	block_node		initial("000000001"b),
  3     6 	statement_node		initial("000000010"b),
  3     7 	operator_node		initial("000000011"b),
  3     8 	reference_node		initial("000000100"b),
  3     9 	token_node		initial("000000101"b),
  3    10 	symbol_node		initial("000000110"b),
  3    11 	context_node		initial("000000111"b),
  3    12 	array_node		initial("000001000"b),
  3    13 	bound_node		initial("000001001"b),
  3    14 	format_value_node		initial("000001010"b),
  3    15 	list_node			initial("000001011"b),
  3    16 	default_node		initial("000001100"b),
  3    17 	machine_state_node		initial("000001101"b),
  3    18 	source_node		initial("000001110"b),
  3    19 	label_node		initial("000001111"b),
  3    20 	cross_reference_node	initial("000010000"b),
  3    21 	sf_par_node		initial("000010001"b),
  3    22 	temporary_node		initial("000010010"b),
  3    23 	label_array_element_node	initial("000010011"b),
  3    24 	by_name_agg_node		initial("000010100"b))
  3    25 				bit(9) internal static aligned options(constant);
  3    26 
  3    27 dcl	1 node			based aligned,
  3    28 	2 type			unal bit(9),
  3    29 	2 source_id		unal structure,
  3    30 	  3 file_number		bit(8),
  3    31 	  3 line_number		bit(14),
  3    32 	  3 statement_number	bit(5);
  3    33 
  3    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
       26 
  4     1 /* BEGIN INCLUDE FILE ... block.incl.pl1 */
  4     2 /* Modified 22 Ocober 1980 by M. N. Davidoff to increase max block.number to 511 */
  4     3 /* format: style3,idind30 */
  4     4 
  4     5 declare	1 block			aligned based,
  4     6 	  2 node_type		bit (9) unaligned,
  4     7 	  2 source_id		structure unaligned,
  4     8 	    3 file_number		bit (8),
  4     9 	    3 line_number		bit (14),
  4    10 	    3 statement_number	bit (5),
  4    11 	  2 father		ptr unaligned,
  4    12 	  2 brother		ptr unaligned,
  4    13 	  2 son			ptr unaligned,
  4    14 	  2 declaration		ptr unaligned,
  4    15 	  2 end_declaration		ptr unaligned,
  4    16 	  2 default		ptr unaligned,
  4    17 	  2 end_default		ptr unaligned,
  4    18 	  2 context		ptr unaligned,
  4    19 	  2 prologue		ptr unaligned,
  4    20 	  2 end_prologue		ptr unaligned,
  4    21 	  2 main			ptr unaligned,
  4    22 	  2 end_main		ptr unaligned,
  4    23 	  2 return_values		ptr unaligned,
  4    24 	  2 return_count		ptr unaligned,
  4    25 	  2 plio_ps		ptr unaligned,
  4    26 	  2 plio_fa		ptr unaligned,
  4    27 	  2 plio_ffsb		ptr unaligned,
  4    28 	  2 plio_ssl		ptr unaligned,
  4    29 	  2 plio_fab2		ptr unaligned,
  4    30 	  2 block_type		bit (9) unaligned,
  4    31 	  2 prefix		bit (12) unaligned,
  4    32 	  2 like_attribute		bit (1) unaligned,
  4    33 	  2 no_stack		bit (1) unaligned,
  4    34 	  2 get_data		bit (1) unaligned,
  4    35 	  2 flush_at_call		bit (1) unaligned,
  4    36 	  2 processed		bit (1) unaligned,
  4    37 	  2 text_displayed		bit (1) unaligned,
  4    38 	  2 number		fixed bin (9) unsigned unaligned,
  4    39 	  2 free_temps		dimension (3) ptr,	/* these fields are used by the code generator */
  4    40 	  2 temp_list		ptr,
  4    41 	  2 entry_list		ptr,
  4    42 	  2 o_and_s		ptr,
  4    43 	  2 why_nonquick		aligned,
  4    44 	    3 auto_adjustable_storage bit (1) unaligned,
  4    45 	    3 returns_star_extents	bit (1) unaligned,
  4    46 	    3 stack_extended_by_args	bit (1) unaligned,
  4    47 	    3 invoked_by_format	bit (1) unaligned,
  4    48 	    3 format_statement	bit (1) unaligned,
  4    49 	    3 io_statements		bit (1) unaligned,
  4    50 	    3 assigned_to_entry_var	bit (1) unaligned,
  4    51 	    3 condition_statements	bit (1) unaligned,
  4    52 	    3 no_owner		bit (1) unaligned,
  4    53 	    3 recursive_call	bit (1) unaligned,
  4    54 	    3 options_non_quick	bit (1) unaligned,
  4    55 	    3 options_variable	bit (1) unaligned,
  4    56 	    3 never_referenced	bit (1) unaligned,
  4    57 	    3 pad_nonquick		bit (5) unaligned,
  4    58 	  2 prologue_flag		bit (1) unaligned,
  4    59 	  2 options_main		bit (1) unaligned,
  4    60 	  2 pad			bit (16) unaligned,
  4    61 	  2 number_of_entries	fixed bin (17),
  4    62 	  2 level			fixed bin (17),
  4    63 	  2 last_auto_loc		fixed bin (17),
  4    64 	  2 symbol_block		fixed bin (17),
  4    65 	  2 entry_info		fixed bin (18),
  4    66 	  2 enter			structure unaligned,
  4    67 	    3 start		fixed bin (17),
  4    68 	    3 end			fixed bin (17),
  4    69 	  2 leave			structure unaligned,
  4    70 	    3 start		fixed bin (17),
  4    71 	    3 end			fixed bin (17),
  4    72 	  2 owner			ptr;
  4    73 
  4    74 declare	max_block_number		fixed bin internal static options (constant) initial (511);
  4    75 
  4    76 /* END INCLUDE FILE ... block.incl.pl1 */
       27 
       28 	pl1_stat_$node_uses(7) = pl1_stat_$node_uses(7) + 1;
       29 
       30 	allocate context in(tree_area) set(p);
       31 
       32 	p->context.node_type=context_node;
       33 	string(p->context.bits)="0"b;
       34 	p->context.token=t;			/* this points to the token table entry */
       35 	p->context.next=cblock->block.context;	/* push node onto context chain */
       36 	cblock->block.context=p;		/* . . . . */
       37 
       38 	return(p);
       39 end create_context;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/03/83  1007.2  create_context.pl1                >spec>on>pl128d>create_context.pl1
24           1    07/21/80  1546.3  pl1_tree_areas.incl.pl1           >ldd>include>pl1_tree_areas.incl.pl1
25           2    11/30/78  1227.4  context.incl.pl1                  >ldd>include>context.incl.pl1
26           3    07/21/80  1546.3  nodes.incl.pl1                    >ldd>include>nodes.incl.pl1
27           4    08/13/81  2043.5  block.incl.pl1                    >ldd>include>block.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
bits                      0(09)        based           structure                level 2 packed unaligned dcl 2-3 set ref 33*
block                                  based           structure                level 1 dcl 4-5
cblock                                 parameter       pointer                  dcl 21 ref 16 35 36
context                  10            based           pointer                  level 2 in structure "block" packed unaligned
                                                                                  dcl 4-5 in procedure "create_context" set ref 35
                                                                                  36*
context                                based           structure                level 1 dcl 2-3 in procedure "create_context" set
                                                                                  ref 30
context_node                           constant        bit(9)                   initial dcl 3-5 ref 32
next                      1            based           pointer                  level 2 packed unaligned dcl 2-3 set ref 35*
node_type                              based           bit(9)                   level 2 packed unaligned dcl 2-3 set ref 32*
p                               000100 automatic       pointer                  dcl 21 set ref 30* 32 33 34 35 36 38
pl1_stat_$node_uses             000010 external static fixed bin(17,0)          array dcl 22 set ref 28* 28
pl1_stat_$tree_area_ptr         000012 external static pointer                  dcl 1-7 ref 30
t                                      parameter       pointer                  dcl 21 ref 16 34
token                     2            based           pointer                  level 2 packed unaligned dcl 2-3 set ref 34*
tree_area                              based           area(1024)               dcl 1-4 ref 30

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
array_node                             internal static bit(9)                   initial dcl 3-5
block_node                             internal static bit(9)                   initial dcl 3-5
bound_node                             internal static bit(9)                   initial dcl 3-5
by_name_agg_node                       internal static bit(9)                   initial dcl 3-5
cross_reference_node                   internal static bit(9)                   initial dcl 3-5
default_node                           internal static bit(9)                   initial dcl 3-5
format_value_node                      internal static bit(9)                   initial dcl 3-5
label_array_element_node               internal static bit(9)                   initial dcl 3-5
label_node                             internal static bit(9)                   initial dcl 3-5
list_node                              internal static bit(9)                   initial dcl 3-5
machine_state_node                     internal static bit(9)                   initial dcl 3-5
max_block_number                       internal static fixed bin(17,0)          initial dcl 4-74
node                                   based           structure                level 1 dcl 3-27
operator_node                          internal static bit(9)                   initial dcl 3-5
pl1_stat_$xeq_tree_area_ptr            external static pointer                  dcl 1-7
reference_node                         internal static bit(9)                   initial dcl 3-5
sf_par_node                            internal static bit(9)                   initial dcl 3-5
source_node                            internal static bit(9)                   initial dcl 3-5
statement_node                         internal static bit(9)                   initial dcl 3-5
symbol_node                            internal static bit(9)                   initial dcl 3-5
temporary_node                         internal static bit(9)                   initial dcl 3-5
token_node                             internal static bit(9)                   initial dcl 3-5
xeq_tree_area                          based           area(1024)               dcl 1-5

NAME DECLARED BY EXPLICIT CONTEXT.
create_context                  000005 constant        entry                    external dcl 16

NAME DECLARED BY CONTEXT OR IMPLICATION.
string                                                 builtin function         ref 33

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       110         124      43         120
Length       350      43        14         210      45           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
create_context                       66 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
create_context           000100 p                           create_context

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
return              ext_entry           alloc_based

NO EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pl1_stat_$node_uses           pl1_stat_$tree_area_ptr




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     16 000001        28 000012        30 000014        32 000023        33 000025        34 000027        35 000033
     36 000037        38 000040


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
