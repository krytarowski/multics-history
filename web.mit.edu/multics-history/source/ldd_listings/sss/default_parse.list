	COMPILATION LISTING OF SEGMENT default_parse
	Compiled by: Multics PL/I Compiler, Release 33e, of October 6, 1992
	Compiled at: CGI                             
	Compiled on: 2000-04-18_1149.18_Tue_mdt
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 default_parse: proc(k,b,labels);
       12 
       13 dcl	(b,labels,d,s,last) ptr;
       14 dcl	(k,n) fixed bin(15);
       15 dcl	pl1_stat_$cur_statement ptr ext static;
       16 dcl	pl1_stat_$unwind external label;
       17 dcl	pl1_stat_$check_ansi bit(1) aligned ext static;
       18 dcl	pl1_stat_$root ptr ext static;
       19 
       20 dcl	(string,null,addr) builtin;
  1     1 /* BEGIN INCLUDE FILE parse.incl.pl1 */
  1     2 
  1     3 
  1     4 /****^  HISTORY COMMENTS:
  1     5*  1) change(91-01-09,Blackmore), approve(91-01-09,MCR8234),
  1     6*     audit(91-12-05,Huen), install(92-04-24,MR12.5-1011):
  1     7*     Change entry points for 'lex', 'lex$write_last_line', and
  1     8*     'statement_type', for constant reference resolution fix.
  1     9*                                                   END HISTORY COMMENTS */
  1    10 
  1    11 declare	attribute_parse	entry(ptr,ptr,fixed bin(15),bit(1) aligned);
  1    12 			/* parameter 1:	(input)	block node ptr		*/
  1    13 			/* parameter 2:	(input)	symbol node ptr		*/
  1    14 			/* parameter 3:	(in/out)	token index		*/
  1    15 			/* parameter 4:	(input)   called while doing generic	*/
  1    16 
  1    17 declare	context		entry(ptr,ptr,fixed bin(15));
  1    18 			/* parameter 1:	(input)	usually token node ptr	*/
  1    19 			/* parameter 2:	(input)	block node ptr		*/
  1    20 			/* parameter 3:	(input)	context type		*/
  1    21 
  1    22 declare	data_list_parse	entry(fixed bin(15),ptr,ptr)
  1    23 			returns(bit(1) aligned);
  1    24 			/* parameter 1:	(in/out)	token index		*/
  1    25 			/* parameter 2:	(input)	block node ptr		*/
  1    26 			/* parameter 3:	(output)	data list parse tree ptr	*/
  1    27 			/* return:	(output)	valid parse bit		*/
  1    28 
  1    29 declare	declare_label	entry(ptr,ptr,ptr,bit(3) aligned);
  1    30 			/* parameter 1:	(input)	block node ptr		*/
  1    31 			/* parameter 2:	(input)	statement node ptr	*/
  1    32 			/* parameter 3:	(input)	label list ptr or null	*/
  1    33 			/* parameter 4:	(input)	declare type		*/
  1    34 
  1    35 declare	declare_parse	entry(fixed bin(15),ptr,ptr);
  1    36 			/* parameter 1:	(input)	token index		*/
  1    37 			/* parameter 2:	(input)	block node ptr		*/
  1    38 			/* parameter 3:	(input)	label list ptr or null	*/
  1    39 
  1    40 declare	declare_parse$abort	entry(fixed bin(15),ptr);
  1    41 			/* parameter 1:	(input)	error number		*/
  1    42 			/* parameter 2:	(input)	any node ptr		*/
  1    43 
  1    44 declare	default_parse	entry(fixed bin(15),ptr,ptr);
  1    45 			/* parameter 1:	(input)	token index		*/
  1    46 			/* parameter 2:	(input)	block node ptr		*/
  1    47 			/* parameter 3:	(input)	label list ptr or null	*/
  1    48 
  1    49 declare	descriptor_parse	entry(ptr,ptr,fixed bin(15))
  1    50 			returns(ptr);
  1    51 			/* parameter 1:	(input)	block node ptr		*/
  1    52 			/* parameter 2:	(input)	token node ptr or null	*/
  1    53 			/* parameter 3:	(in/out)	token index		*/
  1    54 			/* return:	(output)	symbol node ptr		*/
  1    55 
  1    56 declare	do_parse		entry(fixed bin(15),ptr,bit(12) aligned,ptr,ptr,
  1    57 			bit(1) aligned,bit(1) aligned,bit(1) aligned);
  1    58 			/* parameter 1:	(in/out)	token index		*/
  1    59 			/* parameter 2:	(input)	label list ptr or null	*/
  1    60 			/* parameter 3:	(input)	conditions		*/
  1    61 			/* parameter 4:	(input)	father block node ptr	*/
  1    62 			/* parameter 5:	(output)	end ptr			*/
  1    63 			/* parameter 6:	(input)	entry bit			*/
  1    64 			/* parameter 7:	(input)	return bit		*/
  1    65 			/* parameter 8:	(input)	iterative do bit		*/
  1    66 
  1    67 declare	evaluate		entry(bit(9) aligned,ptr,ptr) returns(ptr);
  1    68 			/* parameter 1:	(input)	opcode		*/
  1    69 			/* parameter 2:	(input)	left operand (token ptr)	*/
  1    70 			/* parameter 3:	(input)	right operand (token ptr)	*/
  1    71 			/* return:	(output)	ptr to result node	*/
  1    72 
  1    73 declare	expression_parse	entry(fixed bin(15),ptr)
  1    74 			returns(ptr);
  1    75 			/* parameter 1:	(in/out)	token index		*/
  1    76 			/* parameter 2:	(input)	block node ptr		*/
  1    77 			/* return:	(output)	expression parse tree ptr	*/
  1    78 
  1    79 declare	format_list_parse	entry(fixed bin(15),ptr,ptr,ptr)
  1    80 			returns(bit(1) aligned);
  1    81 			/* parameter 1:	(in/out)	token index		*/
  1    82 			/* parameter 2:	(input)	block node ptr		*/
  1    83 			/* parameter 3:	(input)	statement node ptr		*/
  1    84 			/* parameter 4:	(output)	format list parse tree ptr	*/
  1    85 			/* return:	(output)	valid parse bit		*/
  1    86 
  1    87 declare	if_parse		entry(fixed bin(15),ptr,bit(12) aligned,ptr,ptr,
  1    88 			bit(1) aligned);
  1    89 			/* parameter 1:	(in/out)	token index		*/
  1    90 			/* parameter 2:	(input)	label list ptr or null	*/
  1    91 			/* parameter 3:	(input)	conditions		*/
  1    92 			/* parameter 4:	(input)	father block node ptr	*/
  1    93 			/* parameter 5:	(input)	end ptr			*/
  1    94 			/* parameter 6:	(output)	valid parse bit		*/
  1    95 
  1    96 declare	io_statement_parse	entry(fixed bin(15),ptr,bit(12) aligned,ptr,ptr,
  1    97 			bit(1) aligned,bit(9) aligned);
  1    98 			/* parameter 1:	(in/out)	token index		*/
  1    99 			/* parameter 2:	(input)	label list ptr or null	*/
  1   100 			/* parameter 3:	(input)	conditions		*/
  1   101 			/* parameter 4:	(input)	father block node ptr	*/
  1   102 			/* parameter 5:	(output)	end ptr			*/
  1   103 			/* parameter 6:	(output)	valid parse bit		*/
  1   104 			/* parameter 7:	(output)	statement type		*/
  1   105 
  1   106 declare	lex		entry(ptr);
  1   107 			/* parameter 1:	(input)	block node ptr		*/
  1   108 
  1   109 declare	lex$write_last_line	entry(ptr);
  1   110 			/* parameter 1:	(input)	block node ptr		*/
  1   111 
  1   112 declare	lex$initialize_lex	entry(ptr,fixed bin(15));
  1   113 			/* parameter 1:	(input)	ptr to source		*/
  1   114 			/* parameter 2:	(input)	length of source (chars)	*/
  1   115 
  1   116 declare	on_parse		entry(fixed bin(15),ptr,bit(12) aligned,ptr,ptr);
  1   117 			/* parameter 1:	(in/out)	token index		*/
  1   118 			/* parameter 2:	(input)	label list ptr or null	*/
  1   119 			/* parameter 3:	(input)	conditions		*/
  1   120 			/* parameter 4:	(input)	father block node ptr	*/
  1   121 			/* parameter 5:	(output)	end ptr (set to null)	*/
  1   122 
  1   123 declare	on_parse$revert	entry(fixed bin(15),ptr,ptr);
  1   124 			/* parameter 1:	(input)	token index	*/
  1   125 			/* parameter 2:	(input)	statement node ptr	*/
  1   126 			/* parameter 3:	(input)	block node ptr	*/
  1   127 
  1   128 declare	parse		entry(ptr,ptr,fixed bin(15));
  1   129 			/* parameter 1:	(output)	root ptr		*/
  1   130 			/* parameter 2	(input)	source ptr		*/
  1   131 			/* parameter 3:	(input)	source length		*/
  1   132 
  1   133 declare	procedure_parse	entry(fixed bin(15),ptr,bit(12) aligned,ptr,ptr,
  1   134 			bit(9) aligned,bit(1) aligned);
  1   135 			/* parameter 1:	(in/out)	token index		*/
  1   136 			/* parameter 2:	(input)	label list ptr or null	*/
  1   137 			/* parameter 3:	(input)	conditions		*/
  1   138 			/* parameter 4:	(input)	father block node ptr	*/
  1   139 			/* parameter 5:	(output)	end ptr		*/
  1   140 			/* parameter 6:	(input)	block type		*/
  1   141 			/* parameter 7:	(input)	no return statement bit	*/
  1   142 
  1   143 declare	process_entry	entry(fixed bin(15),bit(9) aligned,ptr,ptr,bit(12) aligned);
  1   144 			/* parameter 1:	(in/out)	token index		*/
  1   145 			/* parameter 2:	(input)	statement type		*/
  1   146 			/* parameter 3:	(input)	block node ptr		*/
  1   147 			/* parameter 4:	(input)	label list ptr or null	*/
  1   148 			/* parameter 5:	(input)	conditions		*/
  1   149 
  1   150 declare	reference_parse	entry(fixed bin(15),ptr)
  1   151 			returns(ptr);
  1   152 			/* parameter 1:	(in/out)	token index		*/
  1   153 			/* parameter 2:	(input)	block node ptr		*/
  1   154 			/* return:	(output)	reference parse tree ptr	*/
  1   155 
  1   156 declare	reserve$rename_parse entry(fixed bin(15)) returns(bit(1) aligned);
  1   157 			/* parameter 1:	(in/out)	token index	 */
  1   158 			/* return:	(output)	success bit	 */
  1   159 
  1   160 declare	statement_parse	entry(fixed bin(15),ptr,bit(12) aligned,ptr,fixed bin(15));
  1   161 			/* parameter 1:	(in/out)	token index		*/
  1   162 			/* parameter 2:	(input)	label list ptr or null	*/
  1   163 			/* parameter 3:	(input)	conditions		*/
  1   164 			/* parameter 4:	(input)	block node ptr		*/
  1   165 			/* parameter 5:	(input)	statement type		*/
  1   166 
  1   167 declare	statement_type	entry(ptr,fixed bin(15),ptr,bit(12) aligned)
  1   168 			returns(fixed bin(15));
  1   169 			/* parameter 1:	(input)	block node ptr		*/
  1   170 			/* parameter 2:	(in/out)	token index		*/
  1   171 			/* parameter 3:	(output)	label list ptr or null	*/
  1   172 			/* parameter 4:	(output)	conditions		*/
  1   173 			/* return:	(output)	statement type		*/
  1   174 
  2     1 /****^  *********************************************************
  2     2*        *                                                       *
  2     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  2     4*        *                                                       *
  2     5*        ********************************************************* */
  2     6 
  2     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  2     8 
  2     9 
  2    10 /****^  HISTORY COMMENTS:
  2    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  2    12*     install(89-07-31,MR12.3-1066):	
  2    13*     Removed the obsolete parameter source_line from the dcl of error_().
  2    14*                                                   END HISTORY COMMENTS */
  2    15 
  2    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  2    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  2    18* */
  2    19 
  2    20 declare	adjust_count	entry(pointer);
  2    21 			/* parameter 1:	(input)	any node pointer		*/
  2    22 
  2    23 declare	bindec		entry(fixed bin(31)) reducible
  2    24 			returns(character(12) aligned);
  2    25 			/* parameter 1:	(input)	bin value			*/
  2    26 			/* return:	(output)	character value with blanks	*/
  2    27 
  2    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  2    29 			returns(character(12) aligned varying);
  2    30 			/* parameter 1:	(input)	binary value		*/
  2    31 			/* return:	(output)	char value without blanks	*/
  2    32 
  2    33 declare	binoct		entry(fixed bin(31)) reducible
  2    34 			returns(char(12) aligned);
  2    35 			/* parameter 1:	(input)	binary value		*/
  2    36 			/* return:	(output)	char value with blanks	*/
  2    37 
  2    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  2    39 			returns(char(12) aligned);
  2    40 			/* parameter 1:	(input)	binary value		*/
  2    41 			/* return:	(output)	right-aligned char value	*/
  2    42 
  2    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  2    44 			returns(char(12) varying aligned);
  2    45 			/* parameter 1:	(input)	binary value		*/
  2    46 			/* returns:	(output)	char value without blanks	*/
  2    47 
  2    48 declare	compare_expression	entry(pointer,pointer) reducible
  2    49 			returns(bit(1) aligned);
  2    50 			/* parameter 1:	(input)	any node pointer		*/
  2    51 			/* parameter 2:	(input)	any node pointer		*/
  2    52 			/* return:	(output)	compare bit		*/
  2    53 
  2    54 declare	constant_length	entry (pointer, fixed bin (71))
  2    55 			returns (bit (1) aligned);
  2    56 			/* parameter 1:	(input)	reference node pointer	*/
  2    57 			/* parameter 2:	(input)	value of constant length	*/
  2    58 			/* return:	(output)	"1"b if constant length	*/
  2    59 
  2    60 declare	convert		entry(pointer,bit(36) aligned)
  2    61 			returns(pointer);
  2    62 			/* parameter 1:	(input)	any node pointer		*/
  2    63 			/* parameter 2:	(input)	target type		*/
  2    64 			/* return:	(output)	target value tree pointer	*/
  2    65 
  2    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  2    67 			returns(pointer);
  2    68 			/* parameter 1:	(input)	any node pointer		*/
  2    69 			/* parameter 2:	(input)	target type		*/
  2    70 			/* return:	(output)	target value tree pointer	*/
  2    71 
  2    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  2    73 			returns(pointer);
  2    74 			/* parameter 1:	(input)	any node pointer		*/
  2    75 			/* parameter 2:	(input)	target type		*/
  2    76 			/* return:	(output)	target value tree pointer	*/
  2    77 
  2    78 declare	convert$validate	entry(pointer,pointer);
  2    79 			/* parameter 1:	(input)	source value tree pointer	*/
  2    80 			/* parameter 2:	(input)	target reference node pointer	*/
  2    81 
  2    82 declare	convert$to_target_fb entry(pointer,pointer)
  2    83 			returns(pointer);
  2    84 			/* parameter 1:	(input)	source value tree pointer	*/
  2    85 			/* parameter 2:	(input)	target reference node pointer	*/
  2    86 			/* return:	(output)	target value tree pointer	*/
  2    87 
  2    88 declare	convert$to_target	entry(pointer,pointer)
  2    89 			returns(pointer);
  2    90 			/* parameter 1:	(input)	source value tree pointer	*/
  2    91 			/* parameter 2:	(input)	target reference node pointer	*/
  2    92 			/* return:	(output)	target value tree pointer	*/
  2    93 
  2    94 declare	copy_expression	entry(pointer unaligned)
  2    95 			returns(pointer);
  2    96 			/* parameter 1:	(input)	any node pointer		*/
  2    97 			/* return:	(output)	any node pointer		*/
  2    98 
  2    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  2   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  2   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  2   102 
  2   103 declare	copy_unique_expression entry(pointer)
  2   104 			returns(pointer);
  2   105 			/* parameter 1:	(input)	any node pointer		*/
  2   106 			/* return:	(output)	any node pointer		*/
  2   107 
  2   108 declare	create_array	entry()
  2   109 			returns(pointer);
  2   110 			/* return:	(output)	array node pointer		*/
  2   111 
  2   112 declare	create_block	entry(bit(9) aligned,pointer)
  2   113 			returns(pointer);
  2   114 			/* parameter 1:	(input)	block type		*/
  2   115 			/* parameter 2:	(input)	father block node pointer	*/
  2   116 			/* return:	(output)	block node pointer		*/
  2   117 
  2   118 declare	create_bound	entry()
  2   119 			returns(pointer);
  2   120 			/* return:	(output)	bound node pointer		*/
  2   121 
  2   122 declare	create_context	entry(pointer,pointer)
  2   123 			returns(pointer);
  2   124 			/* parameter 1:	(input)	block node pointer		*/
  2   125 			/* parameter 2:	(input)	token pointer		*/
  2   126 			/* return:	(output)	context node pointer	*/
  2   127 
  2   128 declare	create_cross_reference entry()
  2   129 			returns(pointer);
  2   130 			/* return:	(output)	cross reference node pointer	*/
  2   131 
  2   132 declare	create_default	entry
  2   133 			returns(pointer);
  2   134 			/* return:	(output)	default node pointer	*/
  2   135 
  2   136 declare	create_identifier	entry()
  2   137 			returns(pointer);
  2   138 			/* return:	(output)	token node pointer		*/
  2   139 
  2   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  2   141 			returns(pointer);
  2   142 			/* parameter 1:	(input)	block node pointer		*/
  2   143 			/* parameter 2:	(input)	token node pointer		*/
  2   144 			/* parameter 3:	(input)	declare type		*/
  2   145 			/* return:	(output)	label node pointer		*/
  2   146 
  2   147 declare	create_list	entry(fixed bin(15))
  2   148 			returns(pointer);
  2   149 			/* parameter 1:	(input)	number of list elements	*/
  2   150 			/* return:	(output)	list node pointer		*/
  2   151 
  2   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  2   153 			returns(pointer);
  2   154 			/* parameter 1:	(input)	operator type		*/
  2   155 			/* parameter 2:	(input)	number of operands		*/
  2   156 			/* return:	(output)	operator node pointer	*/
  2   157 
  2   158 declare	create_reference	entry(pointer)
  2   159 			returns(pointer);
  2   160 			/* parameter 1:	(input)	symbol node pointer		*/
  2   161 			/* return:	(output)	reference node pointer	*/
  2   162 
  2   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   164 			returns(pointer);
  2   165 			/* parameter 1:	(input)	statement type		*/
  2   166 			/* parameter 2:	(input)	block node pointer		*/
  2   167 			/* parameter 3:	(input)	label node pointer		*/
  2   168 			/* parameter 4:	(input)	conditions		*/
  2   169 			/* return:	(output)	statement node pointer	*/
  2   170 
  2   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  2   172 			returns(pointer);
  2   173 			/* parameter 1:	(input)	statement type		*/
  2   174 			/* parameter 2:	(input)	block node pointer		*/
  2   175 			/* parameter 3:	(input)	label node pointer		*/
  2   176 			/* parameter 4:	(input)	conditions		*/
  2   177 			/* return:	(output)	statement node pointer	*/
  2   178 
  2   179 declare	create_storage	entry(fixed bin(15))
  2   180 			returns(pointer);
  2   181 			/* parameter 1:	(input)	number of words		*/
  2   182 			/* return:	(output)	storage block pointer	*/
  2   183 
  2   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  2   185 			returns(pointer);
  2   186 			/* parameter 1:	(input)	block node pointer		*/
  2   187 			/* parameter 2:	(input)	token node pointer		*/
  2   188 			/* parameter 3:	(input)	declare type		*/
  2   189 			/* return:	(output)	symbol node pointer		*/
  2   190 
  2   191 declare	create_token	entry (character (*), bit (9) aligned)
  2   192 			returns (ptr);
  2   193 			/* parameter 1:	(input)	token string		*/
  2   194 			/* parameter 2:	(input)	token type		*/
  2   195 			/* return:	(output)	token node ptr		*/
  2   196 
  2   197 declare	create_token$init_hash_table entry ();
  2   198 
  2   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  2   200 			returns (ptr);
  2   201 			/* parameter 1:	(input)	token string		*/
  2   202 			/* parameter 2:	(input)	token type		*/
  2   203 			/* parameter 3:	(input)	protected flag		*/
  2   204 			/* return:	(output)	token node ptr		*/
  2   205 
  2   206 declare	decbin		entry(character(*) aligned) reducible
  2   207 			returns(fixed bin(31));
  2   208 			/* parameter 1:	(input)	decimal character string	*/
  2   209 			/* return:	(output)	binary value		*/
  2   210 
  2   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  2   212 			returns(pointer);
  2   213 			/* parameter 1:	(input)	value			*/
  2   214 			/* parameter 2:	(input)	type			*/
  2   215 			/* parameter 3:	(input)	size			*/
  2   216 			/* parameter 4:	(input)	scale			*/
  2   217 			/* return:	(output)	reference node pointer	*/
  2   218 
  2   219 declare	declare_constant$bit entry(bit(*) aligned)
  2   220 			returns(pointer);
  2   221 			/* parameter 1:	(input)	bit			*/
  2   222 			/* return:	(output)	reference node pointer	*/
  2   223 
  2   224 declare	declare_constant$char entry(character(*) aligned)
  2   225 			returns(pointer);
  2   226 			/* parameter 1:	(input)	character			*/
  2   227 			/* return:	(output)	reference node pointer	*/
  2   228 
  2   229 declare	declare_constant$desc entry(bit(*) aligned)
  2   230 			returns(pointer);
  2   231 			/* parameter 1:	(input)	descriptor bit value	*/
  2   232 			/* return:	(output)	reference node pointer	*/
  2   233 
  2   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  2   235 			returns(pointer);
  2   236 			/* parameter 1:	(input)	integer			*/
  2   237 			/* return:	(output)	reference node pointer	*/
  2   238 
  2   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   240 			returns(pointer);
  2   241 			/* parameter 1:	(input)	block node pointer		*/
  2   242 			/* parameter 2:	(input)	statement node pointer	*/
  2   243 			/* parameter 3:	(input)	symbol node pointer		*/
  2   244 			/* parameter 4:	(input)	loc pointer		*/
  2   245 			/* parameter 5:	(input)	array descriptor bit
  2   246*						cross_section bit	*/
  2   247 			/* return:	(output)	reference node pointer	*/
  2   248 
  2   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   250 			returns(pointer);
  2   251 			/* parameter 1:	(input)	block node pointer	*/
  2   252 			/* parameter 2:	(input)	statement node pointer 	*/
  2   253 			/* parameter 3:	(input)	symbol node pointer	*/
  2   254 			/* parameter 4:	(input)	loc pointer	*/
  2   255 			/* parameter 5:	(input)	array descriptor bit
  2   256*						cross_section bit	*/
  2   257 			/* return:	(output)	reference node pointer	*/
  2   258 
  2   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  2   260 			returns(pointer);
  2   261 			/* parameter 1:	(input)	block node pointer		*/
  2   262 			/* parameter 2:	(input)	statement node pointer	*/
  2   263 			/* parameter 3:	(input)	symbol node pointer		*/
  2   264 			/* parameter 4:	(input)	loc pointer		*/
  2   265 			/* parameter 5:	(input)	array descriptor bit
  2   266*						cross_section bit	*/
  2   267 			/* return:	(output)	reference node pointer	*/
  2   268 
  2   269 declare	declare_integer	entry(pointer)
  2   270 			returns(pointer);
  2   271 			/* parameter 1:	(input)	block node pointer		*/
  2   272 			/* return:	(output)	reference node pointer 	*/
  2   273 
  2   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  2   275 			/* parameter 1:	(input)	picture string		*/
  2   276 			/* parameter 2:	(input)	symbol node pointer		*/
  2   277 			/* parameter 3:	(output)	error code, if any		*/
  2   278 
  2   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  2   280 			returns(pointer);
  2   281 			/* parameter 1:	(input)	picture string		*/
  2   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  2   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  2   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  2   285 			/* return:	(output)	reference node pointer	*/
  2   286 
  2   287 declare	declare_pointer	entry(pointer)
  2   288 			returns(pointer);
  2   289 			/* parameter 1:	(input)	block node pointer		*/
  2   290 			/* return:	(output)	reference node pointer	*/
  2   291 
  2   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  2   293 			returns(pointer);
  2   294 			/* parameter 1:	(input)	type			*/
  2   295 			/* parameter 2:	(input)	precision			*/
  2   296 			/* parameter 3:	(input)	scale			*/
  2   297 			/* parameter 4:	(input)	length			*/
  2   298 			/* return:	(output)	reference node pointer	*/
  2   299 
  2   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  2   301 			returns(char(120) varying);
  2   302 			/* parameter 1:	(input)	node pointer		*/
  2   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   304 			/* return:	(output)	source line id		*/
  2   305 
  2   306 declare	decode_source_id	entry(
  3     1 			1 structure unaligned,
  3     2 			  2 /* file_number */	bit(8),
  3     3 			  2 /* line_number */	bit(14),
  3     4 			  2 /* stmt_number */	bit(5),
  2   307 
  2   308 			bit(1) aligned)
  2   309 			returns(char(120) varying);
  2   310 			/* parameter 1:	(input)	source id			*/
  2   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  2   312 			/* return:	(output)	source line id		*/
  2   313 
  2   314 declare	error		entry(fixed bin(15),pointer,pointer);
  2   315 			/* parameter 1:	(input)	error number		*/
  2   316 			/* parameter 2:	(input)	statement node pointer or null*/
  2   317 			/* parameter 3:	(input)	token node pointer 		*/
  2   318 
  2   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  2   320 			/* parameter 1:	(input)	error number		*/
  2   321 			/* parameter 2:	(input)	statement node pointer or null*/
  2   322 			/* parameter 3:	(input)	token node pointer 		*/
  2   323 
  2   324 declare	error_		entry(fixed bin(15),
  4     1 			1 structure unaligned,
  4     2 			  2 /* file_number */	bit(8),
  4     3 			  2 /* line_number */	bit(14),
  4     4 			  2 /* stmt_number */	bit(5),
  2   325 
  2   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  2   327 			/* parameter 1:	(input)	error number		*/
  2   328 			/* parameter 2:	(input)	statement id		*/
  2   329 			/* parameter 3:	(input)	any node pointer		*/
  2   330 			/* parameter 4:	(input)	source segment		*/
  2   331 			/* parameter 5:	(input)	source starting character	*/
  2   332 			/* parameter 6:	(input)	source length		*/
  2   333 
  2   334 declare	error_$no_text	entry(fixed bin(15),
  5     1 			1 structure unaligned,
  5     2 			  2 /* file_number */	bit(8),
  5     3 			  2 /* line_number */	bit(14),
  5     4 			  2 /* stmt_number */	bit(5),
  2   335 
  2   336 			pointer);
  2   337 			/* parameter 1:	(input)	error number		*/
  2   338 			/* parameter 2:	(input)	statement id		*/
  2   339 			/* parameter 3:	(input)	any node pointer		*/
  2   340 
  2   341 declare	error_$initialize_error entry();
  2   342 
  2   343 declare	error_$finish	entry();
  2   344 
  2   345 declare	free_node		entry(pointer);
  2   346 			/* parameter 1:	any node pointer			*/
  2   347 
  2   348 declare	get_array_size	entry(pointer,fixed bin(3));
  2   349 			/* parameter 1:	(input)	symbol node pointer		*/
  2   350 			/* parameter 2:	(input)	units			*/
  2   351 
  2   352 declare	get_size		entry(pointer);
  2   353 			/* parameter 1:	(input)	symbol node pointer		*/
  2   354 
  2   355 declare	merge_attributes	external entry(pointer,pointer)
  2   356 			returns(bit(1) aligned);
  2   357 			/* parameter 1:	(input)	target symbol node pointer */
  2   358 			/* parameter 2:	(input)	source symbol node pointer */
  2   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  2   360 
  2   361 declare	optimizer		entry(pointer);
  2   362 			/* parameter 1:	(input)	root pointer		*/
  2   363 
  2   364 declare	parse_error	entry(fixed bin(15),pointer);
  2   365 			/* parameter 1:	(input)	error number		*/
  2   366 			/* parameter 2:	(input)	any node pointer		*/
  2   367 
  2   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  2   369 			/* parameter 1:	(input)	error number		*/
  2   370 			/* parameter 2:	(input)	any node pointer		*/
  2   371 
  2   372 declare	pl1_error_print$write_out
  2   373 			entry(fixed bin(15),
  6     1 			1 structure unaligned,
  6     2 			  2 /* file_number */	bit(8),
  6     3 			  2 /* line_number */	bit(14),
  6     4 			  2 /* stmt_number */	bit(5),
  2   374 
  2   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  2   376 			/* parameter 1:	(input)	error number		*/
  2   377 			/* parameter 2:	(input)	statement identification	*/
  2   378 			/* parameter 3:	(input)	any node pointer		*/
  2   379 			/* parameter 4:	(input)	source segment		*/
  2   380 			/* parameter 5:	(input)	source character index	*/
  2   381 			/* parameter 6:	(input)	source length		*/
  2   382 			/* parameter 7:	(input)	source line		*/
  2   383 
  2   384 declare	pl1_error_print$listing_segment
  2   385 			entry(fixed bin(15),
  7     1 			1 structure unaligned,
  7     2 			  2 /* file_number */	bit(8),
  7     3 			  2 /* line_number */	bit(14),
  7     4 			  2 /* stmt_number */	bit(5),
  2   386 
  2   387 			pointer);
  2   388 			/* parameter 1:	(input)	error number		*/
  2   389 			/* parameter 2:	(input)	statement identification	*/
  2   390 			/* parameter 3:	(input)	token node pointer		*/
  2   391 
  2   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  2   393 			/* parameter 1:	(input)	string			*/
  2   394 
  2   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  2   396 			/* parameter 1:	(input)	string			*/
  2   397 
  2   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  2   399 			/* parameter 1:	(input)	string			*/
  2   400 			/* parameter 2:	(input)	string length or 0		*/
  2   401 
  2   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  2   403 			/* parameter 1:	(input)	string			*/
  2   404 			/* parameter 2:	(input)	string length or 0		*/
  2   405 
  2   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  2   407 			/* parameter 1:	(input)	string pointer		*/
  2   408 			/* parameter 2:	(input)	string size		*/
  2   409 
  2   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  2   411 			/* parameter 1:	(input)	string pointer		*/
  2   412 			/* parameter 2:	(input)	string length or 0		*/
  2   413 
  2   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  2   415 			/* parameter 1:	(input)	string			*/
  2   416 			/* parameter 2:	(input)	length			*/
  2   417 
  2   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  2   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  2   420 			/* parameter 2:	(input)	line number		*/
  2   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  2   422 			/* parameter 4:	(input)	number of chars to copy	*/
  2   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  2   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  2   425 
  2   426 declare	refer_extent	entry(pointer,pointer);
  2   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  2   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  2   429 
  2   430 declare	reserve$clear	entry()
  2   431 			returns(pointer);
  2   432 			/* return:	(output)	pointer			*/
  2   433 
  2   434 declare	reserve$declare_lib	entry(fixed bin(15))
  2   435 			returns(pointer);
  2   436 			/* parameter 1:	(input)	builtin function number	*/
  2   437 			/* return:	(output)	pointer			*/
  2   438 
  2   439 declare	reserve$read_lib	entry(fixed bin(15))
  2   440 			returns(pointer);
  2   441 			/* parameter 1:	(input)	builtin function number	*/
  2   442 			/* return:	(output)	pointer			*/
  2   443 
  2   444 declare	semantic_translator	entry();
  2   445 
  2   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  2   447 			/* parameter 1:	(input)	error number		*/
  2   448 			/* parameter 2:	(input)	any node pointer		*/
  2   449 
  2   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  2   451 			/* parameter 1:	(input)	error number		*/
  2   452 			/* parameter 2:	(input)	any node pointer		*/
  2   453 
  2   454 declare	share_expression	entry(ptr)
  2   455 			returns(ptr);
  2   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  2   457 			/* return:	(output)	tree pointer or null	*/
  2   458 
  2   459 declare	token_to_binary	entry(ptr) reducible
  2   460 			returns(fixed bin(31));
  2   461 			/* parameter 1:	(input)	token node pointer		*/
  2   462 			/* return:	(output)	converted binary value	*/
  2   463 
  2   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
  1   175 
  1   176 /* END INCLUDE FILE parse.incl.pl1 */
       21 
  8     1 
  8     2 dcl	1 default			based aligned,
  8     3 	2 node_type		bit(9) unaligned,
  8     4 	2 source_id		structure unaligned,
  8     5 	  3 file_number		bit(8),
  8     6 	  3 line_number		bit(14),
  8     7 	  3 statement_number	bit(5),
  8     8 	2 next			ptr unaligned,
  8     9 	2 predicate		ptr unaligned,
  8    10 	2 symbol			ptr unaligned,
  8    11 	2 system			bit(1) unaligned,
  8    12 	2 error			bit(1) unaligned,
  8    13 	2 no_defaults		bit(1) unaligned,
  8    14 	2 reserved		bit(29) unaligned;
       22 
  9     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
  9     2 
  9     3 dcl	1 symbol			based aligned,
  9     4 	2 node_type		bit(9) unal,
  9     5 	2 source_id		structure unal,
  9     6 	  3 file_number		bit(8),
  9     7 	  3 line_number		bit(14),
  9     8 	  3 statement_number	bit(5),
  9     9 	2 location		fixed(18) unal unsigned,
  9    10 	2 allocated		bit(1) unal,
  9    11 	2 dcl_type		bit(3) unal,
  9    12 	2 reserved		bit(6) unal,
  9    13 	2 pix			unal,
  9    14 	  3 pic_fixed		bit(1) unal,
  9    15 	  3 pic_float		bit(1) unal,
  9    16 	  3 pic_char		bit(1) unal,
  9    17 	  3 pic_scale		fixed(7) unal,
  9    18 	  3 pic_size		fixed(7) unal,
  9    19 	2 level			fixed(8) unal,
  9    20 	2 boundary		fixed(3) unal,
  9    21 	2 size_units		fixed(3) unal,
  9    22 	2 scale			fixed(7) unal,
  9    23 	2 runtime			bit(18) unal,
  9    24 	2 runtime_offset		bit(18) unal,
  9    25 	2 block_node		ptr unal,
  9    26 	2 token			ptr unal,
  9    27 	2 next			ptr unal,
  9    28 	2 multi_use		ptr unal,
  9    29 	2 cross_references		ptr unal,
  9    30 	2 initial			ptr unal,
  9    31 	2 array			ptr unal,
  9    32 	2 descriptor		ptr unal,
  9    33 	2 equivalence		ptr unal,
  9    34 	2 reference		ptr unal,
  9    35 	2 general			ptr unal,
  9    36 	2 father			ptr unal,
  9    37 	2 brother			ptr unal,
  9    38 	2 son			ptr unal,
  9    39 	2 word_size		ptr unal,
  9    40 	2 bit_size		ptr unal,
  9    41 	2 dcl_size		ptr unal,
  9    42 	2 symtab_size		ptr unal,
  9    43 	2 c_word_size		fixed(24),
  9    44 	2 c_bit_size		fixed(24),
  9    45 	2 c_dcl_size		fixed(24),
  9    46 
  9    47 	2 attributes		structure aligned,
  9    48 	  3 data_type		structure unal,
  9    49 	    4 structure		bit(1) ,
  9    50 	    4 fixed		bit(1),
  9    51 	    4 float		bit(1),
  9    52 	    4 bit			bit(1),
  9    53 	    4 char		bit(1),
  9    54 	    4 ptr			bit(1),
  9    55 	    4 offset		bit(1),
  9    56 	    4 area		bit(1),
  9    57 	    4 label		bit(1),
  9    58 	    4 entry		bit(1),
  9    59 	    4 file		bit(1),
  9    60 	    4 arg_descriptor	bit(1),
  9    61 	    4 storage_block		bit(1),
  9    62 	    4 explicit_packed	bit(1), /* options(packed) */
  9    63 	    4 condition		bit(1),
  9    64 	    4 format		bit(1),
  9    65 	    4 builtin		bit(1),
  9    66 	    4 generic		bit(1),
  9    67 	    4 picture		bit(1),
  9    68 
  9    69 	  3 misc_attributes		structure unal,
  9    70 	    4 dimensioned		bit(1),
  9    71 	    4 initialed		bit(1),
  9    72 	    4 aligned		bit(1),
  9    73 	    4 unaligned		bit(1),
  9    74 	    4 signed		bit(1),
  9    75 	    4 unsigned		bit(1),
  9    76 	    4 precision		bit(1),
  9    77 	    4 varying		bit(1),
  9    78 	    4 local		bit(1),
  9    79 	    4 decimal		bit(1),
  9    80 	    4 binary		bit(1),
  9    81 	    4 real		bit(1),
  9    82 	    4 complex		bit(1),
  9    83 	    4 variable		bit(1),
  9    84 	    4 reducible		bit(1),
  9    85 	    4 irreducible		bit(1),
  9    86 	    4 returns		bit(1),
  9    87 	    4 position		bit(1),
  9    88 	    4 internal		bit(1),
  9    89 	    4 external		bit(1),
  9    90 	    4 like		bit(1),
  9    91 	    4 member		bit(1),
  9    92 	    4 non_varying		bit(1),
  9    93 	    4 options		bit(1),
  9    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
  9    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
  9    96 
  9    97 	  3 storage_class		structure unal,
  9    98 	    4 auto		bit(1),
  9    99 	    4 based		bit(1),
  9   100 	    4 static		bit(1),
  9   101 	    4 controlled		bit(1),
  9   102 	    4 defined		bit(1),
  9   103 	    4 parameter		bit(1),
  9   104 	    4 param_desc		bit(1),
  9   105 	    4 constant		bit(1),
  9   106 	    4 temporary		bit(1),
  9   107 	    4 return_value		bit(1),
  9   108 
  9   109 	  3 file_attributes		structure unal,
  9   110 	    4 print		bit(1),
  9   111 	    4 input		bit(1),
  9   112 	    4 output		bit(1),
  9   113 	    4 update		bit(1),
  9   114 	    4 stream		bit(1),
  9   115 	    4 reserved_1		bit(1),
  9   116 	    4 record		bit(1),
  9   117 	    4 sequential		bit(1),
  9   118 	    4 direct		bit(1),
  9   119 	    4 interactive		bit(1),		/* env(interactive) */
  9   120 	    4 reserved_2		bit(1),
  9   121 	    4 reserved_3		bit(1),
  9   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
  9   123 	    4 keyed		bit(1),
  9   124 	    4 reserved_4		bit(1),
  9   125 	    4 environment		bit(1),
  9   126 
  9   127 	  3 compiler_developed	structure unal,
  9   128 	    4 aliasable		bit(1),
  9   129 	    4 packed		bit(1),
  9   130 	    4 passed_as_arg		bit(1),
  9   131 	    4 allocate		bit(1),
  9   132 	    4 set			bit(1),
  9   133 	    4 exp_extents		bit(1),
  9   134 	    4 refer_extents		bit(1),
  9   135 	    4 star_extents		bit(1),
  9   136 	    4 isub		bit(1),
  9   137 	    4 put_in_symtab		bit(1),
  9   138 	    4 contiguous		bit(1),
  9   139 	    4 put_data		bit(1),
  9   140 	    4 overlayed		bit(1),
  9   141 	    4 error		bit(1),
  9   142 	    4 symtab_processed	bit(1),
  9   143 	    4 overlayed_by_builtin	bit(1),
  9   144 	    4 defaulted		bit(1),
  9   145 	    4 connected		bit(1);
  9   146 
  9   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
       23 
 10     1 /* BEGIN INCLUDE FILE ... block.incl.pl1 */
 10     2 /* Modified 22 Ocober 1980 by M. N. Davidoff to increase max block.number to 511 */
 10     3 /* format: style3,idind30 */
 10     4 
 10     5 declare	1 block			aligned based,
 10     6 	  2 node_type		bit (9) unaligned,
 10     7 	  2 source_id		structure unaligned,
 10     8 	    3 file_number		bit (8),
 10     9 	    3 line_number		bit (14),
 10    10 	    3 statement_number	bit (5),
 10    11 	  2 father		ptr unaligned,
 10    12 	  2 brother		ptr unaligned,
 10    13 	  2 son			ptr unaligned,
 10    14 	  2 declaration		ptr unaligned,
 10    15 	  2 end_declaration		ptr unaligned,
 10    16 	  2 default		ptr unaligned,
 10    17 	  2 end_default		ptr unaligned,
 10    18 	  2 context		ptr unaligned,
 10    19 	  2 prologue		ptr unaligned,
 10    20 	  2 end_prologue		ptr unaligned,
 10    21 	  2 main			ptr unaligned,
 10    22 	  2 end_main		ptr unaligned,
 10    23 	  2 return_values		ptr unaligned,
 10    24 	  2 return_count		ptr unaligned,
 10    25 	  2 plio_ps		ptr unaligned,
 10    26 	  2 plio_fa		ptr unaligned,
 10    27 	  2 plio_ffsb		ptr unaligned,
 10    28 	  2 plio_ssl		ptr unaligned,
 10    29 	  2 plio_fab2		ptr unaligned,
 10    30 	  2 block_type		bit (9) unaligned,
 10    31 	  2 prefix		bit (12) unaligned,
 10    32 	  2 like_attribute		bit (1) unaligned,
 10    33 	  2 no_stack		bit (1) unaligned,
 10    34 	  2 get_data		bit (1) unaligned,
 10    35 	  2 flush_at_call		bit (1) unaligned,
 10    36 	  2 processed		bit (1) unaligned,
 10    37 	  2 text_displayed		bit (1) unaligned,
 10    38 	  2 number		fixed bin (9) unsigned unaligned,
 10    39 	  2 free_temps		dimension (3) ptr,	/* these fields are used by the code generator */
 10    40 	  2 temp_list		ptr,
 10    41 	  2 entry_list		ptr,
 10    42 	  2 o_and_s		ptr,
 10    43 	  2 why_nonquick		aligned,
 10    44 	    3 auto_adjustable_storage bit (1) unaligned,
 10    45 	    3 returns_star_extents	bit (1) unaligned,
 10    46 	    3 stack_extended_by_args	bit (1) unaligned,
 10    47 	    3 invoked_by_format	bit (1) unaligned,
 10    48 	    3 format_statement	bit (1) unaligned,
 10    49 	    3 io_statements		bit (1) unaligned,
 10    50 	    3 assigned_to_entry_var	bit (1) unaligned,
 10    51 	    3 condition_statements	bit (1) unaligned,
 10    52 	    3 no_owner		bit (1) unaligned,
 10    53 	    3 recursive_call	bit (1) unaligned,
 10    54 	    3 options_non_quick	bit (1) unaligned,
 10    55 	    3 options_variable	bit (1) unaligned,
 10    56 	    3 never_referenced	bit (1) unaligned,
 10    57 	    3 pad_nonquick		bit (5) unaligned,
 10    58 	  2 prologue_flag		bit (1) unaligned,
 10    59 	  2 options_main		bit (1) unaligned,
 10    60 	  2 pad			bit (16) unaligned,
 10    61 	  2 number_of_entries	fixed bin (17),
 10    62 	  2 level			fixed bin (17),
 10    63 	  2 last_auto_loc		fixed bin (17),
 10    64 	  2 symbol_block		fixed bin (17),
 10    65 	  2 entry_info		fixed bin (18),
 10    66 	  2 enter			structure unaligned,
 10    67 	    3 start		fixed bin (17),
 10    68 	    3 end			fixed bin (17),
 10    69 	  2 leave			structure unaligned,
 10    70 	    3 start		fixed bin (17),
 10    71 	    3 end			fixed bin (17),
 10    72 	  2 owner			ptr;
 10    73 
 10    74 declare	max_block_number		fixed bin internal static options (constant) initial (511);
 10    75 
 10    76 /* END INCLUDE FILE ... block.incl.pl1 */
       24 
 11     1 dcl	pl1_stat_$token_list_ptr ptr external static;		/* pointer to token list	*/
 11     2 dcl	token_list(token_list_length) ptr based(token_list_pointer);
 11     3 dcl	token_list_pointer ptr initial(pl1_stat_$token_list_ptr);	/* for efficiency only */
 11     4 dcl	token_list_length fixed(15) internal static initial(3000) options(constant);
 11     5 
 11     6 dcl	1 pl1_stat_$statement_id	external static,
 11     7 	2 file_number		bit(8),
 11     8 	2 line_number		bit(14),
 11     9 	2 statement_number		bit(5);
 11    10 
 11    11 dcl	1 t_table 		based(token_list(k)) aligned,
 11    12 	2 node_type		bit(9) unaligned,
 11    13 	2 type			bit(9) unaligned,
 11    14 	2 loc			bit(18) unaligned,
 11    15 	2 declaration		ptr unaligned,
 11    16 	2 next			ptr unaligned,
 11    17 	2 size			fixed(9),
 11    18 	2 string			char(n refer(t_table.size));
       25 
 12     1 /* BEGIN INCLUDE FILE ... token_types.incl.pl1 */
 12     2 
 12     3 dcl (	no_token		initial("000000000"b),	/*	token types		*/
 12     4 	identifier	initial("100000000"b),
 12     5 	isub		initial("010000000"b),
 12     6 	plus		initial("001000001"b),
 12     7 	minus		initial("001000010"b),
 12     8 	asterisk		initial("001000011"b),
 12     9 	slash		initial("001000100"b),
 12    10 	expon		initial("001000101"b),
 12    11 	not		initial("001000110"b),
 12    12 	and		initial("001000111"b),
 12    13 	or		initial("001001000"b),
 12    14 	cat		initial("001001001"b),
 12    15 	eq		initial("001001010"b),
 12    16 	ne		initial("001001011"b),
 12    17 	lt		initial("001001100"b),
 12    18 	gt		initial("001001101"b),
 12    19 	le		initial("001001110"b),
 12    20 	ge		initial("001001111"b),
 12    21 	ngt		initial("001010000"b),
 12    22 	nlt		initial("001010001"b),
 12    23 	assignment	initial("001010010"b),
 12    24 	colon		initial("001010011"b),
 12    25 	semi_colon	initial("001010100"b),
 12    26 	comma		initial("001010101"b),
 12    27 	period		initial("001010110"b),
 12    28 	arrow		initial("001010111"b),
 12    29 	left_parn		initial("001011000"b),
 12    30 	right_parn	initial("001011001"b),
 12    31 	percent		initial("001011100"b),
 12    32 	bit_string	initial("000100001"b),
 12    33 	char_string	initial("000100010"b),
 12    34 	bin_integer	initial("000110001"b),
 12    35 	dec_integer	initial("000110011"b),
 12    36 	fixed_bin		initial("000110000"b),
 12    37 	fixed_dec		initial("000110010"b),
 12    38 	float_bin		initial("000110100"b),
 12    39 	float_dec		initial("000110110"b),
 12    40 	i_bin_integer	initial("000111001"b),
 12    41 	i_dec_integer	initial("000111011"b),
 12    42 	i_fixed_bin	initial("000111000"b),
 12    43 	i_fixed_dec	initial("000111010"b),
 12    44 	i_float_bin	initial("000111100"b),
 12    45 	i_float_dec	initial("000111110"b)) bit (9) aligned internal static options (constant);
 12    46 
 12    47 dcl (	is_identifier		initial ("100000000"b),	/*	token type masks		*/
 12    48 	is_isub			initial ("010000000"b),
 12    49 	is_delimiter		initial ("001000000"b),
 12    50 	is_constant		initial ("000100000"b),
 12    51 	is_arith_constant		initial ("000010000"b),	/* N.B. not really a mask...s/b "000110000"b */
 12    52 	is_arithmetic_constant	initial ("000110000"b),
 12    53 	is_imaginary_constant	initial ("000111000"b),
 12    54 	is_float_constant		initial ("000110100"b),
 12    55 	is_decimal_constant		initial ("000110010"b),
 12    56 	is_integral_constant 	initial ("000110001"b)
 12    57 	) bit(9) internal static aligned options(constant);
 12    58 
 12    59 /* END INCLUDE FILE ... token_types.incl.pl1 */
       26 
 13     1 	/* statement types */
 13     2 
 13     3 dcl (	unknown_statement		initial("000000000"b),
 13     4 	allocate_statement		initial("000000001"b),
 13     5 	assignment_statement	initial("000000010"b),
 13     6 	begin_statement		initial("000000011"b),
 13     7 	call_statement		initial("000000100"b),
 13     8 	close_statement		initial("000000101"b),
 13     9 	declare_statement		initial("000000110"b),
 13    10 	lock_statement		initial("000000111"b),
 13    11 	delete_statement		initial("000001000"b),
 13    12 	display_statement		initial("000001001"b),
 13    13 	do_statement		initial("000001010"b),
 13    14 	else_clause		initial("000001011"b),
 13    15 	end_statement		initial("000001100"b),
 13    16 	entry_statement		initial("000001101"b),
 13    17 	exit_statement		initial("000001110"b),
 13    18 	format_statement		initial("000001111"b),
 13    19 	free_statement		initial("000010000"b),
 13    20 	get_statement		initial("000010001"b),
 13    21 	goto_statement		initial("000010010"b),
 13    22 	if_statement		initial("000010011"b),
 13    23 	locate_statement		initial("000010100"b),
 13    24 	null_statement		initial("000010101"b),
 13    25 	on_statement		initial("000010110"b),
 13    26 	open_statement		initial("000010111"b),
 13    27 	procedure_statement 	initial("000011000"b),
 13    28 	put_statement		initial("000011001"b),
 13    29 	read_statement		initial("000011010"b),
 13    30 	return_statement		initial("000011011"b),
 13    31 	revert_statement		initial("000011100"b),
 13    32 	rewrite_statement		initial("000011101"b),
 13    33 	signal_statement		initial("000011110"b),
 13    34 	stop_statement		initial("000011111"b),
 13    35 	system_on_unit		initial("000100000"b),
 13    36 	unlock_statement		initial("000100001"b),
 13    37 	wait_statement		initial("000100010"b),
 13    38 	write_statement		initial("000100011"b),
 13    39 	default_statement		initial("000100100"b),
 13    40 	continue_statement		initial("000100101"b)) bit(9) internal static aligned options(constant);
       27 
 14     1 /* BEGIN INCLUDE FILE ... declare_type.incl.pl1 */
 14     2 
 14     3 /* Modified: 25 Apr 1979 by PCK to implement 4-bit decimal */
 14     4 
 14     5 dcl  (	by_declare	initial("001"b),
 14     6 	by_explicit_context initial("010"b),
 14     7 	by_context	initial("011"b),
 14     8 	by_implication	initial("100"b),
 14     9 	by_compiler	initial("101"b)) int static bit(3) aligned options(constant);
 14    10 
 14    11 /* END INCLUDE FILE ... declare_type.incl.pl1 */
       28 
       29 
       30 	if labels ^= null
       31 		then do;
       32 			pl1_stat_$cur_statement,d = create_statement(null_statement,b,labels,(b->block.prefix));
       33 			call declare_label(b,d,labels,by_explicit_context);
       34 		     end;
       35 
       36 	k = k+1;
       37 	d = create_default();
       38 	string(d->default.source_id) = string(pl1_stat_$statement_id);
       39 	if t_table.type = left_parn
       40 		then do;
       41 			k=k+1;
       42 			d -> default.predicate = expression_parse(k,b);
       43 			if d -> default.predicate = null then go to fail;
       44 			if t_table.type ^= right_parn  then go to fail;
       45 		     end;
       46 		else do;
       47 			if t_table.type = identifier
       48 				then do;
       49 					if t_table.string = "system"
       50 						then d->default.system = "1"b;
       51 						else if t_table.string = "none"
       52 							then d->default.no_defaults = "1"b;
       53 							else go to fail;
       54 					k=k+1;
       55 					if t_table.type = semi_colon then go to done;
       56 				     end;
       57 			go to fail;
       58 		     end;
       59 	k=k+1;
       60 	if t_table.string = "error"
       61 		then do;
       62 			d->default.error = "1"b;
       63 			k=k+1;
       64 			if t_table.type = semi_colon
       65 				then go to done;
       66 				else go to fail;
       67 		     end;
       68 
       69 /* loop to parse attribute sets */
       70 
       71 	pl1_stat_$unwind = check_end;
       72 	last = null;
       73 	k=k-1;
       74 
       75 	do while("1"b);
       76 
       77 	s = create_symbol(null,null,by_compiler);
       78 	call attribute_parse(b,s,k,"0"b);
       79 	if last = null
       80 		then d->default.symbol = s;
       81 		else last->symbol.next = s;
       82 	last = s;
       83 
       84 check_end:
       85 	if t_table.type = semi_colon then go to done;
       86 	if t_table.type ^= comma then go to fail;
       87 	end;
       88 
       89 done:	/* must now link valid default node into block default chain in order */
       90 	if b->block.end_default ^= null
       91 		then b->block.end_default->default.next = d;
       92 		else b->block.default = d;
       93 	b->block.end_default = d;
       94 
       95 	if pl1_stat_$check_ansi
       96 	then if b ^= pl1_stat_$root -> block.son
       97 	     then call parse_error(350,null);
       98 
       99 	return;
      100 
      101 fail:
      102 	call free_node(d);
      103 	call parse_error(48,null);
      104 end default_parse;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/18/00  1149.1  default_parse.pl1                 >udd>sm>ds>w>ml>default_parse.pl1
21           1    07/31/99  1543.8  parse.incl.pl1                    >ldd>incl>parse.incl.pl1
1-175        2    08/01/89  1339.9  language_utility.incl.pl1         >ldd>incl>language_utility.incl.pl1
2-307        3    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-325        4    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-335        5    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-374        6    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
2-386        7    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
22           8    05/06/74  1842.2  default.incl.pl1                  >ldd>incl>default.incl.pl1
23           9    12/07/83  1801.7  symbol.incl.pl1                   >ldd>incl>symbol.incl.pl1
24          10    08/13/81  2143.5  block.incl.pl1                    >ldd>incl>block.incl.pl1
25          11    09/14/77  1805.7  token_list.incl.pl1               >ldd>incl>token_list.incl.pl1
26          12    11/30/78  1327.4  token_types.incl.pl1              >ldd>incl>token_types.incl.pl1
27          13    05/03/76  1420.4  statement_types.incl.pl1          >ldd>incl>statement_types.incl.pl1
28          14    10/25/79  1745.8  declare_type.incl.pl1             >ldd>incl>declare_type.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
attribute_parse                 000020 constant        entry                    external dcl 1-11 ref 78
b                                      parameter       pointer                  dcl 13 set ref 11 32* 32 33* 42* 78* 89 89 92 93 95
block                                  based           structure                level 1 dcl 10-5
by_compiler                     000000 constant        bit(3)                   initial dcl 14-5 set ref 77*
by_explicit_context             000001 constant        bit(3)                   initial dcl 14-5 set ref 33*
comma                                  constant        bit(9)                   initial dcl 12-3 ref 86
create_default                  000026 constant        entry                    external dcl 2-132 ref 37
create_statement                000030 constant        entry                    external dcl 2-163 ref 32
create_symbol                   000032 constant        entry                    external dcl 2-184 ref 77
d                               000100 automatic       pointer                  dcl 13 set ref 32* 33* 37* 38 42 43 49 51 62 79 89
                                                                                  92 93 101*
declare_label                   000022 constant        entry                    external dcl 1-29 ref 33
default                                based           structure                level 1 dcl 8-2 in procedure "default_parse"
default                   6            based           pointer                  level 2 in structure "block" packed packed unaligned
                                                                                  dcl 10-5 in procedure "default_parse" set ref 92*
end_default               7            based           pointer                  level 2 packed packed unaligned dcl 10-5 set ref 89
                                                                                  89 93*
error                     4(01)        based           bit(1)                   level 2 packed packed unaligned dcl 8-2 set ref 62*
expression_parse                000024 constant        entry                    external dcl 1-73 ref 42
free_node                       000034 constant        entry                    external dcl 2-345 ref 101
identifier                             constant        bit(9)                   initial dcl 12-3 ref 47
k                                      parameter       fixed bin(15,0)          dcl 14 set ref 11 36* 36 39 41* 41 42* 44 47 49 51
                                                                                  54* 54 55 59* 59 60 63* 63 64 73* 73 78* 84 86
labels                                 parameter       pointer                  dcl 13 set ref 11 30 32* 33*
last                            000104 automatic       pointer                  dcl 13 set ref 72* 79 81 82*
left_parn                              constant        bit(9)                   initial dcl 12-3 ref 39
next                      6            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 9-3 in procedure "default_parse" set
                                                                                  ref 81*
next                      1            based           pointer                  level 2 in structure "default" packed packed
                                                                                  unaligned dcl 8-2 in procedure "default_parse" set
                                                                                  ref 89*
no_defaults               4(02)        based           bit(1)                   level 2 packed packed unaligned dcl 8-2 set ref 51*
null                                                   builtin function         dcl 20 ref 30 43 72 77 77 77 77 79 89 95 95 103 103
null_statement                  000002 constant        bit(9)                   initial dcl 13-3 set ref 32*
parse_error                     000036 constant        entry                    external dcl 2-364 ref 95 103
pl1_stat_$check_ansi            000014 external static bit(1)                   dcl 17 ref 95
pl1_stat_$cur_statement         000010 external static pointer                  dcl 15 set ref 32*
pl1_stat_$root                  000016 external static pointer                  dcl 18 ref 95
pl1_stat_$statement_id          000042 external static structure                level 1 packed packed unaligned dcl 11-6 ref 38
pl1_stat_$token_list_ptr        000040 external static pointer                  dcl 11-1 ref 11-3
pl1_stat_$unwind                000012 external static label variable           dcl 16 set ref 71*
predicate                 2            based           pointer                  level 2 packed packed unaligned dcl 8-2 set ref 42*
                                                                                  43
prefix                   24(09)        based           bit(12)                  level 2 packed packed unaligned dcl 10-5 ref 32
right_parn                             constant        bit(9)                   initial dcl 12-3 ref 44
s                               000102 automatic       pointer                  dcl 13 set ref 77* 78* 79 81 82
semi_colon                             constant        bit(9)                   initial dcl 12-3 ref 55 64 84
size                      3            based           fixed bin(9,0)           level 2 dcl 11-11 ref 49 51 60
son                       3            based           pointer                  level 2 packed packed unaligned dcl 10-5 ref 95
source_id                 0(09)        based           structure                level 2 packed packed unaligned dcl 8-2 set ref 38*
string                                                 builtin function         dcl 20 in procedure "default_parse" set ref 38* 38
string                    4            based           char                     level 2 in structure "t_table" dcl 11-11
                                                                                  in procedure "default_parse" ref 49 51 60
symbol                    3            based           pointer                  level 2 in structure "default" packed packed
                                                                                  unaligned dcl 8-2 in procedure "default_parse" set
                                                                                  ref 79*
symbol                                 based           structure                level 1 dcl 9-3 in procedure "default_parse"
system                    4            based           bit(1)                   level 2 packed packed unaligned dcl 8-2 set ref 49*
t_table                                based           structure                level 1 dcl 11-11
token_list                             based           pointer                  array dcl 11-2 ref 39 44 47 49 51 55 60 64 84 86
token_list_pointer              000106 automatic       pointer                  initial dcl 11-3 set ref 39 44 47 49 51 55 60 64 84
                                                                                  86 11-3*
type                      0(09)        based           bit(9)                   level 2 packed packed unaligned dcl 11-11 ref 39 44
                                                                                  47 55 64 84 86

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
addr                                                   builtin function         dcl 20
adjust_count                    000000 constant        entry                    external dcl 2-20
allocate_statement                     internal static bit(9)                   initial dcl 13-3
and                                    internal static bit(9)                   initial dcl 12-3
arrow                                  internal static bit(9)                   initial dcl 12-3
assignment                             internal static bit(9)                   initial dcl 12-3
assignment_statement                   internal static bit(9)                   initial dcl 13-3
asterisk                               internal static bit(9)                   initial dcl 12-3
begin_statement                        internal static bit(9)                   initial dcl 13-3
bin_integer                            internal static bit(9)                   initial dcl 12-3
binary_to_octal_string          000000 constant        entry                    external dcl 2-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 2-43
bindec                          000000 constant        entry                    external dcl 2-23
bindec$vs                       000000 constant        entry                    external dcl 2-28
binoct                          000000 constant        entry                    external dcl 2-33
bit_string                             internal static bit(9)                   initial dcl 12-3
by_context                             internal static bit(3)                   initial dcl 14-5
by_declare                             internal static bit(3)                   initial dcl 14-5
by_implication                         internal static bit(3)                   initial dcl 14-5
call_statement                         internal static bit(9)                   initial dcl 13-3
cat                                    internal static bit(9)                   initial dcl 12-3
char_string                            internal static bit(9)                   initial dcl 12-3
close_statement                        internal static bit(9)                   initial dcl 13-3
colon                                  internal static bit(9)                   initial dcl 12-3
compare_expression              000000 constant        entry                    external dcl 2-48
constant_length                 000000 constant        entry                    external dcl 2-54
context                         000000 constant        entry                    external dcl 1-17
continue_statement                     internal static bit(9)                   initial dcl 13-3
convert                         000000 constant        entry                    external dcl 2-60
convert$from_builtin            000000 constant        entry                    external dcl 2-72
convert$to_integer              000000 constant        entry                    external dcl 2-66
convert$to_target               000000 constant        entry                    external dcl 2-88
convert$to_target_fb            000000 constant        entry                    external dcl 2-82
convert$validate                000000 constant        entry                    external dcl 2-78
copy_expression                 000000 constant        entry                    external dcl 2-94
copy_expression$copy_sons       000000 constant        entry                    external dcl 2-99
copy_unique_expression          000000 constant        entry                    external dcl 2-103
create_array                    000000 constant        entry                    external dcl 2-108
create_block                    000000 constant        entry                    external dcl 2-112
create_bound                    000000 constant        entry                    external dcl 2-118
create_context                  000000 constant        entry                    external dcl 2-122
create_cross_reference          000000 constant        entry                    external dcl 2-128
create_identifier               000000 constant        entry                    external dcl 2-136
create_label                    000000 constant        entry                    external dcl 2-140
create_list                     000000 constant        entry                    external dcl 2-147
create_operator                 000000 constant        entry                    external dcl 2-152
create_reference                000000 constant        entry                    external dcl 2-158
create_statement$prologue       000000 constant        entry                    external dcl 2-171
create_storage                  000000 constant        entry                    external dcl 2-179
create_token                    000000 constant        entry                    external dcl 2-191
create_token$init_hash_table    000000 constant        entry                    external dcl 2-197
create_token$protected          000000 constant        entry                    external dcl 2-199
data_list_parse                 000000 constant        entry                    external dcl 1-22
dec_integer                            internal static bit(9)                   initial dcl 12-3
decbin                          000000 constant        entry                    external dcl 2-206
declare_constant                000000 constant        entry                    external dcl 2-211
declare_constant$bit            000000 constant        entry                    external dcl 2-219
declare_constant$char           000000 constant        entry                    external dcl 2-224
declare_constant$desc           000000 constant        entry                    external dcl 2-229
declare_constant$integer        000000 constant        entry                    external dcl 2-234
declare_descriptor              000000 constant        entry                    external dcl 2-239
declare_descriptor$ctl          000000 constant        entry                    external dcl 2-249
declare_descriptor$param        000000 constant        entry                    external dcl 2-259
declare_integer                 000000 constant        entry                    external dcl 2-269
declare_parse                   000000 constant        entry                    external dcl 1-35
declare_parse$abort             000000 constant        entry                    external dcl 1-40
declare_picture                 000000 constant        entry                    external dcl 2-274
declare_picture_temp            000000 constant        entry                    external dcl 2-279
declare_pointer                 000000 constant        entry                    external dcl 2-287
declare_statement                      internal static bit(9)                   initial dcl 13-3
declare_temporary               000000 constant        entry                    external dcl 2-292
decode_node_id                  000000 constant        entry                    external dcl 2-300
decode_source_id                000000 constant        entry                    external dcl 2-306
default_parse                   000000 constant        entry                    external dcl 1-44
default_statement                      internal static bit(9)                   initial dcl 13-3
delete_statement                       internal static bit(9)                   initial dcl 13-3
descriptor_parse                000000 constant        entry                    external dcl 1-49
display_statement                      internal static bit(9)                   initial dcl 13-3
do_parse                        000000 constant        entry                    external dcl 1-56
do_statement                           internal static bit(9)                   initial dcl 13-3
else_clause                            internal static bit(9)                   initial dcl 13-3
end_statement                          internal static bit(9)                   initial dcl 13-3
entry_statement                        internal static bit(9)                   initial dcl 13-3
eq                                     internal static bit(9)                   initial dcl 12-3
error                           000000 constant        entry                    external dcl 2-314
error$omit_text                 000000 constant        entry                    external dcl 2-319
error_                          000000 constant        entry                    external dcl 2-324
error_$finish                   000000 constant        entry                    external dcl 2-343
error_$initialize_error         000000 constant        entry                    external dcl 2-341
error_$no_text                  000000 constant        entry                    external dcl 2-334
evaluate                        000000 constant        entry                    external dcl 1-67
exit_statement                         internal static bit(9)                   initial dcl 13-3
expon                                  internal static bit(9)                   initial dcl 12-3
fixed_bin                              internal static bit(9)                   initial dcl 12-3
fixed_dec                              internal static bit(9)                   initial dcl 12-3
float_bin                              internal static bit(9)                   initial dcl 12-3
float_dec                              internal static bit(9)                   initial dcl 12-3
format_list_parse               000000 constant        entry                    external dcl 1-79
format_statement                       internal static bit(9)                   initial dcl 13-3
free_statement                         internal static bit(9)                   initial dcl 13-3
ge                                     internal static bit(9)                   initial dcl 12-3
get_array_size                  000000 constant        entry                    external dcl 2-348
get_size                        000000 constant        entry                    external dcl 2-352
get_statement                          internal static bit(9)                   initial dcl 13-3
goto_statement                         internal static bit(9)                   initial dcl 13-3
gt                                     internal static bit(9)                   initial dcl 12-3
i_bin_integer                          internal static bit(9)                   initial dcl 12-3
i_dec_integer                          internal static bit(9)                   initial dcl 12-3
i_fixed_bin                            internal static bit(9)                   initial dcl 12-3
i_fixed_dec                            internal static bit(9)                   initial dcl 12-3
i_float_bin                            internal static bit(9)                   initial dcl 12-3
i_float_dec                            internal static bit(9)                   initial dcl 12-3
if_parse                        000000 constant        entry                    external dcl 1-87
if_statement                           internal static bit(9)                   initial dcl 13-3
io_statement_parse              000000 constant        entry                    external dcl 1-96
is_arith_constant                      internal static bit(9)                   initial dcl 12-47
is_arithmetic_constant                 internal static bit(9)                   initial dcl 12-47
is_constant                            internal static bit(9)                   initial dcl 12-47
is_decimal_constant                    internal static bit(9)                   initial dcl 12-47
is_delimiter                           internal static bit(9)                   initial dcl 12-47
is_float_constant                      internal static bit(9)                   initial dcl 12-47
is_identifier                          internal static bit(9)                   initial dcl 12-47
is_imaginary_constant                  internal static bit(9)                   initial dcl 12-47
is_integral_constant                   internal static bit(9)                   initial dcl 12-47
is_isub                                internal static bit(9)                   initial dcl 12-47
isub                                   internal static bit(9)                   initial dcl 12-3
le                                     internal static bit(9)                   initial dcl 12-3
lex                             000000 constant        entry                    external dcl 1-106
lex$initialize_lex              000000 constant        entry                    external dcl 1-112
lex$write_last_line             000000 constant        entry                    external dcl 1-109
locate_statement                       internal static bit(9)                   initial dcl 13-3
lock_statement                         internal static bit(9)                   initial dcl 13-3
lt                                     internal static bit(9)                   initial dcl 12-3
max_block_number                       internal static fixed bin(17,0)          initial dcl 10-74
merge_attributes                000000 constant        entry                    external dcl 2-355
minus                                  internal static bit(9)                   initial dcl 12-3
n                                      automatic       fixed bin(15,0)          dcl 14
ne                                     internal static bit(9)                   initial dcl 12-3
ngt                                    internal static bit(9)                   initial dcl 12-3
nlt                                    internal static bit(9)                   initial dcl 12-3
no_token                               internal static bit(9)                   initial dcl 12-3
not                                    internal static bit(9)                   initial dcl 12-3
on_parse                        000000 constant        entry                    external dcl 1-116
on_parse$revert                 000000 constant        entry                    external dcl 1-123
on_statement                           internal static bit(9)                   initial dcl 13-3
open_statement                         internal static bit(9)                   initial dcl 13-3
optimizer                       000000 constant        entry                    external dcl 2-361
or                                     internal static bit(9)                   initial dcl 12-3
parse                           000000 constant        entry                    external dcl 1-128
parse_error$no_text             000000 constant        entry                    external dcl 2-368
percent                                internal static bit(9)                   initial dcl 12-3
period                                 internal static bit(9)                   initial dcl 12-3
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 2-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 2-372
pl1_print$for_lex               000000 constant        entry                    external dcl 2-418
pl1_print$non_varying           000000 constant        entry                    external dcl 2-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 2-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 2-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 2-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 2-414
pl1_print$varying               000000 constant        entry                    external dcl 2-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 2-395
plus                                   internal static bit(9)                   initial dcl 12-3
procedure_parse                 000000 constant        entry                    external dcl 1-133
procedure_statement                    internal static bit(9)                   initial dcl 13-3
process_entry                   000000 constant        entry                    external dcl 1-143
put_statement                          internal static bit(9)                   initial dcl 13-3
read_statement                         internal static bit(9)                   initial dcl 13-3
refer_extent                    000000 constant        entry                    external dcl 2-426
reference_parse                 000000 constant        entry                    external dcl 1-150
reserve$clear                   000000 constant        entry                    external dcl 2-430
reserve$declare_lib             000000 constant        entry                    external dcl 2-434
reserve$read_lib                000000 constant        entry                    external dcl 2-439
reserve$rename_parse            000000 constant        entry                    external dcl 1-156
return_statement                       internal static bit(9)                   initial dcl 13-3
revert_statement                       internal static bit(9)                   initial dcl 13-3
rewrite_statement                      internal static bit(9)                   initial dcl 13-3
semantic_translator             000000 constant        entry                    external dcl 2-444
semantic_translator$abort       000000 constant        entry                    external dcl 2-446
semantic_translator$error       000000 constant        entry                    external dcl 2-450
share_expression                000000 constant        entry                    external dcl 2-454
signal_statement                       internal static bit(9)                   initial dcl 13-3
slash                                  internal static bit(9)                   initial dcl 12-3
statement_parse                 000000 constant        entry                    external dcl 1-160
statement_type                  000000 constant        entry                    external dcl 1-167
stop_statement                         internal static bit(9)                   initial dcl 13-3
system_on_unit                         internal static bit(9)                   initial dcl 13-3
token_list_length                      internal static fixed bin(15,0)          initial dcl 11-4
token_to_binary                 000000 constant        entry                    external dcl 2-459
unknown_statement                      internal static bit(9)                   initial dcl 13-3
unlock_statement                       internal static bit(9)                   initial dcl 13-3
wait_statement                         internal static bit(9)                   initial dcl 13-3
write_statement                        internal static bit(9)                   initial dcl 13-3

NAMES DECLARED BY EXPLICIT CONTEXT.
check_end                       000344 constant        label                    dcl 84 ref 71
default_parse                   000026 constant        entry                    external dcl 11
done                            000361 constant        label                    dcl 89 ref 55 64 84
fail                            000425 constant        label                    dcl 101 ref 43 44 51 57 66 86

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       640         704     453         650
Length      1350     453        44         430     165           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
default_parse                        94 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
default_parse            000100 d                           default_parse
                         000102 s                           default_parse
                         000104 last                        default_parse
                         000106 token_list_pointer          default_parse

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
unpk_to_pk          call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
attribute_parse               create_default                create_statement              create_symbol
declare_label                 expression_parse              free_node                     parse_error

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pl1_stat_$check_ansi          pl1_stat_$cur_statement       pl1_stat_$root                pl1_stat_$statement_id
pl1_stat_$token_list_ptr      pl1_stat_$unwind




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000022   11    3 000033        30 000036        32 000043        33 000073        36 000110        37 000112
     38 000121        39 000126        41 000141        42 000142        43 000157        44 000162        45 000173
     47 000174        49 000176        51 000211        54 000220        55 000221        57 000230        59 000231
     60 000232        62 000243        63 000246        64 000247        66 000256        71 000257        72 000264
     73 000266        77 000270        78 000310        79 000330        81 000340        82 000343        84 000344
     86 000356        87 000360        89 000361        92 000373        93 000375        95 000377        99 000424
    101 000425       103 000434       104 000451


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
