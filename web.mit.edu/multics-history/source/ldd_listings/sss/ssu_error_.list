	COMPILATION LISTING OF SEGMENT ssu_error_
	Compiled by: Multics PL/I Compiler, Release 31a, of October 12, 1988
	Compiled at: Honeywell Bull, Phoenix AZ, SysM
	Compiled on: 10/24/88  1532.8 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 
        7 
        8 /* Standard procedures for printing error messages for subsystems: ssu_$print_message, ssu_$abort_line, ssu_$abort_system;
        9*   for the abort_line and abort_subsystem entries, the appropriate non-local transfers are made */
       10 
       11 /* Created:  3 May 1980 by W. Olin Sibert from subsystem_listen_ */
       12 /* Modified: 14 February 1982 by G. Palter to support standalone invocations */
       13 /* Modified: June 1982 by G. Palter to reflect reorganization of SCI */
       14 /* Modified: 6 November 1984 by G. Palter to use ssu_$get_subsystem_and_request_name and to correct the order of arguments
       15*   in the call to assign_ (subsystem_utilities error #0020) */
       16 
       17 /* format: style4,delnl,insnl,ifthenstmt,ifthen */
       18 
       19 
       20 ssu_error_:
       21      procedure ();
       22 
       23 	return;					/* not an entrypoint */
       24 
       25 
       26 dcl  function fixed binary;
       27 
       28 dcl  (arg_list_ptr, arg_ptr) pointer;
       29 dcl  arg_count fixed binary;
       30 
       31 dcl  arg_type fixed binary;
       32 dcl  arg_packed bit (1) aligned;
       33 dcl  arg_ndims fixed binary;
       34 dcl  arg_size fixed binary;
       35 dcl  arg_scale fixed binary;
       36 
       37 dcl  based_pointer pointer aligned based;
       38 dcl  based_fb35 fixed binary (35) aligned based;
       39 
       40 dcl  error_code fixed binary (35);
       41 dcl  error_message char (100) aligned;
       42 dcl  (from_size, to_size) fixed bin (35);
       43 
       44 dcl  caller_name character (72) varying;
       45 
       46 dcl  output_message character (2048);
       47 dcl  abort_label label variable;
       48 
       49 dcl  error_table_$active_function fixed binary (35) external;
       50 dcl  error_table_$not_act_fnc fixed binary (35) external;
       51 dcl  ssu_et_$not_af_request fixed binary (35) external;
       52 dcl  ssu_et_$not_command_request fixed binary (35) external;
       53 
       54 dcl  iox_$error_output pointer external;
       55 dcl  ssu_$null_label label variable external;
       56 
       57 dcl  active_fnc_err_ entry () options (variable);
       58 dcl  assign_ entry (pointer, fixed binary, fixed binary (35), pointer, fixed binary, fixed binary (35));
       59 dcl  convert_status_code_ entry (fixed binary (35), character (8) aligned, character (100) aligned);
       60 dcl  com_err_ entry () options (variable);
       61 dcl  cu_$arg_count entry (fixed binary);
       62 dcl  cu_$arg_ptr entry (fixed binary, pointer, fixed binary (21), fixed binary (35));
       63 dcl  cu_$arg_list_ptr entry (pointer);
       64 dcl  cu_$cl entry (bit (1) aligned);
       65 dcl  decode_descriptor_
       66 	entry (pointer, fixed binary, fixed binary, bit (1) aligned, fixed binary, fixed binary, fixed binary);
       67 dcl  ioa_$general_rs
       68 	entry (pointer, fixed binary, fixed binary, character (*), fixed binary, bit (1) aligned, bit (1) aligned);
       69 dcl  ioa_$ioa_switch entry () options (variable);
       70 dcl  ssu_$get_subsystem_and_request_name entry (pointer) returns (character (72) varying);
       71 dcl  ssu_$print_message entry () options (variable);
       72 
       73 dcl  PRINT_MESSAGE fixed binary static options (constant) initial (1);
       74 dcl  ABORT_LINE fixed binary static options (constant) initial (2);
       75 dcl  ABORT_SUBSYSTEM fixed binary static options (constant) initial (3);
       76 
       77 dcl  (addr, binary, null, rtrim, substr, unspec) builtin;
       78 
       79 /**/
       80 
       81 /* Print an error message and continue execution */
       82 
       83 print_message:
       84      entry () options (variable);
       85 
       86 	function = PRINT_MESSAGE;
       87 	go to COMMON;
       88 
       89 
       90 /* Print an error message and then abort execution of the current request line (if any) */
       91 
       92 abort_line:
       93      entry () options (variable);
       94 
       95 	function = ABORT_LINE;
       96 	go to COMMON;
       97 
       98 
       99 /* Print an error message and then abort execution of the subsystem */
      100 
      101 abort_subsystem:
      102      entry () options (variable);
      103 
      104 	function = ABORT_SUBSYSTEM;
      105 	go to COMMON;
      106 
      107 
      108 /* Insure that the first argument is supplied and is an sci_ptr: if only that argument is present, print no message but
      109*   perform any appropriate non-local transfers dependent on the entry invoked */
      110 
      111 COMMON:
      112 	call cu_$arg_count (arg_count);
      113 
      114 	if arg_count = 0 then			/* there must be arguments */
      115 	     call ssu_check_sci (null ());
      116 
      117 	call cu_$arg_list_ptr (arg_list_ptr);
      118 
      119 	call cu_$arg_ptr (1, arg_ptr, (0), (0));
      120 
      121 	call decode_descriptor_ (arg_list_ptr, 1, arg_type, arg_packed, arg_ndims, arg_size, arg_scale);
      122 
      123 	if (arg_type ^= pointer_dtype) | (arg_packed ^= "0"b) | (arg_ndims ^= 0) then call ssu_check_sci (null ());
      124 						/* not a pointer */
      125 
      126 	sci_ptr = arg_ptr -> based_pointer;		/* got it */
      127 
      128 	call ssu_check_sci (sci_ptr);			/* validate it */
      129 
      130 	if arg_count = 1 then go to EXIT_AFTER_PRINTING;	/* no message to print: abort the line or subsystem */
      131 
      132 
      133 /* Pick up the error code argument */
      134 
      135 	call cu_$arg_ptr (2, arg_ptr, (0), (0));
      136 	call decode_descriptor_ (arg_list_ptr, 2, arg_type, arg_packed, arg_ndims, arg_size, arg_scale);
      137 
      138 	if (arg_type = real_fix_bin_1_dtype) & (arg_packed = "0"b) then
      139 	     error_code = arg_ptr -> based_fb35;	/* caller's code is a single-word fixed binary value */
      140 
      141 	else do;					/* caller's code is something else: try to convert it */
      142 	     if (arg_type >= bit_dtype) & (arg_type <= varying_char_dtype) then
      143 		from_size = arg_size;
      144 	     else from_size = (262144 * arg_scale) + arg_size;
      145 	     to_size = 35;				/* target is fixed binary (35) */
      146 	     call assign_ (addr (error_code), (2 * real_fix_bin_1_dtype), to_size, arg_ptr,
      147 		(2 * arg_type + binary (arg_packed, 1)), from_size);
      148 	end;
      149 
      150 	if (error_code = 0) & (arg_count < 3) then	/* no error and no message: just abort as appropriate */
      151 	     go to EXIT_AFTER_PRINTING;
      152 
      153 
      154 /* Build the error message: convert the input status code, get the subsystem/request name, and process the caller's ioa_
      155*   control string and arguments */
      156 
      157 	if error_code ^= 0 then			/* get the error message */
      158 	     call convert_status_code_ (error_code, (""), error_message);
      159 
      160 	caller_name = ssu_$get_subsystem_and_request_name (sci_ptr);
      161 
      162 	if arg_count >= 3 then			/* build the caller's message */
      163 	     call ioa_$general_rs (arg_list_ptr, 3, 4, output_message, (0), ("1"b), ("0"b));
      164 	else output_message = "";			/* no caller-supplied message */
      165 
      166 
      167 /* Print the message: for standalone invocations, call com_err_ or active_fnc_err_ as appropriate, translating the
      168*   not_af_request and not_command_request error codes to the appropiate error_table_ entries; additionally, the presence
      169*   of these codes will cause the opposite entry to be called in order to achieve the correct behaviour */
      170 
      171 	if sci.standalone_invocation then do;
      172 	     request_data_ptr = sci.request_data_ptr;
      173 	     if error_code = ssu_et_$not_af_request then error_code = error_table_$active_function;
      174 	     if error_code = ssu_et_$not_command_request then error_code = error_table_$not_act_fnc;
      175 	     if request_data.af_sw then		/* invoked as an active function */
      176 		if error_code = error_table_$active_function then
      177 		     call com_err_ (error_code, caller_name, "^a", output_message);
      178 		else call active_fnc_err_ (error_code, caller_name, "^a", output_message);
      179 	     else					/* invoked as a Multics command */
      180 		if error_code = error_table_$not_act_fnc then
      181 		call active_fnc_err_ (error_code, caller_name, "^a", output_message);
      182 	     else call com_err_ (error_code, caller_name, "^a", output_message);
      183 	end;
      184 
      185 	else call ioa_$ioa_switch (iox_$error_output, "^a: ^[^a ^;^s^]^a", caller_name, (error_code ^= 0),
      186 		error_message, output_message);
      187 
      188 
      189 /* Post processing: for abort_line or abort_subsystem, perform the appropriate non-local transfer if not a standalone
      190*   invocation; if a standalone invocation, call the caller's abort entry (which is expected not to return) */
      191 
      192 EXIT_AFTER_PRINTING:
      193 	if function = PRINT_MESSAGE then return;	/* simple exit */
      194 
      195 	else if function = ABORT_LINE then abort_label = sci.request_processor_info.abort_line_label;
      196 
      197 	else abort_label = sci.listener_info.abort_subsystem_label;
      198 						/* anything we don't know about, just punt */
      199 
      200 	if sci.debug_mode then do;			/* delay the inevitable, slightly */
      201 	     call ioa_$ioa_switch (iox_$error_output, "ssu_error_: Debug mode set; calling cu_$cl.");
      202 	     call cu_$cl ("0"b);			/* if a start occurs, continue */
      203 	end;
      204 
      205 	if sci.standalone_invocation then		/* standalone invocation: call abort entry (and ... */
      206 	     call sci.standalone_abort_entry ();	/* ... probably never return here) */
      207 
      208 	else do;
      209 	     if substr (unspec (abort_label), 31, 6) = "43"b3 then
      210 		if abort_label ^= ssu_$null_label then go to abort_label;
      211 	     call ssu_$print_message (sci_ptr, 0, "Cannot go to abort label; returning...");
      212 	end;
      213 
      214 	return;
      215 
      216 /**/
      217 
  1     1 /*  BEGIN:   _ssu_check_sci.incl.pl1			  *  *  *  *  *  */
  1     2 
  1     3 /* Created:  25 February 1982 by G. Palter */
  1     4 /* Modified: 6 November 1984 by G. Palter for version 3 and new sub_err_ 
  1     5*				  calling sequence */
  1     6 
  1     7 
  1     8 /****^  HISTORY COMMENTS:
  1     9*  1) change(87-02-07,GDixon), approve(87-05-25,MCR7680),
  1    10*     audit(87-06-02,Parisek), install(87-08-04,MR12.1-1056):
  1    11*     Modified to verify that p_sci_ptr has proper its modifier by overlaying it
  1    12*     with the structure in its.incl.pl1, rather than assuming knowledge of
  1    13*     pointer format.
  1    14*                                                   END HISTORY COMMENTS */
  1    15 
  1    16 
  1    17 /* format: style4,delnl,insnl,ifthenstmt,ifthen */
  1    18 
  1    19 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  1    20 /*							       */
  1    21 /* Validates that the caller's sci_ptr acutally references a valid	       */
  1    22 /* subsystem control info structure.				       */
  1    23 /*							       */
  1    24 /* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  1    25 
  1    26 ssu_check_sci:
  1    27      procedure (p_sci_ptr);
  1    28 
  1    29 dcl  p_sci_ptr pointer parameter;
  1    30 
  1    31 dcl  SSU_ character (32) static options (constant) initial ("ssu_");
  1    32 
  1    33 dcl  error_table_$bad_ptr fixed binary (35) external;
  1    34 dcl  error_table_$null_info_ptr fixed binary (35) external;
  1    35 dcl  error_table_$unimplemented_version fixed binary (35) external;
  1    36 
  1    37 dcl  sub_err_ entry () options (variable);
  1    38 
  1    39 dcl  (null, substr, unspec) builtin;
  1    40 
  1    41           if addr(p_sci_ptr) -> its.its_mod ^= ITS_MODIFIER then do;
  1    42 RESIGNAL_BAD_POINTER:
  1    43 	     call sub_err_ (error_table_$bad_ptr, SSU_, ACTION_CANT_RESTART, null (), (0), "^24.3b", unspec (p_sci_ptr));
  1    44 	     go to RESIGNAL_BAD_POINTER;
  1    45 	end;
  1    46 
  1    47 	if p_sci_ptr = null () then do;
  1    48 RESIGNAL_NULL_POINTER:
  1    49 	     call sub_err_ (error_table_$null_info_ptr, SSU_, ACTION_CANT_RESTART, null (), (0), "sci_ptr");
  1    50 	     go to RESIGNAL_NULL_POINTER;
  1    51 	end;
  1    52 
  1    53 	if p_sci_ptr -> sci.version = SCI_VERSION_3 then	/* all is well */
  1    54 	     return;
  1    55 
  1    56 RESIGNAL_BAD_VERSION:
  1    57 	call sub_err_ (error_table_$unimplemented_version, SSU_, ACTION_CANT_RESTART, null (), (0), "^24.3b",
  1    58 	     unspec (p_sci_ptr -> sci.version));
  1    59 	go to RESIGNAL_BAD_VERSION;
  1    60 
  2     1 /* BEGIN INCLUDE FILE its.incl.pl1
  2     2*   modified 27 July 79 by JRDavis to add its_unsigned
  2     3*   Internal format of ITS pointer, including ring-number field for follow-on processor */
  2     4 
  2     5 dcl 1 its based aligned,				/* declaration for ITS type pointer */
  2     6     2 pad1 bit (3) unaligned,
  2     7     2 segno bit (15) unaligned,			/* segment number within the pointer */
  2     8     2 ringno bit (3) unaligned,			/* ring number within the pointer */
  2     9     2 pad2 bit (9) unaligned,
  2    10     2 its_mod bit (6) unaligned,			/* should be 43(8) */
  2    11 
  2    12     2 offset bit (18) unaligned,			/* word offset within the addressed segment */
  2    13     2 pad3 bit (3) unaligned,
  2    14     2 bit_offset bit (6) unaligned,			/* bit offset within the word */
  2    15     2 pad4 bit (3) unaligned,
  2    16     2 mod bit (6) unaligned;				/* further modification */
  2    17 
  2    18 dcl 1 itp based aligned,				/* declaration for ITP type pointer */
  2    19     2 pr_no bit (3) unaligned,			/* number of pointer register to use */
  2    20     2 pad1 bit (27) unaligned,
  2    21     2 itp_mod bit (6) unaligned,			/* should be 41(8) */
  2    22 
  2    23     2 offset bit (18) unaligned,			/* word offset from pointer register word offset */
  2    24     2 pad2 bit (3) unaligned,
  2    25     2 bit_offset bit (6) unaligned,			/* bit offset relative to new word offset */
  2    26     2 pad3 bit (3) unaligned,
  2    27     2 mod bit (6) unaligned;				/* further modification */
  2    28 
  2    29 
  2    30 dcl 1 its_unsigned based aligned,			/* just like its, but with unsigned binary */
  2    31     2 pad1 bit (3) unaligned,
  2    32     2 segno fixed bin (15) unsigned unaligned,
  2    33     2 ringno fixed bin (3) unsigned unaligned,
  2    34     2 pad2 bit (9) unaligned,
  2    35     2 its_mod bit (6) unaligned,
  2    36 
  2    37     2 offset fixed bin (18) unsigned unaligned,
  2    38     2 pad3 bit (3) unaligned,
  2    39     2 bit_offset fixed bin (6) unsigned unaligned,
  2    40     2 pad4 bit (3) unaligned,
  2    41     2 mod bit (6) unaligned;
  2    42 
  2    43 dcl 1 itp_unsigned based aligned,			/* just like itp, but with unsigned binary where appropriate */
  2    44     2 pr_no fixed bin (3) unsigned unaligned,
  2    45     2 pad1 bit (27) unaligned,
  2    46     2 itp_mod bit (6) unaligned,
  2    47 
  2    48     2 offset fixed bin (18) unsigned unaligned,
  2    49     2 pad2 bit (3) unaligned,
  2    50     2 bit_offset fixed bin (6) unsigned unaligned,
  2    51     2 pad3 bit (3) unaligned,
  2    52     2 mod bit (6) unaligned;
  2    53 
  2    54 
  2    55 dcl  ITS_MODIFIER bit (6) unaligned internal static options (constant) init ("43"b3);
  2    56 dcl  ITP_MODIFIER bit (6) unaligned internal static options (constant) init ("41"b3);
  2    57 
  2    58 /* END INCLUDE FILE   its.incl.pl1 */
  1    61 
  1    62 
  3     1 /* BEGIN INCLUDE FILE sub_err_flags.incl.pl1 BIM 11/81 */
  3     2 /* format: style3 */
  3     3 
  3     4 /* These constants are to be used for the flags argument of sub_err_ */
  3     5 /* They are just "string (condition_info_header.action_flags)" */
  3     6 
  3     7 declare	(
  3     8 	ACTION_CAN_RESTART	init (""b),
  3     9 	ACTION_CANT_RESTART init ("1"b),
  3    10 	ACTION_DEFAULT_RESTART
  3    11 			init ("01"b),
  3    12 	ACTION_QUIET_RESTART
  3    13 			init ("001"b),
  3    14 	ACTION_SUPPORT_SIGNAL
  3    15 			init ("0001"b)
  3    16 	)		bit (36) aligned internal static options (constant);
  3    17 
  3    18 /* End include file */
  1    63 
  1    64 
  1    65      end ssu_check_sci;
  1    66 
  1    67 
  1    68 /*  END OF:  _ssu_check_sci.incl.pl1			  *  *  *  *  *  */
      218 
      219 
  4     1 /* BEGIN INCLUDE FILE ... _ssu_sci.incl.pl1 */
  4     2 /* Created:  31 April 1980 by W. Olin Sibert */
  4     3 /* Modified: 17 November 1981 by Jay Pattin to add info_prefix */
  4     4 /* Modified: 10 December 1981 by G. Palter to make arg_count, arg_ptr, return_arg, and arg_list_ptr replaceable */
  4     5 /* Modified: 10 February 1982 by G. Palter to reorganize and make changes required for installation */
  4     6 /* Modified: June 1982 by G. Palter for version 2 (new request processor options and replaceable procedures) */
  4     7 /* Modified: 6 November 1984 by G. Palter for version 3 (get_subsystem_and_request_name is now replaceable) */
  4     8 
  4     9 /* format: style4,^delnl */
  4    10 
  4    11 
  4    12 /* Structure used internally by subsystem utilities to contain control information about a single invocation */
  4    13 
  4    14 dcl  1 sci aligned based (sci_ptr),
  4    15        2 version character (8),
  4    16        2 parent_area_ptr pointer,			/* -> area holding this data and referenced structures */
  4    17 
  4    18        2 global_info,				/* global information about this subsystem ... */
  4    19          3 subsystem_name char (32) unaligned,		/* ... its name (eg: read_mail) */
  4    20          3 subsystem_version char (32) unaligned,		/* ... its version numer (eg: 4.3j) */
  4    21          3 info_ptr pointer,				/* ... -> data maintained by the subsystem */
  4    22          3 standalone_abort_entry entry () variable,	/* ... for standalone invocations: called by ssu_$abort_* */
  4    23          3 flags,
  4    24 	 4 standalone_invocation bit (1) unaligned,	/* ... ON => ssu_$standalone_invocation was used */
  4    25 	 4 in_listener bit (1) unaligned,		/* ... ON => in subsystem listener loop */
  4    26 	 4 executing_request bit (1) unaligned,		/* ... ON => executing a request */
  4    27 	 4 debug_mode bit (1) unaligned,		/* ... ON => debugging the subsystem */
  4    28 	 4 pad bit (32) unaligned,
  4    29 
  4    30        2 recursion_info,				/* describes relationship of this invocation to other active
  4    31*						   invocations of the same subsystem ... */
  4    32          3 invocation_data_idx fixed binary,		/* ... locates the list of active invocations */
  4    33          3 level fixed binary,			/* ... # of active invocations when this one created + 1 */
  4    34          3 previous_sci_ptr pointer,			/* ... -> description of previous invocation */
  4    35          3 next_sci_ptr pointer,			/* ... -> description of next invocation */
  4    36 
  4    37        2 request_processor_info,			/* information related to request line processing ... */
  4    38          3 request_tables_ptr pointer,			/* ... -> list of request tables in use */
  4    39          3 rp_options_ptr pointer,			/* ... -> options controlling the processor */
  4    40          3 abort_line_label label variable,
  4    41          3 request_data_ptr pointer,			/* ... -> request_data structure for current request */
  4    42 
  4    43        2 prompt_and_ready_info,			/* information related to prompts and ready messages ... */
  4    44          3 prompt character (64) varying,		/* the prompt (if any): an ioa_ control string */
  4    45          3 prompt_mode,				/* controls prompting ... */
  4    46 	 4 dont_prompt bit (1) unaligned,		/* ... ON => never prompt */
  4    47 	 4 prompt_after_null_lines bit (1) unaligned,	/* ... ON => prompt after a blank line if prompts enabled */
  4    48 	 4 dont_prompt_if_typeahead bit (1) unaligned,	/* ... ON => suppress prompts if request line available */
  4    49 	 4 pad bit (33) unaligned,
  4    50          3 ready_enabled bit (1) aligned,		/* ... ON => ready procedure should be invoked */
  4    51 
  4    52        2 listener_info,				/* information used by the listener ... */
  4    53          3 abort_subsystem_label label variable,
  4    54          3 temp_seg_ptr pointer,			/* ... -> temporary segment used for long request lines */
  4    55 
  4    56        2 temp_info_ptr pointer,			/* pointer to data used by ssu_temp_mgr_ */
  4    57 
  4    58        2 info_info,					/* information related to self-documentation ... */
  4    59          3 info_dirs_ptr pointer,			/* ... -> list of info directories */
  4    60          3 info_prefix character (32),			/* ... prefix used to form info segment names */
  4    61 
  4    62        2 ec_info,					/* data for subsystem exec_com processing ... */
  4    63          3 ec_suffix char (32) unaligned,		/* ... suffix of exec_com segments */
  4    64          3 ec_search_list char (32) unaligned,		/* ... search list used to find exec_coms */
  4    65          3 subsystem_dir_ptr pointer,			/* ... defines referencing_dir rule for above search list */
  4    66 
  4    67        2 entries,					/* all replaceable entries ... */
  4    68          (
  4    69          3 abort_line,				/* ... invoked by ssu_$abort_line */
  4    70          3 abort_subsystem,				/* ... invoked by ssu_$abort_subsystem */
  4    71          3 print_message,				/* ... invoked by ssu_$print_message */
  4    72          3 program_interrupt,				/* ... cannot be called externally */
  4    73          3 pre_request_line,				/* ... cannot be called externally */
  4    74          3 post_request_line,				/* ... cannot be called externally */
  4    75          3 ready,					/* ... invoked by ssu_$ready_proc */
  4    76          3 cpescape,				/* ... cannot be called externally */
  4    77          3 unknown_request,				/* ... invoked by ssu_$unknown_request */
  4    78          3 listen,					/* ... invoked by ssu_$listen */
  4    79          3 execute_line,				/* ... invoked by ssu_$execute_line */
  4    80          3 evaluate_active_string,			/* ... invoked by ssu_$evaluate_active_string */
  4    81          3 invoke_request,				/* ... invoked by ssu_$invoke_request */
  4    82          3 locate_request,				/* ... invoked by ssu_$locate_request */
  4    83          3 arg_count,				/* ... invoked by ssu_$arg_count */
  4    84          3 arg_ptr,					/* ... invoked by ssu_$arg_ptr */
  4    85          3 return_arg,				/* ... invoked by ssu_$return_arg */
  4    86          3 arg_list_ptr,				/* ... invoked by ssu_$arg_list_ptr */
  4    87          3 get_default_rp_options,			/* ... invoked by ssu_$get_default_rp_options */
  4    88          3 get_rp_options,				/* ... invoked by ssu_$get_request_processor_options */
  4    89          3 set_rp_options,				/* ... invoked by ssu_$set_request_processor_options */
  4    90          3 reset_rp_options,				/* ... invoked by ssu_$reset_request_processor_options */
  4    91          3 get_subsys_and_request_name			/* ... invoked by ssu_$get_subsystem_and_request_name */
  4    92          ) entry () variable options (variable);
  4    93 
  4    94 dcl  sci_ptr pointer;
  4    95 
  4    96 dcl  sci_parent_area area based (sci.parent_area_ptr);
  4    97 
  4    98 dcl  SCI_VERSION_3 character (8) static options (constant) init ("sci_0003");
  4    99 
  4   100 /* END INCLUDE FILE ... _ssu_sci.incl.pl1 */
      220 
      221 
  5     1 /* BEGIN INCLUDE FILE ... _ssu_request_data.incl.pl1 */
  5     2 /* Created:  13 May 1980 by W. Olin Sibert */
  5     3 /* Modified: 28 February 1982 by G. Palter to add dont_summarize and dont_list */
  5     4 /* Modified: 2 August 1982 by Jay Pattin to add unknown flag */
  5     5 
  5     6 /* format: style4,delnl,insnl,ifthenstmt,ifthen */
  5     7 
  5     8 
  5     9 /* Description of a subsystem request returned by ssu_$locate_request */
  5    10 
  5    11 dcl  1 request_data aligned based (request_data_ptr),
  5    12        2 full_name character (32) unaligned,		/* its primary name */
  5    13        2 entry entry (pointer, pointer) variable,		/* entry to call to implement the request */
  5    14        2 call_info,					/* describes current invocation of the request ... */
  5    15          3 arg_list_ptr pointer,			/* ... -> argument list */
  5    16          3 arg_count fixed binary,
  5    17          3 af_sw bit (1) aligned,			/* ... ON => invoked as an active request */
  5    18          3 rv_ptr pointer,				/* ... -> active request's return string */
  5    19          3 rv_lth fixed binary (21),			/* ... maxlength of the return string */
  5    20        2 flags aligned like request_flags,		/* attributes of the request (from the request table) */
  5    21        2 name_list_ptr pointer unaligned,		/* -> list of all valid names for the request */
  5    22        2 info_string,				/* brief description of the request (if any) */
  5    23          3 ptr pointer unaligned,
  5    24          3 lth fixed binary (18),
  5    25        2 pad (4) bit (36);
  5    26 
  5    27 dcl  request_data_ptr pointer;
  5    28 
  5    29 
  5    30 /* Request attributes from the request table */
  5    31 
  5    32 dcl  1 request_flags aligned based,
  5    33        2 system_flags unaligned,
  5    34          3 allow_command bit (1) unaligned,		/* ON => request may be called as a command */
  5    35          3 allow_af bit (1) unaligned,			/* ON => request may be called as an active function */
  5    36          3 unimplemented bit (1) unaligned,		/* ON => request is not yet implemented */
  5    37          3 multics_request bit (1) unaligned,		/* ON => this request is really just a Multics command */
  5    38          3 dont_summarize bit (1) unaligned,		/* ON => summarize_requests doesn't list this request */
  5    39          3 dont_list bit (1) unaligned,			/* ON => list_requests doesn't match this one without -all */
  5    40          3 unknown bit (1) unaligned,			/* ON => return unknown_request, don't list or summarize ever */
  5    41          3 pad bit (11) unaligned,
  5    42        2 user_flags bit (18) unaligned;			/* no longer used */
  5    43 
  5    44 
  5    45 /* List of all names for a given request */
  5    46 
  5    47 dcl  1 request_name_list aligned based (request_name_list_ptr),
  5    48        2 n_names fixed binary,			/* structure describing name list */
  5    49        2 name (request_name_list_n_names refer (request_name_list.n_names)) character (32) unaligned;
  5    50 
  5    51 dcl  request_name_list_ptr pointer;
  5    52 dcl  request_name_list_n_names fixed binary;
  5    53 
  5    54 
  5    55 /* Brief description of a request */
  5    56 
  5    57 dcl  request_info_string character (request_info_string_lth) based (request_info_string_ptr);
  5    58 dcl  request_info_string_lth fixed binary (21);
  5    59 dcl  request_info_string_ptr pointer;
  5    60 
  5    61 /* END INCLUDE FILE ... _ssu_request_data.incl.pl1 */
      222 
      223 
  6     1 /* BEGIN INCLUDE FILE ... std_descriptor_types.incl.pl1 */
  6     2 
  6     3 
  6     4 /****^  HISTORY COMMENTS:
  6     5*  1) change(86-09-05,JMAthane), approve(86-09-05,MCR7525),
  6     6*     audit(86-09-11,Martinson), install(86-11-12,MR12.0-1208):
  6     7*     Added pascal_string_type_dtype descriptor type.  Its number is 87.
  6     8*     Objects of this type are PASCAL string types.
  6     9*  2) change(88-09-20,WAAnderson), approve(88-09-20,MCR7952),
  6    10*     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
  6    11*     Added the new C types.
  6    12*                                                   END HISTORY COMMENTS */
  6    13 
  6    14 /* This include file defines mnemonic names for the Multics
  6    15*   standard descriptor types, using both pl1 and cobol terminology.
  6    16*   PG 780613
  6    17*   JRD 790530
  6    18*   JRD 791016
  6    19*   MBW 810731
  6    20*   TGO 830614 Add hex types.
  6    21*   Modified June 83 JMAthane to add PASCAL data types
  6    22*   TGO 840120 Add float dec extended and generic, float binary generic
  6    23**/
  6    24 
  6    25      dcl	   (real_fix_bin_1_dtype  init (1),
  6    26 	   real_fix_bin_2_dtype   init (2),
  6    27 	   real_flt_bin_1_dtype   init (3),
  6    28 	   real_flt_bin_2_dtype   init (4),
  6    29 	   cplx_fix_bin_1_dtype   init (5),
  6    30 	   cplx_fix_bin_2_dtype   init (6),
  6    31 	   cplx_flt_bin_1_dtype   init (7),
  6    32 	   cplx_flt_bin_2_dtype   init (8),
  6    33 	   real_fix_dec_9bit_ls_dtype init (9),
  6    34 	   real_flt_dec_9bit_dtype init (10),
  6    35 	   cplx_fix_dec_9bit_ls_dtype init (11),
  6    36 	   cplx_flt_dec_9bit_dtype init (12),
  6    37 	   pointer_dtype	      init (13),
  6    38 	   offset_dtype	      init (14),
  6    39 	   label_dtype	      init (15),
  6    40 	   entry_dtype	      init (16),
  6    41 	   structure_dtype	      init (17),
  6    42 	   area_dtype	      init (18),
  6    43 	   bit_dtype	      init (19),
  6    44 	   varying_bit_dtype      init (20),
  6    45 	   char_dtype	      init (21),
  6    46 	   varying_char_dtype     init (22),
  6    47 	   file_dtype	      init (23),
  6    48 	   real_fix_dec_9bit_ls_overp_dtype init (29),
  6    49 	   real_fix_dec_9bit_ts_overp_dtype init (30),
  6    50 	   real_fix_bin_1_uns_dtype init (33),
  6    51 	   real_fix_bin_2_uns_dtype init (34),
  6    52 	   real_fix_dec_9bit_uns_dtype init (35),
  6    53 	   real_fix_dec_9bit_ts_dtype init (36),
  6    54 	   real_fix_dec_4bit_uns_dtype init (38),	/* digit-aligned */
  6    55 	   real_fix_dec_4bit_ts_dtype init (39),	/* byte-aligned */
  6    56 	   real_fix_dec_4bit_bytealigned_uns_dtype init (40), /* COBOL */
  6    57 	   real_fix_dec_4bit_ls_dtype init (41),	/* digit-aligned */
  6    58 	   real_flt_dec_4bit_dtype init (42),		/* digit-aligned */
  6    59 	   real_fix_dec_4bit_bytealigned_ls_dtype init (43),
  6    60 	   real_flt_dec_4bit_bytealigned_dtype init (44),
  6    61 	   cplx_fix_dec_4bit_bytealigned_ls_dtype init (45),
  6    62 	   cplx_flt_dec_4bit_bytealigned_dtype init (46),
  6    63 	   real_flt_hex_1_dtype   init (47),
  6    64 	   real_flt_hex_2_dtype   init (48),
  6    65 	   cplx_flt_hex_1_dtype   init (49),
  6    66 	   cplx_flt_hex_2_dtype   init (50),
  6    67 	   c_typeref_dtype        init (54),
  6    68 	   c_enum_dtype           init (55),
  6    69              c_enum_const_dtype     init (56),
  6    70 	   c_union_dtype          init (57),
  6    71 	   algol68_straight_dtype init (59),
  6    72 	   algol68_format_dtype   init (60),
  6    73 	   algol68_array_descriptor_dtype init (61),
  6    74 	   algol68_union_dtype    init (62),
  6    75 
  6    76 	   cobol_comp_6_dtype     init (1),
  6    77 	   cobol_comp_7_dtype     init (1),
  6    78 	   cobol_display_ls_dtype init (9),
  6    79 	   cobol_structure_dtype  init (17),
  6    80 	   cobol_char_string_dtype init (21),
  6    81 	   cobol_display_ls_overp_dtype init (29),
  6    82 	   cobol_display_ts_overp_dtype init (30),
  6    83 	   cobol_display_uns_dtype init (35),
  6    84 	   cobol_display_ts_dtype init (36),
  6    85 	   cobol_comp_8_uns_dtype init (38),		/* digit aligned */
  6    86 	   cobol_comp_5_ts_dtype  init (39),		/* byte aligned */
  6    87 	   cobol_comp_5_uns_dtype init (40),
  6    88 	   cobol_comp_8_ls_dtype  init (41),		/* digit aligned */
  6    89 	   real_flt_dec_extended_dtype init (81),	/* 9-bit exponent */
  6    90 	   cplx_flt_dec_extended_dtype init (82),	/* 9-bit exponent */
  6    91 	   real_flt_dec_generic_dtype init (83),	/* generic float decimal */
  6    92 	   cplx_flt_dec_generic_dtype init (84),
  6    93 	   real_flt_bin_generic_dtype init (85),	/* generic float binary */
  6    94 	   cplx_flt_bin_generic_dtype init (86)) fixed bin internal static options (constant);
  6    95 
  6    96      dcl	   (ft_integer_dtype      init (1),
  6    97 	   ft_real_dtype	      init (3),
  6    98 	   ft_double_dtype	      init (4),
  6    99 	   ft_complex_dtype	      init (7),
  6   100 	   ft_complex_double_dtype init (8),
  6   101 	   ft_external_dtype      init (16),
  6   102 	   ft_logical_dtype	      init (19),
  6   103 	   ft_char_dtype	      init (21),
  6   104 	   ft_hex_real_dtype      init (47),
  6   105 	   ft_hex_double_dtype    init (48),
  6   106 	   ft_hex_complex_dtype   init (49),
  6   107 	   ft_hex_complex_double_dtype init (50)
  6   108 	   )		      fixed bin internal static options (constant);
  6   109 
  6   110      dcl	   (algol68_short_int_dtype init (1),
  6   111 	   algol68_int_dtype      init (1),
  6   112 	   algol68_long_int_dtype init (2),
  6   113 	   algol68_real_dtype     init (3),
  6   114 	   algol68_long_real_dtype init (4),
  6   115 	   algol68_compl_dtype    init (7),
  6   116 	   algol68_long_compl_dtype init (8),
  6   117 	   algol68_bits_dtype     init (19),
  6   118 	   algol68_bool_dtype     init (19),
  6   119 	   algol68_char_dtype     init (21),
  6   120 	   algol68_byte_dtype     init (21),
  6   121 	   algol68_struct_struct_char_dtype init (22),
  6   122 	   algol68_struct_struct_bool_dtype init (20)
  6   123 	   )		      fixed bin internal static options (constant);
  6   124 
  6   125      dcl	   (label_constant_runtime_dtype init (24),
  6   126 	   int_entry_runtime_dtype init (25),
  6   127 	   ext_entry_runtime_dtype init (26),
  6   128 	   ext_procedure_runtime_dtype init (27),
  6   129 	   picture_runtime_dtype  init (63)
  6   130 	   )		      fixed bin internal static options (constant);
  6   131 
  6   132      dcl	   (pascal_integer_dtype  init (1),
  6   133 	   pascal_real_dtype      init (4),
  6   134 	   pascal_label_dtype     init (24),
  6   135 	   pascal_internal_procedure_dtype init (25),
  6   136 	   pascal_exportable_procedure_dtype init (26),
  6   137 	   pascal_imported_procedure_dtype init (27),
  6   138 	   pascal_typed_pointer_type_dtype init (64),
  6   139 	   pascal_char_dtype      init (65),
  6   140 	   pascal_boolean_dtype   init (66),
  6   141 	   pascal_record_file_type_dtype init (67),
  6   142 	   pascal_record_type_dtype init (68),
  6   143 	   pascal_set_dtype	      init (69),
  6   144 	   pascal_enumerated_type_dtype init (70),
  6   145 	   pascal_enumerated_type_element_dtype init (71),
  6   146 	   pascal_enumerated_type_instance_dtype init (72),
  6   147 	   pascal_user_defined_type_dtype init (73),
  6   148 	   pascal_user_defined_type_instance_dtype init (74),
  6   149 	   pascal_text_file_dtype init (75),
  6   150 	   pascal_procedure_type_dtype init (76),
  6   151 	   pascal_variable_formal_parameter_dtype init (77),
  6   152 	   pascal_value_formal_parameter_dtype init (78),
  6   153 	   pascal_entry_formal_parameter_dtype init (79),
  6   154 	   pascal_parameter_procedure_dtype init (80),
  6   155 	   pascal_string_type_dtype init (87)) fixed bin int static options (constant);
  6   156 
  6   157 
  6   158 /* END INCLUDE FILE ... std_descriptor_types.incl.pl1 */
      224 
      225 
      226      end ssu_error_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/24/88  1400.0  ssu_error_.pl1                    >special_ldd>install>MR12.2-1184>ssu_error_.pl1
218          1    08/06/87  0913.4  _ssu_check_sci.incl.pl1           >ldd>include>_ssu_check_sci.incl.pl1
1-61         2    11/26/79  1320.6  its.incl.pl1                      >ldd>include>its.incl.pl1
1-63         3    04/16/82  0958.1  sub_err_flags.incl.pl1            >ldd>include>sub_err_flags.incl.pl1
220          4    01/21/85  0912.2  _ssu_sci.incl.pl1                 >ldd>include>_ssu_sci.incl.pl1
222          5    09/28/82  1437.6  _ssu_request_data.incl.pl1        >ldd>include>_ssu_request_data.incl.pl1
224          6    10/24/88  1336.9  std_descriptor_types.incl.pl1     >special_ldd>install>MR12.2-1184>std_descriptor_types.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ABORT_LINE                             constant        fixed bin(17,0)          initial dcl 74 ref 95 195
ABORT_SUBSYSTEM                        constant        fixed bin(17,0)          initial dcl 75 ref 104
ACTION_CANT_RESTART             000027 constant        bit(36)                  initial dcl 3-7 set ref 1-42* 1-48* 1-56*
ITS_MODIFIER                           constant        bit(6)                   initial packed unaligned dcl 2-55 ref 1-41
PRINT_MESSAGE                          constant        fixed bin(17,0)          initial dcl 73 ref 86 192
SCI_VERSION_3                   000010 constant        char(8)                  initial packed unaligned dcl 4-98 ref 1-53
SSU_                            000000 constant        char(32)                 initial packed unaligned dcl 1-31 set ref 1-42*
                                                                                  1-48* 1-56*
abort_label                     001174 automatic       label variable           dcl 47 set ref 195* 197* 209 209 209
abort_line_label         46            based           label variable           level 3 dcl 4-14 ref 195
abort_subsystem_label
                        100            based           label variable           level 3 dcl 4-14 ref 197
active_fnc_err_                 000024 constant        entry                    external dcl 57 ref 178 179
addr                                                   builtin function         dcl 77 ref 146 146 1-41
af_sw                    17            based           bit(1)                   level 3 dcl 5-11 ref 175
arg_count                       000106 automatic       fixed bin(17,0)          dcl 29 set ref 111* 114 130 150 162
arg_list_ptr                    000102 automatic       pointer                  dcl 28 set ref 117* 121* 136* 162*
arg_ndims                       000111 automatic       fixed bin(17,0)          dcl 33 set ref 121* 123 136*
arg_packed                      000110 automatic       bit(1)                   dcl 32 set ref 121* 123 136* 138 146
arg_ptr                         000104 automatic       pointer                  dcl 28 set ref 119* 126 135* 138 146*
arg_scale                       000113 automatic       fixed bin(17,0)          dcl 35 set ref 121* 136* 144
arg_size                        000112 automatic       fixed bin(17,0)          dcl 34 set ref 121* 136* 142 144
arg_type                        000107 automatic       fixed bin(17,0)          dcl 31 set ref 121* 123 136* 138 142 142 146
assign_                         000026 constant        entry                    external dcl 58 ref 146
based_fb35                             based           fixed bin(35,0)          dcl 38 ref 138
based_pointer                          based           pointer                  dcl 37 ref 126
binary                                                 builtin function         dcl 77 ref 146
bit_dtype                              constant        fixed bin(17,0)          initial dcl 6-25 ref 142
call_info                14            based           structure                level 2 dcl 5-11
caller_name                     000150 automatic       varying char(72)         dcl 44 set ref 160* 175* 178* 179* 182* 185*
com_err_                        000032 constant        entry                    external dcl 60 ref 175 182
convert_status_code_            000030 constant        entry                    external dcl 59 ref 157
cu_$arg_count                   000034 constant        entry                    external dcl 61 ref 111
cu_$arg_list_ptr                000040 constant        entry                    external dcl 63 ref 117
cu_$arg_ptr                     000036 constant        entry                    external dcl 62 ref 119 135
cu_$cl                          000042 constant        entry                    external dcl 64 ref 202
debug_mode               32(03)        based           bit(1)                   level 4 packed packed unaligned dcl 4-14 ref 200
decode_descriptor_              000044 constant        entry                    external dcl 65 ref 121 136
error_code                      000114 automatic       fixed bin(35,0)          dcl 40 set ref 138* 146 146 150 157 157* 173 173*
                                                                                  174 174* 175 175* 178* 179 179* 182* 185
error_message                   000115 automatic       char(100)                dcl 41 set ref 157* 185*
error_table_$active_function    000010 external static fixed bin(35,0)          dcl 49 ref 173 175
error_table_$bad_ptr            000056 external static fixed bin(35,0)          dcl 1-33 set ref 1-42*
error_table_$not_act_fnc        000012 external static fixed bin(35,0)          dcl 50 ref 174 179
error_table_$null_info_ptr      000060 external static fixed bin(35,0)          dcl 1-34 set ref 1-48*
error_table_$unimplemented_version
                                000062 external static fixed bin(35,0)          dcl 1-35 set ref 1-56*
flags                    32            based           structure                level 3 dcl 4-14
from_size                       000146 automatic       fixed bin(35,0)          dcl 42 set ref 142* 144* 146*
function                        000100 automatic       fixed bin(17,0)          dcl 26 set ref 86* 95* 104* 192 195
global_info               4            based           structure                level 2 dcl 4-14
ioa_$general_rs                 000046 constant        entry                    external dcl 67 ref 162
ioa_$ioa_switch                 000050 constant        entry                    external dcl 69 ref 185 201
iox_$error_output               000020 external static pointer                  dcl 54 set ref 185* 201*
its                                    based           structure                level 1 dcl 2-5
its_mod                   0(30)        based           bit(6)                   level 2 packed packed unaligned dcl 2-5 ref 1-41
listener_info           100            based           structure                level 2 dcl 4-14
null                                                   builtin function         dcl 1-39 in procedure "ssu_check_sci" ref 1-42 1-42
                                                                                  1-47 1-48 1-48 1-56 1-56
null                                                   builtin function         dcl 77 in procedure "ssu_error_" ref 114 114 123 123
output_message                  000173 automatic       char(2048)               packed unaligned dcl 46 set ref 162* 164* 175* 178*
                                                                                  179* 182* 185*
p_sci_ptr                              parameter       pointer                  dcl 1-29 set ref 1-26 1-41 1-42 1-42 1-47 1-53 1-56
                                                                                  1-56
pointer_dtype                          constant        fixed bin(17,0)          initial dcl 6-25 ref 123
real_fix_bin_1_dtype                   constant        fixed bin(17,0)          initial dcl 6-25 ref 138 146
request_data                           based           structure                level 1 dcl 5-11
request_data_ptr         52            based           pointer                  level 3 in structure "sci" dcl 4-14 in procedure
                                                                                  "ssu_error_" ref 172
request_data_ptr                001202 automatic       pointer                  dcl 5-27 in procedure "ssu_error_" set ref 172* 175
request_flags                          based           structure                level 1 dcl 5-32
request_processor_info
                         42            based           structure                level 2 dcl 4-14
sci                                    based           structure                level 1 dcl 4-14
sci_ptr                         001200 automatic       pointer                  dcl 4-94 set ref 126* 128* 160* 171 172 195 197 200
                                                                                  205 205 211*
ssu_$get_subsystem_and_request_name
                                000052 constant        entry                    external dcl 70 ref 160
ssu_$null_label                 000022 external static label variable           dcl 55 ref 209
ssu_$print_message              000054 constant        entry                    external dcl 71 ref 211
ssu_et_$not_af_request          000014 external static fixed bin(35,0)          dcl 51 ref 173
ssu_et_$not_command_request     000016 external static fixed bin(35,0)          dcl 52 ref 174
standalone_abort_entry
                         26            based           entry variable           level 3 dcl 4-14 ref 205
standalone_invocation
                         32            based           bit(1)                   level 4 packed packed unaligned dcl 4-14 ref 171 205
sub_err_                        000064 constant        entry                    external dcl 1-37 ref 1-42 1-48 1-56
substr                                                 builtin function         dcl 77 ref 209
to_size                         000147 automatic       fixed bin(35,0)          dcl 42 set ref 145* 146*
unspec                                                 builtin function         dcl 1-39 in procedure "ssu_check_sci" ref 1-42 1-42
                                                                                  1-56 1-56
unspec                                                 builtin function         dcl 77 in procedure "ssu_error_" ref 209
varying_char_dtype                     constant        fixed bin(17,0)          initial dcl 6-25 ref 142
version                                based           char(8)                  level 2 dcl 4-14 ref 1-53 1-56 1-56

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ACTION_CAN_RESTART                     internal static bit(36)                  initial dcl 3-7
ACTION_DEFAULT_RESTART                 internal static bit(36)                  initial dcl 3-7
ACTION_QUIET_RESTART                   internal static bit(36)                  initial dcl 3-7
ACTION_SUPPORT_SIGNAL                  internal static bit(36)                  initial dcl 3-7
ITP_MODIFIER                           internal static bit(6)                   initial packed unaligned dcl 2-56
algol68_array_descriptor_dtype         internal static fixed bin(17,0)          initial dcl 6-25
algol68_bits_dtype                     internal static fixed bin(17,0)          initial dcl 6-110
algol68_bool_dtype                     internal static fixed bin(17,0)          initial dcl 6-110
algol68_byte_dtype                     internal static fixed bin(17,0)          initial dcl 6-110
algol68_char_dtype                     internal static fixed bin(17,0)          initial dcl 6-110
algol68_compl_dtype                    internal static fixed bin(17,0)          initial dcl 6-110
algol68_format_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
algol68_int_dtype                      internal static fixed bin(17,0)          initial dcl 6-110
algol68_long_compl_dtype               internal static fixed bin(17,0)          initial dcl 6-110
algol68_long_int_dtype                 internal static fixed bin(17,0)          initial dcl 6-110
algol68_long_real_dtype                internal static fixed bin(17,0)          initial dcl 6-110
algol68_real_dtype                     internal static fixed bin(17,0)          initial dcl 6-110
algol68_short_int_dtype                internal static fixed bin(17,0)          initial dcl 6-110
algol68_straight_dtype                 internal static fixed bin(17,0)          initial dcl 6-25
algol68_struct_struct_bool_dtype       internal static fixed bin(17,0)          initial dcl 6-110
algol68_struct_struct_char_dtype       internal static fixed bin(17,0)          initial dcl 6-110
algol68_union_dtype                    internal static fixed bin(17,0)          initial dcl 6-25
area_dtype                             internal static fixed bin(17,0)          initial dcl 6-25
c_enum_const_dtype                     internal static fixed bin(17,0)          initial dcl 6-25
c_enum_dtype                           internal static fixed bin(17,0)          initial dcl 6-25
c_typeref_dtype                        internal static fixed bin(17,0)          initial dcl 6-25
c_union_dtype                          internal static fixed bin(17,0)          initial dcl 6-25
char_dtype                             internal static fixed bin(17,0)          initial dcl 6-25
cobol_char_string_dtype                internal static fixed bin(17,0)          initial dcl 6-25
cobol_comp_5_ts_dtype                  internal static fixed bin(17,0)          initial dcl 6-25
cobol_comp_5_uns_dtype                 internal static fixed bin(17,0)          initial dcl 6-25
cobol_comp_6_dtype                     internal static fixed bin(17,0)          initial dcl 6-25
cobol_comp_7_dtype                     internal static fixed bin(17,0)          initial dcl 6-25
cobol_comp_8_ls_dtype                  internal static fixed bin(17,0)          initial dcl 6-25
cobol_comp_8_uns_dtype                 internal static fixed bin(17,0)          initial dcl 6-25
cobol_display_ls_dtype                 internal static fixed bin(17,0)          initial dcl 6-25
cobol_display_ls_overp_dtype           internal static fixed bin(17,0)          initial dcl 6-25
cobol_display_ts_dtype                 internal static fixed bin(17,0)          initial dcl 6-25
cobol_display_ts_overp_dtype           internal static fixed bin(17,0)          initial dcl 6-25
cobol_display_uns_dtype                internal static fixed bin(17,0)          initial dcl 6-25
cobol_structure_dtype                  internal static fixed bin(17,0)          initial dcl 6-25
cplx_fix_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
cplx_fix_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
cplx_fix_dec_4bit_bytealigned_ls_dtype internal static fixed bin(17,0)          initial dcl 6-25
cplx_fix_dec_9bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 6-25
cplx_flt_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
cplx_flt_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
cplx_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 6-25
cplx_flt_dec_4bit_bytealigned_dtype    internal static fixed bin(17,0)          initial dcl 6-25
cplx_flt_dec_9bit_dtype                internal static fixed bin(17,0)          initial dcl 6-25
cplx_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 6-25
cplx_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 6-25
cplx_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
cplx_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
entry_dtype                            internal static fixed bin(17,0)          initial dcl 6-25
ext_entry_runtime_dtype                internal static fixed bin(17,0)          initial dcl 6-125
ext_procedure_runtime_dtype            internal static fixed bin(17,0)          initial dcl 6-125
file_dtype                             internal static fixed bin(17,0)          initial dcl 6-25
ft_char_dtype                          internal static fixed bin(17,0)          initial dcl 6-96
ft_complex_double_dtype                internal static fixed bin(17,0)          initial dcl 6-96
ft_complex_dtype                       internal static fixed bin(17,0)          initial dcl 6-96
ft_double_dtype                        internal static fixed bin(17,0)          initial dcl 6-96
ft_external_dtype                      internal static fixed bin(17,0)          initial dcl 6-96
ft_hex_complex_double_dtype            internal static fixed bin(17,0)          initial dcl 6-96
ft_hex_complex_dtype                   internal static fixed bin(17,0)          initial dcl 6-96
ft_hex_double_dtype                    internal static fixed bin(17,0)          initial dcl 6-96
ft_hex_real_dtype                      internal static fixed bin(17,0)          initial dcl 6-96
ft_integer_dtype                       internal static fixed bin(17,0)          initial dcl 6-96
ft_logical_dtype                       internal static fixed bin(17,0)          initial dcl 6-96
ft_real_dtype                          internal static fixed bin(17,0)          initial dcl 6-96
int_entry_runtime_dtype                internal static fixed bin(17,0)          initial dcl 6-125
itp                                    based           structure                level 1 dcl 2-18
itp_unsigned                           based           structure                level 1 dcl 2-43
its_unsigned                           based           structure                level 1 dcl 2-30
label_constant_runtime_dtype           internal static fixed bin(17,0)          initial dcl 6-125
label_dtype                            internal static fixed bin(17,0)          initial dcl 6-25
offset_dtype                           internal static fixed bin(17,0)          initial dcl 6-25
pascal_boolean_dtype                   internal static fixed bin(17,0)          initial dcl 6-132
pascal_char_dtype                      internal static fixed bin(17,0)          initial dcl 6-132
pascal_entry_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 6-132
pascal_enumerated_type_dtype           internal static fixed bin(17,0)          initial dcl 6-132
pascal_enumerated_type_element_dtype   internal static fixed bin(17,0)          initial dcl 6-132
pascal_enumerated_type_instance_dtype  internal static fixed bin(17,0)          initial dcl 6-132
pascal_exportable_procedure_dtype      internal static fixed bin(17,0)          initial dcl 6-132
pascal_imported_procedure_dtype        internal static fixed bin(17,0)          initial dcl 6-132
pascal_integer_dtype                   internal static fixed bin(17,0)          initial dcl 6-132
pascal_internal_procedure_dtype        internal static fixed bin(17,0)          initial dcl 6-132
pascal_label_dtype                     internal static fixed bin(17,0)          initial dcl 6-132
pascal_parameter_procedure_dtype       internal static fixed bin(17,0)          initial dcl 6-132
pascal_procedure_type_dtype            internal static fixed bin(17,0)          initial dcl 6-132
pascal_real_dtype                      internal static fixed bin(17,0)          initial dcl 6-132
pascal_record_file_type_dtype          internal static fixed bin(17,0)          initial dcl 6-132
pascal_record_type_dtype               internal static fixed bin(17,0)          initial dcl 6-132
pascal_set_dtype                       internal static fixed bin(17,0)          initial dcl 6-132
pascal_string_type_dtype               internal static fixed bin(17,0)          initial dcl 6-132
pascal_text_file_dtype                 internal static fixed bin(17,0)          initial dcl 6-132
pascal_typed_pointer_type_dtype        internal static fixed bin(17,0)          initial dcl 6-132
pascal_user_defined_type_dtype         internal static fixed bin(17,0)          initial dcl 6-132
pascal_user_defined_type_instance_dtype
                                       internal static fixed bin(17,0)          initial dcl 6-132
pascal_value_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 6-132
pascal_variable_formal_parameter_dtype internal static fixed bin(17,0)          initial dcl 6-132
picture_runtime_dtype                  internal static fixed bin(17,0)          initial dcl 6-125
real_fix_bin_1_uns_dtype               internal static fixed bin(17,0)          initial dcl 6-25
real_fix_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
real_fix_bin_2_uns_dtype               internal static fixed bin(17,0)          initial dcl 6-25
real_fix_dec_4bit_bytealigned_ls_dtype internal static fixed bin(17,0)          initial dcl 6-25
real_fix_dec_4bit_bytealigned_uns_dtype
                                       internal static fixed bin(17,0)          initial dcl 6-25
real_fix_dec_4bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 6-25
real_fix_dec_4bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 6-25
real_fix_dec_4bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 6-25
real_fix_dec_9bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 6-25
real_fix_dec_9bit_ls_overp_dtype       internal static fixed bin(17,0)          initial dcl 6-25
real_fix_dec_9bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 6-25
real_fix_dec_9bit_ts_overp_dtype       internal static fixed bin(17,0)          initial dcl 6-25
real_fix_dec_9bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 6-25
real_flt_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
real_flt_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
real_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 6-25
real_flt_dec_4bit_bytealigned_dtype    internal static fixed bin(17,0)          initial dcl 6-25
real_flt_dec_4bit_dtype                internal static fixed bin(17,0)          initial dcl 6-25
real_flt_dec_9bit_dtype                internal static fixed bin(17,0)          initial dcl 6-25
real_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 6-25
real_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 6-25
real_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
real_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 6-25
request_info_string                    based           char                     packed unaligned dcl 5-57
request_info_string_lth                automatic       fixed bin(21,0)          dcl 5-58
request_info_string_ptr                automatic       pointer                  dcl 5-59
request_name_list                      based           structure                level 1 dcl 5-47
request_name_list_n_names              automatic       fixed bin(17,0)          dcl 5-52
request_name_list_ptr                  automatic       pointer                  dcl 5-51
rtrim                                                  builtin function         dcl 77
sci_parent_area                        based           area(1024)               dcl 4-96
structure_dtype                        internal static fixed bin(17,0)          initial dcl 6-25
substr                                                 builtin function         dcl 1-39
varying_bit_dtype                      internal static fixed bin(17,0)          initial dcl 6-25

NAMES DECLARED BY EXPLICIT CONTEXT.
COMMON                          000140 constant        label                    dcl 111 ref 87 96 105
EXIT_AFTER_PRINTING             000751 constant        label                    dcl 192 ref 130 150
RESIGNAL_BAD_POINTER            001112 constant        label                    dcl 1-42 ref 1-44
RESIGNAL_BAD_VERSION            001244 constant        label                    dcl 1-56 set ref 1-59
RESIGNAL_NULL_POINTER           001172 constant        label                    dcl 1-48 ref 1-50
abort_line                      000117 constant        entry                    external dcl 92
abort_subsystem                 000130 constant        entry                    external dcl 101
print_message                   000106 constant        entry                    external dcl 83
ssu_check_sci                   001104 constant        entry                    internal dcl 1-26 ref 114 123 128
ssu_error_                      000077 constant        entry                    external dcl 20

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1646        1734    1332        1656
Length      2300    1332        66         327     314           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
ssu_error_                          756 external procedure  is an external procedure.  
ssu_check_sci                           internal procedure  shares stack frame of external procedure ssu_error_.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
ssu_error_               000100 function                    ssu_error_
                         000102 arg_list_ptr                ssu_error_
                         000104 arg_ptr                     ssu_error_
                         000106 arg_count                   ssu_error_
                         000107 arg_type                    ssu_error_
                         000110 arg_packed                  ssu_error_
                         000111 arg_ndims                   ssu_error_
                         000112 arg_size                    ssu_error_
                         000113 arg_scale                   ssu_error_
                         000114 error_code                  ssu_error_
                         000115 error_message               ssu_error_
                         000146 from_size                   ssu_error_
                         000147 to_size                     ssu_error_
                         000150 caller_name                 ssu_error_
                         000173 output_message              ssu_error_
                         001174 abort_label                 ssu_error_
                         001200 sci_ptr                     ssu_error_
                         001202 request_data_ptr            ssu_error_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_ne_as             call_ent_var        call_ext_out_desc   call_ext_out        return_mac          tra_ext_2
ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
active_fnc_err_               assign_                       com_err_                      convert_status_code_
cu_$arg_count                 cu_$arg_list_ptr              cu_$arg_ptr                   cu_$cl
decode_descriptor_            ioa_$general_rs               ioa_$ioa_switch
ssu_$get_subsystem_and_request_name                         ssu_$print_message            sub_err_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$active_function  error_table_$bad_ptr          error_table_$not_act_fnc      error_table_$null_info_ptr
error_table_$unimplemented_version                          iox_$error_output             ssu_$null_label
ssu_et_$not_af_request        ssu_et_$not_command_request




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     20 000076        23 000104        83 000105        86 000113        87 000115        92 000116        95 000124
     96 000126       101 000127       104 000135       105 000137       111 000140       114 000147       117 000155
    119 000164       121 000205       123 000232       126 000246       128 000251       130 000253       135 000256
    136 000277       138 000324       142 000335       144 000344       145 000350       146 000352       150 000406
    157 000413       160 000432       162 000443       164 000516       171 000521       172 000525       173 000527
    174 000535       175 000541       178 000574       179 000623       182 000654       183 000702       185 000703
    192 000751       195 000754       197 000764       200 000771       201 000774       202 001014       205 001025
    209 001036       211 001056       214 001103    1   26 001104    1   41 001106    1   42 001112    1   44 001165
 1   47 001166    1   48 001172    1   50 001234    1   53 001235    1   56 001244    1   59 001320


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
