	COMPILATION LISTING OF SEGMENT db_find_mc
	Compiled by: Multics PL/I Compiler, Release 27d, of October 11, 1982
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 11/04/82  1821.6 mst Thu
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 db_find_mc:	procedure (a_sp, co_flag, ret_mcp);
       12 
       13 /* 	This procedure is used by other debug subroutines to
       14*	obtain a pointer to the latest set of machine
       15*	conditions relative to the frame pointed to by a_sp.
       16*	If co_flag is "1"b, then the caller desires machine conditions
       17*	associated with the latest crawlout.
       18**/
       19 
       20 
       21 /*	Coded by Robert S. Coren 07/23/73	*/
       22 
       23 
       24 dcl a_sp ptr;
       25 dcl co_flag bit(1) aligned;
       26 dcl ret_mcp ptr;
       27 
       28 dcl sp ptr;
       29 dcl pp ptr;
       30 
       31 dcl code fixed bin(35);
       32 
       33 dcl (addr, null) builtin;
       34 
       35 dcl find_condition_frame_ entry (ptr) returns (ptr);
       36 dcl find_condition_info_ entry (ptr, ptr, fixed bin(35));
       37 
       38 dcl 1 cond_info aligned,
  1     1 	/* BEGIN INCLUDE FILE ... cond_info.incl.pl1
  1     2*	   coded by M. Weaver 12 July 1973 */
  1     3 
  1     4 	  2 mcptr ptr,				/* ptr to machine conditions at time of fault */
  1     5 	  2 version fixed bin,			/* version of this structure (now=1) */
  1     6 	  2 condition_name char(32) var,		/* name of condition */
  1     7 	  2 infoptr ptr,				/* ptr to software info structure */
  1     8 	  2 wcptr ptr,				/* ptr to wall crossing machine conditions */
  1     9 	  2 loc_ptr ptr,				/* ptr to location where condition occurred */
  1    10 	  2 flags aligned,
  1    11 	    3 crawlout bit(1) unal,			/* = "1"b if condition occurred in inner ring */
  1    12 	    3 pad1 bit(35) unal,
  1    13 	  2 pad_word bit(36) aligned,
  1    14 	  2 user_loc_ptr ptr,			/* ptr to last non-support loc before condition */
  1    15 	  2 pad (4) bit(36) aligned;
  1    16 
  1    17 	/* END INCLUDE FILE ... cond_info.incl.pl1 */
       39 
       40 
       41 
       42 	sp = a_sp;
       43 	ret_mcp = null;		/* all set in case we don't find it */
       44 
       45 find_it:
       46 	pp = find_condition_frame_ (sp);
       47 	if pp = null then return;	/* okay, there aren't any */
       48 
       49 	sp = pp;
       50 	call find_condition_info_ (pp, addr(cond_info), code);
       51 	if cond_info.mcptr = null then go to find_it;	/* software condition, no mc */
       52 
       53 	if co_flag
       54 	then if ^cond_info.crawlout
       55 	     then go to find_it;		/* not crawlout, keep looking */
       56 
       57 	ret_mcp = cond_info.mcptr;		/* if we got here we have the stuff we want */
       58 	return;
       59      end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/04/82  1627.5  db_find_mc.pl1                    >dumps>old>recomp>db_find_mc.pl1
39           1    05/06/74  1741.0  cond_info.incl.pl1                >ldd>include>cond_info.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
a_sp                                   parameter       pointer                  dcl 24 ref 11 42
addr                                                   builtin function         dcl 33 ref 50 50
co_flag                                parameter       bit(1)                   dcl 25 ref 11 53
code                            000104 automatic       fixed bin(35,0)          dcl 31 set ref 50*
cond_info                       000106 automatic       structure                level 1 dcl 38 set ref 50 50
crawlout                 22     000106 automatic       bit(1)                   level 3 packed unaligned dcl 38 set ref 53
find_condition_frame_           000010 constant        entry                    external dcl 35 ref 45
find_condition_info_            000012 constant        entry                    external dcl 36 ref 50
flags                    22     000106 automatic       structure                level 2 dcl 38
mcptr                           000106 automatic       pointer                  level 2 dcl 38 set ref 51 57
null                                                   builtin function         dcl 33 ref 43 47 51
pp                              000102 automatic       pointer                  dcl 29 set ref 45* 47 49 50*
ret_mcp                                parameter       pointer                  dcl 26 set ref 11 43* 57*
sp                              000100 automatic       pointer                  dcl 28 set ref 42* 45* 49*

NAMES DECLARED BY EXPLICIT CONTEXT.
db_find_mc                      000010 constant        entry                    external dcl 11
find_it                         000023 constant        label                    dcl 45 set ref 51 53

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       144         160      75         154
Length       336      75        14         142      46           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
db_find_mc                          112 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
db_find_mc               000100 sp                          db_find_mc
                         000102 pp                          db_find_mc
                         000104 code                        db_find_mc
                         000106 cond_info                   db_find_mc

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
find_condition_frame_         find_condition_info_

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000004        42 000015        43 000021        45 000023        47 000034        49 000040        50 000042
     51 000057        53 000063        57 000072        58 000074


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
