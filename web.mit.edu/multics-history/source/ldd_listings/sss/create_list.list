	COMPILATION LISTING OF SEGMENT create_list
	Compiled by: Multics PL/I Compiler, Release 28d, of September 14, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 10/03/83  1604.1 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 
        7 /* ******************************************************
        8*   *                                                    *
        9*   *                                                    *
       10*   * Copyright (c) 1972 by Massachusetts Institute of   *
       11*   * Technology and Honeywell Information Systems, Inc. *
       12*   *                                                    *
       13*   *                                                    *
       14*   ****************************************************** */
       15 
       16 create_list: proc(n) returns(ptr) ;
       17 
       18 /*	Modified on:	April 1977 by RHS for new allocation methods */
       19 
       20 dcl	(n,i,nodetype) fixed bin(15);
       21 dcl	p ptr;
       22 
       23 dcl	pl1_stat_$free_ptr(18) ptr ext static;
       24 
       25 dcl	(fixed,null) builtin;
       26 dcl	pl1_stat_$node_uses(32) fixed bin ext;
       27 
  1     1 /* BEGIN INCLUDE FILE ... pl1_tree_areas.incl.pl1 */
  1     2 
  1     3 /* format: style3 */
  1     4 dcl	tree_area		area based (pl1_stat_$tree_area_ptr);
  1     5 dcl	xeq_tree_area	area based (pl1_stat_$xeq_tree_area_ptr);
  1     6 
  1     7 dcl	pl1_stat_$tree_area_ptr
  1     8 			ptr ext static,
  1     9 	pl1_stat_$xeq_tree_area_ptr
  1    10 			ptr ext static;
  1    11 
  1    12 /* END INCLUDE FILE ... op_codes.incl.pl1 */
       28 
  2     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
  2     2 
  2     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
  2     4 
  2     5 dcl (	block_node		initial("000000001"b),
  2     6 	statement_node		initial("000000010"b),
  2     7 	operator_node		initial("000000011"b),
  2     8 	reference_node		initial("000000100"b),
  2     9 	token_node		initial("000000101"b),
  2    10 	symbol_node		initial("000000110"b),
  2    11 	context_node		initial("000000111"b),
  2    12 	array_node		initial("000001000"b),
  2    13 	bound_node		initial("000001001"b),
  2    14 	format_value_node		initial("000001010"b),
  2    15 	list_node			initial("000001011"b),
  2    16 	default_node		initial("000001100"b),
  2    17 	machine_state_node		initial("000001101"b),
  2    18 	source_node		initial("000001110"b),
  2    19 	label_node		initial("000001111"b),
  2    20 	cross_reference_node	initial("000010000"b),
  2    21 	sf_par_node		initial("000010001"b),
  2    22 	temporary_node		initial("000010010"b),
  2    23 	label_array_element_node	initial("000010011"b),
  2    24 	by_name_agg_node		initial("000010100"b))
  2    25 				bit(9) internal static aligned options(constant);
  2    26 
  2    27 dcl	1 node			based aligned,
  2    28 	2 type			unal bit(9),
  2    29 	2 source_id		unal structure,
  2    30 	  3 file_number		bit(8),
  2    31 	  3 line_number		bit(14),
  2    32 	  3 statement_number	bit(5);
  2    33 
  2    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
       29 
       30 
  3     1 /* BEGIN INCLUDE FILE ... list.incl.pl1 */
  3     2 
  3     3 /* Modified 26 June 81 by EBush to add max_list_elements */
  3     4 
  3     5 
  3     6 dcl	1 list		based aligned,
  3     7 	2 node_type	bit(9) unaligned,
  3     8 	2 reserved	bit(12) unaligned,
  3     9 	2 number		fixed(14) unaligned,
  3    10 	2 element		dimension(n refer(list.number)) ptr unaligned;
  3    11 
  3    12 dcl       max_list_elements   fixed bin(17) internal static options (constant)
  3    13 	                    init(16383);
  3    14 
  3    15 /* END INCLUDE FILE ... list.incl.pl1 */
       31 
       32 
       33 begin:
       34 	if n=2
       35 	then nodetype = fixed(list_node,15,0);
       36 	else nodetype = fixed(operator_node,15,0);
       37 
       38 	if (n=2 | n=3) & pl1_stat_$free_ptr(nodetype)^=null
       39 	then do;
       40 		p = pl1_stat_$free_ptr(nodetype);
       41 		pl1_stat_$free_ptr(nodetype) = p->list.element(1);
       42 	end;
       43 	else do;
       44 	     pl1_stat_$node_uses(11) = pl1_stat_$node_uses(11) + 1;
       45 	     allocate list in(xeq_tree_area) set(p);
       46 	     end;
       47 
       48 	p->list.node_type = list_node;
       49 	do i=1 to n;
       50 	p->list.element(i)=null;
       51 	end;
       52 	return(p);
       53 	end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/03/83  1007.2  create_list.pl1                   >spec>on>pl128d>create_list.pl1
28           1    07/21/80  1546.3  pl1_tree_areas.incl.pl1           >ldd>include>pl1_tree_areas.incl.pl1
29           2    07/21/80  1546.3  nodes.incl.pl1                    >ldd>include>nodes.incl.pl1
31           3    08/13/81  2211.5  list.incl.pl1                     >ldd>include>list.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
element                   1            based           pointer                  array level 2 packed unaligned dcl 3-6 set ref 41
                                                                                  50*
fixed                                                  builtin function         dcl 25 ref 33 36
i                               000100 automatic       fixed bin(15,0)          dcl 20 set ref 49* 50*
list                                   based           structure                level 1 dcl 3-6 set ref 45
list_node                              constant        bit(9)                   initial dcl 2-5 ref 33 48
n                                      parameter       fixed bin(15,0)          dcl 20 ref 16 33 38 38 45 45 49
node_type                              based           bit(9)                   level 2 packed unaligned dcl 3-6 set ref 48*
nodetype                        000101 automatic       fixed bin(15,0)          dcl 20 set ref 33* 36* 38 40 41
null                                                   builtin function         dcl 25 ref 38 50
number                    0(21)        based           fixed bin(14,0)          level 2 packed unaligned dcl 3-6 set ref 45*
operator_node                          constant        bit(9)                   initial dcl 2-5 ref 36
p                               000102 automatic       pointer                  dcl 21 set ref 40* 41 45* 48 50 52
pl1_stat_$free_ptr              000010 external static pointer                  array dcl 23 set ref 38 40 41*
pl1_stat_$node_uses             000012 external static fixed bin(17,0)          array dcl 26 set ref 44* 44
pl1_stat_$xeq_tree_area_ptr     000014 external static pointer                  dcl 1-7 ref 45
xeq_tree_area                          based           area(1024)               dcl 1-5 ref 45

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
array_node                             internal static bit(9)                   initial dcl 2-5
block_node                             internal static bit(9)                   initial dcl 2-5
bound_node                             internal static bit(9)                   initial dcl 2-5
by_name_agg_node                       internal static bit(9)                   initial dcl 2-5
context_node                           internal static bit(9)                   initial dcl 2-5
cross_reference_node                   internal static bit(9)                   initial dcl 2-5
default_node                           internal static bit(9)                   initial dcl 2-5
format_value_node                      internal static bit(9)                   initial dcl 2-5
label_array_element_node               internal static bit(9)                   initial dcl 2-5
label_node                             internal static bit(9)                   initial dcl 2-5
machine_state_node                     internal static bit(9)                   initial dcl 2-5
max_list_elements                      internal static fixed bin(17,0)          initial dcl 3-12
node                                   based           structure                level 1 dcl 2-27
pl1_stat_$tree_area_ptr                external static pointer                  dcl 1-7
reference_node                         internal static bit(9)                   initial dcl 2-5
sf_par_node                            internal static bit(9)                   initial dcl 2-5
source_node                            internal static bit(9)                   initial dcl 2-5
statement_node                         internal static bit(9)                   initial dcl 2-5
symbol_node                            internal static bit(9)                   initial dcl 2-5
temporary_node                         internal static bit(9)                   initial dcl 2-5
token_node                             internal static bit(9)                   initial dcl 2-5
tree_area                              based           area(1024)               dcl 1-4

NAMES DECLARED BY EXPLICIT CONTEXT.
begin                           000015 constant        label                    dcl 33
create_list                     000010 constant        entry                    external dcl 16

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       172         210     117         202
Length       420     117        16         174      53           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
create_list                          70 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
create_list              000100 i                           create_list
                         000101 nodetype                    create_list
                         000102 p                           create_list

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
return              ext_entry           alloc_based

NO EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pl1_stat_$free_ptr            pl1_stat_$node_uses           pl1_stat_$xeq_tree_area_ptr




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     16 000004        33 000015        36 000025        38 000030        40 000045        41 000047        42 000051
     44 000052        45 000054        48 000072        49 000075        50 000105        51 000110        52 000112


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
