	COMPILATION LISTING OF SEGMENT get_array_size
	Compiled by: Multics PL/I Compiler, Release 32c, of June 16, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 07/31/89  1403.5 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 get_array_size: proc(sym,units);
       12 
       13 /* Modified 780807 by PG to fix 1651 (not checking for array that is too big)
       14*   Modified 781128 by RAB to fix 1801 (array.element_boundary set incorrectly for interleaved arrays)
       15*   Modified 781206 by RAB to fix 1796 (size of star extent array in structure calc incorrectly)
       16*   Modified 790419 by PCK to implement 4-bit decimal
       17**/
       18 
       19 /* parameters */
       20 
       21 dcl	(sym ptr,
       22 	units fixed bin (15)) parameter;
       23 
       24 /* automatic */
       25 
       26 dcl	is_packed_star_param bit(1) aligned;
       27 dcl	(blk, s, a, b, t, p, q, dm, m) ptr;
       28 dcl	(cm, cdm, c) fixed bin (24);
       29 dcl	n fixed bin (15);
       30 dcl	optable(6:7) bit(9) aligned initial(word_to_mod2,word_to_mod4);
       31 
       32 /* builtins */
       33 
       34 dcl	(binary, divide, null, min, max, mod) builtin;
       35 
       36 /* conditions */
       37 
       38 dcl	size condition;
       39 
       40 /* external static */
       41 
       42 dcl	(pl1_stat_$util_error,pl1_stat_$util_abort) variable static ext entry(fixed bin(15),ptr);
       43 dcl	pl1_stat_$eis_mode bit(1) aligned ext static;
       44 dcl	pl1_stat_$eis bit(1) aligned ext static;
       45 
       46 /* internal static */
       47 
       48 dcl	ctable(6:7) fixed bin(15) int static initial(2,4);
       49 dcl	factor(7) fixed bin(15) int static initial(1,0,9,18,36,36,36);
       50 dcl	round(5) fixed bin(15) int static initial(36,0,4,2,1);
       51 
       52 
       53 	s = sym;
       54 
       55 	blk = s->symbol.block_node;
       56 	s->symbol.reference->reference.array_ref = "1"b;
       57 	a = s->symbol.array;
       58 	if a->array.element_boundary = 0 then a->array.element_boundary = s->symbol.boundary;
       59 
       60 	a->array.offset_units = min(units,word_);
       61 
       62 	a->array.c_element_size = s->symbol.c_word_size;
       63 	a->array.c_element_size_bits = s->symbol.c_bit_size;
       64 	a->array.element_size = s->symbol.word_size;
       65 	a->array.element_size_bits = s->symbol.bit_size;
       66 
       67 /* Insure that the element size is rounded upward to modulo the boundary requirement. */
       68 
       69 	if a->element_boundary > a->offset_units   /* offset_units give the units in which the element size is measured. */
       70 	then	if a->element_boundary > word_
       71 		then	if a->element_size = null
       72 			then do;
       73 				c = ctable(a->element_boundary);
       74 				a->c_element_size = divide(a->c_element_size+c-1,c,31,0)*c;
       75 			end;
       76 			else do;
       77 				q = create_operator(optable(a->element_boundary),2);
       78 				q->operand(2) = a->element_size;
       79 				a->element_size = q;
       80 			end;
       81 
       82 		else	if a->element_boundary  = character_
       83 			then do;
       84 				if a->element_size = null
       85 				then do;
       86 					a->c_element_size = divide(a->c_element_size+bits_per_character-1,bits_per_character,31,0);
       87 				end;
       88 				else do;
       89 					q = create_operator(bit_to_char,2);
       90 					q->operand(2) = a->element_size;
       91 					a->element_size = q;
       92 				end;
       93 
       94 				a->offset_units = character_;
       95 			end;
       96 
       97 
       98 /* If the array is a packed star_extent parameter, we must express offsets and sizes in bits */
       99 
      100 	is_packed_star_param = s -> symbol.packed
      101 			 & s -> symbol.star_extents
      102 			 & s -> symbol.parameter;
      103 
      104 	if is_packed_star_param
      105 	then do;
      106 		if a -> array.offset_units = character_
      107 		then	if a -> array.element_size = null
      108 			then	a -> array.c_element_size = a -> array.c_element_size * bits_per_character;
      109 			else	a -> array.element_size = multf((a -> array.element_size),
      110 					declare_constant$integer(bits_per_character));
      111 
      112 		a -> array.offset_units = bit_;
      113 		go to build_multipliers;
      114 	end;
      115 
      116 
      117 /* If the element size is constant and the units are less than word, try and convert
      118*   the size to a value expressed in higher units.	*/
      119 
      120 	if a->array.element_size ^= null then go to build_multipliers;
      121 	if a->array.offset_units >= word_ then go to build_multipliers;
      122 
      123 	if a->array.offset_units = bit_
      124 	then	if pl1_stat_$eis_mode
      125 		then	if mod(a->array.c_element_size,bits_per_word)=0
      126 			then do;
      127 				a->array.offset_units = word_;
      128 				a->array.c_element_size = divide(a->array.c_element_size,bits_per_word,31,0);
      129 			end;
      130 			else	goto build_multipliers;
      131 		else	if mod(a->array.c_element_size,bits_per_character)=0
      132 			then do;
      133 				a->array.offset_units = character_;
      134 				a->array.c_element_size = divide(a->array.c_element_size,bits_per_character,31,0);
      135 			end;
      136 			else	goto build_multipliers;
      137 
      138 	if a->array.offset_units = character_
      139 	then	if pl1_stat_$eis_mode
      140 		then	if mod(a->array.c_element_size,characters_per_word)=0
      141 			then do;
      142 				a->array.offset_units = word_;
      143 				a->array.c_element_size = divide(a->array.c_element_size,characters_per_word,31,0);
      144 			end;
      145 			else	goto build_multipliers;
      146 		else	if mod(a->array.c_element_size,characters_per_half)=0
      147 			then do;
      148 				a->array.offset_units = half_;
      149 				a->array.c_element_size = divide(a->array.c_element_size,characters_per_half,31,0);
      150 			end;
      151 			else	goto build_multipliers;
      152 
      153 	if a->array.offset_units = half_
      154 	then	if mod(a->array.c_element_size,2)=0
      155 		then do;
      156 			a->array.offset_units = word_;
      157 			a->array.c_element_size = divide(a->array.c_element_size,2,31,0);
      158 		end;
      159 
      160 /* walk down the bound pairs and construct two multipliers for each bound pair.
      161*   The descriptor multiplier is used only when the array is accessed
      162*   as a parameter.  It is expressed in bits if the array is packed and
      163*   in words if it is unpacked.  The other multiplier is used by this procedure and
      164*   is expressed in the units given by offset_units.  Multipliers are computed by the
      165*   following rule:
      166*
      167*	m(n) = element_size
      168*	m(n-1) = (hb(n)-lb(n)+1)*m(n)
      169*	m(n-2) = (hb(n-1)-lb(n-1)+1)*m(n-1)
      170*	   .
      171*	   .
      172*	   .
      173*	m(1) = (hb(2)-lb(2)+1)m(2)
      174*
      175*   The address of an element is :
      176*	addr(a(i(1),i(2),...i(n)) = B-V+(i(1)*m(1)+i(2)*m(2)...i(n)*m(n))
      177*	B = the beginning of storage for the array ( the offset of its first element).
      178*	V = the virtual origin (lb(1)*m(1)+lb(2)*m(2)...lb(n)*m(n))
      179*		the address of the 0th element.
      180*								*/
      181 
      182 /* the first multiplier is the element size.  It is converted to bits when used
      183*   as the descriptor multiplier of a packed array. */
      184 
      185 build_multipliers:
      186 	on size call pl1_stat_$util_abort (357, s);	/* array s won't fit in 262144 words */
      187 	m = a->array.element_size;
      188 	cm = a->array.c_element_size;
      189 
      190 	if m = null then m = declare_constant$integer((cm));
      191 
      192 	if s->symbol.packed
      193 	then	c = factor(a->array.offset_units);
      194 	else	c = 1;
      195 
      196 	cdm = c*cm;
      197 
      198 	if c = 1
      199 	then	dm = m;
      200 	else	dm = multf(m,declare_constant$integer((c)));
      201 
      202 /* loop down the bound pairs and compute the multipliers and virtual origin.	*/
      203 
      204 	do b = a->array.bounds repeat b->bound.next while(b^=null);
      205 
      206 /* if the multiplier is constant insure that it is included in the object program.	*/
      207 
      208 		if m = null then m = declare_constant$integer((cm));
      209 		if dm = null then dm = declare_constant$integer((cdm));
      210 
      211 /* check for decimal integer constant bounds. */
      212 
      213 		if b->bound.lower^=null then if b->bound.lower->node.type = token_node
      214 		then	if b->bound.lower->token.type = dec_integer
      215 			then do;
      216 				b->bound.c_lower = token_to_binary((b->bound.lower));
      217 				b->bound.lower = null;
      218 			end;
      219 
      220 		if b->bound.upper^=null then if b->bound.upper->node.type = token_node
      221 		then	if b->bound.upper->token.type = dec_integer
      222 			then do;
      223 				b->bound.c_upper = token_to_binary((b->bound.upper));
      224 				b->bound.upper = null;
      225 			end;
      226 
      227 /* if this is an auto or defined array evaluate its bounds in the prologue.  If any
      228*   multiplier is an expression evaluate it in the prologue.	*/
      229 
      230 		if s->symbol.auto | s->symbol.defined
      231 		then do;
      232 			if b->bound.lower ^= null
      233 				then b->bound.lower = assignf(b->bound.lower);
      234 			if b->bound.upper ^= null
      235 				then b->bound.upper = assignf(b->bound.upper);
      236 			if m->node.type = operator_node
      237 				then m = assignf((m));
      238 		end;
      239 
      240 /* If this is a star extent array the multipliers are given by the descriptor.
      241*   Otherwise we compute them and save them in the bound nodes.  */
      242 
      243 		if ^(s->symbol.star_extents & s->symbol.parameter)
      244 		then do;
      245 			b->bound.multiplier = m;
      246 			b->bound.c_multiplier = cm;
      247 			if s->symbol.controlled & b->bound.desc_multiplier ^= null
      248 			then b->bound.symtab_multiplier = dm;
      249 			else b->bound.desc_multiplier = dm;
      250 			b->bound.c_desc_multiplier = cdm;
      251 		end;
      252 
      253 /* add this term to the virtual origin.				*/
      254 
      255 		call virtue(a,b);
      256 
      257 /* develop the next multiplier.	*/
      258 
      259 		if b->bound.lower = null
      260 		then	if b->bound.c_lower = 1
      261 			then	if b->bound.upper = null
      262 				then	if cm = 0
      263 					then do;
      264 						m = multf(m,declare_constant$integer((b->bound.c_upper)));
      265 						cm = 0;
      266 						dm = multf(dm,declare_constant$integer((b->bound.c_upper)));
      267 						cdm = 0;
      268 					end;
      269 					else do;
      270 						m = null;
      271 (size):						cm = b->bound.c_upper*cm;
      272 						dm = null;
      273 (size):						cdm = b->bound.c_upper*cdm;
      274 					end;
      275 				else do;
      276 					m = multf(m,(b->bound.upper));
      277 					cm = 0;
      278 					dm = multf(dm,(b->bound.upper));
      279 					cdm = 0;
      280 				end;
      281 			else do;
      282 				c = b->bound.c_lower-1;
      283 				if b->bound.upper = null
      284 				then do;
      285 					c = b->bound.c_upper-c;
      286 					if cm = 0
      287 					then do;
      288 						m = multf(m,declare_constant$integer((c)));
      289 						cm = 0;
      290 						dm = multf(dm,declare_constant$integer((c)));
      291 						cdm = 0;
      292 					end;
      293 					else do;
      294 						m = null;
      295 (size):						cm = c*cm;
      296 						dm = null;
      297 (size):						cdm = c*cdm;
      298 					end;
      299 				end;
      300 				else do;
      301 					t = subf(b->bound.upper,declare_constant$integer((c)));
      302 					m = multf(m,t);
      303 					cm = 0;
      304 					dm = multf(dm,t);
      305 					cdm = 0;
      306 				end;
      307 			end;
      308 
      309 		else do;
      310 			if b->bound.upper = null
      311 				then t = subf(declare_constant$integer(b->bound.c_upper+1),b->bound.lower);
      312 				else t = subf(b->bound.upper,subf(b->bound.lower,declare_constant$integer(1)));
      313 			m = multf(m,t);
      314 			cm = 0;
      315 			dm = multf(dm,t);
      316 			cdm = 0;
      317 		end;
      318 
      319 		if cm<0
      320 		then	call pl1_stat_$util_error(168,s);
      321 		else	if cm = 0
      322 			then	if m = null
      323 				then	call pl1_stat_$util_abort(168,s);
      324 
      325 		a->array.number_of_dimensions = a->array.number_of_dimensions+1;
      326 	end;
      327 
      328 /* the last multiplier gives the total array size exclusive of any
      329*   rounding forced by succeeding structure members.		*/
      330 
      331 /* record the total size of the array measured in bits.	*/
      332 
      333 	s->symbol.bit_size = null;
      334 	s->symbol.c_bit_size = 0;
      335 	c = factor(a->array.offset_units);
      336 
      337 	if cm = 0
      338 	then	if c = 1
      339 		then	s->symbol.bit_size = m;
      340 		else	s->symbol.bit_size = multf(m,declare_constant$integer((c)));
      341 	else
      342 (size):		s -> symbol.c_bit_size = cm * c;
      343 
      344 /* store the array size in the symbol node.	*/
      345 	s->symbol.word_size = m;
      346 	s->symbol.c_word_size = cm;
      347 
      348 /* if this is a structure copy its bounds and multipliers onto all contained members
      349*   at every level. */
      350 
      351 	if s->symbol.structure then call interleaved(s);
      352 
      353 	if is_packed_star_param
      354 	then	units = a->array.offset_units;
      355 	else	units = max(units,a->array.offset_units);
      356 
      357 	return;
      358 
      359 /* subroutine to make a prologue assignment. */
      360 
      361 assignf: proc(e) returns(ptr);
      362 
      363 dcl	e ptr unal,
      364 	(p,q) ptr;
      365 
      366 	q = create_operator(assign,2);
      367 	q->operand(2) = e;
      368 	p,q->operand(1) = declare_integer(blk);
      369 	p->reference.symbol->symbol.c_dcl_size = max_offset_precision;
      370 	p = create_statement$prologue(assignment_statement,blk,null,(blk->block.prefix));
      371 	p->statement.root = copy_expression((q));
      372 
      373 	return(q->operand(1));
      374 
      375 	end;
      376 
      377 
      378 /* subroutine to create expressions. */
      379 
      380 addf:	proc(e1,e2) returns(ptr);
      381 
      382 dcl	(e1,e2) ptr unal,
      383 	q ptr;
      384 dcl	opcode bit(9) aligned;
      385 
      386 	if e1 = null then return(e2);
      387 	opcode = add;
      388 	go to common;
      389 
      390 subf:	entry(e1,e2) returns(ptr);
      391 
      392 	opcode = sub;
      393 
      394 common:
      395 	q = create_operator(opcode,3);
      396 	q->operand(2) = e1;
      397 	q->operand(3) = e2;
      398 
      399 	return(q);
      400 
      401 	end;
      402 
      403 multf:	proc(e1,e2) returns(ptr);
      404 
      405 dcl	(e1,e2) ptr;
      406 
      407 dcl	(arg(2), q) ptr,
      408 	i fixed bin(15),
      409 	based_integer fixed bin(35) based;
      410 
      411 	arg(1) = e1;
      412 	arg(2) = e2;
      413 
      414 	do i=1 to 2;
      415 		if arg(i)->node.type=reference_node
      416 		then	if arg(i)->reference.symbol->node.type=symbol_node
      417 			then	if arg(i)->reference.symbol->symbol.constant
      418 				then	if arg(i)->reference.symbol->symbol.initial->based_integer=0
      419 					then	return(arg(i));
      420 					else	if arg(i)->reference.symbol->symbol.initial->based_integer=1
      421 						then	return(arg(3-i));
      422 	end;
      423 
      424 	q = create_operator((mult),3);
      425 	q->operand(2) = e1;
      426 	q->operand(3) = e2;
      427 
      428 	return(q);
      429 
      430 	end;
      431 
      432 /* subroutine to add a term to the virtual origin. */
      433 
      434 virtue: proc(a,b);
      435 
      436 dcl	(a,b) ptr;
      437 
      438 	if b->lower = null
      439 	then	if b->c_lower = 1
      440 		then	if b->c_multiplier = 0
      441 			then	a->virtual_origin = addf(a->virtual_origin,b->multiplier);
      442 			else	a->c_virtual_origin = a->c_virtual_origin+b->c_multiplier;
      443 		else	if b->c_multiplier = 0
      444 			then	a->virtual_origin = addf(a->virtual_origin,multf((b->multiplier),
      445 					declare_constant$integer((b->c_lower))));
      446 			else	a->c_virtual_origin = a->c_virtual_origin+b->c_multiplier*b->c_lower;
      447 	else	a->virtual_origin = addf(a->virtual_origin,multf((b->multiplier),(b->lower)));
      448 
      449 	end virtue;
      450 
      451 /* subroutine to distribute the bounds and multipliers of a dimensioned structure onto
      452*   all of its contained members at every level.  The virtual origin of the members
      453*   is recomputed to include the bounds inherited from its containing structures. */
      454 
      455 interleaved: proc(d);
      456 
      457 dcl	(equal,packed_eq) bit(1);
      458 dcl	(d,p,q,a1,b,b1,v) ptr;
      459 
      460 dcl	create_array entry returns(ptr);
      461 dcl	create_bound entry returns(ptr);
      462 
      463 	do p = d->symbol.son repeat p->symbol.brother while(p^=null);
      464 		a1=p->symbol.array;
      465 		packed_eq = s->symbol.packed = p->symbol.packed;
      466 		if a1=null
      467 		then do;
      468 			p->symbol.dimensioned = "1"b;
      469 			equal = "1"b;
      470 			p->symbol.array,a1 = create_array();
      471 			a1->array=a->array;
      472 			a1->array.number_of_dimensions  ,
      473 			a1->array.own_number_of_dimensions  ,
      474 			a1->array.c_virtual_origin=0;
      475 			a1->array.virtual_origin=null;
      476 			a1->array.element_size_bits = p->symbol.bit_size;
      477 			a1->array.c_element_size_bits = p->symbol.c_bit_size;
      478 			a1->array.element_size = p->symbol.word_size;
      479 			a1->array.c_element_size = p->symbol.c_word_size;
      480 			a1->array.element_boundary = p->symbol.boundary;	/* Fixes 1801. */
      481 			b1=null;
      482 		end;
      483 		else do;
      484 			equal = a->array.offset_units = a1->array.offset_units;
      485 			if ^equal
      486 			then do;
      487 				a1->array.offset_units = bit_;
      488 				a1->array.c_virtual_origin = 0;
      489 				a1->array.virtual_origin = null;
      490 				a1->array.element_size = a1->array.element_size_bits;
      491 				a1->array.c_element_size = a1->array.c_element_size_bits;
      492 			end;
      493 
      494 			do b = a1->array.bounds repeat b->bound.next while(b^=null);
      495 				if ^equal
      496 				then do;
      497 					b->bound.multiplier = b->bound.desc_multiplier;
      498 					b->bound.c_multiplier = b->bound.c_desc_multiplier;
      499 					call virtue(a1,b);
      500 				end;
      501 
      502 				b1 = b;
      503 			end;
      504 		end;
      505 
      506 /* this code copies the bounds from the father to the son */
      507 /* If "equal" the multipliers are copied without change, otherwise the descriptor
      508*   multipliers are used as the standard multipliers and their units are converted to
      509*   bits when necessary.	*/
      510 
      511 		p->symbol.exp_extents   = d->symbol.exp_extents;
      512 		p->symbol.refer_extents = d->symbol.refer_extents;
      513 		p->symbol.star_extents  = d->symbol.star_extents;
      514 		a1->array.interleaved = "1"b;
      515 		p->symbol.connected = "0"b;
      516 		p->symbol.reference->reference.array_ref = "1"b;
      517 
      518 		do b = a->array.bounds repeat b->bound.next while(b^=null);
      519 			q = create_bound();
      520 			q->bound=b->bound;
      521 			q->bound.next=null;
      522 			q->bound.lower = copy_expression(b->bound.lower);
      523 			q->bound.upper = copy_expression(b->bound.upper);
      524 
      525 			if equal
      526 			then do;
      527 				q->bound.multiplier = copy_expression(b->bound.multiplier);
      528 				q->bound.c_multiplier = b->bound.c_multiplier;
      529 				if packed_eq
      530 				then do;
      531 					q->bound.desc_multiplier = copy_expression(b->bound.desc_multiplier);
      532 					q->bound.c_desc_multiplier = b->bound.c_desc_multiplier;
      533 				end;
      534 				else do;
      535 					q->bound.desc_multiplier = copy_expression(multf((b->bound.desc_multiplier),
      536 							declare_constant$integer(bits_per_word)));
      537 					q->bound.c_desc_multiplier = b->bound.c_desc_multiplier*bits_per_word;
      538 				end;
      539 			end;
      540 			else do;
      541 				if s->symbol.packed & p->symbol.packed
      542 				then do;
      543 					q->bound.c_multiplier = b->bound.c_desc_multiplier;
      544 					q->bound.multiplier = copy_expression(b->bound.desc_multiplier);
      545 					q->bound.c_desc_multiplier = b->bound.c_desc_multiplier;
      546 					q->bound.desc_multiplier = q->bound.multiplier;
      547 				end;
      548 				else do;
      549 					q->bound.c_multiplier = b->bound.c_desc_multiplier*bits_per_word;
      550 					q->bound.multiplier = copy_expression(multf((b->bound.desc_multiplier),
      551 							declare_constant$integer(bits_per_word)));
      552 					q->bound.c_desc_multiplier = q->bound.c_multiplier;
      553 					q->bound.desc_multiplier = q->bound.multiplier;
      554 				end;
      555 
      556 				call virtue(a1,q);
      557 			end;
      558 
      559 /*  get the next bound.	*/
      560 
      561 			if b1 = null
      562 			then	a1->array.bounds = q;
      563 			else	b1->bound.next = q;
      564 
      565 			b1 = q;
      566 		end;
      567 
      568 /* add the structure's number of dimensions to the member's number of dims */
      569 
      570 		a1->array.number_of_dimensions=a1->array.number_of_dimensions+
      571 			a->array.number_of_dimensions;
      572 
      573 /* add the structure's virtual origin to the member's virtual origin */
      574 
      575 		if equal
      576 		then do;
      577 			a1->array.virtual_origin = addf(a1->array.virtual_origin,a->array.virtual_origin);
      578 			a1->array.c_virtual_origin = a1->array.c_virtual_origin +
      579 					a->array.c_virtual_origin;
      580 		end;
      581 
      582 		if p->symbol.structure
      583 		then	call interleaved(p);
      584 	end;
      585 
      586 	end interleaved;
      587 
      588 /* include files */
      589 
  1     1 /****^  *********************************************************
  1     2*        *                                                       *
  1     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  1     4*        *                                                       *
  1     5*        ********************************************************* */
  1     6 
  1     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  1     8 
  1     9 
  1    10 /****^  HISTORY COMMENTS:
  1    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  1    12*     install(89-07-31,MR12.3-1066):	
  1    13*     Removed the obsolete parameter source_line from the dcl of error_().
  1    14*                                                   END HISTORY COMMENTS */
  1    15 
  1    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  1    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  1    18* */
  1    19 
  1    20 declare	adjust_count	entry(pointer);
  1    21 			/* parameter 1:	(input)	any node pointer		*/
  1    22 
  1    23 declare	bindec		entry(fixed bin(31)) reducible
  1    24 			returns(character(12) aligned);
  1    25 			/* parameter 1:	(input)	bin value			*/
  1    26 			/* return:	(output)	character value with blanks	*/
  1    27 
  1    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  1    29 			returns(character(12) aligned varying);
  1    30 			/* parameter 1:	(input)	binary value		*/
  1    31 			/* return:	(output)	char value without blanks	*/
  1    32 
  1    33 declare	binoct		entry(fixed bin(31)) reducible
  1    34 			returns(char(12) aligned);
  1    35 			/* parameter 1:	(input)	binary value		*/
  1    36 			/* return:	(output)	char value with blanks	*/
  1    37 
  1    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  1    39 			returns(char(12) aligned);
  1    40 			/* parameter 1:	(input)	binary value		*/
  1    41 			/* return:	(output)	right-aligned char value	*/
  1    42 
  1    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  1    44 			returns(char(12) varying aligned);
  1    45 			/* parameter 1:	(input)	binary value		*/
  1    46 			/* returns:	(output)	char value without blanks	*/
  1    47 
  1    48 declare	compare_expression	entry(pointer,pointer) reducible
  1    49 			returns(bit(1) aligned);
  1    50 			/* parameter 1:	(input)	any node pointer		*/
  1    51 			/* parameter 2:	(input)	any node pointer		*/
  1    52 			/* return:	(output)	compare bit		*/
  1    53 
  1    54 declare	constant_length	entry (pointer, fixed bin (71))
  1    55 			returns (bit (1) aligned);
  1    56 			/* parameter 1:	(input)	reference node pointer	*/
  1    57 			/* parameter 2:	(input)	value of constant length	*/
  1    58 			/* return:	(output)	"1"b if constant length	*/
  1    59 
  1    60 declare	convert		entry(pointer,bit(36) aligned)
  1    61 			returns(pointer);
  1    62 			/* parameter 1:	(input)	any node pointer		*/
  1    63 			/* parameter 2:	(input)	target type		*/
  1    64 			/* return:	(output)	target value tree pointer	*/
  1    65 
  1    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  1    67 			returns(pointer);
  1    68 			/* parameter 1:	(input)	any node pointer		*/
  1    69 			/* parameter 2:	(input)	target type		*/
  1    70 			/* return:	(output)	target value tree pointer	*/
  1    71 
  1    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  1    73 			returns(pointer);
  1    74 			/* parameter 1:	(input)	any node pointer		*/
  1    75 			/* parameter 2:	(input)	target type		*/
  1    76 			/* return:	(output)	target value tree pointer	*/
  1    77 
  1    78 declare	convert$validate	entry(pointer,pointer);
  1    79 			/* parameter 1:	(input)	source value tree pointer	*/
  1    80 			/* parameter 2:	(input)	target reference node pointer	*/
  1    81 
  1    82 declare	convert$to_target_fb entry(pointer,pointer)
  1    83 			returns(pointer);
  1    84 			/* parameter 1:	(input)	source value tree pointer	*/
  1    85 			/* parameter 2:	(input)	target reference node pointer	*/
  1    86 			/* return:	(output)	target value tree pointer	*/
  1    87 
  1    88 declare	convert$to_target	entry(pointer,pointer)
  1    89 			returns(pointer);
  1    90 			/* parameter 1:	(input)	source value tree pointer	*/
  1    91 			/* parameter 2:	(input)	target reference node pointer	*/
  1    92 			/* return:	(output)	target value tree pointer	*/
  1    93 
  1    94 declare	copy_expression	entry(pointer unaligned)
  1    95 			returns(pointer);
  1    96 			/* parameter 1:	(input)	any node pointer		*/
  1    97 			/* return:	(output)	any node pointer		*/
  1    98 
  1    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  1   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  1   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  1   102 
  1   103 declare	copy_unique_expression entry(pointer)
  1   104 			returns(pointer);
  1   105 			/* parameter 1:	(input)	any node pointer		*/
  1   106 			/* return:	(output)	any node pointer		*/
  1   107 
  1   108 declare	create_array	entry()
  1   109 			returns(pointer);
  1   110 			/* return:	(output)	array node pointer		*/
  1   111 
  1   112 declare	create_block	entry(bit(9) aligned,pointer)
  1   113 			returns(pointer);
  1   114 			/* parameter 1:	(input)	block type		*/
  1   115 			/* parameter 2:	(input)	father block node pointer	*/
  1   116 			/* return:	(output)	block node pointer		*/
  1   117 
  1   118 declare	create_bound	entry()
  1   119 			returns(pointer);
  1   120 			/* return:	(output)	bound node pointer		*/
  1   121 
  1   122 declare	create_context	entry(pointer,pointer)
  1   123 			returns(pointer);
  1   124 			/* parameter 1:	(input)	block node pointer		*/
  1   125 			/* parameter 2:	(input)	token pointer		*/
  1   126 			/* return:	(output)	context node pointer	*/
  1   127 
  1   128 declare	create_cross_reference entry()
  1   129 			returns(pointer);
  1   130 			/* return:	(output)	cross reference node pointer	*/
  1   131 
  1   132 declare	create_default	entry
  1   133 			returns(pointer);
  1   134 			/* return:	(output)	default node pointer	*/
  1   135 
  1   136 declare	create_identifier	entry()
  1   137 			returns(pointer);
  1   138 			/* return:	(output)	token node pointer		*/
  1   139 
  1   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  1   141 			returns(pointer);
  1   142 			/* parameter 1:	(input)	block node pointer		*/
  1   143 			/* parameter 2:	(input)	token node pointer		*/
  1   144 			/* parameter 3:	(input)	declare type		*/
  1   145 			/* return:	(output)	label node pointer		*/
  1   146 
  1   147 declare	create_list	entry(fixed bin(15))
  1   148 			returns(pointer);
  1   149 			/* parameter 1:	(input)	number of list elements	*/
  1   150 			/* return:	(output)	list node pointer		*/
  1   151 
  1   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  1   153 			returns(pointer);
  1   154 			/* parameter 1:	(input)	operator type		*/
  1   155 			/* parameter 2:	(input)	number of operands		*/
  1   156 			/* return:	(output)	operator node pointer	*/
  1   157 
  1   158 declare	create_reference	entry(pointer)
  1   159 			returns(pointer);
  1   160 			/* parameter 1:	(input)	symbol node pointer		*/
  1   161 			/* return:	(output)	reference node pointer	*/
  1   162 
  1   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  1   164 			returns(pointer);
  1   165 			/* parameter 1:	(input)	statement type		*/
  1   166 			/* parameter 2:	(input)	block node pointer		*/
  1   167 			/* parameter 3:	(input)	label node pointer		*/
  1   168 			/* parameter 4:	(input)	conditions		*/
  1   169 			/* return:	(output)	statement node pointer	*/
  1   170 
  1   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  1   172 			returns(pointer);
  1   173 			/* parameter 1:	(input)	statement type		*/
  1   174 			/* parameter 2:	(input)	block node pointer		*/
  1   175 			/* parameter 3:	(input)	label node pointer		*/
  1   176 			/* parameter 4:	(input)	conditions		*/
  1   177 			/* return:	(output)	statement node pointer	*/
  1   178 
  1   179 declare	create_storage	entry(fixed bin(15))
  1   180 			returns(pointer);
  1   181 			/* parameter 1:	(input)	number of words		*/
  1   182 			/* return:	(output)	storage block pointer	*/
  1   183 
  1   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  1   185 			returns(pointer);
  1   186 			/* parameter 1:	(input)	block node pointer		*/
  1   187 			/* parameter 2:	(input)	token node pointer		*/
  1   188 			/* parameter 3:	(input)	declare type		*/
  1   189 			/* return:	(output)	symbol node pointer		*/
  1   190 
  1   191 declare	create_token	entry (character (*), bit (9) aligned)
  1   192 			returns (ptr);
  1   193 			/* parameter 1:	(input)	token string		*/
  1   194 			/* parameter 2:	(input)	token type		*/
  1   195 			/* return:	(output)	token node ptr		*/
  1   196 
  1   197 declare	create_token$init_hash_table entry ();
  1   198 
  1   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  1   200 			returns (ptr);
  1   201 			/* parameter 1:	(input)	token string		*/
  1   202 			/* parameter 2:	(input)	token type		*/
  1   203 			/* parameter 3:	(input)	protected flag		*/
  1   204 			/* return:	(output)	token node ptr		*/
  1   205 
  1   206 declare	decbin		entry(character(*) aligned) reducible
  1   207 			returns(fixed bin(31));
  1   208 			/* parameter 1:	(input)	decimal character string	*/
  1   209 			/* return:	(output)	binary value		*/
  1   210 
  1   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  1   212 			returns(pointer);
  1   213 			/* parameter 1:	(input)	value			*/
  1   214 			/* parameter 2:	(input)	type			*/
  1   215 			/* parameter 3:	(input)	size			*/
  1   216 			/* parameter 4:	(input)	scale			*/
  1   217 			/* return:	(output)	reference node pointer	*/
  1   218 
  1   219 declare	declare_constant$bit entry(bit(*) aligned)
  1   220 			returns(pointer);
  1   221 			/* parameter 1:	(input)	bit			*/
  1   222 			/* return:	(output)	reference node pointer	*/
  1   223 
  1   224 declare	declare_constant$char entry(character(*) aligned)
  1   225 			returns(pointer);
  1   226 			/* parameter 1:	(input)	character			*/
  1   227 			/* return:	(output)	reference node pointer	*/
  1   228 
  1   229 declare	declare_constant$desc entry(bit(*) aligned)
  1   230 			returns(pointer);
  1   231 			/* parameter 1:	(input)	descriptor bit value	*/
  1   232 			/* return:	(output)	reference node pointer	*/
  1   233 
  1   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  1   235 			returns(pointer);
  1   236 			/* parameter 1:	(input)	integer			*/
  1   237 			/* return:	(output)	reference node pointer	*/
  1   238 
  1   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  1   240 			returns(pointer);
  1   241 			/* parameter 1:	(input)	block node pointer		*/
  1   242 			/* parameter 2:	(input)	statement node pointer	*/
  1   243 			/* parameter 3:	(input)	symbol node pointer		*/
  1   244 			/* parameter 4:	(input)	loc pointer		*/
  1   245 			/* parameter 5:	(input)	array descriptor bit
  1   246*						cross_section bit	*/
  1   247 			/* return:	(output)	reference node pointer	*/
  1   248 
  1   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  1   250 			returns(pointer);
  1   251 			/* parameter 1:	(input)	block node pointer	*/
  1   252 			/* parameter 2:	(input)	statement node pointer 	*/
  1   253 			/* parameter 3:	(input)	symbol node pointer	*/
  1   254 			/* parameter 4:	(input)	loc pointer	*/
  1   255 			/* parameter 5:	(input)	array descriptor bit
  1   256*						cross_section bit	*/
  1   257 			/* return:	(output)	reference node pointer	*/
  1   258 
  1   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  1   260 			returns(pointer);
  1   261 			/* parameter 1:	(input)	block node pointer		*/
  1   262 			/* parameter 2:	(input)	statement node pointer	*/
  1   263 			/* parameter 3:	(input)	symbol node pointer		*/
  1   264 			/* parameter 4:	(input)	loc pointer		*/
  1   265 			/* parameter 5:	(input)	array descriptor bit
  1   266*						cross_section bit	*/
  1   267 			/* return:	(output)	reference node pointer	*/
  1   268 
  1   269 declare	declare_integer	entry(pointer)
  1   270 			returns(pointer);
  1   271 			/* parameter 1:	(input)	block node pointer		*/
  1   272 			/* return:	(output)	reference node pointer 	*/
  1   273 
  1   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  1   275 			/* parameter 1:	(input)	picture string		*/
  1   276 			/* parameter 2:	(input)	symbol node pointer		*/
  1   277 			/* parameter 3:	(output)	error code, if any		*/
  1   278 
  1   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  1   280 			returns(pointer);
  1   281 			/* parameter 1:	(input)	picture string		*/
  1   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  1   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  1   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  1   285 			/* return:	(output)	reference node pointer	*/
  1   286 
  1   287 declare	declare_pointer	entry(pointer)
  1   288 			returns(pointer);
  1   289 			/* parameter 1:	(input)	block node pointer		*/
  1   290 			/* return:	(output)	reference node pointer	*/
  1   291 
  1   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  1   293 			returns(pointer);
  1   294 			/* parameter 1:	(input)	type			*/
  1   295 			/* parameter 2:	(input)	precision			*/
  1   296 			/* parameter 3:	(input)	scale			*/
  1   297 			/* parameter 4:	(input)	length			*/
  1   298 			/* return:	(output)	reference node pointer	*/
  1   299 
  1   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  1   301 			returns(char(120) varying);
  1   302 			/* parameter 1:	(input)	node pointer		*/
  1   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  1   304 			/* return:	(output)	source line id		*/
  1   305 
  1   306 declare	decode_source_id	entry(
  2     1 			1 structure unaligned,
  2     2 			  2 /* file_number */	bit(8),
  2     3 			  2 /* line_number */	bit(14),
  2     4 			  2 /* stmt_number */	bit(5),
  1   307 
  1   308 			bit(1) aligned)
  1   309 			returns(char(120) varying);
  1   310 			/* parameter 1:	(input)	source id			*/
  1   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  1   312 			/* return:	(output)	source line id		*/
  1   313 
  1   314 declare	error		entry(fixed bin(15),pointer,pointer);
  1   315 			/* parameter 1:	(input)	error number		*/
  1   316 			/* parameter 2:	(input)	statement node pointer or null*/
  1   317 			/* parameter 3:	(input)	token node pointer 		*/
  1   318 
  1   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  1   320 			/* parameter 1:	(input)	error number		*/
  1   321 			/* parameter 2:	(input)	statement node pointer or null*/
  1   322 			/* parameter 3:	(input)	token node pointer 		*/
  1   323 
  1   324 declare	error_		entry(fixed bin(15),
  3     1 			1 structure unaligned,
  3     2 			  2 /* file_number */	bit(8),
  3     3 			  2 /* line_number */	bit(14),
  3     4 			  2 /* stmt_number */	bit(5),
  1   325 
  1   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  1   327 			/* parameter 1:	(input)	error number		*/
  1   328 			/* parameter 2:	(input)	statement id		*/
  1   329 			/* parameter 3:	(input)	any node pointer		*/
  1   330 			/* parameter 4:	(input)	source segment		*/
  1   331 			/* parameter 5:	(input)	source starting character	*/
  1   332 			/* parameter 6:	(input)	source length		*/
  1   333 
  1   334 declare	error_$no_text	entry(fixed bin(15),
  4     1 			1 structure unaligned,
  4     2 			  2 /* file_number */	bit(8),
  4     3 			  2 /* line_number */	bit(14),
  4     4 			  2 /* stmt_number */	bit(5),
  1   335 
  1   336 			pointer);
  1   337 			/* parameter 1:	(input)	error number		*/
  1   338 			/* parameter 2:	(input)	statement id		*/
  1   339 			/* parameter 3:	(input)	any node pointer		*/
  1   340 
  1   341 declare	error_$initialize_error entry();
  1   342 
  1   343 declare	error_$finish	entry();
  1   344 
  1   345 declare	free_node		entry(pointer);
  1   346 			/* parameter 1:	any node pointer			*/
  1   347 
  1   348 declare	get_array_size	entry(pointer,fixed bin(3));
  1   349 			/* parameter 1:	(input)	symbol node pointer		*/
  1   350 			/* parameter 2:	(input)	units			*/
  1   351 
  1   352 declare	get_size		entry(pointer);
  1   353 			/* parameter 1:	(input)	symbol node pointer		*/
  1   354 
  1   355 declare	merge_attributes	external entry(pointer,pointer)
  1   356 			returns(bit(1) aligned);
  1   357 			/* parameter 1:	(input)	target symbol node pointer */
  1   358 			/* parameter 2:	(input)	source symbol node pointer */
  1   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  1   360 
  1   361 declare	optimizer		entry(pointer);
  1   362 			/* parameter 1:	(input)	root pointer		*/
  1   363 
  1   364 declare	parse_error	entry(fixed bin(15),pointer);
  1   365 			/* parameter 1:	(input)	error number		*/
  1   366 			/* parameter 2:	(input)	any node pointer		*/
  1   367 
  1   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  1   369 			/* parameter 1:	(input)	error number		*/
  1   370 			/* parameter 2:	(input)	any node pointer		*/
  1   371 
  1   372 declare	pl1_error_print$write_out
  1   373 			entry(fixed bin(15),
  5     1 			1 structure unaligned,
  5     2 			  2 /* file_number */	bit(8),
  5     3 			  2 /* line_number */	bit(14),
  5     4 			  2 /* stmt_number */	bit(5),
  1   374 
  1   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  1   376 			/* parameter 1:	(input)	error number		*/
  1   377 			/* parameter 2:	(input)	statement identification	*/
  1   378 			/* parameter 3:	(input)	any node pointer		*/
  1   379 			/* parameter 4:	(input)	source segment		*/
  1   380 			/* parameter 5:	(input)	source character index	*/
  1   381 			/* parameter 6:	(input)	source length		*/
  1   382 			/* parameter 7:	(input)	source line		*/
  1   383 
  1   384 declare	pl1_error_print$listing_segment
  1   385 			entry(fixed bin(15),
  6     1 			1 structure unaligned,
  6     2 			  2 /* file_number */	bit(8),
  6     3 			  2 /* line_number */	bit(14),
  6     4 			  2 /* stmt_number */	bit(5),
  1   386 
  1   387 			pointer);
  1   388 			/* parameter 1:	(input)	error number		*/
  1   389 			/* parameter 2:	(input)	statement identification	*/
  1   390 			/* parameter 3:	(input)	token node pointer		*/
  1   391 
  1   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  1   393 			/* parameter 1:	(input)	string			*/
  1   394 
  1   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  1   396 			/* parameter 1:	(input)	string			*/
  1   397 
  1   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  1   399 			/* parameter 1:	(input)	string			*/
  1   400 			/* parameter 2:	(input)	string length or 0		*/
  1   401 
  1   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  1   403 			/* parameter 1:	(input)	string			*/
  1   404 			/* parameter 2:	(input)	string length or 0		*/
  1   405 
  1   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  1   407 			/* parameter 1:	(input)	string pointer		*/
  1   408 			/* parameter 2:	(input)	string size		*/
  1   409 
  1   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  1   411 			/* parameter 1:	(input)	string pointer		*/
  1   412 			/* parameter 2:	(input)	string length or 0		*/
  1   413 
  1   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  1   415 			/* parameter 1:	(input)	string			*/
  1   416 			/* parameter 2:	(input)	length			*/
  1   417 
  1   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  1   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  1   420 			/* parameter 2:	(input)	line number		*/
  1   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  1   422 			/* parameter 4:	(input)	number of chars to copy	*/
  1   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  1   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  1   425 
  1   426 declare	refer_extent	entry(pointer,pointer);
  1   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  1   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  1   429 
  1   430 declare	reserve$clear	entry()
  1   431 			returns(pointer);
  1   432 			/* return:	(output)	pointer			*/
  1   433 
  1   434 declare	reserve$declare_lib	entry(fixed bin(15))
  1   435 			returns(pointer);
  1   436 			/* parameter 1:	(input)	builtin function number	*/
  1   437 			/* return:	(output)	pointer			*/
  1   438 
  1   439 declare	reserve$read_lib	entry(fixed bin(15))
  1   440 			returns(pointer);
  1   441 			/* parameter 1:	(input)	builtin function number	*/
  1   442 			/* return:	(output)	pointer			*/
  1   443 
  1   444 declare	semantic_translator	entry();
  1   445 
  1   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  1   447 			/* parameter 1:	(input)	error number		*/
  1   448 			/* parameter 2:	(input)	any node pointer		*/
  1   449 
  1   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  1   451 			/* parameter 1:	(input)	error number		*/
  1   452 			/* parameter 2:	(input)	any node pointer		*/
  1   453 
  1   454 declare	share_expression	entry(ptr)
  1   455 			returns(ptr);
  1   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  1   457 			/* return:	(output)	tree pointer or null	*/
  1   458 
  1   459 declare	token_to_binary	entry(ptr) reducible
  1   460 			returns(fixed bin(31));
  1   461 			/* parameter 1:	(input)	token node pointer		*/
  1   462 			/* return:	(output)	converted binary value	*/
  1   463 
  1   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
      590 
  7     1 dcl	1 array			based aligned,
  7     2 	2 node_type		bit(9) unaligned,
  7     3 	2 reserved		bit(34) unaligned,
  7     4 	2 number_of_dimensions	fixed(7) unaligned,
  7     5 	2 own_number_of_dimensions	fixed(7) unaligned,
  7     6 	2 element_boundary		fixed(3) unaligned,
  7     7 	2 size_units		fixed(3) unaligned,
  7     8 	2 offset_units		fixed(3) unaligned,
  7     9 	2 interleaved		bit(1) unaligned,
  7    10 	2 c_element_size		fixed(24),
  7    11 	2 c_element_size_bits	fixed(24),
  7    12 	2 c_virtual_origin		fixed(24),
  7    13 	2 element_size		ptr unaligned,
  7    14 	2 element_size_bits		ptr unaligned,
  7    15 	2 virtual_origin		ptr unaligned,
  7    16 	2 symtab_virtual_origin	ptr unaligned,
  7    17 	2 symtab_element_size	ptr unaligned,
  7    18 	2 bounds			ptr unaligned,
  7    19 	2 element_descriptor	ptr unaligned;
  7    20 
  7    21 dcl	1 bound			based aligned,
  7    22 	2 node_type		bit(9),
  7    23 	2 c_lower			fixed(24),
  7    24 	2 c_upper			fixed(24),
  7    25 	2 c_multiplier		fixed(24),
  7    26 	2 c_desc_multiplier		fixed(24),
  7    27 	2 lower			ptr unaligned,
  7    28 	2 upper			ptr unaligned,
  7    29 	2 multiplier		ptr unaligned,
  7    30 	2 desc_multiplier		ptr unaligned,
  7    31 	2 symtab_lower		ptr unaligned,
  7    32 	2 symtab_upper		ptr unaligned,
  7    33 	2 symtab_multiplier		ptr unaligned,
  7    34 	2 next			ptr unaligned;
      591 
  8     1 /* BEGIN INCLUDE FILE ... block.incl.pl1 */
  8     2 /* Modified 22 Ocober 1980 by M. N. Davidoff to increase max block.number to 511 */
  8     3 /* format: style3,idind30 */
  8     4 
  8     5 declare	1 block			aligned based,
  8     6 	  2 node_type		bit (9) unaligned,
  8     7 	  2 source_id		structure unaligned,
  8     8 	    3 file_number		bit (8),
  8     9 	    3 line_number		bit (14),
  8    10 	    3 statement_number	bit (5),
  8    11 	  2 father		ptr unaligned,
  8    12 	  2 brother		ptr unaligned,
  8    13 	  2 son			ptr unaligned,
  8    14 	  2 declaration		ptr unaligned,
  8    15 	  2 end_declaration		ptr unaligned,
  8    16 	  2 default		ptr unaligned,
  8    17 	  2 end_default		ptr unaligned,
  8    18 	  2 context		ptr unaligned,
  8    19 	  2 prologue		ptr unaligned,
  8    20 	  2 end_prologue		ptr unaligned,
  8    21 	  2 main			ptr unaligned,
  8    22 	  2 end_main		ptr unaligned,
  8    23 	  2 return_values		ptr unaligned,
  8    24 	  2 return_count		ptr unaligned,
  8    25 	  2 plio_ps		ptr unaligned,
  8    26 	  2 plio_fa		ptr unaligned,
  8    27 	  2 plio_ffsb		ptr unaligned,
  8    28 	  2 plio_ssl		ptr unaligned,
  8    29 	  2 plio_fab2		ptr unaligned,
  8    30 	  2 block_type		bit (9) unaligned,
  8    31 	  2 prefix		bit (12) unaligned,
  8    32 	  2 like_attribute		bit (1) unaligned,
  8    33 	  2 no_stack		bit (1) unaligned,
  8    34 	  2 get_data		bit (1) unaligned,
  8    35 	  2 flush_at_call		bit (1) unaligned,
  8    36 	  2 processed		bit (1) unaligned,
  8    37 	  2 text_displayed		bit (1) unaligned,
  8    38 	  2 number		fixed bin (9) unsigned unaligned,
  8    39 	  2 free_temps		dimension (3) ptr,	/* these fields are used by the code generator */
  8    40 	  2 temp_list		ptr,
  8    41 	  2 entry_list		ptr,
  8    42 	  2 o_and_s		ptr,
  8    43 	  2 why_nonquick		aligned,
  8    44 	    3 auto_adjustable_storage bit (1) unaligned,
  8    45 	    3 returns_star_extents	bit (1) unaligned,
  8    46 	    3 stack_extended_by_args	bit (1) unaligned,
  8    47 	    3 invoked_by_format	bit (1) unaligned,
  8    48 	    3 format_statement	bit (1) unaligned,
  8    49 	    3 io_statements		bit (1) unaligned,
  8    50 	    3 assigned_to_entry_var	bit (1) unaligned,
  8    51 	    3 condition_statements	bit (1) unaligned,
  8    52 	    3 no_owner		bit (1) unaligned,
  8    53 	    3 recursive_call	bit (1) unaligned,
  8    54 	    3 options_non_quick	bit (1) unaligned,
  8    55 	    3 options_variable	bit (1) unaligned,
  8    56 	    3 never_referenced	bit (1) unaligned,
  8    57 	    3 pad_nonquick		bit (5) unaligned,
  8    58 	  2 prologue_flag		bit (1) unaligned,
  8    59 	  2 options_main		bit (1) unaligned,
  8    60 	  2 pad			bit (16) unaligned,
  8    61 	  2 number_of_entries	fixed bin (17),
  8    62 	  2 level			fixed bin (17),
  8    63 	  2 last_auto_loc		fixed bin (17),
  8    64 	  2 symbol_block		fixed bin (17),
  8    65 	  2 entry_info		fixed bin (18),
  8    66 	  2 enter			structure unaligned,
  8    67 	    3 start		fixed bin (17),
  8    68 	    3 end			fixed bin (17),
  8    69 	  2 leave			structure unaligned,
  8    70 	    3 start		fixed bin (17),
  8    71 	    3 end			fixed bin (17),
  8    72 	  2 owner			ptr;
  8    73 
  8    74 declare	max_block_number		fixed bin internal static options (constant) initial (511);
  8    75 
  8    76 /* END INCLUDE FILE ... block.incl.pl1 */
      592 
  9     1 /* BEGIN INCLUDE FILE ... boundary.incl.pl1 */
  9     2 
  9     3 /* Modified: 26 Apr 1979 by PCK to implement 4-bit decimal */
  9     4 
  9     5 dcl (	bit_		init(1),
  9     6 	digit_		init(2),
  9     7 	character_	init(3),
  9     8 	half_		init(4),
  9     9 	word_		init(5),
  9    10 	mod2_		init(6),
  9    11 	mod4_		init(7)) fixed bin(3) int static options(constant);
  9    12 
  9    13 /* END INCLUDE FILE ... boundary.incl.pl1 */
      593 
 10     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
 10     2 
 10     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
 10     4 
 10     5 dcl (	block_node		initial("000000001"b),
 10     6 	statement_node		initial("000000010"b),
 10     7 	operator_node		initial("000000011"b),
 10     8 	reference_node		initial("000000100"b),
 10     9 	token_node		initial("000000101"b),
 10    10 	symbol_node		initial("000000110"b),
 10    11 	context_node		initial("000000111"b),
 10    12 	array_node		initial("000001000"b),
 10    13 	bound_node		initial("000001001"b),
 10    14 	format_value_node		initial("000001010"b),
 10    15 	list_node			initial("000001011"b),
 10    16 	default_node		initial("000001100"b),
 10    17 	machine_state_node		initial("000001101"b),
 10    18 	source_node		initial("000001110"b),
 10    19 	label_node		initial("000001111"b),
 10    20 	cross_reference_node	initial("000010000"b),
 10    21 	sf_par_node		initial("000010001"b),
 10    22 	temporary_node		initial("000010010"b),
 10    23 	label_array_element_node	initial("000010011"b),
 10    24 	by_name_agg_node		initial("000010100"b))
 10    25 				bit(9) internal static aligned options(constant);
 10    26 
 10    27 dcl	1 node			based aligned,
 10    28 	2 type			unal bit(9),
 10    29 	2 source_id		unal structure,
 10    30 	  3 file_number		bit(8),
 10    31 	  3 line_number		bit(14),
 10    32 	  3 statement_number	bit(5);
 10    33 
 10    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
      594 
 11     1 /* BEGIN INCLUDE FILE ... op_codes.incl.pl1 */
 11     2 
 11     3 /* Modified: 25 Apr 1979 by PCK 4-bit decimal */
 11     4 /* Modified: 6 Jun 1979 by PG to add rank and byte */
 11     5 /* Modified: 26 Dec 1979 by PCK to add assign_by_name */
 11     6 /* Modified: 26 July 82 BIM wordno, segno */
 11     7 
 11     8 dcl (	add		initial("000010001"b),	/* opnd(1) <- opnd(2)+opnd(3)		*/
 11     9 	sub		initial("000010010"b),	/* opnd(1) <- opnd(2)-opnd(3)		*/
 11    10 	mult		initial("000010011"b),	/* opnd(1) <- opnd(2)*opnd(3)		*/
 11    11 	div		initial("000010100"b),	/* opnd(1) <- opnd(2)/opnd(3)		*/
 11    12 	negate		initial("000010101"b),	/* opnd(1) <- -opnd(2)  		*/
 11    13 	exp		initial("000010110"b),	/* opnd(1) <- opnd(2) ** opnd(3)	*/
 11    14 
 11    15 	and_bits		initial("000100001"b),	/* opnd(1) <- opnd(2) & opnd(3)	*/
 11    16 	or_bits		initial("000100010"b),	/* opnd(1) <- opnd(2)|opnd(3)		*/
 11    17 	xor_bits		initial("000100011"b),	/* opnd(1) <- opnd(2) xor opnd(3)	*/
 11    18 	not_bits		initial("000100100"b),	/* opnd(1) <- ^opnd(2)		*/
 11    19 	cat_string	initial("000100101"b),	/* opnd(1) <- opnd(2)||opnd(3)	*/
 11    20 	bool_fun		initial("000100110"b),	/* opnd(1) <- bool(opnd(2),opnd(3),opnd(4)) */
 11    21 
 11    22 	assign		initial("000110001"b),	/* opnd(1) <- opnd(2)		*/
 11    23 	assign_size_ck	initial("000110010"b),	/* opnd(1) <- opnd(2)		*/
 11    24 	assign_zero	initial("000110011"b),	/* opnd(1) <- 0			*/
 11    25 	copy_words	initial("000110100"b),	/* move opnd(2) to opnd(1) by opnd(3) words */
 11    26 	copy_string	initial("000110101"b),	/* move opnd(2) to opnd(1) by opnd(3) units */
 11    27 	make_desc		initial("000110110"b),	/* opnd(1) <- descriptor(opnd(2),opnd(3)) */
 11    28 	assign_round	initial("000110111"b),	/* opnd(1) <- opnd(2) rounded		*/
 11    29 	pack		initial("000111000"b),	/* opnd(1) <- encode to picture opnd(2) */
 11    30 	unpack		initial("000111001"b),	/* opnd(1) <- decode from picture opnd(2) */
 11    31 
 11    32 	less_than		initial("001000100"b),	/* opnd(1) <- opnd(2) < opnd(3)	*/
 11    33 	greater_than	initial("001000101"b),	/* opnd(1) <- opnd(2) > opnd(3)	*/
 11    34 	equal		initial("001000110"b),	/* opnd(1) <- opnd(2) = opnd(3)	*/
 11    35 	not_equal		initial("001000111"b),	/* opnd(1) <- opnd(2) ^= opnd(3)	*/
 11    36 	less_or_equal	initial("001001000"b),	/* opnd(1) <- opnd(2) <= opnd(3)	*/
 11    37 	greater_or_equal	initial("001001001"b),	/* opnd(1) <- opnd(2) >= opnd(3)	*/
 11    38 
 11    39 	jump		initial("001010001"b),	/* go to opnd(1) unconditionally	*/
 11    40 	jump_true		initial("001010010"b),	/* go to opnd(1) if opnd(2) is not 0	*/
 11    41 	jump_false	initial("001010011"b),	/* go to opnd(1) if opnd(2) is all 0	*/
 11    42 	jump_if_lt	initial("001010100"b),	/* go to opnd(1) if opnd(2) < opnd(3)	*/
 11    43 	jump_if_gt	initial("001010101"b),	/* go to opnd(1) if opnd(2) > opnd(3)	*/
 11    44 	jump_if_eq	initial("001010110"b),	/* go to opnd(1) if opnd(2) = opnd(3)	*/
 11    45 	jump_if_ne	initial("001010111"b),	/* go to opnd(1) if opnd(2) ^= opnd(3)	*/
 11    46 	jump_if_le	initial("001011000"b),	/* go to opnd(1) if opnd(2) <= opnd(3)	*/
 11    47 	jump_if_ge	initial("001011001"b),	/* go to opnd(1) if opnd(2) >= opnd(3)	*/
 11    48 
 11    49 	std_arg_list	initial("001100001"b),	/* opnd(1) <- arglist(opnd(2) desclist(opnd(3)))	*/
 11    50 	return_words	initial("001100010"b),	/* return aggregate opnd(1), opnd(2) is length in words */
 11    51 	std_call		initial("001100011"b),	/* opnd(1) <- call opnd(2) with opnd(3)		*/
 11    52 	return_bits	initial("001100100"b),	/* return aggregate opnd(1), opnd(2) is length in bits */
 11    53 	std_entry		initial("001100101"b),	/* entry(opnd(1)... opnd(n))			*/
 11    54 	return_string	initial("001100110"b),	/* return string opnd(1) */
 11    55 	ex_prologue	initial("001100111"b),	/* execute the prologue -no operands-		*/
 11    56 	allot_auto	initial("001101000"b),	/* opnd(1) <- addrel(stack,opnd(2))		*/
 11    57 	param_ptr		initial("001101001"b),	/* opnd(1) <- ptr to opnd(2) in  block opnd(3)	*/
 11    58 	param_desc_ptr	initial("001101010"b),	/* opnd(1) <- ptr to opnd(2) in block opnd(3)	*/
 11    59 	std_return	initial("001101011"b),	/* return -no arguments-			*/
 11    60 	allot_ctl		initial("001101100"b),	/* allocate opnd(1) , length in words is opnd(2) 	*/
 11    61 	free_ctl		initial("001101101"b),	/* free opnd(1)				*/
 11    62 	stop		initial("001101110"b),	/* stop - terminate run unit			*/
 11    63 
 11    64 	mod_bit		initial("001110000"b),	/* opnd(1) <- mod(opnd(3),36),
 11    65*						   opnd(2) <- opnd(3) / 36		*/
 11    66 	mod_byte		initial("001110001"b),	/* opnd(1) <- mod(opnd(3),4),
 11    67*						   opnd(2) <- opnd(3) / 4		*/
 11    68 	mod_half		initial("001110010"b),	/* opnd(1) <- mod(opnd(3),2),
 11    69*						   opnd(2) <- opnd(3) / 2		*/
 11    70 	mod_word		initial("001110011"b),	/* TO BE DEFINED BY BLW			*/
 11    71 
 11    72 	bit_to_char	initial("010000000"b),	/* opnd(1) <- (opnd(2)+8)/9		*/
 11    73 	bit_to_word	initial("010000001"b),	/* opnd(1) <- (opnd(2)+35)/36		*/
 11    74 	char_to_word	initial("010000010"b),	/* opnd(1) <- (opnd(2)+3)/4		*/
 11    75 	half_to_word	initial("010000011"b),	/* opnd(1) <- (opnd(2)+1)/2		*/
 11    76 	word_to_mod2	initial("010000100"b),	/* opnd(1) <- (opnd(2)+1)/2*2		*/
 11    77 	word_to_mod4	initial("010000101"b),	/* opnd(1) <- (opnd(2)+3)/4*4		*/
 11    78 	word_to_mod8	initial("010000110"b),	/* opnd(1) <- (opnd(2)+7)/8*8		*/
 11    79 	rel_fun		initial("010000111"b),	/* opnd(1) <- rel(opnd(2))		*/
 11    80 	baseno_fun	initial("010001000"b),	/* opnd(1) <- baseno(opnd(2))		*/
 11    81 	desc_size		initial("010001001"b),	/* opnd(1) <- substr(opnd(2),13,24)	*/
 11    82 	bit_pointer	initial("010001010"b),	/* opnd(1) <- bit offset of opnd(2)	*/
 11    83 	index_before_fun	initial("010001011"b),	/* opnd(1) <- length of before(opnd(2),opnd(3)) */
 11    84 	index_after_fun	initial("010001100"b),	/* opnd(1) <- offset of after(opnd(2),opnd(3)) in opnd(2) */
 11    85 	verify_ltrim_fun	initial("010001101"b),	/* opnd(1) <- offset of ltrim(opnd(2),opnd(3)) in opnd(2) */
 11    86 	verify_rtrim_fun	initial("010001110"b),	/* opnd(1) <- length(opnd(2))-length(rtrim(opnd(2),opnd(3))) */
 11    87 	digit_to_bit	initial("010001111"b),	/* opnd(1) <- 9*opnd(2)/2		*/
 11    88 
 11    89 	ceil_fun		initial("010010000"b),	/* opnd(1) <- ceil(opnd(2))		*/
 11    90 	floor_fun		initial("010010001"b),	/* opnd(1) <- floor(opnd(2))		*/
 11    91 	round_fun		initial("010010010"b),	/* opnd(1) <- round(opnd(2))		*/
 11    92 	sign_fun		initial("010010011"b),	/* opnd(1) <- sign(opnd(2))		*/
 11    93 	abs_fun		initial("010010100"b),	/* opnd(1) <- abs(opnd(2))		*/
 11    94 	trunc_fun		initial("010010101"b),	/* opnd(1) <- trunc(opnd(2))		*/
 11    95 	byte_fun		initial("010010110"b),	/* opnd(1) <- byte(opnd(2))		*/
 11    96 	rank_fun		initial("010010111"b),	/* opnd(1) <- rank(opnd(2))		*/
 11    97 	index_rev_fun	initial("010011000"b),	/* opnd(1) <- index(reverse(opnd(2)),reverse(opnd(3))) */
 11    98 	search_rev_fun	initial("010011001"b),	/* opnd(1) <- search(reverse(opnd(2)),opnd(3)) */
 11    99 	verify_rev_fun	initial("010011010"b),	/* opnd(1) <- verify(reverse(opnd(2)),opnd(3)) */
 11   100 	wordno_fun	initial("010011011"b),        /* opnd(1) <- wordno (opnd(2)) */
 11   101 	segno_fun		initial("010011100"b),        /* opnd(1) <- segno (opnd(2)) */
 11   102 	bitno_fun           initial("010011101"b),        /* opnd(1) <- bitno (opnd(2)) */
 11   103 	charno_fun	initial("010011110"b),        /* opnd(1) <- charno (opnd(2)) */
 11   104 
 11   105 	index_fun		initial("010100000"b),	/* opnd(1) <- index(opnd(2),opnd(3))	*/
 11   106 	off_fun		initial("010100001"b),	/* opnd(1) <- offset(opnd(2),opnd(3))	*/
 11   107 	complex_fun	initial("010100010"b),	/* opnd(1) <- complex(opnd(2),opnd(3))	*/
 11   108 	conjg_fun		initial("010100011"b),	/* opnd(1) <- conjg(opnd(2),opnd(3))	*/
 11   109 	mod_fun		initial("010100100"b),	/* opnd(1) <- mod(opnd(2),opnd(3))	*/
 11   110 	repeat_fun	initial("010100101"b),	/* opnd(1) <- repeat(opnd(2),opnd(3))	*/
 11   111 	verify_fun	initial("010100110"b),	/* opnd(1) <- verify(opnd(2),opnd(3))	*/
 11   112 	translate_fun	initial("010100111"b),	/* opnd(1) <- translate(opnd(2),opnd(3))*/
 11   113 	real_fun   	initial("010101001"b),	/* opnd(1) <- real(opnd(2))		*/
 11   114 	imag_fun   	initial("010101010"b),	/* opnd(1) <- imag(opnd(2))		*/
 11   115 	length_fun	initial("010101011"b),	/* opnd(1) <- length(opnd(2))	*/
 11   116 	pl1_mod_fun	initial("010101100"b),	/* opnd(1) <- mod(opnd(2)) */
 11   117 	search_fun	initial("010101101"b),	/* opnd(1) <- search(opnd(2),opnd(3)) */
 11   118 	allocation_fun	initial("010101110"b),	/* opnd(1) <- allocation(opnd(2)) */
 11   119 	reverse_fun	initial("010101111"b),	/* opnd(1) <- reverse(opnd(2)) */
 11   120 
 11   121 	addr_fun		initial("010110000"b),	/* opnd(1) <- addr(opnd(2))		*/
 11   122 	addr_fun_bits	initial("010110001"b),	/* opnd(1) <- addr(opnd(2))		*/
 11   123 	ptr_fun		initial("010110010"b),	/* opnd(1) <- ptr(opnd(2),opnd(3))	*/
 11   124 	baseptr_fun	initial("010110011"b),	/* opnd(1) <- baseptr(opnd(2))	*/
 11   125 	addrel_fun	initial("010110100"b),	/* opnd(1) <- addrel(opnd(2),opnd(3))	*/
 11   126 	codeptr_fun	initial("010110101"b),	/* opnd(1) <- codeptr(opnd(2))	*/
 11   127 	environmentptr_fun	initial("010110110"b),	/* opnd(1) <- environmentptr(opnd(2))	*/
 11   128 	stackbaseptr_fun	initial("010110111"b),	/* opnd(1) is ptr to base of current stack	*/
 11   129 	stackframeptr_fun	initial("010111000"b),	/* opnd(1) is ptr to current block's stack frame	*/
 11   130 	setcharno_fun	initial("010111001"b),	/* opnd(1) <- opnd(2) with charno opnd(3) */
 11   131 	addcharno_fun	initial("010111010"b),	/* opnd(1) <- opnd(2) with charno = charno + opnd(3) */
 11   132 	setbitno_fun	initial("010111011"b),	/* setcharno for bitsno */
 11   133 	addbitno_fun	initial("010111100"b),	/* addcharno for bitno */
 11   134 
 11   135 	min_fun		initial("011000000"b),	/* opnd(1) <- min(opnd(1),opnd(2),...)	*/
 11   136 	max_fun		initial("011000001"b),	/* opnd(1) <- max(opnd(1),opnd(2),...)	*/
 11   137 
 11   138 	stack_ptr		initial("011010001"b),	/* opnd(1) <- stack frame ptr		*/
 11   139 	empty_area	initial("011010010"b),	/* empty opnd(1), length in words is opnd(2) */
 11   140 	enable_on		initial("011010100"b),	/* opnd(1) is the cond name
 11   141*						   opnd(2) is the file name
 11   142*						   opnd(3) is the block	*/
 11   143 	revert_on		initial("011010101"b),	/* opnd(1) is the cond name,
 11   144*						   opnd(2) is the file name	*/
 11   145 	signal_on		initial("011010110"b),	/* opnd(1) is the cond name
 11   146*						   opnd(2) is the file name */
 11   147 
 11   148 	lock_fun		initial("011010111"b),	/* opnd(1) <- stac(opnd(2),opnd(3))	*/
 11   149 	stacq_fun		initial("011011000"b),	/* opnd(1) is result, opnd(2) is ptr to lock word,
 11   150*						   opnd(3) is old value, (4) is new value. */
 11   151 	clock_fun		initial("011011001"b),	/* opnd(1) is the clock time		*/
 11   152 	vclock_fun	initial("011011010"b),	/* opnd(1) is the virtual clock time	*/
 11   153 
 11   154 	bound_ck		initial("011100000"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 11   155 	range_ck		initial("011100001"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 11   156 	loop		initial("011100010"b),	/* do opnd(1) for opnd(2) from opnd(3) to opnd(4) by 1,
 11   157*						   opnd(5) is the list */
 11   158 	join		initial("011100011"b),	/* do opnd(1), opnd(2) ... opnd(n)	*/
 11   159 	allot_based	initial("011100100"b),	/* allocate opnd(2) words in opnd(3), set opnd(1) */
 11   160 	free_based	initial("011100101"b),	/* free opnd(1) in opnd(3), length is opnd(2) words */
 11   161 
 11   162 	r_parn		initial("011110001"b),	/* format op code			*/
 11   163 	l_parn		initial("011110010"b),
 11   164 	r_format		initial("011110011"b),
 11   165 	c_format		initial("011110100"b),
 11   166 	f_format		initial("011110101"b),
 11   167 	e_format		initial("011110110"b),
 11   168 	b_format		initial("011110111"b),
 11   169 	a_format		initial("011111000"b),
 11   170 	x_format		initial("011111001"b),
 11   171 	skip_format	initial("011111010"b),
 11   172 	column_format	initial("011111011"b),
 11   173 	page_format	initial("011111100"b),
 11   174 	line_format	initial("011111101"b),
 11   175 	picture_format	initial("011111110"b),
 11   176 	bn_format		initial("011111111"b),	/* bit format, length(opnd(2)), radix factor(opnd(3)) */
 11   177 
 11   178 	get_list_trans	initial("100000000"b),	/* getlist(opnd(2) with desc(opnd(1)))	*/
 11   179 	get_edit_trans	initial("100000001"b),	/* getedit(opnd(2) with desc(opnd(1)))	*/
 11   180 	get_data_trans	initial("100000010"b),	/* getdata(opnd(1) to opnd(n))	*/
 11   181 	put_list_trans	initial("100000011"b),	/* putlist(opnd(2) with desc(opnd(1)))	*/
 11   182 	put_edit_trans	initial("100000100"b),	/* putedit(opnd(2) with desc(opnd(1)))	*/
 11   183 	put_data_trans	initial("100000101"b),	/* putdata(opnd(2)) with subscript-list opnd(1) */
 11   184 	terminate_trans	initial("100000110"b),	/* terminate stream transmission	*/
 11   185 	stream_prep	initial("100000111"b),	/* initiate stream transmission	*/
 11   186 	record_io		initial("100001000"b),	/* perform record io operation	*/
 11   187 	fortran_read	initial("100001001"b),	/* A complete read statement		*/
 11   188 	fortran_write	initial("100001010"b),	/* A complete write statement		*/
 11   189 	ftn_file_manip	initial("100001011"b),	/* endfile,backspace,rewind,etc.	*/
 11   190 	ftn_trans_loop	initial("100001100"b),	/* An implied do in i/o list		*/
 11   191 	put_control	initial("100001101"b),	/* put control opnd(1) opnd(2) times	*/
 11   192 	put_field		initial("100001110"b),	/* putlist(opnd(2)) of length(opnd(1))	*/
 11   193 	put_field_chk	initial("100001111"b),	/* putlist(op(2)) of len(op(1)) check char index(op(3)) */
 11   194 
 11   195 /* These operators are produced by the parse but are not used as input to the code generator.	*/
 11   196 /* They are processed by the semantic translator.						*/
 11   197 
 11   198 	return_value	initial("100010010"b),	/* return(opnd(1))			*/
 11   199 	allot_var		initial("100010011"b),	/* allot opnd(1) in opnd(2)		*/
 11   200 	free_var		initial("100010100"b),	/* free opnd(1) out of opnd(2)	*/
 11   201 	get_file		initial("100010101"b),	/* opnd(1) is filename,opnd(2) is copy	*/
 11   202 						/* opnd(3) is skip, opnd(4) is list	*/
 11   203 	get_string	initial("100010110"b),	/* opnd(1) is string,opnd(2) is list	*/
 11   204 	put_file		initial("100010111"b),	/* opnd(1) is filename,opnd(2) is page	*/
 11   205 						/* opnd(3) is skip,opnd(4) is line	*/
 11   206 	put_string	initial("100011000"b),	/* opnd(1) is string,opnd(2) is list	*/
 11   207 	open_file		initial("100011001"b),
 11   208 	close_file	initial("100011010"b),
 11   209 	read_file		initial("100011011"b),
 11   210 	write_file	initial("100011100"b),
 11   211 	locate_file	initial("100011101"b),
 11   212 	do_fun		initial("100011110"b),	/* opnd(1) is join of a list		*/
 11   213 						/* opnd(2) is control variable ref	*/
 11   214 						/* opnd(3) is specification operator	*/
 11   215 	do_spec		initial("100011111"b),	/* opnd(1) to opnd(2) by opnd(3) 	*/
 11   216 						/* repeat opnd(4) while opnd(5)	*/
 11   217 						/* opnd(6) is next specification	*/
 11   218 
 11   219 	rewrite_file	initial("100100000"b),
 11   220 	delete_file	initial("100100001"b),
 11   221 	unlock_file	initial("100100010"b),
 11   222 	lock_file		initial("100100011"b),
 11   223 	refer		initial("100100101"b),	/* opnd(1) refer(opnd(2))		*/
 11   224 	prefix_plus	initial("100100110"b),	/* opnd(1) <- +opnd(2)		*/
 11   225 	nop		initial("100100111"b),	/* no-op */
 11   226 	assign_by_name	initial("100101000"b),	/* opnd(1) <- opnd(2),by name		*/
 11   227 
 11   228 /* These operators are produced by the semantic translator in processing the math
 11   229*   builtin functions and are used as input to the code generator			*/
 11   230 
 11   231 	sqrt_fun		initial("100110000"b),	/* opnd(1) <- sqrt(opnd(2))	*/
 11   232 	sin_fun		initial("100110001"b),	/* opnd(1) <- sin(opnd(2))	*/
 11   233 	sind_fun		initial("100110010"b),	/* opnd(1) <- sind(opnd(2))	*/
 11   234 	cos_fun		initial("100110011"b),	/* opnd(1) <- cos(opnd(2))	*/
 11   235 	cosd_fun		initial("100110100"b),	/* opnd(1) <- cosd(opnd(2))	*/
 11   236 	tan_fun		initial("100110101"b),	/* opnd(1) <- tan(opnd(2))	*/
 11   237 	tand_fun		initial("100110110"b),	/* opnd(1) <- tand(opnd(2))	*/
 11   238 	asin_fun		initial("100110111"b),	/* opnd(1) <- asin(opnd(2))	*/
 11   239 	asind_fun		initial("100111000"b),	/* opnd(1) <- asind(opnd(2))	*/
 11   240 	acos_fun		initial("100111001"b),	/* opnd(1) <- acos(opnd(2))	*/
 11   241 	acosd_fun		initial("100111010"b),	/* opnd(1) <- acosd(opnd(2))	*/
 11   242 	atan_fun		initial("100111011"b),	/* opnd(1) <- atan(opnd(2)[,opnd(3)])	*/
 11   243 	atand_fun		initial("100111100"b),	/* opnd(1) <- atand(opnd(2)[,opnd(3)])	*/
 11   244 	log2_fun		initial("100111101"b),	/* opnd(1) <- log2(opnd(2))	*/
 11   245 	log_fun		initial("100111110"b),	/* opnd(1) <- log(opnd(2))	*/
 11   246 	log10_fun		initial("100111111"b),	/* opnd(1) <- log10(opnd(2))	*/
 11   247 
 11   248 	exp_fun		initial("101000000"b))	/* opnd(1) <- exp(opnd(2))	*/
 11   249 
 11   250 			bit(9) aligned internal static options(constant);
 11   251 
 11   252 /* END INCLUDE FILE ... op_codes.incl.pl1 */
      595 
 12     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
 12     2 
 12     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
 12     4 
 12     5 /* format: style3 */
 12     6 dcl	1 operator	based aligned,
 12     7 	  2 node_type	bit (9) unaligned,
 12     8 	  2 op_code	bit (9) unaligned,
 12     9 	  2 shared	bit (1) unaligned,
 12    10 	  2 processed	bit (1) unaligned,
 12    11 	  2 optimized	bit (1) unaligned,
 12    12 	  2 number	fixed (14) unaligned,
 12    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
 12    14 
 12    15 dcl	max_number_of_operands
 12    16 			fixed bin (15) int static options (constant) initial (32767);
 12    17 
 12    18 /* END INCLUDE FILE ... operator.incl.pl1 */
      596 
 13     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
 13     2 
 13     3 dcl	1 reference		based aligned,
 13     4 	2 node_type		bit(9) unaligned,
 13     5 	2 array_ref		bit(1) unaligned,
 13     6 	2 varying_ref		bit(1) unaligned,
 13     7 	2 shared			bit(1) unaligned,
 13     8 	2 put_data_sw		bit(1) unaligned,
 13     9 	2 processed		bit(1) unaligned,
 13    10 	2 units			fixed(3) unaligned,
 13    11 	2 ref_count		fixed(17) unaligned,
 13    12 	2 c_offset		fixed(24),
 13    13 	2 c_length		fixed(24),
 13    14 	2 symbol			ptr unaligned,
 13    15 	2 qualifier		ptr unaligned,
 13    16 	2 offset			ptr unaligned,
 13    17 	2 length			ptr unaligned,
 13    18 	2 subscript_list		ptr unaligned,
 13    19 						/* these fields are used by the 645 code generator */
 13    20 	2 address			structure unaligned,
 13    21 	  3 base			bit(3),
 13    22 	  3 offset		bit(15),
 13    23 	  3 op			bit(9),
 13    24 	  3 no_address		bit(1),
 13    25 	  3 inhibit		bit(1),
 13    26 	  3 ext_base		bit(1),
 13    27 	  3 tag			bit(6),
 13    28 	2 info			structure unaligned,
 13    29 	  3 address_in		structure,
 13    30 	    4 b			dimension(0:7) bit(1),
 13    31 	    4 storage		bit(1),
 13    32 	  3 value_in		structure,
 13    33 	    4 a			bit(1),
 13    34 	    4 q			bit(1),
 13    35 	    4 aq			bit(1),
 13    36 	    4 string_aq		bit(1),
 13    37 	    4 complex_aq		bit(1),
 13    38 	    4 decimal_aq		bit(1),
 13    39 	    4 b			dimension(0:7) bit(1),
 13    40 	    4 storage		bit(1),
 13    41 	    4 indicators		bit(1),
 13    42 	    4 x			dimension(0:7) bit(1),
 13    43 	  3 other			structure,
 13    44 	    4 big_offset		bit(1),
 13    45 	    4 big_length		bit(1),
 13    46 	    4 modword_in_offset	bit(1),
 13    47 	2 data_type		fixed(5) unaligned,
 13    48 	2 bits			structure unaligned,
 13    49 	  3 padded_ref		bit(1),
 13    50 	  3 aligned_ref		bit(1),
 13    51 	  3 long_ref		bit(1),
 13    52 	  3 forward_ref		bit(1),
 13    53 	  3 ic_ref		bit(1),
 13    54 	  3 temp_ref		bit(1),
 13    55 	  3 defined_ref		bit(1),
 13    56 	  3 evaluated		bit(1),
 13    57 	  3 allocate		bit(1),
 13    58 	  3 allocated		bit(1),
 13    59 	  3 aliasable		bit(1),
 13    60 	  3 even			bit(1),
 13    61 	  3 perm_address		bit(1),
 13    62 	  3 aggregate		bit(1),
 13    63 	  3 hit_zero		bit(1),
 13    64 	  3 dont_save		bit(1),
 13    65 	  3 fo_in_qual		bit(1),
 13    66 	  3 hard_to_load		bit(1),
 13    67 	2 relocation		bit(12) unaligned,
 13    68 	2 more_bits		structure unaligned,
 13    69 	  3 substr		bit(1),
 13    70 	  3 padded_for_store_ref	bit(1),
 13    71 	  3 aligned_for_store_ref	bit(1),
 13    72 	  3 mbz			bit(15),
 13    73 	2 store_ins		bit(18) unaligned;
 13    74 
 13    75 /* END INCLUDE FILE ... reference.incl.pl1 */
      597 
 14     1 /* ***********************************************************
 14     2*   *                                                         *
 14     3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
 14     4*   *                                                         *
 14     5*   *********************************************************** */
 14     6 /* BEGIN INCLUDE FILE ... statement.incl.pl1 */
 14     7 /* Internal interface of the PL/I compiler */
 14     8 
 14     9 dcl	1 statement		based aligned,
 14    10 	2 node_type		bit(9) unaligned,
 14    11 	2 source_id		structure unaligned,
 14    12 	  3 file_number		bit(8),
 14    13 	  3 line_number		bit(14),
 14    14 	  3 statement_number	bit(5),
 14    15 	2 next			ptr unaligned,
 14    16 	2 back			ptr unaligned,
 14    17 	2 root			ptr unaligned,
 14    18 	2 labels			ptr unaligned,
 14    19 	2 reference_list		ptr unaligned,
 14    20 	2 state_list		ptr unaligned,
 14    21 	2 reference_count		fixed(17) unaligned,
 14    22 	2 ref_count_copy		fixed(17) unaligned,
 14    23 	2 object			structure unaligned,
 14    24 	  3 start			fixed(17),
 14    25 	  3 finish		fixed(17),
 14    26 	2 source			structure unaligned,
 14    27 	  3 segment		fixed(11),
 14    28 	  3 start			fixed(23),
 14    29 	  3 length		fixed(11),
 14    30 	2 prefix			bit(12) unaligned,
 14    31 	2 optimized		bit(1) unaligned,
 14    32 	2 free_temps		bit(1) unaligned,
 14    33 	2 LHS_in_RHS		bit(1) unaligned,
 14    34 	2 statement_type		bit(9) unaligned,
 14    35 	2 bits			structure unaligned,
 14    36 	  3 processed		bit(1) unaligned,
 14    37 	  3 put_in_profile		bit(1) unaligned,
 14    38 	  3 generated		bit(1) unaligned,
 14    39 	  3 snap			bit(1) unaligned,
 14    40 	  3 system		bit(1) unaligned,
 14    41 	  3 irreducible		bit(1) unaligned,
 14    42 	  3 checked		bit(1) unaligned,
 14    43 	  3 save_temps		bit(1) unaligned,
 14    44 	  3 suppress_warnings	bit(1) unaligned,
 14    45 	  3 force_nonquick		bit(1) unaligned,
 14    46 	  3 expanded_by_name	bit(1) unaligned,
 14    47 	  3 begins_loop		bit(1) unaligned,
 14    48 	  3 pad			bit(24) unaligned;
 14    49 
 14    50 /* END INCLUDE FILE ... statement.incl.pl1 */
      598 
 15     1 	/* statement types */
 15     2 
 15     3 dcl (	unknown_statement		initial("000000000"b),
 15     4 	allocate_statement		initial("000000001"b),
 15     5 	assignment_statement	initial("000000010"b),
 15     6 	begin_statement		initial("000000011"b),
 15     7 	call_statement		initial("000000100"b),
 15     8 	close_statement		initial("000000101"b),
 15     9 	declare_statement		initial("000000110"b),
 15    10 	lock_statement		initial("000000111"b),
 15    11 	delete_statement		initial("000001000"b),
 15    12 	display_statement		initial("000001001"b),
 15    13 	do_statement		initial("000001010"b),
 15    14 	else_clause		initial("000001011"b),
 15    15 	end_statement		initial("000001100"b),
 15    16 	entry_statement		initial("000001101"b),
 15    17 	exit_statement		initial("000001110"b),
 15    18 	format_statement		initial("000001111"b),
 15    19 	free_statement		initial("000010000"b),
 15    20 	get_statement		initial("000010001"b),
 15    21 	goto_statement		initial("000010010"b),
 15    22 	if_statement		initial("000010011"b),
 15    23 	locate_statement		initial("000010100"b),
 15    24 	null_statement		initial("000010101"b),
 15    25 	on_statement		initial("000010110"b),
 15    26 	open_statement		initial("000010111"b),
 15    27 	procedure_statement 	initial("000011000"b),
 15    28 	put_statement		initial("000011001"b),
 15    29 	read_statement		initial("000011010"b),
 15    30 	return_statement		initial("000011011"b),
 15    31 	revert_statement		initial("000011100"b),
 15    32 	rewrite_statement		initial("000011101"b),
 15    33 	signal_statement		initial("000011110"b),
 15    34 	stop_statement		initial("000011111"b),
 15    35 	system_on_unit		initial("000100000"b),
 15    36 	unlock_statement		initial("000100001"b),
 15    37 	wait_statement		initial("000100010"b),
 15    38 	write_statement		initial("000100011"b),
 15    39 	default_statement		initial("000100100"b),
 15    40 	continue_statement		initial("000100101"b)) bit(9) internal static aligned options(constant);
      599 
 16     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
 16     2 
 16     3 dcl	1 symbol			based aligned,
 16     4 	2 node_type		bit(9) unal,
 16     5 	2 source_id		structure unal,
 16     6 	  3 file_number		bit(8),
 16     7 	  3 line_number		bit(14),
 16     8 	  3 statement_number	bit(5),
 16     9 	2 location		fixed(18) unal unsigned,
 16    10 	2 allocated		bit(1) unal,
 16    11 	2 dcl_type		bit(3) unal,
 16    12 	2 reserved		bit(6) unal,
 16    13 	2 pix			unal,
 16    14 	  3 pic_fixed		bit(1) unal,
 16    15 	  3 pic_float		bit(1) unal,
 16    16 	  3 pic_char		bit(1) unal,
 16    17 	  3 pic_scale		fixed(7) unal,
 16    18 	  3 pic_size		fixed(7) unal,
 16    19 	2 level			fixed(8) unal,
 16    20 	2 boundary		fixed(3) unal,
 16    21 	2 size_units		fixed(3) unal,
 16    22 	2 scale			fixed(7) unal,
 16    23 	2 runtime			bit(18) unal,
 16    24 	2 runtime_offset		bit(18) unal,
 16    25 	2 block_node		ptr unal,
 16    26 	2 token			ptr unal,
 16    27 	2 next			ptr unal,
 16    28 	2 multi_use		ptr unal,
 16    29 	2 cross_references		ptr unal,
 16    30 	2 initial			ptr unal,
 16    31 	2 array			ptr unal,
 16    32 	2 descriptor		ptr unal,
 16    33 	2 equivalence		ptr unal,
 16    34 	2 reference		ptr unal,
 16    35 	2 general			ptr unal,
 16    36 	2 father			ptr unal,
 16    37 	2 brother			ptr unal,
 16    38 	2 son			ptr unal,
 16    39 	2 word_size		ptr unal,
 16    40 	2 bit_size		ptr unal,
 16    41 	2 dcl_size		ptr unal,
 16    42 	2 symtab_size		ptr unal,
 16    43 	2 c_word_size		fixed(24),
 16    44 	2 c_bit_size		fixed(24),
 16    45 	2 c_dcl_size		fixed(24),
 16    46 
 16    47 	2 attributes		structure aligned,
 16    48 	  3 data_type		structure unal,
 16    49 	    4 structure		bit(1) ,
 16    50 	    4 fixed		bit(1),
 16    51 	    4 float		bit(1),
 16    52 	    4 bit			bit(1),
 16    53 	    4 char		bit(1),
 16    54 	    4 ptr			bit(1),
 16    55 	    4 offset		bit(1),
 16    56 	    4 area		bit(1),
 16    57 	    4 label		bit(1),
 16    58 	    4 entry		bit(1),
 16    59 	    4 file		bit(1),
 16    60 	    4 arg_descriptor	bit(1),
 16    61 	    4 storage_block		bit(1),
 16    62 	    4 explicit_packed	bit(1), /* options(packed) */
 16    63 	    4 condition		bit(1),
 16    64 	    4 format		bit(1),
 16    65 	    4 builtin		bit(1),
 16    66 	    4 generic		bit(1),
 16    67 	    4 picture		bit(1),
 16    68 
 16    69 	  3 misc_attributes		structure unal,
 16    70 	    4 dimensioned		bit(1),
 16    71 	    4 initialed		bit(1),
 16    72 	    4 aligned		bit(1),
 16    73 	    4 unaligned		bit(1),
 16    74 	    4 signed		bit(1),
 16    75 	    4 unsigned		bit(1),
 16    76 	    4 precision		bit(1),
 16    77 	    4 varying		bit(1),
 16    78 	    4 local		bit(1),
 16    79 	    4 decimal		bit(1),
 16    80 	    4 binary		bit(1),
 16    81 	    4 real		bit(1),
 16    82 	    4 complex		bit(1),
 16    83 	    4 variable		bit(1),
 16    84 	    4 reducible		bit(1),
 16    85 	    4 irreducible		bit(1),
 16    86 	    4 returns		bit(1),
 16    87 	    4 position		bit(1),
 16    88 	    4 internal		bit(1),
 16    89 	    4 external		bit(1),
 16    90 	    4 like		bit(1),
 16    91 	    4 member		bit(1),
 16    92 	    4 non_varying		bit(1),
 16    93 	    4 options		bit(1),
 16    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
 16    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
 16    96 
 16    97 	  3 storage_class		structure unal,
 16    98 	    4 auto		bit(1),
 16    99 	    4 based		bit(1),
 16   100 	    4 static		bit(1),
 16   101 	    4 controlled		bit(1),
 16   102 	    4 defined		bit(1),
 16   103 	    4 parameter		bit(1),
 16   104 	    4 param_desc		bit(1),
 16   105 	    4 constant		bit(1),
 16   106 	    4 temporary		bit(1),
 16   107 	    4 return_value		bit(1),
 16   108 
 16   109 	  3 file_attributes		structure unal,
 16   110 	    4 print		bit(1),
 16   111 	    4 input		bit(1),
 16   112 	    4 output		bit(1),
 16   113 	    4 update		bit(1),
 16   114 	    4 stream		bit(1),
 16   115 	    4 reserved_1		bit(1),
 16   116 	    4 record		bit(1),
 16   117 	    4 sequential		bit(1),
 16   118 	    4 direct		bit(1),
 16   119 	    4 interactive		bit(1),		/* env(interactive) */
 16   120 	    4 reserved_2		bit(1),
 16   121 	    4 reserved_3		bit(1),
 16   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
 16   123 	    4 keyed		bit(1),
 16   124 	    4 reserved_4		bit(1),
 16   125 	    4 environment		bit(1),
 16   126 
 16   127 	  3 compiler_developed	structure unal,
 16   128 	    4 aliasable		bit(1),
 16   129 	    4 packed		bit(1),
 16   130 	    4 passed_as_arg		bit(1),
 16   131 	    4 allocate		bit(1),
 16   132 	    4 set			bit(1),
 16   133 	    4 exp_extents		bit(1),
 16   134 	    4 refer_extents		bit(1),
 16   135 	    4 star_extents		bit(1),
 16   136 	    4 isub		bit(1),
 16   137 	    4 put_in_symtab		bit(1),
 16   138 	    4 contiguous		bit(1),
 16   139 	    4 put_data		bit(1),
 16   140 	    4 overlayed		bit(1),
 16   141 	    4 error		bit(1),
 16   142 	    4 symtab_processed	bit(1),
 16   143 	    4 overlayed_by_builtin	bit(1),
 16   144 	    4 defaulted		bit(1),
 16   145 	    4 connected		bit(1);
 16   146 
 16   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
      600 
 17     1 /* BEGIN INCLUDE FILE ... system.incl.pl1 */
 17     2 
 17     3 /* Modified: 25 Apr 1979 by PCK to implemnt 4-bit decimal */
 17     4 
 17     5 dcl (	max_p_flt_bin_1			initial(27),
 17     6 	max_p_flt_bin_2			initial(63),
 17     7 	max_p_fix_bin_1			initial(35),
 17     8 	max_p_fix_bin_2			initial(71),
 17     9 
 17    10 	max_p_dec				initial(59),
 17    11 	max_p_bin_or_dec			initial (71),	/* max (max_p_fix_bin_2, max_p_dec) */
 17    12 
 17    13 	min_scale				initial(-128),
 17    14 	max_scale				initial(+127),
 17    15 	max_bit_string			initial(9437184),
 17    16 	max_char_string			initial(1048576),
 17    17 	max_area_size			initial(262144),
 17    18 	min_area_size			initial(28),
 17    19 
 17    20 	max_bit_string_constant		initial (253),	/* max length of bit literals */
 17    21 	max_char_string_constant		initial (254),	/* max length of character literals */
 17    22 	max_identifier_length		initial (256),
 17    23 	max_number_of_dimensions		initial (127),
 17    24 
 17    25 	max_length_precision		initial(24),
 17    26 	max_offset_precision		initial(24),	/* 18 bits for word offset + 6 bits for bit offset */
 17    27 
 17    28 	max_words_per_variable		initial (262144),
 17    29 
 17    30 	bits_per_word			initial(36),
 17    31 	bits_per_double			initial(72),
 17    32 	packed_digits_per_character		initial(2),
 17    33 	characters_per_half			initial(2),
 17    34 	characters_per_word			initial(4),
 17    35 	characters_per_double		initial(8),
 17    36 
 17    37 	bits_per_character			initial(9),
 17    38 	bits_per_half			initial(18),
 17    39 	bits_per_decimal_digit		initial(9),
 17    40 	bits_per_binary_exponent		initial(8),
 17    41 	bits_per_packed_ptr			initial(36),
 17    42 	words_per_packed_pointer		initial(1),
 17    43 
 17    44 	words_per_fix_bin_1			initial(1),
 17    45 	words_per_fix_bin_2			initial(2),
 17    46 	words_per_flt_bin_1			initial(1),
 17    47 	words_per_flt_bin_2			initial(2),
 17    48 	words_per_varying_string_header	initial(1),
 17    49 	words_per_offset			initial(1),
 17    50 	words_per_pointer			initial(2),
 17    51 	words_per_label_var			initial(4),
 17    52 	words_per_entry_var			initial(4),
 17    53 	words_per_file_var			initial(4),
 17    54 	words_per_format			initial(4),
 17    55 	words_per_condition_var		initial(6),
 17    56 
 17    57 	max_index_register_value		initial(262143),
 17    58 	max_signed_index_register_value	initial(131071),
 17    59 
 17    60 	max_signed_xreg_precision		initial(17),
 17    61 	max_uns_xreg_precision		initial(18),
 17    62 
 17    63 	default_area_size			initial(1024),
 17    64 	default_flt_bin_p			initial(27),
 17    65 	default_fix_bin_p			initial(17),
 17    66 	default_flt_dec_p			initial(10),
 17    67           default_fix_dec_p   		initial(7)) fixed bin(31) internal static options(constant);
 17    68 
 17    69 dcl	bits_per_digit			initial(4.5)  fixed bin(31,1) internal static options(constant);
 17    70 
 17    71 dcl (	integer_type		initial("010000000000000000000100000001100000"b),
 17    72 	dec_integer_type		initial("010000000000000000000100000010100000"b),
 17    73 	pointer_type		initial("000001000000000000000100000000000000"b),
 17    74 	real_type			initial("001000000000000000000100000001100000"b),
 17    75 	complex_type		initial("001000000000000000000100000001010000"b),
 17    76 	builtin_type		initial("000000000000000010000000000000000000"b),
 17    77 	storage_block_type		initial("000000000000100000000000000000000000"b),
 17    78 	arg_desc_type		initial("000000000001000000000000000000000000"b),
 17    79 	local_label_var_type	initial("000000001000000000000100000100001000"b),
 17    80 	entry_var_type		initial("000000000100000000000000000000001000"b),
 17    81 	bit_type			initial("000100000000000000000000000000000000"b),
 17    82 	char_type			initial("000010000000000000000000000000000000"b)) bit(36) aligned int static
 17    83 									options(constant);
 17    84 
 17    85 /* END INCLUDE FILE ... system.incl.pl1 */
      601 
 18     1 /* BEGIN INCLUDE FILE ... token.incl.pl1 */
 18     2 
 18     3 dcl	1 token			based aligned,
 18     4 	2 node_type		bit(9) unaligned,
 18     5 	2 type			bit(9) unaligned,
 18     6 	2 loc			bit(18) unaligned,	/* symtab offset for identifiers, "p" flag for constants */
 18     7 	2 declaration		ptr unaligned,
 18     8 	2 next			ptr unaligned,
 18     9 	2 size			fixed(9),
 18    10 	2 string			char(n refer(token.size));
 18    11 
 18    12 /* END INCLUDE FILE ... token.incl.pl1 */
      602 
 19     1 /* BEGIN INCLUDE FILE ... token_types.incl.pl1 */
 19     2 
 19     3 dcl (	no_token		initial("000000000"b),	/*	token types		*/
 19     4 	identifier	initial("100000000"b),
 19     5 	isub		initial("010000000"b),
 19     6 	plus		initial("001000001"b),
 19     7 	minus		initial("001000010"b),
 19     8 	asterisk		initial("001000011"b),
 19     9 	slash		initial("001000100"b),
 19    10 	expon		initial("001000101"b),
 19    11 	not		initial("001000110"b),
 19    12 	and		initial("001000111"b),
 19    13 	or		initial("001001000"b),
 19    14 	cat		initial("001001001"b),
 19    15 	eq		initial("001001010"b),
 19    16 	ne		initial("001001011"b),
 19    17 	lt		initial("001001100"b),
 19    18 	gt		initial("001001101"b),
 19    19 	le		initial("001001110"b),
 19    20 	ge		initial("001001111"b),
 19    21 	ngt		initial("001010000"b),
 19    22 	nlt		initial("001010001"b),
 19    23 	assignment	initial("001010010"b),
 19    24 	colon		initial("001010011"b),
 19    25 	semi_colon	initial("001010100"b),
 19    26 	comma		initial("001010101"b),
 19    27 	period		initial("001010110"b),
 19    28 	arrow		initial("001010111"b),
 19    29 	left_parn		initial("001011000"b),
 19    30 	right_parn	initial("001011001"b),
 19    31 	percent		initial("001011100"b),
 19    32 	bit_string	initial("000100001"b),
 19    33 	char_string	initial("000100010"b),
 19    34 	bin_integer	initial("000110001"b),
 19    35 	dec_integer	initial("000110011"b),
 19    36 	fixed_bin		initial("000110000"b),
 19    37 	fixed_dec		initial("000110010"b),
 19    38 	float_bin		initial("000110100"b),
 19    39 	float_dec		initial("000110110"b),
 19    40 	i_bin_integer	initial("000111001"b),
 19    41 	i_dec_integer	initial("000111011"b),
 19    42 	i_fixed_bin	initial("000111000"b),
 19    43 	i_fixed_dec	initial("000111010"b),
 19    44 	i_float_bin	initial("000111100"b),
 19    45 	i_float_dec	initial("000111110"b)) bit (9) aligned internal static options (constant);
 19    46 
 19    47 dcl (	is_identifier		initial ("100000000"b),	/*	token type masks		*/
 19    48 	is_isub			initial ("010000000"b),
 19    49 	is_delimiter		initial ("001000000"b),
 19    50 	is_constant		initial ("000100000"b),
 19    51 	is_arith_constant		initial ("000010000"b),	/* N.B. not really a mask...s/b "000110000"b */
 19    52 	is_arithmetic_constant	initial ("000110000"b),
 19    53 	is_imaginary_constant	initial ("000111000"b),
 19    54 	is_float_constant		initial ("000110100"b),
 19    55 	is_decimal_constant		initial ("000110010"b),
 19    56 	is_integral_constant 	initial ("000110001"b)
 19    57 	) bit(9) internal static aligned options(constant);
 19    58 
 19    59 /* END INCLUDE FILE ... token_types.incl.pl1 */
      603 
      604      end /* get_array_size */;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/31/89  1338.4  get_array_size.pl1                >spec>install>MR12.3-1066>get_array_size.pl1
590          1    07/31/89  1332.6  language_utility.incl.pl1         >spec>install>MR12.3-1066>language_utility.incl.pl1
1-307        2    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
1-325        3    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
1-335        4    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
1-374        5    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
1-386        6    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
591          7    05/06/74  1741.6  array.incl.pl1                    >ldd>include>array.incl.pl1
592          8    08/13/81  2043.5  block.incl.pl1                    >ldd>include>block.incl.pl1
593          9    10/25/79  1645.8  boundary.incl.pl1                 >ldd>include>boundary.incl.pl1
594         10    07/21/80  1546.3  nodes.incl.pl1                    >ldd>include>nodes.incl.pl1
595         11    04/07/83  1635.0  op_codes.incl.pl1                 >ldd>include>op_codes.incl.pl1
596         12    07/21/80  1546.3  operator.incl.pl1                 >ldd>include>operator.incl.pl1
597         13    07/21/80  1546.3  reference.incl.pl1                >ldd>include>reference.incl.pl1
598         14    04/07/83  1635.0  statement.incl.pl1                >ldd>include>statement.incl.pl1
599         15    05/03/76  1320.4  statement_types.incl.pl1          >ldd>include>statement_types.incl.pl1
600         16    12/07/83  1701.7  symbol.incl.pl1                   >ldd>include>symbol.incl.pl1
601         17    12/07/83  1701.7  system.incl.pl1                   >ldd>include>system.incl.pl1
602         18    09/14/77  1705.7  token.incl.pl1                    >ldd>include>token.incl.pl1
603         19    11/30/78  1227.4  token_types.incl.pl1              >ldd>include>token_types.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
a                                      parameter       pointer                  dcl 436 in procedure "virtue" ref 434 438 438 442
                                                                                  442 443 443 446 446 447 447
a                               000106 automatic       pointer                  dcl 27 in procedure "get_array_size" set ref 57* 58
                                                                                  58 60 62 63 64 65 69 69 69 69 73 74 74 77 78 79 82
                                                                                  84 86 86 90 91 94 106 106 106 106 109 109 112 120
                                                                                  121 123 123 127 128 128 131 133 134 134 138 138
                                                                                  142 143 143 146 148 149 149 153 153 156 157 157
                                                                                  187 188 192 204 255* 325 325 335 353 355 471 484
                                                                                  518 570 577 578
a1                              000106 automatic       pointer                  dcl 458 set ref 464* 466 470* 471 472 472 472 475
                                                                                  476 477 478 479 480 484 487 488 489 490 490 491
                                                                                  491 494 499* 514 556* 561 570 570 577 577 578 578
add                                    constant        bit(9)                   initial dcl 11-8 ref 387
arg                             000100 automatic       pointer                  array dcl 407 set ref 411* 412* 415 415 415 415 415
                                                                                  420 420
array                    12            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 16-3 in procedure "get_array_size"
                                                                                  set ref 57 464 470*
array                                  based           structure                level 1 dcl 7-1 in procedure "get_array_size" set
                                                                                  ref 471* 471
array_ref                 0(09)        based           bit(1)                   level 2 packed packed unaligned dcl 13-3 set ref 56*
                                                                                  516*
assign                          000002 constant        bit(9)                   initial dcl 11-8 set ref 366*
assignment_statement            000000 constant        bit(9)                   initial dcl 15-3 set ref 370*
attributes               31            based           structure                level 2 dcl 16-3
auto                     32(09)        based           bit(1)                   level 4 packed packed unaligned dcl 16-3 ref 230
b                               000110 automatic       pointer                  dcl 458 in procedure "interleaved" set ref 494* 494*
                                                                                  497 497 498 498 499* 502* 503 518* 518* 520 522
                                                                                  523 527 528 531 532 535 535 537 543 544 545 549
                                                                                  550 550* 566
b                                      parameter       pointer                  dcl 436 in procedure "virtue" ref 434 438 438 438
                                                                                  438 442 443 443 443 443 443 443 443 446 446 447
                                                                                  447 447 447
b                               000110 automatic       pointer                  dcl 27 in procedure "get_array_size" set ref 204*
                                                                                  204* 213 213 213 216 216 217 220 220 220 223 223
                                                                                  224 232 232 232 234 234 234 245 246 247 247 249
                                                                                  250 255* 259 259 259 264 264 266 266 271 273 276
                                                                                  278 282 283 285 301 310 310 310 310 312 312 312*
                                                                                  326
b1                              000112 automatic       pointer                  dcl 458 set ref 481* 502* 561 563 565*
based_integer                          based           fixed bin(35,0)          dcl 407 ref 415 420
bit_                                   constant        fixed bin(3,0)           initial dcl 9-5 ref 112 123 487
bit_size                 23            based           pointer                  level 2 packed packed unaligned dcl 16-3 set ref 65
                                                                                  333* 337* 340* 476
bit_to_char                     000001 constant        bit(9)                   initial dcl 11-8 set ref 89*
bits_per_character              000020 constant        fixed bin(31,0)          initial dcl 17-5 set ref 86 86 106 109* 109* 131 134
bits_per_word                   000015 constant        fixed bin(31,0)          initial dcl 17-5 set ref 123 128 535* 535* 535* 535*
                                                                                  537 549 550* 550* 550* 550*
blk                             000102 automatic       pointer                  dcl 27 set ref 55* 368* 370* 370
block                                  based           structure                level 1 dcl 8-5
block_node                4            based           pointer                  level 2 packed packed unaligned dcl 16-3 ref 55
bound                                  based           structure                level 1 dcl 7-21 set ref 520* 520
boundary                  2(20)        based           fixed bin(3,0)           level 2 packed packed unaligned dcl 16-3 ref 58 480
bounds                   12            based           pointer                  level 2 packed packed unaligned dcl 7-1 set ref 204
                                                                                  494 518 561*
brother                  20            based           pointer                  level 2 packed packed unaligned dcl 16-3 ref 584
c                               000124 automatic       fixed bin(24,0)          dcl 28 set ref 73* 74 74 74 192* 194* 196 198 200
                                                                                  200 282* 285* 285 288 288 290 290 295 297 301 301
                                                                                  335* 337 340 340 341
c_bit_size               27            based           fixed bin(24,0)          level 2 dcl 16-3 set ref 63 334* 341* 477
c_dcl_size               30            based           fixed bin(24,0)          level 2 dcl 16-3 set ref 369*
c_desc_multiplier         4            based           fixed bin(24,0)          level 2 dcl 7-21 set ref 250* 498 532* 532 537* 537
                                                                                  543 545* 545 549 552*
c_element_size            2            based           fixed bin(24,0)          level 2 dcl 7-1 set ref 62* 74* 74 86* 86 106* 106
                                                                                  123 128* 128 131 134* 134 138 143* 143 146 149*
                                                                                  149 153 157* 157 188 479* 491*
c_element_size_bits       3            based           fixed bin(24,0)          level 2 dcl 7-1 set ref 63* 477* 491
c_lower                   1            based           fixed bin(24,0)          level 2 dcl 7-21 set ref 216* 259 282 438 443 443
                                                                                  443 443 446
c_multiplier              3            based           fixed bin(24,0)          level 2 dcl 7-21 set ref 246* 438 442 443 446 498*
                                                                                  528* 528 543* 549* 552
c_upper                   2            based           fixed bin(24,0)          level 2 dcl 7-21 set ref 223* 264 264 266 266 271
                                                                                  273 285 310 310
c_virtual_origin          4            based           fixed bin(24,0)          level 2 dcl 7-1 set ref 442* 442 446* 446 472* 488*
                                                                                  578* 578 578
c_word_size              26            based           fixed bin(24,0)          level 2 dcl 16-3 set ref 62 346* 479
cdm                             000123 automatic       fixed bin(24,0)          dcl 28 set ref 196* 209 250 267* 273* 273 279* 291*
                                                                                  297* 297 305* 316*
character_                             constant        fixed bin(3,0)           initial dcl 9-5 ref 82 94 106 133 138
characters_per_half             000012 constant        fixed bin(31,0)          initial dcl 17-5 ref 146 149
characters_per_word             003357 constant        fixed bin(31,0)          initial dcl 17-5 ref 138 143
cm                              000122 automatic       fixed bin(24,0)          dcl 28 set ref 188* 190 196 208 246 259 265* 271*
                                                                                  271 277* 286 289* 295* 295 303* 314* 319 321 337
                                                                                  341 346
compiler_developed       32(35)        based           structure                level 3 packed packed unaligned dcl 16-3
connected                33(16)        based           bit(1)                   level 4 packed packed unaligned dcl 16-3 set ref
                                                                                  515*
constant                 32(16)        based           bit(1)                   level 4 packed packed unaligned dcl 16-3 ref 415
controlled               32(12)        based           bit(1)                   level 4 packed packed unaligned dcl 16-3 ref 247
copy_expression                 000016 constant        entry                    external dcl 1-94 ref 371 522 523 527 531 535 544
                                                                                  550
create_array                    000032 constant        entry                    external dcl 460 ref 470
create_bound                    000034 constant        entry                    external dcl 461 ref 519
create_operator                 000020 constant        entry                    external dcl 1-152 ref 77 89 366 394 424
create_statement$prologue       000022 constant        entry                    external dcl 1-171 ref 370
ctable                          000012 constant        fixed bin(15,0)          initial array dcl 48 ref 73
d                                      parameter       pointer                  dcl 458 ref 455 463 511 512 513
data_type                31            based           structure                level 3 packed packed unaligned dcl 16-3
dec_integer                            constant        bit(9)                   initial dcl 19-3 ref 213 220
declare_constant$integer        000024 constant        entry                    external dcl 1-234 ref 109 109 190 200 200 208 209
                                                                                  264 264 266 266 288 288 290 290 301 301 310 310
                                                                                  312 312 312 312 340 340 443 443 443 443 535 535
                                                                                  535 535 550 550 550 550
declare_integer                 000026 constant        entry                    external dcl 1-269 ref 368
defined                  32(13)        based           bit(1)                   level 4 packed packed unaligned dcl 16-3 ref 230
desc_multiplier          10            based           pointer                  level 2 packed packed unaligned dcl 7-21 set ref 247
                                                                                  249* 497 531* 531* 535* 535 535 544* 546* 550 550
                                                                                  553*
dimensioned              31(19)        based           bit(1)                   level 4 packed packed unaligned dcl 16-3 set ref
                                                                                  468*
divide                                                 builtin function         dcl 34 ref 74 86 128 134 143 149 157
dm                              000116 automatic       pointer                  dcl 27 set ref 198* 200* 209 209* 247 249 266* 266*
                                                                                  272* 278* 278* 290* 290* 296* 304* 304* 315* 315*
e                                      parameter       pointer                  packed unaligned dcl 363 ref 361 367
e1                                     parameter       pointer                  packed unaligned dcl 382 in procedure "addf" ref 380
                                                                                  386 390 396
e1                                     parameter       pointer                  dcl 405 in procedure "multf" ref 403 411 425
e2                                     parameter       pointer                  packed unaligned dcl 382 in procedure "addf" ref 380
                                                                                  386 390 397
e2                                     parameter       pointer                  dcl 405 in procedure "multf" ref 403 412 426
element_boundary          1(23)        based           fixed bin(3,0)           level 2 packed packed unaligned dcl 7-1 set ref 58
                                                                                  58* 69 69 73 77 82 480*
element_size              5            based           pointer                  level 2 packed packed unaligned dcl 7-1 set ref 64*
                                                                                  69 78 79* 84 90 91* 106 109* 109 120 187 478* 490*
element_size_bits         6            based           pointer                  level 2 packed packed unaligned dcl 7-1 set ref 65*
                                                                                  476* 490
equal                           000100 automatic       bit(1)                   packed unaligned dcl 457 set ref 469* 484* 485 495
                                                                                  525 575
exp_extents              33(04)        based           bit(1)                   level 4 packed packed unaligned dcl 16-3 set ref
                                                                                  511* 511
factor                          000003 constant        fixed bin(15,0)          initial array dcl 49 ref 192 335
half_                                  constant        fixed bin(3,0)           initial dcl 9-5 ref 148 153
i                               000106 automatic       fixed bin(15,0)          dcl 407 set ref 414* 415 415 415 415 415 420 420*
initial                  11            based           pointer                  level 2 packed packed unaligned dcl 16-3 ref 415 420
interleaved               1(35)        based           bit(1)                   level 2 packed packed unaligned dcl 7-1 set ref 514*
is_packed_star_param            000100 automatic       bit(1)                   dcl 26 set ref 100* 104 353
lower                     5            based           pointer                  level 2 packed packed unaligned dcl 7-21 set ref 213
                                                                                  213 213 216 217* 232 232* 232* 259 310* 312* 312*
                                                                                  438 447 447 522* 522*
m                               000120 automatic       pointer                  dcl 27 set ref 187* 190 190* 198 200* 208 208* 236
                                                                                  236* 236 245 264* 264* 270* 276* 276* 288* 288*
                                                                                  294* 302* 302* 313* 313* 321 337 340* 345
max                                                    builtin function         dcl 34 ref 355
max_offset_precision                   constant        fixed bin(31,0)          initial dcl 17-5 ref 369
min                                                    builtin function         dcl 34 ref 60
misc_attributes          31(19)        based           structure                level 3 packed packed unaligned dcl 16-3
mod                                                    builtin function         dcl 34 ref 123 131 138 146 153
mult                                   constant        bit(9)                   initial dcl 11-8 ref 424
multiplier                7            based           pointer                  level 2 packed packed unaligned dcl 7-21 set ref
                                                                                  245* 438* 443 443 447 447 497* 527* 527* 544* 546
                                                                                  550* 553
next                     14            based           pointer                  level 2 packed packed unaligned dcl 7-21 set ref 326
                                                                                  503 521* 563* 566
node                                   based           structure                level 1 dcl 10-27
null                                                   builtin function         dcl 34 ref 69 84 106 120 190 204 208 209 213 217 220
                                                                                  224 232 234 247 259 259 270 272 283 294 296 310
                                                                                  321 333 370 370 386 438 463 466 475 481 489 494
                                                                                  518 521 561
number_of_dimensions      1(07)        based           fixed bin(7,0)           level 2 packed packed unaligned dcl 7-1 set ref 325*
                                                                                  325 472* 570* 570 570
offset_units              1(31)        based           fixed bin(3,0)           level 2 packed packed unaligned dcl 7-1 set ref 60*
                                                                                  69 94* 106 112* 121 123 127* 133* 138 142* 148*
                                                                                  153 156* 192 335 353 355 484 484 487*
opcode                          000102 automatic       bit(9)                   dcl 384 set ref 387* 392* 394*
operand                   1            based           pointer                  array level 2 packed packed unaligned dcl 12-6 set
                                                                                  ref 78* 90* 367* 368* 373 396* 397* 425* 426*
operator                               based           structure                level 1 dcl 12-6
operator_node                          constant        bit(9)                   initial dcl 10-5 ref 236
optable                         000126 automatic       bit(9)                   initial array dcl 30 set ref 30* 30* 77*
own_number_of_dimensions
                          1(15)        based           fixed bin(7,0)           level 2 packed packed unaligned dcl 7-1 set ref 472*
p                               000146 automatic       pointer                  dcl 363 in procedure "assignf" set ref 368* 369 370*
                                                                                  371
p                               000102 automatic       pointer                  dcl 458 in procedure "interleaved" set ref 463* 463*
                                                                                  464 465 468 470 476 477 478 479 480 511 512 513
                                                                                  515 516 541 582 582* 584
packed                   33            based           bit(1)                   level 4 packed packed unaligned dcl 16-3 ref 100 192
                                                                                  465 465 541 541
packed_eq                       000101 automatic       bit(1)                   packed unaligned dcl 457 set ref 465* 529
parameter                32(14)        based           bit(1)                   level 4 packed packed unaligned dcl 16-3 ref 100 243
pl1_stat_$eis_mode              000014 external static bit(1)                   dcl 43 ref 123 138
pl1_stat_$util_abort            000012 external static entry variable           dcl 42 ref 185 321
pl1_stat_$util_error            000010 external static entry variable           dcl 42 ref 319
prefix                   24(09)        based           bit(12)                  level 2 packed packed unaligned dcl 8-5 ref 370
q                               000104 automatic       pointer                  dcl 458 in procedure "interleaved" set ref 519* 520
                                                                                  521 522 523 527 528 531 532 535 537 543 544 545
                                                                                  546 546 549 550 552 552 553 553 556* 561 563 565
q                               000114 automatic       pointer                  dcl 27 in procedure "get_array_size" set ref 77* 78
                                                                                  79 89* 90 91
q                               000100 automatic       pointer                  dcl 382 in procedure "addf" set ref 394* 396 397 399
q                               000104 automatic       pointer                  dcl 407 in procedure "multf" set ref 424* 425 426
                                                                                  428
q                               000150 automatic       pointer                  dcl 363 in procedure "assignf" set ref 366* 367 368
                                                                                  371 373
refer_extents            33(05)        based           bit(1)                   level 4 packed packed unaligned dcl 16-3 set ref
                                                                                  512* 512
reference                15            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 16-3 in procedure "get_array_size"
                                                                                  ref 56 516
reference                              based           structure                level 1 dcl 13-3 in procedure "get_array_size"
reference_node                         constant        bit(9)                   initial dcl 10-5 ref 415
root                      3            based           pointer                  level 2 packed packed unaligned dcl 14-9 set ref
                                                                                  371*
s                               000104 automatic       pointer                  dcl 27 set ref 53* 55 56 57 58 62 63 64 65 100 100
                                                                                  100 185* 192 230 230 243 243 247 319* 321* 333 334
                                                                                  337 340 341 345 346 351 351* 465 541
size                            000130 stack reference condition                dcl 38 ref 185
son                      21            based           pointer                  level 2 packed packed unaligned dcl 16-3 ref 463
star_extents             33(06)        based           bit(1)                   level 4 packed packed unaligned dcl 16-3 set ref 100
                                                                                  243 513* 513
statement                              based           structure                level 1 dcl 14-9
storage_class            32(09)        based           structure                level 3 packed packed unaligned dcl 16-3
structure                31            based           bit(1)                   level 4 packed packed unaligned dcl 16-3 ref 351 582
sub                                    constant        bit(9)                   initial dcl 11-8 ref 392
sym                                    parameter       pointer                  dcl 21 ref 11 53
symbol                    3            based           pointer                  level 2 in structure "reference" packed packed
                                                                                  unaligned dcl 13-3 in procedure "get_array_size"
                                                                                  ref 369 415 415 415 420
symbol                                 based           structure                level 1 dcl 16-3 in procedure "get_array_size"
symbol_node                            constant        bit(9)                   initial dcl 10-5 ref 415
symtab_multiplier        13            based           pointer                  level 2 packed packed unaligned dcl 7-21 set ref
                                                                                  247*
t                               000112 automatic       pointer                  dcl 27 set ref 301* 302* 304* 310* 312* 313* 315*
token                                  based           structure                level 1 dcl 18-3
token_node                             constant        bit(9)                   initial dcl 10-5 ref 213 220
token_to_binary                 000030 constant        entry                    external dcl 1-459 ref 216 223
type                      0(09)        based           bit(9)                   level 2 in structure "token" packed packed unaligned
                                                                                  dcl 18-3 in procedure "get_array_size" ref 213 220
type                                   based           bit(9)                   level 2 in structure "node" packed packed unaligned
                                                                                  dcl 10-27 in procedure "get_array_size" ref 213
                                                                                  220 236 415 415
units                                  parameter       fixed bin(15,0)          dcl 21 set ref 11 60 353* 355* 355
upper                     6            based           pointer                  level 2 packed packed unaligned dcl 7-21 set ref 220
                                                                                  220 220 223 224* 234 234* 234* 259 276 278 283
                                                                                  301* 310 312* 523* 523*
virtual_origin            7            based           pointer                  level 2 packed packed unaligned dcl 7-1 set ref 438*
                                                                                  438* 443* 443* 447* 447* 475* 489* 577* 577* 577*
word_                                  constant        fixed bin(3,0)           initial dcl 9-5 ref 60 69 121 127 142 156
word_size                22            based           pointer                  level 2 packed packed unaligned dcl 16-3 set ref 64
                                                                                  345* 478
word_to_mod2                           constant        bit(9)                   initial dcl 11-8 ref 30
word_to_mod4                           constant        bit(9)                   initial dcl 11-8 ref 30

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
a_format                               internal static bit(9)                   initial dcl 11-8
abs_fun                                internal static bit(9)                   initial dcl 11-8
acos_fun                               internal static bit(9)                   initial dcl 11-8
acosd_fun                              internal static bit(9)                   initial dcl 11-8
addbitno_fun                           internal static bit(9)                   initial dcl 11-8
addcharno_fun                          internal static bit(9)                   initial dcl 11-8
addr_fun                               internal static bit(9)                   initial dcl 11-8
addr_fun_bits                          internal static bit(9)                   initial dcl 11-8
addrel_fun                             internal static bit(9)                   initial dcl 11-8
adjust_count                    000000 constant        entry                    external dcl 1-20
allocate_statement                     internal static bit(9)                   initial dcl 15-3
allocation_fun                         internal static bit(9)                   initial dcl 11-8
allot_auto                             internal static bit(9)                   initial dcl 11-8
allot_based                            internal static bit(9)                   initial dcl 11-8
allot_ctl                              internal static bit(9)                   initial dcl 11-8
allot_var                              internal static bit(9)                   initial dcl 11-8
and                                    internal static bit(9)                   initial dcl 19-3
and_bits                               internal static bit(9)                   initial dcl 11-8
arg_desc_type                          internal static bit(36)                  initial dcl 17-71
array_node                             internal static bit(9)                   initial dcl 10-5
arrow                                  internal static bit(9)                   initial dcl 19-3
asin_fun                               internal static bit(9)                   initial dcl 11-8
asind_fun                              internal static bit(9)                   initial dcl 11-8
assign_by_name                         internal static bit(9)                   initial dcl 11-8
assign_round                           internal static bit(9)                   initial dcl 11-8
assign_size_ck                         internal static bit(9)                   initial dcl 11-8
assign_zero                            internal static bit(9)                   initial dcl 11-8
assignment                             internal static bit(9)                   initial dcl 19-3
asterisk                               internal static bit(9)                   initial dcl 19-3
atan_fun                               internal static bit(9)                   initial dcl 11-8
atand_fun                              internal static bit(9)                   initial dcl 11-8
b_format                               internal static bit(9)                   initial dcl 11-8
baseno_fun                             internal static bit(9)                   initial dcl 11-8
baseptr_fun                            internal static bit(9)                   initial dcl 11-8
begin_statement                        internal static bit(9)                   initial dcl 15-3
bin_integer                            internal static bit(9)                   initial dcl 19-3
binary                                                 builtin function         dcl 34
binary_to_octal_string          000000 constant        entry                    external dcl 1-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 1-43
bindec                          000000 constant        entry                    external dcl 1-23
bindec$vs                       000000 constant        entry                    external dcl 1-28
binoct                          000000 constant        entry                    external dcl 1-33
bit_pointer                            internal static bit(9)                   initial dcl 11-8
bit_string                             internal static bit(9)                   initial dcl 19-3
bit_to_word                            internal static bit(9)                   initial dcl 11-8
bit_type                               internal static bit(36)                  initial dcl 17-71
bitno_fun                              internal static bit(9)                   initial dcl 11-8
bits_per_binary_exponent               internal static fixed bin(31,0)          initial dcl 17-5
bits_per_decimal_digit                 internal static fixed bin(31,0)          initial dcl 17-5
bits_per_digit                         internal static fixed bin(31,1)          initial dcl 17-69
bits_per_double                        internal static fixed bin(31,0)          initial dcl 17-5
bits_per_half                          internal static fixed bin(31,0)          initial dcl 17-5
bits_per_packed_ptr                    internal static fixed bin(31,0)          initial dcl 17-5
block_node                             internal static bit(9)                   initial dcl 10-5
bn_format                              internal static bit(9)                   initial dcl 11-8
bool_fun                               internal static bit(9)                   initial dcl 11-8
bound_ck                               internal static bit(9)                   initial dcl 11-8
bound_node                             internal static bit(9)                   initial dcl 10-5
builtin_type                           internal static bit(36)                  initial dcl 17-71
by_name_agg_node                       internal static bit(9)                   initial dcl 10-5
byte_fun                               internal static bit(9)                   initial dcl 11-8
c_format                               internal static bit(9)                   initial dcl 11-8
call_statement                         internal static bit(9)                   initial dcl 15-3
cat                                    internal static bit(9)                   initial dcl 19-3
cat_string                             internal static bit(9)                   initial dcl 11-8
ceil_fun                               internal static bit(9)                   initial dcl 11-8
char_string                            internal static bit(9)                   initial dcl 19-3
char_to_word                           internal static bit(9)                   initial dcl 11-8
char_type                              internal static bit(36)                  initial dcl 17-71
characters_per_double                  internal static fixed bin(31,0)          initial dcl 17-5
charno_fun                             internal static bit(9)                   initial dcl 11-8
clock_fun                              internal static bit(9)                   initial dcl 11-8
close_file                             internal static bit(9)                   initial dcl 11-8
close_statement                        internal static bit(9)                   initial dcl 15-3
codeptr_fun                            internal static bit(9)                   initial dcl 11-8
colon                                  internal static bit(9)                   initial dcl 19-3
column_format                          internal static bit(9)                   initial dcl 11-8
comma                                  internal static bit(9)                   initial dcl 19-3
compare_expression              000000 constant        entry                    external dcl 1-48
complex_fun                            internal static bit(9)                   initial dcl 11-8
complex_type                           internal static bit(36)                  initial dcl 17-71
conjg_fun                              internal static bit(9)                   initial dcl 11-8
constant_length                 000000 constant        entry                    external dcl 1-54
context_node                           internal static bit(9)                   initial dcl 10-5
continue_statement                     internal static bit(9)                   initial dcl 15-3
convert                         000000 constant        entry                    external dcl 1-60
convert$from_builtin            000000 constant        entry                    external dcl 1-72
convert$to_integer              000000 constant        entry                    external dcl 1-66
convert$to_target               000000 constant        entry                    external dcl 1-88
convert$to_target_fb            000000 constant        entry                    external dcl 1-82
convert$validate                000000 constant        entry                    external dcl 1-78
copy_expression$copy_sons       000000 constant        entry                    external dcl 1-99
copy_string                            internal static bit(9)                   initial dcl 11-8
copy_unique_expression          000000 constant        entry                    external dcl 1-103
copy_words                             internal static bit(9)                   initial dcl 11-8
cos_fun                                internal static bit(9)                   initial dcl 11-8
cosd_fun                               internal static bit(9)                   initial dcl 11-8
create_array                    000000 constant        entry                    external dcl 1-108
create_block                    000000 constant        entry                    external dcl 1-112
create_bound                    000000 constant        entry                    external dcl 1-118
create_context                  000000 constant        entry                    external dcl 1-122
create_cross_reference          000000 constant        entry                    external dcl 1-128
create_default                  000000 constant        entry                    external dcl 1-132
create_identifier               000000 constant        entry                    external dcl 1-136
create_label                    000000 constant        entry                    external dcl 1-140
create_list                     000000 constant        entry                    external dcl 1-147
create_reference                000000 constant        entry                    external dcl 1-158
create_statement                000000 constant        entry                    external dcl 1-163
create_storage                  000000 constant        entry                    external dcl 1-179
create_symbol                   000000 constant        entry                    external dcl 1-184
create_token                    000000 constant        entry                    external dcl 1-191
create_token$init_hash_table    000000 constant        entry                    external dcl 1-197
create_token$protected          000000 constant        entry                    external dcl 1-199
cross_reference_node                   internal static bit(9)                   initial dcl 10-5
dec_integer_type                       internal static bit(36)                  initial dcl 17-71
decbin                          000000 constant        entry                    external dcl 1-206
declare_constant                000000 constant        entry                    external dcl 1-211
declare_constant$bit            000000 constant        entry                    external dcl 1-219
declare_constant$char           000000 constant        entry                    external dcl 1-224
declare_constant$desc           000000 constant        entry                    external dcl 1-229
declare_descriptor              000000 constant        entry                    external dcl 1-239
declare_descriptor$ctl          000000 constant        entry                    external dcl 1-249
declare_descriptor$param        000000 constant        entry                    external dcl 1-259
declare_picture                 000000 constant        entry                    external dcl 1-274
declare_picture_temp            000000 constant        entry                    external dcl 1-279
declare_pointer                 000000 constant        entry                    external dcl 1-287
declare_statement                      internal static bit(9)                   initial dcl 15-3
declare_temporary               000000 constant        entry                    external dcl 1-292
decode_node_id                  000000 constant        entry                    external dcl 1-300
decode_source_id                000000 constant        entry                    external dcl 1-306
default_area_size                      internal static fixed bin(31,0)          initial dcl 17-5
default_fix_bin_p                      internal static fixed bin(31,0)          initial dcl 17-5
default_fix_dec_p                      internal static fixed bin(31,0)          initial dcl 17-5
default_flt_bin_p                      internal static fixed bin(31,0)          initial dcl 17-5
default_flt_dec_p                      internal static fixed bin(31,0)          initial dcl 17-5
default_node                           internal static bit(9)                   initial dcl 10-5
default_statement                      internal static bit(9)                   initial dcl 15-3
delete_file                            internal static bit(9)                   initial dcl 11-8
delete_statement                       internal static bit(9)                   initial dcl 15-3
desc_size                              internal static bit(9)                   initial dcl 11-8
digit_                                 internal static fixed bin(3,0)           initial dcl 9-5
digit_to_bit                           internal static bit(9)                   initial dcl 11-8
display_statement                      internal static bit(9)                   initial dcl 15-3
div                                    internal static bit(9)                   initial dcl 11-8
do_fun                                 internal static bit(9)                   initial dcl 11-8
do_spec                                internal static bit(9)                   initial dcl 11-8
do_statement                           internal static bit(9)                   initial dcl 15-3
e_format                               internal static bit(9)                   initial dcl 11-8
else_clause                            internal static bit(9)                   initial dcl 15-3
empty_area                             internal static bit(9)                   initial dcl 11-8
enable_on                              internal static bit(9)                   initial dcl 11-8
end_statement                          internal static bit(9)                   initial dcl 15-3
entry_statement                        internal static bit(9)                   initial dcl 15-3
entry_var_type                         internal static bit(36)                  initial dcl 17-71
environmentptr_fun                     internal static bit(9)                   initial dcl 11-8
eq                                     internal static bit(9)                   initial dcl 19-3
equal                                  internal static bit(9)                   initial dcl 11-8
error                           000000 constant        entry                    external dcl 1-314
error$omit_text                 000000 constant        entry                    external dcl 1-319
error_                          000000 constant        entry                    external dcl 1-324
error_$finish                   000000 constant        entry                    external dcl 1-343
error_$initialize_error         000000 constant        entry                    external dcl 1-341
error_$no_text                  000000 constant        entry                    external dcl 1-334
ex_prologue                            internal static bit(9)                   initial dcl 11-8
exit_statement                         internal static bit(9)                   initial dcl 15-3
exp                                    internal static bit(9)                   initial dcl 11-8
exp_fun                                internal static bit(9)                   initial dcl 11-8
expon                                  internal static bit(9)                   initial dcl 19-3
f_format                               internal static bit(9)                   initial dcl 11-8
fixed_bin                              internal static bit(9)                   initial dcl 19-3
fixed_dec                              internal static bit(9)                   initial dcl 19-3
float_bin                              internal static bit(9)                   initial dcl 19-3
float_dec                              internal static bit(9)                   initial dcl 19-3
floor_fun                              internal static bit(9)                   initial dcl 11-8
format_statement                       internal static bit(9)                   initial dcl 15-3
format_value_node                      internal static bit(9)                   initial dcl 10-5
fortran_read                           internal static bit(9)                   initial dcl 11-8
fortran_write                          internal static bit(9)                   initial dcl 11-8
free_based                             internal static bit(9)                   initial dcl 11-8
free_ctl                               internal static bit(9)                   initial dcl 11-8
free_node                       000000 constant        entry                    external dcl 1-345
free_statement                         internal static bit(9)                   initial dcl 15-3
free_var                               internal static bit(9)                   initial dcl 11-8
ftn_file_manip                         internal static bit(9)                   initial dcl 11-8
ftn_trans_loop                         internal static bit(9)                   initial dcl 11-8
ge                                     internal static bit(9)                   initial dcl 19-3
get_array_size                  000000 constant        entry                    external dcl 1-348
get_data_trans                         internal static bit(9)                   initial dcl 11-8
get_edit_trans                         internal static bit(9)                   initial dcl 11-8
get_file                               internal static bit(9)                   initial dcl 11-8
get_list_trans                         internal static bit(9)                   initial dcl 11-8
get_size                        000000 constant        entry                    external dcl 1-352
get_statement                          internal static bit(9)                   initial dcl 15-3
get_string                             internal static bit(9)                   initial dcl 11-8
goto_statement                         internal static bit(9)                   initial dcl 15-3
greater_or_equal                       internal static bit(9)                   initial dcl 11-8
greater_than                           internal static bit(9)                   initial dcl 11-8
gt                                     internal static bit(9)                   initial dcl 19-3
half_to_word                           internal static bit(9)                   initial dcl 11-8
i_bin_integer                          internal static bit(9)                   initial dcl 19-3
i_dec_integer                          internal static bit(9)                   initial dcl 19-3
i_fixed_bin                            internal static bit(9)                   initial dcl 19-3
i_fixed_dec                            internal static bit(9)                   initial dcl 19-3
i_float_bin                            internal static bit(9)                   initial dcl 19-3
i_float_dec                            internal static bit(9)                   initial dcl 19-3
identifier                             internal static bit(9)                   initial dcl 19-3
if_statement                           internal static bit(9)                   initial dcl 15-3
imag_fun                               internal static bit(9)                   initial dcl 11-8
index_after_fun                        internal static bit(9)                   initial dcl 11-8
index_before_fun                       internal static bit(9)                   initial dcl 11-8
index_fun                              internal static bit(9)                   initial dcl 11-8
index_rev_fun                          internal static bit(9)                   initial dcl 11-8
integer_type                           internal static bit(36)                  initial dcl 17-71
is_arith_constant                      internal static bit(9)                   initial dcl 19-47
is_arithmetic_constant                 internal static bit(9)                   initial dcl 19-47
is_constant                            internal static bit(9)                   initial dcl 19-47
is_decimal_constant                    internal static bit(9)                   initial dcl 19-47
is_delimiter                           internal static bit(9)                   initial dcl 19-47
is_float_constant                      internal static bit(9)                   initial dcl 19-47
is_identifier                          internal static bit(9)                   initial dcl 19-47
is_imaginary_constant                  internal static bit(9)                   initial dcl 19-47
is_integral_constant                   internal static bit(9)                   initial dcl 19-47
is_isub                                internal static bit(9)                   initial dcl 19-47
isub                                   internal static bit(9)                   initial dcl 19-3
join                                   internal static bit(9)                   initial dcl 11-8
jump                                   internal static bit(9)                   initial dcl 11-8
jump_false                             internal static bit(9)                   initial dcl 11-8
jump_if_eq                             internal static bit(9)                   initial dcl 11-8
jump_if_ge                             internal static bit(9)                   initial dcl 11-8
jump_if_gt                             internal static bit(9)                   initial dcl 11-8
jump_if_le                             internal static bit(9)                   initial dcl 11-8
jump_if_lt                             internal static bit(9)                   initial dcl 11-8
jump_if_ne                             internal static bit(9)                   initial dcl 11-8
jump_true                              internal static bit(9)                   initial dcl 11-8
l_parn                                 internal static bit(9)                   initial dcl 11-8
label_array_element_node               internal static bit(9)                   initial dcl 10-5
label_node                             internal static bit(9)                   initial dcl 10-5
le                                     internal static bit(9)                   initial dcl 19-3
left_parn                              internal static bit(9)                   initial dcl 19-3
length_fun                             internal static bit(9)                   initial dcl 11-8
less_or_equal                          internal static bit(9)                   initial dcl 11-8
less_than                              internal static bit(9)                   initial dcl 11-8
line_format                            internal static bit(9)                   initial dcl 11-8
list_node                              internal static bit(9)                   initial dcl 10-5
local_label_var_type                   internal static bit(36)                  initial dcl 17-71
locate_file                            internal static bit(9)                   initial dcl 11-8
locate_statement                       internal static bit(9)                   initial dcl 15-3
lock_file                              internal static bit(9)                   initial dcl 11-8
lock_fun                               internal static bit(9)                   initial dcl 11-8
lock_statement                         internal static bit(9)                   initial dcl 15-3
log10_fun                              internal static bit(9)                   initial dcl 11-8
log2_fun                               internal static bit(9)                   initial dcl 11-8
log_fun                                internal static bit(9)                   initial dcl 11-8
loop                                   internal static bit(9)                   initial dcl 11-8
lt                                     internal static bit(9)                   initial dcl 19-3
machine_state_node                     internal static bit(9)                   initial dcl 10-5
make_desc                              internal static bit(9)                   initial dcl 11-8
max_area_size                          internal static fixed bin(31,0)          initial dcl 17-5
max_bit_string                         internal static fixed bin(31,0)          initial dcl 17-5
max_bit_string_constant                internal static fixed bin(31,0)          initial dcl 17-5
max_block_number                       internal static fixed bin(17,0)          initial dcl 8-74
max_char_string                        internal static fixed bin(31,0)          initial dcl 17-5
max_char_string_constant               internal static fixed bin(31,0)          initial dcl 17-5
max_fun                                internal static bit(9)                   initial dcl 11-8
max_identifier_length                  internal static fixed bin(31,0)          initial dcl 17-5
max_index_register_value               internal static fixed bin(31,0)          initial dcl 17-5
max_length_precision                   internal static fixed bin(31,0)          initial dcl 17-5
max_number_of_dimensions               internal static fixed bin(31,0)          initial dcl 17-5
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 12-15
max_p_bin_or_dec                       internal static fixed bin(31,0)          initial dcl 17-5
max_p_dec                              internal static fixed bin(31,0)          initial dcl 17-5
max_p_fix_bin_1                        internal static fixed bin(31,0)          initial dcl 17-5
max_p_fix_bin_2                        internal static fixed bin(31,0)          initial dcl 17-5
max_p_flt_bin_1                        internal static fixed bin(31,0)          initial dcl 17-5
max_p_flt_bin_2                        internal static fixed bin(31,0)          initial dcl 17-5
max_scale                              internal static fixed bin(31,0)          initial dcl 17-5
max_signed_index_register_value        internal static fixed bin(31,0)          initial dcl 17-5
max_signed_xreg_precision              internal static fixed bin(31,0)          initial dcl 17-5
max_uns_xreg_precision                 internal static fixed bin(31,0)          initial dcl 17-5
max_words_per_variable                 internal static fixed bin(31,0)          initial dcl 17-5
merge_attributes                000000 constant        entry                    external dcl 1-355
min_area_size                          internal static fixed bin(31,0)          initial dcl 17-5
min_fun                                internal static bit(9)                   initial dcl 11-8
min_scale                              internal static fixed bin(31,0)          initial dcl 17-5
minus                                  internal static bit(9)                   initial dcl 19-3
mod2_                                  internal static fixed bin(3,0)           initial dcl 9-5
mod4_                                  internal static fixed bin(3,0)           initial dcl 9-5
mod_bit                                internal static bit(9)                   initial dcl 11-8
mod_byte                               internal static bit(9)                   initial dcl 11-8
mod_fun                                internal static bit(9)                   initial dcl 11-8
mod_half                               internal static bit(9)                   initial dcl 11-8
mod_word                               internal static bit(9)                   initial dcl 11-8
n                                      automatic       fixed bin(15,0)          dcl 29
ne                                     internal static bit(9)                   initial dcl 19-3
negate                                 internal static bit(9)                   initial dcl 11-8
ngt                                    internal static bit(9)                   initial dcl 19-3
nlt                                    internal static bit(9)                   initial dcl 19-3
no_token                               internal static bit(9)                   initial dcl 19-3
nop                                    internal static bit(9)                   initial dcl 11-8
not                                    internal static bit(9)                   initial dcl 19-3
not_bits                               internal static bit(9)                   initial dcl 11-8
not_equal                              internal static bit(9)                   initial dcl 11-8
null_statement                         internal static bit(9)                   initial dcl 15-3
off_fun                                internal static bit(9)                   initial dcl 11-8
on_statement                           internal static bit(9)                   initial dcl 15-3
open_file                              internal static bit(9)                   initial dcl 11-8
open_statement                         internal static bit(9)                   initial dcl 15-3
optimizer                       000000 constant        entry                    external dcl 1-361
or                                     internal static bit(9)                   initial dcl 19-3
or_bits                                internal static bit(9)                   initial dcl 11-8
p                                      automatic       pointer                  dcl 27
pack                                   internal static bit(9)                   initial dcl 11-8
packed_digits_per_character            internal static fixed bin(31,0)          initial dcl 17-5
page_format                            internal static bit(9)                   initial dcl 11-8
param_desc_ptr                         internal static bit(9)                   initial dcl 11-8
param_ptr                              internal static bit(9)                   initial dcl 11-8
parse_error                     000000 constant        entry                    external dcl 1-364
parse_error$no_text             000000 constant        entry                    external dcl 1-368
percent                                internal static bit(9)                   initial dcl 19-3
period                                 internal static bit(9)                   initial dcl 19-3
picture_format                         internal static bit(9)                   initial dcl 11-8
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 1-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 1-372
pl1_mod_fun                            internal static bit(9)                   initial dcl 11-8
pl1_print$for_lex               000000 constant        entry                    external dcl 1-418
pl1_print$non_varying           000000 constant        entry                    external dcl 1-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 1-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 1-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 1-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 1-414
pl1_print$varying               000000 constant        entry                    external dcl 1-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 1-395
pl1_stat_$eis                          external static bit(1)                   dcl 44
plus                                   internal static bit(9)                   initial dcl 19-3
pointer_type                           internal static bit(36)                  initial dcl 17-71
prefix_plus                            internal static bit(9)                   initial dcl 11-8
procedure_statement                    internal static bit(9)                   initial dcl 15-3
ptr_fun                                internal static bit(9)                   initial dcl 11-8
put_control                            internal static bit(9)                   initial dcl 11-8
put_data_trans                         internal static bit(9)                   initial dcl 11-8
put_edit_trans                         internal static bit(9)                   initial dcl 11-8
put_field                              internal static bit(9)                   initial dcl 11-8
put_field_chk                          internal static bit(9)                   initial dcl 11-8
put_file                               internal static bit(9)                   initial dcl 11-8
put_list_trans                         internal static bit(9)                   initial dcl 11-8
put_statement                          internal static bit(9)                   initial dcl 15-3
put_string                             internal static bit(9)                   initial dcl 11-8
r_format                               internal static bit(9)                   initial dcl 11-8
r_parn                                 internal static bit(9)                   initial dcl 11-8
range_ck                               internal static bit(9)                   initial dcl 11-8
rank_fun                               internal static bit(9)                   initial dcl 11-8
read_file                              internal static bit(9)                   initial dcl 11-8
read_statement                         internal static bit(9)                   initial dcl 15-3
real_fun                               internal static bit(9)                   initial dcl 11-8
real_type                              internal static bit(36)                  initial dcl 17-71
record_io                              internal static bit(9)                   initial dcl 11-8
refer                                  internal static bit(9)                   initial dcl 11-8
refer_extent                    000000 constant        entry                    external dcl 1-426
rel_fun                                internal static bit(9)                   initial dcl 11-8
repeat_fun                             internal static bit(9)                   initial dcl 11-8
reserve$clear                   000000 constant        entry                    external dcl 1-430
reserve$declare_lib             000000 constant        entry                    external dcl 1-434
reserve$read_lib                000000 constant        entry                    external dcl 1-439
return_bits                            internal static bit(9)                   initial dcl 11-8
return_statement                       internal static bit(9)                   initial dcl 15-3
return_string                          internal static bit(9)                   initial dcl 11-8
return_value                           internal static bit(9)                   initial dcl 11-8
return_words                           internal static bit(9)                   initial dcl 11-8
reverse_fun                            internal static bit(9)                   initial dcl 11-8
revert_on                              internal static bit(9)                   initial dcl 11-8
revert_statement                       internal static bit(9)                   initial dcl 15-3
rewrite_file                           internal static bit(9)                   initial dcl 11-8
rewrite_statement                      internal static bit(9)                   initial dcl 15-3
right_parn                             internal static bit(9)                   initial dcl 19-3
round                                  internal static fixed bin(15,0)          initial array dcl 50
round_fun                              internal static bit(9)                   initial dcl 11-8
search_fun                             internal static bit(9)                   initial dcl 11-8
search_rev_fun                         internal static bit(9)                   initial dcl 11-8
segno_fun                              internal static bit(9)                   initial dcl 11-8
semantic_translator             000000 constant        entry                    external dcl 1-444
semantic_translator$abort       000000 constant        entry                    external dcl 1-446
semantic_translator$error       000000 constant        entry                    external dcl 1-450
semi_colon                             internal static bit(9)                   initial dcl 19-3
setbitno_fun                           internal static bit(9)                   initial dcl 11-8
setcharno_fun                          internal static bit(9)                   initial dcl 11-8
sf_par_node                            internal static bit(9)                   initial dcl 10-5
share_expression                000000 constant        entry                    external dcl 1-454
sign_fun                               internal static bit(9)                   initial dcl 11-8
signal_on                              internal static bit(9)                   initial dcl 11-8
signal_statement                       internal static bit(9)                   initial dcl 15-3
sin_fun                                internal static bit(9)                   initial dcl 11-8
sind_fun                               internal static bit(9)                   initial dcl 11-8
skip_format                            internal static bit(9)                   initial dcl 11-8
slash                                  internal static bit(9)                   initial dcl 19-3
source_node                            internal static bit(9)                   initial dcl 10-5
sqrt_fun                               internal static bit(9)                   initial dcl 11-8
stack_ptr                              internal static bit(9)                   initial dcl 11-8
stackbaseptr_fun                       internal static bit(9)                   initial dcl 11-8
stackframeptr_fun                      internal static bit(9)                   initial dcl 11-8
stacq_fun                              internal static bit(9)                   initial dcl 11-8
statement_node                         internal static bit(9)                   initial dcl 10-5
std_arg_list                           internal static bit(9)                   initial dcl 11-8
std_call                               internal static bit(9)                   initial dcl 11-8
std_entry                              internal static bit(9)                   initial dcl 11-8
std_return                             internal static bit(9)                   initial dcl 11-8
stop                                   internal static bit(9)                   initial dcl 11-8
stop_statement                         internal static bit(9)                   initial dcl 15-3
storage_block_type                     internal static bit(36)                  initial dcl 17-71
stream_prep                            internal static bit(9)                   initial dcl 11-8
system_on_unit                         internal static bit(9)                   initial dcl 15-3
tan_fun                                internal static bit(9)                   initial dcl 11-8
tand_fun                               internal static bit(9)                   initial dcl 11-8
temporary_node                         internal static bit(9)                   initial dcl 10-5
terminate_trans                        internal static bit(9)                   initial dcl 11-8
translate_fun                          internal static bit(9)                   initial dcl 11-8
trunc_fun                              internal static bit(9)                   initial dcl 11-8
unknown_statement                      internal static bit(9)                   initial dcl 15-3
unlock_file                            internal static bit(9)                   initial dcl 11-8
unlock_statement                       internal static bit(9)                   initial dcl 15-3
unpack                                 internal static bit(9)                   initial dcl 11-8
v                                      automatic       pointer                  dcl 458
vclock_fun                             internal static bit(9)                   initial dcl 11-8
verify_fun                             internal static bit(9)                   initial dcl 11-8
verify_ltrim_fun                       internal static bit(9)                   initial dcl 11-8
verify_rev_fun                         internal static bit(9)                   initial dcl 11-8
verify_rtrim_fun                       internal static bit(9)                   initial dcl 11-8
wait_statement                         internal static bit(9)                   initial dcl 15-3
word_to_mod8                           internal static bit(9)                   initial dcl 11-8
wordno_fun                             internal static bit(9)                   initial dcl 11-8
words_per_condition_var                internal static fixed bin(31,0)          initial dcl 17-5
words_per_entry_var                    internal static fixed bin(31,0)          initial dcl 17-5
words_per_file_var                     internal static fixed bin(31,0)          initial dcl 17-5
words_per_fix_bin_1                    internal static fixed bin(31,0)          initial dcl 17-5
words_per_fix_bin_2                    internal static fixed bin(31,0)          initial dcl 17-5
words_per_flt_bin_1                    internal static fixed bin(31,0)          initial dcl 17-5
words_per_flt_bin_2                    internal static fixed bin(31,0)          initial dcl 17-5
words_per_format                       internal static fixed bin(31,0)          initial dcl 17-5
words_per_label_var                    internal static fixed bin(31,0)          initial dcl 17-5
words_per_offset                       internal static fixed bin(31,0)          initial dcl 17-5
words_per_packed_pointer               internal static fixed bin(31,0)          initial dcl 17-5
words_per_pointer                      internal static fixed bin(31,0)          initial dcl 17-5
words_per_varying_string_header        internal static fixed bin(31,0)          initial dcl 17-5
write_file                             internal static bit(9)                   initial dcl 11-8
write_statement                        internal static bit(9)                   initial dcl 15-3
x_format                               internal static bit(9)                   initial dcl 11-8
xor_bits                               internal static bit(9)                   initial dcl 11-8

NAMES DECLARED BY EXPLICIT CONTEXT.
addf                            002045 constant        entry                    internal dcl 380 ref 438 443 447 577
assignf                         001722 constant        entry                    internal dcl 361 ref 232 234 236
build_multipliers               000451 constant        label                    dcl 185 ref 113 120 121 123 131 138 146
common                          002105 constant        label                    dcl 394 ref 388
get_array_size                  000036 constant        entry                    external dcl 11
interleaved                     002466 constant        entry                    internal dcl 455 ref 351 582
multf                           002145 constant        entry                    internal dcl 403 ref 109 200 264 266 276 278 288 290
                                                                                  302 304 313 315 340 443 443 447 447 535 535 550
                                                                                  550
subf                            002076 constant        entry                    internal dcl 390 ref 301 310 312 312 312
virtue                          002264 constant        entry                    internal dcl 434 ref 255 499 556

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      3572        3630    3361        3602
Length      4434    3361        36         570     210           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
get_array_size                      170 external procedure  is an external procedure.  
on unit on line 185                  74 on unit               
assignf                                 internal procedure  shares stack frame of external procedure get_array_size.  
addf                                 76 internal procedure  is called by several nonquick procedures.  
multf                                84 internal procedure  is called by several nonquick procedures.  
virtue                               88 internal procedure  is called by several nonquick procedures.  
interleaved                         122 internal procedure  calls itself recursively.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
addf                     000100 q                           addf
                         000102 opcode                      addf
get_array_size           000100 is_packed_star_param        get_array_size
                         000102 blk                         get_array_size
                         000104 s                           get_array_size
                         000106 a                           get_array_size
                         000110 b                           get_array_size
                         000112 t                           get_array_size
                         000114 q                           get_array_size
                         000116 dm                          get_array_size
                         000120 m                           get_array_size
                         000122 cm                          get_array_size
                         000123 cdm                         get_array_size
                         000124 c                           get_array_size
                         000126 optable                     get_array_size
                         000146 p                           assignf
                         000150 q                           assignf
interleaved              000100 equal                       interleaved
                         000101 packed_eq                   interleaved
                         000102 p                           interleaved
                         000104 q                           interleaved
                         000106 a1                          interleaved
                         000110 b                           interleaved
                         000112 b1                          interleaved
multf                    000100 arg                         multf
                         000104 q                           multf
                         000106 i                           multf

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_e_as              call_ent_var        call_ext_out        call_int_this       call_int_other      return_mac
mdfx1               enable_op           ext_entry           int_entry           size_check_fx2

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
copy_expression               create_array                  create_bound                  create_operator
create_statement$prologue     declare_constant$integer      declare_integer               token_to_binary

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pl1_stat_$eis_mode            pl1_stat_$util_abort          pl1_stat_$util_error




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000032        30 000043        53 000055        55 000061        56 000063        57 000066        58 000070
     60 000101        62 000111        63 000113        64 000115        65 000117        69 000121        73 000140
     74 000143        75 000150        77 000151        78 000166        79 000172        80 000173        82 000174
     84 000176        86 000201        87 000205        89 000206        90 000222        91 000226        94 000227
    100 000234       104 000252       106 000253       109 000270       112 000320       113 000324       120 000325
    121 000331       123 000336       127 000347       128 000353       129 000356       131 000357       133 000363
    134 000367       138 000372       142 000406       143 000412       144 000415       146 000416       148 000422
    149 000426       153 000431       156 000442       157 000446       185 000451       187 000501       188 000504
    190 000507       192 000526       194 000541       196 000543       198 000545       200 000553       204 000577
    208 000606       209 000625       213 000644       216 000662       217 000700       220 000702       223 000717
    224 000735       230 000737       232 000743       234 000761       236 001000       243 001010       245 001017
    246 001022       247 001024       249 001035       250 001037       255 001041       259 001051       264 001065
    265 001112       266 001113       267 001141       268 001142       270 001143       271 001145       272 001152
    273 001154       274 001160       276 001161       277 001175       278 001176       279 001213       280 001214
    282 001215       283 001217       285 001222       286 001224       288 001226       289 001253       290 001254
    291 001301       292 001302       294 001303       295 001305       296 001312       297 001314       299 001320
    301 001321       302 001351       303 001363       304 001364       305 001376       307 001377       310 001400
    312 001435       313 001502       314 001514       315 001515       316 001527       319 001530       321 001546
    325 001566       326 001577       333 001603       334 001606       335 001607       337 001615       340 001625
    341 001655       345 001661       346 001664       351 001666       353 001677       355 001710       357 001721
    361 001722       366 001724       367 001741       368 001752       369 001767       370 001773       371 002021
    373 002037       380 002044       386 002052       387 002072       388 002074       390 002075       392 002103
    394 002105       396 002122       397 002133       399 002142       403 002144       411 002152       412 002156
    414 002161       415 002167       420 002217       422 002230       424 002232       425 002251       426 002256
    428 002261       434 002263       438 002271       442 002327       443 002333       446 002412       447 002420
    449 002464       455 002465       463 002473       464 002504       465 002507       466 002522       468 002526
    469 002530       470 002532       471 002545       472 002553       475 002564       476 002566       477 002571
    478 002573       479 002575       480 002577       481 002604       482 002606       484 002607       485 002622
    487 002623       488 002627       489 002630       490 002632       491 002634       494 002636       495 002644
    497 002646       498 002651       499 002653       502 002664       503 002666       511 002671       512 002701
    513 002705       514 002711       515 002714       516 002716       518 002721       519 002732       520 002741
    521 002746       522 002750       523 002764       525 003001       527 003003       528 003020       529 003023
    531 003025       532 003041       533 003044       535 003045       537 003111       539 003115       541 003116
    543 003127       544 003133       545 003147       546 003152       547 003154       549 003155       550 003162
    552 003226       553 003230       556 003232       561 003243       563 003253       565 003256       566 003257
    570 003263       575 003302       577 003304       578 003322       582 003326       584 003341       586 003345


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
