ASSEMBLY LISTING OF SEGMENT >spec>on>41-16>user_message_priv_.alm          
ASSEMBLED ON:	04/11/85  1131.9 mst Thu
OPTIONS USED:	list 
ASSEMBLED BY:	ALM Version  6.6  November 1982 
ASSEMBLER CREATED:	09/21/83  1227.3 mst Wed

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Information Systems Inc., 1985 *
                                     4  " *                                                         *
                                     5  " ***********************************************************
                                     6  " gate for users to as_user_message_
                                     7  " BIM 1985-02-16
                                     8  
                                     9  	include	gate_macros
                                   1-1  " BEGIN INCLUDE FILE ...... gate_macros.incl.alm
                                   1-2  "   Last modified 6/77 by N. Morris, B. Greenberg, & T. VanVleck
                                   1-3  "   Modified 741212 by PG to inhibit while computing virtual CPU time
                                   1-4  "   Modified 83-03-14 by E. N. Kittlitz to clear IR
                                   1-5  "   Modified 83-06-01 BIM for ring alarm polling
                                   1-6  "   Modified 85-04-03 by Keith Loepere to make polling a little smarter.
                                   1-7  
                                   1-8  " This file contains several macros used when generating gate segments.
                                   1-9  " The major macros that are defined are:
                                  1-10  "
                                  1-11  "	gate_info		general setup code for normal gates
                                  1-12  "	hardcore_gate_info	general setup code for hardcore gates
                                  1-13  "	bad_dir_handler	setup and handler for bad_dir_ condition (goes at bottom)
                                  1-14  "	bad_dir_handler_entry	entrypoint for above (goes at top)
                                  1-15  "	gate		to define a normal gate
                                  1-16  "	hgate		to define a hardcore gate
                                  1-17  "	fgate		to define a fast hardcore gate
                                  1-18  "
                                  1-19  
                                  1-20  
    000000                        1-21  	maclist	off
                                  1-22  
                                  1-23  
                                  1-24  " HGATE - define a hardcore gate entry
                                  1-25  "
                                  1-26  "	hgate	gatename,procedure,entry,args{,bad_dir_trap}
                                  1-27  "
                                  1-28  " The entrypoint gatename is defined in the gate segment.  If args
                                  1-29  " is nonzero, the number of arguments passed to gatename must be
                                  1-30  " equal to args.  When gatename is called, it will in turn call
                                  1-31  " procedure$entry.
                                  1-32  "
                                  1-33  
                                  1-34  macro	hgate
                              1   1-35  	gentry	&1,&4*2,&1.t
                              2   1-36  	tsx2	.setup
                              3   1-37  &=&5,bad_dir_trap&[	tsx0	.set_dir_trap
                              4   1-38  &]	ldi	=0,dl
                              5   1-39  	short_call &2$&3(ap|0)
                              6   1-40  	eppbp	lp|&1.t
                              7   1-41  	tra	.return_code
                              8   1-42  	maclist	restore
                              9   1-43  	use	linkage
                             10   1-44  	even
                             11   1-45  	maclist	on,save
                             12   1-46  &1.t:
                             13   1-47  	bss	,gate_entry_data_size
                             14   1-48  
                             15   1-49  	maclist	restore
                             16   1-50  &end
                                  1-51  
                                  1-52  
                                  1-53  " FGATE - define a fast hardcore gate
                                  1-54  "
                                  1-55  "	fgate	gatename,procedure,entry
                                  1-56  "
                                  1-57  
                                  1-58  macro	fgate
                              1   1-59  	gentry	&1,0,0
                              2   1-60  	ldi	=0,dl
                              3   1-61  	epplp	.my_lp,*
                              4   1-62  	tra	&2$&3
                              5   1-63  
                              6   1-64  	maclist	off
                              7   1-65  &end
                                  1-66  
                                  1-67  
                                  1-68  " GATE - define a normal gate entry
                                  1-69  "
                                  1-70  "	gate	gatename,procedure,entry,args
                                  1-71  "
                                  1-72  
                                  1-73  macro	gate
                              1   1-74  	gentry	&1,&4*2,0
                              2   1-75  	tsx2	.setup
                              3   1-76  	ldi	=0,dl
                              4   1-77  	short_call &2$&3(ap|0)
                              5   1-78  	return
                              6   1-79  
                              7   1-80  	maclist	restore
                              8   1-81  &end
                                  1-82  
                                  1-83  
                                  1-84  
                                  1-85  macro	gentry
                              1   1-86  	maclist	on,save
                              2   1-87  	segdef	&1
                              3   1-88  	maclist	restore
                              4   1-89  	use	transfer_vector
                              5   1-90  	maclist	on,save
                              6   1-91  &1:
                              7   1-92  	tra	&1.e
                              8   1-93  	maclist	restore
                              9   1-94  	use	main
                             10   1-95  	maclist	on,save
                             11   1-96  	zero	&2,&3
                             12   1-97  &1.e:
                             13   1-98  &end
                                  1-99  
                                 1-100  
                                 1-101  " HARDCORE_GATE_INFO - general info for hardcore gates
                                 1-102  
                                 1-103  macro	hardcore_gate_info
                              1  1-104  	maclist	on,save
                              2  1-105  	name	&1
                              3  1-106  
                              4  1-107  	include	stack_header
                              5  1-108  
                              6  1-109  	include	stack_frame
                              7  1-110  	include	gate_data
                              8  1-111  
                              9  1-112  	maclist	restore
                             10  1-113  	eject
                             11  1-114  
                             12  1-115  	tempd	.temp
                             13  1-116  	tempd	.label_variable(0)
                             14  1-117  	tempd	.time1,.time2
                             15  1-118  	tempd	.unwinder_arglist(0)
                             16  1-119  	tempd	.on_unit(5)
                             17  1-120  	temp	.pf,.entryp
                             18  1-121  	tempd	.vfl_arglist(2)
                             19  1-122  	tempd	.mcptr
                             20  1-123  
                             21  1-124  	use	transfer_vector
                             22  1-125  	equ	.tv_begin,*
                             23  1-126  
                             24  1-127  	tra	.actor
                             25  1-128  
                             26  1-129  	use	tv_end
                             27  1-130  	entrybound
                             28  1-131  
                             29  1-132  	segdef	.tv_end
                             30  1-133  .tv_end:	vfd	14/(*-.tv_begin)
                             31  1-134  
                             32  1-135  	use	main
                             33  1-136  
                             34  1-137  	segdef	.my_lp
                             35  1-138  	even
                             36  1-139  .my_lp:	bss	,2
                             37  1-140  
                             38  1-141  	join	/text/transfer_vector,tv_end,main
                             39  1-142  
                             40  1-143  	use	linkage
                             41  1-144  	join	/link/linkage
                             42  1-145  
                             43  1-146  	use	main
                             44  1-147  
                             45  1-148  	maclist	restore
                             46  1-149  	eject
                             47  1-150  
                             48  1-151  .actor:	epplp	.my_lp,*
                             49  1-152  	maclist	restore
                             50  1-153  	gate_actor
                             51  1-154  
                             52  1-155  
                             53  1-156  
                             54  1-157  .setup:	push
                             55  1-158  	epplp	.my_lp,*
                             56  1-159  	sprilp	sp|stack_frame.lp_ptr
                             57  1-160  
                             58  1-161  	maclist	restore
                             59  1-162  	gcheck
                             60  1-163  
                             61  1-164  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
                             62  1-165  	rccl	sys_info$clock_,*	calculate times
                             63  1-166  	sbaq	pds$cpu_time
                             64  1-167  	staq	.time1
                             65  1-168  	sbaq	pds$virtual_delta
                             66  1-169  	staq	.time2
                             67  1-170  	lda	pds$page_waits
                             68  1-171  	sta	.pf
                             69  1-172  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                             70  1-173  	tra	0,2
                             71  1-174  
                             72  1-175  	maclist	restore
                             73  1-176  	eject
                             74  1-177  
                             75  1-178  .return_code:
                             76  1-179  
                             77  1-180  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
                             78  1-181  	rccl	sys_info$clock_,*	calculate times
                             79  1-182  	sbaq	pds$cpu_time
                             80  1-183  	staq	.temp
                             81  1-184  	sbaq	.time1
                             82  1-185  	adaq	bp|gate_entry_data.cpu_time
                             83  1-186  	staq	bp|gate_entry_data.cpu_time
                             84  1-187  	ldaq	.temp
                             85  1-188  	sbaq	pds$virtual_delta
                             86  1-189  	sbaq	.time2
                             87  1-190  	adaq	bp|gate_entry_data.vcpu_time
                             88  1-191  	staq	bp|gate_entry_data.vcpu_time
                             89  1-192  	lda	pds$page_waits
                             90  1-193  	sbla	.pf
                             91  1-194  	asa	bp|gate_entry_data.page_waits
                             92  1-195  	aos	bp|gate_entry_data.calls
                             93  1-196  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                             94  1-197  
                             95  1-198  			" Poll for ring alarms
                             96  1-199  	sra	.temp	Borrow from time calc
                             97  1-200  	szn	.temp	Zero?
                             98  1-201  	tze	.return_code_return
                             99  1-202  
                            100  1-203  	epp1	sp|stack_frame.prev_sp,*	"possible ring alarm
                            101  1-204  	epaq	pr1|stack_frame.return_ptr,*
                            102  1-205  	ana	7,dl	" ring number to which we return
                            103  1-206  	cmpa	.temp
                            104  1-207  	tpl	.ring_alarm	" ring alarm will occur
                            105  1-208  
                            106  1-209  .return_code_return:
                            107  1-210  	return
                            108  1-211  
                            109  1-212  .ring_alarm:		" perhaps we can handle without faults?
                            110  1-213  
                            111  1-214  	aos	bp|gate_entry_data.ring_alarms
                            112  1-215  	stz	.temp	" return argument for ring_alarm$poll
                            113  1-216  	ldaq	.one_arg_header
                            114  1-217  	staq	.ring_alarm_arg_list
                            115  1-218  	epp1	.temp
                            116  1-219  	spri1	.ring_alarm_arg_list+2
                            117  1-220  	eppap	.ring_alarm_arg_list
                            118  1-221  	short_call ring_alarm$poll
                            119  1-222  	szn	.temp
                            120  1-223  	tze	.return_code_return
                            121  1-224  	eppsp	sp|stack_frame.prev_sp,*
                            122  1-225  	sprisp	pds$pre_empt_poll_return          " short-return from here
                            123  1-226  	epp1	sb|stack_header.stack_begin_ptr,* " abandoning this stack frame.
                            124  1-227  	spri1	sb|stack_header.stack_end_ptr
                            125  1-228  " Leave SB as stack_0, so pxss can get to operators.
                            126  1-229  	tra	pxss$pre_empt_poll
                            127  1-230  
                            128  1-231  	tempd	.ring_alarm_arg_list(2)
                            129  1-232  	even
                            130  1-233  .one_arg_header:
                            131  1-234  	vfd	17/2,1/0,18/4
                            132  1-235  	vfd	18/0,18/0
                            133  1-236  
                            134  1-237  
                            135  1-238  	maclist	restore
                            136  1-239  	eject
                            137  1-240  	maclist	restore
                            138  1-241  &end
                                 1-242  
                                 1-243  
                                 1-244  " BAD_DIR_HANDLER - code to setup and handle bad_dir_ condition
                                 1-245  "			put this after the last hgate macro
                                 1-246  
                                 1-247  macro	bad_dir_handler
                              1  1-248  	maclist	on,save
                              2  1-249  
                              3  1-250  	include	on_unit
                              4  1-251  
                              5  1-252  	use	transfer_vector
                              6  1-253  .handler_entry:
                              7  1-254  	tra	.handler
                              8  1-255  .handler_restart_entry:
                              9  1-256  	tra	.handler_restart_point
                             10  1-257  
                             11  1-258  	use	main
                             12  1-259  .set_dir_trap:
                             13  1-260  	stx0	.entryp		save for restart
                             14  1-261  
                             15  1-262  	mlr	(),(pr),fill(000)
                             16  1-263  	desc9a	0,0
                             17  1-264  	desc9a	.on_unit,10*4
                             18  1-265  	eppbp	.bad_dir_name
                             19  1-266  	spribp	.on_unit+on_unit.name
                             20  1-267  	eppbp	.handler_entry
                             21  1-268  	spribp	.on_unit+on_unit.body
                             22  1-269  	lxl1	.bad_dir_desc
                             23  1-270  	sxl1	.on_unit+on_unit.size
                             24  1-271  	eaa	.on_unit		set up on-unit for bad_dir_
                             25  1-272  	sbla	sp|0,du		.. make rel to sp
                             26  1-273  	sta	sp|stack_frame.on_unit_rel_ptrs
                             27  1-274  	lda	stack_frame.condition_bit,dl
                             28  1-275  	orsa	sp|stack_frame.flag_word
                             29  1-276  	tra	0,0
                             30  1-277  
                             31  1-278  	string	bad_dir_
                             32  1-279  
                             33  1-280  
                             34  1-281  
                             35  1-282  .handler:	epaq	sp|0		verify that call came from ring 0
                             36  1-283  	cana	-1,dl		check ring number in AL
                             37  1-284  	tze	*+2
                             38  1-285  	zero	0		go way kid you bother me
                             39  1-286  
                             40  1-287  	push			" ok, we like the call
                             41  1-288  	epplp	.my_lp,*
                             42  1-289  	ldx0	ap|0		get display
                             43  1-290  	eppbp	ap|2,0*
                             44  1-291  	lda	bp|stack_frame.prev_sp
                             45  1-292  	cana	=o700000,dl	from another ring?
                             46  1-293  	tze	.continue_signal	if not, back to signal_
                             47  1-294  	eppap	ap|2,*		Get mcptr
                             48  1-295  	eppap	ap|0,*		..
                             49  1-296  	spriap	bp|.mcptr		.. save in gate frame
                             50  1-297  	spribp	.label_variable+2
                             51  1-298  	eppbp	.handler_restart_entry
                             52  1-299  	spribp	.label_variable
                             53  1-300  	eppbp	.label_variable
                             54  1-301  	spribp	.unwinder_arglist+2
                             55  1-302  	fld	=1b24,dl
                             56  1-303  	staq	.unwinder_arglist
                             57  1-304  	call	unwinder_$unwinder_(.unwinder_arglist)
                             58  1-305  
                             59  1-306  .continue_signal:
                             60  1-307  	lda	=o400000,du	"1"b
                             61  1-308  	sta	ap|10,*		set continue bit
                             62  1-309  	return
                             63  1-310  
                             64  1-311  .handler_restart_point:
                             65  1-312  	epaq	sp|0		check that call came from ring 0
                             66  1-313  	cana	-1,dl
                             67  1-314  	tze	*+2
                             68  1-315  	zero	1
                             69  1-316  	epplp	.my_lp,*
                             70  1-317  	lca	stack_frame.condition_bit+1,dl  Vanish on-unit
                             71  1-318  	ansa	sp|stack_frame.flag_word
                             72  1-319  	eppbp	.mcptr
                             73  1-320  	spribp	.vfl_arglist+2
                             74  1-321  	fld	=1b24,dl
                             75  1-322  	staq	.vfl_arglist
                             76  1-323  	short_call  verify_lock$verify_lock_bad_dir(.vfl_arglist)
                             77  1-324  	ldx0	.entryp
                             78  1-325  	eppap	sp|stack_frame.arg_ptr,*
                             79  1-326  	tra	0,0		retry the call
                             80  1-327  
                             81  1-328  	maclist	restore
                             82  1-329  	eject
                             83  1-330  	maclist	restore
                             84  1-331  &end
                                 1-332  
                                 1-333  
                                 1-334  " GATE_INFO - general info for non-hardcore gates
                                 1-335  
                                 1-336  macro	gate_info
                              1  1-337  	maclist	on,save
                              2  1-338  	use	transfer_vector
                              3  1-339  	tra	.actor
                              4  1-340  
                              5  1-341  	use	tv_end
                              6  1-342  	entrybound
                              7  1-343  
                              8  1-344  	use	main
                              9  1-345  	join	/text/transfer_vector,tv_end,main
                             10  1-346  
                             11  1-347  	maclist	restore
                             12  1-348  	eject
                             13  1-349  
                             14  1-350  .actor:	getlp
                             15  1-351  	maclist	restore
                             16  1-352  	gate_actor
                             17  1-353  
                             18  1-354  	maclist	restore
                             19  1-355  	eject
                             20  1-356  
                             21  1-357  .setup:	push
                             22  1-358  	getlp
                             23  1-359  	maclist	restore
                             24  1-360  	gcheck
                             25  1-361  	tra	0,2
                             26  1-362  
                             27  1-363  	maclist	restore
                             28  1-364  	eject
                             29  1-365  
                             30  1-366  	maclist	restore
                             31  1-367  &end
                                 1-368  
                                 1-369  
                                 1-370  " Macro to generate gate actor.
                                 1-371  
                                 1-372  macro	gate_actor
                              1  1-373  	maclist	on,save
                              2  1-374  	eppbp	ap|2,*
                              3  1-375  	lda	bp|-1		get length of string
                              4  1-376  	tze	.return_name	zero length => get name
                              5  1-377  
                              6  1-378  	adla	1,dl		include length of acc
                              7  1-379  	stz	ap|4,*
                              8  1-380  	tsx0	.search_defs
                              9  1-381  
                             10  1-382  	cmpc	(pr,rl),(pr,rl)	compare name
                             11  1-383  	desc9a	bp|-1(3),al
                             12  1-384  	desc9a	bb|0,al
                             13  1-385  	tnz	.next_def
                             14  1-386  
                             15  1-387  	lda	ab|1,2		return location
                             16  1-388  	arl	18
                             17  1-389  	sta	ap|4,*
                             18  1-390  
                             19  1-391  	short_return
                             20  1-392  
                             21  1-393  .return_name:
                             22  1-394  	lxl3	ap|4,*		get location
                             23  1-395  	tsx0	.search_defs
                             24  1-396  
                             25  1-397  	cmpx3	ab|1,2		compare location
                             26  1-398  	tnz	.next_def
                             27  1-399  
                             28  1-400  	lda	bb|0		get length of name
                             29  1-401  	arl	27
                             30  1-402  	sta	bp|-1		set length of varying string
                             31  1-403  	mlr	(pr,rl),(pr,rl)	return string
                             32  1-404  	desc9a	bb|0(1),al
                             33  1-405  	desc9a	bp|0,al
                             34  1-406  
                             35  1-407  	short_return
                             36  1-408  
                             37  1-409  .search_defs:
                             38  1-410  	eax2	0
                             39  1-411  	eppab	lp|0,*		ab -> defs
                             40  1-412  .defs_loop:
                             41  1-413  	lxl1	ab|1,2		get class and flags
                             42  1-414  	cmpx1	=o400000,du	must be class 0
                             43  1-415  	tnz	.next_def
                             44  1-416  
                             45  1-417  	ldx7	ab|2,2
                             46  1-418  	eppbb	ab|0,7		bb -> name
                             47  1-419  	tra	0,0		test definition
                             48  1-420  .next_def:
                             49  1-421  	ldx2	ab|0,2		chain to next def
                             50  1-422  	tnz	.defs_loop
                             51  1-423  
                             52  1-424  	short_return
                             53  1-425  
                             54  1-426  &end
                                 1-427  
                                 1-428  
                                 1-429  " Miscellaneous macros.
                                 1-430  
                                 1-431  macro	gcheck
                              1  1-432  	maclist	on,save
                              2  1-433  	ldx1	-2,2		get number of args expected
                              3  1-434  	tze	.no_gate_error	if zero, none or doesn't matter
                              4  1-435  	cmpx1	ap|0		compare against number given
                              5  1-436  	tze	.no_gate_error	args match, call procedure
                              6  1-437  
                              7  1-438  	call	signal_$signal_(signal_arglist)
                              8  1-439  	oct	0
                              9  1-440  
                             10  1-441  	even
                             11  1-442  signal_arglist:
                             12  1-443  	zero	2,4
                             13  1-444  	zero	2,0
                             14  1-445  	arg	.gate_errorname
                             15  1-446  	arg
                             16  1-447  	arg	.gate_errordesc
                             17  1-448  	arg
                             18  1-449  
                             19  1-450  	string	gate_error
                             20  1-451  
                             21  1-452  
                             22  1-453  .no_gate_error:
                             23  1-454  &end
                                 1-455  
                                 1-456  macro	string
                              1  1-457  .&1name:
                              2  1-458  	aci	"&1"
                              3  1-459  .&1desc:
                              4  1-460  	vfd	o9/525,o27/&l1
                              5  1-461  
                              6  1-462  &end
                                 1-463  
                                 1-464  macro	eject
                              1  1-465  	maclist	on,save
                              2  1-466  
                              3  1-467  &end
                                 1-468  
                                 1-469  " END INCLUDE FILE ...... gate_macros.incl.alm
                                 1-470  
                                 1-471  "  To arrange the return it wants to return, it will have to reach back  2 frames.
                                    10  	gate_info user_message_priv_
                                        	use	transfer_vector
    000000  0a   000006 7100 00         	tra	.actor
                                        
                                        	use	tv_end
                                        	entrybound
                                        
                                        	use	main
                                        	join	/text/transfer_vector,tv_end,main
                                        
                                        
                                        
    000006  aa  7 00046 2721 20         .actor:	getlp
    000007  aa  0 00002 3521 20         	eppbp	ap|2,*
    000010  aa  2 77777 2351 00         	lda	bp|-1		get length of string
    000011  0a   000025 6000 00         	tze	.return_name	zero length => get name
                                        
    000012  aa   000001 0350 07         	adla	1,dl		include length of acc
    000013  aa  0 00004 4501 20         	stz	ap|4,*
    000014  0a   000040 7000 00         	tsx0	.search_defs
                                        
    000015  aa  0 00140 1065 40         	cmpc	(pr,rl),(pr,rl)	compare name
    000016  aa   277777 600005          	desc9a	bp|-1(3),al
    000017  aa   300000 000005          	desc9a	bb|0,al
    000020  0a   000050 6010 00         	tnz	.next_def
                                        
    000021  aa  1 00001 2351 12         	lda	ab|1,2		return location
    000022  aa   000022 7710 00         	arl	18
    000023  aa  0 00004 7551 20         	sta	ap|4,*
                                        
    000024  aa  7 00044 7101 20         	short_return
                                        
    000025                              .return_name:
    000025  aa  0 00004 7231 20         	lxl3	ap|4,*		get location
    000026  0a   000040 7000 00         	tsx0	.search_defs
                                        
    000027  aa  1 00001 1031 12         	cmpx3	ab|1,2		compare location
    000030  0a   000050 6010 00         	tnz	.next_def
                                        
    000031  aa  3 00000 2351 00         	lda	bb|0		get length of name
    000032  aa   000033 7710 00         	arl	27
    000033  aa  2 77777 7551 00         	sta	bp|-1		set length of varying string
    000034  aa  0 00140 1005 40         	mlr	(pr,rl),(pr,rl)	return string
    000035  aa   300000 200005          	desc9a	bb|0(1),al
    000036  aa   200000 000005          	desc9a	bp|0,al
                                        
    000037  aa  7 00044 7101 20         	short_return
                                        
    000040                              .search_defs:
    000040  aa   000000 6220 00         	eax2	0
    000041  aa  4 00000 3515 20         	eppab	lp|0,*		ab -> defs
    000042                              .defs_loop:
    000042  aa  1 00001 7211 12         	lxl1	ab|1,2		get class and flags
    000043  aa   400000 1010 03         	cmpx1	=o400000,du	must be class 0
    000044  0a   000050 6010 00         	tnz	.next_def
                                        
    000045  aa  1 00002 2271 12         	ldx7	ab|2,2
    000046  aa  1 00000 3535 17         	eppbb	ab|0,7		bb -> name
    000047  aa   000000 7100 10         	tra	0,0		test definition
    000050                              .next_def:
    000050  aa  1 00000 2221 12         	ldx2	ab|0,2		chain to next def
    000051  0a   000042 6010 00         	tnz	.defs_loop
                                        
    000052  aa  7 00044 7101 20         	short_return
                                        
                                        
                                        
                                        
    000053  aa   000060 6270 00         .setup:	push
    000054  aa  7 00040 2721 20
    000055  aa  7 00046 2721 20         	getlp
    000056  aa   777776 2210 12         	ldx1	-2,2		get number of args expected
    000057  0a   000104 6000 00         	tze	.no_gate_error	if zero, none or doesn't matter
    000060  aa  0 00000 1011 00         	cmpx1	ap|0		compare against number given
    000061  0a   000104 6000 00         	tze	.no_gate_error	args match, call procedure
                                        
    000062  aa  6 00000 2541 00         	call	signal_$signal_(signal_arglist)
    000063  0a   000072 3500 00
    000064  4a  4 00010 3521 20
    000065  aa  6 00040 7531 00
    000066  aa  7 00036 6701 20
    000067  aa  6 00000 1731 00
    000070  aa  6 00040 0731 00
    000071  aa   000000 000000          	oct	0
                                        
                                        	even
    000072                              signal_arglist:
    000072  aa   000002 000004          	zero	2,4
    000073  aa   000002 000000          	zero	2,0
    000074  0a   000100 0000 00         	arg	.gate_errorname
    000075  aa   000000 0000 00         	arg
    000076  0a   000103 0000 00         	arg	.gate_errordesc
    000077  aa   000000 0000 00         	arg
                                        
                                        	string	gate_error
    000100                              .gate_errorname:
    000100  aa  147 141 164 145         	aci	"gate_error"
    000101  aa  137 145 162 162
    000102  aa  157 162 000 000
    000103                              .gate_errordesc:
    000103  aa   525000 000010          	vfd	o9/525,o27/10
                                        
                                        
                                        
    000104                              .no_gate_error:
    000104  aa   000000 7100 12         	tra	0,2
                                        
                                        
                                        
                                    11  	gate	system_init,asum_,system_init,1
                        000001          	segdef	system_init
    000001                              system_init:
    000001  0a   000106 7100 00         	tra	system_init.e
    000105  aa   000002 000000          	zero	1*2,0
    000106                              system_init.e:
    000106  0a   000053 7020 00         	tsx2	.setup
    000107  aa   000000 6340 07         	ldi	=0,dl
    000110  4a  4 00012 3521 20         	short_call asum_$system_init(ap|0)
    000111  aa  7 00036 6701 20
    000112  aa  6 00030 3701 20
    000113  aa  7 00042 7101 20         	return
                                        
                                    12  	gate	add_message,asum_,priv_add,2
                        000002          	segdef	add_message
    000002                              add_message:
    000002  0a   000115 7100 00         	tra	add_message.e
    000114  aa   000004 000000          	zero	2*2,0
    000115                              add_message.e:
    000115  0a   000053 7020 00         	tsx2	.setup
    000116  aa   000000 6340 07         	ldi	=0,dl
    000117  4a  4 00014 3521 20         	short_call asum_$priv_add(ap|0)
    000120  aa  7 00036 6701 20
    000121  aa  6 00030 3701 20
    000122  aa  7 00042 7101 20         	return
                                        
                                    13  	gate	delete_message_id,asum_,priv_delete_message_id,2
                        000003          	segdef	delete_message_id
    000003                              delete_message_id:
    000003  0a   000124 7100 00         	tra	delete_message_id.e
    000123  aa   000004 000000          	zero	2*2,0
    000124                              delete_message_id.e:
    000124  0a   000053 7020 00         	tsx2	.setup
    000125  aa   000000 6340 07         	ldi	=0,dl
    000126  4a  4 00016 3521 20         	short_call asum_$priv_delete_message_id(ap|0)
    000127  aa  7 00036 6701 20
    000130  aa  6 00030 3701 20
    000131  aa  7 00042 7101 20         	return
                                        
                                    14  	gate	delete_process_messages,asum_,priv_delete_process_messages,2
                        000004          	segdef	delete_process_messages
    000004                              delete_process_messages:
    000004  0a   000133 7100 00         	tra	delete_process_messages.e
    000132  aa   000004 000000          	zero	2*2,0
    000133                              delete_process_messages.e:
    000133  0a   000053 7020 00         	tsx2	.setup
    000134  aa   000000 6340 07         	ldi	=0,dl
    000135  4a  4 00020 3521 20         	short_call asum_$priv_delete_process_messages(ap|0)
    000136  aa  7 00036 6701 20
    000137  aa  6 00030 3701 20
    000140  aa  7 00042 7101 20         	return
                                        
                                    15  	end

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000142  5a   000003 000000 
    000143  5a   000057 600000 
    000144  aa   000000 000000 
    000145  55   000013 000002 
    000146  5a   000002 400003 
    000147  55   000006 000013 
    000150  aa  022 165 163 145
    000151  aa  162 137 155 145
    000152  aa  163 163 141 147
    000153  aa  145 137 160 162
    000154  aa  151 166 137 000
    000155  55   000024 000003 
    000156  0a   000004 400000 
    000157  55   000016 000003 
    000160  aa  027 144 145 154         delete_process_messages
    000161  aa  145 164 145 137
    000162  aa  160 162 157 143
    000163  aa  145 163 163 137
    000164  aa  155 145 163 163
    000165  aa  141 147 145 163
    000166  55   000034 000013 
    000167  0a   000003 400000 
    000170  55   000027 000003 
    000171  aa  021 144 145 154         delete_message_id
    000172  aa  145 164 145 137
    000173  aa  155 145 163 163
    000174  aa  141 147 145 137
    000175  aa  151 144 000 000
    000176  55   000042 000024 
    000177  0a   000002 400000 
    000200  55   000037 000003 
    000201  aa  013 141 144 144         add_message
    000202  aa  137 155 145 163
    000203  aa  163 141 147 145
    000204  55   000050 000034 
    000205  0a   000001 400000 
    000206  55   000045 000003 
    000207  aa  013 163 171 163         system_init
    000210  aa  164 145 155 137
    000211  aa  151 156 151 164
    000212  55   000002 000042 
    000213  6a   000000 400002 
    000214  55   000053 000003 
    000215  aa  014 163 171 155         symbol_table
    000216  aa  142 157 154 137
    000217  aa  164 141 142 154
    000220  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000221  aa   000000 000015 
    000222  aa   000000 000000 
    000223  aa   000000 000000 
    000224  aa   000000 000000 
    000225  aa   000000 000000 
    000226  5a   000042 000000 
    000227  aa   000000 000000 
    000230  5a   000034 000000 
    000231  5a   000050 000000 
    000232  5a   000013 000000 
    000233  aa   000000 000000 
    000234  aa   000000 000000 
    000235  aa   000000 000000 
    000236  5a   000024 000000 

EXTERNAL NAMES

    000237  aa  034 160 162 151         priv_delete_process_messages
    000240  aa  166 137 144 145
    000241  aa  154 145 164 145
    000242  aa  137 160 162 157
    000243  aa  143 145 163 163
    000244  aa  137 155 145 163
    000245  aa  163 141 147 145
    000246  aa  163 000 000 000
    000247  aa  026 160 162 151         priv_delete_message_id
    000250  aa  166 137 144 145
    000251  aa  154 145 164 145
    000252  aa  137 155 145 163
    000253  aa  163 141 147 145
    000254  aa  137 151 144 000
    000255  aa  010 160 162 151         priv_add
    000256  aa  166 137 141 144
    000257  aa  144 000 000 000
    000260  aa  005 141 163 165         asum_
    000261  aa  155 137 000 000
    000262  aa  007 163 151 147         signal_
    000263  aa  156 141 154 137

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000264  aa   000004 000000 
    000265  55   000116 000075 
    000266  aa   000004 000000 
    000267  55   000116 000105 
    000270  aa   000004 000000 
    000271  55   000116 000113 
    000272  aa   000004 000000 
    000273  55   000116 000045 
    000274  aa   000004 000000 
    000275  55   000120 000120 
    000276  aa   000001 000000 
    000277  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    000300  5a   000122 000000 
    000301  5a   000124 000000 
    000302  5a   000126 000000 
    000303  5a   000130 000000 
    000304  5a   000132 000000 
    000305  aa   000000 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000142 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000022 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         signal_|signal_
    000011  5a   000142 0000 00
    000012  9a   777766 0000 46         asum_|system_init
    000013  5a   000141 0000 00
    000014  9a   777764 0000 46         asum_|priv_add
    000015  5a   000140 0000 00
    000016  9a   777762 0000 46         asum_|priv_delete_message_id
    000017  5a   000137 0000 00
    000020  9a   777760 0000 46         asum_|priv_delete_process_messages
    000021  5a   000136 0000 00
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000004 
    000004  aa   000000 112143 
    000005  aa   305203 523135 
    000006  aa   000000 113455 
    000007  aa   363201 366170 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000150 
    000020  aa   000000 000121 
    000021  aa   000000 000134 
    000022  aa   000141 000121 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   040066 056066 
    000030  aa   040040 116157 
    000031  aa   166145 155142 
    000032  aa   145162 040061 
    000033  aa   071070 062040 
    000034  aa   107112 157150 
    000035  aa   156163 157156 
    000036  aa   056123 171163 
    000037  aa   115141 151156 
    000040  aa   164056 155040 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   154151 163164 
    000045  aa   040040 040040 
    000046  aa   040040 040040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040040 040040 
    000057  aa   040040 040040 
    000060  aa   040040 040040 
    000061  aa   040040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000002 
    000066  aa   000076 000045 
    000067  aa   134547 135256 
    000070  aa   000000 113455 
    000071  aa   363201 400000 
    000072  aa   000110 000043 
    000073  aa   134547 135074 
    000074  aa   000000 113455 
    000075  aa   362636 400000 
    000076  aa   076163 160145          >spec>on>41-16>user_message_priv_.alm
    000077  aa   143076 157156 
    000100  aa   076064 061055 
    000101  aa   061066 076165 
    000102  aa   163145 162137 
    000103  aa   155145 163163 
    000104  aa   141147 145137 
    000105  aa   160162 151166 
    000106  aa   137056 141154 
    000107  aa   155040 040040 
    000110  aa   076163 160145          >spec>on>41-16>gate_macros.incl.alm
    000111  aa   143076 157156 
    000112  aa   076064 061055 
    000113  aa   061066 076147 
    000114  aa   141164 145137 
    000115  aa   155141 143162 
    000116  aa   157163 056151 
    000117  aa   156143 154056 
    000120  aa   141154 155040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

           6    .actor                   user_message_priv_:        10.
          42    .defs_loop               user_message_priv_:        10.
         103    .gate_errordesc          user_message_priv_:        10.
         100    .gate_errorname          user_message_priv_:        10.
          50    .next_def                user_message_priv_:        10.
         104    .no_gate_error           user_message_priv_:        10.
          25    .return_name             user_message_priv_:        10.
          40    .search_defs             user_message_priv_:        10.
          53    .setup                   user_message_priv_:        10,   11,   12,   13,   14.
           2    add_message              user_message_priv_:        12.
         115    add_message.e            user_message_priv_:        12.
                asum_                    user_message_priv_:        11,   12,   13,   14.
           3    delete_message_id        user_message_priv_:        13.
         124    delete_message_id.e      user_message_priv_:        13.
           4    delete_process_messages  user_message_priv_:        14.
         133    delete_process_messages.e      user_message_priv_:        14.
           6    main                     user_message_priv_:        10,   11,   12,   13,   14.
                priv_add                 user_message_priv_:        12.
                priv_delete_message_id   user_message_priv_:        13.
                priv_delete_process_messages   user_message_priv_:        14.
                signal_                  user_message_priv_:        10.
          72    signal_arglist           user_message_priv_:        10.
           1    system_init              user_message_priv_:        11.
         106    system_init.e            user_message_priv_:        11.
           0    transfer_vector          user_message_priv_:        10,   11,   12,   13,   14.
           5    tv_end                   user_message_priv_:        10.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
