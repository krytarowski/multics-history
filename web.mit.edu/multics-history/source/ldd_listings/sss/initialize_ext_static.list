	COMPILATION LISTING OF SEGMENT initialize_ext_static
	Compiled by: Multics PL/I Compiler, Release 28d, of September 14, 1983
	Compiled at: Honeywell LCPD Phoenix, System M
	Compiled on: 10/03/83  1643.2 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 /* procedure to initialize external static storage */
       12 
       13 initialize_ext_static: proc(pt) returns(bit(18) aligned);
       14 
       15 dcl	pt ptr;		/* points at symbol node */
       16 
       17 dcl	(d,sym_pt,grow_pt,init_pt) ptr,
       18 	cptr(3) based ptr,
       19 	(n,loc,init_val) fixed bin,
       20 	use_pool bit(1) aligned,
       21 	grow_info bit(18),
       22 	error_$no_text entry(fixed bin,1,2 bit(8),2 bit(14),2 bit(5),ptr),
       23 	initialize_int_static entry(ptr,ptr);
       24 
       25 dcl	cg_static_$def_base ptr ext,
       26 	cg_static_$def_pool(0:10) fixed bin(18) ext,
       27 	cg_static_$def_pool_size fixed bin ext,
       28 	cg_static_$def_pos fixed bin(18) ext;
       29 
       30 dcl	(addrel,bit,divide,fixed,null) builtin;
       31 
       32 dcl	word(0:2) fixed bin based;
       33 
  1     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
  1     2 
  1     3 dcl	1 symbol			based aligned,
  1     4 	2 node_type		bit(9) unal,
  1     5 	2 source_id		structure unal,
  1     6 	  3 file_number		bit(8),
  1     7 	  3 line_number		bit(14),
  1     8 	  3 statement_number	bit(5),
  1     9 	2 location		fixed(18) unal unsigned,
  1    10 	2 allocated		bit(1) unal,
  1    11 	2 dcl_type		bit(3) unal,
  1    12 	2 reserved		bit(6) unal,
  1    13 	2 pix			unal,
  1    14 	  3 pic_fixed		bit(1) unal,
  1    15 	  3 pic_float		bit(1) unal,
  1    16 	  3 pic_char		bit(1) unal,
  1    17 	  3 pic_scale		fixed(7) unal,
  1    18 	  3 pic_size		fixed(7) unal,
  1    19 	2 level			fixed(8) unal,
  1    20 	2 boundary		fixed(3) unal,
  1    21 	2 size_units		fixed(3) unal,
  1    22 	2 scale			fixed(7) unal,
  1    23 	2 runtime			bit(18) unal,
  1    24 	2 runtime_offset		bit(18) unal,
  1    25 	2 block_node		ptr unal,
  1    26 	2 token			ptr unal,
  1    27 	2 next			ptr unal,
  1    28 	2 multi_use		ptr unal,
  1    29 	2 cross_references		ptr unal,
  1    30 	2 initial			ptr unal,
  1    31 	2 array			ptr unal,
  1    32 	2 descriptor		ptr unal,
  1    33 	2 equivalence		ptr unal,
  1    34 	2 reference		ptr unal,
  1    35 	2 general			ptr unal,
  1    36 	2 father			ptr unal,
  1    37 	2 brother			ptr unal,
  1    38 	2 son			ptr unal,
  1    39 	2 word_size		ptr unal,
  1    40 	2 bit_size		ptr unal,
  1    41 	2 dcl_size		ptr unal,
  1    42 	2 symtab_size		ptr unal,
  1    43 	2 c_word_size		fixed(24),
  1    44 	2 c_bit_size		fixed(24),
  1    45 	2 c_dcl_size		fixed(24),
  1    46 
  1    47 	2 attributes		structure aligned,
  1    48 	  3 data_type		structure unal,
  1    49 	    4 structure		bit(1) ,
  1    50 	    4 fixed		bit(1),
  1    51 	    4 float		bit(1),
  1    52 	    4 bit			bit(1),
  1    53 	    4 char		bit(1),
  1    54 	    4 ptr			bit(1),
  1    55 	    4 offset		bit(1),
  1    56 	    4 area		bit(1),
  1    57 	    4 label		bit(1),
  1    58 	    4 entry		bit(1),
  1    59 	    4 file		bit(1),
  1    60 	    4 arg_descriptor	bit(1),
  1    61 	    4 storage_block		bit(1),
  1    62 	    4 explicit_packed	bit(1), /* options(packed) */
  1    63 	    4 condition		bit(1),
  1    64 	    4 format		bit(1),
  1    65 	    4 builtin		bit(1),
  1    66 	    4 generic		bit(1),
  1    67 	    4 picture		bit(1),
  1    68 
  1    69 	  3 misc_attributes		structure unal,
  1    70 	    4 dimensioned		bit(1),
  1    71 	    4 initialed		bit(1),
  1    72 	    4 aligned		bit(1),
  1    73 	    4 unaligned		bit(1),
  1    74 	    4 signed		bit(1),
  1    75 	    4 unsigned		bit(1),
  1    76 	    4 precision		bit(1),
  1    77 	    4 varying		bit(1),
  1    78 	    4 local		bit(1),
  1    79 	    4 decimal		bit(1),
  1    80 	    4 binary		bit(1),
  1    81 	    4 real		bit(1),
  1    82 	    4 complex		bit(1),
  1    83 	    4 variable		bit(1),
  1    84 	    4 reducible		bit(1),
  1    85 	    4 irreducible		bit(1),
  1    86 	    4 returns		bit(1),
  1    87 	    4 position		bit(1),
  1    88 	    4 internal		bit(1),
  1    89 	    4 external		bit(1),
  1    90 	    4 like		bit(1),
  1    91 	    4 member		bit(1),
  1    92 	    4 non_varying		bit(1),
  1    93 	    4 options		bit(1),
  1    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
  1    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
  1    96 
  1    97 	  3 storage_class		structure unal,
  1    98 	    4 auto		bit(1),
  1    99 	    4 based		bit(1),
  1   100 	    4 static		bit(1),
  1   101 	    4 controlled		bit(1),
  1   102 	    4 defined		bit(1),
  1   103 	    4 parameter		bit(1),
  1   104 	    4 param_desc		bit(1),
  1   105 	    4 constant		bit(1),
  1   106 	    4 temporary		bit(1),
  1   107 	    4 return_value		bit(1),
  1   108 
  1   109 	  3 file_attributes		structure unal,
  1   110 	    4 print		bit(1),
  1   111 	    4 input		bit(1),
  1   112 	    4 output		bit(1),
  1   113 	    4 update		bit(1),
  1   114 	    4 stream		bit(1),
  1   115 	    4 reserved_1		bit(1),
  1   116 	    4 record		bit(1),
  1   117 	    4 sequential		bit(1),
  1   118 	    4 direct		bit(1),
  1   119 	    4 interactive		bit(1),		/* env(interactive) */
  1   120 	    4 reserved_2		bit(1),
  1   121 	    4 reserved_3		bit(1),
  1   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
  1   123 	    4 keyed		bit(1),
  1   124 	    4 reserved_4		bit(1),
  1   125 	    4 environment		bit(1),
  1   126 
  1   127 	  3 compiler_developed	structure unal,
  1   128 	    4 aliasable		bit(1),
  1   129 	    4 packed		bit(1),
  1   130 	    4 passed_as_arg		bit(1),
  1   131 	    4 allocate		bit(1),
  1   132 	    4 set			bit(1),
  1   133 	    4 exp_extents		bit(1),
  1   134 	    4 refer_extents		bit(1),
  1   135 	    4 star_extents		bit(1),
  1   136 	    4 isub		bit(1),
  1   137 	    4 put_in_symtab		bit(1),
  1   138 	    4 contiguous		bit(1),
  1   139 	    4 put_data		bit(1),
  1   140 	    4 overlayed		bit(1),
  1   141 	    4 error		bit(1),
  1   142 	    4 symtab_processed	bit(1),
  1   143 	    4 overlayed_by_builtin	bit(1),
  1   144 	    4 defaulted		bit(1),
  1   145 	    4 connected		bit(1);
  1   146 
  1   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
       34 
  2     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
  2     2 
  2     3 dcl	1 reference		based aligned,
  2     4 	2 node_type		bit(9) unaligned,
  2     5 	2 array_ref		bit(1) unaligned,
  2     6 	2 varying_ref		bit(1) unaligned,
  2     7 	2 shared			bit(1) unaligned,
  2     8 	2 put_data_sw		bit(1) unaligned,
  2     9 	2 processed		bit(1) unaligned,
  2    10 	2 units			fixed(3) unaligned,
  2    11 	2 ref_count		fixed(17) unaligned,
  2    12 	2 c_offset		fixed(24),
  2    13 	2 c_length		fixed(24),
  2    14 	2 symbol			ptr unaligned,
  2    15 	2 qualifier		ptr unaligned,
  2    16 	2 offset			ptr unaligned,
  2    17 	2 length			ptr unaligned,
  2    18 	2 subscript_list		ptr unaligned,
  2    19 						/* these fields are used by the 645 code generator */
  2    20 	2 address			structure unaligned,
  2    21 	  3 base			bit(3),
  2    22 	  3 offset		bit(15),
  2    23 	  3 op			bit(9),
  2    24 	  3 no_address		bit(1),
  2    25 	  3 inhibit		bit(1),
  2    26 	  3 ext_base		bit(1),
  2    27 	  3 tag			bit(6),
  2    28 	2 info			structure unaligned,
  2    29 	  3 address_in		structure,
  2    30 	    4 b			dimension(0:7) bit(1),
  2    31 	    4 storage		bit(1),
  2    32 	  3 value_in		structure,
  2    33 	    4 a			bit(1),
  2    34 	    4 q			bit(1),
  2    35 	    4 aq			bit(1),
  2    36 	    4 string_aq		bit(1),
  2    37 	    4 complex_aq		bit(1),
  2    38 	    4 decimal_aq		bit(1),
  2    39 	    4 b			dimension(0:7) bit(1),
  2    40 	    4 storage		bit(1),
  2    41 	    4 indicators		bit(1),
  2    42 	    4 x			dimension(0:7) bit(1),
  2    43 	  3 other			structure,
  2    44 	    4 big_offset		bit(1),
  2    45 	    4 big_length		bit(1),
  2    46 	    4 modword_in_offset	bit(1),
  2    47 	2 data_type		fixed(5) unaligned,
  2    48 	2 bits			structure unaligned,
  2    49 	  3 padded_ref		bit(1),
  2    50 	  3 aligned_ref		bit(1),
  2    51 	  3 long_ref		bit(1),
  2    52 	  3 forward_ref		bit(1),
  2    53 	  3 ic_ref		bit(1),
  2    54 	  3 temp_ref		bit(1),
  2    55 	  3 defined_ref		bit(1),
  2    56 	  3 evaluated		bit(1),
  2    57 	  3 allocate		bit(1),
  2    58 	  3 allocated		bit(1),
  2    59 	  3 aliasable		bit(1),
  2    60 	  3 even			bit(1),
  2    61 	  3 perm_address		bit(1),
  2    62 	  3 aggregate		bit(1),
  2    63 	  3 hit_zero		bit(1),
  2    64 	  3 dont_save		bit(1),
  2    65 	  3 fo_in_qual		bit(1),
  2    66 	  3 hard_to_load		bit(1),
  2    67 	2 relocation		bit(12) unaligned,
  2    68 	2 more_bits		structure unaligned,
  2    69 	  3 substr		bit(1),
  2    70 	  3 padded_for_store_ref	bit(1),
  2    71 	  3 aligned_for_store_ref	bit(1),
  2    72 	  3 mbz			bit(15),
  2    73 	2 store_ins		bit(18) unaligned;
  2    74 
  2    75 /* END INCLUDE FILE ... reference.incl.pl1 */
       35 
  3     1 /* BEGIN INCLUDE FILE ... boundary.incl.pl1 */
  3     2 
  3     3 /* Modified: 26 Apr 1979 by PCK to implement 4-bit decimal */
  3     4 
  3     5 dcl (	bit_		init(1),
  3     6 	digit_		init(2),
  3     7 	character_	init(3),
  3     8 	half_		init(4),
  3     9 	word_		init(5),
  3    10 	mod2_		init(6),
  3    11 	mod4_		init(7)) fixed bin(3) int static options(constant);
  3    12 
  3    13 /* END INCLUDE FILE ... boundary.incl.pl1 */
       36 
       37 
       38 	sym_pt = pt;
       39 	loc = sym_pt -> symbol.location;
       40 
       41 	if sym_pt -> symbol.controlled then goto even;
       42 	if sym_pt -> symbol.boundary = mod2_
       43 	then if ^ sym_pt -> symbol.area
       44 	     then if sym_pt -> symbol.initial ^= null | sym_pt -> symbol.structure
       45 		then
       46 even:		     cg_static_$def_pos = cg_static_$def_pos + mod(cg_static_$def_pos,2);
       47 
       48 	grow_info = bit(cg_static_$def_pos,18);
       49 	grow_pt = addrel(cg_static_$def_base,grow_info);
       50 	init_pt = addrel(grow_pt,2);
       51 
       52 	if sym_pt -> symbol.controlled
       53 	then do;
       54 	     init_val = 3;
       55 	     n = 6;
       56 
       57 	     init_pt -> cptr(1) = null;
       58 	     init_pt -> cptr(2) = null;
       59 	     init_pt -> cptr(3) = null;
       60 
       61 	     d = sym_pt -> symbol.descriptor -> reference.symbol;
       62 	     if d -> symbol.controlled
       63 	     then do;
       64 		d -> symbol.location = loc;
       65 		d -> symbol.allocated = "1"b;
       66 		end;
       67 
       68 	     call fill_cs(sym_pt -> symbol.son);
       69 	     end;
       70 	else do;
       71 	     n = sym_pt -> symbol.c_word_size;
       72 
       73 	     init_val = 0;
       74 
       75 	     if sym_pt -> symbol.area
       76 	     then if sym_pt -> symbol.array ^= null
       77 		then goto init;
       78 		else init_val = 4;
       79 	     else do;
       80 		if sym_pt -> symbol.initial ^= null
       81 		then do;
       82 init:		     call initialize_int_static(sym_pt,init_pt);
       83 		     init_val = 3;
       84 		     end;
       85 
       86 		call fill_cs(sym_pt -> symbol.son);
       87 		end;
       88 	     end;
       89 
       90 	use_pool = init_val = 0 & n <= cg_static_$def_pool_size;
       91 	if use_pool
       92 	then if cg_static_$def_pool(n) ^= 0
       93 	     then return(bit(cg_static_$def_pool(n),18));
       94 
       95 	grow_pt -> word(0) = n;
       96 	grow_pt -> word(1) = init_val;
       97 
       98 	if use_pool
       99 	     then cg_static_$def_pool(n) = cg_static_$def_pos;
      100 
      101 	cg_static_$def_pos = cg_static_$def_pos + 2 + fixed(init_val = 3,1)*n;
      102 
      103 	return(grow_info);
      104 
      105 fill_cs:	     proc(pt);
      106 
      107 dcl	     pt ptr unaligned,
      108 	     p ptr aligned;
      109 
      110 	     p = pt;
      111 	     do while(p ^= null);
      112 
      113 		if (p -> symbol.initial ^= null | p -> symbol.area) & sym_pt -> symbol.static
      114 		then do;
      115 		     call initialize_int_static(p,init_pt);
      116 		     init_val = 3;
      117 		     end;
      118 
      119 		p -> symbol.location = loc;
      120 
      121 		call fill_cs(p -> symbol.son);
      122 
      123 		p = p -> symbol.brother;
      124 		end;
      125 
      126 	     end;
      127 
      128 	end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/03/83  1008.5  initialize_ext_static.pl1         >spec>on>pl128d>initialize_ext_static.pl1
34           1    10/02/83  0828.4  symbol.incl.pl1                   >spec>on>pl128d>symbol.incl.pl1
35           2    07/21/80  1546.3  reference.incl.pl1                >ldd>include>reference.incl.pl1
36           3    10/25/79  1645.8  boundary.incl.pl1                 >ldd>include>boundary.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
addrel                                                 builtin function         dcl 30 ref 49 50
allocated                 1(18)        based           bit(1)                   level 2 packed unaligned dcl 1-3 set ref 65*
area                     31(07)        based           bit(1)                   level 4 packed unaligned dcl 1-3 ref 42 75 113
array                    12            based           pointer                  level 2 packed unaligned dcl 1-3 ref 75
attributes               31            based           structure                level 2 dcl 1-3
bit                                                    builtin function         dcl 30 ref 48 91
boundary                  2(20)        based           fixed bin(3,0)           level 2 packed unaligned dcl 1-3 ref 42
brother                  20            based           pointer                  level 2 packed unaligned dcl 1-3 ref 123
c_word_size              26            based           fixed bin(24,0)          level 2 dcl 1-3 ref 71
cg_static_$def_base             000012 external static pointer                  dcl 25 ref 49
cg_static_$def_pool             000014 external static fixed bin(18,0)          array dcl 25 set ref 91 91 98*
cg_static_$def_pool_size        000016 external static fixed bin(17,0)          dcl 25 ref 90
cg_static_$def_pos              000020 external static fixed bin(18,0)          dcl 25 set ref 42* 42 42 48 98 101* 101
controlled               32(12)        based           bit(1)                   level 4 packed unaligned dcl 1-3 ref 41 52 62
cptr                                   based           pointer                  array dcl 17 set ref 57* 58* 59*
d                               000100 automatic       pointer                  dcl 17 set ref 61* 62 64 65
data_type                31            based           structure                level 3 packed unaligned dcl 1-3
descriptor               13            based           pointer                  level 2 packed unaligned dcl 1-3 ref 61
fixed                                                  builtin function         dcl 30 ref 101
grow_info                       000114 automatic       bit(18)                  unaligned dcl 17 set ref 48* 49 103
grow_pt                         000104 automatic       pointer                  dcl 17 set ref 49* 50 95 96
init_pt                         000106 automatic       pointer                  dcl 17 set ref 50* 57 58 59 82* 115*
init_val                        000112 automatic       fixed bin(17,0)          dcl 17 set ref 54* 73* 78* 83* 90 96 101 116*
initial                  11            based           pointer                  level 2 packed unaligned dcl 1-3 ref 42 80 113
initialize_int_static           000010 constant        entry                    external dcl 17 ref 82 115
loc                             000111 automatic       fixed bin(17,0)          dcl 17 set ref 39* 64 119
location                  1            based           fixed bin(18,0)          level 2 packed unsigned unaligned dcl 1-3 set ref 39
                                                                                  64* 119*
mod2_                                  constant        fixed bin(3,0)           initial dcl 3-5 ref 42
n                               000110 automatic       fixed bin(17,0)          dcl 17 set ref 55* 71* 90 91 91 95 98 101
null                                                   builtin function         dcl 30 ref 42 57 58 59 75 80 111 113
p                               000100 automatic       pointer                  dcl 107 set ref 110* 111 113 113 115* 119 121 123*
                                                                                  123
pt                                     parameter       pointer                  dcl 15 in procedure "initialize_ext_static" ref 13
                                                                                  38
pt                                     parameter       pointer                  unaligned dcl 107 in procedure "fill_cs" ref 105 110
reference                              based           structure                level 1 dcl 2-3
son                      21            based           pointer                  level 2 packed unaligned dcl 1-3 set ref 68* 86*
                                                                                  121*
static                   32(11)        based           bit(1)                   level 4 packed unaligned dcl 1-3 ref 113
storage_class            32(09)        based           structure                level 3 packed unaligned dcl 1-3
structure                31            based           bit(1)                   level 4 packed unaligned dcl 1-3 ref 42
sym_pt                          000102 automatic       pointer                  dcl 17 set ref 38* 39 41 42 42 42 42 52 61 68 71 75
                                                                                  75 80 82* 86 113
symbol                    3            based           pointer                  level 2 in structure "reference" packed unaligned
                                                                                  dcl 2-3 in procedure "initialize_ext_static" ref
                                                                                  61
symbol                                 based           structure                level 1 dcl 1-3 in procedure "initialize_ext_static"
use_pool                        000113 automatic       bit(1)                   dcl 17 set ref 90* 91 98
word                                   based           fixed bin(17,0)          array dcl 32 set ref 95* 96*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
bit_                                   internal static fixed bin(3,0)           initial dcl 3-5
character_                             internal static fixed bin(3,0)           initial dcl 3-5
digit_                                 internal static fixed bin(3,0)           initial dcl 3-5
divide                                                 builtin function         dcl 30
error_$no_text                  000000 constant        entry                    external dcl 17
half_                                  internal static fixed bin(3,0)           initial dcl 3-5
mod4_                                  internal static fixed bin(3,0)           initial dcl 3-5
word_                                  internal static fixed bin(3,0)           initial dcl 3-5

NAMES DECLARED BY EXPLICIT CONTEXT.
even                            000051 constant        label                    dcl 42 ref 41
fill_cs                         000242 constant        entry                    internal dcl 105 ref 68 86 121
init                            000144 constant        label                    dcl 82 ref 75
initialize_ext_static           000012 constant        entry                    external dcl 13

NAME DECLARED BY CONTEXT OR IMPLICATION.
mod                                                    builtin function         ref 42

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       436         460     335         446
Length       710     335        22         213     100           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
initialize_ext_static                84 external procedure  is an external procedure.  
fill_cs                              74 internal procedure  calls itself recursively.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
fill_cs                  000100 p                           fill_cs
initialize_ext_static    000100 d                           initialize_ext_static
                         000102 sym_pt                      initialize_ext_static
                         000104 grow_pt                     initialize_ext_static
                         000106 init_pt                     initialize_ext_static
                         000110 n                           initialize_ext_static
                         000111 loc                         initialize_ext_static
                         000112 init_val                    initialize_ext_static
                         000113 use_pool                    initialize_ext_static
                         000114 grow_info                   initialize_ext_static

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_e_as              r_le_a              call_ext_out        call_int_this       call_int_other      return
mod_fx1             ext_entry           int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
initialize_int_static

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
cg_static_$def_base           cg_static_$def_pool           cg_static_$def_pool_size      cg_static_$def_pos




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     13 000006        38 000017        39 000023        41 000026        42 000033        48 000055        49 000062
     50 000066        52 000071        54 000073        55 000075        57 000077        58 000101        59 000102
     61 000103        62 000106        64 000111        65 000114        68 000116        69 000124        71 000125
     73 000127        75 000130        78 000136        80 000141        82 000144        83 000154        86 000156
     90 000165        91 000176        95 000211        96 000213        98 000216       101 000223       103 000235
    105 000241       110 000247       111 000256       113 000262       115 000276       116 000307       119 000312
    121 000317       123 000326       124 000331       126 000332


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
