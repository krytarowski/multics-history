	COMPILATION LISTING OF SEGMENT declare_constant
	Compiled by: Multics PL/I Compiler, Release 32c, of June 16, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 07/31/89  1405.1 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 /* Modified 780425 by PG to prepare for reformatting of symbol node */
       12 /* Modified 780712 by PG for unsigned */
       13 /* Modified 790419 by PCK to implement 4-bit decimal */
       14 
       15 declare_constant:
       16      procedure (value, bv_input_type, size, scale) returns (ptr);
       17 
       18 /* parameters */
       19 
       20 dcl	value bit (*) aligned;
       21 dcl	bv_input_type bit (36) aligned;
       22 dcl	(size, scale) fixed bin (31);
       23 
       24 /* automatic */
       25 
       26 dcl	(p, q, p1, ref, pv, last, save) ptr;
       27 dcl	(boundary, i, j, word_size, bit_size, value_size) fixed bin(31);
       28 dcl	copy bit(18432);		/* max size of constant is 512 words */
       29 dcl	1 ctype like type;
       30 dcl	1 itype like type;
       31 
       32 /* based */
       33 
       34 dcl	const_value bit(value_size) aligned based;
       35 dcl	new_value bit(value_size) aligned based(pv);
       36 dcl	space bit(value_size)  aligned based;
       37 
       38 /* builtin */
       39 
       40 dcl	(addr, bit, divide, hbound, index, max, null, string, substr) builtin;
       41 
       42 /* external static */
       43 
       44 dcl	pl1_stat_$constant_list ptr external static;
       45 
       46 /* internal static */
       47 
       48 dcl	zero bit(36) int static init("0"b);
       49 
       50 /* include files */
       51 
  1     1 /****^  *********************************************************
  1     2*        *                                                       *
  1     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  1     4*        *                                                       *
  1     5*        ********************************************************* */
  1     6 
  1     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  1     8 
  1     9 
  1    10 /****^  HISTORY COMMENTS:
  1    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  1    12*     install(89-07-31,MR12.3-1066):	
  1    13*     Removed the obsolete parameter source_line from the dcl of error_().
  1    14*                                                   END HISTORY COMMENTS */
  1    15 
  1    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  1    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  1    18* */
  1    19 
  1    20 declare	adjust_count	entry(pointer);
  1    21 			/* parameter 1:	(input)	any node pointer		*/
  1    22 
  1    23 declare	bindec		entry(fixed bin(31)) reducible
  1    24 			returns(character(12) aligned);
  1    25 			/* parameter 1:	(input)	bin value			*/
  1    26 			/* return:	(output)	character value with blanks	*/
  1    27 
  1    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  1    29 			returns(character(12) aligned varying);
  1    30 			/* parameter 1:	(input)	binary value		*/
  1    31 			/* return:	(output)	char value without blanks	*/
  1    32 
  1    33 declare	binoct		entry(fixed bin(31)) reducible
  1    34 			returns(char(12) aligned);
  1    35 			/* parameter 1:	(input)	binary value		*/
  1    36 			/* return:	(output)	char value with blanks	*/
  1    37 
  1    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  1    39 			returns(char(12) aligned);
  1    40 			/* parameter 1:	(input)	binary value		*/
  1    41 			/* return:	(output)	right-aligned char value	*/
  1    42 
  1    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  1    44 			returns(char(12) varying aligned);
  1    45 			/* parameter 1:	(input)	binary value		*/
  1    46 			/* returns:	(output)	char value without blanks	*/
  1    47 
  1    48 declare	compare_expression	entry(pointer,pointer) reducible
  1    49 			returns(bit(1) aligned);
  1    50 			/* parameter 1:	(input)	any node pointer		*/
  1    51 			/* parameter 2:	(input)	any node pointer		*/
  1    52 			/* return:	(output)	compare bit		*/
  1    53 
  1    54 declare	constant_length	entry (pointer, fixed bin (71))
  1    55 			returns (bit (1) aligned);
  1    56 			/* parameter 1:	(input)	reference node pointer	*/
  1    57 			/* parameter 2:	(input)	value of constant length	*/
  1    58 			/* return:	(output)	"1"b if constant length	*/
  1    59 
  1    60 declare	convert		entry(pointer,bit(36) aligned)
  1    61 			returns(pointer);
  1    62 			/* parameter 1:	(input)	any node pointer		*/
  1    63 			/* parameter 2:	(input)	target type		*/
  1    64 			/* return:	(output)	target value tree pointer	*/
  1    65 
  1    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  1    67 			returns(pointer);
  1    68 			/* parameter 1:	(input)	any node pointer		*/
  1    69 			/* parameter 2:	(input)	target type		*/
  1    70 			/* return:	(output)	target value tree pointer	*/
  1    71 
  1    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  1    73 			returns(pointer);
  1    74 			/* parameter 1:	(input)	any node pointer		*/
  1    75 			/* parameter 2:	(input)	target type		*/
  1    76 			/* return:	(output)	target value tree pointer	*/
  1    77 
  1    78 declare	convert$validate	entry(pointer,pointer);
  1    79 			/* parameter 1:	(input)	source value tree pointer	*/
  1    80 			/* parameter 2:	(input)	target reference node pointer	*/
  1    81 
  1    82 declare	convert$to_target_fb entry(pointer,pointer)
  1    83 			returns(pointer);
  1    84 			/* parameter 1:	(input)	source value tree pointer	*/
  1    85 			/* parameter 2:	(input)	target reference node pointer	*/
  1    86 			/* return:	(output)	target value tree pointer	*/
  1    87 
  1    88 declare	convert$to_target	entry(pointer,pointer)
  1    89 			returns(pointer);
  1    90 			/* parameter 1:	(input)	source value tree pointer	*/
  1    91 			/* parameter 2:	(input)	target reference node pointer	*/
  1    92 			/* return:	(output)	target value tree pointer	*/
  1    93 
  1    94 declare	copy_expression	entry(pointer unaligned)
  1    95 			returns(pointer);
  1    96 			/* parameter 1:	(input)	any node pointer		*/
  1    97 			/* return:	(output)	any node pointer		*/
  1    98 
  1    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  1   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  1   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  1   102 
  1   103 declare	copy_unique_expression entry(pointer)
  1   104 			returns(pointer);
  1   105 			/* parameter 1:	(input)	any node pointer		*/
  1   106 			/* return:	(output)	any node pointer		*/
  1   107 
  1   108 declare	create_array	entry()
  1   109 			returns(pointer);
  1   110 			/* return:	(output)	array node pointer		*/
  1   111 
  1   112 declare	create_block	entry(bit(9) aligned,pointer)
  1   113 			returns(pointer);
  1   114 			/* parameter 1:	(input)	block type		*/
  1   115 			/* parameter 2:	(input)	father block node pointer	*/
  1   116 			/* return:	(output)	block node pointer		*/
  1   117 
  1   118 declare	create_bound	entry()
  1   119 			returns(pointer);
  1   120 			/* return:	(output)	bound node pointer		*/
  1   121 
  1   122 declare	create_context	entry(pointer,pointer)
  1   123 			returns(pointer);
  1   124 			/* parameter 1:	(input)	block node pointer		*/
  1   125 			/* parameter 2:	(input)	token pointer		*/
  1   126 			/* return:	(output)	context node pointer	*/
  1   127 
  1   128 declare	create_cross_reference entry()
  1   129 			returns(pointer);
  1   130 			/* return:	(output)	cross reference node pointer	*/
  1   131 
  1   132 declare	create_default	entry
  1   133 			returns(pointer);
  1   134 			/* return:	(output)	default node pointer	*/
  1   135 
  1   136 declare	create_identifier	entry()
  1   137 			returns(pointer);
  1   138 			/* return:	(output)	token node pointer		*/
  1   139 
  1   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  1   141 			returns(pointer);
  1   142 			/* parameter 1:	(input)	block node pointer		*/
  1   143 			/* parameter 2:	(input)	token node pointer		*/
  1   144 			/* parameter 3:	(input)	declare type		*/
  1   145 			/* return:	(output)	label node pointer		*/
  1   146 
  1   147 declare	create_list	entry(fixed bin(15))
  1   148 			returns(pointer);
  1   149 			/* parameter 1:	(input)	number of list elements	*/
  1   150 			/* return:	(output)	list node pointer		*/
  1   151 
  1   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  1   153 			returns(pointer);
  1   154 			/* parameter 1:	(input)	operator type		*/
  1   155 			/* parameter 2:	(input)	number of operands		*/
  1   156 			/* return:	(output)	operator node pointer	*/
  1   157 
  1   158 declare	create_reference	entry(pointer)
  1   159 			returns(pointer);
  1   160 			/* parameter 1:	(input)	symbol node pointer		*/
  1   161 			/* return:	(output)	reference node pointer	*/
  1   162 
  1   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  1   164 			returns(pointer);
  1   165 			/* parameter 1:	(input)	statement type		*/
  1   166 			/* parameter 2:	(input)	block node pointer		*/
  1   167 			/* parameter 3:	(input)	label node pointer		*/
  1   168 			/* parameter 4:	(input)	conditions		*/
  1   169 			/* return:	(output)	statement node pointer	*/
  1   170 
  1   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  1   172 			returns(pointer);
  1   173 			/* parameter 1:	(input)	statement type		*/
  1   174 			/* parameter 2:	(input)	block node pointer		*/
  1   175 			/* parameter 3:	(input)	label node pointer		*/
  1   176 			/* parameter 4:	(input)	conditions		*/
  1   177 			/* return:	(output)	statement node pointer	*/
  1   178 
  1   179 declare	create_storage	entry(fixed bin(15))
  1   180 			returns(pointer);
  1   181 			/* parameter 1:	(input)	number of words		*/
  1   182 			/* return:	(output)	storage block pointer	*/
  1   183 
  1   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  1   185 			returns(pointer);
  1   186 			/* parameter 1:	(input)	block node pointer		*/
  1   187 			/* parameter 2:	(input)	token node pointer		*/
  1   188 			/* parameter 3:	(input)	declare type		*/
  1   189 			/* return:	(output)	symbol node pointer		*/
  1   190 
  1   191 declare	create_token	entry (character (*), bit (9) aligned)
  1   192 			returns (ptr);
  1   193 			/* parameter 1:	(input)	token string		*/
  1   194 			/* parameter 2:	(input)	token type		*/
  1   195 			/* return:	(output)	token node ptr		*/
  1   196 
  1   197 declare	create_token$init_hash_table entry ();
  1   198 
  1   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  1   200 			returns (ptr);
  1   201 			/* parameter 1:	(input)	token string		*/
  1   202 			/* parameter 2:	(input)	token type		*/
  1   203 			/* parameter 3:	(input)	protected flag		*/
  1   204 			/* return:	(output)	token node ptr		*/
  1   205 
  1   206 declare	decbin		entry(character(*) aligned) reducible
  1   207 			returns(fixed bin(31));
  1   208 			/* parameter 1:	(input)	decimal character string	*/
  1   209 			/* return:	(output)	binary value		*/
  1   210 
  1   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  1   212 			returns(pointer);
  1   213 			/* parameter 1:	(input)	value			*/
  1   214 			/* parameter 2:	(input)	type			*/
  1   215 			/* parameter 3:	(input)	size			*/
  1   216 			/* parameter 4:	(input)	scale			*/
  1   217 			/* return:	(output)	reference node pointer	*/
  1   218 
  1   219 declare	declare_constant$bit entry(bit(*) aligned)
  1   220 			returns(pointer);
  1   221 			/* parameter 1:	(input)	bit			*/
  1   222 			/* return:	(output)	reference node pointer	*/
  1   223 
  1   224 declare	declare_constant$char entry(character(*) aligned)
  1   225 			returns(pointer);
  1   226 			/* parameter 1:	(input)	character			*/
  1   227 			/* return:	(output)	reference node pointer	*/
  1   228 
  1   229 declare	declare_constant$desc entry(bit(*) aligned)
  1   230 			returns(pointer);
  1   231 			/* parameter 1:	(input)	descriptor bit value	*/
  1   232 			/* return:	(output)	reference node pointer	*/
  1   233 
  1   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  1   235 			returns(pointer);
  1   236 			/* parameter 1:	(input)	integer			*/
  1   237 			/* return:	(output)	reference node pointer	*/
  1   238 
  1   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  1   240 			returns(pointer);
  1   241 			/* parameter 1:	(input)	block node pointer		*/
  1   242 			/* parameter 2:	(input)	statement node pointer	*/
  1   243 			/* parameter 3:	(input)	symbol node pointer		*/
  1   244 			/* parameter 4:	(input)	loc pointer		*/
  1   245 			/* parameter 5:	(input)	array descriptor bit
  1   246*						cross_section bit	*/
  1   247 			/* return:	(output)	reference node pointer	*/
  1   248 
  1   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  1   250 			returns(pointer);
  1   251 			/* parameter 1:	(input)	block node pointer	*/
  1   252 			/* parameter 2:	(input)	statement node pointer 	*/
  1   253 			/* parameter 3:	(input)	symbol node pointer	*/
  1   254 			/* parameter 4:	(input)	loc pointer	*/
  1   255 			/* parameter 5:	(input)	array descriptor bit
  1   256*						cross_section bit	*/
  1   257 			/* return:	(output)	reference node pointer	*/
  1   258 
  1   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  1   260 			returns(pointer);
  1   261 			/* parameter 1:	(input)	block node pointer		*/
  1   262 			/* parameter 2:	(input)	statement node pointer	*/
  1   263 			/* parameter 3:	(input)	symbol node pointer		*/
  1   264 			/* parameter 4:	(input)	loc pointer		*/
  1   265 			/* parameter 5:	(input)	array descriptor bit
  1   266*						cross_section bit	*/
  1   267 			/* return:	(output)	reference node pointer	*/
  1   268 
  1   269 declare	declare_integer	entry(pointer)
  1   270 			returns(pointer);
  1   271 			/* parameter 1:	(input)	block node pointer		*/
  1   272 			/* return:	(output)	reference node pointer 	*/
  1   273 
  1   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  1   275 			/* parameter 1:	(input)	picture string		*/
  1   276 			/* parameter 2:	(input)	symbol node pointer		*/
  1   277 			/* parameter 3:	(output)	error code, if any		*/
  1   278 
  1   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  1   280 			returns(pointer);
  1   281 			/* parameter 1:	(input)	picture string		*/
  1   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  1   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  1   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  1   285 			/* return:	(output)	reference node pointer	*/
  1   286 
  1   287 declare	declare_pointer	entry(pointer)
  1   288 			returns(pointer);
  1   289 			/* parameter 1:	(input)	block node pointer		*/
  1   290 			/* return:	(output)	reference node pointer	*/
  1   291 
  1   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  1   293 			returns(pointer);
  1   294 			/* parameter 1:	(input)	type			*/
  1   295 			/* parameter 2:	(input)	precision			*/
  1   296 			/* parameter 3:	(input)	scale			*/
  1   297 			/* parameter 4:	(input)	length			*/
  1   298 			/* return:	(output)	reference node pointer	*/
  1   299 
  1   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  1   301 			returns(char(120) varying);
  1   302 			/* parameter 1:	(input)	node pointer		*/
  1   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  1   304 			/* return:	(output)	source line id		*/
  1   305 
  1   306 declare	decode_source_id	entry(
  2     1 			1 structure unaligned,
  2     2 			  2 /* file_number */	bit(8),
  2     3 			  2 /* line_number */	bit(14),
  2     4 			  2 /* stmt_number */	bit(5),
  1   307 
  1   308 			bit(1) aligned)
  1   309 			returns(char(120) varying);
  1   310 			/* parameter 1:	(input)	source id			*/
  1   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  1   312 			/* return:	(output)	source line id		*/
  1   313 
  1   314 declare	error		entry(fixed bin(15),pointer,pointer);
  1   315 			/* parameter 1:	(input)	error number		*/
  1   316 			/* parameter 2:	(input)	statement node pointer or null*/
  1   317 			/* parameter 3:	(input)	token node pointer 		*/
  1   318 
  1   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  1   320 			/* parameter 1:	(input)	error number		*/
  1   321 			/* parameter 2:	(input)	statement node pointer or null*/
  1   322 			/* parameter 3:	(input)	token node pointer 		*/
  1   323 
  1   324 declare	error_		entry(fixed bin(15),
  3     1 			1 structure unaligned,
  3     2 			  2 /* file_number */	bit(8),
  3     3 			  2 /* line_number */	bit(14),
  3     4 			  2 /* stmt_number */	bit(5),
  1   325 
  1   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  1   327 			/* parameter 1:	(input)	error number		*/
  1   328 			/* parameter 2:	(input)	statement id		*/
  1   329 			/* parameter 3:	(input)	any node pointer		*/
  1   330 			/* parameter 4:	(input)	source segment		*/
  1   331 			/* parameter 5:	(input)	source starting character	*/
  1   332 			/* parameter 6:	(input)	source length		*/
  1   333 
  1   334 declare	error_$no_text	entry(fixed bin(15),
  4     1 			1 structure unaligned,
  4     2 			  2 /* file_number */	bit(8),
  4     3 			  2 /* line_number */	bit(14),
  4     4 			  2 /* stmt_number */	bit(5),
  1   335 
  1   336 			pointer);
  1   337 			/* parameter 1:	(input)	error number		*/
  1   338 			/* parameter 2:	(input)	statement id		*/
  1   339 			/* parameter 3:	(input)	any node pointer		*/
  1   340 
  1   341 declare	error_$initialize_error entry();
  1   342 
  1   343 declare	error_$finish	entry();
  1   344 
  1   345 declare	free_node		entry(pointer);
  1   346 			/* parameter 1:	any node pointer			*/
  1   347 
  1   348 declare	get_array_size	entry(pointer,fixed bin(3));
  1   349 			/* parameter 1:	(input)	symbol node pointer		*/
  1   350 			/* parameter 2:	(input)	units			*/
  1   351 
  1   352 declare	get_size		entry(pointer);
  1   353 			/* parameter 1:	(input)	symbol node pointer		*/
  1   354 
  1   355 declare	merge_attributes	external entry(pointer,pointer)
  1   356 			returns(bit(1) aligned);
  1   357 			/* parameter 1:	(input)	target symbol node pointer */
  1   358 			/* parameter 2:	(input)	source symbol node pointer */
  1   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  1   360 
  1   361 declare	optimizer		entry(pointer);
  1   362 			/* parameter 1:	(input)	root pointer		*/
  1   363 
  1   364 declare	parse_error	entry(fixed bin(15),pointer);
  1   365 			/* parameter 1:	(input)	error number		*/
  1   366 			/* parameter 2:	(input)	any node pointer		*/
  1   367 
  1   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  1   369 			/* parameter 1:	(input)	error number		*/
  1   370 			/* parameter 2:	(input)	any node pointer		*/
  1   371 
  1   372 declare	pl1_error_print$write_out
  1   373 			entry(fixed bin(15),
  5     1 			1 structure unaligned,
  5     2 			  2 /* file_number */	bit(8),
  5     3 			  2 /* line_number */	bit(14),
  5     4 			  2 /* stmt_number */	bit(5),
  1   374 
  1   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  1   376 			/* parameter 1:	(input)	error number		*/
  1   377 			/* parameter 2:	(input)	statement identification	*/
  1   378 			/* parameter 3:	(input)	any node pointer		*/
  1   379 			/* parameter 4:	(input)	source segment		*/
  1   380 			/* parameter 5:	(input)	source character index	*/
  1   381 			/* parameter 6:	(input)	source length		*/
  1   382 			/* parameter 7:	(input)	source line		*/
  1   383 
  1   384 declare	pl1_error_print$listing_segment
  1   385 			entry(fixed bin(15),
  6     1 			1 structure unaligned,
  6     2 			  2 /* file_number */	bit(8),
  6     3 			  2 /* line_number */	bit(14),
  6     4 			  2 /* stmt_number */	bit(5),
  1   386 
  1   387 			pointer);
  1   388 			/* parameter 1:	(input)	error number		*/
  1   389 			/* parameter 2:	(input)	statement identification	*/
  1   390 			/* parameter 3:	(input)	token node pointer		*/
  1   391 
  1   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  1   393 			/* parameter 1:	(input)	string			*/
  1   394 
  1   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  1   396 			/* parameter 1:	(input)	string			*/
  1   397 
  1   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  1   399 			/* parameter 1:	(input)	string			*/
  1   400 			/* parameter 2:	(input)	string length or 0		*/
  1   401 
  1   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  1   403 			/* parameter 1:	(input)	string			*/
  1   404 			/* parameter 2:	(input)	string length or 0		*/
  1   405 
  1   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  1   407 			/* parameter 1:	(input)	string pointer		*/
  1   408 			/* parameter 2:	(input)	string size		*/
  1   409 
  1   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  1   411 			/* parameter 1:	(input)	string pointer		*/
  1   412 			/* parameter 2:	(input)	string length or 0		*/
  1   413 
  1   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  1   415 			/* parameter 1:	(input)	string			*/
  1   416 			/* parameter 2:	(input)	length			*/
  1   417 
  1   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  1   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  1   420 			/* parameter 2:	(input)	line number		*/
  1   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  1   422 			/* parameter 4:	(input)	number of chars to copy	*/
  1   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  1   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  1   425 
  1   426 declare	refer_extent	entry(pointer,pointer);
  1   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  1   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  1   429 
  1   430 declare	reserve$clear	entry()
  1   431 			returns(pointer);
  1   432 			/* return:	(output)	pointer			*/
  1   433 
  1   434 declare	reserve$declare_lib	entry(fixed bin(15))
  1   435 			returns(pointer);
  1   436 			/* parameter 1:	(input)	builtin function number	*/
  1   437 			/* return:	(output)	pointer			*/
  1   438 
  1   439 declare	reserve$read_lib	entry(fixed bin(15))
  1   440 			returns(pointer);
  1   441 			/* parameter 1:	(input)	builtin function number	*/
  1   442 			/* return:	(output)	pointer			*/
  1   443 
  1   444 declare	semantic_translator	entry();
  1   445 
  1   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  1   447 			/* parameter 1:	(input)	error number		*/
  1   448 			/* parameter 2:	(input)	any node pointer		*/
  1   449 
  1   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  1   451 			/* parameter 1:	(input)	error number		*/
  1   452 			/* parameter 2:	(input)	any node pointer		*/
  1   453 
  1   454 declare	share_expression	entry(ptr)
  1   455 			returns(ptr);
  1   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  1   457 			/* return:	(output)	tree pointer or null	*/
  1   458 
  1   459 declare	token_to_binary	entry(ptr) reducible
  1   460 			returns(fixed bin(31));
  1   461 			/* parameter 1:	(input)	token node pointer		*/
  1   462 			/* return:	(output)	converted binary value	*/
  1   463 
  1   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
       52 
  7     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
  7     2 
  7     3 dcl	1 symbol			based aligned,
  7     4 	2 node_type		bit(9) unal,
  7     5 	2 source_id		structure unal,
  7     6 	  3 file_number		bit(8),
  7     7 	  3 line_number		bit(14),
  7     8 	  3 statement_number	bit(5),
  7     9 	2 location		fixed(18) unal unsigned,
  7    10 	2 allocated		bit(1) unal,
  7    11 	2 dcl_type		bit(3) unal,
  7    12 	2 reserved		bit(6) unal,
  7    13 	2 pix			unal,
  7    14 	  3 pic_fixed		bit(1) unal,
  7    15 	  3 pic_float		bit(1) unal,
  7    16 	  3 pic_char		bit(1) unal,
  7    17 	  3 pic_scale		fixed(7) unal,
  7    18 	  3 pic_size		fixed(7) unal,
  7    19 	2 level			fixed(8) unal,
  7    20 	2 boundary		fixed(3) unal,
  7    21 	2 size_units		fixed(3) unal,
  7    22 	2 scale			fixed(7) unal,
  7    23 	2 runtime			bit(18) unal,
  7    24 	2 runtime_offset		bit(18) unal,
  7    25 	2 block_node		ptr unal,
  7    26 	2 token			ptr unal,
  7    27 	2 next			ptr unal,
  7    28 	2 multi_use		ptr unal,
  7    29 	2 cross_references		ptr unal,
  7    30 	2 initial			ptr unal,
  7    31 	2 array			ptr unal,
  7    32 	2 descriptor		ptr unal,
  7    33 	2 equivalence		ptr unal,
  7    34 	2 reference		ptr unal,
  7    35 	2 general			ptr unal,
  7    36 	2 father			ptr unal,
  7    37 	2 brother			ptr unal,
  7    38 	2 son			ptr unal,
  7    39 	2 word_size		ptr unal,
  7    40 	2 bit_size		ptr unal,
  7    41 	2 dcl_size		ptr unal,
  7    42 	2 symtab_size		ptr unal,
  7    43 	2 c_word_size		fixed(24),
  7    44 	2 c_bit_size		fixed(24),
  7    45 	2 c_dcl_size		fixed(24),
  7    46 
  7    47 	2 attributes		structure aligned,
  7    48 	  3 data_type		structure unal,
  7    49 	    4 structure		bit(1) ,
  7    50 	    4 fixed		bit(1),
  7    51 	    4 float		bit(1),
  7    52 	    4 bit			bit(1),
  7    53 	    4 char		bit(1),
  7    54 	    4 ptr			bit(1),
  7    55 	    4 offset		bit(1),
  7    56 	    4 area		bit(1),
  7    57 	    4 label		bit(1),
  7    58 	    4 entry		bit(1),
  7    59 	    4 file		bit(1),
  7    60 	    4 arg_descriptor	bit(1),
  7    61 	    4 storage_block		bit(1),
  7    62 	    4 explicit_packed	bit(1), /* options(packed) */
  7    63 	    4 condition		bit(1),
  7    64 	    4 format		bit(1),
  7    65 	    4 builtin		bit(1),
  7    66 	    4 generic		bit(1),
  7    67 	    4 picture		bit(1),
  7    68 
  7    69 	  3 misc_attributes		structure unal,
  7    70 	    4 dimensioned		bit(1),
  7    71 	    4 initialed		bit(1),
  7    72 	    4 aligned		bit(1),
  7    73 	    4 unaligned		bit(1),
  7    74 	    4 signed		bit(1),
  7    75 	    4 unsigned		bit(1),
  7    76 	    4 precision		bit(1),
  7    77 	    4 varying		bit(1),
  7    78 	    4 local		bit(1),
  7    79 	    4 decimal		bit(1),
  7    80 	    4 binary		bit(1),
  7    81 	    4 real		bit(1),
  7    82 	    4 complex		bit(1),
  7    83 	    4 variable		bit(1),
  7    84 	    4 reducible		bit(1),
  7    85 	    4 irreducible		bit(1),
  7    86 	    4 returns		bit(1),
  7    87 	    4 position		bit(1),
  7    88 	    4 internal		bit(1),
  7    89 	    4 external		bit(1),
  7    90 	    4 like		bit(1),
  7    91 	    4 member		bit(1),
  7    92 	    4 non_varying		bit(1),
  7    93 	    4 options		bit(1),
  7    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
  7    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
  7    96 
  7    97 	  3 storage_class		structure unal,
  7    98 	    4 auto		bit(1),
  7    99 	    4 based		bit(1),
  7   100 	    4 static		bit(1),
  7   101 	    4 controlled		bit(1),
  7   102 	    4 defined		bit(1),
  7   103 	    4 parameter		bit(1),
  7   104 	    4 param_desc		bit(1),
  7   105 	    4 constant		bit(1),
  7   106 	    4 temporary		bit(1),
  7   107 	    4 return_value		bit(1),
  7   108 
  7   109 	  3 file_attributes		structure unal,
  7   110 	    4 print		bit(1),
  7   111 	    4 input		bit(1),
  7   112 	    4 output		bit(1),
  7   113 	    4 update		bit(1),
  7   114 	    4 stream		bit(1),
  7   115 	    4 reserved_1		bit(1),
  7   116 	    4 record		bit(1),
  7   117 	    4 sequential		bit(1),
  7   118 	    4 direct		bit(1),
  7   119 	    4 interactive		bit(1),		/* env(interactive) */
  7   120 	    4 reserved_2		bit(1),
  7   121 	    4 reserved_3		bit(1),
  7   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
  7   123 	    4 keyed		bit(1),
  7   124 	    4 reserved_4		bit(1),
  7   125 	    4 environment		bit(1),
  7   126 
  7   127 	  3 compiler_developed	structure unal,
  7   128 	    4 aliasable		bit(1),
  7   129 	    4 packed		bit(1),
  7   130 	    4 passed_as_arg		bit(1),
  7   131 	    4 allocate		bit(1),
  7   132 	    4 set			bit(1),
  7   133 	    4 exp_extents		bit(1),
  7   134 	    4 refer_extents		bit(1),
  7   135 	    4 star_extents		bit(1),
  7   136 	    4 isub		bit(1),
  7   137 	    4 put_in_symtab		bit(1),
  7   138 	    4 contiguous		bit(1),
  7   139 	    4 put_data		bit(1),
  7   140 	    4 overlayed		bit(1),
  7   141 	    4 error		bit(1),
  7   142 	    4 symtab_processed	bit(1),
  7   143 	    4 overlayed_by_builtin	bit(1),
  7   144 	    4 defaulted		bit(1),
  7   145 	    4 connected		bit(1);
  7   146 
  7   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
       53 
  8     1 /* BEGIN INCLUDE FILE ... pl1_symbol_type.incl.pl1 */
  8     2 
  8     3 dcl	1 type,
  8     4 	2 structure	bit,
  8     5 	2 fixed		bit,
  8     6 	2 float		bit,
  8     7 	2 bit		bit,
  8     8 	2 char		bit,
  8     9 	2 ptr		bit,
  8    10 	2 offset		bit,
  8    11 	2 area		bit,
  8    12 	2 label		bit,
  8    13 	2 entry		bit,
  8    14 	2 file		bit,
  8    15 	2 arg_descriptor	bit,
  8    16 	2 storage_block	bit,
  8    17 	2 explicit_packed	bit,
  8    18 	2 condition	bit,
  8    19 	2 format		bit,
  8    20 	2 builtin		bit,
  8    21 	2 generic		bit,
  8    22 	2 picture		bit,
  8    23 	2 dimensioned	bit,
  8    24 	2 initialed	bit,
  8    25 	2 aligned		bit,
  8    26 	2 unaligned	bit,
  8    27 	2 signed		bit,
  8    28 	2 unsigned	bit,
  8    29 	2 precision	bit,
  8    30 	2 varying		bit,
  8    31 	2 local		bit,
  8    32 	2 decimal		bit,
  8    33 	2 binary		bit,
  8    34 	2 real		bit,
  8    35 	2 complex		bit,
  8    36 	2 variable	bit,
  8    37 	2 reducible	bit,
  8    38 	2 irreducible	bit,
  8    39 	2 returns		bit;
  8    40 
  8    41 /* END INCLUDE FILE ... pl1_symbol_type.incl.pl1 */
       54 
  9     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
  9     2 
  9     3 dcl	1 reference		based aligned,
  9     4 	2 node_type		bit(9) unaligned,
  9     5 	2 array_ref		bit(1) unaligned,
  9     6 	2 varying_ref		bit(1) unaligned,
  9     7 	2 shared			bit(1) unaligned,
  9     8 	2 put_data_sw		bit(1) unaligned,
  9     9 	2 processed		bit(1) unaligned,
  9    10 	2 units			fixed(3) unaligned,
  9    11 	2 ref_count		fixed(17) unaligned,
  9    12 	2 c_offset		fixed(24),
  9    13 	2 c_length		fixed(24),
  9    14 	2 symbol			ptr unaligned,
  9    15 	2 qualifier		ptr unaligned,
  9    16 	2 offset			ptr unaligned,
  9    17 	2 length			ptr unaligned,
  9    18 	2 subscript_list		ptr unaligned,
  9    19 						/* these fields are used by the 645 code generator */
  9    20 	2 address			structure unaligned,
  9    21 	  3 base			bit(3),
  9    22 	  3 offset		bit(15),
  9    23 	  3 op			bit(9),
  9    24 	  3 no_address		bit(1),
  9    25 	  3 inhibit		bit(1),
  9    26 	  3 ext_base		bit(1),
  9    27 	  3 tag			bit(6),
  9    28 	2 info			structure unaligned,
  9    29 	  3 address_in		structure,
  9    30 	    4 b			dimension(0:7) bit(1),
  9    31 	    4 storage		bit(1),
  9    32 	  3 value_in		structure,
  9    33 	    4 a			bit(1),
  9    34 	    4 q			bit(1),
  9    35 	    4 aq			bit(1),
  9    36 	    4 string_aq		bit(1),
  9    37 	    4 complex_aq		bit(1),
  9    38 	    4 decimal_aq		bit(1),
  9    39 	    4 b			dimension(0:7) bit(1),
  9    40 	    4 storage		bit(1),
  9    41 	    4 indicators		bit(1),
  9    42 	    4 x			dimension(0:7) bit(1),
  9    43 	  3 other			structure,
  9    44 	    4 big_offset		bit(1),
  9    45 	    4 big_length		bit(1),
  9    46 	    4 modword_in_offset	bit(1),
  9    47 	2 data_type		fixed(5) unaligned,
  9    48 	2 bits			structure unaligned,
  9    49 	  3 padded_ref		bit(1),
  9    50 	  3 aligned_ref		bit(1),
  9    51 	  3 long_ref		bit(1),
  9    52 	  3 forward_ref		bit(1),
  9    53 	  3 ic_ref		bit(1),
  9    54 	  3 temp_ref		bit(1),
  9    55 	  3 defined_ref		bit(1),
  9    56 	  3 evaluated		bit(1),
  9    57 	  3 allocate		bit(1),
  9    58 	  3 allocated		bit(1),
  9    59 	  3 aliasable		bit(1),
  9    60 	  3 even			bit(1),
  9    61 	  3 perm_address		bit(1),
  9    62 	  3 aggregate		bit(1),
  9    63 	  3 hit_zero		bit(1),
  9    64 	  3 dont_save		bit(1),
  9    65 	  3 fo_in_qual		bit(1),
  9    66 	  3 hard_to_load		bit(1),
  9    67 	2 relocation		bit(12) unaligned,
  9    68 	2 more_bits		structure unaligned,
  9    69 	  3 substr		bit(1),
  9    70 	  3 padded_for_store_ref	bit(1),
  9    71 	  3 aligned_for_store_ref	bit(1),
  9    72 	  3 mbz			bit(15),
  9    73 	2 store_ins		bit(18) unaligned;
  9    74 
  9    75 /* END INCLUDE FILE ... reference.incl.pl1 */
       55 
 10     1 /* BEGIN INCLUDE FILE ... system.incl.pl1 */
 10     2 
 10     3 /* Modified: 25 Apr 1979 by PCK to implemnt 4-bit decimal */
 10     4 
 10     5 dcl (	max_p_flt_bin_1			initial(27),
 10     6 	max_p_flt_bin_2			initial(63),
 10     7 	max_p_fix_bin_1			initial(35),
 10     8 	max_p_fix_bin_2			initial(71),
 10     9 
 10    10 	max_p_dec				initial(59),
 10    11 	max_p_bin_or_dec			initial (71),	/* max (max_p_fix_bin_2, max_p_dec) */
 10    12 
 10    13 	min_scale				initial(-128),
 10    14 	max_scale				initial(+127),
 10    15 	max_bit_string			initial(9437184),
 10    16 	max_char_string			initial(1048576),
 10    17 	max_area_size			initial(262144),
 10    18 	min_area_size			initial(28),
 10    19 
 10    20 	max_bit_string_constant		initial (253),	/* max length of bit literals */
 10    21 	max_char_string_constant		initial (254),	/* max length of character literals */
 10    22 	max_identifier_length		initial (256),
 10    23 	max_number_of_dimensions		initial (127),
 10    24 
 10    25 	max_length_precision		initial(24),
 10    26 	max_offset_precision		initial(24),	/* 18 bits for word offset + 6 bits for bit offset */
 10    27 
 10    28 	max_words_per_variable		initial (262144),
 10    29 
 10    30 	bits_per_word			initial(36),
 10    31 	bits_per_double			initial(72),
 10    32 	packed_digits_per_character		initial(2),
 10    33 	characters_per_half			initial(2),
 10    34 	characters_per_word			initial(4),
 10    35 	characters_per_double		initial(8),
 10    36 
 10    37 	bits_per_character			initial(9),
 10    38 	bits_per_half			initial(18),
 10    39 	bits_per_decimal_digit		initial(9),
 10    40 	bits_per_binary_exponent		initial(8),
 10    41 	bits_per_packed_ptr			initial(36),
 10    42 	words_per_packed_pointer		initial(1),
 10    43 
 10    44 	words_per_fix_bin_1			initial(1),
 10    45 	words_per_fix_bin_2			initial(2),
 10    46 	words_per_flt_bin_1			initial(1),
 10    47 	words_per_flt_bin_2			initial(2),
 10    48 	words_per_varying_string_header	initial(1),
 10    49 	words_per_offset			initial(1),
 10    50 	words_per_pointer			initial(2),
 10    51 	words_per_label_var			initial(4),
 10    52 	words_per_entry_var			initial(4),
 10    53 	words_per_file_var			initial(4),
 10    54 	words_per_format			initial(4),
 10    55 	words_per_condition_var		initial(6),
 10    56 
 10    57 	max_index_register_value		initial(262143),
 10    58 	max_signed_index_register_value	initial(131071),
 10    59 
 10    60 	max_signed_xreg_precision		initial(17),
 10    61 	max_uns_xreg_precision		initial(18),
 10    62 
 10    63 	default_area_size			initial(1024),
 10    64 	default_flt_bin_p			initial(27),
 10    65 	default_fix_bin_p			initial(17),
 10    66 	default_flt_dec_p			initial(10),
 10    67           default_fix_dec_p   		initial(7)) fixed bin(31) internal static options(constant);
 10    68 
 10    69 dcl	bits_per_digit			initial(4.5)  fixed bin(31,1) internal static options(constant);
 10    70 
 10    71 dcl (	integer_type		initial("010000000000000000000100000001100000"b),
 10    72 	dec_integer_type		initial("010000000000000000000100000010100000"b),
 10    73 	pointer_type		initial("000001000000000000000100000000000000"b),
 10    74 	real_type			initial("001000000000000000000100000001100000"b),
 10    75 	complex_type		initial("001000000000000000000100000001010000"b),
 10    76 	builtin_type		initial("000000000000000010000000000000000000"b),
 10    77 	storage_block_type		initial("000000000000100000000000000000000000"b),
 10    78 	arg_desc_type		initial("000000000001000000000000000000000000"b),
 10    79 	local_label_var_type	initial("000000001000000000000100000100001000"b),
 10    80 	entry_var_type		initial("000000000100000000000000000000001000"b),
 10    81 	bit_type			initial("000100000000000000000000000000000000"b),
 10    82 	char_type			initial("000010000000000000000000000000000000"b)) bit(36) aligned int static
 10    83 									options(constant);
 10    84 
 10    85 /* END INCLUDE FILE ... system.incl.pl1 */
       56 
 11     1 /* BEGIN INCLUDE FILE ... mask.incl.pl1 */
 11     2 
 11     3 dcl (	structure_mask		init("100000000000000000000000000000000000"b),
 11     4 	fixed_mask		init("010000000000000000000000000000000000"b),
 11     5 	float_mask		init("001000000000000000000000000000000000"b),
 11     6 	bit_mask			init("000100000000000000000000000000000000"b),
 11     7 	char_mask			init("000010000000000000000000000000000000"b),
 11     8 	ptr_mask			init("000001000000000000000000000000000000"b),
 11     9 	offset_mask		init("000000100000000000000000000000000000"b),
 11    10 	area_mask			init("000000010000000000000000000000000000"b),
 11    11 	label_mask		init("000000001000000000000000000000000000"b),
 11    12 	entry_mask		init("000000000100000000000000000000000000"b),
 11    13 	file_mask			init("000000000010000000000000000000000000"b),
 11    14 	arg_descriptor_mask		init("000000000001000000000000000000000000"b),
 11    15 	storage_block_mask		init("000000000000100000000000000000000000"b),
 11    16 	lock_mask			init("000000000000010000000000000000000000"b),
 11    17 	condition_mask		init("000000000000001000000000000000000000"b),
 11    18 	format_mask		init("000000000000000100000000000000000000"b),
 11    19 	builtin_mask		init("000000000000000010000000000000000000"b),
 11    20 	generic_mask		init("000000000000000001000000000000000000"b),
 11    21 	picture_mask		init("000000000000000000100000000000000000"b),
 11    22 	dimensioned_mask		init("000000000000000000010000000000000000"b),
 11    23 	initialed_mask		init("000000000000000000001000000000000000"b),
 11    24 	aligned_mask		init("000000000000000000000100000000000000"b),
 11    25 	unaligned_mask		init("000000000000000000000010000000000000"b),
 11    26 	signed_mask		init("000000000000000000000001000000000000"b),
 11    27 	unsigned_mask		init("000000000000000000000000100000000000"b),
 11    28 	precision_mask		init("000000000000000000000000010000000000"b),
 11    29 	varying_mask		init("000000000000000000000000001000000000"b),
 11    30 	local_mask		init("000000000000000000000000000100000000"b),
 11    31 	decimal_mask		init("000000000000000000000000000010000000"b),
 11    32 	binary_mask		init("000000000000000000000000000001000000"b),
 11    33 	real_mask			init("000000000000000000000000000000100000"b),
 11    34 	complex_mask		init("000000000000000000000000000000010000"b),
 11    35 	variable_mask		init("000000000000000000000000000000001000"b),
 11    36 	reducible_mask		init("000000000000000000000000000000000100"b),
 11    37 	irreducible_mask		init("000000000000000000000000000000000010"b),
 11    38 	returns_mask		init("000000000000000000000000000000000001"b)) bit(36) aligned int static
 11    39 				options(constant);
 11    40 
 11    41 dcl (	arithmetic_mask		init("011000000000000000000000000011110000"b),
 11    42 	computational_mask		init("011110000000000000100000000011110000"b),
 11    43 	fixed_binary_real_mask	init("010000000000000000000000000001100000"b),
 11    44 	fixed_decimal_real_mask	init("010000000000000000000000000010100000"b),
 11    45 	float_decimal_real_mask	init("001000000000000000000000000010100000"b),
 11    46 	fixed_decimal_complex_mask	init("010000000000000000000000000010010000"b),
 11    47 	float_decimal_complex_mask	init("001000000000000000000000000010010000"b),
 11    48 	string_mask		init("000110000000000000000000000000000000"b),
 11    49 	undesirable_mask		init("111111111111111111100111110111110111"b),
 11    50 	convert_mask		init("011111111111111111100111110111111110"b),
 11    51 	declare_constant_mask	init("111111111111111111100000000011110000"b)
 11    52 								     ) bit(36) aligned int static
 11    53 									options(constant);
 11    54 
 11    55 /* END INCLUDE FILE ... mask.incl.pl1 */
       57 
 12     1 /* BEGIN INCLUDE FILE ... boundary.incl.pl1 */
 12     2 
 12     3 /* Modified: 26 Apr 1979 by PCK to implement 4-bit decimal */
 12     4 
 12     5 dcl (	bit_		init(1),
 12     6 	digit_		init(2),
 12     7 	character_	init(3),
 12     8 	half_		init(4),
 12     9 	word_		init(5),
 12    10 	mod2_		init(6),
 12    11 	mod4_		init(7)) fixed bin(3) int static options(constant);
 12    12 
 12    13 /* END INCLUDE FILE ... boundary.incl.pl1 */
       58 
 13     1 /* BEGIN INCLUDE FILE ... declare_type.incl.pl1 */
 13     2 
 13     3 /* Modified: 25 Apr 1979 by PCK to implement 4-bit decimal */
 13     4 
 13     5 dcl  (	by_declare	initial("001"b),
 13     6 	by_explicit_context initial("010"b),
 13     7 	by_context	initial("011"b),
 13     8 	by_implication	initial("100"b),
 13     9 	by_compiler	initial("101"b)) int static bit(3) aligned options(constant);
 13    10 
 13    11 /* END INCLUDE FILE ... declare_type.incl.pl1 */
       59 
       60 
       61 /* program */
       62 
       63 	string (itype) = bv_input_type;
       64 	string (ctype) = string (itype) & declare_constant_mask;
       65 	if ctype.ptr then do;
       66 				boundary = mod2_;
       67 				bit_size = bits_per_word*2;
       68 				go to search;
       69 			  end;
       70 	if ctype.offset then do;
       71 				boundary = word_;
       72 				bit_size = bits_per_word;
       73 				go to search;
       74 			 end;
       75 	if ctype.decimal then do;
       76 				boundary = character_;
       77 				ctype.unaligned = itype.unaligned;
       78 				if ctype.unaligned
       79 				then do;
       80 					if ctype.float
       81 					then bit_size = size + 3;
       82 					else bit_size = size + 1;
       83 
       84 					bit_size = bit_size + mod(bit_size,2);
       85 					bit_size = divide(bit_size,packed_digits_per_character,24,0) * bits_per_character;
       86 				     end;
       87 				else do;
       88 					if ctype.float
       89 					then bit_size = size + 2;
       90 					else bit_size = size + 1;
       91 
       92 					bit_size = bit_size * bits_per_character;
       93 				     end;
       94 				if ctype.complex
       95 				then bit_size = bit_size * 2;
       96 				go to search;
       97 			end;
       98 	if ctype.char then do;
       99 				boundary = character_;
      100 				bit_size = size*bits_per_character;
      101 				go to search;
      102 			end;
      103 	if ctype.bit | ctype.arg_descriptor
      104 		then do;
      105 				boundary = bit_;
      106 				bit_size = size;
      107 				go to search;
      108 			end;
      109 
      110 /* this is a binary constant */
      111 
      112 	if ctype.fixed
      113 	then	if itype.unaligned
      114 		then	if itype.unsigned
      115 			then	bit_size = size;
      116 			else	bit_size = size + 1;
      117 		else	if size>max_p_fix_bin_1
      118 			then	bit_size = bits_per_word*2;
      119 			else	bit_size = bits_per_word;
      120 
      121 	else	if itype.unaligned
      122 		then	bit_size = size+bits_per_binary_exponent+1;
      123 		else	if size>max_p_flt_bin_1
      124 			then	bit_size = bits_per_word*2;
      125 			else	bit_size = bits_per_word;
      126 
      127 	if ctype.complex then bit_size = bit_size*2;
      128 	if bit_size > bits_per_word
      129 		then boundary = mod2_;
      130 		else boundary = word_;
      131 
      132 	ctype.unaligned = itype.unaligned;
      133 	ctype.unsigned = itype.unsigned;
      134 
      135 /* search the chain of constants to find one who's value is equal to this value.
      136*   If no such constant can be found, make a new constant declaration.	*/
      137 
      138 search:
      139 	word_size = divide(bit_size+bits_per_word-1,bits_per_word,31,0);
      140 	value_size = word_size * bits_per_word;
      141 
      142 	substr(copy,1,value_size) = substr(value,1,bit_size);
      143 
      144 	pv = addr(copy);
      145 
      146 	save  ,
      147 	last = null;
      148 	p = pl1_stat_$constant_list;
      149 
      150 	do while(p^=null);
      151 		if p->symbol.c_word_size >= word_size
      152 		then	if p->symbol.initial->const_value = new_value
      153 			then do;
      154 				if word_size = 0
      155 				then	if word_size ^= p -> symbol.c_word_size
      156 					then	go to again;
      157 
      158 				save = p;
      159 
      160 				if p->symbol.c_bit_size^=bit_size then goto new_symbol;
      161 				if substr (string (p -> symbol.attributes), 1, 36) ^= string (ctype) then go to again;
      162 				if p->symbol.c_dcl_size ^= size then goto again;
      163 				if p->symbol.scale ^= scale then goto again;
      164 
      165 				return(p->symbol.reference);
      166 			end;
      167 			else;
      168 		else	last = p;
      169 
      170 again:
      171 		p = p->symbol.multi_use;
      172 	end;
      173 
      174 /* create a new symbol node to represent this constant.	*/
      175 
      176 new_symbol:
      177 	q = create_symbol(null,null,by_compiler);
      178 	q -> symbol.boundary = boundary;
      179 	substr (string (q -> symbol.attributes), 1, 36) = string (ctype);
      180 	q->symbol.c_dcl_size = size;
      181 	q->symbol.scale = scale;
      182 	q->symbol.c_word_size = word_size;
      183 	q->symbol.c_bit_size = bit_size;
      184 	q->symbol.internal,
      185 	q->symbol.constant = "1"b;
      186 
      187 	q->symbol.packed = q->symbol.unaligned;
      188 
      189 	q->symbol.allocate = save=null;
      190 	ref = q->symbol.reference;
      191 	if ctype.bit | ctype.char then ref->reference.c_length = size;
      192 	ref->reference.padded_ref = "1"b;
      193 
      194 /* If this value exists as the value of another constant then
      195*   this declaration will be equivalenced to the declaration of the other constant. */
      196 
      197 	if save^=null
      198 	then do;
      199 		if save->symbol.equivalence = null
      200 			then q->symbol.equivalence = save;
      201 			else q->symbol.equivalence = save->symbol.equivalence;
      202 
      203 		do p1 = q -> symbol.equivalence repeat p1 -> symbol.equivalence while(p1 -> symbol.equivalence ^= null);
      204 		end;
      205 		p1 -> symbol.boundary = max(boundary,p1 -> symbol.boundary);
      206 
      207 		q->symbol.initial = save->symbol.initial;
      208 	     end;
      209 	else do;
      210 		if word_size > 0
      211 		then do;
      212 			q->symbol.initial,p1 = create_storage((word_size));
      213 			p1->space = substr(copy,1,bit_size);
      214 		     end;
      215 		else	q -> symbol.initial = addr(zero);
      216 	     end;
      217 
      218 /* hook this symbol node into the chain of constants keeping the chain ordered by size. */
      219 
      220 	if last=null
      221 	then do;
      222 		q->symbol.multi_use=pl1_stat_$constant_list;
      223 		pl1_stat_$constant_list=q;
      224 	end;
      225 	else do;
      226 		q->symbol.multi_use=last->symbol.multi_use;
      227 		last->symbol.multi_use=q;
      228 	end;
      229 
      230 	return(ref);
      231 
      232 /* Entry points to allow easy declaration of constant values by the compiler. */
      233 
      234 dcl	integer fixed bin(31);
      235 dcl	integer_image bit(bits_per_word) aligned based(addr(integer));
      236 dcl	bits aligned bit(*);
      237 dcl	char aligned char(*);
      238 dcl	char_image aligned bit(length(char)*bits_per_character) based(addr(char));
      239 
      240 dcl	length builtin;
      241 
      242 	/* following is table giving binary precision corresponding
      243*	   to decimal precision, it is used by declare_constant$integer
      244*	   to adjust computed binary precision so that it matches the
      245*	   precision that would be used if a decimal integer were
      246*	   converted to binary */
      247 
      248 dcl	prectab(0:10) fixed binary static init(0,5,8,11,15,18,21,25,28,31,35);
      249 
      250 integer: entry(integer) returns(ptr);
      251 
      252 	i = index(bit(integer,31),"1"b);
      253 	if i = 0 then i = 1; else i = 31 - i + 1;
      254 
      255 	do j = 0 to hbound(prectab,1)-1;
      256 	     if i = prectab(j) then goto ok;
      257 	     if i ^> prectab(j+1)
      258 	     then do;
      259 		i = prectab(j+1);
      260 		goto ok;
      261 		end;
      262 	     end;
      263 
      264 	i = max_p_fix_bin_1;
      265 
      266 ok:	return(declare_constant(integer_image,integer_type,i,0));
      267 
      268 desc: entry(bits) returns(ptr);
      269 
      270 	return(declare_constant(bits,arg_desc_type,length(bits),0));
      271 
      272 bit: entry(bits) returns(ptr);
      273 
      274 	return(declare_constant(bits,bit_type,length(bits),0));
      275 
      276 char: entry(char) returns(ptr);
      277 
      278 	return(declare_constant(char_image,char_type,length(char),0));
      279 
      280      end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/31/89  1338.3  declare_constant.pl1              >spec>install>MR12.3-1066>declare_constant.pl1
52           1    07/31/89  1332.6  language_utility.incl.pl1         >spec>install>MR12.3-1066>language_utility.incl.pl1
1-307        2    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
1-325        3    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
1-335        4    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
1-374        5    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
1-386        6    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
53           7    12/07/83  1701.7  symbol.incl.pl1                   >ldd>include>symbol.incl.pl1
54           8    12/07/83  1700.1  pl1_symbol_type.incl.pl1          >ldd>include>pl1_symbol_type.incl.pl1
55           9    07/21/80  1546.3  reference.incl.pl1                >ldd>include>reference.incl.pl1
56          10    12/07/83  1701.7  system.incl.pl1                   >ldd>include>system.incl.pl1
57          11    11/30/78  1227.5  mask.incl.pl1                     >ldd>include>mask.incl.pl1
58          12    10/25/79  1645.8  boundary.incl.pl1                 >ldd>include>boundary.incl.pl1
59          13    10/25/79  1645.8  declare_type.incl.pl1             >ldd>include>declare_type.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
addr                                                   builtin function         dcl 40 ref 144 215 266 278
allocate                 33(02)        based           bit(1)                   level 4 packed packed unaligned dcl 7-3 set ref 189*
arg_desc_type                   000016 constant        bit(36)                  initial dcl 10-71 set ref 270*
arg_descriptor            0(11) 001124 automatic       bit(1)                   level 2 packed packed unaligned dcl 29 set ref 103
attributes               31            based           structure                level 2 dcl 7-3 set ref 161 179
bit                                                    builtin function         dcl 40 in procedure "declare_constant" ref 252
bit                       0(03) 001124 automatic       bit(1)                   level 2 in structure "ctype" packed packed unaligned
                                                                                  dcl 29 in procedure "declare_constant" set ref 103
                                                                                  191
bit_                                   constant        fixed bin(3,0)           initial dcl 12-5 ref 105
bit_size                        000122 automatic       fixed bin(31,0)          dcl 27 set ref 67* 72* 80* 82* 84* 84 84 85* 85 88*
                                                                                  90* 92* 92 94* 94 100* 106* 112* 116* 117* 119*
                                                                                  121* 123* 125* 127* 127 128 138 142 160 183 213
bit_type                        000015 constant        bit(36)                  initial dcl 10-71 set ref 274*
bits                     12(06)        based           structure                level 2 in structure "reference" packed packed
                                                                                  unaligned dcl 9-3 in procedure "declare_constant"
bits                                   parameter       bit                      dcl 236 in procedure "declare_constant" set ref 268
                                                                                  270* 270 270 272 274* 274 274
bits_per_binary_exponent               constant        fixed bin(31,0)          initial dcl 10-5 ref 121
bits_per_character                     constant        fixed bin(31,0)          initial dcl 10-5 ref 85 92 100 278 278
bits_per_word                          constant        fixed bin(31,0)          initial dcl 10-5 ref 67 72 117 119 123 125 128 138
                                                                                  138 140 235
boundary                  2(20)        based           fixed bin(3,0)           level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 7-3 in procedure "declare_constant"
                                                                                  set ref 178* 205* 205
boundary                        000116 automatic       fixed bin(31,0)          dcl 27 in procedure "declare_constant" set ref 66*
                                                                                  71* 76* 99* 105* 128* 130* 178 205
bv_input_type                          parameter       bit(36)                  dcl 21 ref 15 63
by_compiler                     000013 constant        bit(3)                   initial dcl 13-5 set ref 176*
c_bit_size               27            based           fixed bin(24,0)          level 2 dcl 7-3 set ref 160 183*
c_dcl_size               30            based           fixed bin(24,0)          level 2 dcl 7-3 set ref 162 180*
c_length                  2            based           fixed bin(24,0)          level 2 dcl 9-3 set ref 191*
c_word_size              26            based           fixed bin(24,0)          level 2 dcl 7-3 set ref 151 154 182*
char                      0(04) 001124 automatic       bit(1)                   level 2 in structure "ctype" packed packed unaligned
                                                                                  dcl 29 in procedure "declare_constant" set ref 98
                                                                                  191
char                                   parameter       char                     dcl 237 in procedure "declare_constant" set ref 276
                                                                                  278 278 278 278 278
char_image                             based           bit                      dcl 238 set ref 278*
char_type                       000014 constant        bit(36)                  initial dcl 10-71 set ref 278*
character_                             constant        fixed bin(3,0)           initial dcl 12-5 ref 76 99
compiler_developed       32(35)        based           structure                level 3 packed packed unaligned dcl 7-3
complex                   0(31) 001124 automatic       bit(1)                   level 2 packed packed unaligned dcl 29 set ref 94
                                                                                  127
const_value                            based           bit                      dcl 34 ref 151
constant                 32(16)        based           bit(1)                   level 4 packed packed unaligned dcl 7-3 set ref 184*
copy                            000124 automatic       bit(18432)               packed unaligned dcl 28 set ref 142* 144 213
create_storage                  000014 constant        entry                    external dcl 1-179 ref 212
create_symbol                   000016 constant        entry                    external dcl 1-184 ref 176
ctype                           001124 automatic       structure                level 1 packed packed unaligned dcl 29 set ref 64*
                                                                                  161 179
decimal                   0(28) 001124 automatic       bit(1)                   level 2 packed packed unaligned dcl 29 set ref 75
declare_constant                000020 constant        entry                    external dcl 1-211 ref 266 270 274 278
declare_constant_mask           001174 constant        bit(36)                  initial dcl 11-41 ref 64
divide                                                 builtin function         dcl 40 ref 85 138
equivalence              14            based           pointer                  level 2 packed packed unaligned dcl 7-3 set ref 199
                                                                                  199* 201* 201 203 203 204
fixed                     0(01) 001124 automatic       bit(1)                   level 2 packed packed unaligned dcl 29 set ref 112
float                     0(02) 001124 automatic       bit(1)                   level 2 packed packed unaligned dcl 29 set ref 80 88
hbound                                                 builtin function         dcl 40 ref 255
i                               000117 automatic       fixed bin(31,0)          dcl 27 set ref 252* 253 253* 253* 253 256 257 259*
                                                                                  264* 266*
index                                                  builtin function         dcl 40 ref 252
initial                  11            based           pointer                  level 2 packed packed unaligned dcl 7-3 set ref 151
                                                                                  207* 207 212* 215*
integer                                parameter       fixed bin(31,0)          dcl 234 set ref 250 252 266
integer_image                          based           bit(36)                  dcl 235 set ref 266*
integer_type                    000017 constant        bit(36)                  initial dcl 10-71 set ref 266*
internal                 32(01)        based           bit(1)                   level 4 packed packed unaligned dcl 7-3 set ref 184*
itype                           001125 automatic       structure                level 1 packed packed unaligned dcl 30 set ref 63*
                                                                                  64
j                               000120 automatic       fixed bin(31,0)          dcl 27 set ref 255* 256 257 259*
last                            000112 automatic       pointer                  dcl 26 set ref 146* 168* 220 226 227
length                                                 builtin function         dcl 240 ref 270 270 274 274 278 278 278 278
max                                                    builtin function         dcl 40 ref 205
max_p_fix_bin_1                        constant        fixed bin(31,0)          initial dcl 10-5 ref 117 264
max_p_flt_bin_1                        constant        fixed bin(31,0)          initial dcl 10-5 ref 123
misc_attributes          31(19)        based           structure                level 3 packed packed unaligned dcl 7-3
mod2_                                  constant        fixed bin(3,0)           initial dcl 12-5 ref 66 128
multi_use                 7            based           pointer                  level 2 packed packed unaligned dcl 7-3 set ref 170
                                                                                  222* 226* 226 227*
new_value                              based           bit                      dcl 35 ref 151
null                                                   builtin function         dcl 40 ref 146 150 176 176 176 176 189 197 199 203
                                                                                  220
offset                    0(06) 001124 automatic       bit(1)                   level 2 packed packed unaligned dcl 29 set ref 70
p                               000100 automatic       pointer                  dcl 26 set ref 148* 150 151 151 154 158 160 161 162
                                                                                  163 165 168 170* 170
p1                              000104 automatic       pointer                  dcl 26 set ref 203* 203* 204 205 205 212* 213
packed                   33            based           bit(1)                   level 4 packed packed unaligned dcl 7-3 set ref 187*
packed_digits_per_character            constant        fixed bin(31,0)          initial dcl 10-5 ref 85
padded_ref               12(06)        based           bit(1)                   level 3 packed packed unaligned dcl 9-3 set ref 192*
pl1_stat_$constant_list         000012 external static pointer                  dcl 44 set ref 148 222 223*
prectab                         000000 constant        fixed bin(17,0)          initial array dcl 248 ref 255 256 257 259
ptr                       0(05) 001124 automatic       bit(1)                   level 2 packed packed unaligned dcl 29 set ref 65
pv                              000110 automatic       pointer                  dcl 26 set ref 144* 151
q                               000102 automatic       pointer                  dcl 26 set ref 176* 178 179 180 181 182 183 184 184
                                                                                  187 187 189 190 199 201 203 207 212 215 222 223
                                                                                  226 227
ref                             000106 automatic       pointer                  dcl 26 set ref 190* 191 192 230
reference                              based           structure                level 1 dcl 9-3 in procedure "declare_constant"
reference                15            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 7-3 in procedure "declare_constant"
                                                                                  ref 165 190
save                            000114 automatic       pointer                  dcl 26 set ref 146* 158* 189 197 199 199 201 207
scale                                  parameter       fixed bin(31,0)          dcl 22 in procedure "declare_constant" ref 15 163
                                                                                  181
scale                     2(28)        based           fixed bin(7,0)           level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 7-3 in procedure "declare_constant"
                                                                                  set ref 163 181*
size                                   parameter       fixed bin(31,0)          dcl 22 ref 15 80 82 88 90 100 106 112 116 117 121
                                                                                  123 162 180 191
space                                  based           bit                      dcl 36 set ref 213*
storage_class            32(09)        based           structure                level 3 packed packed unaligned dcl 7-3
string                                                 builtin function         dcl 40 set ref 63* 64* 64 161 161 179 179
substr                                                 builtin function         dcl 40 set ref 142* 142 161 179* 213
symbol                                 based           structure                level 1 dcl 7-3
type                            001126 automatic       structure                level 1 packed packed unaligned dcl 8-3
unaligned                 0(22) 001124 automatic       bit(1)                   level 2 in structure "ctype" packed packed unaligned
                                                                                  dcl 29 in procedure "declare_constant" set ref 77*
                                                                                  78 132*
unaligned                31(22)        based           bit(1)                   level 4 in structure "symbol" packed packed
                                                                                  unaligned dcl 7-3 in procedure "declare_constant"
                                                                                  ref 187
unaligned                 0(22) 001125 automatic       bit(1)                   level 2 in structure "itype" packed packed unaligned
                                                                                  dcl 30 in procedure "declare_constant" set ref 77
                                                                                  112 121 132
unsigned                  0(24) 001125 automatic       bit(1)                   level 2 in structure "itype" packed packed unaligned
                                                                                  dcl 30 in procedure "declare_constant" set ref 112
                                                                                  133
unsigned                  0(24) 001124 automatic       bit(1)                   level 2 in structure "ctype" packed packed unaligned
                                                                                  dcl 29 in procedure "declare_constant" set ref
                                                                                  133*
value                                  parameter       bit                      dcl 20 ref 15 142
value_size                      000123 automatic       fixed bin(31,0)          dcl 27 set ref 140* 142 151 151 213
word_                                  constant        fixed bin(3,0)           initial dcl 12-5 ref 71 130
word_size                       000121 automatic       fixed bin(31,0)          dcl 27 set ref 138* 140 151 154 154 182 210 212
zero                            000010 internal static bit(36)                  initial packed unaligned dcl 48 set ref 215

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
adjust_count                    000000 constant        entry                    external dcl 1-20
aligned_mask                           internal static bit(36)                  initial dcl 11-3
area_mask                              internal static bit(36)                  initial dcl 11-3
arg_descriptor_mask                    internal static bit(36)                  initial dcl 11-3
arithmetic_mask                        internal static bit(36)                  initial dcl 11-41
binary_mask                            internal static bit(36)                  initial dcl 11-3
binary_to_octal_string          000000 constant        entry                    external dcl 1-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 1-43
bindec                          000000 constant        entry                    external dcl 1-23
bindec$vs                       000000 constant        entry                    external dcl 1-28
binoct                          000000 constant        entry                    external dcl 1-33
bit_mask                               internal static bit(36)                  initial dcl 11-3
bits_per_decimal_digit                 internal static fixed bin(31,0)          initial dcl 10-5
bits_per_digit                         internal static fixed bin(31,1)          initial dcl 10-69
bits_per_double                        internal static fixed bin(31,0)          initial dcl 10-5
bits_per_half                          internal static fixed bin(31,0)          initial dcl 10-5
bits_per_packed_ptr                    internal static fixed bin(31,0)          initial dcl 10-5
builtin_mask                           internal static bit(36)                  initial dcl 11-3
builtin_type                           internal static bit(36)                  initial dcl 10-71
by_context                             internal static bit(3)                   initial dcl 13-5
by_declare                             internal static bit(3)                   initial dcl 13-5
by_explicit_context                    internal static bit(3)                   initial dcl 13-5
by_implication                         internal static bit(3)                   initial dcl 13-5
char_mask                              internal static bit(36)                  initial dcl 11-3
characters_per_double                  internal static fixed bin(31,0)          initial dcl 10-5
characters_per_half                    internal static fixed bin(31,0)          initial dcl 10-5
characters_per_word                    internal static fixed bin(31,0)          initial dcl 10-5
compare_expression              000000 constant        entry                    external dcl 1-48
complex_mask                           internal static bit(36)                  initial dcl 11-3
complex_type                           internal static bit(36)                  initial dcl 10-71
computational_mask                     internal static bit(36)                  initial dcl 11-41
condition_mask                         internal static bit(36)                  initial dcl 11-3
constant_length                 000000 constant        entry                    external dcl 1-54
convert                         000000 constant        entry                    external dcl 1-60
convert$from_builtin            000000 constant        entry                    external dcl 1-72
convert$to_integer              000000 constant        entry                    external dcl 1-66
convert$to_target               000000 constant        entry                    external dcl 1-88
convert$to_target_fb            000000 constant        entry                    external dcl 1-82
convert$validate                000000 constant        entry                    external dcl 1-78
convert_mask                           internal static bit(36)                  initial dcl 11-41
copy_expression                 000000 constant        entry                    external dcl 1-94
copy_expression$copy_sons       000000 constant        entry                    external dcl 1-99
copy_unique_expression          000000 constant        entry                    external dcl 1-103
create_array                    000000 constant        entry                    external dcl 1-108
create_block                    000000 constant        entry                    external dcl 1-112
create_bound                    000000 constant        entry                    external dcl 1-118
create_context                  000000 constant        entry                    external dcl 1-122
create_cross_reference          000000 constant        entry                    external dcl 1-128
create_default                  000000 constant        entry                    external dcl 1-132
create_identifier               000000 constant        entry                    external dcl 1-136
create_label                    000000 constant        entry                    external dcl 1-140
create_list                     000000 constant        entry                    external dcl 1-147
create_operator                 000000 constant        entry                    external dcl 1-152
create_reference                000000 constant        entry                    external dcl 1-158
create_statement                000000 constant        entry                    external dcl 1-163
create_statement$prologue       000000 constant        entry                    external dcl 1-171
create_token                    000000 constant        entry                    external dcl 1-191
create_token$init_hash_table    000000 constant        entry                    external dcl 1-197
create_token$protected          000000 constant        entry                    external dcl 1-199
dec_integer_type                       internal static bit(36)                  initial dcl 10-71
decbin                          000000 constant        entry                    external dcl 1-206
decimal_mask                           internal static bit(36)                  initial dcl 11-3
declare_constant$bit            000000 constant        entry                    external dcl 1-219
declare_constant$char           000000 constant        entry                    external dcl 1-224
declare_constant$desc           000000 constant        entry                    external dcl 1-229
declare_constant$integer        000000 constant        entry                    external dcl 1-234
declare_descriptor              000000 constant        entry                    external dcl 1-239
declare_descriptor$ctl          000000 constant        entry                    external dcl 1-249
declare_descriptor$param        000000 constant        entry                    external dcl 1-259
declare_integer                 000000 constant        entry                    external dcl 1-269
declare_picture                 000000 constant        entry                    external dcl 1-274
declare_picture_temp            000000 constant        entry                    external dcl 1-279
declare_pointer                 000000 constant        entry                    external dcl 1-287
declare_temporary               000000 constant        entry                    external dcl 1-292
decode_node_id                  000000 constant        entry                    external dcl 1-300
decode_source_id                000000 constant        entry                    external dcl 1-306
default_area_size                      internal static fixed bin(31,0)          initial dcl 10-5
default_fix_bin_p                      internal static fixed bin(31,0)          initial dcl 10-5
default_fix_dec_p                      internal static fixed bin(31,0)          initial dcl 10-5
default_flt_bin_p                      internal static fixed bin(31,0)          initial dcl 10-5
default_flt_dec_p                      internal static fixed bin(31,0)          initial dcl 10-5
digit_                                 internal static fixed bin(3,0)           initial dcl 12-5
dimensioned_mask                       internal static bit(36)                  initial dcl 11-3
entry_mask                             internal static bit(36)                  initial dcl 11-3
entry_var_type                         internal static bit(36)                  initial dcl 10-71
error                           000000 constant        entry                    external dcl 1-314
error$omit_text                 000000 constant        entry                    external dcl 1-319
error_                          000000 constant        entry                    external dcl 1-324
error_$finish                   000000 constant        entry                    external dcl 1-343
error_$initialize_error         000000 constant        entry                    external dcl 1-341
error_$no_text                  000000 constant        entry                    external dcl 1-334
file_mask                              internal static bit(36)                  initial dcl 11-3
fixed_binary_real_mask                 internal static bit(36)                  initial dcl 11-41
fixed_decimal_complex_mask             internal static bit(36)                  initial dcl 11-41
fixed_decimal_real_mask                internal static bit(36)                  initial dcl 11-41
fixed_mask                             internal static bit(36)                  initial dcl 11-3
float_decimal_complex_mask             internal static bit(36)                  initial dcl 11-41
float_decimal_real_mask                internal static bit(36)                  initial dcl 11-41
float_mask                             internal static bit(36)                  initial dcl 11-3
format_mask                            internal static bit(36)                  initial dcl 11-3
free_node                       000000 constant        entry                    external dcl 1-345
generic_mask                           internal static bit(36)                  initial dcl 11-3
get_array_size                  000000 constant        entry                    external dcl 1-348
get_size                        000000 constant        entry                    external dcl 1-352
half_                                  internal static fixed bin(3,0)           initial dcl 12-5
initialed_mask                         internal static bit(36)                  initial dcl 11-3
irreducible_mask                       internal static bit(36)                  initial dcl 11-3
label_mask                             internal static bit(36)                  initial dcl 11-3
local_label_var_type                   internal static bit(36)                  initial dcl 10-71
local_mask                             internal static bit(36)                  initial dcl 11-3
lock_mask                              internal static bit(36)                  initial dcl 11-3
max_area_size                          internal static fixed bin(31,0)          initial dcl 10-5
max_bit_string                         internal static fixed bin(31,0)          initial dcl 10-5
max_bit_string_constant                internal static fixed bin(31,0)          initial dcl 10-5
max_char_string                        internal static fixed bin(31,0)          initial dcl 10-5
max_char_string_constant               internal static fixed bin(31,0)          initial dcl 10-5
max_identifier_length                  internal static fixed bin(31,0)          initial dcl 10-5
max_index_register_value               internal static fixed bin(31,0)          initial dcl 10-5
max_length_precision                   internal static fixed bin(31,0)          initial dcl 10-5
max_number_of_dimensions               internal static fixed bin(31,0)          initial dcl 10-5
max_offset_precision                   internal static fixed bin(31,0)          initial dcl 10-5
max_p_bin_or_dec                       internal static fixed bin(31,0)          initial dcl 10-5
max_p_dec                              internal static fixed bin(31,0)          initial dcl 10-5
max_p_fix_bin_2                        internal static fixed bin(31,0)          initial dcl 10-5
max_p_flt_bin_2                        internal static fixed bin(31,0)          initial dcl 10-5
max_scale                              internal static fixed bin(31,0)          initial dcl 10-5
max_signed_index_register_value        internal static fixed bin(31,0)          initial dcl 10-5
max_signed_xreg_precision              internal static fixed bin(31,0)          initial dcl 10-5
max_uns_xreg_precision                 internal static fixed bin(31,0)          initial dcl 10-5
max_words_per_variable                 internal static fixed bin(31,0)          initial dcl 10-5
merge_attributes                000000 constant        entry                    external dcl 1-355
min_area_size                          internal static fixed bin(31,0)          initial dcl 10-5
min_scale                              internal static fixed bin(31,0)          initial dcl 10-5
mod4_                                  internal static fixed bin(3,0)           initial dcl 12-5
offset_mask                            internal static bit(36)                  initial dcl 11-3
optimizer                       000000 constant        entry                    external dcl 1-361
parse_error                     000000 constant        entry                    external dcl 1-364
parse_error$no_text             000000 constant        entry                    external dcl 1-368
picture_mask                           internal static bit(36)                  initial dcl 11-3
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 1-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 1-372
pl1_print$for_lex               000000 constant        entry                    external dcl 1-418
pl1_print$non_varying           000000 constant        entry                    external dcl 1-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 1-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 1-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 1-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 1-414
pl1_print$varying               000000 constant        entry                    external dcl 1-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 1-395
pointer_type                           internal static bit(36)                  initial dcl 10-71
precision_mask                         internal static bit(36)                  initial dcl 11-3
ptr_mask                               internal static bit(36)                  initial dcl 11-3
real_mask                              internal static bit(36)                  initial dcl 11-3
real_type                              internal static bit(36)                  initial dcl 10-71
reducible_mask                         internal static bit(36)                  initial dcl 11-3
refer_extent                    000000 constant        entry                    external dcl 1-426
reserve$clear                   000000 constant        entry                    external dcl 1-430
reserve$declare_lib             000000 constant        entry                    external dcl 1-434
reserve$read_lib                000000 constant        entry                    external dcl 1-439
returns_mask                           internal static bit(36)                  initial dcl 11-3
semantic_translator             000000 constant        entry                    external dcl 1-444
semantic_translator$abort       000000 constant        entry                    external dcl 1-446
semantic_translator$error       000000 constant        entry                    external dcl 1-450
share_expression                000000 constant        entry                    external dcl 1-454
signed_mask                            internal static bit(36)                  initial dcl 11-3
storage_block_mask                     internal static bit(36)                  initial dcl 11-3
storage_block_type                     internal static bit(36)                  initial dcl 10-71
string_mask                            internal static bit(36)                  initial dcl 11-41
structure_mask                         internal static bit(36)                  initial dcl 11-3
token_to_binary                 000000 constant        entry                    external dcl 1-459
unaligned_mask                         internal static bit(36)                  initial dcl 11-3
undesirable_mask                       internal static bit(36)                  initial dcl 11-41
unsigned_mask                          internal static bit(36)                  initial dcl 11-3
variable_mask                          internal static bit(36)                  initial dcl 11-3
varying_mask                           internal static bit(36)                  initial dcl 11-3
words_per_condition_var                internal static fixed bin(31,0)          initial dcl 10-5
words_per_entry_var                    internal static fixed bin(31,0)          initial dcl 10-5
words_per_file_var                     internal static fixed bin(31,0)          initial dcl 10-5
words_per_fix_bin_1                    internal static fixed bin(31,0)          initial dcl 10-5
words_per_fix_bin_2                    internal static fixed bin(31,0)          initial dcl 10-5
words_per_flt_bin_1                    internal static fixed bin(31,0)          initial dcl 10-5
words_per_flt_bin_2                    internal static fixed bin(31,0)          initial dcl 10-5
words_per_format                       internal static fixed bin(31,0)          initial dcl 10-5
words_per_label_var                    internal static fixed bin(31,0)          initial dcl 10-5
words_per_offset                       internal static fixed bin(31,0)          initial dcl 10-5
words_per_packed_pointer               internal static fixed bin(31,0)          initial dcl 10-5
words_per_pointer                      internal static fixed bin(31,0)          initial dcl 10-5
words_per_varying_string_header        internal static fixed bin(31,0)          initial dcl 10-5

NAMES DECLARED BY EXPLICIT CONTEXT.
again                           000400 constant        label                    dcl 170 ref 154 161 162 163
bit                             001026 constant        entry                    external dcl 272
char                            001111 constant        entry                    external dcl 276
declare_constant                000043 constant        entry                    external dcl 15
desc                            000745 constant        entry                    external dcl 268
integer                         000626 constant        entry                    external dcl 250
new_symbol                      000404 constant        label                    dcl 176 ref 160
ok                              000704 constant        label                    dcl 266 set ref 256 260
search                          000305 constant        label                    dcl 138 ref 68 73 96 101 107

NAME DECLARED BY CONTEXT OR IMPLICATION.
mod                                                    builtin function         ref 84

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1302        1324    1176        1312
Length      1772    1176        22         431     104           2

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
declare_constant                    652 external procedure  is an external procedure.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 zero                        declare_constant

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
declare_constant         000100 p                           declare_constant
                         000102 q                           declare_constant
                         000104 p1                          declare_constant
                         000106 ref                         declare_constant
                         000110 pv                          declare_constant
                         000112 last                        declare_constant
                         000114 save                        declare_constant
                         000116 boundary                    declare_constant
                         000117 i                           declare_constant
                         000120 j                           declare_constant
                         000121 word_size                   declare_constant
                         000122 bit_size                    declare_constant
                         000123 value_size                  declare_constant
                         000124 copy                        declare_constant
                         001124 ctype                       declare_constant
                         001125 itype                       declare_constant
                         001126 type                        declare_constant

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_e_as              call_ext_out_desc   call_ext_out        return_mac          mdfx1               ext_entry
ext_entry_desc      index_bs_1_eis

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
create_storage                create_symbol                 declare_constant

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pl1_stat_$constant_list




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     15 000036        63 000061        64 000063        65 000065        66 000070        67 000072        68 000075
     70 000076        71 000101        72 000103        73 000105        75 000106        76 000111        77 000113
     78 000117        80 000122        82 000131        84 000134        85 000137        86 000143        88 000144
     90 000153        92 000156        94 000160        96 000165        98 000166        99 000171       100 000173
    101 000176       103 000177       105 000202       106 000204       107 000206       112 000207       116 000223
    117 000227       119 000236       121 000241       123 000250       125 000257       127 000261       128 000266
    130 000273       132 000275       133 000301       138 000305       140 000311       142 000313       144 000320
    146 000322       148 000325       150 000330       151 000334       154 000347       158 000353       160 000354
    161 000357       162 000362       163 000366       165 000373       167 000376       168 000377       170 000400
    172 000403       176 000404       178 000424       179 000432       180 000434       181 000437       182 000443
    183 000445       184 000447       187 000453       189 000460       190 000470       191 000472       192 000477
    197 000501       199 000505       201 000513       203 000514       204 000522       205 000525       207 000537
    208 000543       210 000544       212 000546       213 000564       214 000572       215 000573       220 000577
    222 000603       223 000610       224 000611       226 000612       227 000616       230 000617       250 000622
    252 000636       253 000651       253 000655       255 000661       256 000667       257 000673       259 000675
    260 000677       262 000700       264 000702       266 000704       268 000741       270 000763       272 001024
    274 001044       276 001105       278 001127


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
