	COMPILATION LISTING OF SEGMENT tut_log_in_
	Compiled by: Multics PL/I Compiler, Release 33e, of October 6, 1992
	Compiled at: CGI                             
	Compiled on: 2000-04-18_1155.65_Tue_mdt
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 
        7 /* Written by J. Siwila  3/30/83 */
        8 
        9 /* This procedure sets up and displays the menu in the Tutorial dealing with
       10*      logging in and out. */
       11 
       12 /* format: style2 */
       13 tut_log_in_:
       14      proc (menu_io, user_io_window_info, function_key_data_ptr, fkey, choice, last1, Phelp_args, pseudo, code);
       15 
       16 /* Automatic */
       17 
       18 	dcl     change_origin	 bit (1) aligned;
       19 	dcl     choice		 fixed bin;
       20 	dcl     choices		 (5) char (30) var;
       21 	dcl     code		 fixed bin (35);
       22 	dcl     init_display	 bit (1) aligned init ("0"b);
       23 	dcl     fkey		 bit (1) aligned;
       24 	dcl     headers		 (1) char (30) var;
       25 	dcl     menu_io		 ptr;
       26 	dcl     menu_ptr		 ptr;
       27 	dcl     my_area		 area (4095);
       28 	dcl     1 my_menu_format	 like menu_format;
       29 	dcl     1 my_menu_requirements like menu_requirements;
       30 	dcl     1 true_window_info	 like window_position_info;
       31 	dcl     new_io_height	 fixed bin;
       32 	dcl     seg_name		 char (16) init ("tut_logging_in_0");
       33 	dcl     seg_name_1		 char (14) init ("tut_logging_in");
       34 	dcl     seg_name_2		 char (15) init ("tut_starting_up");
       35 	dcl     seg_name_3		 char (19) init ("tut_getting_dropped");
       36 	dcl     seg_name_4		 char (15) init ("tut_logging_out");
       37 	dcl     trailers		 (2) char (40) var;
       38 	dcl     1 user_io_window_info	 like window_position_info;
       39 	dcl     ME_LOG_IN		 char (11) init ("tut_log_in_");
       40 	dcl     last1		 fixed bin;
       41 	dcl     pseudo		 bit (1) aligned;
       42 
       43 /* Builtin */
       44 
       45 	dcl     (null, empty, addr)	 builtin;
       46 
       47 /* Condition */
       48 
       49 	dcl     (program_interrupt, any_other)
       50 				 condition;
       51 
       52 /* Entries */
       53 
       54 	dcl     cu_$cl		 entry () options (variable);
       55 	dcl     tut_get_seg_	 entry () options (variable);
       56 	dcl     tut_quit_		 entry () options (variable);
       57 	dcl     tut_window_		 entry () options (variable);
       58 	dcl     tut_bottom_		 entry () options (variable);
       59 
       60 /* External */
       61 
       62 	dcl     video_data_$terminal_iocb
       63 				 ptr external;
       64 
       65 
       66 /* Create the menu */
       67 
       68 	choices (1) = "Logging In";
       69 	choices (2) = "Starting Up";
       70 	choices (3) = "Getting Dropped";
       71 	choices (4) = "Logging Out";
       72 	choices (5) = "Return to First Menu";
       73 
       74 	headers (1) = "<<<Logging In and Out>>>";
       75 	if pseudo
       76 	then trailers (1) = "Use ESC q to Exit";
       77 	else trailers (1) = "Use Function Key F4 to Exit";
       78 	trailers (2) = "-";
       79 
       80 	my_menu_format.version = menu_format_version_1;
       81 	my_menu_format.max_width = user_io_window_info.extent.width;
       82 	my_menu_format.max_height = 6;
       83 	my_menu_format.n_columns = 2;
       84 	my_menu_format.center_headers = "1"b;
       85 	my_menu_format.center_trailers = "1"b;
       86 	my_menu_format.pad = "0"b;
       87 	my_menu_format.pad_char = "-";
       88 
       89 	my_menu_requirements = menu_requirements_version_1;
       90 
       91 /* Now carve the menu I/O window out of the user_i/o window. */
       92 
       93 	change_origin = "0"b;
       94 	call tut_window_ (menu_io, true_window_info, my_menu_format.max_height, change_origin, code);
       95 	if code ^= 0
       96 	then return;
       97 	new_io_height = user_io_window_info.height - my_menu_format.max_height;
       98 START:
       99 	change_origin = "1"b;
      100 	call tut_window_ (iox_$user_io, true_window_info, new_io_height, change_origin, code);
      101 	if code ^= 0
      102 	then return;
      103 
      104 	call menu_$create (choices, headers, trailers, addr (my_menu_format), MENU_OPTION_KEYS, addr (my_area),
      105 	     addr (my_menu_requirements), menu_ptr, code);
      106 	if code ^= 0
      107 	then do;
      108 		call tut_quit_ (code, ME_LOG_IN, "Unable to create menu.", menu_io, user_io_window_info);
      109 		return;
      110 	     end;
      111 
      112 /* Display menus */
      113 
      114 
      115 	call menu_$display (menu_io, menu_ptr, code);
      116 	if code ^= 0
      117 	then do;
      118 		call tut_quit_ (code, ME_LOG_IN, "Unable to display menu.", menu_io, user_io_window_info);
      119 		return;
      120 	     end;
      121 
      122 	if init_display
      123 	then goto NEXT;
      124 	else do;
      125 		init_display = "1"b;
      126 		call tut_get_seg_ (seg_name, menu_io, user_io_window_info, code);
      127 		if code ^= 0
      128 		then return;
      129 	     end;
      130 
      131 NEXT:
      132 	on condition (program_interrupt) go to START;
      133 
      134 /* Now start processing input from user */
      135 
      136 	do while ("1"b);
      137 
      138 /* Get an option number or function key value from user. */
      139 
      140 	     code = 0;
      141 	     call iox_$control (iox_$user_io, "reset_more", null (), code);
      142 	     call menu_$get_choice (menu_io, menu_ptr, function_key_data_ptr, fkey, choice, code);
      143 
      144 /* Perform an action depending on the user's selection. */
      145 
      146 	     if code ^= 0
      147 	     then do;
      148 		     call tut_quit_ (code, ME_LOG_IN, "Unable to get choice.", menu_io, user_io_window_info);
      149 		     return;
      150 		end;
      151 	     if fkey
      152 	     then if choice = 1
      153 		then do;
      154 			call tut_bottom_ (true_window_info, new_io_height, my_menu_format.max_height, Phelp_args,
      155 			     code);
      156 			if code ^= 0
      157 			then return;
      158 		     end;
      159 		else if choice = 2
      160 		then do;
      161 			call tut_cl ();
      162 			if code ^= 0
      163 			then return;
      164 		     end;
      165 		else if choice = 3
      166 		then do;
      167 			last1 = 6;
      168 			return;
      169 		     end;
      170 		else if choice = 4
      171 		then return;
      172 		else call window_$bell (menu_io, (0));
      173 
      174 	     else do;
      175 		     if choice = 1
      176 		     then do;
      177 			     call logging_in ();
      178 			     if code ^= 0
      179 			     then return;
      180 			end;
      181 		     else if choice = 2
      182 		     then do;
      183 			     call start_up ();
      184 			     if code ^= 0
      185 			     then return;
      186 			end;
      187 		     else if choice = 3
      188 		     then do;
      189 			     call dropped ();
      190 			     if code ^= 0
      191 			     then return;
      192 			end;
      193 		     else if choice = 4
      194 		     then do;
      195 			     call logging_out ();
      196 			     if code ^= 0
      197 			     then return;
      198 			end;
      199 		     else if choice = 5
      200 		     then do;
      201 			     last1 = 6;
      202 			     return;
      203 			end;
      204 		     else call window_$bell (menu_io, (0));
      205 		end;
      206 	end;
      207 
      208 /* Procedures for options. */
      209 
      210 logging_in:
      211      proc ();
      212 
      213 	call tut_get_seg_ (seg_name_1, menu_io, user_io_window_info, code);
      214 	return;
      215 
      216      end logging_in;
      217 
      218 start_up:
      219      proc ();
      220 
      221 	call tut_get_seg_ (seg_name_2, menu_io, user_io_window_info, code);
      222 	return;
      223 
      224      end start_up;
      225 
      226 dropped:
      227      proc ();
      228 
      229 	call tut_get_seg_ (seg_name_3, menu_io, user_io_window_info, code);
      230 	return;
      231 
      232      end dropped;
      233 
      234 logging_out:
      235      proc ();
      236 
      237 	call tut_get_seg_ (seg_name_4, menu_io, user_io_window_info, code);
      238 	return;
      239 
      240      end logging_out;
      241 
      242 tut_cl:
      243      proc ();
      244 
      245 	on any_other system;
      246 	call window_$clear_window (iox_$user_io, code);
      247 	if code ^= 0
      248 	then do;
      249 		call tut_quit_ (code, ME_LOG_IN, "Unable to clear window.", menu_io, user_io_window_info);
      250 		return;
      251 	     end;
      252 	trailers (1) = "Type ""pi"" and RETURN to reenter tutorial";
      253 	call menu_$create (choices, headers, trailers, addr (my_menu_format), MENU_OPTION_KEYS, addr (my_area),
      254 	     addr (my_menu_requirements), menu_ptr, code);
      255 	if code ^= 0
      256 	then do;
      257 		call tut_quit_ (code, ME_LOG_IN, "Unable to create menu.", menu_io, user_io_window_info);
      258 		return;
      259 	     end;
      260 	call menu_$display (menu_io, menu_ptr, code);
      261 	if code ^= 0
      262 	then do;
      263 		call tut_quit_ (code, ME_LOG_IN, "Unable to display menu", menu_io, user_io_window_info);
      264 		return;
      265 	     end;
      266 	if pseudo
      267 	then trailers (1) = "Use ESC q to Exit";
      268 	else trailers (1) = "Use Function Key F4 to Exit";
      269 	call cu_$cl;
      270 
      271      end tut_cl;
      272 
  1     1 /* BEGIN INCLUDE FILE ... function_key_data.incl.pl1 
  1     2*
  1     3*   This include file defines the structure used for ttt_info_$function_key_data
  1     4*   MCR 4671      James R. Davis Sept 80
  1     5**/
  1     6 
  1     7 dcl 1 function_key_data aligned based (function_key_data_ptr),
  1     8       2 version fixed bin,
  1     9       2 highest fixed bin,				/* highest fkey */
  1    10       2 sequence,					/* string of all seqs. */
  1    11         3 seq_ptr pointer,
  1    12         3 seq_len fixed bin (21),
  1    13       2 cursor_motion_keys,
  1    14         3 home (0:3) like key_info,
  1    15         3 left (0:3) like key_info,
  1    16         3 up (0:3) like key_info,
  1    17         3 right (0:3) like key_info,
  1    18         3 down (0:3) like key_info,
  1    19       2 function_keys (0:function_key_data_highest refer
  1    20 	(function_key_data.highest), 0:3) like key_info;
  1    21 
  1    22 dcl (KEY_PLAIN init (0),
  1    23      KEY_SHIFT init (1),
  1    24      KEY_CTRL init (2),
  1    25      KEY_CTRL_AND_SHIFT init (3)
  1    26      ) fixed bin internal static options (constant);
  1    27 
  1    28 dcl 1 key_info unaligned based (key_info_ptr),
  1    29       2 sequence_index fixed bin (12) unsigned unaligned,
  1    30       2 sequence_length fixed bin (6) unsigned unaligned;	/* 0 -> not exist */
  1    31 
  1    32 dcl function_key_seqs char (function_key_data.sequence.seq_len)
  1    33 	based (function_key_data.sequence.seq_ptr);
  1    34 dcl function_key_data_ptr ptr;
  1    35 dcl function_key_data_highest fixed bin;
  1    36 dcl function_key_data_version_1
  1    37 	fixed bin internal static options (constant) init (1);
  1    38 dcl key_info_ptr ptr;
  1    39 
  1    40 
  1    41 /* END INCLUDE FILE ... function_key_data.incl.pl1 */
      273 
      274 
  2     1 /*  BEGIN:   help_args_.incl.pl1			  *  *  *  *  *  */
  2     2 
  2     3 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  2     4 /*									*/
  2     5 /* Name:   help_args_.incl.pl1						*/
  2     6 /*									*/
  2     7 /* This include file declares the structure used by the help command and other subsystems	*/
  2     8 /* to pass info segment selection and printing control information to the help_		*/
  2     9 /* subroutine.  This based structure is NEVER allocated.  Instead, the caller of help_	*/
  2    10 /* must call help_$init to get a pointer to a temporary segment which is used for	*/
  2    11 /* storage for the structure.  The structure contains 5 arrays with refer extents,	*/
  2    12 /* allowing complete freedom in the numbers of selection values given.  Typically, the	*/
  2    13 /* caller fills in the arrays at the top of the structure first, growing the arrays	*/
  2    14 /* as each new element is added.  After each array is filled, the caller begins filling	*/
  2    15 /* in the next array.  Note that, on return from help_$init, all of the arrays have 0	*/
  2    16 /* extents, except that the search_dirs array contains the list of directories to be	*/
  2    17 /* searched in to find info segments, as defined by the search facility.  The caller	*/
  2    18 /* may of course change or replace these search directories.			*/
  2    19 /*									*/
  2    20 /* A legend describing the variable naming convention follows.			*/
  2    21 /*									*/
  2    22 /*   STARTING LETTER	STANDS FOR					*/
  2    23 /*	P		pointer to					*/
  2    24 /*	L		length of						*/
  2    25 /*	D		descriptor of					*/
  2    26 /*	S		switch						*/
  2    27 /*	V		version						*/
  2    28 /*									*/
  2    29 /* Status									*/
  2    30 /*									*/
  2    31 /* 0) Created:   October, 1978    by Gary Dixon					*/
  2    32 /* 1) Modified:  June 4, 1983	    by Gary Dixon - add Sctl.inhibit_errors flag.		*/
  2    33 /* 2) Modified:  April, 1985      by L.Adams - use Vhelp_args_2.			*/
  2    34 /*									*/
  2    35 /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
  2    36 
  2    37 /****^  HISTORY COMMENTS:
  2    38*  1) change(86-03-07,LJAdams), approve(86-03-07,MCR7327),
  2    39*     audit(86-03-10,Lippard), install(86-04-24,MR12.0-1048):
  2    40*     Declares structure used by the help command and other subsystems to pass
  2    41*     info segment selection and printing control information the help_
  2    42*     subroutine.
  2    43*  2) change(87-01-26,LJAdams), approve(87-09-03,MCR7766),
  2    44*     audit(88-05-03,GDixon), install(88-09-13,MR12.2-1109):
  2    45*     Added lep to Sctl.
  2    46*     Added Sctl.cs to indicate if search or section requests are to be case
  2    47*     sensitive or not.
  2    48*     Changed version to Vhelp_args_3.
  2    49*  3) change(88-02-12,LJAdams), approve(88-03-07,MCR7857),
  2    50*     audit(88-05-03,GDixon), install(88-09-13,MR12.2-1109):
  2    51*     Added help_data_ptr to point to a second help_args structure that will be
  2    52*     used for list_requests.
  2    53*                                                   END HISTORY COMMENTS */
  2    54 
  2    55      dcl	1 help_args aligned based (Phelp_args),		/* help's input arguments.			*/
  2    56 	  2 version		fixed bin,	/* = 3, currently. Use Vhelp_args_3.		*/
  2    57 						/*	(set by help_$init, checked by caller)	*/
  2    58 	  2 Sctl,					/* control argument switches.			*/
  2    59 						/*	(SET BY CALLER OF help_)		*/
  2    60 	   (3 he_only,				/*   print only a heading, nothing else.	*/
  2    61 	    3 he_pn,				/*   when heading printed, include info pathname.	*/
  2    62 	    3 he_info_name,				/*   when heading printed, include info_name.	*/
  2    63 	    3 he_counts,				/*   when heading printed, include line counts.	*/
  2    64 						/*   If none of the 3 switches above are set,	*/
  2    65 						/*   then only info header is incl. in heading.	*/
  2    66 	    3 title,				/*   -title				*/
  2    67 	    3 scn,				/*   -section				*/
  2    68 	    3 srh,				/*   -search				*/
  2    69 	    3 bf,					/*   -brief				*/
  2    70 	    3 ca,					/*   -control_arg				*/
  2    71 	    3 ep,					/*   -entry_point				*/
  2    72 	    3 all,				/*   -all					*/
  2    73               3 lep,				/*   -lep 				*/
  2    74               3 cs,                                         /*   -case_sensitive                              */
  2    75 	    3 inhibit_errors)			/*   inhibits error diagnostics when desired	*/
  2    76 						/*     information is not found.  Useful for	*/
  2    77 						/*     subsystems like ted that want to diagnose	*/
  2    78 						/*     their own errors.			*/
  2    79 				bit(1) unal,
  2    80 	    3 mbz1		bit(22) unal,
  2    81 	  2 Nsearch_dirs		fixed bin,	/* number of info_segment (or other) search dirs.	*/
  2    82 						/*	(set by help_$init, CALLER CAN CHANGE)	*/
  2    83 	  2 Npaths		fixed bin,	/* number of info segment names.		*/
  2    84 						/*	(SET BY CALLER OF help_)		*/
  2    85 	  2 Ncas			fixed bin,	/* number of control arg names given with -ca	*/
  2    86 						/*	(SET BY CALLER OF help_)		*/
  2    87 	  2 Nscns			fixed bin,	/* number of section substrings.		*/
  2    88 						/*	(SET BY CALLER OF help_)		*/
  2    89 	  2 Nsrhs			fixed bin,	/* number of search strings.			*/
  2    90 						/*	(SET BY CALLER OF help_)		*/
  2    91 	  2 min_Lpgh		fixed bin,	/* minimum length of a paragraph.		*/
  2    92 						/*	(set by help_$init, CALLER CAN CHANGE)	*/
  2    93 	  2 max_Lpgh		fixed bin,	/* maximum lines in group of aggregated paragraphs*/
  2    94 						/* or in paragraphs constructed by help_.	*/
  2    95 						/*	(set by help_$init, CALLER CAN CHANGE)	*/
  2    96 	  2 Lspace_between_infos	fixed bin,	/* spaces inserted between infos when several	*/
  2    97 						/* printed by one invocation.			*/
  2    98 						/*	(set by help_$init, CALLER CAN CHANGE)	*/
  2    99 	  2 min_date_time		fixed bin(71),	/* do not process infos modified before this date.*/
  2   100 						/*	(SET BY CALLER OF help_)		*/
  2   101 	  2 sci_ptr		ptr,		/* sci_ptr when help_ is invoked by a subsystem.	*/
  2   102 						/*   This must be set to null when not invoked 	*/
  2   103 						/*   from a subsystem.			*/
  2   104             2 help_data_ptr             ptr,                /* ptr to second help_args (used for list rqts)   */
  2   105 	  2 pad2 (6) 		fixed bin,	/* reserved for future expansion.		*/
  2   106 
  2   107 	/*		End of fixed-length part of the structure.				*/
  2   108 
  2   109 	  2 search_dirs (0 refer (help_args.Nsearch_dirs))
  2   110 				char (168) unal,	/* directories help_ will look in to find info	*/
  2   111 						/*   segments when relative paths (without < or >)*/
  2   112 						/*   are given.  When help_$init is called, the	*/
  2   113 						/*   current search rules (from a search list of	*/
  2   114 						/*   caller's choice) will be given here.  Caller	*/
  2   115 						/*   may modify this list if desired before	*/
  2   116 						/*   calling help_.				*/
  2   117 	  2 path (0 refer (help_args.Npaths)),		/* names of sought info segments.		*/
  2   118 	    3 value		char(425) varying,	/*   These are the args themselves, without	*/
  2   119 	    					/*   processing by expand_pathname_, etc.	*/
  2   120 						/*   Their length is length(path) + length("$")	*/
  2   121 						/*   + length(entry_point_name).		*/
  2   122 						/*   Note that entry_point_names can be 256 chars.*/
  2   123 						/*	(SET BY CALLER OF help_)		*/
  2   124 	    3 info_name		char(32) unal,	/*   name of logical info to be printed.	*/
  2   125 						/*	(SET BY CALLER OF help_)		*/
  2   126 						/*   "" = help_ should set this to entry part	*/
  2   127 						/*        of path.value, minus the suffix.	*/
  2   128 						/*   other = logical info name not a name on the	*/
  2   129 						/* 	   physical info segment.		*/
  2   130 	    3 dir (1)		char(168) unal,	/*   dir part of a pathname (set by help_).	*/
  2   131 	    3 ent			char(32) unal,	/*   ent part of name (set by help_).		*/
  2   132 	    3 ep			char(32) varying,	/*   entry point part of name. (set by help_)	*/
  2   133 	    3 code		fixed bin(35),	/*   error code while processing this path.	*/
  2   134 						/*     (set by help_)			*/
  2   135 	    3 S,					/*   switches indicating path type.		*/
  2   136 	     (4 pn_ctl_arg,				/*     -pn ctl given before this path. 		*/
  2   137 						/*     	(SET BY CALLER OF help_)		*/
  2   138 	      4 info_name_not_starname,		/*     caller-supplied path.info_name is not a	*/
  2   139 						/*       star name, even if it has * or ? chars.	*/
  2   140 						/*     	(SET BY CALLER OF help_)		*/
  2   141 	      4 less_greater,			/*     A < or > appears in path.value.		*/
  2   142 						/*     	(set by help_)			*/
  2   143 	      4 starname_ent,			/*     on if ent is a starname.		*/
  2   144 						/*	(set by help_)			*/
  2   145 	      4 starname_info_name,			/*     on if info_name is a starname.		*/
  2   146 						/*	(set by help_)			*/
  2   147 	      4 separate_info_name) 	bit(1) unal,	/*     on if info_name given by caller.		*/
  2   148 						/*	(set by help_)			*/
  2   149 	      4 pad3	 	bit(30) unal,
  2   150 	  2 ca (0 refer (help_args.Ncas))		/* the ctl_arg names, without leading - just as	*/
  2   151 				char(32) varying,	/*   req'd by the -ca ctl_arg of help.		*/
  2   152 						/*	(SET BY CALLER OF help_)		*/
  2   153 	  2 scn (0 refer (help_args.Nscns))		/* substrings sought in section titles.		*/
  2   154 				char(80) varying,	/*	(SET BY CALLER OF help_)		*/
  2   155 	  2 srh (0 refer (help_args.Nsrhs))		/* search strings.				*/
  2   156 				char(80) varying,	/*	(SET BY CALLER OF help_)		*/
  2   157 	Phelp_args		ptr,
  2   158 	Vhelp_args_3		fixed bin int static options(constant) init(3);
  2   159 
  2   160      dcl	help_			entry (char(*), ptr, char(*), fixed bin, fixed bin(35)),
  2   161 	help_$init		entry (char(*), char(*), char(*), fixed bin, ptr, fixed bin(35)),
  2   162 	help_$term		entry (char(*), ptr, fixed bin(35));
  2   163 
  2   164 /*  END OF:  help_args_.incl.pl1			  *  *  *  *  *  */
      275 
      276 
  3     1 /* --------------- BEGIN include file iox_dcls.incl.pl1 --------------- */
  3     2 
  3     3 /* Written 05/04/78 by C. D. Tavares */
  3     4 /* Fixed declaration of iox_$find_iocb_n 05/07/80 by R. Holmstedt */
  3     5 /* Modified 5/83 by S. Krupp to add declarations for:  iox_$open_file,
  3     6*     iox_$close_file, iox_$detach and iox_$attach_loud entries. */
  3     7 
  3     8 dcl  iox_$attach_name entry (char (*), pointer, char (*), pointer, fixed bin (35)),
  3     9      iox_$attach_ptr entry (pointer, char (*), pointer, fixed bin (35)),
  3    10      iox_$close entry (pointer, fixed bin (35)),
  3    11      iox_$control entry (pointer, char (*), pointer, fixed bin (35)),
  3    12      iox_$delete_record entry (pointer, fixed bin (35)),
  3    13      iox_$destroy_iocb entry (pointer, fixed bin (35)),
  3    14      iox_$detach_iocb entry (pointer, fixed bin (35)),
  3    15      iox_$err_not_attached entry options (variable),
  3    16      iox_$err_not_closed entry options (variable),
  3    17      iox_$err_no_operation entry options (variable),
  3    18      iox_$err_not_open entry options (variable),
  3    19      iox_$find_iocb entry (char (*), pointer, fixed bin (35)),
  3    20      iox_$find_iocb_n entry (fixed bin, ptr, fixed bin(35)),
  3    21      iox_$get_chars entry (pointer, pointer, fixed bin (21), fixed bin (21), fixed bin (35)),
  3    22      iox_$get_line entry (pointer, pointer, fixed bin (21), fixed bin (21), fixed bin (35)),
  3    23      iox_$look_iocb entry (char (*), pointer, fixed bin (35)),
  3    24      iox_$modes entry (pointer, char (*), char (*), fixed bin (35)),
  3    25      iox_$move_attach entry (pointer, pointer, fixed bin (35)),
  3    26      iox_$open entry (pointer, fixed bin, bit (1) aligned, fixed bin (35)),
  3    27      iox_$position entry (pointer, fixed bin, fixed bin (21), fixed bin (35)),
  3    28      iox_$propagate entry (pointer),
  3    29      iox_$put_chars entry (pointer, pointer, fixed bin (21), fixed bin (35)),
  3    30      iox_$read_key entry (pointer, char (256) varying, fixed bin (21), fixed bin (35)),
  3    31      iox_$read_length entry (pointer, fixed bin (21), fixed bin (35)),
  3    32      iox_$read_record entry (pointer, pointer, fixed bin (21), fixed bin (21), fixed bin (35)),
  3    33      iox_$rewrite_record entry (pointer, pointer, fixed bin (21), fixed bin (35)),
  3    34      iox_$seek_key entry (pointer, char (256) varying, fixed bin (21), fixed bin (35)),
  3    35      iox_$write_record entry (pointer, pointer, fixed bin (21), fixed bin (35)),
  3    36      iox_$open_file entry(ptr, fixed bin, char(*), bit(1) aligned, fixed bin(35)),
  3    37      iox_$close_file entry(ptr, char(*), fixed bin(35)),
  3    38      iox_$detach entry(ptr, char(*), fixed bin(35)),
  3    39      iox_$attach_loud entry(ptr, char(*), ptr, fixed bin(35));
  3    40 
  3    41 dcl (iox_$user_output,
  3    42      iox_$user_input,
  3    43      iox_$user_io,
  3    44      iox_$error_output) external static pointer;
  3    45 
  3    46 /* ---------------- END include file iox_dcls.incl.pl1 ---------------- */
      277 
      278 
  4     1 /* BEGIN INCLUDE FILE menu_dcls.incl.pl1
  4     2*   declarations for the menu_ subroutines MTB 493
  4     3*   James R. Davis 26 Jan 81  to 20 Februrary 81
  4     4**/
  4     5 
  4     6 /* format: off */
  4     7 
  4     8 dcl menu_$create      entry (
  4     9 	(*) char (*) varying,			/* input: choices */
  4    10 	(*) char (*) varying,			/* input: headers */
  4    11 	(*) char (*) varying,			/* input: trailers */
  4    12 	pointer,					/* input: to format info */
  4    13 	(*) char (1) unal,				/* input: keys to use */
  4    14 	pointer,					/* input: to area */
  4    15 	pointer,					/* input: to needs str. */
  4    16 	pointer,					/* to menu: output */
  4    17 	fixed bin (35)				/* code */
  4    18 			      );
  4    19 
  4    20 dcl menu_$display entry (
  4    21 	pointer,					/* window */
  4    22 	pointer,					/* menu */
  4    23 	fixed bin (35)				/* code */
  4    24 			      );
  4    25 
  4    26 dcl menu_$get_choice entry (
  4    27 	pointer,					/* window */
  4    28 	pointer,					/* menu */
  4    29 	pointer,					/* to function key info */
  4    30 	bit (1) aligned,				/* function key hi: output */
  4    31 	fixed bin,				/* output: selection number */
  4    32 	fixed bin (35)				/* output: code */
  4    33 			      );
  4    34 
  4    35 dcl menu_$describe entry (
  4    36           pointer,					/* menu */
  4    37 	pointer,					/* needs */
  4    38 	fixed bin (35)				/* code */
  4    39 	                          );
  4    40 
  4    41 dcl menu_$destroy entry (
  4    42           pointer,					/* menu */
  4    43 	fixed bin (35)				/* code */
  4    44                                     );
  4    45 
  4    46 dcl menu_$store entry (
  4    47 	character (*),
  4    48 	character (*),
  4    49 	character (*),
  4    50 	bit (1) aligned,
  4    51 	pointer,
  4    52 	fixed bin (35));
  4    53 
  4    54 dcl menu_$retrieve entry (
  4    55 	character (*),
  4    56 	character (*),
  4    57 	character (*),
  4    58 	pointer,
  4    59 	pointer,
  4    60 	fixed bin (35));
  4    61 dcl  menu_$delete entry (
  4    62 	character (*),
  4    63 	character (*),
  4    64 	character (*),
  4    65 	fixed binary (35));
  4    66 
  4    67 dcl  menu_$list entry (
  4    68 	character (*),
  4    69 	character (*),
  4    70 	character (*),
  4    71 	pointer,
  4    72 	fixed bin,
  4    73 	pointer,
  4    74 	fixed bin (35));
  4    75 
  4    76      dcl	   1 menu_format	      aligned based (menu_format_ptr),
  4    77 	     2 version	      fixed bin,
  4    78 	     2 constraints,
  4    79 	       3 max_width	      fixed bin,
  4    80 	       3 max_height	      fixed bin,
  4    81 	     2 n_columns	      fixed bin,
  4    82 	     2 flags,
  4    83 	       3 center_headers   bit (1) unal,
  4    84 	       3 center_trailers  bit (1) unal,
  4    85 	       3 pad	      bit (34) unal,
  4    86 	     2 pad_char	      char (1);
  4    87 
  4    88      dcl	   1 menu_requirements    aligned based (menu_requirements_ptr),
  4    89 	     2 version	      fixed bin,
  4    90 	     2 lines_needed	      fixed bin,
  4    91 	     2 width_needed	      fixed bin,
  4    92 	     2 n_options	      fixed bin;
  4    93 
  4    94      dcl	   menu_format_ptr	      pointer;
  4    95      dcl	   menu_requirements_ptr  pointer;
  4    96 
  4    97      dcl	   (menu_format_version_1, menu_requirements_version_1)
  4    98 			      fixed bin internal static init (1) options (constant);
  4    99 
  4   100      dcl	   MENU_OPTION_KEYS	      (35) char (1) unal internal static
  4   101 			      options (constant) init
  4   102 	("1", "2", "3", "4", "5", "6", "7", "8", "9",
  4   103 	"A", "B", "C", "D", "E", "F", "G", "H", "I",
  4   104 	"J", "K", "L", "M", "N", "O", "P", "Q", "R",
  4   105 	"S", "T", "U", "V", "W", "X", "Y", "Z");
  4   106 
  4   107 /* END INCLUDE FILE ... menu_dcls.incl.pl1 */
      279 
      280 
  5     1 /* begin include fine window_dcls.incl.pl1 BIM June 1981 */
  5     2 /* Modified 9 October 1983 by Jon A. Rochlis to add window_$edit_line. */
  5     3 
  5     4 /* format: style3 */
  5     5 
  5     6 declare	window_$bell	entry (pointer, fixed binary (35));
  5     7 declare	window_$clear_region
  5     8 			entry (pointer, fixed binary, fixed binary, fixed binary, fixed binary, fixed binary (35));
  5     9 declare	window_$clear_to_end_of_line
  5    10 			entry (pointer, fixed binary (35));
  5    11 declare	window_$clear_to_end_of_window
  5    12 			entry (pointer, fixed binary (35));
  5    13 declare	window_$clear_window
  5    14 			entry (pointer, fixed binary (35));
  5    15 declare	window_$delete_chars
  5    16 			entry (pointer, fixed binary, fixed binary (35));
  5    17 declare	window_$get_cursor_position
  5    18 			entry (pointer, fixed binary, fixed binary, fixed binary (35));
  5    19 
  5    20 /* Call window_$get_echoed_chars (iocb_ptr, n_to_read, read_buffer, n_read, read_break, code); */
  5    21 
  5    22 declare	window_$get_echoed_chars
  5    23 			entry (pointer, fixed binary (21), character (*), fixed binary (21), character (1) var,
  5    24 			fixed binary (35));
  5    25 declare	window_$get_unechoed_chars
  5    26 			entry (pointer, fixed binary (21), character (*), fixed binary (21), character (1) var,
  5    27 			fixed binary (35));
  5    28 declare	window_$insert_text entry (pointer, character (*), fixed binary (35));
  5    29 declare	window_$overwrite_text
  5    30 			entry (pointer, character (*), fixed binary (35));
  5    31 declare	window_$position_cursor
  5    32 			entry (pointer, fixed binary, fixed binary, fixed binary (35));
  5    33 
  5    34 /* Call window_$position_cursor_rel (iocb_ptr, delta_line, delta_column, code); */
  5    35 
  5    36 declare	window_$position_cursor_rel
  5    37 			entry (pointer, fixed binary, fixed binary, fixed binary (35));
  5    38 
  5    39 /* Call window_$scroll_region (iocb_ptr, first_line_of_region, n_lines_of_region, distance_to_scroll_region_negative_is_up,
  5    40*        code); */
  5    41 
  5    42 declare	window_$scroll_region
  5    43 			entry (pointer, fixed binary, fixed binary, fixed binary, fixed binary (35));
  5    44 declare	window_$sync	entry (pointer, fixed binary (35));
  5    45 
  5    46 /* Call window_$write_raw_text (iocb_ptr, text_string, code); */
  5    47 
  5    48 declare	window_$write_raw_text
  5    49 			entry (pointer, character (*), fixed binary (35));
  5    50 
  5    51 /* Call window_$write_sync_read (iocb_ptr, prompt_string, n_to_read, read_buffer, n_read, break_char, code); */
  5    52 
  5    53 declare	window_$write_sync_read
  5    54 			entry (pointer, character (*), fixed bin (21), character (*), fixed binary (21),
  5    55 			character (1) var, fixed binary (35));
  5    56 
  5    57 /* Call window_$change_line (iocb_ptr, new_line, code); */
  5    58 
  5    59 declare	window_$change_line entry (pointer, fixed binary, fixed binary (35));
  5    60 
  5    61 /* Call window_$change_column (iocb_ptr, new_column, code); */
  5    62 
  5    63 declare	window_$change_column
  5    64 			entry (pointer, fixed binary, fixed binary (35));
  5    65 
  5    66 /* Call window_$get_one_unechoed (iocb_ptr, char_or_len_0, block_flag, code); */
  5    67 declare	(
  5    68 	window_$get_one_unechoed,
  5    69 	window_$get_one_unechoed_char
  5    70 	)		entry (pointer, character (1) var, bit (1) aligned, fixed binary (35));
  5    71 
  5    72 declare	window_$create	entry (pointer, pointer, pointer, fixed binary (35));
  5    73 
  5    74 declare	window_$destroy	entry (pointer, fixed binary (35));
  5    75 
  5    76 declare   window_$edit_line	entry (pointer, pointer, pointer, fixed bin(21), fixed bin(21), fixed bin(35));
  5    77 
  5    78 /* call window_$edit_line (iocb_ptr, window_edit_line_info_ptr, buffer_ptr,
  5    79*                           buffer_len, n_returned, code); */
  5    80 
  5    81 
  5    82 /* end include file window_dcls.incl.pl1 */
      281 
      282 
  6     1 /* BEGIN INCLUDE FILE ... window_control_info.incl.pl1 JRD  */
  6     2 /* format: style3 */
  6     3 
  6     4 /* Modified 26 January 1982 by William York to add the set_more_handler
  6     5*   and reset_more_handler control orders. */
  6     6 /* Modified October 1982 by WMY to add set and get_token_characters,
  6     7*   set and get_more_prompt. */
  6     8 /* Modified February 1983 by WMY to add the line_editor_key_binding_info
  6     9*   structure. */
  6    10 /* Modified 30 September 1983 by Jon A. Rochlis to add the origin.column for
  6    11*   partial screen width windows. */
  6    12 /* Modified 9 October 1983 by JR to add version 1 window_edit_line_info. 
  6    13*   This should be removed when window_info.incl.pl1 is created. */
  6    14 /* Modified 29 February 1984 by Barmar to add version 1 
  6    15*   get_editor_key_bindings_info. */
  6    16 /* Modified 1 March 1984 by Barmar to add version 1 
  6    17*   set_editor_key_bindings_info. */
  6    18 /* Modified 2 March 1984 by Barmar to upgrade to version 3
  6    19*   line_editor_key_bindings_info, which includes the name, description, and
  6    20*   info path */
  6    21 
  6    22 /* structure for the set_window_info and get_window_info
  6    23*   control orders. */
  6    24 
  6    25 dcl	1 window_position_info
  6    26 			based (window_position_info_ptr),
  6    27 	  2 version	fixed bin,
  6    28 	  2 origin,
  6    29 	    3 column	fixed bin,
  6    30 	    3 line	fixed bin,
  6    31 	  2 extent,
  6    32 	    3 width	fixed bin,
  6    33 	    3 height	fixed bin;
  6    34 
  6    35 dcl	(window_position_info_version, window_position_info_version_1)
  6    36 			fixed bin internal static init (1) options (constant);
  6    37 dcl	window_position_info_ptr
  6    38 			pointer;
  6    39 
  6    40 /* structure for the set_window_status and get_window_status
  6    41*   control orders */
  6    42 
  6    43 declare	window_status_info_ptr
  6    44 			pointer;
  6    45 declare	1 window_status_info
  6    46 			aligned based (window_status_info_ptr),
  6    47 	  2 version	fixed bin,
  6    48 	  2 status_string	bit (36) aligned;		/* string (window_status) */
  6    49 /* see window_status.incl.pl1 for the contents of this string */
  6    50 
  6    51 
  6    52 declare	(window_status_version, window_status_version_1)
  6    53 			fixed bin internal static init (1) options (constant);
  6    54 
  6    55 /* info structure for the set_more_responses and get_more_responses control 
  6    56*   orders */
  6    57 
  6    58 
  6    59 dcl	1 more_responses_info
  6    60 			aligned based (more_responses_info_ptr),
  6    61 	  2 version	fixed bin,
  6    62 	  2 n_yeses	fixed bin, /* how many valid characters in the strings below */
  6    63 	  2 n_noes	fixed bin,
  6    64 	  2 yeses		char (32) unaligned,
  6    65 	  2 noes		char (32) unaligned;
  6    66 
  6    67 dcl	(more_responses_info_version_1, more_responses_version)
  6    68 			fixed bin internal static init (1) options (constant);
  6    69 dcl	more_responses_info_ptr
  6    70 			pointer;
  6    71 
  6    72 /* structure for the set_break_table and get_break_table
  6    73*   control orders */
  6    74 
  6    75 declare	break_table_ptr	pointer;
  6    76 declare	1 break_table_info	aligned based (break_table_ptr),
  6    77 	  2 version	fixed bin,
  6    78 	  2 breaks	(0:127) bit (1) unaligned;
  6    79 
  6    80 declare	(break_table_info_version, break_table_info_version_1)
  6    81 			fixed bin init (1) internal static options (constant);
  6    82 
  6    83 declare	1 more_handler_info aligned based (more_handler_info_ptr),
  6    84 	  2 version	fixed bin,
  6    85 	  2 flags		unaligned,
  6    86 	    3 old_handler_valid
  6    87 			bit(1),
  6    88 	    3 pad		bit(35),
  6    89 	  2 more_handler	entry (pointer, bit(1) aligned),
  6    90 	  2 old_more_handler entry (pointer, bit(1) aligned);
  6    91 
  6    92 declare	more_handler_info_ptr pointer;
  6    93 
  6    94 declare	(more_handler_info_version, more_handler_info_version_3)
  6    95 			fixed bin internal static options (constant) init (3);
  6    96 			
  6    97 declare   1 token_characters_info aligned based (token_characters_info_ptr),
  6    98 	  2 version	char(8),
  6    99 	  2 token_character_count
  6   100 			fixed bin,
  6   101 	  2 token_characters
  6   102 			char (128) unaligned;
  6   103 
  6   104 declare   token_characters_info_ptr pointer;
  6   105 
  6   106 declare   token_characters_info_version_1 char(8) internal static options (constant) init ("wtci0001");
  6   107 
  6   108 declare   1 more_prompt_info	aligned based (more_prompt_info_ptr),
  6   109 	  2 version	char(8),
  6   110 	  2 more_prompt	char(80);
  6   111 
  6   112 declare   more_prompt_info_ptr pointer;
  6   113 
  6   114 declare   more_prompt_info_version_1 char(8) static options (constant) init ("wsmp0001");
  6   115 
  6   116 /* Line editor stuff ... */
  6   117 
  6   118 dcl  line_editor_key_binding_info_ptr
  6   119 			pointer;
  6   120 
  6   121 dcl  line_editor_binding_count
  6   122 			fixed bin;
  6   123 dcl  line_editor_longest_sequence
  6   124 			fixed bin;
  6   125 /* For each binding, action defines what to do for that sequence. Constants
  6   126*   are defined in window_editor_values.incl.pl1. Only if action is set to
  6   127*   EXTERNAL_ROUTINE does the editor_routine entry variable get examined. */
  6   128 
  6   129 dcl  1 line_editor_key_binding_info
  6   130 			aligned based (line_editor_key_binding_info_ptr),
  6   131        2 version		char(8),
  6   132        2 binding_count	fixed bin,
  6   133        2 longest_sequence	fixed bin,
  6   134        2 bindings		(line_editor_binding_count refer
  6   135 			(line_editor_key_binding_info.binding_count)),
  6   136          3 sequence		char(line_editor_longest_sequence refer
  6   137 			(line_editor_key_binding_info.longest_sequence)) varying,
  6   138          3 action		fixed bin,
  6   139          3 numarg_action      fixed binary,
  6   140          3 editor_routine	entry (pointer, fixed bin(35)),
  6   141          3 name		char (64) varying unaligned,
  6   142          3 description	char (256) varying unaligned,
  6   143          3 info_path	unaligned,
  6   144 	 4 info_dir	char (168),
  6   145 	 4 info_entry	char (32);
  6   146 	
  6   147 
  6   148 dcl  line_editor_key_binding_info_version_3
  6   149 			char(8) static options (constant) init ("lekbi003");
  6   150 
  6   151 dcl 1 get_editor_key_bindings_info	aligned based (get_editor_key_bindings_info_ptr),
  6   152       2 version			char (8),
  6   153       2 flags,
  6   154         3 entire_state		bit (1) unaligned,
  6   155         3 mbz			bit (35) unaligned,
  6   156       2 key_binding_info_ptr		ptr,
  6   157       2 entire_state_ptr		ptr;
  6   158 
  6   159 dcl get_editor_key_bindings_info_ptr	ptr;
  6   160 dcl get_editor_key_bindings_info_version_1 char (8) int static options (constant) init ("gekbi_01");
  6   161 
  6   162 dcl 1 set_editor_key_bindings_info	aligned
  6   163 				based (set_editor_key_bindings_info_ptr),
  6   164       2 version			char (8),
  6   165       2 flags,
  6   166         3 replace			bit (1) unaligned,
  6   167         3 update			bit (1) unaligned,
  6   168         3 mbz			bit (34) unaligned,
  6   169       2 key_binding_info_ptr		ptr;
  6   170 
  6   171 dcl set_editor_key_bindings_info_ptr	ptr;
  6   172 dcl set_editor_key_bindings_info_version_1 char (8) int static options (constant) init ("sekbi_01");
  6   173 
  6   174 /* This should be moved to window_info.incl.pl1 when that include file is
  6   175*   created.  JR 2/1/84 */
  6   176 
  6   177 dcl	1 window_edit_line_info
  6   178 			based (window_edit_line_info_ptr),
  6   179 	  2 version	char (8),
  6   180 	  2 line_ptr	ptr,
  6   181 	  2 line_length	fixed bin (21);		/* later we will hack initial cursor position, key bindings, etc. */
  6   182 
  6   183 dcl	window_edit_line_info_version_1
  6   184 			char (8) static options (constant) init ("wedl0001");
  6   185 
  6   186 dcl	window_edit_line_info_ptr
  6   187 			ptr;
  6   188 
  6   189 /* END INCLUDE FILE window_control_info.incl.pl1 */
      283 
      284 
      285      end tut_log_in_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/18/00  1155.6  tut_log_in_.pl1                   >udd>sm>ds>w>ml>tut_log_in_.pl1
273          1    02/23/81  2246.3  function_key_data.incl.pl1        >ldd>incl>function_key_data.incl.pl1
275          2    09/15/88  2112.3  help_args_.incl.pl1               >ldd>incl>help_args_.incl.pl1
277          3    05/23/83  1016.6  iox_dcls.incl.pl1                 >ldd>incl>iox_dcls.incl.pl1
279          4    03/27/82  0529.3  menu_dcls.incl.pl1                >ldd>incl>menu_dcls.incl.pl1
281          5    09/12/84  1016.7  window_dcls.incl.pl1              >ldd>incl>window_dcls.incl.pl1
283          6    09/12/84  1016.7  window_control_info.incl.pl1      >ldd>incl>window_control_info.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
MENU_OPTION_KEYS                000000 constant        char(1)                  initial array packed unaligned dcl 4-100 set ref
                                                                                  104* 253*
ME_LOG_IN                       010264 automatic       char(11)                 initial packed unaligned dcl 39 set ref 39* 108*
                                                                                  118* 148* 249* 257* 263*
Phelp_args                             parameter       pointer                  dcl 2-55 set ref 13 154*
addr                                                   builtin function         dcl 45 ref 104 104 104 104 104 104 253 253 253 253
                                                                                  253 253
any_other                       000000 stack reference condition                dcl 49 ref 245
center_headers            4     010171 automatic       bit(1)                   level 3 packed packed unaligned dcl 28 set ref 84*
center_trailers           4(01) 010171 automatic       bit(1)                   level 3 packed packed unaligned dcl 28 set ref 85*
change_origin                   000100 automatic       bit(1)                   dcl 18 set ref 93* 94* 98* 100*
choice                                 parameter       fixed bin(17,0)          dcl 19 set ref 13 142* 151 159 165 170 175 181 187
                                                                                  193 199
choices                         000101 automatic       varying char(30)         array dcl 20 set ref 68* 69* 70* 71* 72* 104* 253*
code                                   parameter       fixed bin(35,0)          dcl 21 set ref 13 94* 95 100* 101 104* 106 108* 115*
                                                                                  116 118* 126* 127 140* 141* 142* 146 148* 154* 156
                                                                                  162 178 184 190 196 213* 221* 229* 237* 246* 247
                                                                                  249* 253* 255 257* 260* 261 263*
constraints               1     010171 automatic       structure                level 2 unaligned dcl 28
cu_$cl                          000010 constant        entry                    external dcl 54 ref 269
empty                                                  builtin function         dcl 45 ref 27
extent                    3            parameter       structure                level 2 unaligned dcl 38
fkey                                   parameter       bit(1)                   dcl 23 set ref 13 142* 151
flags                     4     010171 automatic       structure                level 2 packed packed unaligned dcl 28
function_key_data_ptr                  parameter       pointer                  dcl 1-34 set ref 13 142*
headers                         000157 automatic       varying char(30)         array dcl 24 set ref 74* 104* 253*
height                    4            parameter       fixed bin(17,0)          level 3 dcl 38 set ref 97
init_display                    000156 automatic       bit(1)                   initial dcl 22 set ref 22* 122 125*
iox_$control                    000022 constant        entry                    external dcl 3-8 ref 141
iox_$user_io                    000024 external static pointer                  dcl 3-41 set ref 100* 141* 246*
key_info                               based           structure                level 1 packed packed unaligned dcl 1-28
last1                                  parameter       fixed bin(17,0)          dcl 40 set ref 13 167* 201*
max_height                2     010171 automatic       fixed bin(17,0)          level 3 dcl 28 set ref 82* 94* 97 154*
max_width                 1     010171 automatic       fixed bin(17,0)          level 3 dcl 28 set ref 81*
menu_$create                    000026 constant        entry                    external dcl 4-8 ref 104 253
menu_$display                   000030 constant        entry                    external dcl 4-20 ref 115 260
menu_$get_choice                000032 constant        entry                    external dcl 4-26 ref 142
menu_format                            based           structure                level 1 dcl 4-76
menu_format_version_1                  constant        fixed bin(17,0)          initial dcl 4-97 ref 80
menu_io                                parameter       pointer                  dcl 25 set ref 13 94* 108* 115* 118* 126* 142* 148*
                                                                                  172* 204* 213* 221* 229* 237* 249* 257* 260* 263*
menu_ptr                        000170 automatic       pointer                  dcl 26 set ref 104* 115* 142* 253* 260*
menu_requirements                      based           structure                level 1 dcl 4-88
menu_requirements_version_1            constant        fixed bin(17,0)          initial dcl 4-97 ref 89
my_area                         000172 automatic       area(4095)               dcl 27 set ref 27* 104 104 253 253
my_menu_format                  010171 automatic       structure                level 1 unaligned dcl 28 set ref 104 104 253 253
my_menu_requirements            010177 automatic       structure                level 1 unaligned dcl 29 set ref 89* 104 104 253 253
n_columns                 3     010171 automatic       fixed bin(17,0)          level 2 dcl 28 set ref 83*
new_io_height                   010210 automatic       fixed bin(17,0)          dcl 31 set ref 97* 100* 154*
null                                                   builtin function         dcl 45 ref 141 141
pad                       4(02) 010171 automatic       bit(34)                  level 3 packed packed unaligned dcl 28 set ref 86*
pad_char                  5     010171 automatic       char(1)                  level 2 packed packed unaligned dcl 28 set ref 87*
program_interrupt               010270 stack reference condition                dcl 49 ref 131
pseudo                                 parameter       bit(1)                   dcl 41 ref 13 75 266
seg_name                        010211 automatic       char(16)                 initial packed unaligned dcl 32 set ref 32* 126*
seg_name_1                      010215 automatic       char(14)                 initial packed unaligned dcl 33 set ref 33* 213*
seg_name_2                      010221 automatic       char(15)                 initial packed unaligned dcl 34 set ref 34* 221*
seg_name_3                      010225 automatic       char(19)                 initial packed unaligned dcl 35 set ref 35* 229*
seg_name_4                      010232 automatic       char(15)                 initial packed unaligned dcl 36 set ref 36* 237*
trailers                        010236 automatic       varying char(40)         array dcl 37 set ref 75* 77* 78* 104* 252* 253* 266*
                                                                                  268*
true_window_info                010203 automatic       structure                level 1 unaligned dcl 30 set ref 94* 100* 154*
tut_bottom_                     000020 constant        entry                    external dcl 58 ref 154
tut_get_seg_                    000012 constant        entry                    external dcl 55 ref 126 213 221 229 237
tut_quit_                       000014 constant        entry                    external dcl 56 ref 108 118 148 249 257 263
tut_window_                     000016 constant        entry                    external dcl 57 ref 94 100
user_io_window_info                    parameter       structure                level 1 unaligned dcl 38 set ref 13 108* 118* 126*
                                                                                  148* 213* 221* 229* 237* 249* 257* 263*
version                         010171 automatic       fixed bin(17,0)          level 2 dcl 28 set ref 80*
width                     3            parameter       fixed bin(17,0)          level 3 dcl 38 set ref 81
window_$bell                    000034 constant        entry                    external dcl 5-6 ref 172 204
window_$clear_window            000036 constant        entry                    external dcl 5-13 ref 246
window_position_info                   based           structure                level 1 unaligned dcl 6-25

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
KEY_CTRL                               internal static fixed bin(17,0)          initial dcl 1-22
KEY_CTRL_AND_SHIFT                     internal static fixed bin(17,0)          initial dcl 1-22
KEY_PLAIN                              internal static fixed bin(17,0)          initial dcl 1-22
KEY_SHIFT                              internal static fixed bin(17,0)          initial dcl 1-22
Vhelp_args_3                           internal static fixed bin(17,0)          initial dcl 2-55
break_table_info                       based           structure                level 1 dcl 6-76
break_table_info_version               internal static fixed bin(17,0)          initial dcl 6-80
break_table_info_version_1             internal static fixed bin(17,0)          initial dcl 6-80
break_table_ptr                        automatic       pointer                  dcl 6-75
function_key_data                      based           structure                level 1 dcl 1-7
function_key_data_highest              automatic       fixed bin(17,0)          dcl 1-35
function_key_data_version_1            internal static fixed bin(17,0)          initial dcl 1-36
function_key_seqs                      based           char                     packed unaligned dcl 1-32
get_editor_key_bindings_info           based           structure                level 1 dcl 6-151
get_editor_key_bindings_info_ptr       automatic       pointer                  dcl 6-159
get_editor_key_bindings_info_version_1 internal static char(8)                  initial packed unaligned dcl 6-160
help_                           000000 constant        entry                    external dcl 2-160
help_$init                      000000 constant        entry                    external dcl 2-160
help_$term                      000000 constant        entry                    external dcl 2-160
help_args                              based           structure                level 1 dcl 2-55
iox_$attach_loud                000000 constant        entry                    external dcl 3-8
iox_$attach_name                000000 constant        entry                    external dcl 3-8
iox_$attach_ptr                 000000 constant        entry                    external dcl 3-8
iox_$close                      000000 constant        entry                    external dcl 3-8
iox_$close_file                 000000 constant        entry                    external dcl 3-8
iox_$delete_record              000000 constant        entry                    external dcl 3-8
iox_$destroy_iocb               000000 constant        entry                    external dcl 3-8
iox_$detach                     000000 constant        entry                    external dcl 3-8
iox_$detach_iocb                000000 constant        entry                    external dcl 3-8
iox_$err_no_operation           000000 constant        entry                    external dcl 3-8
iox_$err_not_attached           000000 constant        entry                    external dcl 3-8
iox_$err_not_closed             000000 constant        entry                    external dcl 3-8
iox_$err_not_open               000000 constant        entry                    external dcl 3-8
iox_$error_output                      external static pointer                  dcl 3-41
iox_$find_iocb                  000000 constant        entry                    external dcl 3-8
iox_$find_iocb_n                000000 constant        entry                    external dcl 3-8
iox_$get_chars                  000000 constant        entry                    external dcl 3-8
iox_$get_line                   000000 constant        entry                    external dcl 3-8
iox_$look_iocb                  000000 constant        entry                    external dcl 3-8
iox_$modes                      000000 constant        entry                    external dcl 3-8
iox_$move_attach                000000 constant        entry                    external dcl 3-8
iox_$open                       000000 constant        entry                    external dcl 3-8
iox_$open_file                  000000 constant        entry                    external dcl 3-8
iox_$position                   000000 constant        entry                    external dcl 3-8
iox_$propagate                  000000 constant        entry                    external dcl 3-8
iox_$put_chars                  000000 constant        entry                    external dcl 3-8
iox_$read_key                   000000 constant        entry                    external dcl 3-8
iox_$read_length                000000 constant        entry                    external dcl 3-8
iox_$read_record                000000 constant        entry                    external dcl 3-8
iox_$rewrite_record             000000 constant        entry                    external dcl 3-8
iox_$seek_key                   000000 constant        entry                    external dcl 3-8
iox_$user_input                        external static pointer                  dcl 3-41
iox_$user_output                       external static pointer                  dcl 3-41
iox_$write_record               000000 constant        entry                    external dcl 3-8
key_info_ptr                           automatic       pointer                  dcl 1-38
line_editor_binding_count              automatic       fixed bin(17,0)          dcl 6-121
line_editor_key_binding_info           based           structure                level 1 dcl 6-129
line_editor_key_binding_info_ptr       automatic       pointer                  dcl 6-118
line_editor_key_binding_info_version_3 internal static char(8)                  initial packed unaligned dcl 6-148
line_editor_longest_sequence           automatic       fixed bin(17,0)          dcl 6-123
menu_$delete                    000000 constant        entry                    external dcl 4-61
menu_$describe                  000000 constant        entry                    external dcl 4-35
menu_$destroy                   000000 constant        entry                    external dcl 4-41
menu_$list                      000000 constant        entry                    external dcl 4-67
menu_$retrieve                  000000 constant        entry                    external dcl 4-54
menu_$store                     000000 constant        entry                    external dcl 4-46
menu_format_ptr                        automatic       pointer                  dcl 4-94
menu_requirements_ptr                  automatic       pointer                  dcl 4-95
more_handler_info                      based           structure                level 1 dcl 6-83
more_handler_info_ptr                  automatic       pointer                  dcl 6-92
more_handler_info_version              internal static fixed bin(17,0)          initial dcl 6-94
more_handler_info_version_3            internal static fixed bin(17,0)          initial dcl 6-94
more_prompt_info                       based           structure                level 1 dcl 6-108
more_prompt_info_ptr                   automatic       pointer                  dcl 6-112
more_prompt_info_version_1             internal static char(8)                  initial packed unaligned dcl 6-114
more_responses_info                    based           structure                level 1 dcl 6-59
more_responses_info_ptr                automatic       pointer                  dcl 6-69
more_responses_info_version_1          internal static fixed bin(17,0)          initial dcl 6-67
more_responses_version                 internal static fixed bin(17,0)          initial dcl 6-67
set_editor_key_bindings_info           based           structure                level 1 dcl 6-162
set_editor_key_bindings_info_ptr       automatic       pointer                  dcl 6-171
set_editor_key_bindings_info_version_1 internal static char(8)                  initial packed unaligned dcl 6-172
token_characters_info                  based           structure                level 1 dcl 6-97
token_characters_info_ptr              automatic       pointer                  dcl 6-104
token_characters_info_version_1        internal static char(8)                  initial packed unaligned dcl 6-106
video_data_$terminal_iocb              external static pointer                  dcl 62
window_$change_column           000000 constant        entry                    external dcl 5-63
window_$change_line             000000 constant        entry                    external dcl 5-59
window_$clear_region            000000 constant        entry                    external dcl 5-7
window_$clear_to_end_of_line    000000 constant        entry                    external dcl 5-9
window_$clear_to_end_of_window  000000 constant        entry                    external dcl 5-11
window_$create                  000000 constant        entry                    external dcl 5-72
window_$delete_chars            000000 constant        entry                    external dcl 5-15
window_$destroy                 000000 constant        entry                    external dcl 5-74
window_$edit_line               000000 constant        entry                    external dcl 5-76
window_$get_cursor_position     000000 constant        entry                    external dcl 5-17
window_$get_echoed_chars        000000 constant        entry                    external dcl 5-22
window_$get_one_unechoed        000000 constant        entry                    external dcl 5-67
window_$get_one_unechoed_char   000000 constant        entry                    external dcl 5-67
window_$get_unechoed_chars      000000 constant        entry                    external dcl 5-25
window_$insert_text             000000 constant        entry                    external dcl 5-28
window_$overwrite_text          000000 constant        entry                    external dcl 5-29
window_$position_cursor         000000 constant        entry                    external dcl 5-31
window_$position_cursor_rel     000000 constant        entry                    external dcl 5-36
window_$scroll_region           000000 constant        entry                    external dcl 5-42
window_$sync                    000000 constant        entry                    external dcl 5-44
window_$write_raw_text          000000 constant        entry                    external dcl 5-48
window_$write_sync_read         000000 constant        entry                    external dcl 5-53
window_edit_line_info                  based           structure                level 1 unaligned dcl 6-177
window_edit_line_info_ptr              automatic       pointer                  dcl 6-186
window_edit_line_info_version_1        internal static char(8)                  initial packed unaligned dcl 6-183
window_position_info_ptr               automatic       pointer                  dcl 6-37
window_position_info_version           internal static fixed bin(17,0)          initial dcl 6-35
window_position_info_version_1         internal static fixed bin(17,0)          initial dcl 6-35
window_status_info                     based           structure                level 1 dcl 6-45
window_status_info_ptr                 automatic       pointer                  dcl 6-43
window_status_version                  internal static fixed bin(17,0)          initial dcl 6-52
window_status_version_1                internal static fixed bin(17,0)          initial dcl 6-52

NAMES DECLARED BY EXPLICIT CONTEXT.
NEXT                            000754 constant        label                    dcl 131 ref 122
START                           000464 constant        label                    dcl 98 ref 131
dropped                         001352 constant        entry                    internal dcl 226 ref 189
logging_in                      001272 constant        entry                    internal dcl 210 ref 177
logging_out                     001402 constant        entry                    internal dcl 234 ref 195
start_up                        001322 constant        entry                    internal dcl 218 ref 183
tut_cl                          001433 constant        entry                    internal dcl 242 ref 161
tut_log_in_                     000246 constant        entry                    external dcl 13

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      2146        2206    1765        2156
Length      2516    1765        40         273     161           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
tut_log_in_                        4450 external procedure  is an external procedure.  
on unit on line 131                  64 on unit               
logging_in                              internal procedure  shares stack frame of external procedure tut_log_in_.  
start_up                                internal procedure  shares stack frame of external procedure tut_log_in_.  
dropped                                 internal procedure  shares stack frame of external procedure tut_log_in_.  
logging_out                             internal procedure  shares stack frame of external procedure tut_log_in_.  
tut_cl                              142 internal procedure  enables or reverts conditions.  
on unit on line 245                  64 on unit               

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
tut_log_in_              000100 change_origin               tut_log_in_
                         000101 choices                     tut_log_in_
                         000156 init_display                tut_log_in_
                         000157 headers                     tut_log_in_
                         000170 menu_ptr                    tut_log_in_
                         000172 my_area                     tut_log_in_
                         010171 my_menu_format              tut_log_in_
                         010177 my_menu_requirements        tut_log_in_
                         010203 true_window_info            tut_log_in_
                         010210 new_io_height               tut_log_in_
                         010211 seg_name                    tut_log_in_
                         010215 seg_name_1                  tut_log_in_
                         010221 seg_name_2                  tut_log_in_
                         010225 seg_name_3                  tut_log_in_
                         010232 seg_name_4                  tut_log_in_
                         010236 trailers                    tut_log_in_
                         010264 ME_LOG_IN                   tut_log_in_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        call_int_this       return_mac          tra_ext_1           enable_op
ext_entry           int_entry           op_empty_

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
cu_$cl                        iox_$control                  menu_$create                  menu_$display
menu_$get_choice              tut_bottom_                   tut_get_seg_                  tut_quit_
tut_window_                   window_$bell                  window_$clear_window

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
iox_$user_io




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     13 000237        22 000253        27 000254        32 000257        33 000265        34 000273        35 000301
     36 000304        39 000310        68 000314        69 000321        70 000326        71 000333        72 000340
     74 000345        75 000352        77 000364        78 000371        80 000375        81 000377        82 000402
     83 000404        84 000406        85 000410        86 000412        87 000414        89 000416        93 000423
     94 000424        95 000455        97 000460        98 000464       100 000466       101 000520       104 000523
    106 000577       108 000602       109 000641       115 000642       116 000655       118 000660       119 000717
    122 000720       125 000722       126 000724       127 000751       131 000754       136 000773       140 000774
    141 000776       142 001031       146 001053       148 001056       149 001115       151 001116       154 001124
    156 001154       158 001157       159 001160       161 001162       162 001166       164 001171       165 001172
    167 001174       168 001176       170 001177       172 001201       175 001214       177 001217       178 001220
    180 001223       181 001224       183 001226       184 001227       186 001232       187 001233       189 001235
    190 001236       192 001241       193 001242       195 001244       196 001245       198 001250       199 001251
    201 001253       202 001255       204 001256       206 001270       285 001271       210 001272       213 001273
    214 001321       218 001322       221 001323       222 001351       226 001352       229 001353       230 001401
    234 001402       237 001403       238 001431       242 001432       245 001440       246 001455       247 001470
    249 001474       250 001533       252 001534       253 001541       255 001616       257 001622       258 001661
    260 001662       261 001675       263 001701       264 001740       266 001741       268 001752       269 001757
    271 001764


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
