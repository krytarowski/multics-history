	COMPILATION LISTING OF SEGMENT send_as_request_
	Compiled by: Multics PL/I Compiler, Release 29, of July 28, 1986
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 10/28/86  1517.7 mst Tue
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 /* send_as_request_ -- common subroutine interface. */
        7 /* format: style2 */
        8 
        9 /**** Created 1984-12 */
       10 /**** Modified 1985-02-21, BIM -- initialize code, create ev chan. */
       11 /**** Modified 1985-03-18, E. Swenson to return error code if executed
       12*      in the Initializer process. */
       13 
       14 send_as_request_$block:
       15      procedure (Info_ptr, Info_length, Message_id, Reply, Code);
       16 
       17 	declare Info_ptr		 pointer;
       18 	declare Info_length		 fixed bin;
       19 	declare Message_id		 bit (72) aligned;
       20 	declare Reply		 bit (72) aligned;
       21 	declare Code		 fixed bin (35);
       22 
       23 	dcl     system_info_$request_chn
       24 				 entry (bit (36) aligned, fixed bin (71), char (*), char (*));
       25 	dcl     get_group_id_	 entry () returns (char (32));
       26 	dcl     hcs_$wakeup		 entry (bit (36) aligned, fixed bin (71), bit (72) aligned, fixed bin (35));
       27 	dcl     message_segment_$add_file
       28 				 entry (char (*), char (*), ptr, fixed bin (18), bit (72) aligned, fixed bin (35))
       29 				 ;
       30 	dcl     ipc_$create_ev_chn	 entry (fixed bin (71), fixed bin (35));
       31 	dcl     ipc_$delete_ev_chn	 entry (fixed bin (71), fixed bin (35));
       32 	dcl     ipc_$block		 entry (ptr, ptr, fixed bin (35));
       33 
       34 	dcl     block_flag		 bit (1) aligned;
       35 	dcl     code		 fixed bin (35);
       36 	dcl     request_process_id	 bit (36) aligned;
       37 	dcl     request_channel	 fixed bin (71);
       38 	dcl     request_uid		 bit (72) aligned;
       39 	dcl     ms_dir_name		 char (168);
       40 	dcl     ms_entryname	 char (32);
       41 	dcl     msg_ptr		 pointer;
       42 	dcl     msg_length		 fixed bin (18);
       43 	dcl     created_ev_chn	 bit (1) aligned;
  1     1 /* BEGIN INCLUDE FILE ... event_wait_channel.incl.pl1 */
  1     2 
  1     3 /* ipc_$block wait list with one channel
  1     4*
  1     5*   Written 9-May-79 by M. N. Davidoff.
  1     6**/
  1     7 
  1     8      declare 1 event_wait_channel   aligned,
  1     9 	     2 n_channels	      fixed bin initial (1),	/* number of channels */
  1    10 	     2 pad	      bit (36),
  1    11 	     2 channel_id	      (1) fixed bin (71);	/* event channel to wait on */
  1    12 
  1    13 /* END INCLUDE FILE ... event_wait_channel.incl.pl1 */
       44 
  2     1 /* BEGIN INCLUDE FILE event_wait_info.incl.pl1 */
  2     2 
  2     3 /* T. Casey, May 1978 */
  2     4 
  2     5 dcl  event_wait_info_ptr ptr;
  2     6 
  2     7 dcl 1 event_wait_info aligned based (event_wait_info_ptr),	/* argument structure filled in on return from ipc_$block */
  2     8     2 channel_id fixed bin (71),			/* event channel on which wakeup occurred */
  2     9     2 message fixed bin (71),				/* 72 bits of information passed by sender of wakeup */
  2    10     2 sender bit (36),				/* process id of sender */
  2    11     2 origin,
  2    12       3 dev_signal bit (18) unaligned,			/* "1"b if device signal */
  2    13       3 ring fixed bin (17) unaligned,			/* ring from which sent */
  2    14     2 channel_index fixed bin;			/* index of this channel in the event wait list */
  2    15 
  2    16 /* END INCLUDE FILE event_wait_info.incl.pl1 */
       45 
       46 	dcl     1 EWI		 aligned like event_wait_info;
       47 
       48 	dcl     error_table_$action_not_performed
       49 				 fixed bin (35) external;
       50 	dcl     error_table_$unimplemented_version
       51 				 fixed bin (35) ext static;
       52 
       53 	dcl     cleanup		 condition;
       54 
       55 
       56 	block_flag = "1"b;
       57 	goto COMMON;
       58 
       59 send_as_request_$no_block:
       60      entry (Info_ptr, Info_length, Message_id, Code);
       61 
       62 	block_flag = "0"b;
       63 COMMON:
       64 	Code = 0;
       65 
       66 /**** The following code prevents this call from being made in the
       67*      Initializer process.  We do not want to invoke the AS request
       68*      mechanism from within the Initializer process, because it would
       69*      be possible to get into the AS request server recursively which
       70*      doesn't work.  (The event call channel is inhibited while executing
       71*      the handler (as_request_server_) and therefore the server will not
       72*      function recursively). */
       73 
       74 	if get_group_id_ () = "Initializer.SysDaemon.z"
       75 	then do;
       76 		Code = error_table_$action_not_performed;
       77 		return;
       78 	     end;
       79 
       80 	msg_ptr = Info_ptr;
       81 	msg_length = Info_length * 36;
       82 	if msg_ptr -> as_request_header.version ^= as_request_version_1
       83 	then do;
       84 		Code = error_table_$unimplemented_version;
       85 		return;
       86 	     end;
       87 	created_ev_chn = "0"b;
       88 	on cleanup
       89 	     begin;
       90 		if created_ev_chn
       91 		then call ipc_$delete_ev_chn (msg_ptr -> as_request_header.reply_channel, (0));
       92 	     end;
       93 	if block_flag & (msg_ptr -> as_request_header.reply_channel = 0)
       94 	then do;
       95 		created_ev_chn = "1"b;
       96 		call ipc_$create_ev_chn (msg_ptr -> as_request_header.reply_channel, (0));
       97 	     end;
       98 	if test_flag
       99 	then do;
      100 		request_process_id = static_process_id;
      101 		request_channel = static_channel;
      102 		ms_dir_name = static_dir_name;
      103 		ms_entryname = static_entryname;
      104 	     end;
      105 	else call system_info_$request_chn (request_process_id, request_channel, ms_dir_name, ms_entryname);
      106 	call message_segment_$add_file (ms_dir_name, ms_entryname, msg_ptr, msg_length, request_uid, code);
      107 	if code ^= 0
      108 	then do;
      109 		Code = code;
      110 		go to RETURN;
      111 	     end;
      112 	Message_id = request_uid;
      113 	call hcs_$wakeup (request_process_id, request_channel, request_uid, code);
      114 	if code ^= 0
      115 	then do;
      116 		Code = code;
      117 		go to RETURN;
      118 	     end;
      119 
      120 	if msg_ptr -> as_request_header.reply_channel = 0 | ^block_flag
      121 	then return;
      122 
      123 	event_wait_channel.pad = ""b;
      124 	event_wait_channel.channel_id (1) = msg_ptr -> as_request_header.reply_channel;
      125 	call ipc_$block (addr (event_wait_channel), addr (EWI), code);
      126 	if code ^= 0
      127 	then do;
      128 		Code = code;
      129 		go to RETURN;
      130 	     end;
      131 	Reply = unspec (EWI.message);
      132 RETURN:
      133 	if created_ev_chn
      134 	then call ipc_$delete_ev_chn (msg_ptr -> as_request_header.reply_channel, (0));
      135 	return;
      136 
      137 test:
      138      entry (a_pid, a_event, a_dir, a_entryname);
      139 
      140 	declare (a_dir, a_entryname)	 char (*);
      141 	declare a_pid		 bit (36) aligned;
      142 	declare a_event		 fixed bin (71);
      143 
      144 	declare test_flag		 bit (1) aligned internal static init ("0"b);
      145 	declare (
      146 	        static_process_id	 bit (36) aligned,
      147 	        static_channel	 fixed bin (71),
      148 	        static_dir_name	 char (168),
      149 	        static_entryname	 char (32)
      150 	        )			 int static;
      151 
      152 	test_flag = "1"b;
      153 	static_process_id = a_pid;
      154 	static_channel = a_event;
      155 	static_dir_name = a_dir;
      156 	static_entryname = a_entryname;
      157 	return;
      158 
      159 no_test:
      160      entry;
      161 	test_flag = "0"b;
      162 	return;
      163 
  3     1 /* BEGIN INCLUDE FILE ... as_request_header.incl.pl1 */
  3     2 
  3     3 /* DESCRIPTION:
  3     4*   Answering Service request information.
  3     5**/
  3     6 
  3     7 
  3     8 /****^  HISTORY COMMENTS:
  3     9*  1) change(00-01-01,JRandom), approve(), audit(), install():
  3    10*      Written by someone, at sometime.
  3    11*  2) change(84-09-10,Tague), approve(), audit(), install():
  3    12*      R. Michael Tague: Added ASR_BUMP_USER request.
  3    13*  3) change(84-10-04,Margulies), approve(), audit(), install():
  3    14*      BIM: ASR_ADMIN_COMMAND.
  3    15*  4) change(85-01-23,Swenson), approve(), audit(), install():
  3    16*      E. Swenson for ASR_NOTE_PNT_CHANGE.
  3    17*  5) change(85-02-18,Margulies), approve(), audit(), install():
  3    18*      BIM: ASR_DAEMON_COMMAND, ASR_COM_CHANNEL_INFO
  3    19*  6) change(85-12-12,Lippard), approve(85-12-30,MCR7326),
  3    20*     audit(86-10-27,GDixon), install(86-10-28,MR12.0-1200):
  3    21*      Jim Lippard: Added ASR_ABS_COMMAND request.
  3    22*                                                   END HISTORY COMMENTS */
  3    23 
  3    24 
  3    25 /* format: style4 */
  3    26 
  3    27 dcl  as_request_version_1 fixed bin internal static initial (1) options (constant);
  3    28 
  3    29 dcl  (
  3    30      ASR_FIRST_TYPE initial (1),
  3    31      ASR_DIAL_SERVER initial (1),
  3    32      ASR_DIAL_OUT initial (2),
  3    33      ASR_FPE_CAUSES_LOGOUT initial (3),
  3    34      ASR_FPE_CAUSES_NEW_PROC initial (4),
  3    35      ASR_PROC_TERM_NOTIFY initial (5),
  3    36      ASR_BUMP_USER initial (6),
  3    37      ASR_ADMIN_COMMAND initial (7),
  3    38      ASR_NOTE_PNT_CHANGE initial (8),
  3    39      ASR_DAEMON_COMMAND initial (9),
  3    40      ASR_COM_CHANNEL_INFO initial (10),
  3    41      ASR_ABS_COMMAND initial (11),
  3    42      ASR_LAST_TYPE initial (11)
  3    43      ) fixed bin internal static options (constant);
  3    44 
  3    45 dcl  ASR_DEFER_IN_ADMIN_MODE (1:11) bit (1) int static options (constant)
  3    46      init ((6) (1) "0"b, "1"b, (4) (1) "0"b);
  3    47 
  3    48 dcl  ASR_REQUEST_NAMES (1:11) int static options (constant)
  3    49 	char (40) init (
  3    50 	"Dial request",
  3    51 	"Dial out request",
  3    52 	"Logout on fatal process error",
  3    53 	"New process on fatal process error",
  3    54 	"Monitor process terminations",
  3    55 	"Bump user",
  3    56 	"Execute admin command",
  3    57 	"Note PNT change",
  3    58 	"Daemon command",
  3    59 	"Communications channel info",
  3    60 	"Absentee command");
  3    61 
  3    62 dcl  1 as_request_header based aligned,
  3    63        2 version fixed bin,				/* version number */
  3    64        2 type fixed bin,				/* what to do */
  3    65        2 reply_channel fixed bin (71);			/* who to tell */
  3    66 
  3    67 
  3    68 /* END INCLUDE FILE ... as_request_header.incl.pl1 */
      164 
      165      end send_as_request_$block;
      166 
      167 
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/28/86  1024.7  send_as_request_.pl1              >special_ldd>install>MR12.0-1200>send_as_request_.pl1
44           1    06/29/79  1728.0  event_wait_channel.incl.pl1       >ldd>include>event_wait_channel.incl.pl1
45           2    06/29/79  1727.8  event_wait_info.incl.pl1          >ldd>include>event_wait_info.incl.pl1
164          3    10/28/86  0942.5  as_request_header.incl.pl1        >special_ldd>install>MR12.0-1200>as_request_header.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
Code                                   parameter       fixed bin(35,0)          dcl 21 set ref 14 59 63* 76* 84* 109* 116* 128*
EWI                             000202 automatic       structure                level 1 dcl 46 set ref 125 125
Info_length                            parameter       fixed bin(17,0)          dcl 18 ref 14 59 81
Info_ptr                               parameter       pointer                  dcl 17 ref 14 59 80
Message_id                             parameter       bit(72)                  dcl 19 set ref 14 59 112*
Reply                                  parameter       bit(72)                  dcl 20 set ref 14 131*
a_dir                                  parameter       char                     unaligned dcl 140 ref 137 155
a_entryname                            parameter       char                     unaligned dcl 140 ref 137 156
a_event                                parameter       fixed bin(71,0)          dcl 142 ref 137 154
a_pid                                  parameter       bit(36)                  dcl 141 ref 137 153
as_request_header                      based           structure                level 1 dcl 3-62
as_request_version_1                   constant        fixed bin(17,0)          initial dcl 3-27 ref 82
block_flag                      000100 automatic       bit(1)                   dcl 34 set ref 56* 62* 93 120
channel_id                2     000176 automatic       fixed bin(71,0)          array level 2 dcl 1-8 set ref 124*
cleanup                         000212 stack reference condition                dcl 53 ref 88
code                            000101 automatic       fixed bin(35,0)          dcl 35 set ref 106* 107 109 113* 114 116 125* 126
                                                                                  128
created_ev_chn                  000175 automatic       bit(1)                   dcl 43 set ref 87* 90 95* 132
error_table_$action_not_performed
                                000114 external static fixed bin(35,0)          dcl 48 ref 76
error_table_$unimplemented_version
                                000116 external static fixed bin(35,0)          dcl 50 ref 84
event_wait_channel              000176 automatic       structure                level 1 dcl 1-8 set ref 125 125
event_wait_info                        based           structure                level 1 dcl 2-7
get_group_id_                   000100 constant        entry                    external dcl 25 ref 74
hcs_$wakeup                     000102 constant        entry                    external dcl 26 ref 113
ipc_$block                      000112 constant        entry                    external dcl 32 ref 125
ipc_$create_ev_chn              000106 constant        entry                    external dcl 30 ref 96
ipc_$delete_ev_chn              000110 constant        entry                    external dcl 31 ref 90 132
message                   2     000202 automatic       fixed bin(71,0)          level 2 dcl 46 set ref 131
message_segment_$add_file       000104 constant        entry                    external dcl 27 ref 106
ms_dir_name                     000110 automatic       char(168)                unaligned dcl 39 set ref 102* 105* 106*
ms_entryname                    000162 automatic       char(32)                 unaligned dcl 40 set ref 103* 105* 106*
msg_length                      000174 automatic       fixed bin(18,0)          dcl 42 set ref 81* 106*
msg_ptr                         000172 automatic       pointer                  dcl 41 set ref 80* 82 90 93 96 106* 120 124 132
n_channels                      000176 automatic       fixed bin(17,0)          initial level 2 dcl 1-8 set ref 1-8*
pad                       1     000176 automatic       bit(36)                  level 2 dcl 1-8 set ref 123*
reply_channel             2            based           fixed bin(71,0)          level 2 dcl 3-62 set ref 90* 93 96* 120 124 132*
request_channel                 000104 automatic       fixed bin(71,0)          dcl 37 set ref 101* 105* 113*
request_process_id              000102 automatic       bit(36)                  dcl 36 set ref 100* 105* 113*
request_uid                     000106 automatic       bit(72)                  dcl 38 set ref 106* 112 113*
static_channel                  000012 internal static fixed bin(71,0)          dcl 145 set ref 101 154*
static_dir_name                 000014 internal static char(168)                unaligned dcl 145 set ref 102 155*
static_entryname                000066 internal static char(32)                 unaligned dcl 145 set ref 103 156*
static_process_id               000011 internal static bit(36)                  dcl 145 set ref 100 153*
system_info_$request_chn        000076 constant        entry                    external dcl 23 ref 105
test_flag                       000010 internal static bit(1)                   initial dcl 144 set ref 98 152* 161*
version                                based           fixed bin(17,0)          level 2 dcl 3-62 ref 82

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ASR_ABS_COMMAND                        internal static fixed bin(17,0)          initial dcl 3-29
ASR_ADMIN_COMMAND                      internal static fixed bin(17,0)          initial dcl 3-29
ASR_BUMP_USER                          internal static fixed bin(17,0)          initial dcl 3-29
ASR_COM_CHANNEL_INFO                   internal static fixed bin(17,0)          initial dcl 3-29
ASR_DAEMON_COMMAND                     internal static fixed bin(17,0)          initial dcl 3-29
ASR_DEFER_IN_ADMIN_MODE                internal static bit(1)                   initial array unaligned dcl 3-45
ASR_DIAL_OUT                           internal static fixed bin(17,0)          initial dcl 3-29
ASR_DIAL_SERVER                        internal static fixed bin(17,0)          initial dcl 3-29
ASR_FIRST_TYPE                         internal static fixed bin(17,0)          initial dcl 3-29
ASR_FPE_CAUSES_LOGOUT                  internal static fixed bin(17,0)          initial dcl 3-29
ASR_FPE_CAUSES_NEW_PROC                internal static fixed bin(17,0)          initial dcl 3-29
ASR_LAST_TYPE                          internal static fixed bin(17,0)          initial dcl 3-29
ASR_NOTE_PNT_CHANGE                    internal static fixed bin(17,0)          initial dcl 3-29
ASR_PROC_TERM_NOTIFY                   internal static fixed bin(17,0)          initial dcl 3-29
ASR_REQUEST_NAMES                      internal static char(40)                 initial array unaligned dcl 3-48
event_wait_info_ptr                    automatic       pointer                  dcl 2-5

NAMES DECLARED BY EXPLICIT CONTEXT.
COMMON                          000067 constant        label                    dcl 63 ref 57
RETURN                          000372 constant        label                    dcl 132 ref 110 117 129
no_test                         000462 constant        entry                    external dcl 159
send_as_request_$block          000034 constant        entry                    external dcl 14
send_as_request_$no_block       000055 constant        entry                    external dcl 59
test                            000415 constant        entry                    external dcl 137

NAMES DECLARED BY CONTEXT OR IMPLICATION.
addr                                                   builtin function         ref 125 125 125 125
unspec                                                 builtin function         ref 131

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       710        1030     473         720
Length      1310     473       120         244     215          66

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
send_as_request_$block              210 external procedure  is an external procedure.  
on unit on line 88                   72 on unit               

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 test_flag                   send_as_request_$block
000011 static_process_id           send_as_request_$block
000012 static_channel              send_as_request_$block
000014 static_dir_name             send_as_request_$block
000066 static_entryname            send_as_request_$block

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
send_as_request_$block   000100 block_flag                  send_as_request_$block
                         000101 code                        send_as_request_$block
                         000102 request_process_id          send_as_request_$block
                         000104 request_channel             send_as_request_$block
                         000106 request_uid                 send_as_request_$block
                         000110 ms_dir_name                 send_as_request_$block
                         000162 ms_entryname                send_as_request_$block
                         000172 msg_ptr                     send_as_request_$block
                         000174 msg_length                  send_as_request_$block
                         000175 created_ev_chn              send_as_request_$block
                         000176 event_wait_channel          send_as_request_$block
                         000202 EWI                         send_as_request_$block

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return_mac          enable_op           ext_entry           ext_entry_desc
int_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
get_group_id_                 hcs_$wakeup                   ipc_$block                    ipc_$create_ev_chn
ipc_$delete_ev_chn            message_segment_$add_file     system_info_$request_chn

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$action_not_performed                           error_table_$unimplemented_version




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
 1    8 000023        14 000027        56 000045        57 000047        59 000050        62 000066        63 000067
     74 000070        76 000103        77 000106        80 000107        81 000113        82 000116        84 000121
     85 000124        87 000125        88 000126        90 000142        92 000157        93 000160        95 000165
     96 000167        98 000201       100 000204       101 000206       102 000210       103 000213       104 000216
    105 000217       106 000243       107 000300       109 000302       110 000303       112 000304       113 000311
    114 000326       116 000330       117 000331       120 000332       123 000337       124 000340       125 000342
    126 000361       128 000363       129 000364       131 000365       132 000372       135 000407       137 000410
    152 000436       153 000441       154 000444       155 000446       156 000453       157 000460       159 000461
    161 000470       162 000472


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
