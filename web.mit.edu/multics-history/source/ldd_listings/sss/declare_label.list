	COMPILATION LISTING OF SEGMENT declare_label
	Compiled by: Multics PL/I Compiler, Release 32c, of June 16, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 07/31/89  1410.9 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 declare_label:	proc(cblock,cstatement,clabel,dcltype);
       12 
       13 	/* same in VERSION 1 and VERSION 2 */
       14 
       15 
       16 dcl	(cblock,cstatement,clabel) ptr,
       17 	(d,q,t) ptr,
       18 
       19 	(n,value) fixed bin(15),
       20 
       21 	array bit(1) aligned,
       22 	dcltype bit(3) aligned;
       23 
       24 dcl	(max,min,null) builtin;
       25 
  1     1 /****^  *********************************************************
  1     2*        *                                                       *
  1     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  1     4*        *                                                       *
  1     5*        ********************************************************* */
  1     6 
  1     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  1     8 
  1     9 
  1    10 /****^  HISTORY COMMENTS:
  1    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  1    12*     install(89-07-31,MR12.3-1066):	
  1    13*     Removed the obsolete parameter source_line from the dcl of error_().
  1    14*                                                   END HISTORY COMMENTS */
  1    15 
  1    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  1    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  1    18* */
  1    19 
  1    20 declare	adjust_count	entry(pointer);
  1    21 			/* parameter 1:	(input)	any node pointer		*/
  1    22 
  1    23 declare	bindec		entry(fixed bin(31)) reducible
  1    24 			returns(character(12) aligned);
  1    25 			/* parameter 1:	(input)	bin value			*/
  1    26 			/* return:	(output)	character value with blanks	*/
  1    27 
  1    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  1    29 			returns(character(12) aligned varying);
  1    30 			/* parameter 1:	(input)	binary value		*/
  1    31 			/* return:	(output)	char value without blanks	*/
  1    32 
  1    33 declare	binoct		entry(fixed bin(31)) reducible
  1    34 			returns(char(12) aligned);
  1    35 			/* parameter 1:	(input)	binary value		*/
  1    36 			/* return:	(output)	char value with blanks	*/
  1    37 
  1    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  1    39 			returns(char(12) aligned);
  1    40 			/* parameter 1:	(input)	binary value		*/
  1    41 			/* return:	(output)	right-aligned char value	*/
  1    42 
  1    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  1    44 			returns(char(12) varying aligned);
  1    45 			/* parameter 1:	(input)	binary value		*/
  1    46 			/* returns:	(output)	char value without blanks	*/
  1    47 
  1    48 declare	compare_expression	entry(pointer,pointer) reducible
  1    49 			returns(bit(1) aligned);
  1    50 			/* parameter 1:	(input)	any node pointer		*/
  1    51 			/* parameter 2:	(input)	any node pointer		*/
  1    52 			/* return:	(output)	compare bit		*/
  1    53 
  1    54 declare	constant_length	entry (pointer, fixed bin (71))
  1    55 			returns (bit (1) aligned);
  1    56 			/* parameter 1:	(input)	reference node pointer	*/
  1    57 			/* parameter 2:	(input)	value of constant length	*/
  1    58 			/* return:	(output)	"1"b if constant length	*/
  1    59 
  1    60 declare	convert		entry(pointer,bit(36) aligned)
  1    61 			returns(pointer);
  1    62 			/* parameter 1:	(input)	any node pointer		*/
  1    63 			/* parameter 2:	(input)	target type		*/
  1    64 			/* return:	(output)	target value tree pointer	*/
  1    65 
  1    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  1    67 			returns(pointer);
  1    68 			/* parameter 1:	(input)	any node pointer		*/
  1    69 			/* parameter 2:	(input)	target type		*/
  1    70 			/* return:	(output)	target value tree pointer	*/
  1    71 
  1    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  1    73 			returns(pointer);
  1    74 			/* parameter 1:	(input)	any node pointer		*/
  1    75 			/* parameter 2:	(input)	target type		*/
  1    76 			/* return:	(output)	target value tree pointer	*/
  1    77 
  1    78 declare	convert$validate	entry(pointer,pointer);
  1    79 			/* parameter 1:	(input)	source value tree pointer	*/
  1    80 			/* parameter 2:	(input)	target reference node pointer	*/
  1    81 
  1    82 declare	convert$to_target_fb entry(pointer,pointer)
  1    83 			returns(pointer);
  1    84 			/* parameter 1:	(input)	source value tree pointer	*/
  1    85 			/* parameter 2:	(input)	target reference node pointer	*/
  1    86 			/* return:	(output)	target value tree pointer	*/
  1    87 
  1    88 declare	convert$to_target	entry(pointer,pointer)
  1    89 			returns(pointer);
  1    90 			/* parameter 1:	(input)	source value tree pointer	*/
  1    91 			/* parameter 2:	(input)	target reference node pointer	*/
  1    92 			/* return:	(output)	target value tree pointer	*/
  1    93 
  1    94 declare	copy_expression	entry(pointer unaligned)
  1    95 			returns(pointer);
  1    96 			/* parameter 1:	(input)	any node pointer		*/
  1    97 			/* return:	(output)	any node pointer		*/
  1    98 
  1    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  1   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  1   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  1   102 
  1   103 declare	copy_unique_expression entry(pointer)
  1   104 			returns(pointer);
  1   105 			/* parameter 1:	(input)	any node pointer		*/
  1   106 			/* return:	(output)	any node pointer		*/
  1   107 
  1   108 declare	create_array	entry()
  1   109 			returns(pointer);
  1   110 			/* return:	(output)	array node pointer		*/
  1   111 
  1   112 declare	create_block	entry(bit(9) aligned,pointer)
  1   113 			returns(pointer);
  1   114 			/* parameter 1:	(input)	block type		*/
  1   115 			/* parameter 2:	(input)	father block node pointer	*/
  1   116 			/* return:	(output)	block node pointer		*/
  1   117 
  1   118 declare	create_bound	entry()
  1   119 			returns(pointer);
  1   120 			/* return:	(output)	bound node pointer		*/
  1   121 
  1   122 declare	create_context	entry(pointer,pointer)
  1   123 			returns(pointer);
  1   124 			/* parameter 1:	(input)	block node pointer		*/
  1   125 			/* parameter 2:	(input)	token pointer		*/
  1   126 			/* return:	(output)	context node pointer	*/
  1   127 
  1   128 declare	create_cross_reference entry()
  1   129 			returns(pointer);
  1   130 			/* return:	(output)	cross reference node pointer	*/
  1   131 
  1   132 declare	create_default	entry
  1   133 			returns(pointer);
  1   134 			/* return:	(output)	default node pointer	*/
  1   135 
  1   136 declare	create_identifier	entry()
  1   137 			returns(pointer);
  1   138 			/* return:	(output)	token node pointer		*/
  1   139 
  1   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  1   141 			returns(pointer);
  1   142 			/* parameter 1:	(input)	block node pointer		*/
  1   143 			/* parameter 2:	(input)	token node pointer		*/
  1   144 			/* parameter 3:	(input)	declare type		*/
  1   145 			/* return:	(output)	label node pointer		*/
  1   146 
  1   147 declare	create_list	entry(fixed bin(15))
  1   148 			returns(pointer);
  1   149 			/* parameter 1:	(input)	number of list elements	*/
  1   150 			/* return:	(output)	list node pointer		*/
  1   151 
  1   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  1   153 			returns(pointer);
  1   154 			/* parameter 1:	(input)	operator type		*/
  1   155 			/* parameter 2:	(input)	number of operands		*/
  1   156 			/* return:	(output)	operator node pointer	*/
  1   157 
  1   158 declare	create_reference	entry(pointer)
  1   159 			returns(pointer);
  1   160 			/* parameter 1:	(input)	symbol node pointer		*/
  1   161 			/* return:	(output)	reference node pointer	*/
  1   162 
  1   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  1   164 			returns(pointer);
  1   165 			/* parameter 1:	(input)	statement type		*/
  1   166 			/* parameter 2:	(input)	block node pointer		*/
  1   167 			/* parameter 3:	(input)	label node pointer		*/
  1   168 			/* parameter 4:	(input)	conditions		*/
  1   169 			/* return:	(output)	statement node pointer	*/
  1   170 
  1   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  1   172 			returns(pointer);
  1   173 			/* parameter 1:	(input)	statement type		*/
  1   174 			/* parameter 2:	(input)	block node pointer		*/
  1   175 			/* parameter 3:	(input)	label node pointer		*/
  1   176 			/* parameter 4:	(input)	conditions		*/
  1   177 			/* return:	(output)	statement node pointer	*/
  1   178 
  1   179 declare	create_storage	entry(fixed bin(15))
  1   180 			returns(pointer);
  1   181 			/* parameter 1:	(input)	number of words		*/
  1   182 			/* return:	(output)	storage block pointer	*/
  1   183 
  1   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  1   185 			returns(pointer);
  1   186 			/* parameter 1:	(input)	block node pointer		*/
  1   187 			/* parameter 2:	(input)	token node pointer		*/
  1   188 			/* parameter 3:	(input)	declare type		*/
  1   189 			/* return:	(output)	symbol node pointer		*/
  1   190 
  1   191 declare	create_token	entry (character (*), bit (9) aligned)
  1   192 			returns (ptr);
  1   193 			/* parameter 1:	(input)	token string		*/
  1   194 			/* parameter 2:	(input)	token type		*/
  1   195 			/* return:	(output)	token node ptr		*/
  1   196 
  1   197 declare	create_token$init_hash_table entry ();
  1   198 
  1   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  1   200 			returns (ptr);
  1   201 			/* parameter 1:	(input)	token string		*/
  1   202 			/* parameter 2:	(input)	token type		*/
  1   203 			/* parameter 3:	(input)	protected flag		*/
  1   204 			/* return:	(output)	token node ptr		*/
  1   205 
  1   206 declare	decbin		entry(character(*) aligned) reducible
  1   207 			returns(fixed bin(31));
  1   208 			/* parameter 1:	(input)	decimal character string	*/
  1   209 			/* return:	(output)	binary value		*/
  1   210 
  1   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  1   212 			returns(pointer);
  1   213 			/* parameter 1:	(input)	value			*/
  1   214 			/* parameter 2:	(input)	type			*/
  1   215 			/* parameter 3:	(input)	size			*/
  1   216 			/* parameter 4:	(input)	scale			*/
  1   217 			/* return:	(output)	reference node pointer	*/
  1   218 
  1   219 declare	declare_constant$bit entry(bit(*) aligned)
  1   220 			returns(pointer);
  1   221 			/* parameter 1:	(input)	bit			*/
  1   222 			/* return:	(output)	reference node pointer	*/
  1   223 
  1   224 declare	declare_constant$char entry(character(*) aligned)
  1   225 			returns(pointer);
  1   226 			/* parameter 1:	(input)	character			*/
  1   227 			/* return:	(output)	reference node pointer	*/
  1   228 
  1   229 declare	declare_constant$desc entry(bit(*) aligned)
  1   230 			returns(pointer);
  1   231 			/* parameter 1:	(input)	descriptor bit value	*/
  1   232 			/* return:	(output)	reference node pointer	*/
  1   233 
  1   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  1   235 			returns(pointer);
  1   236 			/* parameter 1:	(input)	integer			*/
  1   237 			/* return:	(output)	reference node pointer	*/
  1   238 
  1   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  1   240 			returns(pointer);
  1   241 			/* parameter 1:	(input)	block node pointer		*/
  1   242 			/* parameter 2:	(input)	statement node pointer	*/
  1   243 			/* parameter 3:	(input)	symbol node pointer		*/
  1   244 			/* parameter 4:	(input)	loc pointer		*/
  1   245 			/* parameter 5:	(input)	array descriptor bit
  1   246*						cross_section bit	*/
  1   247 			/* return:	(output)	reference node pointer	*/
  1   248 
  1   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  1   250 			returns(pointer);
  1   251 			/* parameter 1:	(input)	block node pointer	*/
  1   252 			/* parameter 2:	(input)	statement node pointer 	*/
  1   253 			/* parameter 3:	(input)	symbol node pointer	*/
  1   254 			/* parameter 4:	(input)	loc pointer	*/
  1   255 			/* parameter 5:	(input)	array descriptor bit
  1   256*						cross_section bit	*/
  1   257 			/* return:	(output)	reference node pointer	*/
  1   258 
  1   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  1   260 			returns(pointer);
  1   261 			/* parameter 1:	(input)	block node pointer		*/
  1   262 			/* parameter 2:	(input)	statement node pointer	*/
  1   263 			/* parameter 3:	(input)	symbol node pointer		*/
  1   264 			/* parameter 4:	(input)	loc pointer		*/
  1   265 			/* parameter 5:	(input)	array descriptor bit
  1   266*						cross_section bit	*/
  1   267 			/* return:	(output)	reference node pointer	*/
  1   268 
  1   269 declare	declare_integer	entry(pointer)
  1   270 			returns(pointer);
  1   271 			/* parameter 1:	(input)	block node pointer		*/
  1   272 			/* return:	(output)	reference node pointer 	*/
  1   273 
  1   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  1   275 			/* parameter 1:	(input)	picture string		*/
  1   276 			/* parameter 2:	(input)	symbol node pointer		*/
  1   277 			/* parameter 3:	(output)	error code, if any		*/
  1   278 
  1   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  1   280 			returns(pointer);
  1   281 			/* parameter 1:	(input)	picture string		*/
  1   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  1   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  1   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  1   285 			/* return:	(output)	reference node pointer	*/
  1   286 
  1   287 declare	declare_pointer	entry(pointer)
  1   288 			returns(pointer);
  1   289 			/* parameter 1:	(input)	block node pointer		*/
  1   290 			/* return:	(output)	reference node pointer	*/
  1   291 
  1   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  1   293 			returns(pointer);
  1   294 			/* parameter 1:	(input)	type			*/
  1   295 			/* parameter 2:	(input)	precision			*/
  1   296 			/* parameter 3:	(input)	scale			*/
  1   297 			/* parameter 4:	(input)	length			*/
  1   298 			/* return:	(output)	reference node pointer	*/
  1   299 
  1   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  1   301 			returns(char(120) varying);
  1   302 			/* parameter 1:	(input)	node pointer		*/
  1   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  1   304 			/* return:	(output)	source line id		*/
  1   305 
  1   306 declare	decode_source_id	entry(
  2     1 			1 structure unaligned,
  2     2 			  2 /* file_number */	bit(8),
  2     3 			  2 /* line_number */	bit(14),
  2     4 			  2 /* stmt_number */	bit(5),
  1   307 
  1   308 			bit(1) aligned)
  1   309 			returns(char(120) varying);
  1   310 			/* parameter 1:	(input)	source id			*/
  1   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  1   312 			/* return:	(output)	source line id		*/
  1   313 
  1   314 declare	error		entry(fixed bin(15),pointer,pointer);
  1   315 			/* parameter 1:	(input)	error number		*/
  1   316 			/* parameter 2:	(input)	statement node pointer or null*/
  1   317 			/* parameter 3:	(input)	token node pointer 		*/
  1   318 
  1   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  1   320 			/* parameter 1:	(input)	error number		*/
  1   321 			/* parameter 2:	(input)	statement node pointer or null*/
  1   322 			/* parameter 3:	(input)	token node pointer 		*/
  1   323 
  1   324 declare	error_		entry(fixed bin(15),
  3     1 			1 structure unaligned,
  3     2 			  2 /* file_number */	bit(8),
  3     3 			  2 /* line_number */	bit(14),
  3     4 			  2 /* stmt_number */	bit(5),
  1   325 
  1   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  1   327 			/* parameter 1:	(input)	error number		*/
  1   328 			/* parameter 2:	(input)	statement id		*/
  1   329 			/* parameter 3:	(input)	any node pointer		*/
  1   330 			/* parameter 4:	(input)	source segment		*/
  1   331 			/* parameter 5:	(input)	source starting character	*/
  1   332 			/* parameter 6:	(input)	source length		*/
  1   333 
  1   334 declare	error_$no_text	entry(fixed bin(15),
  4     1 			1 structure unaligned,
  4     2 			  2 /* file_number */	bit(8),
  4     3 			  2 /* line_number */	bit(14),
  4     4 			  2 /* stmt_number */	bit(5),
  1   335 
  1   336 			pointer);
  1   337 			/* parameter 1:	(input)	error number		*/
  1   338 			/* parameter 2:	(input)	statement id		*/
  1   339 			/* parameter 3:	(input)	any node pointer		*/
  1   340 
  1   341 declare	error_$initialize_error entry();
  1   342 
  1   343 declare	error_$finish	entry();
  1   344 
  1   345 declare	free_node		entry(pointer);
  1   346 			/* parameter 1:	any node pointer			*/
  1   347 
  1   348 declare	get_array_size	entry(pointer,fixed bin(3));
  1   349 			/* parameter 1:	(input)	symbol node pointer		*/
  1   350 			/* parameter 2:	(input)	units			*/
  1   351 
  1   352 declare	get_size		entry(pointer);
  1   353 			/* parameter 1:	(input)	symbol node pointer		*/
  1   354 
  1   355 declare	merge_attributes	external entry(pointer,pointer)
  1   356 			returns(bit(1) aligned);
  1   357 			/* parameter 1:	(input)	target symbol node pointer */
  1   358 			/* parameter 2:	(input)	source symbol node pointer */
  1   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  1   360 
  1   361 declare	optimizer		entry(pointer);
  1   362 			/* parameter 1:	(input)	root pointer		*/
  1   363 
  1   364 declare	parse_error	entry(fixed bin(15),pointer);
  1   365 			/* parameter 1:	(input)	error number		*/
  1   366 			/* parameter 2:	(input)	any node pointer		*/
  1   367 
  1   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  1   369 			/* parameter 1:	(input)	error number		*/
  1   370 			/* parameter 2:	(input)	any node pointer		*/
  1   371 
  1   372 declare	pl1_error_print$write_out
  1   373 			entry(fixed bin(15),
  5     1 			1 structure unaligned,
  5     2 			  2 /* file_number */	bit(8),
  5     3 			  2 /* line_number */	bit(14),
  5     4 			  2 /* stmt_number */	bit(5),
  1   374 
  1   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  1   376 			/* parameter 1:	(input)	error number		*/
  1   377 			/* parameter 2:	(input)	statement identification	*/
  1   378 			/* parameter 3:	(input)	any node pointer		*/
  1   379 			/* parameter 4:	(input)	source segment		*/
  1   380 			/* parameter 5:	(input)	source character index	*/
  1   381 			/* parameter 6:	(input)	source length		*/
  1   382 			/* parameter 7:	(input)	source line		*/
  1   383 
  1   384 declare	pl1_error_print$listing_segment
  1   385 			entry(fixed bin(15),
  6     1 			1 structure unaligned,
  6     2 			  2 /* file_number */	bit(8),
  6     3 			  2 /* line_number */	bit(14),
  6     4 			  2 /* stmt_number */	bit(5),
  1   386 
  1   387 			pointer);
  1   388 			/* parameter 1:	(input)	error number		*/
  1   389 			/* parameter 2:	(input)	statement identification	*/
  1   390 			/* parameter 3:	(input)	token node pointer		*/
  1   391 
  1   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  1   393 			/* parameter 1:	(input)	string			*/
  1   394 
  1   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  1   396 			/* parameter 1:	(input)	string			*/
  1   397 
  1   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  1   399 			/* parameter 1:	(input)	string			*/
  1   400 			/* parameter 2:	(input)	string length or 0		*/
  1   401 
  1   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  1   403 			/* parameter 1:	(input)	string			*/
  1   404 			/* parameter 2:	(input)	string length or 0		*/
  1   405 
  1   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  1   407 			/* parameter 1:	(input)	string pointer		*/
  1   408 			/* parameter 2:	(input)	string size		*/
  1   409 
  1   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  1   411 			/* parameter 1:	(input)	string pointer		*/
  1   412 			/* parameter 2:	(input)	string length or 0		*/
  1   413 
  1   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  1   415 			/* parameter 1:	(input)	string			*/
  1   416 			/* parameter 2:	(input)	length			*/
  1   417 
  1   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  1   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  1   420 			/* parameter 2:	(input)	line number		*/
  1   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  1   422 			/* parameter 4:	(input)	number of chars to copy	*/
  1   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  1   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  1   425 
  1   426 declare	refer_extent	entry(pointer,pointer);
  1   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  1   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  1   429 
  1   430 declare	reserve$clear	entry()
  1   431 			returns(pointer);
  1   432 			/* return:	(output)	pointer			*/
  1   433 
  1   434 declare	reserve$declare_lib	entry(fixed bin(15))
  1   435 			returns(pointer);
  1   436 			/* parameter 1:	(input)	builtin function number	*/
  1   437 			/* return:	(output)	pointer			*/
  1   438 
  1   439 declare	reserve$read_lib	entry(fixed bin(15))
  1   440 			returns(pointer);
  1   441 			/* parameter 1:	(input)	builtin function number	*/
  1   442 			/* return:	(output)	pointer			*/
  1   443 
  1   444 declare	semantic_translator	entry();
  1   445 
  1   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  1   447 			/* parameter 1:	(input)	error number		*/
  1   448 			/* parameter 2:	(input)	any node pointer		*/
  1   449 
  1   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  1   451 			/* parameter 1:	(input)	error number		*/
  1   452 			/* parameter 2:	(input)	any node pointer		*/
  1   453 
  1   454 declare	share_expression	entry(ptr)
  1   455 			returns(ptr);
  1   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  1   457 			/* return:	(output)	tree pointer or null	*/
  1   458 
  1   459 declare	token_to_binary	entry(ptr) reducible
  1   460 			returns(fixed bin(31));
  1   461 			/* parameter 1:	(input)	token node pointer		*/
  1   462 			/* return:	(output)	converted binary value	*/
  1   463 
  1   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
       26 
  7     1 /* BEGIN INCLUDE FILE ... block.incl.pl1 */
  7     2 /* Modified 22 Ocober 1980 by M. N. Davidoff to increase max block.number to 511 */
  7     3 /* format: style3,idind30 */
  7     4 
  7     5 declare	1 block			aligned based,
  7     6 	  2 node_type		bit (9) unaligned,
  7     7 	  2 source_id		structure unaligned,
  7     8 	    3 file_number		bit (8),
  7     9 	    3 line_number		bit (14),
  7    10 	    3 statement_number	bit (5),
  7    11 	  2 father		ptr unaligned,
  7    12 	  2 brother		ptr unaligned,
  7    13 	  2 son			ptr unaligned,
  7    14 	  2 declaration		ptr unaligned,
  7    15 	  2 end_declaration		ptr unaligned,
  7    16 	  2 default		ptr unaligned,
  7    17 	  2 end_default		ptr unaligned,
  7    18 	  2 context		ptr unaligned,
  7    19 	  2 prologue		ptr unaligned,
  7    20 	  2 end_prologue		ptr unaligned,
  7    21 	  2 main			ptr unaligned,
  7    22 	  2 end_main		ptr unaligned,
  7    23 	  2 return_values		ptr unaligned,
  7    24 	  2 return_count		ptr unaligned,
  7    25 	  2 plio_ps		ptr unaligned,
  7    26 	  2 plio_fa		ptr unaligned,
  7    27 	  2 plio_ffsb		ptr unaligned,
  7    28 	  2 plio_ssl		ptr unaligned,
  7    29 	  2 plio_fab2		ptr unaligned,
  7    30 	  2 block_type		bit (9) unaligned,
  7    31 	  2 prefix		bit (12) unaligned,
  7    32 	  2 like_attribute		bit (1) unaligned,
  7    33 	  2 no_stack		bit (1) unaligned,
  7    34 	  2 get_data		bit (1) unaligned,
  7    35 	  2 flush_at_call		bit (1) unaligned,
  7    36 	  2 processed		bit (1) unaligned,
  7    37 	  2 text_displayed		bit (1) unaligned,
  7    38 	  2 number		fixed bin (9) unsigned unaligned,
  7    39 	  2 free_temps		dimension (3) ptr,	/* these fields are used by the code generator */
  7    40 	  2 temp_list		ptr,
  7    41 	  2 entry_list		ptr,
  7    42 	  2 o_and_s		ptr,
  7    43 	  2 why_nonquick		aligned,
  7    44 	    3 auto_adjustable_storage bit (1) unaligned,
  7    45 	    3 returns_star_extents	bit (1) unaligned,
  7    46 	    3 stack_extended_by_args	bit (1) unaligned,
  7    47 	    3 invoked_by_format	bit (1) unaligned,
  7    48 	    3 format_statement	bit (1) unaligned,
  7    49 	    3 io_statements		bit (1) unaligned,
  7    50 	    3 assigned_to_entry_var	bit (1) unaligned,
  7    51 	    3 condition_statements	bit (1) unaligned,
  7    52 	    3 no_owner		bit (1) unaligned,
  7    53 	    3 recursive_call	bit (1) unaligned,
  7    54 	    3 options_non_quick	bit (1) unaligned,
  7    55 	    3 options_variable	bit (1) unaligned,
  7    56 	    3 never_referenced	bit (1) unaligned,
  7    57 	    3 pad_nonquick		bit (5) unaligned,
  7    58 	  2 prologue_flag		bit (1) unaligned,
  7    59 	  2 options_main		bit (1) unaligned,
  7    60 	  2 pad			bit (16) unaligned,
  7    61 	  2 number_of_entries	fixed bin (17),
  7    62 	  2 level			fixed bin (17),
  7    63 	  2 last_auto_loc		fixed bin (17),
  7    64 	  2 symbol_block		fixed bin (17),
  7    65 	  2 entry_info		fixed bin (18),
  7    66 	  2 enter			structure unaligned,
  7    67 	    3 start		fixed bin (17),
  7    68 	    3 end			fixed bin (17),
  7    69 	  2 leave			structure unaligned,
  7    70 	    3 start		fixed bin (17),
  7    71 	    3 end			fixed bin (17),
  7    72 	  2 owner			ptr;
  7    73 
  7    74 declare	max_block_number		fixed bin internal static options (constant) initial (511);
  7    75 
  7    76 /* END INCLUDE FILE ... block.incl.pl1 */
       27 
  8     1 dcl	1 label			based aligned,
  8     2 	2 node_type		bit(9) unaligned,
  8     3 	2 source_id		structure unaligned,
  8     4 	  3 file_number		bit(8),
  8     5 	  3 line_number		bit(14),
  8     6 	  3 statement_number	bit(5),
  8     7 	2 location		fixed(17) unaligned,
  8     8 	2 allocated		bit(1) unaligned,
  8     9 	2 dcl_type		bit(3) unaligned,
  8    10 	2 reserved		bit(29) unaligned,
  8    11 	2 array			bit(1) unaligned,
  8    12 	2 used_as_format		bit(1) unaligned,
  8    13 	2 used_in_goto		bit(1) unaligned,
  8    14 	2 symbol_table		bit(18) unaligned,
  8    15 	2 low_bound		fixed(17) unaligned,
  8    16 	2 high_bound		fixed(17) unaligned,
  8    17 	2 block_node		ptr unaligned,
  8    18 	2 token			ptr unaligned,
  8    19 	2 next			ptr unaligned,
  8    20 	2 multi_use		ptr unaligned,
  8    21 	2 cross_reference		ptr unaligned,
  8    22 	2 statement		ptr unaligned;
       28 
  9     1 /* BEGIN INCLUDE FILE ... list.incl.pl1 */
  9     2 
  9     3 /* Modified 26 June 81 by EBush to add max_list_elements */
  9     4 
  9     5 
  9     6 dcl	1 list		based aligned,
  9     7 	2 node_type	bit(9) unaligned,
  9     8 	2 reserved	bit(12) unaligned,
  9     9 	2 number		fixed(14) unaligned,
  9    10 	2 element		dimension(n refer(list.number)) ptr unaligned;
  9    11 
  9    12 dcl       max_list_elements   fixed bin(17) internal static options (constant)
  9    13 	                    init(16383);
  9    14 
  9    15 /* END INCLUDE FILE ... list.incl.pl1 */
       29 
 10     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
 10     2 
 10     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
 10     4 
 10     5 dcl (	block_node		initial("000000001"b),
 10     6 	statement_node		initial("000000010"b),
 10     7 	operator_node		initial("000000011"b),
 10     8 	reference_node		initial("000000100"b),
 10     9 	token_node		initial("000000101"b),
 10    10 	symbol_node		initial("000000110"b),
 10    11 	context_node		initial("000000111"b),
 10    12 	array_node		initial("000001000"b),
 10    13 	bound_node		initial("000001001"b),
 10    14 	format_value_node		initial("000001010"b),
 10    15 	list_node			initial("000001011"b),
 10    16 	default_node		initial("000001100"b),
 10    17 	machine_state_node		initial("000001101"b),
 10    18 	source_node		initial("000001110"b),
 10    19 	label_node		initial("000001111"b),
 10    20 	cross_reference_node	initial("000010000"b),
 10    21 	sf_par_node		initial("000010001"b),
 10    22 	temporary_node		initial("000010010"b),
 10    23 	label_array_element_node	initial("000010011"b),
 10    24 	by_name_agg_node		initial("000010100"b))
 10    25 				bit(9) internal static aligned options(constant);
 10    26 
 10    27 dcl	1 node			based aligned,
 10    28 	2 type			unal bit(9),
 10    29 	2 source_id		unal structure,
 10    30 	  3 file_number		bit(8),
 10    31 	  3 line_number		bit(14),
 10    32 	  3 statement_number	bit(5);
 10    33 
 10    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
       30 
 11     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
 11     2 
 11     3 dcl	1 reference		based aligned,
 11     4 	2 node_type		bit(9) unaligned,
 11     5 	2 array_ref		bit(1) unaligned,
 11     6 	2 varying_ref		bit(1) unaligned,
 11     7 	2 shared			bit(1) unaligned,
 11     8 	2 put_data_sw		bit(1) unaligned,
 11     9 	2 processed		bit(1) unaligned,
 11    10 	2 units			fixed(3) unaligned,
 11    11 	2 ref_count		fixed(17) unaligned,
 11    12 	2 c_offset		fixed(24),
 11    13 	2 c_length		fixed(24),
 11    14 	2 symbol			ptr unaligned,
 11    15 	2 qualifier		ptr unaligned,
 11    16 	2 offset			ptr unaligned,
 11    17 	2 length			ptr unaligned,
 11    18 	2 subscript_list		ptr unaligned,
 11    19 						/* these fields are used by the 645 code generator */
 11    20 	2 address			structure unaligned,
 11    21 	  3 base			bit(3),
 11    22 	  3 offset		bit(15),
 11    23 	  3 op			bit(9),
 11    24 	  3 no_address		bit(1),
 11    25 	  3 inhibit		bit(1),
 11    26 	  3 ext_base		bit(1),
 11    27 	  3 tag			bit(6),
 11    28 	2 info			structure unaligned,
 11    29 	  3 address_in		structure,
 11    30 	    4 b			dimension(0:7) bit(1),
 11    31 	    4 storage		bit(1),
 11    32 	  3 value_in		structure,
 11    33 	    4 a			bit(1),
 11    34 	    4 q			bit(1),
 11    35 	    4 aq			bit(1),
 11    36 	    4 string_aq		bit(1),
 11    37 	    4 complex_aq		bit(1),
 11    38 	    4 decimal_aq		bit(1),
 11    39 	    4 b			dimension(0:7) bit(1),
 11    40 	    4 storage		bit(1),
 11    41 	    4 indicators		bit(1),
 11    42 	    4 x			dimension(0:7) bit(1),
 11    43 	  3 other			structure,
 11    44 	    4 big_offset		bit(1),
 11    45 	    4 big_length		bit(1),
 11    46 	    4 modword_in_offset	bit(1),
 11    47 	2 data_type		fixed(5) unaligned,
 11    48 	2 bits			structure unaligned,
 11    49 	  3 padded_ref		bit(1),
 11    50 	  3 aligned_ref		bit(1),
 11    51 	  3 long_ref		bit(1),
 11    52 	  3 forward_ref		bit(1),
 11    53 	  3 ic_ref		bit(1),
 11    54 	  3 temp_ref		bit(1),
 11    55 	  3 defined_ref		bit(1),
 11    56 	  3 evaluated		bit(1),
 11    57 	  3 allocate		bit(1),
 11    58 	  3 allocated		bit(1),
 11    59 	  3 aliasable		bit(1),
 11    60 	  3 even			bit(1),
 11    61 	  3 perm_address		bit(1),
 11    62 	  3 aggregate		bit(1),
 11    63 	  3 hit_zero		bit(1),
 11    64 	  3 dont_save		bit(1),
 11    65 	  3 fo_in_qual		bit(1),
 11    66 	  3 hard_to_load		bit(1),
 11    67 	2 relocation		bit(12) unaligned,
 11    68 	2 more_bits		structure unaligned,
 11    69 	  3 substr		bit(1),
 11    70 	  3 padded_for_store_ref	bit(1),
 11    71 	  3 aligned_for_store_ref	bit(1),
 11    72 	  3 mbz			bit(15),
 11    73 	2 store_ins		bit(18) unaligned;
 11    74 
 11    75 /* END INCLUDE FILE ... reference.incl.pl1 */
       31 
 12     1 /* BEGIN INCLUDE FILE ... token.incl.pl1 */
 12     2 
 12     3 dcl	1 token			based aligned,
 12     4 	2 node_type		bit(9) unaligned,
 12     5 	2 type			bit(9) unaligned,
 12     6 	2 loc			bit(18) unaligned,	/* symtab offset for identifiers, "p" flag for constants */
 12     7 	2 declaration		ptr unaligned,
 12     8 	2 next			ptr unaligned,
 12     9 	2 size			fixed(9),
 12    10 	2 string			char(n refer(token.size));
 12    11 
 12    12 /* END INCLUDE FILE ... token.incl.pl1 */
       32 
 13     1 dcl	1 label_array_element	based aligned,
 13     2 	2 node_type		bit(9) unaligned,
 13     3 	2 reserved		bit(12) unaligned,
 13     4 	2 number			fixed bin(14) unaligned,
 13     5 	2 next			ptr unaligned,
 13     6 	2 statement		ptr unaligned,
 13     7 	2 value			fixed bin(17);
       33 
       34 
       35 begin:
       36 	q=clabel;
       37 	do while(q^=null);
       38 		array="0"b;
       39 		value = 0;
       40 		t=q->list.element(2);
       41 		if t->node.type=reference_node
       42 		then do;
       43 			array="1"b;
       44 			value = token_to_binary((t->reference.offset->list.element(1)));
       45 			t=t->reference.symbol;	/* get token pointer */
       46 		end;
       47 		d=t->token.declaration;
       48 		do while(d^=null);
       49 			if d->label.block_node = cblock & d->node.type = label_node
       50 				then do;
       51 					if d->label.array ^= array
       52 					then call parse_error(31,t);
       53 
       54 					else if ^ array
       55 					then call parse_error(54,t);
       56 
       57 					else do;
       58 					     d->label.low_bound = min(value,d->label.low_bound);
       59 					     d->label.high_bound = max(value,d->label.high_bound);
       60 					     call push_array_element;
       61 					     end;
       62 
       63 					goto next_label;
       64 				     end;
       65 			d=d->label.multi_use;
       66 		end;
       67 		d=create_label(cblock,t,dcltype);
       68 
       69 		if array
       70 		then do;
       71 		     d -> label.array = "1"b;
       72 		     d -> label.low_bound, d -> label.high_bound = value;
       73 		     call push_array_element;
       74 		     end;
       75 		else d -> label.statement = cstatement;
       76 
       77 next_label:
       78 		q=q->list.element(1);
       79 	end;
       80 
       81 
       82 push_array_element:	proc;
       83 
       84 dcl	lae ptr;
       85 
       86 	/* associate this label array element with this statement */
       87 
       88 	lae = create_list(3);
       89 	lae -> label_array_element.node_type = label_array_element_node;
       90 	lae -> label_array_element.statement = cstatement;
       91 	lae -> label_array_element.value = value;
       92 	lae -> label_array_element.next = d -> label.statement;
       93 	d -> label.statement = lae;
       94 
       95 	end;
       96 
       97 
       98 	end declare_label;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/31/89  1337.9  declare_label.pl1                 >spec>install>MR12.3-1066>declare_label.pl1
26           1    07/31/89  1332.6  language_utility.incl.pl1         >spec>install>MR12.3-1066>language_utility.incl.pl1
1-307        2    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
1-325        3    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
1-335        4    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
1-374        5    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
1-386        6    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
27           7    08/13/81  2043.5  block.incl.pl1                    >ldd>include>block.incl.pl1
28           8    05/06/74  1742.1  label.incl.pl1                    >ldd>include>label.incl.pl1
29           9    08/13/81  2211.5  list.incl.pl1                     >ldd>include>list.incl.pl1
30          10    07/21/80  1546.3  nodes.incl.pl1                    >ldd>include>nodes.incl.pl1
31          11    07/21/80  1546.3  reference.incl.pl1                >ldd>include>reference.incl.pl1
32          12    09/14/77  1705.7  token.incl.pl1                    >ldd>include>token.incl.pl1
33          13    10/25/76  1558.8  label_array_element.incl.pl1      >ldd>include>label_array_element.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
array                     2(15)        based           bit(1)                   level 2 in structure "label" packed packed unaligned
                                                                                  dcl 8-1 in procedure "declare_label" set ref 51
                                                                                  71*
array                           000107 automatic       bit(1)                   dcl 16 in procedure "declare_label" set ref 38* 43*
                                                                                  51 54 69
block_node                4            based           pointer                  level 2 packed packed unaligned dcl 8-1 ref 49
cblock                                 parameter       pointer                  dcl 16 set ref 11 49 67*
clabel                                 parameter       pointer                  dcl 16 ref 11 35
create_label                    000010 constant        entry                    external dcl 1-140 ref 67
create_list                     000012 constant        entry                    external dcl 1-147 ref 88
cstatement                             parameter       pointer                  dcl 16 ref 11 75 90
d                               000100 automatic       pointer                  dcl 16 set ref 47* 48 49 49 51 58 58 59 59 65* 65
                                                                                  67* 71 72 72 75 92 93
dcltype                                parameter       bit(3)                   dcl 16 set ref 11 67*
declaration               1            based           pointer                  level 2 packed packed unaligned dcl 12-3 ref 47
element                   1            based           pointer                  array level 2 packed packed unaligned dcl 9-6 ref 40
                                                                                  44 77
high_bound                3(18)        based           fixed bin(17,0)          level 2 packed packed unaligned dcl 8-1 set ref 59*
                                                                                  59 72*
label                                  based           structure                level 1 dcl 8-1
label_array_element                    based           structure                level 1 dcl 13-1
label_array_element_node               constant        bit(9)                   initial dcl 10-5 ref 89
label_node                             constant        bit(9)                   initial dcl 10-5 ref 49
lae                             000116 automatic       pointer                  dcl 84 set ref 88* 89 90 91 92 93
list                                   based           structure                level 1 dcl 9-6
low_bound                 3            based           fixed bin(17,0)          level 2 packed packed unaligned dcl 8-1 set ref 58*
                                                                                  58 72*
max                                                    builtin function         dcl 24 ref 59
min                                                    builtin function         dcl 24 ref 58
multi_use                 7            based           pointer                  level 2 packed packed unaligned dcl 8-1 ref 65
next                      1            based           pointer                  level 2 packed packed unaligned dcl 13-1 set ref 92*
node                                   based           structure                level 1 dcl 10-27
node_type                              based           bit(9)                   level 2 packed packed unaligned dcl 13-1 set ref 89*
null                                                   builtin function         dcl 24 ref 37 48
offset                    5            based           pointer                  level 2 packed packed unaligned dcl 11-3 ref 44
parse_error                     000014 constant        entry                    external dcl 1-364 ref 51 54
q                               000102 automatic       pointer                  dcl 16 set ref 35* 37 40 77* 77
reference                              based           structure                level 1 dcl 11-3
reference_node                         constant        bit(9)                   initial dcl 10-5 ref 41
statement                11            based           pointer                  level 2 in structure "label" packed packed unaligned
                                                                                  dcl 8-1 in procedure "declare_label" set ref 75*
                                                                                  92 93*
statement                 2            based           pointer                  level 2 in structure "label_array_element" packed
                                                                                  packed unaligned dcl 13-1 in procedure
                                                                                  "declare_label" set ref 90*
symbol                    3            based           pointer                  level 2 packed packed unaligned dcl 11-3 ref 45
t                               000104 automatic       pointer                  dcl 16 set ref 40* 41 44 45* 45 47 51* 54* 67*
token                                  based           structure                level 1 dcl 12-3
token_to_binary                 000016 constant        entry                    external dcl 1-459 ref 44
type                                   based           bit(9)                   level 2 packed packed unaligned dcl 10-27 ref 41 49
value                           000106 automatic       fixed bin(15,0)          dcl 16 in procedure "declare_label" set ref 39* 44*
                                                                                  58 59 72 91
value                     3            based           fixed bin(17,0)          level 2 in structure "label_array_element" dcl 13-1
                                                                                  in procedure "declare_label" set ref 91*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
adjust_count                    000000 constant        entry                    external dcl 1-20
array_node                             internal static bit(9)                   initial dcl 10-5
binary_to_octal_string          000000 constant        entry                    external dcl 1-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 1-43
bindec                          000000 constant        entry                    external dcl 1-23
bindec$vs                       000000 constant        entry                    external dcl 1-28
binoct                          000000 constant        entry                    external dcl 1-33
block                                  based           structure                level 1 dcl 7-5
block_node                             internal static bit(9)                   initial dcl 10-5
bound_node                             internal static bit(9)                   initial dcl 10-5
by_name_agg_node                       internal static bit(9)                   initial dcl 10-5
compare_expression              000000 constant        entry                    external dcl 1-48
constant_length                 000000 constant        entry                    external dcl 1-54
context_node                           internal static bit(9)                   initial dcl 10-5
convert                         000000 constant        entry                    external dcl 1-60
convert$from_builtin            000000 constant        entry                    external dcl 1-72
convert$to_integer              000000 constant        entry                    external dcl 1-66
convert$to_target               000000 constant        entry                    external dcl 1-88
convert$to_target_fb            000000 constant        entry                    external dcl 1-82
convert$validate                000000 constant        entry                    external dcl 1-78
copy_expression                 000000 constant        entry                    external dcl 1-94
copy_expression$copy_sons       000000 constant        entry                    external dcl 1-99
copy_unique_expression          000000 constant        entry                    external dcl 1-103
create_array                    000000 constant        entry                    external dcl 1-108
create_block                    000000 constant        entry                    external dcl 1-112
create_bound                    000000 constant        entry                    external dcl 1-118
create_context                  000000 constant        entry                    external dcl 1-122
create_cross_reference          000000 constant        entry                    external dcl 1-128
create_default                  000000 constant        entry                    external dcl 1-132
create_identifier               000000 constant        entry                    external dcl 1-136
create_operator                 000000 constant        entry                    external dcl 1-152
create_reference                000000 constant        entry                    external dcl 1-158
create_statement                000000 constant        entry                    external dcl 1-163
create_statement$prologue       000000 constant        entry                    external dcl 1-171
create_storage                  000000 constant        entry                    external dcl 1-179
create_symbol                   000000 constant        entry                    external dcl 1-184
create_token                    000000 constant        entry                    external dcl 1-191
create_token$init_hash_table    000000 constant        entry                    external dcl 1-197
create_token$protected          000000 constant        entry                    external dcl 1-199
cross_reference_node                   internal static bit(9)                   initial dcl 10-5
decbin                          000000 constant        entry                    external dcl 1-206
declare_constant                000000 constant        entry                    external dcl 1-211
declare_constant$bit            000000 constant        entry                    external dcl 1-219
declare_constant$char           000000 constant        entry                    external dcl 1-224
declare_constant$desc           000000 constant        entry                    external dcl 1-229
declare_constant$integer        000000 constant        entry                    external dcl 1-234
declare_descriptor              000000 constant        entry                    external dcl 1-239
declare_descriptor$ctl          000000 constant        entry                    external dcl 1-249
declare_descriptor$param        000000 constant        entry                    external dcl 1-259
declare_integer                 000000 constant        entry                    external dcl 1-269
declare_picture                 000000 constant        entry                    external dcl 1-274
declare_picture_temp            000000 constant        entry                    external dcl 1-279
declare_pointer                 000000 constant        entry                    external dcl 1-287
declare_temporary               000000 constant        entry                    external dcl 1-292
decode_node_id                  000000 constant        entry                    external dcl 1-300
decode_source_id                000000 constant        entry                    external dcl 1-306
default_node                           internal static bit(9)                   initial dcl 10-5
error                           000000 constant        entry                    external dcl 1-314
error$omit_text                 000000 constant        entry                    external dcl 1-319
error_                          000000 constant        entry                    external dcl 1-324
error_$finish                   000000 constant        entry                    external dcl 1-343
error_$initialize_error         000000 constant        entry                    external dcl 1-341
error_$no_text                  000000 constant        entry                    external dcl 1-334
format_value_node                      internal static bit(9)                   initial dcl 10-5
free_node                       000000 constant        entry                    external dcl 1-345
get_array_size                  000000 constant        entry                    external dcl 1-348
get_size                        000000 constant        entry                    external dcl 1-352
list_node                              internal static bit(9)                   initial dcl 10-5
machine_state_node                     internal static bit(9)                   initial dcl 10-5
max_block_number                       internal static fixed bin(17,0)          initial dcl 7-74
max_list_elements                      internal static fixed bin(17,0)          initial dcl 9-12
merge_attributes                000000 constant        entry                    external dcl 1-355
n                                      automatic       fixed bin(15,0)          dcl 16
operator_node                          internal static bit(9)                   initial dcl 10-5
optimizer                       000000 constant        entry                    external dcl 1-361
parse_error$no_text             000000 constant        entry                    external dcl 1-368
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 1-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 1-372
pl1_print$for_lex               000000 constant        entry                    external dcl 1-418
pl1_print$non_varying           000000 constant        entry                    external dcl 1-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 1-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 1-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 1-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 1-414
pl1_print$varying               000000 constant        entry                    external dcl 1-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 1-395
refer_extent                    000000 constant        entry                    external dcl 1-426
reserve$clear                   000000 constant        entry                    external dcl 1-430
reserve$declare_lib             000000 constant        entry                    external dcl 1-434
reserve$read_lib                000000 constant        entry                    external dcl 1-439
semantic_translator             000000 constant        entry                    external dcl 1-444
semantic_translator$abort       000000 constant        entry                    external dcl 1-446
semantic_translator$error       000000 constant        entry                    external dcl 1-450
sf_par_node                            internal static bit(9)                   initial dcl 10-5
share_expression                000000 constant        entry                    external dcl 1-454
source_node                            internal static bit(9)                   initial dcl 10-5
statement_node                         internal static bit(9)                   initial dcl 10-5
symbol_node                            internal static bit(9)                   initial dcl 10-5
temporary_node                         internal static bit(9)                   initial dcl 10-5
token_node                             internal static bit(9)                   initial dcl 10-5

NAMES DECLARED BY EXPLICIT CONTEXT.
begin                           000024 constant        label                    dcl 35
declare_label                   000017 constant        entry                    external dcl 11
next_label                      000232 constant        label                    dcl 77 ref 63
push_array_element              000237 constant        entry                    internal dcl 82 ref 60 73

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       352         372     272         362
Length      1022     272        20         413      57           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
declare_label                       108 external procedure  is an external procedure.  
push_array_element                      internal procedure  shares stack frame of external procedure declare_label.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
declare_label            000100 d                           declare_label
                         000102 q                           declare_label
                         000104 t                           declare_label
                         000106 value                       declare_label
                         000107 array                       declare_label
                         000116 lae                         push_array_element

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
unpk_to_pk          call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
create_label                  create_list                   parse_error                   token_to_binary

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000012        35 000024        37 000030        38 000034        39 000035        40 000036        41 000041
     43 000045        44 000047        45 000065        47 000070        48 000072        49 000076        51 000110
     54 000131        58 000147        59 000156        60 000165        63 000166        65 000167        66 000171
     67 000172        69 000210        71 000212        72 000215        73 000223        74 000224        75 000225
     77 000232        79 000235        98 000236        82 000237        88 000240        89 000253        90 000256
     91 000263        92 000265        93 000270        95 000271


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
