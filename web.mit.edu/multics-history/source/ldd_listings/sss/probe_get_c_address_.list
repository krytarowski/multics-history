	COMPILATION LISTING OF SEGMENT probe_get_c_address_
	Compiled by: Multics PL/I Compiler, Release 31a, of October 12, 1988
	Compiled at: Honeywell Bull, Phoenix AZ, SysM
	Compiled on: 10/24/88  1558.3 mst Mon
	    Options: optimize map

        1 /****^  ******************************************************
        2*        *                                                    *
        3*        * Copyright, (C) Honeywell Bull Inc., 1988           *
        4*        *                                                    *
        5*        * Copyright (c) 1972 by Massachusetts Institute of   *
        6*        * Technology and Honeywell Information Systems, Inc. *
        7*        *                                                    *
        8*        ****************************************************** */
        9 
       10 
       11 /****^  HISTORY COMMENTS:
       12*  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
       13*     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
       14*     Written as part of C-Probe support.
       15*                                                   END HISTORY COMMENTS */
       16 
       17 /* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */
       18 
       19 /****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
       20 
       21 probe_get_c_address_:
       22   proc (the_addr, original_class, symbol_pt, subs_pt) returns (ptr);
       23 
       24   dcl the_addr		ptr parameter;
       25   dcl original_class	fixed bin (6) unsigned parameter;
       26   dcl symbol_pt		ptr parameter;
       27   dcl subs_pt		ptr parameter;
       28 
       29   dcl sym_pt		ptr init (symbol_pt);
       30 
       31   dcl data_ptr		ptr;	/* hold address as we calculate it */
       32   dcl bo			fixed bin (35);
       33 				/* bit offset of data */
       34   dcl subscript		(n_dims) fixed bin based (subs_pt);
       35 				/* the subscripts supplied */
       36   dcl 1 address_info	like runtime_address_info;
       37   dcl code		fixed bin (35);
       38   dcl sum			fixed bin (35);
       39 				/* holds array offset as calc'ed */
       40   dcl subs_x		fixed bin;/* index into subscripts */
       41 
       42   dcl (addr, null, convert)	builtin;
       43 
       44 /****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
       45 
       46   address_info.version = RUNTIME_ADDRESS_INFO_VERSION_1;
       47   address_info.units = 1;
       48   address_info.location =
       49        convert (address_info.location, the_addr -> its_unsigned.offset);
       50   address_info.offset_is_encoded = "0"b;
       51   address_info.use_digit = 0;
       52   address_info.offset =
       53        convert (address_info.offset, the_addr -> its_unsigned.bit_offset);
       54   address_info.class = original_class;
       55 
       56   data_ptr = the_addr;
       57 
       58   bo = convert (bo, address_info.offset);
       59 
       60   n_dims = runtime_symbol_info_$array_dims (sym_pt);
       61   if (n_dims > 0) & (subs_pt ^= null) then do;
       62       begin;
       63         dcl 1 array_info	      like runtime_array_info;
       64 
       65         array_info.version = RUNTIME_ARRAY_INFO_VERSION_1;
       66         call runtime_symbol_info_$array (sym_pt, addr (array_info), code);
       67         if code ^= 0
       68 	then return (null);
       69         sum = 0;
       70         do subs_x = 1 to n_dims;
       71 	sum = sum
       72 	     + (subscript (subs_x) * array_info.bounds.multiplier (subs_x));
       73         end;
       74         bo = bo + sum;
       75       end;
       76     end;				/* subscript hacking */
       77   return (bitrel (data_ptr, (bo)));
       78 no:
       79   return (null ());
       80 
       81 /****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
       82 
       83 bitrel:
       84   proc (P_ptr, P_bit_offset) returns (ptr);
       85   dcl P_ptr		ptr parameter;
       86   dcl P_bit_offset		fixed bin (24) parameter;
       87 
       88   dcl 1 str		aligned based (P_ptr),
       89        2 filler		unal bit (P_bit_offset),
       90        2 target		unal bit (1);
       91 
       92   if P_bit_offset < 0
       93     then goto no;
       94   return (addr (str.target));
       95   end bitrel;
       96 /****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
       97 
  1     1 /*  BEGIN INCLUDE FILE runtime_symbol_info_.incl.pl1 */
  1     2 
  1     3 
  1     4 /****^  HISTORY COMMENTS:
  1     5*  1) change(86-09-05,JMAthane), approve(86-09-05,MCR7525),
  1     6*     audit(86-09-11,Martinson), install(86-11-12,MR12.0-1208):
  1     7*     Added runtime_symbol_info_$subrange entry which was missing.  Added
  1     8*     has_dimensions and has subrange_limits fields in type_info record.
  1     9*     Structure version numbers have not been changed since this change does not
  1    10*     affect existing programs.
  1    11*                                                   END HISTORY COMMENTS */
  1    12 
  1    13 /* Declarations for using the various entry points in runtime_symbol_info_ */
  1    14 /* NOTE: These entries do not support PL/1 version 1. */
  1    15 
  1    16 /* Made structures aligned, removed variable extent from runtime_array_info.bounds 08/25/83 S. Herbst */
  1    17 /* Added version strings to structures 10/05/83 S. Herbst */
  1    18 /* Added has_dimensions and has_subrange_limits bits in type_info
  1    19*Added subrange entry. JMAthane 08/31/84 */
  1    20 
  1    21 
  1    22      dcl	   runtime_symbol_info_$type entry (ptr, ptr, fixed bin (35));
  1    23 
  1    24      dcl	   1 runtime_type_info    aligned based,
  1    25 	     2 version	      char (8),		/* = "RUNTYP_1" */
  1    26 	     2 flags,
  1    27 	       3 aligned	      bit (1) unal,
  1    28 	       3 packed	      bit (1) unal,
  1    29 	       3 size_is_encoded  bit (1) unal,
  1    30 	       3 has_dimensions   bit (1) unal,
  1    31 	       3 has_subrange_limits bit (1) unal,
  1    32 	       3 pad	      bit (23) unal,
  1    33 	     2 scale	      fixed bin (7) unal,
  1    34 	     2 (type, base_type)  fixed bin (18) unsigned unal,
  1    35 	     2 (type_addr, base_type_addr) ptr,
  1    36 	     2 size	      fixed bin (35);
  1    37 
  1    38      dcl	   runtime_symbol_info_$father entry (ptr) returns (ptr);
  1    39 
  1    40      dcl	   runtime_symbol_info_$brother entry (ptr) returns (ptr);
  1    41 
  1    42      dcl	   runtime_symbol_info_$father_type entry (ptr) returns (ptr);
  1    43 
  1    44      dcl	   runtime_symbol_info_$son entry (ptr) returns (ptr);
  1    45 
  1    46      dcl	   runtime_symbol_info_$successor entry (ptr) returns (ptr);
  1    47 
  1    48      dcl	   runtime_symbol_info_$name entry (ptr) returns (ptr);
  1    49 
  1    50      dcl	   runtime_symbol_info_$level entry (ptr) returns (fixed bin);
  1    51 
  1    52      dcl	   runtime_symbol_info_$next entry (ptr) returns (ptr);
  1    53 
  1    54      dcl	   runtime_symbol_info_$address entry (ptr, ptr, fixed bin (35));
  1    55 
  1    56      dcl	   1 runtime_address_info aligned based,
  1    57 	     2 version	      char (8),		/* = "RUNADR_1" */
  1    58 	     2 location	      fixed bin (18) unsigned unal,
  1    59 	     2 class	      fixed bin (6) unsigned unal,
  1    60 	     2 use_digit	      fixed bin (1) unsigned unal,
  1    61 	     2 units	      fixed bin (2) unsigned unal,
  1    62 	     2 offset_is_encoded  bit (1) unal,
  1    63 	     2 pad	      bit (8) unal,
  1    64 	     2 offset	      fixed bin (35);
  1    65 
  1    66      dcl	   runtime_symbol_info_$array_dims entry (ptr) returns (fixed bin);
  1    67 
  1    68      dcl	   runtime_symbol_info_$array entry (ptr, ptr, fixed bin (35));
  1    69 
  1    70      dcl	   1 runtime_array_info   aligned based,
  1    71 	     2 version	      char (8),		/* = "RUNARY_1" */
  1    72 	     2 access_info	      aligned,
  1    73 	       3 ndims	      fixed bin (6) unsigned unaligned, /* number of dimensions */
  1    74 	       3 use_digit	      fixed bin (1) unsigned unaligned, /* if "1"b and units are half words,
  1    75*						      units are really digits */
  1    76 	       3 array_units      fixed bin (2) unsigned unaligned,
  1    77 	       3 virtual_origin_is_encoded
  1    78 			      bit (1) unaligned,
  1    79 	       3 pad	      bit (26) unaligned,
  1    80 	     2 virtual_origin     fixed bin (35),
  1    81 	     2 bounds	      (16)
  1    82 			      aligned,
  1    83 	       3 flags	      aligned,
  1    84 	         4 lower_is_encoded
  1    85 			      bit (1) unaligned,
  1    86 	         4 upper_is_encoded
  1    87 			      bit (1) unaligned,
  1    88 	         4 multiplier_is_encoded
  1    89 			      bit (1) unaligned,
  1    90 	         4 pad	      bit (33) unaligned,
  1    91 	       3 lower	      fixed bin (35),
  1    92 	       3 upper	      fixed bin (35),
  1    93 	       3 multiplier	      fixed bin (35),
  1    94 	       3 subscript_type   fixed bin (35),
  1    95 	       3 subscript_type_addr ptr;
  1    96 
  1    97      dcl	   n_dims		      fixed bin;
  1    98 
  1    99      dcl	   runtime_symbol_info_$n_variants entry (ptr) returns (fixed bin (35));
  1   100 
  1   101      dcl	   runtime_symbol_info_$variant entry (ptr, ptr, fixed bin (35));
  1   102 
  1   103      dcl	   1 runtime_variant_info aligned based,
  1   104 	     2 version	      char (8),		/* = "RUNVAR_1" */
  1   105 	     2 number_of_variants fixed bin,
  1   106 	     2 first_value_in_set fixed bin (35),	/* value corresponding to the first bit in set stings  */
  1   107 	     2 case	      (n_variants),
  1   108 	       3 set_addr	      ptr,		/* bit string specifies cases;
  1   109*						       set's base type is this node's type */
  1   110 	       3 brother_addr     ptr;		/* ptr to brother for this variant */
  1   111 
  1   112      dcl	   n_variants	      fixed bin (35);
  1   113 
  1   114      dcl	   runtime_symbol_info_$subrange entry (ptr, ptr, fixed bin (35));
  1   115 
  1   116      dcl	   1 runtime_subrange_info based,
  1   117 	     2 version	      char (8),		/* = "RUNSUB_1" */
  1   118 	     2 flags	      aligned,
  1   119 	       3 has_subrange_limits bit (1) unal,
  1   120 	       3 lower_bound_is_encoded bit (1) unal,
  1   121 	       3 upper_bound_is_encoded bit (1) unal,
  1   122 	       3 pad	      bit (33) unal,
  1   123 	     2 subrange_lower_bound fixed bin (35),
  1   124 	     2 subrange_upper_bound fixed bin (35);
  1   125 
  1   126 
  1   127      dcl	   RUNTIME_TYPE_INFO_VERSION_1 char (8) int static options (constant) init ("RUNTYP_1");
  1   128      dcl	   RUNTIME_ADDRESS_INFO_VERSION_1 char (8) int static options (constant) init ("RUNADR_1");
  1   129      dcl	   RUNTIME_ARRAY_INFO_VERSION_1 char (8) int static options (constant) init ("RUNARY_1");
  1   130      dcl	   RUNTIME_VARIANT_INFO_VERSION_1 char (8) int static options (constant) init ("RUNVAR_1");
  1   131      dcl	   RUNTIME_SUBRANGE_INFO_VERSION_1 char (8) int static options (constant) init ("RUNSUB_1");
  1   132 
  1   133 
  1   134 /* END INCLUDE FILE runtime_symbol_info_.incl.pl1 */
       98 
       99 
  2     1 /* BEGIN INCLUDE FILE its.incl.pl1
  2     2*   modified 27 July 79 by JRDavis to add its_unsigned
  2     3*   Internal format of ITS pointer, including ring-number field for follow-on processor */
  2     4 
  2     5 dcl 1 its based aligned,				/* declaration for ITS type pointer */
  2     6     2 pad1 bit (3) unaligned,
  2     7     2 segno bit (15) unaligned,			/* segment number within the pointer */
  2     8     2 ringno bit (3) unaligned,			/* ring number within the pointer */
  2     9     2 pad2 bit (9) unaligned,
  2    10     2 its_mod bit (6) unaligned,			/* should be 43(8) */
  2    11 
  2    12     2 offset bit (18) unaligned,			/* word offset within the addressed segment */
  2    13     2 pad3 bit (3) unaligned,
  2    14     2 bit_offset bit (6) unaligned,			/* bit offset within the word */
  2    15     2 pad4 bit (3) unaligned,
  2    16     2 mod bit (6) unaligned;				/* further modification */
  2    17 
  2    18 dcl 1 itp based aligned,				/* declaration for ITP type pointer */
  2    19     2 pr_no bit (3) unaligned,			/* number of pointer register to use */
  2    20     2 pad1 bit (27) unaligned,
  2    21     2 itp_mod bit (6) unaligned,			/* should be 41(8) */
  2    22 
  2    23     2 offset bit (18) unaligned,			/* word offset from pointer register word offset */
  2    24     2 pad2 bit (3) unaligned,
  2    25     2 bit_offset bit (6) unaligned,			/* bit offset relative to new word offset */
  2    26     2 pad3 bit (3) unaligned,
  2    27     2 mod bit (6) unaligned;				/* further modification */
  2    28 
  2    29 
  2    30 dcl 1 its_unsigned based aligned,			/* just like its, but with unsigned binary */
  2    31     2 pad1 bit (3) unaligned,
  2    32     2 segno fixed bin (15) unsigned unaligned,
  2    33     2 ringno fixed bin (3) unsigned unaligned,
  2    34     2 pad2 bit (9) unaligned,
  2    35     2 its_mod bit (6) unaligned,
  2    36 
  2    37     2 offset fixed bin (18) unsigned unaligned,
  2    38     2 pad3 bit (3) unaligned,
  2    39     2 bit_offset fixed bin (6) unsigned unaligned,
  2    40     2 pad4 bit (3) unaligned,
  2    41     2 mod bit (6) unaligned;
  2    42 
  2    43 dcl 1 itp_unsigned based aligned,			/* just like itp, but with unsigned binary where appropriate */
  2    44     2 pr_no fixed bin (3) unsigned unaligned,
  2    45     2 pad1 bit (27) unaligned,
  2    46     2 itp_mod bit (6) unaligned,
  2    47 
  2    48     2 offset fixed bin (18) unsigned unaligned,
  2    49     2 pad2 bit (3) unaligned,
  2    50     2 bit_offset fixed bin (6) unsigned unaligned,
  2    51     2 pad3 bit (3) unaligned,
  2    52     2 mod bit (6) unaligned;
  2    53 
  2    54 
  2    55 dcl  ITS_MODIFIER bit (6) unaligned internal static options (constant) init ("43"b3);
  2    56 dcl  ITP_MODIFIER bit (6) unaligned internal static options (constant) init ("41"b3);
  2    57 
  2    58 /* END INCLUDE FILE   its.incl.pl1 */
      100 
      101 
      102   end probe_get_c_address_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/24/88  1340.8  probe_get_c_address_.pl1          >special_ldd>install>MR12.2-1184>probe_get_c_address_.pl1
98           1    11/12/86  1748.0  runtime_symbol_info_.incl.pl1     >ldd>include>runtime_symbol_info_.incl.pl1
100          2    11/26/79  1320.6  its.incl.pl1                      >ldd>include>its.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
P_bit_offset                           parameter       fixed bin(24,0)          dcl 86 ref 83 92 94
P_ptr                                  parameter       pointer                  dcl 85 ref 83 94
RUNTIME_ADDRESS_INFO_VERSION_1  000002 constant        char(8)                  initial packed unaligned dcl 1-128 ref 46
RUNTIME_ARRAY_INFO_VERSION_1    000000 constant        char(8)                  initial packed unaligned dcl 1-129 ref 65
addr                                                   builtin function         dcl 42 ref 66 66 94
address_info                    000105 automatic       structure                level 1 unaligned dcl 36
array_info                      000116 automatic       structure                level 1 unaligned dcl 63 set ref 66 66
bit_offset                1(21)        based           fixed bin(6,0)           level 2 packed packed unsigned unaligned dcl 2-30
                                                                                  ref 52
bo                              000104 automatic       fixed bin(35,0)          dcl 32 set ref 58* 58 74* 74 77
bounds                    4     000116 automatic       structure                array level 2 dcl 63
class                     2(18) 000105 automatic       fixed bin(6,0)           level 2 packed packed unsigned unaligned dcl 36 set
                                                                                  ref 54*
code                            000111 automatic       fixed bin(35,0)          dcl 37 set ref 66* 67
convert                                                builtin function         dcl 42 ref 48 52 58
data_ptr                        000102 automatic       pointer                  dcl 31 set ref 56* 77*
its_unsigned                           based           structure                level 1 dcl 2-30
location                  2     000105 automatic       fixed bin(18,0)          level 2 packed packed unsigned unaligned dcl 36 set
                                                                                  ref 48* 48
multiplier                7     000116 automatic       fixed bin(35,0)          array level 3 dcl 63 set ref 71
n_dims                          000114 automatic       fixed bin(17,0)          dcl 1-97 set ref 60* 61 70
null                                                   builtin function         dcl 42 ref 61 67 78
offset                    1            based           fixed bin(18,0)          level 2 in structure "its_unsigned" packed packed
                                                                                  unsigned unaligned dcl 2-30 in procedure
                                                                                  "probe_get_c_address_" ref 48
offset                    3     000105 automatic       fixed bin(35,0)          level 2 in structure "address_info" dcl 36
                                                                                  in procedure "probe_get_c_address_" set ref 52* 52
                                                                                  58
offset_is_encoded         2(27) 000105 automatic       bit(1)                   level 2 packed packed unaligned dcl 36 set ref 50*
original_class                         parameter       fixed bin(6,0)           unsigned dcl 25 ref 21 54
runtime_address_info                   based           structure                level 1 dcl 1-56
runtime_array_info                     based           structure                level 1 dcl 1-70
runtime_symbol_info_$array      000012 constant        entry                    external dcl 1-68 ref 66
runtime_symbol_info_$array_dims 000010 constant        entry                    external dcl 1-66 ref 60
str                                    based           structure                level 1 dcl 88
subs_pt                                parameter       pointer                  dcl 27 ref 21 61 71
subs_x                          000113 automatic       fixed bin(17,0)          dcl 40 set ref 70* 71 71*
subscript                              based           fixed bin(17,0)          array dcl 34 ref 71
sum                             000112 automatic       fixed bin(35,0)          dcl 38 set ref 69* 71* 71 74
sym_pt                          000100 automatic       pointer                  initial dcl 29 set ref 29* 60* 66*
symbol_pt                              parameter       pointer                  dcl 26 ref 21 29
target                                 based           bit(1)                   level 2 packed packed unaligned dcl 88 set ref 94
the_addr                               parameter       pointer                  dcl 24 ref 21 48 52 56
units                     2(25) 000105 automatic       fixed bin(2,0)           level 2 packed packed unsigned unaligned dcl 36 set
                                                                                  ref 47*
use_digit                 2(24) 000105 automatic       fixed bin(1,0)           level 2 packed packed unsigned unaligned dcl 36 set
                                                                                  ref 51*
version                         000116 automatic       char(8)                  level 2 in structure "array_info" packed packed
                                                                                  unaligned dcl 63 in begin block on line 62 set ref
                                                                                  65*
version                         000105 automatic       char(8)                  level 2 in structure "address_info" packed packed
                                                                                  unaligned dcl 36 in procedure
                                                                                  "probe_get_c_address_" set ref 46*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ITP_MODIFIER                           internal static bit(6)                   initial packed unaligned dcl 2-56
ITS_MODIFIER                           internal static bit(6)                   initial packed unaligned dcl 2-55
RUNTIME_SUBRANGE_INFO_VERSION_1        internal static char(8)                  initial packed unaligned dcl 1-131
RUNTIME_TYPE_INFO_VERSION_1            internal static char(8)                  initial packed unaligned dcl 1-127
RUNTIME_VARIANT_INFO_VERSION_1         internal static char(8)                  initial packed unaligned dcl 1-130
itp                                    based           structure                level 1 dcl 2-18
itp_unsigned                           based           structure                level 1 dcl 2-43
its                                    based           structure                level 1 dcl 2-5
n_variants                             automatic       fixed bin(35,0)          dcl 1-112
runtime_subrange_info                  based           structure                level 1 unaligned dcl 1-116
runtime_symbol_info_$address    000000 constant        entry                    external dcl 1-54
runtime_symbol_info_$brother    000000 constant        entry                    external dcl 1-40
runtime_symbol_info_$father     000000 constant        entry                    external dcl 1-38
runtime_symbol_info_$father_type
                                000000 constant        entry                    external dcl 1-42
runtime_symbol_info_$level      000000 constant        entry                    external dcl 1-50
runtime_symbol_info_$n_variants 000000 constant        entry                    external dcl 1-99
runtime_symbol_info_$name       000000 constant        entry                    external dcl 1-48
runtime_symbol_info_$next       000000 constant        entry                    external dcl 1-52
runtime_symbol_info_$son        000000 constant        entry                    external dcl 1-44
runtime_symbol_info_$subrange   000000 constant        entry                    external dcl 1-114
runtime_symbol_info_$successor  000000 constant        entry                    external dcl 1-46
runtime_symbol_info_$type       000000 constant        entry                    external dcl 1-22
runtime_symbol_info_$variant    000000 constant        entry                    external dcl 1-101
runtime_type_info                      based           structure                level 1 dcl 1-24
runtime_variant_info                   based           structure                level 1 dcl 1-103

NAMES DECLARED BY EXPLICIT CONTEXT.
bitrel                          000177 constant        entry                    internal dcl 83 ref 77
no                              000173 constant        label                    dcl 78 ref 92
probe_get_c_address_            000021 constant        entry                    external dcl 21

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       272         306     221         302
Length       514     221        14         171      50           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
probe_get_c_address_                238 external procedure  is an external procedure.  
begin block on line 62                  begin block         shares stack frame of external procedure probe_get_c_address_.  
bitrel                                  internal procedure  shares stack frame of external procedure probe_get_c_address_.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
probe_get_c_address_     000100 sym_pt                      probe_get_c_address_
                         000102 data_ptr                    probe_get_c_address_
                         000104 bo                          probe_get_c_address_
                         000105 address_info                probe_get_c_address_
                         000111 code                        probe_get_c_address_
                         000112 sum                         probe_get_c_address_
                         000113 subs_x                      probe_get_c_address_
                         000114 n_dims                      probe_get_c_address_
                         000116 array_info                  begin block on line 62

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        begin_return_mac    return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
runtime_symbol_info_$array    runtime_symbol_info_$array_dims

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     21 000014        29 000026        46 000032        47 000035        48 000041        50 000045        51 000047
     52 000053        54 000057        56 000062        58 000063        60 000065        61 000075        65 000104
     66 000106        67 000123        69 000132        70 000133        71 000143        73 000155        74 000157
     77 000163        78 000173        83 000177        92 000201        94 000203


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
