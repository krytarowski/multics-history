	COMPILATION LISTING OF SEGMENT tm_get_txn_index
	Compiled by: Multics PL/I Compiler, Release 28e, of February 14, 1985
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 03/05/85  0913.4 mst Tue
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 /* format: style4,ifthenstmt,^indproc,^indcomtxt */
        7 /*---------------*/
        8 
        9 tm_get_txn_index: proc (A_txn_id, A_code) returns (fixed bin);
       10 
       11 /* DESCRIPTION:
       12*
       13*   This  procedure  looks for A_txn_id in the TDT and returns the index
       14*   of the corresponding TDT entry. If there is none, it returns an error code.
       15**/
       16 
       17 /* HISTORY:
       18*
       19*Written by Steve Herbst, 08/06/82.
       20*Modified:
       21*08/16/82 by Steve Herbst: Changed to use consolidated dm_tm_tdt.incl.pl1 with
       22*	entry declarations.
       23*09/10/82 by Steve Herbst: Changed for Version 2 TDT structure.
       24*03/14/83 by Steve Herbst: Fixed to reject A_txn_id = "0"b.
       25*04/26/84 by Steve Herbst: Changed to accept "0"b to refer to current txn.
       26*
       27*
       28*/* DECLARATIONS */
       29 
       30 /* Parameters */
       31 
       32 dcl A_txn_id bit (36) aligned;
       33 dcl A_code fixed bin (35);
       34 
       35 
       36 
       37 /* Constants */
       38 
       39 /* Based */
       40 
       41 /* Static */
       42 
       43 /* Automatic */
       44 
       45 dcl txn_id bit (36) aligned;
       46 dcl txn_index fixed bin;
       47 
       48 /* External */
       49 
       50 dcl dm_data_$current_txn_index fixed bin ext;
       51 dcl dm_data_$tm_tdt_ptr ptr ext;
       52 dcl dm_error_$no_current_transaction fixed bin (35) ext;
       53 dcl dm_error_$transaction_not_found fixed bin (35) ext;
       54 dcl error_table_$unimplemented_version fixed bin (35) ext;
       55 
       56 /* Entries */
       57 
       58 /* Builtins */
       59 
       60 /* Conditions */
       61 
       62 /* END OF DECLARATIONS */
       63 
       64 	txn_id = A_txn_id;
       65 	if txn_id = "0"b then
       66 	     if dm_data_$current_txn_index = 0 then do;
       67 		A_code = dm_error_$no_current_transaction;
       68 		return (0);
       69 	     end;
       70 	     else return (dm_data_$current_txn_index);
       71 
       72 	tm_tdt_ptr = dm_data_$tm_tdt_ptr;
       73 
       74 	if tm_tdt.version ^= TM_TDT_VERSION_3 then do;
       75 	     A_code = error_table_$unimplemented_version;
       76 	     return (0);
       77 	end;
       78 
       79 	do txn_index = 1 to tm_tdt.entry_count;
       80 
       81 	     if tm_tdt.process_id (txn_index) ^= "0"b then
       82 		if tm_tdt.txn_id (txn_index) = txn_id then do;
       83 		     A_code = 0;
       84 		     return (txn_index);
       85 		end;
       86 	end;
       87 
       88 	A_code = dm_error_$transaction_not_found;
       89 
       90 	return (0);
       91 
  1     1 /*  START OF:	dm_tm_tdt.incl.pl1		*/
  1     2 
  1     3 /* Transaction Definition Table for transaction_manager_ */
  1     4 /* This structure is used to reference the TDT. The process_id field for the
  1     5*   i'th TDT entry, for example, is usually referenced as tm_tdt.process_id (i).
  1     6*   A TDT entry is in use by a process when its process_id field is nonzero.
  1     7*   An entry is reserved by using the stacq builtin to set process_id, if and
  1     8*   only if it is already zero. The entry is being used for a transaction when
  1     9*   tm_tdt.txn_id (i) is nonzero. The possible values of tm_tdt.state (i) are
  1    10*   listed in dm_tm_states.incl.pl1. If state = 0, no operation has been
  1    11*   performed yet on the transaction. */
  1    12 
  1    13 
  1    14 /* HISTORY:
  1    15*Designed by Matt Pierret, 01/26/82.
  1    16*Coded by Steve Herbst, 07/27/82.
  1    17*Modified:
  1    18*08/05/82 by Steve Herbst: Added tm_tdt.operation and padded last_uid to full word.
  1    19*08/05/82 by Steve Herbst: Changed creator_process_id to bit (36).
  1    20*08/16/82 by Steve Herbst: Added contents of dm_tm_tdt_entry.incl.pl1.
  1    21*09/09/82 by Steve Herbst: Removed in_use flag from TDT entry and rearranged fields.
  1    22*09/20/82 by Steve Herbst: Removed tm_tdt.operation.
  1    23*11/01/82 by Steve Herbst: Added event_channel and error_sw to tm_tdt_entry.
  1    24*11/05/82 by Steve Herbst: Added suspended_sw and error_code to tm_tdt_entry.
  1    25*11/11/82 by Steve Herbst: Deleted tm_tdt_entry.alloc_complete.
  1    26*11/23/82 by Steve Herbst: Compacted, changed some numbers to unsigned.
  1    27*12/14/82 by Steve Herbst: Added tm_tdt_entry.daemon_error_sw.
  1    28*01/11/83 by Steve Herbst: Added owner_name, abandoned_sw & kill_sw to tm_tdt_entry.
  1    29*01/24/83 by Steve Herbst: Replaced daemon_error_sw with daemon_adjust_count.
  1    30*01/25/83 by Steve Herbst: Moved abandoned_sw from transaction portion to entry header portion.
  1    31*05/13/83 by Steve Herbst: Version 3, changed all fixed bin (18) unal uns numbers to fixed bin (17) unaligned.
  1    32*05/26/83 by Steve Herbst: Added rollback_count and checkpoint_id.
  1    33**/
  1    34 
  1    35 dcl	tm_tdt_ptr	ptr;
  1    36 dcl	tdt_max_count	fixed bin;
  1    37 
  1    38 dcl TM_TDT_VERSION_3 char (8) int static options (constant) init ("TM-TDT 3");
  1    39 
  1    40 
  1    41 dcl  1	tm_tdt		aligned based (tm_tdt_ptr),
  1    42       2	version char (8),				/* = "TM-TDT 3" */
  1    43       2	lock fixed bin (71),			/* (currently not used) */
  1    44       2	last_uid		bit (27) aligned,		/* last transaction uid assigned */
  1    45       2	flags,
  1    46        3	no_begins		bit (1) unaligned,		/* ON => only priv process can begin transaction */
  1    47        3	mbz1		bit (35) unaligned,
  1    48       2	entry_count	fixed bin,		/* number of slots allocated */
  1    49       2	mbz2		fixed bin,		/* for even word boundary */
  1    50       2	entry  (tdt_max_count refer (tm_tdt.entry_count))
  1    51 			like tm_tdt_entry;
  1    52 
  1    53 
  1    54 
  1    55 /* TDT entries: */
  1    56 
  1    57 dcl	tm_tdt_entry_ptr	ptr;
  1    58 
  1    59 dcl  1	tm_tdt_entry	aligned based (tm_tdt_entry_ptr),
  1    60       2	event_channel	fixed bin (71),		/* for communication with the process */
  1    61       2	process_id	bit (36) aligned,		/* process for which this entry is reserved */
  1    62       2	owner_name	char (32),		/* person.project of owner process */
  1    63       2	entry_flags,
  1    64        3	abandoned_sw	bit (1) unaligned,		/* ON => owner has called tm_$abandon on this entry */
  1    65        3	mbz3		bit (35) unaligned,
  1    66       2	transaction	unaligned,
  1    67        3	txn_id		bit (36) aligned,		/* unique identifier assigned at begin time */
  1    68        3	date_time_created	fixed bin (71) aligned,
  1    69        3	mode		fixed bin (17) unaligned,	/* mode specified with transaction begin */
  1    70        3	state		fixed bin (17) unaligned,	/* state transaction is currently in */
  1    71        3  error_code	fixed bin (35) aligned,	/* goes along with error_sw and error state */
  1    72        3 	checkpoint_id	fixed bin (17) unaligned,	/* identifier of the current rollback checkpoint */
  1    73        3	rollback_count	fixed bin (17) unaligned,	/* number of times bjm_$rollback has been called */
  1    74        3	daemon_adjust_count	fixed bin (17) unaligned,	/* number of times daemon has tried to adjust since user */
  1    75        3	return_idx	fixed bin (17) unaligned,	/* parent transaction, or zero */
  1    76        3	flags,
  1    77         4 dead_process_sw	bit (1) unaligned,		/* ON => treat process as dead even if it isn't yet */
  1    78         4 suspended_sw	bit (1) unaligned,		/* ON => suspended by tm_$suspend_txn */
  1    79         4 error_sw		bit (1) unaligned,		/* ON => state is one of the error states */
  1    80         4 kill_sw		bit (1) unaligned,		/* ON => being processed by tm_$kill */
  1    81         4	mbz4		bit (29) unaligned,
  1    82        3	post_commit_flags,
  1    83         4 (fmgr,
  1    84 	 bjmgr,
  1    85 	 ajmgr)	 	 bit (1) unaligned,
  1    86        3	mbz4		fixed bin;
  1    87 
  1    88 
  1    89 /*  END OF:	dm_tm_tdt.incl.pl1		*/
       92 
       93 
       94 
       95 end tm_get_txn_index;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    03/05/85  0759.9  tm_get_txn_index.pl1              >spec>on>7138.pbf>tm_get_txn_index.pl1
92           1    01/07/85  0900.1  dm_tm_tdt.incl.pl1                >ldd>include>dm_tm_tdt.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
A_code                                 parameter       fixed bin(35,0)          dcl 33 set ref 9 67* 75* 83* 88*
A_txn_id                               parameter       bit(36)                  dcl 32 ref 9 64
TM_TDT_VERSION_3                000000 constant        char(8)                  initial unaligned dcl 1-38 ref 74
dm_data_$current_txn_index      000010 external static fixed bin(17,0)          dcl 50 ref 65 70
dm_data_$tm_tdt_ptr             000012 external static pointer                  dcl 51 ref 72
dm_error_$no_current_transaction
                                000014 external static fixed bin(35,0)          dcl 52 ref 67
dm_error_$transaction_not_found 000016 external static fixed bin(35,0)          dcl 53 ref 88
entry                    10            based           structure                array level 2 dcl 1-41
entry_count               6            based           fixed bin(17,0)          level 2 dcl 1-41 ref 79
error_table_$unimplemented_version
                                000020 external static fixed bin(35,0)          dcl 54 ref 75
process_id               12            based           bit(36)                  array level 3 dcl 1-41 ref 81
tm_tdt                                 based           structure                level 1 dcl 1-41
tm_tdt_entry                           based           structure                level 1 dcl 1-59
tm_tdt_ptr                      000102 automatic       pointer                  dcl 1-35 set ref 72* 74 79 81 81
transaction              24            based           structure                array level 3 unaligned dcl 1-41
txn_id                   24            based           bit(36)                  array level 4 in structure "tm_tdt" dcl 1-41
                                                                                  in procedure "tm_get_txn_index" ref 81
txn_id                          000100 automatic       bit(36)                  dcl 45 in procedure "tm_get_txn_index" set ref 64*
                                                                                  65 81
txn_index                       000101 automatic       fixed bin(17,0)          dcl 46 set ref 79* 81 81 84*
version                                based           char(8)                  level 2 dcl 1-41 ref 74

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
tdt_max_count                          automatic       fixed bin(17,0)          dcl 1-36
tm_tdt_entry_ptr                       automatic       pointer                  dcl 1-57

NAME DECLARED BY EXPLICIT CONTEXT.
tm_get_txn_index                000011 constant        entry                    external dcl 9

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       214         236     102         224
Length       424     102        22         152     111           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
tm_get_txn_index                     70 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
tm_get_txn_index         000100 txn_id                      tm_get_txn_index
                         000101 txn_index                   tm_get_txn_index
                         000102 tm_tdt_ptr                  tm_get_txn_index

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
return              ext_entry

NO EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
dm_data_$current_txn_index    dm_data_$tm_tdt_ptr           dm_error_$no_current_transaction
dm_error_$transaction_not_found                             error_table_$unimplemented_version




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
      9 000005        64 000016        65 000021        67 000024        68 000026        70 000030        72 000032
     74 000035        75 000042        76 000044        79 000046        81 000055        83 000065        84 000067
     86 000072        88 000074        90 000100


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
