	COMPILATION LISTING OF SEGMENT tape_ansi_interpret_status_
	Compiled by: Multics PL/I Compiler, Release 27d, of October 11, 1982
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 11/04/82  1707.4 mst Thu
	    Options: optimize map

        1 /* ***************************************************************
        2*   *                                                             *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982     *
        4*   *                                                             *
        5*   * Copyright (c) 1975 by Massachusetts Institute of Technology *
        6*   *                                                             *
        7*   * Copyright (c) 1972 by Massachusetts Institute of            *
        8*   * Technology and Honeywell Information Systems, Inc.          *
        9*   *                                                             *
       10*   *************************************************************** */
       11 
       12 
       13 
       14 
       15 tape_ansi_interpret_status_: procedure (hP);		/* interprets MTS500 hardware status bits */
       16 
       17 /* hP points to a hardware status structure which contains the MTS500 status bits	*/
       18 /* to be interpreted.  The error codes resulting from the interpretation of this string are	*/
       19 /* returned in the structure.  Created May 3, 1974 by R.E. Klinger.				*/
       20 /* Modified March 5, 1976 to add a new Command Reject substatus, Invalid Density		    */
       21 
       22 dcl  hP pointer;					/* argument: pointer to hdw_status structure */
       23 
       24 dcl 1 hdw_status based (hP),				/* hardware status structure */
       25     2 hard_stat bit (72) aligned,			/* tape status in bits 3-12 (from 1) (Input) */
       26     2 no_minor fixed bin,				/* number of minor status codes (Output) */
       27     2 major fixed bin (35),				/* major status code (Output) */
       28     2 minor (10) fixed bin (35);			/* minor status codes (Output) - 10 is arbitrary */
       29 
       30 dcl  maj bit (4) unal based (addr (substr (hdw_status.hard_stat, 3))); /* major status portion of hardware status */
       31 
       32 dcl  min bit (6) unal based (addr (substr (hdw_status.hard_stat, 7))); /* minor status portion of hardware status string */
       33 
       34 /* automatic storage */
       35 dcl (i, j) fixed bin;				/* temporary indices */
       36 
       37 /* static storage */
       38 dcl  init_req bit (1) internal static aligned init ("1"b);	/* initialization required bit */
       39 
       40 dcl  major_bits (9) bit (4) internal static aligned init	/* major status bit possibilities */
       41     ("0101"b, "1101"b, "0100"b, "0011"b, "1011"b, "0010"b, "1010"b, "0001"b, "0000"b);
       42 
       43 dcl  first_minor_index (9) fixed bin internal static init	/* lowest index into minor status mask and result arrays */
       44     (1, 8, 12, 16, 23, 35, 40, 50, 54);
       45 
       46 dcl  last_minor_index (9) fixed bin internal static init	/* highest index into minor status mask and result arrays */
       47     (7, 11, 15, 22, 34, 39, 49, 53, 61);
       48 
       49 dcl  mask (61) bit (6) internal static aligned init	/* minor status bit masks */
       50     ("111111"b,
       51      "111001"b,
       52      "111010"b,
       53      "111100"b,
       54     (10) (1) "111111"b,
       55      "000000"b,
       56      "111111"b,
       57      "111111"b,
       58      "000011"b,
       59      "000100"b,
       60      "001000"b,
       61      "010000"b,
       62      "100000"b,
       63     (12) (1) "111111"b,
       64      "110011"b,
       65      "111111"b,
       66      "100110"b,
       67      "101010"b,
       68      "110011"b,
       69     (15) (1) "111111"b,
       70      "001001"b,
       71      "111010"b,
       72      "000100"b,
       73      "110010"b,
       74      "110010"b,
       75      "110010"b,
       76      "111011"b);
       77 
       78 
       79 dcl  result (61) bit (6) internal static aligned init	/* minor status match results */
       80     ("000000"b,
       81      "000001"b,
       82      "000010"b,
       83      "000100"b,
       84      "001000"b,
       85      "010000"b,
       86      "100000"b,
       87      "000001"b,
       88      "000010"b,
       89      "000011"b,
       90      "000100"b,
       91      "001111"b,
       92      "010011"b,
       93      "111111"b,
       94      "000000"b,
       95      "000001"b,
       96      "000010"b,
       97      "000011"b,
       98      "000100"b,
       99      "001000"b,
      100      "010000"b,
      101      "100000"b,
      102      "000001"b,
      103      "000010"b,
      104      "000011"b,
      105      "000100"b,
      106      "001000"b,
      107      "001001"b,
      108      "100000"b,
      109      "010000"b,
      110      "010001"b,
      111      "010010"b,
      112      "010011"b,
      113      "010100"b,
      114      "000001"b,
      115      "000010"b,
      116      "000100"b,
      117      "001000"b,
      118      "010000"b,
      119      "000001"b,
      120      "000010"b,
      121      "000011"b,
      122      "001000"b,
      123      "001100"b,
      124      "001101"b,
      125      "001110"b,
      126      "001111"b,
      127      "010000"b,
      128      "010001"b,
      129      "000001"b,
      130      "100000"b,
      131      "000010"b,
      132      "000100"b,
      133      "000000"b,
      134      "000001"b,
      135      "000010"b,
      136      "000100"b,
      137      "010000"b,
      138      "100000"b,
      139      "110000"b,
      140      "001000"b);
      141 
      142 
      143 dcl  major_code (9) fixed bin (35) internal static;	/* major status codes */
      144 
      145 dcl  minor_code (61) fixed bin (35) internal static;	/* minor status codes */
      146 
      147 	
  1     1 /*  BEGIN INCLUDE FILE:  tape_status_codes.incl.pl1         */
  1     2 /*  Modified: March 5, 1976 by R.E. Klinger to add new      */
  1     3 /*  substatus code, tape_ansi_$invalid_density.             */
  1     4 
  1     5 dcl (tape_status_$command_reject,			/* MTS010,Command Reject. */
  1     6      tape_status_$invalid_density,			/* MTS015,Command Reject - Invalid Density. */
  1     7      tape_status_$invalid_opcode,			/* MTS020,Command Reject - Invalid Op Code. */
  1     8      tape_status_$invalid_device_code,			/* MTS030,Command Reject - Invalid Device Code. */
  1     9      tape_status_$invalid_idcw_parity,			/* MTS040,Command Reject - Invalid IDCW Parity. */
  1    10      tape_status_$reject_at_bot,			/* MTS050,Command Reject - Positioned at BOT. */
  1    11      tape_status_$read_after_write,			/* MTS060,Command Reject - Forward Read After Write. */
  1    12      tape_status_$nine_track_error,			/* MTS070,Command Reject - 9-Track Error. */
  1    13      tape_status_$mpc_command_reject,			/* MTS080,MPC Command Reject. */
  1    14      tape_status_$illegal_procedure,			/* MTS090,MPC Command Reject - Illegal Procedure. */
  1    15      tape_status_$illegal_lc_number,			/* MTS100,MPC Command Reject - Illegal LC Number. */
  1    16      tape_status_$illegal_susp_lc_number,		/* MTS110,MPC Command Reject - Illegal Suspended LC Number. */
  1    17      tape_status_$continue_not_set,			/* MTS120,MPC Command Reject - Continue Bit Not Set. */
  1    18      tape_status_$end_of_file,			/* MTS130,End of File. */
  1    19      tape_status_$seven_track_eof,			/* MTS140,End of File - End of File Mark (7-Track). */
  1    20      tape_status_$nine_track_eof,			/* MTS150,End of File - End of File Mark (9-track). */
  1    21      tape_status_$data_alert,				/* MTS160,End of File - Data Alert Condition. */
  1    22      tape_status_$single_char_record,			/* MTS170,End of File - Single Character Record. */
  1    23      tape_status_$device_data_alert,			/* MTS180,Device Data Alert. */
  1    24      tape_status_$transfer_timing,			/* MTS190,Device Data Alert - Transfer Timing Alert. */
  1    25      tape_status_$blank_tape_on_read,			/* MTS200,Device Data Alert - Blank Tape on Read. */
  1    26      tape_status_$bit_during_erase,			/* MTS210,Device Data Alert - Bit Detected During Erase Operation. */
  1    27      tape_status_$transmission_parity,			/* MTS220,Device Data Alert - Transmission Parity Alert. */
  1    28      tape_status_$lateral_parity,			/* MTS230,Device Data Alert - Lateral Tape Parity Alert. */
  1    29      tape_status_$longitudinal_parity,			/* MTS240,Device Data Alert - Longitudinal Tape Parity Alert. */
  1    30      tape_status_$end_of_tape,			/* MTS250,Device Data Alert - End of Tape Mark. */
  1    31      tape_status_$mpc_device_data_alert,		/* MTS260,MPC Device Data Alert. */
  1    32      tape_status_$transmission_alert,			/* MTS270,MPC Device Data Alert - Transmission Alert. */
  1    33      tape_status_$inconsistent_command,			/* MTS280,MPC Device Data Alert - Inconsistent Command. */
  1    34      tape_status_$sum_check_error,			/* MTS290,MPC Device Data Alert - Sum Check Error. */
  1    35      tape_status_$byte_locked_out,			/* MTS300,MPC Device Data Alert - Byte Locked Out. */
  1    36      tape_status_$pe_burst_error,			/* MTS310,MPC Device Data Alert - PE-Burst Write Error. */
  1    37      tape_status_$preamble_error,			/* MTS320,MPC Device Data Alert - Preamble Error. */
  1    38      tape_status_$marginal_condition,			/* MTS330,MPC Device Data Alert - Marginal Condition. */
  1    39      tape_status_$multitrack_error,			/* MTS340,MPC Device Data Alert - Multitrack Error. */
  1    40      tape_status_$skew_error,				/* MTS350,MPC Device Data Alert - Skew Error. */
  1    41      tape_status_$postamble_error,			/* MTS360,MPC Device Data Alert - Postamble Error. */
  1    42      tape_status_$nrzi_ccc_error,			/* MTS370,MPC Device Data Alert - NRZI CCC Error. */
  1    43      tape_status_$code_alert,				/* MTS380,MPC Device Data Alert - Code Alert. */
  1    44      tape_status_$device_attention,			/* MTS390,Device Attention. */
  1    45      tape_status_$write_protect_attention,		/* MTS400,Device Attention - Write Protected. */
  1    46      tape_status_$no_such_device,			/* MTS410,Device Attention - No Such Device. */
  1    47      tape_status_$device_in_standby,			/* MTS420,Device Attention - Device in Standby. */
  1    48      tape_status_$device_check,			/* MTS430,Device Attention - Device Check. */
  1    49      tape_status_$blank_tape_on_write,			/* MTS440,Device Attention - Blank Tape on Write. */
  1    50      tape_status_$mpc_device_attention,			/* MTS450,MPC Device Attention. */
  1    51      tape_status_$configuration_error,			/* MTS460,MPC Device Attention - Configuration Switch Error. */
  1    52      tape_status_$multiple_devices,			/* MTS470,MPC Device Attention - Multiple Devices. */
  1    53      tape_status_$illegal_device_id,			/* MTS480,MPC Device Attention - Illegal Device ID Number. */
  1    54      tape_status_$incompatible_mode,			/* MTS490,MPC Device Attention - Incompatible Mode. */
  1    55      tape_status_$tca_malfunction_port0,		/* MTS500,MPC Device Attention - TCA Malfunction Port 0. */
  1    56      tape_status_$tca_malfunction_port1,		/* MTS510,MPC Device Attention - TCA Malfunction Port 1. */
  1    57      tape_status_$tca_malfunction_port2,		/* MTS520,MPC Device Attention - TCA Malfunction Port 2. */
  1    58      tape_status_$tca_malfunction_port3,		/* MTS530,MPC Device Attention - TCA Malfunction Port 3. */
  1    59      tape_status_$mth_malfunction,			/* MTS540,MPC Device Attention - MTH Malfunction. */
  1    60      tape_status_$multiple_bot,			/* MTS550,MPC Device Attention - Multiple BOT. */
  1    61      tape_status_$device_busy,			/* MTS560,Device Busy. */
  1    62      tape_status_$in_rewind,				/* MTS570,Device Busy - In Rewind. */
  1    63      tape_status_$device_reserved,			/* MTS580,Device Busy - Device Reserved. */
  1    64      tape_status_$alternate_channel,			/* MTS590,Device Busy - Alternate Channel in Control. */
  1    65      tape_status_$device_loading,			/* MTS600,Device Busy - Device Loading. */
  1    66      tape_status_$subsystem_ready,			/* MTS610,Peripheral Subsystem Ready. */
  1    67      tape_status_$device_ready,			/* MTS620,Peripheral Subsystem Ready - Device Ready. */
  1    68      tape_status_$write_protected,			/* MTS630,Peripheral Subsystem Ready - Write Protected */
  1    69      tape_status_$ready_at_bot,			/* MTS640,Peripheral Subsystem Ready - Positioned at BOT */
  1    70      tape_status_$nine_track_handler,			/* MTS650,Peripheral Subsystem Ready - 9-Track Handler. */
  1    71      tape_status_$two_bit_fill,			/* MTS660,Peripheral Subsystem Ready - 2-Bit Fill. */
  1    72      tape_status_$four_bit_fill,			/* MTS670,Peripheral Subsystem Ready - 4-Bit Fill. */
  1    73      tape_status_$six_bit_fill,			/* MTS680,Peripheral Subsystem Ready - 6-Bit Fill. */
  1    74      tape_status_$ascii_alert)			/* MTS690,Peripheral Subsystem Ready - ASCII Alert. */
  1    75      fixed bin (35) external static;
  1    76 
  1    77 /*  END INCLUDE FILE:  tape_status_codes.incl.pl1           */
      148 
      149 
      150 dcl (addr, substr) builtin;
      151 
      152 
      153 	
      154 	if init_req then do;			/* initialize code arrays if necessary */
      155 	     init_req = "0"b;
      156 	     major_code (1) = tape_status_$command_reject;
      157 	     major_code (2) = tape_status_$mpc_command_reject;
      158 	     major_code (3) = tape_status_$end_of_file;
      159 	     major_code (4) = tape_status_$device_data_alert;
      160 	     major_code (5) = tape_status_$mpc_device_data_alert;
      161 	     major_code (6) = tape_status_$device_attention;
      162 	     major_code (7) = tape_status_$mpc_device_attention;
      163 	     major_code (8) = tape_status_$device_busy;
      164 	     major_code (9) = tape_status_$subsystem_ready;
      165 
      166 	     minor_code (1) = tape_status_$invalid_density;
      167 	     minor_code (2) = tape_status_$invalid_opcode;
      168 	     minor_code (3) = tape_status_$invalid_device_code;
      169 	     minor_code (4) = tape_status_$invalid_idcw_parity;
      170 	     minor_code (5) = tape_status_$reject_at_bot;
      171 	     minor_code (6) = tape_status_$read_after_write;
      172 	     minor_code (7) = tape_status_$nine_track_error;
      173 	     minor_code (8) = tape_status_$illegal_procedure;
      174 	     minor_code (9) = tape_status_$illegal_lc_number;
      175 	     minor_code (10) = tape_status_$illegal_susp_lc_number;
      176 	     minor_code (11) = tape_status_$continue_not_set;
      177 	     minor_code (12) = tape_status_$seven_track_eof;
      178 	     minor_code (13) = tape_status_$nine_track_eof;
      179 	     minor_code (14) = tape_status_$data_alert;
      180 	     minor_code (15) = tape_status_$single_char_record;
      181 	     minor_code (16) = tape_status_$transfer_timing;
      182 	     minor_code (17) = tape_status_$blank_tape_on_read;
      183 	     minor_code (18) = tape_status_$bit_during_erase;
      184 	     minor_code (19) = tape_status_$transmission_parity;
      185 	     minor_code (20) = tape_status_$lateral_parity;
      186 	     minor_code (21) = tape_status_$longitudinal_parity;
      187 	     minor_code (22) = tape_status_$end_of_tape;
      188 	     minor_code (23) = tape_status_$transmission_alert;
      189 	     minor_code (24) = tape_status_$inconsistent_command;
      190 	     minor_code (25) = tape_status_$sum_check_error;
      191 	     minor_code (26) = tape_status_$byte_locked_out;
      192 	     minor_code (27) = tape_status_$pe_burst_error;
      193 	     minor_code (28) = tape_status_$preamble_error;
      194 	     minor_code (29) = tape_status_$marginal_condition;
      195 	     minor_code (30) = tape_status_$multitrack_error;
      196 	     minor_code (31) = tape_status_$skew_error;
      197 	     minor_code (32) = tape_status_$postamble_error;
      198 	     minor_code (33) = tape_status_$nrzi_ccc_error;
      199 	     minor_code (34) = tape_status_$code_alert;
      200 	     minor_code (35) = tape_status_$write_protect_attention;
      201 	     minor_code (36) = tape_status_$no_such_device;
      202 	     minor_code (37) = tape_status_$device_in_standby;
      203 	     minor_code (38) = tape_status_$device_check;
      204 	     minor_code (39) = tape_status_$blank_tape_on_write;
      205 	     minor_code (40) = tape_status_$configuration_error;
      206 	     minor_code (41) = tape_status_$multiple_devices;
      207 	     minor_code (42) = tape_status_$illegal_device_id;
      208 	     minor_code (43) = tape_status_$incompatible_mode;
      209 	     minor_code (44) = tape_status_$tca_malfunction_port0;
      210 	     minor_code (45) = tape_status_$tca_malfunction_port1;
      211 	     minor_code (46) = tape_status_$tca_malfunction_port2;
      212 	     minor_code (47) = tape_status_$tca_malfunction_port3;
      213 	     minor_code (48) = tape_status_$mth_malfunction;
      214 	     minor_code (49) = tape_status_$multiple_bot;
      215 	     minor_code (50) = tape_status_$in_rewind;
      216 	     minor_code (51) = tape_status_$device_reserved;
      217 	     minor_code (52) = tape_status_$alternate_channel;
      218 	     minor_code (53) = tape_status_$device_loading;
      219 	     minor_code (54) = tape_status_$device_ready;
      220 	     minor_code (55) = tape_status_$write_protected;
      221 	     minor_code (56) = tape_status_$ready_at_bot;
      222 	     minor_code (57) = tape_status_$nine_track_handler;
      223 	     minor_code (58) = tape_status_$two_bit_fill;
      224 	     minor_code (59) = tape_status_$four_bit_fill;
      225 	     minor_code (60) = tape_status_$six_bit_fill;
      226 	     minor_code (61) = tape_status_$ascii_alert;
      227 	end;
      228 
      229 
      230 
      231 	do i = 1 to 9;				/* look for the major status bits */
      232 	     if maj = major_bits (i) then go to found;
      233 	end;
      234 
      235 found:	hdw_status.major = major_code (i);		/* set the major status code */
      236 	hdw_status.no_minor = 0;			/* initialize the minor status count */
      237 	do j = first_minor_index (i) to last_minor_index (i); /* look for minor status bits */
      238 	     if (min & mask (j)) = result (j) then do;	/* test */
      239 		hdw_status.no_minor = hdw_status.no_minor + 1; /* increment the minor status count */
      240 		hdw_status.minor (hdw_status.no_minor) = minor_code (j); /* set the minor status code */
      241 	     end;
      242 	end;
      243 
      244 	if i = 3 then hdw_status.no_minor = 1;		/* EOF major status - drop multiple SCR code */
      245 
      246 	return;
      247 
      248      end tape_ansi_interpret_status_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/04/82  1617.4  tape_ansi_interpret_status_.pl1   >dumps>old>recomp>tape_ansi_interpret_status_.pl1
148          1    06/03/76  1227.8  tape_status_codes.incl.pl1        >ldd>include>tape_status_codes.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
addr                                                   builtin function         dcl 150 ref 232 238
first_minor_index               000203 constant        fixed bin(17,0)          initial array dcl 43 ref 237
hP                                     parameter       pointer                  dcl 22 ref 15 232 235 236 238 239 239 240 240 244
hard_stat                              based           bit(72)                  level 2 dcl 24 set ref 232 238
hdw_status                             based           structure                level 1 unaligned dcl 24
i                               000100 automatic       fixed bin(17,0)          dcl 35 set ref 231* 232* 235 237 237 244
init_req                        000010 internal static bit(1)                   initial dcl 38 set ref 154 155*
j                               000101 automatic       fixed bin(17,0)          dcl 35 set ref 237* 238 238 240*
last_minor_index                000172 constant        fixed bin(17,0)          initial array dcl 46 ref 237
maj                                    based           bit(4)                   unaligned dcl 30 ref 232
major                     3            based           fixed bin(35,0)          level 2 dcl 24 set ref 235*
major_bits                      000214 constant        bit(4)                   initial array dcl 40 ref 232
major_code                      000011 internal static fixed bin(35,0)          array dcl 143 set ref 156* 157* 158* 159* 160* 161*
                                                                                  162* 163* 164* 235
mask                            000075 constant        bit(6)                   initial array dcl 49 ref 238
min                                    based           bit(6)                   unaligned dcl 32 ref 238
minor                     4            based           fixed bin(35,0)          array level 2 dcl 24 set ref 240*
minor_code                      000022 internal static fixed bin(35,0)          array dcl 145 set ref 166* 167* 168* 169* 170* 171*
                                                                                  172* 173* 174* 175* 176* 177* 178* 179* 180* 181*
                                                                                  182* 183* 184* 185* 186* 187* 188* 189* 190* 191*
                                                                                  192* 193* 194* 195* 196* 197* 198* 199* 200* 201*
                                                                                  202* 203* 204* 205* 206* 207* 208* 209* 210* 211*
                                                                                  212* 213* 214* 215* 216* 217* 218* 219* 220* 221*
                                                                                  222* 223* 224* 225* 226* 240
no_minor                  2            based           fixed bin(17,0)          level 2 dcl 24 set ref 236* 239* 239 240 244*
result                          000000 constant        bit(6)                   initial array dcl 79 ref 238
substr                                                 builtin function         dcl 150 ref 232 238
tape_status_$alternate_channel  000306 external static fixed bin(35,0)          dcl 1-5 ref 217
tape_status_$ascii_alert        000332 external static fixed bin(35,0)          dcl 1-5 ref 226
tape_status_$bit_during_erase   000172 external static fixed bin(35,0)          dcl 1-5 ref 183
tape_status_$blank_tape_on_read 000170 external static fixed bin(35,0)          dcl 1-5 ref 182
tape_status_$blank_tape_on_write
                                000250 external static fixed bin(35,0)          dcl 1-5 ref 204
tape_status_$byte_locked_out    000214 external static fixed bin(35,0)          dcl 1-5 ref 191
tape_status_$code_alert         000234 external static fixed bin(35,0)          dcl 1-5 ref 199
tape_status_$command_reject     000120 external static fixed bin(35,0)          dcl 1-5 ref 156
tape_status_$configuration_error
                                000254 external static fixed bin(35,0)          dcl 1-5 ref 205
tape_status_$continue_not_set   000150 external static fixed bin(35,0)          dcl 1-5 ref 176
tape_status_$data_alert         000160 external static fixed bin(35,0)          dcl 1-5 ref 179
tape_status_$device_attention   000236 external static fixed bin(35,0)          dcl 1-5 ref 161
tape_status_$device_busy        000300 external static fixed bin(35,0)          dcl 1-5 ref 163
tape_status_$device_check       000246 external static fixed bin(35,0)          dcl 1-5 ref 203
tape_status_$device_data_alert  000164 external static fixed bin(35,0)          dcl 1-5 ref 159
tape_status_$device_in_standby  000244 external static fixed bin(35,0)          dcl 1-5 ref 202
tape_status_$device_loading     000310 external static fixed bin(35,0)          dcl 1-5 ref 218
tape_status_$device_ready       000314 external static fixed bin(35,0)          dcl 1-5 ref 219
tape_status_$device_reserved    000304 external static fixed bin(35,0)          dcl 1-5 ref 216
tape_status_$end_of_file        000152 external static fixed bin(35,0)          dcl 1-5 ref 158
tape_status_$end_of_tape        000202 external static fixed bin(35,0)          dcl 1-5 ref 187
tape_status_$four_bit_fill      000326 external static fixed bin(35,0)          dcl 1-5 ref 224
tape_status_$illegal_device_id  000260 external static fixed bin(35,0)          dcl 1-5 ref 207
tape_status_$illegal_lc_number  000144 external static fixed bin(35,0)          dcl 1-5 ref 174
tape_status_$illegal_procedure  000142 external static fixed bin(35,0)          dcl 1-5 ref 173
tape_status_$illegal_susp_lc_number
                                000146 external static fixed bin(35,0)          dcl 1-5 ref 175
tape_status_$in_rewind          000302 external static fixed bin(35,0)          dcl 1-5 ref 215
tape_status_$incompatible_mode  000262 external static fixed bin(35,0)          dcl 1-5 ref 208
tape_status_$inconsistent_command
                                000210 external static fixed bin(35,0)          dcl 1-5 ref 189
tape_status_$invalid_density    000122 external static fixed bin(35,0)          dcl 1-5 ref 166
tape_status_$invalid_device_code
                                000126 external static fixed bin(35,0)          dcl 1-5 ref 168
tape_status_$invalid_idcw_parity
                                000130 external static fixed bin(35,0)          dcl 1-5 ref 169
tape_status_$invalid_opcode     000124 external static fixed bin(35,0)          dcl 1-5 ref 167
tape_status_$lateral_parity     000176 external static fixed bin(35,0)          dcl 1-5 ref 185
tape_status_$longitudinal_parity
                                000200 external static fixed bin(35,0)          dcl 1-5 ref 186
tape_status_$marginal_condition 000222 external static fixed bin(35,0)          dcl 1-5 ref 194
tape_status_$mpc_command_reject 000140 external static fixed bin(35,0)          dcl 1-5 ref 157
tape_status_$mpc_device_attention
                                000252 external static fixed bin(35,0)          dcl 1-5 ref 162
tape_status_$mpc_device_data_alert
                                000204 external static fixed bin(35,0)          dcl 1-5 ref 160
tape_status_$mth_malfunction    000274 external static fixed bin(35,0)          dcl 1-5 ref 213
tape_status_$multiple_bot       000276 external static fixed bin(35,0)          dcl 1-5 ref 214
tape_status_$multiple_devices   000256 external static fixed bin(35,0)          dcl 1-5 ref 206
tape_status_$multitrack_error   000224 external static fixed bin(35,0)          dcl 1-5 ref 195
tape_status_$nine_track_eof     000156 external static fixed bin(35,0)          dcl 1-5 ref 178
tape_status_$nine_track_error   000136 external static fixed bin(35,0)          dcl 1-5 ref 172
tape_status_$nine_track_handler 000322 external static fixed bin(35,0)          dcl 1-5 ref 222
tape_status_$no_such_device     000242 external static fixed bin(35,0)          dcl 1-5 ref 201
tape_status_$nrzi_ccc_error     000232 external static fixed bin(35,0)          dcl 1-5 ref 198
tape_status_$pe_burst_error     000216 external static fixed bin(35,0)          dcl 1-5 ref 192
tape_status_$postamble_error    000230 external static fixed bin(35,0)          dcl 1-5 ref 197
tape_status_$preamble_error     000220 external static fixed bin(35,0)          dcl 1-5 ref 193
tape_status_$read_after_write   000134 external static fixed bin(35,0)          dcl 1-5 ref 171
tape_status_$ready_at_bot       000320 external static fixed bin(35,0)          dcl 1-5 ref 221
tape_status_$reject_at_bot      000132 external static fixed bin(35,0)          dcl 1-5 ref 170
tape_status_$seven_track_eof    000154 external static fixed bin(35,0)          dcl 1-5 ref 177
tape_status_$single_char_record 000162 external static fixed bin(35,0)          dcl 1-5 ref 180
tape_status_$six_bit_fill       000330 external static fixed bin(35,0)          dcl 1-5 ref 225
tape_status_$skew_error         000226 external static fixed bin(35,0)          dcl 1-5 ref 196
tape_status_$subsystem_ready    000312 external static fixed bin(35,0)          dcl 1-5 ref 164
tape_status_$sum_check_error    000212 external static fixed bin(35,0)          dcl 1-5 ref 190
tape_status_$tca_malfunction_port0
                                000264 external static fixed bin(35,0)          dcl 1-5 ref 209
tape_status_$tca_malfunction_port1
                                000266 external static fixed bin(35,0)          dcl 1-5 ref 210
tape_status_$tca_malfunction_port2
                                000270 external static fixed bin(35,0)          dcl 1-5 ref 211
tape_status_$tca_malfunction_port3
                                000272 external static fixed bin(35,0)          dcl 1-5 ref 212
tape_status_$transfer_timing    000166 external static fixed bin(35,0)          dcl 1-5 ref 181
tape_status_$transmission_alert 000206 external static fixed bin(35,0)          dcl 1-5 ref 188
tape_status_$transmission_parity
                                000174 external static fixed bin(35,0)          dcl 1-5 ref 184
tape_status_$two_bit_fill       000324 external static fixed bin(35,0)          dcl 1-5 ref 223
tape_status_$write_protect_attention
                                000240 external static fixed bin(35,0)          dcl 1-5 ref 200
tape_status_$write_protected    000316 external static fixed bin(35,0)          dcl 1-5 ref 220

NAMES DECLARED BY EXPLICIT CONTEXT.
found                           000474 constant        label                    dcl 235 ref 232
tape_ansi_interpret_status_     000231 constant        entry                    external dcl 15

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1620        2154     545        1630
Length      2510     545       334         320    1052         110

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
tape_ansi_interpret_status_          67 external procedure  is an external procedure.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 init_req                    tape_ansi_interpret_status_
000011 major_code                  tape_ansi_interpret_status_
000022 minor_code                  tape_ansi_interpret_status_

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
tape_ansi_interpret_status_
                         000100 i                           tape_ansi_interpret_status_
                         000101 j                           tape_ansi_interpret_status_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
return              ext_entry

NO EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
tape_status_$alternate_channel                              tape_status_$ascii_alert      tape_status_$bit_during_erase
tape_status_$blank_tape_on_read                             tape_status_$blank_tape_on_write
tape_status_$byte_locked_out  tape_status_$code_alert       tape_status_$command_reject
tape_status_$configuration_error                            tape_status_$continue_not_set tape_status_$data_alert
tape_status_$device_attention tape_status_$device_busy      tape_status_$device_check
tape_status_$device_data_alert                              tape_status_$device_in_standby
tape_status_$device_loading   tape_status_$device_ready     tape_status_$device_reserved  tape_status_$end_of_file
tape_status_$end_of_tape      tape_status_$four_bit_fill    tape_status_$illegal_device_id
tape_status_$illegal_lc_number                              tape_status_$illegal_procedure
tape_status_$illegal_susp_lc_number                         tape_status_$in_rewind
tape_status_$incompatible_mode                              tape_status_$inconsistent_command
tape_status_$invalid_density  tape_status_$invalid_device_code
tape_status_$invalid_idcw_parity                            tape_status_$invalid_opcode   tape_status_$lateral_parity
tape_status_$longitudinal_parity                            tape_status_$marginal_condition
tape_status_$mpc_command_reject                             tape_status_$mpc_device_attention
tape_status_$mpc_device_data_alert                          tape_status_$mth_malfunction  tape_status_$multiple_bot
tape_status_$multiple_devices tape_status_$multitrack_error tape_status_$nine_track_eof   tape_status_$nine_track_error
tape_status_$nine_track_handler                             tape_status_$no_such_device   tape_status_$nrzi_ccc_error
tape_status_$pe_burst_error   tape_status_$postamble_error  tape_status_$preamble_error   tape_status_$read_after_write
tape_status_$ready_at_bot     tape_status_$reject_at_bot    tape_status_$seven_track_eof
tape_status_$single_char_record                             tape_status_$six_bit_fill     tape_status_$skew_error
tape_status_$subsystem_ready  tape_status_$sum_check_error  tape_status_$tca_malfunction_port0
tape_status_$tca_malfunction_port1                          tape_status_$tca_malfunction_port2
tape_status_$tca_malfunction_port3                          tape_status_$transfer_timing
tape_status_$transmission_alert                             tape_status_$transmission_parity
tape_status_$two_bit_fill     tape_status_$write_protect_attention                        tape_status_$write_protected




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     15 000226       154 000236       155 000240       156 000241       157 000243       158 000245       159 000247
    160 000251       161 000253       162 000255       163 000257       164 000261       166 000263       167 000265
    168 000267       169 000271       170 000273       171 000275       172 000277       173 000301       174 000303
    175 000305       176 000307       177 000311       178 000313       179 000315       180 000317       181 000321
    182 000323       183 000325       184 000327       185 000331       186 000333       187 000335       188 000337
    189 000341       190 000343       191 000345       192 000347       193 000351       194 000353       195 000355
    196 000357       197 000361       198 000363       199 000365       200 000367       201 000371       202 000373
    203 000375       204 000377       205 000401       206 000403       207 000405       208 000407       209 000411
    210 000413       211 000415       212 000417       213 000421       214 000423       215 000425       216 000427
    217 000431       218 000433       219 000435       220 000437       221 000441       222 000443       223 000445
    224 000447       225 000451       226 000453       231 000455       232 000462       233 000472       235 000474
    236 000503       237 000504       238 000513       239 000524       240 000526       242 000532       244 000534
    246 000544


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
