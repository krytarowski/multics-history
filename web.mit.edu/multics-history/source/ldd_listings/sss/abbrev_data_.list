	COMPILATION LISTING OF SEGMENT !BBBJWNZPxfCqmq
	Compiled by: Multics PL/I Compiler, Release 29, of July 28, 1986
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 03/20/87  1233.3 mst Fri
	    Options: table map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 
        7 /* format: off */
        8 
        9 /* Constant data used by the Multics abbrevation processor */
       10 
       11 /* Created:  March 1983 by G. Palter */
       12 
       13 /* HISTORY COMMENTS:
       14*  1) change(86-06-20,Gilcrease), approve(86-06-25,MCR7409),
       15*     audit(86-07-29,GWMay), install(86-08-04,MR12.0-1112):
       16*     For hcom...
       17*     Modified: June 1984 by G. Palter to add version string
       18*  2) change(86-06-20,Gilcrease), approve(86-06-25,MCR7409),
       19*     audit(86-07-29,GWMay), install(86-08-04,MR12.0-1112):
       20*               Install version 3.1a abbrev, change version constant.
       21*  3) change(86-07-24,Gilcrease), approve(86-06-25,MCR7409),
       22*     audit(86-07-29,GWMay), install(86-08-04,MR12.0-1112):
       23*               Update version constnat for find_chars_ rather than tct_,
       24*               by Margolin emergency fix.
       25*  4) change(86-10-10,Gilcrease), approve(87-02-27,MCR7626),
       26*     audit(87-03-09,Parisek), install(87-03-20,MR12.1-1005):
       27*               Add version 2 list requests.
       28*                                                   END HISTORY COMMENTS */
       29 
       30 
       31 /* format: on,style4,delnl,insnl,ifthenstmt,ifthen */
       32 
       33 
       34 abbrev_data_:
       35      procedure () options (variable);
       36 
       37 
       38 dcl  1 abbrev_data aligned,
       39        2 version character (32) unaligned,
       40        2 default_breaks_list aligned like DEFAULT_BREAKS_LIST,
       41        2 default_breaks_tct_table character (512) unaligned;
       42 
       43 dcl  abbrev_data_default_breaks_tct_table_as_binary (0:511) fixed binary (9) unaligned unsigned
       44 	based (addr (abbrev_data.default_breaks_tct_table));
       45 
       46 dcl  DEFAULT_BREAKS character (21) static options (constant) initial ("	
       47  ""$'().:;<>[]`{|}");				/* HT NL VT FF SP QUOTE, etc: must be in collating sequence */
       48 
       49 dcl  1 DEFAULT_BREAKS_LIST aligned static options (constant),
       50        2 n_break_sequences fixed binary initial (21),
       51        2 break_strings_lth fixed binary initial (22),
       52        2 break_sequences (21),
       53          3 start fixed binary initial (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22),
       54          3 lth fixed binary initial (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1),
       55        2 break_strings character (22) unaligned initial ("	
       56  ""$'().::;<>[]`{|}");
       57 
       58 dcl  1 cds_data aligned like cds_args;
       59 
       60 dcl  code fixed binary (35);
       61 dcl  idx fixed binary;
       62 
       63 dcl  ABBREV_DATA_ character (32) static options (constant) initial ("abbrev_data_");
       64 
       65 dcl  com_err_ entry () options (variable);
       66 dcl  create_data_segment_ entry (pointer, fixed binary (35));
       67 
       68 dcl  (addr, currentsize, length, low, null, rank, string, substr) builtin;
       69 
       70 /* Fill in the data structure */
       71 
       72 	abbrev_data.version = "3.2";
       73 
       74 	abbrev_data.default_breaks_list = DEFAULT_BREAKS_LIST;
       75 
       76 	abbrev_data.default_breaks_tct_table = low (length (abbrev_data.default_breaks_tct_table));
       77 
       78 	do idx = 1 to length (DEFAULT_BREAKS);		/* exactly one sequence starting with each character */
       79 	     abbrev_data_default_breaks_tct_table_as_binary (rank (substr (DEFAULT_BREAKS, idx, 1))) = idx;
       80 	end;
       81 
       82 
       83 /* Set up arguments for call to create_data_segment_ */
       84 
       85 	cds_data.sections (1).p = addr (abbrev_data);
       86 	cds_data.sections (1).len = currentsize (abbrev_data);
       87 	cds_data.sections (1).struct_name = "abbrev_data";
       88 
       89 	cds_data.seg_name = ABBREV_DATA_;
       90 
       91 	cds_data.num_exclude_names = 0;
       92 	cds_data.exclude_array_ptr = null ();
       93 
       94 	string (cds_data.switches) = ""b;
       95 	cds_data.switches.have_text = "1"b;		/* only constants */
       96 
       97 
       98 /* Call create_data_segment_ */
       99 
      100 	call create_data_segment_ (addr (cds_data), code);
      101 
      102 	if code ^= 0 then call com_err_ (code, ABBREV_DATA_);
      103 
      104 	return;
      105 
  1     1 /* BEGIN INCLUDE FILE cds_args.incl.pl1 */
  1     2 
  1     3 dcl 1 cds_args based aligned,
  1     4     2 sections (2),
  1     5       3 p ptr,					/* pointer to data for text/static section */
  1     6       3 len fixed bin (18),				/* size of text/static section */
  1     7       3 struct_name char (32),			/* name of declared structure for this section */
  1     8     2 seg_name char (32),				/* name to create segment by */
  1     9     2 num_exclude_names fixed bin,			/* number of names in exclude array */
  1    10     2 exclude_array_ptr ptr,				/* pointer to array of exclude names */
  1    11     2 switches,					/* control switches */
  1    12       3 defs_in_link bit (1) unal,			/* says put defs in linkage */
  1    13       3 separate_static bit (1) unal,			/* says separate static section is wanted */
  1    14       3 have_text bit (1) unal,			/* ON if text section given */
  1    15       3 have_static bit (1) unal,			/* ON if static section given */
  1    16       3 pad bit (32) unal;
  1    17 
  1    18 dcl  exclude_names (1) char (32) based;			/* pointed to be cds_args.exclude_array_ptr */
  1    19 
  1    20 /* END INCLUDE FILE cds_args.incl.pl1 */
      106 
      107 
      108      end abbrev_data_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    03/20/87  1233.3  !BBBJWNZPxfCqmq.pl1               >spec>install>1005>abbrev_data_.cds
106          1    04/01/76  2209.5  cds_args.incl.pl1                 >ldd>include>cds_args.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ABBREV_DATA_                    000062 constant        char(32)                 initial unaligned dcl 63 set ref 89 102*
DEFAULT_BREAKS                  000072 constant        char(21)                 initial unaligned dcl 46 ref 78 79
DEFAULT_BREAKS_LIST             000000 constant        structure                level 1 dcl 49 ref 74
abbrev_data                     000100 automatic       structure                level 1 dcl 38 set ref 85 86
abbrev_data_default_breaks_tct_table_as_binary
                                       based           fixed bin(9,0)           array unsigned unaligned dcl 43 set ref 79*
addr                                                   builtin function         dcl 68 ref 43 79 85 100 100
break_sequences          12     000100 automatic       structure                array level 3 dcl 38
break_strings            64     000100 automatic       char(22)                 initial level 3 packed unaligned dcl 38 set ref 38*
break_strings_lth        11     000100 automatic       fixed bin(17,0)          initial level 3 dcl 38 set ref 38*
cds_args                               based           structure                level 1 dcl 1-3
cds_data                        000372 automatic       structure                level 1 dcl 58 set ref 100 100
code                            000437 automatic       fixed bin(35,0)          dcl 60 set ref 100* 102 102*
com_err_                        000012 constant        entry                    external dcl 65 ref 102
create_data_segment_            000014 constant        entry                    external dcl 66 ref 100
currentsize                                            builtin function         dcl 68 ref 86
default_breaks_list      10     000100 automatic       structure                level 2 dcl 38 set ref 74*
default_breaks_tct_table
                         72     000100 automatic       char(512)                level 2 packed unaligned dcl 38 set ref 43 76* 76 79
exclude_array_ptr        42     000372 automatic       pointer                  level 2 dcl 58 set ref 92*
have_text                44(02) 000372 automatic       bit(1)                   level 3 packed unaligned dcl 58 set ref 95*
idx                             000440 automatic       fixed bin(17,0)          dcl 61 set ref 78* 79 79*
len                       2     000372 automatic       fixed bin(18,0)          array level 3 dcl 58 set ref 86*
length                                                 builtin function         dcl 68 ref 76 78
low                                                    builtin function         dcl 68 ref 76
lth                      13     000100 automatic       fixed bin(17,0)          initial array level 4 dcl 38 set ref 38* 38* 38* 38*
                                                                                  38* 38* 38* 38* 38* 38* 38* 38* 38* 38* 38* 38*
                                                                                  38* 38* 38* 38* 38*
n_break_sequences        10     000100 automatic       fixed bin(17,0)          initial level 3 dcl 38 set ref 38*
null                                                   builtin function         dcl 68 ref 92
num_exclude_names        40     000372 automatic       fixed bin(17,0)          level 2 dcl 58 set ref 91*
p                               000372 automatic       pointer                  array level 3 dcl 58 set ref 85*
rank                                                   builtin function         dcl 68 ref 79
sections                        000372 automatic       structure                array level 2 dcl 58
seg_name                 30     000372 automatic       char(32)                 level 2 dcl 58 set ref 89*
start                    12     000100 automatic       fixed bin(17,0)          initial array level 4 dcl 38 set ref 38* 38* 38* 38*
                                                                                  38* 38* 38* 38* 38* 38* 38* 38* 38* 38* 38* 38*
                                                                                  38* 38* 38* 38* 38*
string                                                 builtin function         dcl 68 set ref 94*
struct_name               3     000372 automatic       char(32)                 array level 3 dcl 58 set ref 87*
substr                                                 builtin function         dcl 68 ref 79
switches                 44     000372 automatic       structure                level 2 dcl 58 set ref 94*
version                         000100 automatic       char(32)                 level 2 packed unaligned dcl 38 set ref 72*

NAME DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
exclude_names                          based           char(32)                 array unaligned dcl 1-18

NAME DECLARED BY EXPLICIT CONTEXT.
abbrev_data_                    000120 constant        entry                    external dcl 34

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       714         732     640         724
Length      2204     640        16        1235      53           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
abbrev_data_                        310 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
abbrev_data_             000100 abbrev_data                 abbrev_data_
                         000372 cds_data                    abbrev_data_
                         000437 code                        abbrev_data_
                         000440 idx                         abbrev_data_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      create_data_segment_

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     34 000117        38 000125        72 000532        74 000535        76 000540        78 000543        79 000547
     80 000563        85 000565        86 000567        87 000571        89 000574        91 000577        92 000600
     94 000602        95 000603       100 000605       102 000620       104 000637


Object Segment >spec>install>1005>abbrev_data_
Created on 03/20/87  1233.4 mst Fri
by GJohnson.SysMaint.a
using create_data_segment_, Version II of Thursday, November 20, 1986

        Object    Text    Defs    Link    Symb  Static
Start        0       0     272     342     352     352
Length     531     272      50      10     143       0


5 Definitions:


segname:    abbrev_data_

text|10         default_breaks_list
text|72         default_breaks_tct_table
symb|0          symbol_table
text|0          version


No Links.





                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
