	COMPILATION LISTING OF SEGMENT convert
	Compiled by: Multics PL/I Compiler, Release 33e, of October 6, 1992
	Compiled at: CGI                             
	Compiled on: 2000-05-05_1824.25_Fri_mdt
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 /* Modified 780427 by PG to get ready for unsigned */
       12 /* Modified 790419 by PCK to implement 4-bit decimal */
       13 /* Modified 790840 by PCK to fix 1791 */
       14 /* Modified 800103 by RAB to fix 1680 in which passing a label constant as arg
       15*   sometimes fails. */
       16 /* Modified 830509 BIM to check explicit_packed as part of alignment. ycch. */
       17 
       18 convert: 	proc (tree, bv_target_type) returns (ptr);
       19 
       20 /* parameters */
       21 
       22 dcl	(tree ptr,
       23 	bv_target_type bit (36) aligned) parameter;
       24 
       25 /* automatic */
       26 
       27 dcl	(p,r,target_ref,target,input,output,inlength,tlength,return_tree) ptr,
       28 	(pointer1,pointer2) (32) ptr aligned,
       29 	(m, n, svprec) fixed bin;
       30 
       31 dcl	(alignment_ok, known, sign_type_ok, validate_bit) bit(1) aligned, 
       32 	long_bit bit(1) aligned init("0"b),
       33 	target_must_be_integer bit(1) aligned init("0"b),
       34 	keep_full_precision bit(1) aligned init("0"b),
       35 	suppress_bit bit(1) aligned init("1"b),
       36 	varying_input bit(1) aligned init("0"b),
       37 	varying_result bit(1) aligned init("0"b);
       38 
       39 dcl	1 itype like type;
       40 dcl	1 otype like type;
       41 dcl	1 inpicture like type;
       42 dcl	1 tpicture like type;
       43 
       44 /* based */
       45 
       46 dcl	value1 bit(2304) aligned based(addr(pointer1(1)));
       47 dcl	value2 bit(2304) aligned based(addr(pointer2(1)));
       48 dcl	char_target char(outclength) based aligned;
       49 dcl	bit_target bit(outclength) based aligned;
       50 
       51 /* builtin */
       52 
       53 dcl	(null,binary,addr,bit,divide,fixed,sign,min,max,abs,log10,string,substr,ceil) builtin;
       54 
       55 /* conditions */
       56 
       57 dcl	(conversion,fixedoverflow,overflow,underflow,size,stringsize) condition;
       58 
       59 /* defined */
       60 
       61 dcl	defined_itype bit (36) defined (itype);
       62 dcl	defined_otype bit (36) defined (otype);
       63 
       64 /* entries */
       65 
       66 dcl	(pl1_stat_$util_abort, pl1_stat_$util_error) variable external static entry(fixed bin, ptr);
       67 
       68 /* external static */
       69 
       70 dcl	pl1_stat_$cur_statement ptr ext static;
       71 
       72 /* internal static */
       73 
       74 dcl	plain_desc_type (46) fixed bin int static /* map descriptor types ignoring precision, varying, unsigned attributes */
       75 		init (	1, 1, 3, 3, 5, 5, 7, 7, 9, 10, 11, 12,
       76 			13, 14, 15, 16, 17, 18, 19, 19, 21, 21, 23, (9)0, 1, 1, (8)0, 9, 10, 11, 12);
       77 
       78 dcl	simplify_for_message (0:46) fixed bin int static initial (10, (12)1, 4, 5, 7, 8, 10, 6, 2, 2, 3, 3, 9,
       79 	(9)0, 1, 1, (8)0, (4)1);	/* maps descriptor types into subscripts for message array, below. */
       80 
       81 /* The values of the simplify array, and the subscripts into the message array, are assigned as follows:
       82*	1 = arithmetic	6 = area
       83*	2 = bit		7 = label
       84*	3 = char		8 = entry
       85*	4 = ptr		9 = file
       86*	5 = offset	10 = structure or undefined
       87**/
       88 
       89 dcl	message (9, 9) fixed bin int static init (
       90 					   0,-234,-234, 231, 231, 249, 229, 223, 251,
       91 					-236,   0,-487, 231, 231, 249, 229, 223, 251,
       92 					-236,-489,   0, 231, 231, 249, 229, 223, 251,
       93 					 227, 225, 225,   0,   0, 249, 229, 223, 251,
       94 					 227, 225, 225,   0,   0, 249, 229, 223, 251,
       95 					 227, 225, 225, 231, 231,   0, 229, 223, 251,
       96 					 227, 225, 225, 231, 231, 249,   0, 223, 251,
       97 					 227, 225, 225, 231, 231, 249, 229,   0, 251,
       98 					 227, 225, 225, 231, 231, 249, 229, 223,   0);
       99 
      100 /* program */
      101 
      102 	suppress_bit = "0"b;
      103 	go to start;
      104 
      105 to_integer:
      106 	entry (tree, bv_target_type) returns (ptr);
      107 
      108 	target_must_be_integer = "1"b;
      109 	suppress_bit = "0"b;
      110 
      111 from_builtin:
      112 	entry (tree, bv_target_type) returns (ptr);
      113 
      114 start:
      115 	validate_bit = "0"b;
      116 	known = "0"b;
      117 	outscale_prec = 0;
      118 	tlength = null;
      119 	string (otype) = bv_target_type & convert_mask;
      120 	string (inpicture) = "0"b;
      121 	string (tpicture) = "0"b;
      122 	go to common;
      123 
      124 validate:	entry(tree,target_ref);
      125 
      126 	suppress_bit = "0"b;
      127 	validate_bit="1"b;
      128 	goto meet;
      129 
      130 to_target_fb:	entry(tree,target_ref) returns(ptr);
      131 
      132 	validate_bit = "0"b;
      133 	keep_full_precision = "1"b;
      134 	goto meet;
      135 
      136 to_target:	entry(tree,target_ref) returns(ptr);
      137 
      138 	suppress_bit  ,
      139 	validate_bit="0"b;
      140 
      141 		/*   the second argument is a reference_node,
      142*		     get output type and other output attributes,
      143*		     therefore   the known bit is on     */
      144 meet:
      145 	known = "1"b;
      146 
      147 	/* initialize important vars, just in case */
      148 
      149 	outscale_prec = 0;
      150 	tlength = null;
      151 
      152 	string (inpicture) = "0"b;
      153 	string (tpicture) = "0"b;
      154 	if target_ref = null then call print(248);
      155 	if target_ref->node.type ^= reference_node then call print(248);
      156 
      157 	target = target_ref->reference.symbol;
      158 
      159 	if target->node.type=label_node
      160 	then do;
      161 		defined_otype = label_mask;
      162 		goto common;
      163 	end;
      164 
      165 	if target->symbol.bit | target->symbol.char | target->symbol.picture
      166 	then do;
      167 		tlength = target_ref->reference.length;
      168 		outclength = target_ref->reference.c_length;
      169 
      170 		if target_ref->reference.varying_ref
      171 		then do;
      172 			known = "0"b;
      173 			varying_result = "1"b;
      174 		end;
      175 	end;
      176 
      177 	else
      178 	if target->symbol.fixed | target->symbol.float
      179 	then do;
      180 		tlength = null;
      181 		outprec = target->symbol.c_dcl_size;
      182 		outscale = target->symbol.scale;
      183 	end;
      184 
      185 	else
      186 	if target->symbol.arg_descriptor
      187 	then do;
      188 		tlength = null;
      189 		outprec = default_fix_bin_p;
      190 		outscale = 0;
      191 		defined_otype = integer_type;
      192 		goto common;
      193 	end;
      194 
      195 	string (otype) = substr (string (target -> symbol.attributes), 1, 36) & convert_mask;
      196 
      197 	if target->symbol.picture
      198 	then do;
      199 		string(tpicture) = string(otype);
      200 
      201 		if target->symbol.pix.pic_char
      202 		then	defined_otype = defined_otype & ^picture_mask | char_mask;
      203 		else do;
      204 			defined_otype = defined_otype & ^picture_mask  & ^unaligned_mask | aligned_mask | decimal_mask;
      205 
      206 			outprec = target->symbol.pix.pic_size;
      207 
      208 			if ^target->symbol.complex
      209 			then	defined_otype = defined_otype | real_mask;
      210 
      211 			if target->symbol.pix.pic_fixed
      212 			then do;
      213 				defined_otype = defined_otype | fixed_mask;
      214 				outscale = target->symbol.pix.pic_scale;
      215 			end;
      216 			else	defined_otype = defined_otype | float_mask;
      217 		end;
      218 	end;
      219 
      220 		/*   get input type and other input attributes   */
      221 
      222 common:
      223 	outtype = pl1_descriptor_type(defined_otype,(outprec));
      224 	inlength = null;
      225 	inscale_prec = 0;
      226 	if tree = null then call print(248);
      227 
      228 	if tree->node.type = token_node then go to token_input;
      229 
      230 	if tree->node.type = operator_node
      231 	then	r = tree->operator.operand(1);
      232 	else	r = tree;
      233 
      234 	if r = null then call print(248);
      235 
      236 	if r->node.type = label_node
      237 	then	if outtype = label_dtype
      238 		then	if validate_bit
      239 			then	return;
      240 			else	goto assign_it;
      241 		else	call print(message(7,simplify_for_message(outtype)));
      242 
      243 	if r->node.type ^= reference_node then call print(248);
      244 
      245 /* The input is a reference or an operator. */
      246 
      247 	input = r->reference.symbol;
      248 	if input->node.type=label_node
      249 	then do;
      250 		intype = label_dtype;
      251 		goto meet2;
      252 	end;
      253 
      254 	if input->symbol.fixed | input->symbol.float
      255 	then do;
      256 		inprec = input->symbol.c_dcl_size;
      257 		inscale = input->symbol.scale;
      258 	end;
      259 
      260 	if input->symbol.bit | input->symbol.char | input->symbol.picture
      261 	then	if r->reference.varying_ref
      262 		then do;
      263 			varying_input = "1"b;
      264 			inclength = 0;
      265 			inlength = create_operator(length_fun,2);
      266 			inlength->operator.processed = "1"b;
      267 			inlength->operand(1) = declare_temporary(integer_type,max_length_precision,0,null);
      268 			inlength->operand(2) = tree;
      269 		end;
      270 		else do;
      271 			inclength = r->reference.c_length;
      272 			inlength = r->reference.length;
      273 		end;
      274 
      275 	if input->symbol.arg_descriptor
      276 	then do;
      277 		inlength = null;
      278 		inprec = default_fix_bin_p;
      279 		inscale = 0;
      280 		defined_itype = integer_type;
      281 	end;
      282 	else	defined_itype = substr (string (input -> symbol.attributes), 1, 36);
      283 
      284 	if input->symbol.picture
      285 	then do;
      286 		string(inpicture) = string(itype);
      287 
      288 		if input->symbol.pix.pic_char
      289 		then	defined_itype = defined_itype & ^picture_mask | char_mask;
      290 		else do;
      291 			defined_itype = defined_itype & ^picture_mask & ^unaligned_mask | aligned_mask | decimal_mask;
      292 
      293 			inprec = input->symbol.pix.pic_size;
      294 
      295 			if ^input->symbol.complex
      296 			then	defined_itype = defined_itype | real_mask;
      297 
      298 			if input->symbol.pix.pic_fixed
      299 			then do;
      300 				defined_itype = defined_itype | fixed_mask;
      301 				inscale = input->symbol.pix.pic_scale;
      302 			end;
      303 			else	defined_itype = defined_itype | float_mask;
      304 		end;
      305 	end;
      306 
      307 	intype = pl1_descriptor_type(defined_itype,(inprec));
      308 
      309 /* check the legality of this attempted conversion. */
      310 
      311 meet2:
      312 	if validate_bit & plain_desc_type(intype)=plain_desc_type(outtype)
      313 	then return;
      314 
      315 	if simplify_for_message(intype)>9 then call pl1_stat_$util_abort(130,input);
      316 	if simplify_for_message(outtype)>9 then call pl1_stat_$util_abort(136,null);
      317 
      318 	if intype ^= outtype
      319 	then do;
      320 		m = message(simplify_for_message(intype),simplify_for_message(outtype));
      321 
      322 		if m ^= 0
      323 		then if ^otype.char | string (inpicture) = "0"b
      324 		     then call print (m);
      325 	     end;
      326 
      327 	if validate_bit
      328 	then return;
      329 
      330 /* If input and output are identical no conversion is done. */
      331 
      332 	if otype.bit | otype.char
      333 	then do;
      334 		alignment_ok = "1"b;
      335 		sign_type_ok = "1"b;
      336 	     end;
      337 	else do;
      338 		alignment_ok = ((itype.aligned = otype.aligned) | (itype.unaligned = otype.unaligned)) & (itype.explicit_packed = otype.explicit_packed);
      339 		sign_type_ok = itype.unsigned = otype.unsigned;
      340 
      341 		if alignment_ok
      342 		then do;
      343 			otype.aligned = itype.aligned;
      344 			otype.unaligned = itype.unaligned;
      345 		     end;
      346 
      347 		if sign_type_ok
      348 		then otype.unsigned = itype.unsigned;
      349 	     end;
      350 
      351 	if known
      352 	then	if intype=outtype & inprec=outprec & inscale=outscale & inlength=tlength & alignment_ok & sign_type_ok
      353 		| otype.char & inprec=outprec & string(inpicture)^="0"b
      354 		then do;
      355 			return_tree = tree;
      356 			goto ret;
      357 		end;
      358 		else go to assign_it;
      359 	else do;
      360 		if plain_desc_type(intype) = plain_desc_type(outtype) & alignment_ok & sign_type_ok
      361 		then do;
      362 			return_tree = tree;
      363 
      364 			if target_must_be_integer
      365 			&  inscale^=0
      366 			then do;
      367 				outprec = max(inprec-inscale,1);
      368 				outscale = 0;
      369 
      370 				goto assign_it;
      371 			end;
      372 
      373 			goto ret;
      374 		end;
      375 
      376 		if otype.char
      377 		&  string(inpicture)^="0"b
      378 		then do;
      379 			return_tree = tree;
      380 			goto ret;
      381 		end;
      382 
      383 		call get_target_size;
      384 
      385 		if target_must_be_integer
      386 		&  outscale^=0
      387 		then do;
      388 			outprec = min(max(outprec-outscale,1),max_p_fix_bin_1);
      389 			outscale = 0;
      390 		end;
      391 
      392 		go to assign_it;
      393 	end;
      394 
      395 /* The input is a token.  It will be converted to conform to the target. If the target
      396*   size is known it is used, otherwise the language rules are used to determine the size.
      397*   If the target is a variable length string an assignment is generated.  All constants
      398*   are declared by calls to declare_constant.	*/
      399 
      400 token_input:
      401 	if (string (otype) & computational_mask) = ""b
      402 	then	call pl1_stat_$util_abort(246,tree);	/* target isn't computational */
      403 
      404 	if (tree->token.type & is_constant)="0"b
      405 	then	call print(247);
      406 
      407 	on conversion, overflow, underflow, fixedoverflow call print(252);
      408 	on size call print(442);
      409 	on stringsize call print(-192);
      410 
      411 	inclength = tree->token.size;
      412 
      413 	/* The input token is either bit, char, or arithmetic. */
      414 
      415 	if tree->token.type=bit_string
      416 	then do;					/* BIT */
      417 		intype=bit_dtype;
      418 		if inclength ^= 0 then inclength = inclength - 1;
      419 		if tree->token.string="b"		/* null bit-string */
      420 		then	tree = create_token("",bit_string);
      421 	end;
      422 
      423 	else
      424 	if tree->token.type=char_string
      425 	then	intype = char_dtype;		/* CHAR */
      426 
      427 	else do;					/* ARITHMETIC */
      428 		call char_to_numeric_(addr(value1),intype,inscale_prec,addr(tree->token.string),(inclength));
      429 		intype = divide(intype,2,15,0);
      430 	end;
      431 
      432 	if ^known
      433 	then call get_target_size;
      434 	else if ^target -> symbol.picture & otype.decimal & ^keep_full_precision
      435 	     then call get_target_size;
      436 
      437 	if target_must_be_integer
      438 	&  inscale^=0
      439 	&  intype ^= char_dtype	/* inscale overlays inclength */
      440 	&  intype ^= bit_dtype	/* .. */
      441 	then do;
      442 		outprec = min(max(outprec-outscale,1),max_p_fix_bin_1);
      443 		outscale = 0;
      444 	end;
      445 
      446 	outtype = pl1_descriptor_type (defined_otype, (outprec));	/* in case outprec changed */
      447 
      448 	/* Now do the assignment. There are three cases...char, bit, or arithmetic */
      449 
      450 	if otype.char				/* CHAR TARGET */
      451 	then do;
      452 		if tree->token.type & is_arith_constant
      453 		then do;
      454 			call print(-234);
      455 
      456 			if outclength > characters_per_double & known
      457 			then do;
      458 				svprec = outclength;
      459 				call get_target_size;
      460 				long_bit = "1"b;
      461 			end;
      462 
      463 			call assign_(addr(value2),outtype*2,(outclength),addr(value1),intype*2,inscale_prec);
      464 
      465 			addr(value1)->char_target  = addr(value2)->char_target;
      466 		end;
      467 		else
      468 
      469 		if tree->token.type = bit_string
      470 		then do;
      471 			n = tree -> token.size;
      472 			if n ^= 0 then n = n - 1;
      473 			if outclength > characters_per_double & known
      474 			then do;
      475 				svprec = outclength;
      476 				outclength = n;
      477 				long_bit = "1"b;
      478 			end;
      479 (stringsize):		addr(value1)->char_target = substr(tree->token.string,1,n);
      480 
      481 			call print(-487);
      482 		end;
      483 
      484 		else
      485 		if tree->token.type = char_string
      486 		then do;
      487 			if outclength > characters_per_double & known
      488 			then do;
      489 				svprec = outclength;
      490 				outclength = tree->token.size;
      491 				long_bit = "1"b;
      492 			end;
      493 (stringsize):		addr(value1)->char_target = tree->token.string;
      494 		end;
      495 	end;
      496 	else
      497 
      498 	if otype.bit				/* BIT TARGET */
      499 	then do;
      500 		if tree->token.type & is_arith_constant
      501 		then do;
      502 			call print(-234);
      503 
      504 			if outclength > bits_per_double & known
      505 			then do;
      506 				svprec = outclength;
      507 				call get_target_size;
      508 				long_bit = "1"b;
      509 			end;
      510 
      511 			call assign_(addr(value2),outtype*2,(outclength),addr(value1),intype*2,inscale_prec);
      512 
      513 			addr(value1)->bit_target = addr(value2)->bit_target;
      514 		end;
      515 
      516 		else
      517 		if tree->token.type=bit_string
      518 		then do;
      519 			n = tree -> token.size ;
      520 			if n ^= 0 then n = n - 1;
      521 			if outclength > bits_per_double & known
      522 			then do;
      523 				svprec = outclength;
      524 				outclength = n;
      525 				long_bit = "1"b;
      526 			end;
      527 (stringsize):		addr(value1)->bit_target = bit(substr(tree -> token.string,1,n));
      528 		end;
      529 
      530 		else
      531 		if tree->token.type=char_string
      532 		then do;
      533 			if outclength > bits_per_double & known
      534 			then do;
      535 				svprec = outclength;
      536 				outclength = tree->token.size;
      537 				long_bit = "1"b;
      538 			end;
      539 (stringsize):		addr(value1)->bit_target = bit(tree->token.string);
      540 
      541 			call print(-489);
      542 		end;
      543 	end;
      544 	else do;					/* ARITHMETIC TARGET */
      545 		if (tree -> token.type & is_arithmetic_constant) ^= is_arithmetic_constant
      546 		then call print(-236);
      547 
      548 		call assign_(addr(value1),outtype*2+binary(otype.unaligned,1),outscale_prec,
      549 			addr(tree->token.string),char_dtype*2,(tree->token.size));
      550 	end;
      551 
      552 	if tlength^=null | long_bit
      553 	then do;
      554 
      555 		/* declare the string constant and then assign it */
      556 
      557 		tree = declare_constant(value1,(defined_otype),(outclength),0);
      558 		if long_bit then outprec = svprec;
      559 		go to assign_it;
      560 	end;
      561 
      562 	if varying_result
      563 	then	if target->symbol.dcl_size=null
      564 		then	outclength = min(outclength,target->symbol.c_dcl_size);
      565 
      566 	tree  ,
      567 	return_tree = declare_constant(value1,(defined_otype),(outprec),(outscale));
      568 
      569 	if varying_result
      570 	then	if target->symbol.dcl_size^=null
      571 		then	goto assign_it;
      572 
      573 	goto ret;
      574 
      575 /* This conversion must be done at runtime */
      576 
      577 assign_it:
      578 	if target_must_be_integer
      579 	then	outprec = max(min(outprec,max_p_fix_bin_1),1);
      580 
      581 	output = create_operator(assign,2);
      582 	if otype.bit | otype.char
      583 	then	output->operand(1) = declare_temporary((defined_otype),outclength,0,tlength);
      584 	else	output->operand(1) = declare_temporary((defined_otype),(outprec),(outscale),tlength);
      585 
      586 	output->operand(2) = tree;
      587 	output->operator.processed = "1"b;
      588 
      589 	if varying_result
      590 	then do;
      591 		output->operand(1) = copy_expression(output->operand(1));
      592 
      593 		output->operand(1)->reference.c_length = min(outclength,target->symbol.c_dcl_size);
      594 
      595 		if target->symbol.dcl_size^=null
      596 		then do;
      597 			r = create_operator(min_fun,3);
      598 			r->operand(1) = declare_temporary(integer_type,max_length_precision,0,null);
      599 			r->operand(2) = copy_expression(target->symbol.dcl_size);
      600 			r->operand(2) = expression_semantics((target->symbol.block_node),pl1_stat_$cur_statement,(r->operand(2)),"0"b);
      601 			r->operand(2) = convert$to_integer((r->operand(2)),integer_type);
      602 			if target->symbol.refer_extents
      603 			then	r->operand(2) = fill_refer((r->operand(2)),(target_ref->reference.qualifier),"1"b);
      604 			r->operand(3) = declare_constant$integer((outclength));
      605 
      606 			output->operand(1)->reference.length = r;
      607 			output->operand(1)->reference.c_length = 0;
      608 		end;
      609 	end;
      610 
      611 	return_tree = output;
      612 
      613 ret:
      614 	if string(inpicture) ="0"b & string(tpicture) ="0"b
      615 	then	return(return_tree);
      616 
      617 	if string(inpicture)^="0"b
      618 	&  string(tpicture)^="0"b
      619 	then do;
      620 	    	if return_tree->node.type=operator_node
      621 		then	if return_tree->operator.op_code=pack
      622 			then	return(return_tree);
      623 
      624 		if ^ itype.char	/* input is not a character picture */
      625 		 & target->symbol.general->reference.symbol->symbol.initial
      626 		   = input->symbol.general->reference.symbol->symbol.initial
      627 		then	return(return_tree);
      628 	end;
      629 
      630 	if string(inpicture)^="0"b	/*   input is a picture   */
      631 	& ^itype.char	/*   input is not a pic char   */
      632 	& ^otype.char	/*   output is not a character string or pic char   */
      633 	then do;
      634 		output = create_operator(unpack,2);
      635 		output->operand(1) = declare_temporary((defined_itype & undesirable_mask),(inprec),(inscale),null);
      636 		output->operator.processed = "1"b;
      637 
      638 		if return_tree->node.type=operator_node
      639 		then	if return_tree->operator.op_code^=std_call
      640 			then do;				/* must be convert-created assign */
      641 				output->operand(2) = return_tree->operand(2);
      642 				return_tree->operand(2) = output;
      643 			end;
      644 			else do;
      645 				output->operand(2) = return_tree;
      646 				return_tree = output;
      647 			end;
      648 		else do;
      649 			output->operand(2) = return_tree;
      650 			return_tree = output;
      651 		end;
      652 	end;
      653 
      654 	if string(tpicture) ^= "0"b
      655 	then do;
      656 		output = create_operator(pack,2);
      657 		p = target->symbol.general->reference.symbol->symbol.initial;
      658 		output->operand(1) = declare_picture_temp(p->picture_image.chars,
      659 			(p->picture_image.scalefactor),
      660 			(tpicture.complex),
      661 			(tpicture.unaligned));
      662 
      663 		output->operand(2) = return_tree;
      664 		output->operator.processed = "1"b;
      665 
      666 		return_tree = output;
      667 	end;
      668 
      669 	return(return_tree);
      670 
      671 /* subroutine to issue diagnostics.	*/
      672 
      673 print: proc(m);
      674 
      675 dcl	symbol ptr;
      676 dcl	m fixed bin;
      677 
      678 	symbol = null;
      679 
      680 	if tree=null then goto print_;
      681 
      682 	if tree->node.type^=reference_node
      683 	&  tree->node.type^=token_node
      684 	then	goto print_;
      685 
      686 	if tree->node.type=reference_node
      687 	then	if tree->reference.symbol->symbol.dcl_type=by_compiler then goto print_;
      688 
      689 	m = m+1;
      690 	symbol = tree;
      691 
      692 print_:
      693 	if m > 0
      694 	then	call pl1_stat_$util_abort(m,symbol);
      695 	else	if ^suppress_bit
      696 		then	call pl1_stat_$util_error(-m,symbol);
      697 
      698 	end print;
      699 
      700 /* subroutine to determine the target size, prec, and scale. */
      701 
      702 get_target_size: proc;
      703 
      704 /* automatic */
      705 
      706 dcl	(oprec, oscale) fixed bin(15);
      707 
      708 /* internal static */
      709 
      710 /* The following array maps descriptor type codes into indexes into the action_index matrix. */
      711 
      712 dcl	simplify (46) fixed bin int static initial (1, 1, 2, 2, 1, 1, 2, 2, 3, 4, 3, 4, 5, 6, 7, 8, 9, 10,
      713 	11, 11, 12, 12, 13, (9)0, 1, 1, (8)0, 3, 4, 3, 4);
      714 
      715 /* The following matrix maps combinations of source type and target type into an action index.
      716*   The values of the simplify matrix correspond to the subscripts of action_index, and are assigned
      717*   as follows:
      718*	1 = fixed bin	8 = entry
      719*	2 = float bin	9 = structure
      720*	3 = fixed dec	10 = area
      721*	4 = float dec	11 = bit
      722*	5 = ptr		12 = char
      723*	6 = offset	13 = file
      724*	7 = label
      725**/
      726 
      727 dcl	action_index(13,13) fixed bin(15) int static initial(
      728 		20, 1, 3, 2, 0, 0, 0, 0, 0, 0, 4, 5, 0,
      729 		22,20, 0,11, 0, 0, 0, 0, 0, 0,12,13, 0,
      730 		 8, 6,20, 7, 0, 0, 0, 0, 0, 0, 9,10, 0,
      731 		21,14,22,20, 0, 0, 0, 0, 0, 0,15,16, 0,
      732 		 0, 0, 0, 0,20,20, 0, 0, 0, 0, 0, 0, 0,
      733 		 0, 0, 0, 0,20,20, 0, 0, 0, 0, 0, 0, 0,
      734 		 0, 0, 0, 0, 0, 0,20, 0, 0, 0, 0, 0, 0,
      735 		 0, 0, 0, 0, 0, 0, 0,20, 0, 0, 0, 0, 0,
      736 		 0, 0, 0, 0, 0, 0, 0, 0,20, 0, 0, 0, 0,
      737 		 0, 0, 0, 0, 0, 0, 0, 0, 0,20, 0, 0, 0,
      738 		17,19,18,18, 0, 0, 0, 0, 0, 0,20,20, 0,
      739 		17,19,18,18, 0, 0, 0, 0, 0, 0,20,20, 0,
      740 		 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,20);
      741 
      742 /* program */
      743 
      744 	go to action (action_index (simplify (intype), simplify (outtype)));
      745 
      746 action(0):					/* conversion error */
      747 	if known then goto exit;			/* It is not an error if the known bit is on */
      748 
      749 						/* bin float -> dec fixed */
      750 	call print(261);
      751 
      752 action(1):					/* bin fixed -> bin float */
      753 	outprec = min(inprec,max_p_flt_bin_2);
      754 	go to exit;
      755 
      756 action(2):					/* bin fixed -> dec float */
      757 	outprec = min(fixed(ceil(inprec/3.32e0)),max_p_dec);
      758 	go to exit;
      759 
      760 action(3):					/* bin fixed -> dec fixed */
      761 	outprec = min(fixed(ceil(inprec/3.32e0))+1,max_p_dec);
      762 	outscale = fixed(ceil(inscale/3.32e0));
      763 	go to exit;
      764 
      765 action(4):					/* bin fixed -> bit */
      766 	outprec = min(max_p_fix_bin_2,max(inprec-inscale,0));
      767 	go to exit;
      768 
      769 action(5):					/* bin fixed -> char */
      770 	outprec = min(fixed(ceil(inprec/3.32e0))+1,max_p_dec)+3;
      771 	outscale = fixed(ceil(abs(inscale)/3.32e0))*sign(inscale);
      772 	if outscale<0 | outscale>outprec
      773 		then outprec = outprec+fixed(log10(abs(outscale)))+1;
      774 	outscale = 0;
      775 	if itype.complex then outprec = outprec*2+1;
      776 	go to exit;
      777 
      778 action(6):					/* dec fixed -> bin float */
      779 	outprec = min(fixed(ceil(inprec*3.32e0)),max_p_flt_bin_2);
      780 	go to exit;
      781 
      782 action(7):					/* dec fixed -> dec float */
      783 	outprec = inprec;
      784 	go to exit;
      785 
      786 action(8):					/* dec fixed -> bin fixed */
      787 	oprec = min(fixed(ceil(inprec*3.32e0))+1,max_p_fix_bin_2);
      788 	oscale = fixed(ceil(inscale*3.32e0));
      789 	if oscale < min_scale | oscale > max_scale
      790 	then	if target_must_be_integer & oscale > 0
      791 		then oscale = oprec - ((fixed(ceil(inprec*3.32e0))+1) - fixed(ceil(abs(inscale)*3.32e0)));
      792 		else call print(479);
      793 	outprec = oprec;
      794 	outscale = oscale;
      795 	go to exit;
      796 
      797 action(9):					/* dec fixed -> bit */
      798 	outprec = min(max_p_fix_bin_2,max(fixed(ceil((inprec-inscale)*3.32e0)),0));
      799 	go to exit;
      800 
      801 action(10):					/* dec fixed -> char */
      802 	outprec = inprec+3;
      803 	if inscale<0 | inscale>inprec
      804 		then outprec = outprec+fixed(log10(abs(inscale)))+1;
      805 	if itype.complex then outprec = outprec *2 +1;
      806 	go to exit;
      807 
      808 action(11):					/* bin float -> dec float */
      809 	outprec = min(fixed(ceil(inprec/3.32e0)),max_p_dec);
      810 	go to exit;
      811 
      812 action(12):					/* bin float -> bit */
      813 	outprec = min(inprec,max_p_fix_bin_2);
      814 	go to exit;
      815 
      816 action(13):					/* bin float -> char */
      817 	outprec = min(fixed(ceil(inprec/3.32e0)),max_p_dec) + 7;
      818 	if itype.complex then outprec = outprec*2+1;
      819 	go to exit;
      820 
      821 action(14):					/* dec float -> bin float */
      822 	outprec = min(fixed(ceil(inprec*3.32e0)),max_p_flt_bin_2);
      823 	go to exit;
      824 
      825 action(15):					/* dec float -> bit */
      826 	outprec = min(fixed(ceil(inprec*3.32e0)),max_p_fix_bin_2);
      827 	go to exit;
      828 
      829 action(16):					/* dec float -> char */
      830 	outprec = inprec+7;
      831 	if itype.complex then outprec = outprec*2+1;
      832 	go to exit;
      833 
      834 action(17):					/* bit or char -> fixed bin */
      835 	outprec = max_p_fix_bin_2;
      836 	go to exit;
      837 
      838 action(18):					/* bit or char -> fixed or float dec */
      839 	outprec = max_p_dec;
      840 	go to exit;
      841 
      842 action(19):					/* bit or char -> float bin */
      843 	outprec = max_p_flt_bin_2;
      844 	go to exit;
      845 
      846 action(20):					/* bit or char -> bit or char  any copy */
      847 	outprec = inprec;
      848 	outscale = inscale;
      849 
      850 	if varying_input
      851 	then do;
      852 	     tlength = inlength;
      853 	     tlength -> operand(2) = share_expression(tree);
      854 	     end;
      855 	else tlength = share_expression(inlength);
      856 	go to exit;
      857 
      858 action(21):					/* dec float -> bin fixed */
      859 	outprec = min(fixed(ceil(inprec*3.32e0)) + 1,max_p_fix_bin_2);
      860 	outscale = 0;
      861 	go to exit;
      862 
      863 action(22):					/* bin float -> bin fixed */
      864 						/* dec float -> dec fixed */
      865 	outprec = inprec;
      866 	outscale = 0;
      867 
      868 exit:
      869 
      870 	end get_target_size;
      871 
  1     1 /* BEGIN INCLUDE FILE ... pl1_descriptor_type_fcn.incl.pl1 */
  1     2 
  1     3 /* Program to convert symbol_node information into a descriptor type code.
  1     4*   Written 780614 by PG
  1     5*	Modified: 25 Apr 1979 by PCK to implement 4-bit decimal
  1     6**/
  1     7 
  1     8 pl1_descriptor_type:
  1     9      procedure (bv_type, bv_prec) returns (fixed bin);
  1    10 
  1    11 /* parameters */
  1    12 
  1    13 dcl (	bv_type bit (36),
  1    14 	bv_prec fixed bin (24)) parameter;
  1    15 
  1    16 /* automatic */
  1    17 
  1    18 dcl	prec fixed bin (24),
  1    19 	dtype fixed bin;
  1    20 
  1    21 /* builtins */
  1    22 
  1    23 dcl	string builtin;
  1    24 
  1    25 /* include files */
  1    26 
  2     1 /* BEGIN INCLUDE FILE ... pl1_symbol_type.incl.pl1 */
  2     2 
  2     3 dcl	1 type,
  2     4 	2 structure	bit,
  2     5 	2 fixed		bit,
  2     6 	2 float		bit,
  2     7 	2 bit		bit,
  2     8 	2 char		bit,
  2     9 	2 ptr		bit,
  2    10 	2 offset		bit,
  2    11 	2 area		bit,
  2    12 	2 label		bit,
  2    13 	2 entry		bit,
  2    14 	2 file		bit,
  2    15 	2 arg_descriptor	bit,
  2    16 	2 storage_block	bit,
  2    17 	2 explicit_packed	bit,
  2    18 	2 condition	bit,
  2    19 	2 format		bit,
  2    20 	2 builtin		bit,
  2    21 	2 generic		bit,
  2    22 	2 picture		bit,
  2    23 	2 dimensioned	bit,
  2    24 	2 initialed	bit,
  2    25 	2 aligned		bit,
  2    26 	2 unaligned	bit,
  2    27 	2 signed		bit,
  2    28 	2 unsigned	bit,
  2    29 	2 precision	bit,
  2    30 	2 varying		bit,
  2    31 	2 local		bit,
  2    32 	2 decimal		bit,
  2    33 	2 binary		bit,
  2    34 	2 real		bit,
  2    35 	2 complex		bit,
  2    36 	2 variable	bit,
  2    37 	2 reducible	bit,
  2    38 	2 irreducible	bit,
  2    39 	2 returns		bit;
  2    40 
  2    41 /* END INCLUDE FILE ... pl1_symbol_type.incl.pl1 */
  1    27 
  3     1 /* BEGIN INCLUDE FILE ... std_descriptor_types.incl.pl1 */
  3     2 
  3     3 
  3     4 /****^  HISTORY COMMENTS:
  3     5*  1) change(86-09-05,JMAthane), approve(86-09-05,MCR7525),
  3     6*     audit(86-09-11,Martinson), install(86-11-12,MR12.0-1208):
  3     7*     Added pascal_string_type_dtype descriptor type.  Its number is 87.
  3     8*     Objects of this type are PASCAL string types.
  3     9*  2) change(88-09-20,WAAnderson), approve(88-09-20,MCR7952),
  3    10*     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
  3    11*     Added the new C types.
  3    12*                                                   END HISTORY COMMENTS */
  3    13 
  3    14 /* This include file defines mnemonic names for the Multics
  3    15*   standard descriptor types, using both pl1 and cobol terminology.
  3    16*   PG 780613
  3    17*   JRD 790530
  3    18*   JRD 791016
  3    19*   MBW 810731
  3    20*   TGO 830614 Add hex types.
  3    21*   Modified June 83 JMAthane to add PASCAL data types
  3    22*   TGO 840120 Add float dec extended and generic, float binary generic
  3    23**/
  3    24 
  3    25      dcl	   (real_fix_bin_1_dtype  init (1),
  3    26 	   real_fix_bin_2_dtype   init (2),
  3    27 	   real_flt_bin_1_dtype   init (3),
  3    28 	   real_flt_bin_2_dtype   init (4),
  3    29 	   cplx_fix_bin_1_dtype   init (5),
  3    30 	   cplx_fix_bin_2_dtype   init (6),
  3    31 	   cplx_flt_bin_1_dtype   init (7),
  3    32 	   cplx_flt_bin_2_dtype   init (8),
  3    33 	   real_fix_dec_9bit_ls_dtype init (9),
  3    34 	   real_flt_dec_9bit_dtype init (10),
  3    35 	   cplx_fix_dec_9bit_ls_dtype init (11),
  3    36 	   cplx_flt_dec_9bit_dtype init (12),
  3    37 	   pointer_dtype	      init (13),
  3    38 	   offset_dtype	      init (14),
  3    39 	   label_dtype	      init (15),
  3    40 	   entry_dtype	      init (16),
  3    41 	   structure_dtype	      init (17),
  3    42 	   area_dtype	      init (18),
  3    43 	   bit_dtype	      init (19),
  3    44 	   varying_bit_dtype      init (20),
  3    45 	   char_dtype	      init (21),
  3    46 	   varying_char_dtype     init (22),
  3    47 	   file_dtype	      init (23),
  3    48 	   real_fix_dec_9bit_ls_overp_dtype init (29),
  3    49 	   real_fix_dec_9bit_ts_overp_dtype init (30),
  3    50 	   real_fix_bin_1_uns_dtype init (33),
  3    51 	   real_fix_bin_2_uns_dtype init (34),
  3    52 	   real_fix_dec_9bit_uns_dtype init (35),
  3    53 	   real_fix_dec_9bit_ts_dtype init (36),
  3    54 	   real_fix_dec_4bit_uns_dtype init (38),	/* digit-aligned */
  3    55 	   real_fix_dec_4bit_ts_dtype init (39),	/* byte-aligned */
  3    56 	   real_fix_dec_4bit_bytealigned_uns_dtype init (40), /* COBOL */
  3    57 	   real_fix_dec_4bit_ls_dtype init (41),	/* digit-aligned */
  3    58 	   real_flt_dec_4bit_dtype init (42),		/* digit-aligned */
  3    59 	   real_fix_dec_4bit_bytealigned_ls_dtype init (43),
  3    60 	   real_flt_dec_4bit_bytealigned_dtype init (44),
  3    61 	   cplx_fix_dec_4bit_bytealigned_ls_dtype init (45),
  3    62 	   cplx_flt_dec_4bit_bytealigned_dtype init (46),
  3    63 	   real_flt_hex_1_dtype   init (47),
  3    64 	   real_flt_hex_2_dtype   init (48),
  3    65 	   cplx_flt_hex_1_dtype   init (49),
  3    66 	   cplx_flt_hex_2_dtype   init (50),
  3    67 	   c_typeref_dtype        init (54),
  3    68 	   c_enum_dtype           init (55),
  3    69              c_enum_const_dtype     init (56),
  3    70 	   c_union_dtype          init (57),
  3    71 	   algol68_straight_dtype init (59),
  3    72 	   algol68_format_dtype   init (60),
  3    73 	   algol68_array_descriptor_dtype init (61),
  3    74 	   algol68_union_dtype    init (62),
  3    75 
  3    76 	   cobol_comp_6_dtype     init (1),
  3    77 	   cobol_comp_7_dtype     init (1),
  3    78 	   cobol_display_ls_dtype init (9),
  3    79 	   cobol_structure_dtype  init (17),
  3    80 	   cobol_char_string_dtype init (21),
  3    81 	   cobol_display_ls_overp_dtype init (29),
  3    82 	   cobol_display_ts_overp_dtype init (30),
  3    83 	   cobol_display_uns_dtype init (35),
  3    84 	   cobol_display_ts_dtype init (36),
  3    85 	   cobol_comp_8_uns_dtype init (38),		/* digit aligned */
  3    86 	   cobol_comp_5_ts_dtype  init (39),		/* byte aligned */
  3    87 	   cobol_comp_5_uns_dtype init (40),
  3    88 	   cobol_comp_8_ls_dtype  init (41),		/* digit aligned */
  3    89 	   real_flt_dec_extended_dtype init (81),	/* 9-bit exponent */
  3    90 	   cplx_flt_dec_extended_dtype init (82),	/* 9-bit exponent */
  3    91 	   real_flt_dec_generic_dtype init (83),	/* generic float decimal */
  3    92 	   cplx_flt_dec_generic_dtype init (84),
  3    93 	   real_flt_bin_generic_dtype init (85),	/* generic float binary */
  3    94 	   cplx_flt_bin_generic_dtype init (86)) fixed bin internal static options (constant);
  3    95 
  3    96      dcl	   (ft_integer_dtype      init (1),
  3    97 	   ft_real_dtype	      init (3),
  3    98 	   ft_double_dtype	      init (4),
  3    99 	   ft_complex_dtype	      init (7),
  3   100 	   ft_complex_double_dtype init (8),
  3   101 	   ft_external_dtype      init (16),
  3   102 	   ft_logical_dtype	      init (19),
  3   103 	   ft_char_dtype	      init (21),
  3   104 	   ft_hex_real_dtype      init (47),
  3   105 	   ft_hex_double_dtype    init (48),
  3   106 	   ft_hex_complex_dtype   init (49),
  3   107 	   ft_hex_complex_double_dtype init (50)
  3   108 	   )		      fixed bin internal static options (constant);
  3   109 
  3   110      dcl	   (algol68_short_int_dtype init (1),
  3   111 	   algol68_int_dtype      init (1),
  3   112 	   algol68_long_int_dtype init (2),
  3   113 	   algol68_real_dtype     init (3),
  3   114 	   algol68_long_real_dtype init (4),
  3   115 	   algol68_compl_dtype    init (7),
  3   116 	   algol68_long_compl_dtype init (8),
  3   117 	   algol68_bits_dtype     init (19),
  3   118 	   algol68_bool_dtype     init (19),
  3   119 	   algol68_char_dtype     init (21),
  3   120 	   algol68_byte_dtype     init (21),
  3   121 	   algol68_struct_struct_char_dtype init (22),
  3   122 	   algol68_struct_struct_bool_dtype init (20)
  3   123 	   )		      fixed bin internal static options (constant);
  3   124 
  3   125      dcl	   (label_constant_runtime_dtype init (24),
  3   126 	   int_entry_runtime_dtype init (25),
  3   127 	   ext_entry_runtime_dtype init (26),
  3   128 	   ext_procedure_runtime_dtype init (27),
  3   129 	   picture_runtime_dtype  init (63)
  3   130 	   )		      fixed bin internal static options (constant);
  3   131 
  3   132      dcl	   (pascal_integer_dtype  init (1),
  3   133 	   pascal_real_dtype      init (4),
  3   134 	   pascal_label_dtype     init (24),
  3   135 	   pascal_internal_procedure_dtype init (25),
  3   136 	   pascal_exportable_procedure_dtype init (26),
  3   137 	   pascal_imported_procedure_dtype init (27),
  3   138 	   pascal_typed_pointer_type_dtype init (64),
  3   139 	   pascal_char_dtype      init (65),
  3   140 	   pascal_boolean_dtype   init (66),
  3   141 	   pascal_record_file_type_dtype init (67),
  3   142 	   pascal_record_type_dtype init (68),
  3   143 	   pascal_set_dtype	      init (69),
  3   144 	   pascal_enumerated_type_dtype init (70),
  3   145 	   pascal_enumerated_type_element_dtype init (71),
  3   146 	   pascal_enumerated_type_instance_dtype init (72),
  3   147 	   pascal_user_defined_type_dtype init (73),
  3   148 	   pascal_user_defined_type_instance_dtype init (74),
  3   149 	   pascal_text_file_dtype init (75),
  3   150 	   pascal_procedure_type_dtype init (76),
  3   151 	   pascal_variable_formal_parameter_dtype init (77),
  3   152 	   pascal_value_formal_parameter_dtype init (78),
  3   153 	   pascal_entry_formal_parameter_dtype init (79),
  3   154 	   pascal_parameter_procedure_dtype init (80),
  3   155 	   pascal_string_type_dtype init (87)) fixed bin int static options (constant);
  3   156 
  3   157 
  3   158 /* END INCLUDE FILE ... std_descriptor_types.incl.pl1 */
  1    28 
  4     1 /* BEGIN INCLUDE FILE ... system.incl.pl1 */
  4     2 
  4     3 /* Modified: 25 Apr 1979 by PCK to implemnt 4-bit decimal */
  4     4 
  4     5 dcl (	max_p_flt_bin_1			initial(27),
  4     6 	max_p_flt_bin_2			initial(63),
  4     7 	max_p_fix_bin_1			initial(35),
  4     8 	max_p_fix_bin_2			initial(71),
  4     9 
  4    10 	max_p_dec				initial(59),
  4    11 	max_p_bin_or_dec			initial (71),	/* max (max_p_fix_bin_2, max_p_dec) */
  4    12 
  4    13 	min_scale				initial(-128),
  4    14 	max_scale				initial(+127),
  4    15 	max_bit_string			initial(9437184),
  4    16 	max_char_string			initial(1048576),
  4    17 	max_area_size			initial(262144),
  4    18 	min_area_size			initial(28),
  4    19 
  4    20 	max_bit_string_constant		initial (253),	/* max length of bit literals */
  4    21 	max_char_string_constant		initial (254),	/* max length of character literals */
  4    22 	max_identifier_length		initial (256),
  4    23 	max_number_of_dimensions		initial (127),
  4    24 
  4    25 	max_length_precision		initial(24),
  4    26 	max_offset_precision		initial(24),	/* 18 bits for word offset + 6 bits for bit offset */
  4    27 
  4    28 	max_words_per_variable		initial (262144),
  4    29 
  4    30 	bits_per_word			initial(36),
  4    31 	bits_per_double			initial(72),
  4    32 	packed_digits_per_character		initial(2),
  4    33 	characters_per_half			initial(2),
  4    34 	characters_per_word			initial(4),
  4    35 	characters_per_double		initial(8),
  4    36 
  4    37 	bits_per_character			initial(9),
  4    38 	bits_per_half			initial(18),
  4    39 	bits_per_decimal_digit		initial(9),
  4    40 	bits_per_binary_exponent		initial(8),
  4    41 	bits_per_packed_ptr			initial(36),
  4    42 	words_per_packed_pointer		initial(1),
  4    43 
  4    44 	words_per_fix_bin_1			initial(1),
  4    45 	words_per_fix_bin_2			initial(2),
  4    46 	words_per_flt_bin_1			initial(1),
  4    47 	words_per_flt_bin_2			initial(2),
  4    48 	words_per_varying_string_header	initial(1),
  4    49 	words_per_offset			initial(1),
  4    50 	words_per_pointer			initial(2),
  4    51 	words_per_label_var			initial(4),
  4    52 	words_per_entry_var			initial(4),
  4    53 	words_per_file_var			initial(4),
  4    54 	words_per_format			initial(4),
  4    55 	words_per_condition_var		initial(6),
  4    56 
  4    57 	max_index_register_value		initial(262143),
  4    58 	max_signed_index_register_value	initial(131071),
  4    59 
  4    60 	max_signed_xreg_precision		initial(17),
  4    61 	max_uns_xreg_precision		initial(18),
  4    62 
  4    63 	default_area_size			initial(1024),
  4    64 	default_flt_bin_p			initial(27),
  4    65 	default_fix_bin_p			initial(17),
  4    66 	default_flt_dec_p			initial(10),
  4    67           default_fix_dec_p   		initial(7)) fixed bin(31) internal static options(constant);
  4    68 
  4    69 dcl	bits_per_digit			initial(4.5)  fixed bin(31,1) internal static options(constant);
  4    70 
  4    71 dcl (	integer_type		initial("010000000000000000000100000001100000"b),
  4    72 	dec_integer_type		initial("010000000000000000000100000010100000"b),
  4    73 	pointer_type		initial("000001000000000000000100000000000000"b),
  4    74 	real_type			initial("001000000000000000000100000001100000"b),
  4    75 	complex_type		initial("001000000000000000000100000001010000"b),
  4    76 	builtin_type		initial("000000000000000010000000000000000000"b),
  4    77 	storage_block_type		initial("000000000000100000000000000000000000"b),
  4    78 	arg_desc_type		initial("000000000001000000000000000000000000"b),
  4    79 	local_label_var_type	initial("000000001000000000000100000100001000"b),
  4    80 	entry_var_type		initial("000000000100000000000000000000001000"b),
  4    81 	bit_type			initial("000100000000000000000000000000000000"b),
  4    82 	char_type			initial("000010000000000000000000000000000000"b)) bit(36) aligned int static
  4    83 									options(constant);
  4    84 
  4    85 /* END INCLUDE FILE ... system.incl.pl1 */
  1    29 
  1    30 
  1    31 /* program */
  1    32 
  1    33 	string (type) = bv_type;
  1    34 	prec = bv_prec;
  1    35 
  1    36 	if type.structure
  1    37 	then dtype = structure_dtype;
  1    38 	else
  1    39 
  1    40 	if type.real
  1    41 	then if type.fixed
  1    42 	     then if type.binary
  1    43 		then if type.unsigned
  1    44 		     then if prec <= max_p_fix_bin_1
  1    45 			then dtype = real_fix_bin_1_uns_dtype;
  1    46 			else dtype = real_fix_bin_2_uns_dtype;
  1    47 		     else if prec <= max_p_fix_bin_1
  1    48 			then dtype = real_fix_bin_1_dtype;
  1    49 			else dtype = real_fix_bin_2_dtype;
  1    50 		else if type.unaligned
  1    51 		     then dtype = real_fix_dec_4bit_bytealigned_ls_dtype;
  1    52 		     else dtype = real_fix_dec_9bit_ls_dtype;
  1    53 	     else if type.binary
  1    54 		then if prec <= max_p_flt_bin_1
  1    55 		     then dtype = real_flt_bin_1_dtype;
  1    56 		     else dtype = real_flt_bin_2_dtype;
  1    57 		else if type.unaligned
  1    58 		     then dtype = real_flt_dec_4bit_bytealigned_dtype;
  1    59 		     else dtype = real_flt_dec_9bit_dtype;
  1    60 	else
  1    61 
  1    62 	if type.complex
  1    63 	then if type.fixed
  1    64 	     then if type.binary
  1    65 		then if prec <= max_p_fix_bin_1
  1    66 		     then dtype = cplx_fix_bin_1_dtype;
  1    67 		     else dtype = cplx_fix_bin_2_dtype;
  1    68 		else if type.unaligned
  1    69 		     then dtype = cplx_fix_dec_4bit_bytealigned_ls_dtype;
  1    70 		     else dtype = cplx_fix_dec_9bit_ls_dtype;
  1    71 	     else if type.binary
  1    72 		then if prec <= max_p_flt_bin_1
  1    73 		     then dtype = cplx_flt_bin_1_dtype;
  1    74 		     else dtype = cplx_flt_bin_2_dtype;
  1    75 		else if type.unaligned
  1    76 		     then dtype = cplx_flt_dec_4bit_bytealigned_dtype;
  1    77 		     else dtype = cplx_flt_dec_9bit_dtype;
  1    78 	else
  1    79 
  1    80 	if type.bit
  1    81 	then if type.varying
  1    82 	     then dtype = varying_bit_dtype;
  1    83 	     else dtype = bit_dtype;
  1    84 	else
  1    85 
  1    86 	if type.char
  1    87 	then if type.varying
  1    88 	     then dtype = varying_char_dtype;
  1    89 	     else dtype = char_dtype;
  1    90 	else
  1    91 
  1    92 	if type.ptr
  1    93 	then dtype = pointer_dtype;
  1    94 	else
  1    95 
  1    96 	if type.offset
  1    97 	then dtype = offset_dtype;
  1    98 	else
  1    99 
  1   100 	if type.area
  1   101 	then dtype = area_dtype;
  1   102 	else
  1   103 
  1   104 	if type.label
  1   105 	then dtype = label_dtype;
  1   106 	else
  1   107 
  1   108 	if type.entry
  1   109 	then dtype = entry_dtype;
  1   110 	else
  1   111 
  1   112 	if type.file
  1   113 	then dtype = file_dtype;
  1   114 	else
  1   115 
  1   116 	if type.picture
  1   117 	then dtype = char_dtype;
  1   118 	else dtype = 0;
  1   119 
  1   120 	return (dtype);
  1   121 
  1   122      end /* pl1_descriptor_type */;
  1   123 
  1   124 /* END INCLUDE FILE ... pl1_descriptor_type_fcn.incl.pl1 */
      872 
      873 
  5     1 /* BEGIN INCLUDE FILE ... semant.incl.pl1 */
  5     2 
  5     3 /* Modified: 30 Aug 1979 by PCK to fix 1804 and 1823 */
  5     4 /* Modified: 26 Aug 1979 by PCK to implement by name assignment */
  5     5 
  5     6 
  5     7 declare	alloc_semantics	entry(pointer,pointer,pointer);
  5     8 			/* parameter 1:	(input)	block node pointer		*/
  5     9 			/* parameter 2:	(input)	statement node pointer	*/
  5    10 			/* parameter 3:	(in/out)	tree pointer		*/
  5    11 
  5    12 declare	alloc_semantics$init_only entry(pointer,pointer,pointer);
  5    13 			/* parameter 1:	(input)	qualifier pointer		*/
  5    14 			/* parameter 2:	(input)	statement node pointer	*/
  5    15 			/* parameter 3:	(input)	symbol node pointer		*/
  5    16 
  5    17 declare	builtin		entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  5    18 			returns(pointer);
  5    19 			/* parameter 1:	(input)	block node pointer		*/
  5    20 			/* parameter 2:	(input)	statement node pointer	*/
  5    21 			/* parameter 3:	(input)	tree pointer		*/
  5    22 			/* parameter 4:	(input)	subscript pointer		*/
  5    23 			/* parameter 5:	(input)	builtin symbol node pointer	*/
  5    24 			/* parameter 6:	(in/out)	context			*/
  5    25 			/* return:	(output)	tree pointer		*/
  5    26 
  5    27 declare	check_star_extents	entry(pointer,pointer);
  5    28 			/* parameter 1:	(input) symbol node of procedure	*/
  5    29 			/* parameter 2:	(input) argument list pointer		*/
  5    30 
  5    31 declare	compare_declaration	entry(pointer,pointer,bit(1) aligned) reducible
  5    32 			returns(bit(1) aligned);
  5    33 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  5    34 			/* parameter 2:	(input)	symbol node ptr	*/
  5    35 			/* parameter 3:	(input)	"1"b if aligned attribute ignored for string	*/
  5    36 			/* return:	(output)	compare bit		*/
  5    37 
  5    38 declare	context_processor	entry(pointer,label);
  5    39 			/* parameter 1:	(input)	root block node pointer	*/
  5    40 
  5    41 declare	declare		entry(pointer);
  5    42 			/* parameter 1:	(input)	symbol node pointer		*/
  5    43 
  5    44 declare	declare_structure	entry(pointer);
  5    45 			/* parameter 1:	(input)	symbol node pointer		*/
  5    46 
  5    47 declare	defined_reference	entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  5    48 			returns(pointer);
  5    49 			/* parameter 1:	(input)	block node pointer		*/
  5    50 			/* parameter 2:	(input)	statement node pointer	*/
  5    51 			/* parameter 3:	(input)	tree pointer		*/
  5    52 			/* parameter 4:	(input)	subscript list pointer or null*/
  5    53 			/* parameter 5:	(input)	symbol node pointer		*/
  5    54 			/* parameter 6:	(in/out)	context			*/
  5    55 			/* return:	(output)	tree pointer		*/
  5    56 
  5    57 declare	do_semantics	entry(pointer,pointer,pointer);
  5    58 			/* parameter 1:	(input)	block node pointer		*/
  5    59 			/* parameter 2:	(input)	statement node pointer	*/
  5    60 			/* parameter 3:	(input)	tree pointer		*/
  5    61 
  5    62 declare	expand_assign	entry(pointer,pointer,pointer,bit(36) aligned,pointer)
  5    63 			returns(pointer);
  5    64 			/* parameter 1:	(input)	block node pointer		*/
  5    65 			/* parameter 2:	(input)	statement node pointer	*/
  5    66 			/* parameter 3:	(input)	tree pointer		*/
  5    67 			/* parameter 4:	(in/out)	context			*/
  5    68 			/* parameter 5:	(input)	aggregate reference node ptr	*/
  5    69 			/* return:	(output)	tree pointer		*/
  5    70 
  5    71 declare	expand_by_name	entry(pointer,pointer,pointer);
  5    72 			/* parameter 1:	(input)	block node pointer		*/
  5    73 			/* parameter 2:	(input)	statement node pointer	*/
  5    74 			/* parameter 3:	(input/output)	tree pointer		*/
  5    75 
  5    76 declare	expand_infix	entry(pointer,pointer,pointer,bit(36) aligned)
  5    77 			returns(pointer);
  5    78 			/* parameter 1:	(input)	block node pointer		*/
  5    79 			/* parameter 2:	(input)	statement node pointer	*/
  5    80 			/* parameter 3:	(input)	tree pointer		*/
  5    81 			/* parameter 4:	(in/out)	context			*/
  5    82 			/* return:	(output)	tree pointer		*/
  5    83 
  5    84 declare	expand_initial	entry(pointer,pointer,pointer);
  5    85 			/* parameter 1:	(input)	symbol node pointer		*/
  5    86 			/* parameter 2:	(input)	statement node pointer	*/
  5    87 			/* parameter 3:	(input)	locator			*/
  5    88 
  5    89 declare	expand_prefix	entry(pointer,pointer,pointer,bit(36) aligned)
  5    90 			returns(pointer);
  5    91 			/* parameter 1:	(input)	block node pointer		*/
  5    92 			/* parameter 2:	(input)	statement node pointer	*/
  5    93 			/* parameter 3:	(input)	tree pointer		*/
  5    94 			/* parameter 4:	(in/out)	context			*/
  5    95 			/* return:	(output)	tree pointer		*/
  5    96 
  5    97 declare	expand_primitive	entry(pointer,pointer,pointer,bit(36) aligned)
  5    98 			returns(pointer);
  5    99 			/* parameter 1:	(input)	block node pointer		*/
  5   100 			/* parameter 2:	(input)	statement node pointer	*/
  5   101 			/* parameter 3:	(input)	tree pointer		*/
  5   102 			/* parameter 4:	(input)	context			*/
  5   103 			/* return:	(output)	tree pointer		*/
  5   104 
  5   105 declare	expression_semantics entry(pointer,pointer,pointer,bit(36) aligned)
  5   106 			returns(pointer);
  5   107 			/* parameter 1:	(input)	block node pointer		*/
  5   108 			/* parameter 2:	(input)	statement node pointer	*/
  5   109 			/* parameter 3:	(input)	tree pointer		*/
  5   110 			/* parameter 4:	(in/out)	context			*/
  5   111 			/* return:	(output)	tree pointer		*/
  5   112 
  5   113 declare	fill_refer	entry(pointer,pointer,bit(1) aligned)
  5   114 			returns(pointer);
  5   115 			/* parameter 1:	(input)	null,ref node,op node ptr */
  5   116 			/* parameter 2:	(input)	null,ref node,op node ptr */
  5   117 			/* parameter 3:	(input)	copy switch for param 2 */
  5   118 			/* return:	(output)	ptr to processed tree */
  5   119 
  5   120 declare	io_data_list_semantics$format_list_semantics entry(pointer,pointer,pointer);
  5   121 			/* parameter 1:	(input)	block node pointer		*/
  5   122 			/* parameter 2:	(input)	statement node pointer	*/
  5   123 			/* parameter 3:	(in/out)	tree pointer		*/
  5   124 
  5   125 declare	function		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  5   126 			returns(pointer);
  5   127 			/* parameter 1:	(input)	block node pointer		*/
  5   128 			/* parameter 2:	(input)	statement node pointer	*/
  5   129 			/* parameter 3:	(input)	tree pointer		*/
  5   130 			/* parameter 4:	(input)	symbol node pointer		*/
  5   131 			/* parameter 5:	(in/out)	context			*/
  5   132 			/* return:	(output)	tree pointer		*/
  5   133 
  5   134 declare	generic_selector	entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  5   135 			returns(pointer);
  5   136 			/* parameter 1:	(input)	block node pointer	*/
  5   137 			/* parameter 2:	(input)	statement node pointer	*/
  5   138 			/* parameter 3:	(input)	tree pointer	*/
  5   139 			/* parameter 4:	(input)	pointer to argument list	*/
  5   140 			/* parameter 5:	(in/out)	context		*/
  5   141 			/* return:	(output)	tree pointer	*/
  5   142 
  5   143 declare	io_data_list_semantics entry(pointer,pointer,pointer);
  5   144 			/* parameter 1:	(input)	block node pointer		*/
  5   145 			/* parameter 2:	(input)	statement node pointer	*/
  5   146 			/* parameter 3:	(input)	operator node pointer	*/
  5   147 
  5   148 declare	io_semantics	entry(pointer,pointer,pointer);
  5   149 			/* parameter 1:	(input)	block node pointer		*/
  5   150 			/* parameter 2:	(input)	statement node pointer	*/
  5   151 			/* parameter 3:	(input)	tree pointer		*/
  5   152 
  5   153 declare	lookup		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  5   154 			returns(bit(1) aligned);
  5   155 			/* parameter 1:	(input)	block node pointer		*/
  5   156 			/* parameter 2:	(input)	stmnt|symbol node pointer	*/
  5   157 			/* parameter 3:	(input)	token or reference node ptr	*/
  5   158 			/* parameter 4:	(output)	symbol node pointer		*/
  5   159 			/* parameter 5:	(in/out)	context			*/
  5   160 			/* return:	(output)	symbol found bit		*/
  5   161 
  5   162 declare	make_non_quick	entry(pointer, bit (36) aligned);
  5   163 			/* parameter 1:	(input)	tree pointer	*/
  5   164 			/* parameter 2:	(input)	reason why being made nonquick */
  5   165 
  5   166 declare	match_arguments	entry(pointer,pointer) reducible
  5   167 			returns(bit(1) aligned);
  5   168 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  5   169 			/* parameter 2:	(input)	reference or symbol node ptr	*/
  5   170 			/* return:	(output)	compare bit		*/
  5   171 
  5   172 declare	offset_adder	entry(pointer,fixed binary(31),fixed binary(3),bit(1) aligned,
  5   173 			      pointer,fixed binary(31),fixed binary(3),bit(1) aligned,bit(1));
  5   174 			/* parameter 1:	(in/out)	tree pointer		*/
  5   175 			/* parameter 2:	(in/out)	constant size		*/
  5   176 			/* parameter 3:	(in/out)	units			*/
  5   177 			/* parameter 4:	(in/out) 	ON if units ^= word_, but tree in words	*/
  5   178 			/* parameter 5:	(input)	tree pointer		*/
  5   179 			/* parameter 6:	(input)	constant size		*/
  5   180 			/* parameter 7:	(input)	units			*/
  5   181 			/* parameter 8:	(input)	ON if units ^= word_, but tree in words	*/
  5   182 			/* parameter 9:	(input)	ON if should not improve units	*/
  5   183 
  5   184 declare	operator_semantics	entry(pointer,pointer,pointer,bit(36) aligned)
  5   185 			returns(pointer);
  5   186 			/* parameter 1:	(input)	block node pointer		*/
  5   187 			/* parameter 2:	(input)	statement node pointer	*/
  5   188 			/* parameter 3:	(input)	tree pointer		*/
  5   189 			/* parameter 4:	(in/out)	context			*/
  5   190 			/* return:	(output)	tree pointer		*/
  5   191 
  5   192 declare	propagate_bit	entry(pointer,fixed binary(15));
  5   193 			/* parameter 1:	(input)	symbol node pointer		*/
  5   194 			/* parameter 2:	(input)	attribute number		*/
  5   195 
  5   196 declare	semantic_translator$call_es entry(pointer,pointer,pointer,label,bit(1) aligned)
  5   197 			returns(pointer);
  5   198 			/* parameter 1:	(input)	block ptr	*/
  5   199 			/* parameter 2:	(input)	statement ptr	*/
  5   200 			/* parameter 3:	(input)	tree ptr	*/
  5   201 			/* parameter 4:	(input)	failure label	*/
  5   202 			/* parameter 5:	(input)	"1"b -- convert to integer	*/
  5   203 			/* return:	(output)	tree ptr		*/
  5   204 
  5   205 declare	simplify_expression	entry(pointer,fixed bin,bit(1)aligned);
  5   206 			/* parameter 1:	(in/out)	tree pointer		*/
  5   207 			/* parameter 2:	(output)	value of constant, if the entire tree
  5   208*						is simplified		*/
  5   209 			/* parameter 3:	(output)	bit indicating if the tree has
  5   210*						been simplified		*/
  5   211 
  5   212 declare	simplify_offset	entry(pointer,bit(36) aligned);
  5   213 			/* parameter 1:	(input)	reference node pointer	*/
  5   214 			/* parameter 2:	(input)	context			*/
  5   215 
  5   216 declare	subscripter	entry(pointer,pointer,pointer,pointer,pointer)
  5   217 			returns(pointer);
  5   218 			/* parameter 1:	(input)	block node pointer		*/
  5   219 			/* parameter 2:	(input)	statement node pointer	*/
  5   220 			/* parameter 3:	(input)	tree pointer		*/
  5   221 			/* parameter 4:	(in/out)	subscript list pointer	*/
  5   222 			/* parameter 5:	(input)	symbol node pointer		*/
  5   223 			/* return:	(output)	reference node pointer	*/
  5   224 
  5   225 declare	validate		entry(pointer);
  5   226 			/* parameter 1:	(input)	symbol node pointer		*/
  5   227 
  6     1 /****^  *********************************************************
  6     2*        *                                                       *
  6     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  6     4*        *                                                       *
  6     5*        ********************************************************* */
  6     6 
  6     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  6     8 
  6     9 
  6    10 /****^  HISTORY COMMENTS:
  6    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  6    12*     install(89-07-31,MR12.3-1066):	
  6    13*     Removed the obsolete parameter source_line from the dcl of error_().
  6    14*                                                   END HISTORY COMMENTS */
  6    15 
  6    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  6    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  6    18* */
  6    19 
  6    20 declare	adjust_count	entry(pointer);
  6    21 			/* parameter 1:	(input)	any node pointer		*/
  6    22 
  6    23 declare	bindec		entry(fixed bin(31)) reducible
  6    24 			returns(character(12) aligned);
  6    25 			/* parameter 1:	(input)	bin value			*/
  6    26 			/* return:	(output)	character value with blanks	*/
  6    27 
  6    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  6    29 			returns(character(12) aligned varying);
  6    30 			/* parameter 1:	(input)	binary value		*/
  6    31 			/* return:	(output)	char value without blanks	*/
  6    32 
  6    33 declare	binoct		entry(fixed bin(31)) reducible
  6    34 			returns(char(12) aligned);
  6    35 			/* parameter 1:	(input)	binary value		*/
  6    36 			/* return:	(output)	char value with blanks	*/
  6    37 
  6    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  6    39 			returns(char(12) aligned);
  6    40 			/* parameter 1:	(input)	binary value		*/
  6    41 			/* return:	(output)	right-aligned char value	*/
  6    42 
  6    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  6    44 			returns(char(12) varying aligned);
  6    45 			/* parameter 1:	(input)	binary value		*/
  6    46 			/* returns:	(output)	char value without blanks	*/
  6    47 
  6    48 declare	compare_expression	entry(pointer,pointer) reducible
  6    49 			returns(bit(1) aligned);
  6    50 			/* parameter 1:	(input)	any node pointer		*/
  6    51 			/* parameter 2:	(input)	any node pointer		*/
  6    52 			/* return:	(output)	compare bit		*/
  6    53 
  6    54 declare	constant_length	entry (pointer, fixed bin (71))
  6    55 			returns (bit (1) aligned);
  6    56 			/* parameter 1:	(input)	reference node pointer	*/
  6    57 			/* parameter 2:	(input)	value of constant length	*/
  6    58 			/* return:	(output)	"1"b if constant length	*/
  6    59 
  6    60 declare	convert		entry(pointer,bit(36) aligned)
  6    61 			returns(pointer);
  6    62 			/* parameter 1:	(input)	any node pointer		*/
  6    63 			/* parameter 2:	(input)	target type		*/
  6    64 			/* return:	(output)	target value tree pointer	*/
  6    65 
  6    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  6    67 			returns(pointer);
  6    68 			/* parameter 1:	(input)	any node pointer		*/
  6    69 			/* parameter 2:	(input)	target type		*/
  6    70 			/* return:	(output)	target value tree pointer	*/
  6    71 
  6    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  6    73 			returns(pointer);
  6    74 			/* parameter 1:	(input)	any node pointer		*/
  6    75 			/* parameter 2:	(input)	target type		*/
  6    76 			/* return:	(output)	target value tree pointer	*/
  6    77 
  6    78 declare	convert$validate	entry(pointer,pointer);
  6    79 			/* parameter 1:	(input)	source value tree pointer	*/
  6    80 			/* parameter 2:	(input)	target reference node pointer	*/
  6    81 
  6    82 declare	convert$to_target_fb entry(pointer,pointer)
  6    83 			returns(pointer);
  6    84 			/* parameter 1:	(input)	source value tree pointer	*/
  6    85 			/* parameter 2:	(input)	target reference node pointer	*/
  6    86 			/* return:	(output)	target value tree pointer	*/
  6    87 
  6    88 declare	convert$to_target	entry(pointer,pointer)
  6    89 			returns(pointer);
  6    90 			/* parameter 1:	(input)	source value tree pointer	*/
  6    91 			/* parameter 2:	(input)	target reference node pointer	*/
  6    92 			/* return:	(output)	target value tree pointer	*/
  6    93 
  6    94 declare	copy_expression	entry(pointer unaligned)
  6    95 			returns(pointer);
  6    96 			/* parameter 1:	(input)	any node pointer		*/
  6    97 			/* return:	(output)	any node pointer		*/
  6    98 
  6    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  6   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  6   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  6   102 
  6   103 declare	copy_unique_expression entry(pointer)
  6   104 			returns(pointer);
  6   105 			/* parameter 1:	(input)	any node pointer		*/
  6   106 			/* return:	(output)	any node pointer		*/
  6   107 
  6   108 declare	create_array	entry()
  6   109 			returns(pointer);
  6   110 			/* return:	(output)	array node pointer		*/
  6   111 
  6   112 declare	create_block	entry(bit(9) aligned,pointer)
  6   113 			returns(pointer);
  6   114 			/* parameter 1:	(input)	block type		*/
  6   115 			/* parameter 2:	(input)	father block node pointer	*/
  6   116 			/* return:	(output)	block node pointer		*/
  6   117 
  6   118 declare	create_bound	entry()
  6   119 			returns(pointer);
  6   120 			/* return:	(output)	bound node pointer		*/
  6   121 
  6   122 declare	create_context	entry(pointer,pointer)
  6   123 			returns(pointer);
  6   124 			/* parameter 1:	(input)	block node pointer		*/
  6   125 			/* parameter 2:	(input)	token pointer		*/
  6   126 			/* return:	(output)	context node pointer	*/
  6   127 
  6   128 declare	create_cross_reference entry()
  6   129 			returns(pointer);
  6   130 			/* return:	(output)	cross reference node pointer	*/
  6   131 
  6   132 declare	create_default	entry
  6   133 			returns(pointer);
  6   134 			/* return:	(output)	default node pointer	*/
  6   135 
  6   136 declare	create_identifier	entry()
  6   137 			returns(pointer);
  6   138 			/* return:	(output)	token node pointer		*/
  6   139 
  6   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  6   141 			returns(pointer);
  6   142 			/* parameter 1:	(input)	block node pointer		*/
  6   143 			/* parameter 2:	(input)	token node pointer		*/
  6   144 			/* parameter 3:	(input)	declare type		*/
  6   145 			/* return:	(output)	label node pointer		*/
  6   146 
  6   147 declare	create_list	entry(fixed bin(15))
  6   148 			returns(pointer);
  6   149 			/* parameter 1:	(input)	number of list elements	*/
  6   150 			/* return:	(output)	list node pointer		*/
  6   151 
  6   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  6   153 			returns(pointer);
  6   154 			/* parameter 1:	(input)	operator type		*/
  6   155 			/* parameter 2:	(input)	number of operands		*/
  6   156 			/* return:	(output)	operator node pointer	*/
  6   157 
  6   158 declare	create_reference	entry(pointer)
  6   159 			returns(pointer);
  6   160 			/* parameter 1:	(input)	symbol node pointer		*/
  6   161 			/* return:	(output)	reference node pointer	*/
  6   162 
  6   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  6   164 			returns(pointer);
  6   165 			/* parameter 1:	(input)	statement type		*/
  6   166 			/* parameter 2:	(input)	block node pointer		*/
  6   167 			/* parameter 3:	(input)	label node pointer		*/
  6   168 			/* parameter 4:	(input)	conditions		*/
  6   169 			/* return:	(output)	statement node pointer	*/
  6   170 
  6   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  6   172 			returns(pointer);
  6   173 			/* parameter 1:	(input)	statement type		*/
  6   174 			/* parameter 2:	(input)	block node pointer		*/
  6   175 			/* parameter 3:	(input)	label node pointer		*/
  6   176 			/* parameter 4:	(input)	conditions		*/
  6   177 			/* return:	(output)	statement node pointer	*/
  6   178 
  6   179 declare	create_storage	entry(fixed bin(15))
  6   180 			returns(pointer);
  6   181 			/* parameter 1:	(input)	number of words		*/
  6   182 			/* return:	(output)	storage block pointer	*/
  6   183 
  6   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  6   185 			returns(pointer);
  6   186 			/* parameter 1:	(input)	block node pointer		*/
  6   187 			/* parameter 2:	(input)	token node pointer		*/
  6   188 			/* parameter 3:	(input)	declare type		*/
  6   189 			/* return:	(output)	symbol node pointer		*/
  6   190 
  6   191 declare	create_token	entry (character (*), bit (9) aligned)
  6   192 			returns (ptr);
  6   193 			/* parameter 1:	(input)	token string		*/
  6   194 			/* parameter 2:	(input)	token type		*/
  6   195 			/* return:	(output)	token node ptr		*/
  6   196 
  6   197 declare	create_token$init_hash_table entry ();
  6   198 
  6   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  6   200 			returns (ptr);
  6   201 			/* parameter 1:	(input)	token string		*/
  6   202 			/* parameter 2:	(input)	token type		*/
  6   203 			/* parameter 3:	(input)	protected flag		*/
  6   204 			/* return:	(output)	token node ptr		*/
  6   205 
  6   206 declare	decbin		entry(character(*) aligned) reducible
  6   207 			returns(fixed bin(31));
  6   208 			/* parameter 1:	(input)	decimal character string	*/
  6   209 			/* return:	(output)	binary value		*/
  6   210 
  6   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  6   212 			returns(pointer);
  6   213 			/* parameter 1:	(input)	value			*/
  6   214 			/* parameter 2:	(input)	type			*/
  6   215 			/* parameter 3:	(input)	size			*/
  6   216 			/* parameter 4:	(input)	scale			*/
  6   217 			/* return:	(output)	reference node pointer	*/
  6   218 
  6   219 declare	declare_constant$bit entry(bit(*) aligned)
  6   220 			returns(pointer);
  6   221 			/* parameter 1:	(input)	bit			*/
  6   222 			/* return:	(output)	reference node pointer	*/
  6   223 
  6   224 declare	declare_constant$char entry(character(*) aligned)
  6   225 			returns(pointer);
  6   226 			/* parameter 1:	(input)	character			*/
  6   227 			/* return:	(output)	reference node pointer	*/
  6   228 
  6   229 declare	declare_constant$desc entry(bit(*) aligned)
  6   230 			returns(pointer);
  6   231 			/* parameter 1:	(input)	descriptor bit value	*/
  6   232 			/* return:	(output)	reference node pointer	*/
  6   233 
  6   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  6   235 			returns(pointer);
  6   236 			/* parameter 1:	(input)	integer			*/
  6   237 			/* return:	(output)	reference node pointer	*/
  6   238 
  6   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  6   240 			returns(pointer);
  6   241 			/* parameter 1:	(input)	block node pointer		*/
  6   242 			/* parameter 2:	(input)	statement node pointer	*/
  6   243 			/* parameter 3:	(input)	symbol node pointer		*/
  6   244 			/* parameter 4:	(input)	loc pointer		*/
  6   245 			/* parameter 5:	(input)	array descriptor bit
  6   246*						cross_section bit	*/
  6   247 			/* return:	(output)	reference node pointer	*/
  6   248 
  6   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  6   250 			returns(pointer);
  6   251 			/* parameter 1:	(input)	block node pointer	*/
  6   252 			/* parameter 2:	(input)	statement node pointer 	*/
  6   253 			/* parameter 3:	(input)	symbol node pointer	*/
  6   254 			/* parameter 4:	(input)	loc pointer	*/
  6   255 			/* parameter 5:	(input)	array descriptor bit
  6   256*						cross_section bit	*/
  6   257 			/* return:	(output)	reference node pointer	*/
  6   258 
  6   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  6   260 			returns(pointer);
  6   261 			/* parameter 1:	(input)	block node pointer		*/
  6   262 			/* parameter 2:	(input)	statement node pointer	*/
  6   263 			/* parameter 3:	(input)	symbol node pointer		*/
  6   264 			/* parameter 4:	(input)	loc pointer		*/
  6   265 			/* parameter 5:	(input)	array descriptor bit
  6   266*						cross_section bit	*/
  6   267 			/* return:	(output)	reference node pointer	*/
  6   268 
  6   269 declare	declare_integer	entry(pointer)
  6   270 			returns(pointer);
  6   271 			/* parameter 1:	(input)	block node pointer		*/
  6   272 			/* return:	(output)	reference node pointer 	*/
  6   273 
  6   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  6   275 			/* parameter 1:	(input)	picture string		*/
  6   276 			/* parameter 2:	(input)	symbol node pointer		*/
  6   277 			/* parameter 3:	(output)	error code, if any		*/
  6   278 
  6   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  6   280 			returns(pointer);
  6   281 			/* parameter 1:	(input)	picture string		*/
  6   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  6   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  6   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  6   285 			/* return:	(output)	reference node pointer	*/
  6   286 
  6   287 declare	declare_pointer	entry(pointer)
  6   288 			returns(pointer);
  6   289 			/* parameter 1:	(input)	block node pointer		*/
  6   290 			/* return:	(output)	reference node pointer	*/
  6   291 
  6   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  6   293 			returns(pointer);
  6   294 			/* parameter 1:	(input)	type			*/
  6   295 			/* parameter 2:	(input)	precision			*/
  6   296 			/* parameter 3:	(input)	scale			*/
  6   297 			/* parameter 4:	(input)	length			*/
  6   298 			/* return:	(output)	reference node pointer	*/
  6   299 
  6   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  6   301 			returns(char(120) varying);
  6   302 			/* parameter 1:	(input)	node pointer		*/
  6   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  6   304 			/* return:	(output)	source line id		*/
  6   305 
  6   306 declare	decode_source_id	entry(
  7     1 			1 structure unaligned,
  7     2 			  2 /* file_number */	bit(8),
  7     3 			  2 /* line_number */	bit(14),
  7     4 			  2 /* stmt_number */	bit(5),
  6   307 
  6   308 			bit(1) aligned)
  6   309 			returns(char(120) varying);
  6   310 			/* parameter 1:	(input)	source id			*/
  6   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  6   312 			/* return:	(output)	source line id		*/
  6   313 
  6   314 declare	error		entry(fixed bin(15),pointer,pointer);
  6   315 			/* parameter 1:	(input)	error number		*/
  6   316 			/* parameter 2:	(input)	statement node pointer or null*/
  6   317 			/* parameter 3:	(input)	token node pointer 		*/
  6   318 
  6   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  6   320 			/* parameter 1:	(input)	error number		*/
  6   321 			/* parameter 2:	(input)	statement node pointer or null*/
  6   322 			/* parameter 3:	(input)	token node pointer 		*/
  6   323 
  6   324 declare	error_		entry(fixed bin(15),
  8     1 			1 structure unaligned,
  8     2 			  2 /* file_number */	bit(8),
  8     3 			  2 /* line_number */	bit(14),
  8     4 			  2 /* stmt_number */	bit(5),
  6   325 
  6   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  6   327 			/* parameter 1:	(input)	error number		*/
  6   328 			/* parameter 2:	(input)	statement id		*/
  6   329 			/* parameter 3:	(input)	any node pointer		*/
  6   330 			/* parameter 4:	(input)	source segment		*/
  6   331 			/* parameter 5:	(input)	source starting character	*/
  6   332 			/* parameter 6:	(input)	source length		*/
  6   333 
  6   334 declare	error_$no_text	entry(fixed bin(15),
  9     1 			1 structure unaligned,
  9     2 			  2 /* file_number */	bit(8),
  9     3 			  2 /* line_number */	bit(14),
  9     4 			  2 /* stmt_number */	bit(5),
  6   335 
  6   336 			pointer);
  6   337 			/* parameter 1:	(input)	error number		*/
  6   338 			/* parameter 2:	(input)	statement id		*/
  6   339 			/* parameter 3:	(input)	any node pointer		*/
  6   340 
  6   341 declare	error_$initialize_error entry();
  6   342 
  6   343 declare	error_$finish	entry();
  6   344 
  6   345 declare	free_node		entry(pointer);
  6   346 			/* parameter 1:	any node pointer			*/
  6   347 
  6   348 declare	get_array_size	entry(pointer,fixed bin(3));
  6   349 			/* parameter 1:	(input)	symbol node pointer		*/
  6   350 			/* parameter 2:	(input)	units			*/
  6   351 
  6   352 declare	get_size		entry(pointer);
  6   353 			/* parameter 1:	(input)	symbol node pointer		*/
  6   354 
  6   355 declare	merge_attributes	external entry(pointer,pointer)
  6   356 			returns(bit(1) aligned);
  6   357 			/* parameter 1:	(input)	target symbol node pointer */
  6   358 			/* parameter 2:	(input)	source symbol node pointer */
  6   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  6   360 
  6   361 declare	optimizer		entry(pointer);
  6   362 			/* parameter 1:	(input)	root pointer		*/
  6   363 
  6   364 declare	parse_error	entry(fixed bin(15),pointer);
  6   365 			/* parameter 1:	(input)	error number		*/
  6   366 			/* parameter 2:	(input)	any node pointer		*/
  6   367 
  6   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  6   369 			/* parameter 1:	(input)	error number		*/
  6   370 			/* parameter 2:	(input)	any node pointer		*/
  6   371 
  6   372 declare	pl1_error_print$write_out
  6   373 			entry(fixed bin(15),
 10     1 			1 structure unaligned,
 10     2 			  2 /* file_number */	bit(8),
 10     3 			  2 /* line_number */	bit(14),
 10     4 			  2 /* stmt_number */	bit(5),
  6   374 
  6   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  6   376 			/* parameter 1:	(input)	error number		*/
  6   377 			/* parameter 2:	(input)	statement identification	*/
  6   378 			/* parameter 3:	(input)	any node pointer		*/
  6   379 			/* parameter 4:	(input)	source segment		*/
  6   380 			/* parameter 5:	(input)	source character index	*/
  6   381 			/* parameter 6:	(input)	source length		*/
  6   382 			/* parameter 7:	(input)	source line		*/
  6   383 
  6   384 declare	pl1_error_print$listing_segment
  6   385 			entry(fixed bin(15),
 11     1 			1 structure unaligned,
 11     2 			  2 /* file_number */	bit(8),
 11     3 			  2 /* line_number */	bit(14),
 11     4 			  2 /* stmt_number */	bit(5),
  6   386 
  6   387 			pointer);
  6   388 			/* parameter 1:	(input)	error number		*/
  6   389 			/* parameter 2:	(input)	statement identification	*/
  6   390 			/* parameter 3:	(input)	token node pointer		*/
  6   391 
  6   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  6   393 			/* parameter 1:	(input)	string			*/
  6   394 
  6   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  6   396 			/* parameter 1:	(input)	string			*/
  6   397 
  6   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  6   399 			/* parameter 1:	(input)	string			*/
  6   400 			/* parameter 2:	(input)	string length or 0		*/
  6   401 
  6   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  6   403 			/* parameter 1:	(input)	string			*/
  6   404 			/* parameter 2:	(input)	string length or 0		*/
  6   405 
  6   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  6   407 			/* parameter 1:	(input)	string pointer		*/
  6   408 			/* parameter 2:	(input)	string size		*/
  6   409 
  6   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  6   411 			/* parameter 1:	(input)	string pointer		*/
  6   412 			/* parameter 2:	(input)	string length or 0		*/
  6   413 
  6   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  6   415 			/* parameter 1:	(input)	string			*/
  6   416 			/* parameter 2:	(input)	length			*/
  6   417 
  6   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  6   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  6   420 			/* parameter 2:	(input)	line number		*/
  6   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  6   422 			/* parameter 4:	(input)	number of chars to copy	*/
  6   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  6   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  6   425 
  6   426 declare	refer_extent	entry(pointer,pointer);
  6   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  6   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  6   429 
  6   430 declare	reserve$clear	entry()
  6   431 			returns(pointer);
  6   432 			/* return:	(output)	pointer			*/
  6   433 
  6   434 declare	reserve$declare_lib	entry(fixed bin(15))
  6   435 			returns(pointer);
  6   436 			/* parameter 1:	(input)	builtin function number	*/
  6   437 			/* return:	(output)	pointer			*/
  6   438 
  6   439 declare	reserve$read_lib	entry(fixed bin(15))
  6   440 			returns(pointer);
  6   441 			/* parameter 1:	(input)	builtin function number	*/
  6   442 			/* return:	(output)	pointer			*/
  6   443 
  6   444 declare	semantic_translator	entry();
  6   445 
  6   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  6   447 			/* parameter 1:	(input)	error number		*/
  6   448 			/* parameter 2:	(input)	any node pointer		*/
  6   449 
  6   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  6   451 			/* parameter 1:	(input)	error number		*/
  6   452 			/* parameter 2:	(input)	any node pointer		*/
  6   453 
  6   454 declare	share_expression	entry(ptr)
  6   455 			returns(ptr);
  6   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  6   457 			/* return:	(output)	tree pointer or null	*/
  6   458 
  6   459 declare	token_to_binary	entry(ptr) reducible
  6   460 			returns(fixed bin(31));
  6   461 			/* parameter 1:	(input)	token node pointer		*/
  6   462 			/* return:	(output)	converted binary value	*/
  6   463 
  6   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
  5   228 
  5   229 /* END INCLUDE FILE ... semant.incl.pl1 */
      874 
 12     1 /* BEGIN INCLUDE FILE ... picture_image.incl.pl1
 12     2*
 12     3*   James R. Davis  12 Mar 79
 12     4**/
 12     5 
 12     6      dcl	   1 picture_image	      aligned based,
 12     7 	     2 type	      fixed bin (8) unal,
 12     8 	     2 prec	      fixed bin (8) unal,	/* precision or length of associated value */
 12     9 	     2 scale	      fixed bin (8) unal,	/* for both fixed and float pictures,
 12    10*							=ndigits after "v" - scale_factor */
 12    11 	     2 piclength	      fixed bin (8) unal,	/* length of picture_constant.chars, <64
 12    12*							=length of normalized-picture-string */
 12    13 	     2 varlength	      fixed bin (8) unal,	/* length of pictured variable in chars, <64
 12    14*							=length of normalized_picture_string - "k" and "v" */
 12    15 	     2 scalefactor	      fixed bin (8) unal,	/* value of pict-sc-f, -256<=x<256  */
 12    16 	     2 explength	      fixed bin (8) unal,	/* length of exp field for float */
 12    17 	     2 drift_character    char (1) unal,
 12    18 	     2 chars	      char (0 refer (picture_image.piclength)) aligned;
 12    19 
 12    20      dcl	   (
 12    21 	   picture_char_type      init (24),
 12    22 	   picture_realfix_type   init (25),
 12    23 	   picture_complexfix_type
 12    24 			      init (26),
 12    25 	   picture_realflo_type   init (27),
 12    26 	   picture_complexflo_type
 12    27 			      init (28)
 12    28 	   )		      fixed bin (8) unal static internal options (constant);
 12    29 
 12    30 /* END INCLUDE FILE  ... picture_image.incl.pl1  */
      875 
 13     1 /* BEGIN INCLUDE FILE ... declare_type.incl.pl1 */
 13     2 
 13     3 /* Modified: 25 Apr 1979 by PCK to implement 4-bit decimal */
 13     4 
 13     5 dcl  (	by_declare	initial("001"b),
 13     6 	by_explicit_context initial("010"b),
 13     7 	by_context	initial("011"b),
 13     8 	by_implication	initial("100"b),
 13     9 	by_compiler	initial("101"b)) int static bit(3) aligned options(constant);
 13    10 
 13    11 /* END INCLUDE FILE ... declare_type.incl.pl1 */
      876 
 14     1 /* BEGIN INCLUDE FILE ... desc_dcls.incl.pl1 */
 14     2 
 14     3 /* This include segment contains declarations for use with assign_ */
 14     4 
 14     5 dcl	intype		fixed bin (17),
 14     6 	outtype		fixed bin (17);
 14     7 
 14     8 dcl	inscale_prec	fixed bin (35),
 14     9 	outscale_prec	fixed bin (35);
 14    10 
 14    11 dcl	1 info		based (addr (inscale_prec)) aligned,
 14    12 	2 inscale		fixed bin (17) unal,
 14    13 	2 inprec		fixed bin (17) unal;
 14    14 
 14    15 dcl	1 outfo		based (addr (outscale_prec)) aligned,
 14    16 	2 outscale	fixed bin (17) unal,
 14    17 	2 outprec		fixed bin (17) unal;
 14    18 
 14    19 dcl	inclength fixed bin(31) aligned based(addr(inscale_prec));
 14    20 dcl	outclength fixed bin(31) aligned based(addr(outscale_prec));
 14    21 
 14    22 dcl	char_to_numeric_	entry (ptr, fixed bin (17), fixed bin (35), ptr, fixed bin (17)), 
 14    23 	assign_		entry (ptr, fixed bin (17), fixed bin (35), ptr, fixed bin (17), fixed bin (35)), 
 14    24 	assign_round_	entry (ptr, fixed bin (17), fixed bin (35), ptr, fixed bin (17), fixed bin (35)), 
 14    25 	assign_truncate_	entry (ptr, fixed bin (17), fixed bin (35), ptr, fixed bin (17), fixed bin (35));
 14    26 
 14    27 /* END INCLUDE FILE ... desc_dcls.incl.pl1 */
      877 
 15     1 /* BEGIN INCLUDE FILE ... std_descriptor_types.incl.pl1 */
 15     2 
 15     3 
 15     4 /****^  HISTORY COMMENTS:
 15     5*  1) change(86-09-05,JMAthane), approve(86-09-05,MCR7525),
 15     6*     audit(86-09-11,Martinson), install(86-11-12,MR12.0-1208):
 15     7*     Added pascal_string_type_dtype descriptor type.  Its number is 87.
 15     8*     Objects of this type are PASCAL string types.
 15     9*  2) change(88-09-20,WAAnderson), approve(88-09-20,MCR7952),
 15    10*     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
 15    11*     Added the new C types.
 15    12*                                                   END HISTORY COMMENTS */
 15    13 
 15    14 /* This include file defines mnemonic names for the Multics
 15    15*   standard descriptor types, using both pl1 and cobol terminology.
 15    16*   PG 780613
 15    17*   JRD 790530
 15    18*   JRD 791016
 15    19*   MBW 810731
 15    20*   TGO 830614 Add hex types.
 15    21*   Modified June 83 JMAthane to add PASCAL data types
 15    22*   TGO 840120 Add float dec extended and generic, float binary generic
 15    23**/
 15    24 
 15    25      dcl	   (real_fix_bin_1_dtype  init (1),
 15    26 	   real_fix_bin_2_dtype   init (2),
 15    27 	   real_flt_bin_1_dtype   init (3),
 15    28 	   real_flt_bin_2_dtype   init (4),
 15    29 	   cplx_fix_bin_1_dtype   init (5),
 15    30 	   cplx_fix_bin_2_dtype   init (6),
 15    31 	   cplx_flt_bin_1_dtype   init (7),
 15    32 	   cplx_flt_bin_2_dtype   init (8),
 15    33 	   real_fix_dec_9bit_ls_dtype init (9),
 15    34 	   real_flt_dec_9bit_dtype init (10),
 15    35 	   cplx_fix_dec_9bit_ls_dtype init (11),
 15    36 	   cplx_flt_dec_9bit_dtype init (12),
 15    37 	   pointer_dtype	      init (13),
 15    38 	   offset_dtype	      init (14),
 15    39 	   label_dtype	      init (15),
 15    40 	   entry_dtype	      init (16),
 15    41 	   structure_dtype	      init (17),
 15    42 	   area_dtype	      init (18),
 15    43 	   bit_dtype	      init (19),
 15    44 	   varying_bit_dtype      init (20),
 15    45 	   char_dtype	      init (21),
 15    46 	   varying_char_dtype     init (22),
 15    47 	   file_dtype	      init (23),
 15    48 	   real_fix_dec_9bit_ls_overp_dtype init (29),
 15    49 	   real_fix_dec_9bit_ts_overp_dtype init (30),
 15    50 	   real_fix_bin_1_uns_dtype init (33),
 15    51 	   real_fix_bin_2_uns_dtype init (34),
 15    52 	   real_fix_dec_9bit_uns_dtype init (35),
 15    53 	   real_fix_dec_9bit_ts_dtype init (36),
 15    54 	   real_fix_dec_4bit_uns_dtype init (38),	/* digit-aligned */
 15    55 	   real_fix_dec_4bit_ts_dtype init (39),	/* byte-aligned */
 15    56 	   real_fix_dec_4bit_bytealigned_uns_dtype init (40), /* COBOL */
 15    57 	   real_fix_dec_4bit_ls_dtype init (41),	/* digit-aligned */
 15    58 	   real_flt_dec_4bit_dtype init (42),		/* digit-aligned */
 15    59 	   real_fix_dec_4bit_bytealigned_ls_dtype init (43),
 15    60 	   real_flt_dec_4bit_bytealigned_dtype init (44),
 15    61 	   cplx_fix_dec_4bit_bytealigned_ls_dtype init (45),
 15    62 	   cplx_flt_dec_4bit_bytealigned_dtype init (46),
 15    63 	   real_flt_hex_1_dtype   init (47),
 15    64 	   real_flt_hex_2_dtype   init (48),
 15    65 	   cplx_flt_hex_1_dtype   init (49),
 15    66 	   cplx_flt_hex_2_dtype   init (50),
 15    67 	   c_typeref_dtype        init (54),
 15    68 	   c_enum_dtype           init (55),
 15    69              c_enum_const_dtype     init (56),
 15    70 	   c_union_dtype          init (57),
 15    71 	   algol68_straight_dtype init (59),
 15    72 	   algol68_format_dtype   init (60),
 15    73 	   algol68_array_descriptor_dtype init (61),
 15    74 	   algol68_union_dtype    init (62),
 15    75 
 15    76 	   cobol_comp_6_dtype     init (1),
 15    77 	   cobol_comp_7_dtype     init (1),
 15    78 	   cobol_display_ls_dtype init (9),
 15    79 	   cobol_structure_dtype  init (17),
 15    80 	   cobol_char_string_dtype init (21),
 15    81 	   cobol_display_ls_overp_dtype init (29),
 15    82 	   cobol_display_ts_overp_dtype init (30),
 15    83 	   cobol_display_uns_dtype init (35),
 15    84 	   cobol_display_ts_dtype init (36),
 15    85 	   cobol_comp_8_uns_dtype init (38),		/* digit aligned */
 15    86 	   cobol_comp_5_ts_dtype  init (39),		/* byte aligned */
 15    87 	   cobol_comp_5_uns_dtype init (40),
 15    88 	   cobol_comp_8_ls_dtype  init (41),		/* digit aligned */
 15    89 	   real_flt_dec_extended_dtype init (81),	/* 9-bit exponent */
 15    90 	   cplx_flt_dec_extended_dtype init (82),	/* 9-bit exponent */
 15    91 	   real_flt_dec_generic_dtype init (83),	/* generic float decimal */
 15    92 	   cplx_flt_dec_generic_dtype init (84),
 15    93 	   real_flt_bin_generic_dtype init (85),	/* generic float binary */
 15    94 	   cplx_flt_bin_generic_dtype init (86)) fixed bin internal static options (constant);
 15    95 
 15    96      dcl	   (ft_integer_dtype      init (1),
 15    97 	   ft_real_dtype	      init (3),
 15    98 	   ft_double_dtype	      init (4),
 15    99 	   ft_complex_dtype	      init (7),
 15   100 	   ft_complex_double_dtype init (8),
 15   101 	   ft_external_dtype      init (16),
 15   102 	   ft_logical_dtype	      init (19),
 15   103 	   ft_char_dtype	      init (21),
 15   104 	   ft_hex_real_dtype      init (47),
 15   105 	   ft_hex_double_dtype    init (48),
 15   106 	   ft_hex_complex_dtype   init (49),
 15   107 	   ft_hex_complex_double_dtype init (50)
 15   108 	   )		      fixed bin internal static options (constant);
 15   109 
 15   110      dcl	   (algol68_short_int_dtype init (1),
 15   111 	   algol68_int_dtype      init (1),
 15   112 	   algol68_long_int_dtype init (2),
 15   113 	   algol68_real_dtype     init (3),
 15   114 	   algol68_long_real_dtype init (4),
 15   115 	   algol68_compl_dtype    init (7),
 15   116 	   algol68_long_compl_dtype init (8),
 15   117 	   algol68_bits_dtype     init (19),
 15   118 	   algol68_bool_dtype     init (19),
 15   119 	   algol68_char_dtype     init (21),
 15   120 	   algol68_byte_dtype     init (21),
 15   121 	   algol68_struct_struct_char_dtype init (22),
 15   122 	   algol68_struct_struct_bool_dtype init (20)
 15   123 	   )		      fixed bin internal static options (constant);
 15   124 
 15   125      dcl	   (label_constant_runtime_dtype init (24),
 15   126 	   int_entry_runtime_dtype init (25),
 15   127 	   ext_entry_runtime_dtype init (26),
 15   128 	   ext_procedure_runtime_dtype init (27),
 15   129 	   picture_runtime_dtype  init (63)
 15   130 	   )		      fixed bin internal static options (constant);
 15   131 
 15   132      dcl	   (pascal_integer_dtype  init (1),
 15   133 	   pascal_real_dtype      init (4),
 15   134 	   pascal_label_dtype     init (24),
 15   135 	   pascal_internal_procedure_dtype init (25),
 15   136 	   pascal_exportable_procedure_dtype init (26),
 15   137 	   pascal_imported_procedure_dtype init (27),
 15   138 	   pascal_typed_pointer_type_dtype init (64),
 15   139 	   pascal_char_dtype      init (65),
 15   140 	   pascal_boolean_dtype   init (66),
 15   141 	   pascal_record_file_type_dtype init (67),
 15   142 	   pascal_record_type_dtype init (68),
 15   143 	   pascal_set_dtype	      init (69),
 15   144 	   pascal_enumerated_type_dtype init (70),
 15   145 	   pascal_enumerated_type_element_dtype init (71),
 15   146 	   pascal_enumerated_type_instance_dtype init (72),
 15   147 	   pascal_user_defined_type_dtype init (73),
 15   148 	   pascal_user_defined_type_instance_dtype init (74),
 15   149 	   pascal_text_file_dtype init (75),
 15   150 	   pascal_procedure_type_dtype init (76),
 15   151 	   pascal_variable_formal_parameter_dtype init (77),
 15   152 	   pascal_value_formal_parameter_dtype init (78),
 15   153 	   pascal_entry_formal_parameter_dtype init (79),
 15   154 	   pascal_parameter_procedure_dtype init (80),
 15   155 	   pascal_string_type_dtype init (87)) fixed bin int static options (constant);
 15   156 
 15   157 
 15   158 /* END INCLUDE FILE ... std_descriptor_types.incl.pl1 */
      878 
 16     1 /* BEGIN INCLUDE FILE ... mask.incl.pl1 */
 16     2 
 16     3 dcl (	structure_mask		init("100000000000000000000000000000000000"b),
 16     4 	fixed_mask		init("010000000000000000000000000000000000"b),
 16     5 	float_mask		init("001000000000000000000000000000000000"b),
 16     6 	bit_mask			init("000100000000000000000000000000000000"b),
 16     7 	char_mask			init("000010000000000000000000000000000000"b),
 16     8 	ptr_mask			init("000001000000000000000000000000000000"b),
 16     9 	offset_mask		init("000000100000000000000000000000000000"b),
 16    10 	area_mask			init("000000010000000000000000000000000000"b),
 16    11 	label_mask		init("000000001000000000000000000000000000"b),
 16    12 	entry_mask		init("000000000100000000000000000000000000"b),
 16    13 	file_mask			init("000000000010000000000000000000000000"b),
 16    14 	arg_descriptor_mask		init("000000000001000000000000000000000000"b),
 16    15 	storage_block_mask		init("000000000000100000000000000000000000"b),
 16    16 	lock_mask			init("000000000000010000000000000000000000"b),
 16    17 	condition_mask		init("000000000000001000000000000000000000"b),
 16    18 	format_mask		init("000000000000000100000000000000000000"b),
 16    19 	builtin_mask		init("000000000000000010000000000000000000"b),
 16    20 	generic_mask		init("000000000000000001000000000000000000"b),
 16    21 	picture_mask		init("000000000000000000100000000000000000"b),
 16    22 	dimensioned_mask		init("000000000000000000010000000000000000"b),
 16    23 	initialed_mask		init("000000000000000000001000000000000000"b),
 16    24 	aligned_mask		init("000000000000000000000100000000000000"b),
 16    25 	unaligned_mask		init("000000000000000000000010000000000000"b),
 16    26 	signed_mask		init("000000000000000000000001000000000000"b),
 16    27 	unsigned_mask		init("000000000000000000000000100000000000"b),
 16    28 	precision_mask		init("000000000000000000000000010000000000"b),
 16    29 	varying_mask		init("000000000000000000000000001000000000"b),
 16    30 	local_mask		init("000000000000000000000000000100000000"b),
 16    31 	decimal_mask		init("000000000000000000000000000010000000"b),
 16    32 	binary_mask		init("000000000000000000000000000001000000"b),
 16    33 	real_mask			init("000000000000000000000000000000100000"b),
 16    34 	complex_mask		init("000000000000000000000000000000010000"b),
 16    35 	variable_mask		init("000000000000000000000000000000001000"b),
 16    36 	reducible_mask		init("000000000000000000000000000000000100"b),
 16    37 	irreducible_mask		init("000000000000000000000000000000000010"b),
 16    38 	returns_mask		init("000000000000000000000000000000000001"b)) bit(36) aligned int static
 16    39 				options(constant);
 16    40 
 16    41 dcl (	arithmetic_mask		init("011000000000000000000000000011110000"b),
 16    42 	computational_mask		init("011110000000000000100000000011110000"b),
 16    43 	fixed_binary_real_mask	init("010000000000000000000000000001100000"b),
 16    44 	fixed_decimal_real_mask	init("010000000000000000000000000010100000"b),
 16    45 	float_decimal_real_mask	init("001000000000000000000000000010100000"b),
 16    46 	fixed_decimal_complex_mask	init("010000000000000000000000000010010000"b),
 16    47 	float_decimal_complex_mask	init("001000000000000000000000000010010000"b),
 16    48 	string_mask		init("000110000000000000000000000000000000"b),
 16    49 	undesirable_mask		init("111111111111111111100111110111110111"b),
 16    50 	convert_mask		init("011111111111111111100111110111111110"b),
 16    51 	declare_constant_mask	init("111111111111111111100000000011110000"b)
 16    52 								     ) bit(36) aligned int static
 16    53 									options(constant);
 16    54 
 16    55 /* END INCLUDE FILE ... mask.incl.pl1 */
      879 
 17     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
 17     2 
 17     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
 17     4 
 17     5 dcl (	block_node		initial("000000001"b),
 17     6 	statement_node		initial("000000010"b),
 17     7 	operator_node		initial("000000011"b),
 17     8 	reference_node		initial("000000100"b),
 17     9 	token_node		initial("000000101"b),
 17    10 	symbol_node		initial("000000110"b),
 17    11 	context_node		initial("000000111"b),
 17    12 	array_node		initial("000001000"b),
 17    13 	bound_node		initial("000001001"b),
 17    14 	format_value_node		initial("000001010"b),
 17    15 	list_node			initial("000001011"b),
 17    16 	default_node		initial("000001100"b),
 17    17 	machine_state_node		initial("000001101"b),
 17    18 	source_node		initial("000001110"b),
 17    19 	label_node		initial("000001111"b),
 17    20 	cross_reference_node	initial("000010000"b),
 17    21 	sf_par_node		initial("000010001"b),
 17    22 	temporary_node		initial("000010010"b),
 17    23 	label_array_element_node	initial("000010011"b),
 17    24 	by_name_agg_node		initial("000010100"b))
 17    25 				bit(9) internal static aligned options(constant);
 17    26 
 17    27 dcl	1 node			based aligned,
 17    28 	2 type			unal bit(9),
 17    29 	2 source_id		unal structure,
 17    30 	  3 file_number		bit(8),
 17    31 	  3 line_number		bit(14),
 17    32 	  3 statement_number	bit(5);
 17    33 
 17    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
      880 
 18     1 /* BEGIN INCLUDE FILE ... op_codes.incl.pl1 */
 18     2 
 18     3 /* Modified: 25 Apr 1979 by PCK 4-bit decimal */
 18     4 /* Modified: 6 Jun 1979 by PG to add rank and byte */
 18     5 /* Modified: 26 Dec 1979 by PCK to add assign_by_name */
 18     6 /* Modified: 26 July 82 BIM wordno, segno */
 18     7 
 18     8 dcl (	add		initial("000010001"b),	/* opnd(1) <- opnd(2)+opnd(3)		*/
 18     9 	sub		initial("000010010"b),	/* opnd(1) <- opnd(2)-opnd(3)		*/
 18    10 	mult		initial("000010011"b),	/* opnd(1) <- opnd(2)*opnd(3)		*/
 18    11 	div		initial("000010100"b),	/* opnd(1) <- opnd(2)/opnd(3)		*/
 18    12 	negate		initial("000010101"b),	/* opnd(1) <- -opnd(2)  		*/
 18    13 	exp		initial("000010110"b),	/* opnd(1) <- opnd(2) ** opnd(3)	*/
 18    14 
 18    15 	and_bits		initial("000100001"b),	/* opnd(1) <- opnd(2) & opnd(3)	*/
 18    16 	or_bits		initial("000100010"b),	/* opnd(1) <- opnd(2)|opnd(3)		*/
 18    17 	xor_bits		initial("000100011"b),	/* opnd(1) <- opnd(2) xor opnd(3)	*/
 18    18 	not_bits		initial("000100100"b),	/* opnd(1) <- ^opnd(2)		*/
 18    19 	cat_string	initial("000100101"b),	/* opnd(1) <- opnd(2)||opnd(3)	*/
 18    20 	bool_fun		initial("000100110"b),	/* opnd(1) <- bool(opnd(2),opnd(3),opnd(4)) */
 18    21 
 18    22 	assign		initial("000110001"b),	/* opnd(1) <- opnd(2)		*/
 18    23 	assign_size_ck	initial("000110010"b),	/* opnd(1) <- opnd(2)		*/
 18    24 	assign_zero	initial("000110011"b),	/* opnd(1) <- 0			*/
 18    25 	copy_words	initial("000110100"b),	/* move opnd(2) to opnd(1) by opnd(3) words */
 18    26 	copy_string	initial("000110101"b),	/* move opnd(2) to opnd(1) by opnd(3) units */
 18    27 	make_desc		initial("000110110"b),	/* opnd(1) <- descriptor(opnd(2),opnd(3)) */
 18    28 	assign_round	initial("000110111"b),	/* opnd(1) <- opnd(2) rounded		*/
 18    29 	pack		initial("000111000"b),	/* opnd(1) <- encode to picture opnd(2) */
 18    30 	unpack		initial("000111001"b),	/* opnd(1) <- decode from picture opnd(2) */
 18    31 
 18    32 	less_than		initial("001000100"b),	/* opnd(1) <- opnd(2) < opnd(3)	*/
 18    33 	greater_than	initial("001000101"b),	/* opnd(1) <- opnd(2) > opnd(3)	*/
 18    34 	equal		initial("001000110"b),	/* opnd(1) <- opnd(2) = opnd(3)	*/
 18    35 	not_equal		initial("001000111"b),	/* opnd(1) <- opnd(2) ^= opnd(3)	*/
 18    36 	less_or_equal	initial("001001000"b),	/* opnd(1) <- opnd(2) <= opnd(3)	*/
 18    37 	greater_or_equal	initial("001001001"b),	/* opnd(1) <- opnd(2) >= opnd(3)	*/
 18    38 
 18    39 	jump		initial("001010001"b),	/* go to opnd(1) unconditionally	*/
 18    40 	jump_true		initial("001010010"b),	/* go to opnd(1) if opnd(2) is not 0	*/
 18    41 	jump_false	initial("001010011"b),	/* go to opnd(1) if opnd(2) is all 0	*/
 18    42 	jump_if_lt	initial("001010100"b),	/* go to opnd(1) if opnd(2) < opnd(3)	*/
 18    43 	jump_if_gt	initial("001010101"b),	/* go to opnd(1) if opnd(2) > opnd(3)	*/
 18    44 	jump_if_eq	initial("001010110"b),	/* go to opnd(1) if opnd(2) = opnd(3)	*/
 18    45 	jump_if_ne	initial("001010111"b),	/* go to opnd(1) if opnd(2) ^= opnd(3)	*/
 18    46 	jump_if_le	initial("001011000"b),	/* go to opnd(1) if opnd(2) <= opnd(3)	*/
 18    47 	jump_if_ge	initial("001011001"b),	/* go to opnd(1) if opnd(2) >= opnd(3)	*/
 18    48 
 18    49 	std_arg_list	initial("001100001"b),	/* opnd(1) <- arglist(opnd(2) desclist(opnd(3)))	*/
 18    50 	return_words	initial("001100010"b),	/* return aggregate opnd(1), opnd(2) is length in words */
 18    51 	std_call		initial("001100011"b),	/* opnd(1) <- call opnd(2) with opnd(3)		*/
 18    52 	return_bits	initial("001100100"b),	/* return aggregate opnd(1), opnd(2) is length in bits */
 18    53 	std_entry		initial("001100101"b),	/* entry(opnd(1)... opnd(n))			*/
 18    54 	return_string	initial("001100110"b),	/* return string opnd(1) */
 18    55 	ex_prologue	initial("001100111"b),	/* execute the prologue -no operands-		*/
 18    56 	allot_auto	initial("001101000"b),	/* opnd(1) <- addrel(stack,opnd(2))		*/
 18    57 	param_ptr		initial("001101001"b),	/* opnd(1) <- ptr to opnd(2) in  block opnd(3)	*/
 18    58 	param_desc_ptr	initial("001101010"b),	/* opnd(1) <- ptr to opnd(2) in block opnd(3)	*/
 18    59 	std_return	initial("001101011"b),	/* return -no arguments-			*/
 18    60 	allot_ctl		initial("001101100"b),	/* allocate opnd(1) , length in words is opnd(2) 	*/
 18    61 	free_ctl		initial("001101101"b),	/* free opnd(1)				*/
 18    62 	stop		initial("001101110"b),	/* stop - terminate run unit			*/
 18    63 
 18    64 	mod_bit		initial("001110000"b),	/* opnd(1) <- mod(opnd(3),36),
 18    65*						   opnd(2) <- opnd(3) / 36		*/
 18    66 	mod_byte		initial("001110001"b),	/* opnd(1) <- mod(opnd(3),4),
 18    67*						   opnd(2) <- opnd(3) / 4		*/
 18    68 	mod_half		initial("001110010"b),	/* opnd(1) <- mod(opnd(3),2),
 18    69*						   opnd(2) <- opnd(3) / 2		*/
 18    70 	mod_word		initial("001110011"b),	/* TO BE DEFINED BY BLW			*/
 18    71 
 18    72 	bit_to_char	initial("010000000"b),	/* opnd(1) <- (opnd(2)+8)/9		*/
 18    73 	bit_to_word	initial("010000001"b),	/* opnd(1) <- (opnd(2)+35)/36		*/
 18    74 	char_to_word	initial("010000010"b),	/* opnd(1) <- (opnd(2)+3)/4		*/
 18    75 	half_to_word	initial("010000011"b),	/* opnd(1) <- (opnd(2)+1)/2		*/
 18    76 	word_to_mod2	initial("010000100"b),	/* opnd(1) <- (opnd(2)+1)/2*2		*/
 18    77 	word_to_mod4	initial("010000101"b),	/* opnd(1) <- (opnd(2)+3)/4*4		*/
 18    78 	word_to_mod8	initial("010000110"b),	/* opnd(1) <- (opnd(2)+7)/8*8		*/
 18    79 	rel_fun		initial("010000111"b),	/* opnd(1) <- rel(opnd(2))		*/
 18    80 	baseno_fun	initial("010001000"b),	/* opnd(1) <- baseno(opnd(2))		*/
 18    81 	desc_size		initial("010001001"b),	/* opnd(1) <- substr(opnd(2),13,24)	*/
 18    82 	bit_pointer	initial("010001010"b),	/* opnd(1) <- bit offset of opnd(2)	*/
 18    83 	index_before_fun	initial("010001011"b),	/* opnd(1) <- length of before(opnd(2),opnd(3)) */
 18    84 	index_after_fun	initial("010001100"b),	/* opnd(1) <- offset of after(opnd(2),opnd(3)) in opnd(2) */
 18    85 	verify_ltrim_fun	initial("010001101"b),	/* opnd(1) <- offset of ltrim(opnd(2),opnd(3)) in opnd(2) */
 18    86 	verify_rtrim_fun	initial("010001110"b),	/* opnd(1) <- length(opnd(2))-length(rtrim(opnd(2),opnd(3))) */
 18    87 	digit_to_bit	initial("010001111"b),	/* opnd(1) <- 9*opnd(2)/2		*/
 18    88 
 18    89 	ceil_fun		initial("010010000"b),	/* opnd(1) <- ceil(opnd(2))		*/
 18    90 	floor_fun		initial("010010001"b),	/* opnd(1) <- floor(opnd(2))		*/
 18    91 	round_fun		initial("010010010"b),	/* opnd(1) <- round(opnd(2))		*/
 18    92 	sign_fun		initial("010010011"b),	/* opnd(1) <- sign(opnd(2))		*/
 18    93 	abs_fun		initial("010010100"b),	/* opnd(1) <- abs(opnd(2))		*/
 18    94 	trunc_fun		initial("010010101"b),	/* opnd(1) <- trunc(opnd(2))		*/
 18    95 	byte_fun		initial("010010110"b),	/* opnd(1) <- byte(opnd(2))		*/
 18    96 	rank_fun		initial("010010111"b),	/* opnd(1) <- rank(opnd(2))		*/
 18    97 	index_rev_fun	initial("010011000"b),	/* opnd(1) <- index(reverse(opnd(2)),reverse(opnd(3))) */
 18    98 	search_rev_fun	initial("010011001"b),	/* opnd(1) <- search(reverse(opnd(2)),opnd(3)) */
 18    99 	verify_rev_fun	initial("010011010"b),	/* opnd(1) <- verify(reverse(opnd(2)),opnd(3)) */
 18   100 	wordno_fun	initial("010011011"b),        /* opnd(1) <- wordno (opnd(2)) */
 18   101 	segno_fun		initial("010011100"b),        /* opnd(1) <- segno (opnd(2)) */
 18   102 	bitno_fun           initial("010011101"b),        /* opnd(1) <- bitno (opnd(2)) */
 18   103 	charno_fun	initial("010011110"b),        /* opnd(1) <- charno (opnd(2)) */
 18   104 
 18   105 	index_fun		initial("010100000"b),	/* opnd(1) <- index(opnd(2),opnd(3))	*/
 18   106 	off_fun		initial("010100001"b),	/* opnd(1) <- offset(opnd(2),opnd(3))	*/
 18   107 	complex_fun	initial("010100010"b),	/* opnd(1) <- complex(opnd(2),opnd(3))	*/
 18   108 	conjg_fun		initial("010100011"b),	/* opnd(1) <- conjg(opnd(2),opnd(3))	*/
 18   109 	mod_fun		initial("010100100"b),	/* opnd(1) <- mod(opnd(2),opnd(3))	*/
 18   110 	repeat_fun	initial("010100101"b),	/* opnd(1) <- repeat(opnd(2),opnd(3))	*/
 18   111 	verify_fun	initial("010100110"b),	/* opnd(1) <- verify(opnd(2),opnd(3))	*/
 18   112 	translate_fun	initial("010100111"b),	/* opnd(1) <- translate(opnd(2),opnd(3))*/
 18   113 	real_fun   	initial("010101001"b),	/* opnd(1) <- real(opnd(2))		*/
 18   114 	imag_fun   	initial("010101010"b),	/* opnd(1) <- imag(opnd(2))		*/
 18   115 	length_fun	initial("010101011"b),	/* opnd(1) <- length(opnd(2))	*/
 18   116 	pl1_mod_fun	initial("010101100"b),	/* opnd(1) <- mod(opnd(2)) */
 18   117 	search_fun	initial("010101101"b),	/* opnd(1) <- search(opnd(2),opnd(3)) */
 18   118 	allocation_fun	initial("010101110"b),	/* opnd(1) <- allocation(opnd(2)) */
 18   119 	reverse_fun	initial("010101111"b),	/* opnd(1) <- reverse(opnd(2)) */
 18   120 
 18   121 	addr_fun		initial("010110000"b),	/* opnd(1) <- addr(opnd(2))		*/
 18   122 	addr_fun_bits	initial("010110001"b),	/* opnd(1) <- addr(opnd(2))		*/
 18   123 	ptr_fun		initial("010110010"b),	/* opnd(1) <- ptr(opnd(2),opnd(3))	*/
 18   124 	baseptr_fun	initial("010110011"b),	/* opnd(1) <- baseptr(opnd(2))	*/
 18   125 	addrel_fun	initial("010110100"b),	/* opnd(1) <- addrel(opnd(2),opnd(3))	*/
 18   126 	codeptr_fun	initial("010110101"b),	/* opnd(1) <- codeptr(opnd(2))	*/
 18   127 	environmentptr_fun	initial("010110110"b),	/* opnd(1) <- environmentptr(opnd(2))	*/
 18   128 	stackbaseptr_fun	initial("010110111"b),	/* opnd(1) is ptr to base of current stack	*/
 18   129 	stackframeptr_fun	initial("010111000"b),	/* opnd(1) is ptr to current block's stack frame	*/
 18   130 	setcharno_fun	initial("010111001"b),	/* opnd(1) <- opnd(2) with charno opnd(3) */
 18   131 	addcharno_fun	initial("010111010"b),	/* opnd(1) <- opnd(2) with charno = charno + opnd(3) */
 18   132 	setbitno_fun	initial("010111011"b),	/* setcharno for bitsno */
 18   133 	addbitno_fun	initial("010111100"b),	/* addcharno for bitno */
 18   134 
 18   135 	min_fun		initial("011000000"b),	/* opnd(1) <- min(opnd(1),opnd(2),...)	*/
 18   136 	max_fun		initial("011000001"b),	/* opnd(1) <- max(opnd(1),opnd(2),...)	*/
 18   137 
 18   138 	stack_ptr		initial("011010001"b),	/* opnd(1) <- stack frame ptr		*/
 18   139 	empty_area	initial("011010010"b),	/* empty opnd(1), length in words is opnd(2) */
 18   140 	enable_on		initial("011010100"b),	/* opnd(1) is the cond name
 18   141*						   opnd(2) is the file name
 18   142*						   opnd(3) is the block	*/
 18   143 	revert_on		initial("011010101"b),	/* opnd(1) is the cond name,
 18   144*						   opnd(2) is the file name	*/
 18   145 	signal_on		initial("011010110"b),	/* opnd(1) is the cond name
 18   146*						   opnd(2) is the file name */
 18   147 
 18   148 	lock_fun		initial("011010111"b),	/* opnd(1) <- stac(opnd(2),opnd(3))	*/
 18   149 	stacq_fun		initial("011011000"b),	/* opnd(1) is result, opnd(2) is ptr to lock word,
 18   150*						   opnd(3) is old value, (4) is new value. */
 18   151 	clock_fun		initial("011011001"b),	/* opnd(1) is the clock time		*/
 18   152 	vclock_fun	initial("011011010"b),	/* opnd(1) is the virtual clock time	*/
 18   153 
 18   154 	bound_ck		initial("011100000"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 18   155 	range_ck		initial("011100001"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 18   156 	loop		initial("011100010"b),	/* do opnd(1) for opnd(2) from opnd(3) to opnd(4) by 1,
 18   157*						   opnd(5) is the list */
 18   158 	join		initial("011100011"b),	/* do opnd(1), opnd(2) ... opnd(n)	*/
 18   159 	allot_based	initial("011100100"b),	/* allocate opnd(2) words in opnd(3), set opnd(1) */
 18   160 	free_based	initial("011100101"b),	/* free opnd(1) in opnd(3), length is opnd(2) words */
 18   161 
 18   162 	r_parn		initial("011110001"b),	/* format op code			*/
 18   163 	l_parn		initial("011110010"b),
 18   164 	r_format		initial("011110011"b),
 18   165 	c_format		initial("011110100"b),
 18   166 	f_format		initial("011110101"b),
 18   167 	e_format		initial("011110110"b),
 18   168 	b_format		initial("011110111"b),
 18   169 	a_format		initial("011111000"b),
 18   170 	x_format		initial("011111001"b),
 18   171 	skip_format	initial("011111010"b),
 18   172 	column_format	initial("011111011"b),
 18   173 	page_format	initial("011111100"b),
 18   174 	line_format	initial("011111101"b),
 18   175 	picture_format	initial("011111110"b),
 18   176 	bn_format		initial("011111111"b),	/* bit format, length(opnd(2)), radix factor(opnd(3)) */
 18   177 
 18   178 	get_list_trans	initial("100000000"b),	/* getlist(opnd(2) with desc(opnd(1)))	*/
 18   179 	get_edit_trans	initial("100000001"b),	/* getedit(opnd(2) with desc(opnd(1)))	*/
 18   180 	get_data_trans	initial("100000010"b),	/* getdata(opnd(1) to opnd(n))	*/
 18   181 	put_list_trans	initial("100000011"b),	/* putlist(opnd(2) with desc(opnd(1)))	*/
 18   182 	put_edit_trans	initial("100000100"b),	/* putedit(opnd(2) with desc(opnd(1)))	*/
 18   183 	put_data_trans	initial("100000101"b),	/* putdata(opnd(2)) with subscript-list opnd(1) */
 18   184 	terminate_trans	initial("100000110"b),	/* terminate stream transmission	*/
 18   185 	stream_prep	initial("100000111"b),	/* initiate stream transmission	*/
 18   186 	record_io		initial("100001000"b),	/* perform record io operation	*/
 18   187 	fortran_read	initial("100001001"b),	/* A complete read statement		*/
 18   188 	fortran_write	initial("100001010"b),	/* A complete write statement		*/
 18   189 	ftn_file_manip	initial("100001011"b),	/* endfile,backspace,rewind,etc.	*/
 18   190 	ftn_trans_loop	initial("100001100"b),	/* An implied do in i/o list		*/
 18   191 	put_control	initial("100001101"b),	/* put control opnd(1) opnd(2) times	*/
 18   192 	put_field		initial("100001110"b),	/* putlist(opnd(2)) of length(opnd(1))	*/
 18   193 	put_field_chk	initial("100001111"b),	/* putlist(op(2)) of len(op(1)) check char index(op(3)) */
 18   194 
 18   195 /* These operators are produced by the parse but are not used as input to the code generator.	*/
 18   196 /* They are processed by the semantic translator.						*/
 18   197 
 18   198 	return_value	initial("100010010"b),	/* return(opnd(1))			*/
 18   199 	allot_var		initial("100010011"b),	/* allot opnd(1) in opnd(2)		*/
 18   200 	free_var		initial("100010100"b),	/* free opnd(1) out of opnd(2)	*/
 18   201 	get_file		initial("100010101"b),	/* opnd(1) is filename,opnd(2) is copy	*/
 18   202 						/* opnd(3) is skip, opnd(4) is list	*/
 18   203 	get_string	initial("100010110"b),	/* opnd(1) is string,opnd(2) is list	*/
 18   204 	put_file		initial("100010111"b),	/* opnd(1) is filename,opnd(2) is page	*/
 18   205 						/* opnd(3) is skip,opnd(4) is line	*/
 18   206 	put_string	initial("100011000"b),	/* opnd(1) is string,opnd(2) is list	*/
 18   207 	open_file		initial("100011001"b),
 18   208 	close_file	initial("100011010"b),
 18   209 	read_file		initial("100011011"b),
 18   210 	write_file	initial("100011100"b),
 18   211 	locate_file	initial("100011101"b),
 18   212 	do_fun		initial("100011110"b),	/* opnd(1) is join of a list		*/
 18   213 						/* opnd(2) is control variable ref	*/
 18   214 						/* opnd(3) is specification operator	*/
 18   215 	do_spec		initial("100011111"b),	/* opnd(1) to opnd(2) by opnd(3) 	*/
 18   216 						/* repeat opnd(4) while opnd(5)	*/
 18   217 						/* opnd(6) is next specification	*/
 18   218 
 18   219 	rewrite_file	initial("100100000"b),
 18   220 	delete_file	initial("100100001"b),
 18   221 	unlock_file	initial("100100010"b),
 18   222 	lock_file		initial("100100011"b),
 18   223 	refer		initial("100100101"b),	/* opnd(1) refer(opnd(2))		*/
 18   224 	prefix_plus	initial("100100110"b),	/* opnd(1) <- +opnd(2)		*/
 18   225 	nop		initial("100100111"b),	/* no-op */
 18   226 	assign_by_name	initial("100101000"b),	/* opnd(1) <- opnd(2),by name		*/
 18   227 
 18   228 /* These operators are produced by the semantic translator in processing the math
 18   229*   builtin functions and are used as input to the code generator			*/
 18   230 
 18   231 	sqrt_fun		initial("100110000"b),	/* opnd(1) <- sqrt(opnd(2))	*/
 18   232 	sin_fun		initial("100110001"b),	/* opnd(1) <- sin(opnd(2))	*/
 18   233 	sind_fun		initial("100110010"b),	/* opnd(1) <- sind(opnd(2))	*/
 18   234 	cos_fun		initial("100110011"b),	/* opnd(1) <- cos(opnd(2))	*/
 18   235 	cosd_fun		initial("100110100"b),	/* opnd(1) <- cosd(opnd(2))	*/
 18   236 	tan_fun		initial("100110101"b),	/* opnd(1) <- tan(opnd(2))	*/
 18   237 	tand_fun		initial("100110110"b),	/* opnd(1) <- tand(opnd(2))	*/
 18   238 	asin_fun		initial("100110111"b),	/* opnd(1) <- asin(opnd(2))	*/
 18   239 	asind_fun		initial("100111000"b),	/* opnd(1) <- asind(opnd(2))	*/
 18   240 	acos_fun		initial("100111001"b),	/* opnd(1) <- acos(opnd(2))	*/
 18   241 	acosd_fun		initial("100111010"b),	/* opnd(1) <- acosd(opnd(2))	*/
 18   242 	atan_fun		initial("100111011"b),	/* opnd(1) <- atan(opnd(2)[,opnd(3)])	*/
 18   243 	atand_fun		initial("100111100"b),	/* opnd(1) <- atand(opnd(2)[,opnd(3)])	*/
 18   244 	log2_fun		initial("100111101"b),	/* opnd(1) <- log2(opnd(2))	*/
 18   245 	log_fun		initial("100111110"b),	/* opnd(1) <- log(opnd(2))	*/
 18   246 	log10_fun		initial("100111111"b),	/* opnd(1) <- log10(opnd(2))	*/
 18   247 
 18   248 	exp_fun		initial("101000000"b))	/* opnd(1) <- exp(opnd(2))	*/
 18   249 
 18   250 			bit(9) aligned internal static options(constant);
 18   251 
 18   252 /* END INCLUDE FILE ... op_codes.incl.pl1 */
      881 
 19     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
 19     2 
 19     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
 19     4 
 19     5 /* format: style3 */
 19     6 dcl	1 operator	based aligned,
 19     7 	  2 node_type	bit (9) unaligned,
 19     8 	  2 op_code	bit (9) unaligned,
 19     9 	  2 shared	bit (1) unaligned,
 19    10 	  2 processed	bit (1) unaligned,
 19    11 	  2 optimized	bit (1) unaligned,
 19    12 	  2 number	fixed (14) unaligned,
 19    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
 19    14 
 19    15 dcl	max_number_of_operands
 19    16 			fixed bin (15) int static options (constant) initial (32767);
 19    17 
 19    18 /* END INCLUDE FILE ... operator.incl.pl1 */
      882 
 20     1 /* BEGIN INCLUDE FILE ... pl1_symbol_type.incl.pl1 */
 20     2 
 20     3 dcl	1 type,
 20     4 	2 structure	bit,
 20     5 	2 fixed		bit,
 20     6 	2 float		bit,
 20     7 	2 bit		bit,
 20     8 	2 char		bit,
 20     9 	2 ptr		bit,
 20    10 	2 offset		bit,
 20    11 	2 area		bit,
 20    12 	2 label		bit,
 20    13 	2 entry		bit,
 20    14 	2 file		bit,
 20    15 	2 arg_descriptor	bit,
 20    16 	2 storage_block	bit,
 20    17 	2 explicit_packed	bit,
 20    18 	2 condition	bit,
 20    19 	2 format		bit,
 20    20 	2 builtin		bit,
 20    21 	2 generic		bit,
 20    22 	2 picture		bit,
 20    23 	2 dimensioned	bit,
 20    24 	2 initialed	bit,
 20    25 	2 aligned		bit,
 20    26 	2 unaligned	bit,
 20    27 	2 signed		bit,
 20    28 	2 unsigned	bit,
 20    29 	2 precision	bit,
 20    30 	2 varying		bit,
 20    31 	2 local		bit,
 20    32 	2 decimal		bit,
 20    33 	2 binary		bit,
 20    34 	2 real		bit,
 20    35 	2 complex		bit,
 20    36 	2 variable	bit,
 20    37 	2 reducible	bit,
 20    38 	2 irreducible	bit,
 20    39 	2 returns		bit;
 20    40 
 20    41 /* END INCLUDE FILE ... pl1_symbol_type.incl.pl1 */
      883 
 21     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
 21     2 
 21     3 dcl	1 reference		based aligned,
 21     4 	2 node_type		bit(9) unaligned,
 21     5 	2 array_ref		bit(1) unaligned,
 21     6 	2 varying_ref		bit(1) unaligned,
 21     7 	2 shared			bit(1) unaligned,
 21     8 	2 put_data_sw		bit(1) unaligned,
 21     9 	2 processed		bit(1) unaligned,
 21    10 	2 units			fixed(3) unaligned,
 21    11 	2 ref_count		fixed(17) unaligned,
 21    12 	2 c_offset		fixed(24),
 21    13 	2 c_length		fixed(24),
 21    14 	2 symbol			ptr unaligned,
 21    15 	2 qualifier		ptr unaligned,
 21    16 	2 offset			ptr unaligned,
 21    17 	2 length			ptr unaligned,
 21    18 	2 subscript_list		ptr unaligned,
 21    19 						/* these fields are used by the 645 code generator */
 21    20 	2 address			structure unaligned,
 21    21 	  3 base			bit(3),
 21    22 	  3 offset		bit(15),
 21    23 	  3 op			bit(9),
 21    24 	  3 no_address		bit(1),
 21    25 	  3 inhibit		bit(1),
 21    26 	  3 ext_base		bit(1),
 21    27 	  3 tag			bit(6),
 21    28 	2 info			structure unaligned,
 21    29 	  3 address_in		structure,
 21    30 	    4 b			dimension(0:7) bit(1),
 21    31 	    4 storage		bit(1),
 21    32 	  3 value_in		structure,
 21    33 	    4 a			bit(1),
 21    34 	    4 q			bit(1),
 21    35 	    4 aq			bit(1),
 21    36 	    4 string_aq		bit(1),
 21    37 	    4 complex_aq		bit(1),
 21    38 	    4 decimal_aq		bit(1),
 21    39 	    4 b			dimension(0:7) bit(1),
 21    40 	    4 storage		bit(1),
 21    41 	    4 indicators		bit(1),
 21    42 	    4 x			dimension(0:7) bit(1),
 21    43 	  3 other			structure,
 21    44 	    4 big_offset		bit(1),
 21    45 	    4 big_length		bit(1),
 21    46 	    4 modword_in_offset	bit(1),
 21    47 	2 data_type		fixed(5) unaligned,
 21    48 	2 bits			structure unaligned,
 21    49 	  3 padded_ref		bit(1),
 21    50 	  3 aligned_ref		bit(1),
 21    51 	  3 long_ref		bit(1),
 21    52 	  3 forward_ref		bit(1),
 21    53 	  3 ic_ref		bit(1),
 21    54 	  3 temp_ref		bit(1),
 21    55 	  3 defined_ref		bit(1),
 21    56 	  3 evaluated		bit(1),
 21    57 	  3 allocate		bit(1),
 21    58 	  3 allocated		bit(1),
 21    59 	  3 aliasable		bit(1),
 21    60 	  3 even			bit(1),
 21    61 	  3 perm_address		bit(1),
 21    62 	  3 aggregate		bit(1),
 21    63 	  3 hit_zero		bit(1),
 21    64 	  3 dont_save		bit(1),
 21    65 	  3 fo_in_qual		bit(1),
 21    66 	  3 hard_to_load		bit(1),
 21    67 	2 relocation		bit(12) unaligned,
 21    68 	2 more_bits		structure unaligned,
 21    69 	  3 substr		bit(1),
 21    70 	  3 padded_for_store_ref	bit(1),
 21    71 	  3 aligned_for_store_ref	bit(1),
 21    72 	  3 mbz			bit(15),
 21    73 	2 store_ins		bit(18) unaligned;
 21    74 
 21    75 /* END INCLUDE FILE ... reference.incl.pl1 */
      884 
 22     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
 22     2 
 22     3 dcl	1 symbol			based aligned,
 22     4 	2 node_type		bit(9) unal,
 22     5 	2 source_id		structure unal,
 22     6 	  3 file_number		bit(8),
 22     7 	  3 line_number		bit(14),
 22     8 	  3 statement_number	bit(5),
 22     9 	2 location		fixed(18) unal unsigned,
 22    10 	2 allocated		bit(1) unal,
 22    11 	2 dcl_type		bit(3) unal,
 22    12 	2 reserved		bit(6) unal,
 22    13 	2 pix			unal,
 22    14 	  3 pic_fixed		bit(1) unal,
 22    15 	  3 pic_float		bit(1) unal,
 22    16 	  3 pic_char		bit(1) unal,
 22    17 	  3 pic_scale		fixed(7) unal,
 22    18 	  3 pic_size		fixed(7) unal,
 22    19 	2 level			fixed(8) unal,
 22    20 	2 boundary		fixed(3) unal,
 22    21 	2 size_units		fixed(3) unal,
 22    22 	2 scale			fixed(7) unal,
 22    23 	2 runtime			bit(18) unal,
 22    24 	2 runtime_offset		bit(18) unal,
 22    25 	2 block_node		ptr unal,
 22    26 	2 token			ptr unal,
 22    27 	2 next			ptr unal,
 22    28 	2 multi_use		ptr unal,
 22    29 	2 cross_references		ptr unal,
 22    30 	2 initial			ptr unal,
 22    31 	2 array			ptr unal,
 22    32 	2 descriptor		ptr unal,
 22    33 	2 equivalence		ptr unal,
 22    34 	2 reference		ptr unal,
 22    35 	2 general			ptr unal,
 22    36 	2 father			ptr unal,
 22    37 	2 brother			ptr unal,
 22    38 	2 son			ptr unal,
 22    39 	2 word_size		ptr unal,
 22    40 	2 bit_size		ptr unal,
 22    41 	2 dcl_size		ptr unal,
 22    42 	2 symtab_size		ptr unal,
 22    43 	2 c_word_size		fixed(24),
 22    44 	2 c_bit_size		fixed(24),
 22    45 	2 c_dcl_size		fixed(24),
 22    46 
 22    47 	2 attributes		structure aligned,
 22    48 	  3 data_type		structure unal,
 22    49 	    4 structure		bit(1) ,
 22    50 	    4 fixed		bit(1),
 22    51 	    4 float		bit(1),
 22    52 	    4 bit			bit(1),
 22    53 	    4 char		bit(1),
 22    54 	    4 ptr			bit(1),
 22    55 	    4 offset		bit(1),
 22    56 	    4 area		bit(1),
 22    57 	    4 label		bit(1),
 22    58 	    4 entry		bit(1),
 22    59 	    4 file		bit(1),
 22    60 	    4 arg_descriptor	bit(1),
 22    61 	    4 storage_block		bit(1),
 22    62 	    4 explicit_packed	bit(1), /* options(packed) */
 22    63 	    4 condition		bit(1),
 22    64 	    4 format		bit(1),
 22    65 	    4 builtin		bit(1),
 22    66 	    4 generic		bit(1),
 22    67 	    4 picture		bit(1),
 22    68 
 22    69 	  3 misc_attributes		structure unal,
 22    70 	    4 dimensioned		bit(1),
 22    71 	    4 initialed		bit(1),
 22    72 	    4 aligned		bit(1),
 22    73 	    4 unaligned		bit(1),
 22    74 	    4 signed		bit(1),
 22    75 	    4 unsigned		bit(1),
 22    76 	    4 precision		bit(1),
 22    77 	    4 varying		bit(1),
 22    78 	    4 local		bit(1),
 22    79 	    4 decimal		bit(1),
 22    80 	    4 binary		bit(1),
 22    81 	    4 real		bit(1),
 22    82 	    4 complex		bit(1),
 22    83 	    4 variable		bit(1),
 22    84 	    4 reducible		bit(1),
 22    85 	    4 irreducible		bit(1),
 22    86 	    4 returns		bit(1),
 22    87 	    4 position		bit(1),
 22    88 	    4 internal		bit(1),
 22    89 	    4 external		bit(1),
 22    90 	    4 like		bit(1),
 22    91 	    4 member		bit(1),
 22    92 	    4 non_varying		bit(1),
 22    93 	    4 options		bit(1),
 22    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
 22    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
 22    96 
 22    97 	  3 storage_class		structure unal,
 22    98 	    4 auto		bit(1),
 22    99 	    4 based		bit(1),
 22   100 	    4 static		bit(1),
 22   101 	    4 controlled		bit(1),
 22   102 	    4 defined		bit(1),
 22   103 	    4 parameter		bit(1),
 22   104 	    4 param_desc		bit(1),
 22   105 	    4 constant		bit(1),
 22   106 	    4 temporary		bit(1),
 22   107 	    4 return_value		bit(1),
 22   108 
 22   109 	  3 file_attributes		structure unal,
 22   110 	    4 print		bit(1),
 22   111 	    4 input		bit(1),
 22   112 	    4 output		bit(1),
 22   113 	    4 update		bit(1),
 22   114 	    4 stream		bit(1),
 22   115 	    4 reserved_1		bit(1),
 22   116 	    4 record		bit(1),
 22   117 	    4 sequential		bit(1),
 22   118 	    4 direct		bit(1),
 22   119 	    4 interactive		bit(1),		/* env(interactive) */
 22   120 	    4 reserved_2		bit(1),
 22   121 	    4 reserved_3		bit(1),
 22   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
 22   123 	    4 keyed		bit(1),
 22   124 	    4 reserved_4		bit(1),
 22   125 	    4 environment		bit(1),
 22   126 
 22   127 	  3 compiler_developed	structure unal,
 22   128 	    4 aliasable		bit(1),
 22   129 	    4 packed		bit(1),
 22   130 	    4 passed_as_arg		bit(1),
 22   131 	    4 allocate		bit(1),
 22   132 	    4 set			bit(1),
 22   133 	    4 exp_extents		bit(1),
 22   134 	    4 refer_extents		bit(1),
 22   135 	    4 star_extents		bit(1),
 22   136 	    4 isub		bit(1),
 22   137 	    4 put_in_symtab		bit(1),
 22   138 	    4 contiguous		bit(1),
 22   139 	    4 put_data		bit(1),
 22   140 	    4 overlayed		bit(1),
 22   141 	    4 error		bit(1),
 22   142 	    4 symtab_processed	bit(1),
 22   143 	    4 overlayed_by_builtin	bit(1),
 22   144 	    4 defaulted		bit(1),
 22   145 	    4 connected		bit(1);
 22   146 
 22   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
      885 
 23     1 /* BEGIN INCLUDE FILE ... system.incl.pl1 */
 23     2 
 23     3 /* Modified: 25 Apr 1979 by PCK to implemnt 4-bit decimal */
 23     4 
 23     5 dcl (	max_p_flt_bin_1			initial(27),
 23     6 	max_p_flt_bin_2			initial(63),
 23     7 	max_p_fix_bin_1			initial(35),
 23     8 	max_p_fix_bin_2			initial(71),
 23     9 
 23    10 	max_p_dec				initial(59),
 23    11 	max_p_bin_or_dec			initial (71),	/* max (max_p_fix_bin_2, max_p_dec) */
 23    12 
 23    13 	min_scale				initial(-128),
 23    14 	max_scale				initial(+127),
 23    15 	max_bit_string			initial(9437184),
 23    16 	max_char_string			initial(1048576),
 23    17 	max_area_size			initial(262144),
 23    18 	min_area_size			initial(28),
 23    19 
 23    20 	max_bit_string_constant		initial (253),	/* max length of bit literals */
 23    21 	max_char_string_constant		initial (254),	/* max length of character literals */
 23    22 	max_identifier_length		initial (256),
 23    23 	max_number_of_dimensions		initial (127),
 23    24 
 23    25 	max_length_precision		initial(24),
 23    26 	max_offset_precision		initial(24),	/* 18 bits for word offset + 6 bits for bit offset */
 23    27 
 23    28 	max_words_per_variable		initial (262144),
 23    29 
 23    30 	bits_per_word			initial(36),
 23    31 	bits_per_double			initial(72),
 23    32 	packed_digits_per_character		initial(2),
 23    33 	characters_per_half			initial(2),
 23    34 	characters_per_word			initial(4),
 23    35 	characters_per_double		initial(8),
 23    36 
 23    37 	bits_per_character			initial(9),
 23    38 	bits_per_half			initial(18),
 23    39 	bits_per_decimal_digit		initial(9),
 23    40 	bits_per_binary_exponent		initial(8),
 23    41 	bits_per_packed_ptr			initial(36),
 23    42 	words_per_packed_pointer		initial(1),
 23    43 
 23    44 	words_per_fix_bin_1			initial(1),
 23    45 	words_per_fix_bin_2			initial(2),
 23    46 	words_per_flt_bin_1			initial(1),
 23    47 	words_per_flt_bin_2			initial(2),
 23    48 	words_per_varying_string_header	initial(1),
 23    49 	words_per_offset			initial(1),
 23    50 	words_per_pointer			initial(2),
 23    51 	words_per_label_var			initial(4),
 23    52 	words_per_entry_var			initial(4),
 23    53 	words_per_file_var			initial(4),
 23    54 	words_per_format			initial(4),
 23    55 	words_per_condition_var		initial(6),
 23    56 
 23    57 	max_index_register_value		initial(262143),
 23    58 	max_signed_index_register_value	initial(131071),
 23    59 
 23    60 	max_signed_xreg_precision		initial(17),
 23    61 	max_uns_xreg_precision		initial(18),
 23    62 
 23    63 	default_area_size			initial(1024),
 23    64 	default_flt_bin_p			initial(27),
 23    65 	default_fix_bin_p			initial(17),
 23    66 	default_flt_dec_p			initial(10),
 23    67           default_fix_dec_p   		initial(7)) fixed bin(31) internal static options(constant);
 23    68 
 23    69 dcl	bits_per_digit			initial(4.5)  fixed bin(31,1) internal static options(constant);
 23    70 
 23    71 dcl (	integer_type		initial("010000000000000000000100000001100000"b),
 23    72 	dec_integer_type		initial("010000000000000000000100000010100000"b),
 23    73 	pointer_type		initial("000001000000000000000100000000000000"b),
 23    74 	real_type			initial("001000000000000000000100000001100000"b),
 23    75 	complex_type		initial("001000000000000000000100000001010000"b),
 23    76 	builtin_type		initial("000000000000000010000000000000000000"b),
 23    77 	storage_block_type		initial("000000000000100000000000000000000000"b),
 23    78 	arg_desc_type		initial("000000000001000000000000000000000000"b),
 23    79 	local_label_var_type	initial("000000001000000000000100000100001000"b),
 23    80 	entry_var_type		initial("000000000100000000000000000000001000"b),
 23    81 	bit_type			initial("000100000000000000000000000000000000"b),
 23    82 	char_type			initial("000010000000000000000000000000000000"b)) bit(36) aligned int static
 23    83 									options(constant);
 23    84 
 23    85 /* END INCLUDE FILE ... system.incl.pl1 */
      886 
 24     1 /* BEGIN INCLUDE FILE ... token.incl.pl1 */
 24     2 
 24     3 dcl	1 token			based aligned,
 24     4 	2 node_type		bit(9) unaligned,
 24     5 	2 type			bit(9) unaligned,
 24     6 	2 loc			bit(18) unaligned,	/* symtab offset for identifiers, "p" flag for constants */
 24     7 	2 declaration		ptr unaligned,
 24     8 	2 next			ptr unaligned,
 24     9 	2 size			fixed(9),
 24    10 	2 string			char(n refer(token.size));
 24    11 
 24    12 /* END INCLUDE FILE ... token.incl.pl1 */
      887 
 25     1 /* BEGIN INCLUDE FILE ... token_types.incl.pl1 */
 25     2 
 25     3 dcl (	no_token		initial("000000000"b),	/*	token types		*/
 25     4 	identifier	initial("100000000"b),
 25     5 	isub		initial("010000000"b),
 25     6 	plus		initial("001000001"b),
 25     7 	minus		initial("001000010"b),
 25     8 	asterisk		initial("001000011"b),
 25     9 	slash		initial("001000100"b),
 25    10 	expon		initial("001000101"b),
 25    11 	not		initial("001000110"b),
 25    12 	and		initial("001000111"b),
 25    13 	or		initial("001001000"b),
 25    14 	cat		initial("001001001"b),
 25    15 	eq		initial("001001010"b),
 25    16 	ne		initial("001001011"b),
 25    17 	lt		initial("001001100"b),
 25    18 	gt		initial("001001101"b),
 25    19 	le		initial("001001110"b),
 25    20 	ge		initial("001001111"b),
 25    21 	ngt		initial("001010000"b),
 25    22 	nlt		initial("001010001"b),
 25    23 	assignment	initial("001010010"b),
 25    24 	colon		initial("001010011"b),
 25    25 	semi_colon	initial("001010100"b),
 25    26 	comma		initial("001010101"b),
 25    27 	period		initial("001010110"b),
 25    28 	arrow		initial("001010111"b),
 25    29 	left_parn		initial("001011000"b),
 25    30 	right_parn	initial("001011001"b),
 25    31 	percent		initial("001011100"b),
 25    32 	bit_string	initial("000100001"b),
 25    33 	char_string	initial("000100010"b),
 25    34 	bin_integer	initial("000110001"b),
 25    35 	dec_integer	initial("000110011"b),
 25    36 	fixed_bin		initial("000110000"b),
 25    37 	fixed_dec		initial("000110010"b),
 25    38 	float_bin		initial("000110100"b),
 25    39 	float_dec		initial("000110110"b),
 25    40 	i_bin_integer	initial("000111001"b),
 25    41 	i_dec_integer	initial("000111011"b),
 25    42 	i_fixed_bin	initial("000111000"b),
 25    43 	i_fixed_dec	initial("000111010"b),
 25    44 	i_float_bin	initial("000111100"b),
 25    45 	i_float_dec	initial("000111110"b)) bit (9) aligned internal static options (constant);
 25    46 
 25    47 dcl (	is_identifier		initial ("100000000"b),	/*	token type masks		*/
 25    48 	is_isub			initial ("010000000"b),
 25    49 	is_delimiter		initial ("001000000"b),
 25    50 	is_constant		initial ("000100000"b),
 25    51 	is_arith_constant		initial ("000010000"b),	/* N.B. not really a mask...s/b "000110000"b */
 25    52 	is_arithmetic_constant	initial ("000110000"b),
 25    53 	is_imaginary_constant	initial ("000111000"b),
 25    54 	is_float_constant		initial ("000110100"b),
 25    55 	is_decimal_constant		initial ("000110010"b),
 25    56 	is_integral_constant 	initial ("000110001"b)
 25    57 	) bit(9) internal static aligned options(constant);
 25    58 
 25    59 /* END INCLUDE FILE ... token_types.incl.pl1 */
      888 
      889 	end convert;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    05/05/00  1824.2  convert.pl1                       >udd>sm>ds>w>ml>convert.pl1
872          1    10/25/79  1745.8  pl1_descriptor_type_fcn.incl.pl1  >ldd>incl>pl1_descriptor_type_fcn.incl.pl1
1-27         2    12/07/83  1800.1  pl1_symbol_type.incl.pl1          >ldd>incl>pl1_symbol_type.incl.pl1
1-28         3    10/26/88  1355.5  std_descriptor_types.incl.pl1     >ldd>incl>std_descriptor_types.incl.pl1
1-29         4    12/07/83  1801.7  system.incl.pl1                   >ldd>incl>system.incl.pl1
874          5    07/21/80  1646.3  semant.incl.pl1                   >ldd>incl>semant.incl.pl1
5-228        6    08/01/89  1339.9  language_utility.incl.pl1         >ldd>incl>language_utility.incl.pl1
6-307        7    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
6-325        8    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
6-335        9    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
6-374       10    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
6-386       11    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
875         12    06/28/79  1304.8  picture_image.incl.pl1            >ldd>incl>picture_image.incl.pl1
876         13    10/25/79  1745.8  declare_type.incl.pl1             >ldd>incl>declare_type.incl.pl1
877         14    11/30/78  1327.5  desc_dcls.incl.pl1                >ldd>incl>desc_dcls.incl.pl1
878         15    10/26/88  1355.5  std_descriptor_types.incl.pl1     >ldd>incl>std_descriptor_types.incl.pl1
879         16    11/30/78  1327.5  mask.incl.pl1                     >ldd>incl>mask.incl.pl1
880         17    07/21/80  1646.3  nodes.incl.pl1                    >ldd>incl>nodes.incl.pl1
881         18    04/07/83  1735.0  op_codes.incl.pl1                 >ldd>incl>op_codes.incl.pl1
882         19    07/21/80  1646.3  operator.incl.pl1                 >ldd>incl>operator.incl.pl1
883         20    12/07/83  1800.1  pl1_symbol_type.incl.pl1          >ldd>incl>pl1_symbol_type.incl.pl1
884         21    07/21/80  1646.3  reference.incl.pl1                >ldd>incl>reference.incl.pl1
885         22    12/07/83  1801.7  symbol.incl.pl1                   >ldd>incl>symbol.incl.pl1
886         23    12/07/83  1801.7  system.incl.pl1                   >ldd>incl>system.incl.pl1
887         24    09/14/77  1805.7  token.incl.pl1                    >ldd>incl>token.incl.pl1
888         25    11/30/78  1327.4  token_types.incl.pl1              >ldd>incl>token_types.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
abs                                                    builtin function         dcl 53 ref 771 772 789 803
action_index                    000027 constant        fixed bin(15,0)          initial array dcl 727 ref 744
addr                                                   builtin function         dcl 53 ref 168 181 182 189 190 206 214 222 256 257
                                                                                  264 271 278 279 293 301 307 351 351 351 351 351
                                                                                  351 364 367 367 367 368 385 388 388 388 389 411
                                                                                  418 418 418 428 428 428 428 428 428 428 437 442
                                                                                  442 442 443 446 456 458 463 463 463 463 463 463
                                                                                  463 463 463 465 465 465 465 465 465 473 475 476
                                                                                  479 479 479 487 489 490 493 493 493 504 506 511
                                                                                  511 511 511 511 511 511 511 511 513 513 513 513
                                                                                  513 513 521 523 524 527 527 527 533 535 536 539
                                                                                  539 539 548 548 548 548 548 548 557 557 558 562
                                                                                  562 566 566 566 577 577 582 584 584 593 604 635
                                                                                  635 752 752 756 756 760 760 762 762 765 765 765
                                                                                  769 769 771 771 771 772 772 772 772 772 772 774
                                                                                  775 775 778 778 782 782 786 788 789 789 793 794
                                                                                  797 797 797 801 801 803 803 803 803 803 803 805
                                                                                  805 808 808 812 812 816 816 818 818 821 821 825
                                                                                  825 829 829 831 831 834 838 842 846 846 848 848
                                                                                  858 858 860 863 863 866
aligned                   0(21) 000335 automatic       bit(1)                   level 2 in structure "itype" packed packed unaligned
                                                                                  dcl 39 in procedure "convert" set ref 338 343
aligned                   0(21) 000336 automatic       bit(1)                   level 2 in structure "otype" packed packed unaligned
                                                                                  dcl 40 in procedure "convert" set ref 338 343*
aligned_mask                           constant        bit(36)                  initial dcl 16-3 ref 204 291
alignment_ok                    000323 automatic       bit(1)                   dcl 31 set ref 334* 338* 341 351 360
area                      0(07) 000434 automatic       bit(1)                   level 2 packed packed unaligned dcl 2-3 set ref 1-98
area_dtype                             constant        fixed bin(17,0)          initial dcl 3-25 ref 1-98
arg_descriptor           31(11)        based           bit(1)                   level 4 packed packed unaligned dcl 22-3 ref 185 275
assign                          000365 constant        bit(9)                   initial dcl 18-8 set ref 581*
assign_                         000170 constant        entry                    external dcl 14-22 ref 463 511 548
attributes               31            based           structure                level 2 dcl 22-3 ref 195 282
binary                    0(29) 000434 automatic       bit(1)                   level 2 in structure "type" packed packed unaligned
                                                                                  dcl 2-3 in procedure "pl1_descriptor_type" set ref
                                                                                  1-38 1-53 1-60 1-71
binary                                                 builtin function         dcl 53 in procedure "convert" ref 548
bit                                                    builtin function         dcl 53 in procedure "convert" ref 527 539
bit                       0(03) 000434 automatic       bit(1)                   level 2 in structure "type" packed packed unaligned
                                                                                  dcl 2-3 in procedure "pl1_descriptor_type" set ref
                                                                                  1-78
bit                      31(03)        based           bit(1)                   level 4 in structure "symbol" packed packed
                                                                                  unaligned dcl 22-3 in procedure "convert" ref 165
                                                                                  260
bit                       0(03) 000336 automatic       bit(1)                   level 2 in structure "otype" packed packed unaligned
                                                                                  dcl 40 in procedure "convert" set ref 332 496 582
bit_dtype                              constant        fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
                                                                                  ref 1-83
bit_dtype                              constant        fixed bin(17,0)          initial dcl 15-25 in procedure "convert" ref 417 437
bit_string                      000356 constant        bit(9)                   initial dcl 25-3 set ref 415 419* 467 516
bit_target                             based           bit                      dcl 49 set ref 513* 513 527* 539*
bits_per_double                        constant        fixed bin(31,0)          initial dcl 23-5 ref 504 521 533
block_node                4            based           pointer                  level 2 packed packed unaligned dcl 22-3 ref 600
bv_prec                                parameter       fixed bin(24,0)          dcl 1-13 ref 1-8 1-34
bv_target_type                         parameter       bit(36)                  dcl 22 ref 18 105 111 119
bv_type                                parameter       bit(36)                  packed unaligned dcl 1-13 ref 1-8 1-33
by_compiler                            constant        bit(3)                   initial dcl 13-5 ref 686
c_dcl_size               30            based           fixed bin(24,0)          level 2 dcl 22-3 ref 181 256 562 593
c_length                  2            based           fixed bin(24,0)          level 2 dcl 21-3 set ref 168 271 593* 607*
ceil                                                   builtin function         dcl 53 ref 756 760 762 769 771 778 786 788 789 789
                                                                                  797 808 816 821 825 858
char                     31(04)        based           bit(1)                   level 4 in structure "symbol" packed packed
                                                                                  unaligned dcl 22-3 in procedure "convert" ref 165
                                                                                  260
char                      0(04) 000434 automatic       bit(1)                   level 2 in structure "type" packed packed unaligned
                                                                                  dcl 2-3 in procedure "pl1_descriptor_type" set ref
                                                                                  1-84
char                      0(04) 000336 automatic       bit(1)                   level 2 in structure "otype" packed packed unaligned
                                                                                  dcl 40 in procedure "convert" set ref 322 332 351
                                                                                  376 450 582 630
char                      0(04) 000335 automatic       bit(1)                   level 2 in structure "itype" packed packed unaligned
                                                                                  dcl 39 in procedure "convert" set ref 624 630
char_dtype                             constant        fixed bin(17,0)          initial dcl 15-25 in procedure "convert" ref 423 437
                                                                                  548
char_dtype                             constant        fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
                                                                                  ref 1-89 1-114
char_mask                              constant        bit(36)                  initial dcl 16-3 ref 201 288
char_string                            constant        bit(9)                   initial dcl 25-3 ref 423 484 530
char_target                            based           char                     dcl 48 set ref 465* 465 479* 493*
char_to_numeric_                000166 constant        entry                    external dcl 14-22 ref 428
characters_per_double                  constant        fixed bin(31,0)          initial dcl 23-5 ref 456 473 487
chars                     2            based           char                     level 2 dcl 12-6 set ref 658*
compiler_developed       32(35)        based           structure                level 3 packed packed unaligned dcl 22-3
complex                  31(31)        based           bit(1)                   level 4 in structure "symbol" packed packed
                                                                                  unaligned dcl 22-3 in procedure "convert" ref 208
                                                                                  295
complex                   0(31) 000340 automatic       bit(1)                   level 2 in structure "tpicture" packed packed
                                                                                  unaligned dcl 42 in procedure "convert" set ref
                                                                                  658
complex                   0(31) 000434 automatic       bit(1)                   level 2 in structure "type" packed packed unaligned
                                                                                  dcl 2-3 in procedure "pl1_descriptor_type" set ref
                                                                                  1-60
complex                   0(31) 000335 automatic       bit(1)                   level 2 in structure "itype" packed packed unaligned
                                                                                  dcl 39 in procedure "convert" set ref 775 805 818
                                                                                  831
computational_mask              000367 constant        bit(36)                  initial dcl 16-41 ref 400
conversion                      000342 stack reference condition                dcl 57 ref 407
convert$to_integer              000144 constant        entry                    external dcl 6-66 ref 601
convert_mask                    000366 constant        bit(36)                  initial dcl 16-41 ref 119 195
copy_expression                 000146 constant        entry                    external dcl 6-94 ref 591 599
cplx_fix_bin_1_dtype                   constant        fixed bin(17,0)          initial dcl 3-25 ref 1-60
cplx_fix_bin_2_dtype                   constant        fixed bin(17,0)          initial dcl 3-25 ref 1-67
cplx_fix_dec_4bit_bytealigned_ls_dtype constant        fixed bin(17,0)          initial dcl 3-25 ref 1-68
cplx_fix_dec_9bit_ls_dtype             constant        fixed bin(17,0)          initial dcl 3-25 ref 1-70
cplx_flt_bin_1_dtype                   constant        fixed bin(17,0)          initial dcl 3-25 ref 1-71
cplx_flt_bin_2_dtype                   constant        fixed bin(17,0)          initial dcl 3-25 ref 1-74
cplx_flt_dec_4bit_bytealigned_dtype    constant        fixed bin(17,0)          initial dcl 3-25 ref 1-75
cplx_flt_dec_9bit_dtype                constant        fixed bin(17,0)          initial dcl 3-25 ref 1-77
create_operator                 000150 constant        entry                    external dcl 6-152 ref 265 581 597 634 656
create_token                    000152 constant        entry                    external dcl 6-191 ref 419
data_type                31            based           structure                level 3 packed packed unaligned dcl 22-3
dcl_size                 24            based           pointer                  level 2 packed packed unaligned dcl 22-3 set ref 562
                                                                                  569 595 599*
dcl_type                  1(19)        based           bit(3)                   level 2 packed packed unaligned dcl 22-3 ref 686
decimal                   0(28) 000336 automatic       bit(1)                   level 2 packed packed unaligned dcl 40 set ref 434
decimal_mask                           constant        bit(36)                  initial dcl 16-3 ref 204 291
declare_constant                000154 constant        entry                    external dcl 6-211 ref 557 566
declare_constant$integer        000156 constant        entry                    external dcl 6-234 ref 604
declare_picture_temp            000160 constant        entry                    external dcl 6-279 ref 658
declare_temporary               000162 constant        entry                    external dcl 6-292 ref 267 582 584 598 635
default_fix_bin_p                      constant        fixed bin(31,0)          initial dcl 23-5 ref 189 278
defined_itype                          defined         bit(36)                  packed unaligned dcl 61 set ref 280* 282* 288* 288
                                                                                  291* 291 295* 295 300* 300 303* 303 307* 635
defined_otype                          defined         bit(36)                  packed unaligned dcl 62 set ref 161* 191* 201* 201
                                                                                  204* 204 208* 208 213* 213 216* 216 222* 446* 557
                                                                                  566 582 584
divide                                                 builtin function         dcl 53 ref 429
dtype                           000433 automatic       fixed bin(17,0)          dcl 1-18 set ref 1-36* 1-38* 1-46* 1-47* 1-49* 1-50*
                                                                                  1-52* 1-53* 1-56* 1-57* 1-59* 1-60* 1-67* 1-68*
                                                                                  1-70* 1-71* 1-74* 1-75* 1-77* 1-78* 1-83* 1-84*
                                                                                  1-89* 1-90* 1-94* 1-98* 1-102* 1-106* 1-110*
                                                                                  1-114* 1-118* 1-120
entry                     0(09) 000434 automatic       bit(1)                   level 2 packed packed unaligned dcl 2-3 set ref
                                                                                  1-106
entry_dtype                            constant        fixed bin(17,0)          initial dcl 3-25 ref 1-106
explicit_packed           0(13) 000335 automatic       bit(1)                   level 2 in structure "itype" packed packed unaligned
                                                                                  dcl 39 in procedure "convert" set ref 338
explicit_packed           0(13) 000336 automatic       bit(1)                   level 2 in structure "otype" packed packed unaligned
                                                                                  dcl 40 in procedure "convert" set ref 338
expression_semantics            000140 constant        entry                    external dcl 5-105 ref 600
file                      0(10) 000434 automatic       bit(1)                   level 2 packed packed unaligned dcl 2-3 set ref
                                                                                  1-110
file_dtype                             constant        fixed bin(17,0)          initial dcl 3-25 ref 1-110
fill_refer                      000142 constant        entry                    external dcl 5-113 ref 602
fixed                     0(01) 000434 automatic       bit(1)                   level 2 in structure "type" packed packed unaligned
                                                                                  dcl 2-3 in procedure "pl1_descriptor_type" set ref
                                                                                  1-38 1-60
fixed                    31(01)        based           bit(1)                   level 4 in structure "symbol" packed packed
                                                                                  unaligned dcl 22-3 in procedure "convert" ref 177
                                                                                  254
fixed                                                  builtin function         dcl 53 in procedure "convert" ref 756 760 762 769
                                                                                  771 772 778 786 788 789 789 797 803 808 816 821
                                                                                  825 858
fixed_mask                             constant        bit(36)                  initial dcl 16-3 ref 213 300
fixedoverflow                   000350 stack reference condition                dcl 57 ref 407
float                    31(02)        based           bit(1)                   level 4 packed packed unaligned dcl 22-3 ref 177 254
float_mask                             constant        bit(36)                  initial dcl 16-3 ref 216 303
general                  16            based           pointer                  level 2 packed packed unaligned dcl 22-3 ref 624 624
                                                                                  657
inclength                              based           fixed bin(31,0)          dcl 14-19 set ref 264* 271* 411* 418 418* 418 428
info                                   based           structure                level 1 dcl 14-11
initial                  11            based           pointer                  level 2 packed packed unaligned dcl 22-3 ref 624 624
                                                                                  657
inlength                        000112 automatic       pointer                  dcl 27 set ref 224* 265* 266 267 268 272* 277* 351
                                                                                  852 855*
inpicture                       000337 automatic       structure                level 1 packed packed unaligned dcl 41 set ref 120*
                                                                                  152* 286* 322 351 376 613 617 630
inprec                    0(18)        based           fixed bin(17,0)          level 2 packed packed unaligned dcl 14-11 set ref
                                                                                  256* 278* 293* 307 351 351 367 635 752 756 760 765
                                                                                  769 778 782 786 789 797 801 803 808 812 816 821
                                                                                  825 829 846 858 863
input                           000106 automatic       pointer                  dcl 27 set ref 247* 248 254 254 256 257 260 260 260
                                                                                  275 282 284 288 293 295 298 301 315* 624
inscale                                based           fixed bin(17,0)          level 2 packed packed unaligned dcl 14-11 set ref
                                                                                  257* 279* 301* 351 364 367 437 635 762 765 771 771
                                                                                  788 789 797 803 803 803 848
inscale_prec                    000410 automatic       fixed bin(35,0)          dcl 14-8 set ref 225* 256 257 264 271 278 279 293
                                                                                  301 307 351 351 351 364 367 367 411 418 418 418
                                                                                  428* 428 437 463* 511* 635 635 752 756 760 762 765
                                                                                  765 769 771 771 778 782 786 788 789 789 797 797
                                                                                  801 803 803 803 803 808 812 816 821 825 829 846
                                                                                  848 858 863
integer_type                    000357 constant        bit(36)                  initial dcl 23-71 set ref 191 267* 280 598* 601*
intype                          000406 automatic       fixed bin(17,0)          dcl 14-5 set ref 250* 307* 311 315 318 320 351 360
                                                                                  417* 423* 428* 429* 429 437 437 463 511 744
is_arith_constant                      constant        bit(9)                   initial dcl 25-47 ref 452 500
is_arithmetic_constant                 constant        bit(9)                   initial dcl 25-47 ref 545 545
is_constant                            constant        bit(9)                   initial dcl 25-47 ref 404
itype                           000335 automatic       structure                level 1 packed packed unaligned dcl 39 set ref 280*
                                                                                  280 282* 282 286 288* 288 288 288 291* 291 291 291
                                                                                  295* 295 295 295 300* 300 300 300 303* 303 303 303
                                                                                  307 307 635 635
keep_full_precision             000331 automatic       bit(1)                   initial dcl 31 set ref 31* 133* 434
known                           000324 automatic       bit(1)                   dcl 31 set ref 116* 144* 172* 351 432 456 473 487
                                                                                  504 521 533 746
label                     0(08) 000434 automatic       bit(1)                   level 2 packed packed unaligned dcl 2-3 set ref
                                                                                  1-102
label_dtype                            constant        fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
                                                                                  ref 1-102
label_dtype                            constant        fixed bin(17,0)          initial dcl 15-25 in procedure "convert" ref 236 250
label_mask                             constant        bit(36)                  initial dcl 16-3 ref 161
label_node                             constant        bit(9)                   initial dcl 17-5 ref 159 236 248
length                    6            based           pointer                  level 2 packed packed unaligned dcl 21-3 set ref 167
                                                                                  272 606*
length_fun                      000362 constant        bit(9)                   initial dcl 18-8 set ref 265*
log10                                                  builtin function         dcl 53 ref 772 803
long_bit                        000327 automatic       bit(1)                   initial dcl 31 set ref 31* 460* 477* 491* 508* 525*
                                                                                  537* 552 558
m                               000320 automatic       fixed bin(17,0)          dcl 27 in procedure "convert" set ref 320* 322 322*
m                                      parameter       fixed bin(17,0)          dcl 676 in procedure "print" set ref 673 689* 689
                                                                                  692 692* 695
max                                                    builtin function         dcl 53 ref 367 388 442 577 765 797
max_length_precision            000360 constant        fixed bin(31,0)          initial dcl 23-5 set ref 267* 598*
max_p_dec                              constant        fixed bin(31,0)          initial dcl 23-5 ref 756 760 769 808 816 838
max_p_fix_bin_1                        constant        fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
                                                                                  ref 1-38 1-47 1-60
max_p_fix_bin_1                        constant        fixed bin(31,0)          initial dcl 23-5 in procedure "convert" ref 388 442
                                                                                  577
max_p_fix_bin_2                        constant        fixed bin(31,0)          initial dcl 23-5 ref 765 786 797 812 825 834 858
max_p_flt_bin_1                        constant        fixed bin(31,0)          initial dcl 4-5 ref 1-53 1-71
max_p_flt_bin_2                        constant        fixed bin(31,0)          initial dcl 23-5 ref 752 778 821 842
max_scale                              constant        fixed bin(31,0)          initial dcl 23-5 ref 789
message                         000010 internal static fixed bin(17,0)          initial array dcl 89 set ref 241* 320
min                                                    builtin function         dcl 53 ref 388 442 562 577 593 752 756 760 765 769
                                                                                  778 786 797 808 812 816 821 825 858
min_fun                         000361 constant        bit(9)                   initial dcl 18-8 set ref 597*
min_scale                       005513 constant        fixed bin(31,0)          initial dcl 23-5 ref 789
misc_attributes          31(19)        based           structure                level 3 packed packed unaligned dcl 22-3
n                               000321 automatic       fixed bin(17,0)          dcl 27 set ref 471* 472 472* 472 476 479 519* 520
                                                                                  520* 520 524 527
node                                   based           structure                level 1 dcl 17-27
null                                                   builtin function         dcl 53 ref 118 150 154 180 188 224 226 234 267 267
                                                                                  277 316 316 552 562 569 595 598 598 635 635 678
                                                                                  680
offset                    0(06) 000434 automatic       bit(1)                   level 2 packed packed unaligned dcl 2-3 set ref 1-94
offset_dtype                           constant        fixed bin(17,0)          initial dcl 3-25 ref 1-94
op_code                   0(09)        based           bit(9)                   level 2 packed packed unaligned dcl 19-6 ref 620 638
operand                   1            based           pointer                  array level 2 packed packed unaligned dcl 19-6 set
                                                                                  ref 230 267* 268* 582* 584* 586* 591* 591* 593
                                                                                  598* 599* 600* 600 601* 601 602* 602 604* 606 607
                                                                                  635* 641* 641 642* 645* 649* 658* 663* 853*
operator                               based           structure                level 1 dcl 19-6
operator_node                          constant        bit(9)                   initial dcl 17-5 ref 230 620 638
oprec                           000422 automatic       fixed bin(15,0)          dcl 706 set ref 786* 789 793
oscale                          000423 automatic       fixed bin(15,0)          dcl 706 set ref 788* 789 789 789 789* 794
otype                           000336 automatic       structure                level 1 packed packed unaligned dcl 40 set ref 119*
                                                                                  161* 161 191* 191 195* 199 201* 201 201 201 204*
                                                                                  204 204 204 208* 208 208 208 213* 213 213 213 216*
                                                                                  216 216 216 222 222 400 446 446 557 557 566 566
                                                                                  582 582 584 584
outclength                             based           fixed bin(31,0)          dcl 14-20 set ref 168* 456 458 463 465 465 473 475
                                                                                  476* 479 487 489 490* 493 504 506 511 513 513 521
                                                                                  523 524* 527 533 535 536* 539 557 562* 562 582*
                                                                                  593 604
outfo                                  based           structure                level 1 dcl 14-15
outprec                   0(18)        based           fixed bin(17,0)          level 2 packed packed unaligned dcl 14-15 set ref
                                                                                  181* 189* 206* 222 351 351 367* 388* 388 442* 442
                                                                                  446 558* 566 577* 577 584 752* 756* 760* 765* 769*
                                                                                  772 772* 772 775* 775 778* 782* 793* 797* 801*
                                                                                  803* 803 805* 805 808* 812* 816* 818* 818 821*
                                                                                  825* 829* 831* 831 834* 838* 842* 846* 858* 863*
output                          000110 automatic       pointer                  dcl 27 set ref 581* 582 584 586 587 591 591 593 606
                                                                                  607 611 634* 635 636 641 642 645 646 649 650 656*
                                                                                  658 663 664 666
outscale                               based           fixed bin(17,0)          level 2 packed packed unaligned dcl 14-15 set ref
                                                                                  182* 190* 214* 351 368* 385 388 389* 442 443* 566
                                                                                  584 762* 771* 772 772 772 774* 794* 848* 860* 866*
outscale_prec                   000411 automatic       fixed bin(35,0)          dcl 14-8 set ref 117* 149* 168 181 182 189 190 206
                                                                                  214 222 351 351 351 367 368 385 388 388 388 389
                                                                                  442 442 442 443 446 456 458 463 465 465 473 475
                                                                                  476 479 487 489 490 493 504 506 511 513 513 521
                                                                                  523 524 527 533 535 536 539 548* 557 558 562 562
                                                                                  566 566 577 577 582 584 584 593 604 752 756 760
                                                                                  762 765 769 771 772 772 772 772 772 772 774 775
                                                                                  775 778 782 793 794 797 801 803 803 805 805 808
                                                                                  812 816 818 818 821 825 829 831 831 834 838 842
                                                                                  846 848 858 860 863 866
outtype                         000407 automatic       fixed bin(17,0)          dcl 14-5 set ref 222* 236 241 311 316 318 320 351
                                                                                  360 446* 463 511 548 744
overflow                        000356 stack reference condition                dcl 57 ref 407
p                               000100 automatic       pointer                  dcl 27 set ref 657* 658 658
pack                            000364 constant        bit(9)                   initial dcl 18-8 set ref 620 656*
pic_char                  1(30)        based           bit(1)                   level 3 packed packed unaligned dcl 22-3 ref 201 288
pic_fixed                 1(28)        based           bit(1)                   level 3 packed packed unaligned dcl 22-3 ref 211 298
pic_scale                 1(31)        based           fixed bin(7,0)           level 3 packed packed unaligned dcl 22-3 ref 214 301
pic_size                  2(03)        based           fixed bin(7,0)           level 3 packed packed unaligned dcl 22-3 ref 206 293
piclength                 0(27)        based           fixed bin(8,0)           level 2 packed packed unaligned dcl 12-6 ref 658 658
picture                  31(18)        based           bit(1)                   level 4 in structure "symbol" packed packed
                                                                                  unaligned dcl 22-3 in procedure "convert" ref 165
                                                                                  197 260 284 434
picture                   0(18) 000434 automatic       bit(1)                   level 2 in structure "type" packed packed unaligned
                                                                                  dcl 2-3 in procedure "pl1_descriptor_type" set ref
                                                                                  1-114
picture_image                          based           structure                level 1 dcl 12-6
picture_mask                           constant        bit(36)                  initial dcl 16-3 ref 201 204 288 291
pix                       1(28)        based           structure                level 2 packed packed unaligned dcl 22-3
pl1_stat_$cur_statement         000136 external static pointer                  dcl 70 set ref 600*
pl1_stat_$util_abort            000132 external static entry variable           dcl 66 ref 315 316 400 692
pl1_stat_$util_error            000134 external static entry variable           dcl 66 ref 695
plain_desc_type                 000447 constant        fixed bin(17,0)          initial array dcl 74 ref 311 311 360 360
pointer1                        000120 automatic       pointer                  array dcl 27 set ref 428 428 463 463 465 479 493 511
                                                                                  511 513 527 539 548 548 557 566
pointer2                        000220 automatic       pointer                  array dcl 27 set ref 463 463 465 511 511 513
pointer_dtype                          constant        fixed bin(17,0)          initial dcl 3-25 ref 1-90
prec                            000432 automatic       fixed bin(24,0)          dcl 1-18 set ref 1-34* 1-38 1-47 1-53 1-60 1-71
processed                 0(19)        based           bit(1)                   level 2 packed packed unaligned dcl 19-6 set ref
                                                                                  266* 587* 636* 664*
ptr                       0(05) 000434 automatic       bit(1)                   level 2 packed packed unaligned dcl 2-3 set ref 1-90
qualifier                 4            based           pointer                  level 2 packed packed unaligned dcl 21-3 ref 602
r                               000102 automatic       pointer                  dcl 27 set ref 230* 232* 234 236 243 247 260 271 272
                                                                                  597* 598 599 600 600 601 601 602 602 604 606
real                      0(30) 000434 automatic       bit(1)                   level 2 packed packed unaligned dcl 2-3 set ref 1-38
real_fix_bin_1_dtype                   constant        fixed bin(17,0)          initial dcl 3-25 ref 1-47
real_fix_bin_1_uns_dtype               constant        fixed bin(17,0)          initial dcl 3-25 ref 1-38
real_fix_bin_2_dtype                   constant        fixed bin(17,0)          initial dcl 3-25 ref 1-49
real_fix_bin_2_uns_dtype               constant        fixed bin(17,0)          initial dcl 3-25 ref 1-46
real_fix_dec_4bit_bytealigned_ls_dtype constant        fixed bin(17,0)          initial dcl 3-25 ref 1-50
real_fix_dec_9bit_ls_dtype             constant        fixed bin(17,0)          initial dcl 3-25 ref 1-52
real_flt_bin_1_dtype                   constant        fixed bin(17,0)          initial dcl 3-25 ref 1-53
real_flt_bin_2_dtype                   constant        fixed bin(17,0)          initial dcl 3-25 ref 1-56
real_flt_dec_4bit_bytealigned_dtype    constant        fixed bin(17,0)          initial dcl 3-25 ref 1-57
real_flt_dec_9bit_dtype                constant        fixed bin(17,0)          initial dcl 3-25 ref 1-59
real_mask                              constant        bit(36)                  initial dcl 16-3 ref 208 295
refer_extents            33(05)        based           bit(1)                   level 4 packed packed unaligned dcl 22-3 ref 602
reference                              based           structure                level 1 dcl 21-3
reference_node                         constant        bit(9)                   initial dcl 17-5 ref 155 243 682 686
return_tree                     000116 automatic       pointer                  dcl 27 set ref 355* 362* 379* 566* 611* 613 620 620
                                                                                  620 624 638 638 641 642 645 646* 649 650* 663 666*
                                                                                  669
scale                     2(28)        based           fixed bin(7,0)           level 2 packed packed unaligned dcl 22-3 ref 182 257
scalefactor               1(09)        based           fixed bin(8,0)           level 2 packed packed unaligned dcl 12-6 ref 658
share_expression                000164 constant        entry                    external dcl 6-454 ref 853 855
sign                                                   builtin function         dcl 53 ref 771
sign_type_ok                    000325 automatic       bit(1)                   dcl 31 set ref 335* 339* 347 351 360
simplify                        000300 constant        fixed bin(17,0)          initial array dcl 712 ref 744 744
simplify_for_message            000370 constant        fixed bin(17,0)          initial array dcl 78 ref 241 315 316 320 320
size                            000372 stack reference condition                dcl 57 in procedure "convert" ref 408
size                      3            based           fixed bin(9,0)           level 2 in structure "token" dcl 24-3 in procedure
                                                                                  "convert" ref 411 419 428 428 471 479 490 493 519
                                                                                  527 536 539 548 548 548
std_call                               constant        bit(9)                   initial dcl 18-8 ref 638
string                    4            based           char                     level 2 in structure "token" dcl 24-3 in procedure
                                                                                  "convert" set ref 419 428 428 479 493 527 539 548
                                                                                  548
string                                                 builtin function         dcl 1-23 in procedure "pl1_descriptor_type" set ref
                                                                                  1-33*
string                                                 builtin function         dcl 53 in procedure "convert" set ref 119* 120* 121*
                                                                                  152* 153* 195* 195 199* 199 282 286* 286 322 351
                                                                                  376 400 613 613 617 617 630 654
stringsize                      000400 stack reference condition                dcl 57 ref 409
structure                       000434 automatic       bit(1)                   level 2 packed packed unaligned dcl 2-3 set ref 1-36
structure_dtype                        constant        fixed bin(17,0)          initial dcl 3-25 ref 1-36
substr                                                 builtin function         dcl 53 ref 195 282 479 527
suppress_bit                    000332 automatic       bit(1)                   initial dcl 31 set ref 31* 102* 109* 126* 138* 695
svprec                          000322 automatic       fixed bin(17,0)          dcl 27 set ref 458* 475* 489* 506* 523* 535* 558
symbol                                 based           structure                level 1 dcl 22-3 in procedure "convert"
symbol                          000100 automatic       pointer                  dcl 675 in procedure "print" set ref 678* 690* 692*
                                                                                  695*
symbol                    3            based           pointer                  level 2 in structure "reference" packed packed
                                                                                  unaligned dcl 21-3 in procedure "convert" ref 157
                                                                                  247 624 624 657 686
target                          000104 automatic       pointer                  dcl 27 set ref 157* 159 165 165 165 177 177 181 182
                                                                                  185 195 197 201 206 208 211 214 434 562 562 569
                                                                                  593 595 599 600 602 624 657
target_must_be_integer          000330 automatic       bit(1)                   initial dcl 31 set ref 31* 108* 364 385 437 577 789
target_ref                             parameter       pointer                  dcl 27 ref 124 130 136 154 155 157 167 168 170 602
tlength                         000114 automatic       pointer                  dcl 27 set ref 118* 150* 167* 180* 188* 351 552 582*
                                                                                  584* 852* 853 855*
token                                  based           structure                level 1 dcl 24-3
token_node                             constant        bit(9)                   initial dcl 17-5 ref 228 682
tpicture                        000340 automatic       structure                level 1 packed packed unaligned dcl 42 set ref 121*
                                                                                  153* 199* 613 617 654
tree                                   parameter       pointer                  dcl 22 set ref 18 105 111 124 130 136 226 228 230
                                                                                  230 232 268 355 362 379 400* 404 411 415 419 419*
                                                                                  423 428 428 452 467 471 479 484 490 493 500 516
                                                                                  519 527 530 536 539 545 548 548 548 557* 566* 586
                                                                                  680 682 682 686 686 690 853*
type                      0(09)        based           bit(9)                   level 2 in structure "token" packed packed unaligned
                                                                                  dcl 24-3 in procedure "convert" ref 404 415 423
                                                                                  452 467 484 500 516 530 545
type                            000434 automatic       structure                level 1 packed packed unaligned dcl 2-3 in procedure
                                                                                  "pl1_descriptor_type" set ref 1-33*
type                                   based           bit(9)                   level 2 in structure "node" packed packed unaligned
                                                                                  dcl 17-27 in procedure "convert" ref 155 159 228
                                                                                  230 236 243 248 620 638 682 682 686
type                            000412 automatic       structure                level 1 packed packed unaligned dcl 20-3
                                                                                  in procedure "convert"
unaligned                 0(22) 000340 automatic       bit(1)                   level 2 in structure "tpicture" packed packed
                                                                                  unaligned dcl 42 in procedure "convert" set ref
                                                                                  658
unaligned                 0(22) 000336 automatic       bit(1)                   level 2 in structure "otype" packed packed unaligned
                                                                                  dcl 40 in procedure "convert" set ref 338 344* 548
unaligned                 0(22) 000434 automatic       bit(1)                   level 2 in structure "type" packed packed unaligned
                                                                                  dcl 2-3 in procedure "pl1_descriptor_type" set ref
                                                                                  1-50 1-57 1-68 1-75
unaligned                 0(22) 000335 automatic       bit(1)                   level 2 in structure "itype" packed packed unaligned
                                                                                  dcl 39 in procedure "convert" set ref 338 344
unaligned_mask                         constant        bit(36)                  initial dcl 16-3 ref 204 291
underflow                       000364 stack reference condition                dcl 57 ref 407
undesirable_mask                005514 constant        bit(36)                  initial dcl 16-41 ref 635
unpack                          000363 constant        bit(9)                   initial dcl 18-8 set ref 634*
unsigned                  0(24) 000336 automatic       bit(1)                   level 2 in structure "otype" packed packed unaligned
                                                                                  dcl 40 in procedure "convert" set ref 339 347*
unsigned                  0(24) 000434 automatic       bit(1)                   level 2 in structure "type" packed packed unaligned
                                                                                  dcl 2-3 in procedure "pl1_descriptor_type" set ref
                                                                                  1-38
unsigned                  0(24) 000335 automatic       bit(1)                   level 2 in structure "itype" packed packed unaligned
                                                                                  dcl 39 in procedure "convert" set ref 339 347
validate_bit                    000326 automatic       bit(1)                   dcl 31 set ref 114* 127* 132* 138* 236 311 327
value1                                 based           bit(2304)                dcl 46 set ref 428 428 463 463 465 479 493 511 511
                                                                                  513 527 539 548 548 557* 566*
value2                                 based           bit(2304)                dcl 47 set ref 463 463 465 511 511 513
varying                   0(26) 000434 automatic       bit(1)                   level 2 packed packed unaligned dcl 2-3 set ref 1-78
                                                                                  1-84
varying_bit_dtype                      constant        fixed bin(17,0)          initial dcl 3-25 ref 1-78
varying_char_dtype                     constant        fixed bin(17,0)          initial dcl 3-25 ref 1-84
varying_input                   000333 automatic       bit(1)                   initial dcl 31 set ref 31* 263* 850
varying_ref               0(10)        based           bit(1)                   level 2 packed packed unaligned dcl 21-3 ref 170 260
varying_result                  000334 automatic       bit(1)                   initial dcl 31 set ref 31* 173* 562 569 589

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
a_format                               internal static bit(9)                   initial dcl 18-8
abs_fun                                internal static bit(9)                   initial dcl 18-8
acos_fun                               internal static bit(9)                   initial dcl 18-8
acosd_fun                              internal static bit(9)                   initial dcl 18-8
add                                    internal static bit(9)                   initial dcl 18-8
addbitno_fun                           internal static bit(9)                   initial dcl 18-8
addcharno_fun                          internal static bit(9)                   initial dcl 18-8
addr_fun                               internal static bit(9)                   initial dcl 18-8
addr_fun_bits                          internal static bit(9)                   initial dcl 18-8
addrel_fun                             internal static bit(9)                   initial dcl 18-8
adjust_count                    000000 constant        entry                    external dcl 6-20
algol68_array_descriptor_dtype         internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
algol68_array_descriptor_dtype         internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
algol68_bits_dtype                     internal static fixed bin(17,0)          initial dcl 3-110 in procedure "pl1_descriptor_type"
algol68_bits_dtype                     internal static fixed bin(17,0)          initial dcl 15-110 in procedure "convert"
algol68_bool_dtype                     internal static fixed bin(17,0)          initial dcl 3-110 in procedure "pl1_descriptor_type"
algol68_bool_dtype                     internal static fixed bin(17,0)          initial dcl 15-110 in procedure "convert"
algol68_byte_dtype                     internal static fixed bin(17,0)          initial dcl 3-110 in procedure "pl1_descriptor_type"
algol68_byte_dtype                     internal static fixed bin(17,0)          initial dcl 15-110 in procedure "convert"
algol68_char_dtype                     internal static fixed bin(17,0)          initial dcl 15-110 in procedure "convert"
algol68_char_dtype                     internal static fixed bin(17,0)          initial dcl 3-110 in procedure "pl1_descriptor_type"
algol68_compl_dtype                    internal static fixed bin(17,0)          initial dcl 3-110 in procedure "pl1_descriptor_type"
algol68_compl_dtype                    internal static fixed bin(17,0)          initial dcl 15-110 in procedure "convert"
algol68_format_dtype                   internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
algol68_format_dtype                   internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
algol68_int_dtype                      internal static fixed bin(17,0)          initial dcl 15-110 in procedure "convert"
algol68_int_dtype                      internal static fixed bin(17,0)          initial dcl 3-110 in procedure "pl1_descriptor_type"
algol68_long_compl_dtype               internal static fixed bin(17,0)          initial dcl 3-110 in procedure "pl1_descriptor_type"
algol68_long_compl_dtype               internal static fixed bin(17,0)          initial dcl 15-110 in procedure "convert"
algol68_long_int_dtype                 internal static fixed bin(17,0)          initial dcl 15-110 in procedure "convert"
algol68_long_int_dtype                 internal static fixed bin(17,0)          initial dcl 3-110 in procedure "pl1_descriptor_type"
algol68_long_real_dtype                internal static fixed bin(17,0)          initial dcl 15-110 in procedure "convert"
algol68_long_real_dtype                internal static fixed bin(17,0)          initial dcl 3-110 in procedure "pl1_descriptor_type"
algol68_real_dtype                     internal static fixed bin(17,0)          initial dcl 15-110 in procedure "convert"
algol68_real_dtype                     internal static fixed bin(17,0)          initial dcl 3-110 in procedure "pl1_descriptor_type"
algol68_short_int_dtype                internal static fixed bin(17,0)          initial dcl 3-110 in procedure "pl1_descriptor_type"
algol68_short_int_dtype                internal static fixed bin(17,0)          initial dcl 15-110 in procedure "convert"
algol68_straight_dtype                 internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
algol68_straight_dtype                 internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
algol68_struct_struct_bool_dtype       internal static fixed bin(17,0)          initial dcl 15-110 in procedure "convert"
algol68_struct_struct_bool_dtype       internal static fixed bin(17,0)          initial dcl 3-110 in procedure "pl1_descriptor_type"
algol68_struct_struct_char_dtype       internal static fixed bin(17,0)          initial dcl 3-110 in procedure "pl1_descriptor_type"
algol68_struct_struct_char_dtype       internal static fixed bin(17,0)          initial dcl 15-110 in procedure "convert"
algol68_union_dtype                    internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
algol68_union_dtype                    internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
alloc_semantics                 000000 constant        entry                    external dcl 5-7
alloc_semantics$init_only       000000 constant        entry                    external dcl 5-12
allocation_fun                         internal static bit(9)                   initial dcl 18-8
allot_auto                             internal static bit(9)                   initial dcl 18-8
allot_based                            internal static bit(9)                   initial dcl 18-8
allot_ctl                              internal static bit(9)                   initial dcl 18-8
allot_var                              internal static bit(9)                   initial dcl 18-8
and                                    internal static bit(9)                   initial dcl 25-3
and_bits                               internal static bit(9)                   initial dcl 18-8
area_dtype                             internal static fixed bin(17,0)          initial dcl 15-25
area_mask                              internal static bit(36)                  initial dcl 16-3
arg_desc_type                          internal static bit(36)                  initial dcl 23-71 in procedure "convert"
arg_desc_type                          internal static bit(36)                  initial dcl 4-71 in procedure "pl1_descriptor_type"
arg_descriptor_mask                    internal static bit(36)                  initial dcl 16-3
arithmetic_mask                        internal static bit(36)                  initial dcl 16-41
array_node                             internal static bit(9)                   initial dcl 17-5
arrow                                  internal static bit(9)                   initial dcl 25-3
asin_fun                               internal static bit(9)                   initial dcl 18-8
asind_fun                              internal static bit(9)                   initial dcl 18-8
assign_by_name                         internal static bit(9)                   initial dcl 18-8
assign_round                           internal static bit(9)                   initial dcl 18-8
assign_round_                   000000 constant        entry                    external dcl 14-22
assign_size_ck                         internal static bit(9)                   initial dcl 18-8
assign_truncate_                000000 constant        entry                    external dcl 14-22
assign_zero                            internal static bit(9)                   initial dcl 18-8
assignment                             internal static bit(9)                   initial dcl 25-3
asterisk                               internal static bit(9)                   initial dcl 25-3
atan_fun                               internal static bit(9)                   initial dcl 18-8
atand_fun                              internal static bit(9)                   initial dcl 18-8
b_format                               internal static bit(9)                   initial dcl 18-8
baseno_fun                             internal static bit(9)                   initial dcl 18-8
baseptr_fun                            internal static bit(9)                   initial dcl 18-8
bin_integer                            internal static bit(9)                   initial dcl 25-3
binary_mask                            internal static bit(36)                  initial dcl 16-3
binary_to_octal_string          000000 constant        entry                    external dcl 6-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 6-43
bindec                          000000 constant        entry                    external dcl 6-23
bindec$vs                       000000 constant        entry                    external dcl 6-28
binoct                          000000 constant        entry                    external dcl 6-33
bit_mask                               internal static bit(36)                  initial dcl 16-3
bit_pointer                            internal static bit(9)                   initial dcl 18-8
bit_to_char                            internal static bit(9)                   initial dcl 18-8
bit_to_word                            internal static bit(9)                   initial dcl 18-8
bit_type                               internal static bit(36)                  initial dcl 4-71 in procedure "pl1_descriptor_type"
bit_type                               internal static bit(36)                  initial dcl 23-71 in procedure "convert"
bitno_fun                              internal static bit(9)                   initial dcl 18-8
bits_per_binary_exponent               internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
bits_per_binary_exponent               internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
bits_per_character                     internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
bits_per_character                     internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
bits_per_decimal_digit                 internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
bits_per_decimal_digit                 internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
bits_per_digit                         internal static fixed bin(31,1)          initial dcl 23-69 in procedure "convert"
bits_per_digit                         internal static fixed bin(31,1)          initial dcl 4-69 in procedure "pl1_descriptor_type"
bits_per_double                        internal static fixed bin(31,0)          initial dcl 4-5
bits_per_half                          internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
bits_per_half                          internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
bits_per_packed_ptr                    internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
bits_per_packed_ptr                    internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
bits_per_word                          internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
bits_per_word                          internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
block_node                             internal static bit(9)                   initial dcl 17-5
bn_format                              internal static bit(9)                   initial dcl 18-8
bool_fun                               internal static bit(9)                   initial dcl 18-8
bound_ck                               internal static bit(9)                   initial dcl 18-8
bound_node                             internal static bit(9)                   initial dcl 17-5
builtin                         000000 constant        entry                    external dcl 5-17
builtin_mask                           internal static bit(36)                  initial dcl 16-3
builtin_type                           internal static bit(36)                  initial dcl 23-71 in procedure "convert"
builtin_type                           internal static bit(36)                  initial dcl 4-71 in procedure "pl1_descriptor_type"
by_context                             internal static bit(3)                   initial dcl 13-5
by_declare                             internal static bit(3)                   initial dcl 13-5
by_explicit_context                    internal static bit(3)                   initial dcl 13-5
by_implication                         internal static bit(3)                   initial dcl 13-5
by_name_agg_node                       internal static bit(9)                   initial dcl 17-5
byte_fun                               internal static bit(9)                   initial dcl 18-8
c_enum_const_dtype                     internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
c_enum_const_dtype                     internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
c_enum_dtype                           internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
c_enum_dtype                           internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
c_format                               internal static bit(9)                   initial dcl 18-8
c_typeref_dtype                        internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
c_typeref_dtype                        internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
c_union_dtype                          internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
c_union_dtype                          internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
cat                                    internal static bit(9)                   initial dcl 25-3
cat_string                             internal static bit(9)                   initial dcl 18-8
ceil_fun                               internal static bit(9)                   initial dcl 18-8
char_to_word                           internal static bit(9)                   initial dcl 18-8
char_type                              internal static bit(36)                  initial dcl 23-71 in procedure "convert"
char_type                              internal static bit(36)                  initial dcl 4-71 in procedure "pl1_descriptor_type"
characters_per_double                  internal static fixed bin(31,0)          initial dcl 4-5
characters_per_half                    internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
characters_per_half                    internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
characters_per_word                    internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
characters_per_word                    internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
charno_fun                             internal static bit(9)                   initial dcl 18-8
check_star_extents              000000 constant        entry                    external dcl 5-27
clock_fun                              internal static bit(9)                   initial dcl 18-8
close_file                             internal static bit(9)                   initial dcl 18-8
cobol_char_string_dtype                internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
cobol_char_string_dtype                internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
cobol_comp_5_ts_dtype                  internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
cobol_comp_5_ts_dtype                  internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
cobol_comp_5_uns_dtype                 internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
cobol_comp_5_uns_dtype                 internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
cobol_comp_6_dtype                     internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
cobol_comp_6_dtype                     internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
cobol_comp_7_dtype                     internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
cobol_comp_7_dtype                     internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
cobol_comp_8_ls_dtype                  internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
cobol_comp_8_ls_dtype                  internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
cobol_comp_8_uns_dtype                 internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
cobol_comp_8_uns_dtype                 internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
cobol_display_ls_dtype                 internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
cobol_display_ls_dtype                 internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
cobol_display_ls_overp_dtype           internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
cobol_display_ls_overp_dtype           internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
cobol_display_ts_dtype                 internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
cobol_display_ts_dtype                 internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
cobol_display_ts_overp_dtype           internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
cobol_display_ts_overp_dtype           internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
cobol_display_uns_dtype                internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
cobol_display_uns_dtype                internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
cobol_structure_dtype                  internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
cobol_structure_dtype                  internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
codeptr_fun                            internal static bit(9)                   initial dcl 18-8
colon                                  internal static bit(9)                   initial dcl 25-3
column_format                          internal static bit(9)                   initial dcl 18-8
comma                                  internal static bit(9)                   initial dcl 25-3
compare_declaration             000000 constant        entry                    external dcl 5-31
compare_expression              000000 constant        entry                    external dcl 6-48
complex_fun                            internal static bit(9)                   initial dcl 18-8
complex_mask                           internal static bit(36)                  initial dcl 16-3
complex_type                           internal static bit(36)                  initial dcl 23-71 in procedure "convert"
complex_type                           internal static bit(36)                  initial dcl 4-71 in procedure "pl1_descriptor_type"
condition_mask                         internal static bit(36)                  initial dcl 16-3
conjg_fun                              internal static bit(9)                   initial dcl 18-8
constant_length                 000000 constant        entry                    external dcl 6-54
context_node                           internal static bit(9)                   initial dcl 17-5
context_processor               000000 constant        entry                    external dcl 5-38
convert                         000000 constant        entry                    external dcl 6-60
convert$from_builtin            000000 constant        entry                    external dcl 6-72
convert$to_target               000000 constant        entry                    external dcl 6-88
convert$to_target_fb            000000 constant        entry                    external dcl 6-82
convert$validate                000000 constant        entry                    external dcl 6-78
copy_expression$copy_sons       000000 constant        entry                    external dcl 6-99
copy_string                            internal static bit(9)                   initial dcl 18-8
copy_unique_expression          000000 constant        entry                    external dcl 6-103
copy_words                             internal static bit(9)                   initial dcl 18-8
cos_fun                                internal static bit(9)                   initial dcl 18-8
cosd_fun                               internal static bit(9)                   initial dcl 18-8
cplx_fix_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 15-25
cplx_fix_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 15-25
cplx_fix_dec_4bit_bytealigned_ls_dtype internal static fixed bin(17,0)          initial dcl 15-25
cplx_fix_dec_9bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 15-25
cplx_flt_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 15-25
cplx_flt_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 15-25
cplx_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
cplx_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
cplx_flt_dec_4bit_bytealigned_dtype    internal static fixed bin(17,0)          initial dcl 15-25
cplx_flt_dec_9bit_dtype                internal static fixed bin(17,0)          initial dcl 15-25
cplx_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
cplx_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
cplx_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
cplx_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
cplx_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
cplx_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
cplx_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
cplx_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
create_array                    000000 constant        entry                    external dcl 6-108
create_block                    000000 constant        entry                    external dcl 6-112
create_bound                    000000 constant        entry                    external dcl 6-118
create_context                  000000 constant        entry                    external dcl 6-122
create_cross_reference          000000 constant        entry                    external dcl 6-128
create_default                  000000 constant        entry                    external dcl 6-132
create_identifier               000000 constant        entry                    external dcl 6-136
create_label                    000000 constant        entry                    external dcl 6-140
create_list                     000000 constant        entry                    external dcl 6-147
create_reference                000000 constant        entry                    external dcl 6-158
create_statement                000000 constant        entry                    external dcl 6-163
create_statement$prologue       000000 constant        entry                    external dcl 6-171
create_storage                  000000 constant        entry                    external dcl 6-179
create_symbol                   000000 constant        entry                    external dcl 6-184
create_token$init_hash_table    000000 constant        entry                    external dcl 6-197
create_token$protected          000000 constant        entry                    external dcl 6-199
cross_reference_node                   internal static bit(9)                   initial dcl 17-5
dec_integer                            internal static bit(9)                   initial dcl 25-3
dec_integer_type                       internal static bit(36)                  initial dcl 4-71 in procedure "pl1_descriptor_type"
dec_integer_type                       internal static bit(36)                  initial dcl 23-71 in procedure "convert"
decbin                          000000 constant        entry                    external dcl 6-206
declare                         000000 constant        entry                    external dcl 5-41
declare_constant$bit            000000 constant        entry                    external dcl 6-219
declare_constant$char           000000 constant        entry                    external dcl 6-224
declare_constant$desc           000000 constant        entry                    external dcl 6-229
declare_constant_mask                  internal static bit(36)                  initial dcl 16-41
declare_descriptor              000000 constant        entry                    external dcl 6-239
declare_descriptor$ctl          000000 constant        entry                    external dcl 6-249
declare_descriptor$param        000000 constant        entry                    external dcl 6-259
declare_integer                 000000 constant        entry                    external dcl 6-269
declare_picture                 000000 constant        entry                    external dcl 6-274
declare_pointer                 000000 constant        entry                    external dcl 6-287
declare_structure               000000 constant        entry                    external dcl 5-44
decode_node_id                  000000 constant        entry                    external dcl 6-300
decode_source_id                000000 constant        entry                    external dcl 6-306
default_area_size                      internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
default_area_size                      internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
default_fix_bin_p                      internal static fixed bin(31,0)          initial dcl 4-5
default_fix_dec_p                      internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
default_fix_dec_p                      internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
default_flt_bin_p                      internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
default_flt_bin_p                      internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
default_flt_dec_p                      internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
default_flt_dec_p                      internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
default_node                           internal static bit(9)                   initial dcl 17-5
defined_reference               000000 constant        entry                    external dcl 5-47
delete_file                            internal static bit(9)                   initial dcl 18-8
desc_size                              internal static bit(9)                   initial dcl 18-8
digit_to_bit                           internal static bit(9)                   initial dcl 18-8
dimensioned_mask                       internal static bit(36)                  initial dcl 16-3
div                                    internal static bit(9)                   initial dcl 18-8
do_fun                                 internal static bit(9)                   initial dcl 18-8
do_semantics                    000000 constant        entry                    external dcl 5-57
do_spec                                internal static bit(9)                   initial dcl 18-8
e_format                               internal static bit(9)                   initial dcl 18-8
empty_area                             internal static bit(9)                   initial dcl 18-8
enable_on                              internal static bit(9)                   initial dcl 18-8
entry_dtype                            internal static fixed bin(17,0)          initial dcl 15-25
entry_mask                             internal static bit(36)                  initial dcl 16-3
entry_var_type                         internal static bit(36)                  initial dcl 4-71 in procedure "pl1_descriptor_type"
entry_var_type                         internal static bit(36)                  initial dcl 23-71 in procedure "convert"
environmentptr_fun                     internal static bit(9)                   initial dcl 18-8
eq                                     internal static bit(9)                   initial dcl 25-3
equal                                  internal static bit(9)                   initial dcl 18-8
error                           000000 constant        entry                    external dcl 6-314
error$omit_text                 000000 constant        entry                    external dcl 6-319
error_                          000000 constant        entry                    external dcl 6-324
error_$finish                   000000 constant        entry                    external dcl 6-343
error_$initialize_error         000000 constant        entry                    external dcl 6-341
error_$no_text                  000000 constant        entry                    external dcl 6-334
ex_prologue                            internal static bit(9)                   initial dcl 18-8
exp                                    internal static bit(9)                   initial dcl 18-8
exp_fun                                internal static bit(9)                   initial dcl 18-8
expand_assign                   000000 constant        entry                    external dcl 5-62
expand_by_name                  000000 constant        entry                    external dcl 5-71
expand_infix                    000000 constant        entry                    external dcl 5-76
expand_initial                  000000 constant        entry                    external dcl 5-84
expand_prefix                   000000 constant        entry                    external dcl 5-89
expand_primitive                000000 constant        entry                    external dcl 5-97
expon                                  internal static bit(9)                   initial dcl 25-3
ext_entry_runtime_dtype                internal static fixed bin(17,0)          initial dcl 15-125 in procedure "convert"
ext_entry_runtime_dtype                internal static fixed bin(17,0)          initial dcl 3-125 in procedure "pl1_descriptor_type"
ext_procedure_runtime_dtype            internal static fixed bin(17,0)          initial dcl 3-125 in procedure "pl1_descriptor_type"
ext_procedure_runtime_dtype            internal static fixed bin(17,0)          initial dcl 15-125 in procedure "convert"
f_format                               internal static bit(9)                   initial dcl 18-8
file_dtype                             internal static fixed bin(17,0)          initial dcl 15-25
file_mask                              internal static bit(36)                  initial dcl 16-3
fixed_bin                              internal static bit(9)                   initial dcl 25-3
fixed_binary_real_mask                 internal static bit(36)                  initial dcl 16-41
fixed_dec                              internal static bit(9)                   initial dcl 25-3
fixed_decimal_complex_mask             internal static bit(36)                  initial dcl 16-41
fixed_decimal_real_mask                internal static bit(36)                  initial dcl 16-41
float_bin                              internal static bit(9)                   initial dcl 25-3
float_dec                              internal static bit(9)                   initial dcl 25-3
float_decimal_complex_mask             internal static bit(36)                  initial dcl 16-41
float_decimal_real_mask                internal static bit(36)                  initial dcl 16-41
floor_fun                              internal static bit(9)                   initial dcl 18-8
format_mask                            internal static bit(36)                  initial dcl 16-3
format_value_node                      internal static bit(9)                   initial dcl 17-5
fortran_read                           internal static bit(9)                   initial dcl 18-8
fortran_write                          internal static bit(9)                   initial dcl 18-8
free_based                             internal static bit(9)                   initial dcl 18-8
free_ctl                               internal static bit(9)                   initial dcl 18-8
free_node                       000000 constant        entry                    external dcl 6-345
free_var                               internal static bit(9)                   initial dcl 18-8
ft_char_dtype                          internal static fixed bin(17,0)          initial dcl 15-96 in procedure "convert"
ft_char_dtype                          internal static fixed bin(17,0)          initial dcl 3-96 in procedure "pl1_descriptor_type"
ft_complex_double_dtype                internal static fixed bin(17,0)          initial dcl 15-96 in procedure "convert"
ft_complex_double_dtype                internal static fixed bin(17,0)          initial dcl 3-96 in procedure "pl1_descriptor_type"
ft_complex_dtype                       internal static fixed bin(17,0)          initial dcl 3-96 in procedure "pl1_descriptor_type"
ft_complex_dtype                       internal static fixed bin(17,0)          initial dcl 15-96 in procedure "convert"
ft_double_dtype                        internal static fixed bin(17,0)          initial dcl 15-96 in procedure "convert"
ft_double_dtype                        internal static fixed bin(17,0)          initial dcl 3-96 in procedure "pl1_descriptor_type"
ft_external_dtype                      internal static fixed bin(17,0)          initial dcl 3-96 in procedure "pl1_descriptor_type"
ft_external_dtype                      internal static fixed bin(17,0)          initial dcl 15-96 in procedure "convert"
ft_hex_complex_double_dtype            internal static fixed bin(17,0)          initial dcl 15-96 in procedure "convert"
ft_hex_complex_double_dtype            internal static fixed bin(17,0)          initial dcl 3-96 in procedure "pl1_descriptor_type"
ft_hex_complex_dtype                   internal static fixed bin(17,0)          initial dcl 15-96 in procedure "convert"
ft_hex_complex_dtype                   internal static fixed bin(17,0)          initial dcl 3-96 in procedure "pl1_descriptor_type"
ft_hex_double_dtype                    internal static fixed bin(17,0)          initial dcl 3-96 in procedure "pl1_descriptor_type"
ft_hex_double_dtype                    internal static fixed bin(17,0)          initial dcl 15-96 in procedure "convert"
ft_hex_real_dtype                      internal static fixed bin(17,0)          initial dcl 3-96 in procedure "pl1_descriptor_type"
ft_hex_real_dtype                      internal static fixed bin(17,0)          initial dcl 15-96 in procedure "convert"
ft_integer_dtype                       internal static fixed bin(17,0)          initial dcl 15-96 in procedure "convert"
ft_integer_dtype                       internal static fixed bin(17,0)          initial dcl 3-96 in procedure "pl1_descriptor_type"
ft_logical_dtype                       internal static fixed bin(17,0)          initial dcl 15-96 in procedure "convert"
ft_logical_dtype                       internal static fixed bin(17,0)          initial dcl 3-96 in procedure "pl1_descriptor_type"
ft_real_dtype                          internal static fixed bin(17,0)          initial dcl 3-96 in procedure "pl1_descriptor_type"
ft_real_dtype                          internal static fixed bin(17,0)          initial dcl 15-96 in procedure "convert"
ftn_file_manip                         internal static bit(9)                   initial dcl 18-8
ftn_trans_loop                         internal static bit(9)                   initial dcl 18-8
function                        000000 constant        entry                    external dcl 5-125
ge                                     internal static bit(9)                   initial dcl 25-3
generic_mask                           internal static bit(36)                  initial dcl 16-3
generic_selector                000000 constant        entry                    external dcl 5-134
get_array_size                  000000 constant        entry                    external dcl 6-348
get_data_trans                         internal static bit(9)                   initial dcl 18-8
get_edit_trans                         internal static bit(9)                   initial dcl 18-8
get_file                               internal static bit(9)                   initial dcl 18-8
get_list_trans                         internal static bit(9)                   initial dcl 18-8
get_size                        000000 constant        entry                    external dcl 6-352
get_string                             internal static bit(9)                   initial dcl 18-8
greater_or_equal                       internal static bit(9)                   initial dcl 18-8
greater_than                           internal static bit(9)                   initial dcl 18-8
gt                                     internal static bit(9)                   initial dcl 25-3
half_to_word                           internal static bit(9)                   initial dcl 18-8
i_bin_integer                          internal static bit(9)                   initial dcl 25-3
i_dec_integer                          internal static bit(9)                   initial dcl 25-3
i_fixed_bin                            internal static bit(9)                   initial dcl 25-3
i_fixed_dec                            internal static bit(9)                   initial dcl 25-3
i_float_bin                            internal static bit(9)                   initial dcl 25-3
i_float_dec                            internal static bit(9)                   initial dcl 25-3
identifier                             internal static bit(9)                   initial dcl 25-3
imag_fun                               internal static bit(9)                   initial dcl 18-8
index_after_fun                        internal static bit(9)                   initial dcl 18-8
index_before_fun                       internal static bit(9)                   initial dcl 18-8
index_fun                              internal static bit(9)                   initial dcl 18-8
index_rev_fun                          internal static bit(9)                   initial dcl 18-8
initialed_mask                         internal static bit(36)                  initial dcl 16-3
int_entry_runtime_dtype                internal static fixed bin(17,0)          initial dcl 3-125 in procedure "pl1_descriptor_type"
int_entry_runtime_dtype                internal static fixed bin(17,0)          initial dcl 15-125 in procedure "convert"
integer_type                           internal static bit(36)                  initial dcl 4-71
io_data_list_semantics          000000 constant        entry                    external dcl 5-143
io_data_list_semantics$format_list_semantics
                                000000 constant        entry                    external dcl 5-120
io_semantics                    000000 constant        entry                    external dcl 5-148
irreducible_mask                       internal static bit(36)                  initial dcl 16-3
is_decimal_constant                    internal static bit(9)                   initial dcl 25-47
is_delimiter                           internal static bit(9)                   initial dcl 25-47
is_float_constant                      internal static bit(9)                   initial dcl 25-47
is_identifier                          internal static bit(9)                   initial dcl 25-47
is_imaginary_constant                  internal static bit(9)                   initial dcl 25-47
is_integral_constant                   internal static bit(9)                   initial dcl 25-47
is_isub                                internal static bit(9)                   initial dcl 25-47
isub                                   internal static bit(9)                   initial dcl 25-3
join                                   internal static bit(9)                   initial dcl 18-8
jump                                   internal static bit(9)                   initial dcl 18-8
jump_false                             internal static bit(9)                   initial dcl 18-8
jump_if_eq                             internal static bit(9)                   initial dcl 18-8
jump_if_ge                             internal static bit(9)                   initial dcl 18-8
jump_if_gt                             internal static bit(9)                   initial dcl 18-8
jump_if_le                             internal static bit(9)                   initial dcl 18-8
jump_if_lt                             internal static bit(9)                   initial dcl 18-8
jump_if_ne                             internal static bit(9)                   initial dcl 18-8
jump_true                              internal static bit(9)                   initial dcl 18-8
l_parn                                 internal static bit(9)                   initial dcl 18-8
label_array_element_node               internal static bit(9)                   initial dcl 17-5
label_constant_runtime_dtype           internal static fixed bin(17,0)          initial dcl 15-125 in procedure "convert"
label_constant_runtime_dtype           internal static fixed bin(17,0)          initial dcl 3-125 in procedure "pl1_descriptor_type"
le                                     internal static bit(9)                   initial dcl 25-3
left_parn                              internal static bit(9)                   initial dcl 25-3
less_or_equal                          internal static bit(9)                   initial dcl 18-8
less_than                              internal static bit(9)                   initial dcl 18-8
line_format                            internal static bit(9)                   initial dcl 18-8
list_node                              internal static bit(9)                   initial dcl 17-5
local_label_var_type                   internal static bit(36)                  initial dcl 23-71 in procedure "convert"
local_label_var_type                   internal static bit(36)                  initial dcl 4-71 in procedure "pl1_descriptor_type"
local_mask                             internal static bit(36)                  initial dcl 16-3
locate_file                            internal static bit(9)                   initial dcl 18-8
lock_file                              internal static bit(9)                   initial dcl 18-8
lock_fun                               internal static bit(9)                   initial dcl 18-8
lock_mask                              internal static bit(36)                  initial dcl 16-3
log10_fun                              internal static bit(9)                   initial dcl 18-8
log2_fun                               internal static bit(9)                   initial dcl 18-8
log_fun                                internal static bit(9)                   initial dcl 18-8
lookup                          000000 constant        entry                    external dcl 5-153
loop                                   internal static bit(9)                   initial dcl 18-8
lt                                     internal static bit(9)                   initial dcl 25-3
machine_state_node                     internal static bit(9)                   initial dcl 17-5
make_desc                              internal static bit(9)                   initial dcl 18-8
make_non_quick                  000000 constant        entry                    external dcl 5-162
match_arguments                 000000 constant        entry                    external dcl 5-166
max_area_size                          internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
max_area_size                          internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
max_bit_string                         internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
max_bit_string                         internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
max_bit_string_constant                internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
max_bit_string_constant                internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
max_char_string                        internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
max_char_string                        internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
max_char_string_constant               internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
max_char_string_constant               internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
max_fun                                internal static bit(9)                   initial dcl 18-8
max_identifier_length                  internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
max_identifier_length                  internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
max_index_register_value               internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
max_index_register_value               internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
max_length_precision                   internal static fixed bin(31,0)          initial dcl 4-5
max_number_of_dimensions               internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
max_number_of_dimensions               internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 19-15
max_offset_precision                   internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
max_offset_precision                   internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
max_p_bin_or_dec                       internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
max_p_bin_or_dec                       internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
max_p_dec                              internal static fixed bin(31,0)          initial dcl 4-5
max_p_fix_bin_2                        internal static fixed bin(31,0)          initial dcl 4-5
max_p_flt_bin_1                        internal static fixed bin(31,0)          initial dcl 23-5
max_p_flt_bin_2                        internal static fixed bin(31,0)          initial dcl 4-5
max_scale                              internal static fixed bin(31,0)          initial dcl 4-5
max_signed_index_register_value        internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
max_signed_index_register_value        internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
max_signed_xreg_precision              internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
max_signed_xreg_precision              internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
max_uns_xreg_precision                 internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
max_uns_xreg_precision                 internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
max_words_per_variable                 internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
max_words_per_variable                 internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
merge_attributes                000000 constant        entry                    external dcl 6-355
min_area_size                          internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
min_area_size                          internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
min_scale                              internal static fixed bin(31,0)          initial dcl 4-5
minus                                  internal static bit(9)                   initial dcl 25-3
mod_bit                                internal static bit(9)                   initial dcl 18-8
mod_byte                               internal static bit(9)                   initial dcl 18-8
mod_fun                                internal static bit(9)                   initial dcl 18-8
mod_half                               internal static bit(9)                   initial dcl 18-8
mod_word                               internal static bit(9)                   initial dcl 18-8
mult                                   internal static bit(9)                   initial dcl 18-8
ne                                     internal static bit(9)                   initial dcl 25-3
negate                                 internal static bit(9)                   initial dcl 18-8
ngt                                    internal static bit(9)                   initial dcl 25-3
nlt                                    internal static bit(9)                   initial dcl 25-3
no_token                               internal static bit(9)                   initial dcl 25-3
nop                                    internal static bit(9)                   initial dcl 18-8
not                                    internal static bit(9)                   initial dcl 25-3
not_bits                               internal static bit(9)                   initial dcl 18-8
not_equal                              internal static bit(9)                   initial dcl 18-8
off_fun                                internal static bit(9)                   initial dcl 18-8
offset_adder                    000000 constant        entry                    external dcl 5-172
offset_dtype                           internal static fixed bin(17,0)          initial dcl 15-25
offset_mask                            internal static bit(36)                  initial dcl 16-3
open_file                              internal static bit(9)                   initial dcl 18-8
operator_semantics              000000 constant        entry                    external dcl 5-184
optimizer                       000000 constant        entry                    external dcl 6-361
or                                     internal static bit(9)                   initial dcl 25-3
or_bits                                internal static bit(9)                   initial dcl 18-8
packed_digits_per_character            internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
packed_digits_per_character            internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
page_format                            internal static bit(9)                   initial dcl 18-8
param_desc_ptr                         internal static bit(9)                   initial dcl 18-8
param_ptr                              internal static bit(9)                   initial dcl 18-8
parse_error                     000000 constant        entry                    external dcl 6-364
parse_error$no_text             000000 constant        entry                    external dcl 6-368
pascal_boolean_dtype                   internal static fixed bin(17,0)          initial dcl 15-132 in procedure "convert"
pascal_boolean_dtype                   internal static fixed bin(17,0)          initial dcl 3-132 in procedure "pl1_descriptor_type"
pascal_char_dtype                      internal static fixed bin(17,0)          initial dcl 3-132 in procedure "pl1_descriptor_type"
pascal_char_dtype                      internal static fixed bin(17,0)          initial dcl 15-132 in procedure "convert"
pascal_entry_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 15-132 in procedure "convert"
pascal_entry_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 3-132 in procedure "pl1_descriptor_type"
pascal_enumerated_type_dtype           internal static fixed bin(17,0)          initial dcl 3-132 in procedure "pl1_descriptor_type"
pascal_enumerated_type_dtype           internal static fixed bin(17,0)          initial dcl 15-132 in procedure "convert"
pascal_enumerated_type_element_dtype   internal static fixed bin(17,0)          initial dcl 3-132 in procedure "pl1_descriptor_type"
pascal_enumerated_type_element_dtype   internal static fixed bin(17,0)          initial dcl 15-132 in procedure "convert"
pascal_enumerated_type_instance_dtype  internal static fixed bin(17,0)          initial dcl 15-132 in procedure "convert"
pascal_enumerated_type_instance_dtype  internal static fixed bin(17,0)          initial dcl 3-132 in procedure "pl1_descriptor_type"
pascal_exportable_procedure_dtype      internal static fixed bin(17,0)          initial dcl 3-132 in procedure "pl1_descriptor_type"
pascal_exportable_procedure_dtype      internal static fixed bin(17,0)          initial dcl 15-132 in procedure "convert"
pascal_imported_procedure_dtype        internal static fixed bin(17,0)          initial dcl 15-132 in procedure "convert"
pascal_imported_procedure_dtype        internal static fixed bin(17,0)          initial dcl 3-132 in procedure "pl1_descriptor_type"
pascal_integer_dtype                   internal static fixed bin(17,0)          initial dcl 15-132 in procedure "convert"
pascal_integer_dtype                   internal static fixed bin(17,0)          initial dcl 3-132 in procedure "pl1_descriptor_type"
pascal_internal_procedure_dtype        internal static fixed bin(17,0)          initial dcl 15-132 in procedure "convert"
pascal_internal_procedure_dtype        internal static fixed bin(17,0)          initial dcl 3-132 in procedure "pl1_descriptor_type"
pascal_label_dtype                     internal static fixed bin(17,0)          initial dcl 3-132 in procedure "pl1_descriptor_type"
pascal_label_dtype                     internal static fixed bin(17,0)          initial dcl 15-132 in procedure "convert"
pascal_parameter_procedure_dtype       internal static fixed bin(17,0)          initial dcl 3-132 in procedure "pl1_descriptor_type"
pascal_parameter_procedure_dtype       internal static fixed bin(17,0)          initial dcl 15-132 in procedure "convert"
pascal_procedure_type_dtype            internal static fixed bin(17,0)          initial dcl 15-132 in procedure "convert"
pascal_procedure_type_dtype            internal static fixed bin(17,0)          initial dcl 3-132 in procedure "pl1_descriptor_type"
pascal_real_dtype                      internal static fixed bin(17,0)          initial dcl 15-132 in procedure "convert"
pascal_real_dtype                      internal static fixed bin(17,0)          initial dcl 3-132 in procedure "pl1_descriptor_type"
pascal_record_file_type_dtype          internal static fixed bin(17,0)          initial dcl 15-132 in procedure "convert"
pascal_record_file_type_dtype          internal static fixed bin(17,0)          initial dcl 3-132 in procedure "pl1_descriptor_type"
pascal_record_type_dtype               internal static fixed bin(17,0)          initial dcl 15-132 in procedure "convert"
pascal_record_type_dtype               internal static fixed bin(17,0)          initial dcl 3-132 in procedure "pl1_descriptor_type"
pascal_set_dtype                       internal static fixed bin(17,0)          initial dcl 3-132 in procedure "pl1_descriptor_type"
pascal_set_dtype                       internal static fixed bin(17,0)          initial dcl 15-132 in procedure "convert"
pascal_string_type_dtype               internal static fixed bin(17,0)          initial dcl 15-132 in procedure "convert"
pascal_string_type_dtype               internal static fixed bin(17,0)          initial dcl 3-132 in procedure "pl1_descriptor_type"
pascal_text_file_dtype                 internal static fixed bin(17,0)          initial dcl 15-132 in procedure "convert"
pascal_text_file_dtype                 internal static fixed bin(17,0)          initial dcl 3-132 in procedure "pl1_descriptor_type"
pascal_typed_pointer_type_dtype        internal static fixed bin(17,0)          initial dcl 3-132 in procedure "pl1_descriptor_type"
pascal_typed_pointer_type_dtype        internal static fixed bin(17,0)          initial dcl 15-132 in procedure "convert"
pascal_user_defined_type_dtype         internal static fixed bin(17,0)          initial dcl 3-132 in procedure "pl1_descriptor_type"
pascal_user_defined_type_dtype         internal static fixed bin(17,0)          initial dcl 15-132 in procedure "convert"
pascal_user_defined_type_instance_dtype
                                       internal static fixed bin(17,0)          initial dcl 3-132 in procedure "pl1_descriptor_type"
pascal_user_defined_type_instance_dtype
                                       internal static fixed bin(17,0)          initial dcl 15-132 in procedure "convert"
pascal_value_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 3-132 in procedure "pl1_descriptor_type"
pascal_value_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 15-132 in procedure "convert"
pascal_variable_formal_parameter_dtype internal static fixed bin(17,0)          initial dcl 15-132 in procedure "convert"
pascal_variable_formal_parameter_dtype internal static fixed bin(17,0)          initial dcl 3-132 in procedure "pl1_descriptor_type"
percent                                internal static bit(9)                   initial dcl 25-3
period                                 internal static bit(9)                   initial dcl 25-3
picture_char_type                      internal static fixed bin(8,0)           initial packed unaligned dcl 12-20
picture_complexfix_type                internal static fixed bin(8,0)           initial packed unaligned dcl 12-20
picture_complexflo_type                internal static fixed bin(8,0)           initial packed unaligned dcl 12-20
picture_format                         internal static bit(9)                   initial dcl 18-8
picture_realfix_type                   internal static fixed bin(8,0)           initial packed unaligned dcl 12-20
picture_realflo_type                   internal static fixed bin(8,0)           initial packed unaligned dcl 12-20
picture_runtime_dtype                  internal static fixed bin(17,0)          initial dcl 15-125 in procedure "convert"
picture_runtime_dtype                  internal static fixed bin(17,0)          initial dcl 3-125 in procedure "pl1_descriptor_type"
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 6-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 6-372
pl1_mod_fun                            internal static bit(9)                   initial dcl 18-8
pl1_print$for_lex               000000 constant        entry                    external dcl 6-418
pl1_print$non_varying           000000 constant        entry                    external dcl 6-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 6-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 6-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 6-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 6-414
pl1_print$varying               000000 constant        entry                    external dcl 6-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 6-395
plus                                   internal static bit(9)                   initial dcl 25-3
pointer_dtype                          internal static fixed bin(17,0)          initial dcl 15-25
pointer_type                           internal static bit(36)                  initial dcl 4-71 in procedure "pl1_descriptor_type"
pointer_type                           internal static bit(36)                  initial dcl 23-71 in procedure "convert"
precision_mask                         internal static bit(36)                  initial dcl 16-3
prefix_plus                            internal static bit(9)                   initial dcl 18-8
propagate_bit                   000000 constant        entry                    external dcl 5-192
ptr_fun                                internal static bit(9)                   initial dcl 18-8
ptr_mask                               internal static bit(36)                  initial dcl 16-3
put_control                            internal static bit(9)                   initial dcl 18-8
put_data_trans                         internal static bit(9)                   initial dcl 18-8
put_edit_trans                         internal static bit(9)                   initial dcl 18-8
put_field                              internal static bit(9)                   initial dcl 18-8
put_field_chk                          internal static bit(9)                   initial dcl 18-8
put_file                               internal static bit(9)                   initial dcl 18-8
put_list_trans                         internal static bit(9)                   initial dcl 18-8
put_string                             internal static bit(9)                   initial dcl 18-8
r_format                               internal static bit(9)                   initial dcl 18-8
r_parn                                 internal static bit(9)                   initial dcl 18-8
range_ck                               internal static bit(9)                   initial dcl 18-8
rank_fun                               internal static bit(9)                   initial dcl 18-8
read_file                              internal static bit(9)                   initial dcl 18-8
real_fix_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 15-25
real_fix_bin_1_uns_dtype               internal static fixed bin(17,0)          initial dcl 15-25
real_fix_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 15-25
real_fix_bin_2_uns_dtype               internal static fixed bin(17,0)          initial dcl 15-25
real_fix_dec_4bit_bytealigned_ls_dtype internal static fixed bin(17,0)          initial dcl 15-25
real_fix_dec_4bit_bytealigned_uns_dtype
                                       internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
real_fix_dec_4bit_bytealigned_uns_dtype
                                       internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
real_fix_dec_4bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
real_fix_dec_4bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
real_fix_dec_4bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
real_fix_dec_4bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
real_fix_dec_4bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
real_fix_dec_4bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
real_fix_dec_9bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 15-25
real_fix_dec_9bit_ls_overp_dtype       internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
real_fix_dec_9bit_ls_overp_dtype       internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
real_fix_dec_9bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
real_fix_dec_9bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
real_fix_dec_9bit_ts_overp_dtype       internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
real_fix_dec_9bit_ts_overp_dtype       internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
real_fix_dec_9bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
real_fix_dec_9bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
real_flt_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 15-25
real_flt_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 15-25
real_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
real_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
real_flt_dec_4bit_bytealigned_dtype    internal static fixed bin(17,0)          initial dcl 15-25
real_flt_dec_4bit_dtype                internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
real_flt_dec_4bit_dtype                internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
real_flt_dec_9bit_dtype                internal static fixed bin(17,0)          initial dcl 15-25
real_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
real_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
real_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
real_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
real_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
real_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
real_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 15-25 in procedure "convert"
real_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 3-25 in procedure "pl1_descriptor_type"
real_fun                               internal static bit(9)                   initial dcl 18-8
real_type                              internal static bit(36)                  initial dcl 4-71 in procedure "pl1_descriptor_type"
real_type                              internal static bit(36)                  initial dcl 23-71 in procedure "convert"
record_io                              internal static bit(9)                   initial dcl 18-8
reducible_mask                         internal static bit(36)                  initial dcl 16-3
refer                                  internal static bit(9)                   initial dcl 18-8
refer_extent                    000000 constant        entry                    external dcl 6-426
rel_fun                                internal static bit(9)                   initial dcl 18-8
repeat_fun                             internal static bit(9)                   initial dcl 18-8
reserve$clear                   000000 constant        entry                    external dcl 6-430
reserve$declare_lib             000000 constant        entry                    external dcl 6-434
reserve$read_lib                000000 constant        entry                    external dcl 6-439
return_bits                            internal static bit(9)                   initial dcl 18-8
return_string                          internal static bit(9)                   initial dcl 18-8
return_value                           internal static bit(9)                   initial dcl 18-8
return_words                           internal static bit(9)                   initial dcl 18-8
returns_mask                           internal static bit(36)                  initial dcl 16-3
reverse_fun                            internal static bit(9)                   initial dcl 18-8
revert_on                              internal static bit(9)                   initial dcl 18-8
rewrite_file                           internal static bit(9)                   initial dcl 18-8
right_parn                             internal static bit(9)                   initial dcl 25-3
round_fun                              internal static bit(9)                   initial dcl 18-8
search_fun                             internal static bit(9)                   initial dcl 18-8
search_rev_fun                         internal static bit(9)                   initial dcl 18-8
segno_fun                              internal static bit(9)                   initial dcl 18-8
semantic_translator             000000 constant        entry                    external dcl 6-444
semantic_translator$abort       000000 constant        entry                    external dcl 6-446
semantic_translator$call_es     000000 constant        entry                    external dcl 5-196
semantic_translator$error       000000 constant        entry                    external dcl 6-450
semi_colon                             internal static bit(9)                   initial dcl 25-3
setbitno_fun                           internal static bit(9)                   initial dcl 18-8
setcharno_fun                          internal static bit(9)                   initial dcl 18-8
sf_par_node                            internal static bit(9)                   initial dcl 17-5
sign_fun                               internal static bit(9)                   initial dcl 18-8
signal_on                              internal static bit(9)                   initial dcl 18-8
signed_mask                            internal static bit(36)                  initial dcl 16-3
simplify_expression             000000 constant        entry                    external dcl 5-205
simplify_offset                 000000 constant        entry                    external dcl 5-212
sin_fun                                internal static bit(9)                   initial dcl 18-8
sind_fun                               internal static bit(9)                   initial dcl 18-8
skip_format                            internal static bit(9)                   initial dcl 18-8
slash                                  internal static bit(9)                   initial dcl 25-3
source_node                            internal static bit(9)                   initial dcl 17-5
sqrt_fun                               internal static bit(9)                   initial dcl 18-8
stack_ptr                              internal static bit(9)                   initial dcl 18-8
stackbaseptr_fun                       internal static bit(9)                   initial dcl 18-8
stackframeptr_fun                      internal static bit(9)                   initial dcl 18-8
stacq_fun                              internal static bit(9)                   initial dcl 18-8
statement_node                         internal static bit(9)                   initial dcl 17-5
std_arg_list                           internal static bit(9)                   initial dcl 18-8
std_entry                              internal static bit(9)                   initial dcl 18-8
std_return                             internal static bit(9)                   initial dcl 18-8
stop                                   internal static bit(9)                   initial dcl 18-8
storage_block_mask                     internal static bit(36)                  initial dcl 16-3
storage_block_type                     internal static bit(36)                  initial dcl 4-71 in procedure "pl1_descriptor_type"
storage_block_type                     internal static bit(36)                  initial dcl 23-71 in procedure "convert"
stream_prep                            internal static bit(9)                   initial dcl 18-8
string_mask                            internal static bit(36)                  initial dcl 16-41
structure_dtype                        internal static fixed bin(17,0)          initial dcl 15-25
structure_mask                         internal static bit(36)                  initial dcl 16-3
sub                                    internal static bit(9)                   initial dcl 18-8
subscripter                     000000 constant        entry                    external dcl 5-216
symbol_node                            internal static bit(9)                   initial dcl 17-5
tan_fun                                internal static bit(9)                   initial dcl 18-8
tand_fun                               internal static bit(9)                   initial dcl 18-8
temporary_node                         internal static bit(9)                   initial dcl 17-5
terminate_trans                        internal static bit(9)                   initial dcl 18-8
token_to_binary                 000000 constant        entry                    external dcl 6-459
translate_fun                          internal static bit(9)                   initial dcl 18-8
trunc_fun                              internal static bit(9)                   initial dcl 18-8
unlock_file                            internal static bit(9)                   initial dcl 18-8
unsigned_mask                          internal static bit(36)                  initial dcl 16-3
validate                        000000 constant        entry                    external dcl 5-225
variable_mask                          internal static bit(36)                  initial dcl 16-3
varying_bit_dtype                      internal static fixed bin(17,0)          initial dcl 15-25
varying_char_dtype                     internal static fixed bin(17,0)          initial dcl 15-25
varying_mask                           internal static bit(36)                  initial dcl 16-3
vclock_fun                             internal static bit(9)                   initial dcl 18-8
verify_fun                             internal static bit(9)                   initial dcl 18-8
verify_ltrim_fun                       internal static bit(9)                   initial dcl 18-8
verify_rev_fun                         internal static bit(9)                   initial dcl 18-8
verify_rtrim_fun                       internal static bit(9)                   initial dcl 18-8
word_to_mod2                           internal static bit(9)                   initial dcl 18-8
word_to_mod4                           internal static bit(9)                   initial dcl 18-8
word_to_mod8                           internal static bit(9)                   initial dcl 18-8
wordno_fun                             internal static bit(9)                   initial dcl 18-8
words_per_condition_var                internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
words_per_condition_var                internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
words_per_entry_var                    internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
words_per_entry_var                    internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
words_per_file_var                     internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
words_per_file_var                     internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
words_per_fix_bin_1                    internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
words_per_fix_bin_1                    internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
words_per_fix_bin_2                    internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
words_per_fix_bin_2                    internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
words_per_flt_bin_1                    internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
words_per_flt_bin_1                    internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
words_per_flt_bin_2                    internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
words_per_flt_bin_2                    internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
words_per_format                       internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
words_per_format                       internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
words_per_label_var                    internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
words_per_label_var                    internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
words_per_offset                       internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
words_per_offset                       internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
words_per_packed_pointer               internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
words_per_packed_pointer               internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
words_per_pointer                      internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
words_per_pointer                      internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
words_per_varying_string_header        internal static fixed bin(31,0)          initial dcl 4-5 in procedure "pl1_descriptor_type"
words_per_varying_string_header        internal static fixed bin(31,0)          initial dcl 23-5 in procedure "convert"
write_file                             internal static bit(9)                   initial dcl 18-8
x_format                               internal static bit(9)                   initial dcl 18-8
xor_bits                               internal static bit(9)                   initial dcl 18-8

NAMES DECLARED BY EXPLICIT CONTEXT.
action                          000000 constant        label                    array(0:22) dcl 746 ref 744
assign_it                       003346 constant        label                    dcl 577 ref 236 351 370 392 559 569
common                          001155 constant        label                    dcl 222 ref 122 162 192
convert                         000613 constant        entry                    external dcl 18
exit                            005215 constant        label                    dcl 868 ref 746 754 758 763 767 776 780 784 795 799
                                                                                  806 810 814 819 823 827 832 836 840 844 856 861
from_builtin                    000645 constant        entry                    external dcl 111
get_target_size                 004357 constant        entry                    internal dcl 702 ref 383 432 434 459 507
meet                            000744 constant        label                    dcl 144 ref 128 134
meet2                           001536 constant        label                    dcl 311 ref 251
pl1_descriptor_type             005216 constant        entry                    internal dcl 1-8 ref 222 307 446
print                           004264 constant        entry                    internal dcl 673 ref 154 155 226 234 241 243 322 404
                                                                                  407 408 409 454 481 502 541 545 750 792
print_                          004325 constant        label                    dcl 692 ref 680 682 686
ret                             003734 constant        label                    dcl 613 ref 356 373 380 573
start                           000655 constant        label                    dcl 114 ref 103
to_integer                      000627 constant        entry                    external dcl 105
to_target                       000732 constant        entry                    external dcl 136
to_target_fb                    000714 constant        entry                    external dcl 130
token_input                     002134 constant        label                    dcl 400 ref 228
validate                        000675 constant        entry                    external dcl 124

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      6012        6204    5516        6022
Length      7110    5516       172         670     273         122

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
convert                             562 external procedure  is an external procedure.  
on unit on line 407                  72 on unit               
on unit on line 408                  72 on unit               
on unit on line 409                  72 on unit               
print                                76 internal procedure  is called by several nonquick procedures.  
get_target_size                         internal procedure  shares stack frame of external procedure convert.  
pl1_descriptor_type                     internal procedure  shares stack frame of external procedure convert.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 message                     convert

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
convert                  000100 p                           convert
                         000102 r                           convert
                         000104 target                      convert
                         000106 input                       convert
                         000110 output                      convert
                         000112 inlength                    convert
                         000114 tlength                     convert
                         000116 return_tree                 convert
                         000120 pointer1                    convert
                         000220 pointer2                    convert
                         000320 m                           convert
                         000321 n                           convert
                         000322 svprec                      convert
                         000323 alignment_ok                convert
                         000324 known                       convert
                         000325 sign_type_ok                convert
                         000326 validate_bit                convert
                         000327 long_bit                    convert
                         000330 target_must_be_integer      convert
                         000331 keep_full_precision         convert
                         000332 suppress_bit                convert
                         000333 varying_input               convert
                         000334 varying_result              convert
                         000335 itype                       convert
                         000336 otype                       convert
                         000337 inpicture                   convert
                         000340 tpicture                    convert
                         000406 intype                      convert
                         000407 outtype                     convert
                         000410 inscale_prec                convert
                         000411 outscale_prec               convert
                         000412 type                        convert
                         000422 oprec                       get_target_size
                         000423 oscale                      get_target_size
                         000432 prec                        pl1_descriptor_type
                         000433 dtype                       pl1_descriptor_type
                         000434 type                        pl1_descriptor_type
print                    000100 symbol                      print

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
fx1_to_fl2          r_e_as              alloc_bit_temp      call_ent_var        call_ext_out_desc   call_ext_out
call_int_this       call_int_other      return_mac          fl2_to_fx1          sign_mac            signal_op
enable_op           shorten_stack       ext_entry           int_entry           ceil_fl             any_to_any_truncate_
log_base_10_

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
assign_                       char_to_numeric_              convert$to_integer            copy_expression
create_operator               create_token                  declare_constant              declare_constant$integer
declare_picture_temp          declare_temporary             expression_semantics          fill_refer
share_expression

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pl1_stat_$cur_statement       pl1_stat_$util_abort          pl1_stat_$util_error




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     31 000576        18 000607       102 000623       103 000624       105 000625       108 000637       109 000641
    111 000642       114 000655       116 000656       117 000657       118 000660       119 000662       120 000666
    121 000667       122 000670       124 000671       126 000704       127 000705       128 000707       130 000710
    132 000724       133 000725       134 000727       136 000730       138 000742       144 000744       149 000746
    150 000747       152 000751       153 000752       154 000753       155 000767       157 001005       159 001012
    161 001016       162 001020       165 001021       167 001031       168 001033       170 001035       172 001040
    173 001041       175 001043       177 001044       180 001047       181 001051       182 001053       183 001057
    185 001060       188 001063       189 001065       190 001067       191 001071       192 001073       195 001074
    197 001077       199 001101       201 001103       204 001114       206 001126       208 001133       211 001140
    213 001143       214 001145       215 001152       216 001153       222 001155       224 001173       225 001175
    226 001176       228 001212       230 001220       232 001227       234 001231       236 001245       241 001264
    243 001274       247 001310       248 001313       250 001317       251 001321       254 001322       256 001325
    257 001327       260 001333       263 001341       264 001343       265 001344       266 001361       267 001363
    268 001410       269 001414       271 001415       272 001420       275 001422       277 001426       278 001430
    279 001432       280 001434       281 001436       282 001437       284 001441       286 001444       288 001446
    291 001457       293 001471       295 001476       298 001503       300 001506       301 001510       302 001515
    303 001516       307 001520       311 001536       315 001553       316 001572       318 001613       320 001616
    322 001626       327 001642       332 001652       334 001655       335 001657       336 001660       338 001661
    339 001722       341 001734       343 001736       344 001743       347 001747       351 001755       355 002023
    356 002027       360 002030       362 002041       364 002045       367 002056       368 002066       370 002070
    373 002071       376 002072       379 002077       380 002103       383 002104       385 002105       388 002115
    389 002131       392 002133       400 002134       404 002153       407 002172       408 002237       409 002265
    411 002313       415 002320       417 002330       418 002332       419 002336       421 002364       423 002365
    428 002372       429 002417       432 002422       434 002426       437 002440       442 002452       443 002470
    446 002472       450 002510       452 002513       454 002523       456 002533       458 002540       459 002541
    460 002542       463 002544       465 002601       466 002605       467 002606       471 002610       472 002613
    473 002616       475 002625       476 002626       477 002630       479 002632       481 002637       482 002647
    484 002650       487 002652       489 002661       490 002662       491 002665       493 002667       495 002675
    496 002676       500 002701       502 002711       504 002721       506 002726       507 002727       508 002730
    511 002732       513 002767       514 002773       516 002774       519 002776       520 003001       521 003004
    523 003013       524 003014       525 003016       527 003020       528 003040       530 003042       533 003044
    535 003053       536 003054       537 003057       539 003061       541 003106       543 003117       545 003120
    548 003140       552 003204       557 003212       558 003251       559 003255       562 003256       566 003271
    569 003337       573 003345       577 003346       581 003362       582 003377       584 003430       586 003463
    587 003467       589 003471       591 003473       593 003507       595 003516       597 003521       598 003536
    599 003563       600 003600       601 003631       602 003651       604 003706       606 003724       607 003727
    611 003732       613 003734       617 003752       620 003756       624 004001       630 004031       634 004041
    635 004056       636 004114       638 004116       641 004127       642 004132       643 004133       645 004134
    646 004136       647 004137       649 004140       650 004142       654 004143       656 004145       657 004162
    658 004167       663 004244       664 004246       666 004250       669 004251       673 004263       678 004271
    680 004273       682 004300       686 004310       689 004321       690 004323       692 004325       695 004341
    698 004356       702 004357       744 004360       746 004367       750 004371       752 004401       754 004410
    756 004411       758 004424       760 004425       762 004441       763 004451       765 004452       767 004470
    769 004471       771 004506       772 004526       774 004556       775 004561       776 004573       778 004574
    780 004607       782 004610       784 004612       786 004613       788 004630       789 004640       792 004670
    793 004700       794 004702       795 004705       797 004706       799 004730       801 004731       803 004736
    805 004773       806 005005       808 005006       810 005021       812 005022       814 005031       816 005032
    818 005046       819 005054       821 005055       823 005070       825 005071       827 005104       829 005105
    831 005112       832 005120       834 005121       836 005123       838 005124       840 005126       842 005127
    844 005131       846 005132       848 005134       850 005136       852 005140       853 005142       854 005157
    855 005160       856 005171       858 005172       860 005206       861 005210       863 005211       866 005213
    868 005215    1    8 005216    1   33 005220    1   34 005224    1   36 005226    1   38 005234    1   46 005255
 1   47 005260    1   49 005265    1   50 005270    1   52 005276    1   53 005301    1   56 005311    1   57 005314
 1   59 005322    1   60 005325    1   67 005343    1   68 005346    1   70 005354    1   71 005357    1   74 005367
 1   75 005372    1   77 005400    1   78 005403    1   83 005414    1   84 005417    1   89 005430    1   90 005433
 1   94 005441    1   98 005447    1  102 005455    1  106 005463    1  110 005471    1  114 005477    1  118 005505
 1  120 005506


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
