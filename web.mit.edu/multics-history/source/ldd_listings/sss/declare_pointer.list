	COMPILATION LISTING OF SEGMENT declare_pointer
	Compiled by: Multics PL/I Compiler, Release 32c, of June 16, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 07/31/89  1403.9 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 
        7 /* ******************************************************
        8*   *                                                    *
        9*   *                                                    *
       10*   * Copyright (c) 1972 by Massachusetts Institute of   *
       11*   * Technology and Honeywell Information Systems, Inc. *
       12*   *                                                    *
       13*   *                                                    *
       14*   ****************************************************** */
       15 
       16 declare_pointer:	proc(cur_block) returns(ptr);
       17 
       18 dcl	(cur_block,s) ptr;
       19 dcl	null builtin;
       20 
  1     1 /****^  *********************************************************
  1     2*        *                                                       *
  1     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  1     4*        *                                                       *
  1     5*        ********************************************************* */
  1     6 
  1     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  1     8 
  1     9 
  1    10 /****^  HISTORY COMMENTS:
  1    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  1    12*     install(89-07-31,MR12.3-1066):	
  1    13*     Removed the obsolete parameter source_line from the dcl of error_().
  1    14*                                                   END HISTORY COMMENTS */
  1    15 
  1    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  1    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  1    18* */
  1    19 
  1    20 declare	adjust_count	entry(pointer);
  1    21 			/* parameter 1:	(input)	any node pointer		*/
  1    22 
  1    23 declare	bindec		entry(fixed bin(31)) reducible
  1    24 			returns(character(12) aligned);
  1    25 			/* parameter 1:	(input)	bin value			*/
  1    26 			/* return:	(output)	character value with blanks	*/
  1    27 
  1    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  1    29 			returns(character(12) aligned varying);
  1    30 			/* parameter 1:	(input)	binary value		*/
  1    31 			/* return:	(output)	char value without blanks	*/
  1    32 
  1    33 declare	binoct		entry(fixed bin(31)) reducible
  1    34 			returns(char(12) aligned);
  1    35 			/* parameter 1:	(input)	binary value		*/
  1    36 			/* return:	(output)	char value with blanks	*/
  1    37 
  1    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  1    39 			returns(char(12) aligned);
  1    40 			/* parameter 1:	(input)	binary value		*/
  1    41 			/* return:	(output)	right-aligned char value	*/
  1    42 
  1    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  1    44 			returns(char(12) varying aligned);
  1    45 			/* parameter 1:	(input)	binary value		*/
  1    46 			/* returns:	(output)	char value without blanks	*/
  1    47 
  1    48 declare	compare_expression	entry(pointer,pointer) reducible
  1    49 			returns(bit(1) aligned);
  1    50 			/* parameter 1:	(input)	any node pointer		*/
  1    51 			/* parameter 2:	(input)	any node pointer		*/
  1    52 			/* return:	(output)	compare bit		*/
  1    53 
  1    54 declare	constant_length	entry (pointer, fixed bin (71))
  1    55 			returns (bit (1) aligned);
  1    56 			/* parameter 1:	(input)	reference node pointer	*/
  1    57 			/* parameter 2:	(input)	value of constant length	*/
  1    58 			/* return:	(output)	"1"b if constant length	*/
  1    59 
  1    60 declare	convert		entry(pointer,bit(36) aligned)
  1    61 			returns(pointer);
  1    62 			/* parameter 1:	(input)	any node pointer		*/
  1    63 			/* parameter 2:	(input)	target type		*/
  1    64 			/* return:	(output)	target value tree pointer	*/
  1    65 
  1    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  1    67 			returns(pointer);
  1    68 			/* parameter 1:	(input)	any node pointer		*/
  1    69 			/* parameter 2:	(input)	target type		*/
  1    70 			/* return:	(output)	target value tree pointer	*/
  1    71 
  1    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  1    73 			returns(pointer);
  1    74 			/* parameter 1:	(input)	any node pointer		*/
  1    75 			/* parameter 2:	(input)	target type		*/
  1    76 			/* return:	(output)	target value tree pointer	*/
  1    77 
  1    78 declare	convert$validate	entry(pointer,pointer);
  1    79 			/* parameter 1:	(input)	source value tree pointer	*/
  1    80 			/* parameter 2:	(input)	target reference node pointer	*/
  1    81 
  1    82 declare	convert$to_target_fb entry(pointer,pointer)
  1    83 			returns(pointer);
  1    84 			/* parameter 1:	(input)	source value tree pointer	*/
  1    85 			/* parameter 2:	(input)	target reference node pointer	*/
  1    86 			/* return:	(output)	target value tree pointer	*/
  1    87 
  1    88 declare	convert$to_target	entry(pointer,pointer)
  1    89 			returns(pointer);
  1    90 			/* parameter 1:	(input)	source value tree pointer	*/
  1    91 			/* parameter 2:	(input)	target reference node pointer	*/
  1    92 			/* return:	(output)	target value tree pointer	*/
  1    93 
  1    94 declare	copy_expression	entry(pointer unaligned)
  1    95 			returns(pointer);
  1    96 			/* parameter 1:	(input)	any node pointer		*/
  1    97 			/* return:	(output)	any node pointer		*/
  1    98 
  1    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  1   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  1   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  1   102 
  1   103 declare	copy_unique_expression entry(pointer)
  1   104 			returns(pointer);
  1   105 			/* parameter 1:	(input)	any node pointer		*/
  1   106 			/* return:	(output)	any node pointer		*/
  1   107 
  1   108 declare	create_array	entry()
  1   109 			returns(pointer);
  1   110 			/* return:	(output)	array node pointer		*/
  1   111 
  1   112 declare	create_block	entry(bit(9) aligned,pointer)
  1   113 			returns(pointer);
  1   114 			/* parameter 1:	(input)	block type		*/
  1   115 			/* parameter 2:	(input)	father block node pointer	*/
  1   116 			/* return:	(output)	block node pointer		*/
  1   117 
  1   118 declare	create_bound	entry()
  1   119 			returns(pointer);
  1   120 			/* return:	(output)	bound node pointer		*/
  1   121 
  1   122 declare	create_context	entry(pointer,pointer)
  1   123 			returns(pointer);
  1   124 			/* parameter 1:	(input)	block node pointer		*/
  1   125 			/* parameter 2:	(input)	token pointer		*/
  1   126 			/* return:	(output)	context node pointer	*/
  1   127 
  1   128 declare	create_cross_reference entry()
  1   129 			returns(pointer);
  1   130 			/* return:	(output)	cross reference node pointer	*/
  1   131 
  1   132 declare	create_default	entry
  1   133 			returns(pointer);
  1   134 			/* return:	(output)	default node pointer	*/
  1   135 
  1   136 declare	create_identifier	entry()
  1   137 			returns(pointer);
  1   138 			/* return:	(output)	token node pointer		*/
  1   139 
  1   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  1   141 			returns(pointer);
  1   142 			/* parameter 1:	(input)	block node pointer		*/
  1   143 			/* parameter 2:	(input)	token node pointer		*/
  1   144 			/* parameter 3:	(input)	declare type		*/
  1   145 			/* return:	(output)	label node pointer		*/
  1   146 
  1   147 declare	create_list	entry(fixed bin(15))
  1   148 			returns(pointer);
  1   149 			/* parameter 1:	(input)	number of list elements	*/
  1   150 			/* return:	(output)	list node pointer		*/
  1   151 
  1   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  1   153 			returns(pointer);
  1   154 			/* parameter 1:	(input)	operator type		*/
  1   155 			/* parameter 2:	(input)	number of operands		*/
  1   156 			/* return:	(output)	operator node pointer	*/
  1   157 
  1   158 declare	create_reference	entry(pointer)
  1   159 			returns(pointer);
  1   160 			/* parameter 1:	(input)	symbol node pointer		*/
  1   161 			/* return:	(output)	reference node pointer	*/
  1   162 
  1   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  1   164 			returns(pointer);
  1   165 			/* parameter 1:	(input)	statement type		*/
  1   166 			/* parameter 2:	(input)	block node pointer		*/
  1   167 			/* parameter 3:	(input)	label node pointer		*/
  1   168 			/* parameter 4:	(input)	conditions		*/
  1   169 			/* return:	(output)	statement node pointer	*/
  1   170 
  1   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  1   172 			returns(pointer);
  1   173 			/* parameter 1:	(input)	statement type		*/
  1   174 			/* parameter 2:	(input)	block node pointer		*/
  1   175 			/* parameter 3:	(input)	label node pointer		*/
  1   176 			/* parameter 4:	(input)	conditions		*/
  1   177 			/* return:	(output)	statement node pointer	*/
  1   178 
  1   179 declare	create_storage	entry(fixed bin(15))
  1   180 			returns(pointer);
  1   181 			/* parameter 1:	(input)	number of words		*/
  1   182 			/* return:	(output)	storage block pointer	*/
  1   183 
  1   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  1   185 			returns(pointer);
  1   186 			/* parameter 1:	(input)	block node pointer		*/
  1   187 			/* parameter 2:	(input)	token node pointer		*/
  1   188 			/* parameter 3:	(input)	declare type		*/
  1   189 			/* return:	(output)	symbol node pointer		*/
  1   190 
  1   191 declare	create_token	entry (character (*), bit (9) aligned)
  1   192 			returns (ptr);
  1   193 			/* parameter 1:	(input)	token string		*/
  1   194 			/* parameter 2:	(input)	token type		*/
  1   195 			/* return:	(output)	token node ptr		*/
  1   196 
  1   197 declare	create_token$init_hash_table entry ();
  1   198 
  1   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  1   200 			returns (ptr);
  1   201 			/* parameter 1:	(input)	token string		*/
  1   202 			/* parameter 2:	(input)	token type		*/
  1   203 			/* parameter 3:	(input)	protected flag		*/
  1   204 			/* return:	(output)	token node ptr		*/
  1   205 
  1   206 declare	decbin		entry(character(*) aligned) reducible
  1   207 			returns(fixed bin(31));
  1   208 			/* parameter 1:	(input)	decimal character string	*/
  1   209 			/* return:	(output)	binary value		*/
  1   210 
  1   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  1   212 			returns(pointer);
  1   213 			/* parameter 1:	(input)	value			*/
  1   214 			/* parameter 2:	(input)	type			*/
  1   215 			/* parameter 3:	(input)	size			*/
  1   216 			/* parameter 4:	(input)	scale			*/
  1   217 			/* return:	(output)	reference node pointer	*/
  1   218 
  1   219 declare	declare_constant$bit entry(bit(*) aligned)
  1   220 			returns(pointer);
  1   221 			/* parameter 1:	(input)	bit			*/
  1   222 			/* return:	(output)	reference node pointer	*/
  1   223 
  1   224 declare	declare_constant$char entry(character(*) aligned)
  1   225 			returns(pointer);
  1   226 			/* parameter 1:	(input)	character			*/
  1   227 			/* return:	(output)	reference node pointer	*/
  1   228 
  1   229 declare	declare_constant$desc entry(bit(*) aligned)
  1   230 			returns(pointer);
  1   231 			/* parameter 1:	(input)	descriptor bit value	*/
  1   232 			/* return:	(output)	reference node pointer	*/
  1   233 
  1   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  1   235 			returns(pointer);
  1   236 			/* parameter 1:	(input)	integer			*/
  1   237 			/* return:	(output)	reference node pointer	*/
  1   238 
  1   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  1   240 			returns(pointer);
  1   241 			/* parameter 1:	(input)	block node pointer		*/
  1   242 			/* parameter 2:	(input)	statement node pointer	*/
  1   243 			/* parameter 3:	(input)	symbol node pointer		*/
  1   244 			/* parameter 4:	(input)	loc pointer		*/
  1   245 			/* parameter 5:	(input)	array descriptor bit
  1   246*						cross_section bit	*/
  1   247 			/* return:	(output)	reference node pointer	*/
  1   248 
  1   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  1   250 			returns(pointer);
  1   251 			/* parameter 1:	(input)	block node pointer	*/
  1   252 			/* parameter 2:	(input)	statement node pointer 	*/
  1   253 			/* parameter 3:	(input)	symbol node pointer	*/
  1   254 			/* parameter 4:	(input)	loc pointer	*/
  1   255 			/* parameter 5:	(input)	array descriptor bit
  1   256*						cross_section bit	*/
  1   257 			/* return:	(output)	reference node pointer	*/
  1   258 
  1   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  1   260 			returns(pointer);
  1   261 			/* parameter 1:	(input)	block node pointer		*/
  1   262 			/* parameter 2:	(input)	statement node pointer	*/
  1   263 			/* parameter 3:	(input)	symbol node pointer		*/
  1   264 			/* parameter 4:	(input)	loc pointer		*/
  1   265 			/* parameter 5:	(input)	array descriptor bit
  1   266*						cross_section bit	*/
  1   267 			/* return:	(output)	reference node pointer	*/
  1   268 
  1   269 declare	declare_integer	entry(pointer)
  1   270 			returns(pointer);
  1   271 			/* parameter 1:	(input)	block node pointer		*/
  1   272 			/* return:	(output)	reference node pointer 	*/
  1   273 
  1   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  1   275 			/* parameter 1:	(input)	picture string		*/
  1   276 			/* parameter 2:	(input)	symbol node pointer		*/
  1   277 			/* parameter 3:	(output)	error code, if any		*/
  1   278 
  1   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  1   280 			returns(pointer);
  1   281 			/* parameter 1:	(input)	picture string		*/
  1   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  1   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  1   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  1   285 			/* return:	(output)	reference node pointer	*/
  1   286 
  1   287 declare	declare_pointer	entry(pointer)
  1   288 			returns(pointer);
  1   289 			/* parameter 1:	(input)	block node pointer		*/
  1   290 			/* return:	(output)	reference node pointer	*/
  1   291 
  1   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  1   293 			returns(pointer);
  1   294 			/* parameter 1:	(input)	type			*/
  1   295 			/* parameter 2:	(input)	precision			*/
  1   296 			/* parameter 3:	(input)	scale			*/
  1   297 			/* parameter 4:	(input)	length			*/
  1   298 			/* return:	(output)	reference node pointer	*/
  1   299 
  1   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  1   301 			returns(char(120) varying);
  1   302 			/* parameter 1:	(input)	node pointer		*/
  1   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  1   304 			/* return:	(output)	source line id		*/
  1   305 
  1   306 declare	decode_source_id	entry(
  2     1 			1 structure unaligned,
  2     2 			  2 /* file_number */	bit(8),
  2     3 			  2 /* line_number */	bit(14),
  2     4 			  2 /* stmt_number */	bit(5),
  1   307 
  1   308 			bit(1) aligned)
  1   309 			returns(char(120) varying);
  1   310 			/* parameter 1:	(input)	source id			*/
  1   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  1   312 			/* return:	(output)	source line id		*/
  1   313 
  1   314 declare	error		entry(fixed bin(15),pointer,pointer);
  1   315 			/* parameter 1:	(input)	error number		*/
  1   316 			/* parameter 2:	(input)	statement node pointer or null*/
  1   317 			/* parameter 3:	(input)	token node pointer 		*/
  1   318 
  1   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  1   320 			/* parameter 1:	(input)	error number		*/
  1   321 			/* parameter 2:	(input)	statement node pointer or null*/
  1   322 			/* parameter 3:	(input)	token node pointer 		*/
  1   323 
  1   324 declare	error_		entry(fixed bin(15),
  3     1 			1 structure unaligned,
  3     2 			  2 /* file_number */	bit(8),
  3     3 			  2 /* line_number */	bit(14),
  3     4 			  2 /* stmt_number */	bit(5),
  1   325 
  1   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  1   327 			/* parameter 1:	(input)	error number		*/
  1   328 			/* parameter 2:	(input)	statement id		*/
  1   329 			/* parameter 3:	(input)	any node pointer		*/
  1   330 			/* parameter 4:	(input)	source segment		*/
  1   331 			/* parameter 5:	(input)	source starting character	*/
  1   332 			/* parameter 6:	(input)	source length		*/
  1   333 
  1   334 declare	error_$no_text	entry(fixed bin(15),
  4     1 			1 structure unaligned,
  4     2 			  2 /* file_number */	bit(8),
  4     3 			  2 /* line_number */	bit(14),
  4     4 			  2 /* stmt_number */	bit(5),
  1   335 
  1   336 			pointer);
  1   337 			/* parameter 1:	(input)	error number		*/
  1   338 			/* parameter 2:	(input)	statement id		*/
  1   339 			/* parameter 3:	(input)	any node pointer		*/
  1   340 
  1   341 declare	error_$initialize_error entry();
  1   342 
  1   343 declare	error_$finish	entry();
  1   344 
  1   345 declare	free_node		entry(pointer);
  1   346 			/* parameter 1:	any node pointer			*/
  1   347 
  1   348 declare	get_array_size	entry(pointer,fixed bin(3));
  1   349 			/* parameter 1:	(input)	symbol node pointer		*/
  1   350 			/* parameter 2:	(input)	units			*/
  1   351 
  1   352 declare	get_size		entry(pointer);
  1   353 			/* parameter 1:	(input)	symbol node pointer		*/
  1   354 
  1   355 declare	merge_attributes	external entry(pointer,pointer)
  1   356 			returns(bit(1) aligned);
  1   357 			/* parameter 1:	(input)	target symbol node pointer */
  1   358 			/* parameter 2:	(input)	source symbol node pointer */
  1   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  1   360 
  1   361 declare	optimizer		entry(pointer);
  1   362 			/* parameter 1:	(input)	root pointer		*/
  1   363 
  1   364 declare	parse_error	entry(fixed bin(15),pointer);
  1   365 			/* parameter 1:	(input)	error number		*/
  1   366 			/* parameter 2:	(input)	any node pointer		*/
  1   367 
  1   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  1   369 			/* parameter 1:	(input)	error number		*/
  1   370 			/* parameter 2:	(input)	any node pointer		*/
  1   371 
  1   372 declare	pl1_error_print$write_out
  1   373 			entry(fixed bin(15),
  5     1 			1 structure unaligned,
  5     2 			  2 /* file_number */	bit(8),
  5     3 			  2 /* line_number */	bit(14),
  5     4 			  2 /* stmt_number */	bit(5),
  1   374 
  1   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  1   376 			/* parameter 1:	(input)	error number		*/
  1   377 			/* parameter 2:	(input)	statement identification	*/
  1   378 			/* parameter 3:	(input)	any node pointer		*/
  1   379 			/* parameter 4:	(input)	source segment		*/
  1   380 			/* parameter 5:	(input)	source character index	*/
  1   381 			/* parameter 6:	(input)	source length		*/
  1   382 			/* parameter 7:	(input)	source line		*/
  1   383 
  1   384 declare	pl1_error_print$listing_segment
  1   385 			entry(fixed bin(15),
  6     1 			1 structure unaligned,
  6     2 			  2 /* file_number */	bit(8),
  6     3 			  2 /* line_number */	bit(14),
  6     4 			  2 /* stmt_number */	bit(5),
  1   386 
  1   387 			pointer);
  1   388 			/* parameter 1:	(input)	error number		*/
  1   389 			/* parameter 2:	(input)	statement identification	*/
  1   390 			/* parameter 3:	(input)	token node pointer		*/
  1   391 
  1   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  1   393 			/* parameter 1:	(input)	string			*/
  1   394 
  1   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  1   396 			/* parameter 1:	(input)	string			*/
  1   397 
  1   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  1   399 			/* parameter 1:	(input)	string			*/
  1   400 			/* parameter 2:	(input)	string length or 0		*/
  1   401 
  1   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  1   403 			/* parameter 1:	(input)	string			*/
  1   404 			/* parameter 2:	(input)	string length or 0		*/
  1   405 
  1   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  1   407 			/* parameter 1:	(input)	string pointer		*/
  1   408 			/* parameter 2:	(input)	string size		*/
  1   409 
  1   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  1   411 			/* parameter 1:	(input)	string pointer		*/
  1   412 			/* parameter 2:	(input)	string length or 0		*/
  1   413 
  1   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  1   415 			/* parameter 1:	(input)	string			*/
  1   416 			/* parameter 2:	(input)	length			*/
  1   417 
  1   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  1   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  1   420 			/* parameter 2:	(input)	line number		*/
  1   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  1   422 			/* parameter 4:	(input)	number of chars to copy	*/
  1   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  1   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  1   425 
  1   426 declare	refer_extent	entry(pointer,pointer);
  1   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  1   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  1   429 
  1   430 declare	reserve$clear	entry()
  1   431 			returns(pointer);
  1   432 			/* return:	(output)	pointer			*/
  1   433 
  1   434 declare	reserve$declare_lib	entry(fixed bin(15))
  1   435 			returns(pointer);
  1   436 			/* parameter 1:	(input)	builtin function number	*/
  1   437 			/* return:	(output)	pointer			*/
  1   438 
  1   439 declare	reserve$read_lib	entry(fixed bin(15))
  1   440 			returns(pointer);
  1   441 			/* parameter 1:	(input)	builtin function number	*/
  1   442 			/* return:	(output)	pointer			*/
  1   443 
  1   444 declare	semantic_translator	entry();
  1   445 
  1   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  1   447 			/* parameter 1:	(input)	error number		*/
  1   448 			/* parameter 2:	(input)	any node pointer		*/
  1   449 
  1   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  1   451 			/* parameter 1:	(input)	error number		*/
  1   452 			/* parameter 2:	(input)	any node pointer		*/
  1   453 
  1   454 declare	share_expression	entry(ptr)
  1   455 			returns(ptr);
  1   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  1   457 			/* return:	(output)	tree pointer or null	*/
  1   458 
  1   459 declare	token_to_binary	entry(ptr) reducible
  1   460 			returns(fixed bin(31));
  1   461 			/* parameter 1:	(input)	token node pointer		*/
  1   462 			/* return:	(output)	converted binary value	*/
  1   463 
  1   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
       21 
  7     1 /* BEGIN INCLUDE FILE ... boundary.incl.pl1 */
  7     2 
  7     3 /* Modified: 26 Apr 1979 by PCK to implement 4-bit decimal */
  7     4 
  7     5 dcl (	bit_		init(1),
  7     6 	digit_		init(2),
  7     7 	character_	init(3),
  7     8 	half_		init(4),
  7     9 	word_		init(5),
  7    10 	mod2_		init(6),
  7    11 	mod4_		init(7)) fixed bin(3) int static options(constant);
  7    12 
  7    13 /* END INCLUDE FILE ... boundary.incl.pl1 */
       22 
  8     1 /* BEGIN INCLUDE FILE ... declare_type.incl.pl1 */
  8     2 
  8     3 /* Modified: 25 Apr 1979 by PCK to implement 4-bit decimal */
  8     4 
  8     5 dcl  (	by_declare	initial("001"b),
  8     6 	by_explicit_context initial("010"b),
  8     7 	by_context	initial("011"b),
  8     8 	by_implication	initial("100"b),
  8     9 	by_compiler	initial("101"b)) int static bit(3) aligned options(constant);
  8    10 
  8    11 /* END INCLUDE FILE ... declare_type.incl.pl1 */
       23 
  9     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
  9     2 
  9     3 dcl	1 symbol			based aligned,
  9     4 	2 node_type		bit(9) unal,
  9     5 	2 source_id		structure unal,
  9     6 	  3 file_number		bit(8),
  9     7 	  3 line_number		bit(14),
  9     8 	  3 statement_number	bit(5),
  9     9 	2 location		fixed(18) unal unsigned,
  9    10 	2 allocated		bit(1) unal,
  9    11 	2 dcl_type		bit(3) unal,
  9    12 	2 reserved		bit(6) unal,
  9    13 	2 pix			unal,
  9    14 	  3 pic_fixed		bit(1) unal,
  9    15 	  3 pic_float		bit(1) unal,
  9    16 	  3 pic_char		bit(1) unal,
  9    17 	  3 pic_scale		fixed(7) unal,
  9    18 	  3 pic_size		fixed(7) unal,
  9    19 	2 level			fixed(8) unal,
  9    20 	2 boundary		fixed(3) unal,
  9    21 	2 size_units		fixed(3) unal,
  9    22 	2 scale			fixed(7) unal,
  9    23 	2 runtime			bit(18) unal,
  9    24 	2 runtime_offset		bit(18) unal,
  9    25 	2 block_node		ptr unal,
  9    26 	2 token			ptr unal,
  9    27 	2 next			ptr unal,
  9    28 	2 multi_use		ptr unal,
  9    29 	2 cross_references		ptr unal,
  9    30 	2 initial			ptr unal,
  9    31 	2 array			ptr unal,
  9    32 	2 descriptor		ptr unal,
  9    33 	2 equivalence		ptr unal,
  9    34 	2 reference		ptr unal,
  9    35 	2 general			ptr unal,
  9    36 	2 father			ptr unal,
  9    37 	2 brother			ptr unal,
  9    38 	2 son			ptr unal,
  9    39 	2 word_size		ptr unal,
  9    40 	2 bit_size		ptr unal,
  9    41 	2 dcl_size		ptr unal,
  9    42 	2 symtab_size		ptr unal,
  9    43 	2 c_word_size		fixed(24),
  9    44 	2 c_bit_size		fixed(24),
  9    45 	2 c_dcl_size		fixed(24),
  9    46 
  9    47 	2 attributes		structure aligned,
  9    48 	  3 data_type		structure unal,
  9    49 	    4 structure		bit(1) ,
  9    50 	    4 fixed		bit(1),
  9    51 	    4 float		bit(1),
  9    52 	    4 bit			bit(1),
  9    53 	    4 char		bit(1),
  9    54 	    4 ptr			bit(1),
  9    55 	    4 offset		bit(1),
  9    56 	    4 area		bit(1),
  9    57 	    4 label		bit(1),
  9    58 	    4 entry		bit(1),
  9    59 	    4 file		bit(1),
  9    60 	    4 arg_descriptor	bit(1),
  9    61 	    4 storage_block		bit(1),
  9    62 	    4 explicit_packed	bit(1), /* options(packed) */
  9    63 	    4 condition		bit(1),
  9    64 	    4 format		bit(1),
  9    65 	    4 builtin		bit(1),
  9    66 	    4 generic		bit(1),
  9    67 	    4 picture		bit(1),
  9    68 
  9    69 	  3 misc_attributes		structure unal,
  9    70 	    4 dimensioned		bit(1),
  9    71 	    4 initialed		bit(1),
  9    72 	    4 aligned		bit(1),
  9    73 	    4 unaligned		bit(1),
  9    74 	    4 signed		bit(1),
  9    75 	    4 unsigned		bit(1),
  9    76 	    4 precision		bit(1),
  9    77 	    4 varying		bit(1),
  9    78 	    4 local		bit(1),
  9    79 	    4 decimal		bit(1),
  9    80 	    4 binary		bit(1),
  9    81 	    4 real		bit(1),
  9    82 	    4 complex		bit(1),
  9    83 	    4 variable		bit(1),
  9    84 	    4 reducible		bit(1),
  9    85 	    4 irreducible		bit(1),
  9    86 	    4 returns		bit(1),
  9    87 	    4 position		bit(1),
  9    88 	    4 internal		bit(1),
  9    89 	    4 external		bit(1),
  9    90 	    4 like		bit(1),
  9    91 	    4 member		bit(1),
  9    92 	    4 non_varying		bit(1),
  9    93 	    4 options		bit(1),
  9    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
  9    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
  9    96 
  9    97 	  3 storage_class		structure unal,
  9    98 	    4 auto		bit(1),
  9    99 	    4 based		bit(1),
  9   100 	    4 static		bit(1),
  9   101 	    4 controlled		bit(1),
  9   102 	    4 defined		bit(1),
  9   103 	    4 parameter		bit(1),
  9   104 	    4 param_desc		bit(1),
  9   105 	    4 constant		bit(1),
  9   106 	    4 temporary		bit(1),
  9   107 	    4 return_value		bit(1),
  9   108 
  9   109 	  3 file_attributes		structure unal,
  9   110 	    4 print		bit(1),
  9   111 	    4 input		bit(1),
  9   112 	    4 output		bit(1),
  9   113 	    4 update		bit(1),
  9   114 	    4 stream		bit(1),
  9   115 	    4 reserved_1		bit(1),
  9   116 	    4 record		bit(1),
  9   117 	    4 sequential		bit(1),
  9   118 	    4 direct		bit(1),
  9   119 	    4 interactive		bit(1),		/* env(interactive) */
  9   120 	    4 reserved_2		bit(1),
  9   121 	    4 reserved_3		bit(1),
  9   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
  9   123 	    4 keyed		bit(1),
  9   124 	    4 reserved_4		bit(1),
  9   125 	    4 environment		bit(1),
  9   126 
  9   127 	  3 compiler_developed	structure unal,
  9   128 	    4 aliasable		bit(1),
  9   129 	    4 packed		bit(1),
  9   130 	    4 passed_as_arg		bit(1),
  9   131 	    4 allocate		bit(1),
  9   132 	    4 set			bit(1),
  9   133 	    4 exp_extents		bit(1),
  9   134 	    4 refer_extents		bit(1),
  9   135 	    4 star_extents		bit(1),
  9   136 	    4 isub		bit(1),
  9   137 	    4 put_in_symtab		bit(1),
  9   138 	    4 contiguous		bit(1),
  9   139 	    4 put_data		bit(1),
  9   140 	    4 overlayed		bit(1),
  9   141 	    4 error		bit(1),
  9   142 	    4 symtab_processed	bit(1),
  9   143 	    4 overlayed_by_builtin	bit(1),
  9   144 	    4 defaulted		bit(1),
  9   145 	    4 connected		bit(1);
  9   146 
  9   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
       24 
 10     1 /* BEGIN INCLUDE FILE ... system.incl.pl1 */
 10     2 
 10     3 /* Modified: 25 Apr 1979 by PCK to implemnt 4-bit decimal */
 10     4 
 10     5 dcl (	max_p_flt_bin_1			initial(27),
 10     6 	max_p_flt_bin_2			initial(63),
 10     7 	max_p_fix_bin_1			initial(35),
 10     8 	max_p_fix_bin_2			initial(71),
 10     9 
 10    10 	max_p_dec				initial(59),
 10    11 	max_p_bin_or_dec			initial (71),	/* max (max_p_fix_bin_2, max_p_dec) */
 10    12 
 10    13 	min_scale				initial(-128),
 10    14 	max_scale				initial(+127),
 10    15 	max_bit_string			initial(9437184),
 10    16 	max_char_string			initial(1048576),
 10    17 	max_area_size			initial(262144),
 10    18 	min_area_size			initial(28),
 10    19 
 10    20 	max_bit_string_constant		initial (253),	/* max length of bit literals */
 10    21 	max_char_string_constant		initial (254),	/* max length of character literals */
 10    22 	max_identifier_length		initial (256),
 10    23 	max_number_of_dimensions		initial (127),
 10    24 
 10    25 	max_length_precision		initial(24),
 10    26 	max_offset_precision		initial(24),	/* 18 bits for word offset + 6 bits for bit offset */
 10    27 
 10    28 	max_words_per_variable		initial (262144),
 10    29 
 10    30 	bits_per_word			initial(36),
 10    31 	bits_per_double			initial(72),
 10    32 	packed_digits_per_character		initial(2),
 10    33 	characters_per_half			initial(2),
 10    34 	characters_per_word			initial(4),
 10    35 	characters_per_double		initial(8),
 10    36 
 10    37 	bits_per_character			initial(9),
 10    38 	bits_per_half			initial(18),
 10    39 	bits_per_decimal_digit		initial(9),
 10    40 	bits_per_binary_exponent		initial(8),
 10    41 	bits_per_packed_ptr			initial(36),
 10    42 	words_per_packed_pointer		initial(1),
 10    43 
 10    44 	words_per_fix_bin_1			initial(1),
 10    45 	words_per_fix_bin_2			initial(2),
 10    46 	words_per_flt_bin_1			initial(1),
 10    47 	words_per_flt_bin_2			initial(2),
 10    48 	words_per_varying_string_header	initial(1),
 10    49 	words_per_offset			initial(1),
 10    50 	words_per_pointer			initial(2),
 10    51 	words_per_label_var			initial(4),
 10    52 	words_per_entry_var			initial(4),
 10    53 	words_per_file_var			initial(4),
 10    54 	words_per_format			initial(4),
 10    55 	words_per_condition_var		initial(6),
 10    56 
 10    57 	max_index_register_value		initial(262143),
 10    58 	max_signed_index_register_value	initial(131071),
 10    59 
 10    60 	max_signed_xreg_precision		initial(17),
 10    61 	max_uns_xreg_precision		initial(18),
 10    62 
 10    63 	default_area_size			initial(1024),
 10    64 	default_flt_bin_p			initial(27),
 10    65 	default_fix_bin_p			initial(17),
 10    66 	default_flt_dec_p			initial(10),
 10    67           default_fix_dec_p   		initial(7)) fixed bin(31) internal static options(constant);
 10    68 
 10    69 dcl	bits_per_digit			initial(4.5)  fixed bin(31,1) internal static options(constant);
 10    70 
 10    71 dcl (	integer_type		initial("010000000000000000000100000001100000"b),
 10    72 	dec_integer_type		initial("010000000000000000000100000010100000"b),
 10    73 	pointer_type		initial("000001000000000000000100000000000000"b),
 10    74 	real_type			initial("001000000000000000000100000001100000"b),
 10    75 	complex_type		initial("001000000000000000000100000001010000"b),
 10    76 	builtin_type		initial("000000000000000010000000000000000000"b),
 10    77 	storage_block_type		initial("000000000000100000000000000000000000"b),
 10    78 	arg_desc_type		initial("000000000001000000000000000000000000"b),
 10    79 	local_label_var_type	initial("000000001000000000000100000100001000"b),
 10    80 	entry_var_type		initial("000000000100000000000000000000001000"b),
 10    81 	bit_type			initial("000100000000000000000000000000000000"b),
 10    82 	char_type			initial("000010000000000000000000000000000000"b)) bit(36) aligned int static
 10    83 									options(constant);
 10    84 
 10    85 /* END INCLUDE FILE ... system.incl.pl1 */
       25 
       26 
       27 
       28 	s=create_symbol(cur_block,(null),by_compiler);
       29 
       30 	s->symbol.ptr  ,
       31 	s->symbol.auto  ,
       32 	s->symbol.allocate = "1"b;
       33 
       34 	s->symbol.boundary=mod2_;
       35 	s->symbol.c_word_size=2;
       36 	s->symbol.c_bit_size=bits_per_word+bits_per_word;
       37 
       38 	return(s->symbol.reference);
       39 
       40 	end declare_pointer;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/31/89  1338.3  declare_pointer.pl1               >spec>install>MR12.3-1066>declare_pointer.pl1
21           1    07/31/89  1332.6  language_utility.incl.pl1         >spec>install>MR12.3-1066>language_utility.incl.pl1
1-307        2    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
1-325        3    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
1-335        4    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
1-374        5    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
1-386        6    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
22           7    10/25/79  1645.8  boundary.incl.pl1                 >ldd>include>boundary.incl.pl1
23           8    10/25/79  1645.8  declare_type.incl.pl1             >ldd>include>declare_type.incl.pl1
24           9    12/07/83  1701.7  symbol.incl.pl1                   >ldd>include>symbol.incl.pl1
25          10    12/07/83  1701.7  system.incl.pl1                   >ldd>include>system.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
allocate                 33(02)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 30*
attributes               31            based           structure                level 2 dcl 9-3
auto                     32(09)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 30*
bits_per_word                          constant        fixed bin(31,0)          initial dcl 10-5 ref 36 36
boundary                  2(20)        based           fixed bin(3,0)           level 2 packed packed unaligned dcl 9-3 set ref 34*
by_compiler                     000000 constant        bit(3)                   initial dcl 8-5 set ref 28*
c_bit_size               27            based           fixed bin(24,0)          level 2 dcl 9-3 set ref 36*
c_word_size              26            based           fixed bin(24,0)          level 2 dcl 9-3 set ref 35*
compiler_developed       32(35)        based           structure                level 3 packed packed unaligned dcl 9-3
create_symbol                   000010 constant        entry                    external dcl 1-184 ref 28
cur_block                              parameter       pointer                  dcl 18 set ref 16 28*
data_type                31            based           structure                level 3 packed packed unaligned dcl 9-3
mod2_                                  constant        fixed bin(3,0)           initial dcl 7-5 ref 34
null                                                   builtin function         dcl 19 ref 28
ptr                      31(05)        based           bit(1)                   level 4 packed packed unaligned dcl 9-3 set ref 30*
reference                15            based           pointer                  level 2 packed packed unaligned dcl 9-3 ref 38
s                               000100 automatic       pointer                  dcl 18 set ref 28* 30 30 30 34 35 36 38
storage_class            32(09)        based           structure                level 3 packed packed unaligned dcl 9-3
symbol                                 based           structure                level 1 dcl 9-3

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
adjust_count                    000000 constant        entry                    external dcl 1-20
arg_desc_type                          internal static bit(36)                  initial dcl 10-71
binary_to_octal_string          000000 constant        entry                    external dcl 1-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 1-43
bindec                          000000 constant        entry                    external dcl 1-23
bindec$vs                       000000 constant        entry                    external dcl 1-28
binoct                          000000 constant        entry                    external dcl 1-33
bit_                                   internal static fixed bin(3,0)           initial dcl 7-5
bit_type                               internal static bit(36)                  initial dcl 10-71
bits_per_binary_exponent               internal static fixed bin(31,0)          initial dcl 10-5
bits_per_character                     internal static fixed bin(31,0)          initial dcl 10-5
bits_per_decimal_digit                 internal static fixed bin(31,0)          initial dcl 10-5
bits_per_digit                         internal static fixed bin(31,1)          initial dcl 10-69
bits_per_double                        internal static fixed bin(31,0)          initial dcl 10-5
bits_per_half                          internal static fixed bin(31,0)          initial dcl 10-5
bits_per_packed_ptr                    internal static fixed bin(31,0)          initial dcl 10-5
builtin_type                           internal static bit(36)                  initial dcl 10-71
by_context                             internal static bit(3)                   initial dcl 8-5
by_declare                             internal static bit(3)                   initial dcl 8-5
by_explicit_context                    internal static bit(3)                   initial dcl 8-5
by_implication                         internal static bit(3)                   initial dcl 8-5
char_type                              internal static bit(36)                  initial dcl 10-71
character_                             internal static fixed bin(3,0)           initial dcl 7-5
characters_per_double                  internal static fixed bin(31,0)          initial dcl 10-5
characters_per_half                    internal static fixed bin(31,0)          initial dcl 10-5
characters_per_word                    internal static fixed bin(31,0)          initial dcl 10-5
compare_expression              000000 constant        entry                    external dcl 1-48
complex_type                           internal static bit(36)                  initial dcl 10-71
constant_length                 000000 constant        entry                    external dcl 1-54
convert                         000000 constant        entry                    external dcl 1-60
convert$from_builtin            000000 constant        entry                    external dcl 1-72
convert$to_integer              000000 constant        entry                    external dcl 1-66
convert$to_target               000000 constant        entry                    external dcl 1-88
convert$to_target_fb            000000 constant        entry                    external dcl 1-82
convert$validate                000000 constant        entry                    external dcl 1-78
copy_expression                 000000 constant        entry                    external dcl 1-94
copy_expression$copy_sons       000000 constant        entry                    external dcl 1-99
copy_unique_expression          000000 constant        entry                    external dcl 1-103
create_array                    000000 constant        entry                    external dcl 1-108
create_block                    000000 constant        entry                    external dcl 1-112
create_bound                    000000 constant        entry                    external dcl 1-118
create_context                  000000 constant        entry                    external dcl 1-122
create_cross_reference          000000 constant        entry                    external dcl 1-128
create_default                  000000 constant        entry                    external dcl 1-132
create_identifier               000000 constant        entry                    external dcl 1-136
create_label                    000000 constant        entry                    external dcl 1-140
create_list                     000000 constant        entry                    external dcl 1-147
create_operator                 000000 constant        entry                    external dcl 1-152
create_reference                000000 constant        entry                    external dcl 1-158
create_statement                000000 constant        entry                    external dcl 1-163
create_statement$prologue       000000 constant        entry                    external dcl 1-171
create_storage                  000000 constant        entry                    external dcl 1-179
create_token                    000000 constant        entry                    external dcl 1-191
create_token$init_hash_table    000000 constant        entry                    external dcl 1-197
create_token$protected          000000 constant        entry                    external dcl 1-199
dec_integer_type                       internal static bit(36)                  initial dcl 10-71
decbin                          000000 constant        entry                    external dcl 1-206
declare_constant                000000 constant        entry                    external dcl 1-211
declare_constant$bit            000000 constant        entry                    external dcl 1-219
declare_constant$char           000000 constant        entry                    external dcl 1-224
declare_constant$desc           000000 constant        entry                    external dcl 1-229
declare_constant$integer        000000 constant        entry                    external dcl 1-234
declare_descriptor              000000 constant        entry                    external dcl 1-239
declare_descriptor$ctl          000000 constant        entry                    external dcl 1-249
declare_descriptor$param        000000 constant        entry                    external dcl 1-259
declare_integer                 000000 constant        entry                    external dcl 1-269
declare_picture                 000000 constant        entry                    external dcl 1-274
declare_picture_temp            000000 constant        entry                    external dcl 1-279
declare_pointer                 000000 constant        entry                    external dcl 1-287
declare_temporary               000000 constant        entry                    external dcl 1-292
decode_node_id                  000000 constant        entry                    external dcl 1-300
decode_source_id                000000 constant        entry                    external dcl 1-306
default_area_size                      internal static fixed bin(31,0)          initial dcl 10-5
default_fix_bin_p                      internal static fixed bin(31,0)          initial dcl 10-5
default_fix_dec_p                      internal static fixed bin(31,0)          initial dcl 10-5
default_flt_bin_p                      internal static fixed bin(31,0)          initial dcl 10-5
default_flt_dec_p                      internal static fixed bin(31,0)          initial dcl 10-5
digit_                                 internal static fixed bin(3,0)           initial dcl 7-5
entry_var_type                         internal static bit(36)                  initial dcl 10-71
error                           000000 constant        entry                    external dcl 1-314
error$omit_text                 000000 constant        entry                    external dcl 1-319
error_                          000000 constant        entry                    external dcl 1-324
error_$finish                   000000 constant        entry                    external dcl 1-343
error_$initialize_error         000000 constant        entry                    external dcl 1-341
error_$no_text                  000000 constant        entry                    external dcl 1-334
free_node                       000000 constant        entry                    external dcl 1-345
get_array_size                  000000 constant        entry                    external dcl 1-348
get_size                        000000 constant        entry                    external dcl 1-352
half_                                  internal static fixed bin(3,0)           initial dcl 7-5
integer_type                           internal static bit(36)                  initial dcl 10-71
local_label_var_type                   internal static bit(36)                  initial dcl 10-71
max_area_size                          internal static fixed bin(31,0)          initial dcl 10-5
max_bit_string                         internal static fixed bin(31,0)          initial dcl 10-5
max_bit_string_constant                internal static fixed bin(31,0)          initial dcl 10-5
max_char_string                        internal static fixed bin(31,0)          initial dcl 10-5
max_char_string_constant               internal static fixed bin(31,0)          initial dcl 10-5
max_identifier_length                  internal static fixed bin(31,0)          initial dcl 10-5
max_index_register_value               internal static fixed bin(31,0)          initial dcl 10-5
max_length_precision                   internal static fixed bin(31,0)          initial dcl 10-5
max_number_of_dimensions               internal static fixed bin(31,0)          initial dcl 10-5
max_offset_precision                   internal static fixed bin(31,0)          initial dcl 10-5
max_p_bin_or_dec                       internal static fixed bin(31,0)          initial dcl 10-5
max_p_dec                              internal static fixed bin(31,0)          initial dcl 10-5
max_p_fix_bin_1                        internal static fixed bin(31,0)          initial dcl 10-5
max_p_fix_bin_2                        internal static fixed bin(31,0)          initial dcl 10-5
max_p_flt_bin_1                        internal static fixed bin(31,0)          initial dcl 10-5
max_p_flt_bin_2                        internal static fixed bin(31,0)          initial dcl 10-5
max_scale                              internal static fixed bin(31,0)          initial dcl 10-5
max_signed_index_register_value        internal static fixed bin(31,0)          initial dcl 10-5
max_signed_xreg_precision              internal static fixed bin(31,0)          initial dcl 10-5
max_uns_xreg_precision                 internal static fixed bin(31,0)          initial dcl 10-5
max_words_per_variable                 internal static fixed bin(31,0)          initial dcl 10-5
merge_attributes                000000 constant        entry                    external dcl 1-355
min_area_size                          internal static fixed bin(31,0)          initial dcl 10-5
min_scale                              internal static fixed bin(31,0)          initial dcl 10-5
mod4_                                  internal static fixed bin(3,0)           initial dcl 7-5
optimizer                       000000 constant        entry                    external dcl 1-361
packed_digits_per_character            internal static fixed bin(31,0)          initial dcl 10-5
parse_error                     000000 constant        entry                    external dcl 1-364
parse_error$no_text             000000 constant        entry                    external dcl 1-368
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 1-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 1-372
pl1_print$for_lex               000000 constant        entry                    external dcl 1-418
pl1_print$non_varying           000000 constant        entry                    external dcl 1-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 1-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 1-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 1-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 1-414
pl1_print$varying               000000 constant        entry                    external dcl 1-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 1-395
pointer_type                           internal static bit(36)                  initial dcl 10-71
real_type                              internal static bit(36)                  initial dcl 10-71
refer_extent                    000000 constant        entry                    external dcl 1-426
reserve$clear                   000000 constant        entry                    external dcl 1-430
reserve$declare_lib             000000 constant        entry                    external dcl 1-434
reserve$read_lib                000000 constant        entry                    external dcl 1-439
semantic_translator             000000 constant        entry                    external dcl 1-444
semantic_translator$abort       000000 constant        entry                    external dcl 1-446
semantic_translator$error       000000 constant        entry                    external dcl 1-450
share_expression                000000 constant        entry                    external dcl 1-454
storage_block_type                     internal static bit(36)                  initial dcl 10-71
token_to_binary                 000000 constant        entry                    external dcl 1-459
word_                                  internal static fixed bin(3,0)           initial dcl 7-5
words_per_condition_var                internal static fixed bin(31,0)          initial dcl 10-5
words_per_entry_var                    internal static fixed bin(31,0)          initial dcl 10-5
words_per_file_var                     internal static fixed bin(31,0)          initial dcl 10-5
words_per_fix_bin_1                    internal static fixed bin(31,0)          initial dcl 10-5
words_per_fix_bin_2                    internal static fixed bin(31,0)          initial dcl 10-5
words_per_flt_bin_1                    internal static fixed bin(31,0)          initial dcl 10-5
words_per_flt_bin_2                    internal static fixed bin(31,0)          initial dcl 10-5
words_per_format                       internal static fixed bin(31,0)          initial dcl 10-5
words_per_label_var                    internal static fixed bin(31,0)          initial dcl 10-5
words_per_offset                       internal static fixed bin(31,0)          initial dcl 10-5
words_per_packed_pointer               internal static fixed bin(31,0)          initial dcl 10-5
words_per_pointer                      internal static fixed bin(31,0)          initial dcl 10-5
words_per_varying_string_header        internal static fixed bin(31,0)          initial dcl 10-5

NAME DECLARED BY EXPLICIT CONTEXT.
declare_pointer                 000016 constant        entry                    external dcl 16

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       122         134      65         132
Length       514      65        12         343      34           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
declare_pointer                      78 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
declare_pointer          000100 s                           declare_pointer

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return_mac          ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
create_symbol

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     16 000012        28 000023        30 000042        34 000051        35 000055        36 000057        38 000061


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
