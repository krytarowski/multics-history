	COMPILATION LISTING OF SEGMENT offset_to_pointer
	Compiled by: Multics PL/I Compiler, Release 31a, of October 12, 1988
	Compiled at: Honeywell Bull, Phoenix AZ, SysM
	Compiled on: 10/24/88  1527.5 mst Mon
	    Options: optimize map

        1 /* ******************************************************
        2*   *                                                    *
        3*   *                                                    *
        4*   * Copyright (c) 1972 by Massachusetts Institute of   *
        5*   * Technology and Honeywell Information Systems, Inc. *
        6*   *                                                    *
        7*   *                                                    *
        8*   ****************************************************** */
        9 
       10 /* procedure to convert an offset to a pointer using the area, if any,
       11*   on which the offset was declared
       12*
       13*   Initial Version: 22 January 1973 by BLW
       14*   Modified: 22 Feb       79 by JRDavis to do display steps right
       15**/
       16 
       17 offset_to_pointer: proc (block_pt, symbol_pt, data_pt, stack_pt, link_pt, text_pt) returns (ptr);
       18 
       19 	dcl     block_pt		 ptr,		/* ptr to block in which offset is declared */
       20 	        symbol_pt		 ptr,		/* ptr to runtime symbol node for offset variable */
       21 	        data_pt		 ptr,		/* ptr to actual offset variable storage */
       22 	        stack_pt		 ptr,		/* ptr to stack frame associated with offset */
       23 	        link_pt		 ptr,		/* ptr to linkage section */
       24 	        text_pt		 ptr;		/* ptr to object program */
       25 
       26 	dcl     p			 ptr,		/* to symbol_node of the offset */
       27 	        q			 ptr,		/*  to symbol_node for  area */
       28 	        sp		 ptr,		/* to stack frame for the area */
       29 	        bq		 ptr,		/* to block_node of the area */
       30 	        bp		 ptr,		/* to block_node of the offset */
       31 	        ap		 ptr,		/* to the area itself */
       32 	        (addrel, fixed, null, pointer) builtin,
       33 	        i			 fixed bin,
       34 	        stu_$get_display_steps entry (ptr, ptr) returns (fixed bin),
       35 	        stu_$block_dcld_in	 entry (ptr) returns (ptr),
       36 	        stu_$get_runtime_address entry (ptr, ptr, ptr, ptr, ptr, ptr, ptr) returns (ptr);
       37 	dcl     area		 area based,
       38 	        offset		 offset unaligned based;
       39 
       40 
       41 	p = symbol_pt;
       42 	if p = null then return (null);
       43 
       44 /* get ptr to symbol node of area, if any */
       45 
       46 	if p -> runtime_symbol.size = 0 then return (null);
       47 
       48 	q = addrel (p, p -> runtime_symbol.size);
       49 
       50 	if fixed (q -> runtime_symbol.type, 6) ^= area_dtype then return (null);
       51 
       52 	bq = stu_$block_dcld_in (q);
       53 	sp = stack_pt;
       54 	bp = block_pt;
       55 	do i = 1 to stu_$get_display_steps (bp, bq);
       56 	     if sp ^= null then sp = sp -> frame.display;
       57 	end;
       58 
       59 
       60 /* get address of area and perform conversion */
       61 
       62 	ap = stu_$get_runtime_address (bq, q, sp, link_pt, text_pt, null, null);
       63 
       64 	if ap = null then return (null);
       65 
       66 	return (pointer (data_pt -> offset, ap -> area));
       67 
  1     1 /*	BEGIN INCLUDE FILE ... runtime_symbol.incl.pl1 ... Modified 07/79 */
  1     2 
  1     3 dcl	1 runtime_symbol	aligned based,
  1     4 	2 flag		unal bit(1),	/* always "1"b for Version II */
  1     5 	2 use_digit	unal bit(1),	/* if "1"b and units are half words units are really digits */
  1     6 	2 array_units	unal bit(2),
  1     7 	2 units		unal bit(2),	/* addressing units */
  1     8 	2 type		unal bit(6),	/* data type */
  1     9 	2 level		unal bit(6),	/* structure level */
  1    10 	2 ndims		unal bit(6),	/* number of dimensions */
  1    11 	2 bits		unal,
  1    12 	  3 aligned	bit(1),
  1    13 	  3 packed	bit(1),
  1    14 	  3 simple	bit(1),
  1    15 	2 skip		unal bit(1),
  1    16 	2 scale		unal bit(8),	/* arithmetic scale factor */
  1    17 	2 name		unal bit(18),	/* rel ptr to acc name */
  1    18 	2 brother		unal bit(18),	/* rel ptr to brother entry */
  1    19 	2 father		unal bit(18),	/* rel ptr to father entry */
  1    20 	2 son		unal bit(18),	/* rel ptr to son entry */
  1    21 	2 address		unal,
  1    22 	  3 location	bit(18),		/* location in storage class */
  1    23 	  3 class		bit(4),		/* storage class */
  1    24 	  3 next		bit(14),		/* rel ptr to next of same class */
  1    25 	2 size		fixed bin(35),	/* encoded string|arith size */
  1    26 	2 offset		fixed bin(35),	/* encoded offset from address */
  1    27 	2 virtual_org	fixed bin(35),
  1    28 	2 bounds(1),
  1    29 	  3 lower		fixed bin(35),	/* encoded lower bound */
  1    30 	  3 upper		fixed bin(35),	/* encoded upper bound */
  1    31 	  3 multiplier	fixed bin(35);	/* encoded multiplier */
  1    32 
  1    33 dcl	1 runtime_bound	based,
  1    34 	2 lower		fixed bin(35),
  1    35 	2 upper		fixed bin(35),
  1    36 	2 multiplier	fixed bin(35);
  1    37 
  1    38 dcl	1 runtime_block	aligned based,
  1    39 	2 flag		unal bit(1),	/* always "1"b for Version II */
  1    40 	2 quick		unal bit(1),	/* "1"b if quick block */
  1    41 	2 fortran		unal bit(1),	/* "1"b if fortran program */
  1    42 	2 standard	unal bit(1),	/* "1"b if program has std obj segment */
  1    43 	2 owner_flag	unal bit(1),	/* "1"b if block has valid owner field */
  1    44 	2 skip		unal bit(1),
  1    45 	2 type		unal bit(6),	/* = 0 for a block node */
  1    46 	2 number		unal bit(6),	/* begin block number */
  1    47 	2 start		unal bit(18),	/* rel ptr to start of symbols */
  1    48 	2 name		unal bit(18),	/* rel ptr to name of proc */
  1    49 	2 brother		unal bit(18),	/* rel ptr to brother block */
  1    50 	2 father		unal bit(18),	/* rel ptr to father block */
  1    51 	2 son		unal bit(18),	/* rel ptr to son block */
  1    52 	2 map		unal,
  1    53 	  3 first		bit(18),		/* rel ptr to first word of map */
  1    54 	  3 last		bit(18),		/* rel ptr to last word of map */
  1    55 	2 entry_info	unal bit(18),	/* info about entry of quick block */
  1    56 	2 header		unal bit(18),	/* rel ptr to symbol header */
  1    57 	2 chain(4)	unal bit(18),	/* chain(i) is rel ptr to first symbol
  1    58*					   on start list with length >= 2**i */
  1    59 	2 token(0:5)	unal bit(18),	/* token(i) is rel ptr to first token
  1    60*					   on list with length >= 2 ** i */
  1    61 	2 owner		unal bit(18);	/* rel ptr to owner block */
  1    62 
  1    63 dcl	1 runtime_token	aligned based,
  1    64 	2 next		unal bit(18),	/* rel ptr to next token */
  1    65 	2 dcl		unal bit(18),	/* rel ptr to first dcl of this token */
  1    66 	2 name,				/* ACC */
  1    67 	  3 size		unal unsigned fixed bin (9), /* number of chars in token */
  1    68 	  3 string	unal char(n refer(runtime_token.size));
  1    69 
  1    70 dcl	1 encoded_value	aligned based,
  1    71 	2 flag		bit (2) unal,
  1    72 	2 code		bit (4) unal,
  1    73 	2 n1		bit (6) unal,
  1    74 	2 n2		bit (6) unal,
  1    75 	2 n3		bit (18) unal;
  1    76 
  1    77 /*	END INCLUDE FILE ... runtime_symbol.incl.pl1 */
       68 
       69 
  2     1 dcl	1 frame		aligned based,
  2     2 	2 pointers(0:7)	ptr,
  2     3 	2 back		ptr,
  2     4 	2 next		ptr,
  2     5 	2 return		ptr,
  2     6 	2 entry		ptr,
  2     7 	2 operator	ptr,
  2     8 	2 argptr		ptr,
  2     9 	2 skip1(2)	fixed bin,
  2    10 	2 on_unit_info(2)	bit(18) unaligned,
  2    11 	2 translator_id	bit(18) unaligned,
  2    12 	2 operator_return	bit(18) unaligned,
  2    13 	2 display		ptr,
  2    14 	2 skip2(2)	fixed bin,
  2    15 	2 linkage		ptr;
       70 
       71 
  3     1 /* BEGIN INCLUDE FILE ... std_descriptor_types.incl.pl1 */
  3     2 
  3     3 
  3     4 /****^  HISTORY COMMENTS:
  3     5*  1) change(86-09-05,JMAthane), approve(86-09-05,MCR7525),
  3     6*     audit(86-09-11,Martinson), install(86-11-12,MR12.0-1208):
  3     7*     Added pascal_string_type_dtype descriptor type.  Its number is 87.
  3     8*     Objects of this type are PASCAL string types.
  3     9*  2) change(88-09-20,WAAnderson), approve(88-09-20,MCR7952),
  3    10*     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
  3    11*     Added the new C types.
  3    12*                                                   END HISTORY COMMENTS */
  3    13 
  3    14 /* This include file defines mnemonic names for the Multics
  3    15*   standard descriptor types, using both pl1 and cobol terminology.
  3    16*   PG 780613
  3    17*   JRD 790530
  3    18*   JRD 791016
  3    19*   MBW 810731
  3    20*   TGO 830614 Add hex types.
  3    21*   Modified June 83 JMAthane to add PASCAL data types
  3    22*   TGO 840120 Add float dec extended and generic, float binary generic
  3    23**/
  3    24 
  3    25      dcl	   (real_fix_bin_1_dtype  init (1),
  3    26 	   real_fix_bin_2_dtype   init (2),
  3    27 	   real_flt_bin_1_dtype   init (3),
  3    28 	   real_flt_bin_2_dtype   init (4),
  3    29 	   cplx_fix_bin_1_dtype   init (5),
  3    30 	   cplx_fix_bin_2_dtype   init (6),
  3    31 	   cplx_flt_bin_1_dtype   init (7),
  3    32 	   cplx_flt_bin_2_dtype   init (8),
  3    33 	   real_fix_dec_9bit_ls_dtype init (9),
  3    34 	   real_flt_dec_9bit_dtype init (10),
  3    35 	   cplx_fix_dec_9bit_ls_dtype init (11),
  3    36 	   cplx_flt_dec_9bit_dtype init (12),
  3    37 	   pointer_dtype	      init (13),
  3    38 	   offset_dtype	      init (14),
  3    39 	   label_dtype	      init (15),
  3    40 	   entry_dtype	      init (16),
  3    41 	   structure_dtype	      init (17),
  3    42 	   area_dtype	      init (18),
  3    43 	   bit_dtype	      init (19),
  3    44 	   varying_bit_dtype      init (20),
  3    45 	   char_dtype	      init (21),
  3    46 	   varying_char_dtype     init (22),
  3    47 	   file_dtype	      init (23),
  3    48 	   real_fix_dec_9bit_ls_overp_dtype init (29),
  3    49 	   real_fix_dec_9bit_ts_overp_dtype init (30),
  3    50 	   real_fix_bin_1_uns_dtype init (33),
  3    51 	   real_fix_bin_2_uns_dtype init (34),
  3    52 	   real_fix_dec_9bit_uns_dtype init (35),
  3    53 	   real_fix_dec_9bit_ts_dtype init (36),
  3    54 	   real_fix_dec_4bit_uns_dtype init (38),	/* digit-aligned */
  3    55 	   real_fix_dec_4bit_ts_dtype init (39),	/* byte-aligned */
  3    56 	   real_fix_dec_4bit_bytealigned_uns_dtype init (40), /* COBOL */
  3    57 	   real_fix_dec_4bit_ls_dtype init (41),	/* digit-aligned */
  3    58 	   real_flt_dec_4bit_dtype init (42),		/* digit-aligned */
  3    59 	   real_fix_dec_4bit_bytealigned_ls_dtype init (43),
  3    60 	   real_flt_dec_4bit_bytealigned_dtype init (44),
  3    61 	   cplx_fix_dec_4bit_bytealigned_ls_dtype init (45),
  3    62 	   cplx_flt_dec_4bit_bytealigned_dtype init (46),
  3    63 	   real_flt_hex_1_dtype   init (47),
  3    64 	   real_flt_hex_2_dtype   init (48),
  3    65 	   cplx_flt_hex_1_dtype   init (49),
  3    66 	   cplx_flt_hex_2_dtype   init (50),
  3    67 	   c_typeref_dtype        init (54),
  3    68 	   c_enum_dtype           init (55),
  3    69              c_enum_const_dtype     init (56),
  3    70 	   c_union_dtype          init (57),
  3    71 	   algol68_straight_dtype init (59),
  3    72 	   algol68_format_dtype   init (60),
  3    73 	   algol68_array_descriptor_dtype init (61),
  3    74 	   algol68_union_dtype    init (62),
  3    75 
  3    76 	   cobol_comp_6_dtype     init (1),
  3    77 	   cobol_comp_7_dtype     init (1),
  3    78 	   cobol_display_ls_dtype init (9),
  3    79 	   cobol_structure_dtype  init (17),
  3    80 	   cobol_char_string_dtype init (21),
  3    81 	   cobol_display_ls_overp_dtype init (29),
  3    82 	   cobol_display_ts_overp_dtype init (30),
  3    83 	   cobol_display_uns_dtype init (35),
  3    84 	   cobol_display_ts_dtype init (36),
  3    85 	   cobol_comp_8_uns_dtype init (38),		/* digit aligned */
  3    86 	   cobol_comp_5_ts_dtype  init (39),		/* byte aligned */
  3    87 	   cobol_comp_5_uns_dtype init (40),
  3    88 	   cobol_comp_8_ls_dtype  init (41),		/* digit aligned */
  3    89 	   real_flt_dec_extended_dtype init (81),	/* 9-bit exponent */
  3    90 	   cplx_flt_dec_extended_dtype init (82),	/* 9-bit exponent */
  3    91 	   real_flt_dec_generic_dtype init (83),	/* generic float decimal */
  3    92 	   cplx_flt_dec_generic_dtype init (84),
  3    93 	   real_flt_bin_generic_dtype init (85),	/* generic float binary */
  3    94 	   cplx_flt_bin_generic_dtype init (86)) fixed bin internal static options (constant);
  3    95 
  3    96      dcl	   (ft_integer_dtype      init (1),
  3    97 	   ft_real_dtype	      init (3),
  3    98 	   ft_double_dtype	      init (4),
  3    99 	   ft_complex_dtype	      init (7),
  3   100 	   ft_complex_double_dtype init (8),
  3   101 	   ft_external_dtype      init (16),
  3   102 	   ft_logical_dtype	      init (19),
  3   103 	   ft_char_dtype	      init (21),
  3   104 	   ft_hex_real_dtype      init (47),
  3   105 	   ft_hex_double_dtype    init (48),
  3   106 	   ft_hex_complex_dtype   init (49),
  3   107 	   ft_hex_complex_double_dtype init (50)
  3   108 	   )		      fixed bin internal static options (constant);
  3   109 
  3   110      dcl	   (algol68_short_int_dtype init (1),
  3   111 	   algol68_int_dtype      init (1),
  3   112 	   algol68_long_int_dtype init (2),
  3   113 	   algol68_real_dtype     init (3),
  3   114 	   algol68_long_real_dtype init (4),
  3   115 	   algol68_compl_dtype    init (7),
  3   116 	   algol68_long_compl_dtype init (8),
  3   117 	   algol68_bits_dtype     init (19),
  3   118 	   algol68_bool_dtype     init (19),
  3   119 	   algol68_char_dtype     init (21),
  3   120 	   algol68_byte_dtype     init (21),
  3   121 	   algol68_struct_struct_char_dtype init (22),
  3   122 	   algol68_struct_struct_bool_dtype init (20)
  3   123 	   )		      fixed bin internal static options (constant);
  3   124 
  3   125      dcl	   (label_constant_runtime_dtype init (24),
  3   126 	   int_entry_runtime_dtype init (25),
  3   127 	   ext_entry_runtime_dtype init (26),
  3   128 	   ext_procedure_runtime_dtype init (27),
  3   129 	   picture_runtime_dtype  init (63)
  3   130 	   )		      fixed bin internal static options (constant);
  3   131 
  3   132      dcl	   (pascal_integer_dtype  init (1),
  3   133 	   pascal_real_dtype      init (4),
  3   134 	   pascal_label_dtype     init (24),
  3   135 	   pascal_internal_procedure_dtype init (25),
  3   136 	   pascal_exportable_procedure_dtype init (26),
  3   137 	   pascal_imported_procedure_dtype init (27),
  3   138 	   pascal_typed_pointer_type_dtype init (64),
  3   139 	   pascal_char_dtype      init (65),
  3   140 	   pascal_boolean_dtype   init (66),
  3   141 	   pascal_record_file_type_dtype init (67),
  3   142 	   pascal_record_type_dtype init (68),
  3   143 	   pascal_set_dtype	      init (69),
  3   144 	   pascal_enumerated_type_dtype init (70),
  3   145 	   pascal_enumerated_type_element_dtype init (71),
  3   146 	   pascal_enumerated_type_instance_dtype init (72),
  3   147 	   pascal_user_defined_type_dtype init (73),
  3   148 	   pascal_user_defined_type_instance_dtype init (74),
  3   149 	   pascal_text_file_dtype init (75),
  3   150 	   pascal_procedure_type_dtype init (76),
  3   151 	   pascal_variable_formal_parameter_dtype init (77),
  3   152 	   pascal_value_formal_parameter_dtype init (78),
  3   153 	   pascal_entry_formal_parameter_dtype init (79),
  3   154 	   pascal_parameter_procedure_dtype init (80),
  3   155 	   pascal_string_type_dtype init (87)) fixed bin int static options (constant);
  3   156 
  3   157 
  3   158 /* END INCLUDE FILE ... std_descriptor_types.incl.pl1 */
       72 
       73 
       74      end;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/24/88  1400.3  offset_to_pointer.pl1             >special_ldd>install>MR12.2-1184>offset_to_pointer.pl1
68           1    11/26/79  1320.6  runtime_symbol.incl.pl1           >ldd>include>runtime_symbol.incl.pl1
70           2    05/06/74  1752.6  stu_frame.incl.pl1                >ldd>include>stu_frame.incl.pl1
72           3    10/24/88  1336.9  std_descriptor_types.incl.pl1     >special_ldd>install>MR12.2-1184>std_descriptor_types.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
addrel                                                 builtin function         dcl 26 ref 48
ap                              000112 automatic       pointer                  dcl 26 set ref 62* 64 66
area                                   based           area(1024)               dcl 37 ref 66
area_dtype                             constant        fixed bin(17,0)          initial dcl 3-25 ref 50
block_pt                               parameter       pointer                  dcl 19 ref 17 54
bp                              000110 automatic       pointer                  dcl 26 set ref 54* 55*
bq                              000106 automatic       pointer                  dcl 26 set ref 52* 55* 62*
data_pt                                parameter       pointer                  dcl 19 ref 17 66
display                  40            based           pointer                  level 2 dcl 2-1 ref 56
fixed                                                  builtin function         dcl 26 ref 50
frame                                  based           structure                level 1 dcl 2-1
i                               000114 automatic       fixed bin(17,0)          dcl 26 set ref 55*
link_pt                                parameter       pointer                  dcl 19 set ref 17 62*
null                                                   builtin function         dcl 26 ref 42 42 46 50 56 62 62 62 62 64 64
offset                                 based           offset                   unaligned dcl 37 ref 66
p                               000100 automatic       pointer                  dcl 26 set ref 41* 42 46 48 48
pointer                                                builtin function         dcl 26 ref 66
q                               000102 automatic       pointer                  dcl 26 set ref 48* 50 52* 62*
runtime_symbol                         based           structure                level 1 dcl 1-3
size                      4            based           fixed bin(35,0)          level 2 dcl 1-3 ref 46 48
sp                              000104 automatic       pointer                  dcl 26 set ref 53* 56 56* 56 62*
stack_pt                               parameter       pointer                  dcl 19 ref 17 53
stu_$block_dcld_in              000012 constant        entry                    external dcl 26 ref 52
stu_$get_display_steps          000010 constant        entry                    external dcl 26 ref 55
stu_$get_runtime_address        000014 constant        entry                    external dcl 26 ref 62
symbol_pt                              parameter       pointer                  dcl 19 ref 17 41
text_pt                                parameter       pointer                  dcl 19 set ref 17 62*
type                      0(06)        based           bit(6)                   level 2 packed packed unaligned dcl 1-3 ref 50

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
algol68_array_descriptor_dtype         internal static fixed bin(17,0)          initial dcl 3-25
algol68_bits_dtype                     internal static fixed bin(17,0)          initial dcl 3-110
algol68_bool_dtype                     internal static fixed bin(17,0)          initial dcl 3-110
algol68_byte_dtype                     internal static fixed bin(17,0)          initial dcl 3-110
algol68_char_dtype                     internal static fixed bin(17,0)          initial dcl 3-110
algol68_compl_dtype                    internal static fixed bin(17,0)          initial dcl 3-110
algol68_format_dtype                   internal static fixed bin(17,0)          initial dcl 3-25
algol68_int_dtype                      internal static fixed bin(17,0)          initial dcl 3-110
algol68_long_compl_dtype               internal static fixed bin(17,0)          initial dcl 3-110
algol68_long_int_dtype                 internal static fixed bin(17,0)          initial dcl 3-110
algol68_long_real_dtype                internal static fixed bin(17,0)          initial dcl 3-110
algol68_real_dtype                     internal static fixed bin(17,0)          initial dcl 3-110
algol68_short_int_dtype                internal static fixed bin(17,0)          initial dcl 3-110
algol68_straight_dtype                 internal static fixed bin(17,0)          initial dcl 3-25
algol68_struct_struct_bool_dtype       internal static fixed bin(17,0)          initial dcl 3-110
algol68_struct_struct_char_dtype       internal static fixed bin(17,0)          initial dcl 3-110
algol68_union_dtype                    internal static fixed bin(17,0)          initial dcl 3-25
bit_dtype                              internal static fixed bin(17,0)          initial dcl 3-25
c_enum_const_dtype                     internal static fixed bin(17,0)          initial dcl 3-25
c_enum_dtype                           internal static fixed bin(17,0)          initial dcl 3-25
c_typeref_dtype                        internal static fixed bin(17,0)          initial dcl 3-25
c_union_dtype                          internal static fixed bin(17,0)          initial dcl 3-25
char_dtype                             internal static fixed bin(17,0)          initial dcl 3-25
cobol_char_string_dtype                internal static fixed bin(17,0)          initial dcl 3-25
cobol_comp_5_ts_dtype                  internal static fixed bin(17,0)          initial dcl 3-25
cobol_comp_5_uns_dtype                 internal static fixed bin(17,0)          initial dcl 3-25
cobol_comp_6_dtype                     internal static fixed bin(17,0)          initial dcl 3-25
cobol_comp_7_dtype                     internal static fixed bin(17,0)          initial dcl 3-25
cobol_comp_8_ls_dtype                  internal static fixed bin(17,0)          initial dcl 3-25
cobol_comp_8_uns_dtype                 internal static fixed bin(17,0)          initial dcl 3-25
cobol_display_ls_dtype                 internal static fixed bin(17,0)          initial dcl 3-25
cobol_display_ls_overp_dtype           internal static fixed bin(17,0)          initial dcl 3-25
cobol_display_ts_dtype                 internal static fixed bin(17,0)          initial dcl 3-25
cobol_display_ts_overp_dtype           internal static fixed bin(17,0)          initial dcl 3-25
cobol_display_uns_dtype                internal static fixed bin(17,0)          initial dcl 3-25
cobol_structure_dtype                  internal static fixed bin(17,0)          initial dcl 3-25
cplx_fix_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 3-25
cplx_fix_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 3-25
cplx_fix_dec_4bit_bytealigned_ls_dtype internal static fixed bin(17,0)          initial dcl 3-25
cplx_fix_dec_9bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 3-25
cplx_flt_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 3-25
cplx_flt_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 3-25
cplx_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 3-25
cplx_flt_dec_4bit_bytealigned_dtype    internal static fixed bin(17,0)          initial dcl 3-25
cplx_flt_dec_9bit_dtype                internal static fixed bin(17,0)          initial dcl 3-25
cplx_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 3-25
cplx_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 3-25
cplx_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 3-25
cplx_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 3-25
encoded_value                          based           structure                level 1 dcl 1-70
entry_dtype                            internal static fixed bin(17,0)          initial dcl 3-25
ext_entry_runtime_dtype                internal static fixed bin(17,0)          initial dcl 3-125
ext_procedure_runtime_dtype            internal static fixed bin(17,0)          initial dcl 3-125
file_dtype                             internal static fixed bin(17,0)          initial dcl 3-25
ft_char_dtype                          internal static fixed bin(17,0)          initial dcl 3-96
ft_complex_double_dtype                internal static fixed bin(17,0)          initial dcl 3-96
ft_complex_dtype                       internal static fixed bin(17,0)          initial dcl 3-96
ft_double_dtype                        internal static fixed bin(17,0)          initial dcl 3-96
ft_external_dtype                      internal static fixed bin(17,0)          initial dcl 3-96
ft_hex_complex_double_dtype            internal static fixed bin(17,0)          initial dcl 3-96
ft_hex_complex_dtype                   internal static fixed bin(17,0)          initial dcl 3-96
ft_hex_double_dtype                    internal static fixed bin(17,0)          initial dcl 3-96
ft_hex_real_dtype                      internal static fixed bin(17,0)          initial dcl 3-96
ft_integer_dtype                       internal static fixed bin(17,0)          initial dcl 3-96
ft_logical_dtype                       internal static fixed bin(17,0)          initial dcl 3-96
ft_real_dtype                          internal static fixed bin(17,0)          initial dcl 3-96
int_entry_runtime_dtype                internal static fixed bin(17,0)          initial dcl 3-125
label_constant_runtime_dtype           internal static fixed bin(17,0)          initial dcl 3-125
label_dtype                            internal static fixed bin(17,0)          initial dcl 3-25
offset_dtype                           internal static fixed bin(17,0)          initial dcl 3-25
pascal_boolean_dtype                   internal static fixed bin(17,0)          initial dcl 3-132
pascal_char_dtype                      internal static fixed bin(17,0)          initial dcl 3-132
pascal_entry_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 3-132
pascal_enumerated_type_dtype           internal static fixed bin(17,0)          initial dcl 3-132
pascal_enumerated_type_element_dtype   internal static fixed bin(17,0)          initial dcl 3-132
pascal_enumerated_type_instance_dtype  internal static fixed bin(17,0)          initial dcl 3-132
pascal_exportable_procedure_dtype      internal static fixed bin(17,0)          initial dcl 3-132
pascal_imported_procedure_dtype        internal static fixed bin(17,0)          initial dcl 3-132
pascal_integer_dtype                   internal static fixed bin(17,0)          initial dcl 3-132
pascal_internal_procedure_dtype        internal static fixed bin(17,0)          initial dcl 3-132
pascal_label_dtype                     internal static fixed bin(17,0)          initial dcl 3-132
pascal_parameter_procedure_dtype       internal static fixed bin(17,0)          initial dcl 3-132
pascal_procedure_type_dtype            internal static fixed bin(17,0)          initial dcl 3-132
pascal_real_dtype                      internal static fixed bin(17,0)          initial dcl 3-132
pascal_record_file_type_dtype          internal static fixed bin(17,0)          initial dcl 3-132
pascal_record_type_dtype               internal static fixed bin(17,0)          initial dcl 3-132
pascal_set_dtype                       internal static fixed bin(17,0)          initial dcl 3-132
pascal_string_type_dtype               internal static fixed bin(17,0)          initial dcl 3-132
pascal_text_file_dtype                 internal static fixed bin(17,0)          initial dcl 3-132
pascal_typed_pointer_type_dtype        internal static fixed bin(17,0)          initial dcl 3-132
pascal_user_defined_type_dtype         internal static fixed bin(17,0)          initial dcl 3-132
pascal_user_defined_type_instance_dtype
                                       internal static fixed bin(17,0)          initial dcl 3-132
pascal_value_formal_parameter_dtype    internal static fixed bin(17,0)          initial dcl 3-132
pascal_variable_formal_parameter_dtype internal static fixed bin(17,0)          initial dcl 3-132
picture_runtime_dtype                  internal static fixed bin(17,0)          initial dcl 3-125
pointer_dtype                          internal static fixed bin(17,0)          initial dcl 3-25
real_fix_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 3-25
real_fix_bin_1_uns_dtype               internal static fixed bin(17,0)          initial dcl 3-25
real_fix_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 3-25
real_fix_bin_2_uns_dtype               internal static fixed bin(17,0)          initial dcl 3-25
real_fix_dec_4bit_bytealigned_ls_dtype internal static fixed bin(17,0)          initial dcl 3-25
real_fix_dec_4bit_bytealigned_uns_dtype
                                       internal static fixed bin(17,0)          initial dcl 3-25
real_fix_dec_4bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 3-25
real_fix_dec_4bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 3-25
real_fix_dec_4bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 3-25
real_fix_dec_9bit_ls_dtype             internal static fixed bin(17,0)          initial dcl 3-25
real_fix_dec_9bit_ls_overp_dtype       internal static fixed bin(17,0)          initial dcl 3-25
real_fix_dec_9bit_ts_dtype             internal static fixed bin(17,0)          initial dcl 3-25
real_fix_dec_9bit_ts_overp_dtype       internal static fixed bin(17,0)          initial dcl 3-25
real_fix_dec_9bit_uns_dtype            internal static fixed bin(17,0)          initial dcl 3-25
real_flt_bin_1_dtype                   internal static fixed bin(17,0)          initial dcl 3-25
real_flt_bin_2_dtype                   internal static fixed bin(17,0)          initial dcl 3-25
real_flt_bin_generic_dtype             internal static fixed bin(17,0)          initial dcl 3-25
real_flt_dec_4bit_bytealigned_dtype    internal static fixed bin(17,0)          initial dcl 3-25
real_flt_dec_4bit_dtype                internal static fixed bin(17,0)          initial dcl 3-25
real_flt_dec_9bit_dtype                internal static fixed bin(17,0)          initial dcl 3-25
real_flt_dec_extended_dtype            internal static fixed bin(17,0)          initial dcl 3-25
real_flt_dec_generic_dtype             internal static fixed bin(17,0)          initial dcl 3-25
real_flt_hex_1_dtype                   internal static fixed bin(17,0)          initial dcl 3-25
real_flt_hex_2_dtype                   internal static fixed bin(17,0)          initial dcl 3-25
runtime_block                          based           structure                level 1 dcl 1-38
runtime_bound                          based           structure                level 1 unaligned dcl 1-33
runtime_token                          based           structure                level 1 dcl 1-63
structure_dtype                        internal static fixed bin(17,0)          initial dcl 3-25
varying_bit_dtype                      internal static fixed bin(17,0)          initial dcl 3-25
varying_char_dtype                     internal static fixed bin(17,0)          initial dcl 3-25

NAME DECLARED BY EXPLICIT CONTEXT.
offset_to_pointer               000012 constant        entry                    external dcl 17

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       252         270     172         262
Length       522     172        16         215      57           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
offset_to_pointer                   114 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
offset_to_pointer        000100 p                           offset_to_pointer
                         000102 q                           offset_to_pointer
                         000104 sp                          offset_to_pointer
                         000106 bq                          offset_to_pointer
                         000110 bp                          offset_to_pointer
                         000112 ap                          offset_to_pointer
                         000114 i                           offset_to_pointer

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return_mac          ext_entry           pointer_hard

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
stu_$block_dcld_in            stu_$get_display_steps        stu_$get_runtime_address

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     17 000004        41 000017        42 000023        46 000032        48 000037        50 000042        52 000052
     53 000062        54 000066        55 000071        56 000111        57 000120        62 000122        64 000153
     66 000163


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
