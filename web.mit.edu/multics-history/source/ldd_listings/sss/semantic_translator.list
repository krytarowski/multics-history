	COMPILATION LISTING OF SEGMENT semantic_translator
	Compiled by: Multics PL/I Compiler, Release 33e, of October 6, 1992
	Compiled at: CGI                             
	Compiled on: 2000-04-18_1145.56_Tue_mdt
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 
       14 
       15 /****^  HISTORY COMMENTS:
       16*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
       17*     install(89-07-31,MR12.3-1066):
       18*     Removed the obsolete parameter source_line from the call to error_().
       19*                                                   END HISTORY COMMENTS */
       20 
       21 
       22 /* format: style3,^indattr,ifthendo,ifthen,^indnoniterdo,indproc,^elsestmt,dclind9,idind23 */
       23 semantic_translator:
       24      proc;
       25 
       26 /* 	Modified: 770630 by PG to fix 1609 (incorrect use of auto & defined in prologue) 
       27*	Modified: 15 Feb 1978 by PCK to implement options(main) and the stop statement
       28*	Modified:	20 Mar 1978 by RAB to fix bug in setting goto_bit introduced in 78.02.15 change
       29*	Modified: 30 Nov 1978 by DS to suppress redundant label and entry cross-references
       30*	Modified: 30 Aug 1979 by PCK to fix 1804 and 1823
       31*          Modified: 10 Jul 1989 by RW removed obsolete parameter in the call to error_()
       32**/
       33 
       34 dcl      (b, d, sym, t, tk) ptr;
       35 
       36 dcl      pl1_stat_$debug_semant bit (1) aligned ext static,
       37          pl1_stat_$stmnt_unreachable bit (1) aligned ext static,
       38          pl1_stat_$index fixed bin (15) ext static,
       39          pl1_stat_$last_severity fixed bin (15) ext static,
       40          pl1_stat_$error_flag bit (1) aligned ext static,
       41          pl1_stat_$multi_type bit (1) aligned ext static;
       42 
       43 dcl      pl1_stat_$LHS ptr ext static;
       44 dcl      pl1_stat_$cur_block ptr ext static;
       45 dcl      pl1_stat_$cur_statement ptr ext static;
       46 dcl      pl1_stat_$root ptr ext static;
       47 dcl      pl1_stat_$abort_label label ext static;
       48 
       49 dcl      (
       50          pl1_stat_$util_abort,
       51          pl1_stat_$util_error
       52          ) variable static ext entry;
       53 
       54 dcl      1 pl1_stat_$statement_id ext static,
       55 	 2 file_number bit (8),
       56 	 2 line_number bit (14),
       57 	 2 statement_number bit (5);
       58 
       59 dcl      pl1_stat_$stop_id bit (27) ext static;
       60 
       61 dcl      pl1_stat_$st_start fixed bin (23) ext static,
       62          pl1_stat_$st_length fixed bin (11) ext static,
       63          pl1_stat_$profile_length fixed bin (31) ext static;
       64 
       65 dcl      (i, j, k, m, n) fixed bin (15);
       66 dcl      changed bit (1);
       67 dcl      goto_bit bit (1) aligned;
       68 dcl      abort label int static;
       69 dcl      had_error bit (1) int static;
       70 
       71 dcl      (addr, null, substr, string) builtin;
       72 
       73 dcl      real_quick_info (pl1_stat_$node_uses (1)) bit (pl1_stat_$node_uses (1)) aligned,
       74          block_array (pl1_stat_$node_uses (1)) ptr;
       75 
       76 dcl      ioa_ entry options (variable);
       77 dcl      debug entry ();
       78 
       79 /* set up abort and error entries for utility section */
       80 
       81 	pl1_stat_$util_abort = semantic_translator$abort;
       82 	pl1_stat_$util_error = semantic_translator$error;
       83 
       84 	pl1_stat_$quick_pt = addr (real_quick_info);
       85 
       86 	do i = 1 to pl1_stat_$node_uses (1);
       87 	     quick_info (i) = "0"b;
       88 	end;
       89 
       90 	context = "0"b;
       91 	b = pl1_stat_$root;
       92 	pl1_stat_$st_start, pl1_stat_$st_length = 0;
       93 	string (pl1_stat_$statement_id) = "0"b;
       94 
       95 	call context_processor (pl1_stat_$root, abort);
       96 
       97 scan:
       98 	pl1_stat_$cur_block = b;
       99 	block_array (b -> block.number) = b;
      100 
      101 /* if this is a begin block, we have to create a "call" of the begin block
      102*	   from the parent block so our quick procedure algorithm will work */
      103 
      104 	if b -> block_type = begin_block then
      105 	     substr (quick_info (b -> block.number), b -> block.father -> block.number, 1) = "1"b;
      106 
      107 	d = b -> block.declaration;
      108 	abort = next_dcl;
      109 
      110 	do while (d ^= null);
      111 	     pl1_stat_$cur_statement = d;
      112 	     string (pl1_stat_$statement_id) = string (d -> symbol.source_id);
      113 
      114 	     call declare (d);
      115 next_dcl:
      116 	     d = pl1_stat_$cur_statement -> symbol.next;
      117 	end;
      118 
      119 /* process the prologue and main statement lists.  */
      120 
      121 	goto_bit = "0"b;
      122 	abort = next_stmnt;
      123 
      124 	do d = b -> block.main, b -> block.prologue;
      125 	     do while (d ^= null);
      126 		pl1_stat_$cur_statement = d;
      127 
      128 		d -> statement.free_temps =
      129 		     string (pl1_stat_$statement_id) ^= string (d -> statement.source_id)
      130 		     & string (d -> statement.source_id) ^= "0"b;
      131 
      132 		if d -> statement.free_temps then do;
      133 		     d -> statement.put_in_profile = "1"b;
      134 		     pl1_stat_$profile_length = pl1_stat_$profile_length + 1;
      135 		end;
      136 
      137 		if d -> statement.processed then
      138 		     goto next_stmnt;
      139 
      140 		pl1_stat_$LHS = null;
      141 		string (pl1_stat_$statement_id) = string (d -> statement.source_id);
      142 
      143 		call process_label (d);
      144 
      145 		if pl1_stat_$debug_semant then
      146 		     if string (pl1_stat_$statement_id) = pl1_stat_$stop_id then do;
      147 			call ioa_ ("DB for stop-at:");
      148 			call debug;
      149 		     end;
      150 
      151 		def_context.top = "1"b;
      152 
      153 /* We do not want to update the statement passed as the argument */
      154 		d -> statement.root = expression_semantics (b, (d), (d -> statement.root), context);
      155 next_stmnt:
      156 		d = pl1_stat_$cur_statement -> statement.next;
      157 	     end;
      158 
      159 	     b -> block.prologue_flag = "1"b;		/* let world know we are semant'ing prologue */
      160 	end;
      161 
      162 	b -> block.prologue_flag = "0"b;		/* now we are done */
      163 	context = "0"b;
      164 
      165 next_block:
      166 	if b -> block.son ^= null then do;
      167 	     b = b -> block.son;
      168 	     goto scan;
      169 	end;
      170 
      171 ck_brother:
      172 	if b -> block.brother ^= null then do;
      173 	     b = b -> block.brother;
      174 	     goto scan;
      175 	end;
      176 
      177 	if b -> block.father ^= null then do;
      178 	     b = b -> block.father;
      179 	     goto ck_brother;
      180 	end;
      181 
      182 /* at this point we have processed all blocks in the program, now
      183*	   determine which blocks can be quick.  substr(quick_info(i),j,1)
      184*	    will be "1"b if block "i" is called from block "j"	*/
      185 
      186 loop:
      187 	changed = "0"b;
      188 
      189 	do i = 1 to pl1_stat_$node_uses (1);
      190 	     b = block_array (i);
      191 	     if ^b -> block.no_stack then
      192 		goto next;
      193 	     if b -> block.owner ^= null then
      194 		goto next;
      195 
      196 /* determine if block is called */
      197 
      198 	     j = index (quick_info (i), "1"b);
      199 	     if j = 0 then
      200 		goto next;
      201 
      202 /* If block "i" calls itself recursively, it can never be quick. */
      203 
      204 	     if substr (quick_info (i), i, 1) = "1"b then do;
      205 		b -> block.why_nonquick.recursive_call = "1"b;
      206 		b -> block.no_stack = "0"b;
      207 		go to next;
      208 	     end;
      209 
      210 /* See if it is called from any other blocks;
      211*	        a block can be quick if only called from one block */
      212 
      213 	     if substr (quick_info (i), j + 1) then
      214 		goto next;
      215 
      216 /* block "i" will allocate its storage in block "j" */
      217 
      218 	     b -> block.owner = block_array (j);
      219 
      220 	     do k = 1 to pl1_stat_$node_uses (1);
      221 
      222 /* if some other block is allocating its storage in block "i",
      223*		   that block has to now take it from block "j" */
      224 
      225 		if block_array (k) -> block.owner = b then
      226 		     block_array (k) -> block.owner = block_array (j);
      227 
      228 /* copy all transitions out of block "i" into block "j" and
      229*		   then erase all transitions out of block "i" */
      230 
      231 		substr (quick_info (k), j, 1) = substr (quick_info (k), j, 1) | substr (quick_info (k), i, 1);
      232 		substr (quick_info (k), i, 1) = "0"b;
      233 	     end;
      234 
      235 /* remember that we changed the array */
      236 
      237 	     changed = "1"b;
      238 
      239 next:
      240 	end;
      241 
      242 /* we repeat the above algorithm until we make a pass thru the
      243*	   array with no change */
      244 
      245 	if changed then
      246 	     goto loop;
      247 
      248 /* if the owner field of a block is now null, the block can't be quick */
      249 
      250 	do i = 1 to pl1_stat_$node_uses (1);
      251 	     b = block_array (i);
      252 
      253 /* issue warning if internal procedure was never called */
      254 
      255 	     if b -> block_type = internal_procedure then
      256 		if quick_info (i) = "0"b & ^b -> block.why_nonquick.assigned_to_entry_var then do;
      257 		     call error (267, null, (b -> block.main -> statement.labels -> element (2)));
      258 		     if b -> block.no_stack & b -> block.owner = null then do;
      259 			b -> block.why_nonquick.never_referenced = "1"b;
      260 			b -> block.no_stack = "0"b;
      261 		     end;
      262 		end;
      263 
      264 /* If block has no owner at this point, and is still quick, make it nonquick, */
      265 /* because we have been unable to find it a unique owner for its stack frame. */
      266 
      267 	     if b -> block.owner = null & b -> block.no_stack then do;
      268 		b -> block.why_nonquick.no_owner = "1"b;
      269 		b -> block.no_stack = "0"b;
      270 	     end;
      271 	     else if b = b -> block.owner then do;
      272 		b -> block.why_nonquick.recursive_call = "1"b;
      273 		b -> block.no_stack = "0"b;
      274 	     end;
      275 	end;
      276 
      277 	return;
      278 
      279 process_label:
      280      proc (s);
      281 
      282 /* The reason for the need for two "goto" bits is that goto_bit
      283*   reflects the last stmnt thru the 1st half of the next invocation
      284*   of process_label, which used to be the only person who used it, but by
      285*   the time expression_semantics is called to process the statement, that bit
      286*   has been updated to reflect the CURRENT statement, which is no longer interesting.
      287*   Therefore pl1_stat_$stmnt_unreachable is used by everyone who is interested
      288*   who is called as a result of the call to expression_semantics, to tell if
      289*   at that point the PREVIOUS statement was a return or a goto.	*/
      290 
      291 dcl      (lookup_block, lptr, s) ptr,
      292          st_type bit (9) aligned;
      293 
      294 	st_type = s -> statement.statement_type;
      295 	lptr = s -> statement.labels;
      296 
      297 	if lptr = null then
      298 	     if goto_bit
      299 		& (st_type ^= end_statement & st_type ^= null_statement & st_type ^= entry_statement
      300 		& st_type ^= format_statement) then
      301 		if st_type = do_statement then
      302 		     if s -> statement.root -> operand (3) = null then
      303 			call semantic_translator$error (56, null);
      304 		     else
      305 			call semantic_translator$error (476, null);
      306 		else
      307 		     call semantic_translator$error (56, null);
      308 	     else
      309 		;
      310 	else
      311 	     do while (lptr ^= null);
      312 		if st_type = procedure_statement | st_type = entry_statement then
      313 		     lookup_block = b -> block.father;
      314 		else
      315 		     lookup_block = b;
      316 
      317 		def_context.suppress_cross_ref = "1"b;	/* No redundant cross-ref for labels */
      318 
      319 		lptr -> list.element (2) =
      320 		     expression_semantics (lookup_block, d, (lptr -> list.element (2)), context);
      321 
      322 		def_context.suppress_cross_ref = "0"b;	/* Continue allowing cross-referencing */
      323 
      324 		lptr = lptr -> list.element (1);
      325 	     end;
      326 
      327 /* If the last statement, still refected by "goto_bit", was a goto
      328*   return, or stop, then the statement about to be processed must be
      329*   unreachable, so set this external bit. operator_semantics uses it to tell
      330*    when the quality of the code produced doesn't matter.	*/
      331 
      332 	pl1_stat_$stmnt_unreachable = goto_bit;
      333 
      334 	if st_type = return_statement | st_type = goto_statement | st_type = stop_statement then
      335 	     goto_bit = "1"b;
      336 	else
      337 	     goto_bit = "0"b;
      338 
      339      end process_label;
      340 
      341 /* This entry is called when a fatal error occurs in declaration processing or semantic
      342*   translation.  Recovery consists of deleting the offending statement from the program by
      343*   transforming it into a null statement.  Illegal declarations remain in the program.	*/
      344 
      345 abort:
      346      entry (m, t);
      347 
      348 	d = pl1_stat_$cur_statement;
      349 
      350 	if d -> node.type = statement_node then do;
      351 	     if pl1_stat_$debug_semant then do;
      352 		tk = d -> statement.root;
      353 		call ioa_ ("^/SEMANTICS bug at ^p", tk);
      354 	     end;
      355 	     else do;
      356 		d -> statement.root = null;
      357 		d -> statement.statement_type = null_statement;
      358 	     end;
      359 
      360 	     if pl1_stat_$multi_type then do;
      361 		pl1_stat_$error_flag = "1"b;
      362 		goto pl1_stat_$abort_label;
      363 	     end;
      364 
      365 	     call error_ (m, d -> statement.source_id, t, (d -> statement.segment), (d -> statement.source.start),
      366 		(d -> statement.source.length));
      367 	end;
      368 	else
      369 	     call error_$no_text (m, d -> symbol.source_id, t);
      370 
      371 	pl1_stat_$index = 0;
      372 	goto abort;
      373 
      374 /* This entry is called when a non-fatal error occurs during semantic translation
      375*   or declaration processing. */
      376 
      377 error:
      378      entry (m, t);
      379 
      380 	d = pl1_stat_$cur_statement;
      381 
      382 	if d -> node.type = statement_node then
      383 	     if pl1_stat_$multi_type then
      384 		;
      385 	     else
      386 		call error_ (m, d -> statement.source_id, t, (d -> statement.segment), (d -> statement.source.start),
      387 		     (d -> statement.source.length));
      388 	else
      389 	     call error_$no_text (m, d -> symbol.source_id, t);
      390 
      391 	if pl1_stat_$last_severity >= 2 then
      392 	     had_error = "1"b;			/* for call_es */
      393 
      394 	return;
      395 
      396 
      397 /* This entry is called by prepare_symbol_table when it wants to process an
      398*   expression found hanging off a symbol node.  expression_semantics cannot be
      399*   called directly because of a possible abort return */
      400 
      401 call_es:
      402      entry (blk, stm, exp, fail, convert_to_integer) returns (ptr);
      403 
      404 dcl      (blk, stm, exp) ptr,
      405          fail label,
      406          convert_to_integer bit (1) aligned;
      407 
      408 dcl      (tp, tp1) ptr;
      409 
      410 	pl1_stat_$cur_statement = stm;
      411 	abort = fail;
      412 	had_error = "0"b;
      413 
      414 	tp = expression_semantics (blk, stm, exp, "0"b);
      415 	if had_error then
      416 	     goto fail;
      417 
      418 	if ^convert_to_integer then
      419 	     return (tp);
      420 
      421 	tp1 = tp;
      422 	if tp1 -> node.type ^= token_node then do;
      423 	     if tp1 -> node.type = operator_node then
      424 		tp1 = tp1 -> operand (1);
      425 	     if tp1 -> reference.symbol -> symbol.arg_descriptor then
      426 		go to chk_err;
      427 	end;
      428 	tp = convert$to_integer (tp, (integer_type));
      429 chk_err:
      430 	if had_error then
      431 	     goto fail;
      432 
      433 	return (tp);
      434 
  1     1 dcl	pl1_stat_$node_uses(32) fixed bin ext;
  1     2 
  1     3 dcl	pl1_stat_$quick_pt ptr ext;
  1     4 
  1     5 dcl	quick_info(pl1_stat_$node_uses(1)) bit(pl1_stat_$node_uses(1)) aligned based(pl1_stat_$quick_pt);
      435 
      436 
  2     1 /* BEGIN INCLUDE FILE ... semant.incl.pl1 */
  2     2 
  2     3 /* Modified: 30 Aug 1979 by PCK to fix 1804 and 1823 */
  2     4 /* Modified: 26 Aug 1979 by PCK to implement by name assignment */
  2     5 
  2     6 
  2     7 declare	alloc_semantics	entry(pointer,pointer,pointer);
  2     8 			/* parameter 1:	(input)	block node pointer		*/
  2     9 			/* parameter 2:	(input)	statement node pointer	*/
  2    10 			/* parameter 3:	(in/out)	tree pointer		*/
  2    11 
  2    12 declare	alloc_semantics$init_only entry(pointer,pointer,pointer);
  2    13 			/* parameter 1:	(input)	qualifier pointer		*/
  2    14 			/* parameter 2:	(input)	statement node pointer	*/
  2    15 			/* parameter 3:	(input)	symbol node pointer		*/
  2    16 
  2    17 declare	builtin		entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  2    18 			returns(pointer);
  2    19 			/* parameter 1:	(input)	block node pointer		*/
  2    20 			/* parameter 2:	(input)	statement node pointer	*/
  2    21 			/* parameter 3:	(input)	tree pointer		*/
  2    22 			/* parameter 4:	(input)	subscript pointer		*/
  2    23 			/* parameter 5:	(input)	builtin symbol node pointer	*/
  2    24 			/* parameter 6:	(in/out)	context			*/
  2    25 			/* return:	(output)	tree pointer		*/
  2    26 
  2    27 declare	check_star_extents	entry(pointer,pointer);
  2    28 			/* parameter 1:	(input) symbol node of procedure	*/
  2    29 			/* parameter 2:	(input) argument list pointer		*/
  2    30 
  2    31 declare	compare_declaration	entry(pointer,pointer,bit(1) aligned) reducible
  2    32 			returns(bit(1) aligned);
  2    33 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  2    34 			/* parameter 2:	(input)	symbol node ptr	*/
  2    35 			/* parameter 3:	(input)	"1"b if aligned attribute ignored for string	*/
  2    36 			/* return:	(output)	compare bit		*/
  2    37 
  2    38 declare	context_processor	entry(pointer,label);
  2    39 			/* parameter 1:	(input)	root block node pointer	*/
  2    40 
  2    41 declare	declare		entry(pointer);
  2    42 			/* parameter 1:	(input)	symbol node pointer		*/
  2    43 
  2    44 declare	declare_structure	entry(pointer);
  2    45 			/* parameter 1:	(input)	symbol node pointer		*/
  2    46 
  2    47 declare	defined_reference	entry(pointer,pointer,pointer,pointer,pointer,bit(36) aligned)
  2    48 			returns(pointer);
  2    49 			/* parameter 1:	(input)	block node pointer		*/
  2    50 			/* parameter 2:	(input)	statement node pointer	*/
  2    51 			/* parameter 3:	(input)	tree pointer		*/
  2    52 			/* parameter 4:	(input)	subscript list pointer or null*/
  2    53 			/* parameter 5:	(input)	symbol node pointer		*/
  2    54 			/* parameter 6:	(in/out)	context			*/
  2    55 			/* return:	(output)	tree pointer		*/
  2    56 
  2    57 declare	do_semantics	entry(pointer,pointer,pointer);
  2    58 			/* parameter 1:	(input)	block node pointer		*/
  2    59 			/* parameter 2:	(input)	statement node pointer	*/
  2    60 			/* parameter 3:	(input)	tree pointer		*/
  2    61 
  2    62 declare	expand_assign	entry(pointer,pointer,pointer,bit(36) aligned,pointer)
  2    63 			returns(pointer);
  2    64 			/* parameter 1:	(input)	block node pointer		*/
  2    65 			/* parameter 2:	(input)	statement node pointer	*/
  2    66 			/* parameter 3:	(input)	tree pointer		*/
  2    67 			/* parameter 4:	(in/out)	context			*/
  2    68 			/* parameter 5:	(input)	aggregate reference node ptr	*/
  2    69 			/* return:	(output)	tree pointer		*/
  2    70 
  2    71 declare	expand_by_name	entry(pointer,pointer,pointer);
  2    72 			/* parameter 1:	(input)	block node pointer		*/
  2    73 			/* parameter 2:	(input)	statement node pointer	*/
  2    74 			/* parameter 3:	(input/output)	tree pointer		*/
  2    75 
  2    76 declare	expand_infix	entry(pointer,pointer,pointer,bit(36) aligned)
  2    77 			returns(pointer);
  2    78 			/* parameter 1:	(input)	block node pointer		*/
  2    79 			/* parameter 2:	(input)	statement node pointer	*/
  2    80 			/* parameter 3:	(input)	tree pointer		*/
  2    81 			/* parameter 4:	(in/out)	context			*/
  2    82 			/* return:	(output)	tree pointer		*/
  2    83 
  2    84 declare	expand_initial	entry(pointer,pointer,pointer);
  2    85 			/* parameter 1:	(input)	symbol node pointer		*/
  2    86 			/* parameter 2:	(input)	statement node pointer	*/
  2    87 			/* parameter 3:	(input)	locator			*/
  2    88 
  2    89 declare	expand_prefix	entry(pointer,pointer,pointer,bit(36) aligned)
  2    90 			returns(pointer);
  2    91 			/* parameter 1:	(input)	block node pointer		*/
  2    92 			/* parameter 2:	(input)	statement node pointer	*/
  2    93 			/* parameter 3:	(input)	tree pointer		*/
  2    94 			/* parameter 4:	(in/out)	context			*/
  2    95 			/* return:	(output)	tree pointer		*/
  2    96 
  2    97 declare	expand_primitive	entry(pointer,pointer,pointer,bit(36) aligned)
  2    98 			returns(pointer);
  2    99 			/* parameter 1:	(input)	block node pointer		*/
  2   100 			/* parameter 2:	(input)	statement node pointer	*/
  2   101 			/* parameter 3:	(input)	tree pointer		*/
  2   102 			/* parameter 4:	(input)	context			*/
  2   103 			/* return:	(output)	tree pointer		*/
  2   104 
  2   105 declare	expression_semantics entry(pointer,pointer,pointer,bit(36) aligned)
  2   106 			returns(pointer);
  2   107 			/* parameter 1:	(input)	block node pointer		*/
  2   108 			/* parameter 2:	(input)	statement node pointer	*/
  2   109 			/* parameter 3:	(input)	tree pointer		*/
  2   110 			/* parameter 4:	(in/out)	context			*/
  2   111 			/* return:	(output)	tree pointer		*/
  2   112 
  2   113 declare	fill_refer	entry(pointer,pointer,bit(1) aligned)
  2   114 			returns(pointer);
  2   115 			/* parameter 1:	(input)	null,ref node,op node ptr */
  2   116 			/* parameter 2:	(input)	null,ref node,op node ptr */
  2   117 			/* parameter 3:	(input)	copy switch for param 2 */
  2   118 			/* return:	(output)	ptr to processed tree */
  2   119 
  2   120 declare	io_data_list_semantics$format_list_semantics entry(pointer,pointer,pointer);
  2   121 			/* parameter 1:	(input)	block node pointer		*/
  2   122 			/* parameter 2:	(input)	statement node pointer	*/
  2   123 			/* parameter 3:	(in/out)	tree pointer		*/
  2   124 
  2   125 declare	function		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  2   126 			returns(pointer);
  2   127 			/* parameter 1:	(input)	block node pointer		*/
  2   128 			/* parameter 2:	(input)	statement node pointer	*/
  2   129 			/* parameter 3:	(input)	tree pointer		*/
  2   130 			/* parameter 4:	(input)	symbol node pointer		*/
  2   131 			/* parameter 5:	(in/out)	context			*/
  2   132 			/* return:	(output)	tree pointer		*/
  2   133 
  2   134 declare	generic_selector	entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  2   135 			returns(pointer);
  2   136 			/* parameter 1:	(input)	block node pointer	*/
  2   137 			/* parameter 2:	(input)	statement node pointer	*/
  2   138 			/* parameter 3:	(input)	tree pointer	*/
  2   139 			/* parameter 4:	(input)	pointer to argument list	*/
  2   140 			/* parameter 5:	(in/out)	context		*/
  2   141 			/* return:	(output)	tree pointer	*/
  2   142 
  2   143 declare	io_data_list_semantics entry(pointer,pointer,pointer);
  2   144 			/* parameter 1:	(input)	block node pointer		*/
  2   145 			/* parameter 2:	(input)	statement node pointer	*/
  2   146 			/* parameter 3:	(input)	operator node pointer	*/
  2   147 
  2   148 declare	io_semantics	entry(pointer,pointer,pointer);
  2   149 			/* parameter 1:	(input)	block node pointer		*/
  2   150 			/* parameter 2:	(input)	statement node pointer	*/
  2   151 			/* parameter 3:	(input)	tree pointer		*/
  2   152 
  2   153 declare	lookup		entry(pointer,pointer,pointer,pointer,bit(36) aligned)
  2   154 			returns(bit(1) aligned);
  2   155 			/* parameter 1:	(input)	block node pointer		*/
  2   156 			/* parameter 2:	(input)	stmnt|symbol node pointer	*/
  2   157 			/* parameter 3:	(input)	token or reference node ptr	*/
  2   158 			/* parameter 4:	(output)	symbol node pointer		*/
  2   159 			/* parameter 5:	(in/out)	context			*/
  2   160 			/* return:	(output)	symbol found bit		*/
  2   161 
  2   162 declare	make_non_quick	entry(pointer, bit (36) aligned);
  2   163 			/* parameter 1:	(input)	tree pointer	*/
  2   164 			/* parameter 2:	(input)	reason why being made nonquick */
  2   165 
  2   166 declare	match_arguments	entry(pointer,pointer) reducible
  2   167 			returns(bit(1) aligned);
  2   168 			/* parameter 1:	(input)	reference or symbol node ptr	*/
  2   169 			/* parameter 2:	(input)	reference or symbol node ptr	*/
  2   170 			/* return:	(output)	compare bit		*/
  2   171 
  2   172 declare	offset_adder	entry(pointer,fixed binary(31),fixed binary(3),bit(1) aligned,
  2   173 			      pointer,fixed binary(31),fixed binary(3),bit(1) aligned,bit(1));
  2   174 			/* parameter 1:	(in/out)	tree pointer		*/
  2   175 			/* parameter 2:	(in/out)	constant size		*/
  2   176 			/* parameter 3:	(in/out)	units			*/
  2   177 			/* parameter 4:	(in/out) 	ON if units ^= word_, but tree in words	*/
  2   178 			/* parameter 5:	(input)	tree pointer		*/
  2   179 			/* parameter 6:	(input)	constant size		*/
  2   180 			/* parameter 7:	(input)	units			*/
  2   181 			/* parameter 8:	(input)	ON if units ^= word_, but tree in words	*/
  2   182 			/* parameter 9:	(input)	ON if should not improve units	*/
  2   183 
  2   184 declare	operator_semantics	entry(pointer,pointer,pointer,bit(36) aligned)
  2   185 			returns(pointer);
  2   186 			/* parameter 1:	(input)	block node pointer		*/
  2   187 			/* parameter 2:	(input)	statement node pointer	*/
  2   188 			/* parameter 3:	(input)	tree pointer		*/
  2   189 			/* parameter 4:	(in/out)	context			*/
  2   190 			/* return:	(output)	tree pointer		*/
  2   191 
  2   192 declare	propagate_bit	entry(pointer,fixed binary(15));
  2   193 			/* parameter 1:	(input)	symbol node pointer		*/
  2   194 			/* parameter 2:	(input)	attribute number		*/
  2   195 
  2   196 declare	semantic_translator$call_es entry(pointer,pointer,pointer,label,bit(1) aligned)
  2   197 			returns(pointer);
  2   198 			/* parameter 1:	(input)	block ptr	*/
  2   199 			/* parameter 2:	(input)	statement ptr	*/
  2   200 			/* parameter 3:	(input)	tree ptr	*/
  2   201 			/* parameter 4:	(input)	failure label	*/
  2   202 			/* parameter 5:	(input)	"1"b -- convert to integer	*/
  2   203 			/* return:	(output)	tree ptr		*/
  2   204 
  2   205 declare	simplify_expression	entry(pointer,fixed bin,bit(1)aligned);
  2   206 			/* parameter 1:	(in/out)	tree pointer		*/
  2   207 			/* parameter 2:	(output)	value of constant, if the entire tree
  2   208*						is simplified		*/
  2   209 			/* parameter 3:	(output)	bit indicating if the tree has
  2   210*						been simplified		*/
  2   211 
  2   212 declare	simplify_offset	entry(pointer,bit(36) aligned);
  2   213 			/* parameter 1:	(input)	reference node pointer	*/
  2   214 			/* parameter 2:	(input)	context			*/
  2   215 
  2   216 declare	subscripter	entry(pointer,pointer,pointer,pointer,pointer)
  2   217 			returns(pointer);
  2   218 			/* parameter 1:	(input)	block node pointer		*/
  2   219 			/* parameter 2:	(input)	statement node pointer	*/
  2   220 			/* parameter 3:	(input)	tree pointer		*/
  2   221 			/* parameter 4:	(in/out)	subscript list pointer	*/
  2   222 			/* parameter 5:	(input)	symbol node pointer		*/
  2   223 			/* return:	(output)	reference node pointer	*/
  2   224 
  2   225 declare	validate		entry(pointer);
  2   226 			/* parameter 1:	(input)	symbol node pointer		*/
  2   227 
  3     1 /****^  *********************************************************
  3     2*        *                                                       *
  3     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  3     4*        *                                                       *
  3     5*        ********************************************************* */
  3     6 
  3     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  3     8 
  3     9 
  3    10 /****^  HISTORY COMMENTS:
  3    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  3    12*     install(89-07-31,MR12.3-1066):	
  3    13*     Removed the obsolete parameter source_line from the dcl of error_().
  3    14*                                                   END HISTORY COMMENTS */
  3    15 
  3    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  3    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  3    18* */
  3    19 
  3    20 declare	adjust_count	entry(pointer);
  3    21 			/* parameter 1:	(input)	any node pointer		*/
  3    22 
  3    23 declare	bindec		entry(fixed bin(31)) reducible
  3    24 			returns(character(12) aligned);
  3    25 			/* parameter 1:	(input)	bin value			*/
  3    26 			/* return:	(output)	character value with blanks	*/
  3    27 
  3    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  3    29 			returns(character(12) aligned varying);
  3    30 			/* parameter 1:	(input)	binary value		*/
  3    31 			/* return:	(output)	char value without blanks	*/
  3    32 
  3    33 declare	binoct		entry(fixed bin(31)) reducible
  3    34 			returns(char(12) aligned);
  3    35 			/* parameter 1:	(input)	binary value		*/
  3    36 			/* return:	(output)	char value with blanks	*/
  3    37 
  3    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  3    39 			returns(char(12) aligned);
  3    40 			/* parameter 1:	(input)	binary value		*/
  3    41 			/* return:	(output)	right-aligned char value	*/
  3    42 
  3    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  3    44 			returns(char(12) varying aligned);
  3    45 			/* parameter 1:	(input)	binary value		*/
  3    46 			/* returns:	(output)	char value without blanks	*/
  3    47 
  3    48 declare	compare_expression	entry(pointer,pointer) reducible
  3    49 			returns(bit(1) aligned);
  3    50 			/* parameter 1:	(input)	any node pointer		*/
  3    51 			/* parameter 2:	(input)	any node pointer		*/
  3    52 			/* return:	(output)	compare bit		*/
  3    53 
  3    54 declare	constant_length	entry (pointer, fixed bin (71))
  3    55 			returns (bit (1) aligned);
  3    56 			/* parameter 1:	(input)	reference node pointer	*/
  3    57 			/* parameter 2:	(input)	value of constant length	*/
  3    58 			/* return:	(output)	"1"b if constant length	*/
  3    59 
  3    60 declare	convert		entry(pointer,bit(36) aligned)
  3    61 			returns(pointer);
  3    62 			/* parameter 1:	(input)	any node pointer		*/
  3    63 			/* parameter 2:	(input)	target type		*/
  3    64 			/* return:	(output)	target value tree pointer	*/
  3    65 
  3    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  3    67 			returns(pointer);
  3    68 			/* parameter 1:	(input)	any node pointer		*/
  3    69 			/* parameter 2:	(input)	target type		*/
  3    70 			/* return:	(output)	target value tree pointer	*/
  3    71 
  3    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  3    73 			returns(pointer);
  3    74 			/* parameter 1:	(input)	any node pointer		*/
  3    75 			/* parameter 2:	(input)	target type		*/
  3    76 			/* return:	(output)	target value tree pointer	*/
  3    77 
  3    78 declare	convert$validate	entry(pointer,pointer);
  3    79 			/* parameter 1:	(input)	source value tree pointer	*/
  3    80 			/* parameter 2:	(input)	target reference node pointer	*/
  3    81 
  3    82 declare	convert$to_target_fb entry(pointer,pointer)
  3    83 			returns(pointer);
  3    84 			/* parameter 1:	(input)	source value tree pointer	*/
  3    85 			/* parameter 2:	(input)	target reference node pointer	*/
  3    86 			/* return:	(output)	target value tree pointer	*/
  3    87 
  3    88 declare	convert$to_target	entry(pointer,pointer)
  3    89 			returns(pointer);
  3    90 			/* parameter 1:	(input)	source value tree pointer	*/
  3    91 			/* parameter 2:	(input)	target reference node pointer	*/
  3    92 			/* return:	(output)	target value tree pointer	*/
  3    93 
  3    94 declare	copy_expression	entry(pointer unaligned)
  3    95 			returns(pointer);
  3    96 			/* parameter 1:	(input)	any node pointer		*/
  3    97 			/* return:	(output)	any node pointer		*/
  3    98 
  3    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  3   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  3   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  3   102 
  3   103 declare	copy_unique_expression entry(pointer)
  3   104 			returns(pointer);
  3   105 			/* parameter 1:	(input)	any node pointer		*/
  3   106 			/* return:	(output)	any node pointer		*/
  3   107 
  3   108 declare	create_array	entry()
  3   109 			returns(pointer);
  3   110 			/* return:	(output)	array node pointer		*/
  3   111 
  3   112 declare	create_block	entry(bit(9) aligned,pointer)
  3   113 			returns(pointer);
  3   114 			/* parameter 1:	(input)	block type		*/
  3   115 			/* parameter 2:	(input)	father block node pointer	*/
  3   116 			/* return:	(output)	block node pointer		*/
  3   117 
  3   118 declare	create_bound	entry()
  3   119 			returns(pointer);
  3   120 			/* return:	(output)	bound node pointer		*/
  3   121 
  3   122 declare	create_context	entry(pointer,pointer)
  3   123 			returns(pointer);
  3   124 			/* parameter 1:	(input)	block node pointer		*/
  3   125 			/* parameter 2:	(input)	token pointer		*/
  3   126 			/* return:	(output)	context node pointer	*/
  3   127 
  3   128 declare	create_cross_reference entry()
  3   129 			returns(pointer);
  3   130 			/* return:	(output)	cross reference node pointer	*/
  3   131 
  3   132 declare	create_default	entry
  3   133 			returns(pointer);
  3   134 			/* return:	(output)	default node pointer	*/
  3   135 
  3   136 declare	create_identifier	entry()
  3   137 			returns(pointer);
  3   138 			/* return:	(output)	token node pointer		*/
  3   139 
  3   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  3   141 			returns(pointer);
  3   142 			/* parameter 1:	(input)	block node pointer		*/
  3   143 			/* parameter 2:	(input)	token node pointer		*/
  3   144 			/* parameter 3:	(input)	declare type		*/
  3   145 			/* return:	(output)	label node pointer		*/
  3   146 
  3   147 declare	create_list	entry(fixed bin(15))
  3   148 			returns(pointer);
  3   149 			/* parameter 1:	(input)	number of list elements	*/
  3   150 			/* return:	(output)	list node pointer		*/
  3   151 
  3   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  3   153 			returns(pointer);
  3   154 			/* parameter 1:	(input)	operator type		*/
  3   155 			/* parameter 2:	(input)	number of operands		*/
  3   156 			/* return:	(output)	operator node pointer	*/
  3   157 
  3   158 declare	create_reference	entry(pointer)
  3   159 			returns(pointer);
  3   160 			/* parameter 1:	(input)	symbol node pointer		*/
  3   161 			/* return:	(output)	reference node pointer	*/
  3   162 
  3   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  3   164 			returns(pointer);
  3   165 			/* parameter 1:	(input)	statement type		*/
  3   166 			/* parameter 2:	(input)	block node pointer		*/
  3   167 			/* parameter 3:	(input)	label node pointer		*/
  3   168 			/* parameter 4:	(input)	conditions		*/
  3   169 			/* return:	(output)	statement node pointer	*/
  3   170 
  3   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  3   172 			returns(pointer);
  3   173 			/* parameter 1:	(input)	statement type		*/
  3   174 			/* parameter 2:	(input)	block node pointer		*/
  3   175 			/* parameter 3:	(input)	label node pointer		*/
  3   176 			/* parameter 4:	(input)	conditions		*/
  3   177 			/* return:	(output)	statement node pointer	*/
  3   178 
  3   179 declare	create_storage	entry(fixed bin(15))
  3   180 			returns(pointer);
  3   181 			/* parameter 1:	(input)	number of words		*/
  3   182 			/* return:	(output)	storage block pointer	*/
  3   183 
  3   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  3   185 			returns(pointer);
  3   186 			/* parameter 1:	(input)	block node pointer		*/
  3   187 			/* parameter 2:	(input)	token node pointer		*/
  3   188 			/* parameter 3:	(input)	declare type		*/
  3   189 			/* return:	(output)	symbol node pointer		*/
  3   190 
  3   191 declare	create_token	entry (character (*), bit (9) aligned)
  3   192 			returns (ptr);
  3   193 			/* parameter 1:	(input)	token string		*/
  3   194 			/* parameter 2:	(input)	token type		*/
  3   195 			/* return:	(output)	token node ptr		*/
  3   196 
  3   197 declare	create_token$init_hash_table entry ();
  3   198 
  3   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  3   200 			returns (ptr);
  3   201 			/* parameter 1:	(input)	token string		*/
  3   202 			/* parameter 2:	(input)	token type		*/
  3   203 			/* parameter 3:	(input)	protected flag		*/
  3   204 			/* return:	(output)	token node ptr		*/
  3   205 
  3   206 declare	decbin		entry(character(*) aligned) reducible
  3   207 			returns(fixed bin(31));
  3   208 			/* parameter 1:	(input)	decimal character string	*/
  3   209 			/* return:	(output)	binary value		*/
  3   210 
  3   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  3   212 			returns(pointer);
  3   213 			/* parameter 1:	(input)	value			*/
  3   214 			/* parameter 2:	(input)	type			*/
  3   215 			/* parameter 3:	(input)	size			*/
  3   216 			/* parameter 4:	(input)	scale			*/
  3   217 			/* return:	(output)	reference node pointer	*/
  3   218 
  3   219 declare	declare_constant$bit entry(bit(*) aligned)
  3   220 			returns(pointer);
  3   221 			/* parameter 1:	(input)	bit			*/
  3   222 			/* return:	(output)	reference node pointer	*/
  3   223 
  3   224 declare	declare_constant$char entry(character(*) aligned)
  3   225 			returns(pointer);
  3   226 			/* parameter 1:	(input)	character			*/
  3   227 			/* return:	(output)	reference node pointer	*/
  3   228 
  3   229 declare	declare_constant$desc entry(bit(*) aligned)
  3   230 			returns(pointer);
  3   231 			/* parameter 1:	(input)	descriptor bit value	*/
  3   232 			/* return:	(output)	reference node pointer	*/
  3   233 
  3   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  3   235 			returns(pointer);
  3   236 			/* parameter 1:	(input)	integer			*/
  3   237 			/* return:	(output)	reference node pointer	*/
  3   238 
  3   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  3   240 			returns(pointer);
  3   241 			/* parameter 1:	(input)	block node pointer		*/
  3   242 			/* parameter 2:	(input)	statement node pointer	*/
  3   243 			/* parameter 3:	(input)	symbol node pointer		*/
  3   244 			/* parameter 4:	(input)	loc pointer		*/
  3   245 			/* parameter 5:	(input)	array descriptor bit
  3   246*						cross_section bit	*/
  3   247 			/* return:	(output)	reference node pointer	*/
  3   248 
  3   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  3   250 			returns(pointer);
  3   251 			/* parameter 1:	(input)	block node pointer	*/
  3   252 			/* parameter 2:	(input)	statement node pointer 	*/
  3   253 			/* parameter 3:	(input)	symbol node pointer	*/
  3   254 			/* parameter 4:	(input)	loc pointer	*/
  3   255 			/* parameter 5:	(input)	array descriptor bit
  3   256*						cross_section bit	*/
  3   257 			/* return:	(output)	reference node pointer	*/
  3   258 
  3   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  3   260 			returns(pointer);
  3   261 			/* parameter 1:	(input)	block node pointer		*/
  3   262 			/* parameter 2:	(input)	statement node pointer	*/
  3   263 			/* parameter 3:	(input)	symbol node pointer		*/
  3   264 			/* parameter 4:	(input)	loc pointer		*/
  3   265 			/* parameter 5:	(input)	array descriptor bit
  3   266*						cross_section bit	*/
  3   267 			/* return:	(output)	reference node pointer	*/
  3   268 
  3   269 declare	declare_integer	entry(pointer)
  3   270 			returns(pointer);
  3   271 			/* parameter 1:	(input)	block node pointer		*/
  3   272 			/* return:	(output)	reference node pointer 	*/
  3   273 
  3   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  3   275 			/* parameter 1:	(input)	picture string		*/
  3   276 			/* parameter 2:	(input)	symbol node pointer		*/
  3   277 			/* parameter 3:	(output)	error code, if any		*/
  3   278 
  3   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  3   280 			returns(pointer);
  3   281 			/* parameter 1:	(input)	picture string		*/
  3   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  3   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  3   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  3   285 			/* return:	(output)	reference node pointer	*/
  3   286 
  3   287 declare	declare_pointer	entry(pointer)
  3   288 			returns(pointer);
  3   289 			/* parameter 1:	(input)	block node pointer		*/
  3   290 			/* return:	(output)	reference node pointer	*/
  3   291 
  3   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  3   293 			returns(pointer);
  3   294 			/* parameter 1:	(input)	type			*/
  3   295 			/* parameter 2:	(input)	precision			*/
  3   296 			/* parameter 3:	(input)	scale			*/
  3   297 			/* parameter 4:	(input)	length			*/
  3   298 			/* return:	(output)	reference node pointer	*/
  3   299 
  3   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  3   301 			returns(char(120) varying);
  3   302 			/* parameter 1:	(input)	node pointer		*/
  3   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  3   304 			/* return:	(output)	source line id		*/
  3   305 
  3   306 declare	decode_source_id	entry(
  4     1 			1 structure unaligned,
  4     2 			  2 /* file_number */	bit(8),
  4     3 			  2 /* line_number */	bit(14),
  4     4 			  2 /* stmt_number */	bit(5),
  3   307 
  3   308 			bit(1) aligned)
  3   309 			returns(char(120) varying);
  3   310 			/* parameter 1:	(input)	source id			*/
  3   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  3   312 			/* return:	(output)	source line id		*/
  3   313 
  3   314 declare	error		entry(fixed bin(15),pointer,pointer);
  3   315 			/* parameter 1:	(input)	error number		*/
  3   316 			/* parameter 2:	(input)	statement node pointer or null*/
  3   317 			/* parameter 3:	(input)	token node pointer 		*/
  3   318 
  3   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  3   320 			/* parameter 1:	(input)	error number		*/
  3   321 			/* parameter 2:	(input)	statement node pointer or null*/
  3   322 			/* parameter 3:	(input)	token node pointer 		*/
  3   323 
  3   324 declare	error_		entry(fixed bin(15),
  5     1 			1 structure unaligned,
  5     2 			  2 /* file_number */	bit(8),
  5     3 			  2 /* line_number */	bit(14),
  5     4 			  2 /* stmt_number */	bit(5),
  3   325 
  3   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  3   327 			/* parameter 1:	(input)	error number		*/
  3   328 			/* parameter 2:	(input)	statement id		*/
  3   329 			/* parameter 3:	(input)	any node pointer		*/
  3   330 			/* parameter 4:	(input)	source segment		*/
  3   331 			/* parameter 5:	(input)	source starting character	*/
  3   332 			/* parameter 6:	(input)	source length		*/
  3   333 
  3   334 declare	error_$no_text	entry(fixed bin(15),
  6     1 			1 structure unaligned,
  6     2 			  2 /* file_number */	bit(8),
  6     3 			  2 /* line_number */	bit(14),
  6     4 			  2 /* stmt_number */	bit(5),
  3   335 
  3   336 			pointer);
  3   337 			/* parameter 1:	(input)	error number		*/
  3   338 			/* parameter 2:	(input)	statement id		*/
  3   339 			/* parameter 3:	(input)	any node pointer		*/
  3   340 
  3   341 declare	error_$initialize_error entry();
  3   342 
  3   343 declare	error_$finish	entry();
  3   344 
  3   345 declare	free_node		entry(pointer);
  3   346 			/* parameter 1:	any node pointer			*/
  3   347 
  3   348 declare	get_array_size	entry(pointer,fixed bin(3));
  3   349 			/* parameter 1:	(input)	symbol node pointer		*/
  3   350 			/* parameter 2:	(input)	units			*/
  3   351 
  3   352 declare	get_size		entry(pointer);
  3   353 			/* parameter 1:	(input)	symbol node pointer		*/
  3   354 
  3   355 declare	merge_attributes	external entry(pointer,pointer)
  3   356 			returns(bit(1) aligned);
  3   357 			/* parameter 1:	(input)	target symbol node pointer */
  3   358 			/* parameter 2:	(input)	source symbol node pointer */
  3   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  3   360 
  3   361 declare	optimizer		entry(pointer);
  3   362 			/* parameter 1:	(input)	root pointer		*/
  3   363 
  3   364 declare	parse_error	entry(fixed bin(15),pointer);
  3   365 			/* parameter 1:	(input)	error number		*/
  3   366 			/* parameter 2:	(input)	any node pointer		*/
  3   367 
  3   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  3   369 			/* parameter 1:	(input)	error number		*/
  3   370 			/* parameter 2:	(input)	any node pointer		*/
  3   371 
  3   372 declare	pl1_error_print$write_out
  3   373 			entry(fixed bin(15),
  7     1 			1 structure unaligned,
  7     2 			  2 /* file_number */	bit(8),
  7     3 			  2 /* line_number */	bit(14),
  7     4 			  2 /* stmt_number */	bit(5),
  3   374 
  3   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  3   376 			/* parameter 1:	(input)	error number		*/
  3   377 			/* parameter 2:	(input)	statement identification	*/
  3   378 			/* parameter 3:	(input)	any node pointer		*/
  3   379 			/* parameter 4:	(input)	source segment		*/
  3   380 			/* parameter 5:	(input)	source character index	*/
  3   381 			/* parameter 6:	(input)	source length		*/
  3   382 			/* parameter 7:	(input)	source line		*/
  3   383 
  3   384 declare	pl1_error_print$listing_segment
  3   385 			entry(fixed bin(15),
  8     1 			1 structure unaligned,
  8     2 			  2 /* file_number */	bit(8),
  8     3 			  2 /* line_number */	bit(14),
  8     4 			  2 /* stmt_number */	bit(5),
  3   386 
  3   387 			pointer);
  3   388 			/* parameter 1:	(input)	error number		*/
  3   389 			/* parameter 2:	(input)	statement identification	*/
  3   390 			/* parameter 3:	(input)	token node pointer		*/
  3   391 
  3   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  3   393 			/* parameter 1:	(input)	string			*/
  3   394 
  3   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  3   396 			/* parameter 1:	(input)	string			*/
  3   397 
  3   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  3   399 			/* parameter 1:	(input)	string			*/
  3   400 			/* parameter 2:	(input)	string length or 0		*/
  3   401 
  3   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  3   403 			/* parameter 1:	(input)	string			*/
  3   404 			/* parameter 2:	(input)	string length or 0		*/
  3   405 
  3   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  3   407 			/* parameter 1:	(input)	string pointer		*/
  3   408 			/* parameter 2:	(input)	string size		*/
  3   409 
  3   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  3   411 			/* parameter 1:	(input)	string pointer		*/
  3   412 			/* parameter 2:	(input)	string length or 0		*/
  3   413 
  3   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  3   415 			/* parameter 1:	(input)	string			*/
  3   416 			/* parameter 2:	(input)	length			*/
  3   417 
  3   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  3   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  3   420 			/* parameter 2:	(input)	line number		*/
  3   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  3   422 			/* parameter 4:	(input)	number of chars to copy	*/
  3   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  3   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  3   425 
  3   426 declare	refer_extent	entry(pointer,pointer);
  3   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  3   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  3   429 
  3   430 declare	reserve$clear	entry()
  3   431 			returns(pointer);
  3   432 			/* return:	(output)	pointer			*/
  3   433 
  3   434 declare	reserve$declare_lib	entry(fixed bin(15))
  3   435 			returns(pointer);
  3   436 			/* parameter 1:	(input)	builtin function number	*/
  3   437 			/* return:	(output)	pointer			*/
  3   438 
  3   439 declare	reserve$read_lib	entry(fixed bin(15))
  3   440 			returns(pointer);
  3   441 			/* parameter 1:	(input)	builtin function number	*/
  3   442 			/* return:	(output)	pointer			*/
  3   443 
  3   444 declare	semantic_translator	entry();
  3   445 
  3   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  3   447 			/* parameter 1:	(input)	error number		*/
  3   448 			/* parameter 2:	(input)	any node pointer		*/
  3   449 
  3   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  3   451 			/* parameter 1:	(input)	error number		*/
  3   452 			/* parameter 2:	(input)	any node pointer		*/
  3   453 
  3   454 declare	share_expression	entry(ptr)
  3   455 			returns(ptr);
  3   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  3   457 			/* return:	(output)	tree pointer or null	*/
  3   458 
  3   459 declare	token_to_binary	entry(ptr) reducible
  3   460 			returns(fixed bin(31));
  3   461 			/* parameter 1:	(input)	token node pointer		*/
  3   462 			/* return:	(output)	converted binary value	*/
  3   463 
  3   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
  2   228 
  2   229 /* END INCLUDE FILE ... semant.incl.pl1 */
      437 
      438 
  9     1 /* BEGIN INCLUDE FILE ... block.incl.pl1 */
  9     2 /* Modified 22 Ocober 1980 by M. N. Davidoff to increase max block.number to 511 */
  9     3 /* format: style3,idind30 */
  9     4 
  9     5 declare	1 block			aligned based,
  9     6 	  2 node_type		bit (9) unaligned,
  9     7 	  2 source_id		structure unaligned,
  9     8 	    3 file_number		bit (8),
  9     9 	    3 line_number		bit (14),
  9    10 	    3 statement_number	bit (5),
  9    11 	  2 father		ptr unaligned,
  9    12 	  2 brother		ptr unaligned,
  9    13 	  2 son			ptr unaligned,
  9    14 	  2 declaration		ptr unaligned,
  9    15 	  2 end_declaration		ptr unaligned,
  9    16 	  2 default		ptr unaligned,
  9    17 	  2 end_default		ptr unaligned,
  9    18 	  2 context		ptr unaligned,
  9    19 	  2 prologue		ptr unaligned,
  9    20 	  2 end_prologue		ptr unaligned,
  9    21 	  2 main			ptr unaligned,
  9    22 	  2 end_main		ptr unaligned,
  9    23 	  2 return_values		ptr unaligned,
  9    24 	  2 return_count		ptr unaligned,
  9    25 	  2 plio_ps		ptr unaligned,
  9    26 	  2 plio_fa		ptr unaligned,
  9    27 	  2 plio_ffsb		ptr unaligned,
  9    28 	  2 plio_ssl		ptr unaligned,
  9    29 	  2 plio_fab2		ptr unaligned,
  9    30 	  2 block_type		bit (9) unaligned,
  9    31 	  2 prefix		bit (12) unaligned,
  9    32 	  2 like_attribute		bit (1) unaligned,
  9    33 	  2 no_stack		bit (1) unaligned,
  9    34 	  2 get_data		bit (1) unaligned,
  9    35 	  2 flush_at_call		bit (1) unaligned,
  9    36 	  2 processed		bit (1) unaligned,
  9    37 	  2 text_displayed		bit (1) unaligned,
  9    38 	  2 number		fixed bin (9) unsigned unaligned,
  9    39 	  2 free_temps		dimension (3) ptr,	/* these fields are used by the code generator */
  9    40 	  2 temp_list		ptr,
  9    41 	  2 entry_list		ptr,
  9    42 	  2 o_and_s		ptr,
  9    43 	  2 why_nonquick		aligned,
  9    44 	    3 auto_adjustable_storage bit (1) unaligned,
  9    45 	    3 returns_star_extents	bit (1) unaligned,
  9    46 	    3 stack_extended_by_args	bit (1) unaligned,
  9    47 	    3 invoked_by_format	bit (1) unaligned,
  9    48 	    3 format_statement	bit (1) unaligned,
  9    49 	    3 io_statements		bit (1) unaligned,
  9    50 	    3 assigned_to_entry_var	bit (1) unaligned,
  9    51 	    3 condition_statements	bit (1) unaligned,
  9    52 	    3 no_owner		bit (1) unaligned,
  9    53 	    3 recursive_call	bit (1) unaligned,
  9    54 	    3 options_non_quick	bit (1) unaligned,
  9    55 	    3 options_variable	bit (1) unaligned,
  9    56 	    3 never_referenced	bit (1) unaligned,
  9    57 	    3 pad_nonquick		bit (5) unaligned,
  9    58 	  2 prologue_flag		bit (1) unaligned,
  9    59 	  2 options_main		bit (1) unaligned,
  9    60 	  2 pad			bit (16) unaligned,
  9    61 	  2 number_of_entries	fixed bin (17),
  9    62 	  2 level			fixed bin (17),
  9    63 	  2 last_auto_loc		fixed bin (17),
  9    64 	  2 symbol_block		fixed bin (17),
  9    65 	  2 entry_info		fixed bin (18),
  9    66 	  2 enter			structure unaligned,
  9    67 	    3 start		fixed bin (17),
  9    68 	    3 end			fixed bin (17),
  9    69 	  2 leave			structure unaligned,
  9    70 	    3 start		fixed bin (17),
  9    71 	    3 end			fixed bin (17),
  9    72 	  2 owner			ptr;
  9    73 
  9    74 declare	max_block_number		fixed bin internal static options (constant) initial (511);
  9    75 
  9    76 /* END INCLUDE FILE ... block.incl.pl1 */
      439 
 10     1 dcl (	root_block		initial("000000001"b),
 10     2 	external_procedure		initial("000000010"b),
 10     3 	internal_procedure		initial("000000011"b),
 10     4 	begin_block		initial("000000100"b),
 10     5 	on_unit			initial("000000101"b))  internal static bit(9) aligned options(constant);
      440 
 11     1 /* BEGIN INCLUDE FILE ... declare_type.incl.pl1 */
 11     2 
 11     3 /* Modified: 25 Apr 1979 by PCK to implement 4-bit decimal */
 11     4 
 11     5 dcl  (	by_declare	initial("001"b),
 11     6 	by_explicit_context initial("010"b),
 11     7 	by_context	initial("011"b),
 11     8 	by_implication	initial("100"b),
 11     9 	by_compiler	initial("101"b)) int static bit(3) aligned options(constant);
 11    10 
 11    11 /* END INCLUDE FILE ... declare_type.incl.pl1 */
      441 
 12     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
 12     2 
 12     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
 12     4 
 12     5 /* format: style3 */
 12     6 dcl	1 operator	based aligned,
 12     7 	  2 node_type	bit (9) unaligned,
 12     8 	  2 op_code	bit (9) unaligned,
 12     9 	  2 shared	bit (1) unaligned,
 12    10 	  2 processed	bit (1) unaligned,
 12    11 	  2 optimized	bit (1) unaligned,
 12    12 	  2 number	fixed (14) unaligned,
 12    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
 12    14 
 12    15 dcl	max_number_of_operands
 12    16 			fixed bin (15) int static options (constant) initial (32767);
 12    17 
 12    18 /* END INCLUDE FILE ... operator.incl.pl1 */
      442 
 13     1 /* BEGIN INCLUDE FILE ... semantic_bits.incl.pl1 */
 13     2 
 13     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
 13     4 
 13     5 dcl	context aligned bit(36),
 13     6 	this_context aligned bit(36);
 13     7 
 13     8 dcl	1 def_context		aligned based(addr(context)),
 13     9 	2 aggregate		unaligned bit(1),
 13    10 	2 arg_list		unaligned bit(1),
 13    11 	2 left_side		unaligned bit(1),
 13    12 	2 return			unaligned bit(1),
 13    13 	2 evaluate_offset		unaligned bit(1),
 13    14 	2 top			unaligned bit(1),
 13    15 	2 RHS_aggregate		unaligned bit(1),
 13    16 	2 return_from_empty		unaligned bit(1),
 13    17 	2 ignore_based		unaligned bit(1),
 13    18 	2 ext_param		unaligned bit(1),
 13    19 	2 cross_section		unaligned bit(1),
 13    20 	2 string_unspec		unaligned bit(1),
 13    21 	2 f_offset_to_be_added	unaligned bit(1),
 13    22 	2 suppress_cross_ref	unaligned bit(1),
 13    23 	2 by_name_assignment	unaligned bit(1),
 13    24 	2 by_name_lookup		unaligned bit(1),
 13    25 	2 pad			unaligned bit(20);
 13    26 
 13    27 dcl	1 def_this_context		aligned like def_context based(addr(this_context));
 13    28 
 13    29 /* END INCLUDE FILE ... semantic_bits.incl.pl1 */
      443 
 14     1 /* BEGIN INCLUDE FILE ... list.incl.pl1 */
 14     2 
 14     3 /* Modified 26 June 81 by EBush to add max_list_elements */
 14     4 
 14     5 
 14     6 dcl	1 list		based aligned,
 14     7 	2 node_type	bit(9) unaligned,
 14     8 	2 reserved	bit(12) unaligned,
 14     9 	2 number		fixed(14) unaligned,
 14    10 	2 element		dimension(n refer(list.number)) ptr unaligned;
 14    11 
 14    12 dcl       max_list_elements   fixed bin(17) internal static options (constant)
 14    13 	                    init(16383);
 14    14 
 14    15 /* END INCLUDE FILE ... list.incl.pl1 */
      444 
      445 
 15     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
 15     2 
 15     3 dcl	1 symbol			based aligned,
 15     4 	2 node_type		bit(9) unal,
 15     5 	2 source_id		structure unal,
 15     6 	  3 file_number		bit(8),
 15     7 	  3 line_number		bit(14),
 15     8 	  3 statement_number	bit(5),
 15     9 	2 location		fixed(18) unal unsigned,
 15    10 	2 allocated		bit(1) unal,
 15    11 	2 dcl_type		bit(3) unal,
 15    12 	2 reserved		bit(6) unal,
 15    13 	2 pix			unal,
 15    14 	  3 pic_fixed		bit(1) unal,
 15    15 	  3 pic_float		bit(1) unal,
 15    16 	  3 pic_char		bit(1) unal,
 15    17 	  3 pic_scale		fixed(7) unal,
 15    18 	  3 pic_size		fixed(7) unal,
 15    19 	2 level			fixed(8) unal,
 15    20 	2 boundary		fixed(3) unal,
 15    21 	2 size_units		fixed(3) unal,
 15    22 	2 scale			fixed(7) unal,
 15    23 	2 runtime			bit(18) unal,
 15    24 	2 runtime_offset		bit(18) unal,
 15    25 	2 block_node		ptr unal,
 15    26 	2 token			ptr unal,
 15    27 	2 next			ptr unal,
 15    28 	2 multi_use		ptr unal,
 15    29 	2 cross_references		ptr unal,
 15    30 	2 initial			ptr unal,
 15    31 	2 array			ptr unal,
 15    32 	2 descriptor		ptr unal,
 15    33 	2 equivalence		ptr unal,
 15    34 	2 reference		ptr unal,
 15    35 	2 general			ptr unal,
 15    36 	2 father			ptr unal,
 15    37 	2 brother			ptr unal,
 15    38 	2 son			ptr unal,
 15    39 	2 word_size		ptr unal,
 15    40 	2 bit_size		ptr unal,
 15    41 	2 dcl_size		ptr unal,
 15    42 	2 symtab_size		ptr unal,
 15    43 	2 c_word_size		fixed(24),
 15    44 	2 c_bit_size		fixed(24),
 15    45 	2 c_dcl_size		fixed(24),
 15    46 
 15    47 	2 attributes		structure aligned,
 15    48 	  3 data_type		structure unal,
 15    49 	    4 structure		bit(1) ,
 15    50 	    4 fixed		bit(1),
 15    51 	    4 float		bit(1),
 15    52 	    4 bit			bit(1),
 15    53 	    4 char		bit(1),
 15    54 	    4 ptr			bit(1),
 15    55 	    4 offset		bit(1),
 15    56 	    4 area		bit(1),
 15    57 	    4 label		bit(1),
 15    58 	    4 entry		bit(1),
 15    59 	    4 file		bit(1),
 15    60 	    4 arg_descriptor	bit(1),
 15    61 	    4 storage_block		bit(1),
 15    62 	    4 explicit_packed	bit(1), /* options(packed) */
 15    63 	    4 condition		bit(1),
 15    64 	    4 format		bit(1),
 15    65 	    4 builtin		bit(1),
 15    66 	    4 generic		bit(1),
 15    67 	    4 picture		bit(1),
 15    68 
 15    69 	  3 misc_attributes		structure unal,
 15    70 	    4 dimensioned		bit(1),
 15    71 	    4 initialed		bit(1),
 15    72 	    4 aligned		bit(1),
 15    73 	    4 unaligned		bit(1),
 15    74 	    4 signed		bit(1),
 15    75 	    4 unsigned		bit(1),
 15    76 	    4 precision		bit(1),
 15    77 	    4 varying		bit(1),
 15    78 	    4 local		bit(1),
 15    79 	    4 decimal		bit(1),
 15    80 	    4 binary		bit(1),
 15    81 	    4 real		bit(1),
 15    82 	    4 complex		bit(1),
 15    83 	    4 variable		bit(1),
 15    84 	    4 reducible		bit(1),
 15    85 	    4 irreducible		bit(1),
 15    86 	    4 returns		bit(1),
 15    87 	    4 position		bit(1),
 15    88 	    4 internal		bit(1),
 15    89 	    4 external		bit(1),
 15    90 	    4 like		bit(1),
 15    91 	    4 member		bit(1),
 15    92 	    4 non_varying		bit(1),
 15    93 	    4 options		bit(1),
 15    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
 15    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
 15    96 
 15    97 	  3 storage_class		structure unal,
 15    98 	    4 auto		bit(1),
 15    99 	    4 based		bit(1),
 15   100 	    4 static		bit(1),
 15   101 	    4 controlled		bit(1),
 15   102 	    4 defined		bit(1),
 15   103 	    4 parameter		bit(1),
 15   104 	    4 param_desc		bit(1),
 15   105 	    4 constant		bit(1),
 15   106 	    4 temporary		bit(1),
 15   107 	    4 return_value		bit(1),
 15   108 
 15   109 	  3 file_attributes		structure unal,
 15   110 	    4 print		bit(1),
 15   111 	    4 input		bit(1),
 15   112 	    4 output		bit(1),
 15   113 	    4 update		bit(1),
 15   114 	    4 stream		bit(1),
 15   115 	    4 reserved_1		bit(1),
 15   116 	    4 record		bit(1),
 15   117 	    4 sequential		bit(1),
 15   118 	    4 direct		bit(1),
 15   119 	    4 interactive		bit(1),		/* env(interactive) */
 15   120 	    4 reserved_2		bit(1),
 15   121 	    4 reserved_3		bit(1),
 15   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
 15   123 	    4 keyed		bit(1),
 15   124 	    4 reserved_4		bit(1),
 15   125 	    4 environment		bit(1),
 15   126 
 15   127 	  3 compiler_developed	structure unal,
 15   128 	    4 aliasable		bit(1),
 15   129 	    4 packed		bit(1),
 15   130 	    4 passed_as_arg		bit(1),
 15   131 	    4 allocate		bit(1),
 15   132 	    4 set			bit(1),
 15   133 	    4 exp_extents		bit(1),
 15   134 	    4 refer_extents		bit(1),
 15   135 	    4 star_extents		bit(1),
 15   136 	    4 isub		bit(1),
 15   137 	    4 put_in_symtab		bit(1),
 15   138 	    4 contiguous		bit(1),
 15   139 	    4 put_data		bit(1),
 15   140 	    4 overlayed		bit(1),
 15   141 	    4 error		bit(1),
 15   142 	    4 symtab_processed	bit(1),
 15   143 	    4 overlayed_by_builtin	bit(1),
 15   144 	    4 defaulted		bit(1),
 15   145 	    4 connected		bit(1);
 15   146 
 15   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
      446 
 16     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
 16     2 
 16     3 dcl	1 reference		based aligned,
 16     4 	2 node_type		bit(9) unaligned,
 16     5 	2 array_ref		bit(1) unaligned,
 16     6 	2 varying_ref		bit(1) unaligned,
 16     7 	2 shared			bit(1) unaligned,
 16     8 	2 put_data_sw		bit(1) unaligned,
 16     9 	2 processed		bit(1) unaligned,
 16    10 	2 units			fixed(3) unaligned,
 16    11 	2 ref_count		fixed(17) unaligned,
 16    12 	2 c_offset		fixed(24),
 16    13 	2 c_length		fixed(24),
 16    14 	2 symbol			ptr unaligned,
 16    15 	2 qualifier		ptr unaligned,
 16    16 	2 offset			ptr unaligned,
 16    17 	2 length			ptr unaligned,
 16    18 	2 subscript_list		ptr unaligned,
 16    19 						/* these fields are used by the 645 code generator */
 16    20 	2 address			structure unaligned,
 16    21 	  3 base			bit(3),
 16    22 	  3 offset		bit(15),
 16    23 	  3 op			bit(9),
 16    24 	  3 no_address		bit(1),
 16    25 	  3 inhibit		bit(1),
 16    26 	  3 ext_base		bit(1),
 16    27 	  3 tag			bit(6),
 16    28 	2 info			structure unaligned,
 16    29 	  3 address_in		structure,
 16    30 	    4 b			dimension(0:7) bit(1),
 16    31 	    4 storage		bit(1),
 16    32 	  3 value_in		structure,
 16    33 	    4 a			bit(1),
 16    34 	    4 q			bit(1),
 16    35 	    4 aq			bit(1),
 16    36 	    4 string_aq		bit(1),
 16    37 	    4 complex_aq		bit(1),
 16    38 	    4 decimal_aq		bit(1),
 16    39 	    4 b			dimension(0:7) bit(1),
 16    40 	    4 storage		bit(1),
 16    41 	    4 indicators		bit(1),
 16    42 	    4 x			dimension(0:7) bit(1),
 16    43 	  3 other			structure,
 16    44 	    4 big_offset		bit(1),
 16    45 	    4 big_length		bit(1),
 16    46 	    4 modword_in_offset	bit(1),
 16    47 	2 data_type		fixed(5) unaligned,
 16    48 	2 bits			structure unaligned,
 16    49 	  3 padded_ref		bit(1),
 16    50 	  3 aligned_ref		bit(1),
 16    51 	  3 long_ref		bit(1),
 16    52 	  3 forward_ref		bit(1),
 16    53 	  3 ic_ref		bit(1),
 16    54 	  3 temp_ref		bit(1),
 16    55 	  3 defined_ref		bit(1),
 16    56 	  3 evaluated		bit(1),
 16    57 	  3 allocate		bit(1),
 16    58 	  3 allocated		bit(1),
 16    59 	  3 aliasable		bit(1),
 16    60 	  3 even			bit(1),
 16    61 	  3 perm_address		bit(1),
 16    62 	  3 aggregate		bit(1),
 16    63 	  3 hit_zero		bit(1),
 16    64 	  3 dont_save		bit(1),
 16    65 	  3 fo_in_qual		bit(1),
 16    66 	  3 hard_to_load		bit(1),
 16    67 	2 relocation		bit(12) unaligned,
 16    68 	2 more_bits		structure unaligned,
 16    69 	  3 substr		bit(1),
 16    70 	  3 padded_for_store_ref	bit(1),
 16    71 	  3 aligned_for_store_ref	bit(1),
 16    72 	  3 mbz			bit(15),
 16    73 	2 store_ins		bit(18) unaligned;
 16    74 
 16    75 /* END INCLUDE FILE ... reference.incl.pl1 */
      447 
      448 
 17     1 /* ***********************************************************
 17     2*   *                                                         *
 17     3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
 17     4*   *                                                         *
 17     5*   *********************************************************** */
 17     6 /* BEGIN INCLUDE FILE ... statement.incl.pl1 */
 17     7 /* Internal interface of the PL/I compiler */
 17     8 
 17     9 dcl	1 statement		based aligned,
 17    10 	2 node_type		bit(9) unaligned,
 17    11 	2 source_id		structure unaligned,
 17    12 	  3 file_number		bit(8),
 17    13 	  3 line_number		bit(14),
 17    14 	  3 statement_number	bit(5),
 17    15 	2 next			ptr unaligned,
 17    16 	2 back			ptr unaligned,
 17    17 	2 root			ptr unaligned,
 17    18 	2 labels			ptr unaligned,
 17    19 	2 reference_list		ptr unaligned,
 17    20 	2 state_list		ptr unaligned,
 17    21 	2 reference_count		fixed(17) unaligned,
 17    22 	2 ref_count_copy		fixed(17) unaligned,
 17    23 	2 object			structure unaligned,
 17    24 	  3 start			fixed(17),
 17    25 	  3 finish		fixed(17),
 17    26 	2 source			structure unaligned,
 17    27 	  3 segment		fixed(11),
 17    28 	  3 start			fixed(23),
 17    29 	  3 length		fixed(11),
 17    30 	2 prefix			bit(12) unaligned,
 17    31 	2 optimized		bit(1) unaligned,
 17    32 	2 free_temps		bit(1) unaligned,
 17    33 	2 LHS_in_RHS		bit(1) unaligned,
 17    34 	2 statement_type		bit(9) unaligned,
 17    35 	2 bits			structure unaligned,
 17    36 	  3 processed		bit(1) unaligned,
 17    37 	  3 put_in_profile		bit(1) unaligned,
 17    38 	  3 generated		bit(1) unaligned,
 17    39 	  3 snap			bit(1) unaligned,
 17    40 	  3 system		bit(1) unaligned,
 17    41 	  3 irreducible		bit(1) unaligned,
 17    42 	  3 checked		bit(1) unaligned,
 17    43 	  3 save_temps		bit(1) unaligned,
 17    44 	  3 suppress_warnings	bit(1) unaligned,
 17    45 	  3 force_nonquick		bit(1) unaligned,
 17    46 	  3 expanded_by_name	bit(1) unaligned,
 17    47 	  3 begins_loop		bit(1) unaligned,
 17    48 	  3 pad			bit(24) unaligned;
 17    49 
 17    50 /* END INCLUDE FILE ... statement.incl.pl1 */
      449 
      450 
 18     1 	/* statement types */
 18     2 
 18     3 dcl (	unknown_statement		initial("000000000"b),
 18     4 	allocate_statement		initial("000000001"b),
 18     5 	assignment_statement	initial("000000010"b),
 18     6 	begin_statement		initial("000000011"b),
 18     7 	call_statement		initial("000000100"b),
 18     8 	close_statement		initial("000000101"b),
 18     9 	declare_statement		initial("000000110"b),
 18    10 	lock_statement		initial("000000111"b),
 18    11 	delete_statement		initial("000001000"b),
 18    12 	display_statement		initial("000001001"b),
 18    13 	do_statement		initial("000001010"b),
 18    14 	else_clause		initial("000001011"b),
 18    15 	end_statement		initial("000001100"b),
 18    16 	entry_statement		initial("000001101"b),
 18    17 	exit_statement		initial("000001110"b),
 18    18 	format_statement		initial("000001111"b),
 18    19 	free_statement		initial("000010000"b),
 18    20 	get_statement		initial("000010001"b),
 18    21 	goto_statement		initial("000010010"b),
 18    22 	if_statement		initial("000010011"b),
 18    23 	locate_statement		initial("000010100"b),
 18    24 	null_statement		initial("000010101"b),
 18    25 	on_statement		initial("000010110"b),
 18    26 	open_statement		initial("000010111"b),
 18    27 	procedure_statement 	initial("000011000"b),
 18    28 	put_statement		initial("000011001"b),
 18    29 	read_statement		initial("000011010"b),
 18    30 	return_statement		initial("000011011"b),
 18    31 	revert_statement		initial("000011100"b),
 18    32 	rewrite_statement		initial("000011101"b),
 18    33 	signal_statement		initial("000011110"b),
 18    34 	stop_statement		initial("000011111"b),
 18    35 	system_on_unit		initial("000100000"b),
 18    36 	unlock_statement		initial("000100001"b),
 18    37 	wait_statement		initial("000100010"b),
 18    38 	write_statement		initial("000100011"b),
 18    39 	default_statement		initial("000100100"b),
 18    40 	continue_statement		initial("000100101"b)) bit(9) internal static aligned options(constant);
      451 
      452 
 19     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
 19     2 
 19     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
 19     4 
 19     5 dcl (	block_node		initial("000000001"b),
 19     6 	statement_node		initial("000000010"b),
 19     7 	operator_node		initial("000000011"b),
 19     8 	reference_node		initial("000000100"b),
 19     9 	token_node		initial("000000101"b),
 19    10 	symbol_node		initial("000000110"b),
 19    11 	context_node		initial("000000111"b),
 19    12 	array_node		initial("000001000"b),
 19    13 	bound_node		initial("000001001"b),
 19    14 	format_value_node		initial("000001010"b),
 19    15 	list_node			initial("000001011"b),
 19    16 	default_node		initial("000001100"b),
 19    17 	machine_state_node		initial("000001101"b),
 19    18 	source_node		initial("000001110"b),
 19    19 	label_node		initial("000001111"b),
 19    20 	cross_reference_node	initial("000010000"b),
 19    21 	sf_par_node		initial("000010001"b),
 19    22 	temporary_node		initial("000010010"b),
 19    23 	label_array_element_node	initial("000010011"b),
 19    24 	by_name_agg_node		initial("000010100"b))
 19    25 				bit(9) internal static aligned options(constant);
 19    26 
 19    27 dcl	1 node			based aligned,
 19    28 	2 type			unal bit(9),
 19    29 	2 source_id		unal structure,
 19    30 	  3 file_number		bit(8),
 19    31 	  3 line_number		bit(14),
 19    32 	  3 statement_number	bit(5);
 19    33 
 19    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
      453 
 20     1 /* BEGIN INCLUDE FILE ... token.incl.pl1 */
 20     2 
 20     3 dcl	1 token			based aligned,
 20     4 	2 node_type		bit(9) unaligned,
 20     5 	2 type			bit(9) unaligned,
 20     6 	2 loc			bit(18) unaligned,	/* symtab offset for identifiers, "p" flag for constants */
 20     7 	2 declaration		ptr unaligned,
 20     8 	2 next			ptr unaligned,
 20     9 	2 size			fixed(9),
 20    10 	2 string			char(n refer(token.size));
 20    11 
 20    12 /* END INCLUDE FILE ... token.incl.pl1 */
      454 
 21     1 /* BEGIN INCLUDE FILE ... token_types.incl.pl1 */
 21     2 
 21     3 dcl (	no_token		initial("000000000"b),	/*	token types		*/
 21     4 	identifier	initial("100000000"b),
 21     5 	isub		initial("010000000"b),
 21     6 	plus		initial("001000001"b),
 21     7 	minus		initial("001000010"b),
 21     8 	asterisk		initial("001000011"b),
 21     9 	slash		initial("001000100"b),
 21    10 	expon		initial("001000101"b),
 21    11 	not		initial("001000110"b),
 21    12 	and		initial("001000111"b),
 21    13 	or		initial("001001000"b),
 21    14 	cat		initial("001001001"b),
 21    15 	eq		initial("001001010"b),
 21    16 	ne		initial("001001011"b),
 21    17 	lt		initial("001001100"b),
 21    18 	gt		initial("001001101"b),
 21    19 	le		initial("001001110"b),
 21    20 	ge		initial("001001111"b),
 21    21 	ngt		initial("001010000"b),
 21    22 	nlt		initial("001010001"b),
 21    23 	assignment	initial("001010010"b),
 21    24 	colon		initial("001010011"b),
 21    25 	semi_colon	initial("001010100"b),
 21    26 	comma		initial("001010101"b),
 21    27 	period		initial("001010110"b),
 21    28 	arrow		initial("001010111"b),
 21    29 	left_parn		initial("001011000"b),
 21    30 	right_parn	initial("001011001"b),
 21    31 	percent		initial("001011100"b),
 21    32 	bit_string	initial("000100001"b),
 21    33 	char_string	initial("000100010"b),
 21    34 	bin_integer	initial("000110001"b),
 21    35 	dec_integer	initial("000110011"b),
 21    36 	fixed_bin		initial("000110000"b),
 21    37 	fixed_dec		initial("000110010"b),
 21    38 	float_bin		initial("000110100"b),
 21    39 	float_dec		initial("000110110"b),
 21    40 	i_bin_integer	initial("000111001"b),
 21    41 	i_dec_integer	initial("000111011"b),
 21    42 	i_fixed_bin	initial("000111000"b),
 21    43 	i_fixed_dec	initial("000111010"b),
 21    44 	i_float_bin	initial("000111100"b),
 21    45 	i_float_dec	initial("000111110"b)) bit (9) aligned internal static options (constant);
 21    46 
 21    47 dcl (	is_identifier		initial ("100000000"b),	/*	token type masks		*/
 21    48 	is_isub			initial ("010000000"b),
 21    49 	is_delimiter		initial ("001000000"b),
 21    50 	is_constant		initial ("000100000"b),
 21    51 	is_arith_constant		initial ("000010000"b),	/* N.B. not really a mask...s/b "000110000"b */
 21    52 	is_arithmetic_constant	initial ("000110000"b),
 21    53 	is_imaginary_constant	initial ("000111000"b),
 21    54 	is_float_constant		initial ("000110100"b),
 21    55 	is_decimal_constant		initial ("000110010"b),
 21    56 	is_integral_constant 	initial ("000110001"b)
 21    57 	) bit(9) internal static aligned options(constant);
 21    58 
 21    59 /* END INCLUDE FILE ... token_types.incl.pl1 */
      455 
 22     1 /* BEGIN INCLUDE FILE ... system.incl.pl1 */
 22     2 
 22     3 /* Modified: 25 Apr 1979 by PCK to implemnt 4-bit decimal */
 22     4 
 22     5 dcl (	max_p_flt_bin_1			initial(27),
 22     6 	max_p_flt_bin_2			initial(63),
 22     7 	max_p_fix_bin_1			initial(35),
 22     8 	max_p_fix_bin_2			initial(71),
 22     9 
 22    10 	max_p_dec				initial(59),
 22    11 	max_p_bin_or_dec			initial (71),	/* max (max_p_fix_bin_2, max_p_dec) */
 22    12 
 22    13 	min_scale				initial(-128),
 22    14 	max_scale				initial(+127),
 22    15 	max_bit_string			initial(9437184),
 22    16 	max_char_string			initial(1048576),
 22    17 	max_area_size			initial(262144),
 22    18 	min_area_size			initial(28),
 22    19 
 22    20 	max_bit_string_constant		initial (253),	/* max length of bit literals */
 22    21 	max_char_string_constant		initial (254),	/* max length of character literals */
 22    22 	max_identifier_length		initial (256),
 22    23 	max_number_of_dimensions		initial (127),
 22    24 
 22    25 	max_length_precision		initial(24),
 22    26 	max_offset_precision		initial(24),	/* 18 bits for word offset + 6 bits for bit offset */
 22    27 
 22    28 	max_words_per_variable		initial (262144),
 22    29 
 22    30 	bits_per_word			initial(36),
 22    31 	bits_per_double			initial(72),
 22    32 	packed_digits_per_character		initial(2),
 22    33 	characters_per_half			initial(2),
 22    34 	characters_per_word			initial(4),
 22    35 	characters_per_double		initial(8),
 22    36 
 22    37 	bits_per_character			initial(9),
 22    38 	bits_per_half			initial(18),
 22    39 	bits_per_decimal_digit		initial(9),
 22    40 	bits_per_binary_exponent		initial(8),
 22    41 	bits_per_packed_ptr			initial(36),
 22    42 	words_per_packed_pointer		initial(1),
 22    43 
 22    44 	words_per_fix_bin_1			initial(1),
 22    45 	words_per_fix_bin_2			initial(2),
 22    46 	words_per_flt_bin_1			initial(1),
 22    47 	words_per_flt_bin_2			initial(2),
 22    48 	words_per_varying_string_header	initial(1),
 22    49 	words_per_offset			initial(1),
 22    50 	words_per_pointer			initial(2),
 22    51 	words_per_label_var			initial(4),
 22    52 	words_per_entry_var			initial(4),
 22    53 	words_per_file_var			initial(4),
 22    54 	words_per_format			initial(4),
 22    55 	words_per_condition_var		initial(6),
 22    56 
 22    57 	max_index_register_value		initial(262143),
 22    58 	max_signed_index_register_value	initial(131071),
 22    59 
 22    60 	max_signed_xreg_precision		initial(17),
 22    61 	max_uns_xreg_precision		initial(18),
 22    62 
 22    63 	default_area_size			initial(1024),
 22    64 	default_flt_bin_p			initial(27),
 22    65 	default_fix_bin_p			initial(17),
 22    66 	default_flt_dec_p			initial(10),
 22    67           default_fix_dec_p   		initial(7)) fixed bin(31) internal static options(constant);
 22    68 
 22    69 dcl	bits_per_digit			initial(4.5)  fixed bin(31,1) internal static options(constant);
 22    70 
 22    71 dcl (	integer_type		initial("010000000000000000000100000001100000"b),
 22    72 	dec_integer_type		initial("010000000000000000000100000010100000"b),
 22    73 	pointer_type		initial("000001000000000000000100000000000000"b),
 22    74 	real_type			initial("001000000000000000000100000001100000"b),
 22    75 	complex_type		initial("001000000000000000000100000001010000"b),
 22    76 	builtin_type		initial("000000000000000010000000000000000000"b),
 22    77 	storage_block_type		initial("000000000000100000000000000000000000"b),
 22    78 	arg_desc_type		initial("000000000001000000000000000000000000"b),
 22    79 	local_label_var_type	initial("000000001000000000000100000100001000"b),
 22    80 	entry_var_type		initial("000000000100000000000000000000001000"b),
 22    81 	bit_type			initial("000100000000000000000000000000000000"b),
 22    82 	char_type			initial("000010000000000000000000000000000000"b)) bit(36) aligned int static
 22    83 									options(constant);
 22    84 
 22    85 /* END INCLUDE FILE ... system.incl.pl1 */
      456 
      457 
      458      end semantic_translator;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/18/00  1145.5  semantic_translator.pl1           >udd>sm>ds>w>ml>semantic_translator.pl1
435          1    05/06/74  1843.0  quick_info.incl.pl1               >ldd>incl>quick_info.incl.pl1
437          2    07/21/80  1646.3  semant.incl.pl1                   >ldd>incl>semant.incl.pl1
2-228        3    08/01/89  1339.9  language_utility.incl.pl1         >ldd>incl>language_utility.incl.pl1
3-307        4    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
3-325        5    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
3-335        6    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
3-374        7    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
3-386        8    05/06/74  1846.9  source_id_descriptor.incl.pl1     >ldd>incl>source_id_descriptor.incl.pl1
439          9    08/13/81  2143.5  block.incl.pl1                    >ldd>incl>block.incl.pl1
440         10    05/03/76  1420.8  block_types.incl.pl1              >ldd>incl>block_types.incl.pl1
441         11    10/25/79  1745.8  declare_type.incl.pl1             >ldd>incl>declare_type.incl.pl1
442         12    07/21/80  1646.3  operator.incl.pl1                 >ldd>incl>operator.incl.pl1
443         13    07/21/80  1646.3  semantic_bits.incl.pl1            >ldd>incl>semantic_bits.incl.pl1
444         14    08/13/81  2311.5  list.incl.pl1                     >ldd>incl>list.incl.pl1
446         15    12/07/83  1801.7  symbol.incl.pl1                   >ldd>incl>symbol.incl.pl1
447         16    07/21/80  1646.3  reference.incl.pl1                >ldd>incl>reference.incl.pl1
449         17    04/07/83  1735.0  statement.incl.pl1                >ldd>incl>statement.incl.pl1
451         18    05/03/76  1420.4  statement_types.incl.pl1          >ldd>incl>statement_types.incl.pl1
453         19    07/21/80  1646.3  nodes.incl.pl1                    >ldd>incl>nodes.incl.pl1
454         20    09/14/77  1805.7  token.incl.pl1                    >ldd>incl>token.incl.pl1
455         21    11/30/78  1327.4  token_types.incl.pl1              >ldd>incl>token_types.incl.pl1
456         22    12/07/83  1801.7  system.incl.pl1                   >ldd>incl>system.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
abort                           000010 internal static label variable           dcl 68 set ref 95* 108* 122* 372 411*
addr                                                   builtin function         dcl 71 ref 84 151 317 322
arg_descriptor           31(11)        based           bit(1)                   level 4 packed packed unaligned dcl 15-3 ref 425
assigned_to_entry_var
                         42(06)        based           bit(1)                   level 3 packed packed unaligned dcl 9-5 ref 255
attributes               31            based           structure                level 2 dcl 15-3
b                               000100 automatic       pointer                  dcl 34 set ref 91* 97 99 99 104 104 104 107 124 124
                                                                                  154* 159 162 165 167* 167 171 173* 173 177 178*
                                                                                  178 190* 191 193 205 206 218 225 251* 255 255 257
                                                                                  258 258 259 260 267 267 268 269 271 271 272 273
                                                                                  312 314
begin_block                            constant        bit(9)                   initial dcl 10-1 ref 104
bits                     13            based           structure                level 2 packed packed unaligned dcl 17-9
blk                                    parameter       pointer                  dcl 404 set ref 401 414*
block                                  based           structure                level 1 dcl 9-5
block_array                     000114 automatic       pointer                  array dcl 73 set ref 99* 190 218 225 225 225 251
block_type               24            based           bit(9)                   level 2 packed packed unaligned dcl 9-5 ref 104 255
brother                   2            based           pointer                  level 2 packed packed unaligned dcl 9-5 ref 171 173
changed                         000111 automatic       bit(1)                   packed unaligned dcl 66 set ref 186* 237* 245
context                         000120 automatic       bit(36)                  dcl 13-5 set ref 90* 151 154* 163* 317 319* 322
context_processor               000072 constant        entry                    external dcl 2-38 ref 95
convert$to_integer              000100 constant        entry                    external dcl 3-66 ref 428
convert_to_integer                     parameter       bit(1)                   dcl 404 ref 401 418
d                               000102 automatic       pointer                  dcl 34 set ref 107* 110 111 112 114* 115* 124* 125
                                                                                  126 128 128 128 132 133 137 141 143* 154 154 154
                                                                                  155* 319* 348* 350 352 356 357 365 365 365 365 368
                                                                                  380* 382 385 385 385 385 388
data_type                31            based           structure                level 3 packed packed unaligned dcl 15-3
debug                           000064 constant        entry                    external dcl 77 ref 148
declaration               4            based           pointer                  level 2 packed packed unaligned dcl 9-5 ref 107
declare                         000074 constant        entry                    external dcl 2-41 ref 114
def_context                            based           structure                level 1 dcl 13-8
do_statement                           constant        bit(9)                   initial dcl 18-3 ref 297
element                   1            based           pointer                  array level 2 packed packed unaligned dcl 14-6 set
                                                                                  ref 257 319* 319 324
end_statement                          constant        bit(9)                   initial dcl 18-3 ref 297
entry_statement                        constant        bit(9)                   initial dcl 18-3 ref 297 312
error                           000102 constant        entry                    external dcl 3-314 ref 257
error_                          000104 constant        entry                    external dcl 3-324 ref 365 385
error_$no_text                  000106 constant        entry                    external dcl 3-334 ref 368 388
exp                                    parameter       pointer                  dcl 404 set ref 401 414*
expression_semantics            000076 constant        entry                    external dcl 2-105 ref 154 319 414
fail                                   parameter       label variable           dcl 404 ref 401 411 415 429
father                    1            based           pointer                  level 2 packed packed unaligned dcl 9-5 ref 104 177
                                                                                  178 312
format_statement                       constant        bit(9)                   initial dcl 18-3 ref 297
free_temps               12(25)        based           bit(1)                   level 2 packed packed unaligned dcl 17-9 set ref
                                                                                  128* 132
goto_bit                        000112 automatic       bit(1)                   dcl 67 set ref 121* 297 332 334* 336*
goto_statement                         constant        bit(9)                   initial dcl 18-3 ref 334
had_error                       000014 internal static bit(1)                   packed unaligned dcl 69 set ref 391* 412* 415 429
i                               000106 automatic       fixed bin(15,0)          dcl 65 set ref 86* 87* 189* 190 198 204 204 213 231
                                                                                  232* 250* 251 255*
integer_type                    000000 constant        bit(36)                  initial dcl 22-71 ref 428
internal_procedure                     constant        bit(9)                   initial dcl 10-1 ref 255
ioa_                            000062 constant        entry                    external dcl 76 ref 147 353
j                               000107 automatic       fixed bin(15,0)          dcl 65 set ref 198* 199 213 218 225 231 231
k                               000110 automatic       fixed bin(15,0)          dcl 65 set ref 220* 225 225 231 231 231 232*
labels                    4            based           pointer                  level 2 packed packed unaligned dcl 17-9 ref 257 295
length                   12            based           fixed bin(11,0)          level 3 packed packed unaligned dcl 17-9 ref 365 385
list                                   based           structure                level 1 dcl 14-6
lookup_block                    000152 automatic       pointer                  dcl 291 set ref 312* 314* 319*
lptr                            000154 automatic       pointer                  dcl 291 set ref 295* 297 310 319 319 324* 324
m                                      parameter       fixed bin(15,0)          dcl 65 set ref 345 365* 368* 377 385* 388*
main                     13            based           pointer                  level 2 packed packed unaligned dcl 9-5 ref 124 257
never_referenced         42(12)        based           bit(1)                   level 3 packed packed unaligned dcl 9-5 set ref 259*
next                      6            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 15-3 in procedure
                                                                                  "semantic_translator" ref 115
next                      1            based           pointer                  level 2 in structure "statement" packed packed
                                                                                  unaligned dcl 17-9 in procedure
                                                                                  "semantic_translator" ref 155
no_owner                 42(08)        based           bit(1)                   level 3 packed packed unaligned dcl 9-5 set ref 268*
no_stack                 24(22)        based           bit(1)                   level 2 packed packed unaligned dcl 9-5 set ref 191
                                                                                  206* 258 260* 267 269* 273*
node                                   based           structure                level 1 dcl 19-27
null                                                   builtin function         dcl 71 ref 110 125 140 165 171 177 193 257 257 258
                                                                                  267 297 297 297 297 304 304 306 306 310 356
null_statement                         constant        bit(9)                   initial dcl 18-3 ref 297 357
number                   24(27)        based           fixed bin(9,0)           level 2 packed packed unsigned unaligned dcl 9-5 ref
                                                                                  99 104 104
operand                   1            based           pointer                  array level 2 packed packed unaligned dcl 12-6 ref
                                                                                  297 423
operator                               based           structure                level 1 dcl 12-6
operator_node                          constant        bit(9)                   initial dcl 19-5 ref 423
owner                    54            based           pointer                  level 2 dcl 9-5 set ref 193 218* 225 225* 258 267
                                                                                  271
pl1_stat_$LHS                   000032 external static pointer                  dcl 43 set ref 140*
pl1_stat_$abort_label           000042 external static label variable           dcl 47 ref 362
pl1_stat_$cur_block             000034 external static pointer                  dcl 44 set ref 97*
pl1_stat_$cur_statement         000036 external static pointer                  dcl 45 set ref 111* 115 126* 155 348 380 410*
pl1_stat_$debug_semant          000016 external static bit(1)                   dcl 36 ref 145 351
pl1_stat_$error_flag            000026 external static bit(1)                   dcl 36 set ref 361*
pl1_stat_$index                 000022 external static fixed bin(15,0)          dcl 36 set ref 371*
pl1_stat_$last_severity         000024 external static fixed bin(15,0)          dcl 36 ref 391
pl1_stat_$multi_type            000030 external static bit(1)                   dcl 36 ref 360 382
pl1_stat_$node_uses             000066 external static fixed bin(17,0)          array dcl 1-1 ref 73 73 73 86 87 87 87 104 104 104
                                                                                  189 198 198 198 204 204 204 213 213 213 220 231
                                                                                  231 231 231 231 231 231 231 231 232 232 232 250
                                                                                  255 255 255
pl1_stat_$profile_length        000060 external static fixed bin(31,0)          dcl 61 set ref 134* 134
pl1_stat_$quick_pt              000070 external static pointer                  dcl 1-3 set ref 84* 87 104 198 204 213 231 231 231
                                                                                  232 255
pl1_stat_$root                  000040 external static pointer                  dcl 46 set ref 91 95*
pl1_stat_$st_length             000056 external static fixed bin(11,0)          dcl 61 set ref 92*
pl1_stat_$st_start              000054 external static fixed bin(23,0)          dcl 61 set ref 92*
pl1_stat_$statement_id          000050 external static structure                level 1 packed packed unaligned dcl 54 set ref 93*
                                                                                  112* 128 141* 145
pl1_stat_$stmnt_unreachable     000020 external static bit(1)                   dcl 36 set ref 332*
pl1_stat_$stop_id               000052 external static bit(27)                  packed unaligned dcl 59 ref 145
pl1_stat_$util_abort            000044 external static entry variable           dcl 49 set ref 81*
pl1_stat_$util_error            000046 external static entry variable           dcl 49 set ref 82*
procedure_statement                    constant        bit(9)                   initial dcl 18-3 ref 312
processed                13            based           bit(1)                   level 3 packed packed unaligned dcl 17-9 ref 137
prologue                 11            based           pointer                  level 2 packed packed unaligned dcl 9-5 ref 124
prologue_flag            43            based           bit(1)                   level 2 packed packed unaligned dcl 9-5 set ref 159*
                                                                                  162*
put_in_profile           13(01)        based           bit(1)                   level 3 packed packed unaligned dcl 17-9 set ref
                                                                                  133*
quick_info                             based           bit                      array dcl 1-5 set ref 87* 104* 198 204 213 231* 231
                                                                                  231 232* 255
real_quick_info                 000113 automatic       bit                      array dcl 73 set ref 84
recursive_call           42(09)        based           bit(1)                   level 3 packed packed unaligned dcl 9-5 set ref 205*
                                                                                  272*
reference                              based           structure                level 1 dcl 16-3
return_statement                       constant        bit(9)                   initial dcl 18-3 ref 334
root                      3            based           pointer                  level 2 packed packed unaligned dcl 17-9 set ref
                                                                                  154* 154 297 352 356*
s                                      parameter       pointer                  dcl 291 ref 279 294 295 297
segment                  11            based           fixed bin(11,0)          level 3 packed packed unaligned dcl 17-9 ref 365 385
semantic_translator$abort       000110 constant        entry                    external dcl 3-446 ref 81
semantic_translator$error       000112 constant        entry                    external dcl 3-450 ref 82 297 304 306
son                       3            based           pointer                  level 2 packed packed unaligned dcl 9-5 ref 165 167
source                   11            based           structure                level 2 packed packed unaligned dcl 17-9
source_id                 0(09)        based           structure                level 2 in structure "statement" packed packed
                                                                                  unaligned dcl 17-9 in procedure
                                                                                  "semantic_translator" set ref 128 128 141 365*
                                                                                  385*
source_id                 0(09)        based           structure                level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 15-3 in procedure
                                                                                  "semantic_translator" set ref 112 368* 388*
st_type                         000156 automatic       bit(9)                   dcl 291 set ref 294* 297 297 297 297 297 312 312 334
                                                                                  334 334
start                    11(12)        based           fixed bin(23,0)          level 3 packed packed unaligned dcl 17-9 ref 365 385
statement                              based           structure                level 1 dcl 17-9
statement_node                         constant        bit(9)                   initial dcl 19-5 ref 350 382
statement_type           12(27)        based           bit(9)                   level 2 packed packed unaligned dcl 17-9 set ref 294
                                                                                  357*
stm                                    parameter       pointer                  dcl 404 set ref 401 410 414*
stop_statement                         constant        bit(9)                   initial dcl 18-3 ref 334
string                                                 builtin function         dcl 71 set ref 93* 112* 112 128 128 128 141* 141 145
substr                                                 builtin function         dcl 71 set ref 104* 204 213 231* 231 231 232*
suppress_cross_ref        0(13)        based           bit(1)                   level 2 packed packed unaligned dcl 13-8 set ref
                                                                                  317* 322*
symbol                    3            based           pointer                  level 2 in structure "reference" packed packed
                                                                                  unaligned dcl 16-3 in procedure
                                                                                  "semantic_translator" ref 425
symbol                                 based           structure                level 1 dcl 15-3 in procedure "semantic_translator"
t                                      parameter       pointer                  dcl 34 set ref 345 365* 368* 377 385* 388*
tk                              000104 automatic       pointer                  dcl 34 set ref 352* 353*
token_node                             constant        bit(9)                   initial dcl 19-5 ref 422
top                       0(05)        based           bit(1)                   level 2 packed packed unaligned dcl 13-8 set ref
                                                                                  151*
tp                              000114 automatic       pointer                  dcl 408 set ref 414* 418 421 428* 428* 433
tp1                             000116 automatic       pointer                  dcl 408 set ref 421* 422 423 423* 423 425
type                                   based           bit(9)                   level 2 packed packed unaligned dcl 19-27 ref 350
                                                                                  382 422 423
why_nonquick             42            based           structure                level 2 dcl 9-5

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
adjust_count                    000000 constant        entry                    external dcl 3-20
alloc_semantics                 000000 constant        entry                    external dcl 2-7
alloc_semantics$init_only       000000 constant        entry                    external dcl 2-12
allocate_statement                     internal static bit(9)                   initial dcl 18-3
and                                    internal static bit(9)                   initial dcl 21-3
arg_desc_type                          internal static bit(36)                  initial dcl 22-71
array_node                             internal static bit(9)                   initial dcl 19-5
arrow                                  internal static bit(9)                   initial dcl 21-3
assignment                             internal static bit(9)                   initial dcl 21-3
assignment_statement                   internal static bit(9)                   initial dcl 18-3
asterisk                               internal static bit(9)                   initial dcl 21-3
begin_statement                        internal static bit(9)                   initial dcl 18-3
bin_integer                            internal static bit(9)                   initial dcl 21-3
binary_to_octal_string          000000 constant        entry                    external dcl 3-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 3-43
bindec                          000000 constant        entry                    external dcl 3-23
bindec$vs                       000000 constant        entry                    external dcl 3-28
binoct                          000000 constant        entry                    external dcl 3-33
bit_string                             internal static bit(9)                   initial dcl 21-3
bit_type                               internal static bit(36)                  initial dcl 22-71
bits_per_binary_exponent               internal static fixed bin(31,0)          initial dcl 22-5
bits_per_character                     internal static fixed bin(31,0)          initial dcl 22-5
bits_per_decimal_digit                 internal static fixed bin(31,0)          initial dcl 22-5
bits_per_digit                         internal static fixed bin(31,1)          initial dcl 22-69
bits_per_double                        internal static fixed bin(31,0)          initial dcl 22-5
bits_per_half                          internal static fixed bin(31,0)          initial dcl 22-5
bits_per_packed_ptr                    internal static fixed bin(31,0)          initial dcl 22-5
bits_per_word                          internal static fixed bin(31,0)          initial dcl 22-5
block_node                             internal static bit(9)                   initial dcl 19-5
bound_node                             internal static bit(9)                   initial dcl 19-5
builtin                         000000 constant        entry                    external dcl 2-17
builtin_type                           internal static bit(36)                  initial dcl 22-71
by_compiler                            internal static bit(3)                   initial dcl 11-5
by_context                             internal static bit(3)                   initial dcl 11-5
by_declare                             internal static bit(3)                   initial dcl 11-5
by_explicit_context                    internal static bit(3)                   initial dcl 11-5
by_implication                         internal static bit(3)                   initial dcl 11-5
by_name_agg_node                       internal static bit(9)                   initial dcl 19-5
call_statement                         internal static bit(9)                   initial dcl 18-3
cat                                    internal static bit(9)                   initial dcl 21-3
char_string                            internal static bit(9)                   initial dcl 21-3
char_type                              internal static bit(36)                  initial dcl 22-71
characters_per_double                  internal static fixed bin(31,0)          initial dcl 22-5
characters_per_half                    internal static fixed bin(31,0)          initial dcl 22-5
characters_per_word                    internal static fixed bin(31,0)          initial dcl 22-5
check_star_extents              000000 constant        entry                    external dcl 2-27
close_statement                        internal static bit(9)                   initial dcl 18-3
colon                                  internal static bit(9)                   initial dcl 21-3
comma                                  internal static bit(9)                   initial dcl 21-3
compare_declaration             000000 constant        entry                    external dcl 2-31
compare_expression              000000 constant        entry                    external dcl 3-48
complex_type                           internal static bit(36)                  initial dcl 22-71
constant_length                 000000 constant        entry                    external dcl 3-54
context_node                           internal static bit(9)                   initial dcl 19-5
continue_statement                     internal static bit(9)                   initial dcl 18-3
convert                         000000 constant        entry                    external dcl 3-60
convert$from_builtin            000000 constant        entry                    external dcl 3-72
convert$to_target               000000 constant        entry                    external dcl 3-88
convert$to_target_fb            000000 constant        entry                    external dcl 3-82
convert$validate                000000 constant        entry                    external dcl 3-78
copy_expression                 000000 constant        entry                    external dcl 3-94
copy_expression$copy_sons       000000 constant        entry                    external dcl 3-99
copy_unique_expression          000000 constant        entry                    external dcl 3-103
create_array                    000000 constant        entry                    external dcl 3-108
create_block                    000000 constant        entry                    external dcl 3-112
create_bound                    000000 constant        entry                    external dcl 3-118
create_context                  000000 constant        entry                    external dcl 3-122
create_cross_reference          000000 constant        entry                    external dcl 3-128
create_default                  000000 constant        entry                    external dcl 3-132
create_identifier               000000 constant        entry                    external dcl 3-136
create_label                    000000 constant        entry                    external dcl 3-140
create_list                     000000 constant        entry                    external dcl 3-147
create_operator                 000000 constant        entry                    external dcl 3-152
create_reference                000000 constant        entry                    external dcl 3-158
create_statement                000000 constant        entry                    external dcl 3-163
create_statement$prologue       000000 constant        entry                    external dcl 3-171
create_storage                  000000 constant        entry                    external dcl 3-179
create_symbol                   000000 constant        entry                    external dcl 3-184
create_token                    000000 constant        entry                    external dcl 3-191
create_token$init_hash_table    000000 constant        entry                    external dcl 3-197
create_token$protected          000000 constant        entry                    external dcl 3-199
cross_reference_node                   internal static bit(9)                   initial dcl 19-5
dec_integer                            internal static bit(9)                   initial dcl 21-3
dec_integer_type                       internal static bit(36)                  initial dcl 22-71
decbin                          000000 constant        entry                    external dcl 3-206
declare_constant                000000 constant        entry                    external dcl 3-211
declare_constant$bit            000000 constant        entry                    external dcl 3-219
declare_constant$char           000000 constant        entry                    external dcl 3-224
declare_constant$desc           000000 constant        entry                    external dcl 3-229
declare_constant$integer        000000 constant        entry                    external dcl 3-234
declare_descriptor              000000 constant        entry                    external dcl 3-239
declare_descriptor$ctl          000000 constant        entry                    external dcl 3-249
declare_descriptor$param        000000 constant        entry                    external dcl 3-259
declare_integer                 000000 constant        entry                    external dcl 3-269
declare_picture                 000000 constant        entry                    external dcl 3-274
declare_picture_temp            000000 constant        entry                    external dcl 3-279
declare_pointer                 000000 constant        entry                    external dcl 3-287
declare_statement                      internal static bit(9)                   initial dcl 18-3
declare_structure               000000 constant        entry                    external dcl 2-44
declare_temporary               000000 constant        entry                    external dcl 3-292
decode_node_id                  000000 constant        entry                    external dcl 3-300
decode_source_id                000000 constant        entry                    external dcl 3-306
def_this_context                       based           structure                level 1 dcl 13-27
default_area_size                      internal static fixed bin(31,0)          initial dcl 22-5
default_fix_bin_p                      internal static fixed bin(31,0)          initial dcl 22-5
default_fix_dec_p                      internal static fixed bin(31,0)          initial dcl 22-5
default_flt_bin_p                      internal static fixed bin(31,0)          initial dcl 22-5
default_flt_dec_p                      internal static fixed bin(31,0)          initial dcl 22-5
default_node                           internal static bit(9)                   initial dcl 19-5
default_statement                      internal static bit(9)                   initial dcl 18-3
defined_reference               000000 constant        entry                    external dcl 2-47
delete_statement                       internal static bit(9)                   initial dcl 18-3
display_statement                      internal static bit(9)                   initial dcl 18-3
do_semantics                    000000 constant        entry                    external dcl 2-57
else_clause                            internal static bit(9)                   initial dcl 18-3
entry_var_type                         internal static bit(36)                  initial dcl 22-71
eq                                     internal static bit(9)                   initial dcl 21-3
error$omit_text                 000000 constant        entry                    external dcl 3-319
error_$finish                   000000 constant        entry                    external dcl 3-343
error_$initialize_error         000000 constant        entry                    external dcl 3-341
exit_statement                         internal static bit(9)                   initial dcl 18-3
expand_assign                   000000 constant        entry                    external dcl 2-62
expand_by_name                  000000 constant        entry                    external dcl 2-71
expand_infix                    000000 constant        entry                    external dcl 2-76
expand_initial                  000000 constant        entry                    external dcl 2-84
expand_prefix                   000000 constant        entry                    external dcl 2-89
expand_primitive                000000 constant        entry                    external dcl 2-97
expon                                  internal static bit(9)                   initial dcl 21-3
external_procedure                     internal static bit(9)                   initial dcl 10-1
fill_refer                      000000 constant        entry                    external dcl 2-113
fixed_bin                              internal static bit(9)                   initial dcl 21-3
fixed_dec                              internal static bit(9)                   initial dcl 21-3
float_bin                              internal static bit(9)                   initial dcl 21-3
float_dec                              internal static bit(9)                   initial dcl 21-3
format_value_node                      internal static bit(9)                   initial dcl 19-5
free_node                       000000 constant        entry                    external dcl 3-345
free_statement                         internal static bit(9)                   initial dcl 18-3
function                        000000 constant        entry                    external dcl 2-125
ge                                     internal static bit(9)                   initial dcl 21-3
generic_selector                000000 constant        entry                    external dcl 2-134
get_array_size                  000000 constant        entry                    external dcl 3-348
get_size                        000000 constant        entry                    external dcl 3-352
get_statement                          internal static bit(9)                   initial dcl 18-3
gt                                     internal static bit(9)                   initial dcl 21-3
i_bin_integer                          internal static bit(9)                   initial dcl 21-3
i_dec_integer                          internal static bit(9)                   initial dcl 21-3
i_fixed_bin                            internal static bit(9)                   initial dcl 21-3
i_fixed_dec                            internal static bit(9)                   initial dcl 21-3
i_float_bin                            internal static bit(9)                   initial dcl 21-3
i_float_dec                            internal static bit(9)                   initial dcl 21-3
identifier                             internal static bit(9)                   initial dcl 21-3
if_statement                           internal static bit(9)                   initial dcl 18-3
io_data_list_semantics          000000 constant        entry                    external dcl 2-143
io_data_list_semantics$format_list_semantics
                                000000 constant        entry                    external dcl 2-120
io_semantics                    000000 constant        entry                    external dcl 2-148
is_arith_constant                      internal static bit(9)                   initial dcl 21-47
is_arithmetic_constant                 internal static bit(9)                   initial dcl 21-47
is_constant                            internal static bit(9)                   initial dcl 21-47
is_decimal_constant                    internal static bit(9)                   initial dcl 21-47
is_delimiter                           internal static bit(9)                   initial dcl 21-47
is_float_constant                      internal static bit(9)                   initial dcl 21-47
is_identifier                          internal static bit(9)                   initial dcl 21-47
is_imaginary_constant                  internal static bit(9)                   initial dcl 21-47
is_integral_constant                   internal static bit(9)                   initial dcl 21-47
is_isub                                internal static bit(9)                   initial dcl 21-47
isub                                   internal static bit(9)                   initial dcl 21-3
label_array_element_node               internal static bit(9)                   initial dcl 19-5
label_node                             internal static bit(9)                   initial dcl 19-5
le                                     internal static bit(9)                   initial dcl 21-3
left_parn                              internal static bit(9)                   initial dcl 21-3
list_node                              internal static bit(9)                   initial dcl 19-5
local_label_var_type                   internal static bit(36)                  initial dcl 22-71
locate_statement                       internal static bit(9)                   initial dcl 18-3
lock_statement                         internal static bit(9)                   initial dcl 18-3
lookup                          000000 constant        entry                    external dcl 2-153
lt                                     internal static bit(9)                   initial dcl 21-3
machine_state_node                     internal static bit(9)                   initial dcl 19-5
make_non_quick                  000000 constant        entry                    external dcl 2-162
match_arguments                 000000 constant        entry                    external dcl 2-166
max_area_size                          internal static fixed bin(31,0)          initial dcl 22-5
max_bit_string                         internal static fixed bin(31,0)          initial dcl 22-5
max_bit_string_constant                internal static fixed bin(31,0)          initial dcl 22-5
max_block_number                       internal static fixed bin(17,0)          initial dcl 9-74
max_char_string                        internal static fixed bin(31,0)          initial dcl 22-5
max_char_string_constant               internal static fixed bin(31,0)          initial dcl 22-5
max_identifier_length                  internal static fixed bin(31,0)          initial dcl 22-5
max_index_register_value               internal static fixed bin(31,0)          initial dcl 22-5
max_length_precision                   internal static fixed bin(31,0)          initial dcl 22-5
max_list_elements                      internal static fixed bin(17,0)          initial dcl 14-12
max_number_of_dimensions               internal static fixed bin(31,0)          initial dcl 22-5
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 12-15
max_offset_precision                   internal static fixed bin(31,0)          initial dcl 22-5
max_p_bin_or_dec                       internal static fixed bin(31,0)          initial dcl 22-5
max_p_dec                              internal static fixed bin(31,0)          initial dcl 22-5
max_p_fix_bin_1                        internal static fixed bin(31,0)          initial dcl 22-5
max_p_fix_bin_2                        internal static fixed bin(31,0)          initial dcl 22-5
max_p_flt_bin_1                        internal static fixed bin(31,0)          initial dcl 22-5
max_p_flt_bin_2                        internal static fixed bin(31,0)          initial dcl 22-5
max_scale                              internal static fixed bin(31,0)          initial dcl 22-5
max_signed_index_register_value        internal static fixed bin(31,0)          initial dcl 22-5
max_signed_xreg_precision              internal static fixed bin(31,0)          initial dcl 22-5
max_uns_xreg_precision                 internal static fixed bin(31,0)          initial dcl 22-5
max_words_per_variable                 internal static fixed bin(31,0)          initial dcl 22-5
merge_attributes                000000 constant        entry                    external dcl 3-355
min_area_size                          internal static fixed bin(31,0)          initial dcl 22-5
min_scale                              internal static fixed bin(31,0)          initial dcl 22-5
minus                                  internal static bit(9)                   initial dcl 21-3
n                                      automatic       fixed bin(15,0)          dcl 65
ne                                     internal static bit(9)                   initial dcl 21-3
ngt                                    internal static bit(9)                   initial dcl 21-3
nlt                                    internal static bit(9)                   initial dcl 21-3
no_token                               internal static bit(9)                   initial dcl 21-3
not                                    internal static bit(9)                   initial dcl 21-3
offset_adder                    000000 constant        entry                    external dcl 2-172
on_statement                           internal static bit(9)                   initial dcl 18-3
on_unit                                internal static bit(9)                   initial dcl 10-1
open_statement                         internal static bit(9)                   initial dcl 18-3
operator_semantics              000000 constant        entry                    external dcl 2-184
optimizer                       000000 constant        entry                    external dcl 3-361
or                                     internal static bit(9)                   initial dcl 21-3
packed_digits_per_character            internal static fixed bin(31,0)          initial dcl 22-5
parse_error                     000000 constant        entry                    external dcl 3-364
parse_error$no_text             000000 constant        entry                    external dcl 3-368
percent                                internal static bit(9)                   initial dcl 21-3
period                                 internal static bit(9)                   initial dcl 21-3
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 3-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 3-372
pl1_print$for_lex               000000 constant        entry                    external dcl 3-418
pl1_print$non_varying           000000 constant        entry                    external dcl 3-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 3-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 3-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 3-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 3-414
pl1_print$varying               000000 constant        entry                    external dcl 3-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 3-395
plus                                   internal static bit(9)                   initial dcl 21-3
pointer_type                           internal static bit(36)                  initial dcl 22-71
propagate_bit                   000000 constant        entry                    external dcl 2-192
put_statement                          internal static bit(9)                   initial dcl 18-3
read_statement                         internal static bit(9)                   initial dcl 18-3
real_type                              internal static bit(36)                  initial dcl 22-71
refer_extent                    000000 constant        entry                    external dcl 3-426
reference_node                         internal static bit(9)                   initial dcl 19-5
reserve$clear                   000000 constant        entry                    external dcl 3-430
reserve$declare_lib             000000 constant        entry                    external dcl 3-434
reserve$read_lib                000000 constant        entry                    external dcl 3-439
revert_statement                       internal static bit(9)                   initial dcl 18-3
rewrite_statement                      internal static bit(9)                   initial dcl 18-3
right_parn                             internal static bit(9)                   initial dcl 21-3
root_block                             internal static bit(9)                   initial dcl 10-1
semantic_translator             000000 constant        entry                    external dcl 3-444
semantic_translator$call_es     000000 constant        entry                    external dcl 2-196
semi_colon                             internal static bit(9)                   initial dcl 21-3
sf_par_node                            internal static bit(9)                   initial dcl 19-5
share_expression                000000 constant        entry                    external dcl 3-454
signal_statement                       internal static bit(9)                   initial dcl 18-3
simplify_expression             000000 constant        entry                    external dcl 2-205
simplify_offset                 000000 constant        entry                    external dcl 2-212
slash                                  internal static bit(9)                   initial dcl 21-3
source_node                            internal static bit(9)                   initial dcl 19-5
storage_block_type                     internal static bit(36)                  initial dcl 22-71
subscripter                     000000 constant        entry                    external dcl 2-216
sym                                    automatic       pointer                  dcl 34
symbol_node                            internal static bit(9)                   initial dcl 19-5
system_on_unit                         internal static bit(9)                   initial dcl 18-3
temporary_node                         internal static bit(9)                   initial dcl 19-5
this_context                           automatic       bit(36)                  dcl 13-5
token                                  based           structure                level 1 dcl 20-3
token_to_binary                 000000 constant        entry                    external dcl 3-459
unknown_statement                      internal static bit(9)                   initial dcl 18-3
unlock_statement                       internal static bit(9)                   initial dcl 18-3
validate                        000000 constant        entry                    external dcl 2-225
wait_statement                         internal static bit(9)                   initial dcl 18-3
words_per_condition_var                internal static fixed bin(31,0)          initial dcl 22-5
words_per_entry_var                    internal static fixed bin(31,0)          initial dcl 22-5
words_per_file_var                     internal static fixed bin(31,0)          initial dcl 22-5
words_per_fix_bin_1                    internal static fixed bin(31,0)          initial dcl 22-5
words_per_fix_bin_2                    internal static fixed bin(31,0)          initial dcl 22-5
words_per_flt_bin_1                    internal static fixed bin(31,0)          initial dcl 22-5
words_per_flt_bin_2                    internal static fixed bin(31,0)          initial dcl 22-5
words_per_format                       internal static fixed bin(31,0)          initial dcl 22-5
words_per_label_var                    internal static fixed bin(31,0)          initial dcl 22-5
words_per_offset                       internal static fixed bin(31,0)          initial dcl 22-5
words_per_packed_pointer               internal static fixed bin(31,0)          initial dcl 22-5
words_per_pointer                      internal static fixed bin(31,0)          initial dcl 22-5
words_per_varying_string_header        internal static fixed bin(31,0)          initial dcl 22-5
write_statement                        internal static bit(9)                   initial dcl 18-3

NAMES DECLARED BY EXPLICIT CONTEXT.
abort                           001042 constant        entry                    external dcl 345
call_es                         001332 constant        entry                    external dcl 401
chk_err                         001453 constant        label                    dcl 429 ref 425
ck_brother                      000452 constant        label                    dcl 171 ref 179
error                           001210 constant        entry                    external dcl 377
loop                            000467 constant        label                    dcl 186 ref 245
next                            000674 constant        label                    dcl 239 ref 191 193 199 207 213
next_block                      000444 constant        label                    dcl 165
next_dcl                        000251 constant        label                    dcl 115 ref 108
next_stmnt                      000420 constant        label                    dcl 155 ref 122 137
process_label                   001473 constant        entry                    internal dcl 279 ref 143
scan                            000163 constant        label                    dcl 97 ref 168 174
semantic_translator             000063 constant        entry                    external dcl 23

NAME DECLARED BY CONTEXT OR IMPLICATION.
index                                                  builtin function         ref 198

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      2246        2362    1711        2256
Length      3242    1711       114         643     335           6

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
semantic_translator                 184 external procedure  is an external procedure.  
process_label                           internal procedure  shares stack frame of external procedure semantic_translator.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 abort                       semantic_translator
000014 had_error                   semantic_translator

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
semantic_translator      000100 b                           semantic_translator
                         000102 d                           semantic_translator
                         000104 tk                          semantic_translator
                         000106 i                           semantic_translator
                         000107 j                           semantic_translator
                         000110 k                           semantic_translator
                         000111 changed                     semantic_translator
                         000112 goto_bit                    semantic_translator
                         000113 real_quick_info             semantic_translator
                         000114 tp                          semantic_translator
                         000114 block_array                 semantic_translator
                         000116 tp1                         semantic_translator
                         000120 context                     semantic_translator
                         000152 lookup_block                process_label
                         000154 lptr                        process_label
                         000156 st_type                     process_label

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
r_ne_as             call_ext_out_desc   call_ext_out        return_mac          tra_ext_2           alloc_auto_adj
signal_op           ext_entry           index_bs_1_eis

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
context_processor             convert$to_integer            debug                         declare
error                         error_                        error_$no_text                expression_semantics
ioa_                          semantic_translator$abort     semantic_translator$error

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pl1_stat_$LHS                 pl1_stat_$abort_label         pl1_stat_$cur_block           pl1_stat_$cur_statement
pl1_stat_$debug_semant        pl1_stat_$error_flag          pl1_stat_$index               pl1_stat_$last_severity
pl1_stat_$multi_type          pl1_stat_$node_uses           pl1_stat_$profile_length      pl1_stat_$quick_pt
pl1_stat_$root                pl1_stat_$st_length           pl1_stat_$st_start            pl1_stat_$statement_id
pl1_stat_$stmnt_unreachable   pl1_stat_$stop_id             pl1_stat_$util_abort          pl1_stat_$util_error




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     73 000037        23 000062        81 000073        82 000101        84 000105        86 000107        87 000117
     88 000140        90 000142        91 000143        92 000147        93 000151        95 000153        97 000163
     99 000166       104 000174       107 000223       108 000225       110 000230       111 000234       112 000237
    114 000243       115 000251       117 000256       121 000257       122 000260       124 000264       125 000271
    126 000276       128 000301       132 000317       133 000322       134 000324       137 000325       140 000330
    141 000332       143 000336       145 000340       147 000347       148 000363       151 000370       154 000372
    155 000420       157 000425       159 000426       160 000431       162 000440       163 000443       165 000444
    167 000447       168 000451       171 000452       173 000456       174 000460       177 000461       178 000464
    179 000466       186 000467       189 000470       190 000501       191 000505       193 000510       198 000514
    199 000533       204 000534       205 000553       206 000555       207 000557       213 000560       218 000572
    220 000577       225 000607       231 000623       232 000664       233 000670       237 000672       239 000674
    245 000676       250 000700       251 000711       255 000715       257 000743       258 000765       259 000775
    260 000777       267 001001       268 001010       269 001012       270 001014       271 001015       272 001021
    273 001023       275 001025       277 001027       345 001036       348 001052       350 001056       351 001062
    352 001064       353 001067       354 001111       356 001112       357 001115       360 001117       361 001122
    362 001124       365 001126       367 001164       368 001165       371 001202       372 001204       377 001206
    380 001220       382 001224       385 001233       388 001272       391 001307       394 001315       401 001324
    410 001341       411 001346       412 001353       414 001354       415 001374       418 001402       421 001417
    422 001421       423 001425       425 001432       428 001437       429 001453       433 001461       279 001473
    294 001475       295 001502       297 001504       304 001550       306 001566       308 001603       310 001604
    312 001610       314 001621       317 001623       319 001625       322 001652       324 001654       325 001656
    332 001657       334 001662       336 001674       339 001675


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
