ASSEMBLY LISTING OF SEGMENT >special_ldd>install>MR12.0-1206>mailbox_.alm                    
ASSEMBLED ON:	11/05/86  1041.9 mst Wed
OPTIONS USED:	list 
ASSEMBLED BY:	ALM Version  6.7  October 1986  
ASSEMBLER CREATED:	10/08/86  1557.5 mst Wed

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Information Systems Inc., 1982 *
                                     4  " *                                                         *
                                     5  " * Copyright (c) 1972 by Massachusetts Institute of        *
                                     6  " * Technology and Honeywell Information Systems, Inc.      *
                                     7  " *                                                         *
                                     8  " ***********************************************************
                                     9  
    000000                          10  	name	mailbox_
                                    11  
                                    12  
                                    13  "	Gate to the version 2 and later mailbox message segment facility
                                    14  
                                    15  " 	Last modified: 02/01/79 W. Olin Sibert to convert from mexp to ALM.
                                    16  "	Modified: February 1983 by G. Palter to add validate, copy, compact_index, and
                                    17  "	   compact_file entrypoints
                                    18  "	Modified: October 1983 by G. Palter to add get_uid_file and
                                    19  "	   get_uid_index entrypoints
                                    20  "	Modified: November 1983 by G. Palter to add get_mode_file entrypoint
                                    21  "         Modified: 1984-10-11 BIM for general_read_* entrypoints
                                    22  "	Modified: 1985-04-22, BIM, new gate target.
                                    23  
                                    24  	include	gate_macros
                                   1-1  " BEGIN INCLUDE FILE ...... gate_macros.incl.alm
                                   1-2  "   Last modified 6/77 by N. Morris, B. Greenberg, & T. VanVleck
                                   1-3  "   Modified 741212 by PG to inhibit while computing virtual CPU time
                                   1-4  "   Modified 83-03-14 by E. N. Kittlitz to clear IR
                                   1-5  "   Modified 83-06-01 BIM for ring alarm polling
                                   1-6  "   Modified 85-04-03 by Keith Loepere to make polling a little smarter.
                                   1-7  
                                   1-8  " This file contains several macros used when generating gate segments.
                                   1-9  " The major macros that are defined are:
                                  1-10  "
                                  1-11  "	gate_info		general setup code for normal gates
                                  1-12  "	hardcore_gate_info	general setup code for hardcore gates
                                  1-13  "	bad_dir_handler	setup and handler for bad_dir_ condition (goes at bottom)
                                  1-14  "	bad_dir_handler_entry	entrypoint for above (goes at top)
                                  1-15  "	gate		to define a normal gate
                                  1-16  "	hgate		to define a hardcore gate
                                  1-17  "	fgate		to define a fast hardcore gate
                                  1-18  "
                                  1-19  
                                  1-20  
    000000                        1-21  	maclist	off
                                  1-22  
                                  1-23  
                                  1-24  " HGATE - define a hardcore gate entry
                                  1-25  "
                                  1-26  "	hgate	gatename,procedure,entry,args{,bad_dir_trap}
                                  1-27  "
                                  1-28  " The entrypoint gatename is defined in the gate segment.  If args
                                  1-29  " is nonzero, the number of arguments passed to gatename must be
                                  1-30  " equal to args.  When gatename is called, it will in turn call
                                  1-31  " procedure$entry.
                                  1-32  "
                                  1-33  
                                  1-34  macro	hgate
                              1   1-35  	gentry	&1,&4*2,&1.t
                              2   1-36  	tsx2	.setup
                              3   1-37  &=&5,bad_dir_trap&[	tsx0	.set_dir_trap
                              4   1-38  &]	ldi	=0,dl
                              5   1-39  	short_call &2$&3(ap|0)
                              6   1-40  	eppbp	lp|&1.t
                              7   1-41  	tra	.return_code
                              8   1-42  	maclist	restore
                              9   1-43  	use	linkage
                             10   1-44  	even
                             11   1-45  	maclist	on,save
                             12   1-46  &1.t:
                             13   1-47  	bss	,gate_entry_data_size
                             14   1-48  
                             15   1-49  	maclist	restore
                             16   1-50  &end
                                  1-51  
                                  1-52  
                                  1-53  " FGATE - define a fast hardcore gate
                                  1-54  "
                                  1-55  "	fgate	gatename,procedure,entry
                                  1-56  "
                                  1-57  
                                  1-58  macro	fgate
                              1   1-59  	gentry	&1,0,0
                              2   1-60  	ldi	=0,dl
                              3   1-61  	epplp	.my_lp,*
                              4   1-62  	tra	&2$&3
                              5   1-63  
                              6   1-64  	maclist	off
                              7   1-65  &end
                                  1-66  
                                  1-67  
                                  1-68  " GATE - define a normal gate entry
                                  1-69  "
                                  1-70  "	gate	gatename,procedure,entry,args
                                  1-71  "
                                  1-72  
                                  1-73  macro	gate
                              1   1-74  	gentry	&1,&4*2,0
                              2   1-75  	tsx2	.setup
                              3   1-76  	ldi	=0,dl
                              4   1-77  	short_call &2$&3(ap|0)
                              5   1-78  	return
                              6   1-79  
                              7   1-80  	maclist	restore
                              8   1-81  &end
                                  1-82  
                                  1-83  
                                  1-84  
                                  1-85  macro	gentry
                              1   1-86  	maclist	on,save
                              2   1-87  	segdef	&1
                              3   1-88  	maclist	restore
                              4   1-89  	use	transfer_vector
                              5   1-90  	maclist	on,save
                              6   1-91  &1:
                              7   1-92  	tra	&1.e
                              8   1-93  	maclist	restore
                              9   1-94  	use	main
                             10   1-95  	maclist	on,save
                             11   1-96  	zero	&2,&3
                             12   1-97  &1.e:
                             13   1-98  &end
                                  1-99  
                                 1-100  
                                 1-101  " HARDCORE_GATE_INFO - general info for hardcore gates
                                 1-102  
                                 1-103  macro	hardcore_gate_info
                              1  1-104  	maclist	on,save
                              2  1-105  	name	&1
                              3  1-106  
                              4  1-107  	include	stack_header
                              5  1-108  
                              6  1-109  	include	stack_frame
                              7  1-110  	include	gate_data
                              8  1-111  
                              9  1-112  	maclist	restore
                             10  1-113  	eject
                             11  1-114  
                             12  1-115  	tempd	.temp
                             13  1-116  	tempd	.label_variable(0)
                             14  1-117  	tempd	.time1,.time2
                             15  1-118  	tempd	.unwinder_arglist(0)
                             16  1-119  	tempd	.on_unit(5)
                             17  1-120  	temp	.pf,.entryp
                             18  1-121  	tempd	.vfl_arglist(2)
                             19  1-122  	tempd	.mcptr
                             20  1-123  
                             21  1-124  	use	transfer_vector
                             22  1-125  	equ	.tv_begin,*
                             23  1-126  
                             24  1-127  	tra	.actor
                             25  1-128  
                             26  1-129  	use	tv_end
                             27  1-130  	entrybound
                             28  1-131  
                             29  1-132  	segdef	.tv_end
                             30  1-133  .tv_end:	vfd	14/(*-.tv_begin)
                             31  1-134  
                             32  1-135  	use	main
                             33  1-136  
                             34  1-137  	segdef	.my_lp
                             35  1-138  	even
                             36  1-139  .my_lp:	bss	,2
                             37  1-140  
                             38  1-141  	join	/text/transfer_vector,tv_end,main
                             39  1-142  
                             40  1-143  	use	linkage
                             41  1-144  	join	/link/linkage
                             42  1-145  
                             43  1-146  	use	main
                             44  1-147  
                             45  1-148  	maclist	restore
                             46  1-149  	eject
                             47  1-150  
                             48  1-151  .actor:	epplp	.my_lp,*
                             49  1-152  	maclist	restore
                             50  1-153  	gate_actor
                             51  1-154  
                             52  1-155  
                             53  1-156  
                             54  1-157  .setup:	push
                             55  1-158  	epplp	.my_lp,*
                             56  1-159  	sprilp	sp|stack_frame.lp_ptr
                             57  1-160  
                             58  1-161  	maclist	restore
                             59  1-162  	gcheck
                             60  1-163  
                             61  1-164  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
                             62  1-165  	rccl	sys_info$clock_,*	calculate times
                             63  1-166  	sbaq	pds$cpu_time
                             64  1-167  	staq	.time1
                             65  1-168  	sbaq	pds$virtual_delta
                             66  1-169  	staq	.time2
                             67  1-170  	lda	pds$page_waits
                             68  1-171  	sta	.pf
                             69  1-172  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                             70  1-173  	tra	0,2
                             71  1-174  
                             72  1-175  	maclist	restore
                             73  1-176  	eject
                             74  1-177  
                             75  1-178  .return_code:
                             76  1-179  
                             77  1-180  	inhibit	on	<+><+><+><+><+><+><+><+><+><+><+><+>
                             78  1-181  	rccl	sys_info$clock_,*	calculate times
                             79  1-182  	sbaq	pds$cpu_time
                             80  1-183  	staq	.temp
                             81  1-184  	sbaq	.time1
                             82  1-185  	adaq	bp|gate_entry_data.cpu_time
                             83  1-186  	staq	bp|gate_entry_data.cpu_time
                             84  1-187  	ldaq	.temp
                             85  1-188  	sbaq	pds$virtual_delta
                             86  1-189  	sbaq	.time2
                             87  1-190  	adaq	bp|gate_entry_data.vcpu_time
                             88  1-191  	staq	bp|gate_entry_data.vcpu_time
                             89  1-192  	lda	pds$page_waits
                             90  1-193  	sbla	.pf
                             91  1-194  	asa	bp|gate_entry_data.page_waits
                             92  1-195  	aos	bp|gate_entry_data.calls
                             93  1-196  	inhibit	off	<-><-><-><-><-><-><-><-><-><-><-><->
                             94  1-197  
                             95  1-198  			" Poll for ring alarms
                             96  1-199  	sra	.temp	Borrow from time calc
                             97  1-200  	szn	.temp	Zero?
                             98  1-201  	tze	.return_code_return
                             99  1-202  
                            100  1-203  	epp1	sp|stack_frame.prev_sp,*	"possible ring alarm
                            101  1-204  	epaq	pr1|stack_frame.return_ptr,*
                            102  1-205  	ana	7,dl	" ring number to which we return
                            103  1-206  	cmpa	.temp
                            104  1-207  	tpl	.ring_alarm	" ring alarm will occur
                            105  1-208  
                            106  1-209  .return_code_return:
                            107  1-210  	return
                            108  1-211  
                            109  1-212  .ring_alarm:		" perhaps we can handle without faults?
                            110  1-213  
                            111  1-214  	aos	bp|gate_entry_data.ring_alarms
                            112  1-215  	stz	.temp	" return argument for ring_alarm$poll
                            113  1-216  	ldaq	.one_arg_header
                            114  1-217  	staq	.ring_alarm_arg_list
                            115  1-218  	epp1	.temp
                            116  1-219  	spri1	.ring_alarm_arg_list+2
                            117  1-220  	eppap	.ring_alarm_arg_list
                            118  1-221  	short_call ring_alarm$poll
                            119  1-222  	szn	.temp
                            120  1-223  	tze	.return_code_return
                            121  1-224  	eppsp	sp|stack_frame.prev_sp,*
                            122  1-225  	sprisp	pds$pre_empt_poll_return          " short-return from here
                            123  1-226  	epp1	sb|stack_header.stack_begin_ptr,* " abandoning this stack frame.
                            124  1-227  	spri1	sb|stack_header.stack_end_ptr
                            125  1-228  " Leave SB as stack_0, so pxss can get to operators.
                            126  1-229  	tra	pxss$pre_empt_poll
                            127  1-230  
                            128  1-231  	tempd	.ring_alarm_arg_list(2)
                            129  1-232  	even
                            130  1-233  .one_arg_header:
                            131  1-234  	vfd	17/2,1/0,18/4
                            132  1-235  	vfd	18/0,18/0
                            133  1-236  
                            134  1-237  
                            135  1-238  	maclist	restore
                            136  1-239  	eject
                            137  1-240  	maclist	restore
                            138  1-241  &end
                                 1-242  
                                 1-243  
                                 1-244  " BAD_DIR_HANDLER - code to setup and handle bad_dir_ condition
                                 1-245  "			put this after the last hgate macro
                                 1-246  
                                 1-247  macro	bad_dir_handler
                              1  1-248  	maclist	on,save
                              2  1-249  
                              3  1-250  	include	on_unit
                              4  1-251  
                              5  1-252  	use	transfer_vector
                              6  1-253  .handler_entry:
                              7  1-254  	tra	.handler
                              8  1-255  .handler_restart_entry:
                              9  1-256  	tra	.handler_restart_point
                             10  1-257  
                             11  1-258  	use	main
                             12  1-259  .set_dir_trap:
                             13  1-260  	stx0	.entryp		save for restart
                             14  1-261  
                             15  1-262  	mlr	(),(pr),fill(000)
                             16  1-263  	desc9a	0,0
                             17  1-264  	desc9a	.on_unit,10*4
                             18  1-265  	eppbp	.bad_dir_name
                             19  1-266  	spribp	.on_unit+on_unit.name
                             20  1-267  	eppbp	.handler_entry
                             21  1-268  	spribp	.on_unit+on_unit.body
                             22  1-269  	lxl1	.bad_dir_desc
                             23  1-270  	sxl1	.on_unit+on_unit.size
                             24  1-271  	eaa	.on_unit		set up on-unit for bad_dir_
                             25  1-272  	sbla	sp|0,du		.. make rel to sp
                             26  1-273  	sta	sp|stack_frame.on_unit_rel_ptrs
                             27  1-274  	lda	stack_frame.condition_bit,dl
                             28  1-275  	orsa	sp|stack_frame.flag_word
                             29  1-276  	tra	0,0
                             30  1-277  
                             31  1-278  	string	bad_dir_
                             32  1-279  
                             33  1-280  
                             34  1-281  
                             35  1-282  .handler:	epaq	sp|0		verify that call came from ring 0
                             36  1-283  	cana	-1,dl		check ring number in AL
                             37  1-284  	tze	*+2
                             38  1-285  	zero	0		go way kid you bother me
                             39  1-286  
                             40  1-287  	push			" ok, we like the call
                             41  1-288  	epplp	.my_lp,*
                             42  1-289  	ldx0	ap|0		get display
                             43  1-290  	eppbp	ap|2,0*
                             44  1-291  	lda	bp|stack_frame.prev_sp
                             45  1-292  	cana	=o700000,dl	from another ring?
                             46  1-293  	tze	.continue_signal	if not, back to signal_
                             47  1-294  	eppap	ap|2,*		Get mcptr
                             48  1-295  	eppap	ap|0,*		..
                             49  1-296  	spriap	bp|.mcptr		.. save in gate frame
                             50  1-297  	spribp	.label_variable+2
                             51  1-298  	eppbp	.handler_restart_entry
                             52  1-299  	spribp	.label_variable
                             53  1-300  	eppbp	.label_variable
                             54  1-301  	spribp	.unwinder_arglist+2
                             55  1-302  	fld	=1b24,dl
                             56  1-303  	staq	.unwinder_arglist
                             57  1-304  	call	unwinder_$unwinder_(.unwinder_arglist)
                             58  1-305  
                             59  1-306  .continue_signal:
                             60  1-307  	lda	=o400000,du	"1"b
                             61  1-308  	sta	ap|10,*		set continue bit
                             62  1-309  	return
                             63  1-310  
                             64  1-311  .handler_restart_point:
                             65  1-312  	epaq	sp|0		check that call came from ring 0
                             66  1-313  	cana	-1,dl
                             67  1-314  	tze	*+2
                             68  1-315  	zero	1
                             69  1-316  	epplp	.my_lp,*
                             70  1-317  	lca	stack_frame.condition_bit+1,dl  Vanish on-unit
                             71  1-318  	ansa	sp|stack_frame.flag_word
                             72  1-319  	eppbp	.mcptr
                             73  1-320  	spribp	.vfl_arglist+2
                             74  1-321  	fld	=1b24,dl
                             75  1-322  	staq	.vfl_arglist
                             76  1-323  	short_call  verify_lock$verify_lock_bad_dir(.vfl_arglist)
                             77  1-324  	ldx0	.entryp
                             78  1-325  	eppap	sp|stack_frame.arg_ptr,*
                             79  1-326  	tra	0,0		retry the call
                             80  1-327  
                             81  1-328  	maclist	restore
                             82  1-329  	eject
                             83  1-330  	maclist	restore
                             84  1-331  &end
                                 1-332  
                                 1-333  
                                 1-334  " GATE_INFO - general info for non-hardcore gates
                                 1-335  
                                 1-336  macro	gate_info
                              1  1-337  	maclist	on,save
                              2  1-338  	use	transfer_vector
                              3  1-339  	tra	.actor
                              4  1-340  
                              5  1-341  	use	tv_end
                              6  1-342  	entrybound
                              7  1-343  
                              8  1-344  	use	main
                              9  1-345  	join	/text/transfer_vector,tv_end,main
                             10  1-346  
                             11  1-347  	maclist	restore
                             12  1-348  	eject
                             13  1-349  
                             14  1-350  .actor:	getlp
                             15  1-351  	maclist	restore
                             16  1-352  	gate_actor
                             17  1-353  
                             18  1-354  	maclist	restore
                             19  1-355  	eject
                             20  1-356  
                             21  1-357  .setup:	push
                             22  1-358  	getlp
                             23  1-359  	maclist	restore
                             24  1-360  	gcheck
                             25  1-361  	tra	0,2
                             26  1-362  
                             27  1-363  	maclist	restore
                             28  1-364  	eject
                             29  1-365  
                             30  1-366  	maclist	restore
                             31  1-367  &end
                                 1-368  
                                 1-369  
                                 1-370  " Macro to generate gate actor.
                                 1-371  
                                 1-372  macro	gate_actor
                              1  1-373  	maclist	on,save
                              2  1-374  	eppbp	ap|2,*
                              3  1-375  	lda	bp|-1		get length of string
                              4  1-376  	tze	.return_name	zero length => get name
                              5  1-377  
                              6  1-378  	adla	1,dl		include length of acc
                              7  1-379  	stz	ap|4,*
                              8  1-380  	tsx0	.search_defs
                              9  1-381  
                             10  1-382  	cmpc	(pr,rl),(pr,rl)	compare name
                             11  1-383  	desc9a	bp|-1(3),al
                             12  1-384  	desc9a	bb|0,al
                             13  1-385  	tnz	.next_def
                             14  1-386  
                             15  1-387  	lda	ab|1,2		return location
                             16  1-388  	arl	18
                             17  1-389  	sta	ap|4,*
                             18  1-390  
                             19  1-391  	short_return
                             20  1-392  
                             21  1-393  .return_name:
                             22  1-394  	lxl3	ap|4,*		get location
                             23  1-395  	tsx0	.search_defs
                             24  1-396  
                             25  1-397  	cmpx3	ab|1,2		compare location
                             26  1-398  	tnz	.next_def
                             27  1-399  
                             28  1-400  	lda	bb|0		get length of name
                             29  1-401  	arl	27
                             30  1-402  	sta	bp|-1		set length of varying string
                             31  1-403  	mlr	(pr,rl),(pr,rl)	return string
                             32  1-404  	desc9a	bb|0(1),al
                             33  1-405  	desc9a	bp|0,al
                             34  1-406  
                             35  1-407  	short_return
                             36  1-408  
                             37  1-409  .search_defs:
                             38  1-410  	eax2	0
                             39  1-411  	eppab	lp|0,*		ab -> defs
                             40  1-412  .defs_loop:
                             41  1-413  	lxl1	ab|1,2		get class and flags
                             42  1-414  	cmpx1	=o400000,du	must be class 0
                             43  1-415  	tnz	.next_def
                             44  1-416  
                             45  1-417  	ldx7	ab|2,2
                             46  1-418  	eppbb	ab|0,7		bb -> name
                             47  1-419  	tra	0,0		test definition
                             48  1-420  .next_def:
                             49  1-421  	ldx2	ab|0,2		chain to next def
                             50  1-422  	tnz	.defs_loop
                             51  1-423  
                             52  1-424  	short_return
                             53  1-425  
                             54  1-426  &end
                                 1-427  
                                 1-428  
                                 1-429  " Miscellaneous macros.
                                 1-430  
                                 1-431  macro	gcheck
                              1  1-432  	maclist	on,save
                              2  1-433  	ldx1	-2,2		get number of args expected
                              3  1-434  	tze	.no_gate_error	if zero, none or doesn't matter
                              4  1-435  	cmpx1	ap|0		compare against number given
                              5  1-436  	tze	.no_gate_error	args match, call procedure
                              6  1-437  
                              7  1-438  	call	signal_$signal_(signal_arglist)
                              8  1-439  	oct	0
                              9  1-440  
                             10  1-441  	even
                             11  1-442  signal_arglist:
                             12  1-443  	zero	2,4
                             13  1-444  	zero	2,0
                             14  1-445  	arg	.gate_errorname
                             15  1-446  	arg
                             16  1-447  	arg	.gate_errordesc
                             17  1-448  	arg
                             18  1-449  
                             19  1-450  	string	gate_error
                             20  1-451  
                             21  1-452  
                             22  1-453  .no_gate_error:
                             23  1-454  &end
                                 1-455  
                                 1-456  macro	string
                              1  1-457  .&1name:
                              2  1-458  	aci	"&1"
                              3  1-459  .&1desc:
                              4  1-460  	vfd	o9/525,o27/&l1
                              5  1-461  
                              6  1-462  &end
                                 1-463  
                                 1-464  macro	eject
                              1  1-465  	maclist	on,save
                              2  1-466  
                              3  1-467  &end
                                 1-468  
                                 1-469  " END INCLUDE FILE ...... gate_macros.incl.alm
                                 1-470  
                                 1-471  "  To arrange the return it wants to return, it will have to reach back  2 frames.
                                    25  
                                    26  	include	stack_header
                                   2-1  "	BEGIN INCLUDE FILE ... stack_header.incl.alm  3/72  Bill Silver
                                   2-2  "
                                   2-3  "	modified 7/76 by M. Weaver for *system links and more system use of areas
                                   2-4  "	modified 3/77 by M. Weaver  to add rnt_ptr
                                   2-5  "	modified 7/77 by S. Webber to add run_unit_depth and assign_linkage_ptr
                                   2-6  "	modified 6/83 by J. Ives to add trace_frames and in_trace.
                                   2-7  
                                   2-8  " HISTORY COMMENTS:
                                   2-9  "  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396),
                                  2-10  "     audit(86-08-05,Schroth), install(86-11-03,MR12.0-1206):
                                  2-11  "     added the heap_header_ptr definition
                                  2-12  "  2) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
                                  2-13  "     audit(86-10-10,Fawcett), install(86-11-03,MR12.0-1206):
                                  2-14  "     Modified to support control point management.  These changes were
                                  2-15  "     actually made in February 1985 by G. Palter.
                                  2-16  "  3) change(86-10-22,Fawcett), approve(86-10-22,MCR7473),
                                  2-17  "     audit(86-10-22,Farley), install(86-11-03,MR12.0-1206):
                                  2-18  "     Remove the old_lot pointer and replace it with cpm_data_ptr. Use the 18
                                  2-19  "     bit pad after cur_lot_size for the cpm_enabled. This was done to save
                                  2-20  "     some space int the stack header and change the cpd_ptr unal to
                                  2-21  "     cpm_data_ptr (ITS pair).
                                  2-22  "                                                      END HISTORY COMMENTS
                                  2-23  
                        000004    2-24  	equ	stack_header.cpm_data_ptr,4		ptr to control point for this stack
                        000006    2-25  	equ	stack_header.combined_stat_ptr,6	ptr to separate static area
                                  2-26  
                        000010    2-27  	equ	stack_header.clr_ptr,8		ptr to area containing linkage sections
                        000012    2-28  	equ	stack_header.max_lot_size,10		number of words allowed in lot (DU)
                        000012    2-29  	equ	stack_header.main_proc_invoked,10	nonzero if main proc was invoked in run unit (DL)
                        000012    2-30  	equ	stack_header.run_unit_depth,10	number of active run units stacked (DL)
                        000013    2-31  	equ	stack_header.cur_lot_size,11		DU number of words (entries) in lot
                        000013    2-32            equ	stack_header.cpm_enabled,11		DL  non-zero if control point management is enabled
                        000014    2-33  	equ	stack_header.system_free_ptr,12	ptr to system storage area
                        000016    2-34  	equ	stack_header.user_free_ptr,14		ptr to user storage area
                                  2-35  
                        000020    2-36  	equ	stack_header.parent_ptr,16		ptr to parent stack or null
                        000022    2-37  	equ	stack_header.stack_begin_ptr,18	ptr to first stack frame
                        000024    2-38  	equ	stack_header.stack_end_ptr,20		ptr to next useable stack frame
                        000026    2-39  	equ	stack_header.lot_ptr,22		ptr to the lot for the current ring
                                  2-40  
                        000030    2-41  	equ	stack_header.signal_ptr,24		ptr to signal proc for current ring
                        000032    2-42  	equ	stack_header.bar_mode_sp,26		value of sp before entering bar mode
                        000034    2-43  	equ	stack_header.pl1_operators_ptr,28	ptr: pl1_operators_$operator_table
                        000036    2-44  	equ	stack_header.call_op_ptr,30		ptr to standard call operator
                                  2-45  
                        000040    2-46  	equ	stack_header.push_op_ptr,32		ptr to standard push operator
                        000042    2-47  	equ	stack_header.return_op_ptr,34		ptr to standard return operator
                        000044    2-48  	equ	stack_header.ret_no_pop_op_ptr,36	ptr: stand. return/ no pop operator
                        000046    2-49  	equ	stack_header.entry_op_ptr,38		ptr to standard entry operator
                                  2-50  
                        000050    2-51  	equ	stack_header.trans_op_tv_ptr,40	ptr to table of translator operator ptrs
                        000052    2-52  	equ	stack_header.isot_ptr,42		pointer to ISOT
                        000054    2-53  	equ	stack_header.sct_ptr,44		pointer to System Condition Table
                        000056    2-54  	equ	stack_header.unwinder_ptr,46		pointer to unwinder for current ring
                                  2-55  
                        000060    2-56  	equ	stack_header.sys_link_info_ptr,48	ptr to *system link name table
                        000062    2-57  	equ	stack_header.rnt_ptr,50		ptr to reference name table
                        000064    2-58  	equ	stack_header.ect_ptr,52		ptr to event channel table
                        000066    2-59  	equ	stack_header.assign_linkage_ptr,54	ptr to area for hcs_$assign_linkage calls
                        000070    2-60  	equ	stack_header.heap_header_ptr,56	ptr to heap header.
                        000072    2-61  	equ	stack_header.trace_frames,58		stack of trace_catch_ frames
                        000073    2-62  	equ	stach_header.trace_top_ptr,59		trace pointer
                        000074    2-63  	equ	stack_header.in_trace,60		trace antirecurse bit
                        000100    2-64  	equ	stack_header_end,64			length of stack header
                                  2-65  
                                  2-66  
                                  2-67  
                                  2-68  
                        000000    2-69  	equ	trace_frames.count,0		number of trace frames on stack
                        000001    2-70  	equ	trace_frames.top_ptr,1		packed pointer to top one
                                  2-71  
                                  2-72  "	The  following constant is an offset within the  pl1  operators table.
                                  2-73  "	It  references a  transfer vector table.
                                  2-74  
                        000551    2-75  	bool	tv_offset,551
                                  2-76  
                                  2-77  
                                  2-78  "	The  following constants are offsets within this transfer vector table.
                                  2-79  
                        001170    2-80  	equ	call_offset,tv_offset+271
                        001171    2-81  	equ	push_offset,tv_offset+272
                        001172    2-82  	equ	return_offset,tv_offset+273
                        001173    2-83  	equ	return_no_pop_offset,tv_offset+274
                        001174    2-84  	equ	entry_offset,tv_offset+275
                                  2-85  
                                  2-86  
                                  2-87  " 	END INCLUDE FILE stack_header.incl.alm
                                    27  	include	stack_frame
                                   3-1  "
                                   3-2  "	BEGIN INCLUDE FILE ... stack_frame.incl.alm   6/72 RBS
                                   3-3  "
                                   3-4  " Modified: 16 Dec 1977, D. Levin - to add fio_ps_ptr
                                   3-5  " Modified:  3 Feb 1978, P. Krupp - to add run_unit_manager_bit & main_proc_bit
                                   3-6  " Modified: 21 March 1978, D. Levin - change fio_ps_ptr to support_ptr
                                   3-7  "
                        000020     3-8  	equ	stack_frame.prev_sp,16
                        000020     3-9  	equ	stack_frame.condition_word,16
                        000022    3-10  	equ	stack_frame.next_sp,18
                        000022    3-11  	equ	stack_frame.signaller_word,18
                        000024    3-12  	equ	stack_frame.return_ptr,20
                        000026    3-13  	equ	stack_frame.entry_ptr,22
                        000030    3-14  	equ	stack_frame.operator_ptr,24
                        000030    3-15  	equ	stack_frame.lp_ptr,24
                        000032    3-16  	equ	stack_frame.arg_ptr,26
                        000034    3-17  	equ	stack_frame.static_ptr,28
                        000035    3-18  	equ	stack_frame.support_ptr,29	" only used by fortran I/O
                        000036    3-19  	equ	stack_frame.on_unit_rel_ptrs,30
                        000037    3-20  	equ	stack_frame.operator_ret_ptr,31
                        000037    3-21  	equ	stack_frame.translator_id,31
                        000040    3-22  	equ	stack_frame.regs,32
                        000060    3-23  	equ	stack_frame.min_length,48
                        000020    3-24  	equ	stack_frame.flag_word,16
                        020000    3-25  	bool	stack_frame.main_proc_bit,020000	(DL)
                        010000    3-26  	bool	stack_frame.run_unit_manager,010000	(DL)
                        004000    3-27  	bool	stack_frame.signal_bit,004000		(DL)
                        002000    3-28  	bool	stack_frame.crawl_out_bit,002000	(DL)
                        001000    3-29  	bool	stack_frame.signaller_bit,001000	(DL)
                        000400    3-30  	bool	stack_frame.link_trap_bit,000400	(DL)
                        000200    3-31  	bool	stack_frame.support_bit,000200	(DL)
                        000100    3-32  	bool	stack_frame.condition_bit,000100	(DL)
                                  3-33  
                                  3-34  "
                                  3-35  "	END INCLUDE FILE  ... stack_frame.incl.alm
                                  3-36  "
                                    28  
                                    29  	gate_info
                                        	use	transfer_vector
    000000  0a   000044 7100 00         	tra	.actor
                                        
                                        	use	tv_end
                                        	entrybound
                                        
                                        	use	main
                                        	join	/text/transfer_vector,tv_end,main
                                        
                                        
                                        
    000044  aa  7 00046 2721 20         .actor:	getlp
    000045  aa  0 00002 3521 20         	eppbp	ap|2,*
    000046  aa  2 77777 2351 00         	lda	bp|-1		get length of string
    000047  0a   000063 6000 00         	tze	.return_name	zero length => get name
                                        
    000050  aa   000001 0350 07         	adla	1,dl		include length of acc
    000051  aa  0 00004 4501 20         	stz	ap|4,*
    000052  0a   000076 7000 00         	tsx0	.search_defs
                                        
    000053  aa  0 00140 1065 40         	cmpc	(pr,rl),(pr,rl)	compare name
    000054  aa   277777 600005          	desc9a	bp|-1(3),al
    000055  aa   300000 000005          	desc9a	bb|0,al
    000056  0a   000106 6010 00         	tnz	.next_def
                                        
    000057  aa  1 00001 2351 12         	lda	ab|1,2		return location
    000060  aa   000022 7710 00         	arl	18
    000061  aa  0 00004 7551 20         	sta	ap|4,*
                                        
    000062  aa  7 00044 7101 20         	short_return
                                        
    000063                              .return_name:
    000063  aa  0 00004 7231 20         	lxl3	ap|4,*		get location
    000064  0a   000076 7000 00         	tsx0	.search_defs
                                        
    000065  aa  1 00001 1031 12         	cmpx3	ab|1,2		compare location
    000066  0a   000106 6010 00         	tnz	.next_def
                                        
    000067  aa  3 00000 2351 00         	lda	bb|0		get length of name
    000070  aa   000033 7710 00         	arl	27
    000071  aa  2 77777 7551 00         	sta	bp|-1		set length of varying string
    000072  aa  0 00140 1005 40         	mlr	(pr,rl),(pr,rl)	return string
    000073  aa   300000 200005          	desc9a	bb|0(1),al
    000074  aa   200000 000005          	desc9a	bp|0,al
                                        
    000075  aa  7 00044 7101 20         	short_return
                                        
    000076                              .search_defs:
    000076  aa   000000 6220 00         	eax2	0
    000077  aa  4 00000 3515 20         	eppab	lp|0,*		ab -> defs
    000100                              .defs_loop:
    000100  aa  1 00001 7211 12         	lxl1	ab|1,2		get class and flags
    000101  aa   400000 1010 03         	cmpx1	=o400000,du	must be class 0
    000102  0a   000106 6010 00         	tnz	.next_def
                                        
    000103  aa  1 00002 2271 12         	ldx7	ab|2,2
    000104  aa  1 00000 3535 17         	eppbb	ab|0,7		bb -> name
    000105  aa   000000 7100 10         	tra	0,0		test definition
    000106                              .next_def:
    000106  aa  1 00000 2221 12         	ldx2	ab|0,2		chain to next def
    000107  0a   000100 6010 00         	tnz	.defs_loop
                                        
    000110  aa  7 00044 7101 20         	short_return
                                        
                                        
                                        
                                        
    000111  aa   000060 6270 00         .setup:	push
    000112  aa  7 00040 2721 20
    000113  aa  7 00046 2721 20         	getlp
    000114  aa   777776 2210 12         	ldx1	-2,2		get number of args expected
    000115  0a   000142 6000 00         	tze	.no_gate_error	if zero, none or doesn't matter
    000116  aa  0 00000 1011 00         	cmpx1	ap|0		compare against number given
    000117  0a   000142 6000 00         	tze	.no_gate_error	args match, call procedure
                                        
    000120  aa  6 00000 2541 00         	call	signal_$signal_(signal_arglist)
    000121  0a   000130 3500 00
    000122  4a  4 00010 3521 20
    000123  aa  6 00040 7531 00
    000124  aa  7 00036 6701 20
    000125  aa  6 00000 1731 00
    000126  aa  6 00040 0731 00
    000127  aa   000000 000000          	oct	0
                                        
                                        	even
    000130                              signal_arglist:
    000130  aa   000002 000004          	zero	2,4
    000131  aa   000002 000000          	zero	2,0
    000132  0a   000136 0000 00         	arg	.gate_errorname
    000133  aa   000000 0000 00         	arg
    000134  0a   000141 0000 00         	arg	.gate_errordesc
    000135  aa   000000 0000 00         	arg
                                        
                                        	string	gate_error
    000136                              .gate_errorname:
    000136  aa  147 141 164 145         	aci	"gate_error"
    000137  aa  137 145 162 162
    000140  aa  157 162 000 000
    000141                              .gate_errordesc:
    000141  aa   525000 000010          	vfd	o9/525,o27/10
                                        
                                        
                                        
    000142                              .no_gate_error:
    000142  aa   000000 7100 12         	tra	0,2
                                        
                                        
                                        
                                    30  
                                    31  
                                    32  	gate	accept_wakeups_index,mseg_mbx_ms_gate_target_,accept_wakeups_index,4
                        000001          	segdef	accept_wakeups_index
    000001                              accept_wakeups_index:
    000001  0a   000144 7100 00         	tra	accept_wakeups_index.e
    000143  aa   000010 000000          	zero	4*2,0
    000144                              accept_wakeups_index.e:
    000144  0a   000111 7020 00         	tsx2	.setup
    000145  aa   000000 6340 07         	ldi	=0,dl
    000146  4a  4 00012 3521 20         	short_call mseg_mbx_ms_gate_target_$accept_wakeups_index(ap|0)
    000147  aa  7 00036 6701 20
    000150  aa  6 00030 3701 20
    000151  aa  7 00042 7101 20         	return
                                        
                                    33  	gate	add_index,mseg_mbx_ms_gate_target_,add_index,5
                        000002          	segdef	add_index
    000002                              add_index:
    000002  0a   000153 7100 00         	tra	add_index.e
    000152  aa   000012 000000          	zero	5*2,0
    000153                              add_index.e:
    000153  0a   000111 7020 00         	tsx2	.setup
    000154  aa   000000 6340 07         	ldi	=0,dl
    000155  4a  4 00014 3521 20         	short_call mseg_mbx_ms_gate_target_$add_index(ap|0)
    000156  aa  7 00036 6701 20
    000157  aa  6 00030 3701 20
    000160  aa  7 00042 7101 20         	return
                                        
                                    34  	gate	check_salv_bit_index,mseg_mbx_ms_gate_target_,check_salv_bit_index,4
                        000003          	segdef	check_salv_bit_index
    000003                              check_salv_bit_index:
    000003  0a   000162 7100 00         	tra	check_salv_bit_index.e
    000161  aa   000010 000000          	zero	4*2,0
    000162                              check_salv_bit_index.e:
    000162  0a   000111 7020 00         	tsx2	.setup
    000163  aa   000000 6340 07         	ldi	=0,dl
    000164  4a  4 00016 3521 20         	short_call mseg_mbx_ms_gate_target_$check_salv_bit_index(ap|0)
    000165  aa  7 00036 6701 20
    000166  aa  6 00030 3701 20
    000167  aa  7 00042 7101 20         	return
                                        
                                    35  	gate	chname_file,mseg_mbx_ms_gate_target_,chname,5
                        000004          	segdef	chname_file
    000004                              chname_file:
    000004  0a   000171 7100 00         	tra	chname_file.e
    000170  aa   000012 000000          	zero	5*2,0
    000171                              chname_file.e:
    000171  0a   000111 7020 00         	tsx2	.setup
    000172  aa   000000 6340 07         	ldi	=0,dl
    000173  4a  4 00020 3521 20         	short_call mseg_mbx_ms_gate_target_$chname(ap|0)
    000174  aa  7 00036 6701 20
    000175  aa  6 00030 3701 20
    000176  aa  7 00042 7101 20         	return
                                        
                                    36  	gate	close,mseg_mbx_ms_gate_target_,close,2
                        000005          	segdef	close
    000005                              close:
    000005  0a   000200 7100 00         	tra	close.e
    000177  aa   000004 000000          	zero	2*2,0
    000200                              close.e:
    000200  0a   000111 7020 00         	tsx2	.setup
    000201  aa   000000 6340 07         	ldi	=0,dl
    000202  4a  4 00022 3521 20         	short_call mseg_mbx_ms_gate_target_$close(ap|0)
    000203  aa  7 00036 6701 20
    000204  aa  6 00030 3701 20
    000205  aa  7 00042 7101 20         	return
                                        
                                    37  
                                    38  	gate	compact_file,mseg_mbx_ms_gate_target_,compact_file,4
                        000006          	segdef	compact_file
    000006                              compact_file:
    000006  0a   000207 7100 00         	tra	compact_file.e
    000206  aa   000010 000000          	zero	4*2,0
    000207                              compact_file.e:
    000207  0a   000111 7020 00         	tsx2	.setup
    000210  aa   000000 6340 07         	ldi	=0,dl
    000211  4a  4 00024 3521 20         	short_call mseg_mbx_ms_gate_target_$compact_file(ap|0)
    000212  aa  7 00036 6701 20
    000213  aa  6 00030 3701 20
    000214  aa  7 00042 7101 20         	return
                                        
                                    39  	gate	compact_index,mseg_mbx_ms_gate_target_,compact_index,3
                        000007          	segdef	compact_index
    000007                              compact_index:
    000007  0a   000216 7100 00         	tra	compact_index.e
    000215  aa   000006 000000          	zero	3*2,0
    000216                              compact_index.e:
    000216  0a   000111 7020 00         	tsx2	.setup
    000217  aa   000000 6340 07         	ldi	=0,dl
    000220  4a  4 00026 3521 20         	short_call mseg_mbx_ms_gate_target_$compact_index(ap|0)
    000221  aa  7 00036 6701 20
    000222  aa  6 00030 3701 20
    000223  aa  7 00042 7101 20         	return
                                        
                                    40  	gate	copy,mseg_mbx_ms_gate_target_,copy,6
                        000010          	segdef	copy
    000010                              copy:
    000010  0a   000225 7100 00         	tra	copy.e
    000224  aa   000014 000000          	zero	6*2,0
    000225                              copy.e:
    000225  0a   000111 7020 00         	tsx2	.setup
    000226  aa   000000 6340 07         	ldi	=0,dl
    000227  4a  4 00030 3521 20         	short_call mseg_mbx_ms_gate_target_$copy(ap|0)
    000230  aa  7 00036 6701 20
    000231  aa  6 00030 3701 20
    000232  aa  7 00042 7101 20         	return
                                        
                                    41  	gate	create,mseg_mbx_ms_gate_target_,create,3
                        000011          	segdef	create
    000011                              create:
    000011  0a   000234 7100 00         	tra	create.e
    000233  aa   000006 000000          	zero	3*2,0
    000234                              create.e:
    000234  0a   000111 7020 00         	tsx2	.setup
    000235  aa   000000 6340 07         	ldi	=0,dl
    000236  4a  4 00032 3521 20         	short_call mseg_mbx_ms_gate_target_$create(ap|0)
    000237  aa  7 00036 6701 20
    000240  aa  6 00030 3701 20
    000241  aa  7 00042 7101 20         	return
                                        
                                    42  	gate	delete,mseg_mbx_ms_gate_target_,delete_mseg,3
                        000012          	segdef	delete
    000012                              delete:
    000012  0a   000243 7100 00         	tra	delete.e
    000242  aa   000006 000000          	zero	3*2,0
    000243                              delete.e:
    000243  0a   000111 7020 00         	tsx2	.setup
    000244  aa   000000 6340 07         	ldi	=0,dl
    000245  4a  4 00034 3521 20         	short_call mseg_mbx_ms_gate_target_$delete_mseg(ap|0)
    000246  aa  7 00036 6701 20
    000247  aa  6 00030 3701 20
    000250  aa  7 00042 7101 20         	return
                                        
                                    43  
                                    44  	gate	delete_index,mseg_mbx_ms_gate_target_,delete_index,3
                        000013          	segdef	delete_index
    000013                              delete_index:
    000013  0a   000252 7100 00         	tra	delete_index.e
    000251  aa   000006 000000          	zero	3*2,0
    000252                              delete_index.e:
    000252  0a   000111 7020 00         	tsx2	.setup
    000253  aa   000000 6340 07         	ldi	=0,dl
    000254  4a  4 00036 3521 20         	short_call mseg_mbx_ms_gate_target_$delete_index(ap|0)
    000255  aa  7 00036 6701 20
    000256  aa  6 00030 3701 20
    000257  aa  7 00042 7101 20         	return
                                        
                                    45  	gate	get_message_count_index,mseg_mbx_ms_gate_target_,get_message_count_index,3
                        000014          	segdef	get_message_count_index
    000014                              get_message_count_index:
    000014  0a   000261 7100 00         	tra	get_message_count_index.e
    000260  aa   000006 000000          	zero	3*2,0
    000261                              get_message_count_index.e:
    000261  0a   000111 7020 00         	tsx2	.setup
    000262  aa   000000 6340 07         	ldi	=0,dl
    000263  4a  4 00040 3521 20         	short_call mseg_mbx_ms_gate_target_$get_message_count_index(ap|0)
    000264  aa  7 00036 6701 20
    000265  aa  6 00030 3701 20
    000266  aa  7 00042 7101 20         	return
                                        
                                    46  	gate	get_mode_file,mseg_mbx_ms_gate_target_,get_mode_file,4
                        000015          	segdef	get_mode_file
    000015                              get_mode_file:
    000015  0a   000270 7100 00         	tra	get_mode_file.e
    000267  aa   000010 000000          	zero	4*2,0
    000270                              get_mode_file.e:
    000270  0a   000111 7020 00         	tsx2	.setup
    000271  aa   000000 6340 07         	ldi	=0,dl
    000272  4a  4 00042 3521 20         	short_call mseg_mbx_ms_gate_target_$get_mode_file(ap|0)
    000273  aa  7 00036 6701 20
    000274  aa  6 00030 3701 20
    000275  aa  7 00042 7101 20         	return
                                        
                                    47  	gate	get_mode_index,mseg_mbx_ms_gate_target_,get_mode_index,3
                        000016          	segdef	get_mode_index
    000016                              get_mode_index:
    000016  0a   000277 7100 00         	tra	get_mode_index.e
    000276  aa   000006 000000          	zero	3*2,0
    000277                              get_mode_index.e:
    000277  0a   000111 7020 00         	tsx2	.setup
    000300  aa   000000 6340 07         	ldi	=0,dl
    000301  4a  4 00044 3521 20         	short_call mseg_mbx_ms_gate_target_$get_mode_index(ap|0)
    000302  aa  7 00036 6701 20
    000303  aa  6 00030 3701 20
    000304  aa  7 00042 7101 20         	return
                                        
                                    48  	gate	get_uid_file,mseg_mbx_ms_gate_target_,get_uid_file,4
                        000017          	segdef	get_uid_file
    000017                              get_uid_file:
    000017  0a   000306 7100 00         	tra	get_uid_file.e
    000305  aa   000010 000000          	zero	4*2,0
    000306                              get_uid_file.e:
    000306  0a   000111 7020 00         	tsx2	.setup
    000307  aa   000000 6340 07         	ldi	=0,dl
    000310  4a  4 00046 3521 20         	short_call mseg_mbx_ms_gate_target_$get_uid_file(ap|0)
    000311  aa  7 00036 6701 20
    000312  aa  6 00030 3701 20
    000313  aa  7 00042 7101 20         	return
                                        
                                    49  
                                    50  	gate	get_uid_index,mseg_mbx_ms_gate_target_,get_uid_index,3
                        000020          	segdef	get_uid_index
    000020                              get_uid_index:
    000020  0a   000315 7100 00         	tra	get_uid_index.e
    000314  aa   000006 000000          	zero	3*2,0
    000315                              get_uid_index.e:
    000315  0a   000111 7020 00         	tsx2	.setup
    000316  aa   000000 6340 07         	ldi	=0,dl
    000317  4a  4 00050 3521 20         	short_call mseg_mbx_ms_gate_target_$get_uid_index(ap|0)
    000320  aa  7 00036 6701 20
    000321  aa  6 00030 3701 20
    000322  aa  7 00042 7101 20         	return
                                        
                                    51  	gate	incremental_read_index,mseg_mbx_ms_gate_target_,incremental_read_index,6
                        000021          	segdef	incremental_read_index
    000021                              incremental_read_index:
    000021  0a   000324 7100 00         	tra	incremental_read_index.e
    000323  aa   000014 000000          	zero	6*2,0
    000324                              incremental_read_index.e:
    000324  0a   000111 7020 00         	tsx2	.setup
    000325  aa   000000 6340 07         	ldi	=0,dl
    000326  4a  4 00052 3521 20         	short_call mseg_mbx_ms_gate_target_$incremental_read_index(ap|0)
    000327  aa  7 00036 6701 20
    000330  aa  6 00030 3701 20
    000331  aa  7 00042 7101 20         	return
                                        
                                    52  	gate	mbx_acl_add,mseg_mbx_ms_gate_target_,ex_acl_add,5
                        000022          	segdef	mbx_acl_add
    000022                              mbx_acl_add:
    000022  0a   000333 7100 00         	tra	mbx_acl_add.e
    000332  aa   000012 000000          	zero	5*2,0
    000333                              mbx_acl_add.e:
    000333  0a   000111 7020 00         	tsx2	.setup
    000334  aa   000000 6340 07         	ldi	=0,dl
    000335  4a  4 00054 3521 20         	short_call mseg_mbx_ms_gate_target_$ex_acl_add(ap|0)
    000336  aa  7 00036 6701 20
    000337  aa  6 00030 3701 20
    000340  aa  7 00042 7101 20         	return
                                        
                                    53  	gate	mbx_acl_delete,mseg_mbx_ms_gate_target_,ex_acl_delete,6
                        000023          	segdef	mbx_acl_delete
    000023                              mbx_acl_delete:
    000023  0a   000342 7100 00         	tra	mbx_acl_delete.e
    000341  aa   000014 000000          	zero	6*2,0
    000342                              mbx_acl_delete.e:
    000342  0a   000111 7020 00         	tsx2	.setup
    000343  aa   000000 6340 07         	ldi	=0,dl
    000344  4a  4 00056 3521 20         	short_call mseg_mbx_ms_gate_target_$ex_acl_delete(ap|0)
    000345  aa  7 00036 6701 20
    000346  aa  6 00030 3701 20
    000347  aa  7 00042 7101 20         	return
                                        
                                    54  	gate	mbx_acl_list,mseg_mbx_ms_gate_target_,ex_acl_list,6
                        000024          	segdef	mbx_acl_list
    000024                              mbx_acl_list:
    000024  0a   000351 7100 00         	tra	mbx_acl_list.e
    000350  aa   000014 000000          	zero	6*2,0
    000351                              mbx_acl_list.e:
    000351  0a   000111 7020 00         	tsx2	.setup
    000352  aa   000000 6340 07         	ldi	=0,dl
    000353  4a  4 00060 3521 20         	short_call mseg_mbx_ms_gate_target_$ex_acl_list(ap|0)
    000354  aa  7 00036 6701 20
    000355  aa  6 00030 3701 20
    000356  aa  7 00042 7101 20         	return
                                        
                                    55  
                                    56  	gate	mbx_acl_replace,mseg_mbx_ms_gate_target_,ex_acl_replace,5
                        000025          	segdef	mbx_acl_replace
    000025                              mbx_acl_replace:
    000025  0a   000360 7100 00         	tra	mbx_acl_replace.e
    000357  aa   000012 000000          	zero	5*2,0
    000360                              mbx_acl_replace.e:
    000360  0a   000111 7020 00         	tsx2	.setup
    000361  aa   000000 6340 07         	ldi	=0,dl
    000362  4a  4 00062 3521 20         	short_call mseg_mbx_ms_gate_target_$ex_acl_replace(ap|0)
    000363  aa  7 00036 6701 20
    000364  aa  6 00030 3701 20
    000365  aa  7 00042 7101 20         	return
                                        
                                    57  	gate	open,mseg_mbx_ms_gate_target_,open,4
                        000026          	segdef	open
    000026                              open:
    000026  0a   000367 7100 00         	tra	open.e
    000366  aa   000010 000000          	zero	4*2,0
    000367                              open.e:
    000367  0a   000111 7020 00         	tsx2	.setup
    000370  aa   000000 6340 07         	ldi	=0,dl
    000371  4a  4 00064 3521 20         	short_call mseg_mbx_ms_gate_target_$open(ap|0)
    000372  aa  7 00036 6701 20
    000373  aa  6 00030 3701 20
    000374  aa  7 00042 7101 20         	return
                                        
                                    58  	gate	open_if_full,mseg_mbx_ms_gate_target_,open_if_full,6
                        000027          	segdef	open_if_full
    000027                              open_if_full:
    000027  0a   000376 7100 00         	tra	open_if_full.e
    000375  aa   000014 000000          	zero	6*2,0
    000376                              open_if_full.e:
    000376  0a   000111 7020 00         	tsx2	.setup
    000377  aa   000000 6340 07         	ldi	=0,dl
    000400  4a  4 00066 3521 20         	short_call mseg_mbx_ms_gate_target_$open_if_full(ap|0)
    000401  aa  7 00036 6701 20
    000402  aa  6 00030 3701 20
    000403  aa  7 00042 7101 20         	return
                                        
                                    59  
                                    60  	gate	read_message_index,mseg_mbx_ms_gate_target_,general_read_index,4
                        000030          	segdef	read_message_index
    000030                              read_message_index:
    000030  0a   000405 7100 00         	tra	read_message_index.e
    000404  aa   000010 000000          	zero	4*2,0
    000405                              read_message_index.e:
    000405  0a   000111 7020 00         	tsx2	.setup
    000406  aa   000000 6340 07         	ldi	=0,dl
    000407  4a  4 00070 3521 20         	short_call mseg_mbx_ms_gate_target_$general_read_index(ap|0)
    000410  aa  7 00036 6701 20
    000411  aa  6 00030 3701 20
    000412  aa  7 00042 7101 20         	return
                                        
                                    61  	gate	read_message_file,mseg_mbx_ms_gate_target_,general_read_file,5
                        000031          	segdef	read_message_file
    000031                              read_message_file:
    000031  0a   000414 7100 00         	tra	read_message_file.e
    000413  aa   000012 000000          	zero	5*2,0
    000414                              read_message_file.e:
    000414  0a   000111 7020 00         	tsx2	.setup
    000415  aa   000000 6340 07         	ldi	=0,dl
    000416  4a  4 00072 3521 20         	short_call mseg_mbx_ms_gate_target_$general_read_file(ap|0)
    000417  aa  7 00036 6701 20
    000420  aa  6 00030 3701 20
    000421  aa  7 00042 7101 20         	return
                                        
                                    62  
                                    63  	gate	own_incremental_read_index,mseg_mbx_ms_gate_target_,o_incremental_read_index,6
                        000032          	segdef	own_incremental_read_index
    000032                              own_incremental_read_index:
    000032  0a   000423 7100 00         	tra	own_incremental_read_index.e
    000422  aa   000014 000000          	zero	6*2,0
    000423                              own_incremental_read_index.e:
    000423  0a   000111 7020 00         	tsx2	.setup
    000424  aa   000000 6340 07         	ldi	=0,dl
    000425  4a  4 00074 3521 20         	short_call mseg_mbx_ms_gate_target_$o_incremental_read_index(ap|0)
    000426  aa  7 00036 6701 20
    000427  aa  6 00030 3701 20
    000430  aa  7 00042 7101 20         	return
                                        
                                    64  	gate	own_read_index,mseg_mbx_ms_gate_target_,o_read_index,5
                        000033          	segdef	own_read_index
    000033                              own_read_index:
    000033  0a   000432 7100 00         	tra	own_read_index.e
    000431  aa   000012 000000          	zero	5*2,0
    000432                              own_read_index.e:
    000432  0a   000111 7020 00         	tsx2	.setup
    000433  aa   000000 6340 07         	ldi	=0,dl
    000434  4a  4 00076 3521 20         	short_call mseg_mbx_ms_gate_target_$o_read_index(ap|0)
    000435  aa  7 00036 6701 20
    000436  aa  6 00030 3701 20
    000437  aa  7 00042 7101 20         	return
                                        
                                    65  
                                    66  	gate	read_delete_index,mseg_mbx_ms_gate_target_,read_delete_index,5
                        000034          	segdef	read_delete_index
    000034                              read_delete_index:
    000034  0a   000441 7100 00         	tra	read_delete_index.e
    000440  aa   000012 000000          	zero	5*2,0
    000441                              read_delete_index.e:
    000441  0a   000111 7020 00         	tsx2	.setup
    000442  aa   000000 6340 07         	ldi	=0,dl
    000443  4a  4 00100 3521 20         	short_call mseg_mbx_ms_gate_target_$read_delete_index(ap|0)
    000444  aa  7 00036 6701 20
    000445  aa  6 00030 3701 20
    000446  aa  7 00042 7101 20         	return
                                        
                                    67  	gate	read_index,mseg_mbx_ms_gate_target_,read_index,5
                        000035          	segdef	read_index
    000035                              read_index:
    000035  0a   000450 7100 00         	tra	read_index.e
    000447  aa   000012 000000          	zero	5*2,0
    000450                              read_index.e:
    000450  0a   000111 7020 00         	tsx2	.setup
    000451  aa   000000 6340 07         	ldi	=0,dl
    000452  4a  4 00102 3521 20         	short_call mseg_mbx_ms_gate_target_$read_index(ap|0)
    000453  aa  7 00036 6701 20
    000454  aa  6 00030 3701 20
    000455  aa  7 00042 7101 20         	return
                                        
                                    68  	gate	set_max_length_file,mseg_mbx_ms_gate_target_,set_max_length_file,4
                        000036          	segdef	set_max_length_file
    000036                              set_max_length_file:
    000036  0a   000457 7100 00         	tra	set_max_length_file.e
    000456  aa   000010 000000          	zero	4*2,0
    000457                              set_max_length_file.e:
    000457  0a   000111 7020 00         	tsx2	.setup
    000460  aa   000000 6340 07         	ldi	=0,dl
    000461  4a  4 00104 3521 20         	short_call mseg_mbx_ms_gate_target_$set_max_length_file(ap|0)
    000462  aa  7 00036 6701 20
    000463  aa  6 00030 3701 20
    000464  aa  7 00042 7101 20         	return
                                        
                                    69  	gate	set_safety_switch,mseg_mbx_ms_gate_target_,set_safety_switch,4
                        000037          	segdef	set_safety_switch
    000037                              set_safety_switch:
    000037  0a   000466 7100 00         	tra	set_safety_switch.e
    000465  aa   000010 000000          	zero	4*2,0
    000466                              set_safety_switch.e:
    000466  0a   000111 7020 00         	tsx2	.setup
    000467  aa   000000 6340 07         	ldi	=0,dl
    000470  4a  4 00106 3521 20         	short_call mseg_mbx_ms_gate_target_$set_safety_switch(ap|0)
    000471  aa  7 00036 6701 20
    000472  aa  6 00030 3701 20
    000473  aa  7 00042 7101 20         	return
                                        
                                    70  	gate	update_message_index,mseg_mbx_ms_gate_target_,update_message_index,5
                        000040          	segdef	update_message_index
    000040                              update_message_index:
    000040  0a   000475 7100 00         	tra	update_message_index.e
    000474  aa   000012 000000          	zero	5*2,0
    000475                              update_message_index.e:
    000475  0a   000111 7020 00         	tsx2	.setup
    000476  aa   000000 6340 07         	ldi	=0,dl
    000477  4a  4 00110 3521 20         	short_call mseg_mbx_ms_gate_target_$update_message_index(ap|0)
    000500  aa  7 00036 6701 20
    000501  aa  6 00030 3701 20
    000502  aa  7 00042 7101 20         	return
                                        
                                    71  
                                    72  	gate	validate,mseg_mbx_ms_gate_target_,validate,3
                        000041          	segdef	validate
    000041                              validate:
    000041  0a   000504 7100 00         	tra	validate.e
    000503  aa   000006 000000          	zero	3*2,0
    000504                              validate.e:
    000504  0a   000111 7020 00         	tsx2	.setup
    000505  aa   000000 6340 07         	ldi	=0,dl
    000506  4a  4 00112 3521 20         	short_call mseg_mbx_ms_gate_target_$validate(ap|0)
    000507  aa  7 00036 6701 20
    000510  aa  6 00030 3701 20
    000511  aa  7 00042 7101 20         	return
                                        
                                    73  	gate	wakeup_add_index,mseg_mbx_ms_gate_target_,wakeup_add_index,6
                        000042          	segdef	wakeup_add_index
    000042                              wakeup_add_index:
    000042  0a   000513 7100 00         	tra	wakeup_add_index.e
    000512  aa   000014 000000          	zero	6*2,0
    000513                              wakeup_add_index.e:
    000513  0a   000111 7020 00         	tsx2	.setup
    000514  aa   000000 6340 07         	ldi	=0,dl
    000515  4a  4 00114 3521 20         	short_call mseg_mbx_ms_gate_target_$wakeup_add_index(ap|0)
    000516  aa  7 00036 6701 20
    000517  aa  6 00030 3701 20
    000520  aa  7 00042 7101 20         	return
                                        
                                    74  	gate	wakeup_aim_add_index,mseg_mbx_ms_gate_target_,wakeup_aim_add_index,7
                        000043          	segdef	wakeup_aim_add_index
    000043                              wakeup_aim_add_index:
    000043  0a   000522 7100 00         	tra	wakeup_aim_add_index.e
    000521  aa   000016 000000          	zero	7*2,0
    000522                              wakeup_aim_add_index.e:
    000522  0a   000111 7020 00         	tsx2	.setup
    000523  aa   000000 6340 07         	ldi	=0,dl
    000524  4a  4 00116 3521 20         	short_call mseg_mbx_ms_gate_target_$wakeup_aim_add_index(ap|0)
    000525  aa  7 00036 6701 20
    000526  aa  6 00030 3701 20
    000527  aa  7 00042 7101 20         	return
                                        
                                    75  
                                    76  	end

NO LITERALS
     
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000530  5a   000003 000000 
    000531  5a   000413 600000 
    000532  aa   000000 000000 
    000533  55   000011 000002 
    000534  5a   000002 400003 
    000535  55   000006 000011 
    000536  aa  010 155 141 151
    000537  aa  154 142 157 170
    000540  aa  137 000 000 000
    000541  55   000022 000003 
    000542  0a   000043 400000 
    000543  55   000014 000003 
    000544  aa  024 167 141 153         wakeup_aim_add_index
    000545  aa  145 165 160 137
    000546  aa  141 151 155 137
    000547  aa  141 144 144 137
    000550  aa  151 156 144 145
    000551  aa  170 000 000 000
    000552  55   000032 000011 
    000553  0a   000042 400000 
    000554  55   000025 000003 
    000555  aa  020 167 141 153         wakeup_add_index
    000556  aa  145 165 160 137
    000557  aa  141 144 144 137
    000560  aa  151 156 144 145
    000561  aa  170 000 000 000
    000562  55   000040 000022 
    000563  0a   000041 400000 
    000564  55   000035 000003 
    000565  aa  010 166 141 154         validate
    000566  aa  151 144 141 164
    000567  aa  145 000 000 000
    000570  55   000051 000032 
    000571  0a   000040 400000 
    000572  55   000043 000003 
    000573  aa  024 165 160 144         update_message_index
    000574  aa  141 164 145 137
    000575  aa  155 145 163 163
    000576  aa  141 147 145 137
    000577  aa  151 156 144 145
    000600  aa  170 000 000 000
    000601  55   000061 000040 
    000602  0a   000037 400000 
    000603  55   000054 000003 
    000604  aa  021 163 145 164         set_safety_switch
    000605  aa  137 163 141 146
    000606  aa  145 164 171 137
    000607  aa  163 167 151 164
    000610  aa  143 150 000 000
    000611  55   000071 000051 
    000612  0a   000036 400000 
    000613  55   000064 000003 
    000614  aa  023 163 145 164         set_max_length_file
    000615  aa  137 155 141 170
    000616  aa  137 154 145 156
    000617  aa  147 164 150 137
    000620  aa  146 151 154 145
    000621  55   000077 000061 
    000622  0a   000035 400000 
    000623  55   000074 000003 
    000624  aa  012 162 145 141         read_index
    000625  aa  144 137 151 156
    000626  aa  144 145 170 000
    000627  55   000107 000071 
    000630  0a   000034 400000 
    000631  55   000102 000003 
    000632  aa  021 162 145 141         read_delete_index
    000633  aa  144 137 144 145
    000634  aa  154 145 164 145
    000635  aa  137 151 156 144
    000636  aa  145 170 000 000
    000637  55   000116 000077 
    000640  0a   000033 400000 
    000641  55   000112 000003 
    000642  aa  016 157 167 156         own_read_index
    000643  aa  137 162 145 141
    000644  aa  144 137 151 156
    000645  aa  144 145 170 000
    000646  55   000130 000107 
    000647  0a   000032 400000 
    000650  55   000121 000003 
    000651  aa  032 157 167 156         own_incremental_read_index
    000652  aa  137 151 156 143
    000653  aa  162 145 155 145
    000654  aa  156 164 141 154
    000655  aa  137 162 145 141
    000656  aa  144 137 151 156
    000657  aa  144 145 170 000
    000660  55   000140 000116 
    000661  0a   000031 400000 
    000662  55   000133 000003 
    000663  aa  021 162 145 141         read_message_file
    000664  aa  144 137 155 145
    000665  aa  163 163 141 147
    000666  aa  145 137 146 151
    000667  aa  154 145 000 000
    000670  55   000150 000130 
    000671  0a   000030 400000 
    000672  55   000143 000003 
    000673  aa  022 162 145 141         read_message_index
    000674  aa  144 137 155 145
    000675  aa  163 163 141 147
    000676  aa  145 137 151 156
    000677  aa  144 145 170 000
    000700  55   000157 000140 
    000701  0a   000027 400000 
    000702  55   000153 000003 
    000703  aa  014 157 160 145         open_if_full
    000704  aa  156 137 151 146
    000705  aa  137 146 165 154
    000706  aa  154 000 000 000
    000707  55   000164 000150 
    000710  0a   000026 400000 
    000711  55   000162 000003 
    000712  aa  004 157 160 145         open
    000713  aa  156 000 000 000
    000714  55   000173 000157 
    000715  0a   000025 400000 
    000716  55   000167 000003 
    000717  aa  017 155 142 170         mbx_acl_replace
    000720  aa  137 141 143 154
    000721  aa  137 162 145 160
    000722  aa  154 141 143 145
    000723  55   000202 000164 
    000724  0a   000024 400000 
    000725  55   000176 000003 
    000726  aa  014 155 142 170         mbx_acl_list
    000727  aa  137 141 143 154
    000730  aa  137 154 151 163
    000731  aa  164 000 000 000
    000732  55   000211 000173 
    000733  0a   000023 400000 
    000734  55   000205 000003 
    000735  aa  016 155 142 170         mbx_acl_delete
    000736  aa  137 141 143 154
    000737  aa  137 144 145 154
    000740  aa  145 164 145 000
    000741  55   000217 000202 
    000742  0a   000022 400000 
    000743  55   000214 000003 
    000744  aa  013 155 142 170         mbx_acl_add
    000745  aa  137 141 143 154
    000746  aa  137 141 144 144
    000747  55   000230 000211 
    000750  0a   000021 400000 
    000751  55   000222 000003 
    000752  aa  026 151 156 143         incremental_read_index
    000753  aa  162 145 155 145
    000754  aa  156 164 141 154
    000755  aa  137 162 145 141
    000756  aa  144 137 151 156
    000757  aa  144 145 170 000
    000760  55   000237 000217 
    000761  0a   000020 400000 
    000762  55   000233 000003 
    000763  aa  015 147 145 164         get_uid_index
    000764  aa  137 165 151 144
    000765  aa  137 151 156 144
    000766  aa  145 170 000 000
    000767  55   000246 000230 
    000770  0a   000017 400000 
    000771  55   000242 000003 
    000772  aa  014 147 145 164         get_uid_file
    000773  aa  137 165 151 144
    000774  aa  137 146 151 154
    000775  aa  145 000 000 000
    000776  55   000255 000237 
    000777  0a   000016 400000 
    001000  55   000251 000003 
    001001  aa  016 147 145 164         get_mode_index
    001002  aa  137 155 157 144
    001003  aa  145 137 151 156
    001004  aa  144 145 170 000
    001005  55   000264 000246 
    001006  0a   000015 400000 
    001007  55   000260 000003 
    001010  aa  015 147 145 164         get_mode_file
    001011  aa  137 155 157 144
    001012  aa  145 137 146 151
    001013  aa  154 145 000 000
    001014  55   000275 000255 
    001015  0a   000014 400000 
    001016  55   000267 000003 
    001017  aa  027 147 145 164         get_message_count_index
    001020  aa  137 155 145 163
    001021  aa  163 141 147 145
    001022  aa  137 143 157 165
    001023  aa  156 164 137 151
    001024  aa  156 144 145 170
    001025  55   000304 000264 
    001026  0a   000013 400000 
    001027  55   000300 000003 
    001030  aa  014 144 145 154         delete_index
    001031  aa  145 164 145 137
    001032  aa  151 156 144 145
    001033  aa  170 000 000 000
    001034  55   000311 000275 
    001035  0a   000012 400000 
    001036  55   000307 000003 
    001037  aa  006 144 145 154         delete
    001040  aa  145 164 145 000
    001041  55   000316 000304 
    001042  0a   000011 400000 
    001043  55   000314 000003 
    001044  aa  006 143 162 145         create
    001045  aa  141 164 145 000
    001046  55   000323 000311 
    001047  0a   000010 400000 
    001050  55   000321 000003 
    001051  aa  004 143 157 160         copy
    001052  aa  171 000 000 000
    001053  55   000332 000316 
    001054  0a   000007 400000 
    001055  55   000326 000003 
    001056  aa  015 143 157 155         compact_index
    001057  aa  160 141 143 164
    001060  aa  137 151 156 144
    001061  aa  145 170 000 000
    001062  55   000341 000323 
    001063  0a   000006 400000 
    001064  55   000335 000003 
    001065  aa  014 143 157 155         compact_file
    001066  aa  160 141 143 164
    001067  aa  137 146 151 154
    001070  aa  145 000 000 000
    001071  55   000346 000332 
    001072  0a   000005 400000 
    001073  55   000344 000003 
    001074  aa  005 143 154 157         close
    001075  aa  163 145 000 000
    001076  55   000354 000341 
    001077  0a   000004 400000 
    001100  55   000351 000003 
    001101  aa  013 143 150 156         chname_file
    001102  aa  141 155 145 137
    001103  aa  146 151 154 145
    001104  55   000365 000346 
    001105  0a   000003 400000 
    001106  55   000357 000003 
    001107  aa  024 143 150 145         check_salv_bit_index
    001110  aa  143 153 137 163
    001111  aa  141 154 166 137
    001112  aa  142 151 164 137
    001113  aa  151 156 144 145
    001114  aa  170 000 000 000
    001115  55   000373 000354 
    001116  0a   000002 400000 
    001117  55   000370 000003 
    001120  aa  011 141 144 144         add_index
    001121  aa  137 151 156 144
    001122  aa  145 170 000 000
    001123  55   000404 000365 
    001124  0a   000001 400000 
    001125  55   000376 000003 
    001126  aa  024 141 143 143         accept_wakeups_index
    001127  aa  145 160 164 137
    001130  aa  167 141 153 145
    001131  aa  165 160 163 137
    001132  aa  151 156 144 145
    001133  aa  170 000 000 000
    001134  55   000002 000373 
    001135  6a   000000 400002 
    001136  55   000407 000003 
    001137  aa  014 163 171 155         symbol_table
    001140  aa  142 157 154 137
    001141  aa  164 141 142 154
    001142  aa  145 000 000 000

DEFINITIONS HASH TABLE

    001143  aa   000000 000065 
    001144  aa   000000 000000 
    001145  5a   000246 000000 
    001146  5a   000354 000000 
    001147  5a   000071 000000 
    001150  5a   000230 000000 
    001151  5a   000237 000000 
    001152  5a   000255 000000 
    001153  5a   000323 000000 
    001154  5a   000032 000000 
    001155  5a   000311 000000 
    001156  5a   000061 000000 
    001157  5a   000332 000000 
    001160  aa   000000 000000 
    001161  5a   000116 000000 
    001162  5a   000051 000000 
    001163  5a   000157 000000 
    001164  aa   000000 000000 
    001165  aa   000000 000000 
    001166  5a   000040 000000 
    001167  aa   000000 000000 
    001170  aa   000000 000000 
    001171  aa   000000 000000 
    001172  aa   000000 000000 
    001173  5a   000341 000000 
    001174  aa   000000 000000 
    001175  5a   000316 000000 
    001176  5a   000373 000000 
    001177  aa   000000 000000 
    001200  5a   000404 000000 
    001201  5a   000346 000000 
    001202  5a   000217 000000 
    001203  5a   000365 000000 
    001204  5a   000275 000000 
    001205  aa   000000 000000 
    001206  aa   000000 000000 
    001207  aa   000000 000000 
    001210  5a   000264 000000 
    001211  5a   000107 000000 
    001212  aa   000000 000000 
    001213  aa   000000 000000 
    001214  5a   000140 000000 
    001215  5a   000164 000000 
    001216  5a   000011 000000 
    001217  5a   000077 000000 
    001220  5a   000130 000000 
    001221  5a   000202 000000 
    001222  5a   000173 000000 
    001223  5a   000304 000000 
    001224  5a   000211 000000 
    001225  aa   000000 000000 
    001226  5a   000022 000000 
    001227  aa   000000 000000 
    001230  5a   000150 000000 

EXTERNAL NAMES

    001231  aa  014 157 137 162         o_read_index
    001232  aa  145 141 144 137
    001233  aa  151 156 144 145
    001234  aa  170 000 000 000
    001235  aa  030 157 137 151         o_incremental_read_index
    001236  aa  156 143 162 145
    001237  aa  155 145 156 164
    001240  aa  141 154 137 162
    001241  aa  145 141 144 137
    001242  aa  151 156 144 145
    001243  aa  170 000 000 000
    001244  aa  021 147 145 156         general_read_file
    001245  aa  145 162 141 154
    001246  aa  137 162 145 141
    001247  aa  144 137 146 151
    001250  aa  154 145 000 000
    001251  aa  022 147 145 156         general_read_index
    001252  aa  145 162 141 154
    001253  aa  137 162 145 141
    001254  aa  144 137 151 156
    001255  aa  144 145 170 000
    001256  aa  016 145 170 137         ex_acl_replace
    001257  aa  141 143 154 137
    001260  aa  162 145 160 154
    001261  aa  141 143 145 000
    001262  aa  013 145 170 137         ex_acl_list
    001263  aa  141 143 154 137
    001264  aa  154 151 163 164
    001265  aa  015 145 170 137         ex_acl_delete
    001266  aa  141 143 154 137
    001267  aa  144 145 154 145
    001270  aa  164 145 000 000
    001271  aa  012 145 170 137         ex_acl_add
    001272  aa  141 143 154 137
    001273  aa  141 144 144 000
    001274  aa  013 144 145 154         delete_mseg
    001275  aa  145 164 145 137
    001276  aa  155 163 145 147
    001277  aa  006 143 150 156         chname
    001300  aa  141 155 145 000
    001301  aa  030 155 163 145         mseg_mbx_ms_gate_target_
    001302  aa  147 137 155 142
    001303  aa  170 137 155 163
    001304  aa  137 147 141 164
    001305  aa  145 137 164 141
    001306  aa  162 147 145 164
    001307  aa  137 000 000 000
    001310  aa  007 163 151 147         signal_
    001311  aa  156 141 154 137

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    001312  aa   000004 000000 
    001313  55   000551 000014 
    001314  aa   000004 000000 
    001315  55   000551 000025 
    001316  aa   000004 000000 
    001317  55   000551 000035 
    001320  aa   000004 000000 
    001321  55   000551 000043 
    001322  aa   000004 000000 
    001323  55   000551 000054 
    001324  aa   000004 000000 
    001325  55   000551 000064 
    001326  aa   000004 000000 
    001327  55   000551 000074 
    001330  aa   000004 000000 
    001331  55   000551 000102 
    001332  aa   000004 000000 
    001333  55   000551 000501 
    001334  aa   000004 000000 
    001335  55   000551 000505 
    001336  aa   000004 000000 
    001337  55   000551 000514 
    001340  aa   000004 000000 
    001341  55   000551 000521 
    001342  aa   000004 000000 
    001343  55   000551 000153 
    001344  aa   000004 000000 
    001345  55   000551 000162 
    001346  aa   000004 000000 
    001347  55   000551 000526 
    001350  aa   000004 000000 
    001351  55   000551 000532 
    001352  aa   000004 000000 
    001353  55   000551 000535 
    001354  aa   000004 000000 
    001355  55   000551 000541 
    001356  aa   000004 000000 
    001357  55   000551 000222 
    001360  aa   000004 000000 
    001361  55   000551 000233 
    001362  aa   000004 000000 
    001363  55   000551 000242 
    001364  aa   000004 000000 
    001365  55   000551 000251 
    001366  aa   000004 000000 
    001367  55   000551 000260 
    001370  aa   000004 000000 
    001371  55   000551 000267 
    001372  aa   000004 000000 
    001373  55   000551 000300 
    001374  aa   000004 000000 
    001375  55   000551 000544 
    001376  aa   000004 000000 
    001377  55   000551 000314 
    001400  aa   000004 000000 
    001401  55   000551 000321 
    001402  aa   000004 000000 
    001403  55   000551 000326 
    001404  aa   000004 000000 
    001405  55   000551 000335 
    001406  aa   000004 000000 
    001407  55   000551 000344 
    001410  aa   000004 000000 
    001411  55   000551 000547 
    001412  aa   000004 000000 
    001413  55   000551 000357 
    001414  aa   000004 000000 
    001415  55   000551 000370 
    001416  aa   000004 000000 
    001417  55   000551 000376 
    001420  aa   000004 000000 
    001421  55   000560 000560 
    001422  aa   000001 000000 
    001423  aa   000000 000000 

INTERNAL EXPRESSION WORDS

    001424  5a   000562 000000 
    001425  5a   000564 000000 
    001426  5a   000566 000000 
    001427  5a   000570 000000 
    001430  5a   000572 000000 
    001431  5a   000574 000000 
    001432  5a   000576 000000 
    001433  5a   000600 000000 
    001434  5a   000602 000000 
    001435  5a   000604 000000 
    001436  5a   000606 000000 
    001437  5a   000610 000000 
    001440  5a   000612 000000 
    001441  5a   000614 000000 
    001442  5a   000616 000000 
    001443  5a   000620 000000 
    001444  5a   000622 000000 
    001445  5a   000624 000000 
    001446  5a   000626 000000 
    001447  5a   000630 000000 
    001450  5a   000632 000000 
    001451  5a   000634 000000 
    001452  5a   000636 000000 
    001453  5a   000640 000000 
    001454  5a   000642 000000 
    001455  5a   000644 000000 
    001456  5a   000646 000000 
    001457  5a   000650 000000 
    001460  5a   000652 000000 
    001461  5a   000654 000000 
    001462  5a   000656 000000 
    001463  5a   000660 000000 
    001464  5a   000662 000000 
    001465  5a   000664 000000 
    001466  5a   000666 000000 
    001467  5a   000670 000000 
LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000530 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000120 
    000007  a2   000000 000000 
    000010  9a   777770 0000 46         signal_|signal_
    000011  5a   000737 0000 00
    000012  9a   777766 0000 46         mseg_mbx_ms_gate_target_|accept_wakeups_index
    000013  5a   000736 0000 00
    000014  9a   777764 0000 46         mseg_mbx_ms_gate_target_|add_index
    000015  5a   000735 0000 00
    000016  9a   777762 0000 46         mseg_mbx_ms_gate_target_|check_salv_bit_index
    000017  5a   000734 0000 00
    000020  9a   777760 0000 46         mseg_mbx_ms_gate_target_|chname
    000021  5a   000733 0000 00
    000022  9a   777756 0000 46         mseg_mbx_ms_gate_target_|close
    000023  5a   000732 0000 00
    000024  9a   777754 0000 46         mseg_mbx_ms_gate_target_|compact_file
    000025  5a   000731 0000 00
    000026  9a   777752 0000 46         mseg_mbx_ms_gate_target_|compact_index
    000027  5a   000730 0000 00
    000030  9a   777750 0000 46         mseg_mbx_ms_gate_target_|copy
    000031  5a   000727 0000 00
    000032  9a   777746 0000 46         mseg_mbx_ms_gate_target_|create
    000033  5a   000726 0000 00
    000034  9a   777744 0000 46         mseg_mbx_ms_gate_target_|delete_mseg
    000035  5a   000725 0000 00
    000036  9a   777742 0000 46         mseg_mbx_ms_gate_target_|delete_index
    000037  5a   000724 0000 00
    000040  9a   777740 0000 46         mseg_mbx_ms_gate_target_|get_message_count_index
    000041  5a   000723 0000 00
    000042  9a   777736 0000 46         mseg_mbx_ms_gate_target_|get_mode_file
    000043  5a   000722 0000 00
    000044  9a   777734 0000 46         mseg_mbx_ms_gate_target_|get_mode_index
    000045  5a   000721 0000 00
    000046  9a   777732 0000 46         mseg_mbx_ms_gate_target_|get_uid_file
    000047  5a   000720 0000 00
    000050  9a   777730 0000 46         mseg_mbx_ms_gate_target_|get_uid_index
    000051  5a   000717 0000 00
    000052  9a   777726 0000 46         mseg_mbx_ms_gate_target_|incremental_read_index
    000053  5a   000716 0000 00
    000054  9a   777724 0000 46         mseg_mbx_ms_gate_target_|ex_acl_add
    000055  5a   000715 0000 00
    000056  9a   777722 0000 46         mseg_mbx_ms_gate_target_|ex_acl_delete
    000057  5a   000714 0000 00
    000060  9a   777720 0000 46         mseg_mbx_ms_gate_target_|ex_acl_list
    000061  5a   000713 0000 00
    000062  9a   777716 0000 46         mseg_mbx_ms_gate_target_|ex_acl_replace
    000063  5a   000712 0000 00
    000064  9a   777714 0000 46         mseg_mbx_ms_gate_target_|open
    000065  5a   000711 0000 00
    000066  9a   777712 0000 46         mseg_mbx_ms_gate_target_|open_if_full
    000067  5a   000710 0000 00
    000070  9a   777710 0000 46         mseg_mbx_ms_gate_target_|general_read_index
    000071  5a   000707 0000 00
    000072  9a   777706 0000 46         mseg_mbx_ms_gate_target_|general_read_file
    000073  5a   000706 0000 00
    000074  9a   777704 0000 46         mseg_mbx_ms_gate_target_|o_incremental_read_index
    000075  5a   000705 0000 00
    000076  9a   777702 0000 46         mseg_mbx_ms_gate_target_|o_read_index
    000077  5a   000704 0000 00
    000100  9a   777700 0000 46         mseg_mbx_ms_gate_target_|read_delete_index
    000101  5a   000703 0000 00
    000102  9a   777676 0000 46         mseg_mbx_ms_gate_target_|read_index
    000103  5a   000702 0000 00
    000104  9a   777674 0000 46         mseg_mbx_ms_gate_target_|set_max_length_file
    000105  5a   000701 0000 00
    000106  9a   777672 0000 46         mseg_mbx_ms_gate_target_|set_safety_switch
    000107  5a   000700 0000 00
    000110  9a   777670 0000 46         mseg_mbx_ms_gate_target_|update_message_index
    000111  5a   000677 0000 00
    000112  9a   777666 0000 46         mseg_mbx_ms_gate_target_|validate
    000113  5a   000676 0000 00
    000114  9a   777664 0000 46         mseg_mbx_ms_gate_target_|wakeup_add_index
    000115  5a   000675 0000 00
    000116  9a   777662 0000 46         mseg_mbx_ms_gate_target_|wakeup_aim_add_index
    000117  5a   000674 0000 00
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000004 
    000004  aa   000000 114732 
    000005  aa   732732 062314 
    000006  aa   000000 114775 
    000007  aa   666224 125233 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000255 
    000020  aa   000000 000162 
    000021  aa   000000 000225 
    000022  aa   000244 000162 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   040066 056067 
    000030  aa   040040 117143 
    000031  aa   164157 142145 
    000032  aa   162040 061071 
    000033  aa   070066 040040 
    000034  aa   107112 157150 
    000035  aa   156163 157156 
    000036  aa   056123 171163 
    000037  aa   115141 151156 
    000040  aa   164056 141040 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   154151 163164 
    000045  aa   040040 040040 
    000046  aa   040040 040040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040040 040040 
    000057  aa   040040 040040 
    000060  aa   040040 040040 
    000061  aa   040040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000004 
    000066  aa   000106 000055 
    000067  aa   147740 446112 
    000070  aa   000000 114774 
    000071  aa   460724 400000 
    000072  aa   000122 000041 
    000073  aa   134571 651553 
    000074  aa   000000 113462 
    000075  aa   317506 600000 
    000076  aa   000133 000066 
    000077  aa   147714 750316 
    000100  aa   000000 114774 
    000101  aa   453561 000000 
    000102  aa   000151 000041 
    000103  aa   052721 247134 
    000104  aa   000000 105272 
    000105  aa   317215 400000 
    000106  aa   076163 160145          >special_ldd>install>MR12.0-1206>mailbox_.alm
    000107  aa   143151 141154 
    000110  aa   137154 144144 
    000111  aa   076151 156163 
    000112  aa   164141 154154 
    000113  aa   076115 122061 
    000114  aa   062056 060055 
    000115  aa   061062 060066 
    000116  aa   076155 141151 
    000117  aa   154142 157170 
    000120  aa   137056 141154 
    000121  aa   155040 040040 
    000122  aa   076154 144144          >ldd>include>gate_macros.incl.alm
    000123  aa   076151 156143 
    000124  aa   154165 144145 
    000125  aa   076147 141164 
    000126  aa   145137 155141 
    000127  aa   143162 157163 
    000130  aa   056151 156143 
    000131  aa   154056 141154 
    000132  aa   155040 040040 
    000133  aa   076163 160145          >special_ldd>install>MR12.0-1206>stack_header.incl.alm
    000134  aa   143151 141154 
    000135  aa   137154 144144 
    000136  aa   076151 156163 
    000137  aa   164141 154154 
    000140  aa   076115 122061 
    000141  aa   062056 060055 
    000142  aa   061062 060066 
    000143  aa   076163 164141 
    000144  aa   143153 137150 
    000145  aa   145141 144145 
    000146  aa   162056 151156 
    000147  aa   143154 056141 
    000150  aa   154155 040040 
    000151  aa   076154 144144          >ldd>include>stack_frame.incl.alm
    000152  aa   076151 156143 
    000153  aa   154165 144145 
    000154  aa   076163 164141 
    000155  aa   143153 137146 
    000156  aa   162141 155145 
    000157  aa   056151 156143 
    000160  aa   154056 141154 
    000161  aa   155040 040040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

          44    .actor                   mailbox_:      29.
         100    .defs_loop               mailbox_:      29.
         141    .gate_errordesc          mailbox_:      29.
         136    .gate_errorname          mailbox_:      29.
         106    .next_def                mailbox_:      29.
         142    .no_gate_error           mailbox_:      29.
          63    .return_name             mailbox_:      29.
          76    .search_defs             mailbox_:      29.
         111    .setup                   mailbox_:      29,   32,   33,   34,   35,   36,   38,   39,   40,   41,   42,   44,
                                                        45,   46,   47,   48,   50,   51,   52,   53,   54,   56,   57,   58,
                                                        60,   61,   63,   64,   66,   67,   68,   69,   70,   72,   73,   74.
           1    accept_wakeups_index     mailbox_:      32.
         144    accept_wakeups_index.e   mailbox_:      32.
           2    add_index                mailbox_:      33.
         153    add_index.e              mailbox_:      33.
        1170    call_offset              stack_header:        80.
           3    check_salv_bit_index     mailbox_:      34.
         162    check_salv_bit_index.e   mailbox_:      34.
                chname                   mailbox_:      35.
           4    chname_file              mailbox_:      35.
         171    chname_file.e            mailbox_:      35.
           5    close                    mailbox_:      36.
         200    close.e                  mailbox_:      36.
           6    compact_file             mailbox_:      38.
         207    compact_file.e           mailbox_:      38.
           7    compact_index            mailbox_:      39.
         216    compact_index.e          mailbox_:      39.
          10    copy                     mailbox_:      40.
         225    copy.e                   mailbox_:      40.
          11    create                   mailbox_:      41.
         234    create.e                 mailbox_:      41.
          12    delete                   mailbox_:      42.
         243    delete.e                 mailbox_:      42.
          13    delete_index             mailbox_:      44.
         252    delete_index.e           mailbox_:      44.
                delete_mseg              mailbox_:      42.
        1174    entry_offset             stack_header:        84.
                ex_acl_add               mailbox_:      52.
                ex_acl_delete            mailbox_:      53.
                ex_acl_list              mailbox_:      54.
                ex_acl_replace           mailbox_:      56.
                general_read_file        mailbox_:      61.
                general_read_index       mailbox_:      60.
          14    get_message_count_index  mailbox_:      45.
         261    get_message_count_index.e      mailbox_:      45.
          15    get_mode_file            mailbox_:      46.
         270    get_mode_file.e          mailbox_:      46.
          16    get_mode_index           mailbox_:      47.
         277    get_mode_index.e         mailbox_:      47.
          17    get_uid_file             mailbox_:      48.
         306    get_uid_file.e           mailbox_:      48.
          20    get_uid_index            mailbox_:      50.
         315    get_uid_index.e          mailbox_:      50.
          21    incremental_read_index   mailbox_:      51.
         324    incremental_read_index.e       mailbox_:      51.
          44    main                     mailbox_:      29,   32,   33,   34,   35,   36,   38,   39,   40,   41,   42,   44,
                                                        45,   46,   47,   48,   50,   51,   52,   53,   54,   56,   57,   58,
                                                        60,   61,   63,   64,   66,   67,   68,   69,   70,   72,   73,   74.
          22    mbx_acl_add              mailbox_:      52.
         333    mbx_acl_add.e            mailbox_:      52.
          23    mbx_acl_delete           mailbox_:      53.
         342    mbx_acl_delete.e         mailbox_:      53.
          24    mbx_acl_list             mailbox_:      54.
         351    mbx_acl_list.e           mailbox_:      54.
          25    mbx_acl_replace          mailbox_:      56.
         360    mbx_acl_replace.e        mailbox_:      56.
                mseg_mbx_ms_gate_target_       mailbox_:      32,   33,   34,   35,   36,   38,   39,   40,   41,   42,   44,
                                                              45,   46,   47,   48,   50,   51,   52,   53,   54,   56,   57,
                                                              58,   60,   61,   63,   64,   66,   67,   68,   69,   70,   72,
                                                              73,   74.
          26    open                     mailbox_:      57.
         367    open.e                   mailbox_:      57.
          27    open_if_full             mailbox_:      58.
         376    open_if_full.e           mailbox_:      58.
          32    own_incremental_read_index     mailbox_:      63.
         423    own_incremental_read_index.e   mailbox_:      63.
          33    own_read_index           mailbox_:      64.
         432    own_read_index.e         mailbox_:      64.
                o_incremental_read_index       mailbox_:      63.
                o_read_index             mailbox_:      64.
        1171    push_offset              stack_header:        81.
          34    read_delete_index        mailbox_:      66.
         441    read_delete_index.e      mailbox_:      66.
          35    read_index               mailbox_:      67.
         450    read_index.e             mailbox_:      67.
          31    read_message_file        mailbox_:      61.
         414    read_message_file.e      mailbox_:      61.
          30    read_message_index       mailbox_:      60.
         405    read_message_index.e     mailbox_:      60.
        1173    return_no_pop_offset     stack_header:        83.
        1172    return_offset            stack_header:        82.
          36    set_max_length_file      mailbox_:      68.
         457    set_max_length_file.e    mailbox_:      68.
          37    set_safety_switch        mailbox_:      69.
         466    set_safety_switch.e      mailbox_:      69.
                signal_                  mailbox_:      29.
         130    signal_arglist           mailbox_:      29.
          73    stach_header.trace_top_ptr     stack_header:        62.
          32    stack_frame.arg_ptr      stack_frame:   16.
         100    stack_frame.condition_bit      stack_frame:   32.
          20    stack_frame.condition_word     stack_frame:    9.
        2000    stack_frame.crawl_out_bit      stack_frame:   28.
          26    stack_frame.entry_ptr    stack_frame:   13.
          20    stack_frame.flag_word    stack_frame:   24.
         400    stack_frame.link_trap_bit      stack_frame:   30.
          30    stack_frame.lp_ptr       stack_frame:   15.
       20000    stack_frame.main_proc_bit      stack_frame:   25.
          60    stack_frame.min_length   stack_frame:   23.
          22    stack_frame.next_sp      stack_frame:   10.
          36    stack_frame.on_unit_rel_ptrs   stack_frame:   19.
          30    stack_frame.operator_ptr       stack_frame:   14.
          37    stack_frame.operator_ret_ptr   stack_frame:   20.
          20    stack_frame.prev_sp      stack_frame:    8.
          40    stack_frame.regs         stack_frame:   22.
          24    stack_frame.return_ptr   stack_frame:   12.
       10000    stack_frame.run_unit_manager   stack_frame:   26.
        1000    stack_frame.signaller_bit      stack_frame:   29.
          22    stack_frame.signaller_word     stack_frame:   11.
        4000    stack_frame.signal_bit   stack_frame:   27.
          34    stack_frame.static_ptr   stack_frame:   17.
         200    stack_frame.support_bit  stack_frame:   31.
          35    stack_frame.support_ptr  stack_frame:   18.
          37    stack_frame.translator_id      stack_frame:   21.
          66    stack_header.assign_linkage_ptr      stack_header:        59.
          32    stack_header.bar_mode_sp       stack_header:        42.
          36    stack_header.call_op_ptr       stack_header:        44.
          10    stack_header.clr_ptr     stack_header:        27.
           6    stack_header.combined_stat_ptr       stack_header:        25.
           4    stack_header.cpm_data_ptr      stack_header:        24.
          13    stack_header.cpm_enabled       stack_header:        32.
          13    stack_header.cur_lot_size      stack_header:        31.
          64    stack_header.ect_ptr     stack_header:        58.
          46    stack_header.entry_op_ptr      stack_header:        49.
          70    stack_header.heap_header_ptr   stack_header:        60.
          74    stack_header.in_trace    stack_header:        63.
          52    stack_header.isot_ptr    stack_header:        52.
          26    stack_header.lot_ptr     stack_header:        39.
          12    stack_header.main_proc_invoked       stack_header:        29.
          12    stack_header.max_lot_size      stack_header:        28.
          20    stack_header.parent_ptr  stack_header:        36.
          34    stack_header.pl1_operators_ptr       stack_header:        43.
          40    stack_header.push_op_ptr       stack_header:        46.
          42    stack_header.return_op_ptr     stack_header:        47.
          44    stack_header.ret_no_pop_op_ptr       stack_header:        48.
          62    stack_header.rnt_ptr     stack_header:        57.
          12    stack_header.run_unit_depth    stack_header:        30.
          54    stack_header.sct_ptr     stack_header:        53.
          30    stack_header.signal_ptr  stack_header:        41.
          22    stack_header.stack_begin_ptr   stack_header:        37.
          24    stack_header.stack_end_ptr     stack_header:        38.
          14    stack_header.system_free_ptr   stack_header:        33.
          60    stack_header.sys_link_info_ptr       stack_header:        56.
          72    stack_header.trace_frames      stack_header:        61.
          50    stack_header.trans_op_tv_ptr   stack_header:        51.
          56    stack_header.unwinder_ptr      stack_header:        54.
          16    stack_header.user_free_ptr     stack_header:        34.
         100    stack_header_end         stack_header:        64.
           0    trace_frames.count       stack_header:        69.
           1    trace_frames.top_ptr     stack_header:        70.
           0    transfer_vector          mailbox_:      29,   32,   33,   34,   35,   36,   38,   39,   40,   41,   42,   44,
                                                        45,   46,   47,   48,   50,   51,   52,   53,   54,   56,   57,   58,
                                                        60,   61,   63,   64,   66,   67,   68,   69,   70,   72,   73,   74.
          44    tv_end                   mailbox_:      29.
         551    tv_offset                stack_header:        75,   80,   81,   82,   83,   84.
          40    update_message_index     mailbox_:      70.
         475    update_message_index.e   mailbox_:      70.
          41    validate                 mailbox_:      72.
         504    validate.e               mailbox_:      72.
          42    wakeup_add_index         mailbox_:      73.
         513    wakeup_add_index.e       mailbox_:      73.
          43    wakeup_aim_add_index     mailbox_:      74.
         522    wakeup_aim_add_index.e   mailbox_:      74.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
