	COMPILATION LISTING OF SEGMENT translator_info_
	Compiled by: Multics PL/I Compiler, Release 32a, of May 31, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 06/09/89  0824.0 mst Fri
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 
       14 
       15 /****^  HISTORY COMMENTS:
       16*  1) change(87-01-30,JRGray), approve(89-04-17,MCR8064), audit(89-04-18,Huen),
       17*     install(89-06-09,MR12.3-1055):
       18*     Modified to handle explicit archive component pathnames.
       19*                                                   END HISTORY COMMENTS */
       20 
       21 
       22 /* format: style3,^indnoniterdo */
       23 translator_info_:
       24      procedure ();
       25 
       26 /*	     "translator_info_" -- this procedure contains utility routines	*/
       27 /*	needed by the various system translators.  They are centralized here	*/
       28 /*	to avoid repetitions in each of the individual translators.		*/
       29 
       30 /*	Created by D. M. Wells in May, 1972.				*/
       31 
       32 /*	Modified by D. M. Wells on 3 August, 1972 to add comments prior	*/
       33 /*		to installation.					*/
       34 /*	Modified by M. Weaver on 12 July 1983 to add the			*/
       35 /*		dummy entrypoint component_get_source_info		*/
       36 
       37 /* * * * * PARAMETER DECLARATIONS  * * * * * * * */
       38 
       39 declare	(
       40 	bv_seg_ptr	pointer,
       41 	bv_dirname	char (*),
       42 	bv_ename		char (*),
       43 	bv_compname	char (*),
       44 	bv_date_time_modified
       45 			fixed binary (71),
       46 	bv_unique_id	bit (36) aligned,
       47 	bv_error_code	fixed bin (35)
       48 	)		parameter;
       49 
       50 /* * * * * AUTOMATIC STORAGE DECLARATIONS  * * * */
       51 
       52 declare	(
       53 	ename		char (32),
       54 	compname		char (32),
       55 	dirname		char (168)
       56 	)		automatic;
       57 
       58 declare	find_component	bit (1);
       59 
       60 declare	1 branch		aligned automatic,
       61 	  2 type		bit (2) unaligned,
       62 	  2 nnames	bit (16) unaligned,
       63 	  2 nrp		bit (18) unaligned,
       64 	  2 dtm		bit (36) unaligned,
       65 	  2 dtu		bit (36) unaligned,
       66 	  2 mode		bit (5) unaligned,
       67 	  2 padding	bit (13) unaligned,
       68 	  2 records	bit (18) unaligned,
       69 	  2 dtd		bit (36) unaligned,
       70 	  2 dtem		bit (36) unaligned,
       71 	  2 acct		bit (36) unaligned,
       72 	  2 curlen	bit (12) unaligned,
       73 	  2 bitcnt	bit (24) unaligned,
       74 	  2 did		bit (4) unaligned,
       75 	  2 mdid		bit (4) unaligned,
       76 	  2 copysw	bit (1) unaligned,
       77 	  2 pad2		bit (9) unaligned,
       78 	  2 rbs		(0:2) bit (6) unaligned,
       79 	  2 unique_id	bit (36) unaligned;
       80 
       81 declare	archive_header_ptr	ptr;
       82 declare	01 ah		like archive_header based (archive_header_ptr);
       83 
       84 /* * * * * ENTRY CONSTANT DECLARATIONS * * * * * */
       85 
       86 declare	convert_date_to_binary_
       87 			entry (char (*), fixed bin (71), fixed bin (35));
       88 declare	hcs_$fs_get_path_name
       89 			entry (ptr, char (*), fixed bin (17), char (*), fixed bin (35)),
       90 	hcs_$status_long	entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
       91 declare	error_table_$archive_fmt_err
       92 			ext fixed bin (35);
       93 
       94 declare	(addr, fixed, null) builtin;
       95 
       96 /* * * * * VALID ARCHIVE HEADER CONSTANTS * * * * */
       97 
       98 dcl	valid_header_begin	char (8) int static options (constant) init ("
       99 
      100 
      101 
      102 		");
      103 dcl	valid_pad1	char (4) int static options (constant) init ("    ");
      104 dcl	valid_pad		char (4) int static options (constant) init ("    ");
      105 dcl	valid_header_end	char (8) int static options (constant) init ("
      106 
      107 
      108 
      109 ");
      110 
      111 
      112 /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
      113 
      114 get_source_info:
      115      entry (bv_seg_ptr, bv_dirname, bv_ename, bv_date_time_modified, bv_unique_id, bv_error_code);
      116 
      117 	find_component = "0"b;
      118 	goto join;
      119 
      120 component_get_source_info:
      121      entry (bv_seg_ptr, bv_dirname, bv_ename, bv_compname, bv_date_time_modified, bv_unique_id, bv_error_code);
      122 
      123 	find_component = "1"b;
      124 
      125 /* find out where in storage system this is	*/
      126 join:
      127 	call hcs_$fs_get_path_name (bv_seg_ptr, dirname, (0), ename, bv_error_code);
      128 	if bv_error_code ^= 0
      129 	then return;
      130 
      131 /* get the structure with all the info		*/
      132 	call hcs_$status_long (dirname, ename, 0b, addr (branch), null (), bv_error_code);
      133 	if bv_error_code ^= 0
      134 	then return;
      135 
      136 	bv_dirname = dirname;			/* Notice that we used our own "dirname" and	*/
      137 	bv_ename = ename;				/* "ename" because the caller may have given us	*/
      138 						/* too short a string to hold the names, e.g.,	*/
      139 						/* a string of zero length.			*/
      140 
      141 	bv_date_time_modified = fixed (branch.dtm || (16)"0"b, 71);
      142 						/* branch.dtm is a storage system time	*/
      143 	bv_unique_id = branch.unique_id;
      144 
      145 	if find_component
      146 	then do;
      147 	     bv_compname = "";
      148 	     if fixed (rel (bv_seg_ptr)) >= size (archive_header)
      149 	     then do;				/* can be archive component */
      150 		archive_header_ptr = addrel (bv_seg_ptr, -size (archive_header));
      151 		if ah.header_begin = valid_header_begin & ah.pad1 = valid_pad1 & ah.pad = valid_pad
      152 		     & ah.header_end = valid_header_end
      153 		then do;
      154 		     bv_compname = ah.name;
      155 		     call convert_date_to_binary_ (ah.timeup, bv_date_time_modified, bv_error_code);
      156 		end;
      157 		else bv_error_code = error_table_$archive_fmt_err;
      158 	     end;
      159 	end;
      160 
      161 
      162 
  1     1 /* BEGIN INCLUDE FILE archive_header.incl.pl1 */
  1     2 
  1     3 
  1     4 dcl 1 archive_header aligned based,
  1     5     2 header_begin char (8),
  1     6     2 pad1 char (4),
  1     7     2 name char (32),
  1     8     2 timeup char (16),
  1     9     2 mode char (4),
  1    10     2 time char (16),
  1    11     2 pad char (4),
  1    12     2 bit_count char (8),
  1    13     2 header_end char (8);
  1    14 
  1    15 /* END INCLUDE archive_header.incl.pl1 */
      163 
      164 
      165      end translator_info_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    06/09/89  0808.3  translator_info_.pl1              >spec>install>1055>translator_info_.pl1
163          1    02/06/76  1405.1  archive_header.incl.pl1           >ldd>include>archive_header.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
addr                                                   builtin function         dcl 94 ref 132 132
ah                                     based           structure                level 1 packed packed unaligned dcl 82
archive_header                         based           structure                level 1 dcl 1-4 ref 148 150
archive_header_ptr              000176 automatic       pointer                  dcl 81 set ref 150* 151 151 151 151 154 155
branch                          000163 automatic       structure                level 1 dcl 60 set ref 132 132
bv_compname                            parameter       char                     packed unaligned dcl 39 set ref 120 147* 154*
bv_date_time_modified                  parameter       fixed bin(71,0)          dcl 39 set ref 114 120 141* 155*
bv_dirname                             parameter       char                     packed unaligned dcl 39 set ref 114 120 136*
bv_ename                               parameter       char                     packed unaligned dcl 39 set ref 114 120 137*
bv_error_code                          parameter       fixed bin(35,0)          dcl 39 set ref 114 120 126* 128 132* 133 155* 157*
bv_seg_ptr                             parameter       pointer                  dcl 39 set ref 114 120 126* 148 150
bv_unique_id                           parameter       bit(36)                  dcl 39 set ref 114 120 143*
convert_date_to_binary_         000010 constant        entry                    external dcl 86 ref 155
dirname                         000110 automatic       char(168)                packed unaligned dcl 52 set ref 126* 132* 136
dtm                       1     000163 automatic       bit(36)                  level 2 packed packed unaligned dcl 60 set ref 141
ename                           000100 automatic       char(32)                 packed unaligned dcl 52 set ref 126* 132* 137
error_table_$archive_fmt_err    000016 external static fixed bin(35,0)          dcl 91 ref 157
find_component                  000162 automatic       bit(1)                   packed unaligned dcl 58 set ref 117* 123* 145
fixed                                                  builtin function         dcl 94 ref 141 148
hcs_$fs_get_path_name           000012 constant        entry                    external dcl 88 ref 126
hcs_$status_long                000014 constant        entry                    external dcl 88 ref 132
header_begin                           based           char(8)                  level 2 packed packed unaligned dcl 82 ref 151
header_end               27            based           char(8)                  level 2 packed packed unaligned dcl 82 ref 151
name                      3            based           char(32)                 level 2 packed packed unaligned dcl 82 ref 154
null                                                   builtin function         dcl 94 ref 132 132
pad                      24            based           char(4)                  level 2 packed packed unaligned dcl 82 ref 151
pad1                      2            based           char(4)                  level 2 packed packed unaligned dcl 82 ref 151
timeup                   13            based           char(16)                 level 2 packed packed unaligned dcl 82 set ref 155*
unique_id                11     000163 automatic       bit(36)                  level 2 packed packed unaligned dcl 60 set ref 143
valid_header_begin              000004 constant        char(8)                  initial packed unaligned dcl 98 ref 151
valid_header_end                000000 constant        char(8)                  initial packed unaligned dcl 105 ref 151
valid_pad                       000002 constant        char(4)                  initial packed unaligned dcl 104 ref 151
valid_pad1                      000002 constant        char(4)                  initial packed unaligned dcl 103 ref 151

NAME DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
compname                               automatic       char(32)                 packed unaligned dcl 52

NAMES DECLARED BY EXPLICIT CONTEXT.
component_get_source_info       000076 constant        entry                    external dcl 120
get_source_info                 000037 constant        entry                    external dcl 114
join                            000134 constant        label                    dcl 126 set ref 118
translator_info_                000023 constant        entry                    external dcl 23

NAMES DECLARED BY CONTEXT OR IMPLICATION.
addrel                                                 builtin function         ref 150
rel                                                    builtin function         ref 148
size                                                   builtin function         ref 148 150

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       466         506     352         476
Length       700     352        20         155     113           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
translator_info_                    190 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
translator_info_         000100 ename                       translator_info_
                         000110 dirname                     translator_info_
                         000162 find_component              translator_info_
                         000163 branch                      translator_info_
                         000176 archive_header_ptr          translator_info_

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   return_mac          ext_entry           ext_entry_desc

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
convert_date_to_binary_       hcs_$fs_get_path_name         hcs_$status_long

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$archive_fmt_err




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     23 000022       114 000030       117 000066       118 000067       120 000070       123 000132       126 000134
    128 000167       132 000171       133 000232       136 000234       137 000242       141 000247       143 000253
    145 000255       147 000257       148 000264       150 000275       151 000300       154 000320       155 000324
    156 000345       157 000346       165 000351


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
