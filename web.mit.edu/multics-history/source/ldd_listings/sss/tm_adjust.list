	COMPILATION LISTING OF SEGMENT tm_adjust
	Compiled by: Multics PL/I Compiler, Release 28e, of February 14, 1985
	Compiled at: Honeywell Multics Op. - System M
	Compiled on: 04/04/85  0947.8 mst Thu
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 /* format: style4,ifthenstmt,^indproc,^indcomtxt */
        7 /*---------------*/
        8 
        9 tm_adjust: proc (A_txn_id, A_code);
       10 
       11 /* DESCRIPTION:
       12*
       13*   Called  by  the  user,  sends  a  message  to  the daemon to adjust a
       14*   transaction.
       15**/
       16 
       17 /* HISTORY:
       18*
       19*Written by Steve Herbst, 05/11/83.
       20*Modified:
       21*10/23/84 by Steve Herbst: Changed in response to audit comments.
       22*03/05/85 by Steve Herbst: Replaced dm_log_ with dm_misc_util_$log.
       23**/
       24 
       25 /* DECLARATIONS */
       26 
       27 /* Parameters */
       28 
       29 dcl  A_txn_id bit (36) aligned parameter;
       30 dcl  A_code fixed bin (35) parameter;
       31 
       32 
       33 /* Constants */
       34 
       35 /* Based */
       36 
       37 /* Static */
       38 
       39 /* Automatic */
       40 
       41 dcl person char (22);
       42 dcl project char (9);
       43 dcl txn_id bit (36) aligned;
       44 dcl txn_index fixed bin;
       45 dcl code fixed bin (35);
       46 
       47 /* External */
       48 
       49 dcl dm_data_$tm_tdt_ptr ptr ext;
       50 dcl dm_error_$not_own_transaction fixed bin (35) ext;
       51 dcl dm_error_$transaction_not_abandoned fixed bin (35) ext;
       52 dcl error_table_$unimplemented_version fixed bin (35) ext;
       53 
       54 /* Entries */
       55 
       56 dcl dm_misc_util_$log entry options (variable);
       57 dcl dm_send_request_$adjust_txn entry (bit (36) aligned, fixed bin, fixed bin (35));
       58 dcl tm_get_txn_index entry (bit (36) aligned, fixed bin (35)) returns (fixed bin);
       59 dcl user_info_ entry options (variable);
       60 
       61 /* Builtins */
       62 
       63 dcl (fixed, rtrim) builtin;
       64 
       65 /* Conditions */
       66 
       67 /* END OF DECLARATIONS */
       68 
       69 	A_code = 0;
       70 	txn_id = A_txn_id;
       71 
       72 	tm_tdt_ptr = dm_data_$tm_tdt_ptr;
       73 
       74 	if tm_tdt.version ^= TM_TDT_VERSION_3 then call ERROR_RETURN (error_table_$unimplemented_version);
       75 
       76 	txn_index = tm_get_txn_index (txn_id, code);
       77 	if code ^= 0 then call ERROR_RETURN (code);
       78 
       79 	call user_info_ (person, project);
       80 	if tm_tdt.owner_name (txn_index) ^= rtrim (person) || "." || project then
       81 	     call ERROR_RETURN (dm_error_$not_own_transaction);
       82 
       83 	if ^tm_tdt.abandoned_sw (txn_index) then
       84 	     call ERROR_RETURN (dm_error_$transaction_not_abandoned);
       85 
       86 	call dm_send_request_$adjust_txn (tm_tdt.txn_id (txn_index), txn_index, 0);
       87 
       88 	call dm_misc_util_$log (INFORM_SV, "User requested adjustment of txn ^d, TID = ^o, pid = ^w, state = ^d",
       89 	     txn_index, fixed (tm_tdt.txn_id (txn_index)), tm_tdt.process_id (txn_index), tm_tdt.state (txn_index));
       90 RETURN:
       91 	return;
       92 
       93 ERROR_RETURN: proc (P_code);
       94 
       95 dcl P_code fixed bin (35);
       96 
       97 	A_code = P_code;
       98 	go to RETURN;
       99 
      100 end ERROR_RETURN;
      101 
  1     1 /*  START OF:	dm_tm_tdt.incl.pl1		*/
  1     2 
  1     3 /* Transaction Definition Table for transaction_manager_ */
  1     4 /* This structure is used to reference the TDT. The process_id field for the
  1     5*   i'th TDT entry, for example, is usually referenced as tm_tdt.process_id (i).
  1     6*   A TDT entry is in use by a process when its process_id field is nonzero.
  1     7*   An entry is reserved by using the stacq builtin to set process_id, if and
  1     8*   only if it is already zero. The entry is being used for a transaction when
  1     9*   tm_tdt.txn_id (i) is nonzero. The possible values of tm_tdt.state (i) are
  1    10*   listed in dm_tm_states.incl.pl1. If state = 0, no operation has been
  1    11*   performed yet on the transaction. */
  1    12 
  1    13 
  1    14 /* HISTORY:
  1    15*Designed by Matt Pierret, 01/26/82.
  1    16*Coded by Steve Herbst, 07/27/82.
  1    17*Modified:
  1    18*08/05/82 by Steve Herbst: Added tm_tdt.operation and padded last_uid to full word.
  1    19*08/05/82 by Steve Herbst: Changed creator_process_id to bit (36).
  1    20*08/16/82 by Steve Herbst: Added contents of dm_tm_tdt_entry.incl.pl1.
  1    21*09/09/82 by Steve Herbst: Removed in_use flag from TDT entry and rearranged fields.
  1    22*09/20/82 by Steve Herbst: Removed tm_tdt.operation.
  1    23*11/01/82 by Steve Herbst: Added event_channel and error_sw to tm_tdt_entry.
  1    24*11/05/82 by Steve Herbst: Added suspended_sw and error_code to tm_tdt_entry.
  1    25*11/11/82 by Steve Herbst: Deleted tm_tdt_entry.alloc_complete.
  1    26*11/23/82 by Steve Herbst: Compacted, changed some numbers to unsigned.
  1    27*12/14/82 by Steve Herbst: Added tm_tdt_entry.daemon_error_sw.
  1    28*01/11/83 by Steve Herbst: Added owner_name, abandoned_sw & kill_sw to tm_tdt_entry.
  1    29*01/24/83 by Steve Herbst: Replaced daemon_error_sw with daemon_adjust_count.
  1    30*01/25/83 by Steve Herbst: Moved abandoned_sw from transaction portion to entry header portion.
  1    31*05/13/83 by Steve Herbst: Version 3, changed all fixed bin (18) unal uns numbers to fixed bin (17) unaligned.
  1    32*05/26/83 by Steve Herbst: Added rollback_count and checkpoint_id.
  1    33**/
  1    34 
  1    35 dcl	tm_tdt_ptr	ptr;
  1    36 dcl	tdt_max_count	fixed bin;
  1    37 
  1    38 dcl TM_TDT_VERSION_3 char (8) int static options (constant) init ("TM-TDT 3");
  1    39 
  1    40 
  1    41 dcl  1	tm_tdt		aligned based (tm_tdt_ptr),
  1    42       2	version char (8),				/* = "TM-TDT 3" */
  1    43       2	lock fixed bin (71),			/* (currently not used) */
  1    44       2	last_uid		bit (27) aligned,		/* last transaction uid assigned */
  1    45       2	flags,
  1    46        3	no_begins		bit (1) unaligned,		/* ON => only priv process can begin transaction */
  1    47        3	mbz1		bit (35) unaligned,
  1    48       2	entry_count	fixed bin,		/* number of slots allocated */
  1    49       2	mbz2		fixed bin,		/* for even word boundary */
  1    50       2	entry  (tdt_max_count refer (tm_tdt.entry_count))
  1    51 			like tm_tdt_entry;
  1    52 
  1    53 
  1    54 
  1    55 /* TDT entries: */
  1    56 
  1    57 dcl	tm_tdt_entry_ptr	ptr;
  1    58 
  1    59 dcl  1	tm_tdt_entry	aligned based (tm_tdt_entry_ptr),
  1    60       2	event_channel	fixed bin (71),		/* for communication with the process */
  1    61       2	process_id	bit (36) aligned,		/* process for which this entry is reserved */
  1    62       2	owner_name	char (32),		/* person.project of owner process */
  1    63       2	entry_flags,
  1    64        3	abandoned_sw	bit (1) unaligned,		/* ON => owner has called tm_$abandon on this entry */
  1    65        3	mbz3		bit (35) unaligned,
  1    66       2	transaction	unaligned,
  1    67        3	txn_id		bit (36) aligned,		/* unique identifier assigned at begin time */
  1    68        3	date_time_created	fixed bin (71) aligned,
  1    69        3	mode		fixed bin (17) unaligned,	/* mode specified with transaction begin */
  1    70        3	state		fixed bin (17) unaligned,	/* state transaction is currently in */
  1    71        3  error_code	fixed bin (35) aligned,	/* goes along with error_sw and error state */
  1    72        3 	checkpoint_id	fixed bin (17) unaligned,	/* identifier of the current rollback checkpoint */
  1    73        3	rollback_count	fixed bin (17) unaligned,	/* number of times bjm_$rollback has been called */
  1    74        3	daemon_adjust_count	fixed bin (17) unaligned,	/* number of times daemon has tried to adjust since user */
  1    75        3	return_idx	fixed bin (17) unaligned,	/* parent transaction, or zero */
  1    76        3	flags,
  1    77         4 dead_process_sw	bit (1) unaligned,		/* ON => treat process as dead even if it isn't yet */
  1    78         4 suspended_sw	bit (1) unaligned,		/* ON => suspended by tm_$suspend_txn */
  1    79         4 error_sw		bit (1) unaligned,		/* ON => state is one of the error states */
  1    80         4 kill_sw		bit (1) unaligned,		/* ON => being processed by tm_$kill */
  1    81         4	mbz4		bit (29) unaligned,
  1    82        3	post_commit_flags,
  1    83         4 (fmgr,
  1    84 	 bjmgr,
  1    85 	 ajmgr)	 	 bit (1) unaligned,
  1    86        3	mbz4		fixed bin;
  1    87 
  1    88 
  1    89 /*  END OF:	dm_tm_tdt.incl.pl1		*/
      102 
      103 
  2     1 /* BEGIN INCLUDE FILE dm_log_sv_codes.incl.pl1 */
  2     2 
  2     3 /* format: ^indcom */
  2     4 
  2     5 /* DESCRIPTION:
  2     6*   These are the severity codes used by the dms daemon when calling its logger.
  2     7*   The severity is ranked thusly:
  2     8*
  2     9*   severity log write situation
  2    10*   -------- --- ----- ---------
  2    11*          0 no  yes   standard output, query, etc.
  2    12*          1 yes yes   fatal error, terminate dms daemon.
  2    13*          2 yes yes   nonfatal error.
  2    14*          3 yes yes   informative message.
  2    15*          4 yes no    log information only.
  2    16**/
  2    17 
  2    18 /* HISTORY:
  2    19*
  2    20*Written by M. Pandolf, 10/06/82.
  2    21*Modified:
  2    22*12/10/84 by R. Michael Tague: Rename and reformat description/history.
  2    23*01/13/85 by Lee A. Newcomb:  Renamed to dm_log_sv_codes from
  2    24*            dm_daemon_sv_codes as the severity codes for the DM log are not
  2    25*            restrained to the DM Daemon's use.
  2    26*01/24/85 by Lee A. Newcomb:  Fixed to say dm_log_sv_codes.incl.pl1 in the
  2    27*            BEGIN and END INCLUDE comments, instead of dm_daemon_sv_codes.==.
  2    28**/
  2    29 
  2    30 /* format: style5 */
  2    31 
  2    32      dcl	   (PRINT_SV, QUERY_SV)    fixed bin internal static
  2    33 			       options (constant) init (0);
  2    34      dcl	   (CRASH_SV, FATAL_SV)    fixed bin internal static
  2    35 			       options (constant) init (1);
  2    36      dcl	   ERROR_SV	       fixed bin internal static
  2    37 			       options (constant) init (2);
  2    38      dcl	   INFORM_SV	       fixed bin internal static
  2    39 			       options (constant) init (3);
  2    40      dcl	   LOG_SV		       fixed bin internal static
  2    41 			       options (constant) init (4);
  2    42 
  2    43 /* END INCLUDE FILE dm_log_sv_codes.incl.pl1 */
      104 
      105 
      106 
      107 end tm_adjust;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/04/85  0827.0  tm_adjust.pl1                     >spec>on>7192.pbf-04/04/85>tm_adjust.pl1
102          1    01/07/85  0900.1  dm_tm_tdt.incl.pl1                >ldd>include>dm_tm_tdt.incl.pl1
104          2    03/06/85  1031.1  dm_log_sv_codes.incl.pl1          >ldd>include>dm_log_sv_codes.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
A_code                                 parameter       fixed bin(35,0)          dcl 30 set ref 9 69* 97*
A_txn_id                               parameter       bit(36)                  dcl 29 ref 9 70
INFORM_SV                       000000 constant        fixed bin(17,0)          initial dcl 2-38 set ref 88*
P_code                                 parameter       fixed bin(35,0)          dcl 95 ref 93 97
TM_TDT_VERSION_3                000002 constant        char(8)                  initial unaligned dcl 1-38 ref 74
abandoned_sw             23            based           bit(1)                   array level 4 packed unaligned dcl 1-41 ref 83
code                            000113 automatic       fixed bin(35,0)          dcl 45 set ref 76* 77 77*
dm_data_$tm_tdt_ptr             000010 external static pointer                  dcl 49 ref 72
dm_error_$not_own_transaction   000012 external static fixed bin(35,0)          dcl 50 set ref 80*
dm_error_$transaction_not_abandoned
                                000014 external static fixed bin(35,0)          dcl 51 set ref 83*
dm_misc_util_$log               000020 constant        entry                    external dcl 56 ref 88
dm_send_request_$adjust_txn     000022 constant        entry                    external dcl 57 ref 86
entry                    10            based           structure                array level 2 dcl 1-41
entry_flags              23            based           structure                array level 3 dcl 1-41
error_table_$unimplemented_version
                                000016 external static fixed bin(35,0)          dcl 52 set ref 74*
fixed                                                  builtin function         dcl 63 ref 88 88
owner_name               13            based           char(32)                 array level 3 dcl 1-41 ref 80
person                          000100 automatic       char(22)                 unaligned dcl 41 set ref 79* 80
process_id               12            based           bit(36)                  array level 3 dcl 1-41 set ref 88*
project                         000106 automatic       char(9)                  unaligned dcl 42 set ref 79* 80
rtrim                                                  builtin function         dcl 63 ref 80
state                    30(18)        based           fixed bin(17,0)          array level 4 packed unaligned dcl 1-41 set ref 88*
tm_get_txn_index                000024 constant        entry                    external dcl 58 ref 76
tm_tdt                                 based           structure                level 1 dcl 1-41
tm_tdt_entry                           based           structure                level 1 dcl 1-59
tm_tdt_ptr                      000114 automatic       pointer                  dcl 1-35 set ref 72* 74 80 83 86 88 88 88 88
transaction              24            based           structure                array level 3 unaligned dcl 1-41
txn_id                          000111 automatic       bit(36)                  dcl 43 in procedure "tm_adjust" set ref 70* 76*
txn_id                   24            based           bit(36)                  array level 4 in structure "tm_tdt" dcl 1-41
                                                                                  in procedure "tm_adjust" set ref 86* 88 88
txn_index                       000112 automatic       fixed bin(17,0)          dcl 44 set ref 76* 80 83 86 86* 88* 88 88 88 88
user_info_                      000026 constant        entry                    external dcl 59 ref 79
version                                based           char(8)                  level 2 dcl 1-41 ref 74

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
CRASH_SV                               internal static fixed bin(17,0)          initial dcl 2-34
ERROR_SV                               internal static fixed bin(17,0)          initial dcl 2-36
FATAL_SV                               internal static fixed bin(17,0)          initial dcl 2-34
LOG_SV                                 internal static fixed bin(17,0)          initial dcl 2-40
PRINT_SV                               internal static fixed bin(17,0)          initial dcl 2-32
QUERY_SV                               internal static fixed bin(17,0)          initial dcl 2-32
tdt_max_count                          automatic       fixed bin(17,0)          dcl 1-36
tm_tdt_entry_ptr                       automatic       pointer                  dcl 1-57

NAMES DECLARED BY EXPLICIT CONTEXT.
ERROR_RETURN                    000312 constant        entry                    internal dcl 93 ref 74 77 80 83
RETURN                          000311 constant        label                    dcl 90 ref 98
tm_adjust                       000041 constant        entry                    external dcl 9

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       466         516     325         476
Length       726     325        30         174     140           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
tm_adjust                           158 external procedure  is an external procedure.  
ERROR_RETURN                            internal procedure  shares stack frame of external procedure tm_adjust.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
tm_adjust                000100 person                      tm_adjust
                         000106 project                     tm_adjust
                         000111 txn_id                      tm_adjust
                         000112 txn_index                   tm_adjust
                         000113 code                        tm_adjust
                         000114 tm_tdt_ptr                  tm_adjust

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_cs            cat_realloc_cs      call_ext_out_desc   call_ext_out        return              shorten_stack
ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
dm_misc_util_$log             dm_send_request_$adjust_txn   tm_get_txn_index              user_info_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
dm_data_$tm_tdt_ptr           dm_error_$not_own_transaction dm_error_$transaction_not_abandoned
error_table_$unimplemented_version




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
      9 000035        69 000046        70 000050        72 000052        74 000055        76 000070        77 000103
     79 000107        80 000124        83 000200        86 000216        88 000235        90 000311        93 000312
     97 000314        98 000317


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
