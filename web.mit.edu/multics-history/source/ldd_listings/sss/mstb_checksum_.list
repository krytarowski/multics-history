ASSEMBLY LISTING OF SEGMENT >special_ldd>temp>as>mstb_checksum_.alm              
ASSEMBLED ON:	12/05/84  1100.3 mst Wed
OPTIONS USED:	list 
ASSEMBLED BY:	ALM Version  6.6  November 1982 
ASSEMBLER CREATED:	09/21/83  1227.3 mst Wed

                                     1  " ***********************************************************
                                     2  " *                                                         *
                                     3  " * Copyright, (C) Honeywell Information Systems Inc., 1984 *
                                     4  " *                                                         *
                                     5  " ***********************************************************
    000000                           6  	name	mstb_checksum_
                                     7  
                                     8  " Checksums for mstb components.  It logically adds up double words
                                     9  " and then collapses the resulting double word into an 18-bit checksum.
                                    10  " 
                                    11  
                                    12  " BIM 1984-07-23
                                    13  " Modified 1984-08-13 by E. Swenson so that it would work.
                                    14  "
                                    15  " declare mstb_checksum_$sum_entry (pointer, fixed bin (35)) returns (fixed bin (18) unsigned);
                                    16  "
                                    17  " checksum =  mstb_checksum_$sum_entry (addr (vector), n_doublewords);
                                    18  "
                                    19  " Where: vector is a double-word aligned vector of pairs
                                    20  " n_doublewords is its length in double-words.
                                    21  " checksum (output) is the resultant checksum.
                                    22  "
                                    23  " declare mstb_checksum_$check_entry entry (pointer, fixed bin (35), fixed bin (18) unsigned)
                                    24  "			       returns (bit (1) aligned)
                                    25  " valid = mstb_checksum_$check_entry (vector_ptr, n_doublewords, checksum)
                                    26  "
                                    27  "
                                    28  
                                    29  " Parameters for sum_entry
                                    30  
                        000002      31  	equ	se.vector_ptr,2
                        000004      32  	equ	se.vector_count,4
                        000006      33  	equ	se.entry_checksum,6
                                    34  
                                    35  " Parameters for check_entry
                                    36  
                        000002      37  	equ	ce.vector_ptr,2
                        000004      38  	equ	ce.vector_count,4
                        000006      39  	equ	ce.checksum,6
                        000010      40  	equ	ce.return_value,8
                                    41  
                                    42  "
                                    43  
                        000023      44  	entry	sum_entry,check_entry
                                    45  
    000000                          46  sum_entry:
    000000  aa  0 00002 3515 20     47  	epp1	ap|se.vector_ptr,*	          " ptr to ptr to vector
    000001  aa  1 00000 3515 20     48  	epp1	pr1|0,*			" ptr to vector
    000002  aa  0 00004 2351 20     49  	lda	ap|se.vector_count,*	" N
    000003  aa   000001 7350 00     50  	als	1			" offset 2 past last
    000004  aa   000000 6210 05     51  	eax1	0,al			" into X1
    000005  aa   000000 4310 03     52  	fld	0,du
    000006                          53  sum_entry.loop:
    000006  aa  1 77776 0371 11     54  	adlaq	pr1|-2,x1			" Pick up next pair
    000007  aa   000002 1610 03     55  	sbx1	2,du			" done?
    000010  0a   000006 6010 00     56  	tnz	sum_entry.loop		" not until zero
    000011  aa  0 00006 7551 20     57  	sta	ap|se.entry_checksum,*	" need a temporary
    000012  aa  0 00006 0361 20     58  	adlq	ap|se.entry_checksum,*	" add a and q
    000013  aa   000000 6210 06     59  	eax1	0,ql
    000014  aa   777777 3760 03     60  	anq	=o777777,du
    000015  aa  0 00006 7561 20     61  	stq	ap|se.entry_checksum,*
    000016  aa  0 00006 0211 20     62  	adlx1	ap|se.entry_checksum,*	" add upper to lower
    000017  aa  0 00006 4411 20     63  	sxl1	ap|se.entry_checksum,*	" store result
    000020  0a   000064 2350 06     64  	lda	=o777777,ql
    000021  aa  0 00006 3551 20     65  	ansa	ap|se.entry_checksum,*	" only want upper 18 bits
    000022  aa  7 00044 7101 20     66  	short_return
                                    67  
    000023                          68  check_entry:
    000023  aa  0 00002 3515 20     69  	epp1	ap|ce.vector_ptr,*
    000024  aa  1 00000 3515 20     70  	epp1	pr1|0,*		          " pointer to the vector
    000025  aa  0 00004 2351 20     71  	lda	ap|ce.vector_count,*	" N
    000026  aa   000001 7350 00     72  	als	1			" offset 2 past last
    000027  aa   000000 6210 05     73  	eax1	0,al			" into X1
    000030  aa   000000 4310 07     74  	fld	0,dl
                                    75  "	lda	0,dl
                                    76  "	ldq	ap|ce.checksum,*		" ignore bit offset
                                    77  "	anq	=o777777,dl
                                    78  "	negl				" prime checksum with initial
                                    79  					" value.
    000031                          80  check_entry.loop:
    000031  aa  1 77776 0371 11     81  	adlaq	pr1|-2,x1			" Pick up next pair
    000032  aa   000002 1610 03     82  	sbx1	2,du			" done?
    000033  0a   000031 6010 00     83  	tnz	check_entry.loop		" not until zero
    000034  aa  0 00010 7551 20     84  	sta	ap|ce.return_value,*	" need a temporary
    000035  aa  0 00010 0361 20     85  	adlq	ap|ce.return_value,*	" add a and q
    000036  aa   000000 6210 06     86  	eax1	0,ql
    000037  aa   777777 3760 03     87  	anq	=o777777,du
    000040  aa  0 00010 7561 20     88  	stq	ap|ce.return_value,*
    000041  aa  0 00010 0211 20     89  	adlx1	ap|ce.return_value,*	" add upper to lower
    000042  aa  0 00010 4411 20     90  	sxl1	ap|ce.return_value,*	" store result
    000043  0a   000064 2350 06     91  	lda	=o777777,ql
    000044  aa  0 00010 3551 20     92  	ansa	ap|ce.return_value,*	" only want upper 18 bits
    000045  aa  0 00010 2361 20     93  	ldq	ap|ce.return_value,*	" need it to compare
    000046  aa  0 00006 1161 20     94  	cmpq	ap|ce.checksum,*
    000047  0a   000053 6010 00     95  	tnz	check_entry.fail
    000050  aa   400000 2350 03     96  	lda	=o400000,du
    000051  aa  0 00010 7551 20     97  	sta	ap|ce.return_value,*
    000052  aa  7 00044 7101 20     98  	short_return
    000053                          99  check_entry.fail:
    000053  aa  0 00010 4501 20    100  	stz	ap|ce.return_value,*
    000054  aa  7 00044 7101 20    101  	short_return
                                   102  
                                   103  	end
ENTRY SEQUENCES
     
    000055  5a   000020 0000 00
    000056  aa  7 00046 2721 20
    000057  0a   000000 7100 00
    000060  5a   000012 0000 00
    000061  aa  7 00046 2721 20
    000062  0a   000023 7100 00
LITERALS
     
    000064  aa   000000 777777 
NAME DEFINITIONS FOR ENTRY POINTS AND SEGDEFS

    000065  5a   000003 000000 
    000066  5a   000035 600000 
    000067  aa   000000 000000 
    000070  55   000012 000002 
    000071  5a   000002 400003 
    000072  55   000006 000012 
    000073  aa  016 155 163 164
    000074  aa  142 137 143 150
    000075  aa  145 143 153 163
    000076  aa  165 155 137 000
    000077  55   000020 000003 
    000100  0a   000061 500000 
    000101  55   000015 000003 
    000102  aa  013 143 150 145         check_entry
    000103  aa  143 153 137 145
    000104  aa  156 164 162 171
    000105  55   000026 000012 
    000106  0a   000056 500000 
    000107  55   000023 000003 
    000110  aa  011 163 165 155         sum_entry
    000111  aa  137 145 156 164
    000112  aa  162 171 000 000
    000113  55   000002 000020 
    000114  6a   000000 400002 
    000115  55   000031 000003 
    000116  aa  014 163 171 155         symbol_table
    000117  aa  142 157 154 137
    000120  aa  164 141 142 154
    000121  aa  145 000 000 000

DEFINITIONS HASH TABLE

    000122  aa   000000 000015 
    000123  aa   000000 000000 
    000124  5a   000020 000000 
    000125  aa   000000 000000 
    000126  aa   000000 000000 
    000127  aa   000000 000000 
    000130  aa   000000 000000 
    000131  5a   000026 000000 
    000132  aa   000000 000000 
    000133  aa   000000 000000 
    000134  aa   000000 000000 
    000135  aa   000000 000000 
    000136  aa   000000 000000 
    000137  5a   000012 000000 

NO EXTERNAL NAMES

NO TRAP POINTER WORDS

TYPE PAIR BLOCKS

    000140  aa   000001 000000 
    000141  aa   000000 000000 

INTERNAL EXPRESSION WORDS

LINKAGE INFORMATION
      
    000000  aa   000000 000000 
    000001  0a   000065 000000 
    000002  aa   000000 000000 
    000003  aa   000000 000000 
    000004  aa   000000 000000 
    000005  aa   000000 000000 
    000006  22   000010 000010 
    000007  a2   000000 000000 
SYMBOL INFORMATION
     
SYMBOL TABLE HEADER
     
    000000  aa   000000 000001 
    000001  aa   163171 155142 
    000002  aa   164162 145145 
    000003  aa   000000 000004 
    000004  aa   000000 112143 
    000005  aa   305203 523135 
    000006  aa   000000 113215 
    000007  aa   613307 335360 
    000010  aa   141154 155040 
    000011  aa   040040 040040 
    000012  aa   000024 000040 
    000013  aa   000034 000040 
    000014  aa   000044 000100 
    000015  aa   000002 000002 
    000016  aa   000064 000000 
    000017  aa   000000 000123 
    000020  aa   000000 000104 
    000021  aa   000000 000112 
    000022  aa   000115 000104 
    000023  aa   000064 000000 
    000024  aa   101114 115040 
    000025  aa   126145 162163 
    000026  aa   151157 156040 
    000027  aa   040066 056066 
    000030  aa   040040 116157 
    000031  aa   166145 155142 
    000032  aa   145162 040061 
    000033  aa   071070 062040 
    000034  aa   107112 157150 
    000035  aa   156163 157156 
    000036  aa   056123 171163 
    000037  aa   115141 151156 
    000040  aa   164056 155040 
    000041  aa   040040 040040 
    000042  aa   040040 040040 
    000043  aa   040040 040040 
    000044  aa   154151 163164 
    000045  aa   040040 040040 
    000046  aa   040040 040040 
    000047  aa   040040 040040 
    000050  aa   040040 040040 
    000051  aa   040040 040040 
    000052  aa   040040 040040 
    000053  aa   040040 040040 
    000054  aa   040040 040040 
    000055  aa   040040 040040 
    000056  aa   040040 040040 
    000057  aa   040040 040040 
    000060  aa   040040 040040 
    000061  aa   040040 040040 
    000062  aa   040040 040040 
    000063  aa   040040 040040 
    000064  aa   000000 000001 
    000065  aa   000000 000001 
    000066  aa   000072 000047 
    000067  aa   132152 034151 
    000070  aa   000000 113215 
    000071  aa   521501 000000 
    000072  aa   076163 160145          >special_ldd>temp>as>mstb_checksum_.alm
    000073  aa   143151 141154 
    000074  aa   137154 144144 
    000075  aa   076164 145155 
    000076  aa   160076 141163 
    000077  aa   076155 163164 
    000100  aa   142137 143150 
    000101  aa   145143 153163 
    000102  aa   165155 137056 
    000103  aa   141154 155040 
               MULTICS ASSEMBLY CROSS REFERENCE LISTING

   Value        Symbol                   Source file   Line number

           6    ce.checksum              mstb_checksum_:      39,   94.
          10    ce.return_value          mstb_checksum_:      40,   84,   85,   88,   89,   90,   92,   93,   97,  100.
           4    ce.vector_count          mstb_checksum_:      38,   71.
           2    ce.vector_ptr            mstb_checksum_:      37,   69.
          23    check_entry              mstb_checksum_:      44,   68.
          53    check_entry.fail         mstb_checksum_:      95,   99.
          31    check_entry.loop         mstb_checksum_:      80,   83.
           6    se.entry_checksum        mstb_checksum_:      33,   57,   58,   61,   62,   63,   65.
           4    se.vector_count          mstb_checksum_:      32,   49.
           2    se.vector_ptr            mstb_checksum_:      31,   47.
           0    sum_entry                mstb_checksum_:      44,   46.
           6    sum_entry.loop           mstb_checksum_:      53,   56.


NO FATAL ERRORS


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
