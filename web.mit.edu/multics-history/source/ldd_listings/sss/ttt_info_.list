	COMPILATION LISTING OF SEGMENT ttt_info_
	Compiled by: Multics PL/I Compiler, Release 31a, of October 12, 1988
	Compiled at: Honeywell Bull, Phoenix AZ, SysM
	Compiled on: 10/17/88  1044.3 mst Mon
	    Options: optimize map

        1 /****^  ***********************************************************
        2*        *                                                         *
        3*        * Copyright, (C) Honeywell Bull Inc., 1987                *
        4*        *                                                         *
        5*        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        6*        *                                                         *
        7*        * Copyright (c) 1972 by Massachusetts Institute of        *
        8*        * Technology and Honeywell Information Systems, Inc.      *
        9*        *                                                         *
       10*        *********************************************************** */
       11 
       12 
       13 /* A procedure to extract information from the Terminal Type Table (TTT) */
       14 
       15 
       16 
       17 /****^  HISTORY COMMENTS:
       18*  1) change(77-06-13,JStern), approve(), audit(), install():
       19*     Coded by J. Stern 6/13/77
       20*     Modified 5/29/81 by Suzanne Krupp to add ttt_info_$function_key_data entry
       21*        Also to make all entries reject noncurrent version of ttt.
       22*     December 1981, Better update detection -- Benson I. Margulies
       23*  2) change(84-12-17,Negaret), approve(87-07-23,MCR7742),
       24*     audit(87-07-23,Gilcrease), install(87-08-04,MR12.1-1055):
       25*     Add the support of the entry point dsa_tm_neg_info to obtain the
       26*     negotiation info to open a session on a DSA network.
       27*  3) change(85-11-25,Swenson), approve(87-07-23,MCR7742),
       28*     audit(87-07-23,Gilcrease), install(87-08-04,MR12.1-1055):
       29*     Fixed misuse of boolean evaluation order in if statement for calculating
       30*     pointer to DSA TM extended table.
       31*  4) change(87-03-10,LJAdams), approve(87-04-03,MCR7646),
       32*     audit(87-05-05,Gilcrease), install(87-05-08,MR12.1-1030):
       33*     Support TTT_version_3 which includes the protocol field.
       34*  5) change(88-04-27,GDixon), approve(88-08-15,MCR7969),
       35*     audit(88-08-03,Lippard), install(88-08-29,MR12.2-1093):
       36*      A) Remove (translate to spaces) control characters appearing in
       37*         answerback sequences, because of their possible impact on as
       38*         operator terminal. (Answering_Service 406, phx19102)
       39*  6) change(88-09-28,Brunelle), approve(88-01-26,MCR7813),
       40*     audit(88-10-05,Blair), install(88-10-17,MR12.2-1171):
       41*     Upgrade to TTT_version_4 which includes c_chars expansion.
       42*                                                   END HISTORY COMMENTS */
       43 
       44 
       45 /* format: style2,idind25 */
       46 
       47 ttt_info_:
       48      proc;
       49 
       50 /* Parameters */
       51 
       52 	dcl     pm_tt_name		   char (*);	/* terminal type name (Input) (Output) */
       53 	dcl     pm_line_type	   fixed bin;	/* line type number (Input) */
       54 	dcl     pm_baud		   fixed bin;	/* baud rate (Input) */
       55 	dcl     pm_ttd_ptr		   ptr;		/* ptr to terminal_type_data structure (Input) */
       56 	dcl     pm_code		   fixed bin (35);	/* status code (Output) */
       57 	dcl     pm_modes		   char (*);	/* mode string (Output) */
       58 	dcl     pm_initial_string	   char (*) varying;/* terminal initialization string (Output) */
       59 	dcl     pm_additional_info	   char (*) varying;/* data provided for IO modules other than tty_ (Output) */
       60 	dcl     pm_answerback	   char (*);	/* terminal answerback string (Input) */
       61 	dcl     pm_id		   char (4);	/* terminal identifier (Output) */
       62 	dcl     pm_ppm_flag		   bit (1);	/* print preaccess message flag (Output) */
       63 	dcl     pm_cpo_flag		   bit (1);	/* conditional printer off flag (Output) */
       64 	dcl     pm_command_name	   char (*);	/* preaccess command name */
       65 	dcl     pm_coded_type	   fixed bin;	/* terminal type code number (Input) (Output) */
       66 	dcl     pm_dname		   char (*);	/* TTT directory pathname */
       67 	dcl     pm_ename		   char (*);	/* TTT entry name */
       68 	dcl     pm_ttyvtblp		   ptr;		/* pointer to a video table */
       69 	dcl     pm_dsatmdevp	   ptr;		/* pointer to a dsatm_device structure */
       70 	dcl     pm_areap		   ptr;		/* pointer to user area for allocating table */
       71 	dcl     pm_function_key_data_ptr ptr;		/* pointer to function key data structure */
       72 
       73 /* Automatic */
       74 
       75 	dcl     saved_install_time	   fixed bin (71);
       76 	dcl     my_name		   char (32);
       77 	dcl     (i, j)		   fixed bin;
       78 	dcl     (tte_table_array_ptr, ttd_table_array_ptr)
       79 				   ptr;
       80 	dcl     stringp		   ptr;
       81 	dcl     stringl		   fixed bin (21);
       82 	dcl     next_offset		   fixed bin (18);
       83 	dcl     (scanx, defx)	   fixed bin;
       84 	dcl     ab		   char (100) varying;
       85 	dcl     termp		   ptr;
       86 	dcl     key		   char (1) aligned;
       87 	dcl     value		   fixed bin;
       88 	dcl     save_id		   char (4) varying;
       89 	dcl     dname		   char (168);
       90 	dcl     ename		   char (32);
       91 	dcl     ec		   fixed bin (35);
       92 	dcl     re_init_label	   label internal;
       93 	dcl     areap		   ptr;
       94 	dcl     char_time		   float bin;
       95 	dcl     p			   ptr;
       96 	dcl     sourcep		   ptr;
       97 	dcl     targetp		   ptr;
       98 
       99 /* Based */
      100 
      101 	dcl     tte_table_rp	   (5) fixed bin (18) based (tte_table_array_ptr);
      102 	dcl     ttd_table_ptr	   (5) ptr based (ttd_table_array_ptr);
      103 	dcl     based_string	   char (stringl) based (stringp);
      104 	dcl     user_area		   area based (areap);
      105 
      106 	dcl     1 term		   unal based (termp),
      107 		2 key		   char (1) unal,
      108 		2 value		   fixed bin (8) unal,
      109 		2 string		   char (0 refer (term.value));
      110 
      111 
      112 /* Internal static */
      113 
      114 	declare 1 ttt_info_data_	   aligned external,
      115 		2 saved_tttp	   pointer init (null ()),
      116 		2 saved_dname	   char (168) init (">system_control_1") unaligned,
      117 		2 saved_ename	   char (32) init ("ttt") unaligned;
      118 
      119 	dcl     capital_letters	   char (26) int static options (constant) init ("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
      120 	dcl     small_letters	   char (26) int static options (constant) init ("abcdefghijklmnopqrstuvwxyz");
      121 	dcl     digits		   char (10) int static options (constant) init ("0123456789");
      122 
      123 
      124 /* External static */
      125 
      126 	dcl     dsatm_data_$device_multics_dft
      127 				   ext static aligned;
      128 
      129 	dcl     (
      130 	        error_table_$noalloc,
      131 	        error_table_$no_table,
      132 	        error_table_$no_term_type,
      133 	        error_table_$invalid_line_type,
      134 	        error_table_$incompatible_term_type,
      135 	        error_table_$unimplemented_version,
      136 	        error_table_$smallarg,
      137 	        error_table_$improper_data_format,
      138 	        error_table_$invalid_preaccess_command,
      139 	        error_table_$badopt,
      140 	        error_table_$wrong_no_of_args
      141 	        )			   fixed bin (35) external;
      142 
      143 
      144 /* Conditions */
      145 
      146 	dcl     seg_fault_error	   condition;
      147 	dcl     area		   condition;
      148 	dcl     out_of_bounds	   condition;
      149 
      150 /* Builtins */
      151 
      152 	dcl     (addr, collate, float, index, length, min, null, ptr, rtrim, search, string, substr, translate)
      153 				   builtin;
      154 
      155 
      156 /* procedures */
      157 
      158 	dcl     initiate_file_	   entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
      159 	dcl     terminate_file_	   entry (ptr, fixed bin (24), bit (*), fixed bin (35));
      160 
      161 	dcl     cu_$arg_ptr		   entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
      162 	dcl     cu_$arg_count	   entry (fixed bin);
      163 	dcl     expand_pathname_	   entry (char (*), char (*), char (*), fixed bin (35));
      164 	dcl     ioa_		   entry options (variable);
      165 	dcl     com_err_		   entry options (variable);
      166 	dcl     com_err_$suppress_name   entry options (variable);
      167 	dcl     get_system_free_area_	   entry returns (ptr);
      168 
      169 terminal_data:
      170      entry (pm_tt_name, pm_line_type, pm_baud, pm_ttd_ptr, pm_code);
      171 
      172 	re_init_label = terminal_data_init;
      173 	on seg_fault_error, out_of_bounds go to RE_INIT;
      174 terminal_data_init:
      175 	call initialize;				/* gets install time */
      176 	call find_tte;
      177 
      178 	if pm_line_type > 0				/* don't ignore line type */
      179 	then do;					/* make sure term type is compatible with line type */
      180 		if pm_line_type > 72
      181 		then do;
      182 			pm_code = error_table_$invalid_line_type;
      183 			return;
      184 		     end;
      185 		if ^substr (tte.line_types, pm_line_type, 1)
      186 		then do;
      187 			pm_code = error_table_$incompatible_term_type;
      188 			return;
      189 		     end;
      190 	     end;
      191 
      192 	ttdp = pm_ttd_ptr;
      193 	if ttdp = null				/* no data wanted */
      194 	then return;
      195 
      196 	if terminal_type_data.version > ttd_version_3 | terminal_type_data.version <= 0
      197 	then do;
      198 		pm_code = error_table_$unimplemented_version;
      199 		return;
      200 	     end;
      201 
      202 	terminal_type_data.old_type = tte.old_type;
      203 	terminal_type_data.name = tte.name;
      204 
      205 	tte_table_array_ptr = addr (tte.tables);
      206 	ttd_table_array_ptr = addr (terminal_type_data.tables);
      207 	do i = 1 to 5;
      208 	     if tte_table_rp (i) = 0
      209 	     then ttd_table_ptr (i) = null;
      210 	     else ttd_table_ptr (i) = addr (ptr (tttp, tte_table_rp (i)) -> table_entry.table);
      211 	end;
      212 
      213 	if tte.delay_rp = 0
      214 	then terminal_type_data.delay_ptr = null;
      215 	else do;					/* find delay table for specified baud */
      216 		delay_tablep = ptr (tttp, tte.delay_rp);
      217 		j = 0;
      218 		do i = 1 to delay_table.n_bauds while (delay_table.baud_rate (i) ^= pm_baud);
      219 		     if delay_table.baud_rate (i) = 0	/* matches any baud */
      220 		     then j = i;
      221 		end;
      222 		if i <= delay_table.n_bauds		/* found an exact match */
      223 		then terminal_type_data.delay_ptr = addr (delay_table.version (i));
      224 		else if j ^= 0			/* found a "match any"  */
      225 		then terminal_type_data.delay_ptr = addr (delay_table.version (j));
      226 		else terminal_type_data.delay_ptr = null;
      227 						/* no delay table for specified baud */
      228 	     end;
      229 
      230 	terminal_type_data.erase = tte.erase;
      231 	terminal_type_data.kill = tte.kill;
      232 	string (terminal_type_data.framing_chars) = string (tte.framing_chars);
      233 	string (terminal_type_data.flags) = ""b;
      234 	terminal_type_data.keyboard_locking = tte.keyboard_addressing;
      235 	terminal_type_data.line_delimiter = tte.line_delimiter;
      236 
      237 	if terminal_type_data.version >= ttd_version_2	/* version 2 stuff */
      238 	then do;
      239 		string (terminal_type_data.flow_control_chars) = string (tte.flow_control_chars);
      240 		terminal_type_data.output_buffer_size = tte.output_buffer_size;
      241 		terminal_type_data.input_timeout = tte.input_timeout;
      242 		terminal_type_data.output_block_acknowledge = tte.output_block_acknowledge;
      243 	     end;
      244 
      245           if terminal_type_data.version = ttd_version_3	/* version 3 stuff */
      246           then terminal_type_data.protocol = tte.protocol;
      247 
      248 	go to EXIT;
      249 
      250 modes:
      251      entry (pm_tt_name, pm_modes, pm_code);
      252 
      253 	re_init_label = modes_init;
      254 	on seg_fault_error, out_of_bounds go to RE_INIT;
      255 modes_init:
      256 	call initialize;
      257 	call find_tte;
      258 
      259 	pm_modes = tte.modes;
      260 	if length (rtrim (tte.modes)) > length (pm_modes)
      261 	then pm_code = error_table_$smallarg;
      262 
      263 	go to EXIT;
      264 
      265 video_info:
      266      entry (pm_tt_name, pm_baud, pm_areap, pm_ttyvtblp, pm_code);
      267 
      268 	re_init_label = video_infop_init;
      269 	on seg_fault_error, out_of_bounds go to RE_INIT;
      270 video_infop_init:
      271 	call initialize;
      272 	call find_tte;
      273 
      274 	if tte.extended_tables_rp = 0
      275 	then do;
      276 no_video:
      277 		pm_ttyvtblp = null ();
      278 		pm_code = error_table_$no_table;
      279 		go to EXIT;
      280 	     end;
      281 	extended_tablesp = ptr (tttp, tte.extended_tables_rp);
      282 	if extended_tables.ntables < VIDEO_RP
      283 	then go to no_video;
      284 	if extended_tables.tables_rp (VIDEO_RP) = 0
      285 	then go to no_video;
      286 
      287 	if pm_baud > 0
      288 	then char_time = 1.0 / (float (pm_baud) / 10.);
      289 	else char_time = 0.0;
      290 
      291 	areap = pm_areap;
      292 	if areap = null ()
      293 	then areap = get_system_free_area_ ();
      294 
      295 	ttyvtblp = ptr (tttp, extended_tables.tables_rp (VIDEO_RP));
      296 	tty_video_table_video_chars_len = tty_video_table.video_chars_len;
      297 	on area call AREA_FULL;
      298 	allocate tty_video_table in (user_area) set (p);
      299 	p -> tty_video_table = tty_video_table;
      300 	ttyvtblp = p;
      301 
      302 	do i = 1 to min (N_VIDEO_SEQUENCES, tty_video_table.nseq);
      303 	     ttyvseqp = addr (tty_video_table.sequences (i));
      304 	     if tty_video_seq.present
      305 	     then do;
      306 		     ttyvseqp = addr (tty_video_table.sequences (i));
      307 		     if tty_video_seq.cpad_present & ^tty_video_seq.cpad_in_chars
      308 		     then do;
      309 			     if char_time = 0.0
      310 			     then tty_video_seq.cpad_present = "0"b;
      311 			     else do;
      312 				     tty_video_seq.cpad =
      313 					((float (tty_video_seq.cpad) / 1.0e4) / char_time) + .9999;
      314 				     tty_video_seq.cpad_in_chars = "1"b;
      315 				     if tty_video_seq.cpad = 0
      316 				     then tty_video_seq.cpad_present, tty_video_seq.cpad_in_chars = "0"b;
      317 				end;
      318 			end;
      319 		end;
      320 	end;
      321 	pm_ttyvtblp = ttyvtblp;
      322 	go to EXIT;
      323 
      324 
      325 
      326 
      327 
      328 function_key_data:
      329      entry (pm_tt_name, pm_areap, pm_function_key_data_ptr, pm_code);
      330 
      331 	re_init_label = function_key_data_init;
      332 	on seg_fault_error, out_of_bounds go to RE_INIT;
      333 
      334 function_key_data_init:
      335 	call initialize;
      336 	call find_tte;
      337 	if tte.fkey_rp = 0
      338 	then do;
      339 		pm_function_key_data_ptr = null;
      340 		pm_code = error_table_$no_table;
      341 		goto EXIT;
      342 	     end;
      343 	pm_code = 0;
      344 	fkey_tablep = ptr (tttp, tte.fkey_rp);
      345 	function_key_data_ptr = addr (fkey_table.fkey_data);
      346 
      347 	if pm_areap = null
      348 	then areap = get_system_free_area_ ();		/* default area for function_key_data */
      349 	else areap = pm_areap;			/* user specifcied area for function_key_data */
      350 
      351 	function_key_data_highest = function_key_data.highest;
      352 	on area call AREA_FULL;
      353 	allocate function_key_data in (user_area) set (pm_function_key_data_ptr);
      354 	pm_function_key_data_ptr -> function_key_data = function_key_data;
      355 	on area call AREA_FULL;
      356 	allocate function_key_seqs in (user_area) set (pm_function_key_data_ptr -> function_key_data.seq_ptr);
      357 	sourcep = ptr (tttp, fkey_table.seq_offset);
      358 	targetp = pm_function_key_data_ptr -> function_key_data.seq_ptr;
      359 	targetp -> function_key_seqs = sourcep -> function_key_seqs;
      360 
      361 	go to EXIT;
      362 
      363 
      364 
      365 dsatm_device:
      366      entry (pm_tt_name, pm_areap, pm_dsatmdevp, pm_code);
      367 
      368 	re_init_label = dsatm_device_init;
      369 	on seg_fault_error, out_of_bounds go to RE_INIT;
      370 dsatm_device_init:
      371 	call initialize;
      372 	call find_tte;
      373 
      374 	if tte.extended_tables_rp = 0
      375 	then dsatmdevp = addr (dsatm_data_$device_multics_dft);
      376 
      377 	else do;
      378 
      379 		extended_tablesp = ptr (tttp, tte.extended_tables_rp);
      380 
      381 		if extended_tables.ntables >= DSATM_DEVICE_RP
      382 		then if extended_tables.tables_rp (DSATM_DEVICE_RP) ^= 0
      383 		     then dsatmdevp = ptr (tttp, extended_tables.tables_rp (DSATM_DEVICE_RP));
      384 		     else dsatmdevp = addr (dsatm_data_$device_multics_dft);
      385 		else dsatmdevp = addr (dsatm_data_$device_multics_dft);
      386 	     end;
      387 
      388 	areap = pm_areap;
      389 	if areap = null ()
      390 	then areap = get_system_free_area_ ();
      391 
      392 	on area call AREA_FULL;
      393 	allocate dsatm_device in (user_area) set (p);
      394 
      395 	p -> dsatm_device = dsatmdevp -> dsatm_device;
      396 	p -> dsatm_device.terminal_type = pm_tt_name;
      397 	pm_dsatmdevp = p;
      398 
      399 	go to EXIT;
      400 
      401 
      402 
      403 preaccess_type:
      404      entry (pm_command_name, pm_tt_name, pm_code);
      405 
      406 	re_init_label = preaccess_type_init;
      407 	on seg_fault_error, out_of_bounds go to RE_INIT;
      408 preaccess_type_init:
      409 	call initialize;
      410 
      411 	if pm_command_name = "MAP"
      412 	then i = ttt.type_map;
      413 	else if pm_command_name = "963"
      414 	then i = ttt.type_963;
      415 	else if pm_command_name = "029"
      416 	then i = ttt.type_029;
      417 	else do;
      418 		pm_code = error_table_$invalid_preaccess_command;
      419 		return;
      420 	     end;
      421 
      422 	if i = 0
      423 	then pm_tt_name = "";
      424 	else pm_tt_name = ttt.tt_entries (i).name;
      425 
      426 	go to EXIT;
      427 
      428 initial_string:
      429      entry (pm_tt_name, pm_initial_string, pm_code);
      430 
      431 	re_init_label = initial_string_init;
      432 	on seg_fault_error, out_of_bounds go to RE_INIT;
      433 initial_string_init:
      434 	call initialize;
      435 	call find_tte;
      436 
      437 	if tte.initial_string.offset = 0
      438 	then pm_initial_string = "";
      439 	else do;
      440 		stringp = ptr (tttp, tte.initial_string.offset);
      441 		stringl = tte.initial_string.length;
      442 		pm_initial_string = based_string;
      443 		if stringl > length (pm_initial_string)
      444 		then pm_code = error_table_$smallarg;
      445 	     end;
      446 
      447 	go to EXIT;
      448 
      449 
      450 
      451 
      452 
      453 additional_info:
      454      entry (pm_tt_name, pm_additional_info, pm_code);
      455 
      456 	re_init_label = additional_info_init;
      457 	on seg_fault_error, out_of_bounds go to RE_INIT;
      458 additional_info_init:
      459 	call initialize;
      460 	call find_tte;
      461 
      462 	if tte.additional_info.offset = 0
      463 	then pm_additional_info = "";
      464 	else do;
      465 		stringp = ptr (tttp, tte.additional_info.offset);
      466 		stringl = tte.additional_info.length;
      467 		pm_additional_info = based_string;
      468 		if stringl > length (pm_additional_info)
      469 		then pm_code = error_table_$smallarg;
      470 	     end;
      471 
      472 	go to EXIT;
      473 
      474 dialup_flags:
      475      entry (pm_tt_name, pm_ppm_flag, pm_cpo_flag, pm_code);
      476 
      477 	re_init_label = dialup_flags_init;
      478 	on seg_fault_error, out_of_bounds go to RE_INIT;
      479 dialup_flags_init:
      480 	call initialize;
      481 	call find_tte;
      482 
      483 	pm_ppm_flag = tte.flags.print_preaccess_message;
      484 	pm_cpo_flag = tte.flags.conditional_printer_off;
      485 
      486 	go to EXIT;
      487 
      488 
      489 
      490 
      491 
      492 default_term_type:
      493      entry (pm_line_type, pm_baud, pm_tt_name, pm_code);
      494 
      495 	re_init_label = default_term_type_init;
      496 	on seg_fault_error, out_of_bounds go to RE_INIT;
      497 default_term_type_init:
      498 	call initialize;
      499 
      500 	pm_tt_name = "";
      501 	if ttt.default_type_offset = 0		/* no default type table */
      502 	then return;
      503 	dfttp = ptr (tttp, ttt.default_type_offset);
      504 
      505 /* find matching line type and baud in default type table (0 => "match any") */
      506 	do i = 1 to dftt.dft_count
      507 	     while (
      508 	     ^((dftte (i).line_type = 0 | dftte (i).line_type = pm_line_type)
      509 	     & (dftte (i).baud = 0 | dftte (i).baud = pm_baud)));
      510 	end;
      511 	if i <= dftt.dft_count			/* found a match */
      512 	then pm_tt_name = ttt.tt_entries (dftte (i).term_type_index).name;
      513 
      514 	go to EXIT;
      515 
      516 decode_answerback:
      517      entry (pm_answerback, pm_line_type, pm_tt_name, pm_id, pm_code);
      518 
      519 	pm_tt_name, pm_id = "";
      520 	if pm_line_type > 72
      521 	then do;
      522 		pm_code = error_table_$invalid_line_type;
      523 		return;
      524 	     end;
      525 
      526 	re_init_label = decode_answerback_init;
      527 	on seg_fault_error, out_of_bounds go to RE_INIT;
      528 decode_answerback_init:
      529 	call initialize;
      530 
      531 	ab = translate (pm_answerback, capital_letters, small_letters);
      532 						/* capitalize all letters */
      533 	if length (ab) = 0
      534 	then return;
      535 
      536 	do next_offset = ttt.answerback_offset repeat answerback_entry.next while (next_offset ^= 0);
      537 						/* search thru answerback entries */
      538 
      539 	     answerback_entry_ptr = ptr (tttp, next_offset);
      540 	     scanx = 1;				/* init scan index for answerback string */
      541 	     save_id = "";				/* id is null until we discover otherwise */
      542 
      543 	     do defx = 1 by 2 to def_string.length;	/* scan the answerback entry definition string */
      544 		termp = addr (def_string.chars (defx)); /* get ptr to next term in definition string */
      545 		key = term.key;			/*  get single-letter keyword symbol */
      546 		value = term.value;			/* get argument to keyword */
      547 
      548 		if key = "k"			/* "skip" keyword */
      549 		then do;
      550 			scanx = scanx + value;
      551 			if scanx < 1 | scanx > length (ab)
      552 			then go to next_ab_entry;
      553 			go to next_term;
      554 		     end;
      555 
      556 		if scanx > length (ab)		/* end of answerback string */
      557 		then go to next_ab_entry;
      558 
      559 		if key = "m"			/* "match" keyword */
      560 		then do;
      561 			if value <= 0
      562 			then do;
      563 				if value = -1	/* match a letter */
      564 				then do;
      565 					if index (capital_letters, substr (ab, scanx, 1)) = 0
      566 					then go to next_ab_entry;
      567 				     end;
      568 				else if value = -2	/* match a digit */
      569 				then do;
      570 					if index (digits, substr (ab, scanx, 1)) = 0
      571 					then go to next_ab_entry;
      572 				     end;
      573 				else go to bad_data;/* illegal value */
      574 				scanx = scanx + 1;
      575 			     end;
      576 			else do;			/* match string */
      577 				if scanx + value - 1 > length (ab)
      578 						/* match string exceeds answerback string */
      579 				then go to next_ab_entry;
      580 				if substr (ab, scanx, value) ^= term.string
      581 				then go to next_ab_entry;
      582 				scanx = scanx + value;
      583 				defx = defx + value;
      584 			     end;
      585 		     end;
      586 
      587 		else if key = "s"			/* "search" keyword */
      588 		then do;
      589 			if value <= 0
      590 			then do;
      591 				if value = -1	/* search for a letter */
      592 				then do;
      593 					i = search (substr (ab, scanx), capital_letters);
      594 					if i = 0
      595 					then go to next_ab_entry;
      596 				     end;
      597 				else if value = -2	/* search for a digit */
      598 				then do;
      599 					i = search (substr (ab, scanx), digits);
      600 					if i = 0
      601 					then go to next_ab_entry;
      602 				     end;
      603 				else go to bad_data;/* illegal value */
      604 				scanx = scanx + i;
      605 			     end;
      606 			else do;			/* search for string */
      607 				i = index (substr (ab, scanx), term.string);
      608 				if i = 0
      609 				then go to next_ab_entry;
      610 				scanx = scanx + i + value - 1;
      611 				defx = defx + value;
      612 			     end;
      613 		     end;
      614 
      615 		else if key = "i"			/* "id" keyword */
      616 		then do;
      617 			if value = 0		/* rest of answerback is id */
      618 			then do;
      619 				save_id = substr (pm_answerback, scanx);
      620 						/* ID as it actually appeared */
      621 				scanx = length (ab) + 1;
      622 			     end;
      623 			else if value >= 1 & value <= 4
      624 			then do;			/* next 1 to 4 chars of answerback is id */
      625 				if scanx + value - 1 > length (ab)
      626 				then go to next_ab_entry;
      627 				save_id = substr (pm_answerback, scanx, value);
      628 				scanx = scanx + value;
      629 			     end;
      630 			else go to bad_data;	/* illegal value */
      631 		     end;
      632 
      633 		else do;				/* unknown key */
      634 bad_data:
      635 			pm_code = error_table_$improper_data_format;
      636 			return;
      637 		     end;
      638 
      639 next_term:
      640 	     end;					/* Come here if a matching answerback entry was found */
      641 
      642 	     if answerback_entry.term_type_index ^= 0	/* terminal type indicated */
      643 	     then do;
      644 		     ttep = addr (ttt.tt_entries (answerback_entry.term_type_index));
      645 		     if pm_line_type > 0		/* don't ignore line type */
      646 		     then if ^substr (tte.line_types, pm_line_type, 1)
      647 			then go to next_ab_entry;
      648 		     pm_tt_name = tte.name;		/* set terminal type indicated by answerback */
      649 		end;
      650 
      651 	     pm_id = translate (save_id, (32)" ", substr (collate (),1,32));
      652 						/* return id without trailing control chars */
      653 
      654 	     return;
      655 
      656 next_ab_entry:
      657 	end;
      658 
      659 	go to EXIT;
      660 
      661 encode_type:
      662      entry (pm_tt_name, pm_coded_type, pm_code);
      663 
      664 	re_init_label = encode_type_init;
      665 	on seg_fault_error, out_of_bounds go to RE_INIT;
      666 encode_type_init:
      667 	call initialize;
      668 	call find_tte;
      669 
      670 	pm_coded_type = tte.coded_type;
      671 
      672 	go to EXIT;
      673 
      674 
      675 
      676 
      677 
      678 decode_type:
      679      entry (pm_coded_type, pm_tt_name, pm_code);
      680 
      681 	re_init_label = decode_type_init;
      682 	on seg_fault_error, out_of_bounds go to RE_INIT;
      683 decode_type_init:
      684 	call initialize;
      685 
      686 	do i = 1 to ttt.n_tt_entries;
      687 	     ttep = addr (ttt.tt_entries (i));
      688 	     if tte.coded_type = pm_coded_type
      689 	     then do;
      690 		     pm_tt_name = tte.name;
      691 		     return;
      692 		end;
      693 	end;
      694 
      695 	pm_tt_name = "";
      696 
      697 	go to EXIT;
      698 
      699 set_ttt_path:
      700      entry options (variable);			/* command to change ttt pathname */
      701 
      702 	my_name = "set_ttt_path";
      703 	call cu_$arg_count (i);
      704 	if i ^= 1
      705 	then do;
      706 		call com_err_$suppress_name (error_table_$wrong_no_of_args, my_name,
      707 		     "Usage:  set_ttt_path [path | -reset]");
      708 		return;
      709 	     end;
      710 	call cu_$arg_ptr (1, stringp, stringl, (0));
      711 
      712 	if substr (based_string, 1, 1) = "-"
      713 	then if based_string = "-reset" | based_string = "-rs"
      714 	     then do;
      715 		     dname = ">system_control_1";
      716 		     ename = "ttt";
      717 		end;
      718 	     else do;
      719 		     call com_err_ (error_table_$badopt, my_name, based_string);
      720 		     return;
      721 		end;
      722 	else do;					/* not control arg, its a PATH */
      723 		call expand_pathname_ (based_string, dname, ename, ec);
      724 		if ec ^= 0
      725 		then do;
      726 			call com_err_ (ec, my_name, based_string);
      727 			return;
      728 		     end;
      729 	     end;
      730 
      731 	call initiate_file_ (dname, ename, R_ACCESS, tttp, (0), ec);
      732 	if tttp = null
      733 	then do;
      734 		call com_err_ (ec, my_name, "^a>^a", dname, ename);
      735 		return;
      736 	     end;
      737 
      738 /* Make a plausibility check */
      739 
      740 	if ttt.version ^= TTT_version_4
      741           then do;
      742 	          call com_err_(error_table_$unimplemented_version, my_name, "^/^a>^a is version ^d; the current version is ^d.^/Please recompile your ttf.^/", dname, ename, ttt.version, TTT_version_4);
      743 		return;
      744                 end;
      745 
      746           else if n_tt_entries ^> 0 | total_ttt_size ^> n_tt_entries
      747 	then do;
      748 		call com_err_ (error_table_$improper_data_format, my_name, "^/^a>^a does not appear to be a valid TTT",
      749 		     dname, ename);
      750 		return;
      751 	     end;
      752 
      753 
      754 	if saved_tttp ^= null
      755 	then call terminate_file_ (saved_tttp, (0), TERM_FILE_TERM, (0));
      756 	saved_tttp = tttp;
      757 	saved_dname = dname;
      758 	saved_ename = ename;
      759 
      760 	return;
      761 
      762 
      763 
      764 print_ttt_path:
      765      entry;
      766 
      767 	call ioa_ ("^a>^a", saved_dname, saved_ename);
      768 	return;
      769 
      770 
      771 ttt_path:
      772      entry (pm_dname, pm_ename);
      773 
      774 	pm_dname = saved_dname;
      775 	pm_ename = saved_ename;
      776 
      777 	return;
      778 
      779 EXIT:
      780 	if tttp ^= null
      781 	then if ttt.last_install_time ^= saved_install_time
      782 	     then go to re_init_label;		/* Try Again */
      783 
      784 	return;
      785 
      786 /* Come here on seg_fault_error, out_of_bounds.  Assume that a new TTT was installed. */
      787 
      788 RE_INIT:
      789 	if saved_tttp ^= null
      790 	then do;
      791 		call terminate_file_ (saved_tttp, (0), TERM_FILE_TERM, (0));
      792 		saved_tttp = null;			/* forget the old TTT */
      793 	     end;
      794 
      795 	revert seg_fault_error, out_of_bounds;		/* ya only go 'round once */
      796 	go to re_init_label;			/* try again */
      797 
      798 
      799 
      800 
      801 
      802 reset:
      803      entry;					/* called BEFORE replacing the TTT */
      804 
      805 	if saved_tttp ^= null
      806 	then do;
      807 		call terminate_file_ (saved_tttp, (0), TERM_FILE_TERM, (0));
      808 		saved_tttp = null;
      809 		return;
      810 	     end;
      811 
      812 initialize:
      813      proc;					/* gets ptr to the TTT */
      814 
      815 	if saved_tttp = null
      816 	then do;
      817 		call initiate_file_ (saved_dname, saved_ename, R_ACCESS, saved_tttp, (0), ec);
      818 		if saved_tttp = null
      819 		then go to EXIT;
      820 	     end;
      821 
      822 	tttp = saved_tttp;
      823 	pm_code = 0;
      824 
      825 	if ttt.version ^= TTT_version_4
      826 	then do;
      827 		saved_tttp = null;
      828 		pm_code = error_table_$unimplemented_version;
      829 		go to EXIT;
      830 	     end;
      831 	saved_install_time = ttt.last_install_time;	/* p clock */
      832      end initialize;
      833 
      834 find_tte:
      835      proc;					/* gets a ptr to the tte specified by tt_name */
      836 
      837 	dcl     ttex		   fixed bin;
      838 
      839 	do ttex = 1 to ttt.n_tt_entries;
      840 	     ttep = addr (ttt.tt_entries (ttex));
      841 	     if tte.name = pm_tt_name			/* found it */
      842 	     then return;
      843 	end;
      844 
      845 	pm_code = error_table_$no_term_type;
      846 	go to EXIT;
      847 
      848      end find_tte;
      849 
      850 AREA_FULL:
      851      procedure;
      852 	pm_code = error_table_$noalloc;
      853 	tttp = null;				/* dont bother with change time */
      854 	go to EXIT;
      855      end AREA_FULL;
      856 
  1     1 /* BEGIN INCLUDE FILE ... access_mode_values.incl.pl1
  1     2*
  1     3*   Values for the "access mode" argument so often used in hardcore
  1     4*   James R. Davis 26 Jan 81  MCR 4844
  1     5*   Added constants for SM access 4/28/82 Jay Pattin
  1     6*   Added text strings 03/19/85 Chris Jones
  1     7**/
  1     8 
  1     9 
  1    10 /* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
  1    11 dcl	(
  1    12 	N_ACCESS		   init ("000"b),
  1    13 	R_ACCESS		   init ("100"b),
  1    14 	E_ACCESS		   init ("010"b),
  1    15 	W_ACCESS		   init ("001"b),
  1    16 	RE_ACCESS		   init ("110"b),
  1    17 	REW_ACCESS	   init ("111"b),
  1    18 	RW_ACCESS		   init ("101"b),
  1    19 	S_ACCESS		   init ("100"b),
  1    20 	M_ACCESS		   init ("010"b),
  1    21 	A_ACCESS		   init ("001"b),
  1    22 	SA_ACCESS		   init ("101"b),
  1    23 	SM_ACCESS		   init ("110"b),
  1    24 	SMA_ACCESS	   init ("111"b)
  1    25 	)		   bit (3) internal static options (constant);
  1    26 
  1    27 /* The following arrays are meant to be accessed by doing either 1) bin (bit_value) or
  1    28*   2) divide (bin_value, 2) to come up with an index into the array. */
  1    29 
  1    30 dcl	SEG_ACCESS_MODE_NAMES  (0:7) init ("null", "W", "E", "EW", "R", "RW", "RE", "REW") char (4) internal
  1    31 			   static options (constant);
  1    32 
  1    33 dcl	DIR_ACCESS_MODE_NAMES  (0:7) init ("null", "A", "M", "MA", "S", "SA", "SM", "SMA") char (4) internal
  1    34 			   static options (constant);
  1    35 
  1    36 dcl	(
  1    37 	N_ACCESS_BIN	   init (00000b),
  1    38 	R_ACCESS_BIN	   init (01000b),
  1    39 	E_ACCESS_BIN	   init (00100b),
  1    40 	W_ACCESS_BIN	   init (00010b),
  1    41 	RW_ACCESS_BIN	   init (01010b),
  1    42 	RE_ACCESS_BIN	   init (01100b),
  1    43 	REW_ACCESS_BIN	   init (01110b),
  1    44 	S_ACCESS_BIN	   init (01000b),
  1    45 	M_ACCESS_BIN	   init (00010b),
  1    46 	A_ACCESS_BIN	   init (00001b),
  1    47 	SA_ACCESS_BIN	   init (01001b),
  1    48 	SM_ACCESS_BIN	   init (01010b),
  1    49 	SMA_ACCESS_BIN	   init (01011b)
  1    50 	)		   fixed bin (5) internal static options (constant);
  1    51 
  1    52 /* END INCLUDE FILE ... access_mode_values.incl.pl1 */
      857 
      858 
  2     1 /* BEGIN INCLUDE FILE ... author_dcl.incl.pl1 */
  2     2 
  2     3 /* This include file declares the "author" substructure
  2     4*   in a form suitable for using the PL/I "like" attribute.
  2     5*
  2     6*   Written 750304 by PG
  2     7**/
  2     8 
  2     9 dcl 1 author_dcl aligned based,
  3     1 /* BEGIN INCLUDE FILE author.incl.pl1 */
  3     2 
  3     3 /* the "author" items must always be the first ones in the table. The
  3     4*   module which moves the converted table to the System Control process
  3     5*   fills in these data items and assumes them to be at the head of the segment
  3     6*   regardless of the specific table's actual declaration. The variables
  3     7*   "lock" and "last_install_time" used to be "process_id" and "ev_channel"
  3     8*    respectively. For tables installed in multiple processes, these
  3     9*    are to be used to lock out multiple installations. */
  3    10 
  3    11 /*  Lock should be used as a modification lock. Since, in general,
  3    12*    entries may not be moved in system tables, even by installations,
  3    13*    it is sufficient for only installers and programs that change threads
  3    14*    to set or respect the lock. Simply updating data in an entry
  3    15*    requires no such protection.
  3    16*
  3    17*    Last_install_time is used by readers of system tables to detect
  3    18*    installations or other serious modifications. By checking it before
  3    19*    and after copying a block of data, they can be protected against
  3    20*    modifications.
  3    21*
  3    22*    Modules that set the lock should save proc_group_id, and then
  3    23*    put their group id there for the time they hold the lock.
  3    24*    if they do not actually install the, they should restore the group id.
  3    25**/
  3    26 
  3    27     2 author aligned,				/* validation data about table's author */
  3    28       3 proc_group_id char (32),			/* process-group-id  (personid.projectid.tag) */
  3    29       3 lock bit (36),				/* installation lock */
  3    30       3 update_attributes bit (1) unal,			/* update/add/delete attributes */
  3    31       3 update_authorization bit (1) unal,		/* update only authorizations */
  3    32       3 deferral_notified bit (1) unal,			/* installer notified of deferral of installation */
  3    33       3 pad bit (33) unaligned,
  3    34       3 last_install_time fixed bin (71),
  3    35       3 table char (4),				/* name of table, e.g., SAT MGT TTT RTDT PDT etc. */
  3    36       3 w_dir char (64),				/* author's working directory */
  3    37 
  3    38 /* END INCLUDE FILE author.incl.pl1 */
  2    10 
  2    11     2 pad;
  2    12 
  2    13 /* END INCLUDE FILE ... author_dcl.incl.pl1 */
      859 
      860 
  4     1 /*--------------------BEGIN dsatm_attn_fcn_info.incl.pl1---------------------*/
  4     2 
  4     3 
  4     4 /****^  HISTORY COMMENTS:
  4     5*  1) change(87-07-01,LJAdams), approve(87-07-28,MCR7742),
  4     6*     audit(87-07-23,Gilcrease), install(87-08-04,MR12.1-1056):
  4     7*     Declared ptr orderip within the include file.
  4     8*                                                   END HISTORY COMMENTS */
  4     9 
  4    10 /*****************************************************************************/
  4    11 /*							       */
  4    12 /*   Define the attention functions.				       */
  4    13 /*   There are two types of attention:                                       */
  4    14 /*    	destructive:     the session is recovered.                         */
  4    15 /*	non-destructive: ATTENTION 1 to 9.                                 */
  4    16 /*                                                                           */
  4    17 /*   A new set of attentions replaced the previous one.                      */
  4    18 /*   The attentions can be cancelled as following:                           */
  4    19 /*   - The destructive attention (all the invocations)                       */
  4    20 /*   - The non destructive attentions (all the invocations)                  */
  4    21 /*   - The attention i, and only the invocations specified in the structure. */
  4    22 /*							       */
  4    23 /*   Invocation:                                                             */
  4    24 /*   - An attention may have up to four invocation types.                    */
  4    25 /*   - BREAK KEY : can be mapped on only one attention at the same time.     */
  4    26 /*   - SEC_DIALOG: the attention cannot be invoked directly, but instead via */
  4    27 /*                 the secondary dialogue.                                   */
  4    28 /*                                                                           */
  4    29 /*   Written by Roger Negaret in June 1984.			       */
  4    30 /*****************************************************************************/
  4    31 
  4    32 /* format: style3,dclind5,idind32,insnl,delnl */
  4    33 
  4    34 dcl  orderip                         ptr;
  4    35 
  4    36 dcl  1 attention_fcn_info	       based (orderip) aligned,
  4    37        2 version		       char (8),
  4    38        2 attention_fcn	       like attention_fcn aligned;
  4    39 
  4    40 dcl  attn_fcn_ptr		       ptr;
  4    41 
  4    42 dcl  1 attention_fcn	       based (attn_fcn_ptr) aligned,
  4    43        2 cancelled		       (0:9) bit (1) unal,
  4    44        2 attn		       (0:9),
  4    45          3 invocation,
  4    46 	 4 break		       bit (1) unal,
  4    47 	 4 string		       bit (1) unal,
  4    48 	 4 fcn_key	       bit (1) unal,
  4    49 	 4 sec_dialog	       bit (1) unal,
  4    50          3 string_value	       (4) char (2) unal;	/* up to four invocation strings */
  4    51 
  4    52 /* Attention types */
  4    53 
  4    54 dcl  AT_DESTRUCTIVE		       fixed bin int static options (constant) init (1);
  4    55 dcl  AT_NON_DESTRUCTIVE	       fixed bin int static options (constant) init (2);
  4    56 
  4    57 /* Some attention codes */
  4    58 
  4    59 dcl  AC_ATTD		       fixed bin int static options (constant) init (0);
  4    60 dcl  AC_ATT1		       fixed bin int static options (constant) init (1);
  4    61 dcl  AC_ATT2		       fixed bin int static options (constant) init (2);
  4    62 
  4    63 /* Attention invocations */
  4    64 
  4    65 dcl  AI_STRING		       fixed bin int static options (constant) init (1);
  4    66 dcl  AI_FCN_KEY		       fixed bin int static options (constant) init (2);
  4    67 dcl  AI_BREAK		       fixed bin int static options (constant) init (3);
  4    68 dcl  AI_SEC_DIALOG		       fixed bin int static options (constant) init (4);
  4    69 
  4    70 
  4    71 dcl  ATTENTION_FCN_INFO_V1	       char (8) int static options (constant) init ("ATTFCNV1");
  4    72 
  4    73 /*----------------------END dsatm_attn_fcn_info.incl.pl1---------------------*/
  4    74 
      861 
      862 
  5     1 /*  BEGIN:   dsatm_negotiate_info.incl.pl1		  *  *  *  *  *  */
  5     2 
  5     3 /****^  HISTORY COMMENTS:
  5     4*  1) change(84-06-01,Negaret), approve(87-07-23,MCR7742),
  5     5*     audit(87-07-23,GDixon), install(87-08-04,MR12.1-1056):
  5     6*     Created.
  5     7*                                                   END HISTORY COMMENTS */
  5     8 
  5     9 /*^*************************************************************************^*/
  5    10 /*							       */
  5    11 /*   Here are all the information involved in the negotiation phase of a     */
  5    12 /*   connection.   						       */
  5    13 /*   dsatm_neg_info        (Negotiation information) 		       */
  5    14 /*   dsatm_presentation    (Negotiation about the presentation control layer)*/
  5    15 /*   dsatm_station         (Negotiation about the station)                   */
  5    16 /*   dsatm_device          (Negotiation about each device of the station)    */
  5    17 /*   dsatm_network         (Information about the secondary network)         */
  5    18 /*   dsatm_sw_dev_info     (Switch in the device negotiated information)     */
  5    19 /*							       */
  5    20 /*   neg = negotiation, ctl = control, ptcl = protocol		       */
  5    21 /*   dev = device,  rec = record  				       */
  5    22 /*							       */
  5    23 /*   This include uses the following include file:                           */
  5    24 /*                dsatm_attn_fcn_info.incl.pl1                               */
  5    25 /*                                                                           */
  5    26 /*   Written by Roger Negaret in June 1984			       */
  5    27 /*^*************************************************************************^*/
  5    28 
  5    29 /* format: style3,dclind5,idind32,insnl,delnl */
  5    30 
  5    31 /*****************************************************************************/
  5    32 /*							       */
  5    33 /*   describes all the options to be negotiated (input) or already	       */
  5    34 /*   negotiated (output) for a session between the Terminal Manager	       */
  5    35 /*   Correspondent (TMC) and the front-end Terminal Manager (TM).            */
  5    36 /*   Some parameters may be set with several values; the current value       */
  5    37 /*   is the first one in the array of values;  The others can be selected    */
  5    38 /*   during the life of the session by the corresponding switch order;       */
  5    39 /*   (Now, only the switch_logical_device order is implemented).             */
  5    40 /*   The newly selected value becomes current and is put in the first        */
  5    41 /*   position of the array of values, switching its place with the previous  */
  5    42 /*   current value.						       */
  5    43 /*   The default values, for the TM protocol and for Multics are defined in: */
  5    44 /*        o dsatm_data_                                                      */
  5    45 /*        o the TTF for overriding the device negotiation parameters.        */
  5    46 /*****************************************************************************/
  5    47 
  5    48 dcl  dsatm_data_$max_logical_devices fixed bin ext;
  5    49 dcl  dsatm_data_$max_networks	       fixed bin ext;
  5    50 dcl  dsatm_max_logical_devices       fixed bin;
  5    51 dcl  dsatm_max_networks	       fixed bin;
  5    52 
  5    53 /* dsatm_neg_info: all the information for the negotiation of a TM session */
  5    54 
  5    55 dcl  dsatmnip		       ptr;
  5    56 
  5    57 dcl  1 dsatm_neg_info	       based (dsatmnip) aligned,
  5    58        2 version		       char (8),
  5    59        2 tws_session	       bit (1),
  5    60        2 max_letter_size	       fixed bin (16) uns aligned,
  5    61        2 presentation	       like dsatm_presentation aligned,
  5    62        2 station		       like dsatm_station aligned,
  5    63        2 n_networks		       fixed bin,		/* number of networks */
  5    64        2 device		       (dsatm_max_logical_devices refer (dsatm_neg_info.station.n_devices))
  5    65 			       like dsatm_device aligned,
  5    66 						/* the actual number of devices is in */
  5    67 						/* station.n_devices.                 */
  5    68        2 network		       (dsatm_max_networks refer (dsatm_neg_info.n_networks)) like dsatm_network aligned;
  5    69 
  5    70 
  5    71 /* dsatm_presentation: presentation layer information */
  5    72 
  5    73 dcl  dsatmprep		       ptr;
  5    74 
  5    75 dcl  1 dsatm_presentation	       based (dsatmprep) aligned,
  5    76        2 pc_level,					/* presentation_control protocol level */
  5    77          3 ptcl_level	       bit (8) unal,
  5    78          3 pl_rejected	       bit (1) unal,
  5    79        2 dfd,					/* data_format_description */
  5    80          3 char_encoding	       (8) fixed bin,
  5    81          3 char_set		       (14) fixed bin,
  5    82          3 char_subset	       (4) fixed bin,
  5    83          3 nat_lang		       (4) fixed bin,
  5    84          3 compression	       (4) fixed bin,
  5    85          3 max_rec_size	       fixed bin (16) uns,
  5    86          3 repetitive_parm_nb,			/* number of current values      */
  5    87 						/* for each repetitive parameter */
  5    88 	 4 ce_nb		       fixed bin,
  5    89 	 4 cs_nb		       fixed bin,
  5    90 	 4 css_nb		       fixed bin,
  5    91 	 4 nl_nb		       fixed bin,
  5    92 	 4 ca_nb		       fixed bin,
  5    93          3 parm_rejected,
  5    94 	 4 ce_rejected	       bit (1) unal,
  5    95 	 4 cs_rejected	       bit (1) unal,
  5    96 	 4 css_rejected	       bit (1) unal,
  5    97 	 4 nl_rejected	       bit (1) unal,
  5    98 	 4 ca_rejected	       bit (1) unal,
  5    99 	 4 mrs_rejected	       bit (1) unal,
  5   100        2 ptcl_id,					/* protocol_id */
  5   101          3 ptcl_name	       fixed bin,
  5   102          3 ptcl_level	       bit (8) unal,
  5   103          3 tm_version	       fixed bin,
  5   104          3 pid_rejected	       bit (1) unal,
  5   105        2 init_corr,					/* initial correspondent */
  5   106          3 string		       char (32) var;
  5   107 
  5   108 /* dsatm_station: information shared by all the logical devices */
  5   109 /* of the terminal station.                                     */
  5   110 
  5   111 dcl  dsatmstap		       ptr;
  5   112 
  5   113 dcl  1 dsatm_station	       based (dsatmstap) aligned,
  5   114        2 init_accept_confg	       fixed bin,
  5   115        2 ctl_ptcl		       (4) fixed bin,
  5   116        2 options,
  5   117          3 sec_net_reconnection      bit (1) unal,
  5   118          3 remote_form_storage       bit (1) unal,
  5   119          3 badge_reader_option       bit (1) unal,
  5   120          3 renegotiation	       bit (1) unal,
  5   121          3 reserved		       bit (4) unal,
  5   122        2 n_devices		       fixed bin (16) uns,
  5   123        2 dev_id_for_data_att	       fixed bin (16) uns,
  5   124        2 max_sec_net_dis_time	       fixed bin (16) uns,
  5   125        2 repetitive_parm_nb,
  5   126          3 cp_nb		       fixed bin,
  5   127        2 parm_rejected,
  5   128          3 cp_rejected	       bit (1) unal,
  5   129          3 opt_rejected	       bit (1) unal,
  5   130          3 ndev_rejected	       bit (1) unal;
  5   131 
  5   132 /* dsatm_device: information specific to a logical device of the station */
  5   133 
  5   134 dcl  dsatmdevp		       ptr;
  5   135 
  5   136 dcl  1 dsatm_device		       based (dsatmdevp) aligned,
  5   137        2 init_accept_confg	       fixed bin,
  5   138        2 dpp		       (4) fixed bin,
  5   139        2 sdp_dpp,					/* sdp protocol */
  5   140          3 version		       fixed bin,
  5   141          3 sdp_class	       (4) fixed bin,
  5   142        2 real_dpp,					/* real protocol */
  5   143          3 version		       fixed bin,
  5   144          3 real_class	       (16) fixed bin,
  5   145          3 real_model	       char (12) var,
  5   146        2 trans_dpp,					/* transparent protocol */
  5   147          3 version		       fixed bin,
  5   148        2 dev_id		       fixed bin (16) uns,
  5   149        2 dev_type		       fixed bin,
  5   150        2 attribute,
  5   151          3 shareability	       fixed bin,
  5   152          3 alloc_unit	       bit (8),
  5   153        2 line_length	       fixed bin (8) uns,
  5   154        2 page_length	       fixed bin (8) uns,
  5   155        2 line_overflow	       fixed bin,
  5   156        2 page_overflow	       fixed bin,
  5   157        2 char_encoding	       (8) fixed bin,
  5   158        2 char_set		       (14) fixed bin,
  5   159        2 char_subset	       (4) fixed bin,
  5   160        2 nat_lang		       (4) fixed bin,
  5   161        2 compression	       (4) fixed bin,
  5   162        2 char_font		       (6) fixed bin,
  5   163        2 terminal_type	       char (12) var,
  5   164        2 ete_ack_level	       fixed bin,
  5   165        2 max_rec_size	       fixed bin (16) uns,
  5   166        2 attentions		       like attention_fcn aligned,
  5   167        2 stc_available	       bit (1),
  5   168        2 repetitive_parm_nb,
  5   169          3 dpp_nb		       fixed bin,
  5   170          3 sc_nb		       fixed bin,
  5   171          3 rc_nb		       fixed bin,
  5   172          3 ce_nb		       fixed bin,
  5   173          3 cs_nb		       fixed bin,
  5   174          3 css_nb		       fixed bin,
  5   175          3 cf_nb		       fixed bin,
  5   176          3 nl_nb		       fixed bin,
  5   177          3 ca_nb		       fixed bin,
  5   178        2 parm_rejected,
  5   179          3 dpp_rejected	       bit (1) unal,
  5   180          3 attr_rejected	       bit (1) unal,
  5   181          3 ce_rejected	       bit (1) unal,
  5   182          3 cs_rejected	       bit (1) unal,
  5   183          3 css_rejected	       bit (1) unal,
  5   184          3 cf_rejected	       bit (1) unal,
  5   185          3 nl_rejected	       bit (1) unal,
  5   186          3 ca_rejected	       bit (1) unal,
  5   187          3 mrs_rejected	       bit (1) unal;
  5   188 
  5   189 
  5   190 /* dsatm_network: addressing information to establish a session */
  5   191 /* through the secondary network.                               */
  5   192 
  5   193 dcl  dsatmnetp		       ptr;
  5   194 
  5   195 dcl  1 dsatm_network	       based (dsatmnetp) aligned,
  5   196        2 sec_link_ptcl	       fixed bin,
  5   197        2 na_nb		       fixed bin,
  5   198        2 na_rejected	       bit (1) unal,
  5   199        2 net_addr		       (4),		/* in the order of the networks */
  5   200          3 net_type		       fixed bin,
  5   201          3 addr_str		       char (32) var,
  5   202        2 add_info		       char (32) var;	/* additional info network specific */
  5   203 
  5   204 
  5   205 
  5   206 dcl  DSATM_NEG_INFO_V1	       char (8) int static options (constant) init ("TMNI_V1");
  5   207 
  5   208 /* dsatm_sw_dev_info: give the current or new value of the switchable  */
  5   209 /* parameters for a given logical device.                              */
  5   210 
  5   211 dcl  dsatmsdip		       ptr;
  5   212 
  5   213 dcl  1 dsatm_sw_dev_info	       based (dsatmsdip) aligned,
  5   214        2 version		       char (8),
  5   215        2 set,
  5   216          3 dpp		       bit (1) unal,
  5   217          3 ce		       bit (1) unal,
  5   218          3 cs		       bit (1) unal,
  5   219          3 css		       bit (1) unal,
  5   220          3 cf		       bit (1) unal,
  5   221          3 nl		       bit (1) unal,
  5   222          3 ca		       bit (1) unal,
  5   223        2 value,
  5   224          3 dpp		       fixed bin,
  5   225          3 sdp_dpp,
  5   226 	 4 version	       fixed bin,
  5   227 	 4 sdp_class	       fixed bin,
  5   228          3 real_dpp,
  5   229 	 4 version	       fixed bin,
  5   230 	 4 real_class	       fixed bin,
  5   231 	 4 real_model	       char (12) var,
  5   232          3 trans_dpp,
  5   233 	 4 version	       fixed bin,
  5   234          3 dev_id		       fixed bin (16) uns,
  5   235          3 char_encoding	       fixed bin,
  5   236          3 char_set		       fixed bin,
  5   237          3 char_subset	       fixed bin,
  5   238          3 char_font	       fixed bin,
  5   239          3 nat_lang		       fixed bin,
  5   240          3 compression	       fixed bin;
  5   241 
  5   242 
  5   243 dcl  DSATM_SW_DEV_INFO_V1	       char (8) int static init ("TMSDI_V1");
  5   244 
  5   245 
  5   246 /* presentation control level */
  5   247 
  5   248 dcl  PC_LEVEL_DSA300	       bit (8) int static options (constant) init ("00000001"b);
  5   249 
  5   250 /* character encoding: indexes in arrays, names array, values array */
  5   251 
  5   252 dcl  CE_ISO_7BITS		       fixed bin int static options (constant) init (1);
  5   253 dcl  CE_ISO_8BITS		       fixed bin int static options (constant) init (2);
  5   254 dcl  CE_EBCDIC		       fixed bin int static options (constant) init (3);
  5   255 dcl  CE_TELETEX		       fixed bin int static options (constant) init (4);
  5   256 dcl  CE_BINARY_8BITS	       fixed bin int static options (constant) init (5);
  5   257 
  5   258 dcl  CE_NAME		       (0:8) char (12) int static options (constant)
  5   259 			       init ("UNDEFINED", "ISO_7BITS", "ISO_8BITS", "EBCDIC", "TELETEX", "BINARY_8BITS",
  5   260 			       (3) (""));
  5   261 
  5   262 dcl  CE_VALUE		       (0:8) fixed bin (8) uns int static options (constant)
  5   263 			       init (0, 1, 2, 3, 4, 5, (3) (0));
  5   264 
  5   265 /* character set: indexes in arrays, names array, values array */
  5   266 
  5   267 dcl  CS_ISO		       fixed bin int static options (constant) init (1);
  5   268 dcl  CS_ASCII		       fixed bin int static options (constant) init (2);
  5   269 dcl  CS_UK		       fixed bin int static options (constant) init (3);
  5   270 dcl  CS_NORWEGIAN_DANISH	       fixed bin int static options (constant) init (4);
  5   271 dcl  CS_SWEDISH_FINISH	       fixed bin int static options (constant) init (5);
  5   272 dcl  CS_PORTUGUESE		       fixed bin int static options (constant) init (6);
  5   273 dcl  CS_FRENCH		       fixed bin int static options (constant) init (7);
  5   274 dcl  CS_GREEK		       fixed bin int static options (constant) init (8);
  5   275 dcl  CS_SPANISH		       fixed bin int static options (constant) init (9);
  5   276 dcl  CS_GERMAN		       fixed bin int static options (constant) init (10);
  5   277 dcl  CS_PSEUDO_GRAPHIC	       fixed bin int static options (constant) init (11);
  5   278 
  5   279 dcl  CS_NAME		       (0:14) char (16) int static options (constant)
  5   280 			       init ("UNDEFINED", "ISO", "ASCII", "UK", "NORWEGIAN_DANISH", "SWEDISH_FINISH",
  5   281 			       "PORTUGUESE", "FRENCH", "GREEK", "SPANISH", "GERMAN", "PSEUDO_GRAPHIC", (3) (""));
  5   282 
  5   283 dcl  CS_VALUE		       (0:14) bit (8) int static options (constant)
  5   284 			       init ("00000000"b, "01000000"b /* 4/0  */, "01000010"b /* 4/2  */,
  5   285 			       "01000001"b /* 4/1  */, "01000011"b /* 4/3  */, "01001000"b /* 4/8  */,
  5   286 			       "01001100"b /* 4/12 */, "01010010"b /* 5/2  */, "01010101"b /* 5/5  */,
  5   287 			       "01011010"b /* 5/10 */, "01011011"b /* 5/11 */, "00110001"b /* 3/1  */,
  5   288 			       (3) ("00000000"b));
  5   289 
  5   290 /* character subset: indexes in arrays, names array, values array */
  5   291 
  5   292 dcl  CSS_UPPER_CASE		       fixed bin int static options (constant) init (1);
  5   293 dcl  CSS_UPPER_LOWER_CASE	       fixed bin int static options (constant) init (2);
  5   294 
  5   295 dcl  CSS_NAME		       (0:4) char (16) int static options (constant)
  5   296 			       init ("UNDEFINED", "UPPER_CASE", "UPPER_LOWER_CASE", (2) (""));
  5   297 
  5   298 dcl  CSS_VALUE		       (0:4) fixed bin (8) uns int static options (constant) init (0, 1, 2, (2) (0));
  5   299 
  5   300 /* national language: indexes in arrays, names array, values array */
  5   301 /* FFS */
  5   302 
  5   303 dcl  NL_FFS		       fixed bin int static options (constant) init (1);
  5   304 
  5   305 dcl  NL_NAME		       (0:4) char (9) int static options (constant) init ("UNDEFINED", "FFS", (3) (""));
  5   306 
  5   307 dcl  NL_VALUE		       (0:4) fixed bin (8) uns int static options (constant) init (0, 1, (3) (0));
  5   308 
  5   309 /* compression algorithm: indexes in arrays, names array, values array */
  5   310 
  5   311 dcl  CA_NO_COMPRESSION	       fixed bin int static options (constant) init (1);
  5   312 
  5   313 dcl  CA_NAME		       (0:4) char (16) int static options (constant)
  5   314 			       init ("NO_COMPRESSION", "NO_COMPRESSION", (3) (""));
  5   315 
  5   316 dcl  CA_VALUE		       (0:4) fixed bin (8) uns int static options (constant) init (0, 0, (3) (0));
  5   317 
  5   318 /* protocol id */
  5   319 
  5   320 /* protocol name */
  5   321 dcl  PN_TM		       fixed bin int static options (constant) init (1);
  5   322 dcl  PN_NAME		       (0:1) char (9) int static options (constant) init ("UNDEFINED", "TM");
  5   323 dcl  PN_VALUE		       (0:1) fixed bin (8) uns int static options (constant) init (0, 128);
  5   324 
  5   325 /* protocol level */
  5   326 dcl  TM_LEVEL_DSA300	       bit (8) int static options (constant) init ("00000001"b);
  5   327 
  5   328 /* protocol version */
  5   329 dcl  PV_TM_NO_STC		       fixed bin int static options (constant) init (1);
  5   330 dcl  PV_TM_FULL_STC		       fixed bin int static options (constant) init (2);
  5   331 dcl  PV_NAME		       (0:2) char (12) int static options (constant)
  5   332 			       init ("UNDEFINED", "TM_NO_STC", "TM_FULL_STC");
  5   333 dcl  PV_VALUE		       (0:2) fixed bin int static options (constant) init (0, 1, 2);
  5   334 
  5   335 
  5   336 /* initiator/acceptor: indexes in arrays, names array, values array */
  5   337 
  5   338 dcl  IA_INITIATOR		       fixed bin int static options (constant) init (1);
  5   339 dcl  IA_ACCEPTOR		       fixed bin int static options (constant) init (2);
  5   340 
  5   341 dcl  IA_NAME		       (0:2) char (12) int static options (constant)
  5   342 			       init ("UNDEFINED", "INITIATOR", "ACCEPTOR");
  5   343 dcl  IA_VALUE		       (0:2) fixed bin (8) uns int static options (constant) init (0, 1, 2);
  5   344 
  5   345 
  5   346 /* control protocol: indexes in arrays, names array, values array */
  5   347 
  5   348 dcl  CP_STANDARD		       fixed bin int static options (constant) init (1);
  5   349 dcl  CP_NO_CONTROL		       fixed bin int static options (constant) init (2);
  5   350 
  5   351 dcl  CP_NAME		       (0:4) char (12) int static options (constant)
  5   352 			       init ("NO_CONTROL", "STANDARD", "NO_CONTROL", (2) (""));
  5   353 
  5   354 dcl  CP_VALUE		       (0:4) bit (8) int static options (constant)
  5   355 			       init ("00000000"b, "10000000"b, "00000000"b, (2) ("00000000"b));
  5   356 
  5   357 /* data presentation protocol: indexes in arrays, names array, values array */
  5   358 
  5   359 dcl  DPP_SDP		       fixed bin int static options (constant) init (1);
  5   360 dcl  DPP_REAL		       fixed bin int static options (constant) init (2);
  5   361 dcl  DPP_TRANSPARENT	       fixed bin int static options (constant) init (3);
  5   362 
  5   363 dcl  DPP_NAME		       (0:4) char (12) int static options (constant)
  5   364 			       init ("UNDEFINED", "SDP", "REAL", "TRANSPARENT", (""));
  5   365 
  5   366 dcl  DPP_VALUE		       (0:4) fixed bin (8) uns int static options (constant) init (0, 1, 2, 3, 0);
  5   367 
  5   368 /* sdp class: indexes in arrays, names array, values array */
  5   369 
  5   370 dcl  SC_MANDATORY		       fixed bin int static options (constant) init (1);
  5   371 
  5   372 dcl  SC_NAME		       (0:4) char (12) int static options (constant)
  5   373 			       init ("UNDEFINED", "MANDATORY", (3) (""));
  5   374 
  5   375 dcl  SC_VALUE		       (0:4) fixed bin (8) uns int static options (constant) init (0, 128, (3) (0));
  5   376 
  5   377 
  5   378 /* real class: indexes in arrays, names array, values array */
  5   379 
  5   380 dcl  RC_UNDEFINED		       fixed bin int static options (constant) init (0);
  5   381 dcl  RC_VIP77XX		       fixed bin int static options (constant) init (1);
  5   382 dcl  RC_VIP78XX		       fixed bin int static options (constant) init (2);
  5   383 dcl  RC_327X		       fixed bin int static options (constant) init (3);
  5   384 dcl  RC_TTY		       fixed bin int static options (constant) init (4);
  5   385 dcl  RC_BATCH_RCI		       fixed bin int static options (constant) init (5);
  5   386 dcl  RC_TMMVU		       fixed bin int static options (constant) init (6);
  5   387 dcl  RC_2780		       fixed bin int static options (constant) init (7);
  5   388 dcl  RC_UNSPECIFIED		       fixed bin int static options (constant) init (8);
  5   389 dcl  RC_TMMRB		       fixed bin int static options (constant) init (9);
  5   390 dcl  RC_2780_3780_RJE	       fixed bin int static options (constant) init (10);
  5   391 
  5   392 dcl  RC_NAME		       (0:16) char (16) int static options (constant)
  5   393 			       init ("UNDEFINED", "VIP77XX", "VIP78XX", "327X", "TTY", "BATCH_RCI", "TMMVU", "2780",
  5   394 			       "UNSPECIFIED", "TMMRB", "2780_3780_RJE", (6) (""));
  5   395 
  5   396 dcl  RC_VALUE		       (0:16) fixed bin (8) uns int static options (constant)
  5   397 			       init (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, (6) (0));
  5   398 
  5   399 /* device types: indexes in arrays, names array, values array */
  5   400 
  5   401 dcl  DT_UNDEFINED		       fixed bin int static options (constant) init (0);
  5   402 dcl  DT_DISPLAY		       fixed bin int static options (constant) init (1);
  5   403 dcl  DT_KEYBOARD		       fixed bin int static options (constant) init (2);
  5   404 dcl  DT_RO_PRINTER		       fixed bin int static options (constant) init (3);
  5   405 dcl  DT_KEYBOARD_PRINTER	       fixed bin int static options (constant) init (4);
  5   406 dcl  DT_KEYBOARD_DISPLAY	       fixed bin int static options (constant) init (5);
  5   407 dcl  DT_CARD_READER		       fixed bin int static options (constant) init (6);
  5   408 dcl  DT_PAPER_TAPE_READER	       fixed bin int static options (constant) init (7);
  5   409 dcl  DT_BADGE_READER	       fixed bin int static options (constant) init (8);
  5   410 dcl  DT_RFE		       fixed bin int static options (constant) init (9);
  5   411 dcl  DT_CASSETTE		       fixed bin int static options (constant) init (10);
  5   412 dcl  DT_DISKETTE		       fixed bin int static options (constant) init (11);
  5   413 dcl  DT_CARD_PUNCH		       fixed bin int static options (constant) init (12);
  5   414 dcl  DT_PAPER_TAPE_PUNCH	       fixed bin int static options (constant) init (13);
  5   415 
  5   416 
  5   417 dcl  DT_NAME		       (0:16) char (20) int static options (constant)
  5   418 			       init ("UNDEFINED", "DISPLAY", "KEYBOARD", "RO_PRINTER", "KEYBOARD_PRINTER",
  5   419 			       "KEYBOARD_DISPLAY", "CARD_READER", "PAPER_TAPE_READER", "BADGE_READER", "RFE",
  5   420 			       "CASSETTE", "DISKETTE", "CARD_PUNCH", "PAPER_TAPE_PUNCH", (3) (""));
  5   421 
  5   422 dcl  DT_VALUE		       (0:16) fixed bin (8) uns int static options (constant)
  5   423 			       init (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, (3) (0));
  5   424 
  5   425 /* device resource attributes: indexes in arrays, names array, values array */
  5   426 
  5   427 dcl  SH_DEDICATED		       fixed bin int static options (constant) init (1);
  5   428 dcl  SH_DEDICATED_OR_SHAREABLE       fixed bin int static options (constant) init (2);
  5   429 dcl  SH_EXCLUSIVELY_SHAREABLE	       fixed bin int static options (constant) init (3);
  5   430 
  5   431 dcl  SH_NAME		       (0:4) char (24) int static options (constant)
  5   432 			       init ("UNDEFINED", "DEDICATED", "DEDICATED_OR_SHAREABLE", "EXCLUSIVELY_SHAREABLE",
  5   433 			       "");
  5   434 
  5   435 dcl  SH_VALUE		       (0:4) bit (2) int static options (constant) init ("00"b, "01"b, "10"b, "11"b, "00"b);
  5   436 
  5   437 
  5   438 dcl  AU_END_OF_RECORD	       fixed bin int static options (constant) init (1);
  5   439 dcl  AU_END_OF_QUARANTINE_UNIT       fixed bin int static options (constant) init (2);
  5   440 dcl  AU_END_OF_INTERACTION_UNIT      fixed bin int static options (constant) init (3);
  5   441 dcl  AU_END_OF_SESSION	       fixed bin int static options (constant) init (4);
  5   442 dcl  AU_REPORT_UNIT		       fixed bin int static options (constant) init (5);
  5   443 dcl  AU_ACKNOWLEDGMENT_UNIT	       fixed bin int static options (constant) init (6);
  5   444 dcl  AU_USER_DEFINED_UNIT	       fixed bin int static options (constant) init (7);
  5   445 dcl  AU_RFU		       fixed bin int static options (constant) init (8);
  5   446 
  5   447 dcl  AU_NAME		       (0:8) char (16) int static options (constant)
  5   448 			       init ("UNDEFINED", "RECORD", "QUARANTINE_UNIT", "INTERACTION_UNIT", "SESSION",
  5   449 			       "RFU_REPORT_UNIT", "RFU_ACK_UNIT", "RFU_USER", "RFU");
  5   450 
  5   451 dcl  AU_VALUE		       (0:8) bit (8) int static options (constant)
  5   452 			       init ("00000000"b, "10000000"b, "01000000"b, "00100000"b, "00010000"b, "00001000"b,
  5   453 			       "00000100"b, "00000010"b, "00000001"b);
  5   454 
  5   455 /* line overflow condition: indexes in arrays, names array, values array */
  5   456 
  5   457 dcl  LO_TRUNCATION		       fixed bin int static options (constant) init (1);
  5   458 dcl  LO_FOLDING		       fixed bin int static options (constant) init (2);
  5   459 dcl  LO_NO_FOLDING		       fixed bin int static options (constant) init (3);
  5   460 
  5   461 dcl  LO_NAME		       (0:3) char (12) int static options (constant)
  5   462 			       init ("TRUNCATION", "TRUNCATION", "FOLDING", "NO_FOLDING");
  5   463 
  5   464 dcl  LO_VALUE		       (0:3) fixed bin (8) uns int static options (constant) init (0, 0, 1, 2);
  5   465 
  5   466 /* page overflow condition: indexes in arrays, names array, values array */
  5   467 
  5   468 dcl  PO_TRUNCATION		       fixed bin int static options (constant) init (1);
  5   469 dcl  PO_CLEAR		       fixed bin int static options (constant) init (2);
  5   470 dcl  PO_SCROLL		       fixed bin int static options (constant) init (3);
  5   471 dcl  PO_NO_PAGING		       fixed bin int static options (constant) init (4);
  5   472 
  5   473 dcl  PO_NAME		       (0:4) char (12) int static options (constant)
  5   474 			       init ("TRUNCATION", "TRUNCATION", "CLEAR", "SCROLL", "NO_PAGING");
  5   475 
  5   476 dcl  PO_VALUE		       (0:4) fixed bin (8) uns int static options (constant) init (0, 0, 1, 2, 3);
  5   477 
  5   478 /* character font: indexes in arrays, names array, values array */
  5   479 
  5   480 dcl  CF_ANY		       fixed bin int static options (constant) init (1);
  5   481 dcl  CF_ITALICS		       fixed bin int static options (constant) init (2);
  5   482 dcl  CF_ELITE		       fixed bin int static options (constant) init (3);
  5   483 dcl  CF_PICA		       fixed bin int static options (constant) init (4);
  5   484 
  5   485 dcl  CF_NAME		       (0:6) char (9) int static options (constant)
  5   486 			       init ("UNDEFINED", "ANY", "ITALICS", "ELITE", "PICA", (2) (""));
  5   487 
  5   488 dcl  CF_VALUE		       (0:6) fixed bin (8) uns int static options (constant) init (0, 1, 2, 3, 4, (2) (0));
  5   489 
  5   490 /* end_to_end acknowledgment support: indexes in arrays, names array, */
  5   491 /*                                    values array.                   */
  5   492 
  5   493 dcl  EAL_IO_TM		       fixed bin int static options (constant) init (1);
  5   494 dcl  EAL_DATA_ACK		       fixed bin int static options (constant) init (2);
  5   495 dcl  EAL_FCN_COMPLETE	       fixed bin int static options (constant) init (3);
  5   496 dcl  EAL_RFU		       fixed bin int static options (constant) init (4);
  5   497 
  5   498 dcl  EAL_NAME		       (0:4) char (12) int static options (constant)
  5   499 			       init ("IO_TM", "IO_TM", "DATA_ACK", "FCN_COMPLETE", "RFU");
  5   500 
  5   501 dcl  EAL_VALUE		       (0:4) fixed bin (16) uns int static options (constant) init (0, 0, 1, 2, 3);
  5   502 
  5   503 /* Secondary Link Protocol */
  5   504 
  5   505 dcl  SLP_ASYNCHRONOUS	       fixed bin int static options (constant) init (1);
  5   506 dcl  SLP_VIP_MULTIPOINT	       fixed bin int static options (constant) init (2);
  5   507 dcl  SLP_TMMVU_MULTIPOINT	       fixed bin int static options (constant) init (3);
  5   508 dcl  SLP_TMMRB_MULTIPOINT	       fixed bin int static options (constant) init (4);
  5   509 dcl  SLP_BSC_MULTIPOINT	       fixed bin int static options (constant) init (5);
  5   510 dcl  SLP_BSC_POINT_TO_POINT	       fixed bin int static options (constant) init (6);
  5   511 dcl  SLP_RCI_POINT_TO_POINT	       fixed bin int static options (constant) init (7);
  5   512 dcl  SLP_HDLC_MULTIPOINT	       fixed bin int static options (constant) init (8);
  5   513 dcl  SLP_HDLC_POINT_TO_POINT	       fixed bin int static options (constant) init (9);
  5   514 
  5   515 dcl  SLP_NAME		       (0:12) char (20) int static options (constant)
  5   516 			       init ("UNDEFINED", "ASYNCHRONOUS", "VIP_MULTIPOINT", "TMMVU_MULTIPOINT",
  5   517 			       "TMMRB_MULTIPOINT", "BSC_MULTIPOINT", "BSC_POINT_TO_POINT", "RCI_POINT_TO_POINT",
  5   518 			       "HDLC_MULTIPOINT", "HDLC_POINT_TO_POINT", (3) (""));
  5   519 
  5   520 dcl  SLP_VALUE		       (0:12) fixed bin (8) uns int static options (constant)
  5   521 			       init (0, 1, 2, 3, 4, 5, 6, 7, 10, 11, (3) (0));
  5   522 
  5   523 /* Type of Network */
  5   524 
  5   525 dcl  NT_SWITCHED		       fixed bin int static options (constant) init (1);
  5   526 dcl  NT_X21		       fixed bin int static options (constant) init (2);
  5   527 dcl  NT_X25		       fixed bin int static options (constant) init (3);
  5   528 
  5   529 dcl  NT_NAME		       (0:4) char (9) int static options (constant)
  5   530 			       init ("UNDEFINED", "SWITCHED", "X21", "X25", "");
  5   531 
  5   532 dcl  NT_VALUE		       (0:4) fixed bin (8) uns int static options (constant) init (0, 1, 2, 3, 0);
  5   533 
  5   534 /* miscellaneous */
  5   535 
  5   536 dcl  TM_OFFER		       fixed bin int static options (constant) init (1);
  5   537 dcl  TM_ACCEPT		       fixed bin int static options (constant) init (2);
  5   538 dcl  TM_REJECT		       fixed bin int static options (constant) init (3);
  5   539 dcl  TM_SWITCH		       fixed bin int static options (constant) init (4);
  5   540 
  5   541 /*  END OF:  dsatm_negotiate_info.incl.pl1		  *  *  *  *  *  */
      863 
      864 
  6     1 /* BEGIN INCLUDE FILE ... function_key_data.incl.pl1 
  6     2*
  6     3*   This include file defines the structure used for ttt_info_$function_key_data
  6     4*   MCR 4671      James R. Davis Sept 80
  6     5**/
  6     6 
  6     7 dcl 1 function_key_data aligned based (function_key_data_ptr),
  6     8       2 version fixed bin,
  6     9       2 highest fixed bin,				/* highest fkey */
  6    10       2 sequence,					/* string of all seqs. */
  6    11         3 seq_ptr pointer,
  6    12         3 seq_len fixed bin (21),
  6    13       2 cursor_motion_keys,
  6    14         3 home (0:3) like key_info,
  6    15         3 left (0:3) like key_info,
  6    16         3 up (0:3) like key_info,
  6    17         3 right (0:3) like key_info,
  6    18         3 down (0:3) like key_info,
  6    19       2 function_keys (0:function_key_data_highest refer
  6    20 	(function_key_data.highest), 0:3) like key_info;
  6    21 
  6    22 dcl (KEY_PLAIN init (0),
  6    23      KEY_SHIFT init (1),
  6    24      KEY_CTRL init (2),
  6    25      KEY_CTRL_AND_SHIFT init (3)
  6    26      ) fixed bin internal static options (constant);
  6    27 
  6    28 dcl 1 key_info unaligned based (key_info_ptr),
  6    29       2 sequence_index fixed bin (12) unsigned unaligned,
  6    30       2 sequence_length fixed bin (6) unsigned unaligned;	/* 0 -> not exist */
  6    31 
  6    32 dcl function_key_seqs char (function_key_data.sequence.seq_len)
  6    33 	based (function_key_data.sequence.seq_ptr);
  6    34 dcl function_key_data_ptr ptr;
  6    35 dcl function_key_data_highest fixed bin;
  6    36 dcl function_key_data_version_1
  6    37 	fixed bin internal static options (constant) init (1);
  6    38 dcl key_info_ptr ptr;
  6    39 
  6    40 
  6    41 /* END INCLUDE FILE ... function_key_data.incl.pl1 */
      865 
      866 
  7     1 /* BEGIN INCLUDE FiLE ... terminal_type_data.incl.pl1 */
  7     2 
  7     3 
  7     4 /****^  HISTORY COMMENTS:
  7     5*  1) change(77-05-19,JStern), approve(), audit(), install():
  7     6*     Created
  7     7*     Modified 8/14/79 by Robert Coren to convert to version 2 by adding
  7     8*        flow control parameters
  7     9*  2) change(87-03-09,LJAdams), approve(87-04-03,MCR7646),
  7    10*     audit(87-05-05,Gilcrease), install(87-08-04,MR12.1-1056):
  7    11*     Change the ttd_version to ttd_version_3.  Add the protocol field.
  7    12*                                                   END HISTORY COMMENTS */
  7    13 
  7    14 
  7    15 dcl 1 terminal_type_data aligned based (ttdp),		/* info structure for set_terminal_data order */
  7    16       2 version fixed bin,				/* structure version */
  7    17       2 old_type fixed bin,				/* old terminal type number, -1 => none */
  7    18       2 name char (32) unaligned,			/* terminal type name */
  7    19       2 tables,
  7    20         3 input_tr_ptr ptr,				/* input translation table ptr */
  7    21         3 output_tr_ptr ptr,				/* output translation table ptr */
  7    22         3 input_cv_ptr ptr,				/* input conversion table ptr */
  7    23         3 output_cv_ptr ptr,				/* output conversion table ptr */
  7    24         3 special_ptr ptr,				/* special chars table ptr */
  7    25         3 delay_ptr ptr,				/* delay table ptr */
  7    26       2 editing_chars unaligned,
  7    27         3 erase char (1) unaligned,
  7    28         3 kill char (1) unaligned,
  7    29       2 framing_chars unaligned,
  7    30         3 frame_begin char (1) unaligned,
  7    31         3 frame_end char (1) unaligned,
  7    32       2 flags unal,
  7    33         3 keyboard_locking bit (1),			/* ON to request keyboard locking and unlocking */
  7    34         3 input_timeout bit (1),
  7    35         3 output_block_acknowledge bit (1),
  7    36         3 mbz bit (15),
  7    37       2 line_delimiter char (1) unal,
  7    38       2 mbz bit (9) unal,
  7    39 
  7    40       /* the remainder of this structure is only present if version is 2 or more */
  7    41 
  7    42       2 flow_control_chars unal,
  7    43         3 input_suspend char (1),
  7    44         3 input_resume char (1),
  7    45         3 output_suspend_etb char (1),
  7    46         3 output_resume_ack char (1),
  7    47       2 output_buffer_size fixed bin,
  7    48 
  7    49       /* the remainder of this structure is only present if version is 3 or more */
  7    50       2 protocol fixed bin; /* 0=NONE; 1=MOWSE */
  7    51 
  7    52 
  7    53 dcl  ttdp ptr;					/* ptr to terminal_type_data structure */
  7    54 dcl  ttd_version_3 fixed bin int static options (constant) init (3);
  7    55 						/* current version of structure */
  7    56 
  7    57 
  7    58 /* END INCLUDE FILE ... terminal_type_data.incl.pl1 */
      867 
      868 dcl  ttd_version_2 fixed bin int static options (constant) init (2);
      869 
  8     1 /* BEGIN INCLUDE FILE ... terminate_file.incl.pl1 */
  8     2 /* format: style2,^inddcls,idind32 */
  8     3 
  8     4 declare 1 terminate_file_switches	based,
  8     5 	2 truncate		bit (1) unaligned,
  8     6 	2 set_bc			bit (1) unaligned,
  8     7 	2 terminate		bit (1) unaligned,
  8     8 	2 force_write		bit (1) unaligned,
  8     9 	2 delete			bit (1) unaligned;
  8    10 
  8    11 declare TERM_FILE_TRUNC		bit (1) internal static options (constant) initial ("1"b);
  8    12 declare TERM_FILE_BC		bit (2) internal static options (constant) initial ("01"b);
  8    13 declare TERM_FILE_TRUNC_BC		bit (2) internal static options (constant) initial ("11"b);
  8    14 declare TERM_FILE_TERM		bit (3) internal static options (constant) initial ("001"b);
  8    15 declare TERM_FILE_TRUNC_BC_TERM	bit (3) internal static options (constant) initial ("111"b);
  8    16 declare TERM_FILE_FORCE_WRITE		bit (4) internal static options (constant) initial ("0001"b);
  8    17 declare TERM_FILE_DELETE		bit (5) internal static options (constant) initial ("00001"b);
  8    18 
  8    19 /* END INCLUDE FILE ... terminate_file.incl.pl1 */
      870 
      871 
  9     1 /*  BEGIN:   ttt.incl.pl1				  *  *  *  *  *  */
  9     2 
  9     3 /* This include file describes the terminal type table (TTT) and
  9     4*   the various subtables it contains. */
  9     5 
  9     6 
  9     7 /****^  HISTORY COMMENTS:
  9     8*  1) change(77-05-18,RCoren), approve(), audit(), install():
  9     9*     Created
  9    10*     Modified 5/29/81 by Suzanne Krupp to make TTT_version = 2,
  9    11*        to change ttt and tte structures to include function key info
  9    12*  2) change(84-12-17,Negaret), approve(87-07-28,MCR7742),
  9    13*     audit(87-07-23,Gilcrease), install(87-08-04,MR12.1-1056):
  9    14*     Add the dsatm_device table.
  9    15*  3) change(87-03-05,LJAdams), approve(87-03-05,MCR7646),
  9    16*     audit(87-05-05,Gilcrease), install(87-05-08,MR12.1-1029):
  9    17*     Add the protocol field to the terminal type entry table.  Change
  9    18*     TTT_version to TTT_version_3.
  9    19*  4) change(87-06-26,LJAdams), approve(87-07-09,MCR7742),
  9    20*     audit(87-07-23,Gilcrease), install(87-08-04,MR12.1-1056):
  9    21*     Changed constant value for extended_tables_ntables from 2 to 3 in order to
  9    22*     accommodate addition of DSA table.
  9    23*  5) change(88-01-22,Brunelle), approve(88-01-22,MCR7813),
  9    24*     audit(88-10-05,Blair), install(88-10-17,MR12.2-1171):
  9    25*     1. Extend special character definition to 15 chars instead of three.
  9    26*     2. add comment field to tte.
  9    27*                                                   END HISTORY COMMENTS */
  9    28 
  9    29 
  9    30 dcl  TTT_version_4 fixed bin int static options (constant) init (4);
  9    31 
  9    32 dcl  tttp ptr;
  9    33 
  9    34 dcl 1 ttt aligned based (tttp),
  9    35       2 author like author_dcl.author,
  9    36       2 version fixed bin,
  9    37       2 n_tt_entries fixed bin,
  9    38       2 n_tables fixed bin,
  9    39       2 n_special_tables fixed bin,
  9    40       2 n_fkey_tables fixed bin,
  9    41       2 fkey_offset fixed bin(18),
  9    42       2 default_type_offset fixed bin (18),
  9    43       2 answerback_offset fixed bin (18),
  9    44       2 total_ttt_size fixed bin (18),
  9    45       2 type_map fixed bin,			/* index of type implied by MAP command */
  9    46       2 type_963 fixed bin,			/* likewise for 963 command */
  9    47       2 type_029 fixed bin,			/* likewise for 029 command */
  9    48       2 highest_coded_type fixed bin,		/* highest value used so far for coded_type */
  9    49 					/* start entries on 8-word boundary */
  9    50       2 tt_entries (0 refer (ttt.n_tt_entries)) like tte,
  9    51       2 tables (0 refer (ttt.n_tables)) like table_entry, /* conversion and translation tables */
  9    52       2 rest_of_ttt (1) fixed bin;		/* placeholder for special_tables, function_key_tables,
  9    53*					*  delay tables, initial strings,
  9    54*					*  additional_info strings, default_types table,
  9    55*					*  answerback table */
  9    56 
  9    57 dcl  ttep ptr;
  9    58 
  9    59 dcl 1 tte based (ttep) aligned,		/* terminal type entry */
  9    60       2 name char (32) unal,
  9    61       2 modes char (256),
  9    62       2 initial_string,
  9    63         3 offset fixed bin (18),
  9    64         3 length fixed bin,
  9    65       2 additional_info,
  9    66         3 offset fixed bin (18),
  9    67         3 length fixed bin,
  9    68       2 comment,
  9    69         3 offset fixed bin (18),
  9    70         3 length fixed bin,
  9    71       2 tables,
  9    72         3 input_translation_rp fixed bin (18),	/* offset of input translation table */
  9    73         3 output_translation_rp fixed bin (18),	/*   "     " output      "      "    */
  9    74         3 input_conversion_rp fixed bin (18),	/*   "     " input conversion   "    */
  9    75         3 output_conversion_rp fixed bin (18),	/*   "     " output      "      "    */
  9    76         3 special_rp fixed bin (18),		/*   "     " special_chars table */
  9    77         3 fkey_rp fixed bin(18),
  9    78         3 delay_rp fixed bin (18),		/* offset of array of delay tables */
  9    79       2 line_types bit (72),			/* terminal type is possible only if corresponding line_type bit is on */
  9    80       2 editing_chars aligned,
  9    81         3 erase char (1) unal,
  9    82         3 kill char (1) unal,
  9    83         3 framing_chars unal,
  9    84           4 frame_begin char (1) unal,
  9    85           4 frame_end char (1) unal,
  9    86       2 flags aligned,
  9    87         3 keyboard_addressing bit (1) unal,
  9    88         3 print_preaccess_message bit (1) unal,
  9    89         3 conditional_printer_off bit (1) unal,
  9    90         3 input_timeout bit (1) unal,
  9    91         3 output_block_acknowledge bit (1) unal,
  9    92         3 pad bit (31) unal,
  9    93       2 old_type fixed bin,
  9    94       2 like_type fixed bin,			/* index of entry which this one is "like" */
  9    95       2 like_flags unal,			/* only meaningful if like_type is non-0 */
  9    96         3 bauds_overridden bit (1),
  9    97         3 delay_overridden (6) bit (1),		/* one for each kind of delay statement */
  9    98         3 pad bit (11) unal,
  9    99       2 line_delimiter char (1) unal,		/* default line delimiter, untanslated */
  9   100       2 pad1 bit (9) unal,
  9   101       2 coded_type fixed bin,			/* used for storing type values in PDT & PNT */
  9   102       2 flow_control_chars unal,
  9   103         3 input_suspend char (1),
  9   104         3 input_resume char (1),
  9   105         3 output_suspend_etb char (1),
  9   106         3 output_resume_ack char (1),
  9   107       2 output_buffer_size fixed bin,
  9   108       2 extended_tables_rp fixed bin (18),	/* rel pointer to extended_tables */
  9   109       2 protocol fixed bin;                       /* 0=NONE    1=MOWSE */
  9   110                                                   /* 2=MOWSE_FANSI     */
  9   111 
  9   112 dcl  extended_tablesp ptr;
  9   113 
  9   114 dcl 1 extended_tables aligned based (extended_tablesp),
  9   115       2 ntables fixed bin,
  9   116       2 tables_rp (extended_tables_ntables refer (extended_tables.ntables)) fixed bin (18);
  9   117 
  9   118 dcl (VIDEO_RP init (1),			/* indexes in tables_rp */
  9   119      FUNCTION_KEY_RP init (2),
  9   120      DSATM_DEVICE_RP init (3)) fixed bin int static options (constant);
  9   121 
  9   122 dcl  extended_tables_ntables fixed bin int static options (constant) init (3);
  9   123 
  9   124 
  9   125 dcl  dfttp ptr;
  9   126 
  9   127 dcl 1 dftt based (dfttp) aligned,		/* default_types table */
  9   128       2 dft_count fixed bin,
  9   129       2 dftte (0 refer (dftt.dft_count)),
  9   130         3 baud fixed bin,
  9   131         3 line_type fixed bin,
  9   132         3 term_type_index fixed bin;
  9   133 
  9   134 
  9   135 dcl  tablep ptr;
  9   136 
  9   137 dcl 1 table_entry aligned based (tablep),
  9   138       2 name char (32) unal,
  9   139       2 type fixed bin,			/* 1 = conversion, 2 = translation */
  9   140       2 table like cv_trans_struc;
  9   141 
  9   142 
  9   143 dcl 1 special_table aligned based,
  9   144       2 name char (32) unal,
  9   145       2 type fixed bin,
  9   146       2 table,
  9   147         3 version fixed bin,
  9   148         3 default fixed bin,				/* non-zero indicates use default */
  9   149         3 special_chars,				/* same as level-1 above */
  9   150 						/* has to be spelled out instead of using like */
  9   151 						/* because of refer options */
  9   152           4 nl_seq aligned like c_chars,			/* new-line sequence */
  9   153           4 cr_seq aligned like c_chars,			/* carriage-return sequence */
  9   154           4 bs_seq aligned like c_chars,			/* backspace sequence */
  9   155           4 tab_seq aligned like c_chars,			/* horizontal tab sequence */
  9   156           4 vt_seq aligned like c_chars,			/* vertical tab sequence */
  9   157           4 ff_seq aligned like c_chars,			/* form-feed sequence */
  9   158           4 printer_on aligned like c_chars,		/* printer-on sequence */
  9   159           4 printer_off aligned like c_chars,		/* printer_off sequence */
  9   160           4 red_ribbon_shift aligned like c_chars,		/* red ribbon shift sequence */
  9   161           4 black_ribbon_shift aligned like c_chars,		/* black ribbon shift sequence */
  9   162           4 end_of_page aligned like c_chars,		/* end-of-page warning sequence */
  9   163 
  9   164           4 escape_length fixed bin,			/* number of escape sequences */
  9   165           4 not_edited_escapes (sc_escape_len refer (special_table.escape_length)) like c_chars, /* use in ^edited mode */
  9   166           4 edited_escapes (sc_escape_len refer (special_table.escape_length)) like c_chars, /* use in edited mode */
  9   167 
  9   168           4 input_escapes aligned,
  9   169             5 len fixed bin (8) unaligned,			/* length of string */
  9   170             5 str char (sc_input_escape_len refer (special_table.input_escapes.len)) unaligned, /* escape sequence characters */
  9   171           4 input_results aligned,
  9   172             5 pad bit (9) unaligned,			/* so that strings will look the same */
  9   173             5 str char (sc_input_escape_len refer (special_table.input_escapes.len)) unaligned; /* results of escape sequences */
  9   174 
  9   175 dcl fkey_tablep ptr;
  9   176 
  9   177 dcl 1 fkey_table aligned based (fkey_tablep),
  9   178       2 name char(32) unal,
  9   179       2 fkey_data aligned,
  9   180         3 version fixed bin,
  9   181         3 highest fixed bin,
  9   182         3 sequence,					/* string of all seqs*/
  9   183           4 seq_offset fixed bin(18),			/* offset in ttt of sequence */
  9   184 	4 pad bit(36),				/* pad makes overlay of function_key_data struct possible */
  9   185 	4 seq_len fixed bin(21),
  9   186         3 cursor_motion_keys,
  9   187           4 home (0:3) like template,
  9   188 	4 left (0:3) like template,
  9   189 	4 up (0:3) like template,
  9   190 	4 right (0:3) like template,
  9   191 	4 down (0:3) like template,
  9   192         3 function_keys (0:function_key_data_highest refer(fkey_table.highest), 0:3) like template;
  9   193 
  9   194 dcl template_ptr ptr;
  9   195 
  9   196 dcl 1 template unaligned based(template_ptr),
  9   197       2 sequence_index fixed bin(12) unsigned unaligned,
  9   198       2 sequence_length fixed bin(6) unsigned unaligned;
  9   199 
  9   200 dcl  delay_tablep ptr;
  9   201 
  9   202 dcl 1 delay_table based (delay_tablep) aligned,
  9   203       2 n_bauds fixed bin,
  9   204       2 delay_array (0 refer (delay_table.n_bauds)),
  9   205         3 baud_rate fixed bin,
  9   206         3 version fixed bin,
  9   207         3 mbz fixed bin,
  9   208         3 delays (6) fixed bin;
  9   209 
  9   210 
  9   211 dcl  answerback_entry_ptr ptr;
  9   212 dcl  answerback_length fixed bin;		/* automatic copy of length of char string */
  9   213 
  9   214 dcl 1 answerback_entry based (answerback_entry_ptr) aligned,
  9   215       2 next fixed bin (18),			/* offset of next answerback table entry */
  9   216       2 term_type_index fixed bin,
  9   217       2 def_string,
  9   218         3 length fixed bin,
  9   219         3 chars (answerback_length refer (answerback_entry.length)) char (1) unal;
  9   220 
  9   221 dcl  CONV_TYPE fixed bin int static options (constant) init (1);
  9   222 dcl  TRANS_TYPE fixed bin int static options (constant) init (2);
  9   223 dcl  SPEC_TYPE fixed bin int static options (constant) init (3);
  9   224 dcl  FKEY_TYPE fixed bin int static options (constant) init (4);
  9   225 
  9   226 dcl  table_types (4) char (12) int static options (constant) init
  9   227 		("conversion", "translation", "special", "function_key");
  9   228 
  9   229 dcl  pa_name (3) char (3) int static options (constant) init
  9   230 		("MAP", "963", "029");
  9   231 
 10     1 /*	BEGIN INCLUDE FILE ... tty_convert.incl.pl1	*/
 10     2 
 10     3 /* tty_ conversion tables */
 10     4 /* Created 11/3/75 by Robert S. Coren */
 10     5 /* Info structures added 5/19/77 by Robert S. Coren */
 10     6 /* Length of cv_trans changed from 128 to 256 05/03/78 by Robert Coren */
 10     7 /* conversion table mnemonics added JRDavis 21 Aug 80 */
 10     8 /* fix special_chars_struc to have good refers Fri 13 Feb 81 JRDavis */
 10     9 
 10    10 
 10    11 /****^  HISTORY COMMENTS:
 10    12*  1) change(85-12-01,Negaret), approve(87-07-23,MCR7742),
 10    13*     audit(87-07-23,GDixon), install(87-08-04,MR12.1-1056):
 10    14*      Added INPUT_CONVERT_DSA_CR_PROCESSING constant.
 10    15*  2) change(88-01-22,Brunelle), approve(88-01-22,MCR7813),
 10    16*     audit(88-10-05,Blair), install(88-10-17,MR12.2-1171):
 10    17*     Expand c_chars definition from 3 chars to 15.  Change SPECIAL_VERSION
 10    18*     from 1 to 2.  Add version variable to get_special_info_struc and define
 10    19*     SPECIAL_INFO_STRUCT_VERSION_1.
 10    20*                                                   END HISTORY COMMENTS */
 10    21 
 10    22 
 10    23 /* format: style2,linecom,^indnoniterdo,indcomtxt,^inditerdo,dclind5,idind25 */
 10    24 
 10    25 
 10    26      dcl	1 special_chars	     aligned based,		/* table of special character sequences */
 10    27 	  2 nl_seq	     aligned like c_chars,	/* new-line sequence */
 10    28 	  2 cr_seq	     aligned like c_chars,	/* carriage-return sequence */
 10    29 	  2 bs_seq	     aligned like c_chars,	/* backspace sequence */
 10    30 	  2 tab_seq	     aligned like c_chars,	/* horizontal tab sequence */
 10    31 	  2 vt_seq	     aligned like c_chars,	/* vertical tab sequence */
 10    32 	  2 ff_seq	     aligned like c_chars,	/* form-feed sequence */
 10    33 	  2 printer_on	     aligned like c_chars,	/* printer-on sequence */
 10    34 	  2 printer_off	     aligned like c_chars,	/* printer_off sequence */
 10    35 	  2 red_ribbon_shift     aligned like c_chars,	/* red ribbon shift sequence */
 10    36 	  2 black_ribbon_shift   aligned like c_chars,	/* black ribbon shift sequence */
 10    37 	  2 end_of_page	     aligned like c_chars,	/* end-of-page warning sequence */
 10    38 	  2 escape_length	     fixed bin,		/* number of escape sequences */
 10    39 	  2 not_edited_escapes   (sc_escape_len refer (special_chars.escape_length)) like c_chars,
 10    40 						/* use in ^edited mode */
 10    41 	  2 edited_escapes	     (sc_escape_len refer (special_chars.escape_length)) like c_chars,
 10    42 						/* use in edited mode */
 10    43 	  2 input_escapes	     aligned,
 10    44 	    3 len		     fixed bin (8) unaligned, /* length of string */
 10    45 	    3 str		     char (sc_input_escape_len refer (special_chars.input_escapes.len)) unaligned,
 10    46 						/* escape sequence characters */
 10    47 	  2 input_results	     aligned,
 10    48 	    3 pad		     bit (9) unaligned,	/* so that strings will look the same */
 10    49 	    3 str		     char (sc_input_escape_len refer (special_chars.input_escapes.len)) unaligned;
 10    50 						/* results of escape sequences */
 10    51 
 10    52 
 10    53      dcl	c_chars_ptr	     ptr;
 10    54      dcl	1 c_chars		     based (c_chars_ptr) aligned,
 10    55 	  2 count		     fixed bin (8) unaligned,
 10    56 	  2 chars		     (15) char (1) unaligned;
 10    57 
 10    58      dcl	sc_escape_len	     fixed bin;		/* count of output escapes to allocate in special_chars  */
 10    59      dcl	sc_input_escape_len	     fixed bin;		/* count of input escapes to allocate in special_chars  */
 10    60 
 10    61 
 10    62      dcl	1 cv_trans	     based aligned,		/* conversion/translation table format */
 10    63 	  2 value		     (0:255) fixed bin (8) unal;
 10    64 
 10    65 
 10    66      dcl	1 delay		     based aligned,		/* delay counts for output */
 10    67 	  2 vert_nl	     fixed bin,
 10    68 	  2 horz_nl	     float bin,
 10    69 	  2 const_tab	     fixed bin,
 10    70 	  2 var_tab	     float bin,
 10    71 	  2 backspace	     fixed bin,
 10    72 	  2 vt_ff		     fixed bin;
 10    73 
 10    74 /* info structures used with orders */
 10    75 
 10    76      dcl	1 special_chars_struc    aligned based,
 10    77 	  2 version	     fixed bin,
 10    78 	  2 default	     fixed bin,		/* non-zero indicates use default */
 10    79 	  2 special_chars,				/* same as level-1 above */
 10    80 						/* has to be spelled out instead of using like */
 10    81 						/* because of refer options */
 10    82 	    3 nl_seq	     aligned like c_chars,	/* new-line sequence */
 10    83 	    3 cr_seq	     aligned like c_chars,	/* carriage-return sequence */
 10    84 	    3 bs_seq	     aligned like c_chars,	/* backspace sequence */
 10    85 	    3 tab_seq	     aligned like c_chars,	/* horizontal tab sequence */
 10    86 	    3 vt_seq	     aligned like c_chars,	/* vertical tab sequence */
 10    87 	    3 ff_seq	     aligned like c_chars,	/* form-feed sequence */
 10    88 	    3 printer_on	     aligned like c_chars,	/* printer-on sequence */
 10    89 	    3 printer_off	     aligned like c_chars,	/* printer_off sequence */
 10    90 	    3 red_ribbon_shift   aligned like c_chars,	/* red ribbon shift sequence */
 10    91 	    3 black_ribbon_shift aligned like c_chars,	/* black ribbon shift sequence */
 10    92 	    3 end_of_page	     aligned like c_chars,	/* end-of-page warning sequence */
 10    93 	    3 escape_length	     fixed bin,		/* number of escape sequences */
 10    94 	    3 not_edited_escapes (sc_escape_len refer (special_chars_struc.escape_length)) like c_chars,
 10    95 						/* use in ^edited mode */
 10    96 	    3 edited_escapes     (sc_escape_len refer (special_chars_struc.escape_length)) like c_chars,
 10    97 						/* use in edited mode */
 10    98 	    3 input_escapes	     aligned,
 10    99 	      4 len	     fixed bin (8) unaligned, /* length of string */
 10   100 	      4 str	     char (sc_input_escape_len refer (special_chars_struc.input_escapes.len)) unaligned,
 10   101 						/* escape sequence characters */
 10   102 	    3 input_results	     aligned,
 10   103 	      4 pad	     bit (9) unaligned,	/* so that strings will look the same */
 10   104 	      4 str	     char (sc_input_escape_len refer (special_chars_struc.input_escapes.len)) unaligned;
 10   105 						/* results of escape sequences */
 10   106 
 10   107      dcl	1 cv_trans_struc	     aligned based,		/* all conversion/translation tables */
 10   108 	  2 version	     fixed bin,
 10   109 	  2 default	     fixed bin,		/* as above */
 10   110 	  2 cv_trans	     like cv_trans;
 10   111 
 10   112      dcl	1 delay_struc	     aligned based,
 10   113 	  2 version	     fixed bin,
 10   114 	  2 default	     fixed bin,		/* as above */
 10   115 	  2 delay		     like delay;
 10   116 
 10   117      dcl	1 get_special_info_struc based aligned,		/* get_special order */
 10   118 	  2 version	     char (8),
 10   119 	  2 area_ptr	     pointer,
 10   120 	  2 table_ptr	     pointer;
 10   121 
 10   122      dcl	SPECIAL_INFO_STRUCT_VERSION_1
 10   123 			     char (8) int static options (constant) init ("sisv1000");
 10   124      dcl	SPECIAL_VERSION	     fixed bin int static options (constant) init (1);
 10   125      dcl	SPECIAL_VERSION_2	     fixed bin int static options (constant) init (2);
 10   126      dcl	DELAY_VERSION	     fixed bin int static options (constant) init (1);
 10   127      dcl	CV_TRANS_VERSION	     fixed bin int static options (constant) init (2);
 10   128 
 10   129      dcl	CV_TRANS_SIZE	     (2) fixed bin int static options (constant) init (127, 255);
 10   130 						/* indexed by version number */
 10   131 
 10   132 
 10   133 /* values for input and output conversion tables */
 10   134 
 10   135      dcl	(
 10   136 	INPUT_CONVERT_ORDINARY   init (0),
 10   137 	INPUT_CONVERT_BREAK	     init (1),
 10   138 	INPUT_CONVERT_ESCAPE     init (2),
 10   139 	INPUT_CONVERT_DISCARD    init (3),
 10   140 	INPUT_CONVERT_FORMFEED   init (4),
 10   141 	INPUT_CONVERT_PRECEDENCE_DISCARD
 10   142 			     init (5),
 10   143 	INPUT_CONVERT_DSA_CR_PROCESSING
 10   144 			     init (6)
 10   145 	)		     fixed bin (8) unaligned internal static options (constant);
 10   146 
 10   147      dcl	(
 10   148 	OUTPUT_CONVERT_ORDINARY  init (0),
 10   149 	OUTPUT_CONVERT_NEWLINE   init (1),
 10   150 	OUTPUT_CONVERT_CR	     init (2),
 10   151 	OUTPUT_CONVERT_HT	     init (3),
 10   152 	OUTPUT_CONVERT_BS	     init (4),
 10   153 	OUTPUT_CONVERT_VT	     init (5),
 10   154 	OUTPUT_CONVERT_FF	     init (6),
 10   155 	OUTPUT_CONVERT_OCTAL     init (7),
 10   156 	OUTPUT_CONVERT_RRS	     init (8),
 10   157 	OUTPUT_CONVERT_BRS	     init (9),
 10   158 	OUTPUT_CONVERT_NO_MOTION init (10),
 10   159 	OUTPUT_CONVERT_PRECEDENCE_NO_MOTION
 10   160 			     init (11),
 10   161 	OUTPUT_CONVERT_DONT_SEND init (12),
 10   162 	OUTPUT_CONVERT_NOT_USED_13
 10   163 			     init (13),
 10   164 	OUTPUT_CONVERT_NOT_USED_14
 10   165 			     init (14),
 10   166 	OUTPUT_CONVERT_NOT_USED_15
 10   167 			     init (15),
 10   168 	OUTPUT_CONVERT_NOT_USED_16
 10   169 			     init (16),
 10   170 	OUTPUT_CONVERT_FIRST_SPECIAL
 10   171 			     init (17)
 10   172 	)		     fixed bin (8) unaligned internal static options (constant);
 10   173 
 10   174 /*	END INCLUDE FILE ... tty_convert.incl.pl1 */
  9   232 
  9   233 
  9   234 /*  END OF:  ttt.incl.pl1				  *  *  *  *  *  */
      872 
      873 
 11     1 /* BEGIN INCLUDE FILE...  tty_video_tables.incl.pl1 */
 11     2 /* Created:  3 June 1979 by Bernard S. Greenberg */
 11     3 /* Modified: 9 June 1981 by G. Palter to switch to line/column orientation */
 11     4 
 11     5 /* Definition of the video operations supported by a terminal */
 11     6 
 11     7 dcl  tty_video_tables_version_1 fixed binary static options (constant) initial (1);
 11     8 
 11     9 dcl  ttyvtblp pointer;
 11    10 dcl  tty_video_table_video_chars_len fixed binary (21);
 11    11 
 11    12 dcl 1 tty_video_table aligned based (ttyvtblp),
 11    13       2 version fixed binary initial (tty_video_tables_version_1),
 11    14       2 screen_height fixed binary,			/* # of lines on screen */
 11    15       2 screen_line_length fixed binary,		/* # of characters on a line */
 11    16       2 scroll_count fixed binary,			/* # of lines scrolled by LF at bottom */
 11    17       2 flags,
 11    18         3 overstrike_available bit (1) unaligned,		/* ON => overstrike works */
 11    19         3 automatic_crlf bit (1) unaligned,		/* ON => automatically goes to next line from last column */
 11    20         3 simulate_eol bit (1) unaligned,		/* ON => program must simulate clear-to-end-of-line */
 11    21         3 pad bit (33) unaligned,
 11    22       2 video_chars_len fixed binary (21),		/* combined length of all sequences used */
 11    23       2 pad (2) bit (36),
 11    24       2 nseq fixed binary,				/* # of video sequences defined */
 11    25       2 sequences (N_VIDEO_SEQUENCES refer (tty_video_table.nseq)) like tty_video_seq aligned,
 11    26 						/* the control sequences */
 11    27       2 video_chars character (tty_video_table_video_chars_len refer (tty_video_table.video_chars_len)) unaligned;
 11    28 
 11    29 dcl  video_chars_ptr pointer;				/* -> tty_video_table.video_chars */
 11    30 dcl  video_chars character (tty_video_table.video_chars_len) based (video_chars_ptr);
 11    31 
 11    32 
 11    33 /* A single video sequence: it may contain encoded screen coordinates or a repeat counter */
 11    34 
 11    35 dcl  ttyvseqp pointer;
 11    36 
 11    37 dcl 1 tty_video_seq based (ttyvseqp) aligned,
 11    38       2 flags unaligned,				/* first 2 characters */
 11    39         3 present bit (1) unaligned,			/* ON => this feature is present */
 11    40         3 interpret bit (1) unaligned,			/* ON => sequence contains encoded coordinates/repeat count */
 11    41         3 able_to_repeat bit (1) unaligned,		/* ON => sequence contains a repeat count */
 11    42         3 cpad_present bit (1) unaligned,		/* ON => this operation must be padded */
 11    43         3 cpad_in_chars bit (1) unaligned,		/* ON => pad expressed in characters */
 11    44         3 pad bit (7) unaligned,
 11    45         3 general bit (6) unaligned,			/* reserved for per-operation flags */
 11    46       2 cpad fixed binary (18) unsigned unaligned,	/* padding in characters of .1 millisecond units */
 11    47       2 pad bit (15) unal,
 11    48       2 len fixed binary (9) unsigned unaligned,		/* # of valid characters in sequence */
 11    49       2 seq_index fixed binary (12) unsigned unaligned;	/* start of string in character data */
 11    50 
 11    51 
 11    52 /* Available operations */
 11    53 
 11    54 dcl (ABS_POS	initial (1),	CLEAR_SCREEN	initial (2),
 11    55      CLEAR_TO_EOS	initial (3),	HOME		initial (4),
 11    56      CLEAR_TO_EOL	initial (5),	CURSOR_UP		initial (6),
 11    57      CURSOR_RIGHT	initial (7),	CURSOR_DOWN	initial (8),
 11    58      CURSOR_LEFT	initial (9),	INSERT_CHARS	initial (10),
 11    59      END_INSERT_CHARS   /* if not present, insert-chars opens up N spaces */
 11    60 		initial (11),	DELETE_CHARS	initial (12),
 11    61      INSERT_LINES	initial (13),	DELETE_LINES	initial (14))
 11    62 	fixed binary static options (constant);
 11    63 
 11    64 dcl  N_VIDEO_SEQUENCES fixed binary static options (constant) initial (14);
 11    65 
 11    66 
 11    67 /* Encoding of special values (eg: coordinates or the repeat count) */
 11    68 
 11    69 dcl 1 tty_numeric_encoding based unaligned,
 11    70       2 flags,
 11    71         3 must_be_on bit (1) unaligned,			/* ON => an encoding; not a character */
 11    72         3 express_in_decimal bit (1) unaligned,		/* ON => express it as decimal digits */
 11    73         3 express_in_octal bit (1) unaligned,		/* ON => express it as octal digits; both OFF => in binary */
 11    74 
 11    75         3 offset_is_0 bit (1) unaligned,		/* ON => offset is not stored as it's zero */
 11    76       2 l_c_or_n fixed binary (2) unsigned unaligned,	/* 0 = line, 1= column, 2 = repeat-count */
 11    77       2 num_digits fixed bin (2) unsigned unaligned,	/* # of digits for decimal/octal; 0 => as many as needed */
 11    78       2 pad bit (1) unaligned,
 11    79       2 offset fixed bin (8) unaligned;			/* offset to add to the number */
 11    80 
 11    81 /* END INCLUDE FILE tty_video_tables.incl.pl1 */
      874 
      875 
      876      end ttt_info_;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    10/17/88  1024.2  ttt_info_.pl1                     >spec>install>MR12.2-1171>ttt_info_.pl1
857          1    04/11/85  1452.6  access_mode_values.incl.pl1       >ldd>include>access_mode_values.incl.pl1
859          2    09/09/75  2007.3  author_dcl.incl.pl1               >ldd>include>author_dcl.incl.pl1
2-10         3    04/21/82  1211.8  author.incl.pl1                   >ldd>include>author.incl.pl1
861          4    08/06/87  0912.7  dsatm_attn_fcn_info.incl.pl1      >ldd>include>dsatm_attn_fcn_info.incl.pl1
863          5    08/06/87  0913.4  dsatm_negotiate_info.incl.pl1     >ldd>include>dsatm_negotiate_info.incl.pl1
865          6    02/23/81  2146.3  function_key_data.incl.pl1        >ldd>include>function_key_data.incl.pl1
867          7    08/06/87  0913.5  terminal_type_data.incl.pl1       >ldd>include>terminal_type_data.incl.pl1
870          8    04/06/83  1239.4  terminate_file.incl.pl1           >ldd>include>terminate_file.incl.pl1
872          9    10/17/88  1024.0  ttt.incl.pl1                      >spec>install>MR12.2-1171>ttt.incl.pl1
9-232       10    10/17/88  1024.1  tty_convert.incl.pl1              >spec>install>MR12.2-1171>tty_convert.incl.pl1
874         11    08/11/81  1106.2  tty_video_tables.incl.pl1         >ldd>include>tty_video_tables.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
DSATM_DEVICE_RP                        constant        fixed bin(17,0)          initial dcl 9-118 ref 381 381 381
N_VIDEO_SEQUENCES                      constant        fixed bin(17,0)          initial dcl 11-64 ref 298 298 302
R_ACCESS                        000043 constant        bit(3)                   initial packed unaligned dcl 1-11 set ref 731* 817*
TERM_FILE_TERM                  000000 constant        bit(3)                   initial packed unaligned dcl 8-14 set ref 754* 791*
                                                                                  807*
TTT_version_4                   000051 constant        fixed bin(17,0)          initial dcl 9-30 set ref 740 742* 825
VIDEO_RP                               constant        fixed bin(17,0)          initial dcl 9-118 ref 282 284 295
ab                              000126 automatic       varying char(100)        dcl 84 set ref 531* 533 551 556 565 570 577 580 593
                                                                                  599 607 621 625
additional_info         112            based           structure                level 2 dcl 9-59
addr                                                   builtin function         dcl 152 ref 205 206 210 222 224 303 306 345 374 384
                                                                                  385 544 644 687 840
answerback_entry                       based           structure                level 1 dcl 9-214
answerback_entry_ptr            000336 automatic       pointer                  dcl 9-211 set ref 539* 543 544 642 644 656
answerback_offset        44            based           fixed bin(18,0)          level 2 dcl 9-34 ref 536
area                            000276 stack reference condition                dcl 147 ref 297 352 355 392
areap                           000256 automatic       pointer                  dcl 93 set ref 291* 292 292* 298 347* 349* 353 356
                                                                                  388* 389 389* 393
attention_fcn                          based           structure                level 1 dcl 4-42
author                                 based           structure                level 2 in structure "ttt" dcl 9-34 in procedure
                                                                                  "ttt_info_"
author                                 based           structure                level 2 in structure "author_dcl" dcl 2-9
                                                                                  in procedure "ttt_info_"
author_dcl                             based           structure                level 1 dcl 2-9
based_string                           based           char                     packed unaligned dcl 103 set ref 442 467 712 712 712
                                                                                  719* 723* 726*
baud                      1            based           fixed bin(17,0)          array level 3 dcl 9-127 ref 506 506
baud_rate                 1            based           fixed bin(17,0)          array level 3 dcl 9-202 ref 218 219
c_chars                                based           structure                level 1 dcl 10-54
capital_letters                 000013 constant        char(26)                 initial packed unaligned dcl 119 ref 531 565 593
char_time                       000260 automatic       float bin(27)            dcl 94 set ref 287* 289* 309 312
chars                     3            based           char(1)                  array level 3 packed packed unaligned dcl 9-214 set
                                                                                  ref 544
coded_type              134            based           fixed bin(17,0)          level 2 dcl 9-59 ref 670 688
collate                                                builtin function         dcl 152 ref 651
com_err_                        000056 constant        entry                    external dcl 165 ref 719 726 734 742 748
com_err_$suppress_name          000060 constant        entry                    external dcl 166 ref 706
conditional_printer_off
                        130(02)        based           bit(1)                   level 3 packed packed unaligned dcl 9-59 ref 484
cpad                      0(18)        based           fixed bin(18,0)          level 2 packed packed unsigned unaligned dcl 11-37
                                                                                  set ref 312* 312 315
cpad_in_chars             0(04)        based           bit(1)                   level 3 packed packed unaligned dcl 11-37 set ref
                                                                                  307 314* 315*
cpad_present              0(03)        based           bit(1)                   level 3 packed packed unaligned dcl 11-37 set ref
                                                                                  307 309* 315*
cu_$arg_count                   000050 constant        entry                    external dcl 162 ref 703
cu_$arg_ptr                     000046 constant        entry                    external dcl 161 ref 710
cv_trans                               based           structure                level 1 dcl 10-62
cv_trans_struc                         based           structure                level 1 dcl 10-107
def_string                2            based           structure                level 2 dcl 9-214
default_type_offset      43            based           fixed bin(18,0)          level 2 dcl 9-34 ref 501 503
defx                            000125 automatic       fixed bin(17,0)          dcl 83 set ref 543* 544 583* 583 611* 611*
delay                                  based           structure                level 1 dcl 10-66
delay_array               1            based           structure                array level 2 dcl 9-202
delay_ptr                24            based           pointer                  level 3 dcl 7-15 set ref 213* 222* 224* 226*
delay_rp                124            based           fixed bin(18,0)          level 3 dcl 9-59 set ref 213 216
delay_table                            based           structure                level 1 dcl 9-202
delay_tablep                    000334 automatic       pointer                  dcl 9-200 set ref 216* 218 218 219 222 222 224
dft_count                              based           fixed bin(17,0)          level 2 dcl 9-127 ref 506 511
dftt                                   based           structure                level 1 dcl 9-127
dftte                     1            based           structure                array level 2 dcl 9-127
dfttp                           000330 automatic       pointer                  dcl 9-125 set ref 503* 506 506 506 506 506 511 511
digits                          000001 constant        char(10)                 initial packed unaligned dcl 121 ref 570 599
dname                           000166 automatic       char(168)                packed unaligned dcl 89 set ref 715* 723* 731* 734*
                                                                                  742* 748* 757
dsatm_data_$device_multics_dft  000012 external static fixed bin(17,0)          dcl 126 set ref 374 384 385
dsatm_device                           based           structure                level 1 dcl 5-136 set ref 393 395* 395
dsatm_network                          based           structure                level 1 dcl 5-195
dsatm_presentation                     based           structure                level 1 dcl 5-75
dsatm_station                          based           structure                level 1 dcl 5-113
dsatmdevp                       000312 automatic       pointer                  dcl 5-134 set ref 374* 381* 384* 385* 395
ec                              000250 automatic       fixed bin(35,0)          dcl 91 set ref 723* 724 726* 731* 734* 817*
editing_chars           127            based           structure                level 2 in structure "tte" dcl 9-59 in procedure
                                                                                  "ttt_info_"
editing_chars            26            based           structure                level 2 in structure "terminal_type_data" packed
                                                                                  packed unaligned dcl 7-15 in procedure "ttt_info_"
ename                           000240 automatic       char(32)                 packed unaligned dcl 90 set ref 716* 723* 731* 734*
                                                                                  742* 748* 758
erase                    26            based           char(1)                  level 3 in structure "terminal_type_data" packed
                                                                                  packed unaligned dcl 7-15 in procedure "ttt_info_"
                                                                                  set ref 230*
erase                   127            based           char(1)                  level 3 in structure "tte" packed packed unaligned
                                                                                  dcl 9-59 in procedure "ttt_info_" ref 230
error_table_$badopt             000036 external static fixed bin(35,0)          dcl 129 set ref 719*
error_table_$improper_data_format
                                000032 external static fixed bin(35,0)          dcl 129 set ref 634 748*
error_table_$incompatible_term_type
                                000024 external static fixed bin(35,0)          dcl 129 ref 187
error_table_$invalid_line_type  000022 external static fixed bin(35,0)          dcl 129 ref 182 522
error_table_$invalid_preaccess_command
                                000034 external static fixed bin(35,0)          dcl 129 ref 418
error_table_$no_table           000016 external static fixed bin(35,0)          dcl 129 ref 278 340
error_table_$no_term_type       000020 external static fixed bin(35,0)          dcl 129 ref 845
error_table_$noalloc            000014 external static fixed bin(35,0)          dcl 129 ref 852
error_table_$smallarg           000030 external static fixed bin(35,0)          dcl 129 ref 260 443 468
error_table_$unimplemented_version
                                000026 external static fixed bin(35,0)          dcl 129 set ref 198 742* 828
error_table_$wrong_no_of_args   000040 external static fixed bin(35,0)          dcl 129 set ref 706*
expand_pathname_                000052 constant        entry                    external dcl 163 ref 723
extended_tables                        based           structure                level 1 dcl 9-114
extended_tables_rp      137            based           fixed bin(18,0)          level 2 dcl 9-59 ref 274 281 374 379
extended_tablesp                000326 automatic       pointer                  dcl 9-112 set ref 281* 282 284 295 379* 381 381 381
fkey_data                10            based           structure                level 2 dcl 9-177 set ref 345
fkey_rp                 123            based           fixed bin(18,0)          level 3 dcl 9-59 set ref 337 344
fkey_table                             based           structure                level 1 dcl 9-177
fkey_tablep                     000332 automatic       pointer                  dcl 9-175 set ref 344* 345 357
flags                   130            based           structure                level 2 in structure "tte" dcl 9-59 in procedure
                                                                                  "ttt_info_"
flags                                  based           structure                level 2 in structure "tty_video_seq" packed packed
                                                                                  unaligned dcl 11-37 in procedure "ttt_info_"
flags                    27            based           structure                level 2 in structure "terminal_type_data" packed
                                                                                  packed unaligned dcl 7-15 in procedure "ttt_info_"
                                                                                  set ref 233*
float                                                  builtin function         dcl 152 ref 287 312
flow_control_chars       30            based           structure                level 2 in structure "terminal_type_data" packed
                                                                                  packed unaligned dcl 7-15 in procedure "ttt_info_"
                                                                                  set ref 239*
flow_control_chars      135            based           structure                level 2 in structure "tte" packed packed unaligned
                                                                                  dcl 9-59 in procedure "ttt_info_" ref 239
framing_chars           127(18)        based           structure                level 3 in structure "tte" packed packed unaligned
                                                                                  dcl 9-59 in procedure "ttt_info_" ref 232
framing_chars            26(18)        based           structure                level 2 in structure "terminal_type_data" packed
                                                                                  packed unaligned dcl 7-15 in procedure "ttt_info_"
                                                                                  set ref 232*
function_key_data                      based           structure                level 1 dcl 6-7 set ref 353 354* 354
function_key_data_highest       000316 automatic       fixed bin(17,0)          dcl 6-35 set ref 351* 353 353
function_key_data_ptr           000314 automatic       pointer                  dcl 6-34 set ref 345* 351 354 356 356 359 359
function_key_seqs                      based           char                     packed unaligned dcl 6-32 set ref 356 359* 359
get_system_free_area_           000062 constant        entry                    external dcl 167 ref 292 347 389
highest                   1            based           fixed bin(17,0)          level 2 dcl 6-7 set ref 351 353* 354
i                               000112 automatic       fixed bin(17,0)          dcl 77 set ref 207* 208 208 210 210* 218* 218* 219
                                                                                  219* 222 222 302* 303 306* 411* 413* 415* 422 424
                                                                                  506* 506 506 506 506* 511 511 593* 594 599* 600
                                                                                  604 607* 608 610 686* 687* 703* 704
index                                                  builtin function         dcl 152 ref 565 570 607
initial_string          110            based           structure                level 2 dcl 9-59
initiate_file_                  000042 constant        entry                    external dcl 158 ref 731 817
input_timeout           130(03)        based           bit(1)                   level 3 in structure "tte" packed packed unaligned
                                                                                  dcl 9-59 in procedure "ttt_info_" ref 241
input_timeout            27(01)        based           bit(1)                   level 3 in structure "terminal_type_data" packed
                                                                                  packed unaligned dcl 7-15 in procedure "ttt_info_"
                                                                                  set ref 241*
ioa_                            000054 constant        entry                    external dcl 164 ref 767
j                               000113 automatic       fixed bin(17,0)          dcl 77 set ref 217* 219* 224 224
key                             000162 automatic       char(1)                  dcl 86 in procedure "ttt_info_" set ref 545* 548 559
                                                                                  587 615
key                                    based           char(1)                  level 2 in structure "term" packed packed unaligned
                                                                                  dcl 106 in procedure "ttt_info_" ref 545
key_info                               based           structure                level 1 packed packed unaligned dcl 6-28
keyboard_addressing     130            based           bit(1)                   level 3 packed packed unaligned dcl 9-59 ref 234
keyboard_locking         27            based           bit(1)                   level 3 packed packed unaligned dcl 7-15 set ref
                                                                                  234*
kill                    127(09)        based           char(1)                  level 3 in structure "tte" packed packed unaligned
                                                                                  dcl 9-59 in procedure "ttt_info_" ref 231
kill                     26(09)        based           char(1)                  level 3 in structure "terminal_type_data" packed
                                                                                  packed unaligned dcl 7-15 in procedure "ttt_info_"
                                                                                  set ref 231*
last_install_time        12            based           fixed bin(71,0)          level 3 dcl 9-34 ref 779 831
length                  113            based           fixed bin(17,0)          level 3 in structure "tte" dcl 9-59 in procedure
                                                                                  "ttt_info_" ref 466
length                                                 builtin function         dcl 152 in procedure "ttt_info_" ref 260 260 443 468
                                                                                  533 551 556 577 621 625
length                    2            based           fixed bin(17,0)          level 3 in structure "answerback_entry" dcl 9-214
                                                                                  in procedure "ttt_info_" ref 543
length                  111            based           fixed bin(17,0)          level 3 in structure "tte" dcl 9-59 in procedure
                                                                                  "ttt_info_" ref 441
line_delimiter           27(18)        based           char(1)                  level 2 in structure "terminal_type_data" packed
                                                                                  packed unaligned dcl 7-15 in procedure "ttt_info_"
                                                                                  set ref 235*
line_delimiter          133(18)        based           char(1)                  level 2 in structure "tte" packed packed unaligned
                                                                                  dcl 9-59 in procedure "ttt_info_" ref 235
line_type                 2            based           fixed bin(17,0)          array level 3 dcl 9-127 ref 506 506
line_types              125            based           bit(72)                  level 2 dcl 9-59 ref 185 645
min                                                    builtin function         dcl 152 ref 302
modes                    10            based           char(256)                level 2 dcl 9-59 ref 259 260
my_name                         000102 automatic       char(32)                 packed unaligned dcl 76 set ref 702* 706* 719* 726*
                                                                                  734* 742* 748*
n_bauds                                based           fixed bin(17,0)          level 2 dcl 9-202 ref 218 222
n_tt_entries             36            based           fixed bin(17,0)          level 2 dcl 9-34 ref 686 746 746 839
name                      2            based           char(32)                 level 2 in structure "terminal_type_data" packed
                                                                                  packed unaligned dcl 7-15 in procedure "ttt_info_"
                                                                                  set ref 203*
name                                   based           char(32)                 level 2 in structure "tte" packed packed unaligned
                                                                                  dcl 9-59 in procedure "ttt_info_" ref 203 648 690
                                                                                  841
name                     52            based           char(32)                 array level 3 in structure "ttt" packed packed
                                                                                  unaligned dcl 9-34 in procedure "ttt_info_" set
                                                                                  ref 424 511
next                                   based           fixed bin(18,0)          level 2 dcl 9-214 ref 656
next_offset                     000123 automatic       fixed bin(18,0)          dcl 82 set ref 536* 536* 539*
nseq                     10            based           fixed bin(17,0)          level 2 dcl 11-12 set ref 298* 299 302
ntables                                based           fixed bin(17,0)          level 2 dcl 9-114 ref 282 381
null                                                   builtin function         dcl 152 ref 193 208 213 226 276 292 339 347 389 732
                                                                                  754 779 788 792 805 808 815 818 827 853
offset                  112            based           fixed bin(18,0)          level 3 in structure "tte" dcl 9-59 in procedure
                                                                                  "ttt_info_" ref 462 465
offset                  110            based           fixed bin(18,0)          level 3 in structure "tte" dcl 9-59 in procedure
                                                                                  "ttt_info_" ref 437 440
old_type                  1            based           fixed bin(17,0)          level 2 in structure "terminal_type_data" dcl 7-15
                                                                                  in procedure "ttt_info_" set ref 202*
old_type                131            based           fixed bin(17,0)          level 2 in structure "tte" dcl 9-59 in procedure
                                                                                  "ttt_info_" ref 202
out_of_bounds                   000304 stack reference condition                dcl 148 ref 173 254 269 332 369 407 432 457 478 496
                                                                                  527 665 682 795
output_block_acknowledge
                         27(02)        based           bit(1)                   level 3 in structure "terminal_type_data" packed
                                                                                  packed unaligned dcl 7-15 in procedure "ttt_info_"
                                                                                  set ref 242*
output_block_acknowledge
                        130(04)        based           bit(1)                   level 3 in structure "tte" packed packed unaligned
                                                                                  dcl 9-59 in procedure "ttt_info_" ref 242
output_buffer_size       31            based           fixed bin(17,0)          level 2 in structure "terminal_type_data" dcl 7-15
                                                                                  in procedure "ttt_info_" set ref 240*
output_buffer_size      136            based           fixed bin(17,0)          level 2 in structure "tte" dcl 9-59 in procedure
                                                                                  "ttt_info_" ref 240
p                               000262 automatic       pointer                  dcl 95 set ref 298* 299 300 393* 395 396 397
pm_additional_info                     parameter       varying char             dcl 59 set ref 453 462* 467* 468
pm_answerback                          parameter       char                     packed unaligned dcl 60 ref 516 531 619 627
pm_areap                               parameter       pointer                  dcl 70 ref 265 291 328 347 349 365 388
pm_baud                                parameter       fixed bin(17,0)          dcl 54 ref 169 218 265 287 287 492 506
pm_code                                parameter       fixed bin(35,0)          dcl 56 set ref 169 182* 187* 198* 250 260* 265 278*
                                                                                  328 340* 343* 365 403 418* 428 443* 453 468* 474
                                                                                  492 516 522* 634* 661 678 823* 828* 845* 852*
pm_coded_type                          parameter       fixed bin(17,0)          dcl 65 set ref 661 670* 678 688
pm_command_name                        parameter       char                     packed unaligned dcl 64 ref 403 411 413 415
pm_cpo_flag                            parameter       bit(1)                   packed unaligned dcl 63 set ref 474 484*
pm_dname                               parameter       char                     packed unaligned dcl 66 set ref 771 774*
pm_dsatmdevp                           parameter       pointer                  dcl 69 set ref 365 397*
pm_ename                               parameter       char                     packed unaligned dcl 67 set ref 771 775*
pm_function_key_data_ptr               parameter       pointer                  dcl 71 set ref 328 339* 353* 354 356 358
pm_id                                  parameter       char(4)                  packed unaligned dcl 61 set ref 516 519* 651*
pm_initial_string                      parameter       varying char             dcl 58 set ref 428 437* 442* 443
pm_line_type                           parameter       fixed bin(17,0)          dcl 53 ref 169 178 180 185 492 506 516 520 645 645
pm_modes                               parameter       char                     packed unaligned dcl 57 set ref 250 259* 260
pm_ppm_flag                            parameter       bit(1)                   packed unaligned dcl 62 set ref 474 483*
pm_tt_name                             parameter       char                     packed unaligned dcl 52 set ref 169 250 265 328 365
                                                                                  396 403 422* 424* 428 453 474 492 500* 511* 516
                                                                                  519* 648* 661 678 690* 695* 841
pm_ttd_ptr                             parameter       pointer                  dcl 55 ref 169 192
pm_ttyvtblp                            parameter       pointer                  dcl 68 set ref 265 276* 321*
present                                based           bit(1)                   level 3 packed packed unaligned dcl 11-37 ref 304
print_preaccess_message
                        130(01)        based           bit(1)                   level 3 packed packed unaligned dcl 9-59 ref 483
protocol                 32            based           fixed bin(17,0)          level 2 in structure "terminal_type_data" dcl 7-15
                                                                                  in procedure "ttt_info_" set ref 245*
protocol                140            based           fixed bin(17,0)          level 2 in structure "tte" dcl 9-59 in procedure
                                                                                  "ttt_info_" ref 245
ptr                                                    builtin function         dcl 152 ref 210 216 281 295 344 357 379 381 440 465
                                                                                  503 539
re_init_label                   000252 automatic       label variable           dcl 92 set ref 172* 253* 268* 331* 368* 406* 431*
                                                                                  456* 477* 495* 526* 664* 681* 779 796
rtrim                                                  builtin function         dcl 152 ref 260
save_id                         000164 automatic       varying char(4)          dcl 88 set ref 541* 619* 627* 651
saved_dname               2     000010 external static char(168)                initial level 2 packed packed unaligned dcl 114 set
                                                                                  ref 757* 767* 774 817*
saved_ename              54     000010 external static char(32)                 initial level 2 packed packed unaligned dcl 114 set
                                                                                  ref 758* 767* 775 817*
saved_install_time              000100 automatic       fixed bin(71,0)          dcl 75 set ref 779 831*
saved_tttp                      000010 external static pointer                  initial level 2 dcl 114 set ref 754 754* 756* 788
                                                                                  791* 792* 805 807* 808* 815 817* 818 822 827*
scanx                           000124 automatic       fixed bin(17,0)          dcl 83 set ref 540* 550* 550 551 551 556 565 570
                                                                                  574* 574 577 580 582* 582 593 599 604* 604 607
                                                                                  610* 610 619 621* 625 627 628* 628
search                                                 builtin function         dcl 152 ref 593 599
seg_fault_error                 000270 stack reference condition                dcl 146 ref 173 254 269 332 369 407 432 457 478 496
                                                                                  527 665 682 795
seq_len                   4            based           fixed bin(21,0)          level 3 dcl 6-7 set ref 356 356 359 359
seq_offset               12            based           fixed bin(18,0)          level 4 dcl 9-177 set ref 357
seq_ptr                   2            based           pointer                  level 3 dcl 6-7 set ref 356* 358
sequence                  2            based           structure                level 2 in structure "function_key_data" dcl 6-7
                                                                                  in procedure "ttt_info_"
sequence                 12            based           structure                level 3 in structure "fkey_table" dcl 9-177
                                                                                  in procedure "ttt_info_"
sequences                11            based           structure                array level 2 dcl 11-12 set ref 303 306
small_letters                   000004 constant        char(26)                 initial packed unaligned dcl 120 ref 531
sourcep                         000264 automatic       pointer                  dcl 96 set ref 357* 359
string                    0(18)        based           char                     level 2 in structure "term" packed packed unaligned
                                                                                  dcl 106 in procedure "ttt_info_" ref 580 607
string                                                 builtin function         dcl 152 in procedure "ttt_info_" set ref 232* 232
                                                                                  233* 239* 239
stringl                         000122 automatic       fixed bin(21,0)          dcl 81 set ref 441* 442 443 466* 467 468 710* 712
                                                                                  712 712 719 719 723 723 726 726
stringp                         000120 automatic       pointer                  dcl 80 set ref 440* 442 465* 467 710* 712 712 712
                                                                                  719 723 726
substr                                                 builtin function         dcl 152 ref 185 565 570 580 593 599 607 619 627 645
                                                                                  651 712
table                    11            based           structure                level 2 dcl 9-137 set ref 210
table_entry                            based           structure                level 1 dcl 9-137
tables                  116            based           structure                level 2 in structure "tte" dcl 9-59 in procedure
                                                                                  "ttt_info_" set ref 205
tables                   12            based           structure                level 2 in structure "terminal_type_data" dcl 7-15
                                                                                  in procedure "ttt_info_" set ref 206
tables_rp                 1            based           fixed bin(18,0)          array level 2 dcl 9-114 ref 284 295 381 381
targetp                         000266 automatic       pointer                  dcl 97 set ref 358* 359
template                               based           structure                level 1 packed packed unaligned dcl 9-196
term                                   based           structure                level 1 packed packed unaligned dcl 106
term_type_index           1            based           fixed bin(17,0)          level 2 in structure "answerback_entry" dcl 9-214
                                                                                  in procedure "ttt_info_" ref 642 644
term_type_index           3            based           fixed bin(17,0)          array level 3 in structure "dftt" dcl 9-127
                                                                                  in procedure "ttt_info_" ref 511
terminal_type           120            based           varying char(12)         level 2 dcl 5-136 set ref 396*
terminal_type_data                     based           structure                level 1 dcl 7-15
terminate_file_                 000044 constant        entry                    external dcl 159 ref 754 791 807
termp                           000160 automatic       pointer                  dcl 85 set ref 544* 545 546 580 607
total_ttt_size           45            based           fixed bin(18,0)          level 2 dcl 9-34 ref 746
translate                                              builtin function         dcl 152 ref 531 651
tt_entries               52            based           structure                array level 2 dcl 9-34 set ref 644 687 840
ttd_table_array_ptr             000116 automatic       pointer                  dcl 78 set ref 206* 208 210
ttd_table_ptr                          based           pointer                  array dcl 102 set ref 208* 210*
ttd_version_2                          constant        fixed bin(17,0)          initial dcl 868 ref 237
ttd_version_3                          constant        fixed bin(17,0)          initial dcl 7-54 ref 196 245
ttdp                            000320 automatic       pointer                  dcl 7-53 set ref 192* 193 196 196 202 203 206 213
                                                                                  222 224 226 230 231 232 233 234 235 237 239 240
                                                                                  241 242 245 245
tte                                    based           structure                level 1 dcl 9-59
tte_table_array_ptr             000114 automatic       pointer                  dcl 78 set ref 205* 208 210
tte_table_rp                           based           fixed bin(18,0)          array dcl 101 ref 208 210
ttep                            000324 automatic       pointer                  dcl 9-57 set ref 185 202 203 205 213 216 230 231 232
                                                                                  234 235 239 240 241 242 245 259 260 274 281 337
                                                                                  344 374 379 437 440 441 462 465 466 483 484 644*
                                                                                  645 648 670 687* 688 690 840* 841
ttex                            000406 automatic       fixed bin(17,0)          dcl 837 set ref 839* 840*
ttt                                    based           structure                level 1 dcl 9-34
ttt_info_data_                  000010 external static structure                level 1 dcl 114
tttp                            000322 automatic       pointer                  dcl 9-32 set ref 210 216 281 295 344 357 379 381 411
                                                                                  413 415 424 440 465 501 503 503 511 536 539 644
                                                                                  686 687 731* 732 740 742 746 746 746 756 779 779
                                                                                  822* 825 831 839 840 853*
tty_video_seq                          based           structure                level 1 dcl 11-37
tty_video_table                        based           structure                level 1 dcl 11-12 set ref 298 299* 299
tty_video_table_video_chars_len 000342 automatic       fixed bin(21,0)          dcl 11-10 set ref 296* 298 298
tty_video_tables_version_1             internal static fixed bin(17,0)          initial dcl 11-7 ref 11-12
ttyvseqp                        000344 automatic       pointer                  dcl 11-35 set ref 303* 304 306* 307 307 309 312 312
                                                                                  314 315 315 315
ttyvtblp                        000340 automatic       pointer                  dcl 11-9 set ref 295* 296 299 300* 302 303 306 321
type_029                 50            based           fixed bin(17,0)          level 2 dcl 9-34 ref 415
type_963                 47            based           fixed bin(17,0)          level 2 dcl 9-34 ref 413
type_map                 46            based           fixed bin(17,0)          level 2 dcl 9-34 ref 411
user_area                              based           area(1024)               dcl 104 ref 298 353 356 393
value                     0(09)        based           fixed bin(8,0)           level 2 in structure "term" packed packed unaligned
                                                                                  dcl 106 in procedure "ttt_info_" ref 546 580 607
value                           000163 automatic       fixed bin(17,0)          dcl 87 in procedure "ttt_info_" set ref 546* 550 561
                                                                                  563 568 577 580 582 583 589 591 597 610 611 617
                                                                                  623 623 625 627 628
version                                based           fixed bin(17,0)          initial level 2 in structure "tty_video_table"
                                                                                  dcl 11-12 in procedure "ttt_info_" set ref 298*
version                                based           fixed bin(17,0)          level 2 in structure "terminal_type_data" dcl 7-15
                                                                                  in procedure "ttt_info_" ref 196 196 237 245
version                  35            based           fixed bin(17,0)          level 2 in structure "ttt" dcl 9-34 in procedure
                                                                                  "ttt_info_" set ref 740 742* 825
version                   2            based           fixed bin(17,0)          array level 3 in structure "delay_table" dcl 9-202
                                                                                  in procedure "ttt_info_" set ref 222 224
video_chars_len           5            based           fixed bin(21,0)          level 2 dcl 11-12 set ref 296 298* 299

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ABS_POS                                internal static fixed bin(17,0)          initial dcl 11-54
AC_ATT1                                internal static fixed bin(17,0)          initial dcl 4-60
AC_ATT2                                internal static fixed bin(17,0)          initial dcl 4-61
AC_ATTD                                internal static fixed bin(17,0)          initial dcl 4-59
AI_BREAK                               internal static fixed bin(17,0)          initial dcl 4-67
AI_FCN_KEY                             internal static fixed bin(17,0)          initial dcl 4-66
AI_SEC_DIALOG                          internal static fixed bin(17,0)          initial dcl 4-68
AI_STRING                              internal static fixed bin(17,0)          initial dcl 4-65
ATTENTION_FCN_INFO_V1                  internal static char(8)                  initial packed unaligned dcl 4-71
AT_DESTRUCTIVE                         internal static fixed bin(17,0)          initial dcl 4-54
AT_NON_DESTRUCTIVE                     internal static fixed bin(17,0)          initial dcl 4-55
AU_ACKNOWLEDGMENT_UNIT                 internal static fixed bin(17,0)          initial dcl 5-443
AU_END_OF_INTERACTION_UNIT             internal static fixed bin(17,0)          initial dcl 5-440
AU_END_OF_QUARANTINE_UNIT              internal static fixed bin(17,0)          initial dcl 5-439
AU_END_OF_RECORD                       internal static fixed bin(17,0)          initial dcl 5-438
AU_END_OF_SESSION                      internal static fixed bin(17,0)          initial dcl 5-441
AU_NAME                                internal static char(16)                 initial array packed unaligned dcl 5-447
AU_REPORT_UNIT                         internal static fixed bin(17,0)          initial dcl 5-442
AU_RFU                                 internal static fixed bin(17,0)          initial dcl 5-445
AU_USER_DEFINED_UNIT                   internal static fixed bin(17,0)          initial dcl 5-444
AU_VALUE                               internal static bit(8)                   initial array packed unaligned dcl 5-451
A_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 1-11
A_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 1-36
CA_NAME                                internal static char(16)                 initial array packed unaligned dcl 5-313
CA_NO_COMPRESSION                      internal static fixed bin(17,0)          initial dcl 5-311
CA_VALUE                               internal static fixed bin(8,0)           initial array unsigned dcl 5-316
CE_BINARY_8BITS                        internal static fixed bin(17,0)          initial dcl 5-256
CE_EBCDIC                              internal static fixed bin(17,0)          initial dcl 5-254
CE_ISO_7BITS                           internal static fixed bin(17,0)          initial dcl 5-252
CE_ISO_8BITS                           internal static fixed bin(17,0)          initial dcl 5-253
CE_NAME                                internal static char(12)                 initial array packed unaligned dcl 5-258
CE_TELETEX                             internal static fixed bin(17,0)          initial dcl 5-255
CE_VALUE                               internal static fixed bin(8,0)           initial array unsigned dcl 5-262
CF_ANY                                 internal static fixed bin(17,0)          initial dcl 5-480
CF_ELITE                               internal static fixed bin(17,0)          initial dcl 5-482
CF_ITALICS                             internal static fixed bin(17,0)          initial dcl 5-481
CF_NAME                                internal static char(9)                  initial array packed unaligned dcl 5-485
CF_PICA                                internal static fixed bin(17,0)          initial dcl 5-483
CF_VALUE                               internal static fixed bin(8,0)           initial array unsigned dcl 5-488
CLEAR_SCREEN                           internal static fixed bin(17,0)          initial dcl 11-54
CLEAR_TO_EOL                           internal static fixed bin(17,0)          initial dcl 11-54
CLEAR_TO_EOS                           internal static fixed bin(17,0)          initial dcl 11-54
CONV_TYPE                              internal static fixed bin(17,0)          initial dcl 9-221
CP_NAME                                internal static char(12)                 initial array packed unaligned dcl 5-351
CP_NO_CONTROL                          internal static fixed bin(17,0)          initial dcl 5-349
CP_STANDARD                            internal static fixed bin(17,0)          initial dcl 5-348
CP_VALUE                               internal static bit(8)                   initial array packed unaligned dcl 5-354
CSS_NAME                               internal static char(16)                 initial array packed unaligned dcl 5-295
CSS_UPPER_CASE                         internal static fixed bin(17,0)          initial dcl 5-292
CSS_UPPER_LOWER_CASE                   internal static fixed bin(17,0)          initial dcl 5-293
CSS_VALUE                              internal static fixed bin(8,0)           initial array unsigned dcl 5-298
CS_ASCII                               internal static fixed bin(17,0)          initial dcl 5-268
CS_FRENCH                              internal static fixed bin(17,0)          initial dcl 5-273
CS_GERMAN                              internal static fixed bin(17,0)          initial dcl 5-276
CS_GREEK                               internal static fixed bin(17,0)          initial dcl 5-274
CS_ISO                                 internal static fixed bin(17,0)          initial dcl 5-267
CS_NAME                                internal static char(16)                 initial array packed unaligned dcl 5-279
CS_NORWEGIAN_DANISH                    internal static fixed bin(17,0)          initial dcl 5-270
CS_PORTUGUESE                          internal static fixed bin(17,0)          initial dcl 5-272
CS_PSEUDO_GRAPHIC                      internal static fixed bin(17,0)          initial dcl 5-277
CS_SPANISH                             internal static fixed bin(17,0)          initial dcl 5-275
CS_SWEDISH_FINISH                      internal static fixed bin(17,0)          initial dcl 5-271
CS_UK                                  internal static fixed bin(17,0)          initial dcl 5-269
CS_VALUE                               internal static bit(8)                   initial array packed unaligned dcl 5-283
CURSOR_DOWN                            internal static fixed bin(17,0)          initial dcl 11-54
CURSOR_LEFT                            internal static fixed bin(17,0)          initial dcl 11-54
CURSOR_RIGHT                           internal static fixed bin(17,0)          initial dcl 11-54
CURSOR_UP                              internal static fixed bin(17,0)          initial dcl 11-54
CV_TRANS_SIZE                          internal static fixed bin(17,0)          initial array dcl 10-129
CV_TRANS_VERSION                       internal static fixed bin(17,0)          initial dcl 10-127
DELAY_VERSION                          internal static fixed bin(17,0)          initial dcl 10-126
DELETE_CHARS                           internal static fixed bin(17,0)          initial dcl 11-54
DELETE_LINES                           internal static fixed bin(17,0)          initial dcl 11-54
DIR_ACCESS_MODE_NAMES                  internal static char(4)                  initial array packed unaligned dcl 1-33
DPP_NAME                               internal static char(12)                 initial array packed unaligned dcl 5-363
DPP_REAL                               internal static fixed bin(17,0)          initial dcl 5-360
DPP_SDP                                internal static fixed bin(17,0)          initial dcl 5-359
DPP_TRANSPARENT                        internal static fixed bin(17,0)          initial dcl 5-361
DPP_VALUE                              internal static fixed bin(8,0)           initial array unsigned dcl 5-366
DSATM_NEG_INFO_V1                      internal static char(8)                  initial packed unaligned dcl 5-206
DSATM_SW_DEV_INFO_V1                   internal static char(8)                  initial packed unaligned dcl 5-243
DT_BADGE_READER                        internal static fixed bin(17,0)          initial dcl 5-409
DT_CARD_PUNCH                          internal static fixed bin(17,0)          initial dcl 5-413
DT_CARD_READER                         internal static fixed bin(17,0)          initial dcl 5-407
DT_CASSETTE                            internal static fixed bin(17,0)          initial dcl 5-411
DT_DISKETTE                            internal static fixed bin(17,0)          initial dcl 5-412
DT_DISPLAY                             internal static fixed bin(17,0)          initial dcl 5-402
DT_KEYBOARD                            internal static fixed bin(17,0)          initial dcl 5-403
DT_KEYBOARD_DISPLAY                    internal static fixed bin(17,0)          initial dcl 5-406
DT_KEYBOARD_PRINTER                    internal static fixed bin(17,0)          initial dcl 5-405
DT_NAME                                internal static char(20)                 initial array packed unaligned dcl 5-417
DT_PAPER_TAPE_PUNCH                    internal static fixed bin(17,0)          initial dcl 5-414
DT_PAPER_TAPE_READER                   internal static fixed bin(17,0)          initial dcl 5-408
DT_RFE                                 internal static fixed bin(17,0)          initial dcl 5-410
DT_RO_PRINTER                          internal static fixed bin(17,0)          initial dcl 5-404
DT_UNDEFINED                           internal static fixed bin(17,0)          initial dcl 5-401
DT_VALUE                               internal static fixed bin(8,0)           initial array unsigned dcl 5-422
EAL_DATA_ACK                           internal static fixed bin(17,0)          initial dcl 5-494
EAL_FCN_COMPLETE                       internal static fixed bin(17,0)          initial dcl 5-495
EAL_IO_TM                              internal static fixed bin(17,0)          initial dcl 5-493
EAL_NAME                               internal static char(12)                 initial array packed unaligned dcl 5-498
EAL_RFU                                internal static fixed bin(17,0)          initial dcl 5-496
EAL_VALUE                              internal static fixed bin(16,0)          initial array unsigned dcl 5-501
END_INSERT_CHARS                       internal static fixed bin(17,0)          initial dcl 11-54
E_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 1-11
E_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 1-36
FKEY_TYPE                              internal static fixed bin(17,0)          initial dcl 9-224
FUNCTION_KEY_RP                        internal static fixed bin(17,0)          initial dcl 9-118
HOME                                   internal static fixed bin(17,0)          initial dcl 11-54
IA_ACCEPTOR                            internal static fixed bin(17,0)          initial dcl 5-339
IA_INITIATOR                           internal static fixed bin(17,0)          initial dcl 5-338
IA_NAME                                internal static char(12)                 initial array packed unaligned dcl 5-341
IA_VALUE                               internal static fixed bin(8,0)           initial array unsigned dcl 5-343
INPUT_CONVERT_BREAK                    internal static fixed bin(8,0)           initial packed unaligned dcl 10-135
INPUT_CONVERT_DISCARD                  internal static fixed bin(8,0)           initial packed unaligned dcl 10-135
INPUT_CONVERT_DSA_CR_PROCESSING        internal static fixed bin(8,0)           initial packed unaligned dcl 10-135
INPUT_CONVERT_ESCAPE                   internal static fixed bin(8,0)           initial packed unaligned dcl 10-135
INPUT_CONVERT_FORMFEED                 internal static fixed bin(8,0)           initial packed unaligned dcl 10-135
INPUT_CONVERT_ORDINARY                 internal static fixed bin(8,0)           initial packed unaligned dcl 10-135
INPUT_CONVERT_PRECEDENCE_DISCARD       internal static fixed bin(8,0)           initial packed unaligned dcl 10-135
INSERT_CHARS                           internal static fixed bin(17,0)          initial dcl 11-54
INSERT_LINES                           internal static fixed bin(17,0)          initial dcl 11-54
KEY_CTRL                               internal static fixed bin(17,0)          initial dcl 6-22
KEY_CTRL_AND_SHIFT                     internal static fixed bin(17,0)          initial dcl 6-22
KEY_PLAIN                              internal static fixed bin(17,0)          initial dcl 6-22
KEY_SHIFT                              internal static fixed bin(17,0)          initial dcl 6-22
LO_FOLDING                             internal static fixed bin(17,0)          initial dcl 5-458
LO_NAME                                internal static char(12)                 initial array packed unaligned dcl 5-461
LO_NO_FOLDING                          internal static fixed bin(17,0)          initial dcl 5-459
LO_TRUNCATION                          internal static fixed bin(17,0)          initial dcl 5-457
LO_VALUE                               internal static fixed bin(8,0)           initial array unsigned dcl 5-464
M_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 1-11
M_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 1-36
NL_FFS                                 internal static fixed bin(17,0)          initial dcl 5-303
NL_NAME                                internal static char(9)                  initial array packed unaligned dcl 5-305
NL_VALUE                               internal static fixed bin(8,0)           initial array unsigned dcl 5-307
NT_NAME                                internal static char(9)                  initial array packed unaligned dcl 5-529
NT_SWITCHED                            internal static fixed bin(17,0)          initial dcl 5-525
NT_VALUE                               internal static fixed bin(8,0)           initial array unsigned dcl 5-532
NT_X21                                 internal static fixed bin(17,0)          initial dcl 5-526
NT_X25                                 internal static fixed bin(17,0)          initial dcl 5-527
N_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 1-11
N_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 1-36
OUTPUT_CONVERT_BRS                     internal static fixed bin(8,0)           initial packed unaligned dcl 10-147
OUTPUT_CONVERT_BS                      internal static fixed bin(8,0)           initial packed unaligned dcl 10-147
OUTPUT_CONVERT_CR                      internal static fixed bin(8,0)           initial packed unaligned dcl 10-147
OUTPUT_CONVERT_DONT_SEND               internal static fixed bin(8,0)           initial packed unaligned dcl 10-147
OUTPUT_CONVERT_FF                      internal static fixed bin(8,0)           initial packed unaligned dcl 10-147
OUTPUT_CONVERT_FIRST_SPECIAL           internal static fixed bin(8,0)           initial packed unaligned dcl 10-147
OUTPUT_CONVERT_HT                      internal static fixed bin(8,0)           initial packed unaligned dcl 10-147
OUTPUT_CONVERT_NEWLINE                 internal static fixed bin(8,0)           initial packed unaligned dcl 10-147
OUTPUT_CONVERT_NOT_USED_13             internal static fixed bin(8,0)           initial packed unaligned dcl 10-147
OUTPUT_CONVERT_NOT_USED_14             internal static fixed bin(8,0)           initial packed unaligned dcl 10-147
OUTPUT_CONVERT_NOT_USED_15             internal static fixed bin(8,0)           initial packed unaligned dcl 10-147
OUTPUT_CONVERT_NOT_USED_16             internal static fixed bin(8,0)           initial packed unaligned dcl 10-147
OUTPUT_CONVERT_NO_MOTION               internal static fixed bin(8,0)           initial packed unaligned dcl 10-147
OUTPUT_CONVERT_OCTAL                   internal static fixed bin(8,0)           initial packed unaligned dcl 10-147
OUTPUT_CONVERT_ORDINARY                internal static fixed bin(8,0)           initial packed unaligned dcl 10-147
OUTPUT_CONVERT_PRECEDENCE_NO_MOTION    internal static fixed bin(8,0)           initial packed unaligned dcl 10-147
OUTPUT_CONVERT_RRS                     internal static fixed bin(8,0)           initial packed unaligned dcl 10-147
OUTPUT_CONVERT_VT                      internal static fixed bin(8,0)           initial packed unaligned dcl 10-147
PC_LEVEL_DSA300                        internal static bit(8)                   initial packed unaligned dcl 5-248
PN_NAME                                internal static char(9)                  initial array packed unaligned dcl 5-322
PN_TM                                  internal static fixed bin(17,0)          initial dcl 5-321
PN_VALUE                               internal static fixed bin(8,0)           initial array unsigned dcl 5-323
PO_CLEAR                               internal static fixed bin(17,0)          initial dcl 5-469
PO_NAME                                internal static char(12)                 initial array packed unaligned dcl 5-473
PO_NO_PAGING                           internal static fixed bin(17,0)          initial dcl 5-471
PO_SCROLL                              internal static fixed bin(17,0)          initial dcl 5-470
PO_TRUNCATION                          internal static fixed bin(17,0)          initial dcl 5-468
PO_VALUE                               internal static fixed bin(8,0)           initial array unsigned dcl 5-476
PV_NAME                                internal static char(12)                 initial array packed unaligned dcl 5-331
PV_TM_FULL_STC                         internal static fixed bin(17,0)          initial dcl 5-330
PV_TM_NO_STC                           internal static fixed bin(17,0)          initial dcl 5-329
PV_VALUE                               internal static fixed bin(17,0)          initial array dcl 5-333
RC_2780                                internal static fixed bin(17,0)          initial dcl 5-387
RC_2780_3780_RJE                       internal static fixed bin(17,0)          initial dcl 5-390
RC_327X                                internal static fixed bin(17,0)          initial dcl 5-383
RC_BATCH_RCI                           internal static fixed bin(17,0)          initial dcl 5-385
RC_NAME                                internal static char(16)                 initial array packed unaligned dcl 5-392
RC_TMMRB                               internal static fixed bin(17,0)          initial dcl 5-389
RC_TMMVU                               internal static fixed bin(17,0)          initial dcl 5-386
RC_TTY                                 internal static fixed bin(17,0)          initial dcl 5-384
RC_UNDEFINED                           internal static fixed bin(17,0)          initial dcl 5-380
RC_UNSPECIFIED                         internal static fixed bin(17,0)          initial dcl 5-388
RC_VALUE                               internal static fixed bin(8,0)           initial array unsigned dcl 5-396
RC_VIP77XX                             internal static fixed bin(17,0)          initial dcl 5-381
RC_VIP78XX                             internal static fixed bin(17,0)          initial dcl 5-382
REW_ACCESS                             internal static bit(3)                   initial packed unaligned dcl 1-11
REW_ACCESS_BIN                         internal static fixed bin(5,0)           initial dcl 1-36
RE_ACCESS                              internal static bit(3)                   initial packed unaligned dcl 1-11
RE_ACCESS_BIN                          internal static fixed bin(5,0)           initial dcl 1-36
RW_ACCESS                              internal static bit(3)                   initial packed unaligned dcl 1-11
RW_ACCESS_BIN                          internal static fixed bin(5,0)           initial dcl 1-36
R_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 1-36
SA_ACCESS                              internal static bit(3)                   initial packed unaligned dcl 1-11
SA_ACCESS_BIN                          internal static fixed bin(5,0)           initial dcl 1-36
SC_MANDATORY                           internal static fixed bin(17,0)          initial dcl 5-370
SC_NAME                                internal static char(12)                 initial array packed unaligned dcl 5-372
SC_VALUE                               internal static fixed bin(8,0)           initial array unsigned dcl 5-375
SEG_ACCESS_MODE_NAMES                  internal static char(4)                  initial array packed unaligned dcl 1-30
SH_DEDICATED                           internal static fixed bin(17,0)          initial dcl 5-427
SH_DEDICATED_OR_SHAREABLE              internal static fixed bin(17,0)          initial dcl 5-428
SH_EXCLUSIVELY_SHAREABLE               internal static fixed bin(17,0)          initial dcl 5-429
SH_NAME                                internal static char(24)                 initial array packed unaligned dcl 5-431
SH_VALUE                               internal static bit(2)                   initial array packed unaligned dcl 5-435
SLP_ASYNCHRONOUS                       internal static fixed bin(17,0)          initial dcl 5-505
SLP_BSC_MULTIPOINT                     internal static fixed bin(17,0)          initial dcl 5-509
SLP_BSC_POINT_TO_POINT                 internal static fixed bin(17,0)          initial dcl 5-510
SLP_HDLC_MULTIPOINT                    internal static fixed bin(17,0)          initial dcl 5-512
SLP_HDLC_POINT_TO_POINT                internal static fixed bin(17,0)          initial dcl 5-513
SLP_NAME                               internal static char(20)                 initial array packed unaligned dcl 5-515
SLP_RCI_POINT_TO_POINT                 internal static fixed bin(17,0)          initial dcl 5-511
SLP_TMMRB_MULTIPOINT                   internal static fixed bin(17,0)          initial dcl 5-508
SLP_TMMVU_MULTIPOINT                   internal static fixed bin(17,0)          initial dcl 5-507
SLP_VALUE                              internal static fixed bin(8,0)           initial array unsigned dcl 5-520
SLP_VIP_MULTIPOINT                     internal static fixed bin(17,0)          initial dcl 5-506
SMA_ACCESS                             internal static bit(3)                   initial packed unaligned dcl 1-11
SMA_ACCESS_BIN                         internal static fixed bin(5,0)           initial dcl 1-36
SM_ACCESS                              internal static bit(3)                   initial packed unaligned dcl 1-11
SM_ACCESS_BIN                          internal static fixed bin(5,0)           initial dcl 1-36
SPECIAL_INFO_STRUCT_VERSION_1          internal static char(8)                  initial packed unaligned dcl 10-122
SPECIAL_VERSION                        internal static fixed bin(17,0)          initial dcl 10-124
SPECIAL_VERSION_2                      internal static fixed bin(17,0)          initial dcl 10-125
SPEC_TYPE                              internal static fixed bin(17,0)          initial dcl 9-223
S_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 1-11
S_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 1-36
TERM_FILE_BC                           internal static bit(2)                   initial packed unaligned dcl 8-12
TERM_FILE_DELETE                       internal static bit(5)                   initial packed unaligned dcl 8-17
TERM_FILE_FORCE_WRITE                  internal static bit(4)                   initial packed unaligned dcl 8-16
TERM_FILE_TRUNC                        internal static bit(1)                   initial packed unaligned dcl 8-11
TERM_FILE_TRUNC_BC                     internal static bit(2)                   initial packed unaligned dcl 8-13
TERM_FILE_TRUNC_BC_TERM                internal static bit(3)                   initial packed unaligned dcl 8-15
TM_ACCEPT                              internal static fixed bin(17,0)          initial dcl 5-537
TM_LEVEL_DSA300                        internal static bit(8)                   initial packed unaligned dcl 5-326
TM_OFFER                               internal static fixed bin(17,0)          initial dcl 5-536
TM_REJECT                              internal static fixed bin(17,0)          initial dcl 5-538
TM_SWITCH                              internal static fixed bin(17,0)          initial dcl 5-539
TRANS_TYPE                             internal static fixed bin(17,0)          initial dcl 9-222
W_ACCESS                               internal static bit(3)                   initial packed unaligned dcl 1-11
W_ACCESS_BIN                           internal static fixed bin(5,0)           initial dcl 1-36
answerback_length                      automatic       fixed bin(17,0)          dcl 9-212
attention_fcn_info                     based           structure                level 1 dcl 4-36
attn_fcn_ptr                           automatic       pointer                  dcl 4-40
c_chars_ptr                            automatic       pointer                  dcl 10-53
delay_struc                            based           structure                level 1 dcl 10-112
dsatm_data_$max_logical_devices        external static fixed bin(17,0)          dcl 5-48
dsatm_data_$max_networks               external static fixed bin(17,0)          dcl 5-49
dsatm_max_logical_devices              automatic       fixed bin(17,0)          dcl 5-50
dsatm_max_networks                     automatic       fixed bin(17,0)          dcl 5-51
dsatm_neg_info                         based           structure                level 1 dcl 5-57
dsatm_sw_dev_info                      based           structure                level 1 dcl 5-213
dsatmnetp                              automatic       pointer                  dcl 5-193
dsatmnip                               automatic       pointer                  dcl 5-55
dsatmprep                              automatic       pointer                  dcl 5-73
dsatmsdip                              automatic       pointer                  dcl 5-211
dsatmstap                              automatic       pointer                  dcl 5-111
extended_tables_ntables                internal static fixed bin(17,0)          initial dcl 9-122
function_key_data_version_1            internal static fixed bin(17,0)          initial dcl 6-36
get_special_info_struc                 based           structure                level 1 dcl 10-117
key_info_ptr                           automatic       pointer                  dcl 6-38
orderip                                automatic       pointer                  dcl 4-34
pa_name                                internal static char(3)                  initial array packed unaligned dcl 9-229
sc_escape_len                          automatic       fixed bin(17,0)          dcl 10-58
sc_input_escape_len                    automatic       fixed bin(17,0)          dcl 10-59
special_chars                          based           structure                level 1 dcl 10-26
special_chars_struc                    based           structure                level 1 dcl 10-76
special_table                          based           structure                level 1 dcl 9-143
table_types                            internal static char(12)                 initial array packed unaligned dcl 9-226
tablep                                 automatic       pointer                  dcl 9-135
template_ptr                           automatic       pointer                  dcl 9-194
terminate_file_switches                based           structure                level 1 packed packed unaligned dcl 8-4
tty_numeric_encoding                   based           structure                level 1 packed packed unaligned dcl 11-69
video_chars                            based           char                     packed unaligned dcl 11-30
video_chars_ptr                        automatic       pointer                  dcl 11-29

NAMES DECLARED BY EXPLICIT CONTEXT.
AREA_FULL                       004424 constant        entry                    internal dcl 850 ref 297 352 355 392
EXIT                            004151 constant        label                    dcl 779 ref 248 263 279 322 341 361 399 426 447 472
                                                                                  486 514 659 672 697 818 829 846 854
RE_INIT                         004164 constant        label                    dcl 788 ref 173 254 269 332 369 407 432 457 478 496
                                                                                  527 665 682
additional_info                 002070 constant        entry                    external dcl 453
additional_info_init            002141 constant        label                    dcl 458 ref 456
bad_data                        003104 constant        label                    dcl 634 ref 568 597 623
decode_answerback               002440 constant        entry                    external dcl 516
decode_answerback_init          002537 constant        label                    dcl 528 ref 526
decode_type                     003246 constant        entry                    external dcl 678
decode_type_init                003314 constant        label                    dcl 683 ref 681
default_term_type               002272 constant        entry                    external dcl 492
default_term_type_init          002342 constant        label                    dcl 497 ref 495
dialup_flags                    002204 constant        entry                    external dcl 474
dialup_flags_init               002250 constant        label                    dcl 479 set ref 477
dsatm_device                    001415 constant        entry                    external dcl 365
dsatm_device_init               001463 constant        label                    dcl 370 ref 368
encode_type                     003166 constant        entry                    external dcl 661
encode_type_init                003234 constant        label                    dcl 666 ref 664
find_tte                        004365 constant        entry                    internal dcl 834 ref 176 257 272 336 372 435 460 481
                                                                                  668
function_key_data               001157 constant        entry                    external dcl 328
function_key_data_init          001225 constant        label                    dcl 334 ref 331
initial_string                  001757 constant        entry                    external dcl 428
initial_string_init             002030 constant        label                    dcl 433 ref 431
initialize                      004274 constant        entry                    internal dcl 812 ref 174 255 270 334 370 408 433 458
                                                                                  479 497 528 666 683
modes                           000547 constant        entry                    external dcl 250
modes_init                      000620 constant        label                    dcl 255 ref 253
next_ab_entry                   003156 constant        label                    dcl 656 ref 551 556 565 570 577 580 594 600 608 625
                                                                                  645
next_term                       003110 constant        label                    dcl 639 ref 553
no_video                        000732 constant        label                    dcl 276 ref 282 284
preaccess_type                  001612 constant        entry                    external dcl 403
preaccess_type_init             001663 constant        label                    dcl 408 ref 406
print_ttt_path                  004055 constant        entry                    external dcl 764
reset                           004227 constant        entry                    external dcl 802
set_ttt_path                    003361 constant        entry                    external dcl 699
terminal_data                   000230 constant        entry                    external dcl 169
terminal_data_init              000300 constant        label                    dcl 174 ref 172
ttt_info_                       000215 constant        entry                    external dcl 47
ttt_path                        004113 constant        entry                    external dcl 771
video_info                      000655 constant        entry                    external dcl 265
video_infop_init                000725 constant        label                    dcl 270 ref 268

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      6406        6472    5446        6416
Length      7242    5446        64         533     737           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
ttt_info_                           400 external procedure  is an external procedure.  
on unit on line 173                  64 on unit               
on unit on line 254                  64 on unit               
on unit on line 269                  64 on unit               
on unit on line 297                  64 on unit               
on unit on line 332                  64 on unit               
on unit on line 352                  64 on unit               
on unit on line 355                  64 on unit               
on unit on line 369                  64 on unit               
on unit on line 392                  64 on unit               
on unit on line 407                  64 on unit               
on unit on line 432                  64 on unit               
on unit on line 457                  64 on unit               
on unit on line 478                  64 on unit               
on unit on line 496                  64 on unit               
on unit on line 527                  64 on unit               
on unit on line 665                  64 on unit               
on unit on line 682                  64 on unit               
initialize                              internal procedure  shares stack frame of external procedure ttt_info_.  
find_tte                                internal procedure  shares stack frame of external procedure ttt_info_.  
AREA_FULL                            64 internal procedure  is called by several nonquick procedures.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
ttt_info_                000100 saved_install_time          ttt_info_
                         000102 my_name                     ttt_info_
                         000112 i                           ttt_info_
                         000113 j                           ttt_info_
                         000114 tte_table_array_ptr         ttt_info_
                         000116 ttd_table_array_ptr         ttt_info_
                         000120 stringp                     ttt_info_
                         000122 stringl                     ttt_info_
                         000123 next_offset                 ttt_info_
                         000124 scanx                       ttt_info_
                         000125 defx                        ttt_info_
                         000126 ab                          ttt_info_
                         000160 termp                       ttt_info_
                         000162 key                         ttt_info_
                         000163 value                       ttt_info_
                         000164 save_id                     ttt_info_
                         000166 dname                       ttt_info_
                         000240 ename                       ttt_info_
                         000250 ec                          ttt_info_
                         000252 re_init_label               ttt_info_
                         000256 areap                       ttt_info_
                         000260 char_time                   ttt_info_
                         000262 p                           ttt_info_
                         000264 sourcep                     ttt_info_
                         000266 targetp                     ttt_info_
                         000312 dsatmdevp                   ttt_info_
                         000314 function_key_data_ptr       ttt_info_
                         000316 function_key_data_highest   ttt_info_
                         000320 ttdp                        ttt_info_
                         000322 tttp                        ttt_info_
                         000324 ttep                        ttt_info_
                         000326 extended_tablesp            ttt_info_
                         000330 dfttp                       ttt_info_
                         000332 fkey_tablep                 ttt_info_
                         000334 delay_tablep                ttt_info_
                         000336 answerback_entry_ptr        ttt_info_
                         000340 ttyvtblp                    ttt_info_
                         000342 tty_video_table_video_chars_len
                                                            ttt_info_
                         000344 ttyvseqp                    ttt_info_
                         000406 ttex                        find_tte

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
fx1_to_fl2          alloc_char_temp     call_ext_out_desc   call_ext_out        call_int_other      return_mac
fl2_to_fx1          tra_ext_1           tra_ext_2           enable_op           shorten_stack       ext_entry
ext_entry_desc      int_entry           set_chars_eis       index_chars_eis     op_alloc_

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
com_err_                      com_err_$suppress_name        cu_$arg_count                 cu_$arg_ptr
expand_pathname_              get_system_free_area_         initiate_file_                ioa_
terminate_file_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
dsatm_data_$device_multics_dft                              error_table_$badopt
error_table_$improper_data_format                           error_table_$incompatible_term_type
error_table_$invalid_line_type                              error_table_$invalid_preaccess_command
error_table_$no_table         error_table_$no_term_type     error_table_$noalloc          error_table_$smallarg
error_table_$unimplemented_version                          error_table_$wrong_no_of_args ttt_info_data_




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     47 000214       169 000222       172 000251       173 000254       174 000300       176 000301       178 000302
    180 000304       182 000306       183 000311       185 000312       187 000317       188 000322       192 000323
    193 000327       196 000333       198 000340       199 000343       202 000344       203 000347       205 000352
    206 000354       207 000356       208 000363       210 000375       211 000407       213 000411       216 000420
    217 000423       218 000424       219 000441       221 000446       222 000450       224 000461       226 000471
    230 000474       231 000500       232 000502       233 000504       234 000506       235 000512       237 000514
    239 000517       240 000521       241 000523       242 000530       245 000535       248 000542       250 000543
    253 000571       254 000574       255 000620       257 000621       259 000622       260 000631       263 000647
    265 000650       268 000676       269 000701       270 000725       272 000726       274 000727       276 000732
    278 000735       279 000740       281 000741       282 000744       284 000747       287 000752       289 000761
    291 000763       292 000766       295 001001       296 001006       297 001010       298 001032       299 001050
    300 001064       302 001065       303 001101       304 001105       307 001110       309 001116       312 001123
    314 001134       315 001136       320 001144       321 001146       322 001151       328 001152       331 001176
    332 001201       334 001225       336 001226       337 001227       339 001232       340 001235       341 001240
    343 001241       344 001242       345 001245       347 001247       349 001263       351 001266       352 001271
    353 001313       354 001326       355 001337       356 001361       357 001374       358 001401       359 001405
    361 001412       365 001413       368 001434       369 001437       370 001463       372 001464       374 001465
    379 001474       381 001477       384 001511       385 001515       388 001520       389 001523       392 001536
    393 001560       395 001565       396 001571       397 001605       399 001607       403 001610       406 001634
    407 001637       408 001663       411 001664       413 001677       415 001707       418 001717       419 001722
    422 001723       424 001735       426 001752       428 001753       431 002001       432 002004       433 002030
    435 002031       437 002032       440 002041       441 002044       442 002046       443 002057       447 002065
    453 002066       456 002112       457 002115       458 002141       460 002142       462 002143       465 002152
    466 002155       467 002157       468 002170       472 002176       474 002177       477 002221       478 002224
    479 002250       481 002251       483 002252       484 002260       486 002264       492 002265       495 002313
    496 002316       497 002342       500 002343       501 002353       503 002356       506 002361       510 002405
    511 002407       514 002432       516 002433       519 002464       520 002501       522 002504       523 002507
    526 002510       527 002513       528 002537       531 002540       533 002557       536 002562       539 002570
    540 002573       541 002575       543 002576       544 002605       545 002612       546 002616       548 002624
    550 002630       551 002631       553 002636       556 002637       559 002642       561 002644       563 002646
    565 002650       567 002662       568 002663       570 002665       574 002677       575 002700       577 002701
    580 002705       582 002714       583 002716       585 002717       587 002720       589 002722       591 002724
    593 002726       594 002746       596 002747       597 002750       599 002752       600 002772       604 002773
    605 002774       607 002775       608 003017       610 003020       611 003024       613 003026       615 003027
    617 003031       619 003033       621 003052       622 003055       623 003056       625 003062       627 003066
    628 003101       631 003103       634 003104       636 003107       639 003110       642 003113       644 003116
    645 003122       648 003130       651 003140       654 003154       656 003156       659 003161       661 003162
    664 003205       665 003210       666 003234       668 003235       670 003236       672 003241       678 003242
    681 003265       682 003270       683 003314       686 003315       687 003325       688 003331       690 003334
    691 003344       693 003345       695 003347       697 003357       699 003360       702 003366       703 003371
    704 003400       706 003403       708 003427       710 003430       712 003450       715 003466       716 003471
    717 003474       719 003475       720 003521       721 003522       723 003523       724 003553       726 003555
    727 003601       731 003602       732 003640       734 003644       735 003676       740 003677       742 003703
    743 003745       746 003746       748 003752       750 004005       754 004006       756 004041       757 004044
    758 004050       760 004053       764 004054       767 004062       768 004106       771 004107       774 004133
    775 004143       777 004150       779 004151       784 004163       788 004164       791 004171       792 004217
    795 004222       796 004224       802 004226       805 004234       807 004241       808 004267       809 004272
    876 004273       812 004274       815 004275       817 004302       818 004340       822 004345       823 004350
    825 004351       827 004355       828 004357       829 004361       831 004362       832 004364       834 004365
    839 004366       840 004377       841 004403       843 004415       845 004417       846 004422       850 004423
    852 004431       853 004434       854 004436


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
