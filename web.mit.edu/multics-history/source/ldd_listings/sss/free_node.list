	COMPILATION LISTING OF SEGMENT free_node
	Compiled by: Multics PL/I Compiler, Release 33e, of October 6, 1992
	Compiled at: CGI                             
	Compiled on: 2000-05-05_1824.06_Fri_mdt
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 free_node:	proc(arg);
       12 
       13 dcl	(arg,p,q) ptr,
       14 	nodetype fixed bin(15);
       15 
       16 dcl	pl1_stat_$free_ptr(18) ptr ext static;
       17 
       18 dcl	(fixed,null) builtin;
       19 
       20 
       21 
  1     1 /* BEGIN INCLUDE FILE ... pl1_tree_areas.incl.pl1 */
  1     2 
  1     3 /* format: style3 */
  1     4 dcl	tree_area		area based (pl1_stat_$tree_area_ptr);
  1     5 dcl	xeq_tree_area	area based (pl1_stat_$xeq_tree_area_ptr);
  1     6 
  1     7 dcl	pl1_stat_$tree_area_ptr
  1     8 			ptr ext static,
  1     9 	pl1_stat_$xeq_tree_area_ptr
  1    10 			ptr ext static;
  1    11 
  1    12 /* END INCLUDE FILE ... op_codes.incl.pl1 */
       22 
  2     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
  2     2 
  2     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
  2     4 
  2     5 dcl (	block_node		initial("000000001"b),
  2     6 	statement_node		initial("000000010"b),
  2     7 	operator_node		initial("000000011"b),
  2     8 	reference_node		initial("000000100"b),
  2     9 	token_node		initial("000000101"b),
  2    10 	symbol_node		initial("000000110"b),
  2    11 	context_node		initial("000000111"b),
  2    12 	array_node		initial("000001000"b),
  2    13 	bound_node		initial("000001001"b),
  2    14 	format_value_node		initial("000001010"b),
  2    15 	list_node			initial("000001011"b),
  2    16 	default_node		initial("000001100"b),
  2    17 	machine_state_node		initial("000001101"b),
  2    18 	source_node		initial("000001110"b),
  2    19 	label_node		initial("000001111"b),
  2    20 	cross_reference_node	initial("000010000"b),
  2    21 	sf_par_node		initial("000010001"b),
  2    22 	temporary_node		initial("000010010"b),
  2    23 	label_array_element_node	initial("000010011"b),
  2    24 	by_name_agg_node		initial("000010100"b))
  2    25 				bit(9) internal static aligned options(constant);
  2    26 
  2    27 dcl	1 node			based aligned,
  2    28 	2 type			unal bit(9),
  2    29 	2 source_id		unal structure,
  2    30 	  3 file_number		bit(8),
  2    31 	  3 line_number		bit(14),
  2    32 	  3 statement_number	bit(5);
  2    33 
  2    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
       23 
  3     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
  3     2 
  3     3 dcl	1 symbol			based aligned,
  3     4 	2 node_type		bit(9) unal,
  3     5 	2 source_id		structure unal,
  3     6 	  3 file_number		bit(8),
  3     7 	  3 line_number		bit(14),
  3     8 	  3 statement_number	bit(5),
  3     9 	2 location		fixed(18) unal unsigned,
  3    10 	2 allocated		bit(1) unal,
  3    11 	2 dcl_type		bit(3) unal,
  3    12 	2 reserved		bit(6) unal,
  3    13 	2 pix			unal,
  3    14 	  3 pic_fixed		bit(1) unal,
  3    15 	  3 pic_float		bit(1) unal,
  3    16 	  3 pic_char		bit(1) unal,
  3    17 	  3 pic_scale		fixed(7) unal,
  3    18 	  3 pic_size		fixed(7) unal,
  3    19 	2 level			fixed(8) unal,
  3    20 	2 boundary		fixed(3) unal,
  3    21 	2 size_units		fixed(3) unal,
  3    22 	2 scale			fixed(7) unal,
  3    23 	2 runtime			bit(18) unal,
  3    24 	2 runtime_offset		bit(18) unal,
  3    25 	2 block_node		ptr unal,
  3    26 	2 token			ptr unal,
  3    27 	2 next			ptr unal,
  3    28 	2 multi_use		ptr unal,
  3    29 	2 cross_references		ptr unal,
  3    30 	2 initial			ptr unal,
  3    31 	2 array			ptr unal,
  3    32 	2 descriptor		ptr unal,
  3    33 	2 equivalence		ptr unal,
  3    34 	2 reference		ptr unal,
  3    35 	2 general			ptr unal,
  3    36 	2 father			ptr unal,
  3    37 	2 brother			ptr unal,
  3    38 	2 son			ptr unal,
  3    39 	2 word_size		ptr unal,
  3    40 	2 bit_size		ptr unal,
  3    41 	2 dcl_size		ptr unal,
  3    42 	2 symtab_size		ptr unal,
  3    43 	2 c_word_size		fixed(24),
  3    44 	2 c_bit_size		fixed(24),
  3    45 	2 c_dcl_size		fixed(24),
  3    46 
  3    47 	2 attributes		structure aligned,
  3    48 	  3 data_type		structure unal,
  3    49 	    4 structure		bit(1) ,
  3    50 	    4 fixed		bit(1),
  3    51 	    4 float		bit(1),
  3    52 	    4 bit			bit(1),
  3    53 	    4 char		bit(1),
  3    54 	    4 ptr			bit(1),
  3    55 	    4 offset		bit(1),
  3    56 	    4 area		bit(1),
  3    57 	    4 label		bit(1),
  3    58 	    4 entry		bit(1),
  3    59 	    4 file		bit(1),
  3    60 	    4 arg_descriptor	bit(1),
  3    61 	    4 storage_block		bit(1),
  3    62 	    4 explicit_packed	bit(1), /* options(packed) */
  3    63 	    4 condition		bit(1),
  3    64 	    4 format		bit(1),
  3    65 	    4 builtin		bit(1),
  3    66 	    4 generic		bit(1),
  3    67 	    4 picture		bit(1),
  3    68 
  3    69 	  3 misc_attributes		structure unal,
  3    70 	    4 dimensioned		bit(1),
  3    71 	    4 initialed		bit(1),
  3    72 	    4 aligned		bit(1),
  3    73 	    4 unaligned		bit(1),
  3    74 	    4 signed		bit(1),
  3    75 	    4 unsigned		bit(1),
  3    76 	    4 precision		bit(1),
  3    77 	    4 varying		bit(1),
  3    78 	    4 local		bit(1),
  3    79 	    4 decimal		bit(1),
  3    80 	    4 binary		bit(1),
  3    81 	    4 real		bit(1),
  3    82 	    4 complex		bit(1),
  3    83 	    4 variable		bit(1),
  3    84 	    4 reducible		bit(1),
  3    85 	    4 irreducible		bit(1),
  3    86 	    4 returns		bit(1),
  3    87 	    4 position		bit(1),
  3    88 	    4 internal		bit(1),
  3    89 	    4 external		bit(1),
  3    90 	    4 like		bit(1),
  3    91 	    4 member		bit(1),
  3    92 	    4 non_varying		bit(1),
  3    93 	    4 options		bit(1),
  3    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
  3    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
  3    96 
  3    97 	  3 storage_class		structure unal,
  3    98 	    4 auto		bit(1),
  3    99 	    4 based		bit(1),
  3   100 	    4 static		bit(1),
  3   101 	    4 controlled		bit(1),
  3   102 	    4 defined		bit(1),
  3   103 	    4 parameter		bit(1),
  3   104 	    4 param_desc		bit(1),
  3   105 	    4 constant		bit(1),
  3   106 	    4 temporary		bit(1),
  3   107 	    4 return_value		bit(1),
  3   108 
  3   109 	  3 file_attributes		structure unal,
  3   110 	    4 print		bit(1),
  3   111 	    4 input		bit(1),
  3   112 	    4 output		bit(1),
  3   113 	    4 update		bit(1),
  3   114 	    4 stream		bit(1),
  3   115 	    4 reserved_1		bit(1),
  3   116 	    4 record		bit(1),
  3   117 	    4 sequential		bit(1),
  3   118 	    4 direct		bit(1),
  3   119 	    4 interactive		bit(1),		/* env(interactive) */
  3   120 	    4 reserved_2		bit(1),
  3   121 	    4 reserved_3		bit(1),
  3   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
  3   123 	    4 keyed		bit(1),
  3   124 	    4 reserved_4		bit(1),
  3   125 	    4 environment		bit(1),
  3   126 
  3   127 	  3 compiler_developed	structure unal,
  3   128 	    4 aliasable		bit(1),
  3   129 	    4 packed		bit(1),
  3   130 	    4 passed_as_arg		bit(1),
  3   131 	    4 allocate		bit(1),
  3   132 	    4 set			bit(1),
  3   133 	    4 exp_extents		bit(1),
  3   134 	    4 refer_extents		bit(1),
  3   135 	    4 star_extents		bit(1),
  3   136 	    4 isub		bit(1),
  3   137 	    4 put_in_symtab		bit(1),
  3   138 	    4 contiguous		bit(1),
  3   139 	    4 put_data		bit(1),
  3   140 	    4 overlayed		bit(1),
  3   141 	    4 error		bit(1),
  3   142 	    4 symtab_processed	bit(1),
  3   143 	    4 overlayed_by_builtin	bit(1),
  3   144 	    4 defaulted		bit(1),
  3   145 	    4 connected		bit(1);
  3   146 
  3   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
       24 
  4     1 /* BEGIN INCLUDE FILE ... token.incl.pl1 */
  4     2 
  4     3 dcl	1 token			based aligned,
  4     4 	2 node_type		bit(9) unaligned,
  4     5 	2 type			bit(9) unaligned,
  4     6 	2 loc			bit(18) unaligned,	/* symtab offset for identifiers, "p" flag for constants */
  4     7 	2 declaration		ptr unaligned,
  4     8 	2 next			ptr unaligned,
  4     9 	2 size			fixed(9),
  4    10 	2 string			char(n refer(token.size));
  4    11 
  4    12 /* END INCLUDE FILE ... token.incl.pl1 */
       25 
  5     1 /* BEGIN INCLUDE FILE ... block.incl.pl1 */
  5     2 /* Modified 22 Ocober 1980 by M. N. Davidoff to increase max block.number to 511 */
  5     3 /* format: style3,idind30 */
  5     4 
  5     5 declare	1 block			aligned based,
  5     6 	  2 node_type		bit (9) unaligned,
  5     7 	  2 source_id		structure unaligned,
  5     8 	    3 file_number		bit (8),
  5     9 	    3 line_number		bit (14),
  5    10 	    3 statement_number	bit (5),
  5    11 	  2 father		ptr unaligned,
  5    12 	  2 brother		ptr unaligned,
  5    13 	  2 son			ptr unaligned,
  5    14 	  2 declaration		ptr unaligned,
  5    15 	  2 end_declaration		ptr unaligned,
  5    16 	  2 default		ptr unaligned,
  5    17 	  2 end_default		ptr unaligned,
  5    18 	  2 context		ptr unaligned,
  5    19 	  2 prologue		ptr unaligned,
  5    20 	  2 end_prologue		ptr unaligned,
  5    21 	  2 main			ptr unaligned,
  5    22 	  2 end_main		ptr unaligned,
  5    23 	  2 return_values		ptr unaligned,
  5    24 	  2 return_count		ptr unaligned,
  5    25 	  2 plio_ps		ptr unaligned,
  5    26 	  2 plio_fa		ptr unaligned,
  5    27 	  2 plio_ffsb		ptr unaligned,
  5    28 	  2 plio_ssl		ptr unaligned,
  5    29 	  2 plio_fab2		ptr unaligned,
  5    30 	  2 block_type		bit (9) unaligned,
  5    31 	  2 prefix		bit (12) unaligned,
  5    32 	  2 like_attribute		bit (1) unaligned,
  5    33 	  2 no_stack		bit (1) unaligned,
  5    34 	  2 get_data		bit (1) unaligned,
  5    35 	  2 flush_at_call		bit (1) unaligned,
  5    36 	  2 processed		bit (1) unaligned,
  5    37 	  2 text_displayed		bit (1) unaligned,
  5    38 	  2 number		fixed bin (9) unsigned unaligned,
  5    39 	  2 free_temps		dimension (3) ptr,	/* these fields are used by the code generator */
  5    40 	  2 temp_list		ptr,
  5    41 	  2 entry_list		ptr,
  5    42 	  2 o_and_s		ptr,
  5    43 	  2 why_nonquick		aligned,
  5    44 	    3 auto_adjustable_storage bit (1) unaligned,
  5    45 	    3 returns_star_extents	bit (1) unaligned,
  5    46 	    3 stack_extended_by_args	bit (1) unaligned,
  5    47 	    3 invoked_by_format	bit (1) unaligned,
  5    48 	    3 format_statement	bit (1) unaligned,
  5    49 	    3 io_statements		bit (1) unaligned,
  5    50 	    3 assigned_to_entry_var	bit (1) unaligned,
  5    51 	    3 condition_statements	bit (1) unaligned,
  5    52 	    3 no_owner		bit (1) unaligned,
  5    53 	    3 recursive_call	bit (1) unaligned,
  5    54 	    3 options_non_quick	bit (1) unaligned,
  5    55 	    3 options_variable	bit (1) unaligned,
  5    56 	    3 never_referenced	bit (1) unaligned,
  5    57 	    3 pad_nonquick		bit (5) unaligned,
  5    58 	  2 prologue_flag		bit (1) unaligned,
  5    59 	  2 options_main		bit (1) unaligned,
  5    60 	  2 pad			bit (16) unaligned,
  5    61 	  2 number_of_entries	fixed bin (17),
  5    62 	  2 level			fixed bin (17),
  5    63 	  2 last_auto_loc		fixed bin (17),
  5    64 	  2 symbol_block		fixed bin (17),
  5    65 	  2 entry_info		fixed bin (18),
  5    66 	  2 enter			structure unaligned,
  5    67 	    3 start		fixed bin (17),
  5    68 	    3 end			fixed bin (17),
  5    69 	  2 leave			structure unaligned,
  5    70 	    3 start		fixed bin (17),
  5    71 	    3 end			fixed bin (17),
  5    72 	  2 owner			ptr;
  5    73 
  5    74 declare	max_block_number		fixed bin internal static options (constant) initial (511);
  5    75 
  5    76 /* END INCLUDE FILE ... block.incl.pl1 */
       26 
  6     1 /* ***********************************************************
  6     2*   *                                                         *
  6     3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
  6     4*   *                                                         *
  6     5*   *********************************************************** */
  6     6 /* BEGIN INCLUDE FILE ... statement.incl.pl1 */
  6     7 /* Internal interface of the PL/I compiler */
  6     8 
  6     9 dcl	1 statement		based aligned,
  6    10 	2 node_type		bit(9) unaligned,
  6    11 	2 source_id		structure unaligned,
  6    12 	  3 file_number		bit(8),
  6    13 	  3 line_number		bit(14),
  6    14 	  3 statement_number	bit(5),
  6    15 	2 next			ptr unaligned,
  6    16 	2 back			ptr unaligned,
  6    17 	2 root			ptr unaligned,
  6    18 	2 labels			ptr unaligned,
  6    19 	2 reference_list		ptr unaligned,
  6    20 	2 state_list		ptr unaligned,
  6    21 	2 reference_count		fixed(17) unaligned,
  6    22 	2 ref_count_copy		fixed(17) unaligned,
  6    23 	2 object			structure unaligned,
  6    24 	  3 start			fixed(17),
  6    25 	  3 finish		fixed(17),
  6    26 	2 source			structure unaligned,
  6    27 	  3 segment		fixed(11),
  6    28 	  3 start			fixed(23),
  6    29 	  3 length		fixed(11),
  6    30 	2 prefix			bit(12) unaligned,
  6    31 	2 optimized		bit(1) unaligned,
  6    32 	2 free_temps		bit(1) unaligned,
  6    33 	2 LHS_in_RHS		bit(1) unaligned,
  6    34 	2 statement_type		bit(9) unaligned,
  6    35 	2 bits			structure unaligned,
  6    36 	  3 processed		bit(1) unaligned,
  6    37 	  3 put_in_profile		bit(1) unaligned,
  6    38 	  3 generated		bit(1) unaligned,
  6    39 	  3 snap			bit(1) unaligned,
  6    40 	  3 system		bit(1) unaligned,
  6    41 	  3 irreducible		bit(1) unaligned,
  6    42 	  3 checked		bit(1) unaligned,
  6    43 	  3 save_temps		bit(1) unaligned,
  6    44 	  3 suppress_warnings	bit(1) unaligned,
  6    45 	  3 force_nonquick		bit(1) unaligned,
  6    46 	  3 expanded_by_name	bit(1) unaligned,
  6    47 	  3 begins_loop		bit(1) unaligned,
  6    48 	  3 pad			bit(24) unaligned;
  6    49 
  6    50 /* END INCLUDE FILE ... statement.incl.pl1 */
       27 
  7     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
  7     2 
  7     3 dcl	1 reference		based aligned,
  7     4 	2 node_type		bit(9) unaligned,
  7     5 	2 array_ref		bit(1) unaligned,
  7     6 	2 varying_ref		bit(1) unaligned,
  7     7 	2 shared			bit(1) unaligned,
  7     8 	2 put_data_sw		bit(1) unaligned,
  7     9 	2 processed		bit(1) unaligned,
  7    10 	2 units			fixed(3) unaligned,
  7    11 	2 ref_count		fixed(17) unaligned,
  7    12 	2 c_offset		fixed(24),
  7    13 	2 c_length		fixed(24),
  7    14 	2 symbol			ptr unaligned,
  7    15 	2 qualifier		ptr unaligned,
  7    16 	2 offset			ptr unaligned,
  7    17 	2 length			ptr unaligned,
  7    18 	2 subscript_list		ptr unaligned,
  7    19 						/* these fields are used by the 645 code generator */
  7    20 	2 address			structure unaligned,
  7    21 	  3 base			bit(3),
  7    22 	  3 offset		bit(15),
  7    23 	  3 op			bit(9),
  7    24 	  3 no_address		bit(1),
  7    25 	  3 inhibit		bit(1),
  7    26 	  3 ext_base		bit(1),
  7    27 	  3 tag			bit(6),
  7    28 	2 info			structure unaligned,
  7    29 	  3 address_in		structure,
  7    30 	    4 b			dimension(0:7) bit(1),
  7    31 	    4 storage		bit(1),
  7    32 	  3 value_in		structure,
  7    33 	    4 a			bit(1),
  7    34 	    4 q			bit(1),
  7    35 	    4 aq			bit(1),
  7    36 	    4 string_aq		bit(1),
  7    37 	    4 complex_aq		bit(1),
  7    38 	    4 decimal_aq		bit(1),
  7    39 	    4 b			dimension(0:7) bit(1),
  7    40 	    4 storage		bit(1),
  7    41 	    4 indicators		bit(1),
  7    42 	    4 x			dimension(0:7) bit(1),
  7    43 	  3 other			structure,
  7    44 	    4 big_offset		bit(1),
  7    45 	    4 big_length		bit(1),
  7    46 	    4 modword_in_offset	bit(1),
  7    47 	2 data_type		fixed(5) unaligned,
  7    48 	2 bits			structure unaligned,
  7    49 	  3 padded_ref		bit(1),
  7    50 	  3 aligned_ref		bit(1),
  7    51 	  3 long_ref		bit(1),
  7    52 	  3 forward_ref		bit(1),
  7    53 	  3 ic_ref		bit(1),
  7    54 	  3 temp_ref		bit(1),
  7    55 	  3 defined_ref		bit(1),
  7    56 	  3 evaluated		bit(1),
  7    57 	  3 allocate		bit(1),
  7    58 	  3 allocated		bit(1),
  7    59 	  3 aliasable		bit(1),
  7    60 	  3 even			bit(1),
  7    61 	  3 perm_address		bit(1),
  7    62 	  3 aggregate		bit(1),
  7    63 	  3 hit_zero		bit(1),
  7    64 	  3 dont_save		bit(1),
  7    65 	  3 fo_in_qual		bit(1),
  7    66 	  3 hard_to_load		bit(1),
  7    67 	2 relocation		bit(12) unaligned,
  7    68 	2 more_bits		structure unaligned,
  7    69 	  3 substr		bit(1),
  7    70 	  3 padded_for_store_ref	bit(1),
  7    71 	  3 aligned_for_store_ref	bit(1),
  7    72 	  3 mbz			bit(15),
  7    73 	2 store_ins		bit(18) unaligned;
  7    74 
  7    75 /* END INCLUDE FILE ... reference.incl.pl1 */
       28 
  8     1 dcl	1 array			based aligned,
  8     2 	2 node_type		bit(9) unaligned,
  8     3 	2 reserved		bit(34) unaligned,
  8     4 	2 number_of_dimensions	fixed(7) unaligned,
  8     5 	2 own_number_of_dimensions	fixed(7) unaligned,
  8     6 	2 element_boundary		fixed(3) unaligned,
  8     7 	2 size_units		fixed(3) unaligned,
  8     8 	2 offset_units		fixed(3) unaligned,
  8     9 	2 interleaved		bit(1) unaligned,
  8    10 	2 c_element_size		fixed(24),
  8    11 	2 c_element_size_bits	fixed(24),
  8    12 	2 c_virtual_origin		fixed(24),
  8    13 	2 element_size		ptr unaligned,
  8    14 	2 element_size_bits		ptr unaligned,
  8    15 	2 virtual_origin		ptr unaligned,
  8    16 	2 symtab_virtual_origin	ptr unaligned,
  8    17 	2 symtab_element_size	ptr unaligned,
  8    18 	2 bounds			ptr unaligned,
  8    19 	2 element_descriptor	ptr unaligned;
  8    20 
  8    21 dcl	1 bound			based aligned,
  8    22 	2 node_type		bit(9),
  8    23 	2 c_lower			fixed(24),
  8    24 	2 c_upper			fixed(24),
  8    25 	2 c_multiplier		fixed(24),
  8    26 	2 c_desc_multiplier		fixed(24),
  8    27 	2 lower			ptr unaligned,
  8    28 	2 upper			ptr unaligned,
  8    29 	2 multiplier		ptr unaligned,
  8    30 	2 desc_multiplier		ptr unaligned,
  8    31 	2 symtab_lower		ptr unaligned,
  8    32 	2 symtab_upper		ptr unaligned,
  8    33 	2 symtab_multiplier		ptr unaligned,
  8    34 	2 next			ptr unaligned;
       29 
  9     1 /* BEGIN INCLUDE FILE ... list.incl.pl1 */
  9     2 
  9     3 /* Modified 26 June 81 by EBush to add max_list_elements */
  9     4 
  9     5 
  9     6 dcl	1 list		based aligned,
  9     7 	2 node_type	bit(9) unaligned,
  9     8 	2 reserved	bit(12) unaligned,
  9     9 	2 number		fixed(14) unaligned,
  9    10 	2 element		dimension(n refer(list.number)) ptr unaligned;
  9    11 
  9    12 dcl       max_list_elements   fixed bin(17) internal static options (constant)
  9    13 	                    init(16383);
  9    14 
  9    15 /* END INCLUDE FILE ... list.incl.pl1 */
       30 
 10     1 /* BEGIN INCLUDE FILE ... context.incl.pl1 */
 10     2 
 10     3 dcl	1 context			based aligned,
 10     4 	2 node_type		bit(9) unaligned,
 10     5 	2 bits			structure unaligned,
 10     6 	  3 types			structure,
 10     7 	    4 structure		bit(1),
 10     8 	    4 fixed		bit(1),
 10     9 	    4 float		bit(1),
 10    10 	    4 bit			bit(1),
 10    11 	    4 char		bit(1),
 10    12 	    4 ptr			bit(1),
 10    13 	    4 offset		bit(1),
 10    14 	    4 area		bit(1),
 10    15 	    4 label		bit(1),
 10    16 	    4 entry		bit(1),
 10    17 	    4 file		bit(1),
 10    18 	    4 arg_descriptor	bit(1),
 10    19 	    4 storage_block		bit(1),
 10    20 	    4 unused_1		bit(1),
 10    21 	    4 condition		bit(1),
 10    22 	    4 format		bit(1),
 10    23 	    4 builtin		bit(1),
 10    24 	    4 generic		bit(1),
 10    25 	    4 picture		bit(1),
 10    26 	  3 parameter		bit(1),
 10    27 	2 reserved		bit(7) unaligned,
 10    28 	2 next			ptr unaligned,
 10    29 	2 token			ptr unaligned;
 10    30 
 10    31 /* END INCLUDE FILE ... context.incl.pl1 */
       31 
 11     1 dcl	1 label			based aligned,
 11     2 	2 node_type		bit(9) unaligned,
 11     3 	2 source_id		structure unaligned,
 11     4 	  3 file_number		bit(8),
 11     5 	  3 line_number		bit(14),
 11     6 	  3 statement_number	bit(5),
 11     7 	2 location		fixed(17) unaligned,
 11     8 	2 allocated		bit(1) unaligned,
 11     9 	2 dcl_type		bit(3) unaligned,
 11    10 	2 reserved		bit(29) unaligned,
 11    11 	2 array			bit(1) unaligned,
 11    12 	2 used_as_format		bit(1) unaligned,
 11    13 	2 used_in_goto		bit(1) unaligned,
 11    14 	2 symbol_table		bit(18) unaligned,
 11    15 	2 low_bound		fixed(17) unaligned,
 11    16 	2 high_bound		fixed(17) unaligned,
 11    17 	2 block_node		ptr unaligned,
 11    18 	2 token			ptr unaligned,
 11    19 	2 next			ptr unaligned,
 11    20 	2 multi_use		ptr unaligned,
 11    21 	2 cross_reference		ptr unaligned,
 11    22 	2 statement		ptr unaligned;
       32 
 12     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
 12     2 
 12     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
 12     4 
 12     5 /* format: style3 */
 12     6 dcl	1 operator	based aligned,
 12     7 	  2 node_type	bit (9) unaligned,
 12     8 	  2 op_code	bit (9) unaligned,
 12     9 	  2 shared	bit (1) unaligned,
 12    10 	  2 processed	bit (1) unaligned,
 12    11 	  2 optimized	bit (1) unaligned,
 12    12 	  2 number	fixed (14) unaligned,
 12    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
 12    14 
 12    15 dcl	max_number_of_operands
 12    16 			fixed bin (15) int static options (constant) initial (32767);
 12    17 
 12    18 /* END INCLUDE FILE ... operator.incl.pl1 */
       33 
       34 
       35 			/*      */
       36 
       37 	p = arg;
       38 	if p=null then goto ret;
       39 
       40 	nodetype = fixed(p->node.type,15,0);
       41 
       42 	if p->node.type=operator_node
       43 	then do;
       44 		if p->operator.number=2
       45 		then do;
       46 			nodetype = fixed(list_node,15,0);
       47 			goto free_list;
       48 		end;
       49 
       50 		if p->operator.number^=3 then goto ret;
       51 
       52 free_operator:
       53 		p->operand(1) = pl1_stat_$free_ptr(nodetype);
       54 
       55 		goto set;
       56 	end;
       57 
       58 	if p->node.type=list_node | p->node.type=label_array_element_node
       59 	then do;
       60 		if p->list.number=3
       61 		then do;
       62 			nodetype = fixed(operator_node,15,0);
       63 			goto free_operator;
       64 		end;
       65 
       66 		if p->list.number^=2 then goto ret;
       67 
       68 free_list:
       69 		p->list.element(1) = pl1_stat_$free_ptr(nodetype);
       70 
       71 		goto set;
       72 	end;
       73 
       74 	if p->node.type=reference_node
       75 	then do;
       76 		p->reference.symbol = pl1_stat_$free_ptr(nodetype);
       77 
       78 		goto set;
       79 	end;
       80 
       81 	if p->node.type=symbol_node
       82 	then do;
       83 		if p->symbol.block_node^=null
       84 		then	if p->symbol.block_node->block.end_declaration=p
       85 			then	goto ret;
       86 
       87 		p->symbol.next = pl1_stat_$free_ptr(nodetype);
       88 
       89 		if p->symbol.token ^= null
       90 		then do;
       91 			if p->symbol.token->token.declaration=p
       92 			then do;
       93 				p->symbol.token->token.declaration = p->symbol.multi_use;
       94 
       95 				goto set;
       96 			end;
       97 
       98 			q = p;
       99 
      100 			do while(q->symbol.multi_use^=p);
      101 				q = q->symbol.multi_use;
      102 			end;
      103 
      104 			q->symbol.multi_use = p->symbol.multi_use;
      105 		end;
      106 
      107 		goto set;
      108 	end;
      109 
      110 	if p->node.type=statement_node
      111 	then do;
      112 		p->statement.back->statement.next = p->statement.next;
      113 		p->statement.next->statement.back = p->statement.back;
      114 
      115 		p->statement.next = pl1_stat_$free_ptr(nodetype);
      116 
      117 		goto set;
      118 	end;
      119 
      120 	goto ret;
      121 
      122 set:
      123 	pl1_stat_$free_ptr(nodetype) = p;
      124 
      125 ret:
      126 
      127 end free_node;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    05/05/00  1824.0  free_node.pl1                     >udd>sm>ds>w>ml>free_node.pl1
22           1    07/21/80  1646.3  pl1_tree_areas.incl.pl1           >ldd>incl>pl1_tree_areas.incl.pl1
23           2    07/21/80  1646.3  nodes.incl.pl1                    >ldd>incl>nodes.incl.pl1
24           3    12/07/83  1801.7  symbol.incl.pl1                   >ldd>incl>symbol.incl.pl1
25           4    09/14/77  1805.7  token.incl.pl1                    >ldd>incl>token.incl.pl1
26           5    08/13/81  2143.5  block.incl.pl1                    >ldd>incl>block.incl.pl1
27           6    04/07/83  1735.0  statement.incl.pl1                >ldd>incl>statement.incl.pl1
28           7    07/21/80  1646.3  reference.incl.pl1                >ldd>incl>reference.incl.pl1
29           8    05/06/74  1841.6  array.incl.pl1                    >ldd>incl>array.incl.pl1
30           9    08/13/81  2311.5  list.incl.pl1                     >ldd>incl>list.incl.pl1
31          10    11/30/78  1327.4  context.incl.pl1                  >ldd>incl>context.incl.pl1
32          11    05/06/74  1842.1  label.incl.pl1                    >ldd>incl>label.incl.pl1
33          12    07/21/80  1646.3  operator.incl.pl1                 >ldd>incl>operator.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
arg                                    parameter       pointer                  dcl 13 ref 11 37
back                      2            based           pointer                  level 2 packed packed unaligned dcl 6-9 set ref 112
                                                                                  113* 113
block                                  based           structure                level 1 dcl 5-5
block_node                4            based           pointer                  level 2 packed packed unaligned dcl 3-3 ref 83 83
declaration               1            based           pointer                  level 2 packed packed unaligned dcl 4-3 set ref 91
                                                                                  93*
element                   1            based           pointer                  array level 2 packed packed unaligned dcl 9-6 set
                                                                                  ref 68*
end_declaration           5            based           pointer                  level 2 packed packed unaligned dcl 5-5 ref 83
fixed                                                  builtin function         dcl 18 ref 40 46 62
label_array_element_node               constant        bit(9)                   initial dcl 2-5 ref 58
list                                   based           structure                level 1 dcl 9-6
list_node                              constant        bit(9)                   initial dcl 2-5 ref 46 58
multi_use                 7            based           pointer                  level 2 packed packed unaligned dcl 3-3 set ref 93
                                                                                  100 101 104* 104
next                      1            based           pointer                  level 2 in structure "statement" packed packed
                                                                                  unaligned dcl 6-9 in procedure "free_node" set ref
                                                                                  112* 112 113 115*
next                      6            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 3-3 in procedure "free_node" set ref
                                                                                  87*
node                                   based           structure                level 1 dcl 2-27
nodetype                        000104 automatic       fixed bin(15,0)          dcl 13 set ref 40* 46* 52 62* 68 76 87 115 122
null                                                   builtin function         dcl 18 ref 38 83 89
number                    0(21)        based           fixed bin(14,0)          level 2 in structure "list" packed packed unaligned
                                                                                  dcl 9-6 in procedure "free_node" ref 60 66
number                    0(21)        based           fixed bin(14,0)          level 2 in structure "operator" packed packed
                                                                                  unaligned dcl 12-6 in procedure "free_node" ref 44
                                                                                  50
operand                   1            based           pointer                  array level 2 packed packed unaligned dcl 12-6 set
                                                                                  ref 52*
operator                               based           structure                level 1 dcl 12-6
operator_node                          constant        bit(9)                   initial dcl 2-5 ref 42 62
p                               000100 automatic       pointer                  dcl 13 set ref 37* 38 40 42 44 50 52 58 58 60 66 68
                                                                                  74 76 81 83 83 83 87 89 91 91 93 93 98 100 104 110
                                                                                  112 112 113 113 115 122
pl1_stat_$free_ptr              000010 external static pointer                  array dcl 16 set ref 52 68 76 87 115 122*
q                               000102 automatic       pointer                  dcl 13 set ref 98* 100 101* 101 104
reference                              based           structure                level 1 dcl 7-3
reference_node                         constant        bit(9)                   initial dcl 2-5 ref 74
statement                              based           structure                level 1 dcl 6-9
statement_node                         constant        bit(9)                   initial dcl 2-5 ref 110
symbol                                 based           structure                level 1 dcl 3-3 in procedure "free_node"
symbol                    3            based           pointer                  level 2 in structure "reference" packed packed
                                                                                  unaligned dcl 7-3 in procedure "free_node" set ref
                                                                                  76*
symbol_node                            constant        bit(9)                   initial dcl 2-5 ref 81
token                     5            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 3-3 in procedure "free_node" ref 89
                                                                                  91 93
token                                  based           structure                level 1 dcl 4-3 in procedure "free_node"
type                                   based           bit(9)                   level 2 packed packed unaligned dcl 2-27 ref 40 42
                                                                                  58 58 74 81 110

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
array                                  based           structure                level 1 dcl 8-1
array_node                             internal static bit(9)                   initial dcl 2-5
block_node                             internal static bit(9)                   initial dcl 2-5
bound                                  based           structure                level 1 dcl 8-21
bound_node                             internal static bit(9)                   initial dcl 2-5
by_name_agg_node                       internal static bit(9)                   initial dcl 2-5
context                                based           structure                level 1 dcl 10-3
context_node                           internal static bit(9)                   initial dcl 2-5
cross_reference_node                   internal static bit(9)                   initial dcl 2-5
default_node                           internal static bit(9)                   initial dcl 2-5
format_value_node                      internal static bit(9)                   initial dcl 2-5
label                                  based           structure                level 1 dcl 11-1
label_node                             internal static bit(9)                   initial dcl 2-5
machine_state_node                     internal static bit(9)                   initial dcl 2-5
max_block_number                       internal static fixed bin(17,0)          initial dcl 5-74
max_list_elements                      internal static fixed bin(17,0)          initial dcl 9-12
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 12-15
pl1_stat_$tree_area_ptr                external static pointer                  dcl 1-7
pl1_stat_$xeq_tree_area_ptr            external static pointer                  dcl 1-7
sf_par_node                            internal static bit(9)                   initial dcl 2-5
source_node                            internal static bit(9)                   initial dcl 2-5
temporary_node                         internal static bit(9)                   initial dcl 2-5
token_node                             internal static bit(9)                   initial dcl 2-5
tree_area                              based           area(1024)               dcl 1-4
xeq_tree_area                          based           area(1024)               dcl 1-5

NAMES DECLARED BY EXPLICIT CONTEXT.
free_list                       000100 constant        label                    dcl 68 ref 47
free_node                       000007 constant        entry                    external dcl 11
free_operator                   000050 constant        label                    dcl 52 ref 63
ret                             000212 constant        label                    dcl 125 ref 38 50 66 83 120
set                             000205 constant        label                    dcl 122 ref 55 71 78 95 107 117

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       252         264     214         262
Length       626     214        12         326      35           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
free_node                            74 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
free_node                000100 p                           free_node
                         000102 q                           free_node
                         000104 nodetype                    free_node

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
unpk_to_pk          return_mac          ext_entry

NO EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pl1_stat_$free_ptr




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000004        37 000014        38 000020        40 000024        42 000031        44 000034        46 000042
     47 000045        50 000046        52 000050        55 000057        58 000060        60 000064        62 000072
     63 000075        66 000076        68 000100        71 000105        74 000106        76 000110        78 000114
     81 000115        83 000117        87 000127        89 000134        91 000137        93 000145        95 000147
     98 000150       100 000151       101 000157       102 000161       104 000162       107 000165       110 000166
    112 000170       113 000173       115 000176       117 000203       120 000204       122 000205       125 000212


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
