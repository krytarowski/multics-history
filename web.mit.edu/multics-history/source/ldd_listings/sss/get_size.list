	COMPILATION LISTING OF SEGMENT get_size
	Compiled by: Multics PL/I Compiler, Release 32c, of June 16, 1989
	Compiled at: Bull HN, Phoenix AZ, System-M   
	Compiled on: 07/31/89  1403.2 mst Mon
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 /* format: style2,idind30 */
       12 get_size:
       13      proc (sym);
       14 
       15 /* Modified 780712 by PG for unsigned */
       16 /* Modified 790419 by PCK to implement 4-bit decimal */
       17 /* Modified 830427 BIM to implement options (packed) for ptrs */
       18 
       19 	dcl     (sym, s, q, p, b)	        ptr;
       20 	dcl     (n, e, i)		        fixed bin (15);
       21 	dcl     units		        fixed bin (3);
       22 
       23 	dcl     pl1_stat_$util_abort	        ext static variable entry (fixed bin (15), ptr);
       24 
       25 	dcl     pl1_stat_$eis_mode	        bit (1) aligned ext static;
       26 
       27 	dcl     convert_map		        (7) fixed bin (31) int static initial (1, 0, 9, 18, 36, 36, 36);
       28 	dcl     round		        (4) fixed bin (15) int static initial (36, 0, 4, 2);
       29 
       30 	dcl     optable		        (4) bit (9) aligned
       31 				        initial (bit_to_word, ""b, char_to_word, half_to_word);
       32 
       33 	dcl     file_conditions	        (7) char (13) int static
       34 				        initial ("key", "record", "endpage", "endfile", "name", "transmit",
       35 				        "undefinedfile");
       36 
       37 	dcl     (divide, fixed, null, length, max)
       38 				        builtin;
       39 
  1     1 /****^  *********************************************************
  1     2*        *                                                       *
  1     3*        * Copyright, (C) BULL HN Information Systems Inc., 1989 *
  1     4*        *                                                       *
  1     5*        ********************************************************* */
  1     6 
  1     7 /* BEGIN INCLUDE FILE ... language_utility.incl.pl1 */
  1     8 
  1     9 
  1    10 /****^  HISTORY COMMENTS:
  1    11*  1) change(89-07-10,RWaters), approve(89-07-10,MCR8118), audit(89-07-19,Vu),
  1    12*     install(89-07-31,MR12.3-1066):	
  1    13*     Removed the obsolete parameter source_line from the dcl of error_().
  1    14*                                                   END HISTORY COMMENTS */
  1    15 
  1    16 /* Modified: 6 Jun 1979 by PG to add rank and byte
  1    17* * Modified: 9 Jul 1989 by RW updated the declaration of error_ 
  1    18* */
  1    19 
  1    20 declare	adjust_count	entry(pointer);
  1    21 			/* parameter 1:	(input)	any node pointer		*/
  1    22 
  1    23 declare	bindec		entry(fixed bin(31)) reducible
  1    24 			returns(character(12) aligned);
  1    25 			/* parameter 1:	(input)	bin value			*/
  1    26 			/* return:	(output)	character value with blanks	*/
  1    27 
  1    28 declare	bindec$vs		entry(fixed bin(31)) reducible
  1    29 			returns(character(12) aligned varying);
  1    30 			/* parameter 1:	(input)	binary value		*/
  1    31 			/* return:	(output)	char value without blanks	*/
  1    32 
  1    33 declare	binoct		entry(fixed bin(31)) reducible
  1    34 			returns(char(12) aligned);
  1    35 			/* parameter 1:	(input)	binary value		*/
  1    36 			/* return:	(output)	char value with blanks	*/
  1    37 
  1    38 declare	binary_to_octal_string	entry(fixed bin(31)) reducible
  1    39 			returns(char(12) aligned);
  1    40 			/* parameter 1:	(input)	binary value		*/
  1    41 			/* return:	(output)	right-aligned char value	*/
  1    42 
  1    43 declare	binary_to_octal_var_string	entry(fixed bin(31)) reducible
  1    44 			returns(char(12) varying aligned);
  1    45 			/* parameter 1:	(input)	binary value		*/
  1    46 			/* returns:	(output)	char value without blanks	*/
  1    47 
  1    48 declare	compare_expression	entry(pointer,pointer) reducible
  1    49 			returns(bit(1) aligned);
  1    50 			/* parameter 1:	(input)	any node pointer		*/
  1    51 			/* parameter 2:	(input)	any node pointer		*/
  1    52 			/* return:	(output)	compare bit		*/
  1    53 
  1    54 declare	constant_length	entry (pointer, fixed bin (71))
  1    55 			returns (bit (1) aligned);
  1    56 			/* parameter 1:	(input)	reference node pointer	*/
  1    57 			/* parameter 2:	(input)	value of constant length	*/
  1    58 			/* return:	(output)	"1"b if constant length	*/
  1    59 
  1    60 declare	convert		entry(pointer,bit(36) aligned)
  1    61 			returns(pointer);
  1    62 			/* parameter 1:	(input)	any node pointer		*/
  1    63 			/* parameter 2:	(input)	target type		*/
  1    64 			/* return:	(output)	target value tree pointer	*/
  1    65 
  1    66 declare	convert$to_integer	entry(pointer,bit(36)aligned)
  1    67 			returns(pointer);
  1    68 			/* parameter 1:	(input)	any node pointer		*/
  1    69 			/* parameter 2:	(input)	target type		*/
  1    70 			/* return:	(output)	target value tree pointer	*/
  1    71 
  1    72 declare	convert$from_builtin entry(pointer,bit(36) aligned)
  1    73 			returns(pointer);
  1    74 			/* parameter 1:	(input)	any node pointer		*/
  1    75 			/* parameter 2:	(input)	target type		*/
  1    76 			/* return:	(output)	target value tree pointer	*/
  1    77 
  1    78 declare	convert$validate	entry(pointer,pointer);
  1    79 			/* parameter 1:	(input)	source value tree pointer	*/
  1    80 			/* parameter 2:	(input)	target reference node pointer	*/
  1    81 
  1    82 declare	convert$to_target_fb entry(pointer,pointer)
  1    83 			returns(pointer);
  1    84 			/* parameter 1:	(input)	source value tree pointer	*/
  1    85 			/* parameter 2:	(input)	target reference node pointer	*/
  1    86 			/* return:	(output)	target value tree pointer	*/
  1    87 
  1    88 declare	convert$to_target	entry(pointer,pointer)
  1    89 			returns(pointer);
  1    90 			/* parameter 1:	(input)	source value tree pointer	*/
  1    91 			/* parameter 2:	(input)	target reference node pointer	*/
  1    92 			/* return:	(output)	target value tree pointer	*/
  1    93 
  1    94 declare	copy_expression	entry(pointer unaligned)
  1    95 			returns(pointer);
  1    96 			/* parameter 1:	(input)	any node pointer		*/
  1    97 			/* return:	(output)	any node pointer		*/
  1    98 
  1    99 declare	copy_expression$copy_sons entry(pointer,pointer);
  1   100 			/* parameter 1:	(input)	father symbol node pointer	*/
  1   101 			/* parameter 2:	(input)	stepfather symbol node ptr	*/
  1   102 
  1   103 declare	copy_unique_expression entry(pointer)
  1   104 			returns(pointer);
  1   105 			/* parameter 1:	(input)	any node pointer		*/
  1   106 			/* return:	(output)	any node pointer		*/
  1   107 
  1   108 declare	create_array	entry()
  1   109 			returns(pointer);
  1   110 			/* return:	(output)	array node pointer		*/
  1   111 
  1   112 declare	create_block	entry(bit(9) aligned,pointer)
  1   113 			returns(pointer);
  1   114 			/* parameter 1:	(input)	block type		*/
  1   115 			/* parameter 2:	(input)	father block node pointer	*/
  1   116 			/* return:	(output)	block node pointer		*/
  1   117 
  1   118 declare	create_bound	entry()
  1   119 			returns(pointer);
  1   120 			/* return:	(output)	bound node pointer		*/
  1   121 
  1   122 declare	create_context	entry(pointer,pointer)
  1   123 			returns(pointer);
  1   124 			/* parameter 1:	(input)	block node pointer		*/
  1   125 			/* parameter 2:	(input)	token pointer		*/
  1   126 			/* return:	(output)	context node pointer	*/
  1   127 
  1   128 declare	create_cross_reference entry()
  1   129 			returns(pointer);
  1   130 			/* return:	(output)	cross reference node pointer	*/
  1   131 
  1   132 declare	create_default	entry
  1   133 			returns(pointer);
  1   134 			/* return:	(output)	default node pointer	*/
  1   135 
  1   136 declare	create_identifier	entry()
  1   137 			returns(pointer);
  1   138 			/* return:	(output)	token node pointer		*/
  1   139 
  1   140 declare	create_label	entry(pointer,pointer,bit(3) aligned)
  1   141 			returns(pointer);
  1   142 			/* parameter 1:	(input)	block node pointer		*/
  1   143 			/* parameter 2:	(input)	token node pointer		*/
  1   144 			/* parameter 3:	(input)	declare type		*/
  1   145 			/* return:	(output)	label node pointer		*/
  1   146 
  1   147 declare	create_list	entry(fixed bin(15))
  1   148 			returns(pointer);
  1   149 			/* parameter 1:	(input)	number of list elements	*/
  1   150 			/* return:	(output)	list node pointer		*/
  1   151 
  1   152 declare	create_operator	entry(bit(9) aligned,fixed bin(15))
  1   153 			returns(pointer);
  1   154 			/* parameter 1:	(input)	operator type		*/
  1   155 			/* parameter 2:	(input)	number of operands		*/
  1   156 			/* return:	(output)	operator node pointer	*/
  1   157 
  1   158 declare	create_reference	entry(pointer)
  1   159 			returns(pointer);
  1   160 			/* parameter 1:	(input)	symbol node pointer		*/
  1   161 			/* return:	(output)	reference node pointer	*/
  1   162 
  1   163 declare	create_statement	entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  1   164 			returns(pointer);
  1   165 			/* parameter 1:	(input)	statement type		*/
  1   166 			/* parameter 2:	(input)	block node pointer		*/
  1   167 			/* parameter 3:	(input)	label node pointer		*/
  1   168 			/* parameter 4:	(input)	conditions		*/
  1   169 			/* return:	(output)	statement node pointer	*/
  1   170 
  1   171 declare	create_statement$prologue entry(bit(9) aligned,pointer,pointer,bit(12) aligned)
  1   172 			returns(pointer);
  1   173 			/* parameter 1:	(input)	statement type		*/
  1   174 			/* parameter 2:	(input)	block node pointer		*/
  1   175 			/* parameter 3:	(input)	label node pointer		*/
  1   176 			/* parameter 4:	(input)	conditions		*/
  1   177 			/* return:	(output)	statement node pointer	*/
  1   178 
  1   179 declare	create_storage	entry(fixed bin(15))
  1   180 			returns(pointer);
  1   181 			/* parameter 1:	(input)	number of words		*/
  1   182 			/* return:	(output)	storage block pointer	*/
  1   183 
  1   184 declare	create_symbol	entry(pointer,pointer,bit(3) aligned)
  1   185 			returns(pointer);
  1   186 			/* parameter 1:	(input)	block node pointer		*/
  1   187 			/* parameter 2:	(input)	token node pointer		*/
  1   188 			/* parameter 3:	(input)	declare type		*/
  1   189 			/* return:	(output)	symbol node pointer		*/
  1   190 
  1   191 declare	create_token	entry (character (*), bit (9) aligned)
  1   192 			returns (ptr);
  1   193 			/* parameter 1:	(input)	token string		*/
  1   194 			/* parameter 2:	(input)	token type		*/
  1   195 			/* return:	(output)	token node ptr		*/
  1   196 
  1   197 declare	create_token$init_hash_table entry ();
  1   198 
  1   199 declare	create_token$protected entry (char (*), bit (9) aligned, bit (18) aligned)
  1   200 			returns (ptr);
  1   201 			/* parameter 1:	(input)	token string		*/
  1   202 			/* parameter 2:	(input)	token type		*/
  1   203 			/* parameter 3:	(input)	protected flag		*/
  1   204 			/* return:	(output)	token node ptr		*/
  1   205 
  1   206 declare	decbin		entry(character(*) aligned) reducible
  1   207 			returns(fixed bin(31));
  1   208 			/* parameter 1:	(input)	decimal character string	*/
  1   209 			/* return:	(output)	binary value		*/
  1   210 
  1   211 declare	declare_constant	entry(bit(*) aligned,bit(36) aligned,fixed bin(31),fixed bin(15))
  1   212 			returns(pointer);
  1   213 			/* parameter 1:	(input)	value			*/
  1   214 			/* parameter 2:	(input)	type			*/
  1   215 			/* parameter 3:	(input)	size			*/
  1   216 			/* parameter 4:	(input)	scale			*/
  1   217 			/* return:	(output)	reference node pointer	*/
  1   218 
  1   219 declare	declare_constant$bit entry(bit(*) aligned)
  1   220 			returns(pointer);
  1   221 			/* parameter 1:	(input)	bit			*/
  1   222 			/* return:	(output)	reference node pointer	*/
  1   223 
  1   224 declare	declare_constant$char entry(character(*) aligned)
  1   225 			returns(pointer);
  1   226 			/* parameter 1:	(input)	character			*/
  1   227 			/* return:	(output)	reference node pointer	*/
  1   228 
  1   229 declare	declare_constant$desc entry(bit(*) aligned)
  1   230 			returns(pointer);
  1   231 			/* parameter 1:	(input)	descriptor bit value	*/
  1   232 			/* return:	(output)	reference node pointer	*/
  1   233 
  1   234 declare	declare_constant$integer entry(fixed bin(31))	/* note...should really be fixed bin(24) */
  1   235 			returns(pointer);
  1   236 			/* parameter 1:	(input)	integer			*/
  1   237 			/* return:	(output)	reference node pointer	*/
  1   238 
  1   239 declare	declare_descriptor	entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  1   240 			returns(pointer);
  1   241 			/* parameter 1:	(input)	block node pointer		*/
  1   242 			/* parameter 2:	(input)	statement node pointer	*/
  1   243 			/* parameter 3:	(input)	symbol node pointer		*/
  1   244 			/* parameter 4:	(input)	loc pointer		*/
  1   245 			/* parameter 5:	(input)	array descriptor bit
  1   246*						cross_section bit	*/
  1   247 			/* return:	(output)	reference node pointer	*/
  1   248 
  1   249 declare	declare_descriptor$ctl entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  1   250 			returns(pointer);
  1   251 			/* parameter 1:	(input)	block node pointer	*/
  1   252 			/* parameter 2:	(input)	statement node pointer 	*/
  1   253 			/* parameter 3:	(input)	symbol node pointer	*/
  1   254 			/* parameter 4:	(input)	loc pointer	*/
  1   255 			/* parameter 5:	(input)	array descriptor bit
  1   256*						cross_section bit	*/
  1   257 			/* return:	(output)	reference node pointer	*/
  1   258 
  1   259 declare	declare_descriptor$param entry(pointer,pointer,pointer,pointer,bit(2) aligned)
  1   260 			returns(pointer);
  1   261 			/* parameter 1:	(input)	block node pointer		*/
  1   262 			/* parameter 2:	(input)	statement node pointer	*/
  1   263 			/* parameter 3:	(input)	symbol node pointer		*/
  1   264 			/* parameter 4:	(input)	loc pointer		*/
  1   265 			/* parameter 5:	(input)	array descriptor bit
  1   266*						cross_section bit	*/
  1   267 			/* return:	(output)	reference node pointer	*/
  1   268 
  1   269 declare	declare_integer	entry(pointer)
  1   270 			returns(pointer);
  1   271 			/* parameter 1:	(input)	block node pointer		*/
  1   272 			/* return:	(output)	reference node pointer 	*/
  1   273 
  1   274 declare	declare_picture	entry(char(*)aligned,pointer,fixed bin(15));
  1   275 			/* parameter 1:	(input)	picture string		*/
  1   276 			/* parameter 2:	(input)	symbol node pointer		*/
  1   277 			/* parameter 3:	(output)	error code, if any		*/
  1   278 
  1   279 declare	declare_picture_temp entry(char(*) aligned,fixed bin(31),bit(1) aligned,bit(1) aligned)
  1   280 			returns(pointer);
  1   281 			/* parameter 1:	(input)	picture string		*/
  1   282 			/* parameter 2:	(input)	scalefactor of picture	*/
  1   283 			/* parameter 3:	(input)	="1"b => complex picture	*/
  1   284 			/* parameter 4:	(input)	="1"b => unaligned temp	*/
  1   285 			/* return:	(output)	reference node pointer	*/
  1   286 
  1   287 declare	declare_pointer	entry(pointer)
  1   288 			returns(pointer);
  1   289 			/* parameter 1:	(input)	block node pointer		*/
  1   290 			/* return:	(output)	reference node pointer	*/
  1   291 
  1   292 declare	declare_temporary	entry(bit(36) aligned,fixed bin(31),fixed bin(15),pointer)
  1   293 			returns(pointer);
  1   294 			/* parameter 1:	(input)	type			*/
  1   295 			/* parameter 2:	(input)	precision			*/
  1   296 			/* parameter 3:	(input)	scale			*/
  1   297 			/* parameter 4:	(input)	length			*/
  1   298 			/* return:	(output)	reference node pointer	*/
  1   299 
  1   300 declare	decode_node_id	entry(pointer,bit(1) aligned)
  1   301 			returns(char(120) varying);
  1   302 			/* parameter 1:	(input)	node pointer		*/
  1   303 			/* parameter 2:	(input)	="1"b => capitals		*/
  1   304 			/* return:	(output)	source line id		*/
  1   305 
  1   306 declare	decode_source_id	entry(
  2     1 			1 structure unaligned,
  2     2 			  2 /* file_number */	bit(8),
  2     3 			  2 /* line_number */	bit(14),
  2     4 			  2 /* stmt_number */	bit(5),
  1   307 
  1   308 			bit(1) aligned)
  1   309 			returns(char(120) varying);
  1   310 			/* parameter 1:	(input)	source id			*/
  1   311 			/* parameter 2:	(input)	="1"b => capitals		*/
  1   312 			/* return:	(output)	source line id		*/
  1   313 
  1   314 declare	error		entry(fixed bin(15),pointer,pointer);
  1   315 			/* parameter 1:	(input)	error number		*/
  1   316 			/* parameter 2:	(input)	statement node pointer or null*/
  1   317 			/* parameter 3:	(input)	token node pointer 		*/
  1   318 
  1   319 declare	error$omit_text	entry(fixed bin(15),pointer,pointer);
  1   320 			/* parameter 1:	(input)	error number		*/
  1   321 			/* parameter 2:	(input)	statement node pointer or null*/
  1   322 			/* parameter 3:	(input)	token node pointer 		*/
  1   323 
  1   324 declare	error_		entry(fixed bin(15),
  3     1 			1 structure unaligned,
  3     2 			  2 /* file_number */	bit(8),
  3     3 			  2 /* line_number */	bit(14),
  3     4 			  2 /* stmt_number */	bit(5),
  1   325 
  1   326 			pointer,fixed bin(8),fixed bin(23),fixed bin(11));
  1   327 			/* parameter 1:	(input)	error number		*/
  1   328 			/* parameter 2:	(input)	statement id		*/
  1   329 			/* parameter 3:	(input)	any node pointer		*/
  1   330 			/* parameter 4:	(input)	source segment		*/
  1   331 			/* parameter 5:	(input)	source starting character	*/
  1   332 			/* parameter 6:	(input)	source length		*/
  1   333 
  1   334 declare	error_$no_text	entry(fixed bin(15),
  4     1 			1 structure unaligned,
  4     2 			  2 /* file_number */	bit(8),
  4     3 			  2 /* line_number */	bit(14),
  4     4 			  2 /* stmt_number */	bit(5),
  1   335 
  1   336 			pointer);
  1   337 			/* parameter 1:	(input)	error number		*/
  1   338 			/* parameter 2:	(input)	statement id		*/
  1   339 			/* parameter 3:	(input)	any node pointer		*/
  1   340 
  1   341 declare	error_$initialize_error entry();
  1   342 
  1   343 declare	error_$finish	entry();
  1   344 
  1   345 declare	free_node		entry(pointer);
  1   346 			/* parameter 1:	any node pointer			*/
  1   347 
  1   348 declare	get_array_size	entry(pointer,fixed bin(3));
  1   349 			/* parameter 1:	(input)	symbol node pointer		*/
  1   350 			/* parameter 2:	(input)	units			*/
  1   351 
  1   352 declare	get_size		entry(pointer);
  1   353 			/* parameter 1:	(input)	symbol node pointer		*/
  1   354 
  1   355 declare	merge_attributes	external entry(pointer,pointer)
  1   356 			returns(bit(1) aligned);
  1   357 			/* parameter 1:	(input)	target symbol node pointer */
  1   358 			/* parameter 2:	(input)	source symbol node pointer */
  1   359 			/* return:	(output)	"1"b if merge was unsuccessful */
  1   360 
  1   361 declare	optimizer		entry(pointer);
  1   362 			/* parameter 1:	(input)	root pointer		*/
  1   363 
  1   364 declare	parse_error	entry(fixed bin(15),pointer);
  1   365 			/* parameter 1:	(input)	error number		*/
  1   366 			/* parameter 2:	(input)	any node pointer		*/
  1   367 
  1   368 declare	parse_error$no_text	entry(fixed bin(15),pointer);
  1   369 			/* parameter 1:	(input)	error number		*/
  1   370 			/* parameter 2:	(input)	any node pointer		*/
  1   371 
  1   372 declare	pl1_error_print$write_out
  1   373 			entry(fixed bin(15),
  5     1 			1 structure unaligned,
  5     2 			  2 /* file_number */	bit(8),
  5     3 			  2 /* line_number */	bit(14),
  5     4 			  2 /* stmt_number */	bit(5),
  1   374 
  1   375 			pointer,fixed bin(11),fixed bin(31),fixed bin(31),fixed bin(15));
  1   376 			/* parameter 1:	(input)	error number		*/
  1   377 			/* parameter 2:	(input)	statement identification	*/
  1   378 			/* parameter 3:	(input)	any node pointer		*/
  1   379 			/* parameter 4:	(input)	source segment		*/
  1   380 			/* parameter 5:	(input)	source character index	*/
  1   381 			/* parameter 6:	(input)	source length		*/
  1   382 			/* parameter 7:	(input)	source line		*/
  1   383 
  1   384 declare	pl1_error_print$listing_segment
  1   385 			entry(fixed bin(15),
  6     1 			1 structure unaligned,
  6     2 			  2 /* file_number */	bit(8),
  6     3 			  2 /* line_number */	bit(14),
  6     4 			  2 /* stmt_number */	bit(5),
  1   386 
  1   387 			pointer);
  1   388 			/* parameter 1:	(input)	error number		*/
  1   389 			/* parameter 2:	(input)	statement identification	*/
  1   390 			/* parameter 3:	(input)	token node pointer		*/
  1   391 
  1   392 declare	pl1_print$varying		entry(character(*) aligned varying);
  1   393 			/* parameter 1:	(input)	string			*/
  1   394 
  1   395 declare	pl1_print$varying_nl	entry(character(*) aligned varying);
  1   396 			/* parameter 1:	(input)	string			*/
  1   397 
  1   398 declare	pl1_print$non_varying	entry(character(*) aligned,fixed bin(31));
  1   399 			/* parameter 1:	(input)	string			*/
  1   400 			/* parameter 2:	(input)	string length or 0		*/
  1   401 
  1   402 declare	pl1_print$non_varying_nl	entry(character(*) aligned,fixed bin(31));
  1   403 			/* parameter 1:	(input)	string			*/
  1   404 			/* parameter 2:	(input)	string length or 0		*/
  1   405 
  1   406 declare	pl1_print$string_pointer	entry(pointer,fixed bin(31));
  1   407 			/* parameter 1:	(input)	string pointer		*/
  1   408 			/* parameter 2:	(input)	string size		*/
  1   409 
  1   410 declare	pl1_print$string_pointer_nl	entry(pointer,fixed bin(31));
  1   411 			/* parameter 1:	(input)	string pointer		*/
  1   412 			/* parameter 2:	(input)	string length or 0		*/
  1   413 
  1   414 declare	pl1_print$unaligned_nl	entry(character(*) unaligned,fixed bin(31));
  1   415 			/* parameter 1:	(input)	string			*/
  1   416 			/* parameter 2:	(input)	length			*/
  1   417 
  1   418 declare	pl1_print$for_lex	entry (ptr, fixed bin (14), fixed bin (21), fixed bin (21), bit (1) aligned, bit (1) aligned);
  1   419 			/* parameter 1:	(input)	ptr to base of source segment	*/
  1   420 			/* parameter 2:	(input)	line number		*/
  1   421 			/* parameter 3:	(input)	starting offset in source seg	*/
  1   422 			/* parameter 4:	(input)	number of chars to copy	*/
  1   423 			/* parameter 5:	(input)	ON iff shd print line number	*/
  1   424 			/* parameter 6:	(input)	ON iff line begins in comment	*/
  1   425 
  1   426 declare	refer_extent	entry(pointer,pointer);
  1   427 			/* parameter 1:	(input/output)	null,ref node,op node pointer	*/
  1   428 			/* parameter 2:	(input)	null,ref node,op node pointer	*/
  1   429 
  1   430 declare	reserve$clear	entry()
  1   431 			returns(pointer);
  1   432 			/* return:	(output)	pointer			*/
  1   433 
  1   434 declare	reserve$declare_lib	entry(fixed bin(15))
  1   435 			returns(pointer);
  1   436 			/* parameter 1:	(input)	builtin function number	*/
  1   437 			/* return:	(output)	pointer			*/
  1   438 
  1   439 declare	reserve$read_lib	entry(fixed bin(15))
  1   440 			returns(pointer);
  1   441 			/* parameter 1:	(input)	builtin function number	*/
  1   442 			/* return:	(output)	pointer			*/
  1   443 
  1   444 declare	semantic_translator	entry();
  1   445 
  1   446 declare	semantic_translator$abort entry(fixed bin(15),pointer);
  1   447 			/* parameter 1:	(input)	error number		*/
  1   448 			/* parameter 2:	(input)	any node pointer		*/
  1   449 
  1   450 declare	semantic_translator$error entry(fixed bin(15),pointer);
  1   451 			/* parameter 1:	(input)	error number		*/
  1   452 			/* parameter 2:	(input)	any node pointer		*/
  1   453 
  1   454 declare	share_expression	entry(ptr)
  1   455 			returns(ptr);
  1   456 			/* parameter 1:	(input)	usually operator node pointer	*/
  1   457 			/* return:	(output)	tree pointer or null	*/
  1   458 
  1   459 declare	token_to_binary	entry(ptr) reducible
  1   460 			returns(fixed bin(31));
  1   461 			/* parameter 1:	(input)	token node pointer		*/
  1   462 			/* return:	(output)	converted binary value	*/
  1   463 
  1   464 /* END INCLUDE FILE ... language_utility.incl.pl1 */
       40 
  7     1 /* BEGIN INCLUDE FILE ... symbol.incl.pl1 */
  7     2 
  7     3 dcl	1 symbol			based aligned,
  7     4 	2 node_type		bit(9) unal,
  7     5 	2 source_id		structure unal,
  7     6 	  3 file_number		bit(8),
  7     7 	  3 line_number		bit(14),
  7     8 	  3 statement_number	bit(5),
  7     9 	2 location		fixed(18) unal unsigned,
  7    10 	2 allocated		bit(1) unal,
  7    11 	2 dcl_type		bit(3) unal,
  7    12 	2 reserved		bit(6) unal,
  7    13 	2 pix			unal,
  7    14 	  3 pic_fixed		bit(1) unal,
  7    15 	  3 pic_float		bit(1) unal,
  7    16 	  3 pic_char		bit(1) unal,
  7    17 	  3 pic_scale		fixed(7) unal,
  7    18 	  3 pic_size		fixed(7) unal,
  7    19 	2 level			fixed(8) unal,
  7    20 	2 boundary		fixed(3) unal,
  7    21 	2 size_units		fixed(3) unal,
  7    22 	2 scale			fixed(7) unal,
  7    23 	2 runtime			bit(18) unal,
  7    24 	2 runtime_offset		bit(18) unal,
  7    25 	2 block_node		ptr unal,
  7    26 	2 token			ptr unal,
  7    27 	2 next			ptr unal,
  7    28 	2 multi_use		ptr unal,
  7    29 	2 cross_references		ptr unal,
  7    30 	2 initial			ptr unal,
  7    31 	2 array			ptr unal,
  7    32 	2 descriptor		ptr unal,
  7    33 	2 equivalence		ptr unal,
  7    34 	2 reference		ptr unal,
  7    35 	2 general			ptr unal,
  7    36 	2 father			ptr unal,
  7    37 	2 brother			ptr unal,
  7    38 	2 son			ptr unal,
  7    39 	2 word_size		ptr unal,
  7    40 	2 bit_size		ptr unal,
  7    41 	2 dcl_size		ptr unal,
  7    42 	2 symtab_size		ptr unal,
  7    43 	2 c_word_size		fixed(24),
  7    44 	2 c_bit_size		fixed(24),
  7    45 	2 c_dcl_size		fixed(24),
  7    46 
  7    47 	2 attributes		structure aligned,
  7    48 	  3 data_type		structure unal,
  7    49 	    4 structure		bit(1) ,
  7    50 	    4 fixed		bit(1),
  7    51 	    4 float		bit(1),
  7    52 	    4 bit			bit(1),
  7    53 	    4 char		bit(1),
  7    54 	    4 ptr			bit(1),
  7    55 	    4 offset		bit(1),
  7    56 	    4 area		bit(1),
  7    57 	    4 label		bit(1),
  7    58 	    4 entry		bit(1),
  7    59 	    4 file		bit(1),
  7    60 	    4 arg_descriptor	bit(1),
  7    61 	    4 storage_block		bit(1),
  7    62 	    4 explicit_packed	bit(1), /* options(packed) */
  7    63 	    4 condition		bit(1),
  7    64 	    4 format		bit(1),
  7    65 	    4 builtin		bit(1),
  7    66 	    4 generic		bit(1),
  7    67 	    4 picture		bit(1),
  7    68 
  7    69 	  3 misc_attributes		structure unal,
  7    70 	    4 dimensioned		bit(1),
  7    71 	    4 initialed		bit(1),
  7    72 	    4 aligned		bit(1),
  7    73 	    4 unaligned		bit(1),
  7    74 	    4 signed		bit(1),
  7    75 	    4 unsigned		bit(1),
  7    76 	    4 precision		bit(1),
  7    77 	    4 varying		bit(1),
  7    78 	    4 local		bit(1),
  7    79 	    4 decimal		bit(1),
  7    80 	    4 binary		bit(1),
  7    81 	    4 real		bit(1),
  7    82 	    4 complex		bit(1),
  7    83 	    4 variable		bit(1),
  7    84 	    4 reducible		bit(1),
  7    85 	    4 irreducible		bit(1),
  7    86 	    4 returns		bit(1),
  7    87 	    4 position		bit(1),
  7    88 	    4 internal		bit(1),
  7    89 	    4 external		bit(1),
  7    90 	    4 like		bit(1),
  7    91 	    4 member		bit(1),
  7    92 	    4 non_varying		bit(1),
  7    93 	    4 options		bit(1),
  7    94 	    4 variable_arg_list 	bit(1),		/* options(variable) */
  7    95 	    4 alloc_in_text		bit(1),		/* options(constant) */
  7    96 
  7    97 	  3 storage_class		structure unal,
  7    98 	    4 auto		bit(1),
  7    99 	    4 based		bit(1),
  7   100 	    4 static		bit(1),
  7   101 	    4 controlled		bit(1),
  7   102 	    4 defined		bit(1),
  7   103 	    4 parameter		bit(1),
  7   104 	    4 param_desc		bit(1),
  7   105 	    4 constant		bit(1),
  7   106 	    4 temporary		bit(1),
  7   107 	    4 return_value		bit(1),
  7   108 
  7   109 	  3 file_attributes		structure unal,
  7   110 	    4 print		bit(1),
  7   111 	    4 input		bit(1),
  7   112 	    4 output		bit(1),
  7   113 	    4 update		bit(1),
  7   114 	    4 stream		bit(1),
  7   115 	    4 reserved_1		bit(1),
  7   116 	    4 record		bit(1),
  7   117 	    4 sequential		bit(1),
  7   118 	    4 direct		bit(1),
  7   119 	    4 interactive		bit(1),		/* env(interactive) */
  7   120 	    4 reserved_2		bit(1),
  7   121 	    4 reserved_3		bit(1),
  7   122 	    4 stringvalue		bit(1),		/* env(stringvalue) */
  7   123 	    4 keyed		bit(1),
  7   124 	    4 reserved_4		bit(1),
  7   125 	    4 environment		bit(1),
  7   126 
  7   127 	  3 compiler_developed	structure unal,
  7   128 	    4 aliasable		bit(1),
  7   129 	    4 packed		bit(1),
  7   130 	    4 passed_as_arg		bit(1),
  7   131 	    4 allocate		bit(1),
  7   132 	    4 set			bit(1),
  7   133 	    4 exp_extents		bit(1),
  7   134 	    4 refer_extents		bit(1),
  7   135 	    4 star_extents		bit(1),
  7   136 	    4 isub		bit(1),
  7   137 	    4 put_in_symtab		bit(1),
  7   138 	    4 contiguous		bit(1),
  7   139 	    4 put_data		bit(1),
  7   140 	    4 overlayed		bit(1),
  7   141 	    4 error		bit(1),
  7   142 	    4 symtab_processed	bit(1),
  7   143 	    4 overlayed_by_builtin	bit(1),
  7   144 	    4 defaulted		bit(1),
  7   145 	    4 connected		bit(1);
  7   146 
  7   147 /* END INCLUDE FILE ... symbol.incl.pl1 */
       41 
  8     1 /* BEGIN INCLUDE FILE ... block.incl.pl1 */
  8     2 /* Modified 22 Ocober 1980 by M. N. Davidoff to increase max block.number to 511 */
  8     3 /* format: style3,idind30 */
  8     4 
  8     5 declare	1 block			aligned based,
  8     6 	  2 node_type		bit (9) unaligned,
  8     7 	  2 source_id		structure unaligned,
  8     8 	    3 file_number		bit (8),
  8     9 	    3 line_number		bit (14),
  8    10 	    3 statement_number	bit (5),
  8    11 	  2 father		ptr unaligned,
  8    12 	  2 brother		ptr unaligned,
  8    13 	  2 son			ptr unaligned,
  8    14 	  2 declaration		ptr unaligned,
  8    15 	  2 end_declaration		ptr unaligned,
  8    16 	  2 default		ptr unaligned,
  8    17 	  2 end_default		ptr unaligned,
  8    18 	  2 context		ptr unaligned,
  8    19 	  2 prologue		ptr unaligned,
  8    20 	  2 end_prologue		ptr unaligned,
  8    21 	  2 main			ptr unaligned,
  8    22 	  2 end_main		ptr unaligned,
  8    23 	  2 return_values		ptr unaligned,
  8    24 	  2 return_count		ptr unaligned,
  8    25 	  2 plio_ps		ptr unaligned,
  8    26 	  2 plio_fa		ptr unaligned,
  8    27 	  2 plio_ffsb		ptr unaligned,
  8    28 	  2 plio_ssl		ptr unaligned,
  8    29 	  2 plio_fab2		ptr unaligned,
  8    30 	  2 block_type		bit (9) unaligned,
  8    31 	  2 prefix		bit (12) unaligned,
  8    32 	  2 like_attribute		bit (1) unaligned,
  8    33 	  2 no_stack		bit (1) unaligned,
  8    34 	  2 get_data		bit (1) unaligned,
  8    35 	  2 flush_at_call		bit (1) unaligned,
  8    36 	  2 processed		bit (1) unaligned,
  8    37 	  2 text_displayed		bit (1) unaligned,
  8    38 	  2 number		fixed bin (9) unsigned unaligned,
  8    39 	  2 free_temps		dimension (3) ptr,	/* these fields are used by the code generator */
  8    40 	  2 temp_list		ptr,
  8    41 	  2 entry_list		ptr,
  8    42 	  2 o_and_s		ptr,
  8    43 	  2 why_nonquick		aligned,
  8    44 	    3 auto_adjustable_storage bit (1) unaligned,
  8    45 	    3 returns_star_extents	bit (1) unaligned,
  8    46 	    3 stack_extended_by_args	bit (1) unaligned,
  8    47 	    3 invoked_by_format	bit (1) unaligned,
  8    48 	    3 format_statement	bit (1) unaligned,
  8    49 	    3 io_statements		bit (1) unaligned,
  8    50 	    3 assigned_to_entry_var	bit (1) unaligned,
  8    51 	    3 condition_statements	bit (1) unaligned,
  8    52 	    3 no_owner		bit (1) unaligned,
  8    53 	    3 recursive_call	bit (1) unaligned,
  8    54 	    3 options_non_quick	bit (1) unaligned,
  8    55 	    3 options_variable	bit (1) unaligned,
  8    56 	    3 never_referenced	bit (1) unaligned,
  8    57 	    3 pad_nonquick		bit (5) unaligned,
  8    58 	  2 prologue_flag		bit (1) unaligned,
  8    59 	  2 options_main		bit (1) unaligned,
  8    60 	  2 pad			bit (16) unaligned,
  8    61 	  2 number_of_entries	fixed bin (17),
  8    62 	  2 level			fixed bin (17),
  8    63 	  2 last_auto_loc		fixed bin (17),
  8    64 	  2 symbol_block		fixed bin (17),
  8    65 	  2 entry_info		fixed bin (18),
  8    66 	  2 enter			structure unaligned,
  8    67 	    3 start		fixed bin (17),
  8    68 	    3 end			fixed bin (17),
  8    69 	  2 leave			structure unaligned,
  8    70 	    3 start		fixed bin (17),
  8    71 	    3 end			fixed bin (17),
  8    72 	  2 owner			ptr;
  8    73 
  8    74 declare	max_block_number		fixed bin internal static options (constant) initial (511);
  8    75 
  8    76 /* END INCLUDE FILE ... block.incl.pl1 */
       42 
  9     1 /* ***********************************************************
  9     2*   *                                                         *
  9     3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
  9     4*   *                                                         *
  9     5*   *********************************************************** */
  9     6 /* BEGIN INCLUDE FILE ... statement.incl.pl1 */
  9     7 /* Internal interface of the PL/I compiler */
  9     8 
  9     9 dcl	1 statement		based aligned,
  9    10 	2 node_type		bit(9) unaligned,
  9    11 	2 source_id		structure unaligned,
  9    12 	  3 file_number		bit(8),
  9    13 	  3 line_number		bit(14),
  9    14 	  3 statement_number	bit(5),
  9    15 	2 next			ptr unaligned,
  9    16 	2 back			ptr unaligned,
  9    17 	2 root			ptr unaligned,
  9    18 	2 labels			ptr unaligned,
  9    19 	2 reference_list		ptr unaligned,
  9    20 	2 state_list		ptr unaligned,
  9    21 	2 reference_count		fixed(17) unaligned,
  9    22 	2 ref_count_copy		fixed(17) unaligned,
  9    23 	2 object			structure unaligned,
  9    24 	  3 start			fixed(17),
  9    25 	  3 finish		fixed(17),
  9    26 	2 source			structure unaligned,
  9    27 	  3 segment		fixed(11),
  9    28 	  3 start			fixed(23),
  9    29 	  3 length		fixed(11),
  9    30 	2 prefix			bit(12) unaligned,
  9    31 	2 optimized		bit(1) unaligned,
  9    32 	2 free_temps		bit(1) unaligned,
  9    33 	2 LHS_in_RHS		bit(1) unaligned,
  9    34 	2 statement_type		bit(9) unaligned,
  9    35 	2 bits			structure unaligned,
  9    36 	  3 processed		bit(1) unaligned,
  9    37 	  3 put_in_profile		bit(1) unaligned,
  9    38 	  3 generated		bit(1) unaligned,
  9    39 	  3 snap			bit(1) unaligned,
  9    40 	  3 system		bit(1) unaligned,
  9    41 	  3 irreducible		bit(1) unaligned,
  9    42 	  3 checked		bit(1) unaligned,
  9    43 	  3 save_temps		bit(1) unaligned,
  9    44 	  3 suppress_warnings	bit(1) unaligned,
  9    45 	  3 force_nonquick		bit(1) unaligned,
  9    46 	  3 expanded_by_name	bit(1) unaligned,
  9    47 	  3 begins_loop		bit(1) unaligned,
  9    48 	  3 pad			bit(24) unaligned;
  9    49 
  9    50 /* END INCLUDE FILE ... statement.incl.pl1 */
       43 
 10     1 	/* statement types */
 10     2 
 10     3 dcl (	unknown_statement		initial("000000000"b),
 10     4 	allocate_statement		initial("000000001"b),
 10     5 	assignment_statement	initial("000000010"b),
 10     6 	begin_statement		initial("000000011"b),
 10     7 	call_statement		initial("000000100"b),
 10     8 	close_statement		initial("000000101"b),
 10     9 	declare_statement		initial("000000110"b),
 10    10 	lock_statement		initial("000000111"b),
 10    11 	delete_statement		initial("000001000"b),
 10    12 	display_statement		initial("000001001"b),
 10    13 	do_statement		initial("000001010"b),
 10    14 	else_clause		initial("000001011"b),
 10    15 	end_statement		initial("000001100"b),
 10    16 	entry_statement		initial("000001101"b),
 10    17 	exit_statement		initial("000001110"b),
 10    18 	format_statement		initial("000001111"b),
 10    19 	free_statement		initial("000010000"b),
 10    20 	get_statement		initial("000010001"b),
 10    21 	goto_statement		initial("000010010"b),
 10    22 	if_statement		initial("000010011"b),
 10    23 	locate_statement		initial("000010100"b),
 10    24 	null_statement		initial("000010101"b),
 10    25 	on_statement		initial("000010110"b),
 10    26 	open_statement		initial("000010111"b),
 10    27 	procedure_statement 	initial("000011000"b),
 10    28 	put_statement		initial("000011001"b),
 10    29 	read_statement		initial("000011010"b),
 10    30 	return_statement		initial("000011011"b),
 10    31 	revert_statement		initial("000011100"b),
 10    32 	rewrite_statement		initial("000011101"b),
 10    33 	signal_statement		initial("000011110"b),
 10    34 	stop_statement		initial("000011111"b),
 10    35 	system_on_unit		initial("000100000"b),
 10    36 	unlock_statement		initial("000100001"b),
 10    37 	wait_statement		initial("000100010"b),
 10    38 	write_statement		initial("000100011"b),
 10    39 	default_statement		initial("000100100"b),
 10    40 	continue_statement		initial("000100101"b)) bit(9) internal static aligned options(constant);
       44 
 11     1 /* BEGIN INCLUDE FILE ... nodes.incl.pl1 */
 11     2 
 11     3 /* Modified: 26 Dec 1979 by PCK to implement by name assignment */
 11     4 
 11     5 dcl (	block_node		initial("000000001"b),
 11     6 	statement_node		initial("000000010"b),
 11     7 	operator_node		initial("000000011"b),
 11     8 	reference_node		initial("000000100"b),
 11     9 	token_node		initial("000000101"b),
 11    10 	symbol_node		initial("000000110"b),
 11    11 	context_node		initial("000000111"b),
 11    12 	array_node		initial("000001000"b),
 11    13 	bound_node		initial("000001001"b),
 11    14 	format_value_node		initial("000001010"b),
 11    15 	list_node			initial("000001011"b),
 11    16 	default_node		initial("000001100"b),
 11    17 	machine_state_node		initial("000001101"b),
 11    18 	source_node		initial("000001110"b),
 11    19 	label_node		initial("000001111"b),
 11    20 	cross_reference_node	initial("000010000"b),
 11    21 	sf_par_node		initial("000010001"b),
 11    22 	temporary_node		initial("000010010"b),
 11    23 	label_array_element_node	initial("000010011"b),
 11    24 	by_name_agg_node		initial("000010100"b))
 11    25 				bit(9) internal static aligned options(constant);
 11    26 
 11    27 dcl	1 node			based aligned,
 11    28 	2 type			unal bit(9),
 11    29 	2 source_id		unal structure,
 11    30 	  3 file_number		bit(8),
 11    31 	  3 line_number		bit(14),
 11    32 	  3 statement_number	bit(5);
 11    33 
 11    34 /* END INCLUDE FILE ... nodes.incl.pl1 */
       45 
 12     1 /* BEGIN INCLUDE FILE ... reference.incl.pl1 */
 12     2 
 12     3 dcl	1 reference		based aligned,
 12     4 	2 node_type		bit(9) unaligned,
 12     5 	2 array_ref		bit(1) unaligned,
 12     6 	2 varying_ref		bit(1) unaligned,
 12     7 	2 shared			bit(1) unaligned,
 12     8 	2 put_data_sw		bit(1) unaligned,
 12     9 	2 processed		bit(1) unaligned,
 12    10 	2 units			fixed(3) unaligned,
 12    11 	2 ref_count		fixed(17) unaligned,
 12    12 	2 c_offset		fixed(24),
 12    13 	2 c_length		fixed(24),
 12    14 	2 symbol			ptr unaligned,
 12    15 	2 qualifier		ptr unaligned,
 12    16 	2 offset			ptr unaligned,
 12    17 	2 length			ptr unaligned,
 12    18 	2 subscript_list		ptr unaligned,
 12    19 						/* these fields are used by the 645 code generator */
 12    20 	2 address			structure unaligned,
 12    21 	  3 base			bit(3),
 12    22 	  3 offset		bit(15),
 12    23 	  3 op			bit(9),
 12    24 	  3 no_address		bit(1),
 12    25 	  3 inhibit		bit(1),
 12    26 	  3 ext_base		bit(1),
 12    27 	  3 tag			bit(6),
 12    28 	2 info			structure unaligned,
 12    29 	  3 address_in		structure,
 12    30 	    4 b			dimension(0:7) bit(1),
 12    31 	    4 storage		bit(1),
 12    32 	  3 value_in		structure,
 12    33 	    4 a			bit(1),
 12    34 	    4 q			bit(1),
 12    35 	    4 aq			bit(1),
 12    36 	    4 string_aq		bit(1),
 12    37 	    4 complex_aq		bit(1),
 12    38 	    4 decimal_aq		bit(1),
 12    39 	    4 b			dimension(0:7) bit(1),
 12    40 	    4 storage		bit(1),
 12    41 	    4 indicators		bit(1),
 12    42 	    4 x			dimension(0:7) bit(1),
 12    43 	  3 other			structure,
 12    44 	    4 big_offset		bit(1),
 12    45 	    4 big_length		bit(1),
 12    46 	    4 modword_in_offset	bit(1),
 12    47 	2 data_type		fixed(5) unaligned,
 12    48 	2 bits			structure unaligned,
 12    49 	  3 padded_ref		bit(1),
 12    50 	  3 aligned_ref		bit(1),
 12    51 	  3 long_ref		bit(1),
 12    52 	  3 forward_ref		bit(1),
 12    53 	  3 ic_ref		bit(1),
 12    54 	  3 temp_ref		bit(1),
 12    55 	  3 defined_ref		bit(1),
 12    56 	  3 evaluated		bit(1),
 12    57 	  3 allocate		bit(1),
 12    58 	  3 allocated		bit(1),
 12    59 	  3 aliasable		bit(1),
 12    60 	  3 even			bit(1),
 12    61 	  3 perm_address		bit(1),
 12    62 	  3 aggregate		bit(1),
 12    63 	  3 hit_zero		bit(1),
 12    64 	  3 dont_save		bit(1),
 12    65 	  3 fo_in_qual		bit(1),
 12    66 	  3 hard_to_load		bit(1),
 12    67 	2 relocation		bit(12) unaligned,
 12    68 	2 more_bits		structure unaligned,
 12    69 	  3 substr		bit(1),
 12    70 	  3 padded_for_store_ref	bit(1),
 12    71 	  3 aligned_for_store_ref	bit(1),
 12    72 	  3 mbz			bit(15),
 12    73 	2 store_ins		bit(18) unaligned;
 12    74 
 12    75 /* END INCLUDE FILE ... reference.incl.pl1 */
       46 
 13     1 /* BEGIN INCLUDE FILE ... token.incl.pl1 */
 13     2 
 13     3 dcl	1 token			based aligned,
 13     4 	2 node_type		bit(9) unaligned,
 13     5 	2 type			bit(9) unaligned,
 13     6 	2 loc			bit(18) unaligned,	/* symtab offset for identifiers, "p" flag for constants */
 13     7 	2 declaration		ptr unaligned,
 13     8 	2 next			ptr unaligned,
 13     9 	2 size			fixed(9),
 13    10 	2 string			char(n refer(token.size));
 13    11 
 13    12 /* END INCLUDE FILE ... token.incl.pl1 */
       47 
 14     1 /* BEGIN INCLUDE FILE ... operator.incl.pl1 */
 14     2 
 14     3 /*	Modified: 2 Apr 1980 by PCK to add max_number_of_operands */
 14     4 
 14     5 /* format: style3 */
 14     6 dcl	1 operator	based aligned,
 14     7 	  2 node_type	bit (9) unaligned,
 14     8 	  2 op_code	bit (9) unaligned,
 14     9 	  2 shared	bit (1) unaligned,
 14    10 	  2 processed	bit (1) unaligned,
 14    11 	  2 optimized	bit (1) unaligned,
 14    12 	  2 number	fixed (14) unaligned,
 14    13 	  2 operand	dimension (n refer (operator.number)) ptr unaligned;
 14    14 
 14    15 dcl	max_number_of_operands
 14    16 			fixed bin (15) int static options (constant) initial (32767);
 14    17 
 14    18 /* END INCLUDE FILE ... operator.incl.pl1 */
       48 
 15     1 /* BEGIN INCLUDE FILE ... op_codes.incl.pl1 */
 15     2 
 15     3 /* Modified: 25 Apr 1979 by PCK 4-bit decimal */
 15     4 /* Modified: 6 Jun 1979 by PG to add rank and byte */
 15     5 /* Modified: 26 Dec 1979 by PCK to add assign_by_name */
 15     6 /* Modified: 26 July 82 BIM wordno, segno */
 15     7 
 15     8 dcl (	add		initial("000010001"b),	/* opnd(1) <- opnd(2)+opnd(3)		*/
 15     9 	sub		initial("000010010"b),	/* opnd(1) <- opnd(2)-opnd(3)		*/
 15    10 	mult		initial("000010011"b),	/* opnd(1) <- opnd(2)*opnd(3)		*/
 15    11 	div		initial("000010100"b),	/* opnd(1) <- opnd(2)/opnd(3)		*/
 15    12 	negate		initial("000010101"b),	/* opnd(1) <- -opnd(2)  		*/
 15    13 	exp		initial("000010110"b),	/* opnd(1) <- opnd(2) ** opnd(3)	*/
 15    14 
 15    15 	and_bits		initial("000100001"b),	/* opnd(1) <- opnd(2) & opnd(3)	*/
 15    16 	or_bits		initial("000100010"b),	/* opnd(1) <- opnd(2)|opnd(3)		*/
 15    17 	xor_bits		initial("000100011"b),	/* opnd(1) <- opnd(2) xor opnd(3)	*/
 15    18 	not_bits		initial("000100100"b),	/* opnd(1) <- ^opnd(2)		*/
 15    19 	cat_string	initial("000100101"b),	/* opnd(1) <- opnd(2)||opnd(3)	*/
 15    20 	bool_fun		initial("000100110"b),	/* opnd(1) <- bool(opnd(2),opnd(3),opnd(4)) */
 15    21 
 15    22 	assign		initial("000110001"b),	/* opnd(1) <- opnd(2)		*/
 15    23 	assign_size_ck	initial("000110010"b),	/* opnd(1) <- opnd(2)		*/
 15    24 	assign_zero	initial("000110011"b),	/* opnd(1) <- 0			*/
 15    25 	copy_words	initial("000110100"b),	/* move opnd(2) to opnd(1) by opnd(3) words */
 15    26 	copy_string	initial("000110101"b),	/* move opnd(2) to opnd(1) by opnd(3) units */
 15    27 	make_desc		initial("000110110"b),	/* opnd(1) <- descriptor(opnd(2),opnd(3)) */
 15    28 	assign_round	initial("000110111"b),	/* opnd(1) <- opnd(2) rounded		*/
 15    29 	pack		initial("000111000"b),	/* opnd(1) <- encode to picture opnd(2) */
 15    30 	unpack		initial("000111001"b),	/* opnd(1) <- decode from picture opnd(2) */
 15    31 
 15    32 	less_than		initial("001000100"b),	/* opnd(1) <- opnd(2) < opnd(3)	*/
 15    33 	greater_than	initial("001000101"b),	/* opnd(1) <- opnd(2) > opnd(3)	*/
 15    34 	equal		initial("001000110"b),	/* opnd(1) <- opnd(2) = opnd(3)	*/
 15    35 	not_equal		initial("001000111"b),	/* opnd(1) <- opnd(2) ^= opnd(3)	*/
 15    36 	less_or_equal	initial("001001000"b),	/* opnd(1) <- opnd(2) <= opnd(3)	*/
 15    37 	greater_or_equal	initial("001001001"b),	/* opnd(1) <- opnd(2) >= opnd(3)	*/
 15    38 
 15    39 	jump		initial("001010001"b),	/* go to opnd(1) unconditionally	*/
 15    40 	jump_true		initial("001010010"b),	/* go to opnd(1) if opnd(2) is not 0	*/
 15    41 	jump_false	initial("001010011"b),	/* go to opnd(1) if opnd(2) is all 0	*/
 15    42 	jump_if_lt	initial("001010100"b),	/* go to opnd(1) if opnd(2) < opnd(3)	*/
 15    43 	jump_if_gt	initial("001010101"b),	/* go to opnd(1) if opnd(2) > opnd(3)	*/
 15    44 	jump_if_eq	initial("001010110"b),	/* go to opnd(1) if opnd(2) = opnd(3)	*/
 15    45 	jump_if_ne	initial("001010111"b),	/* go to opnd(1) if opnd(2) ^= opnd(3)	*/
 15    46 	jump_if_le	initial("001011000"b),	/* go to opnd(1) if opnd(2) <= opnd(3)	*/
 15    47 	jump_if_ge	initial("001011001"b),	/* go to opnd(1) if opnd(2) >= opnd(3)	*/
 15    48 
 15    49 	std_arg_list	initial("001100001"b),	/* opnd(1) <- arglist(opnd(2) desclist(opnd(3)))	*/
 15    50 	return_words	initial("001100010"b),	/* return aggregate opnd(1), opnd(2) is length in words */
 15    51 	std_call		initial("001100011"b),	/* opnd(1) <- call opnd(2) with opnd(3)		*/
 15    52 	return_bits	initial("001100100"b),	/* return aggregate opnd(1), opnd(2) is length in bits */
 15    53 	std_entry		initial("001100101"b),	/* entry(opnd(1)... opnd(n))			*/
 15    54 	return_string	initial("001100110"b),	/* return string opnd(1) */
 15    55 	ex_prologue	initial("001100111"b),	/* execute the prologue -no operands-		*/
 15    56 	allot_auto	initial("001101000"b),	/* opnd(1) <- addrel(stack,opnd(2))		*/
 15    57 	param_ptr		initial("001101001"b),	/* opnd(1) <- ptr to opnd(2) in  block opnd(3)	*/
 15    58 	param_desc_ptr	initial("001101010"b),	/* opnd(1) <- ptr to opnd(2) in block opnd(3)	*/
 15    59 	std_return	initial("001101011"b),	/* return -no arguments-			*/
 15    60 	allot_ctl		initial("001101100"b),	/* allocate opnd(1) , length in words is opnd(2) 	*/
 15    61 	free_ctl		initial("001101101"b),	/* free opnd(1)				*/
 15    62 	stop		initial("001101110"b),	/* stop - terminate run unit			*/
 15    63 
 15    64 	mod_bit		initial("001110000"b),	/* opnd(1) <- mod(opnd(3),36),
 15    65*						   opnd(2) <- opnd(3) / 36		*/
 15    66 	mod_byte		initial("001110001"b),	/* opnd(1) <- mod(opnd(3),4),
 15    67*						   opnd(2) <- opnd(3) / 4		*/
 15    68 	mod_half		initial("001110010"b),	/* opnd(1) <- mod(opnd(3),2),
 15    69*						   opnd(2) <- opnd(3) / 2		*/
 15    70 	mod_word		initial("001110011"b),	/* TO BE DEFINED BY BLW			*/
 15    71 
 15    72 	bit_to_char	initial("010000000"b),	/* opnd(1) <- (opnd(2)+8)/9		*/
 15    73 	bit_to_word	initial("010000001"b),	/* opnd(1) <- (opnd(2)+35)/36		*/
 15    74 	char_to_word	initial("010000010"b),	/* opnd(1) <- (opnd(2)+3)/4		*/
 15    75 	half_to_word	initial("010000011"b),	/* opnd(1) <- (opnd(2)+1)/2		*/
 15    76 	word_to_mod2	initial("010000100"b),	/* opnd(1) <- (opnd(2)+1)/2*2		*/
 15    77 	word_to_mod4	initial("010000101"b),	/* opnd(1) <- (opnd(2)+3)/4*4		*/
 15    78 	word_to_mod8	initial("010000110"b),	/* opnd(1) <- (opnd(2)+7)/8*8		*/
 15    79 	rel_fun		initial("010000111"b),	/* opnd(1) <- rel(opnd(2))		*/
 15    80 	baseno_fun	initial("010001000"b),	/* opnd(1) <- baseno(opnd(2))		*/
 15    81 	desc_size		initial("010001001"b),	/* opnd(1) <- substr(opnd(2),13,24)	*/
 15    82 	bit_pointer	initial("010001010"b),	/* opnd(1) <- bit offset of opnd(2)	*/
 15    83 	index_before_fun	initial("010001011"b),	/* opnd(1) <- length of before(opnd(2),opnd(3)) */
 15    84 	index_after_fun	initial("010001100"b),	/* opnd(1) <- offset of after(opnd(2),opnd(3)) in opnd(2) */
 15    85 	verify_ltrim_fun	initial("010001101"b),	/* opnd(1) <- offset of ltrim(opnd(2),opnd(3)) in opnd(2) */
 15    86 	verify_rtrim_fun	initial("010001110"b),	/* opnd(1) <- length(opnd(2))-length(rtrim(opnd(2),opnd(3))) */
 15    87 	digit_to_bit	initial("010001111"b),	/* opnd(1) <- 9*opnd(2)/2		*/
 15    88 
 15    89 	ceil_fun		initial("010010000"b),	/* opnd(1) <- ceil(opnd(2))		*/
 15    90 	floor_fun		initial("010010001"b),	/* opnd(1) <- floor(opnd(2))		*/
 15    91 	round_fun		initial("010010010"b),	/* opnd(1) <- round(opnd(2))		*/
 15    92 	sign_fun		initial("010010011"b),	/* opnd(1) <- sign(opnd(2))		*/
 15    93 	abs_fun		initial("010010100"b),	/* opnd(1) <- abs(opnd(2))		*/
 15    94 	trunc_fun		initial("010010101"b),	/* opnd(1) <- trunc(opnd(2))		*/
 15    95 	byte_fun		initial("010010110"b),	/* opnd(1) <- byte(opnd(2))		*/
 15    96 	rank_fun		initial("010010111"b),	/* opnd(1) <- rank(opnd(2))		*/
 15    97 	index_rev_fun	initial("010011000"b),	/* opnd(1) <- index(reverse(opnd(2)),reverse(opnd(3))) */
 15    98 	search_rev_fun	initial("010011001"b),	/* opnd(1) <- search(reverse(opnd(2)),opnd(3)) */
 15    99 	verify_rev_fun	initial("010011010"b),	/* opnd(1) <- verify(reverse(opnd(2)),opnd(3)) */
 15   100 	wordno_fun	initial("010011011"b),        /* opnd(1) <- wordno (opnd(2)) */
 15   101 	segno_fun		initial("010011100"b),        /* opnd(1) <- segno (opnd(2)) */
 15   102 	bitno_fun           initial("010011101"b),        /* opnd(1) <- bitno (opnd(2)) */
 15   103 	charno_fun	initial("010011110"b),        /* opnd(1) <- charno (opnd(2)) */
 15   104 
 15   105 	index_fun		initial("010100000"b),	/* opnd(1) <- index(opnd(2),opnd(3))	*/
 15   106 	off_fun		initial("010100001"b),	/* opnd(1) <- offset(opnd(2),opnd(3))	*/
 15   107 	complex_fun	initial("010100010"b),	/* opnd(1) <- complex(opnd(2),opnd(3))	*/
 15   108 	conjg_fun		initial("010100011"b),	/* opnd(1) <- conjg(opnd(2),opnd(3))	*/
 15   109 	mod_fun		initial("010100100"b),	/* opnd(1) <- mod(opnd(2),opnd(3))	*/
 15   110 	repeat_fun	initial("010100101"b),	/* opnd(1) <- repeat(opnd(2),opnd(3))	*/
 15   111 	verify_fun	initial("010100110"b),	/* opnd(1) <- verify(opnd(2),opnd(3))	*/
 15   112 	translate_fun	initial("010100111"b),	/* opnd(1) <- translate(opnd(2),opnd(3))*/
 15   113 	real_fun   	initial("010101001"b),	/* opnd(1) <- real(opnd(2))		*/
 15   114 	imag_fun   	initial("010101010"b),	/* opnd(1) <- imag(opnd(2))		*/
 15   115 	length_fun	initial("010101011"b),	/* opnd(1) <- length(opnd(2))	*/
 15   116 	pl1_mod_fun	initial("010101100"b),	/* opnd(1) <- mod(opnd(2)) */
 15   117 	search_fun	initial("010101101"b),	/* opnd(1) <- search(opnd(2),opnd(3)) */
 15   118 	allocation_fun	initial("010101110"b),	/* opnd(1) <- allocation(opnd(2)) */
 15   119 	reverse_fun	initial("010101111"b),	/* opnd(1) <- reverse(opnd(2)) */
 15   120 
 15   121 	addr_fun		initial("010110000"b),	/* opnd(1) <- addr(opnd(2))		*/
 15   122 	addr_fun_bits	initial("010110001"b),	/* opnd(1) <- addr(opnd(2))		*/
 15   123 	ptr_fun		initial("010110010"b),	/* opnd(1) <- ptr(opnd(2),opnd(3))	*/
 15   124 	baseptr_fun	initial("010110011"b),	/* opnd(1) <- baseptr(opnd(2))	*/
 15   125 	addrel_fun	initial("010110100"b),	/* opnd(1) <- addrel(opnd(2),opnd(3))	*/
 15   126 	codeptr_fun	initial("010110101"b),	/* opnd(1) <- codeptr(opnd(2))	*/
 15   127 	environmentptr_fun	initial("010110110"b),	/* opnd(1) <- environmentptr(opnd(2))	*/
 15   128 	stackbaseptr_fun	initial("010110111"b),	/* opnd(1) is ptr to base of current stack	*/
 15   129 	stackframeptr_fun	initial("010111000"b),	/* opnd(1) is ptr to current block's stack frame	*/
 15   130 	setcharno_fun	initial("010111001"b),	/* opnd(1) <- opnd(2) with charno opnd(3) */
 15   131 	addcharno_fun	initial("010111010"b),	/* opnd(1) <- opnd(2) with charno = charno + opnd(3) */
 15   132 	setbitno_fun	initial("010111011"b),	/* setcharno for bitsno */
 15   133 	addbitno_fun	initial("010111100"b),	/* addcharno for bitno */
 15   134 
 15   135 	min_fun		initial("011000000"b),	/* opnd(1) <- min(opnd(1),opnd(2),...)	*/
 15   136 	max_fun		initial("011000001"b),	/* opnd(1) <- max(opnd(1),opnd(2),...)	*/
 15   137 
 15   138 	stack_ptr		initial("011010001"b),	/* opnd(1) <- stack frame ptr		*/
 15   139 	empty_area	initial("011010010"b),	/* empty opnd(1), length in words is opnd(2) */
 15   140 	enable_on		initial("011010100"b),	/* opnd(1) is the cond name
 15   141*						   opnd(2) is the file name
 15   142*						   opnd(3) is the block	*/
 15   143 	revert_on		initial("011010101"b),	/* opnd(1) is the cond name,
 15   144*						   opnd(2) is the file name	*/
 15   145 	signal_on		initial("011010110"b),	/* opnd(1) is the cond name
 15   146*						   opnd(2) is the file name */
 15   147 
 15   148 	lock_fun		initial("011010111"b),	/* opnd(1) <- stac(opnd(2),opnd(3))	*/
 15   149 	stacq_fun		initial("011011000"b),	/* opnd(1) is result, opnd(2) is ptr to lock word,
 15   150*						   opnd(3) is old value, (4) is new value. */
 15   151 	clock_fun		initial("011011001"b),	/* opnd(1) is the clock time		*/
 15   152 	vclock_fun	initial("011011010"b),	/* opnd(1) is the virtual clock time	*/
 15   153 
 15   154 	bound_ck		initial("011100000"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 15   155 	range_ck		initial("011100001"b),	/* opnd(1) <- opnd(2) if opnd(3) <= opnd(2) <= opnd(4) */
 15   156 	loop		initial("011100010"b),	/* do opnd(1) for opnd(2) from opnd(3) to opnd(4) by 1,
 15   157*						   opnd(5) is the list */
 15   158 	join		initial("011100011"b),	/* do opnd(1), opnd(2) ... opnd(n)	*/
 15   159 	allot_based	initial("011100100"b),	/* allocate opnd(2) words in opnd(3), set opnd(1) */
 15   160 	free_based	initial("011100101"b),	/* free opnd(1) in opnd(3), length is opnd(2) words */
 15   161 
 15   162 	r_parn		initial("011110001"b),	/* format op code			*/
 15   163 	l_parn		initial("011110010"b),
 15   164 	r_format		initial("011110011"b),
 15   165 	c_format		initial("011110100"b),
 15   166 	f_format		initial("011110101"b),
 15   167 	e_format		initial("011110110"b),
 15   168 	b_format		initial("011110111"b),
 15   169 	a_format		initial("011111000"b),
 15   170 	x_format		initial("011111001"b),
 15   171 	skip_format	initial("011111010"b),
 15   172 	column_format	initial("011111011"b),
 15   173 	page_format	initial("011111100"b),
 15   174 	line_format	initial("011111101"b),
 15   175 	picture_format	initial("011111110"b),
 15   176 	bn_format		initial("011111111"b),	/* bit format, length(opnd(2)), radix factor(opnd(3)) */
 15   177 
 15   178 	get_list_trans	initial("100000000"b),	/* getlist(opnd(2) with desc(opnd(1)))	*/
 15   179 	get_edit_trans	initial("100000001"b),	/* getedit(opnd(2) with desc(opnd(1)))	*/
 15   180 	get_data_trans	initial("100000010"b),	/* getdata(opnd(1) to opnd(n))	*/
 15   181 	put_list_trans	initial("100000011"b),	/* putlist(opnd(2) with desc(opnd(1)))	*/
 15   182 	put_edit_trans	initial("100000100"b),	/* putedit(opnd(2) with desc(opnd(1)))	*/
 15   183 	put_data_trans	initial("100000101"b),	/* putdata(opnd(2)) with subscript-list opnd(1) */
 15   184 	terminate_trans	initial("100000110"b),	/* terminate stream transmission	*/
 15   185 	stream_prep	initial("100000111"b),	/* initiate stream transmission	*/
 15   186 	record_io		initial("100001000"b),	/* perform record io operation	*/
 15   187 	fortran_read	initial("100001001"b),	/* A complete read statement		*/
 15   188 	fortran_write	initial("100001010"b),	/* A complete write statement		*/
 15   189 	ftn_file_manip	initial("100001011"b),	/* endfile,backspace,rewind,etc.	*/
 15   190 	ftn_trans_loop	initial("100001100"b),	/* An implied do in i/o list		*/
 15   191 	put_control	initial("100001101"b),	/* put control opnd(1) opnd(2) times	*/
 15   192 	put_field		initial("100001110"b),	/* putlist(opnd(2)) of length(opnd(1))	*/
 15   193 	put_field_chk	initial("100001111"b),	/* putlist(op(2)) of len(op(1)) check char index(op(3)) */
 15   194 
 15   195 /* These operators are produced by the parse but are not used as input to the code generator.	*/
 15   196 /* They are processed by the semantic translator.						*/
 15   197 
 15   198 	return_value	initial("100010010"b),	/* return(opnd(1))			*/
 15   199 	allot_var		initial("100010011"b),	/* allot opnd(1) in opnd(2)		*/
 15   200 	free_var		initial("100010100"b),	/* free opnd(1) out of opnd(2)	*/
 15   201 	get_file		initial("100010101"b),	/* opnd(1) is filename,opnd(2) is copy	*/
 15   202 						/* opnd(3) is skip, opnd(4) is list	*/
 15   203 	get_string	initial("100010110"b),	/* opnd(1) is string,opnd(2) is list	*/
 15   204 	put_file		initial("100010111"b),	/* opnd(1) is filename,opnd(2) is page	*/
 15   205 						/* opnd(3) is skip,opnd(4) is line	*/
 15   206 	put_string	initial("100011000"b),	/* opnd(1) is string,opnd(2) is list	*/
 15   207 	open_file		initial("100011001"b),
 15   208 	close_file	initial("100011010"b),
 15   209 	read_file		initial("100011011"b),
 15   210 	write_file	initial("100011100"b),
 15   211 	locate_file	initial("100011101"b),
 15   212 	do_fun		initial("100011110"b),	/* opnd(1) is join of a list		*/
 15   213 						/* opnd(2) is control variable ref	*/
 15   214 						/* opnd(3) is specification operator	*/
 15   215 	do_spec		initial("100011111"b),	/* opnd(1) to opnd(2) by opnd(3) 	*/
 15   216 						/* repeat opnd(4) while opnd(5)	*/
 15   217 						/* opnd(6) is next specification	*/
 15   218 
 15   219 	rewrite_file	initial("100100000"b),
 15   220 	delete_file	initial("100100001"b),
 15   221 	unlock_file	initial("100100010"b),
 15   222 	lock_file		initial("100100011"b),
 15   223 	refer		initial("100100101"b),	/* opnd(1) refer(opnd(2))		*/
 15   224 	prefix_plus	initial("100100110"b),	/* opnd(1) <- +opnd(2)		*/
 15   225 	nop		initial("100100111"b),	/* no-op */
 15   226 	assign_by_name	initial("100101000"b),	/* opnd(1) <- opnd(2),by name		*/
 15   227 
 15   228 /* These operators are produced by the semantic translator in processing the math
 15   229*   builtin functions and are used as input to the code generator			*/
 15   230 
 15   231 	sqrt_fun		initial("100110000"b),	/* opnd(1) <- sqrt(opnd(2))	*/
 15   232 	sin_fun		initial("100110001"b),	/* opnd(1) <- sin(opnd(2))	*/
 15   233 	sind_fun		initial("100110010"b),	/* opnd(1) <- sind(opnd(2))	*/
 15   234 	cos_fun		initial("100110011"b),	/* opnd(1) <- cos(opnd(2))	*/
 15   235 	cosd_fun		initial("100110100"b),	/* opnd(1) <- cosd(opnd(2))	*/
 15   236 	tan_fun		initial("100110101"b),	/* opnd(1) <- tan(opnd(2))	*/
 15   237 	tand_fun		initial("100110110"b),	/* opnd(1) <- tand(opnd(2))	*/
 15   238 	asin_fun		initial("100110111"b),	/* opnd(1) <- asin(opnd(2))	*/
 15   239 	asind_fun		initial("100111000"b),	/* opnd(1) <- asind(opnd(2))	*/
 15   240 	acos_fun		initial("100111001"b),	/* opnd(1) <- acos(opnd(2))	*/
 15   241 	acosd_fun		initial("100111010"b),	/* opnd(1) <- acosd(opnd(2))	*/
 15   242 	atan_fun		initial("100111011"b),	/* opnd(1) <- atan(opnd(2)[,opnd(3)])	*/
 15   243 	atand_fun		initial("100111100"b),	/* opnd(1) <- atand(opnd(2)[,opnd(3)])	*/
 15   244 	log2_fun		initial("100111101"b),	/* opnd(1) <- log2(opnd(2))	*/
 15   245 	log_fun		initial("100111110"b),	/* opnd(1) <- log(opnd(2))	*/
 15   246 	log10_fun		initial("100111111"b),	/* opnd(1) <- log10(opnd(2))	*/
 15   247 
 15   248 	exp_fun		initial("101000000"b))	/* opnd(1) <- exp(opnd(2))	*/
 15   249 
 15   250 			bit(9) aligned internal static options(constant);
 15   251 
 15   252 /* END INCLUDE FILE ... op_codes.incl.pl1 */
       49 
 16     1 /* BEGIN INCLUDE FILE ... boundary.incl.pl1 */
 16     2 
 16     3 /* Modified: 26 Apr 1979 by PCK to implement 4-bit decimal */
 16     4 
 16     5 dcl (	bit_		init(1),
 16     6 	digit_		init(2),
 16     7 	character_	init(3),
 16     8 	half_		init(4),
 16     9 	word_		init(5),
 16    10 	mod2_		init(6),
 16    11 	mod4_		init(7)) fixed bin(3) int static options(constant);
 16    12 
 16    13 /* END INCLUDE FILE ... boundary.incl.pl1 */
       50 
 17     1 /* BEGIN INCLUDE FILE ... system.incl.pl1 */
 17     2 
 17     3 /* Modified: 25 Apr 1979 by PCK to implemnt 4-bit decimal */
 17     4 
 17     5 dcl (	max_p_flt_bin_1			initial(27),
 17     6 	max_p_flt_bin_2			initial(63),
 17     7 	max_p_fix_bin_1			initial(35),
 17     8 	max_p_fix_bin_2			initial(71),
 17     9 
 17    10 	max_p_dec				initial(59),
 17    11 	max_p_bin_or_dec			initial (71),	/* max (max_p_fix_bin_2, max_p_dec) */
 17    12 
 17    13 	min_scale				initial(-128),
 17    14 	max_scale				initial(+127),
 17    15 	max_bit_string			initial(9437184),
 17    16 	max_char_string			initial(1048576),
 17    17 	max_area_size			initial(262144),
 17    18 	min_area_size			initial(28),
 17    19 
 17    20 	max_bit_string_constant		initial (253),	/* max length of bit literals */
 17    21 	max_char_string_constant		initial (254),	/* max length of character literals */
 17    22 	max_identifier_length		initial (256),
 17    23 	max_number_of_dimensions		initial (127),
 17    24 
 17    25 	max_length_precision		initial(24),
 17    26 	max_offset_precision		initial(24),	/* 18 bits for word offset + 6 bits for bit offset */
 17    27 
 17    28 	max_words_per_variable		initial (262144),
 17    29 
 17    30 	bits_per_word			initial(36),
 17    31 	bits_per_double			initial(72),
 17    32 	packed_digits_per_character		initial(2),
 17    33 	characters_per_half			initial(2),
 17    34 	characters_per_word			initial(4),
 17    35 	characters_per_double		initial(8),
 17    36 
 17    37 	bits_per_character			initial(9),
 17    38 	bits_per_half			initial(18),
 17    39 	bits_per_decimal_digit		initial(9),
 17    40 	bits_per_binary_exponent		initial(8),
 17    41 	bits_per_packed_ptr			initial(36),
 17    42 	words_per_packed_pointer		initial(1),
 17    43 
 17    44 	words_per_fix_bin_1			initial(1),
 17    45 	words_per_fix_bin_2			initial(2),
 17    46 	words_per_flt_bin_1			initial(1),
 17    47 	words_per_flt_bin_2			initial(2),
 17    48 	words_per_varying_string_header	initial(1),
 17    49 	words_per_offset			initial(1),
 17    50 	words_per_pointer			initial(2),
 17    51 	words_per_label_var			initial(4),
 17    52 	words_per_entry_var			initial(4),
 17    53 	words_per_file_var			initial(4),
 17    54 	words_per_format			initial(4),
 17    55 	words_per_condition_var		initial(6),
 17    56 
 17    57 	max_index_register_value		initial(262143),
 17    58 	max_signed_index_register_value	initial(131071),
 17    59 
 17    60 	max_signed_xreg_precision		initial(17),
 17    61 	max_uns_xreg_precision		initial(18),
 17    62 
 17    63 	default_area_size			initial(1024),
 17    64 	default_flt_bin_p			initial(27),
 17    65 	default_fix_bin_p			initial(17),
 17    66 	default_flt_dec_p			initial(10),
 17    67           default_fix_dec_p   		initial(7)) fixed bin(31) internal static options(constant);
 17    68 
 17    69 dcl	bits_per_digit			initial(4.5)  fixed bin(31,1) internal static options(constant);
 17    70 
 17    71 dcl (	integer_type		initial("010000000000000000000100000001100000"b),
 17    72 	dec_integer_type		initial("010000000000000000000100000010100000"b),
 17    73 	pointer_type		initial("000001000000000000000100000000000000"b),
 17    74 	real_type			initial("001000000000000000000100000001100000"b),
 17    75 	complex_type		initial("001000000000000000000100000001010000"b),
 17    76 	builtin_type		initial("000000000000000010000000000000000000"b),
 17    77 	storage_block_type		initial("000000000000100000000000000000000000"b),
 17    78 	arg_desc_type		initial("000000000001000000000000000000000000"b),
 17    79 	local_label_var_type	initial("000000001000000000000100000100001000"b),
 17    80 	entry_var_type		initial("000000000100000000000000000000001000"b),
 17    81 	bit_type			initial("000100000000000000000000000000000000"b),
 17    82 	char_type			initial("000010000000000000000000000000000000"b)) bit(36) aligned int static
 17    83 									options(constant);
 17    84 
 17    85 /* END INCLUDE FILE ... system.incl.pl1 */
       51 
       52 
       53 	s = sym;
       54 
       55 	b = s -> symbol.block_node;
       56 
       57 	if s -> symbol.bit | s -> symbol.char | s -> symbol.area
       58 	then do;
       59 		if s -> symbol.dcl_size ^= null & (s -> symbol.auto | s -> symbol.defined)
       60 		then do;
       61 			p = create_statement$prologue (assignment_statement, b, null, (b -> block.prefix));
       62 			q, p -> statement.root = create_operator (assign, 2);
       63 			q -> operand (2) = s -> symbol.dcl_size;
       64 			p, q -> operand (1), s -> symbol.dcl_size = declare_integer (b);
       65 			p -> reference.symbol -> symbol.c_dcl_size = max_length_precision;
       66 		     end;
       67 
       68 		if s -> symbol.varying
       69 		then s -> symbol.reference -> reference.varying_ref = "1"b;
       70 		else if ^s -> symbol.area
       71 		then do;
       72 			s -> symbol.reference -> reference.c_length = s -> symbol.c_dcl_size;
       73 			s -> symbol.reference -> reference.length = s -> symbol.dcl_size;
       74 		     end;
       75 	     end;
       76 
       77 	if s -> symbol.structure
       78 	then do;
       79 		units = s -> symbol.reference -> reference.c_length;
       80 		go to get_bit_size;
       81 	     end;
       82 
       83 	if s -> symbol.packed
       84 	then do;
       85 		if s -> symbol.char
       86 		then do;
       87 			units = character_;
       88 			s -> symbol.word_size = s -> symbol.dcl_size;
       89 			s -> symbol.c_word_size = s -> symbol.c_dcl_size;
       90 			go to get_boundary;
       91 		     end;
       92 
       93 		if s -> symbol.bit
       94 		then do;
       95 			units = bit_;
       96 			s -> symbol.word_size = s -> symbol.dcl_size;
       97 			s -> symbol.c_word_size = s -> symbol.c_dcl_size;
       98 			go to get_boundary;
       99 		     end;
      100 
      101 		if s -> symbol.binary
      102 		then do;
      103 			units = bit_;
      104 			if s -> symbol.float
      105 			then s -> symbol.c_word_size = s -> symbol.c_dcl_size + 1 + bits_per_binary_exponent;
      106 			else if s -> symbol.unsigned
      107 			then s -> symbol.c_word_size = s -> symbol.c_dcl_size;
      108 			else s -> symbol.c_word_size = s -> symbol.c_dcl_size + 1;
      109 
      110 			if s -> symbol.complex
      111 			then s -> symbol.c_word_size = 2 * s -> symbol.c_word_size;
      112 			go to get_boundary;
      113 		     end;
      114 
      115 		if s -> symbol.decimal
      116 		then do;
      117 			units = character_;
      118 			s -> symbol.c_word_size = (s -> symbol.c_dcl_size + 1 + 2 * fixed (s -> symbol.float));
      119 			s -> symbol.c_word_size =
      120 			     divide (s -> symbol.c_word_size + mod (s -> symbol.c_word_size, 2),
      121 			     packed_digits_per_character, 24, 0);
      122 			if s -> symbol.complex
      123 			then s -> symbol.c_word_size = 2 * s -> symbol.c_word_size;
      124 			go to get_boundary;
      125 		     end;
      126 
      127 		if s -> symbol.ptr
      128 		then do;
      129 			units = bit_;
      130 			s -> symbol.c_word_size = bits_per_packed_ptr;
      131 			go to get_boundary;
      132 		     end;
      133 
      134 		if s -> symbol.picture
      135 		then do;
      136 			units = character_;
      137 
      138 			if s -> symbol.general = null
      139 			then s -> symbol.c_word_size = s -> symbol.c_dcl_size;
      140 			else do;
      141 				if s -> symbol.general -> node.type = token_node
      142 				then do;
      143 
      144 /* usual case */
      145 
      146 					s -> symbol.c_word_size = length (s -> symbol.general -> token.string);
      147 
      148 					call declare_picture (s -> symbol.general -> token.string, s, e);
      149 					if e ^= 0
      150 					then call pl1_stat_$util_abort (e, s);
      151 				     end;
      152 				else s -> symbol.reference -> reference.c_length = s -> symbol.c_dcl_size;
      153 
      154 				s -> symbol.c_word_size = s -> symbol.c_dcl_size;
      155 			     end;
      156 
      157 			go to get_boundary;
      158 		     end;
      159 	     end;
      160 	else do;
      161 		if s -> symbol.ptr
      162 		then do;
      163 			units = word_;
      164 			if ^s -> symbol.explicit_packed
      165 			then s -> symbol.c_word_size = words_per_pointer;
      166 			else s -> symbol.c_word_size = words_per_packed_pointer;
      167 			go to get_boundary;
      168 		     end;
      169 
      170 		if s -> symbol.binary
      171 		then do;
      172 			units = word_;
      173 
      174 			if s -> symbol.float
      175 			then if s -> symbol.c_dcl_size > max_p_flt_bin_1
      176 			     then s -> symbol.c_word_size = words_per_flt_bin_2;
      177 			     else s -> symbol.c_word_size = words_per_flt_bin_1;
      178 			else if s -> symbol.c_dcl_size > max_p_fix_bin_1
      179 			then s -> symbol.c_word_size = words_per_fix_bin_2;
      180 			else s -> symbol.c_word_size = words_per_fix_bin_1;
      181 
      182 			if s -> symbol.complex
      183 			then s -> symbol.c_word_size = 2 * s -> symbol.c_word_size;
      184 			go to get_boundary;
      185 		     end;
      186 
      187 		if s -> symbol.char
      188 		then do;
      189 			units = character_;
      190 			s -> symbol.c_word_size = s -> symbol.c_dcl_size;
      191 			s -> symbol.word_size = s -> symbol.dcl_size;
      192 			go to get_boundary;
      193 		     end;
      194 
      195 		if s -> symbol.bit
      196 		then do;
      197 			units = bit_;
      198 			s -> symbol.c_word_size = s -> symbol.c_dcl_size;
      199 			s -> symbol.word_size = s -> symbol.dcl_size;
      200 			go to get_boundary;
      201 		     end;
      202 
      203 		if s -> symbol.decimal
      204 		then do;
      205 			units = character_;
      206 			s -> symbol.c_word_size = (s -> symbol.c_dcl_size + 1 + fixed (s -> symbol.float));
      207 			if s -> symbol.complex
      208 			then s -> symbol.c_word_size = 2 * s -> symbol.c_word_size;
      209 			go to get_boundary;
      210 		     end;
      211 
      212 		if s -> symbol.entry
      213 		then do;
      214 			units = word_;
      215 			s -> symbol.c_word_size = words_per_entry_var;
      216 			go to get_boundary;
      217 		     end;
      218 
      219 		if s -> symbol.label
      220 		then do;
      221 			units = word_;
      222 			s -> symbol.c_word_size = words_per_label_var;
      223 			goto get_boundary;
      224 		     end;
      225 
      226 		if s -> symbol.file
      227 		then do;
      228 			units = word_;
      229 			s -> symbol.c_word_size = words_per_file_var;
      230 			goto get_boundary;
      231 		     end;
      232 
      233 		if s -> symbol.format
      234 		then do;
      235 			units = word_;
      236 			s -> symbol.c_word_size = words_per_format;
      237 			goto get_boundary;
      238 		     end;
      239 
      240 		if s -> symbol.offset
      241 		then do;
      242 			units = word_;
      243 			s -> symbol.c_word_size = words_per_offset;
      244 			go to get_boundary;
      245 		     end;
      246 
      247 		if s -> symbol.area
      248 		then do;
      249 			units = word_;
      250 			s -> symbol.c_word_size = s -> symbol.c_dcl_size;
      251 			s -> symbol.word_size = s -> symbol.dcl_size;
      252 			go to get_boundary;
      253 		     end;
      254 
      255 		if s -> symbol.picture
      256 		then do;
      257 			units = character_;
      258 
      259 			if s -> symbol.general = null
      260 			then s -> symbol.c_word_size = s -> symbol.c_dcl_size;
      261 			else do;
      262 				if s -> symbol.general -> node.type = token_node
      263 				then do;
      264 
      265 /* usual case */
      266 
      267 					s -> symbol.c_word_size = length (s -> symbol.general -> token.string);
      268 
      269 					call declare_picture (s -> symbol.general -> token.string, s, e);
      270 					if e ^= 0
      271 					then call pl1_stat_$util_abort (e, s);
      272 				     end;
      273 				else s -> symbol.reference -> reference.c_length = s -> symbol.c_dcl_size;
      274 
      275 				s -> symbol.c_word_size = s -> symbol.c_dcl_size;
      276 			     end;
      277 
      278 			go to get_boundary;
      279 		     end;
      280 
      281 		if s -> symbol.storage_block
      282 		then do;
      283 			units = word_;
      284 			s -> symbol.c_word_size = s -> symbol.c_dcl_size;
      285 			go to get_boundary;
      286 		     end;
      287 
      288 		if s -> symbol.condition
      289 		then do;
      290 			units = word_;
      291 			s -> symbol.c_word_size = words_per_condition_var;
      292 			do i = 1 to 7;
      293 			     if s -> symbol.token -> token.string = file_conditions (i)
      294 			     then s -> symbol.c_word_size = 8;
      295 			end;
      296 			goto get_boundary;
      297 		     end;
      298 
      299 		units = word_;
      300 	     end;
      301 
      302 /* compute the required boundary.	*/
      303 
      304 get_boundary:
      305 	if s -> symbol.packed
      306 	then if s -> symbol.decimal | s -> symbol.char | s -> symbol.picture
      307 	     then s -> symbol.boundary = character_;
      308 	     else s -> symbol.boundary = bit_;
      309 	else do;
      310 		s -> symbol.boundary = word_;
      311 
      312 		if s -> symbol.fixed & s -> symbol.binary
      313 		then if s -> symbol.c_word_size > words_per_fix_bin_1
      314 		     then s -> symbol.boundary = mod2_;
      315 
      316 		if s -> symbol.float & s -> symbol.binary
      317 		then if s -> symbol.c_word_size > words_per_flt_bin_1
      318 		     then s -> symbol.boundary = mod2_;
      319 
      320 		if s -> symbol.label | s -> symbol.entry | s -> symbol.file | s -> symbol.format
      321 		     | s -> symbol.condition | s -> symbol.area
      322 		then s -> symbol.boundary = mod2_;
      323 
      324 		if s -> symbol.ptr
      325 		then if s -> symbol.explicit_packed
      326 		     then s -> symbol.boundary = word_;
      327 		     else s -> symbol.boundary = mod2_;
      328 	     end;
      329 
      330 	if ^s -> symbol.member
      331 	then s -> symbol.boundary = max (s -> symbol.boundary, word_);
      332 
      333 /* determine the size in bits excluding any rounding.	*/
      334 
      335 get_bit_size:
      336 	if s -> symbol.word_size = null
      337 	then s -> symbol.c_bit_size = s -> symbol.c_word_size * convert_map (units);
      338 	else if units = bit_
      339 	then s -> symbol.bit_size = s -> symbol.word_size;
      340 	else s -> symbol.bit_size = multf ((s -> symbol.word_size), declare_constant$integer (convert_map (units)));
      341 
      342 /* if the units are less than word and this is not a packed item, then round the size to words.	*/
      343 
      344 	if units < word_ & ^s -> symbol.packed
      345 	then do;
      346 		if s -> symbol.word_size = null
      347 		then s -> symbol.c_word_size =
      348 			divide (s -> symbol.c_word_size + round (units) - 1, round (units), 31, 0);
      349 		else do;
      350 			q = create_operator (optable (units), 2);
      351 			q -> operand (2) = s -> symbol.word_size;
      352 			s -> symbol.word_size = q;
      353 		     end;
      354 
      355 		units = word_;
      356 	     end;
      357 
      358 /* if this is a varying string add one to the word size.	*/
      359 
      360 	if s -> symbol.varying
      361 	then if s -> symbol.word_size = null
      362 	     then s -> symbol.c_word_size = s -> symbol.c_word_size + words_per_varying_string_header;
      363 	     else s -> symbol.word_size =
      364 		     addf ((s -> symbol.word_size), declare_constant$integer (words_per_varying_string_header));
      365 
      366 /* if this is an array call get_array size to find the total size and to compute the
      367*   multipliers and virtual origin used by subscripted references to the array elements.	*/
      368 
      369 	if s -> symbol.array ^= null
      370 	then call get_array_size (s, units);
      371 
      372 /* if this is a level 1 packed item round the size to words.	*/
      373 
      374 	if s -> symbol.packed & ^s -> symbol.member & units < word_
      375 	then if s -> symbol.word_size ^= null
      376 	     then do;
      377 		     q = create_operator (optable (units), 2);
      378 		     q -> operand (2) = s -> symbol.word_size;
      379 		     s -> symbol.word_size = q;
      380 		end;
      381 	     else s -> symbol.c_word_size = divide (s -> symbol.c_word_size + round (units) - 1, round (units), 31, 0);
      382 
      383 /* if this is a member of a structure try to improve the units in which the size is expressed.	*/
      384 
      385 	if ^s -> symbol.member
      386 	then goto exit;
      387 
      388 	if units = word_
      389 	then if ^s -> symbol.structure
      390 	     then units = max (s -> symbol.boundary, units);
      391 	if s -> symbol.word_size ^= null
      392 	then go to exit;
      393 	if units >= word_
      394 	then go to exit;
      395 
      396 	if units = bit_
      397 	then if pl1_stat_$eis_mode
      398 	     then if s -> symbol.c_word_size = divide (s -> symbol.c_word_size, bits_per_word, 31, 0) * bits_per_word
      399 		then do;
      400 			units = word_;
      401 			s -> symbol.c_word_size = divide (s -> symbol.c_word_size, bits_per_word, 31, 0);
      402 		     end;
      403 		else goto exit;
      404 	     else if s -> symbol.c_word_size
      405 		     = divide (s -> symbol.c_word_size, bits_per_character, 31, 0) * bits_per_character
      406 	     then do;
      407 		     units = character_;
      408 		     s -> symbol.c_word_size = divide (s -> symbol.c_word_size, bits_per_character, 31, 0);
      409 		end;
      410 	     else goto exit;
      411 
      412 	if units = character_
      413 	then if pl1_stat_$eis_mode
      414 	     then if s -> symbol.c_word_size
      415 		     = divide (s -> symbol.c_word_size, characters_per_word, 31, 0) * characters_per_word
      416 		then do;
      417 			units = word_;
      418 			s -> symbol.c_word_size = divide (s -> symbol.c_word_size, characters_per_word, 31, 0);
      419 		     end;
      420 		else goto exit;
      421 	     else if s -> symbol.c_word_size
      422 		     = divide (s -> symbol.c_word_size, characters_per_half, 31, 0) * characters_per_half
      423 	     then do;
      424 		     units = half_;
      425 		     s -> symbol.c_word_size = divide (s -> symbol.c_word_size, characters_per_half, 31, 0);
      426 		end;
      427 	     else goto exit;
      428 
      429 	if units = half_
      430 	then if s -> symbol.c_word_size = divide (s -> symbol.c_word_size, 2, 31, 0) * 2
      431 	     then do;
      432 		     units = word_;
      433 		     s -> symbol.c_word_size = divide (s -> symbol.c_word_size, 2, 31, 0);
      434 		end;
      435 
      436 exit:
      437 	if s -> symbol.member
      438 	then s -> symbol.reference -> reference.c_length = units;
      439 
      440 /* subroutine to do arithmetic. */
      441 
      442 multf:
      443      proc (a, b) returns (ptr);
      444 
      445 	dcl     (a, b, c)		        ptr;
      446 	dcl     opcode		        bit (9) aligned;
      447 
      448 	opcode = mult;
      449 	go to common;
      450 
      451 addf:
      452      entry (a, b) returns (ptr);
      453 
      454 	opcode = add;
      455 common:
      456 	c = create_operator (opcode, 3);
      457 	c -> operand (2) = a;
      458 	c -> operand (3) = b;
      459 	return (c);
      460      end;
      461 
      462      end /* get_size */;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    07/31/89  1338.4  get_size.pl1                      >spec>install>MR12.3-1066>get_size.pl1
40           1    07/31/89  1332.6  language_utility.incl.pl1         >spec>install>MR12.3-1066>language_utility.incl.pl1
1-307        2    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
1-325        3    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
1-335        4    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
1-374        5    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
1-386        6    05/06/74  1746.9  source_id_descriptor.incl.pl1     >ldd>include>source_id_descriptor.incl.pl1
41           7    12/07/83  1701.7  symbol.incl.pl1                   >ldd>include>symbol.incl.pl1
42           8    08/13/81  2043.5  block.incl.pl1                    >ldd>include>block.incl.pl1
43           9    04/07/83  1635.0  statement.incl.pl1                >ldd>include>statement.incl.pl1
44          10    05/03/76  1320.4  statement_types.incl.pl1          >ldd>include>statement_types.incl.pl1
45          11    07/21/80  1546.3  nodes.incl.pl1                    >ldd>include>nodes.incl.pl1
46          12    07/21/80  1546.3  reference.incl.pl1                >ldd>include>reference.incl.pl1
47          13    09/14/77  1705.7  token.incl.pl1                    >ldd>include>token.incl.pl1
48          14    07/21/80  1546.3  operator.incl.pl1                 >ldd>include>operator.incl.pl1
49          15    04/07/83  1635.0  op_codes.incl.pl1                 >ldd>include>op_codes.incl.pl1
50          16    10/25/79  1645.8  boundary.incl.pl1                 >ldd>include>boundary.incl.pl1
51          17    12/07/83  1701.7  system.incl.pl1                   >ldd>include>system.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
a                                      parameter       pointer                  dcl 445 ref 442 451 457
add                                    constant        bit(9)                   initial dcl 15-8 ref 454
area                     31(07)        based           bit(1)                   level 4 packed packed unaligned dcl 7-3 ref 57 70
                                                                                  247 320
array                    12            based           pointer                  level 2 packed packed unaligned dcl 7-3 ref 369
assign                          000000 constant        bit(9)                   initial dcl 15-8 set ref 62*
assignment_statement            000001 constant        bit(9)                   initial dcl 10-3 set ref 61*
attributes               31            based           structure                level 2 dcl 7-3
auto                     32(09)        based           bit(1)                   level 4 packed packed unaligned dcl 7-3 ref 59
b                                      parameter       pointer                  dcl 445 in procedure "multf" ref 442 451 458
b                               000106 automatic       pointer                  dcl 19 in procedure "get_size" set ref 55* 61* 61
                                                                                  64*
binary                   31(29)        based           bit(1)                   level 4 packed packed unaligned dcl 7-3 ref 101 170
                                                                                  312 316
bit                      31(03)        based           bit(1)                   level 4 packed packed unaligned dcl 7-3 ref 57 93
                                                                                  195
bit_                                   constant        fixed bin(3,0)           initial dcl 16-5 ref 95 103 129 197 308 338 396
bit_size                 23            based           pointer                  level 2 packed packed unaligned dcl 7-3 set ref 338*
                                                                                  340*
bit_to_word                            constant        bit(9)                   initial dcl 15-8 ref 30
bits_per_binary_exponent               constant        fixed bin(31,0)          initial dcl 17-5 ref 104
bits_per_character                     constant        fixed bin(31,0)          initial dcl 17-5 ref 404 404 408
bits_per_packed_ptr                    constant        fixed bin(31,0)          initial dcl 17-5 ref 130
bits_per_word                          constant        fixed bin(31,0)          initial dcl 17-5 ref 396 396 401
block                                  based           structure                level 1 dcl 8-5
block_node                4            based           pointer                  level 2 packed packed unaligned dcl 7-3 ref 55
boundary                  2(20)        based           fixed bin(3,0)           level 2 packed packed unaligned dcl 7-3 set ref 304*
                                                                                  308* 310* 312* 316* 320* 324* 327* 330* 330 388
c                               000126 automatic       pointer                  dcl 445 set ref 455* 457 458 459
c_bit_size               27            based           fixed bin(24,0)          level 2 dcl 7-3 set ref 335*
c_dcl_size               30            based           fixed bin(24,0)          level 2 dcl 7-3 set ref 65* 72 89 97 104 106 108 118
                                                                                  138 152 154 174 178 190 198 206 250 259 273 275
                                                                                  284
c_length                  2            based           fixed bin(24,0)          level 2 dcl 12-3 set ref 72* 79 152* 273* 436*
c_word_size              26            based           fixed bin(24,0)          level 2 dcl 7-3 set ref 89* 97* 104* 106* 108* 110*
                                                                                  110 118* 119* 119 119 122* 122 130* 138* 146* 154*
                                                                                  164* 166* 174* 177* 178* 180* 182* 182 190* 198*
                                                                                  206* 207* 207 215* 222* 229* 236* 243* 250* 259*
                                                                                  267* 275* 284* 291* 293* 312 316 335 346* 346 360*
                                                                                  360 381* 381 396 396 401* 401 404 404 408* 408 412
                                                                                  412 418* 418 421 421 425* 425 429 429 433* 433
char                     31(04)        based           bit(1)                   level 4 packed packed unaligned dcl 7-3 ref 57 85
                                                                                  187 304
char_to_word                           constant        bit(9)                   initial dcl 15-8 ref 30
character_                             constant        fixed bin(3,0)           initial dcl 16-5 ref 87 117 136 189 205 257 304 407
                                                                                  412
characters_per_half                    constant        fixed bin(31,0)          initial dcl 17-5 ref 421 421 425
characters_per_word                    constant        fixed bin(31,0)          initial dcl 17-5 ref 412 412 418
compiler_developed       32(35)        based           structure                level 3 packed packed unaligned dcl 7-3
complex                  31(31)        based           bit(1)                   level 4 packed packed unaligned dcl 7-3 ref 110 122
                                                                                  182 207
condition                31(14)        based           bit(1)                   level 4 packed packed unaligned dcl 7-3 ref 288 320
convert_map                     000010 internal static fixed bin(31,0)          initial array dcl 27 set ref 335 340* 340*
create_operator                 000024 constant        entry                    external dcl 1-152 ref 62 350 377 455
create_statement$prologue       000026 constant        entry                    external dcl 1-171 ref 61
data_type                31            based           structure                level 3 packed packed unaligned dcl 7-3
dcl_size                 24            based           pointer                  level 2 packed packed unaligned dcl 7-3 set ref 59
                                                                                  63 64* 73 88 96 191 199 251
decimal                  31(28)        based           bit(1)                   level 4 packed packed unaligned dcl 7-3 ref 115 203
                                                                                  304
declare_constant$integer        000030 constant        entry                    external dcl 1-234 ref 340 340 363 363
declare_integer                 000032 constant        entry                    external dcl 1-269 ref 64
declare_picture                 000034 constant        entry                    external dcl 1-274 ref 148 269
defined                  32(13)        based           bit(1)                   level 4 packed packed unaligned dcl 7-3 ref 59
divide                                                 builtin function         dcl 37 ref 119 346 381 396 401 404 408 412 418 421
                                                                                  425 429 433
e                               000110 automatic       fixed bin(15,0)          dcl 20 set ref 148* 149 149* 269* 270 270*
entry                    31(09)        based           bit(1)                   level 4 packed packed unaligned dcl 7-3 ref 212 320
explicit_packed          31(13)        based           bit(1)                   level 4 packed packed unaligned dcl 7-3 ref 164 324
file                     31(10)        based           bit(1)                   level 4 packed packed unaligned dcl 7-3 ref 226 320
file_conditions                 000002 constant        char(13)                 initial array packed unaligned dcl 33 ref 293
fixed                                                  builtin function         dcl 37 in procedure "get_size" ref 118 206
fixed                    31(01)        based           bit(1)                   level 4 in structure "symbol" packed packed
                                                                                  unaligned dcl 7-3 in procedure "get_size" ref 312
float                    31(02)        based           bit(1)                   level 4 packed packed unaligned dcl 7-3 ref 104 118
                                                                                  174 206 316
format                   31(15)        based           bit(1)                   level 4 packed packed unaligned dcl 7-3 ref 233 320
general                  16            based           pointer                  level 2 packed packed unaligned dcl 7-3 ref 138 141
                                                                                  146 148 259 262 267 269
get_array_size                  000036 constant        entry                    external dcl 1-348 ref 369
half_                                  constant        fixed bin(3,0)           initial dcl 16-5 ref 424 429
half_to_word                           constant        bit(9)                   initial dcl 15-8 ref 30
i                               000111 automatic       fixed bin(15,0)          dcl 20 set ref 292* 293*
label                    31(08)        based           bit(1)                   level 4 packed packed unaligned dcl 7-3 ref 219 320
length                    6            based           pointer                  level 2 in structure "reference" packed packed
                                                                                  unaligned dcl 12-3 in procedure "get_size" set ref
                                                                                  73*
length                                                 builtin function         dcl 37 in procedure "get_size" ref 146 267
max                                                    builtin function         dcl 37 ref 330 388
max_length_precision                   constant        fixed bin(31,0)          initial dcl 17-5 ref 65
max_p_fix_bin_1                        constant        fixed bin(31,0)          initial dcl 17-5 ref 178
max_p_flt_bin_1                        constant        fixed bin(31,0)          initial dcl 17-5 ref 174
member                   32(04)        based           bit(1)                   level 4 packed packed unaligned dcl 7-3 ref 330 374
                                                                                  385 436
misc_attributes          31(19)        based           structure                level 3 packed packed unaligned dcl 7-3
mod2_                                  constant        fixed bin(3,0)           initial dcl 16-5 ref 312 316 320 327
mult                                   constant        bit(9)                   initial dcl 15-8 ref 448
node                                   based           structure                level 1 dcl 11-27
null                                                   builtin function         dcl 37 ref 59 61 61 138 259 335 346 360 369 374 391
offset                   31(06)        based           bit(1)                   level 4 packed packed unaligned dcl 7-3 ref 240
opcode                          000130 automatic       bit(9)                   dcl 446 set ref 448* 454* 455*
operand                   1            based           pointer                  array level 2 packed packed unaligned dcl 14-6 set
                                                                                  ref 63* 64* 351* 378* 457* 458*
operator                               based           structure                level 1 dcl 14-6
optable                         000113 automatic       bit(9)                   initial array dcl 30 set ref 30* 30* 30* 30* 350*
                                                                                  377*
p                               000104 automatic       pointer                  dcl 19 set ref 61* 62 64* 65
packed                   33            based           bit(1)                   level 4 packed packed unaligned dcl 7-3 ref 83 304
                                                                                  344 374
packed_digits_per_character            constant        fixed bin(31,0)          initial dcl 17-5 ref 119
picture                  31(18)        based           bit(1)                   level 4 packed packed unaligned dcl 7-3 ref 134 255
                                                                                  304
pl1_stat_$eis_mode              000022 external static bit(1)                   dcl 25 ref 396 412
pl1_stat_$util_abort            000020 external static entry variable           dcl 23 ref 149 270
prefix                   24(09)        based           bit(12)                  level 2 packed packed unaligned dcl 8-5 ref 61
ptr                      31(05)        based           bit(1)                   level 4 packed packed unaligned dcl 7-3 ref 127 161
                                                                                  324
q                               000102 automatic       pointer                  dcl 19 set ref 62* 63 64 350* 351 352 377* 378 379
reference                              based           structure                level 1 dcl 12-3 in procedure "get_size"
reference                15            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 7-3 in procedure "get_size" ref 68
                                                                                  72 73 79 152 273 436
root                      3            based           pointer                  level 2 packed packed unaligned dcl 9-9 set ref 62*
round                           000031 constant        fixed bin(15,0)          initial array dcl 28 ref 346 346 381 381
s                               000100 automatic       pointer                  dcl 19 set ref 53* 55 57 57 57 59 59 59 63 64 68 68
                                                                                  70 72 72 73 73 77 79 83 85 88 88 89 89 93 96 96 97
                                                                                  97 101 104 104 104 106 106 106 108 108 110 110 110
                                                                                  115 118 118 118 119 119 119 122 122 122 127 130
                                                                                  134 138 138 138 141 146 146 148 148* 149* 152 152
                                                                                  154 154 161 164 164 166 170 174 174 174 177 178
                                                                                  178 180 182 182 182 187 190 190 191 191 195 198
                                                                                  198 199 199 203 206 206 206 207 207 207 212 215
                                                                                  219 222 226 229 233 236 240 243 247 250 250 251
                                                                                  251 255 259 259 259 262 267 267 269 269* 270* 273
                                                                                  273 275 275 281 284 284 288 291 293 293 304 304
                                                                                  304 304 304 308 310 312 312 312 312 316 316 316
                                                                                  316 320 320 320 320 320 320 320 324 324 324 327
                                                                                  330 330 330 335 335 335 338 338 340 340 344 346
                                                                                  346 346 351 352 360 360 360 360 363 363 369 369*
                                                                                  374 374 374 378 379 381 381 385 388 388 391 396
                                                                                  396 401 401 404 404 408 408 412 412 418 418 421
                                                                                  421 425 425 429 429 433 433 436 436
size                      3            based           fixed bin(9,0)           level 2 dcl 13-3 ref 146 148 148 267 269 269 293
statement                              based           structure                level 1 dcl 9-9
storage_block            31(12)        based           bit(1)                   level 4 packed packed unaligned dcl 7-3 ref 281
storage_class            32(09)        based           structure                level 3 packed packed unaligned dcl 7-3
string                    4            based           char                     level 2 dcl 13-3 set ref 146 148* 267 269* 293
structure                31            based           bit(1)                   level 4 packed packed unaligned dcl 7-3 ref 77 388
sym                                    parameter       pointer                  dcl 19 ref 12 53
symbol                    3            based           pointer                  level 2 in structure "reference" packed packed
                                                                                  unaligned dcl 12-3 in procedure "get_size" ref 65
symbol                                 based           structure                level 1 dcl 7-3 in procedure "get_size"
token                     5            based           pointer                  level 2 in structure "symbol" packed packed
                                                                                  unaligned dcl 7-3 in procedure "get_size" ref 293
token                                  based           structure                level 1 dcl 13-3 in procedure "get_size"
token_node                             constant        bit(9)                   initial dcl 11-5 ref 141 262
type                                   based           bit(9)                   level 2 packed packed unaligned dcl 11-27 ref 141
                                                                                  262
units                           000112 automatic       fixed bin(3,0)           dcl 21 set ref 79* 87* 95* 103* 117* 129* 136* 163*
                                                                                  172* 189* 197* 205* 214* 221* 228* 235* 242* 249*
                                                                                  257* 283* 290* 299* 335 338 340 340 344 346 346
                                                                                  350 355* 369* 374 377 381 381 388 388* 388 393 396
                                                                                  400* 407* 412 417* 424* 429 432* 436
unsigned                 31(24)        based           bit(1)                   level 4 packed packed unaligned dcl 7-3 ref 106
varying                  31(26)        based           bit(1)                   level 4 packed packed unaligned dcl 7-3 ref 68 360
varying_ref               0(10)        based           bit(1)                   level 2 packed packed unaligned dcl 12-3 set ref 68*
word_                                  constant        fixed bin(3,0)           initial dcl 16-5 ref 163 172 214 221 228 235 242 249
                                                                                  283 290 299 310 324 330 344 355 374 388 393 400
                                                                                  417 432
word_size                22            based           pointer                  level 2 packed packed unaligned dcl 7-3 set ref 88*
                                                                                  96* 191* 199* 251* 335 338 340 346 351 352* 360
                                                                                  363* 363 374 378 379* 391
words_per_condition_var                constant        fixed bin(31,0)          initial dcl 17-5 ref 291
words_per_entry_var                    constant        fixed bin(31,0)          initial dcl 17-5 ref 215
words_per_file_var                     constant        fixed bin(31,0)          initial dcl 17-5 ref 229
words_per_fix_bin_1                    constant        fixed bin(31,0)          initial dcl 17-5 ref 180 312
words_per_fix_bin_2                    constant        fixed bin(31,0)          initial dcl 17-5 ref 178
words_per_flt_bin_1                    constant        fixed bin(31,0)          initial dcl 17-5 ref 177 316
words_per_flt_bin_2                    constant        fixed bin(31,0)          initial dcl 17-5 ref 174
words_per_format                       constant        fixed bin(31,0)          initial dcl 17-5 ref 236
words_per_label_var                    constant        fixed bin(31,0)          initial dcl 17-5 ref 222
words_per_offset                       constant        fixed bin(31,0)          initial dcl 17-5 ref 243
words_per_packed_pointer               constant        fixed bin(31,0)          initial dcl 17-5 ref 166
words_per_pointer                      constant        fixed bin(31,0)          initial dcl 17-5 ref 164
words_per_varying_string_header 000044 constant        fixed bin(31,0)          initial dcl 17-5 set ref 360 363* 363*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
a_format                               internal static bit(9)                   initial dcl 15-8
abs_fun                                internal static bit(9)                   initial dcl 15-8
acos_fun                               internal static bit(9)                   initial dcl 15-8
acosd_fun                              internal static bit(9)                   initial dcl 15-8
addbitno_fun                           internal static bit(9)                   initial dcl 15-8
addcharno_fun                          internal static bit(9)                   initial dcl 15-8
addr_fun                               internal static bit(9)                   initial dcl 15-8
addr_fun_bits                          internal static bit(9)                   initial dcl 15-8
addrel_fun                             internal static bit(9)                   initial dcl 15-8
adjust_count                    000000 constant        entry                    external dcl 1-20
allocate_statement                     internal static bit(9)                   initial dcl 10-3
allocation_fun                         internal static bit(9)                   initial dcl 15-8
allot_auto                             internal static bit(9)                   initial dcl 15-8
allot_based                            internal static bit(9)                   initial dcl 15-8
allot_ctl                              internal static bit(9)                   initial dcl 15-8
allot_var                              internal static bit(9)                   initial dcl 15-8
and_bits                               internal static bit(9)                   initial dcl 15-8
arg_desc_type                          internal static bit(36)                  initial dcl 17-71
array_node                             internal static bit(9)                   initial dcl 11-5
asin_fun                               internal static bit(9)                   initial dcl 15-8
asind_fun                              internal static bit(9)                   initial dcl 15-8
assign_by_name                         internal static bit(9)                   initial dcl 15-8
assign_round                           internal static bit(9)                   initial dcl 15-8
assign_size_ck                         internal static bit(9)                   initial dcl 15-8
assign_zero                            internal static bit(9)                   initial dcl 15-8
atan_fun                               internal static bit(9)                   initial dcl 15-8
atand_fun                              internal static bit(9)                   initial dcl 15-8
b_format                               internal static bit(9)                   initial dcl 15-8
baseno_fun                             internal static bit(9)                   initial dcl 15-8
baseptr_fun                            internal static bit(9)                   initial dcl 15-8
begin_statement                        internal static bit(9)                   initial dcl 10-3
binary_to_octal_string          000000 constant        entry                    external dcl 1-38
binary_to_octal_var_string      000000 constant        entry                    external dcl 1-43
bindec                          000000 constant        entry                    external dcl 1-23
bindec$vs                       000000 constant        entry                    external dcl 1-28
binoct                          000000 constant        entry                    external dcl 1-33
bit_pointer                            internal static bit(9)                   initial dcl 15-8
bit_to_char                            internal static bit(9)                   initial dcl 15-8
bit_type                               internal static bit(36)                  initial dcl 17-71
bitno_fun                              internal static bit(9)                   initial dcl 15-8
bits_per_decimal_digit                 internal static fixed bin(31,0)          initial dcl 17-5
bits_per_digit                         internal static fixed bin(31,1)          initial dcl 17-69
bits_per_double                        internal static fixed bin(31,0)          initial dcl 17-5
bits_per_half                          internal static fixed bin(31,0)          initial dcl 17-5
block_node                             internal static bit(9)                   initial dcl 11-5
bn_format                              internal static bit(9)                   initial dcl 15-8
bool_fun                               internal static bit(9)                   initial dcl 15-8
bound_ck                               internal static bit(9)                   initial dcl 15-8
bound_node                             internal static bit(9)                   initial dcl 11-5
builtin_type                           internal static bit(36)                  initial dcl 17-71
by_name_agg_node                       internal static bit(9)                   initial dcl 11-5
byte_fun                               internal static bit(9)                   initial dcl 15-8
c_format                               internal static bit(9)                   initial dcl 15-8
call_statement                         internal static bit(9)                   initial dcl 10-3
cat_string                             internal static bit(9)                   initial dcl 15-8
ceil_fun                               internal static bit(9)                   initial dcl 15-8
char_type                              internal static bit(36)                  initial dcl 17-71
characters_per_double                  internal static fixed bin(31,0)          initial dcl 17-5
charno_fun                             internal static bit(9)                   initial dcl 15-8
clock_fun                              internal static bit(9)                   initial dcl 15-8
close_file                             internal static bit(9)                   initial dcl 15-8
close_statement                        internal static bit(9)                   initial dcl 10-3
codeptr_fun                            internal static bit(9)                   initial dcl 15-8
column_format                          internal static bit(9)                   initial dcl 15-8
compare_expression              000000 constant        entry                    external dcl 1-48
complex_fun                            internal static bit(9)                   initial dcl 15-8
complex_type                           internal static bit(36)                  initial dcl 17-71
conjg_fun                              internal static bit(9)                   initial dcl 15-8
constant_length                 000000 constant        entry                    external dcl 1-54
context_node                           internal static bit(9)                   initial dcl 11-5
continue_statement                     internal static bit(9)                   initial dcl 10-3
convert                         000000 constant        entry                    external dcl 1-60
convert$from_builtin            000000 constant        entry                    external dcl 1-72
convert$to_integer              000000 constant        entry                    external dcl 1-66
convert$to_target               000000 constant        entry                    external dcl 1-88
convert$to_target_fb            000000 constant        entry                    external dcl 1-82
convert$validate                000000 constant        entry                    external dcl 1-78
copy_expression                 000000 constant        entry                    external dcl 1-94
copy_expression$copy_sons       000000 constant        entry                    external dcl 1-99
copy_string                            internal static bit(9)                   initial dcl 15-8
copy_unique_expression          000000 constant        entry                    external dcl 1-103
copy_words                             internal static bit(9)                   initial dcl 15-8
cos_fun                                internal static bit(9)                   initial dcl 15-8
cosd_fun                               internal static bit(9)                   initial dcl 15-8
create_array                    000000 constant        entry                    external dcl 1-108
create_block                    000000 constant        entry                    external dcl 1-112
create_bound                    000000 constant        entry                    external dcl 1-118
create_context                  000000 constant        entry                    external dcl 1-122
create_cross_reference          000000 constant        entry                    external dcl 1-128
create_default                  000000 constant        entry                    external dcl 1-132
create_identifier               000000 constant        entry                    external dcl 1-136
create_label                    000000 constant        entry                    external dcl 1-140
create_list                     000000 constant        entry                    external dcl 1-147
create_reference                000000 constant        entry                    external dcl 1-158
create_statement                000000 constant        entry                    external dcl 1-163
create_storage                  000000 constant        entry                    external dcl 1-179
create_symbol                   000000 constant        entry                    external dcl 1-184
create_token                    000000 constant        entry                    external dcl 1-191
create_token$init_hash_table    000000 constant        entry                    external dcl 1-197
create_token$protected          000000 constant        entry                    external dcl 1-199
cross_reference_node                   internal static bit(9)                   initial dcl 11-5
dec_integer_type                       internal static bit(36)                  initial dcl 17-71
decbin                          000000 constant        entry                    external dcl 1-206
declare_constant                000000 constant        entry                    external dcl 1-211
declare_constant$bit            000000 constant        entry                    external dcl 1-219
declare_constant$char           000000 constant        entry                    external dcl 1-224
declare_constant$desc           000000 constant        entry                    external dcl 1-229
declare_descriptor              000000 constant        entry                    external dcl 1-239
declare_descriptor$ctl          000000 constant        entry                    external dcl 1-249
declare_descriptor$param        000000 constant        entry                    external dcl 1-259
declare_picture_temp            000000 constant        entry                    external dcl 1-279
declare_pointer                 000000 constant        entry                    external dcl 1-287
declare_statement                      internal static bit(9)                   initial dcl 10-3
declare_temporary               000000 constant        entry                    external dcl 1-292
decode_node_id                  000000 constant        entry                    external dcl 1-300
decode_source_id                000000 constant        entry                    external dcl 1-306
default_area_size                      internal static fixed bin(31,0)          initial dcl 17-5
default_fix_bin_p                      internal static fixed bin(31,0)          initial dcl 17-5
default_fix_dec_p                      internal static fixed bin(31,0)          initial dcl 17-5
default_flt_bin_p                      internal static fixed bin(31,0)          initial dcl 17-5
default_flt_dec_p                      internal static fixed bin(31,0)          initial dcl 17-5
default_node                           internal static bit(9)                   initial dcl 11-5
default_statement                      internal static bit(9)                   initial dcl 10-3
delete_file                            internal static bit(9)                   initial dcl 15-8
delete_statement                       internal static bit(9)                   initial dcl 10-3
desc_size                              internal static bit(9)                   initial dcl 15-8
digit_                                 internal static fixed bin(3,0)           initial dcl 16-5
digit_to_bit                           internal static bit(9)                   initial dcl 15-8
display_statement                      internal static bit(9)                   initial dcl 10-3
div                                    internal static bit(9)                   initial dcl 15-8
do_fun                                 internal static bit(9)                   initial dcl 15-8
do_spec                                internal static bit(9)                   initial dcl 15-8
do_statement                           internal static bit(9)                   initial dcl 10-3
e_format                               internal static bit(9)                   initial dcl 15-8
else_clause                            internal static bit(9)                   initial dcl 10-3
empty_area                             internal static bit(9)                   initial dcl 15-8
enable_on                              internal static bit(9)                   initial dcl 15-8
end_statement                          internal static bit(9)                   initial dcl 10-3
entry_statement                        internal static bit(9)                   initial dcl 10-3
entry_var_type                         internal static bit(36)                  initial dcl 17-71
environmentptr_fun                     internal static bit(9)                   initial dcl 15-8
equal                                  internal static bit(9)                   initial dcl 15-8
error                           000000 constant        entry                    external dcl 1-314
error$omit_text                 000000 constant        entry                    external dcl 1-319
error_                          000000 constant        entry                    external dcl 1-324
error_$finish                   000000 constant        entry                    external dcl 1-343
error_$initialize_error         000000 constant        entry                    external dcl 1-341
error_$no_text                  000000 constant        entry                    external dcl 1-334
ex_prologue                            internal static bit(9)                   initial dcl 15-8
exit_statement                         internal static bit(9)                   initial dcl 10-3
exp                                    internal static bit(9)                   initial dcl 15-8
exp_fun                                internal static bit(9)                   initial dcl 15-8
f_format                               internal static bit(9)                   initial dcl 15-8
floor_fun                              internal static bit(9)                   initial dcl 15-8
format_statement                       internal static bit(9)                   initial dcl 10-3
format_value_node                      internal static bit(9)                   initial dcl 11-5
fortran_read                           internal static bit(9)                   initial dcl 15-8
fortran_write                          internal static bit(9)                   initial dcl 15-8
free_based                             internal static bit(9)                   initial dcl 15-8
free_ctl                               internal static bit(9)                   initial dcl 15-8
free_node                       000000 constant        entry                    external dcl 1-345
free_statement                         internal static bit(9)                   initial dcl 10-3
free_var                               internal static bit(9)                   initial dcl 15-8
ftn_file_manip                         internal static bit(9)                   initial dcl 15-8
ftn_trans_loop                         internal static bit(9)                   initial dcl 15-8
get_data_trans                         internal static bit(9)                   initial dcl 15-8
get_edit_trans                         internal static bit(9)                   initial dcl 15-8
get_file                               internal static bit(9)                   initial dcl 15-8
get_list_trans                         internal static bit(9)                   initial dcl 15-8
get_size                        000000 constant        entry                    external dcl 1-352
get_statement                          internal static bit(9)                   initial dcl 10-3
get_string                             internal static bit(9)                   initial dcl 15-8
goto_statement                         internal static bit(9)                   initial dcl 10-3
greater_or_equal                       internal static bit(9)                   initial dcl 15-8
greater_than                           internal static bit(9)                   initial dcl 15-8
if_statement                           internal static bit(9)                   initial dcl 10-3
imag_fun                               internal static bit(9)                   initial dcl 15-8
index_after_fun                        internal static bit(9)                   initial dcl 15-8
index_before_fun                       internal static bit(9)                   initial dcl 15-8
index_fun                              internal static bit(9)                   initial dcl 15-8
index_rev_fun                          internal static bit(9)                   initial dcl 15-8
integer_type                           internal static bit(36)                  initial dcl 17-71
join                                   internal static bit(9)                   initial dcl 15-8
jump                                   internal static bit(9)                   initial dcl 15-8
jump_false                             internal static bit(9)                   initial dcl 15-8
jump_if_eq                             internal static bit(9)                   initial dcl 15-8
jump_if_ge                             internal static bit(9)                   initial dcl 15-8
jump_if_gt                             internal static bit(9)                   initial dcl 15-8
jump_if_le                             internal static bit(9)                   initial dcl 15-8
jump_if_lt                             internal static bit(9)                   initial dcl 15-8
jump_if_ne                             internal static bit(9)                   initial dcl 15-8
jump_true                              internal static bit(9)                   initial dcl 15-8
l_parn                                 internal static bit(9)                   initial dcl 15-8
label_array_element_node               internal static bit(9)                   initial dcl 11-5
label_node                             internal static bit(9)                   initial dcl 11-5
length_fun                             internal static bit(9)                   initial dcl 15-8
less_or_equal                          internal static bit(9)                   initial dcl 15-8
less_than                              internal static bit(9)                   initial dcl 15-8
line_format                            internal static bit(9)                   initial dcl 15-8
list_node                              internal static bit(9)                   initial dcl 11-5
local_label_var_type                   internal static bit(36)                  initial dcl 17-71
locate_file                            internal static bit(9)                   initial dcl 15-8
locate_statement                       internal static bit(9)                   initial dcl 10-3
lock_file                              internal static bit(9)                   initial dcl 15-8
lock_fun                               internal static bit(9)                   initial dcl 15-8
lock_statement                         internal static bit(9)                   initial dcl 10-3
log10_fun                              internal static bit(9)                   initial dcl 15-8
log2_fun                               internal static bit(9)                   initial dcl 15-8
log_fun                                internal static bit(9)                   initial dcl 15-8
loop                                   internal static bit(9)                   initial dcl 15-8
machine_state_node                     internal static bit(9)                   initial dcl 11-5
make_desc                              internal static bit(9)                   initial dcl 15-8
max_area_size                          internal static fixed bin(31,0)          initial dcl 17-5
max_bit_string                         internal static fixed bin(31,0)          initial dcl 17-5
max_bit_string_constant                internal static fixed bin(31,0)          initial dcl 17-5
max_block_number                       internal static fixed bin(17,0)          initial dcl 8-74
max_char_string                        internal static fixed bin(31,0)          initial dcl 17-5
max_char_string_constant               internal static fixed bin(31,0)          initial dcl 17-5
max_fun                                internal static bit(9)                   initial dcl 15-8
max_identifier_length                  internal static fixed bin(31,0)          initial dcl 17-5
max_index_register_value               internal static fixed bin(31,0)          initial dcl 17-5
max_number_of_dimensions               internal static fixed bin(31,0)          initial dcl 17-5
max_number_of_operands                 internal static fixed bin(15,0)          initial dcl 14-15
max_offset_precision                   internal static fixed bin(31,0)          initial dcl 17-5
max_p_bin_or_dec                       internal static fixed bin(31,0)          initial dcl 17-5
max_p_dec                              internal static fixed bin(31,0)          initial dcl 17-5
max_p_fix_bin_2                        internal static fixed bin(31,0)          initial dcl 17-5
max_p_flt_bin_2                        internal static fixed bin(31,0)          initial dcl 17-5
max_scale                              internal static fixed bin(31,0)          initial dcl 17-5
max_signed_index_register_value        internal static fixed bin(31,0)          initial dcl 17-5
max_signed_xreg_precision              internal static fixed bin(31,0)          initial dcl 17-5
max_uns_xreg_precision                 internal static fixed bin(31,0)          initial dcl 17-5
max_words_per_variable                 internal static fixed bin(31,0)          initial dcl 17-5
merge_attributes                000000 constant        entry                    external dcl 1-355
min_area_size                          internal static fixed bin(31,0)          initial dcl 17-5
min_fun                                internal static bit(9)                   initial dcl 15-8
min_scale                              internal static fixed bin(31,0)          initial dcl 17-5
mod4_                                  internal static fixed bin(3,0)           initial dcl 16-5
mod_bit                                internal static bit(9)                   initial dcl 15-8
mod_byte                               internal static bit(9)                   initial dcl 15-8
mod_fun                                internal static bit(9)                   initial dcl 15-8
mod_half                               internal static bit(9)                   initial dcl 15-8
mod_word                               internal static bit(9)                   initial dcl 15-8
n                                      automatic       fixed bin(15,0)          dcl 20
negate                                 internal static bit(9)                   initial dcl 15-8
nop                                    internal static bit(9)                   initial dcl 15-8
not_bits                               internal static bit(9)                   initial dcl 15-8
not_equal                              internal static bit(9)                   initial dcl 15-8
null_statement                         internal static bit(9)                   initial dcl 10-3
off_fun                                internal static bit(9)                   initial dcl 15-8
on_statement                           internal static bit(9)                   initial dcl 10-3
open_file                              internal static bit(9)                   initial dcl 15-8
open_statement                         internal static bit(9)                   initial dcl 10-3
operator_node                          internal static bit(9)                   initial dcl 11-5
optimizer                       000000 constant        entry                    external dcl 1-361
or_bits                                internal static bit(9)                   initial dcl 15-8
pack                                   internal static bit(9)                   initial dcl 15-8
page_format                            internal static bit(9)                   initial dcl 15-8
param_desc_ptr                         internal static bit(9)                   initial dcl 15-8
param_ptr                              internal static bit(9)                   initial dcl 15-8
parse_error                     000000 constant        entry                    external dcl 1-364
parse_error$no_text             000000 constant        entry                    external dcl 1-368
picture_format                         internal static bit(9)                   initial dcl 15-8
pl1_error_print$listing_segment 000000 constant        entry                    external dcl 1-384
pl1_error_print$write_out       000000 constant        entry                    external dcl 1-372
pl1_mod_fun                            internal static bit(9)                   initial dcl 15-8
pl1_print$for_lex               000000 constant        entry                    external dcl 1-418
pl1_print$non_varying           000000 constant        entry                    external dcl 1-398
pl1_print$non_varying_nl        000000 constant        entry                    external dcl 1-402
pl1_print$string_pointer        000000 constant        entry                    external dcl 1-406
pl1_print$string_pointer_nl     000000 constant        entry                    external dcl 1-410
pl1_print$unaligned_nl          000000 constant        entry                    external dcl 1-414
pl1_print$varying               000000 constant        entry                    external dcl 1-392
pl1_print$varying_nl            000000 constant        entry                    external dcl 1-395
pointer_type                           internal static bit(36)                  initial dcl 17-71
prefix_plus                            internal static bit(9)                   initial dcl 15-8
procedure_statement                    internal static bit(9)                   initial dcl 10-3
ptr_fun                                internal static bit(9)                   initial dcl 15-8
put_control                            internal static bit(9)                   initial dcl 15-8
put_data_trans                         internal static bit(9)                   initial dcl 15-8
put_edit_trans                         internal static bit(9)                   initial dcl 15-8
put_field                              internal static bit(9)                   initial dcl 15-8
put_field_chk                          internal static bit(9)                   initial dcl 15-8
put_file                               internal static bit(9)                   initial dcl 15-8
put_list_trans                         internal static bit(9)                   initial dcl 15-8
put_statement                          internal static bit(9)                   initial dcl 10-3
put_string                             internal static bit(9)                   initial dcl 15-8
r_format                               internal static bit(9)                   initial dcl 15-8
r_parn                                 internal static bit(9)                   initial dcl 15-8
range_ck                               internal static bit(9)                   initial dcl 15-8
rank_fun                               internal static bit(9)                   initial dcl 15-8
read_file                              internal static bit(9)                   initial dcl 15-8
read_statement                         internal static bit(9)                   initial dcl 10-3
real_fun                               internal static bit(9)                   initial dcl 15-8
real_type                              internal static bit(36)                  initial dcl 17-71
record_io                              internal static bit(9)                   initial dcl 15-8
refer                                  internal static bit(9)                   initial dcl 15-8
refer_extent                    000000 constant        entry                    external dcl 1-426
reference_node                         internal static bit(9)                   initial dcl 11-5
rel_fun                                internal static bit(9)                   initial dcl 15-8
repeat_fun                             internal static bit(9)                   initial dcl 15-8
reserve$clear                   000000 constant        entry                    external dcl 1-430
reserve$declare_lib             000000 constant        entry                    external dcl 1-434
reserve$read_lib                000000 constant        entry                    external dcl 1-439
return_bits                            internal static bit(9)                   initial dcl 15-8
return_statement                       internal static bit(9)                   initial dcl 10-3
return_string                          internal static bit(9)                   initial dcl 15-8
return_value                           internal static bit(9)                   initial dcl 15-8
return_words                           internal static bit(9)                   initial dcl 15-8
reverse_fun                            internal static bit(9)                   initial dcl 15-8
revert_on                              internal static bit(9)                   initial dcl 15-8
revert_statement                       internal static bit(9)                   initial dcl 10-3
rewrite_file                           internal static bit(9)                   initial dcl 15-8
rewrite_statement                      internal static bit(9)                   initial dcl 10-3
round_fun                              internal static bit(9)                   initial dcl 15-8
search_fun                             internal static bit(9)                   initial dcl 15-8
search_rev_fun                         internal static bit(9)                   initial dcl 15-8
segno_fun                              internal static bit(9)                   initial dcl 15-8
semantic_translator             000000 constant        entry                    external dcl 1-444
semantic_translator$abort       000000 constant        entry                    external dcl 1-446
semantic_translator$error       000000 constant        entry                    external dcl 1-450
setbitno_fun                           internal static bit(9)                   initial dcl 15-8
setcharno_fun                          internal static bit(9)                   initial dcl 15-8
sf_par_node                            internal static bit(9)                   initial dcl 11-5
share_expression                000000 constant        entry                    external dcl 1-454
sign_fun                               internal static bit(9)                   initial dcl 15-8
signal_on                              internal static bit(9)                   initial dcl 15-8
signal_statement                       internal static bit(9)                   initial dcl 10-3
sin_fun                                internal static bit(9)                   initial dcl 15-8
sind_fun                               internal static bit(9)                   initial dcl 15-8
skip_format                            internal static bit(9)                   initial dcl 15-8
source_node                            internal static bit(9)                   initial dcl 11-5
sqrt_fun                               internal static bit(9)                   initial dcl 15-8
stack_ptr                              internal static bit(9)                   initial dcl 15-8
stackbaseptr_fun                       internal static bit(9)                   initial dcl 15-8
stackframeptr_fun                      internal static bit(9)                   initial dcl 15-8
stacq_fun                              internal static bit(9)                   initial dcl 15-8
statement_node                         internal static bit(9)                   initial dcl 11-5
std_arg_list                           internal static bit(9)                   initial dcl 15-8
std_call                               internal static bit(9)                   initial dcl 15-8
std_entry                              internal static bit(9)                   initial dcl 15-8
std_return                             internal static bit(9)                   initial dcl 15-8
stop                                   internal static bit(9)                   initial dcl 15-8
stop_statement                         internal static bit(9)                   initial dcl 10-3
storage_block_type                     internal static bit(36)                  initial dcl 17-71
stream_prep                            internal static bit(9)                   initial dcl 15-8
sub                                    internal static bit(9)                   initial dcl 15-8
symbol_node                            internal static bit(9)                   initial dcl 11-5
system_on_unit                         internal static bit(9)                   initial dcl 10-3
tan_fun                                internal static bit(9)                   initial dcl 15-8
tand_fun                               internal static bit(9)                   initial dcl 15-8
temporary_node                         internal static bit(9)                   initial dcl 11-5
terminate_trans                        internal static bit(9)                   initial dcl 15-8
token_to_binary                 000000 constant        entry                    external dcl 1-459
translate_fun                          internal static bit(9)                   initial dcl 15-8
trunc_fun                              internal static bit(9)                   initial dcl 15-8
unknown_statement                      internal static bit(9)                   initial dcl 10-3
unlock_file                            internal static bit(9)                   initial dcl 15-8
unlock_statement                       internal static bit(9)                   initial dcl 10-3
unpack                                 internal static bit(9)                   initial dcl 15-8
vclock_fun                             internal static bit(9)                   initial dcl 15-8
verify_fun                             internal static bit(9)                   initial dcl 15-8
verify_ltrim_fun                       internal static bit(9)                   initial dcl 15-8
verify_rev_fun                         internal static bit(9)                   initial dcl 15-8
verify_rtrim_fun                       internal static bit(9)                   initial dcl 15-8
wait_statement                         internal static bit(9)                   initial dcl 10-3
word_to_mod2                           internal static bit(9)                   initial dcl 15-8
word_to_mod4                           internal static bit(9)                   initial dcl 15-8
word_to_mod8                           internal static bit(9)                   initial dcl 15-8
wordno_fun                             internal static bit(9)                   initial dcl 15-8
write_file                             internal static bit(9)                   initial dcl 15-8
write_statement                        internal static bit(9)                   initial dcl 10-3
x_format                               internal static bit(9)                   initial dcl 15-8
xor_bits                               internal static bit(9)                   initial dcl 15-8

NAMES DECLARED BY EXPLICIT CONTEXT.
addf                            001562 constant        entry                    internal dcl 451 ref 363
common                          001566 constant        label                    dcl 455 ref 449
exit                            001547 constant        label                    dcl 436 ref 385 391 393 396 404 412 421
get_bit_size                    001154 constant        label                    dcl 335 ref 80
get_boundary                    001031 constant        label                    dcl 304 ref 90 98 112 124 131 157 167 184 192 200
                                                                                  209 216 223 230 237 244 252 278 285 296
get_size                        000053 constant        entry                    external dcl 12
multf                           001555 constant        entry                    internal dcl 442 ref 340

NAME DECLARED BY CONTEXT OR IMPLICATION.
mod                                                    builtin function         ref 119

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1766        2026    1641        1776
Length      2546    1641        40         504     124          10

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
get_size                            138 external procedure  is an external procedure.  
multf                                   internal procedure  shares stack frame of external procedure get_size.  

STORAGE FOR INTERNAL STATIC VARIABLES.

   LOC IDENTIFIER                  BLOCK NAME
000010 convert_map                 get_size

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
get_size                 000100 s                           get_size
                         000102 q                           get_size
                         000104 p                           get_size
                         000106 b                           get_size
                         000110 e                           get_size
                         000111 i                           get_size
                         000112 units                       get_size
                         000113 optable                     get_size
                         000126 c                           multf
                         000130 opcode                      multf

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ent_var        call_ext_out_desc   call_ext_out        return_mac          mpfx2               mdfx1
ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
create_operator               create_statement$prologue     declare_constant$integer      declare_integer
declare_picture               get_array_size

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
pl1_stat_$eis_mode            pl1_stat_$util_abort




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     12 000050        30 000060        53 000100        55 000104        57 000106        59 000111        61 000117
     62 000143        63 000164        64 000170        65 000207        68 000213        70 000223        72 000226
     73 000231        77 000233        79 000237        80 000242        83 000243        85 000246        87 000251
     88 000253        89 000255        90 000257        93 000260        95 000263        96 000265        97 000267
     98 000271       101 000272       103 000275       104 000277       106 000306       108 000314       110 000317
    112 000325       115 000326       117 000331       118 000333       119 000347       122 000354       124 000361
    127 000362       129 000365       130 000367       131 000371       134 000372       136 000375       138 000377
    141 000405       146 000413       148 000415       149 000440       151 000453       152 000454       154 000457
    157 000462       159 000463       161 000464       163 000467       164 000471       166 000477       167 000501
    170 000502       172 000505       174 000507       177 000520       178 000523       180 000531       182 000533
    184 000541       187 000542       189 000545       190 000547       191 000551       192 000553       195 000554
    197 000557       198 000561       199 000563       200 000565       203 000566       205 000571       206 000573
    207 000603       209 000611       212 000612       214 000615       215 000617       216 000621       219 000622
    221 000625       222 000627       223 000631       226 000632       228 000635       229 000637       230 000641
    233 000642       235 000645       236 000647       237 000651       240 000652       242 000655       243 000657
    244 000661       247 000662       249 000665       250 000667       251 000671       252 000673       255 000674
    257 000677       259 000701       262 000707       267 000715       269 000717       270 000742       272 000755
    273 000756       275 000761       278 000764       281 000765       283 000770       284 000772       285 000774
    288 000775       290 001000       291 001002       292 001004       293 001011       295 001024       296 001026
    299 001027       304 001031       308 001045       310 001052       312 001056       316 001075       320 001111
    324 001120       327 001133       330 001137       335 001154       338 001165       340 001173       344 001213
    346 001222       350 001234       351 001252       352 001256       355 001257       360 001261       363 001272
    369 001312       374 001327       377 001344       378 001362       379 001366       380 001367       381 001370
    385 001376       388 001403       391 001420       393 001423       396 001426       400 001444       401 001446
    402 001450       404 001451       407 001462       408 001464       412 001466       417 001505       418 001507
    419 001511       421 001512       424 001523       425 001525       429 001527       432 001543       433 001545
    436 001547       462 001554       442 001555       448 001557       449 001561       451 001562       454 001564
    455 001566       457 001603       458 001610       459 001613


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
