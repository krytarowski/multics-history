	COMPILATION LISTING OF SEGMENT rlm_get_info
	Compiled by: Multics PL/I Compiler, Release 33e, of October 6, 1992
	Compiled at: CGI                             
	Compiled on: 2000-04-18_1139.95_Tue_mdt
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        4*   *                                                         *
        5*   *********************************************************** */
        6 
        7 
        8 /* DESCRIPTION:
        9*
       10*         This  routine  is a utility which returns selected information about
       11*     the structure of a relation.    The  information  which  is  returned  is
       12*     restricted  to  commonly  used  single pieces of information, such as the
       13*     identifier of an  index.    For  more  information,  the  get_description
       14*     operation should be used.
       15*
       16*     Errors are reported via sub_err_.
       17*
       18*     The entrypoints in this routine are:
       19*          $get_index_id - given a relation_cursor and an id_list, returns
       20*                          the  identifier  of the index constructed of exactly
       21*                          the set of attributes specified in the id_list in the
       22*                          order specified in the id_list. If no match is found,
       23*                          "0"b is returned.
       24*
       25*          $get_record_collection_id - given  a  relation_cursor,  returns  the
       26*                          identifier of the record collection.
       27**/
       28 
       29 /* HISTORY:
       30*
       31*Written by Matthew Pierret, 05/23/84.
       32*Modified:
       33*11/09/84 by Stanford S. Cox:  MAIN: Chg upper bound on CEIL do to id_list.number_of_ids.
       34**/
       35 
       36 /* format: style2,ind3 */
       37 
       38 rlm_get_info:
       39    proc ();
       40 
       41       return;
       42 
       43 /* START OF DECLARATIONS */
       44 /* Parameter */
       45 
       46       dcl	    p_relation_cursor_ptr  ptr parameter;	/* points to a cursor for the relation*/
       47       dcl	    p_id_list_ptr	       ptr parameter;	/* points to an id_list structure containing    */
       48 						/* the identifiers of the attributes which make */
       49 						/* up the desired index */
       50 
       51 /* Automatic */
       52 
       53       dcl	    code		       fixed bin (35) init (0);
       54       dcl	    (attribute_idx, index_idx)
       55 			       fixed bin;
       56       dcl	    local_index_id	       bit (36) aligned;	/* is the identifier of the desired index, or "0"b*/
       57       dcl	    p_record_collection_id bit (36) aligned;	/* is the identifier of the record collection*/
       58 
       59 /* Based */
       60 /* Builtin */
       61 
       62       dcl	    null		       builtin;
       63 
       64 /* Constant */
       65 
       66       dcl	    myname	       init ("rlm_get_info") char (32) varying internal static options (constant);
       67 
       68 /* Entry */
       69 
       70       dcl	    rlm_opening_info$get   entry (bit (36) aligned, ptr, fixed bin (35));
       71       dcl	    sub_err_	       entry () options (variable);
       72 
       73 /* External */
       74 
       75       dcl	    error_table_$unimplemented_version
       76 			       fixed bin (35) ext;
       77 
       78 /* END OF DECLARATIONS */
       79 
       80 get_record_collection_id:
       81    entry (p_relation_cursor_ptr) returns (bit (36) aligned);
       82 
       83       relation_cursor_ptr = p_relation_cursor_ptr;
       84 
       85       call CHECK_VERSION (relation_cursor.version, RELATION_CURSOR_VERSION_2, "relation_cursor");
       86 
       87       call rlm_opening_info$get (relation_cursor.file_opening_id, relation_opening_info_ptr, code);
       88       if code ^= 0
       89       then call sub_err_ (code, myname, ACTION_CANT_RESTART, null, 0,
       90 	      "^/Unable to get opening information associated with the supplied^/relation_cursor_ptr value, ^p, which is associated with the^/relation opening identifier ^3bo."
       91 	      , relation_cursor_ptr, relation_cursor.file_opening_id);
       92 
       93       call CHECK_VERSION (relation_opening_info.version, RELATION_OPENING_INFO_VERSION_2, "relation_opening_info");
       94 
       95       relation_header_ptr = relation_opening_info.relation_header_ptr;
       96       call CHECK_VERSION (relation_header.version, RELATION_HEADER_VERSION_3, "relation_header");
       97 
       98       p_record_collection_id = relation_header.record_collection_id;
       99 
      100       return (p_record_collection_id);
      101 
      102 get_index_id:
      103    entry (p_relation_cursor_ptr, p_id_list_ptr) returns (bit (36) aligned);
      104 
      105       relation_cursor_ptr = p_relation_cursor_ptr;
      106       call CHECK_VERSION (relation_cursor.version, RELATION_CURSOR_VERSION_2, "relation_cursor");
      107 
      108       id_list_ptr = p_id_list_ptr;
      109       call CHECK_VERSION_FB (id_list.version, (ID_LIST_VERSION_1), "id_list");
      110 
      111       call rlm_opening_info$get (relation_cursor.file_opening_id, relation_opening_info_ptr, code);
      112       if code ^= 0
      113       then call sub_err_ (code, myname, ACTION_CANT_RESTART, null, 0,
      114 	      "^/Unable to get opening information associated with the supplied^/relation_cursor_ptr value, ^p, which is associated with the^/relation opening identifier ^3bo."
      115 	      , relation_cursor_ptr, relation_cursor.file_opening_id);
      116 
      117       call CHECK_VERSION (relation_opening_info.version, RELATION_OPENING_INFO_VERSION_2, "relation_opening_info");
      118 
      119       index_attribute_map_ptr = relation_opening_info.index_attribute_map_ptr;
      120       call CHECK_VERSION (index_attribute_map.version, INDEX_ATTRIBUTE_MAP_VERSION_2, "index_attribute_map");
      121 
      122 CHECK_EACH_INDEX_LOOP:
      123       do index_idx = 1 to index_attribute_map.number_of_indices;
      124 
      125          if id_list.number_of_ids = index_attribute_map.index (index_idx).number_of_attributes
      126          then
      127 	  do;
      128 	     do attribute_idx = 1 to id_list.number_of_ids
      129 		while (id_list.id (attribute_idx)
      130 		= index_attribute_map.index (index_idx).attribute_id (attribute_idx));
      131 	     end;
      132 
      133 	     if attribute_idx > index_attribute_map.index (index_idx).number_of_attributes
      134 	     then
      135 	        do;				/* The attributes of this index match the supplied attributes */
      136 		 local_index_id = index_attribute_map.index (index_idx).collection_id;
      137 		 return (local_index_id);
      138 	        end;
      139 	  end;
      140       end CHECK_EACH_INDEX_LOOP;
      141 
      142       local_index_id = "0"b;
      143 
      144       return (local_index_id);
      145 
      146 CHECK_VERSION:
      147    proc (cv_p_received_version, cv_p_expected_version, cv_p_structure_name);
      148 
      149       dcl	    cv_p_received_version  char (8) aligned;
      150       dcl	    cv_p_expected_version  char (8) aligned;
      151       dcl	    cv_p_structure_name    char (*);
      152 
      153       if cv_p_received_version ^= cv_p_expected_version
      154       then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
      155 	      "^/Expected version ^a of the ^a structure.
      156 Received version ^d instead.", cv_p_expected_version, cv_p_structure_name, cv_p_received_version);
      157 
      158    end CHECK_VERSION;

      159 
      160 CHECK_VERSION_FB:
      161    proc (cv_p_received_version, cv_p_expected_version, cv_p_structure_name);
      162 
      163       dcl	    cv_p_received_version  fixed bin (35);
      164       dcl	    cv_p_expected_version  fixed bin (35);
      165       dcl	    cv_p_structure_name    char (*);
      166 
      167       if cv_p_received_version ^= cv_p_expected_version
      168       then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
      169 	      "^/Expected version ^a of the ^a structure.
      170 Received version ^d instead.", cv_p_expected_version, cv_p_structure_name, cv_p_received_version);
      171 
      172    end CHECK_VERSION_FB;
      173 
  1     1 /* BEGIN INCLUDE FILE dm_rlm_cursor.incl.pl1 */
  1     2 
  1     3 /* HISTORY:
  1     4*
  1     5*Written by Matthew Pierret, 05/19/83. 
  1     6*Modified:
  1     7*06/24/83 by Lindsey L. Spratt:  Changed to version 2.  Added the current.flags
  1     8*            structure, to add the search_index_and_record_collection flag.
  1     9*            This flag is only meaningful when doing a relative search.  It is
  1    10*            used by rlm_general_search to know what state the
  1    11*            internal_search_specification was left in (suitable for searching
  1    12*            the index or suitable for searching the records).
  1    13*10/29/84 by Stanford S. Cox:  Changed to not init version.
  1    14*02/12/85 by S. Cox:  Chg and_group_idx to fb17, current.flags.mbz to bit35.
  1    15**/
  1    16 
  1    17 /* format: style2,ind3 */
  1    18      dcl	   1 relation_cursor      aligned based (relation_cursor_ptr),
  1    19 	     2 version	      char (8),		/* version of this structure */
  1    20 	     2 work_area_ptr      ptr init (null),	/* points to area in which cursor is allocated. */
  1    21 	     2 file_opening_id    bit (36) aligned init ("0"b),
  1    22 						/* opening id of file in which relation resides */
  1    23 	     2 flags	      aligned,
  1    24 	       3 current_state_is_consistent
  1    25 			      bit (1) unal init ("0"b),
  1    26 						/* On if all values in current are insynch */
  1    27 	       3 mbz	      bit (35) unal init ("0"b),
  1    28 						/* must be zero */
  1    29 	     2 current,				/* current position in search */
  1    30 	       3 and_group_idx    fixed bin (17) aligned init (0),
  1    31 						/* in relation_search_specification */
  1    32 	       3 flags	      aligned,
  1    33 	         4 search_index_and_record_collection
  1    34 			      bit (1) unal init ("0"b),
  1    35 	         4 mbz	      bit (35) unal init ("0"b),
  1    36 	       3 collection_id    bit (36) aligned init ("0"b),
  1    37 						/* that cursor is define over */
  1    38 	       3 specification_ptr
  1    39 			      ptr init (null),	/* points to index or record specification */
  1    40 	       3 cursor_ptr	      ptr init (null);	/* points to index or record cursor */
  1    41 
  1    42      dcl	   relation_cursor_ptr    ptr init (null);
  1    43      dcl	   RELATION_CURSOR_VERSION_2
  1    44 			      init ("relcrs02") char (8) aligned internal static options (constant);
  1    45 
  1    46 /* END INCLUDE FILE dm_rlm_cursor.incl.pl1 */
      174 
      175 
  2     1 /* BEGIN INCLUDE FILE - dm_rlm_opening_info.incl.pl1 */
  2     2 
  2     3 /* Written by Matthew Pierret, 09/08/82. 
  2     4*Modified:
  2     5*01/18/83 by Matthew Pierret:  Changed version to be char (8). Added 
  2     6*            transaction_id.
  2     7*02/25/83 by Matthew Pierret:  Changed to relation_opening_info (from
  2     8*            relation_info).
  2     9*10/29/84 by Stanford S. Cox:  Changed to not init version.
  2    10**/
  2    11 
  2    12 
  2    13 /* format: style2,ind3 */
  2    14 
  2    15      dcl	   1 relation_opening_info
  2    16 			      aligned based (relation_opening_info_ptr),
  2    17 	     2 version	      char (8),
  2    18 	     2 per_process,
  2    19 	       3 current_transaction_id
  2    20 			      bit (36) aligned init ("0"b),
  2    21 	       3 current_rollback_count
  2    22 			      fixed bin (35) init (0),
  2    23 	       3 file_opening_id  bit (36) aligned init ("0"b),
  2    24 	       3 number_of_openings
  2    25 			      fixed bin (17) aligned init (0),
  2    26 	       3 lock_advice      aligned,
  2    27 	         4 this_process   bit (2) unaligned init ("0"b),
  2    28 	         4 other_processes
  2    29 			      bit (2) unaligned init ("0"b),
  2    30 	         4 mbz1	      bit (32) unaligned init ("0"b),
  2    31 	       3 record_cursor_ptr
  2    32 			      ptr init (null),
  2    33 	       3 index_cursor_array_ptr
  2    34 			      ptr init (null),
  2    35 	     2 relation_header_ptr
  2    36 			      ptr init (null),
  2    37 	     2 attribute_info_ptr ptr init (null),
  2    38 	     2 index_attribute_map_ptr
  2    39 			      ptr init (null);
  2    40 
  2    41      dcl	   relation_opening_info_ptr
  2    42 			      ptr;
  2    43      dcl	   RELATION_OPENING_INFO_VERSION_2
  2    44 			      init ("rlmopen2") char (8) aligned internal static options (constant);
  2    45 
  2    46 
  2    47 /* END INCLUDE FILE - dm_rlm_opening_info.incl.pl1 */
      176 
      177 
  3     1 /* BEGIN INCLUDE FILE - dm_rlm_header.incl.pl1 */
  3     2 
  3     3 /* HISTORY:
  3     4*Written by Matthew Pierret, 1982.
  3     5*Modified:
  3     6*02/25/83 by Matthew Pierret: Added attribute_info_element_id, 
  3     7*            header_info_update_count, RELATION_HEADER_VERSION_2.
  3     8*05/29/84 by Matthew Pierret: Added caller_header_element_id, 
  3     9*            RELATION_HEADER_VERSION_3.
  3    10*10/29/84 by Stanford S. Cox:  Changed to not init version.
  3    11**/
  3    12 
  3    13 /* format: style2,ind3 */
  3    14 
  3    15      dcl	   1 relation_header      aligned based (relation_header_ptr),
  3    16 	     2 version	      char (8),
  3    17 	     2 header_info_update_count
  3    18 			      fixed bin (35) aligned init (0),
  3    19 	     2 record_collection_id
  3    20 			      bit (36) aligned init ("0"b),
  3    21 	     2 cluster_index_id   bit (36) aligned init ("0"b),
  3    22 	     2 attribute_info_element_id
  3    23 			      bit (36) aligned init ("0"b),
  3    24 	     2 index_attribute_map_element_id
  3    25 			      bit (36) aligned init ("0"b),
  3    26 	     2 caller_header_element_id
  3    27 			      bit (36) aligned init ("0"b);
  3    28 
  3    29      dcl	   relation_header_ptr    ptr init (null);
  3    30      dcl	   RELATION_HEADER_VERSION_3
  3    31 			      init ("RelHdr 3") char (8) aligned internal static options (constant);
  3    32 
  3    33 /* END INCLUDE FILE - dm_rlm_header.incl.pl1 */
      178 
      179 
  4     1 /* BEGIN INCLUDE FILE - dm_rlm_index_attr_map.incl.pl1 */
  4     2 
  4     3 /* DESCRIPTION
  4     4*        
  4     5*   Relation index components.  This info is kept in the header
  4     6*   collection of existing files, therefore this incl should not be changed.
  4     7**/
  4     8 
  4     9 /* HISTORY:
  4    10*Written by Matthew Pierret, 01/15/83.
  4    11*Modified:
  4    12*10/29/84 by Stanford S. Cox: Changed to not init version.
  4    13*12/14/84 by Stanford S. Cox:  Backed out previous structure alignment changes
  4    14*   which were incompatible with existing DM files.        
  4    15**/
  4    16 
  4    17 /* format: style2,ind3 */
  4    18      dcl	   1 index_attribute_map  aligned based (index_attribute_map_ptr),
  4    19 	     2 version	      char (8),
  4    20 	     2 number_of_indices  fixed bin (17) unal init (0),
  4    21 	     2 maximum_number_of_indices
  4    22 			      fixed bin (17) unal,
  4    23 	     2 maximum_number_of_attributes_per_index
  4    24 			      fixed bin (17) unal,
  4    25 	     2 mbz	      fixed bin (17) unal,
  4    26 	     2 index	      (iam_maximum_number_of_indices refer (index_attribute_map.maximum_number_of_indices)),
  4    27 	       3 collection_id    bit (36) aligned,
  4    28 	       3 style	      fixed bin (17) unal,
  4    29 	       3 number_of_duplication_fields
  4    30 			      fixed bin (17) unal,
  4    31 	       3 number_of_attributes
  4    32 			      fixed bin (17) unal,
  4    33 	       3 attribute_id     (iam_maximum_number_of_attributes_per_index
  4    34 			      refer (index_attribute_map.maximum_number_of_attributes_per_index)) fixed
  4    35 			      bin (17) unal;
  4    36 
  4    37      dcl	   index_attribute_map_ptr
  4    38 			      ptr init (null);
  4    39      dcl	   iam_maximum_number_of_indices
  4    40 			      fixed bin (17);
  4    41      dcl	   iam_maximum_number_of_attributes_per_index
  4    42 			      fixed bin (17);
  4    43      dcl	   INDEX_ATTRIBUTE_MAP_VERSION_2
  4    44 			      init ("idx_map2") char (8) aligned internal static options (constant);
  4    45      dcl	   INITIAL_NUMBER_OF_INDICES
  4    46 			      init (5) fixed bin (17);
  4    47      dcl	   UNUSED_INDEX_ATTRIBUTE_MAP_ENTRY
  4    48 			      init (0) fixed bin (17);
  4    49 
  4    50 /* END INCLUDE FILE - dm_rlm_index_attr_map.incl.pl1 */
      180 
      181 
  5     1 /* BEGIN INCLUDE FILE - dm_id_list.incl.pl1 */
  5     2 
  5     3 /* DESCRIPTION
  5     4*        The id_list structure is used to identify attributes, fields and
  5     5*   dimensions by various modules of the Data Management System.
  5     6**/
  5     7 
  5     8 /* HISTORY:
  5     9*Written by Matthew Pierret, '82.
  5    10*Modified:
  5    11*08/17/83 by Matthew Pierret: Made version constant 'internal static options
  5    12*            (constant)' and to initialize automatic variables.
  5    13**/
  5    14 
  5    15 /* format: style2,ind3 */
  5    16      dcl	   1 id_list	      aligned based (id_list_ptr),
  5    17 	     2 version	      fixed bin (35),
  5    18 	     2 number_of_ids      fixed bin (17),
  5    19 	     2 id		      (il_number_of_ids refer (id_list.number_of_ids)) fixed bin (17);
  5    20 
  5    21      dcl	   id_list_ptr	      ptr init (null);
  5    22      dcl	   il_number_of_ids	      fixed bin (17) init (-1);
  5    23      dcl	   ID_LIST_VERSION_1      fixed bin (17) init (1) internal static options (constant);
  5    24 
  5    25 /* END INCLUDE FILE - dm_id_list.incl.pl1 */
      182 
      183 
  6     1 /* BEGIN INCLUDE FILE sub_err_flags.incl.pl1 BIM 11/81 */
  6     2 /* format: style3 */
  6     3 
  6     4 /* These constants are to be used for the flags argument of sub_err_ */
  6     5 /* They are just "string (condition_info_header.action_flags)" */
  6     6 
  6     7 declare	(
  6     8 	ACTION_CAN_RESTART	init (""b),
  6     9 	ACTION_CANT_RESTART init ("1"b),
  6    10 	ACTION_DEFAULT_RESTART
  6    11 			init ("01"b),
  6    12 	ACTION_QUIET_RESTART
  6    13 			init ("001"b),
  6    14 	ACTION_SUPPORT_SIGNAL
  6    15 			init ("0001"b)
  6    16 	)		bit (36) aligned internal static options (constant);
  6    17 
  6    18 /* End include file */
      184 
      185    end rlm_get_info;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    04/18/00  1139.9  rlm_get_info.pl1                  >udd>sm>ds>w>ml>rlm_get_info.pl1
174          1    03/06/85  1131.5  dm_rlm_cursor.incl.pl1            >ldd>incl>dm_rlm_cursor.incl.pl1
176          2    01/07/85  0959.6  dm_rlm_opening_info.incl.pl1      >ldd>incl>dm_rlm_opening_info.incl.pl1
178          3    01/07/85  0959.4  dm_rlm_header.incl.pl1            >ldd>incl>dm_rlm_header.incl.pl1
180          4    01/07/85  1001.7  dm_rlm_index_attr_map.incl.pl1    >ldd>incl>dm_rlm_index_attr_map.incl.pl1
182          5    10/14/83  1709.1  dm_id_list.incl.pl1               >ldd>incl>dm_id_list.incl.pl1
184          6    04/16/82  1058.1  sub_err_flags.incl.pl1            >ldd>incl>sub_err_flags.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
ACTION_CANT_RESTART             000000 constant        bit(36)                  initial dcl 6-7 set ref 88* 112* 153* 167*
ID_LIST_VERSION_1                      constant        fixed bin(17,0)          initial dcl 5-23 ref 109
INDEX_ATTRIBUTE_MAP_VERSION_2   000002 constant        char(8)                  initial dcl 4-43 set ref 120*
INITIAL_NUMBER_OF_INDICES       000116 automatic       fixed bin(17,0)          initial dcl 4-45 set ref 4-45*
RELATION_CURSOR_VERSION_2       000010 constant        char(8)                  initial dcl 1-43 set ref 85* 106*
RELATION_HEADER_VERSION_3       000004 constant        char(8)                  initial dcl 3-30 set ref 96*
RELATION_OPENING_INFO_VERSION_2 000006 constant        char(8)                  initial dcl 2-43 set ref 93* 117*
UNUSED_INDEX_ATTRIBUTE_MAP_ENTRY
                                000117 automatic       fixed bin(17,0)          initial dcl 4-47 set ref 4-47*
attribute_id              6(18)        based           fixed bin(17,0)          array level 3 packed packed unaligned dcl 4-18 ref
                                                                                  128
attribute_idx                   000101 automatic       fixed bin(17,0)          dcl 54 set ref 128* 128 128* 133
code                            000100 automatic       fixed bin(35,0)          initial dcl 53 set ref 53* 87* 88 88* 111* 112 112*
collection_id             4            based           bit(36)                  array level 3 dcl 4-18 ref 136
cv_p_expected_version                  parameter       char(8)                  dcl 150 in procedure "CHECK_VERSION" set ref 146 153
                                                                                  153*
cv_p_expected_version                  parameter       fixed bin(35,0)          dcl 164 in procedure "CHECK_VERSION_FB" set ref 160
                                                                                  167 167*
cv_p_received_version                  parameter       char(8)                  dcl 149 in procedure "CHECK_VERSION" set ref 146 153
                                                                                  153*
cv_p_received_version                  parameter       fixed bin(35,0)          dcl 163 in procedure "CHECK_VERSION_FB" set ref 160
                                                                                  167 167*
cv_p_structure_name                    parameter       char                     packed unaligned dcl 151 in procedure
                                                                                  "CHECK_VERSION" set ref 146 153*
cv_p_structure_name                    parameter       char                     packed unaligned dcl 165 in procedure
                                                                                  "CHECK_VERSION_FB" set ref 160 167*
error_table_$unimplemented_version
                                000014 external static fixed bin(35,0)          dcl 75 set ref 153* 167*
file_opening_id           4            based           bit(36)                  initial level 2 dcl 1-18 set ref 87* 88* 111* 112*
id                        2            based           fixed bin(17,0)          array level 2 dcl 5-16 ref 128
id_list                                based           structure                level 1 dcl 5-16
id_list_ptr                     000120 automatic       pointer                  initial dcl 5-21 set ref 108* 109 125 128 128 5-21*
il_number_of_ids                000122 automatic       fixed bin(17,0)          initial dcl 5-22 set ref 5-22*
index                     4            based           structure                array level 2 dcl 4-18
index_attribute_map                    based           structure                level 1 dcl 4-18
index_attribute_map_ptr         000114 automatic       pointer                  initial dcl 4-37 in procedure "rlm_get_info" set ref
                                                                                  119* 120 122 125 128 133 136 4-37*
index_attribute_map_ptr
                         20            based           pointer                  initial level 2 in structure "relation_opening_info"
                                                                                  dcl 2-15 in procedure "rlm_get_info" ref 119
index_idx                       000102 automatic       fixed bin(17,0)          dcl 54 set ref 122* 125 128 133 136*
local_index_id                  000103 automatic       bit(36)                  dcl 56 set ref 136* 137 142* 144
maximum_number_of_attributes_per_index
                          3            based           fixed bin(17,0)          level 2 packed packed unaligned dcl 4-18 ref 125 125
                                                                                  128 128 133 133 136 136
myname                          000012 constant        varying char(32)         initial dcl 66 set ref 88* 112* 153* 167*
null                                                   builtin function         dcl 62 ref 88 88 112 112 1-42 3-29 4-37 5-21 153 153
                                                                                  167 167
number_of_attributes      6            based           fixed bin(17,0)          array level 3 packed packed unaligned dcl 4-18 ref
                                                                                  125 133
number_of_ids             1            based           fixed bin(17,0)          level 2 dcl 5-16 ref 125 128
number_of_indices         2            based           fixed bin(17,0)          initial level 2 packed packed unaligned dcl 4-18 ref
                                                                                  122
p_id_list_ptr                          parameter       pointer                  dcl 47 ref 102 108
p_record_collection_id          000104 automatic       bit(36)                  dcl 57 set ref 98* 100
p_relation_cursor_ptr                  parameter       pointer                  dcl 46 ref 80 83 102 105
record_collection_id      3            based           bit(36)                  initial level 2 dcl 3-15 ref 98
relation_cursor                        based           structure                level 1 dcl 1-18
relation_cursor_ptr             000106 automatic       pointer                  initial dcl 1-42 set ref 83* 85 87 88* 88 105* 106
                                                                                  111 112* 112 1-42*
relation_header                        based           structure                level 1 dcl 3-15
relation_header_ptr             000112 automatic       pointer                  initial dcl 3-29 in procedure "rlm_get_info" set ref
                                                                                  95* 96 98 3-29*
relation_header_ptr      14            based           pointer                  initial level 2 in structure "relation_opening_info"
                                                                                  dcl 2-15 in procedure "rlm_get_info" ref 95
relation_opening_info                  based           structure                level 1 dcl 2-15
relation_opening_info_ptr       000110 automatic       pointer                  dcl 2-41 set ref 87* 93 95 111* 117 119
rlm_opening_info$get            000010 constant        entry                    external dcl 70 ref 87 111
sub_err_                        000012 constant        entry                    external dcl 71 ref 88 112 153 167
version                                based           char(8)                  level 2 in structure "relation_cursor" dcl 1-18
                                                                                  in procedure "rlm_get_info" set ref 85* 106*
version                                based           char(8)                  level 2 in structure "relation_header" dcl 3-15
                                                                                  in procedure "rlm_get_info" set ref 96*
version                                based           char(8)                  level 2 in structure "index_attribute_map" dcl 4-18
                                                                                  in procedure "rlm_get_info" set ref 120*
version                                based           fixed bin(35,0)          level 2 in structure "id_list" dcl 5-16 in procedure
                                                                                  "rlm_get_info" set ref 109*
version                                based           char(8)                  level 2 in structure "relation_opening_info"
                                                                                  dcl 2-15 in procedure "rlm_get_info" set ref 93*
                                                                                  117*

NAMES DECLARED BY DECLARE STATEMENT AND NEVER REFERENCED.
ACTION_CAN_RESTART                     internal static bit(36)                  initial dcl 6-7
ACTION_DEFAULT_RESTART                 internal static bit(36)                  initial dcl 6-7
ACTION_QUIET_RESTART                   internal static bit(36)                  initial dcl 6-7
ACTION_SUPPORT_SIGNAL                  internal static bit(36)                  initial dcl 6-7
iam_maximum_number_of_attributes_per_index
                                       automatic       fixed bin(17,0)          dcl 4-41
iam_maximum_number_of_indices          automatic       fixed bin(17,0)          dcl 4-39

NAMES DECLARED BY EXPLICIT CONTEXT.
CHECK_EACH_INDEX_LOOP           000704 constant        label                    dcl 122
CHECK_VERSION                   001046 constant        entry                    internal dcl 146 ref 85 93 96 106 117 120
CHECK_VERSION_FB                001150 constant        entry                    internal dcl 160 ref 109
get_index_id                    000452 constant        entry                    external dcl 102
get_record_collection_id        000232 constant        entry                    external dcl 80
rlm_get_info                    000207 constant        entry                    external dcl 38

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      1346        1364    1244        1356
Length      1652    1244        16         252     102           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
rlm_get_info                        338 external procedure  is an external procedure.  
CHECK_VERSION                           internal procedure  shares stack frame of external procedure rlm_get_info.  
CHECK_VERSION_FB                        internal procedure  shares stack frame of external procedure rlm_get_info.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
rlm_get_info             000100 code                        rlm_get_info
                         000101 attribute_idx               rlm_get_info
                         000102 index_idx                   rlm_get_info
                         000103 local_index_id              rlm_get_info
                         000104 p_record_collection_id      rlm_get_info
                         000106 relation_cursor_ptr         rlm_get_info
                         000110 relation_opening_info_ptr   rlm_get_info
                         000112 relation_header_ptr         rlm_get_info
                         000114 index_attribute_map_ptr     rlm_get_info
                         000116 INITIAL_NUMBER_OF_INDICES   rlm_get_info
                         000117 UNUSED_INDEX_ATTRIBUTE_MAP_ENTRY
                                                            rlm_get_info
                         000120 id_list_ptr                 rlm_get_info
                         000122 il_number_of_ids            rlm_get_info

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out_desc   call_ext_out        return_mac          signal_op           ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
rlm_opening_info$get          sub_err_

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
error_table_$unimplemented_version




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     53 000170    1   42 000171    3   29 000173    4   37 000174    4   45 000175    4   47 000177    5   21 000200
 5   22 000202        38 000206        41 000217        80 000226        83 000244        85 000250        87 000273
     88 000307        93 000363        95 000405        96 000410        98 000433       100 000436       102 000446
    105 000464       106 000470       108 000513       109 000517       111 000542       112 000556       117 000632
    119 000654       120 000657       122 000704       125 000715       128 000735       131 000775       133 000777
    136 001017       137 001022       140 001032       142 001034       144 001035       146 001046       153 001057
    158 001147       160 001150       167 001161       172 001243


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
