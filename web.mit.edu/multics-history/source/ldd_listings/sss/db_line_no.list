	COMPILATION LISTING OF SEGMENT db_line_no
	Compiled by: Multics PL/I Compiler, Release 27d, of October 11, 1982
	Compiled at: Honeywell LISD Phoenix, System M
	Compiled on: 11/04/82  1821.8 mst Thu
	    Options: optimize map

        1 /* ***********************************************************
        2*   *                                                         *
        3*   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        4*   *                                                         *
        5*   * Copyright (c) 1972 by Massachusetts Institute of        *
        6*   * Technology and Honeywell Information Systems, Inc.      *
        7*   *                                                         *
        8*   *********************************************************** */
        9 
       10 
       11 db_line_no:	proc(a_sntp, offset, first, number, line_no);
       12 
       13 /*	Procedure to get the line number of the source statement associated
       14**	with a given offset in an object segment. Decides whether to call
       15**	get_line_no or get_runtime_line_no in stu_, according to whther
       16**	the symbol header is standard.
       17**
       18**	Coded March 1973 by Robert S> Coren.
       19**/
       20 
       21 dcl	a_sntp ptr;		/* pointer to snt structure(input) */
       22 dcl	offset fixed bin(18);	/* offset in object segment(input) */
       23 dcl	first fixed bin(18);	/* first location in line(output) */
       24 dcl	number fixed bin(18);	/* number of locations in line(output) */
       25 dcl	line_no fixed bin;		/* line number associated with offset(output) */
       26 
       27 dcl	db_get_sym entry(ptr);
       28 dcl	stu_$get_line_no entry(ptr, fixed bin(18), fixed bin(18), fixed bin(18),
       29 				fixed bin);
       30 dcl	stu_$get_runtime_line_no entry(ptr, fixed bin(18), fixed bin(18), fixed bin(18),
       31 				fixed bin);
       32 
  1     1 /*	BEGIN  INCLUDE  FILE ...  db_snt.incl.pl1  Last modified  Nov 1972.  WSS  */
  1     2 /*	Modified 8/75 to add internal static pointer by S.E. Barr */
  1     3 
  1     4 
  1     5 /*	Overlay of  segment name table.  */
  1     6 
  1     7 dcl	sntp	ptr;		/* Pointer to segment name table. */
  1     8 
  1     9 dcl     1	snt	based (sntp)  aligned,
  1    10 	2  ent_pt_name char(32),	/* Entry point name. */
  1    11 	2  ent_name    char(32),	/* Entry name of segment. */
  1    12 	2  dir_name    char(168),	/* Directory name. */
  1    13 	2  pp	     ptr,		/* Pointer to current procedure. */
  1    14 	2  sp          ptr,		/* Pointer to current stack frame. */
  1    15 	2  lp          ptr,		/* Pointer to linkage section. */
  1    16 	2  symp        ptr,		/* Pointer to current symbol table block. */
  1    17 	2  symflag     bit(1) unal,	/* ON => no symbol table defined. */
  1    18 	2  std	     bit(1) unal,	/* ON => standard symbol header.  */
  1    19 	2  headp	     ptr,		/* Pointer to current symbol header. */
  1    20 	2  static_ptr  ptr;		/* Pointer to current static section. */
  1    21 
  1    22 /*	END OF INCLUDE FILE...  db_snt.incl.pl1  */
       33 
       34 
       35 
       36 
       37 
       38 	sntp = a_sntp;
       39 	first, line_no = -1;
       40 
       41 	if snt.symflag then call db_get_sym(sntp);
       42 
       43 	/* with standard header, we can use the top-level symbol block */
       44 
       45 	if snt.std then do;
       46 	     if snt.headp ^= null() then
       47 	     call stu_$get_runtime_line_no(snt.headp, offset, first, number, line_no);
       48 
       49 	     return;
       50 	end;
       51 
       52 	/* Not standard, we'll have to make do with symbol table for current procedure */
       53 
       54 	if snt.symp ^= null() then
       55 	call stu_$get_line_no(snt.symp, offset, first, number, line_no);
       56 
       57 	return;
       58 
       59 	end db_line_no;
	SOURCE FILES USED IN THIS COMPILATION.

LINE      NUMBER  DATE MODIFIED     NAME			PATHNAME
             0    11/04/82  1628.5  db_line_no.pl1                    >dumps>old>recomp>db_line_no.pl1
33           1    11/06/75  1110.0  db_snt.incl.pl1                   >ldd>include>db_snt.incl.pl1
	NAMES DECLARED IN THIS COMPILATION.

IDENTIFIER	     OFFSET    LOC STORAGE CLASS   DATA TYPE		ATTRIBUTES AND REFERENCES
								(* indicates a set context)

NAMES DECLARED BY DECLARE STATEMENT.
a_sntp                                 parameter       pointer                  dcl 21 ref 11 38
db_get_sym                      000010 constant        entry                    external dcl 27 ref 41
first                                  parameter       fixed bin(18,0)          dcl 23 set ref 11 39* 46* 54*
headp                   104            based           pointer                  level 2 dcl 1-9 set ref 46 46*
line_no                                parameter       fixed bin(17,0)          dcl 25 set ref 11 39* 46* 54*
number                                 parameter       fixed bin(18,0)          dcl 24 set ref 11 46* 54*
offset                                 parameter       fixed bin(18,0)          dcl 22 set ref 11 46* 54*
snt                                    based           structure                level 1 dcl 1-9
sntp                            000100 automatic       pointer                  dcl 1-7 set ref 38* 41 41* 45 46 46 54 54
std                     102(01)        based           bit(1)                   level 2 packed unaligned dcl 1-9 ref 45
stu_$get_line_no                000012 constant        entry                    external dcl 28 ref 54
stu_$get_runtime_line_no        000014 constant        entry                    external dcl 30 ref 46
symflag                 102            based           bit(1)                   level 2 packed unaligned dcl 1-9 ref 41
symp                    100            based           pointer                  level 2 dcl 1-9 set ref 54 54*

NAME DECLARED BY EXPLICIT CONTEXT.
db_line_no                      000013 constant        entry                    external dcl 11

NAME DECLARED BY CONTEXT OR IMPLICATION.
null                                                   builtin function         ref 46 54

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0       172         210     117         202
Length       370     117        16         143      52           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
db_line_no                           82 external procedure  is an external procedure.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
db_line_no               000100 sntp                        db_line_no

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
call_ext_out        return              ext_entry

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
db_get_sym                    stu_$get_line_no              stu_$get_runtime_line_no

NO EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
     11 000006        38 000020        39 000024        41 000030        45 000041        46 000045        49 000071
     54 000072        57 000116


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
